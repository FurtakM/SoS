// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 16703 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 81276 0 9
// PrepareAmerican ;
  77: CALL 525 0 0
// PrepareArabian ;
  81: CALL 2197 0 0
// MC_Start ( ) ;
  85: CALL 18815 0 0
// Action ;
  89: CALL 7672 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 231000
 219: PUSH
 220: LD_INT 210000
 222: PUSH
 223: LD_INT 199500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// end ;
 287: LD_VAR 0 1
 291: RET
// export function CustomInitMacro ; var i ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 296: LD_ADDR_EXP 73
 300: PUSH
 301: LD_INT 20
 303: PUSH
 304: LD_INT 21
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 315: LD_ADDR_EXP 74
 319: PUSH
 320: LD_INT 28
 322: PUSH
 323: LD_INT 24
 325: PUSH
 326: LD_INT 26
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 334: LD_INT 1
 336: PPUSH
 337: LD_INT 6
 339: PUSH
 340: LD_INT 8
 342: PUSH
 343: LD_INT 9
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: PUSH
 351: LD_OWVAR 67
 355: ARRAY
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: CALL 39920 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 364: LD_INT 2
 366: PPUSH
 367: LD_INT 6
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: LD_INT 9
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: PUSH
 381: LD_OWVAR 67
 385: ARRAY
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: CALL 39920 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 6
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: LD_INT 9
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL 39920 0 3
// for i = 1 to mc_bases do
 424: LD_ADDR_VAR 0 2
 428: PUSH
 429: DOUBLE
 430: LD_INT 1
 432: DEC
 433: ST_TO_ADDR
 434: LD_EXP 49
 438: PUSH
 439: FOR_TO
 440: IFFALSE 464
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 442: LD_VAR 0 2
 446: PPUSH
 447: LD_EXP 42
 451: PUSH
 452: LD_VAR 0 2
 456: ARRAY
 457: PPUSH
 458: CALL 40346 0 2
 462: GO 439
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 1
 470: RET
// function Debuger ; var i ; begin
 471: LD_INT 0
 473: PPUSH
 474: PPUSH
// if not debug then
 475: LD_EXP 1
 479: NOT
 480: IFFALSE 484
// exit ;
 482: GO 520
// game_speed := 5 ;
 484: LD_ADDR_OWVAR 65
 488: PUSH
 489: LD_INT 5
 491: ST_TO_ADDR
// uc_side := 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// uc_nation := 1 ;
 500: LD_ADDR_OWVAR 21
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 508: LD_EXP 35
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: CALL_OW 235
// end ; end_of_file
 520: LD_VAR 0 1
 524: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 525: LD_INT 0
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side := 4 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 4
 542: ST_TO_ADDR
// uc_nation := 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 551: LD_ADDR_EXP 29
 555: PUSH
 556: LD_STRING Powell
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: LD_STRING 
 564: PPUSH
 565: CALL 46496 0 3
 569: ST_TO_ADDR
// uc_side := 1 ;
 570: LD_ADDR_OWVAR 20
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 578: LD_ADDR_EXP 20
 582: PUSH
 583: LD_STRING JMM
 585: PPUSH
 586: LD_EXP 1
 590: NOT
 591: PPUSH
 592: LD_EXP 4
 596: PPUSH
 597: CALL 46496 0 3
 601: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 602: LD_EXP 20
 606: PPUSH
 607: CALL_OW 257
 611: PUSH
 612: LD_INT 4
 614: GREATER
 615: IFFALSE 629
// SetClass ( JMM , 1 ) ;
 617: LD_EXP 20
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 629: LD_ADDR_EXP 21
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 4
 647: PPUSH
 648: CALL 46496 0 3
 652: ST_TO_ADDR
// if not Lisa then
 653: LD_EXP 21
 657: NOT
 658: IFFALSE 673
// Lisa := CreateCharacter ( 10_Lisa ) ;
 660: LD_ADDR_EXP 21
 664: PUSH
 665: LD_STRING 10_Lisa
 667: PPUSH
 668: CALL_OW 34
 672: ST_TO_ADDR
// if not Lisa then
 673: LD_EXP 21
 677: NOT
 678: IFFALSE 693
// Lisa := CreateCharacter ( 09_Lisa ) ;
 680: LD_ADDR_EXP 21
 684: PUSH
 685: LD_STRING 09_Lisa
 687: PPUSH
 688: CALL_OW 34
 692: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 693: LD_ADDR_EXP 30
 697: PUSH
 698: LD_STRING Cornel
 700: PPUSH
 701: LD_EXP 1
 705: NOT
 706: PPUSH
 707: LD_EXP 4
 711: PPUSH
 712: CALL 46496 0 3
 716: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING Donaldson
 724: PPUSH
 725: LD_EXP 1
 729: NOT
 730: PPUSH
 731: LD_EXP 4
 735: PPUSH
 736: CALL 46496 0 3
 740: ST_TO_ADDR
// if not Donaldson then
 741: LD_EXP 22
 745: NOT
 746: IFFALSE 761
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 748: LD_ADDR_EXP 22
 752: PUSH
 753: LD_STRING 10_Donaldson
 755: PPUSH
 756: CALL_OW 34
 760: ST_TO_ADDR
// if not Donaldson then
 761: LD_EXP 22
 765: NOT
 766: IFFALSE 781
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 768: LD_ADDR_EXP 22
 772: PUSH
 773: LD_STRING 09_Donaldson
 775: PPUSH
 776: CALL_OW 34
 780: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 781: LD_ADDR_EXP 23
 785: PUSH
 786: LD_STRING Bobby
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 4
 799: PPUSH
 800: CALL 46496 0 3
 804: ST_TO_ADDR
// if not Bobby then
 805: LD_EXP 23
 809: NOT
 810: IFFALSE 825
// Bobby := CreateCharacter ( 10_Bobby ) ;
 812: LD_ADDR_EXP 23
 816: PUSH
 817: LD_STRING 10_Bobby
 819: PPUSH
 820: CALL_OW 34
 824: ST_TO_ADDR
// if not Bobby then
 825: LD_EXP 23
 829: NOT
 830: IFFALSE 845
// Bobby := CreateCharacter ( 09_Bobby ) ;
 832: LD_ADDR_EXP 23
 836: PUSH
 837: LD_STRING 09_Bobby
 839: PPUSH
 840: CALL_OW 34
 844: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 845: LD_ADDR_EXP 24
 849: PUSH
 850: LD_STRING Cyrus
 852: PPUSH
 853: LD_EXP 1
 857: NOT
 858: PPUSH
 859: LD_EXP 4
 863: PPUSH
 864: CALL 46496 0 3
 868: ST_TO_ADDR
// if not Cyrus then
 869: LD_EXP 24
 873: NOT
 874: IFFALSE 889
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 876: LD_ADDR_EXP 24
 880: PUSH
 881: LD_STRING 10_Cyrus
 883: PPUSH
 884: CALL_OW 34
 888: ST_TO_ADDR
// if not Cyrus then
 889: LD_EXP 24
 893: NOT
 894: IFFALSE 909
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING 09_Cyrus
 903: PPUSH
 904: CALL_OW 34
 908: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 909: LD_ADDR_EXP 25
 913: PUSH
 914: LD_STRING Denis
 916: PPUSH
 917: LD_EXP 1
 921: NOT
 922: PPUSH
 923: LD_EXP 4
 927: PPUSH
 928: CALL 46496 0 3
 932: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 26
 937: PUSH
 938: LD_STRING Brown
 940: PPUSH
 941: LD_EXP 1
 945: NOT
 946: PPUSH
 947: LD_EXP 4
 951: PPUSH
 952: CALL 46496 0 3
 956: ST_TO_ADDR
// if not Brown then
 957: LD_EXP 26
 961: NOT
 962: IFFALSE 977
// Brown := CreateCharacter ( 10_Brown ) ;
 964: LD_ADDR_EXP 26
 968: PUSH
 969: LD_STRING 10_Brown
 971: PPUSH
 972: CALL_OW 34
 976: ST_TO_ADDR
// if not Brown then
 977: LD_EXP 26
 981: NOT
 982: IFFALSE 997
// Brown := CreateCharacter ( 08_Brown ) ;
 984: LD_ADDR_EXP 26
 988: PUSH
 989: LD_STRING 08_Brown
 991: PPUSH
 992: CALL_OW 34
 996: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_STRING Gladstone
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 4
1015: PPUSH
1016: CALL 46496 0 3
1020: ST_TO_ADDR
// if not Gladstone then
1021: LD_EXP 27
1025: NOT
1026: IFFALSE 1041
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1028: LD_ADDR_EXP 27
1032: PUSH
1033: LD_STRING 10_Gladstone
1035: PPUSH
1036: CALL_OW 34
1040: ST_TO_ADDR
// if not Gladstone then
1041: LD_EXP 27
1045: NOT
1046: IFFALSE 1061
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1048: LD_ADDR_EXP 27
1052: PUSH
1053: LD_STRING 08_Gladstone
1055: PPUSH
1056: CALL_OW 34
1060: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1061: LD_ADDR_EXP 28
1065: PUSH
1066: LD_STRING Houten
1068: PPUSH
1069: LD_EXP 1
1073: NOT
1074: PPUSH
1075: LD_EXP 4
1079: PPUSH
1080: CALL 46496 0 3
1084: ST_TO_ADDR
// if not Houten then
1085: LD_EXP 28
1089: NOT
1090: IFFALSE 1105
// Houten := CreateCharacter ( 10_Houten ) ;
1092: LD_ADDR_EXP 28
1096: PUSH
1097: LD_STRING 10_Houten
1099: PPUSH
1100: CALL_OW 34
1104: ST_TO_ADDR
// if not Houten then
1105: LD_EXP 28
1109: NOT
1110: IFFALSE 1125
// Houten := CreateCharacter ( 09_Houten ) ;
1112: LD_ADDR_EXP 28
1116: PUSH
1117: LD_STRING 09_Houten
1119: PPUSH
1120: CALL_OW 34
1124: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1125: LD_ADDR_EXP 30
1129: PUSH
1130: LD_STRING Cornell
1132: PPUSH
1133: LD_EXP 1
1137: NOT
1138: PPUSH
1139: LD_EXP 4
1143: PPUSH
1144: CALL 46496 0 3
1148: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: LD_STRING Gary
1156: PPUSH
1157: LD_EXP 1
1161: NOT
1162: PPUSH
1163: LD_EXP 4
1167: PPUSH
1168: CALL 46496 0 3
1172: ST_TO_ADDR
// if not Gary then
1173: LD_EXP 31
1177: NOT
1178: IFFALSE 1193
// Gary := CreateCharacter ( 10_Gary ) ;
1180: LD_ADDR_EXP 31
1184: PUSH
1185: LD_STRING 10_Gary
1187: PPUSH
1188: CALL_OW 34
1192: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1193: LD_ADDR_EXP 32
1197: PUSH
1198: LD_STRING Frank
1200: PPUSH
1201: LD_EXP 1
1205: NOT
1206: PPUSH
1207: LD_EXP 4
1211: PPUSH
1212: CALL 46496 0 3
1216: ST_TO_ADDR
// if not Frank then
1217: LD_EXP 32
1221: NOT
1222: IFFALSE 1237
// Frank := CreateCharacter ( 08_Frank ) ;
1224: LD_ADDR_EXP 32
1228: PUSH
1229: LD_STRING 08_Frank
1231: PPUSH
1232: CALL_OW 34
1236: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1237: LD_ADDR_EXP 33
1241: PUSH
1242: LD_STRING Kikuchi
1244: PPUSH
1245: LD_EXP 1
1249: NOT
1250: PPUSH
1251: LD_EXP 4
1255: PPUSH
1256: CALL 46496 0 3
1260: ST_TO_ADDR
// if not Kikuchi then
1261: LD_EXP 33
1265: NOT
1266: IFFALSE 1281
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1268: LD_ADDR_EXP 33
1272: PUSH
1273: LD_STRING 08_Kikuchi
1275: PPUSH
1276: CALL_OW 34
1280: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1281: LD_ADDR_VAR 0 5
1285: PUSH
1286: LD_EXP 21
1290: PUSH
1291: LD_EXP 22
1295: PUSH
1296: LD_EXP 23
1300: PUSH
1301: LD_EXP 24
1305: PUSH
1306: LD_EXP 25
1310: PUSH
1311: LD_EXP 26
1315: PUSH
1316: LD_EXP 27
1320: PUSH
1321: LD_EXP 28
1325: PUSH
1326: LD_EXP 30
1330: PUSH
1331: LD_EXP 31
1335: PUSH
1336: LD_EXP 32
1340: PUSH
1341: LD_EXP 33
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: ST_TO_ADDR
// tmp := tmp diff 0 ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PUSH
1370: LD_INT 0
1372: DIFF
1373: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1374: LD_ADDR_VAR 0 5
1378: PUSH
1379: LD_VAR 0 5
1383: PUSH
1384: LD_STRING 10_lock
1386: PPUSH
1387: CALL_OW 31
1391: UNION
1392: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1393: LD_ADDR_VAR 0 5
1397: PUSH
1398: LD_VAR 0 5
1402: PUSH
1403: LD_STRING 10c_lock
1405: PPUSH
1406: CALL_OW 31
1410: UNION
1411: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1412: LD_STRING 10_lock
1414: PPUSH
1415: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1419: LD_STRING 10c_lock
1421: PPUSH
1422: CALL_OW 40
// for i in tmp do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1475
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 257
1448: PUSH
1449: LD_INT 8
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: IN
1459: IFFALSE 1473
// SetClass ( i , class_soldier ) ;
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: CALL_OW 336
1473: GO 1436
1475: POP
1476: POP
// if tmp < 12 then
1477: LD_VAR 0 5
1481: PUSH
1482: LD_INT 12
1484: LESS
1485: IFFALSE 1579
// begin k := 16 - tmp ;
1487: LD_ADDR_VAR 0 3
1491: PUSH
1492: LD_INT 16
1494: PUSH
1495: LD_VAR 0 5
1499: MINUS
1500: ST_TO_ADDR
// for i = 1 to k do
1501: LD_ADDR_VAR 0 2
1505: PUSH
1506: DOUBLE
1507: LD_INT 1
1509: DEC
1510: ST_TO_ADDR
1511: LD_VAR 0 3
1515: PUSH
1516: FOR_TO
1517: IFFALSE 1577
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1519: LD_INT 0
1521: PPUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 3
1530: PUSH
1531: LD_INT 4
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 4
1545: PPUSH
1546: CALL_OW 12
1550: ARRAY
1551: PPUSH
1552: LD_INT 6
1554: PPUSH
1555: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1559: LD_ADDR_VAR 0 5
1563: PUSH
1564: LD_VAR 0 5
1568: PUSH
1569: CALL_OW 44
1573: ADD
1574: ST_TO_ADDR
// end ;
1575: GO 1516
1577: POP
1578: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1579: LD_ADDR_EXP 19
1583: PUSH
1584: LD_STRING 1
1586: PPUSH
1587: LD_INT 12
1589: PPUSH
1590: LD_INT 12
1592: PPUSH
1593: LD_INT -5
1595: PUSH
1596: LD_EXP 20
1600: PUSH
1601: LD_INT -2
1603: PUSH
1604: LD_INT -3
1606: PUSH
1607: LD_INT -5
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_VAR 0 5
1621: ADD
1622: PUSH
1623: LD_INT -6
1625: PUSH
1626: LD_INT -4
1628: PUSH
1629: LD_EXP 29
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: ADD
1639: PPUSH
1640: LD_INT 1
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PPUSH
1698: CALL_OW 42
1702: ST_TO_ADDR
// others := tmp diff selected ;
1703: LD_ADDR_VAR 0 8
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 19
1717: DIFF
1718: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1719: LD_ADDR_VAR 0 8
1723: PUSH
1724: LD_VAR 0 8
1728: PUSH
1729: LD_EXP 21
1733: PUSH
1734: LD_EXP 22
1738: PUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_EXP 24
1748: PUSH
1749: LD_EXP 25
1753: PUSH
1754: LD_EXP 26
1758: PUSH
1759: LD_EXP 27
1763: PUSH
1764: LD_EXP 28
1768: PUSH
1769: LD_EXP 30
1773: PUSH
1774: LD_EXP 31
1778: PUSH
1779: LD_EXP 32
1783: PUSH
1784: LD_EXP 33
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: DIFF
1803: ST_TO_ADDR
// if others then
1804: LD_VAR 0 8
1808: IFFALSE 1822
// SaveCharacters ( others , 11_others ) ;
1810: LD_VAR 0 8
1814: PPUSH
1815: LD_STRING 11_others
1817: PPUSH
1818: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1822: LD_ADDR_VAR 0 6
1826: PUSH
1827: LD_INT 3
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: LD_INT 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 4
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 5
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 2
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 7
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 2
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// for i in JMM ^ selected do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_EXP 20
1933: PUSH
1934: LD_EXP 19
1938: ADD
1939: PUSH
1940: FOR_IN
1941: IFFALSE 2130
// begin if GetClass ( i ) = 3 then
1943: LD_VAR 0 2
1947: PPUSH
1948: CALL_OW 257
1952: PUSH
1953: LD_INT 3
1955: EQUAL
1956: IFFALSE 2113
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_VAR 0 6
1967: PUSH
1968: LD_INT 1
1970: ARRAY
1971: PUSH
1972: LD_INT 1
1974: ARRAY
1975: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1976: LD_ADDR_OWVAR 39
1980: PUSH
1981: LD_VAR 0 6
1985: PUSH
1986: LD_INT 1
1988: ARRAY
1989: PUSH
1990: LD_INT 2
1992: ARRAY
1993: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1994: LD_ADDR_OWVAR 38
1998: PUSH
1999: LD_VAR 0 6
2003: PUSH
2004: LD_INT 1
2006: ARRAY
2007: PUSH
2008: LD_INT 3
2010: ARRAY
2011: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2012: LD_ADDR_OWVAR 40
2016: PUSH
2017: LD_VAR 0 6
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PUSH
2026: LD_INT 4
2028: ARRAY
2029: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2030: LD_ADDR_VAR 0 6
2034: PUSH
2035: LD_VAR 0 6
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 3
2047: ST_TO_ADDR
// veh := CreateVehicle ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: CALL_OW 45
2057: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2058: LD_VAR 0 7
2062: PPUSH
2063: LD_INT 8
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_VAR 0 7
2082: PPUSH
2083: CALL_OW 52
// if i = JMM then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_EXP 20
2096: EQUAL
2097: IFFALSE 2111
// SetMark ( veh , 1 ) ;
2099: LD_VAR 0 7
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: CALL_OW 242
// end else
2111: GO 2128
// PlaceUnitArea ( i , am_hum_start , false ) ;
2113: LD_VAR 0 2
2117: PPUSH
2118: LD_INT 9
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 49
// end ;
2128: GO 1940
2130: POP
2131: POP
// vc_chassis := us_medium_tracked ;
2132: LD_ADDR_OWVAR 37
2136: PUSH
2137: LD_INT 3
2139: ST_TO_ADDR
// vc_engine := engine_solar ;
2140: LD_ADDR_OWVAR 39
2144: PUSH
2145: LD_INT 2
2147: ST_TO_ADDR
// vc_control := control_computer ;
2148: LD_ADDR_OWVAR 38
2152: PUSH
2153: LD_INT 3
2155: ST_TO_ADDR
// vc_weapon := us_radar ;
2156: LD_ADDR_OWVAR 40
2160: PUSH
2161: LD_INT 11
2163: ST_TO_ADDR
// veh := CreateVehicle ;
2164: LD_ADDR_VAR 0 7
2168: PUSH
2169: CALL_OW 45
2173: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2174: LD_VAR 0 7
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 142
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 48
// end ; end_of_file
2192: LD_VAR 0 1
2196: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2197: LD_INT 0
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 6
2212: PUSH
2213: LD_INT 7
2215: PUSH
2216: LD_INT 7
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_OWVAR 67
2228: ARRAY
2229: ST_TO_ADDR
// uc_side := 2 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 2
2237: ST_TO_ADDR
// uc_nation := 2 ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 2
2245: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 14
2253: ST_TO_ADDR
// vc_engine := engine_siberite ;
2254: LD_ADDR_OWVAR 39
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// vc_control := control_manual ;
2262: LD_ADDR_OWVAR 38
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2270: LD_ADDR_OWVAR 40
2274: PUSH
2275: LD_INT 31
2277: ST_TO_ADDR
// for i = 1 to 3 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 3
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2376
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_INT 3
2299: PPUSH
2300: LD_VAR 0 5
2304: PPUSH
2305: CALL_OW 380
// un := CreateVehicle ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: CALL_OW 45
2318: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2319: LD_VAR 0 4
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 5
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2339: LD_VAR 0 4
2343: PPUSH
2344: LD_INT 156
2346: PPUSH
2347: LD_INT 15
2349: PPUSH
2350: LD_INT 6
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2360: CALL_OW 44
2364: PPUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: CALL_OW 52
// end ;
2374: GO 2291
2376: POP
2377: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2378: LD_ADDR_EXP 36
2382: PUSH
2383: LD_INT 94
2385: PPUSH
2386: LD_INT 28
2388: PPUSH
2389: LD_STRING dammam
2391: PPUSH
2392: LD_VAR 0 5
2396: PPUSH
2397: LD_INT 10000
2399: PUSH
2400: LD_INT 1000
2402: PUSH
2403: LD_INT 300
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PPUSH
2411: LD_INT 1
2413: NEG
2414: PUSH
2415: LD_INT 5
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL 56871 0 6
2435: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2436: LD_ADDR_EXP 36
2440: PUSH
2441: LD_EXP 36
2445: PUSH
2446: LD_INT 122
2448: PPUSH
2449: LD_INT 25
2451: PPUSH
2452: LD_STRING 
2454: PPUSH
2455: LD_VAR 0 5
2459: PPUSH
2460: LD_INT 500
2462: PUSH
2463: LD_INT 60
2465: PUSH
2466: LD_INT 0
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: PPUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: LD_INT 2
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL 56871 0 6
2497: UNION
2498: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2499: LD_ADDR_EXP 34
2503: PUSH
2504: LD_INT 45
2506: PPUSH
2507: LD_INT 24
2509: PPUSH
2510: LD_STRING jeddah
2512: PPUSH
2513: LD_VAR 0 5
2517: PPUSH
2518: LD_INT 700
2520: PUSH
2521: LD_INT 300
2523: PUSH
2524: LD_INT 10
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PPUSH
2532: LD_INT 1
2534: NEG
2535: PUSH
2536: LD_INT 5
2538: PUSH
2539: LD_INT 3
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL 56871 0 6
2555: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2556: LD_ADDR_EXP 35
2560: PUSH
2561: LD_INT 7
2563: PPUSH
2564: LD_INT 27
2566: PPUSH
2567: LD_STRING riyadh
2569: PPUSH
2570: LD_VAR 0 5
2574: PPUSH
2575: LD_INT 500
2577: PUSH
2578: LD_INT 60
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: PPUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL 56871 0 6
2611: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2612: LD_ADDR_EXP 38
2616: PUSH
2617: LD_INT 204
2619: PPUSH
2620: LD_INT 26
2622: PPUSH
2623: LD_STRING 
2625: PPUSH
2626: LD_VAR 0 5
2630: PPUSH
2631: LD_INT 500
2633: PUSH
2634: LD_INT 50
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: LD_INT 1
2647: NEG
2648: PUSH
2649: LD_INT 3
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL 56871 0 6
2668: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2669: LD_ADDR_EXP 49
2673: PUSH
2674: LD_EXP 36
2678: PUSH
2679: LD_EXP 34
2683: PUSH
2684: LD_EXP 38
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 31
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 58
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2861
// begin if GetBase ( i ) then
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 274
2747: IFFALSE 2751
// continue ;
2749: GO 2735
// d := GetDir ( i ) ;
2751: LD_ADDR_VAR 0 3
2755: PUSH
2756: LD_VAR 0 2
2760: PPUSH
2761: CALL_OW 254
2765: ST_TO_ADDR
// if d < 3 then
2766: LD_VAR 0 3
2770: PUSH
2771: LD_INT 3
2773: LESS
2774: IFFALSE 2792
// d := d + 3 else
2776: LD_ADDR_VAR 0 3
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: PLUS
2789: ST_TO_ADDR
2790: GO 2806
// d := d - 3 ;
2792: LD_ADDR_VAR 0 3
2796: PUSH
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 3
2804: MINUS
2805: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2806: LD_INT 0
2808: PPUSH
2809: LD_INT 8
2811: PPUSH
2812: LD_VAR 0 5
2816: PPUSH
2817: CALL_OW 380
// un := CreateHuman ;
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: CALL_OW 44
2830: ST_TO_ADDR
// SetDir ( un , d ) ;
2831: LD_VAR 0 4
2835: PPUSH
2836: LD_VAR 0 3
2840: PPUSH
2841: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2845: LD_VAR 0 4
2849: PPUSH
2850: LD_VAR 0 2
2854: PPUSH
2855: CALL_OW 52
// end ;
2859: GO 2735
2861: POP
2862: POP
// if Difficulty > 1 then
2863: LD_OWVAR 67
2867: PUSH
2868: LD_INT 1
2870: GREATER
2871: IFFALSE 3242
// begin ar_kamikadze := [ ] ;
2873: LD_ADDR_EXP 41
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_VAR 0 5
2890: PPUSH
2891: CALL_OW 380
// un := CreateHuman ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2917: LD_VAR 0 4
2921: PPUSH
2922: LD_INT 23
2924: PPUSH
2925: LD_INT 44
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 48
// ComCrawl ( un ) ;
2935: LD_VAR 0 4
2939: PPUSH
2940: CALL_OW 137
// un := CreateHuman ;
2944: LD_ADDR_VAR 0 4
2948: PUSH
2949: CALL_OW 44
2953: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2954: LD_VAR 0 4
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 30
2973: PPUSH
2974: LD_INT 39
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 48
// ComCrawl ( un ) ;
2984: LD_VAR 0 4
2988: PPUSH
2989: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2993: LD_INT 0
2995: PPUSH
2996: LD_INT 17
2998: PPUSH
2999: LD_VAR 0 5
3003: PPUSH
3004: CALL_OW 380
// un := CreateHuman ;
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: CALL_OW 44
3017: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3018: LD_VAR 0 4
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3030: LD_VAR 0 4
3034: PPUSH
3035: LD_INT 45
3037: PPUSH
3038: LD_INT 86
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 48
// ComHold ( un ) ;
3048: LD_VAR 0 4
3052: PPUSH
3053: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3057: LD_ADDR_EXP 41
3061: PUSH
3062: LD_EXP 41
3066: PPUSH
3067: LD_EXP 41
3071: PUSH
3072: LD_INT 1
3074: PLUS
3075: PPUSH
3076: LD_VAR 0 4
3080: PPUSH
3081: CALL_OW 1
3085: ST_TO_ADDR
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3108: LD_VAR 0 4
3112: PPUSH
3113: LD_INT 60
3115: PPUSH
3116: LD_INT 85
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: CALL_OW 48
// ComHold ( un ) ;
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3135: LD_ADDR_EXP 41
3139: PUSH
3140: LD_EXP 41
3144: PPUSH
3145: LD_EXP 41
3149: PUSH
3150: LD_INT 1
3152: PLUS
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 1
3163: ST_TO_ADDR
// un := CreateHuman ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 222
3193: PPUSH
3194: LD_INT 166
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 48
// ComHold ( un ) ;
3204: LD_VAR 0 4
3208: PPUSH
3209: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3213: LD_ADDR_EXP 41
3217: PUSH
3218: LD_EXP 41
3222: PPUSH
3223: LD_EXP 41
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: CALL_OW 1
3241: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3242: LD_ADDR_EXP 39
3246: PUSH
3247: EMPTY
3248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3264: LD_ADDR_OWVAR 26
3268: PUSH
3269: LD_STRING Pavel Grigorovic
3271: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3272: LD_ADDR_OWVAR 33
3276: PUSH
3277: LD_STRING SecondCharsGal
3279: ST_TO_ADDR
// hc_face_number := 4 ;
3280: LD_ADDR_OWVAR 34
3284: PUSH
3285: LD_INT 4
3287: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3288: LD_ADDR_EXP 39
3292: PUSH
3293: LD_EXP 39
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 44
3305: PPUSH
3306: CALL_OW 1
3310: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3311: LD_INT 2
3313: PPUSH
3314: LD_INT 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: CALL_OW 380
// hc_name := Lucy Sebel ;
3326: LD_ADDR_OWVAR 26
3330: PUSH
3331: LD_STRING Lucy Sebel
3333: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3334: LD_ADDR_OWVAR 33
3338: PUSH
3339: LD_STRING SecondCharsGal
3341: ST_TO_ADDR
// hc_face_number := 15 ;
3342: LD_ADDR_OWVAR 34
3346: PUSH
3347: LD_INT 15
3349: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3350: LD_ADDR_EXP 39
3354: PUSH
3355: LD_EXP 39
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 44
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3373: LD_INT 2
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_VAR 0 5
3383: PPUSH
3384: CALL_OW 380
// hc_gallery :=  ;
3388: LD_ADDR_OWVAR 33
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_name :=  ;
3396: LD_ADDR_OWVAR 26
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3404: LD_ADDR_EXP 39
3408: PUSH
3409: LD_EXP 39
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 44
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// hc_sex := sex_male ;
3427: LD_ADDR_OWVAR 27
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_class = 11 ;
3435: LD_ADDR_OWVAR 28
3439: PUSH
3440: LD_INT 11
3442: ST_TO_ADDR
// hc_gallery = sandar ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING sandar
3450: ST_TO_ADDR
// hc_face_number = 33 ;
3451: LD_ADDR_OWVAR 34
3455: PUSH
3456: LD_INT 33
3458: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3459: LD_ADDR_OWVAR 26
3463: PUSH
3464: LD_STRING Thabit Muhair Saliba
3466: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3467: LD_ADDR_OWVAR 31
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: ST_TO_ADDR
// Saliba = CreateHuman ;
3490: LD_ADDR_EXP 43
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3500: LD_EXP 43
3504: PPUSH
3505: LD_INT 7
3507: PPUSH
3508: CALL_OW 52
// if gensher_active then
3512: LD_EXP 18
3516: IFFALSE 3543
// begin Gensher = NewCharacter ( Dietrich ) ;
3518: LD_ADDR_EXP 44
3522: PUSH
3523: LD_STRING Dietrich
3525: PPUSH
3526: CALL_OW 25
3530: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3531: LD_EXP 44
3535: PPUSH
3536: LD_INT 94
3538: PPUSH
3539: CALL_OW 52
// end ; InitHc ;
3543: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3547: LD_ADDR_EXP 40
3551: PUSH
3552: EMPTY
3553: ST_TO_ADDR
// for i = 1 to 5 do
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: DOUBLE
3560: LD_INT 1
3562: DEC
3563: ST_TO_ADDR
3564: LD_INT 5
3566: PUSH
3567: FOR_TO
3568: IFFALSE 3740
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3570: LD_INT 13
3572: PUSH
3573: LD_INT 14
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 1
3582: PPUSH
3583: LD_INT 2
3585: PPUSH
3586: CALL_OW 12
3590: ARRAY
3591: PPUSH
3592: LD_INT 1
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 1
3604: PPUSH
3605: LD_INT 2
3607: PPUSH
3608: CALL_OW 12
3612: ARRAY
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 25
3619: PUSH
3620: LD_INT 27
3622: PUSH
3623: LD_INT 26
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: LD_INT 60
3645: PPUSH
3646: LD_INT 100
3648: PPUSH
3649: CALL_OW 12
3653: PPUSH
3654: CALL 53462 0 5
// un := CreateVehicle ;
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: CALL_OW 45
3667: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3668: LD_ADDR_EXP 40
3672: PUSH
3673: LD_EXP 40
3677: PPUSH
3678: LD_EXP 40
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3697: LD_VAR 0 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: LD_INT 5
3707: PPUSH
3708: CALL_OW 12
3712: PPUSH
3713: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3717: LD_VAR 0 4
3721: PPUSH
3722: LD_INT 124
3724: PPUSH
3725: LD_INT 141
3727: PPUSH
3728: LD_INT 8
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 50
// end ;
3738: GO 3567
3740: POP
3741: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3742: LD_ADDR_EXP 42
3746: PUSH
3747: EMPTY
3748: PUSH
3749: EMPTY
3750: PUSH
3751: EMPTY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3758: LD_ADDR_VAR 0 3
3762: PUSH
3763: DOUBLE
3764: LD_INT 1
3766: DEC
3767: ST_TO_ADDR
3768: LD_INT 3
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_OWVAR 67
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 4003
// for i = 1 to 3 do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 3
3803: PUSH
3804: FOR_TO
3805: IFFALSE 3999
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3807: LD_INT 14
3809: PPUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 5
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 2
3847: PPUSH
3848: CALL_OW 12
3852: ARRAY
3853: PPUSH
3854: LD_INT 25
3856: PUSH
3857: LD_INT 27
3859: PUSH
3860: LD_INT 26
3862: PUSH
3863: LD_INT 28
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 1
3874: PPUSH
3875: LD_INT 4
3877: PPUSH
3878: CALL_OW 12
3882: ARRAY
3883: PPUSH
3884: LD_INT 100
3886: PPUSH
3887: CALL 53462 0 5
// un := CreateVehicle ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: CALL_OW 45
3900: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3901: LD_ADDR_EXP 42
3905: PUSH
3906: LD_EXP 42
3910: PPUSH
3911: LD_VAR 0 2
3915: PUSH
3916: LD_EXP 42
3920: PUSH
3921: LD_VAR 0 2
3925: ARRAY
3926: PUSH
3927: LD_INT 1
3929: PLUS
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: CALL 53584 0 3
3944: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 5
3955: PPUSH
3956: CALL_OW 12
3960: PPUSH
3961: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_INT 20
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 49
// end ;
3997: GO 3804
3999: POP
4000: POP
4001: GO 3788
4003: POP
4004: POP
// InitHc ;
4005: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4009: LD_INT 4
4011: PPUSH
4012: LD_INT 5
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 58
// end ;
4028: LD_VAR 0 1
4032: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4033: LD_EXP 41
4037: IFFALSE 4111
4039: GO 4041
4041: DISABLE
4042: LD_INT 0
4044: PPUSH
// begin enable ;
4045: ENABLE
// for i in ar_kamikadze do
4046: LD_ADDR_VAR 0 1
4050: PUSH
4051: LD_EXP 41
4055: PUSH
4056: FOR_IN
4057: IFFALSE 4109
// if See ( 1 , i ) then
4059: LD_INT 1
4061: PPUSH
4062: LD_VAR 0 1
4066: PPUSH
4067: CALL_OW 292
4071: IFFALSE 4107
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PPUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 74
4102: PPUSH
4103: CALL_OW 115
4107: GO 4056
4109: POP
4110: POP
// end ;
4111: PPOPN 1
4113: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4114: LD_EXP 13
4118: IFFALSE 4435
4120: GO 4122
4122: DISABLE
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
4127: PPUSH
4128: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4129: LD_INT 35
4131: PPUSH
4132: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4136: LD_INT 1
4138: PPUSH
4139: CALL 40634 0 1
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: IFFALSE 4129
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 14
4154: PUSH
4155: LD_INT 3
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 32
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: EMPTY
4171: LIST
4172: PPUSH
4173: CALL 40238 0 2
// repeat wait ( 0 0$1 ) ;
4177: LD_INT 35
4179: PPUSH
4180: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4184: LD_EXP 68
4188: PUSH
4189: LD_INT 1
4191: ARRAY
4192: PPUSH
4193: LD_INT 33
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 34
4205: PUSH
4206: LD_INT 32
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 72
4221: IFFALSE 4177
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: LD_EXP 68
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PPUSH
4237: LD_INT 33
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 34
4249: PUSH
4250: LD_INT 32
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 72
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL_OW 469
4282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: LD_INT 5
4297: PPUSH
4298: CALL_OW 469
4302: ST_TO_ADDR
// tmp := 100 ;
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 100
4310: ST_TO_ADDR
// if pos then
4311: LD_VAR 0 4
4315: IFFALSE 4355
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 2
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: PPUSH
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: ARRAY
4342: PPUSH
4343: LD_INT 20
4345: PPUSH
4346: CALL 54480 0 4
4350: PUSH
4351: LD_INT 4
4353: ARRAY
4354: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4355: LD_VAR 0 4
4359: PUSH
4360: LD_EXP 14
4364: NOT
4365: AND
4366: PUSH
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 10
4374: LESS
4375: AND
4376: IFFALSE 4283
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4378: LD_VAR 0 2
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 1
4390: ARRAY
4391: PPUSH
4392: LD_VAR 0 4
4396: PUSH
4397: LD_INT 2
4399: ARRAY
4400: PPUSH
4401: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4405: LD_VAR 0 2
4409: PPUSH
4410: LD_INT 198
4412: PPUSH
4413: LD_INT 113
4415: PPUSH
4416: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4420: LD_VAR 0 2
4424: PPUSH
4425: LD_INT 124
4427: PPUSH
4428: LD_INT 7
4430: PPUSH
4431: CALL_OW 171
// end ;
4435: PPOPN 4
4437: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4438: LD_EXP 6
4442: IFFALSE 7099
4444: GO 4446
4446: DISABLE
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 5
4464: PUSH
4465: LD_INT 6
4467: PUSH
4468: LD_INT 7
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_OWVAR 67
4480: ARRAY
4481: ST_TO_ADDR
// coords := [ ] ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: EMPTY
4488: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4489: LD_ADDR_VAR 0 6
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 14
4541: PUSH
4542: LD_INT 1
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 28
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 14
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: LD_INT 25
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 14
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: LD_INT 2
4583: PUSH
4584: LD_INT 28
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 14
4595: PUSH
4596: LD_INT 1
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: LD_INT 29
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL 40238 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4621: LD_INT 21000
4623: PUSH
4624: LD_INT 19950
4626: PUSH
4627: LD_INT 18900
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_OWVAR 67
4639: ARRAY
4640: PPUSH
4641: CALL_OW 67
// InitHc ;
4645: CALL_OW 19
// InitUc ;
4649: CALL_OW 18
// uc_side := 2 ;
4653: LD_ADDR_OWVAR 20
4657: PUSH
4658: LD_INT 2
4660: ST_TO_ADDR
// uc_nation := 2 ;
4661: LD_ADDR_OWVAR 21
4665: PUSH
4666: LD_INT 2
4668: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: EMPTY
4675: PUSH
4676: EMPTY
4677: PUSH
4678: EMPTY
4679: PUSH
4680: EMPTY
4681: PUSH
4682: EMPTY
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: LD_EXP 68
4708: PUSH
4709: LD_INT 1
4711: ARRAY
4712: PUSH
4713: LD_INT 34
4715: PUSH
4716: LD_INT 32
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: DIFF
4728: PPUSH
4729: CALL_OW 1
4733: ST_TO_ADDR
// for i = 1 to Difficulty do
4734: LD_ADDR_VAR 0 1
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_OWVAR 67
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4888
// begin uc_side := 2 ;
4752: LD_ADDR_OWVAR 20
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// uc_nation := 2 ;
4760: LD_ADDR_OWVAR 21
4764: PUSH
4765: LD_INT 2
4767: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4768: LD_INT 13
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 5
4776: PPUSH
4777: LD_INT 29
4779: PPUSH
4780: LD_INT 100
4782: PPUSH
4783: CALL 53462 0 5
// un := CreateVehicle ;
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: CALL_OW 45
4796: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PUSH
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 1
4817: ARRAY
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: CALL 53584 0 3
4836: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_INT 3
4844: PPUSH
4845: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4849: LD_VAR 0 2
4853: PPUSH
4854: LD_INT 16
4856: PPUSH
4857: LD_INT 0
4859: PPUSH
4860: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4864: LD_VAR 0 2
4868: PPUSH
4869: LD_INT 51
4871: PPUSH
4872: LD_INT 10
4874: PPUSH
4875: CALL_OW 111
// wait ( 0 0$2 ) ;
4879: LD_INT 70
4881: PPUSH
4882: CALL_OW 67
// end ;
4886: GO 4749
4888: POP
4889: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4890: LD_ADDR_VAR 0 5
4894: PUSH
4895: LD_INT 51
4897: PUSH
4898: LD_INT 24
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 75
4907: PUSH
4908: LD_INT 90
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4919: LD_INT 1
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_VAR 0 6
4940: PPUSH
4941: CALL 40471 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_OWVAR 67
4973: ARRAY
4974: PUSH
4975: FOR_TO
4976: IFFALSE 5076
// begin uc_side := 2 ;
4978: LD_ADDR_OWVAR 20
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// uc_nation := 2 ;
4986: LD_ADDR_OWVAR 21
4990: PUSH
4991: LD_INT 2
4993: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4994: LD_INT 0
4996: PPUSH
4997: LD_INT 17
4999: PPUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: CALL_OW 380
// un := CreateHuman ;
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_INT 2
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: LD_INT 2
5039: ARRAY
5040: PUSH
5041: LD_INT 1
5043: PLUS
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PPUSH
5049: LD_VAR 0 2
5053: PPUSH
5054: CALL 53584 0 3
5058: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_INT 13
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: CALL_OW 49
// end ;
5074: GO 4975
5076: POP
5077: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5078: LD_ADDR_VAR 0 1
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_INT 2
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_OWVAR 67
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5228
// begin uc_side := 2 ;
5111: LD_ADDR_OWVAR 20
5115: PUSH
5116: LD_INT 2
5118: ST_TO_ADDR
// uc_nation := 2 ;
5119: LD_ADDR_OWVAR 21
5123: PUSH
5124: LD_INT 2
5126: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 1
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 1
5142: PPUSH
5143: LD_INT 2
5145: PPUSH
5146: CALL_OW 12
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 4
5156: PPUSH
5157: CALL_OW 380
// un := CreateHuman ;
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: CALL_OW 44
5170: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 2
5191: ARRAY
5192: PUSH
5193: LD_INT 1
5195: PLUS
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: LD_VAR 0 2
5205: PPUSH
5206: CALL 53584 0 3
5210: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5211: LD_VAR 0 2
5215: PPUSH
5216: LD_INT 13
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 49
// end ;
5226: GO 5108
5228: POP
5229: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_INT 67
5237: PUSH
5238: LD_INT 112
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 85
5247: PUSH
5248: LD_INT 130
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5259: LD_INT 2
5261: PPUSH
5262: LD_VAR 0 3
5266: PUSH
5267: LD_INT 2
5269: ARRAY
5270: PPUSH
5271: LD_VAR 0 5
5275: PPUSH
5276: LD_VAR 0 6
5280: PPUSH
5281: CALL 40471 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5285: LD_ADDR_VAR 0 1
5289: PUSH
5290: DOUBLE
5291: LD_INT 1
5293: DEC
5294: ST_TO_ADDR
5295: LD_INT 1
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: LD_OWVAR 67
5313: ARRAY
5314: PUSH
5315: FOR_TO
5316: IFFALSE 5416
// begin uc_side := 2 ;
5318: LD_ADDR_OWVAR 20
5322: PUSH
5323: LD_INT 2
5325: ST_TO_ADDR
// uc_nation := 2 ;
5326: LD_ADDR_OWVAR 21
5330: PUSH
5331: LD_INT 2
5333: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5334: LD_INT 0
5336: PPUSH
5337: LD_INT 17
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 380
// un := CreateHuman ;
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 3
5371: PUSH
5372: LD_VAR 0 3
5376: PUSH
5377: LD_INT 3
5379: ARRAY
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 53584 0 3
5398: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5399: LD_VAR 0 2
5403: PPUSH
5404: LD_INT 14
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: GO 5315
5416: POP
5417: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5418: LD_ADDR_VAR 0 5
5422: PUSH
5423: LD_INT 148
5425: PUSH
5426: LD_INT 158
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 148
5435: PUSH
5436: LD_INT 158
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5447: LD_INT 3
5449: PPUSH
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 3
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: LD_VAR 0 6
5468: PPUSH
5469: CALL 40471 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5473: LD_ADDR_VAR 0 1
5477: PUSH
5478: DOUBLE
5479: LD_INT 1
5481: DEC
5482: ST_TO_ADDR
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PUSH
5497: LD_OWVAR 67
5501: ARRAY
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5728
// begin uc_side := 2 ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// uc_nation := 2 ;
5514: LD_ADDR_OWVAR 21
5518: PUSH
5519: LD_INT 2
5521: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5522: LD_INT 14
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 5
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 12
5548: ARRAY
5549: PPUSH
5550: LD_INT 27
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 28
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: CALL_OW 12
5574: ARRAY
5575: PPUSH
5576: LD_INT 100
5578: PPUSH
5579: CALL 53462 0 5
// un := CreateVehicle ;
5583: LD_ADDR_VAR 0 2
5587: PUSH
5588: CALL_OW 45
5592: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_INT 4
5605: PUSH
5606: LD_VAR 0 3
5610: PUSH
5611: LD_INT 4
5613: ARRAY
5614: PUSH
5615: LD_INT 1
5617: PLUS
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: CALL 53584 0 3
5632: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_INT 5
5640: PPUSH
5641: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 15
5652: PPUSH
5653: LD_INT 0
5655: PPUSH
5656: CALL_OW 49
// if GetControl ( un ) = control_manual then
5660: LD_VAR 0 2
5664: PPUSH
5665: CALL_OW 263
5669: PUSH
5670: LD_INT 1
5672: EQUAL
5673: IFFALSE 5704
// begin PrepareHuman ( false , 3 , skill ) ;
5675: LD_INT 0
5677: PPUSH
5678: LD_INT 3
5680: PPUSH
5681: LD_VAR 0 4
5685: PPUSH
5686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5690: CALL_OW 44
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_INT 179
5711: PPUSH
5712: LD_INT 135
5714: PPUSH
5715: CALL_OW 111
// wait ( 0 0$2 ) ;
5719: LD_INT 70
5721: PPUSH
5722: CALL_OW 67
// end ;
5726: GO 5503
5728: POP
5729: POP
// vc_chassis := 15 ;
5730: LD_ADDR_OWVAR 37
5734: PUSH
5735: LD_INT 15
5737: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_VAR 0 3
5747: PPUSH
5748: LD_INT 4
5750: PUSH
5751: LD_VAR 0 3
5755: PUSH
5756: LD_INT 4
5758: ARRAY
5759: PUSH
5760: LD_INT 1
5762: PLUS
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PPUSH
5768: CALL_OW 45
5772: PPUSH
5773: CALL 53584 0 3
5777: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 4
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_INT 4
5794: ARRAY
5795: ARRAY
5796: PPUSH
5797: LD_INT 15
5799: PPUSH
5800: LD_INT 0
5802: PPUSH
5803: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5807: LD_INT 0
5809: PPUSH
5810: LD_INT 11
5812: PPUSH
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 4
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 4
5842: ARRAY
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 44
5856: PPUSH
5857: CALL 53584 0 3
5861: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 4
5869: ARRAY
5870: PUSH
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 4
5878: ARRAY
5879: ARRAY
5880: PPUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 4
5888: ARRAY
5889: PUSH
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 4
5897: ARRAY
5898: PUSH
5899: LD_INT 1
5901: MINUS
5902: ARRAY
5903: PPUSH
5904: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5908: LD_ADDR_VAR 0 5
5912: PUSH
5913: LD_INT 148
5915: PUSH
5916: LD_INT 140
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5926: LD_INT 1
5928: PPUSH
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 4
5936: ARRAY
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL 40471 0 4
// if gensher_active then
5952: LD_EXP 18
5956: IFFALSE 6341
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5958: LD_EXP 44
5962: PPUSH
5963: LD_STRING D10-Diet-1
5965: PPUSH
5966: CALL_OW 94
// for i = 1 to 2 do
5970: LD_ADDR_VAR 0 1
5974: PUSH
5975: DOUBLE
5976: LD_INT 1
5978: DEC
5979: ST_TO_ADDR
5980: LD_INT 2
5982: PUSH
5983: FOR_TO
5984: IFFALSE 6122
// begin uc_side := 2 ;
5986: LD_ADDR_OWVAR 20
5990: PUSH
5991: LD_INT 2
5993: ST_TO_ADDR
// uc_nation := 2 ;
5994: LD_ADDR_OWVAR 21
5998: PUSH
5999: LD_INT 2
6001: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6002: LD_INT 13
6004: PPUSH
6005: LD_INT 3
6007: PPUSH
6008: LD_INT 5
6010: PPUSH
6011: LD_INT 29
6013: PPUSH
6014: LD_INT 100
6016: PPUSH
6017: CALL 53462 0 5
// un := CreateVehicle ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: CALL_OW 45
6030: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 5
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 5
6051: ARRAY
6052: PUSH
6053: LD_INT 1
6055: PLUS
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PPUSH
6061: LD_VAR 0 2
6065: PPUSH
6066: CALL 53584 0 3
6070: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 23
6090: PPUSH
6091: LD_INT 0
6093: PPUSH
6094: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 85
6105: PPUSH
6106: LD_INT 152
6108: PPUSH
6109: CALL_OW 111
// wait ( 0 0$2 ) ;
6113: LD_INT 70
6115: PPUSH
6116: CALL_OW 67
// end ;
6120: GO 5983
6122: POP
6123: POP
// for i = 1 to 3 do
6124: LD_ADDR_VAR 0 1
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_INT 3
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6295
// begin uc_side := 2 ;
6140: LD_ADDR_OWVAR 20
6144: PUSH
6145: LD_INT 2
6147: ST_TO_ADDR
// uc_nation := 2 ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_INT 2
6155: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6156: LD_INT 14
6158: PPUSH
6159: LD_INT 3
6161: PPUSH
6162: LD_INT 5
6164: PPUSH
6165: LD_INT 27
6167: PUSH
6168: LD_INT 28
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 1
6177: PPUSH
6178: LD_INT 2
6180: PPUSH
6181: CALL_OW 12
6185: ARRAY
6186: PPUSH
6187: LD_INT 100
6189: PPUSH
6190: CALL 53462 0 5
// un := CreateVehicle ;
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: CALL_OW 45
6203: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6204: LD_ADDR_VAR 0 3
6208: PUSH
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_INT 5
6216: PUSH
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 5
6224: ARRAY
6225: PUSH
6226: LD_INT 1
6228: PLUS
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: CALL 53584 0 3
6243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6256: LD_VAR 0 2
6260: PPUSH
6261: LD_INT 23
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_INT 85
6278: PPUSH
6279: LD_INT 152
6281: PPUSH
6282: CALL_OW 111
// wait ( 0 0$2 ) ;
6286: LD_INT 70
6288: PPUSH
6289: CALL_OW 67
// end ;
6293: GO 6137
6295: POP
6296: POP
// coords := [ [ 97 , 143 ] ] ;
6297: LD_ADDR_VAR 0 5
6301: PUSH
6302: LD_INT 97
6304: PUSH
6305: LD_INT 143
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6315: LD_INT 1
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 5
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 5
6331: PPUSH
6332: LD_VAR 0 6
6336: PPUSH
6337: CALL 40471 0 4
// end ; Wait ( 13 13$00 ) ;
6341: LD_INT 27300
6343: PPUSH
6344: CALL_OW 67
// tmp := [ ] ;
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: EMPTY
6354: ST_TO_ADDR
// w := 1 ;
6355: LD_ADDR_VAR 0 7
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// repeat tmp := [ ] ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: EMPTY
6369: ST_TO_ADDR
// if w mod 4 = 0 then
6370: LD_VAR 0 7
6374: PUSH
6375: LD_INT 4
6377: MOD
6378: PUSH
6379: LD_INT 0
6381: EQUAL
6382: IFFALSE 6469
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6384: LD_ADDR_VAR 0 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 24
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 11
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 24
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 24
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: ST_TO_ADDR
6467: GO 6571
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6469: LD_ADDR_VAR 0 8
6473: PUSH
6474: LD_INT 14
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 28
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 14
6494: PUSH
6495: LD_INT 1
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 14
6512: PUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 28
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 29
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 11
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 24
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// if w mod 3 = 0 then
6571: LD_VAR 0 7
6575: PUSH
6576: LD_INT 3
6578: MOD
6579: PUSH
6580: LD_INT 0
6582: EQUAL
6583: IFFALSE 6659
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6585: LD_ADDR_VAR 0 8
6589: PUSH
6590: LD_VAR 0 8
6594: PPUSH
6595: LD_INT 1
6597: PUSH
6598: LD_VAR 0 8
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: LD_INT 14
6619: PUSH
6620: LD_INT 1
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 28
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 1
6638: PPUSH
6639: LD_INT 2
6641: PPUSH
6642: CALL_OW 12
6646: ARRAY
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL 53584 0 3
6658: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6659: LD_INT 1
6661: PPUSH
6662: LD_VAR 0 8
6666: PPUSH
6667: CALL 40238 0 2
// if GetSide ( ar_dep_w ) = 2 then
6671: LD_INT 45
6673: PPUSH
6674: CALL_OW 255
6678: PUSH
6679: LD_INT 2
6681: EQUAL
6682: IFFALSE 6767
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6684: LD_ADDR_VAR 0 8
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 28
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 14
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 27
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 27
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_VAR 0 8
6755: PPUSH
6756: CALL 40238 0 2
// wait ( 0 0$50 ) ;
6760: LD_INT 1750
6762: PPUSH
6763: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6774: LD_EXP 68
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: LD_INT 3
6785: PUSH
6786: LD_INT 34
6788: PUSH
6789: LD_INT 32
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 72
6804: PUSH
6805: LD_INT 4
6807: GREATEREQUAL
6808: IFFALSE 6767
// wait ( 0 0$10 ) ;
6810: LD_INT 350
6812: PPUSH
6813: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_EXP 68
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 34
6836: PUSH
6837: LD_INT 32
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 72
6852: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6853: LD_INT 100
6855: PPUSH
6856: CALL_OW 13
6860: PUSH
6861: LD_INT 50
6863: LESS
6864: IFFALSE 6897
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6866: LD_ADDR_VAR 0 5
6870: PUSH
6871: LD_INT 55
6873: PUSH
6874: LD_INT 7
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 75
6883: PUSH
6884: LD_INT 90
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 6926
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_INT 128
6904: PUSH
6905: LD_INT 94
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 180
6914: PUSH
6915: LD_INT 135
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: ST_TO_ADDR
// if w mod 4 = 0 then
6926: LD_VAR 0 7
6930: PUSH
6931: LD_INT 4
6933: MOD
6934: PUSH
6935: LD_INT 0
6937: EQUAL
6938: IFFALSE 6969
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6940: LD_ADDR_VAR 0 5
6944: PUSH
6945: LD_INT 91
6947: PUSH
6948: LD_INT 58
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 117
6957: PUSH
6958: LD_INT 107
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6969: LD_INT 1
6971: PPUSH
6972: LD_VAR 0 3
6976: PPUSH
6977: LD_VAR 0 5
6981: PPUSH
6982: LD_VAR 0 6
6986: PPUSH
6987: CALL 40471 0 4
// if mc_vehicles [ 2 ] then
6991: LD_EXP 68
6995: PUSH
6996: LD_INT 2
6998: ARRAY
6999: IFFALSE 7035
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7001: LD_INT 2
7003: PPUSH
7004: LD_EXP 68
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: LD_INT 73
7015: PUSH
7016: LD_INT 115
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: PPUSH
7026: LD_VAR 0 6
7030: PPUSH
7031: CALL 40471 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7035: LD_INT 22050
7037: PPUSH
7038: LD_INT 28350
7040: PPUSH
7041: CALL_OW 12
7045: PPUSH
7046: CALL_OW 67
// w := w + 1 ;
7050: LD_ADDR_VAR 0 7
7054: PUSH
7055: LD_VAR 0 7
7059: PUSH
7060: LD_INT 1
7062: PLUS
7063: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7064: LD_INT 94
7066: PPUSH
7067: CALL_OW 301
7071: PUSH
7072: LD_EXP 49
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PPUSH
7081: LD_INT 30
7083: PUSH
7084: LD_INT 3
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: NOT
7096: OR
7097: IFFALSE 6363
// end ;
7099: PPOPN 8
7101: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7102: LD_INT 204
7104: IFFALSE 7578
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
// begin enable ;
7115: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7116: LD_INT 35
7118: PPUSH
7119: LD_INT 1190
7121: PPUSH
7122: CALL_OW 12
7126: PPUSH
7127: CALL_OW 67
// tmp := [ ] ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: EMPTY
7137: ST_TO_ADDR
// uc_side := 8 ;
7138: LD_ADDR_OWVAR 20
7142: PUSH
7143: LD_INT 8
7145: ST_TO_ADDR
// uc_nation := 2 ;
7146: LD_ADDR_OWVAR 21
7150: PUSH
7151: LD_INT 2
7153: ST_TO_ADDR
// InitHc ;
7154: CALL_OW 19
// for i = 1 to 3 do
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_INT 3
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7299
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7174: LD_INT 13
7176: PUSH
7177: LD_INT 14
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 1
7186: PPUSH
7187: LD_INT 2
7189: PPUSH
7190: CALL_OW 12
7194: ARRAY
7195: PPUSH
7196: LD_INT 3
7198: PPUSH
7199: LD_INT 5
7201: PPUSH
7202: LD_INT 27
7204: PUSH
7205: LD_INT 28
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 1
7214: PPUSH
7215: LD_INT 2
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 100
7226: PPUSH
7227: CALL 53462 0 5
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 4
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7253: LD_VAR 0 3
7257: PPUSH
7258: LD_INT 15
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_VAR 0 2
7277: PPUSH
7278: LD_VAR 0 2
7282: PUSH
7283: LD_INT 1
7285: PLUS
7286: PPUSH
7287: LD_VAR 0 3
7291: PPUSH
7292: CALL_OW 1
7296: ST_TO_ADDR
// end ;
7297: GO 7171
7299: POP
7300: POP
// for i = 1 to 4 do
7301: LD_ADDR_VAR 0 1
7305: PUSH
7306: DOUBLE
7307: LD_INT 1
7309: DEC
7310: ST_TO_ADDR
7311: LD_INT 4
7313: PUSH
7314: FOR_TO
7315: IFFALSE 7394
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7317: LD_INT 0
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: LD_INT 4
7325: PPUSH
7326: CALL_OW 12
7330: PPUSH
7331: LD_INT 6
7333: PPUSH
7334: CALL_OW 380
// un := CreateHuman ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: CALL_OW 44
7347: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7348: LD_VAR 0 3
7352: PPUSH
7353: LD_INT 15
7355: PPUSH
7356: LD_INT 0
7358: PPUSH
7359: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_INT 1
7380: PLUS
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 1
7391: ST_TO_ADDR
// end ;
7392: GO 7314
7394: POP
7395: POP
// wait ( 0 0$3 ) ;
7396: LD_INT 105
7398: PPUSH
7399: CALL_OW 67
// for i in tmp do
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 2
7412: PUSH
7413: FOR_IN
7414: IFFALSE 7482
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 257
7425: PUSH
7426: LD_INT 1
7428: EQUAL
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 247
7439: PUSH
7440: LD_INT 2
7442: EQUAL
7443: OR
7444: IFFALSE 7480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_INT 81
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 69
7465: PPUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 74
7475: PPUSH
7476: CALL_OW 115
7480: GO 7413
7482: POP
7483: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7484: LD_VAR 0 2
7488: PPUSH
7489: LD_INT 210
7491: PPUSH
7492: LD_INT 178
7494: PPUSH
7495: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7499: LD_ADDR_VAR 0 4
7503: PUSH
7504: LD_INT 10
7506: PPUSH
7507: LD_INT 22
7509: PUSH
7510: LD_INT 8
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 70
7521: ST_TO_ADDR
// if x then
7522: LD_VAR 0 4
7526: IFFALSE 7554
// for i in x do
7528: LD_ADDR_VAR 0 1
7532: PUSH
7533: LD_VAR 0 4
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7552
// RemoveUnit ( i ) ;
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 64
7550: GO 7538
7552: POP
7553: POP
// wait ( 0 0$1 ) ;
7554: LD_INT 35
7556: PPUSH
7557: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 8
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: NOT
7576: IFFALSE 7484
// end ;
7578: PPOPN 4
7580: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7581: LD_INT 22
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 34
7593: PUSH
7594: LD_INT 31
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 24
7606: PUSH
7607: LD_INT 1000
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: IFFALSE 7671
7629: GO 7631
7631: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7632: LD_INT 22
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 34
7644: PUSH
7645: LD_INT 31
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PPUSH
7661: LD_INT 106
7663: PPUSH
7664: LD_INT 14
7666: PPUSH
7667: CALL_OW 111
// end ; end_of_file
7671: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
// InGameOn ;
7680: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7684: LD_EXP 20
7688: PPUSH
7689: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7693: LD_INT 2
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_INT 22
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 34
7760: PUSH
7761: LD_INT 11
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 69
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: ST_TO_ADDR
// for i = 1 to tmp do
7781: LD_ADDR_VAR 0 6
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_VAR 0 2
7795: PUSH
7796: FOR_TO
7797: IFFALSE 7844
// begin if i = 5 then
7799: LD_VAR 0 6
7803: PUSH
7804: LD_INT 5
7806: EQUAL
7807: IFFALSE 7811
// break ;
7809: GO 7844
// sols := Replace ( sols , i , tmp [ i ] ) ;
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: LD_VAR 0 5
7820: PPUSH
7821: LD_VAR 0 6
7825: PPUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_VAR 0 6
7835: ARRAY
7836: PPUSH
7837: CALL_OW 1
7841: ST_TO_ADDR
// end ;
7842: GO 7796
7844: POP
7845: POP
// tmp := ar_force_tmp ;
7846: LD_ADDR_VAR 0 2
7850: PUSH
7851: LD_EXP 39
7855: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_INT 108
7867: PPUSH
7868: LD_INT 139
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PPUSH
7887: LD_EXP 20
7891: PPUSH
7892: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 2
7903: ARRAY
7904: PPUSH
7905: LD_INT 114
7907: PPUSH
7908: LD_INT 132
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7918: LD_VAR 0 2
7922: PUSH
7923: LD_INT 3
7925: ARRAY
7926: PPUSH
7927: LD_INT 115
7929: PPUSH
7930: LD_INT 132
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7940: LD_VAR 0 2
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_INT 3
7956: ARRAY
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7966: LD_VAR 0 4
7970: PPUSH
7971: LD_INT 83
7973: PPUSH
7974: LD_INT 123
7976: PPUSH
7977: CALL_OW 111
// Wait ( 0 0$01 ) ;
7981: LD_INT 35
7983: PPUSH
7984: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7988: LD_INT 90
7990: PPUSH
7991: LD_INT 144
7993: PPUSH
7994: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_INT 88
8005: PPUSH
8006: LD_INT 129
8008: PPUSH
8009: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 92
8020: PUSH
8021: LD_INT 131
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 88
8030: PUSH
8031: LD_INT 127
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 91
8040: PUSH
8041: LD_INT 132
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 92
8050: PUSH
8051: LD_INT 134
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// for i = 1 to sols do
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: DOUBLE
8070: LD_INT 1
8072: DEC
8073: ST_TO_ADDR
8074: LD_VAR 0 5
8078: PUSH
8079: FOR_TO
8080: IFFALSE 8153
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8082: LD_VAR 0 5
8086: PUSH
8087: LD_VAR 0 6
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 3
8097: PUSH
8098: LD_VAR 0 6
8102: ARRAY
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 3
8112: PUSH
8113: LD_VAR 0 6
8117: ARRAY
8118: PUSH
8119: LD_INT 2
8121: ARRAY
8122: PPUSH
8123: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8127: LD_VAR 0 5
8131: PUSH
8132: LD_VAR 0 6
8136: ARRAY
8137: PPUSH
8138: CALL_OW 197
// AddComHold ( sols ) ;
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 200
// end ;
8151: GO 8079
8153: POP
8154: POP
// repeat wait ( 0 0$1 ) ;
8155: LD_INT 35
8157: PPUSH
8158: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8162: LD_VAR 0 5
8166: PUSH
8167: LD_INT 1
8169: ARRAY
8170: PPUSH
8171: LD_INT 92
8173: PPUSH
8174: LD_INT 131
8176: PPUSH
8177: CALL_OW 297
8181: PUSH
8182: LD_INT 4
8184: LESS
8185: IFFALSE 8155
// CenterOnXY ( 96 , 139 ) ;
8187: LD_INT 96
8189: PPUSH
8190: LD_INT 139
8192: PPUSH
8193: CALL_OW 84
// wait ( 0 0$3 ) ;
8197: LD_INT 105
8199: PPUSH
8200: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8204: LD_INT 111
8206: PPUSH
8207: LD_INT 135
8209: PPUSH
8210: LD_INT 1
8212: PPUSH
8213: LD_INT 25
8215: NEG
8216: PPUSH
8217: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8221: LD_VAR 0 2
8225: PUSH
8226: LD_INT 2
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 1
8237: ARRAY
8238: PPUSH
8239: CALL_OW 250
8243: PUSH
8244: LD_INT 3
8246: PLUS
8247: PPUSH
8248: LD_VAR 0 2
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: CALL_OW 251
8261: PPUSH
8262: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8266: LD_VAR 0 2
8270: PUSH
8271: LD_INT 3
8273: ARRAY
8274: PPUSH
8275: LD_INT 7
8277: PPUSH
8278: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8282: LD_VAR 0 2
8286: PUSH
8287: LD_INT 2
8289: ARRAY
8290: PPUSH
8291: LD_VAR 0 2
8295: PUSH
8296: LD_INT 1
8298: ARRAY
8299: PPUSH
8300: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8304: LD_INT 35
8306: PPUSH
8307: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 1
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 2
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: CALL_OW 296
8333: PUSH
8334: LD_INT 5
8336: LESS
8337: IFFALSE 8304
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8339: LD_VAR 0 2
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_VAR 0 2
8352: PUSH
8353: LD_INT 2
8355: ARRAY
8356: PPUSH
8357: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: PPUSH
8370: LD_STRING D1a-Merc1-1
8372: PPUSH
8373: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: ARRAY
8385: PPUSH
8386: LD_STRING D1a-FMerc2-1
8388: PPUSH
8389: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 2
8400: ARRAY
8401: PPUSH
8402: LD_VAR 0 2
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PPUSH
8424: LD_INT 500
8426: PPUSH
8427: CALL_OW 234
// wait ( 0 0$2 ) ;
8431: LD_INT 70
8433: PPUSH
8434: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 1
8445: ARRAY
8446: PPUSH
8447: LD_INT 2
8449: PPUSH
8450: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8454: LD_INT 10
8456: PPUSH
8457: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8461: LD_VAR 0 2
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_STRING D1a-Merc1-2
8472: PPUSH
8473: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8477: LD_INT 7
8479: PPUSH
8480: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8484: LD_VAR 0 2
8488: PUSH
8489: LD_INT 1
8491: ARRAY
8492: PPUSH
8493: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8497: LD_VAR 0 2
8501: PUSH
8502: LD_INT 2
8504: ARRAY
8505: PPUSH
8506: LD_INT 10
8508: PPUSH
8509: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: PPUSH
8522: LD_STRING D1a-FMerc2-2
8524: PPUSH
8525: CALL_OW 88
// wait ( 0 0$1 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8536: LD_INT 7
8538: PPUSH
8539: CALL_OW 85
// wait ( 0 0$2 ) ;
8543: LD_INT 70
8545: PPUSH
8546: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8550: LD_EXP 43
8554: PPUSH
8555: LD_STRING D1a-Saliba-1
8557: PPUSH
8558: CALL_OW 91
// KillUnit ( Saliba ) ;
8562: LD_EXP 43
8566: PPUSH
8567: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8571: LD_VAR 0 2
8575: PUSH
8576: LD_INT 3
8578: ARRAY
8579: PPUSH
8580: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8584: LD_EXP 20
8588: PPUSH
8589: CALL_OW 85
// wait ( 0 0$1 ) ;
8593: LD_INT 35
8595: PPUSH
8596: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8600: LD_VAR 0 5
8604: PPUSH
8605: LD_INT 88
8607: PPUSH
8608: LD_INT 141
8610: PPUSH
8611: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8615: LD_VAR 0 5
8619: PPUSH
8620: LD_INT 70
8622: PPUSH
8623: CALL_OW 202
// wait ( 0 0$2 ) ;
8627: LD_INT 70
8629: PPUSH
8630: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8634: LD_INT 2
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: CALL_OW 80
// InGameOff ;
8650: CALL_OW 9
// ComWalk ( sols ) ;
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8663: LD_STRING M1
8665: PPUSH
8666: CALL_OW 337
// game_speed := 4 ;
8670: LD_ADDR_OWVAR 65
8674: PUSH
8675: LD_INT 4
8677: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 135
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 331
// SaveForQuickRestart ;
8691: CALL_OW 22
// ar_run := true ;
8695: LD_ADDR_EXP 5
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 91
8722: PUSH
8723: LD_INT 7
8725: PUSH
8726: LD_INT 10
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: PUSH
8743: LD_INT 7
8745: PPUSH
8746: CALL_OW 256
8750: PUSH
8751: LD_INT 999
8753: LESS
8754: OR
8755: IFFALSE 8703
// if GetSide ( ar_dep_s ) = 2 then
8757: LD_INT 7
8759: PPUSH
8760: CALL_OW 255
8764: PUSH
8765: LD_INT 2
8767: EQUAL
8768: IFFALSE 8780
// SetSide ( ar_dep_s , 1 ) ;
8770: LD_INT 7
8772: PPUSH
8773: LD_INT 1
8775: PPUSH
8776: CALL_OW 235
// end ;
8780: LD_VAR 0 1
8784: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8785: LD_EXP 5
8789: IFFALSE 9149
8791: GO 8793
8793: DISABLE
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_EXP 39
8808: PUSH
8809: LD_EXP 35
8813: PPUSH
8814: LD_INT 2
8816: PUSH
8817: LD_INT 21
8819: PUSH
8820: LD_INT 2
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 1
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 72
8846: ADD
8847: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_INT 5
8855: PPUSH
8856: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8860: LD_INT 5
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 343
// k := 1 ;
8870: LD_ADDR_VAR 0 3
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// for i in tmp do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_VAR 0 2
8887: PUSH
8888: FOR_IN
8889: IFFALSE 8974
// begin if IsInUnit ( i ) then
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 310
8900: IFFALSE 8911
// ComExitBuilding ( i ) ;
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 122
// if GetClass ( i ) = 3 then
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 257
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: IFFALSE 8960
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_EXP 40
8935: PUSH
8936: LD_VAR 0 3
8940: ARRAY
8941: PPUSH
8942: CALL_OW 180
// k := k + 1 ;
8946: LD_ADDR_VAR 0 3
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 1
8958: PLUS
8959: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_INT 10
8967: PPUSH
8968: CALL_OW 173
// end ;
8972: GO 8888
8974: POP
8975: POP
// ar_patrol := true ;
8976: LD_ADDR_EXP 7
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8984: LD_INT 10
8986: PPUSH
8987: CALL_OW 67
// for i in tmp do
8991: LD_ADDR_VAR 0 1
8995: PUSH
8996: LD_VAR 0 2
9000: PUSH
9001: FOR_IN
9002: IFFALSE 9030
// if not HasTask ( i ) then
9004: LD_VAR 0 1
9008: PPUSH
9009: CALL_OW 314
9013: NOT
9014: IFFALSE 9028
// ComMoveToArea ( i , escape_area ) ;
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 10
9023: PPUSH
9024: CALL_OW 113
9028: GO 9001
9030: POP
9031: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9032: LD_ADDR_VAR 0 3
9036: PUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 95
9044: PUSH
9045: LD_INT 10
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 72
9056: ST_TO_ADDR
// if k then
9057: LD_VAR 0 3
9061: IFFALSE 9130
// for i in k do
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: LD_VAR 0 3
9072: PUSH
9073: FOR_IN
9074: IFFALSE 9128
// begin if IsInUnit ( i ) then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 310
9085: IFFALSE 9101
// RemoveUnit ( IsInUnit ( i ) ) ;
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 310
9096: PPUSH
9097: CALL_OW 64
// RemoveUnit ( i ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 64
// tmp := tmp diff i ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_VAR 0 2
9119: PUSH
9120: LD_VAR 0 1
9124: DIFF
9125: ST_TO_ADDR
// end ;
9126: GO 9073
9128: POP
9129: POP
// until tmp = [ ] ;
9130: LD_VAR 0 2
9134: PUSH
9135: EMPTY
9136: EQUAL
9137: IFFALSE 8984
// ChangeSideFog ( 5 , 5 ) ;
9139: LD_INT 5
9141: PPUSH
9142: LD_INT 5
9144: PPUSH
9145: CALL_OW 343
// end ;
9149: PPOPN 3
9151: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9152: LD_EXP 7
9156: IFFALSE 9446
9158: GO 9160
9160: DISABLE
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
9165: PPUSH
// begin uc_side := 2 ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_INT 2
9173: ST_TO_ADDR
// uc_nation := 2 ;
9174: LD_ADDR_OWVAR 21
9178: PUSH
9179: LD_INT 2
9181: ST_TO_ADDR
// InitHc ;
9182: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9186: LD_INT 1
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 6
9194: PPUSH
9195: CALL_OW 380
// un := CreateHuman ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: CALL_OW 44
9208: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9209: LD_INT 14
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_INT 27
9220: PPUSH
9221: LD_INT 98
9223: PPUSH
9224: CALL 53462 0 5
// veh := CreateVehicle ;
9228: LD_ADDR_VAR 0 3
9232: PUSH
9233: CALL_OW 45
9237: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9238: LD_VAR 0 3
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_INT 179
9257: PPUSH
9258: LD_INT 135
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_VAR 0 3
9277: PPUSH
9278: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 126
9289: PPUSH
9290: LD_INT 133
9292: PPUSH
9293: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9297: LD_INT 10
9299: PPUSH
9300: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: CALL_OW 292
9316: PUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: LD_INT 7
9324: PPUSH
9325: CALL_OW 296
9329: PUSH
9330: LD_INT 9
9332: LESS
9333: OR
9334: IFFALSE 9297
// ComHold ( veh ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_STRING D2aa-Ar1-1
9352: PPUSH
9353: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 177
9364: PPUSH
9365: LD_INT 96
9367: PPUSH
9368: CALL_OW 111
// AddComExitVehicle ( un ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9381: LD_INT 35
9383: PPUSH
9384: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9388: LD_VAR 0 2
9392: PPUSH
9393: LD_INT 204
9395: PPUSH
9396: CALL_OW 296
9400: PUSH
9401: LD_INT 15
9403: LESS
9404: IFFALSE 9381
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9406: LD_ADDR_EXP 49
9410: PUSH
9411: LD_EXP 49
9415: PPUSH
9416: LD_INT 3
9418: PUSH
9419: LD_EXP 49
9423: PUSH
9424: LD_INT 3
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: PLUS
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 53584 0 3
9445: ST_TO_ADDR
// end ;
9446: PPOPN 3
9448: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9449: LD_INT 7
9451: PPUSH
9452: CALL_OW 255
9456: PUSH
9457: LD_INT 1
9459: EQUAL
9460: PUSH
9461: LD_INT 7
9463: PPUSH
9464: CALL_OW 301
9468: OR
9469: IFFALSE 11893
9471: GO 9473
9473: DISABLE
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_EXP 35
9487: PPUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 3
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 72
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9520
// SetSide ( i , 1 ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 235
9518: GO 9503
9520: POP
9521: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_INT 46
9529: PUSH
9530: LD_INT 41
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 50
9539: PUSH
9540: LD_INT 25
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 57
9549: PUSH
9550: LD_INT 75
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 75
9559: PUSH
9560: LD_INT 89
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 51
9569: PUSH
9570: LD_INT 45
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 95
9579: PUSH
9580: LD_INT 95
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 84
9589: PUSH
9590: LD_INT 77
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 101
9599: PUSH
9600: LD_INT 76
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 118
9609: PUSH
9610: LD_INT 81
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 139
9619: PUSH
9620: LD_INT 97
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 129
9629: PUSH
9630: LD_INT 114
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 154
9639: PUSH
9640: LD_INT 111
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: ST_TO_ADDR
// base_captured := true ;
9661: LD_ADDR_EXP 6
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// DialogueOn ;
9669: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9673: LD_EXP 20
9677: PPUSH
9678: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9682: LD_EXP 20
9686: PPUSH
9687: LD_STRING D2-JMM-1
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9694: LD_EXP 29
9698: PPUSH
9699: LD_STRING D2-Pow-1
9701: PPUSH
9702: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9706: LD_EXP 20
9710: PPUSH
9711: LD_STRING D2-JMM-2
9713: PPUSH
9714: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9718: LD_EXP 29
9722: PPUSH
9723: LD_STRING D2-Pow-2
9725: PPUSH
9726: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9730: LD_EXP 20
9734: PPUSH
9735: LD_STRING D2-JMM-3
9737: PPUSH
9738: CALL_OW 88
// DialogueOff ;
9742: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9746: LD_STRING M2
9748: PPUSH
9749: CALL_OW 337
// Wait ( 0 0$2 ) ;
9753: LD_INT 70
9755: PPUSH
9756: CALL_OW 67
// if IsOk ( Gary ) then
9760: LD_EXP 31
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// Say ( Gary , D2a-Gary-1 ) ;
9771: LD_EXP 31
9775: PPUSH
9776: LD_STRING D2a-Gary-1
9778: PPUSH
9779: CALL_OW 88
// if IsOk ( Bobby ) then
9783: LD_EXP 23
9787: PPUSH
9788: CALL_OW 302
9792: IFFALSE 9806
// Say ( Bobby , D2a-Bobby-1 ) ;
9794: LD_EXP 23
9798: PPUSH
9799: LD_STRING D2a-Bobby-1
9801: PPUSH
9802: CALL_OW 88
// if IsOk ( Cyrus ) then
9806: LD_EXP 24
9810: PPUSH
9811: CALL_OW 302
9815: IFFALSE 9829
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9817: LD_EXP 24
9821: PPUSH
9822: LD_STRING D2a-Cyrus-1
9824: PPUSH
9825: CALL_OW 88
// if IsOk ( Lisa ) then
9829: LD_EXP 21
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9852
// Say ( Lisa , D2a-Lisa-1 ) ;
9840: LD_EXP 21
9844: PPUSH
9845: LD_STRING D2a-Lisa-1
9847: PPUSH
9848: CALL_OW 88
// if IsOk ( Frank ) then
9852: LD_EXP 32
9856: PPUSH
9857: CALL_OW 302
9861: IFFALSE 9875
// Say ( Frank , D2a-Frank-1 ) ;
9863: LD_EXP 32
9867: PPUSH
9868: LD_STRING D2a-Frank-1
9870: PPUSH
9871: CALL_OW 88
// if IsOk ( Cornel ) then
9875: LD_EXP 30
9879: PPUSH
9880: CALL_OW 302
9884: IFFALSE 9898
// Say ( Cornel , D2a-Corn-1 ) ;
9886: LD_EXP 30
9890: PPUSH
9891: LD_STRING D2a-Corn-1
9893: PPUSH
9894: CALL_OW 88
// if IsOk ( Donaldson ) then
9898: LD_EXP 22
9902: PPUSH
9903: CALL_OW 302
9907: IFFALSE 9921
// Say ( Donaldson , D2a-Don-1 ) ;
9909: LD_EXP 22
9913: PPUSH
9914: LD_STRING D2a-Don-1
9916: PPUSH
9917: CALL_OW 88
// if IsOk ( Brown ) then
9921: LD_EXP 26
9925: PPUSH
9926: CALL_OW 302
9930: IFFALSE 9944
// Say ( Brown , D2a-Brown-1 ) ;
9932: LD_EXP 26
9936: PPUSH
9937: LD_STRING D2a-Brown-1
9939: PPUSH
9940: CALL_OW 88
// Wait ( 0 0$30 ) ;
9944: LD_INT 1050
9946: PPUSH
9947: CALL_OW 67
// if IsOk ( Frank ) then
9951: LD_EXP 32
9955: PPUSH
9956: CALL_OW 302
9960: IFFALSE 10226
// begin DialogueOn ;
9962: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9966: LD_EXP 20
9970: PUSH
9971: LD_EXP 32
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9984: LD_EXP 32
9988: PPUSH
9989: LD_STRING D3F-Frank-1
9991: PPUSH
9992: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9996: LD_EXP 20
10000: PPUSH
10001: LD_STRING D3F-JMM-1
10003: PPUSH
10004: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10008: LD_EXP 32
10012: PPUSH
10013: LD_STRING D3F-Frank-2
10015: PPUSH
10016: CALL_OW 88
// case Query ( QFrank ) of 1 :
10020: LD_STRING QFrank
10022: PPUSH
10023: CALL_OW 97
10027: PUSH
10028: LD_INT 1
10030: DOUBLE
10031: EQUAL
10032: IFTRUE 10036
10034: GO 10059
10036: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10037: LD_EXP 20
10041: PPUSH
10042: LD_STRING D3Fa-JMM-1
10044: PPUSH
10045: CALL_OW 88
// us_scout := 1 ;
10049: LD_ADDR_EXP 8
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// end ; 2 :
10057: GO 10222
10059: LD_INT 2
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10189
10067: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10068: LD_EXP 20
10072: PPUSH
10073: LD_STRING D3Fb-JMM-1
10075: PPUSH
10076: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10080: LD_EXP 32
10084: PPUSH
10085: LD_STRING D3Fb-Frank-1
10087: PPUSH
10088: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10092: LD_STRING QFrank2
10094: PPUSH
10095: CALL_OW 97
10099: PUSH
10100: LD_INT 1
10102: DOUBLE
10103: EQUAL
10104: IFTRUE 10108
10106: GO 10155
10108: POP
// begin us_scout := 2 ;
10109: LD_ADDR_EXP 8
10113: PUSH
10114: LD_INT 2
10116: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10117: LD_EXP 20
10121: PPUSH
10122: LD_STRING D3Fba-JMM-1
10124: PPUSH
10125: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10129: LD_EXP 32
10133: PPUSH
10134: LD_STRING D3Fba-Frank-1
10136: PPUSH
10137: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10141: LD_EXP 20
10145: PPUSH
10146: LD_STRING D3Fba-JMM-2
10148: PPUSH
10149: CALL_OW 88
// end ; 2 :
10153: GO 10187
10155: LD_INT 2
10157: DOUBLE
10158: EQUAL
10159: IFTRUE 10163
10161: GO 10186
10163: POP
// begin us_scout := 0 ;
10164: LD_ADDR_EXP 8
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10172: LD_EXP 20
10176: PPUSH
10177: LD_STRING D3Fbb-JMM-1
10179: PPUSH
10180: CALL_OW 88
// end ; end ;
10184: GO 10187
10186: POP
// end ; 3 :
10187: GO 10222
10189: LD_INT 3
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10221
10197: POP
// begin us_scout := - 1 ;
10198: LD_ADDR_EXP 8
10202: PUSH
10203: LD_INT 1
10205: NEG
10206: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10207: LD_EXP 20
10211: PPUSH
10212: LD_STRING D3Fc-JMM-1
10214: PPUSH
10215: CALL_OW 88
// end ; end ;
10219: GO 10222
10221: POP
// DialogueOff ;
10222: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10226: LD_EXP 8
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: IN
10242: IFFALSE 10246
// exit ;
10244: GO 11893
// if us_scout in [ 1 , 2 ] then
10246: LD_EXP 8
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: IN
10261: IFFALSE 10960
// begin if IsInUnit ( Frank ) then
10263: LD_EXP 32
10267: PPUSH
10268: CALL_OW 310
10272: IFFALSE 10283
// ComExitBuilding ( Frank ) ;
10274: LD_EXP 32
10278: PPUSH
10279: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10283: LD_EXP 32
10287: PPUSH
10288: CALL_OW 311
10292: IFFALSE 10303
// ComExitVehicle ( Frank ) ;
10294: LD_EXP 32
10298: PPUSH
10299: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10303: LD_EXP 32
10307: PPUSH
10308: LD_INT 4
10310: PPUSH
10311: CALL_OW 235
// wait ( 0 0$1 ) ;
10315: LD_INT 35
10317: PPUSH
10318: CALL_OW 67
// if us_scout = 2 then
10322: LD_EXP 8
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: IFFALSE 10698
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10332: LD_EXP 32
10336: PPUSH
10337: LD_INT 75
10339: PPUSH
10340: LD_INT 63
10342: PPUSH
10343: CALL_OW 111
// AddComHold ( Frank ) ;
10347: LD_EXP 32
10351: PPUSH
10352: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10356: LD_EXP 32
10360: PPUSH
10361: LD_INT 770
10363: PPUSH
10364: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10368: LD_EXP 32
10372: PPUSH
10373: LD_INT 100
10375: PPUSH
10376: LD_INT 75
10378: PPUSH
10379: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10383: LD_EXP 32
10387: PPUSH
10388: LD_INT 123
10390: PPUSH
10391: LD_INT 103
10393: PPUSH
10394: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10398: LD_EXP 32
10402: PPUSH
10403: LD_INT 138
10405: PPUSH
10406: LD_INT 108
10408: PPUSH
10409: CALL_OW 171
// AddComHold ( Frank ) ;
10413: LD_EXP 32
10417: PPUSH
10418: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10422: LD_INT 35
10424: PPUSH
10425: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10429: LD_EXP 32
10433: PPUSH
10434: LD_INT 138
10436: PPUSH
10437: LD_INT 108
10439: PPUSH
10440: CALL_OW 307
10444: IFFALSE 10422
// AddComMoveXY ( Frank , 125 , 132 ) ;
10446: LD_EXP 32
10450: PPUSH
10451: LD_INT 125
10453: PPUSH
10454: LD_INT 132
10456: PPUSH
10457: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10461: LD_INT 35
10463: PPUSH
10464: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10468: LD_INT 1
10470: PPUSH
10471: LD_EXP 32
10475: PPUSH
10476: CALL_OW 292
10480: PUSH
10481: LD_EXP 32
10485: PPUSH
10486: LD_INT 7
10488: PPUSH
10489: CALL_OW 296
10493: PUSH
10494: LD_INT 7
10496: LESS
10497: OR
10498: IFFALSE 10461
// DialogueOn ;
10500: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10504: LD_EXP 32
10508: PPUSH
10509: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10513: LD_INT 10
10515: PPUSH
10516: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10520: LD_EXP 20
10524: PPUSH
10525: LD_STRING D4Fa-JMM-1
10527: PPUSH
10528: CALL_OW 88
// for i in points do
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: LD_VAR 0 2
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10601
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10545: LD_VAR 0 1
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 1
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: LD_INT 20
10568: NEG
10569: PPUSH
10570: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10574: LD_VAR 0 1
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 331
// end ;
10599: GO 10542
10601: POP
10602: POP
// dwait ( 0 0$0.5 ) ;
10603: LD_INT 18
10605: PPUSH
10606: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10610: LD_INT 42
10612: PPUSH
10613: LD_INT 27
10615: PPUSH
10616: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10620: LD_EXP 32
10624: PPUSH
10625: LD_STRING D4Fa-Frank-1
10627: PPUSH
10628: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10632: LD_INT 18
10634: PPUSH
10635: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10639: LD_EXP 20
10643: PPUSH
10644: LD_STRING D4Fa-JMM-2
10646: PPUSH
10647: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10651: LD_INT 118
10653: PPUSH
10654: LD_INT 80
10656: PPUSH
10657: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10661: LD_EXP 32
10665: PPUSH
10666: LD_STRING D4Fa-Frank-2
10668: PPUSH
10669: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10673: LD_INT 10
10675: PPUSH
10676: CALL_OW 68
// DialogueOff ;
10680: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10684: LD_EXP 32
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 235
// end else
10696: GO 10960
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10698: LD_INT 2
10700: PPUSH
10701: LD_INT 4
10703: PPUSH
10704: LD_INT 2
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10714: LD_EXP 32
10718: PPUSH
10719: LD_INT 75
10721: PPUSH
10722: LD_INT 63
10724: PPUSH
10725: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10729: LD_EXP 32
10733: PPUSH
10734: LD_INT 175
10736: PPUSH
10737: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10741: LD_EXP 32
10745: PPUSH
10746: LD_INT 102
10748: PPUSH
10749: LD_INT 76
10751: PPUSH
10752: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10756: LD_EXP 32
10760: PPUSH
10761: LD_INT 108
10763: PPUSH
10764: LD_INT 70
10766: PPUSH
10767: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10771: LD_INT 35
10773: PPUSH
10774: CALL_OW 67
// until See ( 2 , Frank ) ;
10778: LD_INT 2
10780: PPUSH
10781: LD_EXP 32
10785: PPUSH
10786: CALL_OW 292
10790: IFFALSE 10771
// ComMoveXY ( Frank , 112 , 118 ) ;
10792: LD_EXP 32
10796: PPUSH
10797: LD_INT 112
10799: PPUSH
10800: LD_INT 118
10802: PPUSH
10803: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10807: LD_EXP 32
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 750
10819: GREATEREQUAL
10820: IFFALSE 10834
// SetLives ( Frank , 700 ) ;
10822: LD_EXP 32
10826: PPUSH
10827: LD_INT 700
10829: PPUSH
10830: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10834: LD_INT 35
10836: PPUSH
10837: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10841: LD_INT 1
10843: PPUSH
10844: LD_EXP 32
10848: PPUSH
10849: CALL_OW 292
10853: PUSH
10854: LD_EXP 32
10858: PPUSH
10859: LD_INT 7
10861: PPUSH
10862: CALL_OW 296
10866: PUSH
10867: LD_INT 17
10869: LESS
10870: OR
10871: IFFALSE 10834
// DialogueOn ;
10873: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10877: LD_EXP 32
10881: PPUSH
10882: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10886: LD_EXP 32
10890: PPUSH
10891: LD_STRING D4Fb-Frank-1
10893: PPUSH
10894: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10898: LD_EXP 20
10902: PPUSH
10903: LD_STRING D4Fb-JMM-1
10905: PPUSH
10906: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10910: LD_INT 2
10912: PPUSH
10913: LD_STRING D4Fb-FSci1-1
10915: PPUSH
10916: CALL 15541 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10920: LD_EXP 32
10924: PPUSH
10925: LD_STRING D4Fb-Frank-2
10927: PPUSH
10928: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10932: LD_EXP 20
10936: PPUSH
10937: LD_STRING D4Fb-JMM-2
10939: PPUSH
10940: CALL_OW 88
// DialogueOff ;
10944: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10948: LD_EXP 32
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10960: LD_EXP 33
10964: PPUSH
10965: CALL_OW 302
10969: PUSH
10970: LD_EXP 32
10974: NOT
10975: AND
10976: IFFALSE 11124
// begin DialogueOn ;
10978: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10982: LD_EXP 20
10986: PUSH
10987: LD_EXP 33
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11000: LD_EXP 33
11004: PPUSH
11005: LD_STRING D3Y-Yam-1
11007: PPUSH
11008: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11012: LD_EXP 20
11016: PPUSH
11017: LD_STRING D3Y-JMM-1
11019: PPUSH
11020: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11024: LD_EXP 33
11028: PPUSH
11029: LD_STRING D3Y-Yam-2
11031: PPUSH
11032: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11036: LD_STRING QYamoko
11038: PPUSH
11039: CALL_OW 97
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11087
11052: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11053: LD_EXP 20
11057: PPUSH
11058: LD_STRING D3Ya-JMM-1
11060: PPUSH
11061: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11065: LD_EXP 33
11069: PPUSH
11070: LD_STRING D3Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// us_scout := 1 ;
11077: LD_ADDR_EXP 8
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// end ; 2 :
11085: GO 11120
11087: LD_INT 2
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11119
11095: POP
// begin us_scout := - 1 ;
11096: LD_ADDR_EXP 8
11100: PUSH
11101: LD_INT 1
11103: NEG
11104: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11105: LD_EXP 20
11109: PPUSH
11110: LD_STRING D3Yb-JMM-1
11112: PPUSH
11113: CALL_OW 88
// end ; end ;
11117: GO 11120
11119: POP
// DialogueOff ;
11120: CALL_OW 7
// end ; if Frank then
11124: LD_EXP 32
11128: IFFALSE 11132
// exit ;
11130: GO 11893
// if us_scout in [ - 1 , 0 ] then
11132: LD_EXP 8
11136: PUSH
11137: LD_INT 1
11139: NEG
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: IN
11148: IFFALSE 11152
// exit ;
11150: GO 11893
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11152: LD_ADDR_EXP 8
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: LD_OWVAR 67
11175: ARRAY
11176: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11177: LD_EXP 8
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: LD_INT 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: IN
11192: IFFALSE 11893
// begin if IsInUnit ( Kikuchi ) then
11194: LD_EXP 33
11198: PPUSH
11199: CALL_OW 310
11203: IFFALSE 11214
// ComExitBuilding ( Kikuchi ) ;
11205: LD_EXP 33
11209: PPUSH
11210: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11214: LD_EXP 33
11218: PPUSH
11219: CALL_OW 311
11223: IFFALSE 11234
// ComExitVehicle ( Kikuchi ) ;
11225: LD_EXP 33
11229: PPUSH
11230: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_INT 4
11241: PPUSH
11242: CALL_OW 235
// wait ( 0 0$1 ) ;
11246: LD_INT 35
11248: PPUSH
11249: CALL_OW 67
// if us_scout = 2 then
11253: LD_EXP 8
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: IFFALSE 11641
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11263: LD_EXP 33
11267: PPUSH
11268: LD_INT 75
11270: PPUSH
11271: LD_INT 63
11273: PPUSH
11274: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11278: LD_EXP 33
11282: PPUSH
11283: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11287: LD_EXP 33
11291: PPUSH
11292: LD_INT 770
11294: PPUSH
11295: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11299: LD_EXP 33
11303: PPUSH
11304: LD_INT 100
11306: PPUSH
11307: LD_INT 75
11309: PPUSH
11310: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11314: LD_EXP 33
11318: PPUSH
11319: LD_INT 123
11321: PPUSH
11322: LD_INT 103
11324: PPUSH
11325: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11329: LD_EXP 33
11333: PPUSH
11334: LD_INT 138
11336: PPUSH
11337: LD_INT 108
11339: PPUSH
11340: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11344: LD_EXP 33
11348: PPUSH
11349: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11353: LD_INT 35
11355: PPUSH
11356: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11360: LD_EXP 33
11364: PPUSH
11365: LD_INT 138
11367: PPUSH
11368: LD_INT 108
11370: PPUSH
11371: CALL_OW 307
11375: IFFALSE 11353
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11377: LD_EXP 33
11381: PPUSH
11382: LD_INT 125
11384: PPUSH
11385: LD_INT 132
11387: PPUSH
11388: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11392: LD_INT 35
11394: PPUSH
11395: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11399: LD_INT 1
11401: PPUSH
11402: LD_EXP 33
11406: PPUSH
11407: CALL_OW 292
11411: PUSH
11412: LD_EXP 33
11416: PPUSH
11417: LD_INT 7
11419: PPUSH
11420: CALL_OW 296
11424: PUSH
11425: LD_INT 7
11427: LESS
11428: OR
11429: IFFALSE 11392
// DialogueOn ;
11431: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11435: LD_EXP 33
11439: PPUSH
11440: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11444: LD_INT 10
11446: PPUSH
11447: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11451: LD_EXP 33
11455: PPUSH
11456: LD_STRING D4Ya-Yam-1
11458: PPUSH
11459: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11463: LD_EXP 20
11467: PPUSH
11468: LD_STRING D4Ya-JMM-1
11470: PPUSH
11471: CALL_OW 88
// for i in points do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 2
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11544
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11488: LD_VAR 0 1
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 1
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: LD_INT 20
11511: NEG
11512: PPUSH
11513: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11517: LD_VAR 0 1
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PPUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 2
11533: ARRAY
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 331
// end ;
11542: GO 11485
11544: POP
11545: POP
// dwait ( 0 0$0.5 ) ;
11546: LD_INT 18
11548: PPUSH
11549: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11553: LD_INT 42
11555: PPUSH
11556: LD_INT 27
11558: PPUSH
11559: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11563: LD_EXP 33
11567: PPUSH
11568: LD_STRING D4Ya-Yam-2
11570: PPUSH
11571: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11575: LD_INT 18
11577: PPUSH
11578: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11582: LD_INT 118
11584: PPUSH
11585: LD_INT 80
11587: PPUSH
11588: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11592: LD_EXP 20
11596: PPUSH
11597: LD_STRING D4Ya-JMM-2
11599: PPUSH
11600: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11604: LD_EXP 33
11608: PPUSH
11609: LD_STRING D4Ya-Yam-3
11611: PPUSH
11612: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11616: LD_INT 10
11618: PPUSH
11619: CALL_OW 68
// DialogueOff ;
11623: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11627: LD_EXP 33
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 235
// end else
11639: GO 11893
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11641: LD_INT 2
11643: PPUSH
11644: LD_INT 4
11646: PPUSH
11647: LD_INT 2
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11657: LD_EXP 33
11661: PPUSH
11662: LD_INT 75
11664: PPUSH
11665: LD_INT 63
11667: PPUSH
11668: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11672: LD_EXP 33
11676: PPUSH
11677: LD_INT 175
11679: PPUSH
11680: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11684: LD_EXP 33
11688: PPUSH
11689: LD_INT 102
11691: PPUSH
11692: LD_INT 76
11694: PPUSH
11695: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11699: LD_EXP 33
11703: PPUSH
11704: LD_INT 108
11706: PPUSH
11707: LD_INT 70
11709: PPUSH
11710: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11714: LD_INT 35
11716: PPUSH
11717: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11721: LD_INT 2
11723: PPUSH
11724: LD_EXP 33
11728: PPUSH
11729: CALL_OW 292
11733: IFFALSE 11714
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11735: LD_EXP 33
11739: PPUSH
11740: LD_INT 112
11742: PPUSH
11743: LD_INT 118
11745: PPUSH
11746: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11750: LD_EXP 33
11754: PPUSH
11755: CALL_OW 256
11759: PUSH
11760: LD_INT 750
11762: GREATEREQUAL
11763: IFFALSE 11777
// SetLives ( Kikuchi , 700 ) ;
11765: LD_EXP 33
11769: PPUSH
11770: LD_INT 700
11772: PPUSH
11773: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11777: LD_INT 35
11779: PPUSH
11780: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11784: LD_INT 1
11786: PPUSH
11787: LD_EXP 33
11791: PPUSH
11792: CALL_OW 292
11796: PUSH
11797: LD_EXP 33
11801: PPUSH
11802: LD_INT 7
11804: PPUSH
11805: CALL_OW 296
11809: PUSH
11810: LD_INT 17
11812: LESS
11813: OR
11814: IFFALSE 11777
// DialogueOn ;
11816: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11820: LD_EXP 33
11824: PPUSH
11825: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11829: LD_EXP 33
11833: PPUSH
11834: LD_STRING D4Yb-Yam-1
11836: PPUSH
11837: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11841: LD_EXP 20
11845: PPUSH
11846: LD_STRING D4Yb-JMM-1
11848: PPUSH
11849: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11853: LD_EXP 33
11857: PPUSH
11858: LD_STRING D4Yb-Yam-2
11860: PPUSH
11861: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11865: LD_EXP 20
11869: PPUSH
11870: LD_STRING D4Yb-JMM-2
11872: PPUSH
11873: CALL_OW 88
// DialogueOff ;
11877: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11881: LD_EXP 33
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 235
// end ; end ; end ;
11893: PPOPN 2
11895: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11896: LD_EXP 6
11900: IFFALSE 12933
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
// begin enable ;
11911: ENABLE
// if not seen [ 1 ] then
11912: LD_EXP 9
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: NOT
11921: IFFALSE 12101
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: LD_INT 22
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 11
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 33
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 69
11974: ST_TO_ADDR
// if tmp then
11975: LD_VAR 0 2
11979: IFFALSE 12101
// for i in tmp do
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_VAR 0 2
11990: PUSH
11991: FOR_IN
11992: IFFALSE 12099
// if See ( 1 , i ) then
11994: LD_INT 1
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 292
12006: IFFALSE 12097
// begin seen := Replace ( seen , 1 , true ) ;
12008: LD_ADDR_EXP 9
12012: PUSH
12013: LD_EXP 9
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 1
12028: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12029: LD_INT 1
12031: PPUSH
12032: CALL 15363 0 1
12036: IFFALSE 12097
// begin DialogueOn ;
12038: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12058: LD_ADDR_VAR 0 3
12062: PUSH
12063: LD_INT 1
12065: PPUSH
12066: LD_STRING D5a-Sol2-1
12068: PPUSH
12069: CALL 15541 0 2
12073: ST_TO_ADDR
// if not un then
12074: LD_VAR 0 3
12078: NOT
12079: IFFALSE 12091
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12081: LD_INT 2
12083: PPUSH
12084: LD_STRING D5a-FSol2-1
12086: PPUSH
12087: CALL 15541 0 2
// DialogueOff ;
12091: CALL_OW 7
// break ;
12095: GO 12099
// end ; end ;
12097: GO 11991
12099: POP
12100: POP
// end ; if not seen [ 2 ] then
12101: LD_EXP 9
12105: PUSH
12106: LD_INT 2
12108: ARRAY
12109: NOT
12110: IFFALSE 12335
// begin can_kamikazed := true ;
12112: LD_ADDR_EXP 10
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 25
12137: PUSH
12138: LD_INT 17
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// if tmp then
12154: LD_VAR 0 2
12158: IFFALSE 12335
// for i in tmp do
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_VAR 0 2
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12333
// if See ( 1 , i ) then
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 292
12185: IFFALSE 12331
// begin seen := Replace ( seen , 2 , true ) ;
12187: LD_ADDR_EXP 9
12191: PUSH
12192: LD_EXP 9
12196: PPUSH
12197: LD_INT 2
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12208: LD_INT 1
12210: PPUSH
12211: CALL 15363 0 1
12215: IFFALSE 12331
// begin DialogueOn ;
12217: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12230: LD_INT 10
12232: PPUSH
12233: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_STRING D5b-Sol1-1
12247: PPUSH
12248: CALL 15541 0 2
12252: ST_TO_ADDR
// if not un then
12253: LD_VAR 0 3
12257: NOT
12258: IFFALSE 12276
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 2
12267: PPUSH
12268: LD_STRING D5b-FSol1-1
12270: PPUSH
12271: CALL 15541 0 2
12275: ST_TO_ADDR
// if un then
12276: LD_VAR 0 3
12280: IFFALSE 12325
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12282: LD_ADDR_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_STRING D5b-Sol2-1
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: CALL 15767 0 3
12302: ST_TO_ADDR
// if not un2 then
12303: LD_VAR 0 4
12307: NOT
12308: IFFALSE 12325
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12310: LD_INT 2
12312: PPUSH
12313: LD_STRING D5b-FSol2-1
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: CALL 15767 0 3
// end ; DialogueOff ;
12325: CALL_OW 7
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12170
12333: POP
12334: POP
// end ; if not seen [ 3 ] then
12335: LD_EXP 9
12339: PUSH
12340: LD_INT 3
12342: ARRAY
12343: NOT
12344: IFFALSE 12518
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 33
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if tmp then
12380: LD_VAR 0 2
12384: IFFALSE 12518
// for i in tmp do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12516
// if See ( 1 , i ) then
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 292
12411: IFFALSE 12514
// begin seen := Replace ( seen , 3 , true ) ;
12413: LD_ADDR_EXP 9
12417: PUSH
12418: LD_EXP 9
12422: PPUSH
12423: LD_INT 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 1
12433: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12434: LD_INT 1
12436: PPUSH
12437: CALL 15363 0 1
12441: IFFALSE 12514
// begin DialogueOn ;
12443: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12456: LD_INT 10
12458: PPUSH
12459: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_STRING D8-Sol1-1
12473: PPUSH
12474: CALL 15541 0 2
12478: ST_TO_ADDR
// if not un then
12479: LD_VAR 0 3
12483: NOT
12484: IFFALSE 12496
// SayRand ( sex_female , D8-FSol1-1 ) ;
12486: LD_INT 2
12488: PPUSH
12489: LD_STRING D8-FSol1-1
12491: PPUSH
12492: CALL 15541 0 2
// Say ( JMM , D8-JMM-1 ) ;
12496: LD_EXP 20
12500: PPUSH
12501: LD_STRING D8-JMM-1
12503: PPUSH
12504: CALL_OW 88
// DialogueOff ;
12508: CALL_OW 7
// break ;
12512: GO 12516
// end ; end ;
12514: GO 12396
12516: POP
12517: POP
// end ; if not seen [ 4 ] then
12518: LD_EXP 9
12522: PUSH
12523: LD_INT 4
12525: ARRAY
12526: NOT
12527: IFFALSE 12689
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 33
12546: PUSH
12547: LD_INT 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: ST_TO_ADDR
// if tmp then
12563: LD_VAR 0 2
12567: IFFALSE 12689
// for i in tmp do
12569: LD_ADDR_VAR 0 1
12573: PUSH
12574: LD_VAR 0 2
12578: PUSH
12579: FOR_IN
12580: IFFALSE 12687
// if See ( 1 , i ) then
12582: LD_INT 1
12584: PPUSH
12585: LD_VAR 0 1
12589: PPUSH
12590: CALL_OW 292
12594: IFFALSE 12685
// begin seen := Replace ( seen , 4 , true ) ;
12596: LD_ADDR_EXP 9
12600: PUSH
12601: LD_EXP 9
12605: PPUSH
12606: LD_INT 4
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 1
12616: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12617: LD_INT 1
12619: PPUSH
12620: CALL 15363 0 1
12624: IFFALSE 12685
// begin DialogueOn ;
12626: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12639: LD_INT 10
12641: PPUSH
12642: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 1
12653: PPUSH
12654: LD_STRING D5a-Sol1-1
12656: PPUSH
12657: CALL 15541 0 2
12661: ST_TO_ADDR
// if not un then
12662: LD_VAR 0 3
12666: NOT
12667: IFFALSE 12679
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12669: LD_INT 2
12671: PPUSH
12672: LD_STRING D5a-FSol1-1
12674: PPUSH
12675: CALL 15541 0 2
// DialogueOff ;
12679: CALL_OW 7
// break ;
12683: GO 12687
// end ; end ;
12685: GO 12579
12687: POP
12688: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12689: LD_EXP 9
12693: PUSH
12694: LD_INT 5
12696: ARRAY
12697: NOT
12698: PUSH
12699: LD_EXP 9
12703: PUSH
12704: LD_INT 3
12706: ARRAY
12707: AND
12708: IFFALSE 12882
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 34
12727: PUSH
12728: LD_INT 31
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: ST_TO_ADDR
// if tmp then
12744: LD_VAR 0 2
12748: IFFALSE 12882
// for i in tmp do
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: FOR_IN
12761: IFFALSE 12880
// if See ( 1 , i ) then
12763: LD_INT 1
12765: PPUSH
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 292
12775: IFFALSE 12878
// begin seen := Replace ( seen , 5 , true ) ;
12777: LD_ADDR_EXP 9
12781: PUSH
12782: LD_EXP 9
12786: PPUSH
12787: LD_INT 5
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 1
12797: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12798: LD_INT 1
12800: PPUSH
12801: CALL 15363 0 1
12805: IFFALSE 12878
// begin DialogueOn ;
12807: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12811: LD_VAR 0 1
12815: PPUSH
12816: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12820: LD_INT 10
12822: PPUSH
12823: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D8a-Sol2-1
12837: PPUSH
12838: CALL 15541 0 2
12842: ST_TO_ADDR
// if not un then
12843: LD_VAR 0 3
12847: NOT
12848: IFFALSE 12860
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_STRING D8a-FSol2-1
12855: PPUSH
12856: CALL 15541 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12860: LD_EXP 20
12864: PPUSH
12865: LD_STRING D8a-JMM-1
12867: PPUSH
12868: CALL_OW 88
// DialogueOff ;
12872: CALL_OW 7
// break ;
12876: GO 12880
// end ; end ;
12878: GO 12760
12880: POP
12881: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12882: LD_EXP 9
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PUSH
12891: LD_EXP 9
12895: PUSH
12896: LD_INT 2
12898: ARRAY
12899: AND
12900: PUSH
12901: LD_EXP 9
12905: PUSH
12906: LD_INT 3
12908: ARRAY
12909: AND
12910: PUSH
12911: LD_EXP 9
12915: PUSH
12916: LD_INT 4
12918: ARRAY
12919: AND
12920: PUSH
12921: LD_EXP 9
12925: PUSH
12926: LD_INT 5
12928: ARRAY
12929: AND
12930: IFFALSE 12933
// disable ;
12932: DISABLE
// end ;
12933: PPOPN 4
12935: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12936: LD_EXP 10
12940: PUSH
12941: LD_EXP 11
12945: AND
12946: IFFALSE 13144
12948: GO 12950
12950: DISABLE
12951: LD_INT 0
12953: PPUSH
// begin DialogueOn ;
12954: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12958: LD_EXP 11
12962: PPUSH
12963: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_STRING D5c-Sol1-1
12977: PPUSH
12978: CALL 15541 0 2
12982: ST_TO_ADDR
// if not un then
12983: LD_VAR 0 1
12987: NOT
12988: IFFALSE 13006
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 2
12997: PPUSH
12998: LD_STRING D5c-FSol1-1
13000: PPUSH
13001: CALL 15541 0 2
13005: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13006: LD_EXP 20
13010: PPUSH
13011: LD_STRING D5c-JMM-1
13013: PPUSH
13014: CALL_OW 88
// if IsOk ( Lisa ) then
13018: LD_EXP 21
13022: PPUSH
13023: CALL_OW 302
13027: IFFALSE 13043
// Say ( Lisa , D5d-Lisa-1 ) else
13029: LD_EXP 21
13033: PPUSH
13034: LD_STRING D5d-Lisa-1
13036: PPUSH
13037: CALL_OW 88
13041: GO 13128
// if IsOk ( Cyrus ) then
13043: LD_EXP 24
13047: PPUSH
13048: CALL_OW 302
13052: IFFALSE 13068
// Say ( Cyrus , D5d-Cyrus-1 ) else
13054: LD_EXP 24
13058: PPUSH
13059: LD_STRING D5d-Cyrus-1
13061: PPUSH
13062: CALL_OW 88
13066: GO 13128
// if IsOk ( Gary ) then
13068: LD_EXP 31
13072: PPUSH
13073: CALL_OW 302
13077: IFFALSE 13093
// Say ( Gary , D5d-Gary-1 ) else
13079: LD_EXP 31
13083: PPUSH
13084: LD_STRING D5d-Gary-1
13086: PPUSH
13087: CALL_OW 88
13091: GO 13128
// if GetSex ( un ) = sex_male then
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 258
13102: PUSH
13103: LD_INT 1
13105: EQUAL
13106: IFFALSE 13122
// Say ( un , D5d-Sol1-1 ) else
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_STRING D5d-Sol1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13128
// begin DialogueOff ;
13122: CALL_OW 7
// exit ;
13126: GO 13144
// end ; Say ( JMM , D5d-JMM-1 ) ;
13128: LD_EXP 20
13132: PPUSH
13133: LD_STRING D5d-JMM-1
13135: PPUSH
13136: CALL_OW 88
// DialogueOff ;
13140: CALL_OW 7
// end ;
13144: PPOPN 1
13146: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 17
13152: PPUSH
13153: CALL_OW 294
13157: PUSH
13158: LD_INT 2
13160: GREATEREQUAL
13161: IFFALSE 13282
13163: GO 13165
13165: DISABLE
13166: LD_INT 0
13168: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13169: LD_INT 10
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: LD_INT 10
13180: NEG
13181: PPUSH
13182: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13186: LD_INT 10
13188: PPUSH
13189: LD_INT 5
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13199: LD_INT 10
13201: PPUSH
13202: LD_INT 5
13204: PPUSH
13205: CALL_OW 86
// DialogueOn ;
13209: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13213: LD_ADDR_VAR 0 1
13217: PUSH
13218: LD_INT 1
13220: PPUSH
13221: LD_STRING D6-Sci1-1
13223: PPUSH
13224: CALL 15541 0 2
13228: ST_TO_ADDR
// if un then
13229: LD_VAR 0 1
13233: IFFALSE 13271
// begin Say ( JMM , D6-JMM-1 ) ;
13235: LD_EXP 20
13239: PPUSH
13240: LD_STRING D6-JMM-1
13242: PPUSH
13243: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13247: LD_VAR 0 1
13251: PPUSH
13252: LD_STRING D6-Sci1-2
13254: PPUSH
13255: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13259: LD_EXP 20
13263: PPUSH
13264: LD_STRING D6-JMM-2
13266: PPUSH
13267: CALL_OW 88
// end ; DialogueOff ;
13271: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13275: LD_STRING M3
13277: PPUSH
13278: CALL_OW 337
// end ;
13282: PPOPN 1
13284: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13285: LD_OWVAR 1
13289: PUSH
13290: LD_INT 42000
13292: GREATEREQUAL
13293: PUSH
13294: LD_INT 2
13296: PPUSH
13297: LD_INT 169
13299: PPUSH
13300: LD_INT 90
13302: PPUSH
13303: LD_INT 10
13305: PPUSH
13306: CALL 54480 0 4
13310: PUSH
13311: LD_INT 4
13313: ARRAY
13314: PUSH
13315: LD_INT 0
13317: EQUAL
13318: PUSH
13319: LD_INT 45
13321: PPUSH
13322: CALL_OW 301
13326: OR
13327: PUSH
13328: LD_INT 45
13330: PPUSH
13331: CALL_OW 255
13335: PUSH
13336: LD_INT 1
13338: EQUAL
13339: OR
13340: AND
13341: PUSH
13342: LD_INT 94
13344: PPUSH
13345: CALL_OW 301
13349: NOT
13350: AND
13351: IFFALSE 14477
13353: GO 13355
13355: DISABLE
13356: LD_INT 0
13358: PPUSH
13359: PPUSH
13360: PPUSH
13361: PPUSH
// begin uc_side := 5 ;
13362: LD_ADDR_OWVAR 20
13366: PUSH
13367: LD_INT 5
13369: ST_TO_ADDR
// uc_nation := 2 ;
13370: LD_ADDR_OWVAR 21
13374: PUSH
13375: LD_INT 2
13377: ST_TO_ADDR
// InitHc ;
13378: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13382: LD_INT 1
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 8
13390: PPUSH
13391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13395: LD_ADDR_OWVAR 29
13399: PUSH
13400: LD_INT 12
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING SecondCharsGal
13417: ST_TO_ADDR
// hc_face_number := 7 ;
13418: LD_ADDR_OWVAR 34
13422: PUSH
13423: LD_INT 7
13425: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13426: LD_ADDR_EXP 45
13430: PUSH
13431: CALL_OW 44
13435: ST_TO_ADDR
// InitHc ;
13436: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 16
13445: PPUSH
13446: LD_INT 2
13448: PPUSH
13449: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13453: LD_ADDR_OWVAR 29
13457: PUSH
13458: LD_INT 12
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: ST_TO_ADDR
// hc_name :=  ;
13468: LD_ADDR_OWVAR 26
13472: PUSH
13473: LD_STRING 
13475: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13476: LD_ADDR_EXP 46
13480: PUSH
13481: CALL_OW 44
13485: ST_TO_ADDR
// InitHc ;
13486: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// until not InBattle ( 1 ) ;
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 463
13504: NOT
13505: IFFALSE 13490
// wait ( 0 0$5 ) ;
13507: LD_INT 175
13509: PPUSH
13510: CALL_OW 67
// DialogueOn ;
13514: CALL_OW 6
// InGameOn ;
13518: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 22
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 25
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 25
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 8
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: PUSH
13618: LD_EXP 20
13622: PUSH
13623: LD_EXP 21
13627: PUSH
13628: LD_EXP 22
13632: PUSH
13633: LD_EXP 23
13637: PUSH
13638: LD_EXP 24
13642: PUSH
13643: LD_EXP 25
13647: PUSH
13648: LD_EXP 26
13652: PUSH
13653: LD_EXP 27
13657: PUSH
13658: LD_EXP 28
13662: PUSH
13663: LD_EXP 30
13667: PUSH
13668: LD_EXP 31
13672: PUSH
13673: LD_EXP 32
13677: PUSH
13678: LD_EXP 33
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: DIFF
13698: PPUSH
13699: LD_INT 26
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 72
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: ST_TO_ADDR
// if not un and Brown then
13718: LD_VAR 0 1
13722: NOT
13723: PUSH
13724: LD_EXP 26
13728: AND
13729: IFFALSE 13741
// un := Brown ;
13731: LD_ADDR_VAR 0 1
13735: PUSH
13736: LD_EXP 26
13740: ST_TO_ADDR
// if un then
13741: LD_VAR 0 1
13745: IFFALSE 13771
// begin Say ( un , D7-Sol1-1 ) ;
13747: LD_VAR 0 1
13751: PPUSH
13752: LD_STRING D7-Sol1-1
13754: PPUSH
13755: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13759: LD_EXP 20
13763: PPUSH
13764: LD_STRING D7-JMM-1
13766: PPUSH
13767: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13771: LD_EXP 45
13775: PPUSH
13776: LD_STRING D7-Ar1-1
13778: PPUSH
13779: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13783: LD_EXP 20
13787: PPUSH
13788: LD_STRING D7-JMM-2
13790: PPUSH
13791: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13795: LD_EXP 45
13799: PPUSH
13800: LD_STRING D7-Ar1-2
13802: PPUSH
13803: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13807: LD_EXP 20
13811: PPUSH
13812: LD_STRING D7-JMM-3
13814: PPUSH
13815: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13819: LD_EXP 45
13823: PPUSH
13824: LD_STRING D7-Ar1-3
13826: PPUSH
13827: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13831: LD_EXP 20
13835: PPUSH
13836: LD_STRING D7-JMM-4
13838: PPUSH
13839: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13843: LD_EXP 45
13847: PPUSH
13848: LD_STRING D7-Ar1-4
13850: PPUSH
13851: CALL_OW 94
// InGameOff ;
13855: CALL_OW 9
// DialogueOff ;
13859: CALL_OW 7
// case Query ( QCameras ) of 1 :
13863: LD_STRING QCameras
13865: PPUSH
13866: CALL_OW 97
13870: PUSH
13871: LD_INT 1
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 13882
13879: POP
// ; 2 :
13880: GO 13896
13882: LD_INT 2
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13895
13890: POP
// exit ; end ;
13891: GO 14477
13893: GO 13896
13895: POP
// ChangeMissionObjectives ( MCar ) ;
13896: LD_STRING MCar
13898: PPUSH
13899: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13903: LD_INT 124
13905: PPUSH
13906: LD_INT 90
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 6
13914: NEG
13915: PPUSH
13916: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13920: LD_INT 124
13922: PPUSH
13923: LD_INT 90
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13933: LD_INT 12
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 424
// wait ( 3 ) ;
13943: LD_INT 3
13945: PPUSH
13946: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13950: LD_INT 124
13952: PPUSH
13953: LD_INT 90
13955: PPUSH
13956: CALL_OW 86
// cargo := false ;
13960: LD_ADDR_VAR 0 3
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_INT 12
13982: PPUSH
13983: LD_INT 32
13985: PUSH
13986: LD_INT 3
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: LD_INT 32
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 58
14005: PUSH
14006: EMPTY
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 70
14018: ST_TO_ADDR
// until cargo ;
14019: LD_VAR 0 3
14023: IFFALSE 13968
// cargo := cargo [ 1 ] ;
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14039: LD_VAR 0 3
14043: PPUSH
14044: LD_INT 5
14046: PPUSH
14047: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14051: LD_INT 12
14053: PPUSH
14054: LD_INT 0
14056: PPUSH
14057: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14061: LD_EXP 45
14065: PPUSH
14066: LD_INT 11
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14076: LD_EXP 46
14080: PPUSH
14081: LD_INT 11
14083: PPUSH
14084: LD_INT 0
14086: PPUSH
14087: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14091: LD_EXP 45
14095: PUSH
14096: LD_EXP 46
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: LD_INT 12
14107: PPUSH
14108: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14112: LD_EXP 45
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14126: LD_EXP 45
14130: PUSH
14131: LD_EXP 46
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: LD_INT 209
14142: PPUSH
14143: LD_INT 178
14145: PPUSH
14146: CALL_OW 171
// while ( true ) do
14150: LD_INT 1
14152: IFFALSE 14306
// begin wait ( 0 0$1 ) ;
14154: LD_INT 35
14156: PPUSH
14157: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14161: LD_EXP 45
14165: PPUSH
14166: CALL_OW 314
14170: NOT
14171: PUSH
14172: LD_EXP 46
14176: PPUSH
14177: CALL_OW 314
14181: NOT
14182: OR
14183: IFFALSE 14209
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14185: LD_EXP 45
14189: PUSH
14190: LD_EXP 46
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PPUSH
14199: LD_INT 209
14201: PPUSH
14202: LD_INT 178
14204: PPUSH
14205: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14209: LD_EXP 45
14213: PPUSH
14214: LD_INT 10
14216: PPUSH
14217: CALL_OW 308
14221: IFFALSE 14232
// RemoveUnit ( ar_mechanic ) ;
14223: LD_EXP 45
14227: PPUSH
14228: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14232: LD_EXP 46
14236: PPUSH
14237: LD_INT 10
14239: PPUSH
14240: CALL_OW 308
14244: IFFALSE 14255
// RemoveUnit ( ar_mechanic_friend ) ;
14246: LD_EXP 46
14250: PPUSH
14251: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 10
14262: PPUSH
14263: CALL_OW 308
14267: IFFALSE 14278
// RemoveUnit ( cargo ) ;
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14278: LD_EXP 45
14282: PPUSH
14283: CALL_OW 300
14287: NOT
14288: PUSH
14289: LD_EXP 46
14293: PPUSH
14294: CALL_OW 300
14298: NOT
14299: AND
14300: IFFALSE 14304
// break ;
14302: GO 14306
// end ;
14304: GO 14150
// wait ( 0 0$2 ) ;
14306: LD_INT 70
14308: PPUSH
14309: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14313: LD_EXP 45
14317: PPUSH
14318: LD_STRING D7a-Ar1-1
14320: PPUSH
14321: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 129
14332: PUSH
14333: LD_INT 10
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 103
14342: PUSH
14343: LD_INT 6
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 148
14352: PUSH
14353: LD_INT 47
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 155
14362: PUSH
14363: LD_INT 16
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
// if Difficulty = 1 then
14376: LD_OWVAR 67
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: IFFALSE 14421
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14386: LD_ADDR_VAR 0 4
14390: PUSH
14391: LD_VAR 0 4
14395: PUSH
14396: LD_INT 78
14398: PUSH
14399: LD_INT 7
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 104
14408: PUSH
14409: LD_INT 43
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: ADD
14420: ST_TO_ADDR
// for i in tmp do
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 4
14430: PUSH
14431: FOR_IN
14432: IFFALSE 14465
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14434: LD_VAR 0 2
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 2
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: LD_INT 9
14457: NEG
14458: PPUSH
14459: CALL_OW 330
14463: GO 14431
14465: POP
14466: POP
// CenterOnXY ( 129 , 10 ) ;
14467: LD_INT 129
14469: PPUSH
14470: LD_INT 10
14472: PPUSH
14473: CALL_OW 84
// end ;
14477: PPOPN 4
14479: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14480: LD_EXP 15
14484: PUSH
14485: LD_INT 21000
14487: MINUS
14488: PUSH
14489: LD_OWVAR 1
14493: LESSEQUAL
14494: IFFALSE 14534
14496: GO 14498
14498: DISABLE
// begin powell_warn := true ;
14499: LD_ADDR_EXP 16
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// DialogueOn ;
14507: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14511: LD_EXP 29
14515: PPUSH
14516: LD_STRING D9-Pow-1
14518: PPUSH
14519: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14523: LD_INT 10
14525: PPUSH
14526: CALL_OW 68
// DialogueOff ;
14530: CALL_OW 7
// end ;
14534: END
// every 0 0$1 trigger game_time <= tick do
14535: LD_EXP 15
14539: PUSH
14540: LD_OWVAR 1
14544: LESSEQUAL
14545: IFFALSE 14584
14547: GO 14549
14549: DISABLE
// begin DialogueOn ;
14550: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14554: LD_EXP 29
14558: PPUSH
14559: LD_STRING D9a-Pow-1
14561: PPUSH
14562: CALL_OW 94
// dwait ( 0 0$2 ) ;
14566: LD_INT 70
14568: PPUSH
14569: CALL_OW 68
// DialogueOff ;
14573: CALL_OW 7
// YouLost ( Command ) ;
14577: LD_STRING Command
14579: PPUSH
14580: CALL_OW 104
// end ;
14584: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14585: LD_INT 22
14587: PUSH
14588: LD_INT 2
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 30
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PUSH
14614: LD_INT 0
14616: EQUAL
14617: PUSH
14618: LD_EXP 20
14622: PPUSH
14623: CALL_OW 302
14627: AND
14628: IFFALSE 15360
14630: GO 14632
14632: DISABLE
14633: LD_INT 0
14635: PPUSH
// begin if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14636: LD_OWVAR 1
14640: PUSH
14641: LD_INT 199500
14643: PUSH
14644: LD_INT 178500
14646: PUSH
14647: LD_INT 168000
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: LD_OWVAR 67
14659: ARRAY
14660: LESS
14661: IFFALSE 14675
// AddMedal ( Time1 , 1 ) else
14663: LD_STRING Time1
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 101
14673: GO 14706
// if not powell_warn then
14675: LD_EXP 16
14679: NOT
14680: IFFALSE 14695
// AddMedal ( Time1 , - 1 ) else
14682: LD_STRING Time1
14684: PPUSH
14685: LD_INT 1
14687: NEG
14688: PPUSH
14689: CALL_OW 101
14693: GO 14706
// AddMedal ( Time1 , - 2 ) ;
14695: LD_STRING Time1
14697: PPUSH
14698: LD_INT 2
14700: NEG
14701: PPUSH
14702: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14706: LD_EXP 17
14710: PUSH
14711: LD_INT 5
14713: PUSH
14714: LD_INT 4
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_OWVAR 67
14729: ARRAY
14730: GREATEREQUAL
14731: IFFALSE 14746
// AddMedal ( Destroy , - 2 ) else
14733: LD_STRING Destroy
14735: PPUSH
14736: LD_INT 2
14738: NEG
14739: PPUSH
14740: CALL_OW 101
14744: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14746: LD_INT 22
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 50
14768: PUSH
14769: EMPTY
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: PUSH
14782: LD_INT 25
14784: GREATEREQUAL
14785: IFFALSE 14800
// AddMedal ( Destroy , - 1 ) else
14787: LD_STRING Destroy
14789: PPUSH
14790: LD_INT 1
14792: NEG
14793: PPUSH
14794: CALL_OW 101
14798: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14800: LD_INT 22
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 50
14822: PUSH
14823: EMPTY
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: PUSH
14836: LD_INT 15
14838: GREATEREQUAL
14839: IFFALSE 14853
// AddMedal ( Destroy , 1 ) else
14841: LD_STRING Destroy
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: CALL_OW 101
14851: GO 14863
// AddMedal ( Destroy , 2 ) ;
14853: LD_STRING Destroy
14855: PPUSH
14856: LD_INT 2
14858: PPUSH
14859: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14863: LD_EXP 13
14867: PPUSH
14868: LD_STRING 11_artifact_captured
14870: PPUSH
14871: CALL_OW 39
// if artifact_get then
14875: LD_EXP 13
14879: IFFALSE 14893
// AddMedal ( Artefact , 1 ) else
14881: LD_STRING Artefact
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 101
14891: GO 14904
// AddMedal ( Artefact , - 1 ) ;
14893: LD_STRING Artefact
14895: PPUSH
14896: LD_INT 1
14898: NEG
14899: PPUSH
14900: CALL_OW 101
// GiveMedals ( MAIN ) ;
14904: LD_STRING MAIN
14906: PPUSH
14907: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14911: LD_ADDR_EXP 19
14915: PUSH
14916: LD_EXP 19
14920: PPUSH
14921: LD_INT 51
14923: PUSH
14924: EMPTY
14925: LIST
14926: PPUSH
14927: CALL_OW 72
14931: ST_TO_ADDR
// tmp := JMM ^ selected ;
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_EXP 20
14941: PUSH
14942: LD_EXP 19
14946: ADD
14947: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14957: LD_VAR 0 1
14961: PUSH
14962: LD_EXP 20
14966: PUSH
14967: LD_EXP 21
14971: PUSH
14972: LD_EXP 22
14976: PUSH
14977: LD_EXP 23
14981: PUSH
14982: LD_EXP 24
14986: PUSH
14987: LD_EXP 25
14991: PUSH
14992: LD_EXP 26
14996: PUSH
14997: LD_EXP 27
15001: PUSH
15002: LD_EXP 28
15006: PUSH
15007: LD_EXP 30
15011: PUSH
15012: LD_EXP 31
15016: PUSH
15017: LD_EXP 32
15021: PUSH
15022: LD_EXP 33
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: DIFF
15042: PPUSH
15043: LD_STRING 11c_others
15045: PPUSH
15046: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15050: LD_EXP 20
15054: PPUSH
15055: LD_EXP 3
15059: PUSH
15060: LD_STRING JMM
15062: STR
15063: PPUSH
15064: CALL_OW 38
// if Lisa then
15068: LD_EXP 21
15072: IFFALSE 15092
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15074: LD_EXP 21
15078: PPUSH
15079: LD_EXP 3
15083: PUSH
15084: LD_STRING Lisa
15086: STR
15087: PPUSH
15088: CALL_OW 38
// if Donaldson then
15092: LD_EXP 22
15096: IFFALSE 15116
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15098: LD_EXP 22
15102: PPUSH
15103: LD_EXP 3
15107: PUSH
15108: LD_STRING Donaldson
15110: STR
15111: PPUSH
15112: CALL_OW 38
// if Bobby then
15116: LD_EXP 23
15120: IFFALSE 15140
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15122: LD_EXP 23
15126: PPUSH
15127: LD_EXP 3
15131: PUSH
15132: LD_STRING Bobby
15134: STR
15135: PPUSH
15136: CALL_OW 38
// if Cyrus then
15140: LD_EXP 24
15144: IFFALSE 15164
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15146: LD_EXP 24
15150: PPUSH
15151: LD_EXP 3
15155: PUSH
15156: LD_STRING Cyrus
15158: STR
15159: PPUSH
15160: CALL_OW 38
// if Denis then
15164: LD_EXP 25
15168: IFFALSE 15188
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15170: LD_EXP 25
15174: PPUSH
15175: LD_EXP 3
15179: PUSH
15180: LD_STRING Denis
15182: STR
15183: PPUSH
15184: CALL_OW 38
// if Brown then
15188: LD_EXP 26
15192: IFFALSE 15212
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15194: LD_EXP 26
15198: PPUSH
15199: LD_EXP 3
15203: PUSH
15204: LD_STRING Brown
15206: STR
15207: PPUSH
15208: CALL_OW 38
// if Gladstone then
15212: LD_EXP 27
15216: IFFALSE 15236
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15218: LD_EXP 27
15222: PPUSH
15223: LD_EXP 3
15227: PUSH
15228: LD_STRING Gladstone
15230: STR
15231: PPUSH
15232: CALL_OW 38
// if Houten then
15236: LD_EXP 28
15240: IFFALSE 15260
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15242: LD_EXP 28
15246: PPUSH
15247: LD_EXP 3
15251: PUSH
15252: LD_STRING Houten
15254: STR
15255: PPUSH
15256: CALL_OW 38
// if Cornel then
15260: LD_EXP 30
15264: IFFALSE 15284
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15266: LD_EXP 30
15270: PPUSH
15271: LD_EXP 3
15275: PUSH
15276: LD_STRING Cornell
15278: STR
15279: PPUSH
15280: CALL_OW 38
// if Gary then
15284: LD_EXP 31
15288: IFFALSE 15308
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15290: LD_EXP 31
15294: PPUSH
15295: LD_EXP 3
15299: PUSH
15300: LD_STRING Gary
15302: STR
15303: PPUSH
15304: CALL_OW 38
// if Frank then
15308: LD_EXP 32
15312: IFFALSE 15332
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15314: LD_EXP 32
15318: PPUSH
15319: LD_EXP 3
15323: PUSH
15324: LD_STRING Frank
15326: STR
15327: PPUSH
15328: CALL_OW 38
// if Kikuchi then
15332: LD_EXP 33
15336: IFFALSE 15356
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15338: LD_EXP 33
15342: PPUSH
15343: LD_EXP 3
15347: PUSH
15348: LD_STRING Kikuchi
15350: STR
15351: PPUSH
15352: CALL_OW 38
// YouWin ;
15356: CALL_OW 103
// end ;
15360: PPOPN 1
15362: END
// export function CanSayRand ( side ) ; begin
15363: LD_INT 0
15365: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15366: LD_ADDR_VAR 0 2
15370: PUSH
15371: LD_INT 52
15373: PUSH
15374: EMPTY
15375: LIST
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 1
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 25
15414: PUSH
15415: LD_INT 3
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 25
15424: PUSH
15425: LD_INT 4
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: PUSH
15449: LD_EXP 20
15453: PUSH
15454: LD_EXP 32
15458: PUSH
15459: LD_EXP 21
15463: PUSH
15464: LD_EXP 22
15468: PUSH
15469: LD_EXP 23
15473: PUSH
15474: LD_EXP 24
15478: PUSH
15479: LD_EXP 25
15483: PUSH
15484: LD_EXP 26
15488: PUSH
15489: LD_EXP 27
15493: PUSH
15494: LD_EXP 28
15498: PUSH
15499: LD_EXP 29
15503: PUSH
15504: LD_EXP 30
15508: PUSH
15509: LD_EXP 31
15513: PUSH
15514: LD_EXP 33
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: DIFF
15535: ST_TO_ADDR
// end ;
15536: LD_VAR 0 2
15540: RET
// export function SayRand ( sex , dial ) ; begin
15541: LD_INT 0
15543: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15544: LD_ADDR_VAR 0 3
15548: PUSH
15549: LD_INT 52
15551: PUSH
15552: EMPTY
15553: LIST
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 26
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 25
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 25
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 25
15612: PUSH
15613: LD_INT 4
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: LD_EXP 20
15642: PUSH
15643: LD_EXP 32
15647: PUSH
15648: LD_EXP 21
15652: PUSH
15653: LD_EXP 22
15657: PUSH
15658: LD_EXP 23
15662: PUSH
15663: LD_EXP 24
15667: PUSH
15668: LD_EXP 25
15672: PUSH
15673: LD_EXP 26
15677: PUSH
15678: LD_EXP 27
15682: PUSH
15683: LD_EXP 28
15687: PUSH
15688: LD_EXP 29
15692: PUSH
15693: LD_EXP 30
15697: PUSH
15698: LD_EXP 31
15702: PUSH
15703: LD_EXP 33
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: DIFF
15724: ST_TO_ADDR
// if not result then
15725: LD_VAR 0 3
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15762
// result := result [ 1 ] ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: ST_TO_ADDR
// Say ( result , dial ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: CALL_OW 88
// end ;
15762: LD_VAR 0 3
15766: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15767: LD_INT 0
15769: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15770: LD_ADDR_VAR 0 4
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 26
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 2
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 69
15856: PUSH
15857: LD_EXP 20
15861: PUSH
15862: LD_EXP 32
15866: PUSH
15867: LD_EXP 21
15871: PUSH
15872: LD_EXP 22
15876: PUSH
15877: LD_EXP 23
15881: PUSH
15882: LD_EXP 24
15886: PUSH
15887: LD_EXP 25
15891: PUSH
15892: LD_EXP 26
15896: PUSH
15897: LD_EXP 27
15901: PUSH
15902: LD_EXP 28
15906: PUSH
15907: LD_EXP 29
15911: PUSH
15912: LD_EXP 30
15916: PUSH
15917: LD_EXP 31
15921: PUSH
15922: LD_EXP 33
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: PUSH
15943: LD_VAR 0 3
15947: ADD
15948: DIFF
15949: ST_TO_ADDR
// if not result then
15950: LD_VAR 0 4
15954: NOT
15955: IFFALSE 15959
// exit ;
15957: GO 15987
// result := result [ 1 ] ;
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 4
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: ST_TO_ADDR
// Say ( result , dial ) ;
15973: LD_VAR 0 4
15977: PPUSH
15978: LD_VAR 0 2
15982: PPUSH
15983: CALL_OW 88
// end ; end_of_file
15987: LD_VAR 0 4
15991: RET
// export function CustomEvent ( event ) ; begin
15992: LD_INT 0
15994: PPUSH
// end ;
15995: LD_VAR 0 2
15999: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 255
16009: PUSH
16010: LD_INT 1
16012: EQUAL
16013: IFFALSE 16023
// artifact_get := true ;
16015: LD_ADDR_EXP 13
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 2
16035: EQUAL
16036: IFFALSE 16054
// begin artifact_get := false ;
16038: LD_ADDR_EXP 13
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
// artifact_stolen := true ;
16046: LD_ADDR_EXP 12
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16054: LD_ADDR_EXP 14
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// end ;
16062: PPOPN 2
16064: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16065: LD_ADDR_EXP 14
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// end ;
16073: PPOPN 2
16075: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16076: LD_VAR 0 1
16080: PUSH
16081: LD_EXP 20
16085: EQUAL
16086: IFFALSE 16097
// begin YouLost ( JMM ) ;
16088: LD_STRING JMM
16090: PPUSH
16091: CALL_OW 104
// exit ;
16095: GO 16229
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16097: LD_VAR 0 1
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: LD_INT 25
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 25
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 25
16147: PUSH
16148: LD_INT 3
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 25
16157: PUSH
16158: LD_INT 4
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 25
16177: PUSH
16178: LD_INT 8
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: IN
16204: IFFALSE 16220
// loses_counter := loses_counter + 1 ;
16206: LD_ADDR_EXP 17
16210: PUSH
16211: LD_EXP 17
16215: PUSH
16216: LD_INT 1
16218: PLUS
16219: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL 43678 0 1
// end ;
16229: PPOPN 1
16231: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_VAR 0 2
16241: PPUSH
16242: CALL 45878 0 2
// end ;
16246: PPOPN 2
16248: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL 45187 0 1
// end ;
16258: PPOPN 1
16260: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16261: LD_VAR 0 1
16265: PPUSH
16266: LD_VAR 0 2
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_VAR 0 4
16280: PPUSH
16281: LD_VAR 0 5
16285: PPUSH
16286: CALL 42994 0 5
// end ;
16290: PPOPN 5
16292: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16293: LD_VAR 0 1
16297: PPUSH
16298: LD_VAR 0 2
16302: PPUSH
16303: CALL 42590 0 2
// end ;
16307: PPOPN 2
16309: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 247
16319: PUSH
16320: LD_INT 2
16322: EQUAL
16323: IFFALSE 16327
// exit ;
16325: GO 16344
// if not kamikazed then
16327: LD_EXP 11
16331: NOT
16332: IFFALSE 16344
// kamikazed := unit ;
16334: LD_ADDR_EXP 11
16338: PUSH
16339: LD_VAR 0 1
16343: ST_TO_ADDR
// end ;
16344: PPOPN 1
16346: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16347: LD_INT 0
16349: PPUSH
16350: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: CALL 42428 0 4
// end ;
16375: PPOPN 6
16377: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_VAR 0 2
16387: PPUSH
16388: LD_VAR 0 3
16392: PPUSH
16393: CALL 42203 0 3
// end ;
16397: PPOPN 3
16399: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_VAR 0 2
16409: PPUSH
16410: CALL 43374 0 2
// end ;
16414: PPOPN 2
16416: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL 41897 0 2
// end ;
16431: PPOPN 2
16433: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16434: LD_VAR 0 1
16438: PPUSH
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL 42088 0 2
// end ;
16448: PPOPN 2
16450: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL 44946 0 1
// end ;
16460: PPOPN 1
16462: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL 46139 0 2
// end ;
16477: PPOPN 2
16479: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_VAR 0 4
16499: PPUSH
16500: CALL 46355 0 4
// end ;
16504: PPOPN 4
16506: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL 89651 0 1
// end ; end_of_file
16516: PPOPN 1
16518: END
// every 0 0$1 trigger game do
16519: LD_EXP 2
16523: IFFALSE 16553
16525: GO 16527
16527: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16528: LD_INT 7
16530: PUSH
16531: LD_INT 6
16533: PUSH
16534: LD_INT 4
16536: PUSH
16537: LD_INT 6
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: PPUSH
16546: LD_INT 1750
16548: PPUSH
16549: CALL 16554 0 2
16553: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
16558: PPUSH
// if not areas then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16698
// repeat wait ( time ) ;
16568: LD_VAR 0 2
16572: PPUSH
16573: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16577: LD_ADDR_VAR 0 5
16581: PUSH
16582: LD_INT 1
16584: PPUSH
16585: LD_INT 90
16587: PPUSH
16588: CALL_OW 12
16592: ST_TO_ADDR
// for i in areas do
16593: LD_ADDR_VAR 0 4
16597: PUSH
16598: LD_VAR 0 1
16602: PUSH
16603: FOR_IN
16604: IFFALSE 16657
// begin if Prob ( p ) then
16606: LD_VAR 0 5
16610: PPUSH
16611: CALL_OW 13
16615: IFFALSE 16655
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16617: LD_INT 1
16619: PPUSH
16620: LD_INT 5
16622: PPUSH
16623: CALL_OW 12
16627: PPUSH
16628: LD_VAR 0 4
16632: PPUSH
16633: LD_INT 1
16635: PPUSH
16636: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16640: LD_INT 385
16642: PPUSH
16643: LD_INT 595
16645: PPUSH
16646: CALL_OW 12
16650: PPUSH
16651: CALL_OW 67
// end ; end ;
16655: GO 16603
16657: POP
16658: POP
// time := time + 0 0$3 ;
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_VAR 0 2
16668: PUSH
16669: LD_INT 105
16671: PLUS
16672: ST_TO_ADDR
// if time > 7 7$00 then
16673: LD_VAR 0 2
16677: PUSH
16678: LD_INT 14700
16680: GREATER
16681: IFFALSE 16691
// time := 0 0$40 ;
16683: LD_ADDR_VAR 0 2
16687: PUSH
16688: LD_INT 1400
16690: ST_TO_ADDR
// until not game ;
16691: LD_EXP 2
16695: NOT
16696: IFFALSE 16568
// end ; end_of_file
16698: LD_VAR 0 3
16702: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16703: LD_INT 0
16705: PPUSH
16706: PPUSH
// skirmish := false ;
16707: LD_ADDR_EXP 47
16711: PUSH
16712: LD_INT 0
16714: ST_TO_ADDR
// debug_mc := false ;
16715: LD_ADDR_EXP 48
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// mc_bases := [ ] ;
16723: LD_ADDR_EXP 49
16727: PUSH
16728: EMPTY
16729: ST_TO_ADDR
// mc_sides := [ ] ;
16730: LD_ADDR_EXP 75
16734: PUSH
16735: EMPTY
16736: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16737: LD_ADDR_EXP 50
16741: PUSH
16742: EMPTY
16743: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16744: LD_ADDR_EXP 51
16748: PUSH
16749: EMPTY
16750: ST_TO_ADDR
// mc_need_heal := [ ] ;
16751: LD_ADDR_EXP 52
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// mc_healers := [ ] ;
16758: LD_ADDR_EXP 53
16762: PUSH
16763: EMPTY
16764: ST_TO_ADDR
// mc_build_list := [ ] ;
16765: LD_ADDR_EXP 54
16769: PUSH
16770: EMPTY
16771: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16772: LD_ADDR_EXP 81
16776: PUSH
16777: EMPTY
16778: ST_TO_ADDR
// mc_builders := [ ] ;
16779: LD_ADDR_EXP 55
16783: PUSH
16784: EMPTY
16785: ST_TO_ADDR
// mc_construct_list := [ ] ;
16786: LD_ADDR_EXP 56
16790: PUSH
16791: EMPTY
16792: ST_TO_ADDR
// mc_turret_list := [ ] ;
16793: LD_ADDR_EXP 57
16797: PUSH
16798: EMPTY
16799: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16800: LD_ADDR_EXP 58
16804: PUSH
16805: EMPTY
16806: ST_TO_ADDR
// mc_miners := [ ] ;
16807: LD_ADDR_EXP 63
16811: PUSH
16812: EMPTY
16813: ST_TO_ADDR
// mc_mines := [ ] ;
16814: LD_ADDR_EXP 62
16818: PUSH
16819: EMPTY
16820: ST_TO_ADDR
// mc_minefields := [ ] ;
16821: LD_ADDR_EXP 64
16825: PUSH
16826: EMPTY
16827: ST_TO_ADDR
// mc_crates := [ ] ;
16828: LD_ADDR_EXP 65
16832: PUSH
16833: EMPTY
16834: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16835: LD_ADDR_EXP 66
16839: PUSH
16840: EMPTY
16841: ST_TO_ADDR
// mc_crates_area := [ ] ;
16842: LD_ADDR_EXP 67
16846: PUSH
16847: EMPTY
16848: ST_TO_ADDR
// mc_vehicles := [ ] ;
16849: LD_ADDR_EXP 68
16853: PUSH
16854: EMPTY
16855: ST_TO_ADDR
// mc_attack := [ ] ;
16856: LD_ADDR_EXP 69
16860: PUSH
16861: EMPTY
16862: ST_TO_ADDR
// mc_produce := [ ] ;
16863: LD_ADDR_EXP 70
16867: PUSH
16868: EMPTY
16869: ST_TO_ADDR
// mc_defender := [ ] ;
16870: LD_ADDR_EXP 71
16874: PUSH
16875: EMPTY
16876: ST_TO_ADDR
// mc_parking := [ ] ;
16877: LD_ADDR_EXP 73
16881: PUSH
16882: EMPTY
16883: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16884: LD_ADDR_EXP 59
16888: PUSH
16889: EMPTY
16890: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16891: LD_ADDR_EXP 61
16895: PUSH
16896: EMPTY
16897: ST_TO_ADDR
// mc_scan := [ ] ;
16898: LD_ADDR_EXP 72
16902: PUSH
16903: EMPTY
16904: ST_TO_ADDR
// mc_scan_area := [ ] ;
16905: LD_ADDR_EXP 74
16909: PUSH
16910: EMPTY
16911: ST_TO_ADDR
// mc_tech := [ ] ;
16912: LD_ADDR_EXP 76
16916: PUSH
16917: EMPTY
16918: ST_TO_ADDR
// mc_class := [ ] ;
16919: LD_ADDR_EXP 90
16923: PUSH
16924: EMPTY
16925: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16926: LD_ADDR_EXP 91
16930: PUSH
16931: EMPTY
16932: ST_TO_ADDR
// end ;
16933: LD_VAR 0 1
16937: RET
// export function MC_Kill ( base ) ; begin
16938: LD_INT 0
16940: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16941: LD_ADDR_EXP 49
16945: PUSH
16946: LD_EXP 49
16950: PPUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: EMPTY
16957: PPUSH
16958: CALL_OW 1
16962: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16963: LD_ADDR_EXP 50
16967: PUSH
16968: LD_EXP 50
16972: PPUSH
16973: LD_VAR 0 1
16977: PPUSH
16978: EMPTY
16979: PPUSH
16980: CALL_OW 1
16984: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16985: LD_ADDR_EXP 51
16989: PUSH
16990: LD_EXP 51
16994: PPUSH
16995: LD_VAR 0 1
16999: PPUSH
17000: EMPTY
17001: PPUSH
17002: CALL_OW 1
17006: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17007: LD_ADDR_EXP 52
17011: PUSH
17012: LD_EXP 52
17016: PPUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: EMPTY
17023: PPUSH
17024: CALL_OW 1
17028: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17029: LD_ADDR_EXP 53
17033: PUSH
17034: LD_EXP 53
17038: PPUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: EMPTY
17045: PPUSH
17046: CALL_OW 1
17050: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17051: LD_ADDR_EXP 54
17055: PUSH
17056: LD_EXP 54
17060: PPUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: EMPTY
17067: PPUSH
17068: CALL_OW 1
17072: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17073: LD_ADDR_EXP 55
17077: PUSH
17078: LD_EXP 55
17082: PPUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: EMPTY
17089: PPUSH
17090: CALL_OW 1
17094: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17095: LD_ADDR_EXP 56
17099: PUSH
17100: LD_EXP 56
17104: PPUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: EMPTY
17111: PPUSH
17112: CALL_OW 1
17116: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17117: LD_ADDR_EXP 57
17121: PUSH
17122: LD_EXP 57
17126: PPUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: EMPTY
17133: PPUSH
17134: CALL_OW 1
17138: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17139: LD_ADDR_EXP 58
17143: PUSH
17144: LD_EXP 58
17148: PPUSH
17149: LD_VAR 0 1
17153: PPUSH
17154: EMPTY
17155: PPUSH
17156: CALL_OW 1
17160: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17161: LD_ADDR_EXP 59
17165: PUSH
17166: LD_EXP 59
17170: PPUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: EMPTY
17177: PPUSH
17178: CALL_OW 1
17182: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17183: LD_ADDR_EXP 60
17187: PUSH
17188: LD_EXP 60
17192: PPUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: LD_INT 0
17200: PPUSH
17201: CALL_OW 1
17205: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17206: LD_ADDR_EXP 61
17210: PUSH
17211: LD_EXP 61
17215: PPUSH
17216: LD_VAR 0 1
17220: PPUSH
17221: EMPTY
17222: PPUSH
17223: CALL_OW 1
17227: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17228: LD_ADDR_EXP 62
17232: PUSH
17233: LD_EXP 62
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: EMPTY
17244: PPUSH
17245: CALL_OW 1
17249: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17250: LD_ADDR_EXP 63
17254: PUSH
17255: LD_EXP 63
17259: PPUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: EMPTY
17266: PPUSH
17267: CALL_OW 1
17271: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17272: LD_ADDR_EXP 64
17276: PUSH
17277: LD_EXP 64
17281: PPUSH
17282: LD_VAR 0 1
17286: PPUSH
17287: EMPTY
17288: PPUSH
17289: CALL_OW 1
17293: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17294: LD_ADDR_EXP 65
17298: PUSH
17299: LD_EXP 65
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: EMPTY
17310: PPUSH
17311: CALL_OW 1
17315: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17316: LD_ADDR_EXP 66
17320: PUSH
17321: LD_EXP 66
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: EMPTY
17332: PPUSH
17333: CALL_OW 1
17337: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17338: LD_ADDR_EXP 67
17342: PUSH
17343: LD_EXP 67
17347: PPUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: EMPTY
17354: PPUSH
17355: CALL_OW 1
17359: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17360: LD_ADDR_EXP 68
17364: PUSH
17365: LD_EXP 68
17369: PPUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: EMPTY
17376: PPUSH
17377: CALL_OW 1
17381: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17382: LD_ADDR_EXP 69
17386: PUSH
17387: LD_EXP 69
17391: PPUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: EMPTY
17398: PPUSH
17399: CALL_OW 1
17403: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17404: LD_ADDR_EXP 70
17408: PUSH
17409: LD_EXP 70
17413: PPUSH
17414: LD_VAR 0 1
17418: PPUSH
17419: EMPTY
17420: PPUSH
17421: CALL_OW 1
17425: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17426: LD_ADDR_EXP 71
17430: PUSH
17431: LD_EXP 71
17435: PPUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: EMPTY
17442: PPUSH
17443: CALL_OW 1
17447: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17448: LD_ADDR_EXP 72
17452: PUSH
17453: LD_EXP 72
17457: PPUSH
17458: LD_VAR 0 1
17462: PPUSH
17463: EMPTY
17464: PPUSH
17465: CALL_OW 1
17469: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17470: LD_ADDR_EXP 73
17474: PUSH
17475: LD_EXP 73
17479: PPUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: EMPTY
17486: PPUSH
17487: CALL_OW 1
17491: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17492: LD_ADDR_EXP 74
17496: PUSH
17497: LD_EXP 74
17501: PPUSH
17502: LD_VAR 0 1
17506: PPUSH
17507: EMPTY
17508: PPUSH
17509: CALL_OW 1
17513: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17514: LD_ADDR_EXP 76
17518: PUSH
17519: LD_EXP 76
17523: PPUSH
17524: LD_VAR 0 1
17528: PPUSH
17529: EMPTY
17530: PPUSH
17531: CALL_OW 1
17535: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17536: LD_ADDR_EXP 78
17540: PUSH
17541: LD_EXP 78
17545: PPUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: EMPTY
17552: PPUSH
17553: CALL_OW 1
17557: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17558: LD_ADDR_EXP 79
17562: PUSH
17563: LD_EXP 79
17567: PPUSH
17568: LD_VAR 0 1
17572: PPUSH
17573: EMPTY
17574: PPUSH
17575: CALL_OW 1
17579: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17580: LD_ADDR_EXP 80
17584: PUSH
17585: LD_EXP 80
17589: PPUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: EMPTY
17596: PPUSH
17597: CALL_OW 1
17601: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17602: LD_ADDR_EXP 81
17606: PUSH
17607: LD_EXP 81
17611: PPUSH
17612: LD_VAR 0 1
17616: PPUSH
17617: EMPTY
17618: PPUSH
17619: CALL_OW 1
17623: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17624: LD_ADDR_EXP 82
17628: PUSH
17629: LD_EXP 82
17633: PPUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: EMPTY
17640: PPUSH
17641: CALL_OW 1
17645: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17646: LD_ADDR_EXP 83
17650: PUSH
17651: LD_EXP 83
17655: PPUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: EMPTY
17662: PPUSH
17663: CALL_OW 1
17667: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17668: LD_ADDR_EXP 84
17672: PUSH
17673: LD_EXP 84
17677: PPUSH
17678: LD_VAR 0 1
17682: PPUSH
17683: EMPTY
17684: PPUSH
17685: CALL_OW 1
17689: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17690: LD_ADDR_EXP 85
17694: PUSH
17695: LD_EXP 85
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: EMPTY
17706: PPUSH
17707: CALL_OW 1
17711: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17712: LD_ADDR_EXP 86
17716: PUSH
17717: LD_EXP 86
17721: PPUSH
17722: LD_VAR 0 1
17726: PPUSH
17727: EMPTY
17728: PPUSH
17729: CALL_OW 1
17733: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17734: LD_ADDR_EXP 87
17738: PUSH
17739: LD_EXP 87
17743: PPUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: EMPTY
17750: PPUSH
17751: CALL_OW 1
17755: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17756: LD_ADDR_EXP 88
17760: PUSH
17761: LD_EXP 88
17765: PPUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: EMPTY
17772: PPUSH
17773: CALL_OW 1
17777: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17778: LD_ADDR_EXP 89
17782: PUSH
17783: LD_EXP 89
17787: PPUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: EMPTY
17794: PPUSH
17795: CALL_OW 1
17799: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17800: LD_ADDR_EXP 90
17804: PUSH
17805: LD_EXP 90
17809: PPUSH
17810: LD_VAR 0 1
17814: PPUSH
17815: EMPTY
17816: PPUSH
17817: CALL_OW 1
17821: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17822: LD_ADDR_EXP 91
17826: PUSH
17827: LD_EXP 91
17831: PPUSH
17832: LD_VAR 0 1
17836: PPUSH
17837: LD_INT 0
17839: PPUSH
17840: CALL_OW 1
17844: ST_TO_ADDR
// end ;
17845: LD_VAR 0 2
17849: RET
// export function MC_Add ( side , units ) ; var base ; begin
17850: LD_INT 0
17852: PPUSH
17853: PPUSH
// base := mc_bases + 1 ;
17854: LD_ADDR_VAR 0 4
17858: PUSH
17859: LD_EXP 49
17863: PUSH
17864: LD_INT 1
17866: PLUS
17867: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
17868: LD_ADDR_EXP 75
17872: PUSH
17873: LD_EXP 75
17877: PPUSH
17878: LD_VAR 0 4
17882: PPUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 1
17892: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
17893: LD_ADDR_EXP 49
17897: PUSH
17898: LD_EXP 49
17902: PPUSH
17903: LD_VAR 0 4
17907: PPUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: CALL_OW 1
17917: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17918: LD_ADDR_EXP 50
17922: PUSH
17923: LD_EXP 50
17927: PPUSH
17928: LD_VAR 0 4
17932: PPUSH
17933: EMPTY
17934: PPUSH
17935: CALL_OW 1
17939: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17940: LD_ADDR_EXP 51
17944: PUSH
17945: LD_EXP 51
17949: PPUSH
17950: LD_VAR 0 4
17954: PPUSH
17955: EMPTY
17956: PPUSH
17957: CALL_OW 1
17961: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17962: LD_ADDR_EXP 52
17966: PUSH
17967: LD_EXP 52
17971: PPUSH
17972: LD_VAR 0 4
17976: PPUSH
17977: EMPTY
17978: PPUSH
17979: CALL_OW 1
17983: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17984: LD_ADDR_EXP 53
17988: PUSH
17989: LD_EXP 53
17993: PPUSH
17994: LD_VAR 0 4
17998: PPUSH
17999: EMPTY
18000: PPUSH
18001: CALL_OW 1
18005: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18006: LD_ADDR_EXP 54
18010: PUSH
18011: LD_EXP 54
18015: PPUSH
18016: LD_VAR 0 4
18020: PPUSH
18021: EMPTY
18022: PPUSH
18023: CALL_OW 1
18027: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18028: LD_ADDR_EXP 55
18032: PUSH
18033: LD_EXP 55
18037: PPUSH
18038: LD_VAR 0 4
18042: PPUSH
18043: EMPTY
18044: PPUSH
18045: CALL_OW 1
18049: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18050: LD_ADDR_EXP 56
18054: PUSH
18055: LD_EXP 56
18059: PPUSH
18060: LD_VAR 0 4
18064: PPUSH
18065: EMPTY
18066: PPUSH
18067: CALL_OW 1
18071: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18072: LD_ADDR_EXP 57
18076: PUSH
18077: LD_EXP 57
18081: PPUSH
18082: LD_VAR 0 4
18086: PPUSH
18087: EMPTY
18088: PPUSH
18089: CALL_OW 1
18093: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18094: LD_ADDR_EXP 58
18098: PUSH
18099: LD_EXP 58
18103: PPUSH
18104: LD_VAR 0 4
18108: PPUSH
18109: EMPTY
18110: PPUSH
18111: CALL_OW 1
18115: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18116: LD_ADDR_EXP 59
18120: PUSH
18121: LD_EXP 59
18125: PPUSH
18126: LD_VAR 0 4
18130: PPUSH
18131: EMPTY
18132: PPUSH
18133: CALL_OW 1
18137: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18138: LD_ADDR_EXP 60
18142: PUSH
18143: LD_EXP 60
18147: PPUSH
18148: LD_VAR 0 4
18152: PPUSH
18153: LD_INT 0
18155: PPUSH
18156: CALL_OW 1
18160: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18161: LD_ADDR_EXP 61
18165: PUSH
18166: LD_EXP 61
18170: PPUSH
18171: LD_VAR 0 4
18175: PPUSH
18176: EMPTY
18177: PPUSH
18178: CALL_OW 1
18182: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18183: LD_ADDR_EXP 62
18187: PUSH
18188: LD_EXP 62
18192: PPUSH
18193: LD_VAR 0 4
18197: PPUSH
18198: EMPTY
18199: PPUSH
18200: CALL_OW 1
18204: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18205: LD_ADDR_EXP 63
18209: PUSH
18210: LD_EXP 63
18214: PPUSH
18215: LD_VAR 0 4
18219: PPUSH
18220: EMPTY
18221: PPUSH
18222: CALL_OW 1
18226: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18227: LD_ADDR_EXP 64
18231: PUSH
18232: LD_EXP 64
18236: PPUSH
18237: LD_VAR 0 4
18241: PPUSH
18242: EMPTY
18243: PPUSH
18244: CALL_OW 1
18248: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18249: LD_ADDR_EXP 65
18253: PUSH
18254: LD_EXP 65
18258: PPUSH
18259: LD_VAR 0 4
18263: PPUSH
18264: EMPTY
18265: PPUSH
18266: CALL_OW 1
18270: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18271: LD_ADDR_EXP 66
18275: PUSH
18276: LD_EXP 66
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: EMPTY
18287: PPUSH
18288: CALL_OW 1
18292: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18293: LD_ADDR_EXP 67
18297: PUSH
18298: LD_EXP 67
18302: PPUSH
18303: LD_VAR 0 4
18307: PPUSH
18308: EMPTY
18309: PPUSH
18310: CALL_OW 1
18314: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18315: LD_ADDR_EXP 68
18319: PUSH
18320: LD_EXP 68
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: EMPTY
18331: PPUSH
18332: CALL_OW 1
18336: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18337: LD_ADDR_EXP 69
18341: PUSH
18342: LD_EXP 69
18346: PPUSH
18347: LD_VAR 0 4
18351: PPUSH
18352: EMPTY
18353: PPUSH
18354: CALL_OW 1
18358: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18359: LD_ADDR_EXP 70
18363: PUSH
18364: LD_EXP 70
18368: PPUSH
18369: LD_VAR 0 4
18373: PPUSH
18374: EMPTY
18375: PPUSH
18376: CALL_OW 1
18380: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18381: LD_ADDR_EXP 71
18385: PUSH
18386: LD_EXP 71
18390: PPUSH
18391: LD_VAR 0 4
18395: PPUSH
18396: EMPTY
18397: PPUSH
18398: CALL_OW 1
18402: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18403: LD_ADDR_EXP 72
18407: PUSH
18408: LD_EXP 72
18412: PPUSH
18413: LD_VAR 0 4
18417: PPUSH
18418: EMPTY
18419: PPUSH
18420: CALL_OW 1
18424: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18425: LD_ADDR_EXP 73
18429: PUSH
18430: LD_EXP 73
18434: PPUSH
18435: LD_VAR 0 4
18439: PPUSH
18440: EMPTY
18441: PPUSH
18442: CALL_OW 1
18446: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18447: LD_ADDR_EXP 74
18451: PUSH
18452: LD_EXP 74
18456: PPUSH
18457: LD_VAR 0 4
18461: PPUSH
18462: EMPTY
18463: PPUSH
18464: CALL_OW 1
18468: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18469: LD_ADDR_EXP 76
18473: PUSH
18474: LD_EXP 76
18478: PPUSH
18479: LD_VAR 0 4
18483: PPUSH
18484: EMPTY
18485: PPUSH
18486: CALL_OW 1
18490: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18491: LD_ADDR_EXP 78
18495: PUSH
18496: LD_EXP 78
18500: PPUSH
18501: LD_VAR 0 4
18505: PPUSH
18506: EMPTY
18507: PPUSH
18508: CALL_OW 1
18512: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18513: LD_ADDR_EXP 79
18517: PUSH
18518: LD_EXP 79
18522: PPUSH
18523: LD_VAR 0 4
18527: PPUSH
18528: EMPTY
18529: PPUSH
18530: CALL_OW 1
18534: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18535: LD_ADDR_EXP 80
18539: PUSH
18540: LD_EXP 80
18544: PPUSH
18545: LD_VAR 0 4
18549: PPUSH
18550: EMPTY
18551: PPUSH
18552: CALL_OW 1
18556: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18557: LD_ADDR_EXP 81
18561: PUSH
18562: LD_EXP 81
18566: PPUSH
18567: LD_VAR 0 4
18571: PPUSH
18572: EMPTY
18573: PPUSH
18574: CALL_OW 1
18578: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18579: LD_ADDR_EXP 82
18583: PUSH
18584: LD_EXP 82
18588: PPUSH
18589: LD_VAR 0 4
18593: PPUSH
18594: EMPTY
18595: PPUSH
18596: CALL_OW 1
18600: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18601: LD_ADDR_EXP 83
18605: PUSH
18606: LD_EXP 83
18610: PPUSH
18611: LD_VAR 0 4
18615: PPUSH
18616: EMPTY
18617: PPUSH
18618: CALL_OW 1
18622: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18623: LD_ADDR_EXP 84
18627: PUSH
18628: LD_EXP 84
18632: PPUSH
18633: LD_VAR 0 4
18637: PPUSH
18638: EMPTY
18639: PPUSH
18640: CALL_OW 1
18644: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18645: LD_ADDR_EXP 85
18649: PUSH
18650: LD_EXP 85
18654: PPUSH
18655: LD_VAR 0 4
18659: PPUSH
18660: EMPTY
18661: PPUSH
18662: CALL_OW 1
18666: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18667: LD_ADDR_EXP 86
18671: PUSH
18672: LD_EXP 86
18676: PPUSH
18677: LD_VAR 0 4
18681: PPUSH
18682: EMPTY
18683: PPUSH
18684: CALL_OW 1
18688: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18689: LD_ADDR_EXP 87
18693: PUSH
18694: LD_EXP 87
18698: PPUSH
18699: LD_VAR 0 4
18703: PPUSH
18704: EMPTY
18705: PPUSH
18706: CALL_OW 1
18710: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18711: LD_ADDR_EXP 88
18715: PUSH
18716: LD_EXP 88
18720: PPUSH
18721: LD_VAR 0 4
18725: PPUSH
18726: EMPTY
18727: PPUSH
18728: CALL_OW 1
18732: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18733: LD_ADDR_EXP 89
18737: PUSH
18738: LD_EXP 89
18742: PPUSH
18743: LD_VAR 0 4
18747: PPUSH
18748: EMPTY
18749: PPUSH
18750: CALL_OW 1
18754: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18755: LD_ADDR_EXP 90
18759: PUSH
18760: LD_EXP 90
18764: PPUSH
18765: LD_VAR 0 4
18769: PPUSH
18770: EMPTY
18771: PPUSH
18772: CALL_OW 1
18776: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18777: LD_ADDR_EXP 91
18781: PUSH
18782: LD_EXP 91
18786: PPUSH
18787: LD_VAR 0 4
18791: PPUSH
18792: LD_INT 0
18794: PPUSH
18795: CALL_OW 1
18799: ST_TO_ADDR
// result := base ;
18800: LD_ADDR_VAR 0 3
18804: PUSH
18805: LD_VAR 0 4
18809: ST_TO_ADDR
// end ;
18810: LD_VAR 0 3
18814: RET
// export function MC_Start ( ) ; var i ; begin
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
// for i = 1 to mc_bases do
18819: LD_ADDR_VAR 0 2
18823: PUSH
18824: DOUBLE
18825: LD_INT 1
18827: DEC
18828: ST_TO_ADDR
18829: LD_EXP 49
18833: PUSH
18834: FOR_TO
18835: IFFALSE 19912
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
18837: LD_ADDR_EXP 49
18841: PUSH
18842: LD_EXP 49
18846: PPUSH
18847: LD_VAR 0 2
18851: PPUSH
18852: LD_EXP 49
18856: PUSH
18857: LD_VAR 0 2
18861: ARRAY
18862: PUSH
18863: LD_INT 0
18865: DIFF
18866: PPUSH
18867: CALL_OW 1
18871: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
18872: LD_ADDR_EXP 50
18876: PUSH
18877: LD_EXP 50
18881: PPUSH
18882: LD_VAR 0 2
18886: PPUSH
18887: EMPTY
18888: PPUSH
18889: CALL_OW 1
18893: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
18894: LD_ADDR_EXP 51
18898: PUSH
18899: LD_EXP 51
18903: PPUSH
18904: LD_VAR 0 2
18908: PPUSH
18909: EMPTY
18910: PPUSH
18911: CALL_OW 1
18915: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
18916: LD_ADDR_EXP 52
18920: PUSH
18921: LD_EXP 52
18925: PPUSH
18926: LD_VAR 0 2
18930: PPUSH
18931: EMPTY
18932: PPUSH
18933: CALL_OW 1
18937: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
18938: LD_ADDR_EXP 53
18942: PUSH
18943: LD_EXP 53
18947: PPUSH
18948: LD_VAR 0 2
18952: PPUSH
18953: EMPTY
18954: PUSH
18955: EMPTY
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 1
18965: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
18966: LD_ADDR_EXP 54
18970: PUSH
18971: LD_EXP 54
18975: PPUSH
18976: LD_VAR 0 2
18980: PPUSH
18981: EMPTY
18982: PPUSH
18983: CALL_OW 1
18987: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
18988: LD_ADDR_EXP 81
18992: PUSH
18993: LD_EXP 81
18997: PPUSH
18998: LD_VAR 0 2
19002: PPUSH
19003: EMPTY
19004: PPUSH
19005: CALL_OW 1
19009: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19010: LD_ADDR_EXP 55
19014: PUSH
19015: LD_EXP 55
19019: PPUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: EMPTY
19026: PPUSH
19027: CALL_OW 1
19031: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19032: LD_ADDR_EXP 56
19036: PUSH
19037: LD_EXP 56
19041: PPUSH
19042: LD_VAR 0 2
19046: PPUSH
19047: EMPTY
19048: PPUSH
19049: CALL_OW 1
19053: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19054: LD_ADDR_EXP 57
19058: PUSH
19059: LD_EXP 57
19063: PPUSH
19064: LD_VAR 0 2
19068: PPUSH
19069: LD_EXP 49
19073: PUSH
19074: LD_VAR 0 2
19078: ARRAY
19079: PPUSH
19080: LD_INT 2
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 32
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 33
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 72
19112: PPUSH
19113: CALL_OW 1
19117: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19118: LD_ADDR_EXP 58
19122: PUSH
19123: LD_EXP 58
19127: PPUSH
19128: LD_VAR 0 2
19132: PPUSH
19133: LD_EXP 49
19137: PUSH
19138: LD_VAR 0 2
19142: ARRAY
19143: PPUSH
19144: LD_INT 2
19146: PUSH
19147: LD_INT 30
19149: PUSH
19150: LD_INT 32
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 30
19159: PUSH
19160: LD_INT 31
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 58
19174: PUSH
19175: EMPTY
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 72
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19192: LD_ADDR_EXP 59
19196: PUSH
19197: LD_EXP 59
19201: PPUSH
19202: LD_VAR 0 2
19206: PPUSH
19207: EMPTY
19208: PPUSH
19209: CALL_OW 1
19213: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19214: LD_ADDR_EXP 63
19218: PUSH
19219: LD_EXP 63
19223: PPUSH
19224: LD_VAR 0 2
19228: PPUSH
19229: EMPTY
19230: PPUSH
19231: CALL_OW 1
19235: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19236: LD_ADDR_EXP 62
19240: PUSH
19241: LD_EXP 62
19245: PPUSH
19246: LD_VAR 0 2
19250: PPUSH
19251: EMPTY
19252: PPUSH
19253: CALL_OW 1
19257: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19258: LD_ADDR_EXP 64
19262: PUSH
19263: LD_EXP 64
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: EMPTY
19274: PPUSH
19275: CALL_OW 1
19279: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19280: LD_ADDR_EXP 65
19284: PUSH
19285: LD_EXP 65
19289: PPUSH
19290: LD_VAR 0 2
19294: PPUSH
19295: EMPTY
19296: PPUSH
19297: CALL_OW 1
19301: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19302: LD_ADDR_EXP 66
19306: PUSH
19307: LD_EXP 66
19311: PPUSH
19312: LD_VAR 0 2
19316: PPUSH
19317: EMPTY
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
19324: LD_ADDR_EXP 67
19328: PUSH
19329: LD_EXP 67
19333: PPUSH
19334: LD_VAR 0 2
19338: PPUSH
19339: EMPTY
19340: PPUSH
19341: CALL_OW 1
19345: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
19346: LD_ADDR_EXP 68
19350: PUSH
19351: LD_EXP 68
19355: PPUSH
19356: LD_VAR 0 2
19360: PPUSH
19361: EMPTY
19362: PPUSH
19363: CALL_OW 1
19367: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
19368: LD_ADDR_EXP 69
19372: PUSH
19373: LD_EXP 69
19377: PPUSH
19378: LD_VAR 0 2
19382: PPUSH
19383: EMPTY
19384: PPUSH
19385: CALL_OW 1
19389: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
19390: LD_ADDR_EXP 70
19394: PUSH
19395: LD_EXP 70
19399: PPUSH
19400: LD_VAR 0 2
19404: PPUSH
19405: EMPTY
19406: PPUSH
19407: CALL_OW 1
19411: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
19412: LD_ADDR_EXP 71
19416: PUSH
19417: LD_EXP 71
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: EMPTY
19428: PPUSH
19429: CALL_OW 1
19433: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
19434: LD_ADDR_EXP 60
19438: PUSH
19439: LD_EXP 60
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_INT 0
19451: PPUSH
19452: CALL_OW 1
19456: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
19457: LD_ADDR_EXP 73
19461: PUSH
19462: LD_EXP 73
19466: PPUSH
19467: LD_VAR 0 2
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 1
19479: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
19480: LD_ADDR_EXP 61
19484: PUSH
19485: LD_EXP 61
19489: PPUSH
19490: LD_VAR 0 2
19494: PPUSH
19495: EMPTY
19496: PPUSH
19497: CALL_OW 1
19501: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
19502: LD_ADDR_EXP 72
19506: PUSH
19507: LD_EXP 72
19511: PPUSH
19512: LD_VAR 0 2
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 1
19524: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
19525: LD_ADDR_EXP 74
19529: PUSH
19530: LD_EXP 74
19534: PPUSH
19535: LD_VAR 0 2
19539: PPUSH
19540: EMPTY
19541: PPUSH
19542: CALL_OW 1
19546: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
19547: LD_ADDR_EXP 77
19551: PUSH
19552: LD_EXP 77
19556: PPUSH
19557: LD_VAR 0 2
19561: PPUSH
19562: LD_INT 0
19564: PPUSH
19565: CALL_OW 1
19569: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
19570: LD_ADDR_EXP 78
19574: PUSH
19575: LD_EXP 78
19579: PPUSH
19580: LD_VAR 0 2
19584: PPUSH
19585: EMPTY
19586: PPUSH
19587: CALL_OW 1
19591: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
19592: LD_ADDR_EXP 79
19596: PUSH
19597: LD_EXP 79
19601: PPUSH
19602: LD_VAR 0 2
19606: PPUSH
19607: EMPTY
19608: PPUSH
19609: CALL_OW 1
19613: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
19614: LD_ADDR_EXP 80
19618: PUSH
19619: LD_EXP 80
19623: PPUSH
19624: LD_VAR 0 2
19628: PPUSH
19629: EMPTY
19630: PPUSH
19631: CALL_OW 1
19635: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
19636: LD_ADDR_EXP 82
19640: PUSH
19641: LD_EXP 82
19645: PPUSH
19646: LD_VAR 0 2
19650: PPUSH
19651: LD_EXP 49
19655: PUSH
19656: LD_VAR 0 2
19660: ARRAY
19661: PPUSH
19662: LD_INT 2
19664: PUSH
19665: LD_INT 30
19667: PUSH
19668: LD_INT 6
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 30
19677: PUSH
19678: LD_INT 7
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 30
19687: PUSH
19688: LD_INT 8
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: PPUSH
19701: CALL_OW 72
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
19711: LD_ADDR_EXP 83
19715: PUSH
19716: LD_EXP 83
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL_OW 1
19732: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
19733: LD_ADDR_EXP 84
19737: PUSH
19738: LD_EXP 84
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: EMPTY
19749: PPUSH
19750: CALL_OW 1
19754: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
19755: LD_ADDR_EXP 85
19759: PUSH
19760: LD_EXP 85
19764: PPUSH
19765: LD_VAR 0 2
19769: PPUSH
19770: EMPTY
19771: PPUSH
19772: CALL_OW 1
19776: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
19777: LD_ADDR_EXP 86
19781: PUSH
19782: LD_EXP 86
19786: PPUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: EMPTY
19793: PPUSH
19794: CALL_OW 1
19798: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
19799: LD_ADDR_EXP 87
19803: PUSH
19804: LD_EXP 87
19808: PPUSH
19809: LD_VAR 0 2
19813: PPUSH
19814: EMPTY
19815: PPUSH
19816: CALL_OW 1
19820: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
19821: LD_ADDR_EXP 88
19825: PUSH
19826: LD_EXP 88
19830: PPUSH
19831: LD_VAR 0 2
19835: PPUSH
19836: EMPTY
19837: PPUSH
19838: CALL_OW 1
19842: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
19843: LD_ADDR_EXP 89
19847: PUSH
19848: LD_EXP 89
19852: PPUSH
19853: LD_VAR 0 2
19857: PPUSH
19858: EMPTY
19859: PPUSH
19860: CALL_OW 1
19864: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
19865: LD_ADDR_EXP 90
19869: PUSH
19870: LD_EXP 90
19874: PPUSH
19875: LD_VAR 0 2
19879: PPUSH
19880: EMPTY
19881: PPUSH
19882: CALL_OW 1
19886: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
19887: LD_ADDR_EXP 91
19891: PUSH
19892: LD_EXP 91
19896: PPUSH
19897: LD_VAR 0 2
19901: PPUSH
19902: LD_INT 0
19904: PPUSH
19905: CALL_OW 1
19909: ST_TO_ADDR
// end ;
19910: GO 18834
19912: POP
19913: POP
// MC_InitSides ( ) ;
19914: CALL 20200 0 0
// MC_InitResearch ( ) ;
19918: CALL 19939 0 0
// CustomInitMacro ( ) ;
19922: CALL 292 0 0
// skirmish := true ;
19926: LD_ADDR_EXP 47
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// end ;
19934: LD_VAR 0 1
19938: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
// if not mc_bases then
19947: LD_EXP 49
19951: NOT
19952: IFFALSE 19956
// exit ;
19954: GO 20195
// for i = 1 to 8 do
19956: LD_ADDR_VAR 0 2
19960: PUSH
19961: DOUBLE
19962: LD_INT 1
19964: DEC
19965: ST_TO_ADDR
19966: LD_INT 8
19968: PUSH
19969: FOR_TO
19970: IFFALSE 19996
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
19972: LD_ADDR_EXP 76
19976: PUSH
19977: LD_EXP 76
19981: PPUSH
19982: LD_VAR 0 2
19986: PPUSH
19987: EMPTY
19988: PPUSH
19989: CALL_OW 1
19993: ST_TO_ADDR
19994: GO 19969
19996: POP
19997: POP
// tmp := [ ] ;
19998: LD_ADDR_VAR 0 5
20002: PUSH
20003: EMPTY
20004: ST_TO_ADDR
// for i = 1 to mc_sides do
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: DOUBLE
20011: LD_INT 1
20013: DEC
20014: ST_TO_ADDR
20015: LD_EXP 75
20019: PUSH
20020: FOR_TO
20021: IFFALSE 20079
// if not mc_sides [ i ] in tmp then
20023: LD_EXP 75
20027: PUSH
20028: LD_VAR 0 2
20032: ARRAY
20033: PUSH
20034: LD_VAR 0 5
20038: IN
20039: NOT
20040: IFFALSE 20077
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20042: LD_ADDR_VAR 0 5
20046: PUSH
20047: LD_VAR 0 5
20051: PPUSH
20052: LD_VAR 0 5
20056: PUSH
20057: LD_INT 1
20059: PLUS
20060: PPUSH
20061: LD_EXP 75
20065: PUSH
20066: LD_VAR 0 2
20070: ARRAY
20071: PPUSH
20072: CALL_OW 2
20076: ST_TO_ADDR
20077: GO 20020
20079: POP
20080: POP
// if not tmp then
20081: LD_VAR 0 5
20085: NOT
20086: IFFALSE 20090
// exit ;
20088: GO 20195
// for j in tmp do
20090: LD_ADDR_VAR 0 3
20094: PUSH
20095: LD_VAR 0 5
20099: PUSH
20100: FOR_IN
20101: IFFALSE 20193
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20103: LD_ADDR_VAR 0 6
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_VAR 0 3
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: ST_TO_ADDR
// if not un then
20125: LD_VAR 0 6
20129: NOT
20130: IFFALSE 20134
// continue ;
20132: GO 20100
// nation := GetNation ( un [ 1 ] ) ;
20134: LD_ADDR_VAR 0 4
20138: PUSH
20139: LD_VAR 0 6
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: CALL_OW 248
20152: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20153: LD_ADDR_EXP 76
20157: PUSH
20158: LD_EXP 76
20162: PPUSH
20163: LD_VAR 0 3
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_VAR 0 4
20177: PPUSH
20178: LD_INT 1
20180: PPUSH
20181: CALL 46559 0 3
20185: PPUSH
20186: CALL_OW 1
20190: ST_TO_ADDR
// end ;
20191: GO 20100
20193: POP
20194: POP
// end ;
20195: LD_VAR 0 1
20199: RET
// export function MC_InitSides ( ) ; var i ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
// if not mc_bases then
20204: LD_EXP 49
20208: NOT
20209: IFFALSE 20213
// exit ;
20211: GO 20287
// for i = 1 to mc_bases do
20213: LD_ADDR_VAR 0 2
20217: PUSH
20218: DOUBLE
20219: LD_INT 1
20221: DEC
20222: ST_TO_ADDR
20223: LD_EXP 49
20227: PUSH
20228: FOR_TO
20229: IFFALSE 20285
// if mc_bases [ i ] then
20231: LD_EXP 49
20235: PUSH
20236: LD_VAR 0 2
20240: ARRAY
20241: IFFALSE 20283
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20243: LD_ADDR_EXP 75
20247: PUSH
20248: LD_EXP 75
20252: PPUSH
20253: LD_VAR 0 2
20257: PPUSH
20258: LD_EXP 49
20262: PUSH
20263: LD_VAR 0 2
20267: ARRAY
20268: PUSH
20269: LD_INT 1
20271: ARRAY
20272: PPUSH
20273: CALL_OW 255
20277: PPUSH
20278: CALL_OW 1
20282: ST_TO_ADDR
20283: GO 20228
20285: POP
20286: POP
// end ;
20287: LD_VAR 0 1
20291: RET
// every 0 0$01 trigger skirmish do
20292: LD_EXP 47
20296: IFFALSE 20450
20298: GO 20300
20300: DISABLE
// begin enable ;
20301: ENABLE
// MC_CheckBuildings ( ) ;
20302: CALL 24948 0 0
// MC_CheckPeopleLife ( ) ;
20306: CALL 25073 0 0
// RaiseSailEvent ( 100 ) ;
20310: LD_INT 100
20312: PPUSH
20313: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20317: LD_INT 103
20319: PPUSH
20320: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
20324: LD_INT 104
20326: PPUSH
20327: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
20331: LD_INT 105
20333: PPUSH
20334: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
20338: LD_INT 106
20340: PPUSH
20341: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
20345: LD_INT 107
20347: PPUSH
20348: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
20352: LD_INT 108
20354: PPUSH
20355: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
20359: LD_INT 109
20361: PPUSH
20362: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
20366: LD_INT 110
20368: PPUSH
20369: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
20373: LD_INT 111
20375: PPUSH
20376: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
20380: LD_INT 112
20382: PPUSH
20383: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
20387: LD_INT 113
20389: PPUSH
20390: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
20394: LD_INT 120
20396: PPUSH
20397: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
20401: LD_INT 121
20403: PPUSH
20404: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
20408: LD_INT 122
20410: PPUSH
20411: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
20415: LD_INT 123
20417: PPUSH
20418: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
20422: LD_INT 124
20424: PPUSH
20425: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
20429: LD_INT 125
20431: PPUSH
20432: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
20436: LD_INT 126
20438: PPUSH
20439: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
20443: LD_INT 200
20445: PPUSH
20446: CALL_OW 427
// end ;
20450: END
// on SailEvent ( event ) do begin if event < 100 then
20451: LD_VAR 0 1
20455: PUSH
20456: LD_INT 100
20458: LESS
20459: IFFALSE 20470
// CustomEvent ( event ) ;
20461: LD_VAR 0 1
20465: PPUSH
20466: CALL 15992 0 1
// if event = 100 then
20470: LD_VAR 0 1
20474: PUSH
20475: LD_INT 100
20477: EQUAL
20478: IFFALSE 20484
// MC_ClassManager ( ) ;
20480: CALL 20876 0 0
// if event = 101 then
20484: LD_VAR 0 1
20488: PUSH
20489: LD_INT 101
20491: EQUAL
20492: IFFALSE 20498
// MC_RepairBuildings ( ) ;
20494: CALL 25669 0 0
// if event = 102 then
20498: LD_VAR 0 1
20502: PUSH
20503: LD_INT 102
20505: EQUAL
20506: IFFALSE 20512
// MC_Heal ( ) ;
20508: CALL 26401 0 0
// if event = 103 then
20512: LD_VAR 0 1
20516: PUSH
20517: LD_INT 103
20519: EQUAL
20520: IFFALSE 20526
// MC_Build ( ) ;
20522: CALL 26823 0 0
// if event = 104 then
20526: LD_VAR 0 1
20530: PUSH
20531: LD_INT 104
20533: EQUAL
20534: IFFALSE 20540
// MC_TurretWeapon ( ) ;
20536: CALL 28436 0 0
// if event = 105 then
20540: LD_VAR 0 1
20544: PUSH
20545: LD_INT 105
20547: EQUAL
20548: IFFALSE 20554
// MC_BuildUpgrade ( ) ;
20550: CALL 27987 0 0
// if event = 106 then
20554: LD_VAR 0 1
20558: PUSH
20559: LD_INT 106
20561: EQUAL
20562: IFFALSE 20568
// MC_PlantMines ( ) ;
20564: CALL 28866 0 0
// if event = 107 then
20568: LD_VAR 0 1
20572: PUSH
20573: LD_INT 107
20575: EQUAL
20576: IFFALSE 20582
// MC_CollectCrates ( ) ;
20578: CALL 29900 0 0
// if event = 108 then
20582: LD_VAR 0 1
20586: PUSH
20587: LD_INT 108
20589: EQUAL
20590: IFFALSE 20596
// MC_LinkRemoteControl ( ) ;
20592: CALL 31676 0 0
// if event = 109 then
20596: LD_VAR 0 1
20600: PUSH
20601: LD_INT 109
20603: EQUAL
20604: IFFALSE 20610
// MC_ProduceVehicle ( ) ;
20606: CALL 31857 0 0
// if event = 110 then
20610: LD_VAR 0 1
20614: PUSH
20615: LD_INT 110
20617: EQUAL
20618: IFFALSE 20624
// MC_SendAttack ( ) ;
20620: CALL 32323 0 0
// if event = 111 then
20624: LD_VAR 0 1
20628: PUSH
20629: LD_INT 111
20631: EQUAL
20632: IFFALSE 20638
// MC_Defend ( ) ;
20634: CALL 32431 0 0
// if event = 112 then
20638: LD_VAR 0 1
20642: PUSH
20643: LD_INT 112
20645: EQUAL
20646: IFFALSE 20652
// MC_Research ( ) ;
20648: CALL 33036 0 0
// if event = 113 then
20652: LD_VAR 0 1
20656: PUSH
20657: LD_INT 113
20659: EQUAL
20660: IFFALSE 20666
// MC_MinesTrigger ( ) ;
20662: CALL 34150 0 0
// if event = 120 then
20666: LD_VAR 0 1
20670: PUSH
20671: LD_INT 120
20673: EQUAL
20674: IFFALSE 20680
// MC_RepairVehicle ( ) ;
20676: CALL 34249 0 0
// if event = 121 then
20680: LD_VAR 0 1
20684: PUSH
20685: LD_INT 121
20687: EQUAL
20688: IFFALSE 20694
// MC_TameApe ( ) ;
20690: CALL 34979 0 0
// if event = 122 then
20694: LD_VAR 0 1
20698: PUSH
20699: LD_INT 122
20701: EQUAL
20702: IFFALSE 20708
// MC_ChangeApeClass ( ) ;
20704: CALL 35808 0 0
// if event = 123 then
20708: LD_VAR 0 1
20712: PUSH
20713: LD_INT 123
20715: EQUAL
20716: IFFALSE 20722
// MC_Bazooka ( ) ;
20718: CALL 36458 0 0
// if event = 124 then
20722: LD_VAR 0 1
20726: PUSH
20727: LD_INT 124
20729: EQUAL
20730: IFFALSE 20736
// MC_TeleportExit ( ) ;
20732: CALL 36656 0 0
// if event = 125 then
20736: LD_VAR 0 1
20740: PUSH
20741: LD_INT 125
20743: EQUAL
20744: IFFALSE 20750
// MC_Deposits ( ) ;
20746: CALL 37303 0 0
// if event = 126 then
20750: LD_VAR 0 1
20754: PUSH
20755: LD_INT 126
20757: EQUAL
20758: IFFALSE 20764
// MC_RemoteDriver ( ) ;
20760: CALL 37928 0 0
// if event = 200 then
20764: LD_VAR 0 1
20768: PUSH
20769: LD_INT 200
20771: EQUAL
20772: IFFALSE 20778
// MC_Idle ( ) ;
20774: CALL 39661 0 0
// end ;
20778: PPOPN 1
20780: END
// export function MC_Reset ( base , tag ) ; var i ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
// if not mc_bases [ base ] or not tag then
20785: LD_EXP 49
20789: PUSH
20790: LD_VAR 0 1
20794: ARRAY
20795: NOT
20796: PUSH
20797: LD_VAR 0 2
20801: NOT
20802: OR
20803: IFFALSE 20807
// exit ;
20805: GO 20871
// for i in mc_bases [ base ] union mc_ape [ base ] do
20807: LD_ADDR_VAR 0 4
20811: PUSH
20812: LD_EXP 49
20816: PUSH
20817: LD_VAR 0 1
20821: ARRAY
20822: PUSH
20823: LD_EXP 78
20827: PUSH
20828: LD_VAR 0 1
20832: ARRAY
20833: UNION
20834: PUSH
20835: FOR_IN
20836: IFFALSE 20869
// if GetTag ( i ) = tag then
20838: LD_VAR 0 4
20842: PPUSH
20843: CALL_OW 110
20847: PUSH
20848: LD_VAR 0 2
20852: EQUAL
20853: IFFALSE 20867
// SetTag ( i , 0 ) ;
20855: LD_VAR 0 4
20859: PPUSH
20860: LD_INT 0
20862: PPUSH
20863: CALL_OW 109
20867: GO 20835
20869: POP
20870: POP
// end ;
20871: LD_VAR 0 3
20875: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
20876: LD_INT 0
20878: PPUSH
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
20884: PPUSH
20885: PPUSH
// if not mc_bases then
20886: LD_EXP 49
20890: NOT
20891: IFFALSE 20895
// exit ;
20893: GO 21353
// for i = 1 to mc_bases do
20895: LD_ADDR_VAR 0 2
20899: PUSH
20900: DOUBLE
20901: LD_INT 1
20903: DEC
20904: ST_TO_ADDR
20905: LD_EXP 49
20909: PUSH
20910: FOR_TO
20911: IFFALSE 21351
// begin tmp := MC_ClassCheckReq ( i ) ;
20913: LD_ADDR_VAR 0 4
20917: PUSH
20918: LD_VAR 0 2
20922: PPUSH
20923: CALL 21358 0 1
20927: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
20928: LD_ADDR_EXP 90
20932: PUSH
20933: LD_EXP 90
20937: PPUSH
20938: LD_VAR 0 2
20942: PPUSH
20943: LD_VAR 0 4
20947: PPUSH
20948: CALL_OW 1
20952: ST_TO_ADDR
// if not tmp then
20953: LD_VAR 0 4
20957: NOT
20958: IFFALSE 20962
// continue ;
20960: GO 20910
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
20962: LD_ADDR_VAR 0 6
20966: PUSH
20967: LD_EXP 49
20971: PUSH
20972: LD_VAR 0 2
20976: ARRAY
20977: PPUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 4
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 30
20993: PUSH
20994: LD_INT 5
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 72
21010: PUSH
21011: LD_EXP 49
21015: PUSH
21016: LD_VAR 0 2
21020: ARRAY
21021: PPUSH
21022: LD_INT 2
21024: PUSH
21025: LD_INT 30
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 30
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: PPUSH
21050: CALL_OW 72
21054: PUSH
21055: LD_EXP 49
21059: PUSH
21060: LD_VAR 0 2
21064: ARRAY
21065: PPUSH
21066: LD_INT 30
21068: PUSH
21069: LD_INT 3
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 72
21080: PUSH
21081: LD_EXP 49
21085: PUSH
21086: LD_VAR 0 2
21090: ARRAY
21091: PPUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 6
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: LD_INT 7
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 30
21117: PUSH
21118: LD_INT 8
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 72
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
// for j = 1 to 4 do
21142: LD_ADDR_VAR 0 3
21146: PUSH
21147: DOUBLE
21148: LD_INT 1
21150: DEC
21151: ST_TO_ADDR
21152: LD_INT 4
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21347
// begin if not tmp [ j ] then
21158: LD_VAR 0 4
21162: PUSH
21163: LD_VAR 0 3
21167: ARRAY
21168: NOT
21169: IFFALSE 21173
// continue ;
21171: GO 21155
// for p in tmp [ j ] do
21173: LD_ADDR_VAR 0 5
21177: PUSH
21178: LD_VAR 0 4
21182: PUSH
21183: LD_VAR 0 3
21187: ARRAY
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21343
// begin if not b [ j ] then
21192: LD_VAR 0 6
21196: PUSH
21197: LD_VAR 0 3
21201: ARRAY
21202: NOT
21203: IFFALSE 21207
// break ;
21205: GO 21343
// e := 0 ;
21207: LD_ADDR_VAR 0 7
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// for k in b [ j ] do
21215: LD_ADDR_VAR 0 8
21219: PUSH
21220: LD_VAR 0 6
21224: PUSH
21225: LD_VAR 0 3
21229: ARRAY
21230: PUSH
21231: FOR_IN
21232: IFFALSE 21259
// if IsNotFull ( k ) then
21234: LD_VAR 0 8
21238: PPUSH
21239: CALL 50850 0 1
21243: IFFALSE 21257
// begin e := k ;
21245: LD_ADDR_VAR 0 7
21249: PUSH
21250: LD_VAR 0 8
21254: ST_TO_ADDR
// break ;
21255: GO 21259
// end ;
21257: GO 21231
21259: POP
21260: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21261: LD_VAR 0 7
21265: PUSH
21266: LD_VAR 0 5
21270: PPUSH
21271: LD_VAR 0 7
21275: PPUSH
21276: CALL 87969 0 2
21280: NOT
21281: AND
21282: IFFALSE 21341
// begin if IsInUnit ( p ) then
21284: LD_VAR 0 5
21288: PPUSH
21289: CALL_OW 310
21293: IFFALSE 21304
// ComExitBuilding ( p ) ;
21295: LD_VAR 0 5
21299: PPUSH
21300: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21304: LD_VAR 0 5
21308: PPUSH
21309: LD_VAR 0 7
21313: PPUSH
21314: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21318: LD_VAR 0 5
21322: PPUSH
21323: LD_VAR 0 3
21327: PPUSH
21328: CALL_OW 183
// AddComExitBuilding ( p ) ;
21332: LD_VAR 0 5
21336: PPUSH
21337: CALL_OW 182
// end ; end ;
21341: GO 21189
21343: POP
21344: POP
// end ;
21345: GO 21155
21347: POP
21348: POP
// end ;
21349: GO 20910
21351: POP
21352: POP
// end ;
21353: LD_VAR 0 1
21357: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
21358: LD_INT 0
21360: PPUSH
21361: PPUSH
21362: PPUSH
21363: PPUSH
21364: PPUSH
21365: PPUSH
21366: PPUSH
21367: PPUSH
21368: PPUSH
21369: PPUSH
21370: PPUSH
21371: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21372: LD_VAR 0 1
21376: NOT
21377: PUSH
21378: LD_EXP 49
21382: PUSH
21383: LD_VAR 0 1
21387: ARRAY
21388: NOT
21389: OR
21390: PUSH
21391: LD_EXP 49
21395: PUSH
21396: LD_VAR 0 1
21400: ARRAY
21401: PPUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 30
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 30
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: PPUSH
21430: CALL_OW 72
21434: NOT
21435: OR
21436: IFFALSE 21440
// exit ;
21438: GO 24943
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21440: LD_ADDR_VAR 0 4
21444: PUSH
21445: LD_EXP 49
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PPUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 25
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 25
21481: PUSH
21482: LD_INT 3
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 25
21491: PUSH
21492: LD_INT 4
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 25
21501: PUSH
21502: LD_INT 5
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 25
21511: PUSH
21512: LD_INT 8
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 25
21521: PUSH
21522: LD_INT 9
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: PPUSH
21539: CALL_OW 72
21543: ST_TO_ADDR
// if not tmp then
21544: LD_VAR 0 4
21548: NOT
21549: IFFALSE 21553
// exit ;
21551: GO 24943
// for i in tmp do
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_VAR 0 4
21562: PUSH
21563: FOR_IN
21564: IFFALSE 21595
// if GetTag ( i ) then
21566: LD_VAR 0 3
21570: PPUSH
21571: CALL_OW 110
21575: IFFALSE 21593
// tmp := tmp diff i ;
21577: LD_ADDR_VAR 0 4
21581: PUSH
21582: LD_VAR 0 4
21586: PUSH
21587: LD_VAR 0 3
21591: DIFF
21592: ST_TO_ADDR
21593: GO 21563
21595: POP
21596: POP
// if not tmp then
21597: LD_VAR 0 4
21601: NOT
21602: IFFALSE 21606
// exit ;
21604: GO 24943
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21606: LD_ADDR_VAR 0 5
21610: PUSH
21611: LD_EXP 49
21615: PUSH
21616: LD_VAR 0 1
21620: ARRAY
21621: PPUSH
21622: LD_INT 2
21624: PUSH
21625: LD_INT 25
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 25
21637: PUSH
21638: LD_INT 5
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 25
21647: PUSH
21648: LD_INT 8
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 25
21657: PUSH
21658: LD_INT 9
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 72
21676: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
21677: LD_ADDR_VAR 0 6
21681: PUSH
21682: LD_EXP 49
21686: PUSH
21687: LD_VAR 0 1
21691: ARRAY
21692: PPUSH
21693: LD_INT 25
21695: PUSH
21696: LD_INT 2
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PPUSH
21703: CALL_OW 72
21707: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21708: LD_ADDR_VAR 0 7
21712: PUSH
21713: LD_EXP 49
21717: PUSH
21718: LD_VAR 0 1
21722: ARRAY
21723: PPUSH
21724: LD_INT 25
21726: PUSH
21727: LD_INT 3
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 72
21738: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
21739: LD_ADDR_VAR 0 8
21743: PUSH
21744: LD_EXP 49
21748: PUSH
21749: LD_VAR 0 1
21753: ARRAY
21754: PPUSH
21755: LD_INT 25
21757: PUSH
21758: LD_INT 4
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 24
21767: PUSH
21768: LD_INT 251
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PPUSH
21779: CALL_OW 72
21783: ST_TO_ADDR
// if mc_scan [ base ] then
21784: LD_EXP 72
21788: PUSH
21789: LD_VAR 0 1
21793: ARRAY
21794: IFFALSE 22255
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
21796: LD_ADDR_EXP 91
21800: PUSH
21801: LD_EXP 91
21805: PPUSH
21806: LD_VAR 0 1
21810: PPUSH
21811: LD_INT 4
21813: PPUSH
21814: CALL_OW 1
21818: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
21819: LD_ADDR_VAR 0 12
21823: PUSH
21824: LD_EXP 49
21828: PUSH
21829: LD_VAR 0 1
21833: ARRAY
21834: PPUSH
21835: LD_INT 2
21837: PUSH
21838: LD_INT 30
21840: PUSH
21841: LD_INT 4
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 30
21850: PUSH
21851: LD_INT 5
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 72
21867: ST_TO_ADDR
// if not b then
21868: LD_VAR 0 12
21872: NOT
21873: IFFALSE 21877
// exit ;
21875: GO 24943
// p := [ ] ;
21877: LD_ADDR_VAR 0 11
21881: PUSH
21882: EMPTY
21883: ST_TO_ADDR
// if sci >= 2 then
21884: LD_VAR 0 8
21888: PUSH
21889: LD_INT 2
21891: GREATEREQUAL
21892: IFFALSE 21923
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
21894: LD_ADDR_VAR 0 8
21898: PUSH
21899: LD_VAR 0 8
21903: PUSH
21904: LD_INT 1
21906: ARRAY
21907: PUSH
21908: LD_VAR 0 8
21912: PUSH
21913: LD_INT 2
21915: ARRAY
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: ST_TO_ADDR
21921: GO 21984
// if sci = 1 then
21923: LD_VAR 0 8
21927: PUSH
21928: LD_INT 1
21930: EQUAL
21931: IFFALSE 21952
// sci := [ sci [ 1 ] ] else
21933: LD_ADDR_VAR 0 8
21937: PUSH
21938: LD_VAR 0 8
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PUSH
21947: EMPTY
21948: LIST
21949: ST_TO_ADDR
21950: GO 21984
// if sci = 0 then
21952: LD_VAR 0 8
21956: PUSH
21957: LD_INT 0
21959: EQUAL
21960: IFFALSE 21984
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
21962: LD_ADDR_VAR 0 11
21966: PUSH
21967: LD_VAR 0 4
21971: PPUSH
21972: LD_INT 4
21974: PPUSH
21975: CALL 87832 0 2
21979: PUSH
21980: LD_INT 1
21982: ARRAY
21983: ST_TO_ADDR
// if eng > 4 then
21984: LD_VAR 0 6
21988: PUSH
21989: LD_INT 4
21991: GREATER
21992: IFFALSE 22038
// for i = eng downto 4 do
21994: LD_ADDR_VAR 0 3
21998: PUSH
21999: DOUBLE
22000: LD_VAR 0 6
22004: INC
22005: ST_TO_ADDR
22006: LD_INT 4
22008: PUSH
22009: FOR_DOWNTO
22010: IFFALSE 22036
// eng := eng diff eng [ i ] ;
22012: LD_ADDR_VAR 0 6
22016: PUSH
22017: LD_VAR 0 6
22021: PUSH
22022: LD_VAR 0 6
22026: PUSH
22027: LD_VAR 0 3
22031: ARRAY
22032: DIFF
22033: ST_TO_ADDR
22034: GO 22009
22036: POP
22037: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22038: LD_ADDR_VAR 0 4
22042: PUSH
22043: LD_VAR 0 4
22047: PUSH
22048: LD_VAR 0 5
22052: PUSH
22053: LD_VAR 0 6
22057: UNION
22058: PUSH
22059: LD_VAR 0 7
22063: UNION
22064: PUSH
22065: LD_VAR 0 8
22069: UNION
22070: DIFF
22071: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22072: LD_ADDR_VAR 0 13
22076: PUSH
22077: LD_EXP 49
22081: PUSH
22082: LD_VAR 0 1
22086: ARRAY
22087: PPUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 30
22093: PUSH
22094: LD_INT 32
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 30
22103: PUSH
22104: LD_INT 31
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: PPUSH
22116: CALL_OW 72
22120: PUSH
22121: LD_EXP 49
22125: PUSH
22126: LD_VAR 0 1
22130: ARRAY
22131: PPUSH
22132: LD_INT 2
22134: PUSH
22135: LD_INT 30
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 5
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 72
22164: PUSH
22165: LD_INT 6
22167: MUL
22168: PLUS
22169: ST_TO_ADDR
// if bcount < tmp then
22170: LD_VAR 0 13
22174: PUSH
22175: LD_VAR 0 4
22179: LESS
22180: IFFALSE 22226
// for i = tmp downto bcount do
22182: LD_ADDR_VAR 0 3
22186: PUSH
22187: DOUBLE
22188: LD_VAR 0 4
22192: INC
22193: ST_TO_ADDR
22194: LD_VAR 0 13
22198: PUSH
22199: FOR_DOWNTO
22200: IFFALSE 22224
// tmp := Delete ( tmp , tmp ) ;
22202: LD_ADDR_VAR 0 4
22206: PUSH
22207: LD_VAR 0 4
22211: PPUSH
22212: LD_VAR 0 4
22216: PPUSH
22217: CALL_OW 3
22221: ST_TO_ADDR
22222: GO 22199
22224: POP
22225: POP
// result := [ tmp , 0 , 0 , p ] ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_VAR 0 4
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: LD_VAR 0 11
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: ST_TO_ADDR
// exit ;
22253: GO 24943
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22255: LD_EXP 49
22259: PUSH
22260: LD_VAR 0 1
22264: ARRAY
22265: PPUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 30
22271: PUSH
22272: LD_INT 6
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 30
22281: PUSH
22282: LD_INT 7
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 30
22291: PUSH
22292: LD_INT 8
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 72
22309: NOT
22310: PUSH
22311: LD_EXP 49
22315: PUSH
22316: LD_VAR 0 1
22320: ARRAY
22321: PPUSH
22322: LD_INT 30
22324: PUSH
22325: LD_INT 3
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PPUSH
22332: CALL_OW 72
22336: NOT
22337: AND
22338: IFFALSE 22410
// begin if eng = tmp then
22340: LD_VAR 0 6
22344: PUSH
22345: LD_VAR 0 4
22349: EQUAL
22350: IFFALSE 22354
// exit ;
22352: GO 24943
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
22354: LD_ADDR_EXP 91
22358: PUSH
22359: LD_EXP 91
22363: PPUSH
22364: LD_VAR 0 1
22368: PPUSH
22369: LD_INT 1
22371: PPUSH
22372: CALL_OW 1
22376: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: LD_VAR 0 4
22389: PUSH
22390: LD_VAR 0 6
22394: DIFF
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 0
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: ST_TO_ADDR
// exit ;
22408: GO 24943
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22410: LD_EXP 76
22414: PUSH
22415: LD_EXP 75
22419: PUSH
22420: LD_VAR 0 1
22424: ARRAY
22425: ARRAY
22426: PUSH
22427: LD_EXP 49
22431: PUSH
22432: LD_VAR 0 1
22436: ARRAY
22437: PPUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 30
22443: PUSH
22444: LD_INT 6
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: LD_INT 7
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 8
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 72
22481: AND
22482: PUSH
22483: LD_EXP 49
22487: PUSH
22488: LD_VAR 0 1
22492: ARRAY
22493: PPUSH
22494: LD_INT 30
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PPUSH
22504: CALL_OW 72
22508: NOT
22509: AND
22510: IFFALSE 22724
// begin if sci >= 6 then
22512: LD_VAR 0 8
22516: PUSH
22517: LD_INT 6
22519: GREATEREQUAL
22520: IFFALSE 22524
// exit ;
22522: GO 24943
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
22524: LD_ADDR_EXP 91
22528: PUSH
22529: LD_EXP 91
22533: PPUSH
22534: LD_VAR 0 1
22538: PPUSH
22539: LD_INT 2
22541: PPUSH
22542: CALL_OW 1
22546: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
22547: LD_ADDR_VAR 0 9
22551: PUSH
22552: LD_VAR 0 4
22556: PUSH
22557: LD_VAR 0 8
22561: DIFF
22562: PPUSH
22563: LD_INT 4
22565: PPUSH
22566: CALL 87832 0 2
22570: ST_TO_ADDR
// p := [ ] ;
22571: LD_ADDR_VAR 0 11
22575: PUSH
22576: EMPTY
22577: ST_TO_ADDR
// if sci < 6 and sort > 6 then
22578: LD_VAR 0 8
22582: PUSH
22583: LD_INT 6
22585: LESS
22586: PUSH
22587: LD_VAR 0 9
22591: PUSH
22592: LD_INT 6
22594: GREATER
22595: AND
22596: IFFALSE 22677
// begin for i = 1 to 6 - sci do
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: DOUBLE
22604: LD_INT 1
22606: DEC
22607: ST_TO_ADDR
22608: LD_INT 6
22610: PUSH
22611: LD_VAR 0 8
22615: MINUS
22616: PUSH
22617: FOR_TO
22618: IFFALSE 22673
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
22620: LD_ADDR_VAR 0 11
22624: PUSH
22625: LD_VAR 0 11
22629: PPUSH
22630: LD_VAR 0 11
22634: PUSH
22635: LD_INT 1
22637: PLUS
22638: PPUSH
22639: LD_VAR 0 9
22643: PUSH
22644: LD_INT 1
22646: ARRAY
22647: PPUSH
22648: CALL_OW 2
22652: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
22653: LD_ADDR_VAR 0 9
22657: PUSH
22658: LD_VAR 0 9
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 3
22670: ST_TO_ADDR
// end ;
22671: GO 22617
22673: POP
22674: POP
// end else
22675: GO 22697
// if sort then
22677: LD_VAR 0 9
22681: IFFALSE 22697
// p := sort [ 1 ] ;
22683: LD_ADDR_VAR 0 11
22687: PUSH
22688: LD_VAR 0 9
22692: PUSH
22693: LD_INT 1
22695: ARRAY
22696: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
22697: LD_ADDR_VAR 0 2
22701: PUSH
22702: LD_INT 0
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_VAR 0 11
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: ST_TO_ADDR
// exit ;
22722: GO 24943
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22724: LD_EXP 76
22728: PUSH
22729: LD_EXP 75
22733: PUSH
22734: LD_VAR 0 1
22738: ARRAY
22739: ARRAY
22740: PUSH
22741: LD_EXP 49
22745: PUSH
22746: LD_VAR 0 1
22750: ARRAY
22751: PPUSH
22752: LD_INT 2
22754: PUSH
22755: LD_INT 30
22757: PUSH
22758: LD_INT 6
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 30
22767: PUSH
22768: LD_INT 7
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 30
22777: PUSH
22778: LD_INT 8
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: PPUSH
22791: CALL_OW 72
22795: AND
22796: PUSH
22797: LD_EXP 49
22801: PUSH
22802: LD_VAR 0 1
22806: ARRAY
22807: PPUSH
22808: LD_INT 30
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 72
22822: AND
22823: IFFALSE 23557
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
22825: LD_ADDR_EXP 91
22829: PUSH
22830: LD_EXP 91
22834: PPUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: LD_INT 3
22842: PPUSH
22843: CALL_OW 1
22847: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22848: LD_ADDR_VAR 0 2
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: ST_TO_ADDR
// if not eng then
22871: LD_VAR 0 6
22875: NOT
22876: IFFALSE 22939
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
22878: LD_ADDR_VAR 0 11
22882: PUSH
22883: LD_VAR 0 4
22887: PPUSH
22888: LD_INT 2
22890: PPUSH
22891: CALL 87832 0 2
22895: PUSH
22896: LD_INT 1
22898: ARRAY
22899: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
22900: LD_ADDR_VAR 0 2
22904: PUSH
22905: LD_VAR 0 2
22909: PPUSH
22910: LD_INT 2
22912: PPUSH
22913: LD_VAR 0 11
22917: PPUSH
22918: CALL_OW 1
22922: ST_TO_ADDR
// tmp := tmp diff p ;
22923: LD_ADDR_VAR 0 4
22927: PUSH
22928: LD_VAR 0 4
22932: PUSH
22933: LD_VAR 0 11
22937: DIFF
22938: ST_TO_ADDR
// end ; if tmp and sci < 6 then
22939: LD_VAR 0 4
22943: PUSH
22944: LD_VAR 0 8
22948: PUSH
22949: LD_INT 6
22951: LESS
22952: AND
22953: IFFALSE 23141
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
22955: LD_ADDR_VAR 0 9
22959: PUSH
22960: LD_VAR 0 4
22964: PUSH
22965: LD_VAR 0 8
22969: PUSH
22970: LD_VAR 0 7
22974: UNION
22975: DIFF
22976: PPUSH
22977: LD_INT 4
22979: PPUSH
22980: CALL 87832 0 2
22984: ST_TO_ADDR
// p := [ ] ;
22985: LD_ADDR_VAR 0 11
22989: PUSH
22990: EMPTY
22991: ST_TO_ADDR
// if sort then
22992: LD_VAR 0 9
22996: IFFALSE 23112
// for i = 1 to 6 - sci do
22998: LD_ADDR_VAR 0 3
23002: PUSH
23003: DOUBLE
23004: LD_INT 1
23006: DEC
23007: ST_TO_ADDR
23008: LD_INT 6
23010: PUSH
23011: LD_VAR 0 8
23015: MINUS
23016: PUSH
23017: FOR_TO
23018: IFFALSE 23110
// begin if i = sort then
23020: LD_VAR 0 3
23024: PUSH
23025: LD_VAR 0 9
23029: EQUAL
23030: IFFALSE 23034
// break ;
23032: GO 23110
// if GetClass ( i ) = 4 then
23034: LD_VAR 0 3
23038: PPUSH
23039: CALL_OW 257
23043: PUSH
23044: LD_INT 4
23046: EQUAL
23047: IFFALSE 23051
// continue ;
23049: GO 23017
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23051: LD_ADDR_VAR 0 11
23055: PUSH
23056: LD_VAR 0 11
23060: PPUSH
23061: LD_VAR 0 11
23065: PUSH
23066: LD_INT 1
23068: PLUS
23069: PPUSH
23070: LD_VAR 0 9
23074: PUSH
23075: LD_VAR 0 3
23079: ARRAY
23080: PPUSH
23081: CALL_OW 2
23085: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23086: LD_ADDR_VAR 0 4
23090: PUSH
23091: LD_VAR 0 4
23095: PUSH
23096: LD_VAR 0 9
23100: PUSH
23101: LD_VAR 0 3
23105: ARRAY
23106: DIFF
23107: ST_TO_ADDR
// end ;
23108: GO 23017
23110: POP
23111: POP
// if p then
23112: LD_VAR 0 11
23116: IFFALSE 23141
// result := Replace ( result , 4 , p ) ;
23118: LD_ADDR_VAR 0 2
23122: PUSH
23123: LD_VAR 0 2
23127: PPUSH
23128: LD_INT 4
23130: PPUSH
23131: LD_VAR 0 11
23135: PPUSH
23136: CALL_OW 1
23140: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23141: LD_VAR 0 4
23145: PUSH
23146: LD_VAR 0 7
23150: PUSH
23151: LD_INT 6
23153: LESS
23154: AND
23155: IFFALSE 23343
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23157: LD_ADDR_VAR 0 9
23161: PUSH
23162: LD_VAR 0 4
23166: PUSH
23167: LD_VAR 0 8
23171: PUSH
23172: LD_VAR 0 7
23176: UNION
23177: DIFF
23178: PPUSH
23179: LD_INT 3
23181: PPUSH
23182: CALL 87832 0 2
23186: ST_TO_ADDR
// p := [ ] ;
23187: LD_ADDR_VAR 0 11
23191: PUSH
23192: EMPTY
23193: ST_TO_ADDR
// if sort then
23194: LD_VAR 0 9
23198: IFFALSE 23314
// for i = 1 to 6 - mech do
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: DOUBLE
23206: LD_INT 1
23208: DEC
23209: ST_TO_ADDR
23210: LD_INT 6
23212: PUSH
23213: LD_VAR 0 7
23217: MINUS
23218: PUSH
23219: FOR_TO
23220: IFFALSE 23312
// begin if i = sort then
23222: LD_VAR 0 3
23226: PUSH
23227: LD_VAR 0 9
23231: EQUAL
23232: IFFALSE 23236
// break ;
23234: GO 23312
// if GetClass ( i ) = 3 then
23236: LD_VAR 0 3
23240: PPUSH
23241: CALL_OW 257
23245: PUSH
23246: LD_INT 3
23248: EQUAL
23249: IFFALSE 23253
// continue ;
23251: GO 23219
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23253: LD_ADDR_VAR 0 11
23257: PUSH
23258: LD_VAR 0 11
23262: PPUSH
23263: LD_VAR 0 11
23267: PUSH
23268: LD_INT 1
23270: PLUS
23271: PPUSH
23272: LD_VAR 0 9
23276: PUSH
23277: LD_VAR 0 3
23281: ARRAY
23282: PPUSH
23283: CALL_OW 2
23287: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23288: LD_ADDR_VAR 0 4
23292: PUSH
23293: LD_VAR 0 4
23297: PUSH
23298: LD_VAR 0 9
23302: PUSH
23303: LD_VAR 0 3
23307: ARRAY
23308: DIFF
23309: ST_TO_ADDR
// end ;
23310: GO 23219
23312: POP
23313: POP
// if p then
23314: LD_VAR 0 11
23318: IFFALSE 23343
// result := Replace ( result , 3 , p ) ;
23320: LD_ADDR_VAR 0 2
23324: PUSH
23325: LD_VAR 0 2
23329: PPUSH
23330: LD_INT 3
23332: PPUSH
23333: LD_VAR 0 11
23337: PPUSH
23338: CALL_OW 1
23342: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
23343: LD_VAR 0 4
23347: PUSH
23348: LD_INT 6
23350: GREATER
23351: PUSH
23352: LD_VAR 0 6
23356: PUSH
23357: LD_INT 6
23359: LESS
23360: AND
23361: IFFALSE 23555
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23363: LD_ADDR_VAR 0 9
23367: PUSH
23368: LD_VAR 0 4
23372: PUSH
23373: LD_VAR 0 8
23377: PUSH
23378: LD_VAR 0 7
23382: UNION
23383: PUSH
23384: LD_VAR 0 6
23388: UNION
23389: DIFF
23390: PPUSH
23391: LD_INT 2
23393: PPUSH
23394: CALL 87832 0 2
23398: ST_TO_ADDR
// p := [ ] ;
23399: LD_ADDR_VAR 0 11
23403: PUSH
23404: EMPTY
23405: ST_TO_ADDR
// if sort then
23406: LD_VAR 0 9
23410: IFFALSE 23526
// for i = 1 to 6 - eng do
23412: LD_ADDR_VAR 0 3
23416: PUSH
23417: DOUBLE
23418: LD_INT 1
23420: DEC
23421: ST_TO_ADDR
23422: LD_INT 6
23424: PUSH
23425: LD_VAR 0 6
23429: MINUS
23430: PUSH
23431: FOR_TO
23432: IFFALSE 23524
// begin if i = sort then
23434: LD_VAR 0 3
23438: PUSH
23439: LD_VAR 0 9
23443: EQUAL
23444: IFFALSE 23448
// break ;
23446: GO 23524
// if GetClass ( i ) = 2 then
23448: LD_VAR 0 3
23452: PPUSH
23453: CALL_OW 257
23457: PUSH
23458: LD_INT 2
23460: EQUAL
23461: IFFALSE 23465
// continue ;
23463: GO 23431
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23465: LD_ADDR_VAR 0 11
23469: PUSH
23470: LD_VAR 0 11
23474: PPUSH
23475: LD_VAR 0 11
23479: PUSH
23480: LD_INT 1
23482: PLUS
23483: PPUSH
23484: LD_VAR 0 9
23488: PUSH
23489: LD_VAR 0 3
23493: ARRAY
23494: PPUSH
23495: CALL_OW 2
23499: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23500: LD_ADDR_VAR 0 4
23504: PUSH
23505: LD_VAR 0 4
23509: PUSH
23510: LD_VAR 0 9
23514: PUSH
23515: LD_VAR 0 3
23519: ARRAY
23520: DIFF
23521: ST_TO_ADDR
// end ;
23522: GO 23431
23524: POP
23525: POP
// if p then
23526: LD_VAR 0 11
23530: IFFALSE 23555
// result := Replace ( result , 2 , p ) ;
23532: LD_ADDR_VAR 0 2
23536: PUSH
23537: LD_VAR 0 2
23541: PPUSH
23542: LD_INT 2
23544: PPUSH
23545: LD_VAR 0 11
23549: PPUSH
23550: CALL_OW 1
23554: ST_TO_ADDR
// end ; exit ;
23555: GO 24943
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
23557: LD_EXP 76
23561: PUSH
23562: LD_EXP 75
23566: PUSH
23567: LD_VAR 0 1
23571: ARRAY
23572: ARRAY
23573: NOT
23574: PUSH
23575: LD_EXP 49
23579: PUSH
23580: LD_VAR 0 1
23584: ARRAY
23585: PPUSH
23586: LD_INT 30
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 72
23600: AND
23601: PUSH
23602: LD_EXP 54
23606: PUSH
23607: LD_VAR 0 1
23611: ARRAY
23612: AND
23613: IFFALSE 24221
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
23615: LD_ADDR_EXP 91
23619: PUSH
23620: LD_EXP 91
23624: PPUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: LD_INT 5
23632: PPUSH
23633: CALL_OW 1
23637: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23638: LD_ADDR_VAR 0 2
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: ST_TO_ADDR
// if sci > 1 then
23661: LD_VAR 0 8
23665: PUSH
23666: LD_INT 1
23668: GREATER
23669: IFFALSE 23697
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
23671: LD_ADDR_VAR 0 4
23675: PUSH
23676: LD_VAR 0 4
23680: PUSH
23681: LD_VAR 0 8
23685: PUSH
23686: LD_VAR 0 8
23690: PUSH
23691: LD_INT 1
23693: ARRAY
23694: DIFF
23695: DIFF
23696: ST_TO_ADDR
// if tmp and not sci then
23697: LD_VAR 0 4
23701: PUSH
23702: LD_VAR 0 8
23706: NOT
23707: AND
23708: IFFALSE 23777
// begin sort := SortBySkill ( tmp , 4 ) ;
23710: LD_ADDR_VAR 0 9
23714: PUSH
23715: LD_VAR 0 4
23719: PPUSH
23720: LD_INT 4
23722: PPUSH
23723: CALL 87832 0 2
23727: ST_TO_ADDR
// if sort then
23728: LD_VAR 0 9
23732: IFFALSE 23748
// p := sort [ 1 ] ;
23734: LD_ADDR_VAR 0 11
23738: PUSH
23739: LD_VAR 0 9
23743: PUSH
23744: LD_INT 1
23746: ARRAY
23747: ST_TO_ADDR
// if p then
23748: LD_VAR 0 11
23752: IFFALSE 23777
// result := Replace ( result , 4 , p ) ;
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: LD_VAR 0 2
23763: PPUSH
23764: LD_INT 4
23766: PPUSH
23767: LD_VAR 0 11
23771: PPUSH
23772: CALL_OW 1
23776: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23777: LD_ADDR_VAR 0 4
23781: PUSH
23782: LD_VAR 0 4
23786: PUSH
23787: LD_VAR 0 7
23791: DIFF
23792: ST_TO_ADDR
// if tmp and mech < 6 then
23793: LD_VAR 0 4
23797: PUSH
23798: LD_VAR 0 7
23802: PUSH
23803: LD_INT 6
23805: LESS
23806: AND
23807: IFFALSE 23995
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23809: LD_ADDR_VAR 0 9
23813: PUSH
23814: LD_VAR 0 4
23818: PUSH
23819: LD_VAR 0 8
23823: PUSH
23824: LD_VAR 0 7
23828: UNION
23829: DIFF
23830: PPUSH
23831: LD_INT 3
23833: PPUSH
23834: CALL 87832 0 2
23838: ST_TO_ADDR
// p := [ ] ;
23839: LD_ADDR_VAR 0 11
23843: PUSH
23844: EMPTY
23845: ST_TO_ADDR
// if sort then
23846: LD_VAR 0 9
23850: IFFALSE 23966
// for i = 1 to 6 - mech do
23852: LD_ADDR_VAR 0 3
23856: PUSH
23857: DOUBLE
23858: LD_INT 1
23860: DEC
23861: ST_TO_ADDR
23862: LD_INT 6
23864: PUSH
23865: LD_VAR 0 7
23869: MINUS
23870: PUSH
23871: FOR_TO
23872: IFFALSE 23964
// begin if i = sort then
23874: LD_VAR 0 3
23878: PUSH
23879: LD_VAR 0 9
23883: EQUAL
23884: IFFALSE 23888
// break ;
23886: GO 23964
// if GetClass ( i ) = 3 then
23888: LD_VAR 0 3
23892: PPUSH
23893: CALL_OW 257
23897: PUSH
23898: LD_INT 3
23900: EQUAL
23901: IFFALSE 23905
// continue ;
23903: GO 23871
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23905: LD_ADDR_VAR 0 11
23909: PUSH
23910: LD_VAR 0 11
23914: PPUSH
23915: LD_VAR 0 11
23919: PUSH
23920: LD_INT 1
23922: PLUS
23923: PPUSH
23924: LD_VAR 0 9
23928: PUSH
23929: LD_VAR 0 3
23933: ARRAY
23934: PPUSH
23935: CALL_OW 2
23939: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23940: LD_ADDR_VAR 0 4
23944: PUSH
23945: LD_VAR 0 4
23949: PUSH
23950: LD_VAR 0 9
23954: PUSH
23955: LD_VAR 0 3
23959: ARRAY
23960: DIFF
23961: ST_TO_ADDR
// end ;
23962: GO 23871
23964: POP
23965: POP
// if p then
23966: LD_VAR 0 11
23970: IFFALSE 23995
// result := Replace ( result , 3 , p ) ;
23972: LD_ADDR_VAR 0 2
23976: PUSH
23977: LD_VAR 0 2
23981: PPUSH
23982: LD_INT 3
23984: PPUSH
23985: LD_VAR 0 11
23989: PPUSH
23990: CALL_OW 1
23994: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23995: LD_ADDR_VAR 0 4
23999: PUSH
24000: LD_VAR 0 4
24004: PUSH
24005: LD_VAR 0 6
24009: DIFF
24010: ST_TO_ADDR
// if tmp and eng < 6 then
24011: LD_VAR 0 4
24015: PUSH
24016: LD_VAR 0 6
24020: PUSH
24021: LD_INT 6
24023: LESS
24024: AND
24025: IFFALSE 24219
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24027: LD_ADDR_VAR 0 9
24031: PUSH
24032: LD_VAR 0 4
24036: PUSH
24037: LD_VAR 0 8
24041: PUSH
24042: LD_VAR 0 7
24046: UNION
24047: PUSH
24048: LD_VAR 0 6
24052: UNION
24053: DIFF
24054: PPUSH
24055: LD_INT 2
24057: PPUSH
24058: CALL 87832 0 2
24062: ST_TO_ADDR
// p := [ ] ;
24063: LD_ADDR_VAR 0 11
24067: PUSH
24068: EMPTY
24069: ST_TO_ADDR
// if sort then
24070: LD_VAR 0 9
24074: IFFALSE 24190
// for i = 1 to 6 - eng do
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: DOUBLE
24082: LD_INT 1
24084: DEC
24085: ST_TO_ADDR
24086: LD_INT 6
24088: PUSH
24089: LD_VAR 0 6
24093: MINUS
24094: PUSH
24095: FOR_TO
24096: IFFALSE 24188
// begin if i = sort then
24098: LD_VAR 0 3
24102: PUSH
24103: LD_VAR 0 9
24107: EQUAL
24108: IFFALSE 24112
// break ;
24110: GO 24188
// if GetClass ( i ) = 2 then
24112: LD_VAR 0 3
24116: PPUSH
24117: CALL_OW 257
24121: PUSH
24122: LD_INT 2
24124: EQUAL
24125: IFFALSE 24129
// continue ;
24127: GO 24095
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24129: LD_ADDR_VAR 0 11
24133: PUSH
24134: LD_VAR 0 11
24138: PPUSH
24139: LD_VAR 0 11
24143: PUSH
24144: LD_INT 1
24146: PLUS
24147: PPUSH
24148: LD_VAR 0 9
24152: PUSH
24153: LD_VAR 0 3
24157: ARRAY
24158: PPUSH
24159: CALL_OW 2
24163: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24164: LD_ADDR_VAR 0 4
24168: PUSH
24169: LD_VAR 0 4
24173: PUSH
24174: LD_VAR 0 9
24178: PUSH
24179: LD_VAR 0 3
24183: ARRAY
24184: DIFF
24185: ST_TO_ADDR
// end ;
24186: GO 24095
24188: POP
24189: POP
// if p then
24190: LD_VAR 0 11
24194: IFFALSE 24219
// result := Replace ( result , 2 , p ) ;
24196: LD_ADDR_VAR 0 2
24200: PUSH
24201: LD_VAR 0 2
24205: PPUSH
24206: LD_INT 2
24208: PPUSH
24209: LD_VAR 0 11
24213: PPUSH
24214: CALL_OW 1
24218: ST_TO_ADDR
// end ; exit ;
24219: GO 24943
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24221: LD_EXP 76
24225: PUSH
24226: LD_EXP 75
24230: PUSH
24231: LD_VAR 0 1
24235: ARRAY
24236: ARRAY
24237: NOT
24238: PUSH
24239: LD_EXP 49
24243: PUSH
24244: LD_VAR 0 1
24248: ARRAY
24249: PPUSH
24250: LD_INT 30
24252: PUSH
24253: LD_INT 3
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 72
24264: AND
24265: PUSH
24266: LD_EXP 54
24270: PUSH
24271: LD_VAR 0 1
24275: ARRAY
24276: NOT
24277: AND
24278: IFFALSE 24943
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24280: LD_ADDR_EXP 91
24284: PUSH
24285: LD_EXP 91
24289: PPUSH
24290: LD_VAR 0 1
24294: PPUSH
24295: LD_INT 6
24297: PPUSH
24298: CALL_OW 1
24302: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24303: LD_ADDR_VAR 0 2
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: ST_TO_ADDR
// if sci >= 1 then
24326: LD_VAR 0 8
24330: PUSH
24331: LD_INT 1
24333: GREATEREQUAL
24334: IFFALSE 24356
// tmp := tmp diff sci [ 1 ] ;
24336: LD_ADDR_VAR 0 4
24340: PUSH
24341: LD_VAR 0 4
24345: PUSH
24346: LD_VAR 0 8
24350: PUSH
24351: LD_INT 1
24353: ARRAY
24354: DIFF
24355: ST_TO_ADDR
// if tmp and not sci then
24356: LD_VAR 0 4
24360: PUSH
24361: LD_VAR 0 8
24365: NOT
24366: AND
24367: IFFALSE 24436
// begin sort := SortBySkill ( tmp , 4 ) ;
24369: LD_ADDR_VAR 0 9
24373: PUSH
24374: LD_VAR 0 4
24378: PPUSH
24379: LD_INT 4
24381: PPUSH
24382: CALL 87832 0 2
24386: ST_TO_ADDR
// if sort then
24387: LD_VAR 0 9
24391: IFFALSE 24407
// p := sort [ 1 ] ;
24393: LD_ADDR_VAR 0 11
24397: PUSH
24398: LD_VAR 0 9
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: ST_TO_ADDR
// if p then
24407: LD_VAR 0 11
24411: IFFALSE 24436
// result := Replace ( result , 4 , p ) ;
24413: LD_ADDR_VAR 0 2
24417: PUSH
24418: LD_VAR 0 2
24422: PPUSH
24423: LD_INT 4
24425: PPUSH
24426: LD_VAR 0 11
24430: PPUSH
24431: CALL_OW 1
24435: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24436: LD_ADDR_VAR 0 4
24440: PUSH
24441: LD_VAR 0 4
24445: PUSH
24446: LD_VAR 0 7
24450: DIFF
24451: ST_TO_ADDR
// if tmp and mech < 6 then
24452: LD_VAR 0 4
24456: PUSH
24457: LD_VAR 0 7
24461: PUSH
24462: LD_INT 6
24464: LESS
24465: AND
24466: IFFALSE 24648
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
24468: LD_ADDR_VAR 0 9
24472: PUSH
24473: LD_VAR 0 4
24477: PUSH
24478: LD_VAR 0 7
24482: DIFF
24483: PPUSH
24484: LD_INT 3
24486: PPUSH
24487: CALL 87832 0 2
24491: ST_TO_ADDR
// p := [ ] ;
24492: LD_ADDR_VAR 0 11
24496: PUSH
24497: EMPTY
24498: ST_TO_ADDR
// if sort then
24499: LD_VAR 0 9
24503: IFFALSE 24619
// for i = 1 to 6 - mech do
24505: LD_ADDR_VAR 0 3
24509: PUSH
24510: DOUBLE
24511: LD_INT 1
24513: DEC
24514: ST_TO_ADDR
24515: LD_INT 6
24517: PUSH
24518: LD_VAR 0 7
24522: MINUS
24523: PUSH
24524: FOR_TO
24525: IFFALSE 24617
// begin if i = sort then
24527: LD_VAR 0 3
24531: PUSH
24532: LD_VAR 0 9
24536: EQUAL
24537: IFFALSE 24541
// break ;
24539: GO 24617
// if GetClass ( i ) = 3 then
24541: LD_VAR 0 3
24545: PPUSH
24546: CALL_OW 257
24550: PUSH
24551: LD_INT 3
24553: EQUAL
24554: IFFALSE 24558
// continue ;
24556: GO 24524
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24558: LD_ADDR_VAR 0 11
24562: PUSH
24563: LD_VAR 0 11
24567: PPUSH
24568: LD_VAR 0 11
24572: PUSH
24573: LD_INT 1
24575: PLUS
24576: PPUSH
24577: LD_VAR 0 9
24581: PUSH
24582: LD_VAR 0 3
24586: ARRAY
24587: PPUSH
24588: CALL_OW 2
24592: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24593: LD_ADDR_VAR 0 4
24597: PUSH
24598: LD_VAR 0 4
24602: PUSH
24603: LD_VAR 0 9
24607: PUSH
24608: LD_VAR 0 3
24612: ARRAY
24613: DIFF
24614: ST_TO_ADDR
// end ;
24615: GO 24524
24617: POP
24618: POP
// if p then
24619: LD_VAR 0 11
24623: IFFALSE 24648
// result := Replace ( result , 3 , p ) ;
24625: LD_ADDR_VAR 0 2
24629: PUSH
24630: LD_VAR 0 2
24634: PPUSH
24635: LD_INT 3
24637: PPUSH
24638: LD_VAR 0 11
24642: PPUSH
24643: CALL_OW 1
24647: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24648: LD_ADDR_VAR 0 4
24652: PUSH
24653: LD_VAR 0 4
24657: PUSH
24658: LD_VAR 0 6
24662: DIFF
24663: ST_TO_ADDR
// if tmp and eng < 4 then
24664: LD_VAR 0 4
24668: PUSH
24669: LD_VAR 0 6
24673: PUSH
24674: LD_INT 4
24676: LESS
24677: AND
24678: IFFALSE 24868
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
24680: LD_ADDR_VAR 0 9
24684: PUSH
24685: LD_VAR 0 4
24689: PUSH
24690: LD_VAR 0 7
24694: PUSH
24695: LD_VAR 0 6
24699: UNION
24700: DIFF
24701: PPUSH
24702: LD_INT 2
24704: PPUSH
24705: CALL 87832 0 2
24709: ST_TO_ADDR
// p := [ ] ;
24710: LD_ADDR_VAR 0 11
24714: PUSH
24715: EMPTY
24716: ST_TO_ADDR
// if sort then
24717: LD_VAR 0 9
24721: IFFALSE 24837
// for i = 1 to 4 - eng do
24723: LD_ADDR_VAR 0 3
24727: PUSH
24728: DOUBLE
24729: LD_INT 1
24731: DEC
24732: ST_TO_ADDR
24733: LD_INT 4
24735: PUSH
24736: LD_VAR 0 6
24740: MINUS
24741: PUSH
24742: FOR_TO
24743: IFFALSE 24835
// begin if i = sort then
24745: LD_VAR 0 3
24749: PUSH
24750: LD_VAR 0 9
24754: EQUAL
24755: IFFALSE 24759
// break ;
24757: GO 24835
// if GetClass ( i ) = 2 then
24759: LD_VAR 0 3
24763: PPUSH
24764: CALL_OW 257
24768: PUSH
24769: LD_INT 2
24771: EQUAL
24772: IFFALSE 24776
// continue ;
24774: GO 24742
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24776: LD_ADDR_VAR 0 11
24780: PUSH
24781: LD_VAR 0 11
24785: PPUSH
24786: LD_VAR 0 11
24790: PUSH
24791: LD_INT 1
24793: PLUS
24794: PPUSH
24795: LD_VAR 0 9
24799: PUSH
24800: LD_VAR 0 3
24804: ARRAY
24805: PPUSH
24806: CALL_OW 2
24810: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: LD_VAR 0 4
24820: PUSH
24821: LD_VAR 0 9
24825: PUSH
24826: LD_VAR 0 3
24830: ARRAY
24831: DIFF
24832: ST_TO_ADDR
// end ;
24833: GO 24742
24835: POP
24836: POP
// if p then
24837: LD_VAR 0 11
24841: IFFALSE 24866
// result := Replace ( result , 2 , p ) ;
24843: LD_ADDR_VAR 0 2
24847: PUSH
24848: LD_VAR 0 2
24852: PPUSH
24853: LD_INT 2
24855: PPUSH
24856: LD_VAR 0 11
24860: PPUSH
24861: CALL_OW 1
24865: ST_TO_ADDR
// end else
24866: GO 24912
// for i = eng downto 5 do
24868: LD_ADDR_VAR 0 3
24872: PUSH
24873: DOUBLE
24874: LD_VAR 0 6
24878: INC
24879: ST_TO_ADDR
24880: LD_INT 5
24882: PUSH
24883: FOR_DOWNTO
24884: IFFALSE 24910
// tmp := tmp union eng [ i ] ;
24886: LD_ADDR_VAR 0 4
24890: PUSH
24891: LD_VAR 0 4
24895: PUSH
24896: LD_VAR 0 6
24900: PUSH
24901: LD_VAR 0 3
24905: ARRAY
24906: UNION
24907: ST_TO_ADDR
24908: GO 24883
24910: POP
24911: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
24912: LD_ADDR_VAR 0 2
24916: PUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_INT 1
24924: PPUSH
24925: LD_VAR 0 4
24929: PUSH
24930: LD_VAR 0 5
24934: DIFF
24935: PPUSH
24936: CALL_OW 1
24940: ST_TO_ADDR
// exit ;
24941: GO 24943
// end ; end ;
24943: LD_VAR 0 2
24947: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
24948: LD_INT 0
24950: PPUSH
24951: PPUSH
24952: PPUSH
// if not mc_bases then
24953: LD_EXP 49
24957: NOT
24958: IFFALSE 24962
// exit ;
24960: GO 25068
// for i = 1 to mc_bases do
24962: LD_ADDR_VAR 0 2
24966: PUSH
24967: DOUBLE
24968: LD_INT 1
24970: DEC
24971: ST_TO_ADDR
24972: LD_EXP 49
24976: PUSH
24977: FOR_TO
24978: IFFALSE 25059
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_EXP 49
24989: PUSH
24990: LD_VAR 0 2
24994: ARRAY
24995: PPUSH
24996: LD_INT 21
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: LD_INT 24
25011: PUSH
25012: LD_INT 1000
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 72
25031: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25032: LD_ADDR_EXP 50
25036: PUSH
25037: LD_EXP 50
25041: PPUSH
25042: LD_VAR 0 2
25046: PPUSH
25047: LD_VAR 0 3
25051: PPUSH
25052: CALL_OW 1
25056: ST_TO_ADDR
// end ;
25057: GO 24977
25059: POP
25060: POP
// RaiseSailEvent ( 101 ) ;
25061: LD_INT 101
25063: PPUSH
25064: CALL_OW 427
// end ;
25068: LD_VAR 0 1
25072: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
25079: PPUSH
25080: PPUSH
25081: PPUSH
// if not mc_bases then
25082: LD_EXP 49
25086: NOT
25087: IFFALSE 25091
// exit ;
25089: GO 25664
// for i = 1 to mc_bases do
25091: LD_ADDR_VAR 0 2
25095: PUSH
25096: DOUBLE
25097: LD_INT 1
25099: DEC
25100: ST_TO_ADDR
25101: LD_EXP 49
25105: PUSH
25106: FOR_TO
25107: IFFALSE 25655
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25109: LD_ADDR_VAR 0 5
25113: PUSH
25114: LD_EXP 49
25118: PUSH
25119: LD_VAR 0 2
25123: ARRAY
25124: PUSH
25125: LD_EXP 78
25129: PUSH
25130: LD_VAR 0 2
25134: ARRAY
25135: UNION
25136: PPUSH
25137: LD_INT 21
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 54
25155: PUSH
25156: EMPTY
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: LD_INT 24
25168: PUSH
25169: LD_INT 800
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 72
25193: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25194: LD_ADDR_VAR 0 6
25198: PUSH
25199: LD_EXP 49
25203: PUSH
25204: LD_VAR 0 2
25208: ARRAY
25209: PPUSH
25210: LD_INT 21
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 3
25225: PUSH
25226: LD_INT 54
25228: PUSH
25229: EMPTY
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 3
25238: PUSH
25239: LD_INT 24
25241: PUSH
25242: LD_INT 250
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PPUSH
25262: CALL_OW 72
25266: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25267: LD_ADDR_VAR 0 7
25271: PUSH
25272: LD_VAR 0 5
25276: PUSH
25277: LD_VAR 0 6
25281: DIFF
25282: ST_TO_ADDR
// if not need_heal_1 then
25283: LD_VAR 0 6
25287: NOT
25288: IFFALSE 25321
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25290: LD_ADDR_EXP 52
25294: PUSH
25295: LD_EXP 52
25299: PPUSH
25300: LD_VAR 0 2
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PPUSH
25312: EMPTY
25313: PPUSH
25314: CALL 53584 0 3
25318: ST_TO_ADDR
25319: GO 25391
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
25321: LD_ADDR_EXP 52
25325: PUSH
25326: LD_EXP 52
25330: PPUSH
25331: LD_VAR 0 2
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PPUSH
25343: LD_EXP 52
25347: PUSH
25348: LD_VAR 0 2
25352: ARRAY
25353: PUSH
25354: LD_INT 1
25356: ARRAY
25357: PPUSH
25358: LD_INT 3
25360: PUSH
25361: LD_INT 24
25363: PUSH
25364: LD_INT 1000
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PPUSH
25375: CALL_OW 72
25379: PUSH
25380: LD_VAR 0 6
25384: UNION
25385: PPUSH
25386: CALL 53584 0 3
25390: ST_TO_ADDR
// if not need_heal_2 then
25391: LD_VAR 0 7
25395: NOT
25396: IFFALSE 25429
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
25398: LD_ADDR_EXP 52
25402: PUSH
25403: LD_EXP 52
25407: PPUSH
25408: LD_VAR 0 2
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PPUSH
25420: EMPTY
25421: PPUSH
25422: CALL 53584 0 3
25426: ST_TO_ADDR
25427: GO 25461
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
25429: LD_ADDR_EXP 52
25433: PUSH
25434: LD_EXP 52
25438: PPUSH
25439: LD_VAR 0 2
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: LD_VAR 0 7
25455: PPUSH
25456: CALL 53584 0 3
25460: ST_TO_ADDR
// if need_heal_2 then
25461: LD_VAR 0 7
25465: IFFALSE 25637
// for j in need_heal_2 do
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: LD_VAR 0 7
25476: PUSH
25477: FOR_IN
25478: IFFALSE 25635
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
25480: LD_ADDR_VAR 0 5
25484: PUSH
25485: LD_EXP 49
25489: PUSH
25490: LD_VAR 0 2
25494: ARRAY
25495: PPUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 30
25501: PUSH
25502: LD_INT 6
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 30
25511: PUSH
25512: LD_INT 7
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 30
25521: PUSH
25522: LD_INT 8
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 30
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 30
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 25
25551: PUSH
25552: LD_INT 4
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 72
25572: ST_TO_ADDR
// if tmp then
25573: LD_VAR 0 5
25577: IFFALSE 25633
// begin k := NearestUnitToUnit ( tmp , j ) ;
25579: LD_ADDR_VAR 0 4
25583: PUSH
25584: LD_VAR 0 5
25588: PPUSH
25589: LD_VAR 0 3
25593: PPUSH
25594: CALL_OW 74
25598: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
25599: LD_VAR 0 3
25603: PPUSH
25604: LD_VAR 0 4
25608: PPUSH
25609: CALL_OW 296
25613: PUSH
25614: LD_INT 7
25616: GREATER
25617: IFFALSE 25633
// ComMoveUnit ( j , k ) ;
25619: LD_VAR 0 3
25623: PPUSH
25624: LD_VAR 0 4
25628: PPUSH
25629: CALL_OW 112
// end ; end ;
25633: GO 25477
25635: POP
25636: POP
// if not need_heal_1 and not need_heal_2 then
25637: LD_VAR 0 6
25641: NOT
25642: PUSH
25643: LD_VAR 0 7
25647: NOT
25648: AND
25649: IFFALSE 25653
// continue ;
25651: GO 25106
// end ;
25653: GO 25106
25655: POP
25656: POP
// RaiseSailEvent ( 102 ) ;
25657: LD_INT 102
25659: PPUSH
25660: CALL_OW 427
// end ;
25664: LD_VAR 0 1
25668: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
25669: LD_INT 0
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
// if not mc_bases then
25677: LD_EXP 49
25681: NOT
25682: IFFALSE 25686
// exit ;
25684: GO 26396
// for i = 1 to mc_bases do
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: DOUBLE
25692: LD_INT 1
25694: DEC
25695: ST_TO_ADDR
25696: LD_EXP 49
25700: PUSH
25701: FOR_TO
25702: IFFALSE 26394
// begin if not mc_building_need_repair [ i ] then
25704: LD_EXP 50
25708: PUSH
25709: LD_VAR 0 2
25713: ARRAY
25714: NOT
25715: IFFALSE 25889
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
25717: LD_ADDR_VAR 0 6
25721: PUSH
25722: LD_EXP 68
25726: PUSH
25727: LD_VAR 0 2
25731: ARRAY
25732: PPUSH
25733: LD_INT 3
25735: PUSH
25736: LD_INT 24
25738: PUSH
25739: LD_INT 1000
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 34
25755: PUSH
25756: LD_INT 13
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 34
25765: PUSH
25766: LD_INT 52
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PPUSH
25782: CALL_OW 72
25786: ST_TO_ADDR
// if cranes then
25787: LD_VAR 0 6
25791: IFFALSE 25853
// for j in cranes do
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_VAR 0 6
25802: PUSH
25803: FOR_IN
25804: IFFALSE 25851
// if not IsInArea ( j , mc_parking [ i ] ) then
25806: LD_VAR 0 3
25810: PPUSH
25811: LD_EXP 73
25815: PUSH
25816: LD_VAR 0 2
25820: ARRAY
25821: PPUSH
25822: CALL_OW 308
25826: NOT
25827: IFFALSE 25849
// ComMoveToArea ( j , mc_parking [ i ] ) ;
25829: LD_VAR 0 3
25833: PPUSH
25834: LD_EXP 73
25838: PUSH
25839: LD_VAR 0 2
25843: ARRAY
25844: PPUSH
25845: CALL_OW 113
25849: GO 25803
25851: POP
25852: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
25853: LD_ADDR_EXP 51
25857: PUSH
25858: LD_EXP 51
25862: PPUSH
25863: LD_VAR 0 2
25867: PPUSH
25868: EMPTY
25869: PPUSH
25870: CALL_OW 1
25874: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
25875: LD_VAR 0 2
25879: PPUSH
25880: LD_INT 101
25882: PPUSH
25883: CALL 20781 0 2
// continue ;
25887: GO 25701
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
25889: LD_ADDR_EXP 55
25893: PUSH
25894: LD_EXP 55
25898: PPUSH
25899: LD_VAR 0 2
25903: PPUSH
25904: EMPTY
25905: PPUSH
25906: CALL_OW 1
25910: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25911: LD_VAR 0 2
25915: PPUSH
25916: LD_INT 103
25918: PPUSH
25919: CALL 20781 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
25923: LD_ADDR_VAR 0 5
25927: PUSH
25928: LD_EXP 49
25932: PUSH
25933: LD_VAR 0 2
25937: ARRAY
25938: PUSH
25939: LD_EXP 78
25943: PUSH
25944: LD_VAR 0 2
25948: ARRAY
25949: UNION
25950: PPUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 25
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 25
25966: PUSH
25967: LD_INT 16
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: LIST
25978: PUSH
25979: EMPTY
25980: LIST
25981: PPUSH
25982: CALL_OW 72
25986: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
25987: LD_ADDR_VAR 0 6
25991: PUSH
25992: LD_EXP 68
25996: PUSH
25997: LD_VAR 0 2
26001: ARRAY
26002: PPUSH
26003: LD_INT 2
26005: PUSH
26006: LD_INT 34
26008: PUSH
26009: LD_INT 13
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 34
26018: PUSH
26019: LD_INT 52
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 72
26035: ST_TO_ADDR
// if cranes then
26036: LD_VAR 0 6
26040: IFFALSE 26176
// begin for j in cranes do
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 6
26051: PUSH
26052: FOR_IN
26053: IFFALSE 26174
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26055: LD_VAR 0 3
26059: PPUSH
26060: CALL_OW 256
26064: PUSH
26065: LD_INT 500
26067: GREATEREQUAL
26068: PUSH
26069: LD_VAR 0 3
26073: PPUSH
26074: CALL_OW 314
26078: NOT
26079: AND
26080: IFFALSE 26114
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26082: LD_VAR 0 3
26086: PPUSH
26087: LD_EXP 50
26091: PUSH
26092: LD_VAR 0 2
26096: ARRAY
26097: PPUSH
26098: LD_VAR 0 3
26102: PPUSH
26103: CALL_OW 74
26107: PPUSH
26108: CALL_OW 130
26112: GO 26172
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26114: LD_VAR 0 3
26118: PPUSH
26119: CALL_OW 256
26123: PUSH
26124: LD_INT 500
26126: LESS
26127: PUSH
26128: LD_VAR 0 3
26132: PPUSH
26133: LD_EXP 73
26137: PUSH
26138: LD_VAR 0 2
26142: ARRAY
26143: PPUSH
26144: CALL_OW 308
26148: NOT
26149: AND
26150: IFFALSE 26172
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26152: LD_VAR 0 3
26156: PPUSH
26157: LD_EXP 73
26161: PUSH
26162: LD_VAR 0 2
26166: ARRAY
26167: PPUSH
26168: CALL_OW 113
26172: GO 26052
26174: POP
26175: POP
// end ; if not tmp then
26176: LD_VAR 0 5
26180: NOT
26181: IFFALSE 26185
// continue ;
26183: GO 25701
// for j in tmp do
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_VAR 0 5
26194: PUSH
26195: FOR_IN
26196: IFFALSE 26390
// begin if mc_need_heal [ i ] then
26198: LD_EXP 52
26202: PUSH
26203: LD_VAR 0 2
26207: ARRAY
26208: IFFALSE 26256
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26210: LD_VAR 0 3
26214: PUSH
26215: LD_EXP 52
26219: PUSH
26220: LD_VAR 0 2
26224: ARRAY
26225: PUSH
26226: LD_INT 1
26228: ARRAY
26229: IN
26230: PUSH
26231: LD_VAR 0 3
26235: PUSH
26236: LD_EXP 52
26240: PUSH
26241: LD_VAR 0 2
26245: ARRAY
26246: PUSH
26247: LD_INT 2
26249: ARRAY
26250: IN
26251: OR
26252: IFFALSE 26256
// continue ;
26254: GO 26195
// if IsInUnit ( j ) then
26256: LD_VAR 0 3
26260: PPUSH
26261: CALL_OW 310
26265: IFFALSE 26276
// ComExitBuilding ( j ) ;
26267: LD_VAR 0 3
26271: PPUSH
26272: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
26276: LD_VAR 0 3
26280: PUSH
26281: LD_EXP 51
26285: PUSH
26286: LD_VAR 0 2
26290: ARRAY
26291: IN
26292: NOT
26293: IFFALSE 26351
// begin SetTag ( j , 101 ) ;
26295: LD_VAR 0 3
26299: PPUSH
26300: LD_INT 101
26302: PPUSH
26303: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26307: LD_ADDR_EXP 51
26311: PUSH
26312: LD_EXP 51
26316: PPUSH
26317: LD_VAR 0 2
26321: PUSH
26322: LD_EXP 51
26326: PUSH
26327: LD_VAR 0 2
26331: ARRAY
26332: PUSH
26333: LD_INT 1
26335: PLUS
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL 53584 0 3
26350: ST_TO_ADDR
// end ; wait ( 1 ) ;
26351: LD_INT 1
26353: PPUSH
26354: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
26358: LD_VAR 0 3
26362: PPUSH
26363: LD_EXP 50
26367: PUSH
26368: LD_VAR 0 2
26372: ARRAY
26373: PPUSH
26374: LD_VAR 0 3
26378: PPUSH
26379: CALL_OW 74
26383: PPUSH
26384: CALL_OW 130
// end ;
26388: GO 26195
26390: POP
26391: POP
// end ;
26392: GO 25701
26394: POP
26395: POP
// end ;
26396: LD_VAR 0 1
26400: RET
// export function MC_Heal ; var i , j , tmp ; begin
26401: LD_INT 0
26403: PPUSH
26404: PPUSH
26405: PPUSH
26406: PPUSH
// if not mc_bases then
26407: LD_EXP 49
26411: NOT
26412: IFFALSE 26416
// exit ;
26414: GO 26818
// for i = 1 to mc_bases do
26416: LD_ADDR_VAR 0 2
26420: PUSH
26421: DOUBLE
26422: LD_INT 1
26424: DEC
26425: ST_TO_ADDR
26426: LD_EXP 49
26430: PUSH
26431: FOR_TO
26432: IFFALSE 26816
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
26434: LD_EXP 52
26438: PUSH
26439: LD_VAR 0 2
26443: ARRAY
26444: PUSH
26445: LD_INT 1
26447: ARRAY
26448: NOT
26449: PUSH
26450: LD_EXP 52
26454: PUSH
26455: LD_VAR 0 2
26459: ARRAY
26460: PUSH
26461: LD_INT 2
26463: ARRAY
26464: NOT
26465: AND
26466: IFFALSE 26504
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
26468: LD_ADDR_EXP 53
26472: PUSH
26473: LD_EXP 53
26477: PPUSH
26478: LD_VAR 0 2
26482: PPUSH
26483: EMPTY
26484: PPUSH
26485: CALL_OW 1
26489: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_INT 102
26497: PPUSH
26498: CALL 20781 0 2
// continue ;
26502: GO 26431
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
26504: LD_ADDR_VAR 0 4
26508: PUSH
26509: LD_EXP 49
26513: PUSH
26514: LD_VAR 0 2
26518: ARRAY
26519: PPUSH
26520: LD_INT 25
26522: PUSH
26523: LD_INT 4
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PPUSH
26530: CALL_OW 72
26534: ST_TO_ADDR
// if not tmp then
26535: LD_VAR 0 4
26539: NOT
26540: IFFALSE 26544
// continue ;
26542: GO 26431
// if mc_taming [ i ] then
26544: LD_EXP 80
26548: PUSH
26549: LD_VAR 0 2
26553: ARRAY
26554: IFFALSE 26578
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
26556: LD_ADDR_EXP 80
26560: PUSH
26561: LD_EXP 80
26565: PPUSH
26566: LD_VAR 0 2
26570: PPUSH
26571: EMPTY
26572: PPUSH
26573: CALL_OW 1
26577: ST_TO_ADDR
// for j in tmp do
26578: LD_ADDR_VAR 0 3
26582: PUSH
26583: LD_VAR 0 4
26587: PUSH
26588: FOR_IN
26589: IFFALSE 26812
// begin if IsInUnit ( j ) then
26591: LD_VAR 0 3
26595: PPUSH
26596: CALL_OW 310
26600: IFFALSE 26611
// ComExitBuilding ( j ) ;
26602: LD_VAR 0 3
26606: PPUSH
26607: CALL_OW 122
// if not j in mc_healers [ i ] then
26611: LD_VAR 0 3
26615: PUSH
26616: LD_EXP 53
26620: PUSH
26621: LD_VAR 0 2
26625: ARRAY
26626: IN
26627: NOT
26628: IFFALSE 26674
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
26630: LD_ADDR_EXP 53
26634: PUSH
26635: LD_EXP 53
26639: PPUSH
26640: LD_VAR 0 2
26644: PUSH
26645: LD_EXP 53
26649: PUSH
26650: LD_VAR 0 2
26654: ARRAY
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PPUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL 53584 0 3
26673: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 110
26683: PUSH
26684: LD_INT 102
26686: NONEQUAL
26687: IFFALSE 26701
// SetTag ( j , 102 ) ;
26689: LD_VAR 0 3
26693: PPUSH
26694: LD_INT 102
26696: PPUSH
26697: CALL_OW 109
// Wait ( 3 ) ;
26701: LD_INT 3
26703: PPUSH
26704: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
26708: LD_EXP 52
26712: PUSH
26713: LD_VAR 0 2
26717: ARRAY
26718: PUSH
26719: LD_INT 1
26721: ARRAY
26722: IFFALSE 26754
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
26724: LD_VAR 0 3
26728: PPUSH
26729: LD_EXP 52
26733: PUSH
26734: LD_VAR 0 2
26738: ARRAY
26739: PUSH
26740: LD_INT 1
26742: ARRAY
26743: PUSH
26744: LD_INT 1
26746: ARRAY
26747: PPUSH
26748: CALL_OW 128
26752: GO 26810
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
26754: LD_VAR 0 3
26758: PPUSH
26759: CALL_OW 314
26763: NOT
26764: PUSH
26765: LD_EXP 52
26769: PUSH
26770: LD_VAR 0 2
26774: ARRAY
26775: PUSH
26776: LD_INT 2
26778: ARRAY
26779: AND
26780: IFFALSE 26810
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
26782: LD_VAR 0 3
26786: PPUSH
26787: LD_EXP 52
26791: PUSH
26792: LD_VAR 0 2
26796: ARRAY
26797: PUSH
26798: LD_INT 2
26800: ARRAY
26801: PUSH
26802: LD_INT 1
26804: ARRAY
26805: PPUSH
26806: CALL_OW 128
// end ;
26810: GO 26588
26812: POP
26813: POP
// end ;
26814: GO 26431
26816: POP
26817: POP
// end ;
26818: LD_VAR 0 1
26822: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
26823: LD_INT 0
26825: PPUSH
26826: PPUSH
26827: PPUSH
26828: PPUSH
26829: PPUSH
// if not mc_bases then
26830: LD_EXP 49
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 27982
// for i = 1 to mc_bases do
26839: LD_ADDR_VAR 0 2
26843: PUSH
26844: DOUBLE
26845: LD_INT 1
26847: DEC
26848: ST_TO_ADDR
26849: LD_EXP 49
26853: PUSH
26854: FOR_TO
26855: IFFALSE 27980
// begin if mc_scan [ i ] then
26857: LD_EXP 72
26861: PUSH
26862: LD_VAR 0 2
26866: ARRAY
26867: IFFALSE 26871
// continue ;
26869: GO 26854
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
26871: LD_EXP 54
26875: PUSH
26876: LD_VAR 0 2
26880: ARRAY
26881: NOT
26882: PUSH
26883: LD_EXP 56
26887: PUSH
26888: LD_VAR 0 2
26892: ARRAY
26893: NOT
26894: AND
26895: PUSH
26896: LD_EXP 55
26900: PUSH
26901: LD_VAR 0 2
26905: ARRAY
26906: AND
26907: IFFALSE 26945
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
26909: LD_ADDR_EXP 55
26913: PUSH
26914: LD_EXP 55
26918: PPUSH
26919: LD_VAR 0 2
26923: PPUSH
26924: EMPTY
26925: PPUSH
26926: CALL_OW 1
26930: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26931: LD_VAR 0 2
26935: PPUSH
26936: LD_INT 103
26938: PPUSH
26939: CALL 20781 0 2
// continue ;
26943: GO 26854
// end ; if mc_construct_list [ i ] then
26945: LD_EXP 56
26949: PUSH
26950: LD_VAR 0 2
26954: ARRAY
26955: IFFALSE 27175
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
26957: LD_ADDR_VAR 0 4
26961: PUSH
26962: LD_EXP 49
26966: PUSH
26967: LD_VAR 0 2
26971: ARRAY
26972: PPUSH
26973: LD_INT 25
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PPUSH
26983: CALL_OW 72
26987: PUSH
26988: LD_EXP 51
26992: PUSH
26993: LD_VAR 0 2
26997: ARRAY
26998: DIFF
26999: ST_TO_ADDR
// if not tmp then
27000: LD_VAR 0 4
27004: NOT
27005: IFFALSE 27009
// continue ;
27007: GO 26854
// for j in tmp do
27009: LD_ADDR_VAR 0 3
27013: PUSH
27014: LD_VAR 0 4
27018: PUSH
27019: FOR_IN
27020: IFFALSE 27171
// begin if not mc_builders [ i ] then
27022: LD_EXP 55
27026: PUSH
27027: LD_VAR 0 2
27031: ARRAY
27032: NOT
27033: IFFALSE 27091
// begin SetTag ( j , 103 ) ;
27035: LD_VAR 0 3
27039: PPUSH
27040: LD_INT 103
27042: PPUSH
27043: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27047: LD_ADDR_EXP 55
27051: PUSH
27052: LD_EXP 55
27056: PPUSH
27057: LD_VAR 0 2
27061: PUSH
27062: LD_EXP 55
27066: PUSH
27067: LD_VAR 0 2
27071: ARRAY
27072: PUSH
27073: LD_INT 1
27075: PLUS
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PPUSH
27081: LD_VAR 0 3
27085: PPUSH
27086: CALL 53584 0 3
27090: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27091: LD_VAR 0 3
27095: PPUSH
27096: CALL_OW 310
27100: IFFALSE 27111
// ComExitBuilding ( j ) ;
27102: LD_VAR 0 3
27106: PPUSH
27107: CALL_OW 122
// wait ( 3 ) ;
27111: LD_INT 3
27113: PPUSH
27114: CALL_OW 67
// if not mc_construct_list [ i ] then
27118: LD_EXP 56
27122: PUSH
27123: LD_VAR 0 2
27127: ARRAY
27128: NOT
27129: IFFALSE 27133
// break ;
27131: GO 27171
// if not HasTask ( j ) then
27133: LD_VAR 0 3
27137: PPUSH
27138: CALL_OW 314
27142: NOT
27143: IFFALSE 27169
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27145: LD_VAR 0 3
27149: PPUSH
27150: LD_EXP 56
27154: PUSH
27155: LD_VAR 0 2
27159: ARRAY
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: PPUSH
27165: CALL 56435 0 2
// end ;
27169: GO 27019
27171: POP
27172: POP
// end else
27173: GO 27978
// if mc_build_list [ i ] then
27175: LD_EXP 54
27179: PUSH
27180: LD_VAR 0 2
27184: ARRAY
27185: IFFALSE 27978
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27187: LD_ADDR_VAR 0 5
27191: PUSH
27192: LD_EXP 49
27196: PUSH
27197: LD_VAR 0 2
27201: ARRAY
27202: PPUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 30
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 30
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: PPUSH
27231: CALL_OW 72
27235: ST_TO_ADDR
// if depot then
27236: LD_VAR 0 5
27240: IFFALSE 27258
// depot := depot [ 1 ] else
27242: LD_ADDR_VAR 0 5
27246: PUSH
27247: LD_VAR 0 5
27251: PUSH
27252: LD_INT 1
27254: ARRAY
27255: ST_TO_ADDR
27256: GO 27266
// depot := 0 ;
27258: LD_ADDR_VAR 0 5
27262: PUSH
27263: LD_INT 0
27265: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
27266: LD_EXP 54
27270: PUSH
27271: LD_VAR 0 2
27275: ARRAY
27276: PUSH
27277: LD_INT 1
27279: ARRAY
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: CALL 56265 0 1
27289: PUSH
27290: LD_EXP 49
27294: PUSH
27295: LD_VAR 0 2
27299: ARRAY
27300: PPUSH
27301: LD_INT 2
27303: PUSH
27304: LD_INT 30
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 30
27316: PUSH
27317: LD_INT 3
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: LIST
27328: PPUSH
27329: CALL_OW 72
27333: NOT
27334: AND
27335: IFFALSE 27440
// begin for j = 1 to mc_build_list [ i ] do
27337: LD_ADDR_VAR 0 3
27341: PUSH
27342: DOUBLE
27343: LD_INT 1
27345: DEC
27346: ST_TO_ADDR
27347: LD_EXP 54
27351: PUSH
27352: LD_VAR 0 2
27356: ARRAY
27357: PUSH
27358: FOR_TO
27359: IFFALSE 27438
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
27361: LD_EXP 54
27365: PUSH
27366: LD_VAR 0 2
27370: ARRAY
27371: PUSH
27372: LD_VAR 0 3
27376: ARRAY
27377: PUSH
27378: LD_INT 1
27380: ARRAY
27381: PUSH
27382: LD_INT 2
27384: EQUAL
27385: IFFALSE 27436
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
27387: LD_ADDR_EXP 54
27391: PUSH
27392: LD_EXP 54
27396: PPUSH
27397: LD_VAR 0 2
27401: PPUSH
27402: LD_EXP 54
27406: PUSH
27407: LD_VAR 0 2
27411: ARRAY
27412: PPUSH
27413: LD_VAR 0 3
27417: PPUSH
27418: LD_INT 1
27420: PPUSH
27421: LD_INT 0
27423: PPUSH
27424: CALL 53002 0 4
27428: PPUSH
27429: CALL_OW 1
27433: ST_TO_ADDR
// break ;
27434: GO 27438
// end ;
27436: GO 27358
27438: POP
27439: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
27440: LD_EXP 54
27444: PUSH
27445: LD_VAR 0 2
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PUSH
27455: LD_INT 1
27457: ARRAY
27458: PUSH
27459: LD_INT 0
27461: EQUAL
27462: PUSH
27463: LD_VAR 0 5
27467: PUSH
27468: LD_VAR 0 5
27472: PPUSH
27473: LD_EXP 54
27477: PUSH
27478: LD_VAR 0 2
27482: ARRAY
27483: PUSH
27484: LD_INT 1
27486: ARRAY
27487: PUSH
27488: LD_INT 1
27490: ARRAY
27491: PPUSH
27492: LD_EXP 54
27496: PUSH
27497: LD_VAR 0 2
27501: ARRAY
27502: PUSH
27503: LD_INT 1
27505: ARRAY
27506: PUSH
27507: LD_INT 2
27509: ARRAY
27510: PPUSH
27511: LD_EXP 54
27515: PUSH
27516: LD_VAR 0 2
27520: ARRAY
27521: PUSH
27522: LD_INT 1
27524: ARRAY
27525: PUSH
27526: LD_INT 3
27528: ARRAY
27529: PPUSH
27530: LD_EXP 54
27534: PUSH
27535: LD_VAR 0 2
27539: ARRAY
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: PUSH
27545: LD_INT 4
27547: ARRAY
27548: PPUSH
27549: CALL 60999 0 5
27553: AND
27554: OR
27555: IFFALSE 27836
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27557: LD_ADDR_VAR 0 4
27561: PUSH
27562: LD_EXP 49
27566: PUSH
27567: LD_VAR 0 2
27571: ARRAY
27572: PPUSH
27573: LD_INT 25
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 72
27587: PUSH
27588: LD_EXP 51
27592: PUSH
27593: LD_VAR 0 2
27597: ARRAY
27598: DIFF
27599: ST_TO_ADDR
// if not tmp then
27600: LD_VAR 0 4
27604: NOT
27605: IFFALSE 27609
// continue ;
27607: GO 26854
// for j in tmp do
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_VAR 0 4
27618: PUSH
27619: FOR_IN
27620: IFFALSE 27832
// begin if not mc_builders [ i ] then
27622: LD_EXP 55
27626: PUSH
27627: LD_VAR 0 2
27631: ARRAY
27632: NOT
27633: IFFALSE 27691
// begin SetTag ( j , 103 ) ;
27635: LD_VAR 0 3
27639: PPUSH
27640: LD_INT 103
27642: PPUSH
27643: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27647: LD_ADDR_EXP 55
27651: PUSH
27652: LD_EXP 55
27656: PPUSH
27657: LD_VAR 0 2
27661: PUSH
27662: LD_EXP 55
27666: PUSH
27667: LD_VAR 0 2
27671: ARRAY
27672: PUSH
27673: LD_INT 1
27675: PLUS
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PPUSH
27681: LD_VAR 0 3
27685: PPUSH
27686: CALL 53584 0 3
27690: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27691: LD_VAR 0 3
27695: PPUSH
27696: CALL_OW 310
27700: IFFALSE 27711
// ComExitBuilding ( j ) ;
27702: LD_VAR 0 3
27706: PPUSH
27707: CALL_OW 122
// wait ( 3 ) ;
27711: LD_INT 3
27713: PPUSH
27714: CALL_OW 67
// if not mc_build_list [ i ] then
27718: LD_EXP 54
27722: PUSH
27723: LD_VAR 0 2
27727: ARRAY
27728: NOT
27729: IFFALSE 27733
// break ;
27731: GO 27832
// if not HasTask ( j ) then
27733: LD_VAR 0 3
27737: PPUSH
27738: CALL_OW 314
27742: NOT
27743: IFFALSE 27830
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
27745: LD_VAR 0 3
27749: PPUSH
27750: LD_EXP 54
27754: PUSH
27755: LD_VAR 0 2
27759: ARRAY
27760: PUSH
27761: LD_INT 1
27763: ARRAY
27764: PUSH
27765: LD_INT 1
27767: ARRAY
27768: PPUSH
27769: LD_EXP 54
27773: PUSH
27774: LD_VAR 0 2
27778: ARRAY
27779: PUSH
27780: LD_INT 1
27782: ARRAY
27783: PUSH
27784: LD_INT 2
27786: ARRAY
27787: PPUSH
27788: LD_EXP 54
27792: PUSH
27793: LD_VAR 0 2
27797: ARRAY
27798: PUSH
27799: LD_INT 1
27801: ARRAY
27802: PUSH
27803: LD_INT 3
27805: ARRAY
27806: PPUSH
27807: LD_EXP 54
27811: PUSH
27812: LD_VAR 0 2
27816: ARRAY
27817: PUSH
27818: LD_INT 1
27820: ARRAY
27821: PUSH
27822: LD_INT 4
27824: ARRAY
27825: PPUSH
27826: CALL_OW 145
// end ;
27830: GO 27619
27832: POP
27833: POP
// end else
27834: GO 27978
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
27836: LD_EXP 49
27840: PUSH
27841: LD_VAR 0 2
27845: ARRAY
27846: PPUSH
27847: LD_EXP 54
27851: PUSH
27852: LD_VAR 0 2
27856: ARRAY
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PUSH
27862: LD_INT 1
27864: ARRAY
27865: PPUSH
27866: LD_EXP 54
27870: PUSH
27871: LD_VAR 0 2
27875: ARRAY
27876: PUSH
27877: LD_INT 1
27879: ARRAY
27880: PUSH
27881: LD_INT 2
27883: ARRAY
27884: PPUSH
27885: LD_EXP 54
27889: PUSH
27890: LD_VAR 0 2
27894: ARRAY
27895: PUSH
27896: LD_INT 1
27898: ARRAY
27899: PUSH
27900: LD_INT 3
27902: ARRAY
27903: PPUSH
27904: LD_EXP 54
27908: PUSH
27909: LD_VAR 0 2
27913: ARRAY
27914: PUSH
27915: LD_INT 1
27917: ARRAY
27918: PUSH
27919: LD_INT 4
27921: ARRAY
27922: PPUSH
27923: CALL 60335 0 5
27927: NOT
27928: IFFALSE 27978
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
27930: LD_ADDR_EXP 54
27934: PUSH
27935: LD_EXP 54
27939: PPUSH
27940: LD_VAR 0 2
27944: PPUSH
27945: LD_EXP 54
27949: PUSH
27950: LD_VAR 0 2
27954: ARRAY
27955: PPUSH
27956: LD_INT 1
27958: PPUSH
27959: LD_INT 1
27961: NEG
27962: PPUSH
27963: LD_INT 0
27965: PPUSH
27966: CALL 53002 0 4
27970: PPUSH
27971: CALL_OW 1
27975: ST_TO_ADDR
// continue ;
27976: GO 26854
// end ; end ; end ;
27978: GO 26854
27980: POP
27981: POP
// end ;
27982: LD_VAR 0 1
27986: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
27993: PPUSH
27994: PPUSH
// if not mc_bases then
27995: LD_EXP 49
27999: NOT
28000: IFFALSE 28004
// exit ;
28002: GO 28431
// for i = 1 to mc_bases do
28004: LD_ADDR_VAR 0 2
28008: PUSH
28009: DOUBLE
28010: LD_INT 1
28012: DEC
28013: ST_TO_ADDR
28014: LD_EXP 49
28018: PUSH
28019: FOR_TO
28020: IFFALSE 28429
// begin tmp := mc_build_upgrade [ i ] ;
28022: LD_ADDR_VAR 0 4
28026: PUSH
28027: LD_EXP 81
28031: PUSH
28032: LD_VAR 0 2
28036: ARRAY
28037: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28038: LD_ADDR_VAR 0 6
28042: PUSH
28043: LD_EXP 82
28047: PUSH
28048: LD_VAR 0 2
28052: ARRAY
28053: PPUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 30
28059: PUSH
28060: LD_INT 6
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 30
28069: PUSH
28070: LD_INT 7
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 72
28086: ST_TO_ADDR
// if not tmp and not lab then
28087: LD_VAR 0 4
28091: NOT
28092: PUSH
28093: LD_VAR 0 6
28097: NOT
28098: AND
28099: IFFALSE 28103
// continue ;
28101: GO 28019
// if tmp then
28103: LD_VAR 0 4
28107: IFFALSE 28227
// for j in tmp do
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_VAR 0 4
28118: PUSH
28119: FOR_IN
28120: IFFALSE 28225
// begin if UpgradeCost ( j ) then
28122: LD_VAR 0 3
28126: PPUSH
28127: CALL 59995 0 1
28131: IFFALSE 28223
// begin ComUpgrade ( j ) ;
28133: LD_VAR 0 3
28137: PPUSH
28138: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28142: LD_ADDR_EXP 81
28146: PUSH
28147: LD_EXP 81
28151: PPUSH
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_EXP 81
28161: PUSH
28162: LD_VAR 0 2
28166: ARRAY
28167: PUSH
28168: LD_VAR 0 3
28172: DIFF
28173: PPUSH
28174: CALL_OW 1
28178: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28179: LD_ADDR_EXP 56
28183: PUSH
28184: LD_EXP 56
28188: PPUSH
28189: LD_VAR 0 2
28193: PUSH
28194: LD_EXP 56
28198: PUSH
28199: LD_VAR 0 2
28203: ARRAY
28204: PUSH
28205: LD_INT 1
28207: PLUS
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PPUSH
28213: LD_VAR 0 3
28217: PPUSH
28218: CALL 53584 0 3
28222: ST_TO_ADDR
// end ; end ;
28223: GO 28119
28225: POP
28226: POP
// if not lab or not mc_lab_upgrade [ i ] then
28227: LD_VAR 0 6
28231: NOT
28232: PUSH
28233: LD_EXP 83
28237: PUSH
28238: LD_VAR 0 2
28242: ARRAY
28243: NOT
28244: OR
28245: IFFALSE 28249
// continue ;
28247: GO 28019
// for j in lab do
28249: LD_ADDR_VAR 0 3
28253: PUSH
28254: LD_VAR 0 6
28258: PUSH
28259: FOR_IN
28260: IFFALSE 28425
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
28262: LD_VAR 0 3
28266: PPUSH
28267: CALL_OW 266
28271: PUSH
28272: LD_INT 6
28274: PUSH
28275: LD_INT 7
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: IN
28282: PUSH
28283: LD_VAR 0 3
28287: PPUSH
28288: CALL_OW 461
28292: PUSH
28293: LD_INT 1
28295: NONEQUAL
28296: AND
28297: IFFALSE 28423
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
28299: LD_VAR 0 3
28303: PPUSH
28304: LD_EXP 83
28308: PUSH
28309: LD_VAR 0 2
28313: ARRAY
28314: PUSH
28315: LD_INT 1
28317: ARRAY
28318: PPUSH
28319: CALL 60200 0 2
28323: IFFALSE 28423
// begin ComCancel ( j ) ;
28325: LD_VAR 0 3
28329: PPUSH
28330: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
28334: LD_VAR 0 3
28338: PPUSH
28339: LD_EXP 83
28343: PUSH
28344: LD_VAR 0 2
28348: ARRAY
28349: PUSH
28350: LD_INT 1
28352: ARRAY
28353: PPUSH
28354: CALL_OW 207
// if not j in mc_construct_list [ i ] then
28358: LD_VAR 0 3
28362: PUSH
28363: LD_EXP 56
28367: PUSH
28368: LD_VAR 0 2
28372: ARRAY
28373: IN
28374: NOT
28375: IFFALSE 28421
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28377: LD_ADDR_EXP 56
28381: PUSH
28382: LD_EXP 56
28386: PPUSH
28387: LD_VAR 0 2
28391: PUSH
28392: LD_EXP 56
28396: PUSH
28397: LD_VAR 0 2
28401: ARRAY
28402: PUSH
28403: LD_INT 1
28405: PLUS
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PPUSH
28411: LD_VAR 0 3
28415: PPUSH
28416: CALL 53584 0 3
28420: ST_TO_ADDR
// break ;
28421: GO 28425
// end ; end ; end ;
28423: GO 28259
28425: POP
28426: POP
// end ;
28427: GO 28019
28429: POP
28430: POP
// end ;
28431: LD_VAR 0 1
28435: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
28436: LD_INT 0
28438: PPUSH
28439: PPUSH
28440: PPUSH
28441: PPUSH
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
28446: PPUSH
// if not mc_bases then
28447: LD_EXP 49
28451: NOT
28452: IFFALSE 28456
// exit ;
28454: GO 28861
// for i = 1 to mc_bases do
28456: LD_ADDR_VAR 0 2
28460: PUSH
28461: DOUBLE
28462: LD_INT 1
28464: DEC
28465: ST_TO_ADDR
28466: LD_EXP 49
28470: PUSH
28471: FOR_TO
28472: IFFALSE 28859
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
28474: LD_EXP 57
28478: PUSH
28479: LD_VAR 0 2
28483: ARRAY
28484: NOT
28485: PUSH
28486: LD_EXP 49
28490: PUSH
28491: LD_VAR 0 2
28495: ARRAY
28496: PPUSH
28497: LD_INT 30
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 72
28511: NOT
28512: OR
28513: IFFALSE 28517
// continue ;
28515: GO 28471
// busy := false ;
28517: LD_ADDR_VAR 0 8
28521: PUSH
28522: LD_INT 0
28524: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
28525: LD_ADDR_VAR 0 4
28529: PUSH
28530: LD_EXP 49
28534: PUSH
28535: LD_VAR 0 2
28539: ARRAY
28540: PPUSH
28541: LD_INT 30
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PPUSH
28551: CALL_OW 72
28555: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
28556: LD_ADDR_VAR 0 6
28560: PUSH
28561: LD_EXP 57
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: PPUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 30
28577: PUSH
28578: LD_INT 32
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 30
28587: PUSH
28588: LD_INT 33
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: PPUSH
28600: CALL_OW 72
28604: ST_TO_ADDR
// if not t then
28605: LD_VAR 0 6
28609: NOT
28610: IFFALSE 28614
// continue ;
28612: GO 28471
// for j in tmp do
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_VAR 0 4
28623: PUSH
28624: FOR_IN
28625: IFFALSE 28655
// if not BuildingStatus ( j ) = bs_idle then
28627: LD_VAR 0 3
28631: PPUSH
28632: CALL_OW 461
28636: PUSH
28637: LD_INT 2
28639: EQUAL
28640: NOT
28641: IFFALSE 28653
// begin busy := true ;
28643: LD_ADDR_VAR 0 8
28647: PUSH
28648: LD_INT 1
28650: ST_TO_ADDR
// break ;
28651: GO 28655
// end ;
28653: GO 28624
28655: POP
28656: POP
// if busy then
28657: LD_VAR 0 8
28661: IFFALSE 28665
// continue ;
28663: GO 28471
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
28665: LD_ADDR_VAR 0 7
28669: PUSH
28670: LD_VAR 0 6
28674: PPUSH
28675: LD_INT 35
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PPUSH
28685: CALL_OW 72
28689: ST_TO_ADDR
// if tw then
28690: LD_VAR 0 7
28694: IFFALSE 28771
// begin tw := tw [ 1 ] ;
28696: LD_ADDR_VAR 0 7
28700: PUSH
28701: LD_VAR 0 7
28705: PUSH
28706: LD_INT 1
28708: ARRAY
28709: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
28710: LD_ADDR_VAR 0 9
28714: PUSH
28715: LD_VAR 0 7
28719: PPUSH
28720: LD_EXP 74
28724: PUSH
28725: LD_VAR 0 2
28729: ARRAY
28730: PPUSH
28731: CALL 58554 0 2
28735: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
28736: LD_EXP 88
28740: PUSH
28741: LD_VAR 0 2
28745: ARRAY
28746: IFFALSE 28769
// if not weapon in mc_allowed_tower_weapons [ i ] then
28748: LD_VAR 0 9
28752: PUSH
28753: LD_EXP 88
28757: PUSH
28758: LD_VAR 0 2
28762: ARRAY
28763: IN
28764: NOT
28765: IFFALSE 28769
// continue ;
28767: GO 28471
// end else
28769: GO 28834
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
28771: LD_ADDR_VAR 0 5
28775: PUSH
28776: LD_EXP 57
28780: PUSH
28781: LD_VAR 0 2
28785: ARRAY
28786: PPUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: CALL 88755 0 2
28796: ST_TO_ADDR
// if not tmp2 then
28797: LD_VAR 0 5
28801: NOT
28802: IFFALSE 28806
// continue ;
28804: GO 28471
// tw := tmp2 [ 1 ] ;
28806: LD_ADDR_VAR 0 7
28810: PUSH
28811: LD_VAR 0 5
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
28820: LD_ADDR_VAR 0 9
28824: PUSH
28825: LD_VAR 0 5
28829: PUSH
28830: LD_INT 2
28832: ARRAY
28833: ST_TO_ADDR
// end ; if not weapon then
28834: LD_VAR 0 9
28838: NOT
28839: IFFALSE 28843
// continue ;
28841: GO 28471
// ComPlaceWeapon ( tw , weapon ) ;
28843: LD_VAR 0 7
28847: PPUSH
28848: LD_VAR 0 9
28852: PPUSH
28853: CALL_OW 148
// end ;
28857: GO 28471
28859: POP
28860: POP
// end ;
28861: LD_VAR 0 1
28865: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
28870: PPUSH
28871: PPUSH
28872: PPUSH
28873: PPUSH
// if not mc_bases then
28874: LD_EXP 49
28878: NOT
28879: IFFALSE 28883
// exit ;
28881: GO 29895
// for i = 1 to mc_bases do
28883: LD_ADDR_VAR 0 2
28887: PUSH
28888: DOUBLE
28889: LD_INT 1
28891: DEC
28892: ST_TO_ADDR
28893: LD_EXP 49
28897: PUSH
28898: FOR_TO
28899: IFFALSE 29893
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
28901: LD_EXP 62
28905: PUSH
28906: LD_VAR 0 2
28910: ARRAY
28911: NOT
28912: PUSH
28913: LD_EXP 62
28917: PUSH
28918: LD_VAR 0 2
28922: ARRAY
28923: PUSH
28924: LD_EXP 63
28928: PUSH
28929: LD_VAR 0 2
28933: ARRAY
28934: EQUAL
28935: OR
28936: IFFALSE 28940
// continue ;
28938: GO 28898
// if mc_miners [ i ] then
28940: LD_EXP 63
28944: PUSH
28945: LD_VAR 0 2
28949: ARRAY
28950: IFFALSE 29580
// begin k := 1 ;
28952: LD_ADDR_VAR 0 4
28956: PUSH
28957: LD_INT 1
28959: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: DOUBLE
28966: LD_EXP 63
28970: PUSH
28971: LD_VAR 0 2
28975: ARRAY
28976: INC
28977: ST_TO_ADDR
28978: LD_INT 1
28980: PUSH
28981: FOR_DOWNTO
28982: IFFALSE 29578
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
28984: LD_EXP 63
28988: PUSH
28989: LD_VAR 0 2
28993: ARRAY
28994: PUSH
28995: LD_VAR 0 3
28999: ARRAY
29000: PPUSH
29001: CALL_OW 301
29005: PUSH
29006: LD_EXP 63
29010: PUSH
29011: LD_VAR 0 2
29015: ARRAY
29016: PUSH
29017: LD_VAR 0 3
29021: ARRAY
29022: PPUSH
29023: CALL_OW 257
29027: PUSH
29028: LD_INT 1
29030: NONEQUAL
29031: OR
29032: IFFALSE 29095
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29034: LD_ADDR_VAR 0 5
29038: PUSH
29039: LD_EXP 63
29043: PUSH
29044: LD_VAR 0 2
29048: ARRAY
29049: PUSH
29050: LD_EXP 63
29054: PUSH
29055: LD_VAR 0 2
29059: ARRAY
29060: PUSH
29061: LD_VAR 0 3
29065: ARRAY
29066: DIFF
29067: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29068: LD_ADDR_EXP 63
29072: PUSH
29073: LD_EXP 63
29077: PPUSH
29078: LD_VAR 0 2
29082: PPUSH
29083: LD_VAR 0 5
29087: PPUSH
29088: CALL_OW 1
29092: ST_TO_ADDR
// continue ;
29093: GO 28981
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
29095: LD_EXP 63
29099: PUSH
29100: LD_VAR 0 2
29104: ARRAY
29105: PUSH
29106: LD_VAR 0 3
29110: ARRAY
29111: PPUSH
29112: CALL 53520 0 1
29116: PUSH
29117: LD_EXP 63
29121: PUSH
29122: LD_VAR 0 2
29126: ARRAY
29127: PUSH
29128: LD_VAR 0 3
29132: ARRAY
29133: PPUSH
29134: CALL_OW 255
29138: PPUSH
29139: LD_EXP 62
29143: PUSH
29144: LD_VAR 0 2
29148: ARRAY
29149: PUSH
29150: LD_VAR 0 4
29154: ARRAY
29155: PUSH
29156: LD_INT 1
29158: ARRAY
29159: PPUSH
29160: LD_EXP 62
29164: PUSH
29165: LD_VAR 0 2
29169: ARRAY
29170: PUSH
29171: LD_VAR 0 4
29175: ARRAY
29176: PUSH
29177: LD_INT 2
29179: ARRAY
29180: PPUSH
29181: LD_INT 15
29183: PPUSH
29184: CALL 54480 0 4
29188: PUSH
29189: LD_INT 4
29191: ARRAY
29192: PUSH
29193: LD_EXP 63
29197: PUSH
29198: LD_VAR 0 2
29202: ARRAY
29203: PUSH
29204: LD_VAR 0 3
29208: ARRAY
29209: PPUSH
29210: LD_INT 10
29212: PPUSH
29213: CALL 56177 0 2
29217: PUSH
29218: LD_INT 4
29220: ARRAY
29221: OR
29222: AND
29223: IFFALSE 29246
// ComStop ( mc_miners [ i ] [ j ] ) ;
29225: LD_EXP 63
29229: PUSH
29230: LD_VAR 0 2
29234: ARRAY
29235: PUSH
29236: LD_VAR 0 3
29240: ARRAY
29241: PPUSH
29242: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
29246: LD_EXP 63
29250: PUSH
29251: LD_VAR 0 2
29255: ARRAY
29256: PUSH
29257: LD_VAR 0 3
29261: ARRAY
29262: PPUSH
29263: CALL_OW 257
29267: PUSH
29268: LD_INT 1
29270: EQUAL
29271: PUSH
29272: LD_EXP 63
29276: PUSH
29277: LD_VAR 0 2
29281: ARRAY
29282: PUSH
29283: LD_VAR 0 3
29287: ARRAY
29288: PPUSH
29289: CALL_OW 459
29293: NOT
29294: AND
29295: PUSH
29296: LD_EXP 63
29300: PUSH
29301: LD_VAR 0 2
29305: ARRAY
29306: PUSH
29307: LD_VAR 0 3
29311: ARRAY
29312: PPUSH
29313: CALL_OW 255
29317: PPUSH
29318: LD_EXP 62
29322: PUSH
29323: LD_VAR 0 2
29327: ARRAY
29328: PUSH
29329: LD_VAR 0 4
29333: ARRAY
29334: PUSH
29335: LD_INT 1
29337: ARRAY
29338: PPUSH
29339: LD_EXP 62
29343: PUSH
29344: LD_VAR 0 2
29348: ARRAY
29349: PUSH
29350: LD_VAR 0 4
29354: ARRAY
29355: PUSH
29356: LD_INT 2
29358: ARRAY
29359: PPUSH
29360: LD_INT 15
29362: PPUSH
29363: CALL 54480 0 4
29367: PUSH
29368: LD_INT 4
29370: ARRAY
29371: PUSH
29372: LD_INT 0
29374: EQUAL
29375: AND
29376: PUSH
29377: LD_EXP 63
29381: PUSH
29382: LD_VAR 0 2
29386: ARRAY
29387: PUSH
29388: LD_VAR 0 3
29392: ARRAY
29393: PPUSH
29394: CALL_OW 314
29398: NOT
29399: AND
29400: IFFALSE 29576
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29402: LD_EXP 63
29406: PUSH
29407: LD_VAR 0 2
29411: ARRAY
29412: PUSH
29413: LD_VAR 0 3
29417: ARRAY
29418: PPUSH
29419: CALL_OW 310
29423: IFFALSE 29446
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
29425: LD_EXP 63
29429: PUSH
29430: LD_VAR 0 2
29434: ARRAY
29435: PUSH
29436: LD_VAR 0 3
29440: ARRAY
29441: PPUSH
29442: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
29446: LD_EXP 63
29450: PUSH
29451: LD_VAR 0 2
29455: ARRAY
29456: PUSH
29457: LD_VAR 0 3
29461: ARRAY
29462: PPUSH
29463: CALL_OW 314
29467: NOT
29468: IFFALSE 29536
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
29470: LD_EXP 63
29474: PUSH
29475: LD_VAR 0 2
29479: ARRAY
29480: PUSH
29481: LD_VAR 0 3
29485: ARRAY
29486: PPUSH
29487: LD_EXP 62
29491: PUSH
29492: LD_VAR 0 2
29496: ARRAY
29497: PUSH
29498: LD_VAR 0 4
29502: ARRAY
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_EXP 62
29512: PUSH
29513: LD_VAR 0 2
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 4
29523: ARRAY
29524: PUSH
29525: LD_INT 2
29527: ARRAY
29528: PPUSH
29529: LD_INT 0
29531: PPUSH
29532: CALL_OW 193
// k := k + 1 ;
29536: LD_ADDR_VAR 0 4
29540: PUSH
29541: LD_VAR 0 4
29545: PUSH
29546: LD_INT 1
29548: PLUS
29549: ST_TO_ADDR
// if k > mc_mines [ i ] then
29550: LD_VAR 0 4
29554: PUSH
29555: LD_EXP 62
29559: PUSH
29560: LD_VAR 0 2
29564: ARRAY
29565: GREATER
29566: IFFALSE 29576
// k := 1 ;
29568: LD_ADDR_VAR 0 4
29572: PUSH
29573: LD_INT 1
29575: ST_TO_ADDR
// end ; end ;
29576: GO 28981
29578: POP
29579: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
29580: LD_ADDR_VAR 0 5
29584: PUSH
29585: LD_EXP 49
29589: PUSH
29590: LD_VAR 0 2
29594: ARRAY
29595: PPUSH
29596: LD_INT 2
29598: PUSH
29599: LD_INT 30
29601: PUSH
29602: LD_INT 4
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 30
29611: PUSH
29612: LD_INT 5
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 30
29621: PUSH
29622: LD_INT 32
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: PPUSH
29635: CALL_OW 72
29639: ST_TO_ADDR
// if not tmp then
29640: LD_VAR 0 5
29644: NOT
29645: IFFALSE 29649
// continue ;
29647: GO 28898
// list := [ ] ;
29649: LD_ADDR_VAR 0 6
29653: PUSH
29654: EMPTY
29655: ST_TO_ADDR
// for j in tmp do
29656: LD_ADDR_VAR 0 3
29660: PUSH
29661: LD_VAR 0 5
29665: PUSH
29666: FOR_IN
29667: IFFALSE 29736
// begin for k in UnitsInside ( j ) do
29669: LD_ADDR_VAR 0 4
29673: PUSH
29674: LD_VAR 0 3
29678: PPUSH
29679: CALL_OW 313
29683: PUSH
29684: FOR_IN
29685: IFFALSE 29732
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
29687: LD_VAR 0 4
29691: PPUSH
29692: CALL_OW 257
29696: PUSH
29697: LD_INT 1
29699: EQUAL
29700: PUSH
29701: LD_VAR 0 4
29705: PPUSH
29706: CALL_OW 459
29710: NOT
29711: AND
29712: IFFALSE 29730
// list := list ^ k ;
29714: LD_ADDR_VAR 0 6
29718: PUSH
29719: LD_VAR 0 6
29723: PUSH
29724: LD_VAR 0 4
29728: ADD
29729: ST_TO_ADDR
29730: GO 29684
29732: POP
29733: POP
// end ;
29734: GO 29666
29736: POP
29737: POP
// list := list diff mc_miners [ i ] ;
29738: LD_ADDR_VAR 0 6
29742: PUSH
29743: LD_VAR 0 6
29747: PUSH
29748: LD_EXP 63
29752: PUSH
29753: LD_VAR 0 2
29757: ARRAY
29758: DIFF
29759: ST_TO_ADDR
// if not list then
29760: LD_VAR 0 6
29764: NOT
29765: IFFALSE 29769
// continue ;
29767: GO 28898
// k := mc_mines [ i ] - mc_miners [ i ] ;
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: LD_EXP 62
29778: PUSH
29779: LD_VAR 0 2
29783: ARRAY
29784: PUSH
29785: LD_EXP 63
29789: PUSH
29790: LD_VAR 0 2
29794: ARRAY
29795: MINUS
29796: ST_TO_ADDR
// if k > list then
29797: LD_VAR 0 4
29801: PUSH
29802: LD_VAR 0 6
29806: GREATER
29807: IFFALSE 29819
// k := list ;
29809: LD_ADDR_VAR 0 4
29813: PUSH
29814: LD_VAR 0 6
29818: ST_TO_ADDR
// for j = 1 to k do
29819: LD_ADDR_VAR 0 3
29823: PUSH
29824: DOUBLE
29825: LD_INT 1
29827: DEC
29828: ST_TO_ADDR
29829: LD_VAR 0 4
29833: PUSH
29834: FOR_TO
29835: IFFALSE 29889
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
29837: LD_ADDR_EXP 63
29841: PUSH
29842: LD_EXP 63
29846: PPUSH
29847: LD_VAR 0 2
29851: PUSH
29852: LD_EXP 63
29856: PUSH
29857: LD_VAR 0 2
29861: ARRAY
29862: PUSH
29863: LD_INT 1
29865: PLUS
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PPUSH
29871: LD_VAR 0 6
29875: PUSH
29876: LD_VAR 0 3
29880: ARRAY
29881: PPUSH
29882: CALL 53584 0 3
29886: ST_TO_ADDR
29887: GO 29834
29889: POP
29890: POP
// end ;
29891: GO 28898
29893: POP
29894: POP
// end ;
29895: LD_VAR 0 1
29899: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
29900: LD_INT 0
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
29911: PPUSH
// if not mc_bases then
29912: LD_EXP 49
29916: NOT
29917: IFFALSE 29921
// exit ;
29919: GO 31671
// for i = 1 to mc_bases do
29921: LD_ADDR_VAR 0 2
29925: PUSH
29926: DOUBLE
29927: LD_INT 1
29929: DEC
29930: ST_TO_ADDR
29931: LD_EXP 49
29935: PUSH
29936: FOR_TO
29937: IFFALSE 31669
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
29939: LD_EXP 49
29943: PUSH
29944: LD_VAR 0 2
29948: ARRAY
29949: NOT
29950: PUSH
29951: LD_EXP 56
29955: PUSH
29956: LD_VAR 0 2
29960: ARRAY
29961: OR
29962: IFFALSE 29966
// continue ;
29964: GO 29936
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
29966: LD_EXP 65
29970: PUSH
29971: LD_VAR 0 2
29975: ARRAY
29976: NOT
29977: PUSH
29978: LD_EXP 66
29982: PUSH
29983: LD_VAR 0 2
29987: ARRAY
29988: AND
29989: IFFALSE 30027
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
29991: LD_ADDR_EXP 66
29995: PUSH
29996: LD_EXP 66
30000: PPUSH
30001: LD_VAR 0 2
30005: PPUSH
30006: EMPTY
30007: PPUSH
30008: CALL_OW 1
30012: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30013: LD_VAR 0 2
30017: PPUSH
30018: LD_INT 107
30020: PPUSH
30021: CALL 20781 0 2
// continue ;
30025: GO 29936
// end ; target := [ ] ;
30027: LD_ADDR_VAR 0 6
30031: PUSH
30032: EMPTY
30033: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: DOUBLE
30040: LD_EXP 65
30044: PUSH
30045: LD_VAR 0 2
30049: ARRAY
30050: INC
30051: ST_TO_ADDR
30052: LD_INT 1
30054: PUSH
30055: FOR_DOWNTO
30056: IFFALSE 30316
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30058: LD_EXP 65
30062: PUSH
30063: LD_VAR 0 2
30067: ARRAY
30068: PUSH
30069: LD_VAR 0 3
30073: ARRAY
30074: PUSH
30075: LD_INT 2
30077: ARRAY
30078: PPUSH
30079: LD_EXP 65
30083: PUSH
30084: LD_VAR 0 2
30088: ARRAY
30089: PUSH
30090: LD_VAR 0 3
30094: ARRAY
30095: PUSH
30096: LD_INT 3
30098: ARRAY
30099: PPUSH
30100: CALL_OW 488
30104: PUSH
30105: LD_EXP 65
30109: PUSH
30110: LD_VAR 0 2
30114: ARRAY
30115: PUSH
30116: LD_VAR 0 3
30120: ARRAY
30121: PUSH
30122: LD_INT 2
30124: ARRAY
30125: PPUSH
30126: LD_EXP 65
30130: PUSH
30131: LD_VAR 0 2
30135: ARRAY
30136: PUSH
30137: LD_VAR 0 3
30141: ARRAY
30142: PUSH
30143: LD_INT 3
30145: ARRAY
30146: PPUSH
30147: CALL_OW 284
30151: PUSH
30152: LD_INT 0
30154: EQUAL
30155: AND
30156: IFFALSE 30211
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30158: LD_ADDR_VAR 0 5
30162: PUSH
30163: LD_EXP 65
30167: PUSH
30168: LD_VAR 0 2
30172: ARRAY
30173: PPUSH
30174: LD_VAR 0 3
30178: PPUSH
30179: CALL_OW 3
30183: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30184: LD_ADDR_EXP 65
30188: PUSH
30189: LD_EXP 65
30193: PPUSH
30194: LD_VAR 0 2
30198: PPUSH
30199: LD_VAR 0 5
30203: PPUSH
30204: CALL_OW 1
30208: ST_TO_ADDR
// continue ;
30209: GO 30055
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30211: LD_EXP 49
30215: PUSH
30216: LD_VAR 0 2
30220: ARRAY
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: CALL_OW 255
30230: PPUSH
30231: LD_EXP 65
30235: PUSH
30236: LD_VAR 0 2
30240: ARRAY
30241: PUSH
30242: LD_VAR 0 3
30246: ARRAY
30247: PUSH
30248: LD_INT 2
30250: ARRAY
30251: PPUSH
30252: LD_EXP 65
30256: PUSH
30257: LD_VAR 0 2
30261: ARRAY
30262: PUSH
30263: LD_VAR 0 3
30267: ARRAY
30268: PUSH
30269: LD_INT 3
30271: ARRAY
30272: PPUSH
30273: LD_INT 30
30275: PPUSH
30276: CALL 54480 0 4
30280: PUSH
30281: LD_INT 4
30283: ARRAY
30284: PUSH
30285: LD_INT 0
30287: EQUAL
30288: IFFALSE 30314
// begin target := mc_crates [ i ] [ j ] ;
30290: LD_ADDR_VAR 0 6
30294: PUSH
30295: LD_EXP 65
30299: PUSH
30300: LD_VAR 0 2
30304: ARRAY
30305: PUSH
30306: LD_VAR 0 3
30310: ARRAY
30311: ST_TO_ADDR
// break ;
30312: GO 30316
// end ; end ;
30314: GO 30055
30316: POP
30317: POP
// if not target then
30318: LD_VAR 0 6
30322: NOT
30323: IFFALSE 30327
// continue ;
30325: GO 29936
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30327: LD_ADDR_VAR 0 7
30331: PUSH
30332: LD_EXP 68
30336: PUSH
30337: LD_VAR 0 2
30341: ARRAY
30342: PPUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: LD_INT 58
30351: PUSH
30352: EMPTY
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 61
30361: PUSH
30362: EMPTY
30363: LIST
30364: PUSH
30365: LD_INT 33
30367: PUSH
30368: LD_INT 5
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 33
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 34
30397: PUSH
30398: LD_INT 32
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 34
30407: PUSH
30408: LD_INT 51
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 34
30417: PUSH
30418: LD_INT 12
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PPUSH
30435: CALL_OW 72
30439: ST_TO_ADDR
// if not cargo then
30440: LD_VAR 0 7
30444: NOT
30445: IFFALSE 31088
// begin if mc_crates_collector [ i ] < 5 then
30447: LD_EXP 66
30451: PUSH
30452: LD_VAR 0 2
30456: ARRAY
30457: PUSH
30458: LD_INT 5
30460: LESS
30461: IFFALSE 30827
// begin if mc_ape [ i ] then
30463: LD_EXP 78
30467: PUSH
30468: LD_VAR 0 2
30472: ARRAY
30473: IFFALSE 30520
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
30475: LD_ADDR_VAR 0 5
30479: PUSH
30480: LD_EXP 78
30484: PUSH
30485: LD_VAR 0 2
30489: ARRAY
30490: PPUSH
30491: LD_INT 25
30493: PUSH
30494: LD_INT 16
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 24
30503: PUSH
30504: LD_INT 750
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PPUSH
30515: CALL_OW 72
30519: ST_TO_ADDR
// if not tmp then
30520: LD_VAR 0 5
30524: NOT
30525: IFFALSE 30572
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
30527: LD_ADDR_VAR 0 5
30531: PUSH
30532: LD_EXP 49
30536: PUSH
30537: LD_VAR 0 2
30541: ARRAY
30542: PPUSH
30543: LD_INT 25
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 24
30555: PUSH
30556: LD_INT 750
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PPUSH
30567: CALL_OW 72
30571: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
30572: LD_EXP 78
30576: PUSH
30577: LD_VAR 0 2
30581: ARRAY
30582: PUSH
30583: LD_EXP 49
30587: PUSH
30588: LD_VAR 0 2
30592: ARRAY
30593: PPUSH
30594: LD_INT 25
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 24
30606: PUSH
30607: LD_INT 750
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PPUSH
30618: CALL_OW 72
30622: AND
30623: PUSH
30624: LD_VAR 0 5
30628: PUSH
30629: LD_INT 5
30631: LESS
30632: AND
30633: IFFALSE 30715
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
30635: LD_ADDR_VAR 0 3
30639: PUSH
30640: LD_EXP 49
30644: PUSH
30645: LD_VAR 0 2
30649: ARRAY
30650: PPUSH
30651: LD_INT 25
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 24
30663: PUSH
30664: LD_INT 750
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PPUSH
30675: CALL_OW 72
30679: PUSH
30680: FOR_IN
30681: IFFALSE 30713
// begin tmp := tmp union j ;
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: LD_VAR 0 5
30692: PUSH
30693: LD_VAR 0 3
30697: UNION
30698: ST_TO_ADDR
// if tmp >= 5 then
30699: LD_VAR 0 5
30703: PUSH
30704: LD_INT 5
30706: GREATEREQUAL
30707: IFFALSE 30711
// break ;
30709: GO 30713
// end ;
30711: GO 30680
30713: POP
30714: POP
// end ; if not tmp then
30715: LD_VAR 0 5
30719: NOT
30720: IFFALSE 30724
// continue ;
30722: GO 29936
// for j in tmp do
30724: LD_ADDR_VAR 0 3
30728: PUSH
30729: LD_VAR 0 5
30733: PUSH
30734: FOR_IN
30735: IFFALSE 30825
// if not GetTag ( j ) then
30737: LD_VAR 0 3
30741: PPUSH
30742: CALL_OW 110
30746: NOT
30747: IFFALSE 30823
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
30749: LD_ADDR_EXP 66
30753: PUSH
30754: LD_EXP 66
30758: PPUSH
30759: LD_VAR 0 2
30763: PUSH
30764: LD_EXP 66
30768: PUSH
30769: LD_VAR 0 2
30773: ARRAY
30774: PUSH
30775: LD_INT 1
30777: PLUS
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PPUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: CALL 53584 0 3
30792: ST_TO_ADDR
// SetTag ( j , 107 ) ;
30793: LD_VAR 0 3
30797: PPUSH
30798: LD_INT 107
30800: PPUSH
30801: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
30805: LD_EXP 66
30809: PUSH
30810: LD_VAR 0 2
30814: ARRAY
30815: PUSH
30816: LD_INT 5
30818: GREATEREQUAL
30819: IFFALSE 30823
// break ;
30821: GO 30825
// end ;
30823: GO 30734
30825: POP
30826: POP
// end ; if mc_crates_collector [ i ] and target then
30827: LD_EXP 66
30831: PUSH
30832: LD_VAR 0 2
30836: ARRAY
30837: PUSH
30838: LD_VAR 0 6
30842: AND
30843: IFFALSE 31086
// begin if mc_crates_collector [ i ] < target [ 1 ] then
30845: LD_EXP 66
30849: PUSH
30850: LD_VAR 0 2
30854: ARRAY
30855: PUSH
30856: LD_VAR 0 6
30860: PUSH
30861: LD_INT 1
30863: ARRAY
30864: LESS
30865: IFFALSE 30885
// tmp := mc_crates_collector [ i ] else
30867: LD_ADDR_VAR 0 5
30871: PUSH
30872: LD_EXP 66
30876: PUSH
30877: LD_VAR 0 2
30881: ARRAY
30882: ST_TO_ADDR
30883: GO 30899
// tmp := target [ 1 ] ;
30885: LD_ADDR_VAR 0 5
30889: PUSH
30890: LD_VAR 0 6
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: ST_TO_ADDR
// k := 0 ;
30899: LD_ADDR_VAR 0 4
30903: PUSH
30904: LD_INT 0
30906: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: LD_EXP 66
30916: PUSH
30917: LD_VAR 0 2
30921: ARRAY
30922: PUSH
30923: FOR_IN
30924: IFFALSE 31084
// begin k := k + 1 ;
30926: LD_ADDR_VAR 0 4
30930: PUSH
30931: LD_VAR 0 4
30935: PUSH
30936: LD_INT 1
30938: PLUS
30939: ST_TO_ADDR
// if k > tmp then
30940: LD_VAR 0 4
30944: PUSH
30945: LD_VAR 0 5
30949: GREATER
30950: IFFALSE 30954
// break ;
30952: GO 31084
// if not GetClass ( j ) in [ 2 , 16 ] then
30954: LD_VAR 0 3
30958: PPUSH
30959: CALL_OW 257
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: LD_INT 16
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: IN
30974: NOT
30975: IFFALSE 31028
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
30977: LD_ADDR_EXP 66
30981: PUSH
30982: LD_EXP 66
30986: PPUSH
30987: LD_VAR 0 2
30991: PPUSH
30992: LD_EXP 66
30996: PUSH
30997: LD_VAR 0 2
31001: ARRAY
31002: PUSH
31003: LD_VAR 0 3
31007: DIFF
31008: PPUSH
31009: CALL_OW 1
31013: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31014: LD_VAR 0 3
31018: PPUSH
31019: LD_INT 0
31021: PPUSH
31022: CALL_OW 109
// continue ;
31026: GO 30923
// end ; if IsInUnit ( j ) then
31028: LD_VAR 0 3
31032: PPUSH
31033: CALL_OW 310
31037: IFFALSE 31048
// ComExitBuilding ( j ) ;
31039: LD_VAR 0 3
31043: PPUSH
31044: CALL_OW 122
// wait ( 3 ) ;
31048: LD_INT 3
31050: PPUSH
31051: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31055: LD_VAR 0 3
31059: PPUSH
31060: LD_VAR 0 6
31064: PUSH
31065: LD_INT 2
31067: ARRAY
31068: PPUSH
31069: LD_VAR 0 6
31073: PUSH
31074: LD_INT 3
31076: ARRAY
31077: PPUSH
31078: CALL_OW 117
// end ;
31082: GO 30923
31084: POP
31085: POP
// end ; end else
31086: GO 31667
// begin for j in cargo do
31088: LD_ADDR_VAR 0 3
31092: PUSH
31093: LD_VAR 0 7
31097: PUSH
31098: FOR_IN
31099: IFFALSE 31665
// begin if GetTag ( j ) <> 0 then
31101: LD_VAR 0 3
31105: PPUSH
31106: CALL_OW 110
31110: PUSH
31111: LD_INT 0
31113: NONEQUAL
31114: IFFALSE 31118
// continue ;
31116: GO 31098
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31118: LD_VAR 0 3
31122: PPUSH
31123: CALL_OW 256
31127: PUSH
31128: LD_INT 1000
31130: LESS
31131: PUSH
31132: LD_VAR 0 3
31136: PPUSH
31137: LD_EXP 73
31141: PUSH
31142: LD_VAR 0 2
31146: ARRAY
31147: PPUSH
31148: CALL_OW 308
31152: NOT
31153: AND
31154: IFFALSE 31176
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31156: LD_VAR 0 3
31160: PPUSH
31161: LD_EXP 73
31165: PUSH
31166: LD_VAR 0 2
31170: ARRAY
31171: PPUSH
31172: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31176: LD_VAR 0 3
31180: PPUSH
31181: CALL_OW 256
31185: PUSH
31186: LD_INT 1000
31188: LESS
31189: PUSH
31190: LD_VAR 0 3
31194: PPUSH
31195: LD_EXP 73
31199: PUSH
31200: LD_VAR 0 2
31204: ARRAY
31205: PPUSH
31206: CALL_OW 308
31210: AND
31211: IFFALSE 31215
// continue ;
31213: GO 31098
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31215: LD_VAR 0 3
31219: PPUSH
31220: CALL_OW 262
31224: PUSH
31225: LD_INT 2
31227: EQUAL
31228: PUSH
31229: LD_VAR 0 3
31233: PPUSH
31234: CALL_OW 261
31238: PUSH
31239: LD_INT 15
31241: LESS
31242: AND
31243: IFFALSE 31247
// continue ;
31245: GO 31098
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31247: LD_VAR 0 3
31251: PPUSH
31252: CALL_OW 262
31256: PUSH
31257: LD_INT 1
31259: EQUAL
31260: PUSH
31261: LD_VAR 0 3
31265: PPUSH
31266: CALL_OW 261
31270: PUSH
31271: LD_INT 10
31273: LESS
31274: AND
31275: IFFALSE 31604
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31277: LD_ADDR_VAR 0 8
31281: PUSH
31282: LD_EXP 49
31286: PUSH
31287: LD_VAR 0 2
31291: ARRAY
31292: PPUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 30
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 72
31325: ST_TO_ADDR
// if not depot then
31326: LD_VAR 0 8
31330: NOT
31331: IFFALSE 31335
// continue ;
31333: GO 31098
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31335: LD_VAR 0 3
31339: PPUSH
31340: LD_VAR 0 8
31344: PPUSH
31345: LD_VAR 0 3
31349: PPUSH
31350: CALL_OW 74
31354: PPUSH
31355: CALL_OW 296
31359: PUSH
31360: LD_INT 6
31362: LESS
31363: IFFALSE 31379
// SetFuel ( j , 100 ) else
31365: LD_VAR 0 3
31369: PPUSH
31370: LD_INT 100
31372: PPUSH
31373: CALL_OW 240
31377: GO 31604
// if GetFuel ( j ) = 0 then
31379: LD_VAR 0 3
31383: PPUSH
31384: CALL_OW 261
31388: PUSH
31389: LD_INT 0
31391: EQUAL
31392: IFFALSE 31604
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31394: LD_ADDR_EXP 68
31398: PUSH
31399: LD_EXP 68
31403: PPUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: LD_EXP 68
31413: PUSH
31414: LD_VAR 0 2
31418: ARRAY
31419: PUSH
31420: LD_VAR 0 3
31424: DIFF
31425: PPUSH
31426: CALL_OW 1
31430: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
31431: LD_VAR 0 3
31435: PPUSH
31436: CALL_OW 263
31440: PUSH
31441: LD_INT 1
31443: EQUAL
31444: IFFALSE 31460
// ComExitVehicle ( IsInUnit ( j ) ) ;
31446: LD_VAR 0 3
31450: PPUSH
31451: CALL_OW 310
31455: PPUSH
31456: CALL_OW 121
// if GetControl ( j ) = control_remote then
31460: LD_VAR 0 3
31464: PPUSH
31465: CALL_OW 263
31469: PUSH
31470: LD_INT 2
31472: EQUAL
31473: IFFALSE 31484
// ComUnlink ( j ) ;
31475: LD_VAR 0 3
31479: PPUSH
31480: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
31484: LD_ADDR_VAR 0 9
31488: PUSH
31489: LD_VAR 0 2
31493: PPUSH
31494: LD_INT 3
31496: PPUSH
31497: CALL 40741 0 2
31501: ST_TO_ADDR
// if fac then
31502: LD_VAR 0 9
31506: IFFALSE 31602
// begin for k in fac do
31508: LD_ADDR_VAR 0 4
31512: PUSH
31513: LD_VAR 0 9
31517: PUSH
31518: FOR_IN
31519: IFFALSE 31600
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
31521: LD_ADDR_VAR 0 10
31525: PUSH
31526: LD_VAR 0 9
31530: PPUSH
31531: LD_VAR 0 3
31535: PPUSH
31536: CALL_OW 265
31540: PPUSH
31541: LD_VAR 0 3
31545: PPUSH
31546: CALL_OW 262
31550: PPUSH
31551: LD_VAR 0 3
31555: PPUSH
31556: CALL_OW 263
31560: PPUSH
31561: LD_VAR 0 3
31565: PPUSH
31566: CALL_OW 264
31570: PPUSH
31571: CALL 51116 0 5
31575: ST_TO_ADDR
// if components then
31576: LD_VAR 0 10
31580: IFFALSE 31598
// begin MC_InsertProduceList ( i , components ) ;
31582: LD_VAR 0 2
31586: PPUSH
31587: LD_VAR 0 10
31591: PPUSH
31592: CALL 40286 0 2
// break ;
31596: GO 31600
// end ; end ;
31598: GO 31518
31600: POP
31601: POP
// end ; continue ;
31602: GO 31098
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
31604: LD_VAR 0 3
31608: PPUSH
31609: LD_INT 1
31611: PPUSH
31612: CALL_OW 289
31616: PUSH
31617: LD_INT 100
31619: LESS
31620: PUSH
31621: LD_VAR 0 3
31625: PPUSH
31626: CALL_OW 314
31630: NOT
31631: AND
31632: IFFALSE 31661
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31634: LD_VAR 0 3
31638: PPUSH
31639: LD_VAR 0 6
31643: PUSH
31644: LD_INT 2
31646: ARRAY
31647: PPUSH
31648: LD_VAR 0 6
31652: PUSH
31653: LD_INT 3
31655: ARRAY
31656: PPUSH
31657: CALL_OW 117
// break ;
31661: GO 31665
// end ;
31663: GO 31098
31665: POP
31666: POP
// end ; end ;
31667: GO 29936
31669: POP
31670: POP
// end ;
31671: LD_VAR 0 1
31675: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
31676: LD_INT 0
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
// if not mc_bases then
31682: LD_EXP 49
31686: NOT
31687: IFFALSE 31691
// exit ;
31689: GO 31852
// for i = 1 to mc_bases do
31691: LD_ADDR_VAR 0 2
31695: PUSH
31696: DOUBLE
31697: LD_INT 1
31699: DEC
31700: ST_TO_ADDR
31701: LD_EXP 49
31705: PUSH
31706: FOR_TO
31707: IFFALSE 31850
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
31709: LD_ADDR_VAR 0 4
31713: PUSH
31714: LD_EXP 68
31718: PUSH
31719: LD_VAR 0 2
31723: ARRAY
31724: PUSH
31725: LD_EXP 71
31729: PUSH
31730: LD_VAR 0 2
31734: ARRAY
31735: UNION
31736: PPUSH
31737: LD_INT 33
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PPUSH
31747: CALL_OW 72
31751: ST_TO_ADDR
// if tmp then
31752: LD_VAR 0 4
31756: IFFALSE 31848
// for j in tmp do
31758: LD_ADDR_VAR 0 3
31762: PUSH
31763: LD_VAR 0 4
31767: PUSH
31768: FOR_IN
31769: IFFALSE 31846
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
31771: LD_VAR 0 3
31775: PPUSH
31776: CALL_OW 312
31780: NOT
31781: PUSH
31782: LD_VAR 0 3
31786: PPUSH
31787: CALL_OW 256
31791: PUSH
31792: LD_INT 250
31794: GREATEREQUAL
31795: AND
31796: IFFALSE 31809
// Connect ( j ) else
31798: LD_VAR 0 3
31802: PPUSH
31803: CALL 56517 0 1
31807: GO 31844
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
31809: LD_VAR 0 3
31813: PPUSH
31814: CALL_OW 256
31818: PUSH
31819: LD_INT 250
31821: LESS
31822: PUSH
31823: LD_VAR 0 3
31827: PPUSH
31828: CALL_OW 312
31832: AND
31833: IFFALSE 31844
// ComUnlink ( j ) ;
31835: LD_VAR 0 3
31839: PPUSH
31840: CALL_OW 136
31844: GO 31768
31846: POP
31847: POP
// end ;
31848: GO 31706
31850: POP
31851: POP
// end ;
31852: LD_VAR 0 1
31856: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
31857: LD_INT 0
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
31863: PPUSH
// if not mc_bases then
31864: LD_EXP 49
31868: NOT
31869: IFFALSE 31873
// exit ;
31871: GO 32318
// for i = 1 to mc_bases do
31873: LD_ADDR_VAR 0 2
31877: PUSH
31878: DOUBLE
31879: LD_INT 1
31881: DEC
31882: ST_TO_ADDR
31883: LD_EXP 49
31887: PUSH
31888: FOR_TO
31889: IFFALSE 32316
// begin if not mc_produce [ i ] then
31891: LD_EXP 70
31895: PUSH
31896: LD_VAR 0 2
31900: ARRAY
31901: NOT
31902: IFFALSE 31906
// continue ;
31904: GO 31888
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31906: LD_ADDR_VAR 0 5
31910: PUSH
31911: LD_EXP 49
31915: PUSH
31916: LD_VAR 0 2
31920: ARRAY
31921: PPUSH
31922: LD_INT 30
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PPUSH
31932: CALL_OW 72
31936: ST_TO_ADDR
// if not fac then
31937: LD_VAR 0 5
31941: NOT
31942: IFFALSE 31946
// continue ;
31944: GO 31888
// for j in fac do
31946: LD_ADDR_VAR 0 3
31950: PUSH
31951: LD_VAR 0 5
31955: PUSH
31956: FOR_IN
31957: IFFALSE 32312
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
31959: LD_VAR 0 3
31963: PPUSH
31964: CALL_OW 461
31968: PUSH
31969: LD_INT 2
31971: NONEQUAL
31972: PUSH
31973: LD_VAR 0 3
31977: PPUSH
31978: LD_INT 15
31980: PPUSH
31981: CALL 56177 0 2
31985: PUSH
31986: LD_INT 4
31988: ARRAY
31989: OR
31990: IFFALSE 31994
// continue ;
31992: GO 31956
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
31994: LD_VAR 0 3
31998: PPUSH
31999: LD_EXP 70
32003: PUSH
32004: LD_VAR 0 2
32008: ARRAY
32009: PUSH
32010: LD_INT 1
32012: ARRAY
32013: PUSH
32014: LD_INT 1
32016: ARRAY
32017: PPUSH
32018: LD_EXP 70
32022: PUSH
32023: LD_VAR 0 2
32027: ARRAY
32028: PUSH
32029: LD_INT 1
32031: ARRAY
32032: PUSH
32033: LD_INT 2
32035: ARRAY
32036: PPUSH
32037: LD_EXP 70
32041: PUSH
32042: LD_VAR 0 2
32046: ARRAY
32047: PUSH
32048: LD_INT 1
32050: ARRAY
32051: PUSH
32052: LD_INT 3
32054: ARRAY
32055: PPUSH
32056: LD_EXP 70
32060: PUSH
32061: LD_VAR 0 2
32065: ARRAY
32066: PUSH
32067: LD_INT 1
32069: ARRAY
32070: PUSH
32071: LD_INT 4
32073: ARRAY
32074: PPUSH
32075: CALL_OW 448
32079: PUSH
32080: LD_VAR 0 3
32084: PPUSH
32085: LD_EXP 70
32089: PUSH
32090: LD_VAR 0 2
32094: ARRAY
32095: PUSH
32096: LD_INT 1
32098: ARRAY
32099: PUSH
32100: LD_INT 1
32102: ARRAY
32103: PUSH
32104: LD_EXP 70
32108: PUSH
32109: LD_VAR 0 2
32113: ARRAY
32114: PUSH
32115: LD_INT 1
32117: ARRAY
32118: PUSH
32119: LD_INT 2
32121: ARRAY
32122: PUSH
32123: LD_EXP 70
32127: PUSH
32128: LD_VAR 0 2
32132: ARRAY
32133: PUSH
32134: LD_INT 1
32136: ARRAY
32137: PUSH
32138: LD_INT 3
32140: ARRAY
32141: PUSH
32142: LD_EXP 70
32146: PUSH
32147: LD_VAR 0 2
32151: ARRAY
32152: PUSH
32153: LD_INT 1
32155: ARRAY
32156: PUSH
32157: LD_INT 4
32159: ARRAY
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL 59848 0 2
32171: AND
32172: IFFALSE 32310
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32174: LD_VAR 0 3
32178: PPUSH
32179: LD_EXP 70
32183: PUSH
32184: LD_VAR 0 2
32188: ARRAY
32189: PUSH
32190: LD_INT 1
32192: ARRAY
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: PPUSH
32198: LD_EXP 70
32202: PUSH
32203: LD_VAR 0 2
32207: ARRAY
32208: PUSH
32209: LD_INT 1
32211: ARRAY
32212: PUSH
32213: LD_INT 2
32215: ARRAY
32216: PPUSH
32217: LD_EXP 70
32221: PUSH
32222: LD_VAR 0 2
32226: ARRAY
32227: PUSH
32228: LD_INT 1
32230: ARRAY
32231: PUSH
32232: LD_INT 3
32234: ARRAY
32235: PPUSH
32236: LD_EXP 70
32240: PUSH
32241: LD_VAR 0 2
32245: ARRAY
32246: PUSH
32247: LD_INT 1
32249: ARRAY
32250: PUSH
32251: LD_INT 4
32253: ARRAY
32254: PPUSH
32255: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32259: LD_ADDR_VAR 0 4
32263: PUSH
32264: LD_EXP 70
32268: PUSH
32269: LD_VAR 0 2
32273: ARRAY
32274: PPUSH
32275: LD_INT 1
32277: PPUSH
32278: CALL_OW 3
32282: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32283: LD_ADDR_EXP 70
32287: PUSH
32288: LD_EXP 70
32292: PPUSH
32293: LD_VAR 0 2
32297: PPUSH
32298: LD_VAR 0 4
32302: PPUSH
32303: CALL_OW 1
32307: ST_TO_ADDR
// break ;
32308: GO 32312
// end ; end ;
32310: GO 31956
32312: POP
32313: POP
// end ;
32314: GO 31888
32316: POP
32317: POP
// end ;
32318: LD_VAR 0 1
32322: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32323: LD_INT 0
32325: PPUSH
32326: PPUSH
32327: PPUSH
// if not mc_bases then
32328: LD_EXP 49
32332: NOT
32333: IFFALSE 32337
// exit ;
32335: GO 32426
// for i = 1 to mc_bases do
32337: LD_ADDR_VAR 0 2
32341: PUSH
32342: DOUBLE
32343: LD_INT 1
32345: DEC
32346: ST_TO_ADDR
32347: LD_EXP 49
32351: PUSH
32352: FOR_TO
32353: IFFALSE 32424
// begin if mc_attack [ i ] then
32355: LD_EXP 69
32359: PUSH
32360: LD_VAR 0 2
32364: ARRAY
32365: IFFALSE 32422
// begin tmp := mc_attack [ i ] [ 1 ] ;
32367: LD_ADDR_VAR 0 3
32371: PUSH
32372: LD_EXP 69
32376: PUSH
32377: LD_VAR 0 2
32381: ARRAY
32382: PUSH
32383: LD_INT 1
32385: ARRAY
32386: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32387: LD_ADDR_EXP 69
32391: PUSH
32392: LD_EXP 69
32396: PPUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: EMPTY
32403: PPUSH
32404: CALL_OW 1
32408: ST_TO_ADDR
// Attack ( tmp ) ;
32409: LD_VAR 0 3
32413: PPUSH
32414: CALL 82061 0 1
// exit ;
32418: POP
32419: POP
32420: GO 32426
// end ; end ;
32422: GO 32352
32424: POP
32425: POP
// end ;
32426: LD_VAR 0 1
32430: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
32431: LD_INT 0
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
// if not mc_bases then
32440: LD_EXP 49
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 33031
// for i = 1 to mc_bases do
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: DOUBLE
32455: LD_INT 1
32457: DEC
32458: ST_TO_ADDR
32459: LD_EXP 49
32463: PUSH
32464: FOR_TO
32465: IFFALSE 33029
// begin if not mc_bases [ i ] then
32467: LD_EXP 49
32471: PUSH
32472: LD_VAR 0 2
32476: ARRAY
32477: NOT
32478: IFFALSE 32482
// continue ;
32480: GO 32464
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
32482: LD_ADDR_VAR 0 7
32486: PUSH
32487: LD_EXP 49
32491: PUSH
32492: LD_VAR 0 2
32496: ARRAY
32497: PUSH
32498: LD_INT 1
32500: ARRAY
32501: PPUSH
32502: CALL 50420 0 1
32506: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
32507: LD_ADDR_EXP 72
32511: PUSH
32512: LD_EXP 72
32516: PPUSH
32517: LD_VAR 0 2
32521: PPUSH
32522: LD_EXP 49
32526: PUSH
32527: LD_VAR 0 2
32531: ARRAY
32532: PUSH
32533: LD_INT 1
32535: ARRAY
32536: PPUSH
32537: CALL_OW 255
32541: PPUSH
32542: LD_EXP 74
32546: PUSH
32547: LD_VAR 0 2
32551: ARRAY
32552: PPUSH
32553: CALL 48123 0 2
32557: PPUSH
32558: CALL_OW 1
32562: ST_TO_ADDR
// if not mc_scan [ i ] then
32563: LD_EXP 72
32567: PUSH
32568: LD_VAR 0 2
32572: ARRAY
32573: NOT
32574: IFFALSE 32729
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32576: LD_ADDR_VAR 0 4
32580: PUSH
32581: LD_EXP 49
32585: PUSH
32586: LD_VAR 0 2
32590: ARRAY
32591: PPUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 25
32597: PUSH
32598: LD_INT 5
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 25
32607: PUSH
32608: LD_INT 8
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 25
32617: PUSH
32618: LD_INT 9
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: PPUSH
32631: CALL_OW 72
32635: ST_TO_ADDR
// if not tmp then
32636: LD_VAR 0 4
32640: NOT
32641: IFFALSE 32645
// continue ;
32643: GO 32464
// for j in tmp do
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_VAR 0 4
32654: PUSH
32655: FOR_IN
32656: IFFALSE 32727
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
32658: LD_VAR 0 3
32662: PPUSH
32663: CALL_OW 310
32667: PPUSH
32668: CALL_OW 266
32672: PUSH
32673: LD_INT 5
32675: EQUAL
32676: PUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: CALL_OW 257
32686: PUSH
32687: LD_INT 1
32689: EQUAL
32690: AND
32691: PUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: CALL_OW 459
32701: NOT
32702: AND
32703: PUSH
32704: LD_VAR 0 7
32708: AND
32709: IFFALSE 32725
// ComChangeProfession ( j , class ) ;
32711: LD_VAR 0 3
32715: PPUSH
32716: LD_VAR 0 7
32720: PPUSH
32721: CALL_OW 123
32725: GO 32655
32727: POP
32728: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
32729: LD_EXP 72
32733: PUSH
32734: LD_VAR 0 2
32738: ARRAY
32739: PUSH
32740: LD_EXP 71
32744: PUSH
32745: LD_VAR 0 2
32749: ARRAY
32750: NOT
32751: AND
32752: PUSH
32753: LD_EXP 49
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: PPUSH
32764: LD_INT 30
32766: PUSH
32767: LD_INT 32
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PPUSH
32774: CALL_OW 72
32778: NOT
32779: AND
32780: PUSH
32781: LD_EXP 49
32785: PUSH
32786: LD_VAR 0 2
32790: ARRAY
32791: PPUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 30
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 30
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: PPUSH
32820: CALL_OW 72
32824: NOT
32825: AND
32826: IFFALSE 32958
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32828: LD_ADDR_VAR 0 4
32832: PUSH
32833: LD_EXP 49
32837: PUSH
32838: LD_VAR 0 2
32842: ARRAY
32843: PPUSH
32844: LD_INT 2
32846: PUSH
32847: LD_INT 25
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 25
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 25
32869: PUSH
32870: LD_INT 8
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 25
32879: PUSH
32880: LD_INT 9
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: PPUSH
32894: CALL_OW 72
32898: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
32899: LD_ADDR_VAR 0 4
32903: PUSH
32904: LD_VAR 0 4
32908: PUSH
32909: LD_VAR 0 4
32913: PPUSH
32914: LD_INT 18
32916: PPUSH
32917: CALL 86844 0 2
32921: DIFF
32922: ST_TO_ADDR
// if tmp then
32923: LD_VAR 0 4
32927: IFFALSE 32958
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
32929: LD_VAR 0 2
32933: PPUSH
32934: LD_VAR 0 4
32938: PPUSH
32939: LD_EXP 74
32943: PUSH
32944: LD_VAR 0 2
32948: ARRAY
32949: PPUSH
32950: CALL 48158 0 3
// exit ;
32954: POP
32955: POP
32956: GO 33031
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
32958: LD_EXP 72
32962: PUSH
32963: LD_VAR 0 2
32967: ARRAY
32968: PUSH
32969: LD_EXP 71
32973: PUSH
32974: LD_VAR 0 2
32978: ARRAY
32979: AND
32980: IFFALSE 33027
// begin tmp := mc_defender [ i ] ;
32982: LD_ADDR_VAR 0 4
32986: PUSH
32987: LD_EXP 71
32991: PUSH
32992: LD_VAR 0 2
32996: ARRAY
32997: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
32998: LD_VAR 0 2
33002: PPUSH
33003: LD_VAR 0 4
33007: PPUSH
33008: LD_EXP 72
33012: PUSH
33013: LD_VAR 0 2
33017: ARRAY
33018: PPUSH
33019: CALL 48719 0 3
// exit ;
33023: POP
33024: POP
33025: GO 33031
// end ; end ;
33027: GO 32464
33029: POP
33030: POP
// end ;
33031: LD_VAR 0 1
33035: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33036: LD_INT 0
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
// if not mc_bases then
33049: LD_EXP 49
33053: NOT
33054: IFFALSE 33058
// exit ;
33056: GO 34145
// for i = 1 to mc_bases do
33058: LD_ADDR_VAR 0 2
33062: PUSH
33063: DOUBLE
33064: LD_INT 1
33066: DEC
33067: ST_TO_ADDR
33068: LD_EXP 49
33072: PUSH
33073: FOR_TO
33074: IFFALSE 34143
// begin tmp := mc_lab [ i ] ;
33076: LD_ADDR_VAR 0 6
33080: PUSH
33081: LD_EXP 82
33085: PUSH
33086: LD_VAR 0 2
33090: ARRAY
33091: ST_TO_ADDR
// if not tmp then
33092: LD_VAR 0 6
33096: NOT
33097: IFFALSE 33101
// continue ;
33099: GO 33073
// idle_lab := 0 ;
33101: LD_ADDR_VAR 0 11
33105: PUSH
33106: LD_INT 0
33108: ST_TO_ADDR
// for j in tmp do
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_VAR 0 6
33118: PUSH
33119: FOR_IN
33120: IFFALSE 34139
// begin researching := false ;
33122: LD_ADDR_VAR 0 10
33126: PUSH
33127: LD_INT 0
33129: ST_TO_ADDR
// side := GetSide ( j ) ;
33130: LD_ADDR_VAR 0 4
33134: PUSH
33135: LD_VAR 0 3
33139: PPUSH
33140: CALL_OW 255
33144: ST_TO_ADDR
// if not mc_tech [ side ] then
33145: LD_EXP 76
33149: PUSH
33150: LD_VAR 0 4
33154: ARRAY
33155: NOT
33156: IFFALSE 33160
// continue ;
33158: GO 33119
// if BuildingStatus ( j ) = bs_idle then
33160: LD_VAR 0 3
33164: PPUSH
33165: CALL_OW 461
33169: PUSH
33170: LD_INT 2
33172: EQUAL
33173: IFFALSE 33361
// begin if idle_lab and UnitsInside ( j ) < 6 then
33175: LD_VAR 0 11
33179: PUSH
33180: LD_VAR 0 3
33184: PPUSH
33185: CALL_OW 313
33189: PUSH
33190: LD_INT 6
33192: LESS
33193: AND
33194: IFFALSE 33265
// begin tmp2 := UnitsInside ( idle_lab ) ;
33196: LD_ADDR_VAR 0 9
33200: PUSH
33201: LD_VAR 0 11
33205: PPUSH
33206: CALL_OW 313
33210: ST_TO_ADDR
// if tmp2 then
33211: LD_VAR 0 9
33215: IFFALSE 33257
// for x in tmp2 do
33217: LD_ADDR_VAR 0 7
33221: PUSH
33222: LD_VAR 0 9
33226: PUSH
33227: FOR_IN
33228: IFFALSE 33255
// begin ComExitBuilding ( x ) ;
33230: LD_VAR 0 7
33234: PPUSH
33235: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33239: LD_VAR 0 7
33243: PPUSH
33244: LD_VAR 0 3
33248: PPUSH
33249: CALL_OW 180
// end ;
33253: GO 33227
33255: POP
33256: POP
// idle_lab := 0 ;
33257: LD_ADDR_VAR 0 11
33261: PUSH
33262: LD_INT 0
33264: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33265: LD_ADDR_VAR 0 5
33269: PUSH
33270: LD_EXP 76
33274: PUSH
33275: LD_VAR 0 4
33279: ARRAY
33280: PUSH
33281: FOR_IN
33282: IFFALSE 33342
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33284: LD_VAR 0 3
33288: PPUSH
33289: LD_VAR 0 5
33293: PPUSH
33294: CALL_OW 430
33298: PUSH
33299: LD_VAR 0 4
33303: PPUSH
33304: LD_VAR 0 5
33308: PPUSH
33309: CALL 47228 0 2
33313: AND
33314: IFFALSE 33340
// begin researching := true ;
33316: LD_ADDR_VAR 0 10
33320: PUSH
33321: LD_INT 1
33323: ST_TO_ADDR
// ComResearch ( j , t ) ;
33324: LD_VAR 0 3
33328: PPUSH
33329: LD_VAR 0 5
33333: PPUSH
33334: CALL_OW 124
// break ;
33338: GO 33342
// end ;
33340: GO 33281
33342: POP
33343: POP
// if not researching then
33344: LD_VAR 0 10
33348: NOT
33349: IFFALSE 33361
// idle_lab := j ;
33351: LD_ADDR_VAR 0 11
33355: PUSH
33356: LD_VAR 0 3
33360: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33361: LD_VAR 0 3
33365: PPUSH
33366: CALL_OW 461
33370: PUSH
33371: LD_INT 10
33373: EQUAL
33374: IFFALSE 33962
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33376: LD_EXP 78
33380: PUSH
33381: LD_VAR 0 2
33385: ARRAY
33386: NOT
33387: PUSH
33388: LD_EXP 79
33392: PUSH
33393: LD_VAR 0 2
33397: ARRAY
33398: NOT
33399: AND
33400: PUSH
33401: LD_EXP 76
33405: PUSH
33406: LD_VAR 0 4
33410: ARRAY
33411: PUSH
33412: LD_INT 1
33414: GREATER
33415: AND
33416: IFFALSE 33547
// begin ComCancel ( j ) ;
33418: LD_VAR 0 3
33422: PPUSH
33423: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
33427: LD_ADDR_EXP 76
33431: PUSH
33432: LD_EXP 76
33436: PPUSH
33437: LD_VAR 0 4
33441: PPUSH
33442: LD_EXP 76
33446: PUSH
33447: LD_VAR 0 4
33451: ARRAY
33452: PPUSH
33453: LD_EXP 76
33457: PUSH
33458: LD_VAR 0 4
33462: ARRAY
33463: PUSH
33464: LD_INT 1
33466: MINUS
33467: PPUSH
33468: LD_EXP 76
33472: PUSH
33473: LD_VAR 0 4
33477: ARRAY
33478: PPUSH
33479: LD_INT 0
33481: PPUSH
33482: CALL 53002 0 4
33486: PPUSH
33487: CALL_OW 1
33491: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
33492: LD_ADDR_EXP 76
33496: PUSH
33497: LD_EXP 76
33501: PPUSH
33502: LD_VAR 0 4
33506: PPUSH
33507: LD_EXP 76
33511: PUSH
33512: LD_VAR 0 4
33516: ARRAY
33517: PPUSH
33518: LD_EXP 76
33522: PUSH
33523: LD_VAR 0 4
33527: ARRAY
33528: PPUSH
33529: LD_INT 1
33531: PPUSH
33532: LD_INT 0
33534: PPUSH
33535: CALL 53002 0 4
33539: PPUSH
33540: CALL_OW 1
33544: ST_TO_ADDR
// continue ;
33545: GO 33119
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
33547: LD_EXP 78
33551: PUSH
33552: LD_VAR 0 2
33556: ARRAY
33557: PUSH
33558: LD_EXP 79
33562: PUSH
33563: LD_VAR 0 2
33567: ARRAY
33568: NOT
33569: AND
33570: IFFALSE 33697
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
33572: LD_ADDR_EXP 79
33576: PUSH
33577: LD_EXP 79
33581: PPUSH
33582: LD_VAR 0 2
33586: PUSH
33587: LD_EXP 79
33591: PUSH
33592: LD_VAR 0 2
33596: ARRAY
33597: PUSH
33598: LD_INT 1
33600: PLUS
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PPUSH
33606: LD_EXP 78
33610: PUSH
33611: LD_VAR 0 2
33615: ARRAY
33616: PUSH
33617: LD_INT 1
33619: ARRAY
33620: PPUSH
33621: CALL 53584 0 3
33625: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
33626: LD_EXP 78
33630: PUSH
33631: LD_VAR 0 2
33635: ARRAY
33636: PUSH
33637: LD_INT 1
33639: ARRAY
33640: PPUSH
33641: LD_INT 112
33643: PPUSH
33644: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
33648: LD_ADDR_VAR 0 9
33652: PUSH
33653: LD_EXP 78
33657: PUSH
33658: LD_VAR 0 2
33662: ARRAY
33663: PPUSH
33664: LD_INT 1
33666: PPUSH
33667: CALL_OW 3
33671: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
33672: LD_ADDR_EXP 78
33676: PUSH
33677: LD_EXP 78
33681: PPUSH
33682: LD_VAR 0 2
33686: PPUSH
33687: LD_VAR 0 9
33691: PPUSH
33692: CALL_OW 1
33696: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
33697: LD_EXP 78
33701: PUSH
33702: LD_VAR 0 2
33706: ARRAY
33707: PUSH
33708: LD_EXP 79
33712: PUSH
33713: LD_VAR 0 2
33717: ARRAY
33718: AND
33719: PUSH
33720: LD_EXP 79
33724: PUSH
33725: LD_VAR 0 2
33729: ARRAY
33730: PUSH
33731: LD_INT 1
33733: ARRAY
33734: PPUSH
33735: CALL_OW 310
33739: NOT
33740: AND
33741: PUSH
33742: LD_VAR 0 3
33746: PPUSH
33747: CALL_OW 313
33751: PUSH
33752: LD_INT 6
33754: EQUAL
33755: AND
33756: IFFALSE 33812
// begin tmp2 := UnitsInside ( j ) ;
33758: LD_ADDR_VAR 0 9
33762: PUSH
33763: LD_VAR 0 3
33767: PPUSH
33768: CALL_OW 313
33772: ST_TO_ADDR
// if tmp2 = 6 then
33773: LD_VAR 0 9
33777: PUSH
33778: LD_INT 6
33780: EQUAL
33781: IFFALSE 33812
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
33783: LD_VAR 0 9
33787: PUSH
33788: LD_INT 1
33790: ARRAY
33791: PPUSH
33792: LD_INT 112
33794: PPUSH
33795: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
33799: LD_VAR 0 9
33803: PUSH
33804: LD_INT 1
33806: ARRAY
33807: PPUSH
33808: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
33812: LD_EXP 79
33816: PUSH
33817: LD_VAR 0 2
33821: ARRAY
33822: PUSH
33823: LD_EXP 79
33827: PUSH
33828: LD_VAR 0 2
33832: ARRAY
33833: PUSH
33834: LD_INT 1
33836: ARRAY
33837: PPUSH
33838: CALL_OW 314
33842: NOT
33843: AND
33844: PUSH
33845: LD_EXP 79
33849: PUSH
33850: LD_VAR 0 2
33854: ARRAY
33855: PUSH
33856: LD_INT 1
33858: ARRAY
33859: PPUSH
33860: CALL_OW 310
33864: NOT
33865: AND
33866: IFFALSE 33892
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
33868: LD_EXP 79
33872: PUSH
33873: LD_VAR 0 2
33877: ARRAY
33878: PUSH
33879: LD_INT 1
33881: ARRAY
33882: PPUSH
33883: LD_VAR 0 3
33887: PPUSH
33888: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
33892: LD_EXP 79
33896: PUSH
33897: LD_VAR 0 2
33901: ARRAY
33902: PUSH
33903: LD_INT 1
33905: ARRAY
33906: PPUSH
33907: CALL_OW 310
33911: PUSH
33912: LD_EXP 79
33916: PUSH
33917: LD_VAR 0 2
33921: ARRAY
33922: PUSH
33923: LD_INT 1
33925: ARRAY
33926: PPUSH
33927: CALL_OW 310
33931: PPUSH
33932: CALL_OW 461
33936: PUSH
33937: LD_INT 3
33939: NONEQUAL
33940: AND
33941: IFFALSE 33962
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
33943: LD_EXP 79
33947: PUSH
33948: LD_VAR 0 2
33952: ARRAY
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: PPUSH
33958: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
33962: LD_VAR 0 3
33966: PPUSH
33967: CALL_OW 461
33971: PUSH
33972: LD_INT 6
33974: EQUAL
33975: PUSH
33976: LD_VAR 0 6
33980: PUSH
33981: LD_INT 1
33983: GREATER
33984: AND
33985: IFFALSE 34137
// begin sci := [ ] ;
33987: LD_ADDR_VAR 0 8
33991: PUSH
33992: EMPTY
33993: ST_TO_ADDR
// for x in ( tmp diff j ) do
33994: LD_ADDR_VAR 0 7
33998: PUSH
33999: LD_VAR 0 6
34003: PUSH
34004: LD_VAR 0 3
34008: DIFF
34009: PUSH
34010: FOR_IN
34011: IFFALSE 34063
// begin if sci = 6 then
34013: LD_VAR 0 8
34017: PUSH
34018: LD_INT 6
34020: EQUAL
34021: IFFALSE 34025
// break ;
34023: GO 34063
// if BuildingStatus ( x ) = bs_idle then
34025: LD_VAR 0 7
34029: PPUSH
34030: CALL_OW 461
34034: PUSH
34035: LD_INT 2
34037: EQUAL
34038: IFFALSE 34061
// sci := sci ^ UnitsInside ( x ) ;
34040: LD_ADDR_VAR 0 8
34044: PUSH
34045: LD_VAR 0 8
34049: PUSH
34050: LD_VAR 0 7
34054: PPUSH
34055: CALL_OW 313
34059: ADD
34060: ST_TO_ADDR
// end ;
34061: GO 34010
34063: POP
34064: POP
// if not sci then
34065: LD_VAR 0 8
34069: NOT
34070: IFFALSE 34074
// continue ;
34072: GO 33119
// for x in sci do
34074: LD_ADDR_VAR 0 7
34078: PUSH
34079: LD_VAR 0 8
34083: PUSH
34084: FOR_IN
34085: IFFALSE 34135
// if IsInUnit ( x ) and not HasTask ( x ) then
34087: LD_VAR 0 7
34091: PPUSH
34092: CALL_OW 310
34096: PUSH
34097: LD_VAR 0 7
34101: PPUSH
34102: CALL_OW 314
34106: NOT
34107: AND
34108: IFFALSE 34133
// begin ComExitBuilding ( x ) ;
34110: LD_VAR 0 7
34114: PPUSH
34115: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
34119: LD_VAR 0 7
34123: PPUSH
34124: LD_VAR 0 3
34128: PPUSH
34129: CALL_OW 180
// end ;
34133: GO 34084
34135: POP
34136: POP
// end ; end ;
34137: GO 33119
34139: POP
34140: POP
// end ;
34141: GO 33073
34143: POP
34144: POP
// end ;
34145: LD_VAR 0 1
34149: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
// if not mc_bases then
34154: LD_EXP 49
34158: NOT
34159: IFFALSE 34163
// exit ;
34161: GO 34244
// for i = 1 to mc_bases do
34163: LD_ADDR_VAR 0 2
34167: PUSH
34168: DOUBLE
34169: LD_INT 1
34171: DEC
34172: ST_TO_ADDR
34173: LD_EXP 49
34177: PUSH
34178: FOR_TO
34179: IFFALSE 34242
// if mc_mines [ i ] and mc_miners [ i ] then
34181: LD_EXP 62
34185: PUSH
34186: LD_VAR 0 2
34190: ARRAY
34191: PUSH
34192: LD_EXP 63
34196: PUSH
34197: LD_VAR 0 2
34201: ARRAY
34202: AND
34203: IFFALSE 34240
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34205: LD_EXP 63
34209: PUSH
34210: LD_VAR 0 2
34214: ARRAY
34215: PUSH
34216: LD_INT 1
34218: ARRAY
34219: PPUSH
34220: CALL_OW 255
34224: PPUSH
34225: LD_EXP 62
34229: PUSH
34230: LD_VAR 0 2
34234: ARRAY
34235: PPUSH
34236: CALL 50573 0 2
34240: GO 34178
34242: POP
34243: POP
// end ;
34244: LD_VAR 0 1
34248: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34249: LD_INT 0
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
// if not mc_bases or not mc_parking then
34259: LD_EXP 49
34263: NOT
34264: PUSH
34265: LD_EXP 73
34269: NOT
34270: OR
34271: IFFALSE 34275
// exit ;
34273: GO 34974
// for i = 1 to mc_bases do
34275: LD_ADDR_VAR 0 2
34279: PUSH
34280: DOUBLE
34281: LD_INT 1
34283: DEC
34284: ST_TO_ADDR
34285: LD_EXP 49
34289: PUSH
34290: FOR_TO
34291: IFFALSE 34972
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34293: LD_EXP 49
34297: PUSH
34298: LD_VAR 0 2
34302: ARRAY
34303: NOT
34304: PUSH
34305: LD_EXP 73
34309: PUSH
34310: LD_VAR 0 2
34314: ARRAY
34315: NOT
34316: OR
34317: IFFALSE 34321
// continue ;
34319: GO 34290
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34321: LD_ADDR_VAR 0 5
34325: PUSH
34326: LD_EXP 49
34330: PUSH
34331: LD_VAR 0 2
34335: ARRAY
34336: PUSH
34337: LD_INT 1
34339: ARRAY
34340: PPUSH
34341: CALL_OW 255
34345: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34346: LD_ADDR_VAR 0 6
34350: PUSH
34351: LD_EXP 49
34355: PUSH
34356: LD_VAR 0 2
34360: ARRAY
34361: PPUSH
34362: LD_INT 30
34364: PUSH
34365: LD_INT 3
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PPUSH
34372: CALL_OW 72
34376: ST_TO_ADDR
// if not fac then
34377: LD_VAR 0 6
34381: NOT
34382: IFFALSE 34433
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34384: LD_ADDR_VAR 0 6
34388: PUSH
34389: LD_EXP 49
34393: PUSH
34394: LD_VAR 0 2
34398: ARRAY
34399: PPUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 30
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 30
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: PPUSH
34428: CALL_OW 72
34432: ST_TO_ADDR
// if not fac then
34433: LD_VAR 0 6
34437: NOT
34438: IFFALSE 34442
// continue ;
34440: GO 34290
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34442: LD_ADDR_VAR 0 7
34446: PUSH
34447: LD_EXP 73
34451: PUSH
34452: LD_VAR 0 2
34456: ARRAY
34457: PPUSH
34458: LD_INT 22
34460: PUSH
34461: LD_VAR 0 5
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 21
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 24
34485: PUSH
34486: LD_INT 1000
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: PPUSH
34502: CALL_OW 70
34506: ST_TO_ADDR
// for j in fac do
34507: LD_ADDR_VAR 0 3
34511: PUSH
34512: LD_VAR 0 6
34516: PUSH
34517: FOR_IN
34518: IFFALSE 34599
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34520: LD_ADDR_VAR 0 7
34524: PUSH
34525: LD_VAR 0 7
34529: PUSH
34530: LD_INT 22
34532: PUSH
34533: LD_VAR 0 5
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 91
34544: PUSH
34545: LD_VAR 0 3
34549: PUSH
34550: LD_INT 15
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 21
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: LD_INT 24
34573: PUSH
34574: LD_INT 1000
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: PPUSH
34591: CALL_OW 69
34595: UNION
34596: ST_TO_ADDR
34597: GO 34517
34599: POP
34600: POP
// if not vehs then
34601: LD_VAR 0 7
34605: NOT
34606: IFFALSE 34632
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
34608: LD_ADDR_EXP 61
34612: PUSH
34613: LD_EXP 61
34617: PPUSH
34618: LD_VAR 0 2
34622: PPUSH
34623: EMPTY
34624: PPUSH
34625: CALL_OW 1
34629: ST_TO_ADDR
// continue ;
34630: GO 34290
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34632: LD_ADDR_VAR 0 8
34636: PUSH
34637: LD_EXP 49
34641: PUSH
34642: LD_VAR 0 2
34646: ARRAY
34647: PPUSH
34648: LD_INT 30
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 72
34662: ST_TO_ADDR
// if tmp then
34663: LD_VAR 0 8
34667: IFFALSE 34770
// begin for j in tmp do
34669: LD_ADDR_VAR 0 3
34673: PUSH
34674: LD_VAR 0 8
34678: PUSH
34679: FOR_IN
34680: IFFALSE 34768
// for k in UnitsInside ( j ) do
34682: LD_ADDR_VAR 0 4
34686: PUSH
34687: LD_VAR 0 3
34691: PPUSH
34692: CALL_OW 313
34696: PUSH
34697: FOR_IN
34698: IFFALSE 34764
// if k then
34700: LD_VAR 0 4
34704: IFFALSE 34762
// if not k in mc_repair_vehicle [ i ] then
34706: LD_VAR 0 4
34710: PUSH
34711: LD_EXP 61
34715: PUSH
34716: LD_VAR 0 2
34720: ARRAY
34721: IN
34722: NOT
34723: IFFALSE 34762
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
34725: LD_ADDR_EXP 61
34729: PUSH
34730: LD_EXP 61
34734: PPUSH
34735: LD_VAR 0 2
34739: PPUSH
34740: LD_EXP 61
34744: PUSH
34745: LD_VAR 0 2
34749: ARRAY
34750: PUSH
34751: LD_VAR 0 4
34755: UNION
34756: PPUSH
34757: CALL_OW 1
34761: ST_TO_ADDR
34762: GO 34697
34764: POP
34765: POP
34766: GO 34679
34768: POP
34769: POP
// end ; if not mc_repair_vehicle [ i ] then
34770: LD_EXP 61
34774: PUSH
34775: LD_VAR 0 2
34779: ARRAY
34780: NOT
34781: IFFALSE 34785
// continue ;
34783: GO 34290
// for j in mc_repair_vehicle [ i ] do
34785: LD_ADDR_VAR 0 3
34789: PUSH
34790: LD_EXP 61
34794: PUSH
34795: LD_VAR 0 2
34799: ARRAY
34800: PUSH
34801: FOR_IN
34802: IFFALSE 34968
// begin if GetClass ( j ) <> 3 then
34804: LD_VAR 0 3
34808: PPUSH
34809: CALL_OW 257
34813: PUSH
34814: LD_INT 3
34816: NONEQUAL
34817: IFFALSE 34858
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
34819: LD_ADDR_EXP 61
34823: PUSH
34824: LD_EXP 61
34828: PPUSH
34829: LD_VAR 0 2
34833: PPUSH
34834: LD_EXP 61
34838: PUSH
34839: LD_VAR 0 2
34843: ARRAY
34844: PUSH
34845: LD_VAR 0 3
34849: DIFF
34850: PPUSH
34851: CALL_OW 1
34855: ST_TO_ADDR
// continue ;
34856: GO 34801
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34858: LD_VAR 0 3
34862: PPUSH
34863: CALL_OW 311
34867: NOT
34868: PUSH
34869: LD_VAR 0 3
34873: PUSH
34874: LD_EXP 52
34878: PUSH
34879: LD_VAR 0 2
34883: ARRAY
34884: PUSH
34885: LD_INT 1
34887: ARRAY
34888: IN
34889: NOT
34890: AND
34891: PUSH
34892: LD_VAR 0 3
34896: PUSH
34897: LD_EXP 52
34901: PUSH
34902: LD_VAR 0 2
34906: ARRAY
34907: PUSH
34908: LD_INT 2
34910: ARRAY
34911: IN
34912: NOT
34913: AND
34914: IFFALSE 34966
// begin if IsInUnit ( j ) then
34916: LD_VAR 0 3
34920: PPUSH
34921: CALL_OW 310
34925: IFFALSE 34936
// ComExitBuilding ( j ) ;
34927: LD_VAR 0 3
34931: PPUSH
34932: CALL_OW 122
// if not HasTask ( j ) then
34936: LD_VAR 0 3
34940: PPUSH
34941: CALL_OW 314
34945: NOT
34946: IFFALSE 34966
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
34948: LD_VAR 0 3
34952: PPUSH
34953: LD_VAR 0 7
34957: PUSH
34958: LD_INT 1
34960: ARRAY
34961: PPUSH
34962: CALL_OW 189
// end ; end ;
34966: GO 34801
34968: POP
34969: POP
// end ;
34970: GO 34290
34972: POP
34973: POP
// end ;
34974: LD_VAR 0 1
34978: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
// if not mc_bases then
34992: LD_EXP 49
34996: NOT
34997: IFFALSE 35001
// exit ;
34999: GO 35803
// for i = 1 to mc_bases do
35001: LD_ADDR_VAR 0 2
35005: PUSH
35006: DOUBLE
35007: LD_INT 1
35009: DEC
35010: ST_TO_ADDR
35011: LD_EXP 49
35015: PUSH
35016: FOR_TO
35017: IFFALSE 35801
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35019: LD_EXP 77
35023: PUSH
35024: LD_VAR 0 2
35028: ARRAY
35029: NOT
35030: PUSH
35031: LD_EXP 52
35035: PUSH
35036: LD_VAR 0 2
35040: ARRAY
35041: PUSH
35042: LD_INT 1
35044: ARRAY
35045: OR
35046: PUSH
35047: LD_EXP 52
35051: PUSH
35052: LD_VAR 0 2
35056: ARRAY
35057: PUSH
35058: LD_INT 2
35060: ARRAY
35061: OR
35062: PUSH
35063: LD_EXP 75
35067: PUSH
35068: LD_VAR 0 2
35072: ARRAY
35073: PPUSH
35074: LD_INT 1
35076: PPUSH
35077: CALL_OW 325
35081: NOT
35082: OR
35083: PUSH
35084: LD_EXP 72
35088: PUSH
35089: LD_VAR 0 2
35093: ARRAY
35094: OR
35095: IFFALSE 35099
// continue ;
35097: GO 35016
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35099: LD_ADDR_VAR 0 8
35103: PUSH
35104: LD_EXP 49
35108: PUSH
35109: LD_VAR 0 2
35113: ARRAY
35114: PPUSH
35115: LD_INT 25
35117: PUSH
35118: LD_INT 4
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 50
35127: PUSH
35128: EMPTY
35129: LIST
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: LD_INT 60
35136: PUSH
35137: EMPTY
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: PPUSH
35149: CALL_OW 72
35153: PUSH
35154: LD_EXP 53
35158: PUSH
35159: LD_VAR 0 2
35163: ARRAY
35164: DIFF
35165: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35166: LD_ADDR_VAR 0 9
35170: PUSH
35171: LD_EXP 49
35175: PUSH
35176: LD_VAR 0 2
35180: ARRAY
35181: PPUSH
35182: LD_INT 2
35184: PUSH
35185: LD_INT 30
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 30
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: PPUSH
35210: CALL_OW 72
35214: ST_TO_ADDR
// if not tmp or not dep then
35215: LD_VAR 0 8
35219: NOT
35220: PUSH
35221: LD_VAR 0 9
35225: NOT
35226: OR
35227: IFFALSE 35231
// continue ;
35229: GO 35016
// side := GetSide ( tmp [ 1 ] ) ;
35231: LD_ADDR_VAR 0 11
35235: PUSH
35236: LD_VAR 0 8
35240: PUSH
35241: LD_INT 1
35243: ARRAY
35244: PPUSH
35245: CALL_OW 255
35249: ST_TO_ADDR
// dep := dep [ 1 ] ;
35250: LD_ADDR_VAR 0 9
35254: PUSH
35255: LD_VAR 0 9
35259: PUSH
35260: LD_INT 1
35262: ARRAY
35263: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35264: LD_ADDR_VAR 0 7
35268: PUSH
35269: LD_EXP 77
35273: PUSH
35274: LD_VAR 0 2
35278: ARRAY
35279: PPUSH
35280: LD_INT 22
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 25
35292: PUSH
35293: LD_INT 12
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PPUSH
35304: CALL_OW 70
35308: PUSH
35309: LD_INT 22
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 25
35321: PUSH
35322: LD_INT 12
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 91
35331: PUSH
35332: LD_VAR 0 9
35336: PUSH
35337: LD_INT 20
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: PPUSH
35350: CALL_OW 69
35354: UNION
35355: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35356: LD_ADDR_VAR 0 10
35360: PUSH
35361: LD_EXP 77
35365: PUSH
35366: LD_VAR 0 2
35370: ARRAY
35371: PPUSH
35372: LD_INT 81
35374: PUSH
35375: LD_VAR 0 11
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PPUSH
35384: CALL_OW 70
35388: ST_TO_ADDR
// if not apes or danger_at_area then
35389: LD_VAR 0 7
35393: NOT
35394: PUSH
35395: LD_VAR 0 10
35399: OR
35400: IFFALSE 35450
// begin if mc_taming [ i ] then
35402: LD_EXP 80
35406: PUSH
35407: LD_VAR 0 2
35411: ARRAY
35412: IFFALSE 35448
// begin MC_Reset ( i , 121 ) ;
35414: LD_VAR 0 2
35418: PPUSH
35419: LD_INT 121
35421: PPUSH
35422: CALL 20781 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
35426: LD_ADDR_EXP 80
35430: PUSH
35431: LD_EXP 80
35435: PPUSH
35436: LD_VAR 0 2
35440: PPUSH
35441: EMPTY
35442: PPUSH
35443: CALL_OW 1
35447: ST_TO_ADDR
// end ; continue ;
35448: GO 35016
// end ; for j in tmp do
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_VAR 0 8
35459: PUSH
35460: FOR_IN
35461: IFFALSE 35797
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
35463: LD_VAR 0 3
35467: PUSH
35468: LD_EXP 80
35472: PUSH
35473: LD_VAR 0 2
35477: ARRAY
35478: IN
35479: NOT
35480: PUSH
35481: LD_EXP 80
35485: PUSH
35486: LD_VAR 0 2
35490: ARRAY
35491: PUSH
35492: LD_INT 3
35494: LESS
35495: AND
35496: IFFALSE 35554
// begin SetTag ( j , 121 ) ;
35498: LD_VAR 0 3
35502: PPUSH
35503: LD_INT 121
35505: PPUSH
35506: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
35510: LD_ADDR_EXP 80
35514: PUSH
35515: LD_EXP 80
35519: PPUSH
35520: LD_VAR 0 2
35524: PUSH
35525: LD_EXP 80
35529: PUSH
35530: LD_VAR 0 2
35534: ARRAY
35535: PUSH
35536: LD_INT 1
35538: PLUS
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PPUSH
35544: LD_VAR 0 3
35548: PPUSH
35549: CALL 53584 0 3
35553: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
35554: LD_VAR 0 3
35558: PUSH
35559: LD_EXP 80
35563: PUSH
35564: LD_VAR 0 2
35568: ARRAY
35569: IN
35570: IFFALSE 35795
// begin if GetClass ( j ) <> 4 then
35572: LD_VAR 0 3
35576: PPUSH
35577: CALL_OW 257
35581: PUSH
35582: LD_INT 4
35584: NONEQUAL
35585: IFFALSE 35638
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
35587: LD_ADDR_EXP 80
35591: PUSH
35592: LD_EXP 80
35596: PPUSH
35597: LD_VAR 0 2
35601: PPUSH
35602: LD_EXP 80
35606: PUSH
35607: LD_VAR 0 2
35611: ARRAY
35612: PUSH
35613: LD_VAR 0 3
35617: DIFF
35618: PPUSH
35619: CALL_OW 1
35623: ST_TO_ADDR
// SetTag ( j , 0 ) ;
35624: LD_VAR 0 3
35628: PPUSH
35629: LD_INT 0
35631: PPUSH
35632: CALL_OW 109
// continue ;
35636: GO 35460
// end ; if IsInUnit ( j ) then
35638: LD_VAR 0 3
35642: PPUSH
35643: CALL_OW 310
35647: IFFALSE 35658
// ComExitBuilding ( j ) ;
35649: LD_VAR 0 3
35653: PPUSH
35654: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
35658: LD_ADDR_VAR 0 6
35662: PUSH
35663: LD_VAR 0 7
35667: PPUSH
35668: LD_VAR 0 3
35672: PPUSH
35673: CALL_OW 74
35677: ST_TO_ADDR
// if not ape then
35678: LD_VAR 0 6
35682: NOT
35683: IFFALSE 35687
// break ;
35685: GO 35797
// x := GetX ( ape ) ;
35687: LD_ADDR_VAR 0 4
35691: PUSH
35692: LD_VAR 0 6
35696: PPUSH
35697: CALL_OW 250
35701: ST_TO_ADDR
// y := GetY ( ape ) ;
35702: LD_ADDR_VAR 0 5
35706: PUSH
35707: LD_VAR 0 6
35711: PPUSH
35712: CALL_OW 251
35716: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35717: LD_VAR 0 4
35721: PPUSH
35722: LD_VAR 0 5
35726: PPUSH
35727: CALL_OW 488
35731: NOT
35732: PUSH
35733: LD_VAR 0 11
35737: PPUSH
35738: LD_VAR 0 4
35742: PPUSH
35743: LD_VAR 0 5
35747: PPUSH
35748: LD_INT 20
35750: PPUSH
35751: CALL 54480 0 4
35755: PUSH
35756: LD_INT 4
35758: ARRAY
35759: OR
35760: IFFALSE 35764
// break ;
35762: GO 35797
// if not HasTask ( j ) then
35764: LD_VAR 0 3
35768: PPUSH
35769: CALL_OW 314
35773: NOT
35774: IFFALSE 35795
// ComTameXY ( j , x , y ) ;
35776: LD_VAR 0 3
35780: PPUSH
35781: LD_VAR 0 4
35785: PPUSH
35786: LD_VAR 0 5
35790: PPUSH
35791: CALL_OW 131
// end ; end ;
35795: GO 35460
35797: POP
35798: POP
// end ;
35799: GO 35016
35801: POP
35802: POP
// end ;
35803: LD_VAR 0 1
35807: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
35808: LD_INT 0
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
// if not mc_bases then
35818: LD_EXP 49
35822: NOT
35823: IFFALSE 35827
// exit ;
35825: GO 36453
// for i = 1 to mc_bases do
35827: LD_ADDR_VAR 0 2
35831: PUSH
35832: DOUBLE
35833: LD_INT 1
35835: DEC
35836: ST_TO_ADDR
35837: LD_EXP 49
35841: PUSH
35842: FOR_TO
35843: IFFALSE 36451
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
35845: LD_EXP 78
35849: PUSH
35850: LD_VAR 0 2
35854: ARRAY
35855: NOT
35856: PUSH
35857: LD_EXP 78
35861: PUSH
35862: LD_VAR 0 2
35866: ARRAY
35867: PPUSH
35868: LD_INT 25
35870: PUSH
35871: LD_INT 12
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 72
35882: NOT
35883: OR
35884: IFFALSE 35888
// continue ;
35886: GO 35842
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
35888: LD_ADDR_VAR 0 5
35892: PUSH
35893: LD_EXP 78
35897: PUSH
35898: LD_VAR 0 2
35902: ARRAY
35903: PUSH
35904: LD_INT 1
35906: ARRAY
35907: PPUSH
35908: CALL_OW 255
35912: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
35913: LD_VAR 0 5
35917: PPUSH
35918: LD_INT 2
35920: PPUSH
35921: CALL_OW 325
35925: IFFALSE 36178
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
35927: LD_ADDR_VAR 0 4
35931: PUSH
35932: LD_EXP 78
35936: PUSH
35937: LD_VAR 0 2
35941: ARRAY
35942: PPUSH
35943: LD_INT 25
35945: PUSH
35946: LD_INT 16
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PPUSH
35953: CALL_OW 72
35957: ST_TO_ADDR
// if tmp < 6 then
35958: LD_VAR 0 4
35962: PUSH
35963: LD_INT 6
35965: LESS
35966: IFFALSE 36178
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35968: LD_ADDR_VAR 0 6
35972: PUSH
35973: LD_EXP 49
35977: PUSH
35978: LD_VAR 0 2
35982: ARRAY
35983: PPUSH
35984: LD_INT 2
35986: PUSH
35987: LD_INT 30
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 30
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: PPUSH
36012: CALL_OW 72
36016: ST_TO_ADDR
// if depot then
36017: LD_VAR 0 6
36021: IFFALSE 36178
// begin selected := 0 ;
36023: LD_ADDR_VAR 0 7
36027: PUSH
36028: LD_INT 0
36030: ST_TO_ADDR
// for j in depot do
36031: LD_ADDR_VAR 0 3
36035: PUSH
36036: LD_VAR 0 6
36040: PUSH
36041: FOR_IN
36042: IFFALSE 36073
// begin if UnitsInside ( j ) < 6 then
36044: LD_VAR 0 3
36048: PPUSH
36049: CALL_OW 313
36053: PUSH
36054: LD_INT 6
36056: LESS
36057: IFFALSE 36071
// begin selected := j ;
36059: LD_ADDR_VAR 0 7
36063: PUSH
36064: LD_VAR 0 3
36068: ST_TO_ADDR
// break ;
36069: GO 36073
// end ; end ;
36071: GO 36041
36073: POP
36074: POP
// if selected then
36075: LD_VAR 0 7
36079: IFFALSE 36178
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: LD_EXP 78
36090: PUSH
36091: LD_VAR 0 2
36095: ARRAY
36096: PPUSH
36097: LD_INT 25
36099: PUSH
36100: LD_INT 12
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PPUSH
36107: CALL_OW 72
36111: PUSH
36112: FOR_IN
36113: IFFALSE 36176
// if not HasTask ( j ) then
36115: LD_VAR 0 3
36119: PPUSH
36120: CALL_OW 314
36124: NOT
36125: IFFALSE 36174
// begin if not IsInUnit ( j ) then
36127: LD_VAR 0 3
36131: PPUSH
36132: CALL_OW 310
36136: NOT
36137: IFFALSE 36153
// ComEnterUnit ( j , selected ) ;
36139: LD_VAR 0 3
36143: PPUSH
36144: LD_VAR 0 7
36148: PPUSH
36149: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
36153: LD_VAR 0 3
36157: PPUSH
36158: LD_INT 16
36160: PPUSH
36161: CALL_OW 183
// AddComExitBuilding ( j ) ;
36165: LD_VAR 0 3
36169: PPUSH
36170: CALL_OW 182
// end ;
36174: GO 36112
36176: POP
36177: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36178: LD_VAR 0 5
36182: PPUSH
36183: LD_INT 11
36185: PPUSH
36186: CALL_OW 325
36190: IFFALSE 36449
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36192: LD_ADDR_VAR 0 4
36196: PUSH
36197: LD_EXP 78
36201: PUSH
36202: LD_VAR 0 2
36206: ARRAY
36207: PPUSH
36208: LD_INT 25
36210: PUSH
36211: LD_INT 16
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PPUSH
36218: CALL_OW 72
36222: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36223: LD_VAR 0 4
36227: PUSH
36228: LD_INT 6
36230: GREATEREQUAL
36231: PUSH
36232: LD_VAR 0 5
36236: PPUSH
36237: LD_INT 2
36239: PPUSH
36240: CALL_OW 325
36244: NOT
36245: OR
36246: IFFALSE 36449
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36248: LD_ADDR_VAR 0 8
36252: PUSH
36253: LD_EXP 49
36257: PUSH
36258: LD_VAR 0 2
36262: ARRAY
36263: PPUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 30
36269: PUSH
36270: LD_INT 4
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 30
36279: PUSH
36280: LD_INT 5
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: PPUSH
36292: CALL_OW 72
36296: ST_TO_ADDR
// if barracks then
36297: LD_VAR 0 8
36301: IFFALSE 36449
// begin selected := 0 ;
36303: LD_ADDR_VAR 0 7
36307: PUSH
36308: LD_INT 0
36310: ST_TO_ADDR
// for j in barracks do
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_VAR 0 8
36320: PUSH
36321: FOR_IN
36322: IFFALSE 36353
// begin if UnitsInside ( j ) < 6 then
36324: LD_VAR 0 3
36328: PPUSH
36329: CALL_OW 313
36333: PUSH
36334: LD_INT 6
36336: LESS
36337: IFFALSE 36351
// begin selected := j ;
36339: LD_ADDR_VAR 0 7
36343: PUSH
36344: LD_VAR 0 3
36348: ST_TO_ADDR
// break ;
36349: GO 36353
// end ; end ;
36351: GO 36321
36353: POP
36354: POP
// if selected then
36355: LD_VAR 0 7
36359: IFFALSE 36449
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: LD_EXP 78
36370: PUSH
36371: LD_VAR 0 2
36375: ARRAY
36376: PPUSH
36377: LD_INT 25
36379: PUSH
36380: LD_INT 12
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PPUSH
36387: CALL_OW 72
36391: PUSH
36392: FOR_IN
36393: IFFALSE 36447
// if not IsInUnit ( j ) and not HasTask ( j ) then
36395: LD_VAR 0 3
36399: PPUSH
36400: CALL_OW 310
36404: NOT
36405: PUSH
36406: LD_VAR 0 3
36410: PPUSH
36411: CALL_OW 314
36415: NOT
36416: AND
36417: IFFALSE 36445
// begin ComEnterUnit ( j , selected ) ;
36419: LD_VAR 0 3
36423: PPUSH
36424: LD_VAR 0 7
36428: PPUSH
36429: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
36433: LD_VAR 0 3
36437: PPUSH
36438: LD_INT 15
36440: PPUSH
36441: CALL_OW 183
// end ;
36445: GO 36392
36447: POP
36448: POP
// end ; end ; end ; end ; end ;
36449: GO 35842
36451: POP
36452: POP
// end ;
36453: LD_VAR 0 1
36457: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
// if not mc_bases then
36464: LD_EXP 49
36468: NOT
36469: IFFALSE 36473
// exit ;
36471: GO 36651
// for i = 1 to mc_bases do
36473: LD_ADDR_VAR 0 2
36477: PUSH
36478: DOUBLE
36479: LD_INT 1
36481: DEC
36482: ST_TO_ADDR
36483: LD_EXP 49
36487: PUSH
36488: FOR_TO
36489: IFFALSE 36649
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
36491: LD_ADDR_VAR 0 4
36495: PUSH
36496: LD_EXP 49
36500: PUSH
36501: LD_VAR 0 2
36505: ARRAY
36506: PPUSH
36507: LD_INT 25
36509: PUSH
36510: LD_INT 9
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PPUSH
36517: CALL_OW 72
36521: ST_TO_ADDR
// if not tmp then
36522: LD_VAR 0 4
36526: NOT
36527: IFFALSE 36531
// continue ;
36529: GO 36488
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
36531: LD_EXP 75
36535: PUSH
36536: LD_VAR 0 2
36540: ARRAY
36541: PPUSH
36542: LD_INT 29
36544: PPUSH
36545: CALL_OW 325
36549: NOT
36550: PUSH
36551: LD_EXP 75
36555: PUSH
36556: LD_VAR 0 2
36560: ARRAY
36561: PPUSH
36562: LD_INT 28
36564: PPUSH
36565: CALL_OW 325
36569: NOT
36570: AND
36571: IFFALSE 36575
// continue ;
36573: GO 36488
// for j in tmp do
36575: LD_ADDR_VAR 0 3
36579: PUSH
36580: LD_VAR 0 4
36584: PUSH
36585: FOR_IN
36586: IFFALSE 36645
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
36588: LD_VAR 0 3
36592: PUSH
36593: LD_EXP 52
36597: PUSH
36598: LD_VAR 0 2
36602: ARRAY
36603: PUSH
36604: LD_INT 1
36606: ARRAY
36607: IN
36608: NOT
36609: PUSH
36610: LD_VAR 0 3
36614: PUSH
36615: LD_EXP 52
36619: PUSH
36620: LD_VAR 0 2
36624: ARRAY
36625: PUSH
36626: LD_INT 2
36628: ARRAY
36629: IN
36630: NOT
36631: AND
36632: IFFALSE 36643
// ComSpaceTimeShoot ( j ) ;
36634: LD_VAR 0 3
36638: PPUSH
36639: CALL 47319 0 1
36643: GO 36585
36645: POP
36646: POP
// end ;
36647: GO 36488
36649: POP
36650: POP
// end ;
36651: LD_VAR 0 1
36655: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
// if not mc_bases then
36667: LD_EXP 49
36671: NOT
36672: IFFALSE 36676
// exit ;
36674: GO 37298
// for i = 1 to mc_bases do
36676: LD_ADDR_VAR 0 2
36680: PUSH
36681: DOUBLE
36682: LD_INT 1
36684: DEC
36685: ST_TO_ADDR
36686: LD_EXP 49
36690: PUSH
36691: FOR_TO
36692: IFFALSE 37296
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
36694: LD_EXP 84
36698: PUSH
36699: LD_VAR 0 2
36703: ARRAY
36704: NOT
36705: PUSH
36706: LD_INT 38
36708: PPUSH
36709: LD_EXP 75
36713: PUSH
36714: LD_VAR 0 2
36718: ARRAY
36719: PPUSH
36720: CALL_OW 321
36724: PUSH
36725: LD_INT 2
36727: NONEQUAL
36728: OR
36729: IFFALSE 36733
// continue ;
36731: GO 36691
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
36733: LD_ADDR_VAR 0 8
36737: PUSH
36738: LD_EXP 49
36742: PUSH
36743: LD_VAR 0 2
36747: ARRAY
36748: PPUSH
36749: LD_INT 30
36751: PUSH
36752: LD_INT 34
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PPUSH
36759: CALL_OW 72
36763: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
36764: LD_ADDR_VAR 0 9
36768: PUSH
36769: LD_EXP 49
36773: PUSH
36774: LD_VAR 0 2
36778: ARRAY
36779: PPUSH
36780: LD_INT 25
36782: PUSH
36783: LD_INT 4
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PPUSH
36790: CALL_OW 72
36794: PPUSH
36795: LD_INT 0
36797: PPUSH
36798: CALL 86844 0 2
36802: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
36803: LD_VAR 0 9
36807: NOT
36808: PUSH
36809: LD_VAR 0 8
36813: NOT
36814: OR
36815: PUSH
36816: LD_EXP 49
36820: PUSH
36821: LD_VAR 0 2
36825: ARRAY
36826: PPUSH
36827: LD_INT 124
36829: PPUSH
36830: CALL 86844 0 2
36834: OR
36835: IFFALSE 36839
// continue ;
36837: GO 36691
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
36839: LD_EXP 85
36843: PUSH
36844: LD_VAR 0 2
36848: ARRAY
36849: PUSH
36850: LD_EXP 84
36854: PUSH
36855: LD_VAR 0 2
36859: ARRAY
36860: LESS
36861: PUSH
36862: LD_EXP 85
36866: PUSH
36867: LD_VAR 0 2
36871: ARRAY
36872: PUSH
36873: LD_VAR 0 8
36877: LESS
36878: AND
36879: IFFALSE 37294
// begin tmp := sci [ 1 ] ;
36881: LD_ADDR_VAR 0 7
36885: PUSH
36886: LD_VAR 0 9
36890: PUSH
36891: LD_INT 1
36893: ARRAY
36894: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
36895: LD_VAR 0 7
36899: PPUSH
36900: LD_INT 124
36902: PPUSH
36903: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
36907: LD_ADDR_VAR 0 3
36911: PUSH
36912: DOUBLE
36913: LD_EXP 84
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: INC
36924: ST_TO_ADDR
36925: LD_EXP 84
36929: PUSH
36930: LD_VAR 0 2
36934: ARRAY
36935: PUSH
36936: FOR_DOWNTO
36937: IFFALSE 37280
// begin if IsInUnit ( tmp ) then
36939: LD_VAR 0 7
36943: PPUSH
36944: CALL_OW 310
36948: IFFALSE 36959
// ComExitBuilding ( tmp ) ;
36950: LD_VAR 0 7
36954: PPUSH
36955: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
36959: LD_INT 35
36961: PPUSH
36962: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
36966: LD_VAR 0 7
36970: PPUSH
36971: CALL_OW 310
36975: NOT
36976: PUSH
36977: LD_VAR 0 7
36981: PPUSH
36982: CALL_OW 314
36986: NOT
36987: AND
36988: IFFALSE 36959
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
36990: LD_ADDR_VAR 0 6
36994: PUSH
36995: LD_VAR 0 7
36999: PPUSH
37000: CALL_OW 250
37004: PUSH
37005: LD_VAR 0 7
37009: PPUSH
37010: CALL_OW 251
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37019: LD_INT 35
37021: PPUSH
37022: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37026: LD_ADDR_VAR 0 4
37030: PUSH
37031: LD_EXP 84
37035: PUSH
37036: LD_VAR 0 2
37040: ARRAY
37041: PUSH
37042: LD_VAR 0 3
37046: ARRAY
37047: PUSH
37048: LD_INT 1
37050: ARRAY
37051: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37052: LD_ADDR_VAR 0 5
37056: PUSH
37057: LD_EXP 84
37061: PUSH
37062: LD_VAR 0 2
37066: ARRAY
37067: PUSH
37068: LD_VAR 0 3
37072: ARRAY
37073: PUSH
37074: LD_INT 2
37076: ARRAY
37077: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37078: LD_VAR 0 7
37082: PPUSH
37083: LD_INT 10
37085: PPUSH
37086: CALL 56177 0 2
37090: PUSH
37091: LD_INT 4
37093: ARRAY
37094: IFFALSE 37132
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37096: LD_VAR 0 7
37100: PPUSH
37101: LD_VAR 0 6
37105: PUSH
37106: LD_INT 1
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 6
37114: PUSH
37115: LD_INT 2
37117: ARRAY
37118: PPUSH
37119: CALL_OW 111
// wait ( 0 0$10 ) ;
37123: LD_INT 350
37125: PPUSH
37126: CALL_OW 67
// end else
37130: GO 37158
// begin ComMoveXY ( tmp , x , y ) ;
37132: LD_VAR 0 7
37136: PPUSH
37137: LD_VAR 0 4
37141: PPUSH
37142: LD_VAR 0 5
37146: PPUSH
37147: CALL_OW 111
// wait ( 0 0$3 ) ;
37151: LD_INT 105
37153: PPUSH
37154: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
37158: LD_VAR 0 7
37162: PPUSH
37163: LD_VAR 0 4
37167: PPUSH
37168: LD_VAR 0 5
37172: PPUSH
37173: CALL_OW 307
37177: IFFALSE 37019
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37179: LD_VAR 0 7
37183: PPUSH
37184: LD_VAR 0 4
37188: PPUSH
37189: LD_VAR 0 5
37193: PPUSH
37194: LD_VAR 0 8
37198: PUSH
37199: LD_VAR 0 3
37203: ARRAY
37204: PPUSH
37205: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
37209: LD_INT 35
37211: PPUSH
37212: CALL_OW 67
// until not HasTask ( tmp ) ;
37216: LD_VAR 0 7
37220: PPUSH
37221: CALL_OW 314
37225: NOT
37226: IFFALSE 37209
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37228: LD_ADDR_EXP 85
37232: PUSH
37233: LD_EXP 85
37237: PPUSH
37238: LD_VAR 0 2
37242: PUSH
37243: LD_EXP 85
37247: PUSH
37248: LD_VAR 0 2
37252: ARRAY
37253: PUSH
37254: LD_INT 1
37256: PLUS
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PPUSH
37262: LD_VAR 0 8
37266: PUSH
37267: LD_VAR 0 3
37271: ARRAY
37272: PPUSH
37273: CALL 53584 0 3
37277: ST_TO_ADDR
// end ;
37278: GO 36936
37280: POP
37281: POP
// MC_Reset ( i , 124 ) ;
37282: LD_VAR 0 2
37286: PPUSH
37287: LD_INT 124
37289: PPUSH
37290: CALL 20781 0 2
// end ; end ;
37294: GO 36691
37296: POP
37297: POP
// end ;
37298: LD_VAR 0 1
37302: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
37307: PPUSH
// if not mc_bases then
37308: LD_EXP 49
37312: NOT
37313: IFFALSE 37317
// exit ;
37315: GO 37923
// for i = 1 to mc_bases do
37317: LD_ADDR_VAR 0 2
37321: PUSH
37322: DOUBLE
37323: LD_INT 1
37325: DEC
37326: ST_TO_ADDR
37327: LD_EXP 49
37331: PUSH
37332: FOR_TO
37333: IFFALSE 37921
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37335: LD_ADDR_VAR 0 3
37339: PUSH
37340: LD_EXP 49
37344: PUSH
37345: LD_VAR 0 2
37349: ARRAY
37350: PPUSH
37351: LD_INT 25
37353: PUSH
37354: LD_INT 4
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PPUSH
37361: CALL_OW 72
37365: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37366: LD_VAR 0 3
37370: NOT
37371: PUSH
37372: LD_EXP 86
37376: PUSH
37377: LD_VAR 0 2
37381: ARRAY
37382: NOT
37383: OR
37384: PUSH
37385: LD_EXP 49
37389: PUSH
37390: LD_VAR 0 2
37394: ARRAY
37395: PPUSH
37396: LD_INT 2
37398: PUSH
37399: LD_INT 30
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 30
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: PPUSH
37424: CALL_OW 72
37428: NOT
37429: OR
37430: IFFALSE 37480
// begin if mc_deposits_finder [ i ] then
37432: LD_EXP 87
37436: PUSH
37437: LD_VAR 0 2
37441: ARRAY
37442: IFFALSE 37478
// begin MC_Reset ( i , 125 ) ;
37444: LD_VAR 0 2
37448: PPUSH
37449: LD_INT 125
37451: PPUSH
37452: CALL 20781 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37456: LD_ADDR_EXP 87
37460: PUSH
37461: LD_EXP 87
37465: PPUSH
37466: LD_VAR 0 2
37470: PPUSH
37471: EMPTY
37472: PPUSH
37473: CALL_OW 1
37477: ST_TO_ADDR
// end ; continue ;
37478: GO 37332
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
37480: LD_EXP 86
37484: PUSH
37485: LD_VAR 0 2
37489: ARRAY
37490: PUSH
37491: LD_INT 1
37493: ARRAY
37494: PUSH
37495: LD_INT 3
37497: ARRAY
37498: PUSH
37499: LD_INT 1
37501: EQUAL
37502: PUSH
37503: LD_INT 20
37505: PPUSH
37506: LD_EXP 75
37510: PUSH
37511: LD_VAR 0 2
37515: ARRAY
37516: PPUSH
37517: CALL_OW 321
37521: PUSH
37522: LD_INT 2
37524: NONEQUAL
37525: AND
37526: IFFALSE 37576
// begin if mc_deposits_finder [ i ] then
37528: LD_EXP 87
37532: PUSH
37533: LD_VAR 0 2
37537: ARRAY
37538: IFFALSE 37574
// begin MC_Reset ( i , 125 ) ;
37540: LD_VAR 0 2
37544: PPUSH
37545: LD_INT 125
37547: PPUSH
37548: CALL 20781 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37552: LD_ADDR_EXP 87
37556: PUSH
37557: LD_EXP 87
37561: PPUSH
37562: LD_VAR 0 2
37566: PPUSH
37567: EMPTY
37568: PPUSH
37569: CALL_OW 1
37573: ST_TO_ADDR
// end ; continue ;
37574: GO 37332
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
37576: LD_EXP 86
37580: PUSH
37581: LD_VAR 0 2
37585: ARRAY
37586: PUSH
37587: LD_INT 1
37589: ARRAY
37590: PUSH
37591: LD_INT 1
37593: ARRAY
37594: PPUSH
37595: LD_EXP 86
37599: PUSH
37600: LD_VAR 0 2
37604: ARRAY
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PUSH
37610: LD_INT 2
37612: ARRAY
37613: PPUSH
37614: LD_EXP 75
37618: PUSH
37619: LD_VAR 0 2
37623: ARRAY
37624: PPUSH
37625: CALL_OW 440
37629: IFFALSE 37672
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
37631: LD_ADDR_EXP 86
37635: PUSH
37636: LD_EXP 86
37640: PPUSH
37641: LD_VAR 0 2
37645: PPUSH
37646: LD_EXP 86
37650: PUSH
37651: LD_VAR 0 2
37655: ARRAY
37656: PPUSH
37657: LD_INT 1
37659: PPUSH
37660: CALL_OW 3
37664: PPUSH
37665: CALL_OW 1
37669: ST_TO_ADDR
37670: GO 37919
// begin if not mc_deposits_finder [ i ] then
37672: LD_EXP 87
37676: PUSH
37677: LD_VAR 0 2
37681: ARRAY
37682: NOT
37683: IFFALSE 37735
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
37685: LD_ADDR_EXP 87
37689: PUSH
37690: LD_EXP 87
37694: PPUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: LD_VAR 0 3
37704: PUSH
37705: LD_INT 1
37707: ARRAY
37708: PUSH
37709: EMPTY
37710: LIST
37711: PPUSH
37712: CALL_OW 1
37716: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
37717: LD_VAR 0 3
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PPUSH
37726: LD_INT 125
37728: PPUSH
37729: CALL_OW 109
// end else
37733: GO 37919
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
37735: LD_EXP 87
37739: PUSH
37740: LD_VAR 0 2
37744: ARRAY
37745: PUSH
37746: LD_INT 1
37748: ARRAY
37749: PPUSH
37750: CALL_OW 310
37754: IFFALSE 37777
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
37756: LD_EXP 87
37760: PUSH
37761: LD_VAR 0 2
37765: ARRAY
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PPUSH
37771: CALL_OW 122
37775: GO 37919
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
37777: LD_EXP 87
37781: PUSH
37782: LD_VAR 0 2
37786: ARRAY
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: PPUSH
37792: CALL_OW 314
37796: NOT
37797: PUSH
37798: LD_EXP 87
37802: PUSH
37803: LD_VAR 0 2
37807: ARRAY
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PPUSH
37813: LD_EXP 86
37817: PUSH
37818: LD_VAR 0 2
37822: ARRAY
37823: PUSH
37824: LD_INT 1
37826: ARRAY
37827: PUSH
37828: LD_INT 1
37830: ARRAY
37831: PPUSH
37832: LD_EXP 86
37836: PUSH
37837: LD_VAR 0 2
37841: ARRAY
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PUSH
37847: LD_INT 2
37849: ARRAY
37850: PPUSH
37851: CALL_OW 297
37855: PUSH
37856: LD_INT 6
37858: GREATER
37859: AND
37860: IFFALSE 37919
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
37862: LD_EXP 87
37866: PUSH
37867: LD_VAR 0 2
37871: ARRAY
37872: PUSH
37873: LD_INT 1
37875: ARRAY
37876: PPUSH
37877: LD_EXP 86
37881: PUSH
37882: LD_VAR 0 2
37886: ARRAY
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PUSH
37892: LD_INT 1
37894: ARRAY
37895: PPUSH
37896: LD_EXP 86
37900: PUSH
37901: LD_VAR 0 2
37905: ARRAY
37906: PUSH
37907: LD_INT 1
37909: ARRAY
37910: PUSH
37911: LD_INT 2
37913: ARRAY
37914: PPUSH
37915: CALL_OW 111
// end ; end ; end ;
37919: GO 37332
37921: POP
37922: POP
// end ;
37923: LD_VAR 0 1
37927: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
37928: LD_INT 0
37930: PPUSH
37931: PPUSH
37932: PPUSH
37933: PPUSH
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
// if not mc_bases then
37941: LD_EXP 49
37945: NOT
37946: IFFALSE 37950
// exit ;
37948: GO 38674
// for i = 1 to mc_bases do
37950: LD_ADDR_VAR 0 2
37954: PUSH
37955: DOUBLE
37956: LD_INT 1
37958: DEC
37959: ST_TO_ADDR
37960: LD_EXP 49
37964: PUSH
37965: FOR_TO
37966: IFFALSE 38672
// begin if not mc_bases [ i ] then
37968: LD_EXP 49
37972: PUSH
37973: LD_VAR 0 2
37977: ARRAY
37978: NOT
37979: IFFALSE 37983
// continue ;
37981: GO 37965
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
37983: LD_ADDR_VAR 0 7
37987: PUSH
37988: LD_EXP 49
37992: PUSH
37993: LD_VAR 0 2
37997: ARRAY
37998: PUSH
37999: LD_INT 1
38001: ARRAY
38002: PPUSH
38003: CALL_OW 248
38007: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38008: LD_VAR 0 7
38012: PUSH
38013: LD_INT 3
38015: EQUAL
38016: PUSH
38017: LD_EXP 68
38021: PUSH
38022: LD_VAR 0 2
38026: ARRAY
38027: PUSH
38028: LD_EXP 71
38032: PUSH
38033: LD_VAR 0 2
38037: ARRAY
38038: UNION
38039: PPUSH
38040: LD_INT 33
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PPUSH
38050: CALL_OW 72
38054: NOT
38055: OR
38056: IFFALSE 38060
// continue ;
38058: GO 37965
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38060: LD_ADDR_VAR 0 9
38064: PUSH
38065: LD_EXP 49
38069: PUSH
38070: LD_VAR 0 2
38074: ARRAY
38075: PPUSH
38076: LD_INT 30
38078: PUSH
38079: LD_INT 36
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PPUSH
38086: CALL_OW 72
38090: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38091: LD_ADDR_VAR 0 10
38095: PUSH
38096: LD_EXP 68
38100: PUSH
38101: LD_VAR 0 2
38105: ARRAY
38106: PPUSH
38107: LD_INT 34
38109: PUSH
38110: LD_INT 31
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PPUSH
38117: CALL_OW 72
38121: ST_TO_ADDR
// if not cts and not mcts then
38122: LD_VAR 0 9
38126: NOT
38127: PUSH
38128: LD_VAR 0 10
38132: NOT
38133: AND
38134: IFFALSE 38138
// continue ;
38136: GO 37965
// x := cts ;
38138: LD_ADDR_VAR 0 11
38142: PUSH
38143: LD_VAR 0 9
38147: ST_TO_ADDR
// if not x then
38148: LD_VAR 0 11
38152: NOT
38153: IFFALSE 38165
// x := mcts ;
38155: LD_ADDR_VAR 0 11
38159: PUSH
38160: LD_VAR 0 10
38164: ST_TO_ADDR
// if mc_remote_driver [ i ] then
38165: LD_EXP 89
38169: PUSH
38170: LD_VAR 0 2
38174: ARRAY
38175: IFFALSE 38444
// for j in mc_remote_driver [ i ] do
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_EXP 89
38186: PUSH
38187: LD_VAR 0 2
38191: ARRAY
38192: PUSH
38193: FOR_IN
38194: IFFALSE 38442
// begin if GetClass ( j ) <> 3 then
38196: LD_VAR 0 3
38200: PPUSH
38201: CALL_OW 257
38205: PUSH
38206: LD_INT 3
38208: NONEQUAL
38209: IFFALSE 38262
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38211: LD_ADDR_EXP 89
38215: PUSH
38216: LD_EXP 89
38220: PPUSH
38221: LD_VAR 0 2
38225: PPUSH
38226: LD_EXP 89
38230: PUSH
38231: LD_VAR 0 2
38235: ARRAY
38236: PUSH
38237: LD_VAR 0 3
38241: DIFF
38242: PPUSH
38243: CALL_OW 1
38247: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38248: LD_VAR 0 3
38252: PPUSH
38253: LD_INT 0
38255: PPUSH
38256: CALL_OW 109
// continue ;
38260: GO 38193
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38262: LD_VAR 0 3
38266: PPUSH
38267: CALL_OW 310
38271: NOT
38272: PUSH
38273: LD_VAR 0 3
38277: PPUSH
38278: CALL_OW 310
38282: PPUSH
38283: CALL_OW 266
38287: PUSH
38288: LD_INT 36
38290: NONEQUAL
38291: PUSH
38292: LD_VAR 0 3
38296: PPUSH
38297: CALL 86932 0 1
38301: NOT
38302: AND
38303: OR
38304: IFFALSE 38440
// begin if IsInUnit ( j ) then
38306: LD_VAR 0 3
38310: PPUSH
38311: CALL_OW 310
38315: IFFALSE 38326
// ComExitBuilding ( j ) ;
38317: LD_VAR 0 3
38321: PPUSH
38322: CALL_OW 122
// ct := 0 ;
38326: LD_ADDR_VAR 0 8
38330: PUSH
38331: LD_INT 0
38333: ST_TO_ADDR
// for k in x do
38334: LD_ADDR_VAR 0 4
38338: PUSH
38339: LD_VAR 0 11
38343: PUSH
38344: FOR_IN
38345: IFFALSE 38418
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
38347: LD_VAR 0 4
38351: PPUSH
38352: CALL_OW 264
38356: PUSH
38357: LD_INT 31
38359: EQUAL
38360: PUSH
38361: LD_VAR 0 4
38365: PPUSH
38366: CALL_OW 311
38370: NOT
38371: AND
38372: PUSH
38373: LD_VAR 0 4
38377: PPUSH
38378: CALL_OW 266
38382: PUSH
38383: LD_INT 36
38385: EQUAL
38386: PUSH
38387: LD_VAR 0 4
38391: PPUSH
38392: CALL_OW 313
38396: PUSH
38397: LD_INT 3
38399: LESS
38400: AND
38401: OR
38402: IFFALSE 38416
// begin ct := k ;
38404: LD_ADDR_VAR 0 8
38408: PUSH
38409: LD_VAR 0 4
38413: ST_TO_ADDR
// break ;
38414: GO 38418
// end ;
38416: GO 38344
38418: POP
38419: POP
// if ct then
38420: LD_VAR 0 8
38424: IFFALSE 38440
// ComEnterUnit ( j , ct ) ;
38426: LD_VAR 0 3
38430: PPUSH
38431: LD_VAR 0 8
38435: PPUSH
38436: CALL_OW 120
// end ; end ;
38440: GO 38193
38442: POP
38443: POP
// places := 0 ;
38444: LD_ADDR_VAR 0 5
38448: PUSH
38449: LD_INT 0
38451: ST_TO_ADDR
// for j = 1 to x do
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: DOUBLE
38458: LD_INT 1
38460: DEC
38461: ST_TO_ADDR
38462: LD_VAR 0 11
38466: PUSH
38467: FOR_TO
38468: IFFALSE 38523
// if GetWeapon ( x [ j ] ) = ar_control_tower then
38470: LD_VAR 0 11
38474: PUSH
38475: LD_VAR 0 3
38479: ARRAY
38480: PPUSH
38481: CALL_OW 264
38485: PUSH
38486: LD_INT 31
38488: EQUAL
38489: IFFALSE 38507
// places := places + 1 else
38491: LD_ADDR_VAR 0 5
38495: PUSH
38496: LD_VAR 0 5
38500: PUSH
38501: LD_INT 1
38503: PLUS
38504: ST_TO_ADDR
38505: GO 38521
// places := places + 3 ;
38507: LD_ADDR_VAR 0 5
38511: PUSH
38512: LD_VAR 0 5
38516: PUSH
38517: LD_INT 3
38519: PLUS
38520: ST_TO_ADDR
38521: GO 38467
38523: POP
38524: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
38525: LD_ADDR_VAR 0 6
38529: PUSH
38530: LD_EXP 49
38534: PUSH
38535: LD_VAR 0 2
38539: ARRAY
38540: PPUSH
38541: LD_INT 25
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 72
38555: PUSH
38556: LD_EXP 89
38560: PUSH
38561: LD_VAR 0 2
38565: ARRAY
38566: DIFF
38567: PPUSH
38568: LD_INT 3
38570: PPUSH
38571: CALL 87832 0 2
38575: ST_TO_ADDR
// if not tmp then
38576: LD_VAR 0 6
38580: NOT
38581: IFFALSE 38585
// continue ;
38583: GO 37965
// places := places - mc_remote_driver [ i ] ;
38585: LD_ADDR_VAR 0 5
38589: PUSH
38590: LD_VAR 0 5
38594: PUSH
38595: LD_EXP 89
38599: PUSH
38600: LD_VAR 0 2
38604: ARRAY
38605: MINUS
38606: ST_TO_ADDR
// if places then
38607: LD_VAR 0 5
38611: IFFALSE 38670
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
38613: LD_ADDR_EXP 89
38617: PUSH
38618: LD_EXP 89
38622: PPUSH
38623: LD_VAR 0 2
38627: PPUSH
38628: LD_EXP 89
38632: PUSH
38633: LD_VAR 0 2
38637: ARRAY
38638: PUSH
38639: LD_VAR 0 6
38643: PUSH
38644: LD_INT 1
38646: ARRAY
38647: UNION
38648: PPUSH
38649: CALL_OW 1
38653: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
38654: LD_VAR 0 6
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: PPUSH
38663: LD_INT 126
38665: PPUSH
38666: CALL_OW 109
// end ; end ;
38670: GO 37965
38672: POP
38673: POP
// end ;
38674: LD_VAR 0 1
38678: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
38679: LD_INT 0
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
38687: LD_VAR 0 1
38691: NOT
38692: PUSH
38693: LD_VAR 0 2
38697: NOT
38698: OR
38699: PUSH
38700: LD_VAR 0 3
38704: NOT
38705: OR
38706: PUSH
38707: LD_VAR 0 4
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: LD_INT 4
38723: PUSH
38724: LD_INT 5
38726: PUSH
38727: LD_INT 8
38729: PUSH
38730: LD_INT 9
38732: PUSH
38733: LD_INT 15
38735: PUSH
38736: LD_INT 16
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: IN
38750: NOT
38751: OR
38752: IFFALSE 38756
// exit ;
38754: GO 39656
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
38756: LD_ADDR_VAR 0 2
38760: PUSH
38761: LD_VAR 0 2
38765: PPUSH
38766: LD_INT 21
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 24
38778: PUSH
38779: LD_INT 250
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PPUSH
38790: CALL_OW 72
38794: ST_TO_ADDR
// case class of 1 , 15 :
38795: LD_VAR 0 4
38799: PUSH
38800: LD_INT 1
38802: DOUBLE
38803: EQUAL
38804: IFTRUE 38814
38806: LD_INT 15
38808: DOUBLE
38809: EQUAL
38810: IFTRUE 38814
38812: GO 38899
38814: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
38815: LD_ADDR_VAR 0 8
38819: PUSH
38820: LD_VAR 0 2
38824: PPUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 30
38830: PUSH
38831: LD_INT 32
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 30
38840: PUSH
38841: LD_INT 31
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: LIST
38852: PPUSH
38853: CALL_OW 72
38857: PUSH
38858: LD_VAR 0 2
38862: PPUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 30
38868: PUSH
38869: LD_INT 4
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 30
38878: PUSH
38879: LD_INT 5
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: LIST
38890: PPUSH
38891: CALL_OW 72
38895: ADD
38896: ST_TO_ADDR
38897: GO 39145
38899: LD_INT 2
38901: DOUBLE
38902: EQUAL
38903: IFTRUE 38913
38905: LD_INT 16
38907: DOUBLE
38908: EQUAL
38909: IFTRUE 38913
38911: GO 38959
38913: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
38914: LD_ADDR_VAR 0 8
38918: PUSH
38919: LD_VAR 0 2
38923: PPUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 30
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 30
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: PPUSH
38952: CALL_OW 72
38956: ST_TO_ADDR
38957: GO 39145
38959: LD_INT 3
38961: DOUBLE
38962: EQUAL
38963: IFTRUE 38967
38965: GO 39013
38967: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
38968: LD_ADDR_VAR 0 8
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 30
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 30
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: LIST
39005: PPUSH
39006: CALL_OW 72
39010: ST_TO_ADDR
39011: GO 39145
39013: LD_INT 4
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39021
39019: GO 39078
39021: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39022: LD_ADDR_VAR 0 8
39026: PUSH
39027: LD_VAR 0 2
39031: PPUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 30
39037: PUSH
39038: LD_INT 6
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 30
39047: PUSH
39048: LD_INT 7
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 30
39057: PUSH
39058: LD_INT 8
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: PPUSH
39071: CALL_OW 72
39075: ST_TO_ADDR
39076: GO 39145
39078: LD_INT 5
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39098
39084: LD_INT 8
39086: DOUBLE
39087: EQUAL
39088: IFTRUE 39098
39090: LD_INT 9
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39098
39096: GO 39144
39098: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39099: LD_ADDR_VAR 0 8
39103: PUSH
39104: LD_VAR 0 2
39108: PPUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 30
39114: PUSH
39115: LD_INT 4
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 30
39124: PUSH
39125: LD_INT 5
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: PPUSH
39137: CALL_OW 72
39141: ST_TO_ADDR
39142: GO 39145
39144: POP
// if not tmp then
39145: LD_VAR 0 8
39149: NOT
39150: IFFALSE 39154
// exit ;
39152: GO 39656
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39154: LD_VAR 0 4
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 15
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: IN
39169: PUSH
39170: LD_EXP 58
39174: PUSH
39175: LD_VAR 0 1
39179: ARRAY
39180: AND
39181: IFFALSE 39337
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39183: LD_ADDR_VAR 0 9
39187: PUSH
39188: LD_EXP 58
39192: PUSH
39193: LD_VAR 0 1
39197: ARRAY
39198: PUSH
39199: LD_INT 1
39201: ARRAY
39202: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39203: LD_VAR 0 9
39207: PUSH
39208: LD_EXP 59
39212: PUSH
39213: LD_VAR 0 1
39217: ARRAY
39218: IN
39219: NOT
39220: IFFALSE 39335
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
39222: LD_ADDR_EXP 59
39226: PUSH
39227: LD_EXP 59
39231: PPUSH
39232: LD_VAR 0 1
39236: PUSH
39237: LD_EXP 59
39241: PUSH
39242: LD_VAR 0 1
39246: ARRAY
39247: PUSH
39248: LD_INT 1
39250: PLUS
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PPUSH
39256: LD_VAR 0 9
39260: PPUSH
39261: CALL 53584 0 3
39265: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
39266: LD_ADDR_EXP 58
39270: PUSH
39271: LD_EXP 58
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: LD_EXP 58
39285: PUSH
39286: LD_VAR 0 1
39290: ARRAY
39291: PUSH
39292: LD_VAR 0 9
39296: DIFF
39297: PPUSH
39298: CALL_OW 1
39302: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
39303: LD_VAR 0 3
39307: PPUSH
39308: LD_EXP 59
39312: PUSH
39313: LD_VAR 0 1
39317: ARRAY
39318: PUSH
39319: LD_EXP 59
39323: PUSH
39324: LD_VAR 0 1
39328: ARRAY
39329: ARRAY
39330: PPUSH
39331: CALL_OW 120
// end ; exit ;
39335: GO 39656
// end ; if tmp > 1 then
39337: LD_VAR 0 8
39341: PUSH
39342: LD_INT 1
39344: GREATER
39345: IFFALSE 39449
// for i = 2 to tmp do
39347: LD_ADDR_VAR 0 6
39351: PUSH
39352: DOUBLE
39353: LD_INT 2
39355: DEC
39356: ST_TO_ADDR
39357: LD_VAR 0 8
39361: PUSH
39362: FOR_TO
39363: IFFALSE 39447
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
39365: LD_VAR 0 8
39369: PUSH
39370: LD_VAR 0 6
39374: ARRAY
39375: PPUSH
39376: CALL_OW 461
39380: PUSH
39381: LD_INT 6
39383: EQUAL
39384: IFFALSE 39445
// begin x := tmp [ i ] ;
39386: LD_ADDR_VAR 0 9
39390: PUSH
39391: LD_VAR 0 8
39395: PUSH
39396: LD_VAR 0 6
39400: ARRAY
39401: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
39402: LD_ADDR_VAR 0 8
39406: PUSH
39407: LD_VAR 0 8
39411: PPUSH
39412: LD_VAR 0 6
39416: PPUSH
39417: CALL_OW 3
39421: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
39422: LD_ADDR_VAR 0 8
39426: PUSH
39427: LD_VAR 0 8
39431: PPUSH
39432: LD_INT 1
39434: PPUSH
39435: LD_VAR 0 9
39439: PPUSH
39440: CALL_OW 2
39444: ST_TO_ADDR
// end ;
39445: GO 39362
39447: POP
39448: POP
// for i in tmp do
39449: LD_ADDR_VAR 0 6
39453: PUSH
39454: LD_VAR 0 8
39458: PUSH
39459: FOR_IN
39460: IFFALSE 39529
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
39462: LD_VAR 0 6
39466: PPUSH
39467: CALL_OW 313
39471: PUSH
39472: LD_INT 6
39474: LESS
39475: PUSH
39476: LD_VAR 0 6
39480: PPUSH
39481: CALL_OW 266
39485: PUSH
39486: LD_INT 31
39488: PUSH
39489: LD_INT 32
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: IN
39496: NOT
39497: AND
39498: PUSH
39499: LD_VAR 0 6
39503: PPUSH
39504: CALL_OW 313
39508: PUSH
39509: LD_INT 0
39511: EQUAL
39512: OR
39513: IFFALSE 39527
// begin j := i ;
39515: LD_ADDR_VAR 0 7
39519: PUSH
39520: LD_VAR 0 6
39524: ST_TO_ADDR
// break ;
39525: GO 39529
// end ; end ;
39527: GO 39459
39529: POP
39530: POP
// if j then
39531: LD_VAR 0 7
39535: IFFALSE 39553
// ComEnterUnit ( unit , j ) else
39537: LD_VAR 0 3
39541: PPUSH
39542: LD_VAR 0 7
39546: PPUSH
39547: CALL_OW 120
39551: GO 39656
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39553: LD_ADDR_VAR 0 10
39557: PUSH
39558: LD_VAR 0 2
39562: PPUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 30
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 30
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: PPUSH
39591: CALL_OW 72
39595: ST_TO_ADDR
// if depot then
39596: LD_VAR 0 10
39600: IFFALSE 39656
// begin depot := NearestUnitToUnit ( depot , unit ) ;
39602: LD_ADDR_VAR 0 10
39606: PUSH
39607: LD_VAR 0 10
39611: PPUSH
39612: LD_VAR 0 3
39616: PPUSH
39617: CALL_OW 74
39621: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
39622: LD_VAR 0 3
39626: PPUSH
39627: LD_VAR 0 10
39631: PPUSH
39632: CALL_OW 296
39636: PUSH
39637: LD_INT 10
39639: GREATER
39640: IFFALSE 39656
// ComStandNearbyBuilding ( unit , depot ) ;
39642: LD_VAR 0 3
39646: PPUSH
39647: LD_VAR 0 10
39651: PPUSH
39652: CALL 47936 0 2
// end ; end ; end ;
39656: LD_VAR 0 5
39660: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
39661: LD_INT 0
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
// if not mc_bases then
39667: LD_EXP 49
39671: NOT
39672: IFFALSE 39676
// exit ;
39674: GO 39915
// for i = 1 to mc_bases do
39676: LD_ADDR_VAR 0 2
39680: PUSH
39681: DOUBLE
39682: LD_INT 1
39684: DEC
39685: ST_TO_ADDR
39686: LD_EXP 49
39690: PUSH
39691: FOR_TO
39692: IFFALSE 39913
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
39694: LD_ADDR_VAR 0 4
39698: PUSH
39699: LD_EXP 49
39703: PUSH
39704: LD_VAR 0 2
39708: ARRAY
39709: PPUSH
39710: LD_INT 21
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PPUSH
39720: CALL_OW 72
39724: PUSH
39725: LD_EXP 78
39729: PUSH
39730: LD_VAR 0 2
39734: ARRAY
39735: UNION
39736: ST_TO_ADDR
// if not tmp then
39737: LD_VAR 0 4
39741: NOT
39742: IFFALSE 39746
// continue ;
39744: GO 39691
// for j in tmp do
39746: LD_ADDR_VAR 0 3
39750: PUSH
39751: LD_VAR 0 4
39755: PUSH
39756: FOR_IN
39757: IFFALSE 39909
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
39759: LD_VAR 0 3
39763: PPUSH
39764: CALL_OW 110
39768: NOT
39769: PUSH
39770: LD_VAR 0 3
39774: PPUSH
39775: CALL_OW 314
39779: NOT
39780: AND
39781: PUSH
39782: LD_VAR 0 3
39786: PPUSH
39787: CALL_OW 311
39791: NOT
39792: AND
39793: PUSH
39794: LD_VAR 0 3
39798: PPUSH
39799: CALL_OW 310
39803: NOT
39804: AND
39805: PUSH
39806: LD_VAR 0 3
39810: PUSH
39811: LD_EXP 52
39815: PUSH
39816: LD_VAR 0 2
39820: ARRAY
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: IN
39826: NOT
39827: AND
39828: PUSH
39829: LD_VAR 0 3
39833: PUSH
39834: LD_EXP 52
39838: PUSH
39839: LD_VAR 0 2
39843: ARRAY
39844: PUSH
39845: LD_INT 2
39847: ARRAY
39848: IN
39849: NOT
39850: AND
39851: PUSH
39852: LD_VAR 0 3
39856: PUSH
39857: LD_EXP 61
39861: PUSH
39862: LD_VAR 0 2
39866: ARRAY
39867: IN
39868: NOT
39869: AND
39870: IFFALSE 39907
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
39872: LD_VAR 0 2
39876: PPUSH
39877: LD_EXP 49
39881: PUSH
39882: LD_VAR 0 2
39886: ARRAY
39887: PPUSH
39888: LD_VAR 0 3
39892: PPUSH
39893: LD_VAR 0 3
39897: PPUSH
39898: CALL_OW 257
39902: PPUSH
39903: CALL 38679 0 4
// end ;
39907: GO 39756
39909: POP
39910: POP
// end ;
39911: GO 39691
39913: POP
39914: POP
// end ;
39915: LD_VAR 0 1
39919: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
39920: LD_INT 0
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
// if not mc_bases [ base ] then
39928: LD_EXP 49
39932: PUSH
39933: LD_VAR 0 1
39937: ARRAY
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 40125
// tmp := [ ] ;
39943: LD_ADDR_VAR 0 6
39947: PUSH
39948: EMPTY
39949: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
39950: LD_ADDR_VAR 0 7
39954: PUSH
39955: LD_VAR 0 3
39959: PPUSH
39960: LD_INT 0
39962: PPUSH
39963: CALL_OW 517
39967: ST_TO_ADDR
// if not list then
39968: LD_VAR 0 7
39972: NOT
39973: IFFALSE 39977
// exit ;
39975: GO 40125
// for i = 1 to amount do
39977: LD_ADDR_VAR 0 5
39981: PUSH
39982: DOUBLE
39983: LD_INT 1
39985: DEC
39986: ST_TO_ADDR
39987: LD_VAR 0 2
39991: PUSH
39992: FOR_TO
39993: IFFALSE 40073
// begin x := rand ( 1 , list [ 1 ] ) ;
39995: LD_ADDR_VAR 0 8
39999: PUSH
40000: LD_INT 1
40002: PPUSH
40003: LD_VAR 0 7
40007: PUSH
40008: LD_INT 1
40010: ARRAY
40011: PPUSH
40012: CALL_OW 12
40016: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40017: LD_ADDR_VAR 0 6
40021: PUSH
40022: LD_VAR 0 6
40026: PPUSH
40027: LD_VAR 0 5
40031: PPUSH
40032: LD_VAR 0 7
40036: PUSH
40037: LD_INT 1
40039: ARRAY
40040: PUSH
40041: LD_VAR 0 8
40045: ARRAY
40046: PUSH
40047: LD_VAR 0 7
40051: PUSH
40052: LD_INT 2
40054: ARRAY
40055: PUSH
40056: LD_VAR 0 8
40060: ARRAY
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: CALL_OW 1
40070: ST_TO_ADDR
// end ;
40071: GO 39992
40073: POP
40074: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40075: LD_ADDR_EXP 62
40079: PUSH
40080: LD_EXP 62
40084: PPUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: LD_VAR 0 6
40094: PPUSH
40095: CALL_OW 1
40099: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40100: LD_ADDR_EXP 64
40104: PUSH
40105: LD_EXP 64
40109: PPUSH
40110: LD_VAR 0 1
40114: PPUSH
40115: LD_VAR 0 3
40119: PPUSH
40120: CALL_OW 1
40124: ST_TO_ADDR
// end ;
40125: LD_VAR 0 4
40129: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40130: LD_INT 0
40132: PPUSH
// if not mc_bases [ base ] then
40133: LD_EXP 49
40137: PUSH
40138: LD_VAR 0 1
40142: ARRAY
40143: NOT
40144: IFFALSE 40148
// exit ;
40146: GO 40173
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40148: LD_ADDR_EXP 54
40152: PUSH
40153: LD_EXP 54
40157: PPUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: LD_VAR 0 2
40167: PPUSH
40168: CALL_OW 1
40172: ST_TO_ADDR
// end ;
40173: LD_VAR 0 3
40177: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40178: LD_INT 0
40180: PPUSH
// if not mc_bases [ base ] then
40181: LD_EXP 49
40185: PUSH
40186: LD_VAR 0 1
40190: ARRAY
40191: NOT
40192: IFFALSE 40196
// exit ;
40194: GO 40233
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40196: LD_ADDR_EXP 54
40200: PUSH
40201: LD_EXP 54
40205: PPUSH
40206: LD_VAR 0 1
40210: PPUSH
40211: LD_EXP 54
40215: PUSH
40216: LD_VAR 0 1
40220: ARRAY
40221: PUSH
40222: LD_VAR 0 2
40226: UNION
40227: PPUSH
40228: CALL_OW 1
40232: ST_TO_ADDR
// end ;
40233: LD_VAR 0 3
40237: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
40238: LD_INT 0
40240: PPUSH
// if not mc_bases [ base ] then
40241: LD_EXP 49
40245: PUSH
40246: LD_VAR 0 1
40250: ARRAY
40251: NOT
40252: IFFALSE 40256
// exit ;
40254: GO 40281
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
40256: LD_ADDR_EXP 70
40260: PUSH
40261: LD_EXP 70
40265: PPUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: LD_VAR 0 2
40275: PPUSH
40276: CALL_OW 1
40280: ST_TO_ADDR
// end ;
40281: LD_VAR 0 3
40285: RET
// export function MC_InsertProduceList ( base , components ) ; begin
40286: LD_INT 0
40288: PPUSH
// if not mc_bases [ base ] then
40289: LD_EXP 49
40293: PUSH
40294: LD_VAR 0 1
40298: ARRAY
40299: NOT
40300: IFFALSE 40304
// exit ;
40302: GO 40341
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
40304: LD_ADDR_EXP 70
40308: PUSH
40309: LD_EXP 70
40313: PPUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_EXP 70
40323: PUSH
40324: LD_VAR 0 1
40328: ARRAY
40329: PUSH
40330: LD_VAR 0 2
40334: ADD
40335: PPUSH
40336: CALL_OW 1
40340: ST_TO_ADDR
// end ;
40341: LD_VAR 0 3
40345: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
40346: LD_INT 0
40348: PPUSH
// if not mc_bases [ base ] then
40349: LD_EXP 49
40353: PUSH
40354: LD_VAR 0 1
40358: ARRAY
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 40418
// mc_defender := Replace ( mc_defender , base , deflist ) ;
40364: LD_ADDR_EXP 71
40368: PUSH
40369: LD_EXP 71
40373: PPUSH
40374: LD_VAR 0 1
40378: PPUSH
40379: LD_VAR 0 2
40383: PPUSH
40384: CALL_OW 1
40388: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
40389: LD_ADDR_EXP 60
40393: PUSH
40394: LD_EXP 60
40398: PPUSH
40399: LD_VAR 0 1
40403: PPUSH
40404: LD_VAR 0 2
40408: PUSH
40409: LD_INT 0
40411: PLUS
40412: PPUSH
40413: CALL_OW 1
40417: ST_TO_ADDR
// end ;
40418: LD_VAR 0 3
40422: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
40423: LD_INT 0
40425: PPUSH
// if not mc_bases [ base ] then
40426: LD_EXP 49
40430: PUSH
40431: LD_VAR 0 1
40435: ARRAY
40436: NOT
40437: IFFALSE 40441
// exit ;
40439: GO 40466
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
40441: LD_ADDR_EXP 60
40445: PUSH
40446: LD_EXP 60
40450: PPUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: LD_VAR 0 2
40460: PPUSH
40461: CALL_OW 1
40465: ST_TO_ADDR
// end ;
40466: LD_VAR 0 3
40470: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
40471: LD_INT 0
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
// if not mc_bases [ base ] then
40477: LD_EXP 49
40481: PUSH
40482: LD_VAR 0 1
40486: ARRAY
40487: NOT
40488: IFFALSE 40492
// exit ;
40490: GO 40557
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
40492: LD_ADDR_EXP 69
40496: PUSH
40497: LD_EXP 69
40501: PPUSH
40502: LD_VAR 0 1
40506: PUSH
40507: LD_EXP 69
40511: PUSH
40512: LD_VAR 0 1
40516: ARRAY
40517: PUSH
40518: LD_INT 1
40520: PLUS
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PPUSH
40526: LD_VAR 0 1
40530: PUSH
40531: LD_VAR 0 2
40535: PUSH
40536: LD_VAR 0 3
40540: PUSH
40541: LD_VAR 0 4
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: PPUSH
40552: CALL 53584 0 3
40556: ST_TO_ADDR
// end ;
40557: LD_VAR 0 5
40561: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
40562: LD_INT 0
40564: PPUSH
// if not mc_bases [ base ] then
40565: LD_EXP 49
40569: PUSH
40570: LD_VAR 0 1
40574: ARRAY
40575: NOT
40576: IFFALSE 40580
// exit ;
40578: GO 40605
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
40580: LD_ADDR_EXP 86
40584: PUSH
40585: LD_EXP 86
40589: PPUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: CALL_OW 1
40604: ST_TO_ADDR
// end ;
40605: LD_VAR 0 3
40609: RET
// export function MC_GetMinesField ( base ) ; begin
40610: LD_INT 0
40612: PPUSH
// result := mc_mines [ base ] ;
40613: LD_ADDR_VAR 0 2
40617: PUSH
40618: LD_EXP 62
40622: PUSH
40623: LD_VAR 0 1
40627: ARRAY
40628: ST_TO_ADDR
// end ;
40629: LD_VAR 0 2
40633: RET
// export function MC_GetProduceList ( base ) ; begin
40634: LD_INT 0
40636: PPUSH
// result := mc_produce [ base ] ;
40637: LD_ADDR_VAR 0 2
40641: PUSH
40642: LD_EXP 70
40646: PUSH
40647: LD_VAR 0 1
40651: ARRAY
40652: ST_TO_ADDR
// end ;
40653: LD_VAR 0 2
40657: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
40658: LD_INT 0
40660: PPUSH
40661: PPUSH
// if not mc_bases then
40662: LD_EXP 49
40666: NOT
40667: IFFALSE 40671
// exit ;
40669: GO 40736
// if mc_bases [ base ] then
40671: LD_EXP 49
40675: PUSH
40676: LD_VAR 0 1
40680: ARRAY
40681: IFFALSE 40736
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40683: LD_ADDR_VAR 0 3
40687: PUSH
40688: LD_EXP 49
40692: PUSH
40693: LD_VAR 0 1
40697: ARRAY
40698: PPUSH
40699: LD_INT 30
40701: PUSH
40702: LD_VAR 0 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PPUSH
40711: CALL_OW 72
40715: ST_TO_ADDR
// if result then
40716: LD_VAR 0 3
40720: IFFALSE 40736
// result := result [ 1 ] ;
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_VAR 0 3
40731: PUSH
40732: LD_INT 1
40734: ARRAY
40735: ST_TO_ADDR
// end ; end ;
40736: LD_VAR 0 3
40740: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
// if not mc_bases then
40745: LD_EXP 49
40749: NOT
40750: IFFALSE 40754
// exit ;
40752: GO 40799
// if mc_bases [ base ] then
40754: LD_EXP 49
40758: PUSH
40759: LD_VAR 0 1
40763: ARRAY
40764: IFFALSE 40799
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40766: LD_ADDR_VAR 0 3
40770: PUSH
40771: LD_EXP 49
40775: PUSH
40776: LD_VAR 0 1
40780: ARRAY
40781: PPUSH
40782: LD_INT 30
40784: PUSH
40785: LD_VAR 0 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PPUSH
40794: CALL_OW 72
40798: ST_TO_ADDR
// end ;
40799: LD_VAR 0 3
40803: RET
// export function MC_SetTame ( base , area ) ; begin
40804: LD_INT 0
40806: PPUSH
// if not mc_bases or not base then
40807: LD_EXP 49
40811: NOT
40812: PUSH
40813: LD_VAR 0 1
40817: NOT
40818: OR
40819: IFFALSE 40823
// exit ;
40821: GO 40848
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
40823: LD_ADDR_EXP 77
40827: PUSH
40828: LD_EXP 77
40832: PPUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: LD_VAR 0 2
40842: PPUSH
40843: CALL_OW 1
40847: ST_TO_ADDR
// end ;
40848: LD_VAR 0 3
40852: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
40853: LD_INT 0
40855: PPUSH
40856: PPUSH
// if not mc_bases or not base then
40857: LD_EXP 49
40861: NOT
40862: PUSH
40863: LD_VAR 0 1
40867: NOT
40868: OR
40869: IFFALSE 40873
// exit ;
40871: GO 40975
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40873: LD_ADDR_VAR 0 4
40877: PUSH
40878: LD_EXP 49
40882: PUSH
40883: LD_VAR 0 1
40887: ARRAY
40888: PPUSH
40889: LD_INT 30
40891: PUSH
40892: LD_VAR 0 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PPUSH
40901: CALL_OW 72
40905: ST_TO_ADDR
// if not tmp then
40906: LD_VAR 0 4
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 40975
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
40915: LD_ADDR_EXP 81
40919: PUSH
40920: LD_EXP 81
40924: PPUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: LD_EXP 81
40934: PUSH
40935: LD_VAR 0 1
40939: ARRAY
40940: PPUSH
40941: LD_EXP 81
40945: PUSH
40946: LD_VAR 0 1
40950: ARRAY
40951: PUSH
40952: LD_INT 1
40954: PLUS
40955: PPUSH
40956: LD_VAR 0 4
40960: PUSH
40961: LD_INT 1
40963: ARRAY
40964: PPUSH
40965: CALL_OW 2
40969: PPUSH
40970: CALL_OW 1
40974: ST_TO_ADDR
// end ;
40975: LD_VAR 0 3
40979: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
40980: LD_INT 0
40982: PPUSH
40983: PPUSH
// if not mc_bases or not base or not kinds then
40984: LD_EXP 49
40988: NOT
40989: PUSH
40990: LD_VAR 0 1
40994: NOT
40995: OR
40996: PUSH
40997: LD_VAR 0 2
41001: NOT
41002: OR
41003: IFFALSE 41007
// exit ;
41005: GO 41068
// for i in kinds do
41007: LD_ADDR_VAR 0 4
41011: PUSH
41012: LD_VAR 0 2
41016: PUSH
41017: FOR_IN
41018: IFFALSE 41066
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41020: LD_ADDR_EXP 83
41024: PUSH
41025: LD_EXP 83
41029: PPUSH
41030: LD_VAR 0 1
41034: PUSH
41035: LD_EXP 83
41039: PUSH
41040: LD_VAR 0 1
41044: ARRAY
41045: PUSH
41046: LD_INT 1
41048: PLUS
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PPUSH
41054: LD_VAR 0 4
41058: PPUSH
41059: CALL 53584 0 3
41063: ST_TO_ADDR
41064: GO 41017
41066: POP
41067: POP
// end ;
41068: LD_VAR 0 3
41072: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41073: LD_INT 0
41075: PPUSH
// if not mc_bases or not base or not areas then
41076: LD_EXP 49
41080: NOT
41081: PUSH
41082: LD_VAR 0 1
41086: NOT
41087: OR
41088: PUSH
41089: LD_VAR 0 2
41093: NOT
41094: OR
41095: IFFALSE 41099
// exit ;
41097: GO 41124
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41099: LD_ADDR_EXP 67
41103: PUSH
41104: LD_EXP 67
41108: PPUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: LD_VAR 0 2
41118: PPUSH
41119: CALL_OW 1
41123: ST_TO_ADDR
// end ;
41124: LD_VAR 0 3
41128: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41129: LD_INT 0
41131: PPUSH
// if not mc_bases or not base or not teleports_exit then
41132: LD_EXP 49
41136: NOT
41137: PUSH
41138: LD_VAR 0 1
41142: NOT
41143: OR
41144: PUSH
41145: LD_VAR 0 2
41149: NOT
41150: OR
41151: IFFALSE 41155
// exit ;
41153: GO 41180
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41155: LD_ADDR_EXP 84
41159: PUSH
41160: LD_EXP 84
41164: PPUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 2
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// end ;
41180: LD_VAR 0 3
41184: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
41189: PPUSH
// if not mc_bases or not base or not ext_list then
41190: LD_EXP 49
41194: NOT
41195: PUSH
41196: LD_VAR 0 1
41200: NOT
41201: OR
41202: PUSH
41203: LD_VAR 0 5
41207: NOT
41208: OR
41209: IFFALSE 41213
// exit ;
41211: GO 41386
// tmp := GetFacExtXYD ( x , y , d ) ;
41213: LD_ADDR_VAR 0 8
41217: PUSH
41218: LD_VAR 0 2
41222: PPUSH
41223: LD_VAR 0 3
41227: PPUSH
41228: LD_VAR 0 4
41232: PPUSH
41233: CALL 86962 0 3
41237: ST_TO_ADDR
// if not tmp then
41238: LD_VAR 0 8
41242: NOT
41243: IFFALSE 41247
// exit ;
41245: GO 41386
// for i in tmp do
41247: LD_ADDR_VAR 0 7
41251: PUSH
41252: LD_VAR 0 8
41256: PUSH
41257: FOR_IN
41258: IFFALSE 41384
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
41260: LD_ADDR_EXP 54
41264: PUSH
41265: LD_EXP 54
41269: PPUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: LD_EXP 54
41279: PUSH
41280: LD_VAR 0 1
41284: ARRAY
41285: PPUSH
41286: LD_EXP 54
41290: PUSH
41291: LD_VAR 0 1
41295: ARRAY
41296: PUSH
41297: LD_INT 1
41299: PLUS
41300: PPUSH
41301: LD_VAR 0 5
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: PUSH
41310: LD_VAR 0 7
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: PUSH
41319: LD_VAR 0 7
41323: PUSH
41324: LD_INT 2
41326: ARRAY
41327: PUSH
41328: LD_VAR 0 7
41332: PUSH
41333: LD_INT 3
41335: ARRAY
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL_OW 2
41347: PPUSH
41348: CALL_OW 1
41352: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
41353: LD_ADDR_VAR 0 5
41357: PUSH
41358: LD_VAR 0 5
41362: PPUSH
41363: LD_INT 1
41365: PPUSH
41366: CALL_OW 3
41370: ST_TO_ADDR
// if not ext_list then
41371: LD_VAR 0 5
41375: NOT
41376: IFFALSE 41382
// exit ;
41378: POP
41379: POP
41380: GO 41386
// end ;
41382: GO 41257
41384: POP
41385: POP
// end ;
41386: LD_VAR 0 6
41390: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
41391: LD_INT 0
41393: PPUSH
// if not mc_bases or not base or not weapon_list then
41394: LD_EXP 49
41398: NOT
41399: PUSH
41400: LD_VAR 0 1
41404: NOT
41405: OR
41406: PUSH
41407: LD_VAR 0 2
41411: NOT
41412: OR
41413: IFFALSE 41417
// exit ;
41415: GO 41442
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
41417: LD_ADDR_EXP 88
41421: PUSH
41422: LD_EXP 88
41426: PPUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: LD_VAR 0 2
41436: PPUSH
41437: CALL_OW 1
41441: ST_TO_ADDR
// end ;
41442: LD_VAR 0 3
41446: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
41447: LD_INT 0
41449: PPUSH
// if not mc_bases or not base or not tech_list then
41450: LD_EXP 49
41454: NOT
41455: PUSH
41456: LD_VAR 0 1
41460: NOT
41461: OR
41462: PUSH
41463: LD_VAR 0 2
41467: NOT
41468: OR
41469: IFFALSE 41473
// exit ;
41471: GO 41498
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
41473: LD_ADDR_EXP 76
41477: PUSH
41478: LD_EXP 76
41482: PPUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: CALL_OW 1
41497: ST_TO_ADDR
// end ;
41498: LD_VAR 0 3
41502: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
41503: LD_INT 0
41505: PPUSH
// if not mc_bases or not parking_area or not base then
41506: LD_EXP 49
41510: NOT
41511: PUSH
41512: LD_VAR 0 2
41516: NOT
41517: OR
41518: PUSH
41519: LD_VAR 0 1
41523: NOT
41524: OR
41525: IFFALSE 41529
// exit ;
41527: GO 41554
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
41529: LD_ADDR_EXP 73
41533: PUSH
41534: LD_EXP 73
41538: PPUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: LD_VAR 0 2
41548: PPUSH
41549: CALL_OW 1
41553: ST_TO_ADDR
// end ;
41554: LD_VAR 0 3
41558: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
41559: LD_INT 0
41561: PPUSH
// if not mc_bases or not base or not scan_area then
41562: LD_EXP 49
41566: NOT
41567: PUSH
41568: LD_VAR 0 1
41572: NOT
41573: OR
41574: PUSH
41575: LD_VAR 0 2
41579: NOT
41580: OR
41581: IFFALSE 41585
// exit ;
41583: GO 41610
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
41585: LD_ADDR_EXP 74
41589: PUSH
41590: LD_EXP 74
41594: PPUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: LD_VAR 0 2
41604: PPUSH
41605: CALL_OW 1
41609: ST_TO_ADDR
// end ;
41610: LD_VAR 0 3
41614: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
// if not mc_bases or not base then
41619: LD_EXP 49
41623: NOT
41624: PUSH
41625: LD_VAR 0 1
41629: NOT
41630: OR
41631: IFFALSE 41635
// exit ;
41633: GO 41699
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: LD_INT 4
41651: PUSH
41652: LD_INT 11
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
41662: LD_ADDR_EXP 76
41666: PUSH
41667: LD_EXP 76
41671: PPUSH
41672: LD_VAR 0 1
41676: PPUSH
41677: LD_EXP 76
41681: PUSH
41682: LD_VAR 0 1
41686: ARRAY
41687: PUSH
41688: LD_VAR 0 3
41692: DIFF
41693: PPUSH
41694: CALL_OW 1
41698: ST_TO_ADDR
// end ;
41699: LD_VAR 0 2
41703: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
41704: LD_INT 0
41706: PPUSH
// result := mc_vehicles [ base ] ;
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_EXP 68
41716: PUSH
41717: LD_VAR 0 1
41721: ARRAY
41722: ST_TO_ADDR
// if onlyCombat then
41723: LD_VAR 0 2
41727: IFFALSE 41892
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_VAR 0 3
41738: PUSH
41739: LD_VAR 0 3
41743: PPUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 34
41749: PUSH
41750: LD_INT 12
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 34
41759: PUSH
41760: LD_INT 51
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 34
41769: PUSH
41770: LD_EXP 93
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 34
41781: PUSH
41782: LD_INT 32
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 34
41791: PUSH
41792: LD_INT 13
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 34
41801: PUSH
41802: LD_INT 52
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 34
41811: PUSH
41812: LD_INT 14
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 34
41821: PUSH
41822: LD_INT 53
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 34
41831: PUSH
41832: LD_EXP 92
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 34
41843: PUSH
41844: LD_INT 31
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 34
41853: PUSH
41854: LD_INT 48
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 34
41863: PUSH
41864: LD_INT 8
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: PPUSH
41886: CALL_OW 72
41890: DIFF
41891: ST_TO_ADDR
// end ; end_of_file
41892: LD_VAR 0 3
41896: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
41897: LD_INT 0
41899: PPUSH
41900: PPUSH
41901: PPUSH
// if not mc_bases or not skirmish then
41902: LD_EXP 49
41906: NOT
41907: PUSH
41908: LD_EXP 47
41912: NOT
41913: OR
41914: IFFALSE 41918
// exit ;
41916: GO 42083
// for i = 1 to mc_bases do
41918: LD_ADDR_VAR 0 4
41922: PUSH
41923: DOUBLE
41924: LD_INT 1
41926: DEC
41927: ST_TO_ADDR
41928: LD_EXP 49
41932: PUSH
41933: FOR_TO
41934: IFFALSE 42081
// begin if sci in mc_bases [ i ] then
41936: LD_VAR 0 2
41940: PUSH
41941: LD_EXP 49
41945: PUSH
41946: LD_VAR 0 4
41950: ARRAY
41951: IN
41952: IFFALSE 42079
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
41954: LD_ADDR_EXP 78
41958: PUSH
41959: LD_EXP 78
41963: PPUSH
41964: LD_VAR 0 4
41968: PUSH
41969: LD_EXP 78
41973: PUSH
41974: LD_VAR 0 4
41978: ARRAY
41979: PUSH
41980: LD_INT 1
41982: PLUS
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PPUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL 53584 0 3
41997: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
41998: LD_ADDR_VAR 0 5
42002: PUSH
42003: LD_EXP 49
42007: PUSH
42008: LD_VAR 0 4
42012: ARRAY
42013: PPUSH
42014: LD_INT 2
42016: PUSH
42017: LD_INT 30
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 30
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: PPUSH
42042: CALL_OW 72
42046: PPUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 74
42056: ST_TO_ADDR
// if tmp then
42057: LD_VAR 0 5
42061: IFFALSE 42077
// ComStandNearbyBuilding ( ape , tmp ) ;
42063: LD_VAR 0 1
42067: PPUSH
42068: LD_VAR 0 5
42072: PPUSH
42073: CALL 47936 0 2
// break ;
42077: GO 42081
// end ; end ;
42079: GO 41933
42081: POP
42082: POP
// end ;
42083: LD_VAR 0 3
42087: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42088: LD_INT 0
42090: PPUSH
42091: PPUSH
42092: PPUSH
// if not mc_bases or not skirmish then
42093: LD_EXP 49
42097: NOT
42098: PUSH
42099: LD_EXP 47
42103: NOT
42104: OR
42105: IFFALSE 42109
// exit ;
42107: GO 42198
// for i = 1 to mc_bases do
42109: LD_ADDR_VAR 0 4
42113: PUSH
42114: DOUBLE
42115: LD_INT 1
42117: DEC
42118: ST_TO_ADDR
42119: LD_EXP 49
42123: PUSH
42124: FOR_TO
42125: IFFALSE 42196
// begin if building in mc_busy_turret_list [ i ] then
42127: LD_VAR 0 1
42131: PUSH
42132: LD_EXP 59
42136: PUSH
42137: LD_VAR 0 4
42141: ARRAY
42142: IN
42143: IFFALSE 42194
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42145: LD_ADDR_VAR 0 5
42149: PUSH
42150: LD_EXP 59
42154: PUSH
42155: LD_VAR 0 4
42159: ARRAY
42160: PUSH
42161: LD_VAR 0 1
42165: DIFF
42166: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42167: LD_ADDR_EXP 59
42171: PUSH
42172: LD_EXP 59
42176: PPUSH
42177: LD_VAR 0 4
42181: PPUSH
42182: LD_VAR 0 5
42186: PPUSH
42187: CALL_OW 1
42191: ST_TO_ADDR
// break ;
42192: GO 42196
// end ; end ;
42194: GO 42124
42196: POP
42197: POP
// end ;
42198: LD_VAR 0 3
42202: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42203: LD_INT 0
42205: PPUSH
42206: PPUSH
42207: PPUSH
// if not mc_bases or not skirmish then
42208: LD_EXP 49
42212: NOT
42213: PUSH
42214: LD_EXP 47
42218: NOT
42219: OR
42220: IFFALSE 42224
// exit ;
42222: GO 42423
// for i = 1 to mc_bases do
42224: LD_ADDR_VAR 0 5
42228: PUSH
42229: DOUBLE
42230: LD_INT 1
42232: DEC
42233: ST_TO_ADDR
42234: LD_EXP 49
42238: PUSH
42239: FOR_TO
42240: IFFALSE 42421
// if building in mc_bases [ i ] then
42242: LD_VAR 0 1
42246: PUSH
42247: LD_EXP 49
42251: PUSH
42252: LD_VAR 0 5
42256: ARRAY
42257: IN
42258: IFFALSE 42419
// begin tmp := mc_bases [ i ] diff building ;
42260: LD_ADDR_VAR 0 6
42264: PUSH
42265: LD_EXP 49
42269: PUSH
42270: LD_VAR 0 5
42274: ARRAY
42275: PUSH
42276: LD_VAR 0 1
42280: DIFF
42281: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
42282: LD_ADDR_EXP 49
42286: PUSH
42287: LD_EXP 49
42291: PPUSH
42292: LD_VAR 0 5
42296: PPUSH
42297: LD_VAR 0 6
42301: PPUSH
42302: CALL_OW 1
42306: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
42307: LD_VAR 0 1
42311: PUSH
42312: LD_EXP 57
42316: PUSH
42317: LD_VAR 0 5
42321: ARRAY
42322: IN
42323: IFFALSE 42362
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
42325: LD_ADDR_EXP 57
42329: PUSH
42330: LD_EXP 57
42334: PPUSH
42335: LD_VAR 0 5
42339: PPUSH
42340: LD_EXP 57
42344: PUSH
42345: LD_VAR 0 5
42349: ARRAY
42350: PUSH
42351: LD_VAR 0 1
42355: DIFF
42356: PPUSH
42357: CALL_OW 1
42361: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
42362: LD_VAR 0 1
42366: PUSH
42367: LD_EXP 58
42371: PUSH
42372: LD_VAR 0 5
42376: ARRAY
42377: IN
42378: IFFALSE 42417
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
42380: LD_ADDR_EXP 58
42384: PUSH
42385: LD_EXP 58
42389: PPUSH
42390: LD_VAR 0 5
42394: PPUSH
42395: LD_EXP 58
42399: PUSH
42400: LD_VAR 0 5
42404: ARRAY
42405: PUSH
42406: LD_VAR 0 1
42410: DIFF
42411: PPUSH
42412: CALL_OW 1
42416: ST_TO_ADDR
// break ;
42417: GO 42421
// end ;
42419: GO 42239
42421: POP
42422: POP
// end ;
42423: LD_VAR 0 4
42427: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
42428: LD_INT 0
42430: PPUSH
42431: PPUSH
42432: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
42433: LD_EXP 49
42437: NOT
42438: PUSH
42439: LD_EXP 47
42443: NOT
42444: OR
42445: PUSH
42446: LD_VAR 0 3
42450: PUSH
42451: LD_EXP 75
42455: IN
42456: NOT
42457: OR
42458: IFFALSE 42462
// exit ;
42460: GO 42585
// for i = 1 to mc_vehicles do
42462: LD_ADDR_VAR 0 6
42466: PUSH
42467: DOUBLE
42468: LD_INT 1
42470: DEC
42471: ST_TO_ADDR
42472: LD_EXP 68
42476: PUSH
42477: FOR_TO
42478: IFFALSE 42583
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
42480: LD_VAR 0 2
42484: PUSH
42485: LD_EXP 68
42489: PUSH
42490: LD_VAR 0 6
42494: ARRAY
42495: IN
42496: PUSH
42497: LD_VAR 0 1
42501: PUSH
42502: LD_EXP 68
42506: PUSH
42507: LD_VAR 0 6
42511: ARRAY
42512: IN
42513: OR
42514: IFFALSE 42581
// begin tmp := mc_vehicles [ i ] diff old ;
42516: LD_ADDR_VAR 0 7
42520: PUSH
42521: LD_EXP 68
42525: PUSH
42526: LD_VAR 0 6
42530: ARRAY
42531: PUSH
42532: LD_VAR 0 2
42536: DIFF
42537: ST_TO_ADDR
// tmp := tmp diff new ;
42538: LD_ADDR_VAR 0 7
42542: PUSH
42543: LD_VAR 0 7
42547: PUSH
42548: LD_VAR 0 1
42552: DIFF
42553: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
42554: LD_ADDR_EXP 68
42558: PUSH
42559: LD_EXP 68
42563: PPUSH
42564: LD_VAR 0 6
42568: PPUSH
42569: LD_VAR 0 7
42573: PPUSH
42574: CALL_OW 1
42578: ST_TO_ADDR
// break ;
42579: GO 42583
// end ;
42581: GO 42477
42583: POP
42584: POP
// end ;
42585: LD_VAR 0 5
42589: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
42590: LD_INT 0
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
// if not mc_bases or not skirmish then
42596: LD_EXP 49
42600: NOT
42601: PUSH
42602: LD_EXP 47
42606: NOT
42607: OR
42608: IFFALSE 42612
// exit ;
42610: GO 42989
// side := GetSide ( vehicle ) ;
42612: LD_ADDR_VAR 0 5
42616: PUSH
42617: LD_VAR 0 1
42621: PPUSH
42622: CALL_OW 255
42626: ST_TO_ADDR
// for i = 1 to mc_bases do
42627: LD_ADDR_VAR 0 4
42631: PUSH
42632: DOUBLE
42633: LD_INT 1
42635: DEC
42636: ST_TO_ADDR
42637: LD_EXP 49
42641: PUSH
42642: FOR_TO
42643: IFFALSE 42987
// begin if factory in mc_bases [ i ] then
42645: LD_VAR 0 2
42649: PUSH
42650: LD_EXP 49
42654: PUSH
42655: LD_VAR 0 4
42659: ARRAY
42660: IN
42661: IFFALSE 42985
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
42663: LD_EXP 71
42667: PUSH
42668: LD_VAR 0 4
42672: ARRAY
42673: PUSH
42674: LD_EXP 60
42678: PUSH
42679: LD_VAR 0 4
42683: ARRAY
42684: LESS
42685: PUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 264
42695: PUSH
42696: LD_INT 31
42698: PUSH
42699: LD_INT 32
42701: PUSH
42702: LD_INT 51
42704: PUSH
42705: LD_EXP 93
42709: PUSH
42710: LD_INT 12
42712: PUSH
42713: LD_INT 30
42715: PUSH
42716: LD_EXP 92
42720: PUSH
42721: LD_INT 11
42723: PUSH
42724: LD_INT 53
42726: PUSH
42727: LD_INT 14
42729: PUSH
42730: LD_EXP 96
42734: PUSH
42735: LD_INT 29
42737: PUSH
42738: LD_EXP 94
42742: PUSH
42743: LD_INT 13
42745: PUSH
42746: LD_INT 52
42748: PUSH
42749: LD_INT 48
42751: PUSH
42752: LD_INT 8
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: IN
42774: NOT
42775: AND
42776: IFFALSE 42824
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
42778: LD_ADDR_EXP 71
42782: PUSH
42783: LD_EXP 71
42787: PPUSH
42788: LD_VAR 0 4
42792: PUSH
42793: LD_EXP 71
42797: PUSH
42798: LD_VAR 0 4
42802: ARRAY
42803: PUSH
42804: LD_INT 1
42806: PLUS
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PPUSH
42812: LD_VAR 0 1
42816: PPUSH
42817: CALL 53584 0 3
42821: ST_TO_ADDR
42822: GO 42868
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
42824: LD_ADDR_EXP 68
42828: PUSH
42829: LD_EXP 68
42833: PPUSH
42834: LD_VAR 0 4
42838: PUSH
42839: LD_EXP 68
42843: PUSH
42844: LD_VAR 0 4
42848: ARRAY
42849: PUSH
42850: LD_INT 1
42852: PLUS
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PPUSH
42858: LD_VAR 0 1
42862: PPUSH
42863: CALL 53584 0 3
42867: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
42868: LD_VAR 0 1
42872: PPUSH
42873: CALL_OW 263
42877: PUSH
42878: LD_INT 2
42880: EQUAL
42881: IFFALSE 42901
// begin repeat wait ( 0 0$1 ) ;
42883: LD_INT 35
42885: PPUSH
42886: CALL_OW 67
// until IsControledBy ( vehicle ) ;
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 312
42899: IFFALSE 42883
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
42901: LD_VAR 0 1
42905: PPUSH
42906: LD_EXP 73
42910: PUSH
42911: LD_VAR 0 4
42915: ARRAY
42916: PPUSH
42917: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
42921: LD_VAR 0 1
42925: PPUSH
42926: CALL_OW 263
42930: PUSH
42931: LD_INT 1
42933: NONEQUAL
42934: IFFALSE 42938
// break ;
42936: GO 42987
// repeat wait ( 0 0$1 ) ;
42938: LD_INT 35
42940: PPUSH
42941: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
42945: LD_VAR 0 1
42949: PPUSH
42950: LD_EXP 73
42954: PUSH
42955: LD_VAR 0 4
42959: ARRAY
42960: PPUSH
42961: CALL_OW 308
42965: IFFALSE 42938
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
42967: LD_VAR 0 1
42971: PPUSH
42972: CALL_OW 311
42976: PPUSH
42977: CALL_OW 121
// exit ;
42981: POP
42982: POP
42983: GO 42989
// end ; end ;
42985: GO 42642
42987: POP
42988: POP
// end ;
42989: LD_VAR 0 3
42993: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
// if not mc_bases or not skirmish then
43000: LD_EXP 49
43004: NOT
43005: PUSH
43006: LD_EXP 47
43010: NOT
43011: OR
43012: IFFALSE 43016
// exit ;
43014: GO 43369
// repeat wait ( 0 0$1 ) ;
43016: LD_INT 35
43018: PPUSH
43019: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
43023: LD_VAR 0 2
43027: PPUSH
43028: LD_VAR 0 3
43032: PPUSH
43033: CALL_OW 284
43037: IFFALSE 43016
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43039: LD_VAR 0 2
43043: PPUSH
43044: LD_VAR 0 3
43048: PPUSH
43049: CALL_OW 283
43053: PUSH
43054: LD_INT 4
43056: EQUAL
43057: IFFALSE 43061
// exit ;
43059: GO 43369
// for i = 1 to mc_bases do
43061: LD_ADDR_VAR 0 7
43065: PUSH
43066: DOUBLE
43067: LD_INT 1
43069: DEC
43070: ST_TO_ADDR
43071: LD_EXP 49
43075: PUSH
43076: FOR_TO
43077: IFFALSE 43367
// begin if mc_crates_area [ i ] then
43079: LD_EXP 67
43083: PUSH
43084: LD_VAR 0 7
43088: ARRAY
43089: IFFALSE 43200
// for j in mc_crates_area [ i ] do
43091: LD_ADDR_VAR 0 8
43095: PUSH
43096: LD_EXP 67
43100: PUSH
43101: LD_VAR 0 7
43105: ARRAY
43106: PUSH
43107: FOR_IN
43108: IFFALSE 43198
// if InArea ( x , y , j ) then
43110: LD_VAR 0 2
43114: PPUSH
43115: LD_VAR 0 3
43119: PPUSH
43120: LD_VAR 0 8
43124: PPUSH
43125: CALL_OW 309
43129: IFFALSE 43196
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43131: LD_ADDR_EXP 65
43135: PUSH
43136: LD_EXP 65
43140: PPUSH
43141: LD_VAR 0 7
43145: PUSH
43146: LD_EXP 65
43150: PUSH
43151: LD_VAR 0 7
43155: ARRAY
43156: PUSH
43157: LD_INT 1
43159: PLUS
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PPUSH
43165: LD_VAR 0 4
43169: PUSH
43170: LD_VAR 0 2
43174: PUSH
43175: LD_VAR 0 3
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: PPUSH
43185: CALL 53584 0 3
43189: ST_TO_ADDR
// exit ;
43190: POP
43191: POP
43192: POP
43193: POP
43194: GO 43369
// end ;
43196: GO 43107
43198: POP
43199: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43200: LD_ADDR_VAR 0 9
43204: PUSH
43205: LD_EXP 49
43209: PUSH
43210: LD_VAR 0 7
43214: ARRAY
43215: PPUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 30
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 30
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: PPUSH
43244: CALL_OW 72
43248: ST_TO_ADDR
// if not depot then
43249: LD_VAR 0 9
43253: NOT
43254: IFFALSE 43258
// continue ;
43256: GO 43076
// for j in depot do
43258: LD_ADDR_VAR 0 8
43262: PUSH
43263: LD_VAR 0 9
43267: PUSH
43268: FOR_IN
43269: IFFALSE 43363
// if GetDistUnitXY ( j , x , y ) < 30 then
43271: LD_VAR 0 8
43275: PPUSH
43276: LD_VAR 0 2
43280: PPUSH
43281: LD_VAR 0 3
43285: PPUSH
43286: CALL_OW 297
43290: PUSH
43291: LD_INT 30
43293: LESS
43294: IFFALSE 43361
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43296: LD_ADDR_EXP 65
43300: PUSH
43301: LD_EXP 65
43305: PPUSH
43306: LD_VAR 0 7
43310: PUSH
43311: LD_EXP 65
43315: PUSH
43316: LD_VAR 0 7
43320: ARRAY
43321: PUSH
43322: LD_INT 1
43324: PLUS
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PPUSH
43330: LD_VAR 0 4
43334: PUSH
43335: LD_VAR 0 2
43339: PUSH
43340: LD_VAR 0 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: PPUSH
43350: CALL 53584 0 3
43354: ST_TO_ADDR
// exit ;
43355: POP
43356: POP
43357: POP
43358: POP
43359: GO 43369
// end ;
43361: GO 43268
43363: POP
43364: POP
// end ;
43365: GO 43076
43367: POP
43368: POP
// end ;
43369: LD_VAR 0 6
43373: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
43374: LD_INT 0
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
// if not mc_bases or not skirmish then
43380: LD_EXP 49
43384: NOT
43385: PUSH
43386: LD_EXP 47
43390: NOT
43391: OR
43392: IFFALSE 43396
// exit ;
43394: GO 43673
// side := GetSide ( lab ) ;
43396: LD_ADDR_VAR 0 4
43400: PUSH
43401: LD_VAR 0 2
43405: PPUSH
43406: CALL_OW 255
43410: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
43411: LD_VAR 0 4
43415: PUSH
43416: LD_EXP 75
43420: IN
43421: NOT
43422: PUSH
43423: LD_EXP 76
43427: NOT
43428: OR
43429: PUSH
43430: LD_EXP 49
43434: NOT
43435: OR
43436: IFFALSE 43440
// exit ;
43438: GO 43673
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
43440: LD_ADDR_EXP 76
43444: PUSH
43445: LD_EXP 76
43449: PPUSH
43450: LD_VAR 0 4
43454: PPUSH
43455: LD_EXP 76
43459: PUSH
43460: LD_VAR 0 4
43464: ARRAY
43465: PUSH
43466: LD_VAR 0 1
43470: DIFF
43471: PPUSH
43472: CALL_OW 1
43476: ST_TO_ADDR
// for i = 1 to mc_bases do
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: DOUBLE
43483: LD_INT 1
43485: DEC
43486: ST_TO_ADDR
43487: LD_EXP 49
43491: PUSH
43492: FOR_TO
43493: IFFALSE 43671
// begin if lab in mc_bases [ i ] then
43495: LD_VAR 0 2
43499: PUSH
43500: LD_EXP 49
43504: PUSH
43505: LD_VAR 0 5
43509: ARRAY
43510: IN
43511: IFFALSE 43669
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
43513: LD_VAR 0 1
43517: PUSH
43518: LD_INT 11
43520: PUSH
43521: LD_INT 4
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: IN
43536: PUSH
43537: LD_EXP 79
43541: PUSH
43542: LD_VAR 0 5
43546: ARRAY
43547: AND
43548: IFFALSE 43669
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
43550: LD_ADDR_VAR 0 6
43554: PUSH
43555: LD_EXP 79
43559: PUSH
43560: LD_VAR 0 5
43564: ARRAY
43565: PUSH
43566: LD_INT 1
43568: ARRAY
43569: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43570: LD_ADDR_EXP 79
43574: PUSH
43575: LD_EXP 79
43579: PPUSH
43580: LD_VAR 0 5
43584: PPUSH
43585: EMPTY
43586: PPUSH
43587: CALL_OW 1
43591: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
43592: LD_VAR 0 6
43596: PPUSH
43597: LD_INT 0
43599: PPUSH
43600: CALL_OW 109
// ComExitBuilding ( tmp ) ;
43604: LD_VAR 0 6
43608: PPUSH
43609: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
43613: LD_ADDR_EXP 78
43617: PUSH
43618: LD_EXP 78
43622: PPUSH
43623: LD_VAR 0 5
43627: PPUSH
43628: LD_EXP 78
43632: PUSH
43633: LD_VAR 0 5
43637: ARRAY
43638: PPUSH
43639: LD_INT 1
43641: PPUSH
43642: LD_VAR 0 6
43646: PPUSH
43647: CALL_OW 2
43651: PPUSH
43652: CALL_OW 1
43656: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
43657: LD_VAR 0 5
43661: PPUSH
43662: LD_INT 112
43664: PPUSH
43665: CALL 20781 0 2
// end ; end ; end ;
43669: GO 43492
43671: POP
43672: POP
// end ;
43673: LD_VAR 0 3
43677: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
43678: LD_INT 0
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
// if not mc_bases or not skirmish then
43688: LD_EXP 49
43692: NOT
43693: PUSH
43694: LD_EXP 47
43698: NOT
43699: OR
43700: IFFALSE 43704
// exit ;
43702: GO 44941
// for i = 1 to mc_bases do
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: DOUBLE
43710: LD_INT 1
43712: DEC
43713: ST_TO_ADDR
43714: LD_EXP 49
43718: PUSH
43719: FOR_TO
43720: IFFALSE 44939
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
43722: LD_VAR 0 1
43726: PUSH
43727: LD_EXP 49
43731: PUSH
43732: LD_VAR 0 3
43736: ARRAY
43737: IN
43738: PUSH
43739: LD_VAR 0 1
43743: PUSH
43744: LD_EXP 56
43748: PUSH
43749: LD_VAR 0 3
43753: ARRAY
43754: IN
43755: OR
43756: PUSH
43757: LD_VAR 0 1
43761: PUSH
43762: LD_EXP 71
43766: PUSH
43767: LD_VAR 0 3
43771: ARRAY
43772: IN
43773: OR
43774: PUSH
43775: LD_VAR 0 1
43779: PUSH
43780: LD_EXP 68
43784: PUSH
43785: LD_VAR 0 3
43789: ARRAY
43790: IN
43791: OR
43792: PUSH
43793: LD_VAR 0 1
43797: PUSH
43798: LD_EXP 78
43802: PUSH
43803: LD_VAR 0 3
43807: ARRAY
43808: IN
43809: OR
43810: PUSH
43811: LD_VAR 0 1
43815: PUSH
43816: LD_EXP 79
43820: PUSH
43821: LD_VAR 0 3
43825: ARRAY
43826: IN
43827: OR
43828: IFFALSE 44937
// begin if un in mc_ape [ i ] then
43830: LD_VAR 0 1
43834: PUSH
43835: LD_EXP 78
43839: PUSH
43840: LD_VAR 0 3
43844: ARRAY
43845: IN
43846: IFFALSE 43885
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
43848: LD_ADDR_EXP 78
43852: PUSH
43853: LD_EXP 78
43857: PPUSH
43858: LD_VAR 0 3
43862: PPUSH
43863: LD_EXP 78
43867: PUSH
43868: LD_VAR 0 3
43872: ARRAY
43873: PUSH
43874: LD_VAR 0 1
43878: DIFF
43879: PPUSH
43880: CALL_OW 1
43884: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
43885: LD_VAR 0 1
43889: PUSH
43890: LD_EXP 79
43894: PUSH
43895: LD_VAR 0 3
43899: ARRAY
43900: IN
43901: IFFALSE 43925
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43903: LD_ADDR_EXP 79
43907: PUSH
43908: LD_EXP 79
43912: PPUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: EMPTY
43919: PPUSH
43920: CALL_OW 1
43924: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 247
43934: PUSH
43935: LD_INT 2
43937: EQUAL
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 110
43948: PUSH
43949: LD_INT 20
43951: EQUAL
43952: PUSH
43953: LD_VAR 0 1
43957: PUSH
43958: LD_EXP 71
43962: PUSH
43963: LD_VAR 0 3
43967: ARRAY
43968: IN
43969: OR
43970: PUSH
43971: LD_VAR 0 1
43975: PPUSH
43976: CALL_OW 264
43980: PUSH
43981: LD_INT 12
43983: PUSH
43984: LD_INT 51
43986: PUSH
43987: LD_EXP 93
43991: PUSH
43992: LD_INT 32
43994: PUSH
43995: LD_INT 13
43997: PUSH
43998: LD_INT 52
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: IN
44009: OR
44010: AND
44011: IFFALSE 44189
// begin if un in mc_defender [ i ] then
44013: LD_VAR 0 1
44017: PUSH
44018: LD_EXP 71
44022: PUSH
44023: LD_VAR 0 3
44027: ARRAY
44028: IN
44029: IFFALSE 44068
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44031: LD_ADDR_EXP 71
44035: PUSH
44036: LD_EXP 71
44040: PPUSH
44041: LD_VAR 0 3
44045: PPUSH
44046: LD_EXP 71
44050: PUSH
44051: LD_VAR 0 3
44055: ARRAY
44056: PUSH
44057: LD_VAR 0 1
44061: DIFF
44062: PPUSH
44063: CALL_OW 1
44067: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44068: LD_ADDR_VAR 0 8
44072: PUSH
44073: LD_VAR 0 3
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: CALL 40741 0 2
44085: ST_TO_ADDR
// if fac then
44086: LD_VAR 0 8
44090: IFFALSE 44189
// begin for j in fac do
44092: LD_ADDR_VAR 0 4
44096: PUSH
44097: LD_VAR 0 8
44101: PUSH
44102: FOR_IN
44103: IFFALSE 44187
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44105: LD_ADDR_VAR 0 9
44109: PUSH
44110: LD_VAR 0 8
44114: PPUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: CALL_OW 265
44124: PPUSH
44125: LD_VAR 0 1
44129: PPUSH
44130: CALL_OW 262
44134: PPUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 263
44144: PPUSH
44145: LD_VAR 0 1
44149: PPUSH
44150: CALL_OW 264
44154: PPUSH
44155: CALL 51116 0 5
44159: ST_TO_ADDR
// if components then
44160: LD_VAR 0 9
44164: IFFALSE 44185
// begin MC_InsertProduceList ( i , [ components ] ) ;
44166: LD_VAR 0 3
44170: PPUSH
44171: LD_VAR 0 9
44175: PUSH
44176: EMPTY
44177: LIST
44178: PPUSH
44179: CALL 40286 0 2
// break ;
44183: GO 44187
// end ; end ;
44185: GO 44102
44187: POP
44188: POP
// end ; end ; if GetType ( un ) = unit_building then
44189: LD_VAR 0 1
44193: PPUSH
44194: CALL_OW 247
44198: PUSH
44199: LD_INT 3
44201: EQUAL
44202: IFFALSE 44605
// begin btype := GetBType ( un ) ;
44204: LD_ADDR_VAR 0 5
44208: PUSH
44209: LD_VAR 0 1
44213: PPUSH
44214: CALL_OW 266
44218: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
44219: LD_VAR 0 5
44223: PUSH
44224: LD_INT 29
44226: PUSH
44227: LD_INT 30
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: IN
44234: IFFALSE 44307
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
44236: LD_VAR 0 1
44240: PPUSH
44241: CALL_OW 250
44245: PPUSH
44246: LD_VAR 0 1
44250: PPUSH
44251: CALL_OW 251
44255: PPUSH
44256: LD_VAR 0 1
44260: PPUSH
44261: CALL_OW 255
44265: PPUSH
44266: CALL_OW 440
44270: NOT
44271: IFFALSE 44307
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
44273: LD_VAR 0 1
44277: PPUSH
44278: CALL_OW 250
44282: PPUSH
44283: LD_VAR 0 1
44287: PPUSH
44288: CALL_OW 251
44292: PPUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 255
44302: PPUSH
44303: CALL_OW 441
// end ; if btype = b_warehouse then
44307: LD_VAR 0 5
44311: PUSH
44312: LD_INT 1
44314: EQUAL
44315: IFFALSE 44333
// begin btype := b_depot ;
44317: LD_ADDR_VAR 0 5
44321: PUSH
44322: LD_INT 0
44324: ST_TO_ADDR
// pos := 1 ;
44325: LD_ADDR_VAR 0 6
44329: PUSH
44330: LD_INT 1
44332: ST_TO_ADDR
// end ; if btype = b_factory then
44333: LD_VAR 0 5
44337: PUSH
44338: LD_INT 3
44340: EQUAL
44341: IFFALSE 44359
// begin btype := b_workshop ;
44343: LD_ADDR_VAR 0 5
44347: PUSH
44348: LD_INT 2
44350: ST_TO_ADDR
// pos := 1 ;
44351: LD_ADDR_VAR 0 6
44355: PUSH
44356: LD_INT 1
44358: ST_TO_ADDR
// end ; if btype = b_barracks then
44359: LD_VAR 0 5
44363: PUSH
44364: LD_INT 5
44366: EQUAL
44367: IFFALSE 44377
// btype := b_armoury ;
44369: LD_ADDR_VAR 0 5
44373: PUSH
44374: LD_INT 4
44376: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
44377: LD_VAR 0 5
44381: PUSH
44382: LD_INT 7
44384: PUSH
44385: LD_INT 8
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: IN
44392: IFFALSE 44402
// btype := b_lab ;
44394: LD_ADDR_VAR 0 5
44398: PUSH
44399: LD_INT 6
44401: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
44402: LD_ADDR_EXP 54
44406: PUSH
44407: LD_EXP 54
44411: PPUSH
44412: LD_VAR 0 3
44416: PUSH
44417: LD_EXP 54
44421: PUSH
44422: LD_VAR 0 3
44426: ARRAY
44427: PUSH
44428: LD_INT 1
44430: PLUS
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PPUSH
44436: LD_VAR 0 5
44440: PUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 250
44450: PUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: CALL_OW 251
44460: PUSH
44461: LD_VAR 0 1
44465: PPUSH
44466: CALL_OW 254
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PPUSH
44477: CALL 53584 0 3
44481: ST_TO_ADDR
// if pos = 1 then
44482: LD_VAR 0 6
44486: PUSH
44487: LD_INT 1
44489: EQUAL
44490: IFFALSE 44605
// begin tmp := mc_build_list [ i ] ;
44492: LD_ADDR_VAR 0 7
44496: PUSH
44497: LD_EXP 54
44501: PUSH
44502: LD_VAR 0 3
44506: ARRAY
44507: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
44508: LD_VAR 0 7
44512: PPUSH
44513: LD_INT 2
44515: PUSH
44516: LD_INT 30
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 30
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: PPUSH
44541: CALL_OW 72
44545: IFFALSE 44555
// pos := 2 ;
44547: LD_ADDR_VAR 0 6
44551: PUSH
44552: LD_INT 2
44554: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
44555: LD_ADDR_VAR 0 7
44559: PUSH
44560: LD_VAR 0 7
44564: PPUSH
44565: LD_VAR 0 6
44569: PPUSH
44570: LD_VAR 0 7
44574: PPUSH
44575: CALL 53910 0 3
44579: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
44580: LD_ADDR_EXP 54
44584: PUSH
44585: LD_EXP 54
44589: PPUSH
44590: LD_VAR 0 3
44594: PPUSH
44595: LD_VAR 0 7
44599: PPUSH
44600: CALL_OW 1
44604: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
44605: LD_VAR 0 1
44609: PUSH
44610: LD_EXP 49
44614: PUSH
44615: LD_VAR 0 3
44619: ARRAY
44620: IN
44621: IFFALSE 44660
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
44623: LD_ADDR_EXP 49
44627: PUSH
44628: LD_EXP 49
44632: PPUSH
44633: LD_VAR 0 3
44637: PPUSH
44638: LD_EXP 49
44642: PUSH
44643: LD_VAR 0 3
44647: ARRAY
44648: PUSH
44649: LD_VAR 0 1
44653: DIFF
44654: PPUSH
44655: CALL_OW 1
44659: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
44660: LD_VAR 0 1
44664: PUSH
44665: LD_EXP 56
44669: PUSH
44670: LD_VAR 0 3
44674: ARRAY
44675: IN
44676: IFFALSE 44715
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
44678: LD_ADDR_EXP 56
44682: PUSH
44683: LD_EXP 56
44687: PPUSH
44688: LD_VAR 0 3
44692: PPUSH
44693: LD_EXP 56
44697: PUSH
44698: LD_VAR 0 3
44702: ARRAY
44703: PUSH
44704: LD_VAR 0 1
44708: DIFF
44709: PPUSH
44710: CALL_OW 1
44714: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
44715: LD_VAR 0 1
44719: PUSH
44720: LD_EXP 68
44724: PUSH
44725: LD_VAR 0 3
44729: ARRAY
44730: IN
44731: IFFALSE 44770
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
44733: LD_ADDR_EXP 68
44737: PUSH
44738: LD_EXP 68
44742: PPUSH
44743: LD_VAR 0 3
44747: PPUSH
44748: LD_EXP 68
44752: PUSH
44753: LD_VAR 0 3
44757: ARRAY
44758: PUSH
44759: LD_VAR 0 1
44763: DIFF
44764: PPUSH
44765: CALL_OW 1
44769: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
44770: LD_VAR 0 1
44774: PUSH
44775: LD_EXP 71
44779: PUSH
44780: LD_VAR 0 3
44784: ARRAY
44785: IN
44786: IFFALSE 44825
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44788: LD_ADDR_EXP 71
44792: PUSH
44793: LD_EXP 71
44797: PPUSH
44798: LD_VAR 0 3
44802: PPUSH
44803: LD_EXP 71
44807: PUSH
44808: LD_VAR 0 3
44812: ARRAY
44813: PUSH
44814: LD_VAR 0 1
44818: DIFF
44819: PPUSH
44820: CALL_OW 1
44824: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
44825: LD_VAR 0 1
44829: PUSH
44830: LD_EXP 58
44834: PUSH
44835: LD_VAR 0 3
44839: ARRAY
44840: IN
44841: IFFALSE 44880
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
44843: LD_ADDR_EXP 58
44847: PUSH
44848: LD_EXP 58
44852: PPUSH
44853: LD_VAR 0 3
44857: PPUSH
44858: LD_EXP 58
44862: PUSH
44863: LD_VAR 0 3
44867: ARRAY
44868: PUSH
44869: LD_VAR 0 1
44873: DIFF
44874: PPUSH
44875: CALL_OW 1
44879: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
44880: LD_VAR 0 1
44884: PUSH
44885: LD_EXP 57
44889: PUSH
44890: LD_VAR 0 3
44894: ARRAY
44895: IN
44896: IFFALSE 44935
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
44898: LD_ADDR_EXP 57
44902: PUSH
44903: LD_EXP 57
44907: PPUSH
44908: LD_VAR 0 3
44912: PPUSH
44913: LD_EXP 57
44917: PUSH
44918: LD_VAR 0 3
44922: ARRAY
44923: PUSH
44924: LD_VAR 0 1
44928: DIFF
44929: PPUSH
44930: CALL_OW 1
44934: ST_TO_ADDR
// end ; break ;
44935: GO 44939
// end ;
44937: GO 43719
44939: POP
44940: POP
// end ;
44941: LD_VAR 0 2
44945: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
44946: LD_INT 0
44948: PPUSH
44949: PPUSH
44950: PPUSH
// if not mc_bases or not skirmish then
44951: LD_EXP 49
44955: NOT
44956: PUSH
44957: LD_EXP 47
44961: NOT
44962: OR
44963: IFFALSE 44967
// exit ;
44965: GO 45182
// for i = 1 to mc_bases do
44967: LD_ADDR_VAR 0 3
44971: PUSH
44972: DOUBLE
44973: LD_INT 1
44975: DEC
44976: ST_TO_ADDR
44977: LD_EXP 49
44981: PUSH
44982: FOR_TO
44983: IFFALSE 45180
// begin if building in mc_construct_list [ i ] then
44985: LD_VAR 0 1
44989: PUSH
44990: LD_EXP 56
44994: PUSH
44995: LD_VAR 0 3
44999: ARRAY
45000: IN
45001: IFFALSE 45178
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45003: LD_ADDR_EXP 56
45007: PUSH
45008: LD_EXP 56
45012: PPUSH
45013: LD_VAR 0 3
45017: PPUSH
45018: LD_EXP 56
45022: PUSH
45023: LD_VAR 0 3
45027: ARRAY
45028: PUSH
45029: LD_VAR 0 1
45033: DIFF
45034: PPUSH
45035: CALL_OW 1
45039: ST_TO_ADDR
// if building in mc_lab [ i ] then
45040: LD_VAR 0 1
45044: PUSH
45045: LD_EXP 82
45049: PUSH
45050: LD_VAR 0 3
45054: ARRAY
45055: IN
45056: IFFALSE 45111
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
45058: LD_ADDR_EXP 83
45062: PUSH
45063: LD_EXP 83
45067: PPUSH
45068: LD_VAR 0 3
45072: PPUSH
45073: LD_EXP 83
45077: PUSH
45078: LD_VAR 0 3
45082: ARRAY
45083: PPUSH
45084: LD_INT 1
45086: PPUSH
45087: LD_EXP 83
45091: PUSH
45092: LD_VAR 0 3
45096: ARRAY
45097: PPUSH
45098: LD_INT 0
45100: PPUSH
45101: CALL 53002 0 4
45105: PPUSH
45106: CALL_OW 1
45110: ST_TO_ADDR
// if not building in mc_bases [ i ] then
45111: LD_VAR 0 1
45115: PUSH
45116: LD_EXP 49
45120: PUSH
45121: LD_VAR 0 3
45125: ARRAY
45126: IN
45127: NOT
45128: IFFALSE 45174
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45130: LD_ADDR_EXP 49
45134: PUSH
45135: LD_EXP 49
45139: PPUSH
45140: LD_VAR 0 3
45144: PUSH
45145: LD_EXP 49
45149: PUSH
45150: LD_VAR 0 3
45154: ARRAY
45155: PUSH
45156: LD_INT 1
45158: PLUS
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL 53584 0 3
45173: ST_TO_ADDR
// exit ;
45174: POP
45175: POP
45176: GO 45182
// end ; end ;
45178: GO 44982
45180: POP
45181: POP
// end ;
45182: LD_VAR 0 2
45186: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
45187: LD_INT 0
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
// if not mc_bases or not skirmish then
45196: LD_EXP 49
45200: NOT
45201: PUSH
45202: LD_EXP 47
45206: NOT
45207: OR
45208: IFFALSE 45212
// exit ;
45210: GO 45873
// for i = 1 to mc_bases do
45212: LD_ADDR_VAR 0 3
45216: PUSH
45217: DOUBLE
45218: LD_INT 1
45220: DEC
45221: ST_TO_ADDR
45222: LD_EXP 49
45226: PUSH
45227: FOR_TO
45228: IFFALSE 45871
// begin if building in mc_construct_list [ i ] then
45230: LD_VAR 0 1
45234: PUSH
45235: LD_EXP 56
45239: PUSH
45240: LD_VAR 0 3
45244: ARRAY
45245: IN
45246: IFFALSE 45869
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45248: LD_ADDR_EXP 56
45252: PUSH
45253: LD_EXP 56
45257: PPUSH
45258: LD_VAR 0 3
45262: PPUSH
45263: LD_EXP 56
45267: PUSH
45268: LD_VAR 0 3
45272: ARRAY
45273: PUSH
45274: LD_VAR 0 1
45278: DIFF
45279: PPUSH
45280: CALL_OW 1
45284: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45285: LD_ADDR_EXP 49
45289: PUSH
45290: LD_EXP 49
45294: PPUSH
45295: LD_VAR 0 3
45299: PUSH
45300: LD_EXP 49
45304: PUSH
45305: LD_VAR 0 3
45309: ARRAY
45310: PUSH
45311: LD_INT 1
45313: PLUS
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PPUSH
45319: LD_VAR 0 1
45323: PPUSH
45324: CALL 53584 0 3
45328: ST_TO_ADDR
// btype := GetBType ( building ) ;
45329: LD_ADDR_VAR 0 5
45333: PUSH
45334: LD_VAR 0 1
45338: PPUSH
45339: CALL_OW 266
45343: ST_TO_ADDR
// side := GetSide ( building ) ;
45344: LD_ADDR_VAR 0 8
45348: PUSH
45349: LD_VAR 0 1
45353: PPUSH
45354: CALL_OW 255
45358: ST_TO_ADDR
// if btype = b_lab then
45359: LD_VAR 0 5
45363: PUSH
45364: LD_INT 6
45366: EQUAL
45367: IFFALSE 45417
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
45369: LD_ADDR_EXP 82
45373: PUSH
45374: LD_EXP 82
45378: PPUSH
45379: LD_VAR 0 3
45383: PUSH
45384: LD_EXP 82
45388: PUSH
45389: LD_VAR 0 3
45393: ARRAY
45394: PUSH
45395: LD_INT 1
45397: PLUS
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PPUSH
45403: LD_VAR 0 1
45407: PPUSH
45408: CALL 53584 0 3
45412: ST_TO_ADDR
// exit ;
45413: POP
45414: POP
45415: GO 45873
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
45417: LD_VAR 0 5
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: LD_INT 4
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: IN
45436: IFFALSE 45560
// begin if btype = b_armoury then
45438: LD_VAR 0 5
45442: PUSH
45443: LD_INT 4
45445: EQUAL
45446: IFFALSE 45456
// btype := b_barracks ;
45448: LD_ADDR_VAR 0 5
45452: PUSH
45453: LD_INT 5
45455: ST_TO_ADDR
// if btype = b_depot then
45456: LD_VAR 0 5
45460: PUSH
45461: LD_INT 0
45463: EQUAL
45464: IFFALSE 45474
// btype := b_warehouse ;
45466: LD_ADDR_VAR 0 5
45470: PUSH
45471: LD_INT 1
45473: ST_TO_ADDR
// if btype = b_workshop then
45474: LD_VAR 0 5
45478: PUSH
45479: LD_INT 2
45481: EQUAL
45482: IFFALSE 45492
// btype := b_factory ;
45484: LD_ADDR_VAR 0 5
45488: PUSH
45489: LD_INT 3
45491: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
45492: LD_VAR 0 5
45496: PPUSH
45497: LD_VAR 0 8
45501: PPUSH
45502: CALL_OW 323
45506: PUSH
45507: LD_INT 1
45509: EQUAL
45510: IFFALSE 45556
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
45512: LD_ADDR_EXP 81
45516: PUSH
45517: LD_EXP 81
45521: PPUSH
45522: LD_VAR 0 3
45526: PUSH
45527: LD_EXP 81
45531: PUSH
45532: LD_VAR 0 3
45536: ARRAY
45537: PUSH
45538: LD_INT 1
45540: PLUS
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PPUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL 53584 0 3
45555: ST_TO_ADDR
// exit ;
45556: POP
45557: POP
45558: GO 45873
// end ; if btype in [ b_bunker , b_turret ] then
45560: LD_VAR 0 5
45564: PUSH
45565: LD_INT 32
45567: PUSH
45568: LD_INT 33
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: IN
45575: IFFALSE 45865
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
45577: LD_ADDR_EXP 57
45581: PUSH
45582: LD_EXP 57
45586: PPUSH
45587: LD_VAR 0 3
45591: PUSH
45592: LD_EXP 57
45596: PUSH
45597: LD_VAR 0 3
45601: ARRAY
45602: PUSH
45603: LD_INT 1
45605: PLUS
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PPUSH
45611: LD_VAR 0 1
45615: PPUSH
45616: CALL 53584 0 3
45620: ST_TO_ADDR
// if btype = b_bunker then
45621: LD_VAR 0 5
45625: PUSH
45626: LD_INT 32
45628: EQUAL
45629: IFFALSE 45865
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
45631: LD_ADDR_EXP 58
45635: PUSH
45636: LD_EXP 58
45640: PPUSH
45641: LD_VAR 0 3
45645: PUSH
45646: LD_EXP 58
45650: PUSH
45651: LD_VAR 0 3
45655: ARRAY
45656: PUSH
45657: LD_INT 1
45659: PLUS
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PPUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL 53584 0 3
45674: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
45675: LD_ADDR_VAR 0 6
45679: PUSH
45680: LD_EXP 49
45684: PUSH
45685: LD_VAR 0 3
45689: ARRAY
45690: PPUSH
45691: LD_INT 25
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 54
45706: PUSH
45707: EMPTY
45708: LIST
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PPUSH
45718: CALL_OW 72
45722: ST_TO_ADDR
// if tmp then
45723: LD_VAR 0 6
45727: IFFALSE 45733
// exit ;
45729: POP
45730: POP
45731: GO 45873
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45733: LD_ADDR_VAR 0 6
45737: PUSH
45738: LD_EXP 49
45742: PUSH
45743: LD_VAR 0 3
45747: ARRAY
45748: PPUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 30
45754: PUSH
45755: LD_INT 4
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 30
45764: PUSH
45765: LD_INT 5
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: PPUSH
45777: CALL_OW 72
45781: ST_TO_ADDR
// if not tmp then
45782: LD_VAR 0 6
45786: NOT
45787: IFFALSE 45793
// exit ;
45789: POP
45790: POP
45791: GO 45873
// for j in tmp do
45793: LD_ADDR_VAR 0 4
45797: PUSH
45798: LD_VAR 0 6
45802: PUSH
45803: FOR_IN
45804: IFFALSE 45863
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
45806: LD_ADDR_VAR 0 7
45810: PUSH
45811: LD_VAR 0 4
45815: PPUSH
45816: CALL_OW 313
45820: PPUSH
45821: LD_INT 25
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PPUSH
45831: CALL_OW 72
45835: ST_TO_ADDR
// if units then
45836: LD_VAR 0 7
45840: IFFALSE 45861
// begin ComExitBuilding ( units [ 1 ] ) ;
45842: LD_VAR 0 7
45846: PUSH
45847: LD_INT 1
45849: ARRAY
45850: PPUSH
45851: CALL_OW 122
// exit ;
45855: POP
45856: POP
45857: POP
45858: POP
45859: GO 45873
// end ; end ;
45861: GO 45803
45863: POP
45864: POP
// end ; end ; exit ;
45865: POP
45866: POP
45867: GO 45873
// end ; end ;
45869: GO 45227
45871: POP
45872: POP
// end ;
45873: LD_VAR 0 2
45877: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
45878: LD_INT 0
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
// if not mc_bases or not skirmish then
45887: LD_EXP 49
45891: NOT
45892: PUSH
45893: LD_EXP 47
45897: NOT
45898: OR
45899: IFFALSE 45903
// exit ;
45901: GO 46134
// btype := GetBType ( building ) ;
45903: LD_ADDR_VAR 0 6
45907: PUSH
45908: LD_VAR 0 1
45912: PPUSH
45913: CALL_OW 266
45917: ST_TO_ADDR
// x := GetX ( building ) ;
45918: LD_ADDR_VAR 0 7
45922: PUSH
45923: LD_VAR 0 1
45927: PPUSH
45928: CALL_OW 250
45932: ST_TO_ADDR
// y := GetY ( building ) ;
45933: LD_ADDR_VAR 0 8
45937: PUSH
45938: LD_VAR 0 1
45942: PPUSH
45943: CALL_OW 251
45947: ST_TO_ADDR
// d := GetDir ( building ) ;
45948: LD_ADDR_VAR 0 9
45952: PUSH
45953: LD_VAR 0 1
45957: PPUSH
45958: CALL_OW 254
45962: ST_TO_ADDR
// for i = 1 to mc_bases do
45963: LD_ADDR_VAR 0 4
45967: PUSH
45968: DOUBLE
45969: LD_INT 1
45971: DEC
45972: ST_TO_ADDR
45973: LD_EXP 49
45977: PUSH
45978: FOR_TO
45979: IFFALSE 46132
// begin if not mc_build_list [ i ] then
45981: LD_EXP 54
45985: PUSH
45986: LD_VAR 0 4
45990: ARRAY
45991: NOT
45992: IFFALSE 45996
// continue ;
45994: GO 45978
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
45996: LD_VAR 0 6
46000: PUSH
46001: LD_VAR 0 7
46005: PUSH
46006: LD_VAR 0 8
46010: PUSH
46011: LD_VAR 0 9
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: PPUSH
46022: LD_EXP 54
46026: PUSH
46027: LD_VAR 0 4
46031: ARRAY
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PPUSH
46037: CALL 59753 0 2
46041: IFFALSE 46130
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
46043: LD_ADDR_EXP 54
46047: PUSH
46048: LD_EXP 54
46052: PPUSH
46053: LD_VAR 0 4
46057: PPUSH
46058: LD_EXP 54
46062: PUSH
46063: LD_VAR 0 4
46067: ARRAY
46068: PPUSH
46069: LD_INT 1
46071: PPUSH
46072: CALL_OW 3
46076: PPUSH
46077: CALL_OW 1
46081: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
46082: LD_ADDR_EXP 56
46086: PUSH
46087: LD_EXP 56
46091: PPUSH
46092: LD_VAR 0 4
46096: PUSH
46097: LD_EXP 56
46101: PUSH
46102: LD_VAR 0 4
46106: ARRAY
46107: PUSH
46108: LD_INT 1
46110: PLUS
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PPUSH
46116: LD_VAR 0 1
46120: PPUSH
46121: CALL 53584 0 3
46125: ST_TO_ADDR
// exit ;
46126: POP
46127: POP
46128: GO 46134
// end ; end ;
46130: GO 45978
46132: POP
46133: POP
// end ;
46134: LD_VAR 0 3
46138: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
46139: LD_INT 0
46141: PPUSH
46142: PPUSH
46143: PPUSH
// if not mc_bases or not skirmish then
46144: LD_EXP 49
46148: NOT
46149: PUSH
46150: LD_EXP 47
46154: NOT
46155: OR
46156: IFFALSE 46160
// exit ;
46158: GO 46350
// for i = 1 to mc_bases do
46160: LD_ADDR_VAR 0 4
46164: PUSH
46165: DOUBLE
46166: LD_INT 1
46168: DEC
46169: ST_TO_ADDR
46170: LD_EXP 49
46174: PUSH
46175: FOR_TO
46176: IFFALSE 46263
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
46178: LD_VAR 0 1
46182: PUSH
46183: LD_EXP 57
46187: PUSH
46188: LD_VAR 0 4
46192: ARRAY
46193: IN
46194: PUSH
46195: LD_VAR 0 1
46199: PUSH
46200: LD_EXP 58
46204: PUSH
46205: LD_VAR 0 4
46209: ARRAY
46210: IN
46211: NOT
46212: AND
46213: IFFALSE 46261
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46215: LD_ADDR_EXP 58
46219: PUSH
46220: LD_EXP 58
46224: PPUSH
46225: LD_VAR 0 4
46229: PUSH
46230: LD_EXP 58
46234: PUSH
46235: LD_VAR 0 4
46239: ARRAY
46240: PUSH
46241: LD_INT 1
46243: PLUS
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PPUSH
46249: LD_VAR 0 1
46253: PPUSH
46254: CALL 53584 0 3
46258: ST_TO_ADDR
// break ;
46259: GO 46263
// end ; end ;
46261: GO 46175
46263: POP
46264: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
46265: LD_VAR 0 1
46269: PPUSH
46270: CALL_OW 257
46274: PUSH
46275: LD_EXP 75
46279: IN
46280: PUSH
46281: LD_VAR 0 1
46285: PPUSH
46286: CALL_OW 266
46290: PUSH
46291: LD_INT 5
46293: EQUAL
46294: AND
46295: PUSH
46296: LD_VAR 0 2
46300: PPUSH
46301: CALL_OW 110
46305: PUSH
46306: LD_INT 18
46308: NONEQUAL
46309: AND
46310: IFFALSE 46350
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
46312: LD_VAR 0 2
46316: PPUSH
46317: CALL_OW 257
46321: PUSH
46322: LD_INT 5
46324: PUSH
46325: LD_INT 8
46327: PUSH
46328: LD_INT 9
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: IN
46336: IFFALSE 46350
// SetClass ( unit , 1 ) ;
46338: LD_VAR 0 2
46342: PPUSH
46343: LD_INT 1
46345: PPUSH
46346: CALL_OW 336
// end ;
46350: LD_VAR 0 3
46354: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
46355: LD_INT 0
46357: PPUSH
46358: PPUSH
// if not mc_bases or not skirmish then
46359: LD_EXP 49
46363: NOT
46364: PUSH
46365: LD_EXP 47
46369: NOT
46370: OR
46371: IFFALSE 46375
// exit ;
46373: GO 46491
// if GetLives ( abandoned_vehicle ) > 250 then
46375: LD_VAR 0 2
46379: PPUSH
46380: CALL_OW 256
46384: PUSH
46385: LD_INT 250
46387: GREATER
46388: IFFALSE 46392
// exit ;
46390: GO 46491
// for i = 1 to mc_bases do
46392: LD_ADDR_VAR 0 6
46396: PUSH
46397: DOUBLE
46398: LD_INT 1
46400: DEC
46401: ST_TO_ADDR
46402: LD_EXP 49
46406: PUSH
46407: FOR_TO
46408: IFFALSE 46489
// begin if driver in mc_bases [ i ] then
46410: LD_VAR 0 1
46414: PUSH
46415: LD_EXP 49
46419: PUSH
46420: LD_VAR 0 6
46424: ARRAY
46425: IN
46426: IFFALSE 46487
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
46428: LD_VAR 0 1
46432: PPUSH
46433: LD_EXP 49
46437: PUSH
46438: LD_VAR 0 6
46442: ARRAY
46443: PPUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 30
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 30
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: PPUSH
46472: CALL_OW 72
46476: PUSH
46477: LD_INT 1
46479: ARRAY
46480: PPUSH
46481: CALL_OW 112
// break ;
46485: GO 46489
// end ; end ;
46487: GO 46407
46489: POP
46490: POP
// end ; end_of_file
46491: LD_VAR 0 5
46495: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46496: LD_INT 0
46498: PPUSH
46499: PPUSH
// if exist_mode then
46500: LD_VAR 0 2
46504: IFFALSE 46529
// unit := CreateCharacter ( prefix & ident ) else
46506: LD_ADDR_VAR 0 5
46510: PUSH
46511: LD_VAR 0 3
46515: PUSH
46516: LD_VAR 0 1
46520: STR
46521: PPUSH
46522: CALL_OW 34
46526: ST_TO_ADDR
46527: GO 46544
// unit := NewCharacter ( ident ) ;
46529: LD_ADDR_VAR 0 5
46533: PUSH
46534: LD_VAR 0 1
46538: PPUSH
46539: CALL_OW 25
46543: ST_TO_ADDR
// result := unit ;
46544: LD_ADDR_VAR 0 4
46548: PUSH
46549: LD_VAR 0 5
46553: ST_TO_ADDR
// end ;
46554: LD_VAR 0 4
46558: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46559: LD_INT 0
46561: PPUSH
46562: PPUSH
// if not side or not nation then
46563: LD_VAR 0 1
46567: NOT
46568: PUSH
46569: LD_VAR 0 2
46573: NOT
46574: OR
46575: IFFALSE 46579
// exit ;
46577: GO 47223
// case nation of nation_american :
46579: LD_VAR 0 2
46583: PUSH
46584: LD_INT 1
46586: DOUBLE
46587: EQUAL
46588: IFTRUE 46592
46590: GO 46766
46592: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
46593: LD_ADDR_VAR 0 4
46597: PUSH
46598: LD_INT 35
46600: PUSH
46601: LD_INT 45
46603: PUSH
46604: LD_INT 46
46606: PUSH
46607: LD_INT 47
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 6
46618: PUSH
46619: LD_INT 15
46621: PUSH
46622: LD_INT 16
46624: PUSH
46625: LD_INT 7
46627: PUSH
46628: LD_INT 12
46630: PUSH
46631: LD_INT 13
46633: PUSH
46634: LD_INT 10
46636: PUSH
46637: LD_INT 14
46639: PUSH
46640: LD_INT 20
46642: PUSH
46643: LD_INT 21
46645: PUSH
46646: LD_INT 22
46648: PUSH
46649: LD_INT 25
46651: PUSH
46652: LD_INT 32
46654: PUSH
46655: LD_INT 27
46657: PUSH
46658: LD_INT 36
46660: PUSH
46661: LD_INT 69
46663: PUSH
46664: LD_INT 39
46666: PUSH
46667: LD_INT 34
46669: PUSH
46670: LD_INT 40
46672: PUSH
46673: LD_INT 48
46675: PUSH
46676: LD_INT 49
46678: PUSH
46679: LD_INT 50
46681: PUSH
46682: LD_INT 51
46684: PUSH
46685: LD_INT 52
46687: PUSH
46688: LD_INT 53
46690: PUSH
46691: LD_INT 54
46693: PUSH
46694: LD_INT 55
46696: PUSH
46697: LD_INT 56
46699: PUSH
46700: LD_INT 57
46702: PUSH
46703: LD_INT 58
46705: PUSH
46706: LD_INT 59
46708: PUSH
46709: LD_INT 60
46711: PUSH
46712: LD_INT 61
46714: PUSH
46715: LD_INT 62
46717: PUSH
46718: LD_INT 80
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: ST_TO_ADDR
46764: GO 47147
46766: LD_INT 2
46768: DOUBLE
46769: EQUAL
46770: IFTRUE 46774
46772: GO 46956
46774: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
46775: LD_ADDR_VAR 0 4
46779: PUSH
46780: LD_INT 35
46782: PUSH
46783: LD_INT 45
46785: PUSH
46786: LD_INT 46
46788: PUSH
46789: LD_INT 47
46791: PUSH
46792: LD_INT 70
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 11
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 4
46806: PUSH
46807: LD_INT 5
46809: PUSH
46810: LD_INT 6
46812: PUSH
46813: LD_INT 15
46815: PUSH
46816: LD_INT 18
46818: PUSH
46819: LD_INT 7
46821: PUSH
46822: LD_INT 17
46824: PUSH
46825: LD_INT 8
46827: PUSH
46828: LD_INT 20
46830: PUSH
46831: LD_INT 21
46833: PUSH
46834: LD_INT 22
46836: PUSH
46837: LD_INT 72
46839: PUSH
46840: LD_INT 26
46842: PUSH
46843: LD_INT 69
46845: PUSH
46846: LD_INT 39
46848: PUSH
46849: LD_INT 40
46851: PUSH
46852: LD_INT 41
46854: PUSH
46855: LD_INT 42
46857: PUSH
46858: LD_INT 43
46860: PUSH
46861: LD_INT 48
46863: PUSH
46864: LD_INT 49
46866: PUSH
46867: LD_INT 50
46869: PUSH
46870: LD_INT 51
46872: PUSH
46873: LD_INT 52
46875: PUSH
46876: LD_INT 53
46878: PUSH
46879: LD_INT 54
46881: PUSH
46882: LD_INT 55
46884: PUSH
46885: LD_INT 56
46887: PUSH
46888: LD_INT 60
46890: PUSH
46891: LD_INT 61
46893: PUSH
46894: LD_INT 62
46896: PUSH
46897: LD_INT 66
46899: PUSH
46900: LD_INT 67
46902: PUSH
46903: LD_INT 68
46905: PUSH
46906: LD_INT 81
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
46954: GO 47147
46956: LD_INT 3
46958: DOUBLE
46959: EQUAL
46960: IFTRUE 46964
46962: GO 47146
46964: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
46965: LD_ADDR_VAR 0 4
46969: PUSH
46970: LD_INT 46
46972: PUSH
46973: LD_INT 47
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: LD_INT 11
46984: PUSH
46985: LD_INT 9
46987: PUSH
46988: LD_INT 20
46990: PUSH
46991: LD_INT 19
46993: PUSH
46994: LD_INT 21
46996: PUSH
46997: LD_INT 24
46999: PUSH
47000: LD_INT 22
47002: PUSH
47003: LD_INT 25
47005: PUSH
47006: LD_INT 28
47008: PUSH
47009: LD_INT 29
47011: PUSH
47012: LD_INT 30
47014: PUSH
47015: LD_INT 31
47017: PUSH
47018: LD_INT 37
47020: PUSH
47021: LD_INT 38
47023: PUSH
47024: LD_INT 32
47026: PUSH
47027: LD_INT 27
47029: PUSH
47030: LD_INT 33
47032: PUSH
47033: LD_INT 69
47035: PUSH
47036: LD_INT 39
47038: PUSH
47039: LD_INT 34
47041: PUSH
47042: LD_INT 40
47044: PUSH
47045: LD_INT 71
47047: PUSH
47048: LD_INT 23
47050: PUSH
47051: LD_INT 44
47053: PUSH
47054: LD_INT 48
47056: PUSH
47057: LD_INT 49
47059: PUSH
47060: LD_INT 50
47062: PUSH
47063: LD_INT 51
47065: PUSH
47066: LD_INT 52
47068: PUSH
47069: LD_INT 53
47071: PUSH
47072: LD_INT 54
47074: PUSH
47075: LD_INT 55
47077: PUSH
47078: LD_INT 56
47080: PUSH
47081: LD_INT 57
47083: PUSH
47084: LD_INT 58
47086: PUSH
47087: LD_INT 59
47089: PUSH
47090: LD_INT 63
47092: PUSH
47093: LD_INT 64
47095: PUSH
47096: LD_INT 65
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
47144: GO 47147
47146: POP
// if state > - 1 and state < 3 then
47147: LD_VAR 0 3
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: GREATER
47156: PUSH
47157: LD_VAR 0 3
47161: PUSH
47162: LD_INT 3
47164: LESS
47165: AND
47166: IFFALSE 47223
// for i in result do
47168: LD_ADDR_VAR 0 5
47172: PUSH
47173: LD_VAR 0 4
47177: PUSH
47178: FOR_IN
47179: IFFALSE 47221
// if GetTech ( i , side ) <> state then
47181: LD_VAR 0 5
47185: PPUSH
47186: LD_VAR 0 1
47190: PPUSH
47191: CALL_OW 321
47195: PUSH
47196: LD_VAR 0 3
47200: NONEQUAL
47201: IFFALSE 47219
// result := result diff i ;
47203: LD_ADDR_VAR 0 4
47207: PUSH
47208: LD_VAR 0 4
47212: PUSH
47213: LD_VAR 0 5
47217: DIFF
47218: ST_TO_ADDR
47219: GO 47178
47221: POP
47222: POP
// end ;
47223: LD_VAR 0 4
47227: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47228: LD_INT 0
47230: PPUSH
47231: PPUSH
47232: PPUSH
// result := true ;
47233: LD_ADDR_VAR 0 3
47237: PUSH
47238: LD_INT 1
47240: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47241: LD_ADDR_VAR 0 5
47245: PUSH
47246: LD_VAR 0 2
47250: PPUSH
47251: CALL_OW 480
47255: ST_TO_ADDR
// if not tmp then
47256: LD_VAR 0 5
47260: NOT
47261: IFFALSE 47265
// exit ;
47263: GO 47314
// for i in tmp do
47265: LD_ADDR_VAR 0 4
47269: PUSH
47270: LD_VAR 0 5
47274: PUSH
47275: FOR_IN
47276: IFFALSE 47312
// if GetTech ( i , side ) <> state_researched then
47278: LD_VAR 0 4
47282: PPUSH
47283: LD_VAR 0 1
47287: PPUSH
47288: CALL_OW 321
47292: PUSH
47293: LD_INT 2
47295: NONEQUAL
47296: IFFALSE 47310
// begin result := false ;
47298: LD_ADDR_VAR 0 3
47302: PUSH
47303: LD_INT 0
47305: ST_TO_ADDR
// exit ;
47306: POP
47307: POP
47308: GO 47314
// end ;
47310: GO 47275
47312: POP
47313: POP
// end ;
47314: LD_VAR 0 3
47318: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47319: LD_INT 0
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
47325: PPUSH
47326: PPUSH
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47334: LD_VAR 0 1
47338: NOT
47339: PUSH
47340: LD_VAR 0 1
47344: PPUSH
47345: CALL_OW 257
47349: PUSH
47350: LD_INT 9
47352: NONEQUAL
47353: OR
47354: IFFALSE 47358
// exit ;
47356: GO 47931
// side := GetSide ( unit ) ;
47358: LD_ADDR_VAR 0 9
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 255
47372: ST_TO_ADDR
// tech_space := tech_spacanom ;
47373: LD_ADDR_VAR 0 12
47377: PUSH
47378: LD_INT 29
47380: ST_TO_ADDR
// tech_time := tech_taurad ;
47381: LD_ADDR_VAR 0 13
47385: PUSH
47386: LD_INT 28
47388: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47389: LD_ADDR_VAR 0 11
47393: PUSH
47394: LD_VAR 0 1
47398: PPUSH
47399: CALL_OW 310
47403: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47404: LD_VAR 0 11
47408: PPUSH
47409: CALL_OW 247
47413: PUSH
47414: LD_INT 2
47416: EQUAL
47417: IFFALSE 47421
// exit ;
47419: GO 47931
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47421: LD_ADDR_VAR 0 8
47425: PUSH
47426: LD_INT 81
47428: PUSH
47429: LD_VAR 0 9
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: PUSH
47441: LD_INT 21
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PPUSH
47459: CALL_OW 69
47463: ST_TO_ADDR
// if not tmp then
47464: LD_VAR 0 8
47468: NOT
47469: IFFALSE 47473
// exit ;
47471: GO 47931
// if in_unit then
47473: LD_VAR 0 11
47477: IFFALSE 47501
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47479: LD_ADDR_VAR 0 10
47483: PUSH
47484: LD_VAR 0 8
47488: PPUSH
47489: LD_VAR 0 11
47493: PPUSH
47494: CALL_OW 74
47498: ST_TO_ADDR
47499: GO 47521
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47501: LD_ADDR_VAR 0 10
47505: PUSH
47506: LD_VAR 0 8
47510: PPUSH
47511: LD_VAR 0 1
47515: PPUSH
47516: CALL_OW 74
47520: ST_TO_ADDR
// if not enemy then
47521: LD_VAR 0 10
47525: NOT
47526: IFFALSE 47530
// exit ;
47528: GO 47931
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47530: LD_VAR 0 11
47534: PUSH
47535: LD_VAR 0 11
47539: PPUSH
47540: LD_VAR 0 10
47544: PPUSH
47545: CALL_OW 296
47549: PUSH
47550: LD_INT 13
47552: GREATER
47553: AND
47554: PUSH
47555: LD_VAR 0 1
47559: PPUSH
47560: LD_VAR 0 10
47564: PPUSH
47565: CALL_OW 296
47569: PUSH
47570: LD_INT 12
47572: GREATER
47573: OR
47574: IFFALSE 47578
// exit ;
47576: GO 47931
// missile := [ 1 ] ;
47578: LD_ADDR_VAR 0 14
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47589: LD_VAR 0 9
47593: PPUSH
47594: LD_VAR 0 12
47598: PPUSH
47599: CALL_OW 325
47603: IFFALSE 47632
// missile := Insert ( missile , missile + 1 , 2 ) ;
47605: LD_ADDR_VAR 0 14
47609: PUSH
47610: LD_VAR 0 14
47614: PPUSH
47615: LD_VAR 0 14
47619: PUSH
47620: LD_INT 1
47622: PLUS
47623: PPUSH
47624: LD_INT 2
47626: PPUSH
47627: CALL_OW 2
47631: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47632: LD_VAR 0 9
47636: PPUSH
47637: LD_VAR 0 13
47641: PPUSH
47642: CALL_OW 325
47646: PUSH
47647: LD_VAR 0 10
47651: PPUSH
47652: CALL_OW 255
47656: PPUSH
47657: LD_VAR 0 13
47661: PPUSH
47662: CALL_OW 325
47666: NOT
47667: AND
47668: IFFALSE 47697
// missile := Insert ( missile , missile + 1 , 3 ) ;
47670: LD_ADDR_VAR 0 14
47674: PUSH
47675: LD_VAR 0 14
47679: PPUSH
47680: LD_VAR 0 14
47684: PUSH
47685: LD_INT 1
47687: PLUS
47688: PPUSH
47689: LD_INT 3
47691: PPUSH
47692: CALL_OW 2
47696: ST_TO_ADDR
// if missile < 2 then
47697: LD_VAR 0 14
47701: PUSH
47702: LD_INT 2
47704: LESS
47705: IFFALSE 47709
// exit ;
47707: GO 47931
// x := GetX ( enemy ) ;
47709: LD_ADDR_VAR 0 4
47713: PUSH
47714: LD_VAR 0 10
47718: PPUSH
47719: CALL_OW 250
47723: ST_TO_ADDR
// y := GetY ( enemy ) ;
47724: LD_ADDR_VAR 0 5
47728: PUSH
47729: LD_VAR 0 10
47733: PPUSH
47734: CALL_OW 251
47738: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47739: LD_ADDR_VAR 0 6
47743: PUSH
47744: LD_VAR 0 4
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PPUSH
47753: LD_INT 1
47755: PPUSH
47756: CALL_OW 12
47760: PLUS
47761: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47762: LD_ADDR_VAR 0 7
47766: PUSH
47767: LD_VAR 0 5
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PPUSH
47776: LD_INT 1
47778: PPUSH
47779: CALL_OW 12
47783: PLUS
47784: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47785: LD_VAR 0 6
47789: PPUSH
47790: LD_VAR 0 7
47794: PPUSH
47795: CALL_OW 488
47799: NOT
47800: IFFALSE 47822
// begin _x := x ;
47802: LD_ADDR_VAR 0 6
47806: PUSH
47807: LD_VAR 0 4
47811: ST_TO_ADDR
// _y := y ;
47812: LD_ADDR_VAR 0 7
47816: PUSH
47817: LD_VAR 0 5
47821: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: LD_INT 1
47829: PPUSH
47830: LD_VAR 0 14
47834: PPUSH
47835: CALL_OW 12
47839: ST_TO_ADDR
// case i of 1 :
47840: LD_VAR 0 3
47844: PUSH
47845: LD_INT 1
47847: DOUBLE
47848: EQUAL
47849: IFTRUE 47853
47851: GO 47870
47853: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47854: LD_VAR 0 1
47858: PPUSH
47859: LD_VAR 0 10
47863: PPUSH
47864: CALL_OW 115
47868: GO 47931
47870: LD_INT 2
47872: DOUBLE
47873: EQUAL
47874: IFTRUE 47878
47876: GO 47900
47878: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47879: LD_VAR 0 1
47883: PPUSH
47884: LD_VAR 0 6
47888: PPUSH
47889: LD_VAR 0 7
47893: PPUSH
47894: CALL_OW 153
47898: GO 47931
47900: LD_INT 3
47902: DOUBLE
47903: EQUAL
47904: IFTRUE 47908
47906: GO 47930
47908: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47909: LD_VAR 0 1
47913: PPUSH
47914: LD_VAR 0 6
47918: PPUSH
47919: LD_VAR 0 7
47923: PPUSH
47924: CALL_OW 154
47928: GO 47931
47930: POP
// end ;
47931: LD_VAR 0 2
47935: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47936: LD_INT 0
47938: PPUSH
47939: PPUSH
47940: PPUSH
47941: PPUSH
47942: PPUSH
47943: PPUSH
// if not unit or not building then
47944: LD_VAR 0 1
47948: NOT
47949: PUSH
47950: LD_VAR 0 2
47954: NOT
47955: OR
47956: IFFALSE 47960
// exit ;
47958: GO 48118
// x := GetX ( building ) ;
47960: LD_ADDR_VAR 0 5
47964: PUSH
47965: LD_VAR 0 2
47969: PPUSH
47970: CALL_OW 250
47974: ST_TO_ADDR
// y := GetY ( building ) ;
47975: LD_ADDR_VAR 0 6
47979: PUSH
47980: LD_VAR 0 2
47984: PPUSH
47985: CALL_OW 251
47989: ST_TO_ADDR
// for i = 0 to 5 do
47990: LD_ADDR_VAR 0 4
47994: PUSH
47995: DOUBLE
47996: LD_INT 0
47998: DEC
47999: ST_TO_ADDR
48000: LD_INT 5
48002: PUSH
48003: FOR_TO
48004: IFFALSE 48116
// begin _x := ShiftX ( x , i , 3 ) ;
48006: LD_ADDR_VAR 0 7
48010: PUSH
48011: LD_VAR 0 5
48015: PPUSH
48016: LD_VAR 0 4
48020: PPUSH
48021: LD_INT 3
48023: PPUSH
48024: CALL_OW 272
48028: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48029: LD_ADDR_VAR 0 8
48033: PUSH
48034: LD_VAR 0 6
48038: PPUSH
48039: LD_VAR 0 4
48043: PPUSH
48044: LD_INT 3
48046: PPUSH
48047: CALL_OW 273
48051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48052: LD_VAR 0 7
48056: PPUSH
48057: LD_VAR 0 8
48061: PPUSH
48062: CALL_OW 488
48066: NOT
48067: IFFALSE 48071
// continue ;
48069: GO 48003
// if HexInfo ( _x , _y ) = 0 then
48071: LD_VAR 0 7
48075: PPUSH
48076: LD_VAR 0 8
48080: PPUSH
48081: CALL_OW 428
48085: PUSH
48086: LD_INT 0
48088: EQUAL
48089: IFFALSE 48114
// begin ComMoveXY ( unit , _x , _y ) ;
48091: LD_VAR 0 1
48095: PPUSH
48096: LD_VAR 0 7
48100: PPUSH
48101: LD_VAR 0 8
48105: PPUSH
48106: CALL_OW 111
// exit ;
48110: POP
48111: POP
48112: GO 48118
// end ; end ;
48114: GO 48003
48116: POP
48117: POP
// end ;
48118: LD_VAR 0 3
48122: RET
// export function ScanBase ( side , base_area ) ; begin
48123: LD_INT 0
48125: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48126: LD_ADDR_VAR 0 3
48130: PUSH
48131: LD_VAR 0 2
48135: PPUSH
48136: LD_INT 81
48138: PUSH
48139: LD_VAR 0 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PPUSH
48148: CALL_OW 70
48152: ST_TO_ADDR
// end ;
48153: LD_VAR 0 3
48157: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
48158: LD_INT 0
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
48165: LD_VAR 0 1
48169: NOT
48170: PUSH
48171: LD_EXP 49
48175: PUSH
48176: LD_VAR 0 1
48180: ARRAY
48181: NOT
48182: OR
48183: PUSH
48184: LD_VAR 0 2
48188: NOT
48189: OR
48190: PUSH
48191: LD_VAR 0 3
48195: NOT
48196: OR
48197: IFFALSE 48201
// exit ;
48199: GO 48714
// side := mc_sides [ base ] ;
48201: LD_ADDR_VAR 0 6
48205: PUSH
48206: LD_EXP 75
48210: PUSH
48211: LD_VAR 0 1
48215: ARRAY
48216: ST_TO_ADDR
// if not side then
48217: LD_VAR 0 6
48221: NOT
48222: IFFALSE 48226
// exit ;
48224: GO 48714
// for i in solds do
48226: LD_ADDR_VAR 0 7
48230: PUSH
48231: LD_VAR 0 2
48235: PUSH
48236: FOR_IN
48237: IFFALSE 48298
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
48239: LD_VAR 0 7
48243: PPUSH
48244: CALL_OW 310
48248: PPUSH
48249: CALL_OW 266
48253: PUSH
48254: LD_INT 32
48256: PUSH
48257: LD_INT 31
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: IN
48264: IFFALSE 48284
// solds := solds diff i else
48266: LD_ADDR_VAR 0 2
48270: PUSH
48271: LD_VAR 0 2
48275: PUSH
48276: LD_VAR 0 7
48280: DIFF
48281: ST_TO_ADDR
48282: GO 48296
// SetTag ( i , 18 ) ;
48284: LD_VAR 0 7
48288: PPUSH
48289: LD_INT 18
48291: PPUSH
48292: CALL_OW 109
48296: GO 48236
48298: POP
48299: POP
// if not solds then
48300: LD_VAR 0 2
48304: NOT
48305: IFFALSE 48309
// exit ;
48307: GO 48714
// repeat wait ( 0 0$1 ) ;
48309: LD_INT 35
48311: PPUSH
48312: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
48316: LD_ADDR_VAR 0 5
48320: PUSH
48321: LD_VAR 0 6
48325: PPUSH
48326: LD_VAR 0 3
48330: PPUSH
48331: CALL 48123 0 2
48335: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
48336: LD_EXP 49
48340: PUSH
48341: LD_VAR 0 1
48345: ARRAY
48346: NOT
48347: PUSH
48348: LD_EXP 49
48352: PUSH
48353: LD_VAR 0 1
48357: ARRAY
48358: PUSH
48359: EMPTY
48360: EQUAL
48361: OR
48362: IFFALSE 48399
// begin for i in solds do
48364: LD_ADDR_VAR 0 7
48368: PUSH
48369: LD_VAR 0 2
48373: PUSH
48374: FOR_IN
48375: IFFALSE 48388
// ComStop ( i ) ;
48377: LD_VAR 0 7
48381: PPUSH
48382: CALL_OW 141
48386: GO 48374
48388: POP
48389: POP
// solds := [ ] ;
48390: LD_ADDR_VAR 0 2
48394: PUSH
48395: EMPTY
48396: ST_TO_ADDR
// exit ;
48397: GO 48714
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
48399: LD_VAR 0 5
48403: NOT
48404: PUSH
48405: LD_VAR 0 5
48409: PUSH
48410: LD_INT 3
48412: GREATER
48413: OR
48414: PUSH
48415: LD_EXP 71
48419: PUSH
48420: LD_VAR 0 1
48424: ARRAY
48425: OR
48426: IFFALSE 48467
// begin for i in solds do
48428: LD_ADDR_VAR 0 7
48432: PUSH
48433: LD_VAR 0 2
48437: PUSH
48438: FOR_IN
48439: IFFALSE 48463
// if HasTask ( i ) then
48441: LD_VAR 0 7
48445: PPUSH
48446: CALL_OW 314
48450: IFFALSE 48461
// ComStop ( i ) ;
48452: LD_VAR 0 7
48456: PPUSH
48457: CALL_OW 141
48461: GO 48438
48463: POP
48464: POP
// break ;
48465: GO 48702
// end ; for i in solds do
48467: LD_ADDR_VAR 0 7
48471: PUSH
48472: LD_VAR 0 2
48476: PUSH
48477: FOR_IN
48478: IFFALSE 48694
// begin if IsInUnit ( i ) then
48480: LD_VAR 0 7
48484: PPUSH
48485: CALL_OW 310
48489: IFFALSE 48500
// ComExitBuilding ( i ) ;
48491: LD_VAR 0 7
48495: PPUSH
48496: CALL_OW 122
// if GetLives ( i ) > 333 then
48500: LD_VAR 0 7
48504: PPUSH
48505: CALL_OW 256
48509: PUSH
48510: LD_INT 333
48512: GREATER
48513: IFFALSE 48541
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48515: LD_VAR 0 7
48519: PPUSH
48520: LD_VAR 0 5
48524: PPUSH
48525: LD_VAR 0 7
48529: PPUSH
48530: CALL_OW 74
48534: PPUSH
48535: CALL_OW 115
48539: GO 48692
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
48541: LD_ADDR_VAR 0 8
48545: PUSH
48546: LD_EXP 49
48550: PUSH
48551: LD_VAR 0 1
48555: ARRAY
48556: PPUSH
48557: LD_INT 2
48559: PUSH
48560: LD_INT 30
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 30
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 30
48582: PUSH
48583: LD_INT 6
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: PPUSH
48596: CALL_OW 72
48600: PPUSH
48601: LD_VAR 0 7
48605: PPUSH
48606: CALL_OW 74
48610: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
48611: LD_VAR 0 7
48615: PPUSH
48616: LD_VAR 0 8
48620: PPUSH
48621: CALL_OW 250
48625: PPUSH
48626: LD_INT 3
48628: PPUSH
48629: LD_INT 5
48631: PPUSH
48632: CALL_OW 272
48636: PPUSH
48637: LD_VAR 0 8
48641: PPUSH
48642: CALL_OW 251
48646: PPUSH
48647: LD_INT 3
48649: PPUSH
48650: LD_INT 5
48652: PPUSH
48653: CALL_OW 273
48657: PPUSH
48658: CALL_OW 111
// SetTag ( i , 0 ) ;
48662: LD_VAR 0 7
48666: PPUSH
48667: LD_INT 0
48669: PPUSH
48670: CALL_OW 109
// solds := solds diff i ;
48674: LD_ADDR_VAR 0 2
48678: PUSH
48679: LD_VAR 0 2
48683: PUSH
48684: LD_VAR 0 7
48688: DIFF
48689: ST_TO_ADDR
// continue ;
48690: GO 48477
// end ; end ;
48692: GO 48477
48694: POP
48695: POP
// until solds ;
48696: LD_VAR 0 2
48700: IFFALSE 48309
// MC_Reset ( base , 18 ) ;
48702: LD_VAR 0 1
48706: PPUSH
48707: LD_INT 18
48709: PPUSH
48710: CALL 20781 0 2
// end ;
48714: LD_VAR 0 4
48718: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
48719: LD_INT 0
48721: PPUSH
48722: PPUSH
48723: PPUSH
48724: PPUSH
48725: PPUSH
48726: PPUSH
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
48733: PPUSH
48734: PPUSH
48735: PPUSH
48736: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
48737: LD_ADDR_VAR 0 12
48741: PUSH
48742: LD_EXP 49
48746: PUSH
48747: LD_VAR 0 1
48751: ARRAY
48752: PPUSH
48753: LD_INT 25
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PPUSH
48763: CALL_OW 72
48767: ST_TO_ADDR
// if mc_remote_driver [ base ] then
48768: LD_EXP 89
48772: PUSH
48773: LD_VAR 0 1
48777: ARRAY
48778: IFFALSE 48802
// mechs := mechs diff mc_remote_driver [ base ] ;
48780: LD_ADDR_VAR 0 12
48784: PUSH
48785: LD_VAR 0 12
48789: PUSH
48790: LD_EXP 89
48794: PUSH
48795: LD_VAR 0 1
48799: ARRAY
48800: DIFF
48801: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
48802: LD_ADDR_VAR 0 8
48806: PUSH
48807: LD_EXP 49
48811: PUSH
48812: LD_VAR 0 1
48816: ARRAY
48817: PPUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 25
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 25
48833: PUSH
48834: LD_INT 5
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 25
48843: PUSH
48844: LD_INT 8
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 25
48853: PUSH
48854: LD_INT 9
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: PPUSH
48868: CALL_OW 72
48872: ST_TO_ADDR
// if not defenders and not solds then
48873: LD_VAR 0 2
48877: NOT
48878: PUSH
48879: LD_VAR 0 8
48883: NOT
48884: AND
48885: IFFALSE 48889
// exit ;
48887: GO 50415
// depot_under_attack := false ;
48889: LD_ADDR_VAR 0 16
48893: PUSH
48894: LD_INT 0
48896: ST_TO_ADDR
// sold_defenders := [ ] ;
48897: LD_ADDR_VAR 0 17
48901: PUSH
48902: EMPTY
48903: ST_TO_ADDR
// if mechs then
48904: LD_VAR 0 12
48908: IFFALSE 49037
// for i in defenders do
48910: LD_ADDR_VAR 0 5
48914: PUSH
48915: LD_VAR 0 2
48919: PUSH
48920: FOR_IN
48921: IFFALSE 49035
// begin SetTag ( i , 20 ) ;
48923: LD_VAR 0 5
48927: PPUSH
48928: LD_INT 20
48930: PPUSH
48931: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
48935: LD_VAR 0 5
48939: PPUSH
48940: CALL_OW 263
48944: PUSH
48945: LD_INT 1
48947: EQUAL
48948: PUSH
48949: LD_VAR 0 5
48953: PPUSH
48954: CALL_OW 311
48958: NOT
48959: AND
48960: PUSH
48961: LD_VAR 0 12
48965: AND
48966: IFFALSE 49033
// begin un := mechs [ 1 ] ;
48968: LD_ADDR_VAR 0 10
48972: PUSH
48973: LD_VAR 0 12
48977: PUSH
48978: LD_INT 1
48980: ARRAY
48981: ST_TO_ADDR
// ComExitBuilding ( un ) ;
48982: LD_VAR 0 10
48986: PPUSH
48987: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
48991: LD_VAR 0 10
48995: PPUSH
48996: LD_VAR 0 5
49000: PPUSH
49001: CALL_OW 180
// SetTag ( un , 19 ) ;
49005: LD_VAR 0 10
49009: PPUSH
49010: LD_INT 19
49012: PPUSH
49013: CALL_OW 109
// mechs := mechs diff un ;
49017: LD_ADDR_VAR 0 12
49021: PUSH
49022: LD_VAR 0 12
49026: PUSH
49027: LD_VAR 0 10
49031: DIFF
49032: ST_TO_ADDR
// end ; end ;
49033: GO 48920
49035: POP
49036: POP
// if solds then
49037: LD_VAR 0 8
49041: IFFALSE 49100
// for i in solds do
49043: LD_ADDR_VAR 0 5
49047: PUSH
49048: LD_VAR 0 8
49052: PUSH
49053: FOR_IN
49054: IFFALSE 49098
// if not GetTag ( i ) then
49056: LD_VAR 0 5
49060: PPUSH
49061: CALL_OW 110
49065: NOT
49066: IFFALSE 49096
// begin defenders := defenders union i ;
49068: LD_ADDR_VAR 0 2
49072: PUSH
49073: LD_VAR 0 2
49077: PUSH
49078: LD_VAR 0 5
49082: UNION
49083: ST_TO_ADDR
// SetTag ( i , 18 ) ;
49084: LD_VAR 0 5
49088: PPUSH
49089: LD_INT 18
49091: PPUSH
49092: CALL_OW 109
// end ;
49096: GO 49053
49098: POP
49099: POP
// repeat wait ( 0 0$1 ) ;
49100: LD_INT 35
49102: PPUSH
49103: CALL_OW 67
// enemy := mc_scan [ base ] ;
49107: LD_ADDR_VAR 0 3
49111: PUSH
49112: LD_EXP 72
49116: PUSH
49117: LD_VAR 0 1
49121: ARRAY
49122: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
49123: LD_EXP 49
49127: PUSH
49128: LD_VAR 0 1
49132: ARRAY
49133: NOT
49134: PUSH
49135: LD_EXP 49
49139: PUSH
49140: LD_VAR 0 1
49144: ARRAY
49145: PUSH
49146: EMPTY
49147: EQUAL
49148: OR
49149: IFFALSE 49186
// begin for i in defenders do
49151: LD_ADDR_VAR 0 5
49155: PUSH
49156: LD_VAR 0 2
49160: PUSH
49161: FOR_IN
49162: IFFALSE 49175
// ComStop ( i ) ;
49164: LD_VAR 0 5
49168: PPUSH
49169: CALL_OW 141
49173: GO 49161
49175: POP
49176: POP
// defenders := [ ] ;
49177: LD_ADDR_VAR 0 2
49181: PUSH
49182: EMPTY
49183: ST_TO_ADDR
// exit ;
49184: GO 50415
// end ; for i in defenders do
49186: LD_ADDR_VAR 0 5
49190: PUSH
49191: LD_VAR 0 2
49195: PUSH
49196: FOR_IN
49197: IFFALSE 49927
// begin e := NearestUnitToUnit ( enemy , i ) ;
49199: LD_ADDR_VAR 0 13
49203: PUSH
49204: LD_VAR 0 3
49208: PPUSH
49209: LD_VAR 0 5
49213: PPUSH
49214: CALL_OW 74
49218: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
49219: LD_ADDR_VAR 0 16
49223: PUSH
49224: LD_EXP 49
49228: PUSH
49229: LD_VAR 0 1
49233: ARRAY
49234: PPUSH
49235: LD_INT 2
49237: PUSH
49238: LD_INT 30
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 30
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: PPUSH
49263: CALL_OW 72
49267: NOT
49268: PUSH
49269: LD_EXP 49
49273: PUSH
49274: LD_VAR 0 1
49278: ARRAY
49279: PPUSH
49280: LD_INT 2
49282: PUSH
49283: LD_INT 30
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 30
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: PPUSH
49308: CALL_OW 72
49312: PPUSH
49313: CALL_OW 256
49317: PUSH
49318: LD_INT 600
49320: LESS
49321: OR
49322: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
49323: LD_VAR 0 5
49327: PPUSH
49328: CALL_OW 247
49332: PUSH
49333: LD_INT 2
49335: DOUBLE
49336: EQUAL
49337: IFTRUE 49341
49339: GO 49633
49341: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
49342: LD_VAR 0 5
49346: PPUSH
49347: CALL_OW 256
49351: PUSH
49352: LD_INT 650
49354: GREATER
49355: PUSH
49356: LD_VAR 0 5
49360: PPUSH
49361: LD_VAR 0 13
49365: PPUSH
49366: CALL_OW 296
49370: PUSH
49371: LD_INT 40
49373: LESS
49374: PUSH
49375: LD_VAR 0 13
49379: PPUSH
49380: LD_EXP 74
49384: PUSH
49385: LD_VAR 0 1
49389: ARRAY
49390: PPUSH
49391: CALL_OW 308
49395: OR
49396: AND
49397: IFFALSE 49415
// ComAttackUnit ( i , e ) else
49399: LD_VAR 0 5
49403: PPUSH
49404: LD_VAR 0 13
49408: PPUSH
49409: CALL_OW 115
49413: GO 49516
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
49415: LD_VAR 0 13
49419: PPUSH
49420: LD_EXP 74
49424: PUSH
49425: LD_VAR 0 1
49429: ARRAY
49430: PPUSH
49431: CALL_OW 308
49435: NOT
49436: PUSH
49437: LD_VAR 0 5
49441: PPUSH
49442: LD_VAR 0 13
49446: PPUSH
49447: CALL_OW 296
49451: PUSH
49452: LD_INT 40
49454: GREATEREQUAL
49455: AND
49456: PUSH
49457: LD_VAR 0 5
49461: PPUSH
49462: CALL_OW 256
49466: PUSH
49467: LD_INT 650
49469: LESSEQUAL
49470: OR
49471: PUSH
49472: LD_VAR 0 5
49476: PPUSH
49477: LD_EXP 73
49481: PUSH
49482: LD_VAR 0 1
49486: ARRAY
49487: PPUSH
49488: CALL_OW 308
49492: NOT
49493: AND
49494: IFFALSE 49516
// ComMoveToArea ( i , mc_parking [ base ] ) ;
49496: LD_VAR 0 5
49500: PPUSH
49501: LD_EXP 73
49505: PUSH
49506: LD_VAR 0 1
49510: ARRAY
49511: PPUSH
49512: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
49516: LD_VAR 0 5
49520: PPUSH
49521: CALL_OW 256
49525: PUSH
49526: LD_INT 998
49528: LESS
49529: PUSH
49530: LD_VAR 0 5
49534: PPUSH
49535: CALL_OW 263
49539: PUSH
49540: LD_INT 1
49542: EQUAL
49543: AND
49544: PUSH
49545: LD_VAR 0 5
49549: PPUSH
49550: CALL_OW 311
49554: AND
49555: PUSH
49556: LD_VAR 0 5
49560: PPUSH
49561: LD_EXP 73
49565: PUSH
49566: LD_VAR 0 1
49570: ARRAY
49571: PPUSH
49572: CALL_OW 308
49576: AND
49577: IFFALSE 49631
// begin mech := IsDrivenBy ( i ) ;
49579: LD_ADDR_VAR 0 9
49583: PUSH
49584: LD_VAR 0 5
49588: PPUSH
49589: CALL_OW 311
49593: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
49594: LD_VAR 0 9
49598: PPUSH
49599: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
49603: LD_VAR 0 9
49607: PPUSH
49608: LD_VAR 0 5
49612: PPUSH
49613: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
49617: LD_VAR 0 9
49621: PPUSH
49622: LD_VAR 0 5
49626: PPUSH
49627: CALL_OW 180
// end ; end ; unit_human :
49631: GO 49898
49633: LD_INT 1
49635: DOUBLE
49636: EQUAL
49637: IFTRUE 49641
49639: GO 49897
49641: POP
// begin b := IsInUnit ( i ) ;
49642: LD_ADDR_VAR 0 18
49646: PUSH
49647: LD_VAR 0 5
49651: PPUSH
49652: CALL_OW 310
49656: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
49657: LD_ADDR_VAR 0 19
49661: PUSH
49662: LD_VAR 0 18
49666: NOT
49667: PUSH
49668: LD_VAR 0 18
49672: PPUSH
49673: CALL_OW 266
49677: PUSH
49678: LD_INT 32
49680: PUSH
49681: LD_INT 31
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: IN
49688: OR
49689: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
49690: LD_VAR 0 16
49694: PUSH
49695: LD_VAR 0 2
49699: PPUSH
49700: LD_INT 21
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PPUSH
49710: CALL_OW 72
49714: PUSH
49715: LD_INT 1
49717: LESSEQUAL
49718: OR
49719: PUSH
49720: LD_VAR 0 19
49724: AND
49725: PUSH
49726: LD_VAR 0 5
49730: PUSH
49731: LD_VAR 0 17
49735: IN
49736: NOT
49737: AND
49738: IFFALSE 49831
// begin if b then
49740: LD_VAR 0 18
49744: IFFALSE 49793
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
49746: LD_VAR 0 18
49750: PPUSH
49751: LD_VAR 0 3
49755: PPUSH
49756: LD_VAR 0 18
49760: PPUSH
49761: CALL_OW 74
49765: PPUSH
49766: CALL_OW 296
49770: PUSH
49771: LD_INT 10
49773: LESS
49774: PUSH
49775: LD_VAR 0 18
49779: PPUSH
49780: CALL_OW 461
49784: PUSH
49785: LD_INT 7
49787: NONEQUAL
49788: AND
49789: IFFALSE 49793
// continue ;
49791: GO 49196
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
49793: LD_ADDR_VAR 0 17
49797: PUSH
49798: LD_VAR 0 17
49802: PPUSH
49803: LD_VAR 0 17
49807: PUSH
49808: LD_INT 1
49810: PLUS
49811: PPUSH
49812: LD_VAR 0 5
49816: PPUSH
49817: CALL_OW 1
49821: ST_TO_ADDR
// ComExitBuilding ( i ) ;
49822: LD_VAR 0 5
49826: PPUSH
49827: CALL_OW 122
// end ; if sold_defenders then
49831: LD_VAR 0 17
49835: IFFALSE 49895
// if i in sold_defenders then
49837: LD_VAR 0 5
49841: PUSH
49842: LD_VAR 0 17
49846: IN
49847: IFFALSE 49895
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
49849: LD_VAR 0 5
49853: PPUSH
49854: CALL_OW 314
49858: NOT
49859: PUSH
49860: LD_VAR 0 5
49864: PPUSH
49865: LD_VAR 0 13
49869: PPUSH
49870: CALL_OW 296
49874: PUSH
49875: LD_INT 30
49877: LESS
49878: AND
49879: IFFALSE 49895
// ComAttackUnit ( i , e ) ;
49881: LD_VAR 0 5
49885: PPUSH
49886: LD_VAR 0 13
49890: PPUSH
49891: CALL_OW 115
// end ; end ; end ;
49895: GO 49898
49897: POP
// if IsDead ( i ) then
49898: LD_VAR 0 5
49902: PPUSH
49903: CALL_OW 301
49907: IFFALSE 49925
// defenders := defenders diff i ;
49909: LD_ADDR_VAR 0 2
49913: PUSH
49914: LD_VAR 0 2
49918: PUSH
49919: LD_VAR 0 5
49923: DIFF
49924: ST_TO_ADDR
// end ;
49925: GO 49196
49927: POP
49928: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
49929: LD_VAR 0 3
49933: NOT
49934: PUSH
49935: LD_VAR 0 2
49939: NOT
49940: OR
49941: PUSH
49942: LD_EXP 49
49946: PUSH
49947: LD_VAR 0 1
49951: ARRAY
49952: NOT
49953: OR
49954: IFFALSE 49100
// MC_Reset ( base , 18 ) ;
49956: LD_VAR 0 1
49960: PPUSH
49961: LD_INT 18
49963: PPUSH
49964: CALL 20781 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49968: LD_ADDR_VAR 0 2
49972: PUSH
49973: LD_VAR 0 2
49977: PUSH
49978: LD_VAR 0 2
49982: PPUSH
49983: LD_INT 2
49985: PUSH
49986: LD_INT 25
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 25
49998: PUSH
49999: LD_INT 5
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 25
50008: PUSH
50009: LD_INT 8
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 25
50018: PUSH
50019: LD_INT 9
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: PPUSH
50033: CALL_OW 72
50037: DIFF
50038: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
50039: LD_VAR 0 3
50043: NOT
50044: PUSH
50045: LD_VAR 0 2
50049: PPUSH
50050: LD_INT 21
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PPUSH
50060: CALL_OW 72
50064: AND
50065: IFFALSE 50403
// begin tmp := FilterByTag ( defenders , 19 ) ;
50067: LD_ADDR_VAR 0 11
50071: PUSH
50072: LD_VAR 0 2
50076: PPUSH
50077: LD_INT 19
50079: PPUSH
50080: CALL 86844 0 2
50084: ST_TO_ADDR
// if tmp then
50085: LD_VAR 0 11
50089: IFFALSE 50159
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
50091: LD_ADDR_VAR 0 11
50095: PUSH
50096: LD_VAR 0 11
50100: PPUSH
50101: LD_INT 25
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PPUSH
50111: CALL_OW 72
50115: ST_TO_ADDR
// if tmp then
50116: LD_VAR 0 11
50120: IFFALSE 50159
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
50122: LD_ADDR_EXP 61
50126: PUSH
50127: LD_EXP 61
50131: PPUSH
50132: LD_VAR 0 1
50136: PPUSH
50137: LD_EXP 61
50141: PUSH
50142: LD_VAR 0 1
50146: ARRAY
50147: PUSH
50148: LD_VAR 0 11
50152: UNION
50153: PPUSH
50154: CALL_OW 1
50158: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
50159: LD_VAR 0 1
50163: PPUSH
50164: LD_INT 19
50166: PPUSH
50167: CALL 20781 0 2
// repeat wait ( 0 0$1 ) ;
50171: LD_INT 35
50173: PPUSH
50174: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
50178: LD_EXP 49
50182: PUSH
50183: LD_VAR 0 1
50187: ARRAY
50188: NOT
50189: PUSH
50190: LD_EXP 49
50194: PUSH
50195: LD_VAR 0 1
50199: ARRAY
50200: PUSH
50201: EMPTY
50202: EQUAL
50203: OR
50204: IFFALSE 50241
// begin for i in defenders do
50206: LD_ADDR_VAR 0 5
50210: PUSH
50211: LD_VAR 0 2
50215: PUSH
50216: FOR_IN
50217: IFFALSE 50230
// ComStop ( i ) ;
50219: LD_VAR 0 5
50223: PPUSH
50224: CALL_OW 141
50228: GO 50216
50230: POP
50231: POP
// defenders := [ ] ;
50232: LD_ADDR_VAR 0 2
50236: PUSH
50237: EMPTY
50238: ST_TO_ADDR
// exit ;
50239: GO 50415
// end ; for i in defenders do
50241: LD_ADDR_VAR 0 5
50245: PUSH
50246: LD_VAR 0 2
50250: PUSH
50251: FOR_IN
50252: IFFALSE 50341
// begin if not IsInArea ( i , mc_parking [ base ] ) then
50254: LD_VAR 0 5
50258: PPUSH
50259: LD_EXP 73
50263: PUSH
50264: LD_VAR 0 1
50268: ARRAY
50269: PPUSH
50270: CALL_OW 308
50274: NOT
50275: IFFALSE 50299
// ComMoveToArea ( i , mc_parking [ base ] ) else
50277: LD_VAR 0 5
50281: PPUSH
50282: LD_EXP 73
50286: PUSH
50287: LD_VAR 0 1
50291: ARRAY
50292: PPUSH
50293: CALL_OW 113
50297: GO 50339
// if GetControl ( i ) = control_manual then
50299: LD_VAR 0 5
50303: PPUSH
50304: CALL_OW 263
50308: PUSH
50309: LD_INT 1
50311: EQUAL
50312: IFFALSE 50339
// if IsDrivenBy ( i ) then
50314: LD_VAR 0 5
50318: PPUSH
50319: CALL_OW 311
50323: IFFALSE 50339
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
50325: LD_VAR 0 5
50329: PPUSH
50330: CALL_OW 311
50334: PPUSH
50335: CALL_OW 121
// end ;
50339: GO 50251
50341: POP
50342: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
50343: LD_VAR 0 2
50347: PPUSH
50348: LD_INT 95
50350: PUSH
50351: LD_EXP 73
50355: PUSH
50356: LD_VAR 0 1
50360: ARRAY
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PPUSH
50366: CALL_OW 72
50370: PUSH
50371: LD_VAR 0 2
50375: EQUAL
50376: PUSH
50377: LD_EXP 72
50381: PUSH
50382: LD_VAR 0 1
50386: ARRAY
50387: OR
50388: PUSH
50389: LD_EXP 49
50393: PUSH
50394: LD_VAR 0 1
50398: ARRAY
50399: NOT
50400: OR
50401: IFFALSE 50171
// end ; MC_Reset ( base , 20 ) ;
50403: LD_VAR 0 1
50407: PPUSH
50408: LD_INT 20
50410: PPUSH
50411: CALL 20781 0 2
// end ;
50415: LD_VAR 0 4
50419: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
50420: LD_INT 0
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
// result := false ;
50426: LD_ADDR_VAR 0 2
50430: PUSH
50431: LD_INT 0
50433: ST_TO_ADDR
// side := GetSide ( unit ) ;
50434: LD_ADDR_VAR 0 3
50438: PUSH
50439: LD_VAR 0 1
50443: PPUSH
50444: CALL_OW 255
50448: ST_TO_ADDR
// nat := GetNation ( unit ) ;
50449: LD_ADDR_VAR 0 4
50453: PUSH
50454: LD_VAR 0 1
50458: PPUSH
50459: CALL_OW 248
50463: ST_TO_ADDR
// case nat of 1 :
50464: LD_VAR 0 4
50468: PUSH
50469: LD_INT 1
50471: DOUBLE
50472: EQUAL
50473: IFTRUE 50477
50475: GO 50488
50477: POP
// tech := tech_lassight ; 2 :
50478: LD_ADDR_VAR 0 5
50482: PUSH
50483: LD_INT 12
50485: ST_TO_ADDR
50486: GO 50527
50488: LD_INT 2
50490: DOUBLE
50491: EQUAL
50492: IFTRUE 50496
50494: GO 50507
50496: POP
// tech := tech_mortar ; 3 :
50497: LD_ADDR_VAR 0 5
50501: PUSH
50502: LD_INT 41
50504: ST_TO_ADDR
50505: GO 50527
50507: LD_INT 3
50509: DOUBLE
50510: EQUAL
50511: IFTRUE 50515
50513: GO 50526
50515: POP
// tech := tech_bazooka ; end ;
50516: LD_ADDR_VAR 0 5
50520: PUSH
50521: LD_INT 44
50523: ST_TO_ADDR
50524: GO 50527
50526: POP
// if Researched ( side , tech ) then
50527: LD_VAR 0 3
50531: PPUSH
50532: LD_VAR 0 5
50536: PPUSH
50537: CALL_OW 325
50541: IFFALSE 50568
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
50543: LD_ADDR_VAR 0 2
50547: PUSH
50548: LD_INT 5
50550: PUSH
50551: LD_INT 8
50553: PUSH
50554: LD_INT 9
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: PUSH
50562: LD_VAR 0 4
50566: ARRAY
50567: ST_TO_ADDR
// end ;
50568: LD_VAR 0 2
50572: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
50573: LD_INT 0
50575: PPUSH
50576: PPUSH
50577: PPUSH
// if not mines then
50578: LD_VAR 0 2
50582: NOT
50583: IFFALSE 50587
// exit ;
50585: GO 50731
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50587: LD_ADDR_VAR 0 5
50591: PUSH
50592: LD_INT 81
50594: PUSH
50595: LD_VAR 0 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 21
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PPUSH
50625: CALL_OW 69
50629: ST_TO_ADDR
// for i in mines do
50630: LD_ADDR_VAR 0 4
50634: PUSH
50635: LD_VAR 0 2
50639: PUSH
50640: FOR_IN
50641: IFFALSE 50729
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
50643: LD_VAR 0 4
50647: PUSH
50648: LD_INT 1
50650: ARRAY
50651: PPUSH
50652: LD_VAR 0 4
50656: PUSH
50657: LD_INT 2
50659: ARRAY
50660: PPUSH
50661: CALL_OW 458
50665: NOT
50666: IFFALSE 50670
// continue ;
50668: GO 50640
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
50670: LD_VAR 0 4
50674: PUSH
50675: LD_INT 1
50677: ARRAY
50678: PPUSH
50679: LD_VAR 0 4
50683: PUSH
50684: LD_INT 2
50686: ARRAY
50687: PPUSH
50688: CALL_OW 428
50692: PUSH
50693: LD_VAR 0 5
50697: IN
50698: IFFALSE 50727
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
50700: LD_VAR 0 4
50704: PUSH
50705: LD_INT 1
50707: ARRAY
50708: PPUSH
50709: LD_VAR 0 4
50713: PUSH
50714: LD_INT 2
50716: ARRAY
50717: PPUSH
50718: LD_VAR 0 1
50722: PPUSH
50723: CALL_OW 456
// end ;
50727: GO 50640
50729: POP
50730: POP
// end ;
50731: LD_VAR 0 3
50735: RET
// export function Count ( array ) ; var i ; begin
50736: LD_INT 0
50738: PPUSH
50739: PPUSH
// result := 0 ;
50740: LD_ADDR_VAR 0 2
50744: PUSH
50745: LD_INT 0
50747: ST_TO_ADDR
// for i in array do
50748: LD_ADDR_VAR 0 3
50752: PUSH
50753: LD_VAR 0 1
50757: PUSH
50758: FOR_IN
50759: IFFALSE 50783
// if i then
50761: LD_VAR 0 3
50765: IFFALSE 50781
// result := result + 1 ;
50767: LD_ADDR_VAR 0 2
50771: PUSH
50772: LD_VAR 0 2
50776: PUSH
50777: LD_INT 1
50779: PLUS
50780: ST_TO_ADDR
50781: GO 50758
50783: POP
50784: POP
// end ;
50785: LD_VAR 0 2
50789: RET
// export function IsEmpty ( building ) ; begin
50790: LD_INT 0
50792: PPUSH
// if not building then
50793: LD_VAR 0 1
50797: NOT
50798: IFFALSE 50802
// exit ;
50800: GO 50845
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
50802: LD_ADDR_VAR 0 2
50806: PUSH
50807: LD_VAR 0 1
50811: PUSH
50812: LD_INT 22
50814: PUSH
50815: LD_VAR 0 1
50819: PPUSH
50820: CALL_OW 255
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 58
50831: PUSH
50832: EMPTY
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PPUSH
50839: CALL_OW 69
50843: IN
50844: ST_TO_ADDR
// end ;
50845: LD_VAR 0 2
50849: RET
// export function IsNotFull ( building ) ; begin
50850: LD_INT 0
50852: PPUSH
// if not building then
50853: LD_VAR 0 1
50857: NOT
50858: IFFALSE 50862
// exit ;
50860: GO 50881
// result := UnitsInside ( building ) < 6 ;
50862: LD_ADDR_VAR 0 2
50866: PUSH
50867: LD_VAR 0 1
50871: PPUSH
50872: CALL_OW 313
50876: PUSH
50877: LD_INT 6
50879: LESS
50880: ST_TO_ADDR
// end ;
50881: LD_VAR 0 2
50885: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
50886: LD_INT 0
50888: PPUSH
50889: PPUSH
50890: PPUSH
50891: PPUSH
// tmp := [ ] ;
50892: LD_ADDR_VAR 0 3
50896: PUSH
50897: EMPTY
50898: ST_TO_ADDR
// list := [ ] ;
50899: LD_ADDR_VAR 0 5
50903: PUSH
50904: EMPTY
50905: ST_TO_ADDR
// for i = 16 to 25 do
50906: LD_ADDR_VAR 0 4
50910: PUSH
50911: DOUBLE
50912: LD_INT 16
50914: DEC
50915: ST_TO_ADDR
50916: LD_INT 25
50918: PUSH
50919: FOR_TO
50920: IFFALSE 50993
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
50922: LD_ADDR_VAR 0 3
50926: PUSH
50927: LD_VAR 0 3
50931: PUSH
50932: LD_INT 22
50934: PUSH
50935: LD_VAR 0 1
50939: PPUSH
50940: CALL_OW 255
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 91
50951: PUSH
50952: LD_VAR 0 1
50956: PUSH
50957: LD_INT 6
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 30
50967: PUSH
50968: LD_VAR 0 4
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: PPUSH
50985: CALL_OW 69
50989: ADD
50990: ST_TO_ADDR
50991: GO 50919
50993: POP
50994: POP
// for i = 1 to tmp do
50995: LD_ADDR_VAR 0 4
50999: PUSH
51000: DOUBLE
51001: LD_INT 1
51003: DEC
51004: ST_TO_ADDR
51005: LD_VAR 0 3
51009: PUSH
51010: FOR_TO
51011: IFFALSE 51099
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
51013: LD_ADDR_VAR 0 5
51017: PUSH
51018: LD_VAR 0 5
51022: PUSH
51023: LD_VAR 0 3
51027: PUSH
51028: LD_VAR 0 4
51032: ARRAY
51033: PPUSH
51034: CALL_OW 266
51038: PUSH
51039: LD_VAR 0 3
51043: PUSH
51044: LD_VAR 0 4
51048: ARRAY
51049: PPUSH
51050: CALL_OW 250
51054: PUSH
51055: LD_VAR 0 3
51059: PUSH
51060: LD_VAR 0 4
51064: ARRAY
51065: PPUSH
51066: CALL_OW 251
51070: PUSH
51071: LD_VAR 0 3
51075: PUSH
51076: LD_VAR 0 4
51080: ARRAY
51081: PPUSH
51082: CALL_OW 254
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: ADD
51096: ST_TO_ADDR
51097: GO 51010
51099: POP
51100: POP
// result := list ;
51101: LD_ADDR_VAR 0 2
51105: PUSH
51106: LD_VAR 0 5
51110: ST_TO_ADDR
// end ;
51111: LD_VAR 0 2
51115: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
51116: LD_INT 0
51118: PPUSH
51119: PPUSH
51120: PPUSH
51121: PPUSH
51122: PPUSH
51123: PPUSH
51124: PPUSH
// if not factory then
51125: LD_VAR 0 1
51129: NOT
51130: IFFALSE 51134
// exit ;
51132: GO 51727
// if control = control_apeman then
51134: LD_VAR 0 4
51138: PUSH
51139: LD_INT 5
51141: EQUAL
51142: IFFALSE 51251
// begin tmp := UnitsInside ( factory ) ;
51144: LD_ADDR_VAR 0 8
51148: PUSH
51149: LD_VAR 0 1
51153: PPUSH
51154: CALL_OW 313
51158: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
51159: LD_VAR 0 8
51163: PPUSH
51164: LD_INT 25
51166: PUSH
51167: LD_INT 12
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PPUSH
51174: CALL_OW 72
51178: NOT
51179: IFFALSE 51189
// control := control_manual ;
51181: LD_ADDR_VAR 0 4
51185: PUSH
51186: LD_INT 1
51188: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
51189: LD_ADDR_VAR 0 8
51193: PUSH
51194: LD_VAR 0 1
51198: PPUSH
51199: CALL 50886 0 1
51203: ST_TO_ADDR
// if tmp then
51204: LD_VAR 0 8
51208: IFFALSE 51251
// begin for i in tmp do
51210: LD_ADDR_VAR 0 7
51214: PUSH
51215: LD_VAR 0 8
51219: PUSH
51220: FOR_IN
51221: IFFALSE 51249
// if i [ 1 ] = b_ext_radio then
51223: LD_VAR 0 7
51227: PUSH
51228: LD_INT 1
51230: ARRAY
51231: PUSH
51232: LD_INT 22
51234: EQUAL
51235: IFFALSE 51247
// begin control := control_remote ;
51237: LD_ADDR_VAR 0 4
51241: PUSH
51242: LD_INT 2
51244: ST_TO_ADDR
// break ;
51245: GO 51249
// end ;
51247: GO 51220
51249: POP
51250: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51251: LD_VAR 0 1
51255: PPUSH
51256: LD_VAR 0 2
51260: PPUSH
51261: LD_VAR 0 3
51265: PPUSH
51266: LD_VAR 0 4
51270: PPUSH
51271: LD_VAR 0 5
51275: PPUSH
51276: CALL_OW 448
51280: IFFALSE 51315
// begin result := [ chassis , engine , control , weapon ] ;
51282: LD_ADDR_VAR 0 6
51286: PUSH
51287: LD_VAR 0 2
51291: PUSH
51292: LD_VAR 0 3
51296: PUSH
51297: LD_VAR 0 4
51301: PUSH
51302: LD_VAR 0 5
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: ST_TO_ADDR
// exit ;
51313: GO 51727
// end ; _chassis := AvailableChassisList ( factory ) ;
51315: LD_ADDR_VAR 0 9
51319: PUSH
51320: LD_VAR 0 1
51324: PPUSH
51325: CALL_OW 475
51329: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
51330: LD_ADDR_VAR 0 11
51334: PUSH
51335: LD_VAR 0 1
51339: PPUSH
51340: CALL_OW 476
51344: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
51345: LD_ADDR_VAR 0 12
51349: PUSH
51350: LD_VAR 0 1
51354: PPUSH
51355: CALL_OW 477
51359: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
51360: LD_ADDR_VAR 0 10
51364: PUSH
51365: LD_VAR 0 1
51369: PPUSH
51370: CALL_OW 478
51374: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
51375: LD_VAR 0 9
51379: NOT
51380: PUSH
51381: LD_VAR 0 11
51385: NOT
51386: OR
51387: PUSH
51388: LD_VAR 0 12
51392: NOT
51393: OR
51394: PUSH
51395: LD_VAR 0 10
51399: NOT
51400: OR
51401: IFFALSE 51436
// begin result := [ chassis , engine , control , weapon ] ;
51403: LD_ADDR_VAR 0 6
51407: PUSH
51408: LD_VAR 0 2
51412: PUSH
51413: LD_VAR 0 3
51417: PUSH
51418: LD_VAR 0 4
51422: PUSH
51423: LD_VAR 0 5
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// exit ;
51434: GO 51727
// end ; if not chassis in _chassis then
51436: LD_VAR 0 2
51440: PUSH
51441: LD_VAR 0 9
51445: IN
51446: NOT
51447: IFFALSE 51473
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
51449: LD_ADDR_VAR 0 2
51453: PUSH
51454: LD_VAR 0 9
51458: PUSH
51459: LD_INT 1
51461: PPUSH
51462: LD_VAR 0 9
51466: PPUSH
51467: CALL_OW 12
51471: ARRAY
51472: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
51473: LD_VAR 0 2
51477: PPUSH
51478: LD_VAR 0 3
51482: PPUSH
51483: CALL 51732 0 2
51487: NOT
51488: IFFALSE 51547
// repeat engine := _engine [ 1 ] ;
51490: LD_ADDR_VAR 0 3
51494: PUSH
51495: LD_VAR 0 11
51499: PUSH
51500: LD_INT 1
51502: ARRAY
51503: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
51504: LD_ADDR_VAR 0 11
51508: PUSH
51509: LD_VAR 0 11
51513: PPUSH
51514: LD_INT 1
51516: PPUSH
51517: CALL_OW 3
51521: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
51522: LD_VAR 0 2
51526: PPUSH
51527: LD_VAR 0 3
51531: PPUSH
51532: CALL 51732 0 2
51536: PUSH
51537: LD_VAR 0 11
51541: PUSH
51542: EMPTY
51543: EQUAL
51544: OR
51545: IFFALSE 51490
// if not control in _control then
51547: LD_VAR 0 4
51551: PUSH
51552: LD_VAR 0 12
51556: IN
51557: NOT
51558: IFFALSE 51584
// control := _control [ rand ( 1 , _control ) ] ;
51560: LD_ADDR_VAR 0 4
51564: PUSH
51565: LD_VAR 0 12
51569: PUSH
51570: LD_INT 1
51572: PPUSH
51573: LD_VAR 0 12
51577: PPUSH
51578: CALL_OW 12
51582: ARRAY
51583: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
51584: LD_VAR 0 2
51588: PPUSH
51589: LD_VAR 0 5
51593: PPUSH
51594: CALL 51952 0 2
51598: NOT
51599: IFFALSE 51658
// repeat weapon := _weapon [ 1 ] ;
51601: LD_ADDR_VAR 0 5
51605: PUSH
51606: LD_VAR 0 10
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
51615: LD_ADDR_VAR 0 10
51619: PUSH
51620: LD_VAR 0 10
51624: PPUSH
51625: LD_INT 1
51627: PPUSH
51628: CALL_OW 3
51632: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
51633: LD_VAR 0 2
51637: PPUSH
51638: LD_VAR 0 5
51642: PPUSH
51643: CALL 51952 0 2
51647: PUSH
51648: LD_VAR 0 10
51652: PUSH
51653: EMPTY
51654: EQUAL
51655: OR
51656: IFFALSE 51601
// result := [ ] ;
51658: LD_ADDR_VAR 0 6
51662: PUSH
51663: EMPTY
51664: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51665: LD_VAR 0 1
51669: PPUSH
51670: LD_VAR 0 2
51674: PPUSH
51675: LD_VAR 0 3
51679: PPUSH
51680: LD_VAR 0 4
51684: PPUSH
51685: LD_VAR 0 5
51689: PPUSH
51690: CALL_OW 448
51694: IFFALSE 51727
// result := [ chassis , engine , control , weapon ] ;
51696: LD_ADDR_VAR 0 6
51700: PUSH
51701: LD_VAR 0 2
51705: PUSH
51706: LD_VAR 0 3
51710: PUSH
51711: LD_VAR 0 4
51715: PUSH
51716: LD_VAR 0 5
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: ST_TO_ADDR
// end ;
51727: LD_VAR 0 6
51731: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
51732: LD_INT 0
51734: PPUSH
// if not chassis or not engine then
51735: LD_VAR 0 1
51739: NOT
51740: PUSH
51741: LD_VAR 0 2
51745: NOT
51746: OR
51747: IFFALSE 51751
// exit ;
51749: GO 51947
// case engine of engine_solar :
51751: LD_VAR 0 2
51755: PUSH
51756: LD_INT 2
51758: DOUBLE
51759: EQUAL
51760: IFTRUE 51764
51762: GO 51802
51764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
51765: LD_ADDR_VAR 0 3
51769: PUSH
51770: LD_INT 11
51772: PUSH
51773: LD_INT 12
51775: PUSH
51776: LD_INT 13
51778: PUSH
51779: LD_INT 14
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 3
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
51800: GO 51931
51802: LD_INT 1
51804: DOUBLE
51805: EQUAL
51806: IFTRUE 51810
51808: GO 51872
51810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
51811: LD_ADDR_VAR 0 3
51815: PUSH
51816: LD_INT 11
51818: PUSH
51819: LD_INT 12
51821: PUSH
51822: LD_INT 13
51824: PUSH
51825: LD_INT 14
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: LD_INT 4
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: LD_INT 21
51845: PUSH
51846: LD_INT 23
51848: PUSH
51849: LD_INT 22
51851: PUSH
51852: LD_INT 24
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: ST_TO_ADDR
51870: GO 51931
51872: LD_INT 3
51874: DOUBLE
51875: EQUAL
51876: IFTRUE 51880
51878: GO 51930
51880: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51881: LD_ADDR_VAR 0 3
51885: PUSH
51886: LD_INT 13
51888: PUSH
51889: LD_INT 14
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: LD_INT 4
51900: PUSH
51901: LD_INT 5
51903: PUSH
51904: LD_INT 21
51906: PUSH
51907: LD_INT 22
51909: PUSH
51910: LD_INT 23
51912: PUSH
51913: LD_INT 24
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
51928: GO 51931
51930: POP
// result := ( chassis in result ) ;
51931: LD_ADDR_VAR 0 3
51935: PUSH
51936: LD_VAR 0 1
51940: PUSH
51941: LD_VAR 0 3
51945: IN
51946: ST_TO_ADDR
// end ;
51947: LD_VAR 0 3
51951: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
51952: LD_INT 0
51954: PPUSH
// if not chassis or not weapon then
51955: LD_VAR 0 1
51959: NOT
51960: PUSH
51961: LD_VAR 0 2
51965: NOT
51966: OR
51967: IFFALSE 51971
// exit ;
51969: GO 52997
// case weapon of us_machine_gun :
51971: LD_VAR 0 2
51975: PUSH
51976: LD_INT 2
51978: DOUBLE
51979: EQUAL
51980: IFTRUE 51984
51982: GO 52014
51984: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
51985: LD_ADDR_VAR 0 3
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: LD_INT 5
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
52012: GO 52981
52014: LD_INT 3
52016: DOUBLE
52017: EQUAL
52018: IFTRUE 52022
52020: GO 52052
52022: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
52023: LD_ADDR_VAR 0 3
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: LD_INT 4
52039: PUSH
52040: LD_INT 5
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: ST_TO_ADDR
52050: GO 52981
52052: LD_INT 11
52054: DOUBLE
52055: EQUAL
52056: IFTRUE 52060
52058: GO 52090
52060: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
52061: LD_ADDR_VAR 0 3
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 4
52077: PUSH
52078: LD_INT 5
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
52088: GO 52981
52090: LD_INT 4
52092: DOUBLE
52093: EQUAL
52094: IFTRUE 52098
52096: GO 52124
52098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
52099: LD_ADDR_VAR 0 3
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: LD_INT 4
52112: PUSH
52113: LD_INT 5
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: ST_TO_ADDR
52122: GO 52981
52124: LD_INT 5
52126: DOUBLE
52127: EQUAL
52128: IFTRUE 52132
52130: GO 52158
52132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
52133: LD_ADDR_VAR 0 3
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: LD_INT 5
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: ST_TO_ADDR
52156: GO 52981
52158: LD_INT 9
52160: DOUBLE
52161: EQUAL
52162: IFTRUE 52166
52164: GO 52192
52166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
52167: LD_ADDR_VAR 0 3
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 4
52180: PUSH
52181: LD_INT 5
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
52190: GO 52981
52192: LD_INT 7
52194: DOUBLE
52195: EQUAL
52196: IFTRUE 52200
52198: GO 52226
52200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
52201: LD_ADDR_VAR 0 3
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 4
52214: PUSH
52215: LD_INT 5
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: ST_TO_ADDR
52224: GO 52981
52226: LD_INT 12
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52234
52232: GO 52260
52234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
52235: LD_ADDR_VAR 0 3
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: LD_INT 4
52248: PUSH
52249: LD_INT 5
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
52258: GO 52981
52260: LD_INT 13
52262: DOUBLE
52263: EQUAL
52264: IFTRUE 52268
52266: GO 52294
52268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
52269: LD_ADDR_VAR 0 3
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: LD_INT 4
52282: PUSH
52283: LD_INT 5
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
52292: GO 52981
52294: LD_INT 14
52296: DOUBLE
52297: EQUAL
52298: IFTRUE 52302
52300: GO 52320
52302: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: LD_INT 4
52310: PUSH
52311: LD_INT 5
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: ST_TO_ADDR
52318: GO 52981
52320: LD_INT 6
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52328
52326: GO 52346
52328: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
52329: LD_ADDR_VAR 0 3
52333: PUSH
52334: LD_INT 4
52336: PUSH
52337: LD_INT 5
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: ST_TO_ADDR
52344: GO 52981
52346: LD_INT 10
52348: DOUBLE
52349: EQUAL
52350: IFTRUE 52354
52352: GO 52372
52354: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
52355: LD_ADDR_VAR 0 3
52359: PUSH
52360: LD_INT 4
52362: PUSH
52363: LD_INT 5
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: ST_TO_ADDR
52370: GO 52981
52372: LD_INT 22
52374: DOUBLE
52375: EQUAL
52376: IFTRUE 52380
52378: GO 52406
52380: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
52381: LD_ADDR_VAR 0 3
52385: PUSH
52386: LD_INT 11
52388: PUSH
52389: LD_INT 12
52391: PUSH
52392: LD_INT 13
52394: PUSH
52395: LD_INT 14
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
52404: GO 52981
52406: LD_INT 23
52408: DOUBLE
52409: EQUAL
52410: IFTRUE 52414
52412: GO 52440
52414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
52415: LD_ADDR_VAR 0 3
52419: PUSH
52420: LD_INT 11
52422: PUSH
52423: LD_INT 12
52425: PUSH
52426: LD_INT 13
52428: PUSH
52429: LD_INT 14
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
52438: GO 52981
52440: LD_INT 24
52442: DOUBLE
52443: EQUAL
52444: IFTRUE 52448
52446: GO 52474
52448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
52449: LD_ADDR_VAR 0 3
52453: PUSH
52454: LD_INT 11
52456: PUSH
52457: LD_INT 12
52459: PUSH
52460: LD_INT 13
52462: PUSH
52463: LD_INT 14
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: ST_TO_ADDR
52472: GO 52981
52474: LD_INT 30
52476: DOUBLE
52477: EQUAL
52478: IFTRUE 52482
52480: GO 52508
52482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
52483: LD_ADDR_VAR 0 3
52487: PUSH
52488: LD_INT 11
52490: PUSH
52491: LD_INT 12
52493: PUSH
52494: LD_INT 13
52496: PUSH
52497: LD_INT 14
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: ST_TO_ADDR
52506: GO 52981
52508: LD_INT 25
52510: DOUBLE
52511: EQUAL
52512: IFTRUE 52516
52514: GO 52534
52516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
52517: LD_ADDR_VAR 0 3
52521: PUSH
52522: LD_INT 13
52524: PUSH
52525: LD_INT 14
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: ST_TO_ADDR
52532: GO 52981
52534: LD_INT 27
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52542
52540: GO 52560
52542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
52543: LD_ADDR_VAR 0 3
52547: PUSH
52548: LD_INT 13
52550: PUSH
52551: LD_INT 14
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: ST_TO_ADDR
52558: GO 52981
52560: LD_INT 28
52562: DOUBLE
52563: EQUAL
52564: IFTRUE 52568
52566: GO 52586
52568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
52569: LD_ADDR_VAR 0 3
52573: PUSH
52574: LD_INT 13
52576: PUSH
52577: LD_INT 14
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: ST_TO_ADDR
52584: GO 52981
52586: LD_INT 29
52588: DOUBLE
52589: EQUAL
52590: IFTRUE 52594
52592: GO 52612
52594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
52595: LD_ADDR_VAR 0 3
52599: PUSH
52600: LD_INT 13
52602: PUSH
52603: LD_INT 14
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: ST_TO_ADDR
52610: GO 52981
52612: LD_INT 31
52614: DOUBLE
52615: EQUAL
52616: IFTRUE 52620
52618: GO 52638
52620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
52621: LD_ADDR_VAR 0 3
52625: PUSH
52626: LD_INT 13
52628: PUSH
52629: LD_INT 14
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: ST_TO_ADDR
52636: GO 52981
52638: LD_INT 26
52640: DOUBLE
52641: EQUAL
52642: IFTRUE 52646
52644: GO 52664
52646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
52647: LD_ADDR_VAR 0 3
52651: PUSH
52652: LD_INT 13
52654: PUSH
52655: LD_INT 14
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: ST_TO_ADDR
52662: GO 52981
52664: LD_INT 42
52666: DOUBLE
52667: EQUAL
52668: IFTRUE 52672
52670: GO 52698
52672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
52673: LD_ADDR_VAR 0 3
52677: PUSH
52678: LD_INT 21
52680: PUSH
52681: LD_INT 22
52683: PUSH
52684: LD_INT 23
52686: PUSH
52687: LD_INT 24
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
52696: GO 52981
52698: LD_INT 43
52700: DOUBLE
52701: EQUAL
52702: IFTRUE 52706
52704: GO 52732
52706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
52707: LD_ADDR_VAR 0 3
52711: PUSH
52712: LD_INT 21
52714: PUSH
52715: LD_INT 22
52717: PUSH
52718: LD_INT 23
52720: PUSH
52721: LD_INT 24
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: ST_TO_ADDR
52730: GO 52981
52732: LD_INT 44
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52740
52738: GO 52766
52740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
52741: LD_ADDR_VAR 0 3
52745: PUSH
52746: LD_INT 21
52748: PUSH
52749: LD_INT 22
52751: PUSH
52752: LD_INT 23
52754: PUSH
52755: LD_INT 24
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: ST_TO_ADDR
52764: GO 52981
52766: LD_INT 45
52768: DOUBLE
52769: EQUAL
52770: IFTRUE 52774
52772: GO 52800
52774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
52775: LD_ADDR_VAR 0 3
52779: PUSH
52780: LD_INT 21
52782: PUSH
52783: LD_INT 22
52785: PUSH
52786: LD_INT 23
52788: PUSH
52789: LD_INT 24
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
52798: GO 52981
52800: LD_INT 49
52802: DOUBLE
52803: EQUAL
52804: IFTRUE 52808
52806: GO 52834
52808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
52809: LD_ADDR_VAR 0 3
52813: PUSH
52814: LD_INT 21
52816: PUSH
52817: LD_INT 22
52819: PUSH
52820: LD_INT 23
52822: PUSH
52823: LD_INT 24
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
52832: GO 52981
52834: LD_INT 51
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52842
52840: GO 52868
52842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
52843: LD_ADDR_VAR 0 3
52847: PUSH
52848: LD_INT 21
52850: PUSH
52851: LD_INT 22
52853: PUSH
52854: LD_INT 23
52856: PUSH
52857: LD_INT 24
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: ST_TO_ADDR
52866: GO 52981
52868: LD_INT 52
52870: DOUBLE
52871: EQUAL
52872: IFTRUE 52876
52874: GO 52902
52876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
52877: LD_ADDR_VAR 0 3
52881: PUSH
52882: LD_INT 21
52884: PUSH
52885: LD_INT 22
52887: PUSH
52888: LD_INT 23
52890: PUSH
52891: LD_INT 24
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
52900: GO 52981
52902: LD_INT 53
52904: DOUBLE
52905: EQUAL
52906: IFTRUE 52910
52908: GO 52928
52910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
52911: LD_ADDR_VAR 0 3
52915: PUSH
52916: LD_INT 23
52918: PUSH
52919: LD_INT 24
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: ST_TO_ADDR
52926: GO 52981
52928: LD_INT 46
52930: DOUBLE
52931: EQUAL
52932: IFTRUE 52936
52934: GO 52954
52936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
52937: LD_ADDR_VAR 0 3
52941: PUSH
52942: LD_INT 23
52944: PUSH
52945: LD_INT 24
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: ST_TO_ADDR
52952: GO 52981
52954: LD_INT 47
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52962
52960: GO 52980
52962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: LD_INT 23
52970: PUSH
52971: LD_INT 24
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: ST_TO_ADDR
52978: GO 52981
52980: POP
// result := ( chassis in result ) ;
52981: LD_ADDR_VAR 0 3
52985: PUSH
52986: LD_VAR 0 1
52990: PUSH
52991: LD_VAR 0 3
52995: IN
52996: ST_TO_ADDR
// end ;
52997: LD_VAR 0 3
53001: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
53002: LD_INT 0
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
// result := array ;
53011: LD_ADDR_VAR 0 5
53015: PUSH
53016: LD_VAR 0 1
53020: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
53021: LD_VAR 0 1
53025: NOT
53026: PUSH
53027: LD_VAR 0 2
53031: NOT
53032: OR
53033: PUSH
53034: LD_VAR 0 3
53038: NOT
53039: OR
53040: PUSH
53041: LD_VAR 0 2
53045: PUSH
53046: LD_VAR 0 1
53050: GREATER
53051: OR
53052: PUSH
53053: LD_VAR 0 3
53057: PUSH
53058: LD_VAR 0 1
53062: GREATER
53063: OR
53064: IFFALSE 53068
// exit ;
53066: GO 53364
// if direction then
53068: LD_VAR 0 4
53072: IFFALSE 53136
// begin d := 1 ;
53074: LD_ADDR_VAR 0 9
53078: PUSH
53079: LD_INT 1
53081: ST_TO_ADDR
// if i_from > i_to then
53082: LD_VAR 0 2
53086: PUSH
53087: LD_VAR 0 3
53091: GREATER
53092: IFFALSE 53118
// length := ( array - i_from ) + i_to else
53094: LD_ADDR_VAR 0 11
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_VAR 0 2
53108: MINUS
53109: PUSH
53110: LD_VAR 0 3
53114: PLUS
53115: ST_TO_ADDR
53116: GO 53134
// length := i_to - i_from ;
53118: LD_ADDR_VAR 0 11
53122: PUSH
53123: LD_VAR 0 3
53127: PUSH
53128: LD_VAR 0 2
53132: MINUS
53133: ST_TO_ADDR
// end else
53134: GO 53197
// begin d := - 1 ;
53136: LD_ADDR_VAR 0 9
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: ST_TO_ADDR
// if i_from > i_to then
53145: LD_VAR 0 2
53149: PUSH
53150: LD_VAR 0 3
53154: GREATER
53155: IFFALSE 53175
// length := i_from - i_to else
53157: LD_ADDR_VAR 0 11
53161: PUSH
53162: LD_VAR 0 2
53166: PUSH
53167: LD_VAR 0 3
53171: MINUS
53172: ST_TO_ADDR
53173: GO 53197
// length := ( array - i_to ) + i_from ;
53175: LD_ADDR_VAR 0 11
53179: PUSH
53180: LD_VAR 0 1
53184: PUSH
53185: LD_VAR 0 3
53189: MINUS
53190: PUSH
53191: LD_VAR 0 2
53195: PLUS
53196: ST_TO_ADDR
// end ; if not length then
53197: LD_VAR 0 11
53201: NOT
53202: IFFALSE 53206
// exit ;
53204: GO 53364
// tmp := array ;
53206: LD_ADDR_VAR 0 10
53210: PUSH
53211: LD_VAR 0 1
53215: ST_TO_ADDR
// for i = 1 to length do
53216: LD_ADDR_VAR 0 6
53220: PUSH
53221: DOUBLE
53222: LD_INT 1
53224: DEC
53225: ST_TO_ADDR
53226: LD_VAR 0 11
53230: PUSH
53231: FOR_TO
53232: IFFALSE 53352
// begin for j = 1 to array do
53234: LD_ADDR_VAR 0 7
53238: PUSH
53239: DOUBLE
53240: LD_INT 1
53242: DEC
53243: ST_TO_ADDR
53244: LD_VAR 0 1
53248: PUSH
53249: FOR_TO
53250: IFFALSE 53338
// begin k := j + d ;
53252: LD_ADDR_VAR 0 8
53256: PUSH
53257: LD_VAR 0 7
53261: PUSH
53262: LD_VAR 0 9
53266: PLUS
53267: ST_TO_ADDR
// if k > array then
53268: LD_VAR 0 8
53272: PUSH
53273: LD_VAR 0 1
53277: GREATER
53278: IFFALSE 53288
// k := 1 ;
53280: LD_ADDR_VAR 0 8
53284: PUSH
53285: LD_INT 1
53287: ST_TO_ADDR
// if not k then
53288: LD_VAR 0 8
53292: NOT
53293: IFFALSE 53305
// k := array ;
53295: LD_ADDR_VAR 0 8
53299: PUSH
53300: LD_VAR 0 1
53304: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
53305: LD_ADDR_VAR 0 10
53309: PUSH
53310: LD_VAR 0 10
53314: PPUSH
53315: LD_VAR 0 8
53319: PPUSH
53320: LD_VAR 0 1
53324: PUSH
53325: LD_VAR 0 7
53329: ARRAY
53330: PPUSH
53331: CALL_OW 1
53335: ST_TO_ADDR
// end ;
53336: GO 53249
53338: POP
53339: POP
// array := tmp ;
53340: LD_ADDR_VAR 0 1
53344: PUSH
53345: LD_VAR 0 10
53349: ST_TO_ADDR
// end ;
53350: GO 53231
53352: POP
53353: POP
// result := array ;
53354: LD_ADDR_VAR 0 5
53358: PUSH
53359: LD_VAR 0 1
53363: ST_TO_ADDR
// end ;
53364: LD_VAR 0 5
53368: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
53369: LD_INT 0
53371: PPUSH
53372: PPUSH
// result := 0 ;
53373: LD_ADDR_VAR 0 3
53377: PUSH
53378: LD_INT 0
53380: ST_TO_ADDR
// if not array or not value in array then
53381: LD_VAR 0 1
53385: NOT
53386: PUSH
53387: LD_VAR 0 2
53391: PUSH
53392: LD_VAR 0 1
53396: IN
53397: NOT
53398: OR
53399: IFFALSE 53403
// exit ;
53401: GO 53457
// for i = 1 to array do
53403: LD_ADDR_VAR 0 4
53407: PUSH
53408: DOUBLE
53409: LD_INT 1
53411: DEC
53412: ST_TO_ADDR
53413: LD_VAR 0 1
53417: PUSH
53418: FOR_TO
53419: IFFALSE 53455
// if value = array [ i ] then
53421: LD_VAR 0 2
53425: PUSH
53426: LD_VAR 0 1
53430: PUSH
53431: LD_VAR 0 4
53435: ARRAY
53436: EQUAL
53437: IFFALSE 53453
// begin result := i ;
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: LD_VAR 0 4
53448: ST_TO_ADDR
// exit ;
53449: POP
53450: POP
53451: GO 53457
// end ;
53453: GO 53418
53455: POP
53456: POP
// end ;
53457: LD_VAR 0 3
53461: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
53462: LD_INT 0
53464: PPUSH
// vc_chassis := chassis ;
53465: LD_ADDR_OWVAR 37
53469: PUSH
53470: LD_VAR 0 1
53474: ST_TO_ADDR
// vc_engine := engine ;
53475: LD_ADDR_OWVAR 39
53479: PUSH
53480: LD_VAR 0 2
53484: ST_TO_ADDR
// vc_control := control ;
53485: LD_ADDR_OWVAR 38
53489: PUSH
53490: LD_VAR 0 3
53494: ST_TO_ADDR
// vc_weapon := weapon ;
53495: LD_ADDR_OWVAR 40
53499: PUSH
53500: LD_VAR 0 4
53504: ST_TO_ADDR
// vc_fuel_battery := fuel ;
53505: LD_ADDR_OWVAR 41
53509: PUSH
53510: LD_VAR 0 5
53514: ST_TO_ADDR
// end ;
53515: LD_VAR 0 6
53519: RET
// export function WantPlant ( unit ) ; var task ; begin
53520: LD_INT 0
53522: PPUSH
53523: PPUSH
// result := false ;
53524: LD_ADDR_VAR 0 2
53528: PUSH
53529: LD_INT 0
53531: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
53532: LD_ADDR_VAR 0 3
53536: PUSH
53537: LD_VAR 0 1
53541: PPUSH
53542: CALL_OW 437
53546: ST_TO_ADDR
// if task then
53547: LD_VAR 0 3
53551: IFFALSE 53579
// if task [ 1 ] [ 1 ] = p then
53553: LD_VAR 0 3
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: PUSH
53562: LD_INT 1
53564: ARRAY
53565: PUSH
53566: LD_STRING p
53568: EQUAL
53569: IFFALSE 53579
// result := true ;
53571: LD_ADDR_VAR 0 2
53575: PUSH
53576: LD_INT 1
53578: ST_TO_ADDR
// end ;
53579: LD_VAR 0 2
53583: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
53584: LD_INT 0
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
// if pos < 1 then
53590: LD_VAR 0 2
53594: PUSH
53595: LD_INT 1
53597: LESS
53598: IFFALSE 53602
// exit ;
53600: GO 53905
// if pos = 1 then
53602: LD_VAR 0 2
53606: PUSH
53607: LD_INT 1
53609: EQUAL
53610: IFFALSE 53643
// result := Replace ( arr , pos [ 1 ] , value ) else
53612: LD_ADDR_VAR 0 4
53616: PUSH
53617: LD_VAR 0 1
53621: PPUSH
53622: LD_VAR 0 2
53626: PUSH
53627: LD_INT 1
53629: ARRAY
53630: PPUSH
53631: LD_VAR 0 3
53635: PPUSH
53636: CALL_OW 1
53640: ST_TO_ADDR
53641: GO 53905
// begin tmp := arr ;
53643: LD_ADDR_VAR 0 6
53647: PUSH
53648: LD_VAR 0 1
53652: ST_TO_ADDR
// s_arr := [ tmp ] ;
53653: LD_ADDR_VAR 0 7
53657: PUSH
53658: LD_VAR 0 6
53662: PUSH
53663: EMPTY
53664: LIST
53665: ST_TO_ADDR
// for i = 1 to pos - 1 do
53666: LD_ADDR_VAR 0 5
53670: PUSH
53671: DOUBLE
53672: LD_INT 1
53674: DEC
53675: ST_TO_ADDR
53676: LD_VAR 0 2
53680: PUSH
53681: LD_INT 1
53683: MINUS
53684: PUSH
53685: FOR_TO
53686: IFFALSE 53731
// begin tmp := tmp [ pos [ i ] ] ;
53688: LD_ADDR_VAR 0 6
53692: PUSH
53693: LD_VAR 0 6
53697: PUSH
53698: LD_VAR 0 2
53702: PUSH
53703: LD_VAR 0 5
53707: ARRAY
53708: ARRAY
53709: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
53710: LD_ADDR_VAR 0 7
53714: PUSH
53715: LD_VAR 0 7
53719: PUSH
53720: LD_VAR 0 6
53724: PUSH
53725: EMPTY
53726: LIST
53727: ADD
53728: ST_TO_ADDR
// end ;
53729: GO 53685
53731: POP
53732: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
53733: LD_ADDR_VAR 0 6
53737: PUSH
53738: LD_VAR 0 6
53742: PPUSH
53743: LD_VAR 0 2
53747: PUSH
53748: LD_VAR 0 2
53752: ARRAY
53753: PPUSH
53754: LD_VAR 0 3
53758: PPUSH
53759: CALL_OW 1
53763: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
53764: LD_ADDR_VAR 0 7
53768: PUSH
53769: LD_VAR 0 7
53773: PPUSH
53774: LD_VAR 0 7
53778: PPUSH
53779: LD_VAR 0 6
53783: PPUSH
53784: CALL_OW 1
53788: ST_TO_ADDR
// for i = s_arr downto 2 do
53789: LD_ADDR_VAR 0 5
53793: PUSH
53794: DOUBLE
53795: LD_VAR 0 7
53799: INC
53800: ST_TO_ADDR
53801: LD_INT 2
53803: PUSH
53804: FOR_DOWNTO
53805: IFFALSE 53889
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
53807: LD_ADDR_VAR 0 6
53811: PUSH
53812: LD_VAR 0 7
53816: PUSH
53817: LD_VAR 0 5
53821: PUSH
53822: LD_INT 1
53824: MINUS
53825: ARRAY
53826: PPUSH
53827: LD_VAR 0 2
53831: PUSH
53832: LD_VAR 0 5
53836: PUSH
53837: LD_INT 1
53839: MINUS
53840: ARRAY
53841: PPUSH
53842: LD_VAR 0 7
53846: PUSH
53847: LD_VAR 0 5
53851: ARRAY
53852: PPUSH
53853: CALL_OW 1
53857: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
53858: LD_ADDR_VAR 0 7
53862: PUSH
53863: LD_VAR 0 7
53867: PPUSH
53868: LD_VAR 0 5
53872: PUSH
53873: LD_INT 1
53875: MINUS
53876: PPUSH
53877: LD_VAR 0 6
53881: PPUSH
53882: CALL_OW 1
53886: ST_TO_ADDR
// end ;
53887: GO 53804
53889: POP
53890: POP
// result := s_arr [ 1 ] ;
53891: LD_ADDR_VAR 0 4
53895: PUSH
53896: LD_VAR 0 7
53900: PUSH
53901: LD_INT 1
53903: ARRAY
53904: ST_TO_ADDR
// end ; end ;
53905: LD_VAR 0 4
53909: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
53910: LD_INT 0
53912: PPUSH
53913: PPUSH
// if not list then
53914: LD_VAR 0 1
53918: NOT
53919: IFFALSE 53923
// exit ;
53921: GO 54014
// i := list [ pos1 ] ;
53923: LD_ADDR_VAR 0 5
53927: PUSH
53928: LD_VAR 0 1
53932: PUSH
53933: LD_VAR 0 2
53937: ARRAY
53938: ST_TO_ADDR
// if not i then
53939: LD_VAR 0 5
53943: NOT
53944: IFFALSE 53948
// exit ;
53946: GO 54014
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
53948: LD_ADDR_VAR 0 1
53952: PUSH
53953: LD_VAR 0 1
53957: PPUSH
53958: LD_VAR 0 2
53962: PPUSH
53963: LD_VAR 0 1
53967: PUSH
53968: LD_VAR 0 3
53972: ARRAY
53973: PPUSH
53974: CALL_OW 1
53978: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
53979: LD_ADDR_VAR 0 1
53983: PUSH
53984: LD_VAR 0 1
53988: PPUSH
53989: LD_VAR 0 3
53993: PPUSH
53994: LD_VAR 0 5
53998: PPUSH
53999: CALL_OW 1
54003: ST_TO_ADDR
// result := list ;
54004: LD_ADDR_VAR 0 4
54008: PUSH
54009: LD_VAR 0 1
54013: ST_TO_ADDR
// end ;
54014: LD_VAR 0 4
54018: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
54019: LD_INT 0
54021: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
54022: LD_ADDR_VAR 0 5
54026: PUSH
54027: LD_VAR 0 1
54031: PPUSH
54032: CALL_OW 250
54036: PPUSH
54037: LD_VAR 0 1
54041: PPUSH
54042: CALL_OW 251
54046: PPUSH
54047: LD_VAR 0 2
54051: PPUSH
54052: LD_VAR 0 3
54056: PPUSH
54057: LD_VAR 0 4
54061: PPUSH
54062: CALL 54072 0 5
54066: ST_TO_ADDR
// end ;
54067: LD_VAR 0 5
54071: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
54072: LD_INT 0
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
// if not list then
54078: LD_VAR 0 3
54082: NOT
54083: IFFALSE 54087
// exit ;
54085: GO 54475
// result := [ ] ;
54087: LD_ADDR_VAR 0 6
54091: PUSH
54092: EMPTY
54093: ST_TO_ADDR
// for i in list do
54094: LD_ADDR_VAR 0 7
54098: PUSH
54099: LD_VAR 0 3
54103: PUSH
54104: FOR_IN
54105: IFFALSE 54307
// begin tmp := GetDistUnitXY ( i , x , y ) ;
54107: LD_ADDR_VAR 0 9
54111: PUSH
54112: LD_VAR 0 7
54116: PPUSH
54117: LD_VAR 0 1
54121: PPUSH
54122: LD_VAR 0 2
54126: PPUSH
54127: CALL_OW 297
54131: ST_TO_ADDR
// if not result then
54132: LD_VAR 0 6
54136: NOT
54137: IFFALSE 54163
// result := [ [ i , tmp ] ] else
54139: LD_ADDR_VAR 0 6
54143: PUSH
54144: LD_VAR 0 7
54148: PUSH
54149: LD_VAR 0 9
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: ST_TO_ADDR
54161: GO 54305
// begin if result [ result ] [ 2 ] < tmp then
54163: LD_VAR 0 6
54167: PUSH
54168: LD_VAR 0 6
54172: ARRAY
54173: PUSH
54174: LD_INT 2
54176: ARRAY
54177: PUSH
54178: LD_VAR 0 9
54182: LESS
54183: IFFALSE 54225
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
54185: LD_ADDR_VAR 0 6
54189: PUSH
54190: LD_VAR 0 6
54194: PPUSH
54195: LD_VAR 0 6
54199: PUSH
54200: LD_INT 1
54202: PLUS
54203: PPUSH
54204: LD_VAR 0 7
54208: PUSH
54209: LD_VAR 0 9
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PPUSH
54218: CALL_OW 2
54222: ST_TO_ADDR
54223: GO 54305
// for j = 1 to result do
54225: LD_ADDR_VAR 0 8
54229: PUSH
54230: DOUBLE
54231: LD_INT 1
54233: DEC
54234: ST_TO_ADDR
54235: LD_VAR 0 6
54239: PUSH
54240: FOR_TO
54241: IFFALSE 54303
// begin if tmp < result [ j ] [ 2 ] then
54243: LD_VAR 0 9
54247: PUSH
54248: LD_VAR 0 6
54252: PUSH
54253: LD_VAR 0 8
54257: ARRAY
54258: PUSH
54259: LD_INT 2
54261: ARRAY
54262: LESS
54263: IFFALSE 54301
// begin result := Insert ( result , j , [ i , tmp ] ) ;
54265: LD_ADDR_VAR 0 6
54269: PUSH
54270: LD_VAR 0 6
54274: PPUSH
54275: LD_VAR 0 8
54279: PPUSH
54280: LD_VAR 0 7
54284: PUSH
54285: LD_VAR 0 9
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PPUSH
54294: CALL_OW 2
54298: ST_TO_ADDR
// break ;
54299: GO 54303
// end ; end ;
54301: GO 54240
54303: POP
54304: POP
// end ; end ;
54305: GO 54104
54307: POP
54308: POP
// if result and not asc then
54309: LD_VAR 0 6
54313: PUSH
54314: LD_VAR 0 4
54318: NOT
54319: AND
54320: IFFALSE 54395
// begin tmp := result ;
54322: LD_ADDR_VAR 0 9
54326: PUSH
54327: LD_VAR 0 6
54331: ST_TO_ADDR
// for i = tmp downto 1 do
54332: LD_ADDR_VAR 0 7
54336: PUSH
54337: DOUBLE
54338: LD_VAR 0 9
54342: INC
54343: ST_TO_ADDR
54344: LD_INT 1
54346: PUSH
54347: FOR_DOWNTO
54348: IFFALSE 54393
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
54350: LD_ADDR_VAR 0 6
54354: PUSH
54355: LD_VAR 0 6
54359: PPUSH
54360: LD_VAR 0 9
54364: PUSH
54365: LD_VAR 0 7
54369: MINUS
54370: PUSH
54371: LD_INT 1
54373: PLUS
54374: PPUSH
54375: LD_VAR 0 9
54379: PUSH
54380: LD_VAR 0 7
54384: ARRAY
54385: PPUSH
54386: CALL_OW 1
54390: ST_TO_ADDR
54391: GO 54347
54393: POP
54394: POP
// end ; tmp := [ ] ;
54395: LD_ADDR_VAR 0 9
54399: PUSH
54400: EMPTY
54401: ST_TO_ADDR
// if mode then
54402: LD_VAR 0 5
54406: IFFALSE 54475
// begin for i = 1 to result do
54408: LD_ADDR_VAR 0 7
54412: PUSH
54413: DOUBLE
54414: LD_INT 1
54416: DEC
54417: ST_TO_ADDR
54418: LD_VAR 0 6
54422: PUSH
54423: FOR_TO
54424: IFFALSE 54463
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
54426: LD_ADDR_VAR 0 9
54430: PUSH
54431: LD_VAR 0 9
54435: PPUSH
54436: LD_VAR 0 7
54440: PPUSH
54441: LD_VAR 0 6
54445: PUSH
54446: LD_VAR 0 7
54450: ARRAY
54451: PUSH
54452: LD_INT 1
54454: ARRAY
54455: PPUSH
54456: CALL_OW 1
54460: ST_TO_ADDR
54461: GO 54423
54463: POP
54464: POP
// result := tmp ;
54465: LD_ADDR_VAR 0 6
54469: PUSH
54470: LD_VAR 0 9
54474: ST_TO_ADDR
// end ; end ;
54475: LD_VAR 0 6
54479: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
54480: LD_INT 0
54482: PPUSH
54483: PPUSH
54484: PPUSH
54485: PPUSH
54486: PPUSH
54487: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
54488: LD_ADDR_VAR 0 5
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: ST_TO_ADDR
// if not x or not y then
54510: LD_VAR 0 2
54514: NOT
54515: PUSH
54516: LD_VAR 0 3
54520: NOT
54521: OR
54522: IFFALSE 54526
// exit ;
54524: GO 56172
// if not range then
54526: LD_VAR 0 4
54530: NOT
54531: IFFALSE 54541
// range := 10 ;
54533: LD_ADDR_VAR 0 4
54537: PUSH
54538: LD_INT 10
54540: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
54541: LD_ADDR_VAR 0 8
54545: PUSH
54546: LD_INT 81
54548: PUSH
54549: LD_VAR 0 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 92
54560: PUSH
54561: LD_VAR 0 2
54565: PUSH
54566: LD_VAR 0 3
54570: PUSH
54571: LD_VAR 0 4
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: LD_INT 21
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: PPUSH
54604: CALL_OW 69
54608: ST_TO_ADDR
// if not tmp then
54609: LD_VAR 0 8
54613: NOT
54614: IFFALSE 54618
// exit ;
54616: GO 56172
// for i in tmp do
54618: LD_ADDR_VAR 0 6
54622: PUSH
54623: LD_VAR 0 8
54627: PUSH
54628: FOR_IN
54629: IFFALSE 56147
// begin points := [ 0 , 0 , 0 ] ;
54631: LD_ADDR_VAR 0 9
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// bpoints := 1 ;
54650: LD_ADDR_VAR 0 10
54654: PUSH
54655: LD_INT 1
54657: ST_TO_ADDR
// case GetType ( i ) of unit_human :
54658: LD_VAR 0 6
54662: PPUSH
54663: CALL_OW 247
54667: PUSH
54668: LD_INT 1
54670: DOUBLE
54671: EQUAL
54672: IFTRUE 54676
54674: GO 55254
54676: POP
// begin if GetClass ( i ) = 1 then
54677: LD_VAR 0 6
54681: PPUSH
54682: CALL_OW 257
54686: PUSH
54687: LD_INT 1
54689: EQUAL
54690: IFFALSE 54711
// points := [ 10 , 5 , 3 ] ;
54692: LD_ADDR_VAR 0 9
54696: PUSH
54697: LD_INT 10
54699: PUSH
54700: LD_INT 5
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
54711: LD_VAR 0 6
54715: PPUSH
54716: CALL_OW 257
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: LD_INT 3
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: IN
54735: IFFALSE 54756
// points := [ 3 , 2 , 1 ] ;
54737: LD_ADDR_VAR 0 9
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// if GetClass ( i ) = 5 then
54756: LD_VAR 0 6
54760: PPUSH
54761: CALL_OW 257
54765: PUSH
54766: LD_INT 5
54768: EQUAL
54769: IFFALSE 54790
// points := [ 130 , 5 , 2 ] ;
54771: LD_ADDR_VAR 0 9
54775: PUSH
54776: LD_INT 130
54778: PUSH
54779: LD_INT 5
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// if GetClass ( i ) = 8 then
54790: LD_VAR 0 6
54794: PPUSH
54795: CALL_OW 257
54799: PUSH
54800: LD_INT 8
54802: EQUAL
54803: IFFALSE 54824
// points := [ 35 , 35 , 30 ] ;
54805: LD_ADDR_VAR 0 9
54809: PUSH
54810: LD_INT 35
54812: PUSH
54813: LD_INT 35
54815: PUSH
54816: LD_INT 30
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// if GetClass ( i ) = 9 then
54824: LD_VAR 0 6
54828: PPUSH
54829: CALL_OW 257
54833: PUSH
54834: LD_INT 9
54836: EQUAL
54837: IFFALSE 54858
// points := [ 20 , 55 , 40 ] ;
54839: LD_ADDR_VAR 0 9
54843: PUSH
54844: LD_INT 20
54846: PUSH
54847: LD_INT 55
54849: PUSH
54850: LD_INT 40
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
54858: LD_VAR 0 6
54862: PPUSH
54863: CALL_OW 257
54867: PUSH
54868: LD_INT 12
54870: PUSH
54871: LD_INT 16
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: IN
54878: IFFALSE 54899
// points := [ 5 , 3 , 2 ] ;
54880: LD_ADDR_VAR 0 9
54884: PUSH
54885: LD_INT 5
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// if GetClass ( i ) = 17 then
54899: LD_VAR 0 6
54903: PPUSH
54904: CALL_OW 257
54908: PUSH
54909: LD_INT 17
54911: EQUAL
54912: IFFALSE 54933
// points := [ 100 , 50 , 75 ] ;
54914: LD_ADDR_VAR 0 9
54918: PUSH
54919: LD_INT 100
54921: PUSH
54922: LD_INT 50
54924: PUSH
54925: LD_INT 75
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: LIST
54932: ST_TO_ADDR
// if GetClass ( i ) = 15 then
54933: LD_VAR 0 6
54937: PPUSH
54938: CALL_OW 257
54942: PUSH
54943: LD_INT 15
54945: EQUAL
54946: IFFALSE 54967
// points := [ 10 , 5 , 3 ] ;
54948: LD_ADDR_VAR 0 9
54952: PUSH
54953: LD_INT 10
54955: PUSH
54956: LD_INT 5
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// if GetClass ( i ) = 14 then
54967: LD_VAR 0 6
54971: PPUSH
54972: CALL_OW 257
54976: PUSH
54977: LD_INT 14
54979: EQUAL
54980: IFFALSE 55001
// points := [ 10 , 0 , 0 ] ;
54982: LD_ADDR_VAR 0 9
54986: PUSH
54987: LD_INT 10
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// if GetClass ( i ) = 11 then
55001: LD_VAR 0 6
55005: PPUSH
55006: CALL_OW 257
55010: PUSH
55011: LD_INT 11
55013: EQUAL
55014: IFFALSE 55035
// points := [ 30 , 10 , 5 ] ;
55016: LD_ADDR_VAR 0 9
55020: PUSH
55021: LD_INT 30
55023: PUSH
55024: LD_INT 10
55026: PUSH
55027: LD_INT 5
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
55035: LD_VAR 0 1
55039: PPUSH
55040: LD_INT 5
55042: PPUSH
55043: CALL_OW 321
55047: PUSH
55048: LD_INT 2
55050: EQUAL
55051: IFFALSE 55068
// bpoints := bpoints * 1.8 ;
55053: LD_ADDR_VAR 0 10
55057: PUSH
55058: LD_VAR 0 10
55062: PUSH
55063: LD_REAL  1.80000000000000E+0000
55066: MUL
55067: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
55068: LD_VAR 0 6
55072: PPUSH
55073: CALL_OW 257
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: IN
55096: PUSH
55097: LD_VAR 0 1
55101: PPUSH
55102: LD_INT 51
55104: PPUSH
55105: CALL_OW 321
55109: PUSH
55110: LD_INT 2
55112: EQUAL
55113: AND
55114: IFFALSE 55131
// bpoints := bpoints * 1.2 ;
55116: LD_ADDR_VAR 0 10
55120: PUSH
55121: LD_VAR 0 10
55125: PUSH
55126: LD_REAL  1.20000000000000E+0000
55129: MUL
55130: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
55131: LD_VAR 0 6
55135: PPUSH
55136: CALL_OW 257
55140: PUSH
55141: LD_INT 5
55143: PUSH
55144: LD_INT 7
55146: PUSH
55147: LD_INT 9
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: IN
55155: PUSH
55156: LD_VAR 0 1
55160: PPUSH
55161: LD_INT 52
55163: PPUSH
55164: CALL_OW 321
55168: PUSH
55169: LD_INT 2
55171: EQUAL
55172: AND
55173: IFFALSE 55190
// bpoints := bpoints * 1.5 ;
55175: LD_ADDR_VAR 0 10
55179: PUSH
55180: LD_VAR 0 10
55184: PUSH
55185: LD_REAL  1.50000000000000E+0000
55188: MUL
55189: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
55190: LD_VAR 0 1
55194: PPUSH
55195: LD_INT 66
55197: PPUSH
55198: CALL_OW 321
55202: PUSH
55203: LD_INT 2
55205: EQUAL
55206: IFFALSE 55223
// bpoints := bpoints * 1.1 ;
55208: LD_ADDR_VAR 0 10
55212: PUSH
55213: LD_VAR 0 10
55217: PUSH
55218: LD_REAL  1.10000000000000E+0000
55221: MUL
55222: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
55223: LD_ADDR_VAR 0 10
55227: PUSH
55228: LD_VAR 0 10
55232: PUSH
55233: LD_VAR 0 6
55237: PPUSH
55238: LD_INT 1
55240: PPUSH
55241: CALL_OW 259
55245: PUSH
55246: LD_REAL  1.15000000000000E+0000
55249: MUL
55250: MUL
55251: ST_TO_ADDR
// end ; unit_vehicle :
55252: GO 56076
55254: LD_INT 2
55256: DOUBLE
55257: EQUAL
55258: IFTRUE 55262
55260: GO 56064
55262: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
55263: LD_VAR 0 6
55267: PPUSH
55268: CALL_OW 264
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 42
55278: PUSH
55279: LD_INT 24
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: IN
55287: IFFALSE 55308
// points := [ 25 , 5 , 3 ] ;
55289: LD_ADDR_VAR 0 9
55293: PUSH
55294: LD_INT 25
55296: PUSH
55297: LD_INT 5
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
55308: LD_VAR 0 6
55312: PPUSH
55313: CALL_OW 264
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: LD_INT 43
55323: PUSH
55324: LD_INT 25
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: IN
55332: IFFALSE 55353
// points := [ 40 , 15 , 5 ] ;
55334: LD_ADDR_VAR 0 9
55338: PUSH
55339: LD_INT 40
55341: PUSH
55342: LD_INT 15
55344: PUSH
55345: LD_INT 5
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
55353: LD_VAR 0 6
55357: PPUSH
55358: CALL_OW 264
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: LD_INT 23
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: IN
55373: IFFALSE 55394
// points := [ 7 , 25 , 8 ] ;
55375: LD_ADDR_VAR 0 9
55379: PUSH
55380: LD_INT 7
55382: PUSH
55383: LD_INT 25
55385: PUSH
55386: LD_INT 8
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
55394: LD_VAR 0 6
55398: PPUSH
55399: CALL_OW 264
55403: PUSH
55404: LD_INT 5
55406: PUSH
55407: LD_INT 27
55409: PUSH
55410: LD_INT 44
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: IN
55418: IFFALSE 55439
// points := [ 14 , 50 , 16 ] ;
55420: LD_ADDR_VAR 0 9
55424: PUSH
55425: LD_INT 14
55427: PUSH
55428: LD_INT 50
55430: PUSH
55431: LD_INT 16
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
55439: LD_VAR 0 6
55443: PPUSH
55444: CALL_OW 264
55448: PUSH
55449: LD_INT 6
55451: PUSH
55452: LD_INT 46
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: IN
55459: IFFALSE 55480
// points := [ 32 , 120 , 70 ] ;
55461: LD_ADDR_VAR 0 9
55465: PUSH
55466: LD_INT 32
55468: PUSH
55469: LD_INT 120
55471: PUSH
55472: LD_INT 70
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
55480: LD_VAR 0 6
55484: PPUSH
55485: CALL_OW 264
55489: PUSH
55490: LD_INT 7
55492: PUSH
55493: LD_INT 28
55495: PUSH
55496: LD_INT 45
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: IN
55504: IFFALSE 55525
// points := [ 35 , 20 , 45 ] ;
55506: LD_ADDR_VAR 0 9
55510: PUSH
55511: LD_INT 35
55513: PUSH
55514: LD_INT 20
55516: PUSH
55517: LD_INT 45
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
55525: LD_VAR 0 6
55529: PPUSH
55530: CALL_OW 264
55534: PUSH
55535: LD_INT 47
55537: PUSH
55538: EMPTY
55539: LIST
55540: IN
55541: IFFALSE 55562
// points := [ 67 , 45 , 75 ] ;
55543: LD_ADDR_VAR 0 9
55547: PUSH
55548: LD_INT 67
55550: PUSH
55551: LD_INT 45
55553: PUSH
55554: LD_INT 75
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
55562: LD_VAR 0 6
55566: PPUSH
55567: CALL_OW 264
55571: PUSH
55572: LD_INT 26
55574: PUSH
55575: EMPTY
55576: LIST
55577: IN
55578: IFFALSE 55599
// points := [ 120 , 30 , 80 ] ;
55580: LD_ADDR_VAR 0 9
55584: PUSH
55585: LD_INT 120
55587: PUSH
55588: LD_INT 30
55590: PUSH
55591: LD_INT 80
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
55599: LD_VAR 0 6
55603: PPUSH
55604: CALL_OW 264
55608: PUSH
55609: LD_INT 22
55611: PUSH
55612: EMPTY
55613: LIST
55614: IN
55615: IFFALSE 55636
// points := [ 40 , 1 , 1 ] ;
55617: LD_ADDR_VAR 0 9
55621: PUSH
55622: LD_INT 40
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
55636: LD_VAR 0 6
55640: PPUSH
55641: CALL_OW 264
55645: PUSH
55646: LD_INT 29
55648: PUSH
55649: EMPTY
55650: LIST
55651: IN
55652: IFFALSE 55673
// points := [ 70 , 200 , 400 ] ;
55654: LD_ADDR_VAR 0 9
55658: PUSH
55659: LD_INT 70
55661: PUSH
55662: LD_INT 200
55664: PUSH
55665: LD_INT 400
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
55673: LD_VAR 0 6
55677: PPUSH
55678: CALL_OW 264
55682: PUSH
55683: LD_INT 14
55685: PUSH
55686: LD_INT 53
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: IN
55693: IFFALSE 55714
// points := [ 40 , 10 , 20 ] ;
55695: LD_ADDR_VAR 0 9
55699: PUSH
55700: LD_INT 40
55702: PUSH
55703: LD_INT 10
55705: PUSH
55706: LD_INT 20
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
55714: LD_VAR 0 6
55718: PPUSH
55719: CALL_OW 264
55723: PUSH
55724: LD_INT 9
55726: PUSH
55727: EMPTY
55728: LIST
55729: IN
55730: IFFALSE 55751
// points := [ 5 , 70 , 20 ] ;
55732: LD_ADDR_VAR 0 9
55736: PUSH
55737: LD_INT 5
55739: PUSH
55740: LD_INT 70
55742: PUSH
55743: LD_INT 20
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
55751: LD_VAR 0 6
55755: PPUSH
55756: CALL_OW 264
55760: PUSH
55761: LD_INT 10
55763: PUSH
55764: EMPTY
55765: LIST
55766: IN
55767: IFFALSE 55788
// points := [ 35 , 110 , 70 ] ;
55769: LD_ADDR_VAR 0 9
55773: PUSH
55774: LD_INT 35
55776: PUSH
55777: LD_INT 110
55779: PUSH
55780: LD_INT 70
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
55788: LD_VAR 0 6
55792: PPUSH
55793: CALL_OW 265
55797: PUSH
55798: LD_INT 25
55800: EQUAL
55801: IFFALSE 55822
// points := [ 80 , 65 , 100 ] ;
55803: LD_ADDR_VAR 0 9
55807: PUSH
55808: LD_INT 80
55810: PUSH
55811: LD_INT 65
55813: PUSH
55814: LD_INT 100
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
55822: LD_VAR 0 6
55826: PPUSH
55827: CALL_OW 263
55831: PUSH
55832: LD_INT 1
55834: EQUAL
55835: IFFALSE 55870
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
55837: LD_ADDR_VAR 0 10
55841: PUSH
55842: LD_VAR 0 10
55846: PUSH
55847: LD_VAR 0 6
55851: PPUSH
55852: CALL_OW 311
55856: PPUSH
55857: LD_INT 3
55859: PPUSH
55860: CALL_OW 259
55864: PUSH
55865: LD_INT 4
55867: MUL
55868: MUL
55869: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
55870: LD_VAR 0 6
55874: PPUSH
55875: CALL_OW 263
55879: PUSH
55880: LD_INT 2
55882: EQUAL
55883: IFFALSE 55934
// begin j := IsControledBy ( i ) ;
55885: LD_ADDR_VAR 0 7
55889: PUSH
55890: LD_VAR 0 6
55894: PPUSH
55895: CALL_OW 312
55899: ST_TO_ADDR
// if j then
55900: LD_VAR 0 7
55904: IFFALSE 55934
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
55906: LD_ADDR_VAR 0 10
55910: PUSH
55911: LD_VAR 0 10
55915: PUSH
55916: LD_VAR 0 7
55920: PPUSH
55921: LD_INT 3
55923: PPUSH
55924: CALL_OW 259
55928: PUSH
55929: LD_INT 3
55931: MUL
55932: MUL
55933: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
55934: LD_VAR 0 6
55938: PPUSH
55939: CALL_OW 264
55943: PUSH
55944: LD_INT 5
55946: PUSH
55947: LD_INT 6
55949: PUSH
55950: LD_INT 46
55952: PUSH
55953: LD_INT 44
55955: PUSH
55956: LD_INT 47
55958: PUSH
55959: LD_INT 45
55961: PUSH
55962: LD_INT 28
55964: PUSH
55965: LD_INT 7
55967: PUSH
55968: LD_INT 27
55970: PUSH
55971: LD_INT 29
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: IN
55986: PUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: LD_INT 52
55994: PPUSH
55995: CALL_OW 321
55999: PUSH
56000: LD_INT 2
56002: EQUAL
56003: AND
56004: IFFALSE 56021
// bpoints := bpoints * 1.2 ;
56006: LD_ADDR_VAR 0 10
56010: PUSH
56011: LD_VAR 0 10
56015: PUSH
56016: LD_REAL  1.20000000000000E+0000
56019: MUL
56020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
56021: LD_VAR 0 6
56025: PPUSH
56026: CALL_OW 264
56030: PUSH
56031: LD_INT 6
56033: PUSH
56034: LD_INT 46
56036: PUSH
56037: LD_INT 47
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: LIST
56044: IN
56045: IFFALSE 56062
// bpoints := bpoints * 1.2 ;
56047: LD_ADDR_VAR 0 10
56051: PUSH
56052: LD_VAR 0 10
56056: PUSH
56057: LD_REAL  1.20000000000000E+0000
56060: MUL
56061: ST_TO_ADDR
// end ; unit_building :
56062: GO 56076
56064: LD_INT 3
56066: DOUBLE
56067: EQUAL
56068: IFTRUE 56072
56070: GO 56075
56072: POP
// ; end ;
56073: GO 56076
56075: POP
// for j = 1 to 3 do
56076: LD_ADDR_VAR 0 7
56080: PUSH
56081: DOUBLE
56082: LD_INT 1
56084: DEC
56085: ST_TO_ADDR
56086: LD_INT 3
56088: PUSH
56089: FOR_TO
56090: IFFALSE 56143
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
56092: LD_ADDR_VAR 0 5
56096: PUSH
56097: LD_VAR 0 5
56101: PPUSH
56102: LD_VAR 0 7
56106: PPUSH
56107: LD_VAR 0 5
56111: PUSH
56112: LD_VAR 0 7
56116: ARRAY
56117: PUSH
56118: LD_VAR 0 9
56122: PUSH
56123: LD_VAR 0 7
56127: ARRAY
56128: PUSH
56129: LD_VAR 0 10
56133: MUL
56134: PLUS
56135: PPUSH
56136: CALL_OW 1
56140: ST_TO_ADDR
56141: GO 56089
56143: POP
56144: POP
// end ;
56145: GO 54628
56147: POP
56148: POP
// result := Replace ( result , 4 , tmp ) ;
56149: LD_ADDR_VAR 0 5
56153: PUSH
56154: LD_VAR 0 5
56158: PPUSH
56159: LD_INT 4
56161: PPUSH
56162: LD_VAR 0 8
56166: PPUSH
56167: CALL_OW 1
56171: ST_TO_ADDR
// end ;
56172: LD_VAR 0 5
56176: RET
// export function DangerAtRange ( unit , range ) ; begin
56177: LD_INT 0
56179: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
56180: LD_ADDR_VAR 0 3
56184: PUSH
56185: LD_VAR 0 1
56189: PPUSH
56190: CALL_OW 255
56194: PPUSH
56195: LD_VAR 0 1
56199: PPUSH
56200: CALL_OW 250
56204: PPUSH
56205: LD_VAR 0 1
56209: PPUSH
56210: CALL_OW 251
56214: PPUSH
56215: LD_VAR 0 2
56219: PPUSH
56220: CALL 54480 0 4
56224: ST_TO_ADDR
// end ;
56225: LD_VAR 0 3
56229: RET
// export function DangerInArea ( side , area ) ; begin
56230: LD_INT 0
56232: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: LD_VAR 0 2
56242: PPUSH
56243: LD_INT 81
56245: PUSH
56246: LD_VAR 0 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PPUSH
56255: CALL_OW 70
56259: ST_TO_ADDR
// end ;
56260: LD_VAR 0 3
56264: RET
// export function IsExtension ( b ) ; begin
56265: LD_INT 0
56267: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
56268: LD_ADDR_VAR 0 2
56272: PUSH
56273: LD_VAR 0 1
56277: PUSH
56278: LD_INT 23
56280: PUSH
56281: LD_INT 20
56283: PUSH
56284: LD_INT 22
56286: PUSH
56287: LD_INT 17
56289: PUSH
56290: LD_INT 24
56292: PUSH
56293: LD_INT 21
56295: PUSH
56296: LD_INT 19
56298: PUSH
56299: LD_INT 16
56301: PUSH
56302: LD_INT 25
56304: PUSH
56305: LD_INT 18
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: IN
56320: ST_TO_ADDR
// end ;
56321: LD_VAR 0 2
56325: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
56326: LD_INT 0
56328: PPUSH
56329: PPUSH
56330: PPUSH
// result := [ ] ;
56331: LD_ADDR_VAR 0 3
56335: PUSH
56336: EMPTY
56337: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
56338: LD_ADDR_VAR 0 4
56342: PUSH
56343: LD_VAR 0 2
56347: PPUSH
56348: LD_INT 21
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PPUSH
56358: CALL_OW 70
56362: ST_TO_ADDR
// if not tmp then
56363: LD_VAR 0 4
56367: NOT
56368: IFFALSE 56372
// exit ;
56370: GO 56430
// for i in tmp do
56372: LD_ADDR_VAR 0 5
56376: PUSH
56377: LD_VAR 0 4
56381: PUSH
56382: FOR_IN
56383: IFFALSE 56418
// if GetBase ( i ) <> base then
56385: LD_VAR 0 5
56389: PPUSH
56390: CALL_OW 274
56394: PUSH
56395: LD_VAR 0 1
56399: NONEQUAL
56400: IFFALSE 56416
// ComLinkToBase ( base , i ) ;
56402: LD_VAR 0 1
56406: PPUSH
56407: LD_VAR 0 5
56411: PPUSH
56412: CALL_OW 169
56416: GO 56382
56418: POP
56419: POP
// result := tmp ;
56420: LD_ADDR_VAR 0 3
56424: PUSH
56425: LD_VAR 0 4
56429: ST_TO_ADDR
// end ;
56430: LD_VAR 0 3
56434: RET
// export function ComComplete ( unit , b ) ; var i ; begin
56435: LD_INT 0
56437: PPUSH
56438: PPUSH
// if BuildingStatus ( b ) = bs_build then
56439: LD_VAR 0 2
56443: PPUSH
56444: CALL_OW 461
56448: PUSH
56449: LD_INT 1
56451: EQUAL
56452: IFFALSE 56512
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
56454: LD_VAR 0 1
56458: PPUSH
56459: LD_STRING h
56461: PUSH
56462: LD_VAR 0 2
56466: PPUSH
56467: CALL_OW 250
56471: PUSH
56472: LD_VAR 0 2
56476: PPUSH
56477: CALL_OW 251
56481: PUSH
56482: LD_VAR 0 2
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: PUSH
56505: EMPTY
56506: LIST
56507: PPUSH
56508: CALL_OW 446
// end ;
56512: LD_VAR 0 3
56516: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
56517: LD_INT 0
56519: PPUSH
56520: PPUSH
56521: PPUSH
56522: PPUSH
56523: PPUSH
56524: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
56525: LD_VAR 0 1
56529: NOT
56530: PUSH
56531: LD_VAR 0 1
56535: PPUSH
56536: CALL_OW 263
56540: PUSH
56541: LD_INT 2
56543: EQUAL
56544: NOT
56545: OR
56546: IFFALSE 56550
// exit ;
56548: GO 56866
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
56550: LD_ADDR_VAR 0 6
56554: PUSH
56555: LD_INT 22
56557: PUSH
56558: LD_VAR 0 1
56562: PPUSH
56563: CALL_OW 255
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: LD_INT 30
56577: PUSH
56578: LD_INT 36
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 34
56587: PUSH
56588: LD_INT 31
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PPUSH
56604: CALL_OW 69
56608: ST_TO_ADDR
// if not tmp then
56609: LD_VAR 0 6
56613: NOT
56614: IFFALSE 56618
// exit ;
56616: GO 56866
// result := [ ] ;
56618: LD_ADDR_VAR 0 2
56622: PUSH
56623: EMPTY
56624: ST_TO_ADDR
// for i in tmp do
56625: LD_ADDR_VAR 0 3
56629: PUSH
56630: LD_VAR 0 6
56634: PUSH
56635: FOR_IN
56636: IFFALSE 56707
// begin t := UnitsInside ( i ) ;
56638: LD_ADDR_VAR 0 4
56642: PUSH
56643: LD_VAR 0 3
56647: PPUSH
56648: CALL_OW 313
56652: ST_TO_ADDR
// if t then
56653: LD_VAR 0 4
56657: IFFALSE 56705
// for j in t do
56659: LD_ADDR_VAR 0 7
56663: PUSH
56664: LD_VAR 0 4
56668: PUSH
56669: FOR_IN
56670: IFFALSE 56703
// result := Insert ( result , result + 1 , j ) ;
56672: LD_ADDR_VAR 0 2
56676: PUSH
56677: LD_VAR 0 2
56681: PPUSH
56682: LD_VAR 0 2
56686: PUSH
56687: LD_INT 1
56689: PLUS
56690: PPUSH
56691: LD_VAR 0 7
56695: PPUSH
56696: CALL_OW 2
56700: ST_TO_ADDR
56701: GO 56669
56703: POP
56704: POP
// end ;
56705: GO 56635
56707: POP
56708: POP
// if not result then
56709: LD_VAR 0 2
56713: NOT
56714: IFFALSE 56718
// exit ;
56716: GO 56866
// mech := result [ 1 ] ;
56718: LD_ADDR_VAR 0 5
56722: PUSH
56723: LD_VAR 0 2
56727: PUSH
56728: LD_INT 1
56730: ARRAY
56731: ST_TO_ADDR
// if result > 1 then
56732: LD_VAR 0 2
56736: PUSH
56737: LD_INT 1
56739: GREATER
56740: IFFALSE 56852
// for i = 2 to result do
56742: LD_ADDR_VAR 0 3
56746: PUSH
56747: DOUBLE
56748: LD_INT 2
56750: DEC
56751: ST_TO_ADDR
56752: LD_VAR 0 2
56756: PUSH
56757: FOR_TO
56758: IFFALSE 56850
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
56760: LD_ADDR_VAR 0 4
56764: PUSH
56765: LD_VAR 0 2
56769: PUSH
56770: LD_VAR 0 3
56774: ARRAY
56775: PPUSH
56776: LD_INT 3
56778: PPUSH
56779: CALL_OW 259
56783: PUSH
56784: LD_VAR 0 2
56788: PUSH
56789: LD_VAR 0 3
56793: ARRAY
56794: PPUSH
56795: CALL_OW 432
56799: MINUS
56800: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
56801: LD_VAR 0 4
56805: PUSH
56806: LD_VAR 0 5
56810: PPUSH
56811: LD_INT 3
56813: PPUSH
56814: CALL_OW 259
56818: PUSH
56819: LD_VAR 0 5
56823: PPUSH
56824: CALL_OW 432
56828: MINUS
56829: GREATEREQUAL
56830: IFFALSE 56848
// mech := result [ i ] ;
56832: LD_ADDR_VAR 0 5
56836: PUSH
56837: LD_VAR 0 2
56841: PUSH
56842: LD_VAR 0 3
56846: ARRAY
56847: ST_TO_ADDR
// end ;
56848: GO 56757
56850: POP
56851: POP
// ComLinkTo ( vehicle , mech ) ;
56852: LD_VAR 0 1
56856: PPUSH
56857: LD_VAR 0 5
56861: PPUSH
56862: CALL_OW 135
// end ;
56866: LD_VAR 0 2
56870: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
56871: LD_INT 0
56873: PPUSH
56874: PPUSH
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
56879: PPUSH
56880: PPUSH
56881: PPUSH
56882: PPUSH
56883: PPUSH
56884: PPUSH
56885: PPUSH
// result := [ ] ;
56886: LD_ADDR_VAR 0 7
56890: PUSH
56891: EMPTY
56892: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
56893: LD_VAR 0 1
56897: PPUSH
56898: CALL_OW 266
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: IN
56913: NOT
56914: IFFALSE 56918
// exit ;
56916: GO 58549
// if name then
56918: LD_VAR 0 3
56922: IFFALSE 56938
// SetBName ( base_dep , name ) ;
56924: LD_VAR 0 1
56928: PPUSH
56929: LD_VAR 0 3
56933: PPUSH
56934: CALL_OW 500
// base := GetBase ( base_dep ) ;
56938: LD_ADDR_VAR 0 15
56942: PUSH
56943: LD_VAR 0 1
56947: PPUSH
56948: CALL_OW 274
56952: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
56953: LD_ADDR_VAR 0 16
56957: PUSH
56958: LD_VAR 0 1
56962: PPUSH
56963: CALL_OW 255
56967: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
56968: LD_ADDR_VAR 0 17
56972: PUSH
56973: LD_VAR 0 1
56977: PPUSH
56978: CALL_OW 248
56982: ST_TO_ADDR
// if sources then
56983: LD_VAR 0 5
56987: IFFALSE 57034
// for i = 1 to 3 do
56989: LD_ADDR_VAR 0 8
56993: PUSH
56994: DOUBLE
56995: LD_INT 1
56997: DEC
56998: ST_TO_ADDR
56999: LD_INT 3
57001: PUSH
57002: FOR_TO
57003: IFFALSE 57032
// AddResourceType ( base , i , sources [ i ] ) ;
57005: LD_VAR 0 15
57009: PPUSH
57010: LD_VAR 0 8
57014: PPUSH
57015: LD_VAR 0 5
57019: PUSH
57020: LD_VAR 0 8
57024: ARRAY
57025: PPUSH
57026: CALL_OW 276
57030: GO 57002
57032: POP
57033: POP
// buildings := GetBaseBuildings ( base , area ) ;
57034: LD_ADDR_VAR 0 18
57038: PUSH
57039: LD_VAR 0 15
57043: PPUSH
57044: LD_VAR 0 2
57048: PPUSH
57049: CALL 56326 0 2
57053: ST_TO_ADDR
// InitHc ;
57054: CALL_OW 19
// InitUc ;
57058: CALL_OW 18
// uc_side := side ;
57062: LD_ADDR_OWVAR 20
57066: PUSH
57067: LD_VAR 0 16
57071: ST_TO_ADDR
// uc_nation := nation ;
57072: LD_ADDR_OWVAR 21
57076: PUSH
57077: LD_VAR 0 17
57081: ST_TO_ADDR
// if buildings then
57082: LD_VAR 0 18
57086: IFFALSE 58408
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
57088: LD_ADDR_VAR 0 19
57092: PUSH
57093: LD_VAR 0 18
57097: PPUSH
57098: LD_INT 2
57100: PUSH
57101: LD_INT 30
57103: PUSH
57104: LD_INT 29
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 30
57113: PUSH
57114: LD_INT 30
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: PPUSH
57126: CALL_OW 72
57130: ST_TO_ADDR
// if tmp then
57131: LD_VAR 0 19
57135: IFFALSE 57183
// for i in tmp do
57137: LD_ADDR_VAR 0 8
57141: PUSH
57142: LD_VAR 0 19
57146: PUSH
57147: FOR_IN
57148: IFFALSE 57181
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
57150: LD_VAR 0 8
57154: PPUSH
57155: CALL_OW 250
57159: PPUSH
57160: LD_VAR 0 8
57164: PPUSH
57165: CALL_OW 251
57169: PPUSH
57170: LD_VAR 0 16
57174: PPUSH
57175: CALL_OW 441
57179: GO 57147
57181: POP
57182: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
57183: LD_VAR 0 18
57187: PPUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 30
57193: PUSH
57194: LD_INT 32
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 30
57203: PUSH
57204: LD_INT 33
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: PPUSH
57216: CALL_OW 72
57220: IFFALSE 57308
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
57222: LD_ADDR_VAR 0 8
57226: PUSH
57227: LD_VAR 0 18
57231: PPUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 30
57237: PUSH
57238: LD_INT 32
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 30
57247: PUSH
57248: LD_INT 33
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: PPUSH
57260: CALL_OW 72
57264: PUSH
57265: FOR_IN
57266: IFFALSE 57306
// begin if not GetBWeapon ( i ) then
57268: LD_VAR 0 8
57272: PPUSH
57273: CALL_OW 269
57277: NOT
57278: IFFALSE 57304
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
57280: LD_VAR 0 8
57284: PPUSH
57285: LD_VAR 0 8
57289: PPUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: CALL 58554 0 2
57299: PPUSH
57300: CALL_OW 431
// end ;
57304: GO 57265
57306: POP
57307: POP
// end ; for i = 1 to personel do
57308: LD_ADDR_VAR 0 8
57312: PUSH
57313: DOUBLE
57314: LD_INT 1
57316: DEC
57317: ST_TO_ADDR
57318: LD_VAR 0 6
57322: PUSH
57323: FOR_TO
57324: IFFALSE 58388
// begin if i > 4 then
57326: LD_VAR 0 8
57330: PUSH
57331: LD_INT 4
57333: GREATER
57334: IFFALSE 57338
// break ;
57336: GO 58388
// case i of 1 :
57338: LD_VAR 0 8
57342: PUSH
57343: LD_INT 1
57345: DOUBLE
57346: EQUAL
57347: IFTRUE 57351
57349: GO 57431
57351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
57352: LD_ADDR_VAR 0 12
57356: PUSH
57357: LD_VAR 0 18
57361: PPUSH
57362: LD_INT 22
57364: PUSH
57365: LD_VAR 0 16
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 58
57376: PUSH
57377: EMPTY
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 30
57385: PUSH
57386: LD_INT 32
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 30
57395: PUSH
57396: LD_INT 4
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 30
57405: PUSH
57406: LD_INT 5
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: PPUSH
57424: CALL_OW 72
57428: ST_TO_ADDR
57429: GO 57653
57431: LD_INT 2
57433: DOUBLE
57434: EQUAL
57435: IFTRUE 57439
57437: GO 57501
57439: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
57440: LD_ADDR_VAR 0 12
57444: PUSH
57445: LD_VAR 0 18
57449: PPUSH
57450: LD_INT 22
57452: PUSH
57453: LD_VAR 0 16
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 30
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 30
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PPUSH
57494: CALL_OW 72
57498: ST_TO_ADDR
57499: GO 57653
57501: LD_INT 3
57503: DOUBLE
57504: EQUAL
57505: IFTRUE 57509
57507: GO 57571
57509: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
57510: LD_ADDR_VAR 0 12
57514: PUSH
57515: LD_VAR 0 18
57519: PPUSH
57520: LD_INT 22
57522: PUSH
57523: LD_VAR 0 16
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 30
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 30
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PPUSH
57564: CALL_OW 72
57568: ST_TO_ADDR
57569: GO 57653
57571: LD_INT 4
57573: DOUBLE
57574: EQUAL
57575: IFTRUE 57579
57577: GO 57652
57579: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
57580: LD_ADDR_VAR 0 12
57584: PUSH
57585: LD_VAR 0 18
57589: PPUSH
57590: LD_INT 22
57592: PUSH
57593: LD_VAR 0 16
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: LD_INT 30
57607: PUSH
57608: LD_INT 6
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 30
57617: PUSH
57618: LD_INT 7
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 30
57627: PUSH
57628: LD_INT 8
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PPUSH
57645: CALL_OW 72
57649: ST_TO_ADDR
57650: GO 57653
57652: POP
// if i = 1 then
57653: LD_VAR 0 8
57657: PUSH
57658: LD_INT 1
57660: EQUAL
57661: IFFALSE 57772
// begin tmp := [ ] ;
57663: LD_ADDR_VAR 0 19
57667: PUSH
57668: EMPTY
57669: ST_TO_ADDR
// for j in f do
57670: LD_ADDR_VAR 0 9
57674: PUSH
57675: LD_VAR 0 12
57679: PUSH
57680: FOR_IN
57681: IFFALSE 57754
// if GetBType ( j ) = b_bunker then
57683: LD_VAR 0 9
57687: PPUSH
57688: CALL_OW 266
57692: PUSH
57693: LD_INT 32
57695: EQUAL
57696: IFFALSE 57723
// tmp := Insert ( tmp , 1 , j ) else
57698: LD_ADDR_VAR 0 19
57702: PUSH
57703: LD_VAR 0 19
57707: PPUSH
57708: LD_INT 1
57710: PPUSH
57711: LD_VAR 0 9
57715: PPUSH
57716: CALL_OW 2
57720: ST_TO_ADDR
57721: GO 57752
// tmp := Insert ( tmp , tmp + 1 , j ) ;
57723: LD_ADDR_VAR 0 19
57727: PUSH
57728: LD_VAR 0 19
57732: PPUSH
57733: LD_VAR 0 19
57737: PUSH
57738: LD_INT 1
57740: PLUS
57741: PPUSH
57742: LD_VAR 0 9
57746: PPUSH
57747: CALL_OW 2
57751: ST_TO_ADDR
57752: GO 57680
57754: POP
57755: POP
// if tmp then
57756: LD_VAR 0 19
57760: IFFALSE 57772
// f := tmp ;
57762: LD_ADDR_VAR 0 12
57766: PUSH
57767: LD_VAR 0 19
57771: ST_TO_ADDR
// end ; x := personel [ i ] ;
57772: LD_ADDR_VAR 0 13
57776: PUSH
57777: LD_VAR 0 6
57781: PUSH
57782: LD_VAR 0 8
57786: ARRAY
57787: ST_TO_ADDR
// if x = - 1 then
57788: LD_VAR 0 13
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: EQUAL
57797: IFFALSE 58006
// begin for j in f do
57799: LD_ADDR_VAR 0 9
57803: PUSH
57804: LD_VAR 0 12
57808: PUSH
57809: FOR_IN
57810: IFFALSE 58002
// repeat InitHc ;
57812: CALL_OW 19
// if GetBType ( j ) = b_barracks then
57816: LD_VAR 0 9
57820: PPUSH
57821: CALL_OW 266
57825: PUSH
57826: LD_INT 5
57828: EQUAL
57829: IFFALSE 57899
// begin if UnitsInside ( j ) < 3 then
57831: LD_VAR 0 9
57835: PPUSH
57836: CALL_OW 313
57840: PUSH
57841: LD_INT 3
57843: LESS
57844: IFFALSE 57880
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57846: LD_INT 0
57848: PPUSH
57849: LD_INT 5
57851: PUSH
57852: LD_INT 8
57854: PUSH
57855: LD_INT 9
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: LIST
57862: PUSH
57863: LD_VAR 0 17
57867: ARRAY
57868: PPUSH
57869: LD_VAR 0 4
57873: PPUSH
57874: CALL_OW 380
57878: GO 57897
// PrepareHuman ( false , i , skill ) ;
57880: LD_INT 0
57882: PPUSH
57883: LD_VAR 0 8
57887: PPUSH
57888: LD_VAR 0 4
57892: PPUSH
57893: CALL_OW 380
// end else
57897: GO 57916
// PrepareHuman ( false , i , skill ) ;
57899: LD_INT 0
57901: PPUSH
57902: LD_VAR 0 8
57906: PPUSH
57907: LD_VAR 0 4
57911: PPUSH
57912: CALL_OW 380
// un := CreateHuman ;
57916: LD_ADDR_VAR 0 14
57920: PUSH
57921: CALL_OW 44
57925: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57926: LD_ADDR_VAR 0 7
57930: PUSH
57931: LD_VAR 0 7
57935: PPUSH
57936: LD_INT 1
57938: PPUSH
57939: LD_VAR 0 14
57943: PPUSH
57944: CALL_OW 2
57948: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
57949: LD_VAR 0 14
57953: PPUSH
57954: LD_VAR 0 9
57958: PPUSH
57959: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
57963: LD_VAR 0 9
57967: PPUSH
57968: CALL_OW 313
57972: PUSH
57973: LD_INT 6
57975: EQUAL
57976: PUSH
57977: LD_VAR 0 9
57981: PPUSH
57982: CALL_OW 266
57986: PUSH
57987: LD_INT 32
57989: PUSH
57990: LD_INT 31
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: IN
57997: OR
57998: IFFALSE 57812
58000: GO 57809
58002: POP
58003: POP
// end else
58004: GO 58386
// for j = 1 to x do
58006: LD_ADDR_VAR 0 9
58010: PUSH
58011: DOUBLE
58012: LD_INT 1
58014: DEC
58015: ST_TO_ADDR
58016: LD_VAR 0 13
58020: PUSH
58021: FOR_TO
58022: IFFALSE 58384
// begin InitHc ;
58024: CALL_OW 19
// if not f then
58028: LD_VAR 0 12
58032: NOT
58033: IFFALSE 58122
// begin PrepareHuman ( false , i , skill ) ;
58035: LD_INT 0
58037: PPUSH
58038: LD_VAR 0 8
58042: PPUSH
58043: LD_VAR 0 4
58047: PPUSH
58048: CALL_OW 380
// un := CreateHuman ;
58052: LD_ADDR_VAR 0 14
58056: PUSH
58057: CALL_OW 44
58061: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58062: LD_ADDR_VAR 0 7
58066: PUSH
58067: LD_VAR 0 7
58071: PPUSH
58072: LD_INT 1
58074: PPUSH
58075: LD_VAR 0 14
58079: PPUSH
58080: CALL_OW 2
58084: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58085: LD_VAR 0 14
58089: PPUSH
58090: LD_VAR 0 1
58094: PPUSH
58095: CALL_OW 250
58099: PPUSH
58100: LD_VAR 0 1
58104: PPUSH
58105: CALL_OW 251
58109: PPUSH
58110: LD_INT 10
58112: PPUSH
58113: LD_INT 0
58115: PPUSH
58116: CALL_OW 50
// continue ;
58120: GO 58021
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
58122: LD_VAR 0 12
58126: PUSH
58127: LD_INT 1
58129: ARRAY
58130: PPUSH
58131: CALL_OW 313
58135: PUSH
58136: LD_VAR 0 12
58140: PUSH
58141: LD_INT 1
58143: ARRAY
58144: PPUSH
58145: CALL_OW 266
58149: PUSH
58150: LD_INT 32
58152: PUSH
58153: LD_INT 31
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: IN
58160: AND
58161: PUSH
58162: LD_VAR 0 12
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PPUSH
58171: CALL_OW 313
58175: PUSH
58176: LD_INT 6
58178: EQUAL
58179: OR
58180: IFFALSE 58200
// f := Delete ( f , 1 ) ;
58182: LD_ADDR_VAR 0 12
58186: PUSH
58187: LD_VAR 0 12
58191: PPUSH
58192: LD_INT 1
58194: PPUSH
58195: CALL_OW 3
58199: ST_TO_ADDR
// if not f then
58200: LD_VAR 0 12
58204: NOT
58205: IFFALSE 58223
// begin x := x + 2 ;
58207: LD_ADDR_VAR 0 13
58211: PUSH
58212: LD_VAR 0 13
58216: PUSH
58217: LD_INT 2
58219: PLUS
58220: ST_TO_ADDR
// continue ;
58221: GO 58021
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
58223: LD_VAR 0 12
58227: PUSH
58228: LD_INT 1
58230: ARRAY
58231: PPUSH
58232: CALL_OW 266
58236: PUSH
58237: LD_INT 5
58239: EQUAL
58240: IFFALSE 58314
// begin if UnitsInside ( f [ 1 ] ) < 3 then
58242: LD_VAR 0 12
58246: PUSH
58247: LD_INT 1
58249: ARRAY
58250: PPUSH
58251: CALL_OW 313
58255: PUSH
58256: LD_INT 3
58258: LESS
58259: IFFALSE 58295
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58261: LD_INT 0
58263: PPUSH
58264: LD_INT 5
58266: PUSH
58267: LD_INT 8
58269: PUSH
58270: LD_INT 9
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: PUSH
58278: LD_VAR 0 17
58282: ARRAY
58283: PPUSH
58284: LD_VAR 0 4
58288: PPUSH
58289: CALL_OW 380
58293: GO 58312
// PrepareHuman ( false , i , skill ) ;
58295: LD_INT 0
58297: PPUSH
58298: LD_VAR 0 8
58302: PPUSH
58303: LD_VAR 0 4
58307: PPUSH
58308: CALL_OW 380
// end else
58312: GO 58331
// PrepareHuman ( false , i , skill ) ;
58314: LD_INT 0
58316: PPUSH
58317: LD_VAR 0 8
58321: PPUSH
58322: LD_VAR 0 4
58326: PPUSH
58327: CALL_OW 380
// un := CreateHuman ;
58331: LD_ADDR_VAR 0 14
58335: PUSH
58336: CALL_OW 44
58340: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58341: LD_ADDR_VAR 0 7
58345: PUSH
58346: LD_VAR 0 7
58350: PPUSH
58351: LD_INT 1
58353: PPUSH
58354: LD_VAR 0 14
58358: PPUSH
58359: CALL_OW 2
58363: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
58364: LD_VAR 0 14
58368: PPUSH
58369: LD_VAR 0 12
58373: PUSH
58374: LD_INT 1
58376: ARRAY
58377: PPUSH
58378: CALL_OW 52
// end ;
58382: GO 58021
58384: POP
58385: POP
// end ;
58386: GO 57323
58388: POP
58389: POP
// result := result ^ buildings ;
58390: LD_ADDR_VAR 0 7
58394: PUSH
58395: LD_VAR 0 7
58399: PUSH
58400: LD_VAR 0 18
58404: ADD
58405: ST_TO_ADDR
// end else
58406: GO 58549
// begin for i = 1 to personel do
58408: LD_ADDR_VAR 0 8
58412: PUSH
58413: DOUBLE
58414: LD_INT 1
58416: DEC
58417: ST_TO_ADDR
58418: LD_VAR 0 6
58422: PUSH
58423: FOR_TO
58424: IFFALSE 58547
// begin if i > 4 then
58426: LD_VAR 0 8
58430: PUSH
58431: LD_INT 4
58433: GREATER
58434: IFFALSE 58438
// break ;
58436: GO 58547
// x := personel [ i ] ;
58438: LD_ADDR_VAR 0 13
58442: PUSH
58443: LD_VAR 0 6
58447: PUSH
58448: LD_VAR 0 8
58452: ARRAY
58453: ST_TO_ADDR
// if x = - 1 then
58454: LD_VAR 0 13
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: EQUAL
58463: IFFALSE 58467
// continue ;
58465: GO 58423
// PrepareHuman ( false , i , skill ) ;
58467: LD_INT 0
58469: PPUSH
58470: LD_VAR 0 8
58474: PPUSH
58475: LD_VAR 0 4
58479: PPUSH
58480: CALL_OW 380
// un := CreateHuman ;
58484: LD_ADDR_VAR 0 14
58488: PUSH
58489: CALL_OW 44
58493: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58494: LD_VAR 0 14
58498: PPUSH
58499: LD_VAR 0 1
58503: PPUSH
58504: CALL_OW 250
58508: PPUSH
58509: LD_VAR 0 1
58513: PPUSH
58514: CALL_OW 251
58518: PPUSH
58519: LD_INT 10
58521: PPUSH
58522: LD_INT 0
58524: PPUSH
58525: CALL_OW 50
// result := result ^ un ;
58529: LD_ADDR_VAR 0 7
58533: PUSH
58534: LD_VAR 0 7
58538: PUSH
58539: LD_VAR 0 14
58543: ADD
58544: ST_TO_ADDR
// end ;
58545: GO 58423
58547: POP
58548: POP
// end ; end ;
58549: LD_VAR 0 7
58553: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
58554: LD_INT 0
58556: PPUSH
58557: PPUSH
58558: PPUSH
58559: PPUSH
58560: PPUSH
58561: PPUSH
58562: PPUSH
58563: PPUSH
58564: PPUSH
58565: PPUSH
58566: PPUSH
58567: PPUSH
58568: PPUSH
58569: PPUSH
58570: PPUSH
58571: PPUSH
// result := false ;
58572: LD_ADDR_VAR 0 3
58576: PUSH
58577: LD_INT 0
58579: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
58580: LD_VAR 0 1
58584: NOT
58585: PUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: CALL_OW 266
58595: PUSH
58596: LD_INT 32
58598: PUSH
58599: LD_INT 33
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: IN
58606: NOT
58607: OR
58608: IFFALSE 58612
// exit ;
58610: GO 59748
// nat := GetNation ( tower ) ;
58612: LD_ADDR_VAR 0 12
58616: PUSH
58617: LD_VAR 0 1
58621: PPUSH
58622: CALL_OW 248
58626: ST_TO_ADDR
// side := GetSide ( tower ) ;
58627: LD_ADDR_VAR 0 16
58631: PUSH
58632: LD_VAR 0 1
58636: PPUSH
58637: CALL_OW 255
58641: ST_TO_ADDR
// x := GetX ( tower ) ;
58642: LD_ADDR_VAR 0 10
58646: PUSH
58647: LD_VAR 0 1
58651: PPUSH
58652: CALL_OW 250
58656: ST_TO_ADDR
// y := GetY ( tower ) ;
58657: LD_ADDR_VAR 0 11
58661: PUSH
58662: LD_VAR 0 1
58666: PPUSH
58667: CALL_OW 251
58671: ST_TO_ADDR
// if not x or not y then
58672: LD_VAR 0 10
58676: NOT
58677: PUSH
58678: LD_VAR 0 11
58682: NOT
58683: OR
58684: IFFALSE 58688
// exit ;
58686: GO 59748
// weapon := 0 ;
58688: LD_ADDR_VAR 0 18
58692: PUSH
58693: LD_INT 0
58695: ST_TO_ADDR
// fac_list := [ ] ;
58696: LD_ADDR_VAR 0 17
58700: PUSH
58701: EMPTY
58702: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
58703: LD_ADDR_VAR 0 6
58707: PUSH
58708: LD_VAR 0 1
58712: PPUSH
58713: CALL_OW 274
58717: PPUSH
58718: LD_VAR 0 2
58722: PPUSH
58723: CALL 56326 0 2
58727: PPUSH
58728: LD_INT 30
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PPUSH
58738: CALL_OW 72
58742: ST_TO_ADDR
// if not factories then
58743: LD_VAR 0 6
58747: NOT
58748: IFFALSE 58752
// exit ;
58750: GO 59748
// for i in factories do
58752: LD_ADDR_VAR 0 8
58756: PUSH
58757: LD_VAR 0 6
58761: PUSH
58762: FOR_IN
58763: IFFALSE 58788
// fac_list := fac_list union AvailableWeaponList ( i ) ;
58765: LD_ADDR_VAR 0 17
58769: PUSH
58770: LD_VAR 0 17
58774: PUSH
58775: LD_VAR 0 8
58779: PPUSH
58780: CALL_OW 478
58784: UNION
58785: ST_TO_ADDR
58786: GO 58762
58788: POP
58789: POP
// if not fac_list then
58790: LD_VAR 0 17
58794: NOT
58795: IFFALSE 58799
// exit ;
58797: GO 59748
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
58799: LD_ADDR_VAR 0 5
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: LD_INT 5
58809: PUSH
58810: LD_INT 9
58812: PUSH
58813: LD_INT 10
58815: PUSH
58816: LD_INT 6
58818: PUSH
58819: LD_INT 7
58821: PUSH
58822: LD_INT 11
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 27
58836: PUSH
58837: LD_INT 28
58839: PUSH
58840: LD_INT 26
58842: PUSH
58843: LD_INT 30
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 43
58854: PUSH
58855: LD_INT 44
58857: PUSH
58858: LD_INT 46
58860: PUSH
58861: LD_INT 45
58863: PUSH
58864: LD_INT 47
58866: PUSH
58867: LD_INT 49
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: PUSH
58883: LD_VAR 0 12
58887: ARRAY
58888: ST_TO_ADDR
// for i in list do
58889: LD_ADDR_VAR 0 8
58893: PUSH
58894: LD_VAR 0 5
58898: PUSH
58899: FOR_IN
58900: IFFALSE 58933
// if not i in fac_list then
58902: LD_VAR 0 8
58906: PUSH
58907: LD_VAR 0 17
58911: IN
58912: NOT
58913: IFFALSE 58931
// list := list diff i ;
58915: LD_ADDR_VAR 0 5
58919: PUSH
58920: LD_VAR 0 5
58924: PUSH
58925: LD_VAR 0 8
58929: DIFF
58930: ST_TO_ADDR
58931: GO 58899
58933: POP
58934: POP
// if not list then
58935: LD_VAR 0 5
58939: NOT
58940: IFFALSE 58944
// exit ;
58942: GO 59748
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
58944: LD_VAR 0 12
58948: PUSH
58949: LD_INT 3
58951: EQUAL
58952: PUSH
58953: LD_INT 49
58955: PUSH
58956: LD_VAR 0 5
58960: IN
58961: AND
58962: PUSH
58963: LD_INT 31
58965: PPUSH
58966: LD_VAR 0 16
58970: PPUSH
58971: CALL_OW 321
58975: PUSH
58976: LD_INT 2
58978: EQUAL
58979: AND
58980: IFFALSE 59040
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
58982: LD_INT 22
58984: PUSH
58985: LD_VAR 0 16
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 35
58996: PUSH
58997: LD_INT 49
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 91
59006: PUSH
59007: LD_VAR 0 1
59011: PUSH
59012: LD_INT 10
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: LIST
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: PPUSH
59025: CALL_OW 69
59029: NOT
59030: IFFALSE 59040
// weapon := ru_time_lapser ;
59032: LD_ADDR_VAR 0 18
59036: PUSH
59037: LD_INT 49
59039: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
59040: LD_VAR 0 12
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: IN
59055: PUSH
59056: LD_INT 11
59058: PUSH
59059: LD_VAR 0 5
59063: IN
59064: PUSH
59065: LD_INT 30
59067: PUSH
59068: LD_VAR 0 5
59072: IN
59073: OR
59074: AND
59075: PUSH
59076: LD_INT 6
59078: PPUSH
59079: LD_VAR 0 16
59083: PPUSH
59084: CALL_OW 321
59088: PUSH
59089: LD_INT 2
59091: EQUAL
59092: AND
59093: IFFALSE 59258
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
59095: LD_INT 22
59097: PUSH
59098: LD_VAR 0 16
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 35
59112: PUSH
59113: LD_INT 11
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 35
59122: PUSH
59123: LD_INT 30
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 91
59137: PUSH
59138: LD_VAR 0 1
59142: PUSH
59143: LD_INT 18
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: PPUSH
59156: CALL_OW 69
59160: NOT
59161: PUSH
59162: LD_INT 22
59164: PUSH
59165: LD_VAR 0 16
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 30
59179: PUSH
59180: LD_INT 32
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 30
59189: PUSH
59190: LD_INT 33
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 91
59204: PUSH
59205: LD_VAR 0 1
59209: PUSH
59210: LD_INT 12
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: PPUSH
59226: CALL_OW 69
59230: PUSH
59231: LD_INT 2
59233: GREATER
59234: AND
59235: IFFALSE 59258
// weapon := [ us_radar , ar_radar ] [ nat ] ;
59237: LD_ADDR_VAR 0 18
59241: PUSH
59242: LD_INT 11
59244: PUSH
59245: LD_INT 30
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_VAR 0 12
59256: ARRAY
59257: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
59258: LD_VAR 0 18
59262: NOT
59263: PUSH
59264: LD_INT 40
59266: PPUSH
59267: LD_VAR 0 16
59271: PPUSH
59272: CALL_OW 321
59276: PUSH
59277: LD_INT 2
59279: EQUAL
59280: AND
59281: PUSH
59282: LD_INT 7
59284: PUSH
59285: LD_VAR 0 5
59289: IN
59290: PUSH
59291: LD_INT 28
59293: PUSH
59294: LD_VAR 0 5
59298: IN
59299: OR
59300: PUSH
59301: LD_INT 45
59303: PUSH
59304: LD_VAR 0 5
59308: IN
59309: OR
59310: AND
59311: IFFALSE 59565
// begin hex := GetHexInfo ( x , y ) ;
59313: LD_ADDR_VAR 0 4
59317: PUSH
59318: LD_VAR 0 10
59322: PPUSH
59323: LD_VAR 0 11
59327: PPUSH
59328: CALL_OW 546
59332: ST_TO_ADDR
// if hex [ 1 ] then
59333: LD_VAR 0 4
59337: PUSH
59338: LD_INT 1
59340: ARRAY
59341: IFFALSE 59345
// exit ;
59343: GO 59748
// height := hex [ 2 ] ;
59345: LD_ADDR_VAR 0 15
59349: PUSH
59350: LD_VAR 0 4
59354: PUSH
59355: LD_INT 2
59357: ARRAY
59358: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
59359: LD_ADDR_VAR 0 14
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 3
59372: PUSH
59373: LD_INT 5
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: ST_TO_ADDR
// for i in tmp do
59382: LD_ADDR_VAR 0 8
59386: PUSH
59387: LD_VAR 0 14
59391: PUSH
59392: FOR_IN
59393: IFFALSE 59563
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
59395: LD_ADDR_VAR 0 9
59399: PUSH
59400: LD_VAR 0 10
59404: PPUSH
59405: LD_VAR 0 8
59409: PPUSH
59410: LD_INT 5
59412: PPUSH
59413: CALL_OW 272
59417: PUSH
59418: LD_VAR 0 11
59422: PPUSH
59423: LD_VAR 0 8
59427: PPUSH
59428: LD_INT 5
59430: PPUSH
59431: CALL_OW 273
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
59440: LD_VAR 0 9
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: PPUSH
59449: LD_VAR 0 9
59453: PUSH
59454: LD_INT 2
59456: ARRAY
59457: PPUSH
59458: CALL_OW 488
59462: IFFALSE 59561
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
59464: LD_ADDR_VAR 0 4
59468: PUSH
59469: LD_VAR 0 9
59473: PUSH
59474: LD_INT 1
59476: ARRAY
59477: PPUSH
59478: LD_VAR 0 9
59482: PUSH
59483: LD_INT 2
59485: ARRAY
59486: PPUSH
59487: CALL_OW 546
59491: ST_TO_ADDR
// if hex [ 1 ] then
59492: LD_VAR 0 4
59496: PUSH
59497: LD_INT 1
59499: ARRAY
59500: IFFALSE 59504
// continue ;
59502: GO 59392
// h := hex [ 2 ] ;
59504: LD_ADDR_VAR 0 13
59508: PUSH
59509: LD_VAR 0 4
59513: PUSH
59514: LD_INT 2
59516: ARRAY
59517: ST_TO_ADDR
// if h + 7 < height then
59518: LD_VAR 0 13
59522: PUSH
59523: LD_INT 7
59525: PLUS
59526: PUSH
59527: LD_VAR 0 15
59531: LESS
59532: IFFALSE 59561
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
59534: LD_ADDR_VAR 0 18
59538: PUSH
59539: LD_INT 7
59541: PUSH
59542: LD_INT 28
59544: PUSH
59545: LD_INT 45
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: PUSH
59553: LD_VAR 0 12
59557: ARRAY
59558: ST_TO_ADDR
// break ;
59559: GO 59563
// end ; end ; end ;
59561: GO 59392
59563: POP
59564: POP
// end ; if not weapon then
59565: LD_VAR 0 18
59569: NOT
59570: IFFALSE 59630
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
59572: LD_ADDR_VAR 0 5
59576: PUSH
59577: LD_VAR 0 5
59581: PUSH
59582: LD_INT 11
59584: PUSH
59585: LD_INT 30
59587: PUSH
59588: LD_INT 49
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: DIFF
59596: ST_TO_ADDR
// if not list then
59597: LD_VAR 0 5
59601: NOT
59602: IFFALSE 59606
// exit ;
59604: GO 59748
// weapon := list [ rand ( 1 , list ) ] ;
59606: LD_ADDR_VAR 0 18
59610: PUSH
59611: LD_VAR 0 5
59615: PUSH
59616: LD_INT 1
59618: PPUSH
59619: LD_VAR 0 5
59623: PPUSH
59624: CALL_OW 12
59628: ARRAY
59629: ST_TO_ADDR
// end ; if weapon then
59630: LD_VAR 0 18
59634: IFFALSE 59748
// begin tmp := CostOfWeapon ( weapon ) ;
59636: LD_ADDR_VAR 0 14
59640: PUSH
59641: LD_VAR 0 18
59645: PPUSH
59646: CALL_OW 451
59650: ST_TO_ADDR
// j := GetBase ( tower ) ;
59651: LD_ADDR_VAR 0 9
59655: PUSH
59656: LD_VAR 0 1
59660: PPUSH
59661: CALL_OW 274
59665: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
59666: LD_VAR 0 9
59670: PPUSH
59671: LD_INT 1
59673: PPUSH
59674: CALL_OW 275
59678: PUSH
59679: LD_VAR 0 14
59683: PUSH
59684: LD_INT 1
59686: ARRAY
59687: GREATEREQUAL
59688: PUSH
59689: LD_VAR 0 9
59693: PPUSH
59694: LD_INT 2
59696: PPUSH
59697: CALL_OW 275
59701: PUSH
59702: LD_VAR 0 14
59706: PUSH
59707: LD_INT 2
59709: ARRAY
59710: GREATEREQUAL
59711: AND
59712: PUSH
59713: LD_VAR 0 9
59717: PPUSH
59718: LD_INT 3
59720: PPUSH
59721: CALL_OW 275
59725: PUSH
59726: LD_VAR 0 14
59730: PUSH
59731: LD_INT 3
59733: ARRAY
59734: GREATEREQUAL
59735: AND
59736: IFFALSE 59748
// result := weapon ;
59738: LD_ADDR_VAR 0 3
59742: PUSH
59743: LD_VAR 0 18
59747: ST_TO_ADDR
// end ; end ;
59748: LD_VAR 0 3
59752: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
59753: LD_INT 0
59755: PPUSH
59756: PPUSH
// result := true ;
59757: LD_ADDR_VAR 0 3
59761: PUSH
59762: LD_INT 1
59764: ST_TO_ADDR
// if array1 = array2 then
59765: LD_VAR 0 1
59769: PUSH
59770: LD_VAR 0 2
59774: EQUAL
59775: IFFALSE 59835
// begin for i = 1 to array1 do
59777: LD_ADDR_VAR 0 4
59781: PUSH
59782: DOUBLE
59783: LD_INT 1
59785: DEC
59786: ST_TO_ADDR
59787: LD_VAR 0 1
59791: PUSH
59792: FOR_TO
59793: IFFALSE 59831
// if array1 [ i ] <> array2 [ i ] then
59795: LD_VAR 0 1
59799: PUSH
59800: LD_VAR 0 4
59804: ARRAY
59805: PUSH
59806: LD_VAR 0 2
59810: PUSH
59811: LD_VAR 0 4
59815: ARRAY
59816: NONEQUAL
59817: IFFALSE 59829
// begin result := false ;
59819: LD_ADDR_VAR 0 3
59823: PUSH
59824: LD_INT 0
59826: ST_TO_ADDR
// break ;
59827: GO 59831
// end ;
59829: GO 59792
59831: POP
59832: POP
// end else
59833: GO 59843
// result := false ;
59835: LD_ADDR_VAR 0 3
59839: PUSH
59840: LD_INT 0
59842: ST_TO_ADDR
// end ;
59843: LD_VAR 0 3
59847: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
59848: LD_INT 0
59850: PPUSH
59851: PPUSH
59852: PPUSH
// pom := GetBase ( fac ) ;
59853: LD_ADDR_VAR 0 5
59857: PUSH
59858: LD_VAR 0 1
59862: PPUSH
59863: CALL_OW 274
59867: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
59868: LD_ADDR_VAR 0 4
59872: PUSH
59873: LD_VAR 0 2
59877: PUSH
59878: LD_INT 1
59880: ARRAY
59881: PPUSH
59882: LD_VAR 0 2
59886: PUSH
59887: LD_INT 2
59889: ARRAY
59890: PPUSH
59891: LD_VAR 0 2
59895: PUSH
59896: LD_INT 3
59898: ARRAY
59899: PPUSH
59900: LD_VAR 0 2
59904: PUSH
59905: LD_INT 4
59907: ARRAY
59908: PPUSH
59909: CALL_OW 449
59913: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59914: LD_ADDR_VAR 0 3
59918: PUSH
59919: LD_VAR 0 5
59923: PPUSH
59924: LD_INT 1
59926: PPUSH
59927: CALL_OW 275
59931: PUSH
59932: LD_VAR 0 4
59936: PUSH
59937: LD_INT 1
59939: ARRAY
59940: GREATEREQUAL
59941: PUSH
59942: LD_VAR 0 5
59946: PPUSH
59947: LD_INT 2
59949: PPUSH
59950: CALL_OW 275
59954: PUSH
59955: LD_VAR 0 4
59959: PUSH
59960: LD_INT 2
59962: ARRAY
59963: GREATEREQUAL
59964: AND
59965: PUSH
59966: LD_VAR 0 5
59970: PPUSH
59971: LD_INT 3
59973: PPUSH
59974: CALL_OW 275
59978: PUSH
59979: LD_VAR 0 4
59983: PUSH
59984: LD_INT 3
59986: ARRAY
59987: GREATEREQUAL
59988: AND
59989: ST_TO_ADDR
// end ;
59990: LD_VAR 0 3
59994: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
59995: LD_INT 0
59997: PPUSH
59998: PPUSH
59999: PPUSH
60000: PPUSH
// pom := GetBase ( building ) ;
60001: LD_ADDR_VAR 0 3
60005: PUSH
60006: LD_VAR 0 1
60010: PPUSH
60011: CALL_OW 274
60015: ST_TO_ADDR
// if not pom then
60016: LD_VAR 0 3
60020: NOT
60021: IFFALSE 60025
// exit ;
60023: GO 60195
// btype := GetBType ( building ) ;
60025: LD_ADDR_VAR 0 5
60029: PUSH
60030: LD_VAR 0 1
60034: PPUSH
60035: CALL_OW 266
60039: ST_TO_ADDR
// if btype = b_armoury then
60040: LD_VAR 0 5
60044: PUSH
60045: LD_INT 4
60047: EQUAL
60048: IFFALSE 60058
// btype := b_barracks ;
60050: LD_ADDR_VAR 0 5
60054: PUSH
60055: LD_INT 5
60057: ST_TO_ADDR
// if btype = b_depot then
60058: LD_VAR 0 5
60062: PUSH
60063: LD_INT 0
60065: EQUAL
60066: IFFALSE 60076
// btype := b_warehouse ;
60068: LD_ADDR_VAR 0 5
60072: PUSH
60073: LD_INT 1
60075: ST_TO_ADDR
// if btype = b_workshop then
60076: LD_VAR 0 5
60080: PUSH
60081: LD_INT 2
60083: EQUAL
60084: IFFALSE 60094
// btype := b_factory ;
60086: LD_ADDR_VAR 0 5
60090: PUSH
60091: LD_INT 3
60093: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60094: LD_ADDR_VAR 0 4
60098: PUSH
60099: LD_VAR 0 5
60103: PPUSH
60104: LD_VAR 0 1
60108: PPUSH
60109: CALL_OW 248
60113: PPUSH
60114: CALL_OW 450
60118: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60119: LD_ADDR_VAR 0 2
60123: PUSH
60124: LD_VAR 0 3
60128: PPUSH
60129: LD_INT 1
60131: PPUSH
60132: CALL_OW 275
60136: PUSH
60137: LD_VAR 0 4
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: GREATEREQUAL
60146: PUSH
60147: LD_VAR 0 3
60151: PPUSH
60152: LD_INT 2
60154: PPUSH
60155: CALL_OW 275
60159: PUSH
60160: LD_VAR 0 4
60164: PUSH
60165: LD_INT 2
60167: ARRAY
60168: GREATEREQUAL
60169: AND
60170: PUSH
60171: LD_VAR 0 3
60175: PPUSH
60176: LD_INT 3
60178: PPUSH
60179: CALL_OW 275
60183: PUSH
60184: LD_VAR 0 4
60188: PUSH
60189: LD_INT 3
60191: ARRAY
60192: GREATEREQUAL
60193: AND
60194: ST_TO_ADDR
// end ;
60195: LD_VAR 0 2
60199: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
60200: LD_INT 0
60202: PPUSH
60203: PPUSH
60204: PPUSH
// pom := GetBase ( building ) ;
60205: LD_ADDR_VAR 0 4
60209: PUSH
60210: LD_VAR 0 1
60214: PPUSH
60215: CALL_OW 274
60219: ST_TO_ADDR
// if not pom then
60220: LD_VAR 0 4
60224: NOT
60225: IFFALSE 60229
// exit ;
60227: GO 60330
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60229: LD_ADDR_VAR 0 5
60233: PUSH
60234: LD_VAR 0 2
60238: PPUSH
60239: LD_VAR 0 1
60243: PPUSH
60244: CALL_OW 248
60248: PPUSH
60249: CALL_OW 450
60253: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60254: LD_ADDR_VAR 0 3
60258: PUSH
60259: LD_VAR 0 4
60263: PPUSH
60264: LD_INT 1
60266: PPUSH
60267: CALL_OW 275
60271: PUSH
60272: LD_VAR 0 5
60276: PUSH
60277: LD_INT 1
60279: ARRAY
60280: GREATEREQUAL
60281: PUSH
60282: LD_VAR 0 4
60286: PPUSH
60287: LD_INT 2
60289: PPUSH
60290: CALL_OW 275
60294: PUSH
60295: LD_VAR 0 5
60299: PUSH
60300: LD_INT 2
60302: ARRAY
60303: GREATEREQUAL
60304: AND
60305: PUSH
60306: LD_VAR 0 4
60310: PPUSH
60311: LD_INT 3
60313: PPUSH
60314: CALL_OW 275
60318: PUSH
60319: LD_VAR 0 5
60323: PUSH
60324: LD_INT 3
60326: ARRAY
60327: GREATEREQUAL
60328: AND
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 3
60334: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
60335: LD_INT 0
60337: PPUSH
60338: PPUSH
60339: PPUSH
60340: PPUSH
60341: PPUSH
60342: PPUSH
60343: PPUSH
60344: PPUSH
60345: PPUSH
60346: PPUSH
// result := false ;
60347: LD_ADDR_VAR 0 6
60351: PUSH
60352: LD_INT 0
60354: ST_TO_ADDR
// if not base or not btype or not x or not y then
60355: LD_VAR 0 1
60359: NOT
60360: PUSH
60361: LD_VAR 0 2
60365: NOT
60366: OR
60367: PUSH
60368: LD_VAR 0 3
60372: NOT
60373: OR
60374: PUSH
60375: LD_VAR 0 4
60379: NOT
60380: OR
60381: IFFALSE 60385
// exit ;
60383: GO 60994
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
60385: LD_ADDR_VAR 0 12
60389: PUSH
60390: LD_VAR 0 2
60394: PPUSH
60395: LD_VAR 0 3
60399: PPUSH
60400: LD_VAR 0 4
60404: PPUSH
60405: LD_VAR 0 5
60409: PPUSH
60410: LD_VAR 0 1
60414: PUSH
60415: LD_INT 1
60417: ARRAY
60418: PPUSH
60419: CALL_OW 248
60423: PPUSH
60424: LD_INT 0
60426: PPUSH
60427: CALL 61831 0 6
60431: ST_TO_ADDR
// if not hexes then
60432: LD_VAR 0 12
60436: NOT
60437: IFFALSE 60441
// exit ;
60439: GO 60994
// for i = 1 to hexes do
60441: LD_ADDR_VAR 0 7
60445: PUSH
60446: DOUBLE
60447: LD_INT 1
60449: DEC
60450: ST_TO_ADDR
60451: LD_VAR 0 12
60455: PUSH
60456: FOR_TO
60457: IFFALSE 60992
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60459: LD_ADDR_VAR 0 11
60463: PUSH
60464: LD_VAR 0 12
60468: PUSH
60469: LD_VAR 0 7
60473: ARRAY
60474: PUSH
60475: LD_INT 1
60477: ARRAY
60478: PPUSH
60479: LD_VAR 0 12
60483: PUSH
60484: LD_VAR 0 7
60488: ARRAY
60489: PUSH
60490: LD_INT 2
60492: ARRAY
60493: PPUSH
60494: CALL_OW 428
60498: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
60499: LD_VAR 0 12
60503: PUSH
60504: LD_VAR 0 7
60508: ARRAY
60509: PUSH
60510: LD_INT 1
60512: ARRAY
60513: PPUSH
60514: LD_VAR 0 12
60518: PUSH
60519: LD_VAR 0 7
60523: ARRAY
60524: PUSH
60525: LD_INT 2
60527: ARRAY
60528: PPUSH
60529: CALL_OW 351
60533: PUSH
60534: LD_VAR 0 12
60538: PUSH
60539: LD_VAR 0 7
60543: ARRAY
60544: PUSH
60545: LD_INT 1
60547: ARRAY
60548: PPUSH
60549: LD_VAR 0 12
60553: PUSH
60554: LD_VAR 0 7
60558: ARRAY
60559: PUSH
60560: LD_INT 2
60562: ARRAY
60563: PPUSH
60564: CALL_OW 488
60568: NOT
60569: OR
60570: PUSH
60571: LD_VAR 0 11
60575: PPUSH
60576: CALL_OW 247
60580: PUSH
60581: LD_INT 3
60583: EQUAL
60584: OR
60585: IFFALSE 60591
// exit ;
60587: POP
60588: POP
60589: GO 60994
// if not tmp or not tmp in base then
60591: LD_VAR 0 11
60595: NOT
60596: PUSH
60597: LD_VAR 0 11
60601: PUSH
60602: LD_VAR 0 1
60606: IN
60607: NOT
60608: OR
60609: IFFALSE 60613
// continue ;
60611: GO 60456
// result := true ;
60613: LD_ADDR_VAR 0 6
60617: PUSH
60618: LD_INT 1
60620: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60621: LD_ADDR_VAR 0 15
60625: PUSH
60626: LD_VAR 0 1
60630: PPUSH
60631: LD_INT 22
60633: PUSH
60634: LD_VAR 0 11
60638: PPUSH
60639: CALL_OW 255
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 30
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 30
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PPUSH
60680: CALL_OW 72
60684: ST_TO_ADDR
// if dep then
60685: LD_VAR 0 15
60689: IFFALSE 60825
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
60691: LD_ADDR_VAR 0 14
60695: PUSH
60696: LD_VAR 0 15
60700: PUSH
60701: LD_INT 1
60703: ARRAY
60704: PPUSH
60705: CALL_OW 250
60709: PPUSH
60710: LD_VAR 0 15
60714: PUSH
60715: LD_INT 1
60717: ARRAY
60718: PPUSH
60719: CALL_OW 254
60723: PPUSH
60724: LD_INT 5
60726: PPUSH
60727: CALL_OW 272
60731: PUSH
60732: LD_VAR 0 15
60736: PUSH
60737: LD_INT 1
60739: ARRAY
60740: PPUSH
60741: CALL_OW 251
60745: PPUSH
60746: LD_VAR 0 15
60750: PUSH
60751: LD_INT 1
60753: ARRAY
60754: PPUSH
60755: CALL_OW 254
60759: PPUSH
60760: LD_INT 5
60762: PPUSH
60763: CALL_OW 273
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
60772: LD_VAR 0 14
60776: PUSH
60777: LD_INT 1
60779: ARRAY
60780: PPUSH
60781: LD_VAR 0 14
60785: PUSH
60786: LD_INT 2
60788: ARRAY
60789: PPUSH
60790: CALL_OW 488
60794: IFFALSE 60825
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
60796: LD_VAR 0 11
60800: PPUSH
60801: LD_VAR 0 14
60805: PUSH
60806: LD_INT 1
60808: ARRAY
60809: PPUSH
60810: LD_VAR 0 14
60814: PUSH
60815: LD_INT 2
60817: ARRAY
60818: PPUSH
60819: CALL_OW 111
// continue ;
60823: GO 60456
// end ; end ; r := GetDir ( tmp ) ;
60825: LD_ADDR_VAR 0 13
60829: PUSH
60830: LD_VAR 0 11
60834: PPUSH
60835: CALL_OW 254
60839: ST_TO_ADDR
// if r = 5 then
60840: LD_VAR 0 13
60844: PUSH
60845: LD_INT 5
60847: EQUAL
60848: IFFALSE 60858
// r := 0 ;
60850: LD_ADDR_VAR 0 13
60854: PUSH
60855: LD_INT 0
60857: ST_TO_ADDR
// for j = r to 5 do
60858: LD_ADDR_VAR 0 8
60862: PUSH
60863: DOUBLE
60864: LD_VAR 0 13
60868: DEC
60869: ST_TO_ADDR
60870: LD_INT 5
60872: PUSH
60873: FOR_TO
60874: IFFALSE 60988
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
60876: LD_ADDR_VAR 0 9
60880: PUSH
60881: LD_VAR 0 11
60885: PPUSH
60886: CALL_OW 250
60890: PPUSH
60891: LD_VAR 0 8
60895: PPUSH
60896: LD_INT 2
60898: PPUSH
60899: CALL_OW 272
60903: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
60904: LD_ADDR_VAR 0 10
60908: PUSH
60909: LD_VAR 0 11
60913: PPUSH
60914: CALL_OW 251
60918: PPUSH
60919: LD_VAR 0 8
60923: PPUSH
60924: LD_INT 2
60926: PPUSH
60927: CALL_OW 273
60931: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
60932: LD_VAR 0 9
60936: PPUSH
60937: LD_VAR 0 10
60941: PPUSH
60942: CALL_OW 488
60946: PUSH
60947: LD_VAR 0 9
60951: PPUSH
60952: LD_VAR 0 10
60956: PPUSH
60957: CALL_OW 428
60961: NOT
60962: AND
60963: IFFALSE 60986
// begin ComMoveXY ( tmp , _x , _y ) ;
60965: LD_VAR 0 11
60969: PPUSH
60970: LD_VAR 0 9
60974: PPUSH
60975: LD_VAR 0 10
60979: PPUSH
60980: CALL_OW 111
// break ;
60984: GO 60988
// end ; end ;
60986: GO 60873
60988: POP
60989: POP
// end ;
60990: GO 60456
60992: POP
60993: POP
// end ;
60994: LD_VAR 0 6
60998: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
60999: LD_INT 0
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
// result := false ;
61011: LD_ADDR_VAR 0 6
61015: PUSH
61016: LD_INT 0
61018: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
61019: LD_VAR 0 1
61023: NOT
61024: PUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: CALL_OW 266
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: IN
61045: NOT
61046: OR
61047: PUSH
61048: LD_VAR 0 2
61052: NOT
61053: OR
61054: PUSH
61055: LD_VAR 0 5
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: LD_INT 3
61071: PUSH
61072: LD_INT 4
61074: PUSH
61075: LD_INT 5
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: IN
61086: NOT
61087: OR
61088: PUSH
61089: LD_VAR 0 3
61093: PPUSH
61094: LD_VAR 0 4
61098: PPUSH
61099: CALL_OW 488
61103: NOT
61104: OR
61105: IFFALSE 61109
// exit ;
61107: GO 61826
// pom := GetBase ( depot ) ;
61109: LD_ADDR_VAR 0 10
61113: PUSH
61114: LD_VAR 0 1
61118: PPUSH
61119: CALL_OW 274
61123: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
61124: LD_ADDR_VAR 0 11
61128: PUSH
61129: LD_VAR 0 2
61133: PPUSH
61134: LD_VAR 0 1
61138: PPUSH
61139: CALL_OW 248
61143: PPUSH
61144: CALL_OW 450
61148: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
61149: LD_VAR 0 10
61153: PPUSH
61154: LD_INT 1
61156: PPUSH
61157: CALL_OW 275
61161: PUSH
61162: LD_VAR 0 11
61166: PUSH
61167: LD_INT 1
61169: ARRAY
61170: GREATEREQUAL
61171: PUSH
61172: LD_VAR 0 10
61176: PPUSH
61177: LD_INT 2
61179: PPUSH
61180: CALL_OW 275
61184: PUSH
61185: LD_VAR 0 11
61189: PUSH
61190: LD_INT 2
61192: ARRAY
61193: GREATEREQUAL
61194: AND
61195: PUSH
61196: LD_VAR 0 10
61200: PPUSH
61201: LD_INT 3
61203: PPUSH
61204: CALL_OW 275
61208: PUSH
61209: LD_VAR 0 11
61213: PUSH
61214: LD_INT 3
61216: ARRAY
61217: GREATEREQUAL
61218: AND
61219: NOT
61220: IFFALSE 61224
// exit ;
61222: GO 61826
// if GetBType ( depot ) = b_depot then
61224: LD_VAR 0 1
61228: PPUSH
61229: CALL_OW 266
61233: PUSH
61234: LD_INT 0
61236: EQUAL
61237: IFFALSE 61249
// dist := 28 else
61239: LD_ADDR_VAR 0 14
61243: PUSH
61244: LD_INT 28
61246: ST_TO_ADDR
61247: GO 61257
// dist := 36 ;
61249: LD_ADDR_VAR 0 14
61253: PUSH
61254: LD_INT 36
61256: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
61257: LD_VAR 0 1
61261: PPUSH
61262: LD_VAR 0 3
61266: PPUSH
61267: LD_VAR 0 4
61271: PPUSH
61272: CALL_OW 297
61276: PUSH
61277: LD_VAR 0 14
61281: GREATER
61282: IFFALSE 61286
// exit ;
61284: GO 61826
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
61286: LD_ADDR_VAR 0 12
61290: PUSH
61291: LD_VAR 0 2
61295: PPUSH
61296: LD_VAR 0 3
61300: PPUSH
61301: LD_VAR 0 4
61305: PPUSH
61306: LD_VAR 0 5
61310: PPUSH
61311: LD_VAR 0 1
61315: PPUSH
61316: CALL_OW 248
61320: PPUSH
61321: LD_INT 0
61323: PPUSH
61324: CALL 61831 0 6
61328: ST_TO_ADDR
// if not hexes then
61329: LD_VAR 0 12
61333: NOT
61334: IFFALSE 61338
// exit ;
61336: GO 61826
// hex := GetHexInfo ( x , y ) ;
61338: LD_ADDR_VAR 0 15
61342: PUSH
61343: LD_VAR 0 3
61347: PPUSH
61348: LD_VAR 0 4
61352: PPUSH
61353: CALL_OW 546
61357: ST_TO_ADDR
// if hex [ 1 ] then
61358: LD_VAR 0 15
61362: PUSH
61363: LD_INT 1
61365: ARRAY
61366: IFFALSE 61370
// exit ;
61368: GO 61826
// height := hex [ 2 ] ;
61370: LD_ADDR_VAR 0 13
61374: PUSH
61375: LD_VAR 0 15
61379: PUSH
61380: LD_INT 2
61382: ARRAY
61383: ST_TO_ADDR
// for i = 1 to hexes do
61384: LD_ADDR_VAR 0 7
61388: PUSH
61389: DOUBLE
61390: LD_INT 1
61392: DEC
61393: ST_TO_ADDR
61394: LD_VAR 0 12
61398: PUSH
61399: FOR_TO
61400: IFFALSE 61730
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
61402: LD_VAR 0 12
61406: PUSH
61407: LD_VAR 0 7
61411: ARRAY
61412: PUSH
61413: LD_INT 1
61415: ARRAY
61416: PPUSH
61417: LD_VAR 0 12
61421: PUSH
61422: LD_VAR 0 7
61426: ARRAY
61427: PUSH
61428: LD_INT 2
61430: ARRAY
61431: PPUSH
61432: CALL_OW 488
61436: NOT
61437: PUSH
61438: LD_VAR 0 12
61442: PUSH
61443: LD_VAR 0 7
61447: ARRAY
61448: PUSH
61449: LD_INT 1
61451: ARRAY
61452: PPUSH
61453: LD_VAR 0 12
61457: PUSH
61458: LD_VAR 0 7
61462: ARRAY
61463: PUSH
61464: LD_INT 2
61466: ARRAY
61467: PPUSH
61468: CALL_OW 428
61472: PUSH
61473: LD_INT 0
61475: GREATER
61476: OR
61477: PUSH
61478: LD_VAR 0 12
61482: PUSH
61483: LD_VAR 0 7
61487: ARRAY
61488: PUSH
61489: LD_INT 1
61491: ARRAY
61492: PPUSH
61493: LD_VAR 0 12
61497: PUSH
61498: LD_VAR 0 7
61502: ARRAY
61503: PUSH
61504: LD_INT 2
61506: ARRAY
61507: PPUSH
61508: CALL_OW 351
61512: OR
61513: IFFALSE 61519
// exit ;
61515: POP
61516: POP
61517: GO 61826
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61519: LD_ADDR_VAR 0 8
61523: PUSH
61524: LD_VAR 0 12
61528: PUSH
61529: LD_VAR 0 7
61533: ARRAY
61534: PUSH
61535: LD_INT 1
61537: ARRAY
61538: PPUSH
61539: LD_VAR 0 12
61543: PUSH
61544: LD_VAR 0 7
61548: ARRAY
61549: PUSH
61550: LD_INT 2
61552: ARRAY
61553: PPUSH
61554: CALL_OW 546
61558: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
61559: LD_VAR 0 8
61563: PUSH
61564: LD_INT 1
61566: ARRAY
61567: PUSH
61568: LD_VAR 0 8
61572: PUSH
61573: LD_INT 2
61575: ARRAY
61576: PUSH
61577: LD_VAR 0 13
61581: PUSH
61582: LD_INT 2
61584: PLUS
61585: GREATER
61586: OR
61587: PUSH
61588: LD_VAR 0 8
61592: PUSH
61593: LD_INT 2
61595: ARRAY
61596: PUSH
61597: LD_VAR 0 13
61601: PUSH
61602: LD_INT 2
61604: MINUS
61605: LESS
61606: OR
61607: PUSH
61608: LD_VAR 0 8
61612: PUSH
61613: LD_INT 3
61615: ARRAY
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 8
61622: PUSH
61623: LD_INT 9
61625: PUSH
61626: LD_INT 10
61628: PUSH
61629: LD_INT 11
61631: PUSH
61632: LD_INT 12
61634: PUSH
61635: LD_INT 13
61637: PUSH
61638: LD_INT 16
61640: PUSH
61641: LD_INT 17
61643: PUSH
61644: LD_INT 18
61646: PUSH
61647: LD_INT 19
61649: PUSH
61650: LD_INT 20
61652: PUSH
61653: LD_INT 21
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: IN
61671: NOT
61672: OR
61673: PUSH
61674: LD_VAR 0 8
61678: PUSH
61679: LD_INT 5
61681: ARRAY
61682: NOT
61683: OR
61684: PUSH
61685: LD_VAR 0 8
61689: PUSH
61690: LD_INT 6
61692: ARRAY
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: LD_INT 7
61702: PUSH
61703: LD_INT 9
61705: PUSH
61706: LD_INT 10
61708: PUSH
61709: LD_INT 11
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: IN
61720: NOT
61721: OR
61722: IFFALSE 61728
// exit ;
61724: POP
61725: POP
61726: GO 61826
// end ;
61728: GO 61399
61730: POP
61731: POP
// side := GetSide ( depot ) ;
61732: LD_ADDR_VAR 0 9
61736: PUSH
61737: LD_VAR 0 1
61741: PPUSH
61742: CALL_OW 255
61746: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
61747: LD_VAR 0 9
61751: PPUSH
61752: LD_VAR 0 3
61756: PPUSH
61757: LD_VAR 0 4
61761: PPUSH
61762: LD_INT 20
61764: PPUSH
61765: CALL 54480 0 4
61769: PUSH
61770: LD_INT 4
61772: ARRAY
61773: IFFALSE 61777
// exit ;
61775: GO 61826
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
61777: LD_VAR 0 2
61781: PUSH
61782: LD_INT 29
61784: PUSH
61785: LD_INT 30
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: IN
61792: PUSH
61793: LD_VAR 0 3
61797: PPUSH
61798: LD_VAR 0 4
61802: PPUSH
61803: LD_VAR 0 9
61807: PPUSH
61808: CALL_OW 440
61812: NOT
61813: AND
61814: IFFALSE 61818
// exit ;
61816: GO 61826
// result := true ;
61818: LD_ADDR_VAR 0 6
61822: PUSH
61823: LD_INT 1
61825: ST_TO_ADDR
// end ;
61826: LD_VAR 0 6
61830: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
61831: LD_INT 0
61833: PPUSH
61834: PPUSH
61835: PPUSH
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
61842: PPUSH
61843: PPUSH
61844: PPUSH
61845: PPUSH
61846: PPUSH
61847: PPUSH
61848: PPUSH
61849: PPUSH
61850: PPUSH
61851: PPUSH
61852: PPUSH
61853: PPUSH
61854: PPUSH
61855: PPUSH
61856: PPUSH
61857: PPUSH
61858: PPUSH
61859: PPUSH
61860: PPUSH
61861: PPUSH
61862: PPUSH
61863: PPUSH
61864: PPUSH
61865: PPUSH
61866: PPUSH
61867: PPUSH
61868: PPUSH
61869: PPUSH
61870: PPUSH
61871: PPUSH
61872: PPUSH
61873: PPUSH
61874: PPUSH
61875: PPUSH
61876: PPUSH
61877: PPUSH
61878: PPUSH
61879: PPUSH
61880: PPUSH
61881: PPUSH
61882: PPUSH
61883: PPUSH
61884: PPUSH
61885: PPUSH
61886: PPUSH
61887: PPUSH
61888: PPUSH
61889: PPUSH
61890: PPUSH
// result = [ ] ;
61891: LD_ADDR_VAR 0 7
61895: PUSH
61896: EMPTY
61897: ST_TO_ADDR
// temp_list = [ ] ;
61898: LD_ADDR_VAR 0 9
61902: PUSH
61903: EMPTY
61904: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
61905: LD_VAR 0 4
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 3
61921: PUSH
61922: LD_INT 4
61924: PUSH
61925: LD_INT 5
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: IN
61936: NOT
61937: PUSH
61938: LD_VAR 0 1
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: IN
61953: PUSH
61954: LD_VAR 0 5
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 3
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: IN
61973: NOT
61974: AND
61975: OR
61976: IFFALSE 61980
// exit ;
61978: GO 80371
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61980: LD_VAR 0 1
61984: PUSH
61985: LD_INT 6
61987: PUSH
61988: LD_INT 7
61990: PUSH
61991: LD_INT 8
61993: PUSH
61994: LD_INT 13
61996: PUSH
61997: LD_INT 12
61999: PUSH
62000: LD_INT 15
62002: PUSH
62003: LD_INT 11
62005: PUSH
62006: LD_INT 14
62008: PUSH
62009: LD_INT 10
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: IN
62023: IFFALSE 62033
// btype = b_lab ;
62025: LD_ADDR_VAR 0 1
62029: PUSH
62030: LD_INT 6
62032: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
62033: LD_VAR 0 6
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: LIST
62051: IN
62052: NOT
62053: PUSH
62054: LD_VAR 0 1
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: LD_INT 6
62073: PUSH
62074: LD_INT 36
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: LD_INT 5
62082: PUSH
62083: LD_INT 31
62085: PUSH
62086: LD_INT 32
62088: PUSH
62089: LD_INT 33
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: IN
62105: NOT
62106: PUSH
62107: LD_VAR 0 6
62111: PUSH
62112: LD_INT 1
62114: EQUAL
62115: AND
62116: OR
62117: PUSH
62118: LD_VAR 0 1
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: IN
62133: NOT
62134: PUSH
62135: LD_VAR 0 6
62139: PUSH
62140: LD_INT 2
62142: EQUAL
62143: AND
62144: OR
62145: IFFALSE 62155
// mode = 0 ;
62147: LD_ADDR_VAR 0 6
62151: PUSH
62152: LD_INT 0
62154: ST_TO_ADDR
// case mode of 0 :
62155: LD_VAR 0 6
62159: PUSH
62160: LD_INT 0
62162: DOUBLE
62163: EQUAL
62164: IFTRUE 62168
62166: GO 73621
62168: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62169: LD_ADDR_VAR 0 11
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62362: LD_ADDR_VAR 0 12
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 2
62485: NEG
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 2
62496: NEG
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 3
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 3
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62558: LD_ADDR_VAR 0 13
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62757: LD_ADDR_VAR 0 14
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 2
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: LD_INT 3
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: LD_INT 2
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62953: LD_ADDR_VAR 0 15
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 2
63076: NEG
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 2
63087: NEG
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 3
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63146: LD_ADDR_VAR 0 16
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: NEG
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 3
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: LD_INT 3
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: LD_INT 3
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63339: LD_ADDR_VAR 0 17
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63569: LD_ADDR_VAR 0 18
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63799: LD_ADDR_VAR 0 19
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64029: LD_ADDR_VAR 0 20
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 2
64216: NEG
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64259: LD_ADDR_VAR 0 21
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 2
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 2
64435: NEG
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64489: LD_ADDR_VAR 0 22
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: LD_INT 2
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 2
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 2
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: LD_INT 2
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: LD_INT 2
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 2
64665: NEG
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: NEG
64689: PUSH
64690: LD_INT 2
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64719: LD_ADDR_VAR 0 23
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: NEG
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 2
64918: NEG
64919: PUSH
64920: LD_INT 2
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64999: LD_ADDR_VAR 0 24
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: LD_INT 2
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 2
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 2
65134: PUSH
65135: LD_INT 2
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: LD_INT 2
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 2
65198: NEG
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 3
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 3
65242: PUSH
65243: LD_INT 2
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
65275: LD_ADDR_VAR 0 25
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 1
65313: PUSH
65314: LD_INT 1
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: LD_INT 2
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 2
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 2
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 2
65451: NEG
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: NEG
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: LD_INT 2
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 3
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 2
65506: PUSH
65507: LD_INT 3
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65549: LD_ADDR_VAR 0 26
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: NEG
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 2
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 2
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 2
65791: NEG
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65825: LD_ADDR_VAR 0 27
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: LD_INT 2
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 2
66001: NEG
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 2
66047: NEG
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 3
66058: NEG
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 3
66070: NEG
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66105: LD_ADDR_VAR 0 28
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: LD_INT 2
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: LD_INT 1
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 2
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: LD_INT 2
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 2
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 2
66281: NEG
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 2
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 3
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: LD_INT 3
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 3
66340: NEG
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66387: LD_ADDR_VAR 0 29
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: LD_INT 1
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: NEG
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 2
66553: NEG
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 2
66565: NEG
66566: PUSH
66567: LD_INT 2
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 2
66577: NEG
66578: PUSH
66579: LD_INT 3
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 2
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 3
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: LD_INT 3
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: LD_INT 2
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 3
66631: NEG
66632: PUSH
66633: LD_INT 2
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66666: LD_ADDR_VAR 0 30
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 2
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: LD_INT 3
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: LD_INT 2
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 2
66898: NEG
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 3
66909: NEG
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66944: LD_ADDR_VAR 0 31
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 1
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 1
67013: NEG
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 2
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 2
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 2
67068: PUSH
67069: LD_INT 2
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 2
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 2
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: NEG
67122: PUSH
67123: LD_INT 2
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 2
67133: NEG
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 3
67187: NEG
67188: PUSH
67189: LD_INT 2
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67222: LD_ADDR_VAR 0 32
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 1
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 1
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 1
67280: NEG
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 1
67303: NEG
67304: PUSH
67305: LD_INT 2
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: LD_INT 2
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: LD_INT 1
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 2
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 2
67347: PUSH
67348: LD_INT 2
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 2
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: LD_INT 2
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 2
67388: NEG
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 2
67399: NEG
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: PUSH
67445: LD_INT 3
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 3
67465: NEG
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67500: LD_ADDR_VAR 0 33
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 1
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 1
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: LD_INT 2
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 2
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: LD_INT 2
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: NEG
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: NEG
67656: PUSH
67657: LD_INT 0
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 2
67678: NEG
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 2
67690: NEG
67691: PUSH
67692: LD_INT 3
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: LD_INT 1
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 1
67733: NEG
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: NEG
67745: PUSH
67746: LD_INT 2
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67779: LD_ADDR_VAR 0 34
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: LD_INT 0
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 1
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 1
67848: NEG
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: LD_INT 2
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 2
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 1
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 2
67894: PUSH
67895: LD_INT 1
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: PUSH
67905: LD_INT 2
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: LD_INT 2
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: LD_INT 3
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 2
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 2
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 2
68013: NEG
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: LD_INT 1
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68059: LD_ADDR_VAR 0 35
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: LD_INT 1
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: LD_INT 1
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 1
68117: NEG
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 1
68128: NEG
68129: PUSH
68130: LD_INT 1
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 2
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 2
68150: NEG
68151: PUSH
68152: LD_INT 1
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68171: LD_ADDR_VAR 0 36
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: LD_INT 0
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68283: LD_ADDR_VAR 0 37
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 1
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: NEG
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68395: LD_ADDR_VAR 0 38
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 0
68412: PUSH
68413: LD_INT 1
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 1
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 1
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 1
68464: NEG
68465: PUSH
68466: LD_INT 1
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 2
68486: NEG
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68507: LD_ADDR_VAR 0 39
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: LD_INT 1
68527: NEG
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 1
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 1
68545: PUSH
68546: LD_INT 1
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: LD_INT 1
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 1
68565: NEG
68566: PUSH
68567: LD_INT 0
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 1
68576: NEG
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: LD_INT 2
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 1
68600: PUSH
68601: LD_INT 2
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68619: LD_ADDR_VAR 0 40
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: LD_INT 0
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: LD_INT 1
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 1
68657: PUSH
68658: LD_INT 1
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 0
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 1
68688: NEG
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 1
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68731: LD_ADDR_VAR 0 41
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 1
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: NEG
68813: PUSH
68814: LD_INT 2
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 1
68824: PUSH
68825: LD_INT 1
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 2
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: LD_INT 1
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: LD_INT 2
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 2
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 2
68886: NEG
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 2
68909: NEG
68910: PUSH
68911: LD_INT 2
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 2
68921: NEG
68922: PUSH
68923: LD_INT 3
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 2
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 3
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 3
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 2
68984: PUSH
68985: LD_INT 3
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 2
68994: NEG
68995: PUSH
68996: LD_INT 1
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 3
69005: NEG
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: LD_INT 2
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 3
69040: NEG
69041: PUSH
69042: LD_INT 3
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69081: LD_ADDR_VAR 0 42
69085: PUSH
69086: LD_INT 0
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 1
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 1
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: LD_INT 1
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 1
69162: NEG
69163: PUSH
69164: LD_INT 2
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 0
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 1
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 2
69196: PUSH
69197: LD_INT 1
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 2
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 1
69216: PUSH
69217: LD_INT 2
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 2
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 1
69236: NEG
69237: PUSH
69238: LD_INT 1
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 2
69247: NEG
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 2
69259: NEG
69260: PUSH
69261: LD_INT 2
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 2
69271: NEG
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: LD_INT 3
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 0
69295: PUSH
69296: LD_INT 3
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 1
69306: PUSH
69307: LD_INT 2
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 3
69317: PUSH
69318: LD_INT 2
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: LD_INT 3
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 2
69337: PUSH
69338: LD_INT 3
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 1
69347: PUSH
69348: LD_INT 3
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: LD_INT 3
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 1
69367: NEG
69368: PUSH
69369: LD_INT 2
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 3
69378: NEG
69379: PUSH
69380: LD_INT 2
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 3
69390: NEG
69391: PUSH
69392: LD_INT 3
69394: NEG
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69431: LD_ADDR_VAR 0 43
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 1
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 1
69469: PUSH
69470: LD_INT 1
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: NEG
69501: PUSH
69502: LD_INT 1
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: LD_INT 2
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 2
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 1
69535: PUSH
69536: LD_INT 1
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: LD_INT 1
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 2
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: NEG
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 2
69608: NEG
69609: PUSH
69610: LD_INT 1
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: PUSH
69622: LD_INT 3
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 3
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 1
69643: PUSH
69644: LD_INT 2
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 3
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 1
69685: PUSH
69686: LD_INT 3
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 1
69705: NEG
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 2
69716: NEG
69717: PUSH
69718: LD_INT 1
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 3
69727: NEG
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 3
69738: NEG
69739: PUSH
69740: LD_INT 1
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69779: LD_ADDR_VAR 0 44
69783: PUSH
69784: LD_INT 0
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: LD_INT 1
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 1
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 1
69817: PUSH
69818: LD_INT 1
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: LD_INT 1
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 1
69848: NEG
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 1
69860: NEG
69861: PUSH
69862: LD_INT 2
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 1
69872: PUSH
69873: LD_INT 1
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 2
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 2
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 2
69903: PUSH
69904: LD_INT 2
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 1
69913: PUSH
69914: LD_INT 2
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 1
69923: NEG
69924: PUSH
69925: LD_INT 1
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 2
69934: NEG
69935: PUSH
69936: LD_INT 0
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 2
69945: NEG
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 2
69957: NEG
69958: PUSH
69959: LD_INT 2
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 2
69969: NEG
69970: PUSH
69971: LD_INT 3
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 2
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 3
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 3
70002: PUSH
70003: LD_INT 1
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 3
70012: PUSH
70013: LD_INT 2
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: LD_INT 3
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 2
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: LD_INT 2
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: NEG
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70129: LD_ADDR_VAR 0 45
70133: PUSH
70134: LD_INT 0
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 1
70157: PUSH
70158: LD_INT 0
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 1
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 1
70187: NEG
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 1
70210: NEG
70211: PUSH
70212: LD_INT 2
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: LD_INT 2
70225: NEG
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 1
70233: PUSH
70234: LD_INT 1
70236: NEG
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 2
70244: PUSH
70245: LD_INT 1
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: LD_INT 2
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: LD_INT 2
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: LD_INT 2
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: LD_INT 1
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 2
70295: NEG
70296: PUSH
70297: LD_INT 1
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 2
70307: NEG
70308: PUSH
70309: LD_INT 2
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 2
70319: NEG
70320: PUSH
70321: LD_INT 3
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 1
70331: NEG
70332: PUSH
70333: LD_INT 3
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: LD_INT 3
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 1
70354: PUSH
70355: LD_INT 2
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 3
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: LD_INT 3
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 2
70385: PUSH
70386: LD_INT 3
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: LD_INT 3
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 0
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: PUSH
70417: LD_INT 2
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 3
70426: NEG
70427: PUSH
70428: LD_INT 2
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 3
70438: NEG
70439: PUSH
70440: LD_INT 3
70442: NEG
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70479: LD_ADDR_VAR 0 46
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 1
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 1
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 1
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: LD_INT 1
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 1
70537: NEG
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 1
70548: NEG
70549: PUSH
70550: LD_INT 1
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 1
70560: NEG
70561: PUSH
70562: LD_INT 2
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 0
70572: PUSH
70573: LD_INT 2
70575: NEG
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 1
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 2
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 2
70604: PUSH
70605: LD_INT 1
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 1
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 0
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 1
70634: NEG
70635: PUSH
70636: LD_INT 1
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 2
70645: NEG
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 2
70656: NEG
70657: PUSH
70658: LD_INT 1
70660: NEG
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: LD_INT 3
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: LD_INT 3
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: LD_INT 2
70694: NEG
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 2
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 3
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 3
70723: PUSH
70724: LD_INT 1
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: PUSH
70734: LD_INT 3
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: LD_INT 3
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 1
70753: NEG
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 2
70764: NEG
70765: PUSH
70766: LD_INT 1
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 3
70775: NEG
70776: PUSH
70777: LD_INT 0
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 3
70786: NEG
70787: PUSH
70788: LD_INT 1
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70827: LD_ADDR_VAR 0 47
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: LD_INT 0
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 1
70865: PUSH
70866: LD_INT 1
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: LD_INT 1
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 1
70896: NEG
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: PUSH
70910: LD_INT 2
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: LD_INT 2
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 1
70931: PUSH
70932: LD_INT 1
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 2
70942: NEG
70943: PUSH
70944: LD_INT 1
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 2
70954: NEG
70955: PUSH
70956: LD_INT 2
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70978: LD_ADDR_VAR 0 48
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: LD_INT 1
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 1
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 1
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 0
71026: PUSH
71027: LD_INT 1
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 1
71036: NEG
71037: PUSH
71038: LD_INT 0
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: NEG
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: LD_INT 2
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 0
71071: PUSH
71072: LD_INT 2
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 1
71082: PUSH
71083: LD_INT 1
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 2
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 2
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71125: LD_ADDR_VAR 0 49
71129: PUSH
71130: LD_INT 0
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: LD_INT 1
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 1
71153: PUSH
71154: LD_INT 0
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 1
71163: PUSH
71164: LD_INT 1
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 1
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 1
71183: NEG
71184: PUSH
71185: LD_INT 0
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 1
71194: NEG
71195: PUSH
71196: LD_INT 1
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: LD_INT 1
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 2
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 2
71237: PUSH
71238: LD_INT 2
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: LD_INT 2
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71269: LD_ADDR_VAR 0 50
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 1
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: LD_INT 1
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 1
71327: NEG
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 1
71338: NEG
71339: PUSH
71340: LD_INT 1
71342: NEG
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: LD_INT 1
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 2
71360: PUSH
71361: LD_INT 2
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 1
71370: PUSH
71371: LD_INT 2
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: LD_INT 2
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 1
71390: NEG
71391: PUSH
71392: LD_INT 1
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71413: LD_ADDR_VAR 0 51
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 0
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: LD_INT 0
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 1
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: LD_INT 1
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 1
71471: NEG
71472: PUSH
71473: LD_INT 0
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 1
71482: NEG
71483: PUSH
71484: LD_INT 1
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 1
71494: PUSH
71495: LD_INT 2
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 2
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 1
71514: NEG
71515: PUSH
71516: LD_INT 1
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 2
71525: NEG
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 2
71536: NEG
71537: PUSH
71538: LD_INT 1
71540: NEG
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71560: LD_ADDR_VAR 0 52
71564: PUSH
71565: LD_INT 0
71567: PUSH
71568: LD_INT 0
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_INT 1
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 1
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 1
71598: PUSH
71599: LD_INT 1
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: LD_INT 1
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 1
71618: NEG
71619: PUSH
71620: LD_INT 0
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 1
71629: NEG
71630: PUSH
71631: LD_INT 1
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: NEG
71642: PUSH
71643: LD_INT 2
71645: NEG
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 1
71653: NEG
71654: PUSH
71655: LD_INT 1
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 2
71664: NEG
71665: PUSH
71666: LD_INT 0
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 2
71675: NEG
71676: PUSH
71677: LD_INT 1
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: LD_INT 2
71691: NEG
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71711: LD_ADDR_VAR 0 53
71715: PUSH
71716: LD_INT 0
71718: PUSH
71719: LD_INT 0
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: LD_INT 1
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 1
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 1
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 0
71759: PUSH
71760: LD_INT 1
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 1
71769: NEG
71770: PUSH
71771: LD_INT 0
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 1
71780: NEG
71781: PUSH
71782: LD_INT 1
71784: NEG
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 1
71792: NEG
71793: PUSH
71794: LD_INT 2
71796: NEG
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 0
71804: PUSH
71805: LD_INT 2
71807: NEG
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 1
71815: PUSH
71816: LD_INT 1
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 2
71826: PUSH
71827: LD_INT 0
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: LD_INT 1
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 2
71846: PUSH
71847: LD_INT 2
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 1
71856: PUSH
71857: LD_INT 2
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: LD_INT 2
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 1
71876: NEG
71877: PUSH
71878: LD_INT 1
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 2
71887: NEG
71888: PUSH
71889: LD_INT 0
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 2
71898: NEG
71899: PUSH
71900: LD_INT 1
71902: NEG
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 2
71910: NEG
71911: PUSH
71912: LD_INT 2
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71941: LD_ADDR_VAR 0 54
71945: PUSH
71946: LD_INT 0
71948: PUSH
71949: LD_INT 0
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 0
71958: PUSH
71959: LD_INT 1
71961: NEG
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 1
71969: PUSH
71970: LD_INT 0
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 1
71979: PUSH
71980: LD_INT 1
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: LD_INT 1
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 1
71999: NEG
72000: PUSH
72001: LD_INT 0
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 1
72010: NEG
72011: PUSH
72012: LD_INT 1
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: NEG
72023: PUSH
72024: LD_INT 2
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 0
72034: PUSH
72035: LD_INT 2
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 1
72045: PUSH
72046: LD_INT 1
72048: NEG
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 2
72056: PUSH
72057: LD_INT 0
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 2
72066: PUSH
72067: LD_INT 1
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 2
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: PUSH
72087: LD_INT 2
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_INT 2
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: LD_INT 1
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 2
72117: NEG
72118: PUSH
72119: LD_INT 0
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 2
72128: NEG
72129: PUSH
72130: LD_INT 1
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 2
72140: NEG
72141: PUSH
72142: LD_INT 2
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72171: LD_ADDR_VAR 0 55
72175: PUSH
72176: LD_INT 0
72178: PUSH
72179: LD_INT 0
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: LD_INT 1
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 1
72209: PUSH
72210: LD_INT 1
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 0
72219: PUSH
72220: LD_INT 1
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 1
72229: NEG
72230: PUSH
72231: LD_INT 0
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 1
72240: NEG
72241: PUSH
72242: LD_INT 1
72244: NEG
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 1
72252: NEG
72253: PUSH
72254: LD_INT 2
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 0
72264: PUSH
72265: LD_INT 2
72267: NEG
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 1
72275: PUSH
72276: LD_INT 1
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 2
72286: PUSH
72287: LD_INT 0
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: LD_INT 1
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 2
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 1
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: LD_INT 2
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 1
72336: NEG
72337: PUSH
72338: LD_INT 1
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 2
72347: NEG
72348: PUSH
72349: LD_INT 0
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 2
72358: NEG
72359: PUSH
72360: LD_INT 1
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 2
72370: NEG
72371: PUSH
72372: LD_INT 2
72374: NEG
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72401: LD_ADDR_VAR 0 56
72405: PUSH
72406: LD_INT 0
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 0
72418: PUSH
72419: LD_INT 1
72421: NEG
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 1
72439: PUSH
72440: LD_INT 1
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 0
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 1
72459: NEG
72460: PUSH
72461: LD_INT 0
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 1
72470: NEG
72471: PUSH
72472: LD_INT 1
72474: NEG
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 1
72482: NEG
72483: PUSH
72484: LD_INT 2
72486: NEG
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: LD_INT 2
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 1
72505: PUSH
72506: LD_INT 1
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 2
72516: PUSH
72517: LD_INT 0
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: PUSH
72527: LD_INT 1
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 2
72536: PUSH
72537: LD_INT 2
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 1
72546: PUSH
72547: LD_INT 2
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: LD_INT 2
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: LD_INT 1
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 2
72577: NEG
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 2
72588: NEG
72589: PUSH
72590: LD_INT 1
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 2
72600: NEG
72601: PUSH
72602: LD_INT 2
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72631: LD_ADDR_VAR 0 57
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: LD_INT 1
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 1
72659: PUSH
72660: LD_INT 0
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 1
72669: PUSH
72670: LD_INT 1
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 0
72679: PUSH
72680: LD_INT 1
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 1
72689: NEG
72690: PUSH
72691: LD_INT 0
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 1
72700: NEG
72701: PUSH
72702: LD_INT 1
72704: NEG
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 1
72712: NEG
72713: PUSH
72714: LD_INT 2
72716: NEG
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 0
72724: PUSH
72725: LD_INT 2
72727: NEG
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 1
72735: PUSH
72736: LD_INT 1
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 2
72746: PUSH
72747: LD_INT 0
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 2
72756: PUSH
72757: LD_INT 1
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 2
72766: PUSH
72767: LD_INT 2
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 1
72776: PUSH
72777: LD_INT 2
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 0
72786: PUSH
72787: LD_INT 2
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 1
72796: NEG
72797: PUSH
72798: LD_INT 1
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 2
72807: NEG
72808: PUSH
72809: LD_INT 0
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 2
72818: NEG
72819: PUSH
72820: LD_INT 1
72822: NEG
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 2
72830: NEG
72831: PUSH
72832: LD_INT 2
72834: NEG
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72861: LD_ADDR_VAR 0 58
72865: PUSH
72866: LD_INT 0
72868: PUSH
72869: LD_INT 0
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 0
72878: PUSH
72879: LD_INT 1
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 1
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 1
72899: PUSH
72900: LD_INT 1
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 0
72909: PUSH
72910: LD_INT 1
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 1
72919: NEG
72920: PUSH
72921: LD_INT 0
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 1
72930: NEG
72931: PUSH
72932: LD_INT 1
72934: NEG
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 1
72942: NEG
72943: PUSH
72944: LD_INT 2
72946: NEG
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 0
72954: PUSH
72955: LD_INT 2
72957: NEG
72958: PUSH
72959: EMPTY
72960: LIST
72961: LIST
72962: PUSH
72963: LD_INT 1
72965: PUSH
72966: LD_INT 1
72968: NEG
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: LD_INT 2
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 2
72986: PUSH
72987: LD_INT 1
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 2
72996: PUSH
72997: LD_INT 2
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 1
73006: PUSH
73007: LD_INT 2
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 0
73016: PUSH
73017: LD_INT 2
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: LD_INT 1
73026: NEG
73027: PUSH
73028: LD_INT 1
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 2
73037: NEG
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 2
73048: NEG
73049: PUSH
73050: LD_INT 1
73052: NEG
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 2
73060: NEG
73061: PUSH
73062: LD_INT 2
73064: NEG
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73091: LD_ADDR_VAR 0 59
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: LD_INT 0
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 0
73108: PUSH
73109: LD_INT 1
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: LD_INT 0
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 1
73129: PUSH
73130: LD_INT 1
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: LD_INT 1
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 1
73149: NEG
73150: PUSH
73151: LD_INT 0
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 1
73160: NEG
73161: PUSH
73162: LD_INT 1
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73179: LD_ADDR_VAR 0 60
73183: PUSH
73184: LD_INT 0
73186: PUSH
73187: LD_INT 0
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: PUSH
73194: LD_INT 0
73196: PUSH
73197: LD_INT 1
73199: NEG
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 1
73207: PUSH
73208: LD_INT 0
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: LD_INT 1
73217: PUSH
73218: LD_INT 1
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_INT 0
73227: PUSH
73228: LD_INT 1
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: LD_INT 1
73237: NEG
73238: PUSH
73239: LD_INT 0
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 1
73248: NEG
73249: PUSH
73250: LD_INT 1
73252: NEG
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73267: LD_ADDR_VAR 0 61
73271: PUSH
73272: LD_INT 0
73274: PUSH
73275: LD_INT 0
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 0
73284: PUSH
73285: LD_INT 1
73287: NEG
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 1
73295: PUSH
73296: LD_INT 0
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 1
73305: PUSH
73306: LD_INT 1
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: LD_INT 1
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 1
73325: NEG
73326: PUSH
73327: LD_INT 0
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 1
73336: NEG
73337: PUSH
73338: LD_INT 1
73340: NEG
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73355: LD_ADDR_VAR 0 62
73359: PUSH
73360: LD_INT 0
73362: PUSH
73363: LD_INT 0
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 0
73372: PUSH
73373: LD_INT 1
73375: NEG
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 1
73383: PUSH
73384: LD_INT 0
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 1
73393: PUSH
73394: LD_INT 1
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 0
73403: PUSH
73404: LD_INT 1
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 1
73413: NEG
73414: PUSH
73415: LD_INT 0
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 1
73424: NEG
73425: PUSH
73426: LD_INT 1
73428: NEG
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73443: LD_ADDR_VAR 0 63
73447: PUSH
73448: LD_INT 0
73450: PUSH
73451: LD_INT 0
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 0
73460: PUSH
73461: LD_INT 1
73463: NEG
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 1
73471: PUSH
73472: LD_INT 0
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 1
73481: PUSH
73482: LD_INT 1
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 0
73491: PUSH
73492: LD_INT 1
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 1
73501: NEG
73502: PUSH
73503: LD_INT 0
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: PUSH
73510: LD_INT 1
73512: NEG
73513: PUSH
73514: LD_INT 1
73516: NEG
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73531: LD_ADDR_VAR 0 64
73535: PUSH
73536: LD_INT 0
73538: PUSH
73539: LD_INT 0
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 0
73548: PUSH
73549: LD_INT 1
73551: NEG
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 1
73559: PUSH
73560: LD_INT 0
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 1
73569: PUSH
73570: LD_INT 1
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 0
73579: PUSH
73580: LD_INT 1
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: PUSH
73591: LD_INT 0
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: NEG
73601: PUSH
73602: LD_INT 1
73604: NEG
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: ST_TO_ADDR
// end ; 1 :
73619: GO 79516
73621: LD_INT 1
73623: DOUBLE
73624: EQUAL
73625: IFTRUE 73629
73627: GO 76252
73629: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73630: LD_ADDR_VAR 0 11
73634: PUSH
73635: LD_INT 1
73637: NEG
73638: PUSH
73639: LD_INT 3
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: LD_INT 3
73652: NEG
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: LD_INT 1
73660: PUSH
73661: LD_INT 2
73663: NEG
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: LIST
73673: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73674: LD_ADDR_VAR 0 12
73678: PUSH
73679: LD_INT 2
73681: PUSH
73682: LD_INT 1
73684: NEG
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 3
73692: PUSH
73693: LD_INT 0
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 3
73702: PUSH
73703: LD_INT 1
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: LIST
73714: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73715: LD_ADDR_VAR 0 13
73719: PUSH
73720: LD_INT 3
73722: PUSH
73723: LD_INT 2
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 3
73732: PUSH
73733: LD_INT 3
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 2
73742: PUSH
73743: LD_INT 3
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: LIST
73754: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73755: LD_ADDR_VAR 0 14
73759: PUSH
73760: LD_INT 1
73762: PUSH
73763: LD_INT 3
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PUSH
73770: LD_INT 0
73772: PUSH
73773: LD_INT 3
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 1
73782: NEG
73783: PUSH
73784: LD_INT 2
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: LIST
73795: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73796: LD_ADDR_VAR 0 15
73800: PUSH
73801: LD_INT 2
73803: NEG
73804: PUSH
73805: LD_INT 1
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 3
73814: NEG
73815: PUSH
73816: LD_INT 0
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 3
73825: NEG
73826: PUSH
73827: LD_INT 1
73829: NEG
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: LIST
73839: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73840: LD_ADDR_VAR 0 16
73844: PUSH
73845: LD_INT 2
73847: NEG
73848: PUSH
73849: LD_INT 3
73851: NEG
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 3
73859: NEG
73860: PUSH
73861: LD_INT 2
73863: NEG
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 3
73871: NEG
73872: PUSH
73873: LD_INT 3
73875: NEG
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: LIST
73885: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73886: LD_ADDR_VAR 0 17
73890: PUSH
73891: LD_INT 1
73893: NEG
73894: PUSH
73895: LD_INT 3
73897: NEG
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: LD_INT 3
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 1
73916: PUSH
73917: LD_INT 2
73919: NEG
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: LIST
73929: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73930: LD_ADDR_VAR 0 18
73934: PUSH
73935: LD_INT 2
73937: PUSH
73938: LD_INT 1
73940: NEG
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 3
73948: PUSH
73949: LD_INT 0
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 3
73958: PUSH
73959: LD_INT 1
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: LIST
73970: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73971: LD_ADDR_VAR 0 19
73975: PUSH
73976: LD_INT 3
73978: PUSH
73979: LD_INT 2
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 3
73988: PUSH
73989: LD_INT 3
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 2
73998: PUSH
73999: LD_INT 3
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: LIST
74010: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74011: LD_ADDR_VAR 0 20
74015: PUSH
74016: LD_INT 1
74018: PUSH
74019: LD_INT 3
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 0
74028: PUSH
74029: LD_INT 3
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 1
74038: NEG
74039: PUSH
74040: LD_INT 2
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: LIST
74051: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74052: LD_ADDR_VAR 0 21
74056: PUSH
74057: LD_INT 2
74059: NEG
74060: PUSH
74061: LD_INT 1
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 3
74070: NEG
74071: PUSH
74072: LD_INT 0
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 3
74081: NEG
74082: PUSH
74083: LD_INT 1
74085: NEG
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: LIST
74095: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74096: LD_ADDR_VAR 0 22
74100: PUSH
74101: LD_INT 2
74103: NEG
74104: PUSH
74105: LD_INT 3
74107: NEG
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 3
74115: NEG
74116: PUSH
74117: LD_INT 2
74119: NEG
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: LD_INT 3
74127: NEG
74128: PUSH
74129: LD_INT 3
74131: NEG
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: LIST
74141: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
74142: LD_ADDR_VAR 0 23
74146: PUSH
74147: LD_INT 0
74149: PUSH
74150: LD_INT 3
74152: NEG
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 1
74160: NEG
74161: PUSH
74162: LD_INT 4
74164: NEG
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 1
74172: PUSH
74173: LD_INT 3
74175: NEG
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: LIST
74185: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
74186: LD_ADDR_VAR 0 24
74190: PUSH
74191: LD_INT 3
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 3
74203: PUSH
74204: LD_INT 1
74206: NEG
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 4
74214: PUSH
74215: LD_INT 1
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: LIST
74226: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
74227: LD_ADDR_VAR 0 25
74231: PUSH
74232: LD_INT 3
74234: PUSH
74235: LD_INT 3
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 4
74244: PUSH
74245: LD_INT 3
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 3
74254: PUSH
74255: LD_INT 4
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: LIST
74266: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
74267: LD_ADDR_VAR 0 26
74271: PUSH
74272: LD_INT 0
74274: PUSH
74275: LD_INT 3
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PUSH
74282: LD_INT 1
74284: PUSH
74285: LD_INT 4
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 1
74294: NEG
74295: PUSH
74296: LD_INT 3
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: LIST
74307: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
74308: LD_ADDR_VAR 0 27
74312: PUSH
74313: LD_INT 3
74315: NEG
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 3
74326: NEG
74327: PUSH
74328: LD_INT 1
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 4
74337: NEG
74338: PUSH
74339: LD_INT 1
74341: NEG
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: LIST
74351: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
74352: LD_ADDR_VAR 0 28
74356: PUSH
74357: LD_INT 3
74359: NEG
74360: PUSH
74361: LD_INT 3
74363: NEG
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 3
74371: NEG
74372: PUSH
74373: LD_INT 4
74375: NEG
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 4
74383: NEG
74384: PUSH
74385: LD_INT 3
74387: NEG
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: LIST
74397: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
74398: LD_ADDR_VAR 0 29
74402: PUSH
74403: LD_INT 1
74405: NEG
74406: PUSH
74407: LD_INT 3
74409: NEG
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 0
74417: PUSH
74418: LD_INT 3
74420: NEG
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 1
74428: PUSH
74429: LD_INT 2
74431: NEG
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 1
74439: NEG
74440: PUSH
74441: LD_INT 4
74443: NEG
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 0
74451: PUSH
74452: LD_INT 4
74454: NEG
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: PUSH
74460: LD_INT 1
74462: PUSH
74463: LD_INT 3
74465: NEG
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: LD_INT 1
74473: NEG
74474: PUSH
74475: LD_INT 5
74477: NEG
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 0
74485: PUSH
74486: LD_INT 5
74488: NEG
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 1
74496: PUSH
74497: LD_INT 4
74499: NEG
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 1
74507: NEG
74508: PUSH
74509: LD_INT 6
74511: NEG
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 0
74519: PUSH
74520: LD_INT 6
74522: NEG
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 1
74530: PUSH
74531: LD_INT 5
74533: NEG
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
74553: LD_ADDR_VAR 0 30
74557: PUSH
74558: LD_INT 2
74560: PUSH
74561: LD_INT 1
74563: NEG
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 3
74571: PUSH
74572: LD_INT 0
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 3
74581: PUSH
74582: LD_INT 1
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 3
74591: PUSH
74592: LD_INT 1
74594: NEG
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 4
74602: PUSH
74603: LD_INT 0
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 4
74612: PUSH
74613: LD_INT 1
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 4
74622: PUSH
74623: LD_INT 1
74625: NEG
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 5
74633: PUSH
74634: LD_INT 0
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 5
74643: PUSH
74644: LD_INT 1
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 5
74653: PUSH
74654: LD_INT 1
74656: NEG
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 6
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 6
74674: PUSH
74675: LD_INT 1
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
74696: LD_ADDR_VAR 0 31
74700: PUSH
74701: LD_INT 3
74703: PUSH
74704: LD_INT 2
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 3
74713: PUSH
74714: LD_INT 3
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 2
74723: PUSH
74724: LD_INT 3
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 4
74733: PUSH
74734: LD_INT 3
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: PUSH
74741: LD_INT 4
74743: PUSH
74744: LD_INT 4
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 3
74753: PUSH
74754: LD_INT 4
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 5
74763: PUSH
74764: LD_INT 4
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 5
74773: PUSH
74774: LD_INT 5
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 4
74783: PUSH
74784: LD_INT 5
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 6
74793: PUSH
74794: LD_INT 5
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 6
74803: PUSH
74804: LD_INT 6
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 5
74813: PUSH
74814: LD_INT 6
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
74835: LD_ADDR_VAR 0 32
74839: PUSH
74840: LD_INT 1
74842: PUSH
74843: LD_INT 3
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: LD_INT 3
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 1
74862: NEG
74863: PUSH
74864: LD_INT 2
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 1
74873: PUSH
74874: LD_INT 4
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 0
74883: PUSH
74884: LD_INT 4
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: LD_INT 1
74893: NEG
74894: PUSH
74895: LD_INT 3
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 1
74904: PUSH
74905: LD_INT 5
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: LD_INT 5
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 1
74924: NEG
74925: PUSH
74926: LD_INT 4
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 1
74935: PUSH
74936: LD_INT 6
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 0
74945: PUSH
74946: LD_INT 6
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: PUSH
74953: LD_INT 1
74955: NEG
74956: PUSH
74957: LD_INT 5
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74978: LD_ADDR_VAR 0 33
74982: PUSH
74983: LD_INT 2
74985: NEG
74986: PUSH
74987: LD_INT 1
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 3
74996: NEG
74997: PUSH
74998: LD_INT 0
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 3
75007: NEG
75008: PUSH
75009: LD_INT 1
75011: NEG
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 3
75019: NEG
75020: PUSH
75021: LD_INT 1
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 4
75030: NEG
75031: PUSH
75032: LD_INT 0
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: PUSH
75039: LD_INT 4
75041: NEG
75042: PUSH
75043: LD_INT 1
75045: NEG
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 4
75053: NEG
75054: PUSH
75055: LD_INT 1
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 5
75064: NEG
75065: PUSH
75066: LD_INT 0
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PUSH
75073: LD_INT 5
75075: NEG
75076: PUSH
75077: LD_INT 1
75079: NEG
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 5
75087: NEG
75088: PUSH
75089: LD_INT 1
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: PUSH
75096: LD_INT 6
75098: NEG
75099: PUSH
75100: LD_INT 0
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 6
75109: NEG
75110: PUSH
75111: LD_INT 1
75113: NEG
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
75133: LD_ADDR_VAR 0 34
75137: PUSH
75138: LD_INT 2
75140: NEG
75141: PUSH
75142: LD_INT 3
75144: NEG
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 3
75152: NEG
75153: PUSH
75154: LD_INT 2
75156: NEG
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: PUSH
75162: LD_INT 3
75164: NEG
75165: PUSH
75166: LD_INT 3
75168: NEG
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 3
75176: NEG
75177: PUSH
75178: LD_INT 4
75180: NEG
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PUSH
75186: LD_INT 4
75188: NEG
75189: PUSH
75190: LD_INT 3
75192: NEG
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PUSH
75198: LD_INT 4
75200: NEG
75201: PUSH
75202: LD_INT 4
75204: NEG
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 4
75212: NEG
75213: PUSH
75214: LD_INT 5
75216: NEG
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 5
75224: NEG
75225: PUSH
75226: LD_INT 4
75228: NEG
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 5
75236: NEG
75237: PUSH
75238: LD_INT 5
75240: NEG
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 5
75248: NEG
75249: PUSH
75250: LD_INT 6
75252: NEG
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: LD_INT 6
75260: NEG
75261: PUSH
75262: LD_INT 5
75264: NEG
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: LD_INT 6
75272: NEG
75273: PUSH
75274: LD_INT 6
75276: NEG
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
75296: LD_ADDR_VAR 0 41
75300: PUSH
75301: LD_INT 0
75303: PUSH
75304: LD_INT 2
75306: NEG
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 1
75314: NEG
75315: PUSH
75316: LD_INT 3
75318: NEG
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 1
75326: PUSH
75327: LD_INT 2
75329: NEG
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
75340: LD_ADDR_VAR 0 42
75344: PUSH
75345: LD_INT 2
75347: PUSH
75348: LD_INT 0
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: LD_INT 2
75357: PUSH
75358: LD_INT 1
75360: NEG
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 3
75368: PUSH
75369: LD_INT 1
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: LIST
75380: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
75381: LD_ADDR_VAR 0 43
75385: PUSH
75386: LD_INT 2
75388: PUSH
75389: LD_INT 2
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 3
75398: PUSH
75399: LD_INT 2
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 2
75408: PUSH
75409: LD_INT 3
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: LIST
75420: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
75421: LD_ADDR_VAR 0 44
75425: PUSH
75426: LD_INT 0
75428: PUSH
75429: LD_INT 2
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 1
75438: PUSH
75439: LD_INT 3
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 1
75448: NEG
75449: PUSH
75450: LD_INT 2
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: LIST
75461: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75462: LD_ADDR_VAR 0 45
75466: PUSH
75467: LD_INT 2
75469: NEG
75470: PUSH
75471: LD_INT 0
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PUSH
75478: LD_INT 2
75480: NEG
75481: PUSH
75482: LD_INT 1
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 3
75491: NEG
75492: PUSH
75493: LD_INT 1
75495: NEG
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: LIST
75505: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
75506: LD_ADDR_VAR 0 46
75510: PUSH
75511: LD_INT 2
75513: NEG
75514: PUSH
75515: LD_INT 2
75517: NEG
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 2
75525: NEG
75526: PUSH
75527: LD_INT 3
75529: NEG
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 3
75537: NEG
75538: PUSH
75539: LD_INT 2
75541: NEG
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: LIST
75551: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
75552: LD_ADDR_VAR 0 47
75556: PUSH
75557: LD_INT 2
75559: NEG
75560: PUSH
75561: LD_INT 3
75563: NEG
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 1
75571: NEG
75572: PUSH
75573: LD_INT 3
75575: NEG
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
75585: LD_ADDR_VAR 0 48
75589: PUSH
75590: LD_INT 1
75592: PUSH
75593: LD_INT 2
75595: NEG
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PUSH
75601: LD_INT 2
75603: PUSH
75604: LD_INT 1
75606: NEG
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
75616: LD_ADDR_VAR 0 49
75620: PUSH
75621: LD_INT 3
75623: PUSH
75624: LD_INT 1
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: LD_INT 3
75633: PUSH
75634: LD_INT 2
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
75645: LD_ADDR_VAR 0 50
75649: PUSH
75650: LD_INT 2
75652: PUSH
75653: LD_INT 3
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 1
75662: PUSH
75663: LD_INT 3
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
75674: LD_ADDR_VAR 0 51
75678: PUSH
75679: LD_INT 1
75681: NEG
75682: PUSH
75683: LD_INT 2
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 2
75692: NEG
75693: PUSH
75694: LD_INT 1
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75705: LD_ADDR_VAR 0 52
75709: PUSH
75710: LD_INT 3
75712: NEG
75713: PUSH
75714: LD_INT 1
75716: NEG
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: PUSH
75722: LD_INT 3
75724: NEG
75725: PUSH
75726: LD_INT 2
75728: NEG
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75738: LD_ADDR_VAR 0 53
75742: PUSH
75743: LD_INT 1
75745: NEG
75746: PUSH
75747: LD_INT 3
75749: NEG
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: LD_INT 0
75757: PUSH
75758: LD_INT 3
75760: NEG
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: LD_INT 1
75768: PUSH
75769: LD_INT 2
75771: NEG
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: LIST
75781: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75782: LD_ADDR_VAR 0 54
75786: PUSH
75787: LD_INT 2
75789: PUSH
75790: LD_INT 1
75792: NEG
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: LD_INT 3
75800: PUSH
75801: LD_INT 0
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 3
75810: PUSH
75811: LD_INT 1
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: EMPTY
75819: LIST
75820: LIST
75821: LIST
75822: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75823: LD_ADDR_VAR 0 55
75827: PUSH
75828: LD_INT 3
75830: PUSH
75831: LD_INT 2
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 3
75840: PUSH
75841: LD_INT 3
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: LD_INT 2
75850: PUSH
75851: LD_INT 3
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: LIST
75862: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75863: LD_ADDR_VAR 0 56
75867: PUSH
75868: LD_INT 1
75870: PUSH
75871: LD_INT 3
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 0
75880: PUSH
75881: LD_INT 3
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: PUSH
75888: LD_INT 1
75890: NEG
75891: PUSH
75892: LD_INT 2
75894: PUSH
75895: EMPTY
75896: LIST
75897: LIST
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: LIST
75903: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75904: LD_ADDR_VAR 0 57
75908: PUSH
75909: LD_INT 2
75911: NEG
75912: PUSH
75913: LD_INT 1
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: PUSH
75920: LD_INT 3
75922: NEG
75923: PUSH
75924: LD_INT 0
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: LD_INT 3
75933: NEG
75934: PUSH
75935: LD_INT 1
75937: NEG
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: LIST
75947: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75948: LD_ADDR_VAR 0 58
75952: PUSH
75953: LD_INT 2
75955: NEG
75956: PUSH
75957: LD_INT 3
75959: NEG
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: LD_INT 3
75967: NEG
75968: PUSH
75969: LD_INT 2
75971: NEG
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: LD_INT 3
75979: NEG
75980: PUSH
75981: LD_INT 3
75983: NEG
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: LIST
75993: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75994: LD_ADDR_VAR 0 59
75998: PUSH
75999: LD_INT 1
76001: NEG
76002: PUSH
76003: LD_INT 2
76005: NEG
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 0
76013: PUSH
76014: LD_INT 2
76016: NEG
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: LD_INT 1
76024: PUSH
76025: LD_INT 1
76027: NEG
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: LIST
76037: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
76038: LD_ADDR_VAR 0 60
76042: PUSH
76043: LD_INT 1
76045: PUSH
76046: LD_INT 1
76048: NEG
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: PUSH
76054: LD_INT 2
76056: PUSH
76057: LD_INT 0
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: PUSH
76064: LD_INT 2
76066: PUSH
76067: LD_INT 1
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: LIST
76078: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
76079: LD_ADDR_VAR 0 61
76083: PUSH
76084: LD_INT 2
76086: PUSH
76087: LD_INT 1
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: PUSH
76094: LD_INT 2
76096: PUSH
76097: LD_INT 2
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 1
76106: PUSH
76107: LD_INT 2
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: LIST
76118: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
76119: LD_ADDR_VAR 0 62
76123: PUSH
76124: LD_INT 1
76126: PUSH
76127: LD_INT 2
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 0
76136: PUSH
76137: LD_INT 2
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 1
76146: NEG
76147: PUSH
76148: LD_INT 1
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: LIST
76159: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
76160: LD_ADDR_VAR 0 63
76164: PUSH
76165: LD_INT 1
76167: NEG
76168: PUSH
76169: LD_INT 1
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PUSH
76176: LD_INT 2
76178: NEG
76179: PUSH
76180: LD_INT 0
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: PUSH
76187: LD_INT 2
76189: NEG
76190: PUSH
76191: LD_INT 1
76193: NEG
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: LIST
76203: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76204: LD_ADDR_VAR 0 64
76208: PUSH
76209: LD_INT 1
76211: NEG
76212: PUSH
76213: LD_INT 2
76215: NEG
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: PUSH
76221: LD_INT 2
76223: NEG
76224: PUSH
76225: LD_INT 1
76227: NEG
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: LD_INT 2
76235: NEG
76236: PUSH
76237: LD_INT 2
76239: NEG
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: LIST
76249: ST_TO_ADDR
// end ; 2 :
76250: GO 79516
76252: LD_INT 2
76254: DOUBLE
76255: EQUAL
76256: IFTRUE 76260
76258: GO 79515
76260: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
76261: LD_ADDR_VAR 0 29
76265: PUSH
76266: LD_INT 4
76268: PUSH
76269: LD_INT 0
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PUSH
76276: LD_INT 4
76278: PUSH
76279: LD_INT 1
76281: NEG
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: PUSH
76287: LD_INT 5
76289: PUSH
76290: LD_INT 0
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: LD_INT 5
76299: PUSH
76300: LD_INT 1
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 4
76309: PUSH
76310: LD_INT 1
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 3
76319: PUSH
76320: LD_INT 0
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: PUSH
76327: LD_INT 3
76329: PUSH
76330: LD_INT 1
76332: NEG
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PUSH
76338: LD_INT 3
76340: PUSH
76341: LD_INT 2
76343: NEG
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 5
76351: PUSH
76352: LD_INT 2
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 3
76361: PUSH
76362: LD_INT 3
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 3
76371: PUSH
76372: LD_INT 2
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: PUSH
76379: LD_INT 4
76381: PUSH
76382: LD_INT 3
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 4
76391: PUSH
76392: LD_INT 4
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: LD_INT 3
76401: PUSH
76402: LD_INT 4
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 2
76411: PUSH
76412: LD_INT 3
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: PUSH
76419: LD_INT 2
76421: PUSH
76422: LD_INT 2
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: LD_INT 4
76431: PUSH
76432: LD_INT 2
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: PUSH
76439: LD_INT 2
76441: PUSH
76442: LD_INT 4
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: LD_INT 0
76451: PUSH
76452: LD_INT 4
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: LD_INT 0
76461: PUSH
76462: LD_INT 3
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: LD_INT 1
76471: PUSH
76472: LD_INT 4
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PUSH
76479: LD_INT 1
76481: PUSH
76482: LD_INT 5
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: PUSH
76489: LD_INT 0
76491: PUSH
76492: LD_INT 5
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 1
76501: NEG
76502: PUSH
76503: LD_INT 4
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 1
76512: NEG
76513: PUSH
76514: LD_INT 3
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: PUSH
76521: LD_INT 2
76523: PUSH
76524: LD_INT 5
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 2
76533: NEG
76534: PUSH
76535: LD_INT 3
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PUSH
76542: LD_INT 3
76544: NEG
76545: PUSH
76546: LD_INT 0
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PUSH
76553: LD_INT 3
76555: NEG
76556: PUSH
76557: LD_INT 1
76559: NEG
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: PUSH
76565: LD_INT 2
76567: NEG
76568: PUSH
76569: LD_INT 0
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: PUSH
76576: LD_INT 2
76578: NEG
76579: PUSH
76580: LD_INT 1
76582: PUSH
76583: EMPTY
76584: LIST
76585: LIST
76586: PUSH
76587: LD_INT 3
76589: NEG
76590: PUSH
76591: LD_INT 1
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: PUSH
76598: LD_INT 4
76600: NEG
76601: PUSH
76602: LD_INT 0
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: PUSH
76609: LD_INT 4
76611: NEG
76612: PUSH
76613: LD_INT 1
76615: NEG
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PUSH
76621: LD_INT 4
76623: NEG
76624: PUSH
76625: LD_INT 2
76627: NEG
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 2
76635: NEG
76636: PUSH
76637: LD_INT 2
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 4
76646: NEG
76647: PUSH
76648: LD_INT 4
76650: NEG
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PUSH
76656: LD_INT 4
76658: NEG
76659: PUSH
76660: LD_INT 5
76662: NEG
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PUSH
76668: LD_INT 3
76670: NEG
76671: PUSH
76672: LD_INT 4
76674: NEG
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PUSH
76680: LD_INT 3
76682: NEG
76683: PUSH
76684: LD_INT 3
76686: NEG
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 4
76694: NEG
76695: PUSH
76696: LD_INT 3
76698: NEG
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PUSH
76704: LD_INT 5
76706: NEG
76707: PUSH
76708: LD_INT 4
76710: NEG
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 5
76718: NEG
76719: PUSH
76720: LD_INT 5
76722: NEG
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: PUSH
76728: LD_INT 3
76730: NEG
76731: PUSH
76732: LD_INT 5
76734: NEG
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PUSH
76740: LD_INT 5
76742: NEG
76743: PUSH
76744: LD_INT 3
76746: NEG
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: LIST
76776: LIST
76777: LIST
76778: LIST
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
76799: LD_ADDR_VAR 0 30
76803: PUSH
76804: LD_INT 4
76806: PUSH
76807: LD_INT 4
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 4
76816: PUSH
76817: LD_INT 3
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: LD_INT 5
76826: PUSH
76827: LD_INT 4
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: LD_INT 5
76836: PUSH
76837: LD_INT 5
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 4
76846: PUSH
76847: LD_INT 5
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 3
76856: PUSH
76857: LD_INT 4
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: PUSH
76864: LD_INT 3
76866: PUSH
76867: LD_INT 3
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 5
76876: PUSH
76877: LD_INT 3
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 3
76886: PUSH
76887: LD_INT 5
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 0
76896: PUSH
76897: LD_INT 3
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 0
76906: PUSH
76907: LD_INT 2
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_INT 1
76916: PUSH
76917: LD_INT 3
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: PUSH
76924: LD_INT 1
76926: PUSH
76927: LD_INT 4
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: PUSH
76934: LD_INT 0
76936: PUSH
76937: LD_INT 4
76939: PUSH
76940: EMPTY
76941: LIST
76942: LIST
76943: PUSH
76944: LD_INT 1
76946: NEG
76947: PUSH
76948: LD_INT 3
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: PUSH
76955: LD_INT 1
76957: NEG
76958: PUSH
76959: LD_INT 2
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: LD_INT 2
76968: PUSH
76969: LD_INT 4
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: PUSH
76976: LD_INT 2
76978: NEG
76979: PUSH
76980: LD_INT 2
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 4
76989: NEG
76990: PUSH
76991: LD_INT 0
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 4
77000: NEG
77001: PUSH
77002: LD_INT 1
77004: NEG
77005: PUSH
77006: EMPTY
77007: LIST
77008: LIST
77009: PUSH
77010: LD_INT 3
77012: NEG
77013: PUSH
77014: LD_INT 0
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 3
77023: NEG
77024: PUSH
77025: LD_INT 1
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 4
77034: NEG
77035: PUSH
77036: LD_INT 1
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: PUSH
77043: LD_INT 5
77045: NEG
77046: PUSH
77047: LD_INT 0
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: LD_INT 5
77056: NEG
77057: PUSH
77058: LD_INT 1
77060: NEG
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PUSH
77066: LD_INT 5
77068: NEG
77069: PUSH
77070: LD_INT 2
77072: NEG
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 3
77080: NEG
77081: PUSH
77082: LD_INT 2
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: LD_INT 3
77091: NEG
77092: PUSH
77093: LD_INT 3
77095: NEG
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 3
77103: NEG
77104: PUSH
77105: LD_INT 4
77107: NEG
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: PUSH
77113: LD_INT 2
77115: NEG
77116: PUSH
77117: LD_INT 3
77119: NEG
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: LD_INT 2
77127: NEG
77128: PUSH
77129: LD_INT 2
77131: NEG
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: PUSH
77137: LD_INT 3
77139: NEG
77140: PUSH
77141: LD_INT 2
77143: NEG
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 4
77151: NEG
77152: PUSH
77153: LD_INT 3
77155: NEG
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 4
77163: NEG
77164: PUSH
77165: LD_INT 4
77167: NEG
77168: PUSH
77169: EMPTY
77170: LIST
77171: LIST
77172: PUSH
77173: LD_INT 2
77175: NEG
77176: PUSH
77177: LD_INT 4
77179: NEG
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 4
77187: NEG
77188: PUSH
77189: LD_INT 2
77191: NEG
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: PUSH
77197: LD_INT 0
77199: PUSH
77200: LD_INT 4
77202: NEG
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: PUSH
77208: LD_INT 0
77210: PUSH
77211: LD_INT 5
77213: NEG
77214: PUSH
77215: EMPTY
77216: LIST
77217: LIST
77218: PUSH
77219: LD_INT 1
77221: PUSH
77222: LD_INT 4
77224: NEG
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 1
77232: PUSH
77233: LD_INT 3
77235: NEG
77236: PUSH
77237: EMPTY
77238: LIST
77239: LIST
77240: PUSH
77241: LD_INT 0
77243: PUSH
77244: LD_INT 3
77246: NEG
77247: PUSH
77248: EMPTY
77249: LIST
77250: LIST
77251: PUSH
77252: LD_INT 1
77254: NEG
77255: PUSH
77256: LD_INT 4
77258: NEG
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 1
77266: NEG
77267: PUSH
77268: LD_INT 5
77270: NEG
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: PUSH
77276: LD_INT 2
77278: PUSH
77279: LD_INT 3
77281: NEG
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 2
77289: NEG
77290: PUSH
77291: LD_INT 5
77293: NEG
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: LIST
77325: LIST
77326: LIST
77327: LIST
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
77346: LD_ADDR_VAR 0 31
77350: PUSH
77351: LD_INT 0
77353: PUSH
77354: LD_INT 4
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_INT 0
77363: PUSH
77364: LD_INT 3
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: PUSH
77371: LD_INT 1
77373: PUSH
77374: LD_INT 4
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: PUSH
77381: LD_INT 1
77383: PUSH
77384: LD_INT 5
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: PUSH
77391: LD_INT 0
77393: PUSH
77394: LD_INT 5
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 1
77403: NEG
77404: PUSH
77405: LD_INT 4
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PUSH
77412: LD_INT 1
77414: NEG
77415: PUSH
77416: LD_INT 3
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: PUSH
77423: LD_INT 2
77425: PUSH
77426: LD_INT 5
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PUSH
77433: LD_INT 2
77435: NEG
77436: PUSH
77437: LD_INT 3
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 3
77446: NEG
77447: PUSH
77448: LD_INT 0
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: LD_INT 3
77457: NEG
77458: PUSH
77459: LD_INT 1
77461: NEG
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PUSH
77467: LD_INT 2
77469: NEG
77470: PUSH
77471: LD_INT 0
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PUSH
77478: LD_INT 2
77480: NEG
77481: PUSH
77482: LD_INT 1
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_INT 3
77491: NEG
77492: PUSH
77493: LD_INT 1
77495: PUSH
77496: EMPTY
77497: LIST
77498: LIST
77499: PUSH
77500: LD_INT 4
77502: NEG
77503: PUSH
77504: LD_INT 0
77506: PUSH
77507: EMPTY
77508: LIST
77509: LIST
77510: PUSH
77511: LD_INT 4
77513: NEG
77514: PUSH
77515: LD_INT 1
77517: NEG
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 4
77525: NEG
77526: PUSH
77527: LD_INT 2
77529: NEG
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: PUSH
77535: LD_INT 2
77537: NEG
77538: PUSH
77539: LD_INT 2
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: PUSH
77546: LD_INT 4
77548: NEG
77549: PUSH
77550: LD_INT 4
77552: NEG
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: PUSH
77558: LD_INT 4
77560: NEG
77561: PUSH
77562: LD_INT 5
77564: NEG
77565: PUSH
77566: EMPTY
77567: LIST
77568: LIST
77569: PUSH
77570: LD_INT 3
77572: NEG
77573: PUSH
77574: LD_INT 4
77576: NEG
77577: PUSH
77578: EMPTY
77579: LIST
77580: LIST
77581: PUSH
77582: LD_INT 3
77584: NEG
77585: PUSH
77586: LD_INT 3
77588: NEG
77589: PUSH
77590: EMPTY
77591: LIST
77592: LIST
77593: PUSH
77594: LD_INT 4
77596: NEG
77597: PUSH
77598: LD_INT 3
77600: NEG
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: PUSH
77606: LD_INT 5
77608: NEG
77609: PUSH
77610: LD_INT 4
77612: NEG
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: PUSH
77618: LD_INT 5
77620: NEG
77621: PUSH
77622: LD_INT 5
77624: NEG
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: LD_INT 3
77632: NEG
77633: PUSH
77634: LD_INT 5
77636: NEG
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: PUSH
77642: LD_INT 5
77644: NEG
77645: PUSH
77646: LD_INT 3
77648: NEG
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 0
77656: PUSH
77657: LD_INT 3
77659: NEG
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 0
77667: PUSH
77668: LD_INT 4
77670: NEG
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: LD_INT 1
77678: PUSH
77679: LD_INT 3
77681: NEG
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PUSH
77687: LD_INT 1
77689: PUSH
77690: LD_INT 2
77692: NEG
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: PUSH
77698: LD_INT 0
77700: PUSH
77701: LD_INT 2
77703: NEG
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: LD_INT 1
77711: NEG
77712: PUSH
77713: LD_INT 3
77715: NEG
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: PUSH
77721: LD_INT 1
77723: NEG
77724: PUSH
77725: LD_INT 4
77727: NEG
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: LD_INT 2
77735: PUSH
77736: LD_INT 2
77738: NEG
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: LD_INT 2
77746: NEG
77747: PUSH
77748: LD_INT 4
77750: NEG
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: LD_INT 4
77758: PUSH
77759: LD_INT 0
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: PUSH
77766: LD_INT 4
77768: PUSH
77769: LD_INT 1
77771: NEG
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PUSH
77777: LD_INT 5
77779: PUSH
77780: LD_INT 0
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 5
77789: PUSH
77790: LD_INT 1
77792: PUSH
77793: EMPTY
77794: LIST
77795: LIST
77796: PUSH
77797: LD_INT 4
77799: PUSH
77800: LD_INT 1
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: LD_INT 0
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: PUSH
77817: LD_INT 3
77819: PUSH
77820: LD_INT 1
77822: NEG
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: PUSH
77828: LD_INT 3
77830: PUSH
77831: LD_INT 2
77833: NEG
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PUSH
77839: LD_INT 5
77841: PUSH
77842: LD_INT 2
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: LIST
77868: LIST
77869: LIST
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
77896: LD_ADDR_VAR 0 32
77900: PUSH
77901: LD_INT 4
77903: NEG
77904: PUSH
77905: LD_INT 0
77907: PUSH
77908: EMPTY
77909: LIST
77910: LIST
77911: PUSH
77912: LD_INT 4
77914: NEG
77915: PUSH
77916: LD_INT 1
77918: NEG
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: PUSH
77924: LD_INT 3
77926: NEG
77927: PUSH
77928: LD_INT 0
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: PUSH
77935: LD_INT 3
77937: NEG
77938: PUSH
77939: LD_INT 1
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: LD_INT 4
77948: NEG
77949: PUSH
77950: LD_INT 1
77952: PUSH
77953: EMPTY
77954: LIST
77955: LIST
77956: PUSH
77957: LD_INT 5
77959: NEG
77960: PUSH
77961: LD_INT 0
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: LD_INT 5
77970: NEG
77971: PUSH
77972: LD_INT 1
77974: NEG
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: LD_INT 5
77982: NEG
77983: PUSH
77984: LD_INT 2
77986: NEG
77987: PUSH
77988: EMPTY
77989: LIST
77990: LIST
77991: PUSH
77992: LD_INT 3
77994: NEG
77995: PUSH
77996: LD_INT 2
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: PUSH
78003: LD_INT 3
78005: NEG
78006: PUSH
78007: LD_INT 3
78009: NEG
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: LD_INT 3
78017: NEG
78018: PUSH
78019: LD_INT 4
78021: NEG
78022: PUSH
78023: EMPTY
78024: LIST
78025: LIST
78026: PUSH
78027: LD_INT 2
78029: NEG
78030: PUSH
78031: LD_INT 3
78033: NEG
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: LD_INT 2
78041: NEG
78042: PUSH
78043: LD_INT 2
78045: NEG
78046: PUSH
78047: EMPTY
78048: LIST
78049: LIST
78050: PUSH
78051: LD_INT 3
78053: NEG
78054: PUSH
78055: LD_INT 2
78057: NEG
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: PUSH
78063: LD_INT 4
78065: NEG
78066: PUSH
78067: LD_INT 3
78069: NEG
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 4
78077: NEG
78078: PUSH
78079: LD_INT 4
78081: NEG
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: LD_INT 2
78089: NEG
78090: PUSH
78091: LD_INT 4
78093: NEG
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: PUSH
78099: LD_INT 4
78101: NEG
78102: PUSH
78103: LD_INT 2
78105: NEG
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: PUSH
78111: LD_INT 0
78113: PUSH
78114: LD_INT 4
78116: NEG
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: PUSH
78122: LD_INT 0
78124: PUSH
78125: LD_INT 5
78127: NEG
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: PUSH
78133: LD_INT 1
78135: PUSH
78136: LD_INT 4
78138: NEG
78139: PUSH
78140: EMPTY
78141: LIST
78142: LIST
78143: PUSH
78144: LD_INT 1
78146: PUSH
78147: LD_INT 3
78149: NEG
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: PUSH
78155: LD_INT 0
78157: PUSH
78158: LD_INT 3
78160: NEG
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: LD_INT 1
78168: NEG
78169: PUSH
78170: LD_INT 4
78172: NEG
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: PUSH
78178: LD_INT 1
78180: NEG
78181: PUSH
78182: LD_INT 5
78184: NEG
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: PUSH
78190: LD_INT 2
78192: PUSH
78193: LD_INT 3
78195: NEG
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: LD_INT 2
78203: NEG
78204: PUSH
78205: LD_INT 5
78207: NEG
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: LD_INT 3
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: LD_INT 3
78225: PUSH
78226: LD_INT 1
78228: NEG
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: LD_INT 4
78236: PUSH
78237: LD_INT 0
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PUSH
78244: LD_INT 4
78246: PUSH
78247: LD_INT 1
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 3
78256: PUSH
78257: LD_INT 1
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: LD_INT 2
78266: PUSH
78267: LD_INT 0
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: PUSH
78274: LD_INT 2
78276: PUSH
78277: LD_INT 1
78279: NEG
78280: PUSH
78281: EMPTY
78282: LIST
78283: LIST
78284: PUSH
78285: LD_INT 2
78287: PUSH
78288: LD_INT 2
78290: NEG
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 4
78298: PUSH
78299: LD_INT 2
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 4
78308: PUSH
78309: LD_INT 4
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 4
78318: PUSH
78319: LD_INT 3
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: PUSH
78326: LD_INT 5
78328: PUSH
78329: LD_INT 4
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: PUSH
78336: LD_INT 5
78338: PUSH
78339: LD_INT 5
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: LD_INT 4
78348: PUSH
78349: LD_INT 5
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 3
78358: PUSH
78359: LD_INT 4
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: PUSH
78366: LD_INT 3
78368: PUSH
78369: LD_INT 3
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 5
78378: PUSH
78379: LD_INT 3
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 3
78388: PUSH
78389: LD_INT 5
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: LIST
78421: LIST
78422: LIST
78423: LIST
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: LIST
78429: LIST
78430: LIST
78431: LIST
78432: LIST
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: LIST
78442: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
78443: LD_ADDR_VAR 0 33
78447: PUSH
78448: LD_INT 4
78450: NEG
78451: PUSH
78452: LD_INT 4
78454: NEG
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 4
78462: NEG
78463: PUSH
78464: LD_INT 5
78466: NEG
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PUSH
78472: LD_INT 3
78474: NEG
78475: PUSH
78476: LD_INT 4
78478: NEG
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PUSH
78484: LD_INT 3
78486: NEG
78487: PUSH
78488: LD_INT 3
78490: NEG
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PUSH
78496: LD_INT 4
78498: NEG
78499: PUSH
78500: LD_INT 3
78502: NEG
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: PUSH
78508: LD_INT 5
78510: NEG
78511: PUSH
78512: LD_INT 4
78514: NEG
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: PUSH
78520: LD_INT 5
78522: NEG
78523: PUSH
78524: LD_INT 5
78526: NEG
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: PUSH
78532: LD_INT 3
78534: NEG
78535: PUSH
78536: LD_INT 5
78538: NEG
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: PUSH
78544: LD_INT 5
78546: NEG
78547: PUSH
78548: LD_INT 3
78550: NEG
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: PUSH
78556: LD_INT 0
78558: PUSH
78559: LD_INT 3
78561: NEG
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 0
78569: PUSH
78570: LD_INT 4
78572: NEG
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PUSH
78578: LD_INT 1
78580: PUSH
78581: LD_INT 3
78583: NEG
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: PUSH
78589: LD_INT 1
78591: PUSH
78592: LD_INT 2
78594: NEG
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PUSH
78600: LD_INT 0
78602: PUSH
78603: LD_INT 2
78605: NEG
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PUSH
78611: LD_INT 1
78613: NEG
78614: PUSH
78615: LD_INT 3
78617: NEG
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: LD_INT 1
78625: NEG
78626: PUSH
78627: LD_INT 4
78629: NEG
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 2
78637: PUSH
78638: LD_INT 2
78640: NEG
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: PUSH
78646: LD_INT 2
78648: NEG
78649: PUSH
78650: LD_INT 4
78652: NEG
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: PUSH
78658: LD_INT 4
78660: PUSH
78661: LD_INT 0
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_INT 4
78670: PUSH
78671: LD_INT 1
78673: NEG
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 5
78681: PUSH
78682: LD_INT 0
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: LD_INT 5
78691: PUSH
78692: LD_INT 1
78694: PUSH
78695: EMPTY
78696: LIST
78697: LIST
78698: PUSH
78699: LD_INT 4
78701: PUSH
78702: LD_INT 1
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: PUSH
78709: LD_INT 3
78711: PUSH
78712: LD_INT 0
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 3
78721: PUSH
78722: LD_INT 1
78724: NEG
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: PUSH
78730: LD_INT 3
78732: PUSH
78733: LD_INT 2
78735: NEG
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: LD_INT 5
78743: PUSH
78744: LD_INT 2
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 3
78753: PUSH
78754: LD_INT 3
78756: PUSH
78757: EMPTY
78758: LIST
78759: LIST
78760: PUSH
78761: LD_INT 3
78763: PUSH
78764: LD_INT 2
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: PUSH
78771: LD_INT 4
78773: PUSH
78774: LD_INT 3
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: PUSH
78781: LD_INT 4
78783: PUSH
78784: LD_INT 4
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: PUSH
78791: LD_INT 3
78793: PUSH
78794: LD_INT 4
78796: PUSH
78797: EMPTY
78798: LIST
78799: LIST
78800: PUSH
78801: LD_INT 2
78803: PUSH
78804: LD_INT 3
78806: PUSH
78807: EMPTY
78808: LIST
78809: LIST
78810: PUSH
78811: LD_INT 2
78813: PUSH
78814: LD_INT 2
78816: PUSH
78817: EMPTY
78818: LIST
78819: LIST
78820: PUSH
78821: LD_INT 4
78823: PUSH
78824: LD_INT 2
78826: PUSH
78827: EMPTY
78828: LIST
78829: LIST
78830: PUSH
78831: LD_INT 2
78833: PUSH
78834: LD_INT 4
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: PUSH
78841: LD_INT 0
78843: PUSH
78844: LD_INT 4
78846: PUSH
78847: EMPTY
78848: LIST
78849: LIST
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: LD_INT 3
78856: PUSH
78857: EMPTY
78858: LIST
78859: LIST
78860: PUSH
78861: LD_INT 1
78863: PUSH
78864: LD_INT 4
78866: PUSH
78867: EMPTY
78868: LIST
78869: LIST
78870: PUSH
78871: LD_INT 1
78873: PUSH
78874: LD_INT 5
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: PUSH
78881: LD_INT 0
78883: PUSH
78884: LD_INT 5
78886: PUSH
78887: EMPTY
78888: LIST
78889: LIST
78890: PUSH
78891: LD_INT 1
78893: NEG
78894: PUSH
78895: LD_INT 4
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PUSH
78902: LD_INT 1
78904: NEG
78905: PUSH
78906: LD_INT 3
78908: PUSH
78909: EMPTY
78910: LIST
78911: LIST
78912: PUSH
78913: LD_INT 2
78915: PUSH
78916: LD_INT 5
78918: PUSH
78919: EMPTY
78920: LIST
78921: LIST
78922: PUSH
78923: LD_INT 2
78925: NEG
78926: PUSH
78927: LD_INT 3
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: LIST
78938: LIST
78939: LIST
78940: LIST
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: LIST
78971: LIST
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: LIST
78977: LIST
78978: LIST
78979: LIST
78980: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78981: LD_ADDR_VAR 0 34
78985: PUSH
78986: LD_INT 0
78988: PUSH
78989: LD_INT 4
78991: NEG
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: PUSH
78997: LD_INT 0
78999: PUSH
79000: LD_INT 5
79002: NEG
79003: PUSH
79004: EMPTY
79005: LIST
79006: LIST
79007: PUSH
79008: LD_INT 1
79010: PUSH
79011: LD_INT 4
79013: NEG
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PUSH
79019: LD_INT 1
79021: PUSH
79022: LD_INT 3
79024: NEG
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 0
79032: PUSH
79033: LD_INT 3
79035: NEG
79036: PUSH
79037: EMPTY
79038: LIST
79039: LIST
79040: PUSH
79041: LD_INT 1
79043: NEG
79044: PUSH
79045: LD_INT 4
79047: NEG
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: PUSH
79053: LD_INT 1
79055: NEG
79056: PUSH
79057: LD_INT 5
79059: NEG
79060: PUSH
79061: EMPTY
79062: LIST
79063: LIST
79064: PUSH
79065: LD_INT 2
79067: PUSH
79068: LD_INT 3
79070: NEG
79071: PUSH
79072: EMPTY
79073: LIST
79074: LIST
79075: PUSH
79076: LD_INT 2
79078: NEG
79079: PUSH
79080: LD_INT 5
79082: NEG
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: PUSH
79088: LD_INT 3
79090: PUSH
79091: LD_INT 0
79093: PUSH
79094: EMPTY
79095: LIST
79096: LIST
79097: PUSH
79098: LD_INT 3
79100: PUSH
79101: LD_INT 1
79103: NEG
79104: PUSH
79105: EMPTY
79106: LIST
79107: LIST
79108: PUSH
79109: LD_INT 4
79111: PUSH
79112: LD_INT 0
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: PUSH
79119: LD_INT 4
79121: PUSH
79122: LD_INT 1
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PUSH
79129: LD_INT 3
79131: PUSH
79132: LD_INT 1
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: PUSH
79139: LD_INT 2
79141: PUSH
79142: LD_INT 0
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: PUSH
79149: LD_INT 2
79151: PUSH
79152: LD_INT 1
79154: NEG
79155: PUSH
79156: EMPTY
79157: LIST
79158: LIST
79159: PUSH
79160: LD_INT 2
79162: PUSH
79163: LD_INT 2
79165: NEG
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: LD_INT 4
79173: PUSH
79174: LD_INT 2
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: PUSH
79181: LD_INT 4
79183: PUSH
79184: LD_INT 4
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PUSH
79191: LD_INT 4
79193: PUSH
79194: LD_INT 3
79196: PUSH
79197: EMPTY
79198: LIST
79199: LIST
79200: PUSH
79201: LD_INT 5
79203: PUSH
79204: LD_INT 4
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: PUSH
79211: LD_INT 5
79213: PUSH
79214: LD_INT 5
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: PUSH
79221: LD_INT 4
79223: PUSH
79224: LD_INT 5
79226: PUSH
79227: EMPTY
79228: LIST
79229: LIST
79230: PUSH
79231: LD_INT 3
79233: PUSH
79234: LD_INT 4
79236: PUSH
79237: EMPTY
79238: LIST
79239: LIST
79240: PUSH
79241: LD_INT 3
79243: PUSH
79244: LD_INT 3
79246: PUSH
79247: EMPTY
79248: LIST
79249: LIST
79250: PUSH
79251: LD_INT 5
79253: PUSH
79254: LD_INT 3
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: PUSH
79261: LD_INT 3
79263: PUSH
79264: LD_INT 5
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: PUSH
79271: LD_INT 0
79273: PUSH
79274: LD_INT 3
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 0
79283: PUSH
79284: LD_INT 2
79286: PUSH
79287: EMPTY
79288: LIST
79289: LIST
79290: PUSH
79291: LD_INT 1
79293: PUSH
79294: LD_INT 3
79296: PUSH
79297: EMPTY
79298: LIST
79299: LIST
79300: PUSH
79301: LD_INT 1
79303: PUSH
79304: LD_INT 4
79306: PUSH
79307: EMPTY
79308: LIST
79309: LIST
79310: PUSH
79311: LD_INT 0
79313: PUSH
79314: LD_INT 4
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: PUSH
79321: LD_INT 1
79323: NEG
79324: PUSH
79325: LD_INT 3
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PUSH
79332: LD_INT 1
79334: NEG
79335: PUSH
79336: LD_INT 2
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PUSH
79343: LD_INT 2
79345: PUSH
79346: LD_INT 4
79348: PUSH
79349: EMPTY
79350: LIST
79351: LIST
79352: PUSH
79353: LD_INT 2
79355: NEG
79356: PUSH
79357: LD_INT 2
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PUSH
79364: LD_INT 4
79366: NEG
79367: PUSH
79368: LD_INT 0
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: PUSH
79375: LD_INT 4
79377: NEG
79378: PUSH
79379: LD_INT 1
79381: NEG
79382: PUSH
79383: EMPTY
79384: LIST
79385: LIST
79386: PUSH
79387: LD_INT 3
79389: NEG
79390: PUSH
79391: LD_INT 0
79393: PUSH
79394: EMPTY
79395: LIST
79396: LIST
79397: PUSH
79398: LD_INT 3
79400: NEG
79401: PUSH
79402: LD_INT 1
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: PUSH
79409: LD_INT 4
79411: NEG
79412: PUSH
79413: LD_INT 1
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: LD_INT 5
79422: NEG
79423: PUSH
79424: LD_INT 0
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PUSH
79431: LD_INT 5
79433: NEG
79434: PUSH
79435: LD_INT 1
79437: NEG
79438: PUSH
79439: EMPTY
79440: LIST
79441: LIST
79442: PUSH
79443: LD_INT 5
79445: NEG
79446: PUSH
79447: LD_INT 2
79449: NEG
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: PUSH
79455: LD_INT 3
79457: NEG
79458: PUSH
79459: LD_INT 2
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: LIST
79491: LIST
79492: LIST
79493: LIST
79494: LIST
79495: LIST
79496: LIST
79497: LIST
79498: LIST
79499: LIST
79500: LIST
79501: LIST
79502: LIST
79503: LIST
79504: LIST
79505: LIST
79506: LIST
79507: LIST
79508: LIST
79509: LIST
79510: LIST
79511: LIST
79512: ST_TO_ADDR
// end ; end ;
79513: GO 79516
79515: POP
// case btype of b_depot , b_warehouse :
79516: LD_VAR 0 1
79520: PUSH
79521: LD_INT 0
79523: DOUBLE
79524: EQUAL
79525: IFTRUE 79535
79527: LD_INT 1
79529: DOUBLE
79530: EQUAL
79531: IFTRUE 79535
79533: GO 79736
79535: POP
// case nation of nation_american :
79536: LD_VAR 0 5
79540: PUSH
79541: LD_INT 1
79543: DOUBLE
79544: EQUAL
79545: IFTRUE 79549
79547: GO 79605
79549: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
79550: LD_ADDR_VAR 0 9
79554: PUSH
79555: LD_VAR 0 11
79559: PUSH
79560: LD_VAR 0 12
79564: PUSH
79565: LD_VAR 0 13
79569: PUSH
79570: LD_VAR 0 14
79574: PUSH
79575: LD_VAR 0 15
79579: PUSH
79580: LD_VAR 0 16
79584: PUSH
79585: EMPTY
79586: LIST
79587: LIST
79588: LIST
79589: LIST
79590: LIST
79591: LIST
79592: PUSH
79593: LD_VAR 0 4
79597: PUSH
79598: LD_INT 1
79600: PLUS
79601: ARRAY
79602: ST_TO_ADDR
79603: GO 79734
79605: LD_INT 2
79607: DOUBLE
79608: EQUAL
79609: IFTRUE 79613
79611: GO 79669
79613: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
79614: LD_ADDR_VAR 0 9
79618: PUSH
79619: LD_VAR 0 17
79623: PUSH
79624: LD_VAR 0 18
79628: PUSH
79629: LD_VAR 0 19
79633: PUSH
79634: LD_VAR 0 20
79638: PUSH
79639: LD_VAR 0 21
79643: PUSH
79644: LD_VAR 0 22
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: LIST
79653: LIST
79654: LIST
79655: LIST
79656: PUSH
79657: LD_VAR 0 4
79661: PUSH
79662: LD_INT 1
79664: PLUS
79665: ARRAY
79666: ST_TO_ADDR
79667: GO 79734
79669: LD_INT 3
79671: DOUBLE
79672: EQUAL
79673: IFTRUE 79677
79675: GO 79733
79677: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
79678: LD_ADDR_VAR 0 9
79682: PUSH
79683: LD_VAR 0 23
79687: PUSH
79688: LD_VAR 0 24
79692: PUSH
79693: LD_VAR 0 25
79697: PUSH
79698: LD_VAR 0 26
79702: PUSH
79703: LD_VAR 0 27
79707: PUSH
79708: LD_VAR 0 28
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: PUSH
79721: LD_VAR 0 4
79725: PUSH
79726: LD_INT 1
79728: PLUS
79729: ARRAY
79730: ST_TO_ADDR
79731: GO 79734
79733: POP
79734: GO 80289
79736: LD_INT 2
79738: DOUBLE
79739: EQUAL
79740: IFTRUE 79750
79742: LD_INT 3
79744: DOUBLE
79745: EQUAL
79746: IFTRUE 79750
79748: GO 79806
79750: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
79751: LD_ADDR_VAR 0 9
79755: PUSH
79756: LD_VAR 0 29
79760: PUSH
79761: LD_VAR 0 30
79765: PUSH
79766: LD_VAR 0 31
79770: PUSH
79771: LD_VAR 0 32
79775: PUSH
79776: LD_VAR 0 33
79780: PUSH
79781: LD_VAR 0 34
79785: PUSH
79786: EMPTY
79787: LIST
79788: LIST
79789: LIST
79790: LIST
79791: LIST
79792: LIST
79793: PUSH
79794: LD_VAR 0 4
79798: PUSH
79799: LD_INT 1
79801: PLUS
79802: ARRAY
79803: ST_TO_ADDR
79804: GO 80289
79806: LD_INT 16
79808: DOUBLE
79809: EQUAL
79810: IFTRUE 79868
79812: LD_INT 17
79814: DOUBLE
79815: EQUAL
79816: IFTRUE 79868
79818: LD_INT 18
79820: DOUBLE
79821: EQUAL
79822: IFTRUE 79868
79824: LD_INT 19
79826: DOUBLE
79827: EQUAL
79828: IFTRUE 79868
79830: LD_INT 22
79832: DOUBLE
79833: EQUAL
79834: IFTRUE 79868
79836: LD_INT 20
79838: DOUBLE
79839: EQUAL
79840: IFTRUE 79868
79842: LD_INT 21
79844: DOUBLE
79845: EQUAL
79846: IFTRUE 79868
79848: LD_INT 23
79850: DOUBLE
79851: EQUAL
79852: IFTRUE 79868
79854: LD_INT 24
79856: DOUBLE
79857: EQUAL
79858: IFTRUE 79868
79860: LD_INT 25
79862: DOUBLE
79863: EQUAL
79864: IFTRUE 79868
79866: GO 79924
79868: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
79869: LD_ADDR_VAR 0 9
79873: PUSH
79874: LD_VAR 0 35
79878: PUSH
79879: LD_VAR 0 36
79883: PUSH
79884: LD_VAR 0 37
79888: PUSH
79889: LD_VAR 0 38
79893: PUSH
79894: LD_VAR 0 39
79898: PUSH
79899: LD_VAR 0 40
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: LIST
79908: LIST
79909: LIST
79910: LIST
79911: PUSH
79912: LD_VAR 0 4
79916: PUSH
79917: LD_INT 1
79919: PLUS
79920: ARRAY
79921: ST_TO_ADDR
79922: GO 80289
79924: LD_INT 6
79926: DOUBLE
79927: EQUAL
79928: IFTRUE 79980
79930: LD_INT 7
79932: DOUBLE
79933: EQUAL
79934: IFTRUE 79980
79936: LD_INT 8
79938: DOUBLE
79939: EQUAL
79940: IFTRUE 79980
79942: LD_INT 13
79944: DOUBLE
79945: EQUAL
79946: IFTRUE 79980
79948: LD_INT 12
79950: DOUBLE
79951: EQUAL
79952: IFTRUE 79980
79954: LD_INT 15
79956: DOUBLE
79957: EQUAL
79958: IFTRUE 79980
79960: LD_INT 11
79962: DOUBLE
79963: EQUAL
79964: IFTRUE 79980
79966: LD_INT 14
79968: DOUBLE
79969: EQUAL
79970: IFTRUE 79980
79972: LD_INT 10
79974: DOUBLE
79975: EQUAL
79976: IFTRUE 79980
79978: GO 80036
79980: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
79981: LD_ADDR_VAR 0 9
79985: PUSH
79986: LD_VAR 0 41
79990: PUSH
79991: LD_VAR 0 42
79995: PUSH
79996: LD_VAR 0 43
80000: PUSH
80001: LD_VAR 0 44
80005: PUSH
80006: LD_VAR 0 45
80010: PUSH
80011: LD_VAR 0 46
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: LIST
80020: LIST
80021: LIST
80022: LIST
80023: PUSH
80024: LD_VAR 0 4
80028: PUSH
80029: LD_INT 1
80031: PLUS
80032: ARRAY
80033: ST_TO_ADDR
80034: GO 80289
80036: LD_INT 36
80038: DOUBLE
80039: EQUAL
80040: IFTRUE 80044
80042: GO 80100
80044: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
80045: LD_ADDR_VAR 0 9
80049: PUSH
80050: LD_VAR 0 47
80054: PUSH
80055: LD_VAR 0 48
80059: PUSH
80060: LD_VAR 0 49
80064: PUSH
80065: LD_VAR 0 50
80069: PUSH
80070: LD_VAR 0 51
80074: PUSH
80075: LD_VAR 0 52
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: LIST
80084: LIST
80085: LIST
80086: LIST
80087: PUSH
80088: LD_VAR 0 4
80092: PUSH
80093: LD_INT 1
80095: PLUS
80096: ARRAY
80097: ST_TO_ADDR
80098: GO 80289
80100: LD_INT 4
80102: DOUBLE
80103: EQUAL
80104: IFTRUE 80126
80106: LD_INT 5
80108: DOUBLE
80109: EQUAL
80110: IFTRUE 80126
80112: LD_INT 34
80114: DOUBLE
80115: EQUAL
80116: IFTRUE 80126
80118: LD_INT 37
80120: DOUBLE
80121: EQUAL
80122: IFTRUE 80126
80124: GO 80182
80126: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
80127: LD_ADDR_VAR 0 9
80131: PUSH
80132: LD_VAR 0 53
80136: PUSH
80137: LD_VAR 0 54
80141: PUSH
80142: LD_VAR 0 55
80146: PUSH
80147: LD_VAR 0 56
80151: PUSH
80152: LD_VAR 0 57
80156: PUSH
80157: LD_VAR 0 58
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: PUSH
80170: LD_VAR 0 4
80174: PUSH
80175: LD_INT 1
80177: PLUS
80178: ARRAY
80179: ST_TO_ADDR
80180: GO 80289
80182: LD_INT 31
80184: DOUBLE
80185: EQUAL
80186: IFTRUE 80232
80188: LD_INT 32
80190: DOUBLE
80191: EQUAL
80192: IFTRUE 80232
80194: LD_INT 33
80196: DOUBLE
80197: EQUAL
80198: IFTRUE 80232
80200: LD_INT 27
80202: DOUBLE
80203: EQUAL
80204: IFTRUE 80232
80206: LD_INT 26
80208: DOUBLE
80209: EQUAL
80210: IFTRUE 80232
80212: LD_INT 28
80214: DOUBLE
80215: EQUAL
80216: IFTRUE 80232
80218: LD_INT 29
80220: DOUBLE
80221: EQUAL
80222: IFTRUE 80232
80224: LD_INT 30
80226: DOUBLE
80227: EQUAL
80228: IFTRUE 80232
80230: GO 80288
80232: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
80233: LD_ADDR_VAR 0 9
80237: PUSH
80238: LD_VAR 0 59
80242: PUSH
80243: LD_VAR 0 60
80247: PUSH
80248: LD_VAR 0 61
80252: PUSH
80253: LD_VAR 0 62
80257: PUSH
80258: LD_VAR 0 63
80262: PUSH
80263: LD_VAR 0 64
80267: PUSH
80268: EMPTY
80269: LIST
80270: LIST
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: PUSH
80276: LD_VAR 0 4
80280: PUSH
80281: LD_INT 1
80283: PLUS
80284: ARRAY
80285: ST_TO_ADDR
80286: GO 80289
80288: POP
// temp_list2 = [ ] ;
80289: LD_ADDR_VAR 0 10
80293: PUSH
80294: EMPTY
80295: ST_TO_ADDR
// for i in temp_list do
80296: LD_ADDR_VAR 0 8
80300: PUSH
80301: LD_VAR 0 9
80305: PUSH
80306: FOR_IN
80307: IFFALSE 80359
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
80309: LD_ADDR_VAR 0 10
80313: PUSH
80314: LD_VAR 0 10
80318: PUSH
80319: LD_VAR 0 8
80323: PUSH
80324: LD_INT 1
80326: ARRAY
80327: PUSH
80328: LD_VAR 0 2
80332: PLUS
80333: PUSH
80334: LD_VAR 0 8
80338: PUSH
80339: LD_INT 2
80341: ARRAY
80342: PUSH
80343: LD_VAR 0 3
80347: PLUS
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: PUSH
80353: EMPTY
80354: LIST
80355: ADD
80356: ST_TO_ADDR
80357: GO 80306
80359: POP
80360: POP
// result = temp_list2 ;
80361: LD_ADDR_VAR 0 7
80365: PUSH
80366: LD_VAR 0 10
80370: ST_TO_ADDR
// end ;
80371: LD_VAR 0 7
80375: RET
// export function EnemyInRange ( unit , dist ) ; begin
80376: LD_INT 0
80378: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
80379: LD_ADDR_VAR 0 3
80383: PUSH
80384: LD_VAR 0 1
80388: PPUSH
80389: CALL_OW 255
80393: PPUSH
80394: LD_VAR 0 1
80398: PPUSH
80399: CALL_OW 250
80403: PPUSH
80404: LD_VAR 0 1
80408: PPUSH
80409: CALL_OW 251
80413: PPUSH
80414: LD_VAR 0 2
80418: PPUSH
80419: CALL 54480 0 4
80423: PUSH
80424: LD_INT 4
80426: ARRAY
80427: ST_TO_ADDR
// end ;
80428: LD_VAR 0 3
80432: RET
// export function PlayerSeeMe ( unit ) ; begin
80433: LD_INT 0
80435: PPUSH
// result := See ( your_side , unit ) ;
80436: LD_ADDR_VAR 0 2
80440: PUSH
80441: LD_OWVAR 2
80445: PPUSH
80446: LD_VAR 0 1
80450: PPUSH
80451: CALL_OW 292
80455: ST_TO_ADDR
// end ;
80456: LD_VAR 0 2
80460: RET
// export function ReverseDir ( unit ) ; begin
80461: LD_INT 0
80463: PPUSH
// if not unit then
80464: LD_VAR 0 1
80468: NOT
80469: IFFALSE 80473
// exit ;
80471: GO 80519
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
80473: LD_ADDR_VAR 0 2
80477: PUSH
80478: LD_INT 3
80480: PUSH
80481: LD_INT 4
80483: PUSH
80484: LD_INT 5
80486: PUSH
80487: LD_INT 0
80489: PUSH
80490: LD_INT 1
80492: PUSH
80493: LD_INT 2
80495: PUSH
80496: EMPTY
80497: LIST
80498: LIST
80499: LIST
80500: LIST
80501: LIST
80502: LIST
80503: PUSH
80504: LD_VAR 0 1
80508: PPUSH
80509: CALL_OW 254
80513: PUSH
80514: LD_INT 1
80516: PLUS
80517: ARRAY
80518: ST_TO_ADDR
// end ;
80519: LD_VAR 0 2
80523: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
80524: LD_INT 0
80526: PPUSH
80527: PPUSH
80528: PPUSH
80529: PPUSH
80530: PPUSH
// if not hexes then
80531: LD_VAR 0 2
80535: NOT
80536: IFFALSE 80540
// exit ;
80538: GO 80688
// dist := 9999 ;
80540: LD_ADDR_VAR 0 5
80544: PUSH
80545: LD_INT 9999
80547: ST_TO_ADDR
// for i = 1 to hexes do
80548: LD_ADDR_VAR 0 4
80552: PUSH
80553: DOUBLE
80554: LD_INT 1
80556: DEC
80557: ST_TO_ADDR
80558: LD_VAR 0 2
80562: PUSH
80563: FOR_TO
80564: IFFALSE 80676
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
80566: LD_VAR 0 1
80570: PPUSH
80571: LD_VAR 0 2
80575: PUSH
80576: LD_VAR 0 4
80580: ARRAY
80581: PUSH
80582: LD_INT 1
80584: ARRAY
80585: PPUSH
80586: LD_VAR 0 2
80590: PUSH
80591: LD_VAR 0 4
80595: ARRAY
80596: PUSH
80597: LD_INT 2
80599: ARRAY
80600: PPUSH
80601: CALL_OW 297
80605: PUSH
80606: LD_VAR 0 5
80610: LESS
80611: IFFALSE 80674
// begin hex := hexes [ i ] ;
80613: LD_ADDR_VAR 0 7
80617: PUSH
80618: LD_VAR 0 2
80622: PUSH
80623: LD_VAR 0 4
80627: ARRAY
80628: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
80629: LD_ADDR_VAR 0 5
80633: PUSH
80634: LD_VAR 0 1
80638: PPUSH
80639: LD_VAR 0 2
80643: PUSH
80644: LD_VAR 0 4
80648: ARRAY
80649: PUSH
80650: LD_INT 1
80652: ARRAY
80653: PPUSH
80654: LD_VAR 0 2
80658: PUSH
80659: LD_VAR 0 4
80663: ARRAY
80664: PUSH
80665: LD_INT 2
80667: ARRAY
80668: PPUSH
80669: CALL_OW 297
80673: ST_TO_ADDR
// end ; end ;
80674: GO 80563
80676: POP
80677: POP
// result := hex ;
80678: LD_ADDR_VAR 0 3
80682: PUSH
80683: LD_VAR 0 7
80687: ST_TO_ADDR
// end ;
80688: LD_VAR 0 3
80692: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
80693: LD_INT 0
80695: PPUSH
80696: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
80697: LD_VAR 0 1
80701: NOT
80702: PUSH
80703: LD_VAR 0 1
80707: PUSH
80708: LD_INT 21
80710: PUSH
80711: LD_INT 2
80713: PUSH
80714: EMPTY
80715: LIST
80716: LIST
80717: PUSH
80718: LD_INT 23
80720: PUSH
80721: LD_INT 2
80723: PUSH
80724: EMPTY
80725: LIST
80726: LIST
80727: PUSH
80728: EMPTY
80729: LIST
80730: LIST
80731: PPUSH
80732: CALL_OW 69
80736: IN
80737: NOT
80738: OR
80739: IFFALSE 80743
// exit ;
80741: GO 80790
// for i = 1 to 3 do
80743: LD_ADDR_VAR 0 3
80747: PUSH
80748: DOUBLE
80749: LD_INT 1
80751: DEC
80752: ST_TO_ADDR
80753: LD_INT 3
80755: PUSH
80756: FOR_TO
80757: IFFALSE 80788
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
80759: LD_VAR 0 1
80763: PPUSH
80764: CALL_OW 250
80768: PPUSH
80769: LD_VAR 0 1
80773: PPUSH
80774: CALL_OW 251
80778: PPUSH
80779: LD_INT 1
80781: PPUSH
80782: CALL_OW 453
80786: GO 80756
80788: POP
80789: POP
// end ;
80790: LD_VAR 0 2
80794: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
80795: LD_INT 0
80797: PPUSH
80798: PPUSH
80799: PPUSH
80800: PPUSH
80801: PPUSH
80802: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
80803: LD_VAR 0 1
80807: NOT
80808: PUSH
80809: LD_VAR 0 2
80813: NOT
80814: OR
80815: PUSH
80816: LD_VAR 0 1
80820: PPUSH
80821: CALL_OW 314
80825: OR
80826: IFFALSE 80830
// exit ;
80828: GO 81271
// x := GetX ( enemy_unit ) ;
80830: LD_ADDR_VAR 0 7
80834: PUSH
80835: LD_VAR 0 2
80839: PPUSH
80840: CALL_OW 250
80844: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
80845: LD_ADDR_VAR 0 8
80849: PUSH
80850: LD_VAR 0 2
80854: PPUSH
80855: CALL_OW 251
80859: ST_TO_ADDR
// if not x or not y then
80860: LD_VAR 0 7
80864: NOT
80865: PUSH
80866: LD_VAR 0 8
80870: NOT
80871: OR
80872: IFFALSE 80876
// exit ;
80874: GO 81271
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
80876: LD_ADDR_VAR 0 6
80880: PUSH
80881: LD_VAR 0 7
80885: PPUSH
80886: LD_INT 0
80888: PPUSH
80889: LD_INT 4
80891: PPUSH
80892: CALL_OW 272
80896: PUSH
80897: LD_VAR 0 8
80901: PPUSH
80902: LD_INT 0
80904: PPUSH
80905: LD_INT 4
80907: PPUSH
80908: CALL_OW 273
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PUSH
80917: LD_VAR 0 7
80921: PPUSH
80922: LD_INT 1
80924: PPUSH
80925: LD_INT 4
80927: PPUSH
80928: CALL_OW 272
80932: PUSH
80933: LD_VAR 0 8
80937: PPUSH
80938: LD_INT 1
80940: PPUSH
80941: LD_INT 4
80943: PPUSH
80944: CALL_OW 273
80948: PUSH
80949: EMPTY
80950: LIST
80951: LIST
80952: PUSH
80953: LD_VAR 0 7
80957: PPUSH
80958: LD_INT 2
80960: PPUSH
80961: LD_INT 4
80963: PPUSH
80964: CALL_OW 272
80968: PUSH
80969: LD_VAR 0 8
80973: PPUSH
80974: LD_INT 2
80976: PPUSH
80977: LD_INT 4
80979: PPUSH
80980: CALL_OW 273
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: PUSH
80989: LD_VAR 0 7
80993: PPUSH
80994: LD_INT 3
80996: PPUSH
80997: LD_INT 4
80999: PPUSH
81000: CALL_OW 272
81004: PUSH
81005: LD_VAR 0 8
81009: PPUSH
81010: LD_INT 3
81012: PPUSH
81013: LD_INT 4
81015: PPUSH
81016: CALL_OW 273
81020: PUSH
81021: EMPTY
81022: LIST
81023: LIST
81024: PUSH
81025: LD_VAR 0 7
81029: PPUSH
81030: LD_INT 4
81032: PPUSH
81033: LD_INT 4
81035: PPUSH
81036: CALL_OW 272
81040: PUSH
81041: LD_VAR 0 8
81045: PPUSH
81046: LD_INT 4
81048: PPUSH
81049: LD_INT 4
81051: PPUSH
81052: CALL_OW 273
81056: PUSH
81057: EMPTY
81058: LIST
81059: LIST
81060: PUSH
81061: LD_VAR 0 7
81065: PPUSH
81066: LD_INT 5
81068: PPUSH
81069: LD_INT 4
81071: PPUSH
81072: CALL_OW 272
81076: PUSH
81077: LD_VAR 0 8
81081: PPUSH
81082: LD_INT 5
81084: PPUSH
81085: LD_INT 4
81087: PPUSH
81088: CALL_OW 273
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: LIST
81101: LIST
81102: LIST
81103: LIST
81104: ST_TO_ADDR
// for i = tmp downto 1 do
81105: LD_ADDR_VAR 0 4
81109: PUSH
81110: DOUBLE
81111: LD_VAR 0 6
81115: INC
81116: ST_TO_ADDR
81117: LD_INT 1
81119: PUSH
81120: FOR_DOWNTO
81121: IFFALSE 81222
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
81123: LD_VAR 0 6
81127: PUSH
81128: LD_VAR 0 4
81132: ARRAY
81133: PUSH
81134: LD_INT 1
81136: ARRAY
81137: PPUSH
81138: LD_VAR 0 6
81142: PUSH
81143: LD_VAR 0 4
81147: ARRAY
81148: PUSH
81149: LD_INT 2
81151: ARRAY
81152: PPUSH
81153: CALL_OW 488
81157: NOT
81158: PUSH
81159: LD_VAR 0 6
81163: PUSH
81164: LD_VAR 0 4
81168: ARRAY
81169: PUSH
81170: LD_INT 1
81172: ARRAY
81173: PPUSH
81174: LD_VAR 0 6
81178: PUSH
81179: LD_VAR 0 4
81183: ARRAY
81184: PUSH
81185: LD_INT 2
81187: ARRAY
81188: PPUSH
81189: CALL_OW 428
81193: PUSH
81194: LD_INT 0
81196: NONEQUAL
81197: OR
81198: IFFALSE 81220
// tmp := Delete ( tmp , i ) ;
81200: LD_ADDR_VAR 0 6
81204: PUSH
81205: LD_VAR 0 6
81209: PPUSH
81210: LD_VAR 0 4
81214: PPUSH
81215: CALL_OW 3
81219: ST_TO_ADDR
81220: GO 81120
81222: POP
81223: POP
// j := GetClosestHex ( unit , tmp ) ;
81224: LD_ADDR_VAR 0 5
81228: PUSH
81229: LD_VAR 0 1
81233: PPUSH
81234: LD_VAR 0 6
81238: PPUSH
81239: CALL 80524 0 2
81243: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
81244: LD_VAR 0 1
81248: PPUSH
81249: LD_VAR 0 5
81253: PUSH
81254: LD_INT 1
81256: ARRAY
81257: PPUSH
81258: LD_VAR 0 5
81262: PUSH
81263: LD_INT 2
81265: ARRAY
81266: PPUSH
81267: CALL_OW 111
// end ;
81271: LD_VAR 0 3
81275: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
81276: LD_INT 0
81278: PPUSH
81279: PPUSH
81280: PPUSH
// uc_side = 0 ;
81281: LD_ADDR_OWVAR 20
81285: PUSH
81286: LD_INT 0
81288: ST_TO_ADDR
// uc_nation = 0 ;
81289: LD_ADDR_OWVAR 21
81293: PUSH
81294: LD_INT 0
81296: ST_TO_ADDR
// InitHc ;
81297: CALL_OW 19
// InitVc ;
81301: CALL_OW 20
// if mastodonts then
81305: LD_VAR 0 6
81309: IFFALSE 81376
// for i = 1 to mastodonts do
81311: LD_ADDR_VAR 0 11
81315: PUSH
81316: DOUBLE
81317: LD_INT 1
81319: DEC
81320: ST_TO_ADDR
81321: LD_VAR 0 6
81325: PUSH
81326: FOR_TO
81327: IFFALSE 81374
// begin vc_chassis := 31 ;
81329: LD_ADDR_OWVAR 37
81333: PUSH
81334: LD_INT 31
81336: ST_TO_ADDR
// vc_control := control_rider ;
81337: LD_ADDR_OWVAR 38
81341: PUSH
81342: LD_INT 4
81344: ST_TO_ADDR
// animal := CreateVehicle ;
81345: LD_ADDR_VAR 0 12
81349: PUSH
81350: CALL_OW 45
81354: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81355: LD_VAR 0 12
81359: PPUSH
81360: LD_VAR 0 8
81364: PPUSH
81365: LD_INT 0
81367: PPUSH
81368: CALL 88121 0 3
// end ;
81372: GO 81326
81374: POP
81375: POP
// if horses then
81376: LD_VAR 0 5
81380: IFFALSE 81447
// for i = 1 to horses do
81382: LD_ADDR_VAR 0 11
81386: PUSH
81387: DOUBLE
81388: LD_INT 1
81390: DEC
81391: ST_TO_ADDR
81392: LD_VAR 0 5
81396: PUSH
81397: FOR_TO
81398: IFFALSE 81445
// begin hc_class := 21 ;
81400: LD_ADDR_OWVAR 28
81404: PUSH
81405: LD_INT 21
81407: ST_TO_ADDR
// hc_gallery :=  ;
81408: LD_ADDR_OWVAR 33
81412: PUSH
81413: LD_STRING 
81415: ST_TO_ADDR
// animal := CreateHuman ;
81416: LD_ADDR_VAR 0 12
81420: PUSH
81421: CALL_OW 44
81425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81426: LD_VAR 0 12
81430: PPUSH
81431: LD_VAR 0 8
81435: PPUSH
81436: LD_INT 0
81438: PPUSH
81439: CALL 88121 0 3
// end ;
81443: GO 81397
81445: POP
81446: POP
// if birds then
81447: LD_VAR 0 1
81451: IFFALSE 81518
// for i = 1 to birds do
81453: LD_ADDR_VAR 0 11
81457: PUSH
81458: DOUBLE
81459: LD_INT 1
81461: DEC
81462: ST_TO_ADDR
81463: LD_VAR 0 1
81467: PUSH
81468: FOR_TO
81469: IFFALSE 81516
// begin hc_class = 18 ;
81471: LD_ADDR_OWVAR 28
81475: PUSH
81476: LD_INT 18
81478: ST_TO_ADDR
// hc_gallery =  ;
81479: LD_ADDR_OWVAR 33
81483: PUSH
81484: LD_STRING 
81486: ST_TO_ADDR
// animal := CreateHuman ;
81487: LD_ADDR_VAR 0 12
81491: PUSH
81492: CALL_OW 44
81496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81497: LD_VAR 0 12
81501: PPUSH
81502: LD_VAR 0 8
81506: PPUSH
81507: LD_INT 0
81509: PPUSH
81510: CALL 88121 0 3
// end ;
81514: GO 81468
81516: POP
81517: POP
// if tigers then
81518: LD_VAR 0 2
81522: IFFALSE 81606
// for i = 1 to tigers do
81524: LD_ADDR_VAR 0 11
81528: PUSH
81529: DOUBLE
81530: LD_INT 1
81532: DEC
81533: ST_TO_ADDR
81534: LD_VAR 0 2
81538: PUSH
81539: FOR_TO
81540: IFFALSE 81604
// begin hc_class = class_tiger ;
81542: LD_ADDR_OWVAR 28
81546: PUSH
81547: LD_INT 14
81549: ST_TO_ADDR
// hc_gallery =  ;
81550: LD_ADDR_OWVAR 33
81554: PUSH
81555: LD_STRING 
81557: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
81558: LD_ADDR_OWVAR 35
81562: PUSH
81563: LD_INT 7
81565: NEG
81566: PPUSH
81567: LD_INT 7
81569: PPUSH
81570: CALL_OW 12
81574: ST_TO_ADDR
// animal := CreateHuman ;
81575: LD_ADDR_VAR 0 12
81579: PUSH
81580: CALL_OW 44
81584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81585: LD_VAR 0 12
81589: PPUSH
81590: LD_VAR 0 8
81594: PPUSH
81595: LD_INT 0
81597: PPUSH
81598: CALL 88121 0 3
// end ;
81602: GO 81539
81604: POP
81605: POP
// if apemans then
81606: LD_VAR 0 3
81610: IFFALSE 81733
// for i = 1 to apemans do
81612: LD_ADDR_VAR 0 11
81616: PUSH
81617: DOUBLE
81618: LD_INT 1
81620: DEC
81621: ST_TO_ADDR
81622: LD_VAR 0 3
81626: PUSH
81627: FOR_TO
81628: IFFALSE 81731
// begin hc_class = class_apeman ;
81630: LD_ADDR_OWVAR 28
81634: PUSH
81635: LD_INT 12
81637: ST_TO_ADDR
// hc_gallery =  ;
81638: LD_ADDR_OWVAR 33
81642: PUSH
81643: LD_STRING 
81645: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
81646: LD_ADDR_OWVAR 35
81650: PUSH
81651: LD_INT 5
81653: NEG
81654: PPUSH
81655: LD_INT 5
81657: PPUSH
81658: CALL_OW 12
81662: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
81663: LD_ADDR_OWVAR 31
81667: PUSH
81668: LD_INT 1
81670: PPUSH
81671: LD_INT 3
81673: PPUSH
81674: CALL_OW 12
81678: PUSH
81679: LD_INT 1
81681: PPUSH
81682: LD_INT 3
81684: PPUSH
81685: CALL_OW 12
81689: PUSH
81690: LD_INT 0
81692: PUSH
81693: LD_INT 0
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: ST_TO_ADDR
// animal := CreateHuman ;
81702: LD_ADDR_VAR 0 12
81706: PUSH
81707: CALL_OW 44
81711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81712: LD_VAR 0 12
81716: PPUSH
81717: LD_VAR 0 8
81721: PPUSH
81722: LD_INT 0
81724: PPUSH
81725: CALL 88121 0 3
// end ;
81729: GO 81627
81731: POP
81732: POP
// if enchidnas then
81733: LD_VAR 0 4
81737: IFFALSE 81804
// for i = 1 to enchidnas do
81739: LD_ADDR_VAR 0 11
81743: PUSH
81744: DOUBLE
81745: LD_INT 1
81747: DEC
81748: ST_TO_ADDR
81749: LD_VAR 0 4
81753: PUSH
81754: FOR_TO
81755: IFFALSE 81802
// begin hc_class = 13 ;
81757: LD_ADDR_OWVAR 28
81761: PUSH
81762: LD_INT 13
81764: ST_TO_ADDR
// hc_gallery =  ;
81765: LD_ADDR_OWVAR 33
81769: PUSH
81770: LD_STRING 
81772: ST_TO_ADDR
// animal := CreateHuman ;
81773: LD_ADDR_VAR 0 12
81777: PUSH
81778: CALL_OW 44
81782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81783: LD_VAR 0 12
81787: PPUSH
81788: LD_VAR 0 8
81792: PPUSH
81793: LD_INT 0
81795: PPUSH
81796: CALL 88121 0 3
// end ;
81800: GO 81754
81802: POP
81803: POP
// if fishes then
81804: LD_VAR 0 7
81808: IFFALSE 81875
// for i = 1 to fishes do
81810: LD_ADDR_VAR 0 11
81814: PUSH
81815: DOUBLE
81816: LD_INT 1
81818: DEC
81819: ST_TO_ADDR
81820: LD_VAR 0 7
81824: PUSH
81825: FOR_TO
81826: IFFALSE 81873
// begin hc_class = 20 ;
81828: LD_ADDR_OWVAR 28
81832: PUSH
81833: LD_INT 20
81835: ST_TO_ADDR
// hc_gallery =  ;
81836: LD_ADDR_OWVAR 33
81840: PUSH
81841: LD_STRING 
81843: ST_TO_ADDR
// animal := CreateHuman ;
81844: LD_ADDR_VAR 0 12
81848: PUSH
81849: CALL_OW 44
81853: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
81854: LD_VAR 0 12
81858: PPUSH
81859: LD_VAR 0 9
81863: PPUSH
81864: LD_INT 0
81866: PPUSH
81867: CALL 88121 0 3
// end ;
81871: GO 81825
81873: POP
81874: POP
// end ;
81875: LD_VAR 0 10
81879: RET
// export function WantHeal ( sci , unit ) ; begin
81880: LD_INT 0
81882: PPUSH
// if GetTaskList ( sci ) > 0 then
81883: LD_VAR 0 1
81887: PPUSH
81888: CALL_OW 437
81892: PUSH
81893: LD_INT 0
81895: GREATER
81896: IFFALSE 81966
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
81898: LD_VAR 0 1
81902: PPUSH
81903: CALL_OW 437
81907: PUSH
81908: LD_INT 1
81910: ARRAY
81911: PUSH
81912: LD_INT 1
81914: ARRAY
81915: PUSH
81916: LD_STRING l
81918: EQUAL
81919: PUSH
81920: LD_VAR 0 1
81924: PPUSH
81925: CALL_OW 437
81929: PUSH
81930: LD_INT 1
81932: ARRAY
81933: PUSH
81934: LD_INT 4
81936: ARRAY
81937: PUSH
81938: LD_VAR 0 2
81942: EQUAL
81943: AND
81944: IFFALSE 81956
// result := true else
81946: LD_ADDR_VAR 0 3
81950: PUSH
81951: LD_INT 1
81953: ST_TO_ADDR
81954: GO 81964
// result := false ;
81956: LD_ADDR_VAR 0 3
81960: PUSH
81961: LD_INT 0
81963: ST_TO_ADDR
// end else
81964: GO 81974
// result := false ;
81966: LD_ADDR_VAR 0 3
81970: PUSH
81971: LD_INT 0
81973: ST_TO_ADDR
// end ;
81974: LD_VAR 0 3
81978: RET
// export function HealTarget ( sci ) ; begin
81979: LD_INT 0
81981: PPUSH
// if not sci then
81982: LD_VAR 0 1
81986: NOT
81987: IFFALSE 81991
// exit ;
81989: GO 82056
// result := 0 ;
81991: LD_ADDR_VAR 0 2
81995: PUSH
81996: LD_INT 0
81998: ST_TO_ADDR
// if GetTaskList ( sci ) then
81999: LD_VAR 0 1
82003: PPUSH
82004: CALL_OW 437
82008: IFFALSE 82056
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
82010: LD_VAR 0 1
82014: PPUSH
82015: CALL_OW 437
82019: PUSH
82020: LD_INT 1
82022: ARRAY
82023: PUSH
82024: LD_INT 1
82026: ARRAY
82027: PUSH
82028: LD_STRING l
82030: EQUAL
82031: IFFALSE 82056
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
82033: LD_ADDR_VAR 0 2
82037: PUSH
82038: LD_VAR 0 1
82042: PPUSH
82043: CALL_OW 437
82047: PUSH
82048: LD_INT 1
82050: ARRAY
82051: PUSH
82052: LD_INT 4
82054: ARRAY
82055: ST_TO_ADDR
// end ;
82056: LD_VAR 0 2
82060: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
82061: LD_INT 0
82063: PPUSH
82064: PPUSH
82065: PPUSH
82066: PPUSH
82067: PPUSH
82068: PPUSH
82069: PPUSH
82070: PPUSH
82071: PPUSH
82072: PPUSH
82073: PPUSH
82074: PPUSH
82075: PPUSH
82076: PPUSH
82077: PPUSH
82078: PPUSH
82079: PPUSH
82080: PPUSH
82081: PPUSH
82082: PPUSH
82083: PPUSH
82084: PPUSH
82085: PPUSH
82086: PPUSH
82087: PPUSH
82088: PPUSH
82089: PPUSH
82090: PPUSH
82091: PPUSH
82092: PPUSH
82093: PPUSH
82094: PPUSH
82095: PPUSH
82096: PPUSH
// if not list then
82097: LD_VAR 0 1
82101: NOT
82102: IFFALSE 82106
// exit ;
82104: GO 86732
// base := list [ 1 ] ;
82106: LD_ADDR_VAR 0 3
82110: PUSH
82111: LD_VAR 0 1
82115: PUSH
82116: LD_INT 1
82118: ARRAY
82119: ST_TO_ADDR
// group := list [ 2 ] ;
82120: LD_ADDR_VAR 0 4
82124: PUSH
82125: LD_VAR 0 1
82129: PUSH
82130: LD_INT 2
82132: ARRAY
82133: ST_TO_ADDR
// path := list [ 3 ] ;
82134: LD_ADDR_VAR 0 5
82138: PUSH
82139: LD_VAR 0 1
82143: PUSH
82144: LD_INT 3
82146: ARRAY
82147: ST_TO_ADDR
// flags := list [ 4 ] ;
82148: LD_ADDR_VAR 0 6
82152: PUSH
82153: LD_VAR 0 1
82157: PUSH
82158: LD_INT 4
82160: ARRAY
82161: ST_TO_ADDR
// mined := [ ] ;
82162: LD_ADDR_VAR 0 27
82166: PUSH
82167: EMPTY
82168: ST_TO_ADDR
// bombed := [ ] ;
82169: LD_ADDR_VAR 0 28
82173: PUSH
82174: EMPTY
82175: ST_TO_ADDR
// healers := [ ] ;
82176: LD_ADDR_VAR 0 31
82180: PUSH
82181: EMPTY
82182: ST_TO_ADDR
// to_heal := [ ] ;
82183: LD_ADDR_VAR 0 30
82187: PUSH
82188: EMPTY
82189: ST_TO_ADDR
// repairs := [ ] ;
82190: LD_ADDR_VAR 0 33
82194: PUSH
82195: EMPTY
82196: ST_TO_ADDR
// to_repair := [ ] ;
82197: LD_ADDR_VAR 0 32
82201: PUSH
82202: EMPTY
82203: ST_TO_ADDR
// if not group or not path then
82204: LD_VAR 0 4
82208: NOT
82209: PUSH
82210: LD_VAR 0 5
82214: NOT
82215: OR
82216: IFFALSE 82220
// exit ;
82218: GO 86732
// side := GetSide ( group [ 1 ] ) ;
82220: LD_ADDR_VAR 0 35
82224: PUSH
82225: LD_VAR 0 4
82229: PUSH
82230: LD_INT 1
82232: ARRAY
82233: PPUSH
82234: CALL_OW 255
82238: ST_TO_ADDR
// if flags then
82239: LD_VAR 0 6
82243: IFFALSE 82387
// begin f_ignore_area := flags [ 1 ] ;
82245: LD_ADDR_VAR 0 17
82249: PUSH
82250: LD_VAR 0 6
82254: PUSH
82255: LD_INT 1
82257: ARRAY
82258: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
82259: LD_ADDR_VAR 0 18
82263: PUSH
82264: LD_VAR 0 6
82268: PUSH
82269: LD_INT 2
82271: ARRAY
82272: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
82273: LD_ADDR_VAR 0 19
82277: PUSH
82278: LD_VAR 0 6
82282: PUSH
82283: LD_INT 3
82285: ARRAY
82286: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
82287: LD_ADDR_VAR 0 20
82291: PUSH
82292: LD_VAR 0 6
82296: PUSH
82297: LD_INT 4
82299: ARRAY
82300: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
82301: LD_ADDR_VAR 0 21
82305: PUSH
82306: LD_VAR 0 6
82310: PUSH
82311: LD_INT 5
82313: ARRAY
82314: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
82315: LD_ADDR_VAR 0 22
82319: PUSH
82320: LD_VAR 0 6
82324: PUSH
82325: LD_INT 6
82327: ARRAY
82328: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
82329: LD_ADDR_VAR 0 23
82333: PUSH
82334: LD_VAR 0 6
82338: PUSH
82339: LD_INT 7
82341: ARRAY
82342: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
82343: LD_ADDR_VAR 0 24
82347: PUSH
82348: LD_VAR 0 6
82352: PUSH
82353: LD_INT 8
82355: ARRAY
82356: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
82357: LD_ADDR_VAR 0 25
82361: PUSH
82362: LD_VAR 0 6
82366: PUSH
82367: LD_INT 9
82369: ARRAY
82370: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
82371: LD_ADDR_VAR 0 26
82375: PUSH
82376: LD_VAR 0 6
82380: PUSH
82381: LD_INT 10
82383: ARRAY
82384: ST_TO_ADDR
// end else
82385: GO 82467
// begin f_ignore_area := false ;
82387: LD_ADDR_VAR 0 17
82391: PUSH
82392: LD_INT 0
82394: ST_TO_ADDR
// f_capture := false ;
82395: LD_ADDR_VAR 0 18
82399: PUSH
82400: LD_INT 0
82402: ST_TO_ADDR
// f_ignore_civ := false ;
82403: LD_ADDR_VAR 0 19
82407: PUSH
82408: LD_INT 0
82410: ST_TO_ADDR
// f_murder := false ;
82411: LD_ADDR_VAR 0 20
82415: PUSH
82416: LD_INT 0
82418: ST_TO_ADDR
// f_mines := false ;
82419: LD_ADDR_VAR 0 21
82423: PUSH
82424: LD_INT 0
82426: ST_TO_ADDR
// f_repair := false ;
82427: LD_ADDR_VAR 0 22
82431: PUSH
82432: LD_INT 0
82434: ST_TO_ADDR
// f_heal := false ;
82435: LD_ADDR_VAR 0 23
82439: PUSH
82440: LD_INT 0
82442: ST_TO_ADDR
// f_spacetime := false ;
82443: LD_ADDR_VAR 0 24
82447: PUSH
82448: LD_INT 0
82450: ST_TO_ADDR
// f_attack_depot := false ;
82451: LD_ADDR_VAR 0 25
82455: PUSH
82456: LD_INT 0
82458: ST_TO_ADDR
// f_crawl := false ;
82459: LD_ADDR_VAR 0 26
82463: PUSH
82464: LD_INT 0
82466: ST_TO_ADDR
// end ; if f_heal then
82467: LD_VAR 0 23
82471: IFFALSE 82498
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
82473: LD_ADDR_VAR 0 31
82477: PUSH
82478: LD_VAR 0 4
82482: PPUSH
82483: LD_INT 25
82485: PUSH
82486: LD_INT 4
82488: PUSH
82489: EMPTY
82490: LIST
82491: LIST
82492: PPUSH
82493: CALL_OW 72
82497: ST_TO_ADDR
// if f_repair then
82498: LD_VAR 0 22
82502: IFFALSE 82529
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
82504: LD_ADDR_VAR 0 33
82508: PUSH
82509: LD_VAR 0 4
82513: PPUSH
82514: LD_INT 25
82516: PUSH
82517: LD_INT 3
82519: PUSH
82520: EMPTY
82521: LIST
82522: LIST
82523: PPUSH
82524: CALL_OW 72
82528: ST_TO_ADDR
// units_path := [ ] ;
82529: LD_ADDR_VAR 0 16
82533: PUSH
82534: EMPTY
82535: ST_TO_ADDR
// for i = 1 to group do
82536: LD_ADDR_VAR 0 7
82540: PUSH
82541: DOUBLE
82542: LD_INT 1
82544: DEC
82545: ST_TO_ADDR
82546: LD_VAR 0 4
82550: PUSH
82551: FOR_TO
82552: IFFALSE 82581
// units_path := Replace ( units_path , i , path ) ;
82554: LD_ADDR_VAR 0 16
82558: PUSH
82559: LD_VAR 0 16
82563: PPUSH
82564: LD_VAR 0 7
82568: PPUSH
82569: LD_VAR 0 5
82573: PPUSH
82574: CALL_OW 1
82578: ST_TO_ADDR
82579: GO 82551
82581: POP
82582: POP
// repeat for i = group downto 1 do
82583: LD_ADDR_VAR 0 7
82587: PUSH
82588: DOUBLE
82589: LD_VAR 0 4
82593: INC
82594: ST_TO_ADDR
82595: LD_INT 1
82597: PUSH
82598: FOR_DOWNTO
82599: IFFALSE 86695
// begin wait ( 5 ) ;
82601: LD_INT 5
82603: PPUSH
82604: CALL_OW 67
// tmp := [ ] ;
82608: LD_ADDR_VAR 0 14
82612: PUSH
82613: EMPTY
82614: ST_TO_ADDR
// attacking := false ;
82615: LD_ADDR_VAR 0 29
82619: PUSH
82620: LD_INT 0
82622: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
82623: LD_VAR 0 4
82627: PUSH
82628: LD_VAR 0 7
82632: ARRAY
82633: PPUSH
82634: CALL_OW 301
82638: PUSH
82639: LD_VAR 0 4
82643: PUSH
82644: LD_VAR 0 7
82648: ARRAY
82649: NOT
82650: OR
82651: IFFALSE 82760
// begin if GetType ( group [ i ] ) = unit_human then
82653: LD_VAR 0 4
82657: PUSH
82658: LD_VAR 0 7
82662: ARRAY
82663: PPUSH
82664: CALL_OW 247
82668: PUSH
82669: LD_INT 1
82671: EQUAL
82672: IFFALSE 82718
// begin to_heal := to_heal diff group [ i ] ;
82674: LD_ADDR_VAR 0 30
82678: PUSH
82679: LD_VAR 0 30
82683: PUSH
82684: LD_VAR 0 4
82688: PUSH
82689: LD_VAR 0 7
82693: ARRAY
82694: DIFF
82695: ST_TO_ADDR
// healers := healers diff group [ i ] ;
82696: LD_ADDR_VAR 0 31
82700: PUSH
82701: LD_VAR 0 31
82705: PUSH
82706: LD_VAR 0 4
82710: PUSH
82711: LD_VAR 0 7
82715: ARRAY
82716: DIFF
82717: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
82718: LD_ADDR_VAR 0 4
82722: PUSH
82723: LD_VAR 0 4
82727: PPUSH
82728: LD_VAR 0 7
82732: PPUSH
82733: CALL_OW 3
82737: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
82738: LD_ADDR_VAR 0 16
82742: PUSH
82743: LD_VAR 0 16
82747: PPUSH
82748: LD_VAR 0 7
82752: PPUSH
82753: CALL_OW 3
82757: ST_TO_ADDR
// continue ;
82758: GO 82598
// end ; if f_repair then
82760: LD_VAR 0 22
82764: IFFALSE 83253
// begin if GetType ( group [ i ] ) = unit_vehicle then
82766: LD_VAR 0 4
82770: PUSH
82771: LD_VAR 0 7
82775: ARRAY
82776: PPUSH
82777: CALL_OW 247
82781: PUSH
82782: LD_INT 2
82784: EQUAL
82785: IFFALSE 82975
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
82787: LD_VAR 0 4
82791: PUSH
82792: LD_VAR 0 7
82796: ARRAY
82797: PPUSH
82798: CALL_OW 256
82802: PUSH
82803: LD_INT 700
82805: LESS
82806: PUSH
82807: LD_VAR 0 4
82811: PUSH
82812: LD_VAR 0 7
82816: ARRAY
82817: PUSH
82818: LD_VAR 0 32
82822: IN
82823: NOT
82824: AND
82825: IFFALSE 82849
// to_repair := to_repair union group [ i ] ;
82827: LD_ADDR_VAR 0 32
82831: PUSH
82832: LD_VAR 0 32
82836: PUSH
82837: LD_VAR 0 4
82841: PUSH
82842: LD_VAR 0 7
82846: ARRAY
82847: UNION
82848: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
82849: LD_VAR 0 4
82853: PUSH
82854: LD_VAR 0 7
82858: ARRAY
82859: PPUSH
82860: CALL_OW 256
82864: PUSH
82865: LD_INT 1000
82867: EQUAL
82868: PUSH
82869: LD_VAR 0 4
82873: PUSH
82874: LD_VAR 0 7
82878: ARRAY
82879: PUSH
82880: LD_VAR 0 32
82884: IN
82885: AND
82886: IFFALSE 82910
// to_repair := to_repair diff group [ i ] ;
82888: LD_ADDR_VAR 0 32
82892: PUSH
82893: LD_VAR 0 32
82897: PUSH
82898: LD_VAR 0 4
82902: PUSH
82903: LD_VAR 0 7
82907: ARRAY
82908: DIFF
82909: ST_TO_ADDR
// if group [ i ] in to_repair then
82910: LD_VAR 0 4
82914: PUSH
82915: LD_VAR 0 7
82919: ARRAY
82920: PUSH
82921: LD_VAR 0 32
82925: IN
82926: IFFALSE 82973
// begin if not IsInArea ( group [ i ] , f_repair ) then
82928: LD_VAR 0 4
82932: PUSH
82933: LD_VAR 0 7
82937: ARRAY
82938: PPUSH
82939: LD_VAR 0 22
82943: PPUSH
82944: CALL_OW 308
82948: NOT
82949: IFFALSE 82971
// ComMoveToArea ( group [ i ] , f_repair ) ;
82951: LD_VAR 0 4
82955: PUSH
82956: LD_VAR 0 7
82960: ARRAY
82961: PPUSH
82962: LD_VAR 0 22
82966: PPUSH
82967: CALL_OW 113
// continue ;
82971: GO 82598
// end ; end else
82973: GO 83253
// if group [ i ] in repairs then
82975: LD_VAR 0 4
82979: PUSH
82980: LD_VAR 0 7
82984: ARRAY
82985: PUSH
82986: LD_VAR 0 33
82990: IN
82991: IFFALSE 83253
// begin if IsInUnit ( group [ i ] ) then
82993: LD_VAR 0 4
82997: PUSH
82998: LD_VAR 0 7
83002: ARRAY
83003: PPUSH
83004: CALL_OW 310
83008: IFFALSE 83076
// begin z := IsInUnit ( group [ i ] ) ;
83010: LD_ADDR_VAR 0 13
83014: PUSH
83015: LD_VAR 0 4
83019: PUSH
83020: LD_VAR 0 7
83024: ARRAY
83025: PPUSH
83026: CALL_OW 310
83030: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
83031: LD_VAR 0 13
83035: PUSH
83036: LD_VAR 0 32
83040: IN
83041: PUSH
83042: LD_VAR 0 13
83046: PPUSH
83047: LD_VAR 0 22
83051: PPUSH
83052: CALL_OW 308
83056: AND
83057: IFFALSE 83074
// ComExitVehicle ( group [ i ] ) ;
83059: LD_VAR 0 4
83063: PUSH
83064: LD_VAR 0 7
83068: ARRAY
83069: PPUSH
83070: CALL_OW 121
// end else
83074: GO 83253
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
83076: LD_ADDR_VAR 0 13
83080: PUSH
83081: LD_VAR 0 4
83085: PPUSH
83086: LD_INT 95
83088: PUSH
83089: LD_VAR 0 22
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: PUSH
83098: LD_INT 58
83100: PUSH
83101: EMPTY
83102: LIST
83103: PUSH
83104: EMPTY
83105: LIST
83106: LIST
83107: PPUSH
83108: CALL_OW 72
83112: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
83113: LD_VAR 0 4
83117: PUSH
83118: LD_VAR 0 7
83122: ARRAY
83123: PPUSH
83124: CALL_OW 314
83128: NOT
83129: IFFALSE 83251
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
83131: LD_ADDR_VAR 0 10
83135: PUSH
83136: LD_VAR 0 13
83140: PPUSH
83141: LD_VAR 0 4
83145: PUSH
83146: LD_VAR 0 7
83150: ARRAY
83151: PPUSH
83152: CALL_OW 74
83156: ST_TO_ADDR
// if not x then
83157: LD_VAR 0 10
83161: NOT
83162: IFFALSE 83166
// continue ;
83164: GO 82598
// if GetLives ( x ) < 1000 then
83166: LD_VAR 0 10
83170: PPUSH
83171: CALL_OW 256
83175: PUSH
83176: LD_INT 1000
83178: LESS
83179: IFFALSE 83203
// ComRepairVehicle ( group [ i ] , x ) else
83181: LD_VAR 0 4
83185: PUSH
83186: LD_VAR 0 7
83190: ARRAY
83191: PPUSH
83192: LD_VAR 0 10
83196: PPUSH
83197: CALL_OW 129
83201: GO 83251
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
83203: LD_VAR 0 23
83207: PUSH
83208: LD_VAR 0 4
83212: PUSH
83213: LD_VAR 0 7
83217: ARRAY
83218: PPUSH
83219: CALL_OW 256
83223: PUSH
83224: LD_INT 1000
83226: LESS
83227: AND
83228: NOT
83229: IFFALSE 83251
// ComEnterUnit ( group [ i ] , x ) ;
83231: LD_VAR 0 4
83235: PUSH
83236: LD_VAR 0 7
83240: ARRAY
83241: PPUSH
83242: LD_VAR 0 10
83246: PPUSH
83247: CALL_OW 120
// end ; continue ;
83251: GO 82598
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
83253: LD_VAR 0 23
83257: PUSH
83258: LD_VAR 0 4
83262: PUSH
83263: LD_VAR 0 7
83267: ARRAY
83268: PPUSH
83269: CALL_OW 247
83273: PUSH
83274: LD_INT 1
83276: EQUAL
83277: AND
83278: IFFALSE 83756
// begin if group [ i ] in healers then
83280: LD_VAR 0 4
83284: PUSH
83285: LD_VAR 0 7
83289: ARRAY
83290: PUSH
83291: LD_VAR 0 31
83295: IN
83296: IFFALSE 83569
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
83298: LD_VAR 0 4
83302: PUSH
83303: LD_VAR 0 7
83307: ARRAY
83308: PPUSH
83309: LD_VAR 0 23
83313: PPUSH
83314: CALL_OW 308
83318: NOT
83319: PUSH
83320: LD_VAR 0 4
83324: PUSH
83325: LD_VAR 0 7
83329: ARRAY
83330: PPUSH
83331: CALL_OW 314
83335: NOT
83336: AND
83337: IFFALSE 83361
// ComMoveToArea ( group [ i ] , f_heal ) else
83339: LD_VAR 0 4
83343: PUSH
83344: LD_VAR 0 7
83348: ARRAY
83349: PPUSH
83350: LD_VAR 0 23
83354: PPUSH
83355: CALL_OW 113
83359: GO 83567
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
83361: LD_VAR 0 4
83365: PUSH
83366: LD_VAR 0 7
83370: ARRAY
83371: PPUSH
83372: CALL 81979 0 1
83376: PPUSH
83377: CALL_OW 256
83381: PUSH
83382: LD_INT 1000
83384: EQUAL
83385: IFFALSE 83404
// ComStop ( group [ i ] ) else
83387: LD_VAR 0 4
83391: PUSH
83392: LD_VAR 0 7
83396: ARRAY
83397: PPUSH
83398: CALL_OW 141
83402: GO 83567
// if not HasTask ( group [ i ] ) and to_heal then
83404: LD_VAR 0 4
83408: PUSH
83409: LD_VAR 0 7
83413: ARRAY
83414: PPUSH
83415: CALL_OW 314
83419: NOT
83420: PUSH
83421: LD_VAR 0 30
83425: AND
83426: IFFALSE 83567
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
83428: LD_ADDR_VAR 0 13
83432: PUSH
83433: LD_VAR 0 30
83437: PPUSH
83438: LD_INT 3
83440: PUSH
83441: LD_INT 54
83443: PUSH
83444: EMPTY
83445: LIST
83446: PUSH
83447: EMPTY
83448: LIST
83449: LIST
83450: PPUSH
83451: CALL_OW 72
83455: PPUSH
83456: LD_VAR 0 4
83460: PUSH
83461: LD_VAR 0 7
83465: ARRAY
83466: PPUSH
83467: CALL_OW 74
83471: ST_TO_ADDR
// if z then
83472: LD_VAR 0 13
83476: IFFALSE 83567
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
83478: LD_INT 91
83480: PUSH
83481: LD_VAR 0 13
83485: PUSH
83486: LD_INT 10
83488: PUSH
83489: EMPTY
83490: LIST
83491: LIST
83492: LIST
83493: PUSH
83494: LD_INT 81
83496: PUSH
83497: LD_VAR 0 13
83501: PPUSH
83502: CALL_OW 255
83506: PUSH
83507: EMPTY
83508: LIST
83509: LIST
83510: PUSH
83511: EMPTY
83512: LIST
83513: LIST
83514: PPUSH
83515: CALL_OW 69
83519: PUSH
83520: LD_INT 0
83522: EQUAL
83523: IFFALSE 83547
// ComHeal ( group [ i ] , z ) else
83525: LD_VAR 0 4
83529: PUSH
83530: LD_VAR 0 7
83534: ARRAY
83535: PPUSH
83536: LD_VAR 0 13
83540: PPUSH
83541: CALL_OW 128
83545: GO 83567
// ComMoveToArea ( group [ i ] , f_heal ) ;
83547: LD_VAR 0 4
83551: PUSH
83552: LD_VAR 0 7
83556: ARRAY
83557: PPUSH
83558: LD_VAR 0 23
83562: PPUSH
83563: CALL_OW 113
// end ; continue ;
83567: GO 82598
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
83569: LD_VAR 0 4
83573: PUSH
83574: LD_VAR 0 7
83578: ARRAY
83579: PPUSH
83580: CALL_OW 256
83584: PUSH
83585: LD_INT 700
83587: LESS
83588: PUSH
83589: LD_VAR 0 4
83593: PUSH
83594: LD_VAR 0 7
83598: ARRAY
83599: PUSH
83600: LD_VAR 0 30
83604: IN
83605: NOT
83606: AND
83607: IFFALSE 83631
// to_heal := to_heal union group [ i ] ;
83609: LD_ADDR_VAR 0 30
83613: PUSH
83614: LD_VAR 0 30
83618: PUSH
83619: LD_VAR 0 4
83623: PUSH
83624: LD_VAR 0 7
83628: ARRAY
83629: UNION
83630: ST_TO_ADDR
// if group [ i ] in to_heal then
83631: LD_VAR 0 4
83635: PUSH
83636: LD_VAR 0 7
83640: ARRAY
83641: PUSH
83642: LD_VAR 0 30
83646: IN
83647: IFFALSE 83756
// begin if GetLives ( group [ i ] ) = 1000 then
83649: LD_VAR 0 4
83653: PUSH
83654: LD_VAR 0 7
83658: ARRAY
83659: PPUSH
83660: CALL_OW 256
83664: PUSH
83665: LD_INT 1000
83667: EQUAL
83668: IFFALSE 83694
// to_heal := to_heal diff group [ i ] else
83670: LD_ADDR_VAR 0 30
83674: PUSH
83675: LD_VAR 0 30
83679: PUSH
83680: LD_VAR 0 4
83684: PUSH
83685: LD_VAR 0 7
83689: ARRAY
83690: DIFF
83691: ST_TO_ADDR
83692: GO 83756
// begin if not IsInArea ( group [ i ] , to_heal ) then
83694: LD_VAR 0 4
83698: PUSH
83699: LD_VAR 0 7
83703: ARRAY
83704: PPUSH
83705: LD_VAR 0 30
83709: PPUSH
83710: CALL_OW 308
83714: NOT
83715: IFFALSE 83739
// ComMoveToArea ( group [ i ] , f_heal ) else
83717: LD_VAR 0 4
83721: PUSH
83722: LD_VAR 0 7
83726: ARRAY
83727: PPUSH
83728: LD_VAR 0 23
83732: PPUSH
83733: CALL_OW 113
83737: GO 83754
// ComHold ( group [ i ] ) ;
83739: LD_VAR 0 4
83743: PUSH
83744: LD_VAR 0 7
83748: ARRAY
83749: PPUSH
83750: CALL_OW 140
// continue ;
83754: GO 82598
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
83756: LD_VAR 0 4
83760: PUSH
83761: LD_VAR 0 7
83765: ARRAY
83766: PPUSH
83767: LD_INT 10
83769: PPUSH
83770: CALL 80376 0 2
83774: NOT
83775: PUSH
83776: LD_VAR 0 16
83780: PUSH
83781: LD_VAR 0 7
83785: ARRAY
83786: PUSH
83787: EMPTY
83788: EQUAL
83789: NOT
83790: AND
83791: IFFALSE 84057
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
83793: LD_VAR 0 4
83797: PUSH
83798: LD_VAR 0 7
83802: ARRAY
83803: PPUSH
83804: CALL_OW 262
83808: PUSH
83809: LD_INT 1
83811: PUSH
83812: LD_INT 2
83814: PUSH
83815: EMPTY
83816: LIST
83817: LIST
83818: IN
83819: IFFALSE 83860
// if GetFuel ( group [ i ] ) < 10 then
83821: LD_VAR 0 4
83825: PUSH
83826: LD_VAR 0 7
83830: ARRAY
83831: PPUSH
83832: CALL_OW 261
83836: PUSH
83837: LD_INT 10
83839: LESS
83840: IFFALSE 83860
// SetFuel ( group [ i ] , 12 ) ;
83842: LD_VAR 0 4
83846: PUSH
83847: LD_VAR 0 7
83851: ARRAY
83852: PPUSH
83853: LD_INT 12
83855: PPUSH
83856: CALL_OW 240
// if units_path [ i ] then
83860: LD_VAR 0 16
83864: PUSH
83865: LD_VAR 0 7
83869: ARRAY
83870: IFFALSE 84055
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
83872: LD_VAR 0 4
83876: PUSH
83877: LD_VAR 0 7
83881: ARRAY
83882: PPUSH
83883: LD_VAR 0 16
83887: PUSH
83888: LD_VAR 0 7
83892: ARRAY
83893: PUSH
83894: LD_INT 1
83896: ARRAY
83897: PUSH
83898: LD_INT 1
83900: ARRAY
83901: PPUSH
83902: LD_VAR 0 16
83906: PUSH
83907: LD_VAR 0 7
83911: ARRAY
83912: PUSH
83913: LD_INT 1
83915: ARRAY
83916: PUSH
83917: LD_INT 2
83919: ARRAY
83920: PPUSH
83921: CALL_OW 297
83925: PUSH
83926: LD_INT 6
83928: GREATER
83929: IFFALSE 84004
// begin if not HasTask ( group [ i ] ) then
83931: LD_VAR 0 4
83935: PUSH
83936: LD_VAR 0 7
83940: ARRAY
83941: PPUSH
83942: CALL_OW 314
83946: NOT
83947: IFFALSE 84002
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
83949: LD_VAR 0 4
83953: PUSH
83954: LD_VAR 0 7
83958: ARRAY
83959: PPUSH
83960: LD_VAR 0 16
83964: PUSH
83965: LD_VAR 0 7
83969: ARRAY
83970: PUSH
83971: LD_INT 1
83973: ARRAY
83974: PUSH
83975: LD_INT 1
83977: ARRAY
83978: PPUSH
83979: LD_VAR 0 16
83983: PUSH
83984: LD_VAR 0 7
83988: ARRAY
83989: PUSH
83990: LD_INT 1
83992: ARRAY
83993: PUSH
83994: LD_INT 2
83996: ARRAY
83997: PPUSH
83998: CALL_OW 114
// end else
84002: GO 84055
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
84004: LD_ADDR_VAR 0 15
84008: PUSH
84009: LD_VAR 0 16
84013: PUSH
84014: LD_VAR 0 7
84018: ARRAY
84019: PPUSH
84020: LD_INT 1
84022: PPUSH
84023: CALL_OW 3
84027: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
84028: LD_ADDR_VAR 0 16
84032: PUSH
84033: LD_VAR 0 16
84037: PPUSH
84038: LD_VAR 0 7
84042: PPUSH
84043: LD_VAR 0 15
84047: PPUSH
84048: CALL_OW 1
84052: ST_TO_ADDR
// continue ;
84053: GO 82598
// end ; end ; end else
84055: GO 86693
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
84057: LD_ADDR_VAR 0 14
84061: PUSH
84062: LD_INT 81
84064: PUSH
84065: LD_VAR 0 4
84069: PUSH
84070: LD_VAR 0 7
84074: ARRAY
84075: PPUSH
84076: CALL_OW 255
84080: PUSH
84081: EMPTY
84082: LIST
84083: LIST
84084: PPUSH
84085: CALL_OW 69
84089: ST_TO_ADDR
// if not tmp then
84090: LD_VAR 0 14
84094: NOT
84095: IFFALSE 84099
// continue ;
84097: GO 82598
// if f_ignore_area then
84099: LD_VAR 0 17
84103: IFFALSE 84191
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
84105: LD_ADDR_VAR 0 15
84109: PUSH
84110: LD_VAR 0 14
84114: PPUSH
84115: LD_INT 3
84117: PUSH
84118: LD_INT 92
84120: PUSH
84121: LD_VAR 0 17
84125: PUSH
84126: LD_INT 1
84128: ARRAY
84129: PUSH
84130: LD_VAR 0 17
84134: PUSH
84135: LD_INT 2
84137: ARRAY
84138: PUSH
84139: LD_VAR 0 17
84143: PUSH
84144: LD_INT 3
84146: ARRAY
84147: PUSH
84148: EMPTY
84149: LIST
84150: LIST
84151: LIST
84152: LIST
84153: PUSH
84154: EMPTY
84155: LIST
84156: LIST
84157: PPUSH
84158: CALL_OW 72
84162: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
84163: LD_VAR 0 14
84167: PUSH
84168: LD_VAR 0 15
84172: DIFF
84173: IFFALSE 84191
// tmp := tmp diff tmp2 ;
84175: LD_ADDR_VAR 0 14
84179: PUSH
84180: LD_VAR 0 14
84184: PUSH
84185: LD_VAR 0 15
84189: DIFF
84190: ST_TO_ADDR
// end ; if not f_murder then
84191: LD_VAR 0 20
84195: NOT
84196: IFFALSE 84254
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
84198: LD_ADDR_VAR 0 15
84202: PUSH
84203: LD_VAR 0 14
84207: PPUSH
84208: LD_INT 3
84210: PUSH
84211: LD_INT 50
84213: PUSH
84214: EMPTY
84215: LIST
84216: PUSH
84217: EMPTY
84218: LIST
84219: LIST
84220: PPUSH
84221: CALL_OW 72
84225: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
84226: LD_VAR 0 14
84230: PUSH
84231: LD_VAR 0 15
84235: DIFF
84236: IFFALSE 84254
// tmp := tmp diff tmp2 ;
84238: LD_ADDR_VAR 0 14
84242: PUSH
84243: LD_VAR 0 14
84247: PUSH
84248: LD_VAR 0 15
84252: DIFF
84253: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
84254: LD_ADDR_VAR 0 14
84258: PUSH
84259: LD_VAR 0 4
84263: PUSH
84264: LD_VAR 0 7
84268: ARRAY
84269: PPUSH
84270: LD_VAR 0 14
84274: PPUSH
84275: LD_INT 1
84277: PPUSH
84278: LD_INT 1
84280: PPUSH
84281: CALL 54019 0 4
84285: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
84286: LD_VAR 0 4
84290: PUSH
84291: LD_VAR 0 7
84295: ARRAY
84296: PPUSH
84297: CALL_OW 257
84301: PUSH
84302: LD_INT 1
84304: EQUAL
84305: IFFALSE 84753
// begin if WantPlant ( group [ i ] ) then
84307: LD_VAR 0 4
84311: PUSH
84312: LD_VAR 0 7
84316: ARRAY
84317: PPUSH
84318: CALL 53520 0 1
84322: IFFALSE 84326
// continue ;
84324: GO 82598
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
84326: LD_VAR 0 18
84330: PUSH
84331: LD_VAR 0 4
84335: PUSH
84336: LD_VAR 0 7
84340: ARRAY
84341: PPUSH
84342: CALL_OW 310
84346: NOT
84347: AND
84348: PUSH
84349: LD_VAR 0 14
84353: PUSH
84354: LD_INT 1
84356: ARRAY
84357: PUSH
84358: LD_VAR 0 14
84362: PPUSH
84363: LD_INT 21
84365: PUSH
84366: LD_INT 2
84368: PUSH
84369: EMPTY
84370: LIST
84371: LIST
84372: PUSH
84373: LD_INT 58
84375: PUSH
84376: EMPTY
84377: LIST
84378: PUSH
84379: EMPTY
84380: LIST
84381: LIST
84382: PPUSH
84383: CALL_OW 72
84387: IN
84388: AND
84389: IFFALSE 84425
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
84391: LD_VAR 0 4
84395: PUSH
84396: LD_VAR 0 7
84400: ARRAY
84401: PPUSH
84402: LD_VAR 0 14
84406: PUSH
84407: LD_INT 1
84409: ARRAY
84410: PPUSH
84411: CALL_OW 120
// attacking := true ;
84415: LD_ADDR_VAR 0 29
84419: PUSH
84420: LD_INT 1
84422: ST_TO_ADDR
// continue ;
84423: GO 82598
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
84425: LD_VAR 0 26
84429: PUSH
84430: LD_VAR 0 4
84434: PUSH
84435: LD_VAR 0 7
84439: ARRAY
84440: PPUSH
84441: CALL_OW 257
84445: PUSH
84446: LD_INT 1
84448: EQUAL
84449: AND
84450: PUSH
84451: LD_VAR 0 4
84455: PUSH
84456: LD_VAR 0 7
84460: ARRAY
84461: PPUSH
84462: CALL_OW 256
84466: PUSH
84467: LD_INT 800
84469: LESS
84470: AND
84471: PUSH
84472: LD_VAR 0 4
84476: PUSH
84477: LD_VAR 0 7
84481: ARRAY
84482: PPUSH
84483: CALL_OW 318
84487: NOT
84488: AND
84489: IFFALSE 84506
// ComCrawl ( group [ i ] ) ;
84491: LD_VAR 0 4
84495: PUSH
84496: LD_VAR 0 7
84500: ARRAY
84501: PPUSH
84502: CALL_OW 137
// if f_mines then
84506: LD_VAR 0 21
84510: IFFALSE 84753
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
84512: LD_VAR 0 14
84516: PUSH
84517: LD_INT 1
84519: ARRAY
84520: PPUSH
84521: CALL_OW 247
84525: PUSH
84526: LD_INT 3
84528: EQUAL
84529: PUSH
84530: LD_VAR 0 14
84534: PUSH
84535: LD_INT 1
84537: ARRAY
84538: PUSH
84539: LD_VAR 0 27
84543: IN
84544: NOT
84545: AND
84546: IFFALSE 84753
// begin x := GetX ( tmp [ 1 ] ) ;
84548: LD_ADDR_VAR 0 10
84552: PUSH
84553: LD_VAR 0 14
84557: PUSH
84558: LD_INT 1
84560: ARRAY
84561: PPUSH
84562: CALL_OW 250
84566: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
84567: LD_ADDR_VAR 0 11
84571: PUSH
84572: LD_VAR 0 14
84576: PUSH
84577: LD_INT 1
84579: ARRAY
84580: PPUSH
84581: CALL_OW 251
84585: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
84586: LD_ADDR_VAR 0 12
84590: PUSH
84591: LD_VAR 0 4
84595: PUSH
84596: LD_VAR 0 7
84600: ARRAY
84601: PPUSH
84602: CALL 80461 0 1
84606: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
84607: LD_VAR 0 4
84611: PUSH
84612: LD_VAR 0 7
84616: ARRAY
84617: PPUSH
84618: LD_VAR 0 10
84622: PPUSH
84623: LD_VAR 0 11
84627: PPUSH
84628: LD_VAR 0 14
84632: PUSH
84633: LD_INT 1
84635: ARRAY
84636: PPUSH
84637: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
84641: LD_VAR 0 4
84645: PUSH
84646: LD_VAR 0 7
84650: ARRAY
84651: PPUSH
84652: LD_VAR 0 10
84656: PPUSH
84657: LD_VAR 0 12
84661: PPUSH
84662: LD_INT 7
84664: PPUSH
84665: CALL_OW 272
84669: PPUSH
84670: LD_VAR 0 11
84674: PPUSH
84675: LD_VAR 0 12
84679: PPUSH
84680: LD_INT 7
84682: PPUSH
84683: CALL_OW 273
84687: PPUSH
84688: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
84692: LD_VAR 0 4
84696: PUSH
84697: LD_VAR 0 7
84701: ARRAY
84702: PPUSH
84703: LD_INT 71
84705: PPUSH
84706: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
84710: LD_ADDR_VAR 0 27
84714: PUSH
84715: LD_VAR 0 27
84719: PPUSH
84720: LD_VAR 0 27
84724: PUSH
84725: LD_INT 1
84727: PLUS
84728: PPUSH
84729: LD_VAR 0 14
84733: PUSH
84734: LD_INT 1
84736: ARRAY
84737: PPUSH
84738: CALL_OW 1
84742: ST_TO_ADDR
// attacking := true ;
84743: LD_ADDR_VAR 0 29
84747: PUSH
84748: LD_INT 1
84750: ST_TO_ADDR
// continue ;
84751: GO 82598
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
84753: LD_VAR 0 4
84757: PUSH
84758: LD_VAR 0 7
84762: ARRAY
84763: PPUSH
84764: CALL_OW 257
84768: PUSH
84769: LD_INT 17
84771: EQUAL
84772: PUSH
84773: LD_VAR 0 4
84777: PUSH
84778: LD_VAR 0 7
84782: ARRAY
84783: PPUSH
84784: CALL_OW 110
84788: PUSH
84789: LD_INT 71
84791: EQUAL
84792: NOT
84793: AND
84794: IFFALSE 84940
// begin attacking := false ;
84796: LD_ADDR_VAR 0 29
84800: PUSH
84801: LD_INT 0
84803: ST_TO_ADDR
// k := 5 ;
84804: LD_ADDR_VAR 0 9
84808: PUSH
84809: LD_INT 5
84811: ST_TO_ADDR
// if tmp < k then
84812: LD_VAR 0 14
84816: PUSH
84817: LD_VAR 0 9
84821: LESS
84822: IFFALSE 84834
// k := tmp ;
84824: LD_ADDR_VAR 0 9
84828: PUSH
84829: LD_VAR 0 14
84833: ST_TO_ADDR
// for j = 1 to k do
84834: LD_ADDR_VAR 0 8
84838: PUSH
84839: DOUBLE
84840: LD_INT 1
84842: DEC
84843: ST_TO_ADDR
84844: LD_VAR 0 9
84848: PUSH
84849: FOR_TO
84850: IFFALSE 84938
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
84852: LD_VAR 0 14
84856: PUSH
84857: LD_VAR 0 8
84861: ARRAY
84862: PUSH
84863: LD_VAR 0 14
84867: PPUSH
84868: LD_INT 58
84870: PUSH
84871: EMPTY
84872: LIST
84873: PPUSH
84874: CALL_OW 72
84878: IN
84879: NOT
84880: IFFALSE 84936
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
84882: LD_VAR 0 4
84886: PUSH
84887: LD_VAR 0 7
84891: ARRAY
84892: PPUSH
84893: LD_VAR 0 14
84897: PUSH
84898: LD_VAR 0 8
84902: ARRAY
84903: PPUSH
84904: CALL_OW 115
// attacking := true ;
84908: LD_ADDR_VAR 0 29
84912: PUSH
84913: LD_INT 1
84915: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
84916: LD_VAR 0 4
84920: PUSH
84921: LD_VAR 0 7
84925: ARRAY
84926: PPUSH
84927: LD_INT 71
84929: PPUSH
84930: CALL_OW 109
// continue ;
84934: GO 84849
// end ; end ;
84936: GO 84849
84938: POP
84939: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
84940: LD_VAR 0 4
84944: PUSH
84945: LD_VAR 0 7
84949: ARRAY
84950: PPUSH
84951: CALL_OW 257
84955: PUSH
84956: LD_INT 8
84958: EQUAL
84959: PUSH
84960: LD_VAR 0 4
84964: PUSH
84965: LD_VAR 0 7
84969: ARRAY
84970: PPUSH
84971: CALL_OW 264
84975: PUSH
84976: LD_INT 28
84978: PUSH
84979: LD_INT 45
84981: PUSH
84982: LD_INT 7
84984: PUSH
84985: LD_INT 47
84987: PUSH
84988: EMPTY
84989: LIST
84990: LIST
84991: LIST
84992: LIST
84993: IN
84994: OR
84995: IFFALSE 85225
// begin attacking := false ;
84997: LD_ADDR_VAR 0 29
85001: PUSH
85002: LD_INT 0
85004: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
85005: LD_VAR 0 14
85009: PUSH
85010: LD_INT 1
85012: ARRAY
85013: PPUSH
85014: CALL_OW 266
85018: PUSH
85019: LD_INT 32
85021: PUSH
85022: LD_INT 31
85024: PUSH
85025: LD_INT 33
85027: PUSH
85028: LD_INT 4
85030: PUSH
85031: LD_INT 5
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: LIST
85038: LIST
85039: LIST
85040: IN
85041: IFFALSE 85225
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
85043: LD_ADDR_VAR 0 9
85047: PUSH
85048: LD_VAR 0 14
85052: PUSH
85053: LD_INT 1
85055: ARRAY
85056: PPUSH
85057: CALL_OW 266
85061: PPUSH
85062: LD_VAR 0 14
85066: PUSH
85067: LD_INT 1
85069: ARRAY
85070: PPUSH
85071: CALL_OW 250
85075: PPUSH
85076: LD_VAR 0 14
85080: PUSH
85081: LD_INT 1
85083: ARRAY
85084: PPUSH
85085: CALL_OW 251
85089: PPUSH
85090: LD_VAR 0 14
85094: PUSH
85095: LD_INT 1
85097: ARRAY
85098: PPUSH
85099: CALL_OW 254
85103: PPUSH
85104: LD_VAR 0 14
85108: PUSH
85109: LD_INT 1
85111: ARRAY
85112: PPUSH
85113: CALL_OW 248
85117: PPUSH
85118: LD_INT 0
85120: PPUSH
85121: CALL 61831 0 6
85125: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
85126: LD_ADDR_VAR 0 8
85130: PUSH
85131: LD_VAR 0 4
85135: PUSH
85136: LD_VAR 0 7
85140: ARRAY
85141: PPUSH
85142: LD_VAR 0 9
85146: PPUSH
85147: CALL 80524 0 2
85151: ST_TO_ADDR
// if j then
85152: LD_VAR 0 8
85156: IFFALSE 85225
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
85158: LD_VAR 0 8
85162: PUSH
85163: LD_INT 1
85165: ARRAY
85166: PPUSH
85167: LD_VAR 0 8
85171: PUSH
85172: LD_INT 2
85174: ARRAY
85175: PPUSH
85176: CALL_OW 488
85180: IFFALSE 85225
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
85182: LD_VAR 0 4
85186: PUSH
85187: LD_VAR 0 7
85191: ARRAY
85192: PPUSH
85193: LD_VAR 0 8
85197: PUSH
85198: LD_INT 1
85200: ARRAY
85201: PPUSH
85202: LD_VAR 0 8
85206: PUSH
85207: LD_INT 2
85209: ARRAY
85210: PPUSH
85211: CALL_OW 116
// attacking := true ;
85215: LD_ADDR_VAR 0 29
85219: PUSH
85220: LD_INT 1
85222: ST_TO_ADDR
// continue ;
85223: GO 82598
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
85225: LD_VAR 0 4
85229: PUSH
85230: LD_VAR 0 7
85234: ARRAY
85235: PPUSH
85236: CALL_OW 265
85240: PUSH
85241: LD_INT 11
85243: EQUAL
85244: IFFALSE 85522
// begin k := 10 ;
85246: LD_ADDR_VAR 0 9
85250: PUSH
85251: LD_INT 10
85253: ST_TO_ADDR
// x := 0 ;
85254: LD_ADDR_VAR 0 10
85258: PUSH
85259: LD_INT 0
85261: ST_TO_ADDR
// if tmp < k then
85262: LD_VAR 0 14
85266: PUSH
85267: LD_VAR 0 9
85271: LESS
85272: IFFALSE 85284
// k := tmp ;
85274: LD_ADDR_VAR 0 9
85278: PUSH
85279: LD_VAR 0 14
85283: ST_TO_ADDR
// for j = k downto 1 do
85284: LD_ADDR_VAR 0 8
85288: PUSH
85289: DOUBLE
85290: LD_VAR 0 9
85294: INC
85295: ST_TO_ADDR
85296: LD_INT 1
85298: PUSH
85299: FOR_DOWNTO
85300: IFFALSE 85375
// begin if GetType ( tmp [ j ] ) = unit_human then
85302: LD_VAR 0 14
85306: PUSH
85307: LD_VAR 0 8
85311: ARRAY
85312: PPUSH
85313: CALL_OW 247
85317: PUSH
85318: LD_INT 1
85320: EQUAL
85321: IFFALSE 85373
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
85323: LD_VAR 0 4
85327: PUSH
85328: LD_VAR 0 7
85332: ARRAY
85333: PPUSH
85334: LD_VAR 0 14
85338: PUSH
85339: LD_VAR 0 8
85343: ARRAY
85344: PPUSH
85345: CALL 80795 0 2
// x := tmp [ j ] ;
85349: LD_ADDR_VAR 0 10
85353: PUSH
85354: LD_VAR 0 14
85358: PUSH
85359: LD_VAR 0 8
85363: ARRAY
85364: ST_TO_ADDR
// attacking := true ;
85365: LD_ADDR_VAR 0 29
85369: PUSH
85370: LD_INT 1
85372: ST_TO_ADDR
// end ; end ;
85373: GO 85299
85375: POP
85376: POP
// if not x then
85377: LD_VAR 0 10
85381: NOT
85382: IFFALSE 85522
// begin attacking := true ;
85384: LD_ADDR_VAR 0 29
85388: PUSH
85389: LD_INT 1
85391: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
85392: LD_VAR 0 4
85396: PUSH
85397: LD_VAR 0 7
85401: ARRAY
85402: PPUSH
85403: CALL_OW 250
85407: PPUSH
85408: LD_VAR 0 4
85412: PUSH
85413: LD_VAR 0 7
85417: ARRAY
85418: PPUSH
85419: CALL_OW 251
85423: PPUSH
85424: CALL_OW 546
85428: PUSH
85429: LD_INT 2
85431: ARRAY
85432: PUSH
85433: LD_VAR 0 14
85437: PUSH
85438: LD_INT 1
85440: ARRAY
85441: PPUSH
85442: CALL_OW 250
85446: PPUSH
85447: LD_VAR 0 14
85451: PUSH
85452: LD_INT 1
85454: ARRAY
85455: PPUSH
85456: CALL_OW 251
85460: PPUSH
85461: CALL_OW 546
85465: PUSH
85466: LD_INT 2
85468: ARRAY
85469: EQUAL
85470: IFFALSE 85498
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
85472: LD_VAR 0 4
85476: PUSH
85477: LD_VAR 0 7
85481: ARRAY
85482: PPUSH
85483: LD_VAR 0 14
85487: PUSH
85488: LD_INT 1
85490: ARRAY
85491: PPUSH
85492: CALL 80795 0 2
85496: GO 85522
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85498: LD_VAR 0 4
85502: PUSH
85503: LD_VAR 0 7
85507: ARRAY
85508: PPUSH
85509: LD_VAR 0 14
85513: PUSH
85514: LD_INT 1
85516: ARRAY
85517: PPUSH
85518: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
85522: LD_VAR 0 4
85526: PUSH
85527: LD_VAR 0 7
85531: ARRAY
85532: PPUSH
85533: CALL_OW 264
85537: PUSH
85538: LD_INT 29
85540: EQUAL
85541: IFFALSE 85907
// begin if WantsToAttack ( group [ i ] ) in bombed then
85543: LD_VAR 0 4
85547: PUSH
85548: LD_VAR 0 7
85552: ARRAY
85553: PPUSH
85554: CALL_OW 319
85558: PUSH
85559: LD_VAR 0 28
85563: IN
85564: IFFALSE 85568
// continue ;
85566: GO 82598
// k := 8 ;
85568: LD_ADDR_VAR 0 9
85572: PUSH
85573: LD_INT 8
85575: ST_TO_ADDR
// x := 0 ;
85576: LD_ADDR_VAR 0 10
85580: PUSH
85581: LD_INT 0
85583: ST_TO_ADDR
// if tmp < k then
85584: LD_VAR 0 14
85588: PUSH
85589: LD_VAR 0 9
85593: LESS
85594: IFFALSE 85606
// k := tmp ;
85596: LD_ADDR_VAR 0 9
85600: PUSH
85601: LD_VAR 0 14
85605: ST_TO_ADDR
// for j = 1 to k do
85606: LD_ADDR_VAR 0 8
85610: PUSH
85611: DOUBLE
85612: LD_INT 1
85614: DEC
85615: ST_TO_ADDR
85616: LD_VAR 0 9
85620: PUSH
85621: FOR_TO
85622: IFFALSE 85754
// begin if GetType ( tmp [ j ] ) = unit_building then
85624: LD_VAR 0 14
85628: PUSH
85629: LD_VAR 0 8
85633: ARRAY
85634: PPUSH
85635: CALL_OW 247
85639: PUSH
85640: LD_INT 3
85642: EQUAL
85643: IFFALSE 85752
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
85645: LD_VAR 0 14
85649: PUSH
85650: LD_VAR 0 8
85654: ARRAY
85655: PUSH
85656: LD_VAR 0 28
85660: IN
85661: NOT
85662: PUSH
85663: LD_VAR 0 14
85667: PUSH
85668: LD_VAR 0 8
85672: ARRAY
85673: PPUSH
85674: CALL_OW 313
85678: AND
85679: IFFALSE 85752
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85681: LD_VAR 0 4
85685: PUSH
85686: LD_VAR 0 7
85690: ARRAY
85691: PPUSH
85692: LD_VAR 0 14
85696: PUSH
85697: LD_VAR 0 8
85701: ARRAY
85702: PPUSH
85703: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
85707: LD_ADDR_VAR 0 28
85711: PUSH
85712: LD_VAR 0 28
85716: PPUSH
85717: LD_VAR 0 28
85721: PUSH
85722: LD_INT 1
85724: PLUS
85725: PPUSH
85726: LD_VAR 0 14
85730: PUSH
85731: LD_VAR 0 8
85735: ARRAY
85736: PPUSH
85737: CALL_OW 1
85741: ST_TO_ADDR
// attacking := true ;
85742: LD_ADDR_VAR 0 29
85746: PUSH
85747: LD_INT 1
85749: ST_TO_ADDR
// break ;
85750: GO 85754
// end ; end ;
85752: GO 85621
85754: POP
85755: POP
// if not attacking and f_attack_depot then
85756: LD_VAR 0 29
85760: NOT
85761: PUSH
85762: LD_VAR 0 25
85766: AND
85767: IFFALSE 85862
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85769: LD_ADDR_VAR 0 13
85773: PUSH
85774: LD_VAR 0 14
85778: PPUSH
85779: LD_INT 2
85781: PUSH
85782: LD_INT 30
85784: PUSH
85785: LD_INT 0
85787: PUSH
85788: EMPTY
85789: LIST
85790: LIST
85791: PUSH
85792: LD_INT 30
85794: PUSH
85795: LD_INT 1
85797: PUSH
85798: EMPTY
85799: LIST
85800: LIST
85801: PUSH
85802: EMPTY
85803: LIST
85804: LIST
85805: LIST
85806: PPUSH
85807: CALL_OW 72
85811: ST_TO_ADDR
// if z then
85812: LD_VAR 0 13
85816: IFFALSE 85862
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
85818: LD_VAR 0 4
85822: PUSH
85823: LD_VAR 0 7
85827: ARRAY
85828: PPUSH
85829: LD_VAR 0 13
85833: PPUSH
85834: LD_VAR 0 4
85838: PUSH
85839: LD_VAR 0 7
85843: ARRAY
85844: PPUSH
85845: CALL_OW 74
85849: PPUSH
85850: CALL_OW 115
// attacking := true ;
85854: LD_ADDR_VAR 0 29
85858: PUSH
85859: LD_INT 1
85861: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
85862: LD_VAR 0 4
85866: PUSH
85867: LD_VAR 0 7
85871: ARRAY
85872: PPUSH
85873: CALL_OW 256
85877: PUSH
85878: LD_INT 500
85880: LESS
85881: IFFALSE 85907
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85883: LD_VAR 0 4
85887: PUSH
85888: LD_VAR 0 7
85892: ARRAY
85893: PPUSH
85894: LD_VAR 0 14
85898: PUSH
85899: LD_INT 1
85901: ARRAY
85902: PPUSH
85903: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
85907: LD_VAR 0 4
85911: PUSH
85912: LD_VAR 0 7
85916: ARRAY
85917: PPUSH
85918: CALL_OW 264
85922: PUSH
85923: LD_INT 49
85925: EQUAL
85926: IFFALSE 86047
// begin if not HasTask ( group [ i ] ) then
85928: LD_VAR 0 4
85932: PUSH
85933: LD_VAR 0 7
85937: ARRAY
85938: PPUSH
85939: CALL_OW 314
85943: NOT
85944: IFFALSE 86047
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
85946: LD_ADDR_VAR 0 9
85950: PUSH
85951: LD_INT 81
85953: PUSH
85954: LD_VAR 0 4
85958: PUSH
85959: LD_VAR 0 7
85963: ARRAY
85964: PPUSH
85965: CALL_OW 255
85969: PUSH
85970: EMPTY
85971: LIST
85972: LIST
85973: PPUSH
85974: CALL_OW 69
85978: PPUSH
85979: LD_VAR 0 4
85983: PUSH
85984: LD_VAR 0 7
85988: ARRAY
85989: PPUSH
85990: CALL_OW 74
85994: ST_TO_ADDR
// if k then
85995: LD_VAR 0 9
85999: IFFALSE 86047
// if GetDistUnits ( group [ i ] , k ) > 10 then
86001: LD_VAR 0 4
86005: PUSH
86006: LD_VAR 0 7
86010: ARRAY
86011: PPUSH
86012: LD_VAR 0 9
86016: PPUSH
86017: CALL_OW 296
86021: PUSH
86022: LD_INT 10
86024: GREATER
86025: IFFALSE 86047
// ComMoveUnit ( group [ i ] , k ) ;
86027: LD_VAR 0 4
86031: PUSH
86032: LD_VAR 0 7
86036: ARRAY
86037: PPUSH
86038: LD_VAR 0 9
86042: PPUSH
86043: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
86047: LD_VAR 0 4
86051: PUSH
86052: LD_VAR 0 7
86056: ARRAY
86057: PPUSH
86058: CALL_OW 256
86062: PUSH
86063: LD_INT 250
86065: LESS
86066: PUSH
86067: LD_VAR 0 4
86071: PUSH
86072: LD_VAR 0 7
86076: ARRAY
86077: PUSH
86078: LD_INT 21
86080: PUSH
86081: LD_INT 2
86083: PUSH
86084: EMPTY
86085: LIST
86086: LIST
86087: PUSH
86088: LD_INT 23
86090: PUSH
86091: LD_INT 2
86093: PUSH
86094: EMPTY
86095: LIST
86096: LIST
86097: PUSH
86098: EMPTY
86099: LIST
86100: LIST
86101: PPUSH
86102: CALL_OW 69
86106: IN
86107: AND
86108: IFFALSE 86233
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
86110: LD_ADDR_VAR 0 9
86114: PUSH
86115: LD_OWVAR 3
86119: PUSH
86120: LD_VAR 0 4
86124: PUSH
86125: LD_VAR 0 7
86129: ARRAY
86130: DIFF
86131: PPUSH
86132: LD_VAR 0 4
86136: PUSH
86137: LD_VAR 0 7
86141: ARRAY
86142: PPUSH
86143: CALL_OW 74
86147: ST_TO_ADDR
// if not k then
86148: LD_VAR 0 9
86152: NOT
86153: IFFALSE 86157
// continue ;
86155: GO 82598
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
86157: LD_VAR 0 9
86161: PUSH
86162: LD_INT 81
86164: PUSH
86165: LD_VAR 0 4
86169: PUSH
86170: LD_VAR 0 7
86174: ARRAY
86175: PPUSH
86176: CALL_OW 255
86180: PUSH
86181: EMPTY
86182: LIST
86183: LIST
86184: PPUSH
86185: CALL_OW 69
86189: IN
86190: PUSH
86191: LD_VAR 0 9
86195: PPUSH
86196: LD_VAR 0 4
86200: PUSH
86201: LD_VAR 0 7
86205: ARRAY
86206: PPUSH
86207: CALL_OW 296
86211: PUSH
86212: LD_INT 5
86214: LESS
86215: AND
86216: IFFALSE 86233
// ComAutodestruct ( group [ i ] ) ;
86218: LD_VAR 0 4
86222: PUSH
86223: LD_VAR 0 7
86227: ARRAY
86228: PPUSH
86229: CALL 80693 0 1
// end ; if f_attack_depot then
86233: LD_VAR 0 25
86237: IFFALSE 86349
// begin k := 6 ;
86239: LD_ADDR_VAR 0 9
86243: PUSH
86244: LD_INT 6
86246: ST_TO_ADDR
// if tmp < k then
86247: LD_VAR 0 14
86251: PUSH
86252: LD_VAR 0 9
86256: LESS
86257: IFFALSE 86269
// k := tmp ;
86259: LD_ADDR_VAR 0 9
86263: PUSH
86264: LD_VAR 0 14
86268: ST_TO_ADDR
// for j = 1 to k do
86269: LD_ADDR_VAR 0 8
86273: PUSH
86274: DOUBLE
86275: LD_INT 1
86277: DEC
86278: ST_TO_ADDR
86279: LD_VAR 0 9
86283: PUSH
86284: FOR_TO
86285: IFFALSE 86347
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
86287: LD_VAR 0 8
86291: PPUSH
86292: CALL_OW 266
86296: PUSH
86297: LD_INT 0
86299: PUSH
86300: LD_INT 1
86302: PUSH
86303: EMPTY
86304: LIST
86305: LIST
86306: IN
86307: IFFALSE 86345
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86309: LD_VAR 0 4
86313: PUSH
86314: LD_VAR 0 7
86318: ARRAY
86319: PPUSH
86320: LD_VAR 0 14
86324: PUSH
86325: LD_VAR 0 8
86329: ARRAY
86330: PPUSH
86331: CALL_OW 115
// attacking := true ;
86335: LD_ADDR_VAR 0 29
86339: PUSH
86340: LD_INT 1
86342: ST_TO_ADDR
// break ;
86343: GO 86347
// end ;
86345: GO 86284
86347: POP
86348: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
86349: LD_VAR 0 4
86353: PUSH
86354: LD_VAR 0 7
86358: ARRAY
86359: PPUSH
86360: CALL_OW 302
86364: PUSH
86365: LD_VAR 0 29
86369: NOT
86370: AND
86371: IFFALSE 86693
// begin if GetTag ( group [ i ] ) = 71 then
86373: LD_VAR 0 4
86377: PUSH
86378: LD_VAR 0 7
86382: ARRAY
86383: PPUSH
86384: CALL_OW 110
86388: PUSH
86389: LD_INT 71
86391: EQUAL
86392: IFFALSE 86433
// begin if HasTask ( group [ i ] ) then
86394: LD_VAR 0 4
86398: PUSH
86399: LD_VAR 0 7
86403: ARRAY
86404: PPUSH
86405: CALL_OW 314
86409: IFFALSE 86415
// continue else
86411: GO 82598
86413: GO 86433
// SetTag ( group [ i ] , 0 ) ;
86415: LD_VAR 0 4
86419: PUSH
86420: LD_VAR 0 7
86424: ARRAY
86425: PPUSH
86426: LD_INT 0
86428: PPUSH
86429: CALL_OW 109
// end ; k := 8 ;
86433: LD_ADDR_VAR 0 9
86437: PUSH
86438: LD_INT 8
86440: ST_TO_ADDR
// x := 0 ;
86441: LD_ADDR_VAR 0 10
86445: PUSH
86446: LD_INT 0
86448: ST_TO_ADDR
// if tmp < k then
86449: LD_VAR 0 14
86453: PUSH
86454: LD_VAR 0 9
86458: LESS
86459: IFFALSE 86471
// k := tmp ;
86461: LD_ADDR_VAR 0 9
86465: PUSH
86466: LD_VAR 0 14
86470: ST_TO_ADDR
// for j = 1 to k do
86471: LD_ADDR_VAR 0 8
86475: PUSH
86476: DOUBLE
86477: LD_INT 1
86479: DEC
86480: ST_TO_ADDR
86481: LD_VAR 0 9
86485: PUSH
86486: FOR_TO
86487: IFFALSE 86585
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
86489: LD_VAR 0 14
86493: PUSH
86494: LD_VAR 0 8
86498: ARRAY
86499: PPUSH
86500: CALL_OW 247
86504: PUSH
86505: LD_INT 1
86507: EQUAL
86508: PUSH
86509: LD_VAR 0 14
86513: PUSH
86514: LD_VAR 0 8
86518: ARRAY
86519: PPUSH
86520: CALL_OW 256
86524: PUSH
86525: LD_INT 250
86527: LESS
86528: PUSH
86529: LD_VAR 0 20
86533: AND
86534: PUSH
86535: LD_VAR 0 20
86539: NOT
86540: PUSH
86541: LD_VAR 0 14
86545: PUSH
86546: LD_VAR 0 8
86550: ARRAY
86551: PPUSH
86552: CALL_OW 256
86556: PUSH
86557: LD_INT 250
86559: GREATEREQUAL
86560: AND
86561: OR
86562: AND
86563: IFFALSE 86583
// begin x := tmp [ j ] ;
86565: LD_ADDR_VAR 0 10
86569: PUSH
86570: LD_VAR 0 14
86574: PUSH
86575: LD_VAR 0 8
86579: ARRAY
86580: ST_TO_ADDR
// break ;
86581: GO 86585
// end ;
86583: GO 86486
86585: POP
86586: POP
// if x then
86587: LD_VAR 0 10
86591: IFFALSE 86615
// ComAttackUnit ( group [ i ] , x ) else
86593: LD_VAR 0 4
86597: PUSH
86598: LD_VAR 0 7
86602: ARRAY
86603: PPUSH
86604: LD_VAR 0 10
86608: PPUSH
86609: CALL_OW 115
86613: GO 86639
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86615: LD_VAR 0 4
86619: PUSH
86620: LD_VAR 0 7
86624: ARRAY
86625: PPUSH
86626: LD_VAR 0 14
86630: PUSH
86631: LD_INT 1
86633: ARRAY
86634: PPUSH
86635: CALL_OW 115
// if not HasTask ( group [ i ] ) then
86639: LD_VAR 0 4
86643: PUSH
86644: LD_VAR 0 7
86648: ARRAY
86649: PPUSH
86650: CALL_OW 314
86654: NOT
86655: IFFALSE 86693
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
86657: LD_VAR 0 4
86661: PUSH
86662: LD_VAR 0 7
86666: ARRAY
86667: PPUSH
86668: LD_VAR 0 14
86672: PPUSH
86673: LD_VAR 0 4
86677: PUSH
86678: LD_VAR 0 7
86682: ARRAY
86683: PPUSH
86684: CALL_OW 74
86688: PPUSH
86689: CALL_OW 115
// end ; end ; end ;
86693: GO 82598
86695: POP
86696: POP
// wait ( 0 0$1 ) ;
86697: LD_INT 35
86699: PPUSH
86700: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
86704: LD_VAR 0 4
86708: PUSH
86709: EMPTY
86710: EQUAL
86711: PUSH
86712: LD_INT 81
86714: PUSH
86715: LD_VAR 0 35
86719: PUSH
86720: EMPTY
86721: LIST
86722: LIST
86723: PPUSH
86724: CALL_OW 69
86728: NOT
86729: OR
86730: IFFALSE 82583
// end ;
86732: LD_VAR 0 2
86736: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
86737: LD_INT 0
86739: PPUSH
86740: PPUSH
86741: PPUSH
86742: PPUSH
// if not base_units then
86743: LD_VAR 0 1
86747: NOT
86748: IFFALSE 86752
// exit ;
86750: GO 86839
// result := false ;
86752: LD_ADDR_VAR 0 2
86756: PUSH
86757: LD_INT 0
86759: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
86760: LD_ADDR_VAR 0 5
86764: PUSH
86765: LD_VAR 0 1
86769: PPUSH
86770: LD_INT 21
86772: PUSH
86773: LD_INT 3
86775: PUSH
86776: EMPTY
86777: LIST
86778: LIST
86779: PPUSH
86780: CALL_OW 72
86784: ST_TO_ADDR
// if not tmp then
86785: LD_VAR 0 5
86789: NOT
86790: IFFALSE 86794
// exit ;
86792: GO 86839
// for i in tmp do
86794: LD_ADDR_VAR 0 3
86798: PUSH
86799: LD_VAR 0 5
86803: PUSH
86804: FOR_IN
86805: IFFALSE 86837
// begin result := EnemyInRange ( i , 22 ) ;
86807: LD_ADDR_VAR 0 2
86811: PUSH
86812: LD_VAR 0 3
86816: PPUSH
86817: LD_INT 22
86819: PPUSH
86820: CALL 80376 0 2
86824: ST_TO_ADDR
// if result then
86825: LD_VAR 0 2
86829: IFFALSE 86835
// exit ;
86831: POP
86832: POP
86833: GO 86839
// end ;
86835: GO 86804
86837: POP
86838: POP
// end ;
86839: LD_VAR 0 2
86843: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
86844: LD_INT 0
86846: PPUSH
86847: PPUSH
// if not units then
86848: LD_VAR 0 1
86852: NOT
86853: IFFALSE 86857
// exit ;
86855: GO 86927
// result := [ ] ;
86857: LD_ADDR_VAR 0 3
86861: PUSH
86862: EMPTY
86863: ST_TO_ADDR
// for i in units do
86864: LD_ADDR_VAR 0 4
86868: PUSH
86869: LD_VAR 0 1
86873: PUSH
86874: FOR_IN
86875: IFFALSE 86925
// if GetTag ( i ) = tag then
86877: LD_VAR 0 4
86881: PPUSH
86882: CALL_OW 110
86886: PUSH
86887: LD_VAR 0 2
86891: EQUAL
86892: IFFALSE 86923
// result := Insert ( result , result + 1 , i ) ;
86894: LD_ADDR_VAR 0 3
86898: PUSH
86899: LD_VAR 0 3
86903: PPUSH
86904: LD_VAR 0 3
86908: PUSH
86909: LD_INT 1
86911: PLUS
86912: PPUSH
86913: LD_VAR 0 4
86917: PPUSH
86918: CALL_OW 2
86922: ST_TO_ADDR
86923: GO 86874
86925: POP
86926: POP
// end ;
86927: LD_VAR 0 3
86931: RET
// export function IsDriver ( un ) ; begin
86932: LD_INT 0
86934: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
86935: LD_ADDR_VAR 0 2
86939: PUSH
86940: LD_VAR 0 1
86944: PUSH
86945: LD_INT 55
86947: PUSH
86948: EMPTY
86949: LIST
86950: PPUSH
86951: CALL_OW 69
86955: IN
86956: ST_TO_ADDR
// end ;
86957: LD_VAR 0 2
86961: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
86962: LD_INT 0
86964: PPUSH
86965: PPUSH
// list := [ ] ;
86966: LD_ADDR_VAR 0 5
86970: PUSH
86971: EMPTY
86972: ST_TO_ADDR
// case d of 0 :
86973: LD_VAR 0 3
86977: PUSH
86978: LD_INT 0
86980: DOUBLE
86981: EQUAL
86982: IFTRUE 86986
86984: GO 87119
86986: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
86987: LD_ADDR_VAR 0 5
86991: PUSH
86992: LD_VAR 0 1
86996: PUSH
86997: LD_INT 4
86999: MINUS
87000: PUSH
87001: LD_VAR 0 2
87005: PUSH
87006: LD_INT 4
87008: MINUS
87009: PUSH
87010: LD_INT 2
87012: PUSH
87013: EMPTY
87014: LIST
87015: LIST
87016: LIST
87017: PUSH
87018: LD_VAR 0 1
87022: PUSH
87023: LD_INT 3
87025: MINUS
87026: PUSH
87027: LD_VAR 0 2
87031: PUSH
87032: LD_INT 1
87034: PUSH
87035: EMPTY
87036: LIST
87037: LIST
87038: LIST
87039: PUSH
87040: LD_VAR 0 1
87044: PUSH
87045: LD_INT 4
87047: PLUS
87048: PUSH
87049: LD_VAR 0 2
87053: PUSH
87054: LD_INT 4
87056: PUSH
87057: EMPTY
87058: LIST
87059: LIST
87060: LIST
87061: PUSH
87062: LD_VAR 0 1
87066: PUSH
87067: LD_INT 3
87069: PLUS
87070: PUSH
87071: LD_VAR 0 2
87075: PUSH
87076: LD_INT 3
87078: PLUS
87079: PUSH
87080: LD_INT 5
87082: PUSH
87083: EMPTY
87084: LIST
87085: LIST
87086: LIST
87087: PUSH
87088: LD_VAR 0 1
87092: PUSH
87093: LD_VAR 0 2
87097: PUSH
87098: LD_INT 4
87100: PLUS
87101: PUSH
87102: LD_INT 0
87104: PUSH
87105: EMPTY
87106: LIST
87107: LIST
87108: LIST
87109: PUSH
87110: EMPTY
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: LIST
87116: ST_TO_ADDR
// end ; 1 :
87117: GO 87817
87119: LD_INT 1
87121: DOUBLE
87122: EQUAL
87123: IFTRUE 87127
87125: GO 87260
87127: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
87128: LD_ADDR_VAR 0 5
87132: PUSH
87133: LD_VAR 0 1
87137: PUSH
87138: LD_VAR 0 2
87142: PUSH
87143: LD_INT 4
87145: MINUS
87146: PUSH
87147: LD_INT 3
87149: PUSH
87150: EMPTY
87151: LIST
87152: LIST
87153: LIST
87154: PUSH
87155: LD_VAR 0 1
87159: PUSH
87160: LD_INT 3
87162: MINUS
87163: PUSH
87164: LD_VAR 0 2
87168: PUSH
87169: LD_INT 3
87171: MINUS
87172: PUSH
87173: LD_INT 2
87175: PUSH
87176: EMPTY
87177: LIST
87178: LIST
87179: LIST
87180: PUSH
87181: LD_VAR 0 1
87185: PUSH
87186: LD_INT 4
87188: MINUS
87189: PUSH
87190: LD_VAR 0 2
87194: PUSH
87195: LD_INT 1
87197: PUSH
87198: EMPTY
87199: LIST
87200: LIST
87201: LIST
87202: PUSH
87203: LD_VAR 0 1
87207: PUSH
87208: LD_VAR 0 2
87212: PUSH
87213: LD_INT 3
87215: PLUS
87216: PUSH
87217: LD_INT 0
87219: PUSH
87220: EMPTY
87221: LIST
87222: LIST
87223: LIST
87224: PUSH
87225: LD_VAR 0 1
87229: PUSH
87230: LD_INT 4
87232: PLUS
87233: PUSH
87234: LD_VAR 0 2
87238: PUSH
87239: LD_INT 4
87241: PLUS
87242: PUSH
87243: LD_INT 5
87245: PUSH
87246: EMPTY
87247: LIST
87248: LIST
87249: LIST
87250: PUSH
87251: EMPTY
87252: LIST
87253: LIST
87254: LIST
87255: LIST
87256: LIST
87257: ST_TO_ADDR
// end ; 2 :
87258: GO 87817
87260: LD_INT 2
87262: DOUBLE
87263: EQUAL
87264: IFTRUE 87268
87266: GO 87397
87268: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
87269: LD_ADDR_VAR 0 5
87273: PUSH
87274: LD_VAR 0 1
87278: PUSH
87279: LD_VAR 0 2
87283: PUSH
87284: LD_INT 3
87286: MINUS
87287: PUSH
87288: LD_INT 3
87290: PUSH
87291: EMPTY
87292: LIST
87293: LIST
87294: LIST
87295: PUSH
87296: LD_VAR 0 1
87300: PUSH
87301: LD_INT 4
87303: PLUS
87304: PUSH
87305: LD_VAR 0 2
87309: PUSH
87310: LD_INT 4
87312: PUSH
87313: EMPTY
87314: LIST
87315: LIST
87316: LIST
87317: PUSH
87318: LD_VAR 0 1
87322: PUSH
87323: LD_VAR 0 2
87327: PUSH
87328: LD_INT 4
87330: PLUS
87331: PUSH
87332: LD_INT 0
87334: PUSH
87335: EMPTY
87336: LIST
87337: LIST
87338: LIST
87339: PUSH
87340: LD_VAR 0 1
87344: PUSH
87345: LD_INT 3
87347: MINUS
87348: PUSH
87349: LD_VAR 0 2
87353: PUSH
87354: LD_INT 1
87356: PUSH
87357: EMPTY
87358: LIST
87359: LIST
87360: LIST
87361: PUSH
87362: LD_VAR 0 1
87366: PUSH
87367: LD_INT 4
87369: MINUS
87370: PUSH
87371: LD_VAR 0 2
87375: PUSH
87376: LD_INT 4
87378: MINUS
87379: PUSH
87380: LD_INT 2
87382: PUSH
87383: EMPTY
87384: LIST
87385: LIST
87386: LIST
87387: PUSH
87388: EMPTY
87389: LIST
87390: LIST
87391: LIST
87392: LIST
87393: LIST
87394: ST_TO_ADDR
// end ; 3 :
87395: GO 87817
87397: LD_INT 3
87399: DOUBLE
87400: EQUAL
87401: IFTRUE 87405
87403: GO 87538
87405: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
87406: LD_ADDR_VAR 0 5
87410: PUSH
87411: LD_VAR 0 1
87415: PUSH
87416: LD_INT 3
87418: PLUS
87419: PUSH
87420: LD_VAR 0 2
87424: PUSH
87425: LD_INT 4
87427: PUSH
87428: EMPTY
87429: LIST
87430: LIST
87431: LIST
87432: PUSH
87433: LD_VAR 0 1
87437: PUSH
87438: LD_INT 4
87440: PLUS
87441: PUSH
87442: LD_VAR 0 2
87446: PUSH
87447: LD_INT 4
87449: PLUS
87450: PUSH
87451: LD_INT 5
87453: PUSH
87454: EMPTY
87455: LIST
87456: LIST
87457: LIST
87458: PUSH
87459: LD_VAR 0 1
87463: PUSH
87464: LD_INT 4
87466: MINUS
87467: PUSH
87468: LD_VAR 0 2
87472: PUSH
87473: LD_INT 1
87475: PUSH
87476: EMPTY
87477: LIST
87478: LIST
87479: LIST
87480: PUSH
87481: LD_VAR 0 1
87485: PUSH
87486: LD_VAR 0 2
87490: PUSH
87491: LD_INT 4
87493: MINUS
87494: PUSH
87495: LD_INT 3
87497: PUSH
87498: EMPTY
87499: LIST
87500: LIST
87501: LIST
87502: PUSH
87503: LD_VAR 0 1
87507: PUSH
87508: LD_INT 3
87510: MINUS
87511: PUSH
87512: LD_VAR 0 2
87516: PUSH
87517: LD_INT 3
87519: MINUS
87520: PUSH
87521: LD_INT 2
87523: PUSH
87524: EMPTY
87525: LIST
87526: LIST
87527: LIST
87528: PUSH
87529: EMPTY
87530: LIST
87531: LIST
87532: LIST
87533: LIST
87534: LIST
87535: ST_TO_ADDR
// end ; 4 :
87536: GO 87817
87538: LD_INT 4
87540: DOUBLE
87541: EQUAL
87542: IFTRUE 87546
87544: GO 87679
87546: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
87547: LD_ADDR_VAR 0 5
87551: PUSH
87552: LD_VAR 0 1
87556: PUSH
87557: LD_VAR 0 2
87561: PUSH
87562: LD_INT 4
87564: PLUS
87565: PUSH
87566: LD_INT 0
87568: PUSH
87569: EMPTY
87570: LIST
87571: LIST
87572: LIST
87573: PUSH
87574: LD_VAR 0 1
87578: PUSH
87579: LD_INT 3
87581: PLUS
87582: PUSH
87583: LD_VAR 0 2
87587: PUSH
87588: LD_INT 3
87590: PLUS
87591: PUSH
87592: LD_INT 5
87594: PUSH
87595: EMPTY
87596: LIST
87597: LIST
87598: LIST
87599: PUSH
87600: LD_VAR 0 1
87604: PUSH
87605: LD_INT 4
87607: PLUS
87608: PUSH
87609: LD_VAR 0 2
87613: PUSH
87614: LD_INT 4
87616: PUSH
87617: EMPTY
87618: LIST
87619: LIST
87620: LIST
87621: PUSH
87622: LD_VAR 0 1
87626: PUSH
87627: LD_VAR 0 2
87631: PUSH
87632: LD_INT 3
87634: MINUS
87635: PUSH
87636: LD_INT 3
87638: PUSH
87639: EMPTY
87640: LIST
87641: LIST
87642: LIST
87643: PUSH
87644: LD_VAR 0 1
87648: PUSH
87649: LD_INT 4
87651: MINUS
87652: PUSH
87653: LD_VAR 0 2
87657: PUSH
87658: LD_INT 4
87660: MINUS
87661: PUSH
87662: LD_INT 2
87664: PUSH
87665: EMPTY
87666: LIST
87667: LIST
87668: LIST
87669: PUSH
87670: EMPTY
87671: LIST
87672: LIST
87673: LIST
87674: LIST
87675: LIST
87676: ST_TO_ADDR
// end ; 5 :
87677: GO 87817
87679: LD_INT 5
87681: DOUBLE
87682: EQUAL
87683: IFTRUE 87687
87685: GO 87816
87687: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
87688: LD_ADDR_VAR 0 5
87692: PUSH
87693: LD_VAR 0 1
87697: PUSH
87698: LD_INT 4
87700: MINUS
87701: PUSH
87702: LD_VAR 0 2
87706: PUSH
87707: LD_INT 1
87709: PUSH
87710: EMPTY
87711: LIST
87712: LIST
87713: LIST
87714: PUSH
87715: LD_VAR 0 1
87719: PUSH
87720: LD_VAR 0 2
87724: PUSH
87725: LD_INT 4
87727: MINUS
87728: PUSH
87729: LD_INT 3
87731: PUSH
87732: EMPTY
87733: LIST
87734: LIST
87735: LIST
87736: PUSH
87737: LD_VAR 0 1
87741: PUSH
87742: LD_INT 4
87744: PLUS
87745: PUSH
87746: LD_VAR 0 2
87750: PUSH
87751: LD_INT 4
87753: PLUS
87754: PUSH
87755: LD_INT 5
87757: PUSH
87758: EMPTY
87759: LIST
87760: LIST
87761: LIST
87762: PUSH
87763: LD_VAR 0 1
87767: PUSH
87768: LD_INT 3
87770: PLUS
87771: PUSH
87772: LD_VAR 0 2
87776: PUSH
87777: LD_INT 4
87779: PUSH
87780: EMPTY
87781: LIST
87782: LIST
87783: LIST
87784: PUSH
87785: LD_VAR 0 1
87789: PUSH
87790: LD_VAR 0 2
87794: PUSH
87795: LD_INT 3
87797: PLUS
87798: PUSH
87799: LD_INT 0
87801: PUSH
87802: EMPTY
87803: LIST
87804: LIST
87805: LIST
87806: PUSH
87807: EMPTY
87808: LIST
87809: LIST
87810: LIST
87811: LIST
87812: LIST
87813: ST_TO_ADDR
// end ; end ;
87814: GO 87817
87816: POP
// result := list ;
87817: LD_ADDR_VAR 0 4
87821: PUSH
87822: LD_VAR 0 5
87826: ST_TO_ADDR
// end ;
87827: LD_VAR 0 4
87831: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
87832: LD_INT 0
87834: PPUSH
87835: PPUSH
87836: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
87837: LD_VAR 0 1
87841: NOT
87842: PUSH
87843: LD_VAR 0 2
87847: PUSH
87848: LD_INT 1
87850: PUSH
87851: LD_INT 2
87853: PUSH
87854: LD_INT 3
87856: PUSH
87857: LD_INT 4
87859: PUSH
87860: EMPTY
87861: LIST
87862: LIST
87863: LIST
87864: LIST
87865: IN
87866: NOT
87867: OR
87868: IFFALSE 87872
// exit ;
87870: GO 87964
// tmp := [ ] ;
87872: LD_ADDR_VAR 0 5
87876: PUSH
87877: EMPTY
87878: ST_TO_ADDR
// for i in units do
87879: LD_ADDR_VAR 0 4
87883: PUSH
87884: LD_VAR 0 1
87888: PUSH
87889: FOR_IN
87890: IFFALSE 87933
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
87892: LD_ADDR_VAR 0 5
87896: PUSH
87897: LD_VAR 0 5
87901: PPUSH
87902: LD_VAR 0 5
87906: PUSH
87907: LD_INT 1
87909: PLUS
87910: PPUSH
87911: LD_VAR 0 4
87915: PPUSH
87916: LD_VAR 0 2
87920: PPUSH
87921: CALL_OW 259
87925: PPUSH
87926: CALL_OW 2
87930: ST_TO_ADDR
87931: GO 87889
87933: POP
87934: POP
// if not tmp then
87935: LD_VAR 0 5
87939: NOT
87940: IFFALSE 87944
// exit ;
87942: GO 87964
// result := SortListByListDesc ( units , tmp ) ;
87944: LD_ADDR_VAR 0 3
87948: PUSH
87949: LD_VAR 0 1
87953: PPUSH
87954: LD_VAR 0 5
87958: PPUSH
87959: CALL_OW 77
87963: ST_TO_ADDR
// end ;
87964: LD_VAR 0 3
87968: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
87969: LD_INT 0
87971: PPUSH
87972: PPUSH
87973: PPUSH
// x := GetX ( building ) ;
87974: LD_ADDR_VAR 0 4
87978: PUSH
87979: LD_VAR 0 2
87983: PPUSH
87984: CALL_OW 250
87988: ST_TO_ADDR
// y := GetY ( building ) ;
87989: LD_ADDR_VAR 0 5
87993: PUSH
87994: LD_VAR 0 2
87998: PPUSH
87999: CALL_OW 251
88003: ST_TO_ADDR
// if GetTaskList ( unit ) then
88004: LD_VAR 0 1
88008: PPUSH
88009: CALL_OW 437
88013: IFFALSE 88108
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
88015: LD_STRING e
88017: PUSH
88018: LD_VAR 0 1
88022: PPUSH
88023: CALL_OW 437
88027: PUSH
88028: LD_INT 1
88030: ARRAY
88031: PUSH
88032: LD_INT 1
88034: ARRAY
88035: EQUAL
88036: PUSH
88037: LD_VAR 0 4
88041: PUSH
88042: LD_VAR 0 1
88046: PPUSH
88047: CALL_OW 437
88051: PUSH
88052: LD_INT 1
88054: ARRAY
88055: PUSH
88056: LD_INT 2
88058: ARRAY
88059: EQUAL
88060: AND
88061: PUSH
88062: LD_VAR 0 5
88066: PUSH
88067: LD_VAR 0 1
88071: PPUSH
88072: CALL_OW 437
88076: PUSH
88077: LD_INT 1
88079: ARRAY
88080: PUSH
88081: LD_INT 3
88083: ARRAY
88084: EQUAL
88085: AND
88086: IFFALSE 88098
// result := true else
88088: LD_ADDR_VAR 0 3
88092: PUSH
88093: LD_INT 1
88095: ST_TO_ADDR
88096: GO 88106
// result := false ;
88098: LD_ADDR_VAR 0 3
88102: PUSH
88103: LD_INT 0
88105: ST_TO_ADDR
// end else
88106: GO 88116
// result := false ;
88108: LD_ADDR_VAR 0 3
88112: PUSH
88113: LD_INT 0
88115: ST_TO_ADDR
// end ;
88116: LD_VAR 0 3
88120: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
88121: LD_INT 0
88123: PPUSH
88124: PPUSH
88125: PPUSH
88126: PPUSH
// if not unit or not area then
88127: LD_VAR 0 1
88131: NOT
88132: PUSH
88133: LD_VAR 0 2
88137: NOT
88138: OR
88139: IFFALSE 88143
// exit ;
88141: GO 88307
// tmp := AreaToList ( area , i ) ;
88143: LD_ADDR_VAR 0 6
88147: PUSH
88148: LD_VAR 0 2
88152: PPUSH
88153: LD_VAR 0 5
88157: PPUSH
88158: CALL_OW 517
88162: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
88163: LD_ADDR_VAR 0 5
88167: PUSH
88168: DOUBLE
88169: LD_INT 1
88171: DEC
88172: ST_TO_ADDR
88173: LD_VAR 0 6
88177: PUSH
88178: LD_INT 1
88180: ARRAY
88181: PUSH
88182: FOR_TO
88183: IFFALSE 88305
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
88185: LD_ADDR_VAR 0 7
88189: PUSH
88190: LD_VAR 0 6
88194: PUSH
88195: LD_INT 1
88197: ARRAY
88198: PUSH
88199: LD_VAR 0 5
88203: ARRAY
88204: PUSH
88205: LD_VAR 0 6
88209: PUSH
88210: LD_INT 2
88212: ARRAY
88213: PUSH
88214: LD_VAR 0 5
88218: ARRAY
88219: PUSH
88220: EMPTY
88221: LIST
88222: LIST
88223: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
88224: LD_VAR 0 7
88228: PUSH
88229: LD_INT 1
88231: ARRAY
88232: PPUSH
88233: LD_VAR 0 7
88237: PUSH
88238: LD_INT 2
88240: ARRAY
88241: PPUSH
88242: CALL_OW 428
88246: PUSH
88247: LD_INT 0
88249: EQUAL
88250: IFFALSE 88303
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
88252: LD_VAR 0 1
88256: PPUSH
88257: LD_VAR 0 7
88261: PUSH
88262: LD_INT 1
88264: ARRAY
88265: PPUSH
88266: LD_VAR 0 7
88270: PUSH
88271: LD_INT 2
88273: ARRAY
88274: PPUSH
88275: LD_VAR 0 3
88279: PPUSH
88280: CALL_OW 48
// result := IsPlaced ( unit ) ;
88284: LD_ADDR_VAR 0 4
88288: PUSH
88289: LD_VAR 0 1
88293: PPUSH
88294: CALL_OW 305
88298: ST_TO_ADDR
// exit ;
88299: POP
88300: POP
88301: GO 88307
// end ; end ;
88303: GO 88182
88305: POP
88306: POP
// end ;
88307: LD_VAR 0 4
88311: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
88312: LD_INT 0
88314: PPUSH
88315: PPUSH
88316: PPUSH
// if not side or side > 8 then
88317: LD_VAR 0 1
88321: NOT
88322: PUSH
88323: LD_VAR 0 1
88327: PUSH
88328: LD_INT 8
88330: GREATER
88331: OR
88332: IFFALSE 88336
// exit ;
88334: GO 88523
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
88336: LD_ADDR_VAR 0 4
88340: PUSH
88341: LD_INT 22
88343: PUSH
88344: LD_VAR 0 1
88348: PUSH
88349: EMPTY
88350: LIST
88351: LIST
88352: PUSH
88353: LD_INT 21
88355: PUSH
88356: LD_INT 3
88358: PUSH
88359: EMPTY
88360: LIST
88361: LIST
88362: PUSH
88363: EMPTY
88364: LIST
88365: LIST
88366: PPUSH
88367: CALL_OW 69
88371: ST_TO_ADDR
// if not tmp then
88372: LD_VAR 0 4
88376: NOT
88377: IFFALSE 88381
// exit ;
88379: GO 88523
// enable_addtolog := true ;
88381: LD_ADDR_OWVAR 81
88385: PUSH
88386: LD_INT 1
88388: ST_TO_ADDR
// AddToLog ( [ ) ;
88389: LD_STRING [
88391: PPUSH
88392: CALL_OW 561
// for i in tmp do
88396: LD_ADDR_VAR 0 3
88400: PUSH
88401: LD_VAR 0 4
88405: PUSH
88406: FOR_IN
88407: IFFALSE 88514
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
88409: LD_STRING [
88411: PUSH
88412: LD_VAR 0 3
88416: PPUSH
88417: CALL_OW 266
88421: STR
88422: PUSH
88423: LD_STRING , 
88425: STR
88426: PUSH
88427: LD_VAR 0 3
88431: PPUSH
88432: CALL_OW 250
88436: STR
88437: PUSH
88438: LD_STRING , 
88440: STR
88441: PUSH
88442: LD_VAR 0 3
88446: PPUSH
88447: CALL_OW 251
88451: STR
88452: PUSH
88453: LD_STRING , 
88455: STR
88456: PUSH
88457: LD_VAR 0 3
88461: PPUSH
88462: CALL_OW 254
88466: STR
88467: PUSH
88468: LD_STRING , 
88470: STR
88471: PUSH
88472: LD_VAR 0 3
88476: PPUSH
88477: LD_INT 1
88479: PPUSH
88480: CALL_OW 268
88484: STR
88485: PUSH
88486: LD_STRING , 
88488: STR
88489: PUSH
88490: LD_VAR 0 3
88494: PPUSH
88495: LD_INT 2
88497: PPUSH
88498: CALL_OW 268
88502: STR
88503: PUSH
88504: LD_STRING ],
88506: STR
88507: PPUSH
88508: CALL_OW 561
// end ;
88512: GO 88406
88514: POP
88515: POP
// AddToLog ( ]; ) ;
88516: LD_STRING ];
88518: PPUSH
88519: CALL_OW 561
// end ;
88523: LD_VAR 0 2
88527: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
88528: LD_INT 0
88530: PPUSH
88531: PPUSH
88532: PPUSH
88533: PPUSH
88534: PPUSH
// if not area or not rate or not max then
88535: LD_VAR 0 1
88539: NOT
88540: PUSH
88541: LD_VAR 0 2
88545: NOT
88546: OR
88547: PUSH
88548: LD_VAR 0 4
88552: NOT
88553: OR
88554: IFFALSE 88558
// exit ;
88556: GO 88750
// while 1 do
88558: LD_INT 1
88560: IFFALSE 88750
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
88562: LD_ADDR_VAR 0 9
88566: PUSH
88567: LD_VAR 0 1
88571: PPUSH
88572: LD_INT 1
88574: PPUSH
88575: CALL_OW 287
88579: PUSH
88580: LD_INT 10
88582: MUL
88583: ST_TO_ADDR
// r := rate / 10 ;
88584: LD_ADDR_VAR 0 7
88588: PUSH
88589: LD_VAR 0 2
88593: PUSH
88594: LD_INT 10
88596: DIVREAL
88597: ST_TO_ADDR
// time := 1 1$00 ;
88598: LD_ADDR_VAR 0 8
88602: PUSH
88603: LD_INT 2100
88605: ST_TO_ADDR
// if amount < min then
88606: LD_VAR 0 9
88610: PUSH
88611: LD_VAR 0 3
88615: LESS
88616: IFFALSE 88634
// r := r * 2 else
88618: LD_ADDR_VAR 0 7
88622: PUSH
88623: LD_VAR 0 7
88627: PUSH
88628: LD_INT 2
88630: MUL
88631: ST_TO_ADDR
88632: GO 88660
// if amount > max then
88634: LD_VAR 0 9
88638: PUSH
88639: LD_VAR 0 4
88643: GREATER
88644: IFFALSE 88660
// r := r / 2 ;
88646: LD_ADDR_VAR 0 7
88650: PUSH
88651: LD_VAR 0 7
88655: PUSH
88656: LD_INT 2
88658: DIVREAL
88659: ST_TO_ADDR
// time := time / r ;
88660: LD_ADDR_VAR 0 8
88664: PUSH
88665: LD_VAR 0 8
88669: PUSH
88670: LD_VAR 0 7
88674: DIVREAL
88675: ST_TO_ADDR
// if time < 0 then
88676: LD_VAR 0 8
88680: PUSH
88681: LD_INT 0
88683: LESS
88684: IFFALSE 88701
// time := time * - 1 ;
88686: LD_ADDR_VAR 0 8
88690: PUSH
88691: LD_VAR 0 8
88695: PUSH
88696: LD_INT 1
88698: NEG
88699: MUL
88700: ST_TO_ADDR
// wait ( time ) ;
88701: LD_VAR 0 8
88705: PPUSH
88706: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
88710: LD_INT 35
88712: PPUSH
88713: LD_INT 875
88715: PPUSH
88716: CALL_OW 12
88720: PPUSH
88721: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
88725: LD_INT 1
88727: PPUSH
88728: LD_INT 5
88730: PPUSH
88731: CALL_OW 12
88735: PPUSH
88736: LD_VAR 0 1
88740: PPUSH
88741: LD_INT 1
88743: PPUSH
88744: CALL_OW 55
// end ;
88748: GO 88558
// end ;
88750: LD_VAR 0 5
88754: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
88755: LD_INT 0
88757: PPUSH
88758: PPUSH
88759: PPUSH
88760: PPUSH
88761: PPUSH
88762: PPUSH
88763: PPUSH
88764: PPUSH
// if not turrets or not factories then
88765: LD_VAR 0 1
88769: NOT
88770: PUSH
88771: LD_VAR 0 2
88775: NOT
88776: OR
88777: IFFALSE 88781
// exit ;
88779: GO 89088
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
88781: LD_ADDR_VAR 0 10
88785: PUSH
88786: LD_INT 5
88788: PUSH
88789: LD_INT 6
88791: PUSH
88792: EMPTY
88793: LIST
88794: LIST
88795: PUSH
88796: LD_INT 2
88798: PUSH
88799: LD_INT 4
88801: PUSH
88802: EMPTY
88803: LIST
88804: LIST
88805: PUSH
88806: LD_INT 3
88808: PUSH
88809: LD_INT 5
88811: PUSH
88812: EMPTY
88813: LIST
88814: LIST
88815: PUSH
88816: EMPTY
88817: LIST
88818: LIST
88819: LIST
88820: PUSH
88821: LD_INT 24
88823: PUSH
88824: LD_INT 25
88826: PUSH
88827: EMPTY
88828: LIST
88829: LIST
88830: PUSH
88831: LD_INT 23
88833: PUSH
88834: LD_INT 27
88836: PUSH
88837: EMPTY
88838: LIST
88839: LIST
88840: PUSH
88841: EMPTY
88842: LIST
88843: LIST
88844: PUSH
88845: LD_INT 42
88847: PUSH
88848: LD_INT 43
88850: PUSH
88851: EMPTY
88852: LIST
88853: LIST
88854: PUSH
88855: LD_INT 44
88857: PUSH
88858: LD_INT 46
88860: PUSH
88861: EMPTY
88862: LIST
88863: LIST
88864: PUSH
88865: LD_INT 45
88867: PUSH
88868: LD_INT 47
88870: PUSH
88871: EMPTY
88872: LIST
88873: LIST
88874: PUSH
88875: EMPTY
88876: LIST
88877: LIST
88878: LIST
88879: PUSH
88880: EMPTY
88881: LIST
88882: LIST
88883: LIST
88884: ST_TO_ADDR
// result := [ ] ;
88885: LD_ADDR_VAR 0 3
88889: PUSH
88890: EMPTY
88891: ST_TO_ADDR
// for i in turrets do
88892: LD_ADDR_VAR 0 4
88896: PUSH
88897: LD_VAR 0 1
88901: PUSH
88902: FOR_IN
88903: IFFALSE 89086
// begin nat := GetNation ( i ) ;
88905: LD_ADDR_VAR 0 7
88909: PUSH
88910: LD_VAR 0 4
88914: PPUSH
88915: CALL_OW 248
88919: ST_TO_ADDR
// weapon := 0 ;
88920: LD_ADDR_VAR 0 8
88924: PUSH
88925: LD_INT 0
88927: ST_TO_ADDR
// if not nat then
88928: LD_VAR 0 7
88932: NOT
88933: IFFALSE 88937
// continue ;
88935: GO 88902
// for j in list [ nat ] do
88937: LD_ADDR_VAR 0 5
88941: PUSH
88942: LD_VAR 0 10
88946: PUSH
88947: LD_VAR 0 7
88951: ARRAY
88952: PUSH
88953: FOR_IN
88954: IFFALSE 88995
// if GetBWeapon ( i ) = j [ 1 ] then
88956: LD_VAR 0 4
88960: PPUSH
88961: CALL_OW 269
88965: PUSH
88966: LD_VAR 0 5
88970: PUSH
88971: LD_INT 1
88973: ARRAY
88974: EQUAL
88975: IFFALSE 88993
// begin weapon := j [ 2 ] ;
88977: LD_ADDR_VAR 0 8
88981: PUSH
88982: LD_VAR 0 5
88986: PUSH
88987: LD_INT 2
88989: ARRAY
88990: ST_TO_ADDR
// break ;
88991: GO 88995
// end ;
88993: GO 88953
88995: POP
88996: POP
// if not weapon then
88997: LD_VAR 0 8
89001: NOT
89002: IFFALSE 89006
// continue ;
89004: GO 88902
// for k in factories do
89006: LD_ADDR_VAR 0 6
89010: PUSH
89011: LD_VAR 0 2
89015: PUSH
89016: FOR_IN
89017: IFFALSE 89082
// begin weapons := AvailableWeaponList ( k ) ;
89019: LD_ADDR_VAR 0 9
89023: PUSH
89024: LD_VAR 0 6
89028: PPUSH
89029: CALL_OW 478
89033: ST_TO_ADDR
// if not weapons then
89034: LD_VAR 0 9
89038: NOT
89039: IFFALSE 89043
// continue ;
89041: GO 89016
// if weapon in weapons then
89043: LD_VAR 0 8
89047: PUSH
89048: LD_VAR 0 9
89052: IN
89053: IFFALSE 89080
// begin result := [ i , weapon ] ;
89055: LD_ADDR_VAR 0 3
89059: PUSH
89060: LD_VAR 0 4
89064: PUSH
89065: LD_VAR 0 8
89069: PUSH
89070: EMPTY
89071: LIST
89072: LIST
89073: ST_TO_ADDR
// exit ;
89074: POP
89075: POP
89076: POP
89077: POP
89078: GO 89088
// end ; end ;
89080: GO 89016
89082: POP
89083: POP
// end ;
89084: GO 88902
89086: POP
89087: POP
// end ;
89088: LD_VAR 0 3
89092: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
89093: LD_INT 0
89095: PPUSH
// if not side or side > 8 then
89096: LD_VAR 0 3
89100: NOT
89101: PUSH
89102: LD_VAR 0 3
89106: PUSH
89107: LD_INT 8
89109: GREATER
89110: OR
89111: IFFALSE 89115
// exit ;
89113: GO 89174
// if not range then
89115: LD_VAR 0 4
89119: NOT
89120: IFFALSE 89131
// range := - 12 ;
89122: LD_ADDR_VAR 0 4
89126: PUSH
89127: LD_INT 12
89129: NEG
89130: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
89131: LD_VAR 0 1
89135: PPUSH
89136: LD_VAR 0 2
89140: PPUSH
89141: LD_VAR 0 3
89145: PPUSH
89146: LD_VAR 0 4
89150: PPUSH
89151: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
89155: LD_VAR 0 1
89159: PPUSH
89160: LD_VAR 0 2
89164: PPUSH
89165: LD_VAR 0 3
89169: PPUSH
89170: CALL_OW 331
// end ;
89174: LD_VAR 0 5
89178: RET
// export function Video ( mode ) ; begin
89179: LD_INT 0
89181: PPUSH
// ingame_video = mode ;
89182: LD_ADDR_OWVAR 52
89186: PUSH
89187: LD_VAR 0 1
89191: ST_TO_ADDR
// interface_hidden = mode ;
89192: LD_ADDR_OWVAR 54
89196: PUSH
89197: LD_VAR 0 1
89201: ST_TO_ADDR
// end ;
89202: LD_VAR 0 2
89206: RET
// export function Join ( array , element ) ; begin
89207: LD_INT 0
89209: PPUSH
// result := array ^ element ;
89210: LD_ADDR_VAR 0 3
89214: PUSH
89215: LD_VAR 0 1
89219: PUSH
89220: LD_VAR 0 2
89224: ADD
89225: ST_TO_ADDR
// end ;
89226: LD_VAR 0 3
89230: RET
// export function JoinUnion ( array , element ) ; begin
89231: LD_INT 0
89233: PPUSH
// result := array union element ;
89234: LD_ADDR_VAR 0 3
89238: PUSH
89239: LD_VAR 0 1
89243: PUSH
89244: LD_VAR 0 2
89248: UNION
89249: ST_TO_ADDR
// end ;
89250: LD_VAR 0 3
89254: RET
// export function GetBehemoths ( side ) ; begin
89255: LD_INT 0
89257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
89258: LD_ADDR_VAR 0 2
89262: PUSH
89263: LD_INT 22
89265: PUSH
89266: LD_VAR 0 1
89270: PUSH
89271: EMPTY
89272: LIST
89273: LIST
89274: PUSH
89275: LD_INT 31
89277: PUSH
89278: LD_INT 25
89280: PUSH
89281: EMPTY
89282: LIST
89283: LIST
89284: PUSH
89285: EMPTY
89286: LIST
89287: LIST
89288: PPUSH
89289: CALL_OW 69
89293: ST_TO_ADDR
// end ;
89294: LD_VAR 0 2
89298: RET
// export function Shuffle ( array ) ; var i , index ; begin
89299: LD_INT 0
89301: PPUSH
89302: PPUSH
89303: PPUSH
// result := [ ] ;
89304: LD_ADDR_VAR 0 2
89308: PUSH
89309: EMPTY
89310: ST_TO_ADDR
// if not array then
89311: LD_VAR 0 1
89315: NOT
89316: IFFALSE 89320
// exit ;
89318: GO 89419
// Randomize ;
89320: CALL_OW 10
// for i = array downto 1 do
89324: LD_ADDR_VAR 0 3
89328: PUSH
89329: DOUBLE
89330: LD_VAR 0 1
89334: INC
89335: ST_TO_ADDR
89336: LD_INT 1
89338: PUSH
89339: FOR_DOWNTO
89340: IFFALSE 89417
// begin index := rand ( 1 , array ) ;
89342: LD_ADDR_VAR 0 4
89346: PUSH
89347: LD_INT 1
89349: PPUSH
89350: LD_VAR 0 1
89354: PPUSH
89355: CALL_OW 12
89359: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
89360: LD_ADDR_VAR 0 2
89364: PUSH
89365: LD_VAR 0 2
89369: PPUSH
89370: LD_VAR 0 2
89374: PUSH
89375: LD_INT 1
89377: PLUS
89378: PPUSH
89379: LD_VAR 0 1
89383: PUSH
89384: LD_VAR 0 4
89388: ARRAY
89389: PPUSH
89390: CALL_OW 2
89394: ST_TO_ADDR
// array := Delete ( array , index ) ;
89395: LD_ADDR_VAR 0 1
89399: PUSH
89400: LD_VAR 0 1
89404: PPUSH
89405: LD_VAR 0 4
89409: PPUSH
89410: CALL_OW 3
89414: ST_TO_ADDR
// end ;
89415: GO 89339
89417: POP
89418: POP
// end ;
89419: LD_VAR 0 2
89423: RET
// export function GetBaseMaterials ( base ) ; begin
89424: LD_INT 0
89426: PPUSH
// result := [ 0 , 0 , 0 ] ;
89427: LD_ADDR_VAR 0 2
89431: PUSH
89432: LD_INT 0
89434: PUSH
89435: LD_INT 0
89437: PUSH
89438: LD_INT 0
89440: PUSH
89441: EMPTY
89442: LIST
89443: LIST
89444: LIST
89445: ST_TO_ADDR
// if not base then
89446: LD_VAR 0 1
89450: NOT
89451: IFFALSE 89455
// exit ;
89453: GO 89504
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
89455: LD_ADDR_VAR 0 2
89459: PUSH
89460: LD_VAR 0 1
89464: PPUSH
89465: LD_INT 1
89467: PPUSH
89468: CALL_OW 275
89472: PUSH
89473: LD_VAR 0 1
89477: PPUSH
89478: LD_INT 2
89480: PPUSH
89481: CALL_OW 275
89485: PUSH
89486: LD_VAR 0 1
89490: PPUSH
89491: LD_INT 3
89493: PPUSH
89494: CALL_OW 275
89498: PUSH
89499: EMPTY
89500: LIST
89501: LIST
89502: LIST
89503: ST_TO_ADDR
// end ; end_of_file
89504: LD_VAR 0 2
89508: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
89509: GO 89511
89511: DISABLE
// begin ru_radar := 98 ;
89512: LD_ADDR_EXP 92
89516: PUSH
89517: LD_INT 98
89519: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
89520: LD_ADDR_EXP 93
89524: PUSH
89525: LD_INT 89
89527: ST_TO_ADDR
// us_hack := 99 ;
89528: LD_ADDR_EXP 94
89532: PUSH
89533: LD_INT 99
89535: ST_TO_ADDR
// us_artillery := 97 ;
89536: LD_ADDR_EXP 95
89540: PUSH
89541: LD_INT 97
89543: ST_TO_ADDR
// ar_bio_bomb := 91 ;
89544: LD_ADDR_EXP 96
89548: PUSH
89549: LD_INT 91
89551: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
89552: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
89553: LD_INT 0
89555: PPUSH
89556: PPUSH
89557: PPUSH
89558: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
89559: LD_VAR 0 1
89563: PPUSH
89564: CALL_OW 264
89568: PUSH
89569: LD_EXP 96
89573: EQUAL
89574: IFFALSE 89646
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89576: LD_INT 68
89578: PPUSH
89579: LD_VAR 0 1
89583: PPUSH
89584: CALL_OW 255
89588: PPUSH
89589: CALL_OW 321
89593: PUSH
89594: LD_INT 2
89596: EQUAL
89597: IFFALSE 89609
// eff := 70 else
89599: LD_ADDR_VAR 0 6
89603: PUSH
89604: LD_INT 70
89606: ST_TO_ADDR
89607: GO 89617
// eff := 30 ;
89609: LD_ADDR_VAR 0 6
89613: PUSH
89614: LD_INT 30
89616: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89617: LD_VAR 0 1
89621: PPUSH
89622: CALL_OW 250
89626: PPUSH
89627: LD_VAR 0 1
89631: PPUSH
89632: CALL_OW 251
89636: PPUSH
89637: LD_VAR 0 6
89641: PPUSH
89642: CALL_OW 495
// end ; end ;
89646: LD_VAR 0 4
89650: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
89651: LD_INT 0
89653: PPUSH
89654: PPUSH
89655: PPUSH
89656: PPUSH
89657: PPUSH
89658: PPUSH
// if cmd = 124 then
89659: LD_VAR 0 1
89663: PUSH
89664: LD_INT 124
89666: EQUAL
89667: IFFALSE 89873
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
89669: LD_ADDR_VAR 0 5
89673: PUSH
89674: LD_INT 2
89676: PUSH
89677: LD_INT 34
89679: PUSH
89680: LD_INT 53
89682: PUSH
89683: EMPTY
89684: LIST
89685: LIST
89686: PUSH
89687: LD_INT 34
89689: PUSH
89690: LD_INT 14
89692: PUSH
89693: EMPTY
89694: LIST
89695: LIST
89696: PUSH
89697: EMPTY
89698: LIST
89699: LIST
89700: LIST
89701: PPUSH
89702: CALL_OW 69
89706: ST_TO_ADDR
// if not tmp then
89707: LD_VAR 0 5
89711: NOT
89712: IFFALSE 89716
// exit ;
89714: GO 89873
// for i in tmp do
89716: LD_ADDR_VAR 0 3
89720: PUSH
89721: LD_VAR 0 5
89725: PUSH
89726: FOR_IN
89727: IFFALSE 89871
// begin taskList := GetTaskList ( i ) ;
89729: LD_ADDR_VAR 0 6
89733: PUSH
89734: LD_VAR 0 3
89738: PPUSH
89739: CALL_OW 437
89743: ST_TO_ADDR
// if not taskList then
89744: LD_VAR 0 6
89748: NOT
89749: IFFALSE 89753
// continue ;
89751: GO 89726
// for j = 1 to taskList do
89753: LD_ADDR_VAR 0 4
89757: PUSH
89758: DOUBLE
89759: LD_INT 1
89761: DEC
89762: ST_TO_ADDR
89763: LD_VAR 0 6
89767: PUSH
89768: FOR_TO
89769: IFFALSE 89867
// if taskList [ j ] [ 1 ] = | then
89771: LD_VAR 0 6
89775: PUSH
89776: LD_VAR 0 4
89780: ARRAY
89781: PUSH
89782: LD_INT 1
89784: ARRAY
89785: PUSH
89786: LD_STRING |
89788: EQUAL
89789: IFFALSE 89865
// begin _taskList := Delete ( taskList , 1 ) ;
89791: LD_ADDR_VAR 0 7
89795: PUSH
89796: LD_VAR 0 6
89800: PPUSH
89801: LD_INT 1
89803: PPUSH
89804: CALL_OW 3
89808: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
89809: LD_VAR 0 3
89813: PPUSH
89814: LD_VAR 0 7
89818: PPUSH
89819: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
89823: LD_VAR 0 3
89827: PPUSH
89828: LD_VAR 0 6
89832: PUSH
89833: LD_VAR 0 4
89837: ARRAY
89838: PUSH
89839: LD_INT 2
89841: ARRAY
89842: PPUSH
89843: LD_VAR 0 6
89847: PUSH
89848: LD_VAR 0 4
89852: ARRAY
89853: PUSH
89854: LD_INT 3
89856: ARRAY
89857: PPUSH
89858: LD_INT 8
89860: PPUSH
89861: CALL 89878 0 4
// end ;
89865: GO 89768
89867: POP
89868: POP
// end ;
89869: GO 89726
89871: POP
89872: POP
// end ; end ;
89873: LD_VAR 0 2
89877: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89878: LD_INT 0
89880: PPUSH
89881: PPUSH
89882: PPUSH
89883: PPUSH
89884: PPUSH
89885: PPUSH
89886: PPUSH
89887: PPUSH
89888: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
89889: LD_VAR 0 1
89893: NOT
89894: PUSH
89895: LD_VAR 0 2
89899: PPUSH
89900: LD_VAR 0 3
89904: PPUSH
89905: CALL_OW 488
89909: NOT
89910: OR
89911: PUSH
89912: LD_VAR 0 4
89916: NOT
89917: OR
89918: IFFALSE 89922
// exit ;
89920: GO 90262
// list := [ ] ;
89922: LD_ADDR_VAR 0 13
89926: PUSH
89927: EMPTY
89928: ST_TO_ADDR
// if x - r < 0 then
89929: LD_VAR 0 2
89933: PUSH
89934: LD_VAR 0 4
89938: MINUS
89939: PUSH
89940: LD_INT 0
89942: LESS
89943: IFFALSE 89955
// min_x := 0 else
89945: LD_ADDR_VAR 0 7
89949: PUSH
89950: LD_INT 0
89952: ST_TO_ADDR
89953: GO 89971
// min_x := x - r ;
89955: LD_ADDR_VAR 0 7
89959: PUSH
89960: LD_VAR 0 2
89964: PUSH
89965: LD_VAR 0 4
89969: MINUS
89970: ST_TO_ADDR
// if y - r < 0 then
89971: LD_VAR 0 3
89975: PUSH
89976: LD_VAR 0 4
89980: MINUS
89981: PUSH
89982: LD_INT 0
89984: LESS
89985: IFFALSE 89997
// min_y := 0 else
89987: LD_ADDR_VAR 0 8
89991: PUSH
89992: LD_INT 0
89994: ST_TO_ADDR
89995: GO 90013
// min_y := y - r ;
89997: LD_ADDR_VAR 0 8
90001: PUSH
90002: LD_VAR 0 3
90006: PUSH
90007: LD_VAR 0 4
90011: MINUS
90012: ST_TO_ADDR
// max_x := x + r ;
90013: LD_ADDR_VAR 0 9
90017: PUSH
90018: LD_VAR 0 2
90022: PUSH
90023: LD_VAR 0 4
90027: PLUS
90028: ST_TO_ADDR
// max_y := y + r ;
90029: LD_ADDR_VAR 0 10
90033: PUSH
90034: LD_VAR 0 3
90038: PUSH
90039: LD_VAR 0 4
90043: PLUS
90044: ST_TO_ADDR
// for _x = min_x to max_x do
90045: LD_ADDR_VAR 0 11
90049: PUSH
90050: DOUBLE
90051: LD_VAR 0 7
90055: DEC
90056: ST_TO_ADDR
90057: LD_VAR 0 9
90061: PUSH
90062: FOR_TO
90063: IFFALSE 90180
// for _y = min_y to max_y do
90065: LD_ADDR_VAR 0 12
90069: PUSH
90070: DOUBLE
90071: LD_VAR 0 8
90075: DEC
90076: ST_TO_ADDR
90077: LD_VAR 0 10
90081: PUSH
90082: FOR_TO
90083: IFFALSE 90176
// begin if not ValidHex ( _x , _y ) then
90085: LD_VAR 0 11
90089: PPUSH
90090: LD_VAR 0 12
90094: PPUSH
90095: CALL_OW 488
90099: NOT
90100: IFFALSE 90104
// continue ;
90102: GO 90082
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90104: LD_VAR 0 11
90108: PPUSH
90109: LD_VAR 0 12
90113: PPUSH
90114: CALL_OW 351
90118: PUSH
90119: LD_VAR 0 11
90123: PPUSH
90124: LD_VAR 0 12
90128: PPUSH
90129: CALL_OW 554
90133: AND
90134: IFFALSE 90174
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90136: LD_ADDR_VAR 0 13
90140: PUSH
90141: LD_VAR 0 13
90145: PPUSH
90146: LD_VAR 0 13
90150: PUSH
90151: LD_INT 1
90153: PLUS
90154: PPUSH
90155: LD_VAR 0 11
90159: PUSH
90160: LD_VAR 0 12
90164: PUSH
90165: EMPTY
90166: LIST
90167: LIST
90168: PPUSH
90169: CALL_OW 2
90173: ST_TO_ADDR
// end ;
90174: GO 90082
90176: POP
90177: POP
90178: GO 90062
90180: POP
90181: POP
// if not list then
90182: LD_VAR 0 13
90186: NOT
90187: IFFALSE 90191
// exit ;
90189: GO 90262
// for i in list do
90191: LD_ADDR_VAR 0 6
90195: PUSH
90196: LD_VAR 0 13
90200: PUSH
90201: FOR_IN
90202: IFFALSE 90260
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
90204: LD_VAR 0 1
90208: PPUSH
90209: LD_STRING M
90211: PUSH
90212: LD_VAR 0 6
90216: PUSH
90217: LD_INT 1
90219: ARRAY
90220: PUSH
90221: LD_VAR 0 6
90225: PUSH
90226: LD_INT 2
90228: ARRAY
90229: PUSH
90230: LD_INT 0
90232: PUSH
90233: LD_INT 0
90235: PUSH
90236: LD_INT 0
90238: PUSH
90239: LD_INT 0
90241: PUSH
90242: EMPTY
90243: LIST
90244: LIST
90245: LIST
90246: LIST
90247: LIST
90248: LIST
90249: LIST
90250: PUSH
90251: EMPTY
90252: LIST
90253: PPUSH
90254: CALL_OW 447
90258: GO 90201
90260: POP
90261: POP
// end ;
90262: LD_VAR 0 5
90266: RET
