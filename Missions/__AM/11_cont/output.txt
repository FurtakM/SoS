// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 17382 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 82447 0 9
// PrepareAmerican ;
  77: CALL 562 0 0
// PrepareArabian ;
  81: CALL 2234 0 0
// MC_Start ( ) ;
  85: CALL 19494 0 0
// Action ;
  89: CALL 8072 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected , am_veh_consturcted ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 130 130$00 , 120 120$00 , 115 115$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 273000
 219: PUSH
 220: LD_INT 252000
 222: PUSH
 223: LD_INT 241500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// am_veh_consturcted := false ;
 287: LD_ADDR_EXP 20
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// end ;
 295: LD_VAR 0 1
 299: RET
// export function CustomInitMacro ; var i ; begin
 300: LD_INT 0
 302: PPUSH
 303: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 304: LD_ADDR_EXP 74
 308: PUSH
 309: LD_INT 20
 311: PUSH
 312: LD_INT 21
 314: PUSH
 315: LD_INT 22
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 323: LD_ADDR_EXP 75
 327: PUSH
 328: LD_INT 28
 330: PUSH
 331: LD_INT 24
 333: PUSH
 334: LD_INT 26
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield1_left ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 4
 347: PUSH
 348: LD_INT 6
 350: PUSH
 351: LD_INT 9
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_OWVAR 67
 363: ARRAY
 364: PPUSH
 365: LD_INT 3
 367: PPUSH
 368: CALL 40711 0 3
// MC_SetMinesField ( 2 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield2_left ) ;
 372: LD_INT 2
 374: PPUSH
 375: LD_INT 4
 377: PUSH
 378: LD_INT 6
 380: PUSH
 381: LD_INT 9
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_OWVAR 67
 393: ARRAY
 394: PPUSH
 395: LD_INT 2
 397: PPUSH
 398: CALL 40711 0 3
// MC_SetMinesField ( 3 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield3_left ) ;
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 4
 407: PUSH
 408: LD_INT 6
 410: PUSH
 411: LD_INT 9
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: CALL 40711 0 3
// for i = 1 to mc_bases do
 432: LD_ADDR_VAR 0 2
 436: PUSH
 437: DOUBLE
 438: LD_INT 1
 440: DEC
 441: ST_TO_ADDR
 442: LD_EXP 50
 446: PUSH
 447: FOR_TO
 448: IFFALSE 472
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 450: LD_VAR 0 2
 454: PPUSH
 455: LD_EXP 43
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PPUSH
 466: CALL 41137 0 2
 470: GO 447
 472: POP
 473: POP
// end ;
 474: LD_VAR 0 1
 478: RET
// function Debuger ; var i ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
// if not debug then
 483: LD_EXP 1
 487: NOT
 488: IFFALSE 492
// exit ;
 490: GO 528
// game_speed := 5 ;
 492: LD_ADDR_OWVAR 65
 496: PUSH
 497: LD_INT 5
 499: ST_TO_ADDR
// uc_side := 1 ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// uc_nation := 1 ;
 508: LD_ADDR_OWVAR 21
 512: PUSH
 513: LD_INT 1
 515: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 516: LD_EXP 36
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 235
// end ;
 528: LD_VAR 0 1
 532: RET
// every 0 0$1 trigger IsDead ( ar_dep_n ) and IsOk ( ar_dep_w ) do
 533: LD_INT 94
 535: PPUSH
 536: CALL_OW 301
 540: PUSH
 541: LD_INT 45
 543: PPUSH
 544: CALL_OW 302
 548: AND
 549: IFFALSE 561
 551: GO 553
 553: DISABLE
// SetAchievement ( ACH_EAST ) ; end_of_file
 554: LD_STRING ACH_EAST
 556: PPUSH
 557: CALL_OW 543
 561: END
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 562: LD_INT 0
 564: PPUSH
 565: PPUSH
 566: PPUSH
 567: PPUSH
 568: PPUSH
 569: PPUSH
 570: PPUSH
 571: PPUSH
// uc_side := 4 ;
 572: LD_ADDR_OWVAR 20
 576: PUSH
 577: LD_INT 4
 579: ST_TO_ADDR
// uc_nation := 1 ;
 580: LD_ADDR_OWVAR 21
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 588: LD_ADDR_EXP 30
 592: PUSH
 593: LD_STRING Powell
 595: PPUSH
 596: LD_INT 0
 598: PPUSH
 599: LD_STRING 
 601: PPUSH
 602: CALL 47421 0 3
 606: ST_TO_ADDR
// uc_side := 1 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 615: LD_ADDR_EXP 21
 619: PUSH
 620: LD_STRING JMM
 622: PPUSH
 623: LD_EXP 1
 627: NOT
 628: PPUSH
 629: LD_EXP 4
 633: PPUSH
 634: CALL 47421 0 3
 638: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 639: LD_EXP 21
 643: PPUSH
 644: CALL_OW 257
 648: PUSH
 649: LD_INT 4
 651: GREATER
 652: IFFALSE 666
// SetClass ( JMM , 1 ) ;
 654: LD_EXP 21
 658: PPUSH
 659: LD_INT 1
 661: PPUSH
 662: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 666: LD_ADDR_EXP 22
 670: PUSH
 671: LD_STRING Lisa
 673: PPUSH
 674: LD_EXP 1
 678: NOT
 679: PPUSH
 680: LD_EXP 4
 684: PPUSH
 685: CALL 47421 0 3
 689: ST_TO_ADDR
// if not Lisa then
 690: LD_EXP 22
 694: NOT
 695: IFFALSE 710
// Lisa := CreateCharacter ( 10_Lisa ) ;
 697: LD_ADDR_EXP 22
 701: PUSH
 702: LD_STRING 10_Lisa
 704: PPUSH
 705: CALL_OW 34
 709: ST_TO_ADDR
// if not Lisa then
 710: LD_EXP 22
 714: NOT
 715: IFFALSE 730
// Lisa := CreateCharacter ( 09_Lisa ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING 09_Lisa
 724: PPUSH
 725: CALL_OW 34
 729: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 730: LD_ADDR_EXP 31
 734: PUSH
 735: LD_STRING Cornel
 737: PPUSH
 738: LD_EXP 1
 742: NOT
 743: PPUSH
 744: LD_EXP 4
 748: PPUSH
 749: CALL 47421 0 3
 753: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 754: LD_ADDR_EXP 23
 758: PUSH
 759: LD_STRING Donaldson
 761: PPUSH
 762: LD_EXP 1
 766: NOT
 767: PPUSH
 768: LD_EXP 4
 772: PPUSH
 773: CALL 47421 0 3
 777: ST_TO_ADDR
// if not Donaldson then
 778: LD_EXP 23
 782: NOT
 783: IFFALSE 798
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 785: LD_ADDR_EXP 23
 789: PUSH
 790: LD_STRING 10_Donaldson
 792: PPUSH
 793: CALL_OW 34
 797: ST_TO_ADDR
// if not Donaldson then
 798: LD_EXP 23
 802: NOT
 803: IFFALSE 818
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 805: LD_ADDR_EXP 23
 809: PUSH
 810: LD_STRING 09_Donaldson
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 24
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_EXP 1
 830: NOT
 831: PPUSH
 832: LD_EXP 4
 836: PPUSH
 837: CALL 47421 0 3
 841: ST_TO_ADDR
// if not Bobby then
 842: LD_EXP 24
 846: NOT
 847: IFFALSE 862
// Bobby := CreateCharacter ( 10_Bobby ) ;
 849: LD_ADDR_EXP 24
 853: PUSH
 854: LD_STRING 10_Bobby
 856: PPUSH
 857: CALL_OW 34
 861: ST_TO_ADDR
// if not Bobby then
 862: LD_EXP 24
 866: NOT
 867: IFFALSE 882
// Bobby := CreateCharacter ( 09_Bobby ) ;
 869: LD_ADDR_EXP 24
 873: PUSH
 874: LD_STRING 09_Bobby
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 882: LD_ADDR_EXP 25
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_EXP 1
 894: NOT
 895: PPUSH
 896: LD_EXP 4
 900: PPUSH
 901: CALL 47421 0 3
 905: ST_TO_ADDR
// if not Cyrus then
 906: LD_EXP 25
 910: NOT
 911: IFFALSE 926
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 913: LD_ADDR_EXP 25
 917: PUSH
 918: LD_STRING 10_Cyrus
 920: PPUSH
 921: CALL_OW 34
 925: ST_TO_ADDR
// if not Cyrus then
 926: LD_EXP 25
 930: NOT
 931: IFFALSE 946
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_STRING 09_Cyrus
 940: PPUSH
 941: CALL_OW 34
 945: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 946: LD_ADDR_EXP 26
 950: PUSH
 951: LD_STRING Denis
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_EXP 4
 964: PPUSH
 965: CALL 47421 0 3
 969: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 970: LD_ADDR_EXP 27
 974: PUSH
 975: LD_STRING Brown
 977: PPUSH
 978: LD_EXP 1
 982: NOT
 983: PPUSH
 984: LD_EXP 4
 988: PPUSH
 989: CALL 47421 0 3
 993: ST_TO_ADDR
// if not Brown then
 994: LD_EXP 27
 998: NOT
 999: IFFALSE 1014
// Brown := CreateCharacter ( 10_Brown ) ;
1001: LD_ADDR_EXP 27
1005: PUSH
1006: LD_STRING 10_Brown
1008: PPUSH
1009: CALL_OW 34
1013: ST_TO_ADDR
// if not Brown then
1014: LD_EXP 27
1018: NOT
1019: IFFALSE 1034
// Brown := CreateCharacter ( 08_Brown ) ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_STRING 08_Brown
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
1034: LD_ADDR_EXP 28
1038: PUSH
1039: LD_STRING Gladstone
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 4
1052: PPUSH
1053: CALL 47421 0 3
1057: ST_TO_ADDR
// if not Gladstone then
1058: LD_EXP 28
1062: NOT
1063: IFFALSE 1078
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1065: LD_ADDR_EXP 28
1069: PUSH
1070: LD_STRING 10_Gladstone
1072: PPUSH
1073: CALL_OW 34
1077: ST_TO_ADDR
// if not Gladstone then
1078: LD_EXP 28
1082: NOT
1083: IFFALSE 1098
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1085: LD_ADDR_EXP 28
1089: PUSH
1090: LD_STRING 08_Gladstone
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1098: LD_ADDR_EXP 29
1102: PUSH
1103: LD_STRING Houten
1105: PPUSH
1106: LD_EXP 1
1110: NOT
1111: PPUSH
1112: LD_EXP 4
1116: PPUSH
1117: CALL 47421 0 3
1121: ST_TO_ADDR
// if not Houten then
1122: LD_EXP 29
1126: NOT
1127: IFFALSE 1142
// Houten := CreateCharacter ( 10_Houten ) ;
1129: LD_ADDR_EXP 29
1133: PUSH
1134: LD_STRING 10_Houten
1136: PPUSH
1137: CALL_OW 34
1141: ST_TO_ADDR
// if not Houten then
1142: LD_EXP 29
1146: NOT
1147: IFFALSE 1162
// Houten := CreateCharacter ( 09_Houten ) ;
1149: LD_ADDR_EXP 29
1153: PUSH
1154: LD_STRING 09_Houten
1156: PPUSH
1157: CALL_OW 34
1161: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1162: LD_ADDR_EXP 31
1166: PUSH
1167: LD_STRING Cornell
1169: PPUSH
1170: LD_EXP 1
1174: NOT
1175: PPUSH
1176: LD_EXP 4
1180: PPUSH
1181: CALL 47421 0 3
1185: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 32
1190: PUSH
1191: LD_STRING Gary
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 47421 0 3
1209: ST_TO_ADDR
// if not Gary then
1210: LD_EXP 32
1214: NOT
1215: IFFALSE 1230
// Gary := CreateCharacter ( 10_Gary ) ;
1217: LD_ADDR_EXP 32
1221: PUSH
1222: LD_STRING 10_Gary
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 33
1234: PUSH
1235: LD_STRING Frank
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 47421 0 3
1253: ST_TO_ADDR
// if not Frank then
1254: LD_EXP 33
1258: NOT
1259: IFFALSE 1274
// Frank := CreateCharacter ( 08_Frank ) ;
1261: LD_ADDR_EXP 33
1265: PUSH
1266: LD_STRING 08_Frank
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1274: LD_ADDR_EXP 34
1278: PUSH
1279: LD_STRING Kikuchi
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 4
1292: PPUSH
1293: CALL 47421 0 3
1297: ST_TO_ADDR
// if not Kikuchi then
1298: LD_EXP 34
1302: NOT
1303: IFFALSE 1318
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1305: LD_ADDR_EXP 34
1309: PUSH
1310: LD_STRING 08_Kikuchi
1312: PPUSH
1313: CALL_OW 34
1317: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1318: LD_ADDR_VAR 0 5
1322: PUSH
1323: LD_EXP 22
1327: PUSH
1328: LD_EXP 23
1332: PUSH
1333: LD_EXP 24
1337: PUSH
1338: LD_EXP 25
1342: PUSH
1343: LD_EXP 26
1347: PUSH
1348: LD_EXP 27
1352: PUSH
1353: LD_EXP 28
1357: PUSH
1358: LD_EXP 29
1362: PUSH
1363: LD_EXP 31
1367: PUSH
1368: LD_EXP 32
1372: PUSH
1373: LD_EXP 33
1377: PUSH
1378: LD_EXP 34
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// tmp := tmp diff 0 ;
1397: LD_ADDR_VAR 0 5
1401: PUSH
1402: LD_VAR 0 5
1406: PUSH
1407: LD_INT 0
1409: DIFF
1410: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1411: LD_ADDR_VAR 0 5
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_STRING 10_lock
1423: PPUSH
1424: CALL_OW 31
1428: UNION
1429: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1430: LD_ADDR_VAR 0 5
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: LD_STRING 10c_lock
1442: PPUSH
1443: CALL_OW 31
1447: UNION
1448: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1449: LD_STRING 10_lock
1451: PPUSH
1452: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1456: LD_STRING 10c_lock
1458: PPUSH
1459: CALL_OW 40
// for i in tmp do
1463: LD_ADDR_VAR 0 2
1467: PUSH
1468: LD_VAR 0 5
1472: PUSH
1473: FOR_IN
1474: IFFALSE 1512
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1476: LD_VAR 0 2
1480: PPUSH
1481: CALL_OW 257
1485: PUSH
1486: LD_INT 8
1488: PUSH
1489: LD_INT 2
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: IN
1496: IFFALSE 1510
// SetClass ( i , class_soldier ) ;
1498: LD_VAR 0 2
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: CALL_OW 336
1510: GO 1473
1512: POP
1513: POP
// if tmp < 12 then
1514: LD_VAR 0 5
1518: PUSH
1519: LD_INT 12
1521: LESS
1522: IFFALSE 1616
// begin k := 16 - tmp ;
1524: LD_ADDR_VAR 0 3
1528: PUSH
1529: LD_INT 16
1531: PUSH
1532: LD_VAR 0 5
1536: MINUS
1537: ST_TO_ADDR
// for i = 1 to k do
1538: LD_ADDR_VAR 0 2
1542: PUSH
1543: DOUBLE
1544: LD_INT 1
1546: DEC
1547: ST_TO_ADDR
1548: LD_VAR 0 3
1552: PUSH
1553: FOR_TO
1554: IFFALSE 1614
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1556: LD_INT 0
1558: PPUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 4
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_INT 4
1582: PPUSH
1583: CALL_OW 12
1587: ARRAY
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1596: LD_ADDR_VAR 0 5
1600: PUSH
1601: LD_VAR 0 5
1605: PUSH
1606: CALL_OW 44
1610: ADD
1611: ST_TO_ADDR
// end ;
1612: GO 1553
1614: POP
1615: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1616: LD_ADDR_EXP 19
1620: PUSH
1621: LD_STRING 1
1623: PPUSH
1624: LD_INT 12
1626: PPUSH
1627: LD_INT 12
1629: PPUSH
1630: LD_INT -5
1632: PUSH
1633: LD_EXP 21
1637: PUSH
1638: LD_INT -2
1640: PUSH
1641: LD_INT -3
1643: PUSH
1644: LD_INT -5
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 5
1658: ADD
1659: PUSH
1660: LD_INT -6
1662: PUSH
1663: LD_INT -4
1665: PUSH
1666: LD_EXP 30
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: ADD
1676: PPUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 4
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 3
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 5
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 5
1717: PUSH
1718: LD_INT 0
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 42
1739: ST_TO_ADDR
// others := tmp diff selected ;
1740: LD_ADDR_VAR 0 8
1744: PUSH
1745: LD_VAR 0 5
1749: PUSH
1750: LD_EXP 19
1754: DIFF
1755: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1756: LD_ADDR_VAR 0 8
1760: PUSH
1761: LD_VAR 0 8
1765: PUSH
1766: LD_EXP 22
1770: PUSH
1771: LD_EXP 23
1775: PUSH
1776: LD_EXP 24
1780: PUSH
1781: LD_EXP 25
1785: PUSH
1786: LD_EXP 26
1790: PUSH
1791: LD_EXP 27
1795: PUSH
1796: LD_EXP 28
1800: PUSH
1801: LD_EXP 29
1805: PUSH
1806: LD_EXP 31
1810: PUSH
1811: LD_EXP 32
1815: PUSH
1816: LD_EXP 33
1820: PUSH
1821: LD_EXP 34
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: DIFF
1840: ST_TO_ADDR
// if others then
1841: LD_VAR 0 8
1845: IFFALSE 1859
// SaveCharacters ( others , 11_others ) ;
1847: LD_VAR 0 8
1851: PPUSH
1852: LD_STRING 11_others
1854: PPUSH
1855: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 4
1902: PUSH
1903: LD_INT 1
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 7
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 3
1938: PUSH
1939: LD_INT 2
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: LD_INT 7
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// for i in JMM ^ selected do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: LD_EXP 21
1970: PUSH
1971: LD_EXP 19
1975: ADD
1976: PUSH
1977: FOR_IN
1978: IFFALSE 2167
// begin if GetClass ( i ) = 3 then
1980: LD_VAR 0 2
1984: PPUSH
1985: CALL_OW 257
1989: PUSH
1990: LD_INT 3
1992: EQUAL
1993: IFFALSE 2150
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1995: LD_ADDR_OWVAR 37
1999: PUSH
2000: LD_VAR 0 6
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
2013: LD_ADDR_OWVAR 39
2017: PUSH
2018: LD_VAR 0 6
2022: PUSH
2023: LD_INT 1
2025: ARRAY
2026: PUSH
2027: LD_INT 2
2029: ARRAY
2030: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2031: LD_ADDR_OWVAR 38
2035: PUSH
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2049: LD_ADDR_OWVAR 40
2053: PUSH
2054: LD_VAR 0 6
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 4
2065: ARRAY
2066: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2067: LD_ADDR_VAR 0 6
2071: PUSH
2072: LD_VAR 0 6
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 3
2084: ST_TO_ADDR
// veh := CreateVehicle ;
2085: LD_ADDR_VAR 0 7
2089: PUSH
2090: CALL_OW 45
2094: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2095: LD_VAR 0 7
2099: PPUSH
2100: LD_INT 8
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_VAR 0 7
2119: PPUSH
2120: CALL_OW 52
// if i = JMM then
2124: LD_VAR 0 2
2128: PUSH
2129: LD_EXP 21
2133: EQUAL
2134: IFFALSE 2148
// SetMark ( veh , 1 ) ;
2136: LD_VAR 0 7
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: CALL_OW 242
// end else
2148: GO 2165
// PlaceUnitArea ( i , am_hum_start , false ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 9
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// end ;
2165: GO 1977
2167: POP
2168: POP
// vc_chassis := us_medium_tracked ;
2169: LD_ADDR_OWVAR 37
2173: PUSH
2174: LD_INT 3
2176: ST_TO_ADDR
// vc_engine := engine_solar ;
2177: LD_ADDR_OWVAR 39
2181: PUSH
2182: LD_INT 2
2184: ST_TO_ADDR
// vc_control := control_computer ;
2185: LD_ADDR_OWVAR 38
2189: PUSH
2190: LD_INT 3
2192: ST_TO_ADDR
// vc_weapon := us_radar ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_INT 11
2200: ST_TO_ADDR
// veh := CreateVehicle ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: CALL_OW 45
2210: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2211: LD_VAR 0 7
2215: PPUSH
2216: LD_INT 87
2218: PPUSH
2219: LD_INT 142
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: CALL_OW 48
// end ; end_of_file
2229: LD_VAR 0 1
2233: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2234: LD_INT 0
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
// if Difficulty = 1 then
2242: LD_OWVAR 67
2246: PUSH
2247: LD_INT 1
2249: EQUAL
2250: IFFALSE 2347
// begin tmp := [ [ 129 , 45 ] , [ 143 , 58 ] , [ 184 , 113 ] , [ 163 , 107 ] ] ;
2252: LD_ADDR_VAR 0 6
2256: PUSH
2257: LD_INT 129
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 143
2269: PUSH
2270: LD_INT 58
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 184
2279: PUSH
2280: LD_INT 113
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 163
2289: PUSH
2290: LD_INT 107
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: ST_TO_ADDR
// for i in tmp do
2303: LD_ADDR_VAR 0 2
2307: PUSH
2308: LD_VAR 0 6
2312: PUSH
2313: FOR_IN
2314: IFFALSE 2345
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
2316: LD_VAR 0 2
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_INT 2
2332: ARRAY
2333: PPUSH
2334: CALL_OW 428
2338: PPUSH
2339: CALL_OW 64
2343: GO 2313
2345: POP
2346: POP
// end ; for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: LD_INT 21
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 69
2366: PUSH
2367: FOR_IN
2368: IFFALSE 2401
// SetBLevel ( i , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_INT 5
2377: PUSH
2378: LD_INT 6
2380: PUSH
2381: LD_INT 7
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: PUSH
2389: LD_OWVAR 67
2393: ARRAY
2394: PPUSH
2395: CALL_OW 241
2399: GO 2367
2401: POP
2402: POP
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_INT 5
2410: PUSH
2411: LD_INT 6
2413: PUSH
2414: LD_INT 7
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: PUSH
2422: LD_OWVAR 67
2426: ARRAY
2427: ST_TO_ADDR
// uc_side := 2 ;
2428: LD_ADDR_OWVAR 20
2432: PUSH
2433: LD_INT 2
2435: ST_TO_ADDR
// uc_nation := 2 ;
2436: LD_ADDR_OWVAR 21
2440: PUSH
2441: LD_INT 2
2443: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2444: LD_ADDR_OWVAR 37
2448: PUSH
2449: LD_INT 14
2451: ST_TO_ADDR
// vc_engine := engine_siberite ;
2452: LD_ADDR_OWVAR 39
2456: PUSH
2457: LD_INT 3
2459: ST_TO_ADDR
// vc_control := control_manual ;
2460: LD_ADDR_OWVAR 38
2464: PUSH
2465: LD_INT 1
2467: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2468: LD_ADDR_OWVAR 40
2472: PUSH
2473: LD_INT 31
2475: ST_TO_ADDR
// for i = 1 to 3 do
2476: LD_ADDR_VAR 0 2
2480: PUSH
2481: DOUBLE
2482: LD_INT 1
2484: DEC
2485: ST_TO_ADDR
2486: LD_INT 3
2488: PUSH
2489: FOR_TO
2490: IFFALSE 2574
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2492: LD_INT 0
2494: PPUSH
2495: LD_INT 3
2497: PPUSH
2498: LD_VAR 0 5
2502: PPUSH
2503: CALL_OW 380
// un := CreateVehicle ;
2507: LD_ADDR_VAR 0 4
2511: PUSH
2512: CALL_OW 45
2516: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2517: LD_VAR 0 4
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_INT 5
2527: PPUSH
2528: CALL_OW 12
2532: PPUSH
2533: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2537: LD_VAR 0 4
2541: PPUSH
2542: LD_INT 156
2544: PPUSH
2545: LD_INT 15
2547: PPUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2558: CALL_OW 44
2562: PPUSH
2563: LD_VAR 0 4
2567: PPUSH
2568: CALL_OW 52
// end ;
2572: GO 2489
2574: POP
2575: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ 16 , [ 2 , 3 , 4 ] [ Difficulty ] , - 1 , 4 ] ) ;
2576: LD_ADDR_EXP 37
2580: PUSH
2581: LD_INT 94
2583: PPUSH
2584: LD_INT 28
2586: PPUSH
2587: LD_STRING dammam
2589: PPUSH
2590: LD_VAR 0 5
2594: PPUSH
2595: LD_INT 10000
2597: PUSH
2598: LD_INT 1000
2600: PUSH
2601: LD_INT 300
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PPUSH
2609: LD_INT 16
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 3
2617: PUSH
2618: LD_INT 4
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PUSH
2632: LD_INT 1
2634: NEG
2635: PUSH
2636: LD_INT 4
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: CALL 58065 0 6
2649: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , [ 2 , 3 , 4 ] [ Difficulty ] , 2 , 0 ] ) ;
2650: LD_ADDR_EXP 37
2654: PUSH
2655: LD_EXP 37
2659: PUSH
2660: LD_INT 122
2662: PPUSH
2663: LD_INT 25
2665: PPUSH
2666: LD_STRING 
2668: PPUSH
2669: LD_VAR 0 5
2673: PPUSH
2674: LD_INT 500
2676: PUSH
2677: LD_INT 60
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: LD_INT 1
2690: NEG
2691: PUSH
2692: LD_INT 2
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_OWVAR 67
2710: ARRAY
2711: PUSH
2712: LD_INT 2
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: PPUSH
2724: CALL 58065 0 6
2728: UNION
2729: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
2730: LD_ADDR_EXP 35
2734: PUSH
2735: LD_INT 45
2737: PPUSH
2738: LD_INT 24
2740: PPUSH
2741: LD_STRING jeddah
2743: PPUSH
2744: LD_VAR 0 5
2748: PPUSH
2749: LD_INT 700
2751: PUSH
2752: LD_INT 300
2754: PUSH
2755: LD_INT 10
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PPUSH
2763: LD_INT 12
2765: PUSH
2766: LD_INT 4
2768: PUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 2
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL 58065 0 6
2785: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2786: LD_ADDR_EXP 36
2790: PUSH
2791: LD_INT 7
2793: PPUSH
2794: LD_INT 27
2796: PPUSH
2797: LD_STRING riyadh
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: LD_INT 500
2807: PUSH
2808: LD_INT 60
2810: PUSH
2811: LD_INT 0
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: LIST
2818: PPUSH
2819: LD_INT 4
2821: PUSH
2822: LD_INT 2
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL 58065 0 6
2841: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ 10 , 3 , 3 , 2 ] ) ;
2842: LD_ADDR_EXP 39
2846: PUSH
2847: LD_INT 204
2849: PPUSH
2850: LD_INT 26
2852: PPUSH
2853: LD_STRING 
2855: PPUSH
2856: LD_VAR 0 5
2860: PPUSH
2861: LD_INT 500
2863: PUSH
2864: LD_INT 50
2866: PUSH
2867: LD_INT 0
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 10
2877: PUSH
2878: LD_INT 3
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 2
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL 58065 0 6
2897: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2898: LD_ADDR_EXP 50
2902: PUSH
2903: LD_EXP 37
2907: PUSH
2908: LD_EXP 35
2912: PUSH
2913: LD_EXP 39
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 30
2940: PUSH
2941: LD_INT 31
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 58
2950: PUSH
2951: EMPTY
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 69
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3090
// begin if GetBase ( i ) then
2967: LD_VAR 0 2
2971: PPUSH
2972: CALL_OW 274
2976: IFFALSE 2980
// continue ;
2978: GO 2964
// d := GetDir ( i ) ;
2980: LD_ADDR_VAR 0 3
2984: PUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: CALL_OW 254
2994: ST_TO_ADDR
// if d < 3 then
2995: LD_VAR 0 3
2999: PUSH
3000: LD_INT 3
3002: LESS
3003: IFFALSE 3021
// d := d + 3 else
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_VAR 0 3
3014: PUSH
3015: LD_INT 3
3017: PLUS
3018: ST_TO_ADDR
3019: GO 3035
// d := d - 3 ;
3021: LD_ADDR_VAR 0 3
3025: PUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 3
3033: MINUS
3034: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_INT 8
3040: PPUSH
3041: LD_VAR 0 5
3045: PPUSH
3046: CALL_OW 380
// un := CreateHuman ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// SetDir ( un , d ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_VAR 0 3
3069: PPUSH
3070: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_VAR 0 2
3083: PPUSH
3084: CALL_OW 52
// end ;
3088: GO 2964
3090: POP
3091: POP
// if Difficulty > 1 then
3092: LD_OWVAR 67
3096: PUSH
3097: LD_INT 1
3099: GREATER
3100: IFFALSE 3471
// begin ar_kamikadze := [ ] ;
3102: LD_ADDR_EXP 42
3106: PUSH
3107: EMPTY
3108: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3109: LD_INT 0
3111: PPUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_VAR 0 5
3119: PPUSH
3120: CALL_OW 380
// un := CreateHuman ;
3124: LD_ADDR_VAR 0 4
3128: PUSH
3129: CALL_OW 44
3133: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
3146: LD_VAR 0 4
3150: PPUSH
3151: LD_INT 23
3153: PPUSH
3154: LD_INT 44
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 48
// ComCrawl ( un ) ;
3164: LD_VAR 0 4
3168: PPUSH
3169: CALL_OW 137
// un := CreateHuman ;
3173: LD_ADDR_VAR 0 4
3177: PUSH
3178: CALL_OW 44
3182: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3183: LD_VAR 0 4
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
3195: LD_VAR 0 4
3199: PPUSH
3200: LD_INT 30
3202: PPUSH
3203: LD_INT 39
3205: PPUSH
3206: LD_INT 0
3208: PPUSH
3209: CALL_OW 48
// ComCrawl ( un ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3222: LD_INT 0
3224: PPUSH
3225: LD_INT 17
3227: PPUSH
3228: LD_VAR 0 5
3232: PPUSH
3233: CALL_OW 380
// un := CreateHuman ;
3237: LD_ADDR_VAR 0 4
3241: PUSH
3242: CALL_OW 44
3246: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3247: LD_VAR 0 4
3251: PPUSH
3252: LD_INT 3
3254: PPUSH
3255: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3259: LD_VAR 0 4
3263: PPUSH
3264: LD_INT 45
3266: PPUSH
3267: LD_INT 86
3269: PPUSH
3270: LD_INT 0
3272: PPUSH
3273: CALL_OW 48
// ComHold ( un ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3286: LD_ADDR_EXP 42
3290: PUSH
3291: LD_EXP 42
3295: PPUSH
3296: LD_EXP 42
3300: PUSH
3301: LD_INT 1
3303: PLUS
3304: PPUSH
3305: LD_VAR 0 4
3309: PPUSH
3310: CALL_OW 1
3314: ST_TO_ADDR
// un := CreateHuman ;
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: CALL_OW 44
3324: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3325: LD_VAR 0 4
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3337: LD_VAR 0 4
3341: PPUSH
3342: LD_INT 60
3344: PPUSH
3345: LD_INT 85
3347: PPUSH
3348: LD_INT 0
3350: PPUSH
3351: CALL_OW 48
// ComHold ( un ) ;
3355: LD_VAR 0 4
3359: PPUSH
3360: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3364: LD_ADDR_EXP 42
3368: PUSH
3369: LD_EXP 42
3373: PPUSH
3374: LD_EXP 42
3378: PUSH
3379: LD_INT 1
3381: PLUS
3382: PPUSH
3383: LD_VAR 0 4
3387: PPUSH
3388: CALL_OW 1
3392: ST_TO_ADDR
// un := CreateHuman ;
3393: LD_ADDR_VAR 0 4
3397: PUSH
3398: CALL_OW 44
3402: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3415: LD_VAR 0 4
3419: PPUSH
3420: LD_INT 222
3422: PPUSH
3423: LD_INT 166
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 48
// ComHold ( un ) ;
3433: LD_VAR 0 4
3437: PPUSH
3438: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3442: LD_ADDR_EXP 42
3446: PUSH
3447: LD_EXP 42
3451: PPUSH
3452: LD_EXP 42
3456: PUSH
3457: LD_INT 1
3459: PLUS
3460: PPUSH
3461: LD_VAR 0 4
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3471: LD_ADDR_EXP 40
3475: PUSH
3476: EMPTY
3477: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3478: LD_INT 1
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: LD_VAR 0 5
3488: PPUSH
3489: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3493: LD_ADDR_OWVAR 26
3497: PUSH
3498: LD_STRING Pavel Grigorovic
3500: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3501: LD_ADDR_OWVAR 33
3505: PUSH
3506: LD_STRING SecondCharsGal
3508: ST_TO_ADDR
// hc_face_number := 4 ;
3509: LD_ADDR_OWVAR 34
3513: PUSH
3514: LD_INT 4
3516: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3517: LD_ADDR_EXP 40
3521: PUSH
3522: LD_EXP 40
3526: PPUSH
3527: LD_INT 1
3529: PPUSH
3530: CALL_OW 44
3534: PPUSH
3535: CALL_OW 1
3539: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 2 ) ;
3540: LD_INT 2
3542: PPUSH
3543: LD_INT 4
3545: PPUSH
3546: LD_INT 2
3548: PPUSH
3549: CALL_OW 380
// hc_name := Lucy Sebel ;
3553: LD_ADDR_OWVAR 26
3557: PUSH
3558: LD_STRING Lucy Sebel
3560: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3561: LD_ADDR_OWVAR 33
3565: PUSH
3566: LD_STRING SecondCharsGal
3568: ST_TO_ADDR
// hc_face_number := 15 ;
3569: LD_ADDR_OWVAR 34
3573: PUSH
3574: LD_INT 15
3576: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3577: LD_ADDR_EXP 40
3581: PUSH
3582: LD_EXP 40
3586: PPUSH
3587: LD_INT 2
3589: PPUSH
3590: CALL_OW 44
3594: PPUSH
3595: CALL_OW 1
3599: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 2 ) ;
3600: LD_INT 2
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 380
// hc_gallery :=  ;
3613: LD_ADDR_OWVAR 33
3617: PUSH
3618: LD_STRING 
3620: ST_TO_ADDR
// hc_name :=  ;
3621: LD_ADDR_OWVAR 26
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3629: LD_ADDR_EXP 40
3633: PUSH
3634: LD_EXP 40
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: CALL_OW 44
3646: PPUSH
3647: CALL_OW 1
3651: ST_TO_ADDR
// hc_sex := sex_male ;
3652: LD_ADDR_OWVAR 27
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// hc_class = 11 ;
3660: LD_ADDR_OWVAR 28
3664: PUSH
3665: LD_INT 11
3667: ST_TO_ADDR
// hc_gallery = sandar ;
3668: LD_ADDR_OWVAR 33
3672: PUSH
3673: LD_STRING sandar
3675: ST_TO_ADDR
// hc_face_number = 33 ;
3676: LD_ADDR_OWVAR 34
3680: PUSH
3681: LD_INT 33
3683: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING Thabit Muhair Saliba
3691: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3692: LD_ADDR_OWVAR 31
3696: PUSH
3697: LD_INT 0
3699: PUSH
3700: LD_INT 0
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// Saliba = CreateHuman ;
3715: LD_ADDR_EXP 44
3719: PUSH
3720: CALL_OW 44
3724: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3725: LD_EXP 44
3729: PPUSH
3730: LD_INT 7
3732: PPUSH
3733: CALL_OW 52
// if gensher_active then
3737: LD_EXP 18
3741: IFFALSE 3768
// begin Gensher = NewCharacter ( Dietrich ) ;
3743: LD_ADDR_EXP 45
3747: PUSH
3748: LD_STRING Dietrich
3750: PPUSH
3751: CALL_OW 25
3755: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3756: LD_EXP 45
3760: PPUSH
3761: LD_INT 94
3763: PPUSH
3764: CALL_OW 52
// end ; InitHc ;
3768: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3772: LD_ADDR_EXP 41
3776: PUSH
3777: EMPTY
3778: ST_TO_ADDR
// for i = 1 to 5 do
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: DOUBLE
3785: LD_INT 1
3787: DEC
3788: ST_TO_ADDR
3789: LD_INT 5
3791: PUSH
3792: FOR_TO
3793: IFFALSE 3965
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3795: LD_INT 13
3797: PUSH
3798: LD_INT 14
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 2
3810: PPUSH
3811: CALL_OW 12
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ARRAY
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_INT 25
3844: PUSH
3845: LD_INT 27
3847: PUSH
3848: LD_INT 26
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: PUSH
3856: LD_INT 1
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: CALL_OW 12
3866: ARRAY
3867: PPUSH
3868: LD_INT 60
3870: PPUSH
3871: LD_INT 100
3873: PPUSH
3874: CALL_OW 12
3878: PPUSH
3879: CALL 54656 0 5
// un := CreateVehicle ;
3883: LD_ADDR_VAR 0 4
3887: PUSH
3888: CALL_OW 45
3892: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3893: LD_ADDR_EXP 41
3897: PUSH
3898: LD_EXP 41
3902: PPUSH
3903: LD_EXP 41
3907: PUSH
3908: LD_INT 1
3910: PLUS
3911: PPUSH
3912: LD_VAR 0 4
3916: PPUSH
3917: CALL_OW 1
3921: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3922: LD_VAR 0 4
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 5
3932: PPUSH
3933: CALL_OW 12
3937: PPUSH
3938: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3942: LD_VAR 0 4
3946: PPUSH
3947: LD_INT 124
3949: PPUSH
3950: LD_INT 141
3952: PPUSH
3953: LD_INT 8
3955: PPUSH
3956: LD_INT 0
3958: PPUSH
3959: CALL_OW 50
// end ;
3963: GO 3792
3965: POP
3966: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3967: LD_ADDR_EXP 43
3971: PUSH
3972: EMPTY
3973: PUSH
3974: EMPTY
3975: PUSH
3976: EMPTY
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_INT 3
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 4
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: PUSH
4007: LD_OWVAR 67
4011: ARRAY
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4228
// for i = 1 to 3 do
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: DOUBLE
4022: LD_INT 1
4024: DEC
4025: ST_TO_ADDR
4026: LD_INT 3
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4224
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
4032: LD_INT 14
4034: PPUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 2
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 1
4047: PPUSH
4048: LD_INT 2
4050: PPUSH
4051: CALL_OW 12
4055: ARRAY
4056: PPUSH
4057: LD_INT 1
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 2
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: PPUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 27
4084: PUSH
4085: LD_INT 26
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 4
4102: PPUSH
4103: CALL_OW 12
4107: ARRAY
4108: PPUSH
4109: LD_INT 100
4111: PPUSH
4112: CALL 54656 0 5
// un := CreateVehicle ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: CALL_OW 45
4125: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
4126: LD_ADDR_EXP 43
4130: PUSH
4131: LD_EXP 43
4135: PPUSH
4136: LD_VAR 0 2
4140: PUSH
4141: LD_EXP 43
4145: PUSH
4146: LD_VAR 0 2
4150: ARRAY
4151: PUSH
4152: LD_INT 1
4154: PLUS
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PPUSH
4160: LD_VAR 0 4
4164: PPUSH
4165: CALL 54778 0 3
4169: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 5
4180: PPUSH
4181: CALL_OW 12
4185: PPUSH
4186: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
4190: LD_VAR 0 4
4194: PPUSH
4195: LD_INT 20
4197: PUSH
4198: LD_INT 21
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_VAR 0 2
4213: ARRAY
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL_OW 49
// end ;
4222: GO 4029
4224: POP
4225: POP
4226: GO 4013
4228: POP
4229: POP
// InitHc ;
4230: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4234: LD_INT 4
4236: PPUSH
4237: LD_INT 5
4239: PPUSH
4240: LD_INT 10
4242: PPUSH
4243: LD_INT 5
4245: PPUSH
4246: LD_INT 0
4248: PPUSH
4249: CALL_OW 58
// end ;
4253: LD_VAR 0 1
4257: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4258: LD_EXP 42
4262: IFFALSE 4336
4264: GO 4266
4266: DISABLE
4267: LD_INT 0
4269: PPUSH
// begin enable ;
4270: ENABLE
// for i in ar_kamikadze do
4271: LD_ADDR_VAR 0 1
4275: PUSH
4276: LD_EXP 42
4280: PUSH
4281: FOR_IN
4282: IFFALSE 4334
// if See ( 1 , i ) then
4284: LD_INT 1
4286: PPUSH
4287: LD_VAR 0 1
4291: PPUSH
4292: CALL_OW 292
4296: IFFALSE 4332
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4298: LD_VAR 0 1
4302: PPUSH
4303: LD_INT 81
4305: PUSH
4306: LD_INT 2
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 69
4317: PPUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 74
4327: PPUSH
4328: CALL_OW 115
4332: GO 4281
4334: POP
4335: POP
// end ;
4336: PPOPN 1
4338: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4339: LD_EXP 13
4343: IFFALSE 4660
4345: GO 4347
4347: DISABLE
4348: LD_INT 0
4350: PPUSH
4351: PPUSH
4352: PPUSH
4353: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4354: LD_INT 35
4356: PPUSH
4357: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4361: LD_INT 1
4363: PPUSH
4364: CALL 41425 0 1
4368: PUSH
4369: LD_INT 0
4371: EQUAL
4372: IFFALSE 4354
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4374: LD_INT 1
4376: PPUSH
4377: LD_INT 14
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: LD_INT 32
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: PPUSH
4398: CALL 41029 0 2
// repeat wait ( 0 0$1 ) ;
4402: LD_INT 35
4404: PPUSH
4405: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4409: LD_EXP 69
4413: PUSH
4414: LD_INT 1
4416: ARRAY
4417: PPUSH
4418: LD_INT 33
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 34
4430: PUSH
4431: LD_INT 32
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: IFFALSE 4402
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_EXP 69
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PPUSH
4462: LD_INT 33
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 34
4474: PUSH
4475: LD_INT 32
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 72
4490: PUSH
4491: LD_INT 1
4493: ARRAY
4494: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: LD_INT 5
4502: PPUSH
4503: CALL_OW 469
4507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4508: LD_INT 35
4510: PPUSH
4511: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 5
4522: PPUSH
4523: CALL_OW 469
4527: ST_TO_ADDR
// tmp := 100 ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 100
4535: ST_TO_ADDR
// if pos then
4536: LD_VAR 0 4
4540: IFFALSE 4580
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4542: LD_ADDR_VAR 0 3
4546: PUSH
4547: LD_INT 2
4549: PPUSH
4550: LD_VAR 0 4
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_VAR 0 4
4563: PUSH
4564: LD_INT 2
4566: ARRAY
4567: PPUSH
4568: LD_INT 20
4570: PPUSH
4571: CALL 55674 0 4
4575: PUSH
4576: LD_INT 4
4578: ARRAY
4579: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4580: LD_VAR 0 4
4584: PUSH
4585: LD_EXP 14
4589: NOT
4590: AND
4591: PUSH
4592: LD_VAR 0 3
4596: PUSH
4597: LD_INT 10
4599: LESS
4600: AND
4601: IFFALSE 4508
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4603: LD_VAR 0 2
4607: PPUSH
4608: LD_VAR 0 4
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: LD_VAR 0 4
4621: PUSH
4622: LD_INT 2
4624: ARRAY
4625: PPUSH
4626: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_INT 198
4637: PPUSH
4638: LD_INT 113
4640: PPUSH
4641: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_INT 124
4652: PPUSH
4653: LD_INT 7
4655: PPUSH
4656: CALL_OW 171
// end ;
4660: PPOPN 4
4662: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4663: LD_EXP 6
4667: IFFALSE 7448
4669: GO 4671
4671: DISABLE
4672: LD_INT 0
4674: PPUSH
4675: PPUSH
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4682: LD_ADDR_VAR 0 4
4686: PUSH
4687: LD_INT 5
4689: PUSH
4690: LD_INT 6
4692: PUSH
4693: LD_INT 7
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: PUSH
4701: LD_OWVAR 67
4705: ARRAY
4706: ST_TO_ADDR
// coords := [ ] ;
4707: LD_ADDR_VAR 0 5
4711: PUSH
4712: EMPTY
4713: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4714: LD_ADDR_VAR 0 6
4718: PUSH
4719: LD_INT 0
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 0
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 1
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4761: LD_INT 1
4763: PPUSH
4764: LD_INT 14
4766: PUSH
4767: LD_INT 1
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 28
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 14
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: LD_INT 2
4790: PUSH
4791: LD_INT 25
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 14
4802: PUSH
4803: LD_INT 1
4805: PUSH
4806: LD_INT 2
4808: PUSH
4809: LD_INT 28
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 14
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: LD_INT 29
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL 41029 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4846: LD_INT 21000
4848: PUSH
4849: LD_INT 19950
4851: PUSH
4852: LD_INT 18900
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: PUSH
4860: LD_OWVAR 67
4864: ARRAY
4865: PPUSH
4866: CALL_OW 67
// InitHc ;
4870: CALL_OW 19
// InitUc ;
4874: CALL_OW 18
// uc_side := 2 ;
4878: LD_ADDR_OWVAR 20
4882: PUSH
4883: LD_INT 2
4885: ST_TO_ADDR
// uc_nation := 2 ;
4886: LD_ADDR_OWVAR 21
4890: PUSH
4891: LD_INT 2
4893: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: EMPTY
4900: PUSH
4901: EMPTY
4902: PUSH
4903: EMPTY
4904: PUSH
4905: EMPTY
4906: PUSH
4907: EMPTY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 1
4928: PPUSH
4929: LD_EXP 69
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PUSH
4938: LD_INT 34
4940: PUSH
4941: LD_INT 32
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: DIFF
4953: PPUSH
4954: CALL_OW 1
4958: ST_TO_ADDR
// for i = 1 to Difficulty do
4959: LD_ADDR_VAR 0 1
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_OWVAR 67
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5113
// begin uc_side := 2 ;
4977: LD_ADDR_OWVAR 20
4981: PUSH
4982: LD_INT 2
4984: ST_TO_ADDR
// uc_nation := 2 ;
4985: LD_ADDR_OWVAR 21
4989: PUSH
4990: LD_INT 2
4992: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4993: LD_INT 13
4995: PPUSH
4996: LD_INT 3
4998: PPUSH
4999: LD_INT 5
5001: PPUSH
5002: LD_INT 29
5004: PPUSH
5005: LD_INT 100
5007: PPUSH
5008: CALL 54656 0 5
// un := CreateVehicle ;
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: CALL_OW 45
5021: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
5022: LD_ADDR_VAR 0 3
5026: PUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PUSH
5044: LD_INT 1
5046: PLUS
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL 54778 0 3
5061: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5062: LD_VAR 0 2
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
5074: LD_VAR 0 2
5078: PPUSH
5079: LD_INT 16
5081: PPUSH
5082: LD_INT 0
5084: PPUSH
5085: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
5089: LD_VAR 0 2
5093: PPUSH
5094: LD_INT 51
5096: PPUSH
5097: LD_INT 10
5099: PPUSH
5100: CALL_OW 111
// wait ( 0 0$2 ) ;
5104: LD_INT 70
5106: PPUSH
5107: CALL_OW 67
// end ;
5111: GO 4974
5113: POP
5114: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
5115: LD_ADDR_VAR 0 5
5119: PUSH
5120: LD_INT 51
5122: PUSH
5123: LD_INT 24
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 75
5132: PUSH
5133: LD_INT 90
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
5144: LD_INT 1
5146: PPUSH
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PPUSH
5156: LD_VAR 0 5
5160: PPUSH
5161: LD_VAR 0 6
5165: PPUSH
5166: CALL 41262 0 4
// for i = 1 to [ 1 , 3 , 3 ] [ Difficulty ] do
5170: LD_ADDR_VAR 0 1
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_INT 1
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PUSH
5194: LD_OWVAR 67
5198: ARRAY
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5301
// begin uc_side := 2 ;
5203: LD_ADDR_OWVAR 20
5207: PUSH
5208: LD_INT 2
5210: ST_TO_ADDR
// uc_nation := 2 ;
5211: LD_ADDR_OWVAR 21
5215: PUSH
5216: LD_INT 2
5218: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5219: LD_INT 0
5221: PPUSH
5222: LD_INT 17
5224: PPUSH
5225: LD_VAR 0 4
5229: PPUSH
5230: CALL_OW 380
// un := CreateHuman ;
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: CALL_OW 44
5243: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5244: LD_ADDR_VAR 0 3
5248: PUSH
5249: LD_VAR 0 3
5253: PPUSH
5254: LD_INT 2
5256: PUSH
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PUSH
5266: LD_INT 1
5268: PLUS
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: LD_VAR 0 2
5278: PPUSH
5279: CALL 54778 0 3
5283: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5284: LD_VAR 0 2
5288: PPUSH
5289: LD_INT 13
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 49
// end ;
5299: GO 5200
5301: POP
5302: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5303: LD_ADDR_VAR 0 1
5307: PUSH
5308: DOUBLE
5309: LD_INT 1
5311: DEC
5312: ST_TO_ADDR
5313: LD_INT 3
5315: PUSH
5316: LD_INT 4
5318: PUSH
5319: LD_INT 4
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: LD_OWVAR 67
5331: ARRAY
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5455
// begin uc_side := 2 ;
5336: LD_ADDR_OWVAR 20
5340: PUSH
5341: LD_INT 2
5343: ST_TO_ADDR
// uc_nation := 2 ;
5344: LD_ADDR_OWVAR 21
5348: PUSH
5349: LD_INT 2
5351: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ i mod 2 + 1 ] , skill ) ;
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 1
5357: PUSH
5358: LD_INT 8
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_VAR 0 1
5369: PUSH
5370: LD_INT 2
5372: MOD
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: ARRAY
5378: PPUSH
5379: LD_VAR 0 4
5383: PPUSH
5384: CALL_OW 380
// un := CreateHuman ;
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: CALL_OW 44
5397: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_VAR 0 3
5407: PPUSH
5408: LD_INT 2
5410: PUSH
5411: LD_VAR 0 3
5415: PUSH
5416: LD_INT 2
5418: ARRAY
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PPUSH
5428: LD_VAR 0 2
5432: PPUSH
5433: CALL 54778 0 3
5437: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: LD_INT 13
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 49
// end ;
5453: GO 5333
5455: POP
5456: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5457: LD_ADDR_VAR 0 5
5461: PUSH
5462: LD_INT 67
5464: PUSH
5465: LD_INT 112
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 85
5474: PUSH
5475: LD_INT 130
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5486: LD_INT 2
5488: PPUSH
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: LD_VAR 0 6
5507: PPUSH
5508: CALL 41262 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5512: LD_ADDR_VAR 0 1
5516: PUSH
5517: DOUBLE
5518: LD_INT 1
5520: DEC
5521: ST_TO_ADDR
5522: LD_INT 1
5524: PUSH
5525: LD_INT 2
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: PUSH
5536: LD_OWVAR 67
5540: ARRAY
5541: PUSH
5542: FOR_TO
5543: IFFALSE 5643
// begin uc_side := 2 ;
5545: LD_ADDR_OWVAR 20
5549: PUSH
5550: LD_INT 2
5552: ST_TO_ADDR
// uc_nation := 2 ;
5553: LD_ADDR_OWVAR 21
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5561: LD_INT 0
5563: PPUSH
5564: LD_INT 17
5566: PPUSH
5567: LD_VAR 0 4
5571: PPUSH
5572: CALL_OW 380
// un := CreateHuman ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: CALL_OW 44
5585: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_VAR 0 3
5595: PPUSH
5596: LD_INT 3
5598: PUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 3
5606: ARRAY
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PPUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: CALL 54778 0 3
5625: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5626: LD_VAR 0 2
5630: PPUSH
5631: LD_INT 14
5633: PPUSH
5634: LD_INT 0
5636: PPUSH
5637: CALL_OW 49
// end ;
5641: GO 5542
5643: POP
5644: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5645: LD_ADDR_VAR 0 5
5649: PUSH
5650: LD_INT 148
5652: PUSH
5653: LD_INT 158
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 148
5662: PUSH
5663: LD_INT 158
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5674: LD_INT 3
5676: PPUSH
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 3
5684: ARRAY
5685: PPUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_VAR 0 6
5695: PPUSH
5696: CALL 41262 0 4
// for i = 1 to [ 2 , 4 , 4 ] [ Difficulty ] do
5700: LD_ADDR_VAR 0 1
5704: PUSH
5705: DOUBLE
5706: LD_INT 1
5708: DEC
5709: ST_TO_ADDR
5710: LD_INT 2
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: LD_INT 4
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_OWVAR 67
5728: ARRAY
5729: PUSH
5730: FOR_TO
5731: IFFALSE 5955
// begin uc_side := 2 ;
5733: LD_ADDR_OWVAR 20
5737: PUSH
5738: LD_INT 2
5740: ST_TO_ADDR
// uc_nation := 2 ;
5741: LD_ADDR_OWVAR 21
5745: PUSH
5746: LD_INT 2
5748: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5749: LD_INT 14
5751: PPUSH
5752: LD_INT 3
5754: PPUSH
5755: LD_INT 1
5757: PUSH
5758: LD_INT 5
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 2
5770: PPUSH
5771: CALL_OW 12
5775: ARRAY
5776: PPUSH
5777: LD_INT 27
5779: PUSH
5780: LD_INT 26
5782: PUSH
5783: LD_INT 28
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: LD_INT 1
5793: PPUSH
5794: LD_INT 3
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: PPUSH
5803: LD_INT 100
5805: PPUSH
5806: CALL 54656 0 5
// un := CreateVehicle ;
5810: LD_ADDR_VAR 0 2
5814: PUSH
5815: CALL_OW 45
5819: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5820: LD_ADDR_VAR 0 3
5824: PUSH
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_INT 4
5832: PUSH
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 4
5840: ARRAY
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: LD_VAR 0 2
5854: PPUSH
5855: CALL 54778 0 3
5859: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5860: LD_VAR 0 2
5864: PPUSH
5865: LD_INT 5
5867: PPUSH
5868: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5872: LD_VAR 0 2
5876: PPUSH
5877: LD_INT 15
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 49
// if GetControl ( un ) = control_manual then
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 263
5896: PUSH
5897: LD_INT 1
5899: EQUAL
5900: IFFALSE 5931
// begin PrepareHuman ( false , 3 , skill ) ;
5902: LD_INT 0
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_VAR 0 4
5912: PPUSH
5913: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5917: CALL_OW 44
5921: PPUSH
5922: LD_VAR 0 2
5926: PPUSH
5927: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5931: LD_VAR 0 2
5935: PPUSH
5936: LD_INT 179
5938: PPUSH
5939: LD_INT 135
5941: PPUSH
5942: CALL_OW 111
// wait ( 0 0$2 ) ;
5946: LD_INT 70
5948: PPUSH
5949: CALL_OW 67
// end ;
5953: GO 5730
5955: POP
5956: POP
// vc_chassis := 15 ;
5957: LD_ADDR_OWVAR 37
5961: PUSH
5962: LD_INT 15
5964: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5965: LD_ADDR_VAR 0 3
5969: PUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: LD_INT 4
5977: PUSH
5978: LD_VAR 0 3
5982: PUSH
5983: LD_INT 4
5985: ARRAY
5986: PUSH
5987: LD_INT 1
5989: PLUS
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PPUSH
5995: CALL_OW 45
5999: PPUSH
6000: CALL 54778 0 3
6004: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 4
6012: ARRAY
6013: PUSH
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 4
6021: ARRAY
6022: ARRAY
6023: PPUSH
6024: LD_INT 15
6026: PPUSH
6027: LD_INT 0
6029: PPUSH
6030: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
6034: LD_INT 0
6036: PPUSH
6037: LD_INT 11
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
6049: LD_ADDR_VAR 0 3
6053: PUSH
6054: LD_VAR 0 3
6058: PPUSH
6059: LD_INT 4
6061: PUSH
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 4
6069: ARRAY
6070: PUSH
6071: LD_INT 1
6073: PLUS
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PPUSH
6079: CALL_OW 44
6083: PPUSH
6084: CALL 54778 0 3
6088: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 4
6096: ARRAY
6097: PUSH
6098: LD_VAR 0 3
6102: PUSH
6103: LD_INT 4
6105: ARRAY
6106: ARRAY
6107: PPUSH
6108: LD_VAR 0 3
6112: PUSH
6113: LD_INT 4
6115: ARRAY
6116: PUSH
6117: LD_VAR 0 3
6121: PUSH
6122: LD_INT 4
6124: ARRAY
6125: PUSH
6126: LD_INT 1
6128: MINUS
6129: ARRAY
6130: PPUSH
6131: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
6135: LD_ADDR_VAR 0 5
6139: PUSH
6140: LD_INT 148
6142: PUSH
6143: LD_INT 140
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
6153: LD_INT 1
6155: PPUSH
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 4
6163: ARRAY
6164: PPUSH
6165: LD_VAR 0 5
6169: PPUSH
6170: LD_VAR 0 6
6174: PPUSH
6175: CALL 41262 0 4
// if gensher_active then
6179: LD_EXP 18
6183: IFFALSE 6585
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_STRING D10-Diet-1
6192: PPUSH
6193: CALL_OW 94
// for i = 1 to 2 do
6197: LD_ADDR_VAR 0 1
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_INT 2
6209: PUSH
6210: FOR_TO
6211: IFFALSE 6349
// begin uc_side := 2 ;
6213: LD_ADDR_OWVAR 20
6217: PUSH
6218: LD_INT 2
6220: ST_TO_ADDR
// uc_nation := 2 ;
6221: LD_ADDR_OWVAR 21
6225: PUSH
6226: LD_INT 2
6228: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6229: LD_INT 13
6231: PPUSH
6232: LD_INT 3
6234: PPUSH
6235: LD_INT 5
6237: PPUSH
6238: LD_INT 29
6240: PPUSH
6241: LD_INT 100
6243: PPUSH
6244: CALL 54656 0 5
// un := CreateVehicle ;
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: CALL_OW 45
6257: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6258: LD_ADDR_VAR 0 3
6262: PUSH
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 5
6270: PUSH
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 5
6278: ARRAY
6279: PUSH
6280: LD_INT 1
6282: PLUS
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL 54778 0 3
6297: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6298: LD_VAR 0 2
6302: PPUSH
6303: LD_INT 0
6305: PPUSH
6306: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_INT 23
6317: PPUSH
6318: LD_INT 0
6320: PPUSH
6321: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6325: LD_VAR 0 2
6329: PPUSH
6330: LD_INT 85
6332: PPUSH
6333: LD_INT 152
6335: PPUSH
6336: CALL_OW 111
// wait ( 0 0$2 ) ;
6340: LD_INT 70
6342: PPUSH
6343: CALL_OW 67
// end ;
6347: GO 6210
6349: POP
6350: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6351: LD_ADDR_VAR 0 1
6355: PUSH
6356: DOUBLE
6357: LD_INT 1
6359: DEC
6360: ST_TO_ADDR
6361: LD_INT 2
6363: PUSH
6364: LD_INT 3
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: PUSH
6375: LD_OWVAR 67
6379: ARRAY
6380: PUSH
6381: FOR_TO
6382: IFFALSE 6539
// begin uc_side := 2 ;
6384: LD_ADDR_OWVAR 20
6388: PUSH
6389: LD_INT 2
6391: ST_TO_ADDR
// uc_nation := 2 ;
6392: LD_ADDR_OWVAR 21
6396: PUSH
6397: LD_INT 2
6399: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6400: LD_INT 14
6402: PPUSH
6403: LD_INT 3
6405: PPUSH
6406: LD_INT 5
6408: PPUSH
6409: LD_INT 27
6411: PUSH
6412: LD_INT 28
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 1
6421: PPUSH
6422: LD_INT 2
6424: PPUSH
6425: CALL_OW 12
6429: ARRAY
6430: PPUSH
6431: LD_INT 100
6433: PPUSH
6434: CALL 54656 0 5
// un := CreateVehicle ;
6438: LD_ADDR_VAR 0 2
6442: PUSH
6443: CALL_OW 45
6447: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6448: LD_ADDR_VAR 0 3
6452: PUSH
6453: LD_VAR 0 3
6457: PPUSH
6458: LD_INT 5
6460: PUSH
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 5
6468: ARRAY
6469: PUSH
6470: LD_INT 1
6472: PLUS
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PPUSH
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL 54778 0 3
6487: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6488: LD_VAR 0 2
6492: PPUSH
6493: LD_INT 0
6495: PPUSH
6496: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6500: LD_VAR 0 2
6504: PPUSH
6505: LD_INT 23
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6515: LD_VAR 0 2
6519: PPUSH
6520: LD_INT 85
6522: PPUSH
6523: LD_INT 152
6525: PPUSH
6526: CALL_OW 111
// wait ( 0 0$2 ) ;
6530: LD_INT 70
6532: PPUSH
6533: CALL_OW 67
// end ;
6537: GO 6381
6539: POP
6540: POP
// coords := [ [ 97 , 143 ] ] ;
6541: LD_ADDR_VAR 0 5
6545: PUSH
6546: LD_INT 97
6548: PUSH
6549: LD_INT 143
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6559: LD_INT 1
6561: PPUSH
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 5
6569: ARRAY
6570: PPUSH
6571: LD_VAR 0 5
6575: PPUSH
6576: LD_VAR 0 6
6580: PPUSH
6581: CALL 41262 0 4
// end ; Wait ( 13 13$00 ) ;
6585: LD_INT 27300
6587: PPUSH
6588: CALL_OW 67
// tmp := [ ] ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: EMPTY
6598: ST_TO_ADDR
// w := 1 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// repeat tmp := [ ] ;
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// if w mod 4 = 0 then
6614: LD_VAR 0 7
6618: PUSH
6619: LD_INT 4
6621: MOD
6622: PUSH
6623: LD_INT 0
6625: EQUAL
6626: IFFALSE 6713
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6628: LD_ADDR_VAR 0 8
6632: PUSH
6633: LD_INT 11
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: LD_INT 24
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 11
6653: PUSH
6654: LD_INT 1
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 24
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 11
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: LD_INT 2
6677: PUSH
6678: LD_INT 24
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 11
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: LD_INT 2
6695: PUSH
6696: LD_INT 24
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: ST_TO_ADDR
6711: GO 6815
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6713: LD_ADDR_VAR 0 8
6717: PUSH
6718: LD_INT 14
6720: PUSH
6721: LD_INT 1
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_INT 28
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 14
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: LD_INT 25
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 14
6756: PUSH
6757: LD_INT 1
6759: PUSH
6760: LD_INT 2
6762: PUSH
6763: LD_INT 28
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 14
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: LD_INT 2
6780: PUSH
6781: LD_INT 29
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 11
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: LD_INT 24
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: ST_TO_ADDR
// if w mod 3 = 0 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_INT 3
6822: MOD
6823: PUSH
6824: LD_INT 0
6826: EQUAL
6827: IFFALSE 6903
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6829: LD_ADDR_VAR 0 8
6833: PUSH
6834: LD_VAR 0 8
6838: PPUSH
6839: LD_INT 1
6841: PUSH
6842: LD_VAR 0 8
6846: PUSH
6847: LD_VAR 0 1
6851: ARRAY
6852: PUSH
6853: LD_INT 1
6855: PLUS
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: LD_INT 14
6863: PUSH
6864: LD_INT 1
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: LD_INT 25
6872: PUSH
6873: LD_INT 28
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_INT 2
6885: PPUSH
6886: CALL_OW 12
6890: ARRAY
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL 54778 0 3
6902: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6903: LD_INT 1
6905: PPUSH
6906: LD_VAR 0 8
6910: PPUSH
6911: CALL 41029 0 2
// if GetSide ( ar_dep_w ) = 2 then
6915: LD_INT 45
6917: PPUSH
6918: CALL_OW 255
6922: PUSH
6923: LD_INT 2
6925: EQUAL
6926: IFFALSE 7011
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6928: LD_ADDR_VAR 0 8
6932: PUSH
6933: LD_INT 14
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: LD_INT 2
6941: PUSH
6942: LD_INT 28
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 14
6953: PUSH
6954: LD_INT 1
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 27
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 14
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 27
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6992: LD_INT 2
6994: PPUSH
6995: LD_VAR 0 8
6999: PPUSH
7000: CALL 41029 0 2
// wait ( 0 0$50 ) ;
7004: LD_INT 1750
7006: PPUSH
7007: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
7018: LD_EXP 69
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PPUSH
7027: LD_INT 3
7029: PUSH
7030: LD_INT 34
7032: PUSH
7033: LD_INT 32
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 72
7048: PUSH
7049: LD_INT 4
7051: GREATEREQUAL
7052: IFFALSE 7011
// wait ( 0 0$10 ) ;
7054: LD_INT 350
7056: PPUSH
7057: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_EXP 69
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: PPUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 34
7080: PUSH
7081: LD_INT 32
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PPUSH
7092: CALL_OW 72
7096: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
7097: LD_INT 100
7099: PPUSH
7100: CALL_OW 13
7104: PUSH
7105: LD_INT 50
7107: LESS
7108: IFFALSE 7141
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
7110: LD_ADDR_VAR 0 5
7114: PUSH
7115: LD_INT 55
7117: PUSH
7118: LD_INT 7
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 75
7127: PUSH
7128: LD_INT 90
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: ST_TO_ADDR
7139: GO 7170
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
7141: LD_ADDR_VAR 0 5
7145: PUSH
7146: LD_INT 128
7148: PUSH
7149: LD_INT 94
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 180
7158: PUSH
7159: LD_INT 135
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: ST_TO_ADDR
// if w mod 4 = 0 then
7170: LD_VAR 0 7
7174: PUSH
7175: LD_INT 4
7177: MOD
7178: PUSH
7179: LD_INT 0
7181: EQUAL
7182: IFFALSE 7213
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
7184: LD_ADDR_VAR 0 5
7188: PUSH
7189: LD_INT 91
7191: PUSH
7192: LD_INT 58
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 117
7201: PUSH
7202: LD_INT 107
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: ST_TO_ADDR
// ComAgressiveMove ( tmp , coords [ 1 ] , coords [ 2 ] ) ;
7213: LD_VAR 0 3
7217: PPUSH
7218: LD_VAR 0 5
7222: PUSH
7223: LD_INT 1
7225: ARRAY
7226: PPUSH
7227: LD_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: ARRAY
7235: PPUSH
7236: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7240: LD_INT 35
7242: PPUSH
7243: CALL_OW 67
// until UnitFilter ( tmp , [ f_hastask ] ) = 0 ;
7247: LD_VAR 0 3
7251: PPUSH
7252: LD_INT 60
7254: PUSH
7255: EMPTY
7256: LIST
7257: PPUSH
7258: CALL_OW 72
7262: PUSH
7263: LD_INT 0
7265: EQUAL
7266: IFFALSE 7240
// repeat wait ( 0 0$2 ) ;
7268: LD_INT 70
7270: PPUSH
7271: CALL_OW 67
// for i in tmp do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_VAR 0 3
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7375
// if GetChassis ( i ) = ar_hovercraft then
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 265
7297: PUSH
7298: LD_INT 11
7300: EQUAL
7301: IFFALSE 7339
// AttackHovercraft ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7303: LD_VAR 0 1
7307: PPUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 1
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 69
7322: PPUSH
7323: LD_VAR 0 1
7327: PPUSH
7328: CALL_OW 74
7332: PPUSH
7333: CALL 81966 0 2
7337: GO 7373
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7339: LD_VAR 0 1
7343: PPUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 1
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: PPUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: CALL_OW 74
7368: PPUSH
7369: CALL_OW 115
7373: GO 7285
7375: POP
7376: POP
// until not tmp ;
7377: LD_VAR 0 3
7381: NOT
7382: IFFALSE 7268
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7384: LD_INT 22050
7386: PPUSH
7387: LD_INT 28350
7389: PPUSH
7390: CALL_OW 12
7394: PPUSH
7395: CALL_OW 67
// w := w + 1 ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 7
7408: PUSH
7409: LD_INT 1
7411: PLUS
7412: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7413: LD_INT 94
7415: PPUSH
7416: CALL_OW 301
7420: PUSH
7421: LD_EXP 50
7425: PUSH
7426: LD_INT 1
7428: ARRAY
7429: PPUSH
7430: LD_INT 30
7432: PUSH
7433: LD_INT 3
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 72
7444: NOT
7445: OR
7446: IFFALSE 6607
// end ;
7448: PPOPN 8
7450: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7451: LD_INT 204
7453: IFFALSE 7919
7455: GO 7457
7457: DISABLE
7458: LD_INT 0
7460: PPUSH
7461: PPUSH
7462: PPUSH
7463: PPUSH
// begin enable ;
7464: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7465: LD_INT 35
7467: PPUSH
7468: LD_INT 1190
7470: PPUSH
7471: CALL_OW 12
7475: PPUSH
7476: CALL_OW 67
// tmp := [ ] ;
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: EMPTY
7486: ST_TO_ADDR
// uc_side := 8 ;
7487: LD_ADDR_OWVAR 20
7491: PUSH
7492: LD_INT 8
7494: ST_TO_ADDR
// uc_nation := 2 ;
7495: LD_ADDR_OWVAR 21
7499: PUSH
7500: LD_INT 2
7502: ST_TO_ADDR
// InitHc ;
7503: CALL_OW 19
// for i = 1 to 3 do
7507: LD_ADDR_VAR 0 1
7511: PUSH
7512: DOUBLE
7513: LD_INT 1
7515: DEC
7516: ST_TO_ADDR
7517: LD_INT 3
7519: PUSH
7520: FOR_TO
7521: IFFALSE 7648
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7523: LD_INT 13
7525: PUSH
7526: LD_INT 14
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 1
7535: PPUSH
7536: LD_INT 2
7538: PPUSH
7539: CALL_OW 12
7543: ARRAY
7544: PPUSH
7545: LD_INT 3
7547: PPUSH
7548: LD_INT 5
7550: PPUSH
7551: LD_INT 27
7553: PUSH
7554: LD_INT 28
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 1
7563: PPUSH
7564: LD_INT 2
7566: PPUSH
7567: CALL_OW 12
7571: ARRAY
7572: PPUSH
7573: LD_INT 100
7575: PPUSH
7576: CALL 54656 0 5
// un := CreateVehicle ;
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: CALL_OW 45
7589: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7590: LD_VAR 0 3
7594: PPUSH
7595: LD_INT 4
7597: PPUSH
7598: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_INT 15
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7617: LD_ADDR_VAR 0 2
7621: PUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: LD_VAR 0 2
7631: PUSH
7632: LD_INT 1
7634: PLUS
7635: PPUSH
7636: LD_VAR 0 3
7640: PPUSH
7641: CALL_OW 1
7645: ST_TO_ADDR
// end ;
7646: GO 7520
7648: POP
7649: POP
// for i = 1 to 4 do
7650: LD_ADDR_VAR 0 1
7654: PUSH
7655: DOUBLE
7656: LD_INT 1
7658: DEC
7659: ST_TO_ADDR
7660: LD_INT 4
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7735
// begin PrepareHuman ( false , 1 , 6 ) ;
7666: LD_INT 0
7668: PPUSH
7669: LD_INT 1
7671: PPUSH
7672: LD_INT 6
7674: PPUSH
7675: CALL_OW 380
// un := CreateHuman ;
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: CALL_OW 44
7688: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7689: LD_VAR 0 3
7693: PPUSH
7694: LD_INT 15
7696: PPUSH
7697: LD_INT 0
7699: PPUSH
7700: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_VAR 0 2
7713: PPUSH
7714: LD_VAR 0 2
7718: PUSH
7719: LD_INT 1
7721: PLUS
7722: PPUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 1
7732: ST_TO_ADDR
// end ;
7733: GO 7663
7735: POP
7736: POP
// wait ( 0 0$3 ) ;
7737: LD_INT 105
7739: PPUSH
7740: CALL_OW 67
// for i in tmp do
7744: LD_ADDR_VAR 0 1
7748: PUSH
7749: LD_VAR 0 2
7753: PUSH
7754: FOR_IN
7755: IFFALSE 7823
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7757: LD_VAR 0 1
7761: PPUSH
7762: CALL_OW 257
7766: PUSH
7767: LD_INT 1
7769: EQUAL
7770: PUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 247
7780: PUSH
7781: LD_INT 2
7783: EQUAL
7784: OR
7785: IFFALSE 7821
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 81
7794: PUSH
7795: LD_INT 8
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: PPUSH
7807: LD_VAR 0 1
7811: PPUSH
7812: CALL_OW 74
7816: PPUSH
7817: CALL_OW 115
7821: GO 7754
7823: POP
7824: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7825: LD_VAR 0 2
7829: PPUSH
7830: LD_INT 210
7832: PPUSH
7833: LD_INT 178
7835: PPUSH
7836: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_INT 10
7847: PPUSH
7848: LD_INT 22
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 70
7862: ST_TO_ADDR
// if x then
7863: LD_VAR 0 4
7867: IFFALSE 7895
// for i in x do
7869: LD_ADDR_VAR 0 1
7873: PUSH
7874: LD_VAR 0 4
7878: PUSH
7879: FOR_IN
7880: IFFALSE 7893
// RemoveUnit ( i ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 64
7891: GO 7879
7893: POP
7894: POP
// wait ( 0 0$1 ) ;
7895: LD_INT 35
7897: PPUSH
7898: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7902: LD_INT 22
7904: PUSH
7905: LD_INT 8
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PPUSH
7912: CALL_OW 69
7916: NOT
7917: IFFALSE 7825
// end ;
7919: PPOPN 4
7921: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7922: LD_INT 22
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 34
7934: PUSH
7935: LD_INT 31
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 3
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1000
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: IFFALSE 8071
7970: GO 7972
7972: DISABLE
// begin if IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) then
7973: LD_INT 45
7975: PPUSH
7976: CALL_OW 302
7980: PUSH
7981: LD_INT 45
7983: PPUSH
7984: CALL_OW 255
7988: AND
7989: IFFALSE 8032
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 18 , 8 ) else
7991: LD_INT 22
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 31
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 69
8019: PPUSH
8020: LD_INT 18
8022: PPUSH
8023: LD_INT 8
8025: PPUSH
8026: CALL_OW 111
8030: GO 8071
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
8032: LD_INT 22
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 34
8044: PUSH
8045: LD_INT 31
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PPUSH
8061: LD_INT 106
8063: PPUSH
8064: LD_INT 14
8066: PPUSH
8067: CALL_OW 111
// end ; end_of_file
8071: END
// export function Action ; var tmp , p , radar , sols , i ; begin
8072: LD_INT 0
8074: PPUSH
8075: PPUSH
8076: PPUSH
8077: PPUSH
8078: PPUSH
8079: PPUSH
// InGameOn ;
8080: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
8084: LD_EXP 21
8088: PPUSH
8089: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
8093: LD_INT 2
8095: PPUSH
8096: LD_INT 1
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: LD_INT 1
8104: PPUSH
8105: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
8109: LD_ADDR_VAR 0 2
8113: PUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 69
8142: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
8143: LD_ADDR_VAR 0 4
8147: PUSH
8148: LD_INT 22
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 34
8160: PUSH
8161: LD_INT 11
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 69
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: ST_TO_ADDR
// for i = 1 to tmp do
8181: LD_ADDR_VAR 0 6
8185: PUSH
8186: DOUBLE
8187: LD_INT 1
8189: DEC
8190: ST_TO_ADDR
8191: LD_VAR 0 2
8195: PUSH
8196: FOR_TO
8197: IFFALSE 8244
// begin if i = 5 then
8199: LD_VAR 0 6
8203: PUSH
8204: LD_INT 5
8206: EQUAL
8207: IFFALSE 8211
// break ;
8209: GO 8244
// sols := Replace ( sols , i , tmp [ i ] ) ;
8211: LD_ADDR_VAR 0 5
8215: PUSH
8216: LD_VAR 0 5
8220: PPUSH
8221: LD_VAR 0 6
8225: PPUSH
8226: LD_VAR 0 2
8230: PUSH
8231: LD_VAR 0 6
8235: ARRAY
8236: PPUSH
8237: CALL_OW 1
8241: ST_TO_ADDR
// end ;
8242: GO 8196
8244: POP
8245: POP
// tmp := ar_force_tmp ;
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_EXP 40
8255: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 1
8263: ARRAY
8264: PPUSH
8265: LD_INT 108
8267: PPUSH
8268: LD_INT 139
8270: PPUSH
8271: LD_INT 0
8273: PPUSH
8274: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
8278: LD_VAR 0 2
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_EXP 21
8291: PPUSH
8292: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
8296: LD_VAR 0 2
8300: PUSH
8301: LD_INT 2
8303: ARRAY
8304: PPUSH
8305: LD_INT 114
8307: PPUSH
8308: LD_INT 132
8310: PPUSH
8311: LD_INT 0
8313: PPUSH
8314: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 3
8325: ARRAY
8326: PPUSH
8327: LD_INT 115
8329: PPUSH
8330: LD_INT 132
8332: PPUSH
8333: LD_INT 0
8335: PPUSH
8336: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
8340: LD_VAR 0 2
8344: PUSH
8345: LD_INT 2
8347: ARRAY
8348: PUSH
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 3
8356: ARRAY
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
8366: LD_VAR 0 4
8370: PPUSH
8371: LD_INT 83
8373: PPUSH
8374: LD_INT 123
8376: PPUSH
8377: CALL_OW 111
// Wait ( 0 0$01 ) ;
8381: LD_INT 35
8383: PPUSH
8384: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
8388: LD_INT 90
8390: PPUSH
8391: LD_INT 144
8393: PPUSH
8394: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
8398: LD_VAR 0 5
8402: PPUSH
8403: LD_INT 88
8405: PPUSH
8406: LD_INT 129
8408: PPUSH
8409: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8413: LD_ADDR_VAR 0 3
8417: PUSH
8418: LD_INT 92
8420: PUSH
8421: LD_INT 131
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 88
8430: PUSH
8431: LD_INT 127
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 91
8440: PUSH
8441: LD_INT 132
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 92
8450: PUSH
8451: LD_INT 134
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// for i = 1 to sols do
8464: LD_ADDR_VAR 0 6
8468: PUSH
8469: DOUBLE
8470: LD_INT 1
8472: DEC
8473: ST_TO_ADDR
8474: LD_VAR 0 5
8478: PUSH
8479: FOR_TO
8480: IFFALSE 8553
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8482: LD_VAR 0 5
8486: PUSH
8487: LD_VAR 0 6
8491: ARRAY
8492: PPUSH
8493: LD_VAR 0 3
8497: PUSH
8498: LD_VAR 0 6
8502: ARRAY
8503: PUSH
8504: LD_INT 1
8506: ARRAY
8507: PPUSH
8508: LD_VAR 0 3
8512: PUSH
8513: LD_VAR 0 6
8517: ARRAY
8518: PUSH
8519: LD_INT 2
8521: ARRAY
8522: PPUSH
8523: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8527: LD_VAR 0 5
8531: PUSH
8532: LD_VAR 0 6
8536: ARRAY
8537: PPUSH
8538: CALL_OW 197
// AddComHold ( sols ) ;
8542: LD_VAR 0 5
8546: PPUSH
8547: CALL_OW 200
// end ;
8551: GO 8479
8553: POP
8554: POP
// repeat wait ( 0 0$1 ) ;
8555: LD_INT 35
8557: PPUSH
8558: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8562: LD_VAR 0 5
8566: PUSH
8567: LD_INT 1
8569: ARRAY
8570: PPUSH
8571: LD_INT 92
8573: PPUSH
8574: LD_INT 131
8576: PPUSH
8577: CALL_OW 297
8581: PUSH
8582: LD_INT 4
8584: LESS
8585: IFFALSE 8555
// CenterOnXY ( 96 , 139 ) ;
8587: LD_INT 96
8589: PPUSH
8590: LD_INT 139
8592: PPUSH
8593: CALL_OW 84
// wait ( 0 0$3 ) ;
8597: LD_INT 105
8599: PPUSH
8600: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8604: LD_INT 111
8606: PPUSH
8607: LD_INT 135
8609: PPUSH
8610: LD_INT 1
8612: PPUSH
8613: LD_INT 25
8615: NEG
8616: PPUSH
8617: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8621: LD_VAR 0 2
8625: PUSH
8626: LD_INT 2
8628: ARRAY
8629: PPUSH
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL_OW 250
8643: PUSH
8644: LD_INT 3
8646: PLUS
8647: PPUSH
8648: LD_VAR 0 2
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: CALL_OW 251
8661: PPUSH
8662: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: PPUSH
8675: LD_INT 7
8677: PPUSH
8678: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8682: LD_VAR 0 2
8686: PUSH
8687: LD_INT 2
8689: ARRAY
8690: PPUSH
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 1
8698: ARRAY
8699: PPUSH
8700: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8704: LD_INT 35
8706: PPUSH
8707: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8711: LD_VAR 0 2
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: LD_VAR 0 2
8724: PUSH
8725: LD_INT 2
8727: ARRAY
8728: PPUSH
8729: CALL_OW 296
8733: PUSH
8734: LD_INT 5
8736: LESS
8737: IFFALSE 8704
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 1
8746: ARRAY
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_INT 2
8755: ARRAY
8756: PPUSH
8757: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8761: LD_VAR 0 2
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: LD_STRING D1a-Merc1-1
8772: PPUSH
8773: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8777: LD_VAR 0 2
8781: PUSH
8782: LD_INT 2
8784: ARRAY
8785: PPUSH
8786: LD_STRING D1a-FMerc2-1
8788: PPUSH
8789: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8793: LD_VAR 0 2
8797: PUSH
8798: LD_INT 2
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_INT 1
8809: ARRAY
8810: PPUSH
8811: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8815: LD_VAR 0 2
8819: PUSH
8820: LD_INT 1
8822: ARRAY
8823: PPUSH
8824: LD_INT 500
8826: PPUSH
8827: CALL_OW 234
// wait ( 0 0$2 ) ;
8831: LD_INT 70
8833: PPUSH
8834: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8838: LD_VAR 0 2
8842: PUSH
8843: LD_INT 1
8845: ARRAY
8846: PPUSH
8847: LD_INT 2
8849: PPUSH
8850: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8854: LD_INT 10
8856: PPUSH
8857: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8861: LD_VAR 0 2
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PPUSH
8870: LD_STRING D1a-Merc1-2
8872: PPUSH
8873: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8877: LD_INT 7
8879: PPUSH
8880: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8884: LD_VAR 0 2
8888: PUSH
8889: LD_INT 1
8891: ARRAY
8892: PPUSH
8893: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8897: LD_VAR 0 2
8901: PUSH
8902: LD_INT 2
8904: ARRAY
8905: PPUSH
8906: LD_INT 10
8908: PPUSH
8909: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8913: LD_VAR 0 2
8917: PUSH
8918: LD_INT 2
8920: ARRAY
8921: PPUSH
8922: LD_STRING D1a-FMerc2-2
8924: PPUSH
8925: CALL_OW 88
// wait ( 0 0$1 ) ;
8929: LD_INT 35
8931: PPUSH
8932: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8936: LD_INT 7
8938: PPUSH
8939: CALL_OW 85
// wait ( 0 0$2 ) ;
8943: LD_INT 70
8945: PPUSH
8946: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8950: LD_EXP 44
8954: PPUSH
8955: LD_STRING D1a-Saliba-1
8957: PPUSH
8958: CALL_OW 91
// KillUnit ( Saliba ) ;
8962: LD_EXP 44
8966: PPUSH
8967: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8971: LD_VAR 0 2
8975: PUSH
8976: LD_INT 3
8978: ARRAY
8979: PPUSH
8980: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8984: LD_EXP 21
8988: PPUSH
8989: CALL_OW 85
// wait ( 0 0$1 ) ;
8993: LD_INT 35
8995: PPUSH
8996: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
9000: LD_VAR 0 5
9004: PPUSH
9005: LD_INT 88
9007: PPUSH
9008: LD_INT 141
9010: PPUSH
9011: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
9015: LD_VAR 0 5
9019: PPUSH
9020: LD_INT 70
9022: PPUSH
9023: CALL_OW 202
// wait ( 0 0$2 ) ;
9027: LD_INT 70
9029: PPUSH
9030: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
9034: LD_INT 2
9036: PPUSH
9037: LD_INT 1
9039: PPUSH
9040: LD_INT 2
9042: PPUSH
9043: LD_INT 1
9045: PPUSH
9046: CALL_OW 80
// InGameOff ;
9050: CALL_OW 9
// ComWalk ( sols ) ;
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
9063: LD_STRING M1
9065: PPUSH
9066: CALL_OW 337
// game_speed := 4 ;
9070: LD_ADDR_OWVAR 65
9074: PUSH
9075: LD_INT 4
9077: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
9078: LD_INT 111
9080: PPUSH
9081: LD_INT 135
9083: PPUSH
9084: LD_INT 1
9086: PPUSH
9087: CALL_OW 331
// SaveForQuickRestart ;
9091: CALL_OW 22
// ar_run := true ;
9095: LD_ADDR_EXP 5
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9103: LD_INT 35
9105: PPUSH
9106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 91
9122: PUSH
9123: LD_INT 7
9125: PUSH
9126: LD_INT 10
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PPUSH
9138: CALL_OW 69
9142: PUSH
9143: LD_INT 7
9145: PPUSH
9146: CALL_OW 256
9150: PUSH
9151: LD_INT 999
9153: LESS
9154: OR
9155: IFFALSE 9103
// if GetSide ( ar_dep_s ) = 2 then
9157: LD_INT 7
9159: PPUSH
9160: CALL_OW 255
9164: PUSH
9165: LD_INT 2
9167: EQUAL
9168: IFFALSE 9180
// SetSide ( ar_dep_s , 1 ) ;
9170: LD_INT 7
9172: PPUSH
9173: LD_INT 1
9175: PPUSH
9176: CALL_OW 235
// end ;
9180: LD_VAR 0 1
9184: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
9185: LD_EXP 5
9189: IFFALSE 9549
9191: GO 9193
9193: DISABLE
9194: LD_INT 0
9196: PPUSH
9197: PPUSH
9198: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: LD_EXP 40
9208: PUSH
9209: LD_EXP 36
9213: PPUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 21
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 72
9246: ADD
9247: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
9248: LD_VAR 0 2
9252: PPUSH
9253: LD_INT 5
9255: PPUSH
9256: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
9260: LD_INT 5
9262: PPUSH
9263: LD_INT 1
9265: PPUSH
9266: CALL_OW 343
// k := 1 ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: LD_INT 1
9277: ST_TO_ADDR
// for i in tmp do
9278: LD_ADDR_VAR 0 1
9282: PUSH
9283: LD_VAR 0 2
9287: PUSH
9288: FOR_IN
9289: IFFALSE 9374
// begin if IsInUnit ( i ) then
9291: LD_VAR 0 1
9295: PPUSH
9296: CALL_OW 310
9300: IFFALSE 9311
// ComExitBuilding ( i ) ;
9302: LD_VAR 0 1
9306: PPUSH
9307: CALL_OW 122
// if GetClass ( i ) = 3 then
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 257
9320: PUSH
9321: LD_INT 3
9323: EQUAL
9324: IFFALSE 9360
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
9326: LD_VAR 0 1
9330: PPUSH
9331: LD_EXP 41
9335: PUSH
9336: LD_VAR 0 3
9340: ARRAY
9341: PPUSH
9342: CALL_OW 180
// k := k + 1 ;
9346: LD_ADDR_VAR 0 3
9350: PUSH
9351: LD_VAR 0 3
9355: PUSH
9356: LD_INT 1
9358: PLUS
9359: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 173
// end ;
9372: GO 9288
9374: POP
9375: POP
// ar_patrol := true ;
9376: LD_ADDR_EXP 7
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
9384: LD_INT 10
9386: PPUSH
9387: CALL_OW 67
// for i in tmp do
9391: LD_ADDR_VAR 0 1
9395: PUSH
9396: LD_VAR 0 2
9400: PUSH
9401: FOR_IN
9402: IFFALSE 9430
// if not HasTask ( i ) then
9404: LD_VAR 0 1
9408: PPUSH
9409: CALL_OW 314
9413: NOT
9414: IFFALSE 9428
// ComMoveToArea ( i , escape_area ) ;
9416: LD_VAR 0 1
9420: PPUSH
9421: LD_INT 10
9423: PPUSH
9424: CALL_OW 113
9428: GO 9401
9430: POP
9431: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9432: LD_ADDR_VAR 0 3
9436: PUSH
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 95
9444: PUSH
9445: LD_INT 10
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: ST_TO_ADDR
// if k then
9457: LD_VAR 0 3
9461: IFFALSE 9530
// for i in k do
9463: LD_ADDR_VAR 0 1
9467: PUSH
9468: LD_VAR 0 3
9472: PUSH
9473: FOR_IN
9474: IFFALSE 9528
// begin if IsInUnit ( i ) then
9476: LD_VAR 0 1
9480: PPUSH
9481: CALL_OW 310
9485: IFFALSE 9501
// RemoveUnit ( IsInUnit ( i ) ) ;
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 310
9496: PPUSH
9497: CALL_OW 64
// RemoveUnit ( i ) ;
9501: LD_VAR 0 1
9505: PPUSH
9506: CALL_OW 64
// tmp := tmp diff i ;
9510: LD_ADDR_VAR 0 2
9514: PUSH
9515: LD_VAR 0 2
9519: PUSH
9520: LD_VAR 0 1
9524: DIFF
9525: ST_TO_ADDR
// end ;
9526: GO 9473
9528: POP
9529: POP
// until tmp = [ ] ;
9530: LD_VAR 0 2
9534: PUSH
9535: EMPTY
9536: EQUAL
9537: IFFALSE 9384
// ChangeSideFog ( 5 , 5 ) ;
9539: LD_INT 5
9541: PPUSH
9542: LD_INT 5
9544: PPUSH
9545: CALL_OW 343
// end ;
9549: PPOPN 3
9551: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9552: LD_EXP 7
9556: IFFALSE 9846
9558: GO 9560
9560: DISABLE
9561: LD_INT 0
9563: PPUSH
9564: PPUSH
9565: PPUSH
// begin uc_side := 2 ;
9566: LD_ADDR_OWVAR 20
9570: PUSH
9571: LD_INT 2
9573: ST_TO_ADDR
// uc_nation := 2 ;
9574: LD_ADDR_OWVAR 21
9578: PUSH
9579: LD_INT 2
9581: ST_TO_ADDR
// InitHc ;
9582: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9586: LD_INT 1
9588: PPUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_INT 6
9594: PPUSH
9595: CALL_OW 380
// un := CreateHuman ;
9599: LD_ADDR_VAR 0 2
9603: PUSH
9604: CALL_OW 44
9608: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9609: LD_INT 14
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: LD_INT 1
9617: PPUSH
9618: LD_INT 27
9620: PPUSH
9621: LD_INT 98
9623: PPUSH
9624: CALL 54656 0 5
// veh := CreateVehicle ;
9628: LD_ADDR_VAR 0 3
9632: PUSH
9633: CALL_OW 45
9637: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 4
9645: PPUSH
9646: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_INT 179
9657: PPUSH
9658: LD_INT 135
9660: PPUSH
9661: LD_INT 0
9663: PPUSH
9664: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9668: LD_VAR 0 2
9672: PPUSH
9673: LD_VAR 0 3
9677: PPUSH
9678: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9682: LD_VAR 0 2
9686: PPUSH
9687: LD_INT 126
9689: PPUSH
9690: LD_INT 133
9692: PPUSH
9693: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9697: LD_INT 10
9699: PPUSH
9700: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9704: LD_INT 1
9706: PPUSH
9707: LD_VAR 0 3
9711: PPUSH
9712: CALL_OW 292
9716: PUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_INT 7
9724: PPUSH
9725: CALL_OW 296
9729: PUSH
9730: LD_INT 9
9732: LESS
9733: OR
9734: IFFALSE 9697
// ComHold ( veh ) ;
9736: LD_VAR 0 3
9740: PPUSH
9741: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9745: LD_VAR 0 2
9749: PPUSH
9750: LD_STRING D2aa-Ar1-1
9752: PPUSH
9753: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9757: LD_VAR 0 2
9761: PPUSH
9762: LD_INT 177
9764: PPUSH
9765: LD_INT 96
9767: PPUSH
9768: CALL_OW 111
// AddComExitVehicle ( un ) ;
9772: LD_VAR 0 2
9776: PPUSH
9777: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9781: LD_INT 35
9783: PPUSH
9784: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9788: LD_VAR 0 2
9792: PPUSH
9793: LD_INT 204
9795: PPUSH
9796: CALL_OW 296
9800: PUSH
9801: LD_INT 15
9803: LESS
9804: IFFALSE 9781
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9806: LD_ADDR_EXP 50
9810: PUSH
9811: LD_EXP 50
9815: PPUSH
9816: LD_INT 3
9818: PUSH
9819: LD_EXP 50
9823: PUSH
9824: LD_INT 3
9826: ARRAY
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PPUSH
9836: LD_VAR 0 2
9840: PPUSH
9841: CALL 54778 0 3
9845: ST_TO_ADDR
// end ;
9846: PPOPN 3
9848: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9849: LD_INT 7
9851: PPUSH
9852: CALL_OW 255
9856: PUSH
9857: LD_INT 1
9859: EQUAL
9860: PUSH
9861: LD_INT 7
9863: PPUSH
9864: CALL_OW 301
9868: OR
9869: IFFALSE 12293
9871: GO 9873
9873: DISABLE
9874: LD_INT 0
9876: PPUSH
9877: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9878: LD_ADDR_VAR 0 1
9882: PUSH
9883: LD_EXP 36
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 72
9902: PUSH
9903: FOR_IN
9904: IFFALSE 9920
// SetSide ( i , 1 ) ;
9906: LD_VAR 0 1
9910: PPUSH
9911: LD_INT 1
9913: PPUSH
9914: CALL_OW 235
9918: GO 9903
9920: POP
9921: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 46
9929: PUSH
9930: LD_INT 41
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 50
9939: PUSH
9940: LD_INT 25
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 57
9949: PUSH
9950: LD_INT 75
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 75
9959: PUSH
9960: LD_INT 89
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 51
9969: PUSH
9970: LD_INT 45
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 95
9979: PUSH
9980: LD_INT 95
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 84
9989: PUSH
9990: LD_INT 77
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 101
9999: PUSH
10000: LD_INT 76
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 118
10009: PUSH
10010: LD_INT 81
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 139
10019: PUSH
10020: LD_INT 97
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 129
10029: PUSH
10030: LD_INT 114
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 154
10039: PUSH
10040: LD_INT 111
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: ST_TO_ADDR
// base_captured := true ;
10061: LD_ADDR_EXP 6
10065: PUSH
10066: LD_INT 1
10068: ST_TO_ADDR
// DialogueOn ;
10069: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10073: LD_EXP 21
10077: PPUSH
10078: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
10082: LD_EXP 21
10086: PPUSH
10087: LD_STRING D2-JMM-1
10089: PPUSH
10090: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10094: LD_EXP 30
10098: PPUSH
10099: LD_STRING D2-Pow-1
10101: PPUSH
10102: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10106: LD_EXP 21
10110: PPUSH
10111: LD_STRING D2-JMM-2
10113: PPUSH
10114: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING D2-Pow-2
10125: PPUSH
10126: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING D2-JMM-3
10137: PPUSH
10138: CALL_OW 88
// DialogueOff ;
10142: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
10146: LD_STRING M2
10148: PPUSH
10149: CALL_OW 337
// Wait ( 0 0$2 ) ;
10153: LD_INT 70
10155: PPUSH
10156: CALL_OW 67
// if IsOk ( Gary ) then
10160: LD_EXP 32
10164: PPUSH
10165: CALL_OW 302
10169: IFFALSE 10183
// Say ( Gary , D2a-Gary-1 ) ;
10171: LD_EXP 32
10175: PPUSH
10176: LD_STRING D2a-Gary-1
10178: PPUSH
10179: CALL_OW 88
// if IsOk ( Bobby ) then
10183: LD_EXP 24
10187: PPUSH
10188: CALL_OW 302
10192: IFFALSE 10206
// Say ( Bobby , D2a-Bobby-1 ) ;
10194: LD_EXP 24
10198: PPUSH
10199: LD_STRING D2a-Bobby-1
10201: PPUSH
10202: CALL_OW 88
// if IsOk ( Cyrus ) then
10206: LD_EXP 25
10210: PPUSH
10211: CALL_OW 302
10215: IFFALSE 10229
// Say ( Cyrus , D2a-Cyrus-1 ) ;
10217: LD_EXP 25
10221: PPUSH
10222: LD_STRING D2a-Cyrus-1
10224: PPUSH
10225: CALL_OW 88
// if IsOk ( Lisa ) then
10229: LD_EXP 22
10233: PPUSH
10234: CALL_OW 302
10238: IFFALSE 10252
// Say ( Lisa , D2a-Lisa-1 ) ;
10240: LD_EXP 22
10244: PPUSH
10245: LD_STRING D2a-Lisa-1
10247: PPUSH
10248: CALL_OW 88
// if IsOk ( Frank ) then
10252: LD_EXP 33
10256: PPUSH
10257: CALL_OW 302
10261: IFFALSE 10275
// Say ( Frank , D2a-Frank-1 ) ;
10263: LD_EXP 33
10267: PPUSH
10268: LD_STRING D2a-Frank-1
10270: PPUSH
10271: CALL_OW 88
// if IsOk ( Cornel ) then
10275: LD_EXP 31
10279: PPUSH
10280: CALL_OW 302
10284: IFFALSE 10298
// Say ( Cornel , D2a-Corn-1 ) ;
10286: LD_EXP 31
10290: PPUSH
10291: LD_STRING D2a-Corn-1
10293: PPUSH
10294: CALL_OW 88
// if IsOk ( Donaldson ) then
10298: LD_EXP 23
10302: PPUSH
10303: CALL_OW 302
10307: IFFALSE 10321
// Say ( Donaldson , D2a-Don-1 ) ;
10309: LD_EXP 23
10313: PPUSH
10314: LD_STRING D2a-Don-1
10316: PPUSH
10317: CALL_OW 88
// if IsOk ( Brown ) then
10321: LD_EXP 27
10325: PPUSH
10326: CALL_OW 302
10330: IFFALSE 10344
// Say ( Brown , D2a-Brown-1 ) ;
10332: LD_EXP 27
10336: PPUSH
10337: LD_STRING D2a-Brown-1
10339: PPUSH
10340: CALL_OW 88
// Wait ( 0 0$30 ) ;
10344: LD_INT 1050
10346: PPUSH
10347: CALL_OW 67
// if IsOk ( Frank ) then
10351: LD_EXP 33
10355: PPUSH
10356: CALL_OW 302
10360: IFFALSE 10626
// begin DialogueOn ;
10362: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
10366: LD_EXP 21
10370: PUSH
10371: LD_EXP 33
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
10384: LD_EXP 33
10388: PPUSH
10389: LD_STRING D3F-Frank-1
10391: PPUSH
10392: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
10396: LD_EXP 21
10400: PPUSH
10401: LD_STRING D3F-JMM-1
10403: PPUSH
10404: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10408: LD_EXP 33
10412: PPUSH
10413: LD_STRING D3F-Frank-2
10415: PPUSH
10416: CALL_OW 88
// case Query ( QFrank ) of 1 :
10420: LD_STRING QFrank
10422: PPUSH
10423: CALL_OW 97
10427: PUSH
10428: LD_INT 1
10430: DOUBLE
10431: EQUAL
10432: IFTRUE 10436
10434: GO 10459
10436: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10437: LD_EXP 21
10441: PPUSH
10442: LD_STRING D3Fa-JMM-1
10444: PPUSH
10445: CALL_OW 88
// us_scout := 1 ;
10449: LD_ADDR_EXP 8
10453: PUSH
10454: LD_INT 1
10456: ST_TO_ADDR
// end ; 2 :
10457: GO 10622
10459: LD_INT 2
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10589
10467: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10468: LD_EXP 21
10472: PPUSH
10473: LD_STRING D3Fb-JMM-1
10475: PPUSH
10476: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10480: LD_EXP 33
10484: PPUSH
10485: LD_STRING D3Fb-Frank-1
10487: PPUSH
10488: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10492: LD_STRING QFrank2
10494: PPUSH
10495: CALL_OW 97
10499: PUSH
10500: LD_INT 1
10502: DOUBLE
10503: EQUAL
10504: IFTRUE 10508
10506: GO 10555
10508: POP
// begin us_scout := 2 ;
10509: LD_ADDR_EXP 8
10513: PUSH
10514: LD_INT 2
10516: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10517: LD_EXP 21
10521: PPUSH
10522: LD_STRING D3Fba-JMM-1
10524: PPUSH
10525: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10529: LD_EXP 33
10533: PPUSH
10534: LD_STRING D3Fba-Frank-1
10536: PPUSH
10537: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10541: LD_EXP 21
10545: PPUSH
10546: LD_STRING D3Fba-JMM-2
10548: PPUSH
10549: CALL_OW 88
// end ; 2 :
10553: GO 10587
10555: LD_INT 2
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10586
10563: POP
// begin us_scout := 0 ;
10564: LD_ADDR_EXP 8
10568: PUSH
10569: LD_INT 0
10571: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10572: LD_EXP 21
10576: PPUSH
10577: LD_STRING D3Fbb-JMM-1
10579: PPUSH
10580: CALL_OW 88
// end ; end ;
10584: GO 10587
10586: POP
// end ; 3 :
10587: GO 10622
10589: LD_INT 3
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10621
10597: POP
// begin us_scout := - 1 ;
10598: LD_ADDR_EXP 8
10602: PUSH
10603: LD_INT 1
10605: NEG
10606: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10607: LD_EXP 21
10611: PPUSH
10612: LD_STRING D3Fc-JMM-1
10614: PPUSH
10615: CALL_OW 88
// end ; end ;
10619: GO 10622
10621: POP
// DialogueOff ;
10622: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10626: LD_EXP 8
10630: PUSH
10631: LD_INT 1
10633: NEG
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: IN
10642: IFFALSE 10646
// exit ;
10644: GO 12293
// if us_scout in [ 1 , 2 ] then
10646: LD_EXP 8
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: IN
10661: IFFALSE 11360
// begin if IsInUnit ( Frank ) then
10663: LD_EXP 33
10667: PPUSH
10668: CALL_OW 310
10672: IFFALSE 10683
// ComExitBuilding ( Frank ) ;
10674: LD_EXP 33
10678: PPUSH
10679: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10683: LD_EXP 33
10687: PPUSH
10688: CALL_OW 311
10692: IFFALSE 10703
// ComExitVehicle ( Frank ) ;
10694: LD_EXP 33
10698: PPUSH
10699: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10703: LD_EXP 33
10707: PPUSH
10708: LD_INT 4
10710: PPUSH
10711: CALL_OW 235
// wait ( 0 0$1 ) ;
10715: LD_INT 35
10717: PPUSH
10718: CALL_OW 67
// if us_scout = 2 then
10722: LD_EXP 8
10726: PUSH
10727: LD_INT 2
10729: EQUAL
10730: IFFALSE 11098
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10732: LD_EXP 33
10736: PPUSH
10737: LD_INT 75
10739: PPUSH
10740: LD_INT 63
10742: PPUSH
10743: CALL_OW 111
// AddComHold ( Frank ) ;
10747: LD_EXP 33
10751: PPUSH
10752: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10756: LD_EXP 33
10760: PPUSH
10761: LD_INT 770
10763: PPUSH
10764: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10768: LD_EXP 33
10772: PPUSH
10773: LD_INT 100
10775: PPUSH
10776: LD_INT 75
10778: PPUSH
10779: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10783: LD_EXP 33
10787: PPUSH
10788: LD_INT 123
10790: PPUSH
10791: LD_INT 103
10793: PPUSH
10794: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10798: LD_EXP 33
10802: PPUSH
10803: LD_INT 138
10805: PPUSH
10806: LD_INT 108
10808: PPUSH
10809: CALL_OW 171
// AddComHold ( Frank ) ;
10813: LD_EXP 33
10817: PPUSH
10818: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10822: LD_INT 35
10824: PPUSH
10825: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10829: LD_EXP 33
10833: PPUSH
10834: LD_INT 138
10836: PPUSH
10837: LD_INT 108
10839: PPUSH
10840: CALL_OW 307
10844: IFFALSE 10822
// AddComMoveXY ( Frank , 125 , 132 ) ;
10846: LD_EXP 33
10850: PPUSH
10851: LD_INT 125
10853: PPUSH
10854: LD_INT 132
10856: PPUSH
10857: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10861: LD_INT 35
10863: PPUSH
10864: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10868: LD_INT 1
10870: PPUSH
10871: LD_EXP 33
10875: PPUSH
10876: CALL_OW 292
10880: PUSH
10881: LD_EXP 33
10885: PPUSH
10886: LD_INT 7
10888: PPUSH
10889: CALL_OW 296
10893: PUSH
10894: LD_INT 7
10896: LESS
10897: OR
10898: IFFALSE 10861
// DialogueOn ;
10900: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10904: LD_EXP 33
10908: PPUSH
10909: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10913: LD_INT 10
10915: PPUSH
10916: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10920: LD_EXP 21
10924: PPUSH
10925: LD_STRING D4Fa-JMM-1
10927: PPUSH
10928: CALL_OW 88
// for i in points do
10932: LD_ADDR_VAR 0 1
10936: PUSH
10937: LD_VAR 0 2
10941: PUSH
10942: FOR_IN
10943: IFFALSE 11001
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10945: LD_VAR 0 1
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 1
10958: PUSH
10959: LD_INT 2
10961: ARRAY
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: LD_INT 20
10968: NEG
10969: PPUSH
10970: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10974: LD_VAR 0 1
10978: PUSH
10979: LD_INT 1
10981: ARRAY
10982: PPUSH
10983: LD_VAR 0 1
10987: PUSH
10988: LD_INT 2
10990: ARRAY
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 331
// end ;
10999: GO 10942
11001: POP
11002: POP
// dwait ( 0 0$0.5 ) ;
11003: LD_INT 18
11005: PPUSH
11006: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11010: LD_INT 42
11012: PPUSH
11013: LD_INT 27
11015: PPUSH
11016: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
11020: LD_EXP 33
11024: PPUSH
11025: LD_STRING D4Fa-Frank-1
11027: PPUSH
11028: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11032: LD_INT 18
11034: PPUSH
11035: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
11039: LD_EXP 21
11043: PPUSH
11044: LD_STRING D4Fa-JMM-2
11046: PPUSH
11047: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
11051: LD_INT 118
11053: PPUSH
11054: LD_INT 80
11056: PPUSH
11057: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
11061: LD_EXP 33
11065: PPUSH
11066: LD_STRING D4Fa-Frank-2
11068: PPUSH
11069: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11073: LD_INT 10
11075: PPUSH
11076: CALL_OW 68
// DialogueOff ;
11080: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11084: LD_EXP 33
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 235
// end else
11096: GO 11360
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11098: LD_INT 2
11100: PPUSH
11101: LD_INT 4
11103: PPUSH
11104: LD_INT 2
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
11114: LD_EXP 33
11118: PPUSH
11119: LD_INT 75
11121: PPUSH
11122: LD_INT 63
11124: PPUSH
11125: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
11129: LD_EXP 33
11133: PPUSH
11134: LD_INT 175
11136: PPUSH
11137: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
11141: LD_EXP 33
11145: PPUSH
11146: LD_INT 102
11148: PPUSH
11149: LD_INT 76
11151: PPUSH
11152: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
11156: LD_EXP 33
11160: PPUSH
11161: LD_INT 108
11163: PPUSH
11164: LD_INT 70
11166: PPUSH
11167: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11171: LD_INT 35
11173: PPUSH
11174: CALL_OW 67
// until See ( 2 , Frank ) ;
11178: LD_INT 2
11180: PPUSH
11181: LD_EXP 33
11185: PPUSH
11186: CALL_OW 292
11190: IFFALSE 11171
// ComMoveXY ( Frank , 112 , 118 ) ;
11192: LD_EXP 33
11196: PPUSH
11197: LD_INT 112
11199: PPUSH
11200: LD_INT 118
11202: PPUSH
11203: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
11207: LD_EXP 33
11211: PPUSH
11212: CALL_OW 256
11216: PUSH
11217: LD_INT 750
11219: GREATEREQUAL
11220: IFFALSE 11234
// SetLives ( Frank , 700 ) ;
11222: LD_EXP 33
11226: PPUSH
11227: LD_INT 700
11229: PPUSH
11230: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11234: LD_INT 35
11236: PPUSH
11237: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
11241: LD_INT 1
11243: PPUSH
11244: LD_EXP 33
11248: PPUSH
11249: CALL_OW 292
11253: PUSH
11254: LD_EXP 33
11258: PPUSH
11259: LD_INT 7
11261: PPUSH
11262: CALL_OW 296
11266: PUSH
11267: LD_INT 17
11269: LESS
11270: OR
11271: IFFALSE 11234
// DialogueOn ;
11273: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
11277: LD_EXP 33
11281: PPUSH
11282: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
11286: LD_EXP 33
11290: PPUSH
11291: LD_STRING D4Fb-Frank-1
11293: PPUSH
11294: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
11298: LD_EXP 21
11302: PPUSH
11303: LD_STRING D4Fb-JMM-1
11305: PPUSH
11306: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
11310: LD_INT 2
11312: PPUSH
11313: LD_STRING D4Fb-FSci1-1
11315: PPUSH
11316: CALL 16197 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
11320: LD_EXP 33
11324: PPUSH
11325: LD_STRING D4Fb-Frank-2
11327: PPUSH
11328: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
11332: LD_EXP 21
11336: PPUSH
11337: LD_STRING D4Fb-JMM-2
11339: PPUSH
11340: CALL_OW 88
// DialogueOff ;
11344: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11348: LD_EXP 33
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
11360: LD_EXP 34
11364: PPUSH
11365: CALL_OW 302
11369: PUSH
11370: LD_EXP 33
11374: NOT
11375: AND
11376: IFFALSE 11524
// begin DialogueOn ;
11378: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
11382: LD_EXP 21
11386: PUSH
11387: LD_EXP 34
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PPUSH
11396: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11400: LD_EXP 34
11404: PPUSH
11405: LD_STRING D3Y-Yam-1
11407: PPUSH
11408: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11412: LD_EXP 21
11416: PPUSH
11417: LD_STRING D3Y-JMM-1
11419: PPUSH
11420: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11424: LD_EXP 34
11428: PPUSH
11429: LD_STRING D3Y-Yam-2
11431: PPUSH
11432: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11436: LD_STRING QYamoko
11438: PPUSH
11439: CALL_OW 97
11443: PUSH
11444: LD_INT 1
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11487
11452: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11453: LD_EXP 21
11457: PPUSH
11458: LD_STRING D3Ya-JMM-1
11460: PPUSH
11461: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11465: LD_EXP 34
11469: PPUSH
11470: LD_STRING D3Ya-Yam-1
11472: PPUSH
11473: CALL_OW 88
// us_scout := 1 ;
11477: LD_ADDR_EXP 8
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// end ; 2 :
11485: GO 11520
11487: LD_INT 2
11489: DOUBLE
11490: EQUAL
11491: IFTRUE 11495
11493: GO 11519
11495: POP
// begin us_scout := - 1 ;
11496: LD_ADDR_EXP 8
11500: PUSH
11501: LD_INT 1
11503: NEG
11504: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11505: LD_EXP 21
11509: PPUSH
11510: LD_STRING D3Yb-JMM-1
11512: PPUSH
11513: CALL_OW 88
// end ; end ;
11517: GO 11520
11519: POP
// DialogueOff ;
11520: CALL_OW 7
// end ; if Frank then
11524: LD_EXP 33
11528: IFFALSE 11532
// exit ;
11530: GO 12293
// if us_scout in [ - 1 , 0 ] then
11532: LD_EXP 8
11536: PUSH
11537: LD_INT 1
11539: NEG
11540: PUSH
11541: LD_INT 0
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: IN
11548: IFFALSE 11552
// exit ;
11550: GO 12293
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11552: LD_ADDR_EXP 8
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: LD_INT 1
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_OWVAR 67
11575: ARRAY
11576: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11577: LD_EXP 8
11581: PUSH
11582: LD_INT 1
11584: PUSH
11585: LD_INT 2
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: IN
11592: IFFALSE 12293
// begin if IsInUnit ( Kikuchi ) then
11594: LD_EXP 34
11598: PPUSH
11599: CALL_OW 310
11603: IFFALSE 11614
// ComExitBuilding ( Kikuchi ) ;
11605: LD_EXP 34
11609: PPUSH
11610: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11614: LD_EXP 34
11618: PPUSH
11619: CALL_OW 311
11623: IFFALSE 11634
// ComExitVehicle ( Kikuchi ) ;
11625: LD_EXP 34
11629: PPUSH
11630: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_INT 4
11641: PPUSH
11642: CALL_OW 235
// wait ( 0 0$1 ) ;
11646: LD_INT 35
11648: PPUSH
11649: CALL_OW 67
// if us_scout = 2 then
11653: LD_EXP 8
11657: PUSH
11658: LD_INT 2
11660: EQUAL
11661: IFFALSE 12041
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11663: LD_EXP 34
11667: PPUSH
11668: LD_INT 75
11670: PPUSH
11671: LD_INT 63
11673: PPUSH
11674: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11678: LD_EXP 34
11682: PPUSH
11683: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11687: LD_EXP 34
11691: PPUSH
11692: LD_INT 770
11694: PPUSH
11695: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11699: LD_EXP 34
11703: PPUSH
11704: LD_INT 100
11706: PPUSH
11707: LD_INT 75
11709: PPUSH
11710: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11714: LD_EXP 34
11718: PPUSH
11719: LD_INT 123
11721: PPUSH
11722: LD_INT 103
11724: PPUSH
11725: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11729: LD_EXP 34
11733: PPUSH
11734: LD_INT 138
11736: PPUSH
11737: LD_INT 108
11739: PPUSH
11740: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11744: LD_EXP 34
11748: PPUSH
11749: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11753: LD_INT 35
11755: PPUSH
11756: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11760: LD_EXP 34
11764: PPUSH
11765: LD_INT 138
11767: PPUSH
11768: LD_INT 108
11770: PPUSH
11771: CALL_OW 307
11775: IFFALSE 11753
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11777: LD_EXP 34
11781: PPUSH
11782: LD_INT 125
11784: PPUSH
11785: LD_INT 132
11787: PPUSH
11788: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11792: LD_INT 35
11794: PPUSH
11795: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11799: LD_INT 1
11801: PPUSH
11802: LD_EXP 34
11806: PPUSH
11807: CALL_OW 292
11811: PUSH
11812: LD_EXP 34
11816: PPUSH
11817: LD_INT 7
11819: PPUSH
11820: CALL_OW 296
11824: PUSH
11825: LD_INT 7
11827: LESS
11828: OR
11829: IFFALSE 11792
// DialogueOn ;
11831: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11835: LD_EXP 34
11839: PPUSH
11840: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11851: LD_EXP 34
11855: PPUSH
11856: LD_STRING D4Ya-Yam-1
11858: PPUSH
11859: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11863: LD_EXP 21
11867: PPUSH
11868: LD_STRING D4Ya-JMM-1
11870: PPUSH
11871: CALL_OW 88
// for i in points do
11875: LD_ADDR_VAR 0 1
11879: PUSH
11880: LD_VAR 0 2
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11944
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11888: LD_VAR 0 1
11892: PUSH
11893: LD_INT 1
11895: ARRAY
11896: PPUSH
11897: LD_VAR 0 1
11901: PUSH
11902: LD_INT 2
11904: ARRAY
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: LD_INT 20
11911: NEG
11912: PPUSH
11913: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11917: LD_VAR 0 1
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 2
11933: ARRAY
11934: PPUSH
11935: LD_INT 1
11937: PPUSH
11938: CALL_OW 331
// end ;
11942: GO 11885
11944: POP
11945: POP
// dwait ( 0 0$0.5 ) ;
11946: LD_INT 18
11948: PPUSH
11949: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11953: LD_INT 42
11955: PPUSH
11956: LD_INT 27
11958: PPUSH
11959: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11963: LD_EXP 34
11967: PPUSH
11968: LD_STRING D4Ya-Yam-2
11970: PPUSH
11971: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11975: LD_INT 18
11977: PPUSH
11978: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11982: LD_INT 118
11984: PPUSH
11985: LD_INT 80
11987: PPUSH
11988: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11992: LD_EXP 21
11996: PPUSH
11997: LD_STRING D4Ya-JMM-2
11999: PPUSH
12000: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
12004: LD_EXP 34
12008: PPUSH
12009: LD_STRING D4Ya-Yam-3
12011: PPUSH
12012: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
12016: LD_INT 10
12018: PPUSH
12019: CALL_OW 68
// DialogueOff ;
12023: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
12027: LD_EXP 34
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 235
// end else
12039: GO 12293
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
12041: LD_INT 2
12043: PPUSH
12044: LD_INT 4
12046: PPUSH
12047: LD_INT 2
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
12057: LD_EXP 34
12061: PPUSH
12062: LD_INT 75
12064: PPUSH
12065: LD_INT 63
12067: PPUSH
12068: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
12072: LD_EXP 34
12076: PPUSH
12077: LD_INT 175
12079: PPUSH
12080: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
12084: LD_EXP 34
12088: PPUSH
12089: LD_INT 102
12091: PPUSH
12092: LD_INT 76
12094: PPUSH
12095: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
12099: LD_EXP 34
12103: PPUSH
12104: LD_INT 108
12106: PPUSH
12107: LD_INT 70
12109: PPUSH
12110: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
12114: LD_INT 35
12116: PPUSH
12117: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
12121: LD_INT 2
12123: PPUSH
12124: LD_EXP 34
12128: PPUSH
12129: CALL_OW 292
12133: IFFALSE 12114
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
12135: LD_EXP 34
12139: PPUSH
12140: LD_INT 112
12142: PPUSH
12143: LD_INT 118
12145: PPUSH
12146: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
12150: LD_EXP 34
12154: PPUSH
12155: CALL_OW 256
12159: PUSH
12160: LD_INT 750
12162: GREATEREQUAL
12163: IFFALSE 12177
// SetLives ( Kikuchi , 700 ) ;
12165: LD_EXP 34
12169: PPUSH
12170: LD_INT 700
12172: PPUSH
12173: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
12177: LD_INT 35
12179: PPUSH
12180: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
12184: LD_INT 1
12186: PPUSH
12187: LD_EXP 34
12191: PPUSH
12192: CALL_OW 292
12196: PUSH
12197: LD_EXP 34
12201: PPUSH
12202: LD_INT 7
12204: PPUSH
12205: CALL_OW 296
12209: PUSH
12210: LD_INT 17
12212: LESS
12213: OR
12214: IFFALSE 12177
// DialogueOn ;
12216: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
12220: LD_EXP 34
12224: PPUSH
12225: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
12229: LD_EXP 34
12233: PPUSH
12234: LD_STRING D4Yb-Yam-1
12236: PPUSH
12237: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
12241: LD_EXP 21
12245: PPUSH
12246: LD_STRING D4Yb-JMM-1
12248: PPUSH
12249: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
12253: LD_EXP 34
12257: PPUSH
12258: LD_STRING D4Yb-Yam-2
12260: PPUSH
12261: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
12265: LD_EXP 21
12269: PPUSH
12270: LD_STRING D4Yb-JMM-2
12272: PPUSH
12273: CALL_OW 88
// DialogueOff ;
12277: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
12281: LD_EXP 34
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: CALL_OW 235
// end ; end ; end ;
12293: PPOPN 2
12295: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
12296: LD_EXP 6
12300: IFFALSE 13333
12302: GO 12304
12304: DISABLE
12305: LD_INT 0
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
// begin enable ;
12311: ENABLE
// if not seen [ 1 ] then
12312: LD_EXP 9
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: NOT
12321: IFFALSE 12501
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
12323: LD_ADDR_VAR 0 2
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 11
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 33
12353: PUSH
12354: LD_INT 4
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: ST_TO_ADDR
// if tmp then
12375: LD_VAR 0 2
12379: IFFALSE 12501
// for i in tmp do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_VAR 0 2
12390: PUSH
12391: FOR_IN
12392: IFFALSE 12499
// if See ( 1 , i ) then
12394: LD_INT 1
12396: PPUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 292
12406: IFFALSE 12497
// begin seen := Replace ( seen , 1 , true ) ;
12408: LD_ADDR_EXP 9
12412: PUSH
12413: LD_EXP 9
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: LD_INT 1
12423: PPUSH
12424: CALL_OW 1
12428: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12429: LD_INT 1
12431: PPUSH
12432: CALL 16019 0 1
12436: IFFALSE 12497
// begin DialogueOn ;
12438: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12442: LD_VAR 0 1
12446: PPUSH
12447: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12451: LD_INT 10
12453: PPUSH
12454: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12458: LD_ADDR_VAR 0 3
12462: PUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_STRING D5a-Sol2-1
12468: PPUSH
12469: CALL 16197 0 2
12473: ST_TO_ADDR
// if not un then
12474: LD_VAR 0 3
12478: NOT
12479: IFFALSE 12491
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12481: LD_INT 2
12483: PPUSH
12484: LD_STRING D5a-FSol2-1
12486: PPUSH
12487: CALL 16197 0 2
// DialogueOff ;
12491: CALL_OW 7
// break ;
12495: GO 12499
// end ; end ;
12497: GO 12391
12499: POP
12500: POP
// end ; if not seen [ 2 ] then
12501: LD_EXP 9
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: NOT
12510: IFFALSE 12735
// begin can_kamikazed := true ;
12512: LD_ADDR_EXP 10
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12520: LD_ADDR_VAR 0 2
12524: PUSH
12525: LD_INT 22
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 25
12537: PUSH
12538: LD_INT 17
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: ST_TO_ADDR
// if tmp then
12554: LD_VAR 0 2
12558: IFFALSE 12735
// for i in tmp do
12560: LD_ADDR_VAR 0 1
12564: PUSH
12565: LD_VAR 0 2
12569: PUSH
12570: FOR_IN
12571: IFFALSE 12733
// if See ( 1 , i ) then
12573: LD_INT 1
12575: PPUSH
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 292
12585: IFFALSE 12731
// begin seen := Replace ( seen , 2 , true ) ;
12587: LD_ADDR_EXP 9
12591: PUSH
12592: LD_EXP 9
12596: PPUSH
12597: LD_INT 2
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 1
12607: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12608: LD_INT 1
12610: PPUSH
12611: CALL 16019 0 1
12615: IFFALSE 12731
// begin DialogueOn ;
12617: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12630: LD_INT 10
12632: PPUSH
12633: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12637: LD_ADDR_VAR 0 3
12641: PUSH
12642: LD_INT 1
12644: PPUSH
12645: LD_STRING D5b-Sol1-1
12647: PPUSH
12648: CALL 16197 0 2
12652: ST_TO_ADDR
// if not un then
12653: LD_VAR 0 3
12657: NOT
12658: IFFALSE 12676
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12660: LD_ADDR_VAR 0 3
12664: PUSH
12665: LD_INT 2
12667: PPUSH
12668: LD_STRING D5b-FSol1-1
12670: PPUSH
12671: CALL 16197 0 2
12675: ST_TO_ADDR
// if un then
12676: LD_VAR 0 3
12680: IFFALSE 12725
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12682: LD_ADDR_VAR 0 4
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_STRING D5b-Sol2-1
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: CALL 16423 0 3
12702: ST_TO_ADDR
// if not un2 then
12703: LD_VAR 0 4
12707: NOT
12708: IFFALSE 12725
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12710: LD_INT 2
12712: PPUSH
12713: LD_STRING D5b-FSol2-1
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL 16423 0 3
// end ; DialogueOff ;
12725: CALL_OW 7
// break ;
12729: GO 12733
// end ; end ;
12731: GO 12570
12733: POP
12734: POP
// end ; if not seen [ 3 ] then
12735: LD_EXP 9
12739: PUSH
12740: LD_INT 3
12742: ARRAY
12743: NOT
12744: IFFALSE 12918
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12746: LD_ADDR_VAR 0 2
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 33
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: ST_TO_ADDR
// if tmp then
12780: LD_VAR 0 2
12784: IFFALSE 12918
// for i in tmp do
12786: LD_ADDR_VAR 0 1
12790: PUSH
12791: LD_VAR 0 2
12795: PUSH
12796: FOR_IN
12797: IFFALSE 12916
// if See ( 1 , i ) then
12799: LD_INT 1
12801: PPUSH
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 292
12811: IFFALSE 12914
// begin seen := Replace ( seen , 3 , true ) ;
12813: LD_ADDR_EXP 9
12817: PUSH
12818: LD_EXP 9
12822: PPUSH
12823: LD_INT 3
12825: PPUSH
12826: LD_INT 1
12828: PPUSH
12829: CALL_OW 1
12833: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12834: LD_INT 1
12836: PPUSH
12837: CALL 16019 0 1
12841: IFFALSE 12914
// begin DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12847: LD_VAR 0 1
12851: PPUSH
12852: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12856: LD_INT 10
12858: PPUSH
12859: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12863: LD_ADDR_VAR 0 3
12867: PUSH
12868: LD_INT 1
12870: PPUSH
12871: LD_STRING D8-Sol1-1
12873: PPUSH
12874: CALL 16197 0 2
12878: ST_TO_ADDR
// if not un then
12879: LD_VAR 0 3
12883: NOT
12884: IFFALSE 12896
// SayRand ( sex_female , D8-FSol1-1 ) ;
12886: LD_INT 2
12888: PPUSH
12889: LD_STRING D8-FSol1-1
12891: PPUSH
12892: CALL 16197 0 2
// Say ( JMM , D8-JMM-1 ) ;
12896: LD_EXP 21
12900: PPUSH
12901: LD_STRING D8-JMM-1
12903: PPUSH
12904: CALL_OW 88
// DialogueOff ;
12908: CALL_OW 7
// break ;
12912: GO 12916
// end ; end ;
12914: GO 12796
12916: POP
12917: POP
// end ; if not seen [ 4 ] then
12918: LD_EXP 9
12922: PUSH
12923: LD_INT 4
12925: ARRAY
12926: NOT
12927: IFFALSE 13089
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 33
12946: PUSH
12947: LD_INT 5
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 69
12962: ST_TO_ADDR
// if tmp then
12963: LD_VAR 0 2
12967: IFFALSE 13089
// for i in tmp do
12969: LD_ADDR_VAR 0 1
12973: PUSH
12974: LD_VAR 0 2
12978: PUSH
12979: FOR_IN
12980: IFFALSE 13087
// if See ( 1 , i ) then
12982: LD_INT 1
12984: PPUSH
12985: LD_VAR 0 1
12989: PPUSH
12990: CALL_OW 292
12994: IFFALSE 13085
// begin seen := Replace ( seen , 4 , true ) ;
12996: LD_ADDR_EXP 9
13000: PUSH
13001: LD_EXP 9
13005: PPUSH
13006: LD_INT 4
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 1
13016: ST_TO_ADDR
// if CanSayRand ( 1 ) then
13017: LD_INT 1
13019: PPUSH
13020: CALL 16019 0 1
13024: IFFALSE 13085
// begin DialogueOn ;
13026: CALL_OW 6
// CenterNowOnUnits ( i ) ;
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
13039: LD_INT 10
13041: PPUSH
13042: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
13046: LD_ADDR_VAR 0 3
13050: PUSH
13051: LD_INT 1
13053: PPUSH
13054: LD_STRING D5a-Sol1-1
13056: PPUSH
13057: CALL 16197 0 2
13061: ST_TO_ADDR
// if not un then
13062: LD_VAR 0 3
13066: NOT
13067: IFFALSE 13079
// SayRand ( sex_female , D5a-FSol1-1 ) ;
13069: LD_INT 2
13071: PPUSH
13072: LD_STRING D5a-FSol1-1
13074: PPUSH
13075: CALL 16197 0 2
// DialogueOff ;
13079: CALL_OW 7
// break ;
13083: GO 13087
// end ; end ;
13085: GO 12979
13087: POP
13088: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
13089: LD_EXP 9
13093: PUSH
13094: LD_INT 5
13096: ARRAY
13097: NOT
13098: PUSH
13099: LD_EXP 9
13103: PUSH
13104: LD_INT 3
13106: ARRAY
13107: AND
13108: IFFALSE 13282
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
13110: LD_ADDR_VAR 0 2
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 34
13127: PUSH
13128: LD_INT 31
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 69
13143: ST_TO_ADDR
// if tmp then
13144: LD_VAR 0 2
13148: IFFALSE 13282
// for i in tmp do
13150: LD_ADDR_VAR 0 1
13154: PUSH
13155: LD_VAR 0 2
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13280
// if See ( 1 , i ) then
13163: LD_INT 1
13165: PPUSH
13166: LD_VAR 0 1
13170: PPUSH
13171: CALL_OW 292
13175: IFFALSE 13278
// begin seen := Replace ( seen , 5 , true ) ;
13177: LD_ADDR_EXP 9
13181: PUSH
13182: LD_EXP 9
13186: PPUSH
13187: LD_INT 5
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 1
13197: ST_TO_ADDR
// if CanSayRand ( 1 ) then
13198: LD_INT 1
13200: PPUSH
13201: CALL 16019 0 1
13205: IFFALSE 13278
// begin DialogueOn ;
13207: CALL_OW 6
// CenterNowOnUnits ( i ) ;
13211: LD_VAR 0 1
13215: PPUSH
13216: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
13220: LD_INT 10
13222: PPUSH
13223: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: LD_INT 1
13234: PPUSH
13235: LD_STRING D8a-Sol2-1
13237: PPUSH
13238: CALL 16197 0 2
13242: ST_TO_ADDR
// if not un then
13243: LD_VAR 0 3
13247: NOT
13248: IFFALSE 13260
// SayRand ( sex_female , D8a-FSol2-1 ) ;
13250: LD_INT 2
13252: PPUSH
13253: LD_STRING D8a-FSol2-1
13255: PPUSH
13256: CALL 16197 0 2
// Say ( JMM , D8a-JMM-1 ) ;
13260: LD_EXP 21
13264: PPUSH
13265: LD_STRING D8a-JMM-1
13267: PPUSH
13268: CALL_OW 88
// DialogueOff ;
13272: CALL_OW 7
// break ;
13276: GO 13280
// end ; end ;
13278: GO 13160
13280: POP
13281: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
13282: LD_EXP 9
13286: PUSH
13287: LD_INT 1
13289: ARRAY
13290: PUSH
13291: LD_EXP 9
13295: PUSH
13296: LD_INT 2
13298: ARRAY
13299: AND
13300: PUSH
13301: LD_EXP 9
13305: PUSH
13306: LD_INT 3
13308: ARRAY
13309: AND
13310: PUSH
13311: LD_EXP 9
13315: PUSH
13316: LD_INT 4
13318: ARRAY
13319: AND
13320: PUSH
13321: LD_EXP 9
13325: PUSH
13326: LD_INT 5
13328: ARRAY
13329: AND
13330: IFFALSE 13333
// disable ;
13332: DISABLE
// end ;
13333: PPOPN 4
13335: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
13336: LD_EXP 10
13340: PUSH
13341: LD_EXP 11
13345: AND
13346: IFFALSE 13544
13348: GO 13350
13350: DISABLE
13351: LD_INT 0
13353: PPUSH
// begin DialogueOn ;
13354: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
13358: LD_EXP 11
13362: PPUSH
13363: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
13367: LD_ADDR_VAR 0 1
13371: PUSH
13372: LD_INT 1
13374: PPUSH
13375: LD_STRING D5c-Sol1-1
13377: PPUSH
13378: CALL 16197 0 2
13382: ST_TO_ADDR
// if not un then
13383: LD_VAR 0 1
13387: NOT
13388: IFFALSE 13406
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_INT 2
13397: PPUSH
13398: LD_STRING D5c-FSol1-1
13400: PPUSH
13401: CALL 16197 0 2
13405: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13406: LD_EXP 21
13410: PPUSH
13411: LD_STRING D5c-JMM-1
13413: PPUSH
13414: CALL_OW 88
// if IsOk ( Lisa ) then
13418: LD_EXP 22
13422: PPUSH
13423: CALL_OW 302
13427: IFFALSE 13443
// Say ( Lisa , D5d-Lisa-1 ) else
13429: LD_EXP 22
13433: PPUSH
13434: LD_STRING D5d-Lisa-1
13436: PPUSH
13437: CALL_OW 88
13441: GO 13528
// if IsOk ( Cyrus ) then
13443: LD_EXP 25
13447: PPUSH
13448: CALL_OW 302
13452: IFFALSE 13468
// Say ( Cyrus , D5d-Cyrus-1 ) else
13454: LD_EXP 25
13458: PPUSH
13459: LD_STRING D5d-Cyrus-1
13461: PPUSH
13462: CALL_OW 88
13466: GO 13528
// if IsOk ( Gary ) then
13468: LD_EXP 32
13472: PPUSH
13473: CALL_OW 302
13477: IFFALSE 13493
// Say ( Gary , D5d-Gary-1 ) else
13479: LD_EXP 32
13483: PPUSH
13484: LD_STRING D5d-Gary-1
13486: PPUSH
13487: CALL_OW 88
13491: GO 13528
// if GetSex ( un ) = sex_male then
13493: LD_VAR 0 1
13497: PPUSH
13498: CALL_OW 258
13502: PUSH
13503: LD_INT 1
13505: EQUAL
13506: IFFALSE 13522
// Say ( un , D5d-Sol1-1 ) else
13508: LD_VAR 0 1
13512: PPUSH
13513: LD_STRING D5d-Sol1-1
13515: PPUSH
13516: CALL_OW 88
13520: GO 13528
// begin DialogueOff ;
13522: CALL_OW 7
// exit ;
13526: GO 13544
// end ; Say ( JMM , D5d-JMM-1 ) ;
13528: LD_EXP 21
13532: PPUSH
13533: LD_STRING D5d-JMM-1
13535: PPUSH
13536: CALL_OW 88
// DialogueOff ;
13540: CALL_OW 7
// end ;
13544: PPOPN 1
13546: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13547: LD_INT 1
13549: PPUSH
13550: LD_INT 17
13552: PPUSH
13553: CALL_OW 294
13557: PUSH
13558: LD_INT 2
13560: GREATEREQUAL
13561: IFFALSE 13682
13563: GO 13565
13565: DISABLE
13566: LD_INT 0
13568: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13569: LD_INT 10
13571: PPUSH
13572: LD_INT 5
13574: PPUSH
13575: LD_INT 1
13577: PPUSH
13578: LD_INT 10
13580: NEG
13581: PPUSH
13582: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13586: LD_INT 10
13588: PPUSH
13589: LD_INT 5
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13599: LD_INT 10
13601: PPUSH
13602: LD_INT 5
13604: PPUSH
13605: CALL_OW 86
// DialogueOn ;
13609: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13613: LD_ADDR_VAR 0 1
13617: PUSH
13618: LD_INT 1
13620: PPUSH
13621: LD_STRING D6-Sci1-1
13623: PPUSH
13624: CALL 16197 0 2
13628: ST_TO_ADDR
// if un then
13629: LD_VAR 0 1
13633: IFFALSE 13671
// begin Say ( JMM , D6-JMM-1 ) ;
13635: LD_EXP 21
13639: PPUSH
13640: LD_STRING D6-JMM-1
13642: PPUSH
13643: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: LD_STRING D6-Sci1-2
13654: PPUSH
13655: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13659: LD_EXP 21
13663: PPUSH
13664: LD_STRING D6-JMM-2
13666: PPUSH
13667: CALL_OW 88
// end ; DialogueOff ;
13671: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13675: LD_STRING M3
13677: PPUSH
13678: CALL_OW 337
// end ;
13682: PPOPN 1
13684: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp , escaped ;
13685: LD_OWVAR 1
13689: PUSH
13690: LD_INT 42000
13692: GREATEREQUAL
13693: PUSH
13694: LD_INT 2
13696: PPUSH
13697: LD_INT 169
13699: PPUSH
13700: LD_INT 90
13702: PPUSH
13703: LD_INT 10
13705: PPUSH
13706: CALL 55674 0 4
13710: PUSH
13711: LD_INT 4
13713: ARRAY
13714: PUSH
13715: LD_INT 0
13717: EQUAL
13718: PUSH
13719: LD_INT 45
13721: PPUSH
13722: CALL_OW 301
13726: OR
13727: PUSH
13728: LD_INT 45
13730: PPUSH
13731: CALL_OW 255
13735: PUSH
13736: LD_INT 1
13738: EQUAL
13739: OR
13740: AND
13741: PUSH
13742: LD_INT 94
13744: PPUSH
13745: CALL_OW 301
13749: NOT
13750: AND
13751: IFFALSE 14956
13753: GO 13755
13755: DISABLE
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
// begin uc_side := 5 ;
13763: LD_ADDR_OWVAR 20
13767: PUSH
13768: LD_INT 5
13770: ST_TO_ADDR
// uc_nation := 2 ;
13771: LD_ADDR_OWVAR 21
13775: PUSH
13776: LD_INT 2
13778: ST_TO_ADDR
// InitHc ;
13779: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13783: LD_INT 1
13785: PPUSH
13786: LD_INT 3
13788: PPUSH
13789: LD_INT 8
13791: PPUSH
13792: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13796: LD_ADDR_OWVAR 29
13800: PUSH
13801: LD_INT 12
13803: PUSH
13804: LD_INT 12
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// hc_name := Hans Felige ;
13811: LD_ADDR_OWVAR 26
13815: PUSH
13816: LD_STRING Hans Felige
13818: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13819: LD_ADDR_OWVAR 33
13823: PUSH
13824: LD_STRING SecondCharsGal
13826: ST_TO_ADDR
// hc_face_number := 7 ;
13827: LD_ADDR_OWVAR 34
13831: PUSH
13832: LD_INT 7
13834: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13835: LD_ADDR_EXP 46
13839: PUSH
13840: CALL_OW 44
13844: ST_TO_ADDR
// InitHc ;
13845: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13849: LD_INT 1
13851: PPUSH
13852: LD_INT 16
13854: PPUSH
13855: LD_INT 2
13857: PPUSH
13858: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13862: LD_ADDR_OWVAR 29
13866: PUSH
13867: LD_INT 12
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: ST_TO_ADDR
// hc_name :=  ;
13877: LD_ADDR_OWVAR 26
13881: PUSH
13882: LD_STRING 
13884: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13885: LD_ADDR_EXP 47
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// InitHc ;
13895: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13899: LD_INT 35
13901: PPUSH
13902: CALL_OW 67
// until not InBattle ( 1 ) ;
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 463
13913: NOT
13914: IFFALSE 13899
// wait ( 0 0$5 ) ;
13916: LD_INT 175
13918: PPUSH
13919: CALL_OW 67
// DialogueOn ;
13923: CALL_OW 6
// InGameOn ;
13927: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 1
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: LD_INT 25
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 25
13961: PUSH
13962: LD_INT 2
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 25
13971: PUSH
13972: LD_INT 3
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 25
13981: PUSH
13982: LD_INT 4
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 25
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 8
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: PUSH
14027: LD_EXP 21
14031: PUSH
14032: LD_EXP 22
14036: PUSH
14037: LD_EXP 23
14041: PUSH
14042: LD_EXP 24
14046: PUSH
14047: LD_EXP 25
14051: PUSH
14052: LD_EXP 26
14056: PUSH
14057: LD_EXP 27
14061: PUSH
14062: LD_EXP 28
14066: PUSH
14067: LD_EXP 29
14071: PUSH
14072: LD_EXP 31
14076: PUSH
14077: LD_EXP 32
14081: PUSH
14082: LD_EXP 33
14086: PUSH
14087: LD_EXP 34
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: DIFF
14107: PPUSH
14108: LD_INT 26
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PPUSH
14118: CALL_OW 72
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: ST_TO_ADDR
// if Brown then
14127: LD_EXP 27
14131: IFFALSE 14143
// un := Brown ;
14133: LD_ADDR_VAR 0 1
14137: PUSH
14138: LD_EXP 27
14142: ST_TO_ADDR
// if un then
14143: LD_VAR 0 1
14147: IFFALSE 14173
// begin Say ( un , D7-Sol1-1 ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_STRING D7-Sol1-1
14156: PPUSH
14157: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14161: LD_EXP 21
14165: PPUSH
14166: LD_STRING D7-JMM-1
14168: PPUSH
14169: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
14173: LD_EXP 46
14177: PPUSH
14178: LD_STRING D7-Ar1-1
14180: PPUSH
14181: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
14185: LD_EXP 21
14189: PPUSH
14190: LD_STRING D7-JMM-2
14192: PPUSH
14193: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
14197: LD_EXP 46
14201: PPUSH
14202: LD_STRING D7-Ar1-2
14204: PPUSH
14205: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
14209: LD_EXP 21
14213: PPUSH
14214: LD_STRING D7-JMM-3
14216: PPUSH
14217: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
14221: LD_EXP 46
14225: PPUSH
14226: LD_STRING D7-Ar1-3
14228: PPUSH
14229: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
14233: LD_EXP 21
14237: PPUSH
14238: LD_STRING D7-JMM-4
14240: PPUSH
14241: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
14245: LD_EXP 46
14249: PPUSH
14250: LD_STRING D7-Ar1-4
14252: PPUSH
14253: CALL_OW 94
// InGameOff ;
14257: CALL_OW 9
// DialogueOff ;
14261: CALL_OW 7
// case Query ( QCameras ) of 1 :
14265: LD_STRING QCameras
14267: PPUSH
14268: CALL_OW 97
14272: PUSH
14273: LD_INT 1
14275: DOUBLE
14276: EQUAL
14277: IFTRUE 14281
14279: GO 14284
14281: POP
// ; 2 :
14282: GO 14298
14284: LD_INT 2
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14297
14292: POP
// exit ; end ;
14293: GO 14956
14295: GO 14298
14297: POP
// ChangeMissionObjectives ( MCar ) ;
14298: LD_STRING MCar
14300: PPUSH
14301: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
14305: LD_INT 124
14307: PPUSH
14308: LD_INT 90
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_INT 6
14316: NEG
14317: PPUSH
14318: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
14322: LD_INT 124
14324: PPUSH
14325: LD_INT 90
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
14335: LD_INT 12
14337: PPUSH
14338: LD_INT 1
14340: PPUSH
14341: CALL_OW 424
// wait ( 3 ) ;
14345: LD_INT 3
14347: PPUSH
14348: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
14352: LD_INT 124
14354: PPUSH
14355: LD_INT 90
14357: PPUSH
14358: CALL_OW 86
// cargo := false ;
14362: LD_ADDR_VAR 0 3
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14370: LD_INT 35
14372: PPUSH
14373: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
14377: LD_ADDR_VAR 0 3
14381: PUSH
14382: LD_INT 12
14384: PPUSH
14385: LD_INT 32
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 32
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 58
14407: PUSH
14408: EMPTY
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 70
14420: ST_TO_ADDR
// until cargo ;
14421: LD_VAR 0 3
14425: IFFALSE 14370
// cargo := cargo [ 1 ] ;
14427: LD_ADDR_VAR 0 3
14431: PUSH
14432: LD_VAR 0 3
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14441: LD_VAR 0 3
14445: PPUSH
14446: LD_INT 5
14448: PPUSH
14449: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14453: LD_INT 12
14455: PPUSH
14456: LD_INT 0
14458: PPUSH
14459: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14463: LD_EXP 46
14467: PPUSH
14468: LD_INT 11
14470: PPUSH
14471: LD_INT 0
14473: PPUSH
14474: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14478: LD_EXP 47
14482: PPUSH
14483: LD_INT 11
14485: PPUSH
14486: LD_INT 0
14488: PPUSH
14489: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14493: LD_EXP 46
14497: PUSH
14498: LD_EXP 47
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: LD_INT 12
14509: PPUSH
14510: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14514: LD_EXP 46
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14528: LD_EXP 46
14532: PUSH
14533: LD_EXP 47
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: LD_INT 209
14544: PPUSH
14545: LD_INT 178
14547: PPUSH
14548: CALL_OW 171
// escaped := 0 ;
14552: LD_ADDR_VAR 0 5
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// while ( true ) do
14560: LD_INT 1
14562: IFFALSE 14778
// begin wait ( 0 0$1 ) ;
14564: LD_INT 35
14566: PPUSH
14567: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14571: LD_EXP 46
14575: PPUSH
14576: CALL_OW 314
14580: NOT
14581: PUSH
14582: LD_EXP 47
14586: PPUSH
14587: CALL_OW 314
14591: NOT
14592: OR
14593: IFFALSE 14619
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14595: LD_EXP 46
14599: PUSH
14600: LD_EXP 47
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: LD_INT 209
14611: PPUSH
14612: LD_INT 178
14614: PPUSH
14615: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14619: LD_EXP 46
14623: PPUSH
14624: LD_INT 10
14626: PPUSH
14627: CALL_OW 308
14631: IFFALSE 14656
// begin RemoveUnit ( ar_mechanic ) ;
14633: LD_EXP 46
14637: PPUSH
14638: CALL_OW 64
// escaped := escaped + 1 ;
14642: LD_ADDR_VAR 0 5
14646: PUSH
14647: LD_VAR 0 5
14651: PUSH
14652: LD_INT 1
14654: PLUS
14655: ST_TO_ADDR
// end ; if IsInArea ( ar_mechanic_friend , escape_area ) then
14656: LD_EXP 47
14660: PPUSH
14661: LD_INT 10
14663: PPUSH
14664: CALL_OW 308
14668: IFFALSE 14693
// begin RemoveUnit ( ar_mechanic_friend ) ;
14670: LD_EXP 47
14674: PPUSH
14675: CALL_OW 64
// escaped := escaped + 1 ;
14679: LD_ADDR_VAR 0 5
14683: PUSH
14684: LD_VAR 0 5
14688: PUSH
14689: LD_INT 1
14691: PLUS
14692: ST_TO_ADDR
// end ; if IsInArea ( cargo , escape_area ) then
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_INT 10
14700: PPUSH
14701: CALL_OW 308
14705: IFFALSE 14716
// RemoveUnit ( cargo ) ;
14707: LD_VAR 0 3
14711: PPUSH
14712: CALL_OW 64
// if not IsPlaced ( ar_mechanic ) and escaped >= 2 then
14716: LD_EXP 46
14720: PPUSH
14721: CALL_OW 305
14725: NOT
14726: PUSH
14727: LD_VAR 0 5
14731: PUSH
14732: LD_INT 2
14734: GREATEREQUAL
14735: AND
14736: IFFALSE 14740
// break ;
14738: GO 14778
// if not IsPlaced ( ar_mechanic ) and not IsPlaced ( ar_mechanic_friend ) and escaped < 2 then
14740: LD_EXP 46
14744: PPUSH
14745: CALL_OW 305
14749: NOT
14750: PUSH
14751: LD_EXP 47
14755: PPUSH
14756: CALL_OW 305
14760: NOT
14761: AND
14762: PUSH
14763: LD_VAR 0 5
14767: PUSH
14768: LD_INT 2
14770: LESS
14771: AND
14772: IFFALSE 14776
// exit ;
14774: GO 14956
// end ;
14776: GO 14560
// wait ( 0 0$2 ) ;
14778: LD_INT 70
14780: PPUSH
14781: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14785: LD_EXP 46
14789: PPUSH
14790: LD_STRING D7a-Ar1-1
14792: PPUSH
14793: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: LD_INT 129
14804: PUSH
14805: LD_INT 10
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 103
14814: PUSH
14815: LD_INT 6
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 148
14824: PUSH
14825: LD_INT 47
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 155
14834: PUSH
14835: LD_INT 16
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: ST_TO_ADDR
// if Difficulty = 1 then
14848: LD_OWVAR 67
14852: PUSH
14853: LD_INT 1
14855: EQUAL
14856: IFFALSE 14893
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14858: LD_ADDR_VAR 0 4
14862: PUSH
14863: LD_VAR 0 4
14867: PUSH
14868: LD_INT 78
14870: PUSH
14871: LD_INT 7
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 104
14880: PUSH
14881: LD_INT 43
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: ADD
14892: ST_TO_ADDR
// for i in tmp do
14893: LD_ADDR_VAR 0 2
14897: PUSH
14898: LD_VAR 0 4
14902: PUSH
14903: FOR_IN
14904: IFFALSE 14937
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14906: LD_VAR 0 2
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 2
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 9
14929: NEG
14930: PPUSH
14931: CALL_OW 330
14935: GO 14903
14937: POP
14938: POP
// SetAchievement ( ACH_FRIEND ) ;
14939: LD_STRING ACH_FRIEND
14941: PPUSH
14942: CALL_OW 543
// CenterOnXY ( 129 , 10 ) ;
14946: LD_INT 129
14948: PPUSH
14949: LD_INT 10
14951: PPUSH
14952: CALL_OW 84
// end ;
14956: PPOPN 5
14958: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14959: LD_EXP 15
14963: PUSH
14964: LD_INT 21000
14966: MINUS
14967: PUSH
14968: LD_OWVAR 1
14972: LESSEQUAL
14973: IFFALSE 15013
14975: GO 14977
14977: DISABLE
// begin powell_warn := true ;
14978: LD_ADDR_EXP 16
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// DialogueOn ;
14986: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14990: LD_EXP 30
14994: PPUSH
14995: LD_STRING D9-Pow-1
14997: PPUSH
14998: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
15002: LD_INT 10
15004: PPUSH
15005: CALL_OW 68
// DialogueOff ;
15009: CALL_OW 7
// end ;
15013: END
// every 0 0$1 trigger game_time <= tick do
15014: LD_EXP 15
15018: PUSH
15019: LD_OWVAR 1
15023: LESSEQUAL
15024: IFFALSE 15063
15026: GO 15028
15028: DISABLE
// begin DialogueOn ;
15029: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
15033: LD_EXP 30
15037: PPUSH
15038: LD_STRING D9a-Pow-1
15040: PPUSH
15041: CALL_OW 94
// dwait ( 0 0$2 ) ;
15045: LD_INT 70
15047: PPUSH
15048: CALL_OW 68
// DialogueOff ;
15052: CALL_OW 7
// YouLost ( Command ) ;
15056: LD_STRING Command
15058: PPUSH
15059: CALL_OW 104
// end ;
15063: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp , m1 , m2 , m3 ;
15064: LD_INT 22
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 1
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PPUSH
15088: CALL_OW 69
15092: PUSH
15093: LD_INT 0
15095: EQUAL
15096: PUSH
15097: LD_EXP 21
15101: PPUSH
15102: CALL_OW 302
15106: AND
15107: IFFALSE 16016
15109: GO 15111
15111: DISABLE
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// begin m1 := false ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: LD_INT 0
15125: ST_TO_ADDR
// m2 := false ;
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_INT 0
15133: ST_TO_ADDR
// m3 := false ;
15134: LD_ADDR_VAR 0 4
15138: PUSH
15139: LD_INT 0
15141: ST_TO_ADDR
// if not am_veh_consturcted then
15142: LD_EXP 20
15146: NOT
15147: IFFALSE 15156
// SetAchievement ( ACH_ARABTECH ) ;
15149: LD_STRING ACH_ARABTECH
15151: PPUSH
15152: CALL_OW 543
// if tick < [ 120 120$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] then
15156: LD_OWVAR 1
15160: PUSH
15161: LD_INT 252000
15163: PUSH
15164: LD_INT 210000
15166: PUSH
15167: LD_INT 199500
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: LD_OWVAR 67
15179: ARRAY
15180: LESS
15181: IFFALSE 15203
// begin m3 := true ;
15183: LD_ADDR_VAR 0 4
15187: PUSH
15188: LD_INT 1
15190: ST_TO_ADDR
// AddMedal ( Time1 , 1 ) ;
15191: LD_STRING Time1
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
// end else
15201: GO 15234
// if not powell_warn then
15203: LD_EXP 16
15207: NOT
15208: IFFALSE 15223
// AddMedal ( Time1 , - 1 ) else
15210: LD_STRING Time1
15212: PPUSH
15213: LD_INT 1
15215: NEG
15216: PPUSH
15217: CALL_OW 101
15221: GO 15234
// AddMedal ( Time1 , - 2 ) ;
15223: LD_STRING Time1
15225: PPUSH
15226: LD_INT 2
15228: NEG
15229: PPUSH
15230: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
15234: LD_EXP 17
15238: PUSH
15239: LD_INT 5
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: LD_OWVAR 67
15257: ARRAY
15258: GREATEREQUAL
15259: IFFALSE 15274
// AddMedal ( Destroy , - 2 ) else
15261: LD_STRING Destroy
15263: PPUSH
15264: LD_INT 2
15266: NEG
15267: PPUSH
15268: CALL_OW 101
15272: GO 15407
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
15274: LD_INT 22
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 21
15286: PUSH
15287: LD_INT 3
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 50
15296: PUSH
15297: EMPTY
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: PUSH
15310: LD_INT 25
15312: GREATEREQUAL
15313: IFFALSE 15328
// AddMedal ( Destroy , - 1 ) else
15315: LD_STRING Destroy
15317: PPUSH
15318: LD_INT 1
15320: NEG
15321: PPUSH
15322: CALL_OW 101
15326: GO 15407
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
15328: LD_INT 22
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 50
15350: PUSH
15351: EMPTY
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL_OW 69
15363: PUSH
15364: LD_INT 15
15366: GREATEREQUAL
15367: IFFALSE 15389
// begin m1 := true ;
15369: LD_ADDR_VAR 0 2
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// AddMedal ( Destroy , 1 ) ;
15377: LD_STRING Destroy
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 101
// end else
15387: GO 15407
// begin m1 := true ;
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// AddMedal ( Destroy , 2 ) ;
15397: LD_STRING Destroy
15399: PPUSH
15400: LD_INT 2
15402: PPUSH
15403: CALL_OW 101
// end ; SaveVariable ( artifact_get , 11_artifact_captured ) ;
15407: LD_EXP 13
15411: PPUSH
15412: LD_STRING 11_artifact_captured
15414: PPUSH
15415: CALL_OW 39
// if artifact_get then
15419: LD_EXP 13
15423: IFFALSE 15445
// begin m2 := true ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
15433: LD_STRING Artefact
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: CALL_OW 101
// end else
15443: GO 15456
// AddMedal ( Artefact , - 1 ) ;
15445: LD_STRING Artefact
15447: PPUSH
15448: LD_INT 1
15450: NEG
15451: PPUSH
15452: CALL_OW 101
// if m1 and m2 and m3 and Difficulty = 3 then
15456: LD_VAR 0 2
15460: PUSH
15461: LD_VAR 0 3
15465: AND
15466: PUSH
15467: LD_VAR 0 4
15471: AND
15472: PUSH
15473: LD_OWVAR 67
15477: PUSH
15478: LD_INT 3
15480: EQUAL
15481: AND
15482: IFFALSE 15494
// SetAchievementEX ( ACH_AMER , 11 ) ;
15484: LD_STRING ACH_AMER
15486: PPUSH
15487: LD_INT 11
15489: PPUSH
15490: CALL_OW 564
// if m1 and m2 and m3 and loses_counter = 0 then
15494: LD_VAR 0 2
15498: PUSH
15499: LD_VAR 0 3
15503: AND
15504: PUSH
15505: LD_VAR 0 4
15509: AND
15510: PUSH
15511: LD_EXP 17
15515: PUSH
15516: LD_INT 0
15518: EQUAL
15519: AND
15520: IFFALSE 15536
// begin wait ( 3 ) ;
15522: LD_INT 3
15524: PPUSH
15525: CALL_OW 67
// SetAchievement ( ACH_GENERAL ) ;
15529: LD_STRING ACH_GENERAL
15531: PPUSH
15532: CALL_OW 543
// end ; if tick <= 100 100$00 then
15536: LD_OWVAR 1
15540: PUSH
15541: LD_INT 210000
15543: LESSEQUAL
15544: IFFALSE 15560
// begin wait ( 3 ) ;
15546: LD_INT 3
15548: PPUSH
15549: CALL_OW 67
// SetAchievement ( ACH_ASPEED_11 ) ;
15553: LD_STRING ACH_ASPEED_11
15555: PPUSH
15556: CALL_OW 543
// end ; GiveMedals ( MAIN ) ;
15560: LD_STRING MAIN
15562: PPUSH
15563: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
15567: LD_ADDR_EXP 19
15571: PUSH
15572: LD_EXP 19
15576: PPUSH
15577: LD_INT 51
15579: PUSH
15580: EMPTY
15581: LIST
15582: PPUSH
15583: CALL_OW 72
15587: ST_TO_ADDR
// tmp := JMM ^ selected ;
15588: LD_ADDR_VAR 0 1
15592: PUSH
15593: LD_EXP 21
15597: PUSH
15598: LD_EXP 19
15602: ADD
15603: ST_TO_ADDR
// RewardPeople ( tmp ) ;
15604: LD_VAR 0 1
15608: PPUSH
15609: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
15613: LD_VAR 0 1
15617: PUSH
15618: LD_EXP 21
15622: PUSH
15623: LD_EXP 22
15627: PUSH
15628: LD_EXP 23
15632: PUSH
15633: LD_EXP 24
15637: PUSH
15638: LD_EXP 25
15642: PUSH
15643: LD_EXP 26
15647: PUSH
15648: LD_EXP 27
15652: PUSH
15653: LD_EXP 28
15657: PUSH
15658: LD_EXP 29
15662: PUSH
15663: LD_EXP 31
15667: PUSH
15668: LD_EXP 32
15672: PUSH
15673: LD_EXP 33
15677: PUSH
15678: LD_EXP 34
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: DIFF
15698: PPUSH
15699: LD_STRING 11c_others
15701: PPUSH
15702: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15706: LD_EXP 21
15710: PPUSH
15711: LD_EXP 3
15715: PUSH
15716: LD_STRING JMM
15718: STR
15719: PPUSH
15720: CALL_OW 38
// if Lisa then
15724: LD_EXP 22
15728: IFFALSE 15748
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15730: LD_EXP 22
15734: PPUSH
15735: LD_EXP 3
15739: PUSH
15740: LD_STRING Lisa
15742: STR
15743: PPUSH
15744: CALL_OW 38
// if Donaldson then
15748: LD_EXP 23
15752: IFFALSE 15772
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15754: LD_EXP 23
15758: PPUSH
15759: LD_EXP 3
15763: PUSH
15764: LD_STRING Donaldson
15766: STR
15767: PPUSH
15768: CALL_OW 38
// if Bobby then
15772: LD_EXP 24
15776: IFFALSE 15796
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15778: LD_EXP 24
15782: PPUSH
15783: LD_EXP 3
15787: PUSH
15788: LD_STRING Bobby
15790: STR
15791: PPUSH
15792: CALL_OW 38
// if Cyrus then
15796: LD_EXP 25
15800: IFFALSE 15820
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15802: LD_EXP 25
15806: PPUSH
15807: LD_EXP 3
15811: PUSH
15812: LD_STRING Cyrus
15814: STR
15815: PPUSH
15816: CALL_OW 38
// if Denis then
15820: LD_EXP 26
15824: IFFALSE 15844
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15826: LD_EXP 26
15830: PPUSH
15831: LD_EXP 3
15835: PUSH
15836: LD_STRING Denis
15838: STR
15839: PPUSH
15840: CALL_OW 38
// if Brown then
15844: LD_EXP 27
15848: IFFALSE 15868
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15850: LD_EXP 27
15854: PPUSH
15855: LD_EXP 3
15859: PUSH
15860: LD_STRING Brown
15862: STR
15863: PPUSH
15864: CALL_OW 38
// if Gladstone then
15868: LD_EXP 28
15872: IFFALSE 15892
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15874: LD_EXP 28
15878: PPUSH
15879: LD_EXP 3
15883: PUSH
15884: LD_STRING Gladstone
15886: STR
15887: PPUSH
15888: CALL_OW 38
// if Houten then
15892: LD_EXP 29
15896: IFFALSE 15916
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15898: LD_EXP 29
15902: PPUSH
15903: LD_EXP 3
15907: PUSH
15908: LD_STRING Houten
15910: STR
15911: PPUSH
15912: CALL_OW 38
// if Cornel then
15916: LD_EXP 31
15920: IFFALSE 15940
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15922: LD_EXP 31
15926: PPUSH
15927: LD_EXP 3
15931: PUSH
15932: LD_STRING Cornell
15934: STR
15935: PPUSH
15936: CALL_OW 38
// if Gary then
15940: LD_EXP 32
15944: IFFALSE 15964
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15946: LD_EXP 32
15950: PPUSH
15951: LD_EXP 3
15955: PUSH
15956: LD_STRING Gary
15958: STR
15959: PPUSH
15960: CALL_OW 38
// if Frank then
15964: LD_EXP 33
15968: IFFALSE 15988
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15970: LD_EXP 33
15974: PPUSH
15975: LD_EXP 3
15979: PUSH
15980: LD_STRING Frank
15982: STR
15983: PPUSH
15984: CALL_OW 38
// if Kikuchi then
15988: LD_EXP 34
15992: IFFALSE 16012
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15994: LD_EXP 34
15998: PPUSH
15999: LD_EXP 3
16003: PUSH
16004: LD_STRING Kikuchi
16006: STR
16007: PPUSH
16008: CALL_OW 38
// YouWin ;
16012: CALL_OW 103
// end ;
16016: PPOPN 4
16018: END
// export function CanSayRand ( side ) ; begin
16019: LD_INT 0
16021: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: LD_INT 52
16029: PUSH
16030: EMPTY
16031: LIST
16032: PUSH
16033: LD_INT 22
16035: PUSH
16036: LD_VAR 0 1
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: LD_INT 25
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 25
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 25
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 25
16080: PUSH
16081: LD_INT 4
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: PUSH
16105: LD_EXP 21
16109: PUSH
16110: LD_EXP 33
16114: PUSH
16115: LD_EXP 22
16119: PUSH
16120: LD_EXP 23
16124: PUSH
16125: LD_EXP 24
16129: PUSH
16130: LD_EXP 25
16134: PUSH
16135: LD_EXP 26
16139: PUSH
16140: LD_EXP 27
16144: PUSH
16145: LD_EXP 28
16149: PUSH
16150: LD_EXP 29
16154: PUSH
16155: LD_EXP 30
16159: PUSH
16160: LD_EXP 31
16164: PUSH
16165: LD_EXP 32
16169: PUSH
16170: LD_EXP 34
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: DIFF
16191: ST_TO_ADDR
// end ;
16192: LD_VAR 0 2
16196: RET
// export function SayRand ( sex , dial ) ; begin
16197: LD_INT 0
16199: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_INT 52
16207: PUSH
16208: EMPTY
16209: LIST
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 26
16223: PUSH
16224: LD_VAR 0 1
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: LD_INT 25
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 25
16248: PUSH
16249: LD_INT 2
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 25
16258: PUSH
16259: LD_INT 3
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 25
16268: PUSH
16269: LD_INT 4
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: PPUSH
16289: CALL_OW 69
16293: PUSH
16294: LD_EXP 21
16298: PUSH
16299: LD_EXP 33
16303: PUSH
16304: LD_EXP 22
16308: PUSH
16309: LD_EXP 23
16313: PUSH
16314: LD_EXP 24
16318: PUSH
16319: LD_EXP 25
16323: PUSH
16324: LD_EXP 26
16328: PUSH
16329: LD_EXP 27
16333: PUSH
16334: LD_EXP 28
16338: PUSH
16339: LD_EXP 29
16343: PUSH
16344: LD_EXP 30
16348: PUSH
16349: LD_EXP 31
16353: PUSH
16354: LD_EXP 32
16358: PUSH
16359: LD_EXP 34
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: DIFF
16380: ST_TO_ADDR
// if not result then
16381: LD_VAR 0 3
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16418
// result := result [ 1 ] ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 1
16402: ARRAY
16403: ST_TO_ADDR
// Say ( result , dial ) ;
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_VAR 0 2
16413: PPUSH
16414: CALL_OW 88
// end ;
16418: LD_VAR 0 3
16422: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
16423: LD_INT 0
16425: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
16426: LD_ADDR_VAR 0 4
16430: PUSH
16431: LD_INT 22
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 26
16443: PUSH
16444: LD_VAR 0 1
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: LD_INT 25
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 25
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 4
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: PUSH
16513: LD_EXP 21
16517: PUSH
16518: LD_EXP 33
16522: PUSH
16523: LD_EXP 22
16527: PUSH
16528: LD_EXP 23
16532: PUSH
16533: LD_EXP 24
16537: PUSH
16538: LD_EXP 25
16542: PUSH
16543: LD_EXP 26
16547: PUSH
16548: LD_EXP 27
16552: PUSH
16553: LD_EXP 28
16557: PUSH
16558: LD_EXP 29
16562: PUSH
16563: LD_EXP 30
16567: PUSH
16568: LD_EXP 31
16572: PUSH
16573: LD_EXP 32
16577: PUSH
16578: LD_EXP 34
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: PUSH
16599: LD_VAR 0 3
16603: ADD
16604: DIFF
16605: ST_TO_ADDR
// if not result then
16606: LD_VAR 0 4
16610: NOT
16611: IFFALSE 16615
// exit ;
16613: GO 16643
// result := result [ 1 ] ;
16615: LD_ADDR_VAR 0 4
16619: PUSH
16620: LD_VAR 0 4
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: ST_TO_ADDR
// Say ( result , dial ) ;
16629: LD_VAR 0 4
16633: PPUSH
16634: LD_VAR 0 2
16638: PPUSH
16639: CALL_OW 88
// end ; end_of_file
16643: LD_VAR 0 4
16647: RET
// export function CustomEvent ( event ) ; begin
16648: LD_INT 0
16650: PPUSH
// end ;
16651: LD_VAR 0 2
16655: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 255
16665: PUSH
16666: LD_INT 1
16668: EQUAL
16669: IFFALSE 16679
// artifact_get := true ;
16671: LD_ADDR_EXP 13
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 255
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: IFFALSE 16710
// begin artifact_get := false ;
16694: LD_ADDR_EXP 13
16698: PUSH
16699: LD_INT 0
16701: ST_TO_ADDR
// artifact_stolen := true ;
16702: LD_ADDR_EXP 12
16706: PUSH
16707: LD_INT 1
16709: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16710: LD_ADDR_EXP 14
16714: PUSH
16715: LD_INT 1
16717: ST_TO_ADDR
// end ;
16718: PPOPN 2
16720: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16721: LD_ADDR_EXP 14
16725: PUSH
16726: LD_INT 0
16728: ST_TO_ADDR
// end ;
16729: PPOPN 2
16731: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16732: LD_VAR 0 1
16736: PUSH
16737: LD_EXP 21
16741: EQUAL
16742: IFFALSE 16753
// begin YouLost ( JMM ) ;
16744: LD_STRING JMM
16746: PPUSH
16747: CALL_OW 104
// exit ;
16751: GO 16885
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16753: LD_VAR 0 1
16757: PUSH
16758: LD_INT 22
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 21
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 25
16783: PUSH
16784: LD_INT 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 25
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 25
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 25
16813: PUSH
16814: LD_INT 4
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 25
16823: PUSH
16824: LD_INT 5
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 25
16833: PUSH
16834: LD_INT 8
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: IN
16860: IFFALSE 16876
// loses_counter := loses_counter + 1 ;
16862: LD_ADDR_EXP 17
16866: PUSH
16867: LD_EXP 17
16871: PUSH
16872: LD_INT 1
16874: PLUS
16875: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL 44469 0 1
// end ;
16885: PPOPN 1
16887: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_VAR 0 2
16897: PPUSH
16898: CALL 46803 0 2
// end ;
16902: PPOPN 2
16904: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL 46112 0 1
// end ;
16914: PPOPN 1
16916: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_VAR 0 2
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_VAR 0 4
16936: PPUSH
16937: LD_VAR 0 5
16941: PPUSH
16942: CALL 43785 0 5
// end ;
16946: PPOPN 5
16948: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetNation ( vehicle ) = nation_american then
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 248
16958: PUSH
16959: LD_INT 1
16961: EQUAL
16962: IFFALSE 16972
// am_veh_consturcted := true ;
16964: LD_ADDR_EXP 20
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// MCE_VehicleConstructed ( vehicle , factory ) ;
16972: LD_VAR 0 1
16976: PPUSH
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL 43381 0 2
// end ;
16986: PPOPN 2
16988: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 247
16998: PUSH
16999: LD_INT 2
17001: EQUAL
17002: IFFALSE 17006
// exit ;
17004: GO 17023
// if not kamikazed then
17006: LD_EXP 11
17010: NOT
17011: IFFALSE 17023
// kamikazed := unit ;
17013: LD_ADDR_EXP 11
17017: PUSH
17018: LD_VAR 0 1
17022: ST_TO_ADDR
// end ;
17023: PPOPN 1
17025: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
17026: LD_INT 0
17028: PPUSH
17029: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_VAR 0 2
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: CALL 43219 0 4
// end ;
17054: PPOPN 6
17056: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
17057: LD_VAR 0 1
17061: PPUSH
17062: LD_VAR 0 2
17066: PPUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: CALL 42994 0 3
// end ;
17076: PPOPN 3
17078: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_VAR 0 2
17088: PPUSH
17089: CALL 44165 0 2
// end ;
17093: PPOPN 2
17095: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
17096: LD_VAR 0 1
17100: PPUSH
17101: LD_VAR 0 2
17105: PPUSH
17106: CALL 42688 0 2
// end ;
17110: PPOPN 2
17112: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_VAR 0 2
17122: PPUSH
17123: CALL 42879 0 2
// end ;
17127: PPOPN 2
17129: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL 45871 0 1
// end ;
17139: PPOPN 1
17141: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_VAR 0 2
17151: PPUSH
17152: CALL 47064 0 2
// end ;
17156: PPOPN 2
17158: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
17159: LD_VAR 0 1
17163: PPUSH
17164: LD_VAR 0 2
17168: PPUSH
17169: LD_VAR 0 3
17173: PPUSH
17174: LD_VAR 0 4
17178: PPUSH
17179: CALL 47280 0 4
// end ;
17183: PPOPN 4
17185: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL 101766 0 1
// end ; end_of_file
17195: PPOPN 1
17197: END
// every 0 0$1 trigger game do
17198: LD_EXP 2
17202: IFFALSE 17232
17204: GO 17206
17206: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
17207: LD_INT 7
17209: PUSH
17210: LD_INT 6
17212: PUSH
17213: LD_INT 4
17215: PUSH
17216: LD_INT 6
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PPUSH
17225: LD_INT 1750
17227: PPUSH
17228: CALL 17233 0 2
17232: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
17233: LD_INT 0
17235: PPUSH
17236: PPUSH
17237: PPUSH
// if not areas then
17238: LD_VAR 0 1
17242: NOT
17243: IFFALSE 17247
// exit ;
17245: GO 17377
// repeat wait ( time ) ;
17247: LD_VAR 0 2
17251: PPUSH
17252: CALL_OW 67
// p := rand ( 1 , 90 ) ;
17256: LD_ADDR_VAR 0 5
17260: PUSH
17261: LD_INT 1
17263: PPUSH
17264: LD_INT 90
17266: PPUSH
17267: CALL_OW 12
17271: ST_TO_ADDR
// for i in areas do
17272: LD_ADDR_VAR 0 4
17276: PUSH
17277: LD_VAR 0 1
17281: PUSH
17282: FOR_IN
17283: IFFALSE 17336
// begin if Prob ( p ) then
17285: LD_VAR 0 5
17289: PPUSH
17290: CALL_OW 13
17294: IFFALSE 17334
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
17296: LD_INT 1
17298: PPUSH
17299: LD_INT 5
17301: PPUSH
17302: CALL_OW 12
17306: PPUSH
17307: LD_VAR 0 4
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
17319: LD_INT 385
17321: PPUSH
17322: LD_INT 595
17324: PPUSH
17325: CALL_OW 12
17329: PPUSH
17330: CALL_OW 67
// end ; end ;
17334: GO 17282
17336: POP
17337: POP
// time := time + 0 0$3 ;
17338: LD_ADDR_VAR 0 2
17342: PUSH
17343: LD_VAR 0 2
17347: PUSH
17348: LD_INT 105
17350: PLUS
17351: ST_TO_ADDR
// if time > 7 7$00 then
17352: LD_VAR 0 2
17356: PUSH
17357: LD_INT 14700
17359: GREATER
17360: IFFALSE 17370
// time := 0 0$40 ;
17362: LD_ADDR_VAR 0 2
17366: PUSH
17367: LD_INT 1400
17369: ST_TO_ADDR
// until not game ;
17370: LD_EXP 2
17374: NOT
17375: IFFALSE 17247
// end ; end_of_file
17377: LD_VAR 0 3
17381: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
17382: LD_INT 0
17384: PPUSH
17385: PPUSH
// skirmish := false ;
17386: LD_ADDR_EXP 48
17390: PUSH
17391: LD_INT 0
17393: ST_TO_ADDR
// debug_mc := false ;
17394: LD_ADDR_EXP 49
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// mc_bases := [ ] ;
17402: LD_ADDR_EXP 50
17406: PUSH
17407: EMPTY
17408: ST_TO_ADDR
// mc_sides := [ ] ;
17409: LD_ADDR_EXP 76
17413: PUSH
17414: EMPTY
17415: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
17416: LD_ADDR_EXP 51
17420: PUSH
17421: EMPTY
17422: ST_TO_ADDR
// mc_building_repairs := [ ] ;
17423: LD_ADDR_EXP 52
17427: PUSH
17428: EMPTY
17429: ST_TO_ADDR
// mc_need_heal := [ ] ;
17430: LD_ADDR_EXP 53
17434: PUSH
17435: EMPTY
17436: ST_TO_ADDR
// mc_healers := [ ] ;
17437: LD_ADDR_EXP 54
17441: PUSH
17442: EMPTY
17443: ST_TO_ADDR
// mc_build_list := [ ] ;
17444: LD_ADDR_EXP 55
17448: PUSH
17449: EMPTY
17450: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
17451: LD_ADDR_EXP 82
17455: PUSH
17456: EMPTY
17457: ST_TO_ADDR
// mc_builders := [ ] ;
17458: LD_ADDR_EXP 56
17462: PUSH
17463: EMPTY
17464: ST_TO_ADDR
// mc_construct_list := [ ] ;
17465: LD_ADDR_EXP 57
17469: PUSH
17470: EMPTY
17471: ST_TO_ADDR
// mc_turret_list := [ ] ;
17472: LD_ADDR_EXP 58
17476: PUSH
17477: EMPTY
17478: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
17479: LD_ADDR_EXP 59
17483: PUSH
17484: EMPTY
17485: ST_TO_ADDR
// mc_miners := [ ] ;
17486: LD_ADDR_EXP 64
17490: PUSH
17491: EMPTY
17492: ST_TO_ADDR
// mc_mines := [ ] ;
17493: LD_ADDR_EXP 63
17497: PUSH
17498: EMPTY
17499: ST_TO_ADDR
// mc_minefields := [ ] ;
17500: LD_ADDR_EXP 65
17504: PUSH
17505: EMPTY
17506: ST_TO_ADDR
// mc_crates := [ ] ;
17507: LD_ADDR_EXP 66
17511: PUSH
17512: EMPTY
17513: ST_TO_ADDR
// mc_crates_collector := [ ] ;
17514: LD_ADDR_EXP 67
17518: PUSH
17519: EMPTY
17520: ST_TO_ADDR
// mc_crates_area := [ ] ;
17521: LD_ADDR_EXP 68
17525: PUSH
17526: EMPTY
17527: ST_TO_ADDR
// mc_vehicles := [ ] ;
17528: LD_ADDR_EXP 69
17532: PUSH
17533: EMPTY
17534: ST_TO_ADDR
// mc_attack := [ ] ;
17535: LD_ADDR_EXP 70
17539: PUSH
17540: EMPTY
17541: ST_TO_ADDR
// mc_produce := [ ] ;
17542: LD_ADDR_EXP 71
17546: PUSH
17547: EMPTY
17548: ST_TO_ADDR
// mc_defender := [ ] ;
17549: LD_ADDR_EXP 72
17553: PUSH
17554: EMPTY
17555: ST_TO_ADDR
// mc_parking := [ ] ;
17556: LD_ADDR_EXP 74
17560: PUSH
17561: EMPTY
17562: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
17563: LD_ADDR_EXP 60
17567: PUSH
17568: EMPTY
17569: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
17570: LD_ADDR_EXP 62
17574: PUSH
17575: EMPTY
17576: ST_TO_ADDR
// mc_scan := [ ] ;
17577: LD_ADDR_EXP 73
17581: PUSH
17582: EMPTY
17583: ST_TO_ADDR
// mc_scan_area := [ ] ;
17584: LD_ADDR_EXP 75
17588: PUSH
17589: EMPTY
17590: ST_TO_ADDR
// mc_tech := [ ] ;
17591: LD_ADDR_EXP 77
17595: PUSH
17596: EMPTY
17597: ST_TO_ADDR
// mc_class := [ ] ;
17598: LD_ADDR_EXP 91
17602: PUSH
17603: EMPTY
17604: ST_TO_ADDR
// mc_class_case_use := [ ] ;
17605: LD_ADDR_EXP 92
17609: PUSH
17610: EMPTY
17611: ST_TO_ADDR
// end ;
17612: LD_VAR 0 1
17616: RET
// export function MC_Kill ( base ) ; begin
17617: LD_INT 0
17619: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
17620: LD_ADDR_EXP 50
17624: PUSH
17625: LD_EXP 50
17629: PPUSH
17630: LD_VAR 0 1
17634: PPUSH
17635: EMPTY
17636: PPUSH
17637: CALL_OW 1
17641: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17642: LD_ADDR_EXP 51
17646: PUSH
17647: LD_EXP 51
17651: PPUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: EMPTY
17658: PPUSH
17659: CALL_OW 1
17663: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17664: LD_ADDR_EXP 52
17668: PUSH
17669: LD_EXP 52
17673: PPUSH
17674: LD_VAR 0 1
17678: PPUSH
17679: EMPTY
17680: PPUSH
17681: CALL_OW 1
17685: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17686: LD_ADDR_EXP 53
17690: PUSH
17691: LD_EXP 53
17695: PPUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: EMPTY
17702: PPUSH
17703: CALL_OW 1
17707: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17708: LD_ADDR_EXP 54
17712: PUSH
17713: LD_EXP 54
17717: PPUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: EMPTY
17724: PPUSH
17725: CALL_OW 1
17729: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17730: LD_ADDR_EXP 55
17734: PUSH
17735: LD_EXP 55
17739: PPUSH
17740: LD_VAR 0 1
17744: PPUSH
17745: EMPTY
17746: PPUSH
17747: CALL_OW 1
17751: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17752: LD_ADDR_EXP 56
17756: PUSH
17757: LD_EXP 56
17761: PPUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: EMPTY
17768: PPUSH
17769: CALL_OW 1
17773: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17774: LD_ADDR_EXP 57
17778: PUSH
17779: LD_EXP 57
17783: PPUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: EMPTY
17790: PPUSH
17791: CALL_OW 1
17795: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17796: LD_ADDR_EXP 58
17800: PUSH
17801: LD_EXP 58
17805: PPUSH
17806: LD_VAR 0 1
17810: PPUSH
17811: EMPTY
17812: PPUSH
17813: CALL_OW 1
17817: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17818: LD_ADDR_EXP 59
17822: PUSH
17823: LD_EXP 59
17827: PPUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: EMPTY
17834: PPUSH
17835: CALL_OW 1
17839: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17840: LD_ADDR_EXP 60
17844: PUSH
17845: LD_EXP 60
17849: PPUSH
17850: LD_VAR 0 1
17854: PPUSH
17855: EMPTY
17856: PPUSH
17857: CALL_OW 1
17861: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17862: LD_ADDR_EXP 61
17866: PUSH
17867: LD_EXP 61
17871: PPUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 1
17884: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17885: LD_ADDR_EXP 62
17889: PUSH
17890: LD_EXP 62
17894: PPUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: EMPTY
17901: PPUSH
17902: CALL_OW 1
17906: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17907: LD_ADDR_EXP 63
17911: PUSH
17912: LD_EXP 63
17916: PPUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: EMPTY
17923: PPUSH
17924: CALL_OW 1
17928: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17929: LD_ADDR_EXP 64
17933: PUSH
17934: LD_EXP 64
17938: PPUSH
17939: LD_VAR 0 1
17943: PPUSH
17944: EMPTY
17945: PPUSH
17946: CALL_OW 1
17950: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17951: LD_ADDR_EXP 65
17955: PUSH
17956: LD_EXP 65
17960: PPUSH
17961: LD_VAR 0 1
17965: PPUSH
17966: EMPTY
17967: PPUSH
17968: CALL_OW 1
17972: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17973: LD_ADDR_EXP 66
17977: PUSH
17978: LD_EXP 66
17982: PPUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: EMPTY
17989: PPUSH
17990: CALL_OW 1
17994: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17995: LD_ADDR_EXP 67
17999: PUSH
18000: LD_EXP 67
18004: PPUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: EMPTY
18011: PPUSH
18012: CALL_OW 1
18016: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18017: LD_ADDR_EXP 68
18021: PUSH
18022: LD_EXP 68
18026: PPUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: EMPTY
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18039: LD_ADDR_EXP 69
18043: PUSH
18044: LD_EXP 69
18048: PPUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: EMPTY
18055: PPUSH
18056: CALL_OW 1
18060: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18061: LD_ADDR_EXP 70
18065: PUSH
18066: LD_EXP 70
18070: PPUSH
18071: LD_VAR 0 1
18075: PPUSH
18076: EMPTY
18077: PPUSH
18078: CALL_OW 1
18082: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18083: LD_ADDR_EXP 71
18087: PUSH
18088: LD_EXP 71
18092: PPUSH
18093: LD_VAR 0 1
18097: PPUSH
18098: EMPTY
18099: PPUSH
18100: CALL_OW 1
18104: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18105: LD_ADDR_EXP 72
18109: PUSH
18110: LD_EXP 72
18114: PPUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: EMPTY
18121: PPUSH
18122: CALL_OW 1
18126: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18127: LD_ADDR_EXP 73
18131: PUSH
18132: LD_EXP 73
18136: PPUSH
18137: LD_VAR 0 1
18141: PPUSH
18142: EMPTY
18143: PPUSH
18144: CALL_OW 1
18148: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18149: LD_ADDR_EXP 74
18153: PUSH
18154: LD_EXP 74
18158: PPUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: EMPTY
18165: PPUSH
18166: CALL_OW 1
18170: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18171: LD_ADDR_EXP 75
18175: PUSH
18176: LD_EXP 75
18180: PPUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: EMPTY
18187: PPUSH
18188: CALL_OW 1
18192: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18193: LD_ADDR_EXP 77
18197: PUSH
18198: LD_EXP 77
18202: PPUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: EMPTY
18209: PPUSH
18210: CALL_OW 1
18214: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18215: LD_ADDR_EXP 79
18219: PUSH
18220: LD_EXP 79
18224: PPUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: EMPTY
18231: PPUSH
18232: CALL_OW 1
18236: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18237: LD_ADDR_EXP 80
18241: PUSH
18242: LD_EXP 80
18246: PPUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: EMPTY
18253: PPUSH
18254: CALL_OW 1
18258: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18259: LD_ADDR_EXP 81
18263: PUSH
18264: LD_EXP 81
18268: PPUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: EMPTY
18275: PPUSH
18276: CALL_OW 1
18280: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18281: LD_ADDR_EXP 82
18285: PUSH
18286: LD_EXP 82
18290: PPUSH
18291: LD_VAR 0 1
18295: PPUSH
18296: EMPTY
18297: PPUSH
18298: CALL_OW 1
18302: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18303: LD_ADDR_EXP 83
18307: PUSH
18308: LD_EXP 83
18312: PPUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: EMPTY
18319: PPUSH
18320: CALL_OW 1
18324: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18325: LD_ADDR_EXP 84
18329: PUSH
18330: LD_EXP 84
18334: PPUSH
18335: LD_VAR 0 1
18339: PPUSH
18340: EMPTY
18341: PPUSH
18342: CALL_OW 1
18346: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18347: LD_ADDR_EXP 85
18351: PUSH
18352: LD_EXP 85
18356: PPUSH
18357: LD_VAR 0 1
18361: PPUSH
18362: EMPTY
18363: PPUSH
18364: CALL_OW 1
18368: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18369: LD_ADDR_EXP 86
18373: PUSH
18374: LD_EXP 86
18378: PPUSH
18379: LD_VAR 0 1
18383: PPUSH
18384: EMPTY
18385: PPUSH
18386: CALL_OW 1
18390: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18391: LD_ADDR_EXP 87
18395: PUSH
18396: LD_EXP 87
18400: PPUSH
18401: LD_VAR 0 1
18405: PPUSH
18406: EMPTY
18407: PPUSH
18408: CALL_OW 1
18412: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18413: LD_ADDR_EXP 88
18417: PUSH
18418: LD_EXP 88
18422: PPUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: EMPTY
18429: PPUSH
18430: CALL_OW 1
18434: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18435: LD_ADDR_EXP 89
18439: PUSH
18440: LD_EXP 89
18444: PPUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: EMPTY
18451: PPUSH
18452: CALL_OW 1
18456: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18457: LD_ADDR_EXP 90
18461: PUSH
18462: LD_EXP 90
18466: PPUSH
18467: LD_VAR 0 1
18471: PPUSH
18472: EMPTY
18473: PPUSH
18474: CALL_OW 1
18478: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18479: LD_ADDR_EXP 91
18483: PUSH
18484: LD_EXP 91
18488: PPUSH
18489: LD_VAR 0 1
18493: PPUSH
18494: EMPTY
18495: PPUSH
18496: CALL_OW 1
18500: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18501: LD_ADDR_EXP 92
18505: PUSH
18506: LD_EXP 92
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 0
18518: PPUSH
18519: CALL_OW 1
18523: ST_TO_ADDR
// end ;
18524: LD_VAR 0 2
18528: RET
// export function MC_Add ( side , units ) ; var base ; begin
18529: LD_INT 0
18531: PPUSH
18532: PPUSH
// base := mc_bases + 1 ;
18533: LD_ADDR_VAR 0 4
18537: PUSH
18538: LD_EXP 50
18542: PUSH
18543: LD_INT 1
18545: PLUS
18546: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
18547: LD_ADDR_EXP 76
18551: PUSH
18552: LD_EXP 76
18556: PPUSH
18557: LD_VAR 0 4
18561: PPUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 1
18571: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
18572: LD_ADDR_EXP 50
18576: PUSH
18577: LD_EXP 50
18581: PPUSH
18582: LD_VAR 0 4
18586: PPUSH
18587: LD_VAR 0 2
18591: PPUSH
18592: CALL_OW 1
18596: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
18597: LD_ADDR_EXP 51
18601: PUSH
18602: LD_EXP 51
18606: PPUSH
18607: LD_VAR 0 4
18611: PPUSH
18612: EMPTY
18613: PPUSH
18614: CALL_OW 1
18618: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
18619: LD_ADDR_EXP 52
18623: PUSH
18624: LD_EXP 52
18628: PPUSH
18629: LD_VAR 0 4
18633: PPUSH
18634: EMPTY
18635: PPUSH
18636: CALL_OW 1
18640: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
18641: LD_ADDR_EXP 53
18645: PUSH
18646: LD_EXP 53
18650: PPUSH
18651: LD_VAR 0 4
18655: PPUSH
18656: EMPTY
18657: PPUSH
18658: CALL_OW 1
18662: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
18663: LD_ADDR_EXP 54
18667: PUSH
18668: LD_EXP 54
18672: PPUSH
18673: LD_VAR 0 4
18677: PPUSH
18678: EMPTY
18679: PPUSH
18680: CALL_OW 1
18684: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18685: LD_ADDR_EXP 55
18689: PUSH
18690: LD_EXP 55
18694: PPUSH
18695: LD_VAR 0 4
18699: PPUSH
18700: EMPTY
18701: PPUSH
18702: CALL_OW 1
18706: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18707: LD_ADDR_EXP 56
18711: PUSH
18712: LD_EXP 56
18716: PPUSH
18717: LD_VAR 0 4
18721: PPUSH
18722: EMPTY
18723: PPUSH
18724: CALL_OW 1
18728: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18729: LD_ADDR_EXP 57
18733: PUSH
18734: LD_EXP 57
18738: PPUSH
18739: LD_VAR 0 4
18743: PPUSH
18744: EMPTY
18745: PPUSH
18746: CALL_OW 1
18750: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18751: LD_ADDR_EXP 58
18755: PUSH
18756: LD_EXP 58
18760: PPUSH
18761: LD_VAR 0 4
18765: PPUSH
18766: EMPTY
18767: PPUSH
18768: CALL_OW 1
18772: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18773: LD_ADDR_EXP 59
18777: PUSH
18778: LD_EXP 59
18782: PPUSH
18783: LD_VAR 0 4
18787: PPUSH
18788: EMPTY
18789: PPUSH
18790: CALL_OW 1
18794: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18795: LD_ADDR_EXP 60
18799: PUSH
18800: LD_EXP 60
18804: PPUSH
18805: LD_VAR 0 4
18809: PPUSH
18810: EMPTY
18811: PPUSH
18812: CALL_OW 1
18816: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18817: LD_ADDR_EXP 61
18821: PUSH
18822: LD_EXP 61
18826: PPUSH
18827: LD_VAR 0 4
18831: PPUSH
18832: LD_INT 0
18834: PPUSH
18835: CALL_OW 1
18839: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18840: LD_ADDR_EXP 62
18844: PUSH
18845: LD_EXP 62
18849: PPUSH
18850: LD_VAR 0 4
18854: PPUSH
18855: EMPTY
18856: PPUSH
18857: CALL_OW 1
18861: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18862: LD_ADDR_EXP 63
18866: PUSH
18867: LD_EXP 63
18871: PPUSH
18872: LD_VAR 0 4
18876: PPUSH
18877: EMPTY
18878: PPUSH
18879: CALL_OW 1
18883: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18884: LD_ADDR_EXP 64
18888: PUSH
18889: LD_EXP 64
18893: PPUSH
18894: LD_VAR 0 4
18898: PPUSH
18899: EMPTY
18900: PPUSH
18901: CALL_OW 1
18905: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18906: LD_ADDR_EXP 65
18910: PUSH
18911: LD_EXP 65
18915: PPUSH
18916: LD_VAR 0 4
18920: PPUSH
18921: EMPTY
18922: PPUSH
18923: CALL_OW 1
18927: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18928: LD_ADDR_EXP 66
18932: PUSH
18933: LD_EXP 66
18937: PPUSH
18938: LD_VAR 0 4
18942: PPUSH
18943: EMPTY
18944: PPUSH
18945: CALL_OW 1
18949: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18950: LD_ADDR_EXP 67
18954: PUSH
18955: LD_EXP 67
18959: PPUSH
18960: LD_VAR 0 4
18964: PPUSH
18965: EMPTY
18966: PPUSH
18967: CALL_OW 1
18971: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18972: LD_ADDR_EXP 68
18976: PUSH
18977: LD_EXP 68
18981: PPUSH
18982: LD_VAR 0 4
18986: PPUSH
18987: EMPTY
18988: PPUSH
18989: CALL_OW 1
18993: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18994: LD_ADDR_EXP 69
18998: PUSH
18999: LD_EXP 69
19003: PPUSH
19004: LD_VAR 0 4
19008: PPUSH
19009: EMPTY
19010: PPUSH
19011: CALL_OW 1
19015: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
19016: LD_ADDR_EXP 70
19020: PUSH
19021: LD_EXP 70
19025: PPUSH
19026: LD_VAR 0 4
19030: PPUSH
19031: EMPTY
19032: PPUSH
19033: CALL_OW 1
19037: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
19038: LD_ADDR_EXP 71
19042: PUSH
19043: LD_EXP 71
19047: PPUSH
19048: LD_VAR 0 4
19052: PPUSH
19053: EMPTY
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
19060: LD_ADDR_EXP 72
19064: PUSH
19065: LD_EXP 72
19069: PPUSH
19070: LD_VAR 0 4
19074: PPUSH
19075: EMPTY
19076: PPUSH
19077: CALL_OW 1
19081: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
19082: LD_ADDR_EXP 73
19086: PUSH
19087: LD_EXP 73
19091: PPUSH
19092: LD_VAR 0 4
19096: PPUSH
19097: EMPTY
19098: PPUSH
19099: CALL_OW 1
19103: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
19104: LD_ADDR_EXP 74
19108: PUSH
19109: LD_EXP 74
19113: PPUSH
19114: LD_VAR 0 4
19118: PPUSH
19119: EMPTY
19120: PPUSH
19121: CALL_OW 1
19125: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
19126: LD_ADDR_EXP 75
19130: PUSH
19131: LD_EXP 75
19135: PPUSH
19136: LD_VAR 0 4
19140: PPUSH
19141: EMPTY
19142: PPUSH
19143: CALL_OW 1
19147: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
19148: LD_ADDR_EXP 77
19152: PUSH
19153: LD_EXP 77
19157: PPUSH
19158: LD_VAR 0 4
19162: PPUSH
19163: EMPTY
19164: PPUSH
19165: CALL_OW 1
19169: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
19170: LD_ADDR_EXP 79
19174: PUSH
19175: LD_EXP 79
19179: PPUSH
19180: LD_VAR 0 4
19184: PPUSH
19185: EMPTY
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
19192: LD_ADDR_EXP 80
19196: PUSH
19197: LD_EXP 80
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: EMPTY
19208: PPUSH
19209: CALL_OW 1
19213: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
19214: LD_ADDR_EXP 81
19218: PUSH
19219: LD_EXP 81
19223: PPUSH
19224: LD_VAR 0 4
19228: PPUSH
19229: EMPTY
19230: PPUSH
19231: CALL_OW 1
19235: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
19236: LD_ADDR_EXP 82
19240: PUSH
19241: LD_EXP 82
19245: PPUSH
19246: LD_VAR 0 4
19250: PPUSH
19251: EMPTY
19252: PPUSH
19253: CALL_OW 1
19257: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
19258: LD_ADDR_EXP 83
19262: PUSH
19263: LD_EXP 83
19267: PPUSH
19268: LD_VAR 0 4
19272: PPUSH
19273: EMPTY
19274: PPUSH
19275: CALL_OW 1
19279: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
19280: LD_ADDR_EXP 84
19284: PUSH
19285: LD_EXP 84
19289: PPUSH
19290: LD_VAR 0 4
19294: PPUSH
19295: EMPTY
19296: PPUSH
19297: CALL_OW 1
19301: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
19302: LD_ADDR_EXP 85
19306: PUSH
19307: LD_EXP 85
19311: PPUSH
19312: LD_VAR 0 4
19316: PPUSH
19317: EMPTY
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
19324: LD_ADDR_EXP 86
19328: PUSH
19329: LD_EXP 86
19333: PPUSH
19334: LD_VAR 0 4
19338: PPUSH
19339: EMPTY
19340: PPUSH
19341: CALL_OW 1
19345: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
19346: LD_ADDR_EXP 87
19350: PUSH
19351: LD_EXP 87
19355: PPUSH
19356: LD_VAR 0 4
19360: PPUSH
19361: EMPTY
19362: PPUSH
19363: CALL_OW 1
19367: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
19368: LD_ADDR_EXP 88
19372: PUSH
19373: LD_EXP 88
19377: PPUSH
19378: LD_VAR 0 4
19382: PPUSH
19383: EMPTY
19384: PPUSH
19385: CALL_OW 1
19389: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
19390: LD_ADDR_EXP 89
19394: PUSH
19395: LD_EXP 89
19399: PPUSH
19400: LD_VAR 0 4
19404: PPUSH
19405: EMPTY
19406: PPUSH
19407: CALL_OW 1
19411: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
19412: LD_ADDR_EXP 90
19416: PUSH
19417: LD_EXP 90
19421: PPUSH
19422: LD_VAR 0 4
19426: PPUSH
19427: EMPTY
19428: PPUSH
19429: CALL_OW 1
19433: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
19434: LD_ADDR_EXP 91
19438: PUSH
19439: LD_EXP 91
19443: PPUSH
19444: LD_VAR 0 4
19448: PPUSH
19449: EMPTY
19450: PPUSH
19451: CALL_OW 1
19455: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
19456: LD_ADDR_EXP 92
19460: PUSH
19461: LD_EXP 92
19465: PPUSH
19466: LD_VAR 0 4
19470: PPUSH
19471: LD_INT 0
19473: PPUSH
19474: CALL_OW 1
19478: ST_TO_ADDR
// result := base ;
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: LD_VAR 0 4
19488: ST_TO_ADDR
// end ;
19489: LD_VAR 0 3
19493: RET
// export function MC_Start ( ) ; var i ; begin
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
// for i = 1 to mc_bases do
19498: LD_ADDR_VAR 0 2
19502: PUSH
19503: DOUBLE
19504: LD_INT 1
19506: DEC
19507: ST_TO_ADDR
19508: LD_EXP 50
19512: PUSH
19513: FOR_TO
19514: IFFALSE 20591
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
19516: LD_ADDR_EXP 50
19520: PUSH
19521: LD_EXP 50
19525: PPUSH
19526: LD_VAR 0 2
19530: PPUSH
19531: LD_EXP 50
19535: PUSH
19536: LD_VAR 0 2
19540: ARRAY
19541: PUSH
19542: LD_INT 0
19544: DIFF
19545: PPUSH
19546: CALL_OW 1
19550: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
19551: LD_ADDR_EXP 51
19555: PUSH
19556: LD_EXP 51
19560: PPUSH
19561: LD_VAR 0 2
19565: PPUSH
19566: EMPTY
19567: PPUSH
19568: CALL_OW 1
19572: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
19573: LD_ADDR_EXP 52
19577: PUSH
19578: LD_EXP 52
19582: PPUSH
19583: LD_VAR 0 2
19587: PPUSH
19588: EMPTY
19589: PPUSH
19590: CALL_OW 1
19594: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
19595: LD_ADDR_EXP 53
19599: PUSH
19600: LD_EXP 53
19604: PPUSH
19605: LD_VAR 0 2
19609: PPUSH
19610: EMPTY
19611: PPUSH
19612: CALL_OW 1
19616: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
19617: LD_ADDR_EXP 54
19621: PUSH
19622: LD_EXP 54
19626: PPUSH
19627: LD_VAR 0 2
19631: PPUSH
19632: EMPTY
19633: PUSH
19634: EMPTY
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 1
19644: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
19645: LD_ADDR_EXP 55
19649: PUSH
19650: LD_EXP 55
19654: PPUSH
19655: LD_VAR 0 2
19659: PPUSH
19660: EMPTY
19661: PPUSH
19662: CALL_OW 1
19666: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
19667: LD_ADDR_EXP 82
19671: PUSH
19672: LD_EXP 82
19676: PPUSH
19677: LD_VAR 0 2
19681: PPUSH
19682: EMPTY
19683: PPUSH
19684: CALL_OW 1
19688: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19689: LD_ADDR_EXP 56
19693: PUSH
19694: LD_EXP 56
19698: PPUSH
19699: LD_VAR 0 2
19703: PPUSH
19704: EMPTY
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19711: LD_ADDR_EXP 57
19715: PUSH
19716: LD_EXP 57
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL_OW 1
19732: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19733: LD_ADDR_EXP 58
19737: PUSH
19738: LD_EXP 58
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: LD_EXP 50
19752: PUSH
19753: LD_VAR 0 2
19757: ARRAY
19758: PPUSH
19759: LD_INT 2
19761: PUSH
19762: LD_INT 30
19764: PUSH
19765: LD_INT 32
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 30
19774: PUSH
19775: LD_INT 33
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: PPUSH
19787: CALL_OW 72
19791: PPUSH
19792: CALL_OW 1
19796: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19797: LD_ADDR_EXP 59
19801: PUSH
19802: LD_EXP 59
19806: PPUSH
19807: LD_VAR 0 2
19811: PPUSH
19812: LD_EXP 50
19816: PUSH
19817: LD_VAR 0 2
19821: ARRAY
19822: PPUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 32
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 31
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 58
19853: PUSH
19854: EMPTY
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 72
19865: PPUSH
19866: CALL_OW 1
19870: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19871: LD_ADDR_EXP 60
19875: PUSH
19876: LD_EXP 60
19880: PPUSH
19881: LD_VAR 0 2
19885: PPUSH
19886: EMPTY
19887: PPUSH
19888: CALL_OW 1
19892: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19893: LD_ADDR_EXP 64
19897: PUSH
19898: LD_EXP 64
19902: PPUSH
19903: LD_VAR 0 2
19907: PPUSH
19908: EMPTY
19909: PPUSH
19910: CALL_OW 1
19914: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19915: LD_ADDR_EXP 63
19919: PUSH
19920: LD_EXP 63
19924: PPUSH
19925: LD_VAR 0 2
19929: PPUSH
19930: EMPTY
19931: PPUSH
19932: CALL_OW 1
19936: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19937: LD_ADDR_EXP 65
19941: PUSH
19942: LD_EXP 65
19946: PPUSH
19947: LD_VAR 0 2
19951: PPUSH
19952: EMPTY
19953: PPUSH
19954: CALL_OW 1
19958: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19959: LD_ADDR_EXP 66
19963: PUSH
19964: LD_EXP 66
19968: PPUSH
19969: LD_VAR 0 2
19973: PPUSH
19974: EMPTY
19975: PPUSH
19976: CALL_OW 1
19980: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19981: LD_ADDR_EXP 67
19985: PUSH
19986: LD_EXP 67
19990: PPUSH
19991: LD_VAR 0 2
19995: PPUSH
19996: EMPTY
19997: PPUSH
19998: CALL_OW 1
20002: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
20003: LD_ADDR_EXP 68
20007: PUSH
20008: LD_EXP 68
20012: PPUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: EMPTY
20019: PPUSH
20020: CALL_OW 1
20024: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
20025: LD_ADDR_EXP 69
20029: PUSH
20030: LD_EXP 69
20034: PPUSH
20035: LD_VAR 0 2
20039: PPUSH
20040: EMPTY
20041: PPUSH
20042: CALL_OW 1
20046: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
20047: LD_ADDR_EXP 70
20051: PUSH
20052: LD_EXP 70
20056: PPUSH
20057: LD_VAR 0 2
20061: PPUSH
20062: EMPTY
20063: PPUSH
20064: CALL_OW 1
20068: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
20069: LD_ADDR_EXP 71
20073: PUSH
20074: LD_EXP 71
20078: PPUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: EMPTY
20085: PPUSH
20086: CALL_OW 1
20090: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
20091: LD_ADDR_EXP 72
20095: PUSH
20096: LD_EXP 72
20100: PPUSH
20101: LD_VAR 0 2
20105: PPUSH
20106: EMPTY
20107: PPUSH
20108: CALL_OW 1
20112: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
20113: LD_ADDR_EXP 61
20117: PUSH
20118: LD_EXP 61
20122: PPUSH
20123: LD_VAR 0 2
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: CALL_OW 1
20135: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
20136: LD_ADDR_EXP 74
20140: PUSH
20141: LD_EXP 74
20145: PPUSH
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_INT 0
20153: PPUSH
20154: CALL_OW 1
20158: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
20159: LD_ADDR_EXP 62
20163: PUSH
20164: LD_EXP 62
20168: PPUSH
20169: LD_VAR 0 2
20173: PPUSH
20174: EMPTY
20175: PPUSH
20176: CALL_OW 1
20180: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
20181: LD_ADDR_EXP 73
20185: PUSH
20186: LD_EXP 73
20190: PPUSH
20191: LD_VAR 0 2
20195: PPUSH
20196: LD_INT 0
20198: PPUSH
20199: CALL_OW 1
20203: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
20204: LD_ADDR_EXP 75
20208: PUSH
20209: LD_EXP 75
20213: PPUSH
20214: LD_VAR 0 2
20218: PPUSH
20219: EMPTY
20220: PPUSH
20221: CALL_OW 1
20225: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
20226: LD_ADDR_EXP 78
20230: PUSH
20231: LD_EXP 78
20235: PPUSH
20236: LD_VAR 0 2
20240: PPUSH
20241: LD_INT 0
20243: PPUSH
20244: CALL_OW 1
20248: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
20249: LD_ADDR_EXP 79
20253: PUSH
20254: LD_EXP 79
20258: PPUSH
20259: LD_VAR 0 2
20263: PPUSH
20264: EMPTY
20265: PPUSH
20266: CALL_OW 1
20270: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
20271: LD_ADDR_EXP 80
20275: PUSH
20276: LD_EXP 80
20280: PPUSH
20281: LD_VAR 0 2
20285: PPUSH
20286: EMPTY
20287: PPUSH
20288: CALL_OW 1
20292: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20293: LD_ADDR_EXP 81
20297: PUSH
20298: LD_EXP 81
20302: PPUSH
20303: LD_VAR 0 2
20307: PPUSH
20308: EMPTY
20309: PPUSH
20310: CALL_OW 1
20314: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
20315: LD_ADDR_EXP 83
20319: PUSH
20320: LD_EXP 83
20324: PPUSH
20325: LD_VAR 0 2
20329: PPUSH
20330: LD_EXP 50
20334: PUSH
20335: LD_VAR 0 2
20339: ARRAY
20340: PPUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 30
20346: PUSH
20347: LD_INT 6
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 30
20356: PUSH
20357: LD_INT 7
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 8
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PPUSH
20380: CALL_OW 72
20384: PPUSH
20385: CALL_OW 1
20389: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
20390: LD_ADDR_EXP 84
20394: PUSH
20395: LD_EXP 84
20399: PPUSH
20400: LD_VAR 0 2
20404: PPUSH
20405: EMPTY
20406: PPUSH
20407: CALL_OW 1
20411: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
20412: LD_ADDR_EXP 85
20416: PUSH
20417: LD_EXP 85
20421: PPUSH
20422: LD_VAR 0 2
20426: PPUSH
20427: EMPTY
20428: PPUSH
20429: CALL_OW 1
20433: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
20434: LD_ADDR_EXP 86
20438: PUSH
20439: LD_EXP 86
20443: PPUSH
20444: LD_VAR 0 2
20448: PPUSH
20449: EMPTY
20450: PPUSH
20451: CALL_OW 1
20455: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
20456: LD_ADDR_EXP 87
20460: PUSH
20461: LD_EXP 87
20465: PPUSH
20466: LD_VAR 0 2
20470: PPUSH
20471: EMPTY
20472: PPUSH
20473: CALL_OW 1
20477: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
20478: LD_ADDR_EXP 88
20482: PUSH
20483: LD_EXP 88
20487: PPUSH
20488: LD_VAR 0 2
20492: PPUSH
20493: EMPTY
20494: PPUSH
20495: CALL_OW 1
20499: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
20500: LD_ADDR_EXP 89
20504: PUSH
20505: LD_EXP 89
20509: PPUSH
20510: LD_VAR 0 2
20514: PPUSH
20515: EMPTY
20516: PPUSH
20517: CALL_OW 1
20521: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
20522: LD_ADDR_EXP 90
20526: PUSH
20527: LD_EXP 90
20531: PPUSH
20532: LD_VAR 0 2
20536: PPUSH
20537: EMPTY
20538: PPUSH
20539: CALL_OW 1
20543: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
20544: LD_ADDR_EXP 91
20548: PUSH
20549: LD_EXP 91
20553: PPUSH
20554: LD_VAR 0 2
20558: PPUSH
20559: EMPTY
20560: PPUSH
20561: CALL_OW 1
20565: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
20566: LD_ADDR_EXP 92
20570: PUSH
20571: LD_EXP 92
20575: PPUSH
20576: LD_VAR 0 2
20580: PPUSH
20581: LD_INT 0
20583: PPUSH
20584: CALL_OW 1
20588: ST_TO_ADDR
// end ;
20589: GO 19513
20591: POP
20592: POP
// MC_InitSides ( ) ;
20593: CALL 20879 0 0
// MC_InitResearch ( ) ;
20597: CALL 20618 0 0
// CustomInitMacro ( ) ;
20601: CALL 300 0 0
// skirmish := true ;
20605: LD_ADDR_EXP 48
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// end ;
20613: LD_VAR 0 1
20617: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
20618: LD_INT 0
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
// if not mc_bases then
20626: LD_EXP 50
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 20874
// for i = 1 to 8 do
20635: LD_ADDR_VAR 0 2
20639: PUSH
20640: DOUBLE
20641: LD_INT 1
20643: DEC
20644: ST_TO_ADDR
20645: LD_INT 8
20647: PUSH
20648: FOR_TO
20649: IFFALSE 20675
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
20651: LD_ADDR_EXP 77
20655: PUSH
20656: LD_EXP 77
20660: PPUSH
20661: LD_VAR 0 2
20665: PPUSH
20666: EMPTY
20667: PPUSH
20668: CALL_OW 1
20672: ST_TO_ADDR
20673: GO 20648
20675: POP
20676: POP
// tmp := [ ] ;
20677: LD_ADDR_VAR 0 5
20681: PUSH
20682: EMPTY
20683: ST_TO_ADDR
// for i = 1 to mc_sides do
20684: LD_ADDR_VAR 0 2
20688: PUSH
20689: DOUBLE
20690: LD_INT 1
20692: DEC
20693: ST_TO_ADDR
20694: LD_EXP 76
20698: PUSH
20699: FOR_TO
20700: IFFALSE 20758
// if not mc_sides [ i ] in tmp then
20702: LD_EXP 76
20706: PUSH
20707: LD_VAR 0 2
20711: ARRAY
20712: PUSH
20713: LD_VAR 0 5
20717: IN
20718: NOT
20719: IFFALSE 20756
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20721: LD_ADDR_VAR 0 5
20725: PUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: LD_VAR 0 5
20735: PUSH
20736: LD_INT 1
20738: PLUS
20739: PPUSH
20740: LD_EXP 76
20744: PUSH
20745: LD_VAR 0 2
20749: ARRAY
20750: PPUSH
20751: CALL_OW 2
20755: ST_TO_ADDR
20756: GO 20699
20758: POP
20759: POP
// if not tmp then
20760: LD_VAR 0 5
20764: NOT
20765: IFFALSE 20769
// exit ;
20767: GO 20874
// for j in tmp do
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: LD_VAR 0 5
20778: PUSH
20779: FOR_IN
20780: IFFALSE 20872
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20782: LD_ADDR_VAR 0 6
20786: PUSH
20787: LD_INT 22
20789: PUSH
20790: LD_VAR 0 3
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PPUSH
20799: CALL_OW 69
20803: ST_TO_ADDR
// if not un then
20804: LD_VAR 0 6
20808: NOT
20809: IFFALSE 20813
// continue ;
20811: GO 20779
// nation := GetNation ( un [ 1 ] ) ;
20813: LD_ADDR_VAR 0 4
20817: PUSH
20818: LD_VAR 0 6
20822: PUSH
20823: LD_INT 1
20825: ARRAY
20826: PPUSH
20827: CALL_OW 248
20831: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20832: LD_ADDR_EXP 77
20836: PUSH
20837: LD_EXP 77
20841: PPUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_VAR 0 4
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL 47484 0 3
20864: PPUSH
20865: CALL_OW 1
20869: ST_TO_ADDR
// end ;
20870: GO 20779
20872: POP
20873: POP
// end ;
20874: LD_VAR 0 1
20878: RET
// export function MC_InitSides ( ) ; var i ; begin
20879: LD_INT 0
20881: PPUSH
20882: PPUSH
// if not mc_bases then
20883: LD_EXP 50
20887: NOT
20888: IFFALSE 20892
// exit ;
20890: GO 20966
// for i = 1 to mc_bases do
20892: LD_ADDR_VAR 0 2
20896: PUSH
20897: DOUBLE
20898: LD_INT 1
20900: DEC
20901: ST_TO_ADDR
20902: LD_EXP 50
20906: PUSH
20907: FOR_TO
20908: IFFALSE 20964
// if mc_bases [ i ] then
20910: LD_EXP 50
20914: PUSH
20915: LD_VAR 0 2
20919: ARRAY
20920: IFFALSE 20962
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20922: LD_ADDR_EXP 76
20926: PUSH
20927: LD_EXP 76
20931: PPUSH
20932: LD_VAR 0 2
20936: PPUSH
20937: LD_EXP 50
20941: PUSH
20942: LD_VAR 0 2
20946: ARRAY
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: CALL_OW 255
20956: PPUSH
20957: CALL_OW 1
20961: ST_TO_ADDR
20962: GO 20907
20964: POP
20965: POP
// end ;
20966: LD_VAR 0 1
20970: RET
// every 0 0$01 trigger skirmish do
20971: LD_EXP 48
20975: IFFALSE 21129
20977: GO 20979
20979: DISABLE
// begin enable ;
20980: ENABLE
// MC_CheckBuildings ( ) ;
20981: CALL 25627 0 0
// MC_CheckPeopleLife ( ) ;
20985: CALL 25752 0 0
// RaiseSailEvent ( 100 ) ;
20989: LD_INT 100
20991: PPUSH
20992: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20996: LD_INT 103
20998: PPUSH
20999: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
21003: LD_INT 104
21005: PPUSH
21006: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
21010: LD_INT 105
21012: PPUSH
21013: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
21017: LD_INT 106
21019: PPUSH
21020: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
21024: LD_INT 107
21026: PPUSH
21027: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
21031: LD_INT 108
21033: PPUSH
21034: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
21038: LD_INT 109
21040: PPUSH
21041: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
21045: LD_INT 110
21047: PPUSH
21048: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
21052: LD_INT 111
21054: PPUSH
21055: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
21059: LD_INT 112
21061: PPUSH
21062: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
21066: LD_INT 113
21068: PPUSH
21069: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
21073: LD_INT 120
21075: PPUSH
21076: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
21080: LD_INT 121
21082: PPUSH
21083: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
21087: LD_INT 122
21089: PPUSH
21090: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
21094: LD_INT 123
21096: PPUSH
21097: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
21101: LD_INT 124
21103: PPUSH
21104: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
21108: LD_INT 125
21110: PPUSH
21111: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
21115: LD_INT 126
21117: PPUSH
21118: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
21122: LD_INT 200
21124: PPUSH
21125: CALL_OW 427
// end ;
21129: END
// on SailEvent ( event ) do begin if event < 100 then
21130: LD_VAR 0 1
21134: PUSH
21135: LD_INT 100
21137: LESS
21138: IFFALSE 21149
// CustomEvent ( event ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL 16648 0 1
// if event = 100 then
21149: LD_VAR 0 1
21153: PUSH
21154: LD_INT 100
21156: EQUAL
21157: IFFALSE 21163
// MC_ClassManager ( ) ;
21159: CALL 21555 0 0
// if event = 101 then
21163: LD_VAR 0 1
21167: PUSH
21168: LD_INT 101
21170: EQUAL
21171: IFFALSE 21177
// MC_RepairBuildings ( ) ;
21173: CALL 26348 0 0
// if event = 102 then
21177: LD_VAR 0 1
21181: PUSH
21182: LD_INT 102
21184: EQUAL
21185: IFFALSE 21191
// MC_Heal ( ) ;
21187: CALL 27212 0 0
// if event = 103 then
21191: LD_VAR 0 1
21195: PUSH
21196: LD_INT 103
21198: EQUAL
21199: IFFALSE 21205
// MC_Build ( ) ;
21201: CALL 27634 0 0
// if event = 104 then
21205: LD_VAR 0 1
21209: PUSH
21210: LD_INT 104
21212: EQUAL
21213: IFFALSE 21219
// MC_TurretWeapon ( ) ;
21215: CALL 29247 0 0
// if event = 105 then
21219: LD_VAR 0 1
21223: PUSH
21224: LD_INT 105
21226: EQUAL
21227: IFFALSE 21233
// MC_BuildUpgrade ( ) ;
21229: CALL 28798 0 0
// if event = 106 then
21233: LD_VAR 0 1
21237: PUSH
21238: LD_INT 106
21240: EQUAL
21241: IFFALSE 21247
// MC_PlantMines ( ) ;
21243: CALL 29677 0 0
// if event = 107 then
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 107
21254: EQUAL
21255: IFFALSE 21261
// MC_CollectCrates ( ) ;
21257: CALL 30475 0 0
// if event = 108 then
21261: LD_VAR 0 1
21265: PUSH
21266: LD_INT 108
21268: EQUAL
21269: IFFALSE 21275
// MC_LinkRemoteControl ( ) ;
21271: CALL 32251 0 0
// if event = 109 then
21275: LD_VAR 0 1
21279: PUSH
21280: LD_INT 109
21282: EQUAL
21283: IFFALSE 21289
// MC_ProduceVehicle ( ) ;
21285: CALL 32432 0 0
// if event = 110 then
21289: LD_VAR 0 1
21293: PUSH
21294: LD_INT 110
21296: EQUAL
21297: IFFALSE 21303
// MC_SendAttack ( ) ;
21299: CALL 32898 0 0
// if event = 111 then
21303: LD_VAR 0 1
21307: PUSH
21308: LD_INT 111
21310: EQUAL
21311: IFFALSE 21317
// MC_Defend ( ) ;
21313: CALL 33006 0 0
// if event = 112 then
21317: LD_VAR 0 1
21321: PUSH
21322: LD_INT 112
21324: EQUAL
21325: IFFALSE 21331
// MC_Research ( ) ;
21327: CALL 33611 0 0
// if event = 113 then
21331: LD_VAR 0 1
21335: PUSH
21336: LD_INT 113
21338: EQUAL
21339: IFFALSE 21345
// MC_MinesTrigger ( ) ;
21341: CALL 34725 0 0
// if event = 120 then
21345: LD_VAR 0 1
21349: PUSH
21350: LD_INT 120
21352: EQUAL
21353: IFFALSE 21359
// MC_RepairVehicle ( ) ;
21355: CALL 34824 0 0
// if event = 121 then
21359: LD_VAR 0 1
21363: PUSH
21364: LD_INT 121
21366: EQUAL
21367: IFFALSE 21373
// MC_TameApe ( ) ;
21369: CALL 35554 0 0
// if event = 122 then
21373: LD_VAR 0 1
21377: PUSH
21378: LD_INT 122
21380: EQUAL
21381: IFFALSE 21387
// MC_ChangeApeClass ( ) ;
21383: CALL 36383 0 0
// if event = 123 then
21387: LD_VAR 0 1
21391: PUSH
21392: LD_INT 123
21394: EQUAL
21395: IFFALSE 21401
// MC_Bazooka ( ) ;
21397: CALL 37033 0 0
// if event = 124 then
21401: LD_VAR 0 1
21405: PUSH
21406: LD_INT 124
21408: EQUAL
21409: IFFALSE 21415
// MC_TeleportExit ( ) ;
21411: CALL 37231 0 0
// if event = 125 then
21415: LD_VAR 0 1
21419: PUSH
21420: LD_INT 125
21422: EQUAL
21423: IFFALSE 21429
// MC_Deposits ( ) ;
21425: CALL 37878 0 0
// if event = 126 then
21429: LD_VAR 0 1
21433: PUSH
21434: LD_INT 126
21436: EQUAL
21437: IFFALSE 21443
// MC_RemoteDriver ( ) ;
21439: CALL 38503 0 0
// if event = 200 then
21443: LD_VAR 0 1
21447: PUSH
21448: LD_INT 200
21450: EQUAL
21451: IFFALSE 21457
// MC_Idle ( ) ;
21453: CALL 40452 0 0
// end ;
21457: PPOPN 1
21459: END
// export function MC_Reset ( base , tag ) ; var i ; begin
21460: LD_INT 0
21462: PPUSH
21463: PPUSH
// if not mc_bases [ base ] or not tag then
21464: LD_EXP 50
21468: PUSH
21469: LD_VAR 0 1
21473: ARRAY
21474: NOT
21475: PUSH
21476: LD_VAR 0 2
21480: NOT
21481: OR
21482: IFFALSE 21486
// exit ;
21484: GO 21550
// for i in mc_bases [ base ] union mc_ape [ base ] do
21486: LD_ADDR_VAR 0 4
21490: PUSH
21491: LD_EXP 50
21495: PUSH
21496: LD_VAR 0 1
21500: ARRAY
21501: PUSH
21502: LD_EXP 79
21506: PUSH
21507: LD_VAR 0 1
21511: ARRAY
21512: UNION
21513: PUSH
21514: FOR_IN
21515: IFFALSE 21548
// if GetTag ( i ) = tag then
21517: LD_VAR 0 4
21521: PPUSH
21522: CALL_OW 110
21526: PUSH
21527: LD_VAR 0 2
21531: EQUAL
21532: IFFALSE 21546
// SetTag ( i , 0 ) ;
21534: LD_VAR 0 4
21538: PPUSH
21539: LD_INT 0
21541: PPUSH
21542: CALL_OW 109
21546: GO 21514
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 3
21554: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
// if not mc_bases then
21565: LD_EXP 50
21569: NOT
21570: IFFALSE 21574
// exit ;
21572: GO 22032
// for i = 1 to mc_bases do
21574: LD_ADDR_VAR 0 2
21578: PUSH
21579: DOUBLE
21580: LD_INT 1
21582: DEC
21583: ST_TO_ADDR
21584: LD_EXP 50
21588: PUSH
21589: FOR_TO
21590: IFFALSE 22030
// begin tmp := MC_ClassCheckReq ( i ) ;
21592: LD_ADDR_VAR 0 4
21596: PUSH
21597: LD_VAR 0 2
21601: PPUSH
21602: CALL 22037 0 1
21606: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
21607: LD_ADDR_EXP 91
21611: PUSH
21612: LD_EXP 91
21616: PPUSH
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 4
21626: PPUSH
21627: CALL_OW 1
21631: ST_TO_ADDR
// if not tmp then
21632: LD_VAR 0 4
21636: NOT
21637: IFFALSE 21641
// continue ;
21639: GO 21589
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
21641: LD_ADDR_VAR 0 6
21645: PUSH
21646: LD_EXP 50
21650: PUSH
21651: LD_VAR 0 2
21655: ARRAY
21656: PPUSH
21657: LD_INT 2
21659: PUSH
21660: LD_INT 30
21662: PUSH
21663: LD_INT 4
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 30
21672: PUSH
21673: LD_INT 5
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: PPUSH
21685: CALL_OW 72
21689: PUSH
21690: LD_EXP 50
21694: PUSH
21695: LD_VAR 0 2
21699: ARRAY
21700: PPUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 30
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 72
21733: PUSH
21734: LD_EXP 50
21738: PUSH
21739: LD_VAR 0 2
21743: ARRAY
21744: PPUSH
21745: LD_INT 30
21747: PUSH
21748: LD_INT 3
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PPUSH
21755: CALL_OW 72
21759: PUSH
21760: LD_EXP 50
21764: PUSH
21765: LD_VAR 0 2
21769: ARRAY
21770: PPUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 30
21776: PUSH
21777: LD_INT 6
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 7
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 30
21796: PUSH
21797: LD_INT 8
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 72
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// for j = 1 to 4 do
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: DOUBLE
21827: LD_INT 1
21829: DEC
21830: ST_TO_ADDR
21831: LD_INT 4
21833: PUSH
21834: FOR_TO
21835: IFFALSE 22026
// begin if not tmp [ j ] then
21837: LD_VAR 0 4
21841: PUSH
21842: LD_VAR 0 3
21846: ARRAY
21847: NOT
21848: IFFALSE 21852
// continue ;
21850: GO 21834
// for p in tmp [ j ] do
21852: LD_ADDR_VAR 0 5
21856: PUSH
21857: LD_VAR 0 4
21861: PUSH
21862: LD_VAR 0 3
21866: ARRAY
21867: PUSH
21868: FOR_IN
21869: IFFALSE 22022
// begin if not b [ j ] then
21871: LD_VAR 0 6
21875: PUSH
21876: LD_VAR 0 3
21880: ARRAY
21881: NOT
21882: IFFALSE 21886
// break ;
21884: GO 22022
// e := 0 ;
21886: LD_ADDR_VAR 0 7
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// for k in b [ j ] do
21894: LD_ADDR_VAR 0 8
21898: PUSH
21899: LD_VAR 0 6
21903: PUSH
21904: LD_VAR 0 3
21908: ARRAY
21909: PUSH
21910: FOR_IN
21911: IFFALSE 21938
// if IsNotFull ( k ) then
21913: LD_VAR 0 8
21917: PPUSH
21918: CALL 52044 0 1
21922: IFFALSE 21936
// begin e := k ;
21924: LD_ADDR_VAR 0 7
21928: PUSH
21929: LD_VAR 0 8
21933: ST_TO_ADDR
// break ;
21934: GO 21938
// end ;
21936: GO 21910
21938: POP
21939: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21940: LD_VAR 0 7
21944: PUSH
21945: LD_VAR 0 5
21949: PPUSH
21950: LD_VAR 0 7
21954: PPUSH
21955: CALL 89173 0 2
21959: NOT
21960: AND
21961: IFFALSE 22020
// begin if IsInUnit ( p ) then
21963: LD_VAR 0 5
21967: PPUSH
21968: CALL_OW 310
21972: IFFALSE 21983
// ComExitBuilding ( p ) ;
21974: LD_VAR 0 5
21978: PPUSH
21979: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_VAR 0 7
21992: PPUSH
21993: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21997: LD_VAR 0 5
22001: PPUSH
22002: LD_VAR 0 3
22006: PPUSH
22007: CALL_OW 183
// AddComExitBuilding ( p ) ;
22011: LD_VAR 0 5
22015: PPUSH
22016: CALL_OW 182
// end ; end ;
22020: GO 21868
22022: POP
22023: POP
// end ;
22024: GO 21834
22026: POP
22027: POP
// end ;
22028: GO 21589
22030: POP
22031: POP
// end ;
22032: LD_VAR 0 1
22036: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
22037: LD_INT 0
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
22051: LD_VAR 0 1
22055: NOT
22056: PUSH
22057: LD_EXP 50
22061: PUSH
22062: LD_VAR 0 1
22066: ARRAY
22067: NOT
22068: OR
22069: PUSH
22070: LD_EXP 50
22074: PUSH
22075: LD_VAR 0 1
22079: ARRAY
22080: PPUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 30
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 30
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 72
22113: NOT
22114: OR
22115: IFFALSE 22119
// exit ;
22117: GO 25622
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22119: LD_ADDR_VAR 0 4
22123: PUSH
22124: LD_EXP 50
22128: PUSH
22129: LD_VAR 0 1
22133: ARRAY
22134: PPUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 25
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 25
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 25
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 25
22170: PUSH
22171: LD_INT 4
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 25
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 25
22190: PUSH
22191: LD_INT 8
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 9
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: PPUSH
22218: CALL_OW 72
22222: ST_TO_ADDR
// if not tmp then
22223: LD_VAR 0 4
22227: NOT
22228: IFFALSE 22232
// exit ;
22230: GO 25622
// for i in tmp do
22232: LD_ADDR_VAR 0 3
22236: PUSH
22237: LD_VAR 0 4
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22274
// if GetTag ( i ) then
22245: LD_VAR 0 3
22249: PPUSH
22250: CALL_OW 110
22254: IFFALSE 22272
// tmp := tmp diff i ;
22256: LD_ADDR_VAR 0 4
22260: PUSH
22261: LD_VAR 0 4
22265: PUSH
22266: LD_VAR 0 3
22270: DIFF
22271: ST_TO_ADDR
22272: GO 22242
22274: POP
22275: POP
// if not tmp then
22276: LD_VAR 0 4
22280: NOT
22281: IFFALSE 22285
// exit ;
22283: GO 25622
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22285: LD_ADDR_VAR 0 5
22289: PUSH
22290: LD_EXP 50
22294: PUSH
22295: LD_VAR 0 1
22299: ARRAY
22300: PPUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 25
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 25
22316: PUSH
22317: LD_INT 5
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 25
22326: PUSH
22327: LD_INT 8
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 25
22336: PUSH
22337: LD_INT 9
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PPUSH
22351: CALL_OW 72
22355: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
22356: LD_ADDR_VAR 0 6
22360: PUSH
22361: LD_EXP 50
22365: PUSH
22366: LD_VAR 0 1
22370: ARRAY
22371: PPUSH
22372: LD_INT 25
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PPUSH
22382: CALL_OW 72
22386: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
22387: LD_ADDR_VAR 0 7
22391: PUSH
22392: LD_EXP 50
22396: PUSH
22397: LD_VAR 0 1
22401: ARRAY
22402: PPUSH
22403: LD_INT 25
22405: PUSH
22406: LD_INT 3
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PPUSH
22413: CALL_OW 72
22417: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
22418: LD_ADDR_VAR 0 8
22422: PUSH
22423: LD_EXP 50
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: LD_INT 25
22436: PUSH
22437: LD_INT 4
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 24
22446: PUSH
22447: LD_INT 251
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PPUSH
22458: CALL_OW 72
22462: ST_TO_ADDR
// if mc_scan [ base ] then
22463: LD_EXP 73
22467: PUSH
22468: LD_VAR 0 1
22472: ARRAY
22473: IFFALSE 22934
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
22475: LD_ADDR_EXP 92
22479: PUSH
22480: LD_EXP 92
22484: PPUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: LD_INT 4
22492: PPUSH
22493: CALL_OW 1
22497: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
22498: LD_ADDR_VAR 0 12
22502: PUSH
22503: LD_EXP 50
22507: PUSH
22508: LD_VAR 0 1
22512: ARRAY
22513: PPUSH
22514: LD_INT 2
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 30
22529: PUSH
22530: LD_INT 5
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: PPUSH
22542: CALL_OW 72
22546: ST_TO_ADDR
// if not b then
22547: LD_VAR 0 12
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 25622
// p := [ ] ;
22556: LD_ADDR_VAR 0 11
22560: PUSH
22561: EMPTY
22562: ST_TO_ADDR
// if sci >= 2 then
22563: LD_VAR 0 8
22567: PUSH
22568: LD_INT 2
22570: GREATEREQUAL
22571: IFFALSE 22602
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
22573: LD_ADDR_VAR 0 8
22577: PUSH
22578: LD_VAR 0 8
22582: PUSH
22583: LD_INT 1
22585: ARRAY
22586: PUSH
22587: LD_VAR 0 8
22591: PUSH
22592: LD_INT 2
22594: ARRAY
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: ST_TO_ADDR
22600: GO 22663
// if sci = 1 then
22602: LD_VAR 0 8
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22631
// sci := [ sci [ 1 ] ] else
22612: LD_ADDR_VAR 0 8
22616: PUSH
22617: LD_VAR 0 8
22621: PUSH
22622: LD_INT 1
22624: ARRAY
22625: PUSH
22626: EMPTY
22627: LIST
22628: ST_TO_ADDR
22629: GO 22663
// if sci = 0 then
22631: LD_VAR 0 8
22635: PUSH
22636: LD_INT 0
22638: EQUAL
22639: IFFALSE 22663
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
22641: LD_ADDR_VAR 0 11
22645: PUSH
22646: LD_VAR 0 4
22650: PPUSH
22651: LD_INT 4
22653: PPUSH
22654: CALL 89036 0 2
22658: PUSH
22659: LD_INT 1
22661: ARRAY
22662: ST_TO_ADDR
// if eng > 4 then
22663: LD_VAR 0 6
22667: PUSH
22668: LD_INT 4
22670: GREATER
22671: IFFALSE 22717
// for i = eng downto 4 do
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: DOUBLE
22679: LD_VAR 0 6
22683: INC
22684: ST_TO_ADDR
22685: LD_INT 4
22687: PUSH
22688: FOR_DOWNTO
22689: IFFALSE 22715
// eng := eng diff eng [ i ] ;
22691: LD_ADDR_VAR 0 6
22695: PUSH
22696: LD_VAR 0 6
22700: PUSH
22701: LD_VAR 0 6
22705: PUSH
22706: LD_VAR 0 3
22710: ARRAY
22711: DIFF
22712: ST_TO_ADDR
22713: GO 22688
22715: POP
22716: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 4
22726: PUSH
22727: LD_VAR 0 5
22731: PUSH
22732: LD_VAR 0 6
22736: UNION
22737: PUSH
22738: LD_VAR 0 7
22742: UNION
22743: PUSH
22744: LD_VAR 0 8
22748: UNION
22749: DIFF
22750: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22751: LD_ADDR_VAR 0 13
22755: PUSH
22756: LD_EXP 50
22760: PUSH
22761: LD_VAR 0 1
22765: ARRAY
22766: PPUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 30
22772: PUSH
22773: LD_INT 32
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 30
22782: PUSH
22783: LD_INT 31
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: PPUSH
22795: CALL_OW 72
22799: PUSH
22800: LD_EXP 50
22804: PUSH
22805: LD_VAR 0 1
22809: ARRAY
22810: PPUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 30
22816: PUSH
22817: LD_INT 4
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 72
22843: PUSH
22844: LD_INT 6
22846: MUL
22847: PLUS
22848: ST_TO_ADDR
// if bcount < tmp then
22849: LD_VAR 0 13
22853: PUSH
22854: LD_VAR 0 4
22858: LESS
22859: IFFALSE 22905
// for i = tmp downto bcount do
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: DOUBLE
22867: LD_VAR 0 4
22871: INC
22872: ST_TO_ADDR
22873: LD_VAR 0 13
22877: PUSH
22878: FOR_DOWNTO
22879: IFFALSE 22903
// tmp := Delete ( tmp , tmp ) ;
22881: LD_ADDR_VAR 0 4
22885: PUSH
22886: LD_VAR 0 4
22890: PPUSH
22891: LD_VAR 0 4
22895: PPUSH
22896: CALL_OW 3
22900: ST_TO_ADDR
22901: GO 22878
22903: POP
22904: POP
// result := [ tmp , 0 , 0 , p ] ;
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_VAR 0 4
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_VAR 0 11
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
// exit ;
22932: GO 25622
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22934: LD_EXP 50
22938: PUSH
22939: LD_VAR 0 1
22943: ARRAY
22944: PPUSH
22945: LD_INT 2
22947: PUSH
22948: LD_INT 30
22950: PUSH
22951: LD_INT 6
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 30
22960: PUSH
22961: LD_INT 7
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 30
22970: PUSH
22971: LD_INT 8
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: PPUSH
22984: CALL_OW 72
22988: NOT
22989: PUSH
22990: LD_EXP 50
22994: PUSH
22995: LD_VAR 0 1
22999: ARRAY
23000: PPUSH
23001: LD_INT 30
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 72
23015: NOT
23016: AND
23017: IFFALSE 23089
// begin if eng = tmp then
23019: LD_VAR 0 6
23023: PUSH
23024: LD_VAR 0 4
23028: EQUAL
23029: IFFALSE 23033
// exit ;
23031: GO 25622
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
23033: LD_ADDR_EXP 92
23037: PUSH
23038: LD_EXP 92
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 1
23055: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_VAR 0 4
23068: PUSH
23069: LD_VAR 0 6
23073: DIFF
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: ST_TO_ADDR
// exit ;
23087: GO 25622
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23089: LD_EXP 77
23093: PUSH
23094: LD_EXP 76
23098: PUSH
23099: LD_VAR 0 1
23103: ARRAY
23104: ARRAY
23105: PUSH
23106: LD_EXP 50
23110: PUSH
23111: LD_VAR 0 1
23115: ARRAY
23116: PPUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 30
23122: PUSH
23123: LD_INT 6
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 30
23132: PUSH
23133: LD_INT 7
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 8
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: PPUSH
23156: CALL_OW 72
23160: AND
23161: PUSH
23162: LD_EXP 50
23166: PUSH
23167: LD_VAR 0 1
23171: ARRAY
23172: PPUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PPUSH
23183: CALL_OW 72
23187: NOT
23188: AND
23189: IFFALSE 23403
// begin if sci >= 6 then
23191: LD_VAR 0 8
23195: PUSH
23196: LD_INT 6
23198: GREATEREQUAL
23199: IFFALSE 23203
// exit ;
23201: GO 25622
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
23203: LD_ADDR_EXP 92
23207: PUSH
23208: LD_EXP 92
23212: PPUSH
23213: LD_VAR 0 1
23217: PPUSH
23218: LD_INT 2
23220: PPUSH
23221: CALL_OW 1
23225: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
23226: LD_ADDR_VAR 0 9
23230: PUSH
23231: LD_VAR 0 4
23235: PUSH
23236: LD_VAR 0 8
23240: DIFF
23241: PPUSH
23242: LD_INT 4
23244: PPUSH
23245: CALL 89036 0 2
23249: ST_TO_ADDR
// p := [ ] ;
23250: LD_ADDR_VAR 0 11
23254: PUSH
23255: EMPTY
23256: ST_TO_ADDR
// if sci < 6 and sort > 6 then
23257: LD_VAR 0 8
23261: PUSH
23262: LD_INT 6
23264: LESS
23265: PUSH
23266: LD_VAR 0 9
23270: PUSH
23271: LD_INT 6
23273: GREATER
23274: AND
23275: IFFALSE 23356
// begin for i = 1 to 6 - sci do
23277: LD_ADDR_VAR 0 3
23281: PUSH
23282: DOUBLE
23283: LD_INT 1
23285: DEC
23286: ST_TO_ADDR
23287: LD_INT 6
23289: PUSH
23290: LD_VAR 0 8
23294: MINUS
23295: PUSH
23296: FOR_TO
23297: IFFALSE 23352
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
23299: LD_ADDR_VAR 0 11
23303: PUSH
23304: LD_VAR 0 11
23308: PPUSH
23309: LD_VAR 0 11
23313: PUSH
23314: LD_INT 1
23316: PLUS
23317: PPUSH
23318: LD_VAR 0 9
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: CALL_OW 2
23331: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
23332: LD_ADDR_VAR 0 9
23336: PUSH
23337: LD_VAR 0 9
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 3
23349: ST_TO_ADDR
// end ;
23350: GO 23296
23352: POP
23353: POP
// end else
23354: GO 23376
// if sort then
23356: LD_VAR 0 9
23360: IFFALSE 23376
// p := sort [ 1 ] ;
23362: LD_ADDR_VAR 0 11
23366: PUSH
23367: LD_VAR 0 9
23371: PUSH
23372: LD_INT 1
23374: ARRAY
23375: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_VAR 0 11
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: ST_TO_ADDR
// exit ;
23401: GO 25622
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23403: LD_EXP 77
23407: PUSH
23408: LD_EXP 76
23412: PUSH
23413: LD_VAR 0 1
23417: ARRAY
23418: ARRAY
23419: PUSH
23420: LD_EXP 50
23424: PUSH
23425: LD_VAR 0 1
23429: ARRAY
23430: PPUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 6
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 7
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 8
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: PPUSH
23470: CALL_OW 72
23474: AND
23475: PUSH
23476: LD_EXP 50
23480: PUSH
23481: LD_VAR 0 1
23485: ARRAY
23486: PPUSH
23487: LD_INT 30
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PPUSH
23497: CALL_OW 72
23501: AND
23502: IFFALSE 24236
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
23504: LD_ADDR_EXP 92
23508: PUSH
23509: LD_EXP 92
23513: PPUSH
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 3
23521: PPUSH
23522: CALL_OW 1
23526: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// if not eng then
23550: LD_VAR 0 6
23554: NOT
23555: IFFALSE 23618
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
23557: LD_ADDR_VAR 0 11
23561: PUSH
23562: LD_VAR 0 4
23566: PPUSH
23567: LD_INT 2
23569: PPUSH
23570: CALL 89036 0 2
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
23579: LD_ADDR_VAR 0 2
23583: PUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_INT 2
23591: PPUSH
23592: LD_VAR 0 11
23596: PPUSH
23597: CALL_OW 1
23601: ST_TO_ADDR
// tmp := tmp diff p ;
23602: LD_ADDR_VAR 0 4
23606: PUSH
23607: LD_VAR 0 4
23611: PUSH
23612: LD_VAR 0 11
23616: DIFF
23617: ST_TO_ADDR
// end ; if tmp and sci < 6 then
23618: LD_VAR 0 4
23622: PUSH
23623: LD_VAR 0 8
23627: PUSH
23628: LD_INT 6
23630: LESS
23631: AND
23632: IFFALSE 23820
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
23634: LD_ADDR_VAR 0 9
23638: PUSH
23639: LD_VAR 0 4
23643: PUSH
23644: LD_VAR 0 8
23648: PUSH
23649: LD_VAR 0 7
23653: UNION
23654: DIFF
23655: PPUSH
23656: LD_INT 4
23658: PPUSH
23659: CALL 89036 0 2
23663: ST_TO_ADDR
// p := [ ] ;
23664: LD_ADDR_VAR 0 11
23668: PUSH
23669: EMPTY
23670: ST_TO_ADDR
// if sort then
23671: LD_VAR 0 9
23675: IFFALSE 23791
// for i = 1 to 6 - sci do
23677: LD_ADDR_VAR 0 3
23681: PUSH
23682: DOUBLE
23683: LD_INT 1
23685: DEC
23686: ST_TO_ADDR
23687: LD_INT 6
23689: PUSH
23690: LD_VAR 0 8
23694: MINUS
23695: PUSH
23696: FOR_TO
23697: IFFALSE 23789
// begin if i = sort then
23699: LD_VAR 0 3
23703: PUSH
23704: LD_VAR 0 9
23708: EQUAL
23709: IFFALSE 23713
// break ;
23711: GO 23789
// if GetClass ( i ) = 4 then
23713: LD_VAR 0 3
23717: PPUSH
23718: CALL_OW 257
23722: PUSH
23723: LD_INT 4
23725: EQUAL
23726: IFFALSE 23730
// continue ;
23728: GO 23696
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23730: LD_ADDR_VAR 0 11
23734: PUSH
23735: LD_VAR 0 11
23739: PPUSH
23740: LD_VAR 0 11
23744: PUSH
23745: LD_INT 1
23747: PLUS
23748: PPUSH
23749: LD_VAR 0 9
23753: PUSH
23754: LD_VAR 0 3
23758: ARRAY
23759: PPUSH
23760: CALL_OW 2
23764: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_VAR 0 4
23774: PUSH
23775: LD_VAR 0 9
23779: PUSH
23780: LD_VAR 0 3
23784: ARRAY
23785: DIFF
23786: ST_TO_ADDR
// end ;
23787: GO 23696
23789: POP
23790: POP
// if p then
23791: LD_VAR 0 11
23795: IFFALSE 23820
// result := Replace ( result , 4 , p ) ;
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_VAR 0 2
23806: PPUSH
23807: LD_INT 4
23809: PPUSH
23810: LD_VAR 0 11
23814: PPUSH
23815: CALL_OW 1
23819: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23820: LD_VAR 0 4
23824: PUSH
23825: LD_VAR 0 7
23829: PUSH
23830: LD_INT 6
23832: LESS
23833: AND
23834: IFFALSE 24022
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23836: LD_ADDR_VAR 0 9
23840: PUSH
23841: LD_VAR 0 4
23845: PUSH
23846: LD_VAR 0 8
23850: PUSH
23851: LD_VAR 0 7
23855: UNION
23856: DIFF
23857: PPUSH
23858: LD_INT 3
23860: PPUSH
23861: CALL 89036 0 2
23865: ST_TO_ADDR
// p := [ ] ;
23866: LD_ADDR_VAR 0 11
23870: PUSH
23871: EMPTY
23872: ST_TO_ADDR
// if sort then
23873: LD_VAR 0 9
23877: IFFALSE 23993
// for i = 1 to 6 - mech do
23879: LD_ADDR_VAR 0 3
23883: PUSH
23884: DOUBLE
23885: LD_INT 1
23887: DEC
23888: ST_TO_ADDR
23889: LD_INT 6
23891: PUSH
23892: LD_VAR 0 7
23896: MINUS
23897: PUSH
23898: FOR_TO
23899: IFFALSE 23991
// begin if i = sort then
23901: LD_VAR 0 3
23905: PUSH
23906: LD_VAR 0 9
23910: EQUAL
23911: IFFALSE 23915
// break ;
23913: GO 23991
// if GetClass ( i ) = 3 then
23915: LD_VAR 0 3
23919: PPUSH
23920: CALL_OW 257
23924: PUSH
23925: LD_INT 3
23927: EQUAL
23928: IFFALSE 23932
// continue ;
23930: GO 23898
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23932: LD_ADDR_VAR 0 11
23936: PUSH
23937: LD_VAR 0 11
23941: PPUSH
23942: LD_VAR 0 11
23946: PUSH
23947: LD_INT 1
23949: PLUS
23950: PPUSH
23951: LD_VAR 0 9
23955: PUSH
23956: LD_VAR 0 3
23960: ARRAY
23961: PPUSH
23962: CALL_OW 2
23966: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23967: LD_ADDR_VAR 0 4
23971: PUSH
23972: LD_VAR 0 4
23976: PUSH
23977: LD_VAR 0 9
23981: PUSH
23982: LD_VAR 0 3
23986: ARRAY
23987: DIFF
23988: ST_TO_ADDR
// end ;
23989: GO 23898
23991: POP
23992: POP
// if p then
23993: LD_VAR 0 11
23997: IFFALSE 24022
// result := Replace ( result , 3 , p ) ;
23999: LD_ADDR_VAR 0 2
24003: PUSH
24004: LD_VAR 0 2
24008: PPUSH
24009: LD_INT 3
24011: PPUSH
24012: LD_VAR 0 11
24016: PPUSH
24017: CALL_OW 1
24021: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
24022: LD_VAR 0 4
24026: PUSH
24027: LD_INT 6
24029: GREATER
24030: PUSH
24031: LD_VAR 0 6
24035: PUSH
24036: LD_INT 6
24038: LESS
24039: AND
24040: IFFALSE 24234
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24042: LD_ADDR_VAR 0 9
24046: PUSH
24047: LD_VAR 0 4
24051: PUSH
24052: LD_VAR 0 8
24056: PUSH
24057: LD_VAR 0 7
24061: UNION
24062: PUSH
24063: LD_VAR 0 6
24067: UNION
24068: DIFF
24069: PPUSH
24070: LD_INT 2
24072: PPUSH
24073: CALL 89036 0 2
24077: ST_TO_ADDR
// p := [ ] ;
24078: LD_ADDR_VAR 0 11
24082: PUSH
24083: EMPTY
24084: ST_TO_ADDR
// if sort then
24085: LD_VAR 0 9
24089: IFFALSE 24205
// for i = 1 to 6 - eng do
24091: LD_ADDR_VAR 0 3
24095: PUSH
24096: DOUBLE
24097: LD_INT 1
24099: DEC
24100: ST_TO_ADDR
24101: LD_INT 6
24103: PUSH
24104: LD_VAR 0 6
24108: MINUS
24109: PUSH
24110: FOR_TO
24111: IFFALSE 24203
// begin if i = sort then
24113: LD_VAR 0 3
24117: PUSH
24118: LD_VAR 0 9
24122: EQUAL
24123: IFFALSE 24127
// break ;
24125: GO 24203
// if GetClass ( i ) = 2 then
24127: LD_VAR 0 3
24131: PPUSH
24132: CALL_OW 257
24136: PUSH
24137: LD_INT 2
24139: EQUAL
24140: IFFALSE 24144
// continue ;
24142: GO 24110
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24144: LD_ADDR_VAR 0 11
24148: PUSH
24149: LD_VAR 0 11
24153: PPUSH
24154: LD_VAR 0 11
24158: PUSH
24159: LD_INT 1
24161: PLUS
24162: PPUSH
24163: LD_VAR 0 9
24167: PUSH
24168: LD_VAR 0 3
24172: ARRAY
24173: PPUSH
24174: CALL_OW 2
24178: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24179: LD_ADDR_VAR 0 4
24183: PUSH
24184: LD_VAR 0 4
24188: PUSH
24189: LD_VAR 0 9
24193: PUSH
24194: LD_VAR 0 3
24198: ARRAY
24199: DIFF
24200: ST_TO_ADDR
// end ;
24201: GO 24110
24203: POP
24204: POP
// if p then
24205: LD_VAR 0 11
24209: IFFALSE 24234
// result := Replace ( result , 2 , p ) ;
24211: LD_ADDR_VAR 0 2
24215: PUSH
24216: LD_VAR 0 2
24220: PPUSH
24221: LD_INT 2
24223: PPUSH
24224: LD_VAR 0 11
24228: PPUSH
24229: CALL_OW 1
24233: ST_TO_ADDR
// end ; exit ;
24234: GO 25622
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
24236: LD_EXP 77
24240: PUSH
24241: LD_EXP 76
24245: PUSH
24246: LD_VAR 0 1
24250: ARRAY
24251: ARRAY
24252: NOT
24253: PUSH
24254: LD_EXP 50
24258: PUSH
24259: LD_VAR 0 1
24263: ARRAY
24264: PPUSH
24265: LD_INT 30
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 72
24279: AND
24280: PUSH
24281: LD_EXP 55
24285: PUSH
24286: LD_VAR 0 1
24290: ARRAY
24291: AND
24292: IFFALSE 24900
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
24294: LD_ADDR_EXP 92
24298: PUSH
24299: LD_EXP 92
24303: PPUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: LD_INT 5
24311: PPUSH
24312: CALL_OW 1
24316: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
// if sci > 1 then
24340: LD_VAR 0 8
24344: PUSH
24345: LD_INT 1
24347: GREATER
24348: IFFALSE 24376
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
24350: LD_ADDR_VAR 0 4
24354: PUSH
24355: LD_VAR 0 4
24359: PUSH
24360: LD_VAR 0 8
24364: PUSH
24365: LD_VAR 0 8
24369: PUSH
24370: LD_INT 1
24372: ARRAY
24373: DIFF
24374: DIFF
24375: ST_TO_ADDR
// if tmp and not sci then
24376: LD_VAR 0 4
24380: PUSH
24381: LD_VAR 0 8
24385: NOT
24386: AND
24387: IFFALSE 24456
// begin sort := SortBySkill ( tmp , 4 ) ;
24389: LD_ADDR_VAR 0 9
24393: PUSH
24394: LD_VAR 0 4
24398: PPUSH
24399: LD_INT 4
24401: PPUSH
24402: CALL 89036 0 2
24406: ST_TO_ADDR
// if sort then
24407: LD_VAR 0 9
24411: IFFALSE 24427
// p := sort [ 1 ] ;
24413: LD_ADDR_VAR 0 11
24417: PUSH
24418: LD_VAR 0 9
24422: PUSH
24423: LD_INT 1
24425: ARRAY
24426: ST_TO_ADDR
// if p then
24427: LD_VAR 0 11
24431: IFFALSE 24456
// result := Replace ( result , 4 , p ) ;
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_VAR 0 2
24442: PPUSH
24443: LD_INT 4
24445: PPUSH
24446: LD_VAR 0 11
24450: PPUSH
24451: CALL_OW 1
24455: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24456: LD_ADDR_VAR 0 4
24460: PUSH
24461: LD_VAR 0 4
24465: PUSH
24466: LD_VAR 0 7
24470: DIFF
24471: ST_TO_ADDR
// if tmp and mech < 6 then
24472: LD_VAR 0 4
24476: PUSH
24477: LD_VAR 0 7
24481: PUSH
24482: LD_INT 6
24484: LESS
24485: AND
24486: IFFALSE 24674
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
24488: LD_ADDR_VAR 0 9
24492: PUSH
24493: LD_VAR 0 4
24497: PUSH
24498: LD_VAR 0 8
24502: PUSH
24503: LD_VAR 0 7
24507: UNION
24508: DIFF
24509: PPUSH
24510: LD_INT 3
24512: PPUSH
24513: CALL 89036 0 2
24517: ST_TO_ADDR
// p := [ ] ;
24518: LD_ADDR_VAR 0 11
24522: PUSH
24523: EMPTY
24524: ST_TO_ADDR
// if sort then
24525: LD_VAR 0 9
24529: IFFALSE 24645
// for i = 1 to 6 - mech do
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: DOUBLE
24537: LD_INT 1
24539: DEC
24540: ST_TO_ADDR
24541: LD_INT 6
24543: PUSH
24544: LD_VAR 0 7
24548: MINUS
24549: PUSH
24550: FOR_TO
24551: IFFALSE 24643
// begin if i = sort then
24553: LD_VAR 0 3
24557: PUSH
24558: LD_VAR 0 9
24562: EQUAL
24563: IFFALSE 24567
// break ;
24565: GO 24643
// if GetClass ( i ) = 3 then
24567: LD_VAR 0 3
24571: PPUSH
24572: CALL_OW 257
24576: PUSH
24577: LD_INT 3
24579: EQUAL
24580: IFFALSE 24584
// continue ;
24582: GO 24550
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24584: LD_ADDR_VAR 0 11
24588: PUSH
24589: LD_VAR 0 11
24593: PPUSH
24594: LD_VAR 0 11
24598: PUSH
24599: LD_INT 1
24601: PLUS
24602: PPUSH
24603: LD_VAR 0 9
24607: PUSH
24608: LD_VAR 0 3
24612: ARRAY
24613: PPUSH
24614: CALL_OW 2
24618: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24619: LD_ADDR_VAR 0 4
24623: PUSH
24624: LD_VAR 0 4
24628: PUSH
24629: LD_VAR 0 9
24633: PUSH
24634: LD_VAR 0 3
24638: ARRAY
24639: DIFF
24640: ST_TO_ADDR
// end ;
24641: GO 24550
24643: POP
24644: POP
// if p then
24645: LD_VAR 0 11
24649: IFFALSE 24674
// result := Replace ( result , 3 , p ) ;
24651: LD_ADDR_VAR 0 2
24655: PUSH
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_INT 3
24663: PPUSH
24664: LD_VAR 0 11
24668: PPUSH
24669: CALL_OW 1
24673: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24674: LD_ADDR_VAR 0 4
24678: PUSH
24679: LD_VAR 0 4
24683: PUSH
24684: LD_VAR 0 6
24688: DIFF
24689: ST_TO_ADDR
// if tmp and eng < 6 then
24690: LD_VAR 0 4
24694: PUSH
24695: LD_VAR 0 6
24699: PUSH
24700: LD_INT 6
24702: LESS
24703: AND
24704: IFFALSE 24898
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24706: LD_ADDR_VAR 0 9
24710: PUSH
24711: LD_VAR 0 4
24715: PUSH
24716: LD_VAR 0 8
24720: PUSH
24721: LD_VAR 0 7
24725: UNION
24726: PUSH
24727: LD_VAR 0 6
24731: UNION
24732: DIFF
24733: PPUSH
24734: LD_INT 2
24736: PPUSH
24737: CALL 89036 0 2
24741: ST_TO_ADDR
// p := [ ] ;
24742: LD_ADDR_VAR 0 11
24746: PUSH
24747: EMPTY
24748: ST_TO_ADDR
// if sort then
24749: LD_VAR 0 9
24753: IFFALSE 24869
// for i = 1 to 6 - eng do
24755: LD_ADDR_VAR 0 3
24759: PUSH
24760: DOUBLE
24761: LD_INT 1
24763: DEC
24764: ST_TO_ADDR
24765: LD_INT 6
24767: PUSH
24768: LD_VAR 0 6
24772: MINUS
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24867
// begin if i = sort then
24777: LD_VAR 0 3
24781: PUSH
24782: LD_VAR 0 9
24786: EQUAL
24787: IFFALSE 24791
// break ;
24789: GO 24867
// if GetClass ( i ) = 2 then
24791: LD_VAR 0 3
24795: PPUSH
24796: CALL_OW 257
24800: PUSH
24801: LD_INT 2
24803: EQUAL
24804: IFFALSE 24808
// continue ;
24806: GO 24774
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24808: LD_ADDR_VAR 0 11
24812: PUSH
24813: LD_VAR 0 11
24817: PPUSH
24818: LD_VAR 0 11
24822: PUSH
24823: LD_INT 1
24825: PLUS
24826: PPUSH
24827: LD_VAR 0 9
24831: PUSH
24832: LD_VAR 0 3
24836: ARRAY
24837: PPUSH
24838: CALL_OW 2
24842: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24843: LD_ADDR_VAR 0 4
24847: PUSH
24848: LD_VAR 0 4
24852: PUSH
24853: LD_VAR 0 9
24857: PUSH
24858: LD_VAR 0 3
24862: ARRAY
24863: DIFF
24864: ST_TO_ADDR
// end ;
24865: GO 24774
24867: POP
24868: POP
// if p then
24869: LD_VAR 0 11
24873: IFFALSE 24898
// result := Replace ( result , 2 , p ) ;
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_VAR 0 2
24884: PPUSH
24885: LD_INT 2
24887: PPUSH
24888: LD_VAR 0 11
24892: PPUSH
24893: CALL_OW 1
24897: ST_TO_ADDR
// end ; exit ;
24898: GO 25622
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24900: LD_EXP 77
24904: PUSH
24905: LD_EXP 76
24909: PUSH
24910: LD_VAR 0 1
24914: ARRAY
24915: ARRAY
24916: NOT
24917: PUSH
24918: LD_EXP 50
24922: PUSH
24923: LD_VAR 0 1
24927: ARRAY
24928: PPUSH
24929: LD_INT 30
24931: PUSH
24932: LD_INT 3
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PPUSH
24939: CALL_OW 72
24943: AND
24944: PUSH
24945: LD_EXP 55
24949: PUSH
24950: LD_VAR 0 1
24954: ARRAY
24955: NOT
24956: AND
24957: IFFALSE 25622
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24959: LD_ADDR_EXP 92
24963: PUSH
24964: LD_EXP 92
24968: PPUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: LD_INT 6
24976: PPUSH
24977: CALL_OW 1
24981: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24982: LD_ADDR_VAR 0 2
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: ST_TO_ADDR
// if sci >= 1 then
25005: LD_VAR 0 8
25009: PUSH
25010: LD_INT 1
25012: GREATEREQUAL
25013: IFFALSE 25035
// tmp := tmp diff sci [ 1 ] ;
25015: LD_ADDR_VAR 0 4
25019: PUSH
25020: LD_VAR 0 4
25024: PUSH
25025: LD_VAR 0 8
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: DIFF
25034: ST_TO_ADDR
// if tmp and not sci then
25035: LD_VAR 0 4
25039: PUSH
25040: LD_VAR 0 8
25044: NOT
25045: AND
25046: IFFALSE 25115
// begin sort := SortBySkill ( tmp , 4 ) ;
25048: LD_ADDR_VAR 0 9
25052: PUSH
25053: LD_VAR 0 4
25057: PPUSH
25058: LD_INT 4
25060: PPUSH
25061: CALL 89036 0 2
25065: ST_TO_ADDR
// if sort then
25066: LD_VAR 0 9
25070: IFFALSE 25086
// p := sort [ 1 ] ;
25072: LD_ADDR_VAR 0 11
25076: PUSH
25077: LD_VAR 0 9
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: ST_TO_ADDR
// if p then
25086: LD_VAR 0 11
25090: IFFALSE 25115
// result := Replace ( result , 4 , p ) ;
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_VAR 0 2
25101: PPUSH
25102: LD_INT 4
25104: PPUSH
25105: LD_VAR 0 11
25109: PPUSH
25110: CALL_OW 1
25114: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
25115: LD_ADDR_VAR 0 4
25119: PUSH
25120: LD_VAR 0 4
25124: PUSH
25125: LD_VAR 0 7
25129: DIFF
25130: ST_TO_ADDR
// if tmp and mech < 6 then
25131: LD_VAR 0 4
25135: PUSH
25136: LD_VAR 0 7
25140: PUSH
25141: LD_INT 6
25143: LESS
25144: AND
25145: IFFALSE 25327
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
25147: LD_ADDR_VAR 0 9
25151: PUSH
25152: LD_VAR 0 4
25156: PUSH
25157: LD_VAR 0 7
25161: DIFF
25162: PPUSH
25163: LD_INT 3
25165: PPUSH
25166: CALL 89036 0 2
25170: ST_TO_ADDR
// p := [ ] ;
25171: LD_ADDR_VAR 0 11
25175: PUSH
25176: EMPTY
25177: ST_TO_ADDR
// if sort then
25178: LD_VAR 0 9
25182: IFFALSE 25298
// for i = 1 to 6 - mech do
25184: LD_ADDR_VAR 0 3
25188: PUSH
25189: DOUBLE
25190: LD_INT 1
25192: DEC
25193: ST_TO_ADDR
25194: LD_INT 6
25196: PUSH
25197: LD_VAR 0 7
25201: MINUS
25202: PUSH
25203: FOR_TO
25204: IFFALSE 25296
// begin if i = sort then
25206: LD_VAR 0 3
25210: PUSH
25211: LD_VAR 0 9
25215: EQUAL
25216: IFFALSE 25220
// break ;
25218: GO 25296
// if GetClass ( i ) = 3 then
25220: LD_VAR 0 3
25224: PPUSH
25225: CALL_OW 257
25229: PUSH
25230: LD_INT 3
25232: EQUAL
25233: IFFALSE 25237
// continue ;
25235: GO 25203
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25237: LD_ADDR_VAR 0 11
25241: PUSH
25242: LD_VAR 0 11
25246: PPUSH
25247: LD_VAR 0 11
25251: PUSH
25252: LD_INT 1
25254: PLUS
25255: PPUSH
25256: LD_VAR 0 9
25260: PUSH
25261: LD_VAR 0 3
25265: ARRAY
25266: PPUSH
25267: CALL_OW 2
25271: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25272: LD_ADDR_VAR 0 4
25276: PUSH
25277: LD_VAR 0 4
25281: PUSH
25282: LD_VAR 0 9
25286: PUSH
25287: LD_VAR 0 3
25291: ARRAY
25292: DIFF
25293: ST_TO_ADDR
// end ;
25294: GO 25203
25296: POP
25297: POP
// if p then
25298: LD_VAR 0 11
25302: IFFALSE 25327
// result := Replace ( result , 3 , p ) ;
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: LD_VAR 0 2
25313: PPUSH
25314: LD_INT 3
25316: PPUSH
25317: LD_VAR 0 11
25321: PPUSH
25322: CALL_OW 1
25326: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
25327: LD_ADDR_VAR 0 4
25331: PUSH
25332: LD_VAR 0 4
25336: PUSH
25337: LD_VAR 0 6
25341: DIFF
25342: ST_TO_ADDR
// if tmp and eng < 4 then
25343: LD_VAR 0 4
25347: PUSH
25348: LD_VAR 0 6
25352: PUSH
25353: LD_INT 4
25355: LESS
25356: AND
25357: IFFALSE 25547
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
25359: LD_ADDR_VAR 0 9
25363: PUSH
25364: LD_VAR 0 4
25368: PUSH
25369: LD_VAR 0 7
25373: PUSH
25374: LD_VAR 0 6
25378: UNION
25379: DIFF
25380: PPUSH
25381: LD_INT 2
25383: PPUSH
25384: CALL 89036 0 2
25388: ST_TO_ADDR
// p := [ ] ;
25389: LD_ADDR_VAR 0 11
25393: PUSH
25394: EMPTY
25395: ST_TO_ADDR
// if sort then
25396: LD_VAR 0 9
25400: IFFALSE 25516
// for i = 1 to 4 - eng do
25402: LD_ADDR_VAR 0 3
25406: PUSH
25407: DOUBLE
25408: LD_INT 1
25410: DEC
25411: ST_TO_ADDR
25412: LD_INT 4
25414: PUSH
25415: LD_VAR 0 6
25419: MINUS
25420: PUSH
25421: FOR_TO
25422: IFFALSE 25514
// begin if i = sort then
25424: LD_VAR 0 3
25428: PUSH
25429: LD_VAR 0 9
25433: EQUAL
25434: IFFALSE 25438
// break ;
25436: GO 25514
// if GetClass ( i ) = 2 then
25438: LD_VAR 0 3
25442: PPUSH
25443: CALL_OW 257
25447: PUSH
25448: LD_INT 2
25450: EQUAL
25451: IFFALSE 25455
// continue ;
25453: GO 25421
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25455: LD_ADDR_VAR 0 11
25459: PUSH
25460: LD_VAR 0 11
25464: PPUSH
25465: LD_VAR 0 11
25469: PUSH
25470: LD_INT 1
25472: PLUS
25473: PPUSH
25474: LD_VAR 0 9
25478: PUSH
25479: LD_VAR 0 3
25483: ARRAY
25484: PPUSH
25485: CALL_OW 2
25489: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25490: LD_ADDR_VAR 0 4
25494: PUSH
25495: LD_VAR 0 4
25499: PUSH
25500: LD_VAR 0 9
25504: PUSH
25505: LD_VAR 0 3
25509: ARRAY
25510: DIFF
25511: ST_TO_ADDR
// end ;
25512: GO 25421
25514: POP
25515: POP
// if p then
25516: LD_VAR 0 11
25520: IFFALSE 25545
// result := Replace ( result , 2 , p ) ;
25522: LD_ADDR_VAR 0 2
25526: PUSH
25527: LD_VAR 0 2
25531: PPUSH
25532: LD_INT 2
25534: PPUSH
25535: LD_VAR 0 11
25539: PPUSH
25540: CALL_OW 1
25544: ST_TO_ADDR
// end else
25545: GO 25591
// for i = eng downto 5 do
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: DOUBLE
25553: LD_VAR 0 6
25557: INC
25558: ST_TO_ADDR
25559: LD_INT 5
25561: PUSH
25562: FOR_DOWNTO
25563: IFFALSE 25589
// tmp := tmp union eng [ i ] ;
25565: LD_ADDR_VAR 0 4
25569: PUSH
25570: LD_VAR 0 4
25574: PUSH
25575: LD_VAR 0 6
25579: PUSH
25580: LD_VAR 0 3
25584: ARRAY
25585: UNION
25586: ST_TO_ADDR
25587: GO 25562
25589: POP
25590: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
25591: LD_ADDR_VAR 0 2
25595: PUSH
25596: LD_VAR 0 2
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: LD_VAR 0 4
25608: PUSH
25609: LD_VAR 0 5
25613: DIFF
25614: PPUSH
25615: CALL_OW 1
25619: ST_TO_ADDR
// exit ;
25620: GO 25622
// end ; end ;
25622: LD_VAR 0 2
25626: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
25631: PPUSH
// if not mc_bases then
25632: LD_EXP 50
25636: NOT
25637: IFFALSE 25641
// exit ;
25639: GO 25747
// for i = 1 to mc_bases do
25641: LD_ADDR_VAR 0 2
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_EXP 50
25655: PUSH
25656: FOR_TO
25657: IFFALSE 25738
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25659: LD_ADDR_VAR 0 3
25663: PUSH
25664: LD_EXP 50
25668: PUSH
25669: LD_VAR 0 2
25673: ARRAY
25674: PPUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: LD_INT 24
25690: PUSH
25691: LD_INT 1000
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PPUSH
25706: CALL_OW 72
25710: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25711: LD_ADDR_EXP 51
25715: PUSH
25716: LD_EXP 51
25720: PPUSH
25721: LD_VAR 0 2
25725: PPUSH
25726: LD_VAR 0 3
25730: PPUSH
25731: CALL_OW 1
25735: ST_TO_ADDR
// end ;
25736: GO 25656
25738: POP
25739: POP
// RaiseSailEvent ( 101 ) ;
25740: LD_INT 101
25742: PPUSH
25743: CALL_OW 427
// end ;
25747: LD_VAR 0 1
25751: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// if not mc_bases then
25761: LD_EXP 50
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 26343
// for i = 1 to mc_bases do
25770: LD_ADDR_VAR 0 2
25774: PUSH
25775: DOUBLE
25776: LD_INT 1
25778: DEC
25779: ST_TO_ADDR
25780: LD_EXP 50
25784: PUSH
25785: FOR_TO
25786: IFFALSE 26334
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25788: LD_ADDR_VAR 0 5
25792: PUSH
25793: LD_EXP 50
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: PUSH
25804: LD_EXP 79
25808: PUSH
25809: LD_VAR 0 2
25813: ARRAY
25814: UNION
25815: PPUSH
25816: LD_INT 21
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 3
25831: PUSH
25832: LD_INT 54
25834: PUSH
25835: EMPTY
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 3
25844: PUSH
25845: LD_INT 24
25847: PUSH
25848: LD_INT 800
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 72
25872: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25873: LD_ADDR_VAR 0 6
25877: PUSH
25878: LD_EXP 50
25882: PUSH
25883: LD_VAR 0 2
25887: ARRAY
25888: PPUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 54
25907: PUSH
25908: EMPTY
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: LD_INT 24
25920: PUSH
25921: LD_INT 250
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PPUSH
25941: CALL_OW 72
25945: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25946: LD_ADDR_VAR 0 7
25950: PUSH
25951: LD_VAR 0 5
25955: PUSH
25956: LD_VAR 0 6
25960: DIFF
25961: ST_TO_ADDR
// if not need_heal_1 then
25962: LD_VAR 0 6
25966: NOT
25967: IFFALSE 26000
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25969: LD_ADDR_EXP 53
25973: PUSH
25974: LD_EXP 53
25978: PPUSH
25979: LD_VAR 0 2
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: EMPTY
25992: PPUSH
25993: CALL 54778 0 3
25997: ST_TO_ADDR
25998: GO 26070
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
26000: LD_ADDR_EXP 53
26004: PUSH
26005: LD_EXP 53
26009: PPUSH
26010: LD_VAR 0 2
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: LD_EXP 53
26026: PUSH
26027: LD_VAR 0 2
26031: ARRAY
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 24
26042: PUSH
26043: LD_INT 1000
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PPUSH
26054: CALL_OW 72
26058: PUSH
26059: LD_VAR 0 6
26063: UNION
26064: PPUSH
26065: CALL 54778 0 3
26069: ST_TO_ADDR
// if not need_heal_2 then
26070: LD_VAR 0 7
26074: NOT
26075: IFFALSE 26108
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
26077: LD_ADDR_EXP 53
26081: PUSH
26082: LD_EXP 53
26086: PPUSH
26087: LD_VAR 0 2
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PPUSH
26099: EMPTY
26100: PPUSH
26101: CALL 54778 0 3
26105: ST_TO_ADDR
26106: GO 26140
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
26108: LD_ADDR_EXP 53
26112: PUSH
26113: LD_EXP 53
26117: PPUSH
26118: LD_VAR 0 2
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PPUSH
26130: LD_VAR 0 7
26134: PPUSH
26135: CALL 54778 0 3
26139: ST_TO_ADDR
// if need_heal_2 then
26140: LD_VAR 0 7
26144: IFFALSE 26316
// for j in need_heal_2 do
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_VAR 0 7
26155: PUSH
26156: FOR_IN
26157: IFFALSE 26314
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
26159: LD_ADDR_VAR 0 5
26163: PUSH
26164: LD_EXP 50
26168: PUSH
26169: LD_VAR 0 2
26173: ARRAY
26174: PPUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 30
26180: PUSH
26181: LD_INT 6
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 30
26190: PUSH
26191: LD_INT 7
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 30
26200: PUSH
26201: LD_INT 8
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 30
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 30
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 25
26230: PUSH
26231: LD_INT 4
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: PPUSH
26247: CALL_OW 72
26251: ST_TO_ADDR
// if tmp then
26252: LD_VAR 0 5
26256: IFFALSE 26312
// begin k := NearestUnitToUnit ( tmp , j ) ;
26258: LD_ADDR_VAR 0 4
26262: PUSH
26263: LD_VAR 0 5
26267: PPUSH
26268: LD_VAR 0 3
26272: PPUSH
26273: CALL_OW 74
26277: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
26278: LD_VAR 0 3
26282: PPUSH
26283: LD_VAR 0 4
26287: PPUSH
26288: CALL_OW 296
26292: PUSH
26293: LD_INT 7
26295: GREATER
26296: IFFALSE 26312
// ComMoveUnit ( j , k ) ;
26298: LD_VAR 0 3
26302: PPUSH
26303: LD_VAR 0 4
26307: PPUSH
26308: CALL_OW 112
// end ; end ;
26312: GO 26156
26314: POP
26315: POP
// if not need_heal_1 and not need_heal_2 then
26316: LD_VAR 0 6
26320: NOT
26321: PUSH
26322: LD_VAR 0 7
26326: NOT
26327: AND
26328: IFFALSE 26332
// continue ;
26330: GO 25785
// end ;
26332: GO 25785
26334: POP
26335: POP
// RaiseSailEvent ( 102 ) ;
26336: LD_INT 102
26338: PPUSH
26339: CALL_OW 427
// end ;
26343: LD_VAR 0 1
26347: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
26348: LD_INT 0
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
26354: PPUSH
26355: PPUSH
26356: PPUSH
26357: PPUSH
// if not mc_bases then
26358: LD_EXP 50
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 27207
// for i = 1 to mc_bases do
26367: LD_ADDR_VAR 0 2
26371: PUSH
26372: DOUBLE
26373: LD_INT 1
26375: DEC
26376: ST_TO_ADDR
26377: LD_EXP 50
26381: PUSH
26382: FOR_TO
26383: IFFALSE 27205
// begin if not mc_building_need_repair [ i ] then
26385: LD_EXP 51
26389: PUSH
26390: LD_VAR 0 2
26394: ARRAY
26395: NOT
26396: IFFALSE 26570
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
26398: LD_ADDR_VAR 0 6
26402: PUSH
26403: LD_EXP 69
26407: PUSH
26408: LD_VAR 0 2
26412: ARRAY
26413: PPUSH
26414: LD_INT 3
26416: PUSH
26417: LD_INT 24
26419: PUSH
26420: LD_INT 1000
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 34
26436: PUSH
26437: LD_INT 13
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 34
26446: PUSH
26447: LD_INT 52
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 72
26467: ST_TO_ADDR
// if cranes then
26468: LD_VAR 0 6
26472: IFFALSE 26534
// for j in cranes do
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_VAR 0 6
26483: PUSH
26484: FOR_IN
26485: IFFALSE 26532
// if not IsInArea ( j , mc_parking [ i ] ) then
26487: LD_VAR 0 3
26491: PPUSH
26492: LD_EXP 74
26496: PUSH
26497: LD_VAR 0 2
26501: ARRAY
26502: PPUSH
26503: CALL_OW 308
26507: NOT
26508: IFFALSE 26530
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26510: LD_VAR 0 3
26514: PPUSH
26515: LD_EXP 74
26519: PUSH
26520: LD_VAR 0 2
26524: ARRAY
26525: PPUSH
26526: CALL_OW 113
26530: GO 26484
26532: POP
26533: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
26534: LD_ADDR_EXP 52
26538: PUSH
26539: LD_EXP 52
26543: PPUSH
26544: LD_VAR 0 2
26548: PPUSH
26549: EMPTY
26550: PPUSH
26551: CALL_OW 1
26555: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
26556: LD_VAR 0 2
26560: PPUSH
26561: LD_INT 101
26563: PPUSH
26564: CALL 21460 0 2
// continue ;
26568: GO 26382
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
26570: LD_ADDR_EXP 56
26574: PUSH
26575: LD_EXP 56
26579: PPUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: EMPTY
26586: PPUSH
26587: CALL_OW 1
26591: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26592: LD_VAR 0 2
26596: PPUSH
26597: LD_INT 103
26599: PPUSH
26600: CALL 21460 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_EXP 50
26613: PUSH
26614: LD_VAR 0 2
26618: ARRAY
26619: PUSH
26620: LD_EXP 79
26624: PUSH
26625: LD_VAR 0 2
26629: ARRAY
26630: UNION
26631: PPUSH
26632: LD_INT 2
26634: PUSH
26635: LD_INT 25
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 25
26647: PUSH
26648: LD_INT 16
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: PPUSH
26663: CALL_OW 72
26667: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
26668: LD_ADDR_VAR 0 6
26672: PUSH
26673: LD_EXP 69
26677: PUSH
26678: LD_VAR 0 2
26682: ARRAY
26683: PPUSH
26684: LD_INT 2
26686: PUSH
26687: LD_INT 34
26689: PUSH
26690: LD_INT 13
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 34
26699: PUSH
26700: LD_INT 52
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 72
26716: ST_TO_ADDR
// if cranes then
26717: LD_VAR 0 6
26721: IFFALSE 26857
// begin for j in cranes do
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_VAR 0 6
26732: PUSH
26733: FOR_IN
26734: IFFALSE 26855
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26736: LD_VAR 0 3
26740: PPUSH
26741: CALL_OW 256
26745: PUSH
26746: LD_INT 500
26748: GREATEREQUAL
26749: PUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: CALL_OW 314
26759: NOT
26760: AND
26761: IFFALSE 26795
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26763: LD_VAR 0 3
26767: PPUSH
26768: LD_EXP 51
26772: PUSH
26773: LD_VAR 0 2
26777: ARRAY
26778: PPUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 74
26788: PPUSH
26789: CALL_OW 130
26793: GO 26853
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26795: LD_VAR 0 3
26799: PPUSH
26800: CALL_OW 256
26804: PUSH
26805: LD_INT 500
26807: LESS
26808: PUSH
26809: LD_VAR 0 3
26813: PPUSH
26814: LD_EXP 74
26818: PUSH
26819: LD_VAR 0 2
26823: ARRAY
26824: PPUSH
26825: CALL_OW 308
26829: NOT
26830: AND
26831: IFFALSE 26853
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26833: LD_VAR 0 3
26837: PPUSH
26838: LD_EXP 74
26842: PUSH
26843: LD_VAR 0 2
26847: ARRAY
26848: PPUSH
26849: CALL_OW 113
26853: GO 26733
26855: POP
26856: POP
// end ; if not tmp then
26857: LD_VAR 0 5
26861: NOT
26862: IFFALSE 26866
// continue ;
26864: GO 26382
// for j in tmp do
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: LD_VAR 0 5
26875: PUSH
26876: FOR_IN
26877: IFFALSE 27201
// begin if mc_need_heal [ i ] then
26879: LD_EXP 53
26883: PUSH
26884: LD_VAR 0 2
26888: ARRAY
26889: IFFALSE 26937
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26891: LD_VAR 0 3
26895: PUSH
26896: LD_EXP 53
26900: PUSH
26901: LD_VAR 0 2
26905: ARRAY
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: IN
26911: PUSH
26912: LD_VAR 0 3
26916: PUSH
26917: LD_EXP 53
26921: PUSH
26922: LD_VAR 0 2
26926: ARRAY
26927: PUSH
26928: LD_INT 2
26930: ARRAY
26931: IN
26932: OR
26933: IFFALSE 26937
// continue ;
26935: GO 26876
// if IsInUnit ( j ) then
26937: LD_VAR 0 3
26941: PPUSH
26942: CALL_OW 310
26946: IFFALSE 26957
// ComExitBuilding ( j ) ;
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
26957: LD_VAR 0 3
26961: PUSH
26962: LD_EXP 52
26966: PUSH
26967: LD_VAR 0 2
26971: ARRAY
26972: IN
26973: NOT
26974: IFFALSE 27032
// begin SetTag ( j , 101 ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: LD_INT 101
26983: PPUSH
26984: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26988: LD_ADDR_EXP 52
26992: PUSH
26993: LD_EXP 52
26997: PPUSH
26998: LD_VAR 0 2
27002: PUSH
27003: LD_EXP 52
27007: PUSH
27008: LD_VAR 0 2
27012: ARRAY
27013: PUSH
27014: LD_INT 1
27016: PLUS
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PPUSH
27022: LD_VAR 0 3
27026: PPUSH
27027: CALL 54778 0 3
27031: ST_TO_ADDR
// end ; wait ( 1 ) ;
27032: LD_INT 1
27034: PPUSH
27035: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
27039: LD_ADDR_VAR 0 7
27043: PUSH
27044: LD_EXP 51
27048: PUSH
27049: LD_VAR 0 2
27053: ARRAY
27054: ST_TO_ADDR
// if mc_scan [ i ] then
27055: LD_EXP 73
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: IFFALSE 27134
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
27067: LD_ADDR_VAR 0 7
27071: PUSH
27072: LD_EXP 51
27076: PUSH
27077: LD_VAR 0 2
27081: ARRAY
27082: PPUSH
27083: LD_INT 3
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: LD_INT 30
27091: PUSH
27092: LD_INT 32
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: LD_INT 33
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: LD_INT 31
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PPUSH
27129: CALL_OW 72
27133: ST_TO_ADDR
// if not to_repair_tmp then
27134: LD_VAR 0 7
27138: NOT
27139: IFFALSE 27143
// continue ;
27141: GO 26876
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
27143: LD_ADDR_VAR 0 8
27147: PUSH
27148: LD_VAR 0 7
27152: PPUSH
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 74
27162: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
27163: LD_VAR 0 8
27167: PPUSH
27168: LD_INT 14
27170: PPUSH
27171: CALL 57371 0 2
27175: PUSH
27176: LD_INT 4
27178: ARRAY
27179: PUSH
27180: LD_INT 5
27182: LESS
27183: IFFALSE 27199
// ComRepairBuilding ( j , to_repair ) ;
27185: LD_VAR 0 3
27189: PPUSH
27190: LD_VAR 0 8
27194: PPUSH
27195: CALL_OW 130
// end ;
27199: GO 26876
27201: POP
27202: POP
// end ;
27203: GO 26382
27205: POP
27206: POP
// end ;
27207: LD_VAR 0 1
27211: RET
// export function MC_Heal ; var i , j , tmp ; begin
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
// if not mc_bases then
27218: LD_EXP 50
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27629
// for i = 1 to mc_bases do
27227: LD_ADDR_VAR 0 2
27231: PUSH
27232: DOUBLE
27233: LD_INT 1
27235: DEC
27236: ST_TO_ADDR
27237: LD_EXP 50
27241: PUSH
27242: FOR_TO
27243: IFFALSE 27627
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
27245: LD_EXP 53
27249: PUSH
27250: LD_VAR 0 2
27254: ARRAY
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: NOT
27260: PUSH
27261: LD_EXP 53
27265: PUSH
27266: LD_VAR 0 2
27270: ARRAY
27271: PUSH
27272: LD_INT 2
27274: ARRAY
27275: NOT
27276: AND
27277: IFFALSE 27315
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
27279: LD_ADDR_EXP 54
27283: PUSH
27284: LD_EXP 54
27288: PPUSH
27289: LD_VAR 0 2
27293: PPUSH
27294: EMPTY
27295: PPUSH
27296: CALL_OW 1
27300: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_INT 102
27308: PPUSH
27309: CALL 21460 0 2
// continue ;
27313: GO 27242
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
27315: LD_ADDR_VAR 0 4
27319: PUSH
27320: LD_EXP 50
27324: PUSH
27325: LD_VAR 0 2
27329: ARRAY
27330: PPUSH
27331: LD_INT 25
27333: PUSH
27334: LD_INT 4
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PPUSH
27341: CALL_OW 72
27345: ST_TO_ADDR
// if not tmp then
27346: LD_VAR 0 4
27350: NOT
27351: IFFALSE 27355
// continue ;
27353: GO 27242
// if mc_taming [ i ] then
27355: LD_EXP 81
27359: PUSH
27360: LD_VAR 0 2
27364: ARRAY
27365: IFFALSE 27389
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
27367: LD_ADDR_EXP 81
27371: PUSH
27372: LD_EXP 81
27376: PPUSH
27377: LD_VAR 0 2
27381: PPUSH
27382: EMPTY
27383: PPUSH
27384: CALL_OW 1
27388: ST_TO_ADDR
// for j in tmp do
27389: LD_ADDR_VAR 0 3
27393: PUSH
27394: LD_VAR 0 4
27398: PUSH
27399: FOR_IN
27400: IFFALSE 27623
// begin if IsInUnit ( j ) then
27402: LD_VAR 0 3
27406: PPUSH
27407: CALL_OW 310
27411: IFFALSE 27422
// ComExitBuilding ( j ) ;
27413: LD_VAR 0 3
27417: PPUSH
27418: CALL_OW 122
// if not j in mc_healers [ i ] then
27422: LD_VAR 0 3
27426: PUSH
27427: LD_EXP 54
27431: PUSH
27432: LD_VAR 0 2
27436: ARRAY
27437: IN
27438: NOT
27439: IFFALSE 27485
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
27441: LD_ADDR_EXP 54
27445: PUSH
27446: LD_EXP 54
27450: PPUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_EXP 54
27460: PUSH
27461: LD_VAR 0 2
27465: ARRAY
27466: PUSH
27467: LD_INT 1
27469: PLUS
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: LD_VAR 0 3
27479: PPUSH
27480: CALL 54778 0 3
27484: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
27485: LD_VAR 0 3
27489: PPUSH
27490: CALL_OW 110
27494: PUSH
27495: LD_INT 102
27497: NONEQUAL
27498: IFFALSE 27512
// SetTag ( j , 102 ) ;
27500: LD_VAR 0 3
27504: PPUSH
27505: LD_INT 102
27507: PPUSH
27508: CALL_OW 109
// Wait ( 3 ) ;
27512: LD_INT 3
27514: PPUSH
27515: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
27519: LD_EXP 53
27523: PUSH
27524: LD_VAR 0 2
27528: ARRAY
27529: PUSH
27530: LD_INT 1
27532: ARRAY
27533: IFFALSE 27565
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
27535: LD_VAR 0 3
27539: PPUSH
27540: LD_EXP 53
27544: PUSH
27545: LD_VAR 0 2
27549: ARRAY
27550: PUSH
27551: LD_INT 1
27553: ARRAY
27554: PUSH
27555: LD_INT 1
27557: ARRAY
27558: PPUSH
27559: CALL_OW 128
27563: GO 27621
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
27565: LD_VAR 0 3
27569: PPUSH
27570: CALL_OW 314
27574: NOT
27575: PUSH
27576: LD_EXP 53
27580: PUSH
27581: LD_VAR 0 2
27585: ARRAY
27586: PUSH
27587: LD_INT 2
27589: ARRAY
27590: AND
27591: IFFALSE 27621
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
27593: LD_VAR 0 3
27597: PPUSH
27598: LD_EXP 53
27602: PUSH
27603: LD_VAR 0 2
27607: ARRAY
27608: PUSH
27609: LD_INT 2
27611: ARRAY
27612: PUSH
27613: LD_INT 1
27615: ARRAY
27616: PPUSH
27617: CALL_OW 128
// end ;
27621: GO 27399
27623: POP
27624: POP
// end ;
27625: GO 27242
27627: POP
27628: POP
// end ;
27629: LD_VAR 0 1
27633: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
// if not mc_bases then
27641: LD_EXP 50
27645: NOT
27646: IFFALSE 27650
// exit ;
27648: GO 28793
// for i = 1 to mc_bases do
27650: LD_ADDR_VAR 0 2
27654: PUSH
27655: DOUBLE
27656: LD_INT 1
27658: DEC
27659: ST_TO_ADDR
27660: LD_EXP 50
27664: PUSH
27665: FOR_TO
27666: IFFALSE 28791
// begin if mc_scan [ i ] then
27668: LD_EXP 73
27672: PUSH
27673: LD_VAR 0 2
27677: ARRAY
27678: IFFALSE 27682
// continue ;
27680: GO 27665
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
27682: LD_EXP 55
27686: PUSH
27687: LD_VAR 0 2
27691: ARRAY
27692: NOT
27693: PUSH
27694: LD_EXP 57
27698: PUSH
27699: LD_VAR 0 2
27703: ARRAY
27704: NOT
27705: AND
27706: PUSH
27707: LD_EXP 56
27711: PUSH
27712: LD_VAR 0 2
27716: ARRAY
27717: AND
27718: IFFALSE 27756
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
27720: LD_ADDR_EXP 56
27724: PUSH
27725: LD_EXP 56
27729: PPUSH
27730: LD_VAR 0 2
27734: PPUSH
27735: EMPTY
27736: PPUSH
27737: CALL_OW 1
27741: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
27742: LD_VAR 0 2
27746: PPUSH
27747: LD_INT 103
27749: PPUSH
27750: CALL 21460 0 2
// continue ;
27754: GO 27665
// end ; if mc_construct_list [ i ] then
27756: LD_EXP 57
27760: PUSH
27761: LD_VAR 0 2
27765: ARRAY
27766: IFFALSE 27986
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27768: LD_ADDR_VAR 0 4
27772: PUSH
27773: LD_EXP 50
27777: PUSH
27778: LD_VAR 0 2
27782: ARRAY
27783: PPUSH
27784: LD_INT 25
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 72
27798: PUSH
27799: LD_EXP 52
27803: PUSH
27804: LD_VAR 0 2
27808: ARRAY
27809: DIFF
27810: ST_TO_ADDR
// if not tmp then
27811: LD_VAR 0 4
27815: NOT
27816: IFFALSE 27820
// continue ;
27818: GO 27665
// for j in tmp do
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_VAR 0 4
27829: PUSH
27830: FOR_IN
27831: IFFALSE 27982
// begin if not mc_builders [ i ] then
27833: LD_EXP 56
27837: PUSH
27838: LD_VAR 0 2
27842: ARRAY
27843: NOT
27844: IFFALSE 27902
// begin SetTag ( j , 103 ) ;
27846: LD_VAR 0 3
27850: PPUSH
27851: LD_INT 103
27853: PPUSH
27854: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27858: LD_ADDR_EXP 56
27862: PUSH
27863: LD_EXP 56
27867: PPUSH
27868: LD_VAR 0 2
27872: PUSH
27873: LD_EXP 56
27877: PUSH
27878: LD_VAR 0 2
27882: ARRAY
27883: PUSH
27884: LD_INT 1
27886: PLUS
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PPUSH
27892: LD_VAR 0 3
27896: PPUSH
27897: CALL 54778 0 3
27901: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27902: LD_VAR 0 3
27906: PPUSH
27907: CALL_OW 310
27911: IFFALSE 27922
// ComExitBuilding ( j ) ;
27913: LD_VAR 0 3
27917: PPUSH
27918: CALL_OW 122
// wait ( 3 ) ;
27922: LD_INT 3
27924: PPUSH
27925: CALL_OW 67
// if not mc_construct_list [ i ] then
27929: LD_EXP 57
27933: PUSH
27934: LD_VAR 0 2
27938: ARRAY
27939: NOT
27940: IFFALSE 27944
// break ;
27942: GO 27982
// if not HasTask ( j ) then
27944: LD_VAR 0 3
27948: PPUSH
27949: CALL_OW 314
27953: NOT
27954: IFFALSE 27980
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27956: LD_VAR 0 3
27960: PPUSH
27961: LD_EXP 57
27965: PUSH
27966: LD_VAR 0 2
27970: ARRAY
27971: PUSH
27972: LD_INT 1
27974: ARRAY
27975: PPUSH
27976: CALL 57629 0 2
// end ;
27980: GO 27830
27982: POP
27983: POP
// end else
27984: GO 28789
// if mc_build_list [ i ] then
27986: LD_EXP 55
27990: PUSH
27991: LD_VAR 0 2
27995: ARRAY
27996: IFFALSE 28789
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27998: LD_ADDR_VAR 0 5
28002: PUSH
28003: LD_EXP 50
28007: PUSH
28008: LD_VAR 0 2
28012: ARRAY
28013: PPUSH
28014: LD_INT 2
28016: PUSH
28017: LD_INT 30
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 30
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: PPUSH
28042: CALL_OW 72
28046: ST_TO_ADDR
// if depot then
28047: LD_VAR 0 5
28051: IFFALSE 28069
// depot := depot [ 1 ] else
28053: LD_ADDR_VAR 0 5
28057: PUSH
28058: LD_VAR 0 5
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: ST_TO_ADDR
28067: GO 28077
// depot := 0 ;
28069: LD_ADDR_VAR 0 5
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
28077: LD_EXP 55
28081: PUSH
28082: LD_VAR 0 2
28086: ARRAY
28087: PUSH
28088: LD_INT 1
28090: ARRAY
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: CALL 57459 0 1
28100: PUSH
28101: LD_EXP 50
28105: PUSH
28106: LD_VAR 0 2
28110: ARRAY
28111: PPUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 30
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: PPUSH
28140: CALL_OW 72
28144: NOT
28145: AND
28146: IFFALSE 28251
// begin for j = 1 to mc_build_list [ i ] do
28148: LD_ADDR_VAR 0 3
28152: PUSH
28153: DOUBLE
28154: LD_INT 1
28156: DEC
28157: ST_TO_ADDR
28158: LD_EXP 55
28162: PUSH
28163: LD_VAR 0 2
28167: ARRAY
28168: PUSH
28169: FOR_TO
28170: IFFALSE 28249
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
28172: LD_EXP 55
28176: PUSH
28177: LD_VAR 0 2
28181: ARRAY
28182: PUSH
28183: LD_VAR 0 3
28187: ARRAY
28188: PUSH
28189: LD_INT 1
28191: ARRAY
28192: PUSH
28193: LD_INT 2
28195: EQUAL
28196: IFFALSE 28247
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
28198: LD_ADDR_EXP 55
28202: PUSH
28203: LD_EXP 55
28207: PPUSH
28208: LD_VAR 0 2
28212: PPUSH
28213: LD_EXP 55
28217: PUSH
28218: LD_VAR 0 2
28222: ARRAY
28223: PPUSH
28224: LD_VAR 0 3
28228: PPUSH
28229: LD_INT 1
28231: PPUSH
28232: LD_INT 0
28234: PPUSH
28235: CALL 54196 0 4
28239: PPUSH
28240: CALL_OW 1
28244: ST_TO_ADDR
// break ;
28245: GO 28249
// end ;
28247: GO 28169
28249: POP
28250: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
28251: LD_EXP 55
28255: PUSH
28256: LD_VAR 0 2
28260: ARRAY
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PUSH
28266: LD_INT 1
28268: ARRAY
28269: PUSH
28270: LD_INT 0
28272: EQUAL
28273: PUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_VAR 0 5
28283: PPUSH
28284: LD_EXP 55
28288: PUSH
28289: LD_VAR 0 2
28293: ARRAY
28294: PUSH
28295: LD_INT 1
28297: ARRAY
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_EXP 55
28307: PUSH
28308: LD_VAR 0 2
28312: ARRAY
28313: PUSH
28314: LD_INT 1
28316: ARRAY
28317: PUSH
28318: LD_INT 2
28320: ARRAY
28321: PPUSH
28322: LD_EXP 55
28326: PUSH
28327: LD_VAR 0 2
28331: ARRAY
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PUSH
28337: LD_INT 3
28339: ARRAY
28340: PPUSH
28341: LD_EXP 55
28345: PUSH
28346: LD_VAR 0 2
28350: ARRAY
28351: PUSH
28352: LD_INT 1
28354: ARRAY
28355: PUSH
28356: LD_INT 4
28358: ARRAY
28359: PPUSH
28360: CALL 62193 0 5
28364: AND
28365: OR
28366: IFFALSE 28647
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
28368: LD_ADDR_VAR 0 4
28372: PUSH
28373: LD_EXP 50
28377: PUSH
28378: LD_VAR 0 2
28382: ARRAY
28383: PPUSH
28384: LD_INT 25
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 72
28398: PUSH
28399: LD_EXP 52
28403: PUSH
28404: LD_VAR 0 2
28408: ARRAY
28409: DIFF
28410: ST_TO_ADDR
// if not tmp then
28411: LD_VAR 0 4
28415: NOT
28416: IFFALSE 28420
// continue ;
28418: GO 27665
// for j in tmp do
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_VAR 0 4
28429: PUSH
28430: FOR_IN
28431: IFFALSE 28643
// begin if not mc_builders [ i ] then
28433: LD_EXP 56
28437: PUSH
28438: LD_VAR 0 2
28442: ARRAY
28443: NOT
28444: IFFALSE 28502
// begin SetTag ( j , 103 ) ;
28446: LD_VAR 0 3
28450: PPUSH
28451: LD_INT 103
28453: PPUSH
28454: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
28458: LD_ADDR_EXP 56
28462: PUSH
28463: LD_EXP 56
28467: PPUSH
28468: LD_VAR 0 2
28472: PUSH
28473: LD_EXP 56
28477: PUSH
28478: LD_VAR 0 2
28482: ARRAY
28483: PUSH
28484: LD_INT 1
28486: PLUS
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PPUSH
28492: LD_VAR 0 3
28496: PPUSH
28497: CALL 54778 0 3
28501: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
28502: LD_VAR 0 3
28506: PPUSH
28507: CALL_OW 310
28511: IFFALSE 28522
// ComExitBuilding ( j ) ;
28513: LD_VAR 0 3
28517: PPUSH
28518: CALL_OW 122
// wait ( 3 ) ;
28522: LD_INT 3
28524: PPUSH
28525: CALL_OW 67
// if not mc_build_list [ i ] then
28529: LD_EXP 55
28533: PUSH
28534: LD_VAR 0 2
28538: ARRAY
28539: NOT
28540: IFFALSE 28544
// break ;
28542: GO 28643
// if not HasTask ( j ) then
28544: LD_VAR 0 3
28548: PPUSH
28549: CALL_OW 314
28553: NOT
28554: IFFALSE 28641
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
28556: LD_VAR 0 3
28560: PPUSH
28561: LD_EXP 55
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: PUSH
28572: LD_INT 1
28574: ARRAY
28575: PUSH
28576: LD_INT 1
28578: ARRAY
28579: PPUSH
28580: LD_EXP 55
28584: PUSH
28585: LD_VAR 0 2
28589: ARRAY
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PUSH
28595: LD_INT 2
28597: ARRAY
28598: PPUSH
28599: LD_EXP 55
28603: PUSH
28604: LD_VAR 0 2
28608: ARRAY
28609: PUSH
28610: LD_INT 1
28612: ARRAY
28613: PUSH
28614: LD_INT 3
28616: ARRAY
28617: PPUSH
28618: LD_EXP 55
28622: PUSH
28623: LD_VAR 0 2
28627: ARRAY
28628: PUSH
28629: LD_INT 1
28631: ARRAY
28632: PUSH
28633: LD_INT 4
28635: ARRAY
28636: PPUSH
28637: CALL_OW 145
// end ;
28641: GO 28430
28643: POP
28644: POP
// end else
28645: GO 28789
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
28647: LD_EXP 50
28651: PUSH
28652: LD_VAR 0 2
28656: ARRAY
28657: PPUSH
28658: LD_EXP 55
28662: PUSH
28663: LD_VAR 0 2
28667: ARRAY
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: PUSH
28673: LD_INT 1
28675: ARRAY
28676: PPUSH
28677: LD_EXP 55
28681: PUSH
28682: LD_VAR 0 2
28686: ARRAY
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PUSH
28692: LD_INT 2
28694: ARRAY
28695: PPUSH
28696: LD_EXP 55
28700: PUSH
28701: LD_VAR 0 2
28705: ARRAY
28706: PUSH
28707: LD_INT 1
28709: ARRAY
28710: PUSH
28711: LD_INT 3
28713: ARRAY
28714: PPUSH
28715: LD_EXP 55
28719: PUSH
28720: LD_VAR 0 2
28724: ARRAY
28725: PUSH
28726: LD_INT 1
28728: ARRAY
28729: PUSH
28730: LD_INT 4
28732: ARRAY
28733: PPUSH
28734: CALL 61529 0 5
28738: NOT
28739: IFFALSE 28789
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
28741: LD_ADDR_EXP 55
28745: PUSH
28746: LD_EXP 55
28750: PPUSH
28751: LD_VAR 0 2
28755: PPUSH
28756: LD_EXP 55
28760: PUSH
28761: LD_VAR 0 2
28765: ARRAY
28766: PPUSH
28767: LD_INT 1
28769: PPUSH
28770: LD_INT 1
28772: NEG
28773: PPUSH
28774: LD_INT 0
28776: PPUSH
28777: CALL 54196 0 4
28781: PPUSH
28782: CALL_OW 1
28786: ST_TO_ADDR
// continue ;
28787: GO 27665
// end ; end ; end ;
28789: GO 27665
28791: POP
28792: POP
// end ;
28793: LD_VAR 0 1
28797: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
28798: LD_INT 0
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
// if not mc_bases then
28806: LD_EXP 50
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 29242
// for i = 1 to mc_bases do
28815: LD_ADDR_VAR 0 2
28819: PUSH
28820: DOUBLE
28821: LD_INT 1
28823: DEC
28824: ST_TO_ADDR
28825: LD_EXP 50
28829: PUSH
28830: FOR_TO
28831: IFFALSE 29240
// begin tmp := mc_build_upgrade [ i ] ;
28833: LD_ADDR_VAR 0 4
28837: PUSH
28838: LD_EXP 82
28842: PUSH
28843: LD_VAR 0 2
28847: ARRAY
28848: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28849: LD_ADDR_VAR 0 6
28853: PUSH
28854: LD_EXP 83
28858: PUSH
28859: LD_VAR 0 2
28863: ARRAY
28864: PPUSH
28865: LD_INT 2
28867: PUSH
28868: LD_INT 30
28870: PUSH
28871: LD_INT 6
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 30
28880: PUSH
28881: LD_INT 7
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: LIST
28892: PPUSH
28893: CALL_OW 72
28897: ST_TO_ADDR
// if not tmp and not lab then
28898: LD_VAR 0 4
28902: NOT
28903: PUSH
28904: LD_VAR 0 6
28908: NOT
28909: AND
28910: IFFALSE 28914
// continue ;
28912: GO 28830
// if tmp then
28914: LD_VAR 0 4
28918: IFFALSE 29038
// for j in tmp do
28920: LD_ADDR_VAR 0 3
28924: PUSH
28925: LD_VAR 0 4
28929: PUSH
28930: FOR_IN
28931: IFFALSE 29036
// begin if UpgradeCost ( j ) then
28933: LD_VAR 0 3
28937: PPUSH
28938: CALL 61189 0 1
28942: IFFALSE 29034
// begin ComUpgrade ( j ) ;
28944: LD_VAR 0 3
28948: PPUSH
28949: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28953: LD_ADDR_EXP 82
28957: PUSH
28958: LD_EXP 82
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_EXP 82
28972: PUSH
28973: LD_VAR 0 2
28977: ARRAY
28978: PUSH
28979: LD_VAR 0 3
28983: DIFF
28984: PPUSH
28985: CALL_OW 1
28989: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28990: LD_ADDR_EXP 57
28994: PUSH
28995: LD_EXP 57
28999: PPUSH
29000: LD_VAR 0 2
29004: PUSH
29005: LD_EXP 57
29009: PUSH
29010: LD_VAR 0 2
29014: ARRAY
29015: PUSH
29016: LD_INT 1
29018: PLUS
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: LD_VAR 0 3
29028: PPUSH
29029: CALL 54778 0 3
29033: ST_TO_ADDR
// end ; end ;
29034: GO 28930
29036: POP
29037: POP
// if not lab or not mc_lab_upgrade [ i ] then
29038: LD_VAR 0 6
29042: NOT
29043: PUSH
29044: LD_EXP 84
29048: PUSH
29049: LD_VAR 0 2
29053: ARRAY
29054: NOT
29055: OR
29056: IFFALSE 29060
// continue ;
29058: GO 28830
// for j in lab do
29060: LD_ADDR_VAR 0 3
29064: PUSH
29065: LD_VAR 0 6
29069: PUSH
29070: FOR_IN
29071: IFFALSE 29236
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
29073: LD_VAR 0 3
29077: PPUSH
29078: CALL_OW 266
29082: PUSH
29083: LD_INT 6
29085: PUSH
29086: LD_INT 7
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: IN
29093: PUSH
29094: LD_VAR 0 3
29098: PPUSH
29099: CALL_OW 461
29103: PUSH
29104: LD_INT 1
29106: NONEQUAL
29107: AND
29108: IFFALSE 29234
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
29110: LD_VAR 0 3
29114: PPUSH
29115: LD_EXP 84
29119: PUSH
29120: LD_VAR 0 2
29124: ARRAY
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: CALL 61394 0 2
29134: IFFALSE 29234
// begin ComCancel ( j ) ;
29136: LD_VAR 0 3
29140: PPUSH
29141: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
29145: LD_VAR 0 3
29149: PPUSH
29150: LD_EXP 84
29154: PUSH
29155: LD_VAR 0 2
29159: ARRAY
29160: PUSH
29161: LD_INT 1
29163: ARRAY
29164: PPUSH
29165: CALL_OW 207
// if not j in mc_construct_list [ i ] then
29169: LD_VAR 0 3
29173: PUSH
29174: LD_EXP 57
29178: PUSH
29179: LD_VAR 0 2
29183: ARRAY
29184: IN
29185: NOT
29186: IFFALSE 29232
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
29188: LD_ADDR_EXP 57
29192: PUSH
29193: LD_EXP 57
29197: PPUSH
29198: LD_VAR 0 2
29202: PUSH
29203: LD_EXP 57
29207: PUSH
29208: LD_VAR 0 2
29212: ARRAY
29213: PUSH
29214: LD_INT 1
29216: PLUS
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: LD_VAR 0 3
29226: PPUSH
29227: CALL 54778 0 3
29231: ST_TO_ADDR
// break ;
29232: GO 29236
// end ; end ; end ;
29234: GO 29070
29236: POP
29237: POP
// end ;
29238: GO 28830
29240: POP
29241: POP
// end ;
29242: LD_VAR 0 1
29246: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
29247: LD_INT 0
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
// if not mc_bases then
29258: LD_EXP 50
29262: NOT
29263: IFFALSE 29267
// exit ;
29265: GO 29672
// for i = 1 to mc_bases do
29267: LD_ADDR_VAR 0 2
29271: PUSH
29272: DOUBLE
29273: LD_INT 1
29275: DEC
29276: ST_TO_ADDR
29277: LD_EXP 50
29281: PUSH
29282: FOR_TO
29283: IFFALSE 29670
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
29285: LD_EXP 58
29289: PUSH
29290: LD_VAR 0 2
29294: ARRAY
29295: NOT
29296: PUSH
29297: LD_EXP 50
29301: PUSH
29302: LD_VAR 0 2
29306: ARRAY
29307: PPUSH
29308: LD_INT 30
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 72
29322: NOT
29323: OR
29324: IFFALSE 29328
// continue ;
29326: GO 29282
// busy := false ;
29328: LD_ADDR_VAR 0 8
29332: PUSH
29333: LD_INT 0
29335: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
29336: LD_ADDR_VAR 0 4
29340: PUSH
29341: LD_EXP 50
29345: PUSH
29346: LD_VAR 0 2
29350: ARRAY
29351: PPUSH
29352: LD_INT 30
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PPUSH
29362: CALL_OW 72
29366: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
29367: LD_ADDR_VAR 0 6
29371: PUSH
29372: LD_EXP 58
29376: PUSH
29377: LD_VAR 0 2
29381: ARRAY
29382: PPUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 30
29388: PUSH
29389: LD_INT 32
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 30
29398: PUSH
29399: LD_INT 33
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 72
29415: ST_TO_ADDR
// if not t then
29416: LD_VAR 0 6
29420: NOT
29421: IFFALSE 29425
// continue ;
29423: GO 29282
// for j in tmp do
29425: LD_ADDR_VAR 0 3
29429: PUSH
29430: LD_VAR 0 4
29434: PUSH
29435: FOR_IN
29436: IFFALSE 29466
// if not BuildingStatus ( j ) = bs_idle then
29438: LD_VAR 0 3
29442: PPUSH
29443: CALL_OW 461
29447: PUSH
29448: LD_INT 2
29450: EQUAL
29451: NOT
29452: IFFALSE 29464
// begin busy := true ;
29454: LD_ADDR_VAR 0 8
29458: PUSH
29459: LD_INT 1
29461: ST_TO_ADDR
// break ;
29462: GO 29466
// end ;
29464: GO 29435
29466: POP
29467: POP
// if busy then
29468: LD_VAR 0 8
29472: IFFALSE 29476
// continue ;
29474: GO 29282
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
29476: LD_ADDR_VAR 0 7
29480: PUSH
29481: LD_VAR 0 6
29485: PPUSH
29486: LD_INT 35
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PPUSH
29496: CALL_OW 72
29500: ST_TO_ADDR
// if tw then
29501: LD_VAR 0 7
29505: IFFALSE 29582
// begin tw := tw [ 1 ] ;
29507: LD_ADDR_VAR 0 7
29511: PUSH
29512: LD_VAR 0 7
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
29521: LD_ADDR_VAR 0 9
29525: PUSH
29526: LD_VAR 0 7
29530: PPUSH
29531: LD_EXP 75
29535: PUSH
29536: LD_VAR 0 2
29540: ARRAY
29541: PPUSH
29542: CALL 59748 0 2
29546: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
29547: LD_EXP 89
29551: PUSH
29552: LD_VAR 0 2
29556: ARRAY
29557: IFFALSE 29580
// if not weapon in mc_allowed_tower_weapons [ i ] then
29559: LD_VAR 0 9
29563: PUSH
29564: LD_EXP 89
29568: PUSH
29569: LD_VAR 0 2
29573: ARRAY
29574: IN
29575: NOT
29576: IFFALSE 29580
// continue ;
29578: GO 29282
// end else
29580: GO 29645
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
29582: LD_ADDR_VAR 0 5
29586: PUSH
29587: LD_EXP 58
29591: PUSH
29592: LD_VAR 0 2
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 4
29602: PPUSH
29603: CALL 89959 0 2
29607: ST_TO_ADDR
// if not tmp2 then
29608: LD_VAR 0 5
29612: NOT
29613: IFFALSE 29617
// continue ;
29615: GO 29282
// tw := tmp2 [ 1 ] ;
29617: LD_ADDR_VAR 0 7
29621: PUSH
29622: LD_VAR 0 5
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
29631: LD_ADDR_VAR 0 9
29635: PUSH
29636: LD_VAR 0 5
29640: PUSH
29641: LD_INT 2
29643: ARRAY
29644: ST_TO_ADDR
// end ; if not weapon then
29645: LD_VAR 0 9
29649: NOT
29650: IFFALSE 29654
// continue ;
29652: GO 29282
// ComPlaceWeapon ( tw , weapon ) ;
29654: LD_VAR 0 7
29658: PPUSH
29659: LD_VAR 0 9
29663: PPUSH
29664: CALL_OW 148
// end ;
29668: GO 29282
29670: POP
29671: POP
// end ;
29672: LD_VAR 0 1
29676: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
29677: LD_INT 0
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
// if not mc_bases then
29685: LD_EXP 50
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 30470
// for i = 1 to mc_bases do
29694: LD_ADDR_VAR 0 2
29698: PUSH
29699: DOUBLE
29700: LD_INT 1
29702: DEC
29703: ST_TO_ADDR
29704: LD_EXP 50
29708: PUSH
29709: FOR_TO
29710: IFFALSE 30468
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
29712: LD_EXP 63
29716: PUSH
29717: LD_VAR 0 2
29721: ARRAY
29722: NOT
29723: PUSH
29724: LD_EXP 63
29728: PUSH
29729: LD_VAR 0 2
29733: ARRAY
29734: PUSH
29735: LD_EXP 64
29739: PUSH
29740: LD_VAR 0 2
29744: ARRAY
29745: EQUAL
29746: OR
29747: PUSH
29748: LD_EXP 73
29752: PUSH
29753: LD_VAR 0 2
29757: ARRAY
29758: OR
29759: IFFALSE 29763
// continue ;
29761: GO 29709
// if mc_miners [ i ] then
29763: LD_EXP 64
29767: PUSH
29768: LD_VAR 0 2
29772: ARRAY
29773: IFFALSE 30155
// begin for j = mc_miners [ i ] downto 1 do
29775: LD_ADDR_VAR 0 3
29779: PUSH
29780: DOUBLE
29781: LD_EXP 64
29785: PUSH
29786: LD_VAR 0 2
29790: ARRAY
29791: INC
29792: ST_TO_ADDR
29793: LD_INT 1
29795: PUSH
29796: FOR_DOWNTO
29797: IFFALSE 30153
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
29799: LD_EXP 64
29803: PUSH
29804: LD_VAR 0 2
29808: ARRAY
29809: PUSH
29810: LD_VAR 0 3
29814: ARRAY
29815: PPUSH
29816: CALL_OW 301
29820: PUSH
29821: LD_EXP 64
29825: PUSH
29826: LD_VAR 0 2
29830: ARRAY
29831: PUSH
29832: LD_VAR 0 3
29836: ARRAY
29837: PPUSH
29838: CALL_OW 257
29842: PUSH
29843: LD_INT 1
29845: NONEQUAL
29846: OR
29847: IFFALSE 29910
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29849: LD_ADDR_VAR 0 5
29853: PUSH
29854: LD_EXP 64
29858: PUSH
29859: LD_VAR 0 2
29863: ARRAY
29864: PUSH
29865: LD_EXP 64
29869: PUSH
29870: LD_VAR 0 2
29874: ARRAY
29875: PUSH
29876: LD_VAR 0 3
29880: ARRAY
29881: DIFF
29882: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29883: LD_ADDR_EXP 64
29887: PUSH
29888: LD_EXP 64
29892: PPUSH
29893: LD_VAR 0 2
29897: PPUSH
29898: LD_VAR 0 5
29902: PPUSH
29903: CALL_OW 1
29907: ST_TO_ADDR
// continue ;
29908: GO 29796
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
29910: LD_EXP 64
29914: PUSH
29915: LD_VAR 0 2
29919: ARRAY
29920: PUSH
29921: LD_VAR 0 3
29925: ARRAY
29926: PPUSH
29927: CALL_OW 257
29931: PUSH
29932: LD_INT 1
29934: EQUAL
29935: PUSH
29936: LD_EXP 64
29940: PUSH
29941: LD_VAR 0 2
29945: ARRAY
29946: PUSH
29947: LD_VAR 0 3
29951: ARRAY
29952: PPUSH
29953: CALL_OW 459
29957: NOT
29958: AND
29959: PUSH
29960: LD_EXP 64
29964: PUSH
29965: LD_VAR 0 2
29969: ARRAY
29970: PUSH
29971: LD_VAR 0 3
29975: ARRAY
29976: PPUSH
29977: CALL_OW 314
29981: NOT
29982: AND
29983: IFFALSE 30151
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29985: LD_EXP 64
29989: PUSH
29990: LD_VAR 0 2
29994: ARRAY
29995: PUSH
29996: LD_VAR 0 3
30000: ARRAY
30001: PPUSH
30002: CALL_OW 310
30006: IFFALSE 30029
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
30008: LD_EXP 64
30012: PUSH
30013: LD_VAR 0 2
30017: ARRAY
30018: PUSH
30019: LD_VAR 0 3
30023: ARRAY
30024: PPUSH
30025: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
30029: LD_EXP 64
30033: PUSH
30034: LD_VAR 0 2
30038: ARRAY
30039: PUSH
30040: LD_VAR 0 3
30044: ARRAY
30045: PPUSH
30046: CALL_OW 314
30050: NOT
30051: IFFALSE 30151
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
30053: LD_EXP 64
30057: PUSH
30058: LD_VAR 0 2
30062: ARRAY
30063: PUSH
30064: LD_VAR 0 3
30068: ARRAY
30069: PPUSH
30070: LD_EXP 63
30074: PUSH
30075: LD_VAR 0 2
30079: ARRAY
30080: PUSH
30081: LD_VAR 0 3
30085: PUSH
30086: LD_EXP 63
30090: PUSH
30091: LD_VAR 0 2
30095: ARRAY
30096: MOD
30097: PUSH
30098: LD_INT 1
30100: PLUS
30101: ARRAY
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: PPUSH
30107: LD_EXP 63
30111: PUSH
30112: LD_VAR 0 2
30116: ARRAY
30117: PUSH
30118: LD_VAR 0 3
30122: PUSH
30123: LD_EXP 63
30127: PUSH
30128: LD_VAR 0 2
30132: ARRAY
30133: MOD
30134: PUSH
30135: LD_INT 1
30137: PLUS
30138: ARRAY
30139: PUSH
30140: LD_INT 2
30142: ARRAY
30143: PPUSH
30144: LD_INT 0
30146: PPUSH
30147: CALL_OW 193
// end ; end ;
30151: GO 29796
30153: POP
30154: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
30155: LD_ADDR_VAR 0 5
30159: PUSH
30160: LD_EXP 50
30164: PUSH
30165: LD_VAR 0 2
30169: ARRAY
30170: PPUSH
30171: LD_INT 2
30173: PUSH
30174: LD_INT 30
30176: PUSH
30177: LD_INT 4
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 30
30186: PUSH
30187: LD_INT 5
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 30
30196: PUSH
30197: LD_INT 32
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: PPUSH
30210: CALL_OW 72
30214: ST_TO_ADDR
// if not tmp then
30215: LD_VAR 0 5
30219: NOT
30220: IFFALSE 30224
// continue ;
30222: GO 29709
// list := [ ] ;
30224: LD_ADDR_VAR 0 6
30228: PUSH
30229: EMPTY
30230: ST_TO_ADDR
// for j in tmp do
30231: LD_ADDR_VAR 0 3
30235: PUSH
30236: LD_VAR 0 5
30240: PUSH
30241: FOR_IN
30242: IFFALSE 30311
// begin for k in UnitsInside ( j ) do
30244: LD_ADDR_VAR 0 4
30248: PUSH
30249: LD_VAR 0 3
30253: PPUSH
30254: CALL_OW 313
30258: PUSH
30259: FOR_IN
30260: IFFALSE 30307
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
30262: LD_VAR 0 4
30266: PPUSH
30267: CALL_OW 257
30271: PUSH
30272: LD_INT 1
30274: EQUAL
30275: PUSH
30276: LD_VAR 0 4
30280: PPUSH
30281: CALL_OW 459
30285: NOT
30286: AND
30287: IFFALSE 30305
// list := list ^ k ;
30289: LD_ADDR_VAR 0 6
30293: PUSH
30294: LD_VAR 0 6
30298: PUSH
30299: LD_VAR 0 4
30303: ADD
30304: ST_TO_ADDR
30305: GO 30259
30307: POP
30308: POP
// end ;
30309: GO 30241
30311: POP
30312: POP
// list := list diff mc_miners [ i ] ;
30313: LD_ADDR_VAR 0 6
30317: PUSH
30318: LD_VAR 0 6
30322: PUSH
30323: LD_EXP 64
30327: PUSH
30328: LD_VAR 0 2
30332: ARRAY
30333: DIFF
30334: ST_TO_ADDR
// if not list then
30335: LD_VAR 0 6
30339: NOT
30340: IFFALSE 30344
// continue ;
30342: GO 29709
// k := mc_mines [ i ] - mc_miners [ i ] ;
30344: LD_ADDR_VAR 0 4
30348: PUSH
30349: LD_EXP 63
30353: PUSH
30354: LD_VAR 0 2
30358: ARRAY
30359: PUSH
30360: LD_EXP 64
30364: PUSH
30365: LD_VAR 0 2
30369: ARRAY
30370: MINUS
30371: ST_TO_ADDR
// if k > list then
30372: LD_VAR 0 4
30376: PUSH
30377: LD_VAR 0 6
30381: GREATER
30382: IFFALSE 30394
// k := list ;
30384: LD_ADDR_VAR 0 4
30388: PUSH
30389: LD_VAR 0 6
30393: ST_TO_ADDR
// for j = 1 to k do
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: DOUBLE
30400: LD_INT 1
30402: DEC
30403: ST_TO_ADDR
30404: LD_VAR 0 4
30408: PUSH
30409: FOR_TO
30410: IFFALSE 30464
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
30412: LD_ADDR_EXP 64
30416: PUSH
30417: LD_EXP 64
30421: PPUSH
30422: LD_VAR 0 2
30426: PUSH
30427: LD_EXP 64
30431: PUSH
30432: LD_VAR 0 2
30436: ARRAY
30437: PUSH
30438: LD_INT 1
30440: PLUS
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PPUSH
30446: LD_VAR 0 6
30450: PUSH
30451: LD_VAR 0 3
30455: ARRAY
30456: PPUSH
30457: CALL 54778 0 3
30461: ST_TO_ADDR
30462: GO 30409
30464: POP
30465: POP
// end ;
30466: GO 29709
30468: POP
30469: POP
// end ;
30470: LD_VAR 0 1
30474: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
30475: LD_INT 0
30477: PPUSH
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
// if not mc_bases then
30487: LD_EXP 50
30491: NOT
30492: IFFALSE 30496
// exit ;
30494: GO 32246
// for i = 1 to mc_bases do
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: DOUBLE
30502: LD_INT 1
30504: DEC
30505: ST_TO_ADDR
30506: LD_EXP 50
30510: PUSH
30511: FOR_TO
30512: IFFALSE 32244
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
30514: LD_EXP 50
30518: PUSH
30519: LD_VAR 0 2
30523: ARRAY
30524: NOT
30525: PUSH
30526: LD_EXP 57
30530: PUSH
30531: LD_VAR 0 2
30535: ARRAY
30536: OR
30537: IFFALSE 30541
// continue ;
30539: GO 30511
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
30541: LD_EXP 66
30545: PUSH
30546: LD_VAR 0 2
30550: ARRAY
30551: NOT
30552: PUSH
30553: LD_EXP 67
30557: PUSH
30558: LD_VAR 0 2
30562: ARRAY
30563: AND
30564: IFFALSE 30602
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
30566: LD_ADDR_EXP 67
30570: PUSH
30571: LD_EXP 67
30575: PPUSH
30576: LD_VAR 0 2
30580: PPUSH
30581: EMPTY
30582: PPUSH
30583: CALL_OW 1
30587: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30588: LD_VAR 0 2
30592: PPUSH
30593: LD_INT 107
30595: PPUSH
30596: CALL 21460 0 2
// continue ;
30600: GO 30511
// end ; target := [ ] ;
30602: LD_ADDR_VAR 0 6
30606: PUSH
30607: EMPTY
30608: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30609: LD_ADDR_VAR 0 3
30613: PUSH
30614: DOUBLE
30615: LD_EXP 66
30619: PUSH
30620: LD_VAR 0 2
30624: ARRAY
30625: INC
30626: ST_TO_ADDR
30627: LD_INT 1
30629: PUSH
30630: FOR_DOWNTO
30631: IFFALSE 30891
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30633: LD_EXP 66
30637: PUSH
30638: LD_VAR 0 2
30642: ARRAY
30643: PUSH
30644: LD_VAR 0 3
30648: ARRAY
30649: PUSH
30650: LD_INT 2
30652: ARRAY
30653: PPUSH
30654: LD_EXP 66
30658: PUSH
30659: LD_VAR 0 2
30663: ARRAY
30664: PUSH
30665: LD_VAR 0 3
30669: ARRAY
30670: PUSH
30671: LD_INT 3
30673: ARRAY
30674: PPUSH
30675: CALL_OW 488
30679: PUSH
30680: LD_EXP 66
30684: PUSH
30685: LD_VAR 0 2
30689: ARRAY
30690: PUSH
30691: LD_VAR 0 3
30695: ARRAY
30696: PUSH
30697: LD_INT 2
30699: ARRAY
30700: PPUSH
30701: LD_EXP 66
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_VAR 0 3
30716: ARRAY
30717: PUSH
30718: LD_INT 3
30720: ARRAY
30721: PPUSH
30722: CALL_OW 284
30726: PUSH
30727: LD_INT 0
30729: EQUAL
30730: AND
30731: IFFALSE 30786
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30733: LD_ADDR_VAR 0 5
30737: PUSH
30738: LD_EXP 66
30742: PUSH
30743: LD_VAR 0 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 3
30753: PPUSH
30754: CALL_OW 3
30758: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30759: LD_ADDR_EXP 66
30763: PUSH
30764: LD_EXP 66
30768: PPUSH
30769: LD_VAR 0 2
30773: PPUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: CALL_OW 1
30783: ST_TO_ADDR
// continue ;
30784: GO 30630
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30786: LD_EXP 50
30790: PUSH
30791: LD_VAR 0 2
30795: ARRAY
30796: PUSH
30797: LD_INT 1
30799: ARRAY
30800: PPUSH
30801: CALL_OW 255
30805: PPUSH
30806: LD_EXP 66
30810: PUSH
30811: LD_VAR 0 2
30815: ARRAY
30816: PUSH
30817: LD_VAR 0 3
30821: ARRAY
30822: PUSH
30823: LD_INT 2
30825: ARRAY
30826: PPUSH
30827: LD_EXP 66
30831: PUSH
30832: LD_VAR 0 2
30836: ARRAY
30837: PUSH
30838: LD_VAR 0 3
30842: ARRAY
30843: PUSH
30844: LD_INT 3
30846: ARRAY
30847: PPUSH
30848: LD_INT 30
30850: PPUSH
30851: CALL 55674 0 4
30855: PUSH
30856: LD_INT 4
30858: ARRAY
30859: PUSH
30860: LD_INT 0
30862: EQUAL
30863: IFFALSE 30889
// begin target := mc_crates [ i ] [ j ] ;
30865: LD_ADDR_VAR 0 6
30869: PUSH
30870: LD_EXP 66
30874: PUSH
30875: LD_VAR 0 2
30879: ARRAY
30880: PUSH
30881: LD_VAR 0 3
30885: ARRAY
30886: ST_TO_ADDR
// break ;
30887: GO 30891
// end ; end ;
30889: GO 30630
30891: POP
30892: POP
// if not target then
30893: LD_VAR 0 6
30897: NOT
30898: IFFALSE 30902
// continue ;
30900: GO 30511
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30902: LD_ADDR_VAR 0 7
30906: PUSH
30907: LD_EXP 69
30911: PUSH
30912: LD_VAR 0 2
30916: ARRAY
30917: PPUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 58
30926: PUSH
30927: EMPTY
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 61
30936: PUSH
30937: EMPTY
30938: LIST
30939: PUSH
30940: LD_INT 33
30942: PUSH
30943: LD_INT 5
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 33
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 34
30972: PUSH
30973: LD_INT 32
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 34
30982: PUSH
30983: LD_INT 51
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 34
30992: PUSH
30993: LD_INT 12
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: ST_TO_ADDR
// if not cargo then
31015: LD_VAR 0 7
31019: NOT
31020: IFFALSE 31663
// begin if mc_crates_collector [ i ] < 5 then
31022: LD_EXP 67
31026: PUSH
31027: LD_VAR 0 2
31031: ARRAY
31032: PUSH
31033: LD_INT 5
31035: LESS
31036: IFFALSE 31402
// begin if mc_ape [ i ] then
31038: LD_EXP 79
31042: PUSH
31043: LD_VAR 0 2
31047: ARRAY
31048: IFFALSE 31095
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
31050: LD_ADDR_VAR 0 5
31054: PUSH
31055: LD_EXP 79
31059: PUSH
31060: LD_VAR 0 2
31064: ARRAY
31065: PPUSH
31066: LD_INT 25
31068: PUSH
31069: LD_INT 16
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 24
31078: PUSH
31079: LD_INT 750
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 72
31094: ST_TO_ADDR
// if not tmp then
31095: LD_VAR 0 5
31099: NOT
31100: IFFALSE 31147
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
31102: LD_ADDR_VAR 0 5
31106: PUSH
31107: LD_EXP 50
31111: PUSH
31112: LD_VAR 0 2
31116: ARRAY
31117: PPUSH
31118: LD_INT 25
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 24
31130: PUSH
31131: LD_INT 750
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PPUSH
31142: CALL_OW 72
31146: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
31147: LD_EXP 79
31151: PUSH
31152: LD_VAR 0 2
31156: ARRAY
31157: PUSH
31158: LD_EXP 50
31162: PUSH
31163: LD_VAR 0 2
31167: ARRAY
31168: PPUSH
31169: LD_INT 25
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 24
31181: PUSH
31182: LD_INT 750
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PPUSH
31193: CALL_OW 72
31197: AND
31198: PUSH
31199: LD_VAR 0 5
31203: PUSH
31204: LD_INT 5
31206: LESS
31207: AND
31208: IFFALSE 31290
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
31210: LD_ADDR_VAR 0 3
31214: PUSH
31215: LD_EXP 50
31219: PUSH
31220: LD_VAR 0 2
31224: ARRAY
31225: PPUSH
31226: LD_INT 25
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 24
31238: PUSH
31239: LD_INT 750
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PPUSH
31250: CALL_OW 72
31254: PUSH
31255: FOR_IN
31256: IFFALSE 31288
// begin tmp := tmp union j ;
31258: LD_ADDR_VAR 0 5
31262: PUSH
31263: LD_VAR 0 5
31267: PUSH
31268: LD_VAR 0 3
31272: UNION
31273: ST_TO_ADDR
// if tmp >= 5 then
31274: LD_VAR 0 5
31278: PUSH
31279: LD_INT 5
31281: GREATEREQUAL
31282: IFFALSE 31286
// break ;
31284: GO 31288
// end ;
31286: GO 31255
31288: POP
31289: POP
// end ; if not tmp then
31290: LD_VAR 0 5
31294: NOT
31295: IFFALSE 31299
// continue ;
31297: GO 30511
// for j in tmp do
31299: LD_ADDR_VAR 0 3
31303: PUSH
31304: LD_VAR 0 5
31308: PUSH
31309: FOR_IN
31310: IFFALSE 31400
// if not GetTag ( j ) then
31312: LD_VAR 0 3
31316: PPUSH
31317: CALL_OW 110
31321: NOT
31322: IFFALSE 31398
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
31324: LD_ADDR_EXP 67
31328: PUSH
31329: LD_EXP 67
31333: PPUSH
31334: LD_VAR 0 2
31338: PUSH
31339: LD_EXP 67
31343: PUSH
31344: LD_VAR 0 2
31348: ARRAY
31349: PUSH
31350: LD_INT 1
31352: PLUS
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PPUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: CALL 54778 0 3
31367: ST_TO_ADDR
// SetTag ( j , 107 ) ;
31368: LD_VAR 0 3
31372: PPUSH
31373: LD_INT 107
31375: PPUSH
31376: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
31380: LD_EXP 67
31384: PUSH
31385: LD_VAR 0 2
31389: ARRAY
31390: PUSH
31391: LD_INT 5
31393: GREATEREQUAL
31394: IFFALSE 31398
// break ;
31396: GO 31400
// end ;
31398: GO 31309
31400: POP
31401: POP
// end ; if mc_crates_collector [ i ] and target then
31402: LD_EXP 67
31406: PUSH
31407: LD_VAR 0 2
31411: ARRAY
31412: PUSH
31413: LD_VAR 0 6
31417: AND
31418: IFFALSE 31661
// begin if mc_crates_collector [ i ] < target [ 1 ] then
31420: LD_EXP 67
31424: PUSH
31425: LD_VAR 0 2
31429: ARRAY
31430: PUSH
31431: LD_VAR 0 6
31435: PUSH
31436: LD_INT 1
31438: ARRAY
31439: LESS
31440: IFFALSE 31460
// tmp := mc_crates_collector [ i ] else
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: LD_EXP 67
31451: PUSH
31452: LD_VAR 0 2
31456: ARRAY
31457: ST_TO_ADDR
31458: GO 31474
// tmp := target [ 1 ] ;
31460: LD_ADDR_VAR 0 5
31464: PUSH
31465: LD_VAR 0 6
31469: PUSH
31470: LD_INT 1
31472: ARRAY
31473: ST_TO_ADDR
// k := 0 ;
31474: LD_ADDR_VAR 0 4
31478: PUSH
31479: LD_INT 0
31481: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_EXP 67
31491: PUSH
31492: LD_VAR 0 2
31496: ARRAY
31497: PUSH
31498: FOR_IN
31499: IFFALSE 31659
// begin k := k + 1 ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_VAR 0 4
31510: PUSH
31511: LD_INT 1
31513: PLUS
31514: ST_TO_ADDR
// if k > tmp then
31515: LD_VAR 0 4
31519: PUSH
31520: LD_VAR 0 5
31524: GREATER
31525: IFFALSE 31529
// break ;
31527: GO 31659
// if not GetClass ( j ) in [ 2 , 16 ] then
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL_OW 257
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 16
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: IN
31549: NOT
31550: IFFALSE 31603
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
31552: LD_ADDR_EXP 67
31556: PUSH
31557: LD_EXP 67
31561: PPUSH
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_EXP 67
31571: PUSH
31572: LD_VAR 0 2
31576: ARRAY
31577: PUSH
31578: LD_VAR 0 3
31582: DIFF
31583: PPUSH
31584: CALL_OW 1
31588: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31589: LD_VAR 0 3
31593: PPUSH
31594: LD_INT 0
31596: PPUSH
31597: CALL_OW 109
// continue ;
31601: GO 31498
// end ; if IsInUnit ( j ) then
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL_OW 310
31612: IFFALSE 31623
// ComExitBuilding ( j ) ;
31614: LD_VAR 0 3
31618: PPUSH
31619: CALL_OW 122
// wait ( 3 ) ;
31623: LD_INT 3
31625: PPUSH
31626: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31630: LD_VAR 0 3
31634: PPUSH
31635: LD_VAR 0 6
31639: PUSH
31640: LD_INT 2
31642: ARRAY
31643: PPUSH
31644: LD_VAR 0 6
31648: PUSH
31649: LD_INT 3
31651: ARRAY
31652: PPUSH
31653: CALL_OW 117
// end ;
31657: GO 31498
31659: POP
31660: POP
// end ; end else
31661: GO 32242
// begin for j in cargo do
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_VAR 0 7
31672: PUSH
31673: FOR_IN
31674: IFFALSE 32240
// begin if GetTag ( j ) <> 0 then
31676: LD_VAR 0 3
31680: PPUSH
31681: CALL_OW 110
31685: PUSH
31686: LD_INT 0
31688: NONEQUAL
31689: IFFALSE 31693
// continue ;
31691: GO 31673
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31693: LD_VAR 0 3
31697: PPUSH
31698: CALL_OW 256
31702: PUSH
31703: LD_INT 1000
31705: LESS
31706: PUSH
31707: LD_VAR 0 3
31711: PPUSH
31712: LD_EXP 74
31716: PUSH
31717: LD_VAR 0 2
31721: ARRAY
31722: PPUSH
31723: CALL_OW 308
31727: NOT
31728: AND
31729: IFFALSE 31751
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31731: LD_VAR 0 3
31735: PPUSH
31736: LD_EXP 74
31740: PUSH
31741: LD_VAR 0 2
31745: ARRAY
31746: PPUSH
31747: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31751: LD_VAR 0 3
31755: PPUSH
31756: CALL_OW 256
31760: PUSH
31761: LD_INT 1000
31763: LESS
31764: PUSH
31765: LD_VAR 0 3
31769: PPUSH
31770: LD_EXP 74
31774: PUSH
31775: LD_VAR 0 2
31779: ARRAY
31780: PPUSH
31781: CALL_OW 308
31785: AND
31786: IFFALSE 31790
// continue ;
31788: GO 31673
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31790: LD_VAR 0 3
31794: PPUSH
31795: CALL_OW 262
31799: PUSH
31800: LD_INT 2
31802: EQUAL
31803: PUSH
31804: LD_VAR 0 3
31808: PPUSH
31809: CALL_OW 261
31813: PUSH
31814: LD_INT 15
31816: LESS
31817: AND
31818: IFFALSE 31822
// continue ;
31820: GO 31673
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31822: LD_VAR 0 3
31826: PPUSH
31827: CALL_OW 262
31831: PUSH
31832: LD_INT 1
31834: EQUAL
31835: PUSH
31836: LD_VAR 0 3
31840: PPUSH
31841: CALL_OW 261
31845: PUSH
31846: LD_INT 10
31848: LESS
31849: AND
31850: IFFALSE 32179
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31852: LD_ADDR_VAR 0 8
31856: PUSH
31857: LD_EXP 50
31861: PUSH
31862: LD_VAR 0 2
31866: ARRAY
31867: PPUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 30
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: PPUSH
31896: CALL_OW 72
31900: ST_TO_ADDR
// if not depot then
31901: LD_VAR 0 8
31905: NOT
31906: IFFALSE 31910
// continue ;
31908: GO 31673
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31910: LD_VAR 0 3
31914: PPUSH
31915: LD_VAR 0 8
31919: PPUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: CALL_OW 74
31929: PPUSH
31930: CALL_OW 296
31934: PUSH
31935: LD_INT 6
31937: LESS
31938: IFFALSE 31954
// SetFuel ( j , 100 ) else
31940: LD_VAR 0 3
31944: PPUSH
31945: LD_INT 100
31947: PPUSH
31948: CALL_OW 240
31952: GO 32179
// if GetFuel ( j ) = 0 then
31954: LD_VAR 0 3
31958: PPUSH
31959: CALL_OW 261
31963: PUSH
31964: LD_INT 0
31966: EQUAL
31967: IFFALSE 32179
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31969: LD_ADDR_EXP 69
31973: PUSH
31974: LD_EXP 69
31978: PPUSH
31979: LD_VAR 0 2
31983: PPUSH
31984: LD_EXP 69
31988: PUSH
31989: LD_VAR 0 2
31993: ARRAY
31994: PUSH
31995: LD_VAR 0 3
31999: DIFF
32000: PPUSH
32001: CALL_OW 1
32005: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
32006: LD_VAR 0 3
32010: PPUSH
32011: CALL_OW 263
32015: PUSH
32016: LD_INT 1
32018: EQUAL
32019: IFFALSE 32035
// ComExitVehicle ( IsInUnit ( j ) ) ;
32021: LD_VAR 0 3
32025: PPUSH
32026: CALL_OW 310
32030: PPUSH
32031: CALL_OW 121
// if GetControl ( j ) = control_remote then
32035: LD_VAR 0 3
32039: PPUSH
32040: CALL_OW 263
32044: PUSH
32045: LD_INT 2
32047: EQUAL
32048: IFFALSE 32059
// ComUnlink ( j ) ;
32050: LD_VAR 0 3
32054: PPUSH
32055: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
32059: LD_ADDR_VAR 0 9
32063: PUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_INT 3
32071: PPUSH
32072: CALL 41532 0 2
32076: ST_TO_ADDR
// if fac then
32077: LD_VAR 0 9
32081: IFFALSE 32177
// begin for k in fac do
32083: LD_ADDR_VAR 0 4
32087: PUSH
32088: LD_VAR 0 9
32092: PUSH
32093: FOR_IN
32094: IFFALSE 32175
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
32096: LD_ADDR_VAR 0 10
32100: PUSH
32101: LD_VAR 0 9
32105: PPUSH
32106: LD_VAR 0 3
32110: PPUSH
32111: CALL_OW 265
32115: PPUSH
32116: LD_VAR 0 3
32120: PPUSH
32121: CALL_OW 262
32125: PPUSH
32126: LD_VAR 0 3
32130: PPUSH
32131: CALL_OW 263
32135: PPUSH
32136: LD_VAR 0 3
32140: PPUSH
32141: CALL_OW 264
32145: PPUSH
32146: CALL 52310 0 5
32150: ST_TO_ADDR
// if components then
32151: LD_VAR 0 10
32155: IFFALSE 32173
// begin MC_InsertProduceList ( i , components ) ;
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_VAR 0 10
32166: PPUSH
32167: CALL 41077 0 2
// break ;
32171: GO 32175
// end ; end ;
32173: GO 32093
32175: POP
32176: POP
// end ; continue ;
32177: GO 31673
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
32179: LD_VAR 0 3
32183: PPUSH
32184: LD_INT 1
32186: PPUSH
32187: CALL_OW 289
32191: PUSH
32192: LD_INT 100
32194: LESS
32195: PUSH
32196: LD_VAR 0 3
32200: PPUSH
32201: CALL_OW 314
32205: NOT
32206: AND
32207: IFFALSE 32236
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
32209: LD_VAR 0 3
32213: PPUSH
32214: LD_VAR 0 6
32218: PUSH
32219: LD_INT 2
32221: ARRAY
32222: PPUSH
32223: LD_VAR 0 6
32227: PUSH
32228: LD_INT 3
32230: ARRAY
32231: PPUSH
32232: CALL_OW 117
// break ;
32236: GO 32240
// end ;
32238: GO 31673
32240: POP
32241: POP
// end ; end ;
32242: GO 30511
32244: POP
32245: POP
// end ;
32246: LD_VAR 0 1
32250: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
32251: LD_INT 0
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
// if not mc_bases then
32257: LD_EXP 50
32261: NOT
32262: IFFALSE 32266
// exit ;
32264: GO 32427
// for i = 1 to mc_bases do
32266: LD_ADDR_VAR 0 2
32270: PUSH
32271: DOUBLE
32272: LD_INT 1
32274: DEC
32275: ST_TO_ADDR
32276: LD_EXP 50
32280: PUSH
32281: FOR_TO
32282: IFFALSE 32425
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
32284: LD_ADDR_VAR 0 4
32288: PUSH
32289: LD_EXP 69
32293: PUSH
32294: LD_VAR 0 2
32298: ARRAY
32299: PUSH
32300: LD_EXP 72
32304: PUSH
32305: LD_VAR 0 2
32309: ARRAY
32310: UNION
32311: PPUSH
32312: LD_INT 33
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PPUSH
32322: CALL_OW 72
32326: ST_TO_ADDR
// if tmp then
32327: LD_VAR 0 4
32331: IFFALSE 32423
// for j in tmp do
32333: LD_ADDR_VAR 0 3
32337: PUSH
32338: LD_VAR 0 4
32342: PUSH
32343: FOR_IN
32344: IFFALSE 32421
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
32346: LD_VAR 0 3
32350: PPUSH
32351: CALL_OW 312
32355: NOT
32356: PUSH
32357: LD_VAR 0 3
32361: PPUSH
32362: CALL_OW 256
32366: PUSH
32367: LD_INT 250
32369: GREATEREQUAL
32370: AND
32371: IFFALSE 32384
// Connect ( j ) else
32373: LD_VAR 0 3
32377: PPUSH
32378: CALL 57711 0 1
32382: GO 32419
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
32384: LD_VAR 0 3
32388: PPUSH
32389: CALL_OW 256
32393: PUSH
32394: LD_INT 250
32396: LESS
32397: PUSH
32398: LD_VAR 0 3
32402: PPUSH
32403: CALL_OW 312
32407: AND
32408: IFFALSE 32419
// ComUnlink ( j ) ;
32410: LD_VAR 0 3
32414: PPUSH
32415: CALL_OW 136
32419: GO 32343
32421: POP
32422: POP
// end ;
32423: GO 32281
32425: POP
32426: POP
// end ;
32427: LD_VAR 0 1
32431: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
32432: LD_INT 0
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
// if not mc_bases then
32439: LD_EXP 50
32443: NOT
32444: IFFALSE 32448
// exit ;
32446: GO 32893
// for i = 1 to mc_bases do
32448: LD_ADDR_VAR 0 2
32452: PUSH
32453: DOUBLE
32454: LD_INT 1
32456: DEC
32457: ST_TO_ADDR
32458: LD_EXP 50
32462: PUSH
32463: FOR_TO
32464: IFFALSE 32891
// begin if not mc_produce [ i ] then
32466: LD_EXP 71
32470: PUSH
32471: LD_VAR 0 2
32475: ARRAY
32476: NOT
32477: IFFALSE 32481
// continue ;
32479: GO 32463
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: LD_EXP 50
32490: PUSH
32491: LD_VAR 0 2
32495: ARRAY
32496: PPUSH
32497: LD_INT 30
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 72
32511: ST_TO_ADDR
// if not fac then
32512: LD_VAR 0 5
32516: NOT
32517: IFFALSE 32521
// continue ;
32519: GO 32463
// for j in fac do
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_VAR 0 5
32530: PUSH
32531: FOR_IN
32532: IFFALSE 32887
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
32534: LD_VAR 0 3
32538: PPUSH
32539: CALL_OW 461
32543: PUSH
32544: LD_INT 2
32546: NONEQUAL
32547: PUSH
32548: LD_VAR 0 3
32552: PPUSH
32553: LD_INT 15
32555: PPUSH
32556: CALL 57371 0 2
32560: PUSH
32561: LD_INT 4
32563: ARRAY
32564: OR
32565: IFFALSE 32569
// continue ;
32567: GO 32531
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
32569: LD_VAR 0 3
32573: PPUSH
32574: LD_EXP 71
32578: PUSH
32579: LD_VAR 0 2
32583: ARRAY
32584: PUSH
32585: LD_INT 1
32587: ARRAY
32588: PUSH
32589: LD_INT 1
32591: ARRAY
32592: PPUSH
32593: LD_EXP 71
32597: PUSH
32598: LD_VAR 0 2
32602: ARRAY
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: PUSH
32608: LD_INT 2
32610: ARRAY
32611: PPUSH
32612: LD_EXP 71
32616: PUSH
32617: LD_VAR 0 2
32621: ARRAY
32622: PUSH
32623: LD_INT 1
32625: ARRAY
32626: PUSH
32627: LD_INT 3
32629: ARRAY
32630: PPUSH
32631: LD_EXP 71
32635: PUSH
32636: LD_VAR 0 2
32640: ARRAY
32641: PUSH
32642: LD_INT 1
32644: ARRAY
32645: PUSH
32646: LD_INT 4
32648: ARRAY
32649: PPUSH
32650: CALL_OW 448
32654: PUSH
32655: LD_VAR 0 3
32659: PPUSH
32660: LD_EXP 71
32664: PUSH
32665: LD_VAR 0 2
32669: ARRAY
32670: PUSH
32671: LD_INT 1
32673: ARRAY
32674: PUSH
32675: LD_INT 1
32677: ARRAY
32678: PUSH
32679: LD_EXP 71
32683: PUSH
32684: LD_VAR 0 2
32688: ARRAY
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PUSH
32694: LD_INT 2
32696: ARRAY
32697: PUSH
32698: LD_EXP 71
32702: PUSH
32703: LD_VAR 0 2
32707: ARRAY
32708: PUSH
32709: LD_INT 1
32711: ARRAY
32712: PUSH
32713: LD_INT 3
32715: ARRAY
32716: PUSH
32717: LD_EXP 71
32721: PUSH
32722: LD_VAR 0 2
32726: ARRAY
32727: PUSH
32728: LD_INT 1
32730: ARRAY
32731: PUSH
32732: LD_INT 4
32734: ARRAY
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: PPUSH
32742: CALL 61042 0 2
32746: AND
32747: IFFALSE 32885
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32749: LD_VAR 0 3
32753: PPUSH
32754: LD_EXP 71
32758: PUSH
32759: LD_VAR 0 2
32763: ARRAY
32764: PUSH
32765: LD_INT 1
32767: ARRAY
32768: PUSH
32769: LD_INT 1
32771: ARRAY
32772: PPUSH
32773: LD_EXP 71
32777: PUSH
32778: LD_VAR 0 2
32782: ARRAY
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: PUSH
32788: LD_INT 2
32790: ARRAY
32791: PPUSH
32792: LD_EXP 71
32796: PUSH
32797: LD_VAR 0 2
32801: ARRAY
32802: PUSH
32803: LD_INT 1
32805: ARRAY
32806: PUSH
32807: LD_INT 3
32809: ARRAY
32810: PPUSH
32811: LD_EXP 71
32815: PUSH
32816: LD_VAR 0 2
32820: ARRAY
32821: PUSH
32822: LD_INT 1
32824: ARRAY
32825: PUSH
32826: LD_INT 4
32828: ARRAY
32829: PPUSH
32830: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32834: LD_ADDR_VAR 0 4
32838: PUSH
32839: LD_EXP 71
32843: PUSH
32844: LD_VAR 0 2
32848: ARRAY
32849: PPUSH
32850: LD_INT 1
32852: PPUSH
32853: CALL_OW 3
32857: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32858: LD_ADDR_EXP 71
32862: PUSH
32863: LD_EXP 71
32867: PPUSH
32868: LD_VAR 0 2
32872: PPUSH
32873: LD_VAR 0 4
32877: PPUSH
32878: CALL_OW 1
32882: ST_TO_ADDR
// break ;
32883: GO 32887
// end ; end ;
32885: GO 32531
32887: POP
32888: POP
// end ;
32889: GO 32463
32891: POP
32892: POP
// end ;
32893: LD_VAR 0 1
32897: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32898: LD_INT 0
32900: PPUSH
32901: PPUSH
32902: PPUSH
// if not mc_bases then
32903: LD_EXP 50
32907: NOT
32908: IFFALSE 32912
// exit ;
32910: GO 33001
// for i = 1 to mc_bases do
32912: LD_ADDR_VAR 0 2
32916: PUSH
32917: DOUBLE
32918: LD_INT 1
32920: DEC
32921: ST_TO_ADDR
32922: LD_EXP 50
32926: PUSH
32927: FOR_TO
32928: IFFALSE 32999
// begin if mc_attack [ i ] then
32930: LD_EXP 70
32934: PUSH
32935: LD_VAR 0 2
32939: ARRAY
32940: IFFALSE 32997
// begin tmp := mc_attack [ i ] [ 1 ] ;
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_EXP 70
32951: PUSH
32952: LD_VAR 0 2
32956: ARRAY
32957: PUSH
32958: LD_INT 1
32960: ARRAY
32961: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32962: LD_ADDR_EXP 70
32966: PUSH
32967: LD_EXP 70
32971: PPUSH
32972: LD_VAR 0 2
32976: PPUSH
32977: EMPTY
32978: PPUSH
32979: CALL_OW 1
32983: ST_TO_ADDR
// Attack ( tmp ) ;
32984: LD_VAR 0 3
32988: PPUSH
32989: CALL 83232 0 1
// exit ;
32993: POP
32994: POP
32995: GO 33001
// end ; end ;
32997: GO 32927
32999: POP
33000: POP
// end ;
33001: LD_VAR 0 1
33005: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
33006: LD_INT 0
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
// if not mc_bases then
33015: LD_EXP 50
33019: NOT
33020: IFFALSE 33024
// exit ;
33022: GO 33606
// for i = 1 to mc_bases do
33024: LD_ADDR_VAR 0 2
33028: PUSH
33029: DOUBLE
33030: LD_INT 1
33032: DEC
33033: ST_TO_ADDR
33034: LD_EXP 50
33038: PUSH
33039: FOR_TO
33040: IFFALSE 33604
// begin if not mc_bases [ i ] then
33042: LD_EXP 50
33046: PUSH
33047: LD_VAR 0 2
33051: ARRAY
33052: NOT
33053: IFFALSE 33057
// continue ;
33055: GO 33039
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
33057: LD_ADDR_VAR 0 7
33061: PUSH
33062: LD_EXP 50
33066: PUSH
33067: LD_VAR 0 2
33071: ARRAY
33072: PUSH
33073: LD_INT 1
33075: ARRAY
33076: PPUSH
33077: CALL 51614 0 1
33081: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
33082: LD_ADDR_EXP 73
33086: PUSH
33087: LD_EXP 73
33091: PPUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: LD_EXP 50
33101: PUSH
33102: LD_VAR 0 2
33106: ARRAY
33107: PUSH
33108: LD_INT 1
33110: ARRAY
33111: PPUSH
33112: CALL_OW 255
33116: PPUSH
33117: LD_EXP 75
33121: PUSH
33122: LD_VAR 0 2
33126: ARRAY
33127: PPUSH
33128: CALL 49168 0 2
33132: PPUSH
33133: CALL_OW 1
33137: ST_TO_ADDR
// if not mc_scan [ i ] then
33138: LD_EXP 73
33142: PUSH
33143: LD_VAR 0 2
33147: ARRAY
33148: NOT
33149: IFFALSE 33304
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: LD_EXP 50
33160: PUSH
33161: LD_VAR 0 2
33165: ARRAY
33166: PPUSH
33167: LD_INT 2
33169: PUSH
33170: LD_INT 25
33172: PUSH
33173: LD_INT 5
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 25
33182: PUSH
33183: LD_INT 8
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 25
33192: PUSH
33193: LD_INT 9
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 72
33210: ST_TO_ADDR
// if not tmp then
33211: LD_VAR 0 4
33215: NOT
33216: IFFALSE 33220
// continue ;
33218: GO 33039
// for j in tmp do
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_VAR 0 4
33229: PUSH
33230: FOR_IN
33231: IFFALSE 33302
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
33233: LD_VAR 0 3
33237: PPUSH
33238: CALL_OW 310
33242: PPUSH
33243: CALL_OW 266
33247: PUSH
33248: LD_INT 5
33250: EQUAL
33251: PUSH
33252: LD_VAR 0 3
33256: PPUSH
33257: CALL_OW 257
33261: PUSH
33262: LD_INT 1
33264: EQUAL
33265: AND
33266: PUSH
33267: LD_VAR 0 3
33271: PPUSH
33272: CALL_OW 459
33276: NOT
33277: AND
33278: PUSH
33279: LD_VAR 0 7
33283: AND
33284: IFFALSE 33300
// ComChangeProfession ( j , class ) ;
33286: LD_VAR 0 3
33290: PPUSH
33291: LD_VAR 0 7
33295: PPUSH
33296: CALL_OW 123
33300: GO 33230
33302: POP
33303: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
33304: LD_EXP 73
33308: PUSH
33309: LD_VAR 0 2
33313: ARRAY
33314: PUSH
33315: LD_EXP 72
33319: PUSH
33320: LD_VAR 0 2
33324: ARRAY
33325: NOT
33326: AND
33327: PUSH
33328: LD_EXP 50
33332: PUSH
33333: LD_VAR 0 2
33337: ARRAY
33338: PPUSH
33339: LD_INT 30
33341: PUSH
33342: LD_INT 32
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PPUSH
33349: CALL_OW 72
33353: NOT
33354: AND
33355: PUSH
33356: LD_EXP 50
33360: PUSH
33361: LD_VAR 0 2
33365: ARRAY
33366: PPUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 30
33372: PUSH
33373: LD_INT 4
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 30
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: PPUSH
33395: CALL_OW 72
33399: NOT
33400: AND
33401: IFFALSE 33533
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33403: LD_ADDR_VAR 0 4
33407: PUSH
33408: LD_EXP 50
33412: PUSH
33413: LD_VAR 0 2
33417: ARRAY
33418: PPUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 25
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 25
33434: PUSH
33435: LD_INT 5
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 25
33444: PUSH
33445: LD_INT 8
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 25
33454: PUSH
33455: LD_INT 9
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 72
33473: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
33474: LD_ADDR_VAR 0 4
33478: PUSH
33479: LD_VAR 0 4
33483: PUSH
33484: LD_VAR 0 4
33488: PPUSH
33489: LD_INT 18
33491: PPUSH
33492: CALL 88048 0 2
33496: DIFF
33497: ST_TO_ADDR
// if tmp then
33498: LD_VAR 0 4
33502: IFFALSE 33533
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
33504: LD_VAR 0 2
33508: PPUSH
33509: LD_VAR 0 4
33513: PPUSH
33514: LD_EXP 75
33518: PUSH
33519: LD_VAR 0 2
33523: ARRAY
33524: PPUSH
33525: CALL 49203 0 3
// exit ;
33529: POP
33530: POP
33531: GO 33606
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
33533: LD_EXP 73
33537: PUSH
33538: LD_VAR 0 2
33542: ARRAY
33543: PUSH
33544: LD_EXP 72
33548: PUSH
33549: LD_VAR 0 2
33553: ARRAY
33554: AND
33555: IFFALSE 33602
// begin tmp := mc_defender [ i ] ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_EXP 72
33566: PUSH
33567: LD_VAR 0 2
33571: ARRAY
33572: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: LD_EXP 73
33587: PUSH
33588: LD_VAR 0 2
33592: ARRAY
33593: PPUSH
33594: CALL 49764 0 3
// exit ;
33598: POP
33599: POP
33600: GO 33606
// end ; end ;
33602: GO 33039
33604: POP
33605: POP
// end ;
33606: LD_VAR 0 1
33610: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33611: LD_INT 0
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
// if not mc_bases then
33624: LD_EXP 50
33628: NOT
33629: IFFALSE 33633
// exit ;
33631: GO 34720
// for i = 1 to mc_bases do
33633: LD_ADDR_VAR 0 2
33637: PUSH
33638: DOUBLE
33639: LD_INT 1
33641: DEC
33642: ST_TO_ADDR
33643: LD_EXP 50
33647: PUSH
33648: FOR_TO
33649: IFFALSE 34718
// begin tmp := mc_lab [ i ] ;
33651: LD_ADDR_VAR 0 6
33655: PUSH
33656: LD_EXP 83
33660: PUSH
33661: LD_VAR 0 2
33665: ARRAY
33666: ST_TO_ADDR
// if not tmp then
33667: LD_VAR 0 6
33671: NOT
33672: IFFALSE 33676
// continue ;
33674: GO 33648
// idle_lab := 0 ;
33676: LD_ADDR_VAR 0 11
33680: PUSH
33681: LD_INT 0
33683: ST_TO_ADDR
// for j in tmp do
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_VAR 0 6
33693: PUSH
33694: FOR_IN
33695: IFFALSE 34714
// begin researching := false ;
33697: LD_ADDR_VAR 0 10
33701: PUSH
33702: LD_INT 0
33704: ST_TO_ADDR
// side := GetSide ( j ) ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: LD_VAR 0 3
33714: PPUSH
33715: CALL_OW 255
33719: ST_TO_ADDR
// if not mc_tech [ side ] then
33720: LD_EXP 77
33724: PUSH
33725: LD_VAR 0 4
33729: ARRAY
33730: NOT
33731: IFFALSE 33735
// continue ;
33733: GO 33694
// if BuildingStatus ( j ) = bs_idle then
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 461
33744: PUSH
33745: LD_INT 2
33747: EQUAL
33748: IFFALSE 33936
// begin if idle_lab and UnitsInside ( j ) < 6 then
33750: LD_VAR 0 11
33754: PUSH
33755: LD_VAR 0 3
33759: PPUSH
33760: CALL_OW 313
33764: PUSH
33765: LD_INT 6
33767: LESS
33768: AND
33769: IFFALSE 33840
// begin tmp2 := UnitsInside ( idle_lab ) ;
33771: LD_ADDR_VAR 0 9
33775: PUSH
33776: LD_VAR 0 11
33780: PPUSH
33781: CALL_OW 313
33785: ST_TO_ADDR
// if tmp2 then
33786: LD_VAR 0 9
33790: IFFALSE 33832
// for x in tmp2 do
33792: LD_ADDR_VAR 0 7
33796: PUSH
33797: LD_VAR 0 9
33801: PUSH
33802: FOR_IN
33803: IFFALSE 33830
// begin ComExitBuilding ( x ) ;
33805: LD_VAR 0 7
33809: PPUSH
33810: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33814: LD_VAR 0 7
33818: PPUSH
33819: LD_VAR 0 3
33823: PPUSH
33824: CALL_OW 180
// end ;
33828: GO 33802
33830: POP
33831: POP
// idle_lab := 0 ;
33832: LD_ADDR_VAR 0 11
33836: PUSH
33837: LD_INT 0
33839: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33840: LD_ADDR_VAR 0 5
33844: PUSH
33845: LD_EXP 77
33849: PUSH
33850: LD_VAR 0 4
33854: ARRAY
33855: PUSH
33856: FOR_IN
33857: IFFALSE 33917
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33859: LD_VAR 0 3
33863: PPUSH
33864: LD_VAR 0 5
33868: PPUSH
33869: CALL_OW 430
33873: PUSH
33874: LD_VAR 0 4
33878: PPUSH
33879: LD_VAR 0 5
33883: PPUSH
33884: CALL 48273 0 2
33888: AND
33889: IFFALSE 33915
// begin researching := true ;
33891: LD_ADDR_VAR 0 10
33895: PUSH
33896: LD_INT 1
33898: ST_TO_ADDR
// ComResearch ( j , t ) ;
33899: LD_VAR 0 3
33903: PPUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: CALL_OW 124
// break ;
33913: GO 33917
// end ;
33915: GO 33856
33917: POP
33918: POP
// if not researching then
33919: LD_VAR 0 10
33923: NOT
33924: IFFALSE 33936
// idle_lab := j ;
33926: LD_ADDR_VAR 0 11
33930: PUSH
33931: LD_VAR 0 3
33935: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33936: LD_VAR 0 3
33940: PPUSH
33941: CALL_OW 461
33945: PUSH
33946: LD_INT 10
33948: EQUAL
33949: IFFALSE 34537
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33951: LD_EXP 79
33955: PUSH
33956: LD_VAR 0 2
33960: ARRAY
33961: NOT
33962: PUSH
33963: LD_EXP 80
33967: PUSH
33968: LD_VAR 0 2
33972: ARRAY
33973: NOT
33974: AND
33975: PUSH
33976: LD_EXP 77
33980: PUSH
33981: LD_VAR 0 4
33985: ARRAY
33986: PUSH
33987: LD_INT 1
33989: GREATER
33990: AND
33991: IFFALSE 34122
// begin ComCancel ( j ) ;
33993: LD_VAR 0 3
33997: PPUSH
33998: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
34002: LD_ADDR_EXP 77
34006: PUSH
34007: LD_EXP 77
34011: PPUSH
34012: LD_VAR 0 4
34016: PPUSH
34017: LD_EXP 77
34021: PUSH
34022: LD_VAR 0 4
34026: ARRAY
34027: PPUSH
34028: LD_EXP 77
34032: PUSH
34033: LD_VAR 0 4
34037: ARRAY
34038: PUSH
34039: LD_INT 1
34041: MINUS
34042: PPUSH
34043: LD_EXP 77
34047: PUSH
34048: LD_VAR 0 4
34052: ARRAY
34053: PPUSH
34054: LD_INT 0
34056: PPUSH
34057: CALL 54196 0 4
34061: PPUSH
34062: CALL_OW 1
34066: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
34067: LD_ADDR_EXP 77
34071: PUSH
34072: LD_EXP 77
34076: PPUSH
34077: LD_VAR 0 4
34081: PPUSH
34082: LD_EXP 77
34086: PUSH
34087: LD_VAR 0 4
34091: ARRAY
34092: PPUSH
34093: LD_EXP 77
34097: PUSH
34098: LD_VAR 0 4
34102: ARRAY
34103: PPUSH
34104: LD_INT 1
34106: PPUSH
34107: LD_INT 0
34109: PPUSH
34110: CALL 54196 0 4
34114: PPUSH
34115: CALL_OW 1
34119: ST_TO_ADDR
// continue ;
34120: GO 33694
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
34122: LD_EXP 79
34126: PUSH
34127: LD_VAR 0 2
34131: ARRAY
34132: PUSH
34133: LD_EXP 80
34137: PUSH
34138: LD_VAR 0 2
34142: ARRAY
34143: NOT
34144: AND
34145: IFFALSE 34272
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
34147: LD_ADDR_EXP 80
34151: PUSH
34152: LD_EXP 80
34156: PPUSH
34157: LD_VAR 0 2
34161: PUSH
34162: LD_EXP 80
34166: PUSH
34167: LD_VAR 0 2
34171: ARRAY
34172: PUSH
34173: LD_INT 1
34175: PLUS
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PPUSH
34181: LD_EXP 79
34185: PUSH
34186: LD_VAR 0 2
34190: ARRAY
34191: PUSH
34192: LD_INT 1
34194: ARRAY
34195: PPUSH
34196: CALL 54778 0 3
34200: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
34201: LD_EXP 79
34205: PUSH
34206: LD_VAR 0 2
34210: ARRAY
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PPUSH
34216: LD_INT 112
34218: PPUSH
34219: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
34223: LD_ADDR_VAR 0 9
34227: PUSH
34228: LD_EXP 79
34232: PUSH
34233: LD_VAR 0 2
34237: ARRAY
34238: PPUSH
34239: LD_INT 1
34241: PPUSH
34242: CALL_OW 3
34246: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
34247: LD_ADDR_EXP 79
34251: PUSH
34252: LD_EXP 79
34256: PPUSH
34257: LD_VAR 0 2
34261: PPUSH
34262: LD_VAR 0 9
34266: PPUSH
34267: CALL_OW 1
34271: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
34272: LD_EXP 79
34276: PUSH
34277: LD_VAR 0 2
34281: ARRAY
34282: PUSH
34283: LD_EXP 80
34287: PUSH
34288: LD_VAR 0 2
34292: ARRAY
34293: AND
34294: PUSH
34295: LD_EXP 80
34299: PUSH
34300: LD_VAR 0 2
34304: ARRAY
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: CALL_OW 310
34314: NOT
34315: AND
34316: PUSH
34317: LD_VAR 0 3
34321: PPUSH
34322: CALL_OW 313
34326: PUSH
34327: LD_INT 6
34329: EQUAL
34330: AND
34331: IFFALSE 34387
// begin tmp2 := UnitsInside ( j ) ;
34333: LD_ADDR_VAR 0 9
34337: PUSH
34338: LD_VAR 0 3
34342: PPUSH
34343: CALL_OW 313
34347: ST_TO_ADDR
// if tmp2 = 6 then
34348: LD_VAR 0 9
34352: PUSH
34353: LD_INT 6
34355: EQUAL
34356: IFFALSE 34387
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
34358: LD_VAR 0 9
34362: PUSH
34363: LD_INT 1
34365: ARRAY
34366: PPUSH
34367: LD_INT 112
34369: PPUSH
34370: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
34374: LD_VAR 0 9
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: PPUSH
34383: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
34387: LD_EXP 80
34391: PUSH
34392: LD_VAR 0 2
34396: ARRAY
34397: PUSH
34398: LD_EXP 80
34402: PUSH
34403: LD_VAR 0 2
34407: ARRAY
34408: PUSH
34409: LD_INT 1
34411: ARRAY
34412: PPUSH
34413: CALL_OW 314
34417: NOT
34418: AND
34419: PUSH
34420: LD_EXP 80
34424: PUSH
34425: LD_VAR 0 2
34429: ARRAY
34430: PUSH
34431: LD_INT 1
34433: ARRAY
34434: PPUSH
34435: CALL_OW 310
34439: NOT
34440: AND
34441: IFFALSE 34467
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
34443: LD_EXP 80
34447: PUSH
34448: LD_VAR 0 2
34452: ARRAY
34453: PUSH
34454: LD_INT 1
34456: ARRAY
34457: PPUSH
34458: LD_VAR 0 3
34462: PPUSH
34463: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
34467: LD_EXP 80
34471: PUSH
34472: LD_VAR 0 2
34476: ARRAY
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PPUSH
34482: CALL_OW 310
34486: PUSH
34487: LD_EXP 80
34491: PUSH
34492: LD_VAR 0 2
34496: ARRAY
34497: PUSH
34498: LD_INT 1
34500: ARRAY
34501: PPUSH
34502: CALL_OW 310
34506: PPUSH
34507: CALL_OW 461
34511: PUSH
34512: LD_INT 3
34514: NONEQUAL
34515: AND
34516: IFFALSE 34537
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
34518: LD_EXP 80
34522: PUSH
34523: LD_VAR 0 2
34527: ARRAY
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
34537: LD_VAR 0 3
34541: PPUSH
34542: CALL_OW 461
34546: PUSH
34547: LD_INT 6
34549: EQUAL
34550: PUSH
34551: LD_VAR 0 6
34555: PUSH
34556: LD_INT 1
34558: GREATER
34559: AND
34560: IFFALSE 34712
// begin sci := [ ] ;
34562: LD_ADDR_VAR 0 8
34566: PUSH
34567: EMPTY
34568: ST_TO_ADDR
// for x in ( tmp diff j ) do
34569: LD_ADDR_VAR 0 7
34573: PUSH
34574: LD_VAR 0 6
34578: PUSH
34579: LD_VAR 0 3
34583: DIFF
34584: PUSH
34585: FOR_IN
34586: IFFALSE 34638
// begin if sci = 6 then
34588: LD_VAR 0 8
34592: PUSH
34593: LD_INT 6
34595: EQUAL
34596: IFFALSE 34600
// break ;
34598: GO 34638
// if BuildingStatus ( x ) = bs_idle then
34600: LD_VAR 0 7
34604: PPUSH
34605: CALL_OW 461
34609: PUSH
34610: LD_INT 2
34612: EQUAL
34613: IFFALSE 34636
// sci := sci ^ UnitsInside ( x ) ;
34615: LD_ADDR_VAR 0 8
34619: PUSH
34620: LD_VAR 0 8
34624: PUSH
34625: LD_VAR 0 7
34629: PPUSH
34630: CALL_OW 313
34634: ADD
34635: ST_TO_ADDR
// end ;
34636: GO 34585
34638: POP
34639: POP
// if not sci then
34640: LD_VAR 0 8
34644: NOT
34645: IFFALSE 34649
// continue ;
34647: GO 33694
// for x in sci do
34649: LD_ADDR_VAR 0 7
34653: PUSH
34654: LD_VAR 0 8
34658: PUSH
34659: FOR_IN
34660: IFFALSE 34710
// if IsInUnit ( x ) and not HasTask ( x ) then
34662: LD_VAR 0 7
34666: PPUSH
34667: CALL_OW 310
34671: PUSH
34672: LD_VAR 0 7
34676: PPUSH
34677: CALL_OW 314
34681: NOT
34682: AND
34683: IFFALSE 34708
// begin ComExitBuilding ( x ) ;
34685: LD_VAR 0 7
34689: PPUSH
34690: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
34694: LD_VAR 0 7
34698: PPUSH
34699: LD_VAR 0 3
34703: PPUSH
34704: CALL_OW 180
// end ;
34708: GO 34659
34710: POP
34711: POP
// end ; end ;
34712: GO 33694
34714: POP
34715: POP
// end ;
34716: GO 33648
34718: POP
34719: POP
// end ;
34720: LD_VAR 0 1
34724: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
// if not mc_bases then
34729: LD_EXP 50
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 34819
// for i = 1 to mc_bases do
34738: LD_ADDR_VAR 0 2
34742: PUSH
34743: DOUBLE
34744: LD_INT 1
34746: DEC
34747: ST_TO_ADDR
34748: LD_EXP 50
34752: PUSH
34753: FOR_TO
34754: IFFALSE 34817
// if mc_mines [ i ] and mc_miners [ i ] then
34756: LD_EXP 63
34760: PUSH
34761: LD_VAR 0 2
34765: ARRAY
34766: PUSH
34767: LD_EXP 64
34771: PUSH
34772: LD_VAR 0 2
34776: ARRAY
34777: AND
34778: IFFALSE 34815
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34780: LD_EXP 64
34784: PUSH
34785: LD_VAR 0 2
34789: ARRAY
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PPUSH
34795: CALL_OW 255
34799: PPUSH
34800: LD_EXP 63
34804: PUSH
34805: LD_VAR 0 2
34809: ARRAY
34810: PPUSH
34811: CALL 51767 0 2
34815: GO 34753
34817: POP
34818: POP
// end ;
34819: LD_VAR 0 1
34823: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34824: LD_INT 0
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
// if not mc_bases or not mc_parking then
34834: LD_EXP 50
34838: NOT
34839: PUSH
34840: LD_EXP 74
34844: NOT
34845: OR
34846: IFFALSE 34850
// exit ;
34848: GO 35549
// for i = 1 to mc_bases do
34850: LD_ADDR_VAR 0 2
34854: PUSH
34855: DOUBLE
34856: LD_INT 1
34858: DEC
34859: ST_TO_ADDR
34860: LD_EXP 50
34864: PUSH
34865: FOR_TO
34866: IFFALSE 35547
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34868: LD_EXP 50
34872: PUSH
34873: LD_VAR 0 2
34877: ARRAY
34878: NOT
34879: PUSH
34880: LD_EXP 74
34884: PUSH
34885: LD_VAR 0 2
34889: ARRAY
34890: NOT
34891: OR
34892: IFFALSE 34896
// continue ;
34894: GO 34865
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34896: LD_ADDR_VAR 0 5
34900: PUSH
34901: LD_EXP 50
34905: PUSH
34906: LD_VAR 0 2
34910: ARRAY
34911: PUSH
34912: LD_INT 1
34914: ARRAY
34915: PPUSH
34916: CALL_OW 255
34920: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34921: LD_ADDR_VAR 0 6
34925: PUSH
34926: LD_EXP 50
34930: PUSH
34931: LD_VAR 0 2
34935: ARRAY
34936: PPUSH
34937: LD_INT 30
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PPUSH
34947: CALL_OW 72
34951: ST_TO_ADDR
// if not fac then
34952: LD_VAR 0 6
34956: NOT
34957: IFFALSE 35008
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34959: LD_ADDR_VAR 0 6
34963: PUSH
34964: LD_EXP 50
34968: PUSH
34969: LD_VAR 0 2
34973: ARRAY
34974: PPUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 30
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 30
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: PPUSH
35003: CALL_OW 72
35007: ST_TO_ADDR
// if not fac then
35008: LD_VAR 0 6
35012: NOT
35013: IFFALSE 35017
// continue ;
35015: GO 34865
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
35017: LD_ADDR_VAR 0 7
35021: PUSH
35022: LD_EXP 74
35026: PUSH
35027: LD_VAR 0 2
35031: ARRAY
35032: PPUSH
35033: LD_INT 22
35035: PUSH
35036: LD_VAR 0 5
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 21
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 24
35060: PUSH
35061: LD_INT 1000
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: PPUSH
35077: CALL_OW 70
35081: ST_TO_ADDR
// for j in fac do
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_VAR 0 6
35091: PUSH
35092: FOR_IN
35093: IFFALSE 35174
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
35095: LD_ADDR_VAR 0 7
35099: PUSH
35100: LD_VAR 0 7
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_VAR 0 5
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 91
35119: PUSH
35120: LD_VAR 0 3
35124: PUSH
35125: LD_INT 15
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 21
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: LD_INT 24
35148: PUSH
35149: LD_INT 1000
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 69
35170: UNION
35171: ST_TO_ADDR
35172: GO 35092
35174: POP
35175: POP
// if not vehs then
35176: LD_VAR 0 7
35180: NOT
35181: IFFALSE 35207
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
35183: LD_ADDR_EXP 62
35187: PUSH
35188: LD_EXP 62
35192: PPUSH
35193: LD_VAR 0 2
35197: PPUSH
35198: EMPTY
35199: PPUSH
35200: CALL_OW 1
35204: ST_TO_ADDR
// continue ;
35205: GO 34865
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
35207: LD_ADDR_VAR 0 8
35211: PUSH
35212: LD_EXP 50
35216: PUSH
35217: LD_VAR 0 2
35221: ARRAY
35222: PPUSH
35223: LD_INT 30
35225: PUSH
35226: LD_INT 3
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PPUSH
35233: CALL_OW 72
35237: ST_TO_ADDR
// if tmp then
35238: LD_VAR 0 8
35242: IFFALSE 35345
// begin for j in tmp do
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_VAR 0 8
35253: PUSH
35254: FOR_IN
35255: IFFALSE 35343
// for k in UnitsInside ( j ) do
35257: LD_ADDR_VAR 0 4
35261: PUSH
35262: LD_VAR 0 3
35266: PPUSH
35267: CALL_OW 313
35271: PUSH
35272: FOR_IN
35273: IFFALSE 35339
// if k then
35275: LD_VAR 0 4
35279: IFFALSE 35337
// if not k in mc_repair_vehicle [ i ] then
35281: LD_VAR 0 4
35285: PUSH
35286: LD_EXP 62
35290: PUSH
35291: LD_VAR 0 2
35295: ARRAY
35296: IN
35297: NOT
35298: IFFALSE 35337
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
35300: LD_ADDR_EXP 62
35304: PUSH
35305: LD_EXP 62
35309: PPUSH
35310: LD_VAR 0 2
35314: PPUSH
35315: LD_EXP 62
35319: PUSH
35320: LD_VAR 0 2
35324: ARRAY
35325: PUSH
35326: LD_VAR 0 4
35330: UNION
35331: PPUSH
35332: CALL_OW 1
35336: ST_TO_ADDR
35337: GO 35272
35339: POP
35340: POP
35341: GO 35254
35343: POP
35344: POP
// end ; if not mc_repair_vehicle [ i ] then
35345: LD_EXP 62
35349: PUSH
35350: LD_VAR 0 2
35354: ARRAY
35355: NOT
35356: IFFALSE 35360
// continue ;
35358: GO 34865
// for j in mc_repair_vehicle [ i ] do
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_EXP 62
35369: PUSH
35370: LD_VAR 0 2
35374: ARRAY
35375: PUSH
35376: FOR_IN
35377: IFFALSE 35543
// begin if GetClass ( j ) <> 3 then
35379: LD_VAR 0 3
35383: PPUSH
35384: CALL_OW 257
35388: PUSH
35389: LD_INT 3
35391: NONEQUAL
35392: IFFALSE 35433
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
35394: LD_ADDR_EXP 62
35398: PUSH
35399: LD_EXP 62
35403: PPUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: LD_EXP 62
35413: PUSH
35414: LD_VAR 0 2
35418: ARRAY
35419: PUSH
35420: LD_VAR 0 3
35424: DIFF
35425: PPUSH
35426: CALL_OW 1
35430: ST_TO_ADDR
// continue ;
35431: GO 35376
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
35433: LD_VAR 0 3
35437: PPUSH
35438: CALL_OW 311
35442: NOT
35443: PUSH
35444: LD_VAR 0 3
35448: PUSH
35449: LD_EXP 53
35453: PUSH
35454: LD_VAR 0 2
35458: ARRAY
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: IN
35464: NOT
35465: AND
35466: PUSH
35467: LD_VAR 0 3
35471: PUSH
35472: LD_EXP 53
35476: PUSH
35477: LD_VAR 0 2
35481: ARRAY
35482: PUSH
35483: LD_INT 2
35485: ARRAY
35486: IN
35487: NOT
35488: AND
35489: IFFALSE 35541
// begin if IsInUnit ( j ) then
35491: LD_VAR 0 3
35495: PPUSH
35496: CALL_OW 310
35500: IFFALSE 35511
// ComExitBuilding ( j ) ;
35502: LD_VAR 0 3
35506: PPUSH
35507: CALL_OW 122
// if not HasTask ( j ) then
35511: LD_VAR 0 3
35515: PPUSH
35516: CALL_OW 314
35520: NOT
35521: IFFALSE 35541
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
35523: LD_VAR 0 3
35527: PPUSH
35528: LD_VAR 0 7
35532: PUSH
35533: LD_INT 1
35535: ARRAY
35536: PPUSH
35537: CALL_OW 189
// end ; end ;
35541: GO 35376
35543: POP
35544: POP
// end ;
35545: GO 34865
35547: POP
35548: POP
// end ;
35549: LD_VAR 0 1
35553: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
35554: LD_INT 0
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
// if not mc_bases then
35567: LD_EXP 50
35571: NOT
35572: IFFALSE 35576
// exit ;
35574: GO 36378
// for i = 1 to mc_bases do
35576: LD_ADDR_VAR 0 2
35580: PUSH
35581: DOUBLE
35582: LD_INT 1
35584: DEC
35585: ST_TO_ADDR
35586: LD_EXP 50
35590: PUSH
35591: FOR_TO
35592: IFFALSE 36376
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35594: LD_EXP 78
35598: PUSH
35599: LD_VAR 0 2
35603: ARRAY
35604: NOT
35605: PUSH
35606: LD_EXP 53
35610: PUSH
35611: LD_VAR 0 2
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: OR
35621: PUSH
35622: LD_EXP 53
35626: PUSH
35627: LD_VAR 0 2
35631: ARRAY
35632: PUSH
35633: LD_INT 2
35635: ARRAY
35636: OR
35637: PUSH
35638: LD_EXP 76
35642: PUSH
35643: LD_VAR 0 2
35647: ARRAY
35648: PPUSH
35649: LD_INT 1
35651: PPUSH
35652: CALL_OW 325
35656: NOT
35657: OR
35658: PUSH
35659: LD_EXP 73
35663: PUSH
35664: LD_VAR 0 2
35668: ARRAY
35669: OR
35670: IFFALSE 35674
// continue ;
35672: GO 35591
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35674: LD_ADDR_VAR 0 8
35678: PUSH
35679: LD_EXP 50
35683: PUSH
35684: LD_VAR 0 2
35688: ARRAY
35689: PPUSH
35690: LD_INT 25
35692: PUSH
35693: LD_INT 4
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 50
35702: PUSH
35703: EMPTY
35704: LIST
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: LD_INT 60
35711: PUSH
35712: EMPTY
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: PPUSH
35724: CALL_OW 72
35728: PUSH
35729: LD_EXP 54
35733: PUSH
35734: LD_VAR 0 2
35738: ARRAY
35739: DIFF
35740: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35741: LD_ADDR_VAR 0 9
35745: PUSH
35746: LD_EXP 50
35750: PUSH
35751: LD_VAR 0 2
35755: ARRAY
35756: PPUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 30
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: PPUSH
35785: CALL_OW 72
35789: ST_TO_ADDR
// if not tmp or not dep then
35790: LD_VAR 0 8
35794: NOT
35795: PUSH
35796: LD_VAR 0 9
35800: NOT
35801: OR
35802: IFFALSE 35806
// continue ;
35804: GO 35591
// side := GetSide ( tmp [ 1 ] ) ;
35806: LD_ADDR_VAR 0 11
35810: PUSH
35811: LD_VAR 0 8
35815: PUSH
35816: LD_INT 1
35818: ARRAY
35819: PPUSH
35820: CALL_OW 255
35824: ST_TO_ADDR
// dep := dep [ 1 ] ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_VAR 0 9
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35839: LD_ADDR_VAR 0 7
35843: PUSH
35844: LD_EXP 78
35848: PUSH
35849: LD_VAR 0 2
35853: ARRAY
35854: PPUSH
35855: LD_INT 22
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 25
35867: PUSH
35868: LD_INT 12
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PPUSH
35879: CALL_OW 70
35883: PUSH
35884: LD_INT 22
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 25
35896: PUSH
35897: LD_INT 12
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 91
35906: PUSH
35907: LD_VAR 0 9
35911: PUSH
35912: LD_INT 20
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PPUSH
35925: CALL_OW 69
35929: UNION
35930: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35931: LD_ADDR_VAR 0 10
35935: PUSH
35936: LD_EXP 78
35940: PUSH
35941: LD_VAR 0 2
35945: ARRAY
35946: PPUSH
35947: LD_INT 81
35949: PUSH
35950: LD_VAR 0 11
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PPUSH
35959: CALL_OW 70
35963: ST_TO_ADDR
// if not apes or danger_at_area then
35964: LD_VAR 0 7
35968: NOT
35969: PUSH
35970: LD_VAR 0 10
35974: OR
35975: IFFALSE 36025
// begin if mc_taming [ i ] then
35977: LD_EXP 81
35981: PUSH
35982: LD_VAR 0 2
35986: ARRAY
35987: IFFALSE 36023
// begin MC_Reset ( i , 121 ) ;
35989: LD_VAR 0 2
35993: PPUSH
35994: LD_INT 121
35996: PPUSH
35997: CALL 21460 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
36001: LD_ADDR_EXP 81
36005: PUSH
36006: LD_EXP 81
36010: PPUSH
36011: LD_VAR 0 2
36015: PPUSH
36016: EMPTY
36017: PPUSH
36018: CALL_OW 1
36022: ST_TO_ADDR
// end ; continue ;
36023: GO 35591
// end ; for j in tmp do
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_VAR 0 8
36034: PUSH
36035: FOR_IN
36036: IFFALSE 36372
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
36038: LD_VAR 0 3
36042: PUSH
36043: LD_EXP 81
36047: PUSH
36048: LD_VAR 0 2
36052: ARRAY
36053: IN
36054: NOT
36055: PUSH
36056: LD_EXP 81
36060: PUSH
36061: LD_VAR 0 2
36065: ARRAY
36066: PUSH
36067: LD_INT 3
36069: LESS
36070: AND
36071: IFFALSE 36129
// begin SetTag ( j , 121 ) ;
36073: LD_VAR 0 3
36077: PPUSH
36078: LD_INT 121
36080: PPUSH
36081: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
36085: LD_ADDR_EXP 81
36089: PUSH
36090: LD_EXP 81
36094: PPUSH
36095: LD_VAR 0 2
36099: PUSH
36100: LD_EXP 81
36104: PUSH
36105: LD_VAR 0 2
36109: ARRAY
36110: PUSH
36111: LD_INT 1
36113: PLUS
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PPUSH
36119: LD_VAR 0 3
36123: PPUSH
36124: CALL 54778 0 3
36128: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
36129: LD_VAR 0 3
36133: PUSH
36134: LD_EXP 81
36138: PUSH
36139: LD_VAR 0 2
36143: ARRAY
36144: IN
36145: IFFALSE 36370
// begin if GetClass ( j ) <> 4 then
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 257
36156: PUSH
36157: LD_INT 4
36159: NONEQUAL
36160: IFFALSE 36213
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
36162: LD_ADDR_EXP 81
36166: PUSH
36167: LD_EXP 81
36171: PPUSH
36172: LD_VAR 0 2
36176: PPUSH
36177: LD_EXP 81
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_VAR 0 3
36192: DIFF
36193: PPUSH
36194: CALL_OW 1
36198: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36199: LD_VAR 0 3
36203: PPUSH
36204: LD_INT 0
36206: PPUSH
36207: CALL_OW 109
// continue ;
36211: GO 36035
// end ; if IsInUnit ( j ) then
36213: LD_VAR 0 3
36217: PPUSH
36218: CALL_OW 310
36222: IFFALSE 36233
// ComExitBuilding ( j ) ;
36224: LD_VAR 0 3
36228: PPUSH
36229: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
36233: LD_ADDR_VAR 0 6
36237: PUSH
36238: LD_VAR 0 7
36242: PPUSH
36243: LD_VAR 0 3
36247: PPUSH
36248: CALL_OW 74
36252: ST_TO_ADDR
// if not ape then
36253: LD_VAR 0 6
36257: NOT
36258: IFFALSE 36262
// break ;
36260: GO 36372
// x := GetX ( ape ) ;
36262: LD_ADDR_VAR 0 4
36266: PUSH
36267: LD_VAR 0 6
36271: PPUSH
36272: CALL_OW 250
36276: ST_TO_ADDR
// y := GetY ( ape ) ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_VAR 0 6
36286: PPUSH
36287: CALL_OW 251
36291: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36292: LD_VAR 0 4
36296: PPUSH
36297: LD_VAR 0 5
36301: PPUSH
36302: CALL_OW 488
36306: NOT
36307: PUSH
36308: LD_VAR 0 11
36312: PPUSH
36313: LD_VAR 0 4
36317: PPUSH
36318: LD_VAR 0 5
36322: PPUSH
36323: LD_INT 20
36325: PPUSH
36326: CALL 55674 0 4
36330: PUSH
36331: LD_INT 4
36333: ARRAY
36334: OR
36335: IFFALSE 36339
// break ;
36337: GO 36372
// if not HasTask ( j ) then
36339: LD_VAR 0 3
36343: PPUSH
36344: CALL_OW 314
36348: NOT
36349: IFFALSE 36370
// ComTameXY ( j , x , y ) ;
36351: LD_VAR 0 3
36355: PPUSH
36356: LD_VAR 0 4
36360: PPUSH
36361: LD_VAR 0 5
36365: PPUSH
36366: CALL_OW 131
// end ; end ;
36370: GO 36035
36372: POP
36373: POP
// end ;
36374: GO 35591
36376: POP
36377: POP
// end ;
36378: LD_VAR 0 1
36382: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
// if not mc_bases then
36393: LD_EXP 50
36397: NOT
36398: IFFALSE 36402
// exit ;
36400: GO 37028
// for i = 1 to mc_bases do
36402: LD_ADDR_VAR 0 2
36406: PUSH
36407: DOUBLE
36408: LD_INT 1
36410: DEC
36411: ST_TO_ADDR
36412: LD_EXP 50
36416: PUSH
36417: FOR_TO
36418: IFFALSE 37026
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
36420: LD_EXP 79
36424: PUSH
36425: LD_VAR 0 2
36429: ARRAY
36430: NOT
36431: PUSH
36432: LD_EXP 79
36436: PUSH
36437: LD_VAR 0 2
36441: ARRAY
36442: PPUSH
36443: LD_INT 25
36445: PUSH
36446: LD_INT 12
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PPUSH
36453: CALL_OW 72
36457: NOT
36458: OR
36459: IFFALSE 36463
// continue ;
36461: GO 36417
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_EXP 79
36472: PUSH
36473: LD_VAR 0 2
36477: ARRAY
36478: PUSH
36479: LD_INT 1
36481: ARRAY
36482: PPUSH
36483: CALL_OW 255
36487: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
36488: LD_VAR 0 5
36492: PPUSH
36493: LD_INT 2
36495: PPUSH
36496: CALL_OW 325
36500: IFFALSE 36753
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36502: LD_ADDR_VAR 0 4
36506: PUSH
36507: LD_EXP 79
36511: PUSH
36512: LD_VAR 0 2
36516: ARRAY
36517: PPUSH
36518: LD_INT 25
36520: PUSH
36521: LD_INT 16
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PPUSH
36528: CALL_OW 72
36532: ST_TO_ADDR
// if tmp < 6 then
36533: LD_VAR 0 4
36537: PUSH
36538: LD_INT 6
36540: LESS
36541: IFFALSE 36753
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
36543: LD_ADDR_VAR 0 6
36547: PUSH
36548: LD_EXP 50
36552: PUSH
36553: LD_VAR 0 2
36557: ARRAY
36558: PPUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 30
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 30
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: PPUSH
36587: CALL_OW 72
36591: ST_TO_ADDR
// if depot then
36592: LD_VAR 0 6
36596: IFFALSE 36753
// begin selected := 0 ;
36598: LD_ADDR_VAR 0 7
36602: PUSH
36603: LD_INT 0
36605: ST_TO_ADDR
// for j in depot do
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_VAR 0 6
36615: PUSH
36616: FOR_IN
36617: IFFALSE 36648
// begin if UnitsInside ( j ) < 6 then
36619: LD_VAR 0 3
36623: PPUSH
36624: CALL_OW 313
36628: PUSH
36629: LD_INT 6
36631: LESS
36632: IFFALSE 36646
// begin selected := j ;
36634: LD_ADDR_VAR 0 7
36638: PUSH
36639: LD_VAR 0 3
36643: ST_TO_ADDR
// break ;
36644: GO 36648
// end ; end ;
36646: GO 36616
36648: POP
36649: POP
// if selected then
36650: LD_VAR 0 7
36654: IFFALSE 36753
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_EXP 79
36665: PUSH
36666: LD_VAR 0 2
36670: ARRAY
36671: PPUSH
36672: LD_INT 25
36674: PUSH
36675: LD_INT 12
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 72
36686: PUSH
36687: FOR_IN
36688: IFFALSE 36751
// if not HasTask ( j ) then
36690: LD_VAR 0 3
36694: PPUSH
36695: CALL_OW 314
36699: NOT
36700: IFFALSE 36749
// begin if not IsInUnit ( j ) then
36702: LD_VAR 0 3
36706: PPUSH
36707: CALL_OW 310
36711: NOT
36712: IFFALSE 36728
// ComEnterUnit ( j , selected ) ;
36714: LD_VAR 0 3
36718: PPUSH
36719: LD_VAR 0 7
36723: PPUSH
36724: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
36728: LD_VAR 0 3
36732: PPUSH
36733: LD_INT 16
36735: PPUSH
36736: CALL_OW 183
// AddComExitBuilding ( j ) ;
36740: LD_VAR 0 3
36744: PPUSH
36745: CALL_OW 182
// end ;
36749: GO 36687
36751: POP
36752: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36753: LD_VAR 0 5
36757: PPUSH
36758: LD_INT 11
36760: PPUSH
36761: CALL_OW 325
36765: IFFALSE 37024
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_EXP 79
36776: PUSH
36777: LD_VAR 0 2
36781: ARRAY
36782: PPUSH
36783: LD_INT 25
36785: PUSH
36786: LD_INT 16
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PPUSH
36793: CALL_OW 72
36797: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36798: LD_VAR 0 4
36802: PUSH
36803: LD_INT 6
36805: GREATEREQUAL
36806: PUSH
36807: LD_VAR 0 5
36811: PPUSH
36812: LD_INT 2
36814: PPUSH
36815: CALL_OW 325
36819: NOT
36820: OR
36821: IFFALSE 37024
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36823: LD_ADDR_VAR 0 8
36827: PUSH
36828: LD_EXP 50
36832: PUSH
36833: LD_VAR 0 2
36837: ARRAY
36838: PPUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 30
36844: PUSH
36845: LD_INT 4
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 30
36854: PUSH
36855: LD_INT 5
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: PPUSH
36867: CALL_OW 72
36871: ST_TO_ADDR
// if barracks then
36872: LD_VAR 0 8
36876: IFFALSE 37024
// begin selected := 0 ;
36878: LD_ADDR_VAR 0 7
36882: PUSH
36883: LD_INT 0
36885: ST_TO_ADDR
// for j in barracks do
36886: LD_ADDR_VAR 0 3
36890: PUSH
36891: LD_VAR 0 8
36895: PUSH
36896: FOR_IN
36897: IFFALSE 36928
// begin if UnitsInside ( j ) < 6 then
36899: LD_VAR 0 3
36903: PPUSH
36904: CALL_OW 313
36908: PUSH
36909: LD_INT 6
36911: LESS
36912: IFFALSE 36926
// begin selected := j ;
36914: LD_ADDR_VAR 0 7
36918: PUSH
36919: LD_VAR 0 3
36923: ST_TO_ADDR
// break ;
36924: GO 36928
// end ; end ;
36926: GO 36896
36928: POP
36929: POP
// if selected then
36930: LD_VAR 0 7
36934: IFFALSE 37024
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_EXP 79
36945: PUSH
36946: LD_VAR 0 2
36950: ARRAY
36951: PPUSH
36952: LD_INT 25
36954: PUSH
36955: LD_INT 12
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PPUSH
36962: CALL_OW 72
36966: PUSH
36967: FOR_IN
36968: IFFALSE 37022
// if not IsInUnit ( j ) and not HasTask ( j ) then
36970: LD_VAR 0 3
36974: PPUSH
36975: CALL_OW 310
36979: NOT
36980: PUSH
36981: LD_VAR 0 3
36985: PPUSH
36986: CALL_OW 314
36990: NOT
36991: AND
36992: IFFALSE 37020
// begin ComEnterUnit ( j , selected ) ;
36994: LD_VAR 0 3
36998: PPUSH
36999: LD_VAR 0 7
37003: PPUSH
37004: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
37008: LD_VAR 0 3
37012: PPUSH
37013: LD_INT 15
37015: PPUSH
37016: CALL_OW 183
// end ;
37020: GO 36967
37022: POP
37023: POP
// end ; end ; end ; end ; end ;
37024: GO 36417
37026: POP
37027: POP
// end ;
37028: LD_VAR 0 1
37032: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
// if not mc_bases then
37039: LD_EXP 50
37043: NOT
37044: IFFALSE 37048
// exit ;
37046: GO 37226
// for i = 1 to mc_bases do
37048: LD_ADDR_VAR 0 2
37052: PUSH
37053: DOUBLE
37054: LD_INT 1
37056: DEC
37057: ST_TO_ADDR
37058: LD_EXP 50
37062: PUSH
37063: FOR_TO
37064: IFFALSE 37224
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
37066: LD_ADDR_VAR 0 4
37070: PUSH
37071: LD_EXP 50
37075: PUSH
37076: LD_VAR 0 2
37080: ARRAY
37081: PPUSH
37082: LD_INT 25
37084: PUSH
37085: LD_INT 9
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PPUSH
37092: CALL_OW 72
37096: ST_TO_ADDR
// if not tmp then
37097: LD_VAR 0 4
37101: NOT
37102: IFFALSE 37106
// continue ;
37104: GO 37063
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
37106: LD_EXP 76
37110: PUSH
37111: LD_VAR 0 2
37115: ARRAY
37116: PPUSH
37117: LD_INT 29
37119: PPUSH
37120: CALL_OW 325
37124: NOT
37125: PUSH
37126: LD_EXP 76
37130: PUSH
37131: LD_VAR 0 2
37135: ARRAY
37136: PPUSH
37137: LD_INT 28
37139: PPUSH
37140: CALL_OW 325
37144: NOT
37145: AND
37146: IFFALSE 37150
// continue ;
37148: GO 37063
// for j in tmp do
37150: LD_ADDR_VAR 0 3
37154: PUSH
37155: LD_VAR 0 4
37159: PUSH
37160: FOR_IN
37161: IFFALSE 37220
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
37163: LD_VAR 0 3
37167: PUSH
37168: LD_EXP 53
37172: PUSH
37173: LD_VAR 0 2
37177: ARRAY
37178: PUSH
37179: LD_INT 1
37181: ARRAY
37182: IN
37183: NOT
37184: PUSH
37185: LD_VAR 0 3
37189: PUSH
37190: LD_EXP 53
37194: PUSH
37195: LD_VAR 0 2
37199: ARRAY
37200: PUSH
37201: LD_INT 2
37203: ARRAY
37204: IN
37205: NOT
37206: AND
37207: IFFALSE 37218
// ComSpaceTimeShoot ( j ) ;
37209: LD_VAR 0 3
37213: PPUSH
37214: CALL 48364 0 1
37218: GO 37160
37220: POP
37221: POP
// end ;
37222: GO 37063
37224: POP
37225: POP
// end ;
37226: LD_VAR 0 1
37230: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
37231: LD_INT 0
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
// if not mc_bases then
37242: LD_EXP 50
37246: NOT
37247: IFFALSE 37251
// exit ;
37249: GO 37873
// for i = 1 to mc_bases do
37251: LD_ADDR_VAR 0 2
37255: PUSH
37256: DOUBLE
37257: LD_INT 1
37259: DEC
37260: ST_TO_ADDR
37261: LD_EXP 50
37265: PUSH
37266: FOR_TO
37267: IFFALSE 37871
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
37269: LD_EXP 85
37273: PUSH
37274: LD_VAR 0 2
37278: ARRAY
37279: NOT
37280: PUSH
37281: LD_INT 38
37283: PPUSH
37284: LD_EXP 76
37288: PUSH
37289: LD_VAR 0 2
37293: ARRAY
37294: PPUSH
37295: CALL_OW 321
37299: PUSH
37300: LD_INT 2
37302: NONEQUAL
37303: OR
37304: IFFALSE 37308
// continue ;
37306: GO 37266
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
37308: LD_ADDR_VAR 0 8
37312: PUSH
37313: LD_EXP 50
37317: PUSH
37318: LD_VAR 0 2
37322: ARRAY
37323: PPUSH
37324: LD_INT 30
37326: PUSH
37327: LD_INT 34
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 72
37338: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
37339: LD_ADDR_VAR 0 9
37343: PUSH
37344: LD_EXP 50
37348: PUSH
37349: LD_VAR 0 2
37353: ARRAY
37354: PPUSH
37355: LD_INT 25
37357: PUSH
37358: LD_INT 4
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PPUSH
37365: CALL_OW 72
37369: PPUSH
37370: LD_INT 0
37372: PPUSH
37373: CALL 88048 0 2
37377: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
37378: LD_VAR 0 9
37382: NOT
37383: PUSH
37384: LD_VAR 0 8
37388: NOT
37389: OR
37390: PUSH
37391: LD_EXP 50
37395: PUSH
37396: LD_VAR 0 2
37400: ARRAY
37401: PPUSH
37402: LD_INT 124
37404: PPUSH
37405: CALL 88048 0 2
37409: OR
37410: IFFALSE 37414
// continue ;
37412: GO 37266
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
37414: LD_EXP 86
37418: PUSH
37419: LD_VAR 0 2
37423: ARRAY
37424: PUSH
37425: LD_EXP 85
37429: PUSH
37430: LD_VAR 0 2
37434: ARRAY
37435: LESS
37436: PUSH
37437: LD_EXP 86
37441: PUSH
37442: LD_VAR 0 2
37446: ARRAY
37447: PUSH
37448: LD_VAR 0 8
37452: LESS
37453: AND
37454: IFFALSE 37869
// begin tmp := sci [ 1 ] ;
37456: LD_ADDR_VAR 0 7
37460: PUSH
37461: LD_VAR 0 9
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
37470: LD_VAR 0 7
37474: PPUSH
37475: LD_INT 124
37477: PPUSH
37478: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
37482: LD_ADDR_VAR 0 3
37486: PUSH
37487: DOUBLE
37488: LD_EXP 85
37492: PUSH
37493: LD_VAR 0 2
37497: ARRAY
37498: INC
37499: ST_TO_ADDR
37500: LD_EXP 85
37504: PUSH
37505: LD_VAR 0 2
37509: ARRAY
37510: PUSH
37511: FOR_DOWNTO
37512: IFFALSE 37855
// begin if IsInUnit ( tmp ) then
37514: LD_VAR 0 7
37518: PPUSH
37519: CALL_OW 310
37523: IFFALSE 37534
// ComExitBuilding ( tmp ) ;
37525: LD_VAR 0 7
37529: PPUSH
37530: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
37534: LD_INT 35
37536: PPUSH
37537: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
37541: LD_VAR 0 7
37545: PPUSH
37546: CALL_OW 310
37550: NOT
37551: PUSH
37552: LD_VAR 0 7
37556: PPUSH
37557: CALL_OW 314
37561: NOT
37562: AND
37563: IFFALSE 37534
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
37565: LD_ADDR_VAR 0 6
37569: PUSH
37570: LD_VAR 0 7
37574: PPUSH
37575: CALL_OW 250
37579: PUSH
37580: LD_VAR 0 7
37584: PPUSH
37585: CALL_OW 251
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37594: LD_INT 35
37596: PPUSH
37597: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: LD_EXP 85
37610: PUSH
37611: LD_VAR 0 2
37615: ARRAY
37616: PUSH
37617: LD_VAR 0 3
37621: ARRAY
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37627: LD_ADDR_VAR 0 5
37631: PUSH
37632: LD_EXP 85
37636: PUSH
37637: LD_VAR 0 2
37641: ARRAY
37642: PUSH
37643: LD_VAR 0 3
37647: ARRAY
37648: PUSH
37649: LD_INT 2
37651: ARRAY
37652: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37653: LD_VAR 0 7
37657: PPUSH
37658: LD_INT 10
37660: PPUSH
37661: CALL 57371 0 2
37665: PUSH
37666: LD_INT 4
37668: ARRAY
37669: IFFALSE 37707
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37671: LD_VAR 0 7
37675: PPUSH
37676: LD_VAR 0 6
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: LD_VAR 0 6
37689: PUSH
37690: LD_INT 2
37692: ARRAY
37693: PPUSH
37694: CALL_OW 111
// wait ( 0 0$10 ) ;
37698: LD_INT 350
37700: PPUSH
37701: CALL_OW 67
// end else
37705: GO 37733
// begin ComMoveXY ( tmp , x , y ) ;
37707: LD_VAR 0 7
37711: PPUSH
37712: LD_VAR 0 4
37716: PPUSH
37717: LD_VAR 0 5
37721: PPUSH
37722: CALL_OW 111
// wait ( 0 0$3 ) ;
37726: LD_INT 105
37728: PPUSH
37729: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
37733: LD_VAR 0 7
37737: PPUSH
37738: LD_VAR 0 4
37742: PPUSH
37743: LD_VAR 0 5
37747: PPUSH
37748: CALL_OW 307
37752: IFFALSE 37594
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37754: LD_VAR 0 7
37758: PPUSH
37759: LD_VAR 0 4
37763: PPUSH
37764: LD_VAR 0 5
37768: PPUSH
37769: LD_VAR 0 8
37773: PUSH
37774: LD_VAR 0 3
37778: ARRAY
37779: PPUSH
37780: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
37784: LD_INT 35
37786: PPUSH
37787: CALL_OW 67
// until not HasTask ( tmp ) ;
37791: LD_VAR 0 7
37795: PPUSH
37796: CALL_OW 314
37800: NOT
37801: IFFALSE 37784
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37803: LD_ADDR_EXP 86
37807: PUSH
37808: LD_EXP 86
37812: PPUSH
37813: LD_VAR 0 2
37817: PUSH
37818: LD_EXP 86
37822: PUSH
37823: LD_VAR 0 2
37827: ARRAY
37828: PUSH
37829: LD_INT 1
37831: PLUS
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PPUSH
37837: LD_VAR 0 8
37841: PUSH
37842: LD_VAR 0 3
37846: ARRAY
37847: PPUSH
37848: CALL 54778 0 3
37852: ST_TO_ADDR
// end ;
37853: GO 37511
37855: POP
37856: POP
// MC_Reset ( i , 124 ) ;
37857: LD_VAR 0 2
37861: PPUSH
37862: LD_INT 124
37864: PPUSH
37865: CALL 21460 0 2
// end ; end ;
37869: GO 37266
37871: POP
37872: POP
// end ;
37873: LD_VAR 0 1
37877: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37878: LD_INT 0
37880: PPUSH
37881: PPUSH
37882: PPUSH
// if not mc_bases then
37883: LD_EXP 50
37887: NOT
37888: IFFALSE 37892
// exit ;
37890: GO 38498
// for i = 1 to mc_bases do
37892: LD_ADDR_VAR 0 2
37896: PUSH
37897: DOUBLE
37898: LD_INT 1
37900: DEC
37901: ST_TO_ADDR
37902: LD_EXP 50
37906: PUSH
37907: FOR_TO
37908: IFFALSE 38496
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37910: LD_ADDR_VAR 0 3
37914: PUSH
37915: LD_EXP 50
37919: PUSH
37920: LD_VAR 0 2
37924: ARRAY
37925: PPUSH
37926: LD_INT 25
37928: PUSH
37929: LD_INT 4
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PPUSH
37936: CALL_OW 72
37940: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37941: LD_VAR 0 3
37945: NOT
37946: PUSH
37947: LD_EXP 87
37951: PUSH
37952: LD_VAR 0 2
37956: ARRAY
37957: NOT
37958: OR
37959: PUSH
37960: LD_EXP 50
37964: PUSH
37965: LD_VAR 0 2
37969: ARRAY
37970: PPUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 30
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 30
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: PPUSH
37999: CALL_OW 72
38003: NOT
38004: OR
38005: IFFALSE 38055
// begin if mc_deposits_finder [ i ] then
38007: LD_EXP 88
38011: PUSH
38012: LD_VAR 0 2
38016: ARRAY
38017: IFFALSE 38053
// begin MC_Reset ( i , 125 ) ;
38019: LD_VAR 0 2
38023: PPUSH
38024: LD_INT 125
38026: PPUSH
38027: CALL 21460 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
38031: LD_ADDR_EXP 88
38035: PUSH
38036: LD_EXP 88
38040: PPUSH
38041: LD_VAR 0 2
38045: PPUSH
38046: EMPTY
38047: PPUSH
38048: CALL_OW 1
38052: ST_TO_ADDR
// end ; continue ;
38053: GO 37907
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
38055: LD_EXP 87
38059: PUSH
38060: LD_VAR 0 2
38064: ARRAY
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: PUSH
38070: LD_INT 3
38072: ARRAY
38073: PUSH
38074: LD_INT 1
38076: EQUAL
38077: PUSH
38078: LD_INT 20
38080: PPUSH
38081: LD_EXP 76
38085: PUSH
38086: LD_VAR 0 2
38090: ARRAY
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: NONEQUAL
38100: AND
38101: IFFALSE 38151
// begin if mc_deposits_finder [ i ] then
38103: LD_EXP 88
38107: PUSH
38108: LD_VAR 0 2
38112: ARRAY
38113: IFFALSE 38149
// begin MC_Reset ( i , 125 ) ;
38115: LD_VAR 0 2
38119: PPUSH
38120: LD_INT 125
38122: PPUSH
38123: CALL 21460 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
38127: LD_ADDR_EXP 88
38131: PUSH
38132: LD_EXP 88
38136: PPUSH
38137: LD_VAR 0 2
38141: PPUSH
38142: EMPTY
38143: PPUSH
38144: CALL_OW 1
38148: ST_TO_ADDR
// end ; continue ;
38149: GO 37907
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
38151: LD_EXP 87
38155: PUSH
38156: LD_VAR 0 2
38160: ARRAY
38161: PUSH
38162: LD_INT 1
38164: ARRAY
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: LD_EXP 87
38174: PUSH
38175: LD_VAR 0 2
38179: ARRAY
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PUSH
38185: LD_INT 2
38187: ARRAY
38188: PPUSH
38189: LD_EXP 76
38193: PUSH
38194: LD_VAR 0 2
38198: ARRAY
38199: PPUSH
38200: CALL_OW 440
38204: IFFALSE 38247
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
38206: LD_ADDR_EXP 87
38210: PUSH
38211: LD_EXP 87
38215: PPUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: LD_EXP 87
38225: PUSH
38226: LD_VAR 0 2
38230: ARRAY
38231: PPUSH
38232: LD_INT 1
38234: PPUSH
38235: CALL_OW 3
38239: PPUSH
38240: CALL_OW 1
38244: ST_TO_ADDR
38245: GO 38494
// begin if not mc_deposits_finder [ i ] then
38247: LD_EXP 88
38251: PUSH
38252: LD_VAR 0 2
38256: ARRAY
38257: NOT
38258: IFFALSE 38310
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
38260: LD_ADDR_EXP 88
38264: PUSH
38265: LD_EXP 88
38269: PPUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_VAR 0 3
38279: PUSH
38280: LD_INT 1
38282: ARRAY
38283: PUSH
38284: EMPTY
38285: LIST
38286: PPUSH
38287: CALL_OW 1
38291: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
38292: LD_VAR 0 3
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PPUSH
38301: LD_INT 125
38303: PPUSH
38304: CALL_OW 109
// end else
38308: GO 38494
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
38310: LD_EXP 88
38314: PUSH
38315: LD_VAR 0 2
38319: ARRAY
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PPUSH
38325: CALL_OW 310
38329: IFFALSE 38352
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
38331: LD_EXP 88
38335: PUSH
38336: LD_VAR 0 2
38340: ARRAY
38341: PUSH
38342: LD_INT 1
38344: ARRAY
38345: PPUSH
38346: CALL_OW 122
38350: GO 38494
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
38352: LD_EXP 88
38356: PUSH
38357: LD_VAR 0 2
38361: ARRAY
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: CALL_OW 314
38371: NOT
38372: PUSH
38373: LD_EXP 88
38377: PUSH
38378: LD_VAR 0 2
38382: ARRAY
38383: PUSH
38384: LD_INT 1
38386: ARRAY
38387: PPUSH
38388: LD_EXP 87
38392: PUSH
38393: LD_VAR 0 2
38397: ARRAY
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: LD_EXP 87
38411: PUSH
38412: LD_VAR 0 2
38416: ARRAY
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PUSH
38422: LD_INT 2
38424: ARRAY
38425: PPUSH
38426: CALL_OW 297
38430: PUSH
38431: LD_INT 6
38433: GREATER
38434: AND
38435: IFFALSE 38494
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
38437: LD_EXP 88
38441: PUSH
38442: LD_VAR 0 2
38446: ARRAY
38447: PUSH
38448: LD_INT 1
38450: ARRAY
38451: PPUSH
38452: LD_EXP 87
38456: PUSH
38457: LD_VAR 0 2
38461: ARRAY
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: LD_EXP 87
38475: PUSH
38476: LD_VAR 0 2
38480: ARRAY
38481: PUSH
38482: LD_INT 1
38484: ARRAY
38485: PUSH
38486: LD_INT 2
38488: ARRAY
38489: PPUSH
38490: CALL_OW 111
// end ; end ; end ;
38494: GO 37907
38496: POP
38497: POP
// end ;
38498: LD_VAR 0 1
38502: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
38503: LD_INT 0
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
// if not mc_bases then
38516: LD_EXP 50
38520: NOT
38521: IFFALSE 38525
// exit ;
38523: GO 39465
// for i = 1 to mc_bases do
38525: LD_ADDR_VAR 0 2
38529: PUSH
38530: DOUBLE
38531: LD_INT 1
38533: DEC
38534: ST_TO_ADDR
38535: LD_EXP 50
38539: PUSH
38540: FOR_TO
38541: IFFALSE 39463
// begin if not mc_bases [ i ] or mc_scan [ i ] then
38543: LD_EXP 50
38547: PUSH
38548: LD_VAR 0 2
38552: ARRAY
38553: NOT
38554: PUSH
38555: LD_EXP 73
38559: PUSH
38560: LD_VAR 0 2
38564: ARRAY
38565: OR
38566: IFFALSE 38570
// continue ;
38568: GO 38540
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
38570: LD_ADDR_VAR 0 7
38574: PUSH
38575: LD_EXP 50
38579: PUSH
38580: LD_VAR 0 2
38584: ARRAY
38585: PUSH
38586: LD_INT 1
38588: ARRAY
38589: PPUSH
38590: CALL_OW 248
38594: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38595: LD_VAR 0 7
38599: PUSH
38600: LD_INT 3
38602: EQUAL
38603: PUSH
38604: LD_EXP 69
38608: PUSH
38609: LD_VAR 0 2
38613: ARRAY
38614: PUSH
38615: LD_EXP 72
38619: PUSH
38620: LD_VAR 0 2
38624: ARRAY
38625: UNION
38626: PPUSH
38627: LD_INT 33
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL_OW 72
38641: NOT
38642: OR
38643: IFFALSE 38647
// continue ;
38645: GO 38540
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_EXP 50
38656: PUSH
38657: LD_VAR 0 2
38661: ARRAY
38662: PPUSH
38663: LD_INT 30
38665: PUSH
38666: LD_INT 36
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PPUSH
38673: CALL_OW 72
38677: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38678: LD_ADDR_VAR 0 10
38682: PUSH
38683: LD_EXP 69
38687: PUSH
38688: LD_VAR 0 2
38692: ARRAY
38693: PPUSH
38694: LD_INT 34
38696: PUSH
38697: LD_INT 31
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PPUSH
38704: CALL_OW 72
38708: ST_TO_ADDR
// if not cts and not mcts then
38709: LD_VAR 0 9
38713: NOT
38714: PUSH
38715: LD_VAR 0 10
38719: NOT
38720: AND
38721: IFFALSE 38725
// continue ;
38723: GO 38540
// x := cts ;
38725: LD_ADDR_VAR 0 11
38729: PUSH
38730: LD_VAR 0 9
38734: ST_TO_ADDR
// if not x then
38735: LD_VAR 0 11
38739: NOT
38740: IFFALSE 38752
// x := mcts ;
38742: LD_ADDR_VAR 0 11
38746: PUSH
38747: LD_VAR 0 10
38751: ST_TO_ADDR
// if not x then
38752: LD_VAR 0 11
38756: NOT
38757: IFFALSE 38761
// continue ;
38759: GO 38540
// if mc_remote_driver [ i ] then
38761: LD_EXP 90
38765: PUSH
38766: LD_VAR 0 2
38770: ARRAY
38771: IFFALSE 39158
// for j in mc_remote_driver [ i ] do
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_EXP 90
38782: PUSH
38783: LD_VAR 0 2
38787: ARRAY
38788: PUSH
38789: FOR_IN
38790: IFFALSE 39156
// begin if GetClass ( j ) <> 3 then
38792: LD_VAR 0 3
38796: PPUSH
38797: CALL_OW 257
38801: PUSH
38802: LD_INT 3
38804: NONEQUAL
38805: IFFALSE 38858
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38807: LD_ADDR_EXP 90
38811: PUSH
38812: LD_EXP 90
38816: PPUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_EXP 90
38826: PUSH
38827: LD_VAR 0 2
38831: ARRAY
38832: PUSH
38833: LD_VAR 0 3
38837: DIFF
38838: PPUSH
38839: CALL_OW 1
38843: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38844: LD_VAR 0 3
38848: PPUSH
38849: LD_INT 0
38851: PPUSH
38852: CALL_OW 109
// continue ;
38856: GO 38789
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
38858: LD_EXP 69
38862: PUSH
38863: LD_VAR 0 2
38867: ARRAY
38868: PPUSH
38869: LD_INT 34
38871: PUSH
38872: LD_INT 31
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 58
38881: PUSH
38882: EMPTY
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PPUSH
38889: CALL_OW 72
38893: PUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: CALL 88136 0 1
38903: NOT
38904: AND
38905: IFFALSE 38976
// begin if IsInUnit ( j ) then
38907: LD_VAR 0 3
38911: PPUSH
38912: CALL_OW 310
38916: IFFALSE 38927
// ComExitBuilding ( j ) ;
38918: LD_VAR 0 3
38922: PPUSH
38923: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
38927: LD_VAR 0 3
38931: PPUSH
38932: LD_EXP 69
38936: PUSH
38937: LD_VAR 0 2
38941: ARRAY
38942: PPUSH
38943: LD_INT 34
38945: PUSH
38946: LD_INT 31
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 58
38955: PUSH
38956: EMPTY
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PPUSH
38963: CALL_OW 72
38967: PUSH
38968: LD_INT 1
38970: ARRAY
38971: PPUSH
38972: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38976: LD_VAR 0 3
38980: PPUSH
38981: CALL_OW 310
38985: NOT
38986: PUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: CALL_OW 310
38996: PPUSH
38997: CALL_OW 266
39001: PUSH
39002: LD_INT 36
39004: NONEQUAL
39005: PUSH
39006: LD_VAR 0 3
39010: PPUSH
39011: CALL 88136 0 1
39015: NOT
39016: AND
39017: OR
39018: IFFALSE 39154
// begin if IsInUnit ( j ) then
39020: LD_VAR 0 3
39024: PPUSH
39025: CALL_OW 310
39029: IFFALSE 39040
// ComExitBuilding ( j ) ;
39031: LD_VAR 0 3
39035: PPUSH
39036: CALL_OW 122
// ct := 0 ;
39040: LD_ADDR_VAR 0 8
39044: PUSH
39045: LD_INT 0
39047: ST_TO_ADDR
// for k in x do
39048: LD_ADDR_VAR 0 4
39052: PUSH
39053: LD_VAR 0 11
39057: PUSH
39058: FOR_IN
39059: IFFALSE 39132
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
39061: LD_VAR 0 4
39065: PPUSH
39066: CALL_OW 264
39070: PUSH
39071: LD_INT 31
39073: EQUAL
39074: PUSH
39075: LD_VAR 0 4
39079: PPUSH
39080: CALL_OW 311
39084: NOT
39085: AND
39086: PUSH
39087: LD_VAR 0 4
39091: PPUSH
39092: CALL_OW 266
39096: PUSH
39097: LD_INT 36
39099: EQUAL
39100: PUSH
39101: LD_VAR 0 4
39105: PPUSH
39106: CALL_OW 313
39110: PUSH
39111: LD_INT 3
39113: LESS
39114: AND
39115: OR
39116: IFFALSE 39130
// begin ct := k ;
39118: LD_ADDR_VAR 0 8
39122: PUSH
39123: LD_VAR 0 4
39127: ST_TO_ADDR
// break ;
39128: GO 39132
// end ;
39130: GO 39058
39132: POP
39133: POP
// if ct then
39134: LD_VAR 0 8
39138: IFFALSE 39154
// ComEnterUnit ( j , ct ) ;
39140: LD_VAR 0 3
39144: PPUSH
39145: LD_VAR 0 8
39149: PPUSH
39150: CALL_OW 120
// end ; end ;
39154: GO 38789
39156: POP
39157: POP
// places := 0 ;
39158: LD_ADDR_VAR 0 5
39162: PUSH
39163: LD_INT 0
39165: ST_TO_ADDR
// for j = 1 to x do
39166: LD_ADDR_VAR 0 3
39170: PUSH
39171: DOUBLE
39172: LD_INT 1
39174: DEC
39175: ST_TO_ADDR
39176: LD_VAR 0 11
39180: PUSH
39181: FOR_TO
39182: IFFALSE 39258
// if GetWeapon ( x [ j ] ) = ar_control_tower then
39184: LD_VAR 0 11
39188: PUSH
39189: LD_VAR 0 3
39193: ARRAY
39194: PPUSH
39195: CALL_OW 264
39199: PUSH
39200: LD_INT 31
39202: EQUAL
39203: IFFALSE 39221
// places := places + 1 else
39205: LD_ADDR_VAR 0 5
39209: PUSH
39210: LD_VAR 0 5
39214: PUSH
39215: LD_INT 1
39217: PLUS
39218: ST_TO_ADDR
39219: GO 39256
// if GetBType ( x [ j ] ) = b_control_tower then
39221: LD_VAR 0 11
39225: PUSH
39226: LD_VAR 0 3
39230: ARRAY
39231: PPUSH
39232: CALL_OW 266
39236: PUSH
39237: LD_INT 36
39239: EQUAL
39240: IFFALSE 39256
// places := places + 3 ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 5
39251: PUSH
39252: LD_INT 3
39254: PLUS
39255: ST_TO_ADDR
39256: GO 39181
39258: POP
39259: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
39260: LD_VAR 0 5
39264: PUSH
39265: LD_INT 0
39267: EQUAL
39268: PUSH
39269: LD_VAR 0 5
39273: PUSH
39274: LD_EXP 90
39278: PUSH
39279: LD_VAR 0 2
39283: ARRAY
39284: LESSEQUAL
39285: OR
39286: IFFALSE 39290
// continue ;
39288: GO 38540
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
39290: LD_ADDR_VAR 0 6
39294: PUSH
39295: LD_EXP 50
39299: PUSH
39300: LD_VAR 0 2
39304: ARRAY
39305: PPUSH
39306: LD_INT 25
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 72
39320: PUSH
39321: LD_EXP 90
39325: PUSH
39326: LD_VAR 0 2
39330: ARRAY
39331: DIFF
39332: PPUSH
39333: LD_INT 3
39335: PPUSH
39336: CALL 89036 0 2
39340: ST_TO_ADDR
// for j in tmp do
39341: LD_ADDR_VAR 0 3
39345: PUSH
39346: LD_VAR 0 6
39350: PUSH
39351: FOR_IN
39352: IFFALSE 39387
// if GetTag ( j ) > 0 then
39354: LD_VAR 0 3
39358: PPUSH
39359: CALL_OW 110
39363: PUSH
39364: LD_INT 0
39366: GREATER
39367: IFFALSE 39385
// tmp := tmp diff j ;
39369: LD_ADDR_VAR 0 6
39373: PUSH
39374: LD_VAR 0 6
39378: PUSH
39379: LD_VAR 0 3
39383: DIFF
39384: ST_TO_ADDR
39385: GO 39351
39387: POP
39388: POP
// if not tmp then
39389: LD_VAR 0 6
39393: NOT
39394: IFFALSE 39398
// continue ;
39396: GO 38540
// if places then
39398: LD_VAR 0 5
39402: IFFALSE 39461
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
39404: LD_ADDR_EXP 90
39408: PUSH
39409: LD_EXP 90
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_EXP 90
39423: PUSH
39424: LD_VAR 0 2
39428: ARRAY
39429: PUSH
39430: LD_VAR 0 6
39434: PUSH
39435: LD_INT 1
39437: ARRAY
39438: UNION
39439: PPUSH
39440: CALL_OW 1
39444: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
39445: LD_VAR 0 6
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: LD_INT 126
39456: PPUSH
39457: CALL_OW 109
// end ; end ;
39461: GO 38540
39463: POP
39464: POP
// end ;
39465: LD_VAR 0 1
39469: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
39470: LD_INT 0
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
39478: LD_VAR 0 1
39482: NOT
39483: PUSH
39484: LD_VAR 0 2
39488: NOT
39489: OR
39490: PUSH
39491: LD_VAR 0 3
39495: NOT
39496: OR
39497: PUSH
39498: LD_VAR 0 4
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 5
39517: PUSH
39518: LD_INT 8
39520: PUSH
39521: LD_INT 9
39523: PUSH
39524: LD_INT 15
39526: PUSH
39527: LD_INT 16
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: IN
39541: NOT
39542: OR
39543: IFFALSE 39547
// exit ;
39545: GO 40447
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
39547: LD_ADDR_VAR 0 2
39551: PUSH
39552: LD_VAR 0 2
39556: PPUSH
39557: LD_INT 21
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 24
39569: PUSH
39570: LD_INT 250
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PPUSH
39581: CALL_OW 72
39585: ST_TO_ADDR
// case class of 1 , 15 :
39586: LD_VAR 0 4
39590: PUSH
39591: LD_INT 1
39593: DOUBLE
39594: EQUAL
39595: IFTRUE 39605
39597: LD_INT 15
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39690
39605: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
39606: LD_ADDR_VAR 0 8
39610: PUSH
39611: LD_VAR 0 2
39615: PPUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 30
39621: PUSH
39622: LD_INT 32
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 30
39631: PUSH
39632: LD_INT 31
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: PPUSH
39644: CALL_OW 72
39648: PUSH
39649: LD_VAR 0 2
39653: PPUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 30
39659: PUSH
39660: LD_INT 4
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 30
39669: PUSH
39670: LD_INT 5
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 72
39686: ADD
39687: ST_TO_ADDR
39688: GO 39936
39690: LD_INT 2
39692: DOUBLE
39693: EQUAL
39694: IFTRUE 39704
39696: LD_INT 16
39698: DOUBLE
39699: EQUAL
39700: IFTRUE 39704
39702: GO 39750
39704: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
39705: LD_ADDR_VAR 0 8
39709: PUSH
39710: LD_VAR 0 2
39714: PPUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 30
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 72
39747: ST_TO_ADDR
39748: GO 39936
39750: LD_INT 3
39752: DOUBLE
39753: EQUAL
39754: IFTRUE 39758
39756: GO 39804
39758: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
39759: LD_ADDR_VAR 0 8
39763: PUSH
39764: LD_VAR 0 2
39768: PPUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 30
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: PPUSH
39797: CALL_OW 72
39801: ST_TO_ADDR
39802: GO 39936
39804: LD_INT 4
39806: DOUBLE
39807: EQUAL
39808: IFTRUE 39812
39810: GO 39869
39812: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39813: LD_ADDR_VAR 0 8
39817: PUSH
39818: LD_VAR 0 2
39822: PPUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 30
39828: PUSH
39829: LD_INT 6
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 30
39838: PUSH
39839: LD_INT 7
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 30
39848: PUSH
39849: LD_INT 8
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: PPUSH
39862: CALL_OW 72
39866: ST_TO_ADDR
39867: GO 39936
39869: LD_INT 5
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39889
39875: LD_INT 8
39877: DOUBLE
39878: EQUAL
39879: IFTRUE 39889
39881: LD_INT 9
39883: DOUBLE
39884: EQUAL
39885: IFTRUE 39889
39887: GO 39935
39889: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39890: LD_ADDR_VAR 0 8
39894: PUSH
39895: LD_VAR 0 2
39899: PPUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 30
39905: PUSH
39906: LD_INT 4
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 30
39915: PUSH
39916: LD_INT 5
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: PPUSH
39928: CALL_OW 72
39932: ST_TO_ADDR
39933: GO 39936
39935: POP
// if not tmp then
39936: LD_VAR 0 8
39940: NOT
39941: IFFALSE 39945
// exit ;
39943: GO 40447
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39945: LD_VAR 0 4
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 15
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: IN
39960: PUSH
39961: LD_EXP 59
39965: PUSH
39966: LD_VAR 0 1
39970: ARRAY
39971: AND
39972: IFFALSE 40128
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_EXP 59
39983: PUSH
39984: LD_VAR 0 1
39988: ARRAY
39989: PUSH
39990: LD_INT 1
39992: ARRAY
39993: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39994: LD_VAR 0 9
39998: PUSH
39999: LD_EXP 60
40003: PUSH
40004: LD_VAR 0 1
40008: ARRAY
40009: IN
40010: NOT
40011: IFFALSE 40126
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
40013: LD_ADDR_EXP 60
40017: PUSH
40018: LD_EXP 60
40022: PPUSH
40023: LD_VAR 0 1
40027: PUSH
40028: LD_EXP 60
40032: PUSH
40033: LD_VAR 0 1
40037: ARRAY
40038: PUSH
40039: LD_INT 1
40041: PLUS
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PPUSH
40047: LD_VAR 0 9
40051: PPUSH
40052: CALL 54778 0 3
40056: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
40057: LD_ADDR_EXP 59
40061: PUSH
40062: LD_EXP 59
40066: PPUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: LD_EXP 59
40076: PUSH
40077: LD_VAR 0 1
40081: ARRAY
40082: PUSH
40083: LD_VAR 0 9
40087: DIFF
40088: PPUSH
40089: CALL_OW 1
40093: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
40094: LD_VAR 0 3
40098: PPUSH
40099: LD_EXP 60
40103: PUSH
40104: LD_VAR 0 1
40108: ARRAY
40109: PUSH
40110: LD_EXP 60
40114: PUSH
40115: LD_VAR 0 1
40119: ARRAY
40120: ARRAY
40121: PPUSH
40122: CALL_OW 120
// end ; exit ;
40126: GO 40447
// end ; if tmp > 1 then
40128: LD_VAR 0 8
40132: PUSH
40133: LD_INT 1
40135: GREATER
40136: IFFALSE 40240
// for i = 2 to tmp do
40138: LD_ADDR_VAR 0 6
40142: PUSH
40143: DOUBLE
40144: LD_INT 2
40146: DEC
40147: ST_TO_ADDR
40148: LD_VAR 0 8
40152: PUSH
40153: FOR_TO
40154: IFFALSE 40238
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
40156: LD_VAR 0 8
40160: PUSH
40161: LD_VAR 0 6
40165: ARRAY
40166: PPUSH
40167: CALL_OW 461
40171: PUSH
40172: LD_INT 6
40174: EQUAL
40175: IFFALSE 40236
// begin x := tmp [ i ] ;
40177: LD_ADDR_VAR 0 9
40181: PUSH
40182: LD_VAR 0 8
40186: PUSH
40187: LD_VAR 0 6
40191: ARRAY
40192: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
40193: LD_ADDR_VAR 0 8
40197: PUSH
40198: LD_VAR 0 8
40202: PPUSH
40203: LD_VAR 0 6
40207: PPUSH
40208: CALL_OW 3
40212: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
40213: LD_ADDR_VAR 0 8
40217: PUSH
40218: LD_VAR 0 8
40222: PPUSH
40223: LD_INT 1
40225: PPUSH
40226: LD_VAR 0 9
40230: PPUSH
40231: CALL_OW 2
40235: ST_TO_ADDR
// end ;
40236: GO 40153
40238: POP
40239: POP
// for i in tmp do
40240: LD_ADDR_VAR 0 6
40244: PUSH
40245: LD_VAR 0 8
40249: PUSH
40250: FOR_IN
40251: IFFALSE 40320
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
40253: LD_VAR 0 6
40257: PPUSH
40258: CALL_OW 313
40262: PUSH
40263: LD_INT 6
40265: LESS
40266: PUSH
40267: LD_VAR 0 6
40271: PPUSH
40272: CALL_OW 266
40276: PUSH
40277: LD_INT 31
40279: PUSH
40280: LD_INT 32
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: IN
40287: NOT
40288: AND
40289: PUSH
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 313
40299: PUSH
40300: LD_INT 0
40302: EQUAL
40303: OR
40304: IFFALSE 40318
// begin j := i ;
40306: LD_ADDR_VAR 0 7
40310: PUSH
40311: LD_VAR 0 6
40315: ST_TO_ADDR
// break ;
40316: GO 40320
// end ; end ;
40318: GO 40250
40320: POP
40321: POP
// if j then
40322: LD_VAR 0 7
40326: IFFALSE 40344
// ComEnterUnit ( unit , j ) else
40328: LD_VAR 0 3
40332: PPUSH
40333: LD_VAR 0 7
40337: PPUSH
40338: CALL_OW 120
40342: GO 40447
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40344: LD_ADDR_VAR 0 10
40348: PUSH
40349: LD_VAR 0 2
40353: PPUSH
40354: LD_INT 2
40356: PUSH
40357: LD_INT 30
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 30
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: PPUSH
40382: CALL_OW 72
40386: ST_TO_ADDR
// if depot then
40387: LD_VAR 0 10
40391: IFFALSE 40447
// begin depot := NearestUnitToUnit ( depot , unit ) ;
40393: LD_ADDR_VAR 0 10
40397: PUSH
40398: LD_VAR 0 10
40402: PPUSH
40403: LD_VAR 0 3
40407: PPUSH
40408: CALL_OW 74
40412: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
40413: LD_VAR 0 3
40417: PPUSH
40418: LD_VAR 0 10
40422: PPUSH
40423: CALL_OW 296
40427: PUSH
40428: LD_INT 10
40430: GREATER
40431: IFFALSE 40447
// ComStandNearbyBuilding ( unit , depot ) ;
40433: LD_VAR 0 3
40437: PPUSH
40438: LD_VAR 0 10
40442: PPUSH
40443: CALL 48981 0 2
// end ; end ; end ;
40447: LD_VAR 0 5
40451: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
40452: LD_INT 0
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
// if not mc_bases then
40458: LD_EXP 50
40462: NOT
40463: IFFALSE 40467
// exit ;
40465: GO 40706
// for i = 1 to mc_bases do
40467: LD_ADDR_VAR 0 2
40471: PUSH
40472: DOUBLE
40473: LD_INT 1
40475: DEC
40476: ST_TO_ADDR
40477: LD_EXP 50
40481: PUSH
40482: FOR_TO
40483: IFFALSE 40704
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
40485: LD_ADDR_VAR 0 4
40489: PUSH
40490: LD_EXP 50
40494: PUSH
40495: LD_VAR 0 2
40499: ARRAY
40500: PPUSH
40501: LD_INT 21
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PPUSH
40511: CALL_OW 72
40515: PUSH
40516: LD_EXP 79
40520: PUSH
40521: LD_VAR 0 2
40525: ARRAY
40526: UNION
40527: ST_TO_ADDR
// if not tmp then
40528: LD_VAR 0 4
40532: NOT
40533: IFFALSE 40537
// continue ;
40535: GO 40482
// for j in tmp do
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_VAR 0 4
40546: PUSH
40547: FOR_IN
40548: IFFALSE 40700
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
40550: LD_VAR 0 3
40554: PPUSH
40555: CALL_OW 110
40559: NOT
40560: PUSH
40561: LD_VAR 0 3
40565: PPUSH
40566: CALL_OW 314
40570: NOT
40571: AND
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: CALL_OW 311
40582: NOT
40583: AND
40584: PUSH
40585: LD_VAR 0 3
40589: PPUSH
40590: CALL_OW 310
40594: NOT
40595: AND
40596: PUSH
40597: LD_VAR 0 3
40601: PUSH
40602: LD_EXP 53
40606: PUSH
40607: LD_VAR 0 2
40611: ARRAY
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: IN
40617: NOT
40618: AND
40619: PUSH
40620: LD_VAR 0 3
40624: PUSH
40625: LD_EXP 53
40629: PUSH
40630: LD_VAR 0 2
40634: ARRAY
40635: PUSH
40636: LD_INT 2
40638: ARRAY
40639: IN
40640: NOT
40641: AND
40642: PUSH
40643: LD_VAR 0 3
40647: PUSH
40648: LD_EXP 62
40652: PUSH
40653: LD_VAR 0 2
40657: ARRAY
40658: IN
40659: NOT
40660: AND
40661: IFFALSE 40698
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
40663: LD_VAR 0 2
40667: PPUSH
40668: LD_EXP 50
40672: PUSH
40673: LD_VAR 0 2
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: LD_VAR 0 3
40688: PPUSH
40689: CALL_OW 257
40693: PPUSH
40694: CALL 39470 0 4
// end ;
40698: GO 40547
40700: POP
40701: POP
// end ;
40702: GO 40482
40704: POP
40705: POP
// end ;
40706: LD_VAR 0 1
40710: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
// if not mc_bases [ base ] then
40719: LD_EXP 50
40723: PUSH
40724: LD_VAR 0 1
40728: ARRAY
40729: NOT
40730: IFFALSE 40734
// exit ;
40732: GO 40916
// tmp := [ ] ;
40734: LD_ADDR_VAR 0 6
40738: PUSH
40739: EMPTY
40740: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 3
40750: PPUSH
40751: LD_INT 0
40753: PPUSH
40754: CALL_OW 517
40758: ST_TO_ADDR
// if not list then
40759: LD_VAR 0 7
40763: NOT
40764: IFFALSE 40768
// exit ;
40766: GO 40916
// for i = 1 to amount do
40768: LD_ADDR_VAR 0 5
40772: PUSH
40773: DOUBLE
40774: LD_INT 1
40776: DEC
40777: ST_TO_ADDR
40778: LD_VAR 0 2
40782: PUSH
40783: FOR_TO
40784: IFFALSE 40864
// begin x := rand ( 1 , list [ 1 ] ) ;
40786: LD_ADDR_VAR 0 8
40790: PUSH
40791: LD_INT 1
40793: PPUSH
40794: LD_VAR 0 7
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PPUSH
40803: CALL_OW 12
40807: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40808: LD_ADDR_VAR 0 6
40812: PUSH
40813: LD_VAR 0 6
40817: PPUSH
40818: LD_VAR 0 5
40822: PPUSH
40823: LD_VAR 0 7
40827: PUSH
40828: LD_INT 1
40830: ARRAY
40831: PUSH
40832: LD_VAR 0 8
40836: ARRAY
40837: PUSH
40838: LD_VAR 0 7
40842: PUSH
40843: LD_INT 2
40845: ARRAY
40846: PUSH
40847: LD_VAR 0 8
40851: ARRAY
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PPUSH
40857: CALL_OW 1
40861: ST_TO_ADDR
// end ;
40862: GO 40783
40864: POP
40865: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40866: LD_ADDR_EXP 63
40870: PUSH
40871: LD_EXP 63
40875: PPUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: LD_VAR 0 6
40885: PPUSH
40886: CALL_OW 1
40890: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40891: LD_ADDR_EXP 65
40895: PUSH
40896: LD_EXP 65
40900: PPUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: LD_VAR 0 3
40910: PPUSH
40911: CALL_OW 1
40915: ST_TO_ADDR
// end ;
40916: LD_VAR 0 4
40920: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40921: LD_INT 0
40923: PPUSH
// if not mc_bases [ base ] then
40924: LD_EXP 50
40928: PUSH
40929: LD_VAR 0 1
40933: ARRAY
40934: NOT
40935: IFFALSE 40939
// exit ;
40937: GO 40964
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40939: LD_ADDR_EXP 55
40943: PUSH
40944: LD_EXP 55
40948: PPUSH
40949: LD_VAR 0 1
40953: PPUSH
40954: LD_VAR 0 2
40958: PPUSH
40959: CALL_OW 1
40963: ST_TO_ADDR
// end ;
40964: LD_VAR 0 3
40968: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40969: LD_INT 0
40971: PPUSH
// if not mc_bases [ base ] then
40972: LD_EXP 50
40976: PUSH
40977: LD_VAR 0 1
40981: ARRAY
40982: NOT
40983: IFFALSE 40987
// exit ;
40985: GO 41024
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40987: LD_ADDR_EXP 55
40991: PUSH
40992: LD_EXP 55
40996: PPUSH
40997: LD_VAR 0 1
41001: PPUSH
41002: LD_EXP 55
41006: PUSH
41007: LD_VAR 0 1
41011: ARRAY
41012: PUSH
41013: LD_VAR 0 2
41017: UNION
41018: PPUSH
41019: CALL_OW 1
41023: ST_TO_ADDR
// end ;
41024: LD_VAR 0 3
41028: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
41029: LD_INT 0
41031: PPUSH
// if not mc_bases [ base ] then
41032: LD_EXP 50
41036: PUSH
41037: LD_VAR 0 1
41041: ARRAY
41042: NOT
41043: IFFALSE 41047
// exit ;
41045: GO 41072
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
41047: LD_ADDR_EXP 71
41051: PUSH
41052: LD_EXP 71
41056: PPUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: LD_VAR 0 2
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
// end ;
41072: LD_VAR 0 3
41076: RET
// export function MC_InsertProduceList ( base , components ) ; begin
41077: LD_INT 0
41079: PPUSH
// if not mc_bases [ base ] then
41080: LD_EXP 50
41084: PUSH
41085: LD_VAR 0 1
41089: ARRAY
41090: NOT
41091: IFFALSE 41095
// exit ;
41093: GO 41132
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
41095: LD_ADDR_EXP 71
41099: PUSH
41100: LD_EXP 71
41104: PPUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: LD_EXP 71
41114: PUSH
41115: LD_VAR 0 1
41119: ARRAY
41120: PUSH
41121: LD_VAR 0 2
41125: ADD
41126: PPUSH
41127: CALL_OW 1
41131: ST_TO_ADDR
// end ;
41132: LD_VAR 0 3
41136: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
41137: LD_INT 0
41139: PPUSH
// if not mc_bases [ base ] then
41140: LD_EXP 50
41144: PUSH
41145: LD_VAR 0 1
41149: ARRAY
41150: NOT
41151: IFFALSE 41155
// exit ;
41153: GO 41209
// mc_defender := Replace ( mc_defender , base , deflist ) ;
41155: LD_ADDR_EXP 72
41159: PUSH
41160: LD_EXP 72
41164: PPUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 2
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
41180: LD_ADDR_EXP 61
41184: PUSH
41185: LD_EXP 61
41189: PPUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: LD_VAR 0 2
41199: PUSH
41200: LD_INT 0
41202: PLUS
41203: PPUSH
41204: CALL_OW 1
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 3
41213: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
41214: LD_INT 0
41216: PPUSH
// if not mc_bases [ base ] then
41217: LD_EXP 50
41221: PUSH
41222: LD_VAR 0 1
41226: ARRAY
41227: NOT
41228: IFFALSE 41232
// exit ;
41230: GO 41257
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
41232: LD_ADDR_EXP 61
41236: PUSH
41237: LD_EXP 61
41241: PPUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_VAR 0 2
41251: PPUSH
41252: CALL_OW 1
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 3
41261: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
// if not mc_bases [ base ] then
41268: LD_EXP 50
41272: PUSH
41273: LD_VAR 0 1
41277: ARRAY
41278: NOT
41279: IFFALSE 41283
// exit ;
41281: GO 41348
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
41283: LD_ADDR_EXP 70
41287: PUSH
41288: LD_EXP 70
41292: PPUSH
41293: LD_VAR 0 1
41297: PUSH
41298: LD_EXP 70
41302: PUSH
41303: LD_VAR 0 1
41307: ARRAY
41308: PUSH
41309: LD_INT 1
41311: PLUS
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PPUSH
41317: LD_VAR 0 1
41321: PUSH
41322: LD_VAR 0 2
41326: PUSH
41327: LD_VAR 0 3
41331: PUSH
41332: LD_VAR 0 4
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL 54778 0 3
41347: ST_TO_ADDR
// end ;
41348: LD_VAR 0 5
41352: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
41353: LD_INT 0
41355: PPUSH
// if not mc_bases [ base ] then
41356: LD_EXP 50
41360: PUSH
41361: LD_VAR 0 1
41365: ARRAY
41366: NOT
41367: IFFALSE 41371
// exit ;
41369: GO 41396
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
41371: LD_ADDR_EXP 87
41375: PUSH
41376: LD_EXP 87
41380: PPUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: LD_VAR 0 2
41390: PPUSH
41391: CALL_OW 1
41395: ST_TO_ADDR
// end ;
41396: LD_VAR 0 3
41400: RET
// export function MC_GetMinesField ( base ) ; begin
41401: LD_INT 0
41403: PPUSH
// result := mc_mines [ base ] ;
41404: LD_ADDR_VAR 0 2
41408: PUSH
41409: LD_EXP 63
41413: PUSH
41414: LD_VAR 0 1
41418: ARRAY
41419: ST_TO_ADDR
// end ;
41420: LD_VAR 0 2
41424: RET
// export function MC_GetProduceList ( base ) ; begin
41425: LD_INT 0
41427: PPUSH
// result := mc_produce [ base ] ;
41428: LD_ADDR_VAR 0 2
41432: PUSH
41433: LD_EXP 71
41437: PUSH
41438: LD_VAR 0 1
41442: ARRAY
41443: ST_TO_ADDR
// end ;
41444: LD_VAR 0 2
41448: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
41449: LD_INT 0
41451: PPUSH
41452: PPUSH
// if not mc_bases then
41453: LD_EXP 50
41457: NOT
41458: IFFALSE 41462
// exit ;
41460: GO 41527
// if mc_bases [ base ] then
41462: LD_EXP 50
41466: PUSH
41467: LD_VAR 0 1
41471: ARRAY
41472: IFFALSE 41527
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_EXP 50
41483: PUSH
41484: LD_VAR 0 1
41488: ARRAY
41489: PPUSH
41490: LD_INT 30
41492: PUSH
41493: LD_VAR 0 2
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PPUSH
41502: CALL_OW 72
41506: ST_TO_ADDR
// if result then
41507: LD_VAR 0 3
41511: IFFALSE 41527
// result := result [ 1 ] ;
41513: LD_ADDR_VAR 0 3
41517: PUSH
41518: LD_VAR 0 3
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: ST_TO_ADDR
// end ; end ;
41527: LD_VAR 0 3
41531: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
// if not mc_bases then
41536: LD_EXP 50
41540: NOT
41541: IFFALSE 41545
// exit ;
41543: GO 41590
// if mc_bases [ base ] then
41545: LD_EXP 50
41549: PUSH
41550: LD_VAR 0 1
41554: ARRAY
41555: IFFALSE 41590
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_EXP 50
41566: PUSH
41567: LD_VAR 0 1
41571: ARRAY
41572: PPUSH
41573: LD_INT 30
41575: PUSH
41576: LD_VAR 0 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PPUSH
41585: CALL_OW 72
41589: ST_TO_ADDR
// end ;
41590: LD_VAR 0 3
41594: RET
// export function MC_SetTame ( base , area ) ; begin
41595: LD_INT 0
41597: PPUSH
// if not mc_bases or not base then
41598: LD_EXP 50
41602: NOT
41603: PUSH
41604: LD_VAR 0 1
41608: NOT
41609: OR
41610: IFFALSE 41614
// exit ;
41612: GO 41639
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
41614: LD_ADDR_EXP 78
41618: PUSH
41619: LD_EXP 78
41623: PPUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: LD_VAR 0 2
41633: PPUSH
41634: CALL_OW 1
41638: ST_TO_ADDR
// end ;
41639: LD_VAR 0 3
41643: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
41644: LD_INT 0
41646: PPUSH
41647: PPUSH
// if not mc_bases or not base then
41648: LD_EXP 50
41652: NOT
41653: PUSH
41654: LD_VAR 0 1
41658: NOT
41659: OR
41660: IFFALSE 41664
// exit ;
41662: GO 41766
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41664: LD_ADDR_VAR 0 4
41668: PUSH
41669: LD_EXP 50
41673: PUSH
41674: LD_VAR 0 1
41678: ARRAY
41679: PPUSH
41680: LD_INT 30
41682: PUSH
41683: LD_VAR 0 2
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PPUSH
41692: CALL_OW 72
41696: ST_TO_ADDR
// if not tmp then
41697: LD_VAR 0 4
41701: NOT
41702: IFFALSE 41706
// exit ;
41704: GO 41766
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
41706: LD_ADDR_EXP 82
41710: PUSH
41711: LD_EXP 82
41715: PPUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_EXP 82
41725: PUSH
41726: LD_VAR 0 1
41730: ARRAY
41731: PPUSH
41732: LD_EXP 82
41736: PUSH
41737: LD_VAR 0 1
41741: ARRAY
41742: PUSH
41743: LD_INT 1
41745: PLUS
41746: PPUSH
41747: LD_VAR 0 4
41751: PUSH
41752: LD_INT 1
41754: ARRAY
41755: PPUSH
41756: CALL_OW 2
41760: PPUSH
41761: CALL_OW 1
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 3
41770: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
// if not mc_bases or not base or not kinds then
41775: LD_EXP 50
41779: NOT
41780: PUSH
41781: LD_VAR 0 1
41785: NOT
41786: OR
41787: PUSH
41788: LD_VAR 0 2
41792: NOT
41793: OR
41794: IFFALSE 41798
// exit ;
41796: GO 41859
// for i in kinds do
41798: LD_ADDR_VAR 0 4
41802: PUSH
41803: LD_VAR 0 2
41807: PUSH
41808: FOR_IN
41809: IFFALSE 41857
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41811: LD_ADDR_EXP 84
41815: PUSH
41816: LD_EXP 84
41820: PPUSH
41821: LD_VAR 0 1
41825: PUSH
41826: LD_EXP 84
41830: PUSH
41831: LD_VAR 0 1
41835: ARRAY
41836: PUSH
41837: LD_INT 1
41839: PLUS
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PPUSH
41845: LD_VAR 0 4
41849: PPUSH
41850: CALL 54778 0 3
41854: ST_TO_ADDR
41855: GO 41808
41857: POP
41858: POP
// end ;
41859: LD_VAR 0 3
41863: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41864: LD_INT 0
41866: PPUSH
// if not mc_bases or not base or not areas then
41867: LD_EXP 50
41871: NOT
41872: PUSH
41873: LD_VAR 0 1
41877: NOT
41878: OR
41879: PUSH
41880: LD_VAR 0 2
41884: NOT
41885: OR
41886: IFFALSE 41890
// exit ;
41888: GO 41915
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41890: LD_ADDR_EXP 68
41894: PUSH
41895: LD_EXP 68
41899: PPUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_VAR 0 2
41909: PPUSH
41910: CALL_OW 1
41914: ST_TO_ADDR
// end ;
41915: LD_VAR 0 3
41919: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41920: LD_INT 0
41922: PPUSH
// if not mc_bases or not base or not teleports_exit then
41923: LD_EXP 50
41927: NOT
41928: PUSH
41929: LD_VAR 0 1
41933: NOT
41934: OR
41935: PUSH
41936: LD_VAR 0 2
41940: NOT
41941: OR
41942: IFFALSE 41946
// exit ;
41944: GO 41971
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41946: LD_ADDR_EXP 85
41950: PUSH
41951: LD_EXP 85
41955: PPUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_VAR 0 2
41965: PPUSH
41966: CALL_OW 1
41970: ST_TO_ADDR
// end ;
41971: LD_VAR 0 3
41975: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41976: LD_INT 0
41978: PPUSH
41979: PPUSH
41980: PPUSH
// if not mc_bases or not base or not ext_list then
41981: LD_EXP 50
41985: NOT
41986: PUSH
41987: LD_VAR 0 1
41991: NOT
41992: OR
41993: PUSH
41994: LD_VAR 0 5
41998: NOT
41999: OR
42000: IFFALSE 42004
// exit ;
42002: GO 42177
// tmp := GetFacExtXYD ( x , y , d ) ;
42004: LD_ADDR_VAR 0 8
42008: PUSH
42009: LD_VAR 0 2
42013: PPUSH
42014: LD_VAR 0 3
42018: PPUSH
42019: LD_VAR 0 4
42023: PPUSH
42024: CALL 88166 0 3
42028: ST_TO_ADDR
// if not tmp then
42029: LD_VAR 0 8
42033: NOT
42034: IFFALSE 42038
// exit ;
42036: GO 42177
// for i in tmp do
42038: LD_ADDR_VAR 0 7
42042: PUSH
42043: LD_VAR 0 8
42047: PUSH
42048: FOR_IN
42049: IFFALSE 42175
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
42051: LD_ADDR_EXP 55
42055: PUSH
42056: LD_EXP 55
42060: PPUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: LD_EXP 55
42070: PUSH
42071: LD_VAR 0 1
42075: ARRAY
42076: PPUSH
42077: LD_EXP 55
42081: PUSH
42082: LD_VAR 0 1
42086: ARRAY
42087: PUSH
42088: LD_INT 1
42090: PLUS
42091: PPUSH
42092: LD_VAR 0 5
42096: PUSH
42097: LD_INT 1
42099: ARRAY
42100: PUSH
42101: LD_VAR 0 7
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: PUSH
42110: LD_VAR 0 7
42114: PUSH
42115: LD_INT 2
42117: ARRAY
42118: PUSH
42119: LD_VAR 0 7
42123: PUSH
42124: LD_INT 3
42126: ARRAY
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: PPUSH
42134: CALL_OW 2
42138: PPUSH
42139: CALL_OW 1
42143: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
42144: LD_ADDR_VAR 0 5
42148: PUSH
42149: LD_VAR 0 5
42153: PPUSH
42154: LD_INT 1
42156: PPUSH
42157: CALL_OW 3
42161: ST_TO_ADDR
// if not ext_list then
42162: LD_VAR 0 5
42166: NOT
42167: IFFALSE 42173
// exit ;
42169: POP
42170: POP
42171: GO 42177
// end ;
42173: GO 42048
42175: POP
42176: POP
// end ;
42177: LD_VAR 0 6
42181: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
42182: LD_INT 0
42184: PPUSH
// if not mc_bases or not base or not weapon_list then
42185: LD_EXP 50
42189: NOT
42190: PUSH
42191: LD_VAR 0 1
42195: NOT
42196: OR
42197: PUSH
42198: LD_VAR 0 2
42202: NOT
42203: OR
42204: IFFALSE 42208
// exit ;
42206: GO 42233
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
42208: LD_ADDR_EXP 89
42212: PUSH
42213: LD_EXP 89
42217: PPUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: LD_VAR 0 2
42227: PPUSH
42228: CALL_OW 1
42232: ST_TO_ADDR
// end ;
42233: LD_VAR 0 3
42237: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
42238: LD_INT 0
42240: PPUSH
// if not mc_bases or not base or not tech_list then
42241: LD_EXP 50
42245: NOT
42246: PUSH
42247: LD_VAR 0 1
42251: NOT
42252: OR
42253: PUSH
42254: LD_VAR 0 2
42258: NOT
42259: OR
42260: IFFALSE 42264
// exit ;
42262: GO 42289
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
42264: LD_ADDR_EXP 77
42268: PUSH
42269: LD_EXP 77
42273: PPUSH
42274: LD_VAR 0 1
42278: PPUSH
42279: LD_VAR 0 2
42283: PPUSH
42284: CALL_OW 1
42288: ST_TO_ADDR
// end ;
42289: LD_VAR 0 3
42293: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
42294: LD_INT 0
42296: PPUSH
// if not mc_bases or not parking_area or not base then
42297: LD_EXP 50
42301: NOT
42302: PUSH
42303: LD_VAR 0 2
42307: NOT
42308: OR
42309: PUSH
42310: LD_VAR 0 1
42314: NOT
42315: OR
42316: IFFALSE 42320
// exit ;
42318: GO 42345
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
42320: LD_ADDR_EXP 74
42324: PUSH
42325: LD_EXP 74
42329: PPUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: LD_VAR 0 2
42339: PPUSH
42340: CALL_OW 1
42344: ST_TO_ADDR
// end ;
42345: LD_VAR 0 3
42349: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
42350: LD_INT 0
42352: PPUSH
// if not mc_bases or not base or not scan_area then
42353: LD_EXP 50
42357: NOT
42358: PUSH
42359: LD_VAR 0 1
42363: NOT
42364: OR
42365: PUSH
42366: LD_VAR 0 2
42370: NOT
42371: OR
42372: IFFALSE 42376
// exit ;
42374: GO 42401
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
42376: LD_ADDR_EXP 75
42380: PUSH
42381: LD_EXP 75
42385: PPUSH
42386: LD_VAR 0 1
42390: PPUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: CALL_OW 1
42400: ST_TO_ADDR
// end ;
42401: LD_VAR 0 3
42405: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
42406: LD_INT 0
42408: PPUSH
42409: PPUSH
// if not mc_bases or not base then
42410: LD_EXP 50
42414: NOT
42415: PUSH
42416: LD_VAR 0 1
42420: NOT
42421: OR
42422: IFFALSE 42426
// exit ;
42424: GO 42490
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
42426: LD_ADDR_VAR 0 3
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 4
42442: PUSH
42443: LD_INT 11
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
42453: LD_ADDR_EXP 77
42457: PUSH
42458: LD_EXP 77
42462: PPUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: LD_EXP 77
42472: PUSH
42473: LD_VAR 0 1
42477: ARRAY
42478: PUSH
42479: LD_VAR 0 3
42483: DIFF
42484: PPUSH
42485: CALL_OW 1
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 2
42494: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
42495: LD_INT 0
42497: PPUSH
// result := mc_vehicles [ base ] ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_EXP 69
42507: PUSH
42508: LD_VAR 0 1
42512: ARRAY
42513: ST_TO_ADDR
// if onlyCombat then
42514: LD_VAR 0 2
42518: IFFALSE 42683
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
42520: LD_ADDR_VAR 0 3
42524: PUSH
42525: LD_VAR 0 3
42529: PUSH
42530: LD_VAR 0 3
42534: PPUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 34
42540: PUSH
42541: LD_INT 12
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 34
42550: PUSH
42551: LD_INT 51
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 34
42560: PUSH
42561: LD_EXP 94
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 34
42572: PUSH
42573: LD_INT 32
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 34
42582: PUSH
42583: LD_INT 13
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 34
42592: PUSH
42593: LD_INT 52
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 34
42602: PUSH
42603: LD_INT 14
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 34
42612: PUSH
42613: LD_INT 53
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 34
42622: PUSH
42623: LD_EXP 93
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 34
42634: PUSH
42635: LD_INT 31
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 34
42644: PUSH
42645: LD_INT 48
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 34
42654: PUSH
42655: LD_INT 8
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 72
42681: DIFF
42682: ST_TO_ADDR
// end ; end_of_file
42683: LD_VAR 0 3
42687: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
42688: LD_INT 0
42690: PPUSH
42691: PPUSH
42692: PPUSH
// if not mc_bases or not skirmish then
42693: LD_EXP 50
42697: NOT
42698: PUSH
42699: LD_EXP 48
42703: NOT
42704: OR
42705: IFFALSE 42709
// exit ;
42707: GO 42874
// for i = 1 to mc_bases do
42709: LD_ADDR_VAR 0 4
42713: PUSH
42714: DOUBLE
42715: LD_INT 1
42717: DEC
42718: ST_TO_ADDR
42719: LD_EXP 50
42723: PUSH
42724: FOR_TO
42725: IFFALSE 42872
// begin if sci in mc_bases [ i ] then
42727: LD_VAR 0 2
42731: PUSH
42732: LD_EXP 50
42736: PUSH
42737: LD_VAR 0 4
42741: ARRAY
42742: IN
42743: IFFALSE 42870
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
42745: LD_ADDR_EXP 79
42749: PUSH
42750: LD_EXP 79
42754: PPUSH
42755: LD_VAR 0 4
42759: PUSH
42760: LD_EXP 79
42764: PUSH
42765: LD_VAR 0 4
42769: ARRAY
42770: PUSH
42771: LD_INT 1
42773: PLUS
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PPUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: CALL 54778 0 3
42788: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
42789: LD_ADDR_VAR 0 5
42793: PUSH
42794: LD_EXP 50
42798: PUSH
42799: LD_VAR 0 4
42803: ARRAY
42804: PPUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 30
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 30
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: PPUSH
42833: CALL_OW 72
42837: PPUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 74
42847: ST_TO_ADDR
// if tmp then
42848: LD_VAR 0 5
42852: IFFALSE 42868
// ComStandNearbyBuilding ( ape , tmp ) ;
42854: LD_VAR 0 1
42858: PPUSH
42859: LD_VAR 0 5
42863: PPUSH
42864: CALL 48981 0 2
// break ;
42868: GO 42872
// end ; end ;
42870: GO 42724
42872: POP
42873: POP
// end ;
42874: LD_VAR 0 3
42878: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42879: LD_INT 0
42881: PPUSH
42882: PPUSH
42883: PPUSH
// if not mc_bases or not skirmish then
42884: LD_EXP 50
42888: NOT
42889: PUSH
42890: LD_EXP 48
42894: NOT
42895: OR
42896: IFFALSE 42900
// exit ;
42898: GO 42989
// for i = 1 to mc_bases do
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: DOUBLE
42906: LD_INT 1
42908: DEC
42909: ST_TO_ADDR
42910: LD_EXP 50
42914: PUSH
42915: FOR_TO
42916: IFFALSE 42987
// begin if building in mc_busy_turret_list [ i ] then
42918: LD_VAR 0 1
42922: PUSH
42923: LD_EXP 60
42927: PUSH
42928: LD_VAR 0 4
42932: ARRAY
42933: IN
42934: IFFALSE 42985
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: LD_EXP 60
42945: PUSH
42946: LD_VAR 0 4
42950: ARRAY
42951: PUSH
42952: LD_VAR 0 1
42956: DIFF
42957: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42958: LD_ADDR_EXP 60
42962: PUSH
42963: LD_EXP 60
42967: PPUSH
42968: LD_VAR 0 4
42972: PPUSH
42973: LD_VAR 0 5
42977: PPUSH
42978: CALL_OW 1
42982: ST_TO_ADDR
// break ;
42983: GO 42987
// end ; end ;
42985: GO 42915
42987: POP
42988: POP
// end ;
42989: LD_VAR 0 3
42993: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
// if not mc_bases or not skirmish then
42999: LD_EXP 50
43003: NOT
43004: PUSH
43005: LD_EXP 48
43009: NOT
43010: OR
43011: IFFALSE 43015
// exit ;
43013: GO 43214
// for i = 1 to mc_bases do
43015: LD_ADDR_VAR 0 5
43019: PUSH
43020: DOUBLE
43021: LD_INT 1
43023: DEC
43024: ST_TO_ADDR
43025: LD_EXP 50
43029: PUSH
43030: FOR_TO
43031: IFFALSE 43212
// if building in mc_bases [ i ] then
43033: LD_VAR 0 1
43037: PUSH
43038: LD_EXP 50
43042: PUSH
43043: LD_VAR 0 5
43047: ARRAY
43048: IN
43049: IFFALSE 43210
// begin tmp := mc_bases [ i ] diff building ;
43051: LD_ADDR_VAR 0 6
43055: PUSH
43056: LD_EXP 50
43060: PUSH
43061: LD_VAR 0 5
43065: ARRAY
43066: PUSH
43067: LD_VAR 0 1
43071: DIFF
43072: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
43073: LD_ADDR_EXP 50
43077: PUSH
43078: LD_EXP 50
43082: PPUSH
43083: LD_VAR 0 5
43087: PPUSH
43088: LD_VAR 0 6
43092: PPUSH
43093: CALL_OW 1
43097: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
43098: LD_VAR 0 1
43102: PUSH
43103: LD_EXP 58
43107: PUSH
43108: LD_VAR 0 5
43112: ARRAY
43113: IN
43114: IFFALSE 43153
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
43116: LD_ADDR_EXP 58
43120: PUSH
43121: LD_EXP 58
43125: PPUSH
43126: LD_VAR 0 5
43130: PPUSH
43131: LD_EXP 58
43135: PUSH
43136: LD_VAR 0 5
43140: ARRAY
43141: PUSH
43142: LD_VAR 0 1
43146: DIFF
43147: PPUSH
43148: CALL_OW 1
43152: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
43153: LD_VAR 0 1
43157: PUSH
43158: LD_EXP 59
43162: PUSH
43163: LD_VAR 0 5
43167: ARRAY
43168: IN
43169: IFFALSE 43208
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
43171: LD_ADDR_EXP 59
43175: PUSH
43176: LD_EXP 59
43180: PPUSH
43181: LD_VAR 0 5
43185: PPUSH
43186: LD_EXP 59
43190: PUSH
43191: LD_VAR 0 5
43195: ARRAY
43196: PUSH
43197: LD_VAR 0 1
43201: DIFF
43202: PPUSH
43203: CALL_OW 1
43207: ST_TO_ADDR
// break ;
43208: GO 43212
// end ;
43210: GO 43030
43212: POP
43213: POP
// end ;
43214: LD_VAR 0 4
43218: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
43219: LD_INT 0
43221: PPUSH
43222: PPUSH
43223: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
43224: LD_EXP 50
43228: NOT
43229: PUSH
43230: LD_EXP 48
43234: NOT
43235: OR
43236: PUSH
43237: LD_VAR 0 3
43241: PUSH
43242: LD_EXP 76
43246: IN
43247: NOT
43248: OR
43249: IFFALSE 43253
// exit ;
43251: GO 43376
// for i = 1 to mc_vehicles do
43253: LD_ADDR_VAR 0 6
43257: PUSH
43258: DOUBLE
43259: LD_INT 1
43261: DEC
43262: ST_TO_ADDR
43263: LD_EXP 69
43267: PUSH
43268: FOR_TO
43269: IFFALSE 43374
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
43271: LD_VAR 0 2
43275: PUSH
43276: LD_EXP 69
43280: PUSH
43281: LD_VAR 0 6
43285: ARRAY
43286: IN
43287: PUSH
43288: LD_VAR 0 1
43292: PUSH
43293: LD_EXP 69
43297: PUSH
43298: LD_VAR 0 6
43302: ARRAY
43303: IN
43304: OR
43305: IFFALSE 43372
// begin tmp := mc_vehicles [ i ] diff old ;
43307: LD_ADDR_VAR 0 7
43311: PUSH
43312: LD_EXP 69
43316: PUSH
43317: LD_VAR 0 6
43321: ARRAY
43322: PUSH
43323: LD_VAR 0 2
43327: DIFF
43328: ST_TO_ADDR
// tmp := tmp diff new ;
43329: LD_ADDR_VAR 0 7
43333: PUSH
43334: LD_VAR 0 7
43338: PUSH
43339: LD_VAR 0 1
43343: DIFF
43344: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
43345: LD_ADDR_EXP 69
43349: PUSH
43350: LD_EXP 69
43354: PPUSH
43355: LD_VAR 0 6
43359: PPUSH
43360: LD_VAR 0 7
43364: PPUSH
43365: CALL_OW 1
43369: ST_TO_ADDR
// break ;
43370: GO 43374
// end ;
43372: GO 43268
43374: POP
43375: POP
// end ;
43376: LD_VAR 0 5
43380: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
43381: LD_INT 0
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
// if not mc_bases or not skirmish then
43387: LD_EXP 50
43391: NOT
43392: PUSH
43393: LD_EXP 48
43397: NOT
43398: OR
43399: IFFALSE 43403
// exit ;
43401: GO 43780
// side := GetSide ( vehicle ) ;
43403: LD_ADDR_VAR 0 5
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: CALL_OW 255
43417: ST_TO_ADDR
// for i = 1 to mc_bases do
43418: LD_ADDR_VAR 0 4
43422: PUSH
43423: DOUBLE
43424: LD_INT 1
43426: DEC
43427: ST_TO_ADDR
43428: LD_EXP 50
43432: PUSH
43433: FOR_TO
43434: IFFALSE 43778
// begin if factory in mc_bases [ i ] then
43436: LD_VAR 0 2
43440: PUSH
43441: LD_EXP 50
43445: PUSH
43446: LD_VAR 0 4
43450: ARRAY
43451: IN
43452: IFFALSE 43776
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
43454: LD_EXP 72
43458: PUSH
43459: LD_VAR 0 4
43463: ARRAY
43464: PUSH
43465: LD_EXP 61
43469: PUSH
43470: LD_VAR 0 4
43474: ARRAY
43475: LESS
43476: PUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL_OW 264
43486: PUSH
43487: LD_INT 31
43489: PUSH
43490: LD_INT 32
43492: PUSH
43493: LD_INT 51
43495: PUSH
43496: LD_EXP 94
43500: PUSH
43501: LD_INT 12
43503: PUSH
43504: LD_INT 30
43506: PUSH
43507: LD_EXP 93
43511: PUSH
43512: LD_INT 11
43514: PUSH
43515: LD_INT 53
43517: PUSH
43518: LD_INT 14
43520: PUSH
43521: LD_EXP 97
43525: PUSH
43526: LD_INT 29
43528: PUSH
43529: LD_EXP 95
43533: PUSH
43534: LD_INT 13
43536: PUSH
43537: LD_INT 52
43539: PUSH
43540: LD_INT 48
43542: PUSH
43543: LD_INT 8
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: IN
43565: NOT
43566: AND
43567: IFFALSE 43615
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
43569: LD_ADDR_EXP 72
43573: PUSH
43574: LD_EXP 72
43578: PPUSH
43579: LD_VAR 0 4
43583: PUSH
43584: LD_EXP 72
43588: PUSH
43589: LD_VAR 0 4
43593: ARRAY
43594: PUSH
43595: LD_INT 1
43597: PLUS
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PPUSH
43603: LD_VAR 0 1
43607: PPUSH
43608: CALL 54778 0 3
43612: ST_TO_ADDR
43613: GO 43659
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
43615: LD_ADDR_EXP 69
43619: PUSH
43620: LD_EXP 69
43624: PPUSH
43625: LD_VAR 0 4
43629: PUSH
43630: LD_EXP 69
43634: PUSH
43635: LD_VAR 0 4
43639: ARRAY
43640: PUSH
43641: LD_INT 1
43643: PLUS
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PPUSH
43649: LD_VAR 0 1
43653: PPUSH
43654: CALL 54778 0 3
43658: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 263
43668: PUSH
43669: LD_INT 2
43671: EQUAL
43672: IFFALSE 43692
// begin repeat wait ( 0 0$1 ) ;
43674: LD_INT 35
43676: PPUSH
43677: CALL_OW 67
// until IsControledBy ( vehicle ) ;
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 312
43690: IFFALSE 43674
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
43692: LD_VAR 0 1
43696: PPUSH
43697: LD_EXP 74
43701: PUSH
43702: LD_VAR 0 4
43706: ARRAY
43707: PPUSH
43708: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 263
43721: PUSH
43722: LD_INT 1
43724: NONEQUAL
43725: IFFALSE 43729
// break ;
43727: GO 43778
// repeat wait ( 0 0$1 ) ;
43729: LD_INT 35
43731: PPUSH
43732: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
43736: LD_VAR 0 1
43740: PPUSH
43741: LD_EXP 74
43745: PUSH
43746: LD_VAR 0 4
43750: ARRAY
43751: PPUSH
43752: CALL_OW 308
43756: IFFALSE 43729
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
43758: LD_VAR 0 1
43762: PPUSH
43763: CALL_OW 311
43767: PPUSH
43768: CALL_OW 121
// exit ;
43772: POP
43773: POP
43774: GO 43780
// end ; end ;
43776: GO 43433
43778: POP
43779: POP
// end ;
43780: LD_VAR 0 3
43784: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
43785: LD_INT 0
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
// if not mc_bases or not skirmish then
43791: LD_EXP 50
43795: NOT
43796: PUSH
43797: LD_EXP 48
43801: NOT
43802: OR
43803: IFFALSE 43807
// exit ;
43805: GO 44160
// repeat wait ( 0 0$1 ) ;
43807: LD_INT 35
43809: PPUSH
43810: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
43814: LD_VAR 0 2
43818: PPUSH
43819: LD_VAR 0 3
43823: PPUSH
43824: CALL_OW 284
43828: IFFALSE 43807
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43830: LD_VAR 0 2
43834: PPUSH
43835: LD_VAR 0 3
43839: PPUSH
43840: CALL_OW 283
43844: PUSH
43845: LD_INT 4
43847: EQUAL
43848: IFFALSE 43852
// exit ;
43850: GO 44160
// for i = 1 to mc_bases do
43852: LD_ADDR_VAR 0 7
43856: PUSH
43857: DOUBLE
43858: LD_INT 1
43860: DEC
43861: ST_TO_ADDR
43862: LD_EXP 50
43866: PUSH
43867: FOR_TO
43868: IFFALSE 44158
// begin if mc_crates_area [ i ] then
43870: LD_EXP 68
43874: PUSH
43875: LD_VAR 0 7
43879: ARRAY
43880: IFFALSE 43991
// for j in mc_crates_area [ i ] do
43882: LD_ADDR_VAR 0 8
43886: PUSH
43887: LD_EXP 68
43891: PUSH
43892: LD_VAR 0 7
43896: ARRAY
43897: PUSH
43898: FOR_IN
43899: IFFALSE 43989
// if InArea ( x , y , j ) then
43901: LD_VAR 0 2
43905: PPUSH
43906: LD_VAR 0 3
43910: PPUSH
43911: LD_VAR 0 8
43915: PPUSH
43916: CALL_OW 309
43920: IFFALSE 43987
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43922: LD_ADDR_EXP 66
43926: PUSH
43927: LD_EXP 66
43931: PPUSH
43932: LD_VAR 0 7
43936: PUSH
43937: LD_EXP 66
43941: PUSH
43942: LD_VAR 0 7
43946: ARRAY
43947: PUSH
43948: LD_INT 1
43950: PLUS
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PPUSH
43956: LD_VAR 0 4
43960: PUSH
43961: LD_VAR 0 2
43965: PUSH
43966: LD_VAR 0 3
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: PPUSH
43976: CALL 54778 0 3
43980: ST_TO_ADDR
// exit ;
43981: POP
43982: POP
43983: POP
43984: POP
43985: GO 44160
// end ;
43987: GO 43898
43989: POP
43990: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43991: LD_ADDR_VAR 0 9
43995: PUSH
43996: LD_EXP 50
44000: PUSH
44001: LD_VAR 0 7
44005: ARRAY
44006: PPUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 30
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 30
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: PPUSH
44035: CALL_OW 72
44039: ST_TO_ADDR
// if not depot then
44040: LD_VAR 0 9
44044: NOT
44045: IFFALSE 44049
// continue ;
44047: GO 43867
// for j in depot do
44049: LD_ADDR_VAR 0 8
44053: PUSH
44054: LD_VAR 0 9
44058: PUSH
44059: FOR_IN
44060: IFFALSE 44154
// if GetDistUnitXY ( j , x , y ) < 30 then
44062: LD_VAR 0 8
44066: PPUSH
44067: LD_VAR 0 2
44071: PPUSH
44072: LD_VAR 0 3
44076: PPUSH
44077: CALL_OW 297
44081: PUSH
44082: LD_INT 30
44084: LESS
44085: IFFALSE 44152
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
44087: LD_ADDR_EXP 66
44091: PUSH
44092: LD_EXP 66
44096: PPUSH
44097: LD_VAR 0 7
44101: PUSH
44102: LD_EXP 66
44106: PUSH
44107: LD_VAR 0 7
44111: ARRAY
44112: PUSH
44113: LD_INT 1
44115: PLUS
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PPUSH
44121: LD_VAR 0 4
44125: PUSH
44126: LD_VAR 0 2
44130: PUSH
44131: LD_VAR 0 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: PPUSH
44141: CALL 54778 0 3
44145: ST_TO_ADDR
// exit ;
44146: POP
44147: POP
44148: POP
44149: POP
44150: GO 44160
// end ;
44152: GO 44059
44154: POP
44155: POP
// end ;
44156: GO 43867
44158: POP
44159: POP
// end ;
44160: LD_VAR 0 6
44164: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
// if not mc_bases or not skirmish then
44171: LD_EXP 50
44175: NOT
44176: PUSH
44177: LD_EXP 48
44181: NOT
44182: OR
44183: IFFALSE 44187
// exit ;
44185: GO 44464
// side := GetSide ( lab ) ;
44187: LD_ADDR_VAR 0 4
44191: PUSH
44192: LD_VAR 0 2
44196: PPUSH
44197: CALL_OW 255
44201: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
44202: LD_VAR 0 4
44206: PUSH
44207: LD_EXP 76
44211: IN
44212: NOT
44213: PUSH
44214: LD_EXP 77
44218: NOT
44219: OR
44220: PUSH
44221: LD_EXP 50
44225: NOT
44226: OR
44227: IFFALSE 44231
// exit ;
44229: GO 44464
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
44231: LD_ADDR_EXP 77
44235: PUSH
44236: LD_EXP 77
44240: PPUSH
44241: LD_VAR 0 4
44245: PPUSH
44246: LD_EXP 77
44250: PUSH
44251: LD_VAR 0 4
44255: ARRAY
44256: PUSH
44257: LD_VAR 0 1
44261: DIFF
44262: PPUSH
44263: CALL_OW 1
44267: ST_TO_ADDR
// for i = 1 to mc_bases do
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: DOUBLE
44274: LD_INT 1
44276: DEC
44277: ST_TO_ADDR
44278: LD_EXP 50
44282: PUSH
44283: FOR_TO
44284: IFFALSE 44462
// begin if lab in mc_bases [ i ] then
44286: LD_VAR 0 2
44290: PUSH
44291: LD_EXP 50
44295: PUSH
44296: LD_VAR 0 5
44300: ARRAY
44301: IN
44302: IFFALSE 44460
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
44304: LD_VAR 0 1
44308: PUSH
44309: LD_INT 11
44311: PUSH
44312: LD_INT 4
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: IN
44327: PUSH
44328: LD_EXP 80
44332: PUSH
44333: LD_VAR 0 5
44337: ARRAY
44338: AND
44339: IFFALSE 44460
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_EXP 80
44350: PUSH
44351: LD_VAR 0 5
44355: ARRAY
44356: PUSH
44357: LD_INT 1
44359: ARRAY
44360: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44361: LD_ADDR_EXP 80
44365: PUSH
44366: LD_EXP 80
44370: PPUSH
44371: LD_VAR 0 5
44375: PPUSH
44376: EMPTY
44377: PPUSH
44378: CALL_OW 1
44382: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
44383: LD_VAR 0 6
44387: PPUSH
44388: LD_INT 0
44390: PPUSH
44391: CALL_OW 109
// ComExitBuilding ( tmp ) ;
44395: LD_VAR 0 6
44399: PPUSH
44400: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
44404: LD_ADDR_EXP 79
44408: PUSH
44409: LD_EXP 79
44413: PPUSH
44414: LD_VAR 0 5
44418: PPUSH
44419: LD_EXP 79
44423: PUSH
44424: LD_VAR 0 5
44428: ARRAY
44429: PPUSH
44430: LD_INT 1
44432: PPUSH
44433: LD_VAR 0 6
44437: PPUSH
44438: CALL_OW 2
44442: PPUSH
44443: CALL_OW 1
44447: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
44448: LD_VAR 0 5
44452: PPUSH
44453: LD_INT 112
44455: PPUSH
44456: CALL 21460 0 2
// end ; end ; end ;
44460: GO 44283
44462: POP
44463: POP
// end ;
44464: LD_VAR 0 3
44468: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
44469: LD_INT 0
44471: PPUSH
44472: PPUSH
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
// if not mc_bases or not skirmish then
44479: LD_EXP 50
44483: NOT
44484: PUSH
44485: LD_EXP 48
44489: NOT
44490: OR
44491: IFFALSE 44495
// exit ;
44493: GO 45866
// for i = 1 to mc_bases do
44495: LD_ADDR_VAR 0 3
44499: PUSH
44500: DOUBLE
44501: LD_INT 1
44503: DEC
44504: ST_TO_ADDR
44505: LD_EXP 50
44509: PUSH
44510: FOR_TO
44511: IFFALSE 45864
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
44513: LD_VAR 0 1
44517: PUSH
44518: LD_EXP 50
44522: PUSH
44523: LD_VAR 0 3
44527: ARRAY
44528: IN
44529: PUSH
44530: LD_VAR 0 1
44534: PUSH
44535: LD_EXP 57
44539: PUSH
44540: LD_VAR 0 3
44544: ARRAY
44545: IN
44546: OR
44547: PUSH
44548: LD_VAR 0 1
44552: PUSH
44553: LD_EXP 72
44557: PUSH
44558: LD_VAR 0 3
44562: ARRAY
44563: IN
44564: OR
44565: PUSH
44566: LD_VAR 0 1
44570: PUSH
44571: LD_EXP 69
44575: PUSH
44576: LD_VAR 0 3
44580: ARRAY
44581: IN
44582: OR
44583: PUSH
44584: LD_VAR 0 1
44588: PUSH
44589: LD_EXP 79
44593: PUSH
44594: LD_VAR 0 3
44598: ARRAY
44599: IN
44600: OR
44601: PUSH
44602: LD_VAR 0 1
44606: PUSH
44607: LD_EXP 80
44611: PUSH
44612: LD_VAR 0 3
44616: ARRAY
44617: IN
44618: OR
44619: IFFALSE 45862
// begin if un in mc_ape [ i ] then
44621: LD_VAR 0 1
44625: PUSH
44626: LD_EXP 79
44630: PUSH
44631: LD_VAR 0 3
44635: ARRAY
44636: IN
44637: IFFALSE 44676
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
44639: LD_ADDR_EXP 79
44643: PUSH
44644: LD_EXP 79
44648: PPUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: LD_EXP 79
44658: PUSH
44659: LD_VAR 0 3
44663: ARRAY
44664: PUSH
44665: LD_VAR 0 1
44669: DIFF
44670: PPUSH
44671: CALL_OW 1
44675: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
44676: LD_VAR 0 1
44680: PUSH
44681: LD_EXP 80
44685: PUSH
44686: LD_VAR 0 3
44690: ARRAY
44691: IN
44692: IFFALSE 44716
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44694: LD_ADDR_EXP 80
44698: PUSH
44699: LD_EXP 80
44703: PPUSH
44704: LD_VAR 0 3
44708: PPUSH
44709: EMPTY
44710: PPUSH
44711: CALL_OW 1
44715: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
44716: LD_VAR 0 1
44720: PPUSH
44721: CALL_OW 247
44725: PUSH
44726: LD_INT 2
44728: EQUAL
44729: PUSH
44730: LD_VAR 0 1
44734: PPUSH
44735: CALL_OW 110
44739: PUSH
44740: LD_INT 20
44742: EQUAL
44743: PUSH
44744: LD_VAR 0 1
44748: PUSH
44749: LD_EXP 72
44753: PUSH
44754: LD_VAR 0 3
44758: ARRAY
44759: IN
44760: OR
44761: PUSH
44762: LD_VAR 0 1
44766: PPUSH
44767: CALL_OW 264
44771: PUSH
44772: LD_INT 12
44774: PUSH
44775: LD_INT 51
44777: PUSH
44778: LD_EXP 94
44782: PUSH
44783: LD_INT 32
44785: PUSH
44786: LD_INT 13
44788: PUSH
44789: LD_INT 52
44791: PUSH
44792: LD_INT 31
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: IN
44804: OR
44805: AND
44806: IFFALSE 45114
// begin if un in mc_defender [ i ] then
44808: LD_VAR 0 1
44812: PUSH
44813: LD_EXP 72
44817: PUSH
44818: LD_VAR 0 3
44822: ARRAY
44823: IN
44824: IFFALSE 44863
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44826: LD_ADDR_EXP 72
44830: PUSH
44831: LD_EXP 72
44835: PPUSH
44836: LD_VAR 0 3
44840: PPUSH
44841: LD_EXP 72
44845: PUSH
44846: LD_VAR 0 3
44850: ARRAY
44851: PUSH
44852: LD_VAR 0 1
44856: DIFF
44857: PPUSH
44858: CALL_OW 1
44862: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44863: LD_ADDR_VAR 0 8
44867: PUSH
44868: LD_VAR 0 3
44872: PPUSH
44873: LD_INT 3
44875: PPUSH
44876: CALL 41532 0 2
44880: ST_TO_ADDR
// if fac then
44881: LD_VAR 0 8
44885: IFFALSE 45114
// begin for j in fac do
44887: LD_ADDR_VAR 0 4
44891: PUSH
44892: LD_VAR 0 8
44896: PUSH
44897: FOR_IN
44898: IFFALSE 45112
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44900: LD_ADDR_VAR 0 9
44904: PUSH
44905: LD_VAR 0 8
44909: PPUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: CALL_OW 265
44919: PPUSH
44920: LD_VAR 0 1
44924: PPUSH
44925: CALL_OW 262
44929: PPUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: CALL_OW 263
44939: PPUSH
44940: LD_VAR 0 1
44944: PPUSH
44945: CALL_OW 264
44949: PPUSH
44950: CALL 52310 0 5
44954: ST_TO_ADDR
// if components then
44955: LD_VAR 0 9
44959: IFFALSE 45110
// begin if GetWeapon ( un ) = ar_control_tower then
44961: LD_VAR 0 1
44965: PPUSH
44966: CALL_OW 264
44970: PUSH
44971: LD_INT 31
44973: EQUAL
44974: IFFALSE 45091
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
44976: LD_VAR 0 1
44980: PPUSH
44981: CALL_OW 311
44985: PPUSH
44986: LD_INT 0
44988: PPUSH
44989: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
44993: LD_ADDR_EXP 90
44997: PUSH
44998: LD_EXP 90
45002: PPUSH
45003: LD_VAR 0 3
45007: PPUSH
45008: LD_EXP 90
45012: PUSH
45013: LD_VAR 0 3
45017: ARRAY
45018: PUSH
45019: LD_VAR 0 1
45023: PPUSH
45024: CALL_OW 311
45028: DIFF
45029: PPUSH
45030: CALL_OW 1
45034: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
45035: LD_ADDR_VAR 0 7
45039: PUSH
45040: LD_EXP 71
45044: PUSH
45045: LD_VAR 0 3
45049: ARRAY
45050: PPUSH
45051: LD_INT 1
45053: PPUSH
45054: LD_VAR 0 9
45058: PPUSH
45059: CALL_OW 2
45063: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
45064: LD_ADDR_EXP 71
45068: PUSH
45069: LD_EXP 71
45073: PPUSH
45074: LD_VAR 0 3
45078: PPUSH
45079: LD_VAR 0 7
45083: PPUSH
45084: CALL_OW 1
45088: ST_TO_ADDR
// end else
45089: GO 45108
// MC_InsertProduceList ( i , [ components ] ) ;
45091: LD_VAR 0 3
45095: PPUSH
45096: LD_VAR 0 9
45100: PUSH
45101: EMPTY
45102: LIST
45103: PPUSH
45104: CALL 41077 0 2
// break ;
45108: GO 45112
// end ; end ;
45110: GO 44897
45112: POP
45113: POP
// end ; end ; if GetType ( un ) = unit_building then
45114: LD_VAR 0 1
45118: PPUSH
45119: CALL_OW 247
45123: PUSH
45124: LD_INT 3
45126: EQUAL
45127: IFFALSE 45530
// begin btype := GetBType ( un ) ;
45129: LD_ADDR_VAR 0 5
45133: PUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 266
45143: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
45144: LD_VAR 0 5
45148: PUSH
45149: LD_INT 29
45151: PUSH
45152: LD_INT 30
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: IN
45159: IFFALSE 45232
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 250
45170: PPUSH
45171: LD_VAR 0 1
45175: PPUSH
45176: CALL_OW 251
45180: PPUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 255
45190: PPUSH
45191: CALL_OW 440
45195: NOT
45196: IFFALSE 45232
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 250
45207: PPUSH
45208: LD_VAR 0 1
45212: PPUSH
45213: CALL_OW 251
45217: PPUSH
45218: LD_VAR 0 1
45222: PPUSH
45223: CALL_OW 255
45227: PPUSH
45228: CALL_OW 441
// end ; if btype = b_warehouse then
45232: LD_VAR 0 5
45236: PUSH
45237: LD_INT 1
45239: EQUAL
45240: IFFALSE 45258
// begin btype := b_depot ;
45242: LD_ADDR_VAR 0 5
45246: PUSH
45247: LD_INT 0
45249: ST_TO_ADDR
// pos := 1 ;
45250: LD_ADDR_VAR 0 6
45254: PUSH
45255: LD_INT 1
45257: ST_TO_ADDR
// end ; if btype = b_factory then
45258: LD_VAR 0 5
45262: PUSH
45263: LD_INT 3
45265: EQUAL
45266: IFFALSE 45284
// begin btype := b_workshop ;
45268: LD_ADDR_VAR 0 5
45272: PUSH
45273: LD_INT 2
45275: ST_TO_ADDR
// pos := 1 ;
45276: LD_ADDR_VAR 0 6
45280: PUSH
45281: LD_INT 1
45283: ST_TO_ADDR
// end ; if btype = b_barracks then
45284: LD_VAR 0 5
45288: PUSH
45289: LD_INT 5
45291: EQUAL
45292: IFFALSE 45302
// btype := b_armoury ;
45294: LD_ADDR_VAR 0 5
45298: PUSH
45299: LD_INT 4
45301: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
45302: LD_VAR 0 5
45306: PUSH
45307: LD_INT 7
45309: PUSH
45310: LD_INT 8
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: IN
45317: IFFALSE 45327
// btype := b_lab ;
45319: LD_ADDR_VAR 0 5
45323: PUSH
45324: LD_INT 6
45326: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
45327: LD_ADDR_EXP 55
45331: PUSH
45332: LD_EXP 55
45336: PPUSH
45337: LD_VAR 0 3
45341: PUSH
45342: LD_EXP 55
45346: PUSH
45347: LD_VAR 0 3
45351: ARRAY
45352: PUSH
45353: LD_INT 1
45355: PLUS
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PPUSH
45361: LD_VAR 0 5
45365: PUSH
45366: LD_VAR 0 1
45370: PPUSH
45371: CALL_OW 250
45375: PUSH
45376: LD_VAR 0 1
45380: PPUSH
45381: CALL_OW 251
45385: PUSH
45386: LD_VAR 0 1
45390: PPUSH
45391: CALL_OW 254
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: PPUSH
45402: CALL 54778 0 3
45406: ST_TO_ADDR
// if pos = 1 then
45407: LD_VAR 0 6
45411: PUSH
45412: LD_INT 1
45414: EQUAL
45415: IFFALSE 45530
// begin tmp := mc_build_list [ i ] ;
45417: LD_ADDR_VAR 0 7
45421: PUSH
45422: LD_EXP 55
45426: PUSH
45427: LD_VAR 0 3
45431: ARRAY
45432: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45433: LD_VAR 0 7
45437: PPUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 30
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 30
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: PPUSH
45466: CALL_OW 72
45470: IFFALSE 45480
// pos := 2 ;
45472: LD_ADDR_VAR 0 6
45476: PUSH
45477: LD_INT 2
45479: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
45480: LD_ADDR_VAR 0 7
45484: PUSH
45485: LD_VAR 0 7
45489: PPUSH
45490: LD_VAR 0 6
45494: PPUSH
45495: LD_VAR 0 7
45499: PPUSH
45500: CALL 55104 0 3
45504: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
45505: LD_ADDR_EXP 55
45509: PUSH
45510: LD_EXP 55
45514: PPUSH
45515: LD_VAR 0 3
45519: PPUSH
45520: LD_VAR 0 7
45524: PPUSH
45525: CALL_OW 1
45529: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
45530: LD_VAR 0 1
45534: PUSH
45535: LD_EXP 50
45539: PUSH
45540: LD_VAR 0 3
45544: ARRAY
45545: IN
45546: IFFALSE 45585
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
45548: LD_ADDR_EXP 50
45552: PUSH
45553: LD_EXP 50
45557: PPUSH
45558: LD_VAR 0 3
45562: PPUSH
45563: LD_EXP 50
45567: PUSH
45568: LD_VAR 0 3
45572: ARRAY
45573: PUSH
45574: LD_VAR 0 1
45578: DIFF
45579: PPUSH
45580: CALL_OW 1
45584: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
45585: LD_VAR 0 1
45589: PUSH
45590: LD_EXP 57
45594: PUSH
45595: LD_VAR 0 3
45599: ARRAY
45600: IN
45601: IFFALSE 45640
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
45603: LD_ADDR_EXP 57
45607: PUSH
45608: LD_EXP 57
45612: PPUSH
45613: LD_VAR 0 3
45617: PPUSH
45618: LD_EXP 57
45622: PUSH
45623: LD_VAR 0 3
45627: ARRAY
45628: PUSH
45629: LD_VAR 0 1
45633: DIFF
45634: PPUSH
45635: CALL_OW 1
45639: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
45640: LD_VAR 0 1
45644: PUSH
45645: LD_EXP 69
45649: PUSH
45650: LD_VAR 0 3
45654: ARRAY
45655: IN
45656: IFFALSE 45695
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
45658: LD_ADDR_EXP 69
45662: PUSH
45663: LD_EXP 69
45667: PPUSH
45668: LD_VAR 0 3
45672: PPUSH
45673: LD_EXP 69
45677: PUSH
45678: LD_VAR 0 3
45682: ARRAY
45683: PUSH
45684: LD_VAR 0 1
45688: DIFF
45689: PPUSH
45690: CALL_OW 1
45694: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
45695: LD_VAR 0 1
45699: PUSH
45700: LD_EXP 72
45704: PUSH
45705: LD_VAR 0 3
45709: ARRAY
45710: IN
45711: IFFALSE 45750
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
45713: LD_ADDR_EXP 72
45717: PUSH
45718: LD_EXP 72
45722: PPUSH
45723: LD_VAR 0 3
45727: PPUSH
45728: LD_EXP 72
45732: PUSH
45733: LD_VAR 0 3
45737: ARRAY
45738: PUSH
45739: LD_VAR 0 1
45743: DIFF
45744: PPUSH
45745: CALL_OW 1
45749: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
45750: LD_VAR 0 1
45754: PUSH
45755: LD_EXP 59
45759: PUSH
45760: LD_VAR 0 3
45764: ARRAY
45765: IN
45766: IFFALSE 45805
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
45768: LD_ADDR_EXP 59
45772: PUSH
45773: LD_EXP 59
45777: PPUSH
45778: LD_VAR 0 3
45782: PPUSH
45783: LD_EXP 59
45787: PUSH
45788: LD_VAR 0 3
45792: ARRAY
45793: PUSH
45794: LD_VAR 0 1
45798: DIFF
45799: PPUSH
45800: CALL_OW 1
45804: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
45805: LD_VAR 0 1
45809: PUSH
45810: LD_EXP 58
45814: PUSH
45815: LD_VAR 0 3
45819: ARRAY
45820: IN
45821: IFFALSE 45860
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
45823: LD_ADDR_EXP 58
45827: PUSH
45828: LD_EXP 58
45832: PPUSH
45833: LD_VAR 0 3
45837: PPUSH
45838: LD_EXP 58
45842: PUSH
45843: LD_VAR 0 3
45847: ARRAY
45848: PUSH
45849: LD_VAR 0 1
45853: DIFF
45854: PPUSH
45855: CALL_OW 1
45859: ST_TO_ADDR
// end ; break ;
45860: GO 45864
// end ;
45862: GO 44510
45864: POP
45865: POP
// end ;
45866: LD_VAR 0 2
45870: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
45871: LD_INT 0
45873: PPUSH
45874: PPUSH
45875: PPUSH
// if not mc_bases or not skirmish then
45876: LD_EXP 50
45880: NOT
45881: PUSH
45882: LD_EXP 48
45886: NOT
45887: OR
45888: IFFALSE 45892
// exit ;
45890: GO 46107
// for i = 1 to mc_bases do
45892: LD_ADDR_VAR 0 3
45896: PUSH
45897: DOUBLE
45898: LD_INT 1
45900: DEC
45901: ST_TO_ADDR
45902: LD_EXP 50
45906: PUSH
45907: FOR_TO
45908: IFFALSE 46105
// begin if building in mc_construct_list [ i ] then
45910: LD_VAR 0 1
45914: PUSH
45915: LD_EXP 57
45919: PUSH
45920: LD_VAR 0 3
45924: ARRAY
45925: IN
45926: IFFALSE 46103
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45928: LD_ADDR_EXP 57
45932: PUSH
45933: LD_EXP 57
45937: PPUSH
45938: LD_VAR 0 3
45942: PPUSH
45943: LD_EXP 57
45947: PUSH
45948: LD_VAR 0 3
45952: ARRAY
45953: PUSH
45954: LD_VAR 0 1
45958: DIFF
45959: PPUSH
45960: CALL_OW 1
45964: ST_TO_ADDR
// if building in mc_lab [ i ] then
45965: LD_VAR 0 1
45969: PUSH
45970: LD_EXP 83
45974: PUSH
45975: LD_VAR 0 3
45979: ARRAY
45980: IN
45981: IFFALSE 46036
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
45983: LD_ADDR_EXP 84
45987: PUSH
45988: LD_EXP 84
45992: PPUSH
45993: LD_VAR 0 3
45997: PPUSH
45998: LD_EXP 84
46002: PUSH
46003: LD_VAR 0 3
46007: ARRAY
46008: PPUSH
46009: LD_INT 1
46011: PPUSH
46012: LD_EXP 84
46016: PUSH
46017: LD_VAR 0 3
46021: ARRAY
46022: PPUSH
46023: LD_INT 0
46025: PPUSH
46026: CALL 54196 0 4
46030: PPUSH
46031: CALL_OW 1
46035: ST_TO_ADDR
// if not building in mc_bases [ i ] then
46036: LD_VAR 0 1
46040: PUSH
46041: LD_EXP 50
46045: PUSH
46046: LD_VAR 0 3
46050: ARRAY
46051: IN
46052: NOT
46053: IFFALSE 46099
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
46055: LD_ADDR_EXP 50
46059: PUSH
46060: LD_EXP 50
46064: PPUSH
46065: LD_VAR 0 3
46069: PUSH
46070: LD_EXP 50
46074: PUSH
46075: LD_VAR 0 3
46079: ARRAY
46080: PUSH
46081: LD_INT 1
46083: PLUS
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: LD_VAR 0 1
46093: PPUSH
46094: CALL 54778 0 3
46098: ST_TO_ADDR
// exit ;
46099: POP
46100: POP
46101: GO 46107
// end ; end ;
46103: GO 45907
46105: POP
46106: POP
// end ;
46107: LD_VAR 0 2
46111: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
46112: LD_INT 0
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
// if not mc_bases or not skirmish then
46121: LD_EXP 50
46125: NOT
46126: PUSH
46127: LD_EXP 48
46131: NOT
46132: OR
46133: IFFALSE 46137
// exit ;
46135: GO 46798
// for i = 1 to mc_bases do
46137: LD_ADDR_VAR 0 3
46141: PUSH
46142: DOUBLE
46143: LD_INT 1
46145: DEC
46146: ST_TO_ADDR
46147: LD_EXP 50
46151: PUSH
46152: FOR_TO
46153: IFFALSE 46796
// begin if building in mc_construct_list [ i ] then
46155: LD_VAR 0 1
46159: PUSH
46160: LD_EXP 57
46164: PUSH
46165: LD_VAR 0 3
46169: ARRAY
46170: IN
46171: IFFALSE 46794
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
46173: LD_ADDR_EXP 57
46177: PUSH
46178: LD_EXP 57
46182: PPUSH
46183: LD_VAR 0 3
46187: PPUSH
46188: LD_EXP 57
46192: PUSH
46193: LD_VAR 0 3
46197: ARRAY
46198: PUSH
46199: LD_VAR 0 1
46203: DIFF
46204: PPUSH
46205: CALL_OW 1
46209: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
46210: LD_ADDR_EXP 50
46214: PUSH
46215: LD_EXP 50
46219: PPUSH
46220: LD_VAR 0 3
46224: PUSH
46225: LD_EXP 50
46229: PUSH
46230: LD_VAR 0 3
46234: ARRAY
46235: PUSH
46236: LD_INT 1
46238: PLUS
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PPUSH
46244: LD_VAR 0 1
46248: PPUSH
46249: CALL 54778 0 3
46253: ST_TO_ADDR
// btype := GetBType ( building ) ;
46254: LD_ADDR_VAR 0 5
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 266
46268: ST_TO_ADDR
// side := GetSide ( building ) ;
46269: LD_ADDR_VAR 0 8
46273: PUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 255
46283: ST_TO_ADDR
// if btype = b_lab then
46284: LD_VAR 0 5
46288: PUSH
46289: LD_INT 6
46291: EQUAL
46292: IFFALSE 46342
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
46294: LD_ADDR_EXP 83
46298: PUSH
46299: LD_EXP 83
46303: PPUSH
46304: LD_VAR 0 3
46308: PUSH
46309: LD_EXP 83
46313: PUSH
46314: LD_VAR 0 3
46318: ARRAY
46319: PUSH
46320: LD_INT 1
46322: PLUS
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PPUSH
46328: LD_VAR 0 1
46332: PPUSH
46333: CALL 54778 0 3
46337: ST_TO_ADDR
// exit ;
46338: POP
46339: POP
46340: GO 46798
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
46342: LD_VAR 0 5
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 4
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: IN
46361: IFFALSE 46485
// begin if btype = b_armoury then
46363: LD_VAR 0 5
46367: PUSH
46368: LD_INT 4
46370: EQUAL
46371: IFFALSE 46381
// btype := b_barracks ;
46373: LD_ADDR_VAR 0 5
46377: PUSH
46378: LD_INT 5
46380: ST_TO_ADDR
// if btype = b_depot then
46381: LD_VAR 0 5
46385: PUSH
46386: LD_INT 0
46388: EQUAL
46389: IFFALSE 46399
// btype := b_warehouse ;
46391: LD_ADDR_VAR 0 5
46395: PUSH
46396: LD_INT 1
46398: ST_TO_ADDR
// if btype = b_workshop then
46399: LD_VAR 0 5
46403: PUSH
46404: LD_INT 2
46406: EQUAL
46407: IFFALSE 46417
// btype := b_factory ;
46409: LD_ADDR_VAR 0 5
46413: PUSH
46414: LD_INT 3
46416: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
46417: LD_VAR 0 5
46421: PPUSH
46422: LD_VAR 0 8
46426: PPUSH
46427: CALL_OW 323
46431: PUSH
46432: LD_INT 1
46434: EQUAL
46435: IFFALSE 46481
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
46437: LD_ADDR_EXP 82
46441: PUSH
46442: LD_EXP 82
46446: PPUSH
46447: LD_VAR 0 3
46451: PUSH
46452: LD_EXP 82
46456: PUSH
46457: LD_VAR 0 3
46461: ARRAY
46462: PUSH
46463: LD_INT 1
46465: PLUS
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PPUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: CALL 54778 0 3
46480: ST_TO_ADDR
// exit ;
46481: POP
46482: POP
46483: GO 46798
// end ; if btype in [ b_bunker , b_turret ] then
46485: LD_VAR 0 5
46489: PUSH
46490: LD_INT 32
46492: PUSH
46493: LD_INT 33
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: IN
46500: IFFALSE 46790
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
46502: LD_ADDR_EXP 58
46506: PUSH
46507: LD_EXP 58
46511: PPUSH
46512: LD_VAR 0 3
46516: PUSH
46517: LD_EXP 58
46521: PUSH
46522: LD_VAR 0 3
46526: ARRAY
46527: PUSH
46528: LD_INT 1
46530: PLUS
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PPUSH
46536: LD_VAR 0 1
46540: PPUSH
46541: CALL 54778 0 3
46545: ST_TO_ADDR
// if btype = b_bunker then
46546: LD_VAR 0 5
46550: PUSH
46551: LD_INT 32
46553: EQUAL
46554: IFFALSE 46790
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46556: LD_ADDR_EXP 59
46560: PUSH
46561: LD_EXP 59
46565: PPUSH
46566: LD_VAR 0 3
46570: PUSH
46571: LD_EXP 59
46575: PUSH
46576: LD_VAR 0 3
46580: ARRAY
46581: PUSH
46582: LD_INT 1
46584: PLUS
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PPUSH
46590: LD_VAR 0 1
46594: PPUSH
46595: CALL 54778 0 3
46599: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
46600: LD_ADDR_VAR 0 6
46604: PUSH
46605: LD_EXP 50
46609: PUSH
46610: LD_VAR 0 3
46614: ARRAY
46615: PPUSH
46616: LD_INT 25
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 54
46631: PUSH
46632: EMPTY
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PPUSH
46643: CALL_OW 72
46647: ST_TO_ADDR
// if tmp then
46648: LD_VAR 0 6
46652: IFFALSE 46658
// exit ;
46654: POP
46655: POP
46656: GO 46798
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46658: LD_ADDR_VAR 0 6
46662: PUSH
46663: LD_EXP 50
46667: PUSH
46668: LD_VAR 0 3
46672: ARRAY
46673: PPUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 30
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 30
46689: PUSH
46690: LD_INT 5
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: PPUSH
46702: CALL_OW 72
46706: ST_TO_ADDR
// if not tmp then
46707: LD_VAR 0 6
46711: NOT
46712: IFFALSE 46718
// exit ;
46714: POP
46715: POP
46716: GO 46798
// for j in tmp do
46718: LD_ADDR_VAR 0 4
46722: PUSH
46723: LD_VAR 0 6
46727: PUSH
46728: FOR_IN
46729: IFFALSE 46788
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
46731: LD_ADDR_VAR 0 7
46735: PUSH
46736: LD_VAR 0 4
46740: PPUSH
46741: CALL_OW 313
46745: PPUSH
46746: LD_INT 25
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PPUSH
46756: CALL_OW 72
46760: ST_TO_ADDR
// if units then
46761: LD_VAR 0 7
46765: IFFALSE 46786
// begin ComExitBuilding ( units [ 1 ] ) ;
46767: LD_VAR 0 7
46771: PUSH
46772: LD_INT 1
46774: ARRAY
46775: PPUSH
46776: CALL_OW 122
// exit ;
46780: POP
46781: POP
46782: POP
46783: POP
46784: GO 46798
// end ; end ;
46786: GO 46728
46788: POP
46789: POP
// end ; end ; exit ;
46790: POP
46791: POP
46792: GO 46798
// end ; end ;
46794: GO 46152
46796: POP
46797: POP
// end ;
46798: LD_VAR 0 2
46802: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
46803: LD_INT 0
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
// if not mc_bases or not skirmish then
46812: LD_EXP 50
46816: NOT
46817: PUSH
46818: LD_EXP 48
46822: NOT
46823: OR
46824: IFFALSE 46828
// exit ;
46826: GO 47059
// btype := GetBType ( building ) ;
46828: LD_ADDR_VAR 0 6
46832: PUSH
46833: LD_VAR 0 1
46837: PPUSH
46838: CALL_OW 266
46842: ST_TO_ADDR
// x := GetX ( building ) ;
46843: LD_ADDR_VAR 0 7
46847: PUSH
46848: LD_VAR 0 1
46852: PPUSH
46853: CALL_OW 250
46857: ST_TO_ADDR
// y := GetY ( building ) ;
46858: LD_ADDR_VAR 0 8
46862: PUSH
46863: LD_VAR 0 1
46867: PPUSH
46868: CALL_OW 251
46872: ST_TO_ADDR
// d := GetDir ( building ) ;
46873: LD_ADDR_VAR 0 9
46877: PUSH
46878: LD_VAR 0 1
46882: PPUSH
46883: CALL_OW 254
46887: ST_TO_ADDR
// for i = 1 to mc_bases do
46888: LD_ADDR_VAR 0 4
46892: PUSH
46893: DOUBLE
46894: LD_INT 1
46896: DEC
46897: ST_TO_ADDR
46898: LD_EXP 50
46902: PUSH
46903: FOR_TO
46904: IFFALSE 47057
// begin if not mc_build_list [ i ] then
46906: LD_EXP 55
46910: PUSH
46911: LD_VAR 0 4
46915: ARRAY
46916: NOT
46917: IFFALSE 46921
// continue ;
46919: GO 46903
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
46921: LD_VAR 0 6
46925: PUSH
46926: LD_VAR 0 7
46930: PUSH
46931: LD_VAR 0 8
46935: PUSH
46936: LD_VAR 0 9
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: PPUSH
46947: LD_EXP 55
46951: PUSH
46952: LD_VAR 0 4
46956: ARRAY
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: PPUSH
46962: CALL 60947 0 2
46966: IFFALSE 47055
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
46968: LD_ADDR_EXP 55
46972: PUSH
46973: LD_EXP 55
46977: PPUSH
46978: LD_VAR 0 4
46982: PPUSH
46983: LD_EXP 55
46987: PUSH
46988: LD_VAR 0 4
46992: ARRAY
46993: PPUSH
46994: LD_INT 1
46996: PPUSH
46997: CALL_OW 3
47001: PPUSH
47002: CALL_OW 1
47006: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
47007: LD_ADDR_EXP 57
47011: PUSH
47012: LD_EXP 57
47016: PPUSH
47017: LD_VAR 0 4
47021: PUSH
47022: LD_EXP 57
47026: PUSH
47027: LD_VAR 0 4
47031: ARRAY
47032: PUSH
47033: LD_INT 1
47035: PLUS
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PPUSH
47041: LD_VAR 0 1
47045: PPUSH
47046: CALL 54778 0 3
47050: ST_TO_ADDR
// exit ;
47051: POP
47052: POP
47053: GO 47059
// end ; end ;
47055: GO 46903
47057: POP
47058: POP
// end ;
47059: LD_VAR 0 3
47063: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
47064: LD_INT 0
47066: PPUSH
47067: PPUSH
47068: PPUSH
// if not mc_bases or not skirmish then
47069: LD_EXP 50
47073: NOT
47074: PUSH
47075: LD_EXP 48
47079: NOT
47080: OR
47081: IFFALSE 47085
// exit ;
47083: GO 47275
// for i = 1 to mc_bases do
47085: LD_ADDR_VAR 0 4
47089: PUSH
47090: DOUBLE
47091: LD_INT 1
47093: DEC
47094: ST_TO_ADDR
47095: LD_EXP 50
47099: PUSH
47100: FOR_TO
47101: IFFALSE 47188
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
47103: LD_VAR 0 1
47107: PUSH
47108: LD_EXP 58
47112: PUSH
47113: LD_VAR 0 4
47117: ARRAY
47118: IN
47119: PUSH
47120: LD_VAR 0 1
47124: PUSH
47125: LD_EXP 59
47129: PUSH
47130: LD_VAR 0 4
47134: ARRAY
47135: IN
47136: NOT
47137: AND
47138: IFFALSE 47186
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
47140: LD_ADDR_EXP 59
47144: PUSH
47145: LD_EXP 59
47149: PPUSH
47150: LD_VAR 0 4
47154: PUSH
47155: LD_EXP 59
47159: PUSH
47160: LD_VAR 0 4
47164: ARRAY
47165: PUSH
47166: LD_INT 1
47168: PLUS
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PPUSH
47174: LD_VAR 0 1
47178: PPUSH
47179: CALL 54778 0 3
47183: ST_TO_ADDR
// break ;
47184: GO 47188
// end ; end ;
47186: GO 47100
47188: POP
47189: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
47190: LD_VAR 0 1
47194: PPUSH
47195: CALL_OW 257
47199: PUSH
47200: LD_EXP 76
47204: IN
47205: PUSH
47206: LD_VAR 0 1
47210: PPUSH
47211: CALL_OW 266
47215: PUSH
47216: LD_INT 5
47218: EQUAL
47219: AND
47220: PUSH
47221: LD_VAR 0 2
47225: PPUSH
47226: CALL_OW 110
47230: PUSH
47231: LD_INT 18
47233: NONEQUAL
47234: AND
47235: IFFALSE 47275
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
47237: LD_VAR 0 2
47241: PPUSH
47242: CALL_OW 257
47246: PUSH
47247: LD_INT 5
47249: PUSH
47250: LD_INT 8
47252: PUSH
47253: LD_INT 9
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: IN
47261: IFFALSE 47275
// SetClass ( unit , 1 ) ;
47263: LD_VAR 0 2
47267: PPUSH
47268: LD_INT 1
47270: PPUSH
47271: CALL_OW 336
// end ;
47275: LD_VAR 0 3
47279: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
47280: LD_INT 0
47282: PPUSH
47283: PPUSH
// if not mc_bases or not skirmish then
47284: LD_EXP 50
47288: NOT
47289: PUSH
47290: LD_EXP 48
47294: NOT
47295: OR
47296: IFFALSE 47300
// exit ;
47298: GO 47416
// if GetLives ( abandoned_vehicle ) > 250 then
47300: LD_VAR 0 2
47304: PPUSH
47305: CALL_OW 256
47309: PUSH
47310: LD_INT 250
47312: GREATER
47313: IFFALSE 47317
// exit ;
47315: GO 47416
// for i = 1 to mc_bases do
47317: LD_ADDR_VAR 0 6
47321: PUSH
47322: DOUBLE
47323: LD_INT 1
47325: DEC
47326: ST_TO_ADDR
47327: LD_EXP 50
47331: PUSH
47332: FOR_TO
47333: IFFALSE 47414
// begin if driver in mc_bases [ i ] then
47335: LD_VAR 0 1
47339: PUSH
47340: LD_EXP 50
47344: PUSH
47345: LD_VAR 0 6
47349: ARRAY
47350: IN
47351: IFFALSE 47412
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
47353: LD_VAR 0 1
47357: PPUSH
47358: LD_EXP 50
47362: PUSH
47363: LD_VAR 0 6
47367: ARRAY
47368: PPUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 30
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 30
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: PPUSH
47397: CALL_OW 72
47401: PUSH
47402: LD_INT 1
47404: ARRAY
47405: PPUSH
47406: CALL_OW 112
// break ;
47410: GO 47414
// end ; end ;
47412: GO 47332
47414: POP
47415: POP
// end ; end_of_file
47416: LD_VAR 0 5
47420: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47421: LD_INT 0
47423: PPUSH
47424: PPUSH
// if exist_mode then
47425: LD_VAR 0 2
47429: IFFALSE 47454
// unit := CreateCharacter ( prefix & ident ) else
47431: LD_ADDR_VAR 0 5
47435: PUSH
47436: LD_VAR 0 3
47440: PUSH
47441: LD_VAR 0 1
47445: STR
47446: PPUSH
47447: CALL_OW 34
47451: ST_TO_ADDR
47452: GO 47469
// unit := NewCharacter ( ident ) ;
47454: LD_ADDR_VAR 0 5
47458: PUSH
47459: LD_VAR 0 1
47463: PPUSH
47464: CALL_OW 25
47468: ST_TO_ADDR
// result := unit ;
47469: LD_ADDR_VAR 0 4
47473: PUSH
47474: LD_VAR 0 5
47478: ST_TO_ADDR
// end ;
47479: LD_VAR 0 4
47483: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47484: LD_INT 0
47486: PPUSH
47487: PPUSH
// if not side or not nation then
47488: LD_VAR 0 1
47492: NOT
47493: PUSH
47494: LD_VAR 0 2
47498: NOT
47499: OR
47500: IFFALSE 47504
// exit ;
47502: GO 48268
// case nation of nation_american :
47504: LD_VAR 0 2
47508: PUSH
47509: LD_INT 1
47511: DOUBLE
47512: EQUAL
47513: IFTRUE 47517
47515: GO 47731
47517: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
47518: LD_ADDR_VAR 0 4
47522: PUSH
47523: LD_INT 35
47525: PUSH
47526: LD_INT 45
47528: PUSH
47529: LD_INT 46
47531: PUSH
47532: LD_INT 47
47534: PUSH
47535: LD_INT 82
47537: PUSH
47538: LD_INT 83
47540: PUSH
47541: LD_INT 84
47543: PUSH
47544: LD_INT 85
47546: PUSH
47547: LD_INT 86
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 6
47558: PUSH
47559: LD_INT 15
47561: PUSH
47562: LD_INT 16
47564: PUSH
47565: LD_INT 7
47567: PUSH
47568: LD_INT 12
47570: PUSH
47571: LD_INT 13
47573: PUSH
47574: LD_INT 10
47576: PUSH
47577: LD_INT 14
47579: PUSH
47580: LD_INT 20
47582: PUSH
47583: LD_INT 21
47585: PUSH
47586: LD_INT 22
47588: PUSH
47589: LD_INT 25
47591: PUSH
47592: LD_INT 32
47594: PUSH
47595: LD_INT 27
47597: PUSH
47598: LD_INT 36
47600: PUSH
47601: LD_INT 69
47603: PUSH
47604: LD_INT 39
47606: PUSH
47607: LD_INT 34
47609: PUSH
47610: LD_INT 40
47612: PUSH
47613: LD_INT 48
47615: PUSH
47616: LD_INT 49
47618: PUSH
47619: LD_INT 50
47621: PUSH
47622: LD_INT 51
47624: PUSH
47625: LD_INT 52
47627: PUSH
47628: LD_INT 53
47630: PUSH
47631: LD_INT 54
47633: PUSH
47634: LD_INT 55
47636: PUSH
47637: LD_INT 56
47639: PUSH
47640: LD_INT 57
47642: PUSH
47643: LD_INT 58
47645: PUSH
47646: LD_INT 59
47648: PUSH
47649: LD_INT 60
47651: PUSH
47652: LD_INT 61
47654: PUSH
47655: LD_INT 62
47657: PUSH
47658: LD_INT 80
47660: PUSH
47661: LD_INT 82
47663: PUSH
47664: LD_INT 83
47666: PUSH
47667: LD_INT 84
47669: PUSH
47670: LD_INT 85
47672: PUSH
47673: LD_INT 86
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
47729: GO 48192
47731: LD_INT 2
47733: DOUBLE
47734: EQUAL
47735: IFTRUE 47739
47737: GO 47961
47739: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
47740: LD_ADDR_VAR 0 4
47744: PUSH
47745: LD_INT 35
47747: PUSH
47748: LD_INT 45
47750: PUSH
47751: LD_INT 46
47753: PUSH
47754: LD_INT 47
47756: PUSH
47757: LD_INT 82
47759: PUSH
47760: LD_INT 83
47762: PUSH
47763: LD_INT 84
47765: PUSH
47766: LD_INT 85
47768: PUSH
47769: LD_INT 87
47771: PUSH
47772: LD_INT 70
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 11
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: LD_INT 4
47786: PUSH
47787: LD_INT 5
47789: PUSH
47790: LD_INT 6
47792: PUSH
47793: LD_INT 15
47795: PUSH
47796: LD_INT 18
47798: PUSH
47799: LD_INT 7
47801: PUSH
47802: LD_INT 17
47804: PUSH
47805: LD_INT 8
47807: PUSH
47808: LD_INT 20
47810: PUSH
47811: LD_INT 21
47813: PUSH
47814: LD_INT 22
47816: PUSH
47817: LD_INT 72
47819: PUSH
47820: LD_INT 26
47822: PUSH
47823: LD_INT 69
47825: PUSH
47826: LD_INT 39
47828: PUSH
47829: LD_INT 40
47831: PUSH
47832: LD_INT 41
47834: PUSH
47835: LD_INT 42
47837: PUSH
47838: LD_INT 43
47840: PUSH
47841: LD_INT 48
47843: PUSH
47844: LD_INT 49
47846: PUSH
47847: LD_INT 50
47849: PUSH
47850: LD_INT 51
47852: PUSH
47853: LD_INT 52
47855: PUSH
47856: LD_INT 53
47858: PUSH
47859: LD_INT 54
47861: PUSH
47862: LD_INT 55
47864: PUSH
47865: LD_INT 56
47867: PUSH
47868: LD_INT 60
47870: PUSH
47871: LD_INT 61
47873: PUSH
47874: LD_INT 62
47876: PUSH
47877: LD_INT 66
47879: PUSH
47880: LD_INT 67
47882: PUSH
47883: LD_INT 68
47885: PUSH
47886: LD_INT 81
47888: PUSH
47889: LD_INT 82
47891: PUSH
47892: LD_INT 83
47894: PUSH
47895: LD_INT 84
47897: PUSH
47898: LD_INT 85
47900: PUSH
47901: LD_INT 87
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: ST_TO_ADDR
47959: GO 48192
47961: LD_INT 3
47963: DOUBLE
47964: EQUAL
47965: IFTRUE 47969
47967: GO 48191
47969: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
47970: LD_ADDR_VAR 0 4
47974: PUSH
47975: LD_INT 46
47977: PUSH
47978: LD_INT 47
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: LD_INT 82
47989: PUSH
47990: LD_INT 83
47992: PUSH
47993: LD_INT 84
47995: PUSH
47996: LD_INT 85
47998: PUSH
47999: LD_INT 86
48001: PUSH
48002: LD_INT 11
48004: PUSH
48005: LD_INT 9
48007: PUSH
48008: LD_INT 20
48010: PUSH
48011: LD_INT 19
48013: PUSH
48014: LD_INT 21
48016: PUSH
48017: LD_INT 24
48019: PUSH
48020: LD_INT 22
48022: PUSH
48023: LD_INT 25
48025: PUSH
48026: LD_INT 28
48028: PUSH
48029: LD_INT 29
48031: PUSH
48032: LD_INT 30
48034: PUSH
48035: LD_INT 31
48037: PUSH
48038: LD_INT 37
48040: PUSH
48041: LD_INT 38
48043: PUSH
48044: LD_INT 32
48046: PUSH
48047: LD_INT 27
48049: PUSH
48050: LD_INT 33
48052: PUSH
48053: LD_INT 69
48055: PUSH
48056: LD_INT 39
48058: PUSH
48059: LD_INT 34
48061: PUSH
48062: LD_INT 40
48064: PUSH
48065: LD_INT 71
48067: PUSH
48068: LD_INT 23
48070: PUSH
48071: LD_INT 44
48073: PUSH
48074: LD_INT 48
48076: PUSH
48077: LD_INT 49
48079: PUSH
48080: LD_INT 50
48082: PUSH
48083: LD_INT 51
48085: PUSH
48086: LD_INT 52
48088: PUSH
48089: LD_INT 53
48091: PUSH
48092: LD_INT 54
48094: PUSH
48095: LD_INT 55
48097: PUSH
48098: LD_INT 56
48100: PUSH
48101: LD_INT 57
48103: PUSH
48104: LD_INT 58
48106: PUSH
48107: LD_INT 59
48109: PUSH
48110: LD_INT 63
48112: PUSH
48113: LD_INT 64
48115: PUSH
48116: LD_INT 65
48118: PUSH
48119: LD_INT 82
48121: PUSH
48122: LD_INT 83
48124: PUSH
48125: LD_INT 84
48127: PUSH
48128: LD_INT 85
48130: PUSH
48131: LD_INT 86
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
48189: GO 48192
48191: POP
// if state > - 1 and state < 3 then
48192: LD_VAR 0 3
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: GREATER
48201: PUSH
48202: LD_VAR 0 3
48206: PUSH
48207: LD_INT 3
48209: LESS
48210: AND
48211: IFFALSE 48268
// for i in result do
48213: LD_ADDR_VAR 0 5
48217: PUSH
48218: LD_VAR 0 4
48222: PUSH
48223: FOR_IN
48224: IFFALSE 48266
// if GetTech ( i , side ) <> state then
48226: LD_VAR 0 5
48230: PPUSH
48231: LD_VAR 0 1
48235: PPUSH
48236: CALL_OW 321
48240: PUSH
48241: LD_VAR 0 3
48245: NONEQUAL
48246: IFFALSE 48264
// result := result diff i ;
48248: LD_ADDR_VAR 0 4
48252: PUSH
48253: LD_VAR 0 4
48257: PUSH
48258: LD_VAR 0 5
48262: DIFF
48263: ST_TO_ADDR
48264: GO 48223
48266: POP
48267: POP
// end ;
48268: LD_VAR 0 4
48272: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
48273: LD_INT 0
48275: PPUSH
48276: PPUSH
48277: PPUSH
// result := true ;
48278: LD_ADDR_VAR 0 3
48282: PUSH
48283: LD_INT 1
48285: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
48286: LD_ADDR_VAR 0 5
48290: PUSH
48291: LD_VAR 0 2
48295: PPUSH
48296: CALL_OW 480
48300: ST_TO_ADDR
// if not tmp then
48301: LD_VAR 0 5
48305: NOT
48306: IFFALSE 48310
// exit ;
48308: GO 48359
// for i in tmp do
48310: LD_ADDR_VAR 0 4
48314: PUSH
48315: LD_VAR 0 5
48319: PUSH
48320: FOR_IN
48321: IFFALSE 48357
// if GetTech ( i , side ) <> state_researched then
48323: LD_VAR 0 4
48327: PPUSH
48328: LD_VAR 0 1
48332: PPUSH
48333: CALL_OW 321
48337: PUSH
48338: LD_INT 2
48340: NONEQUAL
48341: IFFALSE 48355
// begin result := false ;
48343: LD_ADDR_VAR 0 3
48347: PUSH
48348: LD_INT 0
48350: ST_TO_ADDR
// exit ;
48351: POP
48352: POP
48353: GO 48359
// end ;
48355: GO 48320
48357: POP
48358: POP
// end ;
48359: LD_VAR 0 3
48363: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
48364: LD_INT 0
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
48379: LD_VAR 0 1
48383: NOT
48384: PUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: CALL_OW 257
48394: PUSH
48395: LD_INT 9
48397: NONEQUAL
48398: OR
48399: IFFALSE 48403
// exit ;
48401: GO 48976
// side := GetSide ( unit ) ;
48403: LD_ADDR_VAR 0 9
48407: PUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: CALL_OW 255
48417: ST_TO_ADDR
// tech_space := tech_spacanom ;
48418: LD_ADDR_VAR 0 12
48422: PUSH
48423: LD_INT 29
48425: ST_TO_ADDR
// tech_time := tech_taurad ;
48426: LD_ADDR_VAR 0 13
48430: PUSH
48431: LD_INT 28
48433: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48434: LD_ADDR_VAR 0 11
48438: PUSH
48439: LD_VAR 0 1
48443: PPUSH
48444: CALL_OW 310
48448: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48449: LD_VAR 0 11
48453: PPUSH
48454: CALL_OW 247
48458: PUSH
48459: LD_INT 2
48461: EQUAL
48462: IFFALSE 48466
// exit ;
48464: GO 48976
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48466: LD_ADDR_VAR 0 8
48470: PUSH
48471: LD_INT 81
48473: PUSH
48474: LD_VAR 0 9
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: PUSH
48486: LD_INT 21
48488: PUSH
48489: LD_INT 3
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PPUSH
48504: CALL_OW 69
48508: ST_TO_ADDR
// if not tmp then
48509: LD_VAR 0 8
48513: NOT
48514: IFFALSE 48518
// exit ;
48516: GO 48976
// if in_unit then
48518: LD_VAR 0 11
48522: IFFALSE 48546
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48524: LD_ADDR_VAR 0 10
48528: PUSH
48529: LD_VAR 0 8
48533: PPUSH
48534: LD_VAR 0 11
48538: PPUSH
48539: CALL_OW 74
48543: ST_TO_ADDR
48544: GO 48566
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48546: LD_ADDR_VAR 0 10
48550: PUSH
48551: LD_VAR 0 8
48555: PPUSH
48556: LD_VAR 0 1
48560: PPUSH
48561: CALL_OW 74
48565: ST_TO_ADDR
// if not enemy then
48566: LD_VAR 0 10
48570: NOT
48571: IFFALSE 48575
// exit ;
48573: GO 48976
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48575: LD_VAR 0 11
48579: PUSH
48580: LD_VAR 0 11
48584: PPUSH
48585: LD_VAR 0 10
48589: PPUSH
48590: CALL_OW 296
48594: PUSH
48595: LD_INT 13
48597: GREATER
48598: AND
48599: PUSH
48600: LD_VAR 0 1
48604: PPUSH
48605: LD_VAR 0 10
48609: PPUSH
48610: CALL_OW 296
48614: PUSH
48615: LD_INT 12
48617: GREATER
48618: OR
48619: IFFALSE 48623
// exit ;
48621: GO 48976
// missile := [ 1 ] ;
48623: LD_ADDR_VAR 0 14
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48634: LD_VAR 0 9
48638: PPUSH
48639: LD_VAR 0 12
48643: PPUSH
48644: CALL_OW 325
48648: IFFALSE 48677
// missile := Insert ( missile , missile + 1 , 2 ) ;
48650: LD_ADDR_VAR 0 14
48654: PUSH
48655: LD_VAR 0 14
48659: PPUSH
48660: LD_VAR 0 14
48664: PUSH
48665: LD_INT 1
48667: PLUS
48668: PPUSH
48669: LD_INT 2
48671: PPUSH
48672: CALL_OW 2
48676: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48677: LD_VAR 0 9
48681: PPUSH
48682: LD_VAR 0 13
48686: PPUSH
48687: CALL_OW 325
48691: PUSH
48692: LD_VAR 0 10
48696: PPUSH
48697: CALL_OW 255
48701: PPUSH
48702: LD_VAR 0 13
48706: PPUSH
48707: CALL_OW 325
48711: NOT
48712: AND
48713: IFFALSE 48742
// missile := Insert ( missile , missile + 1 , 3 ) ;
48715: LD_ADDR_VAR 0 14
48719: PUSH
48720: LD_VAR 0 14
48724: PPUSH
48725: LD_VAR 0 14
48729: PUSH
48730: LD_INT 1
48732: PLUS
48733: PPUSH
48734: LD_INT 3
48736: PPUSH
48737: CALL_OW 2
48741: ST_TO_ADDR
// if missile < 2 then
48742: LD_VAR 0 14
48746: PUSH
48747: LD_INT 2
48749: LESS
48750: IFFALSE 48754
// exit ;
48752: GO 48976
// x := GetX ( enemy ) ;
48754: LD_ADDR_VAR 0 4
48758: PUSH
48759: LD_VAR 0 10
48763: PPUSH
48764: CALL_OW 250
48768: ST_TO_ADDR
// y := GetY ( enemy ) ;
48769: LD_ADDR_VAR 0 5
48773: PUSH
48774: LD_VAR 0 10
48778: PPUSH
48779: CALL_OW 251
48783: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48784: LD_ADDR_VAR 0 6
48788: PUSH
48789: LD_VAR 0 4
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PPUSH
48798: LD_INT 1
48800: PPUSH
48801: CALL_OW 12
48805: PLUS
48806: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48807: LD_ADDR_VAR 0 7
48811: PUSH
48812: LD_VAR 0 5
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PPUSH
48821: LD_INT 1
48823: PPUSH
48824: CALL_OW 12
48828: PLUS
48829: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48830: LD_VAR 0 6
48834: PPUSH
48835: LD_VAR 0 7
48839: PPUSH
48840: CALL_OW 488
48844: NOT
48845: IFFALSE 48867
// begin _x := x ;
48847: LD_ADDR_VAR 0 6
48851: PUSH
48852: LD_VAR 0 4
48856: ST_TO_ADDR
// _y := y ;
48857: LD_ADDR_VAR 0 7
48861: PUSH
48862: LD_VAR 0 5
48866: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48867: LD_ADDR_VAR 0 3
48871: PUSH
48872: LD_INT 1
48874: PPUSH
48875: LD_VAR 0 14
48879: PPUSH
48880: CALL_OW 12
48884: ST_TO_ADDR
// case i of 1 :
48885: LD_VAR 0 3
48889: PUSH
48890: LD_INT 1
48892: DOUBLE
48893: EQUAL
48894: IFTRUE 48898
48896: GO 48915
48898: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48899: LD_VAR 0 1
48903: PPUSH
48904: LD_VAR 0 10
48908: PPUSH
48909: CALL_OW 115
48913: GO 48976
48915: LD_INT 2
48917: DOUBLE
48918: EQUAL
48919: IFTRUE 48923
48921: GO 48945
48923: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48924: LD_VAR 0 1
48928: PPUSH
48929: LD_VAR 0 6
48933: PPUSH
48934: LD_VAR 0 7
48938: PPUSH
48939: CALL_OW 153
48943: GO 48976
48945: LD_INT 3
48947: DOUBLE
48948: EQUAL
48949: IFTRUE 48953
48951: GO 48975
48953: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48954: LD_VAR 0 1
48958: PPUSH
48959: LD_VAR 0 6
48963: PPUSH
48964: LD_VAR 0 7
48968: PPUSH
48969: CALL_OW 154
48973: GO 48976
48975: POP
// end ;
48976: LD_VAR 0 2
48980: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48981: LD_INT 0
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
// if not unit or not building then
48989: LD_VAR 0 1
48993: NOT
48994: PUSH
48995: LD_VAR 0 2
48999: NOT
49000: OR
49001: IFFALSE 49005
// exit ;
49003: GO 49163
// x := GetX ( building ) ;
49005: LD_ADDR_VAR 0 5
49009: PUSH
49010: LD_VAR 0 2
49014: PPUSH
49015: CALL_OW 250
49019: ST_TO_ADDR
// y := GetY ( building ) ;
49020: LD_ADDR_VAR 0 6
49024: PUSH
49025: LD_VAR 0 2
49029: PPUSH
49030: CALL_OW 251
49034: ST_TO_ADDR
// for i = 0 to 5 do
49035: LD_ADDR_VAR 0 4
49039: PUSH
49040: DOUBLE
49041: LD_INT 0
49043: DEC
49044: ST_TO_ADDR
49045: LD_INT 5
49047: PUSH
49048: FOR_TO
49049: IFFALSE 49161
// begin _x := ShiftX ( x , i , 3 ) ;
49051: LD_ADDR_VAR 0 7
49055: PUSH
49056: LD_VAR 0 5
49060: PPUSH
49061: LD_VAR 0 4
49065: PPUSH
49066: LD_INT 3
49068: PPUSH
49069: CALL_OW 272
49073: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
49074: LD_ADDR_VAR 0 8
49078: PUSH
49079: LD_VAR 0 6
49083: PPUSH
49084: LD_VAR 0 4
49088: PPUSH
49089: LD_INT 3
49091: PPUSH
49092: CALL_OW 273
49096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49097: LD_VAR 0 7
49101: PPUSH
49102: LD_VAR 0 8
49106: PPUSH
49107: CALL_OW 488
49111: NOT
49112: IFFALSE 49116
// continue ;
49114: GO 49048
// if HexInfo ( _x , _y ) = 0 then
49116: LD_VAR 0 7
49120: PPUSH
49121: LD_VAR 0 8
49125: PPUSH
49126: CALL_OW 428
49130: PUSH
49131: LD_INT 0
49133: EQUAL
49134: IFFALSE 49159
// begin ComMoveXY ( unit , _x , _y ) ;
49136: LD_VAR 0 1
49140: PPUSH
49141: LD_VAR 0 7
49145: PPUSH
49146: LD_VAR 0 8
49150: PPUSH
49151: CALL_OW 111
// exit ;
49155: POP
49156: POP
49157: GO 49163
// end ; end ;
49159: GO 49048
49161: POP
49162: POP
// end ;
49163: LD_VAR 0 3
49167: RET
// export function ScanBase ( side , base_area ) ; begin
49168: LD_INT 0
49170: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
49171: LD_ADDR_VAR 0 3
49175: PUSH
49176: LD_VAR 0 2
49180: PPUSH
49181: LD_INT 81
49183: PUSH
49184: LD_VAR 0 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PPUSH
49193: CALL_OW 70
49197: ST_TO_ADDR
// end ;
49198: LD_VAR 0 3
49202: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
49203: LD_INT 0
49205: PPUSH
49206: PPUSH
49207: PPUSH
49208: PPUSH
49209: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
49210: LD_VAR 0 1
49214: NOT
49215: PUSH
49216: LD_EXP 50
49220: PUSH
49221: LD_VAR 0 1
49225: ARRAY
49226: NOT
49227: OR
49228: PUSH
49229: LD_VAR 0 2
49233: NOT
49234: OR
49235: PUSH
49236: LD_VAR 0 3
49240: NOT
49241: OR
49242: IFFALSE 49246
// exit ;
49244: GO 49759
// side := mc_sides [ base ] ;
49246: LD_ADDR_VAR 0 6
49250: PUSH
49251: LD_EXP 76
49255: PUSH
49256: LD_VAR 0 1
49260: ARRAY
49261: ST_TO_ADDR
// if not side then
49262: LD_VAR 0 6
49266: NOT
49267: IFFALSE 49271
// exit ;
49269: GO 49759
// for i in solds do
49271: LD_ADDR_VAR 0 7
49275: PUSH
49276: LD_VAR 0 2
49280: PUSH
49281: FOR_IN
49282: IFFALSE 49343
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
49284: LD_VAR 0 7
49288: PPUSH
49289: CALL_OW 310
49293: PPUSH
49294: CALL_OW 266
49298: PUSH
49299: LD_INT 32
49301: PUSH
49302: LD_INT 31
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: IN
49309: IFFALSE 49329
// solds := solds diff i else
49311: LD_ADDR_VAR 0 2
49315: PUSH
49316: LD_VAR 0 2
49320: PUSH
49321: LD_VAR 0 7
49325: DIFF
49326: ST_TO_ADDR
49327: GO 49341
// SetTag ( i , 18 ) ;
49329: LD_VAR 0 7
49333: PPUSH
49334: LD_INT 18
49336: PPUSH
49337: CALL_OW 109
49341: GO 49281
49343: POP
49344: POP
// if not solds then
49345: LD_VAR 0 2
49349: NOT
49350: IFFALSE 49354
// exit ;
49352: GO 49759
// repeat wait ( 0 0$1 ) ;
49354: LD_INT 35
49356: PPUSH
49357: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
49361: LD_ADDR_VAR 0 5
49365: PUSH
49366: LD_VAR 0 6
49370: PPUSH
49371: LD_VAR 0 3
49375: PPUSH
49376: CALL 49168 0 2
49380: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
49381: LD_EXP 50
49385: PUSH
49386: LD_VAR 0 1
49390: ARRAY
49391: NOT
49392: PUSH
49393: LD_EXP 50
49397: PUSH
49398: LD_VAR 0 1
49402: ARRAY
49403: PUSH
49404: EMPTY
49405: EQUAL
49406: OR
49407: IFFALSE 49444
// begin for i in solds do
49409: LD_ADDR_VAR 0 7
49413: PUSH
49414: LD_VAR 0 2
49418: PUSH
49419: FOR_IN
49420: IFFALSE 49433
// ComStop ( i ) ;
49422: LD_VAR 0 7
49426: PPUSH
49427: CALL_OW 141
49431: GO 49419
49433: POP
49434: POP
// solds := [ ] ;
49435: LD_ADDR_VAR 0 2
49439: PUSH
49440: EMPTY
49441: ST_TO_ADDR
// exit ;
49442: GO 49759
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
49444: LD_VAR 0 5
49448: NOT
49449: PUSH
49450: LD_VAR 0 5
49454: PUSH
49455: LD_INT 3
49457: GREATER
49458: OR
49459: PUSH
49460: LD_EXP 72
49464: PUSH
49465: LD_VAR 0 1
49469: ARRAY
49470: OR
49471: IFFALSE 49512
// begin for i in solds do
49473: LD_ADDR_VAR 0 7
49477: PUSH
49478: LD_VAR 0 2
49482: PUSH
49483: FOR_IN
49484: IFFALSE 49508
// if HasTask ( i ) then
49486: LD_VAR 0 7
49490: PPUSH
49491: CALL_OW 314
49495: IFFALSE 49506
// ComStop ( i ) ;
49497: LD_VAR 0 7
49501: PPUSH
49502: CALL_OW 141
49506: GO 49483
49508: POP
49509: POP
// break ;
49510: GO 49747
// end ; for i in solds do
49512: LD_ADDR_VAR 0 7
49516: PUSH
49517: LD_VAR 0 2
49521: PUSH
49522: FOR_IN
49523: IFFALSE 49739
// begin if IsInUnit ( i ) then
49525: LD_VAR 0 7
49529: PPUSH
49530: CALL_OW 310
49534: IFFALSE 49545
// ComExitBuilding ( i ) ;
49536: LD_VAR 0 7
49540: PPUSH
49541: CALL_OW 122
// if GetLives ( i ) > 333 then
49545: LD_VAR 0 7
49549: PPUSH
49550: CALL_OW 256
49554: PUSH
49555: LD_INT 333
49557: GREATER
49558: IFFALSE 49586
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49560: LD_VAR 0 7
49564: PPUSH
49565: LD_VAR 0 5
49569: PPUSH
49570: LD_VAR 0 7
49574: PPUSH
49575: CALL_OW 74
49579: PPUSH
49580: CALL_OW 115
49584: GO 49737
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
49586: LD_ADDR_VAR 0 8
49590: PUSH
49591: LD_EXP 50
49595: PUSH
49596: LD_VAR 0 1
49600: ARRAY
49601: PPUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 30
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 30
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 30
49627: PUSH
49628: LD_INT 6
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: PPUSH
49641: CALL_OW 72
49645: PPUSH
49646: LD_VAR 0 7
49650: PPUSH
49651: CALL_OW 74
49655: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
49656: LD_VAR 0 7
49660: PPUSH
49661: LD_VAR 0 8
49665: PPUSH
49666: CALL_OW 250
49670: PPUSH
49671: LD_INT 3
49673: PPUSH
49674: LD_INT 5
49676: PPUSH
49677: CALL_OW 272
49681: PPUSH
49682: LD_VAR 0 8
49686: PPUSH
49687: CALL_OW 251
49691: PPUSH
49692: LD_INT 3
49694: PPUSH
49695: LD_INT 5
49697: PPUSH
49698: CALL_OW 273
49702: PPUSH
49703: CALL_OW 111
// SetTag ( i , 0 ) ;
49707: LD_VAR 0 7
49711: PPUSH
49712: LD_INT 0
49714: PPUSH
49715: CALL_OW 109
// solds := solds diff i ;
49719: LD_ADDR_VAR 0 2
49723: PUSH
49724: LD_VAR 0 2
49728: PUSH
49729: LD_VAR 0 7
49733: DIFF
49734: ST_TO_ADDR
// continue ;
49735: GO 49522
// end ; end ;
49737: GO 49522
49739: POP
49740: POP
// until solds ;
49741: LD_VAR 0 2
49745: IFFALSE 49354
// MC_Reset ( base , 18 ) ;
49747: LD_VAR 0 1
49751: PPUSH
49752: LD_INT 18
49754: PPUSH
49755: CALL 21460 0 2
// end ;
49759: LD_VAR 0 4
49763: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
49764: LD_INT 0
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
49774: PPUSH
49775: PPUSH
49776: PPUSH
49777: PPUSH
49778: PPUSH
49779: PPUSH
49780: PPUSH
49781: PPUSH
49782: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
49783: LD_ADDR_VAR 0 13
49787: PUSH
49788: LD_EXP 50
49792: PUSH
49793: LD_VAR 0 1
49797: ARRAY
49798: PPUSH
49799: LD_INT 25
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PPUSH
49809: CALL_OW 72
49813: ST_TO_ADDR
// if mc_remote_driver [ base ] then
49814: LD_EXP 90
49818: PUSH
49819: LD_VAR 0 1
49823: ARRAY
49824: IFFALSE 49848
// mechs := mechs diff mc_remote_driver [ base ] ;
49826: LD_ADDR_VAR 0 13
49830: PUSH
49831: LD_VAR 0 13
49835: PUSH
49836: LD_EXP 90
49840: PUSH
49841: LD_VAR 0 1
49845: ARRAY
49846: DIFF
49847: ST_TO_ADDR
// for i in mechs do
49848: LD_ADDR_VAR 0 5
49852: PUSH
49853: LD_VAR 0 13
49857: PUSH
49858: FOR_IN
49859: IFFALSE 49894
// if GetTag ( i ) > 0 then
49861: LD_VAR 0 5
49865: PPUSH
49866: CALL_OW 110
49870: PUSH
49871: LD_INT 0
49873: GREATER
49874: IFFALSE 49892
// mechs := mechs diff i ;
49876: LD_ADDR_VAR 0 13
49880: PUSH
49881: LD_VAR 0 13
49885: PUSH
49886: LD_VAR 0 5
49890: DIFF
49891: ST_TO_ADDR
49892: GO 49858
49894: POP
49895: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49896: LD_ADDR_VAR 0 9
49900: PUSH
49901: LD_EXP 50
49905: PUSH
49906: LD_VAR 0 1
49910: ARRAY
49911: PPUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 25
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 25
49927: PUSH
49928: LD_INT 5
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 25
49937: PUSH
49938: LD_INT 8
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 25
49947: PUSH
49948: LD_INT 9
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: PPUSH
49962: CALL_OW 72
49966: ST_TO_ADDR
// if not defenders and not solds then
49967: LD_VAR 0 2
49971: NOT
49972: PUSH
49973: LD_VAR 0 9
49977: NOT
49978: AND
49979: IFFALSE 49983
// exit ;
49981: GO 51609
// depot_under_attack := false ;
49983: LD_ADDR_VAR 0 17
49987: PUSH
49988: LD_INT 0
49990: ST_TO_ADDR
// sold_defenders := [ ] ;
49991: LD_ADDR_VAR 0 18
49995: PUSH
49996: EMPTY
49997: ST_TO_ADDR
// if mechs then
49998: LD_VAR 0 13
50002: IFFALSE 50131
// for i in defenders do
50004: LD_ADDR_VAR 0 5
50008: PUSH
50009: LD_VAR 0 2
50013: PUSH
50014: FOR_IN
50015: IFFALSE 50129
// begin SetTag ( i , 20 ) ;
50017: LD_VAR 0 5
50021: PPUSH
50022: LD_INT 20
50024: PPUSH
50025: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
50029: LD_VAR 0 5
50033: PPUSH
50034: CALL_OW 263
50038: PUSH
50039: LD_INT 1
50041: EQUAL
50042: PUSH
50043: LD_VAR 0 5
50047: PPUSH
50048: CALL_OW 311
50052: NOT
50053: AND
50054: PUSH
50055: LD_VAR 0 13
50059: AND
50060: IFFALSE 50127
// begin un := mechs [ 1 ] ;
50062: LD_ADDR_VAR 0 11
50066: PUSH
50067: LD_VAR 0 13
50071: PUSH
50072: LD_INT 1
50074: ARRAY
50075: ST_TO_ADDR
// ComExitBuilding ( un ) ;
50076: LD_VAR 0 11
50080: PPUSH
50081: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
50085: LD_VAR 0 11
50089: PPUSH
50090: LD_VAR 0 5
50094: PPUSH
50095: CALL_OW 180
// SetTag ( un , 19 ) ;
50099: LD_VAR 0 11
50103: PPUSH
50104: LD_INT 19
50106: PPUSH
50107: CALL_OW 109
// mechs := mechs diff un ;
50111: LD_ADDR_VAR 0 13
50115: PUSH
50116: LD_VAR 0 13
50120: PUSH
50121: LD_VAR 0 11
50125: DIFF
50126: ST_TO_ADDR
// end ; end ;
50127: GO 50014
50129: POP
50130: POP
// if solds then
50131: LD_VAR 0 9
50135: IFFALSE 50194
// for i in solds do
50137: LD_ADDR_VAR 0 5
50141: PUSH
50142: LD_VAR 0 9
50146: PUSH
50147: FOR_IN
50148: IFFALSE 50192
// if not GetTag ( i ) then
50150: LD_VAR 0 5
50154: PPUSH
50155: CALL_OW 110
50159: NOT
50160: IFFALSE 50190
// begin defenders := defenders union i ;
50162: LD_ADDR_VAR 0 2
50166: PUSH
50167: LD_VAR 0 2
50171: PUSH
50172: LD_VAR 0 5
50176: UNION
50177: ST_TO_ADDR
// SetTag ( i , 18 ) ;
50178: LD_VAR 0 5
50182: PPUSH
50183: LD_INT 18
50185: PPUSH
50186: CALL_OW 109
// end ;
50190: GO 50147
50192: POP
50193: POP
// repeat wait ( 0 0$1 ) ;
50194: LD_INT 35
50196: PPUSH
50197: CALL_OW 67
// enemy := mc_scan [ base ] ;
50201: LD_ADDR_VAR 0 3
50205: PUSH
50206: LD_EXP 73
50210: PUSH
50211: LD_VAR 0 1
50215: ARRAY
50216: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
50217: LD_EXP 50
50221: PUSH
50222: LD_VAR 0 1
50226: ARRAY
50227: NOT
50228: PUSH
50229: LD_EXP 50
50233: PUSH
50234: LD_VAR 0 1
50238: ARRAY
50239: PUSH
50240: EMPTY
50241: EQUAL
50242: OR
50243: IFFALSE 50280
// begin for i in defenders do
50245: LD_ADDR_VAR 0 5
50249: PUSH
50250: LD_VAR 0 2
50254: PUSH
50255: FOR_IN
50256: IFFALSE 50269
// ComStop ( i ) ;
50258: LD_VAR 0 5
50262: PPUSH
50263: CALL_OW 141
50267: GO 50255
50269: POP
50270: POP
// defenders := [ ] ;
50271: LD_ADDR_VAR 0 2
50275: PUSH
50276: EMPTY
50277: ST_TO_ADDR
// exit ;
50278: GO 51609
// end ; for i in defenders do
50280: LD_ADDR_VAR 0 5
50284: PUSH
50285: LD_VAR 0 2
50289: PUSH
50290: FOR_IN
50291: IFFALSE 51109
// begin e := NearestUnitToUnit ( enemy , i ) ;
50293: LD_ADDR_VAR 0 14
50297: PUSH
50298: LD_VAR 0 3
50302: PPUSH
50303: LD_VAR 0 5
50307: PPUSH
50308: CALL_OW 74
50312: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50313: LD_ADDR_VAR 0 8
50317: PUSH
50318: LD_EXP 50
50322: PUSH
50323: LD_VAR 0 1
50327: ARRAY
50328: PPUSH
50329: LD_INT 2
50331: PUSH
50332: LD_INT 30
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 30
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: PPUSH
50357: CALL_OW 72
50361: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
50362: LD_ADDR_VAR 0 17
50366: PUSH
50367: LD_VAR 0 8
50371: NOT
50372: PUSH
50373: LD_VAR 0 8
50377: PPUSH
50378: LD_INT 3
50380: PUSH
50381: LD_INT 24
50383: PUSH
50384: LD_INT 600
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PPUSH
50395: CALL_OW 72
50399: OR
50400: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
50401: LD_VAR 0 5
50405: PPUSH
50406: CALL_OW 247
50410: PUSH
50411: LD_INT 2
50413: DOUBLE
50414: EQUAL
50415: IFTRUE 50419
50417: GO 50815
50419: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
50420: LD_VAR 0 5
50424: PPUSH
50425: CALL_OW 256
50429: PUSH
50430: LD_INT 650
50432: GREATER
50433: PUSH
50434: LD_VAR 0 5
50438: PPUSH
50439: LD_VAR 0 14
50443: PPUSH
50444: CALL_OW 296
50448: PUSH
50449: LD_INT 40
50451: LESS
50452: PUSH
50453: LD_VAR 0 14
50457: PPUSH
50458: LD_EXP 75
50462: PUSH
50463: LD_VAR 0 1
50467: ARRAY
50468: PPUSH
50469: CALL_OW 308
50473: OR
50474: AND
50475: IFFALSE 50597
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
50477: LD_VAR 0 5
50481: PPUSH
50482: CALL_OW 262
50486: PUSH
50487: LD_INT 1
50489: EQUAL
50490: PUSH
50491: LD_VAR 0 5
50495: PPUSH
50496: CALL_OW 261
50500: PUSH
50501: LD_INT 30
50503: LESS
50504: AND
50505: PUSH
50506: LD_VAR 0 8
50510: AND
50511: IFFALSE 50581
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
50513: LD_VAR 0 5
50517: PPUSH
50518: LD_VAR 0 8
50522: PPUSH
50523: LD_VAR 0 5
50527: PPUSH
50528: CALL_OW 74
50532: PPUSH
50533: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
50537: LD_VAR 0 5
50541: PPUSH
50542: LD_VAR 0 8
50546: PPUSH
50547: LD_VAR 0 5
50551: PPUSH
50552: CALL_OW 74
50556: PPUSH
50557: CALL_OW 296
50561: PUSH
50562: LD_INT 6
50564: LESS
50565: IFFALSE 50579
// SetFuel ( i , 100 ) ;
50567: LD_VAR 0 5
50571: PPUSH
50572: LD_INT 100
50574: PPUSH
50575: CALL_OW 240
// end else
50579: GO 50595
// ComAttackUnit ( i , e ) ;
50581: LD_VAR 0 5
50585: PPUSH
50586: LD_VAR 0 14
50590: PPUSH
50591: CALL_OW 115
// end else
50595: GO 50698
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
50597: LD_VAR 0 14
50601: PPUSH
50602: LD_EXP 75
50606: PUSH
50607: LD_VAR 0 1
50611: ARRAY
50612: PPUSH
50613: CALL_OW 308
50617: NOT
50618: PUSH
50619: LD_VAR 0 5
50623: PPUSH
50624: LD_VAR 0 14
50628: PPUSH
50629: CALL_OW 296
50633: PUSH
50634: LD_INT 40
50636: GREATEREQUAL
50637: AND
50638: PUSH
50639: LD_VAR 0 5
50643: PPUSH
50644: CALL_OW 256
50648: PUSH
50649: LD_INT 650
50651: LESSEQUAL
50652: OR
50653: PUSH
50654: LD_VAR 0 5
50658: PPUSH
50659: LD_EXP 74
50663: PUSH
50664: LD_VAR 0 1
50668: ARRAY
50669: PPUSH
50670: CALL_OW 308
50674: NOT
50675: AND
50676: IFFALSE 50698
// ComMoveToArea ( i , mc_parking [ base ] ) ;
50678: LD_VAR 0 5
50682: PPUSH
50683: LD_EXP 74
50687: PUSH
50688: LD_VAR 0 1
50692: ARRAY
50693: PPUSH
50694: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
50698: LD_VAR 0 5
50702: PPUSH
50703: CALL_OW 256
50707: PUSH
50708: LD_INT 998
50710: LESS
50711: PUSH
50712: LD_VAR 0 5
50716: PPUSH
50717: CALL_OW 263
50721: PUSH
50722: LD_INT 1
50724: EQUAL
50725: AND
50726: PUSH
50727: LD_VAR 0 5
50731: PPUSH
50732: CALL_OW 311
50736: AND
50737: PUSH
50738: LD_VAR 0 5
50742: PPUSH
50743: LD_EXP 74
50747: PUSH
50748: LD_VAR 0 1
50752: ARRAY
50753: PPUSH
50754: CALL_OW 308
50758: AND
50759: IFFALSE 50813
// begin mech := IsDrivenBy ( i ) ;
50761: LD_ADDR_VAR 0 10
50765: PUSH
50766: LD_VAR 0 5
50770: PPUSH
50771: CALL_OW 311
50775: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
50776: LD_VAR 0 10
50780: PPUSH
50781: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
50785: LD_VAR 0 10
50789: PPUSH
50790: LD_VAR 0 5
50794: PPUSH
50795: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
50799: LD_VAR 0 10
50803: PPUSH
50804: LD_VAR 0 5
50808: PPUSH
50809: CALL_OW 180
// end ; end ; unit_human :
50813: GO 51080
50815: LD_INT 1
50817: DOUBLE
50818: EQUAL
50819: IFTRUE 50823
50821: GO 51079
50823: POP
// begin b := IsInUnit ( i ) ;
50824: LD_ADDR_VAR 0 19
50828: PUSH
50829: LD_VAR 0 5
50833: PPUSH
50834: CALL_OW 310
50838: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
50839: LD_ADDR_VAR 0 20
50843: PUSH
50844: LD_VAR 0 19
50848: NOT
50849: PUSH
50850: LD_VAR 0 19
50854: PPUSH
50855: CALL_OW 266
50859: PUSH
50860: LD_INT 32
50862: PUSH
50863: LD_INT 31
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: IN
50870: OR
50871: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
50872: LD_VAR 0 17
50876: PUSH
50877: LD_VAR 0 2
50881: PPUSH
50882: LD_INT 21
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PPUSH
50892: CALL_OW 72
50896: PUSH
50897: LD_INT 1
50899: LESSEQUAL
50900: OR
50901: PUSH
50902: LD_VAR 0 20
50906: AND
50907: PUSH
50908: LD_VAR 0 5
50912: PUSH
50913: LD_VAR 0 18
50917: IN
50918: NOT
50919: AND
50920: IFFALSE 51013
// begin if b then
50922: LD_VAR 0 19
50926: IFFALSE 50975
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
50928: LD_VAR 0 19
50932: PPUSH
50933: LD_VAR 0 3
50937: PPUSH
50938: LD_VAR 0 19
50942: PPUSH
50943: CALL_OW 74
50947: PPUSH
50948: CALL_OW 296
50952: PUSH
50953: LD_INT 10
50955: LESS
50956: PUSH
50957: LD_VAR 0 19
50961: PPUSH
50962: CALL_OW 461
50966: PUSH
50967: LD_INT 7
50969: NONEQUAL
50970: AND
50971: IFFALSE 50975
// continue ;
50973: GO 50290
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
50975: LD_ADDR_VAR 0 18
50979: PUSH
50980: LD_VAR 0 18
50984: PPUSH
50985: LD_VAR 0 18
50989: PUSH
50990: LD_INT 1
50992: PLUS
50993: PPUSH
50994: LD_VAR 0 5
50998: PPUSH
50999: CALL_OW 1
51003: ST_TO_ADDR
// ComExitBuilding ( i ) ;
51004: LD_VAR 0 5
51008: PPUSH
51009: CALL_OW 122
// end ; if sold_defenders then
51013: LD_VAR 0 18
51017: IFFALSE 51077
// if i in sold_defenders then
51019: LD_VAR 0 5
51023: PUSH
51024: LD_VAR 0 18
51028: IN
51029: IFFALSE 51077
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
51031: LD_VAR 0 5
51035: PPUSH
51036: CALL_OW 314
51040: NOT
51041: PUSH
51042: LD_VAR 0 5
51046: PPUSH
51047: LD_VAR 0 14
51051: PPUSH
51052: CALL_OW 296
51056: PUSH
51057: LD_INT 30
51059: LESS
51060: AND
51061: IFFALSE 51077
// ComAttackUnit ( i , e ) ;
51063: LD_VAR 0 5
51067: PPUSH
51068: LD_VAR 0 14
51072: PPUSH
51073: CALL_OW 115
// end ; end ; end ;
51077: GO 51080
51079: POP
// if IsDead ( i ) then
51080: LD_VAR 0 5
51084: PPUSH
51085: CALL_OW 301
51089: IFFALSE 51107
// defenders := defenders diff i ;
51091: LD_ADDR_VAR 0 2
51095: PUSH
51096: LD_VAR 0 2
51100: PUSH
51101: LD_VAR 0 5
51105: DIFF
51106: ST_TO_ADDR
// end ;
51107: GO 50290
51109: POP
51110: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
51111: LD_VAR 0 3
51115: NOT
51116: PUSH
51117: LD_VAR 0 2
51121: NOT
51122: OR
51123: PUSH
51124: LD_EXP 50
51128: PUSH
51129: LD_VAR 0 1
51133: ARRAY
51134: NOT
51135: OR
51136: IFFALSE 50194
// MC_Reset ( base , 18 ) ;
51138: LD_VAR 0 1
51142: PPUSH
51143: LD_INT 18
51145: PPUSH
51146: CALL 21460 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
51150: LD_ADDR_VAR 0 2
51154: PUSH
51155: LD_VAR 0 2
51159: PUSH
51160: LD_VAR 0 2
51164: PPUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 25
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 25
51180: PUSH
51181: LD_INT 5
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 25
51190: PUSH
51191: LD_INT 8
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 25
51200: PUSH
51201: LD_INT 9
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: PPUSH
51215: CALL_OW 72
51219: DIFF
51220: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
51221: LD_VAR 0 3
51225: NOT
51226: PUSH
51227: LD_VAR 0 2
51231: PPUSH
51232: LD_INT 21
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 72
51246: AND
51247: IFFALSE 51585
// begin tmp := FilterByTag ( defenders , 19 ) ;
51249: LD_ADDR_VAR 0 12
51253: PUSH
51254: LD_VAR 0 2
51258: PPUSH
51259: LD_INT 19
51261: PPUSH
51262: CALL 88048 0 2
51266: ST_TO_ADDR
// if tmp then
51267: LD_VAR 0 12
51271: IFFALSE 51341
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
51273: LD_ADDR_VAR 0 12
51277: PUSH
51278: LD_VAR 0 12
51282: PPUSH
51283: LD_INT 25
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PPUSH
51293: CALL_OW 72
51297: ST_TO_ADDR
// if tmp then
51298: LD_VAR 0 12
51302: IFFALSE 51341
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
51304: LD_ADDR_EXP 62
51308: PUSH
51309: LD_EXP 62
51313: PPUSH
51314: LD_VAR 0 1
51318: PPUSH
51319: LD_EXP 62
51323: PUSH
51324: LD_VAR 0 1
51328: ARRAY
51329: PUSH
51330: LD_VAR 0 12
51334: UNION
51335: PPUSH
51336: CALL_OW 1
51340: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
51341: LD_VAR 0 1
51345: PPUSH
51346: LD_INT 19
51348: PPUSH
51349: CALL 21460 0 2
// repeat wait ( 0 0$1 ) ;
51353: LD_INT 35
51355: PPUSH
51356: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
51360: LD_EXP 50
51364: PUSH
51365: LD_VAR 0 1
51369: ARRAY
51370: NOT
51371: PUSH
51372: LD_EXP 50
51376: PUSH
51377: LD_VAR 0 1
51381: ARRAY
51382: PUSH
51383: EMPTY
51384: EQUAL
51385: OR
51386: IFFALSE 51423
// begin for i in defenders do
51388: LD_ADDR_VAR 0 5
51392: PUSH
51393: LD_VAR 0 2
51397: PUSH
51398: FOR_IN
51399: IFFALSE 51412
// ComStop ( i ) ;
51401: LD_VAR 0 5
51405: PPUSH
51406: CALL_OW 141
51410: GO 51398
51412: POP
51413: POP
// defenders := [ ] ;
51414: LD_ADDR_VAR 0 2
51418: PUSH
51419: EMPTY
51420: ST_TO_ADDR
// exit ;
51421: GO 51609
// end ; for i in defenders do
51423: LD_ADDR_VAR 0 5
51427: PUSH
51428: LD_VAR 0 2
51432: PUSH
51433: FOR_IN
51434: IFFALSE 51523
// begin if not IsInArea ( i , mc_parking [ base ] ) then
51436: LD_VAR 0 5
51440: PPUSH
51441: LD_EXP 74
51445: PUSH
51446: LD_VAR 0 1
51450: ARRAY
51451: PPUSH
51452: CALL_OW 308
51456: NOT
51457: IFFALSE 51481
// ComMoveToArea ( i , mc_parking [ base ] ) else
51459: LD_VAR 0 5
51463: PPUSH
51464: LD_EXP 74
51468: PUSH
51469: LD_VAR 0 1
51473: ARRAY
51474: PPUSH
51475: CALL_OW 113
51479: GO 51521
// if GetControl ( i ) = control_manual then
51481: LD_VAR 0 5
51485: PPUSH
51486: CALL_OW 263
51490: PUSH
51491: LD_INT 1
51493: EQUAL
51494: IFFALSE 51521
// if IsDrivenBy ( i ) then
51496: LD_VAR 0 5
51500: PPUSH
51501: CALL_OW 311
51505: IFFALSE 51521
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
51507: LD_VAR 0 5
51511: PPUSH
51512: CALL_OW 311
51516: PPUSH
51517: CALL_OW 121
// end ;
51521: GO 51433
51523: POP
51524: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
51525: LD_VAR 0 2
51529: PPUSH
51530: LD_INT 95
51532: PUSH
51533: LD_EXP 74
51537: PUSH
51538: LD_VAR 0 1
51542: ARRAY
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PPUSH
51548: CALL_OW 72
51552: PUSH
51553: LD_VAR 0 2
51557: EQUAL
51558: PUSH
51559: LD_EXP 73
51563: PUSH
51564: LD_VAR 0 1
51568: ARRAY
51569: OR
51570: PUSH
51571: LD_EXP 50
51575: PUSH
51576: LD_VAR 0 1
51580: ARRAY
51581: NOT
51582: OR
51583: IFFALSE 51353
// end ; MC_Reset ( base , 19 ) ;
51585: LD_VAR 0 1
51589: PPUSH
51590: LD_INT 19
51592: PPUSH
51593: CALL 21460 0 2
// MC_Reset ( base , 20 ) ;
51597: LD_VAR 0 1
51601: PPUSH
51602: LD_INT 20
51604: PPUSH
51605: CALL 21460 0 2
// end ;
51609: LD_VAR 0 4
51613: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51614: LD_INT 0
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
// result := false ;
51620: LD_ADDR_VAR 0 2
51624: PUSH
51625: LD_INT 0
51627: ST_TO_ADDR
// side := GetSide ( unit ) ;
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_VAR 0 1
51637: PPUSH
51638: CALL_OW 255
51642: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51643: LD_ADDR_VAR 0 4
51647: PUSH
51648: LD_VAR 0 1
51652: PPUSH
51653: CALL_OW 248
51657: ST_TO_ADDR
// case nat of 1 :
51658: LD_VAR 0 4
51662: PUSH
51663: LD_INT 1
51665: DOUBLE
51666: EQUAL
51667: IFTRUE 51671
51669: GO 51682
51671: POP
// tech := tech_lassight ; 2 :
51672: LD_ADDR_VAR 0 5
51676: PUSH
51677: LD_INT 12
51679: ST_TO_ADDR
51680: GO 51721
51682: LD_INT 2
51684: DOUBLE
51685: EQUAL
51686: IFTRUE 51690
51688: GO 51701
51690: POP
// tech := tech_mortar ; 3 :
51691: LD_ADDR_VAR 0 5
51695: PUSH
51696: LD_INT 41
51698: ST_TO_ADDR
51699: GO 51721
51701: LD_INT 3
51703: DOUBLE
51704: EQUAL
51705: IFTRUE 51709
51707: GO 51720
51709: POP
// tech := tech_bazooka ; end ;
51710: LD_ADDR_VAR 0 5
51714: PUSH
51715: LD_INT 44
51717: ST_TO_ADDR
51718: GO 51721
51720: POP
// if Researched ( side , tech ) then
51721: LD_VAR 0 3
51725: PPUSH
51726: LD_VAR 0 5
51730: PPUSH
51731: CALL_OW 325
51735: IFFALSE 51762
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51737: LD_ADDR_VAR 0 2
51741: PUSH
51742: LD_INT 5
51744: PUSH
51745: LD_INT 8
51747: PUSH
51748: LD_INT 9
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: PUSH
51756: LD_VAR 0 4
51760: ARRAY
51761: ST_TO_ADDR
// end ;
51762: LD_VAR 0 2
51766: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51767: LD_INT 0
51769: PPUSH
51770: PPUSH
51771: PPUSH
// if not mines then
51772: LD_VAR 0 2
51776: NOT
51777: IFFALSE 51781
// exit ;
51779: GO 51925
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51781: LD_ADDR_VAR 0 5
51785: PUSH
51786: LD_INT 81
51788: PUSH
51789: LD_VAR 0 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: LD_INT 21
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PPUSH
51819: CALL_OW 69
51823: ST_TO_ADDR
// for i in mines do
51824: LD_ADDR_VAR 0 4
51828: PUSH
51829: LD_VAR 0 2
51833: PUSH
51834: FOR_IN
51835: IFFALSE 51923
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
51837: LD_VAR 0 4
51841: PUSH
51842: LD_INT 1
51844: ARRAY
51845: PPUSH
51846: LD_VAR 0 4
51850: PUSH
51851: LD_INT 2
51853: ARRAY
51854: PPUSH
51855: CALL_OW 458
51859: NOT
51860: IFFALSE 51864
// continue ;
51862: GO 51834
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
51864: LD_VAR 0 4
51868: PUSH
51869: LD_INT 1
51871: ARRAY
51872: PPUSH
51873: LD_VAR 0 4
51877: PUSH
51878: LD_INT 2
51880: ARRAY
51881: PPUSH
51882: CALL_OW 428
51886: PUSH
51887: LD_VAR 0 5
51891: IN
51892: IFFALSE 51921
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
51894: LD_VAR 0 4
51898: PUSH
51899: LD_INT 1
51901: ARRAY
51902: PPUSH
51903: LD_VAR 0 4
51907: PUSH
51908: LD_INT 2
51910: ARRAY
51911: PPUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: CALL_OW 456
// end ;
51921: GO 51834
51923: POP
51924: POP
// end ;
51925: LD_VAR 0 3
51929: RET
// export function Count ( array ) ; var i ; begin
51930: LD_INT 0
51932: PPUSH
51933: PPUSH
// result := 0 ;
51934: LD_ADDR_VAR 0 2
51938: PUSH
51939: LD_INT 0
51941: ST_TO_ADDR
// for i in array do
51942: LD_ADDR_VAR 0 3
51946: PUSH
51947: LD_VAR 0 1
51951: PUSH
51952: FOR_IN
51953: IFFALSE 51977
// if i then
51955: LD_VAR 0 3
51959: IFFALSE 51975
// result := result + 1 ;
51961: LD_ADDR_VAR 0 2
51965: PUSH
51966: LD_VAR 0 2
51970: PUSH
51971: LD_INT 1
51973: PLUS
51974: ST_TO_ADDR
51975: GO 51952
51977: POP
51978: POP
// end ;
51979: LD_VAR 0 2
51983: RET
// export function IsEmpty ( building ) ; begin
51984: LD_INT 0
51986: PPUSH
// if not building then
51987: LD_VAR 0 1
51991: NOT
51992: IFFALSE 51996
// exit ;
51994: GO 52039
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
51996: LD_ADDR_VAR 0 2
52000: PUSH
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 22
52008: PUSH
52009: LD_VAR 0 1
52013: PPUSH
52014: CALL_OW 255
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 58
52025: PUSH
52026: EMPTY
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PPUSH
52033: CALL_OW 69
52037: IN
52038: ST_TO_ADDR
// end ;
52039: LD_VAR 0 2
52043: RET
// export function IsNotFull ( building ) ; begin
52044: LD_INT 0
52046: PPUSH
// if not building then
52047: LD_VAR 0 1
52051: NOT
52052: IFFALSE 52056
// exit ;
52054: GO 52075
// result := UnitsInside ( building ) < 6 ;
52056: LD_ADDR_VAR 0 2
52060: PUSH
52061: LD_VAR 0 1
52065: PPUSH
52066: CALL_OW 313
52070: PUSH
52071: LD_INT 6
52073: LESS
52074: ST_TO_ADDR
// end ;
52075: LD_VAR 0 2
52079: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52080: LD_INT 0
52082: PPUSH
52083: PPUSH
52084: PPUSH
52085: PPUSH
// tmp := [ ] ;
52086: LD_ADDR_VAR 0 3
52090: PUSH
52091: EMPTY
52092: ST_TO_ADDR
// list := [ ] ;
52093: LD_ADDR_VAR 0 5
52097: PUSH
52098: EMPTY
52099: ST_TO_ADDR
// for i = 16 to 25 do
52100: LD_ADDR_VAR 0 4
52104: PUSH
52105: DOUBLE
52106: LD_INT 16
52108: DEC
52109: ST_TO_ADDR
52110: LD_INT 25
52112: PUSH
52113: FOR_TO
52114: IFFALSE 52187
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52116: LD_ADDR_VAR 0 3
52120: PUSH
52121: LD_VAR 0 3
52125: PUSH
52126: LD_INT 22
52128: PUSH
52129: LD_VAR 0 1
52133: PPUSH
52134: CALL_OW 255
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 91
52145: PUSH
52146: LD_VAR 0 1
52150: PUSH
52151: LD_INT 6
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 30
52161: PUSH
52162: LD_VAR 0 4
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: PPUSH
52179: CALL_OW 69
52183: ADD
52184: ST_TO_ADDR
52185: GO 52113
52187: POP
52188: POP
// for i = 1 to tmp do
52189: LD_ADDR_VAR 0 4
52193: PUSH
52194: DOUBLE
52195: LD_INT 1
52197: DEC
52198: ST_TO_ADDR
52199: LD_VAR 0 3
52203: PUSH
52204: FOR_TO
52205: IFFALSE 52293
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52207: LD_ADDR_VAR 0 5
52211: PUSH
52212: LD_VAR 0 5
52216: PUSH
52217: LD_VAR 0 3
52221: PUSH
52222: LD_VAR 0 4
52226: ARRAY
52227: PPUSH
52228: CALL_OW 266
52232: PUSH
52233: LD_VAR 0 3
52237: PUSH
52238: LD_VAR 0 4
52242: ARRAY
52243: PPUSH
52244: CALL_OW 250
52248: PUSH
52249: LD_VAR 0 3
52253: PUSH
52254: LD_VAR 0 4
52258: ARRAY
52259: PPUSH
52260: CALL_OW 251
52264: PUSH
52265: LD_VAR 0 3
52269: PUSH
52270: LD_VAR 0 4
52274: ARRAY
52275: PPUSH
52276: CALL_OW 254
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: ADD
52290: ST_TO_ADDR
52291: GO 52204
52293: POP
52294: POP
// result := list ;
52295: LD_ADDR_VAR 0 2
52299: PUSH
52300: LD_VAR 0 5
52304: ST_TO_ADDR
// end ;
52305: LD_VAR 0 2
52309: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52310: LD_INT 0
52312: PPUSH
52313: PPUSH
52314: PPUSH
52315: PPUSH
52316: PPUSH
52317: PPUSH
52318: PPUSH
// if not factory then
52319: LD_VAR 0 1
52323: NOT
52324: IFFALSE 52328
// exit ;
52326: GO 52921
// if control = control_apeman then
52328: LD_VAR 0 4
52332: PUSH
52333: LD_INT 5
52335: EQUAL
52336: IFFALSE 52445
// begin tmp := UnitsInside ( factory ) ;
52338: LD_ADDR_VAR 0 8
52342: PUSH
52343: LD_VAR 0 1
52347: PPUSH
52348: CALL_OW 313
52352: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52353: LD_VAR 0 8
52357: PPUSH
52358: LD_INT 25
52360: PUSH
52361: LD_INT 12
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PPUSH
52368: CALL_OW 72
52372: NOT
52373: IFFALSE 52383
// control := control_manual ;
52375: LD_ADDR_VAR 0 4
52379: PUSH
52380: LD_INT 1
52382: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52383: LD_ADDR_VAR 0 8
52387: PUSH
52388: LD_VAR 0 1
52392: PPUSH
52393: CALL 52080 0 1
52397: ST_TO_ADDR
// if tmp then
52398: LD_VAR 0 8
52402: IFFALSE 52445
// begin for i in tmp do
52404: LD_ADDR_VAR 0 7
52408: PUSH
52409: LD_VAR 0 8
52413: PUSH
52414: FOR_IN
52415: IFFALSE 52443
// if i [ 1 ] = b_ext_radio then
52417: LD_VAR 0 7
52421: PUSH
52422: LD_INT 1
52424: ARRAY
52425: PUSH
52426: LD_INT 22
52428: EQUAL
52429: IFFALSE 52441
// begin control := control_remote ;
52431: LD_ADDR_VAR 0 4
52435: PUSH
52436: LD_INT 2
52438: ST_TO_ADDR
// break ;
52439: GO 52443
// end ;
52441: GO 52414
52443: POP
52444: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52445: LD_VAR 0 1
52449: PPUSH
52450: LD_VAR 0 2
52454: PPUSH
52455: LD_VAR 0 3
52459: PPUSH
52460: LD_VAR 0 4
52464: PPUSH
52465: LD_VAR 0 5
52469: PPUSH
52470: CALL_OW 448
52474: IFFALSE 52509
// begin result := [ chassis , engine , control , weapon ] ;
52476: LD_ADDR_VAR 0 6
52480: PUSH
52481: LD_VAR 0 2
52485: PUSH
52486: LD_VAR 0 3
52490: PUSH
52491: LD_VAR 0 4
52495: PUSH
52496: LD_VAR 0 5
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: ST_TO_ADDR
// exit ;
52507: GO 52921
// end ; _chassis := AvailableChassisList ( factory ) ;
52509: LD_ADDR_VAR 0 9
52513: PUSH
52514: LD_VAR 0 1
52518: PPUSH
52519: CALL_OW 475
52523: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52524: LD_ADDR_VAR 0 11
52528: PUSH
52529: LD_VAR 0 1
52533: PPUSH
52534: CALL_OW 476
52538: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52539: LD_ADDR_VAR 0 12
52543: PUSH
52544: LD_VAR 0 1
52548: PPUSH
52549: CALL_OW 477
52553: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52554: LD_ADDR_VAR 0 10
52558: PUSH
52559: LD_VAR 0 1
52563: PPUSH
52564: CALL_OW 478
52568: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52569: LD_VAR 0 9
52573: NOT
52574: PUSH
52575: LD_VAR 0 11
52579: NOT
52580: OR
52581: PUSH
52582: LD_VAR 0 12
52586: NOT
52587: OR
52588: PUSH
52589: LD_VAR 0 10
52593: NOT
52594: OR
52595: IFFALSE 52630
// begin result := [ chassis , engine , control , weapon ] ;
52597: LD_ADDR_VAR 0 6
52601: PUSH
52602: LD_VAR 0 2
52606: PUSH
52607: LD_VAR 0 3
52611: PUSH
52612: LD_VAR 0 4
52616: PUSH
52617: LD_VAR 0 5
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: ST_TO_ADDR
// exit ;
52628: GO 52921
// end ; if not chassis in _chassis then
52630: LD_VAR 0 2
52634: PUSH
52635: LD_VAR 0 9
52639: IN
52640: NOT
52641: IFFALSE 52667
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
52643: LD_ADDR_VAR 0 2
52647: PUSH
52648: LD_VAR 0 9
52652: PUSH
52653: LD_INT 1
52655: PPUSH
52656: LD_VAR 0 9
52660: PPUSH
52661: CALL_OW 12
52665: ARRAY
52666: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
52667: LD_VAR 0 2
52671: PPUSH
52672: LD_VAR 0 3
52676: PPUSH
52677: CALL 52926 0 2
52681: NOT
52682: IFFALSE 52741
// repeat engine := _engine [ 1 ] ;
52684: LD_ADDR_VAR 0 3
52688: PUSH
52689: LD_VAR 0 11
52693: PUSH
52694: LD_INT 1
52696: ARRAY
52697: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
52698: LD_ADDR_VAR 0 11
52702: PUSH
52703: LD_VAR 0 11
52707: PPUSH
52708: LD_INT 1
52710: PPUSH
52711: CALL_OW 3
52715: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
52716: LD_VAR 0 2
52720: PPUSH
52721: LD_VAR 0 3
52725: PPUSH
52726: CALL 52926 0 2
52730: PUSH
52731: LD_VAR 0 11
52735: PUSH
52736: EMPTY
52737: EQUAL
52738: OR
52739: IFFALSE 52684
// if not control in _control then
52741: LD_VAR 0 4
52745: PUSH
52746: LD_VAR 0 12
52750: IN
52751: NOT
52752: IFFALSE 52778
// control := _control [ rand ( 1 , _control ) ] ;
52754: LD_ADDR_VAR 0 4
52758: PUSH
52759: LD_VAR 0 12
52763: PUSH
52764: LD_INT 1
52766: PPUSH
52767: LD_VAR 0 12
52771: PPUSH
52772: CALL_OW 12
52776: ARRAY
52777: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
52778: LD_VAR 0 2
52782: PPUSH
52783: LD_VAR 0 5
52787: PPUSH
52788: CALL 53146 0 2
52792: NOT
52793: IFFALSE 52852
// repeat weapon := _weapon [ 1 ] ;
52795: LD_ADDR_VAR 0 5
52799: PUSH
52800: LD_VAR 0 10
52804: PUSH
52805: LD_INT 1
52807: ARRAY
52808: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
52809: LD_ADDR_VAR 0 10
52813: PUSH
52814: LD_VAR 0 10
52818: PPUSH
52819: LD_INT 1
52821: PPUSH
52822: CALL_OW 3
52826: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
52827: LD_VAR 0 2
52831: PPUSH
52832: LD_VAR 0 5
52836: PPUSH
52837: CALL 53146 0 2
52841: PUSH
52842: LD_VAR 0 10
52846: PUSH
52847: EMPTY
52848: EQUAL
52849: OR
52850: IFFALSE 52795
// result := [ ] ;
52852: LD_ADDR_VAR 0 6
52856: PUSH
52857: EMPTY
52858: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52859: LD_VAR 0 1
52863: PPUSH
52864: LD_VAR 0 2
52868: PPUSH
52869: LD_VAR 0 3
52873: PPUSH
52874: LD_VAR 0 4
52878: PPUSH
52879: LD_VAR 0 5
52883: PPUSH
52884: CALL_OW 448
52888: IFFALSE 52921
// result := [ chassis , engine , control , weapon ] ;
52890: LD_ADDR_VAR 0 6
52894: PUSH
52895: LD_VAR 0 2
52899: PUSH
52900: LD_VAR 0 3
52904: PUSH
52905: LD_VAR 0 4
52909: PUSH
52910: LD_VAR 0 5
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// end ;
52921: LD_VAR 0 6
52925: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
52926: LD_INT 0
52928: PPUSH
// if not chassis or not engine then
52929: LD_VAR 0 1
52933: NOT
52934: PUSH
52935: LD_VAR 0 2
52939: NOT
52940: OR
52941: IFFALSE 52945
// exit ;
52943: GO 53141
// case engine of engine_solar :
52945: LD_VAR 0 2
52949: PUSH
52950: LD_INT 2
52952: DOUBLE
52953: EQUAL
52954: IFTRUE 52958
52956: GO 52996
52958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
52959: LD_ADDR_VAR 0 3
52963: PUSH
52964: LD_INT 11
52966: PUSH
52967: LD_INT 12
52969: PUSH
52970: LD_INT 13
52972: PUSH
52973: LD_INT 14
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: ST_TO_ADDR
52994: GO 53125
52996: LD_INT 1
52998: DOUBLE
52999: EQUAL
53000: IFTRUE 53004
53002: GO 53066
53004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53005: LD_ADDR_VAR 0 3
53009: PUSH
53010: LD_INT 11
53012: PUSH
53013: LD_INT 12
53015: PUSH
53016: LD_INT 13
53018: PUSH
53019: LD_INT 14
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: LD_INT 4
53033: PUSH
53034: LD_INT 5
53036: PUSH
53037: LD_INT 21
53039: PUSH
53040: LD_INT 23
53042: PUSH
53043: LD_INT 22
53045: PUSH
53046: LD_INT 24
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
53064: GO 53125
53066: LD_INT 3
53068: DOUBLE
53069: EQUAL
53070: IFTRUE 53074
53072: GO 53124
53074: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53075: LD_ADDR_VAR 0 3
53079: PUSH
53080: LD_INT 13
53082: PUSH
53083: LD_INT 14
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: LD_INT 3
53091: PUSH
53092: LD_INT 4
53094: PUSH
53095: LD_INT 5
53097: PUSH
53098: LD_INT 21
53100: PUSH
53101: LD_INT 22
53103: PUSH
53104: LD_INT 23
53106: PUSH
53107: LD_INT 24
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
53122: GO 53125
53124: POP
// result := ( chassis in result ) ;
53125: LD_ADDR_VAR 0 3
53129: PUSH
53130: LD_VAR 0 1
53134: PUSH
53135: LD_VAR 0 3
53139: IN
53140: ST_TO_ADDR
// end ;
53141: LD_VAR 0 3
53145: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53146: LD_INT 0
53148: PPUSH
// if not chassis or not weapon then
53149: LD_VAR 0 1
53153: NOT
53154: PUSH
53155: LD_VAR 0 2
53159: NOT
53160: OR
53161: IFFALSE 53165
// exit ;
53163: GO 54191
// case weapon of us_machine_gun :
53165: LD_VAR 0 2
53169: PUSH
53170: LD_INT 2
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53178
53176: GO 53208
53178: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53179: LD_ADDR_VAR 0 3
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: LD_INT 5
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
53206: GO 54175
53208: LD_INT 3
53210: DOUBLE
53211: EQUAL
53212: IFTRUE 53216
53214: GO 53246
53216: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53217: LD_ADDR_VAR 0 3
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 3
53230: PUSH
53231: LD_INT 4
53233: PUSH
53234: LD_INT 5
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: ST_TO_ADDR
53244: GO 54175
53246: LD_INT 11
53248: DOUBLE
53249: EQUAL
53250: IFTRUE 53254
53252: GO 53284
53254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53255: LD_ADDR_VAR 0 3
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: LD_INT 4
53271: PUSH
53272: LD_INT 5
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
53282: GO 54175
53284: LD_INT 4
53286: DOUBLE
53287: EQUAL
53288: IFTRUE 53292
53290: GO 53318
53292: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53293: LD_ADDR_VAR 0 3
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: LD_INT 5
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
53316: GO 54175
53318: LD_INT 5
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53326
53324: GO 53352
53326: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53327: LD_ADDR_VAR 0 3
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: LD_INT 4
53340: PUSH
53341: LD_INT 5
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
53350: GO 54175
53352: LD_INT 9
53354: DOUBLE
53355: EQUAL
53356: IFTRUE 53360
53358: GO 53386
53360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53361: LD_ADDR_VAR 0 3
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 4
53374: PUSH
53375: LD_INT 5
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
53384: GO 54175
53386: LD_INT 7
53388: DOUBLE
53389: EQUAL
53390: IFTRUE 53394
53392: GO 53420
53394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53395: LD_ADDR_VAR 0 3
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 4
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
53418: GO 54175
53420: LD_INT 12
53422: DOUBLE
53423: EQUAL
53424: IFTRUE 53428
53426: GO 53454
53428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53429: LD_ADDR_VAR 0 3
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: LD_INT 5
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
53452: GO 54175
53454: LD_INT 13
53456: DOUBLE
53457: EQUAL
53458: IFTRUE 53462
53460: GO 53488
53462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53463: LD_ADDR_VAR 0 3
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 4
53476: PUSH
53477: LD_INT 5
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
53486: GO 54175
53488: LD_INT 14
53490: DOUBLE
53491: EQUAL
53492: IFTRUE 53496
53494: GO 53514
53496: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53497: LD_ADDR_VAR 0 3
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 5
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: ST_TO_ADDR
53512: GO 54175
53514: LD_INT 6
53516: DOUBLE
53517: EQUAL
53518: IFTRUE 53522
53520: GO 53540
53522: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53523: LD_ADDR_VAR 0 3
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: LD_INT 5
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: ST_TO_ADDR
53538: GO 54175
53540: LD_INT 10
53542: DOUBLE
53543: EQUAL
53544: IFTRUE 53548
53546: GO 53566
53548: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53549: LD_ADDR_VAR 0 3
53553: PUSH
53554: LD_INT 4
53556: PUSH
53557: LD_INT 5
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: ST_TO_ADDR
53564: GO 54175
53566: LD_INT 22
53568: DOUBLE
53569: EQUAL
53570: IFTRUE 53574
53572: GO 53600
53574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53575: LD_ADDR_VAR 0 3
53579: PUSH
53580: LD_INT 11
53582: PUSH
53583: LD_INT 12
53585: PUSH
53586: LD_INT 13
53588: PUSH
53589: LD_INT 14
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
53598: GO 54175
53600: LD_INT 23
53602: DOUBLE
53603: EQUAL
53604: IFTRUE 53608
53606: GO 53634
53608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53609: LD_ADDR_VAR 0 3
53613: PUSH
53614: LD_INT 11
53616: PUSH
53617: LD_INT 12
53619: PUSH
53620: LD_INT 13
53622: PUSH
53623: LD_INT 14
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: ST_TO_ADDR
53632: GO 54175
53634: LD_INT 24
53636: DOUBLE
53637: EQUAL
53638: IFTRUE 53642
53640: GO 53668
53642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
53643: LD_ADDR_VAR 0 3
53647: PUSH
53648: LD_INT 11
53650: PUSH
53651: LD_INT 12
53653: PUSH
53654: LD_INT 13
53656: PUSH
53657: LD_INT 14
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
53666: GO 54175
53668: LD_INT 30
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53676
53674: GO 53702
53676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
53677: LD_ADDR_VAR 0 3
53681: PUSH
53682: LD_INT 11
53684: PUSH
53685: LD_INT 12
53687: PUSH
53688: LD_INT 13
53690: PUSH
53691: LD_INT 14
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: ST_TO_ADDR
53700: GO 54175
53702: LD_INT 25
53704: DOUBLE
53705: EQUAL
53706: IFTRUE 53710
53708: GO 53728
53710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
53711: LD_ADDR_VAR 0 3
53715: PUSH
53716: LD_INT 13
53718: PUSH
53719: LD_INT 14
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: ST_TO_ADDR
53726: GO 54175
53728: LD_INT 27
53730: DOUBLE
53731: EQUAL
53732: IFTRUE 53736
53734: GO 53754
53736: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
53737: LD_ADDR_VAR 0 3
53741: PUSH
53742: LD_INT 13
53744: PUSH
53745: LD_INT 14
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: ST_TO_ADDR
53752: GO 54175
53754: LD_INT 28
53756: DOUBLE
53757: EQUAL
53758: IFTRUE 53762
53760: GO 53780
53762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
53763: LD_ADDR_VAR 0 3
53767: PUSH
53768: LD_INT 13
53770: PUSH
53771: LD_INT 14
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: ST_TO_ADDR
53778: GO 54175
53780: LD_INT 29
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53788
53786: GO 53806
53788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
53789: LD_ADDR_VAR 0 3
53793: PUSH
53794: LD_INT 13
53796: PUSH
53797: LD_INT 14
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: ST_TO_ADDR
53804: GO 54175
53806: LD_INT 31
53808: DOUBLE
53809: EQUAL
53810: IFTRUE 53814
53812: GO 53832
53814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
53815: LD_ADDR_VAR 0 3
53819: PUSH
53820: LD_INT 13
53822: PUSH
53823: LD_INT 14
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: ST_TO_ADDR
53830: GO 54175
53832: LD_INT 26
53834: DOUBLE
53835: EQUAL
53836: IFTRUE 53840
53838: GO 53858
53840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
53841: LD_ADDR_VAR 0 3
53845: PUSH
53846: LD_INT 13
53848: PUSH
53849: LD_INT 14
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: ST_TO_ADDR
53856: GO 54175
53858: LD_INT 42
53860: DOUBLE
53861: EQUAL
53862: IFTRUE 53866
53864: GO 53892
53866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
53867: LD_ADDR_VAR 0 3
53871: PUSH
53872: LD_INT 21
53874: PUSH
53875: LD_INT 22
53877: PUSH
53878: LD_INT 23
53880: PUSH
53881: LD_INT 24
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
53890: GO 54175
53892: LD_INT 43
53894: DOUBLE
53895: EQUAL
53896: IFTRUE 53900
53898: GO 53926
53900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
53901: LD_ADDR_VAR 0 3
53905: PUSH
53906: LD_INT 21
53908: PUSH
53909: LD_INT 22
53911: PUSH
53912: LD_INT 23
53914: PUSH
53915: LD_INT 24
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
53924: GO 54175
53926: LD_INT 44
53928: DOUBLE
53929: EQUAL
53930: IFTRUE 53934
53932: GO 53960
53934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
53935: LD_ADDR_VAR 0 3
53939: PUSH
53940: LD_INT 21
53942: PUSH
53943: LD_INT 22
53945: PUSH
53946: LD_INT 23
53948: PUSH
53949: LD_INT 24
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
53958: GO 54175
53960: LD_INT 45
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53968
53966: GO 53994
53968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
53969: LD_ADDR_VAR 0 3
53973: PUSH
53974: LD_INT 21
53976: PUSH
53977: LD_INT 22
53979: PUSH
53980: LD_INT 23
53982: PUSH
53983: LD_INT 24
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: ST_TO_ADDR
53992: GO 54175
53994: LD_INT 49
53996: DOUBLE
53997: EQUAL
53998: IFTRUE 54002
54000: GO 54028
54002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54003: LD_ADDR_VAR 0 3
54007: PUSH
54008: LD_INT 21
54010: PUSH
54011: LD_INT 22
54013: PUSH
54014: LD_INT 23
54016: PUSH
54017: LD_INT 24
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
54026: GO 54175
54028: LD_INT 51
54030: DOUBLE
54031: EQUAL
54032: IFTRUE 54036
54034: GO 54062
54036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54037: LD_ADDR_VAR 0 3
54041: PUSH
54042: LD_INT 21
54044: PUSH
54045: LD_INT 22
54047: PUSH
54048: LD_INT 23
54050: PUSH
54051: LD_INT 24
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
54060: GO 54175
54062: LD_INT 52
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54096
54070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54071: LD_ADDR_VAR 0 3
54075: PUSH
54076: LD_INT 21
54078: PUSH
54079: LD_INT 22
54081: PUSH
54082: LD_INT 23
54084: PUSH
54085: LD_INT 24
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
54094: GO 54175
54096: LD_INT 53
54098: DOUBLE
54099: EQUAL
54100: IFTRUE 54104
54102: GO 54122
54104: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54105: LD_ADDR_VAR 0 3
54109: PUSH
54110: LD_INT 23
54112: PUSH
54113: LD_INT 24
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: ST_TO_ADDR
54120: GO 54175
54122: LD_INT 46
54124: DOUBLE
54125: EQUAL
54126: IFTRUE 54130
54128: GO 54148
54130: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54131: LD_ADDR_VAR 0 3
54135: PUSH
54136: LD_INT 23
54138: PUSH
54139: LD_INT 24
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: ST_TO_ADDR
54146: GO 54175
54148: LD_INT 47
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54174
54156: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54157: LD_ADDR_VAR 0 3
54161: PUSH
54162: LD_INT 23
54164: PUSH
54165: LD_INT 24
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: ST_TO_ADDR
54172: GO 54175
54174: POP
// result := ( chassis in result ) ;
54175: LD_ADDR_VAR 0 3
54179: PUSH
54180: LD_VAR 0 1
54184: PUSH
54185: LD_VAR 0 3
54189: IN
54190: ST_TO_ADDR
// end ;
54191: LD_VAR 0 3
54195: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54196: LD_INT 0
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
// result := array ;
54205: LD_ADDR_VAR 0 5
54209: PUSH
54210: LD_VAR 0 1
54214: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54215: LD_VAR 0 1
54219: NOT
54220: PUSH
54221: LD_VAR 0 2
54225: NOT
54226: OR
54227: PUSH
54228: LD_VAR 0 3
54232: NOT
54233: OR
54234: PUSH
54235: LD_VAR 0 2
54239: PUSH
54240: LD_VAR 0 1
54244: GREATER
54245: OR
54246: PUSH
54247: LD_VAR 0 3
54251: PUSH
54252: LD_VAR 0 1
54256: GREATER
54257: OR
54258: IFFALSE 54262
// exit ;
54260: GO 54558
// if direction then
54262: LD_VAR 0 4
54266: IFFALSE 54330
// begin d := 1 ;
54268: LD_ADDR_VAR 0 9
54272: PUSH
54273: LD_INT 1
54275: ST_TO_ADDR
// if i_from > i_to then
54276: LD_VAR 0 2
54280: PUSH
54281: LD_VAR 0 3
54285: GREATER
54286: IFFALSE 54312
// length := ( array - i_from ) + i_to else
54288: LD_ADDR_VAR 0 11
54292: PUSH
54293: LD_VAR 0 1
54297: PUSH
54298: LD_VAR 0 2
54302: MINUS
54303: PUSH
54304: LD_VAR 0 3
54308: PLUS
54309: ST_TO_ADDR
54310: GO 54328
// length := i_to - i_from ;
54312: LD_ADDR_VAR 0 11
54316: PUSH
54317: LD_VAR 0 3
54321: PUSH
54322: LD_VAR 0 2
54326: MINUS
54327: ST_TO_ADDR
// end else
54328: GO 54391
// begin d := - 1 ;
54330: LD_ADDR_VAR 0 9
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: ST_TO_ADDR
// if i_from > i_to then
54339: LD_VAR 0 2
54343: PUSH
54344: LD_VAR 0 3
54348: GREATER
54349: IFFALSE 54369
// length := i_from - i_to else
54351: LD_ADDR_VAR 0 11
54355: PUSH
54356: LD_VAR 0 2
54360: PUSH
54361: LD_VAR 0 3
54365: MINUS
54366: ST_TO_ADDR
54367: GO 54391
// length := ( array - i_to ) + i_from ;
54369: LD_ADDR_VAR 0 11
54373: PUSH
54374: LD_VAR 0 1
54378: PUSH
54379: LD_VAR 0 3
54383: MINUS
54384: PUSH
54385: LD_VAR 0 2
54389: PLUS
54390: ST_TO_ADDR
// end ; if not length then
54391: LD_VAR 0 11
54395: NOT
54396: IFFALSE 54400
// exit ;
54398: GO 54558
// tmp := array ;
54400: LD_ADDR_VAR 0 10
54404: PUSH
54405: LD_VAR 0 1
54409: ST_TO_ADDR
// for i = 1 to length do
54410: LD_ADDR_VAR 0 6
54414: PUSH
54415: DOUBLE
54416: LD_INT 1
54418: DEC
54419: ST_TO_ADDR
54420: LD_VAR 0 11
54424: PUSH
54425: FOR_TO
54426: IFFALSE 54546
// begin for j = 1 to array do
54428: LD_ADDR_VAR 0 7
54432: PUSH
54433: DOUBLE
54434: LD_INT 1
54436: DEC
54437: ST_TO_ADDR
54438: LD_VAR 0 1
54442: PUSH
54443: FOR_TO
54444: IFFALSE 54532
// begin k := j + d ;
54446: LD_ADDR_VAR 0 8
54450: PUSH
54451: LD_VAR 0 7
54455: PUSH
54456: LD_VAR 0 9
54460: PLUS
54461: ST_TO_ADDR
// if k > array then
54462: LD_VAR 0 8
54466: PUSH
54467: LD_VAR 0 1
54471: GREATER
54472: IFFALSE 54482
// k := 1 ;
54474: LD_ADDR_VAR 0 8
54478: PUSH
54479: LD_INT 1
54481: ST_TO_ADDR
// if not k then
54482: LD_VAR 0 8
54486: NOT
54487: IFFALSE 54499
// k := array ;
54489: LD_ADDR_VAR 0 8
54493: PUSH
54494: LD_VAR 0 1
54498: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54499: LD_ADDR_VAR 0 10
54503: PUSH
54504: LD_VAR 0 10
54508: PPUSH
54509: LD_VAR 0 8
54513: PPUSH
54514: LD_VAR 0 1
54518: PUSH
54519: LD_VAR 0 7
54523: ARRAY
54524: PPUSH
54525: CALL_OW 1
54529: ST_TO_ADDR
// end ;
54530: GO 54443
54532: POP
54533: POP
// array := tmp ;
54534: LD_ADDR_VAR 0 1
54538: PUSH
54539: LD_VAR 0 10
54543: ST_TO_ADDR
// end ;
54544: GO 54425
54546: POP
54547: POP
// result := array ;
54548: LD_ADDR_VAR 0 5
54552: PUSH
54553: LD_VAR 0 1
54557: ST_TO_ADDR
// end ;
54558: LD_VAR 0 5
54562: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54563: LD_INT 0
54565: PPUSH
54566: PPUSH
// result := 0 ;
54567: LD_ADDR_VAR 0 3
54571: PUSH
54572: LD_INT 0
54574: ST_TO_ADDR
// if not array or not value in array then
54575: LD_VAR 0 1
54579: NOT
54580: PUSH
54581: LD_VAR 0 2
54585: PUSH
54586: LD_VAR 0 1
54590: IN
54591: NOT
54592: OR
54593: IFFALSE 54597
// exit ;
54595: GO 54651
// for i = 1 to array do
54597: LD_ADDR_VAR 0 4
54601: PUSH
54602: DOUBLE
54603: LD_INT 1
54605: DEC
54606: ST_TO_ADDR
54607: LD_VAR 0 1
54611: PUSH
54612: FOR_TO
54613: IFFALSE 54649
// if value = array [ i ] then
54615: LD_VAR 0 2
54619: PUSH
54620: LD_VAR 0 1
54624: PUSH
54625: LD_VAR 0 4
54629: ARRAY
54630: EQUAL
54631: IFFALSE 54647
// begin result := i ;
54633: LD_ADDR_VAR 0 3
54637: PUSH
54638: LD_VAR 0 4
54642: ST_TO_ADDR
// exit ;
54643: POP
54644: POP
54645: GO 54651
// end ;
54647: GO 54612
54649: POP
54650: POP
// end ;
54651: LD_VAR 0 3
54655: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
54656: LD_INT 0
54658: PPUSH
// vc_chassis := chassis ;
54659: LD_ADDR_OWVAR 37
54663: PUSH
54664: LD_VAR 0 1
54668: ST_TO_ADDR
// vc_engine := engine ;
54669: LD_ADDR_OWVAR 39
54673: PUSH
54674: LD_VAR 0 2
54678: ST_TO_ADDR
// vc_control := control ;
54679: LD_ADDR_OWVAR 38
54683: PUSH
54684: LD_VAR 0 3
54688: ST_TO_ADDR
// vc_weapon := weapon ;
54689: LD_ADDR_OWVAR 40
54693: PUSH
54694: LD_VAR 0 4
54698: ST_TO_ADDR
// vc_fuel_battery := fuel ;
54699: LD_ADDR_OWVAR 41
54703: PUSH
54704: LD_VAR 0 5
54708: ST_TO_ADDR
// end ;
54709: LD_VAR 0 6
54713: RET
// export function WantPlant ( unit ) ; var task ; begin
54714: LD_INT 0
54716: PPUSH
54717: PPUSH
// result := false ;
54718: LD_ADDR_VAR 0 2
54722: PUSH
54723: LD_INT 0
54725: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
54726: LD_ADDR_VAR 0 3
54730: PUSH
54731: LD_VAR 0 1
54735: PPUSH
54736: CALL_OW 437
54740: ST_TO_ADDR
// if task then
54741: LD_VAR 0 3
54745: IFFALSE 54773
// if task [ 1 ] [ 1 ] = p then
54747: LD_VAR 0 3
54751: PUSH
54752: LD_INT 1
54754: ARRAY
54755: PUSH
54756: LD_INT 1
54758: ARRAY
54759: PUSH
54760: LD_STRING p
54762: EQUAL
54763: IFFALSE 54773
// result := true ;
54765: LD_ADDR_VAR 0 2
54769: PUSH
54770: LD_INT 1
54772: ST_TO_ADDR
// end ;
54773: LD_VAR 0 2
54777: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
54778: LD_INT 0
54780: PPUSH
54781: PPUSH
54782: PPUSH
54783: PPUSH
// if pos < 1 then
54784: LD_VAR 0 2
54788: PUSH
54789: LD_INT 1
54791: LESS
54792: IFFALSE 54796
// exit ;
54794: GO 55099
// if pos = 1 then
54796: LD_VAR 0 2
54800: PUSH
54801: LD_INT 1
54803: EQUAL
54804: IFFALSE 54837
// result := Replace ( arr , pos [ 1 ] , value ) else
54806: LD_ADDR_VAR 0 4
54810: PUSH
54811: LD_VAR 0 1
54815: PPUSH
54816: LD_VAR 0 2
54820: PUSH
54821: LD_INT 1
54823: ARRAY
54824: PPUSH
54825: LD_VAR 0 3
54829: PPUSH
54830: CALL_OW 1
54834: ST_TO_ADDR
54835: GO 55099
// begin tmp := arr ;
54837: LD_ADDR_VAR 0 6
54841: PUSH
54842: LD_VAR 0 1
54846: ST_TO_ADDR
// s_arr := [ tmp ] ;
54847: LD_ADDR_VAR 0 7
54851: PUSH
54852: LD_VAR 0 6
54856: PUSH
54857: EMPTY
54858: LIST
54859: ST_TO_ADDR
// for i = 1 to pos - 1 do
54860: LD_ADDR_VAR 0 5
54864: PUSH
54865: DOUBLE
54866: LD_INT 1
54868: DEC
54869: ST_TO_ADDR
54870: LD_VAR 0 2
54874: PUSH
54875: LD_INT 1
54877: MINUS
54878: PUSH
54879: FOR_TO
54880: IFFALSE 54925
// begin tmp := tmp [ pos [ i ] ] ;
54882: LD_ADDR_VAR 0 6
54886: PUSH
54887: LD_VAR 0 6
54891: PUSH
54892: LD_VAR 0 2
54896: PUSH
54897: LD_VAR 0 5
54901: ARRAY
54902: ARRAY
54903: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
54904: LD_ADDR_VAR 0 7
54908: PUSH
54909: LD_VAR 0 7
54913: PUSH
54914: LD_VAR 0 6
54918: PUSH
54919: EMPTY
54920: LIST
54921: ADD
54922: ST_TO_ADDR
// end ;
54923: GO 54879
54925: POP
54926: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
54927: LD_ADDR_VAR 0 6
54931: PUSH
54932: LD_VAR 0 6
54936: PPUSH
54937: LD_VAR 0 2
54941: PUSH
54942: LD_VAR 0 2
54946: ARRAY
54947: PPUSH
54948: LD_VAR 0 3
54952: PPUSH
54953: CALL_OW 1
54957: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
54958: LD_ADDR_VAR 0 7
54962: PUSH
54963: LD_VAR 0 7
54967: PPUSH
54968: LD_VAR 0 7
54972: PPUSH
54973: LD_VAR 0 6
54977: PPUSH
54978: CALL_OW 1
54982: ST_TO_ADDR
// for i = s_arr downto 2 do
54983: LD_ADDR_VAR 0 5
54987: PUSH
54988: DOUBLE
54989: LD_VAR 0 7
54993: INC
54994: ST_TO_ADDR
54995: LD_INT 2
54997: PUSH
54998: FOR_DOWNTO
54999: IFFALSE 55083
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55001: LD_ADDR_VAR 0 6
55005: PUSH
55006: LD_VAR 0 7
55010: PUSH
55011: LD_VAR 0 5
55015: PUSH
55016: LD_INT 1
55018: MINUS
55019: ARRAY
55020: PPUSH
55021: LD_VAR 0 2
55025: PUSH
55026: LD_VAR 0 5
55030: PUSH
55031: LD_INT 1
55033: MINUS
55034: ARRAY
55035: PPUSH
55036: LD_VAR 0 7
55040: PUSH
55041: LD_VAR 0 5
55045: ARRAY
55046: PPUSH
55047: CALL_OW 1
55051: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55052: LD_ADDR_VAR 0 7
55056: PUSH
55057: LD_VAR 0 7
55061: PPUSH
55062: LD_VAR 0 5
55066: PUSH
55067: LD_INT 1
55069: MINUS
55070: PPUSH
55071: LD_VAR 0 6
55075: PPUSH
55076: CALL_OW 1
55080: ST_TO_ADDR
// end ;
55081: GO 54998
55083: POP
55084: POP
// result := s_arr [ 1 ] ;
55085: LD_ADDR_VAR 0 4
55089: PUSH
55090: LD_VAR 0 7
55094: PUSH
55095: LD_INT 1
55097: ARRAY
55098: ST_TO_ADDR
// end ; end ;
55099: LD_VAR 0 4
55103: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55104: LD_INT 0
55106: PPUSH
55107: PPUSH
// if not list then
55108: LD_VAR 0 1
55112: NOT
55113: IFFALSE 55117
// exit ;
55115: GO 55208
// i := list [ pos1 ] ;
55117: LD_ADDR_VAR 0 5
55121: PUSH
55122: LD_VAR 0 1
55126: PUSH
55127: LD_VAR 0 2
55131: ARRAY
55132: ST_TO_ADDR
// if not i then
55133: LD_VAR 0 5
55137: NOT
55138: IFFALSE 55142
// exit ;
55140: GO 55208
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55142: LD_ADDR_VAR 0 1
55146: PUSH
55147: LD_VAR 0 1
55151: PPUSH
55152: LD_VAR 0 2
55156: PPUSH
55157: LD_VAR 0 1
55161: PUSH
55162: LD_VAR 0 3
55166: ARRAY
55167: PPUSH
55168: CALL_OW 1
55172: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55173: LD_ADDR_VAR 0 1
55177: PUSH
55178: LD_VAR 0 1
55182: PPUSH
55183: LD_VAR 0 3
55187: PPUSH
55188: LD_VAR 0 5
55192: PPUSH
55193: CALL_OW 1
55197: ST_TO_ADDR
// result := list ;
55198: LD_ADDR_VAR 0 4
55202: PUSH
55203: LD_VAR 0 1
55207: ST_TO_ADDR
// end ;
55208: LD_VAR 0 4
55212: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55213: LD_INT 0
55215: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55216: LD_ADDR_VAR 0 5
55220: PUSH
55221: LD_VAR 0 1
55225: PPUSH
55226: CALL_OW 250
55230: PPUSH
55231: LD_VAR 0 1
55235: PPUSH
55236: CALL_OW 251
55240: PPUSH
55241: LD_VAR 0 2
55245: PPUSH
55246: LD_VAR 0 3
55250: PPUSH
55251: LD_VAR 0 4
55255: PPUSH
55256: CALL 55266 0 5
55260: ST_TO_ADDR
// end ;
55261: LD_VAR 0 5
55265: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55266: LD_INT 0
55268: PPUSH
55269: PPUSH
55270: PPUSH
55271: PPUSH
// if not list then
55272: LD_VAR 0 3
55276: NOT
55277: IFFALSE 55281
// exit ;
55279: GO 55669
// result := [ ] ;
55281: LD_ADDR_VAR 0 6
55285: PUSH
55286: EMPTY
55287: ST_TO_ADDR
// for i in list do
55288: LD_ADDR_VAR 0 7
55292: PUSH
55293: LD_VAR 0 3
55297: PUSH
55298: FOR_IN
55299: IFFALSE 55501
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55301: LD_ADDR_VAR 0 9
55305: PUSH
55306: LD_VAR 0 7
55310: PPUSH
55311: LD_VAR 0 1
55315: PPUSH
55316: LD_VAR 0 2
55320: PPUSH
55321: CALL_OW 297
55325: ST_TO_ADDR
// if not result then
55326: LD_VAR 0 6
55330: NOT
55331: IFFALSE 55357
// result := [ [ i , tmp ] ] else
55333: LD_ADDR_VAR 0 6
55337: PUSH
55338: LD_VAR 0 7
55342: PUSH
55343: LD_VAR 0 9
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: ST_TO_ADDR
55355: GO 55499
// begin if result [ result ] [ 2 ] < tmp then
55357: LD_VAR 0 6
55361: PUSH
55362: LD_VAR 0 6
55366: ARRAY
55367: PUSH
55368: LD_INT 2
55370: ARRAY
55371: PUSH
55372: LD_VAR 0 9
55376: LESS
55377: IFFALSE 55419
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55379: LD_ADDR_VAR 0 6
55383: PUSH
55384: LD_VAR 0 6
55388: PPUSH
55389: LD_VAR 0 6
55393: PUSH
55394: LD_INT 1
55396: PLUS
55397: PPUSH
55398: LD_VAR 0 7
55402: PUSH
55403: LD_VAR 0 9
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PPUSH
55412: CALL_OW 2
55416: ST_TO_ADDR
55417: GO 55499
// for j = 1 to result do
55419: LD_ADDR_VAR 0 8
55423: PUSH
55424: DOUBLE
55425: LD_INT 1
55427: DEC
55428: ST_TO_ADDR
55429: LD_VAR 0 6
55433: PUSH
55434: FOR_TO
55435: IFFALSE 55497
// begin if tmp < result [ j ] [ 2 ] then
55437: LD_VAR 0 9
55441: PUSH
55442: LD_VAR 0 6
55446: PUSH
55447: LD_VAR 0 8
55451: ARRAY
55452: PUSH
55453: LD_INT 2
55455: ARRAY
55456: LESS
55457: IFFALSE 55495
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55459: LD_ADDR_VAR 0 6
55463: PUSH
55464: LD_VAR 0 6
55468: PPUSH
55469: LD_VAR 0 8
55473: PPUSH
55474: LD_VAR 0 7
55478: PUSH
55479: LD_VAR 0 9
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PPUSH
55488: CALL_OW 2
55492: ST_TO_ADDR
// break ;
55493: GO 55497
// end ; end ;
55495: GO 55434
55497: POP
55498: POP
// end ; end ;
55499: GO 55298
55501: POP
55502: POP
// if result and not asc then
55503: LD_VAR 0 6
55507: PUSH
55508: LD_VAR 0 4
55512: NOT
55513: AND
55514: IFFALSE 55589
// begin tmp := result ;
55516: LD_ADDR_VAR 0 9
55520: PUSH
55521: LD_VAR 0 6
55525: ST_TO_ADDR
// for i = tmp downto 1 do
55526: LD_ADDR_VAR 0 7
55530: PUSH
55531: DOUBLE
55532: LD_VAR 0 9
55536: INC
55537: ST_TO_ADDR
55538: LD_INT 1
55540: PUSH
55541: FOR_DOWNTO
55542: IFFALSE 55587
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55544: LD_ADDR_VAR 0 6
55548: PUSH
55549: LD_VAR 0 6
55553: PPUSH
55554: LD_VAR 0 9
55558: PUSH
55559: LD_VAR 0 7
55563: MINUS
55564: PUSH
55565: LD_INT 1
55567: PLUS
55568: PPUSH
55569: LD_VAR 0 9
55573: PUSH
55574: LD_VAR 0 7
55578: ARRAY
55579: PPUSH
55580: CALL_OW 1
55584: ST_TO_ADDR
55585: GO 55541
55587: POP
55588: POP
// end ; tmp := [ ] ;
55589: LD_ADDR_VAR 0 9
55593: PUSH
55594: EMPTY
55595: ST_TO_ADDR
// if mode then
55596: LD_VAR 0 5
55600: IFFALSE 55669
// begin for i = 1 to result do
55602: LD_ADDR_VAR 0 7
55606: PUSH
55607: DOUBLE
55608: LD_INT 1
55610: DEC
55611: ST_TO_ADDR
55612: LD_VAR 0 6
55616: PUSH
55617: FOR_TO
55618: IFFALSE 55657
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
55620: LD_ADDR_VAR 0 9
55624: PUSH
55625: LD_VAR 0 9
55629: PPUSH
55630: LD_VAR 0 7
55634: PPUSH
55635: LD_VAR 0 6
55639: PUSH
55640: LD_VAR 0 7
55644: ARRAY
55645: PUSH
55646: LD_INT 1
55648: ARRAY
55649: PPUSH
55650: CALL_OW 1
55654: ST_TO_ADDR
55655: GO 55617
55657: POP
55658: POP
// result := tmp ;
55659: LD_ADDR_VAR 0 6
55663: PUSH
55664: LD_VAR 0 9
55668: ST_TO_ADDR
// end ; end ;
55669: LD_VAR 0 6
55673: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
55674: LD_INT 0
55676: PPUSH
55677: PPUSH
55678: PPUSH
55679: PPUSH
55680: PPUSH
55681: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
55682: LD_ADDR_VAR 0 5
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: ST_TO_ADDR
// if not x or not y then
55704: LD_VAR 0 2
55708: NOT
55709: PUSH
55710: LD_VAR 0 3
55714: NOT
55715: OR
55716: IFFALSE 55720
// exit ;
55718: GO 57366
// if not range then
55720: LD_VAR 0 4
55724: NOT
55725: IFFALSE 55735
// range := 10 ;
55727: LD_ADDR_VAR 0 4
55731: PUSH
55732: LD_INT 10
55734: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55735: LD_ADDR_VAR 0 8
55739: PUSH
55740: LD_INT 81
55742: PUSH
55743: LD_VAR 0 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 92
55754: PUSH
55755: LD_VAR 0 2
55759: PUSH
55760: LD_VAR 0 3
55764: PUSH
55765: LD_VAR 0 4
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 21
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: PPUSH
55798: CALL_OW 69
55802: ST_TO_ADDR
// if not tmp then
55803: LD_VAR 0 8
55807: NOT
55808: IFFALSE 55812
// exit ;
55810: GO 57366
// for i in tmp do
55812: LD_ADDR_VAR 0 6
55816: PUSH
55817: LD_VAR 0 8
55821: PUSH
55822: FOR_IN
55823: IFFALSE 57341
// begin points := [ 0 , 0 , 0 ] ;
55825: LD_ADDR_VAR 0 9
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// bpoints := 1 ;
55844: LD_ADDR_VAR 0 10
55848: PUSH
55849: LD_INT 1
55851: ST_TO_ADDR
// case GetType ( i ) of unit_human :
55852: LD_VAR 0 6
55856: PPUSH
55857: CALL_OW 247
55861: PUSH
55862: LD_INT 1
55864: DOUBLE
55865: EQUAL
55866: IFTRUE 55870
55868: GO 56448
55870: POP
// begin if GetClass ( i ) = 1 then
55871: LD_VAR 0 6
55875: PPUSH
55876: CALL_OW 257
55880: PUSH
55881: LD_INT 1
55883: EQUAL
55884: IFFALSE 55905
// points := [ 10 , 5 , 3 ] ;
55886: LD_ADDR_VAR 0 9
55890: PUSH
55891: LD_INT 10
55893: PUSH
55894: LD_INT 5
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
55905: LD_VAR 0 6
55909: PPUSH
55910: CALL_OW 257
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 4
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: IN
55929: IFFALSE 55950
// points := [ 3 , 2 , 1 ] ;
55931: LD_ADDR_VAR 0 9
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// if GetClass ( i ) = 5 then
55950: LD_VAR 0 6
55954: PPUSH
55955: CALL_OW 257
55959: PUSH
55960: LD_INT 5
55962: EQUAL
55963: IFFALSE 55984
// points := [ 130 , 5 , 2 ] ;
55965: LD_ADDR_VAR 0 9
55969: PUSH
55970: LD_INT 130
55972: PUSH
55973: LD_INT 5
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: ST_TO_ADDR
// if GetClass ( i ) = 8 then
55984: LD_VAR 0 6
55988: PPUSH
55989: CALL_OW 257
55993: PUSH
55994: LD_INT 8
55996: EQUAL
55997: IFFALSE 56018
// points := [ 35 , 35 , 30 ] ;
55999: LD_ADDR_VAR 0 9
56003: PUSH
56004: LD_INT 35
56006: PUSH
56007: LD_INT 35
56009: PUSH
56010: LD_INT 30
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: LIST
56017: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56018: LD_VAR 0 6
56022: PPUSH
56023: CALL_OW 257
56027: PUSH
56028: LD_INT 9
56030: EQUAL
56031: IFFALSE 56052
// points := [ 20 , 55 , 40 ] ;
56033: LD_ADDR_VAR 0 9
56037: PUSH
56038: LD_INT 20
56040: PUSH
56041: LD_INT 55
56043: PUSH
56044: LD_INT 40
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56052: LD_VAR 0 6
56056: PPUSH
56057: CALL_OW 257
56061: PUSH
56062: LD_INT 12
56064: PUSH
56065: LD_INT 16
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: IN
56072: IFFALSE 56093
// points := [ 5 , 3 , 2 ] ;
56074: LD_ADDR_VAR 0 9
56078: PUSH
56079: LD_INT 5
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56093: LD_VAR 0 6
56097: PPUSH
56098: CALL_OW 257
56102: PUSH
56103: LD_INT 17
56105: EQUAL
56106: IFFALSE 56127
// points := [ 100 , 50 , 75 ] ;
56108: LD_ADDR_VAR 0 9
56112: PUSH
56113: LD_INT 100
56115: PUSH
56116: LD_INT 50
56118: PUSH
56119: LD_INT 75
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56127: LD_VAR 0 6
56131: PPUSH
56132: CALL_OW 257
56136: PUSH
56137: LD_INT 15
56139: EQUAL
56140: IFFALSE 56161
// points := [ 10 , 5 , 3 ] ;
56142: LD_ADDR_VAR 0 9
56146: PUSH
56147: LD_INT 10
56149: PUSH
56150: LD_INT 5
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56161: LD_VAR 0 6
56165: PPUSH
56166: CALL_OW 257
56170: PUSH
56171: LD_INT 14
56173: EQUAL
56174: IFFALSE 56195
// points := [ 10 , 0 , 0 ] ;
56176: LD_ADDR_VAR 0 9
56180: PUSH
56181: LD_INT 10
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56195: LD_VAR 0 6
56199: PPUSH
56200: CALL_OW 257
56204: PUSH
56205: LD_INT 11
56207: EQUAL
56208: IFFALSE 56229
// points := [ 30 , 10 , 5 ] ;
56210: LD_ADDR_VAR 0 9
56214: PUSH
56215: LD_INT 30
56217: PUSH
56218: LD_INT 10
56220: PUSH
56221: LD_INT 5
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56229: LD_VAR 0 1
56233: PPUSH
56234: LD_INT 5
56236: PPUSH
56237: CALL_OW 321
56241: PUSH
56242: LD_INT 2
56244: EQUAL
56245: IFFALSE 56262
// bpoints := bpoints * 1.8 ;
56247: LD_ADDR_VAR 0 10
56251: PUSH
56252: LD_VAR 0 10
56256: PUSH
56257: LD_REAL  1.80000000000000E+0000
56260: MUL
56261: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56262: LD_VAR 0 6
56266: PPUSH
56267: CALL_OW 257
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: LD_INT 4
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: IN
56290: PUSH
56291: LD_VAR 0 1
56295: PPUSH
56296: LD_INT 51
56298: PPUSH
56299: CALL_OW 321
56303: PUSH
56304: LD_INT 2
56306: EQUAL
56307: AND
56308: IFFALSE 56325
// bpoints := bpoints * 1.2 ;
56310: LD_ADDR_VAR 0 10
56314: PUSH
56315: LD_VAR 0 10
56319: PUSH
56320: LD_REAL  1.20000000000000E+0000
56323: MUL
56324: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56325: LD_VAR 0 6
56329: PPUSH
56330: CALL_OW 257
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: LD_INT 7
56340: PUSH
56341: LD_INT 9
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: IN
56349: PUSH
56350: LD_VAR 0 1
56354: PPUSH
56355: LD_INT 52
56357: PPUSH
56358: CALL_OW 321
56362: PUSH
56363: LD_INT 2
56365: EQUAL
56366: AND
56367: IFFALSE 56384
// bpoints := bpoints * 1.5 ;
56369: LD_ADDR_VAR 0 10
56373: PUSH
56374: LD_VAR 0 10
56378: PUSH
56379: LD_REAL  1.50000000000000E+0000
56382: MUL
56383: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56384: LD_VAR 0 1
56388: PPUSH
56389: LD_INT 66
56391: PPUSH
56392: CALL_OW 321
56396: PUSH
56397: LD_INT 2
56399: EQUAL
56400: IFFALSE 56417
// bpoints := bpoints * 1.1 ;
56402: LD_ADDR_VAR 0 10
56406: PUSH
56407: LD_VAR 0 10
56411: PUSH
56412: LD_REAL  1.10000000000000E+0000
56415: MUL
56416: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56417: LD_ADDR_VAR 0 10
56421: PUSH
56422: LD_VAR 0 10
56426: PUSH
56427: LD_VAR 0 6
56431: PPUSH
56432: LD_INT 1
56434: PPUSH
56435: CALL_OW 259
56439: PUSH
56440: LD_REAL  1.15000000000000E+0000
56443: MUL
56444: MUL
56445: ST_TO_ADDR
// end ; unit_vehicle :
56446: GO 57270
56448: LD_INT 2
56450: DOUBLE
56451: EQUAL
56452: IFTRUE 56456
56454: GO 57258
56456: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56457: LD_VAR 0 6
56461: PPUSH
56462: CALL_OW 264
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: LD_INT 42
56472: PUSH
56473: LD_INT 24
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: IN
56481: IFFALSE 56502
// points := [ 25 , 5 , 3 ] ;
56483: LD_ADDR_VAR 0 9
56487: PUSH
56488: LD_INT 25
56490: PUSH
56491: LD_INT 5
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56502: LD_VAR 0 6
56506: PPUSH
56507: CALL_OW 264
56511: PUSH
56512: LD_INT 4
56514: PUSH
56515: LD_INT 43
56517: PUSH
56518: LD_INT 25
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: IN
56526: IFFALSE 56547
// points := [ 40 , 15 , 5 ] ;
56528: LD_ADDR_VAR 0 9
56532: PUSH
56533: LD_INT 40
56535: PUSH
56536: LD_INT 15
56538: PUSH
56539: LD_INT 5
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56547: LD_VAR 0 6
56551: PPUSH
56552: CALL_OW 264
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: LD_INT 23
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: IN
56567: IFFALSE 56588
// points := [ 7 , 25 , 8 ] ;
56569: LD_ADDR_VAR 0 9
56573: PUSH
56574: LD_INT 7
56576: PUSH
56577: LD_INT 25
56579: PUSH
56580: LD_INT 8
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56588: LD_VAR 0 6
56592: PPUSH
56593: CALL_OW 264
56597: PUSH
56598: LD_INT 5
56600: PUSH
56601: LD_INT 27
56603: PUSH
56604: LD_INT 44
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: IN
56612: IFFALSE 56633
// points := [ 14 , 50 , 16 ] ;
56614: LD_ADDR_VAR 0 9
56618: PUSH
56619: LD_INT 14
56621: PUSH
56622: LD_INT 50
56624: PUSH
56625: LD_INT 16
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
56633: LD_VAR 0 6
56637: PPUSH
56638: CALL_OW 264
56642: PUSH
56643: LD_INT 6
56645: PUSH
56646: LD_INT 46
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: IN
56653: IFFALSE 56674
// points := [ 32 , 120 , 70 ] ;
56655: LD_ADDR_VAR 0 9
56659: PUSH
56660: LD_INT 32
56662: PUSH
56663: LD_INT 120
56665: PUSH
56666: LD_INT 70
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
56674: LD_VAR 0 6
56678: PPUSH
56679: CALL_OW 264
56683: PUSH
56684: LD_INT 7
56686: PUSH
56687: LD_INT 28
56689: PUSH
56690: LD_INT 45
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: IN
56698: IFFALSE 56719
// points := [ 35 , 20 , 45 ] ;
56700: LD_ADDR_VAR 0 9
56704: PUSH
56705: LD_INT 35
56707: PUSH
56708: LD_INT 20
56710: PUSH
56711: LD_INT 45
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
56719: LD_VAR 0 6
56723: PPUSH
56724: CALL_OW 264
56728: PUSH
56729: LD_INT 47
56731: PUSH
56732: EMPTY
56733: LIST
56734: IN
56735: IFFALSE 56756
// points := [ 67 , 45 , 75 ] ;
56737: LD_ADDR_VAR 0 9
56741: PUSH
56742: LD_INT 67
56744: PUSH
56745: LD_INT 45
56747: PUSH
56748: LD_INT 75
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
56756: LD_VAR 0 6
56760: PPUSH
56761: CALL_OW 264
56765: PUSH
56766: LD_INT 26
56768: PUSH
56769: EMPTY
56770: LIST
56771: IN
56772: IFFALSE 56793
// points := [ 120 , 30 , 80 ] ;
56774: LD_ADDR_VAR 0 9
56778: PUSH
56779: LD_INT 120
56781: PUSH
56782: LD_INT 30
56784: PUSH
56785: LD_INT 80
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
56793: LD_VAR 0 6
56797: PPUSH
56798: CALL_OW 264
56802: PUSH
56803: LD_INT 22
56805: PUSH
56806: EMPTY
56807: LIST
56808: IN
56809: IFFALSE 56830
// points := [ 40 , 1 , 1 ] ;
56811: LD_ADDR_VAR 0 9
56815: PUSH
56816: LD_INT 40
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
56830: LD_VAR 0 6
56834: PPUSH
56835: CALL_OW 264
56839: PUSH
56840: LD_INT 29
56842: PUSH
56843: EMPTY
56844: LIST
56845: IN
56846: IFFALSE 56867
// points := [ 70 , 200 , 400 ] ;
56848: LD_ADDR_VAR 0 9
56852: PUSH
56853: LD_INT 70
56855: PUSH
56856: LD_INT 200
56858: PUSH
56859: LD_INT 400
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
56867: LD_VAR 0 6
56871: PPUSH
56872: CALL_OW 264
56876: PUSH
56877: LD_INT 14
56879: PUSH
56880: LD_INT 53
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: IN
56887: IFFALSE 56908
// points := [ 40 , 10 , 20 ] ;
56889: LD_ADDR_VAR 0 9
56893: PUSH
56894: LD_INT 40
56896: PUSH
56897: LD_INT 10
56899: PUSH
56900: LD_INT 20
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
56908: LD_VAR 0 6
56912: PPUSH
56913: CALL_OW 264
56917: PUSH
56918: LD_INT 9
56920: PUSH
56921: EMPTY
56922: LIST
56923: IN
56924: IFFALSE 56945
// points := [ 5 , 70 , 20 ] ;
56926: LD_ADDR_VAR 0 9
56930: PUSH
56931: LD_INT 5
56933: PUSH
56934: LD_INT 70
56936: PUSH
56937: LD_INT 20
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
56945: LD_VAR 0 6
56949: PPUSH
56950: CALL_OW 264
56954: PUSH
56955: LD_INT 10
56957: PUSH
56958: EMPTY
56959: LIST
56960: IN
56961: IFFALSE 56982
// points := [ 35 , 110 , 70 ] ;
56963: LD_ADDR_VAR 0 9
56967: PUSH
56968: LD_INT 35
56970: PUSH
56971: LD_INT 110
56973: PUSH
56974: LD_INT 70
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
56982: LD_VAR 0 6
56986: PPUSH
56987: CALL_OW 265
56991: PUSH
56992: LD_INT 25
56994: EQUAL
56995: IFFALSE 57016
// points := [ 80 , 65 , 100 ] ;
56997: LD_ADDR_VAR 0 9
57001: PUSH
57002: LD_INT 80
57004: PUSH
57005: LD_INT 65
57007: PUSH
57008: LD_INT 100
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57016: LD_VAR 0 6
57020: PPUSH
57021: CALL_OW 263
57025: PUSH
57026: LD_INT 1
57028: EQUAL
57029: IFFALSE 57064
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57031: LD_ADDR_VAR 0 10
57035: PUSH
57036: LD_VAR 0 10
57040: PUSH
57041: LD_VAR 0 6
57045: PPUSH
57046: CALL_OW 311
57050: PPUSH
57051: LD_INT 3
57053: PPUSH
57054: CALL_OW 259
57058: PUSH
57059: LD_INT 4
57061: MUL
57062: MUL
57063: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57064: LD_VAR 0 6
57068: PPUSH
57069: CALL_OW 263
57073: PUSH
57074: LD_INT 2
57076: EQUAL
57077: IFFALSE 57128
// begin j := IsControledBy ( i ) ;
57079: LD_ADDR_VAR 0 7
57083: PUSH
57084: LD_VAR 0 6
57088: PPUSH
57089: CALL_OW 312
57093: ST_TO_ADDR
// if j then
57094: LD_VAR 0 7
57098: IFFALSE 57128
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57100: LD_ADDR_VAR 0 10
57104: PUSH
57105: LD_VAR 0 10
57109: PUSH
57110: LD_VAR 0 7
57114: PPUSH
57115: LD_INT 3
57117: PPUSH
57118: CALL_OW 259
57122: PUSH
57123: LD_INT 3
57125: MUL
57126: MUL
57127: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57128: LD_VAR 0 6
57132: PPUSH
57133: CALL_OW 264
57137: PUSH
57138: LD_INT 5
57140: PUSH
57141: LD_INT 6
57143: PUSH
57144: LD_INT 46
57146: PUSH
57147: LD_INT 44
57149: PUSH
57150: LD_INT 47
57152: PUSH
57153: LD_INT 45
57155: PUSH
57156: LD_INT 28
57158: PUSH
57159: LD_INT 7
57161: PUSH
57162: LD_INT 27
57164: PUSH
57165: LD_INT 29
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: IN
57180: PUSH
57181: LD_VAR 0 1
57185: PPUSH
57186: LD_INT 52
57188: PPUSH
57189: CALL_OW 321
57193: PUSH
57194: LD_INT 2
57196: EQUAL
57197: AND
57198: IFFALSE 57215
// bpoints := bpoints * 1.2 ;
57200: LD_ADDR_VAR 0 10
57204: PUSH
57205: LD_VAR 0 10
57209: PUSH
57210: LD_REAL  1.20000000000000E+0000
57213: MUL
57214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57215: LD_VAR 0 6
57219: PPUSH
57220: CALL_OW 264
57224: PUSH
57225: LD_INT 6
57227: PUSH
57228: LD_INT 46
57230: PUSH
57231: LD_INT 47
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: IN
57239: IFFALSE 57256
// bpoints := bpoints * 1.2 ;
57241: LD_ADDR_VAR 0 10
57245: PUSH
57246: LD_VAR 0 10
57250: PUSH
57251: LD_REAL  1.20000000000000E+0000
57254: MUL
57255: ST_TO_ADDR
// end ; unit_building :
57256: GO 57270
57258: LD_INT 3
57260: DOUBLE
57261: EQUAL
57262: IFTRUE 57266
57264: GO 57269
57266: POP
// ; end ;
57267: GO 57270
57269: POP
// for j = 1 to 3 do
57270: LD_ADDR_VAR 0 7
57274: PUSH
57275: DOUBLE
57276: LD_INT 1
57278: DEC
57279: ST_TO_ADDR
57280: LD_INT 3
57282: PUSH
57283: FOR_TO
57284: IFFALSE 57337
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57286: LD_ADDR_VAR 0 5
57290: PUSH
57291: LD_VAR 0 5
57295: PPUSH
57296: LD_VAR 0 7
57300: PPUSH
57301: LD_VAR 0 5
57305: PUSH
57306: LD_VAR 0 7
57310: ARRAY
57311: PUSH
57312: LD_VAR 0 9
57316: PUSH
57317: LD_VAR 0 7
57321: ARRAY
57322: PUSH
57323: LD_VAR 0 10
57327: MUL
57328: PLUS
57329: PPUSH
57330: CALL_OW 1
57334: ST_TO_ADDR
57335: GO 57283
57337: POP
57338: POP
// end ;
57339: GO 55822
57341: POP
57342: POP
// result := Replace ( result , 4 , tmp ) ;
57343: LD_ADDR_VAR 0 5
57347: PUSH
57348: LD_VAR 0 5
57352: PPUSH
57353: LD_INT 4
57355: PPUSH
57356: LD_VAR 0 8
57360: PPUSH
57361: CALL_OW 1
57365: ST_TO_ADDR
// end ;
57366: LD_VAR 0 5
57370: RET
// export function DangerAtRange ( unit , range ) ; begin
57371: LD_INT 0
57373: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57374: LD_ADDR_VAR 0 3
57378: PUSH
57379: LD_VAR 0 1
57383: PPUSH
57384: CALL_OW 255
57388: PPUSH
57389: LD_VAR 0 1
57393: PPUSH
57394: CALL_OW 250
57398: PPUSH
57399: LD_VAR 0 1
57403: PPUSH
57404: CALL_OW 251
57408: PPUSH
57409: LD_VAR 0 2
57413: PPUSH
57414: CALL 55674 0 4
57418: ST_TO_ADDR
// end ;
57419: LD_VAR 0 3
57423: RET
// export function DangerInArea ( side , area ) ; begin
57424: LD_INT 0
57426: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57427: LD_ADDR_VAR 0 3
57431: PUSH
57432: LD_VAR 0 2
57436: PPUSH
57437: LD_INT 81
57439: PUSH
57440: LD_VAR 0 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PPUSH
57449: CALL_OW 70
57453: ST_TO_ADDR
// end ;
57454: LD_VAR 0 3
57458: RET
// export function IsExtension ( b ) ; begin
57459: LD_INT 0
57461: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57462: LD_ADDR_VAR 0 2
57466: PUSH
57467: LD_VAR 0 1
57471: PUSH
57472: LD_INT 23
57474: PUSH
57475: LD_INT 20
57477: PUSH
57478: LD_INT 22
57480: PUSH
57481: LD_INT 17
57483: PUSH
57484: LD_INT 24
57486: PUSH
57487: LD_INT 21
57489: PUSH
57490: LD_INT 19
57492: PUSH
57493: LD_INT 16
57495: PUSH
57496: LD_INT 25
57498: PUSH
57499: LD_INT 18
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: IN
57514: ST_TO_ADDR
// end ;
57515: LD_VAR 0 2
57519: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
57520: LD_INT 0
57522: PPUSH
57523: PPUSH
57524: PPUSH
// result := [ ] ;
57525: LD_ADDR_VAR 0 3
57529: PUSH
57530: EMPTY
57531: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57532: LD_ADDR_VAR 0 4
57536: PUSH
57537: LD_VAR 0 2
57541: PPUSH
57542: LD_INT 21
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PPUSH
57552: CALL_OW 70
57556: ST_TO_ADDR
// if not tmp then
57557: LD_VAR 0 4
57561: NOT
57562: IFFALSE 57566
// exit ;
57564: GO 57624
// for i in tmp do
57566: LD_ADDR_VAR 0 5
57570: PUSH
57571: LD_VAR 0 4
57575: PUSH
57576: FOR_IN
57577: IFFALSE 57612
// if GetBase ( i ) <> base then
57579: LD_VAR 0 5
57583: PPUSH
57584: CALL_OW 274
57588: PUSH
57589: LD_VAR 0 1
57593: NONEQUAL
57594: IFFALSE 57610
// ComLinkToBase ( base , i ) ;
57596: LD_VAR 0 1
57600: PPUSH
57601: LD_VAR 0 5
57605: PPUSH
57606: CALL_OW 169
57610: GO 57576
57612: POP
57613: POP
// result := tmp ;
57614: LD_ADDR_VAR 0 3
57618: PUSH
57619: LD_VAR 0 4
57623: ST_TO_ADDR
// end ;
57624: LD_VAR 0 3
57628: RET
// export function ComComplete ( unit , b ) ; var i ; begin
57629: LD_INT 0
57631: PPUSH
57632: PPUSH
// if BuildingStatus ( b ) = bs_build then
57633: LD_VAR 0 2
57637: PPUSH
57638: CALL_OW 461
57642: PUSH
57643: LD_INT 1
57645: EQUAL
57646: IFFALSE 57706
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
57648: LD_VAR 0 1
57652: PPUSH
57653: LD_STRING h
57655: PUSH
57656: LD_VAR 0 2
57660: PPUSH
57661: CALL_OW 250
57665: PUSH
57666: LD_VAR 0 2
57670: PPUSH
57671: CALL_OW 251
57675: PUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: PPUSH
57702: CALL_OW 446
// end ;
57706: LD_VAR 0 3
57710: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
57711: LD_INT 0
57713: PPUSH
57714: PPUSH
57715: PPUSH
57716: PPUSH
57717: PPUSH
57718: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
57719: LD_VAR 0 1
57723: NOT
57724: PUSH
57725: LD_VAR 0 1
57729: PPUSH
57730: CALL_OW 263
57734: PUSH
57735: LD_INT 2
57737: EQUAL
57738: NOT
57739: OR
57740: IFFALSE 57744
// exit ;
57742: GO 58060
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
57744: LD_ADDR_VAR 0 6
57748: PUSH
57749: LD_INT 22
57751: PUSH
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 255
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 30
57771: PUSH
57772: LD_INT 36
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 34
57781: PUSH
57782: LD_INT 31
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PPUSH
57798: CALL_OW 69
57802: ST_TO_ADDR
// if not tmp then
57803: LD_VAR 0 6
57807: NOT
57808: IFFALSE 57812
// exit ;
57810: GO 58060
// result := [ ] ;
57812: LD_ADDR_VAR 0 2
57816: PUSH
57817: EMPTY
57818: ST_TO_ADDR
// for i in tmp do
57819: LD_ADDR_VAR 0 3
57823: PUSH
57824: LD_VAR 0 6
57828: PUSH
57829: FOR_IN
57830: IFFALSE 57901
// begin t := UnitsInside ( i ) ;
57832: LD_ADDR_VAR 0 4
57836: PUSH
57837: LD_VAR 0 3
57841: PPUSH
57842: CALL_OW 313
57846: ST_TO_ADDR
// if t then
57847: LD_VAR 0 4
57851: IFFALSE 57899
// for j in t do
57853: LD_ADDR_VAR 0 7
57857: PUSH
57858: LD_VAR 0 4
57862: PUSH
57863: FOR_IN
57864: IFFALSE 57897
// result := Insert ( result , result + 1 , j ) ;
57866: LD_ADDR_VAR 0 2
57870: PUSH
57871: LD_VAR 0 2
57875: PPUSH
57876: LD_VAR 0 2
57880: PUSH
57881: LD_INT 1
57883: PLUS
57884: PPUSH
57885: LD_VAR 0 7
57889: PPUSH
57890: CALL_OW 2
57894: ST_TO_ADDR
57895: GO 57863
57897: POP
57898: POP
// end ;
57899: GO 57829
57901: POP
57902: POP
// if not result then
57903: LD_VAR 0 2
57907: NOT
57908: IFFALSE 57912
// exit ;
57910: GO 58060
// mech := result [ 1 ] ;
57912: LD_ADDR_VAR 0 5
57916: PUSH
57917: LD_VAR 0 2
57921: PUSH
57922: LD_INT 1
57924: ARRAY
57925: ST_TO_ADDR
// if result > 1 then
57926: LD_VAR 0 2
57930: PUSH
57931: LD_INT 1
57933: GREATER
57934: IFFALSE 58046
// for i = 2 to result do
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: DOUBLE
57942: LD_INT 2
57944: DEC
57945: ST_TO_ADDR
57946: LD_VAR 0 2
57950: PUSH
57951: FOR_TO
57952: IFFALSE 58044
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
57954: LD_ADDR_VAR 0 4
57958: PUSH
57959: LD_VAR 0 2
57963: PUSH
57964: LD_VAR 0 3
57968: ARRAY
57969: PPUSH
57970: LD_INT 3
57972: PPUSH
57973: CALL_OW 259
57977: PUSH
57978: LD_VAR 0 2
57982: PUSH
57983: LD_VAR 0 3
57987: ARRAY
57988: PPUSH
57989: CALL_OW 432
57993: MINUS
57994: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
57995: LD_VAR 0 4
57999: PUSH
58000: LD_VAR 0 5
58004: PPUSH
58005: LD_INT 3
58007: PPUSH
58008: CALL_OW 259
58012: PUSH
58013: LD_VAR 0 5
58017: PPUSH
58018: CALL_OW 432
58022: MINUS
58023: GREATEREQUAL
58024: IFFALSE 58042
// mech := result [ i ] ;
58026: LD_ADDR_VAR 0 5
58030: PUSH
58031: LD_VAR 0 2
58035: PUSH
58036: LD_VAR 0 3
58040: ARRAY
58041: ST_TO_ADDR
// end ;
58042: GO 57951
58044: POP
58045: POP
// ComLinkTo ( vehicle , mech ) ;
58046: LD_VAR 0 1
58050: PPUSH
58051: LD_VAR 0 5
58055: PPUSH
58056: CALL_OW 135
// end ;
58060: LD_VAR 0 2
58064: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58065: LD_INT 0
58067: PPUSH
58068: PPUSH
58069: PPUSH
58070: PPUSH
58071: PPUSH
58072: PPUSH
58073: PPUSH
58074: PPUSH
58075: PPUSH
58076: PPUSH
58077: PPUSH
58078: PPUSH
58079: PPUSH
// result := [ ] ;
58080: LD_ADDR_VAR 0 7
58084: PUSH
58085: EMPTY
58086: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58087: LD_VAR 0 1
58091: PPUSH
58092: CALL_OW 266
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: IN
58107: NOT
58108: IFFALSE 58112
// exit ;
58110: GO 59743
// if name then
58112: LD_VAR 0 3
58116: IFFALSE 58132
// SetBName ( base_dep , name ) ;
58118: LD_VAR 0 1
58122: PPUSH
58123: LD_VAR 0 3
58127: PPUSH
58128: CALL_OW 500
// base := GetBase ( base_dep ) ;
58132: LD_ADDR_VAR 0 15
58136: PUSH
58137: LD_VAR 0 1
58141: PPUSH
58142: CALL_OW 274
58146: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58147: LD_ADDR_VAR 0 16
58151: PUSH
58152: LD_VAR 0 1
58156: PPUSH
58157: CALL_OW 255
58161: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58162: LD_ADDR_VAR 0 17
58166: PUSH
58167: LD_VAR 0 1
58171: PPUSH
58172: CALL_OW 248
58176: ST_TO_ADDR
// if sources then
58177: LD_VAR 0 5
58181: IFFALSE 58228
// for i = 1 to 3 do
58183: LD_ADDR_VAR 0 8
58187: PUSH
58188: DOUBLE
58189: LD_INT 1
58191: DEC
58192: ST_TO_ADDR
58193: LD_INT 3
58195: PUSH
58196: FOR_TO
58197: IFFALSE 58226
// AddResourceType ( base , i , sources [ i ] ) ;
58199: LD_VAR 0 15
58203: PPUSH
58204: LD_VAR 0 8
58208: PPUSH
58209: LD_VAR 0 5
58213: PUSH
58214: LD_VAR 0 8
58218: ARRAY
58219: PPUSH
58220: CALL_OW 276
58224: GO 58196
58226: POP
58227: POP
// buildings := GetBaseBuildings ( base , area ) ;
58228: LD_ADDR_VAR 0 18
58232: PUSH
58233: LD_VAR 0 15
58237: PPUSH
58238: LD_VAR 0 2
58242: PPUSH
58243: CALL 57520 0 2
58247: ST_TO_ADDR
// InitHc ;
58248: CALL_OW 19
// InitUc ;
58252: CALL_OW 18
// uc_side := side ;
58256: LD_ADDR_OWVAR 20
58260: PUSH
58261: LD_VAR 0 16
58265: ST_TO_ADDR
// uc_nation := nation ;
58266: LD_ADDR_OWVAR 21
58270: PUSH
58271: LD_VAR 0 17
58275: ST_TO_ADDR
// if buildings then
58276: LD_VAR 0 18
58280: IFFALSE 59602
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58282: LD_ADDR_VAR 0 19
58286: PUSH
58287: LD_VAR 0 18
58291: PPUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 30
58297: PUSH
58298: LD_INT 29
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 30
58307: PUSH
58308: LD_INT 30
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: PPUSH
58320: CALL_OW 72
58324: ST_TO_ADDR
// if tmp then
58325: LD_VAR 0 19
58329: IFFALSE 58377
// for i in tmp do
58331: LD_ADDR_VAR 0 8
58335: PUSH
58336: LD_VAR 0 19
58340: PUSH
58341: FOR_IN
58342: IFFALSE 58375
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58344: LD_VAR 0 8
58348: PPUSH
58349: CALL_OW 250
58353: PPUSH
58354: LD_VAR 0 8
58358: PPUSH
58359: CALL_OW 251
58363: PPUSH
58364: LD_VAR 0 16
58368: PPUSH
58369: CALL_OW 441
58373: GO 58341
58375: POP
58376: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58377: LD_VAR 0 18
58381: PPUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 30
58387: PUSH
58388: LD_INT 32
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 30
58397: PUSH
58398: LD_INT 33
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: PPUSH
58410: CALL_OW 72
58414: IFFALSE 58502
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58416: LD_ADDR_VAR 0 8
58420: PUSH
58421: LD_VAR 0 18
58425: PPUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 30
58431: PUSH
58432: LD_INT 32
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 30
58441: PUSH
58442: LD_INT 33
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: PPUSH
58454: CALL_OW 72
58458: PUSH
58459: FOR_IN
58460: IFFALSE 58500
// begin if not GetBWeapon ( i ) then
58462: LD_VAR 0 8
58466: PPUSH
58467: CALL_OW 269
58471: NOT
58472: IFFALSE 58498
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58474: LD_VAR 0 8
58478: PPUSH
58479: LD_VAR 0 8
58483: PPUSH
58484: LD_VAR 0 2
58488: PPUSH
58489: CALL 59748 0 2
58493: PPUSH
58494: CALL_OW 431
// end ;
58498: GO 58459
58500: POP
58501: POP
// end ; for i = 1 to personel do
58502: LD_ADDR_VAR 0 8
58506: PUSH
58507: DOUBLE
58508: LD_INT 1
58510: DEC
58511: ST_TO_ADDR
58512: LD_VAR 0 6
58516: PUSH
58517: FOR_TO
58518: IFFALSE 59582
// begin if i > 4 then
58520: LD_VAR 0 8
58524: PUSH
58525: LD_INT 4
58527: GREATER
58528: IFFALSE 58532
// break ;
58530: GO 59582
// case i of 1 :
58532: LD_VAR 0 8
58536: PUSH
58537: LD_INT 1
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58545
58543: GO 58625
58545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58546: LD_ADDR_VAR 0 12
58550: PUSH
58551: LD_VAR 0 18
58555: PPUSH
58556: LD_INT 22
58558: PUSH
58559: LD_VAR 0 16
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 58
58570: PUSH
58571: EMPTY
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 30
58579: PUSH
58580: LD_INT 32
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 30
58589: PUSH
58590: LD_INT 4
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 30
58599: PUSH
58600: LD_INT 5
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: PPUSH
58618: CALL_OW 72
58622: ST_TO_ADDR
58623: GO 58847
58625: LD_INT 2
58627: DOUBLE
58628: EQUAL
58629: IFTRUE 58633
58631: GO 58695
58633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
58634: LD_ADDR_VAR 0 12
58638: PUSH
58639: LD_VAR 0 18
58643: PPUSH
58644: LD_INT 22
58646: PUSH
58647: LD_VAR 0 16
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: LD_INT 30
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 30
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PPUSH
58688: CALL_OW 72
58692: ST_TO_ADDR
58693: GO 58847
58695: LD_INT 3
58697: DOUBLE
58698: EQUAL
58699: IFTRUE 58703
58701: GO 58765
58703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
58704: LD_ADDR_VAR 0 12
58708: PUSH
58709: LD_VAR 0 18
58713: PPUSH
58714: LD_INT 22
58716: PUSH
58717: LD_VAR 0 16
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: LD_INT 30
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 30
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PPUSH
58758: CALL_OW 72
58762: ST_TO_ADDR
58763: GO 58847
58765: LD_INT 4
58767: DOUBLE
58768: EQUAL
58769: IFTRUE 58773
58771: GO 58846
58773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
58774: LD_ADDR_VAR 0 12
58778: PUSH
58779: LD_VAR 0 18
58783: PPUSH
58784: LD_INT 22
58786: PUSH
58787: LD_VAR 0 16
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 30
58801: PUSH
58802: LD_INT 6
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 30
58811: PUSH
58812: LD_INT 7
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 30
58821: PUSH
58822: LD_INT 8
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PPUSH
58839: CALL_OW 72
58843: ST_TO_ADDR
58844: GO 58847
58846: POP
// if i = 1 then
58847: LD_VAR 0 8
58851: PUSH
58852: LD_INT 1
58854: EQUAL
58855: IFFALSE 58966
// begin tmp := [ ] ;
58857: LD_ADDR_VAR 0 19
58861: PUSH
58862: EMPTY
58863: ST_TO_ADDR
// for j in f do
58864: LD_ADDR_VAR 0 9
58868: PUSH
58869: LD_VAR 0 12
58873: PUSH
58874: FOR_IN
58875: IFFALSE 58948
// if GetBType ( j ) = b_bunker then
58877: LD_VAR 0 9
58881: PPUSH
58882: CALL_OW 266
58886: PUSH
58887: LD_INT 32
58889: EQUAL
58890: IFFALSE 58917
// tmp := Insert ( tmp , 1 , j ) else
58892: LD_ADDR_VAR 0 19
58896: PUSH
58897: LD_VAR 0 19
58901: PPUSH
58902: LD_INT 1
58904: PPUSH
58905: LD_VAR 0 9
58909: PPUSH
58910: CALL_OW 2
58914: ST_TO_ADDR
58915: GO 58946
// tmp := Insert ( tmp , tmp + 1 , j ) ;
58917: LD_ADDR_VAR 0 19
58921: PUSH
58922: LD_VAR 0 19
58926: PPUSH
58927: LD_VAR 0 19
58931: PUSH
58932: LD_INT 1
58934: PLUS
58935: PPUSH
58936: LD_VAR 0 9
58940: PPUSH
58941: CALL_OW 2
58945: ST_TO_ADDR
58946: GO 58874
58948: POP
58949: POP
// if tmp then
58950: LD_VAR 0 19
58954: IFFALSE 58966
// f := tmp ;
58956: LD_ADDR_VAR 0 12
58960: PUSH
58961: LD_VAR 0 19
58965: ST_TO_ADDR
// end ; x := personel [ i ] ;
58966: LD_ADDR_VAR 0 13
58970: PUSH
58971: LD_VAR 0 6
58975: PUSH
58976: LD_VAR 0 8
58980: ARRAY
58981: ST_TO_ADDR
// if x = - 1 then
58982: LD_VAR 0 13
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: EQUAL
58991: IFFALSE 59200
// begin for j in f do
58993: LD_ADDR_VAR 0 9
58997: PUSH
58998: LD_VAR 0 12
59002: PUSH
59003: FOR_IN
59004: IFFALSE 59196
// repeat InitHc ;
59006: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59010: LD_VAR 0 9
59014: PPUSH
59015: CALL_OW 266
59019: PUSH
59020: LD_INT 5
59022: EQUAL
59023: IFFALSE 59093
// begin if UnitsInside ( j ) < 3 then
59025: LD_VAR 0 9
59029: PPUSH
59030: CALL_OW 313
59034: PUSH
59035: LD_INT 3
59037: LESS
59038: IFFALSE 59074
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59040: LD_INT 0
59042: PPUSH
59043: LD_INT 5
59045: PUSH
59046: LD_INT 8
59048: PUSH
59049: LD_INT 9
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: PUSH
59057: LD_VAR 0 17
59061: ARRAY
59062: PPUSH
59063: LD_VAR 0 4
59067: PPUSH
59068: CALL_OW 380
59072: GO 59091
// PrepareHuman ( false , i , skill ) ;
59074: LD_INT 0
59076: PPUSH
59077: LD_VAR 0 8
59081: PPUSH
59082: LD_VAR 0 4
59086: PPUSH
59087: CALL_OW 380
// end else
59091: GO 59110
// PrepareHuman ( false , i , skill ) ;
59093: LD_INT 0
59095: PPUSH
59096: LD_VAR 0 8
59100: PPUSH
59101: LD_VAR 0 4
59105: PPUSH
59106: CALL_OW 380
// un := CreateHuman ;
59110: LD_ADDR_VAR 0 14
59114: PUSH
59115: CALL_OW 44
59119: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59120: LD_ADDR_VAR 0 7
59124: PUSH
59125: LD_VAR 0 7
59129: PPUSH
59130: LD_INT 1
59132: PPUSH
59133: LD_VAR 0 14
59137: PPUSH
59138: CALL_OW 2
59142: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59143: LD_VAR 0 14
59147: PPUSH
59148: LD_VAR 0 9
59152: PPUSH
59153: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59157: LD_VAR 0 9
59161: PPUSH
59162: CALL_OW 313
59166: PUSH
59167: LD_INT 6
59169: EQUAL
59170: PUSH
59171: LD_VAR 0 9
59175: PPUSH
59176: CALL_OW 266
59180: PUSH
59181: LD_INT 32
59183: PUSH
59184: LD_INT 31
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: IN
59191: OR
59192: IFFALSE 59006
59194: GO 59003
59196: POP
59197: POP
// end else
59198: GO 59580
// for j = 1 to x do
59200: LD_ADDR_VAR 0 9
59204: PUSH
59205: DOUBLE
59206: LD_INT 1
59208: DEC
59209: ST_TO_ADDR
59210: LD_VAR 0 13
59214: PUSH
59215: FOR_TO
59216: IFFALSE 59578
// begin InitHc ;
59218: CALL_OW 19
// if not f then
59222: LD_VAR 0 12
59226: NOT
59227: IFFALSE 59316
// begin PrepareHuman ( false , i , skill ) ;
59229: LD_INT 0
59231: PPUSH
59232: LD_VAR 0 8
59236: PPUSH
59237: LD_VAR 0 4
59241: PPUSH
59242: CALL_OW 380
// un := CreateHuman ;
59246: LD_ADDR_VAR 0 14
59250: PUSH
59251: CALL_OW 44
59255: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59256: LD_ADDR_VAR 0 7
59260: PUSH
59261: LD_VAR 0 7
59265: PPUSH
59266: LD_INT 1
59268: PPUSH
59269: LD_VAR 0 14
59273: PPUSH
59274: CALL_OW 2
59278: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59279: LD_VAR 0 14
59283: PPUSH
59284: LD_VAR 0 1
59288: PPUSH
59289: CALL_OW 250
59293: PPUSH
59294: LD_VAR 0 1
59298: PPUSH
59299: CALL_OW 251
59303: PPUSH
59304: LD_INT 10
59306: PPUSH
59307: LD_INT 0
59309: PPUSH
59310: CALL_OW 50
// continue ;
59314: GO 59215
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59316: LD_VAR 0 12
59320: PUSH
59321: LD_INT 1
59323: ARRAY
59324: PPUSH
59325: CALL_OW 313
59329: PUSH
59330: LD_VAR 0 12
59334: PUSH
59335: LD_INT 1
59337: ARRAY
59338: PPUSH
59339: CALL_OW 266
59343: PUSH
59344: LD_INT 32
59346: PUSH
59347: LD_INT 31
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: IN
59354: AND
59355: PUSH
59356: LD_VAR 0 12
59360: PUSH
59361: LD_INT 1
59363: ARRAY
59364: PPUSH
59365: CALL_OW 313
59369: PUSH
59370: LD_INT 6
59372: EQUAL
59373: OR
59374: IFFALSE 59394
// f := Delete ( f , 1 ) ;
59376: LD_ADDR_VAR 0 12
59380: PUSH
59381: LD_VAR 0 12
59385: PPUSH
59386: LD_INT 1
59388: PPUSH
59389: CALL_OW 3
59393: ST_TO_ADDR
// if not f then
59394: LD_VAR 0 12
59398: NOT
59399: IFFALSE 59417
// begin x := x + 2 ;
59401: LD_ADDR_VAR 0 13
59405: PUSH
59406: LD_VAR 0 13
59410: PUSH
59411: LD_INT 2
59413: PLUS
59414: ST_TO_ADDR
// continue ;
59415: GO 59215
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59417: LD_VAR 0 12
59421: PUSH
59422: LD_INT 1
59424: ARRAY
59425: PPUSH
59426: CALL_OW 266
59430: PUSH
59431: LD_INT 5
59433: EQUAL
59434: IFFALSE 59508
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59436: LD_VAR 0 12
59440: PUSH
59441: LD_INT 1
59443: ARRAY
59444: PPUSH
59445: CALL_OW 313
59449: PUSH
59450: LD_INT 3
59452: LESS
59453: IFFALSE 59489
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59455: LD_INT 0
59457: PPUSH
59458: LD_INT 5
59460: PUSH
59461: LD_INT 8
59463: PUSH
59464: LD_INT 9
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: PUSH
59472: LD_VAR 0 17
59476: ARRAY
59477: PPUSH
59478: LD_VAR 0 4
59482: PPUSH
59483: CALL_OW 380
59487: GO 59506
// PrepareHuman ( false , i , skill ) ;
59489: LD_INT 0
59491: PPUSH
59492: LD_VAR 0 8
59496: PPUSH
59497: LD_VAR 0 4
59501: PPUSH
59502: CALL_OW 380
// end else
59506: GO 59525
// PrepareHuman ( false , i , skill ) ;
59508: LD_INT 0
59510: PPUSH
59511: LD_VAR 0 8
59515: PPUSH
59516: LD_VAR 0 4
59520: PPUSH
59521: CALL_OW 380
// un := CreateHuman ;
59525: LD_ADDR_VAR 0 14
59529: PUSH
59530: CALL_OW 44
59534: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59535: LD_ADDR_VAR 0 7
59539: PUSH
59540: LD_VAR 0 7
59544: PPUSH
59545: LD_INT 1
59547: PPUSH
59548: LD_VAR 0 14
59552: PPUSH
59553: CALL_OW 2
59557: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
59558: LD_VAR 0 14
59562: PPUSH
59563: LD_VAR 0 12
59567: PUSH
59568: LD_INT 1
59570: ARRAY
59571: PPUSH
59572: CALL_OW 52
// end ;
59576: GO 59215
59578: POP
59579: POP
// end ;
59580: GO 58517
59582: POP
59583: POP
// result := result ^ buildings ;
59584: LD_ADDR_VAR 0 7
59588: PUSH
59589: LD_VAR 0 7
59593: PUSH
59594: LD_VAR 0 18
59598: ADD
59599: ST_TO_ADDR
// end else
59600: GO 59743
// begin for i = 1 to personel do
59602: LD_ADDR_VAR 0 8
59606: PUSH
59607: DOUBLE
59608: LD_INT 1
59610: DEC
59611: ST_TO_ADDR
59612: LD_VAR 0 6
59616: PUSH
59617: FOR_TO
59618: IFFALSE 59741
// begin if i > 4 then
59620: LD_VAR 0 8
59624: PUSH
59625: LD_INT 4
59627: GREATER
59628: IFFALSE 59632
// break ;
59630: GO 59741
// x := personel [ i ] ;
59632: LD_ADDR_VAR 0 13
59636: PUSH
59637: LD_VAR 0 6
59641: PUSH
59642: LD_VAR 0 8
59646: ARRAY
59647: ST_TO_ADDR
// if x = - 1 then
59648: LD_VAR 0 13
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: EQUAL
59657: IFFALSE 59661
// continue ;
59659: GO 59617
// PrepareHuman ( false , i , skill ) ;
59661: LD_INT 0
59663: PPUSH
59664: LD_VAR 0 8
59668: PPUSH
59669: LD_VAR 0 4
59673: PPUSH
59674: CALL_OW 380
// un := CreateHuman ;
59678: LD_ADDR_VAR 0 14
59682: PUSH
59683: CALL_OW 44
59687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59688: LD_VAR 0 14
59692: PPUSH
59693: LD_VAR 0 1
59697: PPUSH
59698: CALL_OW 250
59702: PPUSH
59703: LD_VAR 0 1
59707: PPUSH
59708: CALL_OW 251
59712: PPUSH
59713: LD_INT 10
59715: PPUSH
59716: LD_INT 0
59718: PPUSH
59719: CALL_OW 50
// result := result ^ un ;
59723: LD_ADDR_VAR 0 7
59727: PUSH
59728: LD_VAR 0 7
59732: PUSH
59733: LD_VAR 0 14
59737: ADD
59738: ST_TO_ADDR
// end ;
59739: GO 59617
59741: POP
59742: POP
// end ; end ;
59743: LD_VAR 0 7
59747: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
59748: LD_INT 0
59750: PPUSH
59751: PPUSH
59752: PPUSH
59753: PPUSH
59754: PPUSH
59755: PPUSH
59756: PPUSH
59757: PPUSH
59758: PPUSH
59759: PPUSH
59760: PPUSH
59761: PPUSH
59762: PPUSH
59763: PPUSH
59764: PPUSH
59765: PPUSH
// result := false ;
59766: LD_ADDR_VAR 0 3
59770: PUSH
59771: LD_INT 0
59773: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
59774: LD_VAR 0 1
59778: NOT
59779: PUSH
59780: LD_VAR 0 1
59784: PPUSH
59785: CALL_OW 266
59789: PUSH
59790: LD_INT 32
59792: PUSH
59793: LD_INT 33
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: IN
59800: NOT
59801: OR
59802: IFFALSE 59806
// exit ;
59804: GO 60942
// nat := GetNation ( tower ) ;
59806: LD_ADDR_VAR 0 12
59810: PUSH
59811: LD_VAR 0 1
59815: PPUSH
59816: CALL_OW 248
59820: ST_TO_ADDR
// side := GetSide ( tower ) ;
59821: LD_ADDR_VAR 0 16
59825: PUSH
59826: LD_VAR 0 1
59830: PPUSH
59831: CALL_OW 255
59835: ST_TO_ADDR
// x := GetX ( tower ) ;
59836: LD_ADDR_VAR 0 10
59840: PUSH
59841: LD_VAR 0 1
59845: PPUSH
59846: CALL_OW 250
59850: ST_TO_ADDR
// y := GetY ( tower ) ;
59851: LD_ADDR_VAR 0 11
59855: PUSH
59856: LD_VAR 0 1
59860: PPUSH
59861: CALL_OW 251
59865: ST_TO_ADDR
// if not x or not y then
59866: LD_VAR 0 10
59870: NOT
59871: PUSH
59872: LD_VAR 0 11
59876: NOT
59877: OR
59878: IFFALSE 59882
// exit ;
59880: GO 60942
// weapon := 0 ;
59882: LD_ADDR_VAR 0 18
59886: PUSH
59887: LD_INT 0
59889: ST_TO_ADDR
// fac_list := [ ] ;
59890: LD_ADDR_VAR 0 17
59894: PUSH
59895: EMPTY
59896: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
59897: LD_ADDR_VAR 0 6
59901: PUSH
59902: LD_VAR 0 1
59906: PPUSH
59907: CALL_OW 274
59911: PPUSH
59912: LD_VAR 0 2
59916: PPUSH
59917: CALL 57520 0 2
59921: PPUSH
59922: LD_INT 30
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PPUSH
59932: CALL_OW 72
59936: ST_TO_ADDR
// if not factories then
59937: LD_VAR 0 6
59941: NOT
59942: IFFALSE 59946
// exit ;
59944: GO 60942
// for i in factories do
59946: LD_ADDR_VAR 0 8
59950: PUSH
59951: LD_VAR 0 6
59955: PUSH
59956: FOR_IN
59957: IFFALSE 59982
// fac_list := fac_list union AvailableWeaponList ( i ) ;
59959: LD_ADDR_VAR 0 17
59963: PUSH
59964: LD_VAR 0 17
59968: PUSH
59969: LD_VAR 0 8
59973: PPUSH
59974: CALL_OW 478
59978: UNION
59979: ST_TO_ADDR
59980: GO 59956
59982: POP
59983: POP
// if not fac_list then
59984: LD_VAR 0 17
59988: NOT
59989: IFFALSE 59993
// exit ;
59991: GO 60942
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
59993: LD_ADDR_VAR 0 5
59997: PUSH
59998: LD_INT 4
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: LD_INT 9
60006: PUSH
60007: LD_INT 10
60009: PUSH
60010: LD_INT 6
60012: PUSH
60013: LD_INT 7
60015: PUSH
60016: LD_INT 11
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 27
60030: PUSH
60031: LD_INT 28
60033: PUSH
60034: LD_INT 26
60036: PUSH
60037: LD_INT 30
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 43
60048: PUSH
60049: LD_INT 44
60051: PUSH
60052: LD_INT 46
60054: PUSH
60055: LD_INT 45
60057: PUSH
60058: LD_INT 47
60060: PUSH
60061: LD_INT 49
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: PUSH
60077: LD_VAR 0 12
60081: ARRAY
60082: ST_TO_ADDR
// for i in list do
60083: LD_ADDR_VAR 0 8
60087: PUSH
60088: LD_VAR 0 5
60092: PUSH
60093: FOR_IN
60094: IFFALSE 60127
// if not i in fac_list then
60096: LD_VAR 0 8
60100: PUSH
60101: LD_VAR 0 17
60105: IN
60106: NOT
60107: IFFALSE 60125
// list := list diff i ;
60109: LD_ADDR_VAR 0 5
60113: PUSH
60114: LD_VAR 0 5
60118: PUSH
60119: LD_VAR 0 8
60123: DIFF
60124: ST_TO_ADDR
60125: GO 60093
60127: POP
60128: POP
// if not list then
60129: LD_VAR 0 5
60133: NOT
60134: IFFALSE 60138
// exit ;
60136: GO 60942
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60138: LD_VAR 0 12
60142: PUSH
60143: LD_INT 3
60145: EQUAL
60146: PUSH
60147: LD_INT 49
60149: PUSH
60150: LD_VAR 0 5
60154: IN
60155: AND
60156: PUSH
60157: LD_INT 31
60159: PPUSH
60160: LD_VAR 0 16
60164: PPUSH
60165: CALL_OW 321
60169: PUSH
60170: LD_INT 2
60172: EQUAL
60173: AND
60174: IFFALSE 60234
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60176: LD_INT 22
60178: PUSH
60179: LD_VAR 0 16
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 35
60190: PUSH
60191: LD_INT 49
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 91
60200: PUSH
60201: LD_VAR 0 1
60205: PUSH
60206: LD_INT 10
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: PPUSH
60219: CALL_OW 69
60223: NOT
60224: IFFALSE 60234
// weapon := ru_time_lapser ;
60226: LD_ADDR_VAR 0 18
60230: PUSH
60231: LD_INT 49
60233: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60234: LD_VAR 0 12
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: IN
60249: PUSH
60250: LD_INT 11
60252: PUSH
60253: LD_VAR 0 5
60257: IN
60258: PUSH
60259: LD_INT 30
60261: PUSH
60262: LD_VAR 0 5
60266: IN
60267: OR
60268: AND
60269: PUSH
60270: LD_INT 6
60272: PPUSH
60273: LD_VAR 0 16
60277: PPUSH
60278: CALL_OW 321
60282: PUSH
60283: LD_INT 2
60285: EQUAL
60286: AND
60287: IFFALSE 60452
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60289: LD_INT 22
60291: PUSH
60292: LD_VAR 0 16
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 35
60306: PUSH
60307: LD_INT 11
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 35
60316: PUSH
60317: LD_INT 30
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 91
60331: PUSH
60332: LD_VAR 0 1
60336: PUSH
60337: LD_INT 18
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: PPUSH
60350: CALL_OW 69
60354: NOT
60355: PUSH
60356: LD_INT 22
60358: PUSH
60359: LD_VAR 0 16
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 30
60373: PUSH
60374: LD_INT 32
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 30
60383: PUSH
60384: LD_INT 33
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 91
60398: PUSH
60399: LD_VAR 0 1
60403: PUSH
60404: LD_INT 12
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: PPUSH
60420: CALL_OW 69
60424: PUSH
60425: LD_INT 2
60427: GREATER
60428: AND
60429: IFFALSE 60452
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60431: LD_ADDR_VAR 0 18
60435: PUSH
60436: LD_INT 11
60438: PUSH
60439: LD_INT 30
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_VAR 0 12
60450: ARRAY
60451: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60452: LD_VAR 0 18
60456: NOT
60457: PUSH
60458: LD_INT 40
60460: PPUSH
60461: LD_VAR 0 16
60465: PPUSH
60466: CALL_OW 321
60470: PUSH
60471: LD_INT 2
60473: EQUAL
60474: AND
60475: PUSH
60476: LD_INT 7
60478: PUSH
60479: LD_VAR 0 5
60483: IN
60484: PUSH
60485: LD_INT 28
60487: PUSH
60488: LD_VAR 0 5
60492: IN
60493: OR
60494: PUSH
60495: LD_INT 45
60497: PUSH
60498: LD_VAR 0 5
60502: IN
60503: OR
60504: AND
60505: IFFALSE 60759
// begin hex := GetHexInfo ( x , y ) ;
60507: LD_ADDR_VAR 0 4
60511: PUSH
60512: LD_VAR 0 10
60516: PPUSH
60517: LD_VAR 0 11
60521: PPUSH
60522: CALL_OW 546
60526: ST_TO_ADDR
// if hex [ 1 ] then
60527: LD_VAR 0 4
60531: PUSH
60532: LD_INT 1
60534: ARRAY
60535: IFFALSE 60539
// exit ;
60537: GO 60942
// height := hex [ 2 ] ;
60539: LD_ADDR_VAR 0 15
60543: PUSH
60544: LD_VAR 0 4
60548: PUSH
60549: LD_INT 2
60551: ARRAY
60552: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60553: LD_ADDR_VAR 0 14
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 3
60566: PUSH
60567: LD_INT 5
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: ST_TO_ADDR
// for i in tmp do
60576: LD_ADDR_VAR 0 8
60580: PUSH
60581: LD_VAR 0 14
60585: PUSH
60586: FOR_IN
60587: IFFALSE 60757
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
60589: LD_ADDR_VAR 0 9
60593: PUSH
60594: LD_VAR 0 10
60598: PPUSH
60599: LD_VAR 0 8
60603: PPUSH
60604: LD_INT 5
60606: PPUSH
60607: CALL_OW 272
60611: PUSH
60612: LD_VAR 0 11
60616: PPUSH
60617: LD_VAR 0 8
60621: PPUSH
60622: LD_INT 5
60624: PPUSH
60625: CALL_OW 273
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
60634: LD_VAR 0 9
60638: PUSH
60639: LD_INT 1
60641: ARRAY
60642: PPUSH
60643: LD_VAR 0 9
60647: PUSH
60648: LD_INT 2
60650: ARRAY
60651: PPUSH
60652: CALL_OW 488
60656: IFFALSE 60755
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
60658: LD_ADDR_VAR 0 4
60662: PUSH
60663: LD_VAR 0 9
60667: PUSH
60668: LD_INT 1
60670: ARRAY
60671: PPUSH
60672: LD_VAR 0 9
60676: PUSH
60677: LD_INT 2
60679: ARRAY
60680: PPUSH
60681: CALL_OW 546
60685: ST_TO_ADDR
// if hex [ 1 ] then
60686: LD_VAR 0 4
60690: PUSH
60691: LD_INT 1
60693: ARRAY
60694: IFFALSE 60698
// continue ;
60696: GO 60586
// h := hex [ 2 ] ;
60698: LD_ADDR_VAR 0 13
60702: PUSH
60703: LD_VAR 0 4
60707: PUSH
60708: LD_INT 2
60710: ARRAY
60711: ST_TO_ADDR
// if h + 7 < height then
60712: LD_VAR 0 13
60716: PUSH
60717: LD_INT 7
60719: PLUS
60720: PUSH
60721: LD_VAR 0 15
60725: LESS
60726: IFFALSE 60755
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
60728: LD_ADDR_VAR 0 18
60732: PUSH
60733: LD_INT 7
60735: PUSH
60736: LD_INT 28
60738: PUSH
60739: LD_INT 45
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: LIST
60746: PUSH
60747: LD_VAR 0 12
60751: ARRAY
60752: ST_TO_ADDR
// break ;
60753: GO 60757
// end ; end ; end ;
60755: GO 60586
60757: POP
60758: POP
// end ; if not weapon then
60759: LD_VAR 0 18
60763: NOT
60764: IFFALSE 60824
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
60766: LD_ADDR_VAR 0 5
60770: PUSH
60771: LD_VAR 0 5
60775: PUSH
60776: LD_INT 11
60778: PUSH
60779: LD_INT 30
60781: PUSH
60782: LD_INT 49
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: DIFF
60790: ST_TO_ADDR
// if not list then
60791: LD_VAR 0 5
60795: NOT
60796: IFFALSE 60800
// exit ;
60798: GO 60942
// weapon := list [ rand ( 1 , list ) ] ;
60800: LD_ADDR_VAR 0 18
60804: PUSH
60805: LD_VAR 0 5
60809: PUSH
60810: LD_INT 1
60812: PPUSH
60813: LD_VAR 0 5
60817: PPUSH
60818: CALL_OW 12
60822: ARRAY
60823: ST_TO_ADDR
// end ; if weapon then
60824: LD_VAR 0 18
60828: IFFALSE 60942
// begin tmp := CostOfWeapon ( weapon ) ;
60830: LD_ADDR_VAR 0 14
60834: PUSH
60835: LD_VAR 0 18
60839: PPUSH
60840: CALL_OW 451
60844: ST_TO_ADDR
// j := GetBase ( tower ) ;
60845: LD_ADDR_VAR 0 9
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 274
60859: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
60860: LD_VAR 0 9
60864: PPUSH
60865: LD_INT 1
60867: PPUSH
60868: CALL_OW 275
60872: PUSH
60873: LD_VAR 0 14
60877: PUSH
60878: LD_INT 1
60880: ARRAY
60881: GREATEREQUAL
60882: PUSH
60883: LD_VAR 0 9
60887: PPUSH
60888: LD_INT 2
60890: PPUSH
60891: CALL_OW 275
60895: PUSH
60896: LD_VAR 0 14
60900: PUSH
60901: LD_INT 2
60903: ARRAY
60904: GREATEREQUAL
60905: AND
60906: PUSH
60907: LD_VAR 0 9
60911: PPUSH
60912: LD_INT 3
60914: PPUSH
60915: CALL_OW 275
60919: PUSH
60920: LD_VAR 0 14
60924: PUSH
60925: LD_INT 3
60927: ARRAY
60928: GREATEREQUAL
60929: AND
60930: IFFALSE 60942
// result := weapon ;
60932: LD_ADDR_VAR 0 3
60936: PUSH
60937: LD_VAR 0 18
60941: ST_TO_ADDR
// end ; end ;
60942: LD_VAR 0 3
60946: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
60947: LD_INT 0
60949: PPUSH
60950: PPUSH
// result := true ;
60951: LD_ADDR_VAR 0 3
60955: PUSH
60956: LD_INT 1
60958: ST_TO_ADDR
// if array1 = array2 then
60959: LD_VAR 0 1
60963: PUSH
60964: LD_VAR 0 2
60968: EQUAL
60969: IFFALSE 61029
// begin for i = 1 to array1 do
60971: LD_ADDR_VAR 0 4
60975: PUSH
60976: DOUBLE
60977: LD_INT 1
60979: DEC
60980: ST_TO_ADDR
60981: LD_VAR 0 1
60985: PUSH
60986: FOR_TO
60987: IFFALSE 61025
// if array1 [ i ] <> array2 [ i ] then
60989: LD_VAR 0 1
60993: PUSH
60994: LD_VAR 0 4
60998: ARRAY
60999: PUSH
61000: LD_VAR 0 2
61004: PUSH
61005: LD_VAR 0 4
61009: ARRAY
61010: NONEQUAL
61011: IFFALSE 61023
// begin result := false ;
61013: LD_ADDR_VAR 0 3
61017: PUSH
61018: LD_INT 0
61020: ST_TO_ADDR
// break ;
61021: GO 61025
// end ;
61023: GO 60986
61025: POP
61026: POP
// end else
61027: GO 61037
// result := false ;
61029: LD_ADDR_VAR 0 3
61033: PUSH
61034: LD_INT 0
61036: ST_TO_ADDR
// end ;
61037: LD_VAR 0 3
61041: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61042: LD_INT 0
61044: PPUSH
61045: PPUSH
61046: PPUSH
// pom := GetBase ( fac ) ;
61047: LD_ADDR_VAR 0 5
61051: PUSH
61052: LD_VAR 0 1
61056: PPUSH
61057: CALL_OW 274
61061: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61062: LD_ADDR_VAR 0 4
61066: PUSH
61067: LD_VAR 0 2
61071: PUSH
61072: LD_INT 1
61074: ARRAY
61075: PPUSH
61076: LD_VAR 0 2
61080: PUSH
61081: LD_INT 2
61083: ARRAY
61084: PPUSH
61085: LD_VAR 0 2
61089: PUSH
61090: LD_INT 3
61092: ARRAY
61093: PPUSH
61094: LD_VAR 0 2
61098: PUSH
61099: LD_INT 4
61101: ARRAY
61102: PPUSH
61103: CALL_OW 449
61107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61108: LD_ADDR_VAR 0 3
61112: PUSH
61113: LD_VAR 0 5
61117: PPUSH
61118: LD_INT 1
61120: PPUSH
61121: CALL_OW 275
61125: PUSH
61126: LD_VAR 0 4
61130: PUSH
61131: LD_INT 1
61133: ARRAY
61134: GREATEREQUAL
61135: PUSH
61136: LD_VAR 0 5
61140: PPUSH
61141: LD_INT 2
61143: PPUSH
61144: CALL_OW 275
61148: PUSH
61149: LD_VAR 0 4
61153: PUSH
61154: LD_INT 2
61156: ARRAY
61157: GREATEREQUAL
61158: AND
61159: PUSH
61160: LD_VAR 0 5
61164: PPUSH
61165: LD_INT 3
61167: PPUSH
61168: CALL_OW 275
61172: PUSH
61173: LD_VAR 0 4
61177: PUSH
61178: LD_INT 3
61180: ARRAY
61181: GREATEREQUAL
61182: AND
61183: ST_TO_ADDR
// end ;
61184: LD_VAR 0 3
61188: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61189: LD_INT 0
61191: PPUSH
61192: PPUSH
61193: PPUSH
61194: PPUSH
// pom := GetBase ( building ) ;
61195: LD_ADDR_VAR 0 3
61199: PUSH
61200: LD_VAR 0 1
61204: PPUSH
61205: CALL_OW 274
61209: ST_TO_ADDR
// if not pom then
61210: LD_VAR 0 3
61214: NOT
61215: IFFALSE 61219
// exit ;
61217: GO 61389
// btype := GetBType ( building ) ;
61219: LD_ADDR_VAR 0 5
61223: PUSH
61224: LD_VAR 0 1
61228: PPUSH
61229: CALL_OW 266
61233: ST_TO_ADDR
// if btype = b_armoury then
61234: LD_VAR 0 5
61238: PUSH
61239: LD_INT 4
61241: EQUAL
61242: IFFALSE 61252
// btype := b_barracks ;
61244: LD_ADDR_VAR 0 5
61248: PUSH
61249: LD_INT 5
61251: ST_TO_ADDR
// if btype = b_depot then
61252: LD_VAR 0 5
61256: PUSH
61257: LD_INT 0
61259: EQUAL
61260: IFFALSE 61270
// btype := b_warehouse ;
61262: LD_ADDR_VAR 0 5
61266: PUSH
61267: LD_INT 1
61269: ST_TO_ADDR
// if btype = b_workshop then
61270: LD_VAR 0 5
61274: PUSH
61275: LD_INT 2
61277: EQUAL
61278: IFFALSE 61288
// btype := b_factory ;
61280: LD_ADDR_VAR 0 5
61284: PUSH
61285: LD_INT 3
61287: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61288: LD_ADDR_VAR 0 4
61292: PUSH
61293: LD_VAR 0 5
61297: PPUSH
61298: LD_VAR 0 1
61302: PPUSH
61303: CALL_OW 248
61307: PPUSH
61308: CALL_OW 450
61312: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61313: LD_ADDR_VAR 0 2
61317: PUSH
61318: LD_VAR 0 3
61322: PPUSH
61323: LD_INT 1
61325: PPUSH
61326: CALL_OW 275
61330: PUSH
61331: LD_VAR 0 4
61335: PUSH
61336: LD_INT 1
61338: ARRAY
61339: GREATEREQUAL
61340: PUSH
61341: LD_VAR 0 3
61345: PPUSH
61346: LD_INT 2
61348: PPUSH
61349: CALL_OW 275
61353: PUSH
61354: LD_VAR 0 4
61358: PUSH
61359: LD_INT 2
61361: ARRAY
61362: GREATEREQUAL
61363: AND
61364: PUSH
61365: LD_VAR 0 3
61369: PPUSH
61370: LD_INT 3
61372: PPUSH
61373: CALL_OW 275
61377: PUSH
61378: LD_VAR 0 4
61382: PUSH
61383: LD_INT 3
61385: ARRAY
61386: GREATEREQUAL
61387: AND
61388: ST_TO_ADDR
// end ;
61389: LD_VAR 0 2
61393: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61394: LD_INT 0
61396: PPUSH
61397: PPUSH
61398: PPUSH
// pom := GetBase ( building ) ;
61399: LD_ADDR_VAR 0 4
61403: PUSH
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 274
61413: ST_TO_ADDR
// if not pom then
61414: LD_VAR 0 4
61418: NOT
61419: IFFALSE 61423
// exit ;
61421: GO 61524
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61423: LD_ADDR_VAR 0 5
61427: PUSH
61428: LD_VAR 0 2
61432: PPUSH
61433: LD_VAR 0 1
61437: PPUSH
61438: CALL_OW 248
61442: PPUSH
61443: CALL_OW 450
61447: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61448: LD_ADDR_VAR 0 3
61452: PUSH
61453: LD_VAR 0 4
61457: PPUSH
61458: LD_INT 1
61460: PPUSH
61461: CALL_OW 275
61465: PUSH
61466: LD_VAR 0 5
61470: PUSH
61471: LD_INT 1
61473: ARRAY
61474: GREATEREQUAL
61475: PUSH
61476: LD_VAR 0 4
61480: PPUSH
61481: LD_INT 2
61483: PPUSH
61484: CALL_OW 275
61488: PUSH
61489: LD_VAR 0 5
61493: PUSH
61494: LD_INT 2
61496: ARRAY
61497: GREATEREQUAL
61498: AND
61499: PUSH
61500: LD_VAR 0 4
61504: PPUSH
61505: LD_INT 3
61507: PPUSH
61508: CALL_OW 275
61512: PUSH
61513: LD_VAR 0 5
61517: PUSH
61518: LD_INT 3
61520: ARRAY
61521: GREATEREQUAL
61522: AND
61523: ST_TO_ADDR
// end ;
61524: LD_VAR 0 3
61528: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
61529: LD_INT 0
61531: PPUSH
61532: PPUSH
61533: PPUSH
61534: PPUSH
61535: PPUSH
61536: PPUSH
61537: PPUSH
61538: PPUSH
61539: PPUSH
61540: PPUSH
// result := false ;
61541: LD_ADDR_VAR 0 6
61545: PUSH
61546: LD_INT 0
61548: ST_TO_ADDR
// if not base or not btype or not x or not y then
61549: LD_VAR 0 1
61553: NOT
61554: PUSH
61555: LD_VAR 0 2
61559: NOT
61560: OR
61561: PUSH
61562: LD_VAR 0 3
61566: NOT
61567: OR
61568: PUSH
61569: LD_VAR 0 4
61573: NOT
61574: OR
61575: IFFALSE 61579
// exit ;
61577: GO 62188
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
61579: LD_ADDR_VAR 0 12
61583: PUSH
61584: LD_VAR 0 2
61588: PPUSH
61589: LD_VAR 0 3
61593: PPUSH
61594: LD_VAR 0 4
61598: PPUSH
61599: LD_VAR 0 5
61603: PPUSH
61604: LD_VAR 0 1
61608: PUSH
61609: LD_INT 1
61611: ARRAY
61612: PPUSH
61613: CALL_OW 248
61617: PPUSH
61618: LD_INT 0
61620: PPUSH
61621: CALL 63025 0 6
61625: ST_TO_ADDR
// if not hexes then
61626: LD_VAR 0 12
61630: NOT
61631: IFFALSE 61635
// exit ;
61633: GO 62188
// for i = 1 to hexes do
61635: LD_ADDR_VAR 0 7
61639: PUSH
61640: DOUBLE
61641: LD_INT 1
61643: DEC
61644: ST_TO_ADDR
61645: LD_VAR 0 12
61649: PUSH
61650: FOR_TO
61651: IFFALSE 62186
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61653: LD_ADDR_VAR 0 11
61657: PUSH
61658: LD_VAR 0 12
61662: PUSH
61663: LD_VAR 0 7
61667: ARRAY
61668: PUSH
61669: LD_INT 1
61671: ARRAY
61672: PPUSH
61673: LD_VAR 0 12
61677: PUSH
61678: LD_VAR 0 7
61682: ARRAY
61683: PUSH
61684: LD_INT 2
61686: ARRAY
61687: PPUSH
61688: CALL_OW 428
61692: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
61693: LD_VAR 0 12
61697: PUSH
61698: LD_VAR 0 7
61702: ARRAY
61703: PUSH
61704: LD_INT 1
61706: ARRAY
61707: PPUSH
61708: LD_VAR 0 12
61712: PUSH
61713: LD_VAR 0 7
61717: ARRAY
61718: PUSH
61719: LD_INT 2
61721: ARRAY
61722: PPUSH
61723: CALL_OW 351
61727: PUSH
61728: LD_VAR 0 12
61732: PUSH
61733: LD_VAR 0 7
61737: ARRAY
61738: PUSH
61739: LD_INT 1
61741: ARRAY
61742: PPUSH
61743: LD_VAR 0 12
61747: PUSH
61748: LD_VAR 0 7
61752: ARRAY
61753: PUSH
61754: LD_INT 2
61756: ARRAY
61757: PPUSH
61758: CALL_OW 488
61762: NOT
61763: OR
61764: PUSH
61765: LD_VAR 0 11
61769: PPUSH
61770: CALL_OW 247
61774: PUSH
61775: LD_INT 3
61777: EQUAL
61778: OR
61779: IFFALSE 61785
// exit ;
61781: POP
61782: POP
61783: GO 62188
// if not tmp or not tmp in base then
61785: LD_VAR 0 11
61789: NOT
61790: PUSH
61791: LD_VAR 0 11
61795: PUSH
61796: LD_VAR 0 1
61800: IN
61801: NOT
61802: OR
61803: IFFALSE 61807
// continue ;
61805: GO 61650
// result := true ;
61807: LD_ADDR_VAR 0 6
61811: PUSH
61812: LD_INT 1
61814: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61815: LD_ADDR_VAR 0 15
61819: PUSH
61820: LD_VAR 0 1
61824: PPUSH
61825: LD_INT 22
61827: PUSH
61828: LD_VAR 0 11
61832: PPUSH
61833: CALL_OW 255
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: LD_INT 30
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 30
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PPUSH
61874: CALL_OW 72
61878: ST_TO_ADDR
// if dep then
61879: LD_VAR 0 15
61883: IFFALSE 62019
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
61885: LD_ADDR_VAR 0 14
61889: PUSH
61890: LD_VAR 0 15
61894: PUSH
61895: LD_INT 1
61897: ARRAY
61898: PPUSH
61899: CALL_OW 250
61903: PPUSH
61904: LD_VAR 0 15
61908: PUSH
61909: LD_INT 1
61911: ARRAY
61912: PPUSH
61913: CALL_OW 254
61917: PPUSH
61918: LD_INT 5
61920: PPUSH
61921: CALL_OW 272
61925: PUSH
61926: LD_VAR 0 15
61930: PUSH
61931: LD_INT 1
61933: ARRAY
61934: PPUSH
61935: CALL_OW 251
61939: PPUSH
61940: LD_VAR 0 15
61944: PUSH
61945: LD_INT 1
61947: ARRAY
61948: PPUSH
61949: CALL_OW 254
61953: PPUSH
61954: LD_INT 5
61956: PPUSH
61957: CALL_OW 273
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
61966: LD_VAR 0 14
61970: PUSH
61971: LD_INT 1
61973: ARRAY
61974: PPUSH
61975: LD_VAR 0 14
61979: PUSH
61980: LD_INT 2
61982: ARRAY
61983: PPUSH
61984: CALL_OW 488
61988: IFFALSE 62019
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
61990: LD_VAR 0 11
61994: PPUSH
61995: LD_VAR 0 14
61999: PUSH
62000: LD_INT 1
62002: ARRAY
62003: PPUSH
62004: LD_VAR 0 14
62008: PUSH
62009: LD_INT 2
62011: ARRAY
62012: PPUSH
62013: CALL_OW 111
// continue ;
62017: GO 61650
// end ; end ; r := GetDir ( tmp ) ;
62019: LD_ADDR_VAR 0 13
62023: PUSH
62024: LD_VAR 0 11
62028: PPUSH
62029: CALL_OW 254
62033: ST_TO_ADDR
// if r = 5 then
62034: LD_VAR 0 13
62038: PUSH
62039: LD_INT 5
62041: EQUAL
62042: IFFALSE 62052
// r := 0 ;
62044: LD_ADDR_VAR 0 13
62048: PUSH
62049: LD_INT 0
62051: ST_TO_ADDR
// for j = r to 5 do
62052: LD_ADDR_VAR 0 8
62056: PUSH
62057: DOUBLE
62058: LD_VAR 0 13
62062: DEC
62063: ST_TO_ADDR
62064: LD_INT 5
62066: PUSH
62067: FOR_TO
62068: IFFALSE 62182
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62070: LD_ADDR_VAR 0 9
62074: PUSH
62075: LD_VAR 0 11
62079: PPUSH
62080: CALL_OW 250
62084: PPUSH
62085: LD_VAR 0 8
62089: PPUSH
62090: LD_INT 2
62092: PPUSH
62093: CALL_OW 272
62097: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62098: LD_ADDR_VAR 0 10
62102: PUSH
62103: LD_VAR 0 11
62107: PPUSH
62108: CALL_OW 251
62112: PPUSH
62113: LD_VAR 0 8
62117: PPUSH
62118: LD_INT 2
62120: PPUSH
62121: CALL_OW 273
62125: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62126: LD_VAR 0 9
62130: PPUSH
62131: LD_VAR 0 10
62135: PPUSH
62136: CALL_OW 488
62140: PUSH
62141: LD_VAR 0 9
62145: PPUSH
62146: LD_VAR 0 10
62150: PPUSH
62151: CALL_OW 428
62155: NOT
62156: AND
62157: IFFALSE 62180
// begin ComMoveXY ( tmp , _x , _y ) ;
62159: LD_VAR 0 11
62163: PPUSH
62164: LD_VAR 0 9
62168: PPUSH
62169: LD_VAR 0 10
62173: PPUSH
62174: CALL_OW 111
// break ;
62178: GO 62182
// end ; end ;
62180: GO 62067
62182: POP
62183: POP
// end ;
62184: GO 61650
62186: POP
62187: POP
// end ;
62188: LD_VAR 0 6
62192: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
62193: LD_INT 0
62195: PPUSH
62196: PPUSH
62197: PPUSH
62198: PPUSH
62199: PPUSH
62200: PPUSH
62201: PPUSH
62202: PPUSH
62203: PPUSH
62204: PPUSH
// result := false ;
62205: LD_ADDR_VAR 0 6
62209: PUSH
62210: LD_INT 0
62212: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
62213: LD_VAR 0 1
62217: NOT
62218: PUSH
62219: LD_VAR 0 1
62223: PPUSH
62224: CALL_OW 266
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: IN
62239: NOT
62240: OR
62241: PUSH
62242: LD_VAR 0 2
62246: NOT
62247: OR
62248: PUSH
62249: LD_VAR 0 5
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 4
62268: PUSH
62269: LD_INT 5
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: IN
62280: NOT
62281: OR
62282: PUSH
62283: LD_VAR 0 3
62287: PPUSH
62288: LD_VAR 0 4
62292: PPUSH
62293: CALL_OW 488
62297: NOT
62298: OR
62299: IFFALSE 62303
// exit ;
62301: GO 63020
// pom := GetBase ( depot ) ;
62303: LD_ADDR_VAR 0 10
62307: PUSH
62308: LD_VAR 0 1
62312: PPUSH
62313: CALL_OW 274
62317: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62318: LD_ADDR_VAR 0 11
62322: PUSH
62323: LD_VAR 0 2
62327: PPUSH
62328: LD_VAR 0 1
62332: PPUSH
62333: CALL_OW 248
62337: PPUSH
62338: CALL_OW 450
62342: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
62343: LD_VAR 0 10
62347: PPUSH
62348: LD_INT 1
62350: PPUSH
62351: CALL_OW 275
62355: PUSH
62356: LD_VAR 0 11
62360: PUSH
62361: LD_INT 1
62363: ARRAY
62364: GREATEREQUAL
62365: PUSH
62366: LD_VAR 0 10
62370: PPUSH
62371: LD_INT 2
62373: PPUSH
62374: CALL_OW 275
62378: PUSH
62379: LD_VAR 0 11
62383: PUSH
62384: LD_INT 2
62386: ARRAY
62387: GREATEREQUAL
62388: AND
62389: PUSH
62390: LD_VAR 0 10
62394: PPUSH
62395: LD_INT 3
62397: PPUSH
62398: CALL_OW 275
62402: PUSH
62403: LD_VAR 0 11
62407: PUSH
62408: LD_INT 3
62410: ARRAY
62411: GREATEREQUAL
62412: AND
62413: NOT
62414: IFFALSE 62418
// exit ;
62416: GO 63020
// if GetBType ( depot ) = b_depot then
62418: LD_VAR 0 1
62422: PPUSH
62423: CALL_OW 266
62427: PUSH
62428: LD_INT 0
62430: EQUAL
62431: IFFALSE 62443
// dist := 28 else
62433: LD_ADDR_VAR 0 14
62437: PUSH
62438: LD_INT 28
62440: ST_TO_ADDR
62441: GO 62451
// dist := 36 ;
62443: LD_ADDR_VAR 0 14
62447: PUSH
62448: LD_INT 36
62450: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
62451: LD_VAR 0 1
62455: PPUSH
62456: LD_VAR 0 3
62460: PPUSH
62461: LD_VAR 0 4
62465: PPUSH
62466: CALL_OW 297
62470: PUSH
62471: LD_VAR 0 14
62475: GREATER
62476: IFFALSE 62480
// exit ;
62478: GO 63020
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
62480: LD_ADDR_VAR 0 12
62484: PUSH
62485: LD_VAR 0 2
62489: PPUSH
62490: LD_VAR 0 3
62494: PPUSH
62495: LD_VAR 0 4
62499: PPUSH
62500: LD_VAR 0 5
62504: PPUSH
62505: LD_VAR 0 1
62509: PPUSH
62510: CALL_OW 248
62514: PPUSH
62515: LD_INT 0
62517: PPUSH
62518: CALL 63025 0 6
62522: ST_TO_ADDR
// if not hexes then
62523: LD_VAR 0 12
62527: NOT
62528: IFFALSE 62532
// exit ;
62530: GO 63020
// hex := GetHexInfo ( x , y ) ;
62532: LD_ADDR_VAR 0 15
62536: PUSH
62537: LD_VAR 0 3
62541: PPUSH
62542: LD_VAR 0 4
62546: PPUSH
62547: CALL_OW 546
62551: ST_TO_ADDR
// if hex [ 1 ] then
62552: LD_VAR 0 15
62556: PUSH
62557: LD_INT 1
62559: ARRAY
62560: IFFALSE 62564
// exit ;
62562: GO 63020
// height := hex [ 2 ] ;
62564: LD_ADDR_VAR 0 13
62568: PUSH
62569: LD_VAR 0 15
62573: PUSH
62574: LD_INT 2
62576: ARRAY
62577: ST_TO_ADDR
// for i = 1 to hexes do
62578: LD_ADDR_VAR 0 7
62582: PUSH
62583: DOUBLE
62584: LD_INT 1
62586: DEC
62587: ST_TO_ADDR
62588: LD_VAR 0 12
62592: PUSH
62593: FOR_TO
62594: IFFALSE 62924
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
62596: LD_VAR 0 12
62600: PUSH
62601: LD_VAR 0 7
62605: ARRAY
62606: PUSH
62607: LD_INT 1
62609: ARRAY
62610: PPUSH
62611: LD_VAR 0 12
62615: PUSH
62616: LD_VAR 0 7
62620: ARRAY
62621: PUSH
62622: LD_INT 2
62624: ARRAY
62625: PPUSH
62626: CALL_OW 488
62630: NOT
62631: PUSH
62632: LD_VAR 0 12
62636: PUSH
62637: LD_VAR 0 7
62641: ARRAY
62642: PUSH
62643: LD_INT 1
62645: ARRAY
62646: PPUSH
62647: LD_VAR 0 12
62651: PUSH
62652: LD_VAR 0 7
62656: ARRAY
62657: PUSH
62658: LD_INT 2
62660: ARRAY
62661: PPUSH
62662: CALL_OW 428
62666: PUSH
62667: LD_INT 0
62669: GREATER
62670: OR
62671: PUSH
62672: LD_VAR 0 12
62676: PUSH
62677: LD_VAR 0 7
62681: ARRAY
62682: PUSH
62683: LD_INT 1
62685: ARRAY
62686: PPUSH
62687: LD_VAR 0 12
62691: PUSH
62692: LD_VAR 0 7
62696: ARRAY
62697: PUSH
62698: LD_INT 2
62700: ARRAY
62701: PPUSH
62702: CALL_OW 351
62706: OR
62707: IFFALSE 62713
// exit ;
62709: POP
62710: POP
62711: GO 63020
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62713: LD_ADDR_VAR 0 8
62717: PUSH
62718: LD_VAR 0 12
62722: PUSH
62723: LD_VAR 0 7
62727: ARRAY
62728: PUSH
62729: LD_INT 1
62731: ARRAY
62732: PPUSH
62733: LD_VAR 0 12
62737: PUSH
62738: LD_VAR 0 7
62742: ARRAY
62743: PUSH
62744: LD_INT 2
62746: ARRAY
62747: PPUSH
62748: CALL_OW 546
62752: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
62753: LD_VAR 0 8
62757: PUSH
62758: LD_INT 1
62760: ARRAY
62761: PUSH
62762: LD_VAR 0 8
62766: PUSH
62767: LD_INT 2
62769: ARRAY
62770: PUSH
62771: LD_VAR 0 13
62775: PUSH
62776: LD_INT 2
62778: PLUS
62779: GREATER
62780: OR
62781: PUSH
62782: LD_VAR 0 8
62786: PUSH
62787: LD_INT 2
62789: ARRAY
62790: PUSH
62791: LD_VAR 0 13
62795: PUSH
62796: LD_INT 2
62798: MINUS
62799: LESS
62800: OR
62801: PUSH
62802: LD_VAR 0 8
62806: PUSH
62807: LD_INT 3
62809: ARRAY
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 8
62816: PUSH
62817: LD_INT 9
62819: PUSH
62820: LD_INT 10
62822: PUSH
62823: LD_INT 11
62825: PUSH
62826: LD_INT 12
62828: PUSH
62829: LD_INT 13
62831: PUSH
62832: LD_INT 16
62834: PUSH
62835: LD_INT 17
62837: PUSH
62838: LD_INT 18
62840: PUSH
62841: LD_INT 19
62843: PUSH
62844: LD_INT 20
62846: PUSH
62847: LD_INT 21
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: IN
62865: NOT
62866: OR
62867: PUSH
62868: LD_VAR 0 8
62872: PUSH
62873: LD_INT 5
62875: ARRAY
62876: NOT
62877: OR
62878: PUSH
62879: LD_VAR 0 8
62883: PUSH
62884: LD_INT 6
62886: ARRAY
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: LD_INT 7
62896: PUSH
62897: LD_INT 9
62899: PUSH
62900: LD_INT 10
62902: PUSH
62903: LD_INT 11
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: IN
62914: NOT
62915: OR
62916: IFFALSE 62922
// exit ;
62918: POP
62919: POP
62920: GO 63020
// end ;
62922: GO 62593
62924: POP
62925: POP
// side := GetSide ( depot ) ;
62926: LD_ADDR_VAR 0 9
62930: PUSH
62931: LD_VAR 0 1
62935: PPUSH
62936: CALL_OW 255
62940: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
62941: LD_VAR 0 9
62945: PPUSH
62946: LD_VAR 0 3
62950: PPUSH
62951: LD_VAR 0 4
62955: PPUSH
62956: LD_INT 20
62958: PPUSH
62959: CALL 55674 0 4
62963: PUSH
62964: LD_INT 4
62966: ARRAY
62967: IFFALSE 62971
// exit ;
62969: GO 63020
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
62971: LD_VAR 0 2
62975: PUSH
62976: LD_INT 29
62978: PUSH
62979: LD_INT 30
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: IN
62986: PUSH
62987: LD_VAR 0 3
62991: PPUSH
62992: LD_VAR 0 4
62996: PPUSH
62997: LD_VAR 0 9
63001: PPUSH
63002: CALL_OW 440
63006: NOT
63007: AND
63008: IFFALSE 63012
// exit ;
63010: GO 63020
// result := true ;
63012: LD_ADDR_VAR 0 6
63016: PUSH
63017: LD_INT 1
63019: ST_TO_ADDR
// end ;
63020: LD_VAR 0 6
63024: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
63025: LD_INT 0
63027: PPUSH
63028: PPUSH
63029: PPUSH
63030: PPUSH
63031: PPUSH
63032: PPUSH
63033: PPUSH
63034: PPUSH
63035: PPUSH
63036: PPUSH
63037: PPUSH
63038: PPUSH
63039: PPUSH
63040: PPUSH
63041: PPUSH
63042: PPUSH
63043: PPUSH
63044: PPUSH
63045: PPUSH
63046: PPUSH
63047: PPUSH
63048: PPUSH
63049: PPUSH
63050: PPUSH
63051: PPUSH
63052: PPUSH
63053: PPUSH
63054: PPUSH
63055: PPUSH
63056: PPUSH
63057: PPUSH
63058: PPUSH
63059: PPUSH
63060: PPUSH
63061: PPUSH
63062: PPUSH
63063: PPUSH
63064: PPUSH
63065: PPUSH
63066: PPUSH
63067: PPUSH
63068: PPUSH
63069: PPUSH
63070: PPUSH
63071: PPUSH
63072: PPUSH
63073: PPUSH
63074: PPUSH
63075: PPUSH
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
63082: PPUSH
63083: PPUSH
63084: PPUSH
// result = [ ] ;
63085: LD_ADDR_VAR 0 7
63089: PUSH
63090: EMPTY
63091: ST_TO_ADDR
// temp_list = [ ] ;
63092: LD_ADDR_VAR 0 9
63096: PUSH
63097: EMPTY
63098: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
63099: LD_VAR 0 4
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: LD_INT 4
63118: PUSH
63119: LD_INT 5
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: IN
63130: NOT
63131: PUSH
63132: LD_VAR 0 1
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: IN
63147: PUSH
63148: LD_VAR 0 5
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: LD_INT 2
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: IN
63167: NOT
63168: AND
63169: OR
63170: IFFALSE 63174
// exit ;
63172: GO 81565
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
63174: LD_VAR 0 1
63178: PUSH
63179: LD_INT 6
63181: PUSH
63182: LD_INT 7
63184: PUSH
63185: LD_INT 8
63187: PUSH
63188: LD_INT 13
63190: PUSH
63191: LD_INT 12
63193: PUSH
63194: LD_INT 15
63196: PUSH
63197: LD_INT 11
63199: PUSH
63200: LD_INT 14
63202: PUSH
63203: LD_INT 10
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: IN
63217: IFFALSE 63227
// btype = b_lab ;
63219: LD_ADDR_VAR 0 1
63223: PUSH
63224: LD_INT 6
63226: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
63227: LD_VAR 0 6
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: IN
63246: NOT
63247: PUSH
63248: LD_VAR 0 1
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: LD_INT 6
63267: PUSH
63268: LD_INT 36
63270: PUSH
63271: LD_INT 4
63273: PUSH
63274: LD_INT 5
63276: PUSH
63277: LD_INT 31
63279: PUSH
63280: LD_INT 32
63282: PUSH
63283: LD_INT 33
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: IN
63299: NOT
63300: PUSH
63301: LD_VAR 0 6
63305: PUSH
63306: LD_INT 1
63308: EQUAL
63309: AND
63310: OR
63311: PUSH
63312: LD_VAR 0 1
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: IN
63327: NOT
63328: PUSH
63329: LD_VAR 0 6
63333: PUSH
63334: LD_INT 2
63336: EQUAL
63337: AND
63338: OR
63339: IFFALSE 63349
// mode = 0 ;
63341: LD_ADDR_VAR 0 6
63345: PUSH
63346: LD_INT 0
63348: ST_TO_ADDR
// case mode of 0 :
63349: LD_VAR 0 6
63353: PUSH
63354: LD_INT 0
63356: DOUBLE
63357: EQUAL
63358: IFTRUE 63362
63360: GO 74815
63362: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63363: LD_ADDR_VAR 0 11
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 3
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: LD_INT 3
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63556: LD_ADDR_VAR 0 12
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 1
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 2
63702: NEG
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 3
63713: NEG
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 3
63724: NEG
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63752: LD_ADDR_VAR 0 13
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 1
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: NEG
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 3
63923: NEG
63924: PUSH
63925: LD_INT 3
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63951: LD_ADDR_VAR 0 14
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: LD_INT 3
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: LD_INT 2
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64147: LD_ADDR_VAR 0 15
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 3
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 3
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64340: LD_ADDR_VAR 0 16
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 2
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 3
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: LD_INT 3
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 3
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64533: LD_ADDR_VAR 0 17
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: LD_INT 2
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 2
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: LD_INT 1
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 2
64732: NEG
64733: PUSH
64734: LD_INT 2
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64763: LD_ADDR_VAR 0 18
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: LD_INT 2
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: LD_INT 2
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: LD_INT 2
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: NEG
64963: PUSH
64964: LD_INT 2
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64993: LD_ADDR_VAR 0 19
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 2
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: LD_INT 2
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 2
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: LD_INT 2
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: LD_INT 2
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 2
65192: NEG
65193: PUSH
65194: LD_INT 2
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65223: LD_ADDR_VAR 0 20
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 2
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 2
65358: PUSH
65359: LD_INT 2
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 2
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65453: LD_ADDR_VAR 0 21
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 2
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: LD_INT 2
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 2
65588: PUSH
65589: LD_INT 2
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: LD_INT 2
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: LD_INT 2
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: NEG
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 2
65629: NEG
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 2
65652: NEG
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65683: LD_ADDR_VAR 0 22
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: LD_INT 2
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 2
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: LD_INT 2
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: LD_INT 2
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 2
65859: NEG
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 2
65870: NEG
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65913: LD_ADDR_VAR 0 23
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: NEG
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 2
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: LD_INT 2
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: LD_INT 2
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 2
66089: NEG
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 2
66112: NEG
66113: PUSH
66114: LD_INT 2
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: LD_INT 3
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 3
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: LD_INT 2
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
66193: LD_ADDR_VAR 0 24
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 2
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 2
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 2
66369: NEG
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: LD_INT 2
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: LD_INT 2
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 3
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 3
66436: PUSH
66437: LD_INT 2
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
66469: LD_ADDR_VAR 0 25
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 1
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: NEG
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 2
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 1
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 2
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: LD_INT 2
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: LD_INT 2
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: LD_INT 2
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 2
66645: NEG
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: LD_INT 3
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: LD_INT 3
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66743: LD_ADDR_VAR 0 26
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: LD_INT 0
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: LD_INT 0
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 1
66812: NEG
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: LD_INT 2
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 2
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: LD_INT 2
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: NEG
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 2
66930: NEG
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: LD_INT 2
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 2
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67019: LD_ADDR_VAR 0 27
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 1
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 1
67088: NEG
67089: PUSH
67090: LD_INT 1
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: LD_INT 2
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 1
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: NEG
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: LD_INT 0
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: LD_INT 1
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 2
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67299: LD_ADDR_VAR 0 28
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 1
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 1
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: LD_INT 2
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: LD_INT 2
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 1
67403: PUSH
67404: LD_INT 1
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 2
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 1
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 2
67498: NEG
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: LD_INT 3
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: NEG
67535: PUSH
67536: LD_INT 1
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 3
67546: NEG
67547: PUSH
67548: LD_INT 2
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67581: LD_ADDR_VAR 0 29
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 1
67650: NEG
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: LD_INT 2
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: LD_INT 1
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: LD_INT 2
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 2
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 2
67759: NEG
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 2
67771: NEG
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 1
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: LD_INT 2
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 3
67825: NEG
67826: PUSH
67827: LD_INT 2
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67860: LD_ADDR_VAR 0 30
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: LD_INT 0
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 1
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: LD_INT 1
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 1
67929: NEG
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 1
67941: NEG
67942: PUSH
67943: LD_INT 2
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 0
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 2
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: LD_INT 2
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 2
68037: NEG
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 1
68049: NEG
68050: PUSH
68051: LD_INT 3
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 1
68061: PUSH
68062: LD_INT 2
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 3
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 2
68082: PUSH
68083: LD_INT 3
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 2
68092: NEG
68093: PUSH
68094: LD_INT 1
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 3
68103: NEG
68104: PUSH
68105: LD_INT 1
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68138: LD_ADDR_VAR 0 31
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: LD_INT 0
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 1
68219: NEG
68220: PUSH
68221: LD_INT 2
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 2
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 2
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 2
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 1
68292: NEG
68293: PUSH
68294: LD_INT 1
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 2
68303: NEG
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 3
68350: PUSH
68351: LD_INT 1
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: LD_INT 3
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 1
68370: NEG
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 3
68381: NEG
68382: PUSH
68383: LD_INT 2
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68416: LD_ADDR_VAR 0 32
68420: PUSH
68421: LD_INT 0
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: LD_INT 1
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 0
68464: PUSH
68465: LD_INT 1
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 1
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: LD_INT 2
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: LD_INT 2
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 1
68520: PUSH
68521: LD_INT 1
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 2
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 2
68541: PUSH
68542: LD_INT 2
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: LD_INT 2
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 0
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 1
68571: NEG
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 2
68582: NEG
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 2
68593: NEG
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 1
68605: NEG
68606: PUSH
68607: LD_INT 3
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 1
68617: PUSH
68618: LD_INT 2
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 3
68628: PUSH
68629: LD_INT 2
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 2
68648: NEG
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: LD_INT 1
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68694: LD_ADDR_VAR 0 33
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: LD_INT 1
68714: NEG
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 1
68752: NEG
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 1
68763: NEG
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 1
68775: NEG
68776: PUSH
68777: LD_INT 2
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 1
68787: PUSH
68788: LD_INT 1
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 2
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 2
68808: PUSH
68809: LD_INT 1
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 1
68818: PUSH
68819: LD_INT 2
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: LD_INT 2
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: LD_INT 1
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 2
68849: NEG
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: LD_INT 1
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 2
68872: NEG
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 2
68884: NEG
68885: PUSH
68886: LD_INT 3
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 2
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 3
68907: PUSH
68908: LD_INT 1
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 1
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: PUSH
68929: LD_INT 2
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 3
68938: NEG
68939: PUSH
68940: LD_INT 2
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68973: LD_ADDR_VAR 0 34
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: LD_INT 1
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 1
69011: PUSH
69012: LD_INT 1
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: NEG
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: LD_INT 1
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: LD_INT 2
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 2
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: PUSH
69078: LD_INT 1
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 2
69088: PUSH
69089: LD_INT 1
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 2
69098: PUSH
69099: LD_INT 2
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: LD_INT 2
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 2
69129: NEG
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 2
69140: NEG
69141: PUSH
69142: LD_INT 1
69144: NEG
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 2
69152: NEG
69153: PUSH
69154: LD_INT 2
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: LD_INT 3
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 1
69176: PUSH
69177: LD_INT 2
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 3
69187: PUSH
69188: LD_INT 2
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 2
69197: PUSH
69198: LD_INT 3
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 2
69207: NEG
69208: PUSH
69209: LD_INT 1
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 3
69218: NEG
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69253: LD_ADDR_VAR 0 35
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: LD_INT 1
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: LD_INT 1
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 1
69322: NEG
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 2
69334: PUSH
69335: LD_INT 1
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69365: LD_ADDR_VAR 0 36
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 0
69382: PUSH
69383: LD_INT 1
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 1
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: LD_INT 1
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 1
69434: NEG
69435: PUSH
69436: LD_INT 1
69438: NEG
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 1
69446: NEG
69447: PUSH
69448: LD_INT 2
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 2
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69477: LD_ADDR_VAR 0 37
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: LD_INT 1
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: LD_INT 0
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 1
69515: PUSH
69516: LD_INT 1
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: LD_INT 1
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 1
69535: NEG
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 1
69546: NEG
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69589: LD_ADDR_VAR 0 38
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 0
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: LD_INT 1
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 1
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 1
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: LD_INT 1
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 1
69647: NEG
69648: PUSH
69649: LD_INT 0
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 1
69658: NEG
69659: PUSH
69660: LD_INT 1
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: LD_INT 1
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 2
69680: NEG
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69701: LD_ADDR_VAR 0 39
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: LD_INT 1
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 1
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 1
69739: PUSH
69740: LD_INT 1
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 1
69759: NEG
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: LD_INT 1
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 1
69782: NEG
69783: PUSH
69784: LD_INT 2
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 1
69794: PUSH
69795: LD_INT 2
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69813: LD_ADDR_VAR 0 40
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: LD_INT 0
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 0
69830: PUSH
69831: LD_INT 1
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: PUSH
69852: LD_INT 1
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 1
69871: NEG
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 1
69894: PUSH
69895: LD_INT 1
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: NEG
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69925: LD_ADDR_VAR 0 41
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 1
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 1
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 1
69994: NEG
69995: PUSH
69996: LD_INT 1
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 1
70006: NEG
70007: PUSH
70008: LD_INT 2
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 2
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 2
70049: PUSH
70050: LD_INT 2
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: PUSH
70060: LD_INT 2
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 2
70080: NEG
70081: PUSH
70082: LD_INT 0
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 2
70091: NEG
70092: PUSH
70093: LD_INT 1
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 2
70103: NEG
70104: PUSH
70105: LD_INT 2
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: LD_INT 3
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 2
70127: PUSH
70128: LD_INT 1
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 3
70158: PUSH
70159: LD_INT 2
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 3
70168: PUSH
70169: LD_INT 3
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: LD_INT 3
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 2
70188: NEG
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 3
70199: NEG
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 3
70210: NEG
70211: PUSH
70212: LD_INT 1
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 3
70222: NEG
70223: PUSH
70224: LD_INT 2
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: NEG
70235: PUSH
70236: LD_INT 3
70238: NEG
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70275: LD_ADDR_VAR 0 42
70279: PUSH
70280: LD_INT 0
70282: PUSH
70283: LD_INT 0
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: PUSH
70314: LD_INT 1
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: LD_INT 1
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 1
70356: NEG
70357: PUSH
70358: LD_INT 2
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: LD_INT 2
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 1
70379: PUSH
70380: LD_INT 1
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 2
70390: PUSH
70391: LD_INT 1
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 2
70400: PUSH
70401: LD_INT 2
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: PUSH
70411: LD_INT 2
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 2
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: LD_INT 1
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 2
70441: NEG
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 2
70453: NEG
70454: PUSH
70455: LD_INT 2
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 2
70465: NEG
70466: PUSH
70467: LD_INT 3
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 1
70477: NEG
70478: PUSH
70479: LD_INT 3
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: LD_INT 3
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 1
70500: PUSH
70501: LD_INT 2
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 3
70511: PUSH
70512: LD_INT 2
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 3
70521: PUSH
70522: LD_INT 3
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 2
70531: PUSH
70532: LD_INT 3
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 1
70541: PUSH
70542: LD_INT 3
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: LD_INT 3
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 1
70561: NEG
70562: PUSH
70563: LD_INT 2
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 3
70572: NEG
70573: PUSH
70574: LD_INT 2
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 3
70584: NEG
70585: PUSH
70586: LD_INT 3
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70625: LD_ADDR_VAR 0 43
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 0
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 0
70642: PUSH
70643: LD_INT 1
70645: NEG
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: LD_INT 0
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: LD_INT 1
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_INT 1
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: LD_INT 1
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 1
70706: NEG
70707: PUSH
70708: LD_INT 2
70710: NEG
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 0
70718: PUSH
70719: LD_INT 2
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 1
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 2
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 2
70750: PUSH
70751: LD_INT 1
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: LD_INT 2
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 0
70770: PUSH
70771: LD_INT 2
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 1
70780: NEG
70781: PUSH
70782: LD_INT 1
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: NEG
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 2
70802: NEG
70803: PUSH
70804: LD_INT 1
70806: NEG
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 1
70814: NEG
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: LD_INT 3
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 1
70837: PUSH
70838: LD_INT 2
70840: NEG
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 2
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 3
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: LD_INT 3
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: LD_INT 3
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 1
70899: NEG
70900: PUSH
70901: LD_INT 2
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 2
70910: NEG
70911: PUSH
70912: LD_INT 1
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 3
70921: NEG
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 3
70932: NEG
70933: PUSH
70934: LD_INT 1
70936: NEG
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70973: LD_ADDR_VAR 0 44
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: LD_INT 0
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: LD_INT 1
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 1
71011: PUSH
71012: LD_INT 1
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 0
71021: PUSH
71022: LD_INT 1
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 1
71031: NEG
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 1
71042: NEG
71043: PUSH
71044: LD_INT 1
71046: NEG
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 1
71054: NEG
71055: PUSH
71056: LD_INT 2
71058: NEG
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 1
71066: PUSH
71067: LD_INT 1
71069: NEG
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 0
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 2
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: LD_INT 2
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 1
71107: PUSH
71108: LD_INT 2
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 1
71117: NEG
71118: PUSH
71119: LD_INT 1
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 2
71128: NEG
71129: PUSH
71130: LD_INT 0
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 2
71139: NEG
71140: PUSH
71141: LD_INT 1
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 2
71151: NEG
71152: PUSH
71153: LD_INT 2
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 2
71163: NEG
71164: PUSH
71165: LD_INT 3
71167: NEG
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 2
71175: PUSH
71176: LD_INT 1
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: LD_INT 0
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 3
71196: PUSH
71197: LD_INT 1
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 3
71206: PUSH
71207: LD_INT 2
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 3
71216: PUSH
71217: LD_INT 3
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: NEG
71237: PUSH
71238: LD_INT 1
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 3
71247: NEG
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: LD_INT 1
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 3
71270: NEG
71271: PUSH
71272: LD_INT 2
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 3
71282: NEG
71283: PUSH
71284: LD_INT 3
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71323: LD_ADDR_VAR 0 45
71327: PUSH
71328: LD_INT 0
71330: PUSH
71331: LD_INT 0
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 0
71340: PUSH
71341: LD_INT 1
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 1
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 1
71361: PUSH
71362: LD_INT 1
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 0
71371: PUSH
71372: LD_INT 1
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 1
71381: NEG
71382: PUSH
71383: LD_INT 0
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 1
71392: NEG
71393: PUSH
71394: LD_INT 1
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 1
71404: NEG
71405: PUSH
71406: LD_INT 2
71408: NEG
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 0
71416: PUSH
71417: LD_INT 2
71419: NEG
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 1
71427: PUSH
71428: LD_INT 1
71430: NEG
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 2
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 2
71448: PUSH
71449: LD_INT 2
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: PUSH
71459: LD_INT 2
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 0
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: NEG
71479: PUSH
71480: LD_INT 1
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 2
71489: NEG
71490: PUSH
71491: LD_INT 1
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 2
71501: NEG
71502: PUSH
71503: LD_INT 2
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 2
71513: NEG
71514: PUSH
71515: LD_INT 3
71517: NEG
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 1
71525: NEG
71526: PUSH
71527: LD_INT 3
71529: NEG
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: LD_INT 3
71540: NEG
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 1
71548: PUSH
71549: LD_INT 2
71551: NEG
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 3
71559: PUSH
71560: LD_INT 2
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 3
71569: PUSH
71570: LD_INT 3
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 2
71579: PUSH
71580: LD_INT 3
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 1
71589: PUSH
71590: LD_INT 3
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: LD_INT 3
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 1
71609: NEG
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 3
71620: NEG
71621: PUSH
71622: LD_INT 2
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 3
71632: NEG
71633: PUSH
71634: LD_INT 3
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71673: LD_ADDR_VAR 0 46
71677: PUSH
71678: LD_INT 0
71680: PUSH
71681: LD_INT 0
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 0
71690: PUSH
71691: LD_INT 1
71693: NEG
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 1
71701: PUSH
71702: LD_INT 0
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 1
71711: PUSH
71712: LD_INT 1
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 0
71721: PUSH
71722: LD_INT 1
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 1
71731: NEG
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 1
71742: NEG
71743: PUSH
71744: LD_INT 1
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 1
71754: NEG
71755: PUSH
71756: LD_INT 2
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 0
71766: PUSH
71767: LD_INT 2
71769: NEG
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 1
71777: PUSH
71778: LD_INT 1
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 2
71788: PUSH
71789: LD_INT 0
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 2
71798: PUSH
71799: LD_INT 1
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 1
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: LD_INT 2
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 1
71828: NEG
71829: PUSH
71830: LD_INT 1
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 2
71839: NEG
71840: PUSH
71841: LD_INT 0
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 2
71850: NEG
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 1
71862: NEG
71863: PUSH
71864: LD_INT 3
71866: NEG
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 0
71874: PUSH
71875: LD_INT 3
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: LD_INT 2
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 2
71896: PUSH
71897: LD_INT 1
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 3
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: PUSH
71918: LD_INT 1
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 1
71927: PUSH
71928: LD_INT 3
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 0
71937: PUSH
71938: LD_INT 3
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 1
71947: NEG
71948: PUSH
71949: LD_INT 2
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 2
71958: NEG
71959: PUSH
71960: LD_INT 1
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 3
71969: NEG
71970: PUSH
71971: LD_INT 0
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 3
71980: NEG
71981: PUSH
71982: LD_INT 1
71984: NEG
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72021: LD_ADDR_VAR 0 47
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: LD_INT 0
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: LD_INT 1
72041: NEG
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 1
72049: PUSH
72050: LD_INT 0
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: LD_INT 1
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: LD_INT 1
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 1
72079: NEG
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 1
72090: NEG
72091: PUSH
72092: LD_INT 1
72094: NEG
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 1
72102: NEG
72103: PUSH
72104: LD_INT 2
72106: NEG
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 0
72114: PUSH
72115: LD_INT 2
72117: NEG
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 1
72125: PUSH
72126: LD_INT 1
72128: NEG
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 2
72136: NEG
72137: PUSH
72138: LD_INT 1
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 2
72148: NEG
72149: PUSH
72150: LD_INT 2
72152: NEG
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72172: LD_ADDR_VAR 0 48
72176: PUSH
72177: LD_INT 0
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 0
72189: PUSH
72190: LD_INT 1
72192: NEG
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: LD_INT 0
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: LD_INT 1
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 0
72220: PUSH
72221: LD_INT 1
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 1
72230: NEG
72231: PUSH
72232: LD_INT 0
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: PUSH
72243: LD_INT 1
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 1
72253: NEG
72254: PUSH
72255: LD_INT 2
72257: NEG
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 0
72265: PUSH
72266: LD_INT 2
72268: NEG
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 1
72276: PUSH
72277: LD_INT 1
72279: NEG
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 2
72287: PUSH
72288: LD_INT 0
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 2
72297: PUSH
72298: LD_INT 1
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72319: LD_ADDR_VAR 0 49
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 0
72336: PUSH
72337: LD_INT 1
72339: NEG
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 1
72347: PUSH
72348: LD_INT 0
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 1
72357: PUSH
72358: LD_INT 1
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: LD_INT 1
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 1
72377: NEG
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 1
72388: NEG
72389: PUSH
72390: LD_INT 1
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 1
72403: NEG
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 2
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 2
72421: PUSH
72422: LD_INT 1
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 2
72431: PUSH
72432: LD_INT 2
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: PUSH
72442: LD_INT 2
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72463: LD_ADDR_VAR 0 50
72467: PUSH
72468: LD_INT 0
72470: PUSH
72471: LD_INT 0
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 0
72480: PUSH
72481: LD_INT 1
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 1
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 1
72501: PUSH
72502: LD_INT 1
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 0
72511: PUSH
72512: LD_INT 1
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 1
72521: NEG
72522: PUSH
72523: LD_INT 0
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: NEG
72533: PUSH
72534: LD_INT 1
72536: NEG
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 2
72544: PUSH
72545: LD_INT 1
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 2
72554: PUSH
72555: LD_INT 2
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 1
72564: PUSH
72565: LD_INT 2
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 0
72574: PUSH
72575: LD_INT 2
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 1
72584: NEG
72585: PUSH
72586: LD_INT 1
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72607: LD_ADDR_VAR 0 51
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 0
72624: PUSH
72625: LD_INT 1
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 1
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 1
72645: PUSH
72646: LD_INT 1
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: LD_INT 1
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 1
72665: NEG
72666: PUSH
72667: LD_INT 0
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: LD_INT 1
72676: NEG
72677: PUSH
72678: LD_INT 1
72680: NEG
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: LD_INT 1
72688: PUSH
72689: LD_INT 2
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 0
72698: PUSH
72699: LD_INT 2
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 1
72708: NEG
72709: PUSH
72710: LD_INT 1
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 2
72719: NEG
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 2
72730: NEG
72731: PUSH
72732: LD_INT 1
72734: NEG
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72754: LD_ADDR_VAR 0 52
72758: PUSH
72759: LD_INT 0
72761: PUSH
72762: LD_INT 0
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 0
72771: PUSH
72772: LD_INT 1
72774: NEG
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 1
72782: PUSH
72783: LD_INT 0
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 1
72792: PUSH
72793: LD_INT 1
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: LD_INT 1
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 1
72812: NEG
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 1
72823: NEG
72824: PUSH
72825: LD_INT 1
72827: NEG
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 1
72835: NEG
72836: PUSH
72837: LD_INT 2
72839: NEG
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 1
72847: NEG
72848: PUSH
72849: LD_INT 1
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 2
72858: NEG
72859: PUSH
72860: LD_INT 0
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 2
72869: NEG
72870: PUSH
72871: LD_INT 1
72873: NEG
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 2
72881: NEG
72882: PUSH
72883: LD_INT 2
72885: NEG
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72905: LD_ADDR_VAR 0 53
72909: PUSH
72910: LD_INT 0
72912: PUSH
72913: LD_INT 0
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 0
72922: PUSH
72923: LD_INT 1
72925: NEG
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 1
72933: PUSH
72934: LD_INT 0
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: LD_INT 1
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 0
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 1
72963: NEG
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 1
72974: NEG
72975: PUSH
72976: LD_INT 1
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 1
72986: NEG
72987: PUSH
72988: LD_INT 2
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 0
72998: PUSH
72999: LD_INT 2
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 1
73009: PUSH
73010: LD_INT 1
73012: NEG
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 2
73020: PUSH
73021: LD_INT 0
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 2
73030: PUSH
73031: LD_INT 1
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 2
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 1
73050: PUSH
73051: LD_INT 2
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 0
73060: PUSH
73061: LD_INT 2
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 1
73070: NEG
73071: PUSH
73072: LD_INT 1
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 2
73081: NEG
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 2
73092: NEG
73093: PUSH
73094: LD_INT 1
73096: NEG
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: NEG
73105: PUSH
73106: LD_INT 2
73108: NEG
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73135: LD_ADDR_VAR 0 54
73139: PUSH
73140: LD_INT 0
73142: PUSH
73143: LD_INT 0
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 0
73152: PUSH
73153: LD_INT 1
73155: NEG
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 1
73163: PUSH
73164: LD_INT 0
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: LD_INT 1
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 0
73183: PUSH
73184: LD_INT 1
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 1
73193: NEG
73194: PUSH
73195: LD_INT 0
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 1
73204: NEG
73205: PUSH
73206: LD_INT 1
73208: NEG
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 1
73216: NEG
73217: PUSH
73218: LD_INT 2
73220: NEG
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: LD_INT 2
73231: NEG
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 1
73239: PUSH
73240: LD_INT 1
73242: NEG
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 2
73250: PUSH
73251: LD_INT 0
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 2
73260: PUSH
73261: LD_INT 1
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 2
73270: PUSH
73271: LD_INT 2
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: LD_INT 1
73280: PUSH
73281: LD_INT 2
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: LD_INT 2
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 1
73300: NEG
73301: PUSH
73302: LD_INT 1
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 2
73311: NEG
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 2
73322: NEG
73323: PUSH
73324: LD_INT 1
73326: NEG
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 2
73334: NEG
73335: PUSH
73336: LD_INT 2
73338: NEG
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73365: LD_ADDR_VAR 0 55
73369: PUSH
73370: LD_INT 0
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: LD_INT 1
73385: NEG
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 1
73393: PUSH
73394: LD_INT 0
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 1
73403: PUSH
73404: LD_INT 1
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 0
73413: PUSH
73414: LD_INT 1
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 1
73423: NEG
73424: PUSH
73425: LD_INT 0
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: PUSH
73432: LD_INT 1
73434: NEG
73435: PUSH
73436: LD_INT 1
73438: NEG
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 1
73446: NEG
73447: PUSH
73448: LD_INT 2
73450: NEG
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 0
73458: PUSH
73459: LD_INT 2
73461: NEG
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 1
73469: PUSH
73470: LD_INT 1
73472: NEG
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 2
73480: PUSH
73481: LD_INT 0
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 2
73490: PUSH
73491: LD_INT 1
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 2
73500: PUSH
73501: LD_INT 2
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 1
73510: PUSH
73511: LD_INT 2
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 0
73520: PUSH
73521: LD_INT 2
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 1
73530: NEG
73531: PUSH
73532: LD_INT 1
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 2
73541: NEG
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 2
73552: NEG
73553: PUSH
73554: LD_INT 1
73556: NEG
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 2
73564: NEG
73565: PUSH
73566: LD_INT 2
73568: NEG
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73595: LD_ADDR_VAR 0 56
73599: PUSH
73600: LD_INT 0
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 0
73612: PUSH
73613: LD_INT 1
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 1
73623: PUSH
73624: LD_INT 0
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 1
73633: PUSH
73634: LD_INT 1
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 0
73643: PUSH
73644: LD_INT 1
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: PUSH
73651: LD_INT 1
73653: NEG
73654: PUSH
73655: LD_INT 0
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 1
73664: NEG
73665: PUSH
73666: LD_INT 1
73668: NEG
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 1
73676: NEG
73677: PUSH
73678: LD_INT 2
73680: NEG
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 0
73688: PUSH
73689: LD_INT 2
73691: NEG
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 1
73699: PUSH
73700: LD_INT 1
73702: NEG
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 2
73710: PUSH
73711: LD_INT 0
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 2
73720: PUSH
73721: LD_INT 1
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 2
73730: PUSH
73731: LD_INT 2
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 1
73740: PUSH
73741: LD_INT 2
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 0
73750: PUSH
73751: LD_INT 2
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: LD_INT 1
73760: NEG
73761: PUSH
73762: LD_INT 1
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: PUSH
73769: LD_INT 2
73771: NEG
73772: PUSH
73773: LD_INT 0
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 2
73782: NEG
73783: PUSH
73784: LD_INT 1
73786: NEG
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 2
73794: NEG
73795: PUSH
73796: LD_INT 2
73798: NEG
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73825: LD_ADDR_VAR 0 57
73829: PUSH
73830: LD_INT 0
73832: PUSH
73833: LD_INT 0
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: PUSH
73840: LD_INT 0
73842: PUSH
73843: LD_INT 1
73845: NEG
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: LD_INT 1
73853: PUSH
73854: LD_INT 0
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 1
73863: PUSH
73864: LD_INT 1
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: PUSH
73871: LD_INT 0
73873: PUSH
73874: LD_INT 1
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: PUSH
73881: LD_INT 1
73883: NEG
73884: PUSH
73885: LD_INT 0
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 1
73894: NEG
73895: PUSH
73896: LD_INT 1
73898: NEG
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: LD_INT 1
73906: NEG
73907: PUSH
73908: LD_INT 2
73910: NEG
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 0
73918: PUSH
73919: LD_INT 2
73921: NEG
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 1
73929: PUSH
73930: LD_INT 1
73932: NEG
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 2
73940: PUSH
73941: LD_INT 0
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: PUSH
73948: LD_INT 2
73950: PUSH
73951: LD_INT 1
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 2
73960: PUSH
73961: LD_INT 2
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 1
73970: PUSH
73971: LD_INT 2
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 0
73980: PUSH
73981: LD_INT 2
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: LD_INT 1
73990: NEG
73991: PUSH
73992: LD_INT 1
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 2
74001: NEG
74002: PUSH
74003: LD_INT 0
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 2
74012: NEG
74013: PUSH
74014: LD_INT 1
74016: NEG
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: LD_INT 2
74024: NEG
74025: PUSH
74026: LD_INT 2
74028: NEG
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74055: LD_ADDR_VAR 0 58
74059: PUSH
74060: LD_INT 0
74062: PUSH
74063: LD_INT 0
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: LD_INT 1
74075: NEG
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 1
74083: PUSH
74084: LD_INT 0
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 1
74093: PUSH
74094: LD_INT 1
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: LD_INT 0
74103: PUSH
74104: LD_INT 1
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: LD_INT 1
74113: NEG
74114: PUSH
74115: LD_INT 0
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 1
74124: NEG
74125: PUSH
74126: LD_INT 1
74128: NEG
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 1
74136: NEG
74137: PUSH
74138: LD_INT 2
74140: NEG
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 0
74148: PUSH
74149: LD_INT 2
74151: NEG
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 1
74159: PUSH
74160: LD_INT 1
74162: NEG
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 2
74170: PUSH
74171: LD_INT 0
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: LD_INT 2
74180: PUSH
74181: LD_INT 1
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 2
74190: PUSH
74191: LD_INT 2
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 1
74200: PUSH
74201: LD_INT 2
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: PUSH
74208: LD_INT 0
74210: PUSH
74211: LD_INT 2
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 1
74220: NEG
74221: PUSH
74222: LD_INT 1
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 2
74231: NEG
74232: PUSH
74233: LD_INT 0
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 2
74242: NEG
74243: PUSH
74244: LD_INT 1
74246: NEG
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 2
74254: NEG
74255: PUSH
74256: LD_INT 2
74258: NEG
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74285: LD_ADDR_VAR 0 59
74289: PUSH
74290: LD_INT 0
74292: PUSH
74293: LD_INT 0
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: LD_INT 0
74302: PUSH
74303: LD_INT 1
74305: NEG
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 1
74313: PUSH
74314: LD_INT 0
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_INT 1
74323: PUSH
74324: LD_INT 1
74326: PUSH
74327: EMPTY
74328: LIST
74329: LIST
74330: PUSH
74331: LD_INT 0
74333: PUSH
74334: LD_INT 1
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 1
74343: NEG
74344: PUSH
74345: LD_INT 0
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: LD_INT 1
74354: NEG
74355: PUSH
74356: LD_INT 1
74358: NEG
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74373: LD_ADDR_VAR 0 60
74377: PUSH
74378: LD_INT 0
74380: PUSH
74381: LD_INT 0
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 0
74390: PUSH
74391: LD_INT 1
74393: NEG
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 1
74401: PUSH
74402: LD_INT 0
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: PUSH
74409: LD_INT 1
74411: PUSH
74412: LD_INT 1
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PUSH
74419: LD_INT 0
74421: PUSH
74422: LD_INT 1
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 1
74431: NEG
74432: PUSH
74433: LD_INT 0
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 1
74442: NEG
74443: PUSH
74444: LD_INT 1
74446: NEG
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74461: LD_ADDR_VAR 0 61
74465: PUSH
74466: LD_INT 0
74468: PUSH
74469: LD_INT 0
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 0
74478: PUSH
74479: LD_INT 1
74481: NEG
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 1
74489: PUSH
74490: LD_INT 0
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PUSH
74497: LD_INT 1
74499: PUSH
74500: LD_INT 1
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 0
74509: PUSH
74510: LD_INT 1
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 1
74519: NEG
74520: PUSH
74521: LD_INT 0
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 1
74530: NEG
74531: PUSH
74532: LD_INT 1
74534: NEG
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74549: LD_ADDR_VAR 0 62
74553: PUSH
74554: LD_INT 0
74556: PUSH
74557: LD_INT 0
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 0
74566: PUSH
74567: LD_INT 1
74569: NEG
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 1
74577: PUSH
74578: LD_INT 0
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 1
74587: PUSH
74588: LD_INT 1
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 0
74597: PUSH
74598: LD_INT 1
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 1
74607: NEG
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 1
74618: NEG
74619: PUSH
74620: LD_INT 1
74622: NEG
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74637: LD_ADDR_VAR 0 63
74641: PUSH
74642: LD_INT 0
74644: PUSH
74645: LD_INT 0
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 0
74654: PUSH
74655: LD_INT 1
74657: NEG
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 1
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: PUSH
74673: LD_INT 1
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: PUSH
74683: LD_INT 0
74685: PUSH
74686: LD_INT 1
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: PUSH
74693: LD_INT 1
74695: NEG
74696: PUSH
74697: LD_INT 0
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 1
74706: NEG
74707: PUSH
74708: LD_INT 1
74710: NEG
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74725: LD_ADDR_VAR 0 64
74729: PUSH
74730: LD_INT 0
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 0
74742: PUSH
74743: LD_INT 1
74745: NEG
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 1
74753: PUSH
74754: LD_INT 0
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 1
74763: PUSH
74764: LD_INT 1
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 0
74773: PUSH
74774: LD_INT 1
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 1
74783: NEG
74784: PUSH
74785: LD_INT 0
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 1
74794: NEG
74795: PUSH
74796: LD_INT 1
74798: NEG
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: ST_TO_ADDR
// end ; 1 :
74813: GO 80710
74815: LD_INT 1
74817: DOUBLE
74818: EQUAL
74819: IFTRUE 74823
74821: GO 77446
74823: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74824: LD_ADDR_VAR 0 11
74828: PUSH
74829: LD_INT 1
74831: NEG
74832: PUSH
74833: LD_INT 3
74835: NEG
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: LD_INT 3
74846: NEG
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 1
74854: PUSH
74855: LD_INT 2
74857: NEG
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: LIST
74867: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74868: LD_ADDR_VAR 0 12
74872: PUSH
74873: LD_INT 2
74875: PUSH
74876: LD_INT 1
74878: NEG
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 3
74886: PUSH
74887: LD_INT 0
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: PUSH
74894: LD_INT 3
74896: PUSH
74897: LD_INT 1
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: LIST
74908: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74909: LD_ADDR_VAR 0 13
74913: PUSH
74914: LD_INT 3
74916: PUSH
74917: LD_INT 2
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 3
74926: PUSH
74927: LD_INT 3
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 2
74936: PUSH
74937: LD_INT 3
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: LIST
74948: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74949: LD_ADDR_VAR 0 14
74953: PUSH
74954: LD_INT 1
74956: PUSH
74957: LD_INT 3
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 0
74966: PUSH
74967: LD_INT 3
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: PUSH
74974: LD_INT 1
74976: NEG
74977: PUSH
74978: LD_INT 2
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: LIST
74989: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74990: LD_ADDR_VAR 0 15
74994: PUSH
74995: LD_INT 2
74997: NEG
74998: PUSH
74999: LD_INT 1
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 3
75008: NEG
75009: PUSH
75010: LD_INT 0
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 3
75019: NEG
75020: PUSH
75021: LD_INT 1
75023: NEG
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: LIST
75033: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75034: LD_ADDR_VAR 0 16
75038: PUSH
75039: LD_INT 2
75041: NEG
75042: PUSH
75043: LD_INT 3
75045: NEG
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 3
75053: NEG
75054: PUSH
75055: LD_INT 2
75057: NEG
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: LD_INT 3
75065: NEG
75066: PUSH
75067: LD_INT 3
75069: NEG
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75080: LD_ADDR_VAR 0 17
75084: PUSH
75085: LD_INT 1
75087: NEG
75088: PUSH
75089: LD_INT 3
75091: NEG
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 0
75099: PUSH
75100: LD_INT 3
75102: NEG
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 1
75110: PUSH
75111: LD_INT 2
75113: NEG
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: LIST
75123: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75124: LD_ADDR_VAR 0 18
75128: PUSH
75129: LD_INT 2
75131: PUSH
75132: LD_INT 1
75134: NEG
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 3
75142: PUSH
75143: LD_INT 0
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 3
75152: PUSH
75153: LD_INT 1
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: LIST
75164: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75165: LD_ADDR_VAR 0 19
75169: PUSH
75170: LD_INT 3
75172: PUSH
75173: LD_INT 2
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 3
75182: PUSH
75183: LD_INT 3
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 2
75192: PUSH
75193: LD_INT 3
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: LIST
75204: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75205: LD_ADDR_VAR 0 20
75209: PUSH
75210: LD_INT 1
75212: PUSH
75213: LD_INT 3
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 0
75222: PUSH
75223: LD_INT 3
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 1
75232: NEG
75233: PUSH
75234: LD_INT 2
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: LIST
75245: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75246: LD_ADDR_VAR 0 21
75250: PUSH
75251: LD_INT 2
75253: NEG
75254: PUSH
75255: LD_INT 1
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PUSH
75262: LD_INT 3
75264: NEG
75265: PUSH
75266: LD_INT 0
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 3
75275: NEG
75276: PUSH
75277: LD_INT 1
75279: NEG
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: LIST
75289: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75290: LD_ADDR_VAR 0 22
75294: PUSH
75295: LD_INT 2
75297: NEG
75298: PUSH
75299: LD_INT 3
75301: NEG
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 3
75309: NEG
75310: PUSH
75311: LD_INT 2
75313: NEG
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 3
75321: NEG
75322: PUSH
75323: LD_INT 3
75325: NEG
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: LIST
75335: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
75336: LD_ADDR_VAR 0 23
75340: PUSH
75341: LD_INT 0
75343: PUSH
75344: LD_INT 3
75346: NEG
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 1
75354: NEG
75355: PUSH
75356: LD_INT 4
75358: NEG
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 1
75366: PUSH
75367: LD_INT 3
75369: NEG
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: LIST
75379: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
75380: LD_ADDR_VAR 0 24
75384: PUSH
75385: LD_INT 3
75387: PUSH
75388: LD_INT 0
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: PUSH
75395: LD_INT 3
75397: PUSH
75398: LD_INT 1
75400: NEG
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 4
75408: PUSH
75409: LD_INT 1
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: LIST
75420: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
75421: LD_ADDR_VAR 0 25
75425: PUSH
75426: LD_INT 3
75428: PUSH
75429: LD_INT 3
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 4
75438: PUSH
75439: LD_INT 3
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 3
75448: PUSH
75449: LD_INT 4
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: LIST
75460: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
75461: LD_ADDR_VAR 0 26
75465: PUSH
75466: LD_INT 0
75468: PUSH
75469: LD_INT 3
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 1
75478: PUSH
75479: LD_INT 4
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: LD_INT 1
75488: NEG
75489: PUSH
75490: LD_INT 3
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: LIST
75501: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
75502: LD_ADDR_VAR 0 27
75506: PUSH
75507: LD_INT 3
75509: NEG
75510: PUSH
75511: LD_INT 0
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 3
75520: NEG
75521: PUSH
75522: LD_INT 1
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 4
75531: NEG
75532: PUSH
75533: LD_INT 1
75535: NEG
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: LIST
75545: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
75546: LD_ADDR_VAR 0 28
75550: PUSH
75551: LD_INT 3
75553: NEG
75554: PUSH
75555: LD_INT 3
75557: NEG
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: LD_INT 3
75565: NEG
75566: PUSH
75567: LD_INT 4
75569: NEG
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 4
75577: NEG
75578: PUSH
75579: LD_INT 3
75581: NEG
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: LIST
75591: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
75592: LD_ADDR_VAR 0 29
75596: PUSH
75597: LD_INT 1
75599: NEG
75600: PUSH
75601: LD_INT 3
75603: NEG
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 0
75611: PUSH
75612: LD_INT 3
75614: NEG
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 1
75622: PUSH
75623: LD_INT 2
75625: NEG
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: LD_INT 1
75633: NEG
75634: PUSH
75635: LD_INT 4
75637: NEG
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 0
75645: PUSH
75646: LD_INT 4
75648: NEG
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: PUSH
75654: LD_INT 1
75656: PUSH
75657: LD_INT 3
75659: NEG
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 1
75667: NEG
75668: PUSH
75669: LD_INT 5
75671: NEG
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: LD_INT 5
75682: NEG
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 1
75690: PUSH
75691: LD_INT 4
75693: NEG
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: LD_INT 1
75701: NEG
75702: PUSH
75703: LD_INT 6
75705: NEG
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 0
75713: PUSH
75714: LD_INT 6
75716: NEG
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: PUSH
75722: LD_INT 1
75724: PUSH
75725: LD_INT 5
75727: NEG
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
75747: LD_ADDR_VAR 0 30
75751: PUSH
75752: LD_INT 2
75754: PUSH
75755: LD_INT 1
75757: NEG
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 3
75765: PUSH
75766: LD_INT 0
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 3
75775: PUSH
75776: LD_INT 1
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 3
75785: PUSH
75786: LD_INT 1
75788: NEG
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 4
75796: PUSH
75797: LD_INT 0
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 4
75806: PUSH
75807: LD_INT 1
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 4
75816: PUSH
75817: LD_INT 1
75819: NEG
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 5
75827: PUSH
75828: LD_INT 0
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 5
75837: PUSH
75838: LD_INT 1
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 5
75847: PUSH
75848: LD_INT 1
75850: NEG
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 6
75858: PUSH
75859: LD_INT 0
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: PUSH
75866: LD_INT 6
75868: PUSH
75869: LD_INT 1
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
75890: LD_ADDR_VAR 0 31
75894: PUSH
75895: LD_INT 3
75897: PUSH
75898: LD_INT 2
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: LD_INT 3
75907: PUSH
75908: LD_INT 3
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PUSH
75915: LD_INT 2
75917: PUSH
75918: LD_INT 3
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 4
75927: PUSH
75928: LD_INT 3
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 4
75937: PUSH
75938: LD_INT 4
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 3
75947: PUSH
75948: LD_INT 4
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 5
75957: PUSH
75958: LD_INT 4
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: LD_INT 5
75967: PUSH
75968: LD_INT 5
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: PUSH
75975: LD_INT 4
75977: PUSH
75978: LD_INT 5
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 6
75987: PUSH
75988: LD_INT 5
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: LD_INT 6
75997: PUSH
75998: LD_INT 6
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_INT 5
76007: PUSH
76008: LD_INT 6
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
76029: LD_ADDR_VAR 0 32
76033: PUSH
76034: LD_INT 1
76036: PUSH
76037: LD_INT 3
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: PUSH
76044: LD_INT 0
76046: PUSH
76047: LD_INT 3
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: PUSH
76054: LD_INT 1
76056: NEG
76057: PUSH
76058: LD_INT 2
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: LD_INT 1
76067: PUSH
76068: LD_INT 4
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 0
76077: PUSH
76078: LD_INT 4
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 1
76087: NEG
76088: PUSH
76089: LD_INT 3
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_INT 1
76098: PUSH
76099: LD_INT 5
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 0
76108: PUSH
76109: LD_INT 5
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: PUSH
76116: LD_INT 1
76118: NEG
76119: PUSH
76120: LD_INT 4
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: PUSH
76127: LD_INT 1
76129: PUSH
76130: LD_INT 6
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 0
76139: PUSH
76140: LD_INT 6
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 1
76149: NEG
76150: PUSH
76151: LD_INT 5
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
76172: LD_ADDR_VAR 0 33
76176: PUSH
76177: LD_INT 2
76179: NEG
76180: PUSH
76181: LD_INT 1
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 3
76190: NEG
76191: PUSH
76192: LD_INT 0
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 3
76201: NEG
76202: PUSH
76203: LD_INT 1
76205: NEG
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: LD_INT 3
76213: NEG
76214: PUSH
76215: LD_INT 1
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PUSH
76222: LD_INT 4
76224: NEG
76225: PUSH
76226: LD_INT 0
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: LD_INT 4
76235: NEG
76236: PUSH
76237: LD_INT 1
76239: NEG
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: LD_INT 4
76247: NEG
76248: PUSH
76249: LD_INT 1
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PUSH
76256: LD_INT 5
76258: NEG
76259: PUSH
76260: LD_INT 0
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PUSH
76267: LD_INT 5
76269: NEG
76270: PUSH
76271: LD_INT 1
76273: NEG
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: PUSH
76279: LD_INT 5
76281: NEG
76282: PUSH
76283: LD_INT 1
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: PUSH
76290: LD_INT 6
76292: NEG
76293: PUSH
76294: LD_INT 0
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 6
76303: NEG
76304: PUSH
76305: LD_INT 1
76307: NEG
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: LIST
76321: LIST
76322: LIST
76323: LIST
76324: LIST
76325: LIST
76326: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
76327: LD_ADDR_VAR 0 34
76331: PUSH
76332: LD_INT 2
76334: NEG
76335: PUSH
76336: LD_INT 3
76338: NEG
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: LD_INT 3
76346: NEG
76347: PUSH
76348: LD_INT 2
76350: NEG
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: LD_INT 3
76358: NEG
76359: PUSH
76360: LD_INT 3
76362: NEG
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PUSH
76368: LD_INT 3
76370: NEG
76371: PUSH
76372: LD_INT 4
76374: NEG
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_INT 4
76382: NEG
76383: PUSH
76384: LD_INT 3
76386: NEG
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 4
76394: NEG
76395: PUSH
76396: LD_INT 4
76398: NEG
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 4
76406: NEG
76407: PUSH
76408: LD_INT 5
76410: NEG
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 5
76418: NEG
76419: PUSH
76420: LD_INT 4
76422: NEG
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 5
76430: NEG
76431: PUSH
76432: LD_INT 5
76434: NEG
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PUSH
76440: LD_INT 5
76442: NEG
76443: PUSH
76444: LD_INT 6
76446: NEG
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 6
76454: NEG
76455: PUSH
76456: LD_INT 5
76458: NEG
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 6
76466: NEG
76467: PUSH
76468: LD_INT 6
76470: NEG
76471: PUSH
76472: EMPTY
76473: LIST
76474: LIST
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
76490: LD_ADDR_VAR 0 41
76494: PUSH
76495: LD_INT 0
76497: PUSH
76498: LD_INT 2
76500: NEG
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 1
76508: NEG
76509: PUSH
76510: LD_INT 3
76512: NEG
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: PUSH
76518: LD_INT 1
76520: PUSH
76521: LD_INT 2
76523: NEG
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: LIST
76533: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
76534: LD_ADDR_VAR 0 42
76538: PUSH
76539: LD_INT 2
76541: PUSH
76542: LD_INT 0
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 2
76551: PUSH
76552: LD_INT 1
76554: NEG
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 3
76562: PUSH
76563: LD_INT 1
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: LIST
76574: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
76575: LD_ADDR_VAR 0 43
76579: PUSH
76580: LD_INT 2
76582: PUSH
76583: LD_INT 2
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: LD_INT 3
76592: PUSH
76593: LD_INT 2
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: PUSH
76600: LD_INT 2
76602: PUSH
76603: LD_INT 3
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: LIST
76614: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
76615: LD_ADDR_VAR 0 44
76619: PUSH
76620: LD_INT 0
76622: PUSH
76623: LD_INT 2
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: LD_INT 1
76632: PUSH
76633: LD_INT 3
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 1
76642: NEG
76643: PUSH
76644: LD_INT 2
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: LIST
76655: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76656: LD_ADDR_VAR 0 45
76660: PUSH
76661: LD_INT 2
76663: NEG
76664: PUSH
76665: LD_INT 0
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: PUSH
76672: LD_INT 2
76674: NEG
76675: PUSH
76676: LD_INT 1
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: LD_INT 3
76685: NEG
76686: PUSH
76687: LD_INT 1
76689: NEG
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: EMPTY
76696: LIST
76697: LIST
76698: LIST
76699: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
76700: LD_ADDR_VAR 0 46
76704: PUSH
76705: LD_INT 2
76707: NEG
76708: PUSH
76709: LD_INT 2
76711: NEG
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PUSH
76717: LD_INT 2
76719: NEG
76720: PUSH
76721: LD_INT 3
76723: NEG
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: PUSH
76729: LD_INT 3
76731: NEG
76732: PUSH
76733: LD_INT 2
76735: NEG
76736: PUSH
76737: EMPTY
76738: LIST
76739: LIST
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: LIST
76745: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
76746: LD_ADDR_VAR 0 47
76750: PUSH
76751: LD_INT 2
76753: NEG
76754: PUSH
76755: LD_INT 3
76757: NEG
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 1
76765: NEG
76766: PUSH
76767: LD_INT 3
76769: NEG
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
76779: LD_ADDR_VAR 0 48
76783: PUSH
76784: LD_INT 1
76786: PUSH
76787: LD_INT 2
76789: NEG
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: LD_INT 2
76797: PUSH
76798: LD_INT 1
76800: NEG
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
76810: LD_ADDR_VAR 0 49
76814: PUSH
76815: LD_INT 3
76817: PUSH
76818: LD_INT 1
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: PUSH
76825: LD_INT 3
76827: PUSH
76828: LD_INT 2
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
76839: LD_ADDR_VAR 0 50
76843: PUSH
76844: LD_INT 2
76846: PUSH
76847: LD_INT 3
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 1
76856: PUSH
76857: LD_INT 3
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
76868: LD_ADDR_VAR 0 51
76872: PUSH
76873: LD_INT 1
76875: NEG
76876: PUSH
76877: LD_INT 2
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 2
76886: NEG
76887: PUSH
76888: LD_INT 1
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
76899: LD_ADDR_VAR 0 52
76903: PUSH
76904: LD_INT 3
76906: NEG
76907: PUSH
76908: LD_INT 1
76910: NEG
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: LD_INT 3
76918: NEG
76919: PUSH
76920: LD_INT 2
76922: NEG
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76932: LD_ADDR_VAR 0 53
76936: PUSH
76937: LD_INT 1
76939: NEG
76940: PUSH
76941: LD_INT 3
76943: NEG
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 0
76951: PUSH
76952: LD_INT 3
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 1
76962: PUSH
76963: LD_INT 2
76965: NEG
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: LIST
76975: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76976: LD_ADDR_VAR 0 54
76980: PUSH
76981: LD_INT 2
76983: PUSH
76984: LD_INT 1
76986: NEG
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 3
76994: PUSH
76995: LD_INT 0
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 3
77004: PUSH
77005: LD_INT 1
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
77017: LD_ADDR_VAR 0 55
77021: PUSH
77022: LD_INT 3
77024: PUSH
77025: LD_INT 2
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 3
77034: PUSH
77035: LD_INT 3
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: PUSH
77042: LD_INT 2
77044: PUSH
77045: LD_INT 3
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: LIST
77056: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
77057: LD_ADDR_VAR 0 56
77061: PUSH
77062: LD_INT 1
77064: PUSH
77065: LD_INT 3
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PUSH
77072: LD_INT 0
77074: PUSH
77075: LD_INT 3
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: LD_INT 1
77084: NEG
77085: PUSH
77086: LD_INT 2
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: LIST
77097: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77098: LD_ADDR_VAR 0 57
77102: PUSH
77103: LD_INT 2
77105: NEG
77106: PUSH
77107: LD_INT 1
77109: PUSH
77110: EMPTY
77111: LIST
77112: LIST
77113: PUSH
77114: LD_INT 3
77116: NEG
77117: PUSH
77118: LD_INT 0
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: LD_INT 3
77127: NEG
77128: PUSH
77129: LD_INT 1
77131: NEG
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: LIST
77141: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77142: LD_ADDR_VAR 0 58
77146: PUSH
77147: LD_INT 2
77149: NEG
77150: PUSH
77151: LD_INT 3
77153: NEG
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: LD_INT 3
77161: NEG
77162: PUSH
77163: LD_INT 2
77165: NEG
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 3
77173: NEG
77174: PUSH
77175: LD_INT 3
77177: NEG
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: LIST
77187: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
77188: LD_ADDR_VAR 0 59
77192: PUSH
77193: LD_INT 1
77195: NEG
77196: PUSH
77197: LD_INT 2
77199: NEG
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PUSH
77205: LD_INT 0
77207: PUSH
77208: LD_INT 2
77210: NEG
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: LD_INT 1
77218: PUSH
77219: LD_INT 1
77221: NEG
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: EMPTY
77228: LIST
77229: LIST
77230: LIST
77231: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
77232: LD_ADDR_VAR 0 60
77236: PUSH
77237: LD_INT 1
77239: PUSH
77240: LD_INT 1
77242: NEG
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 2
77250: PUSH
77251: LD_INT 0
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: PUSH
77258: LD_INT 2
77260: PUSH
77261: LD_INT 1
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: LIST
77272: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
77273: LD_ADDR_VAR 0 61
77277: PUSH
77278: LD_INT 2
77280: PUSH
77281: LD_INT 1
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: PUSH
77288: LD_INT 2
77290: PUSH
77291: LD_INT 2
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: PUSH
77298: LD_INT 1
77300: PUSH
77301: LD_INT 2
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: LIST
77312: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
77313: LD_ADDR_VAR 0 62
77317: PUSH
77318: LD_INT 1
77320: PUSH
77321: LD_INT 2
77323: PUSH
77324: EMPTY
77325: LIST
77326: LIST
77327: PUSH
77328: LD_INT 0
77330: PUSH
77331: LD_INT 2
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PUSH
77338: LD_INT 1
77340: NEG
77341: PUSH
77342: LD_INT 1
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: PUSH
77349: EMPTY
77350: LIST
77351: LIST
77352: LIST
77353: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
77354: LD_ADDR_VAR 0 63
77358: PUSH
77359: LD_INT 1
77361: NEG
77362: PUSH
77363: LD_INT 1
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: PUSH
77370: LD_INT 2
77372: NEG
77373: PUSH
77374: LD_INT 0
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: PUSH
77381: LD_INT 2
77383: NEG
77384: PUSH
77385: LD_INT 1
77387: NEG
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: LIST
77397: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77398: LD_ADDR_VAR 0 64
77402: PUSH
77403: LD_INT 1
77405: NEG
77406: PUSH
77407: LD_INT 2
77409: NEG
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: PUSH
77415: LD_INT 2
77417: NEG
77418: PUSH
77419: LD_INT 1
77421: NEG
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: PUSH
77427: LD_INT 2
77429: NEG
77430: PUSH
77431: LD_INT 2
77433: NEG
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: LIST
77443: ST_TO_ADDR
// end ; 2 :
77444: GO 80710
77446: LD_INT 2
77448: DOUBLE
77449: EQUAL
77450: IFTRUE 77454
77452: GO 80709
77454: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
77455: LD_ADDR_VAR 0 29
77459: PUSH
77460: LD_INT 4
77462: PUSH
77463: LD_INT 0
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: LD_INT 4
77472: PUSH
77473: LD_INT 1
77475: NEG
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: PUSH
77481: LD_INT 5
77483: PUSH
77484: LD_INT 0
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PUSH
77491: LD_INT 5
77493: PUSH
77494: LD_INT 1
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: PUSH
77501: LD_INT 4
77503: PUSH
77504: LD_INT 1
77506: PUSH
77507: EMPTY
77508: LIST
77509: LIST
77510: PUSH
77511: LD_INT 3
77513: PUSH
77514: LD_INT 0
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PUSH
77521: LD_INT 3
77523: PUSH
77524: LD_INT 1
77526: NEG
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: PUSH
77532: LD_INT 3
77534: PUSH
77535: LD_INT 2
77537: NEG
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 5
77545: PUSH
77546: LD_INT 2
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 3
77555: PUSH
77556: LD_INT 3
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 3
77565: PUSH
77566: LD_INT 2
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 4
77575: PUSH
77576: LD_INT 3
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 4
77585: PUSH
77586: LD_INT 4
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 3
77595: PUSH
77596: LD_INT 4
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 2
77605: PUSH
77606: LD_INT 3
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 2
77615: PUSH
77616: LD_INT 2
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: PUSH
77623: LD_INT 4
77625: PUSH
77626: LD_INT 2
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: PUSH
77633: LD_INT 2
77635: PUSH
77636: LD_INT 4
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 0
77645: PUSH
77646: LD_INT 4
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: LD_INT 0
77655: PUSH
77656: LD_INT 3
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: PUSH
77663: LD_INT 1
77665: PUSH
77666: LD_INT 4
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: LD_INT 5
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: PUSH
77683: LD_INT 0
77685: PUSH
77686: LD_INT 5
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PUSH
77693: LD_INT 1
77695: NEG
77696: PUSH
77697: LD_INT 4
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: PUSH
77704: LD_INT 1
77706: NEG
77707: PUSH
77708: LD_INT 3
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: LD_INT 2
77717: PUSH
77718: LD_INT 5
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 2
77727: NEG
77728: PUSH
77729: LD_INT 3
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PUSH
77736: LD_INT 3
77738: NEG
77739: PUSH
77740: LD_INT 0
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: PUSH
77747: LD_INT 3
77749: NEG
77750: PUSH
77751: LD_INT 1
77753: NEG
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PUSH
77759: LD_INT 2
77761: NEG
77762: PUSH
77763: LD_INT 0
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 2
77772: NEG
77773: PUSH
77774: LD_INT 1
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 3
77783: NEG
77784: PUSH
77785: LD_INT 1
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: LD_INT 4
77794: NEG
77795: PUSH
77796: LD_INT 0
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: LD_INT 4
77805: NEG
77806: PUSH
77807: LD_INT 1
77809: NEG
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: PUSH
77815: LD_INT 4
77817: NEG
77818: PUSH
77819: LD_INT 2
77821: NEG
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: PUSH
77827: LD_INT 2
77829: NEG
77830: PUSH
77831: LD_INT 2
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PUSH
77838: LD_INT 4
77840: NEG
77841: PUSH
77842: LD_INT 4
77844: NEG
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: PUSH
77850: LD_INT 4
77852: NEG
77853: PUSH
77854: LD_INT 5
77856: NEG
77857: PUSH
77858: EMPTY
77859: LIST
77860: LIST
77861: PUSH
77862: LD_INT 3
77864: NEG
77865: PUSH
77866: LD_INT 4
77868: NEG
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 3
77876: NEG
77877: PUSH
77878: LD_INT 3
77880: NEG
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: LD_INT 4
77888: NEG
77889: PUSH
77890: LD_INT 3
77892: NEG
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: PUSH
77898: LD_INT 5
77900: NEG
77901: PUSH
77902: LD_INT 4
77904: NEG
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: PUSH
77910: LD_INT 5
77912: NEG
77913: PUSH
77914: LD_INT 5
77916: NEG
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: PUSH
77922: LD_INT 3
77924: NEG
77925: PUSH
77926: LD_INT 5
77928: NEG
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: PUSH
77934: LD_INT 5
77936: NEG
77937: PUSH
77938: LD_INT 3
77940: NEG
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: LIST
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
77993: LD_ADDR_VAR 0 30
77997: PUSH
77998: LD_INT 4
78000: PUSH
78001: LD_INT 4
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: LD_INT 4
78010: PUSH
78011: LD_INT 3
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: LD_INT 5
78020: PUSH
78021: LD_INT 4
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PUSH
78028: LD_INT 5
78030: PUSH
78031: LD_INT 5
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: LD_INT 4
78040: PUSH
78041: LD_INT 5
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: PUSH
78048: LD_INT 3
78050: PUSH
78051: LD_INT 4
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: LD_INT 3
78060: PUSH
78061: LD_INT 3
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: PUSH
78068: LD_INT 5
78070: PUSH
78071: LD_INT 3
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PUSH
78078: LD_INT 3
78080: PUSH
78081: LD_INT 5
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PUSH
78088: LD_INT 0
78090: PUSH
78091: LD_INT 3
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: PUSH
78098: LD_INT 0
78100: PUSH
78101: LD_INT 2
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 1
78110: PUSH
78111: LD_INT 3
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: PUSH
78118: LD_INT 1
78120: PUSH
78121: LD_INT 4
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PUSH
78128: LD_INT 0
78130: PUSH
78131: LD_INT 4
78133: PUSH
78134: EMPTY
78135: LIST
78136: LIST
78137: PUSH
78138: LD_INT 1
78140: NEG
78141: PUSH
78142: LD_INT 3
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 1
78151: NEG
78152: PUSH
78153: LD_INT 2
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: PUSH
78160: LD_INT 2
78162: PUSH
78163: LD_INT 4
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: PUSH
78170: LD_INT 2
78172: NEG
78173: PUSH
78174: LD_INT 2
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: PUSH
78181: LD_INT 4
78183: NEG
78184: PUSH
78185: LD_INT 0
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: PUSH
78192: LD_INT 4
78194: NEG
78195: PUSH
78196: LD_INT 1
78198: NEG
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: PUSH
78204: LD_INT 3
78206: NEG
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: PUSH
78215: LD_INT 3
78217: NEG
78218: PUSH
78219: LD_INT 1
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: PUSH
78226: LD_INT 4
78228: NEG
78229: PUSH
78230: LD_INT 1
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: PUSH
78237: LD_INT 5
78239: NEG
78240: PUSH
78241: LD_INT 0
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: PUSH
78248: LD_INT 5
78250: NEG
78251: PUSH
78252: LD_INT 1
78254: NEG
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: PUSH
78260: LD_INT 5
78262: NEG
78263: PUSH
78264: LD_INT 2
78266: NEG
78267: PUSH
78268: EMPTY
78269: LIST
78270: LIST
78271: PUSH
78272: LD_INT 3
78274: NEG
78275: PUSH
78276: LD_INT 2
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: PUSH
78283: LD_INT 3
78285: NEG
78286: PUSH
78287: LD_INT 3
78289: NEG
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: PUSH
78295: LD_INT 3
78297: NEG
78298: PUSH
78299: LD_INT 4
78301: NEG
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 2
78309: NEG
78310: PUSH
78311: LD_INT 3
78313: NEG
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: PUSH
78319: LD_INT 2
78321: NEG
78322: PUSH
78323: LD_INT 2
78325: NEG
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: LD_INT 3
78333: NEG
78334: PUSH
78335: LD_INT 2
78337: NEG
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: PUSH
78343: LD_INT 4
78345: NEG
78346: PUSH
78347: LD_INT 3
78349: NEG
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PUSH
78355: LD_INT 4
78357: NEG
78358: PUSH
78359: LD_INT 4
78361: NEG
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: LD_INT 2
78369: NEG
78370: PUSH
78371: LD_INT 4
78373: NEG
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: LD_INT 4
78381: NEG
78382: PUSH
78383: LD_INT 2
78385: NEG
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 0
78393: PUSH
78394: LD_INT 4
78396: NEG
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: LD_INT 5
78407: NEG
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: PUSH
78413: LD_INT 1
78415: PUSH
78416: LD_INT 4
78418: NEG
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: PUSH
78424: LD_INT 1
78426: PUSH
78427: LD_INT 3
78429: NEG
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PUSH
78435: LD_INT 0
78437: PUSH
78438: LD_INT 3
78440: NEG
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PUSH
78446: LD_INT 1
78448: NEG
78449: PUSH
78450: LD_INT 4
78452: NEG
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: PUSH
78458: LD_INT 1
78460: NEG
78461: PUSH
78462: LD_INT 5
78464: NEG
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PUSH
78470: LD_INT 2
78472: PUSH
78473: LD_INT 3
78475: NEG
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: PUSH
78481: LD_INT 2
78483: NEG
78484: PUSH
78485: LD_INT 5
78487: NEG
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: LIST
78509: LIST
78510: LIST
78511: LIST
78512: LIST
78513: LIST
78514: LIST
78515: LIST
78516: LIST
78517: LIST
78518: LIST
78519: LIST
78520: LIST
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
78540: LD_ADDR_VAR 0 31
78544: PUSH
78545: LD_INT 0
78547: PUSH
78548: LD_INT 4
78550: PUSH
78551: EMPTY
78552: LIST
78553: LIST
78554: PUSH
78555: LD_INT 0
78557: PUSH
78558: LD_INT 3
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: PUSH
78565: LD_INT 1
78567: PUSH
78568: LD_INT 4
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: PUSH
78575: LD_INT 1
78577: PUSH
78578: LD_INT 5
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: PUSH
78585: LD_INT 0
78587: PUSH
78588: LD_INT 5
78590: PUSH
78591: EMPTY
78592: LIST
78593: LIST
78594: PUSH
78595: LD_INT 1
78597: NEG
78598: PUSH
78599: LD_INT 4
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PUSH
78606: LD_INT 1
78608: NEG
78609: PUSH
78610: LD_INT 3
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: LD_INT 2
78619: PUSH
78620: LD_INT 5
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: LD_INT 2
78629: NEG
78630: PUSH
78631: LD_INT 3
78633: PUSH
78634: EMPTY
78635: LIST
78636: LIST
78637: PUSH
78638: LD_INT 3
78640: NEG
78641: PUSH
78642: LD_INT 0
78644: PUSH
78645: EMPTY
78646: LIST
78647: LIST
78648: PUSH
78649: LD_INT 3
78651: NEG
78652: PUSH
78653: LD_INT 1
78655: NEG
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: PUSH
78661: LD_INT 2
78663: NEG
78664: PUSH
78665: LD_INT 0
78667: PUSH
78668: EMPTY
78669: LIST
78670: LIST
78671: PUSH
78672: LD_INT 2
78674: NEG
78675: PUSH
78676: LD_INT 1
78678: PUSH
78679: EMPTY
78680: LIST
78681: LIST
78682: PUSH
78683: LD_INT 3
78685: NEG
78686: PUSH
78687: LD_INT 1
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: PUSH
78694: LD_INT 4
78696: NEG
78697: PUSH
78698: LD_INT 0
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: PUSH
78705: LD_INT 4
78707: NEG
78708: PUSH
78709: LD_INT 1
78711: NEG
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: PUSH
78717: LD_INT 4
78719: NEG
78720: PUSH
78721: LD_INT 2
78723: NEG
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PUSH
78729: LD_INT 2
78731: NEG
78732: PUSH
78733: LD_INT 2
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PUSH
78740: LD_INT 4
78742: NEG
78743: PUSH
78744: LD_INT 4
78746: NEG
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PUSH
78752: LD_INT 4
78754: NEG
78755: PUSH
78756: LD_INT 5
78758: NEG
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 3
78766: NEG
78767: PUSH
78768: LD_INT 4
78770: NEG
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: PUSH
78776: LD_INT 3
78778: NEG
78779: PUSH
78780: LD_INT 3
78782: NEG
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PUSH
78788: LD_INT 4
78790: NEG
78791: PUSH
78792: LD_INT 3
78794: NEG
78795: PUSH
78796: EMPTY
78797: LIST
78798: LIST
78799: PUSH
78800: LD_INT 5
78802: NEG
78803: PUSH
78804: LD_INT 4
78806: NEG
78807: PUSH
78808: EMPTY
78809: LIST
78810: LIST
78811: PUSH
78812: LD_INT 5
78814: NEG
78815: PUSH
78816: LD_INT 5
78818: NEG
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PUSH
78824: LD_INT 3
78826: NEG
78827: PUSH
78828: LD_INT 5
78830: NEG
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: PUSH
78836: LD_INT 5
78838: NEG
78839: PUSH
78840: LD_INT 3
78842: NEG
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: LD_INT 3
78853: NEG
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 0
78861: PUSH
78862: LD_INT 4
78864: NEG
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PUSH
78870: LD_INT 1
78872: PUSH
78873: LD_INT 3
78875: NEG
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: PUSH
78881: LD_INT 1
78883: PUSH
78884: LD_INT 2
78886: NEG
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 0
78894: PUSH
78895: LD_INT 2
78897: NEG
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: PUSH
78903: LD_INT 1
78905: NEG
78906: PUSH
78907: LD_INT 3
78909: NEG
78910: PUSH
78911: EMPTY
78912: LIST
78913: LIST
78914: PUSH
78915: LD_INT 1
78917: NEG
78918: PUSH
78919: LD_INT 4
78921: NEG
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: PUSH
78927: LD_INT 2
78929: PUSH
78930: LD_INT 2
78932: NEG
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 2
78940: NEG
78941: PUSH
78942: LD_INT 4
78944: NEG
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: PUSH
78950: LD_INT 4
78952: PUSH
78953: LD_INT 0
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: LD_INT 4
78962: PUSH
78963: LD_INT 1
78965: NEG
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PUSH
78971: LD_INT 5
78973: PUSH
78974: LD_INT 0
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PUSH
78981: LD_INT 5
78983: PUSH
78984: LD_INT 1
78986: PUSH
78987: EMPTY
78988: LIST
78989: LIST
78990: PUSH
78991: LD_INT 4
78993: PUSH
78994: LD_INT 1
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: PUSH
79001: LD_INT 3
79003: PUSH
79004: LD_INT 0
79006: PUSH
79007: EMPTY
79008: LIST
79009: LIST
79010: PUSH
79011: LD_INT 3
79013: PUSH
79014: LD_INT 1
79016: NEG
79017: PUSH
79018: EMPTY
79019: LIST
79020: LIST
79021: PUSH
79022: LD_INT 3
79024: PUSH
79025: LD_INT 2
79027: NEG
79028: PUSH
79029: EMPTY
79030: LIST
79031: LIST
79032: PUSH
79033: LD_INT 5
79035: PUSH
79036: LD_INT 2
79038: PUSH
79039: EMPTY
79040: LIST
79041: LIST
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
79090: LD_ADDR_VAR 0 32
79094: PUSH
79095: LD_INT 4
79097: NEG
79098: PUSH
79099: LD_INT 0
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: LD_INT 4
79108: NEG
79109: PUSH
79110: LD_INT 1
79112: NEG
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: PUSH
79118: LD_INT 3
79120: NEG
79121: PUSH
79122: LD_INT 0
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PUSH
79129: LD_INT 3
79131: NEG
79132: PUSH
79133: LD_INT 1
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: PUSH
79140: LD_INT 4
79142: NEG
79143: PUSH
79144: LD_INT 1
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: PUSH
79151: LD_INT 5
79153: NEG
79154: PUSH
79155: LD_INT 0
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 5
79164: NEG
79165: PUSH
79166: LD_INT 1
79168: NEG
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PUSH
79174: LD_INT 5
79176: NEG
79177: PUSH
79178: LD_INT 2
79180: NEG
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: LD_INT 3
79188: NEG
79189: PUSH
79190: LD_INT 2
79192: PUSH
79193: EMPTY
79194: LIST
79195: LIST
79196: PUSH
79197: LD_INT 3
79199: NEG
79200: PUSH
79201: LD_INT 3
79203: NEG
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: PUSH
79209: LD_INT 3
79211: NEG
79212: PUSH
79213: LD_INT 4
79215: NEG
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: PUSH
79221: LD_INT 2
79223: NEG
79224: PUSH
79225: LD_INT 3
79227: NEG
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: PUSH
79233: LD_INT 2
79235: NEG
79236: PUSH
79237: LD_INT 2
79239: NEG
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: LD_INT 3
79247: NEG
79248: PUSH
79249: LD_INT 2
79251: NEG
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 4
79259: NEG
79260: PUSH
79261: LD_INT 3
79263: NEG
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: LD_INT 4
79271: NEG
79272: PUSH
79273: LD_INT 4
79275: NEG
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 2
79283: NEG
79284: PUSH
79285: LD_INT 4
79287: NEG
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PUSH
79293: LD_INT 4
79295: NEG
79296: PUSH
79297: LD_INT 2
79299: NEG
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: PUSH
79305: LD_INT 0
79307: PUSH
79308: LD_INT 4
79310: NEG
79311: PUSH
79312: EMPTY
79313: LIST
79314: LIST
79315: PUSH
79316: LD_INT 0
79318: PUSH
79319: LD_INT 5
79321: NEG
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: PUSH
79327: LD_INT 1
79329: PUSH
79330: LD_INT 4
79332: NEG
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: PUSH
79338: LD_INT 1
79340: PUSH
79341: LD_INT 3
79343: NEG
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: PUSH
79349: LD_INT 0
79351: PUSH
79352: LD_INT 3
79354: NEG
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: LD_INT 1
79362: NEG
79363: PUSH
79364: LD_INT 4
79366: NEG
79367: PUSH
79368: EMPTY
79369: LIST
79370: LIST
79371: PUSH
79372: LD_INT 1
79374: NEG
79375: PUSH
79376: LD_INT 5
79378: NEG
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: LD_INT 2
79386: PUSH
79387: LD_INT 3
79389: NEG
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: PUSH
79395: LD_INT 2
79397: NEG
79398: PUSH
79399: LD_INT 5
79401: NEG
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 3
79409: PUSH
79410: LD_INT 0
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 3
79419: PUSH
79420: LD_INT 1
79422: NEG
79423: PUSH
79424: EMPTY
79425: LIST
79426: LIST
79427: PUSH
79428: LD_INT 4
79430: PUSH
79431: LD_INT 0
79433: PUSH
79434: EMPTY
79435: LIST
79436: LIST
79437: PUSH
79438: LD_INT 4
79440: PUSH
79441: LD_INT 1
79443: PUSH
79444: EMPTY
79445: LIST
79446: LIST
79447: PUSH
79448: LD_INT 3
79450: PUSH
79451: LD_INT 1
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: PUSH
79458: LD_INT 2
79460: PUSH
79461: LD_INT 0
79463: PUSH
79464: EMPTY
79465: LIST
79466: LIST
79467: PUSH
79468: LD_INT 2
79470: PUSH
79471: LD_INT 1
79473: NEG
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: LD_INT 2
79481: PUSH
79482: LD_INT 2
79484: NEG
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: LD_INT 4
79492: PUSH
79493: LD_INT 2
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 4
79502: PUSH
79503: LD_INT 4
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PUSH
79510: LD_INT 4
79512: PUSH
79513: LD_INT 3
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: PUSH
79520: LD_INT 5
79522: PUSH
79523: LD_INT 4
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PUSH
79530: LD_INT 5
79532: PUSH
79533: LD_INT 5
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: PUSH
79540: LD_INT 4
79542: PUSH
79543: LD_INT 5
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: PUSH
79550: LD_INT 3
79552: PUSH
79553: LD_INT 4
79555: PUSH
79556: EMPTY
79557: LIST
79558: LIST
79559: PUSH
79560: LD_INT 3
79562: PUSH
79563: LD_INT 3
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 5
79572: PUSH
79573: LD_INT 3
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: PUSH
79580: LD_INT 3
79582: PUSH
79583: LD_INT 5
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: LIST
79594: LIST
79595: LIST
79596: LIST
79597: LIST
79598: LIST
79599: LIST
79600: LIST
79601: LIST
79602: LIST
79603: LIST
79604: LIST
79605: LIST
79606: LIST
79607: LIST
79608: LIST
79609: LIST
79610: LIST
79611: LIST
79612: LIST
79613: LIST
79614: LIST
79615: LIST
79616: LIST
79617: LIST
79618: LIST
79619: LIST
79620: LIST
79621: LIST
79622: LIST
79623: LIST
79624: LIST
79625: LIST
79626: LIST
79627: LIST
79628: LIST
79629: LIST
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: LIST
79635: LIST
79636: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
79637: LD_ADDR_VAR 0 33
79641: PUSH
79642: LD_INT 4
79644: NEG
79645: PUSH
79646: LD_INT 4
79648: NEG
79649: PUSH
79650: EMPTY
79651: LIST
79652: LIST
79653: PUSH
79654: LD_INT 4
79656: NEG
79657: PUSH
79658: LD_INT 5
79660: NEG
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PUSH
79666: LD_INT 3
79668: NEG
79669: PUSH
79670: LD_INT 4
79672: NEG
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PUSH
79678: LD_INT 3
79680: NEG
79681: PUSH
79682: LD_INT 3
79684: NEG
79685: PUSH
79686: EMPTY
79687: LIST
79688: LIST
79689: PUSH
79690: LD_INT 4
79692: NEG
79693: PUSH
79694: LD_INT 3
79696: NEG
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: PUSH
79702: LD_INT 5
79704: NEG
79705: PUSH
79706: LD_INT 4
79708: NEG
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: LD_INT 5
79716: NEG
79717: PUSH
79718: LD_INT 5
79720: NEG
79721: PUSH
79722: EMPTY
79723: LIST
79724: LIST
79725: PUSH
79726: LD_INT 3
79728: NEG
79729: PUSH
79730: LD_INT 5
79732: NEG
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 5
79740: NEG
79741: PUSH
79742: LD_INT 3
79744: NEG
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PUSH
79750: LD_INT 0
79752: PUSH
79753: LD_INT 3
79755: NEG
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PUSH
79761: LD_INT 0
79763: PUSH
79764: LD_INT 4
79766: NEG
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: PUSH
79772: LD_INT 1
79774: PUSH
79775: LD_INT 3
79777: NEG
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: PUSH
79783: LD_INT 1
79785: PUSH
79786: LD_INT 2
79788: NEG
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 0
79796: PUSH
79797: LD_INT 2
79799: NEG
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: PUSH
79805: LD_INT 1
79807: NEG
79808: PUSH
79809: LD_INT 3
79811: NEG
79812: PUSH
79813: EMPTY
79814: LIST
79815: LIST
79816: PUSH
79817: LD_INT 1
79819: NEG
79820: PUSH
79821: LD_INT 4
79823: NEG
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: PUSH
79829: LD_INT 2
79831: PUSH
79832: LD_INT 2
79834: NEG
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: LD_INT 2
79842: NEG
79843: PUSH
79844: LD_INT 4
79846: NEG
79847: PUSH
79848: EMPTY
79849: LIST
79850: LIST
79851: PUSH
79852: LD_INT 4
79854: PUSH
79855: LD_INT 0
79857: PUSH
79858: EMPTY
79859: LIST
79860: LIST
79861: PUSH
79862: LD_INT 4
79864: PUSH
79865: LD_INT 1
79867: NEG
79868: PUSH
79869: EMPTY
79870: LIST
79871: LIST
79872: PUSH
79873: LD_INT 5
79875: PUSH
79876: LD_INT 0
79878: PUSH
79879: EMPTY
79880: LIST
79881: LIST
79882: PUSH
79883: LD_INT 5
79885: PUSH
79886: LD_INT 1
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PUSH
79893: LD_INT 4
79895: PUSH
79896: LD_INT 1
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 3
79905: PUSH
79906: LD_INT 0
79908: PUSH
79909: EMPTY
79910: LIST
79911: LIST
79912: PUSH
79913: LD_INT 3
79915: PUSH
79916: LD_INT 1
79918: NEG
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: LD_INT 3
79926: PUSH
79927: LD_INT 2
79929: NEG
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PUSH
79935: LD_INT 5
79937: PUSH
79938: LD_INT 2
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: PUSH
79945: LD_INT 3
79947: PUSH
79948: LD_INT 3
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 3
79957: PUSH
79958: LD_INT 2
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 4
79967: PUSH
79968: LD_INT 3
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 4
79977: PUSH
79978: LD_INT 4
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: PUSH
79985: LD_INT 3
79987: PUSH
79988: LD_INT 4
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: PUSH
79995: LD_INT 2
79997: PUSH
79998: LD_INT 3
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: PUSH
80005: LD_INT 2
80007: PUSH
80008: LD_INT 2
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: PUSH
80015: LD_INT 4
80017: PUSH
80018: LD_INT 2
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PUSH
80025: LD_INT 2
80027: PUSH
80028: LD_INT 4
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: PUSH
80035: LD_INT 0
80037: PUSH
80038: LD_INT 4
80040: PUSH
80041: EMPTY
80042: LIST
80043: LIST
80044: PUSH
80045: LD_INT 0
80047: PUSH
80048: LD_INT 3
80050: PUSH
80051: EMPTY
80052: LIST
80053: LIST
80054: PUSH
80055: LD_INT 1
80057: PUSH
80058: LD_INT 4
80060: PUSH
80061: EMPTY
80062: LIST
80063: LIST
80064: PUSH
80065: LD_INT 1
80067: PUSH
80068: LD_INT 5
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: PUSH
80075: LD_INT 0
80077: PUSH
80078: LD_INT 5
80080: PUSH
80081: EMPTY
80082: LIST
80083: LIST
80084: PUSH
80085: LD_INT 1
80087: NEG
80088: PUSH
80089: LD_INT 4
80091: PUSH
80092: EMPTY
80093: LIST
80094: LIST
80095: PUSH
80096: LD_INT 1
80098: NEG
80099: PUSH
80100: LD_INT 3
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 2
80109: PUSH
80110: LD_INT 5
80112: PUSH
80113: EMPTY
80114: LIST
80115: LIST
80116: PUSH
80117: LD_INT 2
80119: NEG
80120: PUSH
80121: LD_INT 3
80123: PUSH
80124: EMPTY
80125: LIST
80126: LIST
80127: PUSH
80128: EMPTY
80129: LIST
80130: LIST
80131: LIST
80132: LIST
80133: LIST
80134: LIST
80135: LIST
80136: LIST
80137: LIST
80138: LIST
80139: LIST
80140: LIST
80141: LIST
80142: LIST
80143: LIST
80144: LIST
80145: LIST
80146: LIST
80147: LIST
80148: LIST
80149: LIST
80150: LIST
80151: LIST
80152: LIST
80153: LIST
80154: LIST
80155: LIST
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
80175: LD_ADDR_VAR 0 34
80179: PUSH
80180: LD_INT 0
80182: PUSH
80183: LD_INT 4
80185: NEG
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: LD_INT 0
80193: PUSH
80194: LD_INT 5
80196: NEG
80197: PUSH
80198: EMPTY
80199: LIST
80200: LIST
80201: PUSH
80202: LD_INT 1
80204: PUSH
80205: LD_INT 4
80207: NEG
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: PUSH
80213: LD_INT 1
80215: PUSH
80216: LD_INT 3
80218: NEG
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: PUSH
80224: LD_INT 0
80226: PUSH
80227: LD_INT 3
80229: NEG
80230: PUSH
80231: EMPTY
80232: LIST
80233: LIST
80234: PUSH
80235: LD_INT 1
80237: NEG
80238: PUSH
80239: LD_INT 4
80241: NEG
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: PUSH
80247: LD_INT 1
80249: NEG
80250: PUSH
80251: LD_INT 5
80253: NEG
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: PUSH
80259: LD_INT 2
80261: PUSH
80262: LD_INT 3
80264: NEG
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: PUSH
80270: LD_INT 2
80272: NEG
80273: PUSH
80274: LD_INT 5
80276: NEG
80277: PUSH
80278: EMPTY
80279: LIST
80280: LIST
80281: PUSH
80282: LD_INT 3
80284: PUSH
80285: LD_INT 0
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 3
80294: PUSH
80295: LD_INT 1
80297: NEG
80298: PUSH
80299: EMPTY
80300: LIST
80301: LIST
80302: PUSH
80303: LD_INT 4
80305: PUSH
80306: LD_INT 0
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: PUSH
80313: LD_INT 4
80315: PUSH
80316: LD_INT 1
80318: PUSH
80319: EMPTY
80320: LIST
80321: LIST
80322: PUSH
80323: LD_INT 3
80325: PUSH
80326: LD_INT 1
80328: PUSH
80329: EMPTY
80330: LIST
80331: LIST
80332: PUSH
80333: LD_INT 2
80335: PUSH
80336: LD_INT 0
80338: PUSH
80339: EMPTY
80340: LIST
80341: LIST
80342: PUSH
80343: LD_INT 2
80345: PUSH
80346: LD_INT 1
80348: NEG
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: PUSH
80354: LD_INT 2
80356: PUSH
80357: LD_INT 2
80359: NEG
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: LD_INT 4
80367: PUSH
80368: LD_INT 2
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 4
80377: PUSH
80378: LD_INT 4
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 4
80387: PUSH
80388: LD_INT 3
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 5
80397: PUSH
80398: LD_INT 4
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: LD_INT 5
80407: PUSH
80408: LD_INT 5
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PUSH
80415: LD_INT 4
80417: PUSH
80418: LD_INT 5
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PUSH
80425: LD_INT 3
80427: PUSH
80428: LD_INT 4
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: PUSH
80435: LD_INT 3
80437: PUSH
80438: LD_INT 3
80440: PUSH
80441: EMPTY
80442: LIST
80443: LIST
80444: PUSH
80445: LD_INT 5
80447: PUSH
80448: LD_INT 3
80450: PUSH
80451: EMPTY
80452: LIST
80453: LIST
80454: PUSH
80455: LD_INT 3
80457: PUSH
80458: LD_INT 5
80460: PUSH
80461: EMPTY
80462: LIST
80463: LIST
80464: PUSH
80465: LD_INT 0
80467: PUSH
80468: LD_INT 3
80470: PUSH
80471: EMPTY
80472: LIST
80473: LIST
80474: PUSH
80475: LD_INT 0
80477: PUSH
80478: LD_INT 2
80480: PUSH
80481: EMPTY
80482: LIST
80483: LIST
80484: PUSH
80485: LD_INT 1
80487: PUSH
80488: LD_INT 3
80490: PUSH
80491: EMPTY
80492: LIST
80493: LIST
80494: PUSH
80495: LD_INT 1
80497: PUSH
80498: LD_INT 4
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: PUSH
80505: LD_INT 0
80507: PUSH
80508: LD_INT 4
80510: PUSH
80511: EMPTY
80512: LIST
80513: LIST
80514: PUSH
80515: LD_INT 1
80517: NEG
80518: PUSH
80519: LD_INT 3
80521: PUSH
80522: EMPTY
80523: LIST
80524: LIST
80525: PUSH
80526: LD_INT 1
80528: NEG
80529: PUSH
80530: LD_INT 2
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: PUSH
80537: LD_INT 2
80539: PUSH
80540: LD_INT 4
80542: PUSH
80543: EMPTY
80544: LIST
80545: LIST
80546: PUSH
80547: LD_INT 2
80549: NEG
80550: PUSH
80551: LD_INT 2
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: PUSH
80558: LD_INT 4
80560: NEG
80561: PUSH
80562: LD_INT 0
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: LD_INT 4
80571: NEG
80572: PUSH
80573: LD_INT 1
80575: NEG
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 3
80583: NEG
80584: PUSH
80585: LD_INT 0
80587: PUSH
80588: EMPTY
80589: LIST
80590: LIST
80591: PUSH
80592: LD_INT 3
80594: NEG
80595: PUSH
80596: LD_INT 1
80598: PUSH
80599: EMPTY
80600: LIST
80601: LIST
80602: PUSH
80603: LD_INT 4
80605: NEG
80606: PUSH
80607: LD_INT 1
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: PUSH
80614: LD_INT 5
80616: NEG
80617: PUSH
80618: LD_INT 0
80620: PUSH
80621: EMPTY
80622: LIST
80623: LIST
80624: PUSH
80625: LD_INT 5
80627: NEG
80628: PUSH
80629: LD_INT 1
80631: NEG
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: PUSH
80637: LD_INT 5
80639: NEG
80640: PUSH
80641: LD_INT 2
80643: NEG
80644: PUSH
80645: EMPTY
80646: LIST
80647: LIST
80648: PUSH
80649: LD_INT 3
80651: NEG
80652: PUSH
80653: LD_INT 2
80655: PUSH
80656: EMPTY
80657: LIST
80658: LIST
80659: PUSH
80660: EMPTY
80661: LIST
80662: LIST
80663: LIST
80664: LIST
80665: LIST
80666: LIST
80667: LIST
80668: LIST
80669: LIST
80670: LIST
80671: LIST
80672: LIST
80673: LIST
80674: LIST
80675: LIST
80676: LIST
80677: LIST
80678: LIST
80679: LIST
80680: LIST
80681: LIST
80682: LIST
80683: LIST
80684: LIST
80685: LIST
80686: LIST
80687: LIST
80688: LIST
80689: LIST
80690: LIST
80691: LIST
80692: LIST
80693: LIST
80694: LIST
80695: LIST
80696: LIST
80697: LIST
80698: LIST
80699: LIST
80700: LIST
80701: LIST
80702: LIST
80703: LIST
80704: LIST
80705: LIST
80706: ST_TO_ADDR
// end ; end ;
80707: GO 80710
80709: POP
// case btype of b_depot , b_warehouse :
80710: LD_VAR 0 1
80714: PUSH
80715: LD_INT 0
80717: DOUBLE
80718: EQUAL
80719: IFTRUE 80729
80721: LD_INT 1
80723: DOUBLE
80724: EQUAL
80725: IFTRUE 80729
80727: GO 80930
80729: POP
// case nation of nation_american :
80730: LD_VAR 0 5
80734: PUSH
80735: LD_INT 1
80737: DOUBLE
80738: EQUAL
80739: IFTRUE 80743
80741: GO 80799
80743: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
80744: LD_ADDR_VAR 0 9
80748: PUSH
80749: LD_VAR 0 11
80753: PUSH
80754: LD_VAR 0 12
80758: PUSH
80759: LD_VAR 0 13
80763: PUSH
80764: LD_VAR 0 14
80768: PUSH
80769: LD_VAR 0 15
80773: PUSH
80774: LD_VAR 0 16
80778: PUSH
80779: EMPTY
80780: LIST
80781: LIST
80782: LIST
80783: LIST
80784: LIST
80785: LIST
80786: PUSH
80787: LD_VAR 0 4
80791: PUSH
80792: LD_INT 1
80794: PLUS
80795: ARRAY
80796: ST_TO_ADDR
80797: GO 80928
80799: LD_INT 2
80801: DOUBLE
80802: EQUAL
80803: IFTRUE 80807
80805: GO 80863
80807: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
80808: LD_ADDR_VAR 0 9
80812: PUSH
80813: LD_VAR 0 17
80817: PUSH
80818: LD_VAR 0 18
80822: PUSH
80823: LD_VAR 0 19
80827: PUSH
80828: LD_VAR 0 20
80832: PUSH
80833: LD_VAR 0 21
80837: PUSH
80838: LD_VAR 0 22
80842: PUSH
80843: EMPTY
80844: LIST
80845: LIST
80846: LIST
80847: LIST
80848: LIST
80849: LIST
80850: PUSH
80851: LD_VAR 0 4
80855: PUSH
80856: LD_INT 1
80858: PLUS
80859: ARRAY
80860: ST_TO_ADDR
80861: GO 80928
80863: LD_INT 3
80865: DOUBLE
80866: EQUAL
80867: IFTRUE 80871
80869: GO 80927
80871: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
80872: LD_ADDR_VAR 0 9
80876: PUSH
80877: LD_VAR 0 23
80881: PUSH
80882: LD_VAR 0 24
80886: PUSH
80887: LD_VAR 0 25
80891: PUSH
80892: LD_VAR 0 26
80896: PUSH
80897: LD_VAR 0 27
80901: PUSH
80902: LD_VAR 0 28
80906: PUSH
80907: EMPTY
80908: LIST
80909: LIST
80910: LIST
80911: LIST
80912: LIST
80913: LIST
80914: PUSH
80915: LD_VAR 0 4
80919: PUSH
80920: LD_INT 1
80922: PLUS
80923: ARRAY
80924: ST_TO_ADDR
80925: GO 80928
80927: POP
80928: GO 81483
80930: LD_INT 2
80932: DOUBLE
80933: EQUAL
80934: IFTRUE 80944
80936: LD_INT 3
80938: DOUBLE
80939: EQUAL
80940: IFTRUE 80944
80942: GO 81000
80944: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
80945: LD_ADDR_VAR 0 9
80949: PUSH
80950: LD_VAR 0 29
80954: PUSH
80955: LD_VAR 0 30
80959: PUSH
80960: LD_VAR 0 31
80964: PUSH
80965: LD_VAR 0 32
80969: PUSH
80970: LD_VAR 0 33
80974: PUSH
80975: LD_VAR 0 34
80979: PUSH
80980: EMPTY
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: LIST
80986: LIST
80987: PUSH
80988: LD_VAR 0 4
80992: PUSH
80993: LD_INT 1
80995: PLUS
80996: ARRAY
80997: ST_TO_ADDR
80998: GO 81483
81000: LD_INT 16
81002: DOUBLE
81003: EQUAL
81004: IFTRUE 81062
81006: LD_INT 17
81008: DOUBLE
81009: EQUAL
81010: IFTRUE 81062
81012: LD_INT 18
81014: DOUBLE
81015: EQUAL
81016: IFTRUE 81062
81018: LD_INT 19
81020: DOUBLE
81021: EQUAL
81022: IFTRUE 81062
81024: LD_INT 22
81026: DOUBLE
81027: EQUAL
81028: IFTRUE 81062
81030: LD_INT 20
81032: DOUBLE
81033: EQUAL
81034: IFTRUE 81062
81036: LD_INT 21
81038: DOUBLE
81039: EQUAL
81040: IFTRUE 81062
81042: LD_INT 23
81044: DOUBLE
81045: EQUAL
81046: IFTRUE 81062
81048: LD_INT 24
81050: DOUBLE
81051: EQUAL
81052: IFTRUE 81062
81054: LD_INT 25
81056: DOUBLE
81057: EQUAL
81058: IFTRUE 81062
81060: GO 81118
81062: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
81063: LD_ADDR_VAR 0 9
81067: PUSH
81068: LD_VAR 0 35
81072: PUSH
81073: LD_VAR 0 36
81077: PUSH
81078: LD_VAR 0 37
81082: PUSH
81083: LD_VAR 0 38
81087: PUSH
81088: LD_VAR 0 39
81092: PUSH
81093: LD_VAR 0 40
81097: PUSH
81098: EMPTY
81099: LIST
81100: LIST
81101: LIST
81102: LIST
81103: LIST
81104: LIST
81105: PUSH
81106: LD_VAR 0 4
81110: PUSH
81111: LD_INT 1
81113: PLUS
81114: ARRAY
81115: ST_TO_ADDR
81116: GO 81483
81118: LD_INT 6
81120: DOUBLE
81121: EQUAL
81122: IFTRUE 81174
81124: LD_INT 7
81126: DOUBLE
81127: EQUAL
81128: IFTRUE 81174
81130: LD_INT 8
81132: DOUBLE
81133: EQUAL
81134: IFTRUE 81174
81136: LD_INT 13
81138: DOUBLE
81139: EQUAL
81140: IFTRUE 81174
81142: LD_INT 12
81144: DOUBLE
81145: EQUAL
81146: IFTRUE 81174
81148: LD_INT 15
81150: DOUBLE
81151: EQUAL
81152: IFTRUE 81174
81154: LD_INT 11
81156: DOUBLE
81157: EQUAL
81158: IFTRUE 81174
81160: LD_INT 14
81162: DOUBLE
81163: EQUAL
81164: IFTRUE 81174
81166: LD_INT 10
81168: DOUBLE
81169: EQUAL
81170: IFTRUE 81174
81172: GO 81230
81174: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
81175: LD_ADDR_VAR 0 9
81179: PUSH
81180: LD_VAR 0 41
81184: PUSH
81185: LD_VAR 0 42
81189: PUSH
81190: LD_VAR 0 43
81194: PUSH
81195: LD_VAR 0 44
81199: PUSH
81200: LD_VAR 0 45
81204: PUSH
81205: LD_VAR 0 46
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: LIST
81214: LIST
81215: LIST
81216: LIST
81217: PUSH
81218: LD_VAR 0 4
81222: PUSH
81223: LD_INT 1
81225: PLUS
81226: ARRAY
81227: ST_TO_ADDR
81228: GO 81483
81230: LD_INT 36
81232: DOUBLE
81233: EQUAL
81234: IFTRUE 81238
81236: GO 81294
81238: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
81239: LD_ADDR_VAR 0 9
81243: PUSH
81244: LD_VAR 0 47
81248: PUSH
81249: LD_VAR 0 48
81253: PUSH
81254: LD_VAR 0 49
81258: PUSH
81259: LD_VAR 0 50
81263: PUSH
81264: LD_VAR 0 51
81268: PUSH
81269: LD_VAR 0 52
81273: PUSH
81274: EMPTY
81275: LIST
81276: LIST
81277: LIST
81278: LIST
81279: LIST
81280: LIST
81281: PUSH
81282: LD_VAR 0 4
81286: PUSH
81287: LD_INT 1
81289: PLUS
81290: ARRAY
81291: ST_TO_ADDR
81292: GO 81483
81294: LD_INT 4
81296: DOUBLE
81297: EQUAL
81298: IFTRUE 81320
81300: LD_INT 5
81302: DOUBLE
81303: EQUAL
81304: IFTRUE 81320
81306: LD_INT 34
81308: DOUBLE
81309: EQUAL
81310: IFTRUE 81320
81312: LD_INT 37
81314: DOUBLE
81315: EQUAL
81316: IFTRUE 81320
81318: GO 81376
81320: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
81321: LD_ADDR_VAR 0 9
81325: PUSH
81326: LD_VAR 0 53
81330: PUSH
81331: LD_VAR 0 54
81335: PUSH
81336: LD_VAR 0 55
81340: PUSH
81341: LD_VAR 0 56
81345: PUSH
81346: LD_VAR 0 57
81350: PUSH
81351: LD_VAR 0 58
81355: PUSH
81356: EMPTY
81357: LIST
81358: LIST
81359: LIST
81360: LIST
81361: LIST
81362: LIST
81363: PUSH
81364: LD_VAR 0 4
81368: PUSH
81369: LD_INT 1
81371: PLUS
81372: ARRAY
81373: ST_TO_ADDR
81374: GO 81483
81376: LD_INT 31
81378: DOUBLE
81379: EQUAL
81380: IFTRUE 81426
81382: LD_INT 32
81384: DOUBLE
81385: EQUAL
81386: IFTRUE 81426
81388: LD_INT 33
81390: DOUBLE
81391: EQUAL
81392: IFTRUE 81426
81394: LD_INT 27
81396: DOUBLE
81397: EQUAL
81398: IFTRUE 81426
81400: LD_INT 26
81402: DOUBLE
81403: EQUAL
81404: IFTRUE 81426
81406: LD_INT 28
81408: DOUBLE
81409: EQUAL
81410: IFTRUE 81426
81412: LD_INT 29
81414: DOUBLE
81415: EQUAL
81416: IFTRUE 81426
81418: LD_INT 30
81420: DOUBLE
81421: EQUAL
81422: IFTRUE 81426
81424: GO 81482
81426: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
81427: LD_ADDR_VAR 0 9
81431: PUSH
81432: LD_VAR 0 59
81436: PUSH
81437: LD_VAR 0 60
81441: PUSH
81442: LD_VAR 0 61
81446: PUSH
81447: LD_VAR 0 62
81451: PUSH
81452: LD_VAR 0 63
81456: PUSH
81457: LD_VAR 0 64
81461: PUSH
81462: EMPTY
81463: LIST
81464: LIST
81465: LIST
81466: LIST
81467: LIST
81468: LIST
81469: PUSH
81470: LD_VAR 0 4
81474: PUSH
81475: LD_INT 1
81477: PLUS
81478: ARRAY
81479: ST_TO_ADDR
81480: GO 81483
81482: POP
// temp_list2 = [ ] ;
81483: LD_ADDR_VAR 0 10
81487: PUSH
81488: EMPTY
81489: ST_TO_ADDR
// for i in temp_list do
81490: LD_ADDR_VAR 0 8
81494: PUSH
81495: LD_VAR 0 9
81499: PUSH
81500: FOR_IN
81501: IFFALSE 81553
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
81503: LD_ADDR_VAR 0 10
81507: PUSH
81508: LD_VAR 0 10
81512: PUSH
81513: LD_VAR 0 8
81517: PUSH
81518: LD_INT 1
81520: ARRAY
81521: PUSH
81522: LD_VAR 0 2
81526: PLUS
81527: PUSH
81528: LD_VAR 0 8
81532: PUSH
81533: LD_INT 2
81535: ARRAY
81536: PUSH
81537: LD_VAR 0 3
81541: PLUS
81542: PUSH
81543: EMPTY
81544: LIST
81545: LIST
81546: PUSH
81547: EMPTY
81548: LIST
81549: ADD
81550: ST_TO_ADDR
81551: GO 81500
81553: POP
81554: POP
// result = temp_list2 ;
81555: LD_ADDR_VAR 0 7
81559: PUSH
81560: LD_VAR 0 10
81564: ST_TO_ADDR
// end ;
81565: LD_VAR 0 7
81569: RET
// export function EnemyInRange ( unit , dist ) ; begin
81570: LD_INT 0
81572: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
81573: LD_ADDR_VAR 0 3
81577: PUSH
81578: LD_VAR 0 1
81582: PPUSH
81583: CALL_OW 255
81587: PPUSH
81588: LD_VAR 0 1
81592: PPUSH
81593: CALL_OW 250
81597: PPUSH
81598: LD_VAR 0 1
81602: PPUSH
81603: CALL_OW 251
81607: PPUSH
81608: LD_VAR 0 2
81612: PPUSH
81613: CALL 55674 0 4
81617: PUSH
81618: LD_INT 4
81620: ARRAY
81621: ST_TO_ADDR
// end ;
81622: LD_VAR 0 3
81626: RET
// export function PlayerSeeMe ( unit ) ; begin
81627: LD_INT 0
81629: PPUSH
// result := See ( your_side , unit ) ;
81630: LD_ADDR_VAR 0 2
81634: PUSH
81635: LD_OWVAR 2
81639: PPUSH
81640: LD_VAR 0 1
81644: PPUSH
81645: CALL_OW 292
81649: ST_TO_ADDR
// end ;
81650: LD_VAR 0 2
81654: RET
// export function ReverseDir ( unit ) ; begin
81655: LD_INT 0
81657: PPUSH
// if not unit then
81658: LD_VAR 0 1
81662: NOT
81663: IFFALSE 81667
// exit ;
81665: GO 81690
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
81667: LD_ADDR_VAR 0 2
81671: PUSH
81672: LD_VAR 0 1
81676: PPUSH
81677: CALL_OW 254
81681: PUSH
81682: LD_INT 3
81684: PLUS
81685: PUSH
81686: LD_INT 6
81688: MOD
81689: ST_TO_ADDR
// end ;
81690: LD_VAR 0 2
81694: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
81695: LD_INT 0
81697: PPUSH
81698: PPUSH
81699: PPUSH
81700: PPUSH
81701: PPUSH
// if not hexes then
81702: LD_VAR 0 2
81706: NOT
81707: IFFALSE 81711
// exit ;
81709: GO 81859
// dist := 9999 ;
81711: LD_ADDR_VAR 0 5
81715: PUSH
81716: LD_INT 9999
81718: ST_TO_ADDR
// for i = 1 to hexes do
81719: LD_ADDR_VAR 0 4
81723: PUSH
81724: DOUBLE
81725: LD_INT 1
81727: DEC
81728: ST_TO_ADDR
81729: LD_VAR 0 2
81733: PUSH
81734: FOR_TO
81735: IFFALSE 81847
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
81737: LD_VAR 0 1
81741: PPUSH
81742: LD_VAR 0 2
81746: PUSH
81747: LD_VAR 0 4
81751: ARRAY
81752: PUSH
81753: LD_INT 1
81755: ARRAY
81756: PPUSH
81757: LD_VAR 0 2
81761: PUSH
81762: LD_VAR 0 4
81766: ARRAY
81767: PUSH
81768: LD_INT 2
81770: ARRAY
81771: PPUSH
81772: CALL_OW 297
81776: PUSH
81777: LD_VAR 0 5
81781: LESS
81782: IFFALSE 81845
// begin hex := hexes [ i ] ;
81784: LD_ADDR_VAR 0 7
81788: PUSH
81789: LD_VAR 0 2
81793: PUSH
81794: LD_VAR 0 4
81798: ARRAY
81799: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81800: LD_ADDR_VAR 0 5
81804: PUSH
81805: LD_VAR 0 1
81809: PPUSH
81810: LD_VAR 0 2
81814: PUSH
81815: LD_VAR 0 4
81819: ARRAY
81820: PUSH
81821: LD_INT 1
81823: ARRAY
81824: PPUSH
81825: LD_VAR 0 2
81829: PUSH
81830: LD_VAR 0 4
81834: ARRAY
81835: PUSH
81836: LD_INT 2
81838: ARRAY
81839: PPUSH
81840: CALL_OW 297
81844: ST_TO_ADDR
// end ; end ;
81845: GO 81734
81847: POP
81848: POP
// result := hex ;
81849: LD_ADDR_VAR 0 3
81853: PUSH
81854: LD_VAR 0 7
81858: ST_TO_ADDR
// end ;
81859: LD_VAR 0 3
81863: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
81864: LD_INT 0
81866: PPUSH
81867: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
81868: LD_VAR 0 1
81872: NOT
81873: PUSH
81874: LD_VAR 0 1
81878: PUSH
81879: LD_INT 21
81881: PUSH
81882: LD_INT 2
81884: PUSH
81885: EMPTY
81886: LIST
81887: LIST
81888: PUSH
81889: LD_INT 23
81891: PUSH
81892: LD_INT 2
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: PUSH
81899: EMPTY
81900: LIST
81901: LIST
81902: PPUSH
81903: CALL_OW 69
81907: IN
81908: NOT
81909: OR
81910: IFFALSE 81914
// exit ;
81912: GO 81961
// for i = 1 to 3 do
81914: LD_ADDR_VAR 0 3
81918: PUSH
81919: DOUBLE
81920: LD_INT 1
81922: DEC
81923: ST_TO_ADDR
81924: LD_INT 3
81926: PUSH
81927: FOR_TO
81928: IFFALSE 81959
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
81930: LD_VAR 0 1
81934: PPUSH
81935: CALL_OW 250
81939: PPUSH
81940: LD_VAR 0 1
81944: PPUSH
81945: CALL_OW 251
81949: PPUSH
81950: LD_INT 1
81952: PPUSH
81953: CALL_OW 453
81957: GO 81927
81959: POP
81960: POP
// end ;
81961: LD_VAR 0 2
81965: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
81966: LD_INT 0
81968: PPUSH
81969: PPUSH
81970: PPUSH
81971: PPUSH
81972: PPUSH
81973: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
81974: LD_VAR 0 1
81978: NOT
81979: PUSH
81980: LD_VAR 0 2
81984: NOT
81985: OR
81986: PUSH
81987: LD_VAR 0 1
81991: PPUSH
81992: CALL_OW 314
81996: OR
81997: IFFALSE 82001
// exit ;
81999: GO 82442
// x := GetX ( enemy_unit ) ;
82001: LD_ADDR_VAR 0 7
82005: PUSH
82006: LD_VAR 0 2
82010: PPUSH
82011: CALL_OW 250
82015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
82016: LD_ADDR_VAR 0 8
82020: PUSH
82021: LD_VAR 0 2
82025: PPUSH
82026: CALL_OW 251
82030: ST_TO_ADDR
// if not x or not y then
82031: LD_VAR 0 7
82035: NOT
82036: PUSH
82037: LD_VAR 0 8
82041: NOT
82042: OR
82043: IFFALSE 82047
// exit ;
82045: GO 82442
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
82047: LD_ADDR_VAR 0 6
82051: PUSH
82052: LD_VAR 0 7
82056: PPUSH
82057: LD_INT 0
82059: PPUSH
82060: LD_INT 4
82062: PPUSH
82063: CALL_OW 272
82067: PUSH
82068: LD_VAR 0 8
82072: PPUSH
82073: LD_INT 0
82075: PPUSH
82076: LD_INT 4
82078: PPUSH
82079: CALL_OW 273
82083: PUSH
82084: EMPTY
82085: LIST
82086: LIST
82087: PUSH
82088: LD_VAR 0 7
82092: PPUSH
82093: LD_INT 1
82095: PPUSH
82096: LD_INT 4
82098: PPUSH
82099: CALL_OW 272
82103: PUSH
82104: LD_VAR 0 8
82108: PPUSH
82109: LD_INT 1
82111: PPUSH
82112: LD_INT 4
82114: PPUSH
82115: CALL_OW 273
82119: PUSH
82120: EMPTY
82121: LIST
82122: LIST
82123: PUSH
82124: LD_VAR 0 7
82128: PPUSH
82129: LD_INT 2
82131: PPUSH
82132: LD_INT 4
82134: PPUSH
82135: CALL_OW 272
82139: PUSH
82140: LD_VAR 0 8
82144: PPUSH
82145: LD_INT 2
82147: PPUSH
82148: LD_INT 4
82150: PPUSH
82151: CALL_OW 273
82155: PUSH
82156: EMPTY
82157: LIST
82158: LIST
82159: PUSH
82160: LD_VAR 0 7
82164: PPUSH
82165: LD_INT 3
82167: PPUSH
82168: LD_INT 4
82170: PPUSH
82171: CALL_OW 272
82175: PUSH
82176: LD_VAR 0 8
82180: PPUSH
82181: LD_INT 3
82183: PPUSH
82184: LD_INT 4
82186: PPUSH
82187: CALL_OW 273
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PUSH
82196: LD_VAR 0 7
82200: PPUSH
82201: LD_INT 4
82203: PPUSH
82204: LD_INT 4
82206: PPUSH
82207: CALL_OW 272
82211: PUSH
82212: LD_VAR 0 8
82216: PPUSH
82217: LD_INT 4
82219: PPUSH
82220: LD_INT 4
82222: PPUSH
82223: CALL_OW 273
82227: PUSH
82228: EMPTY
82229: LIST
82230: LIST
82231: PUSH
82232: LD_VAR 0 7
82236: PPUSH
82237: LD_INT 5
82239: PPUSH
82240: LD_INT 4
82242: PPUSH
82243: CALL_OW 272
82247: PUSH
82248: LD_VAR 0 8
82252: PPUSH
82253: LD_INT 5
82255: PPUSH
82256: LD_INT 4
82258: PPUSH
82259: CALL_OW 273
82263: PUSH
82264: EMPTY
82265: LIST
82266: LIST
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: LIST
82274: LIST
82275: ST_TO_ADDR
// for i = tmp downto 1 do
82276: LD_ADDR_VAR 0 4
82280: PUSH
82281: DOUBLE
82282: LD_VAR 0 6
82286: INC
82287: ST_TO_ADDR
82288: LD_INT 1
82290: PUSH
82291: FOR_DOWNTO
82292: IFFALSE 82393
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
82294: LD_VAR 0 6
82298: PUSH
82299: LD_VAR 0 4
82303: ARRAY
82304: PUSH
82305: LD_INT 1
82307: ARRAY
82308: PPUSH
82309: LD_VAR 0 6
82313: PUSH
82314: LD_VAR 0 4
82318: ARRAY
82319: PUSH
82320: LD_INT 2
82322: ARRAY
82323: PPUSH
82324: CALL_OW 488
82328: NOT
82329: PUSH
82330: LD_VAR 0 6
82334: PUSH
82335: LD_VAR 0 4
82339: ARRAY
82340: PUSH
82341: LD_INT 1
82343: ARRAY
82344: PPUSH
82345: LD_VAR 0 6
82349: PUSH
82350: LD_VAR 0 4
82354: ARRAY
82355: PUSH
82356: LD_INT 2
82358: ARRAY
82359: PPUSH
82360: CALL_OW 428
82364: PUSH
82365: LD_INT 0
82367: NONEQUAL
82368: OR
82369: IFFALSE 82391
// tmp := Delete ( tmp , i ) ;
82371: LD_ADDR_VAR 0 6
82375: PUSH
82376: LD_VAR 0 6
82380: PPUSH
82381: LD_VAR 0 4
82385: PPUSH
82386: CALL_OW 3
82390: ST_TO_ADDR
82391: GO 82291
82393: POP
82394: POP
// j := GetClosestHex ( unit , tmp ) ;
82395: LD_ADDR_VAR 0 5
82399: PUSH
82400: LD_VAR 0 1
82404: PPUSH
82405: LD_VAR 0 6
82409: PPUSH
82410: CALL 81695 0 2
82414: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
82415: LD_VAR 0 1
82419: PPUSH
82420: LD_VAR 0 5
82424: PUSH
82425: LD_INT 1
82427: ARRAY
82428: PPUSH
82429: LD_VAR 0 5
82433: PUSH
82434: LD_INT 2
82436: ARRAY
82437: PPUSH
82438: CALL_OW 111
// end ;
82442: LD_VAR 0 3
82446: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
82447: LD_INT 0
82449: PPUSH
82450: PPUSH
82451: PPUSH
// uc_side = 0 ;
82452: LD_ADDR_OWVAR 20
82456: PUSH
82457: LD_INT 0
82459: ST_TO_ADDR
// uc_nation = 0 ;
82460: LD_ADDR_OWVAR 21
82464: PUSH
82465: LD_INT 0
82467: ST_TO_ADDR
// InitHc ;
82468: CALL_OW 19
// InitVc ;
82472: CALL_OW 20
// if mastodonts then
82476: LD_VAR 0 6
82480: IFFALSE 82547
// for i = 1 to mastodonts do
82482: LD_ADDR_VAR 0 11
82486: PUSH
82487: DOUBLE
82488: LD_INT 1
82490: DEC
82491: ST_TO_ADDR
82492: LD_VAR 0 6
82496: PUSH
82497: FOR_TO
82498: IFFALSE 82545
// begin vc_chassis := 31 ;
82500: LD_ADDR_OWVAR 37
82504: PUSH
82505: LD_INT 31
82507: ST_TO_ADDR
// vc_control := control_rider ;
82508: LD_ADDR_OWVAR 38
82512: PUSH
82513: LD_INT 4
82515: ST_TO_ADDR
// animal := CreateVehicle ;
82516: LD_ADDR_VAR 0 12
82520: PUSH
82521: CALL_OW 45
82525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82526: LD_VAR 0 12
82530: PPUSH
82531: LD_VAR 0 8
82535: PPUSH
82536: LD_INT 0
82538: PPUSH
82539: CALL 89325 0 3
// end ;
82543: GO 82497
82545: POP
82546: POP
// if horses then
82547: LD_VAR 0 5
82551: IFFALSE 82618
// for i = 1 to horses do
82553: LD_ADDR_VAR 0 11
82557: PUSH
82558: DOUBLE
82559: LD_INT 1
82561: DEC
82562: ST_TO_ADDR
82563: LD_VAR 0 5
82567: PUSH
82568: FOR_TO
82569: IFFALSE 82616
// begin hc_class := 21 ;
82571: LD_ADDR_OWVAR 28
82575: PUSH
82576: LD_INT 21
82578: ST_TO_ADDR
// hc_gallery :=  ;
82579: LD_ADDR_OWVAR 33
82583: PUSH
82584: LD_STRING 
82586: ST_TO_ADDR
// animal := CreateHuman ;
82587: LD_ADDR_VAR 0 12
82591: PUSH
82592: CALL_OW 44
82596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82597: LD_VAR 0 12
82601: PPUSH
82602: LD_VAR 0 8
82606: PPUSH
82607: LD_INT 0
82609: PPUSH
82610: CALL 89325 0 3
// end ;
82614: GO 82568
82616: POP
82617: POP
// if birds then
82618: LD_VAR 0 1
82622: IFFALSE 82689
// for i = 1 to birds do
82624: LD_ADDR_VAR 0 11
82628: PUSH
82629: DOUBLE
82630: LD_INT 1
82632: DEC
82633: ST_TO_ADDR
82634: LD_VAR 0 1
82638: PUSH
82639: FOR_TO
82640: IFFALSE 82687
// begin hc_class = 18 ;
82642: LD_ADDR_OWVAR 28
82646: PUSH
82647: LD_INT 18
82649: ST_TO_ADDR
// hc_gallery =  ;
82650: LD_ADDR_OWVAR 33
82654: PUSH
82655: LD_STRING 
82657: ST_TO_ADDR
// animal := CreateHuman ;
82658: LD_ADDR_VAR 0 12
82662: PUSH
82663: CALL_OW 44
82667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82668: LD_VAR 0 12
82672: PPUSH
82673: LD_VAR 0 8
82677: PPUSH
82678: LD_INT 0
82680: PPUSH
82681: CALL 89325 0 3
// end ;
82685: GO 82639
82687: POP
82688: POP
// if tigers then
82689: LD_VAR 0 2
82693: IFFALSE 82777
// for i = 1 to tigers do
82695: LD_ADDR_VAR 0 11
82699: PUSH
82700: DOUBLE
82701: LD_INT 1
82703: DEC
82704: ST_TO_ADDR
82705: LD_VAR 0 2
82709: PUSH
82710: FOR_TO
82711: IFFALSE 82775
// begin hc_class = class_tiger ;
82713: LD_ADDR_OWVAR 28
82717: PUSH
82718: LD_INT 14
82720: ST_TO_ADDR
// hc_gallery =  ;
82721: LD_ADDR_OWVAR 33
82725: PUSH
82726: LD_STRING 
82728: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
82729: LD_ADDR_OWVAR 35
82733: PUSH
82734: LD_INT 7
82736: NEG
82737: PPUSH
82738: LD_INT 7
82740: PPUSH
82741: CALL_OW 12
82745: ST_TO_ADDR
// animal := CreateHuman ;
82746: LD_ADDR_VAR 0 12
82750: PUSH
82751: CALL_OW 44
82755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82756: LD_VAR 0 12
82760: PPUSH
82761: LD_VAR 0 8
82765: PPUSH
82766: LD_INT 0
82768: PPUSH
82769: CALL 89325 0 3
// end ;
82773: GO 82710
82775: POP
82776: POP
// if apemans then
82777: LD_VAR 0 3
82781: IFFALSE 82904
// for i = 1 to apemans do
82783: LD_ADDR_VAR 0 11
82787: PUSH
82788: DOUBLE
82789: LD_INT 1
82791: DEC
82792: ST_TO_ADDR
82793: LD_VAR 0 3
82797: PUSH
82798: FOR_TO
82799: IFFALSE 82902
// begin hc_class = class_apeman ;
82801: LD_ADDR_OWVAR 28
82805: PUSH
82806: LD_INT 12
82808: ST_TO_ADDR
// hc_gallery =  ;
82809: LD_ADDR_OWVAR 33
82813: PUSH
82814: LD_STRING 
82816: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
82817: LD_ADDR_OWVAR 35
82821: PUSH
82822: LD_INT 5
82824: NEG
82825: PPUSH
82826: LD_INT 5
82828: PPUSH
82829: CALL_OW 12
82833: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
82834: LD_ADDR_OWVAR 31
82838: PUSH
82839: LD_INT 1
82841: PPUSH
82842: LD_INT 3
82844: PPUSH
82845: CALL_OW 12
82849: PUSH
82850: LD_INT 1
82852: PPUSH
82853: LD_INT 3
82855: PPUSH
82856: CALL_OW 12
82860: PUSH
82861: LD_INT 0
82863: PUSH
82864: LD_INT 0
82866: PUSH
82867: EMPTY
82868: LIST
82869: LIST
82870: LIST
82871: LIST
82872: ST_TO_ADDR
// animal := CreateHuman ;
82873: LD_ADDR_VAR 0 12
82877: PUSH
82878: CALL_OW 44
82882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82883: LD_VAR 0 12
82887: PPUSH
82888: LD_VAR 0 8
82892: PPUSH
82893: LD_INT 0
82895: PPUSH
82896: CALL 89325 0 3
// end ;
82900: GO 82798
82902: POP
82903: POP
// if enchidnas then
82904: LD_VAR 0 4
82908: IFFALSE 82975
// for i = 1 to enchidnas do
82910: LD_ADDR_VAR 0 11
82914: PUSH
82915: DOUBLE
82916: LD_INT 1
82918: DEC
82919: ST_TO_ADDR
82920: LD_VAR 0 4
82924: PUSH
82925: FOR_TO
82926: IFFALSE 82973
// begin hc_class = 13 ;
82928: LD_ADDR_OWVAR 28
82932: PUSH
82933: LD_INT 13
82935: ST_TO_ADDR
// hc_gallery =  ;
82936: LD_ADDR_OWVAR 33
82940: PUSH
82941: LD_STRING 
82943: ST_TO_ADDR
// animal := CreateHuman ;
82944: LD_ADDR_VAR 0 12
82948: PUSH
82949: CALL_OW 44
82953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82954: LD_VAR 0 12
82958: PPUSH
82959: LD_VAR 0 8
82963: PPUSH
82964: LD_INT 0
82966: PPUSH
82967: CALL 89325 0 3
// end ;
82971: GO 82925
82973: POP
82974: POP
// if fishes then
82975: LD_VAR 0 7
82979: IFFALSE 83046
// for i = 1 to fishes do
82981: LD_ADDR_VAR 0 11
82985: PUSH
82986: DOUBLE
82987: LD_INT 1
82989: DEC
82990: ST_TO_ADDR
82991: LD_VAR 0 7
82995: PUSH
82996: FOR_TO
82997: IFFALSE 83044
// begin hc_class = 20 ;
82999: LD_ADDR_OWVAR 28
83003: PUSH
83004: LD_INT 20
83006: ST_TO_ADDR
// hc_gallery =  ;
83007: LD_ADDR_OWVAR 33
83011: PUSH
83012: LD_STRING 
83014: ST_TO_ADDR
// animal := CreateHuman ;
83015: LD_ADDR_VAR 0 12
83019: PUSH
83020: CALL_OW 44
83024: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
83025: LD_VAR 0 12
83029: PPUSH
83030: LD_VAR 0 9
83034: PPUSH
83035: LD_INT 0
83037: PPUSH
83038: CALL 89325 0 3
// end ;
83042: GO 82996
83044: POP
83045: POP
// end ;
83046: LD_VAR 0 10
83050: RET
// export function WantHeal ( sci , unit ) ; begin
83051: LD_INT 0
83053: PPUSH
// if GetTaskList ( sci ) > 0 then
83054: LD_VAR 0 1
83058: PPUSH
83059: CALL_OW 437
83063: PUSH
83064: LD_INT 0
83066: GREATER
83067: IFFALSE 83137
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
83069: LD_VAR 0 1
83073: PPUSH
83074: CALL_OW 437
83078: PUSH
83079: LD_INT 1
83081: ARRAY
83082: PUSH
83083: LD_INT 1
83085: ARRAY
83086: PUSH
83087: LD_STRING l
83089: EQUAL
83090: PUSH
83091: LD_VAR 0 1
83095: PPUSH
83096: CALL_OW 437
83100: PUSH
83101: LD_INT 1
83103: ARRAY
83104: PUSH
83105: LD_INT 4
83107: ARRAY
83108: PUSH
83109: LD_VAR 0 2
83113: EQUAL
83114: AND
83115: IFFALSE 83127
// result := true else
83117: LD_ADDR_VAR 0 3
83121: PUSH
83122: LD_INT 1
83124: ST_TO_ADDR
83125: GO 83135
// result := false ;
83127: LD_ADDR_VAR 0 3
83131: PUSH
83132: LD_INT 0
83134: ST_TO_ADDR
// end else
83135: GO 83145
// result := false ;
83137: LD_ADDR_VAR 0 3
83141: PUSH
83142: LD_INT 0
83144: ST_TO_ADDR
// end ;
83145: LD_VAR 0 3
83149: RET
// export function HealTarget ( sci ) ; begin
83150: LD_INT 0
83152: PPUSH
// if not sci then
83153: LD_VAR 0 1
83157: NOT
83158: IFFALSE 83162
// exit ;
83160: GO 83227
// result := 0 ;
83162: LD_ADDR_VAR 0 2
83166: PUSH
83167: LD_INT 0
83169: ST_TO_ADDR
// if GetTaskList ( sci ) then
83170: LD_VAR 0 1
83174: PPUSH
83175: CALL_OW 437
83179: IFFALSE 83227
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
83181: LD_VAR 0 1
83185: PPUSH
83186: CALL_OW 437
83190: PUSH
83191: LD_INT 1
83193: ARRAY
83194: PUSH
83195: LD_INT 1
83197: ARRAY
83198: PUSH
83199: LD_STRING l
83201: EQUAL
83202: IFFALSE 83227
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
83204: LD_ADDR_VAR 0 2
83208: PUSH
83209: LD_VAR 0 1
83213: PPUSH
83214: CALL_OW 437
83218: PUSH
83219: LD_INT 1
83221: ARRAY
83222: PUSH
83223: LD_INT 4
83225: ARRAY
83226: ST_TO_ADDR
// end ;
83227: LD_VAR 0 2
83231: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
83232: LD_INT 0
83234: PPUSH
83235: PPUSH
83236: PPUSH
83237: PPUSH
83238: PPUSH
83239: PPUSH
83240: PPUSH
83241: PPUSH
83242: PPUSH
83243: PPUSH
83244: PPUSH
83245: PPUSH
83246: PPUSH
83247: PPUSH
83248: PPUSH
83249: PPUSH
83250: PPUSH
83251: PPUSH
83252: PPUSH
83253: PPUSH
83254: PPUSH
83255: PPUSH
83256: PPUSH
83257: PPUSH
83258: PPUSH
83259: PPUSH
83260: PPUSH
83261: PPUSH
83262: PPUSH
83263: PPUSH
83264: PPUSH
83265: PPUSH
83266: PPUSH
83267: PPUSH
// if not list then
83268: LD_VAR 0 1
83272: NOT
83273: IFFALSE 83277
// exit ;
83275: GO 87936
// base := list [ 1 ] ;
83277: LD_ADDR_VAR 0 3
83281: PUSH
83282: LD_VAR 0 1
83286: PUSH
83287: LD_INT 1
83289: ARRAY
83290: ST_TO_ADDR
// group := list [ 2 ] ;
83291: LD_ADDR_VAR 0 4
83295: PUSH
83296: LD_VAR 0 1
83300: PUSH
83301: LD_INT 2
83303: ARRAY
83304: ST_TO_ADDR
// path := list [ 3 ] ;
83305: LD_ADDR_VAR 0 5
83309: PUSH
83310: LD_VAR 0 1
83314: PUSH
83315: LD_INT 3
83317: ARRAY
83318: ST_TO_ADDR
// flags := list [ 4 ] ;
83319: LD_ADDR_VAR 0 6
83323: PUSH
83324: LD_VAR 0 1
83328: PUSH
83329: LD_INT 4
83331: ARRAY
83332: ST_TO_ADDR
// mined := [ ] ;
83333: LD_ADDR_VAR 0 27
83337: PUSH
83338: EMPTY
83339: ST_TO_ADDR
// bombed := [ ] ;
83340: LD_ADDR_VAR 0 28
83344: PUSH
83345: EMPTY
83346: ST_TO_ADDR
// healers := [ ] ;
83347: LD_ADDR_VAR 0 31
83351: PUSH
83352: EMPTY
83353: ST_TO_ADDR
// to_heal := [ ] ;
83354: LD_ADDR_VAR 0 30
83358: PUSH
83359: EMPTY
83360: ST_TO_ADDR
// repairs := [ ] ;
83361: LD_ADDR_VAR 0 33
83365: PUSH
83366: EMPTY
83367: ST_TO_ADDR
// to_repair := [ ] ;
83368: LD_ADDR_VAR 0 32
83372: PUSH
83373: EMPTY
83374: ST_TO_ADDR
// if not group or not path then
83375: LD_VAR 0 4
83379: NOT
83380: PUSH
83381: LD_VAR 0 5
83385: NOT
83386: OR
83387: IFFALSE 83391
// exit ;
83389: GO 87936
// side := GetSide ( group [ 1 ] ) ;
83391: LD_ADDR_VAR 0 35
83395: PUSH
83396: LD_VAR 0 4
83400: PUSH
83401: LD_INT 1
83403: ARRAY
83404: PPUSH
83405: CALL_OW 255
83409: ST_TO_ADDR
// if flags then
83410: LD_VAR 0 6
83414: IFFALSE 83558
// begin f_ignore_area := flags [ 1 ] ;
83416: LD_ADDR_VAR 0 17
83420: PUSH
83421: LD_VAR 0 6
83425: PUSH
83426: LD_INT 1
83428: ARRAY
83429: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
83430: LD_ADDR_VAR 0 18
83434: PUSH
83435: LD_VAR 0 6
83439: PUSH
83440: LD_INT 2
83442: ARRAY
83443: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
83444: LD_ADDR_VAR 0 19
83448: PUSH
83449: LD_VAR 0 6
83453: PUSH
83454: LD_INT 3
83456: ARRAY
83457: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
83458: LD_ADDR_VAR 0 20
83462: PUSH
83463: LD_VAR 0 6
83467: PUSH
83468: LD_INT 4
83470: ARRAY
83471: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
83472: LD_ADDR_VAR 0 21
83476: PUSH
83477: LD_VAR 0 6
83481: PUSH
83482: LD_INT 5
83484: ARRAY
83485: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
83486: LD_ADDR_VAR 0 22
83490: PUSH
83491: LD_VAR 0 6
83495: PUSH
83496: LD_INT 6
83498: ARRAY
83499: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
83500: LD_ADDR_VAR 0 23
83504: PUSH
83505: LD_VAR 0 6
83509: PUSH
83510: LD_INT 7
83512: ARRAY
83513: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
83514: LD_ADDR_VAR 0 24
83518: PUSH
83519: LD_VAR 0 6
83523: PUSH
83524: LD_INT 8
83526: ARRAY
83527: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
83528: LD_ADDR_VAR 0 25
83532: PUSH
83533: LD_VAR 0 6
83537: PUSH
83538: LD_INT 9
83540: ARRAY
83541: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
83542: LD_ADDR_VAR 0 26
83546: PUSH
83547: LD_VAR 0 6
83551: PUSH
83552: LD_INT 10
83554: ARRAY
83555: ST_TO_ADDR
// end else
83556: GO 83638
// begin f_ignore_area := false ;
83558: LD_ADDR_VAR 0 17
83562: PUSH
83563: LD_INT 0
83565: ST_TO_ADDR
// f_capture := false ;
83566: LD_ADDR_VAR 0 18
83570: PUSH
83571: LD_INT 0
83573: ST_TO_ADDR
// f_ignore_civ := false ;
83574: LD_ADDR_VAR 0 19
83578: PUSH
83579: LD_INT 0
83581: ST_TO_ADDR
// f_murder := false ;
83582: LD_ADDR_VAR 0 20
83586: PUSH
83587: LD_INT 0
83589: ST_TO_ADDR
// f_mines := false ;
83590: LD_ADDR_VAR 0 21
83594: PUSH
83595: LD_INT 0
83597: ST_TO_ADDR
// f_repair := false ;
83598: LD_ADDR_VAR 0 22
83602: PUSH
83603: LD_INT 0
83605: ST_TO_ADDR
// f_heal := false ;
83606: LD_ADDR_VAR 0 23
83610: PUSH
83611: LD_INT 0
83613: ST_TO_ADDR
// f_spacetime := false ;
83614: LD_ADDR_VAR 0 24
83618: PUSH
83619: LD_INT 0
83621: ST_TO_ADDR
// f_attack_depot := false ;
83622: LD_ADDR_VAR 0 25
83626: PUSH
83627: LD_INT 0
83629: ST_TO_ADDR
// f_crawl := false ;
83630: LD_ADDR_VAR 0 26
83634: PUSH
83635: LD_INT 0
83637: ST_TO_ADDR
// end ; if f_heal then
83638: LD_VAR 0 23
83642: IFFALSE 83669
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
83644: LD_ADDR_VAR 0 31
83648: PUSH
83649: LD_VAR 0 4
83653: PPUSH
83654: LD_INT 25
83656: PUSH
83657: LD_INT 4
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PPUSH
83664: CALL_OW 72
83668: ST_TO_ADDR
// if f_repair then
83669: LD_VAR 0 22
83673: IFFALSE 83700
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
83675: LD_ADDR_VAR 0 33
83679: PUSH
83680: LD_VAR 0 4
83684: PPUSH
83685: LD_INT 25
83687: PUSH
83688: LD_INT 3
83690: PUSH
83691: EMPTY
83692: LIST
83693: LIST
83694: PPUSH
83695: CALL_OW 72
83699: ST_TO_ADDR
// units_path := [ ] ;
83700: LD_ADDR_VAR 0 16
83704: PUSH
83705: EMPTY
83706: ST_TO_ADDR
// for i = 1 to group do
83707: LD_ADDR_VAR 0 7
83711: PUSH
83712: DOUBLE
83713: LD_INT 1
83715: DEC
83716: ST_TO_ADDR
83717: LD_VAR 0 4
83721: PUSH
83722: FOR_TO
83723: IFFALSE 83752
// units_path := Replace ( units_path , i , path ) ;
83725: LD_ADDR_VAR 0 16
83729: PUSH
83730: LD_VAR 0 16
83734: PPUSH
83735: LD_VAR 0 7
83739: PPUSH
83740: LD_VAR 0 5
83744: PPUSH
83745: CALL_OW 1
83749: ST_TO_ADDR
83750: GO 83722
83752: POP
83753: POP
// repeat for i = group downto 1 do
83754: LD_ADDR_VAR 0 7
83758: PUSH
83759: DOUBLE
83760: LD_VAR 0 4
83764: INC
83765: ST_TO_ADDR
83766: LD_INT 1
83768: PUSH
83769: FOR_DOWNTO
83770: IFFALSE 87892
// begin wait ( 5 ) ;
83772: LD_INT 5
83774: PPUSH
83775: CALL_OW 67
// tmp := [ ] ;
83779: LD_ADDR_VAR 0 14
83783: PUSH
83784: EMPTY
83785: ST_TO_ADDR
// attacking := false ;
83786: LD_ADDR_VAR 0 29
83790: PUSH
83791: LD_INT 0
83793: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
83794: LD_VAR 0 4
83798: PUSH
83799: LD_VAR 0 7
83803: ARRAY
83804: PPUSH
83805: CALL_OW 301
83809: PUSH
83810: LD_VAR 0 4
83814: PUSH
83815: LD_VAR 0 7
83819: ARRAY
83820: NOT
83821: OR
83822: IFFALSE 83931
// begin if GetType ( group [ i ] ) = unit_human then
83824: LD_VAR 0 4
83828: PUSH
83829: LD_VAR 0 7
83833: ARRAY
83834: PPUSH
83835: CALL_OW 247
83839: PUSH
83840: LD_INT 1
83842: EQUAL
83843: IFFALSE 83889
// begin to_heal := to_heal diff group [ i ] ;
83845: LD_ADDR_VAR 0 30
83849: PUSH
83850: LD_VAR 0 30
83854: PUSH
83855: LD_VAR 0 4
83859: PUSH
83860: LD_VAR 0 7
83864: ARRAY
83865: DIFF
83866: ST_TO_ADDR
// healers := healers diff group [ i ] ;
83867: LD_ADDR_VAR 0 31
83871: PUSH
83872: LD_VAR 0 31
83876: PUSH
83877: LD_VAR 0 4
83881: PUSH
83882: LD_VAR 0 7
83886: ARRAY
83887: DIFF
83888: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
83889: LD_ADDR_VAR 0 4
83893: PUSH
83894: LD_VAR 0 4
83898: PPUSH
83899: LD_VAR 0 7
83903: PPUSH
83904: CALL_OW 3
83908: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
83909: LD_ADDR_VAR 0 16
83913: PUSH
83914: LD_VAR 0 16
83918: PPUSH
83919: LD_VAR 0 7
83923: PPUSH
83924: CALL_OW 3
83928: ST_TO_ADDR
// continue ;
83929: GO 83769
// end ; if f_repair then
83931: LD_VAR 0 22
83935: IFFALSE 84424
// begin if GetType ( group [ i ] ) = unit_vehicle then
83937: LD_VAR 0 4
83941: PUSH
83942: LD_VAR 0 7
83946: ARRAY
83947: PPUSH
83948: CALL_OW 247
83952: PUSH
83953: LD_INT 2
83955: EQUAL
83956: IFFALSE 84146
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
83958: LD_VAR 0 4
83962: PUSH
83963: LD_VAR 0 7
83967: ARRAY
83968: PPUSH
83969: CALL_OW 256
83973: PUSH
83974: LD_INT 700
83976: LESS
83977: PUSH
83978: LD_VAR 0 4
83982: PUSH
83983: LD_VAR 0 7
83987: ARRAY
83988: PUSH
83989: LD_VAR 0 32
83993: IN
83994: NOT
83995: AND
83996: IFFALSE 84020
// to_repair := to_repair union group [ i ] ;
83998: LD_ADDR_VAR 0 32
84002: PUSH
84003: LD_VAR 0 32
84007: PUSH
84008: LD_VAR 0 4
84012: PUSH
84013: LD_VAR 0 7
84017: ARRAY
84018: UNION
84019: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
84020: LD_VAR 0 4
84024: PUSH
84025: LD_VAR 0 7
84029: ARRAY
84030: PPUSH
84031: CALL_OW 256
84035: PUSH
84036: LD_INT 1000
84038: EQUAL
84039: PUSH
84040: LD_VAR 0 4
84044: PUSH
84045: LD_VAR 0 7
84049: ARRAY
84050: PUSH
84051: LD_VAR 0 32
84055: IN
84056: AND
84057: IFFALSE 84081
// to_repair := to_repair diff group [ i ] ;
84059: LD_ADDR_VAR 0 32
84063: PUSH
84064: LD_VAR 0 32
84068: PUSH
84069: LD_VAR 0 4
84073: PUSH
84074: LD_VAR 0 7
84078: ARRAY
84079: DIFF
84080: ST_TO_ADDR
// if group [ i ] in to_repair then
84081: LD_VAR 0 4
84085: PUSH
84086: LD_VAR 0 7
84090: ARRAY
84091: PUSH
84092: LD_VAR 0 32
84096: IN
84097: IFFALSE 84144
// begin if not IsInArea ( group [ i ] , f_repair ) then
84099: LD_VAR 0 4
84103: PUSH
84104: LD_VAR 0 7
84108: ARRAY
84109: PPUSH
84110: LD_VAR 0 22
84114: PPUSH
84115: CALL_OW 308
84119: NOT
84120: IFFALSE 84142
// ComMoveToArea ( group [ i ] , f_repair ) ;
84122: LD_VAR 0 4
84126: PUSH
84127: LD_VAR 0 7
84131: ARRAY
84132: PPUSH
84133: LD_VAR 0 22
84137: PPUSH
84138: CALL_OW 113
// continue ;
84142: GO 83769
// end ; end else
84144: GO 84424
// if group [ i ] in repairs then
84146: LD_VAR 0 4
84150: PUSH
84151: LD_VAR 0 7
84155: ARRAY
84156: PUSH
84157: LD_VAR 0 33
84161: IN
84162: IFFALSE 84424
// begin if IsInUnit ( group [ i ] ) then
84164: LD_VAR 0 4
84168: PUSH
84169: LD_VAR 0 7
84173: ARRAY
84174: PPUSH
84175: CALL_OW 310
84179: IFFALSE 84247
// begin z := IsInUnit ( group [ i ] ) ;
84181: LD_ADDR_VAR 0 13
84185: PUSH
84186: LD_VAR 0 4
84190: PUSH
84191: LD_VAR 0 7
84195: ARRAY
84196: PPUSH
84197: CALL_OW 310
84201: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
84202: LD_VAR 0 13
84206: PUSH
84207: LD_VAR 0 32
84211: IN
84212: PUSH
84213: LD_VAR 0 13
84217: PPUSH
84218: LD_VAR 0 22
84222: PPUSH
84223: CALL_OW 308
84227: AND
84228: IFFALSE 84245
// ComExitVehicle ( group [ i ] ) ;
84230: LD_VAR 0 4
84234: PUSH
84235: LD_VAR 0 7
84239: ARRAY
84240: PPUSH
84241: CALL_OW 121
// end else
84245: GO 84424
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
84247: LD_ADDR_VAR 0 13
84251: PUSH
84252: LD_VAR 0 4
84256: PPUSH
84257: LD_INT 95
84259: PUSH
84260: LD_VAR 0 22
84264: PUSH
84265: EMPTY
84266: LIST
84267: LIST
84268: PUSH
84269: LD_INT 58
84271: PUSH
84272: EMPTY
84273: LIST
84274: PUSH
84275: EMPTY
84276: LIST
84277: LIST
84278: PPUSH
84279: CALL_OW 72
84283: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
84284: LD_VAR 0 4
84288: PUSH
84289: LD_VAR 0 7
84293: ARRAY
84294: PPUSH
84295: CALL_OW 314
84299: NOT
84300: IFFALSE 84422
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
84302: LD_ADDR_VAR 0 10
84306: PUSH
84307: LD_VAR 0 13
84311: PPUSH
84312: LD_VAR 0 4
84316: PUSH
84317: LD_VAR 0 7
84321: ARRAY
84322: PPUSH
84323: CALL_OW 74
84327: ST_TO_ADDR
// if not x then
84328: LD_VAR 0 10
84332: NOT
84333: IFFALSE 84337
// continue ;
84335: GO 83769
// if GetLives ( x ) < 1000 then
84337: LD_VAR 0 10
84341: PPUSH
84342: CALL_OW 256
84346: PUSH
84347: LD_INT 1000
84349: LESS
84350: IFFALSE 84374
// ComRepairVehicle ( group [ i ] , x ) else
84352: LD_VAR 0 4
84356: PUSH
84357: LD_VAR 0 7
84361: ARRAY
84362: PPUSH
84363: LD_VAR 0 10
84367: PPUSH
84368: CALL_OW 129
84372: GO 84422
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
84374: LD_VAR 0 23
84378: PUSH
84379: LD_VAR 0 4
84383: PUSH
84384: LD_VAR 0 7
84388: ARRAY
84389: PPUSH
84390: CALL_OW 256
84394: PUSH
84395: LD_INT 1000
84397: LESS
84398: AND
84399: NOT
84400: IFFALSE 84422
// ComEnterUnit ( group [ i ] , x ) ;
84402: LD_VAR 0 4
84406: PUSH
84407: LD_VAR 0 7
84411: ARRAY
84412: PPUSH
84413: LD_VAR 0 10
84417: PPUSH
84418: CALL_OW 120
// end ; continue ;
84422: GO 83769
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
84424: LD_VAR 0 23
84428: PUSH
84429: LD_VAR 0 4
84433: PUSH
84434: LD_VAR 0 7
84438: ARRAY
84439: PPUSH
84440: CALL_OW 247
84444: PUSH
84445: LD_INT 1
84447: EQUAL
84448: AND
84449: IFFALSE 84927
// begin if group [ i ] in healers then
84451: LD_VAR 0 4
84455: PUSH
84456: LD_VAR 0 7
84460: ARRAY
84461: PUSH
84462: LD_VAR 0 31
84466: IN
84467: IFFALSE 84740
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
84469: LD_VAR 0 4
84473: PUSH
84474: LD_VAR 0 7
84478: ARRAY
84479: PPUSH
84480: LD_VAR 0 23
84484: PPUSH
84485: CALL_OW 308
84489: NOT
84490: PUSH
84491: LD_VAR 0 4
84495: PUSH
84496: LD_VAR 0 7
84500: ARRAY
84501: PPUSH
84502: CALL_OW 314
84506: NOT
84507: AND
84508: IFFALSE 84532
// ComMoveToArea ( group [ i ] , f_heal ) else
84510: LD_VAR 0 4
84514: PUSH
84515: LD_VAR 0 7
84519: ARRAY
84520: PPUSH
84521: LD_VAR 0 23
84525: PPUSH
84526: CALL_OW 113
84530: GO 84738
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
84532: LD_VAR 0 4
84536: PUSH
84537: LD_VAR 0 7
84541: ARRAY
84542: PPUSH
84543: CALL 83150 0 1
84547: PPUSH
84548: CALL_OW 256
84552: PUSH
84553: LD_INT 1000
84555: EQUAL
84556: IFFALSE 84575
// ComStop ( group [ i ] ) else
84558: LD_VAR 0 4
84562: PUSH
84563: LD_VAR 0 7
84567: ARRAY
84568: PPUSH
84569: CALL_OW 141
84573: GO 84738
// if not HasTask ( group [ i ] ) and to_heal then
84575: LD_VAR 0 4
84579: PUSH
84580: LD_VAR 0 7
84584: ARRAY
84585: PPUSH
84586: CALL_OW 314
84590: NOT
84591: PUSH
84592: LD_VAR 0 30
84596: AND
84597: IFFALSE 84738
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
84599: LD_ADDR_VAR 0 13
84603: PUSH
84604: LD_VAR 0 30
84608: PPUSH
84609: LD_INT 3
84611: PUSH
84612: LD_INT 54
84614: PUSH
84615: EMPTY
84616: LIST
84617: PUSH
84618: EMPTY
84619: LIST
84620: LIST
84621: PPUSH
84622: CALL_OW 72
84626: PPUSH
84627: LD_VAR 0 4
84631: PUSH
84632: LD_VAR 0 7
84636: ARRAY
84637: PPUSH
84638: CALL_OW 74
84642: ST_TO_ADDR
// if z then
84643: LD_VAR 0 13
84647: IFFALSE 84738
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
84649: LD_INT 91
84651: PUSH
84652: LD_VAR 0 13
84656: PUSH
84657: LD_INT 10
84659: PUSH
84660: EMPTY
84661: LIST
84662: LIST
84663: LIST
84664: PUSH
84665: LD_INT 81
84667: PUSH
84668: LD_VAR 0 13
84672: PPUSH
84673: CALL_OW 255
84677: PUSH
84678: EMPTY
84679: LIST
84680: LIST
84681: PUSH
84682: EMPTY
84683: LIST
84684: LIST
84685: PPUSH
84686: CALL_OW 69
84690: PUSH
84691: LD_INT 0
84693: EQUAL
84694: IFFALSE 84718
// ComHeal ( group [ i ] , z ) else
84696: LD_VAR 0 4
84700: PUSH
84701: LD_VAR 0 7
84705: ARRAY
84706: PPUSH
84707: LD_VAR 0 13
84711: PPUSH
84712: CALL_OW 128
84716: GO 84738
// ComMoveToArea ( group [ i ] , f_heal ) ;
84718: LD_VAR 0 4
84722: PUSH
84723: LD_VAR 0 7
84727: ARRAY
84728: PPUSH
84729: LD_VAR 0 23
84733: PPUSH
84734: CALL_OW 113
// end ; continue ;
84738: GO 83769
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
84740: LD_VAR 0 4
84744: PUSH
84745: LD_VAR 0 7
84749: ARRAY
84750: PPUSH
84751: CALL_OW 256
84755: PUSH
84756: LD_INT 700
84758: LESS
84759: PUSH
84760: LD_VAR 0 4
84764: PUSH
84765: LD_VAR 0 7
84769: ARRAY
84770: PUSH
84771: LD_VAR 0 30
84775: IN
84776: NOT
84777: AND
84778: IFFALSE 84802
// to_heal := to_heal union group [ i ] ;
84780: LD_ADDR_VAR 0 30
84784: PUSH
84785: LD_VAR 0 30
84789: PUSH
84790: LD_VAR 0 4
84794: PUSH
84795: LD_VAR 0 7
84799: ARRAY
84800: UNION
84801: ST_TO_ADDR
// if group [ i ] in to_heal then
84802: LD_VAR 0 4
84806: PUSH
84807: LD_VAR 0 7
84811: ARRAY
84812: PUSH
84813: LD_VAR 0 30
84817: IN
84818: IFFALSE 84927
// begin if GetLives ( group [ i ] ) = 1000 then
84820: LD_VAR 0 4
84824: PUSH
84825: LD_VAR 0 7
84829: ARRAY
84830: PPUSH
84831: CALL_OW 256
84835: PUSH
84836: LD_INT 1000
84838: EQUAL
84839: IFFALSE 84865
// to_heal := to_heal diff group [ i ] else
84841: LD_ADDR_VAR 0 30
84845: PUSH
84846: LD_VAR 0 30
84850: PUSH
84851: LD_VAR 0 4
84855: PUSH
84856: LD_VAR 0 7
84860: ARRAY
84861: DIFF
84862: ST_TO_ADDR
84863: GO 84927
// begin if not IsInArea ( group [ i ] , to_heal ) then
84865: LD_VAR 0 4
84869: PUSH
84870: LD_VAR 0 7
84874: ARRAY
84875: PPUSH
84876: LD_VAR 0 30
84880: PPUSH
84881: CALL_OW 308
84885: NOT
84886: IFFALSE 84910
// ComMoveToArea ( group [ i ] , f_heal ) else
84888: LD_VAR 0 4
84892: PUSH
84893: LD_VAR 0 7
84897: ARRAY
84898: PPUSH
84899: LD_VAR 0 23
84903: PPUSH
84904: CALL_OW 113
84908: GO 84925
// ComHold ( group [ i ] ) ;
84910: LD_VAR 0 4
84914: PUSH
84915: LD_VAR 0 7
84919: ARRAY
84920: PPUSH
84921: CALL_OW 140
// continue ;
84925: GO 83769
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
84927: LD_VAR 0 4
84931: PUSH
84932: LD_VAR 0 7
84936: ARRAY
84937: PPUSH
84938: LD_INT 10
84940: PPUSH
84941: CALL 81570 0 2
84945: NOT
84946: PUSH
84947: LD_VAR 0 16
84951: PUSH
84952: LD_VAR 0 7
84956: ARRAY
84957: PUSH
84958: EMPTY
84959: EQUAL
84960: NOT
84961: AND
84962: IFFALSE 85228
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
84964: LD_VAR 0 4
84968: PUSH
84969: LD_VAR 0 7
84973: ARRAY
84974: PPUSH
84975: CALL_OW 262
84979: PUSH
84980: LD_INT 1
84982: PUSH
84983: LD_INT 2
84985: PUSH
84986: EMPTY
84987: LIST
84988: LIST
84989: IN
84990: IFFALSE 85031
// if GetFuel ( group [ i ] ) < 10 then
84992: LD_VAR 0 4
84996: PUSH
84997: LD_VAR 0 7
85001: ARRAY
85002: PPUSH
85003: CALL_OW 261
85007: PUSH
85008: LD_INT 10
85010: LESS
85011: IFFALSE 85031
// SetFuel ( group [ i ] , 12 ) ;
85013: LD_VAR 0 4
85017: PUSH
85018: LD_VAR 0 7
85022: ARRAY
85023: PPUSH
85024: LD_INT 12
85026: PPUSH
85027: CALL_OW 240
// if units_path [ i ] then
85031: LD_VAR 0 16
85035: PUSH
85036: LD_VAR 0 7
85040: ARRAY
85041: IFFALSE 85226
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
85043: LD_VAR 0 4
85047: PUSH
85048: LD_VAR 0 7
85052: ARRAY
85053: PPUSH
85054: LD_VAR 0 16
85058: PUSH
85059: LD_VAR 0 7
85063: ARRAY
85064: PUSH
85065: LD_INT 1
85067: ARRAY
85068: PUSH
85069: LD_INT 1
85071: ARRAY
85072: PPUSH
85073: LD_VAR 0 16
85077: PUSH
85078: LD_VAR 0 7
85082: ARRAY
85083: PUSH
85084: LD_INT 1
85086: ARRAY
85087: PUSH
85088: LD_INT 2
85090: ARRAY
85091: PPUSH
85092: CALL_OW 297
85096: PUSH
85097: LD_INT 6
85099: GREATER
85100: IFFALSE 85175
// begin if not HasTask ( group [ i ] ) then
85102: LD_VAR 0 4
85106: PUSH
85107: LD_VAR 0 7
85111: ARRAY
85112: PPUSH
85113: CALL_OW 314
85117: NOT
85118: IFFALSE 85173
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
85120: LD_VAR 0 4
85124: PUSH
85125: LD_VAR 0 7
85129: ARRAY
85130: PPUSH
85131: LD_VAR 0 16
85135: PUSH
85136: LD_VAR 0 7
85140: ARRAY
85141: PUSH
85142: LD_INT 1
85144: ARRAY
85145: PUSH
85146: LD_INT 1
85148: ARRAY
85149: PPUSH
85150: LD_VAR 0 16
85154: PUSH
85155: LD_VAR 0 7
85159: ARRAY
85160: PUSH
85161: LD_INT 1
85163: ARRAY
85164: PUSH
85165: LD_INT 2
85167: ARRAY
85168: PPUSH
85169: CALL_OW 114
// end else
85173: GO 85226
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
85175: LD_ADDR_VAR 0 15
85179: PUSH
85180: LD_VAR 0 16
85184: PUSH
85185: LD_VAR 0 7
85189: ARRAY
85190: PPUSH
85191: LD_INT 1
85193: PPUSH
85194: CALL_OW 3
85198: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
85199: LD_ADDR_VAR 0 16
85203: PUSH
85204: LD_VAR 0 16
85208: PPUSH
85209: LD_VAR 0 7
85213: PPUSH
85214: LD_VAR 0 15
85218: PPUSH
85219: CALL_OW 1
85223: ST_TO_ADDR
// continue ;
85224: GO 83769
// end ; end ; end else
85226: GO 87890
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
85228: LD_ADDR_VAR 0 14
85232: PUSH
85233: LD_INT 81
85235: PUSH
85236: LD_VAR 0 4
85240: PUSH
85241: LD_VAR 0 7
85245: ARRAY
85246: PPUSH
85247: CALL_OW 255
85251: PUSH
85252: EMPTY
85253: LIST
85254: LIST
85255: PPUSH
85256: CALL_OW 69
85260: ST_TO_ADDR
// if not tmp then
85261: LD_VAR 0 14
85265: NOT
85266: IFFALSE 85270
// continue ;
85268: GO 83769
// if f_ignore_area then
85270: LD_VAR 0 17
85274: IFFALSE 85362
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
85276: LD_ADDR_VAR 0 15
85280: PUSH
85281: LD_VAR 0 14
85285: PPUSH
85286: LD_INT 3
85288: PUSH
85289: LD_INT 92
85291: PUSH
85292: LD_VAR 0 17
85296: PUSH
85297: LD_INT 1
85299: ARRAY
85300: PUSH
85301: LD_VAR 0 17
85305: PUSH
85306: LD_INT 2
85308: ARRAY
85309: PUSH
85310: LD_VAR 0 17
85314: PUSH
85315: LD_INT 3
85317: ARRAY
85318: PUSH
85319: EMPTY
85320: LIST
85321: LIST
85322: LIST
85323: LIST
85324: PUSH
85325: EMPTY
85326: LIST
85327: LIST
85328: PPUSH
85329: CALL_OW 72
85333: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
85334: LD_VAR 0 14
85338: PUSH
85339: LD_VAR 0 15
85343: DIFF
85344: IFFALSE 85362
// tmp := tmp diff tmp2 ;
85346: LD_ADDR_VAR 0 14
85350: PUSH
85351: LD_VAR 0 14
85355: PUSH
85356: LD_VAR 0 15
85360: DIFF
85361: ST_TO_ADDR
// end ; if not f_murder then
85362: LD_VAR 0 20
85366: NOT
85367: IFFALSE 85425
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
85369: LD_ADDR_VAR 0 15
85373: PUSH
85374: LD_VAR 0 14
85378: PPUSH
85379: LD_INT 3
85381: PUSH
85382: LD_INT 50
85384: PUSH
85385: EMPTY
85386: LIST
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: PPUSH
85392: CALL_OW 72
85396: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
85397: LD_VAR 0 14
85401: PUSH
85402: LD_VAR 0 15
85406: DIFF
85407: IFFALSE 85425
// tmp := tmp diff tmp2 ;
85409: LD_ADDR_VAR 0 14
85413: PUSH
85414: LD_VAR 0 14
85418: PUSH
85419: LD_VAR 0 15
85423: DIFF
85424: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
85425: LD_ADDR_VAR 0 14
85429: PUSH
85430: LD_VAR 0 4
85434: PUSH
85435: LD_VAR 0 7
85439: ARRAY
85440: PPUSH
85441: LD_VAR 0 14
85445: PPUSH
85446: LD_INT 1
85448: PPUSH
85449: LD_INT 1
85451: PPUSH
85452: CALL 55213 0 4
85456: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
85457: LD_VAR 0 4
85461: PUSH
85462: LD_VAR 0 7
85466: ARRAY
85467: PPUSH
85468: CALL_OW 257
85472: PUSH
85473: LD_INT 1
85475: EQUAL
85476: IFFALSE 85924
// begin if WantPlant ( group [ i ] ) then
85478: LD_VAR 0 4
85482: PUSH
85483: LD_VAR 0 7
85487: ARRAY
85488: PPUSH
85489: CALL 54714 0 1
85493: IFFALSE 85497
// continue ;
85495: GO 83769
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
85497: LD_VAR 0 18
85501: PUSH
85502: LD_VAR 0 4
85506: PUSH
85507: LD_VAR 0 7
85511: ARRAY
85512: PPUSH
85513: CALL_OW 310
85517: NOT
85518: AND
85519: PUSH
85520: LD_VAR 0 14
85524: PUSH
85525: LD_INT 1
85527: ARRAY
85528: PUSH
85529: LD_VAR 0 14
85533: PPUSH
85534: LD_INT 21
85536: PUSH
85537: LD_INT 2
85539: PUSH
85540: EMPTY
85541: LIST
85542: LIST
85543: PUSH
85544: LD_INT 58
85546: PUSH
85547: EMPTY
85548: LIST
85549: PUSH
85550: EMPTY
85551: LIST
85552: LIST
85553: PPUSH
85554: CALL_OW 72
85558: IN
85559: AND
85560: IFFALSE 85596
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
85562: LD_VAR 0 4
85566: PUSH
85567: LD_VAR 0 7
85571: ARRAY
85572: PPUSH
85573: LD_VAR 0 14
85577: PUSH
85578: LD_INT 1
85580: ARRAY
85581: PPUSH
85582: CALL_OW 120
// attacking := true ;
85586: LD_ADDR_VAR 0 29
85590: PUSH
85591: LD_INT 1
85593: ST_TO_ADDR
// continue ;
85594: GO 83769
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
85596: LD_VAR 0 26
85600: PUSH
85601: LD_VAR 0 4
85605: PUSH
85606: LD_VAR 0 7
85610: ARRAY
85611: PPUSH
85612: CALL_OW 257
85616: PUSH
85617: LD_INT 1
85619: EQUAL
85620: AND
85621: PUSH
85622: LD_VAR 0 4
85626: PUSH
85627: LD_VAR 0 7
85631: ARRAY
85632: PPUSH
85633: CALL_OW 256
85637: PUSH
85638: LD_INT 800
85640: LESS
85641: AND
85642: PUSH
85643: LD_VAR 0 4
85647: PUSH
85648: LD_VAR 0 7
85652: ARRAY
85653: PPUSH
85654: CALL_OW 318
85658: NOT
85659: AND
85660: IFFALSE 85677
// ComCrawl ( group [ i ] ) ;
85662: LD_VAR 0 4
85666: PUSH
85667: LD_VAR 0 7
85671: ARRAY
85672: PPUSH
85673: CALL_OW 137
// if f_mines then
85677: LD_VAR 0 21
85681: IFFALSE 85924
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
85683: LD_VAR 0 14
85687: PUSH
85688: LD_INT 1
85690: ARRAY
85691: PPUSH
85692: CALL_OW 247
85696: PUSH
85697: LD_INT 3
85699: EQUAL
85700: PUSH
85701: LD_VAR 0 14
85705: PUSH
85706: LD_INT 1
85708: ARRAY
85709: PUSH
85710: LD_VAR 0 27
85714: IN
85715: NOT
85716: AND
85717: IFFALSE 85924
// begin x := GetX ( tmp [ 1 ] ) ;
85719: LD_ADDR_VAR 0 10
85723: PUSH
85724: LD_VAR 0 14
85728: PUSH
85729: LD_INT 1
85731: ARRAY
85732: PPUSH
85733: CALL_OW 250
85737: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
85738: LD_ADDR_VAR 0 11
85742: PUSH
85743: LD_VAR 0 14
85747: PUSH
85748: LD_INT 1
85750: ARRAY
85751: PPUSH
85752: CALL_OW 251
85756: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
85757: LD_ADDR_VAR 0 12
85761: PUSH
85762: LD_VAR 0 4
85766: PUSH
85767: LD_VAR 0 7
85771: ARRAY
85772: PPUSH
85773: CALL 81655 0 1
85777: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
85778: LD_VAR 0 4
85782: PUSH
85783: LD_VAR 0 7
85787: ARRAY
85788: PPUSH
85789: LD_VAR 0 10
85793: PPUSH
85794: LD_VAR 0 11
85798: PPUSH
85799: LD_VAR 0 14
85803: PUSH
85804: LD_INT 1
85806: ARRAY
85807: PPUSH
85808: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
85812: LD_VAR 0 4
85816: PUSH
85817: LD_VAR 0 7
85821: ARRAY
85822: PPUSH
85823: LD_VAR 0 10
85827: PPUSH
85828: LD_VAR 0 12
85832: PPUSH
85833: LD_INT 7
85835: PPUSH
85836: CALL_OW 272
85840: PPUSH
85841: LD_VAR 0 11
85845: PPUSH
85846: LD_VAR 0 12
85850: PPUSH
85851: LD_INT 7
85853: PPUSH
85854: CALL_OW 273
85858: PPUSH
85859: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
85863: LD_VAR 0 4
85867: PUSH
85868: LD_VAR 0 7
85872: ARRAY
85873: PPUSH
85874: LD_INT 71
85876: PPUSH
85877: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
85881: LD_ADDR_VAR 0 27
85885: PUSH
85886: LD_VAR 0 27
85890: PPUSH
85891: LD_VAR 0 27
85895: PUSH
85896: LD_INT 1
85898: PLUS
85899: PPUSH
85900: LD_VAR 0 14
85904: PUSH
85905: LD_INT 1
85907: ARRAY
85908: PPUSH
85909: CALL_OW 1
85913: ST_TO_ADDR
// attacking := true ;
85914: LD_ADDR_VAR 0 29
85918: PUSH
85919: LD_INT 1
85921: ST_TO_ADDR
// continue ;
85922: GO 83769
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
85924: LD_VAR 0 4
85928: PUSH
85929: LD_VAR 0 7
85933: ARRAY
85934: PPUSH
85935: CALL_OW 257
85939: PUSH
85940: LD_INT 17
85942: EQUAL
85943: PUSH
85944: LD_VAR 0 4
85948: PUSH
85949: LD_VAR 0 7
85953: ARRAY
85954: PPUSH
85955: CALL_OW 110
85959: PUSH
85960: LD_INT 71
85962: EQUAL
85963: NOT
85964: AND
85965: IFFALSE 86111
// begin attacking := false ;
85967: LD_ADDR_VAR 0 29
85971: PUSH
85972: LD_INT 0
85974: ST_TO_ADDR
// k := 5 ;
85975: LD_ADDR_VAR 0 9
85979: PUSH
85980: LD_INT 5
85982: ST_TO_ADDR
// if tmp < k then
85983: LD_VAR 0 14
85987: PUSH
85988: LD_VAR 0 9
85992: LESS
85993: IFFALSE 86005
// k := tmp ;
85995: LD_ADDR_VAR 0 9
85999: PUSH
86000: LD_VAR 0 14
86004: ST_TO_ADDR
// for j = 1 to k do
86005: LD_ADDR_VAR 0 8
86009: PUSH
86010: DOUBLE
86011: LD_INT 1
86013: DEC
86014: ST_TO_ADDR
86015: LD_VAR 0 9
86019: PUSH
86020: FOR_TO
86021: IFFALSE 86109
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
86023: LD_VAR 0 14
86027: PUSH
86028: LD_VAR 0 8
86032: ARRAY
86033: PUSH
86034: LD_VAR 0 14
86038: PPUSH
86039: LD_INT 58
86041: PUSH
86042: EMPTY
86043: LIST
86044: PPUSH
86045: CALL_OW 72
86049: IN
86050: NOT
86051: IFFALSE 86107
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86053: LD_VAR 0 4
86057: PUSH
86058: LD_VAR 0 7
86062: ARRAY
86063: PPUSH
86064: LD_VAR 0 14
86068: PUSH
86069: LD_VAR 0 8
86073: ARRAY
86074: PPUSH
86075: CALL_OW 115
// attacking := true ;
86079: LD_ADDR_VAR 0 29
86083: PUSH
86084: LD_INT 1
86086: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
86087: LD_VAR 0 4
86091: PUSH
86092: LD_VAR 0 7
86096: ARRAY
86097: PPUSH
86098: LD_INT 71
86100: PPUSH
86101: CALL_OW 109
// continue ;
86105: GO 86020
// end ; end ;
86107: GO 86020
86109: POP
86110: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
86111: LD_VAR 0 4
86115: PUSH
86116: LD_VAR 0 7
86120: ARRAY
86121: PPUSH
86122: CALL_OW 257
86126: PUSH
86127: LD_INT 8
86129: EQUAL
86130: PUSH
86131: LD_VAR 0 4
86135: PUSH
86136: LD_VAR 0 7
86140: ARRAY
86141: PPUSH
86142: CALL_OW 264
86146: PUSH
86147: LD_INT 28
86149: PUSH
86150: LD_INT 45
86152: PUSH
86153: LD_INT 7
86155: PUSH
86156: LD_INT 47
86158: PUSH
86159: EMPTY
86160: LIST
86161: LIST
86162: LIST
86163: LIST
86164: IN
86165: OR
86166: IFFALSE 86422
// begin attacking := false ;
86168: LD_ADDR_VAR 0 29
86172: PUSH
86173: LD_INT 0
86175: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
86176: LD_VAR 0 14
86180: PUSH
86181: LD_INT 1
86183: ARRAY
86184: PPUSH
86185: CALL_OW 266
86189: PUSH
86190: LD_INT 32
86192: PUSH
86193: LD_INT 31
86195: PUSH
86196: LD_INT 33
86198: PUSH
86199: LD_INT 4
86201: PUSH
86202: LD_INT 5
86204: PUSH
86205: EMPTY
86206: LIST
86207: LIST
86208: LIST
86209: LIST
86210: LIST
86211: IN
86212: IFFALSE 86398
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
86214: LD_ADDR_VAR 0 9
86218: PUSH
86219: LD_VAR 0 14
86223: PUSH
86224: LD_INT 1
86226: ARRAY
86227: PPUSH
86228: CALL_OW 266
86232: PPUSH
86233: LD_VAR 0 14
86237: PUSH
86238: LD_INT 1
86240: ARRAY
86241: PPUSH
86242: CALL_OW 250
86246: PPUSH
86247: LD_VAR 0 14
86251: PUSH
86252: LD_INT 1
86254: ARRAY
86255: PPUSH
86256: CALL_OW 251
86260: PPUSH
86261: LD_VAR 0 14
86265: PUSH
86266: LD_INT 1
86268: ARRAY
86269: PPUSH
86270: CALL_OW 254
86274: PPUSH
86275: LD_VAR 0 14
86279: PUSH
86280: LD_INT 1
86282: ARRAY
86283: PPUSH
86284: CALL_OW 248
86288: PPUSH
86289: LD_INT 0
86291: PPUSH
86292: CALL 63025 0 6
86296: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
86297: LD_ADDR_VAR 0 8
86301: PUSH
86302: LD_VAR 0 4
86306: PUSH
86307: LD_VAR 0 7
86311: ARRAY
86312: PPUSH
86313: LD_VAR 0 9
86317: PPUSH
86318: CALL 81695 0 2
86322: ST_TO_ADDR
// if j then
86323: LD_VAR 0 8
86327: IFFALSE 86396
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
86329: LD_VAR 0 8
86333: PUSH
86334: LD_INT 1
86336: ARRAY
86337: PPUSH
86338: LD_VAR 0 8
86342: PUSH
86343: LD_INT 2
86345: ARRAY
86346: PPUSH
86347: CALL_OW 488
86351: IFFALSE 86396
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
86353: LD_VAR 0 4
86357: PUSH
86358: LD_VAR 0 7
86362: ARRAY
86363: PPUSH
86364: LD_VAR 0 8
86368: PUSH
86369: LD_INT 1
86371: ARRAY
86372: PPUSH
86373: LD_VAR 0 8
86377: PUSH
86378: LD_INT 2
86380: ARRAY
86381: PPUSH
86382: CALL_OW 116
// attacking := true ;
86386: LD_ADDR_VAR 0 29
86390: PUSH
86391: LD_INT 1
86393: ST_TO_ADDR
// continue ;
86394: GO 83769
// end ; end else
86396: GO 86422
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86398: LD_VAR 0 4
86402: PUSH
86403: LD_VAR 0 7
86407: ARRAY
86408: PPUSH
86409: LD_VAR 0 14
86413: PUSH
86414: LD_INT 1
86416: ARRAY
86417: PPUSH
86418: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
86422: LD_VAR 0 4
86426: PUSH
86427: LD_VAR 0 7
86431: ARRAY
86432: PPUSH
86433: CALL_OW 265
86437: PUSH
86438: LD_INT 11
86440: EQUAL
86441: IFFALSE 86719
// begin k := 10 ;
86443: LD_ADDR_VAR 0 9
86447: PUSH
86448: LD_INT 10
86450: ST_TO_ADDR
// x := 0 ;
86451: LD_ADDR_VAR 0 10
86455: PUSH
86456: LD_INT 0
86458: ST_TO_ADDR
// if tmp < k then
86459: LD_VAR 0 14
86463: PUSH
86464: LD_VAR 0 9
86468: LESS
86469: IFFALSE 86481
// k := tmp ;
86471: LD_ADDR_VAR 0 9
86475: PUSH
86476: LD_VAR 0 14
86480: ST_TO_ADDR
// for j = k downto 1 do
86481: LD_ADDR_VAR 0 8
86485: PUSH
86486: DOUBLE
86487: LD_VAR 0 9
86491: INC
86492: ST_TO_ADDR
86493: LD_INT 1
86495: PUSH
86496: FOR_DOWNTO
86497: IFFALSE 86572
// begin if GetType ( tmp [ j ] ) = unit_human then
86499: LD_VAR 0 14
86503: PUSH
86504: LD_VAR 0 8
86508: ARRAY
86509: PPUSH
86510: CALL_OW 247
86514: PUSH
86515: LD_INT 1
86517: EQUAL
86518: IFFALSE 86570
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
86520: LD_VAR 0 4
86524: PUSH
86525: LD_VAR 0 7
86529: ARRAY
86530: PPUSH
86531: LD_VAR 0 14
86535: PUSH
86536: LD_VAR 0 8
86540: ARRAY
86541: PPUSH
86542: CALL 81966 0 2
// x := tmp [ j ] ;
86546: LD_ADDR_VAR 0 10
86550: PUSH
86551: LD_VAR 0 14
86555: PUSH
86556: LD_VAR 0 8
86560: ARRAY
86561: ST_TO_ADDR
// attacking := true ;
86562: LD_ADDR_VAR 0 29
86566: PUSH
86567: LD_INT 1
86569: ST_TO_ADDR
// end ; end ;
86570: GO 86496
86572: POP
86573: POP
// if not x then
86574: LD_VAR 0 10
86578: NOT
86579: IFFALSE 86719
// begin attacking := true ;
86581: LD_ADDR_VAR 0 29
86585: PUSH
86586: LD_INT 1
86588: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
86589: LD_VAR 0 4
86593: PUSH
86594: LD_VAR 0 7
86598: ARRAY
86599: PPUSH
86600: CALL_OW 250
86604: PPUSH
86605: LD_VAR 0 4
86609: PUSH
86610: LD_VAR 0 7
86614: ARRAY
86615: PPUSH
86616: CALL_OW 251
86620: PPUSH
86621: CALL_OW 546
86625: PUSH
86626: LD_INT 2
86628: ARRAY
86629: PUSH
86630: LD_VAR 0 14
86634: PUSH
86635: LD_INT 1
86637: ARRAY
86638: PPUSH
86639: CALL_OW 250
86643: PPUSH
86644: LD_VAR 0 14
86648: PUSH
86649: LD_INT 1
86651: ARRAY
86652: PPUSH
86653: CALL_OW 251
86657: PPUSH
86658: CALL_OW 546
86662: PUSH
86663: LD_INT 2
86665: ARRAY
86666: EQUAL
86667: IFFALSE 86695
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
86669: LD_VAR 0 4
86673: PUSH
86674: LD_VAR 0 7
86678: ARRAY
86679: PPUSH
86680: LD_VAR 0 14
86684: PUSH
86685: LD_INT 1
86687: ARRAY
86688: PPUSH
86689: CALL 81966 0 2
86693: GO 86719
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86695: LD_VAR 0 4
86699: PUSH
86700: LD_VAR 0 7
86704: ARRAY
86705: PPUSH
86706: LD_VAR 0 14
86710: PUSH
86711: LD_INT 1
86713: ARRAY
86714: PPUSH
86715: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
86719: LD_VAR 0 4
86723: PUSH
86724: LD_VAR 0 7
86728: ARRAY
86729: PPUSH
86730: CALL_OW 264
86734: PUSH
86735: LD_INT 29
86737: EQUAL
86738: IFFALSE 87104
// begin if WantsToAttack ( group [ i ] ) in bombed then
86740: LD_VAR 0 4
86744: PUSH
86745: LD_VAR 0 7
86749: ARRAY
86750: PPUSH
86751: CALL_OW 319
86755: PUSH
86756: LD_VAR 0 28
86760: IN
86761: IFFALSE 86765
// continue ;
86763: GO 83769
// k := 8 ;
86765: LD_ADDR_VAR 0 9
86769: PUSH
86770: LD_INT 8
86772: ST_TO_ADDR
// x := 0 ;
86773: LD_ADDR_VAR 0 10
86777: PUSH
86778: LD_INT 0
86780: ST_TO_ADDR
// if tmp < k then
86781: LD_VAR 0 14
86785: PUSH
86786: LD_VAR 0 9
86790: LESS
86791: IFFALSE 86803
// k := tmp ;
86793: LD_ADDR_VAR 0 9
86797: PUSH
86798: LD_VAR 0 14
86802: ST_TO_ADDR
// for j = 1 to k do
86803: LD_ADDR_VAR 0 8
86807: PUSH
86808: DOUBLE
86809: LD_INT 1
86811: DEC
86812: ST_TO_ADDR
86813: LD_VAR 0 9
86817: PUSH
86818: FOR_TO
86819: IFFALSE 86951
// begin if GetType ( tmp [ j ] ) = unit_building then
86821: LD_VAR 0 14
86825: PUSH
86826: LD_VAR 0 8
86830: ARRAY
86831: PPUSH
86832: CALL_OW 247
86836: PUSH
86837: LD_INT 3
86839: EQUAL
86840: IFFALSE 86949
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
86842: LD_VAR 0 14
86846: PUSH
86847: LD_VAR 0 8
86851: ARRAY
86852: PUSH
86853: LD_VAR 0 28
86857: IN
86858: NOT
86859: PUSH
86860: LD_VAR 0 14
86864: PUSH
86865: LD_VAR 0 8
86869: ARRAY
86870: PPUSH
86871: CALL_OW 313
86875: AND
86876: IFFALSE 86949
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86878: LD_VAR 0 4
86882: PUSH
86883: LD_VAR 0 7
86887: ARRAY
86888: PPUSH
86889: LD_VAR 0 14
86893: PUSH
86894: LD_VAR 0 8
86898: ARRAY
86899: PPUSH
86900: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
86904: LD_ADDR_VAR 0 28
86908: PUSH
86909: LD_VAR 0 28
86913: PPUSH
86914: LD_VAR 0 28
86918: PUSH
86919: LD_INT 1
86921: PLUS
86922: PPUSH
86923: LD_VAR 0 14
86927: PUSH
86928: LD_VAR 0 8
86932: ARRAY
86933: PPUSH
86934: CALL_OW 1
86938: ST_TO_ADDR
// attacking := true ;
86939: LD_ADDR_VAR 0 29
86943: PUSH
86944: LD_INT 1
86946: ST_TO_ADDR
// break ;
86947: GO 86951
// end ; end ;
86949: GO 86818
86951: POP
86952: POP
// if not attacking and f_attack_depot then
86953: LD_VAR 0 29
86957: NOT
86958: PUSH
86959: LD_VAR 0 25
86963: AND
86964: IFFALSE 87059
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
86966: LD_ADDR_VAR 0 13
86970: PUSH
86971: LD_VAR 0 14
86975: PPUSH
86976: LD_INT 2
86978: PUSH
86979: LD_INT 30
86981: PUSH
86982: LD_INT 0
86984: PUSH
86985: EMPTY
86986: LIST
86987: LIST
86988: PUSH
86989: LD_INT 30
86991: PUSH
86992: LD_INT 1
86994: PUSH
86995: EMPTY
86996: LIST
86997: LIST
86998: PUSH
86999: EMPTY
87000: LIST
87001: LIST
87002: LIST
87003: PPUSH
87004: CALL_OW 72
87008: ST_TO_ADDR
// if z then
87009: LD_VAR 0 13
87013: IFFALSE 87059
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
87015: LD_VAR 0 4
87019: PUSH
87020: LD_VAR 0 7
87024: ARRAY
87025: PPUSH
87026: LD_VAR 0 13
87030: PPUSH
87031: LD_VAR 0 4
87035: PUSH
87036: LD_VAR 0 7
87040: ARRAY
87041: PPUSH
87042: CALL_OW 74
87046: PPUSH
87047: CALL_OW 115
// attacking := true ;
87051: LD_ADDR_VAR 0 29
87055: PUSH
87056: LD_INT 1
87058: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
87059: LD_VAR 0 4
87063: PUSH
87064: LD_VAR 0 7
87068: ARRAY
87069: PPUSH
87070: CALL_OW 256
87074: PUSH
87075: LD_INT 500
87077: LESS
87078: IFFALSE 87104
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
87080: LD_VAR 0 4
87084: PUSH
87085: LD_VAR 0 7
87089: ARRAY
87090: PPUSH
87091: LD_VAR 0 14
87095: PUSH
87096: LD_INT 1
87098: ARRAY
87099: PPUSH
87100: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
87104: LD_VAR 0 4
87108: PUSH
87109: LD_VAR 0 7
87113: ARRAY
87114: PPUSH
87115: CALL_OW 264
87119: PUSH
87120: LD_INT 49
87122: EQUAL
87123: IFFALSE 87244
// begin if not HasTask ( group [ i ] ) then
87125: LD_VAR 0 4
87129: PUSH
87130: LD_VAR 0 7
87134: ARRAY
87135: PPUSH
87136: CALL_OW 314
87140: NOT
87141: IFFALSE 87244
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
87143: LD_ADDR_VAR 0 9
87147: PUSH
87148: LD_INT 81
87150: PUSH
87151: LD_VAR 0 4
87155: PUSH
87156: LD_VAR 0 7
87160: ARRAY
87161: PPUSH
87162: CALL_OW 255
87166: PUSH
87167: EMPTY
87168: LIST
87169: LIST
87170: PPUSH
87171: CALL_OW 69
87175: PPUSH
87176: LD_VAR 0 4
87180: PUSH
87181: LD_VAR 0 7
87185: ARRAY
87186: PPUSH
87187: CALL_OW 74
87191: ST_TO_ADDR
// if k then
87192: LD_VAR 0 9
87196: IFFALSE 87244
// if GetDistUnits ( group [ i ] , k ) > 10 then
87198: LD_VAR 0 4
87202: PUSH
87203: LD_VAR 0 7
87207: ARRAY
87208: PPUSH
87209: LD_VAR 0 9
87213: PPUSH
87214: CALL_OW 296
87218: PUSH
87219: LD_INT 10
87221: GREATER
87222: IFFALSE 87244
// ComMoveUnit ( group [ i ] , k ) ;
87224: LD_VAR 0 4
87228: PUSH
87229: LD_VAR 0 7
87233: ARRAY
87234: PPUSH
87235: LD_VAR 0 9
87239: PPUSH
87240: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87244: LD_VAR 0 4
87248: PUSH
87249: LD_VAR 0 7
87253: ARRAY
87254: PPUSH
87255: CALL_OW 256
87259: PUSH
87260: LD_INT 250
87262: LESS
87263: PUSH
87264: LD_VAR 0 4
87268: PUSH
87269: LD_VAR 0 7
87273: ARRAY
87274: PUSH
87275: LD_INT 21
87277: PUSH
87278: LD_INT 2
87280: PUSH
87281: EMPTY
87282: LIST
87283: LIST
87284: PUSH
87285: LD_INT 23
87287: PUSH
87288: LD_INT 2
87290: PUSH
87291: EMPTY
87292: LIST
87293: LIST
87294: PUSH
87295: EMPTY
87296: LIST
87297: LIST
87298: PPUSH
87299: CALL_OW 69
87303: IN
87304: AND
87305: IFFALSE 87430
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
87307: LD_ADDR_VAR 0 9
87311: PUSH
87312: LD_OWVAR 3
87316: PUSH
87317: LD_VAR 0 4
87321: PUSH
87322: LD_VAR 0 7
87326: ARRAY
87327: DIFF
87328: PPUSH
87329: LD_VAR 0 4
87333: PUSH
87334: LD_VAR 0 7
87338: ARRAY
87339: PPUSH
87340: CALL_OW 74
87344: ST_TO_ADDR
// if not k then
87345: LD_VAR 0 9
87349: NOT
87350: IFFALSE 87354
// continue ;
87352: GO 83769
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
87354: LD_VAR 0 9
87358: PUSH
87359: LD_INT 81
87361: PUSH
87362: LD_VAR 0 4
87366: PUSH
87367: LD_VAR 0 7
87371: ARRAY
87372: PPUSH
87373: CALL_OW 255
87377: PUSH
87378: EMPTY
87379: LIST
87380: LIST
87381: PPUSH
87382: CALL_OW 69
87386: IN
87387: PUSH
87388: LD_VAR 0 9
87392: PPUSH
87393: LD_VAR 0 4
87397: PUSH
87398: LD_VAR 0 7
87402: ARRAY
87403: PPUSH
87404: CALL_OW 296
87408: PUSH
87409: LD_INT 5
87411: LESS
87412: AND
87413: IFFALSE 87430
// ComAutodestruct ( group [ i ] ) ;
87415: LD_VAR 0 4
87419: PUSH
87420: LD_VAR 0 7
87424: ARRAY
87425: PPUSH
87426: CALL 81864 0 1
// end ; if f_attack_depot then
87430: LD_VAR 0 25
87434: IFFALSE 87546
// begin k := 6 ;
87436: LD_ADDR_VAR 0 9
87440: PUSH
87441: LD_INT 6
87443: ST_TO_ADDR
// if tmp < k then
87444: LD_VAR 0 14
87448: PUSH
87449: LD_VAR 0 9
87453: LESS
87454: IFFALSE 87466
// k := tmp ;
87456: LD_ADDR_VAR 0 9
87460: PUSH
87461: LD_VAR 0 14
87465: ST_TO_ADDR
// for j = 1 to k do
87466: LD_ADDR_VAR 0 8
87470: PUSH
87471: DOUBLE
87472: LD_INT 1
87474: DEC
87475: ST_TO_ADDR
87476: LD_VAR 0 9
87480: PUSH
87481: FOR_TO
87482: IFFALSE 87544
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
87484: LD_VAR 0 8
87488: PPUSH
87489: CALL_OW 266
87493: PUSH
87494: LD_INT 0
87496: PUSH
87497: LD_INT 1
87499: PUSH
87500: EMPTY
87501: LIST
87502: LIST
87503: IN
87504: IFFALSE 87542
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
87506: LD_VAR 0 4
87510: PUSH
87511: LD_VAR 0 7
87515: ARRAY
87516: PPUSH
87517: LD_VAR 0 14
87521: PUSH
87522: LD_VAR 0 8
87526: ARRAY
87527: PPUSH
87528: CALL_OW 115
// attacking := true ;
87532: LD_ADDR_VAR 0 29
87536: PUSH
87537: LD_INT 1
87539: ST_TO_ADDR
// break ;
87540: GO 87544
// end ;
87542: GO 87481
87544: POP
87545: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
87546: LD_VAR 0 4
87550: PUSH
87551: LD_VAR 0 7
87555: ARRAY
87556: PPUSH
87557: CALL_OW 302
87561: PUSH
87562: LD_VAR 0 29
87566: NOT
87567: AND
87568: IFFALSE 87890
// begin if GetTag ( group [ i ] ) = 71 then
87570: LD_VAR 0 4
87574: PUSH
87575: LD_VAR 0 7
87579: ARRAY
87580: PPUSH
87581: CALL_OW 110
87585: PUSH
87586: LD_INT 71
87588: EQUAL
87589: IFFALSE 87630
// begin if HasTask ( group [ i ] ) then
87591: LD_VAR 0 4
87595: PUSH
87596: LD_VAR 0 7
87600: ARRAY
87601: PPUSH
87602: CALL_OW 314
87606: IFFALSE 87612
// continue else
87608: GO 83769
87610: GO 87630
// SetTag ( group [ i ] , 0 ) ;
87612: LD_VAR 0 4
87616: PUSH
87617: LD_VAR 0 7
87621: ARRAY
87622: PPUSH
87623: LD_INT 0
87625: PPUSH
87626: CALL_OW 109
// end ; k := 8 ;
87630: LD_ADDR_VAR 0 9
87634: PUSH
87635: LD_INT 8
87637: ST_TO_ADDR
// x := 0 ;
87638: LD_ADDR_VAR 0 10
87642: PUSH
87643: LD_INT 0
87645: ST_TO_ADDR
// if tmp < k then
87646: LD_VAR 0 14
87650: PUSH
87651: LD_VAR 0 9
87655: LESS
87656: IFFALSE 87668
// k := tmp ;
87658: LD_ADDR_VAR 0 9
87662: PUSH
87663: LD_VAR 0 14
87667: ST_TO_ADDR
// for j = 1 to k do
87668: LD_ADDR_VAR 0 8
87672: PUSH
87673: DOUBLE
87674: LD_INT 1
87676: DEC
87677: ST_TO_ADDR
87678: LD_VAR 0 9
87682: PUSH
87683: FOR_TO
87684: IFFALSE 87782
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
87686: LD_VAR 0 14
87690: PUSH
87691: LD_VAR 0 8
87695: ARRAY
87696: PPUSH
87697: CALL_OW 247
87701: PUSH
87702: LD_INT 1
87704: EQUAL
87705: PUSH
87706: LD_VAR 0 14
87710: PUSH
87711: LD_VAR 0 8
87715: ARRAY
87716: PPUSH
87717: CALL_OW 256
87721: PUSH
87722: LD_INT 250
87724: LESS
87725: PUSH
87726: LD_VAR 0 20
87730: AND
87731: PUSH
87732: LD_VAR 0 20
87736: NOT
87737: PUSH
87738: LD_VAR 0 14
87742: PUSH
87743: LD_VAR 0 8
87747: ARRAY
87748: PPUSH
87749: CALL_OW 256
87753: PUSH
87754: LD_INT 250
87756: GREATEREQUAL
87757: AND
87758: OR
87759: AND
87760: IFFALSE 87780
// begin x := tmp [ j ] ;
87762: LD_ADDR_VAR 0 10
87766: PUSH
87767: LD_VAR 0 14
87771: PUSH
87772: LD_VAR 0 8
87776: ARRAY
87777: ST_TO_ADDR
// break ;
87778: GO 87782
// end ;
87780: GO 87683
87782: POP
87783: POP
// if x then
87784: LD_VAR 0 10
87788: IFFALSE 87812
// ComAttackUnit ( group [ i ] , x ) else
87790: LD_VAR 0 4
87794: PUSH
87795: LD_VAR 0 7
87799: ARRAY
87800: PPUSH
87801: LD_VAR 0 10
87805: PPUSH
87806: CALL_OW 115
87810: GO 87836
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
87812: LD_VAR 0 4
87816: PUSH
87817: LD_VAR 0 7
87821: ARRAY
87822: PPUSH
87823: LD_VAR 0 14
87827: PUSH
87828: LD_INT 1
87830: ARRAY
87831: PPUSH
87832: CALL_OW 115
// if not HasTask ( group [ i ] ) then
87836: LD_VAR 0 4
87840: PUSH
87841: LD_VAR 0 7
87845: ARRAY
87846: PPUSH
87847: CALL_OW 314
87851: NOT
87852: IFFALSE 87890
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
87854: LD_VAR 0 4
87858: PUSH
87859: LD_VAR 0 7
87863: ARRAY
87864: PPUSH
87865: LD_VAR 0 14
87869: PPUSH
87870: LD_VAR 0 4
87874: PUSH
87875: LD_VAR 0 7
87879: ARRAY
87880: PPUSH
87881: CALL_OW 74
87885: PPUSH
87886: CALL_OW 115
// end ; end ; end ;
87890: GO 83769
87892: POP
87893: POP
// wait ( 0 0$2 ) ;
87894: LD_INT 70
87896: PPUSH
87897: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
87901: LD_VAR 0 4
87905: NOT
87906: PUSH
87907: LD_VAR 0 4
87911: PUSH
87912: EMPTY
87913: EQUAL
87914: OR
87915: PUSH
87916: LD_INT 81
87918: PUSH
87919: LD_VAR 0 35
87923: PUSH
87924: EMPTY
87925: LIST
87926: LIST
87927: PPUSH
87928: CALL_OW 69
87932: NOT
87933: OR
87934: IFFALSE 83754
// end ;
87936: LD_VAR 0 2
87940: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
87941: LD_INT 0
87943: PPUSH
87944: PPUSH
87945: PPUSH
87946: PPUSH
// if not base_units then
87947: LD_VAR 0 1
87951: NOT
87952: IFFALSE 87956
// exit ;
87954: GO 88043
// result := false ;
87956: LD_ADDR_VAR 0 2
87960: PUSH
87961: LD_INT 0
87963: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
87964: LD_ADDR_VAR 0 5
87968: PUSH
87969: LD_VAR 0 1
87973: PPUSH
87974: LD_INT 21
87976: PUSH
87977: LD_INT 3
87979: PUSH
87980: EMPTY
87981: LIST
87982: LIST
87983: PPUSH
87984: CALL_OW 72
87988: ST_TO_ADDR
// if not tmp then
87989: LD_VAR 0 5
87993: NOT
87994: IFFALSE 87998
// exit ;
87996: GO 88043
// for i in tmp do
87998: LD_ADDR_VAR 0 3
88002: PUSH
88003: LD_VAR 0 5
88007: PUSH
88008: FOR_IN
88009: IFFALSE 88041
// begin result := EnemyInRange ( i , 22 ) ;
88011: LD_ADDR_VAR 0 2
88015: PUSH
88016: LD_VAR 0 3
88020: PPUSH
88021: LD_INT 22
88023: PPUSH
88024: CALL 81570 0 2
88028: ST_TO_ADDR
// if result then
88029: LD_VAR 0 2
88033: IFFALSE 88039
// exit ;
88035: POP
88036: POP
88037: GO 88043
// end ;
88039: GO 88008
88041: POP
88042: POP
// end ;
88043: LD_VAR 0 2
88047: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
88048: LD_INT 0
88050: PPUSH
88051: PPUSH
// if not units then
88052: LD_VAR 0 1
88056: NOT
88057: IFFALSE 88061
// exit ;
88059: GO 88131
// result := [ ] ;
88061: LD_ADDR_VAR 0 3
88065: PUSH
88066: EMPTY
88067: ST_TO_ADDR
// for i in units do
88068: LD_ADDR_VAR 0 4
88072: PUSH
88073: LD_VAR 0 1
88077: PUSH
88078: FOR_IN
88079: IFFALSE 88129
// if GetTag ( i ) = tag then
88081: LD_VAR 0 4
88085: PPUSH
88086: CALL_OW 110
88090: PUSH
88091: LD_VAR 0 2
88095: EQUAL
88096: IFFALSE 88127
// result := Insert ( result , result + 1 , i ) ;
88098: LD_ADDR_VAR 0 3
88102: PUSH
88103: LD_VAR 0 3
88107: PPUSH
88108: LD_VAR 0 3
88112: PUSH
88113: LD_INT 1
88115: PLUS
88116: PPUSH
88117: LD_VAR 0 4
88121: PPUSH
88122: CALL_OW 2
88126: ST_TO_ADDR
88127: GO 88078
88129: POP
88130: POP
// end ;
88131: LD_VAR 0 3
88135: RET
// export function IsDriver ( un ) ; begin
88136: LD_INT 0
88138: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
88139: LD_ADDR_VAR 0 2
88143: PUSH
88144: LD_VAR 0 1
88148: PUSH
88149: LD_INT 55
88151: PUSH
88152: EMPTY
88153: LIST
88154: PPUSH
88155: CALL_OW 69
88159: IN
88160: ST_TO_ADDR
// end ;
88161: LD_VAR 0 2
88165: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
88166: LD_INT 0
88168: PPUSH
88169: PPUSH
// list := [ ] ;
88170: LD_ADDR_VAR 0 5
88174: PUSH
88175: EMPTY
88176: ST_TO_ADDR
// case d of 0 :
88177: LD_VAR 0 3
88181: PUSH
88182: LD_INT 0
88184: DOUBLE
88185: EQUAL
88186: IFTRUE 88190
88188: GO 88323
88190: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
88191: LD_ADDR_VAR 0 5
88195: PUSH
88196: LD_VAR 0 1
88200: PUSH
88201: LD_INT 4
88203: MINUS
88204: PUSH
88205: LD_VAR 0 2
88209: PUSH
88210: LD_INT 4
88212: MINUS
88213: PUSH
88214: LD_INT 2
88216: PUSH
88217: EMPTY
88218: LIST
88219: LIST
88220: LIST
88221: PUSH
88222: LD_VAR 0 1
88226: PUSH
88227: LD_INT 3
88229: MINUS
88230: PUSH
88231: LD_VAR 0 2
88235: PUSH
88236: LD_INT 1
88238: PUSH
88239: EMPTY
88240: LIST
88241: LIST
88242: LIST
88243: PUSH
88244: LD_VAR 0 1
88248: PUSH
88249: LD_INT 4
88251: PLUS
88252: PUSH
88253: LD_VAR 0 2
88257: PUSH
88258: LD_INT 4
88260: PUSH
88261: EMPTY
88262: LIST
88263: LIST
88264: LIST
88265: PUSH
88266: LD_VAR 0 1
88270: PUSH
88271: LD_INT 3
88273: PLUS
88274: PUSH
88275: LD_VAR 0 2
88279: PUSH
88280: LD_INT 3
88282: PLUS
88283: PUSH
88284: LD_INT 5
88286: PUSH
88287: EMPTY
88288: LIST
88289: LIST
88290: LIST
88291: PUSH
88292: LD_VAR 0 1
88296: PUSH
88297: LD_VAR 0 2
88301: PUSH
88302: LD_INT 4
88304: PLUS
88305: PUSH
88306: LD_INT 0
88308: PUSH
88309: EMPTY
88310: LIST
88311: LIST
88312: LIST
88313: PUSH
88314: EMPTY
88315: LIST
88316: LIST
88317: LIST
88318: LIST
88319: LIST
88320: ST_TO_ADDR
// end ; 1 :
88321: GO 89021
88323: LD_INT 1
88325: DOUBLE
88326: EQUAL
88327: IFTRUE 88331
88329: GO 88464
88331: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
88332: LD_ADDR_VAR 0 5
88336: PUSH
88337: LD_VAR 0 1
88341: PUSH
88342: LD_VAR 0 2
88346: PUSH
88347: LD_INT 4
88349: MINUS
88350: PUSH
88351: LD_INT 3
88353: PUSH
88354: EMPTY
88355: LIST
88356: LIST
88357: LIST
88358: PUSH
88359: LD_VAR 0 1
88363: PUSH
88364: LD_INT 3
88366: MINUS
88367: PUSH
88368: LD_VAR 0 2
88372: PUSH
88373: LD_INT 3
88375: MINUS
88376: PUSH
88377: LD_INT 2
88379: PUSH
88380: EMPTY
88381: LIST
88382: LIST
88383: LIST
88384: PUSH
88385: LD_VAR 0 1
88389: PUSH
88390: LD_INT 4
88392: MINUS
88393: PUSH
88394: LD_VAR 0 2
88398: PUSH
88399: LD_INT 1
88401: PUSH
88402: EMPTY
88403: LIST
88404: LIST
88405: LIST
88406: PUSH
88407: LD_VAR 0 1
88411: PUSH
88412: LD_VAR 0 2
88416: PUSH
88417: LD_INT 3
88419: PLUS
88420: PUSH
88421: LD_INT 0
88423: PUSH
88424: EMPTY
88425: LIST
88426: LIST
88427: LIST
88428: PUSH
88429: LD_VAR 0 1
88433: PUSH
88434: LD_INT 4
88436: PLUS
88437: PUSH
88438: LD_VAR 0 2
88442: PUSH
88443: LD_INT 4
88445: PLUS
88446: PUSH
88447: LD_INT 5
88449: PUSH
88450: EMPTY
88451: LIST
88452: LIST
88453: LIST
88454: PUSH
88455: EMPTY
88456: LIST
88457: LIST
88458: LIST
88459: LIST
88460: LIST
88461: ST_TO_ADDR
// end ; 2 :
88462: GO 89021
88464: LD_INT 2
88466: DOUBLE
88467: EQUAL
88468: IFTRUE 88472
88470: GO 88601
88472: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
88473: LD_ADDR_VAR 0 5
88477: PUSH
88478: LD_VAR 0 1
88482: PUSH
88483: LD_VAR 0 2
88487: PUSH
88488: LD_INT 3
88490: MINUS
88491: PUSH
88492: LD_INT 3
88494: PUSH
88495: EMPTY
88496: LIST
88497: LIST
88498: LIST
88499: PUSH
88500: LD_VAR 0 1
88504: PUSH
88505: LD_INT 4
88507: PLUS
88508: PUSH
88509: LD_VAR 0 2
88513: PUSH
88514: LD_INT 4
88516: PUSH
88517: EMPTY
88518: LIST
88519: LIST
88520: LIST
88521: PUSH
88522: LD_VAR 0 1
88526: PUSH
88527: LD_VAR 0 2
88531: PUSH
88532: LD_INT 4
88534: PLUS
88535: PUSH
88536: LD_INT 0
88538: PUSH
88539: EMPTY
88540: LIST
88541: LIST
88542: LIST
88543: PUSH
88544: LD_VAR 0 1
88548: PUSH
88549: LD_INT 3
88551: MINUS
88552: PUSH
88553: LD_VAR 0 2
88557: PUSH
88558: LD_INT 1
88560: PUSH
88561: EMPTY
88562: LIST
88563: LIST
88564: LIST
88565: PUSH
88566: LD_VAR 0 1
88570: PUSH
88571: LD_INT 4
88573: MINUS
88574: PUSH
88575: LD_VAR 0 2
88579: PUSH
88580: LD_INT 4
88582: MINUS
88583: PUSH
88584: LD_INT 2
88586: PUSH
88587: EMPTY
88588: LIST
88589: LIST
88590: LIST
88591: PUSH
88592: EMPTY
88593: LIST
88594: LIST
88595: LIST
88596: LIST
88597: LIST
88598: ST_TO_ADDR
// end ; 3 :
88599: GO 89021
88601: LD_INT 3
88603: DOUBLE
88604: EQUAL
88605: IFTRUE 88609
88607: GO 88742
88609: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
88610: LD_ADDR_VAR 0 5
88614: PUSH
88615: LD_VAR 0 1
88619: PUSH
88620: LD_INT 3
88622: PLUS
88623: PUSH
88624: LD_VAR 0 2
88628: PUSH
88629: LD_INT 4
88631: PUSH
88632: EMPTY
88633: LIST
88634: LIST
88635: LIST
88636: PUSH
88637: LD_VAR 0 1
88641: PUSH
88642: LD_INT 4
88644: PLUS
88645: PUSH
88646: LD_VAR 0 2
88650: PUSH
88651: LD_INT 4
88653: PLUS
88654: PUSH
88655: LD_INT 5
88657: PUSH
88658: EMPTY
88659: LIST
88660: LIST
88661: LIST
88662: PUSH
88663: LD_VAR 0 1
88667: PUSH
88668: LD_INT 4
88670: MINUS
88671: PUSH
88672: LD_VAR 0 2
88676: PUSH
88677: LD_INT 1
88679: PUSH
88680: EMPTY
88681: LIST
88682: LIST
88683: LIST
88684: PUSH
88685: LD_VAR 0 1
88689: PUSH
88690: LD_VAR 0 2
88694: PUSH
88695: LD_INT 4
88697: MINUS
88698: PUSH
88699: LD_INT 3
88701: PUSH
88702: EMPTY
88703: LIST
88704: LIST
88705: LIST
88706: PUSH
88707: LD_VAR 0 1
88711: PUSH
88712: LD_INT 3
88714: MINUS
88715: PUSH
88716: LD_VAR 0 2
88720: PUSH
88721: LD_INT 3
88723: MINUS
88724: PUSH
88725: LD_INT 2
88727: PUSH
88728: EMPTY
88729: LIST
88730: LIST
88731: LIST
88732: PUSH
88733: EMPTY
88734: LIST
88735: LIST
88736: LIST
88737: LIST
88738: LIST
88739: ST_TO_ADDR
// end ; 4 :
88740: GO 89021
88742: LD_INT 4
88744: DOUBLE
88745: EQUAL
88746: IFTRUE 88750
88748: GO 88883
88750: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
88751: LD_ADDR_VAR 0 5
88755: PUSH
88756: LD_VAR 0 1
88760: PUSH
88761: LD_VAR 0 2
88765: PUSH
88766: LD_INT 4
88768: PLUS
88769: PUSH
88770: LD_INT 0
88772: PUSH
88773: EMPTY
88774: LIST
88775: LIST
88776: LIST
88777: PUSH
88778: LD_VAR 0 1
88782: PUSH
88783: LD_INT 3
88785: PLUS
88786: PUSH
88787: LD_VAR 0 2
88791: PUSH
88792: LD_INT 3
88794: PLUS
88795: PUSH
88796: LD_INT 5
88798: PUSH
88799: EMPTY
88800: LIST
88801: LIST
88802: LIST
88803: PUSH
88804: LD_VAR 0 1
88808: PUSH
88809: LD_INT 4
88811: PLUS
88812: PUSH
88813: LD_VAR 0 2
88817: PUSH
88818: LD_INT 4
88820: PUSH
88821: EMPTY
88822: LIST
88823: LIST
88824: LIST
88825: PUSH
88826: LD_VAR 0 1
88830: PUSH
88831: LD_VAR 0 2
88835: PUSH
88836: LD_INT 3
88838: MINUS
88839: PUSH
88840: LD_INT 3
88842: PUSH
88843: EMPTY
88844: LIST
88845: LIST
88846: LIST
88847: PUSH
88848: LD_VAR 0 1
88852: PUSH
88853: LD_INT 4
88855: MINUS
88856: PUSH
88857: LD_VAR 0 2
88861: PUSH
88862: LD_INT 4
88864: MINUS
88865: PUSH
88866: LD_INT 2
88868: PUSH
88869: EMPTY
88870: LIST
88871: LIST
88872: LIST
88873: PUSH
88874: EMPTY
88875: LIST
88876: LIST
88877: LIST
88878: LIST
88879: LIST
88880: ST_TO_ADDR
// end ; 5 :
88881: GO 89021
88883: LD_INT 5
88885: DOUBLE
88886: EQUAL
88887: IFTRUE 88891
88889: GO 89020
88891: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
88892: LD_ADDR_VAR 0 5
88896: PUSH
88897: LD_VAR 0 1
88901: PUSH
88902: LD_INT 4
88904: MINUS
88905: PUSH
88906: LD_VAR 0 2
88910: PUSH
88911: LD_INT 1
88913: PUSH
88914: EMPTY
88915: LIST
88916: LIST
88917: LIST
88918: PUSH
88919: LD_VAR 0 1
88923: PUSH
88924: LD_VAR 0 2
88928: PUSH
88929: LD_INT 4
88931: MINUS
88932: PUSH
88933: LD_INT 3
88935: PUSH
88936: EMPTY
88937: LIST
88938: LIST
88939: LIST
88940: PUSH
88941: LD_VAR 0 1
88945: PUSH
88946: LD_INT 4
88948: PLUS
88949: PUSH
88950: LD_VAR 0 2
88954: PUSH
88955: LD_INT 4
88957: PLUS
88958: PUSH
88959: LD_INT 5
88961: PUSH
88962: EMPTY
88963: LIST
88964: LIST
88965: LIST
88966: PUSH
88967: LD_VAR 0 1
88971: PUSH
88972: LD_INT 3
88974: PLUS
88975: PUSH
88976: LD_VAR 0 2
88980: PUSH
88981: LD_INT 4
88983: PUSH
88984: EMPTY
88985: LIST
88986: LIST
88987: LIST
88988: PUSH
88989: LD_VAR 0 1
88993: PUSH
88994: LD_VAR 0 2
88998: PUSH
88999: LD_INT 3
89001: PLUS
89002: PUSH
89003: LD_INT 0
89005: PUSH
89006: EMPTY
89007: LIST
89008: LIST
89009: LIST
89010: PUSH
89011: EMPTY
89012: LIST
89013: LIST
89014: LIST
89015: LIST
89016: LIST
89017: ST_TO_ADDR
// end ; end ;
89018: GO 89021
89020: POP
// result := list ;
89021: LD_ADDR_VAR 0 4
89025: PUSH
89026: LD_VAR 0 5
89030: ST_TO_ADDR
// end ;
89031: LD_VAR 0 4
89035: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
89036: LD_INT 0
89038: PPUSH
89039: PPUSH
89040: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
89041: LD_VAR 0 1
89045: NOT
89046: PUSH
89047: LD_VAR 0 2
89051: PUSH
89052: LD_INT 1
89054: PUSH
89055: LD_INT 2
89057: PUSH
89058: LD_INT 3
89060: PUSH
89061: LD_INT 4
89063: PUSH
89064: EMPTY
89065: LIST
89066: LIST
89067: LIST
89068: LIST
89069: IN
89070: NOT
89071: OR
89072: IFFALSE 89076
// exit ;
89074: GO 89168
// tmp := [ ] ;
89076: LD_ADDR_VAR 0 5
89080: PUSH
89081: EMPTY
89082: ST_TO_ADDR
// for i in units do
89083: LD_ADDR_VAR 0 4
89087: PUSH
89088: LD_VAR 0 1
89092: PUSH
89093: FOR_IN
89094: IFFALSE 89137
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
89096: LD_ADDR_VAR 0 5
89100: PUSH
89101: LD_VAR 0 5
89105: PPUSH
89106: LD_VAR 0 5
89110: PUSH
89111: LD_INT 1
89113: PLUS
89114: PPUSH
89115: LD_VAR 0 4
89119: PPUSH
89120: LD_VAR 0 2
89124: PPUSH
89125: CALL_OW 259
89129: PPUSH
89130: CALL_OW 2
89134: ST_TO_ADDR
89135: GO 89093
89137: POP
89138: POP
// if not tmp then
89139: LD_VAR 0 5
89143: NOT
89144: IFFALSE 89148
// exit ;
89146: GO 89168
// result := SortListByListDesc ( units , tmp ) ;
89148: LD_ADDR_VAR 0 3
89152: PUSH
89153: LD_VAR 0 1
89157: PPUSH
89158: LD_VAR 0 5
89162: PPUSH
89163: CALL_OW 77
89167: ST_TO_ADDR
// end ;
89168: LD_VAR 0 3
89172: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
89173: LD_INT 0
89175: PPUSH
89176: PPUSH
89177: PPUSH
// x := GetX ( building ) ;
89178: LD_ADDR_VAR 0 4
89182: PUSH
89183: LD_VAR 0 2
89187: PPUSH
89188: CALL_OW 250
89192: ST_TO_ADDR
// y := GetY ( building ) ;
89193: LD_ADDR_VAR 0 5
89197: PUSH
89198: LD_VAR 0 2
89202: PPUSH
89203: CALL_OW 251
89207: ST_TO_ADDR
// if GetTaskList ( unit ) then
89208: LD_VAR 0 1
89212: PPUSH
89213: CALL_OW 437
89217: IFFALSE 89312
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
89219: LD_STRING e
89221: PUSH
89222: LD_VAR 0 1
89226: PPUSH
89227: CALL_OW 437
89231: PUSH
89232: LD_INT 1
89234: ARRAY
89235: PUSH
89236: LD_INT 1
89238: ARRAY
89239: EQUAL
89240: PUSH
89241: LD_VAR 0 4
89245: PUSH
89246: LD_VAR 0 1
89250: PPUSH
89251: CALL_OW 437
89255: PUSH
89256: LD_INT 1
89258: ARRAY
89259: PUSH
89260: LD_INT 2
89262: ARRAY
89263: EQUAL
89264: AND
89265: PUSH
89266: LD_VAR 0 5
89270: PUSH
89271: LD_VAR 0 1
89275: PPUSH
89276: CALL_OW 437
89280: PUSH
89281: LD_INT 1
89283: ARRAY
89284: PUSH
89285: LD_INT 3
89287: ARRAY
89288: EQUAL
89289: AND
89290: IFFALSE 89302
// result := true else
89292: LD_ADDR_VAR 0 3
89296: PUSH
89297: LD_INT 1
89299: ST_TO_ADDR
89300: GO 89310
// result := false ;
89302: LD_ADDR_VAR 0 3
89306: PUSH
89307: LD_INT 0
89309: ST_TO_ADDR
// end else
89310: GO 89320
// result := false ;
89312: LD_ADDR_VAR 0 3
89316: PUSH
89317: LD_INT 0
89319: ST_TO_ADDR
// end ;
89320: LD_VAR 0 3
89324: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
89325: LD_INT 0
89327: PPUSH
89328: PPUSH
89329: PPUSH
89330: PPUSH
// if not unit or not area then
89331: LD_VAR 0 1
89335: NOT
89336: PUSH
89337: LD_VAR 0 2
89341: NOT
89342: OR
89343: IFFALSE 89347
// exit ;
89345: GO 89511
// tmp := AreaToList ( area , i ) ;
89347: LD_ADDR_VAR 0 6
89351: PUSH
89352: LD_VAR 0 2
89356: PPUSH
89357: LD_VAR 0 5
89361: PPUSH
89362: CALL_OW 517
89366: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
89367: LD_ADDR_VAR 0 5
89371: PUSH
89372: DOUBLE
89373: LD_INT 1
89375: DEC
89376: ST_TO_ADDR
89377: LD_VAR 0 6
89381: PUSH
89382: LD_INT 1
89384: ARRAY
89385: PUSH
89386: FOR_TO
89387: IFFALSE 89509
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
89389: LD_ADDR_VAR 0 7
89393: PUSH
89394: LD_VAR 0 6
89398: PUSH
89399: LD_INT 1
89401: ARRAY
89402: PUSH
89403: LD_VAR 0 5
89407: ARRAY
89408: PUSH
89409: LD_VAR 0 6
89413: PUSH
89414: LD_INT 2
89416: ARRAY
89417: PUSH
89418: LD_VAR 0 5
89422: ARRAY
89423: PUSH
89424: EMPTY
89425: LIST
89426: LIST
89427: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
89428: LD_VAR 0 7
89432: PUSH
89433: LD_INT 1
89435: ARRAY
89436: PPUSH
89437: LD_VAR 0 7
89441: PUSH
89442: LD_INT 2
89444: ARRAY
89445: PPUSH
89446: CALL_OW 428
89450: PUSH
89451: LD_INT 0
89453: EQUAL
89454: IFFALSE 89507
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
89456: LD_VAR 0 1
89460: PPUSH
89461: LD_VAR 0 7
89465: PUSH
89466: LD_INT 1
89468: ARRAY
89469: PPUSH
89470: LD_VAR 0 7
89474: PUSH
89475: LD_INT 2
89477: ARRAY
89478: PPUSH
89479: LD_VAR 0 3
89483: PPUSH
89484: CALL_OW 48
// result := IsPlaced ( unit ) ;
89488: LD_ADDR_VAR 0 4
89492: PUSH
89493: LD_VAR 0 1
89497: PPUSH
89498: CALL_OW 305
89502: ST_TO_ADDR
// exit ;
89503: POP
89504: POP
89505: GO 89511
// end ; end ;
89507: GO 89386
89509: POP
89510: POP
// end ;
89511: LD_VAR 0 4
89515: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
89516: LD_INT 0
89518: PPUSH
89519: PPUSH
89520: PPUSH
// if not side or side > 8 then
89521: LD_VAR 0 1
89525: NOT
89526: PUSH
89527: LD_VAR 0 1
89531: PUSH
89532: LD_INT 8
89534: GREATER
89535: OR
89536: IFFALSE 89540
// exit ;
89538: GO 89727
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
89540: LD_ADDR_VAR 0 4
89544: PUSH
89545: LD_INT 22
89547: PUSH
89548: LD_VAR 0 1
89552: PUSH
89553: EMPTY
89554: LIST
89555: LIST
89556: PUSH
89557: LD_INT 21
89559: PUSH
89560: LD_INT 3
89562: PUSH
89563: EMPTY
89564: LIST
89565: LIST
89566: PUSH
89567: EMPTY
89568: LIST
89569: LIST
89570: PPUSH
89571: CALL_OW 69
89575: ST_TO_ADDR
// if not tmp then
89576: LD_VAR 0 4
89580: NOT
89581: IFFALSE 89585
// exit ;
89583: GO 89727
// enable_addtolog := true ;
89585: LD_ADDR_OWVAR 81
89589: PUSH
89590: LD_INT 1
89592: ST_TO_ADDR
// AddToLog ( [ ) ;
89593: LD_STRING [
89595: PPUSH
89596: CALL_OW 561
// for i in tmp do
89600: LD_ADDR_VAR 0 3
89604: PUSH
89605: LD_VAR 0 4
89609: PUSH
89610: FOR_IN
89611: IFFALSE 89718
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
89613: LD_STRING [
89615: PUSH
89616: LD_VAR 0 3
89620: PPUSH
89621: CALL_OW 266
89625: STR
89626: PUSH
89627: LD_STRING , 
89629: STR
89630: PUSH
89631: LD_VAR 0 3
89635: PPUSH
89636: CALL_OW 250
89640: STR
89641: PUSH
89642: LD_STRING , 
89644: STR
89645: PUSH
89646: LD_VAR 0 3
89650: PPUSH
89651: CALL_OW 251
89655: STR
89656: PUSH
89657: LD_STRING , 
89659: STR
89660: PUSH
89661: LD_VAR 0 3
89665: PPUSH
89666: CALL_OW 254
89670: STR
89671: PUSH
89672: LD_STRING , 
89674: STR
89675: PUSH
89676: LD_VAR 0 3
89680: PPUSH
89681: LD_INT 1
89683: PPUSH
89684: CALL_OW 268
89688: STR
89689: PUSH
89690: LD_STRING , 
89692: STR
89693: PUSH
89694: LD_VAR 0 3
89698: PPUSH
89699: LD_INT 2
89701: PPUSH
89702: CALL_OW 268
89706: STR
89707: PUSH
89708: LD_STRING ],
89710: STR
89711: PPUSH
89712: CALL_OW 561
// end ;
89716: GO 89610
89718: POP
89719: POP
// AddToLog ( ]; ) ;
89720: LD_STRING ];
89722: PPUSH
89723: CALL_OW 561
// end ;
89727: LD_VAR 0 2
89731: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
89732: LD_INT 0
89734: PPUSH
89735: PPUSH
89736: PPUSH
89737: PPUSH
89738: PPUSH
// if not area or not rate or not max then
89739: LD_VAR 0 1
89743: NOT
89744: PUSH
89745: LD_VAR 0 2
89749: NOT
89750: OR
89751: PUSH
89752: LD_VAR 0 4
89756: NOT
89757: OR
89758: IFFALSE 89762
// exit ;
89760: GO 89954
// while 1 do
89762: LD_INT 1
89764: IFFALSE 89954
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
89766: LD_ADDR_VAR 0 9
89770: PUSH
89771: LD_VAR 0 1
89775: PPUSH
89776: LD_INT 1
89778: PPUSH
89779: CALL_OW 287
89783: PUSH
89784: LD_INT 10
89786: MUL
89787: ST_TO_ADDR
// r := rate / 10 ;
89788: LD_ADDR_VAR 0 7
89792: PUSH
89793: LD_VAR 0 2
89797: PUSH
89798: LD_INT 10
89800: DIVREAL
89801: ST_TO_ADDR
// time := 1 1$00 ;
89802: LD_ADDR_VAR 0 8
89806: PUSH
89807: LD_INT 2100
89809: ST_TO_ADDR
// if amount < min then
89810: LD_VAR 0 9
89814: PUSH
89815: LD_VAR 0 3
89819: LESS
89820: IFFALSE 89838
// r := r * 2 else
89822: LD_ADDR_VAR 0 7
89826: PUSH
89827: LD_VAR 0 7
89831: PUSH
89832: LD_INT 2
89834: MUL
89835: ST_TO_ADDR
89836: GO 89864
// if amount > max then
89838: LD_VAR 0 9
89842: PUSH
89843: LD_VAR 0 4
89847: GREATER
89848: IFFALSE 89864
// r := r / 2 ;
89850: LD_ADDR_VAR 0 7
89854: PUSH
89855: LD_VAR 0 7
89859: PUSH
89860: LD_INT 2
89862: DIVREAL
89863: ST_TO_ADDR
// time := time / r ;
89864: LD_ADDR_VAR 0 8
89868: PUSH
89869: LD_VAR 0 8
89873: PUSH
89874: LD_VAR 0 7
89878: DIVREAL
89879: ST_TO_ADDR
// if time < 0 then
89880: LD_VAR 0 8
89884: PUSH
89885: LD_INT 0
89887: LESS
89888: IFFALSE 89905
// time := time * - 1 ;
89890: LD_ADDR_VAR 0 8
89894: PUSH
89895: LD_VAR 0 8
89899: PUSH
89900: LD_INT 1
89902: NEG
89903: MUL
89904: ST_TO_ADDR
// wait ( time ) ;
89905: LD_VAR 0 8
89909: PPUSH
89910: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
89914: LD_INT 35
89916: PPUSH
89917: LD_INT 875
89919: PPUSH
89920: CALL_OW 12
89924: PPUSH
89925: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
89929: LD_INT 1
89931: PPUSH
89932: LD_INT 5
89934: PPUSH
89935: CALL_OW 12
89939: PPUSH
89940: LD_VAR 0 1
89944: PPUSH
89945: LD_INT 1
89947: PPUSH
89948: CALL_OW 55
// end ;
89952: GO 89762
// end ;
89954: LD_VAR 0 5
89958: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
89959: LD_INT 0
89961: PPUSH
89962: PPUSH
89963: PPUSH
89964: PPUSH
89965: PPUSH
89966: PPUSH
89967: PPUSH
89968: PPUSH
// if not turrets or not factories then
89969: LD_VAR 0 1
89973: NOT
89974: PUSH
89975: LD_VAR 0 2
89979: NOT
89980: OR
89981: IFFALSE 89985
// exit ;
89983: GO 90292
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
89985: LD_ADDR_VAR 0 10
89989: PUSH
89990: LD_INT 5
89992: PUSH
89993: LD_INT 6
89995: PUSH
89996: EMPTY
89997: LIST
89998: LIST
89999: PUSH
90000: LD_INT 2
90002: PUSH
90003: LD_INT 4
90005: PUSH
90006: EMPTY
90007: LIST
90008: LIST
90009: PUSH
90010: LD_INT 3
90012: PUSH
90013: LD_INT 5
90015: PUSH
90016: EMPTY
90017: LIST
90018: LIST
90019: PUSH
90020: EMPTY
90021: LIST
90022: LIST
90023: LIST
90024: PUSH
90025: LD_INT 24
90027: PUSH
90028: LD_INT 25
90030: PUSH
90031: EMPTY
90032: LIST
90033: LIST
90034: PUSH
90035: LD_INT 23
90037: PUSH
90038: LD_INT 27
90040: PUSH
90041: EMPTY
90042: LIST
90043: LIST
90044: PUSH
90045: EMPTY
90046: LIST
90047: LIST
90048: PUSH
90049: LD_INT 42
90051: PUSH
90052: LD_INT 43
90054: PUSH
90055: EMPTY
90056: LIST
90057: LIST
90058: PUSH
90059: LD_INT 44
90061: PUSH
90062: LD_INT 46
90064: PUSH
90065: EMPTY
90066: LIST
90067: LIST
90068: PUSH
90069: LD_INT 45
90071: PUSH
90072: LD_INT 47
90074: PUSH
90075: EMPTY
90076: LIST
90077: LIST
90078: PUSH
90079: EMPTY
90080: LIST
90081: LIST
90082: LIST
90083: PUSH
90084: EMPTY
90085: LIST
90086: LIST
90087: LIST
90088: ST_TO_ADDR
// result := [ ] ;
90089: LD_ADDR_VAR 0 3
90093: PUSH
90094: EMPTY
90095: ST_TO_ADDR
// for i in turrets do
90096: LD_ADDR_VAR 0 4
90100: PUSH
90101: LD_VAR 0 1
90105: PUSH
90106: FOR_IN
90107: IFFALSE 90290
// begin nat := GetNation ( i ) ;
90109: LD_ADDR_VAR 0 7
90113: PUSH
90114: LD_VAR 0 4
90118: PPUSH
90119: CALL_OW 248
90123: ST_TO_ADDR
// weapon := 0 ;
90124: LD_ADDR_VAR 0 8
90128: PUSH
90129: LD_INT 0
90131: ST_TO_ADDR
// if not nat then
90132: LD_VAR 0 7
90136: NOT
90137: IFFALSE 90141
// continue ;
90139: GO 90106
// for j in list [ nat ] do
90141: LD_ADDR_VAR 0 5
90145: PUSH
90146: LD_VAR 0 10
90150: PUSH
90151: LD_VAR 0 7
90155: ARRAY
90156: PUSH
90157: FOR_IN
90158: IFFALSE 90199
// if GetBWeapon ( i ) = j [ 1 ] then
90160: LD_VAR 0 4
90164: PPUSH
90165: CALL_OW 269
90169: PUSH
90170: LD_VAR 0 5
90174: PUSH
90175: LD_INT 1
90177: ARRAY
90178: EQUAL
90179: IFFALSE 90197
// begin weapon := j [ 2 ] ;
90181: LD_ADDR_VAR 0 8
90185: PUSH
90186: LD_VAR 0 5
90190: PUSH
90191: LD_INT 2
90193: ARRAY
90194: ST_TO_ADDR
// break ;
90195: GO 90199
// end ;
90197: GO 90157
90199: POP
90200: POP
// if not weapon then
90201: LD_VAR 0 8
90205: NOT
90206: IFFALSE 90210
// continue ;
90208: GO 90106
// for k in factories do
90210: LD_ADDR_VAR 0 6
90214: PUSH
90215: LD_VAR 0 2
90219: PUSH
90220: FOR_IN
90221: IFFALSE 90286
// begin weapons := AvailableWeaponList ( k ) ;
90223: LD_ADDR_VAR 0 9
90227: PUSH
90228: LD_VAR 0 6
90232: PPUSH
90233: CALL_OW 478
90237: ST_TO_ADDR
// if not weapons then
90238: LD_VAR 0 9
90242: NOT
90243: IFFALSE 90247
// continue ;
90245: GO 90220
// if weapon in weapons then
90247: LD_VAR 0 8
90251: PUSH
90252: LD_VAR 0 9
90256: IN
90257: IFFALSE 90284
// begin result := [ i , weapon ] ;
90259: LD_ADDR_VAR 0 3
90263: PUSH
90264: LD_VAR 0 4
90268: PUSH
90269: LD_VAR 0 8
90273: PUSH
90274: EMPTY
90275: LIST
90276: LIST
90277: ST_TO_ADDR
// exit ;
90278: POP
90279: POP
90280: POP
90281: POP
90282: GO 90292
// end ; end ;
90284: GO 90220
90286: POP
90287: POP
// end ;
90288: GO 90106
90290: POP
90291: POP
// end ;
90292: LD_VAR 0 3
90296: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
90297: LD_INT 0
90299: PPUSH
// if not side or side > 8 then
90300: LD_VAR 0 3
90304: NOT
90305: PUSH
90306: LD_VAR 0 3
90310: PUSH
90311: LD_INT 8
90313: GREATER
90314: OR
90315: IFFALSE 90319
// exit ;
90317: GO 90378
// if not range then
90319: LD_VAR 0 4
90323: NOT
90324: IFFALSE 90335
// range := - 12 ;
90326: LD_ADDR_VAR 0 4
90330: PUSH
90331: LD_INT 12
90333: NEG
90334: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
90335: LD_VAR 0 1
90339: PPUSH
90340: LD_VAR 0 2
90344: PPUSH
90345: LD_VAR 0 3
90349: PPUSH
90350: LD_VAR 0 4
90354: PPUSH
90355: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
90359: LD_VAR 0 1
90363: PPUSH
90364: LD_VAR 0 2
90368: PPUSH
90369: LD_VAR 0 3
90373: PPUSH
90374: CALL_OW 331
// end ;
90378: LD_VAR 0 5
90382: RET
// export function Video ( mode ) ; begin
90383: LD_INT 0
90385: PPUSH
// ingame_video = mode ;
90386: LD_ADDR_OWVAR 52
90390: PUSH
90391: LD_VAR 0 1
90395: ST_TO_ADDR
// interface_hidden = mode ;
90396: LD_ADDR_OWVAR 54
90400: PUSH
90401: LD_VAR 0 1
90405: ST_TO_ADDR
// end ;
90406: LD_VAR 0 2
90410: RET
// export function Join ( array , element ) ; begin
90411: LD_INT 0
90413: PPUSH
// result := array ^ element ;
90414: LD_ADDR_VAR 0 3
90418: PUSH
90419: LD_VAR 0 1
90423: PUSH
90424: LD_VAR 0 2
90428: ADD
90429: ST_TO_ADDR
// end ;
90430: LD_VAR 0 3
90434: RET
// export function JoinUnion ( array , element ) ; begin
90435: LD_INT 0
90437: PPUSH
// result := array union element ;
90438: LD_ADDR_VAR 0 3
90442: PUSH
90443: LD_VAR 0 1
90447: PUSH
90448: LD_VAR 0 2
90452: UNION
90453: ST_TO_ADDR
// end ;
90454: LD_VAR 0 3
90458: RET
// export function GetBehemoths ( side ) ; begin
90459: LD_INT 0
90461: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
90462: LD_ADDR_VAR 0 2
90466: PUSH
90467: LD_INT 22
90469: PUSH
90470: LD_VAR 0 1
90474: PUSH
90475: EMPTY
90476: LIST
90477: LIST
90478: PUSH
90479: LD_INT 31
90481: PUSH
90482: LD_INT 25
90484: PUSH
90485: EMPTY
90486: LIST
90487: LIST
90488: PUSH
90489: EMPTY
90490: LIST
90491: LIST
90492: PPUSH
90493: CALL_OW 69
90497: ST_TO_ADDR
// end ;
90498: LD_VAR 0 2
90502: RET
// export function Shuffle ( array ) ; var i , index ; begin
90503: LD_INT 0
90505: PPUSH
90506: PPUSH
90507: PPUSH
// result := [ ] ;
90508: LD_ADDR_VAR 0 2
90512: PUSH
90513: EMPTY
90514: ST_TO_ADDR
// if not array then
90515: LD_VAR 0 1
90519: NOT
90520: IFFALSE 90524
// exit ;
90522: GO 90623
// Randomize ;
90524: CALL_OW 10
// for i = array downto 1 do
90528: LD_ADDR_VAR 0 3
90532: PUSH
90533: DOUBLE
90534: LD_VAR 0 1
90538: INC
90539: ST_TO_ADDR
90540: LD_INT 1
90542: PUSH
90543: FOR_DOWNTO
90544: IFFALSE 90621
// begin index := rand ( 1 , array ) ;
90546: LD_ADDR_VAR 0 4
90550: PUSH
90551: LD_INT 1
90553: PPUSH
90554: LD_VAR 0 1
90558: PPUSH
90559: CALL_OW 12
90563: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
90564: LD_ADDR_VAR 0 2
90568: PUSH
90569: LD_VAR 0 2
90573: PPUSH
90574: LD_VAR 0 2
90578: PUSH
90579: LD_INT 1
90581: PLUS
90582: PPUSH
90583: LD_VAR 0 1
90587: PUSH
90588: LD_VAR 0 4
90592: ARRAY
90593: PPUSH
90594: CALL_OW 2
90598: ST_TO_ADDR
// array := Delete ( array , index ) ;
90599: LD_ADDR_VAR 0 1
90603: PUSH
90604: LD_VAR 0 1
90608: PPUSH
90609: LD_VAR 0 4
90613: PPUSH
90614: CALL_OW 3
90618: ST_TO_ADDR
// end ;
90619: GO 90543
90621: POP
90622: POP
// end ;
90623: LD_VAR 0 2
90627: RET
// export function GetBaseMaterials ( base ) ; begin
90628: LD_INT 0
90630: PPUSH
// result := [ 0 , 0 , 0 ] ;
90631: LD_ADDR_VAR 0 2
90635: PUSH
90636: LD_INT 0
90638: PUSH
90639: LD_INT 0
90641: PUSH
90642: LD_INT 0
90644: PUSH
90645: EMPTY
90646: LIST
90647: LIST
90648: LIST
90649: ST_TO_ADDR
// if not base then
90650: LD_VAR 0 1
90654: NOT
90655: IFFALSE 90659
// exit ;
90657: GO 90708
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
90659: LD_ADDR_VAR 0 2
90663: PUSH
90664: LD_VAR 0 1
90668: PPUSH
90669: LD_INT 1
90671: PPUSH
90672: CALL_OW 275
90676: PUSH
90677: LD_VAR 0 1
90681: PPUSH
90682: LD_INT 2
90684: PPUSH
90685: CALL_OW 275
90689: PUSH
90690: LD_VAR 0 1
90694: PPUSH
90695: LD_INT 3
90697: PPUSH
90698: CALL_OW 275
90702: PUSH
90703: EMPTY
90704: LIST
90705: LIST
90706: LIST
90707: ST_TO_ADDR
// end ; end_of_file
90708: LD_VAR 0 2
90712: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
90713: GO 90715
90715: DISABLE
// begin ru_radar := 98 ;
90716: LD_ADDR_EXP 93
90720: PUSH
90721: LD_INT 98
90723: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
90724: LD_ADDR_EXP 94
90728: PUSH
90729: LD_INT 89
90731: ST_TO_ADDR
// us_hack := 99 ;
90732: LD_ADDR_EXP 95
90736: PUSH
90737: LD_INT 99
90739: ST_TO_ADDR
// us_artillery := 97 ;
90740: LD_ADDR_EXP 96
90744: PUSH
90745: LD_INT 97
90747: ST_TO_ADDR
// ar_bio_bomb := 91 ;
90748: LD_ADDR_EXP 97
90752: PUSH
90753: LD_INT 91
90755: ST_TO_ADDR
// tech_Artillery := 80 ;
90756: LD_ADDR_EXP 98
90760: PUSH
90761: LD_INT 80
90763: ST_TO_ADDR
// tech_RadMat := 81 ;
90764: LD_ADDR_EXP 99
90768: PUSH
90769: LD_INT 81
90771: ST_TO_ADDR
// tech_BasicTools := 82 ;
90772: LD_ADDR_EXP 100
90776: PUSH
90777: LD_INT 82
90779: ST_TO_ADDR
// tech_Cargo := 83 ;
90780: LD_ADDR_EXP 101
90784: PUSH
90785: LD_INT 83
90787: ST_TO_ADDR
// tech_Track := 84 ;
90788: LD_ADDR_EXP 102
90792: PUSH
90793: LD_INT 84
90795: ST_TO_ADDR
// tech_Crane := 85 ;
90796: LD_ADDR_EXP 103
90800: PUSH
90801: LD_INT 85
90803: ST_TO_ADDR
// tech_Bulldozer := 86 ;
90804: LD_ADDR_EXP 104
90808: PUSH
90809: LD_INT 86
90811: ST_TO_ADDR
// tech_Hovercraft := 87 ;
90812: LD_ADDR_EXP 105
90816: PUSH
90817: LD_INT 87
90819: ST_TO_ADDR
// end ; end_of_file end_of_file
90820: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
90821: GO 90823
90823: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
90824: LD_STRING initStreamRollete();
90826: PPUSH
90827: CALL_OW 559
// InitStreamMode ;
90831: CALL 90840 0 0
// DefineStreamItems ( ) ;
90835: CALL 91280 0 0
// end ;
90839: END
// function InitStreamMode ; begin
90840: LD_INT 0
90842: PPUSH
// streamModeActive := false ;
90843: LD_ADDR_EXP 106
90847: PUSH
90848: LD_INT 0
90850: ST_TO_ADDR
// normalCounter := 36 ;
90851: LD_ADDR_EXP 107
90855: PUSH
90856: LD_INT 36
90858: ST_TO_ADDR
// hardcoreCounter := 16 ;
90859: LD_ADDR_EXP 108
90863: PUSH
90864: LD_INT 16
90866: ST_TO_ADDR
// sRocket := false ;
90867: LD_ADDR_EXP 111
90871: PUSH
90872: LD_INT 0
90874: ST_TO_ADDR
// sSpeed := false ;
90875: LD_ADDR_EXP 110
90879: PUSH
90880: LD_INT 0
90882: ST_TO_ADDR
// sEngine := false ;
90883: LD_ADDR_EXP 112
90887: PUSH
90888: LD_INT 0
90890: ST_TO_ADDR
// sSpec := false ;
90891: LD_ADDR_EXP 109
90895: PUSH
90896: LD_INT 0
90898: ST_TO_ADDR
// sLevel := false ;
90899: LD_ADDR_EXP 113
90903: PUSH
90904: LD_INT 0
90906: ST_TO_ADDR
// sArmoury := false ;
90907: LD_ADDR_EXP 114
90911: PUSH
90912: LD_INT 0
90914: ST_TO_ADDR
// sRadar := false ;
90915: LD_ADDR_EXP 115
90919: PUSH
90920: LD_INT 0
90922: ST_TO_ADDR
// sBunker := false ;
90923: LD_ADDR_EXP 116
90927: PUSH
90928: LD_INT 0
90930: ST_TO_ADDR
// sHack := false ;
90931: LD_ADDR_EXP 117
90935: PUSH
90936: LD_INT 0
90938: ST_TO_ADDR
// sFire := false ;
90939: LD_ADDR_EXP 118
90943: PUSH
90944: LD_INT 0
90946: ST_TO_ADDR
// sRefresh := false ;
90947: LD_ADDR_EXP 119
90951: PUSH
90952: LD_INT 0
90954: ST_TO_ADDR
// sExp := false ;
90955: LD_ADDR_EXP 120
90959: PUSH
90960: LD_INT 0
90962: ST_TO_ADDR
// sDepot := false ;
90963: LD_ADDR_EXP 121
90967: PUSH
90968: LD_INT 0
90970: ST_TO_ADDR
// sFlag := false ;
90971: LD_ADDR_EXP 122
90975: PUSH
90976: LD_INT 0
90978: ST_TO_ADDR
// sKamikadze := false ;
90979: LD_ADDR_EXP 130
90983: PUSH
90984: LD_INT 0
90986: ST_TO_ADDR
// sTroll := false ;
90987: LD_ADDR_EXP 131
90991: PUSH
90992: LD_INT 0
90994: ST_TO_ADDR
// sSlow := false ;
90995: LD_ADDR_EXP 132
90999: PUSH
91000: LD_INT 0
91002: ST_TO_ADDR
// sLack := false ;
91003: LD_ADDR_EXP 133
91007: PUSH
91008: LD_INT 0
91010: ST_TO_ADDR
// sTank := false ;
91011: LD_ADDR_EXP 135
91015: PUSH
91016: LD_INT 0
91018: ST_TO_ADDR
// sRemote := false ;
91019: LD_ADDR_EXP 136
91023: PUSH
91024: LD_INT 0
91026: ST_TO_ADDR
// sPowell := false ;
91027: LD_ADDR_EXP 137
91031: PUSH
91032: LD_INT 0
91034: ST_TO_ADDR
// sTeleport := false ;
91035: LD_ADDR_EXP 140
91039: PUSH
91040: LD_INT 0
91042: ST_TO_ADDR
// sOilTower := false ;
91043: LD_ADDR_EXP 142
91047: PUSH
91048: LD_INT 0
91050: ST_TO_ADDR
// sShovel := false ;
91051: LD_ADDR_EXP 143
91055: PUSH
91056: LD_INT 0
91058: ST_TO_ADDR
// sSheik := false ;
91059: LD_ADDR_EXP 144
91063: PUSH
91064: LD_INT 0
91066: ST_TO_ADDR
// sEarthquake := false ;
91067: LD_ADDR_EXP 146
91071: PUSH
91072: LD_INT 0
91074: ST_TO_ADDR
// sAI := false ;
91075: LD_ADDR_EXP 147
91079: PUSH
91080: LD_INT 0
91082: ST_TO_ADDR
// sCargo := false ;
91083: LD_ADDR_EXP 150
91087: PUSH
91088: LD_INT 0
91090: ST_TO_ADDR
// sDLaser := false ;
91091: LD_ADDR_EXP 151
91095: PUSH
91096: LD_INT 0
91098: ST_TO_ADDR
// sExchange := false ;
91099: LD_ADDR_EXP 152
91103: PUSH
91104: LD_INT 0
91106: ST_TO_ADDR
// sFac := false ;
91107: LD_ADDR_EXP 153
91111: PUSH
91112: LD_INT 0
91114: ST_TO_ADDR
// sPower := false ;
91115: LD_ADDR_EXP 154
91119: PUSH
91120: LD_INT 0
91122: ST_TO_ADDR
// sRandom := false ;
91123: LD_ADDR_EXP 155
91127: PUSH
91128: LD_INT 0
91130: ST_TO_ADDR
// sShield := false ;
91131: LD_ADDR_EXP 156
91135: PUSH
91136: LD_INT 0
91138: ST_TO_ADDR
// sTime := false ;
91139: LD_ADDR_EXP 157
91143: PUSH
91144: LD_INT 0
91146: ST_TO_ADDR
// sTools := false ;
91147: LD_ADDR_EXP 158
91151: PUSH
91152: LD_INT 0
91154: ST_TO_ADDR
// sSold := false ;
91155: LD_ADDR_EXP 123
91159: PUSH
91160: LD_INT 0
91162: ST_TO_ADDR
// sDiff := false ;
91163: LD_ADDR_EXP 124
91167: PUSH
91168: LD_INT 0
91170: ST_TO_ADDR
// sFog := false ;
91171: LD_ADDR_EXP 127
91175: PUSH
91176: LD_INT 0
91178: ST_TO_ADDR
// sReset := false ;
91179: LD_ADDR_EXP 128
91183: PUSH
91184: LD_INT 0
91186: ST_TO_ADDR
// sSun := false ;
91187: LD_ADDR_EXP 129
91191: PUSH
91192: LD_INT 0
91194: ST_TO_ADDR
// sTiger := false ;
91195: LD_ADDR_EXP 125
91199: PUSH
91200: LD_INT 0
91202: ST_TO_ADDR
// sBomb := false ;
91203: LD_ADDR_EXP 126
91207: PUSH
91208: LD_INT 0
91210: ST_TO_ADDR
// sWound := false ;
91211: LD_ADDR_EXP 134
91215: PUSH
91216: LD_INT 0
91218: ST_TO_ADDR
// sBetray := false ;
91219: LD_ADDR_EXP 138
91223: PUSH
91224: LD_INT 0
91226: ST_TO_ADDR
// sContamin := false ;
91227: LD_ADDR_EXP 139
91231: PUSH
91232: LD_INT 0
91234: ST_TO_ADDR
// sOil := false ;
91235: LD_ADDR_EXP 141
91239: PUSH
91240: LD_INT 0
91242: ST_TO_ADDR
// sStu := false ;
91243: LD_ADDR_EXP 145
91247: PUSH
91248: LD_INT 0
91250: ST_TO_ADDR
// sBazooka := false ;
91251: LD_ADDR_EXP 148
91255: PUSH
91256: LD_INT 0
91258: ST_TO_ADDR
// sMortar := false ;
91259: LD_ADDR_EXP 149
91263: PUSH
91264: LD_INT 0
91266: ST_TO_ADDR
// sRanger := false ;
91267: LD_ADDR_EXP 159
91271: PUSH
91272: LD_INT 0
91274: ST_TO_ADDR
// end ;
91275: LD_VAR 0 1
91279: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
91280: LD_INT 0
91282: PPUSH
91283: PPUSH
91284: PPUSH
91285: PPUSH
91286: PPUSH
// result := [ ] ;
91287: LD_ADDR_VAR 0 1
91291: PUSH
91292: EMPTY
91293: ST_TO_ADDR
// if campaign_id = 1 then
91294: LD_OWVAR 69
91298: PUSH
91299: LD_INT 1
91301: EQUAL
91302: IFFALSE 94240
// begin case mission_number of 1 :
91304: LD_OWVAR 70
91308: PUSH
91309: LD_INT 1
91311: DOUBLE
91312: EQUAL
91313: IFTRUE 91317
91315: GO 91381
91317: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
91318: LD_ADDR_VAR 0 1
91322: PUSH
91323: LD_INT 2
91325: PUSH
91326: LD_INT 4
91328: PUSH
91329: LD_INT 11
91331: PUSH
91332: LD_INT 12
91334: PUSH
91335: LD_INT 15
91337: PUSH
91338: LD_INT 16
91340: PUSH
91341: LD_INT 22
91343: PUSH
91344: LD_INT 23
91346: PUSH
91347: LD_INT 26
91349: PUSH
91350: EMPTY
91351: LIST
91352: LIST
91353: LIST
91354: LIST
91355: LIST
91356: LIST
91357: LIST
91358: LIST
91359: LIST
91360: PUSH
91361: LD_INT 101
91363: PUSH
91364: LD_INT 102
91366: PUSH
91367: LD_INT 106
91369: PUSH
91370: EMPTY
91371: LIST
91372: LIST
91373: LIST
91374: PUSH
91375: EMPTY
91376: LIST
91377: LIST
91378: ST_TO_ADDR
91379: GO 94238
91381: LD_INT 2
91383: DOUBLE
91384: EQUAL
91385: IFTRUE 91389
91387: GO 91461
91389: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
91390: LD_ADDR_VAR 0 1
91394: PUSH
91395: LD_INT 2
91397: PUSH
91398: LD_INT 4
91400: PUSH
91401: LD_INT 11
91403: PUSH
91404: LD_INT 12
91406: PUSH
91407: LD_INT 15
91409: PUSH
91410: LD_INT 16
91412: PUSH
91413: LD_INT 22
91415: PUSH
91416: LD_INT 23
91418: PUSH
91419: LD_INT 26
91421: PUSH
91422: EMPTY
91423: LIST
91424: LIST
91425: LIST
91426: LIST
91427: LIST
91428: LIST
91429: LIST
91430: LIST
91431: LIST
91432: PUSH
91433: LD_INT 101
91435: PUSH
91436: LD_INT 102
91438: PUSH
91439: LD_INT 105
91441: PUSH
91442: LD_INT 106
91444: PUSH
91445: LD_INT 108
91447: PUSH
91448: EMPTY
91449: LIST
91450: LIST
91451: LIST
91452: LIST
91453: LIST
91454: PUSH
91455: EMPTY
91456: LIST
91457: LIST
91458: ST_TO_ADDR
91459: GO 94238
91461: LD_INT 3
91463: DOUBLE
91464: EQUAL
91465: IFTRUE 91469
91467: GO 91545
91469: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
91470: LD_ADDR_VAR 0 1
91474: PUSH
91475: LD_INT 2
91477: PUSH
91478: LD_INT 4
91480: PUSH
91481: LD_INT 5
91483: PUSH
91484: LD_INT 11
91486: PUSH
91487: LD_INT 12
91489: PUSH
91490: LD_INT 15
91492: PUSH
91493: LD_INT 16
91495: PUSH
91496: LD_INT 22
91498: PUSH
91499: LD_INT 26
91501: PUSH
91502: LD_INT 36
91504: PUSH
91505: EMPTY
91506: LIST
91507: LIST
91508: LIST
91509: LIST
91510: LIST
91511: LIST
91512: LIST
91513: LIST
91514: LIST
91515: LIST
91516: PUSH
91517: LD_INT 101
91519: PUSH
91520: LD_INT 102
91522: PUSH
91523: LD_INT 105
91525: PUSH
91526: LD_INT 106
91528: PUSH
91529: LD_INT 108
91531: PUSH
91532: EMPTY
91533: LIST
91534: LIST
91535: LIST
91536: LIST
91537: LIST
91538: PUSH
91539: EMPTY
91540: LIST
91541: LIST
91542: ST_TO_ADDR
91543: GO 94238
91545: LD_INT 4
91547: DOUBLE
91548: EQUAL
91549: IFTRUE 91553
91551: GO 91637
91553: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
91554: LD_ADDR_VAR 0 1
91558: PUSH
91559: LD_INT 2
91561: PUSH
91562: LD_INT 4
91564: PUSH
91565: LD_INT 5
91567: PUSH
91568: LD_INT 8
91570: PUSH
91571: LD_INT 11
91573: PUSH
91574: LD_INT 12
91576: PUSH
91577: LD_INT 15
91579: PUSH
91580: LD_INT 16
91582: PUSH
91583: LD_INT 22
91585: PUSH
91586: LD_INT 23
91588: PUSH
91589: LD_INT 26
91591: PUSH
91592: LD_INT 36
91594: PUSH
91595: EMPTY
91596: LIST
91597: LIST
91598: LIST
91599: LIST
91600: LIST
91601: LIST
91602: LIST
91603: LIST
91604: LIST
91605: LIST
91606: LIST
91607: LIST
91608: PUSH
91609: LD_INT 101
91611: PUSH
91612: LD_INT 102
91614: PUSH
91615: LD_INT 105
91617: PUSH
91618: LD_INT 106
91620: PUSH
91621: LD_INT 108
91623: PUSH
91624: EMPTY
91625: LIST
91626: LIST
91627: LIST
91628: LIST
91629: LIST
91630: PUSH
91631: EMPTY
91632: LIST
91633: LIST
91634: ST_TO_ADDR
91635: GO 94238
91637: LD_INT 5
91639: DOUBLE
91640: EQUAL
91641: IFTRUE 91645
91643: GO 91745
91645: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
91646: LD_ADDR_VAR 0 1
91650: PUSH
91651: LD_INT 2
91653: PUSH
91654: LD_INT 4
91656: PUSH
91657: LD_INT 5
91659: PUSH
91660: LD_INT 6
91662: PUSH
91663: LD_INT 8
91665: PUSH
91666: LD_INT 11
91668: PUSH
91669: LD_INT 12
91671: PUSH
91672: LD_INT 15
91674: PUSH
91675: LD_INT 16
91677: PUSH
91678: LD_INT 22
91680: PUSH
91681: LD_INT 23
91683: PUSH
91684: LD_INT 25
91686: PUSH
91687: LD_INT 26
91689: PUSH
91690: LD_INT 36
91692: PUSH
91693: EMPTY
91694: LIST
91695: LIST
91696: LIST
91697: LIST
91698: LIST
91699: LIST
91700: LIST
91701: LIST
91702: LIST
91703: LIST
91704: LIST
91705: LIST
91706: LIST
91707: LIST
91708: PUSH
91709: LD_INT 101
91711: PUSH
91712: LD_INT 102
91714: PUSH
91715: LD_INT 105
91717: PUSH
91718: LD_INT 106
91720: PUSH
91721: LD_INT 108
91723: PUSH
91724: LD_INT 109
91726: PUSH
91727: LD_INT 112
91729: PUSH
91730: EMPTY
91731: LIST
91732: LIST
91733: LIST
91734: LIST
91735: LIST
91736: LIST
91737: LIST
91738: PUSH
91739: EMPTY
91740: LIST
91741: LIST
91742: ST_TO_ADDR
91743: GO 94238
91745: LD_INT 6
91747: DOUBLE
91748: EQUAL
91749: IFTRUE 91753
91751: GO 91873
91753: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
91754: LD_ADDR_VAR 0 1
91758: PUSH
91759: LD_INT 2
91761: PUSH
91762: LD_INT 4
91764: PUSH
91765: LD_INT 5
91767: PUSH
91768: LD_INT 6
91770: PUSH
91771: LD_INT 8
91773: PUSH
91774: LD_INT 11
91776: PUSH
91777: LD_INT 12
91779: PUSH
91780: LD_INT 15
91782: PUSH
91783: LD_INT 16
91785: PUSH
91786: LD_INT 20
91788: PUSH
91789: LD_INT 21
91791: PUSH
91792: LD_INT 22
91794: PUSH
91795: LD_INT 23
91797: PUSH
91798: LD_INT 25
91800: PUSH
91801: LD_INT 26
91803: PUSH
91804: LD_INT 30
91806: PUSH
91807: LD_INT 31
91809: PUSH
91810: LD_INT 32
91812: PUSH
91813: LD_INT 36
91815: PUSH
91816: EMPTY
91817: LIST
91818: LIST
91819: LIST
91820: LIST
91821: LIST
91822: LIST
91823: LIST
91824: LIST
91825: LIST
91826: LIST
91827: LIST
91828: LIST
91829: LIST
91830: LIST
91831: LIST
91832: LIST
91833: LIST
91834: LIST
91835: LIST
91836: PUSH
91837: LD_INT 101
91839: PUSH
91840: LD_INT 102
91842: PUSH
91843: LD_INT 105
91845: PUSH
91846: LD_INT 106
91848: PUSH
91849: LD_INT 108
91851: PUSH
91852: LD_INT 109
91854: PUSH
91855: LD_INT 112
91857: PUSH
91858: EMPTY
91859: LIST
91860: LIST
91861: LIST
91862: LIST
91863: LIST
91864: LIST
91865: LIST
91866: PUSH
91867: EMPTY
91868: LIST
91869: LIST
91870: ST_TO_ADDR
91871: GO 94238
91873: LD_INT 7
91875: DOUBLE
91876: EQUAL
91877: IFTRUE 91881
91879: GO 91981
91881: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
91882: LD_ADDR_VAR 0 1
91886: PUSH
91887: LD_INT 2
91889: PUSH
91890: LD_INT 4
91892: PUSH
91893: LD_INT 5
91895: PUSH
91896: LD_INT 7
91898: PUSH
91899: LD_INT 11
91901: PUSH
91902: LD_INT 12
91904: PUSH
91905: LD_INT 15
91907: PUSH
91908: LD_INT 16
91910: PUSH
91911: LD_INT 20
91913: PUSH
91914: LD_INT 21
91916: PUSH
91917: LD_INT 22
91919: PUSH
91920: LD_INT 23
91922: PUSH
91923: LD_INT 25
91925: PUSH
91926: LD_INT 26
91928: PUSH
91929: EMPTY
91930: LIST
91931: LIST
91932: LIST
91933: LIST
91934: LIST
91935: LIST
91936: LIST
91937: LIST
91938: LIST
91939: LIST
91940: LIST
91941: LIST
91942: LIST
91943: LIST
91944: PUSH
91945: LD_INT 101
91947: PUSH
91948: LD_INT 102
91950: PUSH
91951: LD_INT 103
91953: PUSH
91954: LD_INT 105
91956: PUSH
91957: LD_INT 106
91959: PUSH
91960: LD_INT 108
91962: PUSH
91963: LD_INT 112
91965: PUSH
91966: EMPTY
91967: LIST
91968: LIST
91969: LIST
91970: LIST
91971: LIST
91972: LIST
91973: LIST
91974: PUSH
91975: EMPTY
91976: LIST
91977: LIST
91978: ST_TO_ADDR
91979: GO 94238
91981: LD_INT 8
91983: DOUBLE
91984: EQUAL
91985: IFTRUE 91989
91987: GO 92117
91989: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
91990: LD_ADDR_VAR 0 1
91994: PUSH
91995: LD_INT 2
91997: PUSH
91998: LD_INT 4
92000: PUSH
92001: LD_INT 5
92003: PUSH
92004: LD_INT 6
92006: PUSH
92007: LD_INT 7
92009: PUSH
92010: LD_INT 8
92012: PUSH
92013: LD_INT 11
92015: PUSH
92016: LD_INT 12
92018: PUSH
92019: LD_INT 15
92021: PUSH
92022: LD_INT 16
92024: PUSH
92025: LD_INT 20
92027: PUSH
92028: LD_INT 21
92030: PUSH
92031: LD_INT 22
92033: PUSH
92034: LD_INT 23
92036: PUSH
92037: LD_INT 25
92039: PUSH
92040: LD_INT 26
92042: PUSH
92043: LD_INT 30
92045: PUSH
92046: LD_INT 31
92048: PUSH
92049: LD_INT 32
92051: PUSH
92052: LD_INT 36
92054: PUSH
92055: EMPTY
92056: LIST
92057: LIST
92058: LIST
92059: LIST
92060: LIST
92061: LIST
92062: LIST
92063: LIST
92064: LIST
92065: LIST
92066: LIST
92067: LIST
92068: LIST
92069: LIST
92070: LIST
92071: LIST
92072: LIST
92073: LIST
92074: LIST
92075: LIST
92076: PUSH
92077: LD_INT 101
92079: PUSH
92080: LD_INT 102
92082: PUSH
92083: LD_INT 103
92085: PUSH
92086: LD_INT 105
92088: PUSH
92089: LD_INT 106
92091: PUSH
92092: LD_INT 108
92094: PUSH
92095: LD_INT 109
92097: PUSH
92098: LD_INT 112
92100: PUSH
92101: EMPTY
92102: LIST
92103: LIST
92104: LIST
92105: LIST
92106: LIST
92107: LIST
92108: LIST
92109: LIST
92110: PUSH
92111: EMPTY
92112: LIST
92113: LIST
92114: ST_TO_ADDR
92115: GO 94238
92117: LD_INT 9
92119: DOUBLE
92120: EQUAL
92121: IFTRUE 92125
92123: GO 92261
92125: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
92126: LD_ADDR_VAR 0 1
92130: PUSH
92131: LD_INT 2
92133: PUSH
92134: LD_INT 4
92136: PUSH
92137: LD_INT 5
92139: PUSH
92140: LD_INT 6
92142: PUSH
92143: LD_INT 7
92145: PUSH
92146: LD_INT 8
92148: PUSH
92149: LD_INT 11
92151: PUSH
92152: LD_INT 12
92154: PUSH
92155: LD_INT 15
92157: PUSH
92158: LD_INT 16
92160: PUSH
92161: LD_INT 20
92163: PUSH
92164: LD_INT 21
92166: PUSH
92167: LD_INT 22
92169: PUSH
92170: LD_INT 23
92172: PUSH
92173: LD_INT 25
92175: PUSH
92176: LD_INT 26
92178: PUSH
92179: LD_INT 28
92181: PUSH
92182: LD_INT 30
92184: PUSH
92185: LD_INT 31
92187: PUSH
92188: LD_INT 32
92190: PUSH
92191: LD_INT 36
92193: PUSH
92194: EMPTY
92195: LIST
92196: LIST
92197: LIST
92198: LIST
92199: LIST
92200: LIST
92201: LIST
92202: LIST
92203: LIST
92204: LIST
92205: LIST
92206: LIST
92207: LIST
92208: LIST
92209: LIST
92210: LIST
92211: LIST
92212: LIST
92213: LIST
92214: LIST
92215: LIST
92216: PUSH
92217: LD_INT 101
92219: PUSH
92220: LD_INT 102
92222: PUSH
92223: LD_INT 103
92225: PUSH
92226: LD_INT 105
92228: PUSH
92229: LD_INT 106
92231: PUSH
92232: LD_INT 108
92234: PUSH
92235: LD_INT 109
92237: PUSH
92238: LD_INT 112
92240: PUSH
92241: LD_INT 114
92243: PUSH
92244: EMPTY
92245: LIST
92246: LIST
92247: LIST
92248: LIST
92249: LIST
92250: LIST
92251: LIST
92252: LIST
92253: LIST
92254: PUSH
92255: EMPTY
92256: LIST
92257: LIST
92258: ST_TO_ADDR
92259: GO 94238
92261: LD_INT 10
92263: DOUBLE
92264: EQUAL
92265: IFTRUE 92269
92267: GO 92453
92269: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
92270: LD_ADDR_VAR 0 1
92274: PUSH
92275: LD_INT 2
92277: PUSH
92278: LD_INT 4
92280: PUSH
92281: LD_INT 5
92283: PUSH
92284: LD_INT 6
92286: PUSH
92287: LD_INT 7
92289: PUSH
92290: LD_INT 8
92292: PUSH
92293: LD_INT 9
92295: PUSH
92296: LD_INT 10
92298: PUSH
92299: LD_INT 11
92301: PUSH
92302: LD_INT 12
92304: PUSH
92305: LD_INT 13
92307: PUSH
92308: LD_INT 14
92310: PUSH
92311: LD_INT 15
92313: PUSH
92314: LD_INT 16
92316: PUSH
92317: LD_INT 17
92319: PUSH
92320: LD_INT 18
92322: PUSH
92323: LD_INT 19
92325: PUSH
92326: LD_INT 20
92328: PUSH
92329: LD_INT 21
92331: PUSH
92332: LD_INT 22
92334: PUSH
92335: LD_INT 23
92337: PUSH
92338: LD_INT 24
92340: PUSH
92341: LD_INT 25
92343: PUSH
92344: LD_INT 26
92346: PUSH
92347: LD_INT 28
92349: PUSH
92350: LD_INT 30
92352: PUSH
92353: LD_INT 31
92355: PUSH
92356: LD_INT 32
92358: PUSH
92359: LD_INT 36
92361: PUSH
92362: EMPTY
92363: LIST
92364: LIST
92365: LIST
92366: LIST
92367: LIST
92368: LIST
92369: LIST
92370: LIST
92371: LIST
92372: LIST
92373: LIST
92374: LIST
92375: LIST
92376: LIST
92377: LIST
92378: LIST
92379: LIST
92380: LIST
92381: LIST
92382: LIST
92383: LIST
92384: LIST
92385: LIST
92386: LIST
92387: LIST
92388: LIST
92389: LIST
92390: LIST
92391: LIST
92392: PUSH
92393: LD_INT 101
92395: PUSH
92396: LD_INT 102
92398: PUSH
92399: LD_INT 103
92401: PUSH
92402: LD_INT 104
92404: PUSH
92405: LD_INT 105
92407: PUSH
92408: LD_INT 106
92410: PUSH
92411: LD_INT 107
92413: PUSH
92414: LD_INT 108
92416: PUSH
92417: LD_INT 109
92419: PUSH
92420: LD_INT 110
92422: PUSH
92423: LD_INT 111
92425: PUSH
92426: LD_INT 112
92428: PUSH
92429: LD_INT 114
92431: PUSH
92432: EMPTY
92433: LIST
92434: LIST
92435: LIST
92436: LIST
92437: LIST
92438: LIST
92439: LIST
92440: LIST
92441: LIST
92442: LIST
92443: LIST
92444: LIST
92445: LIST
92446: PUSH
92447: EMPTY
92448: LIST
92449: LIST
92450: ST_TO_ADDR
92451: GO 94238
92453: LD_INT 11
92455: DOUBLE
92456: EQUAL
92457: IFTRUE 92461
92459: GO 92653
92461: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
92462: LD_ADDR_VAR 0 1
92466: PUSH
92467: LD_INT 2
92469: PUSH
92470: LD_INT 3
92472: PUSH
92473: LD_INT 4
92475: PUSH
92476: LD_INT 5
92478: PUSH
92479: LD_INT 6
92481: PUSH
92482: LD_INT 7
92484: PUSH
92485: LD_INT 8
92487: PUSH
92488: LD_INT 9
92490: PUSH
92491: LD_INT 10
92493: PUSH
92494: LD_INT 11
92496: PUSH
92497: LD_INT 12
92499: PUSH
92500: LD_INT 13
92502: PUSH
92503: LD_INT 14
92505: PUSH
92506: LD_INT 15
92508: PUSH
92509: LD_INT 16
92511: PUSH
92512: LD_INT 17
92514: PUSH
92515: LD_INT 18
92517: PUSH
92518: LD_INT 19
92520: PUSH
92521: LD_INT 20
92523: PUSH
92524: LD_INT 21
92526: PUSH
92527: LD_INT 22
92529: PUSH
92530: LD_INT 23
92532: PUSH
92533: LD_INT 24
92535: PUSH
92536: LD_INT 25
92538: PUSH
92539: LD_INT 26
92541: PUSH
92542: LD_INT 28
92544: PUSH
92545: LD_INT 30
92547: PUSH
92548: LD_INT 31
92550: PUSH
92551: LD_INT 32
92553: PUSH
92554: LD_INT 34
92556: PUSH
92557: LD_INT 36
92559: PUSH
92560: EMPTY
92561: LIST
92562: LIST
92563: LIST
92564: LIST
92565: LIST
92566: LIST
92567: LIST
92568: LIST
92569: LIST
92570: LIST
92571: LIST
92572: LIST
92573: LIST
92574: LIST
92575: LIST
92576: LIST
92577: LIST
92578: LIST
92579: LIST
92580: LIST
92581: LIST
92582: LIST
92583: LIST
92584: LIST
92585: LIST
92586: LIST
92587: LIST
92588: LIST
92589: LIST
92590: LIST
92591: LIST
92592: PUSH
92593: LD_INT 101
92595: PUSH
92596: LD_INT 102
92598: PUSH
92599: LD_INT 103
92601: PUSH
92602: LD_INT 104
92604: PUSH
92605: LD_INT 105
92607: PUSH
92608: LD_INT 106
92610: PUSH
92611: LD_INT 107
92613: PUSH
92614: LD_INT 108
92616: PUSH
92617: LD_INT 109
92619: PUSH
92620: LD_INT 110
92622: PUSH
92623: LD_INT 111
92625: PUSH
92626: LD_INT 112
92628: PUSH
92629: LD_INT 114
92631: PUSH
92632: EMPTY
92633: LIST
92634: LIST
92635: LIST
92636: LIST
92637: LIST
92638: LIST
92639: LIST
92640: LIST
92641: LIST
92642: LIST
92643: LIST
92644: LIST
92645: LIST
92646: PUSH
92647: EMPTY
92648: LIST
92649: LIST
92650: ST_TO_ADDR
92651: GO 94238
92653: LD_INT 12
92655: DOUBLE
92656: EQUAL
92657: IFTRUE 92661
92659: GO 92869
92661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
92662: LD_ADDR_VAR 0 1
92666: PUSH
92667: LD_INT 1
92669: PUSH
92670: LD_INT 2
92672: PUSH
92673: LD_INT 3
92675: PUSH
92676: LD_INT 4
92678: PUSH
92679: LD_INT 5
92681: PUSH
92682: LD_INT 6
92684: PUSH
92685: LD_INT 7
92687: PUSH
92688: LD_INT 8
92690: PUSH
92691: LD_INT 9
92693: PUSH
92694: LD_INT 10
92696: PUSH
92697: LD_INT 11
92699: PUSH
92700: LD_INT 12
92702: PUSH
92703: LD_INT 13
92705: PUSH
92706: LD_INT 14
92708: PUSH
92709: LD_INT 15
92711: PUSH
92712: LD_INT 16
92714: PUSH
92715: LD_INT 17
92717: PUSH
92718: LD_INT 18
92720: PUSH
92721: LD_INT 19
92723: PUSH
92724: LD_INT 20
92726: PUSH
92727: LD_INT 21
92729: PUSH
92730: LD_INT 22
92732: PUSH
92733: LD_INT 23
92735: PUSH
92736: LD_INT 24
92738: PUSH
92739: LD_INT 25
92741: PUSH
92742: LD_INT 26
92744: PUSH
92745: LD_INT 27
92747: PUSH
92748: LD_INT 28
92750: PUSH
92751: LD_INT 30
92753: PUSH
92754: LD_INT 31
92756: PUSH
92757: LD_INT 32
92759: PUSH
92760: LD_INT 33
92762: PUSH
92763: LD_INT 34
92765: PUSH
92766: LD_INT 36
92768: PUSH
92769: EMPTY
92770: LIST
92771: LIST
92772: LIST
92773: LIST
92774: LIST
92775: LIST
92776: LIST
92777: LIST
92778: LIST
92779: LIST
92780: LIST
92781: LIST
92782: LIST
92783: LIST
92784: LIST
92785: LIST
92786: LIST
92787: LIST
92788: LIST
92789: LIST
92790: LIST
92791: LIST
92792: LIST
92793: LIST
92794: LIST
92795: LIST
92796: LIST
92797: LIST
92798: LIST
92799: LIST
92800: LIST
92801: LIST
92802: LIST
92803: LIST
92804: PUSH
92805: LD_INT 101
92807: PUSH
92808: LD_INT 102
92810: PUSH
92811: LD_INT 103
92813: PUSH
92814: LD_INT 104
92816: PUSH
92817: LD_INT 105
92819: PUSH
92820: LD_INT 106
92822: PUSH
92823: LD_INT 107
92825: PUSH
92826: LD_INT 108
92828: PUSH
92829: LD_INT 109
92831: PUSH
92832: LD_INT 110
92834: PUSH
92835: LD_INT 111
92837: PUSH
92838: LD_INT 112
92840: PUSH
92841: LD_INT 113
92843: PUSH
92844: LD_INT 114
92846: PUSH
92847: EMPTY
92848: LIST
92849: LIST
92850: LIST
92851: LIST
92852: LIST
92853: LIST
92854: LIST
92855: LIST
92856: LIST
92857: LIST
92858: LIST
92859: LIST
92860: LIST
92861: LIST
92862: PUSH
92863: EMPTY
92864: LIST
92865: LIST
92866: ST_TO_ADDR
92867: GO 94238
92869: LD_INT 13
92871: DOUBLE
92872: EQUAL
92873: IFTRUE 92877
92875: GO 93073
92877: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
92878: LD_ADDR_VAR 0 1
92882: PUSH
92883: LD_INT 1
92885: PUSH
92886: LD_INT 2
92888: PUSH
92889: LD_INT 3
92891: PUSH
92892: LD_INT 4
92894: PUSH
92895: LD_INT 5
92897: PUSH
92898: LD_INT 8
92900: PUSH
92901: LD_INT 9
92903: PUSH
92904: LD_INT 10
92906: PUSH
92907: LD_INT 11
92909: PUSH
92910: LD_INT 12
92912: PUSH
92913: LD_INT 14
92915: PUSH
92916: LD_INT 15
92918: PUSH
92919: LD_INT 16
92921: PUSH
92922: LD_INT 17
92924: PUSH
92925: LD_INT 18
92927: PUSH
92928: LD_INT 19
92930: PUSH
92931: LD_INT 20
92933: PUSH
92934: LD_INT 21
92936: PUSH
92937: LD_INT 22
92939: PUSH
92940: LD_INT 23
92942: PUSH
92943: LD_INT 24
92945: PUSH
92946: LD_INT 25
92948: PUSH
92949: LD_INT 26
92951: PUSH
92952: LD_INT 27
92954: PUSH
92955: LD_INT 28
92957: PUSH
92958: LD_INT 30
92960: PUSH
92961: LD_INT 31
92963: PUSH
92964: LD_INT 32
92966: PUSH
92967: LD_INT 33
92969: PUSH
92970: LD_INT 34
92972: PUSH
92973: LD_INT 36
92975: PUSH
92976: EMPTY
92977: LIST
92978: LIST
92979: LIST
92980: LIST
92981: LIST
92982: LIST
92983: LIST
92984: LIST
92985: LIST
92986: LIST
92987: LIST
92988: LIST
92989: LIST
92990: LIST
92991: LIST
92992: LIST
92993: LIST
92994: LIST
92995: LIST
92996: LIST
92997: LIST
92998: LIST
92999: LIST
93000: LIST
93001: LIST
93002: LIST
93003: LIST
93004: LIST
93005: LIST
93006: LIST
93007: LIST
93008: PUSH
93009: LD_INT 101
93011: PUSH
93012: LD_INT 102
93014: PUSH
93015: LD_INT 103
93017: PUSH
93018: LD_INT 104
93020: PUSH
93021: LD_INT 105
93023: PUSH
93024: LD_INT 106
93026: PUSH
93027: LD_INT 107
93029: PUSH
93030: LD_INT 108
93032: PUSH
93033: LD_INT 109
93035: PUSH
93036: LD_INT 110
93038: PUSH
93039: LD_INT 111
93041: PUSH
93042: LD_INT 112
93044: PUSH
93045: LD_INT 113
93047: PUSH
93048: LD_INT 114
93050: PUSH
93051: EMPTY
93052: LIST
93053: LIST
93054: LIST
93055: LIST
93056: LIST
93057: LIST
93058: LIST
93059: LIST
93060: LIST
93061: LIST
93062: LIST
93063: LIST
93064: LIST
93065: LIST
93066: PUSH
93067: EMPTY
93068: LIST
93069: LIST
93070: ST_TO_ADDR
93071: GO 94238
93073: LD_INT 14
93075: DOUBLE
93076: EQUAL
93077: IFTRUE 93081
93079: GO 93293
93081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
93082: LD_ADDR_VAR 0 1
93086: PUSH
93087: LD_INT 1
93089: PUSH
93090: LD_INT 2
93092: PUSH
93093: LD_INT 3
93095: PUSH
93096: LD_INT 4
93098: PUSH
93099: LD_INT 5
93101: PUSH
93102: LD_INT 6
93104: PUSH
93105: LD_INT 7
93107: PUSH
93108: LD_INT 8
93110: PUSH
93111: LD_INT 9
93113: PUSH
93114: LD_INT 10
93116: PUSH
93117: LD_INT 11
93119: PUSH
93120: LD_INT 12
93122: PUSH
93123: LD_INT 13
93125: PUSH
93126: LD_INT 14
93128: PUSH
93129: LD_INT 15
93131: PUSH
93132: LD_INT 16
93134: PUSH
93135: LD_INT 17
93137: PUSH
93138: LD_INT 18
93140: PUSH
93141: LD_INT 19
93143: PUSH
93144: LD_INT 20
93146: PUSH
93147: LD_INT 21
93149: PUSH
93150: LD_INT 22
93152: PUSH
93153: LD_INT 23
93155: PUSH
93156: LD_INT 24
93158: PUSH
93159: LD_INT 25
93161: PUSH
93162: LD_INT 26
93164: PUSH
93165: LD_INT 27
93167: PUSH
93168: LD_INT 28
93170: PUSH
93171: LD_INT 29
93173: PUSH
93174: LD_INT 30
93176: PUSH
93177: LD_INT 31
93179: PUSH
93180: LD_INT 32
93182: PUSH
93183: LD_INT 33
93185: PUSH
93186: LD_INT 34
93188: PUSH
93189: LD_INT 36
93191: PUSH
93192: EMPTY
93193: LIST
93194: LIST
93195: LIST
93196: LIST
93197: LIST
93198: LIST
93199: LIST
93200: LIST
93201: LIST
93202: LIST
93203: LIST
93204: LIST
93205: LIST
93206: LIST
93207: LIST
93208: LIST
93209: LIST
93210: LIST
93211: LIST
93212: LIST
93213: LIST
93214: LIST
93215: LIST
93216: LIST
93217: LIST
93218: LIST
93219: LIST
93220: LIST
93221: LIST
93222: LIST
93223: LIST
93224: LIST
93225: LIST
93226: LIST
93227: LIST
93228: PUSH
93229: LD_INT 101
93231: PUSH
93232: LD_INT 102
93234: PUSH
93235: LD_INT 103
93237: PUSH
93238: LD_INT 104
93240: PUSH
93241: LD_INT 105
93243: PUSH
93244: LD_INT 106
93246: PUSH
93247: LD_INT 107
93249: PUSH
93250: LD_INT 108
93252: PUSH
93253: LD_INT 109
93255: PUSH
93256: LD_INT 110
93258: PUSH
93259: LD_INT 111
93261: PUSH
93262: LD_INT 112
93264: PUSH
93265: LD_INT 113
93267: PUSH
93268: LD_INT 114
93270: PUSH
93271: EMPTY
93272: LIST
93273: LIST
93274: LIST
93275: LIST
93276: LIST
93277: LIST
93278: LIST
93279: LIST
93280: LIST
93281: LIST
93282: LIST
93283: LIST
93284: LIST
93285: LIST
93286: PUSH
93287: EMPTY
93288: LIST
93289: LIST
93290: ST_TO_ADDR
93291: GO 94238
93293: LD_INT 15
93295: DOUBLE
93296: EQUAL
93297: IFTRUE 93301
93299: GO 93513
93301: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
93302: LD_ADDR_VAR 0 1
93306: PUSH
93307: LD_INT 1
93309: PUSH
93310: LD_INT 2
93312: PUSH
93313: LD_INT 3
93315: PUSH
93316: LD_INT 4
93318: PUSH
93319: LD_INT 5
93321: PUSH
93322: LD_INT 6
93324: PUSH
93325: LD_INT 7
93327: PUSH
93328: LD_INT 8
93330: PUSH
93331: LD_INT 9
93333: PUSH
93334: LD_INT 10
93336: PUSH
93337: LD_INT 11
93339: PUSH
93340: LD_INT 12
93342: PUSH
93343: LD_INT 13
93345: PUSH
93346: LD_INT 14
93348: PUSH
93349: LD_INT 15
93351: PUSH
93352: LD_INT 16
93354: PUSH
93355: LD_INT 17
93357: PUSH
93358: LD_INT 18
93360: PUSH
93361: LD_INT 19
93363: PUSH
93364: LD_INT 20
93366: PUSH
93367: LD_INT 21
93369: PUSH
93370: LD_INT 22
93372: PUSH
93373: LD_INT 23
93375: PUSH
93376: LD_INT 24
93378: PUSH
93379: LD_INT 25
93381: PUSH
93382: LD_INT 26
93384: PUSH
93385: LD_INT 27
93387: PUSH
93388: LD_INT 28
93390: PUSH
93391: LD_INT 29
93393: PUSH
93394: LD_INT 30
93396: PUSH
93397: LD_INT 31
93399: PUSH
93400: LD_INT 32
93402: PUSH
93403: LD_INT 33
93405: PUSH
93406: LD_INT 34
93408: PUSH
93409: LD_INT 36
93411: PUSH
93412: EMPTY
93413: LIST
93414: LIST
93415: LIST
93416: LIST
93417: LIST
93418: LIST
93419: LIST
93420: LIST
93421: LIST
93422: LIST
93423: LIST
93424: LIST
93425: LIST
93426: LIST
93427: LIST
93428: LIST
93429: LIST
93430: LIST
93431: LIST
93432: LIST
93433: LIST
93434: LIST
93435: LIST
93436: LIST
93437: LIST
93438: LIST
93439: LIST
93440: LIST
93441: LIST
93442: LIST
93443: LIST
93444: LIST
93445: LIST
93446: LIST
93447: LIST
93448: PUSH
93449: LD_INT 101
93451: PUSH
93452: LD_INT 102
93454: PUSH
93455: LD_INT 103
93457: PUSH
93458: LD_INT 104
93460: PUSH
93461: LD_INT 105
93463: PUSH
93464: LD_INT 106
93466: PUSH
93467: LD_INT 107
93469: PUSH
93470: LD_INT 108
93472: PUSH
93473: LD_INT 109
93475: PUSH
93476: LD_INT 110
93478: PUSH
93479: LD_INT 111
93481: PUSH
93482: LD_INT 112
93484: PUSH
93485: LD_INT 113
93487: PUSH
93488: LD_INT 114
93490: PUSH
93491: EMPTY
93492: LIST
93493: LIST
93494: LIST
93495: LIST
93496: LIST
93497: LIST
93498: LIST
93499: LIST
93500: LIST
93501: LIST
93502: LIST
93503: LIST
93504: LIST
93505: LIST
93506: PUSH
93507: EMPTY
93508: LIST
93509: LIST
93510: ST_TO_ADDR
93511: GO 94238
93513: LD_INT 16
93515: DOUBLE
93516: EQUAL
93517: IFTRUE 93521
93519: GO 93645
93521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
93522: LD_ADDR_VAR 0 1
93526: PUSH
93527: LD_INT 2
93529: PUSH
93530: LD_INT 4
93532: PUSH
93533: LD_INT 5
93535: PUSH
93536: LD_INT 7
93538: PUSH
93539: LD_INT 11
93541: PUSH
93542: LD_INT 12
93544: PUSH
93545: LD_INT 15
93547: PUSH
93548: LD_INT 16
93550: PUSH
93551: LD_INT 20
93553: PUSH
93554: LD_INT 21
93556: PUSH
93557: LD_INT 22
93559: PUSH
93560: LD_INT 23
93562: PUSH
93563: LD_INT 25
93565: PUSH
93566: LD_INT 26
93568: PUSH
93569: LD_INT 30
93571: PUSH
93572: LD_INT 31
93574: PUSH
93575: LD_INT 32
93577: PUSH
93578: LD_INT 33
93580: PUSH
93581: LD_INT 34
93583: PUSH
93584: EMPTY
93585: LIST
93586: LIST
93587: LIST
93588: LIST
93589: LIST
93590: LIST
93591: LIST
93592: LIST
93593: LIST
93594: LIST
93595: LIST
93596: LIST
93597: LIST
93598: LIST
93599: LIST
93600: LIST
93601: LIST
93602: LIST
93603: LIST
93604: PUSH
93605: LD_INT 101
93607: PUSH
93608: LD_INT 102
93610: PUSH
93611: LD_INT 103
93613: PUSH
93614: LD_INT 106
93616: PUSH
93617: LD_INT 108
93619: PUSH
93620: LD_INT 112
93622: PUSH
93623: LD_INT 113
93625: PUSH
93626: LD_INT 114
93628: PUSH
93629: EMPTY
93630: LIST
93631: LIST
93632: LIST
93633: LIST
93634: LIST
93635: LIST
93636: LIST
93637: LIST
93638: PUSH
93639: EMPTY
93640: LIST
93641: LIST
93642: ST_TO_ADDR
93643: GO 94238
93645: LD_INT 17
93647: DOUBLE
93648: EQUAL
93649: IFTRUE 93653
93651: GO 93865
93653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
93654: LD_ADDR_VAR 0 1
93658: PUSH
93659: LD_INT 1
93661: PUSH
93662: LD_INT 2
93664: PUSH
93665: LD_INT 3
93667: PUSH
93668: LD_INT 4
93670: PUSH
93671: LD_INT 5
93673: PUSH
93674: LD_INT 6
93676: PUSH
93677: LD_INT 7
93679: PUSH
93680: LD_INT 8
93682: PUSH
93683: LD_INT 9
93685: PUSH
93686: LD_INT 10
93688: PUSH
93689: LD_INT 11
93691: PUSH
93692: LD_INT 12
93694: PUSH
93695: LD_INT 13
93697: PUSH
93698: LD_INT 14
93700: PUSH
93701: LD_INT 15
93703: PUSH
93704: LD_INT 16
93706: PUSH
93707: LD_INT 17
93709: PUSH
93710: LD_INT 18
93712: PUSH
93713: LD_INT 19
93715: PUSH
93716: LD_INT 20
93718: PUSH
93719: LD_INT 21
93721: PUSH
93722: LD_INT 22
93724: PUSH
93725: LD_INT 23
93727: PUSH
93728: LD_INT 24
93730: PUSH
93731: LD_INT 25
93733: PUSH
93734: LD_INT 26
93736: PUSH
93737: LD_INT 27
93739: PUSH
93740: LD_INT 28
93742: PUSH
93743: LD_INT 29
93745: PUSH
93746: LD_INT 30
93748: PUSH
93749: LD_INT 31
93751: PUSH
93752: LD_INT 32
93754: PUSH
93755: LD_INT 33
93757: PUSH
93758: LD_INT 34
93760: PUSH
93761: LD_INT 36
93763: PUSH
93764: EMPTY
93765: LIST
93766: LIST
93767: LIST
93768: LIST
93769: LIST
93770: LIST
93771: LIST
93772: LIST
93773: LIST
93774: LIST
93775: LIST
93776: LIST
93777: LIST
93778: LIST
93779: LIST
93780: LIST
93781: LIST
93782: LIST
93783: LIST
93784: LIST
93785: LIST
93786: LIST
93787: LIST
93788: LIST
93789: LIST
93790: LIST
93791: LIST
93792: LIST
93793: LIST
93794: LIST
93795: LIST
93796: LIST
93797: LIST
93798: LIST
93799: LIST
93800: PUSH
93801: LD_INT 101
93803: PUSH
93804: LD_INT 102
93806: PUSH
93807: LD_INT 103
93809: PUSH
93810: LD_INT 104
93812: PUSH
93813: LD_INT 105
93815: PUSH
93816: LD_INT 106
93818: PUSH
93819: LD_INT 107
93821: PUSH
93822: LD_INT 108
93824: PUSH
93825: LD_INT 109
93827: PUSH
93828: LD_INT 110
93830: PUSH
93831: LD_INT 111
93833: PUSH
93834: LD_INT 112
93836: PUSH
93837: LD_INT 113
93839: PUSH
93840: LD_INT 114
93842: PUSH
93843: EMPTY
93844: LIST
93845: LIST
93846: LIST
93847: LIST
93848: LIST
93849: LIST
93850: LIST
93851: LIST
93852: LIST
93853: LIST
93854: LIST
93855: LIST
93856: LIST
93857: LIST
93858: PUSH
93859: EMPTY
93860: LIST
93861: LIST
93862: ST_TO_ADDR
93863: GO 94238
93865: LD_INT 18
93867: DOUBLE
93868: EQUAL
93869: IFTRUE 93873
93871: GO 94009
93873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
93874: LD_ADDR_VAR 0 1
93878: PUSH
93879: LD_INT 2
93881: PUSH
93882: LD_INT 4
93884: PUSH
93885: LD_INT 5
93887: PUSH
93888: LD_INT 7
93890: PUSH
93891: LD_INT 11
93893: PUSH
93894: LD_INT 12
93896: PUSH
93897: LD_INT 15
93899: PUSH
93900: LD_INT 16
93902: PUSH
93903: LD_INT 20
93905: PUSH
93906: LD_INT 21
93908: PUSH
93909: LD_INT 22
93911: PUSH
93912: LD_INT 23
93914: PUSH
93915: LD_INT 25
93917: PUSH
93918: LD_INT 26
93920: PUSH
93921: LD_INT 30
93923: PUSH
93924: LD_INT 31
93926: PUSH
93927: LD_INT 32
93929: PUSH
93930: LD_INT 33
93932: PUSH
93933: LD_INT 34
93935: PUSH
93936: LD_INT 35
93938: PUSH
93939: LD_INT 36
93941: PUSH
93942: EMPTY
93943: LIST
93944: LIST
93945: LIST
93946: LIST
93947: LIST
93948: LIST
93949: LIST
93950: LIST
93951: LIST
93952: LIST
93953: LIST
93954: LIST
93955: LIST
93956: LIST
93957: LIST
93958: LIST
93959: LIST
93960: LIST
93961: LIST
93962: LIST
93963: LIST
93964: PUSH
93965: LD_INT 101
93967: PUSH
93968: LD_INT 102
93970: PUSH
93971: LD_INT 103
93973: PUSH
93974: LD_INT 106
93976: PUSH
93977: LD_INT 108
93979: PUSH
93980: LD_INT 112
93982: PUSH
93983: LD_INT 113
93985: PUSH
93986: LD_INT 114
93988: PUSH
93989: LD_INT 115
93991: PUSH
93992: EMPTY
93993: LIST
93994: LIST
93995: LIST
93996: LIST
93997: LIST
93998: LIST
93999: LIST
94000: LIST
94001: LIST
94002: PUSH
94003: EMPTY
94004: LIST
94005: LIST
94006: ST_TO_ADDR
94007: GO 94238
94009: LD_INT 19
94011: DOUBLE
94012: EQUAL
94013: IFTRUE 94017
94015: GO 94237
94017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
94018: LD_ADDR_VAR 0 1
94022: PUSH
94023: LD_INT 1
94025: PUSH
94026: LD_INT 2
94028: PUSH
94029: LD_INT 3
94031: PUSH
94032: LD_INT 4
94034: PUSH
94035: LD_INT 5
94037: PUSH
94038: LD_INT 6
94040: PUSH
94041: LD_INT 7
94043: PUSH
94044: LD_INT 8
94046: PUSH
94047: LD_INT 9
94049: PUSH
94050: LD_INT 10
94052: PUSH
94053: LD_INT 11
94055: PUSH
94056: LD_INT 12
94058: PUSH
94059: LD_INT 13
94061: PUSH
94062: LD_INT 14
94064: PUSH
94065: LD_INT 15
94067: PUSH
94068: LD_INT 16
94070: PUSH
94071: LD_INT 17
94073: PUSH
94074: LD_INT 18
94076: PUSH
94077: LD_INT 19
94079: PUSH
94080: LD_INT 20
94082: PUSH
94083: LD_INT 21
94085: PUSH
94086: LD_INT 22
94088: PUSH
94089: LD_INT 23
94091: PUSH
94092: LD_INT 24
94094: PUSH
94095: LD_INT 25
94097: PUSH
94098: LD_INT 26
94100: PUSH
94101: LD_INT 27
94103: PUSH
94104: LD_INT 28
94106: PUSH
94107: LD_INT 29
94109: PUSH
94110: LD_INT 30
94112: PUSH
94113: LD_INT 31
94115: PUSH
94116: LD_INT 32
94118: PUSH
94119: LD_INT 33
94121: PUSH
94122: LD_INT 34
94124: PUSH
94125: LD_INT 35
94127: PUSH
94128: LD_INT 36
94130: PUSH
94131: EMPTY
94132: LIST
94133: LIST
94134: LIST
94135: LIST
94136: LIST
94137: LIST
94138: LIST
94139: LIST
94140: LIST
94141: LIST
94142: LIST
94143: LIST
94144: LIST
94145: LIST
94146: LIST
94147: LIST
94148: LIST
94149: LIST
94150: LIST
94151: LIST
94152: LIST
94153: LIST
94154: LIST
94155: LIST
94156: LIST
94157: LIST
94158: LIST
94159: LIST
94160: LIST
94161: LIST
94162: LIST
94163: LIST
94164: LIST
94165: LIST
94166: LIST
94167: LIST
94168: PUSH
94169: LD_INT 101
94171: PUSH
94172: LD_INT 102
94174: PUSH
94175: LD_INT 103
94177: PUSH
94178: LD_INT 104
94180: PUSH
94181: LD_INT 105
94183: PUSH
94184: LD_INT 106
94186: PUSH
94187: LD_INT 107
94189: PUSH
94190: LD_INT 108
94192: PUSH
94193: LD_INT 109
94195: PUSH
94196: LD_INT 110
94198: PUSH
94199: LD_INT 111
94201: PUSH
94202: LD_INT 112
94204: PUSH
94205: LD_INT 113
94207: PUSH
94208: LD_INT 114
94210: PUSH
94211: LD_INT 115
94213: PUSH
94214: EMPTY
94215: LIST
94216: LIST
94217: LIST
94218: LIST
94219: LIST
94220: LIST
94221: LIST
94222: LIST
94223: LIST
94224: LIST
94225: LIST
94226: LIST
94227: LIST
94228: LIST
94229: LIST
94230: PUSH
94231: EMPTY
94232: LIST
94233: LIST
94234: ST_TO_ADDR
94235: GO 94238
94237: POP
// end else
94238: GO 94275
// if campaign_id = 5 then
94240: LD_OWVAR 69
94244: PUSH
94245: LD_INT 5
94247: EQUAL
94248: IFFALSE 94275
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
94250: LD_ADDR_VAR 0 1
94254: PUSH
94255: LD_INT 1
94257: PUSH
94258: LD_INT 2
94260: PUSH
94261: EMPTY
94262: LIST
94263: LIST
94264: PUSH
94265: LD_INT 100
94267: PUSH
94268: EMPTY
94269: LIST
94270: PUSH
94271: EMPTY
94272: LIST
94273: LIST
94274: ST_TO_ADDR
// end ; if result then
94275: LD_VAR 0 1
94279: IFFALSE 94568
// begin normal :=  ;
94281: LD_ADDR_VAR 0 3
94285: PUSH
94286: LD_STRING 
94288: ST_TO_ADDR
// hardcore :=  ;
94289: LD_ADDR_VAR 0 4
94293: PUSH
94294: LD_STRING 
94296: ST_TO_ADDR
// for i = 1 to normalCounter do
94297: LD_ADDR_VAR 0 5
94301: PUSH
94302: DOUBLE
94303: LD_INT 1
94305: DEC
94306: ST_TO_ADDR
94307: LD_EXP 107
94311: PUSH
94312: FOR_TO
94313: IFFALSE 94414
// begin tmp := 0 ;
94315: LD_ADDR_VAR 0 2
94319: PUSH
94320: LD_STRING 0
94322: ST_TO_ADDR
// if result [ 1 ] then
94323: LD_VAR 0 1
94327: PUSH
94328: LD_INT 1
94330: ARRAY
94331: IFFALSE 94396
// if result [ 1 ] [ 1 ] = i then
94333: LD_VAR 0 1
94337: PUSH
94338: LD_INT 1
94340: ARRAY
94341: PUSH
94342: LD_INT 1
94344: ARRAY
94345: PUSH
94346: LD_VAR 0 5
94350: EQUAL
94351: IFFALSE 94396
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
94353: LD_ADDR_VAR 0 1
94357: PUSH
94358: LD_VAR 0 1
94362: PPUSH
94363: LD_INT 1
94365: PPUSH
94366: LD_VAR 0 1
94370: PUSH
94371: LD_INT 1
94373: ARRAY
94374: PPUSH
94375: LD_INT 1
94377: PPUSH
94378: CALL_OW 3
94382: PPUSH
94383: CALL_OW 1
94387: ST_TO_ADDR
// tmp := 1 ;
94388: LD_ADDR_VAR 0 2
94392: PUSH
94393: LD_STRING 1
94395: ST_TO_ADDR
// end ; normal := normal & tmp ;
94396: LD_ADDR_VAR 0 3
94400: PUSH
94401: LD_VAR 0 3
94405: PUSH
94406: LD_VAR 0 2
94410: STR
94411: ST_TO_ADDR
// end ;
94412: GO 94312
94414: POP
94415: POP
// for i = 1 to hardcoreCounter do
94416: LD_ADDR_VAR 0 5
94420: PUSH
94421: DOUBLE
94422: LD_INT 1
94424: DEC
94425: ST_TO_ADDR
94426: LD_EXP 108
94430: PUSH
94431: FOR_TO
94432: IFFALSE 94537
// begin tmp := 0 ;
94434: LD_ADDR_VAR 0 2
94438: PUSH
94439: LD_STRING 0
94441: ST_TO_ADDR
// if result [ 2 ] then
94442: LD_VAR 0 1
94446: PUSH
94447: LD_INT 2
94449: ARRAY
94450: IFFALSE 94519
// if result [ 2 ] [ 1 ] = 100 + i then
94452: LD_VAR 0 1
94456: PUSH
94457: LD_INT 2
94459: ARRAY
94460: PUSH
94461: LD_INT 1
94463: ARRAY
94464: PUSH
94465: LD_INT 100
94467: PUSH
94468: LD_VAR 0 5
94472: PLUS
94473: EQUAL
94474: IFFALSE 94519
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
94476: LD_ADDR_VAR 0 1
94480: PUSH
94481: LD_VAR 0 1
94485: PPUSH
94486: LD_INT 2
94488: PPUSH
94489: LD_VAR 0 1
94493: PUSH
94494: LD_INT 2
94496: ARRAY
94497: PPUSH
94498: LD_INT 1
94500: PPUSH
94501: CALL_OW 3
94505: PPUSH
94506: CALL_OW 1
94510: ST_TO_ADDR
// tmp := 1 ;
94511: LD_ADDR_VAR 0 2
94515: PUSH
94516: LD_STRING 1
94518: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
94519: LD_ADDR_VAR 0 4
94523: PUSH
94524: LD_VAR 0 4
94528: PUSH
94529: LD_VAR 0 2
94533: STR
94534: ST_TO_ADDR
// end ;
94535: GO 94431
94537: POP
94538: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
94539: LD_STRING getStreamItemsFromMission("
94541: PUSH
94542: LD_VAR 0 3
94546: STR
94547: PUSH
94548: LD_STRING ","
94550: STR
94551: PUSH
94552: LD_VAR 0 4
94556: STR
94557: PUSH
94558: LD_STRING ")
94560: STR
94561: PPUSH
94562: CALL_OW 559
// end else
94566: GO 94575
// ToLua ( getStreamItemsFromMission("","") ) ;
94568: LD_STRING getStreamItemsFromMission("","")
94570: PPUSH
94571: CALL_OW 559
// end ;
94575: LD_VAR 0 1
94579: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
94580: LD_VAR 0 2
94584: PUSH
94585: LD_INT 100
94587: EQUAL
94588: IFFALSE 95537
// begin if not StreamModeActive then
94590: LD_EXP 106
94594: NOT
94595: IFFALSE 94605
// StreamModeActive := true ;
94597: LD_ADDR_EXP 106
94601: PUSH
94602: LD_INT 1
94604: ST_TO_ADDR
// if p3 = 0 then
94605: LD_VAR 0 3
94609: PUSH
94610: LD_INT 0
94612: EQUAL
94613: IFFALSE 94619
// InitStreamMode ;
94615: CALL 90840 0 0
// if p3 = 1 then
94619: LD_VAR 0 3
94623: PUSH
94624: LD_INT 1
94626: EQUAL
94627: IFFALSE 94637
// sRocket := true ;
94629: LD_ADDR_EXP 111
94633: PUSH
94634: LD_INT 1
94636: ST_TO_ADDR
// if p3 = 2 then
94637: LD_VAR 0 3
94641: PUSH
94642: LD_INT 2
94644: EQUAL
94645: IFFALSE 94655
// sSpeed := true ;
94647: LD_ADDR_EXP 110
94651: PUSH
94652: LD_INT 1
94654: ST_TO_ADDR
// if p3 = 3 then
94655: LD_VAR 0 3
94659: PUSH
94660: LD_INT 3
94662: EQUAL
94663: IFFALSE 94673
// sEngine := true ;
94665: LD_ADDR_EXP 112
94669: PUSH
94670: LD_INT 1
94672: ST_TO_ADDR
// if p3 = 4 then
94673: LD_VAR 0 3
94677: PUSH
94678: LD_INT 4
94680: EQUAL
94681: IFFALSE 94691
// sSpec := true ;
94683: LD_ADDR_EXP 109
94687: PUSH
94688: LD_INT 1
94690: ST_TO_ADDR
// if p3 = 5 then
94691: LD_VAR 0 3
94695: PUSH
94696: LD_INT 5
94698: EQUAL
94699: IFFALSE 94709
// sLevel := true ;
94701: LD_ADDR_EXP 113
94705: PUSH
94706: LD_INT 1
94708: ST_TO_ADDR
// if p3 = 6 then
94709: LD_VAR 0 3
94713: PUSH
94714: LD_INT 6
94716: EQUAL
94717: IFFALSE 94727
// sArmoury := true ;
94719: LD_ADDR_EXP 114
94723: PUSH
94724: LD_INT 1
94726: ST_TO_ADDR
// if p3 = 7 then
94727: LD_VAR 0 3
94731: PUSH
94732: LD_INT 7
94734: EQUAL
94735: IFFALSE 94745
// sRadar := true ;
94737: LD_ADDR_EXP 115
94741: PUSH
94742: LD_INT 1
94744: ST_TO_ADDR
// if p3 = 8 then
94745: LD_VAR 0 3
94749: PUSH
94750: LD_INT 8
94752: EQUAL
94753: IFFALSE 94763
// sBunker := true ;
94755: LD_ADDR_EXP 116
94759: PUSH
94760: LD_INT 1
94762: ST_TO_ADDR
// if p3 = 9 then
94763: LD_VAR 0 3
94767: PUSH
94768: LD_INT 9
94770: EQUAL
94771: IFFALSE 94781
// sHack := true ;
94773: LD_ADDR_EXP 117
94777: PUSH
94778: LD_INT 1
94780: ST_TO_ADDR
// if p3 = 10 then
94781: LD_VAR 0 3
94785: PUSH
94786: LD_INT 10
94788: EQUAL
94789: IFFALSE 94799
// sFire := true ;
94791: LD_ADDR_EXP 118
94795: PUSH
94796: LD_INT 1
94798: ST_TO_ADDR
// if p3 = 11 then
94799: LD_VAR 0 3
94803: PUSH
94804: LD_INT 11
94806: EQUAL
94807: IFFALSE 94817
// sRefresh := true ;
94809: LD_ADDR_EXP 119
94813: PUSH
94814: LD_INT 1
94816: ST_TO_ADDR
// if p3 = 12 then
94817: LD_VAR 0 3
94821: PUSH
94822: LD_INT 12
94824: EQUAL
94825: IFFALSE 94835
// sExp := true ;
94827: LD_ADDR_EXP 120
94831: PUSH
94832: LD_INT 1
94834: ST_TO_ADDR
// if p3 = 13 then
94835: LD_VAR 0 3
94839: PUSH
94840: LD_INT 13
94842: EQUAL
94843: IFFALSE 94853
// sDepot := true ;
94845: LD_ADDR_EXP 121
94849: PUSH
94850: LD_INT 1
94852: ST_TO_ADDR
// if p3 = 14 then
94853: LD_VAR 0 3
94857: PUSH
94858: LD_INT 14
94860: EQUAL
94861: IFFALSE 94871
// sFlag := true ;
94863: LD_ADDR_EXP 122
94867: PUSH
94868: LD_INT 1
94870: ST_TO_ADDR
// if p3 = 15 then
94871: LD_VAR 0 3
94875: PUSH
94876: LD_INT 15
94878: EQUAL
94879: IFFALSE 94889
// sKamikadze := true ;
94881: LD_ADDR_EXP 130
94885: PUSH
94886: LD_INT 1
94888: ST_TO_ADDR
// if p3 = 16 then
94889: LD_VAR 0 3
94893: PUSH
94894: LD_INT 16
94896: EQUAL
94897: IFFALSE 94907
// sTroll := true ;
94899: LD_ADDR_EXP 131
94903: PUSH
94904: LD_INT 1
94906: ST_TO_ADDR
// if p3 = 17 then
94907: LD_VAR 0 3
94911: PUSH
94912: LD_INT 17
94914: EQUAL
94915: IFFALSE 94925
// sSlow := true ;
94917: LD_ADDR_EXP 132
94921: PUSH
94922: LD_INT 1
94924: ST_TO_ADDR
// if p3 = 18 then
94925: LD_VAR 0 3
94929: PUSH
94930: LD_INT 18
94932: EQUAL
94933: IFFALSE 94943
// sLack := true ;
94935: LD_ADDR_EXP 133
94939: PUSH
94940: LD_INT 1
94942: ST_TO_ADDR
// if p3 = 19 then
94943: LD_VAR 0 3
94947: PUSH
94948: LD_INT 19
94950: EQUAL
94951: IFFALSE 94961
// sTank := true ;
94953: LD_ADDR_EXP 135
94957: PUSH
94958: LD_INT 1
94960: ST_TO_ADDR
// if p3 = 20 then
94961: LD_VAR 0 3
94965: PUSH
94966: LD_INT 20
94968: EQUAL
94969: IFFALSE 94979
// sRemote := true ;
94971: LD_ADDR_EXP 136
94975: PUSH
94976: LD_INT 1
94978: ST_TO_ADDR
// if p3 = 21 then
94979: LD_VAR 0 3
94983: PUSH
94984: LD_INT 21
94986: EQUAL
94987: IFFALSE 94997
// sPowell := true ;
94989: LD_ADDR_EXP 137
94993: PUSH
94994: LD_INT 1
94996: ST_TO_ADDR
// if p3 = 22 then
94997: LD_VAR 0 3
95001: PUSH
95002: LD_INT 22
95004: EQUAL
95005: IFFALSE 95015
// sTeleport := true ;
95007: LD_ADDR_EXP 140
95011: PUSH
95012: LD_INT 1
95014: ST_TO_ADDR
// if p3 = 23 then
95015: LD_VAR 0 3
95019: PUSH
95020: LD_INT 23
95022: EQUAL
95023: IFFALSE 95033
// sOilTower := true ;
95025: LD_ADDR_EXP 142
95029: PUSH
95030: LD_INT 1
95032: ST_TO_ADDR
// if p3 = 24 then
95033: LD_VAR 0 3
95037: PUSH
95038: LD_INT 24
95040: EQUAL
95041: IFFALSE 95051
// sShovel := true ;
95043: LD_ADDR_EXP 143
95047: PUSH
95048: LD_INT 1
95050: ST_TO_ADDR
// if p3 = 25 then
95051: LD_VAR 0 3
95055: PUSH
95056: LD_INT 25
95058: EQUAL
95059: IFFALSE 95069
// sSheik := true ;
95061: LD_ADDR_EXP 144
95065: PUSH
95066: LD_INT 1
95068: ST_TO_ADDR
// if p3 = 26 then
95069: LD_VAR 0 3
95073: PUSH
95074: LD_INT 26
95076: EQUAL
95077: IFFALSE 95087
// sEarthquake := true ;
95079: LD_ADDR_EXP 146
95083: PUSH
95084: LD_INT 1
95086: ST_TO_ADDR
// if p3 = 27 then
95087: LD_VAR 0 3
95091: PUSH
95092: LD_INT 27
95094: EQUAL
95095: IFFALSE 95105
// sAI := true ;
95097: LD_ADDR_EXP 147
95101: PUSH
95102: LD_INT 1
95104: ST_TO_ADDR
// if p3 = 28 then
95105: LD_VAR 0 3
95109: PUSH
95110: LD_INT 28
95112: EQUAL
95113: IFFALSE 95123
// sCargo := true ;
95115: LD_ADDR_EXP 150
95119: PUSH
95120: LD_INT 1
95122: ST_TO_ADDR
// if p3 = 29 then
95123: LD_VAR 0 3
95127: PUSH
95128: LD_INT 29
95130: EQUAL
95131: IFFALSE 95141
// sDLaser := true ;
95133: LD_ADDR_EXP 151
95137: PUSH
95138: LD_INT 1
95140: ST_TO_ADDR
// if p3 = 30 then
95141: LD_VAR 0 3
95145: PUSH
95146: LD_INT 30
95148: EQUAL
95149: IFFALSE 95159
// sExchange := true ;
95151: LD_ADDR_EXP 152
95155: PUSH
95156: LD_INT 1
95158: ST_TO_ADDR
// if p3 = 31 then
95159: LD_VAR 0 3
95163: PUSH
95164: LD_INT 31
95166: EQUAL
95167: IFFALSE 95177
// sFac := true ;
95169: LD_ADDR_EXP 153
95173: PUSH
95174: LD_INT 1
95176: ST_TO_ADDR
// if p3 = 32 then
95177: LD_VAR 0 3
95181: PUSH
95182: LD_INT 32
95184: EQUAL
95185: IFFALSE 95195
// sPower := true ;
95187: LD_ADDR_EXP 154
95191: PUSH
95192: LD_INT 1
95194: ST_TO_ADDR
// if p3 = 33 then
95195: LD_VAR 0 3
95199: PUSH
95200: LD_INT 33
95202: EQUAL
95203: IFFALSE 95213
// sRandom := true ;
95205: LD_ADDR_EXP 155
95209: PUSH
95210: LD_INT 1
95212: ST_TO_ADDR
// if p3 = 34 then
95213: LD_VAR 0 3
95217: PUSH
95218: LD_INT 34
95220: EQUAL
95221: IFFALSE 95231
// sShield := true ;
95223: LD_ADDR_EXP 156
95227: PUSH
95228: LD_INT 1
95230: ST_TO_ADDR
// if p3 = 35 then
95231: LD_VAR 0 3
95235: PUSH
95236: LD_INT 35
95238: EQUAL
95239: IFFALSE 95249
// sTime := true ;
95241: LD_ADDR_EXP 157
95245: PUSH
95246: LD_INT 1
95248: ST_TO_ADDR
// if p3 = 36 then
95249: LD_VAR 0 3
95253: PUSH
95254: LD_INT 36
95256: EQUAL
95257: IFFALSE 95267
// sTools := true ;
95259: LD_ADDR_EXP 158
95263: PUSH
95264: LD_INT 1
95266: ST_TO_ADDR
// if p3 = 101 then
95267: LD_VAR 0 3
95271: PUSH
95272: LD_INT 101
95274: EQUAL
95275: IFFALSE 95285
// sSold := true ;
95277: LD_ADDR_EXP 123
95281: PUSH
95282: LD_INT 1
95284: ST_TO_ADDR
// if p3 = 102 then
95285: LD_VAR 0 3
95289: PUSH
95290: LD_INT 102
95292: EQUAL
95293: IFFALSE 95303
// sDiff := true ;
95295: LD_ADDR_EXP 124
95299: PUSH
95300: LD_INT 1
95302: ST_TO_ADDR
// if p3 = 103 then
95303: LD_VAR 0 3
95307: PUSH
95308: LD_INT 103
95310: EQUAL
95311: IFFALSE 95321
// sFog := true ;
95313: LD_ADDR_EXP 127
95317: PUSH
95318: LD_INT 1
95320: ST_TO_ADDR
// if p3 = 104 then
95321: LD_VAR 0 3
95325: PUSH
95326: LD_INT 104
95328: EQUAL
95329: IFFALSE 95339
// sReset := true ;
95331: LD_ADDR_EXP 128
95335: PUSH
95336: LD_INT 1
95338: ST_TO_ADDR
// if p3 = 105 then
95339: LD_VAR 0 3
95343: PUSH
95344: LD_INT 105
95346: EQUAL
95347: IFFALSE 95357
// sSun := true ;
95349: LD_ADDR_EXP 129
95353: PUSH
95354: LD_INT 1
95356: ST_TO_ADDR
// if p3 = 106 then
95357: LD_VAR 0 3
95361: PUSH
95362: LD_INT 106
95364: EQUAL
95365: IFFALSE 95375
// sTiger := true ;
95367: LD_ADDR_EXP 125
95371: PUSH
95372: LD_INT 1
95374: ST_TO_ADDR
// if p3 = 107 then
95375: LD_VAR 0 3
95379: PUSH
95380: LD_INT 107
95382: EQUAL
95383: IFFALSE 95393
// sBomb := true ;
95385: LD_ADDR_EXP 126
95389: PUSH
95390: LD_INT 1
95392: ST_TO_ADDR
// if p3 = 108 then
95393: LD_VAR 0 3
95397: PUSH
95398: LD_INT 108
95400: EQUAL
95401: IFFALSE 95411
// sWound := true ;
95403: LD_ADDR_EXP 134
95407: PUSH
95408: LD_INT 1
95410: ST_TO_ADDR
// if p3 = 109 then
95411: LD_VAR 0 3
95415: PUSH
95416: LD_INT 109
95418: EQUAL
95419: IFFALSE 95429
// sBetray := true ;
95421: LD_ADDR_EXP 138
95425: PUSH
95426: LD_INT 1
95428: ST_TO_ADDR
// if p3 = 110 then
95429: LD_VAR 0 3
95433: PUSH
95434: LD_INT 110
95436: EQUAL
95437: IFFALSE 95447
// sContamin := true ;
95439: LD_ADDR_EXP 139
95443: PUSH
95444: LD_INT 1
95446: ST_TO_ADDR
// if p3 = 111 then
95447: LD_VAR 0 3
95451: PUSH
95452: LD_INT 111
95454: EQUAL
95455: IFFALSE 95465
// sOil := true ;
95457: LD_ADDR_EXP 141
95461: PUSH
95462: LD_INT 1
95464: ST_TO_ADDR
// if p3 = 112 then
95465: LD_VAR 0 3
95469: PUSH
95470: LD_INT 112
95472: EQUAL
95473: IFFALSE 95483
// sStu := true ;
95475: LD_ADDR_EXP 145
95479: PUSH
95480: LD_INT 1
95482: ST_TO_ADDR
// if p3 = 113 then
95483: LD_VAR 0 3
95487: PUSH
95488: LD_INT 113
95490: EQUAL
95491: IFFALSE 95501
// sBazooka := true ;
95493: LD_ADDR_EXP 148
95497: PUSH
95498: LD_INT 1
95500: ST_TO_ADDR
// if p3 = 114 then
95501: LD_VAR 0 3
95505: PUSH
95506: LD_INT 114
95508: EQUAL
95509: IFFALSE 95519
// sMortar := true ;
95511: LD_ADDR_EXP 149
95515: PUSH
95516: LD_INT 1
95518: ST_TO_ADDR
// if p3 = 115 then
95519: LD_VAR 0 3
95523: PUSH
95524: LD_INT 115
95526: EQUAL
95527: IFFALSE 95537
// sRanger := true ;
95529: LD_ADDR_EXP 159
95533: PUSH
95534: LD_INT 1
95536: ST_TO_ADDR
// end ; end ;
95537: PPOPN 6
95539: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
95540: LD_EXP 106
95544: PUSH
95545: LD_EXP 111
95549: AND
95550: IFFALSE 95674
95552: GO 95554
95554: DISABLE
95555: LD_INT 0
95557: PPUSH
95558: PPUSH
// begin enable ;
95559: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
95560: LD_ADDR_VAR 0 2
95564: PUSH
95565: LD_INT 22
95567: PUSH
95568: LD_OWVAR 2
95572: PUSH
95573: EMPTY
95574: LIST
95575: LIST
95576: PUSH
95577: LD_INT 2
95579: PUSH
95580: LD_INT 34
95582: PUSH
95583: LD_INT 7
95585: PUSH
95586: EMPTY
95587: LIST
95588: LIST
95589: PUSH
95590: LD_INT 34
95592: PUSH
95593: LD_INT 45
95595: PUSH
95596: EMPTY
95597: LIST
95598: LIST
95599: PUSH
95600: LD_INT 34
95602: PUSH
95603: LD_INT 28
95605: PUSH
95606: EMPTY
95607: LIST
95608: LIST
95609: PUSH
95610: LD_INT 34
95612: PUSH
95613: LD_INT 47
95615: PUSH
95616: EMPTY
95617: LIST
95618: LIST
95619: PUSH
95620: EMPTY
95621: LIST
95622: LIST
95623: LIST
95624: LIST
95625: LIST
95626: PUSH
95627: EMPTY
95628: LIST
95629: LIST
95630: PPUSH
95631: CALL_OW 69
95635: ST_TO_ADDR
// if not tmp then
95636: LD_VAR 0 2
95640: NOT
95641: IFFALSE 95645
// exit ;
95643: GO 95674
// for i in tmp do
95645: LD_ADDR_VAR 0 1
95649: PUSH
95650: LD_VAR 0 2
95654: PUSH
95655: FOR_IN
95656: IFFALSE 95672
// begin SetLives ( i , 0 ) ;
95658: LD_VAR 0 1
95662: PPUSH
95663: LD_INT 0
95665: PPUSH
95666: CALL_OW 234
// end ;
95670: GO 95655
95672: POP
95673: POP
// end ;
95674: PPOPN 2
95676: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
95677: LD_EXP 106
95681: PUSH
95682: LD_EXP 112
95686: AND
95687: IFFALSE 95771
95689: GO 95691
95691: DISABLE
95692: LD_INT 0
95694: PPUSH
95695: PPUSH
// begin enable ;
95696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
95697: LD_ADDR_VAR 0 2
95701: PUSH
95702: LD_INT 22
95704: PUSH
95705: LD_OWVAR 2
95709: PUSH
95710: EMPTY
95711: LIST
95712: LIST
95713: PUSH
95714: LD_INT 32
95716: PUSH
95717: LD_INT 3
95719: PUSH
95720: EMPTY
95721: LIST
95722: LIST
95723: PUSH
95724: EMPTY
95725: LIST
95726: LIST
95727: PPUSH
95728: CALL_OW 69
95732: ST_TO_ADDR
// if not tmp then
95733: LD_VAR 0 2
95737: NOT
95738: IFFALSE 95742
// exit ;
95740: GO 95771
// for i in tmp do
95742: LD_ADDR_VAR 0 1
95746: PUSH
95747: LD_VAR 0 2
95751: PUSH
95752: FOR_IN
95753: IFFALSE 95769
// begin SetLives ( i , 0 ) ;
95755: LD_VAR 0 1
95759: PPUSH
95760: LD_INT 0
95762: PPUSH
95763: CALL_OW 234
// end ;
95767: GO 95752
95769: POP
95770: POP
// end ;
95771: PPOPN 2
95773: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
95774: LD_EXP 106
95778: PUSH
95779: LD_EXP 109
95783: AND
95784: IFFALSE 95877
95786: GO 95788
95788: DISABLE
95789: LD_INT 0
95791: PPUSH
// begin enable ;
95792: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
95793: LD_ADDR_VAR 0 1
95797: PUSH
95798: LD_INT 22
95800: PUSH
95801: LD_OWVAR 2
95805: PUSH
95806: EMPTY
95807: LIST
95808: LIST
95809: PUSH
95810: LD_INT 2
95812: PUSH
95813: LD_INT 25
95815: PUSH
95816: LD_INT 5
95818: PUSH
95819: EMPTY
95820: LIST
95821: LIST
95822: PUSH
95823: LD_INT 25
95825: PUSH
95826: LD_INT 9
95828: PUSH
95829: EMPTY
95830: LIST
95831: LIST
95832: PUSH
95833: LD_INT 25
95835: PUSH
95836: LD_INT 8
95838: PUSH
95839: EMPTY
95840: LIST
95841: LIST
95842: PUSH
95843: EMPTY
95844: LIST
95845: LIST
95846: LIST
95847: LIST
95848: PUSH
95849: EMPTY
95850: LIST
95851: LIST
95852: PPUSH
95853: CALL_OW 69
95857: PUSH
95858: FOR_IN
95859: IFFALSE 95875
// begin SetClass ( i , 1 ) ;
95861: LD_VAR 0 1
95865: PPUSH
95866: LD_INT 1
95868: PPUSH
95869: CALL_OW 336
// end ;
95873: GO 95858
95875: POP
95876: POP
// end ;
95877: PPOPN 1
95879: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
95880: LD_EXP 106
95884: PUSH
95885: LD_EXP 110
95889: AND
95890: PUSH
95891: LD_OWVAR 65
95895: PUSH
95896: LD_INT 7
95898: LESS
95899: AND
95900: IFFALSE 95914
95902: GO 95904
95904: DISABLE
// begin enable ;
95905: ENABLE
// game_speed := 7 ;
95906: LD_ADDR_OWVAR 65
95910: PUSH
95911: LD_INT 7
95913: ST_TO_ADDR
// end ;
95914: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
95915: LD_EXP 106
95919: PUSH
95920: LD_EXP 113
95924: AND
95925: IFFALSE 96127
95927: GO 95929
95929: DISABLE
95930: LD_INT 0
95932: PPUSH
95933: PPUSH
95934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
95935: LD_ADDR_VAR 0 3
95939: PUSH
95940: LD_INT 81
95942: PUSH
95943: LD_OWVAR 2
95947: PUSH
95948: EMPTY
95949: LIST
95950: LIST
95951: PUSH
95952: LD_INT 21
95954: PUSH
95955: LD_INT 1
95957: PUSH
95958: EMPTY
95959: LIST
95960: LIST
95961: PUSH
95962: EMPTY
95963: LIST
95964: LIST
95965: PPUSH
95966: CALL_OW 69
95970: ST_TO_ADDR
// if not tmp then
95971: LD_VAR 0 3
95975: NOT
95976: IFFALSE 95980
// exit ;
95978: GO 96127
// if tmp > 5 then
95980: LD_VAR 0 3
95984: PUSH
95985: LD_INT 5
95987: GREATER
95988: IFFALSE 96000
// k := 5 else
95990: LD_ADDR_VAR 0 2
95994: PUSH
95995: LD_INT 5
95997: ST_TO_ADDR
95998: GO 96010
// k := tmp ;
96000: LD_ADDR_VAR 0 2
96004: PUSH
96005: LD_VAR 0 3
96009: ST_TO_ADDR
// for i := 1 to k do
96010: LD_ADDR_VAR 0 1
96014: PUSH
96015: DOUBLE
96016: LD_INT 1
96018: DEC
96019: ST_TO_ADDR
96020: LD_VAR 0 2
96024: PUSH
96025: FOR_TO
96026: IFFALSE 96125
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
96028: LD_VAR 0 3
96032: PUSH
96033: LD_VAR 0 1
96037: ARRAY
96038: PPUSH
96039: LD_VAR 0 1
96043: PUSH
96044: LD_INT 4
96046: MOD
96047: PUSH
96048: LD_INT 1
96050: PLUS
96051: PPUSH
96052: CALL_OW 259
96056: PUSH
96057: LD_INT 10
96059: LESS
96060: IFFALSE 96123
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
96062: LD_VAR 0 3
96066: PUSH
96067: LD_VAR 0 1
96071: ARRAY
96072: PPUSH
96073: LD_VAR 0 1
96077: PUSH
96078: LD_INT 4
96080: MOD
96081: PUSH
96082: LD_INT 1
96084: PLUS
96085: PPUSH
96086: LD_VAR 0 3
96090: PUSH
96091: LD_VAR 0 1
96095: ARRAY
96096: PPUSH
96097: LD_VAR 0 1
96101: PUSH
96102: LD_INT 4
96104: MOD
96105: PUSH
96106: LD_INT 1
96108: PLUS
96109: PPUSH
96110: CALL_OW 259
96114: PUSH
96115: LD_INT 1
96117: PLUS
96118: PPUSH
96119: CALL_OW 237
96123: GO 96025
96125: POP
96126: POP
// end ;
96127: PPOPN 3
96129: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
96130: LD_EXP 106
96134: PUSH
96135: LD_EXP 114
96139: AND
96140: IFFALSE 96160
96142: GO 96144
96144: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
96145: LD_INT 4
96147: PPUSH
96148: LD_OWVAR 2
96152: PPUSH
96153: LD_INT 0
96155: PPUSH
96156: CALL_OW 324
96160: END
// every 0 0$1 trigger StreamModeActive and sShovel do
96161: LD_EXP 106
96165: PUSH
96166: LD_EXP 143
96170: AND
96171: IFFALSE 96191
96173: GO 96175
96175: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
96176: LD_INT 19
96178: PPUSH
96179: LD_OWVAR 2
96183: PPUSH
96184: LD_INT 0
96186: PPUSH
96187: CALL_OW 324
96191: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
96192: LD_EXP 106
96196: PUSH
96197: LD_EXP 115
96201: AND
96202: IFFALSE 96304
96204: GO 96206
96206: DISABLE
96207: LD_INT 0
96209: PPUSH
96210: PPUSH
// begin enable ;
96211: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
96212: LD_ADDR_VAR 0 2
96216: PUSH
96217: LD_INT 22
96219: PUSH
96220: LD_OWVAR 2
96224: PUSH
96225: EMPTY
96226: LIST
96227: LIST
96228: PUSH
96229: LD_INT 2
96231: PUSH
96232: LD_INT 34
96234: PUSH
96235: LD_INT 11
96237: PUSH
96238: EMPTY
96239: LIST
96240: LIST
96241: PUSH
96242: LD_INT 34
96244: PUSH
96245: LD_INT 30
96247: PUSH
96248: EMPTY
96249: LIST
96250: LIST
96251: PUSH
96252: EMPTY
96253: LIST
96254: LIST
96255: LIST
96256: PUSH
96257: EMPTY
96258: LIST
96259: LIST
96260: PPUSH
96261: CALL_OW 69
96265: ST_TO_ADDR
// if not tmp then
96266: LD_VAR 0 2
96270: NOT
96271: IFFALSE 96275
// exit ;
96273: GO 96304
// for i in tmp do
96275: LD_ADDR_VAR 0 1
96279: PUSH
96280: LD_VAR 0 2
96284: PUSH
96285: FOR_IN
96286: IFFALSE 96302
// begin SetLives ( i , 0 ) ;
96288: LD_VAR 0 1
96292: PPUSH
96293: LD_INT 0
96295: PPUSH
96296: CALL_OW 234
// end ;
96300: GO 96285
96302: POP
96303: POP
// end ;
96304: PPOPN 2
96306: END
// every 0 0$1 trigger StreamModeActive and sBunker do
96307: LD_EXP 106
96311: PUSH
96312: LD_EXP 116
96316: AND
96317: IFFALSE 96337
96319: GO 96321
96321: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
96322: LD_INT 32
96324: PPUSH
96325: LD_OWVAR 2
96329: PPUSH
96330: LD_INT 0
96332: PPUSH
96333: CALL_OW 324
96337: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
96338: LD_EXP 106
96342: PUSH
96343: LD_EXP 117
96347: AND
96348: IFFALSE 96529
96350: GO 96352
96352: DISABLE
96353: LD_INT 0
96355: PPUSH
96356: PPUSH
96357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
96358: LD_ADDR_VAR 0 2
96362: PUSH
96363: LD_INT 22
96365: PUSH
96366: LD_OWVAR 2
96370: PUSH
96371: EMPTY
96372: LIST
96373: LIST
96374: PUSH
96375: LD_INT 33
96377: PUSH
96378: LD_INT 3
96380: PUSH
96381: EMPTY
96382: LIST
96383: LIST
96384: PUSH
96385: EMPTY
96386: LIST
96387: LIST
96388: PPUSH
96389: CALL_OW 69
96393: ST_TO_ADDR
// if not tmp then
96394: LD_VAR 0 2
96398: NOT
96399: IFFALSE 96403
// exit ;
96401: GO 96529
// side := 0 ;
96403: LD_ADDR_VAR 0 3
96407: PUSH
96408: LD_INT 0
96410: ST_TO_ADDR
// for i := 1 to 8 do
96411: LD_ADDR_VAR 0 1
96415: PUSH
96416: DOUBLE
96417: LD_INT 1
96419: DEC
96420: ST_TO_ADDR
96421: LD_INT 8
96423: PUSH
96424: FOR_TO
96425: IFFALSE 96473
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
96427: LD_OWVAR 2
96431: PUSH
96432: LD_VAR 0 1
96436: NONEQUAL
96437: PUSH
96438: LD_OWVAR 2
96442: PPUSH
96443: LD_VAR 0 1
96447: PPUSH
96448: CALL_OW 81
96452: PUSH
96453: LD_INT 2
96455: EQUAL
96456: AND
96457: IFFALSE 96471
// begin side := i ;
96459: LD_ADDR_VAR 0 3
96463: PUSH
96464: LD_VAR 0 1
96468: ST_TO_ADDR
// break ;
96469: GO 96473
// end ;
96471: GO 96424
96473: POP
96474: POP
// if not side then
96475: LD_VAR 0 3
96479: NOT
96480: IFFALSE 96484
// exit ;
96482: GO 96529
// for i := 1 to tmp do
96484: LD_ADDR_VAR 0 1
96488: PUSH
96489: DOUBLE
96490: LD_INT 1
96492: DEC
96493: ST_TO_ADDR
96494: LD_VAR 0 2
96498: PUSH
96499: FOR_TO
96500: IFFALSE 96527
// if Prob ( 60 ) then
96502: LD_INT 60
96504: PPUSH
96505: CALL_OW 13
96509: IFFALSE 96525
// SetSide ( i , side ) ;
96511: LD_VAR 0 1
96515: PPUSH
96516: LD_VAR 0 3
96520: PPUSH
96521: CALL_OW 235
96525: GO 96499
96527: POP
96528: POP
// end ;
96529: PPOPN 3
96531: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
96532: LD_EXP 106
96536: PUSH
96537: LD_EXP 119
96541: AND
96542: IFFALSE 96661
96544: GO 96546
96546: DISABLE
96547: LD_INT 0
96549: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
96550: LD_ADDR_VAR 0 1
96554: PUSH
96555: LD_INT 22
96557: PUSH
96558: LD_OWVAR 2
96562: PUSH
96563: EMPTY
96564: LIST
96565: LIST
96566: PUSH
96567: LD_INT 21
96569: PUSH
96570: LD_INT 1
96572: PUSH
96573: EMPTY
96574: LIST
96575: LIST
96576: PUSH
96577: LD_INT 3
96579: PUSH
96580: LD_INT 23
96582: PUSH
96583: LD_INT 0
96585: PUSH
96586: EMPTY
96587: LIST
96588: LIST
96589: PUSH
96590: EMPTY
96591: LIST
96592: LIST
96593: PUSH
96594: EMPTY
96595: LIST
96596: LIST
96597: LIST
96598: PPUSH
96599: CALL_OW 69
96603: PUSH
96604: FOR_IN
96605: IFFALSE 96659
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
96607: LD_VAR 0 1
96611: PPUSH
96612: CALL_OW 257
96616: PUSH
96617: LD_INT 1
96619: PUSH
96620: LD_INT 2
96622: PUSH
96623: LD_INT 3
96625: PUSH
96626: LD_INT 4
96628: PUSH
96629: EMPTY
96630: LIST
96631: LIST
96632: LIST
96633: LIST
96634: IN
96635: IFFALSE 96657
// SetClass ( un , rand ( 1 , 4 ) ) ;
96637: LD_VAR 0 1
96641: PPUSH
96642: LD_INT 1
96644: PPUSH
96645: LD_INT 4
96647: PPUSH
96648: CALL_OW 12
96652: PPUSH
96653: CALL_OW 336
96657: GO 96604
96659: POP
96660: POP
// end ;
96661: PPOPN 1
96663: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
96664: LD_EXP 106
96668: PUSH
96669: LD_EXP 118
96673: AND
96674: IFFALSE 96753
96676: GO 96678
96678: DISABLE
96679: LD_INT 0
96681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96682: LD_ADDR_VAR 0 1
96686: PUSH
96687: LD_INT 22
96689: PUSH
96690: LD_OWVAR 2
96694: PUSH
96695: EMPTY
96696: LIST
96697: LIST
96698: PUSH
96699: LD_INT 21
96701: PUSH
96702: LD_INT 3
96704: PUSH
96705: EMPTY
96706: LIST
96707: LIST
96708: PUSH
96709: EMPTY
96710: LIST
96711: LIST
96712: PPUSH
96713: CALL_OW 69
96717: ST_TO_ADDR
// if not tmp then
96718: LD_VAR 0 1
96722: NOT
96723: IFFALSE 96727
// exit ;
96725: GO 96753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
96727: LD_VAR 0 1
96731: PUSH
96732: LD_INT 1
96734: PPUSH
96735: LD_VAR 0 1
96739: PPUSH
96740: CALL_OW 12
96744: ARRAY
96745: PPUSH
96746: LD_INT 100
96748: PPUSH
96749: CALL_OW 234
// end ;
96753: PPOPN 1
96755: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
96756: LD_EXP 106
96760: PUSH
96761: LD_EXP 120
96765: AND
96766: IFFALSE 96864
96768: GO 96770
96770: DISABLE
96771: LD_INT 0
96773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
96774: LD_ADDR_VAR 0 1
96778: PUSH
96779: LD_INT 22
96781: PUSH
96782: LD_OWVAR 2
96786: PUSH
96787: EMPTY
96788: LIST
96789: LIST
96790: PUSH
96791: LD_INT 21
96793: PUSH
96794: LD_INT 1
96796: PUSH
96797: EMPTY
96798: LIST
96799: LIST
96800: PUSH
96801: EMPTY
96802: LIST
96803: LIST
96804: PPUSH
96805: CALL_OW 69
96809: ST_TO_ADDR
// if not tmp then
96810: LD_VAR 0 1
96814: NOT
96815: IFFALSE 96819
// exit ;
96817: GO 96864
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
96819: LD_VAR 0 1
96823: PUSH
96824: LD_INT 1
96826: PPUSH
96827: LD_VAR 0 1
96831: PPUSH
96832: CALL_OW 12
96836: ARRAY
96837: PPUSH
96838: LD_INT 1
96840: PPUSH
96841: LD_INT 4
96843: PPUSH
96844: CALL_OW 12
96848: PPUSH
96849: LD_INT 3000
96851: PPUSH
96852: LD_INT 9000
96854: PPUSH
96855: CALL_OW 12
96859: PPUSH
96860: CALL_OW 492
// end ;
96864: PPOPN 1
96866: END
// every 0 0$1 trigger StreamModeActive and sDepot do
96867: LD_EXP 106
96871: PUSH
96872: LD_EXP 121
96876: AND
96877: IFFALSE 96897
96879: GO 96881
96881: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
96882: LD_INT 1
96884: PPUSH
96885: LD_OWVAR 2
96889: PPUSH
96890: LD_INT 0
96892: PPUSH
96893: CALL_OW 324
96897: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
96898: LD_EXP 106
96902: PUSH
96903: LD_EXP 122
96907: AND
96908: IFFALSE 96991
96910: GO 96912
96912: DISABLE
96913: LD_INT 0
96915: PPUSH
96916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96917: LD_ADDR_VAR 0 2
96921: PUSH
96922: LD_INT 22
96924: PUSH
96925: LD_OWVAR 2
96929: PUSH
96930: EMPTY
96931: LIST
96932: LIST
96933: PUSH
96934: LD_INT 21
96936: PUSH
96937: LD_INT 3
96939: PUSH
96940: EMPTY
96941: LIST
96942: LIST
96943: PUSH
96944: EMPTY
96945: LIST
96946: LIST
96947: PPUSH
96948: CALL_OW 69
96952: ST_TO_ADDR
// if not tmp then
96953: LD_VAR 0 2
96957: NOT
96958: IFFALSE 96962
// exit ;
96960: GO 96991
// for i in tmp do
96962: LD_ADDR_VAR 0 1
96966: PUSH
96967: LD_VAR 0 2
96971: PUSH
96972: FOR_IN
96973: IFFALSE 96989
// SetBLevel ( i , 10 ) ;
96975: LD_VAR 0 1
96979: PPUSH
96980: LD_INT 10
96982: PPUSH
96983: CALL_OW 241
96987: GO 96972
96989: POP
96990: POP
// end ;
96991: PPOPN 2
96993: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
96994: LD_EXP 106
96998: PUSH
96999: LD_EXP 123
97003: AND
97004: IFFALSE 97115
97006: GO 97008
97008: DISABLE
97009: LD_INT 0
97011: PPUSH
97012: PPUSH
97013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
97014: LD_ADDR_VAR 0 3
97018: PUSH
97019: LD_INT 22
97021: PUSH
97022: LD_OWVAR 2
97026: PUSH
97027: EMPTY
97028: LIST
97029: LIST
97030: PUSH
97031: LD_INT 25
97033: PUSH
97034: LD_INT 1
97036: PUSH
97037: EMPTY
97038: LIST
97039: LIST
97040: PUSH
97041: EMPTY
97042: LIST
97043: LIST
97044: PPUSH
97045: CALL_OW 69
97049: ST_TO_ADDR
// if not tmp then
97050: LD_VAR 0 3
97054: NOT
97055: IFFALSE 97059
// exit ;
97057: GO 97115
// un := tmp [ rand ( 1 , tmp ) ] ;
97059: LD_ADDR_VAR 0 2
97063: PUSH
97064: LD_VAR 0 3
97068: PUSH
97069: LD_INT 1
97071: PPUSH
97072: LD_VAR 0 3
97076: PPUSH
97077: CALL_OW 12
97081: ARRAY
97082: ST_TO_ADDR
// if Crawls ( un ) then
97083: LD_VAR 0 2
97087: PPUSH
97088: CALL_OW 318
97092: IFFALSE 97103
// ComWalk ( un ) ;
97094: LD_VAR 0 2
97098: PPUSH
97099: CALL_OW 138
// SetClass ( un , class_sniper ) ;
97103: LD_VAR 0 2
97107: PPUSH
97108: LD_INT 5
97110: PPUSH
97111: CALL_OW 336
// end ;
97115: PPOPN 3
97117: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
97118: LD_EXP 106
97122: PUSH
97123: LD_EXP 124
97127: AND
97128: PUSH
97129: LD_OWVAR 67
97133: PUSH
97134: LD_INT 3
97136: LESS
97137: AND
97138: IFFALSE 97157
97140: GO 97142
97142: DISABLE
// Difficulty := Difficulty + 1 ;
97143: LD_ADDR_OWVAR 67
97147: PUSH
97148: LD_OWVAR 67
97152: PUSH
97153: LD_INT 1
97155: PLUS
97156: ST_TO_ADDR
97157: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
97158: LD_EXP 106
97162: PUSH
97163: LD_EXP 125
97167: AND
97168: IFFALSE 97271
97170: GO 97172
97172: DISABLE
97173: LD_INT 0
97175: PPUSH
// begin for i := 1 to 5 do
97176: LD_ADDR_VAR 0 1
97180: PUSH
97181: DOUBLE
97182: LD_INT 1
97184: DEC
97185: ST_TO_ADDR
97186: LD_INT 5
97188: PUSH
97189: FOR_TO
97190: IFFALSE 97269
// begin uc_nation := nation_nature ;
97192: LD_ADDR_OWVAR 21
97196: PUSH
97197: LD_INT 0
97199: ST_TO_ADDR
// uc_side := 0 ;
97200: LD_ADDR_OWVAR 20
97204: PUSH
97205: LD_INT 0
97207: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
97208: LD_ADDR_OWVAR 29
97212: PUSH
97213: LD_INT 12
97215: PUSH
97216: LD_INT 12
97218: PUSH
97219: EMPTY
97220: LIST
97221: LIST
97222: ST_TO_ADDR
// hc_agressivity := 20 ;
97223: LD_ADDR_OWVAR 35
97227: PUSH
97228: LD_INT 20
97230: ST_TO_ADDR
// hc_class := class_tiger ;
97231: LD_ADDR_OWVAR 28
97235: PUSH
97236: LD_INT 14
97238: ST_TO_ADDR
// hc_gallery :=  ;
97239: LD_ADDR_OWVAR 33
97243: PUSH
97244: LD_STRING 
97246: ST_TO_ADDR
// hc_name :=  ;
97247: LD_ADDR_OWVAR 26
97251: PUSH
97252: LD_STRING 
97254: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
97255: CALL_OW 44
97259: PPUSH
97260: LD_INT 0
97262: PPUSH
97263: CALL_OW 51
// end ;
97267: GO 97189
97269: POP
97270: POP
// end ;
97271: PPOPN 1
97273: END
// every 0 0$1 trigger StreamModeActive and sBomb do
97274: LD_EXP 106
97278: PUSH
97279: LD_EXP 126
97283: AND
97284: IFFALSE 97293
97286: GO 97288
97288: DISABLE
// StreamSibBomb ;
97289: CALL 97294 0 0
97293: END
// export function StreamSibBomb ; var i , x , y ; begin
97294: LD_INT 0
97296: PPUSH
97297: PPUSH
97298: PPUSH
97299: PPUSH
// result := false ;
97300: LD_ADDR_VAR 0 1
97304: PUSH
97305: LD_INT 0
97307: ST_TO_ADDR
// for i := 1 to 16 do
97308: LD_ADDR_VAR 0 2
97312: PUSH
97313: DOUBLE
97314: LD_INT 1
97316: DEC
97317: ST_TO_ADDR
97318: LD_INT 16
97320: PUSH
97321: FOR_TO
97322: IFFALSE 97521
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97324: LD_ADDR_VAR 0 3
97328: PUSH
97329: LD_INT 10
97331: PUSH
97332: LD_INT 20
97334: PUSH
97335: LD_INT 30
97337: PUSH
97338: LD_INT 40
97340: PUSH
97341: LD_INT 50
97343: PUSH
97344: LD_INT 60
97346: PUSH
97347: LD_INT 70
97349: PUSH
97350: LD_INT 80
97352: PUSH
97353: LD_INT 90
97355: PUSH
97356: LD_INT 100
97358: PUSH
97359: LD_INT 110
97361: PUSH
97362: LD_INT 120
97364: PUSH
97365: LD_INT 130
97367: PUSH
97368: LD_INT 140
97370: PUSH
97371: LD_INT 150
97373: PUSH
97374: EMPTY
97375: LIST
97376: LIST
97377: LIST
97378: LIST
97379: LIST
97380: LIST
97381: LIST
97382: LIST
97383: LIST
97384: LIST
97385: LIST
97386: LIST
97387: LIST
97388: LIST
97389: LIST
97390: PUSH
97391: LD_INT 1
97393: PPUSH
97394: LD_INT 15
97396: PPUSH
97397: CALL_OW 12
97401: ARRAY
97402: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97403: LD_ADDR_VAR 0 4
97407: PUSH
97408: LD_INT 10
97410: PUSH
97411: LD_INT 20
97413: PUSH
97414: LD_INT 30
97416: PUSH
97417: LD_INT 40
97419: PUSH
97420: LD_INT 50
97422: PUSH
97423: LD_INT 60
97425: PUSH
97426: LD_INT 70
97428: PUSH
97429: LD_INT 80
97431: PUSH
97432: LD_INT 90
97434: PUSH
97435: LD_INT 100
97437: PUSH
97438: LD_INT 110
97440: PUSH
97441: LD_INT 120
97443: PUSH
97444: LD_INT 130
97446: PUSH
97447: LD_INT 140
97449: PUSH
97450: LD_INT 150
97452: PUSH
97453: EMPTY
97454: LIST
97455: LIST
97456: LIST
97457: LIST
97458: LIST
97459: LIST
97460: LIST
97461: LIST
97462: LIST
97463: LIST
97464: LIST
97465: LIST
97466: LIST
97467: LIST
97468: LIST
97469: PUSH
97470: LD_INT 1
97472: PPUSH
97473: LD_INT 15
97475: PPUSH
97476: CALL_OW 12
97480: ARRAY
97481: ST_TO_ADDR
// if ValidHex ( x , y ) then
97482: LD_VAR 0 3
97486: PPUSH
97487: LD_VAR 0 4
97491: PPUSH
97492: CALL_OW 488
97496: IFFALSE 97519
// begin result := [ x , y ] ;
97498: LD_ADDR_VAR 0 1
97502: PUSH
97503: LD_VAR 0 3
97507: PUSH
97508: LD_VAR 0 4
97512: PUSH
97513: EMPTY
97514: LIST
97515: LIST
97516: ST_TO_ADDR
// break ;
97517: GO 97521
// end ; end ;
97519: GO 97321
97521: POP
97522: POP
// if result then
97523: LD_VAR 0 1
97527: IFFALSE 97587
// begin ToLua ( playSibBomb() ) ;
97529: LD_STRING playSibBomb()
97531: PPUSH
97532: CALL_OW 559
// wait ( 0 0$14 ) ;
97536: LD_INT 490
97538: PPUSH
97539: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
97543: LD_VAR 0 1
97547: PUSH
97548: LD_INT 1
97550: ARRAY
97551: PPUSH
97552: LD_VAR 0 1
97556: PUSH
97557: LD_INT 2
97559: ARRAY
97560: PPUSH
97561: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
97565: LD_VAR 0 1
97569: PUSH
97570: LD_INT 1
97572: ARRAY
97573: PPUSH
97574: LD_VAR 0 1
97578: PUSH
97579: LD_INT 2
97581: ARRAY
97582: PPUSH
97583: CALL_OW 429
// end ; end ;
97587: LD_VAR 0 1
97591: RET
// every 0 0$1 trigger StreamModeActive and sReset do
97592: LD_EXP 106
97596: PUSH
97597: LD_EXP 128
97601: AND
97602: IFFALSE 97614
97604: GO 97606
97606: DISABLE
// YouLost (  ) ;
97607: LD_STRING 
97609: PPUSH
97610: CALL_OW 104
97614: END
// every 0 0$1 trigger StreamModeActive and sFog do
97615: LD_EXP 106
97619: PUSH
97620: LD_EXP 127
97624: AND
97625: IFFALSE 97639
97627: GO 97629
97629: DISABLE
// FogOff ( your_side ) ;
97630: LD_OWVAR 2
97634: PPUSH
97635: CALL_OW 344
97639: END
// every 0 0$1 trigger StreamModeActive and sSun do
97640: LD_EXP 106
97644: PUSH
97645: LD_EXP 129
97649: AND
97650: IFFALSE 97678
97652: GO 97654
97654: DISABLE
// begin solar_recharge_percent := 0 ;
97655: LD_ADDR_OWVAR 79
97659: PUSH
97660: LD_INT 0
97662: ST_TO_ADDR
// wait ( 5 5$00 ) ;
97663: LD_INT 10500
97665: PPUSH
97666: CALL_OW 67
// solar_recharge_percent := 100 ;
97670: LD_ADDR_OWVAR 79
97674: PUSH
97675: LD_INT 100
97677: ST_TO_ADDR
// end ;
97678: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
97679: LD_EXP 106
97683: PUSH
97684: LD_EXP 130
97688: AND
97689: IFFALSE 97928
97691: GO 97693
97693: DISABLE
97694: LD_INT 0
97696: PPUSH
97697: PPUSH
97698: PPUSH
// begin tmp := [ ] ;
97699: LD_ADDR_VAR 0 3
97703: PUSH
97704: EMPTY
97705: ST_TO_ADDR
// for i := 1 to 6 do
97706: LD_ADDR_VAR 0 1
97710: PUSH
97711: DOUBLE
97712: LD_INT 1
97714: DEC
97715: ST_TO_ADDR
97716: LD_INT 6
97718: PUSH
97719: FOR_TO
97720: IFFALSE 97825
// begin uc_nation := nation_nature ;
97722: LD_ADDR_OWVAR 21
97726: PUSH
97727: LD_INT 0
97729: ST_TO_ADDR
// uc_side := 0 ;
97730: LD_ADDR_OWVAR 20
97734: PUSH
97735: LD_INT 0
97737: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
97738: LD_ADDR_OWVAR 29
97742: PUSH
97743: LD_INT 12
97745: PUSH
97746: LD_INT 12
97748: PUSH
97749: EMPTY
97750: LIST
97751: LIST
97752: ST_TO_ADDR
// hc_agressivity := 20 ;
97753: LD_ADDR_OWVAR 35
97757: PUSH
97758: LD_INT 20
97760: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
97761: LD_ADDR_OWVAR 28
97765: PUSH
97766: LD_INT 17
97768: ST_TO_ADDR
// hc_gallery :=  ;
97769: LD_ADDR_OWVAR 33
97773: PUSH
97774: LD_STRING 
97776: ST_TO_ADDR
// hc_name :=  ;
97777: LD_ADDR_OWVAR 26
97781: PUSH
97782: LD_STRING 
97784: ST_TO_ADDR
// un := CreateHuman ;
97785: LD_ADDR_VAR 0 2
97789: PUSH
97790: CALL_OW 44
97794: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
97795: LD_VAR 0 2
97799: PPUSH
97800: LD_INT 1
97802: PPUSH
97803: CALL_OW 51
// tmp := tmp ^ un ;
97807: LD_ADDR_VAR 0 3
97811: PUSH
97812: LD_VAR 0 3
97816: PUSH
97817: LD_VAR 0 2
97821: ADD
97822: ST_TO_ADDR
// end ;
97823: GO 97719
97825: POP
97826: POP
// repeat wait ( 0 0$1 ) ;
97827: LD_INT 35
97829: PPUSH
97830: CALL_OW 67
// for un in tmp do
97834: LD_ADDR_VAR 0 2
97838: PUSH
97839: LD_VAR 0 3
97843: PUSH
97844: FOR_IN
97845: IFFALSE 97919
// begin if IsDead ( un ) then
97847: LD_VAR 0 2
97851: PPUSH
97852: CALL_OW 301
97856: IFFALSE 97876
// begin tmp := tmp diff un ;
97858: LD_ADDR_VAR 0 3
97862: PUSH
97863: LD_VAR 0 3
97867: PUSH
97868: LD_VAR 0 2
97872: DIFF
97873: ST_TO_ADDR
// continue ;
97874: GO 97844
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
97876: LD_VAR 0 2
97880: PPUSH
97881: LD_INT 3
97883: PUSH
97884: LD_INT 22
97886: PUSH
97887: LD_INT 0
97889: PUSH
97890: EMPTY
97891: LIST
97892: LIST
97893: PUSH
97894: EMPTY
97895: LIST
97896: LIST
97897: PPUSH
97898: CALL_OW 69
97902: PPUSH
97903: LD_VAR 0 2
97907: PPUSH
97908: CALL_OW 74
97912: PPUSH
97913: CALL_OW 115
// end ;
97917: GO 97844
97919: POP
97920: POP
// until not tmp ;
97921: LD_VAR 0 3
97925: NOT
97926: IFFALSE 97827
// end ;
97928: PPOPN 3
97930: END
// every 0 0$1 trigger StreamModeActive and sTroll do
97931: LD_EXP 106
97935: PUSH
97936: LD_EXP 131
97940: AND
97941: IFFALSE 97995
97943: GO 97945
97945: DISABLE
// begin ToLua ( displayTroll(); ) ;
97946: LD_STRING displayTroll();
97948: PPUSH
97949: CALL_OW 559
// wait ( 3 3$00 ) ;
97953: LD_INT 6300
97955: PPUSH
97956: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97960: LD_STRING hideTroll();
97962: PPUSH
97963: CALL_OW 559
// wait ( 1 1$00 ) ;
97967: LD_INT 2100
97969: PPUSH
97970: CALL_OW 67
// ToLua ( displayTroll(); ) ;
97974: LD_STRING displayTroll();
97976: PPUSH
97977: CALL_OW 559
// wait ( 1 1$00 ) ;
97981: LD_INT 2100
97983: PPUSH
97984: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97988: LD_STRING hideTroll();
97990: PPUSH
97991: CALL_OW 559
// end ;
97995: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
97996: LD_EXP 106
98000: PUSH
98001: LD_EXP 132
98005: AND
98006: IFFALSE 98069
98008: GO 98010
98010: DISABLE
98011: LD_INT 0
98013: PPUSH
// begin p := 0 ;
98014: LD_ADDR_VAR 0 1
98018: PUSH
98019: LD_INT 0
98021: ST_TO_ADDR
// repeat game_speed := 1 ;
98022: LD_ADDR_OWVAR 65
98026: PUSH
98027: LD_INT 1
98029: ST_TO_ADDR
// wait ( 0 0$1 ) ;
98030: LD_INT 35
98032: PPUSH
98033: CALL_OW 67
// p := p + 1 ;
98037: LD_ADDR_VAR 0 1
98041: PUSH
98042: LD_VAR 0 1
98046: PUSH
98047: LD_INT 1
98049: PLUS
98050: ST_TO_ADDR
// until p >= 60 ;
98051: LD_VAR 0 1
98055: PUSH
98056: LD_INT 60
98058: GREATEREQUAL
98059: IFFALSE 98022
// game_speed := 4 ;
98061: LD_ADDR_OWVAR 65
98065: PUSH
98066: LD_INT 4
98068: ST_TO_ADDR
// end ;
98069: PPOPN 1
98071: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
98072: LD_EXP 106
98076: PUSH
98077: LD_EXP 133
98081: AND
98082: IFFALSE 98228
98084: GO 98086
98086: DISABLE
98087: LD_INT 0
98089: PPUSH
98090: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
98091: LD_ADDR_VAR 0 1
98095: PUSH
98096: LD_INT 22
98098: PUSH
98099: LD_OWVAR 2
98103: PUSH
98104: EMPTY
98105: LIST
98106: LIST
98107: PUSH
98108: LD_INT 2
98110: PUSH
98111: LD_INT 30
98113: PUSH
98114: LD_INT 0
98116: PUSH
98117: EMPTY
98118: LIST
98119: LIST
98120: PUSH
98121: LD_INT 30
98123: PUSH
98124: LD_INT 1
98126: PUSH
98127: EMPTY
98128: LIST
98129: LIST
98130: PUSH
98131: EMPTY
98132: LIST
98133: LIST
98134: LIST
98135: PUSH
98136: EMPTY
98137: LIST
98138: LIST
98139: PPUSH
98140: CALL_OW 69
98144: ST_TO_ADDR
// if not depot then
98145: LD_VAR 0 1
98149: NOT
98150: IFFALSE 98154
// exit ;
98152: GO 98228
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
98154: LD_ADDR_VAR 0 2
98158: PUSH
98159: LD_VAR 0 1
98163: PUSH
98164: LD_INT 1
98166: PPUSH
98167: LD_VAR 0 1
98171: PPUSH
98172: CALL_OW 12
98176: ARRAY
98177: PPUSH
98178: CALL_OW 274
98182: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
98183: LD_VAR 0 2
98187: PPUSH
98188: LD_INT 1
98190: PPUSH
98191: LD_INT 0
98193: PPUSH
98194: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
98198: LD_VAR 0 2
98202: PPUSH
98203: LD_INT 2
98205: PPUSH
98206: LD_INT 0
98208: PPUSH
98209: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
98213: LD_VAR 0 2
98217: PPUSH
98218: LD_INT 3
98220: PPUSH
98221: LD_INT 0
98223: PPUSH
98224: CALL_OW 277
// end ;
98228: PPOPN 2
98230: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
98231: LD_EXP 106
98235: PUSH
98236: LD_EXP 134
98240: AND
98241: IFFALSE 98338
98243: GO 98245
98245: DISABLE
98246: LD_INT 0
98248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
98249: LD_ADDR_VAR 0 1
98253: PUSH
98254: LD_INT 22
98256: PUSH
98257: LD_OWVAR 2
98261: PUSH
98262: EMPTY
98263: LIST
98264: LIST
98265: PUSH
98266: LD_INT 21
98268: PUSH
98269: LD_INT 1
98271: PUSH
98272: EMPTY
98273: LIST
98274: LIST
98275: PUSH
98276: LD_INT 3
98278: PUSH
98279: LD_INT 23
98281: PUSH
98282: LD_INT 0
98284: PUSH
98285: EMPTY
98286: LIST
98287: LIST
98288: PUSH
98289: EMPTY
98290: LIST
98291: LIST
98292: PUSH
98293: EMPTY
98294: LIST
98295: LIST
98296: LIST
98297: PPUSH
98298: CALL_OW 69
98302: ST_TO_ADDR
// if not tmp then
98303: LD_VAR 0 1
98307: NOT
98308: IFFALSE 98312
// exit ;
98310: GO 98338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
98312: LD_VAR 0 1
98316: PUSH
98317: LD_INT 1
98319: PPUSH
98320: LD_VAR 0 1
98324: PPUSH
98325: CALL_OW 12
98329: ARRAY
98330: PPUSH
98331: LD_INT 200
98333: PPUSH
98334: CALL_OW 234
// end ;
98338: PPOPN 1
98340: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
98341: LD_EXP 106
98345: PUSH
98346: LD_EXP 135
98350: AND
98351: IFFALSE 98430
98353: GO 98355
98355: DISABLE
98356: LD_INT 0
98358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
98359: LD_ADDR_VAR 0 1
98363: PUSH
98364: LD_INT 22
98366: PUSH
98367: LD_OWVAR 2
98371: PUSH
98372: EMPTY
98373: LIST
98374: LIST
98375: PUSH
98376: LD_INT 21
98378: PUSH
98379: LD_INT 2
98381: PUSH
98382: EMPTY
98383: LIST
98384: LIST
98385: PUSH
98386: EMPTY
98387: LIST
98388: LIST
98389: PPUSH
98390: CALL_OW 69
98394: ST_TO_ADDR
// if not tmp then
98395: LD_VAR 0 1
98399: NOT
98400: IFFALSE 98404
// exit ;
98402: GO 98430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
98404: LD_VAR 0 1
98408: PUSH
98409: LD_INT 1
98411: PPUSH
98412: LD_VAR 0 1
98416: PPUSH
98417: CALL_OW 12
98421: ARRAY
98422: PPUSH
98423: LD_INT 60
98425: PPUSH
98426: CALL_OW 234
// end ;
98430: PPOPN 1
98432: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
98433: LD_EXP 106
98437: PUSH
98438: LD_EXP 136
98442: AND
98443: IFFALSE 98542
98445: GO 98447
98447: DISABLE
98448: LD_INT 0
98450: PPUSH
98451: PPUSH
// begin enable ;
98452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
98453: LD_ADDR_VAR 0 1
98457: PUSH
98458: LD_INT 22
98460: PUSH
98461: LD_OWVAR 2
98465: PUSH
98466: EMPTY
98467: LIST
98468: LIST
98469: PUSH
98470: LD_INT 61
98472: PUSH
98473: EMPTY
98474: LIST
98475: PUSH
98476: LD_INT 33
98478: PUSH
98479: LD_INT 2
98481: PUSH
98482: EMPTY
98483: LIST
98484: LIST
98485: PUSH
98486: EMPTY
98487: LIST
98488: LIST
98489: LIST
98490: PPUSH
98491: CALL_OW 69
98495: ST_TO_ADDR
// if not tmp then
98496: LD_VAR 0 1
98500: NOT
98501: IFFALSE 98505
// exit ;
98503: GO 98542
// for i in tmp do
98505: LD_ADDR_VAR 0 2
98509: PUSH
98510: LD_VAR 0 1
98514: PUSH
98515: FOR_IN
98516: IFFALSE 98540
// if IsControledBy ( i ) then
98518: LD_VAR 0 2
98522: PPUSH
98523: CALL_OW 312
98527: IFFALSE 98538
// ComUnlink ( i ) ;
98529: LD_VAR 0 2
98533: PPUSH
98534: CALL_OW 136
98538: GO 98515
98540: POP
98541: POP
// end ;
98542: PPOPN 2
98544: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
98545: LD_EXP 106
98549: PUSH
98550: LD_EXP 137
98554: AND
98555: IFFALSE 98695
98557: GO 98559
98559: DISABLE
98560: LD_INT 0
98562: PPUSH
98563: PPUSH
// begin ToLua ( displayPowell(); ) ;
98564: LD_STRING displayPowell();
98566: PPUSH
98567: CALL_OW 559
// uc_side := 0 ;
98571: LD_ADDR_OWVAR 20
98575: PUSH
98576: LD_INT 0
98578: ST_TO_ADDR
// uc_nation := 2 ;
98579: LD_ADDR_OWVAR 21
98583: PUSH
98584: LD_INT 2
98586: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
98587: LD_ADDR_OWVAR 37
98591: PUSH
98592: LD_INT 14
98594: ST_TO_ADDR
// vc_engine := engine_siberite ;
98595: LD_ADDR_OWVAR 39
98599: PUSH
98600: LD_INT 3
98602: ST_TO_ADDR
// vc_control := control_apeman ;
98603: LD_ADDR_OWVAR 38
98607: PUSH
98608: LD_INT 5
98610: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
98611: LD_ADDR_OWVAR 40
98615: PUSH
98616: LD_INT 29
98618: ST_TO_ADDR
// un := CreateVehicle ;
98619: LD_ADDR_VAR 0 2
98623: PUSH
98624: CALL_OW 45
98628: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
98629: LD_VAR 0 2
98633: PPUSH
98634: LD_INT 1
98636: PPUSH
98637: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
98641: LD_INT 35
98643: PPUSH
98644: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
98648: LD_VAR 0 2
98652: PPUSH
98653: LD_INT 22
98655: PUSH
98656: LD_OWVAR 2
98660: PUSH
98661: EMPTY
98662: LIST
98663: LIST
98664: PPUSH
98665: CALL_OW 69
98669: PPUSH
98670: LD_VAR 0 2
98674: PPUSH
98675: CALL_OW 74
98679: PPUSH
98680: CALL_OW 115
// until IsDead ( un ) ;
98684: LD_VAR 0 2
98688: PPUSH
98689: CALL_OW 301
98693: IFFALSE 98641
// end ;
98695: PPOPN 2
98697: END
// every 0 0$1 trigger StreamModeActive and sStu do
98698: LD_EXP 106
98702: PUSH
98703: LD_EXP 145
98707: AND
98708: IFFALSE 98724
98710: GO 98712
98712: DISABLE
// begin ToLua ( displayStucuk(); ) ;
98713: LD_STRING displayStucuk();
98715: PPUSH
98716: CALL_OW 559
// ResetFog ;
98720: CALL_OW 335
// end ;
98724: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
98725: LD_EXP 106
98729: PUSH
98730: LD_EXP 138
98734: AND
98735: IFFALSE 98876
98737: GO 98739
98739: DISABLE
98740: LD_INT 0
98742: PPUSH
98743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98744: LD_ADDR_VAR 0 2
98748: PUSH
98749: LD_INT 22
98751: PUSH
98752: LD_OWVAR 2
98756: PUSH
98757: EMPTY
98758: LIST
98759: LIST
98760: PUSH
98761: LD_INT 21
98763: PUSH
98764: LD_INT 1
98766: PUSH
98767: EMPTY
98768: LIST
98769: LIST
98770: PUSH
98771: EMPTY
98772: LIST
98773: LIST
98774: PPUSH
98775: CALL_OW 69
98779: ST_TO_ADDR
// if not tmp then
98780: LD_VAR 0 2
98784: NOT
98785: IFFALSE 98789
// exit ;
98787: GO 98876
// un := tmp [ rand ( 1 , tmp ) ] ;
98789: LD_ADDR_VAR 0 1
98793: PUSH
98794: LD_VAR 0 2
98798: PUSH
98799: LD_INT 1
98801: PPUSH
98802: LD_VAR 0 2
98806: PPUSH
98807: CALL_OW 12
98811: ARRAY
98812: ST_TO_ADDR
// SetSide ( un , 0 ) ;
98813: LD_VAR 0 1
98817: PPUSH
98818: LD_INT 0
98820: PPUSH
98821: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
98825: LD_VAR 0 1
98829: PPUSH
98830: LD_OWVAR 3
98834: PUSH
98835: LD_VAR 0 1
98839: DIFF
98840: PPUSH
98841: LD_VAR 0 1
98845: PPUSH
98846: CALL_OW 74
98850: PPUSH
98851: CALL_OW 115
// wait ( 0 0$20 ) ;
98855: LD_INT 700
98857: PPUSH
98858: CALL_OW 67
// SetSide ( un , your_side ) ;
98862: LD_VAR 0 1
98866: PPUSH
98867: LD_OWVAR 2
98871: PPUSH
98872: CALL_OW 235
// end ;
98876: PPOPN 2
98878: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
98879: LD_EXP 106
98883: PUSH
98884: LD_EXP 139
98888: AND
98889: IFFALSE 98995
98891: GO 98893
98893: DISABLE
98894: LD_INT 0
98896: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
98897: LD_ADDR_VAR 0 1
98901: PUSH
98902: LD_INT 22
98904: PUSH
98905: LD_OWVAR 2
98909: PUSH
98910: EMPTY
98911: LIST
98912: LIST
98913: PUSH
98914: LD_INT 2
98916: PUSH
98917: LD_INT 30
98919: PUSH
98920: LD_INT 0
98922: PUSH
98923: EMPTY
98924: LIST
98925: LIST
98926: PUSH
98927: LD_INT 30
98929: PUSH
98930: LD_INT 1
98932: PUSH
98933: EMPTY
98934: LIST
98935: LIST
98936: PUSH
98937: EMPTY
98938: LIST
98939: LIST
98940: LIST
98941: PUSH
98942: EMPTY
98943: LIST
98944: LIST
98945: PPUSH
98946: CALL_OW 69
98950: ST_TO_ADDR
// if not depot then
98951: LD_VAR 0 1
98955: NOT
98956: IFFALSE 98960
// exit ;
98958: GO 98995
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
98960: LD_VAR 0 1
98964: PUSH
98965: LD_INT 1
98967: ARRAY
98968: PPUSH
98969: CALL_OW 250
98973: PPUSH
98974: LD_VAR 0 1
98978: PUSH
98979: LD_INT 1
98981: ARRAY
98982: PPUSH
98983: CALL_OW 251
98987: PPUSH
98988: LD_INT 70
98990: PPUSH
98991: CALL_OW 495
// end ;
98995: PPOPN 1
98997: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
98998: LD_EXP 106
99002: PUSH
99003: LD_EXP 140
99007: AND
99008: IFFALSE 99219
99010: GO 99012
99012: DISABLE
99013: LD_INT 0
99015: PPUSH
99016: PPUSH
99017: PPUSH
99018: PPUSH
99019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
99020: LD_ADDR_VAR 0 5
99024: PUSH
99025: LD_INT 22
99027: PUSH
99028: LD_OWVAR 2
99032: PUSH
99033: EMPTY
99034: LIST
99035: LIST
99036: PUSH
99037: LD_INT 21
99039: PUSH
99040: LD_INT 1
99042: PUSH
99043: EMPTY
99044: LIST
99045: LIST
99046: PUSH
99047: EMPTY
99048: LIST
99049: LIST
99050: PPUSH
99051: CALL_OW 69
99055: ST_TO_ADDR
// if not tmp then
99056: LD_VAR 0 5
99060: NOT
99061: IFFALSE 99065
// exit ;
99063: GO 99219
// for i in tmp do
99065: LD_ADDR_VAR 0 1
99069: PUSH
99070: LD_VAR 0 5
99074: PUSH
99075: FOR_IN
99076: IFFALSE 99217
// begin d := rand ( 0 , 5 ) ;
99078: LD_ADDR_VAR 0 4
99082: PUSH
99083: LD_INT 0
99085: PPUSH
99086: LD_INT 5
99088: PPUSH
99089: CALL_OW 12
99093: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
99094: LD_ADDR_VAR 0 2
99098: PUSH
99099: LD_VAR 0 1
99103: PPUSH
99104: CALL_OW 250
99108: PPUSH
99109: LD_VAR 0 4
99113: PPUSH
99114: LD_INT 3
99116: PPUSH
99117: LD_INT 12
99119: PPUSH
99120: CALL_OW 12
99124: PPUSH
99125: CALL_OW 272
99129: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
99130: LD_ADDR_VAR 0 3
99134: PUSH
99135: LD_VAR 0 1
99139: PPUSH
99140: CALL_OW 251
99144: PPUSH
99145: LD_VAR 0 4
99149: PPUSH
99150: LD_INT 3
99152: PPUSH
99153: LD_INT 12
99155: PPUSH
99156: CALL_OW 12
99160: PPUSH
99161: CALL_OW 273
99165: ST_TO_ADDR
// if ValidHex ( x , y ) then
99166: LD_VAR 0 2
99170: PPUSH
99171: LD_VAR 0 3
99175: PPUSH
99176: CALL_OW 488
99180: IFFALSE 99215
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
99182: LD_VAR 0 1
99186: PPUSH
99187: LD_VAR 0 2
99191: PPUSH
99192: LD_VAR 0 3
99196: PPUSH
99197: LD_INT 3
99199: PPUSH
99200: LD_INT 6
99202: PPUSH
99203: CALL_OW 12
99207: PPUSH
99208: LD_INT 1
99210: PPUSH
99211: CALL_OW 483
// end ;
99215: GO 99075
99217: POP
99218: POP
// end ;
99219: PPOPN 5
99221: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
99222: LD_EXP 106
99226: PUSH
99227: LD_EXP 141
99231: AND
99232: IFFALSE 99326
99234: GO 99236
99236: DISABLE
99237: LD_INT 0
99239: PPUSH
99240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
99241: LD_ADDR_VAR 0 2
99245: PUSH
99246: LD_INT 22
99248: PUSH
99249: LD_OWVAR 2
99253: PUSH
99254: EMPTY
99255: LIST
99256: LIST
99257: PUSH
99258: LD_INT 32
99260: PUSH
99261: LD_INT 1
99263: PUSH
99264: EMPTY
99265: LIST
99266: LIST
99267: PUSH
99268: LD_INT 21
99270: PUSH
99271: LD_INT 2
99273: PUSH
99274: EMPTY
99275: LIST
99276: LIST
99277: PUSH
99278: EMPTY
99279: LIST
99280: LIST
99281: LIST
99282: PPUSH
99283: CALL_OW 69
99287: ST_TO_ADDR
// if not tmp then
99288: LD_VAR 0 2
99292: NOT
99293: IFFALSE 99297
// exit ;
99295: GO 99326
// for i in tmp do
99297: LD_ADDR_VAR 0 1
99301: PUSH
99302: LD_VAR 0 2
99306: PUSH
99307: FOR_IN
99308: IFFALSE 99324
// SetFuel ( i , 0 ) ;
99310: LD_VAR 0 1
99314: PPUSH
99315: LD_INT 0
99317: PPUSH
99318: CALL_OW 240
99322: GO 99307
99324: POP
99325: POP
// end ;
99326: PPOPN 2
99328: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
99329: LD_EXP 106
99333: PUSH
99334: LD_EXP 142
99338: AND
99339: IFFALSE 99405
99341: GO 99343
99343: DISABLE
99344: LD_INT 0
99346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
99347: LD_ADDR_VAR 0 1
99351: PUSH
99352: LD_INT 22
99354: PUSH
99355: LD_OWVAR 2
99359: PUSH
99360: EMPTY
99361: LIST
99362: LIST
99363: PUSH
99364: LD_INT 30
99366: PUSH
99367: LD_INT 29
99369: PUSH
99370: EMPTY
99371: LIST
99372: LIST
99373: PUSH
99374: EMPTY
99375: LIST
99376: LIST
99377: PPUSH
99378: CALL_OW 69
99382: ST_TO_ADDR
// if not tmp then
99383: LD_VAR 0 1
99387: NOT
99388: IFFALSE 99392
// exit ;
99390: GO 99405
// DestroyUnit ( tmp [ 1 ] ) ;
99392: LD_VAR 0 1
99396: PUSH
99397: LD_INT 1
99399: ARRAY
99400: PPUSH
99401: CALL_OW 65
// end ;
99405: PPOPN 1
99407: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
99408: LD_EXP 106
99412: PUSH
99413: LD_EXP 144
99417: AND
99418: IFFALSE 99547
99420: GO 99422
99422: DISABLE
99423: LD_INT 0
99425: PPUSH
// begin uc_side := 0 ;
99426: LD_ADDR_OWVAR 20
99430: PUSH
99431: LD_INT 0
99433: ST_TO_ADDR
// uc_nation := nation_arabian ;
99434: LD_ADDR_OWVAR 21
99438: PUSH
99439: LD_INT 2
99441: ST_TO_ADDR
// hc_gallery :=  ;
99442: LD_ADDR_OWVAR 33
99446: PUSH
99447: LD_STRING 
99449: ST_TO_ADDR
// hc_name :=  ;
99450: LD_ADDR_OWVAR 26
99454: PUSH
99455: LD_STRING 
99457: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
99458: LD_INT 1
99460: PPUSH
99461: LD_INT 11
99463: PPUSH
99464: LD_INT 10
99466: PPUSH
99467: CALL_OW 380
// un := CreateHuman ;
99471: LD_ADDR_VAR 0 1
99475: PUSH
99476: CALL_OW 44
99480: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
99481: LD_VAR 0 1
99485: PPUSH
99486: LD_INT 1
99488: PPUSH
99489: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
99493: LD_INT 35
99495: PPUSH
99496: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
99500: LD_VAR 0 1
99504: PPUSH
99505: LD_INT 22
99507: PUSH
99508: LD_OWVAR 2
99512: PUSH
99513: EMPTY
99514: LIST
99515: LIST
99516: PPUSH
99517: CALL_OW 69
99521: PPUSH
99522: LD_VAR 0 1
99526: PPUSH
99527: CALL_OW 74
99531: PPUSH
99532: CALL_OW 115
// until IsDead ( un ) ;
99536: LD_VAR 0 1
99540: PPUSH
99541: CALL_OW 301
99545: IFFALSE 99493
// end ;
99547: PPOPN 1
99549: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
99550: LD_EXP 106
99554: PUSH
99555: LD_EXP 146
99559: AND
99560: IFFALSE 99572
99562: GO 99564
99564: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
99565: LD_STRING earthquake(getX(game), 0, 32)
99567: PPUSH
99568: CALL_OW 559
99572: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
99573: LD_EXP 106
99577: PUSH
99578: LD_EXP 147
99582: AND
99583: IFFALSE 99674
99585: GO 99587
99587: DISABLE
99588: LD_INT 0
99590: PPUSH
// begin enable ;
99591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
99592: LD_ADDR_VAR 0 1
99596: PUSH
99597: LD_INT 22
99599: PUSH
99600: LD_OWVAR 2
99604: PUSH
99605: EMPTY
99606: LIST
99607: LIST
99608: PUSH
99609: LD_INT 21
99611: PUSH
99612: LD_INT 2
99614: PUSH
99615: EMPTY
99616: LIST
99617: LIST
99618: PUSH
99619: LD_INT 33
99621: PUSH
99622: LD_INT 3
99624: PUSH
99625: EMPTY
99626: LIST
99627: LIST
99628: PUSH
99629: EMPTY
99630: LIST
99631: LIST
99632: LIST
99633: PPUSH
99634: CALL_OW 69
99638: ST_TO_ADDR
// if not tmp then
99639: LD_VAR 0 1
99643: NOT
99644: IFFALSE 99648
// exit ;
99646: GO 99674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
99648: LD_VAR 0 1
99652: PUSH
99653: LD_INT 1
99655: PPUSH
99656: LD_VAR 0 1
99660: PPUSH
99661: CALL_OW 12
99665: ARRAY
99666: PPUSH
99667: LD_INT 1
99669: PPUSH
99670: CALL_OW 234
// end ;
99674: PPOPN 1
99676: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
99677: LD_EXP 106
99681: PUSH
99682: LD_EXP 148
99686: AND
99687: IFFALSE 99828
99689: GO 99691
99691: DISABLE
99692: LD_INT 0
99694: PPUSH
99695: PPUSH
99696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99697: LD_ADDR_VAR 0 3
99701: PUSH
99702: LD_INT 22
99704: PUSH
99705: LD_OWVAR 2
99709: PUSH
99710: EMPTY
99711: LIST
99712: LIST
99713: PUSH
99714: LD_INT 25
99716: PUSH
99717: LD_INT 1
99719: PUSH
99720: EMPTY
99721: LIST
99722: LIST
99723: PUSH
99724: EMPTY
99725: LIST
99726: LIST
99727: PPUSH
99728: CALL_OW 69
99732: ST_TO_ADDR
// if not tmp then
99733: LD_VAR 0 3
99737: NOT
99738: IFFALSE 99742
// exit ;
99740: GO 99828
// un := tmp [ rand ( 1 , tmp ) ] ;
99742: LD_ADDR_VAR 0 2
99746: PUSH
99747: LD_VAR 0 3
99751: PUSH
99752: LD_INT 1
99754: PPUSH
99755: LD_VAR 0 3
99759: PPUSH
99760: CALL_OW 12
99764: ARRAY
99765: ST_TO_ADDR
// if Crawls ( un ) then
99766: LD_VAR 0 2
99770: PPUSH
99771: CALL_OW 318
99775: IFFALSE 99786
// ComWalk ( un ) ;
99777: LD_VAR 0 2
99781: PPUSH
99782: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
99786: LD_VAR 0 2
99790: PPUSH
99791: LD_INT 9
99793: PPUSH
99794: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
99798: LD_INT 28
99800: PPUSH
99801: LD_OWVAR 2
99805: PPUSH
99806: LD_INT 2
99808: PPUSH
99809: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
99813: LD_INT 29
99815: PPUSH
99816: LD_OWVAR 2
99820: PPUSH
99821: LD_INT 2
99823: PPUSH
99824: CALL_OW 322
// end ;
99828: PPOPN 3
99830: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
99831: LD_EXP 106
99835: PUSH
99836: LD_EXP 149
99840: AND
99841: IFFALSE 99952
99843: GO 99845
99845: DISABLE
99846: LD_INT 0
99848: PPUSH
99849: PPUSH
99850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99851: LD_ADDR_VAR 0 3
99855: PUSH
99856: LD_INT 22
99858: PUSH
99859: LD_OWVAR 2
99863: PUSH
99864: EMPTY
99865: LIST
99866: LIST
99867: PUSH
99868: LD_INT 25
99870: PUSH
99871: LD_INT 1
99873: PUSH
99874: EMPTY
99875: LIST
99876: LIST
99877: PUSH
99878: EMPTY
99879: LIST
99880: LIST
99881: PPUSH
99882: CALL_OW 69
99886: ST_TO_ADDR
// if not tmp then
99887: LD_VAR 0 3
99891: NOT
99892: IFFALSE 99896
// exit ;
99894: GO 99952
// un := tmp [ rand ( 1 , tmp ) ] ;
99896: LD_ADDR_VAR 0 2
99900: PUSH
99901: LD_VAR 0 3
99905: PUSH
99906: LD_INT 1
99908: PPUSH
99909: LD_VAR 0 3
99913: PPUSH
99914: CALL_OW 12
99918: ARRAY
99919: ST_TO_ADDR
// if Crawls ( un ) then
99920: LD_VAR 0 2
99924: PPUSH
99925: CALL_OW 318
99929: IFFALSE 99940
// ComWalk ( un ) ;
99931: LD_VAR 0 2
99935: PPUSH
99936: CALL_OW 138
// SetClass ( un , class_mortar ) ;
99940: LD_VAR 0 2
99944: PPUSH
99945: LD_INT 8
99947: PPUSH
99948: CALL_OW 336
// end ;
99952: PPOPN 3
99954: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
99955: LD_EXP 106
99959: PUSH
99960: LD_EXP 150
99964: AND
99965: IFFALSE 100109
99967: GO 99969
99969: DISABLE
99970: LD_INT 0
99972: PPUSH
99973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
99974: LD_ADDR_VAR 0 2
99978: PUSH
99979: LD_INT 22
99981: PUSH
99982: LD_OWVAR 2
99986: PUSH
99987: EMPTY
99988: LIST
99989: LIST
99990: PUSH
99991: LD_INT 21
99993: PUSH
99994: LD_INT 2
99996: PUSH
99997: EMPTY
99998: LIST
99999: LIST
100000: PUSH
100001: LD_INT 2
100003: PUSH
100004: LD_INT 34
100006: PUSH
100007: LD_INT 12
100009: PUSH
100010: EMPTY
100011: LIST
100012: LIST
100013: PUSH
100014: LD_INT 34
100016: PUSH
100017: LD_INT 51
100019: PUSH
100020: EMPTY
100021: LIST
100022: LIST
100023: PUSH
100024: LD_INT 34
100026: PUSH
100027: LD_INT 32
100029: PUSH
100030: EMPTY
100031: LIST
100032: LIST
100033: PUSH
100034: EMPTY
100035: LIST
100036: LIST
100037: LIST
100038: LIST
100039: PUSH
100040: EMPTY
100041: LIST
100042: LIST
100043: LIST
100044: PPUSH
100045: CALL_OW 69
100049: ST_TO_ADDR
// if not tmp then
100050: LD_VAR 0 2
100054: NOT
100055: IFFALSE 100059
// exit ;
100057: GO 100109
// for i in tmp do
100059: LD_ADDR_VAR 0 1
100063: PUSH
100064: LD_VAR 0 2
100068: PUSH
100069: FOR_IN
100070: IFFALSE 100107
// if GetCargo ( i , mat_artifact ) = 0 then
100072: LD_VAR 0 1
100076: PPUSH
100077: LD_INT 4
100079: PPUSH
100080: CALL_OW 289
100084: PUSH
100085: LD_INT 0
100087: EQUAL
100088: IFFALSE 100105
// SetCargo ( i , mat_siberit , 100 ) ;
100090: LD_VAR 0 1
100094: PPUSH
100095: LD_INT 3
100097: PPUSH
100098: LD_INT 100
100100: PPUSH
100101: CALL_OW 290
100105: GO 100069
100107: POP
100108: POP
// end ;
100109: PPOPN 2
100111: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
100112: LD_EXP 106
100116: PUSH
100117: LD_EXP 151
100121: AND
100122: IFFALSE 100275
100124: GO 100126
100126: DISABLE
100127: LD_INT 0
100129: PPUSH
100130: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
100131: LD_ADDR_VAR 0 2
100135: PUSH
100136: LD_INT 22
100138: PUSH
100139: LD_OWVAR 2
100143: PUSH
100144: EMPTY
100145: LIST
100146: LIST
100147: PPUSH
100148: CALL_OW 69
100152: ST_TO_ADDR
// if not tmp then
100153: LD_VAR 0 2
100157: NOT
100158: IFFALSE 100162
// exit ;
100160: GO 100275
// for i := 1 to 2 do
100162: LD_ADDR_VAR 0 1
100166: PUSH
100167: DOUBLE
100168: LD_INT 1
100170: DEC
100171: ST_TO_ADDR
100172: LD_INT 2
100174: PUSH
100175: FOR_TO
100176: IFFALSE 100273
// begin uc_side := your_side ;
100178: LD_ADDR_OWVAR 20
100182: PUSH
100183: LD_OWVAR 2
100187: ST_TO_ADDR
// uc_nation := nation_american ;
100188: LD_ADDR_OWVAR 21
100192: PUSH
100193: LD_INT 1
100195: ST_TO_ADDR
// vc_chassis := us_morphling ;
100196: LD_ADDR_OWVAR 37
100200: PUSH
100201: LD_INT 5
100203: ST_TO_ADDR
// vc_engine := engine_siberite ;
100204: LD_ADDR_OWVAR 39
100208: PUSH
100209: LD_INT 3
100211: ST_TO_ADDR
// vc_control := control_computer ;
100212: LD_ADDR_OWVAR 38
100216: PUSH
100217: LD_INT 3
100219: ST_TO_ADDR
// vc_weapon := us_double_laser ;
100220: LD_ADDR_OWVAR 40
100224: PUSH
100225: LD_INT 10
100227: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
100228: CALL_OW 45
100232: PPUSH
100233: LD_VAR 0 2
100237: PUSH
100238: LD_INT 1
100240: ARRAY
100241: PPUSH
100242: CALL_OW 250
100246: PPUSH
100247: LD_VAR 0 2
100251: PUSH
100252: LD_INT 1
100254: ARRAY
100255: PPUSH
100256: CALL_OW 251
100260: PPUSH
100261: LD_INT 12
100263: PPUSH
100264: LD_INT 1
100266: PPUSH
100267: CALL_OW 50
// end ;
100271: GO 100175
100273: POP
100274: POP
// end ;
100275: PPOPN 2
100277: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
100278: LD_EXP 106
100282: PUSH
100283: LD_EXP 152
100287: AND
100288: IFFALSE 100510
100290: GO 100292
100292: DISABLE
100293: LD_INT 0
100295: PPUSH
100296: PPUSH
100297: PPUSH
100298: PPUSH
100299: PPUSH
100300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100301: LD_ADDR_VAR 0 6
100305: PUSH
100306: LD_INT 22
100308: PUSH
100309: LD_OWVAR 2
100313: PUSH
100314: EMPTY
100315: LIST
100316: LIST
100317: PUSH
100318: LD_INT 21
100320: PUSH
100321: LD_INT 1
100323: PUSH
100324: EMPTY
100325: LIST
100326: LIST
100327: PUSH
100328: LD_INT 3
100330: PUSH
100331: LD_INT 23
100333: PUSH
100334: LD_INT 0
100336: PUSH
100337: EMPTY
100338: LIST
100339: LIST
100340: PUSH
100341: EMPTY
100342: LIST
100343: LIST
100344: PUSH
100345: EMPTY
100346: LIST
100347: LIST
100348: LIST
100349: PPUSH
100350: CALL_OW 69
100354: ST_TO_ADDR
// if not tmp then
100355: LD_VAR 0 6
100359: NOT
100360: IFFALSE 100364
// exit ;
100362: GO 100510
// s1 := rand ( 1 , 4 ) ;
100364: LD_ADDR_VAR 0 2
100368: PUSH
100369: LD_INT 1
100371: PPUSH
100372: LD_INT 4
100374: PPUSH
100375: CALL_OW 12
100379: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
100380: LD_ADDR_VAR 0 4
100384: PUSH
100385: LD_VAR 0 6
100389: PUSH
100390: LD_INT 1
100392: ARRAY
100393: PPUSH
100394: LD_VAR 0 2
100398: PPUSH
100399: CALL_OW 259
100403: ST_TO_ADDR
// if s1 = 1 then
100404: LD_VAR 0 2
100408: PUSH
100409: LD_INT 1
100411: EQUAL
100412: IFFALSE 100432
// s2 := rand ( 2 , 4 ) else
100414: LD_ADDR_VAR 0 3
100418: PUSH
100419: LD_INT 2
100421: PPUSH
100422: LD_INT 4
100424: PPUSH
100425: CALL_OW 12
100429: ST_TO_ADDR
100430: GO 100440
// s2 := 1 ;
100432: LD_ADDR_VAR 0 3
100436: PUSH
100437: LD_INT 1
100439: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
100440: LD_ADDR_VAR 0 5
100444: PUSH
100445: LD_VAR 0 6
100449: PUSH
100450: LD_INT 1
100452: ARRAY
100453: PPUSH
100454: LD_VAR 0 3
100458: PPUSH
100459: CALL_OW 259
100463: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
100464: LD_VAR 0 6
100468: PUSH
100469: LD_INT 1
100471: ARRAY
100472: PPUSH
100473: LD_VAR 0 2
100477: PPUSH
100478: LD_VAR 0 5
100482: PPUSH
100483: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
100487: LD_VAR 0 6
100491: PUSH
100492: LD_INT 1
100494: ARRAY
100495: PPUSH
100496: LD_VAR 0 3
100500: PPUSH
100501: LD_VAR 0 4
100505: PPUSH
100506: CALL_OW 237
// end ;
100510: PPOPN 6
100512: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
100513: LD_EXP 106
100517: PUSH
100518: LD_EXP 153
100522: AND
100523: IFFALSE 100602
100525: GO 100527
100527: DISABLE
100528: LD_INT 0
100530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
100531: LD_ADDR_VAR 0 1
100535: PUSH
100536: LD_INT 22
100538: PUSH
100539: LD_OWVAR 2
100543: PUSH
100544: EMPTY
100545: LIST
100546: LIST
100547: PUSH
100548: LD_INT 30
100550: PUSH
100551: LD_INT 3
100553: PUSH
100554: EMPTY
100555: LIST
100556: LIST
100557: PUSH
100558: EMPTY
100559: LIST
100560: LIST
100561: PPUSH
100562: CALL_OW 69
100566: ST_TO_ADDR
// if not tmp then
100567: LD_VAR 0 1
100571: NOT
100572: IFFALSE 100576
// exit ;
100574: GO 100602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
100576: LD_VAR 0 1
100580: PUSH
100581: LD_INT 1
100583: PPUSH
100584: LD_VAR 0 1
100588: PPUSH
100589: CALL_OW 12
100593: ARRAY
100594: PPUSH
100595: LD_INT 1
100597: PPUSH
100598: CALL_OW 234
// end ;
100602: PPOPN 1
100604: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
100605: LD_EXP 106
100609: PUSH
100610: LD_EXP 154
100614: AND
100615: IFFALSE 100727
100617: GO 100619
100619: DISABLE
100620: LD_INT 0
100622: PPUSH
100623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
100624: LD_ADDR_VAR 0 2
100628: PUSH
100629: LD_INT 22
100631: PUSH
100632: LD_OWVAR 2
100636: PUSH
100637: EMPTY
100638: LIST
100639: LIST
100640: PUSH
100641: LD_INT 2
100643: PUSH
100644: LD_INT 30
100646: PUSH
100647: LD_INT 27
100649: PUSH
100650: EMPTY
100651: LIST
100652: LIST
100653: PUSH
100654: LD_INT 30
100656: PUSH
100657: LD_INT 26
100659: PUSH
100660: EMPTY
100661: LIST
100662: LIST
100663: PUSH
100664: LD_INT 30
100666: PUSH
100667: LD_INT 28
100669: PUSH
100670: EMPTY
100671: LIST
100672: LIST
100673: PUSH
100674: EMPTY
100675: LIST
100676: LIST
100677: LIST
100678: LIST
100679: PUSH
100680: EMPTY
100681: LIST
100682: LIST
100683: PPUSH
100684: CALL_OW 69
100688: ST_TO_ADDR
// if not tmp then
100689: LD_VAR 0 2
100693: NOT
100694: IFFALSE 100698
// exit ;
100696: GO 100727
// for i in tmp do
100698: LD_ADDR_VAR 0 1
100702: PUSH
100703: LD_VAR 0 2
100707: PUSH
100708: FOR_IN
100709: IFFALSE 100725
// SetLives ( i , 1 ) ;
100711: LD_VAR 0 1
100715: PPUSH
100716: LD_INT 1
100718: PPUSH
100719: CALL_OW 234
100723: GO 100708
100725: POP
100726: POP
// end ;
100727: PPOPN 2
100729: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
100730: LD_EXP 106
100734: PUSH
100735: LD_EXP 155
100739: AND
100740: IFFALSE 101014
100742: GO 100744
100744: DISABLE
100745: LD_INT 0
100747: PPUSH
100748: PPUSH
100749: PPUSH
// begin i := rand ( 1 , 7 ) ;
100750: LD_ADDR_VAR 0 1
100754: PUSH
100755: LD_INT 1
100757: PPUSH
100758: LD_INT 7
100760: PPUSH
100761: CALL_OW 12
100765: ST_TO_ADDR
// case i of 1 :
100766: LD_VAR 0 1
100770: PUSH
100771: LD_INT 1
100773: DOUBLE
100774: EQUAL
100775: IFTRUE 100779
100777: GO 100789
100779: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
100780: LD_STRING earthquake(getX(game), 0, 32)
100782: PPUSH
100783: CALL_OW 559
100787: GO 101014
100789: LD_INT 2
100791: DOUBLE
100792: EQUAL
100793: IFTRUE 100797
100795: GO 100811
100797: POP
// begin ToLua ( displayStucuk(); ) ;
100798: LD_STRING displayStucuk();
100800: PPUSH
100801: CALL_OW 559
// ResetFog ;
100805: CALL_OW 335
// end ; 3 :
100809: GO 101014
100811: LD_INT 3
100813: DOUBLE
100814: EQUAL
100815: IFTRUE 100819
100817: GO 100923
100819: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
100820: LD_ADDR_VAR 0 2
100824: PUSH
100825: LD_INT 22
100827: PUSH
100828: LD_OWVAR 2
100832: PUSH
100833: EMPTY
100834: LIST
100835: LIST
100836: PUSH
100837: LD_INT 25
100839: PUSH
100840: LD_INT 1
100842: PUSH
100843: EMPTY
100844: LIST
100845: LIST
100846: PUSH
100847: EMPTY
100848: LIST
100849: LIST
100850: PPUSH
100851: CALL_OW 69
100855: ST_TO_ADDR
// if not tmp then
100856: LD_VAR 0 2
100860: NOT
100861: IFFALSE 100865
// exit ;
100863: GO 101014
// un := tmp [ rand ( 1 , tmp ) ] ;
100865: LD_ADDR_VAR 0 3
100869: PUSH
100870: LD_VAR 0 2
100874: PUSH
100875: LD_INT 1
100877: PPUSH
100878: LD_VAR 0 2
100882: PPUSH
100883: CALL_OW 12
100887: ARRAY
100888: ST_TO_ADDR
// if Crawls ( un ) then
100889: LD_VAR 0 3
100893: PPUSH
100894: CALL_OW 318
100898: IFFALSE 100909
// ComWalk ( un ) ;
100900: LD_VAR 0 3
100904: PPUSH
100905: CALL_OW 138
// SetClass ( un , class_mortar ) ;
100909: LD_VAR 0 3
100913: PPUSH
100914: LD_INT 8
100916: PPUSH
100917: CALL_OW 336
// end ; 4 :
100921: GO 101014
100923: LD_INT 4
100925: DOUBLE
100926: EQUAL
100927: IFTRUE 100931
100929: GO 100992
100931: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
100932: LD_ADDR_VAR 0 2
100936: PUSH
100937: LD_INT 22
100939: PUSH
100940: LD_OWVAR 2
100944: PUSH
100945: EMPTY
100946: LIST
100947: LIST
100948: PUSH
100949: LD_INT 30
100951: PUSH
100952: LD_INT 29
100954: PUSH
100955: EMPTY
100956: LIST
100957: LIST
100958: PUSH
100959: EMPTY
100960: LIST
100961: LIST
100962: PPUSH
100963: CALL_OW 69
100967: ST_TO_ADDR
// if not tmp then
100968: LD_VAR 0 2
100972: NOT
100973: IFFALSE 100977
// exit ;
100975: GO 101014
// DestroyUnit ( tmp [ 1 ] ) ;
100977: LD_VAR 0 2
100981: PUSH
100982: LD_INT 1
100984: ARRAY
100985: PPUSH
100986: CALL_OW 65
// end ; 5 .. 7 :
100990: GO 101014
100992: LD_INT 5
100994: DOUBLE
100995: GREATEREQUAL
100996: IFFALSE 101004
100998: LD_INT 7
101000: DOUBLE
101001: LESSEQUAL
101002: IFTRUE 101006
101004: GO 101013
101006: POP
// StreamSibBomb ; end ;
101007: CALL 97294 0 0
101011: GO 101014
101013: POP
// end ;
101014: PPOPN 3
101016: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
101017: LD_EXP 106
101021: PUSH
101022: LD_EXP 156
101026: AND
101027: IFFALSE 101183
101029: GO 101031
101031: DISABLE
101032: LD_INT 0
101034: PPUSH
101035: PPUSH
101036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
101037: LD_ADDR_VAR 0 2
101041: PUSH
101042: LD_INT 81
101044: PUSH
101045: LD_OWVAR 2
101049: PUSH
101050: EMPTY
101051: LIST
101052: LIST
101053: PUSH
101054: LD_INT 2
101056: PUSH
101057: LD_INT 21
101059: PUSH
101060: LD_INT 1
101062: PUSH
101063: EMPTY
101064: LIST
101065: LIST
101066: PUSH
101067: LD_INT 21
101069: PUSH
101070: LD_INT 2
101072: PUSH
101073: EMPTY
101074: LIST
101075: LIST
101076: PUSH
101077: EMPTY
101078: LIST
101079: LIST
101080: LIST
101081: PUSH
101082: EMPTY
101083: LIST
101084: LIST
101085: PPUSH
101086: CALL_OW 69
101090: ST_TO_ADDR
// if not tmp then
101091: LD_VAR 0 2
101095: NOT
101096: IFFALSE 101100
// exit ;
101098: GO 101183
// p := 0 ;
101100: LD_ADDR_VAR 0 3
101104: PUSH
101105: LD_INT 0
101107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
101108: LD_INT 35
101110: PPUSH
101111: CALL_OW 67
// p := p + 1 ;
101115: LD_ADDR_VAR 0 3
101119: PUSH
101120: LD_VAR 0 3
101124: PUSH
101125: LD_INT 1
101127: PLUS
101128: ST_TO_ADDR
// for i in tmp do
101129: LD_ADDR_VAR 0 1
101133: PUSH
101134: LD_VAR 0 2
101138: PUSH
101139: FOR_IN
101140: IFFALSE 101171
// if GetLives ( i ) < 1000 then
101142: LD_VAR 0 1
101146: PPUSH
101147: CALL_OW 256
101151: PUSH
101152: LD_INT 1000
101154: LESS
101155: IFFALSE 101169
// SetLives ( i , 1000 ) ;
101157: LD_VAR 0 1
101161: PPUSH
101162: LD_INT 1000
101164: PPUSH
101165: CALL_OW 234
101169: GO 101139
101171: POP
101172: POP
// until p > 20 ;
101173: LD_VAR 0 3
101177: PUSH
101178: LD_INT 20
101180: GREATER
101181: IFFALSE 101108
// end ;
101183: PPOPN 3
101185: END
// every 0 0$1 trigger StreamModeActive and sTime do
101186: LD_EXP 106
101190: PUSH
101191: LD_EXP 157
101195: AND
101196: IFFALSE 101231
101198: GO 101200
101200: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
101201: LD_INT 28
101203: PPUSH
101204: LD_OWVAR 2
101208: PPUSH
101209: LD_INT 2
101211: PPUSH
101212: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
101216: LD_INT 30
101218: PPUSH
101219: LD_OWVAR 2
101223: PPUSH
101224: LD_INT 2
101226: PPUSH
101227: CALL_OW 322
// end ;
101231: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
101232: LD_EXP 106
101236: PUSH
101237: LD_EXP 158
101241: AND
101242: IFFALSE 101363
101244: GO 101246
101246: DISABLE
101247: LD_INT 0
101249: PPUSH
101250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
101251: LD_ADDR_VAR 0 2
101255: PUSH
101256: LD_INT 22
101258: PUSH
101259: LD_OWVAR 2
101263: PUSH
101264: EMPTY
101265: LIST
101266: LIST
101267: PUSH
101268: LD_INT 21
101270: PUSH
101271: LD_INT 1
101273: PUSH
101274: EMPTY
101275: LIST
101276: LIST
101277: PUSH
101278: LD_INT 3
101280: PUSH
101281: LD_INT 23
101283: PUSH
101284: LD_INT 0
101286: PUSH
101287: EMPTY
101288: LIST
101289: LIST
101290: PUSH
101291: EMPTY
101292: LIST
101293: LIST
101294: PUSH
101295: EMPTY
101296: LIST
101297: LIST
101298: LIST
101299: PPUSH
101300: CALL_OW 69
101304: ST_TO_ADDR
// if not tmp then
101305: LD_VAR 0 2
101309: NOT
101310: IFFALSE 101314
// exit ;
101312: GO 101363
// for i in tmp do
101314: LD_ADDR_VAR 0 1
101318: PUSH
101319: LD_VAR 0 2
101323: PUSH
101324: FOR_IN
101325: IFFALSE 101361
// begin if Crawls ( i ) then
101327: LD_VAR 0 1
101331: PPUSH
101332: CALL_OW 318
101336: IFFALSE 101347
// ComWalk ( i ) ;
101338: LD_VAR 0 1
101342: PPUSH
101343: CALL_OW 138
// SetClass ( i , 2 ) ;
101347: LD_VAR 0 1
101351: PPUSH
101352: LD_INT 2
101354: PPUSH
101355: CALL_OW 336
// end ;
101359: GO 101324
101361: POP
101362: POP
// end ;
101363: PPOPN 2
101365: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
101366: LD_EXP 106
101370: PUSH
101371: LD_EXP 159
101375: AND
101376: IFFALSE 101657
101378: GO 101380
101380: DISABLE
101381: LD_INT 0
101383: PPUSH
101384: PPUSH
101385: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
101386: LD_OWVAR 2
101390: PPUSH
101391: LD_INT 9
101393: PPUSH
101394: LD_INT 1
101396: PPUSH
101397: LD_INT 1
101399: PPUSH
101400: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
101404: LD_INT 9
101406: PPUSH
101407: LD_OWVAR 2
101411: PPUSH
101412: CALL_OW 343
// uc_side := 9 ;
101416: LD_ADDR_OWVAR 20
101420: PUSH
101421: LD_INT 9
101423: ST_TO_ADDR
// uc_nation := 2 ;
101424: LD_ADDR_OWVAR 21
101428: PUSH
101429: LD_INT 2
101431: ST_TO_ADDR
// hc_name := Dark Warrior ;
101432: LD_ADDR_OWVAR 26
101436: PUSH
101437: LD_STRING Dark Warrior
101439: ST_TO_ADDR
// hc_gallery :=  ;
101440: LD_ADDR_OWVAR 33
101444: PUSH
101445: LD_STRING 
101447: ST_TO_ADDR
// hc_noskilllimit := true ;
101448: LD_ADDR_OWVAR 76
101452: PUSH
101453: LD_INT 1
101455: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
101456: LD_ADDR_OWVAR 31
101460: PUSH
101461: LD_INT 30
101463: PUSH
101464: LD_INT 30
101466: PUSH
101467: LD_INT 30
101469: PUSH
101470: LD_INT 30
101472: PUSH
101473: EMPTY
101474: LIST
101475: LIST
101476: LIST
101477: LIST
101478: ST_TO_ADDR
// un := CreateHuman ;
101479: LD_ADDR_VAR 0 3
101483: PUSH
101484: CALL_OW 44
101488: ST_TO_ADDR
// hc_noskilllimit := false ;
101489: LD_ADDR_OWVAR 76
101493: PUSH
101494: LD_INT 0
101496: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101497: LD_VAR 0 3
101501: PPUSH
101502: LD_INT 1
101504: PPUSH
101505: CALL_OW 51
// p := 0 ;
101509: LD_ADDR_VAR 0 2
101513: PUSH
101514: LD_INT 0
101516: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
101517: LD_INT 35
101519: PPUSH
101520: CALL_OW 67
// p := p + 1 ;
101524: LD_ADDR_VAR 0 2
101528: PUSH
101529: LD_VAR 0 2
101533: PUSH
101534: LD_INT 1
101536: PLUS
101537: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
101538: LD_VAR 0 3
101542: PPUSH
101543: CALL_OW 256
101547: PUSH
101548: LD_INT 1000
101550: LESS
101551: IFFALSE 101565
// SetLives ( un , 1000 ) ;
101553: LD_VAR 0 3
101557: PPUSH
101558: LD_INT 1000
101560: PPUSH
101561: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
101565: LD_VAR 0 3
101569: PPUSH
101570: LD_INT 81
101572: PUSH
101573: LD_OWVAR 2
101577: PUSH
101578: EMPTY
101579: LIST
101580: LIST
101581: PUSH
101582: LD_INT 91
101584: PUSH
101585: LD_VAR 0 3
101589: PUSH
101590: LD_INT 30
101592: PUSH
101593: EMPTY
101594: LIST
101595: LIST
101596: LIST
101597: PUSH
101598: EMPTY
101599: LIST
101600: LIST
101601: PPUSH
101602: CALL_OW 69
101606: PPUSH
101607: LD_VAR 0 3
101611: PPUSH
101612: CALL_OW 74
101616: PPUSH
101617: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
101621: LD_VAR 0 2
101625: PUSH
101626: LD_INT 60
101628: GREATER
101629: PUSH
101630: LD_VAR 0 3
101634: PPUSH
101635: CALL_OW 301
101639: OR
101640: IFFALSE 101517
// if un then
101642: LD_VAR 0 3
101646: IFFALSE 101657
// RemoveUnit ( un ) ;
101648: LD_VAR 0 3
101652: PPUSH
101653: CALL_OW 64
// end ; end_of_file
101657: PPOPN 3
101659: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
101660: LD_INT 0
101662: PPUSH
101663: PPUSH
101664: PPUSH
101665: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
101666: LD_VAR 0 1
101670: PPUSH
101671: CALL_OW 264
101675: PUSH
101676: LD_EXP 97
101680: EQUAL
101681: IFFALSE 101753
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
101683: LD_INT 68
101685: PPUSH
101686: LD_VAR 0 1
101690: PPUSH
101691: CALL_OW 255
101695: PPUSH
101696: CALL_OW 321
101700: PUSH
101701: LD_INT 2
101703: EQUAL
101704: IFFALSE 101716
// eff := 70 else
101706: LD_ADDR_VAR 0 4
101710: PUSH
101711: LD_INT 70
101713: ST_TO_ADDR
101714: GO 101724
// eff := 30 ;
101716: LD_ADDR_VAR 0 4
101720: PUSH
101721: LD_INT 30
101723: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
101724: LD_VAR 0 1
101728: PPUSH
101729: CALL_OW 250
101733: PPUSH
101734: LD_VAR 0 1
101738: PPUSH
101739: CALL_OW 251
101743: PPUSH
101744: LD_VAR 0 4
101748: PPUSH
101749: CALL_OW 495
// end ; end ;
101753: LD_VAR 0 2
101757: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
101758: LD_INT 0
101760: PPUSH
// end ;
101761: LD_VAR 0 4
101765: RET
// export function SOS_Command ( cmd ) ; begin
101766: LD_INT 0
101768: PPUSH
// end ;
101769: LD_VAR 0 2
101773: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
101774: LD_VAR 0 1
101778: PUSH
101779: LD_INT 255
101781: EQUAL
101782: PUSH
101783: LD_VAR 0 2
101787: PPUSH
101788: CALL_OW 264
101792: PUSH
101793: LD_INT 14
101795: PUSH
101796: LD_INT 53
101798: PUSH
101799: EMPTY
101800: LIST
101801: LIST
101802: IN
101803: AND
101804: PUSH
101805: LD_VAR 0 4
101809: PPUSH
101810: LD_VAR 0 5
101814: PPUSH
101815: CALL_OW 488
101819: AND
101820: IFFALSE 101844
// CutTreeXYR ( unit , x , y , 12 ) ;
101822: LD_VAR 0 2
101826: PPUSH
101827: LD_VAR 0 4
101831: PPUSH
101832: LD_VAR 0 5
101836: PPUSH
101837: LD_INT 12
101839: PPUSH
101840: CALL 101847 0 4
// end ;
101844: PPOPN 5
101846: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
101847: LD_INT 0
101849: PPUSH
101850: PPUSH
101851: PPUSH
101852: PPUSH
101853: PPUSH
101854: PPUSH
101855: PPUSH
101856: PPUSH
101857: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
101858: LD_VAR 0 1
101862: NOT
101863: PUSH
101864: LD_VAR 0 2
101868: PPUSH
101869: LD_VAR 0 3
101873: PPUSH
101874: CALL_OW 488
101878: NOT
101879: OR
101880: PUSH
101881: LD_VAR 0 4
101885: NOT
101886: OR
101887: IFFALSE 101891
// exit ;
101889: GO 102231
// list := [ ] ;
101891: LD_ADDR_VAR 0 13
101895: PUSH
101896: EMPTY
101897: ST_TO_ADDR
// if x - r < 0 then
101898: LD_VAR 0 2
101902: PUSH
101903: LD_VAR 0 4
101907: MINUS
101908: PUSH
101909: LD_INT 0
101911: LESS
101912: IFFALSE 101924
// min_x := 0 else
101914: LD_ADDR_VAR 0 7
101918: PUSH
101919: LD_INT 0
101921: ST_TO_ADDR
101922: GO 101940
// min_x := x - r ;
101924: LD_ADDR_VAR 0 7
101928: PUSH
101929: LD_VAR 0 2
101933: PUSH
101934: LD_VAR 0 4
101938: MINUS
101939: ST_TO_ADDR
// if y - r < 0 then
101940: LD_VAR 0 3
101944: PUSH
101945: LD_VAR 0 4
101949: MINUS
101950: PUSH
101951: LD_INT 0
101953: LESS
101954: IFFALSE 101966
// min_y := 0 else
101956: LD_ADDR_VAR 0 8
101960: PUSH
101961: LD_INT 0
101963: ST_TO_ADDR
101964: GO 101982
// min_y := y - r ;
101966: LD_ADDR_VAR 0 8
101970: PUSH
101971: LD_VAR 0 3
101975: PUSH
101976: LD_VAR 0 4
101980: MINUS
101981: ST_TO_ADDR
// max_x := x + r ;
101982: LD_ADDR_VAR 0 9
101986: PUSH
101987: LD_VAR 0 2
101991: PUSH
101992: LD_VAR 0 4
101996: PLUS
101997: ST_TO_ADDR
// max_y := y + r ;
101998: LD_ADDR_VAR 0 10
102002: PUSH
102003: LD_VAR 0 3
102007: PUSH
102008: LD_VAR 0 4
102012: PLUS
102013: ST_TO_ADDR
// for _x = min_x to max_x do
102014: LD_ADDR_VAR 0 11
102018: PUSH
102019: DOUBLE
102020: LD_VAR 0 7
102024: DEC
102025: ST_TO_ADDR
102026: LD_VAR 0 9
102030: PUSH
102031: FOR_TO
102032: IFFALSE 102149
// for _y = min_y to max_y do
102034: LD_ADDR_VAR 0 12
102038: PUSH
102039: DOUBLE
102040: LD_VAR 0 8
102044: DEC
102045: ST_TO_ADDR
102046: LD_VAR 0 10
102050: PUSH
102051: FOR_TO
102052: IFFALSE 102145
// begin if not ValidHex ( _x , _y ) then
102054: LD_VAR 0 11
102058: PPUSH
102059: LD_VAR 0 12
102063: PPUSH
102064: CALL_OW 488
102068: NOT
102069: IFFALSE 102073
// continue ;
102071: GO 102051
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
102073: LD_VAR 0 11
102077: PPUSH
102078: LD_VAR 0 12
102082: PPUSH
102083: CALL_OW 351
102087: PUSH
102088: LD_VAR 0 11
102092: PPUSH
102093: LD_VAR 0 12
102097: PPUSH
102098: CALL_OW 554
102102: AND
102103: IFFALSE 102143
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
102105: LD_ADDR_VAR 0 13
102109: PUSH
102110: LD_VAR 0 13
102114: PPUSH
102115: LD_VAR 0 13
102119: PUSH
102120: LD_INT 1
102122: PLUS
102123: PPUSH
102124: LD_VAR 0 11
102128: PUSH
102129: LD_VAR 0 12
102133: PUSH
102134: EMPTY
102135: LIST
102136: LIST
102137: PPUSH
102138: CALL_OW 2
102142: ST_TO_ADDR
// end ;
102143: GO 102051
102145: POP
102146: POP
102147: GO 102031
102149: POP
102150: POP
// if not list then
102151: LD_VAR 0 13
102155: NOT
102156: IFFALSE 102160
// exit ;
102158: GO 102231
// for i in list do
102160: LD_ADDR_VAR 0 6
102164: PUSH
102165: LD_VAR 0 13
102169: PUSH
102170: FOR_IN
102171: IFFALSE 102229
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
102173: LD_VAR 0 1
102177: PPUSH
102178: LD_STRING M
102180: PUSH
102181: LD_VAR 0 6
102185: PUSH
102186: LD_INT 1
102188: ARRAY
102189: PUSH
102190: LD_VAR 0 6
102194: PUSH
102195: LD_INT 2
102197: ARRAY
102198: PUSH
102199: LD_INT 0
102201: PUSH
102202: LD_INT 0
102204: PUSH
102205: LD_INT 0
102207: PUSH
102208: LD_INT 0
102210: PUSH
102211: EMPTY
102212: LIST
102213: LIST
102214: LIST
102215: LIST
102216: LIST
102217: LIST
102218: LIST
102219: PUSH
102220: EMPTY
102221: LIST
102222: PPUSH
102223: CALL_OW 447
102227: GO 102170
102229: POP
102230: POP
// end ;
102231: LD_VAR 0 5
102235: RET
