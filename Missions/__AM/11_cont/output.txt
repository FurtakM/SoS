// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 16957 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 81940 0 9
// PrepareAmerican ;
  77: CALL 562 0 0
// PrepareArabian ;
  81: CALL 2234 0 0
// MC_Start ( ) ;
  85: CALL 19069 0 0
// Action ;
  89: CALL 7726 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected , am_veh_consturcted ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 130 130$00 , 120 120$00 , 115 115$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 273000
 219: PUSH
 220: LD_INT 252000
 222: PUSH
 223: LD_INT 241500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// am_veh_consturcted := false ;
 287: LD_ADDR_EXP 20
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// end ;
 295: LD_VAR 0 1
 299: RET
// export function CustomInitMacro ; var i ; begin
 300: LD_INT 0
 302: PPUSH
 303: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 304: LD_ADDR_EXP 74
 308: PUSH
 309: LD_INT 20
 311: PUSH
 312: LD_INT 21
 314: PUSH
 315: LD_INT 22
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 323: LD_ADDR_EXP 75
 327: PUSH
 328: LD_INT 28
 330: PUSH
 331: LD_INT 24
 333: PUSH
 334: LD_INT 26
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 6
 347: PUSH
 348: LD_INT 8
 350: PUSH
 351: LD_INT 9
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_OWVAR 67
 363: ARRAY
 364: PPUSH
 365: LD_INT 3
 367: PPUSH
 368: CALL 40390 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 372: LD_INT 2
 374: PPUSH
 375: LD_INT 6
 377: PUSH
 378: LD_INT 8
 380: PUSH
 381: LD_INT 9
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_OWVAR 67
 393: ARRAY
 394: PPUSH
 395: LD_INT 2
 397: PPUSH
 398: CALL 40390 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 6
 407: PUSH
 408: LD_INT 7
 410: PUSH
 411: LD_INT 9
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: CALL 40390 0 3
// for i = 1 to mc_bases do
 432: LD_ADDR_VAR 0 2
 436: PUSH
 437: DOUBLE
 438: LD_INT 1
 440: DEC
 441: ST_TO_ADDR
 442: LD_EXP 50
 446: PUSH
 447: FOR_TO
 448: IFFALSE 472
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 450: LD_VAR 0 2
 454: PPUSH
 455: LD_EXP 43
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PPUSH
 466: CALL 40816 0 2
 470: GO 447
 472: POP
 473: POP
// end ;
 474: LD_VAR 0 1
 478: RET
// function Debuger ; var i ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
// if not debug then
 483: LD_EXP 1
 487: NOT
 488: IFFALSE 492
// exit ;
 490: GO 528
// game_speed := 5 ;
 492: LD_ADDR_OWVAR 65
 496: PUSH
 497: LD_INT 5
 499: ST_TO_ADDR
// uc_side := 1 ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// uc_nation := 1 ;
 508: LD_ADDR_OWVAR 21
 512: PUSH
 513: LD_INT 1
 515: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 516: LD_EXP 36
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 235
// end ;
 528: LD_VAR 0 1
 532: RET
// every 0 0$1 trigger IsDead ( ar_dep_n ) and IsOk ( ar_dep_w ) do
 533: LD_INT 94
 535: PPUSH
 536: CALL_OW 301
 540: PUSH
 541: LD_INT 45
 543: PPUSH
 544: CALL_OW 302
 548: AND
 549: IFFALSE 561
 551: GO 553
 553: DISABLE
// SetAchievement ( ACH_EAST ) ; end_of_file
 554: LD_STRING ACH_EAST
 556: PPUSH
 557: CALL_OW 543
 561: END
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 562: LD_INT 0
 564: PPUSH
 565: PPUSH
 566: PPUSH
 567: PPUSH
 568: PPUSH
 569: PPUSH
 570: PPUSH
 571: PPUSH
// uc_side := 4 ;
 572: LD_ADDR_OWVAR 20
 576: PUSH
 577: LD_INT 4
 579: ST_TO_ADDR
// uc_nation := 1 ;
 580: LD_ADDR_OWVAR 21
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 588: LD_ADDR_EXP 30
 592: PUSH
 593: LD_STRING Powell
 595: PPUSH
 596: LD_INT 0
 598: PPUSH
 599: LD_STRING 
 601: PPUSH
 602: CALL 47100 0 3
 606: ST_TO_ADDR
// uc_side := 1 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 615: LD_ADDR_EXP 21
 619: PUSH
 620: LD_STRING JMM
 622: PPUSH
 623: LD_EXP 1
 627: NOT
 628: PPUSH
 629: LD_EXP 4
 633: PPUSH
 634: CALL 47100 0 3
 638: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 639: LD_EXP 21
 643: PPUSH
 644: CALL_OW 257
 648: PUSH
 649: LD_INT 4
 651: GREATER
 652: IFFALSE 666
// SetClass ( JMM , 1 ) ;
 654: LD_EXP 21
 658: PPUSH
 659: LD_INT 1
 661: PPUSH
 662: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 666: LD_ADDR_EXP 22
 670: PUSH
 671: LD_STRING Lisa
 673: PPUSH
 674: LD_EXP 1
 678: NOT
 679: PPUSH
 680: LD_EXP 4
 684: PPUSH
 685: CALL 47100 0 3
 689: ST_TO_ADDR
// if not Lisa then
 690: LD_EXP 22
 694: NOT
 695: IFFALSE 710
// Lisa := CreateCharacter ( 10_Lisa ) ;
 697: LD_ADDR_EXP 22
 701: PUSH
 702: LD_STRING 10_Lisa
 704: PPUSH
 705: CALL_OW 34
 709: ST_TO_ADDR
// if not Lisa then
 710: LD_EXP 22
 714: NOT
 715: IFFALSE 730
// Lisa := CreateCharacter ( 09_Lisa ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING 09_Lisa
 724: PPUSH
 725: CALL_OW 34
 729: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 730: LD_ADDR_EXP 31
 734: PUSH
 735: LD_STRING Cornel
 737: PPUSH
 738: LD_EXP 1
 742: NOT
 743: PPUSH
 744: LD_EXP 4
 748: PPUSH
 749: CALL 47100 0 3
 753: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 754: LD_ADDR_EXP 23
 758: PUSH
 759: LD_STRING Donaldson
 761: PPUSH
 762: LD_EXP 1
 766: NOT
 767: PPUSH
 768: LD_EXP 4
 772: PPUSH
 773: CALL 47100 0 3
 777: ST_TO_ADDR
// if not Donaldson then
 778: LD_EXP 23
 782: NOT
 783: IFFALSE 798
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 785: LD_ADDR_EXP 23
 789: PUSH
 790: LD_STRING 10_Donaldson
 792: PPUSH
 793: CALL_OW 34
 797: ST_TO_ADDR
// if not Donaldson then
 798: LD_EXP 23
 802: NOT
 803: IFFALSE 818
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 805: LD_ADDR_EXP 23
 809: PUSH
 810: LD_STRING 09_Donaldson
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 24
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_EXP 1
 830: NOT
 831: PPUSH
 832: LD_EXP 4
 836: PPUSH
 837: CALL 47100 0 3
 841: ST_TO_ADDR
// if not Bobby then
 842: LD_EXP 24
 846: NOT
 847: IFFALSE 862
// Bobby := CreateCharacter ( 10_Bobby ) ;
 849: LD_ADDR_EXP 24
 853: PUSH
 854: LD_STRING 10_Bobby
 856: PPUSH
 857: CALL_OW 34
 861: ST_TO_ADDR
// if not Bobby then
 862: LD_EXP 24
 866: NOT
 867: IFFALSE 882
// Bobby := CreateCharacter ( 09_Bobby ) ;
 869: LD_ADDR_EXP 24
 873: PUSH
 874: LD_STRING 09_Bobby
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 882: LD_ADDR_EXP 25
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_EXP 1
 894: NOT
 895: PPUSH
 896: LD_EXP 4
 900: PPUSH
 901: CALL 47100 0 3
 905: ST_TO_ADDR
// if not Cyrus then
 906: LD_EXP 25
 910: NOT
 911: IFFALSE 926
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 913: LD_ADDR_EXP 25
 917: PUSH
 918: LD_STRING 10_Cyrus
 920: PPUSH
 921: CALL_OW 34
 925: ST_TO_ADDR
// if not Cyrus then
 926: LD_EXP 25
 930: NOT
 931: IFFALSE 946
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_STRING 09_Cyrus
 940: PPUSH
 941: CALL_OW 34
 945: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 946: LD_ADDR_EXP 26
 950: PUSH
 951: LD_STRING Denis
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_EXP 4
 964: PPUSH
 965: CALL 47100 0 3
 969: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 970: LD_ADDR_EXP 27
 974: PUSH
 975: LD_STRING Brown
 977: PPUSH
 978: LD_EXP 1
 982: NOT
 983: PPUSH
 984: LD_EXP 4
 988: PPUSH
 989: CALL 47100 0 3
 993: ST_TO_ADDR
// if not Brown then
 994: LD_EXP 27
 998: NOT
 999: IFFALSE 1014
// Brown := CreateCharacter ( 10_Brown ) ;
1001: LD_ADDR_EXP 27
1005: PUSH
1006: LD_STRING 10_Brown
1008: PPUSH
1009: CALL_OW 34
1013: ST_TO_ADDR
// if not Brown then
1014: LD_EXP 27
1018: NOT
1019: IFFALSE 1034
// Brown := CreateCharacter ( 08_Brown ) ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_STRING 08_Brown
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
1034: LD_ADDR_EXP 28
1038: PUSH
1039: LD_STRING Gladstone
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 4
1052: PPUSH
1053: CALL 47100 0 3
1057: ST_TO_ADDR
// if not Gladstone then
1058: LD_EXP 28
1062: NOT
1063: IFFALSE 1078
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1065: LD_ADDR_EXP 28
1069: PUSH
1070: LD_STRING 10_Gladstone
1072: PPUSH
1073: CALL_OW 34
1077: ST_TO_ADDR
// if not Gladstone then
1078: LD_EXP 28
1082: NOT
1083: IFFALSE 1098
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1085: LD_ADDR_EXP 28
1089: PUSH
1090: LD_STRING 08_Gladstone
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1098: LD_ADDR_EXP 29
1102: PUSH
1103: LD_STRING Houten
1105: PPUSH
1106: LD_EXP 1
1110: NOT
1111: PPUSH
1112: LD_EXP 4
1116: PPUSH
1117: CALL 47100 0 3
1121: ST_TO_ADDR
// if not Houten then
1122: LD_EXP 29
1126: NOT
1127: IFFALSE 1142
// Houten := CreateCharacter ( 10_Houten ) ;
1129: LD_ADDR_EXP 29
1133: PUSH
1134: LD_STRING 10_Houten
1136: PPUSH
1137: CALL_OW 34
1141: ST_TO_ADDR
// if not Houten then
1142: LD_EXP 29
1146: NOT
1147: IFFALSE 1162
// Houten := CreateCharacter ( 09_Houten ) ;
1149: LD_ADDR_EXP 29
1153: PUSH
1154: LD_STRING 09_Houten
1156: PPUSH
1157: CALL_OW 34
1161: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1162: LD_ADDR_EXP 31
1166: PUSH
1167: LD_STRING Cornell
1169: PPUSH
1170: LD_EXP 1
1174: NOT
1175: PPUSH
1176: LD_EXP 4
1180: PPUSH
1181: CALL 47100 0 3
1185: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 32
1190: PUSH
1191: LD_STRING Gary
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 47100 0 3
1209: ST_TO_ADDR
// if not Gary then
1210: LD_EXP 32
1214: NOT
1215: IFFALSE 1230
// Gary := CreateCharacter ( 10_Gary ) ;
1217: LD_ADDR_EXP 32
1221: PUSH
1222: LD_STRING 10_Gary
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 33
1234: PUSH
1235: LD_STRING Frank
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 47100 0 3
1253: ST_TO_ADDR
// if not Frank then
1254: LD_EXP 33
1258: NOT
1259: IFFALSE 1274
// Frank := CreateCharacter ( 08_Frank ) ;
1261: LD_ADDR_EXP 33
1265: PUSH
1266: LD_STRING 08_Frank
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1274: LD_ADDR_EXP 34
1278: PUSH
1279: LD_STRING Kikuchi
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 4
1292: PPUSH
1293: CALL 47100 0 3
1297: ST_TO_ADDR
// if not Kikuchi then
1298: LD_EXP 34
1302: NOT
1303: IFFALSE 1318
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1305: LD_ADDR_EXP 34
1309: PUSH
1310: LD_STRING 08_Kikuchi
1312: PPUSH
1313: CALL_OW 34
1317: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1318: LD_ADDR_VAR 0 5
1322: PUSH
1323: LD_EXP 22
1327: PUSH
1328: LD_EXP 23
1332: PUSH
1333: LD_EXP 24
1337: PUSH
1338: LD_EXP 25
1342: PUSH
1343: LD_EXP 26
1347: PUSH
1348: LD_EXP 27
1352: PUSH
1353: LD_EXP 28
1357: PUSH
1358: LD_EXP 29
1362: PUSH
1363: LD_EXP 31
1367: PUSH
1368: LD_EXP 32
1372: PUSH
1373: LD_EXP 33
1377: PUSH
1378: LD_EXP 34
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// tmp := tmp diff 0 ;
1397: LD_ADDR_VAR 0 5
1401: PUSH
1402: LD_VAR 0 5
1406: PUSH
1407: LD_INT 0
1409: DIFF
1410: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1411: LD_ADDR_VAR 0 5
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_STRING 10_lock
1423: PPUSH
1424: CALL_OW 31
1428: UNION
1429: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1430: LD_ADDR_VAR 0 5
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: LD_STRING 10c_lock
1442: PPUSH
1443: CALL_OW 31
1447: UNION
1448: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1449: LD_STRING 10_lock
1451: PPUSH
1452: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1456: LD_STRING 10c_lock
1458: PPUSH
1459: CALL_OW 40
// for i in tmp do
1463: LD_ADDR_VAR 0 2
1467: PUSH
1468: LD_VAR 0 5
1472: PUSH
1473: FOR_IN
1474: IFFALSE 1512
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1476: LD_VAR 0 2
1480: PPUSH
1481: CALL_OW 257
1485: PUSH
1486: LD_INT 8
1488: PUSH
1489: LD_INT 2
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: IN
1496: IFFALSE 1510
// SetClass ( i , class_soldier ) ;
1498: LD_VAR 0 2
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: CALL_OW 336
1510: GO 1473
1512: POP
1513: POP
// if tmp < 12 then
1514: LD_VAR 0 5
1518: PUSH
1519: LD_INT 12
1521: LESS
1522: IFFALSE 1616
// begin k := 16 - tmp ;
1524: LD_ADDR_VAR 0 3
1528: PUSH
1529: LD_INT 16
1531: PUSH
1532: LD_VAR 0 5
1536: MINUS
1537: ST_TO_ADDR
// for i = 1 to k do
1538: LD_ADDR_VAR 0 2
1542: PUSH
1543: DOUBLE
1544: LD_INT 1
1546: DEC
1547: ST_TO_ADDR
1548: LD_VAR 0 3
1552: PUSH
1553: FOR_TO
1554: IFFALSE 1614
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1556: LD_INT 0
1558: PPUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 4
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_INT 4
1582: PPUSH
1583: CALL_OW 12
1587: ARRAY
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1596: LD_ADDR_VAR 0 5
1600: PUSH
1601: LD_VAR 0 5
1605: PUSH
1606: CALL_OW 44
1610: ADD
1611: ST_TO_ADDR
// end ;
1612: GO 1553
1614: POP
1615: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1616: LD_ADDR_EXP 19
1620: PUSH
1621: LD_STRING 1
1623: PPUSH
1624: LD_INT 12
1626: PPUSH
1627: LD_INT 12
1629: PPUSH
1630: LD_INT -5
1632: PUSH
1633: LD_EXP 21
1637: PUSH
1638: LD_INT -2
1640: PUSH
1641: LD_INT -3
1643: PUSH
1644: LD_INT -5
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 5
1658: ADD
1659: PUSH
1660: LD_INT -6
1662: PUSH
1663: LD_INT -4
1665: PUSH
1666: LD_EXP 30
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: ADD
1676: PPUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 4
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 3
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 5
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 5
1717: PUSH
1718: LD_INT 0
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 42
1739: ST_TO_ADDR
// others := tmp diff selected ;
1740: LD_ADDR_VAR 0 8
1744: PUSH
1745: LD_VAR 0 5
1749: PUSH
1750: LD_EXP 19
1754: DIFF
1755: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1756: LD_ADDR_VAR 0 8
1760: PUSH
1761: LD_VAR 0 8
1765: PUSH
1766: LD_EXP 22
1770: PUSH
1771: LD_EXP 23
1775: PUSH
1776: LD_EXP 24
1780: PUSH
1781: LD_EXP 25
1785: PUSH
1786: LD_EXP 26
1790: PUSH
1791: LD_EXP 27
1795: PUSH
1796: LD_EXP 28
1800: PUSH
1801: LD_EXP 29
1805: PUSH
1806: LD_EXP 31
1810: PUSH
1811: LD_EXP 32
1815: PUSH
1816: LD_EXP 33
1820: PUSH
1821: LD_EXP 34
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: DIFF
1840: ST_TO_ADDR
// if others then
1841: LD_VAR 0 8
1845: IFFALSE 1859
// SaveCharacters ( others , 11_others ) ;
1847: LD_VAR 0 8
1851: PPUSH
1852: LD_STRING 11_others
1854: PPUSH
1855: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 4
1902: PUSH
1903: LD_INT 1
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 7
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 3
1938: PUSH
1939: LD_INT 2
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: LD_INT 7
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// for i in JMM ^ selected do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: LD_EXP 21
1970: PUSH
1971: LD_EXP 19
1975: ADD
1976: PUSH
1977: FOR_IN
1978: IFFALSE 2167
// begin if GetClass ( i ) = 3 then
1980: LD_VAR 0 2
1984: PPUSH
1985: CALL_OW 257
1989: PUSH
1990: LD_INT 3
1992: EQUAL
1993: IFFALSE 2150
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1995: LD_ADDR_OWVAR 37
1999: PUSH
2000: LD_VAR 0 6
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
2013: LD_ADDR_OWVAR 39
2017: PUSH
2018: LD_VAR 0 6
2022: PUSH
2023: LD_INT 1
2025: ARRAY
2026: PUSH
2027: LD_INT 2
2029: ARRAY
2030: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2031: LD_ADDR_OWVAR 38
2035: PUSH
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2049: LD_ADDR_OWVAR 40
2053: PUSH
2054: LD_VAR 0 6
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 4
2065: ARRAY
2066: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2067: LD_ADDR_VAR 0 6
2071: PUSH
2072: LD_VAR 0 6
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 3
2084: ST_TO_ADDR
// veh := CreateVehicle ;
2085: LD_ADDR_VAR 0 7
2089: PUSH
2090: CALL_OW 45
2094: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2095: LD_VAR 0 7
2099: PPUSH
2100: LD_INT 8
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_VAR 0 7
2119: PPUSH
2120: CALL_OW 52
// if i = JMM then
2124: LD_VAR 0 2
2128: PUSH
2129: LD_EXP 21
2133: EQUAL
2134: IFFALSE 2148
// SetMark ( veh , 1 ) ;
2136: LD_VAR 0 7
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: CALL_OW 242
// end else
2148: GO 2165
// PlaceUnitArea ( i , am_hum_start , false ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 9
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// end ;
2165: GO 1977
2167: POP
2168: POP
// vc_chassis := us_medium_tracked ;
2169: LD_ADDR_OWVAR 37
2173: PUSH
2174: LD_INT 3
2176: ST_TO_ADDR
// vc_engine := engine_solar ;
2177: LD_ADDR_OWVAR 39
2181: PUSH
2182: LD_INT 2
2184: ST_TO_ADDR
// vc_control := control_computer ;
2185: LD_ADDR_OWVAR 38
2189: PUSH
2190: LD_INT 3
2192: ST_TO_ADDR
// vc_weapon := us_radar ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_INT 11
2200: ST_TO_ADDR
// veh := CreateVehicle ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: CALL_OW 45
2210: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2211: LD_VAR 0 7
2215: PPUSH
2216: LD_INT 87
2218: PPUSH
2219: LD_INT 142
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: CALL_OW 48
// end ; end_of_file
2229: LD_VAR 0 1
2233: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2234: LD_INT 0
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
2242: LD_ADDR_VAR 0 5
2246: PUSH
2247: LD_INT 5
2249: PUSH
2250: LD_INT 6
2252: PUSH
2253: LD_INT 7
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: PUSH
2261: LD_OWVAR 67
2265: ARRAY
2266: ST_TO_ADDR
// uc_side := 2 ;
2267: LD_ADDR_OWVAR 20
2271: PUSH
2272: LD_INT 2
2274: ST_TO_ADDR
// uc_nation := 2 ;
2275: LD_ADDR_OWVAR 21
2279: PUSH
2280: LD_INT 2
2282: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2283: LD_ADDR_OWVAR 37
2287: PUSH
2288: LD_INT 14
2290: ST_TO_ADDR
// vc_engine := engine_siberite ;
2291: LD_ADDR_OWVAR 39
2295: PUSH
2296: LD_INT 3
2298: ST_TO_ADDR
// vc_control := control_manual ;
2299: LD_ADDR_OWVAR 38
2303: PUSH
2304: LD_INT 1
2306: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2307: LD_ADDR_OWVAR 40
2311: PUSH
2312: LD_INT 31
2314: ST_TO_ADDR
// for i = 1 to 3 do
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: DOUBLE
2321: LD_INT 1
2323: DEC
2324: ST_TO_ADDR
2325: LD_INT 3
2327: PUSH
2328: FOR_TO
2329: IFFALSE 2413
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2331: LD_INT 0
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: LD_VAR 0 5
2341: PPUSH
2342: CALL_OW 380
// un := CreateVehicle ;
2346: LD_ADDR_VAR 0 4
2350: PUSH
2351: CALL_OW 45
2355: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2356: LD_VAR 0 4
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: LD_INT 5
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2376: LD_VAR 0 4
2380: PPUSH
2381: LD_INT 156
2383: PPUSH
2384: LD_INT 15
2386: PPUSH
2387: LD_INT 6
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2397: CALL_OW 44
2401: PPUSH
2402: LD_VAR 0 4
2406: PPUSH
2407: CALL_OW 52
// end ;
2411: GO 2328
2413: POP
2414: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2415: LD_ADDR_EXP 37
2419: PUSH
2420: LD_INT 94
2422: PPUSH
2423: LD_INT 28
2425: PPUSH
2426: LD_STRING dammam
2428: PPUSH
2429: LD_VAR 0 5
2433: PPUSH
2434: LD_INT 10000
2436: PUSH
2437: LD_INT 1000
2439: PUSH
2440: LD_INT 300
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: LIST
2447: PPUSH
2448: LD_INT 1
2450: NEG
2451: PUSH
2452: LD_INT 5
2454: PUSH
2455: LD_INT 1
2457: NEG
2458: PUSH
2459: LD_INT 4
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: PPUSH
2468: CALL 57535 0 6
2472: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2473: LD_ADDR_EXP 37
2477: PUSH
2478: LD_EXP 37
2482: PUSH
2483: LD_INT 122
2485: PPUSH
2486: LD_INT 25
2488: PPUSH
2489: LD_STRING 
2491: PPUSH
2492: LD_VAR 0 5
2496: PPUSH
2497: LD_INT 500
2499: PUSH
2500: LD_INT 60
2502: PUSH
2503: LD_INT 0
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: PPUSH
2511: LD_INT 1
2513: NEG
2514: PUSH
2515: LD_INT 4
2517: PUSH
2518: LD_INT 2
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL 57535 0 6
2534: UNION
2535: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2536: LD_ADDR_EXP 35
2540: PUSH
2541: LD_INT 45
2543: PPUSH
2544: LD_INT 24
2546: PPUSH
2547: LD_STRING jeddah
2549: PPUSH
2550: LD_VAR 0 5
2554: PPUSH
2555: LD_INT 700
2557: PUSH
2558: LD_INT 300
2560: PUSH
2561: LD_INT 10
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 5
2575: PUSH
2576: LD_INT 3
2578: PUSH
2579: LD_INT 2
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL 57535 0 6
2592: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2593: LD_ADDR_EXP 36
2597: PUSH
2598: LD_INT 7
2600: PPUSH
2601: LD_INT 27
2603: PPUSH
2604: LD_STRING riyadh
2606: PPUSH
2607: LD_VAR 0 5
2611: PPUSH
2612: LD_INT 500
2614: PUSH
2615: LD_INT 60
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: PPUSH
2626: LD_INT 4
2628: PUSH
2629: LD_INT 2
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL 57535 0 6
2648: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2649: LD_ADDR_EXP 39
2653: PUSH
2654: LD_INT 204
2656: PPUSH
2657: LD_INT 26
2659: PPUSH
2660: LD_STRING 
2662: PPUSH
2663: LD_VAR 0 5
2667: PPUSH
2668: LD_INT 500
2670: PUSH
2671: LD_INT 50
2673: PUSH
2674: LD_INT 0
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PPUSH
2682: LD_INT 1
2684: NEG
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: LD_INT 3
2691: PUSH
2692: LD_INT 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: PPUSH
2701: CALL 57535 0 6
2705: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2706: LD_ADDR_EXP 50
2710: PUSH
2711: LD_EXP 37
2715: PUSH
2716: LD_EXP 35
2720: PUSH
2721: LD_EXP 39
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2731: LD_ADDR_VAR 0 2
2735: PUSH
2736: LD_INT 22
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 30
2748: PUSH
2749: LD_INT 31
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 58
2758: PUSH
2759: EMPTY
2760: LIST
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: FOR_IN
2773: IFFALSE 2898
// begin if GetBase ( i ) then
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 274
2784: IFFALSE 2788
// continue ;
2786: GO 2772
// d := GetDir ( i ) ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: CALL_OW 254
2802: ST_TO_ADDR
// if d < 3 then
2803: LD_VAR 0 3
2807: PUSH
2808: LD_INT 3
2810: LESS
2811: IFFALSE 2829
// d := d + 3 else
2813: LD_ADDR_VAR 0 3
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 3
2825: PLUS
2826: ST_TO_ADDR
2827: GO 2843
// d := d - 3 ;
2829: LD_ADDR_VAR 0 3
2833: PUSH
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 3
2841: MINUS
2842: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2843: LD_INT 0
2845: PPUSH
2846: LD_INT 8
2848: PPUSH
2849: LD_VAR 0 5
2853: PPUSH
2854: CALL_OW 380
// un := CreateHuman ;
2858: LD_ADDR_VAR 0 4
2862: PUSH
2863: CALL_OW 44
2867: ST_TO_ADDR
// SetDir ( un , d ) ;
2868: LD_VAR 0 4
2872: PPUSH
2873: LD_VAR 0 3
2877: PPUSH
2878: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 2
2891: PPUSH
2892: CALL_OW 52
// end ;
2896: GO 2772
2898: POP
2899: POP
// if Difficulty > 1 then
2900: LD_OWVAR 67
2904: PUSH
2905: LD_INT 1
2907: GREATER
2908: IFFALSE 3279
// begin ar_kamikadze := [ ] ;
2910: LD_ADDR_EXP 42
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2917: LD_INT 0
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: LD_VAR 0 5
2927: PPUSH
2928: CALL_OW 380
// un := CreateHuman ;
2932: LD_ADDR_VAR 0 4
2936: PUSH
2937: CALL_OW 44
2941: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2942: LD_VAR 0 4
2946: PPUSH
2947: LD_INT 3
2949: PPUSH
2950: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2954: LD_VAR 0 4
2958: PPUSH
2959: LD_INT 23
2961: PPUSH
2962: LD_INT 44
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 48
// ComCrawl ( un ) ;
2972: LD_VAR 0 4
2976: PPUSH
2977: CALL_OW 137
// un := CreateHuman ;
2981: LD_ADDR_VAR 0 4
2985: PUSH
2986: CALL_OW 44
2990: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2991: LD_VAR 0 4
2995: PPUSH
2996: LD_INT 3
2998: PPUSH
2999: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
3003: LD_VAR 0 4
3007: PPUSH
3008: LD_INT 30
3010: PPUSH
3011: LD_INT 39
3013: PPUSH
3014: LD_INT 0
3016: PPUSH
3017: CALL_OW 48
// ComCrawl ( un ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3030: LD_INT 0
3032: PPUSH
3033: LD_INT 17
3035: PPUSH
3036: LD_VAR 0 5
3040: PPUSH
3041: CALL_OW 380
// un := CreateHuman ;
3045: LD_ADDR_VAR 0 4
3049: PUSH
3050: CALL_OW 44
3054: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3055: LD_VAR 0 4
3059: PPUSH
3060: LD_INT 3
3062: PPUSH
3063: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3067: LD_VAR 0 4
3071: PPUSH
3072: LD_INT 45
3074: PPUSH
3075: LD_INT 86
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 48
// ComHold ( un ) ;
3085: LD_VAR 0 4
3089: PPUSH
3090: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3094: LD_ADDR_EXP 42
3098: PUSH
3099: LD_EXP 42
3103: PPUSH
3104: LD_EXP 42
3108: PUSH
3109: LD_INT 1
3111: PLUS
3112: PPUSH
3113: LD_VAR 0 4
3117: PPUSH
3118: CALL_OW 1
3122: ST_TO_ADDR
// un := CreateHuman ;
3123: LD_ADDR_VAR 0 4
3127: PUSH
3128: CALL_OW 44
3132: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3133: LD_VAR 0 4
3137: PPUSH
3138: LD_INT 3
3140: PPUSH
3141: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 60
3152: PPUSH
3153: LD_INT 85
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL_OW 48
// ComHold ( un ) ;
3163: LD_VAR 0 4
3167: PPUSH
3168: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3172: LD_ADDR_EXP 42
3176: PUSH
3177: LD_EXP 42
3181: PPUSH
3182: LD_EXP 42
3186: PUSH
3187: LD_INT 1
3189: PLUS
3190: PPUSH
3191: LD_VAR 0 4
3195: PPUSH
3196: CALL_OW 1
3200: ST_TO_ADDR
// un := CreateHuman ;
3201: LD_ADDR_VAR 0 4
3205: PUSH
3206: CALL_OW 44
3210: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3211: LD_VAR 0 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_INT 222
3230: PPUSH
3231: LD_INT 166
3233: PPUSH
3234: LD_INT 0
3236: PPUSH
3237: CALL_OW 48
// ComHold ( un ) ;
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3250: LD_ADDR_EXP 42
3254: PUSH
3255: LD_EXP 42
3259: PPUSH
3260: LD_EXP 42
3264: PUSH
3265: LD_INT 1
3267: PLUS
3268: PPUSH
3269: LD_VAR 0 4
3273: PPUSH
3274: CALL_OW 1
3278: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3279: LD_ADDR_EXP 40
3283: PUSH
3284: EMPTY
3285: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3286: LD_INT 1
3288: PPUSH
3289: LD_INT 1
3291: PPUSH
3292: LD_VAR 0 5
3296: PPUSH
3297: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3301: LD_ADDR_OWVAR 26
3305: PUSH
3306: LD_STRING Pavel Grigorovic
3308: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3309: LD_ADDR_OWVAR 33
3313: PUSH
3314: LD_STRING SecondCharsGal
3316: ST_TO_ADDR
// hc_face_number := 4 ;
3317: LD_ADDR_OWVAR 34
3321: PUSH
3322: LD_INT 4
3324: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3325: LD_ADDR_EXP 40
3329: PUSH
3330: LD_EXP 40
3334: PPUSH
3335: LD_INT 1
3337: PPUSH
3338: CALL_OW 44
3342: PPUSH
3343: CALL_OW 1
3347: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3348: LD_INT 2
3350: PPUSH
3351: LD_INT 4
3353: PPUSH
3354: LD_VAR 0 5
3358: PPUSH
3359: CALL_OW 380
// hc_name := Lucy Sebel ;
3363: LD_ADDR_OWVAR 26
3367: PUSH
3368: LD_STRING Lucy Sebel
3370: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3371: LD_ADDR_OWVAR 33
3375: PUSH
3376: LD_STRING SecondCharsGal
3378: ST_TO_ADDR
// hc_face_number := 15 ;
3379: LD_ADDR_OWVAR 34
3383: PUSH
3384: LD_INT 15
3386: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3387: LD_ADDR_EXP 40
3391: PUSH
3392: LD_EXP 40
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: CALL_OW 44
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3410: LD_INT 2
3412: PPUSH
3413: LD_INT 4
3415: PPUSH
3416: LD_VAR 0 5
3420: PPUSH
3421: CALL_OW 380
// hc_gallery :=  ;
3425: LD_ADDR_OWVAR 33
3429: PUSH
3430: LD_STRING 
3432: ST_TO_ADDR
// hc_name :=  ;
3433: LD_ADDR_OWVAR 26
3437: PUSH
3438: LD_STRING 
3440: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3441: LD_ADDR_EXP 40
3445: PUSH
3446: LD_EXP 40
3450: PPUSH
3451: LD_INT 3
3453: PPUSH
3454: CALL_OW 44
3458: PPUSH
3459: CALL_OW 1
3463: ST_TO_ADDR
// hc_sex := sex_male ;
3464: LD_ADDR_OWVAR 27
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// hc_class = 11 ;
3472: LD_ADDR_OWVAR 28
3476: PUSH
3477: LD_INT 11
3479: ST_TO_ADDR
// hc_gallery = sandar ;
3480: LD_ADDR_OWVAR 33
3484: PUSH
3485: LD_STRING sandar
3487: ST_TO_ADDR
// hc_face_number = 33 ;
3488: LD_ADDR_OWVAR 34
3492: PUSH
3493: LD_INT 33
3495: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3496: LD_ADDR_OWVAR 26
3500: PUSH
3501: LD_STRING Thabit Muhair Saliba
3503: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3504: LD_ADDR_OWVAR 31
3508: PUSH
3509: LD_INT 0
3511: PUSH
3512: LD_INT 0
3514: PUSH
3515: LD_INT 0
3517: PUSH
3518: LD_INT 0
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: ST_TO_ADDR
// Saliba = CreateHuman ;
3527: LD_ADDR_EXP 44
3531: PUSH
3532: CALL_OW 44
3536: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3537: LD_EXP 44
3541: PPUSH
3542: LD_INT 7
3544: PPUSH
3545: CALL_OW 52
// if gensher_active then
3549: LD_EXP 18
3553: IFFALSE 3580
// begin Gensher = NewCharacter ( Dietrich ) ;
3555: LD_ADDR_EXP 45
3559: PUSH
3560: LD_STRING Dietrich
3562: PPUSH
3563: CALL_OW 25
3567: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3568: LD_EXP 45
3572: PPUSH
3573: LD_INT 94
3575: PPUSH
3576: CALL_OW 52
// end ; InitHc ;
3580: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3584: LD_ADDR_EXP 41
3588: PUSH
3589: EMPTY
3590: ST_TO_ADDR
// for i = 1 to 5 do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: DOUBLE
3597: LD_INT 1
3599: DEC
3600: ST_TO_ADDR
3601: LD_INT 5
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3777
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3607: LD_INT 13
3609: PUSH
3610: LD_INT 14
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: CALL_OW 12
3627: ARRAY
3628: PPUSH
3629: LD_INT 1
3631: PUSH
3632: LD_INT 2
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_INT 2
3644: PPUSH
3645: CALL_OW 12
3649: ARRAY
3650: PPUSH
3651: LD_INT 1
3653: PPUSH
3654: LD_INT 25
3656: PUSH
3657: LD_INT 27
3659: PUSH
3660: LD_INT 26
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 1
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: CALL_OW 12
3678: ARRAY
3679: PPUSH
3680: LD_INT 60
3682: PPUSH
3683: LD_INT 100
3685: PPUSH
3686: CALL_OW 12
3690: PPUSH
3691: CALL 54126 0 5
// un := CreateVehicle ;
3695: LD_ADDR_VAR 0 4
3699: PUSH
3700: CALL_OW 45
3704: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3705: LD_ADDR_EXP 41
3709: PUSH
3710: LD_EXP 41
3714: PPUSH
3715: LD_EXP 41
3719: PUSH
3720: LD_INT 1
3722: PLUS
3723: PPUSH
3724: LD_VAR 0 4
3728: PPUSH
3729: CALL_OW 1
3733: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3734: LD_VAR 0 4
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: LD_INT 5
3744: PPUSH
3745: CALL_OW 12
3749: PPUSH
3750: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3754: LD_VAR 0 4
3758: PPUSH
3759: LD_INT 124
3761: PPUSH
3762: LD_INT 141
3764: PPUSH
3765: LD_INT 8
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 50
// end ;
3775: GO 3604
3777: POP
3778: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3779: LD_ADDR_EXP 43
3783: PUSH
3784: EMPTY
3785: PUSH
3786: EMPTY
3787: PUSH
3788: EMPTY
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3795: LD_ADDR_VAR 0 3
3799: PUSH
3800: DOUBLE
3801: LD_INT 1
3803: DEC
3804: ST_TO_ADDR
3805: LD_INT 3
3807: PUSH
3808: LD_INT 3
3810: PUSH
3811: LD_INT 4
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_OWVAR 67
3823: ARRAY
3824: PUSH
3825: FOR_TO
3826: IFFALSE 4040
// for i = 1 to 3 do
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: DOUBLE
3834: LD_INT 1
3836: DEC
3837: ST_TO_ADDR
3838: LD_INT 3
3840: PUSH
3841: FOR_TO
3842: IFFALSE 4036
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3844: LD_INT 14
3846: PPUSH
3847: LD_INT 3
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PUSH
3857: LD_INT 1
3859: PPUSH
3860: LD_INT 2
3862: PPUSH
3863: CALL_OW 12
3867: ARRAY
3868: PPUSH
3869: LD_INT 1
3871: PUSH
3872: LD_INT 5
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 1
3881: PPUSH
3882: LD_INT 2
3884: PPUSH
3885: CALL_OW 12
3889: ARRAY
3890: PPUSH
3891: LD_INT 25
3893: PUSH
3894: LD_INT 27
3896: PUSH
3897: LD_INT 26
3899: PUSH
3900: LD_INT 28
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 1
3911: PPUSH
3912: LD_INT 4
3914: PPUSH
3915: CALL_OW 12
3919: ARRAY
3920: PPUSH
3921: LD_INT 100
3923: PPUSH
3924: CALL 54126 0 5
// un := CreateVehicle ;
3928: LD_ADDR_VAR 0 4
3932: PUSH
3933: CALL_OW 45
3937: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3938: LD_ADDR_EXP 43
3942: PUSH
3943: LD_EXP 43
3947: PPUSH
3948: LD_VAR 0 2
3952: PUSH
3953: LD_EXP 43
3957: PUSH
3958: LD_VAR 0 2
3962: ARRAY
3963: PUSH
3964: LD_INT 1
3966: PLUS
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: LD_VAR 0 4
3976: PPUSH
3977: CALL 54248 0 3
3981: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3982: LD_VAR 0 4
3986: PPUSH
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 5
3992: PPUSH
3993: CALL_OW 12
3997: PPUSH
3998: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
4002: LD_VAR 0 4
4006: PPUSH
4007: LD_INT 20
4009: PUSH
4010: LD_INT 21
4012: PUSH
4013: LD_INT 22
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: LIST
4020: PUSH
4021: LD_VAR 0 2
4025: ARRAY
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 49
// end ;
4034: GO 3841
4036: POP
4037: POP
4038: GO 3825
4040: POP
4041: POP
// InitHc ;
4042: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4046: LD_INT 4
4048: PPUSH
4049: LD_INT 5
4051: PPUSH
4052: LD_INT 10
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 58
// end ;
4065: LD_VAR 0 1
4069: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4070: LD_EXP 42
4074: IFFALSE 4148
4076: GO 4078
4078: DISABLE
4079: LD_INT 0
4081: PPUSH
// begin enable ;
4082: ENABLE
// for i in ar_kamikadze do
4083: LD_ADDR_VAR 0 1
4087: PUSH
4088: LD_EXP 42
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4146
// if See ( 1 , i ) then
4096: LD_INT 1
4098: PPUSH
4099: LD_VAR 0 1
4103: PPUSH
4104: CALL_OW 292
4108: IFFALSE 4144
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_INT 81
4117: PUSH
4118: LD_INT 2
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: PPUSH
4130: LD_VAR 0 1
4134: PPUSH
4135: CALL_OW 74
4139: PPUSH
4140: CALL_OW 115
4144: GO 4093
4146: POP
4147: POP
// end ;
4148: PPOPN 1
4150: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4151: LD_EXP 13
4155: IFFALSE 4472
4157: GO 4159
4159: DISABLE
4160: LD_INT 0
4162: PPUSH
4163: PPUSH
4164: PPUSH
4165: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4166: LD_INT 35
4168: PPUSH
4169: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4173: LD_INT 1
4175: PPUSH
4176: CALL 41104 0 1
4180: PUSH
4181: LD_INT 0
4183: EQUAL
4184: IFFALSE 4166
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4186: LD_INT 1
4188: PPUSH
4189: LD_INT 14
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: LD_INT 32
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: PPUSH
4210: CALL 40708 0 2
// repeat wait ( 0 0$1 ) ;
4214: LD_INT 35
4216: PPUSH
4217: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4221: LD_EXP 69
4225: PUSH
4226: LD_INT 1
4228: ARRAY
4229: PPUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 34
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: IFFALSE 4214
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4260: LD_ADDR_VAR 0 2
4264: PUSH
4265: LD_EXP 69
4269: PUSH
4270: LD_INT 1
4272: ARRAY
4273: PPUSH
4274: LD_INT 33
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 34
4286: PUSH
4287: LD_INT 32
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 72
4302: PUSH
4303: LD_INT 1
4305: ARRAY
4306: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4307: LD_ADDR_VAR 0 4
4311: PUSH
4312: LD_INT 5
4314: PPUSH
4315: CALL_OW 469
4319: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4320: LD_INT 35
4322: PPUSH
4323: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4327: LD_ADDR_VAR 0 4
4331: PUSH
4332: LD_INT 5
4334: PPUSH
4335: CALL_OW 469
4339: ST_TO_ADDR
// tmp := 100 ;
4340: LD_ADDR_VAR 0 3
4344: PUSH
4345: LD_INT 100
4347: ST_TO_ADDR
// if pos then
4348: LD_VAR 0 4
4352: IFFALSE 4392
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: LD_INT 2
4361: PPUSH
4362: LD_VAR 0 4
4366: PUSH
4367: LD_INT 1
4369: ARRAY
4370: PPUSH
4371: LD_VAR 0 4
4375: PUSH
4376: LD_INT 2
4378: ARRAY
4379: PPUSH
4380: LD_INT 20
4382: PPUSH
4383: CALL 55144 0 4
4387: PUSH
4388: LD_INT 4
4390: ARRAY
4391: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4392: LD_VAR 0 4
4396: PUSH
4397: LD_EXP 14
4401: NOT
4402: AND
4403: PUSH
4404: LD_VAR 0 3
4408: PUSH
4409: LD_INT 10
4411: LESS
4412: AND
4413: IFFALSE 4320
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4415: LD_VAR 0 2
4419: PPUSH
4420: LD_VAR 0 4
4424: PUSH
4425: LD_INT 1
4427: ARRAY
4428: PPUSH
4429: LD_VAR 0 4
4433: PUSH
4434: LD_INT 2
4436: ARRAY
4437: PPUSH
4438: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: LD_INT 198
4449: PPUSH
4450: LD_INT 113
4452: PPUSH
4453: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4457: LD_VAR 0 2
4461: PPUSH
4462: LD_INT 124
4464: PPUSH
4465: LD_INT 7
4467: PPUSH
4468: CALL_OW 171
// end ;
4472: PPOPN 4
4474: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4475: LD_EXP 6
4479: IFFALSE 7153
4481: GO 4483
4483: DISABLE
4484: LD_INT 0
4486: PPUSH
4487: PPUSH
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
4493: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4494: LD_ADDR_VAR 0 4
4498: PUSH
4499: LD_INT 5
4501: PUSH
4502: LD_INT 6
4504: PUSH
4505: LD_INT 7
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: PUSH
4513: LD_OWVAR 67
4517: ARRAY
4518: ST_TO_ADDR
// coords := [ ] ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: EMPTY
4525: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4526: LD_ADDR_VAR 0 6
4530: PUSH
4531: LD_INT 0
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 0
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: LD_INT 0
4548: PUSH
4549: LD_INT 0
4551: PUSH
4552: LD_INT 0
4554: PUSH
4555: LD_INT 1
4557: PUSH
4558: LD_INT 0
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4573: LD_INT 1
4575: PPUSH
4576: LD_INT 14
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: LD_INT 28
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 14
4596: PUSH
4597: LD_INT 1
4599: PUSH
4600: LD_INT 2
4602: PUSH
4603: LD_INT 25
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 14
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: LD_INT 2
4620: PUSH
4621: LD_INT 28
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 14
4632: PUSH
4633: LD_INT 1
4635: PUSH
4636: LD_INT 2
4638: PUSH
4639: LD_INT 29
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PPUSH
4654: CALL 40708 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4658: LD_INT 21000
4660: PUSH
4661: LD_INT 19950
4663: PUSH
4664: LD_INT 18900
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: PUSH
4672: LD_OWVAR 67
4676: ARRAY
4677: PPUSH
4678: CALL_OW 67
// InitHc ;
4682: CALL_OW 19
// InitUc ;
4686: CALL_OW 18
// uc_side := 2 ;
4690: LD_ADDR_OWVAR 20
4694: PUSH
4695: LD_INT 2
4697: ST_TO_ADDR
// uc_nation := 2 ;
4698: LD_ADDR_OWVAR 21
4702: PUSH
4703: LD_INT 2
4705: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: EMPTY
4712: PUSH
4713: EMPTY
4714: PUSH
4715: EMPTY
4716: PUSH
4717: EMPTY
4718: PUSH
4719: EMPTY
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4728: LD_ADDR_VAR 0 3
4732: PUSH
4733: LD_VAR 0 3
4737: PPUSH
4738: LD_INT 1
4740: PPUSH
4741: LD_EXP 69
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_INT 34
4752: PUSH
4753: LD_INT 32
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PPUSH
4760: CALL_OW 69
4764: DIFF
4765: PPUSH
4766: CALL_OW 1
4770: ST_TO_ADDR
// for i = 1 to Difficulty do
4771: LD_ADDR_VAR 0 1
4775: PUSH
4776: DOUBLE
4777: LD_INT 1
4779: DEC
4780: ST_TO_ADDR
4781: LD_OWVAR 67
4785: PUSH
4786: FOR_TO
4787: IFFALSE 4925
// begin uc_side := 2 ;
4789: LD_ADDR_OWVAR 20
4793: PUSH
4794: LD_INT 2
4796: ST_TO_ADDR
// uc_nation := 2 ;
4797: LD_ADDR_OWVAR 21
4801: PUSH
4802: LD_INT 2
4804: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4805: LD_INT 13
4807: PPUSH
4808: LD_INT 3
4810: PPUSH
4811: LD_INT 5
4813: PPUSH
4814: LD_INT 29
4816: PPUSH
4817: LD_INT 100
4819: PPUSH
4820: CALL 54126 0 5
// un := CreateVehicle ;
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: CALL_OW 45
4833: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_VAR 0 3
4843: PPUSH
4844: LD_INT 1
4846: PUSH
4847: LD_VAR 0 3
4851: PUSH
4852: LD_INT 1
4854: ARRAY
4855: PUSH
4856: LD_INT 1
4858: PLUS
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: LD_VAR 0 2
4868: PPUSH
4869: CALL 54248 0 3
4873: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4874: LD_VAR 0 2
4878: PPUSH
4879: LD_INT 3
4881: PPUSH
4882: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4886: LD_VAR 0 2
4890: PPUSH
4891: LD_INT 16
4893: PPUSH
4894: LD_INT 0
4896: PPUSH
4897: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4901: LD_VAR 0 2
4905: PPUSH
4906: LD_INT 51
4908: PPUSH
4909: LD_INT 10
4911: PPUSH
4912: CALL_OW 111
// wait ( 0 0$2 ) ;
4916: LD_INT 70
4918: PPUSH
4919: CALL_OW 67
// end ;
4923: GO 4786
4925: POP
4926: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4927: LD_ADDR_VAR 0 5
4931: PUSH
4932: LD_INT 51
4934: PUSH
4935: LD_INT 24
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: LD_INT 75
4944: PUSH
4945: LD_INT 90
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4956: LD_INT 1
4958: PPUSH
4959: LD_VAR 0 3
4963: PUSH
4964: LD_INT 1
4966: ARRAY
4967: PPUSH
4968: LD_VAR 0 5
4972: PPUSH
4973: LD_VAR 0 6
4977: PPUSH
4978: CALL 40941 0 4
// for i = 1 to [ 1 , 3 , 3 ] [ Difficulty ] do
4982: LD_ADDR_VAR 0 1
4986: PUSH
4987: DOUBLE
4988: LD_INT 1
4990: DEC
4991: ST_TO_ADDR
4992: LD_INT 1
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: LIST
5005: PUSH
5006: LD_OWVAR 67
5010: ARRAY
5011: PUSH
5012: FOR_TO
5013: IFFALSE 5113
// begin uc_side := 2 ;
5015: LD_ADDR_OWVAR 20
5019: PUSH
5020: LD_INT 2
5022: ST_TO_ADDR
// uc_nation := 2 ;
5023: LD_ADDR_OWVAR 21
5027: PUSH
5028: LD_INT 2
5030: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5031: LD_INT 0
5033: PPUSH
5034: LD_INT 17
5036: PPUSH
5037: LD_VAR 0 4
5041: PPUSH
5042: CALL_OW 380
// un := CreateHuman ;
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5056: LD_ADDR_VAR 0 3
5060: PUSH
5061: LD_VAR 0 3
5065: PPUSH
5066: LD_INT 2
5068: PUSH
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 2
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PPUSH
5086: LD_VAR 0 2
5090: PPUSH
5091: CALL 54248 0 3
5095: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5096: LD_VAR 0 2
5100: PPUSH
5101: LD_INT 13
5103: PPUSH
5104: LD_INT 0
5106: PPUSH
5107: CALL_OW 49
// end ;
5111: GO 5012
5113: POP
5114: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5115: LD_ADDR_VAR 0 1
5119: PUSH
5120: DOUBLE
5121: LD_INT 1
5123: DEC
5124: ST_TO_ADDR
5125: LD_INT 2
5127: PUSH
5128: LD_INT 3
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: PUSH
5139: LD_OWVAR 67
5143: ARRAY
5144: PUSH
5145: FOR_TO
5146: IFFALSE 5265
// begin uc_side := 2 ;
5148: LD_ADDR_OWVAR 20
5152: PUSH
5153: LD_INT 2
5155: ST_TO_ADDR
// uc_nation := 2 ;
5156: LD_ADDR_OWVAR 21
5160: PUSH
5161: LD_INT 2
5163: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5164: LD_INT 0
5166: PPUSH
5167: LD_INT 1
5169: PUSH
5170: LD_INT 8
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 1
5179: PPUSH
5180: LD_INT 2
5182: PPUSH
5183: CALL_OW 12
5187: ARRAY
5188: PPUSH
5189: LD_VAR 0 4
5193: PPUSH
5194: CALL_OW 380
// un := CreateHuman ;
5198: LD_ADDR_VAR 0 2
5202: PUSH
5203: CALL_OW 44
5207: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_VAR 0 3
5217: PPUSH
5218: LD_INT 2
5220: PUSH
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 2
5228: ARRAY
5229: PUSH
5230: LD_INT 1
5232: PLUS
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PPUSH
5238: LD_VAR 0 2
5242: PPUSH
5243: CALL 54248 0 3
5247: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5248: LD_VAR 0 2
5252: PPUSH
5253: LD_INT 13
5255: PPUSH
5256: LD_INT 0
5258: PPUSH
5259: CALL_OW 49
// end ;
5263: GO 5145
5265: POP
5266: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5267: LD_ADDR_VAR 0 5
5271: PUSH
5272: LD_INT 67
5274: PUSH
5275: LD_INT 112
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 85
5284: PUSH
5285: LD_INT 130
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5296: LD_INT 2
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 2
5306: ARRAY
5307: PPUSH
5308: LD_VAR 0 5
5312: PPUSH
5313: LD_VAR 0 6
5317: PPUSH
5318: CALL 40941 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5322: LD_ADDR_VAR 0 1
5326: PUSH
5327: DOUBLE
5328: LD_INT 1
5330: DEC
5331: ST_TO_ADDR
5332: LD_INT 1
5334: PUSH
5335: LD_INT 2
5337: PUSH
5338: LD_INT 3
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PUSH
5352: FOR_TO
5353: IFFALSE 5453
// begin uc_side := 2 ;
5355: LD_ADDR_OWVAR 20
5359: PUSH
5360: LD_INT 2
5362: ST_TO_ADDR
// uc_nation := 2 ;
5363: LD_ADDR_OWVAR 21
5367: PUSH
5368: LD_INT 2
5370: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 17
5376: PPUSH
5377: LD_VAR 0 4
5381: PPUSH
5382: CALL_OW 380
// un := CreateHuman ;
5386: LD_ADDR_VAR 0 2
5390: PUSH
5391: CALL_OW 44
5395: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5396: LD_ADDR_VAR 0 3
5400: PUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: LD_INT 3
5408: PUSH
5409: LD_VAR 0 3
5413: PUSH
5414: LD_INT 3
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: PLUS
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: LD_VAR 0 2
5430: PPUSH
5431: CALL 54248 0 3
5435: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_INT 14
5443: PPUSH
5444: LD_INT 0
5446: PPUSH
5447: CALL_OW 49
// end ;
5451: GO 5352
5453: POP
5454: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 148
5462: PUSH
5463: LD_INT 158
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 148
5472: PUSH
5473: LD_INT 158
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_VAR 0 3
5491: PUSH
5492: LD_INT 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 5
5500: PPUSH
5501: LD_VAR 0 6
5505: PPUSH
5506: CALL 40941 0 4
// for i = 1 to [ 2 , 4 , 4 ] [ Difficulty ] do
5510: LD_ADDR_VAR 0 1
5514: PUSH
5515: DOUBLE
5516: LD_INT 1
5518: DEC
5519: ST_TO_ADDR
5520: LD_INT 2
5522: PUSH
5523: LD_INT 4
5525: PUSH
5526: LD_INT 4
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: PUSH
5534: LD_OWVAR 67
5538: ARRAY
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5765
// begin uc_side := 2 ;
5543: LD_ADDR_OWVAR 20
5547: PUSH
5548: LD_INT 2
5550: ST_TO_ADDR
// uc_nation := 2 ;
5551: LD_ADDR_OWVAR 21
5555: PUSH
5556: LD_INT 2
5558: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5559: LD_INT 14
5561: PPUSH
5562: LD_INT 3
5564: PPUSH
5565: LD_INT 1
5567: PUSH
5568: LD_INT 5
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 1
5577: PPUSH
5578: LD_INT 2
5580: PPUSH
5581: CALL_OW 12
5585: ARRAY
5586: PPUSH
5587: LD_INT 27
5589: PUSH
5590: LD_INT 26
5592: PUSH
5593: LD_INT 28
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 1
5603: PPUSH
5604: LD_INT 3
5606: PPUSH
5607: CALL_OW 12
5611: ARRAY
5612: PPUSH
5613: LD_INT 100
5615: PPUSH
5616: CALL 54126 0 5
// un := CreateVehicle ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: CALL_OW 45
5629: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_VAR 0 3
5639: PPUSH
5640: LD_INT 4
5642: PUSH
5643: LD_VAR 0 3
5647: PUSH
5648: LD_INT 4
5650: ARRAY
5651: PUSH
5652: LD_INT 1
5654: PLUS
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: LD_VAR 0 2
5664: PPUSH
5665: CALL 54248 0 3
5669: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5670: LD_VAR 0 2
5674: PPUSH
5675: LD_INT 5
5677: PPUSH
5678: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5682: LD_VAR 0 2
5686: PPUSH
5687: LD_INT 15
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 49
// if GetControl ( un ) = control_manual then
5697: LD_VAR 0 2
5701: PPUSH
5702: CALL_OW 263
5706: PUSH
5707: LD_INT 1
5709: EQUAL
5710: IFFALSE 5741
// begin PrepareHuman ( false , 3 , skill ) ;
5712: LD_INT 0
5714: PPUSH
5715: LD_INT 3
5717: PPUSH
5718: LD_VAR 0 4
5722: PPUSH
5723: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5727: CALL_OW 44
5731: PPUSH
5732: LD_VAR 0 2
5736: PPUSH
5737: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5741: LD_VAR 0 2
5745: PPUSH
5746: LD_INT 179
5748: PPUSH
5749: LD_INT 135
5751: PPUSH
5752: CALL_OW 111
// wait ( 0 0$2 ) ;
5756: LD_INT 70
5758: PPUSH
5759: CALL_OW 67
// end ;
5763: GO 5540
5765: POP
5766: POP
// vc_chassis := 15 ;
5767: LD_ADDR_OWVAR 37
5771: PUSH
5772: LD_INT 15
5774: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: LD_VAR 0 3
5784: PPUSH
5785: LD_INT 4
5787: PUSH
5788: LD_VAR 0 3
5792: PUSH
5793: LD_INT 4
5795: ARRAY
5796: PUSH
5797: LD_INT 1
5799: PLUS
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PPUSH
5805: CALL_OW 45
5809: PPUSH
5810: CALL 54248 0 3
5814: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5815: LD_VAR 0 3
5819: PUSH
5820: LD_INT 4
5822: ARRAY
5823: PUSH
5824: LD_VAR 0 3
5828: PUSH
5829: LD_INT 4
5831: ARRAY
5832: ARRAY
5833: PPUSH
5834: LD_INT 15
5836: PPUSH
5837: LD_INT 0
5839: PPUSH
5840: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5844: LD_INT 0
5846: PPUSH
5847: LD_INT 11
5849: PPUSH
5850: LD_VAR 0 4
5854: PPUSH
5855: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: LD_INT 4
5871: PUSH
5872: LD_VAR 0 3
5876: PUSH
5877: LD_INT 4
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: PLUS
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PPUSH
5889: CALL_OW 44
5893: PPUSH
5894: CALL 54248 0 3
5898: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5899: LD_VAR 0 3
5903: PUSH
5904: LD_INT 4
5906: ARRAY
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: LD_INT 4
5915: ARRAY
5916: ARRAY
5917: PPUSH
5918: LD_VAR 0 3
5922: PUSH
5923: LD_INT 4
5925: ARRAY
5926: PUSH
5927: LD_VAR 0 3
5931: PUSH
5932: LD_INT 4
5934: ARRAY
5935: PUSH
5936: LD_INT 1
5938: MINUS
5939: ARRAY
5940: PPUSH
5941: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5945: LD_ADDR_VAR 0 5
5949: PUSH
5950: LD_INT 148
5952: PUSH
5953: LD_INT 140
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: EMPTY
5961: LIST
5962: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5963: LD_INT 1
5965: PPUSH
5966: LD_VAR 0 3
5970: PUSH
5971: LD_INT 4
5973: ARRAY
5974: PPUSH
5975: LD_VAR 0 5
5979: PPUSH
5980: LD_VAR 0 6
5984: PPUSH
5985: CALL 40941 0 4
// if gensher_active then
5989: LD_EXP 18
5993: IFFALSE 6395
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5995: LD_EXP 45
5999: PPUSH
6000: LD_STRING D10-Diet-1
6002: PPUSH
6003: CALL_OW 94
// for i = 1 to 2 do
6007: LD_ADDR_VAR 0 1
6011: PUSH
6012: DOUBLE
6013: LD_INT 1
6015: DEC
6016: ST_TO_ADDR
6017: LD_INT 2
6019: PUSH
6020: FOR_TO
6021: IFFALSE 6159
// begin uc_side := 2 ;
6023: LD_ADDR_OWVAR 20
6027: PUSH
6028: LD_INT 2
6030: ST_TO_ADDR
// uc_nation := 2 ;
6031: LD_ADDR_OWVAR 21
6035: PUSH
6036: LD_INT 2
6038: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6039: LD_INT 13
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: LD_INT 5
6047: PPUSH
6048: LD_INT 29
6050: PPUSH
6051: LD_INT 100
6053: PPUSH
6054: CALL 54126 0 5
// un := CreateVehicle ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: CALL_OW 45
6067: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6068: LD_ADDR_VAR 0 3
6072: PUSH
6073: LD_VAR 0 3
6077: PPUSH
6078: LD_INT 5
6080: PUSH
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 5
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PPUSH
6098: LD_VAR 0 2
6102: PPUSH
6103: CALL 54248 0 3
6107: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6108: LD_VAR 0 2
6112: PPUSH
6113: LD_INT 0
6115: PPUSH
6116: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6120: LD_VAR 0 2
6124: PPUSH
6125: LD_INT 23
6127: PPUSH
6128: LD_INT 0
6130: PPUSH
6131: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_INT 85
6142: PPUSH
6143: LD_INT 152
6145: PPUSH
6146: CALL_OW 111
// wait ( 0 0$2 ) ;
6150: LD_INT 70
6152: PPUSH
6153: CALL_OW 67
// end ;
6157: GO 6020
6159: POP
6160: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: DOUBLE
6167: LD_INT 1
6169: DEC
6170: ST_TO_ADDR
6171: LD_INT 2
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: LD_INT 3
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: PUSH
6185: LD_OWVAR 67
6189: ARRAY
6190: PUSH
6191: FOR_TO
6192: IFFALSE 6349
// begin uc_side := 2 ;
6194: LD_ADDR_OWVAR 20
6198: PUSH
6199: LD_INT 2
6201: ST_TO_ADDR
// uc_nation := 2 ;
6202: LD_ADDR_OWVAR 21
6206: PUSH
6207: LD_INT 2
6209: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6210: LD_INT 14
6212: PPUSH
6213: LD_INT 3
6215: PPUSH
6216: LD_INT 5
6218: PPUSH
6219: LD_INT 27
6221: PUSH
6222: LD_INT 28
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 1
6231: PPUSH
6232: LD_INT 2
6234: PPUSH
6235: CALL_OW 12
6239: ARRAY
6240: PPUSH
6241: LD_INT 100
6243: PPUSH
6244: CALL 54126 0 5
// un := CreateVehicle ;
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: CALL_OW 45
6257: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6258: LD_ADDR_VAR 0 3
6262: PUSH
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 5
6270: PUSH
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 5
6278: ARRAY
6279: PUSH
6280: LD_INT 1
6282: PLUS
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL 54248 0 3
6297: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6298: LD_VAR 0 2
6302: PPUSH
6303: LD_INT 0
6305: PPUSH
6306: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_INT 23
6317: PPUSH
6318: LD_INT 0
6320: PPUSH
6321: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6325: LD_VAR 0 2
6329: PPUSH
6330: LD_INT 85
6332: PPUSH
6333: LD_INT 152
6335: PPUSH
6336: CALL_OW 111
// wait ( 0 0$2 ) ;
6340: LD_INT 70
6342: PPUSH
6343: CALL_OW 67
// end ;
6347: GO 6191
6349: POP
6350: POP
// coords := [ [ 97 , 143 ] ] ;
6351: LD_ADDR_VAR 0 5
6355: PUSH
6356: LD_INT 97
6358: PUSH
6359: LD_INT 143
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6369: LD_INT 1
6371: PPUSH
6372: LD_VAR 0 3
6376: PUSH
6377: LD_INT 5
6379: ARRAY
6380: PPUSH
6381: LD_VAR 0 5
6385: PPUSH
6386: LD_VAR 0 6
6390: PPUSH
6391: CALL 40941 0 4
// end ; Wait ( 13 13$00 ) ;
6395: LD_INT 27300
6397: PPUSH
6398: CALL_OW 67
// tmp := [ ] ;
6402: LD_ADDR_VAR 0 3
6406: PUSH
6407: EMPTY
6408: ST_TO_ADDR
// w := 1 ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// repeat tmp := [ ] ;
6417: LD_ADDR_VAR 0 3
6421: PUSH
6422: EMPTY
6423: ST_TO_ADDR
// if w mod 4 = 0 then
6424: LD_VAR 0 7
6428: PUSH
6429: LD_INT 4
6431: MOD
6432: PUSH
6433: LD_INT 0
6435: EQUAL
6436: IFFALSE 6523
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6438: LD_ADDR_VAR 0 8
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 24
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 11
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: LD_INT 24
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 11
6481: PUSH
6482: LD_INT 1
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: LD_INT 24
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 11
6499: PUSH
6500: LD_INT 1
6502: PUSH
6503: LD_INT 2
6505: PUSH
6506: LD_INT 24
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: ST_TO_ADDR
6521: GO 6625
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6523: LD_ADDR_VAR 0 8
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 28
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 14
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 25
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 14
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 28
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 14
6584: PUSH
6585: LD_INT 1
6587: PUSH
6588: LD_INT 2
6590: PUSH
6591: LD_INT 29
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 11
6602: PUSH
6603: LD_INT 1
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 24
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: ST_TO_ADDR
// if w mod 3 = 0 then
6625: LD_VAR 0 7
6629: PUSH
6630: LD_INT 3
6632: MOD
6633: PUSH
6634: LD_INT 0
6636: EQUAL
6637: IFFALSE 6713
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6639: LD_ADDR_VAR 0 8
6643: PUSH
6644: LD_VAR 0 8
6648: PPUSH
6649: LD_INT 1
6651: PUSH
6652: LD_VAR 0 8
6656: PUSH
6657: LD_VAR 0 1
6661: ARRAY
6662: PUSH
6663: LD_INT 1
6665: PLUS
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: LD_INT 14
6673: PUSH
6674: LD_INT 1
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: LD_INT 25
6682: PUSH
6683: LD_INT 28
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 1
6692: PPUSH
6693: LD_INT 2
6695: PPUSH
6696: CALL_OW 12
6700: ARRAY
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PPUSH
6708: CALL 54248 0 3
6712: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6713: LD_INT 1
6715: PPUSH
6716: LD_VAR 0 8
6720: PPUSH
6721: CALL 40708 0 2
// if GetSide ( ar_dep_w ) = 2 then
6725: LD_INT 45
6727: PPUSH
6728: CALL_OW 255
6732: PUSH
6733: LD_INT 2
6735: EQUAL
6736: IFFALSE 6821
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6738: LD_ADDR_VAR 0 8
6742: PUSH
6743: LD_INT 14
6745: PUSH
6746: LD_INT 1
6748: PUSH
6749: LD_INT 2
6751: PUSH
6752: LD_INT 28
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 14
6763: PUSH
6764: LD_INT 1
6766: PUSH
6767: LD_INT 2
6769: PUSH
6770: LD_INT 27
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 14
6781: PUSH
6782: LD_INT 1
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 27
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6802: LD_INT 2
6804: PPUSH
6805: LD_VAR 0 8
6809: PPUSH
6810: CALL 40708 0 2
// wait ( 0 0$50 ) ;
6814: LD_INT 1750
6816: PPUSH
6817: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6828: LD_EXP 69
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: LD_INT 3
6839: PUSH
6840: LD_INT 34
6842: PUSH
6843: LD_INT 32
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 72
6858: PUSH
6859: LD_INT 4
6861: GREATEREQUAL
6862: IFFALSE 6821
// wait ( 0 0$10 ) ;
6864: LD_INT 350
6866: PPUSH
6867: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_EXP 69
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_INT 3
6887: PUSH
6888: LD_INT 34
6890: PUSH
6891: LD_INT 32
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 72
6906: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6907: LD_INT 100
6909: PPUSH
6910: CALL_OW 13
6914: PUSH
6915: LD_INT 50
6917: LESS
6918: IFFALSE 6951
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6920: LD_ADDR_VAR 0 5
6924: PUSH
6925: LD_INT 55
6927: PUSH
6928: LD_INT 7
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 75
6937: PUSH
6938: LD_INT 90
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: ST_TO_ADDR
6949: GO 6980
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6951: LD_ADDR_VAR 0 5
6955: PUSH
6956: LD_INT 128
6958: PUSH
6959: LD_INT 94
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 180
6968: PUSH
6969: LD_INT 135
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: ST_TO_ADDR
// if w mod 4 = 0 then
6980: LD_VAR 0 7
6984: PUSH
6985: LD_INT 4
6987: MOD
6988: PUSH
6989: LD_INT 0
6991: EQUAL
6992: IFFALSE 7023
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6994: LD_ADDR_VAR 0 5
6998: PUSH
6999: LD_INT 91
7001: PUSH
7002: LD_INT 58
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 117
7011: PUSH
7012: LD_INT 107
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
7023: LD_INT 1
7025: PPUSH
7026: LD_VAR 0 3
7030: PPUSH
7031: LD_VAR 0 5
7035: PPUSH
7036: LD_VAR 0 6
7040: PPUSH
7041: CALL 40941 0 4
// if mc_vehicles [ 2 ] then
7045: LD_EXP 69
7049: PUSH
7050: LD_INT 2
7052: ARRAY
7053: IFFALSE 7089
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7055: LD_INT 2
7057: PPUSH
7058: LD_EXP 69
7062: PUSH
7063: LD_INT 2
7065: ARRAY
7066: PPUSH
7067: LD_INT 73
7069: PUSH
7070: LD_INT 115
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: PPUSH
7080: LD_VAR 0 6
7084: PPUSH
7085: CALL 40941 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7089: LD_INT 22050
7091: PPUSH
7092: LD_INT 28350
7094: PPUSH
7095: CALL_OW 12
7099: PPUSH
7100: CALL_OW 67
// w := w + 1 ;
7104: LD_ADDR_VAR 0 7
7108: PUSH
7109: LD_VAR 0 7
7113: PUSH
7114: LD_INT 1
7116: PLUS
7117: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7118: LD_INT 94
7120: PPUSH
7121: CALL_OW 301
7125: PUSH
7126: LD_EXP 50
7130: PUSH
7131: LD_INT 1
7133: ARRAY
7134: PPUSH
7135: LD_INT 30
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PPUSH
7145: CALL_OW 72
7149: NOT
7150: OR
7151: IFFALSE 6417
// end ;
7153: PPOPN 8
7155: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7156: LD_INT 204
7158: IFFALSE 7632
7160: GO 7162
7162: DISABLE
7163: LD_INT 0
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
// begin enable ;
7169: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7170: LD_INT 35
7172: PPUSH
7173: LD_INT 1190
7175: PPUSH
7176: CALL_OW 12
7180: PPUSH
7181: CALL_OW 67
// tmp := [ ] ;
7185: LD_ADDR_VAR 0 2
7189: PUSH
7190: EMPTY
7191: ST_TO_ADDR
// uc_side := 8 ;
7192: LD_ADDR_OWVAR 20
7196: PUSH
7197: LD_INT 8
7199: ST_TO_ADDR
// uc_nation := 2 ;
7200: LD_ADDR_OWVAR 21
7204: PUSH
7205: LD_INT 2
7207: ST_TO_ADDR
// InitHc ;
7208: CALL_OW 19
// for i = 1 to 3 do
7212: LD_ADDR_VAR 0 1
7216: PUSH
7217: DOUBLE
7218: LD_INT 1
7220: DEC
7221: ST_TO_ADDR
7222: LD_INT 3
7224: PUSH
7225: FOR_TO
7226: IFFALSE 7353
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7228: LD_INT 13
7230: PUSH
7231: LD_INT 14
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 1
7240: PPUSH
7241: LD_INT 2
7243: PPUSH
7244: CALL_OW 12
7248: ARRAY
7249: PPUSH
7250: LD_INT 3
7252: PPUSH
7253: LD_INT 5
7255: PPUSH
7256: LD_INT 27
7258: PUSH
7259: LD_INT 28
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 1
7268: PPUSH
7269: LD_INT 2
7271: PPUSH
7272: CALL_OW 12
7276: ARRAY
7277: PPUSH
7278: LD_INT 100
7280: PPUSH
7281: CALL 54126 0 5
// un := CreateVehicle ;
7285: LD_ADDR_VAR 0 3
7289: PUSH
7290: CALL_OW 45
7294: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7295: LD_VAR 0 3
7299: PPUSH
7300: LD_INT 4
7302: PPUSH
7303: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7307: LD_VAR 0 3
7311: PPUSH
7312: LD_INT 15
7314: PPUSH
7315: LD_INT 0
7317: PPUSH
7318: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7322: LD_ADDR_VAR 0 2
7326: PUSH
7327: LD_VAR 0 2
7331: PPUSH
7332: LD_VAR 0 2
7336: PUSH
7337: LD_INT 1
7339: PLUS
7340: PPUSH
7341: LD_VAR 0 3
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// end ;
7351: GO 7225
7353: POP
7354: POP
// for i = 1 to 4 do
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: DOUBLE
7361: LD_INT 1
7363: DEC
7364: ST_TO_ADDR
7365: LD_INT 4
7367: PUSH
7368: FOR_TO
7369: IFFALSE 7448
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7371: LD_INT 0
7373: PPUSH
7374: LD_INT 1
7376: PPUSH
7377: LD_INT 4
7379: PPUSH
7380: CALL_OW 12
7384: PPUSH
7385: LD_INT 6
7387: PPUSH
7388: CALL_OW 380
// un := CreateHuman ;
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: CALL_OW 44
7401: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7402: LD_VAR 0 3
7406: PPUSH
7407: LD_INT 15
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7417: LD_ADDR_VAR 0 2
7421: PUSH
7422: LD_VAR 0 2
7426: PPUSH
7427: LD_VAR 0 2
7431: PUSH
7432: LD_INT 1
7434: PLUS
7435: PPUSH
7436: LD_VAR 0 3
7440: PPUSH
7441: CALL_OW 1
7445: ST_TO_ADDR
// end ;
7446: GO 7368
7448: POP
7449: POP
// wait ( 0 0$3 ) ;
7450: LD_INT 105
7452: PPUSH
7453: CALL_OW 67
// for i in tmp do
7457: LD_ADDR_VAR 0 1
7461: PUSH
7462: LD_VAR 0 2
7466: PUSH
7467: FOR_IN
7468: IFFALSE 7536
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7470: LD_VAR 0 1
7474: PPUSH
7475: CALL_OW 257
7479: PUSH
7480: LD_INT 1
7482: EQUAL
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 247
7493: PUSH
7494: LD_INT 2
7496: EQUAL
7497: OR
7498: IFFALSE 7534
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_INT 81
7507: PUSH
7508: LD_INT 8
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PPUSH
7515: CALL_OW 69
7519: PPUSH
7520: LD_VAR 0 1
7524: PPUSH
7525: CALL_OW 74
7529: PPUSH
7530: CALL_OW 115
7534: GO 7467
7536: POP
7537: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7538: LD_VAR 0 2
7542: PPUSH
7543: LD_INT 210
7545: PPUSH
7546: LD_INT 178
7548: PPUSH
7549: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7553: LD_ADDR_VAR 0 4
7557: PUSH
7558: LD_INT 10
7560: PPUSH
7561: LD_INT 22
7563: PUSH
7564: LD_INT 8
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 70
7575: ST_TO_ADDR
// if x then
7576: LD_VAR 0 4
7580: IFFALSE 7608
// for i in x do
7582: LD_ADDR_VAR 0 1
7586: PUSH
7587: LD_VAR 0 4
7591: PUSH
7592: FOR_IN
7593: IFFALSE 7606
// RemoveUnit ( i ) ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 64
7604: GO 7592
7606: POP
7607: POP
// wait ( 0 0$1 ) ;
7608: LD_INT 35
7610: PPUSH
7611: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7615: LD_INT 22
7617: PUSH
7618: LD_INT 8
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PPUSH
7625: CALL_OW 69
7629: NOT
7630: IFFALSE 7538
// end ;
7632: PPOPN 4
7634: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7635: LD_INT 22
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 34
7647: PUSH
7648: LD_INT 31
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 24
7660: PUSH
7661: LD_INT 1000
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: IFFALSE 7725
7683: GO 7685
7685: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7686: LD_INT 22
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 31
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: PPUSH
7715: LD_INT 106
7717: PPUSH
7718: LD_INT 14
7720: PPUSH
7721: CALL_OW 111
// end ; end_of_file
7725: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7726: LD_INT 0
7728: PPUSH
7729: PPUSH
7730: PPUSH
7731: PPUSH
7732: PPUSH
7733: PPUSH
// InGameOn ;
7734: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7738: LD_EXP 21
7742: PPUSH
7743: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7747: LD_INT 2
7749: PPUSH
7750: LD_INT 1
7752: PPUSH
7753: LD_INT 1
7755: PPUSH
7756: LD_INT 1
7758: PPUSH
7759: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7763: LD_ADDR_VAR 0 2
7767: PUSH
7768: LD_INT 22
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 25
7780: PUSH
7781: LD_INT 1
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 69
7796: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7797: LD_ADDR_VAR 0 4
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 1
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 34
7814: PUSH
7815: LD_INT 11
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 69
7830: PUSH
7831: LD_INT 1
7833: ARRAY
7834: ST_TO_ADDR
// for i = 1 to tmp do
7835: LD_ADDR_VAR 0 6
7839: PUSH
7840: DOUBLE
7841: LD_INT 1
7843: DEC
7844: ST_TO_ADDR
7845: LD_VAR 0 2
7849: PUSH
7850: FOR_TO
7851: IFFALSE 7898
// begin if i = 5 then
7853: LD_VAR 0 6
7857: PUSH
7858: LD_INT 5
7860: EQUAL
7861: IFFALSE 7865
// break ;
7863: GO 7898
// sols := Replace ( sols , i , tmp [ i ] ) ;
7865: LD_ADDR_VAR 0 5
7869: PUSH
7870: LD_VAR 0 5
7874: PPUSH
7875: LD_VAR 0 6
7879: PPUSH
7880: LD_VAR 0 2
7884: PUSH
7885: LD_VAR 0 6
7889: ARRAY
7890: PPUSH
7891: CALL_OW 1
7895: ST_TO_ADDR
// end ;
7896: GO 7850
7898: POP
7899: POP
// tmp := ar_force_tmp ;
7900: LD_ADDR_VAR 0 2
7904: PUSH
7905: LD_EXP 40
7909: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7910: LD_VAR 0 2
7914: PUSH
7915: LD_INT 1
7917: ARRAY
7918: PPUSH
7919: LD_INT 108
7921: PPUSH
7922: LD_INT 139
7924: PPUSH
7925: LD_INT 0
7927: PPUSH
7928: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7932: LD_VAR 0 2
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: LD_EXP 21
7945: PPUSH
7946: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7950: LD_VAR 0 2
7954: PUSH
7955: LD_INT 2
7957: ARRAY
7958: PPUSH
7959: LD_INT 114
7961: PPUSH
7962: LD_INT 132
7964: PPUSH
7965: LD_INT 0
7967: PPUSH
7968: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7972: LD_VAR 0 2
7976: PUSH
7977: LD_INT 3
7979: ARRAY
7980: PPUSH
7981: LD_INT 115
7983: PPUSH
7984: LD_INT 132
7986: PPUSH
7987: LD_INT 0
7989: PPUSH
7990: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7994: LD_VAR 0 2
7998: PUSH
7999: LD_INT 2
8001: ARRAY
8002: PUSH
8003: LD_VAR 0 2
8007: PUSH
8008: LD_INT 3
8010: ARRAY
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PPUSH
8016: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
8020: LD_VAR 0 4
8024: PPUSH
8025: LD_INT 83
8027: PPUSH
8028: LD_INT 123
8030: PPUSH
8031: CALL_OW 111
// Wait ( 0 0$01 ) ;
8035: LD_INT 35
8037: PPUSH
8038: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
8042: LD_INT 90
8044: PPUSH
8045: LD_INT 144
8047: PPUSH
8048: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
8052: LD_VAR 0 5
8056: PPUSH
8057: LD_INT 88
8059: PPUSH
8060: LD_INT 129
8062: PPUSH
8063: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8067: LD_ADDR_VAR 0 3
8071: PUSH
8072: LD_INT 92
8074: PUSH
8075: LD_INT 131
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 88
8084: PUSH
8085: LD_INT 127
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 91
8094: PUSH
8095: LD_INT 132
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 92
8104: PUSH
8105: LD_INT 134
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: ST_TO_ADDR
// for i = 1 to sols do
8118: LD_ADDR_VAR 0 6
8122: PUSH
8123: DOUBLE
8124: LD_INT 1
8126: DEC
8127: ST_TO_ADDR
8128: LD_VAR 0 5
8132: PUSH
8133: FOR_TO
8134: IFFALSE 8207
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8136: LD_VAR 0 5
8140: PUSH
8141: LD_VAR 0 6
8145: ARRAY
8146: PPUSH
8147: LD_VAR 0 3
8151: PUSH
8152: LD_VAR 0 6
8156: ARRAY
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: PPUSH
8162: LD_VAR 0 3
8166: PUSH
8167: LD_VAR 0 6
8171: ARRAY
8172: PUSH
8173: LD_INT 2
8175: ARRAY
8176: PPUSH
8177: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8181: LD_VAR 0 5
8185: PUSH
8186: LD_VAR 0 6
8190: ARRAY
8191: PPUSH
8192: CALL_OW 197
// AddComHold ( sols ) ;
8196: LD_VAR 0 5
8200: PPUSH
8201: CALL_OW 200
// end ;
8205: GO 8133
8207: POP
8208: POP
// repeat wait ( 0 0$1 ) ;
8209: LD_INT 35
8211: PPUSH
8212: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8216: LD_VAR 0 5
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: LD_INT 92
8227: PPUSH
8228: LD_INT 131
8230: PPUSH
8231: CALL_OW 297
8235: PUSH
8236: LD_INT 4
8238: LESS
8239: IFFALSE 8209
// CenterOnXY ( 96 , 139 ) ;
8241: LD_INT 96
8243: PPUSH
8244: LD_INT 139
8246: PPUSH
8247: CALL_OW 84
// wait ( 0 0$3 ) ;
8251: LD_INT 105
8253: PPUSH
8254: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8258: LD_INT 111
8260: PPUSH
8261: LD_INT 135
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 25
8269: NEG
8270: PPUSH
8271: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8275: LD_VAR 0 2
8279: PUSH
8280: LD_INT 2
8282: ARRAY
8283: PPUSH
8284: LD_VAR 0 2
8288: PUSH
8289: LD_INT 1
8291: ARRAY
8292: PPUSH
8293: CALL_OW 250
8297: PUSH
8298: LD_INT 3
8300: PLUS
8301: PPUSH
8302: LD_VAR 0 2
8306: PUSH
8307: LD_INT 1
8309: ARRAY
8310: PPUSH
8311: CALL_OW 251
8315: PPUSH
8316: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8320: LD_VAR 0 2
8324: PUSH
8325: LD_INT 3
8327: ARRAY
8328: PPUSH
8329: LD_INT 7
8331: PPUSH
8332: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8336: LD_VAR 0 2
8340: PUSH
8341: LD_INT 2
8343: ARRAY
8344: PPUSH
8345: LD_VAR 0 2
8349: PUSH
8350: LD_INT 1
8352: ARRAY
8353: PPUSH
8354: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8358: LD_INT 35
8360: PPUSH
8361: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8365: LD_VAR 0 2
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_VAR 0 2
8378: PUSH
8379: LD_INT 2
8381: ARRAY
8382: PPUSH
8383: CALL_OW 296
8387: PUSH
8388: LD_INT 5
8390: LESS
8391: IFFALSE 8358
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 1
8400: ARRAY
8401: PPUSH
8402: LD_VAR 0 2
8406: PUSH
8407: LD_INT 2
8409: ARRAY
8410: PPUSH
8411: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PPUSH
8424: LD_STRING D1a-Merc1-1
8426: PPUSH
8427: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8431: LD_VAR 0 2
8435: PUSH
8436: LD_INT 2
8438: ARRAY
8439: PPUSH
8440: LD_STRING D1a-FMerc2-1
8442: PPUSH
8443: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8447: LD_VAR 0 2
8451: PUSH
8452: LD_INT 2
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 2
8460: PUSH
8461: LD_INT 1
8463: ARRAY
8464: PPUSH
8465: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8469: LD_VAR 0 2
8473: PUSH
8474: LD_INT 1
8476: ARRAY
8477: PPUSH
8478: LD_INT 500
8480: PPUSH
8481: CALL_OW 234
// wait ( 0 0$2 ) ;
8485: LD_INT 70
8487: PPUSH
8488: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8492: LD_VAR 0 2
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PPUSH
8501: LD_INT 2
8503: PPUSH
8504: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8508: LD_INT 10
8510: PPUSH
8511: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8515: LD_VAR 0 2
8519: PUSH
8520: LD_INT 1
8522: ARRAY
8523: PPUSH
8524: LD_STRING D1a-Merc1-2
8526: PPUSH
8527: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8531: LD_INT 7
8533: PPUSH
8534: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8538: LD_VAR 0 2
8542: PUSH
8543: LD_INT 1
8545: ARRAY
8546: PPUSH
8547: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8551: LD_VAR 0 2
8555: PUSH
8556: LD_INT 2
8558: ARRAY
8559: PPUSH
8560: LD_INT 10
8562: PPUSH
8563: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8567: LD_VAR 0 2
8571: PUSH
8572: LD_INT 2
8574: ARRAY
8575: PPUSH
8576: LD_STRING D1a-FMerc2-2
8578: PPUSH
8579: CALL_OW 88
// wait ( 0 0$1 ) ;
8583: LD_INT 35
8585: PPUSH
8586: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8590: LD_INT 7
8592: PPUSH
8593: CALL_OW 85
// wait ( 0 0$2 ) ;
8597: LD_INT 70
8599: PPUSH
8600: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8604: LD_EXP 44
8608: PPUSH
8609: LD_STRING D1a-Saliba-1
8611: PPUSH
8612: CALL_OW 91
// KillUnit ( Saliba ) ;
8616: LD_EXP 44
8620: PPUSH
8621: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8625: LD_VAR 0 2
8629: PUSH
8630: LD_INT 3
8632: ARRAY
8633: PPUSH
8634: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8638: LD_EXP 21
8642: PPUSH
8643: CALL_OW 85
// wait ( 0 0$1 ) ;
8647: LD_INT 35
8649: PPUSH
8650: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8654: LD_VAR 0 5
8658: PPUSH
8659: LD_INT 88
8661: PPUSH
8662: LD_INT 141
8664: PPUSH
8665: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8669: LD_VAR 0 5
8673: PPUSH
8674: LD_INT 70
8676: PPUSH
8677: CALL_OW 202
// wait ( 0 0$2 ) ;
8681: LD_INT 70
8683: PPUSH
8684: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8688: LD_INT 2
8690: PPUSH
8691: LD_INT 1
8693: PPUSH
8694: LD_INT 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 80
// InGameOff ;
8704: CALL_OW 9
// ComWalk ( sols ) ;
8708: LD_VAR 0 5
8712: PPUSH
8713: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8717: LD_STRING M1
8719: PPUSH
8720: CALL_OW 337
// game_speed := 4 ;
8724: LD_ADDR_OWVAR 65
8728: PUSH
8729: LD_INT 4
8731: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8732: LD_INT 111
8734: PPUSH
8735: LD_INT 135
8737: PPUSH
8738: LD_INT 1
8740: PPUSH
8741: CALL_OW 331
// SaveForQuickRestart ;
8745: CALL_OW 22
// ar_run := true ;
8749: LD_ADDR_EXP 5
8753: PUSH
8754: LD_INT 1
8756: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8757: LD_INT 35
8759: PPUSH
8760: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8764: LD_INT 22
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 91
8776: PUSH
8777: LD_INT 7
8779: PUSH
8780: LD_INT 10
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PPUSH
8792: CALL_OW 69
8796: PUSH
8797: LD_INT 7
8799: PPUSH
8800: CALL_OW 256
8804: PUSH
8805: LD_INT 999
8807: LESS
8808: OR
8809: IFFALSE 8757
// if GetSide ( ar_dep_s ) = 2 then
8811: LD_INT 7
8813: PPUSH
8814: CALL_OW 255
8818: PUSH
8819: LD_INT 2
8821: EQUAL
8822: IFFALSE 8834
// SetSide ( ar_dep_s , 1 ) ;
8824: LD_INT 7
8826: PPUSH
8827: LD_INT 1
8829: PPUSH
8830: CALL_OW 235
// end ;
8834: LD_VAR 0 1
8838: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8839: LD_EXP 5
8843: IFFALSE 9203
8845: GO 8847
8847: DISABLE
8848: LD_INT 0
8850: PPUSH
8851: PPUSH
8852: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: LD_EXP 40
8862: PUSH
8863: LD_EXP 36
8867: PPUSH
8868: LD_INT 2
8870: PUSH
8871: LD_INT 21
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PPUSH
8896: CALL_OW 72
8900: ADD
8901: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8902: LD_VAR 0 2
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8914: LD_INT 5
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: CALL_OW 343
// k := 1 ;
8924: LD_ADDR_VAR 0 3
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// for i in tmp do
8932: LD_ADDR_VAR 0 1
8936: PUSH
8937: LD_VAR 0 2
8941: PUSH
8942: FOR_IN
8943: IFFALSE 9028
// begin if IsInUnit ( i ) then
8945: LD_VAR 0 1
8949: PPUSH
8950: CALL_OW 310
8954: IFFALSE 8965
// ComExitBuilding ( i ) ;
8956: LD_VAR 0 1
8960: PPUSH
8961: CALL_OW 122
// if GetClass ( i ) = 3 then
8965: LD_VAR 0 1
8969: PPUSH
8970: CALL_OW 257
8974: PUSH
8975: LD_INT 3
8977: EQUAL
8978: IFFALSE 9014
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8980: LD_VAR 0 1
8984: PPUSH
8985: LD_EXP 41
8989: PUSH
8990: LD_VAR 0 3
8994: ARRAY
8995: PPUSH
8996: CALL_OW 180
// k := k + 1 ;
9000: LD_ADDR_VAR 0 3
9004: PUSH
9005: LD_VAR 0 3
9009: PUSH
9010: LD_INT 1
9012: PLUS
9013: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
9014: LD_VAR 0 1
9018: PPUSH
9019: LD_INT 10
9021: PPUSH
9022: CALL_OW 173
// end ;
9026: GO 8942
9028: POP
9029: POP
// ar_patrol := true ;
9030: LD_ADDR_EXP 7
9034: PUSH
9035: LD_INT 1
9037: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
9038: LD_INT 10
9040: PPUSH
9041: CALL_OW 67
// for i in tmp do
9045: LD_ADDR_VAR 0 1
9049: PUSH
9050: LD_VAR 0 2
9054: PUSH
9055: FOR_IN
9056: IFFALSE 9084
// if not HasTask ( i ) then
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 314
9067: NOT
9068: IFFALSE 9082
// ComMoveToArea ( i , escape_area ) ;
9070: LD_VAR 0 1
9074: PPUSH
9075: LD_INT 10
9077: PPUSH
9078: CALL_OW 113
9082: GO 9055
9084: POP
9085: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9086: LD_ADDR_VAR 0 3
9090: PUSH
9091: LD_VAR 0 2
9095: PPUSH
9096: LD_INT 95
9098: PUSH
9099: LD_INT 10
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PPUSH
9106: CALL_OW 72
9110: ST_TO_ADDR
// if k then
9111: LD_VAR 0 3
9115: IFFALSE 9184
// for i in k do
9117: LD_ADDR_VAR 0 1
9121: PUSH
9122: LD_VAR 0 3
9126: PUSH
9127: FOR_IN
9128: IFFALSE 9182
// begin if IsInUnit ( i ) then
9130: LD_VAR 0 1
9134: PPUSH
9135: CALL_OW 310
9139: IFFALSE 9155
// RemoveUnit ( IsInUnit ( i ) ) ;
9141: LD_VAR 0 1
9145: PPUSH
9146: CALL_OW 310
9150: PPUSH
9151: CALL_OW 64
// RemoveUnit ( i ) ;
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 64
// tmp := tmp diff i ;
9164: LD_ADDR_VAR 0 2
9168: PUSH
9169: LD_VAR 0 2
9173: PUSH
9174: LD_VAR 0 1
9178: DIFF
9179: ST_TO_ADDR
// end ;
9180: GO 9127
9182: POP
9183: POP
// until tmp = [ ] ;
9184: LD_VAR 0 2
9188: PUSH
9189: EMPTY
9190: EQUAL
9191: IFFALSE 9038
// ChangeSideFog ( 5 , 5 ) ;
9193: LD_INT 5
9195: PPUSH
9196: LD_INT 5
9198: PPUSH
9199: CALL_OW 343
// end ;
9203: PPOPN 3
9205: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9206: LD_EXP 7
9210: IFFALSE 9500
9212: GO 9214
9214: DISABLE
9215: LD_INT 0
9217: PPUSH
9218: PPUSH
9219: PPUSH
// begin uc_side := 2 ;
9220: LD_ADDR_OWVAR 20
9224: PUSH
9225: LD_INT 2
9227: ST_TO_ADDR
// uc_nation := 2 ;
9228: LD_ADDR_OWVAR 21
9232: PUSH
9233: LD_INT 2
9235: ST_TO_ADDR
// InitHc ;
9236: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9240: LD_INT 1
9242: PPUSH
9243: LD_INT 1
9245: PPUSH
9246: LD_INT 6
9248: PPUSH
9249: CALL_OW 380
// un := CreateHuman ;
9253: LD_ADDR_VAR 0 2
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9263: LD_INT 14
9265: PPUSH
9266: LD_INT 1
9268: PPUSH
9269: LD_INT 1
9271: PPUSH
9272: LD_INT 27
9274: PPUSH
9275: LD_INT 98
9277: PPUSH
9278: CALL 54126 0 5
// veh := CreateVehicle ;
9282: LD_ADDR_VAR 0 3
9286: PUSH
9287: CALL_OW 45
9291: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 4
9299: PPUSH
9300: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9304: LD_VAR 0 3
9308: PPUSH
9309: LD_INT 179
9311: PPUSH
9312: LD_INT 135
9314: PPUSH
9315: LD_INT 0
9317: PPUSH
9318: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9322: LD_VAR 0 2
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9336: LD_VAR 0 2
9340: PPUSH
9341: LD_INT 126
9343: PPUSH
9344: LD_INT 133
9346: PPUSH
9347: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9351: LD_INT 10
9353: PPUSH
9354: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9358: LD_INT 1
9360: PPUSH
9361: LD_VAR 0 3
9365: PPUSH
9366: CALL_OW 292
9370: PUSH
9371: LD_VAR 0 3
9375: PPUSH
9376: LD_INT 7
9378: PPUSH
9379: CALL_OW 296
9383: PUSH
9384: LD_INT 9
9386: LESS
9387: OR
9388: IFFALSE 9351
// ComHold ( veh ) ;
9390: LD_VAR 0 3
9394: PPUSH
9395: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9399: LD_VAR 0 2
9403: PPUSH
9404: LD_STRING D2aa-Ar1-1
9406: PPUSH
9407: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9411: LD_VAR 0 2
9415: PPUSH
9416: LD_INT 177
9418: PPUSH
9419: LD_INT 96
9421: PPUSH
9422: CALL_OW 111
// AddComExitVehicle ( un ) ;
9426: LD_VAR 0 2
9430: PPUSH
9431: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9435: LD_INT 35
9437: PPUSH
9438: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9442: LD_VAR 0 2
9446: PPUSH
9447: LD_INT 204
9449: PPUSH
9450: CALL_OW 296
9454: PUSH
9455: LD_INT 15
9457: LESS
9458: IFFALSE 9435
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9460: LD_ADDR_EXP 50
9464: PUSH
9465: LD_EXP 50
9469: PPUSH
9470: LD_INT 3
9472: PUSH
9473: LD_EXP 50
9477: PUSH
9478: LD_INT 3
9480: ARRAY
9481: PUSH
9482: LD_INT 1
9484: PLUS
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: CALL 54248 0 3
9499: ST_TO_ADDR
// end ;
9500: PPOPN 3
9502: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9503: LD_INT 7
9505: PPUSH
9506: CALL_OW 255
9510: PUSH
9511: LD_INT 1
9513: EQUAL
9514: PUSH
9515: LD_INT 7
9517: PPUSH
9518: CALL_OW 301
9522: OR
9523: IFFALSE 11947
9525: GO 9527
9527: DISABLE
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9532: LD_ADDR_VAR 0 1
9536: PUSH
9537: LD_EXP 36
9541: PPUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 3
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PPUSH
9552: CALL_OW 72
9556: PUSH
9557: FOR_IN
9558: IFFALSE 9574
// SetSide ( i , 1 ) ;
9560: LD_VAR 0 1
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: CALL_OW 235
9572: GO 9557
9574: POP
9575: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9576: LD_ADDR_VAR 0 2
9580: PUSH
9581: LD_INT 46
9583: PUSH
9584: LD_INT 41
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 50
9593: PUSH
9594: LD_INT 25
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 57
9603: PUSH
9604: LD_INT 75
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 75
9613: PUSH
9614: LD_INT 89
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 51
9623: PUSH
9624: LD_INT 45
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 95
9633: PUSH
9634: LD_INT 95
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 84
9643: PUSH
9644: LD_INT 77
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 101
9653: PUSH
9654: LD_INT 76
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 118
9663: PUSH
9664: LD_INT 81
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 139
9673: PUSH
9674: LD_INT 97
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 129
9683: PUSH
9684: LD_INT 114
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 154
9693: PUSH
9694: LD_INT 111
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// base_captured := true ;
9715: LD_ADDR_EXP 6
9719: PUSH
9720: LD_INT 1
9722: ST_TO_ADDR
// DialogueOn ;
9723: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9727: LD_EXP 21
9731: PPUSH
9732: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9736: LD_EXP 21
9740: PPUSH
9741: LD_STRING D2-JMM-1
9743: PPUSH
9744: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9748: LD_EXP 30
9752: PPUSH
9753: LD_STRING D2-Pow-1
9755: PPUSH
9756: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9760: LD_EXP 21
9764: PPUSH
9765: LD_STRING D2-JMM-2
9767: PPUSH
9768: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9772: LD_EXP 30
9776: PPUSH
9777: LD_STRING D2-Pow-2
9779: PPUSH
9780: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9784: LD_EXP 21
9788: PPUSH
9789: LD_STRING D2-JMM-3
9791: PPUSH
9792: CALL_OW 88
// DialogueOff ;
9796: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9800: LD_STRING M2
9802: PPUSH
9803: CALL_OW 337
// Wait ( 0 0$2 ) ;
9807: LD_INT 70
9809: PPUSH
9810: CALL_OW 67
// if IsOk ( Gary ) then
9814: LD_EXP 32
9818: PPUSH
9819: CALL_OW 302
9823: IFFALSE 9837
// Say ( Gary , D2a-Gary-1 ) ;
9825: LD_EXP 32
9829: PPUSH
9830: LD_STRING D2a-Gary-1
9832: PPUSH
9833: CALL_OW 88
// if IsOk ( Bobby ) then
9837: LD_EXP 24
9841: PPUSH
9842: CALL_OW 302
9846: IFFALSE 9860
// Say ( Bobby , D2a-Bobby-1 ) ;
9848: LD_EXP 24
9852: PPUSH
9853: LD_STRING D2a-Bobby-1
9855: PPUSH
9856: CALL_OW 88
// if IsOk ( Cyrus ) then
9860: LD_EXP 25
9864: PPUSH
9865: CALL_OW 302
9869: IFFALSE 9883
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9871: LD_EXP 25
9875: PPUSH
9876: LD_STRING D2a-Cyrus-1
9878: PPUSH
9879: CALL_OW 88
// if IsOk ( Lisa ) then
9883: LD_EXP 22
9887: PPUSH
9888: CALL_OW 302
9892: IFFALSE 9906
// Say ( Lisa , D2a-Lisa-1 ) ;
9894: LD_EXP 22
9898: PPUSH
9899: LD_STRING D2a-Lisa-1
9901: PPUSH
9902: CALL_OW 88
// if IsOk ( Frank ) then
9906: LD_EXP 33
9910: PPUSH
9911: CALL_OW 302
9915: IFFALSE 9929
// Say ( Frank , D2a-Frank-1 ) ;
9917: LD_EXP 33
9921: PPUSH
9922: LD_STRING D2a-Frank-1
9924: PPUSH
9925: CALL_OW 88
// if IsOk ( Cornel ) then
9929: LD_EXP 31
9933: PPUSH
9934: CALL_OW 302
9938: IFFALSE 9952
// Say ( Cornel , D2a-Corn-1 ) ;
9940: LD_EXP 31
9944: PPUSH
9945: LD_STRING D2a-Corn-1
9947: PPUSH
9948: CALL_OW 88
// if IsOk ( Donaldson ) then
9952: LD_EXP 23
9956: PPUSH
9957: CALL_OW 302
9961: IFFALSE 9975
// Say ( Donaldson , D2a-Don-1 ) ;
9963: LD_EXP 23
9967: PPUSH
9968: LD_STRING D2a-Don-1
9970: PPUSH
9971: CALL_OW 88
// if IsOk ( Brown ) then
9975: LD_EXP 27
9979: PPUSH
9980: CALL_OW 302
9984: IFFALSE 9998
// Say ( Brown , D2a-Brown-1 ) ;
9986: LD_EXP 27
9990: PPUSH
9991: LD_STRING D2a-Brown-1
9993: PPUSH
9994: CALL_OW 88
// Wait ( 0 0$30 ) ;
9998: LD_INT 1050
10000: PPUSH
10001: CALL_OW 67
// if IsOk ( Frank ) then
10005: LD_EXP 33
10009: PPUSH
10010: CALL_OW 302
10014: IFFALSE 10280
// begin DialogueOn ;
10016: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
10020: LD_EXP 21
10024: PUSH
10025: LD_EXP 33
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
10038: LD_EXP 33
10042: PPUSH
10043: LD_STRING D3F-Frank-1
10045: PPUSH
10046: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
10050: LD_EXP 21
10054: PPUSH
10055: LD_STRING D3F-JMM-1
10057: PPUSH
10058: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10062: LD_EXP 33
10066: PPUSH
10067: LD_STRING D3F-Frank-2
10069: PPUSH
10070: CALL_OW 88
// case Query ( QFrank ) of 1 :
10074: LD_STRING QFrank
10076: PPUSH
10077: CALL_OW 97
10081: PUSH
10082: LD_INT 1
10084: DOUBLE
10085: EQUAL
10086: IFTRUE 10090
10088: GO 10113
10090: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10091: LD_EXP 21
10095: PPUSH
10096: LD_STRING D3Fa-JMM-1
10098: PPUSH
10099: CALL_OW 88
// us_scout := 1 ;
10103: LD_ADDR_EXP 8
10107: PUSH
10108: LD_INT 1
10110: ST_TO_ADDR
// end ; 2 :
10111: GO 10276
10113: LD_INT 2
10115: DOUBLE
10116: EQUAL
10117: IFTRUE 10121
10119: GO 10243
10121: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10122: LD_EXP 21
10126: PPUSH
10127: LD_STRING D3Fb-JMM-1
10129: PPUSH
10130: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10134: LD_EXP 33
10138: PPUSH
10139: LD_STRING D3Fb-Frank-1
10141: PPUSH
10142: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10146: LD_STRING QFrank2
10148: PPUSH
10149: CALL_OW 97
10153: PUSH
10154: LD_INT 1
10156: DOUBLE
10157: EQUAL
10158: IFTRUE 10162
10160: GO 10209
10162: POP
// begin us_scout := 2 ;
10163: LD_ADDR_EXP 8
10167: PUSH
10168: LD_INT 2
10170: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10171: LD_EXP 21
10175: PPUSH
10176: LD_STRING D3Fba-JMM-1
10178: PPUSH
10179: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10183: LD_EXP 33
10187: PPUSH
10188: LD_STRING D3Fba-Frank-1
10190: PPUSH
10191: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10195: LD_EXP 21
10199: PPUSH
10200: LD_STRING D3Fba-JMM-2
10202: PPUSH
10203: CALL_OW 88
// end ; 2 :
10207: GO 10241
10209: LD_INT 2
10211: DOUBLE
10212: EQUAL
10213: IFTRUE 10217
10215: GO 10240
10217: POP
// begin us_scout := 0 ;
10218: LD_ADDR_EXP 8
10222: PUSH
10223: LD_INT 0
10225: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10226: LD_EXP 21
10230: PPUSH
10231: LD_STRING D3Fbb-JMM-1
10233: PPUSH
10234: CALL_OW 88
// end ; end ;
10238: GO 10241
10240: POP
// end ; 3 :
10241: GO 10276
10243: LD_INT 3
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10275
10251: POP
// begin us_scout := - 1 ;
10252: LD_ADDR_EXP 8
10256: PUSH
10257: LD_INT 1
10259: NEG
10260: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10261: LD_EXP 21
10265: PPUSH
10266: LD_STRING D3Fc-JMM-1
10268: PPUSH
10269: CALL_OW 88
// end ; end ;
10273: GO 10276
10275: POP
// DialogueOff ;
10276: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10280: LD_EXP 8
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: PUSH
10289: LD_INT 0
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: IFFALSE 10300
// exit ;
10298: GO 11947
// if us_scout in [ 1 , 2 ] then
10300: LD_EXP 8
10304: PUSH
10305: LD_INT 1
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: IN
10315: IFFALSE 11014
// begin if IsInUnit ( Frank ) then
10317: LD_EXP 33
10321: PPUSH
10322: CALL_OW 310
10326: IFFALSE 10337
// ComExitBuilding ( Frank ) ;
10328: LD_EXP 33
10332: PPUSH
10333: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10337: LD_EXP 33
10341: PPUSH
10342: CALL_OW 311
10346: IFFALSE 10357
// ComExitVehicle ( Frank ) ;
10348: LD_EXP 33
10352: PPUSH
10353: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10357: LD_EXP 33
10361: PPUSH
10362: LD_INT 4
10364: PPUSH
10365: CALL_OW 235
// wait ( 0 0$1 ) ;
10369: LD_INT 35
10371: PPUSH
10372: CALL_OW 67
// if us_scout = 2 then
10376: LD_EXP 8
10380: PUSH
10381: LD_INT 2
10383: EQUAL
10384: IFFALSE 10752
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10386: LD_EXP 33
10390: PPUSH
10391: LD_INT 75
10393: PPUSH
10394: LD_INT 63
10396: PPUSH
10397: CALL_OW 111
// AddComHold ( Frank ) ;
10401: LD_EXP 33
10405: PPUSH
10406: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10410: LD_EXP 33
10414: PPUSH
10415: LD_INT 770
10417: PPUSH
10418: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10422: LD_EXP 33
10426: PPUSH
10427: LD_INT 100
10429: PPUSH
10430: LD_INT 75
10432: PPUSH
10433: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10437: LD_EXP 33
10441: PPUSH
10442: LD_INT 123
10444: PPUSH
10445: LD_INT 103
10447: PPUSH
10448: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10452: LD_EXP 33
10456: PPUSH
10457: LD_INT 138
10459: PPUSH
10460: LD_INT 108
10462: PPUSH
10463: CALL_OW 171
// AddComHold ( Frank ) ;
10467: LD_EXP 33
10471: PPUSH
10472: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10476: LD_INT 35
10478: PPUSH
10479: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10483: LD_EXP 33
10487: PPUSH
10488: LD_INT 138
10490: PPUSH
10491: LD_INT 108
10493: PPUSH
10494: CALL_OW 307
10498: IFFALSE 10476
// AddComMoveXY ( Frank , 125 , 132 ) ;
10500: LD_EXP 33
10504: PPUSH
10505: LD_INT 125
10507: PPUSH
10508: LD_INT 132
10510: PPUSH
10511: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10515: LD_INT 35
10517: PPUSH
10518: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10522: LD_INT 1
10524: PPUSH
10525: LD_EXP 33
10529: PPUSH
10530: CALL_OW 292
10534: PUSH
10535: LD_EXP 33
10539: PPUSH
10540: LD_INT 7
10542: PPUSH
10543: CALL_OW 296
10547: PUSH
10548: LD_INT 7
10550: LESS
10551: OR
10552: IFFALSE 10515
// DialogueOn ;
10554: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10558: LD_EXP 33
10562: PPUSH
10563: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10567: LD_INT 10
10569: PPUSH
10570: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10574: LD_EXP 21
10578: PPUSH
10579: LD_STRING D4Fa-JMM-1
10581: PPUSH
10582: CALL_OW 88
// for i in points do
10586: LD_ADDR_VAR 0 1
10590: PUSH
10591: LD_VAR 0 2
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10655
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10599: LD_VAR 0 1
10603: PUSH
10604: LD_INT 1
10606: ARRAY
10607: PPUSH
10608: LD_VAR 0 1
10612: PUSH
10613: LD_INT 2
10615: ARRAY
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: LD_INT 20
10622: NEG
10623: PPUSH
10624: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10628: LD_VAR 0 1
10632: PUSH
10633: LD_INT 1
10635: ARRAY
10636: PPUSH
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 2
10644: ARRAY
10645: PPUSH
10646: LD_INT 1
10648: PPUSH
10649: CALL_OW 331
// end ;
10653: GO 10596
10655: POP
10656: POP
// dwait ( 0 0$0.5 ) ;
10657: LD_INT 18
10659: PPUSH
10660: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10664: LD_INT 42
10666: PPUSH
10667: LD_INT 27
10669: PPUSH
10670: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10674: LD_EXP 33
10678: PPUSH
10679: LD_STRING D4Fa-Frank-1
10681: PPUSH
10682: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10686: LD_INT 18
10688: PPUSH
10689: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10693: LD_EXP 21
10697: PPUSH
10698: LD_STRING D4Fa-JMM-2
10700: PPUSH
10701: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10705: LD_INT 118
10707: PPUSH
10708: LD_INT 80
10710: PPUSH
10711: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10715: LD_EXP 33
10719: PPUSH
10720: LD_STRING D4Fa-Frank-2
10722: PPUSH
10723: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10727: LD_INT 10
10729: PPUSH
10730: CALL_OW 68
// DialogueOff ;
10734: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10738: LD_EXP 33
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: CALL_OW 235
// end else
10750: GO 11014
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10752: LD_INT 2
10754: PPUSH
10755: LD_INT 4
10757: PPUSH
10758: LD_INT 2
10760: PPUSH
10761: LD_INT 1
10763: PPUSH
10764: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10768: LD_EXP 33
10772: PPUSH
10773: LD_INT 75
10775: PPUSH
10776: LD_INT 63
10778: PPUSH
10779: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10783: LD_EXP 33
10787: PPUSH
10788: LD_INT 175
10790: PPUSH
10791: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10795: LD_EXP 33
10799: PPUSH
10800: LD_INT 102
10802: PPUSH
10803: LD_INT 76
10805: PPUSH
10806: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10810: LD_EXP 33
10814: PPUSH
10815: LD_INT 108
10817: PPUSH
10818: LD_INT 70
10820: PPUSH
10821: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10825: LD_INT 35
10827: PPUSH
10828: CALL_OW 67
// until See ( 2 , Frank ) ;
10832: LD_INT 2
10834: PPUSH
10835: LD_EXP 33
10839: PPUSH
10840: CALL_OW 292
10844: IFFALSE 10825
// ComMoveXY ( Frank , 112 , 118 ) ;
10846: LD_EXP 33
10850: PPUSH
10851: LD_INT 112
10853: PPUSH
10854: LD_INT 118
10856: PPUSH
10857: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10861: LD_EXP 33
10865: PPUSH
10866: CALL_OW 256
10870: PUSH
10871: LD_INT 750
10873: GREATEREQUAL
10874: IFFALSE 10888
// SetLives ( Frank , 700 ) ;
10876: LD_EXP 33
10880: PPUSH
10881: LD_INT 700
10883: PPUSH
10884: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10888: LD_INT 35
10890: PPUSH
10891: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10895: LD_INT 1
10897: PPUSH
10898: LD_EXP 33
10902: PPUSH
10903: CALL_OW 292
10907: PUSH
10908: LD_EXP 33
10912: PPUSH
10913: LD_INT 7
10915: PPUSH
10916: CALL_OW 296
10920: PUSH
10921: LD_INT 17
10923: LESS
10924: OR
10925: IFFALSE 10888
// DialogueOn ;
10927: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10931: LD_EXP 33
10935: PPUSH
10936: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10940: LD_EXP 33
10944: PPUSH
10945: LD_STRING D4Fb-Frank-1
10947: PPUSH
10948: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10952: LD_EXP 21
10956: PPUSH
10957: LD_STRING D4Fb-JMM-1
10959: PPUSH
10960: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10964: LD_INT 2
10966: PPUSH
10967: LD_STRING D4Fb-FSci1-1
10969: PPUSH
10970: CALL 15772 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10974: LD_EXP 33
10978: PPUSH
10979: LD_STRING D4Fb-Frank-2
10981: PPUSH
10982: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10986: LD_EXP 21
10990: PPUSH
10991: LD_STRING D4Fb-JMM-2
10993: PPUSH
10994: CALL_OW 88
// DialogueOff ;
10998: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11002: LD_EXP 33
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
11014: LD_EXP 34
11018: PPUSH
11019: CALL_OW 302
11023: PUSH
11024: LD_EXP 33
11028: NOT
11029: AND
11030: IFFALSE 11178
// begin DialogueOn ;
11032: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
11036: LD_EXP 21
11040: PUSH
11041: LD_EXP 34
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11054: LD_EXP 34
11058: PPUSH
11059: LD_STRING D3Y-Yam-1
11061: PPUSH
11062: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11066: LD_EXP 21
11070: PPUSH
11071: LD_STRING D3Y-JMM-1
11073: PPUSH
11074: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11078: LD_EXP 34
11082: PPUSH
11083: LD_STRING D3Y-Yam-2
11085: PPUSH
11086: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11090: LD_STRING QYamoko
11092: PPUSH
11093: CALL_OW 97
11097: PUSH
11098: LD_INT 1
11100: DOUBLE
11101: EQUAL
11102: IFTRUE 11106
11104: GO 11141
11106: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11107: LD_EXP 21
11111: PPUSH
11112: LD_STRING D3Ya-JMM-1
11114: PPUSH
11115: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11119: LD_EXP 34
11123: PPUSH
11124: LD_STRING D3Ya-Yam-1
11126: PPUSH
11127: CALL_OW 88
// us_scout := 1 ;
11131: LD_ADDR_EXP 8
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// end ; 2 :
11139: GO 11174
11141: LD_INT 2
11143: DOUBLE
11144: EQUAL
11145: IFTRUE 11149
11147: GO 11173
11149: POP
// begin us_scout := - 1 ;
11150: LD_ADDR_EXP 8
11154: PUSH
11155: LD_INT 1
11157: NEG
11158: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11159: LD_EXP 21
11163: PPUSH
11164: LD_STRING D3Yb-JMM-1
11166: PPUSH
11167: CALL_OW 88
// end ; end ;
11171: GO 11174
11173: POP
// DialogueOff ;
11174: CALL_OW 7
// end ; if Frank then
11178: LD_EXP 33
11182: IFFALSE 11186
// exit ;
11184: GO 11947
// if us_scout in [ - 1 , 0 ] then
11186: LD_EXP 8
11190: PUSH
11191: LD_INT 1
11193: NEG
11194: PUSH
11195: LD_INT 0
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: IN
11202: IFFALSE 11206
// exit ;
11204: GO 11947
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11206: LD_ADDR_EXP 8
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: LD_INT 2
11216: PUSH
11217: LD_INT 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: PUSH
11225: LD_OWVAR 67
11229: ARRAY
11230: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11231: LD_EXP 8
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: IN
11246: IFFALSE 11947
// begin if IsInUnit ( Kikuchi ) then
11248: LD_EXP 34
11252: PPUSH
11253: CALL_OW 310
11257: IFFALSE 11268
// ComExitBuilding ( Kikuchi ) ;
11259: LD_EXP 34
11263: PPUSH
11264: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11268: LD_EXP 34
11272: PPUSH
11273: CALL_OW 311
11277: IFFALSE 11288
// ComExitVehicle ( Kikuchi ) ;
11279: LD_EXP 34
11283: PPUSH
11284: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11288: LD_EXP 34
11292: PPUSH
11293: LD_INT 4
11295: PPUSH
11296: CALL_OW 235
// wait ( 0 0$1 ) ;
11300: LD_INT 35
11302: PPUSH
11303: CALL_OW 67
// if us_scout = 2 then
11307: LD_EXP 8
11311: PUSH
11312: LD_INT 2
11314: EQUAL
11315: IFFALSE 11695
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11317: LD_EXP 34
11321: PPUSH
11322: LD_INT 75
11324: PPUSH
11325: LD_INT 63
11327: PPUSH
11328: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11332: LD_EXP 34
11336: PPUSH
11337: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11341: LD_EXP 34
11345: PPUSH
11346: LD_INT 770
11348: PPUSH
11349: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11353: LD_EXP 34
11357: PPUSH
11358: LD_INT 100
11360: PPUSH
11361: LD_INT 75
11363: PPUSH
11364: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11368: LD_EXP 34
11372: PPUSH
11373: LD_INT 123
11375: PPUSH
11376: LD_INT 103
11378: PPUSH
11379: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11383: LD_EXP 34
11387: PPUSH
11388: LD_INT 138
11390: PPUSH
11391: LD_INT 108
11393: PPUSH
11394: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11398: LD_EXP 34
11402: PPUSH
11403: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11407: LD_INT 35
11409: PPUSH
11410: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11414: LD_EXP 34
11418: PPUSH
11419: LD_INT 138
11421: PPUSH
11422: LD_INT 108
11424: PPUSH
11425: CALL_OW 307
11429: IFFALSE 11407
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11431: LD_EXP 34
11435: PPUSH
11436: LD_INT 125
11438: PPUSH
11439: LD_INT 132
11441: PPUSH
11442: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11446: LD_INT 35
11448: PPUSH
11449: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11453: LD_INT 1
11455: PPUSH
11456: LD_EXP 34
11460: PPUSH
11461: CALL_OW 292
11465: PUSH
11466: LD_EXP 34
11470: PPUSH
11471: LD_INT 7
11473: PPUSH
11474: CALL_OW 296
11478: PUSH
11479: LD_INT 7
11481: LESS
11482: OR
11483: IFFALSE 11446
// DialogueOn ;
11485: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11489: LD_EXP 34
11493: PPUSH
11494: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11498: LD_INT 10
11500: PPUSH
11501: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11505: LD_EXP 34
11509: PPUSH
11510: LD_STRING D4Ya-Yam-1
11512: PPUSH
11513: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11517: LD_EXP 21
11521: PPUSH
11522: LD_STRING D4Ya-JMM-1
11524: PPUSH
11525: CALL_OW 88
// for i in points do
11529: LD_ADDR_VAR 0 1
11533: PUSH
11534: LD_VAR 0 2
11538: PUSH
11539: FOR_IN
11540: IFFALSE 11598
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11542: LD_VAR 0 1
11546: PUSH
11547: LD_INT 1
11549: ARRAY
11550: PPUSH
11551: LD_VAR 0 1
11555: PUSH
11556: LD_INT 2
11558: ARRAY
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: LD_INT 20
11565: NEG
11566: PPUSH
11567: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11571: LD_VAR 0 1
11575: PUSH
11576: LD_INT 1
11578: ARRAY
11579: PPUSH
11580: LD_VAR 0 1
11584: PUSH
11585: LD_INT 2
11587: ARRAY
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 331
// end ;
11596: GO 11539
11598: POP
11599: POP
// dwait ( 0 0$0.5 ) ;
11600: LD_INT 18
11602: PPUSH
11603: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11607: LD_INT 42
11609: PPUSH
11610: LD_INT 27
11612: PPUSH
11613: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11617: LD_EXP 34
11621: PPUSH
11622: LD_STRING D4Ya-Yam-2
11624: PPUSH
11625: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11629: LD_INT 18
11631: PPUSH
11632: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11636: LD_INT 118
11638: PPUSH
11639: LD_INT 80
11641: PPUSH
11642: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11646: LD_EXP 21
11650: PPUSH
11651: LD_STRING D4Ya-JMM-2
11653: PPUSH
11654: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11658: LD_EXP 34
11662: PPUSH
11663: LD_STRING D4Ya-Yam-3
11665: PPUSH
11666: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11670: LD_INT 10
11672: PPUSH
11673: CALL_OW 68
// DialogueOff ;
11677: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11681: LD_EXP 34
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 235
// end else
11693: GO 11947
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11695: LD_INT 2
11697: PPUSH
11698: LD_INT 4
11700: PPUSH
11701: LD_INT 2
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11711: LD_EXP 34
11715: PPUSH
11716: LD_INT 75
11718: PPUSH
11719: LD_INT 63
11721: PPUSH
11722: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11726: LD_EXP 34
11730: PPUSH
11731: LD_INT 175
11733: PPUSH
11734: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11738: LD_EXP 34
11742: PPUSH
11743: LD_INT 102
11745: PPUSH
11746: LD_INT 76
11748: PPUSH
11749: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11753: LD_EXP 34
11757: PPUSH
11758: LD_INT 108
11760: PPUSH
11761: LD_INT 70
11763: PPUSH
11764: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11768: LD_INT 35
11770: PPUSH
11771: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11775: LD_INT 2
11777: PPUSH
11778: LD_EXP 34
11782: PPUSH
11783: CALL_OW 292
11787: IFFALSE 11768
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11789: LD_EXP 34
11793: PPUSH
11794: LD_INT 112
11796: PPUSH
11797: LD_INT 118
11799: PPUSH
11800: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11804: LD_EXP 34
11808: PPUSH
11809: CALL_OW 256
11813: PUSH
11814: LD_INT 750
11816: GREATEREQUAL
11817: IFFALSE 11831
// SetLives ( Kikuchi , 700 ) ;
11819: LD_EXP 34
11823: PPUSH
11824: LD_INT 700
11826: PPUSH
11827: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11831: LD_INT 35
11833: PPUSH
11834: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11838: LD_INT 1
11840: PPUSH
11841: LD_EXP 34
11845: PPUSH
11846: CALL_OW 292
11850: PUSH
11851: LD_EXP 34
11855: PPUSH
11856: LD_INT 7
11858: PPUSH
11859: CALL_OW 296
11863: PUSH
11864: LD_INT 17
11866: LESS
11867: OR
11868: IFFALSE 11831
// DialogueOn ;
11870: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11874: LD_EXP 34
11878: PPUSH
11879: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11883: LD_EXP 34
11887: PPUSH
11888: LD_STRING D4Yb-Yam-1
11890: PPUSH
11891: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11895: LD_EXP 21
11899: PPUSH
11900: LD_STRING D4Yb-JMM-1
11902: PPUSH
11903: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11907: LD_EXP 34
11911: PPUSH
11912: LD_STRING D4Yb-Yam-2
11914: PPUSH
11915: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11919: LD_EXP 21
11923: PPUSH
11924: LD_STRING D4Yb-JMM-2
11926: PPUSH
11927: CALL_OW 88
// DialogueOff ;
11931: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11935: LD_EXP 34
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: CALL_OW 235
// end ; end ; end ;
11947: PPOPN 2
11949: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11950: LD_EXP 6
11954: IFFALSE 12987
11956: GO 11958
11958: DISABLE
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
11964: PPUSH
// begin enable ;
11965: ENABLE
// if not seen [ 1 ] then
11966: LD_EXP 9
11970: PUSH
11971: LD_INT 1
11973: ARRAY
11974: NOT
11975: IFFALSE 12155
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11977: LD_ADDR_VAR 0 2
11981: PUSH
11982: LD_INT 22
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: LD_INT 25
11997: PUSH
11998: LD_INT 11
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 33
12007: PUSH
12008: LD_INT 4
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: ST_TO_ADDR
// if tmp then
12029: LD_VAR 0 2
12033: IFFALSE 12155
// for i in tmp do
12035: LD_ADDR_VAR 0 1
12039: PUSH
12040: LD_VAR 0 2
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12153
// if See ( 1 , i ) then
12048: LD_INT 1
12050: PPUSH
12051: LD_VAR 0 1
12055: PPUSH
12056: CALL_OW 292
12060: IFFALSE 12151
// begin seen := Replace ( seen , 1 , true ) ;
12062: LD_ADDR_EXP 9
12066: PUSH
12067: LD_EXP 9
12071: PPUSH
12072: LD_INT 1
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 1
12082: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12083: LD_INT 1
12085: PPUSH
12086: CALL 15594 0 1
12090: IFFALSE 12151
// begin DialogueOn ;
12092: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12096: LD_VAR 0 1
12100: PPUSH
12101: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12105: LD_INT 10
12107: PPUSH
12108: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12112: LD_ADDR_VAR 0 3
12116: PUSH
12117: LD_INT 1
12119: PPUSH
12120: LD_STRING D5a-Sol2-1
12122: PPUSH
12123: CALL 15772 0 2
12127: ST_TO_ADDR
// if not un then
12128: LD_VAR 0 3
12132: NOT
12133: IFFALSE 12145
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12135: LD_INT 2
12137: PPUSH
12138: LD_STRING D5a-FSol2-1
12140: PPUSH
12141: CALL 15772 0 2
// DialogueOff ;
12145: CALL_OW 7
// break ;
12149: GO 12153
// end ; end ;
12151: GO 12045
12153: POP
12154: POP
// end ; if not seen [ 2 ] then
12155: LD_EXP 9
12159: PUSH
12160: LD_INT 2
12162: ARRAY
12163: NOT
12164: IFFALSE 12389
// begin can_kamikazed := true ;
12166: LD_ADDR_EXP 10
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_INT 2
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 25
12191: PUSH
12192: LD_INT 17
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PPUSH
12203: CALL_OW 69
12207: ST_TO_ADDR
// if tmp then
12208: LD_VAR 0 2
12212: IFFALSE 12389
// for i in tmp do
12214: LD_ADDR_VAR 0 1
12218: PUSH
12219: LD_VAR 0 2
12223: PUSH
12224: FOR_IN
12225: IFFALSE 12387
// if See ( 1 , i ) then
12227: LD_INT 1
12229: PPUSH
12230: LD_VAR 0 1
12234: PPUSH
12235: CALL_OW 292
12239: IFFALSE 12385
// begin seen := Replace ( seen , 2 , true ) ;
12241: LD_ADDR_EXP 9
12245: PUSH
12246: LD_EXP 9
12250: PPUSH
12251: LD_INT 2
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 1
12261: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12262: LD_INT 1
12264: PPUSH
12265: CALL 15594 0 1
12269: IFFALSE 12385
// begin DialogueOn ;
12271: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12275: LD_VAR 0 1
12279: PPUSH
12280: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12284: LD_INT 10
12286: PPUSH
12287: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12291: LD_ADDR_VAR 0 3
12295: PUSH
12296: LD_INT 1
12298: PPUSH
12299: LD_STRING D5b-Sol1-1
12301: PPUSH
12302: CALL 15772 0 2
12306: ST_TO_ADDR
// if not un then
12307: LD_VAR 0 3
12311: NOT
12312: IFFALSE 12330
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12314: LD_ADDR_VAR 0 3
12318: PUSH
12319: LD_INT 2
12321: PPUSH
12322: LD_STRING D5b-FSol1-1
12324: PPUSH
12325: CALL 15772 0 2
12329: ST_TO_ADDR
// if un then
12330: LD_VAR 0 3
12334: IFFALSE 12379
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12336: LD_ADDR_VAR 0 4
12340: PUSH
12341: LD_INT 1
12343: PPUSH
12344: LD_STRING D5b-Sol2-1
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: CALL 15998 0 3
12356: ST_TO_ADDR
// if not un2 then
12357: LD_VAR 0 4
12361: NOT
12362: IFFALSE 12379
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12364: LD_INT 2
12366: PPUSH
12367: LD_STRING D5b-FSol2-1
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: CALL 15998 0 3
// end ; DialogueOff ;
12379: CALL_OW 7
// break ;
12383: GO 12387
// end ; end ;
12385: GO 12224
12387: POP
12388: POP
// end ; if not seen [ 3 ] then
12389: LD_EXP 9
12393: PUSH
12394: LD_INT 3
12396: ARRAY
12397: NOT
12398: IFFALSE 12572
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12400: LD_ADDR_VAR 0 2
12404: PUSH
12405: LD_INT 22
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 33
12417: PUSH
12418: LD_INT 2
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: ST_TO_ADDR
// if tmp then
12434: LD_VAR 0 2
12438: IFFALSE 12572
// for i in tmp do
12440: LD_ADDR_VAR 0 1
12444: PUSH
12445: LD_VAR 0 2
12449: PUSH
12450: FOR_IN
12451: IFFALSE 12570
// if See ( 1 , i ) then
12453: LD_INT 1
12455: PPUSH
12456: LD_VAR 0 1
12460: PPUSH
12461: CALL_OW 292
12465: IFFALSE 12568
// begin seen := Replace ( seen , 3 , true ) ;
12467: LD_ADDR_EXP 9
12471: PUSH
12472: LD_EXP 9
12476: PPUSH
12477: LD_INT 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 1
12487: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12488: LD_INT 1
12490: PPUSH
12491: CALL 15594 0 1
12495: IFFALSE 12568
// begin DialogueOn ;
12497: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12510: LD_INT 10
12512: PPUSH
12513: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12517: LD_ADDR_VAR 0 3
12521: PUSH
12522: LD_INT 1
12524: PPUSH
12525: LD_STRING D8-Sol1-1
12527: PPUSH
12528: CALL 15772 0 2
12532: ST_TO_ADDR
// if not un then
12533: LD_VAR 0 3
12537: NOT
12538: IFFALSE 12550
// SayRand ( sex_female , D8-FSol1-1 ) ;
12540: LD_INT 2
12542: PPUSH
12543: LD_STRING D8-FSol1-1
12545: PPUSH
12546: CALL 15772 0 2
// Say ( JMM , D8-JMM-1 ) ;
12550: LD_EXP 21
12554: PPUSH
12555: LD_STRING D8-JMM-1
12557: PPUSH
12558: CALL_OW 88
// DialogueOff ;
12562: CALL_OW 7
// break ;
12566: GO 12570
// end ; end ;
12568: GO 12450
12570: POP
12571: POP
// end ; if not seen [ 4 ] then
12572: LD_EXP 9
12576: PUSH
12577: LD_INT 4
12579: ARRAY
12580: NOT
12581: IFFALSE 12743
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12583: LD_ADDR_VAR 0 2
12587: PUSH
12588: LD_INT 22
12590: PUSH
12591: LD_INT 2
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 33
12600: PUSH
12601: LD_INT 5
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: ST_TO_ADDR
// if tmp then
12617: LD_VAR 0 2
12621: IFFALSE 12743
// for i in tmp do
12623: LD_ADDR_VAR 0 1
12627: PUSH
12628: LD_VAR 0 2
12632: PUSH
12633: FOR_IN
12634: IFFALSE 12741
// if See ( 1 , i ) then
12636: LD_INT 1
12638: PPUSH
12639: LD_VAR 0 1
12643: PPUSH
12644: CALL_OW 292
12648: IFFALSE 12739
// begin seen := Replace ( seen , 4 , true ) ;
12650: LD_ADDR_EXP 9
12654: PUSH
12655: LD_EXP 9
12659: PPUSH
12660: LD_INT 4
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12671: LD_INT 1
12673: PPUSH
12674: CALL 15594 0 1
12678: IFFALSE 12739
// begin DialogueOn ;
12680: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12684: LD_VAR 0 1
12688: PPUSH
12689: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12693: LD_INT 10
12695: PPUSH
12696: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_STRING D5a-Sol1-1
12710: PPUSH
12711: CALL 15772 0 2
12715: ST_TO_ADDR
// if not un then
12716: LD_VAR 0 3
12720: NOT
12721: IFFALSE 12733
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12723: LD_INT 2
12725: PPUSH
12726: LD_STRING D5a-FSol1-1
12728: PPUSH
12729: CALL 15772 0 2
// DialogueOff ;
12733: CALL_OW 7
// break ;
12737: GO 12741
// end ; end ;
12739: GO 12633
12741: POP
12742: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12743: LD_EXP 9
12747: PUSH
12748: LD_INT 5
12750: ARRAY
12751: NOT
12752: PUSH
12753: LD_EXP 9
12757: PUSH
12758: LD_INT 3
12760: ARRAY
12761: AND
12762: IFFALSE 12936
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12764: LD_ADDR_VAR 0 2
12768: PUSH
12769: LD_INT 22
12771: PUSH
12772: LD_INT 2
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 34
12781: PUSH
12782: LD_INT 31
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 69
12797: ST_TO_ADDR
// if tmp then
12798: LD_VAR 0 2
12802: IFFALSE 12936
// for i in tmp do
12804: LD_ADDR_VAR 0 1
12808: PUSH
12809: LD_VAR 0 2
12813: PUSH
12814: FOR_IN
12815: IFFALSE 12934
// if See ( 1 , i ) then
12817: LD_INT 1
12819: PPUSH
12820: LD_VAR 0 1
12824: PPUSH
12825: CALL_OW 292
12829: IFFALSE 12932
// begin seen := Replace ( seen , 5 , true ) ;
12831: LD_ADDR_EXP 9
12835: PUSH
12836: LD_EXP 9
12840: PPUSH
12841: LD_INT 5
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 1
12851: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12852: LD_INT 1
12854: PPUSH
12855: CALL 15594 0 1
12859: IFFALSE 12932
// begin DialogueOn ;
12861: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12874: LD_INT 10
12876: PPUSH
12877: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12881: LD_ADDR_VAR 0 3
12885: PUSH
12886: LD_INT 1
12888: PPUSH
12889: LD_STRING D8a-Sol2-1
12891: PPUSH
12892: CALL 15772 0 2
12896: ST_TO_ADDR
// if not un then
12897: LD_VAR 0 3
12901: NOT
12902: IFFALSE 12914
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12904: LD_INT 2
12906: PPUSH
12907: LD_STRING D8a-FSol2-1
12909: PPUSH
12910: CALL 15772 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12914: LD_EXP 21
12918: PPUSH
12919: LD_STRING D8a-JMM-1
12921: PPUSH
12922: CALL_OW 88
// DialogueOff ;
12926: CALL_OW 7
// break ;
12930: GO 12934
// end ; end ;
12932: GO 12814
12934: POP
12935: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12936: LD_EXP 9
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PUSH
12945: LD_EXP 9
12949: PUSH
12950: LD_INT 2
12952: ARRAY
12953: AND
12954: PUSH
12955: LD_EXP 9
12959: PUSH
12960: LD_INT 3
12962: ARRAY
12963: AND
12964: PUSH
12965: LD_EXP 9
12969: PUSH
12970: LD_INT 4
12972: ARRAY
12973: AND
12974: PUSH
12975: LD_EXP 9
12979: PUSH
12980: LD_INT 5
12982: ARRAY
12983: AND
12984: IFFALSE 12987
// disable ;
12986: DISABLE
// end ;
12987: PPOPN 4
12989: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12990: LD_EXP 10
12994: PUSH
12995: LD_EXP 11
12999: AND
13000: IFFALSE 13198
13002: GO 13004
13004: DISABLE
13005: LD_INT 0
13007: PPUSH
// begin DialogueOn ;
13008: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
13012: LD_EXP 11
13016: PPUSH
13017: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
13021: LD_ADDR_VAR 0 1
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_STRING D5c-Sol1-1
13031: PPUSH
13032: CALL 15772 0 2
13036: ST_TO_ADDR
// if not un then
13037: LD_VAR 0 1
13041: NOT
13042: IFFALSE 13060
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
13044: LD_ADDR_VAR 0 1
13048: PUSH
13049: LD_INT 2
13051: PPUSH
13052: LD_STRING D5c-FSol1-1
13054: PPUSH
13055: CALL 15772 0 2
13059: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13060: LD_EXP 21
13064: PPUSH
13065: LD_STRING D5c-JMM-1
13067: PPUSH
13068: CALL_OW 88
// if IsOk ( Lisa ) then
13072: LD_EXP 22
13076: PPUSH
13077: CALL_OW 302
13081: IFFALSE 13097
// Say ( Lisa , D5d-Lisa-1 ) else
13083: LD_EXP 22
13087: PPUSH
13088: LD_STRING D5d-Lisa-1
13090: PPUSH
13091: CALL_OW 88
13095: GO 13182
// if IsOk ( Cyrus ) then
13097: LD_EXP 25
13101: PPUSH
13102: CALL_OW 302
13106: IFFALSE 13122
// Say ( Cyrus , D5d-Cyrus-1 ) else
13108: LD_EXP 25
13112: PPUSH
13113: LD_STRING D5d-Cyrus-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13182
// if IsOk ( Gary ) then
13122: LD_EXP 32
13126: PPUSH
13127: CALL_OW 302
13131: IFFALSE 13147
// Say ( Gary , D5d-Gary-1 ) else
13133: LD_EXP 32
13137: PPUSH
13138: LD_STRING D5d-Gary-1
13140: PPUSH
13141: CALL_OW 88
13145: GO 13182
// if GetSex ( un ) = sex_male then
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 258
13156: PUSH
13157: LD_INT 1
13159: EQUAL
13160: IFFALSE 13176
// Say ( un , D5d-Sol1-1 ) else
13162: LD_VAR 0 1
13166: PPUSH
13167: LD_STRING D5d-Sol1-1
13169: PPUSH
13170: CALL_OW 88
13174: GO 13182
// begin DialogueOff ;
13176: CALL_OW 7
// exit ;
13180: GO 13198
// end ; Say ( JMM , D5d-JMM-1 ) ;
13182: LD_EXP 21
13186: PPUSH
13187: LD_STRING D5d-JMM-1
13189: PPUSH
13190: CALL_OW 88
// DialogueOff ;
13194: CALL_OW 7
// end ;
13198: PPOPN 1
13200: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13201: LD_INT 1
13203: PPUSH
13204: LD_INT 17
13206: PPUSH
13207: CALL_OW 294
13211: PUSH
13212: LD_INT 2
13214: GREATEREQUAL
13215: IFFALSE 13336
13217: GO 13219
13219: DISABLE
13220: LD_INT 0
13222: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13223: LD_INT 10
13225: PPUSH
13226: LD_INT 5
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_INT 10
13234: NEG
13235: PPUSH
13236: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13240: LD_INT 10
13242: PPUSH
13243: LD_INT 5
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13253: LD_INT 10
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 86
// DialogueOn ;
13263: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13267: LD_ADDR_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: PPUSH
13275: LD_STRING D6-Sci1-1
13277: PPUSH
13278: CALL 15772 0 2
13282: ST_TO_ADDR
// if un then
13283: LD_VAR 0 1
13287: IFFALSE 13325
// begin Say ( JMM , D6-JMM-1 ) ;
13289: LD_EXP 21
13293: PPUSH
13294: LD_STRING D6-JMM-1
13296: PPUSH
13297: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13301: LD_VAR 0 1
13305: PPUSH
13306: LD_STRING D6-Sci1-2
13308: PPUSH
13309: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13313: LD_EXP 21
13317: PPUSH
13318: LD_STRING D6-JMM-2
13320: PPUSH
13321: CALL_OW 88
// end ; DialogueOff ;
13325: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13329: LD_STRING M3
13331: PPUSH
13332: CALL_OW 337
// end ;
13336: PPOPN 1
13338: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13339: LD_OWVAR 1
13343: PUSH
13344: LD_INT 42000
13346: GREATEREQUAL
13347: PUSH
13348: LD_INT 2
13350: PPUSH
13351: LD_INT 169
13353: PPUSH
13354: LD_INT 90
13356: PPUSH
13357: LD_INT 10
13359: PPUSH
13360: CALL 55144 0 4
13364: PUSH
13365: LD_INT 4
13367: ARRAY
13368: PUSH
13369: LD_INT 0
13371: EQUAL
13372: PUSH
13373: LD_INT 45
13375: PPUSH
13376: CALL_OW 301
13380: OR
13381: PUSH
13382: LD_INT 45
13384: PPUSH
13385: CALL_OW 255
13389: PUSH
13390: LD_INT 1
13392: EQUAL
13393: OR
13394: AND
13395: PUSH
13396: LD_INT 94
13398: PPUSH
13399: CALL_OW 301
13403: NOT
13404: AND
13405: IFFALSE 14531
13407: GO 13409
13409: DISABLE
13410: LD_INT 0
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
// begin uc_side := 5 ;
13416: LD_ADDR_OWVAR 20
13420: PUSH
13421: LD_INT 5
13423: ST_TO_ADDR
// uc_nation := 2 ;
13424: LD_ADDR_OWVAR 21
13428: PUSH
13429: LD_INT 2
13431: ST_TO_ADDR
// InitHc ;
13432: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13436: LD_INT 1
13438: PPUSH
13439: LD_INT 3
13441: PPUSH
13442: LD_INT 8
13444: PPUSH
13445: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13449: LD_ADDR_OWVAR 29
13453: PUSH
13454: LD_INT 12
13456: PUSH
13457: LD_INT 12
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13464: LD_ADDR_OWVAR 33
13468: PUSH
13469: LD_STRING SecondCharsGal
13471: ST_TO_ADDR
// hc_face_number := 7 ;
13472: LD_ADDR_OWVAR 34
13476: PUSH
13477: LD_INT 7
13479: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13480: LD_ADDR_EXP 46
13484: PUSH
13485: CALL_OW 44
13489: ST_TO_ADDR
// InitHc ;
13490: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13494: LD_INT 1
13496: PPUSH
13497: LD_INT 16
13499: PPUSH
13500: LD_INT 2
13502: PPUSH
13503: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13507: LD_ADDR_OWVAR 29
13511: PUSH
13512: LD_INT 12
13514: PUSH
13515: LD_INT 12
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: ST_TO_ADDR
// hc_name :=  ;
13522: LD_ADDR_OWVAR 26
13526: PUSH
13527: LD_STRING 
13529: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13530: LD_ADDR_EXP 47
13534: PUSH
13535: CALL_OW 44
13539: ST_TO_ADDR
// InitHc ;
13540: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13544: LD_INT 35
13546: PPUSH
13547: CALL_OW 67
// until not InBattle ( 1 ) ;
13551: LD_INT 1
13553: PPUSH
13554: CALL_OW 463
13558: NOT
13559: IFFALSE 13544
// wait ( 0 0$5 ) ;
13561: LD_INT 175
13563: PPUSH
13564: CALL_OW 67
// DialogueOn ;
13568: CALL_OW 6
// InGameOn ;
13572: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 25
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 25
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 25
13626: PUSH
13627: LD_INT 4
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 5
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 25
13646: PUSH
13647: LD_INT 8
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL_OW 69
13671: PUSH
13672: LD_EXP 21
13676: PUSH
13677: LD_EXP 22
13681: PUSH
13682: LD_EXP 23
13686: PUSH
13687: LD_EXP 24
13691: PUSH
13692: LD_EXP 25
13696: PUSH
13697: LD_EXP 26
13701: PUSH
13702: LD_EXP 27
13706: PUSH
13707: LD_EXP 28
13711: PUSH
13712: LD_EXP 29
13716: PUSH
13717: LD_EXP 31
13721: PUSH
13722: LD_EXP 32
13726: PUSH
13727: LD_EXP 33
13731: PUSH
13732: LD_EXP 34
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: DIFF
13752: PPUSH
13753: LD_INT 26
13755: PUSH
13756: LD_INT 1
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 72
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: ST_TO_ADDR
// if not un and Brown then
13772: LD_VAR 0 1
13776: NOT
13777: PUSH
13778: LD_EXP 27
13782: AND
13783: IFFALSE 13795
// un := Brown ;
13785: LD_ADDR_VAR 0 1
13789: PUSH
13790: LD_EXP 27
13794: ST_TO_ADDR
// if un then
13795: LD_VAR 0 1
13799: IFFALSE 13825
// begin Say ( un , D7-Sol1-1 ) ;
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_STRING D7-Sol1-1
13808: PPUSH
13809: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13813: LD_EXP 21
13817: PPUSH
13818: LD_STRING D7-JMM-1
13820: PPUSH
13821: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13825: LD_EXP 46
13829: PPUSH
13830: LD_STRING D7-Ar1-1
13832: PPUSH
13833: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13837: LD_EXP 21
13841: PPUSH
13842: LD_STRING D7-JMM-2
13844: PPUSH
13845: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13849: LD_EXP 46
13853: PPUSH
13854: LD_STRING D7-Ar1-2
13856: PPUSH
13857: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13861: LD_EXP 21
13865: PPUSH
13866: LD_STRING D7-JMM-3
13868: PPUSH
13869: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13873: LD_EXP 46
13877: PPUSH
13878: LD_STRING D7-Ar1-3
13880: PPUSH
13881: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13885: LD_EXP 21
13889: PPUSH
13890: LD_STRING D7-JMM-4
13892: PPUSH
13893: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13897: LD_EXP 46
13901: PPUSH
13902: LD_STRING D7-Ar1-4
13904: PPUSH
13905: CALL_OW 94
// InGameOff ;
13909: CALL_OW 9
// DialogueOff ;
13913: CALL_OW 7
// case Query ( QCameras ) of 1 :
13917: LD_STRING QCameras
13919: PPUSH
13920: CALL_OW 97
13924: PUSH
13925: LD_INT 1
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13936
13933: POP
// ; 2 :
13934: GO 13950
13936: LD_INT 2
13938: DOUBLE
13939: EQUAL
13940: IFTRUE 13944
13942: GO 13949
13944: POP
// exit ; end ;
13945: GO 14531
13947: GO 13950
13949: POP
// ChangeMissionObjectives ( MCar ) ;
13950: LD_STRING MCar
13952: PPUSH
13953: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13957: LD_INT 124
13959: PPUSH
13960: LD_INT 90
13962: PPUSH
13963: LD_INT 1
13965: PPUSH
13966: LD_INT 6
13968: NEG
13969: PPUSH
13970: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13974: LD_INT 124
13976: PPUSH
13977: LD_INT 90
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13987: LD_INT 12
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 424
// wait ( 3 ) ;
13997: LD_INT 3
13999: PPUSH
14000: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
14004: LD_INT 124
14006: PPUSH
14007: LD_INT 90
14009: PPUSH
14010: CALL_OW 86
// cargo := false ;
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14022: LD_INT 35
14024: PPUSH
14025: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 12
14036: PPUSH
14037: LD_INT 32
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 34
14049: PUSH
14050: LD_INT 32
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 58
14059: PUSH
14060: EMPTY
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: PPUSH
14068: CALL_OW 70
14072: ST_TO_ADDR
// until cargo ;
14073: LD_VAR 0 3
14077: IFFALSE 14022
// cargo := cargo [ 1 ] ;
14079: LD_ADDR_VAR 0 3
14083: PUSH
14084: LD_VAR 0 3
14088: PUSH
14089: LD_INT 1
14091: ARRAY
14092: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14093: LD_VAR 0 3
14097: PPUSH
14098: LD_INT 5
14100: PPUSH
14101: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14105: LD_INT 12
14107: PPUSH
14108: LD_INT 0
14110: PPUSH
14111: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14115: LD_EXP 46
14119: PPUSH
14120: LD_INT 11
14122: PPUSH
14123: LD_INT 0
14125: PPUSH
14126: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14130: LD_EXP 47
14134: PPUSH
14135: LD_INT 11
14137: PPUSH
14138: LD_INT 0
14140: PPUSH
14141: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14145: LD_EXP 46
14149: PUSH
14150: LD_EXP 47
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PPUSH
14159: LD_INT 12
14161: PPUSH
14162: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14166: LD_EXP 46
14170: PPUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14180: LD_EXP 46
14184: PUSH
14185: LD_EXP 47
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PPUSH
14194: LD_INT 209
14196: PPUSH
14197: LD_INT 178
14199: PPUSH
14200: CALL_OW 171
// while ( true ) do
14204: LD_INT 1
14206: IFFALSE 14360
// begin wait ( 0 0$1 ) ;
14208: LD_INT 35
14210: PPUSH
14211: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14215: LD_EXP 46
14219: PPUSH
14220: CALL_OW 314
14224: NOT
14225: PUSH
14226: LD_EXP 47
14230: PPUSH
14231: CALL_OW 314
14235: NOT
14236: OR
14237: IFFALSE 14263
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14239: LD_EXP 46
14243: PUSH
14244: LD_EXP 47
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: LD_INT 209
14255: PPUSH
14256: LD_INT 178
14258: PPUSH
14259: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14263: LD_EXP 46
14267: PPUSH
14268: LD_INT 10
14270: PPUSH
14271: CALL_OW 308
14275: IFFALSE 14286
// RemoveUnit ( ar_mechanic ) ;
14277: LD_EXP 46
14281: PPUSH
14282: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14286: LD_EXP 47
14290: PPUSH
14291: LD_INT 10
14293: PPUSH
14294: CALL_OW 308
14298: IFFALSE 14309
// RemoveUnit ( ar_mechanic_friend ) ;
14300: LD_EXP 47
14304: PPUSH
14305: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14309: LD_VAR 0 3
14313: PPUSH
14314: LD_INT 10
14316: PPUSH
14317: CALL_OW 308
14321: IFFALSE 14332
// RemoveUnit ( cargo ) ;
14323: LD_VAR 0 3
14327: PPUSH
14328: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14332: LD_EXP 46
14336: PPUSH
14337: CALL_OW 300
14341: NOT
14342: PUSH
14343: LD_EXP 47
14347: PPUSH
14348: CALL_OW 300
14352: NOT
14353: AND
14354: IFFALSE 14358
// break ;
14356: GO 14360
// end ;
14358: GO 14204
// wait ( 0 0$2 ) ;
14360: LD_INT 70
14362: PPUSH
14363: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14367: LD_EXP 46
14371: PPUSH
14372: LD_STRING D7a-Ar1-1
14374: PPUSH
14375: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14379: LD_ADDR_VAR 0 4
14383: PUSH
14384: LD_INT 129
14386: PUSH
14387: LD_INT 10
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 103
14396: PUSH
14397: LD_INT 6
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PUSH
14404: LD_INT 148
14406: PUSH
14407: LD_INT 47
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 155
14416: PUSH
14417: LD_INT 16
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: ST_TO_ADDR
// if Difficulty = 1 then
14430: LD_OWVAR 67
14434: PUSH
14435: LD_INT 1
14437: EQUAL
14438: IFFALSE 14475
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14440: LD_ADDR_VAR 0 4
14444: PUSH
14445: LD_VAR 0 4
14449: PUSH
14450: LD_INT 78
14452: PUSH
14453: LD_INT 7
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 104
14462: PUSH
14463: LD_INT 43
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: ADD
14474: ST_TO_ADDR
// for i in tmp do
14475: LD_ADDR_VAR 0 2
14479: PUSH
14480: LD_VAR 0 4
14484: PUSH
14485: FOR_IN
14486: IFFALSE 14519
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14488: LD_VAR 0 2
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: LD_VAR 0 2
14501: PUSH
14502: LD_INT 2
14504: ARRAY
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: LD_INT 9
14511: NEG
14512: PPUSH
14513: CALL_OW 330
14517: GO 14485
14519: POP
14520: POP
// CenterOnXY ( 129 , 10 ) ;
14521: LD_INT 129
14523: PPUSH
14524: LD_INT 10
14526: PPUSH
14527: CALL_OW 84
// end ;
14531: PPOPN 4
14533: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14534: LD_EXP 15
14538: PUSH
14539: LD_INT 21000
14541: MINUS
14542: PUSH
14543: LD_OWVAR 1
14547: LESSEQUAL
14548: IFFALSE 14588
14550: GO 14552
14552: DISABLE
// begin powell_warn := true ;
14553: LD_ADDR_EXP 16
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// DialogueOn ;
14561: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14565: LD_EXP 30
14569: PPUSH
14570: LD_STRING D9-Pow-1
14572: PPUSH
14573: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14577: LD_INT 10
14579: PPUSH
14580: CALL_OW 68
// DialogueOff ;
14584: CALL_OW 7
// end ;
14588: END
// every 0 0$1 trigger game_time <= tick do
14589: LD_EXP 15
14593: PUSH
14594: LD_OWVAR 1
14598: LESSEQUAL
14599: IFFALSE 14638
14601: GO 14603
14603: DISABLE
// begin DialogueOn ;
14604: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14608: LD_EXP 30
14612: PPUSH
14613: LD_STRING D9a-Pow-1
14615: PPUSH
14616: CALL_OW 94
// dwait ( 0 0$2 ) ;
14620: LD_INT 70
14622: PPUSH
14623: CALL_OW 68
// DialogueOff ;
14627: CALL_OW 7
// YouLost ( Command ) ;
14631: LD_STRING Command
14633: PPUSH
14634: CALL_OW 104
// end ;
14638: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp , m1 , m2 , m3 ;
14639: LD_INT 22
14641: PUSH
14642: LD_INT 2
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 30
14651: PUSH
14652: LD_INT 1
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PPUSH
14663: CALL_OW 69
14667: PUSH
14668: LD_INT 0
14670: EQUAL
14671: PUSH
14672: LD_EXP 21
14676: PPUSH
14677: CALL_OW 302
14681: AND
14682: IFFALSE 15591
14684: GO 14686
14686: DISABLE
14687: LD_INT 0
14689: PPUSH
14690: PPUSH
14691: PPUSH
14692: PPUSH
// begin m1 := false ;
14693: LD_ADDR_VAR 0 2
14697: PUSH
14698: LD_INT 0
14700: ST_TO_ADDR
// m2 := false ;
14701: LD_ADDR_VAR 0 3
14705: PUSH
14706: LD_INT 0
14708: ST_TO_ADDR
// m3 := false ;
14709: LD_ADDR_VAR 0 4
14713: PUSH
14714: LD_INT 0
14716: ST_TO_ADDR
// if not am_veh_consturcted then
14717: LD_EXP 20
14721: NOT
14722: IFFALSE 14731
// SetAchievement ( ACH_ARABTECH ) ;
14724: LD_STRING ACH_ARABTECH
14726: PPUSH
14727: CALL_OW 543
// if tick < [ 120 120$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] then
14731: LD_OWVAR 1
14735: PUSH
14736: LD_INT 252000
14738: PUSH
14739: LD_INT 210000
14741: PUSH
14742: LD_INT 199500
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_OWVAR 67
14754: ARRAY
14755: LESS
14756: IFFALSE 14778
// begin m3 := true ;
14758: LD_ADDR_VAR 0 4
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// AddMedal ( Time1 , 1 ) ;
14766: LD_STRING Time1
14768: PPUSH
14769: LD_INT 1
14771: PPUSH
14772: CALL_OW 101
// end else
14776: GO 14809
// if not powell_warn then
14778: LD_EXP 16
14782: NOT
14783: IFFALSE 14798
// AddMedal ( Time1 , - 1 ) else
14785: LD_STRING Time1
14787: PPUSH
14788: LD_INT 1
14790: NEG
14791: PPUSH
14792: CALL_OW 101
14796: GO 14809
// AddMedal ( Time1 , - 2 ) ;
14798: LD_STRING Time1
14800: PPUSH
14801: LD_INT 2
14803: NEG
14804: PPUSH
14805: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14809: LD_EXP 17
14813: PUSH
14814: LD_INT 5
14816: PUSH
14817: LD_INT 4
14819: PUSH
14820: LD_INT 3
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: PUSH
14828: LD_OWVAR 67
14832: ARRAY
14833: GREATEREQUAL
14834: IFFALSE 14849
// AddMedal ( Destroy , - 2 ) else
14836: LD_STRING Destroy
14838: PPUSH
14839: LD_INT 2
14841: NEG
14842: PPUSH
14843: CALL_OW 101
14847: GO 14982
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14849: LD_INT 22
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 3
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 50
14871: PUSH
14872: EMPTY
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: PPUSH
14880: CALL_OW 69
14884: PUSH
14885: LD_INT 25
14887: GREATEREQUAL
14888: IFFALSE 14903
// AddMedal ( Destroy , - 1 ) else
14890: LD_STRING Destroy
14892: PPUSH
14893: LD_INT 1
14895: NEG
14896: PPUSH
14897: CALL_OW 101
14901: GO 14982
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14903: LD_INT 22
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 21
14915: PUSH
14916: LD_INT 3
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 50
14925: PUSH
14926: EMPTY
14927: LIST
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: PPUSH
14934: CALL_OW 69
14938: PUSH
14939: LD_INT 15
14941: GREATEREQUAL
14942: IFFALSE 14964
// begin m1 := true ;
14944: LD_ADDR_VAR 0 2
14948: PUSH
14949: LD_INT 1
14951: ST_TO_ADDR
// AddMedal ( Destroy , 1 ) ;
14952: LD_STRING Destroy
14954: PPUSH
14955: LD_INT 1
14957: PPUSH
14958: CALL_OW 101
// end else
14962: GO 14982
// begin m1 := true ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_INT 1
14971: ST_TO_ADDR
// AddMedal ( Destroy , 2 ) ;
14972: LD_STRING Destroy
14974: PPUSH
14975: LD_INT 2
14977: PPUSH
14978: CALL_OW 101
// end ; SaveVariable ( artifact_get , 11_artifact_captured ) ;
14982: LD_EXP 13
14986: PPUSH
14987: LD_STRING 11_artifact_captured
14989: PPUSH
14990: CALL_OW 39
// if artifact_get then
14994: LD_EXP 13
14998: IFFALSE 15020
// begin m2 := true ;
15000: LD_ADDR_VAR 0 3
15004: PUSH
15005: LD_INT 1
15007: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
15008: LD_STRING Artefact
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 101
// end else
15018: GO 15031
// AddMedal ( Artefact , - 1 ) ;
15020: LD_STRING Artefact
15022: PPUSH
15023: LD_INT 1
15025: NEG
15026: PPUSH
15027: CALL_OW 101
// if m1 and m2 and m3 and Difficulty = 3 then
15031: LD_VAR 0 2
15035: PUSH
15036: LD_VAR 0 3
15040: AND
15041: PUSH
15042: LD_VAR 0 4
15046: AND
15047: PUSH
15048: LD_OWVAR 67
15052: PUSH
15053: LD_INT 3
15055: EQUAL
15056: AND
15057: IFFALSE 15069
// SetAchievementEX ( ACH_AMER , 11 ) ;
15059: LD_STRING ACH_AMER
15061: PPUSH
15062: LD_INT 11
15064: PPUSH
15065: CALL_OW 564
// if m1 and m2 and m3 and loses_counter = 0 then
15069: LD_VAR 0 2
15073: PUSH
15074: LD_VAR 0 3
15078: AND
15079: PUSH
15080: LD_VAR 0 4
15084: AND
15085: PUSH
15086: LD_EXP 17
15090: PUSH
15091: LD_INT 0
15093: EQUAL
15094: AND
15095: IFFALSE 15111
// begin wait ( 3 ) ;
15097: LD_INT 3
15099: PPUSH
15100: CALL_OW 67
// SetAchievement ( ACH_GENERAL ) ;
15104: LD_STRING ACH_GENERAL
15106: PPUSH
15107: CALL_OW 543
// end ; if tick <= 100 100$00 then
15111: LD_OWVAR 1
15115: PUSH
15116: LD_INT 210000
15118: LESSEQUAL
15119: IFFALSE 15135
// begin wait ( 3 ) ;
15121: LD_INT 3
15123: PPUSH
15124: CALL_OW 67
// SetAchievement ( ACH_ASPEED_11 ) ;
15128: LD_STRING ACH_ASPEED_11
15130: PPUSH
15131: CALL_OW 543
// end ; GiveMedals ( MAIN ) ;
15135: LD_STRING MAIN
15137: PPUSH
15138: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
15142: LD_ADDR_EXP 19
15146: PUSH
15147: LD_EXP 19
15151: PPUSH
15152: LD_INT 51
15154: PUSH
15155: EMPTY
15156: LIST
15157: PPUSH
15158: CALL_OW 72
15162: ST_TO_ADDR
// tmp := JMM ^ selected ;
15163: LD_ADDR_VAR 0 1
15167: PUSH
15168: LD_EXP 21
15172: PUSH
15173: LD_EXP 19
15177: ADD
15178: ST_TO_ADDR
// RewardPeople ( tmp ) ;
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
15188: LD_VAR 0 1
15192: PUSH
15193: LD_EXP 21
15197: PUSH
15198: LD_EXP 22
15202: PUSH
15203: LD_EXP 23
15207: PUSH
15208: LD_EXP 24
15212: PUSH
15213: LD_EXP 25
15217: PUSH
15218: LD_EXP 26
15222: PUSH
15223: LD_EXP 27
15227: PUSH
15228: LD_EXP 28
15232: PUSH
15233: LD_EXP 29
15237: PUSH
15238: LD_EXP 31
15242: PUSH
15243: LD_EXP 32
15247: PUSH
15248: LD_EXP 33
15252: PUSH
15253: LD_EXP 34
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: DIFF
15273: PPUSH
15274: LD_STRING 11c_others
15276: PPUSH
15277: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15281: LD_EXP 21
15285: PPUSH
15286: LD_EXP 3
15290: PUSH
15291: LD_STRING JMM
15293: STR
15294: PPUSH
15295: CALL_OW 38
// if Lisa then
15299: LD_EXP 22
15303: IFFALSE 15323
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15305: LD_EXP 22
15309: PPUSH
15310: LD_EXP 3
15314: PUSH
15315: LD_STRING Lisa
15317: STR
15318: PPUSH
15319: CALL_OW 38
// if Donaldson then
15323: LD_EXP 23
15327: IFFALSE 15347
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15329: LD_EXP 23
15333: PPUSH
15334: LD_EXP 3
15338: PUSH
15339: LD_STRING Donaldson
15341: STR
15342: PPUSH
15343: CALL_OW 38
// if Bobby then
15347: LD_EXP 24
15351: IFFALSE 15371
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15353: LD_EXP 24
15357: PPUSH
15358: LD_EXP 3
15362: PUSH
15363: LD_STRING Bobby
15365: STR
15366: PPUSH
15367: CALL_OW 38
// if Cyrus then
15371: LD_EXP 25
15375: IFFALSE 15395
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15377: LD_EXP 25
15381: PPUSH
15382: LD_EXP 3
15386: PUSH
15387: LD_STRING Cyrus
15389: STR
15390: PPUSH
15391: CALL_OW 38
// if Denis then
15395: LD_EXP 26
15399: IFFALSE 15419
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15401: LD_EXP 26
15405: PPUSH
15406: LD_EXP 3
15410: PUSH
15411: LD_STRING Denis
15413: STR
15414: PPUSH
15415: CALL_OW 38
// if Brown then
15419: LD_EXP 27
15423: IFFALSE 15443
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15425: LD_EXP 27
15429: PPUSH
15430: LD_EXP 3
15434: PUSH
15435: LD_STRING Brown
15437: STR
15438: PPUSH
15439: CALL_OW 38
// if Gladstone then
15443: LD_EXP 28
15447: IFFALSE 15467
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15449: LD_EXP 28
15453: PPUSH
15454: LD_EXP 3
15458: PUSH
15459: LD_STRING Gladstone
15461: STR
15462: PPUSH
15463: CALL_OW 38
// if Houten then
15467: LD_EXP 29
15471: IFFALSE 15491
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15473: LD_EXP 29
15477: PPUSH
15478: LD_EXP 3
15482: PUSH
15483: LD_STRING Houten
15485: STR
15486: PPUSH
15487: CALL_OW 38
// if Cornel then
15491: LD_EXP 31
15495: IFFALSE 15515
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15497: LD_EXP 31
15501: PPUSH
15502: LD_EXP 3
15506: PUSH
15507: LD_STRING Cornell
15509: STR
15510: PPUSH
15511: CALL_OW 38
// if Gary then
15515: LD_EXP 32
15519: IFFALSE 15539
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15521: LD_EXP 32
15525: PPUSH
15526: LD_EXP 3
15530: PUSH
15531: LD_STRING Gary
15533: STR
15534: PPUSH
15535: CALL_OW 38
// if Frank then
15539: LD_EXP 33
15543: IFFALSE 15563
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15545: LD_EXP 33
15549: PPUSH
15550: LD_EXP 3
15554: PUSH
15555: LD_STRING Frank
15557: STR
15558: PPUSH
15559: CALL_OW 38
// if Kikuchi then
15563: LD_EXP 34
15567: IFFALSE 15587
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15569: LD_EXP 34
15573: PPUSH
15574: LD_EXP 3
15578: PUSH
15579: LD_STRING Kikuchi
15581: STR
15582: PPUSH
15583: CALL_OW 38
// YouWin ;
15587: CALL_OW 103
// end ;
15591: PPOPN 4
15593: END
// export function CanSayRand ( side ) ; begin
15594: LD_INT 0
15596: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15597: LD_ADDR_VAR 0 2
15601: PUSH
15602: LD_INT 52
15604: PUSH
15605: EMPTY
15606: LIST
15607: PUSH
15608: LD_INT 22
15610: PUSH
15611: LD_VAR 0 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 2
15622: PUSH
15623: LD_INT 25
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 25
15635: PUSH
15636: LD_INT 2
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 25
15645: PUSH
15646: LD_INT 3
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 25
15655: PUSH
15656: LD_INT 4
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 69
15679: PUSH
15680: LD_EXP 21
15684: PUSH
15685: LD_EXP 33
15689: PUSH
15690: LD_EXP 22
15694: PUSH
15695: LD_EXP 23
15699: PUSH
15700: LD_EXP 24
15704: PUSH
15705: LD_EXP 25
15709: PUSH
15710: LD_EXP 26
15714: PUSH
15715: LD_EXP 27
15719: PUSH
15720: LD_EXP 28
15724: PUSH
15725: LD_EXP 29
15729: PUSH
15730: LD_EXP 30
15734: PUSH
15735: LD_EXP 31
15739: PUSH
15740: LD_EXP 32
15744: PUSH
15745: LD_EXP 34
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: DIFF
15766: ST_TO_ADDR
// end ;
15767: LD_VAR 0 2
15771: RET
// export function SayRand ( sex , dial ) ; begin
15772: LD_INT 0
15774: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15775: LD_ADDR_VAR 0 3
15779: PUSH
15780: LD_INT 52
15782: PUSH
15783: EMPTY
15784: LIST
15785: PUSH
15786: LD_INT 22
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 26
15798: PUSH
15799: LD_VAR 0 1
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 2
15810: PUSH
15811: LD_INT 25
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 25
15823: PUSH
15824: LD_INT 2
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 25
15833: PUSH
15834: LD_INT 3
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 25
15843: PUSH
15844: LD_INT 4
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: PUSH
15869: LD_EXP 21
15873: PUSH
15874: LD_EXP 33
15878: PUSH
15879: LD_EXP 22
15883: PUSH
15884: LD_EXP 23
15888: PUSH
15889: LD_EXP 24
15893: PUSH
15894: LD_EXP 25
15898: PUSH
15899: LD_EXP 26
15903: PUSH
15904: LD_EXP 27
15908: PUSH
15909: LD_EXP 28
15913: PUSH
15914: LD_EXP 29
15918: PUSH
15919: LD_EXP 30
15923: PUSH
15924: LD_EXP 31
15928: PUSH
15929: LD_EXP 32
15933: PUSH
15934: LD_EXP 34
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: DIFF
15955: ST_TO_ADDR
// if not result then
15956: LD_VAR 0 3
15960: NOT
15961: IFFALSE 15965
// exit ;
15963: GO 15993
// result := result [ 1 ] ;
15965: LD_ADDR_VAR 0 3
15969: PUSH
15970: LD_VAR 0 3
15974: PUSH
15975: LD_INT 1
15977: ARRAY
15978: ST_TO_ADDR
// Say ( result , dial ) ;
15979: LD_VAR 0 3
15983: PPUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: CALL_OW 88
// end ;
15993: LD_VAR 0 3
15997: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15998: LD_INT 0
16000: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
16001: LD_ADDR_VAR 0 4
16005: PUSH
16006: LD_INT 22
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 26
16018: PUSH
16019: LD_VAR 0 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: LD_INT 25
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 25
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 25
16053: PUSH
16054: LD_INT 3
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 25
16063: PUSH
16064: LD_INT 4
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: LIST
16082: PPUSH
16083: CALL_OW 69
16087: PUSH
16088: LD_EXP 21
16092: PUSH
16093: LD_EXP 33
16097: PUSH
16098: LD_EXP 22
16102: PUSH
16103: LD_EXP 23
16107: PUSH
16108: LD_EXP 24
16112: PUSH
16113: LD_EXP 25
16117: PUSH
16118: LD_EXP 26
16122: PUSH
16123: LD_EXP 27
16127: PUSH
16128: LD_EXP 28
16132: PUSH
16133: LD_EXP 29
16137: PUSH
16138: LD_EXP 30
16142: PUSH
16143: LD_EXP 31
16147: PUSH
16148: LD_EXP 32
16152: PUSH
16153: LD_EXP 34
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PUSH
16174: LD_VAR 0 3
16178: ADD
16179: DIFF
16180: ST_TO_ADDR
// if not result then
16181: LD_VAR 0 4
16185: NOT
16186: IFFALSE 16190
// exit ;
16188: GO 16218
// result := result [ 1 ] ;
16190: LD_ADDR_VAR 0 4
16194: PUSH
16195: LD_VAR 0 4
16199: PUSH
16200: LD_INT 1
16202: ARRAY
16203: ST_TO_ADDR
// Say ( result , dial ) ;
16204: LD_VAR 0 4
16208: PPUSH
16209: LD_VAR 0 2
16213: PPUSH
16214: CALL_OW 88
// end ; end_of_file
16218: LD_VAR 0 4
16222: RET
// export function CustomEvent ( event ) ; begin
16223: LD_INT 0
16225: PPUSH
// end ;
16226: LD_VAR 0 2
16230: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 255
16240: PUSH
16241: LD_INT 1
16243: EQUAL
16244: IFFALSE 16254
// artifact_get := true ;
16246: LD_ADDR_EXP 13
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 255
16263: PUSH
16264: LD_INT 2
16266: EQUAL
16267: IFFALSE 16285
// begin artifact_get := false ;
16269: LD_ADDR_EXP 13
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// artifact_stolen := true ;
16277: LD_ADDR_EXP 12
16281: PUSH
16282: LD_INT 1
16284: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16285: LD_ADDR_EXP 14
16289: PUSH
16290: LD_INT 1
16292: ST_TO_ADDR
// end ;
16293: PPOPN 2
16295: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16296: LD_ADDR_EXP 14
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// end ;
16304: PPOPN 2
16306: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16307: LD_VAR 0 1
16311: PUSH
16312: LD_EXP 21
16316: EQUAL
16317: IFFALSE 16328
// begin YouLost ( JMM ) ;
16319: LD_STRING JMM
16321: PPUSH
16322: CALL_OW 104
// exit ;
16326: GO 16460
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 22
16335: PUSH
16336: LD_INT 1
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 21
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 2
16355: PUSH
16356: LD_INT 25
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 25
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 25
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 25
16388: PUSH
16389: LD_INT 4
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 25
16398: PUSH
16399: LD_INT 5
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 25
16408: PUSH
16409: LD_INT 8
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: PPUSH
16430: CALL_OW 69
16434: IN
16435: IFFALSE 16451
// loses_counter := loses_counter + 1 ;
16437: LD_ADDR_EXP 17
16441: PUSH
16442: LD_EXP 17
16446: PUSH
16447: LD_INT 1
16449: PLUS
16450: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL 44148 0 1
// end ;
16460: PPOPN 1
16462: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL 46482 0 2
// end ;
16477: PPOPN 2
16479: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL 45791 0 1
// end ;
16489: PPOPN 1
16491: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16492: LD_VAR 0 1
16496: PPUSH
16497: LD_VAR 0 2
16501: PPUSH
16502: LD_VAR 0 3
16506: PPUSH
16507: LD_VAR 0 4
16511: PPUSH
16512: LD_VAR 0 5
16516: PPUSH
16517: CALL 43464 0 5
// end ;
16521: PPOPN 5
16523: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetNation ( vehicle ) = nation_american then
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 248
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: IFFALSE 16547
// am_veh_consturcted := true ;
16539: LD_ADDR_EXP 20
16543: PUSH
16544: LD_INT 1
16546: ST_TO_ADDR
// MCE_VehicleConstructed ( vehicle , factory ) ;
16547: LD_VAR 0 1
16551: PPUSH
16552: LD_VAR 0 2
16556: PPUSH
16557: CALL 43060 0 2
// end ;
16561: PPOPN 2
16563: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 247
16573: PUSH
16574: LD_INT 2
16576: EQUAL
16577: IFFALSE 16581
// exit ;
16579: GO 16598
// if not kamikazed then
16581: LD_EXP 11
16585: NOT
16586: IFFALSE 16598
// kamikazed := unit ;
16588: LD_ADDR_EXP 11
16592: PUSH
16593: LD_VAR 0 1
16597: ST_TO_ADDR
// end ;
16598: PPOPN 1
16600: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16601: LD_INT 0
16603: PPUSH
16604: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16605: LD_VAR 0 1
16609: PPUSH
16610: LD_VAR 0 2
16614: PPUSH
16615: LD_VAR 0 3
16619: PPUSH
16620: LD_VAR 0 4
16624: PPUSH
16625: CALL 42898 0 4
// end ;
16629: PPOPN 6
16631: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16632: LD_VAR 0 1
16636: PPUSH
16637: LD_VAR 0 2
16641: PPUSH
16642: LD_VAR 0 3
16646: PPUSH
16647: CALL 42673 0 3
// end ;
16651: PPOPN 3
16653: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16654: LD_VAR 0 1
16658: PPUSH
16659: LD_VAR 0 2
16663: PPUSH
16664: CALL 43844 0 2
// end ;
16668: PPOPN 2
16670: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_VAR 0 2
16680: PPUSH
16681: CALL 42367 0 2
// end ;
16685: PPOPN 2
16687: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16688: LD_VAR 0 1
16692: PPUSH
16693: LD_VAR 0 2
16697: PPUSH
16698: CALL 42558 0 2
// end ;
16702: PPOPN 2
16704: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL 45550 0 1
// end ;
16714: PPOPN 1
16716: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16717: LD_VAR 0 1
16721: PPUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: CALL 46743 0 2
// end ;
16731: PPOPN 2
16733: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16734: LD_VAR 0 1
16738: PPUSH
16739: LD_VAR 0 2
16743: PPUSH
16744: LD_VAR 0 3
16748: PPUSH
16749: LD_VAR 0 4
16753: PPUSH
16754: CALL 46959 0 4
// end ;
16758: PPOPN 4
16760: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16761: LD_VAR 0 1
16765: PPUSH
16766: CALL 90315 0 1
// end ; end_of_file
16770: PPOPN 1
16772: END
// every 0 0$1 trigger game do
16773: LD_EXP 2
16777: IFFALSE 16807
16779: GO 16781
16781: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16782: LD_INT 7
16784: PUSH
16785: LD_INT 6
16787: PUSH
16788: LD_INT 4
16790: PUSH
16791: LD_INT 6
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: PPUSH
16800: LD_INT 1750
16802: PPUSH
16803: CALL 16808 0 2
16807: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16808: LD_INT 0
16810: PPUSH
16811: PPUSH
16812: PPUSH
// if not areas then
16813: LD_VAR 0 1
16817: NOT
16818: IFFALSE 16822
// exit ;
16820: GO 16952
// repeat wait ( time ) ;
16822: LD_VAR 0 2
16826: PPUSH
16827: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16831: LD_ADDR_VAR 0 5
16835: PUSH
16836: LD_INT 1
16838: PPUSH
16839: LD_INT 90
16841: PPUSH
16842: CALL_OW 12
16846: ST_TO_ADDR
// for i in areas do
16847: LD_ADDR_VAR 0 4
16851: PUSH
16852: LD_VAR 0 1
16856: PUSH
16857: FOR_IN
16858: IFFALSE 16911
// begin if Prob ( p ) then
16860: LD_VAR 0 5
16864: PPUSH
16865: CALL_OW 13
16869: IFFALSE 16909
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16871: LD_INT 1
16873: PPUSH
16874: LD_INT 5
16876: PPUSH
16877: CALL_OW 12
16881: PPUSH
16882: LD_VAR 0 4
16886: PPUSH
16887: LD_INT 1
16889: PPUSH
16890: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16894: LD_INT 385
16896: PPUSH
16897: LD_INT 595
16899: PPUSH
16900: CALL_OW 12
16904: PPUSH
16905: CALL_OW 67
// end ; end ;
16909: GO 16857
16911: POP
16912: POP
// time := time + 0 0$3 ;
16913: LD_ADDR_VAR 0 2
16917: PUSH
16918: LD_VAR 0 2
16922: PUSH
16923: LD_INT 105
16925: PLUS
16926: ST_TO_ADDR
// if time > 7 7$00 then
16927: LD_VAR 0 2
16931: PUSH
16932: LD_INT 14700
16934: GREATER
16935: IFFALSE 16945
// time := 0 0$40 ;
16937: LD_ADDR_VAR 0 2
16941: PUSH
16942: LD_INT 1400
16944: ST_TO_ADDR
// until not game ;
16945: LD_EXP 2
16949: NOT
16950: IFFALSE 16822
// end ; end_of_file
16952: LD_VAR 0 3
16956: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16957: LD_INT 0
16959: PPUSH
16960: PPUSH
// skirmish := false ;
16961: LD_ADDR_EXP 48
16965: PUSH
16966: LD_INT 0
16968: ST_TO_ADDR
// debug_mc := false ;
16969: LD_ADDR_EXP 49
16973: PUSH
16974: LD_INT 0
16976: ST_TO_ADDR
// mc_bases := [ ] ;
16977: LD_ADDR_EXP 50
16981: PUSH
16982: EMPTY
16983: ST_TO_ADDR
// mc_sides := [ ] ;
16984: LD_ADDR_EXP 76
16988: PUSH
16989: EMPTY
16990: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16991: LD_ADDR_EXP 51
16995: PUSH
16996: EMPTY
16997: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16998: LD_ADDR_EXP 52
17002: PUSH
17003: EMPTY
17004: ST_TO_ADDR
// mc_need_heal := [ ] ;
17005: LD_ADDR_EXP 53
17009: PUSH
17010: EMPTY
17011: ST_TO_ADDR
// mc_healers := [ ] ;
17012: LD_ADDR_EXP 54
17016: PUSH
17017: EMPTY
17018: ST_TO_ADDR
// mc_build_list := [ ] ;
17019: LD_ADDR_EXP 55
17023: PUSH
17024: EMPTY
17025: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
17026: LD_ADDR_EXP 82
17030: PUSH
17031: EMPTY
17032: ST_TO_ADDR
// mc_builders := [ ] ;
17033: LD_ADDR_EXP 56
17037: PUSH
17038: EMPTY
17039: ST_TO_ADDR
// mc_construct_list := [ ] ;
17040: LD_ADDR_EXP 57
17044: PUSH
17045: EMPTY
17046: ST_TO_ADDR
// mc_turret_list := [ ] ;
17047: LD_ADDR_EXP 58
17051: PUSH
17052: EMPTY
17053: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
17054: LD_ADDR_EXP 59
17058: PUSH
17059: EMPTY
17060: ST_TO_ADDR
// mc_miners := [ ] ;
17061: LD_ADDR_EXP 64
17065: PUSH
17066: EMPTY
17067: ST_TO_ADDR
// mc_mines := [ ] ;
17068: LD_ADDR_EXP 63
17072: PUSH
17073: EMPTY
17074: ST_TO_ADDR
// mc_minefields := [ ] ;
17075: LD_ADDR_EXP 65
17079: PUSH
17080: EMPTY
17081: ST_TO_ADDR
// mc_crates := [ ] ;
17082: LD_ADDR_EXP 66
17086: PUSH
17087: EMPTY
17088: ST_TO_ADDR
// mc_crates_collector := [ ] ;
17089: LD_ADDR_EXP 67
17093: PUSH
17094: EMPTY
17095: ST_TO_ADDR
// mc_crates_area := [ ] ;
17096: LD_ADDR_EXP 68
17100: PUSH
17101: EMPTY
17102: ST_TO_ADDR
// mc_vehicles := [ ] ;
17103: LD_ADDR_EXP 69
17107: PUSH
17108: EMPTY
17109: ST_TO_ADDR
// mc_attack := [ ] ;
17110: LD_ADDR_EXP 70
17114: PUSH
17115: EMPTY
17116: ST_TO_ADDR
// mc_produce := [ ] ;
17117: LD_ADDR_EXP 71
17121: PUSH
17122: EMPTY
17123: ST_TO_ADDR
// mc_defender := [ ] ;
17124: LD_ADDR_EXP 72
17128: PUSH
17129: EMPTY
17130: ST_TO_ADDR
// mc_parking := [ ] ;
17131: LD_ADDR_EXP 74
17135: PUSH
17136: EMPTY
17137: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
17138: LD_ADDR_EXP 60
17142: PUSH
17143: EMPTY
17144: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
17145: LD_ADDR_EXP 62
17149: PUSH
17150: EMPTY
17151: ST_TO_ADDR
// mc_scan := [ ] ;
17152: LD_ADDR_EXP 73
17156: PUSH
17157: EMPTY
17158: ST_TO_ADDR
// mc_scan_area := [ ] ;
17159: LD_ADDR_EXP 75
17163: PUSH
17164: EMPTY
17165: ST_TO_ADDR
// mc_tech := [ ] ;
17166: LD_ADDR_EXP 77
17170: PUSH
17171: EMPTY
17172: ST_TO_ADDR
// mc_class := [ ] ;
17173: LD_ADDR_EXP 91
17177: PUSH
17178: EMPTY
17179: ST_TO_ADDR
// mc_class_case_use := [ ] ;
17180: LD_ADDR_EXP 92
17184: PUSH
17185: EMPTY
17186: ST_TO_ADDR
// end ;
17187: LD_VAR 0 1
17191: RET
// export function MC_Kill ( base ) ; begin
17192: LD_INT 0
17194: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
17195: LD_ADDR_EXP 50
17199: PUSH
17200: LD_EXP 50
17204: PPUSH
17205: LD_VAR 0 1
17209: PPUSH
17210: EMPTY
17211: PPUSH
17212: CALL_OW 1
17216: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17217: LD_ADDR_EXP 51
17221: PUSH
17222: LD_EXP 51
17226: PPUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: EMPTY
17233: PPUSH
17234: CALL_OW 1
17238: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17239: LD_ADDR_EXP 52
17243: PUSH
17244: LD_EXP 52
17248: PPUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: EMPTY
17255: PPUSH
17256: CALL_OW 1
17260: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17261: LD_ADDR_EXP 53
17265: PUSH
17266: LD_EXP 53
17270: PPUSH
17271: LD_VAR 0 1
17275: PPUSH
17276: EMPTY
17277: PPUSH
17278: CALL_OW 1
17282: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17283: LD_ADDR_EXP 54
17287: PUSH
17288: LD_EXP 54
17292: PPUSH
17293: LD_VAR 0 1
17297: PPUSH
17298: EMPTY
17299: PPUSH
17300: CALL_OW 1
17304: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17305: LD_ADDR_EXP 55
17309: PUSH
17310: LD_EXP 55
17314: PPUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: EMPTY
17321: PPUSH
17322: CALL_OW 1
17326: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17327: LD_ADDR_EXP 56
17331: PUSH
17332: LD_EXP 56
17336: PPUSH
17337: LD_VAR 0 1
17341: PPUSH
17342: EMPTY
17343: PPUSH
17344: CALL_OW 1
17348: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17349: LD_ADDR_EXP 57
17353: PUSH
17354: LD_EXP 57
17358: PPUSH
17359: LD_VAR 0 1
17363: PPUSH
17364: EMPTY
17365: PPUSH
17366: CALL_OW 1
17370: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17371: LD_ADDR_EXP 58
17375: PUSH
17376: LD_EXP 58
17380: PPUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: EMPTY
17387: PPUSH
17388: CALL_OW 1
17392: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17393: LD_ADDR_EXP 59
17397: PUSH
17398: LD_EXP 59
17402: PPUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: EMPTY
17409: PPUSH
17410: CALL_OW 1
17414: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17415: LD_ADDR_EXP 60
17419: PUSH
17420: LD_EXP 60
17424: PPUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: EMPTY
17431: PPUSH
17432: CALL_OW 1
17436: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17437: LD_ADDR_EXP 61
17441: PUSH
17442: LD_EXP 61
17446: PPUSH
17447: LD_VAR 0 1
17451: PPUSH
17452: LD_INT 0
17454: PPUSH
17455: CALL_OW 1
17459: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17460: LD_ADDR_EXP 62
17464: PUSH
17465: LD_EXP 62
17469: PPUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: EMPTY
17476: PPUSH
17477: CALL_OW 1
17481: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17482: LD_ADDR_EXP 63
17486: PUSH
17487: LD_EXP 63
17491: PPUSH
17492: LD_VAR 0 1
17496: PPUSH
17497: EMPTY
17498: PPUSH
17499: CALL_OW 1
17503: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17504: LD_ADDR_EXP 64
17508: PUSH
17509: LD_EXP 64
17513: PPUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: EMPTY
17520: PPUSH
17521: CALL_OW 1
17525: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17526: LD_ADDR_EXP 65
17530: PUSH
17531: LD_EXP 65
17535: PPUSH
17536: LD_VAR 0 1
17540: PPUSH
17541: EMPTY
17542: PPUSH
17543: CALL_OW 1
17547: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17548: LD_ADDR_EXP 66
17552: PUSH
17553: LD_EXP 66
17557: PPUSH
17558: LD_VAR 0 1
17562: PPUSH
17563: EMPTY
17564: PPUSH
17565: CALL_OW 1
17569: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17570: LD_ADDR_EXP 67
17574: PUSH
17575: LD_EXP 67
17579: PPUSH
17580: LD_VAR 0 1
17584: PPUSH
17585: EMPTY
17586: PPUSH
17587: CALL_OW 1
17591: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17592: LD_ADDR_EXP 68
17596: PUSH
17597: LD_EXP 68
17601: PPUSH
17602: LD_VAR 0 1
17606: PPUSH
17607: EMPTY
17608: PPUSH
17609: CALL_OW 1
17613: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17614: LD_ADDR_EXP 69
17618: PUSH
17619: LD_EXP 69
17623: PPUSH
17624: LD_VAR 0 1
17628: PPUSH
17629: EMPTY
17630: PPUSH
17631: CALL_OW 1
17635: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17636: LD_ADDR_EXP 70
17640: PUSH
17641: LD_EXP 70
17645: PPUSH
17646: LD_VAR 0 1
17650: PPUSH
17651: EMPTY
17652: PPUSH
17653: CALL_OW 1
17657: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17658: LD_ADDR_EXP 71
17662: PUSH
17663: LD_EXP 71
17667: PPUSH
17668: LD_VAR 0 1
17672: PPUSH
17673: EMPTY
17674: PPUSH
17675: CALL_OW 1
17679: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17680: LD_ADDR_EXP 72
17684: PUSH
17685: LD_EXP 72
17689: PPUSH
17690: LD_VAR 0 1
17694: PPUSH
17695: EMPTY
17696: PPUSH
17697: CALL_OW 1
17701: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17702: LD_ADDR_EXP 73
17706: PUSH
17707: LD_EXP 73
17711: PPUSH
17712: LD_VAR 0 1
17716: PPUSH
17717: EMPTY
17718: PPUSH
17719: CALL_OW 1
17723: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17724: LD_ADDR_EXP 74
17728: PUSH
17729: LD_EXP 74
17733: PPUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: EMPTY
17740: PPUSH
17741: CALL_OW 1
17745: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17746: LD_ADDR_EXP 75
17750: PUSH
17751: LD_EXP 75
17755: PPUSH
17756: LD_VAR 0 1
17760: PPUSH
17761: EMPTY
17762: PPUSH
17763: CALL_OW 1
17767: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17768: LD_ADDR_EXP 77
17772: PUSH
17773: LD_EXP 77
17777: PPUSH
17778: LD_VAR 0 1
17782: PPUSH
17783: EMPTY
17784: PPUSH
17785: CALL_OW 1
17789: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17790: LD_ADDR_EXP 79
17794: PUSH
17795: LD_EXP 79
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: EMPTY
17806: PPUSH
17807: CALL_OW 1
17811: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17812: LD_ADDR_EXP 80
17816: PUSH
17817: LD_EXP 80
17821: PPUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: EMPTY
17828: PPUSH
17829: CALL_OW 1
17833: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17834: LD_ADDR_EXP 81
17838: PUSH
17839: LD_EXP 81
17843: PPUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: EMPTY
17850: PPUSH
17851: CALL_OW 1
17855: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17856: LD_ADDR_EXP 82
17860: PUSH
17861: LD_EXP 82
17865: PPUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: EMPTY
17872: PPUSH
17873: CALL_OW 1
17877: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17878: LD_ADDR_EXP 83
17882: PUSH
17883: LD_EXP 83
17887: PPUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: EMPTY
17894: PPUSH
17895: CALL_OW 1
17899: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17900: LD_ADDR_EXP 84
17904: PUSH
17905: LD_EXP 84
17909: PPUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: EMPTY
17916: PPUSH
17917: CALL_OW 1
17921: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17922: LD_ADDR_EXP 85
17926: PUSH
17927: LD_EXP 85
17931: PPUSH
17932: LD_VAR 0 1
17936: PPUSH
17937: EMPTY
17938: PPUSH
17939: CALL_OW 1
17943: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17944: LD_ADDR_EXP 86
17948: PUSH
17949: LD_EXP 86
17953: PPUSH
17954: LD_VAR 0 1
17958: PPUSH
17959: EMPTY
17960: PPUSH
17961: CALL_OW 1
17965: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17966: LD_ADDR_EXP 87
17970: PUSH
17971: LD_EXP 87
17975: PPUSH
17976: LD_VAR 0 1
17980: PPUSH
17981: EMPTY
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17988: LD_ADDR_EXP 88
17992: PUSH
17993: LD_EXP 88
17997: PPUSH
17998: LD_VAR 0 1
18002: PPUSH
18003: EMPTY
18004: PPUSH
18005: CALL_OW 1
18009: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18010: LD_ADDR_EXP 89
18014: PUSH
18015: LD_EXP 89
18019: PPUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: EMPTY
18026: PPUSH
18027: CALL_OW 1
18031: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18032: LD_ADDR_EXP 90
18036: PUSH
18037: LD_EXP 90
18041: PPUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: EMPTY
18048: PPUSH
18049: CALL_OW 1
18053: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18054: LD_ADDR_EXP 91
18058: PUSH
18059: LD_EXP 91
18063: PPUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: EMPTY
18070: PPUSH
18071: CALL_OW 1
18075: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18076: LD_ADDR_EXP 92
18080: PUSH
18081: LD_EXP 92
18085: PPUSH
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_INT 0
18093: PPUSH
18094: CALL_OW 1
18098: ST_TO_ADDR
// end ;
18099: LD_VAR 0 2
18103: RET
// export function MC_Add ( side , units ) ; var base ; begin
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
// base := mc_bases + 1 ;
18108: LD_ADDR_VAR 0 4
18112: PUSH
18113: LD_EXP 50
18117: PUSH
18118: LD_INT 1
18120: PLUS
18121: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
18122: LD_ADDR_EXP 76
18126: PUSH
18127: LD_EXP 76
18131: PPUSH
18132: LD_VAR 0 4
18136: PPUSH
18137: LD_VAR 0 1
18141: PPUSH
18142: CALL_OW 1
18146: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
18147: LD_ADDR_EXP 50
18151: PUSH
18152: LD_EXP 50
18156: PPUSH
18157: LD_VAR 0 4
18161: PPUSH
18162: LD_VAR 0 2
18166: PPUSH
18167: CALL_OW 1
18171: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
18172: LD_ADDR_EXP 51
18176: PUSH
18177: LD_EXP 51
18181: PPUSH
18182: LD_VAR 0 4
18186: PPUSH
18187: EMPTY
18188: PPUSH
18189: CALL_OW 1
18193: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
18194: LD_ADDR_EXP 52
18198: PUSH
18199: LD_EXP 52
18203: PPUSH
18204: LD_VAR 0 4
18208: PPUSH
18209: EMPTY
18210: PPUSH
18211: CALL_OW 1
18215: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
18216: LD_ADDR_EXP 53
18220: PUSH
18221: LD_EXP 53
18225: PPUSH
18226: LD_VAR 0 4
18230: PPUSH
18231: EMPTY
18232: PPUSH
18233: CALL_OW 1
18237: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
18238: LD_ADDR_EXP 54
18242: PUSH
18243: LD_EXP 54
18247: PPUSH
18248: LD_VAR 0 4
18252: PPUSH
18253: EMPTY
18254: PPUSH
18255: CALL_OW 1
18259: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18260: LD_ADDR_EXP 55
18264: PUSH
18265: LD_EXP 55
18269: PPUSH
18270: LD_VAR 0 4
18274: PPUSH
18275: EMPTY
18276: PPUSH
18277: CALL_OW 1
18281: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18282: LD_ADDR_EXP 56
18286: PUSH
18287: LD_EXP 56
18291: PPUSH
18292: LD_VAR 0 4
18296: PPUSH
18297: EMPTY
18298: PPUSH
18299: CALL_OW 1
18303: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18304: LD_ADDR_EXP 57
18308: PUSH
18309: LD_EXP 57
18313: PPUSH
18314: LD_VAR 0 4
18318: PPUSH
18319: EMPTY
18320: PPUSH
18321: CALL_OW 1
18325: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18326: LD_ADDR_EXP 58
18330: PUSH
18331: LD_EXP 58
18335: PPUSH
18336: LD_VAR 0 4
18340: PPUSH
18341: EMPTY
18342: PPUSH
18343: CALL_OW 1
18347: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18348: LD_ADDR_EXP 59
18352: PUSH
18353: LD_EXP 59
18357: PPUSH
18358: LD_VAR 0 4
18362: PPUSH
18363: EMPTY
18364: PPUSH
18365: CALL_OW 1
18369: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18370: LD_ADDR_EXP 60
18374: PUSH
18375: LD_EXP 60
18379: PPUSH
18380: LD_VAR 0 4
18384: PPUSH
18385: EMPTY
18386: PPUSH
18387: CALL_OW 1
18391: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18392: LD_ADDR_EXP 61
18396: PUSH
18397: LD_EXP 61
18401: PPUSH
18402: LD_VAR 0 4
18406: PPUSH
18407: LD_INT 0
18409: PPUSH
18410: CALL_OW 1
18414: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18415: LD_ADDR_EXP 62
18419: PUSH
18420: LD_EXP 62
18424: PPUSH
18425: LD_VAR 0 4
18429: PPUSH
18430: EMPTY
18431: PPUSH
18432: CALL_OW 1
18436: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18437: LD_ADDR_EXP 63
18441: PUSH
18442: LD_EXP 63
18446: PPUSH
18447: LD_VAR 0 4
18451: PPUSH
18452: EMPTY
18453: PPUSH
18454: CALL_OW 1
18458: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18459: LD_ADDR_EXP 64
18463: PUSH
18464: LD_EXP 64
18468: PPUSH
18469: LD_VAR 0 4
18473: PPUSH
18474: EMPTY
18475: PPUSH
18476: CALL_OW 1
18480: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18481: LD_ADDR_EXP 65
18485: PUSH
18486: LD_EXP 65
18490: PPUSH
18491: LD_VAR 0 4
18495: PPUSH
18496: EMPTY
18497: PPUSH
18498: CALL_OW 1
18502: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18503: LD_ADDR_EXP 66
18507: PUSH
18508: LD_EXP 66
18512: PPUSH
18513: LD_VAR 0 4
18517: PPUSH
18518: EMPTY
18519: PPUSH
18520: CALL_OW 1
18524: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18525: LD_ADDR_EXP 67
18529: PUSH
18530: LD_EXP 67
18534: PPUSH
18535: LD_VAR 0 4
18539: PPUSH
18540: EMPTY
18541: PPUSH
18542: CALL_OW 1
18546: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18547: LD_ADDR_EXP 68
18551: PUSH
18552: LD_EXP 68
18556: PPUSH
18557: LD_VAR 0 4
18561: PPUSH
18562: EMPTY
18563: PPUSH
18564: CALL_OW 1
18568: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18569: LD_ADDR_EXP 69
18573: PUSH
18574: LD_EXP 69
18578: PPUSH
18579: LD_VAR 0 4
18583: PPUSH
18584: EMPTY
18585: PPUSH
18586: CALL_OW 1
18590: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18591: LD_ADDR_EXP 70
18595: PUSH
18596: LD_EXP 70
18600: PPUSH
18601: LD_VAR 0 4
18605: PPUSH
18606: EMPTY
18607: PPUSH
18608: CALL_OW 1
18612: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18613: LD_ADDR_EXP 71
18617: PUSH
18618: LD_EXP 71
18622: PPUSH
18623: LD_VAR 0 4
18627: PPUSH
18628: EMPTY
18629: PPUSH
18630: CALL_OW 1
18634: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18635: LD_ADDR_EXP 72
18639: PUSH
18640: LD_EXP 72
18644: PPUSH
18645: LD_VAR 0 4
18649: PPUSH
18650: EMPTY
18651: PPUSH
18652: CALL_OW 1
18656: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18657: LD_ADDR_EXP 73
18661: PUSH
18662: LD_EXP 73
18666: PPUSH
18667: LD_VAR 0 4
18671: PPUSH
18672: EMPTY
18673: PPUSH
18674: CALL_OW 1
18678: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18679: LD_ADDR_EXP 74
18683: PUSH
18684: LD_EXP 74
18688: PPUSH
18689: LD_VAR 0 4
18693: PPUSH
18694: EMPTY
18695: PPUSH
18696: CALL_OW 1
18700: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18701: LD_ADDR_EXP 75
18705: PUSH
18706: LD_EXP 75
18710: PPUSH
18711: LD_VAR 0 4
18715: PPUSH
18716: EMPTY
18717: PPUSH
18718: CALL_OW 1
18722: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18723: LD_ADDR_EXP 77
18727: PUSH
18728: LD_EXP 77
18732: PPUSH
18733: LD_VAR 0 4
18737: PPUSH
18738: EMPTY
18739: PPUSH
18740: CALL_OW 1
18744: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18745: LD_ADDR_EXP 79
18749: PUSH
18750: LD_EXP 79
18754: PPUSH
18755: LD_VAR 0 4
18759: PPUSH
18760: EMPTY
18761: PPUSH
18762: CALL_OW 1
18766: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18767: LD_ADDR_EXP 80
18771: PUSH
18772: LD_EXP 80
18776: PPUSH
18777: LD_VAR 0 4
18781: PPUSH
18782: EMPTY
18783: PPUSH
18784: CALL_OW 1
18788: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18789: LD_ADDR_EXP 81
18793: PUSH
18794: LD_EXP 81
18798: PPUSH
18799: LD_VAR 0 4
18803: PPUSH
18804: EMPTY
18805: PPUSH
18806: CALL_OW 1
18810: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18811: LD_ADDR_EXP 82
18815: PUSH
18816: LD_EXP 82
18820: PPUSH
18821: LD_VAR 0 4
18825: PPUSH
18826: EMPTY
18827: PPUSH
18828: CALL_OW 1
18832: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18833: LD_ADDR_EXP 83
18837: PUSH
18838: LD_EXP 83
18842: PPUSH
18843: LD_VAR 0 4
18847: PPUSH
18848: EMPTY
18849: PPUSH
18850: CALL_OW 1
18854: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18855: LD_ADDR_EXP 84
18859: PUSH
18860: LD_EXP 84
18864: PPUSH
18865: LD_VAR 0 4
18869: PPUSH
18870: EMPTY
18871: PPUSH
18872: CALL_OW 1
18876: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18877: LD_ADDR_EXP 85
18881: PUSH
18882: LD_EXP 85
18886: PPUSH
18887: LD_VAR 0 4
18891: PPUSH
18892: EMPTY
18893: PPUSH
18894: CALL_OW 1
18898: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18899: LD_ADDR_EXP 86
18903: PUSH
18904: LD_EXP 86
18908: PPUSH
18909: LD_VAR 0 4
18913: PPUSH
18914: EMPTY
18915: PPUSH
18916: CALL_OW 1
18920: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18921: LD_ADDR_EXP 87
18925: PUSH
18926: LD_EXP 87
18930: PPUSH
18931: LD_VAR 0 4
18935: PPUSH
18936: EMPTY
18937: PPUSH
18938: CALL_OW 1
18942: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18943: LD_ADDR_EXP 88
18947: PUSH
18948: LD_EXP 88
18952: PPUSH
18953: LD_VAR 0 4
18957: PPUSH
18958: EMPTY
18959: PPUSH
18960: CALL_OW 1
18964: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18965: LD_ADDR_EXP 89
18969: PUSH
18970: LD_EXP 89
18974: PPUSH
18975: LD_VAR 0 4
18979: PPUSH
18980: EMPTY
18981: PPUSH
18982: CALL_OW 1
18986: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18987: LD_ADDR_EXP 90
18991: PUSH
18992: LD_EXP 90
18996: PPUSH
18997: LD_VAR 0 4
19001: PPUSH
19002: EMPTY
19003: PPUSH
19004: CALL_OW 1
19008: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
19009: LD_ADDR_EXP 91
19013: PUSH
19014: LD_EXP 91
19018: PPUSH
19019: LD_VAR 0 4
19023: PPUSH
19024: EMPTY
19025: PPUSH
19026: CALL_OW 1
19030: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
19031: LD_ADDR_EXP 92
19035: PUSH
19036: LD_EXP 92
19040: PPUSH
19041: LD_VAR 0 4
19045: PPUSH
19046: LD_INT 0
19048: PPUSH
19049: CALL_OW 1
19053: ST_TO_ADDR
// result := base ;
19054: LD_ADDR_VAR 0 3
19058: PUSH
19059: LD_VAR 0 4
19063: ST_TO_ADDR
// end ;
19064: LD_VAR 0 3
19068: RET
// export function MC_Start ( ) ; var i ; begin
19069: LD_INT 0
19071: PPUSH
19072: PPUSH
// for i = 1 to mc_bases do
19073: LD_ADDR_VAR 0 2
19077: PUSH
19078: DOUBLE
19079: LD_INT 1
19081: DEC
19082: ST_TO_ADDR
19083: LD_EXP 50
19087: PUSH
19088: FOR_TO
19089: IFFALSE 20166
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
19091: LD_ADDR_EXP 50
19095: PUSH
19096: LD_EXP 50
19100: PPUSH
19101: LD_VAR 0 2
19105: PPUSH
19106: LD_EXP 50
19110: PUSH
19111: LD_VAR 0 2
19115: ARRAY
19116: PUSH
19117: LD_INT 0
19119: DIFF
19120: PPUSH
19121: CALL_OW 1
19125: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
19126: LD_ADDR_EXP 51
19130: PUSH
19131: LD_EXP 51
19135: PPUSH
19136: LD_VAR 0 2
19140: PPUSH
19141: EMPTY
19142: PPUSH
19143: CALL_OW 1
19147: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
19148: LD_ADDR_EXP 52
19152: PUSH
19153: LD_EXP 52
19157: PPUSH
19158: LD_VAR 0 2
19162: PPUSH
19163: EMPTY
19164: PPUSH
19165: CALL_OW 1
19169: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
19170: LD_ADDR_EXP 53
19174: PUSH
19175: LD_EXP 53
19179: PPUSH
19180: LD_VAR 0 2
19184: PPUSH
19185: EMPTY
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
19192: LD_ADDR_EXP 54
19196: PUSH
19197: LD_EXP 54
19201: PPUSH
19202: LD_VAR 0 2
19206: PPUSH
19207: EMPTY
19208: PUSH
19209: EMPTY
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PPUSH
19215: CALL_OW 1
19219: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
19220: LD_ADDR_EXP 55
19224: PUSH
19225: LD_EXP 55
19229: PPUSH
19230: LD_VAR 0 2
19234: PPUSH
19235: EMPTY
19236: PPUSH
19237: CALL_OW 1
19241: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
19242: LD_ADDR_EXP 82
19246: PUSH
19247: LD_EXP 82
19251: PPUSH
19252: LD_VAR 0 2
19256: PPUSH
19257: EMPTY
19258: PPUSH
19259: CALL_OW 1
19263: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19264: LD_ADDR_EXP 56
19268: PUSH
19269: LD_EXP 56
19273: PPUSH
19274: LD_VAR 0 2
19278: PPUSH
19279: EMPTY
19280: PPUSH
19281: CALL_OW 1
19285: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19286: LD_ADDR_EXP 57
19290: PUSH
19291: LD_EXP 57
19295: PPUSH
19296: LD_VAR 0 2
19300: PPUSH
19301: EMPTY
19302: PPUSH
19303: CALL_OW 1
19307: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19308: LD_ADDR_EXP 58
19312: PUSH
19313: LD_EXP 58
19317: PPUSH
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_EXP 50
19327: PUSH
19328: LD_VAR 0 2
19332: ARRAY
19333: PPUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 30
19339: PUSH
19340: LD_INT 32
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 30
19349: PUSH
19350: LD_INT 33
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: LIST
19361: PPUSH
19362: CALL_OW 72
19366: PPUSH
19367: CALL_OW 1
19371: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19372: LD_ADDR_EXP 59
19376: PUSH
19377: LD_EXP 59
19381: PPUSH
19382: LD_VAR 0 2
19386: PPUSH
19387: LD_EXP 50
19391: PUSH
19392: LD_VAR 0 2
19396: ARRAY
19397: PPUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 30
19403: PUSH
19404: LD_INT 32
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 30
19413: PUSH
19414: LD_INT 31
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 58
19428: PUSH
19429: EMPTY
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL_OW 72
19440: PPUSH
19441: CALL_OW 1
19445: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19446: LD_ADDR_EXP 60
19450: PUSH
19451: LD_EXP 60
19455: PPUSH
19456: LD_VAR 0 2
19460: PPUSH
19461: EMPTY
19462: PPUSH
19463: CALL_OW 1
19467: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19468: LD_ADDR_EXP 64
19472: PUSH
19473: LD_EXP 64
19477: PPUSH
19478: LD_VAR 0 2
19482: PPUSH
19483: EMPTY
19484: PPUSH
19485: CALL_OW 1
19489: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19490: LD_ADDR_EXP 63
19494: PUSH
19495: LD_EXP 63
19499: PPUSH
19500: LD_VAR 0 2
19504: PPUSH
19505: EMPTY
19506: PPUSH
19507: CALL_OW 1
19511: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19512: LD_ADDR_EXP 65
19516: PUSH
19517: LD_EXP 65
19521: PPUSH
19522: LD_VAR 0 2
19526: PPUSH
19527: EMPTY
19528: PPUSH
19529: CALL_OW 1
19533: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19534: LD_ADDR_EXP 66
19538: PUSH
19539: LD_EXP 66
19543: PPUSH
19544: LD_VAR 0 2
19548: PPUSH
19549: EMPTY
19550: PPUSH
19551: CALL_OW 1
19555: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19556: LD_ADDR_EXP 67
19560: PUSH
19561: LD_EXP 67
19565: PPUSH
19566: LD_VAR 0 2
19570: PPUSH
19571: EMPTY
19572: PPUSH
19573: CALL_OW 1
19577: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
19578: LD_ADDR_EXP 68
19582: PUSH
19583: LD_EXP 68
19587: PPUSH
19588: LD_VAR 0 2
19592: PPUSH
19593: EMPTY
19594: PPUSH
19595: CALL_OW 1
19599: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
19600: LD_ADDR_EXP 69
19604: PUSH
19605: LD_EXP 69
19609: PPUSH
19610: LD_VAR 0 2
19614: PPUSH
19615: EMPTY
19616: PPUSH
19617: CALL_OW 1
19621: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
19622: LD_ADDR_EXP 70
19626: PUSH
19627: LD_EXP 70
19631: PPUSH
19632: LD_VAR 0 2
19636: PPUSH
19637: EMPTY
19638: PPUSH
19639: CALL_OW 1
19643: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
19644: LD_ADDR_EXP 71
19648: PUSH
19649: LD_EXP 71
19653: PPUSH
19654: LD_VAR 0 2
19658: PPUSH
19659: EMPTY
19660: PPUSH
19661: CALL_OW 1
19665: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
19666: LD_ADDR_EXP 72
19670: PUSH
19671: LD_EXP 72
19675: PPUSH
19676: LD_VAR 0 2
19680: PPUSH
19681: EMPTY
19682: PPUSH
19683: CALL_OW 1
19687: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
19688: LD_ADDR_EXP 61
19692: PUSH
19693: LD_EXP 61
19697: PPUSH
19698: LD_VAR 0 2
19702: PPUSH
19703: LD_INT 0
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
19711: LD_ADDR_EXP 74
19715: PUSH
19716: LD_EXP 74
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: LD_INT 0
19728: PPUSH
19729: CALL_OW 1
19733: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
19734: LD_ADDR_EXP 62
19738: PUSH
19739: LD_EXP 62
19743: PPUSH
19744: LD_VAR 0 2
19748: PPUSH
19749: EMPTY
19750: PPUSH
19751: CALL_OW 1
19755: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
19756: LD_ADDR_EXP 73
19760: PUSH
19761: LD_EXP 73
19765: PPUSH
19766: LD_VAR 0 2
19770: PPUSH
19771: LD_INT 0
19773: PPUSH
19774: CALL_OW 1
19778: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
19779: LD_ADDR_EXP 75
19783: PUSH
19784: LD_EXP 75
19788: PPUSH
19789: LD_VAR 0 2
19793: PPUSH
19794: EMPTY
19795: PPUSH
19796: CALL_OW 1
19800: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
19801: LD_ADDR_EXP 78
19805: PUSH
19806: LD_EXP 78
19810: PPUSH
19811: LD_VAR 0 2
19815: PPUSH
19816: LD_INT 0
19818: PPUSH
19819: CALL_OW 1
19823: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
19824: LD_ADDR_EXP 79
19828: PUSH
19829: LD_EXP 79
19833: PPUSH
19834: LD_VAR 0 2
19838: PPUSH
19839: EMPTY
19840: PPUSH
19841: CALL_OW 1
19845: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
19846: LD_ADDR_EXP 80
19850: PUSH
19851: LD_EXP 80
19855: PPUSH
19856: LD_VAR 0 2
19860: PPUSH
19861: EMPTY
19862: PPUSH
19863: CALL_OW 1
19867: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
19868: LD_ADDR_EXP 81
19872: PUSH
19873: LD_EXP 81
19877: PPUSH
19878: LD_VAR 0 2
19882: PPUSH
19883: EMPTY
19884: PPUSH
19885: CALL_OW 1
19889: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
19890: LD_ADDR_EXP 83
19894: PUSH
19895: LD_EXP 83
19899: PPUSH
19900: LD_VAR 0 2
19904: PPUSH
19905: LD_EXP 50
19909: PUSH
19910: LD_VAR 0 2
19914: ARRAY
19915: PPUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 30
19921: PUSH
19922: LD_INT 6
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: LD_INT 7
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 30
19941: PUSH
19942: LD_INT 8
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: PPUSH
19955: CALL_OW 72
19959: PPUSH
19960: CALL_OW 1
19964: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
19965: LD_ADDR_EXP 84
19969: PUSH
19970: LD_EXP 84
19974: PPUSH
19975: LD_VAR 0 2
19979: PPUSH
19980: EMPTY
19981: PPUSH
19982: CALL_OW 1
19986: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
19987: LD_ADDR_EXP 85
19991: PUSH
19992: LD_EXP 85
19996: PPUSH
19997: LD_VAR 0 2
20001: PPUSH
20002: EMPTY
20003: PPUSH
20004: CALL_OW 1
20008: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
20009: LD_ADDR_EXP 86
20013: PUSH
20014: LD_EXP 86
20018: PPUSH
20019: LD_VAR 0 2
20023: PPUSH
20024: EMPTY
20025: PPUSH
20026: CALL_OW 1
20030: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
20031: LD_ADDR_EXP 87
20035: PUSH
20036: LD_EXP 87
20040: PPUSH
20041: LD_VAR 0 2
20045: PPUSH
20046: EMPTY
20047: PPUSH
20048: CALL_OW 1
20052: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
20053: LD_ADDR_EXP 88
20057: PUSH
20058: LD_EXP 88
20062: PPUSH
20063: LD_VAR 0 2
20067: PPUSH
20068: EMPTY
20069: PPUSH
20070: CALL_OW 1
20074: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
20075: LD_ADDR_EXP 89
20079: PUSH
20080: LD_EXP 89
20084: PPUSH
20085: LD_VAR 0 2
20089: PPUSH
20090: EMPTY
20091: PPUSH
20092: CALL_OW 1
20096: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
20097: LD_ADDR_EXP 90
20101: PUSH
20102: LD_EXP 90
20106: PPUSH
20107: LD_VAR 0 2
20111: PPUSH
20112: EMPTY
20113: PPUSH
20114: CALL_OW 1
20118: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
20119: LD_ADDR_EXP 91
20123: PUSH
20124: LD_EXP 91
20128: PPUSH
20129: LD_VAR 0 2
20133: PPUSH
20134: EMPTY
20135: PPUSH
20136: CALL_OW 1
20140: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
20141: LD_ADDR_EXP 92
20145: PUSH
20146: LD_EXP 92
20150: PPUSH
20151: LD_VAR 0 2
20155: PPUSH
20156: LD_INT 0
20158: PPUSH
20159: CALL_OW 1
20163: ST_TO_ADDR
// end ;
20164: GO 19088
20166: POP
20167: POP
// MC_InitSides ( ) ;
20168: CALL 20454 0 0
// MC_InitResearch ( ) ;
20172: CALL 20193 0 0
// CustomInitMacro ( ) ;
20176: CALL 300 0 0
// skirmish := true ;
20180: LD_ADDR_EXP 48
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// end ;
20188: LD_VAR 0 1
20192: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
20193: LD_INT 0
20195: PPUSH
20196: PPUSH
20197: PPUSH
20198: PPUSH
20199: PPUSH
20200: PPUSH
// if not mc_bases then
20201: LD_EXP 50
20205: NOT
20206: IFFALSE 20210
// exit ;
20208: GO 20449
// for i = 1 to 8 do
20210: LD_ADDR_VAR 0 2
20214: PUSH
20215: DOUBLE
20216: LD_INT 1
20218: DEC
20219: ST_TO_ADDR
20220: LD_INT 8
20222: PUSH
20223: FOR_TO
20224: IFFALSE 20250
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
20226: LD_ADDR_EXP 77
20230: PUSH
20231: LD_EXP 77
20235: PPUSH
20236: LD_VAR 0 2
20240: PPUSH
20241: EMPTY
20242: PPUSH
20243: CALL_OW 1
20247: ST_TO_ADDR
20248: GO 20223
20250: POP
20251: POP
// tmp := [ ] ;
20252: LD_ADDR_VAR 0 5
20256: PUSH
20257: EMPTY
20258: ST_TO_ADDR
// for i = 1 to mc_sides do
20259: LD_ADDR_VAR 0 2
20263: PUSH
20264: DOUBLE
20265: LD_INT 1
20267: DEC
20268: ST_TO_ADDR
20269: LD_EXP 76
20273: PUSH
20274: FOR_TO
20275: IFFALSE 20333
// if not mc_sides [ i ] in tmp then
20277: LD_EXP 76
20281: PUSH
20282: LD_VAR 0 2
20286: ARRAY
20287: PUSH
20288: LD_VAR 0 5
20292: IN
20293: NOT
20294: IFFALSE 20331
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20296: LD_ADDR_VAR 0 5
20300: PUSH
20301: LD_VAR 0 5
20305: PPUSH
20306: LD_VAR 0 5
20310: PUSH
20311: LD_INT 1
20313: PLUS
20314: PPUSH
20315: LD_EXP 76
20319: PUSH
20320: LD_VAR 0 2
20324: ARRAY
20325: PPUSH
20326: CALL_OW 2
20330: ST_TO_ADDR
20331: GO 20274
20333: POP
20334: POP
// if not tmp then
20335: LD_VAR 0 5
20339: NOT
20340: IFFALSE 20344
// exit ;
20342: GO 20449
// for j in tmp do
20344: LD_ADDR_VAR 0 3
20348: PUSH
20349: LD_VAR 0 5
20353: PUSH
20354: FOR_IN
20355: IFFALSE 20447
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20357: LD_ADDR_VAR 0 6
20361: PUSH
20362: LD_INT 22
20364: PUSH
20365: LD_VAR 0 3
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: ST_TO_ADDR
// if not un then
20379: LD_VAR 0 6
20383: NOT
20384: IFFALSE 20388
// continue ;
20386: GO 20354
// nation := GetNation ( un [ 1 ] ) ;
20388: LD_ADDR_VAR 0 4
20392: PUSH
20393: LD_VAR 0 6
20397: PUSH
20398: LD_INT 1
20400: ARRAY
20401: PPUSH
20402: CALL_OW 248
20406: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20407: LD_ADDR_EXP 77
20411: PUSH
20412: LD_EXP 77
20416: PPUSH
20417: LD_VAR 0 3
20421: PPUSH
20422: LD_VAR 0 3
20426: PPUSH
20427: LD_VAR 0 4
20431: PPUSH
20432: LD_INT 1
20434: PPUSH
20435: CALL 47163 0 3
20439: PPUSH
20440: CALL_OW 1
20444: ST_TO_ADDR
// end ;
20445: GO 20354
20447: POP
20448: POP
// end ;
20449: LD_VAR 0 1
20453: RET
// export function MC_InitSides ( ) ; var i ; begin
20454: LD_INT 0
20456: PPUSH
20457: PPUSH
// if not mc_bases then
20458: LD_EXP 50
20462: NOT
20463: IFFALSE 20467
// exit ;
20465: GO 20541
// for i = 1 to mc_bases do
20467: LD_ADDR_VAR 0 2
20471: PUSH
20472: DOUBLE
20473: LD_INT 1
20475: DEC
20476: ST_TO_ADDR
20477: LD_EXP 50
20481: PUSH
20482: FOR_TO
20483: IFFALSE 20539
// if mc_bases [ i ] then
20485: LD_EXP 50
20489: PUSH
20490: LD_VAR 0 2
20494: ARRAY
20495: IFFALSE 20537
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20497: LD_ADDR_EXP 76
20501: PUSH
20502: LD_EXP 76
20506: PPUSH
20507: LD_VAR 0 2
20511: PPUSH
20512: LD_EXP 50
20516: PUSH
20517: LD_VAR 0 2
20521: ARRAY
20522: PUSH
20523: LD_INT 1
20525: ARRAY
20526: PPUSH
20527: CALL_OW 255
20531: PPUSH
20532: CALL_OW 1
20536: ST_TO_ADDR
20537: GO 20482
20539: POP
20540: POP
// end ;
20541: LD_VAR 0 1
20545: RET
// every 0 0$01 trigger skirmish do
20546: LD_EXP 48
20550: IFFALSE 20704
20552: GO 20554
20554: DISABLE
// begin enable ;
20555: ENABLE
// MC_CheckBuildings ( ) ;
20556: CALL 25202 0 0
// MC_CheckPeopleLife ( ) ;
20560: CALL 25327 0 0
// RaiseSailEvent ( 100 ) ;
20564: LD_INT 100
20566: PPUSH
20567: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20571: LD_INT 103
20573: PPUSH
20574: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
20578: LD_INT 104
20580: PPUSH
20581: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
20585: LD_INT 105
20587: PPUSH
20588: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
20592: LD_INT 106
20594: PPUSH
20595: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
20599: LD_INT 107
20601: PPUSH
20602: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
20606: LD_INT 108
20608: PPUSH
20609: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
20613: LD_INT 109
20615: PPUSH
20616: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
20620: LD_INT 110
20622: PPUSH
20623: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
20627: LD_INT 111
20629: PPUSH
20630: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
20634: LD_INT 112
20636: PPUSH
20637: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
20641: LD_INT 113
20643: PPUSH
20644: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
20648: LD_INT 120
20650: PPUSH
20651: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
20655: LD_INT 121
20657: PPUSH
20658: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
20662: LD_INT 122
20664: PPUSH
20665: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
20669: LD_INT 123
20671: PPUSH
20672: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
20676: LD_INT 124
20678: PPUSH
20679: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
20683: LD_INT 125
20685: PPUSH
20686: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
20690: LD_INT 126
20692: PPUSH
20693: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
20697: LD_INT 200
20699: PPUSH
20700: CALL_OW 427
// end ;
20704: END
// on SailEvent ( event ) do begin if event < 100 then
20705: LD_VAR 0 1
20709: PUSH
20710: LD_INT 100
20712: LESS
20713: IFFALSE 20724
// CustomEvent ( event ) ;
20715: LD_VAR 0 1
20719: PPUSH
20720: CALL 16223 0 1
// if event = 100 then
20724: LD_VAR 0 1
20728: PUSH
20729: LD_INT 100
20731: EQUAL
20732: IFFALSE 20738
// MC_ClassManager ( ) ;
20734: CALL 21130 0 0
// if event = 101 then
20738: LD_VAR 0 1
20742: PUSH
20743: LD_INT 101
20745: EQUAL
20746: IFFALSE 20752
// MC_RepairBuildings ( ) ;
20748: CALL 25923 0 0
// if event = 102 then
20752: LD_VAR 0 1
20756: PUSH
20757: LD_INT 102
20759: EQUAL
20760: IFFALSE 20766
// MC_Heal ( ) ;
20762: CALL 26655 0 0
// if event = 103 then
20766: LD_VAR 0 1
20770: PUSH
20771: LD_INT 103
20773: EQUAL
20774: IFFALSE 20780
// MC_Build ( ) ;
20776: CALL 27077 0 0
// if event = 104 then
20780: LD_VAR 0 1
20784: PUSH
20785: LD_INT 104
20787: EQUAL
20788: IFFALSE 20794
// MC_TurretWeapon ( ) ;
20790: CALL 28690 0 0
// if event = 105 then
20794: LD_VAR 0 1
20798: PUSH
20799: LD_INT 105
20801: EQUAL
20802: IFFALSE 20808
// MC_BuildUpgrade ( ) ;
20804: CALL 28241 0 0
// if event = 106 then
20808: LD_VAR 0 1
20812: PUSH
20813: LD_INT 106
20815: EQUAL
20816: IFFALSE 20822
// MC_PlantMines ( ) ;
20818: CALL 29120 0 0
// if event = 107 then
20822: LD_VAR 0 1
20826: PUSH
20827: LD_INT 107
20829: EQUAL
20830: IFFALSE 20836
// MC_CollectCrates ( ) ;
20832: CALL 30154 0 0
// if event = 108 then
20836: LD_VAR 0 1
20840: PUSH
20841: LD_INT 108
20843: EQUAL
20844: IFFALSE 20850
// MC_LinkRemoteControl ( ) ;
20846: CALL 31930 0 0
// if event = 109 then
20850: LD_VAR 0 1
20854: PUSH
20855: LD_INT 109
20857: EQUAL
20858: IFFALSE 20864
// MC_ProduceVehicle ( ) ;
20860: CALL 32111 0 0
// if event = 110 then
20864: LD_VAR 0 1
20868: PUSH
20869: LD_INT 110
20871: EQUAL
20872: IFFALSE 20878
// MC_SendAttack ( ) ;
20874: CALL 32577 0 0
// if event = 111 then
20878: LD_VAR 0 1
20882: PUSH
20883: LD_INT 111
20885: EQUAL
20886: IFFALSE 20892
// MC_Defend ( ) ;
20888: CALL 32685 0 0
// if event = 112 then
20892: LD_VAR 0 1
20896: PUSH
20897: LD_INT 112
20899: EQUAL
20900: IFFALSE 20906
// MC_Research ( ) ;
20902: CALL 33290 0 0
// if event = 113 then
20906: LD_VAR 0 1
20910: PUSH
20911: LD_INT 113
20913: EQUAL
20914: IFFALSE 20920
// MC_MinesTrigger ( ) ;
20916: CALL 34404 0 0
// if event = 120 then
20920: LD_VAR 0 1
20924: PUSH
20925: LD_INT 120
20927: EQUAL
20928: IFFALSE 20934
// MC_RepairVehicle ( ) ;
20930: CALL 34503 0 0
// if event = 121 then
20934: LD_VAR 0 1
20938: PUSH
20939: LD_INT 121
20941: EQUAL
20942: IFFALSE 20948
// MC_TameApe ( ) ;
20944: CALL 35233 0 0
// if event = 122 then
20948: LD_VAR 0 1
20952: PUSH
20953: LD_INT 122
20955: EQUAL
20956: IFFALSE 20962
// MC_ChangeApeClass ( ) ;
20958: CALL 36062 0 0
// if event = 123 then
20962: LD_VAR 0 1
20966: PUSH
20967: LD_INT 123
20969: EQUAL
20970: IFFALSE 20976
// MC_Bazooka ( ) ;
20972: CALL 36712 0 0
// if event = 124 then
20976: LD_VAR 0 1
20980: PUSH
20981: LD_INT 124
20983: EQUAL
20984: IFFALSE 20990
// MC_TeleportExit ( ) ;
20986: CALL 36910 0 0
// if event = 125 then
20990: LD_VAR 0 1
20994: PUSH
20995: LD_INT 125
20997: EQUAL
20998: IFFALSE 21004
// MC_Deposits ( ) ;
21000: CALL 37557 0 0
// if event = 126 then
21004: LD_VAR 0 1
21008: PUSH
21009: LD_INT 126
21011: EQUAL
21012: IFFALSE 21018
// MC_RemoteDriver ( ) ;
21014: CALL 38182 0 0
// if event = 200 then
21018: LD_VAR 0 1
21022: PUSH
21023: LD_INT 200
21025: EQUAL
21026: IFFALSE 21032
// MC_Idle ( ) ;
21028: CALL 40131 0 0
// end ;
21032: PPOPN 1
21034: END
// export function MC_Reset ( base , tag ) ; var i ; begin
21035: LD_INT 0
21037: PPUSH
21038: PPUSH
// if not mc_bases [ base ] or not tag then
21039: LD_EXP 50
21043: PUSH
21044: LD_VAR 0 1
21048: ARRAY
21049: NOT
21050: PUSH
21051: LD_VAR 0 2
21055: NOT
21056: OR
21057: IFFALSE 21061
// exit ;
21059: GO 21125
// for i in mc_bases [ base ] union mc_ape [ base ] do
21061: LD_ADDR_VAR 0 4
21065: PUSH
21066: LD_EXP 50
21070: PUSH
21071: LD_VAR 0 1
21075: ARRAY
21076: PUSH
21077: LD_EXP 79
21081: PUSH
21082: LD_VAR 0 1
21086: ARRAY
21087: UNION
21088: PUSH
21089: FOR_IN
21090: IFFALSE 21123
// if GetTag ( i ) = tag then
21092: LD_VAR 0 4
21096: PPUSH
21097: CALL_OW 110
21101: PUSH
21102: LD_VAR 0 2
21106: EQUAL
21107: IFFALSE 21121
// SetTag ( i , 0 ) ;
21109: LD_VAR 0 4
21113: PPUSH
21114: LD_INT 0
21116: PPUSH
21117: CALL_OW 109
21121: GO 21089
21123: POP
21124: POP
// end ;
21125: LD_VAR 0 3
21129: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
21134: PPUSH
21135: PPUSH
21136: PPUSH
21137: PPUSH
21138: PPUSH
21139: PPUSH
// if not mc_bases then
21140: LD_EXP 50
21144: NOT
21145: IFFALSE 21149
// exit ;
21147: GO 21607
// for i = 1 to mc_bases do
21149: LD_ADDR_VAR 0 2
21153: PUSH
21154: DOUBLE
21155: LD_INT 1
21157: DEC
21158: ST_TO_ADDR
21159: LD_EXP 50
21163: PUSH
21164: FOR_TO
21165: IFFALSE 21605
// begin tmp := MC_ClassCheckReq ( i ) ;
21167: LD_ADDR_VAR 0 4
21171: PUSH
21172: LD_VAR 0 2
21176: PPUSH
21177: CALL 21612 0 1
21181: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
21182: LD_ADDR_EXP 91
21186: PUSH
21187: LD_EXP 91
21191: PPUSH
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 4
21201: PPUSH
21202: CALL_OW 1
21206: ST_TO_ADDR
// if not tmp then
21207: LD_VAR 0 4
21211: NOT
21212: IFFALSE 21216
// continue ;
21214: GO 21164
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
21216: LD_ADDR_VAR 0 6
21220: PUSH
21221: LD_EXP 50
21225: PUSH
21226: LD_VAR 0 2
21230: ARRAY
21231: PPUSH
21232: LD_INT 2
21234: PUSH
21235: LD_INT 30
21237: PUSH
21238: LD_INT 4
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 30
21247: PUSH
21248: LD_INT 5
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: LIST
21259: PPUSH
21260: CALL_OW 72
21264: PUSH
21265: LD_EXP 50
21269: PUSH
21270: LD_VAR 0 2
21274: ARRAY
21275: PPUSH
21276: LD_INT 2
21278: PUSH
21279: LD_INT 30
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 30
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: PPUSH
21304: CALL_OW 72
21308: PUSH
21309: LD_EXP 50
21313: PUSH
21314: LD_VAR 0 2
21318: ARRAY
21319: PPUSH
21320: LD_INT 30
21322: PUSH
21323: LD_INT 3
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PPUSH
21330: CALL_OW 72
21334: PUSH
21335: LD_EXP 50
21339: PUSH
21340: LD_VAR 0 2
21344: ARRAY
21345: PPUSH
21346: LD_INT 2
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_INT 6
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 30
21361: PUSH
21362: LD_INT 7
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 30
21371: PUSH
21372: LD_INT 8
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: PPUSH
21385: CALL_OW 72
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: ST_TO_ADDR
// for j = 1 to 4 do
21396: LD_ADDR_VAR 0 3
21400: PUSH
21401: DOUBLE
21402: LD_INT 1
21404: DEC
21405: ST_TO_ADDR
21406: LD_INT 4
21408: PUSH
21409: FOR_TO
21410: IFFALSE 21601
// begin if not tmp [ j ] then
21412: LD_VAR 0 4
21416: PUSH
21417: LD_VAR 0 3
21421: ARRAY
21422: NOT
21423: IFFALSE 21427
// continue ;
21425: GO 21409
// for p in tmp [ j ] do
21427: LD_ADDR_VAR 0 5
21431: PUSH
21432: LD_VAR 0 4
21436: PUSH
21437: LD_VAR 0 3
21441: ARRAY
21442: PUSH
21443: FOR_IN
21444: IFFALSE 21597
// begin if not b [ j ] then
21446: LD_VAR 0 6
21450: PUSH
21451: LD_VAR 0 3
21455: ARRAY
21456: NOT
21457: IFFALSE 21461
// break ;
21459: GO 21597
// e := 0 ;
21461: LD_ADDR_VAR 0 7
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// for k in b [ j ] do
21469: LD_ADDR_VAR 0 8
21473: PUSH
21474: LD_VAR 0 6
21478: PUSH
21479: LD_VAR 0 3
21483: ARRAY
21484: PUSH
21485: FOR_IN
21486: IFFALSE 21513
// if IsNotFull ( k ) then
21488: LD_VAR 0 8
21492: PPUSH
21493: CALL 51514 0 1
21497: IFFALSE 21511
// begin e := k ;
21499: LD_ADDR_VAR 0 7
21503: PUSH
21504: LD_VAR 0 8
21508: ST_TO_ADDR
// break ;
21509: GO 21513
// end ;
21511: GO 21485
21513: POP
21514: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21515: LD_VAR 0 7
21519: PUSH
21520: LD_VAR 0 5
21524: PPUSH
21525: LD_VAR 0 7
21529: PPUSH
21530: CALL 88633 0 2
21534: NOT
21535: AND
21536: IFFALSE 21595
// begin if IsInUnit ( p ) then
21538: LD_VAR 0 5
21542: PPUSH
21543: CALL_OW 310
21547: IFFALSE 21558
// ComExitBuilding ( p ) ;
21549: LD_VAR 0 5
21553: PPUSH
21554: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21558: LD_VAR 0 5
21562: PPUSH
21563: LD_VAR 0 7
21567: PPUSH
21568: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21572: LD_VAR 0 5
21576: PPUSH
21577: LD_VAR 0 3
21581: PPUSH
21582: CALL_OW 183
// AddComExitBuilding ( p ) ;
21586: LD_VAR 0 5
21590: PPUSH
21591: CALL_OW 182
// end ; end ;
21595: GO 21443
21597: POP
21598: POP
// end ;
21599: GO 21409
21601: POP
21602: POP
// end ;
21603: GO 21164
21605: POP
21606: POP
// end ;
21607: LD_VAR 0 1
21611: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
21612: LD_INT 0
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21626: LD_VAR 0 1
21630: NOT
21631: PUSH
21632: LD_EXP 50
21636: PUSH
21637: LD_VAR 0 1
21641: ARRAY
21642: NOT
21643: OR
21644: PUSH
21645: LD_EXP 50
21649: PUSH
21650: LD_VAR 0 1
21654: ARRAY
21655: PPUSH
21656: LD_INT 2
21658: PUSH
21659: LD_INT 30
21661: PUSH
21662: LD_INT 0
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 30
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: PPUSH
21684: CALL_OW 72
21688: NOT
21689: OR
21690: IFFALSE 21694
// exit ;
21692: GO 25197
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21694: LD_ADDR_VAR 0 4
21698: PUSH
21699: LD_EXP 50
21703: PUSH
21704: LD_VAR 0 1
21708: ARRAY
21709: PPUSH
21710: LD_INT 2
21712: PUSH
21713: LD_INT 25
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 25
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 25
21735: PUSH
21736: LD_INT 3
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 25
21745: PUSH
21746: LD_INT 4
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 5
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 8
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 25
21775: PUSH
21776: LD_INT 9
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: PPUSH
21793: CALL_OW 72
21797: ST_TO_ADDR
// if not tmp then
21798: LD_VAR 0 4
21802: NOT
21803: IFFALSE 21807
// exit ;
21805: GO 25197
// for i in tmp do
21807: LD_ADDR_VAR 0 3
21811: PUSH
21812: LD_VAR 0 4
21816: PUSH
21817: FOR_IN
21818: IFFALSE 21849
// if GetTag ( i ) then
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 110
21829: IFFALSE 21847
// tmp := tmp diff i ;
21831: LD_ADDR_VAR 0 4
21835: PUSH
21836: LD_VAR 0 4
21840: PUSH
21841: LD_VAR 0 3
21845: DIFF
21846: ST_TO_ADDR
21847: GO 21817
21849: POP
21850: POP
// if not tmp then
21851: LD_VAR 0 4
21855: NOT
21856: IFFALSE 21860
// exit ;
21858: GO 25197
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21860: LD_ADDR_VAR 0 5
21864: PUSH
21865: LD_EXP 50
21869: PUSH
21870: LD_VAR 0 1
21874: ARRAY
21875: PPUSH
21876: LD_INT 2
21878: PUSH
21879: LD_INT 25
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 25
21891: PUSH
21892: LD_INT 5
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 25
21901: PUSH
21902: LD_INT 8
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 25
21911: PUSH
21912: LD_INT 9
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 72
21930: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
21931: LD_ADDR_VAR 0 6
21935: PUSH
21936: LD_EXP 50
21940: PUSH
21941: LD_VAR 0 1
21945: ARRAY
21946: PPUSH
21947: LD_INT 25
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PPUSH
21957: CALL_OW 72
21961: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21962: LD_ADDR_VAR 0 7
21966: PUSH
21967: LD_EXP 50
21971: PUSH
21972: LD_VAR 0 1
21976: ARRAY
21977: PPUSH
21978: LD_INT 25
21980: PUSH
21981: LD_INT 3
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PPUSH
21988: CALL_OW 72
21992: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
21993: LD_ADDR_VAR 0 8
21997: PUSH
21998: LD_EXP 50
22002: PUSH
22003: LD_VAR 0 1
22007: ARRAY
22008: PPUSH
22009: LD_INT 25
22011: PUSH
22012: LD_INT 4
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 24
22021: PUSH
22022: LD_INT 251
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PPUSH
22033: CALL_OW 72
22037: ST_TO_ADDR
// if mc_scan [ base ] then
22038: LD_EXP 73
22042: PUSH
22043: LD_VAR 0 1
22047: ARRAY
22048: IFFALSE 22509
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
22050: LD_ADDR_EXP 92
22054: PUSH
22055: LD_EXP 92
22059: PPUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: LD_INT 4
22067: PPUSH
22068: CALL_OW 1
22072: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
22073: LD_ADDR_VAR 0 12
22077: PUSH
22078: LD_EXP 50
22082: PUSH
22083: LD_VAR 0 1
22087: ARRAY
22088: PPUSH
22089: LD_INT 2
22091: PUSH
22092: LD_INT 30
22094: PUSH
22095: LD_INT 4
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 30
22104: PUSH
22105: LD_INT 5
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 72
22121: ST_TO_ADDR
// if not b then
22122: LD_VAR 0 12
22126: NOT
22127: IFFALSE 22131
// exit ;
22129: GO 25197
// p := [ ] ;
22131: LD_ADDR_VAR 0 11
22135: PUSH
22136: EMPTY
22137: ST_TO_ADDR
// if sci >= 2 then
22138: LD_VAR 0 8
22142: PUSH
22143: LD_INT 2
22145: GREATEREQUAL
22146: IFFALSE 22177
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
22148: LD_ADDR_VAR 0 8
22152: PUSH
22153: LD_VAR 0 8
22157: PUSH
22158: LD_INT 1
22160: ARRAY
22161: PUSH
22162: LD_VAR 0 8
22166: PUSH
22167: LD_INT 2
22169: ARRAY
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: ST_TO_ADDR
22175: GO 22238
// if sci = 1 then
22177: LD_VAR 0 8
22181: PUSH
22182: LD_INT 1
22184: EQUAL
22185: IFFALSE 22206
// sci := [ sci [ 1 ] ] else
22187: LD_ADDR_VAR 0 8
22191: PUSH
22192: LD_VAR 0 8
22196: PUSH
22197: LD_INT 1
22199: ARRAY
22200: PUSH
22201: EMPTY
22202: LIST
22203: ST_TO_ADDR
22204: GO 22238
// if sci = 0 then
22206: LD_VAR 0 8
22210: PUSH
22211: LD_INT 0
22213: EQUAL
22214: IFFALSE 22238
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
22216: LD_ADDR_VAR 0 11
22220: PUSH
22221: LD_VAR 0 4
22225: PPUSH
22226: LD_INT 4
22228: PPUSH
22229: CALL 88496 0 2
22233: PUSH
22234: LD_INT 1
22236: ARRAY
22237: ST_TO_ADDR
// if eng > 4 then
22238: LD_VAR 0 6
22242: PUSH
22243: LD_INT 4
22245: GREATER
22246: IFFALSE 22292
// for i = eng downto 4 do
22248: LD_ADDR_VAR 0 3
22252: PUSH
22253: DOUBLE
22254: LD_VAR 0 6
22258: INC
22259: ST_TO_ADDR
22260: LD_INT 4
22262: PUSH
22263: FOR_DOWNTO
22264: IFFALSE 22290
// eng := eng diff eng [ i ] ;
22266: LD_ADDR_VAR 0 6
22270: PUSH
22271: LD_VAR 0 6
22275: PUSH
22276: LD_VAR 0 6
22280: PUSH
22281: LD_VAR 0 3
22285: ARRAY
22286: DIFF
22287: ST_TO_ADDR
22288: GO 22263
22290: POP
22291: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22292: LD_ADDR_VAR 0 4
22296: PUSH
22297: LD_VAR 0 4
22301: PUSH
22302: LD_VAR 0 5
22306: PUSH
22307: LD_VAR 0 6
22311: UNION
22312: PUSH
22313: LD_VAR 0 7
22317: UNION
22318: PUSH
22319: LD_VAR 0 8
22323: UNION
22324: DIFF
22325: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22326: LD_ADDR_VAR 0 13
22330: PUSH
22331: LD_EXP 50
22335: PUSH
22336: LD_VAR 0 1
22340: ARRAY
22341: PPUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: LD_INT 32
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 30
22357: PUSH
22358: LD_INT 31
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: PPUSH
22370: CALL_OW 72
22374: PUSH
22375: LD_EXP 50
22379: PUSH
22380: LD_VAR 0 1
22384: ARRAY
22385: PPUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 30
22391: PUSH
22392: LD_INT 4
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 30
22401: PUSH
22402: LD_INT 5
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: PPUSH
22414: CALL_OW 72
22418: PUSH
22419: LD_INT 6
22421: MUL
22422: PLUS
22423: ST_TO_ADDR
// if bcount < tmp then
22424: LD_VAR 0 13
22428: PUSH
22429: LD_VAR 0 4
22433: LESS
22434: IFFALSE 22480
// for i = tmp downto bcount do
22436: LD_ADDR_VAR 0 3
22440: PUSH
22441: DOUBLE
22442: LD_VAR 0 4
22446: INC
22447: ST_TO_ADDR
22448: LD_VAR 0 13
22452: PUSH
22453: FOR_DOWNTO
22454: IFFALSE 22478
// tmp := Delete ( tmp , tmp ) ;
22456: LD_ADDR_VAR 0 4
22460: PUSH
22461: LD_VAR 0 4
22465: PPUSH
22466: LD_VAR 0 4
22470: PPUSH
22471: CALL_OW 3
22475: ST_TO_ADDR
22476: GO 22453
22478: POP
22479: POP
// result := [ tmp , 0 , 0 , p ] ;
22480: LD_ADDR_VAR 0 2
22484: PUSH
22485: LD_VAR 0 4
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_VAR 0 11
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: ST_TO_ADDR
// exit ;
22507: GO 25197
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22509: LD_EXP 50
22513: PUSH
22514: LD_VAR 0 1
22518: ARRAY
22519: PPUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 30
22525: PUSH
22526: LD_INT 6
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 30
22535: PUSH
22536: LD_INT 7
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 30
22545: PUSH
22546: LD_INT 8
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: PPUSH
22559: CALL_OW 72
22563: NOT
22564: PUSH
22565: LD_EXP 50
22569: PUSH
22570: LD_VAR 0 1
22574: ARRAY
22575: PPUSH
22576: LD_INT 30
22578: PUSH
22579: LD_INT 3
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PPUSH
22586: CALL_OW 72
22590: NOT
22591: AND
22592: IFFALSE 22664
// begin if eng = tmp then
22594: LD_VAR 0 6
22598: PUSH
22599: LD_VAR 0 4
22603: EQUAL
22604: IFFALSE 22608
// exit ;
22606: GO 25197
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
22608: LD_ADDR_EXP 92
22612: PUSH
22613: LD_EXP 92
22617: PPUSH
22618: LD_VAR 0 1
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: CALL_OW 1
22630: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
22631: LD_ADDR_VAR 0 2
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: LD_VAR 0 4
22643: PUSH
22644: LD_VAR 0 6
22648: DIFF
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: ST_TO_ADDR
// exit ;
22662: GO 25197
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22664: LD_EXP 77
22668: PUSH
22669: LD_EXP 76
22673: PUSH
22674: LD_VAR 0 1
22678: ARRAY
22679: ARRAY
22680: PUSH
22681: LD_EXP 50
22685: PUSH
22686: LD_VAR 0 1
22690: ARRAY
22691: PPUSH
22692: LD_INT 2
22694: PUSH
22695: LD_INT 30
22697: PUSH
22698: LD_INT 6
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 30
22707: PUSH
22708: LD_INT 7
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 30
22717: PUSH
22718: LD_INT 8
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 72
22735: AND
22736: PUSH
22737: LD_EXP 50
22741: PUSH
22742: LD_VAR 0 1
22746: ARRAY
22747: PPUSH
22748: LD_INT 30
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PPUSH
22758: CALL_OW 72
22762: NOT
22763: AND
22764: IFFALSE 22978
// begin if sci >= 6 then
22766: LD_VAR 0 8
22770: PUSH
22771: LD_INT 6
22773: GREATEREQUAL
22774: IFFALSE 22778
// exit ;
22776: GO 25197
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
22778: LD_ADDR_EXP 92
22782: PUSH
22783: LD_EXP 92
22787: PPUSH
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_INT 2
22795: PPUSH
22796: CALL_OW 1
22800: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
22801: LD_ADDR_VAR 0 9
22805: PUSH
22806: LD_VAR 0 4
22810: PUSH
22811: LD_VAR 0 8
22815: DIFF
22816: PPUSH
22817: LD_INT 4
22819: PPUSH
22820: CALL 88496 0 2
22824: ST_TO_ADDR
// p := [ ] ;
22825: LD_ADDR_VAR 0 11
22829: PUSH
22830: EMPTY
22831: ST_TO_ADDR
// if sci < 6 and sort > 6 then
22832: LD_VAR 0 8
22836: PUSH
22837: LD_INT 6
22839: LESS
22840: PUSH
22841: LD_VAR 0 9
22845: PUSH
22846: LD_INT 6
22848: GREATER
22849: AND
22850: IFFALSE 22931
// begin for i = 1 to 6 - sci do
22852: LD_ADDR_VAR 0 3
22856: PUSH
22857: DOUBLE
22858: LD_INT 1
22860: DEC
22861: ST_TO_ADDR
22862: LD_INT 6
22864: PUSH
22865: LD_VAR 0 8
22869: MINUS
22870: PUSH
22871: FOR_TO
22872: IFFALSE 22927
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
22874: LD_ADDR_VAR 0 11
22878: PUSH
22879: LD_VAR 0 11
22883: PPUSH
22884: LD_VAR 0 11
22888: PUSH
22889: LD_INT 1
22891: PLUS
22892: PPUSH
22893: LD_VAR 0 9
22897: PUSH
22898: LD_INT 1
22900: ARRAY
22901: PPUSH
22902: CALL_OW 2
22906: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
22907: LD_ADDR_VAR 0 9
22911: PUSH
22912: LD_VAR 0 9
22916: PPUSH
22917: LD_INT 1
22919: PPUSH
22920: CALL_OW 3
22924: ST_TO_ADDR
// end ;
22925: GO 22871
22927: POP
22928: POP
// end else
22929: GO 22951
// if sort then
22931: LD_VAR 0 9
22935: IFFALSE 22951
// p := sort [ 1 ] ;
22937: LD_ADDR_VAR 0 11
22941: PUSH
22942: LD_VAR 0 9
22946: PUSH
22947: LD_INT 1
22949: ARRAY
22950: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
22951: LD_ADDR_VAR 0 2
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: LD_VAR 0 11
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: ST_TO_ADDR
// exit ;
22976: GO 25197
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22978: LD_EXP 77
22982: PUSH
22983: LD_EXP 76
22987: PUSH
22988: LD_VAR 0 1
22992: ARRAY
22993: ARRAY
22994: PUSH
22995: LD_EXP 50
22999: PUSH
23000: LD_VAR 0 1
23004: ARRAY
23005: PPUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 30
23011: PUSH
23012: LD_INT 6
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 30
23021: PUSH
23022: LD_INT 7
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 30
23031: PUSH
23032: LD_INT 8
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 72
23049: AND
23050: PUSH
23051: LD_EXP 50
23055: PUSH
23056: LD_VAR 0 1
23060: ARRAY
23061: PPUSH
23062: LD_INT 30
23064: PUSH
23065: LD_INT 3
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PPUSH
23072: CALL_OW 72
23076: AND
23077: IFFALSE 23811
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
23079: LD_ADDR_EXP 92
23083: PUSH
23084: LD_EXP 92
23088: PPUSH
23089: LD_VAR 0 1
23093: PPUSH
23094: LD_INT 3
23096: PPUSH
23097: CALL_OW 1
23101: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23102: LD_ADDR_VAR 0 2
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: ST_TO_ADDR
// if not eng then
23125: LD_VAR 0 6
23129: NOT
23130: IFFALSE 23193
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
23132: LD_ADDR_VAR 0 11
23136: PUSH
23137: LD_VAR 0 4
23141: PPUSH
23142: LD_INT 2
23144: PPUSH
23145: CALL 88496 0 2
23149: PUSH
23150: LD_INT 1
23152: ARRAY
23153: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
23154: LD_ADDR_VAR 0 2
23158: PUSH
23159: LD_VAR 0 2
23163: PPUSH
23164: LD_INT 2
23166: PPUSH
23167: LD_VAR 0 11
23171: PPUSH
23172: CALL_OW 1
23176: ST_TO_ADDR
// tmp := tmp diff p ;
23177: LD_ADDR_VAR 0 4
23181: PUSH
23182: LD_VAR 0 4
23186: PUSH
23187: LD_VAR 0 11
23191: DIFF
23192: ST_TO_ADDR
// end ; if tmp and sci < 6 then
23193: LD_VAR 0 4
23197: PUSH
23198: LD_VAR 0 8
23202: PUSH
23203: LD_INT 6
23205: LESS
23206: AND
23207: IFFALSE 23395
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
23209: LD_ADDR_VAR 0 9
23213: PUSH
23214: LD_VAR 0 4
23218: PUSH
23219: LD_VAR 0 8
23223: PUSH
23224: LD_VAR 0 7
23228: UNION
23229: DIFF
23230: PPUSH
23231: LD_INT 4
23233: PPUSH
23234: CALL 88496 0 2
23238: ST_TO_ADDR
// p := [ ] ;
23239: LD_ADDR_VAR 0 11
23243: PUSH
23244: EMPTY
23245: ST_TO_ADDR
// if sort then
23246: LD_VAR 0 9
23250: IFFALSE 23366
// for i = 1 to 6 - sci do
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: DOUBLE
23258: LD_INT 1
23260: DEC
23261: ST_TO_ADDR
23262: LD_INT 6
23264: PUSH
23265: LD_VAR 0 8
23269: MINUS
23270: PUSH
23271: FOR_TO
23272: IFFALSE 23364
// begin if i = sort then
23274: LD_VAR 0 3
23278: PUSH
23279: LD_VAR 0 9
23283: EQUAL
23284: IFFALSE 23288
// break ;
23286: GO 23364
// if GetClass ( i ) = 4 then
23288: LD_VAR 0 3
23292: PPUSH
23293: CALL_OW 257
23297: PUSH
23298: LD_INT 4
23300: EQUAL
23301: IFFALSE 23305
// continue ;
23303: GO 23271
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23305: LD_ADDR_VAR 0 11
23309: PUSH
23310: LD_VAR 0 11
23314: PPUSH
23315: LD_VAR 0 11
23319: PUSH
23320: LD_INT 1
23322: PLUS
23323: PPUSH
23324: LD_VAR 0 9
23328: PUSH
23329: LD_VAR 0 3
23333: ARRAY
23334: PPUSH
23335: CALL_OW 2
23339: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23340: LD_ADDR_VAR 0 4
23344: PUSH
23345: LD_VAR 0 4
23349: PUSH
23350: LD_VAR 0 9
23354: PUSH
23355: LD_VAR 0 3
23359: ARRAY
23360: DIFF
23361: ST_TO_ADDR
// end ;
23362: GO 23271
23364: POP
23365: POP
// if p then
23366: LD_VAR 0 11
23370: IFFALSE 23395
// result := Replace ( result , 4 , p ) ;
23372: LD_ADDR_VAR 0 2
23376: PUSH
23377: LD_VAR 0 2
23381: PPUSH
23382: LD_INT 4
23384: PPUSH
23385: LD_VAR 0 11
23389: PPUSH
23390: CALL_OW 1
23394: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23395: LD_VAR 0 4
23399: PUSH
23400: LD_VAR 0 7
23404: PUSH
23405: LD_INT 6
23407: LESS
23408: AND
23409: IFFALSE 23597
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23411: LD_ADDR_VAR 0 9
23415: PUSH
23416: LD_VAR 0 4
23420: PUSH
23421: LD_VAR 0 8
23425: PUSH
23426: LD_VAR 0 7
23430: UNION
23431: DIFF
23432: PPUSH
23433: LD_INT 3
23435: PPUSH
23436: CALL 88496 0 2
23440: ST_TO_ADDR
// p := [ ] ;
23441: LD_ADDR_VAR 0 11
23445: PUSH
23446: EMPTY
23447: ST_TO_ADDR
// if sort then
23448: LD_VAR 0 9
23452: IFFALSE 23568
// for i = 1 to 6 - mech do
23454: LD_ADDR_VAR 0 3
23458: PUSH
23459: DOUBLE
23460: LD_INT 1
23462: DEC
23463: ST_TO_ADDR
23464: LD_INT 6
23466: PUSH
23467: LD_VAR 0 7
23471: MINUS
23472: PUSH
23473: FOR_TO
23474: IFFALSE 23566
// begin if i = sort then
23476: LD_VAR 0 3
23480: PUSH
23481: LD_VAR 0 9
23485: EQUAL
23486: IFFALSE 23490
// break ;
23488: GO 23566
// if GetClass ( i ) = 3 then
23490: LD_VAR 0 3
23494: PPUSH
23495: CALL_OW 257
23499: PUSH
23500: LD_INT 3
23502: EQUAL
23503: IFFALSE 23507
// continue ;
23505: GO 23473
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23507: LD_ADDR_VAR 0 11
23511: PUSH
23512: LD_VAR 0 11
23516: PPUSH
23517: LD_VAR 0 11
23521: PUSH
23522: LD_INT 1
23524: PLUS
23525: PPUSH
23526: LD_VAR 0 9
23530: PUSH
23531: LD_VAR 0 3
23535: ARRAY
23536: PPUSH
23537: CALL_OW 2
23541: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23542: LD_ADDR_VAR 0 4
23546: PUSH
23547: LD_VAR 0 4
23551: PUSH
23552: LD_VAR 0 9
23556: PUSH
23557: LD_VAR 0 3
23561: ARRAY
23562: DIFF
23563: ST_TO_ADDR
// end ;
23564: GO 23473
23566: POP
23567: POP
// if p then
23568: LD_VAR 0 11
23572: IFFALSE 23597
// result := Replace ( result , 3 , p ) ;
23574: LD_ADDR_VAR 0 2
23578: PUSH
23579: LD_VAR 0 2
23583: PPUSH
23584: LD_INT 3
23586: PPUSH
23587: LD_VAR 0 11
23591: PPUSH
23592: CALL_OW 1
23596: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
23597: LD_VAR 0 4
23601: PUSH
23602: LD_INT 6
23604: GREATER
23605: PUSH
23606: LD_VAR 0 6
23610: PUSH
23611: LD_INT 6
23613: LESS
23614: AND
23615: IFFALSE 23809
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23617: LD_ADDR_VAR 0 9
23621: PUSH
23622: LD_VAR 0 4
23626: PUSH
23627: LD_VAR 0 8
23631: PUSH
23632: LD_VAR 0 7
23636: UNION
23637: PUSH
23638: LD_VAR 0 6
23642: UNION
23643: DIFF
23644: PPUSH
23645: LD_INT 2
23647: PPUSH
23648: CALL 88496 0 2
23652: ST_TO_ADDR
// p := [ ] ;
23653: LD_ADDR_VAR 0 11
23657: PUSH
23658: EMPTY
23659: ST_TO_ADDR
// if sort then
23660: LD_VAR 0 9
23664: IFFALSE 23780
// for i = 1 to 6 - eng do
23666: LD_ADDR_VAR 0 3
23670: PUSH
23671: DOUBLE
23672: LD_INT 1
23674: DEC
23675: ST_TO_ADDR
23676: LD_INT 6
23678: PUSH
23679: LD_VAR 0 6
23683: MINUS
23684: PUSH
23685: FOR_TO
23686: IFFALSE 23778
// begin if i = sort then
23688: LD_VAR 0 3
23692: PUSH
23693: LD_VAR 0 9
23697: EQUAL
23698: IFFALSE 23702
// break ;
23700: GO 23778
// if GetClass ( i ) = 2 then
23702: LD_VAR 0 3
23706: PPUSH
23707: CALL_OW 257
23711: PUSH
23712: LD_INT 2
23714: EQUAL
23715: IFFALSE 23719
// continue ;
23717: GO 23685
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23719: LD_ADDR_VAR 0 11
23723: PUSH
23724: LD_VAR 0 11
23728: PPUSH
23729: LD_VAR 0 11
23733: PUSH
23734: LD_INT 1
23736: PLUS
23737: PPUSH
23738: LD_VAR 0 9
23742: PUSH
23743: LD_VAR 0 3
23747: ARRAY
23748: PPUSH
23749: CALL_OW 2
23753: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23754: LD_ADDR_VAR 0 4
23758: PUSH
23759: LD_VAR 0 4
23763: PUSH
23764: LD_VAR 0 9
23768: PUSH
23769: LD_VAR 0 3
23773: ARRAY
23774: DIFF
23775: ST_TO_ADDR
// end ;
23776: GO 23685
23778: POP
23779: POP
// if p then
23780: LD_VAR 0 11
23784: IFFALSE 23809
// result := Replace ( result , 2 , p ) ;
23786: LD_ADDR_VAR 0 2
23790: PUSH
23791: LD_VAR 0 2
23795: PPUSH
23796: LD_INT 2
23798: PPUSH
23799: LD_VAR 0 11
23803: PPUSH
23804: CALL_OW 1
23808: ST_TO_ADDR
// end ; exit ;
23809: GO 25197
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
23811: LD_EXP 77
23815: PUSH
23816: LD_EXP 76
23820: PUSH
23821: LD_VAR 0 1
23825: ARRAY
23826: ARRAY
23827: NOT
23828: PUSH
23829: LD_EXP 50
23833: PUSH
23834: LD_VAR 0 1
23838: ARRAY
23839: PPUSH
23840: LD_INT 30
23842: PUSH
23843: LD_INT 3
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PPUSH
23850: CALL_OW 72
23854: AND
23855: PUSH
23856: LD_EXP 55
23860: PUSH
23861: LD_VAR 0 1
23865: ARRAY
23866: AND
23867: IFFALSE 24475
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
23869: LD_ADDR_EXP 92
23873: PUSH
23874: LD_EXP 92
23878: PPUSH
23879: LD_VAR 0 1
23883: PPUSH
23884: LD_INT 5
23886: PPUSH
23887: CALL_OW 1
23891: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23892: LD_ADDR_VAR 0 2
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: ST_TO_ADDR
// if sci > 1 then
23915: LD_VAR 0 8
23919: PUSH
23920: LD_INT 1
23922: GREATER
23923: IFFALSE 23951
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
23925: LD_ADDR_VAR 0 4
23929: PUSH
23930: LD_VAR 0 4
23934: PUSH
23935: LD_VAR 0 8
23939: PUSH
23940: LD_VAR 0 8
23944: PUSH
23945: LD_INT 1
23947: ARRAY
23948: DIFF
23949: DIFF
23950: ST_TO_ADDR
// if tmp and not sci then
23951: LD_VAR 0 4
23955: PUSH
23956: LD_VAR 0 8
23960: NOT
23961: AND
23962: IFFALSE 24031
// begin sort := SortBySkill ( tmp , 4 ) ;
23964: LD_ADDR_VAR 0 9
23968: PUSH
23969: LD_VAR 0 4
23973: PPUSH
23974: LD_INT 4
23976: PPUSH
23977: CALL 88496 0 2
23981: ST_TO_ADDR
// if sort then
23982: LD_VAR 0 9
23986: IFFALSE 24002
// p := sort [ 1 ] ;
23988: LD_ADDR_VAR 0 11
23992: PUSH
23993: LD_VAR 0 9
23997: PUSH
23998: LD_INT 1
24000: ARRAY
24001: ST_TO_ADDR
// if p then
24002: LD_VAR 0 11
24006: IFFALSE 24031
// result := Replace ( result , 4 , p ) ;
24008: LD_ADDR_VAR 0 2
24012: PUSH
24013: LD_VAR 0 2
24017: PPUSH
24018: LD_INT 4
24020: PPUSH
24021: LD_VAR 0 11
24025: PPUSH
24026: CALL_OW 1
24030: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24031: LD_ADDR_VAR 0 4
24035: PUSH
24036: LD_VAR 0 4
24040: PUSH
24041: LD_VAR 0 7
24045: DIFF
24046: ST_TO_ADDR
// if tmp and mech < 6 then
24047: LD_VAR 0 4
24051: PUSH
24052: LD_VAR 0 7
24056: PUSH
24057: LD_INT 6
24059: LESS
24060: AND
24061: IFFALSE 24249
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
24063: LD_ADDR_VAR 0 9
24067: PUSH
24068: LD_VAR 0 4
24072: PUSH
24073: LD_VAR 0 8
24077: PUSH
24078: LD_VAR 0 7
24082: UNION
24083: DIFF
24084: PPUSH
24085: LD_INT 3
24087: PPUSH
24088: CALL 88496 0 2
24092: ST_TO_ADDR
// p := [ ] ;
24093: LD_ADDR_VAR 0 11
24097: PUSH
24098: EMPTY
24099: ST_TO_ADDR
// if sort then
24100: LD_VAR 0 9
24104: IFFALSE 24220
// for i = 1 to 6 - mech do
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: DOUBLE
24112: LD_INT 1
24114: DEC
24115: ST_TO_ADDR
24116: LD_INT 6
24118: PUSH
24119: LD_VAR 0 7
24123: MINUS
24124: PUSH
24125: FOR_TO
24126: IFFALSE 24218
// begin if i = sort then
24128: LD_VAR 0 3
24132: PUSH
24133: LD_VAR 0 9
24137: EQUAL
24138: IFFALSE 24142
// break ;
24140: GO 24218
// if GetClass ( i ) = 3 then
24142: LD_VAR 0 3
24146: PPUSH
24147: CALL_OW 257
24151: PUSH
24152: LD_INT 3
24154: EQUAL
24155: IFFALSE 24159
// continue ;
24157: GO 24125
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24159: LD_ADDR_VAR 0 11
24163: PUSH
24164: LD_VAR 0 11
24168: PPUSH
24169: LD_VAR 0 11
24173: PUSH
24174: LD_INT 1
24176: PLUS
24177: PPUSH
24178: LD_VAR 0 9
24182: PUSH
24183: LD_VAR 0 3
24187: ARRAY
24188: PPUSH
24189: CALL_OW 2
24193: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24194: LD_ADDR_VAR 0 4
24198: PUSH
24199: LD_VAR 0 4
24203: PUSH
24204: LD_VAR 0 9
24208: PUSH
24209: LD_VAR 0 3
24213: ARRAY
24214: DIFF
24215: ST_TO_ADDR
// end ;
24216: GO 24125
24218: POP
24219: POP
// if p then
24220: LD_VAR 0 11
24224: IFFALSE 24249
// result := Replace ( result , 3 , p ) ;
24226: LD_ADDR_VAR 0 2
24230: PUSH
24231: LD_VAR 0 2
24235: PPUSH
24236: LD_INT 3
24238: PPUSH
24239: LD_VAR 0 11
24243: PPUSH
24244: CALL_OW 1
24248: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24249: LD_ADDR_VAR 0 4
24253: PUSH
24254: LD_VAR 0 4
24258: PUSH
24259: LD_VAR 0 6
24263: DIFF
24264: ST_TO_ADDR
// if tmp and eng < 6 then
24265: LD_VAR 0 4
24269: PUSH
24270: LD_VAR 0 6
24274: PUSH
24275: LD_INT 6
24277: LESS
24278: AND
24279: IFFALSE 24473
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24281: LD_ADDR_VAR 0 9
24285: PUSH
24286: LD_VAR 0 4
24290: PUSH
24291: LD_VAR 0 8
24295: PUSH
24296: LD_VAR 0 7
24300: UNION
24301: PUSH
24302: LD_VAR 0 6
24306: UNION
24307: DIFF
24308: PPUSH
24309: LD_INT 2
24311: PPUSH
24312: CALL 88496 0 2
24316: ST_TO_ADDR
// p := [ ] ;
24317: LD_ADDR_VAR 0 11
24321: PUSH
24322: EMPTY
24323: ST_TO_ADDR
// if sort then
24324: LD_VAR 0 9
24328: IFFALSE 24444
// for i = 1 to 6 - eng do
24330: LD_ADDR_VAR 0 3
24334: PUSH
24335: DOUBLE
24336: LD_INT 1
24338: DEC
24339: ST_TO_ADDR
24340: LD_INT 6
24342: PUSH
24343: LD_VAR 0 6
24347: MINUS
24348: PUSH
24349: FOR_TO
24350: IFFALSE 24442
// begin if i = sort then
24352: LD_VAR 0 3
24356: PUSH
24357: LD_VAR 0 9
24361: EQUAL
24362: IFFALSE 24366
// break ;
24364: GO 24442
// if GetClass ( i ) = 2 then
24366: LD_VAR 0 3
24370: PPUSH
24371: CALL_OW 257
24375: PUSH
24376: LD_INT 2
24378: EQUAL
24379: IFFALSE 24383
// continue ;
24381: GO 24349
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24383: LD_ADDR_VAR 0 11
24387: PUSH
24388: LD_VAR 0 11
24392: PPUSH
24393: LD_VAR 0 11
24397: PUSH
24398: LD_INT 1
24400: PLUS
24401: PPUSH
24402: LD_VAR 0 9
24406: PUSH
24407: LD_VAR 0 3
24411: ARRAY
24412: PPUSH
24413: CALL_OW 2
24417: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24418: LD_ADDR_VAR 0 4
24422: PUSH
24423: LD_VAR 0 4
24427: PUSH
24428: LD_VAR 0 9
24432: PUSH
24433: LD_VAR 0 3
24437: ARRAY
24438: DIFF
24439: ST_TO_ADDR
// end ;
24440: GO 24349
24442: POP
24443: POP
// if p then
24444: LD_VAR 0 11
24448: IFFALSE 24473
// result := Replace ( result , 2 , p ) ;
24450: LD_ADDR_VAR 0 2
24454: PUSH
24455: LD_VAR 0 2
24459: PPUSH
24460: LD_INT 2
24462: PPUSH
24463: LD_VAR 0 11
24467: PPUSH
24468: CALL_OW 1
24472: ST_TO_ADDR
// end ; exit ;
24473: GO 25197
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24475: LD_EXP 77
24479: PUSH
24480: LD_EXP 76
24484: PUSH
24485: LD_VAR 0 1
24489: ARRAY
24490: ARRAY
24491: NOT
24492: PUSH
24493: LD_EXP 50
24497: PUSH
24498: LD_VAR 0 1
24502: ARRAY
24503: PPUSH
24504: LD_INT 30
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PPUSH
24514: CALL_OW 72
24518: AND
24519: PUSH
24520: LD_EXP 55
24524: PUSH
24525: LD_VAR 0 1
24529: ARRAY
24530: NOT
24531: AND
24532: IFFALSE 25197
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24534: LD_ADDR_EXP 92
24538: PUSH
24539: LD_EXP 92
24543: PPUSH
24544: LD_VAR 0 1
24548: PPUSH
24549: LD_INT 6
24551: PPUSH
24552: CALL_OW 1
24556: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24557: LD_ADDR_VAR 0 2
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: ST_TO_ADDR
// if sci >= 1 then
24580: LD_VAR 0 8
24584: PUSH
24585: LD_INT 1
24587: GREATEREQUAL
24588: IFFALSE 24610
// tmp := tmp diff sci [ 1 ] ;
24590: LD_ADDR_VAR 0 4
24594: PUSH
24595: LD_VAR 0 4
24599: PUSH
24600: LD_VAR 0 8
24604: PUSH
24605: LD_INT 1
24607: ARRAY
24608: DIFF
24609: ST_TO_ADDR
// if tmp and not sci then
24610: LD_VAR 0 4
24614: PUSH
24615: LD_VAR 0 8
24619: NOT
24620: AND
24621: IFFALSE 24690
// begin sort := SortBySkill ( tmp , 4 ) ;
24623: LD_ADDR_VAR 0 9
24627: PUSH
24628: LD_VAR 0 4
24632: PPUSH
24633: LD_INT 4
24635: PPUSH
24636: CALL 88496 0 2
24640: ST_TO_ADDR
// if sort then
24641: LD_VAR 0 9
24645: IFFALSE 24661
// p := sort [ 1 ] ;
24647: LD_ADDR_VAR 0 11
24651: PUSH
24652: LD_VAR 0 9
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: ST_TO_ADDR
// if p then
24661: LD_VAR 0 11
24665: IFFALSE 24690
// result := Replace ( result , 4 , p ) ;
24667: LD_ADDR_VAR 0 2
24671: PUSH
24672: LD_VAR 0 2
24676: PPUSH
24677: LD_INT 4
24679: PPUSH
24680: LD_VAR 0 11
24684: PPUSH
24685: CALL_OW 1
24689: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24690: LD_ADDR_VAR 0 4
24694: PUSH
24695: LD_VAR 0 4
24699: PUSH
24700: LD_VAR 0 7
24704: DIFF
24705: ST_TO_ADDR
// if tmp and mech < 6 then
24706: LD_VAR 0 4
24710: PUSH
24711: LD_VAR 0 7
24715: PUSH
24716: LD_INT 6
24718: LESS
24719: AND
24720: IFFALSE 24902
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
24722: LD_ADDR_VAR 0 9
24726: PUSH
24727: LD_VAR 0 4
24731: PUSH
24732: LD_VAR 0 7
24736: DIFF
24737: PPUSH
24738: LD_INT 3
24740: PPUSH
24741: CALL 88496 0 2
24745: ST_TO_ADDR
// p := [ ] ;
24746: LD_ADDR_VAR 0 11
24750: PUSH
24751: EMPTY
24752: ST_TO_ADDR
// if sort then
24753: LD_VAR 0 9
24757: IFFALSE 24873
// for i = 1 to 6 - mech do
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: DOUBLE
24765: LD_INT 1
24767: DEC
24768: ST_TO_ADDR
24769: LD_INT 6
24771: PUSH
24772: LD_VAR 0 7
24776: MINUS
24777: PUSH
24778: FOR_TO
24779: IFFALSE 24871
// begin if i = sort then
24781: LD_VAR 0 3
24785: PUSH
24786: LD_VAR 0 9
24790: EQUAL
24791: IFFALSE 24795
// break ;
24793: GO 24871
// if GetClass ( i ) = 3 then
24795: LD_VAR 0 3
24799: PPUSH
24800: CALL_OW 257
24804: PUSH
24805: LD_INT 3
24807: EQUAL
24808: IFFALSE 24812
// continue ;
24810: GO 24778
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24812: LD_ADDR_VAR 0 11
24816: PUSH
24817: LD_VAR 0 11
24821: PPUSH
24822: LD_VAR 0 11
24826: PUSH
24827: LD_INT 1
24829: PLUS
24830: PPUSH
24831: LD_VAR 0 9
24835: PUSH
24836: LD_VAR 0 3
24840: ARRAY
24841: PPUSH
24842: CALL_OW 2
24846: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24847: LD_ADDR_VAR 0 4
24851: PUSH
24852: LD_VAR 0 4
24856: PUSH
24857: LD_VAR 0 9
24861: PUSH
24862: LD_VAR 0 3
24866: ARRAY
24867: DIFF
24868: ST_TO_ADDR
// end ;
24869: GO 24778
24871: POP
24872: POP
// if p then
24873: LD_VAR 0 11
24877: IFFALSE 24902
// result := Replace ( result , 3 , p ) ;
24879: LD_ADDR_VAR 0 2
24883: PUSH
24884: LD_VAR 0 2
24888: PPUSH
24889: LD_INT 3
24891: PPUSH
24892: LD_VAR 0 11
24896: PPUSH
24897: CALL_OW 1
24901: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24902: LD_ADDR_VAR 0 4
24906: PUSH
24907: LD_VAR 0 4
24911: PUSH
24912: LD_VAR 0 6
24916: DIFF
24917: ST_TO_ADDR
// if tmp and eng < 4 then
24918: LD_VAR 0 4
24922: PUSH
24923: LD_VAR 0 6
24927: PUSH
24928: LD_INT 4
24930: LESS
24931: AND
24932: IFFALSE 25122
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
24934: LD_ADDR_VAR 0 9
24938: PUSH
24939: LD_VAR 0 4
24943: PUSH
24944: LD_VAR 0 7
24948: PUSH
24949: LD_VAR 0 6
24953: UNION
24954: DIFF
24955: PPUSH
24956: LD_INT 2
24958: PPUSH
24959: CALL 88496 0 2
24963: ST_TO_ADDR
// p := [ ] ;
24964: LD_ADDR_VAR 0 11
24968: PUSH
24969: EMPTY
24970: ST_TO_ADDR
// if sort then
24971: LD_VAR 0 9
24975: IFFALSE 25091
// for i = 1 to 4 - eng do
24977: LD_ADDR_VAR 0 3
24981: PUSH
24982: DOUBLE
24983: LD_INT 1
24985: DEC
24986: ST_TO_ADDR
24987: LD_INT 4
24989: PUSH
24990: LD_VAR 0 6
24994: MINUS
24995: PUSH
24996: FOR_TO
24997: IFFALSE 25089
// begin if i = sort then
24999: LD_VAR 0 3
25003: PUSH
25004: LD_VAR 0 9
25008: EQUAL
25009: IFFALSE 25013
// break ;
25011: GO 25089
// if GetClass ( i ) = 2 then
25013: LD_VAR 0 3
25017: PPUSH
25018: CALL_OW 257
25022: PUSH
25023: LD_INT 2
25025: EQUAL
25026: IFFALSE 25030
// continue ;
25028: GO 24996
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25030: LD_ADDR_VAR 0 11
25034: PUSH
25035: LD_VAR 0 11
25039: PPUSH
25040: LD_VAR 0 11
25044: PUSH
25045: LD_INT 1
25047: PLUS
25048: PPUSH
25049: LD_VAR 0 9
25053: PUSH
25054: LD_VAR 0 3
25058: ARRAY
25059: PPUSH
25060: CALL_OW 2
25064: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25065: LD_ADDR_VAR 0 4
25069: PUSH
25070: LD_VAR 0 4
25074: PUSH
25075: LD_VAR 0 9
25079: PUSH
25080: LD_VAR 0 3
25084: ARRAY
25085: DIFF
25086: ST_TO_ADDR
// end ;
25087: GO 24996
25089: POP
25090: POP
// if p then
25091: LD_VAR 0 11
25095: IFFALSE 25120
// result := Replace ( result , 2 , p ) ;
25097: LD_ADDR_VAR 0 2
25101: PUSH
25102: LD_VAR 0 2
25106: PPUSH
25107: LD_INT 2
25109: PPUSH
25110: LD_VAR 0 11
25114: PPUSH
25115: CALL_OW 1
25119: ST_TO_ADDR
// end else
25120: GO 25166
// for i = eng downto 5 do
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: DOUBLE
25128: LD_VAR 0 6
25132: INC
25133: ST_TO_ADDR
25134: LD_INT 5
25136: PUSH
25137: FOR_DOWNTO
25138: IFFALSE 25164
// tmp := tmp union eng [ i ] ;
25140: LD_ADDR_VAR 0 4
25144: PUSH
25145: LD_VAR 0 4
25149: PUSH
25150: LD_VAR 0 6
25154: PUSH
25155: LD_VAR 0 3
25159: ARRAY
25160: UNION
25161: ST_TO_ADDR
25162: GO 25137
25164: POP
25165: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
25166: LD_ADDR_VAR 0 2
25170: PUSH
25171: LD_VAR 0 2
25175: PPUSH
25176: LD_INT 1
25178: PPUSH
25179: LD_VAR 0 4
25183: PUSH
25184: LD_VAR 0 5
25188: DIFF
25189: PPUSH
25190: CALL_OW 1
25194: ST_TO_ADDR
// exit ;
25195: GO 25197
// end ; end ;
25197: LD_VAR 0 2
25201: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
25202: LD_INT 0
25204: PPUSH
25205: PPUSH
25206: PPUSH
// if not mc_bases then
25207: LD_EXP 50
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25322
// for i = 1 to mc_bases do
25216: LD_ADDR_VAR 0 2
25220: PUSH
25221: DOUBLE
25222: LD_INT 1
25224: DEC
25225: ST_TO_ADDR
25226: LD_EXP 50
25230: PUSH
25231: FOR_TO
25232: IFFALSE 25313
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_EXP 50
25243: PUSH
25244: LD_VAR 0 2
25248: ARRAY
25249: PPUSH
25250: LD_INT 21
25252: PUSH
25253: LD_INT 3
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 3
25262: PUSH
25263: LD_INT 24
25265: PUSH
25266: LD_INT 1000
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PPUSH
25281: CALL_OW 72
25285: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25286: LD_ADDR_EXP 51
25290: PUSH
25291: LD_EXP 51
25295: PPUSH
25296: LD_VAR 0 2
25300: PPUSH
25301: LD_VAR 0 3
25305: PPUSH
25306: CALL_OW 1
25310: ST_TO_ADDR
// end ;
25311: GO 25231
25313: POP
25314: POP
// RaiseSailEvent ( 101 ) ;
25315: LD_INT 101
25317: PPUSH
25318: CALL_OW 427
// end ;
25322: LD_VAR 0 1
25326: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25327: LD_INT 0
25329: PPUSH
25330: PPUSH
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
25335: PPUSH
// if not mc_bases then
25336: LD_EXP 50
25340: NOT
25341: IFFALSE 25345
// exit ;
25343: GO 25918
// for i = 1 to mc_bases do
25345: LD_ADDR_VAR 0 2
25349: PUSH
25350: DOUBLE
25351: LD_INT 1
25353: DEC
25354: ST_TO_ADDR
25355: LD_EXP 50
25359: PUSH
25360: FOR_TO
25361: IFFALSE 25909
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25363: LD_ADDR_VAR 0 5
25367: PUSH
25368: LD_EXP 50
25372: PUSH
25373: LD_VAR 0 2
25377: ARRAY
25378: PUSH
25379: LD_EXP 79
25383: PUSH
25384: LD_VAR 0 2
25388: ARRAY
25389: UNION
25390: PPUSH
25391: LD_INT 21
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 3
25406: PUSH
25407: LD_INT 54
25409: PUSH
25410: EMPTY
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 3
25419: PUSH
25420: LD_INT 24
25422: PUSH
25423: LD_INT 800
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: LIST
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PPUSH
25443: CALL_OW 72
25447: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25448: LD_ADDR_VAR 0 6
25452: PUSH
25453: LD_EXP 50
25457: PUSH
25458: LD_VAR 0 2
25462: ARRAY
25463: PPUSH
25464: LD_INT 21
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 3
25479: PUSH
25480: LD_INT 54
25482: PUSH
25483: EMPTY
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 3
25492: PUSH
25493: LD_INT 24
25495: PUSH
25496: LD_INT 250
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 72
25520: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25521: LD_ADDR_VAR 0 7
25525: PUSH
25526: LD_VAR 0 5
25530: PUSH
25531: LD_VAR 0 6
25535: DIFF
25536: ST_TO_ADDR
// if not need_heal_1 then
25537: LD_VAR 0 6
25541: NOT
25542: IFFALSE 25575
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25544: LD_ADDR_EXP 53
25548: PUSH
25549: LD_EXP 53
25553: PPUSH
25554: LD_VAR 0 2
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PPUSH
25566: EMPTY
25567: PPUSH
25568: CALL 54248 0 3
25572: ST_TO_ADDR
25573: GO 25645
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
25575: LD_ADDR_EXP 53
25579: PUSH
25580: LD_EXP 53
25584: PPUSH
25585: LD_VAR 0 2
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PPUSH
25597: LD_EXP 53
25601: PUSH
25602: LD_VAR 0 2
25606: ARRAY
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: PPUSH
25612: LD_INT 3
25614: PUSH
25615: LD_INT 24
25617: PUSH
25618: LD_INT 1000
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PPUSH
25629: CALL_OW 72
25633: PUSH
25634: LD_VAR 0 6
25638: UNION
25639: PPUSH
25640: CALL 54248 0 3
25644: ST_TO_ADDR
// if not need_heal_2 then
25645: LD_VAR 0 7
25649: NOT
25650: IFFALSE 25683
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
25652: LD_ADDR_EXP 53
25656: PUSH
25657: LD_EXP 53
25661: PPUSH
25662: LD_VAR 0 2
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: EMPTY
25675: PPUSH
25676: CALL 54248 0 3
25680: ST_TO_ADDR
25681: GO 25715
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
25683: LD_ADDR_EXP 53
25687: PUSH
25688: LD_EXP 53
25692: PPUSH
25693: LD_VAR 0 2
25697: PUSH
25698: LD_INT 2
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PPUSH
25705: LD_VAR 0 7
25709: PPUSH
25710: CALL 54248 0 3
25714: ST_TO_ADDR
// if need_heal_2 then
25715: LD_VAR 0 7
25719: IFFALSE 25891
// for j in need_heal_2 do
25721: LD_ADDR_VAR 0 3
25725: PUSH
25726: LD_VAR 0 7
25730: PUSH
25731: FOR_IN
25732: IFFALSE 25889
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
25734: LD_ADDR_VAR 0 5
25738: PUSH
25739: LD_EXP 50
25743: PUSH
25744: LD_VAR 0 2
25748: ARRAY
25749: PPUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 30
25755: PUSH
25756: LD_INT 6
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 30
25765: PUSH
25766: LD_INT 7
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 30
25775: PUSH
25776: LD_INT 8
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 30
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 30
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 25
25805: PUSH
25806: LD_INT 4
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL_OW 72
25826: ST_TO_ADDR
// if tmp then
25827: LD_VAR 0 5
25831: IFFALSE 25887
// begin k := NearestUnitToUnit ( tmp , j ) ;
25833: LD_ADDR_VAR 0 4
25837: PUSH
25838: LD_VAR 0 5
25842: PPUSH
25843: LD_VAR 0 3
25847: PPUSH
25848: CALL_OW 74
25852: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
25853: LD_VAR 0 3
25857: PPUSH
25858: LD_VAR 0 4
25862: PPUSH
25863: CALL_OW 296
25867: PUSH
25868: LD_INT 7
25870: GREATER
25871: IFFALSE 25887
// ComMoveUnit ( j , k ) ;
25873: LD_VAR 0 3
25877: PPUSH
25878: LD_VAR 0 4
25882: PPUSH
25883: CALL_OW 112
// end ; end ;
25887: GO 25731
25889: POP
25890: POP
// if not need_heal_1 and not need_heal_2 then
25891: LD_VAR 0 6
25895: NOT
25896: PUSH
25897: LD_VAR 0 7
25901: NOT
25902: AND
25903: IFFALSE 25907
// continue ;
25905: GO 25360
// end ;
25907: GO 25360
25909: POP
25910: POP
// RaiseSailEvent ( 102 ) ;
25911: LD_INT 102
25913: PPUSH
25914: CALL_OW 427
// end ;
25918: LD_VAR 0 1
25922: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
// if not mc_bases then
25931: LD_EXP 50
25935: NOT
25936: IFFALSE 25940
// exit ;
25938: GO 26650
// for i = 1 to mc_bases do
25940: LD_ADDR_VAR 0 2
25944: PUSH
25945: DOUBLE
25946: LD_INT 1
25948: DEC
25949: ST_TO_ADDR
25950: LD_EXP 50
25954: PUSH
25955: FOR_TO
25956: IFFALSE 26648
// begin if not mc_building_need_repair [ i ] then
25958: LD_EXP 51
25962: PUSH
25963: LD_VAR 0 2
25967: ARRAY
25968: NOT
25969: IFFALSE 26143
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
25971: LD_ADDR_VAR 0 6
25975: PUSH
25976: LD_EXP 69
25980: PUSH
25981: LD_VAR 0 2
25985: ARRAY
25986: PPUSH
25987: LD_INT 3
25989: PUSH
25990: LD_INT 24
25992: PUSH
25993: LD_INT 1000
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: LD_INT 34
26009: PUSH
26010: LD_INT 13
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 34
26019: PUSH
26020: LD_INT 52
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PPUSH
26036: CALL_OW 72
26040: ST_TO_ADDR
// if cranes then
26041: LD_VAR 0 6
26045: IFFALSE 26107
// for j in cranes do
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: LD_VAR 0 6
26056: PUSH
26057: FOR_IN
26058: IFFALSE 26105
// if not IsInArea ( j , mc_parking [ i ] ) then
26060: LD_VAR 0 3
26064: PPUSH
26065: LD_EXP 74
26069: PUSH
26070: LD_VAR 0 2
26074: ARRAY
26075: PPUSH
26076: CALL_OW 308
26080: NOT
26081: IFFALSE 26103
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26083: LD_VAR 0 3
26087: PPUSH
26088: LD_EXP 74
26092: PUSH
26093: LD_VAR 0 2
26097: ARRAY
26098: PPUSH
26099: CALL_OW 113
26103: GO 26057
26105: POP
26106: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
26107: LD_ADDR_EXP 52
26111: PUSH
26112: LD_EXP 52
26116: PPUSH
26117: LD_VAR 0 2
26121: PPUSH
26122: EMPTY
26123: PPUSH
26124: CALL_OW 1
26128: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
26129: LD_VAR 0 2
26133: PPUSH
26134: LD_INT 101
26136: PPUSH
26137: CALL 21035 0 2
// continue ;
26141: GO 25955
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
26143: LD_ADDR_EXP 56
26147: PUSH
26148: LD_EXP 56
26152: PPUSH
26153: LD_VAR 0 2
26157: PPUSH
26158: EMPTY
26159: PPUSH
26160: CALL_OW 1
26164: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26165: LD_VAR 0 2
26169: PPUSH
26170: LD_INT 103
26172: PPUSH
26173: CALL 21035 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
26177: LD_ADDR_VAR 0 5
26181: PUSH
26182: LD_EXP 50
26186: PUSH
26187: LD_VAR 0 2
26191: ARRAY
26192: PUSH
26193: LD_EXP 79
26197: PUSH
26198: LD_VAR 0 2
26202: ARRAY
26203: UNION
26204: PPUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 25
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 25
26220: PUSH
26221: LD_INT 16
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: PPUSH
26236: CALL_OW 72
26240: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
26241: LD_ADDR_VAR 0 6
26245: PUSH
26246: LD_EXP 69
26250: PUSH
26251: LD_VAR 0 2
26255: ARRAY
26256: PPUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 34
26262: PUSH
26263: LD_INT 13
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 34
26272: PUSH
26273: LD_INT 52
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: PPUSH
26285: CALL_OW 72
26289: ST_TO_ADDR
// if cranes then
26290: LD_VAR 0 6
26294: IFFALSE 26430
// begin for j in cranes do
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_VAR 0 6
26305: PUSH
26306: FOR_IN
26307: IFFALSE 26428
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26309: LD_VAR 0 3
26313: PPUSH
26314: CALL_OW 256
26318: PUSH
26319: LD_INT 500
26321: GREATEREQUAL
26322: PUSH
26323: LD_VAR 0 3
26327: PPUSH
26328: CALL_OW 314
26332: NOT
26333: AND
26334: IFFALSE 26368
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26336: LD_VAR 0 3
26340: PPUSH
26341: LD_EXP 51
26345: PUSH
26346: LD_VAR 0 2
26350: ARRAY
26351: PPUSH
26352: LD_VAR 0 3
26356: PPUSH
26357: CALL_OW 74
26361: PPUSH
26362: CALL_OW 130
26366: GO 26426
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26368: LD_VAR 0 3
26372: PPUSH
26373: CALL_OW 256
26377: PUSH
26378: LD_INT 500
26380: LESS
26381: PUSH
26382: LD_VAR 0 3
26386: PPUSH
26387: LD_EXP 74
26391: PUSH
26392: LD_VAR 0 2
26396: ARRAY
26397: PPUSH
26398: CALL_OW 308
26402: NOT
26403: AND
26404: IFFALSE 26426
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26406: LD_VAR 0 3
26410: PPUSH
26411: LD_EXP 74
26415: PUSH
26416: LD_VAR 0 2
26420: ARRAY
26421: PPUSH
26422: CALL_OW 113
26426: GO 26306
26428: POP
26429: POP
// end ; if not tmp then
26430: LD_VAR 0 5
26434: NOT
26435: IFFALSE 26439
// continue ;
26437: GO 25955
// for j in tmp do
26439: LD_ADDR_VAR 0 3
26443: PUSH
26444: LD_VAR 0 5
26448: PUSH
26449: FOR_IN
26450: IFFALSE 26644
// begin if mc_need_heal [ i ] then
26452: LD_EXP 53
26456: PUSH
26457: LD_VAR 0 2
26461: ARRAY
26462: IFFALSE 26510
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26464: LD_VAR 0 3
26468: PUSH
26469: LD_EXP 53
26473: PUSH
26474: LD_VAR 0 2
26478: ARRAY
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: IN
26484: PUSH
26485: LD_VAR 0 3
26489: PUSH
26490: LD_EXP 53
26494: PUSH
26495: LD_VAR 0 2
26499: ARRAY
26500: PUSH
26501: LD_INT 2
26503: ARRAY
26504: IN
26505: OR
26506: IFFALSE 26510
// continue ;
26508: GO 26449
// if IsInUnit ( j ) then
26510: LD_VAR 0 3
26514: PPUSH
26515: CALL_OW 310
26519: IFFALSE 26530
// ComExitBuilding ( j ) ;
26521: LD_VAR 0 3
26525: PPUSH
26526: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
26530: LD_VAR 0 3
26534: PUSH
26535: LD_EXP 52
26539: PUSH
26540: LD_VAR 0 2
26544: ARRAY
26545: IN
26546: NOT
26547: IFFALSE 26605
// begin SetTag ( j , 101 ) ;
26549: LD_VAR 0 3
26553: PPUSH
26554: LD_INT 101
26556: PPUSH
26557: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26561: LD_ADDR_EXP 52
26565: PUSH
26566: LD_EXP 52
26570: PPUSH
26571: LD_VAR 0 2
26575: PUSH
26576: LD_EXP 52
26580: PUSH
26581: LD_VAR 0 2
26585: ARRAY
26586: PUSH
26587: LD_INT 1
26589: PLUS
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PPUSH
26595: LD_VAR 0 3
26599: PPUSH
26600: CALL 54248 0 3
26604: ST_TO_ADDR
// end ; wait ( 1 ) ;
26605: LD_INT 1
26607: PPUSH
26608: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
26612: LD_VAR 0 3
26616: PPUSH
26617: LD_EXP 51
26621: PUSH
26622: LD_VAR 0 2
26626: ARRAY
26627: PPUSH
26628: LD_VAR 0 3
26632: PPUSH
26633: CALL_OW 74
26637: PPUSH
26638: CALL_OW 130
// end ;
26642: GO 26449
26644: POP
26645: POP
// end ;
26646: GO 25955
26648: POP
26649: POP
// end ;
26650: LD_VAR 0 1
26654: RET
// export function MC_Heal ; var i , j , tmp ; begin
26655: LD_INT 0
26657: PPUSH
26658: PPUSH
26659: PPUSH
26660: PPUSH
// if not mc_bases then
26661: LD_EXP 50
26665: NOT
26666: IFFALSE 26670
// exit ;
26668: GO 27072
// for i = 1 to mc_bases do
26670: LD_ADDR_VAR 0 2
26674: PUSH
26675: DOUBLE
26676: LD_INT 1
26678: DEC
26679: ST_TO_ADDR
26680: LD_EXP 50
26684: PUSH
26685: FOR_TO
26686: IFFALSE 27070
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
26688: LD_EXP 53
26692: PUSH
26693: LD_VAR 0 2
26697: ARRAY
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: NOT
26703: PUSH
26704: LD_EXP 53
26708: PUSH
26709: LD_VAR 0 2
26713: ARRAY
26714: PUSH
26715: LD_INT 2
26717: ARRAY
26718: NOT
26719: AND
26720: IFFALSE 26758
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
26722: LD_ADDR_EXP 54
26726: PUSH
26727: LD_EXP 54
26731: PPUSH
26732: LD_VAR 0 2
26736: PPUSH
26737: EMPTY
26738: PPUSH
26739: CALL_OW 1
26743: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
26744: LD_VAR 0 2
26748: PPUSH
26749: LD_INT 102
26751: PPUSH
26752: CALL 21035 0 2
// continue ;
26756: GO 26685
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
26758: LD_ADDR_VAR 0 4
26762: PUSH
26763: LD_EXP 50
26767: PUSH
26768: LD_VAR 0 2
26772: ARRAY
26773: PPUSH
26774: LD_INT 25
26776: PUSH
26777: LD_INT 4
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 72
26788: ST_TO_ADDR
// if not tmp then
26789: LD_VAR 0 4
26793: NOT
26794: IFFALSE 26798
// continue ;
26796: GO 26685
// if mc_taming [ i ] then
26798: LD_EXP 81
26802: PUSH
26803: LD_VAR 0 2
26807: ARRAY
26808: IFFALSE 26832
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
26810: LD_ADDR_EXP 81
26814: PUSH
26815: LD_EXP 81
26819: PPUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: EMPTY
26826: PPUSH
26827: CALL_OW 1
26831: ST_TO_ADDR
// for j in tmp do
26832: LD_ADDR_VAR 0 3
26836: PUSH
26837: LD_VAR 0 4
26841: PUSH
26842: FOR_IN
26843: IFFALSE 27066
// begin if IsInUnit ( j ) then
26845: LD_VAR 0 3
26849: PPUSH
26850: CALL_OW 310
26854: IFFALSE 26865
// ComExitBuilding ( j ) ;
26856: LD_VAR 0 3
26860: PPUSH
26861: CALL_OW 122
// if not j in mc_healers [ i ] then
26865: LD_VAR 0 3
26869: PUSH
26870: LD_EXP 54
26874: PUSH
26875: LD_VAR 0 2
26879: ARRAY
26880: IN
26881: NOT
26882: IFFALSE 26928
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
26884: LD_ADDR_EXP 54
26888: PUSH
26889: LD_EXP 54
26893: PPUSH
26894: LD_VAR 0 2
26898: PUSH
26899: LD_EXP 54
26903: PUSH
26904: LD_VAR 0 2
26908: ARRAY
26909: PUSH
26910: LD_INT 1
26912: PLUS
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PPUSH
26918: LD_VAR 0 3
26922: PPUSH
26923: CALL 54248 0 3
26927: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
26928: LD_VAR 0 3
26932: PPUSH
26933: CALL_OW 110
26937: PUSH
26938: LD_INT 102
26940: NONEQUAL
26941: IFFALSE 26955
// SetTag ( j , 102 ) ;
26943: LD_VAR 0 3
26947: PPUSH
26948: LD_INT 102
26950: PPUSH
26951: CALL_OW 109
// Wait ( 3 ) ;
26955: LD_INT 3
26957: PPUSH
26958: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
26962: LD_EXP 53
26966: PUSH
26967: LD_VAR 0 2
26971: ARRAY
26972: PUSH
26973: LD_INT 1
26975: ARRAY
26976: IFFALSE 27008
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
26978: LD_VAR 0 3
26982: PPUSH
26983: LD_EXP 53
26987: PUSH
26988: LD_VAR 0 2
26992: ARRAY
26993: PUSH
26994: LD_INT 1
26996: ARRAY
26997: PUSH
26998: LD_INT 1
27000: ARRAY
27001: PPUSH
27002: CALL_OW 128
27006: GO 27064
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
27008: LD_VAR 0 3
27012: PPUSH
27013: CALL_OW 314
27017: NOT
27018: PUSH
27019: LD_EXP 53
27023: PUSH
27024: LD_VAR 0 2
27028: ARRAY
27029: PUSH
27030: LD_INT 2
27032: ARRAY
27033: AND
27034: IFFALSE 27064
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
27036: LD_VAR 0 3
27040: PPUSH
27041: LD_EXP 53
27045: PUSH
27046: LD_VAR 0 2
27050: ARRAY
27051: PUSH
27052: LD_INT 2
27054: ARRAY
27055: PUSH
27056: LD_INT 1
27058: ARRAY
27059: PPUSH
27060: CALL_OW 128
// end ;
27064: GO 26842
27066: POP
27067: POP
// end ;
27068: GO 26685
27070: POP
27071: POP
// end ;
27072: LD_VAR 0 1
27076: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
27077: LD_INT 0
27079: PPUSH
27080: PPUSH
27081: PPUSH
27082: PPUSH
27083: PPUSH
// if not mc_bases then
27084: LD_EXP 50
27088: NOT
27089: IFFALSE 27093
// exit ;
27091: GO 28236
// for i = 1 to mc_bases do
27093: LD_ADDR_VAR 0 2
27097: PUSH
27098: DOUBLE
27099: LD_INT 1
27101: DEC
27102: ST_TO_ADDR
27103: LD_EXP 50
27107: PUSH
27108: FOR_TO
27109: IFFALSE 28234
// begin if mc_scan [ i ] then
27111: LD_EXP 73
27115: PUSH
27116: LD_VAR 0 2
27120: ARRAY
27121: IFFALSE 27125
// continue ;
27123: GO 27108
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
27125: LD_EXP 55
27129: PUSH
27130: LD_VAR 0 2
27134: ARRAY
27135: NOT
27136: PUSH
27137: LD_EXP 57
27141: PUSH
27142: LD_VAR 0 2
27146: ARRAY
27147: NOT
27148: AND
27149: PUSH
27150: LD_EXP 56
27154: PUSH
27155: LD_VAR 0 2
27159: ARRAY
27160: AND
27161: IFFALSE 27199
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
27163: LD_ADDR_EXP 56
27167: PUSH
27168: LD_EXP 56
27172: PPUSH
27173: LD_VAR 0 2
27177: PPUSH
27178: EMPTY
27179: PPUSH
27180: CALL_OW 1
27184: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
27185: LD_VAR 0 2
27189: PPUSH
27190: LD_INT 103
27192: PPUSH
27193: CALL 21035 0 2
// continue ;
27197: GO 27108
// end ; if mc_construct_list [ i ] then
27199: LD_EXP 57
27203: PUSH
27204: LD_VAR 0 2
27208: ARRAY
27209: IFFALSE 27429
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27211: LD_ADDR_VAR 0 4
27215: PUSH
27216: LD_EXP 50
27220: PUSH
27221: LD_VAR 0 2
27225: ARRAY
27226: PPUSH
27227: LD_INT 25
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PPUSH
27237: CALL_OW 72
27241: PUSH
27242: LD_EXP 52
27246: PUSH
27247: LD_VAR 0 2
27251: ARRAY
27252: DIFF
27253: ST_TO_ADDR
// if not tmp then
27254: LD_VAR 0 4
27258: NOT
27259: IFFALSE 27263
// continue ;
27261: GO 27108
// for j in tmp do
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_VAR 0 4
27272: PUSH
27273: FOR_IN
27274: IFFALSE 27425
// begin if not mc_builders [ i ] then
27276: LD_EXP 56
27280: PUSH
27281: LD_VAR 0 2
27285: ARRAY
27286: NOT
27287: IFFALSE 27345
// begin SetTag ( j , 103 ) ;
27289: LD_VAR 0 3
27293: PPUSH
27294: LD_INT 103
27296: PPUSH
27297: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27301: LD_ADDR_EXP 56
27305: PUSH
27306: LD_EXP 56
27310: PPUSH
27311: LD_VAR 0 2
27315: PUSH
27316: LD_EXP 56
27320: PUSH
27321: LD_VAR 0 2
27325: ARRAY
27326: PUSH
27327: LD_INT 1
27329: PLUS
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PPUSH
27335: LD_VAR 0 3
27339: PPUSH
27340: CALL 54248 0 3
27344: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27345: LD_VAR 0 3
27349: PPUSH
27350: CALL_OW 310
27354: IFFALSE 27365
// ComExitBuilding ( j ) ;
27356: LD_VAR 0 3
27360: PPUSH
27361: CALL_OW 122
// wait ( 3 ) ;
27365: LD_INT 3
27367: PPUSH
27368: CALL_OW 67
// if not mc_construct_list [ i ] then
27372: LD_EXP 57
27376: PUSH
27377: LD_VAR 0 2
27381: ARRAY
27382: NOT
27383: IFFALSE 27387
// break ;
27385: GO 27425
// if not HasTask ( j ) then
27387: LD_VAR 0 3
27391: PPUSH
27392: CALL_OW 314
27396: NOT
27397: IFFALSE 27423
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27399: LD_VAR 0 3
27403: PPUSH
27404: LD_EXP 57
27408: PUSH
27409: LD_VAR 0 2
27413: ARRAY
27414: PUSH
27415: LD_INT 1
27417: ARRAY
27418: PPUSH
27419: CALL 57099 0 2
// end ;
27423: GO 27273
27425: POP
27426: POP
// end else
27427: GO 28232
// if mc_build_list [ i ] then
27429: LD_EXP 55
27433: PUSH
27434: LD_VAR 0 2
27438: ARRAY
27439: IFFALSE 28232
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27441: LD_ADDR_VAR 0 5
27445: PUSH
27446: LD_EXP 50
27450: PUSH
27451: LD_VAR 0 2
27455: ARRAY
27456: PPUSH
27457: LD_INT 2
27459: PUSH
27460: LD_INT 30
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 30
27472: PUSH
27473: LD_INT 1
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: PPUSH
27485: CALL_OW 72
27489: ST_TO_ADDR
// if depot then
27490: LD_VAR 0 5
27494: IFFALSE 27512
// depot := depot [ 1 ] else
27496: LD_ADDR_VAR 0 5
27500: PUSH
27501: LD_VAR 0 5
27505: PUSH
27506: LD_INT 1
27508: ARRAY
27509: ST_TO_ADDR
27510: GO 27520
// depot := 0 ;
27512: LD_ADDR_VAR 0 5
27516: PUSH
27517: LD_INT 0
27519: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
27520: LD_EXP 55
27524: PUSH
27525: LD_VAR 0 2
27529: ARRAY
27530: PUSH
27531: LD_INT 1
27533: ARRAY
27534: PUSH
27535: LD_INT 1
27537: ARRAY
27538: PPUSH
27539: CALL 56929 0 1
27543: PUSH
27544: LD_EXP 50
27548: PUSH
27549: LD_VAR 0 2
27553: ARRAY
27554: PPUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 30
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 30
27570: PUSH
27571: LD_INT 3
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 72
27587: NOT
27588: AND
27589: IFFALSE 27694
// begin for j = 1 to mc_build_list [ i ] do
27591: LD_ADDR_VAR 0 3
27595: PUSH
27596: DOUBLE
27597: LD_INT 1
27599: DEC
27600: ST_TO_ADDR
27601: LD_EXP 55
27605: PUSH
27606: LD_VAR 0 2
27610: ARRAY
27611: PUSH
27612: FOR_TO
27613: IFFALSE 27692
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
27615: LD_EXP 55
27619: PUSH
27620: LD_VAR 0 2
27624: ARRAY
27625: PUSH
27626: LD_VAR 0 3
27630: ARRAY
27631: PUSH
27632: LD_INT 1
27634: ARRAY
27635: PUSH
27636: LD_INT 2
27638: EQUAL
27639: IFFALSE 27690
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
27641: LD_ADDR_EXP 55
27645: PUSH
27646: LD_EXP 55
27650: PPUSH
27651: LD_VAR 0 2
27655: PPUSH
27656: LD_EXP 55
27660: PUSH
27661: LD_VAR 0 2
27665: ARRAY
27666: PPUSH
27667: LD_VAR 0 3
27671: PPUSH
27672: LD_INT 1
27674: PPUSH
27675: LD_INT 0
27677: PPUSH
27678: CALL 53666 0 4
27682: PPUSH
27683: CALL_OW 1
27687: ST_TO_ADDR
// break ;
27688: GO 27692
// end ;
27690: GO 27612
27692: POP
27693: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
27694: LD_EXP 55
27698: PUSH
27699: LD_VAR 0 2
27703: ARRAY
27704: PUSH
27705: LD_INT 1
27707: ARRAY
27708: PUSH
27709: LD_INT 1
27711: ARRAY
27712: PUSH
27713: LD_INT 0
27715: EQUAL
27716: PUSH
27717: LD_VAR 0 5
27721: PUSH
27722: LD_VAR 0 5
27726: PPUSH
27727: LD_EXP 55
27731: PUSH
27732: LD_VAR 0 2
27736: ARRAY
27737: PUSH
27738: LD_INT 1
27740: ARRAY
27741: PUSH
27742: LD_INT 1
27744: ARRAY
27745: PPUSH
27746: LD_EXP 55
27750: PUSH
27751: LD_VAR 0 2
27755: ARRAY
27756: PUSH
27757: LD_INT 1
27759: ARRAY
27760: PUSH
27761: LD_INT 2
27763: ARRAY
27764: PPUSH
27765: LD_EXP 55
27769: PUSH
27770: LD_VAR 0 2
27774: ARRAY
27775: PUSH
27776: LD_INT 1
27778: ARRAY
27779: PUSH
27780: LD_INT 3
27782: ARRAY
27783: PPUSH
27784: LD_EXP 55
27788: PUSH
27789: LD_VAR 0 2
27793: ARRAY
27794: PUSH
27795: LD_INT 1
27797: ARRAY
27798: PUSH
27799: LD_INT 4
27801: ARRAY
27802: PPUSH
27803: CALL 61663 0 5
27807: AND
27808: OR
27809: IFFALSE 28090
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27811: LD_ADDR_VAR 0 4
27815: PUSH
27816: LD_EXP 50
27820: PUSH
27821: LD_VAR 0 2
27825: ARRAY
27826: PPUSH
27827: LD_INT 25
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PPUSH
27837: CALL_OW 72
27841: PUSH
27842: LD_EXP 52
27846: PUSH
27847: LD_VAR 0 2
27851: ARRAY
27852: DIFF
27853: ST_TO_ADDR
// if not tmp then
27854: LD_VAR 0 4
27858: NOT
27859: IFFALSE 27863
// continue ;
27861: GO 27108
// for j in tmp do
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_VAR 0 4
27872: PUSH
27873: FOR_IN
27874: IFFALSE 28086
// begin if not mc_builders [ i ] then
27876: LD_EXP 56
27880: PUSH
27881: LD_VAR 0 2
27885: ARRAY
27886: NOT
27887: IFFALSE 27945
// begin SetTag ( j , 103 ) ;
27889: LD_VAR 0 3
27893: PPUSH
27894: LD_INT 103
27896: PPUSH
27897: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27901: LD_ADDR_EXP 56
27905: PUSH
27906: LD_EXP 56
27910: PPUSH
27911: LD_VAR 0 2
27915: PUSH
27916: LD_EXP 56
27920: PUSH
27921: LD_VAR 0 2
27925: ARRAY
27926: PUSH
27927: LD_INT 1
27929: PLUS
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PPUSH
27935: LD_VAR 0 3
27939: PPUSH
27940: CALL 54248 0 3
27944: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27945: LD_VAR 0 3
27949: PPUSH
27950: CALL_OW 310
27954: IFFALSE 27965
// ComExitBuilding ( j ) ;
27956: LD_VAR 0 3
27960: PPUSH
27961: CALL_OW 122
// wait ( 3 ) ;
27965: LD_INT 3
27967: PPUSH
27968: CALL_OW 67
// if not mc_build_list [ i ] then
27972: LD_EXP 55
27976: PUSH
27977: LD_VAR 0 2
27981: ARRAY
27982: NOT
27983: IFFALSE 27987
// break ;
27985: GO 28086
// if not HasTask ( j ) then
27987: LD_VAR 0 3
27991: PPUSH
27992: CALL_OW 314
27996: NOT
27997: IFFALSE 28084
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
27999: LD_VAR 0 3
28003: PPUSH
28004: LD_EXP 55
28008: PUSH
28009: LD_VAR 0 2
28013: ARRAY
28014: PUSH
28015: LD_INT 1
28017: ARRAY
28018: PUSH
28019: LD_INT 1
28021: ARRAY
28022: PPUSH
28023: LD_EXP 55
28027: PUSH
28028: LD_VAR 0 2
28032: ARRAY
28033: PUSH
28034: LD_INT 1
28036: ARRAY
28037: PUSH
28038: LD_INT 2
28040: ARRAY
28041: PPUSH
28042: LD_EXP 55
28046: PUSH
28047: LD_VAR 0 2
28051: ARRAY
28052: PUSH
28053: LD_INT 1
28055: ARRAY
28056: PUSH
28057: LD_INT 3
28059: ARRAY
28060: PPUSH
28061: LD_EXP 55
28065: PUSH
28066: LD_VAR 0 2
28070: ARRAY
28071: PUSH
28072: LD_INT 1
28074: ARRAY
28075: PUSH
28076: LD_INT 4
28078: ARRAY
28079: PPUSH
28080: CALL_OW 145
// end ;
28084: GO 27873
28086: POP
28087: POP
// end else
28088: GO 28232
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
28090: LD_EXP 50
28094: PUSH
28095: LD_VAR 0 2
28099: ARRAY
28100: PPUSH
28101: LD_EXP 55
28105: PUSH
28106: LD_VAR 0 2
28110: ARRAY
28111: PUSH
28112: LD_INT 1
28114: ARRAY
28115: PUSH
28116: LD_INT 1
28118: ARRAY
28119: PPUSH
28120: LD_EXP 55
28124: PUSH
28125: LD_VAR 0 2
28129: ARRAY
28130: PUSH
28131: LD_INT 1
28133: ARRAY
28134: PUSH
28135: LD_INT 2
28137: ARRAY
28138: PPUSH
28139: LD_EXP 55
28143: PUSH
28144: LD_VAR 0 2
28148: ARRAY
28149: PUSH
28150: LD_INT 1
28152: ARRAY
28153: PUSH
28154: LD_INT 3
28156: ARRAY
28157: PPUSH
28158: LD_EXP 55
28162: PUSH
28163: LD_VAR 0 2
28167: ARRAY
28168: PUSH
28169: LD_INT 1
28171: ARRAY
28172: PUSH
28173: LD_INT 4
28175: ARRAY
28176: PPUSH
28177: CALL 60999 0 5
28181: NOT
28182: IFFALSE 28232
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
28184: LD_ADDR_EXP 55
28188: PUSH
28189: LD_EXP 55
28193: PPUSH
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_EXP 55
28203: PUSH
28204: LD_VAR 0 2
28208: ARRAY
28209: PPUSH
28210: LD_INT 1
28212: PPUSH
28213: LD_INT 1
28215: NEG
28216: PPUSH
28217: LD_INT 0
28219: PPUSH
28220: CALL 53666 0 4
28224: PPUSH
28225: CALL_OW 1
28229: ST_TO_ADDR
// continue ;
28230: GO 27108
// end ; end ; end ;
28232: GO 27108
28234: POP
28235: POP
// end ;
28236: LD_VAR 0 1
28240: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
28241: LD_INT 0
28243: PPUSH
28244: PPUSH
28245: PPUSH
28246: PPUSH
28247: PPUSH
28248: PPUSH
// if not mc_bases then
28249: LD_EXP 50
28253: NOT
28254: IFFALSE 28258
// exit ;
28256: GO 28685
// for i = 1 to mc_bases do
28258: LD_ADDR_VAR 0 2
28262: PUSH
28263: DOUBLE
28264: LD_INT 1
28266: DEC
28267: ST_TO_ADDR
28268: LD_EXP 50
28272: PUSH
28273: FOR_TO
28274: IFFALSE 28683
// begin tmp := mc_build_upgrade [ i ] ;
28276: LD_ADDR_VAR 0 4
28280: PUSH
28281: LD_EXP 82
28285: PUSH
28286: LD_VAR 0 2
28290: ARRAY
28291: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28292: LD_ADDR_VAR 0 6
28296: PUSH
28297: LD_EXP 83
28301: PUSH
28302: LD_VAR 0 2
28306: ARRAY
28307: PPUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 30
28313: PUSH
28314: LD_INT 6
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 30
28323: PUSH
28324: LD_INT 7
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: PPUSH
28336: CALL_OW 72
28340: ST_TO_ADDR
// if not tmp and not lab then
28341: LD_VAR 0 4
28345: NOT
28346: PUSH
28347: LD_VAR 0 6
28351: NOT
28352: AND
28353: IFFALSE 28357
// continue ;
28355: GO 28273
// if tmp then
28357: LD_VAR 0 4
28361: IFFALSE 28481
// for j in tmp do
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_VAR 0 4
28372: PUSH
28373: FOR_IN
28374: IFFALSE 28479
// begin if UpgradeCost ( j ) then
28376: LD_VAR 0 3
28380: PPUSH
28381: CALL 60659 0 1
28385: IFFALSE 28477
// begin ComUpgrade ( j ) ;
28387: LD_VAR 0 3
28391: PPUSH
28392: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28396: LD_ADDR_EXP 82
28400: PUSH
28401: LD_EXP 82
28405: PPUSH
28406: LD_VAR 0 2
28410: PPUSH
28411: LD_EXP 82
28415: PUSH
28416: LD_VAR 0 2
28420: ARRAY
28421: PUSH
28422: LD_VAR 0 3
28426: DIFF
28427: PPUSH
28428: CALL_OW 1
28432: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28433: LD_ADDR_EXP 57
28437: PUSH
28438: LD_EXP 57
28442: PPUSH
28443: LD_VAR 0 2
28447: PUSH
28448: LD_EXP 57
28452: PUSH
28453: LD_VAR 0 2
28457: ARRAY
28458: PUSH
28459: LD_INT 1
28461: PLUS
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: LD_VAR 0 3
28471: PPUSH
28472: CALL 54248 0 3
28476: ST_TO_ADDR
// end ; end ;
28477: GO 28373
28479: POP
28480: POP
// if not lab or not mc_lab_upgrade [ i ] then
28481: LD_VAR 0 6
28485: NOT
28486: PUSH
28487: LD_EXP 84
28491: PUSH
28492: LD_VAR 0 2
28496: ARRAY
28497: NOT
28498: OR
28499: IFFALSE 28503
// continue ;
28501: GO 28273
// for j in lab do
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_VAR 0 6
28512: PUSH
28513: FOR_IN
28514: IFFALSE 28679
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
28516: LD_VAR 0 3
28520: PPUSH
28521: CALL_OW 266
28525: PUSH
28526: LD_INT 6
28528: PUSH
28529: LD_INT 7
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: IN
28536: PUSH
28537: LD_VAR 0 3
28541: PPUSH
28542: CALL_OW 461
28546: PUSH
28547: LD_INT 1
28549: NONEQUAL
28550: AND
28551: IFFALSE 28677
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
28553: LD_VAR 0 3
28557: PPUSH
28558: LD_EXP 84
28562: PUSH
28563: LD_VAR 0 2
28567: ARRAY
28568: PUSH
28569: LD_INT 1
28571: ARRAY
28572: PPUSH
28573: CALL 60864 0 2
28577: IFFALSE 28677
// begin ComCancel ( j ) ;
28579: LD_VAR 0 3
28583: PPUSH
28584: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
28588: LD_VAR 0 3
28592: PPUSH
28593: LD_EXP 84
28597: PUSH
28598: LD_VAR 0 2
28602: ARRAY
28603: PUSH
28604: LD_INT 1
28606: ARRAY
28607: PPUSH
28608: CALL_OW 207
// if not j in mc_construct_list [ i ] then
28612: LD_VAR 0 3
28616: PUSH
28617: LD_EXP 57
28621: PUSH
28622: LD_VAR 0 2
28626: ARRAY
28627: IN
28628: NOT
28629: IFFALSE 28675
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28631: LD_ADDR_EXP 57
28635: PUSH
28636: LD_EXP 57
28640: PPUSH
28641: LD_VAR 0 2
28645: PUSH
28646: LD_EXP 57
28650: PUSH
28651: LD_VAR 0 2
28655: ARRAY
28656: PUSH
28657: LD_INT 1
28659: PLUS
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PPUSH
28665: LD_VAR 0 3
28669: PPUSH
28670: CALL 54248 0 3
28674: ST_TO_ADDR
// break ;
28675: GO 28679
// end ; end ; end ;
28677: GO 28513
28679: POP
28680: POP
// end ;
28681: GO 28273
28683: POP
28684: POP
// end ;
28685: LD_VAR 0 1
28689: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
28690: LD_INT 0
28692: PPUSH
28693: PPUSH
28694: PPUSH
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
28700: PPUSH
// if not mc_bases then
28701: LD_EXP 50
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 29115
// for i = 1 to mc_bases do
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: DOUBLE
28716: LD_INT 1
28718: DEC
28719: ST_TO_ADDR
28720: LD_EXP 50
28724: PUSH
28725: FOR_TO
28726: IFFALSE 29113
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
28728: LD_EXP 58
28732: PUSH
28733: LD_VAR 0 2
28737: ARRAY
28738: NOT
28739: PUSH
28740: LD_EXP 50
28744: PUSH
28745: LD_VAR 0 2
28749: ARRAY
28750: PPUSH
28751: LD_INT 30
28753: PUSH
28754: LD_INT 3
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PPUSH
28761: CALL_OW 72
28765: NOT
28766: OR
28767: IFFALSE 28771
// continue ;
28769: GO 28725
// busy := false ;
28771: LD_ADDR_VAR 0 8
28775: PUSH
28776: LD_INT 0
28778: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
28779: LD_ADDR_VAR 0 4
28783: PUSH
28784: LD_EXP 50
28788: PUSH
28789: LD_VAR 0 2
28793: ARRAY
28794: PPUSH
28795: LD_INT 30
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 72
28809: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
28810: LD_ADDR_VAR 0 6
28814: PUSH
28815: LD_EXP 58
28819: PUSH
28820: LD_VAR 0 2
28824: ARRAY
28825: PPUSH
28826: LD_INT 2
28828: PUSH
28829: LD_INT 30
28831: PUSH
28832: LD_INT 32
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 30
28841: PUSH
28842: LD_INT 33
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 72
28858: ST_TO_ADDR
// if not t then
28859: LD_VAR 0 6
28863: NOT
28864: IFFALSE 28868
// continue ;
28866: GO 28725
// for j in tmp do
28868: LD_ADDR_VAR 0 3
28872: PUSH
28873: LD_VAR 0 4
28877: PUSH
28878: FOR_IN
28879: IFFALSE 28909
// if not BuildingStatus ( j ) = bs_idle then
28881: LD_VAR 0 3
28885: PPUSH
28886: CALL_OW 461
28890: PUSH
28891: LD_INT 2
28893: EQUAL
28894: NOT
28895: IFFALSE 28907
// begin busy := true ;
28897: LD_ADDR_VAR 0 8
28901: PUSH
28902: LD_INT 1
28904: ST_TO_ADDR
// break ;
28905: GO 28909
// end ;
28907: GO 28878
28909: POP
28910: POP
// if busy then
28911: LD_VAR 0 8
28915: IFFALSE 28919
// continue ;
28917: GO 28725
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
28919: LD_ADDR_VAR 0 7
28923: PUSH
28924: LD_VAR 0 6
28928: PPUSH
28929: LD_INT 35
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 72
28943: ST_TO_ADDR
// if tw then
28944: LD_VAR 0 7
28948: IFFALSE 29025
// begin tw := tw [ 1 ] ;
28950: LD_ADDR_VAR 0 7
28954: PUSH
28955: LD_VAR 0 7
28959: PUSH
28960: LD_INT 1
28962: ARRAY
28963: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
28964: LD_ADDR_VAR 0 9
28968: PUSH
28969: LD_VAR 0 7
28973: PPUSH
28974: LD_EXP 75
28978: PUSH
28979: LD_VAR 0 2
28983: ARRAY
28984: PPUSH
28985: CALL 59218 0 2
28989: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
28990: LD_EXP 89
28994: PUSH
28995: LD_VAR 0 2
28999: ARRAY
29000: IFFALSE 29023
// if not weapon in mc_allowed_tower_weapons [ i ] then
29002: LD_VAR 0 9
29006: PUSH
29007: LD_EXP 89
29011: PUSH
29012: LD_VAR 0 2
29016: ARRAY
29017: IN
29018: NOT
29019: IFFALSE 29023
// continue ;
29021: GO 28725
// end else
29023: GO 29088
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
29025: LD_ADDR_VAR 0 5
29029: PUSH
29030: LD_EXP 58
29034: PUSH
29035: LD_VAR 0 2
29039: ARRAY
29040: PPUSH
29041: LD_VAR 0 4
29045: PPUSH
29046: CALL 89419 0 2
29050: ST_TO_ADDR
// if not tmp2 then
29051: LD_VAR 0 5
29055: NOT
29056: IFFALSE 29060
// continue ;
29058: GO 28725
// tw := tmp2 [ 1 ] ;
29060: LD_ADDR_VAR 0 7
29064: PUSH
29065: LD_VAR 0 5
29069: PUSH
29070: LD_INT 1
29072: ARRAY
29073: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
29074: LD_ADDR_VAR 0 9
29078: PUSH
29079: LD_VAR 0 5
29083: PUSH
29084: LD_INT 2
29086: ARRAY
29087: ST_TO_ADDR
// end ; if not weapon then
29088: LD_VAR 0 9
29092: NOT
29093: IFFALSE 29097
// continue ;
29095: GO 28725
// ComPlaceWeapon ( tw , weapon ) ;
29097: LD_VAR 0 7
29101: PPUSH
29102: LD_VAR 0 9
29106: PPUSH
29107: CALL_OW 148
// end ;
29111: GO 28725
29113: POP
29114: POP
// end ;
29115: LD_VAR 0 1
29119: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
29124: PPUSH
29125: PPUSH
29126: PPUSH
29127: PPUSH
// if not mc_bases then
29128: LD_EXP 50
29132: NOT
29133: IFFALSE 29137
// exit ;
29135: GO 30149
// for i = 1 to mc_bases do
29137: LD_ADDR_VAR 0 2
29141: PUSH
29142: DOUBLE
29143: LD_INT 1
29145: DEC
29146: ST_TO_ADDR
29147: LD_EXP 50
29151: PUSH
29152: FOR_TO
29153: IFFALSE 30147
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
29155: LD_EXP 63
29159: PUSH
29160: LD_VAR 0 2
29164: ARRAY
29165: NOT
29166: PUSH
29167: LD_EXP 63
29171: PUSH
29172: LD_VAR 0 2
29176: ARRAY
29177: PUSH
29178: LD_EXP 64
29182: PUSH
29183: LD_VAR 0 2
29187: ARRAY
29188: EQUAL
29189: OR
29190: IFFALSE 29194
// continue ;
29192: GO 29152
// if mc_miners [ i ] then
29194: LD_EXP 64
29198: PUSH
29199: LD_VAR 0 2
29203: ARRAY
29204: IFFALSE 29834
// begin k := 1 ;
29206: LD_ADDR_VAR 0 4
29210: PUSH
29211: LD_INT 1
29213: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
29214: LD_ADDR_VAR 0 3
29218: PUSH
29219: DOUBLE
29220: LD_EXP 64
29224: PUSH
29225: LD_VAR 0 2
29229: ARRAY
29230: INC
29231: ST_TO_ADDR
29232: LD_INT 1
29234: PUSH
29235: FOR_DOWNTO
29236: IFFALSE 29832
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
29238: LD_EXP 64
29242: PUSH
29243: LD_VAR 0 2
29247: ARRAY
29248: PUSH
29249: LD_VAR 0 3
29253: ARRAY
29254: PPUSH
29255: CALL_OW 301
29259: PUSH
29260: LD_EXP 64
29264: PUSH
29265: LD_VAR 0 2
29269: ARRAY
29270: PUSH
29271: LD_VAR 0 3
29275: ARRAY
29276: PPUSH
29277: CALL_OW 257
29281: PUSH
29282: LD_INT 1
29284: NONEQUAL
29285: OR
29286: IFFALSE 29349
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29288: LD_ADDR_VAR 0 5
29292: PUSH
29293: LD_EXP 64
29297: PUSH
29298: LD_VAR 0 2
29302: ARRAY
29303: PUSH
29304: LD_EXP 64
29308: PUSH
29309: LD_VAR 0 2
29313: ARRAY
29314: PUSH
29315: LD_VAR 0 3
29319: ARRAY
29320: DIFF
29321: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29322: LD_ADDR_EXP 64
29326: PUSH
29327: LD_EXP 64
29331: PPUSH
29332: LD_VAR 0 2
29336: PPUSH
29337: LD_VAR 0 5
29341: PPUSH
29342: CALL_OW 1
29346: ST_TO_ADDR
// continue ;
29347: GO 29235
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
29349: LD_EXP 64
29353: PUSH
29354: LD_VAR 0 2
29358: ARRAY
29359: PUSH
29360: LD_VAR 0 3
29364: ARRAY
29365: PPUSH
29366: CALL 54184 0 1
29370: PUSH
29371: LD_EXP 64
29375: PUSH
29376: LD_VAR 0 2
29380: ARRAY
29381: PUSH
29382: LD_VAR 0 3
29386: ARRAY
29387: PPUSH
29388: CALL_OW 255
29392: PPUSH
29393: LD_EXP 63
29397: PUSH
29398: LD_VAR 0 2
29402: ARRAY
29403: PUSH
29404: LD_VAR 0 4
29408: ARRAY
29409: PUSH
29410: LD_INT 1
29412: ARRAY
29413: PPUSH
29414: LD_EXP 63
29418: PUSH
29419: LD_VAR 0 2
29423: ARRAY
29424: PUSH
29425: LD_VAR 0 4
29429: ARRAY
29430: PUSH
29431: LD_INT 2
29433: ARRAY
29434: PPUSH
29435: LD_INT 15
29437: PPUSH
29438: CALL 55144 0 4
29442: PUSH
29443: LD_INT 4
29445: ARRAY
29446: PUSH
29447: LD_EXP 64
29451: PUSH
29452: LD_VAR 0 2
29456: ARRAY
29457: PUSH
29458: LD_VAR 0 3
29462: ARRAY
29463: PPUSH
29464: LD_INT 10
29466: PPUSH
29467: CALL 56841 0 2
29471: PUSH
29472: LD_INT 4
29474: ARRAY
29475: OR
29476: AND
29477: IFFALSE 29500
// ComStop ( mc_miners [ i ] [ j ] ) ;
29479: LD_EXP 64
29483: PUSH
29484: LD_VAR 0 2
29488: ARRAY
29489: PUSH
29490: LD_VAR 0 3
29494: ARRAY
29495: PPUSH
29496: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
29500: LD_EXP 64
29504: PUSH
29505: LD_VAR 0 2
29509: ARRAY
29510: PUSH
29511: LD_VAR 0 3
29515: ARRAY
29516: PPUSH
29517: CALL_OW 257
29521: PUSH
29522: LD_INT 1
29524: EQUAL
29525: PUSH
29526: LD_EXP 64
29530: PUSH
29531: LD_VAR 0 2
29535: ARRAY
29536: PUSH
29537: LD_VAR 0 3
29541: ARRAY
29542: PPUSH
29543: CALL_OW 459
29547: NOT
29548: AND
29549: PUSH
29550: LD_EXP 64
29554: PUSH
29555: LD_VAR 0 2
29559: ARRAY
29560: PUSH
29561: LD_VAR 0 3
29565: ARRAY
29566: PPUSH
29567: CALL_OW 255
29571: PPUSH
29572: LD_EXP 63
29576: PUSH
29577: LD_VAR 0 2
29581: ARRAY
29582: PUSH
29583: LD_VAR 0 4
29587: ARRAY
29588: PUSH
29589: LD_INT 1
29591: ARRAY
29592: PPUSH
29593: LD_EXP 63
29597: PUSH
29598: LD_VAR 0 2
29602: ARRAY
29603: PUSH
29604: LD_VAR 0 4
29608: ARRAY
29609: PUSH
29610: LD_INT 2
29612: ARRAY
29613: PPUSH
29614: LD_INT 15
29616: PPUSH
29617: CALL 55144 0 4
29621: PUSH
29622: LD_INT 4
29624: ARRAY
29625: PUSH
29626: LD_INT 0
29628: EQUAL
29629: AND
29630: PUSH
29631: LD_EXP 64
29635: PUSH
29636: LD_VAR 0 2
29640: ARRAY
29641: PUSH
29642: LD_VAR 0 3
29646: ARRAY
29647: PPUSH
29648: CALL_OW 314
29652: NOT
29653: AND
29654: IFFALSE 29830
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29656: LD_EXP 64
29660: PUSH
29661: LD_VAR 0 2
29665: ARRAY
29666: PUSH
29667: LD_VAR 0 3
29671: ARRAY
29672: PPUSH
29673: CALL_OW 310
29677: IFFALSE 29700
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
29679: LD_EXP 64
29683: PUSH
29684: LD_VAR 0 2
29688: ARRAY
29689: PUSH
29690: LD_VAR 0 3
29694: ARRAY
29695: PPUSH
29696: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
29700: LD_EXP 64
29704: PUSH
29705: LD_VAR 0 2
29709: ARRAY
29710: PUSH
29711: LD_VAR 0 3
29715: ARRAY
29716: PPUSH
29717: CALL_OW 314
29721: NOT
29722: IFFALSE 29790
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
29724: LD_EXP 64
29728: PUSH
29729: LD_VAR 0 2
29733: ARRAY
29734: PUSH
29735: LD_VAR 0 3
29739: ARRAY
29740: PPUSH
29741: LD_EXP 63
29745: PUSH
29746: LD_VAR 0 2
29750: ARRAY
29751: PUSH
29752: LD_VAR 0 4
29756: ARRAY
29757: PUSH
29758: LD_INT 1
29760: ARRAY
29761: PPUSH
29762: LD_EXP 63
29766: PUSH
29767: LD_VAR 0 2
29771: ARRAY
29772: PUSH
29773: LD_VAR 0 4
29777: ARRAY
29778: PUSH
29779: LD_INT 2
29781: ARRAY
29782: PPUSH
29783: LD_INT 0
29785: PPUSH
29786: CALL_OW 193
// k := k + 1 ;
29790: LD_ADDR_VAR 0 4
29794: PUSH
29795: LD_VAR 0 4
29799: PUSH
29800: LD_INT 1
29802: PLUS
29803: ST_TO_ADDR
// if k > mc_mines [ i ] then
29804: LD_VAR 0 4
29808: PUSH
29809: LD_EXP 63
29813: PUSH
29814: LD_VAR 0 2
29818: ARRAY
29819: GREATER
29820: IFFALSE 29830
// k := 1 ;
29822: LD_ADDR_VAR 0 4
29826: PUSH
29827: LD_INT 1
29829: ST_TO_ADDR
// end ; end ;
29830: GO 29235
29832: POP
29833: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
29834: LD_ADDR_VAR 0 5
29838: PUSH
29839: LD_EXP 50
29843: PUSH
29844: LD_VAR 0 2
29848: ARRAY
29849: PPUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 30
29855: PUSH
29856: LD_INT 4
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 30
29865: PUSH
29866: LD_INT 5
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 30
29875: PUSH
29876: LD_INT 32
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: PPUSH
29889: CALL_OW 72
29893: ST_TO_ADDR
// if not tmp then
29894: LD_VAR 0 5
29898: NOT
29899: IFFALSE 29903
// continue ;
29901: GO 29152
// list := [ ] ;
29903: LD_ADDR_VAR 0 6
29907: PUSH
29908: EMPTY
29909: ST_TO_ADDR
// for j in tmp do
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: LD_VAR 0 5
29919: PUSH
29920: FOR_IN
29921: IFFALSE 29990
// begin for k in UnitsInside ( j ) do
29923: LD_ADDR_VAR 0 4
29927: PUSH
29928: LD_VAR 0 3
29932: PPUSH
29933: CALL_OW 313
29937: PUSH
29938: FOR_IN
29939: IFFALSE 29986
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
29941: LD_VAR 0 4
29945: PPUSH
29946: CALL_OW 257
29950: PUSH
29951: LD_INT 1
29953: EQUAL
29954: PUSH
29955: LD_VAR 0 4
29959: PPUSH
29960: CALL_OW 459
29964: NOT
29965: AND
29966: IFFALSE 29984
// list := list ^ k ;
29968: LD_ADDR_VAR 0 6
29972: PUSH
29973: LD_VAR 0 6
29977: PUSH
29978: LD_VAR 0 4
29982: ADD
29983: ST_TO_ADDR
29984: GO 29938
29986: POP
29987: POP
// end ;
29988: GO 29920
29990: POP
29991: POP
// list := list diff mc_miners [ i ] ;
29992: LD_ADDR_VAR 0 6
29996: PUSH
29997: LD_VAR 0 6
30001: PUSH
30002: LD_EXP 64
30006: PUSH
30007: LD_VAR 0 2
30011: ARRAY
30012: DIFF
30013: ST_TO_ADDR
// if not list then
30014: LD_VAR 0 6
30018: NOT
30019: IFFALSE 30023
// continue ;
30021: GO 29152
// k := mc_mines [ i ] - mc_miners [ i ] ;
30023: LD_ADDR_VAR 0 4
30027: PUSH
30028: LD_EXP 63
30032: PUSH
30033: LD_VAR 0 2
30037: ARRAY
30038: PUSH
30039: LD_EXP 64
30043: PUSH
30044: LD_VAR 0 2
30048: ARRAY
30049: MINUS
30050: ST_TO_ADDR
// if k > list then
30051: LD_VAR 0 4
30055: PUSH
30056: LD_VAR 0 6
30060: GREATER
30061: IFFALSE 30073
// k := list ;
30063: LD_ADDR_VAR 0 4
30067: PUSH
30068: LD_VAR 0 6
30072: ST_TO_ADDR
// for j = 1 to k do
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: DOUBLE
30079: LD_INT 1
30081: DEC
30082: ST_TO_ADDR
30083: LD_VAR 0 4
30087: PUSH
30088: FOR_TO
30089: IFFALSE 30143
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
30091: LD_ADDR_EXP 64
30095: PUSH
30096: LD_EXP 64
30100: PPUSH
30101: LD_VAR 0 2
30105: PUSH
30106: LD_EXP 64
30110: PUSH
30111: LD_VAR 0 2
30115: ARRAY
30116: PUSH
30117: LD_INT 1
30119: PLUS
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: LD_VAR 0 6
30129: PUSH
30130: LD_VAR 0 3
30134: ARRAY
30135: PPUSH
30136: CALL 54248 0 3
30140: ST_TO_ADDR
30141: GO 30088
30143: POP
30144: POP
// end ;
30145: GO 29152
30147: POP
30148: POP
// end ;
30149: LD_VAR 0 1
30153: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
30154: LD_INT 0
30156: PPUSH
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
30163: PPUSH
30164: PPUSH
30165: PPUSH
// if not mc_bases then
30166: LD_EXP 50
30170: NOT
30171: IFFALSE 30175
// exit ;
30173: GO 31925
// for i = 1 to mc_bases do
30175: LD_ADDR_VAR 0 2
30179: PUSH
30180: DOUBLE
30181: LD_INT 1
30183: DEC
30184: ST_TO_ADDR
30185: LD_EXP 50
30189: PUSH
30190: FOR_TO
30191: IFFALSE 31923
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
30193: LD_EXP 50
30197: PUSH
30198: LD_VAR 0 2
30202: ARRAY
30203: NOT
30204: PUSH
30205: LD_EXP 57
30209: PUSH
30210: LD_VAR 0 2
30214: ARRAY
30215: OR
30216: IFFALSE 30220
// continue ;
30218: GO 30190
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
30220: LD_EXP 66
30224: PUSH
30225: LD_VAR 0 2
30229: ARRAY
30230: NOT
30231: PUSH
30232: LD_EXP 67
30236: PUSH
30237: LD_VAR 0 2
30241: ARRAY
30242: AND
30243: IFFALSE 30281
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
30245: LD_ADDR_EXP 67
30249: PUSH
30250: LD_EXP 67
30254: PPUSH
30255: LD_VAR 0 2
30259: PPUSH
30260: EMPTY
30261: PPUSH
30262: CALL_OW 1
30266: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30267: LD_VAR 0 2
30271: PPUSH
30272: LD_INT 107
30274: PPUSH
30275: CALL 21035 0 2
// continue ;
30279: GO 30190
// end ; target := [ ] ;
30281: LD_ADDR_VAR 0 6
30285: PUSH
30286: EMPTY
30287: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: DOUBLE
30294: LD_EXP 66
30298: PUSH
30299: LD_VAR 0 2
30303: ARRAY
30304: INC
30305: ST_TO_ADDR
30306: LD_INT 1
30308: PUSH
30309: FOR_DOWNTO
30310: IFFALSE 30570
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30312: LD_EXP 66
30316: PUSH
30317: LD_VAR 0 2
30321: ARRAY
30322: PUSH
30323: LD_VAR 0 3
30327: ARRAY
30328: PUSH
30329: LD_INT 2
30331: ARRAY
30332: PPUSH
30333: LD_EXP 66
30337: PUSH
30338: LD_VAR 0 2
30342: ARRAY
30343: PUSH
30344: LD_VAR 0 3
30348: ARRAY
30349: PUSH
30350: LD_INT 3
30352: ARRAY
30353: PPUSH
30354: CALL_OW 488
30358: PUSH
30359: LD_EXP 66
30363: PUSH
30364: LD_VAR 0 2
30368: ARRAY
30369: PUSH
30370: LD_VAR 0 3
30374: ARRAY
30375: PUSH
30376: LD_INT 2
30378: ARRAY
30379: PPUSH
30380: LD_EXP 66
30384: PUSH
30385: LD_VAR 0 2
30389: ARRAY
30390: PUSH
30391: LD_VAR 0 3
30395: ARRAY
30396: PUSH
30397: LD_INT 3
30399: ARRAY
30400: PPUSH
30401: CALL_OW 284
30405: PUSH
30406: LD_INT 0
30408: EQUAL
30409: AND
30410: IFFALSE 30465
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30412: LD_ADDR_VAR 0 5
30416: PUSH
30417: LD_EXP 66
30421: PUSH
30422: LD_VAR 0 2
30426: ARRAY
30427: PPUSH
30428: LD_VAR 0 3
30432: PPUSH
30433: CALL_OW 3
30437: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30438: LD_ADDR_EXP 66
30442: PUSH
30443: LD_EXP 66
30447: PPUSH
30448: LD_VAR 0 2
30452: PPUSH
30453: LD_VAR 0 5
30457: PPUSH
30458: CALL_OW 1
30462: ST_TO_ADDR
// continue ;
30463: GO 30309
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30465: LD_EXP 50
30469: PUSH
30470: LD_VAR 0 2
30474: ARRAY
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: PPUSH
30480: CALL_OW 255
30484: PPUSH
30485: LD_EXP 66
30489: PUSH
30490: LD_VAR 0 2
30494: ARRAY
30495: PUSH
30496: LD_VAR 0 3
30500: ARRAY
30501: PUSH
30502: LD_INT 2
30504: ARRAY
30505: PPUSH
30506: LD_EXP 66
30510: PUSH
30511: LD_VAR 0 2
30515: ARRAY
30516: PUSH
30517: LD_VAR 0 3
30521: ARRAY
30522: PUSH
30523: LD_INT 3
30525: ARRAY
30526: PPUSH
30527: LD_INT 30
30529: PPUSH
30530: CALL 55144 0 4
30534: PUSH
30535: LD_INT 4
30537: ARRAY
30538: PUSH
30539: LD_INT 0
30541: EQUAL
30542: IFFALSE 30568
// begin target := mc_crates [ i ] [ j ] ;
30544: LD_ADDR_VAR 0 6
30548: PUSH
30549: LD_EXP 66
30553: PUSH
30554: LD_VAR 0 2
30558: ARRAY
30559: PUSH
30560: LD_VAR 0 3
30564: ARRAY
30565: ST_TO_ADDR
// break ;
30566: GO 30570
// end ; end ;
30568: GO 30309
30570: POP
30571: POP
// if not target then
30572: LD_VAR 0 6
30576: NOT
30577: IFFALSE 30581
// continue ;
30579: GO 30190
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30581: LD_ADDR_VAR 0 7
30585: PUSH
30586: LD_EXP 69
30590: PUSH
30591: LD_VAR 0 2
30595: ARRAY
30596: PPUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 3
30602: PUSH
30603: LD_INT 58
30605: PUSH
30606: EMPTY
30607: LIST
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 61
30615: PUSH
30616: EMPTY
30617: LIST
30618: PUSH
30619: LD_INT 33
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 33
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: LD_INT 34
30651: PUSH
30652: LD_INT 32
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 34
30661: PUSH
30662: LD_INT 51
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 34
30671: PUSH
30672: LD_INT 12
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PPUSH
30689: CALL_OW 72
30693: ST_TO_ADDR
// if not cargo then
30694: LD_VAR 0 7
30698: NOT
30699: IFFALSE 31342
// begin if mc_crates_collector [ i ] < 5 then
30701: LD_EXP 67
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_INT 5
30714: LESS
30715: IFFALSE 31081
// begin if mc_ape [ i ] then
30717: LD_EXP 79
30721: PUSH
30722: LD_VAR 0 2
30726: ARRAY
30727: IFFALSE 30774
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
30729: LD_ADDR_VAR 0 5
30733: PUSH
30734: LD_EXP 79
30738: PUSH
30739: LD_VAR 0 2
30743: ARRAY
30744: PPUSH
30745: LD_INT 25
30747: PUSH
30748: LD_INT 16
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 24
30757: PUSH
30758: LD_INT 750
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PPUSH
30769: CALL_OW 72
30773: ST_TO_ADDR
// if not tmp then
30774: LD_VAR 0 5
30778: NOT
30779: IFFALSE 30826
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
30781: LD_ADDR_VAR 0 5
30785: PUSH
30786: LD_EXP 50
30790: PUSH
30791: LD_VAR 0 2
30795: ARRAY
30796: PPUSH
30797: LD_INT 25
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 24
30809: PUSH
30810: LD_INT 750
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PPUSH
30821: CALL_OW 72
30825: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
30826: LD_EXP 79
30830: PUSH
30831: LD_VAR 0 2
30835: ARRAY
30836: PUSH
30837: LD_EXP 50
30841: PUSH
30842: LD_VAR 0 2
30846: ARRAY
30847: PPUSH
30848: LD_INT 25
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 24
30860: PUSH
30861: LD_INT 750
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PPUSH
30872: CALL_OW 72
30876: AND
30877: PUSH
30878: LD_VAR 0 5
30882: PUSH
30883: LD_INT 5
30885: LESS
30886: AND
30887: IFFALSE 30969
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
30889: LD_ADDR_VAR 0 3
30893: PUSH
30894: LD_EXP 50
30898: PUSH
30899: LD_VAR 0 2
30903: ARRAY
30904: PPUSH
30905: LD_INT 25
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 24
30917: PUSH
30918: LD_INT 750
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PPUSH
30929: CALL_OW 72
30933: PUSH
30934: FOR_IN
30935: IFFALSE 30967
// begin tmp := tmp union j ;
30937: LD_ADDR_VAR 0 5
30941: PUSH
30942: LD_VAR 0 5
30946: PUSH
30947: LD_VAR 0 3
30951: UNION
30952: ST_TO_ADDR
// if tmp >= 5 then
30953: LD_VAR 0 5
30957: PUSH
30958: LD_INT 5
30960: GREATEREQUAL
30961: IFFALSE 30965
// break ;
30963: GO 30967
// end ;
30965: GO 30934
30967: POP
30968: POP
// end ; if not tmp then
30969: LD_VAR 0 5
30973: NOT
30974: IFFALSE 30978
// continue ;
30976: GO 30190
// for j in tmp do
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: LD_VAR 0 5
30987: PUSH
30988: FOR_IN
30989: IFFALSE 31079
// if not GetTag ( j ) then
30991: LD_VAR 0 3
30995: PPUSH
30996: CALL_OW 110
31000: NOT
31001: IFFALSE 31077
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
31003: LD_ADDR_EXP 67
31007: PUSH
31008: LD_EXP 67
31012: PPUSH
31013: LD_VAR 0 2
31017: PUSH
31018: LD_EXP 67
31022: PUSH
31023: LD_VAR 0 2
31027: ARRAY
31028: PUSH
31029: LD_INT 1
31031: PLUS
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PPUSH
31037: LD_VAR 0 3
31041: PPUSH
31042: CALL 54248 0 3
31046: ST_TO_ADDR
// SetTag ( j , 107 ) ;
31047: LD_VAR 0 3
31051: PPUSH
31052: LD_INT 107
31054: PPUSH
31055: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
31059: LD_EXP 67
31063: PUSH
31064: LD_VAR 0 2
31068: ARRAY
31069: PUSH
31070: LD_INT 5
31072: GREATEREQUAL
31073: IFFALSE 31077
// break ;
31075: GO 31079
// end ;
31077: GO 30988
31079: POP
31080: POP
// end ; if mc_crates_collector [ i ] and target then
31081: LD_EXP 67
31085: PUSH
31086: LD_VAR 0 2
31090: ARRAY
31091: PUSH
31092: LD_VAR 0 6
31096: AND
31097: IFFALSE 31340
// begin if mc_crates_collector [ i ] < target [ 1 ] then
31099: LD_EXP 67
31103: PUSH
31104: LD_VAR 0 2
31108: ARRAY
31109: PUSH
31110: LD_VAR 0 6
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: LESS
31119: IFFALSE 31139
// tmp := mc_crates_collector [ i ] else
31121: LD_ADDR_VAR 0 5
31125: PUSH
31126: LD_EXP 67
31130: PUSH
31131: LD_VAR 0 2
31135: ARRAY
31136: ST_TO_ADDR
31137: GO 31153
// tmp := target [ 1 ] ;
31139: LD_ADDR_VAR 0 5
31143: PUSH
31144: LD_VAR 0 6
31148: PUSH
31149: LD_INT 1
31151: ARRAY
31152: ST_TO_ADDR
// k := 0 ;
31153: LD_ADDR_VAR 0 4
31157: PUSH
31158: LD_INT 0
31160: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
31161: LD_ADDR_VAR 0 3
31165: PUSH
31166: LD_EXP 67
31170: PUSH
31171: LD_VAR 0 2
31175: ARRAY
31176: PUSH
31177: FOR_IN
31178: IFFALSE 31338
// begin k := k + 1 ;
31180: LD_ADDR_VAR 0 4
31184: PUSH
31185: LD_VAR 0 4
31189: PUSH
31190: LD_INT 1
31192: PLUS
31193: ST_TO_ADDR
// if k > tmp then
31194: LD_VAR 0 4
31198: PUSH
31199: LD_VAR 0 5
31203: GREATER
31204: IFFALSE 31208
// break ;
31206: GO 31338
// if not GetClass ( j ) in [ 2 , 16 ] then
31208: LD_VAR 0 3
31212: PPUSH
31213: CALL_OW 257
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 16
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: IN
31228: NOT
31229: IFFALSE 31282
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
31231: LD_ADDR_EXP 67
31235: PUSH
31236: LD_EXP 67
31240: PPUSH
31241: LD_VAR 0 2
31245: PPUSH
31246: LD_EXP 67
31250: PUSH
31251: LD_VAR 0 2
31255: ARRAY
31256: PUSH
31257: LD_VAR 0 3
31261: DIFF
31262: PPUSH
31263: CALL_OW 1
31267: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31268: LD_VAR 0 3
31272: PPUSH
31273: LD_INT 0
31275: PPUSH
31276: CALL_OW 109
// continue ;
31280: GO 31177
// end ; if IsInUnit ( j ) then
31282: LD_VAR 0 3
31286: PPUSH
31287: CALL_OW 310
31291: IFFALSE 31302
// ComExitBuilding ( j ) ;
31293: LD_VAR 0 3
31297: PPUSH
31298: CALL_OW 122
// wait ( 3 ) ;
31302: LD_INT 3
31304: PPUSH
31305: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31309: LD_VAR 0 3
31313: PPUSH
31314: LD_VAR 0 6
31318: PUSH
31319: LD_INT 2
31321: ARRAY
31322: PPUSH
31323: LD_VAR 0 6
31327: PUSH
31328: LD_INT 3
31330: ARRAY
31331: PPUSH
31332: CALL_OW 117
// end ;
31336: GO 31177
31338: POP
31339: POP
// end ; end else
31340: GO 31921
// begin for j in cargo do
31342: LD_ADDR_VAR 0 3
31346: PUSH
31347: LD_VAR 0 7
31351: PUSH
31352: FOR_IN
31353: IFFALSE 31919
// begin if GetTag ( j ) <> 0 then
31355: LD_VAR 0 3
31359: PPUSH
31360: CALL_OW 110
31364: PUSH
31365: LD_INT 0
31367: NONEQUAL
31368: IFFALSE 31372
// continue ;
31370: GO 31352
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31372: LD_VAR 0 3
31376: PPUSH
31377: CALL_OW 256
31381: PUSH
31382: LD_INT 1000
31384: LESS
31385: PUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: LD_EXP 74
31395: PUSH
31396: LD_VAR 0 2
31400: ARRAY
31401: PPUSH
31402: CALL_OW 308
31406: NOT
31407: AND
31408: IFFALSE 31430
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31410: LD_VAR 0 3
31414: PPUSH
31415: LD_EXP 74
31419: PUSH
31420: LD_VAR 0 2
31424: ARRAY
31425: PPUSH
31426: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31430: LD_VAR 0 3
31434: PPUSH
31435: CALL_OW 256
31439: PUSH
31440: LD_INT 1000
31442: LESS
31443: PUSH
31444: LD_VAR 0 3
31448: PPUSH
31449: LD_EXP 74
31453: PUSH
31454: LD_VAR 0 2
31458: ARRAY
31459: PPUSH
31460: CALL_OW 308
31464: AND
31465: IFFALSE 31469
// continue ;
31467: GO 31352
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31469: LD_VAR 0 3
31473: PPUSH
31474: CALL_OW 262
31478: PUSH
31479: LD_INT 2
31481: EQUAL
31482: PUSH
31483: LD_VAR 0 3
31487: PPUSH
31488: CALL_OW 261
31492: PUSH
31493: LD_INT 15
31495: LESS
31496: AND
31497: IFFALSE 31501
// continue ;
31499: GO 31352
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31501: LD_VAR 0 3
31505: PPUSH
31506: CALL_OW 262
31510: PUSH
31511: LD_INT 1
31513: EQUAL
31514: PUSH
31515: LD_VAR 0 3
31519: PPUSH
31520: CALL_OW 261
31524: PUSH
31525: LD_INT 10
31527: LESS
31528: AND
31529: IFFALSE 31858
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31531: LD_ADDR_VAR 0 8
31535: PUSH
31536: LD_EXP 50
31540: PUSH
31541: LD_VAR 0 2
31545: ARRAY
31546: PPUSH
31547: LD_INT 2
31549: PUSH
31550: LD_INT 30
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 30
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: PPUSH
31575: CALL_OW 72
31579: ST_TO_ADDR
// if not depot then
31580: LD_VAR 0 8
31584: NOT
31585: IFFALSE 31589
// continue ;
31587: GO 31352
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31589: LD_VAR 0 3
31593: PPUSH
31594: LD_VAR 0 8
31598: PPUSH
31599: LD_VAR 0 3
31603: PPUSH
31604: CALL_OW 74
31608: PPUSH
31609: CALL_OW 296
31613: PUSH
31614: LD_INT 6
31616: LESS
31617: IFFALSE 31633
// SetFuel ( j , 100 ) else
31619: LD_VAR 0 3
31623: PPUSH
31624: LD_INT 100
31626: PPUSH
31627: CALL_OW 240
31631: GO 31858
// if GetFuel ( j ) = 0 then
31633: LD_VAR 0 3
31637: PPUSH
31638: CALL_OW 261
31642: PUSH
31643: LD_INT 0
31645: EQUAL
31646: IFFALSE 31858
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31648: LD_ADDR_EXP 69
31652: PUSH
31653: LD_EXP 69
31657: PPUSH
31658: LD_VAR 0 2
31662: PPUSH
31663: LD_EXP 69
31667: PUSH
31668: LD_VAR 0 2
31672: ARRAY
31673: PUSH
31674: LD_VAR 0 3
31678: DIFF
31679: PPUSH
31680: CALL_OW 1
31684: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
31685: LD_VAR 0 3
31689: PPUSH
31690: CALL_OW 263
31694: PUSH
31695: LD_INT 1
31697: EQUAL
31698: IFFALSE 31714
// ComExitVehicle ( IsInUnit ( j ) ) ;
31700: LD_VAR 0 3
31704: PPUSH
31705: CALL_OW 310
31709: PPUSH
31710: CALL_OW 121
// if GetControl ( j ) = control_remote then
31714: LD_VAR 0 3
31718: PPUSH
31719: CALL_OW 263
31723: PUSH
31724: LD_INT 2
31726: EQUAL
31727: IFFALSE 31738
// ComUnlink ( j ) ;
31729: LD_VAR 0 3
31733: PPUSH
31734: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
31738: LD_ADDR_VAR 0 9
31742: PUSH
31743: LD_VAR 0 2
31747: PPUSH
31748: LD_INT 3
31750: PPUSH
31751: CALL 41211 0 2
31755: ST_TO_ADDR
// if fac then
31756: LD_VAR 0 9
31760: IFFALSE 31856
// begin for k in fac do
31762: LD_ADDR_VAR 0 4
31766: PUSH
31767: LD_VAR 0 9
31771: PUSH
31772: FOR_IN
31773: IFFALSE 31854
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
31775: LD_ADDR_VAR 0 10
31779: PUSH
31780: LD_VAR 0 9
31784: PPUSH
31785: LD_VAR 0 3
31789: PPUSH
31790: CALL_OW 265
31794: PPUSH
31795: LD_VAR 0 3
31799: PPUSH
31800: CALL_OW 262
31804: PPUSH
31805: LD_VAR 0 3
31809: PPUSH
31810: CALL_OW 263
31814: PPUSH
31815: LD_VAR 0 3
31819: PPUSH
31820: CALL_OW 264
31824: PPUSH
31825: CALL 51780 0 5
31829: ST_TO_ADDR
// if components then
31830: LD_VAR 0 10
31834: IFFALSE 31852
// begin MC_InsertProduceList ( i , components ) ;
31836: LD_VAR 0 2
31840: PPUSH
31841: LD_VAR 0 10
31845: PPUSH
31846: CALL 40756 0 2
// break ;
31850: GO 31854
// end ; end ;
31852: GO 31772
31854: POP
31855: POP
// end ; continue ;
31856: GO 31352
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
31858: LD_VAR 0 3
31862: PPUSH
31863: LD_INT 1
31865: PPUSH
31866: CALL_OW 289
31870: PUSH
31871: LD_INT 100
31873: LESS
31874: PUSH
31875: LD_VAR 0 3
31879: PPUSH
31880: CALL_OW 314
31884: NOT
31885: AND
31886: IFFALSE 31915
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31888: LD_VAR 0 3
31892: PPUSH
31893: LD_VAR 0 6
31897: PUSH
31898: LD_INT 2
31900: ARRAY
31901: PPUSH
31902: LD_VAR 0 6
31906: PUSH
31907: LD_INT 3
31909: ARRAY
31910: PPUSH
31911: CALL_OW 117
// break ;
31915: GO 31919
// end ;
31917: GO 31352
31919: POP
31920: POP
// end ; end ;
31921: GO 30190
31923: POP
31924: POP
// end ;
31925: LD_VAR 0 1
31929: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
31930: LD_INT 0
31932: PPUSH
31933: PPUSH
31934: PPUSH
31935: PPUSH
// if not mc_bases then
31936: LD_EXP 50
31940: NOT
31941: IFFALSE 31945
// exit ;
31943: GO 32106
// for i = 1 to mc_bases do
31945: LD_ADDR_VAR 0 2
31949: PUSH
31950: DOUBLE
31951: LD_INT 1
31953: DEC
31954: ST_TO_ADDR
31955: LD_EXP 50
31959: PUSH
31960: FOR_TO
31961: IFFALSE 32104
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
31963: LD_ADDR_VAR 0 4
31967: PUSH
31968: LD_EXP 69
31972: PUSH
31973: LD_VAR 0 2
31977: ARRAY
31978: PUSH
31979: LD_EXP 72
31983: PUSH
31984: LD_VAR 0 2
31988: ARRAY
31989: UNION
31990: PPUSH
31991: LD_INT 33
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PPUSH
32001: CALL_OW 72
32005: ST_TO_ADDR
// if tmp then
32006: LD_VAR 0 4
32010: IFFALSE 32102
// for j in tmp do
32012: LD_ADDR_VAR 0 3
32016: PUSH
32017: LD_VAR 0 4
32021: PUSH
32022: FOR_IN
32023: IFFALSE 32100
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
32025: LD_VAR 0 3
32029: PPUSH
32030: CALL_OW 312
32034: NOT
32035: PUSH
32036: LD_VAR 0 3
32040: PPUSH
32041: CALL_OW 256
32045: PUSH
32046: LD_INT 250
32048: GREATEREQUAL
32049: AND
32050: IFFALSE 32063
// Connect ( j ) else
32052: LD_VAR 0 3
32056: PPUSH
32057: CALL 57181 0 1
32061: GO 32098
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
32063: LD_VAR 0 3
32067: PPUSH
32068: CALL_OW 256
32072: PUSH
32073: LD_INT 250
32075: LESS
32076: PUSH
32077: LD_VAR 0 3
32081: PPUSH
32082: CALL_OW 312
32086: AND
32087: IFFALSE 32098
// ComUnlink ( j ) ;
32089: LD_VAR 0 3
32093: PPUSH
32094: CALL_OW 136
32098: GO 32022
32100: POP
32101: POP
// end ;
32102: GO 31960
32104: POP
32105: POP
// end ;
32106: LD_VAR 0 1
32110: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
32111: LD_INT 0
32113: PPUSH
32114: PPUSH
32115: PPUSH
32116: PPUSH
32117: PPUSH
// if not mc_bases then
32118: LD_EXP 50
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 32572
// for i = 1 to mc_bases do
32127: LD_ADDR_VAR 0 2
32131: PUSH
32132: DOUBLE
32133: LD_INT 1
32135: DEC
32136: ST_TO_ADDR
32137: LD_EXP 50
32141: PUSH
32142: FOR_TO
32143: IFFALSE 32570
// begin if not mc_produce [ i ] then
32145: LD_EXP 71
32149: PUSH
32150: LD_VAR 0 2
32154: ARRAY
32155: NOT
32156: IFFALSE 32160
// continue ;
32158: GO 32142
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32160: LD_ADDR_VAR 0 5
32164: PUSH
32165: LD_EXP 50
32169: PUSH
32170: LD_VAR 0 2
32174: ARRAY
32175: PPUSH
32176: LD_INT 30
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PPUSH
32186: CALL_OW 72
32190: ST_TO_ADDR
// if not fac then
32191: LD_VAR 0 5
32195: NOT
32196: IFFALSE 32200
// continue ;
32198: GO 32142
// for j in fac do
32200: LD_ADDR_VAR 0 3
32204: PUSH
32205: LD_VAR 0 5
32209: PUSH
32210: FOR_IN
32211: IFFALSE 32566
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL_OW 461
32222: PUSH
32223: LD_INT 2
32225: NONEQUAL
32226: PUSH
32227: LD_VAR 0 3
32231: PPUSH
32232: LD_INT 15
32234: PPUSH
32235: CALL 56841 0 2
32239: PUSH
32240: LD_INT 4
32242: ARRAY
32243: OR
32244: IFFALSE 32248
// continue ;
32246: GO 32210
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
32248: LD_VAR 0 3
32252: PPUSH
32253: LD_EXP 71
32257: PUSH
32258: LD_VAR 0 2
32262: ARRAY
32263: PUSH
32264: LD_INT 1
32266: ARRAY
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: PPUSH
32272: LD_EXP 71
32276: PUSH
32277: LD_VAR 0 2
32281: ARRAY
32282: PUSH
32283: LD_INT 1
32285: ARRAY
32286: PUSH
32287: LD_INT 2
32289: ARRAY
32290: PPUSH
32291: LD_EXP 71
32295: PUSH
32296: LD_VAR 0 2
32300: ARRAY
32301: PUSH
32302: LD_INT 1
32304: ARRAY
32305: PUSH
32306: LD_INT 3
32308: ARRAY
32309: PPUSH
32310: LD_EXP 71
32314: PUSH
32315: LD_VAR 0 2
32319: ARRAY
32320: PUSH
32321: LD_INT 1
32323: ARRAY
32324: PUSH
32325: LD_INT 4
32327: ARRAY
32328: PPUSH
32329: CALL_OW 448
32333: PUSH
32334: LD_VAR 0 3
32338: PPUSH
32339: LD_EXP 71
32343: PUSH
32344: LD_VAR 0 2
32348: ARRAY
32349: PUSH
32350: LD_INT 1
32352: ARRAY
32353: PUSH
32354: LD_INT 1
32356: ARRAY
32357: PUSH
32358: LD_EXP 71
32362: PUSH
32363: LD_VAR 0 2
32367: ARRAY
32368: PUSH
32369: LD_INT 1
32371: ARRAY
32372: PUSH
32373: LD_INT 2
32375: ARRAY
32376: PUSH
32377: LD_EXP 71
32381: PUSH
32382: LD_VAR 0 2
32386: ARRAY
32387: PUSH
32388: LD_INT 1
32390: ARRAY
32391: PUSH
32392: LD_INT 3
32394: ARRAY
32395: PUSH
32396: LD_EXP 71
32400: PUSH
32401: LD_VAR 0 2
32405: ARRAY
32406: PUSH
32407: LD_INT 1
32409: ARRAY
32410: PUSH
32411: LD_INT 4
32413: ARRAY
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: PPUSH
32421: CALL 60512 0 2
32425: AND
32426: IFFALSE 32564
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32428: LD_VAR 0 3
32432: PPUSH
32433: LD_EXP 71
32437: PUSH
32438: LD_VAR 0 2
32442: ARRAY
32443: PUSH
32444: LD_INT 1
32446: ARRAY
32447: PUSH
32448: LD_INT 1
32450: ARRAY
32451: PPUSH
32452: LD_EXP 71
32456: PUSH
32457: LD_VAR 0 2
32461: ARRAY
32462: PUSH
32463: LD_INT 1
32465: ARRAY
32466: PUSH
32467: LD_INT 2
32469: ARRAY
32470: PPUSH
32471: LD_EXP 71
32475: PUSH
32476: LD_VAR 0 2
32480: ARRAY
32481: PUSH
32482: LD_INT 1
32484: ARRAY
32485: PUSH
32486: LD_INT 3
32488: ARRAY
32489: PPUSH
32490: LD_EXP 71
32494: PUSH
32495: LD_VAR 0 2
32499: ARRAY
32500: PUSH
32501: LD_INT 1
32503: ARRAY
32504: PUSH
32505: LD_INT 4
32507: ARRAY
32508: PPUSH
32509: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32513: LD_ADDR_VAR 0 4
32517: PUSH
32518: LD_EXP 71
32522: PUSH
32523: LD_VAR 0 2
32527: ARRAY
32528: PPUSH
32529: LD_INT 1
32531: PPUSH
32532: CALL_OW 3
32536: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32537: LD_ADDR_EXP 71
32541: PUSH
32542: LD_EXP 71
32546: PPUSH
32547: LD_VAR 0 2
32551: PPUSH
32552: LD_VAR 0 4
32556: PPUSH
32557: CALL_OW 1
32561: ST_TO_ADDR
// break ;
32562: GO 32566
// end ; end ;
32564: GO 32210
32566: POP
32567: POP
// end ;
32568: GO 32142
32570: POP
32571: POP
// end ;
32572: LD_VAR 0 1
32576: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32577: LD_INT 0
32579: PPUSH
32580: PPUSH
32581: PPUSH
// if not mc_bases then
32582: LD_EXP 50
32586: NOT
32587: IFFALSE 32591
// exit ;
32589: GO 32680
// for i = 1 to mc_bases do
32591: LD_ADDR_VAR 0 2
32595: PUSH
32596: DOUBLE
32597: LD_INT 1
32599: DEC
32600: ST_TO_ADDR
32601: LD_EXP 50
32605: PUSH
32606: FOR_TO
32607: IFFALSE 32678
// begin if mc_attack [ i ] then
32609: LD_EXP 70
32613: PUSH
32614: LD_VAR 0 2
32618: ARRAY
32619: IFFALSE 32676
// begin tmp := mc_attack [ i ] [ 1 ] ;
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_EXP 70
32630: PUSH
32631: LD_VAR 0 2
32635: ARRAY
32636: PUSH
32637: LD_INT 1
32639: ARRAY
32640: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32641: LD_ADDR_EXP 70
32645: PUSH
32646: LD_EXP 70
32650: PPUSH
32651: LD_VAR 0 2
32655: PPUSH
32656: EMPTY
32657: PPUSH
32658: CALL_OW 1
32662: ST_TO_ADDR
// Attack ( tmp ) ;
32663: LD_VAR 0 3
32667: PPUSH
32668: CALL 82725 0 1
// exit ;
32672: POP
32673: POP
32674: GO 32680
// end ; end ;
32676: GO 32606
32678: POP
32679: POP
// end ;
32680: LD_VAR 0 1
32684: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
32685: LD_INT 0
32687: PPUSH
32688: PPUSH
32689: PPUSH
32690: PPUSH
32691: PPUSH
32692: PPUSH
32693: PPUSH
// if not mc_bases then
32694: LD_EXP 50
32698: NOT
32699: IFFALSE 32703
// exit ;
32701: GO 33285
// for i = 1 to mc_bases do
32703: LD_ADDR_VAR 0 2
32707: PUSH
32708: DOUBLE
32709: LD_INT 1
32711: DEC
32712: ST_TO_ADDR
32713: LD_EXP 50
32717: PUSH
32718: FOR_TO
32719: IFFALSE 33283
// begin if not mc_bases [ i ] then
32721: LD_EXP 50
32725: PUSH
32726: LD_VAR 0 2
32730: ARRAY
32731: NOT
32732: IFFALSE 32736
// continue ;
32734: GO 32718
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
32736: LD_ADDR_VAR 0 7
32740: PUSH
32741: LD_EXP 50
32745: PUSH
32746: LD_VAR 0 2
32750: ARRAY
32751: PUSH
32752: LD_INT 1
32754: ARRAY
32755: PPUSH
32756: CALL 51084 0 1
32760: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
32761: LD_ADDR_EXP 73
32765: PUSH
32766: LD_EXP 73
32770: PPUSH
32771: LD_VAR 0 2
32775: PPUSH
32776: LD_EXP 50
32780: PUSH
32781: LD_VAR 0 2
32785: ARRAY
32786: PUSH
32787: LD_INT 1
32789: ARRAY
32790: PPUSH
32791: CALL_OW 255
32795: PPUSH
32796: LD_EXP 75
32800: PUSH
32801: LD_VAR 0 2
32805: ARRAY
32806: PPUSH
32807: CALL 48727 0 2
32811: PPUSH
32812: CALL_OW 1
32816: ST_TO_ADDR
// if not mc_scan [ i ] then
32817: LD_EXP 73
32821: PUSH
32822: LD_VAR 0 2
32826: ARRAY
32827: NOT
32828: IFFALSE 32983
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32830: LD_ADDR_VAR 0 4
32834: PUSH
32835: LD_EXP 50
32839: PUSH
32840: LD_VAR 0 2
32844: ARRAY
32845: PPUSH
32846: LD_INT 2
32848: PUSH
32849: LD_INT 25
32851: PUSH
32852: LD_INT 5
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 25
32861: PUSH
32862: LD_INT 8
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 25
32871: PUSH
32872: LD_INT 9
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: PPUSH
32885: CALL_OW 72
32889: ST_TO_ADDR
// if not tmp then
32890: LD_VAR 0 4
32894: NOT
32895: IFFALSE 32899
// continue ;
32897: GO 32718
// for j in tmp do
32899: LD_ADDR_VAR 0 3
32903: PUSH
32904: LD_VAR 0 4
32908: PUSH
32909: FOR_IN
32910: IFFALSE 32981
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
32912: LD_VAR 0 3
32916: PPUSH
32917: CALL_OW 310
32921: PPUSH
32922: CALL_OW 266
32926: PUSH
32927: LD_INT 5
32929: EQUAL
32930: PUSH
32931: LD_VAR 0 3
32935: PPUSH
32936: CALL_OW 257
32940: PUSH
32941: LD_INT 1
32943: EQUAL
32944: AND
32945: PUSH
32946: LD_VAR 0 3
32950: PPUSH
32951: CALL_OW 459
32955: NOT
32956: AND
32957: PUSH
32958: LD_VAR 0 7
32962: AND
32963: IFFALSE 32979
// ComChangeProfession ( j , class ) ;
32965: LD_VAR 0 3
32969: PPUSH
32970: LD_VAR 0 7
32974: PPUSH
32975: CALL_OW 123
32979: GO 32909
32981: POP
32982: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
32983: LD_EXP 73
32987: PUSH
32988: LD_VAR 0 2
32992: ARRAY
32993: PUSH
32994: LD_EXP 72
32998: PUSH
32999: LD_VAR 0 2
33003: ARRAY
33004: NOT
33005: AND
33006: PUSH
33007: LD_EXP 50
33011: PUSH
33012: LD_VAR 0 2
33016: ARRAY
33017: PPUSH
33018: LD_INT 30
33020: PUSH
33021: LD_INT 32
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PPUSH
33028: CALL_OW 72
33032: NOT
33033: AND
33034: PUSH
33035: LD_EXP 50
33039: PUSH
33040: LD_VAR 0 2
33044: ARRAY
33045: PPUSH
33046: LD_INT 2
33048: PUSH
33049: LD_INT 30
33051: PUSH
33052: LD_INT 4
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 30
33061: PUSH
33062: LD_INT 5
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: LIST
33073: PPUSH
33074: CALL_OW 72
33078: NOT
33079: AND
33080: IFFALSE 33212
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33082: LD_ADDR_VAR 0 4
33086: PUSH
33087: LD_EXP 50
33091: PUSH
33092: LD_VAR 0 2
33096: ARRAY
33097: PPUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 25
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 25
33113: PUSH
33114: LD_INT 5
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 25
33123: PUSH
33124: LD_INT 8
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 25
33133: PUSH
33134: LD_INT 9
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: PPUSH
33148: CALL_OW 72
33152: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
33153: LD_ADDR_VAR 0 4
33157: PUSH
33158: LD_VAR 0 4
33162: PUSH
33163: LD_VAR 0 4
33167: PPUSH
33168: LD_INT 18
33170: PPUSH
33171: CALL 87508 0 2
33175: DIFF
33176: ST_TO_ADDR
// if tmp then
33177: LD_VAR 0 4
33181: IFFALSE 33212
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
33183: LD_VAR 0 2
33187: PPUSH
33188: LD_VAR 0 4
33192: PPUSH
33193: LD_EXP 75
33197: PUSH
33198: LD_VAR 0 2
33202: ARRAY
33203: PPUSH
33204: CALL 48762 0 3
// exit ;
33208: POP
33209: POP
33210: GO 33285
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
33212: LD_EXP 73
33216: PUSH
33217: LD_VAR 0 2
33221: ARRAY
33222: PUSH
33223: LD_EXP 72
33227: PUSH
33228: LD_VAR 0 2
33232: ARRAY
33233: AND
33234: IFFALSE 33281
// begin tmp := mc_defender [ i ] ;
33236: LD_ADDR_VAR 0 4
33240: PUSH
33241: LD_EXP 72
33245: PUSH
33246: LD_VAR 0 2
33250: ARRAY
33251: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
33252: LD_VAR 0 2
33256: PPUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: LD_EXP 73
33266: PUSH
33267: LD_VAR 0 2
33271: ARRAY
33272: PPUSH
33273: CALL 49323 0 3
// exit ;
33277: POP
33278: POP
33279: GO 33285
// end ; end ;
33281: GO 32718
33283: POP
33284: POP
// end ;
33285: LD_VAR 0 1
33289: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33290: LD_INT 0
33292: PPUSH
33293: PPUSH
33294: PPUSH
33295: PPUSH
33296: PPUSH
33297: PPUSH
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
33302: PPUSH
// if not mc_bases then
33303: LD_EXP 50
33307: NOT
33308: IFFALSE 33312
// exit ;
33310: GO 34399
// for i = 1 to mc_bases do
33312: LD_ADDR_VAR 0 2
33316: PUSH
33317: DOUBLE
33318: LD_INT 1
33320: DEC
33321: ST_TO_ADDR
33322: LD_EXP 50
33326: PUSH
33327: FOR_TO
33328: IFFALSE 34397
// begin tmp := mc_lab [ i ] ;
33330: LD_ADDR_VAR 0 6
33334: PUSH
33335: LD_EXP 83
33339: PUSH
33340: LD_VAR 0 2
33344: ARRAY
33345: ST_TO_ADDR
// if not tmp then
33346: LD_VAR 0 6
33350: NOT
33351: IFFALSE 33355
// continue ;
33353: GO 33327
// idle_lab := 0 ;
33355: LD_ADDR_VAR 0 11
33359: PUSH
33360: LD_INT 0
33362: ST_TO_ADDR
// for j in tmp do
33363: LD_ADDR_VAR 0 3
33367: PUSH
33368: LD_VAR 0 6
33372: PUSH
33373: FOR_IN
33374: IFFALSE 34393
// begin researching := false ;
33376: LD_ADDR_VAR 0 10
33380: PUSH
33381: LD_INT 0
33383: ST_TO_ADDR
// side := GetSide ( j ) ;
33384: LD_ADDR_VAR 0 4
33388: PUSH
33389: LD_VAR 0 3
33393: PPUSH
33394: CALL_OW 255
33398: ST_TO_ADDR
// if not mc_tech [ side ] then
33399: LD_EXP 77
33403: PUSH
33404: LD_VAR 0 4
33408: ARRAY
33409: NOT
33410: IFFALSE 33414
// continue ;
33412: GO 33373
// if BuildingStatus ( j ) = bs_idle then
33414: LD_VAR 0 3
33418: PPUSH
33419: CALL_OW 461
33423: PUSH
33424: LD_INT 2
33426: EQUAL
33427: IFFALSE 33615
// begin if idle_lab and UnitsInside ( j ) < 6 then
33429: LD_VAR 0 11
33433: PUSH
33434: LD_VAR 0 3
33438: PPUSH
33439: CALL_OW 313
33443: PUSH
33444: LD_INT 6
33446: LESS
33447: AND
33448: IFFALSE 33519
// begin tmp2 := UnitsInside ( idle_lab ) ;
33450: LD_ADDR_VAR 0 9
33454: PUSH
33455: LD_VAR 0 11
33459: PPUSH
33460: CALL_OW 313
33464: ST_TO_ADDR
// if tmp2 then
33465: LD_VAR 0 9
33469: IFFALSE 33511
// for x in tmp2 do
33471: LD_ADDR_VAR 0 7
33475: PUSH
33476: LD_VAR 0 9
33480: PUSH
33481: FOR_IN
33482: IFFALSE 33509
// begin ComExitBuilding ( x ) ;
33484: LD_VAR 0 7
33488: PPUSH
33489: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33493: LD_VAR 0 7
33497: PPUSH
33498: LD_VAR 0 3
33502: PPUSH
33503: CALL_OW 180
// end ;
33507: GO 33481
33509: POP
33510: POP
// idle_lab := 0 ;
33511: LD_ADDR_VAR 0 11
33515: PUSH
33516: LD_INT 0
33518: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33519: LD_ADDR_VAR 0 5
33523: PUSH
33524: LD_EXP 77
33528: PUSH
33529: LD_VAR 0 4
33533: ARRAY
33534: PUSH
33535: FOR_IN
33536: IFFALSE 33596
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33538: LD_VAR 0 3
33542: PPUSH
33543: LD_VAR 0 5
33547: PPUSH
33548: CALL_OW 430
33552: PUSH
33553: LD_VAR 0 4
33557: PPUSH
33558: LD_VAR 0 5
33562: PPUSH
33563: CALL 47832 0 2
33567: AND
33568: IFFALSE 33594
// begin researching := true ;
33570: LD_ADDR_VAR 0 10
33574: PUSH
33575: LD_INT 1
33577: ST_TO_ADDR
// ComResearch ( j , t ) ;
33578: LD_VAR 0 3
33582: PPUSH
33583: LD_VAR 0 5
33587: PPUSH
33588: CALL_OW 124
// break ;
33592: GO 33596
// end ;
33594: GO 33535
33596: POP
33597: POP
// if not researching then
33598: LD_VAR 0 10
33602: NOT
33603: IFFALSE 33615
// idle_lab := j ;
33605: LD_ADDR_VAR 0 11
33609: PUSH
33610: LD_VAR 0 3
33614: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33615: LD_VAR 0 3
33619: PPUSH
33620: CALL_OW 461
33624: PUSH
33625: LD_INT 10
33627: EQUAL
33628: IFFALSE 34216
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33630: LD_EXP 79
33634: PUSH
33635: LD_VAR 0 2
33639: ARRAY
33640: NOT
33641: PUSH
33642: LD_EXP 80
33646: PUSH
33647: LD_VAR 0 2
33651: ARRAY
33652: NOT
33653: AND
33654: PUSH
33655: LD_EXP 77
33659: PUSH
33660: LD_VAR 0 4
33664: ARRAY
33665: PUSH
33666: LD_INT 1
33668: GREATER
33669: AND
33670: IFFALSE 33801
// begin ComCancel ( j ) ;
33672: LD_VAR 0 3
33676: PPUSH
33677: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
33681: LD_ADDR_EXP 77
33685: PUSH
33686: LD_EXP 77
33690: PPUSH
33691: LD_VAR 0 4
33695: PPUSH
33696: LD_EXP 77
33700: PUSH
33701: LD_VAR 0 4
33705: ARRAY
33706: PPUSH
33707: LD_EXP 77
33711: PUSH
33712: LD_VAR 0 4
33716: ARRAY
33717: PUSH
33718: LD_INT 1
33720: MINUS
33721: PPUSH
33722: LD_EXP 77
33726: PUSH
33727: LD_VAR 0 4
33731: ARRAY
33732: PPUSH
33733: LD_INT 0
33735: PPUSH
33736: CALL 53666 0 4
33740: PPUSH
33741: CALL_OW 1
33745: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
33746: LD_ADDR_EXP 77
33750: PUSH
33751: LD_EXP 77
33755: PPUSH
33756: LD_VAR 0 4
33760: PPUSH
33761: LD_EXP 77
33765: PUSH
33766: LD_VAR 0 4
33770: ARRAY
33771: PPUSH
33772: LD_EXP 77
33776: PUSH
33777: LD_VAR 0 4
33781: ARRAY
33782: PPUSH
33783: LD_INT 1
33785: PPUSH
33786: LD_INT 0
33788: PPUSH
33789: CALL 53666 0 4
33793: PPUSH
33794: CALL_OW 1
33798: ST_TO_ADDR
// continue ;
33799: GO 33373
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
33801: LD_EXP 79
33805: PUSH
33806: LD_VAR 0 2
33810: ARRAY
33811: PUSH
33812: LD_EXP 80
33816: PUSH
33817: LD_VAR 0 2
33821: ARRAY
33822: NOT
33823: AND
33824: IFFALSE 33951
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
33826: LD_ADDR_EXP 80
33830: PUSH
33831: LD_EXP 80
33835: PPUSH
33836: LD_VAR 0 2
33840: PUSH
33841: LD_EXP 80
33845: PUSH
33846: LD_VAR 0 2
33850: ARRAY
33851: PUSH
33852: LD_INT 1
33854: PLUS
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PPUSH
33860: LD_EXP 79
33864: PUSH
33865: LD_VAR 0 2
33869: ARRAY
33870: PUSH
33871: LD_INT 1
33873: ARRAY
33874: PPUSH
33875: CALL 54248 0 3
33879: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
33880: LD_EXP 79
33884: PUSH
33885: LD_VAR 0 2
33889: ARRAY
33890: PUSH
33891: LD_INT 1
33893: ARRAY
33894: PPUSH
33895: LD_INT 112
33897: PPUSH
33898: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
33902: LD_ADDR_VAR 0 9
33906: PUSH
33907: LD_EXP 79
33911: PUSH
33912: LD_VAR 0 2
33916: ARRAY
33917: PPUSH
33918: LD_INT 1
33920: PPUSH
33921: CALL_OW 3
33925: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
33926: LD_ADDR_EXP 79
33930: PUSH
33931: LD_EXP 79
33935: PPUSH
33936: LD_VAR 0 2
33940: PPUSH
33941: LD_VAR 0 9
33945: PPUSH
33946: CALL_OW 1
33950: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
33951: LD_EXP 79
33955: PUSH
33956: LD_VAR 0 2
33960: ARRAY
33961: PUSH
33962: LD_EXP 80
33966: PUSH
33967: LD_VAR 0 2
33971: ARRAY
33972: AND
33973: PUSH
33974: LD_EXP 80
33978: PUSH
33979: LD_VAR 0 2
33983: ARRAY
33984: PUSH
33985: LD_INT 1
33987: ARRAY
33988: PPUSH
33989: CALL_OW 310
33993: NOT
33994: AND
33995: PUSH
33996: LD_VAR 0 3
34000: PPUSH
34001: CALL_OW 313
34005: PUSH
34006: LD_INT 6
34008: EQUAL
34009: AND
34010: IFFALSE 34066
// begin tmp2 := UnitsInside ( j ) ;
34012: LD_ADDR_VAR 0 9
34016: PUSH
34017: LD_VAR 0 3
34021: PPUSH
34022: CALL_OW 313
34026: ST_TO_ADDR
// if tmp2 = 6 then
34027: LD_VAR 0 9
34031: PUSH
34032: LD_INT 6
34034: EQUAL
34035: IFFALSE 34066
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
34037: LD_VAR 0 9
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PPUSH
34046: LD_INT 112
34048: PPUSH
34049: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
34053: LD_VAR 0 9
34057: PUSH
34058: LD_INT 1
34060: ARRAY
34061: PPUSH
34062: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
34066: LD_EXP 80
34070: PUSH
34071: LD_VAR 0 2
34075: ARRAY
34076: PUSH
34077: LD_EXP 80
34081: PUSH
34082: LD_VAR 0 2
34086: ARRAY
34087: PUSH
34088: LD_INT 1
34090: ARRAY
34091: PPUSH
34092: CALL_OW 314
34096: NOT
34097: AND
34098: PUSH
34099: LD_EXP 80
34103: PUSH
34104: LD_VAR 0 2
34108: ARRAY
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: PPUSH
34114: CALL_OW 310
34118: NOT
34119: AND
34120: IFFALSE 34146
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
34122: LD_EXP 80
34126: PUSH
34127: LD_VAR 0 2
34131: ARRAY
34132: PUSH
34133: LD_INT 1
34135: ARRAY
34136: PPUSH
34137: LD_VAR 0 3
34141: PPUSH
34142: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
34146: LD_EXP 80
34150: PUSH
34151: LD_VAR 0 2
34155: ARRAY
34156: PUSH
34157: LD_INT 1
34159: ARRAY
34160: PPUSH
34161: CALL_OW 310
34165: PUSH
34166: LD_EXP 80
34170: PUSH
34171: LD_VAR 0 2
34175: ARRAY
34176: PUSH
34177: LD_INT 1
34179: ARRAY
34180: PPUSH
34181: CALL_OW 310
34185: PPUSH
34186: CALL_OW 461
34190: PUSH
34191: LD_INT 3
34193: NONEQUAL
34194: AND
34195: IFFALSE 34216
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
34197: LD_EXP 80
34201: PUSH
34202: LD_VAR 0 2
34206: ARRAY
34207: PUSH
34208: LD_INT 1
34210: ARRAY
34211: PPUSH
34212: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
34216: LD_VAR 0 3
34220: PPUSH
34221: CALL_OW 461
34225: PUSH
34226: LD_INT 6
34228: EQUAL
34229: PUSH
34230: LD_VAR 0 6
34234: PUSH
34235: LD_INT 1
34237: GREATER
34238: AND
34239: IFFALSE 34391
// begin sci := [ ] ;
34241: LD_ADDR_VAR 0 8
34245: PUSH
34246: EMPTY
34247: ST_TO_ADDR
// for x in ( tmp diff j ) do
34248: LD_ADDR_VAR 0 7
34252: PUSH
34253: LD_VAR 0 6
34257: PUSH
34258: LD_VAR 0 3
34262: DIFF
34263: PUSH
34264: FOR_IN
34265: IFFALSE 34317
// begin if sci = 6 then
34267: LD_VAR 0 8
34271: PUSH
34272: LD_INT 6
34274: EQUAL
34275: IFFALSE 34279
// break ;
34277: GO 34317
// if BuildingStatus ( x ) = bs_idle then
34279: LD_VAR 0 7
34283: PPUSH
34284: CALL_OW 461
34288: PUSH
34289: LD_INT 2
34291: EQUAL
34292: IFFALSE 34315
// sci := sci ^ UnitsInside ( x ) ;
34294: LD_ADDR_VAR 0 8
34298: PUSH
34299: LD_VAR 0 8
34303: PUSH
34304: LD_VAR 0 7
34308: PPUSH
34309: CALL_OW 313
34313: ADD
34314: ST_TO_ADDR
// end ;
34315: GO 34264
34317: POP
34318: POP
// if not sci then
34319: LD_VAR 0 8
34323: NOT
34324: IFFALSE 34328
// continue ;
34326: GO 33373
// for x in sci do
34328: LD_ADDR_VAR 0 7
34332: PUSH
34333: LD_VAR 0 8
34337: PUSH
34338: FOR_IN
34339: IFFALSE 34389
// if IsInUnit ( x ) and not HasTask ( x ) then
34341: LD_VAR 0 7
34345: PPUSH
34346: CALL_OW 310
34350: PUSH
34351: LD_VAR 0 7
34355: PPUSH
34356: CALL_OW 314
34360: NOT
34361: AND
34362: IFFALSE 34387
// begin ComExitBuilding ( x ) ;
34364: LD_VAR 0 7
34368: PPUSH
34369: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
34373: LD_VAR 0 7
34377: PPUSH
34378: LD_VAR 0 3
34382: PPUSH
34383: CALL_OW 180
// end ;
34387: GO 34338
34389: POP
34390: POP
// end ; end ;
34391: GO 33373
34393: POP
34394: POP
// end ;
34395: GO 33327
34397: POP
34398: POP
// end ;
34399: LD_VAR 0 1
34403: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34404: LD_INT 0
34406: PPUSH
34407: PPUSH
// if not mc_bases then
34408: LD_EXP 50
34412: NOT
34413: IFFALSE 34417
// exit ;
34415: GO 34498
// for i = 1 to mc_bases do
34417: LD_ADDR_VAR 0 2
34421: PUSH
34422: DOUBLE
34423: LD_INT 1
34425: DEC
34426: ST_TO_ADDR
34427: LD_EXP 50
34431: PUSH
34432: FOR_TO
34433: IFFALSE 34496
// if mc_mines [ i ] and mc_miners [ i ] then
34435: LD_EXP 63
34439: PUSH
34440: LD_VAR 0 2
34444: ARRAY
34445: PUSH
34446: LD_EXP 64
34450: PUSH
34451: LD_VAR 0 2
34455: ARRAY
34456: AND
34457: IFFALSE 34494
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34459: LD_EXP 64
34463: PUSH
34464: LD_VAR 0 2
34468: ARRAY
34469: PUSH
34470: LD_INT 1
34472: ARRAY
34473: PPUSH
34474: CALL_OW 255
34478: PPUSH
34479: LD_EXP 63
34483: PUSH
34484: LD_VAR 0 2
34488: ARRAY
34489: PPUSH
34490: CALL 51237 0 2
34494: GO 34432
34496: POP
34497: POP
// end ;
34498: LD_VAR 0 1
34502: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34503: LD_INT 0
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
// if not mc_bases or not mc_parking then
34513: LD_EXP 50
34517: NOT
34518: PUSH
34519: LD_EXP 74
34523: NOT
34524: OR
34525: IFFALSE 34529
// exit ;
34527: GO 35228
// for i = 1 to mc_bases do
34529: LD_ADDR_VAR 0 2
34533: PUSH
34534: DOUBLE
34535: LD_INT 1
34537: DEC
34538: ST_TO_ADDR
34539: LD_EXP 50
34543: PUSH
34544: FOR_TO
34545: IFFALSE 35226
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34547: LD_EXP 50
34551: PUSH
34552: LD_VAR 0 2
34556: ARRAY
34557: NOT
34558: PUSH
34559: LD_EXP 74
34563: PUSH
34564: LD_VAR 0 2
34568: ARRAY
34569: NOT
34570: OR
34571: IFFALSE 34575
// continue ;
34573: GO 34544
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34575: LD_ADDR_VAR 0 5
34579: PUSH
34580: LD_EXP 50
34584: PUSH
34585: LD_VAR 0 2
34589: ARRAY
34590: PUSH
34591: LD_INT 1
34593: ARRAY
34594: PPUSH
34595: CALL_OW 255
34599: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34600: LD_ADDR_VAR 0 6
34604: PUSH
34605: LD_EXP 50
34609: PUSH
34610: LD_VAR 0 2
34614: ARRAY
34615: PPUSH
34616: LD_INT 30
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PPUSH
34626: CALL_OW 72
34630: ST_TO_ADDR
// if not fac then
34631: LD_VAR 0 6
34635: NOT
34636: IFFALSE 34687
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34638: LD_ADDR_VAR 0 6
34642: PUSH
34643: LD_EXP 50
34647: PUSH
34648: LD_VAR 0 2
34652: ARRAY
34653: PPUSH
34654: LD_INT 2
34656: PUSH
34657: LD_INT 30
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 30
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: PPUSH
34682: CALL_OW 72
34686: ST_TO_ADDR
// if not fac then
34687: LD_VAR 0 6
34691: NOT
34692: IFFALSE 34696
// continue ;
34694: GO 34544
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34696: LD_ADDR_VAR 0 7
34700: PUSH
34701: LD_EXP 74
34705: PUSH
34706: LD_VAR 0 2
34710: ARRAY
34711: PPUSH
34712: LD_INT 22
34714: PUSH
34715: LD_VAR 0 5
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 21
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 24
34739: PUSH
34740: LD_INT 1000
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: PPUSH
34756: CALL_OW 70
34760: ST_TO_ADDR
// for j in fac do
34761: LD_ADDR_VAR 0 3
34765: PUSH
34766: LD_VAR 0 6
34770: PUSH
34771: FOR_IN
34772: IFFALSE 34853
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34774: LD_ADDR_VAR 0 7
34778: PUSH
34779: LD_VAR 0 7
34783: PUSH
34784: LD_INT 22
34786: PUSH
34787: LD_VAR 0 5
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 91
34798: PUSH
34799: LD_VAR 0 3
34803: PUSH
34804: LD_INT 15
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 21
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 3
34824: PUSH
34825: LD_INT 24
34827: PUSH
34828: LD_INT 1000
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: PPUSH
34845: CALL_OW 69
34849: UNION
34850: ST_TO_ADDR
34851: GO 34771
34853: POP
34854: POP
// if not vehs then
34855: LD_VAR 0 7
34859: NOT
34860: IFFALSE 34886
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
34862: LD_ADDR_EXP 62
34866: PUSH
34867: LD_EXP 62
34871: PPUSH
34872: LD_VAR 0 2
34876: PPUSH
34877: EMPTY
34878: PPUSH
34879: CALL_OW 1
34883: ST_TO_ADDR
// continue ;
34884: GO 34544
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34886: LD_ADDR_VAR 0 8
34890: PUSH
34891: LD_EXP 50
34895: PUSH
34896: LD_VAR 0 2
34900: ARRAY
34901: PPUSH
34902: LD_INT 30
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PPUSH
34912: CALL_OW 72
34916: ST_TO_ADDR
// if tmp then
34917: LD_VAR 0 8
34921: IFFALSE 35024
// begin for j in tmp do
34923: LD_ADDR_VAR 0 3
34927: PUSH
34928: LD_VAR 0 8
34932: PUSH
34933: FOR_IN
34934: IFFALSE 35022
// for k in UnitsInside ( j ) do
34936: LD_ADDR_VAR 0 4
34940: PUSH
34941: LD_VAR 0 3
34945: PPUSH
34946: CALL_OW 313
34950: PUSH
34951: FOR_IN
34952: IFFALSE 35018
// if k then
34954: LD_VAR 0 4
34958: IFFALSE 35016
// if not k in mc_repair_vehicle [ i ] then
34960: LD_VAR 0 4
34964: PUSH
34965: LD_EXP 62
34969: PUSH
34970: LD_VAR 0 2
34974: ARRAY
34975: IN
34976: NOT
34977: IFFALSE 35016
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
34979: LD_ADDR_EXP 62
34983: PUSH
34984: LD_EXP 62
34988: PPUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: LD_EXP 62
34998: PUSH
34999: LD_VAR 0 2
35003: ARRAY
35004: PUSH
35005: LD_VAR 0 4
35009: UNION
35010: PPUSH
35011: CALL_OW 1
35015: ST_TO_ADDR
35016: GO 34951
35018: POP
35019: POP
35020: GO 34933
35022: POP
35023: POP
// end ; if not mc_repair_vehicle [ i ] then
35024: LD_EXP 62
35028: PUSH
35029: LD_VAR 0 2
35033: ARRAY
35034: NOT
35035: IFFALSE 35039
// continue ;
35037: GO 34544
// for j in mc_repair_vehicle [ i ] do
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_EXP 62
35048: PUSH
35049: LD_VAR 0 2
35053: ARRAY
35054: PUSH
35055: FOR_IN
35056: IFFALSE 35222
// begin if GetClass ( j ) <> 3 then
35058: LD_VAR 0 3
35062: PPUSH
35063: CALL_OW 257
35067: PUSH
35068: LD_INT 3
35070: NONEQUAL
35071: IFFALSE 35112
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
35073: LD_ADDR_EXP 62
35077: PUSH
35078: LD_EXP 62
35082: PPUSH
35083: LD_VAR 0 2
35087: PPUSH
35088: LD_EXP 62
35092: PUSH
35093: LD_VAR 0 2
35097: ARRAY
35098: PUSH
35099: LD_VAR 0 3
35103: DIFF
35104: PPUSH
35105: CALL_OW 1
35109: ST_TO_ADDR
// continue ;
35110: GO 35055
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
35112: LD_VAR 0 3
35116: PPUSH
35117: CALL_OW 311
35121: NOT
35122: PUSH
35123: LD_VAR 0 3
35127: PUSH
35128: LD_EXP 53
35132: PUSH
35133: LD_VAR 0 2
35137: ARRAY
35138: PUSH
35139: LD_INT 1
35141: ARRAY
35142: IN
35143: NOT
35144: AND
35145: PUSH
35146: LD_VAR 0 3
35150: PUSH
35151: LD_EXP 53
35155: PUSH
35156: LD_VAR 0 2
35160: ARRAY
35161: PUSH
35162: LD_INT 2
35164: ARRAY
35165: IN
35166: NOT
35167: AND
35168: IFFALSE 35220
// begin if IsInUnit ( j ) then
35170: LD_VAR 0 3
35174: PPUSH
35175: CALL_OW 310
35179: IFFALSE 35190
// ComExitBuilding ( j ) ;
35181: LD_VAR 0 3
35185: PPUSH
35186: CALL_OW 122
// if not HasTask ( j ) then
35190: LD_VAR 0 3
35194: PPUSH
35195: CALL_OW 314
35199: NOT
35200: IFFALSE 35220
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
35202: LD_VAR 0 3
35206: PPUSH
35207: LD_VAR 0 7
35211: PUSH
35212: LD_INT 1
35214: ARRAY
35215: PPUSH
35216: CALL_OW 189
// end ; end ;
35220: GO 35055
35222: POP
35223: POP
// end ;
35224: GO 34544
35226: POP
35227: POP
// end ;
35228: LD_VAR 0 1
35232: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
35233: LD_INT 0
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
// if not mc_bases then
35246: LD_EXP 50
35250: NOT
35251: IFFALSE 35255
// exit ;
35253: GO 36057
// for i = 1 to mc_bases do
35255: LD_ADDR_VAR 0 2
35259: PUSH
35260: DOUBLE
35261: LD_INT 1
35263: DEC
35264: ST_TO_ADDR
35265: LD_EXP 50
35269: PUSH
35270: FOR_TO
35271: IFFALSE 36055
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35273: LD_EXP 78
35277: PUSH
35278: LD_VAR 0 2
35282: ARRAY
35283: NOT
35284: PUSH
35285: LD_EXP 53
35289: PUSH
35290: LD_VAR 0 2
35294: ARRAY
35295: PUSH
35296: LD_INT 1
35298: ARRAY
35299: OR
35300: PUSH
35301: LD_EXP 53
35305: PUSH
35306: LD_VAR 0 2
35310: ARRAY
35311: PUSH
35312: LD_INT 2
35314: ARRAY
35315: OR
35316: PUSH
35317: LD_EXP 76
35321: PUSH
35322: LD_VAR 0 2
35326: ARRAY
35327: PPUSH
35328: LD_INT 1
35330: PPUSH
35331: CALL_OW 325
35335: NOT
35336: OR
35337: PUSH
35338: LD_EXP 73
35342: PUSH
35343: LD_VAR 0 2
35347: ARRAY
35348: OR
35349: IFFALSE 35353
// continue ;
35351: GO 35270
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35353: LD_ADDR_VAR 0 8
35357: PUSH
35358: LD_EXP 50
35362: PUSH
35363: LD_VAR 0 2
35367: ARRAY
35368: PPUSH
35369: LD_INT 25
35371: PUSH
35372: LD_INT 4
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 50
35381: PUSH
35382: EMPTY
35383: LIST
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: LD_INT 60
35390: PUSH
35391: EMPTY
35392: LIST
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: PPUSH
35403: CALL_OW 72
35407: PUSH
35408: LD_EXP 54
35412: PUSH
35413: LD_VAR 0 2
35417: ARRAY
35418: DIFF
35419: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35420: LD_ADDR_VAR 0 9
35424: PUSH
35425: LD_EXP 50
35429: PUSH
35430: LD_VAR 0 2
35434: ARRAY
35435: PPUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 30
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 30
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: PPUSH
35464: CALL_OW 72
35468: ST_TO_ADDR
// if not tmp or not dep then
35469: LD_VAR 0 8
35473: NOT
35474: PUSH
35475: LD_VAR 0 9
35479: NOT
35480: OR
35481: IFFALSE 35485
// continue ;
35483: GO 35270
// side := GetSide ( tmp [ 1 ] ) ;
35485: LD_ADDR_VAR 0 11
35489: PUSH
35490: LD_VAR 0 8
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: CALL_OW 255
35503: ST_TO_ADDR
// dep := dep [ 1 ] ;
35504: LD_ADDR_VAR 0 9
35508: PUSH
35509: LD_VAR 0 9
35513: PUSH
35514: LD_INT 1
35516: ARRAY
35517: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35518: LD_ADDR_VAR 0 7
35522: PUSH
35523: LD_EXP 78
35527: PUSH
35528: LD_VAR 0 2
35532: ARRAY
35533: PPUSH
35534: LD_INT 22
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 25
35546: PUSH
35547: LD_INT 12
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PPUSH
35558: CALL_OW 70
35562: PUSH
35563: LD_INT 22
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 25
35575: PUSH
35576: LD_INT 12
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 91
35585: PUSH
35586: LD_VAR 0 9
35590: PUSH
35591: LD_INT 20
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: PPUSH
35604: CALL_OW 69
35608: UNION
35609: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35610: LD_ADDR_VAR 0 10
35614: PUSH
35615: LD_EXP 78
35619: PUSH
35620: LD_VAR 0 2
35624: ARRAY
35625: PPUSH
35626: LD_INT 81
35628: PUSH
35629: LD_VAR 0 11
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PPUSH
35638: CALL_OW 70
35642: ST_TO_ADDR
// if not apes or danger_at_area then
35643: LD_VAR 0 7
35647: NOT
35648: PUSH
35649: LD_VAR 0 10
35653: OR
35654: IFFALSE 35704
// begin if mc_taming [ i ] then
35656: LD_EXP 81
35660: PUSH
35661: LD_VAR 0 2
35665: ARRAY
35666: IFFALSE 35702
// begin MC_Reset ( i , 121 ) ;
35668: LD_VAR 0 2
35672: PPUSH
35673: LD_INT 121
35675: PPUSH
35676: CALL 21035 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
35680: LD_ADDR_EXP 81
35684: PUSH
35685: LD_EXP 81
35689: PPUSH
35690: LD_VAR 0 2
35694: PPUSH
35695: EMPTY
35696: PPUSH
35697: CALL_OW 1
35701: ST_TO_ADDR
// end ; continue ;
35702: GO 35270
// end ; for j in tmp do
35704: LD_ADDR_VAR 0 3
35708: PUSH
35709: LD_VAR 0 8
35713: PUSH
35714: FOR_IN
35715: IFFALSE 36051
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
35717: LD_VAR 0 3
35721: PUSH
35722: LD_EXP 81
35726: PUSH
35727: LD_VAR 0 2
35731: ARRAY
35732: IN
35733: NOT
35734: PUSH
35735: LD_EXP 81
35739: PUSH
35740: LD_VAR 0 2
35744: ARRAY
35745: PUSH
35746: LD_INT 3
35748: LESS
35749: AND
35750: IFFALSE 35808
// begin SetTag ( j , 121 ) ;
35752: LD_VAR 0 3
35756: PPUSH
35757: LD_INT 121
35759: PPUSH
35760: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
35764: LD_ADDR_EXP 81
35768: PUSH
35769: LD_EXP 81
35773: PPUSH
35774: LD_VAR 0 2
35778: PUSH
35779: LD_EXP 81
35783: PUSH
35784: LD_VAR 0 2
35788: ARRAY
35789: PUSH
35790: LD_INT 1
35792: PLUS
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PPUSH
35798: LD_VAR 0 3
35802: PPUSH
35803: CALL 54248 0 3
35807: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
35808: LD_VAR 0 3
35812: PUSH
35813: LD_EXP 81
35817: PUSH
35818: LD_VAR 0 2
35822: ARRAY
35823: IN
35824: IFFALSE 36049
// begin if GetClass ( j ) <> 4 then
35826: LD_VAR 0 3
35830: PPUSH
35831: CALL_OW 257
35835: PUSH
35836: LD_INT 4
35838: NONEQUAL
35839: IFFALSE 35892
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
35841: LD_ADDR_EXP 81
35845: PUSH
35846: LD_EXP 81
35850: PPUSH
35851: LD_VAR 0 2
35855: PPUSH
35856: LD_EXP 81
35860: PUSH
35861: LD_VAR 0 2
35865: ARRAY
35866: PUSH
35867: LD_VAR 0 3
35871: DIFF
35872: PPUSH
35873: CALL_OW 1
35877: ST_TO_ADDR
// SetTag ( j , 0 ) ;
35878: LD_VAR 0 3
35882: PPUSH
35883: LD_INT 0
35885: PPUSH
35886: CALL_OW 109
// continue ;
35890: GO 35714
// end ; if IsInUnit ( j ) then
35892: LD_VAR 0 3
35896: PPUSH
35897: CALL_OW 310
35901: IFFALSE 35912
// ComExitBuilding ( j ) ;
35903: LD_VAR 0 3
35907: PPUSH
35908: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
35912: LD_ADDR_VAR 0 6
35916: PUSH
35917: LD_VAR 0 7
35921: PPUSH
35922: LD_VAR 0 3
35926: PPUSH
35927: CALL_OW 74
35931: ST_TO_ADDR
// if not ape then
35932: LD_VAR 0 6
35936: NOT
35937: IFFALSE 35941
// break ;
35939: GO 36051
// x := GetX ( ape ) ;
35941: LD_ADDR_VAR 0 4
35945: PUSH
35946: LD_VAR 0 6
35950: PPUSH
35951: CALL_OW 250
35955: ST_TO_ADDR
// y := GetY ( ape ) ;
35956: LD_ADDR_VAR 0 5
35960: PUSH
35961: LD_VAR 0 6
35965: PPUSH
35966: CALL_OW 251
35970: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35971: LD_VAR 0 4
35975: PPUSH
35976: LD_VAR 0 5
35980: PPUSH
35981: CALL_OW 488
35985: NOT
35986: PUSH
35987: LD_VAR 0 11
35991: PPUSH
35992: LD_VAR 0 4
35996: PPUSH
35997: LD_VAR 0 5
36001: PPUSH
36002: LD_INT 20
36004: PPUSH
36005: CALL 55144 0 4
36009: PUSH
36010: LD_INT 4
36012: ARRAY
36013: OR
36014: IFFALSE 36018
// break ;
36016: GO 36051
// if not HasTask ( j ) then
36018: LD_VAR 0 3
36022: PPUSH
36023: CALL_OW 314
36027: NOT
36028: IFFALSE 36049
// ComTameXY ( j , x , y ) ;
36030: LD_VAR 0 3
36034: PPUSH
36035: LD_VAR 0 4
36039: PPUSH
36040: LD_VAR 0 5
36044: PPUSH
36045: CALL_OW 131
// end ; end ;
36049: GO 35714
36051: POP
36052: POP
// end ;
36053: GO 35270
36055: POP
36056: POP
// end ;
36057: LD_VAR 0 1
36061: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
36062: LD_INT 0
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
// if not mc_bases then
36072: LD_EXP 50
36076: NOT
36077: IFFALSE 36081
// exit ;
36079: GO 36707
// for i = 1 to mc_bases do
36081: LD_ADDR_VAR 0 2
36085: PUSH
36086: DOUBLE
36087: LD_INT 1
36089: DEC
36090: ST_TO_ADDR
36091: LD_EXP 50
36095: PUSH
36096: FOR_TO
36097: IFFALSE 36705
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
36099: LD_EXP 79
36103: PUSH
36104: LD_VAR 0 2
36108: ARRAY
36109: NOT
36110: PUSH
36111: LD_EXP 79
36115: PUSH
36116: LD_VAR 0 2
36120: ARRAY
36121: PPUSH
36122: LD_INT 25
36124: PUSH
36125: LD_INT 12
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PPUSH
36132: CALL_OW 72
36136: NOT
36137: OR
36138: IFFALSE 36142
// continue ;
36140: GO 36096
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
36142: LD_ADDR_VAR 0 5
36146: PUSH
36147: LD_EXP 79
36151: PUSH
36152: LD_VAR 0 2
36156: ARRAY
36157: PUSH
36158: LD_INT 1
36160: ARRAY
36161: PPUSH
36162: CALL_OW 255
36166: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
36167: LD_VAR 0 5
36171: PPUSH
36172: LD_INT 2
36174: PPUSH
36175: CALL_OW 325
36179: IFFALSE 36432
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36181: LD_ADDR_VAR 0 4
36185: PUSH
36186: LD_EXP 79
36190: PUSH
36191: LD_VAR 0 2
36195: ARRAY
36196: PPUSH
36197: LD_INT 25
36199: PUSH
36200: LD_INT 16
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PPUSH
36207: CALL_OW 72
36211: ST_TO_ADDR
// if tmp < 6 then
36212: LD_VAR 0 4
36216: PUSH
36217: LD_INT 6
36219: LESS
36220: IFFALSE 36432
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
36222: LD_ADDR_VAR 0 6
36226: PUSH
36227: LD_EXP 50
36231: PUSH
36232: LD_VAR 0 2
36236: ARRAY
36237: PPUSH
36238: LD_INT 2
36240: PUSH
36241: LD_INT 30
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 30
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: PPUSH
36266: CALL_OW 72
36270: ST_TO_ADDR
// if depot then
36271: LD_VAR 0 6
36275: IFFALSE 36432
// begin selected := 0 ;
36277: LD_ADDR_VAR 0 7
36281: PUSH
36282: LD_INT 0
36284: ST_TO_ADDR
// for j in depot do
36285: LD_ADDR_VAR 0 3
36289: PUSH
36290: LD_VAR 0 6
36294: PUSH
36295: FOR_IN
36296: IFFALSE 36327
// begin if UnitsInside ( j ) < 6 then
36298: LD_VAR 0 3
36302: PPUSH
36303: CALL_OW 313
36307: PUSH
36308: LD_INT 6
36310: LESS
36311: IFFALSE 36325
// begin selected := j ;
36313: LD_ADDR_VAR 0 7
36317: PUSH
36318: LD_VAR 0 3
36322: ST_TO_ADDR
// break ;
36323: GO 36327
// end ; end ;
36325: GO 36295
36327: POP
36328: POP
// if selected then
36329: LD_VAR 0 7
36333: IFFALSE 36432
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_EXP 79
36344: PUSH
36345: LD_VAR 0 2
36349: ARRAY
36350: PPUSH
36351: LD_INT 25
36353: PUSH
36354: LD_INT 12
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PPUSH
36361: CALL_OW 72
36365: PUSH
36366: FOR_IN
36367: IFFALSE 36430
// if not HasTask ( j ) then
36369: LD_VAR 0 3
36373: PPUSH
36374: CALL_OW 314
36378: NOT
36379: IFFALSE 36428
// begin if not IsInUnit ( j ) then
36381: LD_VAR 0 3
36385: PPUSH
36386: CALL_OW 310
36390: NOT
36391: IFFALSE 36407
// ComEnterUnit ( j , selected ) ;
36393: LD_VAR 0 3
36397: PPUSH
36398: LD_VAR 0 7
36402: PPUSH
36403: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
36407: LD_VAR 0 3
36411: PPUSH
36412: LD_INT 16
36414: PPUSH
36415: CALL_OW 183
// AddComExitBuilding ( j ) ;
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 182
// end ;
36428: GO 36366
36430: POP
36431: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36432: LD_VAR 0 5
36436: PPUSH
36437: LD_INT 11
36439: PPUSH
36440: CALL_OW 325
36444: IFFALSE 36703
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36446: LD_ADDR_VAR 0 4
36450: PUSH
36451: LD_EXP 79
36455: PUSH
36456: LD_VAR 0 2
36460: ARRAY
36461: PPUSH
36462: LD_INT 25
36464: PUSH
36465: LD_INT 16
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PPUSH
36472: CALL_OW 72
36476: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36477: LD_VAR 0 4
36481: PUSH
36482: LD_INT 6
36484: GREATEREQUAL
36485: PUSH
36486: LD_VAR 0 5
36490: PPUSH
36491: LD_INT 2
36493: PPUSH
36494: CALL_OW 325
36498: NOT
36499: OR
36500: IFFALSE 36703
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36502: LD_ADDR_VAR 0 8
36506: PUSH
36507: LD_EXP 50
36511: PUSH
36512: LD_VAR 0 2
36516: ARRAY
36517: PPUSH
36518: LD_INT 2
36520: PUSH
36521: LD_INT 30
36523: PUSH
36524: LD_INT 4
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 30
36533: PUSH
36534: LD_INT 5
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: PPUSH
36546: CALL_OW 72
36550: ST_TO_ADDR
// if barracks then
36551: LD_VAR 0 8
36555: IFFALSE 36703
// begin selected := 0 ;
36557: LD_ADDR_VAR 0 7
36561: PUSH
36562: LD_INT 0
36564: ST_TO_ADDR
// for j in barracks do
36565: LD_ADDR_VAR 0 3
36569: PUSH
36570: LD_VAR 0 8
36574: PUSH
36575: FOR_IN
36576: IFFALSE 36607
// begin if UnitsInside ( j ) < 6 then
36578: LD_VAR 0 3
36582: PPUSH
36583: CALL_OW 313
36587: PUSH
36588: LD_INT 6
36590: LESS
36591: IFFALSE 36605
// begin selected := j ;
36593: LD_ADDR_VAR 0 7
36597: PUSH
36598: LD_VAR 0 3
36602: ST_TO_ADDR
// break ;
36603: GO 36607
// end ; end ;
36605: GO 36575
36607: POP
36608: POP
// if selected then
36609: LD_VAR 0 7
36613: IFFALSE 36703
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36615: LD_ADDR_VAR 0 3
36619: PUSH
36620: LD_EXP 79
36624: PUSH
36625: LD_VAR 0 2
36629: ARRAY
36630: PPUSH
36631: LD_INT 25
36633: PUSH
36634: LD_INT 12
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PPUSH
36641: CALL_OW 72
36645: PUSH
36646: FOR_IN
36647: IFFALSE 36701
// if not IsInUnit ( j ) and not HasTask ( j ) then
36649: LD_VAR 0 3
36653: PPUSH
36654: CALL_OW 310
36658: NOT
36659: PUSH
36660: LD_VAR 0 3
36664: PPUSH
36665: CALL_OW 314
36669: NOT
36670: AND
36671: IFFALSE 36699
// begin ComEnterUnit ( j , selected ) ;
36673: LD_VAR 0 3
36677: PPUSH
36678: LD_VAR 0 7
36682: PPUSH
36683: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
36687: LD_VAR 0 3
36691: PPUSH
36692: LD_INT 15
36694: PPUSH
36695: CALL_OW 183
// end ;
36699: GO 36646
36701: POP
36702: POP
// end ; end ; end ; end ; end ;
36703: GO 36096
36705: POP
36706: POP
// end ;
36707: LD_VAR 0 1
36711: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
36712: LD_INT 0
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
// if not mc_bases then
36718: LD_EXP 50
36722: NOT
36723: IFFALSE 36727
// exit ;
36725: GO 36905
// for i = 1 to mc_bases do
36727: LD_ADDR_VAR 0 2
36731: PUSH
36732: DOUBLE
36733: LD_INT 1
36735: DEC
36736: ST_TO_ADDR
36737: LD_EXP 50
36741: PUSH
36742: FOR_TO
36743: IFFALSE 36903
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
36745: LD_ADDR_VAR 0 4
36749: PUSH
36750: LD_EXP 50
36754: PUSH
36755: LD_VAR 0 2
36759: ARRAY
36760: PPUSH
36761: LD_INT 25
36763: PUSH
36764: LD_INT 9
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PPUSH
36771: CALL_OW 72
36775: ST_TO_ADDR
// if not tmp then
36776: LD_VAR 0 4
36780: NOT
36781: IFFALSE 36785
// continue ;
36783: GO 36742
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
36785: LD_EXP 76
36789: PUSH
36790: LD_VAR 0 2
36794: ARRAY
36795: PPUSH
36796: LD_INT 29
36798: PPUSH
36799: CALL_OW 325
36803: NOT
36804: PUSH
36805: LD_EXP 76
36809: PUSH
36810: LD_VAR 0 2
36814: ARRAY
36815: PPUSH
36816: LD_INT 28
36818: PPUSH
36819: CALL_OW 325
36823: NOT
36824: AND
36825: IFFALSE 36829
// continue ;
36827: GO 36742
// for j in tmp do
36829: LD_ADDR_VAR 0 3
36833: PUSH
36834: LD_VAR 0 4
36838: PUSH
36839: FOR_IN
36840: IFFALSE 36899
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
36842: LD_VAR 0 3
36846: PUSH
36847: LD_EXP 53
36851: PUSH
36852: LD_VAR 0 2
36856: ARRAY
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: IN
36862: NOT
36863: PUSH
36864: LD_VAR 0 3
36868: PUSH
36869: LD_EXP 53
36873: PUSH
36874: LD_VAR 0 2
36878: ARRAY
36879: PUSH
36880: LD_INT 2
36882: ARRAY
36883: IN
36884: NOT
36885: AND
36886: IFFALSE 36897
// ComSpaceTimeShoot ( j ) ;
36888: LD_VAR 0 3
36892: PPUSH
36893: CALL 47923 0 1
36897: GO 36839
36899: POP
36900: POP
// end ;
36901: GO 36742
36903: POP
36904: POP
// end ;
36905: LD_VAR 0 1
36909: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
36910: LD_INT 0
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
36916: PPUSH
36917: PPUSH
36918: PPUSH
36919: PPUSH
36920: PPUSH
// if not mc_bases then
36921: LD_EXP 50
36925: NOT
36926: IFFALSE 36930
// exit ;
36928: GO 37552
// for i = 1 to mc_bases do
36930: LD_ADDR_VAR 0 2
36934: PUSH
36935: DOUBLE
36936: LD_INT 1
36938: DEC
36939: ST_TO_ADDR
36940: LD_EXP 50
36944: PUSH
36945: FOR_TO
36946: IFFALSE 37550
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
36948: LD_EXP 85
36952: PUSH
36953: LD_VAR 0 2
36957: ARRAY
36958: NOT
36959: PUSH
36960: LD_INT 38
36962: PPUSH
36963: LD_EXP 76
36967: PUSH
36968: LD_VAR 0 2
36972: ARRAY
36973: PPUSH
36974: CALL_OW 321
36978: PUSH
36979: LD_INT 2
36981: NONEQUAL
36982: OR
36983: IFFALSE 36987
// continue ;
36985: GO 36945
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
36987: LD_ADDR_VAR 0 8
36991: PUSH
36992: LD_EXP 50
36996: PUSH
36997: LD_VAR 0 2
37001: ARRAY
37002: PPUSH
37003: LD_INT 30
37005: PUSH
37006: LD_INT 34
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PPUSH
37013: CALL_OW 72
37017: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
37018: LD_ADDR_VAR 0 9
37022: PUSH
37023: LD_EXP 50
37027: PUSH
37028: LD_VAR 0 2
37032: ARRAY
37033: PPUSH
37034: LD_INT 25
37036: PUSH
37037: LD_INT 4
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PPUSH
37044: CALL_OW 72
37048: PPUSH
37049: LD_INT 0
37051: PPUSH
37052: CALL 87508 0 2
37056: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
37057: LD_VAR 0 9
37061: NOT
37062: PUSH
37063: LD_VAR 0 8
37067: NOT
37068: OR
37069: PUSH
37070: LD_EXP 50
37074: PUSH
37075: LD_VAR 0 2
37079: ARRAY
37080: PPUSH
37081: LD_INT 124
37083: PPUSH
37084: CALL 87508 0 2
37088: OR
37089: IFFALSE 37093
// continue ;
37091: GO 36945
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
37093: LD_EXP 86
37097: PUSH
37098: LD_VAR 0 2
37102: ARRAY
37103: PUSH
37104: LD_EXP 85
37108: PUSH
37109: LD_VAR 0 2
37113: ARRAY
37114: LESS
37115: PUSH
37116: LD_EXP 86
37120: PUSH
37121: LD_VAR 0 2
37125: ARRAY
37126: PUSH
37127: LD_VAR 0 8
37131: LESS
37132: AND
37133: IFFALSE 37548
// begin tmp := sci [ 1 ] ;
37135: LD_ADDR_VAR 0 7
37139: PUSH
37140: LD_VAR 0 9
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
37149: LD_VAR 0 7
37153: PPUSH
37154: LD_INT 124
37156: PPUSH
37157: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
37161: LD_ADDR_VAR 0 3
37165: PUSH
37166: DOUBLE
37167: LD_EXP 85
37171: PUSH
37172: LD_VAR 0 2
37176: ARRAY
37177: INC
37178: ST_TO_ADDR
37179: LD_EXP 85
37183: PUSH
37184: LD_VAR 0 2
37188: ARRAY
37189: PUSH
37190: FOR_DOWNTO
37191: IFFALSE 37534
// begin if IsInUnit ( tmp ) then
37193: LD_VAR 0 7
37197: PPUSH
37198: CALL_OW 310
37202: IFFALSE 37213
// ComExitBuilding ( tmp ) ;
37204: LD_VAR 0 7
37208: PPUSH
37209: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
37213: LD_INT 35
37215: PPUSH
37216: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
37220: LD_VAR 0 7
37224: PPUSH
37225: CALL_OW 310
37229: NOT
37230: PUSH
37231: LD_VAR 0 7
37235: PPUSH
37236: CALL_OW 314
37240: NOT
37241: AND
37242: IFFALSE 37213
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
37244: LD_ADDR_VAR 0 6
37248: PUSH
37249: LD_VAR 0 7
37253: PPUSH
37254: CALL_OW 250
37258: PUSH
37259: LD_VAR 0 7
37263: PPUSH
37264: CALL_OW 251
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37273: LD_INT 35
37275: PPUSH
37276: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37280: LD_ADDR_VAR 0 4
37284: PUSH
37285: LD_EXP 85
37289: PUSH
37290: LD_VAR 0 2
37294: ARRAY
37295: PUSH
37296: LD_VAR 0 3
37300: ARRAY
37301: PUSH
37302: LD_INT 1
37304: ARRAY
37305: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37306: LD_ADDR_VAR 0 5
37310: PUSH
37311: LD_EXP 85
37315: PUSH
37316: LD_VAR 0 2
37320: ARRAY
37321: PUSH
37322: LD_VAR 0 3
37326: ARRAY
37327: PUSH
37328: LD_INT 2
37330: ARRAY
37331: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37332: LD_VAR 0 7
37336: PPUSH
37337: LD_INT 10
37339: PPUSH
37340: CALL 56841 0 2
37344: PUSH
37345: LD_INT 4
37347: ARRAY
37348: IFFALSE 37386
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37350: LD_VAR 0 7
37354: PPUSH
37355: LD_VAR 0 6
37359: PUSH
37360: LD_INT 1
37362: ARRAY
37363: PPUSH
37364: LD_VAR 0 6
37368: PUSH
37369: LD_INT 2
37371: ARRAY
37372: PPUSH
37373: CALL_OW 111
// wait ( 0 0$10 ) ;
37377: LD_INT 350
37379: PPUSH
37380: CALL_OW 67
// end else
37384: GO 37412
// begin ComMoveXY ( tmp , x , y ) ;
37386: LD_VAR 0 7
37390: PPUSH
37391: LD_VAR 0 4
37395: PPUSH
37396: LD_VAR 0 5
37400: PPUSH
37401: CALL_OW 111
// wait ( 0 0$3 ) ;
37405: LD_INT 105
37407: PPUSH
37408: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
37412: LD_VAR 0 7
37416: PPUSH
37417: LD_VAR 0 4
37421: PPUSH
37422: LD_VAR 0 5
37426: PPUSH
37427: CALL_OW 307
37431: IFFALSE 37273
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37433: LD_VAR 0 7
37437: PPUSH
37438: LD_VAR 0 4
37442: PPUSH
37443: LD_VAR 0 5
37447: PPUSH
37448: LD_VAR 0 8
37452: PUSH
37453: LD_VAR 0 3
37457: ARRAY
37458: PPUSH
37459: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
37463: LD_INT 35
37465: PPUSH
37466: CALL_OW 67
// until not HasTask ( tmp ) ;
37470: LD_VAR 0 7
37474: PPUSH
37475: CALL_OW 314
37479: NOT
37480: IFFALSE 37463
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37482: LD_ADDR_EXP 86
37486: PUSH
37487: LD_EXP 86
37491: PPUSH
37492: LD_VAR 0 2
37496: PUSH
37497: LD_EXP 86
37501: PUSH
37502: LD_VAR 0 2
37506: ARRAY
37507: PUSH
37508: LD_INT 1
37510: PLUS
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PPUSH
37516: LD_VAR 0 8
37520: PUSH
37521: LD_VAR 0 3
37525: ARRAY
37526: PPUSH
37527: CALL 54248 0 3
37531: ST_TO_ADDR
// end ;
37532: GO 37190
37534: POP
37535: POP
// MC_Reset ( i , 124 ) ;
37536: LD_VAR 0 2
37540: PPUSH
37541: LD_INT 124
37543: PPUSH
37544: CALL 21035 0 2
// end ; end ;
37548: GO 36945
37550: POP
37551: POP
// end ;
37552: LD_VAR 0 1
37556: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37557: LD_INT 0
37559: PPUSH
37560: PPUSH
37561: PPUSH
// if not mc_bases then
37562: LD_EXP 50
37566: NOT
37567: IFFALSE 37571
// exit ;
37569: GO 38177
// for i = 1 to mc_bases do
37571: LD_ADDR_VAR 0 2
37575: PUSH
37576: DOUBLE
37577: LD_INT 1
37579: DEC
37580: ST_TO_ADDR
37581: LD_EXP 50
37585: PUSH
37586: FOR_TO
37587: IFFALSE 38175
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37589: LD_ADDR_VAR 0 3
37593: PUSH
37594: LD_EXP 50
37598: PUSH
37599: LD_VAR 0 2
37603: ARRAY
37604: PPUSH
37605: LD_INT 25
37607: PUSH
37608: LD_INT 4
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PPUSH
37615: CALL_OW 72
37619: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37620: LD_VAR 0 3
37624: NOT
37625: PUSH
37626: LD_EXP 87
37630: PUSH
37631: LD_VAR 0 2
37635: ARRAY
37636: NOT
37637: OR
37638: PUSH
37639: LD_EXP 50
37643: PUSH
37644: LD_VAR 0 2
37648: ARRAY
37649: PPUSH
37650: LD_INT 2
37652: PUSH
37653: LD_INT 30
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 30
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: PPUSH
37678: CALL_OW 72
37682: NOT
37683: OR
37684: IFFALSE 37734
// begin if mc_deposits_finder [ i ] then
37686: LD_EXP 88
37690: PUSH
37691: LD_VAR 0 2
37695: ARRAY
37696: IFFALSE 37732
// begin MC_Reset ( i , 125 ) ;
37698: LD_VAR 0 2
37702: PPUSH
37703: LD_INT 125
37705: PPUSH
37706: CALL 21035 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37710: LD_ADDR_EXP 88
37714: PUSH
37715: LD_EXP 88
37719: PPUSH
37720: LD_VAR 0 2
37724: PPUSH
37725: EMPTY
37726: PPUSH
37727: CALL_OW 1
37731: ST_TO_ADDR
// end ; continue ;
37732: GO 37586
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
37734: LD_EXP 87
37738: PUSH
37739: LD_VAR 0 2
37743: ARRAY
37744: PUSH
37745: LD_INT 1
37747: ARRAY
37748: PUSH
37749: LD_INT 3
37751: ARRAY
37752: PUSH
37753: LD_INT 1
37755: EQUAL
37756: PUSH
37757: LD_INT 20
37759: PPUSH
37760: LD_EXP 76
37764: PUSH
37765: LD_VAR 0 2
37769: ARRAY
37770: PPUSH
37771: CALL_OW 321
37775: PUSH
37776: LD_INT 2
37778: NONEQUAL
37779: AND
37780: IFFALSE 37830
// begin if mc_deposits_finder [ i ] then
37782: LD_EXP 88
37786: PUSH
37787: LD_VAR 0 2
37791: ARRAY
37792: IFFALSE 37828
// begin MC_Reset ( i , 125 ) ;
37794: LD_VAR 0 2
37798: PPUSH
37799: LD_INT 125
37801: PPUSH
37802: CALL 21035 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37806: LD_ADDR_EXP 88
37810: PUSH
37811: LD_EXP 88
37815: PPUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: EMPTY
37822: PPUSH
37823: CALL_OW 1
37827: ST_TO_ADDR
// end ; continue ;
37828: GO 37586
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
37830: LD_EXP 87
37834: PUSH
37835: LD_VAR 0 2
37839: ARRAY
37840: PUSH
37841: LD_INT 1
37843: ARRAY
37844: PUSH
37845: LD_INT 1
37847: ARRAY
37848: PPUSH
37849: LD_EXP 87
37853: PUSH
37854: LD_VAR 0 2
37858: ARRAY
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PUSH
37864: LD_INT 2
37866: ARRAY
37867: PPUSH
37868: LD_EXP 76
37872: PUSH
37873: LD_VAR 0 2
37877: ARRAY
37878: PPUSH
37879: CALL_OW 440
37883: IFFALSE 37926
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
37885: LD_ADDR_EXP 87
37889: PUSH
37890: LD_EXP 87
37894: PPUSH
37895: LD_VAR 0 2
37899: PPUSH
37900: LD_EXP 87
37904: PUSH
37905: LD_VAR 0 2
37909: ARRAY
37910: PPUSH
37911: LD_INT 1
37913: PPUSH
37914: CALL_OW 3
37918: PPUSH
37919: CALL_OW 1
37923: ST_TO_ADDR
37924: GO 38173
// begin if not mc_deposits_finder [ i ] then
37926: LD_EXP 88
37930: PUSH
37931: LD_VAR 0 2
37935: ARRAY
37936: NOT
37937: IFFALSE 37989
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
37939: LD_ADDR_EXP 88
37943: PUSH
37944: LD_EXP 88
37948: PPUSH
37949: LD_VAR 0 2
37953: PPUSH
37954: LD_VAR 0 3
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: PUSH
37963: EMPTY
37964: LIST
37965: PPUSH
37966: CALL_OW 1
37970: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
37971: LD_VAR 0 3
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: LD_INT 125
37982: PPUSH
37983: CALL_OW 109
// end else
37987: GO 38173
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
37989: LD_EXP 88
37993: PUSH
37994: LD_VAR 0 2
37998: ARRAY
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PPUSH
38004: CALL_OW 310
38008: IFFALSE 38031
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
38010: LD_EXP 88
38014: PUSH
38015: LD_VAR 0 2
38019: ARRAY
38020: PUSH
38021: LD_INT 1
38023: ARRAY
38024: PPUSH
38025: CALL_OW 122
38029: GO 38173
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
38031: LD_EXP 88
38035: PUSH
38036: LD_VAR 0 2
38040: ARRAY
38041: PUSH
38042: LD_INT 1
38044: ARRAY
38045: PPUSH
38046: CALL_OW 314
38050: NOT
38051: PUSH
38052: LD_EXP 88
38056: PUSH
38057: LD_VAR 0 2
38061: ARRAY
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: PPUSH
38067: LD_EXP 87
38071: PUSH
38072: LD_VAR 0 2
38076: ARRAY
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PUSH
38082: LD_INT 1
38084: ARRAY
38085: PPUSH
38086: LD_EXP 87
38090: PUSH
38091: LD_VAR 0 2
38095: ARRAY
38096: PUSH
38097: LD_INT 1
38099: ARRAY
38100: PUSH
38101: LD_INT 2
38103: ARRAY
38104: PPUSH
38105: CALL_OW 297
38109: PUSH
38110: LD_INT 6
38112: GREATER
38113: AND
38114: IFFALSE 38173
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
38116: LD_EXP 88
38120: PUSH
38121: LD_VAR 0 2
38125: ARRAY
38126: PUSH
38127: LD_INT 1
38129: ARRAY
38130: PPUSH
38131: LD_EXP 87
38135: PUSH
38136: LD_VAR 0 2
38140: ARRAY
38141: PUSH
38142: LD_INT 1
38144: ARRAY
38145: PUSH
38146: LD_INT 1
38148: ARRAY
38149: PPUSH
38150: LD_EXP 87
38154: PUSH
38155: LD_VAR 0 2
38159: ARRAY
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: PUSH
38165: LD_INT 2
38167: ARRAY
38168: PPUSH
38169: CALL_OW 111
// end ; end ; end ;
38173: GO 37586
38175: POP
38176: POP
// end ;
38177: LD_VAR 0 1
38181: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
38182: LD_INT 0
38184: PPUSH
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
// if not mc_bases then
38195: LD_EXP 50
38199: NOT
38200: IFFALSE 38204
// exit ;
38202: GO 39144
// for i = 1 to mc_bases do
38204: LD_ADDR_VAR 0 2
38208: PUSH
38209: DOUBLE
38210: LD_INT 1
38212: DEC
38213: ST_TO_ADDR
38214: LD_EXP 50
38218: PUSH
38219: FOR_TO
38220: IFFALSE 39142
// begin if not mc_bases [ i ] or mc_scan [ i ] then
38222: LD_EXP 50
38226: PUSH
38227: LD_VAR 0 2
38231: ARRAY
38232: NOT
38233: PUSH
38234: LD_EXP 73
38238: PUSH
38239: LD_VAR 0 2
38243: ARRAY
38244: OR
38245: IFFALSE 38249
// continue ;
38247: GO 38219
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
38249: LD_ADDR_VAR 0 7
38253: PUSH
38254: LD_EXP 50
38258: PUSH
38259: LD_VAR 0 2
38263: ARRAY
38264: PUSH
38265: LD_INT 1
38267: ARRAY
38268: PPUSH
38269: CALL_OW 248
38273: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38274: LD_VAR 0 7
38278: PUSH
38279: LD_INT 3
38281: EQUAL
38282: PUSH
38283: LD_EXP 69
38287: PUSH
38288: LD_VAR 0 2
38292: ARRAY
38293: PUSH
38294: LD_EXP 72
38298: PUSH
38299: LD_VAR 0 2
38303: ARRAY
38304: UNION
38305: PPUSH
38306: LD_INT 33
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PPUSH
38316: CALL_OW 72
38320: NOT
38321: OR
38322: IFFALSE 38326
// continue ;
38324: GO 38219
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38326: LD_ADDR_VAR 0 9
38330: PUSH
38331: LD_EXP 50
38335: PUSH
38336: LD_VAR 0 2
38340: ARRAY
38341: PPUSH
38342: LD_INT 30
38344: PUSH
38345: LD_INT 36
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PPUSH
38352: CALL_OW 72
38356: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38357: LD_ADDR_VAR 0 10
38361: PUSH
38362: LD_EXP 69
38366: PUSH
38367: LD_VAR 0 2
38371: ARRAY
38372: PPUSH
38373: LD_INT 34
38375: PUSH
38376: LD_INT 31
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PPUSH
38383: CALL_OW 72
38387: ST_TO_ADDR
// if not cts and not mcts then
38388: LD_VAR 0 9
38392: NOT
38393: PUSH
38394: LD_VAR 0 10
38398: NOT
38399: AND
38400: IFFALSE 38404
// continue ;
38402: GO 38219
// x := cts ;
38404: LD_ADDR_VAR 0 11
38408: PUSH
38409: LD_VAR 0 9
38413: ST_TO_ADDR
// if not x then
38414: LD_VAR 0 11
38418: NOT
38419: IFFALSE 38431
// x := mcts ;
38421: LD_ADDR_VAR 0 11
38425: PUSH
38426: LD_VAR 0 10
38430: ST_TO_ADDR
// if not x then
38431: LD_VAR 0 11
38435: NOT
38436: IFFALSE 38440
// continue ;
38438: GO 38219
// if mc_remote_driver [ i ] then
38440: LD_EXP 90
38444: PUSH
38445: LD_VAR 0 2
38449: ARRAY
38450: IFFALSE 38837
// for j in mc_remote_driver [ i ] do
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_EXP 90
38461: PUSH
38462: LD_VAR 0 2
38466: ARRAY
38467: PUSH
38468: FOR_IN
38469: IFFALSE 38835
// begin if GetClass ( j ) <> 3 then
38471: LD_VAR 0 3
38475: PPUSH
38476: CALL_OW 257
38480: PUSH
38481: LD_INT 3
38483: NONEQUAL
38484: IFFALSE 38537
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38486: LD_ADDR_EXP 90
38490: PUSH
38491: LD_EXP 90
38495: PPUSH
38496: LD_VAR 0 2
38500: PPUSH
38501: LD_EXP 90
38505: PUSH
38506: LD_VAR 0 2
38510: ARRAY
38511: PUSH
38512: LD_VAR 0 3
38516: DIFF
38517: PPUSH
38518: CALL_OW 1
38522: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38523: LD_VAR 0 3
38527: PPUSH
38528: LD_INT 0
38530: PPUSH
38531: CALL_OW 109
// continue ;
38535: GO 38468
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
38537: LD_EXP 69
38541: PUSH
38542: LD_VAR 0 2
38546: ARRAY
38547: PPUSH
38548: LD_INT 34
38550: PUSH
38551: LD_INT 31
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 58
38560: PUSH
38561: EMPTY
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PPUSH
38568: CALL_OW 72
38572: PUSH
38573: LD_VAR 0 3
38577: PPUSH
38578: CALL 87596 0 1
38582: NOT
38583: AND
38584: IFFALSE 38655
// begin if IsInUnit ( j ) then
38586: LD_VAR 0 3
38590: PPUSH
38591: CALL_OW 310
38595: IFFALSE 38606
// ComExitBuilding ( j ) ;
38597: LD_VAR 0 3
38601: PPUSH
38602: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
38606: LD_VAR 0 3
38610: PPUSH
38611: LD_EXP 69
38615: PUSH
38616: LD_VAR 0 2
38620: ARRAY
38621: PPUSH
38622: LD_INT 34
38624: PUSH
38625: LD_INT 31
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 58
38634: PUSH
38635: EMPTY
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PPUSH
38642: CALL_OW 72
38646: PUSH
38647: LD_INT 1
38649: ARRAY
38650: PPUSH
38651: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38655: LD_VAR 0 3
38659: PPUSH
38660: CALL_OW 310
38664: NOT
38665: PUSH
38666: LD_VAR 0 3
38670: PPUSH
38671: CALL_OW 310
38675: PPUSH
38676: CALL_OW 266
38680: PUSH
38681: LD_INT 36
38683: NONEQUAL
38684: PUSH
38685: LD_VAR 0 3
38689: PPUSH
38690: CALL 87596 0 1
38694: NOT
38695: AND
38696: OR
38697: IFFALSE 38833
// begin if IsInUnit ( j ) then
38699: LD_VAR 0 3
38703: PPUSH
38704: CALL_OW 310
38708: IFFALSE 38719
// ComExitBuilding ( j ) ;
38710: LD_VAR 0 3
38714: PPUSH
38715: CALL_OW 122
// ct := 0 ;
38719: LD_ADDR_VAR 0 8
38723: PUSH
38724: LD_INT 0
38726: ST_TO_ADDR
// for k in x do
38727: LD_ADDR_VAR 0 4
38731: PUSH
38732: LD_VAR 0 11
38736: PUSH
38737: FOR_IN
38738: IFFALSE 38811
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
38740: LD_VAR 0 4
38744: PPUSH
38745: CALL_OW 264
38749: PUSH
38750: LD_INT 31
38752: EQUAL
38753: PUSH
38754: LD_VAR 0 4
38758: PPUSH
38759: CALL_OW 311
38763: NOT
38764: AND
38765: PUSH
38766: LD_VAR 0 4
38770: PPUSH
38771: CALL_OW 266
38775: PUSH
38776: LD_INT 36
38778: EQUAL
38779: PUSH
38780: LD_VAR 0 4
38784: PPUSH
38785: CALL_OW 313
38789: PUSH
38790: LD_INT 3
38792: LESS
38793: AND
38794: OR
38795: IFFALSE 38809
// begin ct := k ;
38797: LD_ADDR_VAR 0 8
38801: PUSH
38802: LD_VAR 0 4
38806: ST_TO_ADDR
// break ;
38807: GO 38811
// end ;
38809: GO 38737
38811: POP
38812: POP
// if ct then
38813: LD_VAR 0 8
38817: IFFALSE 38833
// ComEnterUnit ( j , ct ) ;
38819: LD_VAR 0 3
38823: PPUSH
38824: LD_VAR 0 8
38828: PPUSH
38829: CALL_OW 120
// end ; end ;
38833: GO 38468
38835: POP
38836: POP
// places := 0 ;
38837: LD_ADDR_VAR 0 5
38841: PUSH
38842: LD_INT 0
38844: ST_TO_ADDR
// for j = 1 to x do
38845: LD_ADDR_VAR 0 3
38849: PUSH
38850: DOUBLE
38851: LD_INT 1
38853: DEC
38854: ST_TO_ADDR
38855: LD_VAR 0 11
38859: PUSH
38860: FOR_TO
38861: IFFALSE 38937
// if GetWeapon ( x [ j ] ) = ar_control_tower then
38863: LD_VAR 0 11
38867: PUSH
38868: LD_VAR 0 3
38872: ARRAY
38873: PPUSH
38874: CALL_OW 264
38878: PUSH
38879: LD_INT 31
38881: EQUAL
38882: IFFALSE 38900
// places := places + 1 else
38884: LD_ADDR_VAR 0 5
38888: PUSH
38889: LD_VAR 0 5
38893: PUSH
38894: LD_INT 1
38896: PLUS
38897: ST_TO_ADDR
38898: GO 38935
// if GetBType ( x [ j ] ) = b_control_tower then
38900: LD_VAR 0 11
38904: PUSH
38905: LD_VAR 0 3
38909: ARRAY
38910: PPUSH
38911: CALL_OW 266
38915: PUSH
38916: LD_INT 36
38918: EQUAL
38919: IFFALSE 38935
// places := places + 3 ;
38921: LD_ADDR_VAR 0 5
38925: PUSH
38926: LD_VAR 0 5
38930: PUSH
38931: LD_INT 3
38933: PLUS
38934: ST_TO_ADDR
38935: GO 38860
38937: POP
38938: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
38939: LD_VAR 0 5
38943: PUSH
38944: LD_INT 0
38946: EQUAL
38947: PUSH
38948: LD_VAR 0 5
38952: PUSH
38953: LD_EXP 90
38957: PUSH
38958: LD_VAR 0 2
38962: ARRAY
38963: LESSEQUAL
38964: OR
38965: IFFALSE 38969
// continue ;
38967: GO 38219
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
38969: LD_ADDR_VAR 0 6
38973: PUSH
38974: LD_EXP 50
38978: PUSH
38979: LD_VAR 0 2
38983: ARRAY
38984: PPUSH
38985: LD_INT 25
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PPUSH
38995: CALL_OW 72
38999: PUSH
39000: LD_EXP 90
39004: PUSH
39005: LD_VAR 0 2
39009: ARRAY
39010: DIFF
39011: PPUSH
39012: LD_INT 3
39014: PPUSH
39015: CALL 88496 0 2
39019: ST_TO_ADDR
// for j in tmp do
39020: LD_ADDR_VAR 0 3
39024: PUSH
39025: LD_VAR 0 6
39029: PUSH
39030: FOR_IN
39031: IFFALSE 39066
// if GetTag ( j ) > 0 then
39033: LD_VAR 0 3
39037: PPUSH
39038: CALL_OW 110
39042: PUSH
39043: LD_INT 0
39045: GREATER
39046: IFFALSE 39064
// tmp := tmp diff j ;
39048: LD_ADDR_VAR 0 6
39052: PUSH
39053: LD_VAR 0 6
39057: PUSH
39058: LD_VAR 0 3
39062: DIFF
39063: ST_TO_ADDR
39064: GO 39030
39066: POP
39067: POP
// if not tmp then
39068: LD_VAR 0 6
39072: NOT
39073: IFFALSE 39077
// continue ;
39075: GO 38219
// if places then
39077: LD_VAR 0 5
39081: IFFALSE 39140
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
39083: LD_ADDR_EXP 90
39087: PUSH
39088: LD_EXP 90
39092: PPUSH
39093: LD_VAR 0 2
39097: PPUSH
39098: LD_EXP 90
39102: PUSH
39103: LD_VAR 0 2
39107: ARRAY
39108: PUSH
39109: LD_VAR 0 6
39113: PUSH
39114: LD_INT 1
39116: ARRAY
39117: UNION
39118: PPUSH
39119: CALL_OW 1
39123: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
39124: LD_VAR 0 6
39128: PUSH
39129: LD_INT 1
39131: ARRAY
39132: PPUSH
39133: LD_INT 126
39135: PPUSH
39136: CALL_OW 109
// end ; end ;
39140: GO 38219
39142: POP
39143: POP
// end ;
39144: LD_VAR 0 1
39148: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
39149: LD_INT 0
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
39157: LD_VAR 0 1
39161: NOT
39162: PUSH
39163: LD_VAR 0 2
39167: NOT
39168: OR
39169: PUSH
39170: LD_VAR 0 3
39174: NOT
39175: OR
39176: PUSH
39177: LD_VAR 0 4
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: LD_INT 4
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: LD_INT 8
39199: PUSH
39200: LD_INT 9
39202: PUSH
39203: LD_INT 15
39205: PUSH
39206: LD_INT 16
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: IN
39220: NOT
39221: OR
39222: IFFALSE 39226
// exit ;
39224: GO 40126
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
39226: LD_ADDR_VAR 0 2
39230: PUSH
39231: LD_VAR 0 2
39235: PPUSH
39236: LD_INT 21
39238: PUSH
39239: LD_INT 3
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 24
39248: PUSH
39249: LD_INT 250
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PPUSH
39260: CALL_OW 72
39264: ST_TO_ADDR
// case class of 1 , 15 :
39265: LD_VAR 0 4
39269: PUSH
39270: LD_INT 1
39272: DOUBLE
39273: EQUAL
39274: IFTRUE 39284
39276: LD_INT 15
39278: DOUBLE
39279: EQUAL
39280: IFTRUE 39284
39282: GO 39369
39284: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
39285: LD_ADDR_VAR 0 8
39289: PUSH
39290: LD_VAR 0 2
39294: PPUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 30
39300: PUSH
39301: LD_INT 32
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 30
39310: PUSH
39311: LD_INT 31
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: PPUSH
39323: CALL_OW 72
39327: PUSH
39328: LD_VAR 0 2
39332: PPUSH
39333: LD_INT 2
39335: PUSH
39336: LD_INT 30
39338: PUSH
39339: LD_INT 4
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 30
39348: PUSH
39349: LD_INT 5
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: LIST
39360: PPUSH
39361: CALL_OW 72
39365: ADD
39366: ST_TO_ADDR
39367: GO 39615
39369: LD_INT 2
39371: DOUBLE
39372: EQUAL
39373: IFTRUE 39383
39375: LD_INT 16
39377: DOUBLE
39378: EQUAL
39379: IFTRUE 39383
39381: GO 39429
39383: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
39384: LD_ADDR_VAR 0 8
39388: PUSH
39389: LD_VAR 0 2
39393: PPUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 30
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 30
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: PPUSH
39422: CALL_OW 72
39426: ST_TO_ADDR
39427: GO 39615
39429: LD_INT 3
39431: DOUBLE
39432: EQUAL
39433: IFTRUE 39437
39435: GO 39483
39437: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
39438: LD_ADDR_VAR 0 8
39442: PUSH
39443: LD_VAR 0 2
39447: PPUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 30
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 30
39463: PUSH
39464: LD_INT 3
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: PPUSH
39476: CALL_OW 72
39480: ST_TO_ADDR
39481: GO 39615
39483: LD_INT 4
39485: DOUBLE
39486: EQUAL
39487: IFTRUE 39491
39489: GO 39548
39491: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39492: LD_ADDR_VAR 0 8
39496: PUSH
39497: LD_VAR 0 2
39501: PPUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 30
39507: PUSH
39508: LD_INT 6
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 30
39517: PUSH
39518: LD_INT 7
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 30
39527: PUSH
39528: LD_INT 8
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: PPUSH
39541: CALL_OW 72
39545: ST_TO_ADDR
39546: GO 39615
39548: LD_INT 5
39550: DOUBLE
39551: EQUAL
39552: IFTRUE 39568
39554: LD_INT 8
39556: DOUBLE
39557: EQUAL
39558: IFTRUE 39568
39560: LD_INT 9
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39568
39566: GO 39614
39568: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39569: LD_ADDR_VAR 0 8
39573: PUSH
39574: LD_VAR 0 2
39578: PPUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 30
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 30
39594: PUSH
39595: LD_INT 5
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: PPUSH
39607: CALL_OW 72
39611: ST_TO_ADDR
39612: GO 39615
39614: POP
// if not tmp then
39615: LD_VAR 0 8
39619: NOT
39620: IFFALSE 39624
// exit ;
39622: GO 40126
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39624: LD_VAR 0 4
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 15
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: IN
39639: PUSH
39640: LD_EXP 59
39644: PUSH
39645: LD_VAR 0 1
39649: ARRAY
39650: AND
39651: IFFALSE 39807
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39653: LD_ADDR_VAR 0 9
39657: PUSH
39658: LD_EXP 59
39662: PUSH
39663: LD_VAR 0 1
39667: ARRAY
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39673: LD_VAR 0 9
39677: PUSH
39678: LD_EXP 60
39682: PUSH
39683: LD_VAR 0 1
39687: ARRAY
39688: IN
39689: NOT
39690: IFFALSE 39805
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
39692: LD_ADDR_EXP 60
39696: PUSH
39697: LD_EXP 60
39701: PPUSH
39702: LD_VAR 0 1
39706: PUSH
39707: LD_EXP 60
39711: PUSH
39712: LD_VAR 0 1
39716: ARRAY
39717: PUSH
39718: LD_INT 1
39720: PLUS
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PPUSH
39726: LD_VAR 0 9
39730: PPUSH
39731: CALL 54248 0 3
39735: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
39736: LD_ADDR_EXP 59
39740: PUSH
39741: LD_EXP 59
39745: PPUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: LD_EXP 59
39755: PUSH
39756: LD_VAR 0 1
39760: ARRAY
39761: PUSH
39762: LD_VAR 0 9
39766: DIFF
39767: PPUSH
39768: CALL_OW 1
39772: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
39773: LD_VAR 0 3
39777: PPUSH
39778: LD_EXP 60
39782: PUSH
39783: LD_VAR 0 1
39787: ARRAY
39788: PUSH
39789: LD_EXP 60
39793: PUSH
39794: LD_VAR 0 1
39798: ARRAY
39799: ARRAY
39800: PPUSH
39801: CALL_OW 120
// end ; exit ;
39805: GO 40126
// end ; if tmp > 1 then
39807: LD_VAR 0 8
39811: PUSH
39812: LD_INT 1
39814: GREATER
39815: IFFALSE 39919
// for i = 2 to tmp do
39817: LD_ADDR_VAR 0 6
39821: PUSH
39822: DOUBLE
39823: LD_INT 2
39825: DEC
39826: ST_TO_ADDR
39827: LD_VAR 0 8
39831: PUSH
39832: FOR_TO
39833: IFFALSE 39917
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
39835: LD_VAR 0 8
39839: PUSH
39840: LD_VAR 0 6
39844: ARRAY
39845: PPUSH
39846: CALL_OW 461
39850: PUSH
39851: LD_INT 6
39853: EQUAL
39854: IFFALSE 39915
// begin x := tmp [ i ] ;
39856: LD_ADDR_VAR 0 9
39860: PUSH
39861: LD_VAR 0 8
39865: PUSH
39866: LD_VAR 0 6
39870: ARRAY
39871: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
39872: LD_ADDR_VAR 0 8
39876: PUSH
39877: LD_VAR 0 8
39881: PPUSH
39882: LD_VAR 0 6
39886: PPUSH
39887: CALL_OW 3
39891: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
39892: LD_ADDR_VAR 0 8
39896: PUSH
39897: LD_VAR 0 8
39901: PPUSH
39902: LD_INT 1
39904: PPUSH
39905: LD_VAR 0 9
39909: PPUSH
39910: CALL_OW 2
39914: ST_TO_ADDR
// end ;
39915: GO 39832
39917: POP
39918: POP
// for i in tmp do
39919: LD_ADDR_VAR 0 6
39923: PUSH
39924: LD_VAR 0 8
39928: PUSH
39929: FOR_IN
39930: IFFALSE 39999
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
39932: LD_VAR 0 6
39936: PPUSH
39937: CALL_OW 313
39941: PUSH
39942: LD_INT 6
39944: LESS
39945: PUSH
39946: LD_VAR 0 6
39950: PPUSH
39951: CALL_OW 266
39955: PUSH
39956: LD_INT 31
39958: PUSH
39959: LD_INT 32
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: IN
39966: NOT
39967: AND
39968: PUSH
39969: LD_VAR 0 6
39973: PPUSH
39974: CALL_OW 313
39978: PUSH
39979: LD_INT 0
39981: EQUAL
39982: OR
39983: IFFALSE 39997
// begin j := i ;
39985: LD_ADDR_VAR 0 7
39989: PUSH
39990: LD_VAR 0 6
39994: ST_TO_ADDR
// break ;
39995: GO 39999
// end ; end ;
39997: GO 39929
39999: POP
40000: POP
// if j then
40001: LD_VAR 0 7
40005: IFFALSE 40023
// ComEnterUnit ( unit , j ) else
40007: LD_VAR 0 3
40011: PPUSH
40012: LD_VAR 0 7
40016: PPUSH
40017: CALL_OW 120
40021: GO 40126
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40023: LD_ADDR_VAR 0 10
40027: PUSH
40028: LD_VAR 0 2
40032: PPUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: PPUSH
40061: CALL_OW 72
40065: ST_TO_ADDR
// if depot then
40066: LD_VAR 0 10
40070: IFFALSE 40126
// begin depot := NearestUnitToUnit ( depot , unit ) ;
40072: LD_ADDR_VAR 0 10
40076: PUSH
40077: LD_VAR 0 10
40081: PPUSH
40082: LD_VAR 0 3
40086: PPUSH
40087: CALL_OW 74
40091: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
40092: LD_VAR 0 3
40096: PPUSH
40097: LD_VAR 0 10
40101: PPUSH
40102: CALL_OW 296
40106: PUSH
40107: LD_INT 10
40109: GREATER
40110: IFFALSE 40126
// ComStandNearbyBuilding ( unit , depot ) ;
40112: LD_VAR 0 3
40116: PPUSH
40117: LD_VAR 0 10
40121: PPUSH
40122: CALL 48540 0 2
// end ; end ; end ;
40126: LD_VAR 0 5
40130: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
40131: LD_INT 0
40133: PPUSH
40134: PPUSH
40135: PPUSH
40136: PPUSH
// if not mc_bases then
40137: LD_EXP 50
40141: NOT
40142: IFFALSE 40146
// exit ;
40144: GO 40385
// for i = 1 to mc_bases do
40146: LD_ADDR_VAR 0 2
40150: PUSH
40151: DOUBLE
40152: LD_INT 1
40154: DEC
40155: ST_TO_ADDR
40156: LD_EXP 50
40160: PUSH
40161: FOR_TO
40162: IFFALSE 40383
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
40164: LD_ADDR_VAR 0 4
40168: PUSH
40169: LD_EXP 50
40173: PUSH
40174: LD_VAR 0 2
40178: ARRAY
40179: PPUSH
40180: LD_INT 21
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PPUSH
40190: CALL_OW 72
40194: PUSH
40195: LD_EXP 79
40199: PUSH
40200: LD_VAR 0 2
40204: ARRAY
40205: UNION
40206: ST_TO_ADDR
// if not tmp then
40207: LD_VAR 0 4
40211: NOT
40212: IFFALSE 40216
// continue ;
40214: GO 40161
// for j in tmp do
40216: LD_ADDR_VAR 0 3
40220: PUSH
40221: LD_VAR 0 4
40225: PUSH
40226: FOR_IN
40227: IFFALSE 40379
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
40229: LD_VAR 0 3
40233: PPUSH
40234: CALL_OW 110
40238: NOT
40239: PUSH
40240: LD_VAR 0 3
40244: PPUSH
40245: CALL_OW 314
40249: NOT
40250: AND
40251: PUSH
40252: LD_VAR 0 3
40256: PPUSH
40257: CALL_OW 311
40261: NOT
40262: AND
40263: PUSH
40264: LD_VAR 0 3
40268: PPUSH
40269: CALL_OW 310
40273: NOT
40274: AND
40275: PUSH
40276: LD_VAR 0 3
40280: PUSH
40281: LD_EXP 53
40285: PUSH
40286: LD_VAR 0 2
40290: ARRAY
40291: PUSH
40292: LD_INT 1
40294: ARRAY
40295: IN
40296: NOT
40297: AND
40298: PUSH
40299: LD_VAR 0 3
40303: PUSH
40304: LD_EXP 53
40308: PUSH
40309: LD_VAR 0 2
40313: ARRAY
40314: PUSH
40315: LD_INT 2
40317: ARRAY
40318: IN
40319: NOT
40320: AND
40321: PUSH
40322: LD_VAR 0 3
40326: PUSH
40327: LD_EXP 62
40331: PUSH
40332: LD_VAR 0 2
40336: ARRAY
40337: IN
40338: NOT
40339: AND
40340: IFFALSE 40377
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
40342: LD_VAR 0 2
40346: PPUSH
40347: LD_EXP 50
40351: PUSH
40352: LD_VAR 0 2
40356: ARRAY
40357: PPUSH
40358: LD_VAR 0 3
40362: PPUSH
40363: LD_VAR 0 3
40367: PPUSH
40368: CALL_OW 257
40372: PPUSH
40373: CALL 39149 0 4
// end ;
40377: GO 40226
40379: POP
40380: POP
// end ;
40381: GO 40161
40383: POP
40384: POP
// end ;
40385: LD_VAR 0 1
40389: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
40390: LD_INT 0
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
// if not mc_bases [ base ] then
40398: LD_EXP 50
40402: PUSH
40403: LD_VAR 0 1
40407: ARRAY
40408: NOT
40409: IFFALSE 40413
// exit ;
40411: GO 40595
// tmp := [ ] ;
40413: LD_ADDR_VAR 0 6
40417: PUSH
40418: EMPTY
40419: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
40420: LD_ADDR_VAR 0 7
40424: PUSH
40425: LD_VAR 0 3
40429: PPUSH
40430: LD_INT 0
40432: PPUSH
40433: CALL_OW 517
40437: ST_TO_ADDR
// if not list then
40438: LD_VAR 0 7
40442: NOT
40443: IFFALSE 40447
// exit ;
40445: GO 40595
// for i = 1 to amount do
40447: LD_ADDR_VAR 0 5
40451: PUSH
40452: DOUBLE
40453: LD_INT 1
40455: DEC
40456: ST_TO_ADDR
40457: LD_VAR 0 2
40461: PUSH
40462: FOR_TO
40463: IFFALSE 40543
// begin x := rand ( 1 , list [ 1 ] ) ;
40465: LD_ADDR_VAR 0 8
40469: PUSH
40470: LD_INT 1
40472: PPUSH
40473: LD_VAR 0 7
40477: PUSH
40478: LD_INT 1
40480: ARRAY
40481: PPUSH
40482: CALL_OW 12
40486: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40487: LD_ADDR_VAR 0 6
40491: PUSH
40492: LD_VAR 0 6
40496: PPUSH
40497: LD_VAR 0 5
40501: PPUSH
40502: LD_VAR 0 7
40506: PUSH
40507: LD_INT 1
40509: ARRAY
40510: PUSH
40511: LD_VAR 0 8
40515: ARRAY
40516: PUSH
40517: LD_VAR 0 7
40521: PUSH
40522: LD_INT 2
40524: ARRAY
40525: PUSH
40526: LD_VAR 0 8
40530: ARRAY
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PPUSH
40536: CALL_OW 1
40540: ST_TO_ADDR
// end ;
40541: GO 40462
40543: POP
40544: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40545: LD_ADDR_EXP 63
40549: PUSH
40550: LD_EXP 63
40554: PPUSH
40555: LD_VAR 0 1
40559: PPUSH
40560: LD_VAR 0 6
40564: PPUSH
40565: CALL_OW 1
40569: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40570: LD_ADDR_EXP 65
40574: PUSH
40575: LD_EXP 65
40579: PPUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: LD_VAR 0 3
40589: PPUSH
40590: CALL_OW 1
40594: ST_TO_ADDR
// end ;
40595: LD_VAR 0 4
40599: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40600: LD_INT 0
40602: PPUSH
// if not mc_bases [ base ] then
40603: LD_EXP 50
40607: PUSH
40608: LD_VAR 0 1
40612: ARRAY
40613: NOT
40614: IFFALSE 40618
// exit ;
40616: GO 40643
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40618: LD_ADDR_EXP 55
40622: PUSH
40623: LD_EXP 55
40627: PPUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: LD_VAR 0 2
40637: PPUSH
40638: CALL_OW 1
40642: ST_TO_ADDR
// end ;
40643: LD_VAR 0 3
40647: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40648: LD_INT 0
40650: PPUSH
// if not mc_bases [ base ] then
40651: LD_EXP 50
40655: PUSH
40656: LD_VAR 0 1
40660: ARRAY
40661: NOT
40662: IFFALSE 40666
// exit ;
40664: GO 40703
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40666: LD_ADDR_EXP 55
40670: PUSH
40671: LD_EXP 55
40675: PPUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: LD_EXP 55
40685: PUSH
40686: LD_VAR 0 1
40690: ARRAY
40691: PUSH
40692: LD_VAR 0 2
40696: UNION
40697: PPUSH
40698: CALL_OW 1
40702: ST_TO_ADDR
// end ;
40703: LD_VAR 0 3
40707: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
40708: LD_INT 0
40710: PPUSH
// if not mc_bases [ base ] then
40711: LD_EXP 50
40715: PUSH
40716: LD_VAR 0 1
40720: ARRAY
40721: NOT
40722: IFFALSE 40726
// exit ;
40724: GO 40751
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
40726: LD_ADDR_EXP 71
40730: PUSH
40731: LD_EXP 71
40735: PPUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: LD_VAR 0 2
40745: PPUSH
40746: CALL_OW 1
40750: ST_TO_ADDR
// end ;
40751: LD_VAR 0 3
40755: RET
// export function MC_InsertProduceList ( base , components ) ; begin
40756: LD_INT 0
40758: PPUSH
// if not mc_bases [ base ] then
40759: LD_EXP 50
40763: PUSH
40764: LD_VAR 0 1
40768: ARRAY
40769: NOT
40770: IFFALSE 40774
// exit ;
40772: GO 40811
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
40774: LD_ADDR_EXP 71
40778: PUSH
40779: LD_EXP 71
40783: PPUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: LD_EXP 71
40793: PUSH
40794: LD_VAR 0 1
40798: ARRAY
40799: PUSH
40800: LD_VAR 0 2
40804: ADD
40805: PPUSH
40806: CALL_OW 1
40810: ST_TO_ADDR
// end ;
40811: LD_VAR 0 3
40815: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
40816: LD_INT 0
40818: PPUSH
// if not mc_bases [ base ] then
40819: LD_EXP 50
40823: PUSH
40824: LD_VAR 0 1
40828: ARRAY
40829: NOT
40830: IFFALSE 40834
// exit ;
40832: GO 40888
// mc_defender := Replace ( mc_defender , base , deflist ) ;
40834: LD_ADDR_EXP 72
40838: PUSH
40839: LD_EXP 72
40843: PPUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: LD_VAR 0 2
40853: PPUSH
40854: CALL_OW 1
40858: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
40859: LD_ADDR_EXP 61
40863: PUSH
40864: LD_EXP 61
40868: PPUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: LD_VAR 0 2
40878: PUSH
40879: LD_INT 0
40881: PLUS
40882: PPUSH
40883: CALL_OW 1
40887: ST_TO_ADDR
// end ;
40888: LD_VAR 0 3
40892: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
40893: LD_INT 0
40895: PPUSH
// if not mc_bases [ base ] then
40896: LD_EXP 50
40900: PUSH
40901: LD_VAR 0 1
40905: ARRAY
40906: NOT
40907: IFFALSE 40911
// exit ;
40909: GO 40936
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
40911: LD_ADDR_EXP 61
40915: PUSH
40916: LD_EXP 61
40920: PPUSH
40921: LD_VAR 0 1
40925: PPUSH
40926: LD_VAR 0 2
40930: PPUSH
40931: CALL_OW 1
40935: ST_TO_ADDR
// end ;
40936: LD_VAR 0 3
40940: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
40941: LD_INT 0
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
// if not mc_bases [ base ] then
40947: LD_EXP 50
40951: PUSH
40952: LD_VAR 0 1
40956: ARRAY
40957: NOT
40958: IFFALSE 40962
// exit ;
40960: GO 41027
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
40962: LD_ADDR_EXP 70
40966: PUSH
40967: LD_EXP 70
40971: PPUSH
40972: LD_VAR 0 1
40976: PUSH
40977: LD_EXP 70
40981: PUSH
40982: LD_VAR 0 1
40986: ARRAY
40987: PUSH
40988: LD_INT 1
40990: PLUS
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PPUSH
40996: LD_VAR 0 1
41000: PUSH
41001: LD_VAR 0 2
41005: PUSH
41006: LD_VAR 0 3
41010: PUSH
41011: LD_VAR 0 4
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: PPUSH
41022: CALL 54248 0 3
41026: ST_TO_ADDR
// end ;
41027: LD_VAR 0 5
41031: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
41032: LD_INT 0
41034: PPUSH
// if not mc_bases [ base ] then
41035: LD_EXP 50
41039: PUSH
41040: LD_VAR 0 1
41044: ARRAY
41045: NOT
41046: IFFALSE 41050
// exit ;
41048: GO 41075
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
41050: LD_ADDR_EXP 87
41054: PUSH
41055: LD_EXP 87
41059: PPUSH
41060: LD_VAR 0 1
41064: PPUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: CALL_OW 1
41074: ST_TO_ADDR
// end ;
41075: LD_VAR 0 3
41079: RET
// export function MC_GetMinesField ( base ) ; begin
41080: LD_INT 0
41082: PPUSH
// result := mc_mines [ base ] ;
41083: LD_ADDR_VAR 0 2
41087: PUSH
41088: LD_EXP 63
41092: PUSH
41093: LD_VAR 0 1
41097: ARRAY
41098: ST_TO_ADDR
// end ;
41099: LD_VAR 0 2
41103: RET
// export function MC_GetProduceList ( base ) ; begin
41104: LD_INT 0
41106: PPUSH
// result := mc_produce [ base ] ;
41107: LD_ADDR_VAR 0 2
41111: PUSH
41112: LD_EXP 71
41116: PUSH
41117: LD_VAR 0 1
41121: ARRAY
41122: ST_TO_ADDR
// end ;
41123: LD_VAR 0 2
41127: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
41128: LD_INT 0
41130: PPUSH
41131: PPUSH
// if not mc_bases then
41132: LD_EXP 50
41136: NOT
41137: IFFALSE 41141
// exit ;
41139: GO 41206
// if mc_bases [ base ] then
41141: LD_EXP 50
41145: PUSH
41146: LD_VAR 0 1
41150: ARRAY
41151: IFFALSE 41206
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41153: LD_ADDR_VAR 0 3
41157: PUSH
41158: LD_EXP 50
41162: PUSH
41163: LD_VAR 0 1
41167: ARRAY
41168: PPUSH
41169: LD_INT 30
41171: PUSH
41172: LD_VAR 0 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PPUSH
41181: CALL_OW 72
41185: ST_TO_ADDR
// if result then
41186: LD_VAR 0 3
41190: IFFALSE 41206
// result := result [ 1 ] ;
41192: LD_ADDR_VAR 0 3
41196: PUSH
41197: LD_VAR 0 3
41201: PUSH
41202: LD_INT 1
41204: ARRAY
41205: ST_TO_ADDR
// end ; end ;
41206: LD_VAR 0 3
41210: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
41211: LD_INT 0
41213: PPUSH
41214: PPUSH
// if not mc_bases then
41215: LD_EXP 50
41219: NOT
41220: IFFALSE 41224
// exit ;
41222: GO 41269
// if mc_bases [ base ] then
41224: LD_EXP 50
41228: PUSH
41229: LD_VAR 0 1
41233: ARRAY
41234: IFFALSE 41269
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41236: LD_ADDR_VAR 0 3
41240: PUSH
41241: LD_EXP 50
41245: PUSH
41246: LD_VAR 0 1
41250: ARRAY
41251: PPUSH
41252: LD_INT 30
41254: PUSH
41255: LD_VAR 0 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PPUSH
41264: CALL_OW 72
41268: ST_TO_ADDR
// end ;
41269: LD_VAR 0 3
41273: RET
// export function MC_SetTame ( base , area ) ; begin
41274: LD_INT 0
41276: PPUSH
// if not mc_bases or not base then
41277: LD_EXP 50
41281: NOT
41282: PUSH
41283: LD_VAR 0 1
41287: NOT
41288: OR
41289: IFFALSE 41293
// exit ;
41291: GO 41318
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
41293: LD_ADDR_EXP 78
41297: PUSH
41298: LD_EXP 78
41302: PPUSH
41303: LD_VAR 0 1
41307: PPUSH
41308: LD_VAR 0 2
41312: PPUSH
41313: CALL_OW 1
41317: ST_TO_ADDR
// end ;
41318: LD_VAR 0 3
41322: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
41323: LD_INT 0
41325: PPUSH
41326: PPUSH
// if not mc_bases or not base then
41327: LD_EXP 50
41331: NOT
41332: PUSH
41333: LD_VAR 0 1
41337: NOT
41338: OR
41339: IFFALSE 41343
// exit ;
41341: GO 41445
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41343: LD_ADDR_VAR 0 4
41347: PUSH
41348: LD_EXP 50
41352: PUSH
41353: LD_VAR 0 1
41357: ARRAY
41358: PPUSH
41359: LD_INT 30
41361: PUSH
41362: LD_VAR 0 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PPUSH
41371: CALL_OW 72
41375: ST_TO_ADDR
// if not tmp then
41376: LD_VAR 0 4
41380: NOT
41381: IFFALSE 41385
// exit ;
41383: GO 41445
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
41385: LD_ADDR_EXP 82
41389: PUSH
41390: LD_EXP 82
41394: PPUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: LD_EXP 82
41404: PUSH
41405: LD_VAR 0 1
41409: ARRAY
41410: PPUSH
41411: LD_EXP 82
41415: PUSH
41416: LD_VAR 0 1
41420: ARRAY
41421: PUSH
41422: LD_INT 1
41424: PLUS
41425: PPUSH
41426: LD_VAR 0 4
41430: PUSH
41431: LD_INT 1
41433: ARRAY
41434: PPUSH
41435: CALL_OW 2
41439: PPUSH
41440: CALL_OW 1
41444: ST_TO_ADDR
// end ;
41445: LD_VAR 0 3
41449: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
41450: LD_INT 0
41452: PPUSH
41453: PPUSH
// if not mc_bases or not base or not kinds then
41454: LD_EXP 50
41458: NOT
41459: PUSH
41460: LD_VAR 0 1
41464: NOT
41465: OR
41466: PUSH
41467: LD_VAR 0 2
41471: NOT
41472: OR
41473: IFFALSE 41477
// exit ;
41475: GO 41538
// for i in kinds do
41477: LD_ADDR_VAR 0 4
41481: PUSH
41482: LD_VAR 0 2
41486: PUSH
41487: FOR_IN
41488: IFFALSE 41536
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41490: LD_ADDR_EXP 84
41494: PUSH
41495: LD_EXP 84
41499: PPUSH
41500: LD_VAR 0 1
41504: PUSH
41505: LD_EXP 84
41509: PUSH
41510: LD_VAR 0 1
41514: ARRAY
41515: PUSH
41516: LD_INT 1
41518: PLUS
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PPUSH
41524: LD_VAR 0 4
41528: PPUSH
41529: CALL 54248 0 3
41533: ST_TO_ADDR
41534: GO 41487
41536: POP
41537: POP
// end ;
41538: LD_VAR 0 3
41542: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41543: LD_INT 0
41545: PPUSH
// if not mc_bases or not base or not areas then
41546: LD_EXP 50
41550: NOT
41551: PUSH
41552: LD_VAR 0 1
41556: NOT
41557: OR
41558: PUSH
41559: LD_VAR 0 2
41563: NOT
41564: OR
41565: IFFALSE 41569
// exit ;
41567: GO 41594
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41569: LD_ADDR_EXP 68
41573: PUSH
41574: LD_EXP 68
41578: PPUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: LD_VAR 0 2
41588: PPUSH
41589: CALL_OW 1
41593: ST_TO_ADDR
// end ;
41594: LD_VAR 0 3
41598: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41599: LD_INT 0
41601: PPUSH
// if not mc_bases or not base or not teleports_exit then
41602: LD_EXP 50
41606: NOT
41607: PUSH
41608: LD_VAR 0 1
41612: NOT
41613: OR
41614: PUSH
41615: LD_VAR 0 2
41619: NOT
41620: OR
41621: IFFALSE 41625
// exit ;
41623: GO 41650
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41625: LD_ADDR_EXP 85
41629: PUSH
41630: LD_EXP 85
41634: PPUSH
41635: LD_VAR 0 1
41639: PPUSH
41640: LD_VAR 0 2
41644: PPUSH
41645: CALL_OW 1
41649: ST_TO_ADDR
// end ;
41650: LD_VAR 0 3
41654: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41655: LD_INT 0
41657: PPUSH
41658: PPUSH
41659: PPUSH
// if not mc_bases or not base or not ext_list then
41660: LD_EXP 50
41664: NOT
41665: PUSH
41666: LD_VAR 0 1
41670: NOT
41671: OR
41672: PUSH
41673: LD_VAR 0 5
41677: NOT
41678: OR
41679: IFFALSE 41683
// exit ;
41681: GO 41856
// tmp := GetFacExtXYD ( x , y , d ) ;
41683: LD_ADDR_VAR 0 8
41687: PUSH
41688: LD_VAR 0 2
41692: PPUSH
41693: LD_VAR 0 3
41697: PPUSH
41698: LD_VAR 0 4
41702: PPUSH
41703: CALL 87626 0 3
41707: ST_TO_ADDR
// if not tmp then
41708: LD_VAR 0 8
41712: NOT
41713: IFFALSE 41717
// exit ;
41715: GO 41856
// for i in tmp do
41717: LD_ADDR_VAR 0 7
41721: PUSH
41722: LD_VAR 0 8
41726: PUSH
41727: FOR_IN
41728: IFFALSE 41854
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
41730: LD_ADDR_EXP 55
41734: PUSH
41735: LD_EXP 55
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: LD_EXP 55
41749: PUSH
41750: LD_VAR 0 1
41754: ARRAY
41755: PPUSH
41756: LD_EXP 55
41760: PUSH
41761: LD_VAR 0 1
41765: ARRAY
41766: PUSH
41767: LD_INT 1
41769: PLUS
41770: PPUSH
41771: LD_VAR 0 5
41775: PUSH
41776: LD_INT 1
41778: ARRAY
41779: PUSH
41780: LD_VAR 0 7
41784: PUSH
41785: LD_INT 1
41787: ARRAY
41788: PUSH
41789: LD_VAR 0 7
41793: PUSH
41794: LD_INT 2
41796: ARRAY
41797: PUSH
41798: LD_VAR 0 7
41802: PUSH
41803: LD_INT 3
41805: ARRAY
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: PPUSH
41813: CALL_OW 2
41817: PPUSH
41818: CALL_OW 1
41822: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
41823: LD_ADDR_VAR 0 5
41827: PUSH
41828: LD_VAR 0 5
41832: PPUSH
41833: LD_INT 1
41835: PPUSH
41836: CALL_OW 3
41840: ST_TO_ADDR
// if not ext_list then
41841: LD_VAR 0 5
41845: NOT
41846: IFFALSE 41852
// exit ;
41848: POP
41849: POP
41850: GO 41856
// end ;
41852: GO 41727
41854: POP
41855: POP
// end ;
41856: LD_VAR 0 6
41860: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
41861: LD_INT 0
41863: PPUSH
// if not mc_bases or not base or not weapon_list then
41864: LD_EXP 50
41868: NOT
41869: PUSH
41870: LD_VAR 0 1
41874: NOT
41875: OR
41876: PUSH
41877: LD_VAR 0 2
41881: NOT
41882: OR
41883: IFFALSE 41887
// exit ;
41885: GO 41912
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
41887: LD_ADDR_EXP 89
41891: PUSH
41892: LD_EXP 89
41896: PPUSH
41897: LD_VAR 0 1
41901: PPUSH
41902: LD_VAR 0 2
41906: PPUSH
41907: CALL_OW 1
41911: ST_TO_ADDR
// end ;
41912: LD_VAR 0 3
41916: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
41917: LD_INT 0
41919: PPUSH
// if not mc_bases or not base or not tech_list then
41920: LD_EXP 50
41924: NOT
41925: PUSH
41926: LD_VAR 0 1
41930: NOT
41931: OR
41932: PUSH
41933: LD_VAR 0 2
41937: NOT
41938: OR
41939: IFFALSE 41943
// exit ;
41941: GO 41968
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
41943: LD_ADDR_EXP 77
41947: PUSH
41948: LD_EXP 77
41952: PPUSH
41953: LD_VAR 0 1
41957: PPUSH
41958: LD_VAR 0 2
41962: PPUSH
41963: CALL_OW 1
41967: ST_TO_ADDR
// end ;
41968: LD_VAR 0 3
41972: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
41973: LD_INT 0
41975: PPUSH
// if not mc_bases or not parking_area or not base then
41976: LD_EXP 50
41980: NOT
41981: PUSH
41982: LD_VAR 0 2
41986: NOT
41987: OR
41988: PUSH
41989: LD_VAR 0 1
41993: NOT
41994: OR
41995: IFFALSE 41999
// exit ;
41997: GO 42024
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
41999: LD_ADDR_EXP 74
42003: PUSH
42004: LD_EXP 74
42008: PPUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: LD_VAR 0 2
42018: PPUSH
42019: CALL_OW 1
42023: ST_TO_ADDR
// end ;
42024: LD_VAR 0 3
42028: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
42029: LD_INT 0
42031: PPUSH
// if not mc_bases or not base or not scan_area then
42032: LD_EXP 50
42036: NOT
42037: PUSH
42038: LD_VAR 0 1
42042: NOT
42043: OR
42044: PUSH
42045: LD_VAR 0 2
42049: NOT
42050: OR
42051: IFFALSE 42055
// exit ;
42053: GO 42080
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
42055: LD_ADDR_EXP 75
42059: PUSH
42060: LD_EXP 75
42064: PPUSH
42065: LD_VAR 0 1
42069: PPUSH
42070: LD_VAR 0 2
42074: PPUSH
42075: CALL_OW 1
42079: ST_TO_ADDR
// end ;
42080: LD_VAR 0 3
42084: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
// if not mc_bases or not base then
42089: LD_EXP 50
42093: NOT
42094: PUSH
42095: LD_VAR 0 1
42099: NOT
42100: OR
42101: IFFALSE 42105
// exit ;
42103: GO 42169
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
42105: LD_ADDR_VAR 0 3
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: LD_INT 3
42118: PUSH
42119: LD_INT 4
42121: PUSH
42122: LD_INT 11
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
42132: LD_ADDR_EXP 77
42136: PUSH
42137: LD_EXP 77
42141: PPUSH
42142: LD_VAR 0 1
42146: PPUSH
42147: LD_EXP 77
42151: PUSH
42152: LD_VAR 0 1
42156: ARRAY
42157: PUSH
42158: LD_VAR 0 3
42162: DIFF
42163: PPUSH
42164: CALL_OW 1
42168: ST_TO_ADDR
// end ;
42169: LD_VAR 0 2
42173: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
42174: LD_INT 0
42176: PPUSH
// result := mc_vehicles [ base ] ;
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_EXP 69
42186: PUSH
42187: LD_VAR 0 1
42191: ARRAY
42192: ST_TO_ADDR
// if onlyCombat then
42193: LD_VAR 0 2
42197: IFFALSE 42362
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
42199: LD_ADDR_VAR 0 3
42203: PUSH
42204: LD_VAR 0 3
42208: PUSH
42209: LD_VAR 0 3
42213: PPUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 34
42219: PUSH
42220: LD_INT 12
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 34
42229: PUSH
42230: LD_INT 51
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 34
42239: PUSH
42240: LD_EXP 94
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 34
42251: PUSH
42252: LD_INT 32
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 34
42261: PUSH
42262: LD_INT 13
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 34
42271: PUSH
42272: LD_INT 52
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 34
42281: PUSH
42282: LD_INT 14
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 34
42291: PUSH
42292: LD_INT 53
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 34
42301: PUSH
42302: LD_EXP 93
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 34
42313: PUSH
42314: LD_INT 31
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 34
42323: PUSH
42324: LD_INT 48
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 34
42333: PUSH
42334: LD_INT 8
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: PPUSH
42356: CALL_OW 72
42360: DIFF
42361: ST_TO_ADDR
// end ; end_of_file
42362: LD_VAR 0 3
42366: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
42367: LD_INT 0
42369: PPUSH
42370: PPUSH
42371: PPUSH
// if not mc_bases or not skirmish then
42372: LD_EXP 50
42376: NOT
42377: PUSH
42378: LD_EXP 48
42382: NOT
42383: OR
42384: IFFALSE 42388
// exit ;
42386: GO 42553
// for i = 1 to mc_bases do
42388: LD_ADDR_VAR 0 4
42392: PUSH
42393: DOUBLE
42394: LD_INT 1
42396: DEC
42397: ST_TO_ADDR
42398: LD_EXP 50
42402: PUSH
42403: FOR_TO
42404: IFFALSE 42551
// begin if sci in mc_bases [ i ] then
42406: LD_VAR 0 2
42410: PUSH
42411: LD_EXP 50
42415: PUSH
42416: LD_VAR 0 4
42420: ARRAY
42421: IN
42422: IFFALSE 42549
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
42424: LD_ADDR_EXP 79
42428: PUSH
42429: LD_EXP 79
42433: PPUSH
42434: LD_VAR 0 4
42438: PUSH
42439: LD_EXP 79
42443: PUSH
42444: LD_VAR 0 4
42448: ARRAY
42449: PUSH
42450: LD_INT 1
42452: PLUS
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PPUSH
42458: LD_VAR 0 1
42462: PPUSH
42463: CALL 54248 0 3
42467: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
42468: LD_ADDR_VAR 0 5
42472: PUSH
42473: LD_EXP 50
42477: PUSH
42478: LD_VAR 0 4
42482: ARRAY
42483: PPUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 30
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 30
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: PPUSH
42512: CALL_OW 72
42516: PPUSH
42517: LD_VAR 0 1
42521: PPUSH
42522: CALL_OW 74
42526: ST_TO_ADDR
// if tmp then
42527: LD_VAR 0 5
42531: IFFALSE 42547
// ComStandNearbyBuilding ( ape , tmp ) ;
42533: LD_VAR 0 1
42537: PPUSH
42538: LD_VAR 0 5
42542: PPUSH
42543: CALL 48540 0 2
// break ;
42547: GO 42551
// end ; end ;
42549: GO 42403
42551: POP
42552: POP
// end ;
42553: LD_VAR 0 3
42557: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42558: LD_INT 0
42560: PPUSH
42561: PPUSH
42562: PPUSH
// if not mc_bases or not skirmish then
42563: LD_EXP 50
42567: NOT
42568: PUSH
42569: LD_EXP 48
42573: NOT
42574: OR
42575: IFFALSE 42579
// exit ;
42577: GO 42668
// for i = 1 to mc_bases do
42579: LD_ADDR_VAR 0 4
42583: PUSH
42584: DOUBLE
42585: LD_INT 1
42587: DEC
42588: ST_TO_ADDR
42589: LD_EXP 50
42593: PUSH
42594: FOR_TO
42595: IFFALSE 42666
// begin if building in mc_busy_turret_list [ i ] then
42597: LD_VAR 0 1
42601: PUSH
42602: LD_EXP 60
42606: PUSH
42607: LD_VAR 0 4
42611: ARRAY
42612: IN
42613: IFFALSE 42664
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42615: LD_ADDR_VAR 0 5
42619: PUSH
42620: LD_EXP 60
42624: PUSH
42625: LD_VAR 0 4
42629: ARRAY
42630: PUSH
42631: LD_VAR 0 1
42635: DIFF
42636: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42637: LD_ADDR_EXP 60
42641: PUSH
42642: LD_EXP 60
42646: PPUSH
42647: LD_VAR 0 4
42651: PPUSH
42652: LD_VAR 0 5
42656: PPUSH
42657: CALL_OW 1
42661: ST_TO_ADDR
// break ;
42662: GO 42666
// end ; end ;
42664: GO 42594
42666: POP
42667: POP
// end ;
42668: LD_VAR 0 3
42672: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42673: LD_INT 0
42675: PPUSH
42676: PPUSH
42677: PPUSH
// if not mc_bases or not skirmish then
42678: LD_EXP 50
42682: NOT
42683: PUSH
42684: LD_EXP 48
42688: NOT
42689: OR
42690: IFFALSE 42694
// exit ;
42692: GO 42893
// for i = 1 to mc_bases do
42694: LD_ADDR_VAR 0 5
42698: PUSH
42699: DOUBLE
42700: LD_INT 1
42702: DEC
42703: ST_TO_ADDR
42704: LD_EXP 50
42708: PUSH
42709: FOR_TO
42710: IFFALSE 42891
// if building in mc_bases [ i ] then
42712: LD_VAR 0 1
42716: PUSH
42717: LD_EXP 50
42721: PUSH
42722: LD_VAR 0 5
42726: ARRAY
42727: IN
42728: IFFALSE 42889
// begin tmp := mc_bases [ i ] diff building ;
42730: LD_ADDR_VAR 0 6
42734: PUSH
42735: LD_EXP 50
42739: PUSH
42740: LD_VAR 0 5
42744: ARRAY
42745: PUSH
42746: LD_VAR 0 1
42750: DIFF
42751: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
42752: LD_ADDR_EXP 50
42756: PUSH
42757: LD_EXP 50
42761: PPUSH
42762: LD_VAR 0 5
42766: PPUSH
42767: LD_VAR 0 6
42771: PPUSH
42772: CALL_OW 1
42776: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
42777: LD_VAR 0 1
42781: PUSH
42782: LD_EXP 58
42786: PUSH
42787: LD_VAR 0 5
42791: ARRAY
42792: IN
42793: IFFALSE 42832
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
42795: LD_ADDR_EXP 58
42799: PUSH
42800: LD_EXP 58
42804: PPUSH
42805: LD_VAR 0 5
42809: PPUSH
42810: LD_EXP 58
42814: PUSH
42815: LD_VAR 0 5
42819: ARRAY
42820: PUSH
42821: LD_VAR 0 1
42825: DIFF
42826: PPUSH
42827: CALL_OW 1
42831: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
42832: LD_VAR 0 1
42836: PUSH
42837: LD_EXP 59
42841: PUSH
42842: LD_VAR 0 5
42846: ARRAY
42847: IN
42848: IFFALSE 42887
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
42850: LD_ADDR_EXP 59
42854: PUSH
42855: LD_EXP 59
42859: PPUSH
42860: LD_VAR 0 5
42864: PPUSH
42865: LD_EXP 59
42869: PUSH
42870: LD_VAR 0 5
42874: ARRAY
42875: PUSH
42876: LD_VAR 0 1
42880: DIFF
42881: PPUSH
42882: CALL_OW 1
42886: ST_TO_ADDR
// break ;
42887: GO 42891
// end ;
42889: GO 42709
42891: POP
42892: POP
// end ;
42893: LD_VAR 0 4
42897: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
42902: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
42903: LD_EXP 50
42907: NOT
42908: PUSH
42909: LD_EXP 48
42913: NOT
42914: OR
42915: PUSH
42916: LD_VAR 0 3
42920: PUSH
42921: LD_EXP 76
42925: IN
42926: NOT
42927: OR
42928: IFFALSE 42932
// exit ;
42930: GO 43055
// for i = 1 to mc_vehicles do
42932: LD_ADDR_VAR 0 6
42936: PUSH
42937: DOUBLE
42938: LD_INT 1
42940: DEC
42941: ST_TO_ADDR
42942: LD_EXP 69
42946: PUSH
42947: FOR_TO
42948: IFFALSE 43053
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
42950: LD_VAR 0 2
42954: PUSH
42955: LD_EXP 69
42959: PUSH
42960: LD_VAR 0 6
42964: ARRAY
42965: IN
42966: PUSH
42967: LD_VAR 0 1
42971: PUSH
42972: LD_EXP 69
42976: PUSH
42977: LD_VAR 0 6
42981: ARRAY
42982: IN
42983: OR
42984: IFFALSE 43051
// begin tmp := mc_vehicles [ i ] diff old ;
42986: LD_ADDR_VAR 0 7
42990: PUSH
42991: LD_EXP 69
42995: PUSH
42996: LD_VAR 0 6
43000: ARRAY
43001: PUSH
43002: LD_VAR 0 2
43006: DIFF
43007: ST_TO_ADDR
// tmp := tmp diff new ;
43008: LD_ADDR_VAR 0 7
43012: PUSH
43013: LD_VAR 0 7
43017: PUSH
43018: LD_VAR 0 1
43022: DIFF
43023: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
43024: LD_ADDR_EXP 69
43028: PUSH
43029: LD_EXP 69
43033: PPUSH
43034: LD_VAR 0 6
43038: PPUSH
43039: LD_VAR 0 7
43043: PPUSH
43044: CALL_OW 1
43048: ST_TO_ADDR
// break ;
43049: GO 43053
// end ;
43051: GO 42947
43053: POP
43054: POP
// end ;
43055: LD_VAR 0 5
43059: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
43060: LD_INT 0
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
// if not mc_bases or not skirmish then
43066: LD_EXP 50
43070: NOT
43071: PUSH
43072: LD_EXP 48
43076: NOT
43077: OR
43078: IFFALSE 43082
// exit ;
43080: GO 43459
// side := GetSide ( vehicle ) ;
43082: LD_ADDR_VAR 0 5
43086: PUSH
43087: LD_VAR 0 1
43091: PPUSH
43092: CALL_OW 255
43096: ST_TO_ADDR
// for i = 1 to mc_bases do
43097: LD_ADDR_VAR 0 4
43101: PUSH
43102: DOUBLE
43103: LD_INT 1
43105: DEC
43106: ST_TO_ADDR
43107: LD_EXP 50
43111: PUSH
43112: FOR_TO
43113: IFFALSE 43457
// begin if factory in mc_bases [ i ] then
43115: LD_VAR 0 2
43119: PUSH
43120: LD_EXP 50
43124: PUSH
43125: LD_VAR 0 4
43129: ARRAY
43130: IN
43131: IFFALSE 43455
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
43133: LD_EXP 72
43137: PUSH
43138: LD_VAR 0 4
43142: ARRAY
43143: PUSH
43144: LD_EXP 61
43148: PUSH
43149: LD_VAR 0 4
43153: ARRAY
43154: LESS
43155: PUSH
43156: LD_VAR 0 1
43160: PPUSH
43161: CALL_OW 264
43165: PUSH
43166: LD_INT 31
43168: PUSH
43169: LD_INT 32
43171: PUSH
43172: LD_INT 51
43174: PUSH
43175: LD_EXP 94
43179: PUSH
43180: LD_INT 12
43182: PUSH
43183: LD_INT 30
43185: PUSH
43186: LD_EXP 93
43190: PUSH
43191: LD_INT 11
43193: PUSH
43194: LD_INT 53
43196: PUSH
43197: LD_INT 14
43199: PUSH
43200: LD_EXP 97
43204: PUSH
43205: LD_INT 29
43207: PUSH
43208: LD_EXP 95
43212: PUSH
43213: LD_INT 13
43215: PUSH
43216: LD_INT 52
43218: PUSH
43219: LD_INT 48
43221: PUSH
43222: LD_INT 8
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: IN
43244: NOT
43245: AND
43246: IFFALSE 43294
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
43248: LD_ADDR_EXP 72
43252: PUSH
43253: LD_EXP 72
43257: PPUSH
43258: LD_VAR 0 4
43262: PUSH
43263: LD_EXP 72
43267: PUSH
43268: LD_VAR 0 4
43272: ARRAY
43273: PUSH
43274: LD_INT 1
43276: PLUS
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PPUSH
43282: LD_VAR 0 1
43286: PPUSH
43287: CALL 54248 0 3
43291: ST_TO_ADDR
43292: GO 43338
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
43294: LD_ADDR_EXP 69
43298: PUSH
43299: LD_EXP 69
43303: PPUSH
43304: LD_VAR 0 4
43308: PUSH
43309: LD_EXP 69
43313: PUSH
43314: LD_VAR 0 4
43318: ARRAY
43319: PUSH
43320: LD_INT 1
43322: PLUS
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PPUSH
43328: LD_VAR 0 1
43332: PPUSH
43333: CALL 54248 0 3
43337: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
43338: LD_VAR 0 1
43342: PPUSH
43343: CALL_OW 263
43347: PUSH
43348: LD_INT 2
43350: EQUAL
43351: IFFALSE 43371
// begin repeat wait ( 0 0$1 ) ;
43353: LD_INT 35
43355: PPUSH
43356: CALL_OW 67
// until IsControledBy ( vehicle ) ;
43360: LD_VAR 0 1
43364: PPUSH
43365: CALL_OW 312
43369: IFFALSE 43353
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
43371: LD_VAR 0 1
43375: PPUSH
43376: LD_EXP 74
43380: PUSH
43381: LD_VAR 0 4
43385: ARRAY
43386: PPUSH
43387: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
43391: LD_VAR 0 1
43395: PPUSH
43396: CALL_OW 263
43400: PUSH
43401: LD_INT 1
43403: NONEQUAL
43404: IFFALSE 43408
// break ;
43406: GO 43457
// repeat wait ( 0 0$1 ) ;
43408: LD_INT 35
43410: PPUSH
43411: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
43415: LD_VAR 0 1
43419: PPUSH
43420: LD_EXP 74
43424: PUSH
43425: LD_VAR 0 4
43429: ARRAY
43430: PPUSH
43431: CALL_OW 308
43435: IFFALSE 43408
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
43437: LD_VAR 0 1
43441: PPUSH
43442: CALL_OW 311
43446: PPUSH
43447: CALL_OW 121
// exit ;
43451: POP
43452: POP
43453: GO 43459
// end ; end ;
43455: GO 43112
43457: POP
43458: POP
// end ;
43459: LD_VAR 0 3
43463: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
43464: LD_INT 0
43466: PPUSH
43467: PPUSH
43468: PPUSH
43469: PPUSH
// if not mc_bases or not skirmish then
43470: LD_EXP 50
43474: NOT
43475: PUSH
43476: LD_EXP 48
43480: NOT
43481: OR
43482: IFFALSE 43486
// exit ;
43484: GO 43839
// repeat wait ( 0 0$1 ) ;
43486: LD_INT 35
43488: PPUSH
43489: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
43493: LD_VAR 0 2
43497: PPUSH
43498: LD_VAR 0 3
43502: PPUSH
43503: CALL_OW 284
43507: IFFALSE 43486
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43509: LD_VAR 0 2
43513: PPUSH
43514: LD_VAR 0 3
43518: PPUSH
43519: CALL_OW 283
43523: PUSH
43524: LD_INT 4
43526: EQUAL
43527: IFFALSE 43531
// exit ;
43529: GO 43839
// for i = 1 to mc_bases do
43531: LD_ADDR_VAR 0 7
43535: PUSH
43536: DOUBLE
43537: LD_INT 1
43539: DEC
43540: ST_TO_ADDR
43541: LD_EXP 50
43545: PUSH
43546: FOR_TO
43547: IFFALSE 43837
// begin if mc_crates_area [ i ] then
43549: LD_EXP 68
43553: PUSH
43554: LD_VAR 0 7
43558: ARRAY
43559: IFFALSE 43670
// for j in mc_crates_area [ i ] do
43561: LD_ADDR_VAR 0 8
43565: PUSH
43566: LD_EXP 68
43570: PUSH
43571: LD_VAR 0 7
43575: ARRAY
43576: PUSH
43577: FOR_IN
43578: IFFALSE 43668
// if InArea ( x , y , j ) then
43580: LD_VAR 0 2
43584: PPUSH
43585: LD_VAR 0 3
43589: PPUSH
43590: LD_VAR 0 8
43594: PPUSH
43595: CALL_OW 309
43599: IFFALSE 43666
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43601: LD_ADDR_EXP 66
43605: PUSH
43606: LD_EXP 66
43610: PPUSH
43611: LD_VAR 0 7
43615: PUSH
43616: LD_EXP 66
43620: PUSH
43621: LD_VAR 0 7
43625: ARRAY
43626: PUSH
43627: LD_INT 1
43629: PLUS
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PPUSH
43635: LD_VAR 0 4
43639: PUSH
43640: LD_VAR 0 2
43644: PUSH
43645: LD_VAR 0 3
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: PPUSH
43655: CALL 54248 0 3
43659: ST_TO_ADDR
// exit ;
43660: POP
43661: POP
43662: POP
43663: POP
43664: GO 43839
// end ;
43666: GO 43577
43668: POP
43669: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43670: LD_ADDR_VAR 0 9
43674: PUSH
43675: LD_EXP 50
43679: PUSH
43680: LD_VAR 0 7
43684: ARRAY
43685: PPUSH
43686: LD_INT 2
43688: PUSH
43689: LD_INT 30
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 30
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: LIST
43713: PPUSH
43714: CALL_OW 72
43718: ST_TO_ADDR
// if not depot then
43719: LD_VAR 0 9
43723: NOT
43724: IFFALSE 43728
// continue ;
43726: GO 43546
// for j in depot do
43728: LD_ADDR_VAR 0 8
43732: PUSH
43733: LD_VAR 0 9
43737: PUSH
43738: FOR_IN
43739: IFFALSE 43833
// if GetDistUnitXY ( j , x , y ) < 30 then
43741: LD_VAR 0 8
43745: PPUSH
43746: LD_VAR 0 2
43750: PPUSH
43751: LD_VAR 0 3
43755: PPUSH
43756: CALL_OW 297
43760: PUSH
43761: LD_INT 30
43763: LESS
43764: IFFALSE 43831
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43766: LD_ADDR_EXP 66
43770: PUSH
43771: LD_EXP 66
43775: PPUSH
43776: LD_VAR 0 7
43780: PUSH
43781: LD_EXP 66
43785: PUSH
43786: LD_VAR 0 7
43790: ARRAY
43791: PUSH
43792: LD_INT 1
43794: PLUS
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PPUSH
43800: LD_VAR 0 4
43804: PUSH
43805: LD_VAR 0 2
43809: PUSH
43810: LD_VAR 0 3
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: PPUSH
43820: CALL 54248 0 3
43824: ST_TO_ADDR
// exit ;
43825: POP
43826: POP
43827: POP
43828: POP
43829: GO 43839
// end ;
43831: GO 43738
43833: POP
43834: POP
// end ;
43835: GO 43546
43837: POP
43838: POP
// end ;
43839: LD_VAR 0 6
43843: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
43844: LD_INT 0
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
// if not mc_bases or not skirmish then
43850: LD_EXP 50
43854: NOT
43855: PUSH
43856: LD_EXP 48
43860: NOT
43861: OR
43862: IFFALSE 43866
// exit ;
43864: GO 44143
// side := GetSide ( lab ) ;
43866: LD_ADDR_VAR 0 4
43870: PUSH
43871: LD_VAR 0 2
43875: PPUSH
43876: CALL_OW 255
43880: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
43881: LD_VAR 0 4
43885: PUSH
43886: LD_EXP 76
43890: IN
43891: NOT
43892: PUSH
43893: LD_EXP 77
43897: NOT
43898: OR
43899: PUSH
43900: LD_EXP 50
43904: NOT
43905: OR
43906: IFFALSE 43910
// exit ;
43908: GO 44143
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
43910: LD_ADDR_EXP 77
43914: PUSH
43915: LD_EXP 77
43919: PPUSH
43920: LD_VAR 0 4
43924: PPUSH
43925: LD_EXP 77
43929: PUSH
43930: LD_VAR 0 4
43934: ARRAY
43935: PUSH
43936: LD_VAR 0 1
43940: DIFF
43941: PPUSH
43942: CALL_OW 1
43946: ST_TO_ADDR
// for i = 1 to mc_bases do
43947: LD_ADDR_VAR 0 5
43951: PUSH
43952: DOUBLE
43953: LD_INT 1
43955: DEC
43956: ST_TO_ADDR
43957: LD_EXP 50
43961: PUSH
43962: FOR_TO
43963: IFFALSE 44141
// begin if lab in mc_bases [ i ] then
43965: LD_VAR 0 2
43969: PUSH
43970: LD_EXP 50
43974: PUSH
43975: LD_VAR 0 5
43979: ARRAY
43980: IN
43981: IFFALSE 44139
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
43983: LD_VAR 0 1
43987: PUSH
43988: LD_INT 11
43990: PUSH
43991: LD_INT 4
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: IN
44006: PUSH
44007: LD_EXP 80
44011: PUSH
44012: LD_VAR 0 5
44016: ARRAY
44017: AND
44018: IFFALSE 44139
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
44020: LD_ADDR_VAR 0 6
44024: PUSH
44025: LD_EXP 80
44029: PUSH
44030: LD_VAR 0 5
44034: ARRAY
44035: PUSH
44036: LD_INT 1
44038: ARRAY
44039: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44040: LD_ADDR_EXP 80
44044: PUSH
44045: LD_EXP 80
44049: PPUSH
44050: LD_VAR 0 5
44054: PPUSH
44055: EMPTY
44056: PPUSH
44057: CALL_OW 1
44061: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
44062: LD_VAR 0 6
44066: PPUSH
44067: LD_INT 0
44069: PPUSH
44070: CALL_OW 109
// ComExitBuilding ( tmp ) ;
44074: LD_VAR 0 6
44078: PPUSH
44079: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
44083: LD_ADDR_EXP 79
44087: PUSH
44088: LD_EXP 79
44092: PPUSH
44093: LD_VAR 0 5
44097: PPUSH
44098: LD_EXP 79
44102: PUSH
44103: LD_VAR 0 5
44107: ARRAY
44108: PPUSH
44109: LD_INT 1
44111: PPUSH
44112: LD_VAR 0 6
44116: PPUSH
44117: CALL_OW 2
44121: PPUSH
44122: CALL_OW 1
44126: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
44127: LD_VAR 0 5
44131: PPUSH
44132: LD_INT 112
44134: PPUSH
44135: CALL 21035 0 2
// end ; end ; end ;
44139: GO 43962
44141: POP
44142: POP
// end ;
44143: LD_VAR 0 3
44147: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
44148: LD_INT 0
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
// if not mc_bases or not skirmish then
44158: LD_EXP 50
44162: NOT
44163: PUSH
44164: LD_EXP 48
44168: NOT
44169: OR
44170: IFFALSE 44174
// exit ;
44172: GO 45545
// for i = 1 to mc_bases do
44174: LD_ADDR_VAR 0 3
44178: PUSH
44179: DOUBLE
44180: LD_INT 1
44182: DEC
44183: ST_TO_ADDR
44184: LD_EXP 50
44188: PUSH
44189: FOR_TO
44190: IFFALSE 45543
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
44192: LD_VAR 0 1
44196: PUSH
44197: LD_EXP 50
44201: PUSH
44202: LD_VAR 0 3
44206: ARRAY
44207: IN
44208: PUSH
44209: LD_VAR 0 1
44213: PUSH
44214: LD_EXP 57
44218: PUSH
44219: LD_VAR 0 3
44223: ARRAY
44224: IN
44225: OR
44226: PUSH
44227: LD_VAR 0 1
44231: PUSH
44232: LD_EXP 72
44236: PUSH
44237: LD_VAR 0 3
44241: ARRAY
44242: IN
44243: OR
44244: PUSH
44245: LD_VAR 0 1
44249: PUSH
44250: LD_EXP 69
44254: PUSH
44255: LD_VAR 0 3
44259: ARRAY
44260: IN
44261: OR
44262: PUSH
44263: LD_VAR 0 1
44267: PUSH
44268: LD_EXP 79
44272: PUSH
44273: LD_VAR 0 3
44277: ARRAY
44278: IN
44279: OR
44280: PUSH
44281: LD_VAR 0 1
44285: PUSH
44286: LD_EXP 80
44290: PUSH
44291: LD_VAR 0 3
44295: ARRAY
44296: IN
44297: OR
44298: IFFALSE 45541
// begin if un in mc_ape [ i ] then
44300: LD_VAR 0 1
44304: PUSH
44305: LD_EXP 79
44309: PUSH
44310: LD_VAR 0 3
44314: ARRAY
44315: IN
44316: IFFALSE 44355
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
44318: LD_ADDR_EXP 79
44322: PUSH
44323: LD_EXP 79
44327: PPUSH
44328: LD_VAR 0 3
44332: PPUSH
44333: LD_EXP 79
44337: PUSH
44338: LD_VAR 0 3
44342: ARRAY
44343: PUSH
44344: LD_VAR 0 1
44348: DIFF
44349: PPUSH
44350: CALL_OW 1
44354: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
44355: LD_VAR 0 1
44359: PUSH
44360: LD_EXP 80
44364: PUSH
44365: LD_VAR 0 3
44369: ARRAY
44370: IN
44371: IFFALSE 44395
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44373: LD_ADDR_EXP 80
44377: PUSH
44378: LD_EXP 80
44382: PPUSH
44383: LD_VAR 0 3
44387: PPUSH
44388: EMPTY
44389: PPUSH
44390: CALL_OW 1
44394: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
44395: LD_VAR 0 1
44399: PPUSH
44400: CALL_OW 247
44404: PUSH
44405: LD_INT 2
44407: EQUAL
44408: PUSH
44409: LD_VAR 0 1
44413: PPUSH
44414: CALL_OW 110
44418: PUSH
44419: LD_INT 20
44421: EQUAL
44422: PUSH
44423: LD_VAR 0 1
44427: PUSH
44428: LD_EXP 72
44432: PUSH
44433: LD_VAR 0 3
44437: ARRAY
44438: IN
44439: OR
44440: PUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 264
44450: PUSH
44451: LD_INT 12
44453: PUSH
44454: LD_INT 51
44456: PUSH
44457: LD_EXP 94
44461: PUSH
44462: LD_INT 32
44464: PUSH
44465: LD_INT 13
44467: PUSH
44468: LD_INT 52
44470: PUSH
44471: LD_INT 31
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: IN
44483: OR
44484: AND
44485: IFFALSE 44793
// begin if un in mc_defender [ i ] then
44487: LD_VAR 0 1
44491: PUSH
44492: LD_EXP 72
44496: PUSH
44497: LD_VAR 0 3
44501: ARRAY
44502: IN
44503: IFFALSE 44542
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44505: LD_ADDR_EXP 72
44509: PUSH
44510: LD_EXP 72
44514: PPUSH
44515: LD_VAR 0 3
44519: PPUSH
44520: LD_EXP 72
44524: PUSH
44525: LD_VAR 0 3
44529: ARRAY
44530: PUSH
44531: LD_VAR 0 1
44535: DIFF
44536: PPUSH
44537: CALL_OW 1
44541: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44542: LD_ADDR_VAR 0 8
44546: PUSH
44547: LD_VAR 0 3
44551: PPUSH
44552: LD_INT 3
44554: PPUSH
44555: CALL 41211 0 2
44559: ST_TO_ADDR
// if fac then
44560: LD_VAR 0 8
44564: IFFALSE 44793
// begin for j in fac do
44566: LD_ADDR_VAR 0 4
44570: PUSH
44571: LD_VAR 0 8
44575: PUSH
44576: FOR_IN
44577: IFFALSE 44791
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44579: LD_ADDR_VAR 0 9
44583: PUSH
44584: LD_VAR 0 8
44588: PPUSH
44589: LD_VAR 0 1
44593: PPUSH
44594: CALL_OW 265
44598: PPUSH
44599: LD_VAR 0 1
44603: PPUSH
44604: CALL_OW 262
44608: PPUSH
44609: LD_VAR 0 1
44613: PPUSH
44614: CALL_OW 263
44618: PPUSH
44619: LD_VAR 0 1
44623: PPUSH
44624: CALL_OW 264
44628: PPUSH
44629: CALL 51780 0 5
44633: ST_TO_ADDR
// if components then
44634: LD_VAR 0 9
44638: IFFALSE 44789
// begin if GetWeapon ( un ) = ar_control_tower then
44640: LD_VAR 0 1
44644: PPUSH
44645: CALL_OW 264
44649: PUSH
44650: LD_INT 31
44652: EQUAL
44653: IFFALSE 44770
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
44655: LD_VAR 0 1
44659: PPUSH
44660: CALL_OW 311
44664: PPUSH
44665: LD_INT 0
44667: PPUSH
44668: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
44672: LD_ADDR_EXP 90
44676: PUSH
44677: LD_EXP 90
44681: PPUSH
44682: LD_VAR 0 3
44686: PPUSH
44687: LD_EXP 90
44691: PUSH
44692: LD_VAR 0 3
44696: ARRAY
44697: PUSH
44698: LD_VAR 0 1
44702: PPUSH
44703: CALL_OW 311
44707: DIFF
44708: PPUSH
44709: CALL_OW 1
44713: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
44714: LD_ADDR_VAR 0 7
44718: PUSH
44719: LD_EXP 71
44723: PUSH
44724: LD_VAR 0 3
44728: ARRAY
44729: PPUSH
44730: LD_INT 1
44732: PPUSH
44733: LD_VAR 0 9
44737: PPUSH
44738: CALL_OW 2
44742: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
44743: LD_ADDR_EXP 71
44747: PUSH
44748: LD_EXP 71
44752: PPUSH
44753: LD_VAR 0 3
44757: PPUSH
44758: LD_VAR 0 7
44762: PPUSH
44763: CALL_OW 1
44767: ST_TO_ADDR
// end else
44768: GO 44787
// MC_InsertProduceList ( i , [ components ] ) ;
44770: LD_VAR 0 3
44774: PPUSH
44775: LD_VAR 0 9
44779: PUSH
44780: EMPTY
44781: LIST
44782: PPUSH
44783: CALL 40756 0 2
// break ;
44787: GO 44791
// end ; end ;
44789: GO 44576
44791: POP
44792: POP
// end ; end ; if GetType ( un ) = unit_building then
44793: LD_VAR 0 1
44797: PPUSH
44798: CALL_OW 247
44802: PUSH
44803: LD_INT 3
44805: EQUAL
44806: IFFALSE 45209
// begin btype := GetBType ( un ) ;
44808: LD_ADDR_VAR 0 5
44812: PUSH
44813: LD_VAR 0 1
44817: PPUSH
44818: CALL_OW 266
44822: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
44823: LD_VAR 0 5
44827: PUSH
44828: LD_INT 29
44830: PUSH
44831: LD_INT 30
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: IN
44838: IFFALSE 44911
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
44840: LD_VAR 0 1
44844: PPUSH
44845: CALL_OW 250
44849: PPUSH
44850: LD_VAR 0 1
44854: PPUSH
44855: CALL_OW 251
44859: PPUSH
44860: LD_VAR 0 1
44864: PPUSH
44865: CALL_OW 255
44869: PPUSH
44870: CALL_OW 440
44874: NOT
44875: IFFALSE 44911
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
44877: LD_VAR 0 1
44881: PPUSH
44882: CALL_OW 250
44886: PPUSH
44887: LD_VAR 0 1
44891: PPUSH
44892: CALL_OW 251
44896: PPUSH
44897: LD_VAR 0 1
44901: PPUSH
44902: CALL_OW 255
44906: PPUSH
44907: CALL_OW 441
// end ; if btype = b_warehouse then
44911: LD_VAR 0 5
44915: PUSH
44916: LD_INT 1
44918: EQUAL
44919: IFFALSE 44937
// begin btype := b_depot ;
44921: LD_ADDR_VAR 0 5
44925: PUSH
44926: LD_INT 0
44928: ST_TO_ADDR
// pos := 1 ;
44929: LD_ADDR_VAR 0 6
44933: PUSH
44934: LD_INT 1
44936: ST_TO_ADDR
// end ; if btype = b_factory then
44937: LD_VAR 0 5
44941: PUSH
44942: LD_INT 3
44944: EQUAL
44945: IFFALSE 44963
// begin btype := b_workshop ;
44947: LD_ADDR_VAR 0 5
44951: PUSH
44952: LD_INT 2
44954: ST_TO_ADDR
// pos := 1 ;
44955: LD_ADDR_VAR 0 6
44959: PUSH
44960: LD_INT 1
44962: ST_TO_ADDR
// end ; if btype = b_barracks then
44963: LD_VAR 0 5
44967: PUSH
44968: LD_INT 5
44970: EQUAL
44971: IFFALSE 44981
// btype := b_armoury ;
44973: LD_ADDR_VAR 0 5
44977: PUSH
44978: LD_INT 4
44980: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
44981: LD_VAR 0 5
44985: PUSH
44986: LD_INT 7
44988: PUSH
44989: LD_INT 8
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: IN
44996: IFFALSE 45006
// btype := b_lab ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_INT 6
45005: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
45006: LD_ADDR_EXP 55
45010: PUSH
45011: LD_EXP 55
45015: PPUSH
45016: LD_VAR 0 3
45020: PUSH
45021: LD_EXP 55
45025: PUSH
45026: LD_VAR 0 3
45030: ARRAY
45031: PUSH
45032: LD_INT 1
45034: PLUS
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PPUSH
45040: LD_VAR 0 5
45044: PUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 250
45054: PUSH
45055: LD_VAR 0 1
45059: PPUSH
45060: CALL_OW 251
45064: PUSH
45065: LD_VAR 0 1
45069: PPUSH
45070: CALL_OW 254
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: PPUSH
45081: CALL 54248 0 3
45085: ST_TO_ADDR
// if pos = 1 then
45086: LD_VAR 0 6
45090: PUSH
45091: LD_INT 1
45093: EQUAL
45094: IFFALSE 45209
// begin tmp := mc_build_list [ i ] ;
45096: LD_ADDR_VAR 0 7
45100: PUSH
45101: LD_EXP 55
45105: PUSH
45106: LD_VAR 0 3
45110: ARRAY
45111: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45112: LD_VAR 0 7
45116: PPUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 30
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 30
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: PPUSH
45145: CALL_OW 72
45149: IFFALSE 45159
// pos := 2 ;
45151: LD_ADDR_VAR 0 6
45155: PUSH
45156: LD_INT 2
45158: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
45159: LD_ADDR_VAR 0 7
45163: PUSH
45164: LD_VAR 0 7
45168: PPUSH
45169: LD_VAR 0 6
45173: PPUSH
45174: LD_VAR 0 7
45178: PPUSH
45179: CALL 54574 0 3
45183: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
45184: LD_ADDR_EXP 55
45188: PUSH
45189: LD_EXP 55
45193: PPUSH
45194: LD_VAR 0 3
45198: PPUSH
45199: LD_VAR 0 7
45203: PPUSH
45204: CALL_OW 1
45208: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
45209: LD_VAR 0 1
45213: PUSH
45214: LD_EXP 50
45218: PUSH
45219: LD_VAR 0 3
45223: ARRAY
45224: IN
45225: IFFALSE 45264
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
45227: LD_ADDR_EXP 50
45231: PUSH
45232: LD_EXP 50
45236: PPUSH
45237: LD_VAR 0 3
45241: PPUSH
45242: LD_EXP 50
45246: PUSH
45247: LD_VAR 0 3
45251: ARRAY
45252: PUSH
45253: LD_VAR 0 1
45257: DIFF
45258: PPUSH
45259: CALL_OW 1
45263: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
45264: LD_VAR 0 1
45268: PUSH
45269: LD_EXP 57
45273: PUSH
45274: LD_VAR 0 3
45278: ARRAY
45279: IN
45280: IFFALSE 45319
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
45282: LD_ADDR_EXP 57
45286: PUSH
45287: LD_EXP 57
45291: PPUSH
45292: LD_VAR 0 3
45296: PPUSH
45297: LD_EXP 57
45301: PUSH
45302: LD_VAR 0 3
45306: ARRAY
45307: PUSH
45308: LD_VAR 0 1
45312: DIFF
45313: PPUSH
45314: CALL_OW 1
45318: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
45319: LD_VAR 0 1
45323: PUSH
45324: LD_EXP 69
45328: PUSH
45329: LD_VAR 0 3
45333: ARRAY
45334: IN
45335: IFFALSE 45374
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
45337: LD_ADDR_EXP 69
45341: PUSH
45342: LD_EXP 69
45346: PPUSH
45347: LD_VAR 0 3
45351: PPUSH
45352: LD_EXP 69
45356: PUSH
45357: LD_VAR 0 3
45361: ARRAY
45362: PUSH
45363: LD_VAR 0 1
45367: DIFF
45368: PPUSH
45369: CALL_OW 1
45373: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
45374: LD_VAR 0 1
45378: PUSH
45379: LD_EXP 72
45383: PUSH
45384: LD_VAR 0 3
45388: ARRAY
45389: IN
45390: IFFALSE 45429
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
45392: LD_ADDR_EXP 72
45396: PUSH
45397: LD_EXP 72
45401: PPUSH
45402: LD_VAR 0 3
45406: PPUSH
45407: LD_EXP 72
45411: PUSH
45412: LD_VAR 0 3
45416: ARRAY
45417: PUSH
45418: LD_VAR 0 1
45422: DIFF
45423: PPUSH
45424: CALL_OW 1
45428: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
45429: LD_VAR 0 1
45433: PUSH
45434: LD_EXP 59
45438: PUSH
45439: LD_VAR 0 3
45443: ARRAY
45444: IN
45445: IFFALSE 45484
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
45447: LD_ADDR_EXP 59
45451: PUSH
45452: LD_EXP 59
45456: PPUSH
45457: LD_VAR 0 3
45461: PPUSH
45462: LD_EXP 59
45466: PUSH
45467: LD_VAR 0 3
45471: ARRAY
45472: PUSH
45473: LD_VAR 0 1
45477: DIFF
45478: PPUSH
45479: CALL_OW 1
45483: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
45484: LD_VAR 0 1
45488: PUSH
45489: LD_EXP 58
45493: PUSH
45494: LD_VAR 0 3
45498: ARRAY
45499: IN
45500: IFFALSE 45539
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
45502: LD_ADDR_EXP 58
45506: PUSH
45507: LD_EXP 58
45511: PPUSH
45512: LD_VAR 0 3
45516: PPUSH
45517: LD_EXP 58
45521: PUSH
45522: LD_VAR 0 3
45526: ARRAY
45527: PUSH
45528: LD_VAR 0 1
45532: DIFF
45533: PPUSH
45534: CALL_OW 1
45538: ST_TO_ADDR
// end ; break ;
45539: GO 45543
// end ;
45541: GO 44189
45543: POP
45544: POP
// end ;
45545: LD_VAR 0 2
45549: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
45550: LD_INT 0
45552: PPUSH
45553: PPUSH
45554: PPUSH
// if not mc_bases or not skirmish then
45555: LD_EXP 50
45559: NOT
45560: PUSH
45561: LD_EXP 48
45565: NOT
45566: OR
45567: IFFALSE 45571
// exit ;
45569: GO 45786
// for i = 1 to mc_bases do
45571: LD_ADDR_VAR 0 3
45575: PUSH
45576: DOUBLE
45577: LD_INT 1
45579: DEC
45580: ST_TO_ADDR
45581: LD_EXP 50
45585: PUSH
45586: FOR_TO
45587: IFFALSE 45784
// begin if building in mc_construct_list [ i ] then
45589: LD_VAR 0 1
45593: PUSH
45594: LD_EXP 57
45598: PUSH
45599: LD_VAR 0 3
45603: ARRAY
45604: IN
45605: IFFALSE 45782
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45607: LD_ADDR_EXP 57
45611: PUSH
45612: LD_EXP 57
45616: PPUSH
45617: LD_VAR 0 3
45621: PPUSH
45622: LD_EXP 57
45626: PUSH
45627: LD_VAR 0 3
45631: ARRAY
45632: PUSH
45633: LD_VAR 0 1
45637: DIFF
45638: PPUSH
45639: CALL_OW 1
45643: ST_TO_ADDR
// if building in mc_lab [ i ] then
45644: LD_VAR 0 1
45648: PUSH
45649: LD_EXP 83
45653: PUSH
45654: LD_VAR 0 3
45658: ARRAY
45659: IN
45660: IFFALSE 45715
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
45662: LD_ADDR_EXP 84
45666: PUSH
45667: LD_EXP 84
45671: PPUSH
45672: LD_VAR 0 3
45676: PPUSH
45677: LD_EXP 84
45681: PUSH
45682: LD_VAR 0 3
45686: ARRAY
45687: PPUSH
45688: LD_INT 1
45690: PPUSH
45691: LD_EXP 84
45695: PUSH
45696: LD_VAR 0 3
45700: ARRAY
45701: PPUSH
45702: LD_INT 0
45704: PPUSH
45705: CALL 53666 0 4
45709: PPUSH
45710: CALL_OW 1
45714: ST_TO_ADDR
// if not building in mc_bases [ i ] then
45715: LD_VAR 0 1
45719: PUSH
45720: LD_EXP 50
45724: PUSH
45725: LD_VAR 0 3
45729: ARRAY
45730: IN
45731: NOT
45732: IFFALSE 45778
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45734: LD_ADDR_EXP 50
45738: PUSH
45739: LD_EXP 50
45743: PPUSH
45744: LD_VAR 0 3
45748: PUSH
45749: LD_EXP 50
45753: PUSH
45754: LD_VAR 0 3
45758: ARRAY
45759: PUSH
45760: LD_INT 1
45762: PLUS
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PPUSH
45768: LD_VAR 0 1
45772: PPUSH
45773: CALL 54248 0 3
45777: ST_TO_ADDR
// exit ;
45778: POP
45779: POP
45780: GO 45786
// end ; end ;
45782: GO 45586
45784: POP
45785: POP
// end ;
45786: LD_VAR 0 2
45790: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
45791: LD_INT 0
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
45797: PPUSH
45798: PPUSH
45799: PPUSH
// if not mc_bases or not skirmish then
45800: LD_EXP 50
45804: NOT
45805: PUSH
45806: LD_EXP 48
45810: NOT
45811: OR
45812: IFFALSE 45816
// exit ;
45814: GO 46477
// for i = 1 to mc_bases do
45816: LD_ADDR_VAR 0 3
45820: PUSH
45821: DOUBLE
45822: LD_INT 1
45824: DEC
45825: ST_TO_ADDR
45826: LD_EXP 50
45830: PUSH
45831: FOR_TO
45832: IFFALSE 46475
// begin if building in mc_construct_list [ i ] then
45834: LD_VAR 0 1
45838: PUSH
45839: LD_EXP 57
45843: PUSH
45844: LD_VAR 0 3
45848: ARRAY
45849: IN
45850: IFFALSE 46473
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45852: LD_ADDR_EXP 57
45856: PUSH
45857: LD_EXP 57
45861: PPUSH
45862: LD_VAR 0 3
45866: PPUSH
45867: LD_EXP 57
45871: PUSH
45872: LD_VAR 0 3
45876: ARRAY
45877: PUSH
45878: LD_VAR 0 1
45882: DIFF
45883: PPUSH
45884: CALL_OW 1
45888: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45889: LD_ADDR_EXP 50
45893: PUSH
45894: LD_EXP 50
45898: PPUSH
45899: LD_VAR 0 3
45903: PUSH
45904: LD_EXP 50
45908: PUSH
45909: LD_VAR 0 3
45913: ARRAY
45914: PUSH
45915: LD_INT 1
45917: PLUS
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PPUSH
45923: LD_VAR 0 1
45927: PPUSH
45928: CALL 54248 0 3
45932: ST_TO_ADDR
// btype := GetBType ( building ) ;
45933: LD_ADDR_VAR 0 5
45937: PUSH
45938: LD_VAR 0 1
45942: PPUSH
45943: CALL_OW 266
45947: ST_TO_ADDR
// side := GetSide ( building ) ;
45948: LD_ADDR_VAR 0 8
45952: PUSH
45953: LD_VAR 0 1
45957: PPUSH
45958: CALL_OW 255
45962: ST_TO_ADDR
// if btype = b_lab then
45963: LD_VAR 0 5
45967: PUSH
45968: LD_INT 6
45970: EQUAL
45971: IFFALSE 46021
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
45973: LD_ADDR_EXP 83
45977: PUSH
45978: LD_EXP 83
45982: PPUSH
45983: LD_VAR 0 3
45987: PUSH
45988: LD_EXP 83
45992: PUSH
45993: LD_VAR 0 3
45997: ARRAY
45998: PUSH
45999: LD_INT 1
46001: PLUS
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PPUSH
46007: LD_VAR 0 1
46011: PPUSH
46012: CALL 54248 0 3
46016: ST_TO_ADDR
// exit ;
46017: POP
46018: POP
46019: GO 46477
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
46021: LD_VAR 0 5
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 4
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: IN
46040: IFFALSE 46164
// begin if btype = b_armoury then
46042: LD_VAR 0 5
46046: PUSH
46047: LD_INT 4
46049: EQUAL
46050: IFFALSE 46060
// btype := b_barracks ;
46052: LD_ADDR_VAR 0 5
46056: PUSH
46057: LD_INT 5
46059: ST_TO_ADDR
// if btype = b_depot then
46060: LD_VAR 0 5
46064: PUSH
46065: LD_INT 0
46067: EQUAL
46068: IFFALSE 46078
// btype := b_warehouse ;
46070: LD_ADDR_VAR 0 5
46074: PUSH
46075: LD_INT 1
46077: ST_TO_ADDR
// if btype = b_workshop then
46078: LD_VAR 0 5
46082: PUSH
46083: LD_INT 2
46085: EQUAL
46086: IFFALSE 46096
// btype := b_factory ;
46088: LD_ADDR_VAR 0 5
46092: PUSH
46093: LD_INT 3
46095: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
46096: LD_VAR 0 5
46100: PPUSH
46101: LD_VAR 0 8
46105: PPUSH
46106: CALL_OW 323
46110: PUSH
46111: LD_INT 1
46113: EQUAL
46114: IFFALSE 46160
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
46116: LD_ADDR_EXP 82
46120: PUSH
46121: LD_EXP 82
46125: PPUSH
46126: LD_VAR 0 3
46130: PUSH
46131: LD_EXP 82
46135: PUSH
46136: LD_VAR 0 3
46140: ARRAY
46141: PUSH
46142: LD_INT 1
46144: PLUS
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PPUSH
46150: LD_VAR 0 1
46154: PPUSH
46155: CALL 54248 0 3
46159: ST_TO_ADDR
// exit ;
46160: POP
46161: POP
46162: GO 46477
// end ; if btype in [ b_bunker , b_turret ] then
46164: LD_VAR 0 5
46168: PUSH
46169: LD_INT 32
46171: PUSH
46172: LD_INT 33
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: IN
46179: IFFALSE 46469
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
46181: LD_ADDR_EXP 58
46185: PUSH
46186: LD_EXP 58
46190: PPUSH
46191: LD_VAR 0 3
46195: PUSH
46196: LD_EXP 58
46200: PUSH
46201: LD_VAR 0 3
46205: ARRAY
46206: PUSH
46207: LD_INT 1
46209: PLUS
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PPUSH
46215: LD_VAR 0 1
46219: PPUSH
46220: CALL 54248 0 3
46224: ST_TO_ADDR
// if btype = b_bunker then
46225: LD_VAR 0 5
46229: PUSH
46230: LD_INT 32
46232: EQUAL
46233: IFFALSE 46469
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46235: LD_ADDR_EXP 59
46239: PUSH
46240: LD_EXP 59
46244: PPUSH
46245: LD_VAR 0 3
46249: PUSH
46250: LD_EXP 59
46254: PUSH
46255: LD_VAR 0 3
46259: ARRAY
46260: PUSH
46261: LD_INT 1
46263: PLUS
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PPUSH
46269: LD_VAR 0 1
46273: PPUSH
46274: CALL 54248 0 3
46278: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
46279: LD_ADDR_VAR 0 6
46283: PUSH
46284: LD_EXP 50
46288: PUSH
46289: LD_VAR 0 3
46293: ARRAY
46294: PPUSH
46295: LD_INT 25
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: LD_INT 54
46310: PUSH
46311: EMPTY
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PPUSH
46322: CALL_OW 72
46326: ST_TO_ADDR
// if tmp then
46327: LD_VAR 0 6
46331: IFFALSE 46337
// exit ;
46333: POP
46334: POP
46335: GO 46477
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46337: LD_ADDR_VAR 0 6
46341: PUSH
46342: LD_EXP 50
46346: PUSH
46347: LD_VAR 0 3
46351: ARRAY
46352: PPUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 30
46358: PUSH
46359: LD_INT 4
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 30
46368: PUSH
46369: LD_INT 5
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: LIST
46380: PPUSH
46381: CALL_OW 72
46385: ST_TO_ADDR
// if not tmp then
46386: LD_VAR 0 6
46390: NOT
46391: IFFALSE 46397
// exit ;
46393: POP
46394: POP
46395: GO 46477
// for j in tmp do
46397: LD_ADDR_VAR 0 4
46401: PUSH
46402: LD_VAR 0 6
46406: PUSH
46407: FOR_IN
46408: IFFALSE 46467
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
46410: LD_ADDR_VAR 0 7
46414: PUSH
46415: LD_VAR 0 4
46419: PPUSH
46420: CALL_OW 313
46424: PPUSH
46425: LD_INT 25
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PPUSH
46435: CALL_OW 72
46439: ST_TO_ADDR
// if units then
46440: LD_VAR 0 7
46444: IFFALSE 46465
// begin ComExitBuilding ( units [ 1 ] ) ;
46446: LD_VAR 0 7
46450: PUSH
46451: LD_INT 1
46453: ARRAY
46454: PPUSH
46455: CALL_OW 122
// exit ;
46459: POP
46460: POP
46461: POP
46462: POP
46463: GO 46477
// end ; end ;
46465: GO 46407
46467: POP
46468: POP
// end ; end ; exit ;
46469: POP
46470: POP
46471: GO 46477
// end ; end ;
46473: GO 45831
46475: POP
46476: POP
// end ;
46477: LD_VAR 0 2
46481: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
46482: LD_INT 0
46484: PPUSH
46485: PPUSH
46486: PPUSH
46487: PPUSH
46488: PPUSH
46489: PPUSH
46490: PPUSH
// if not mc_bases or not skirmish then
46491: LD_EXP 50
46495: NOT
46496: PUSH
46497: LD_EXP 48
46501: NOT
46502: OR
46503: IFFALSE 46507
// exit ;
46505: GO 46738
// btype := GetBType ( building ) ;
46507: LD_ADDR_VAR 0 6
46511: PUSH
46512: LD_VAR 0 1
46516: PPUSH
46517: CALL_OW 266
46521: ST_TO_ADDR
// x := GetX ( building ) ;
46522: LD_ADDR_VAR 0 7
46526: PUSH
46527: LD_VAR 0 1
46531: PPUSH
46532: CALL_OW 250
46536: ST_TO_ADDR
// y := GetY ( building ) ;
46537: LD_ADDR_VAR 0 8
46541: PUSH
46542: LD_VAR 0 1
46546: PPUSH
46547: CALL_OW 251
46551: ST_TO_ADDR
// d := GetDir ( building ) ;
46552: LD_ADDR_VAR 0 9
46556: PUSH
46557: LD_VAR 0 1
46561: PPUSH
46562: CALL_OW 254
46566: ST_TO_ADDR
// for i = 1 to mc_bases do
46567: LD_ADDR_VAR 0 4
46571: PUSH
46572: DOUBLE
46573: LD_INT 1
46575: DEC
46576: ST_TO_ADDR
46577: LD_EXP 50
46581: PUSH
46582: FOR_TO
46583: IFFALSE 46736
// begin if not mc_build_list [ i ] then
46585: LD_EXP 55
46589: PUSH
46590: LD_VAR 0 4
46594: ARRAY
46595: NOT
46596: IFFALSE 46600
// continue ;
46598: GO 46582
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
46600: LD_VAR 0 6
46604: PUSH
46605: LD_VAR 0 7
46609: PUSH
46610: LD_VAR 0 8
46614: PUSH
46615: LD_VAR 0 9
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: PPUSH
46626: LD_EXP 55
46630: PUSH
46631: LD_VAR 0 4
46635: ARRAY
46636: PUSH
46637: LD_INT 1
46639: ARRAY
46640: PPUSH
46641: CALL 60417 0 2
46645: IFFALSE 46734
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
46647: LD_ADDR_EXP 55
46651: PUSH
46652: LD_EXP 55
46656: PPUSH
46657: LD_VAR 0 4
46661: PPUSH
46662: LD_EXP 55
46666: PUSH
46667: LD_VAR 0 4
46671: ARRAY
46672: PPUSH
46673: LD_INT 1
46675: PPUSH
46676: CALL_OW 3
46680: PPUSH
46681: CALL_OW 1
46685: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
46686: LD_ADDR_EXP 57
46690: PUSH
46691: LD_EXP 57
46695: PPUSH
46696: LD_VAR 0 4
46700: PUSH
46701: LD_EXP 57
46705: PUSH
46706: LD_VAR 0 4
46710: ARRAY
46711: PUSH
46712: LD_INT 1
46714: PLUS
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PPUSH
46720: LD_VAR 0 1
46724: PPUSH
46725: CALL 54248 0 3
46729: ST_TO_ADDR
// exit ;
46730: POP
46731: POP
46732: GO 46738
// end ; end ;
46734: GO 46582
46736: POP
46737: POP
// end ;
46738: LD_VAR 0 3
46742: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
46743: LD_INT 0
46745: PPUSH
46746: PPUSH
46747: PPUSH
// if not mc_bases or not skirmish then
46748: LD_EXP 50
46752: NOT
46753: PUSH
46754: LD_EXP 48
46758: NOT
46759: OR
46760: IFFALSE 46764
// exit ;
46762: GO 46954
// for i = 1 to mc_bases do
46764: LD_ADDR_VAR 0 4
46768: PUSH
46769: DOUBLE
46770: LD_INT 1
46772: DEC
46773: ST_TO_ADDR
46774: LD_EXP 50
46778: PUSH
46779: FOR_TO
46780: IFFALSE 46867
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
46782: LD_VAR 0 1
46786: PUSH
46787: LD_EXP 58
46791: PUSH
46792: LD_VAR 0 4
46796: ARRAY
46797: IN
46798: PUSH
46799: LD_VAR 0 1
46803: PUSH
46804: LD_EXP 59
46808: PUSH
46809: LD_VAR 0 4
46813: ARRAY
46814: IN
46815: NOT
46816: AND
46817: IFFALSE 46865
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46819: LD_ADDR_EXP 59
46823: PUSH
46824: LD_EXP 59
46828: PPUSH
46829: LD_VAR 0 4
46833: PUSH
46834: LD_EXP 59
46838: PUSH
46839: LD_VAR 0 4
46843: ARRAY
46844: PUSH
46845: LD_INT 1
46847: PLUS
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PPUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: CALL 54248 0 3
46862: ST_TO_ADDR
// break ;
46863: GO 46867
// end ; end ;
46865: GO 46779
46867: POP
46868: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
46869: LD_VAR 0 1
46873: PPUSH
46874: CALL_OW 257
46878: PUSH
46879: LD_EXP 76
46883: IN
46884: PUSH
46885: LD_VAR 0 1
46889: PPUSH
46890: CALL_OW 266
46894: PUSH
46895: LD_INT 5
46897: EQUAL
46898: AND
46899: PUSH
46900: LD_VAR 0 2
46904: PPUSH
46905: CALL_OW 110
46909: PUSH
46910: LD_INT 18
46912: NONEQUAL
46913: AND
46914: IFFALSE 46954
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
46916: LD_VAR 0 2
46920: PPUSH
46921: CALL_OW 257
46925: PUSH
46926: LD_INT 5
46928: PUSH
46929: LD_INT 8
46931: PUSH
46932: LD_INT 9
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: IN
46940: IFFALSE 46954
// SetClass ( unit , 1 ) ;
46942: LD_VAR 0 2
46946: PPUSH
46947: LD_INT 1
46949: PPUSH
46950: CALL_OW 336
// end ;
46954: LD_VAR 0 3
46958: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
46959: LD_INT 0
46961: PPUSH
46962: PPUSH
// if not mc_bases or not skirmish then
46963: LD_EXP 50
46967: NOT
46968: PUSH
46969: LD_EXP 48
46973: NOT
46974: OR
46975: IFFALSE 46979
// exit ;
46977: GO 47095
// if GetLives ( abandoned_vehicle ) > 250 then
46979: LD_VAR 0 2
46983: PPUSH
46984: CALL_OW 256
46988: PUSH
46989: LD_INT 250
46991: GREATER
46992: IFFALSE 46996
// exit ;
46994: GO 47095
// for i = 1 to mc_bases do
46996: LD_ADDR_VAR 0 6
47000: PUSH
47001: DOUBLE
47002: LD_INT 1
47004: DEC
47005: ST_TO_ADDR
47006: LD_EXP 50
47010: PUSH
47011: FOR_TO
47012: IFFALSE 47093
// begin if driver in mc_bases [ i ] then
47014: LD_VAR 0 1
47018: PUSH
47019: LD_EXP 50
47023: PUSH
47024: LD_VAR 0 6
47028: ARRAY
47029: IN
47030: IFFALSE 47091
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
47032: LD_VAR 0 1
47036: PPUSH
47037: LD_EXP 50
47041: PUSH
47042: LD_VAR 0 6
47046: ARRAY
47047: PPUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 30
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 30
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: PPUSH
47076: CALL_OW 72
47080: PUSH
47081: LD_INT 1
47083: ARRAY
47084: PPUSH
47085: CALL_OW 112
// break ;
47089: GO 47093
// end ; end ;
47091: GO 47011
47093: POP
47094: POP
// end ; end_of_file
47095: LD_VAR 0 5
47099: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47100: LD_INT 0
47102: PPUSH
47103: PPUSH
// if exist_mode then
47104: LD_VAR 0 2
47108: IFFALSE 47133
// unit := CreateCharacter ( prefix & ident ) else
47110: LD_ADDR_VAR 0 5
47114: PUSH
47115: LD_VAR 0 3
47119: PUSH
47120: LD_VAR 0 1
47124: STR
47125: PPUSH
47126: CALL_OW 34
47130: ST_TO_ADDR
47131: GO 47148
// unit := NewCharacter ( ident ) ;
47133: LD_ADDR_VAR 0 5
47137: PUSH
47138: LD_VAR 0 1
47142: PPUSH
47143: CALL_OW 25
47147: ST_TO_ADDR
// result := unit ;
47148: LD_ADDR_VAR 0 4
47152: PUSH
47153: LD_VAR 0 5
47157: ST_TO_ADDR
// end ;
47158: LD_VAR 0 4
47162: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47163: LD_INT 0
47165: PPUSH
47166: PPUSH
// if not side or not nation then
47167: LD_VAR 0 1
47171: NOT
47172: PUSH
47173: LD_VAR 0 2
47177: NOT
47178: OR
47179: IFFALSE 47183
// exit ;
47181: GO 47827
// case nation of nation_american :
47183: LD_VAR 0 2
47187: PUSH
47188: LD_INT 1
47190: DOUBLE
47191: EQUAL
47192: IFTRUE 47196
47194: GO 47370
47196: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
47197: LD_ADDR_VAR 0 4
47201: PUSH
47202: LD_INT 35
47204: PUSH
47205: LD_INT 45
47207: PUSH
47208: LD_INT 46
47210: PUSH
47211: LD_INT 47
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: LD_INT 6
47222: PUSH
47223: LD_INT 15
47225: PUSH
47226: LD_INT 16
47228: PUSH
47229: LD_INT 7
47231: PUSH
47232: LD_INT 12
47234: PUSH
47235: LD_INT 13
47237: PUSH
47238: LD_INT 10
47240: PUSH
47241: LD_INT 14
47243: PUSH
47244: LD_INT 20
47246: PUSH
47247: LD_INT 21
47249: PUSH
47250: LD_INT 22
47252: PUSH
47253: LD_INT 25
47255: PUSH
47256: LD_INT 32
47258: PUSH
47259: LD_INT 27
47261: PUSH
47262: LD_INT 36
47264: PUSH
47265: LD_INT 69
47267: PUSH
47268: LD_INT 39
47270: PUSH
47271: LD_INT 34
47273: PUSH
47274: LD_INT 40
47276: PUSH
47277: LD_INT 48
47279: PUSH
47280: LD_INT 49
47282: PUSH
47283: LD_INT 50
47285: PUSH
47286: LD_INT 51
47288: PUSH
47289: LD_INT 52
47291: PUSH
47292: LD_INT 53
47294: PUSH
47295: LD_INT 54
47297: PUSH
47298: LD_INT 55
47300: PUSH
47301: LD_INT 56
47303: PUSH
47304: LD_INT 57
47306: PUSH
47307: LD_INT 58
47309: PUSH
47310: LD_INT 59
47312: PUSH
47313: LD_INT 60
47315: PUSH
47316: LD_INT 61
47318: PUSH
47319: LD_INT 62
47321: PUSH
47322: LD_INT 80
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
47368: GO 47751
47370: LD_INT 2
47372: DOUBLE
47373: EQUAL
47374: IFTRUE 47378
47376: GO 47560
47378: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
47379: LD_ADDR_VAR 0 4
47383: PUSH
47384: LD_INT 35
47386: PUSH
47387: LD_INT 45
47389: PUSH
47390: LD_INT 46
47392: PUSH
47393: LD_INT 47
47395: PUSH
47396: LD_INT 70
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 11
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: LD_INT 4
47410: PUSH
47411: LD_INT 5
47413: PUSH
47414: LD_INT 6
47416: PUSH
47417: LD_INT 15
47419: PUSH
47420: LD_INT 18
47422: PUSH
47423: LD_INT 7
47425: PUSH
47426: LD_INT 17
47428: PUSH
47429: LD_INT 8
47431: PUSH
47432: LD_INT 20
47434: PUSH
47435: LD_INT 21
47437: PUSH
47438: LD_INT 22
47440: PUSH
47441: LD_INT 72
47443: PUSH
47444: LD_INT 26
47446: PUSH
47447: LD_INT 69
47449: PUSH
47450: LD_INT 39
47452: PUSH
47453: LD_INT 40
47455: PUSH
47456: LD_INT 41
47458: PUSH
47459: LD_INT 42
47461: PUSH
47462: LD_INT 43
47464: PUSH
47465: LD_INT 48
47467: PUSH
47468: LD_INT 49
47470: PUSH
47471: LD_INT 50
47473: PUSH
47474: LD_INT 51
47476: PUSH
47477: LD_INT 52
47479: PUSH
47480: LD_INT 53
47482: PUSH
47483: LD_INT 54
47485: PUSH
47486: LD_INT 55
47488: PUSH
47489: LD_INT 56
47491: PUSH
47492: LD_INT 60
47494: PUSH
47495: LD_INT 61
47497: PUSH
47498: LD_INT 62
47500: PUSH
47501: LD_INT 66
47503: PUSH
47504: LD_INT 67
47506: PUSH
47507: LD_INT 68
47509: PUSH
47510: LD_INT 81
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: ST_TO_ADDR
47558: GO 47751
47560: LD_INT 3
47562: DOUBLE
47563: EQUAL
47564: IFTRUE 47568
47566: GO 47750
47568: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
47569: LD_ADDR_VAR 0 4
47573: PUSH
47574: LD_INT 46
47576: PUSH
47577: LD_INT 47
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 11
47588: PUSH
47589: LD_INT 9
47591: PUSH
47592: LD_INT 20
47594: PUSH
47595: LD_INT 19
47597: PUSH
47598: LD_INT 21
47600: PUSH
47601: LD_INT 24
47603: PUSH
47604: LD_INT 22
47606: PUSH
47607: LD_INT 25
47609: PUSH
47610: LD_INT 28
47612: PUSH
47613: LD_INT 29
47615: PUSH
47616: LD_INT 30
47618: PUSH
47619: LD_INT 31
47621: PUSH
47622: LD_INT 37
47624: PUSH
47625: LD_INT 38
47627: PUSH
47628: LD_INT 32
47630: PUSH
47631: LD_INT 27
47633: PUSH
47634: LD_INT 33
47636: PUSH
47637: LD_INT 69
47639: PUSH
47640: LD_INT 39
47642: PUSH
47643: LD_INT 34
47645: PUSH
47646: LD_INT 40
47648: PUSH
47649: LD_INT 71
47651: PUSH
47652: LD_INT 23
47654: PUSH
47655: LD_INT 44
47657: PUSH
47658: LD_INT 48
47660: PUSH
47661: LD_INT 49
47663: PUSH
47664: LD_INT 50
47666: PUSH
47667: LD_INT 51
47669: PUSH
47670: LD_INT 52
47672: PUSH
47673: LD_INT 53
47675: PUSH
47676: LD_INT 54
47678: PUSH
47679: LD_INT 55
47681: PUSH
47682: LD_INT 56
47684: PUSH
47685: LD_INT 57
47687: PUSH
47688: LD_INT 58
47690: PUSH
47691: LD_INT 59
47693: PUSH
47694: LD_INT 63
47696: PUSH
47697: LD_INT 64
47699: PUSH
47700: LD_INT 65
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: ST_TO_ADDR
47748: GO 47751
47750: POP
// if state > - 1 and state < 3 then
47751: LD_VAR 0 3
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: GREATER
47760: PUSH
47761: LD_VAR 0 3
47765: PUSH
47766: LD_INT 3
47768: LESS
47769: AND
47770: IFFALSE 47827
// for i in result do
47772: LD_ADDR_VAR 0 5
47776: PUSH
47777: LD_VAR 0 4
47781: PUSH
47782: FOR_IN
47783: IFFALSE 47825
// if GetTech ( i , side ) <> state then
47785: LD_VAR 0 5
47789: PPUSH
47790: LD_VAR 0 1
47794: PPUSH
47795: CALL_OW 321
47799: PUSH
47800: LD_VAR 0 3
47804: NONEQUAL
47805: IFFALSE 47823
// result := result diff i ;
47807: LD_ADDR_VAR 0 4
47811: PUSH
47812: LD_VAR 0 4
47816: PUSH
47817: LD_VAR 0 5
47821: DIFF
47822: ST_TO_ADDR
47823: GO 47782
47825: POP
47826: POP
// end ;
47827: LD_VAR 0 4
47831: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47832: LD_INT 0
47834: PPUSH
47835: PPUSH
47836: PPUSH
// result := true ;
47837: LD_ADDR_VAR 0 3
47841: PUSH
47842: LD_INT 1
47844: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47845: LD_ADDR_VAR 0 5
47849: PUSH
47850: LD_VAR 0 2
47854: PPUSH
47855: CALL_OW 480
47859: ST_TO_ADDR
// if not tmp then
47860: LD_VAR 0 5
47864: NOT
47865: IFFALSE 47869
// exit ;
47867: GO 47918
// for i in tmp do
47869: LD_ADDR_VAR 0 4
47873: PUSH
47874: LD_VAR 0 5
47878: PUSH
47879: FOR_IN
47880: IFFALSE 47916
// if GetTech ( i , side ) <> state_researched then
47882: LD_VAR 0 4
47886: PPUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 321
47896: PUSH
47897: LD_INT 2
47899: NONEQUAL
47900: IFFALSE 47914
// begin result := false ;
47902: LD_ADDR_VAR 0 3
47906: PUSH
47907: LD_INT 0
47909: ST_TO_ADDR
// exit ;
47910: POP
47911: POP
47912: GO 47918
// end ;
47914: GO 47879
47916: POP
47917: POP
// end ;
47918: LD_VAR 0 3
47922: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47923: LD_INT 0
47925: PPUSH
47926: PPUSH
47927: PPUSH
47928: PPUSH
47929: PPUSH
47930: PPUSH
47931: PPUSH
47932: PPUSH
47933: PPUSH
47934: PPUSH
47935: PPUSH
47936: PPUSH
47937: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47938: LD_VAR 0 1
47942: NOT
47943: PUSH
47944: LD_VAR 0 1
47948: PPUSH
47949: CALL_OW 257
47953: PUSH
47954: LD_INT 9
47956: NONEQUAL
47957: OR
47958: IFFALSE 47962
// exit ;
47960: GO 48535
// side := GetSide ( unit ) ;
47962: LD_ADDR_VAR 0 9
47966: PUSH
47967: LD_VAR 0 1
47971: PPUSH
47972: CALL_OW 255
47976: ST_TO_ADDR
// tech_space := tech_spacanom ;
47977: LD_ADDR_VAR 0 12
47981: PUSH
47982: LD_INT 29
47984: ST_TO_ADDR
// tech_time := tech_taurad ;
47985: LD_ADDR_VAR 0 13
47989: PUSH
47990: LD_INT 28
47992: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47993: LD_ADDR_VAR 0 11
47997: PUSH
47998: LD_VAR 0 1
48002: PPUSH
48003: CALL_OW 310
48007: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48008: LD_VAR 0 11
48012: PPUSH
48013: CALL_OW 247
48017: PUSH
48018: LD_INT 2
48020: EQUAL
48021: IFFALSE 48025
// exit ;
48023: GO 48535
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48025: LD_ADDR_VAR 0 8
48029: PUSH
48030: LD_INT 81
48032: PUSH
48033: LD_VAR 0 9
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: PUSH
48045: LD_INT 21
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PPUSH
48063: CALL_OW 69
48067: ST_TO_ADDR
// if not tmp then
48068: LD_VAR 0 8
48072: NOT
48073: IFFALSE 48077
// exit ;
48075: GO 48535
// if in_unit then
48077: LD_VAR 0 11
48081: IFFALSE 48105
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48083: LD_ADDR_VAR 0 10
48087: PUSH
48088: LD_VAR 0 8
48092: PPUSH
48093: LD_VAR 0 11
48097: PPUSH
48098: CALL_OW 74
48102: ST_TO_ADDR
48103: GO 48125
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48105: LD_ADDR_VAR 0 10
48109: PUSH
48110: LD_VAR 0 8
48114: PPUSH
48115: LD_VAR 0 1
48119: PPUSH
48120: CALL_OW 74
48124: ST_TO_ADDR
// if not enemy then
48125: LD_VAR 0 10
48129: NOT
48130: IFFALSE 48134
// exit ;
48132: GO 48535
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48134: LD_VAR 0 11
48138: PUSH
48139: LD_VAR 0 11
48143: PPUSH
48144: LD_VAR 0 10
48148: PPUSH
48149: CALL_OW 296
48153: PUSH
48154: LD_INT 13
48156: GREATER
48157: AND
48158: PUSH
48159: LD_VAR 0 1
48163: PPUSH
48164: LD_VAR 0 10
48168: PPUSH
48169: CALL_OW 296
48173: PUSH
48174: LD_INT 12
48176: GREATER
48177: OR
48178: IFFALSE 48182
// exit ;
48180: GO 48535
// missile := [ 1 ] ;
48182: LD_ADDR_VAR 0 14
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48193: LD_VAR 0 9
48197: PPUSH
48198: LD_VAR 0 12
48202: PPUSH
48203: CALL_OW 325
48207: IFFALSE 48236
// missile := Insert ( missile , missile + 1 , 2 ) ;
48209: LD_ADDR_VAR 0 14
48213: PUSH
48214: LD_VAR 0 14
48218: PPUSH
48219: LD_VAR 0 14
48223: PUSH
48224: LD_INT 1
48226: PLUS
48227: PPUSH
48228: LD_INT 2
48230: PPUSH
48231: CALL_OW 2
48235: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48236: LD_VAR 0 9
48240: PPUSH
48241: LD_VAR 0 13
48245: PPUSH
48246: CALL_OW 325
48250: PUSH
48251: LD_VAR 0 10
48255: PPUSH
48256: CALL_OW 255
48260: PPUSH
48261: LD_VAR 0 13
48265: PPUSH
48266: CALL_OW 325
48270: NOT
48271: AND
48272: IFFALSE 48301
// missile := Insert ( missile , missile + 1 , 3 ) ;
48274: LD_ADDR_VAR 0 14
48278: PUSH
48279: LD_VAR 0 14
48283: PPUSH
48284: LD_VAR 0 14
48288: PUSH
48289: LD_INT 1
48291: PLUS
48292: PPUSH
48293: LD_INT 3
48295: PPUSH
48296: CALL_OW 2
48300: ST_TO_ADDR
// if missile < 2 then
48301: LD_VAR 0 14
48305: PUSH
48306: LD_INT 2
48308: LESS
48309: IFFALSE 48313
// exit ;
48311: GO 48535
// x := GetX ( enemy ) ;
48313: LD_ADDR_VAR 0 4
48317: PUSH
48318: LD_VAR 0 10
48322: PPUSH
48323: CALL_OW 250
48327: ST_TO_ADDR
// y := GetY ( enemy ) ;
48328: LD_ADDR_VAR 0 5
48332: PUSH
48333: LD_VAR 0 10
48337: PPUSH
48338: CALL_OW 251
48342: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48343: LD_ADDR_VAR 0 6
48347: PUSH
48348: LD_VAR 0 4
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PPUSH
48357: LD_INT 1
48359: PPUSH
48360: CALL_OW 12
48364: PLUS
48365: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48366: LD_ADDR_VAR 0 7
48370: PUSH
48371: LD_VAR 0 5
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PPUSH
48380: LD_INT 1
48382: PPUSH
48383: CALL_OW 12
48387: PLUS
48388: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48389: LD_VAR 0 6
48393: PPUSH
48394: LD_VAR 0 7
48398: PPUSH
48399: CALL_OW 488
48403: NOT
48404: IFFALSE 48426
// begin _x := x ;
48406: LD_ADDR_VAR 0 6
48410: PUSH
48411: LD_VAR 0 4
48415: ST_TO_ADDR
// _y := y ;
48416: LD_ADDR_VAR 0 7
48420: PUSH
48421: LD_VAR 0 5
48425: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48426: LD_ADDR_VAR 0 3
48430: PUSH
48431: LD_INT 1
48433: PPUSH
48434: LD_VAR 0 14
48438: PPUSH
48439: CALL_OW 12
48443: ST_TO_ADDR
// case i of 1 :
48444: LD_VAR 0 3
48448: PUSH
48449: LD_INT 1
48451: DOUBLE
48452: EQUAL
48453: IFTRUE 48457
48455: GO 48474
48457: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48458: LD_VAR 0 1
48462: PPUSH
48463: LD_VAR 0 10
48467: PPUSH
48468: CALL_OW 115
48472: GO 48535
48474: LD_INT 2
48476: DOUBLE
48477: EQUAL
48478: IFTRUE 48482
48480: GO 48504
48482: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48483: LD_VAR 0 1
48487: PPUSH
48488: LD_VAR 0 6
48492: PPUSH
48493: LD_VAR 0 7
48497: PPUSH
48498: CALL_OW 153
48502: GO 48535
48504: LD_INT 3
48506: DOUBLE
48507: EQUAL
48508: IFTRUE 48512
48510: GO 48534
48512: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48513: LD_VAR 0 1
48517: PPUSH
48518: LD_VAR 0 6
48522: PPUSH
48523: LD_VAR 0 7
48527: PPUSH
48528: CALL_OW 154
48532: GO 48535
48534: POP
// end ;
48535: LD_VAR 0 2
48539: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48540: LD_INT 0
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
48547: PPUSH
// if not unit or not building then
48548: LD_VAR 0 1
48552: NOT
48553: PUSH
48554: LD_VAR 0 2
48558: NOT
48559: OR
48560: IFFALSE 48564
// exit ;
48562: GO 48722
// x := GetX ( building ) ;
48564: LD_ADDR_VAR 0 5
48568: PUSH
48569: LD_VAR 0 2
48573: PPUSH
48574: CALL_OW 250
48578: ST_TO_ADDR
// y := GetY ( building ) ;
48579: LD_ADDR_VAR 0 6
48583: PUSH
48584: LD_VAR 0 2
48588: PPUSH
48589: CALL_OW 251
48593: ST_TO_ADDR
// for i = 0 to 5 do
48594: LD_ADDR_VAR 0 4
48598: PUSH
48599: DOUBLE
48600: LD_INT 0
48602: DEC
48603: ST_TO_ADDR
48604: LD_INT 5
48606: PUSH
48607: FOR_TO
48608: IFFALSE 48720
// begin _x := ShiftX ( x , i , 3 ) ;
48610: LD_ADDR_VAR 0 7
48614: PUSH
48615: LD_VAR 0 5
48619: PPUSH
48620: LD_VAR 0 4
48624: PPUSH
48625: LD_INT 3
48627: PPUSH
48628: CALL_OW 272
48632: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48633: LD_ADDR_VAR 0 8
48637: PUSH
48638: LD_VAR 0 6
48642: PPUSH
48643: LD_VAR 0 4
48647: PPUSH
48648: LD_INT 3
48650: PPUSH
48651: CALL_OW 273
48655: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48656: LD_VAR 0 7
48660: PPUSH
48661: LD_VAR 0 8
48665: PPUSH
48666: CALL_OW 488
48670: NOT
48671: IFFALSE 48675
// continue ;
48673: GO 48607
// if HexInfo ( _x , _y ) = 0 then
48675: LD_VAR 0 7
48679: PPUSH
48680: LD_VAR 0 8
48684: PPUSH
48685: CALL_OW 428
48689: PUSH
48690: LD_INT 0
48692: EQUAL
48693: IFFALSE 48718
// begin ComMoveXY ( unit , _x , _y ) ;
48695: LD_VAR 0 1
48699: PPUSH
48700: LD_VAR 0 7
48704: PPUSH
48705: LD_VAR 0 8
48709: PPUSH
48710: CALL_OW 111
// exit ;
48714: POP
48715: POP
48716: GO 48722
// end ; end ;
48718: GO 48607
48720: POP
48721: POP
// end ;
48722: LD_VAR 0 3
48726: RET
// export function ScanBase ( side , base_area ) ; begin
48727: LD_INT 0
48729: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48730: LD_ADDR_VAR 0 3
48734: PUSH
48735: LD_VAR 0 2
48739: PPUSH
48740: LD_INT 81
48742: PUSH
48743: LD_VAR 0 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PPUSH
48752: CALL_OW 70
48756: ST_TO_ADDR
// end ;
48757: LD_VAR 0 3
48761: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
48762: LD_INT 0
48764: PPUSH
48765: PPUSH
48766: PPUSH
48767: PPUSH
48768: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
48769: LD_VAR 0 1
48773: NOT
48774: PUSH
48775: LD_EXP 50
48779: PUSH
48780: LD_VAR 0 1
48784: ARRAY
48785: NOT
48786: OR
48787: PUSH
48788: LD_VAR 0 2
48792: NOT
48793: OR
48794: PUSH
48795: LD_VAR 0 3
48799: NOT
48800: OR
48801: IFFALSE 48805
// exit ;
48803: GO 49318
// side := mc_sides [ base ] ;
48805: LD_ADDR_VAR 0 6
48809: PUSH
48810: LD_EXP 76
48814: PUSH
48815: LD_VAR 0 1
48819: ARRAY
48820: ST_TO_ADDR
// if not side then
48821: LD_VAR 0 6
48825: NOT
48826: IFFALSE 48830
// exit ;
48828: GO 49318
// for i in solds do
48830: LD_ADDR_VAR 0 7
48834: PUSH
48835: LD_VAR 0 2
48839: PUSH
48840: FOR_IN
48841: IFFALSE 48902
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
48843: LD_VAR 0 7
48847: PPUSH
48848: CALL_OW 310
48852: PPUSH
48853: CALL_OW 266
48857: PUSH
48858: LD_INT 32
48860: PUSH
48861: LD_INT 31
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: IN
48868: IFFALSE 48888
// solds := solds diff i else
48870: LD_ADDR_VAR 0 2
48874: PUSH
48875: LD_VAR 0 2
48879: PUSH
48880: LD_VAR 0 7
48884: DIFF
48885: ST_TO_ADDR
48886: GO 48900
// SetTag ( i , 18 ) ;
48888: LD_VAR 0 7
48892: PPUSH
48893: LD_INT 18
48895: PPUSH
48896: CALL_OW 109
48900: GO 48840
48902: POP
48903: POP
// if not solds then
48904: LD_VAR 0 2
48908: NOT
48909: IFFALSE 48913
// exit ;
48911: GO 49318
// repeat wait ( 0 0$1 ) ;
48913: LD_INT 35
48915: PPUSH
48916: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
48920: LD_ADDR_VAR 0 5
48924: PUSH
48925: LD_VAR 0 6
48929: PPUSH
48930: LD_VAR 0 3
48934: PPUSH
48935: CALL 48727 0 2
48939: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
48940: LD_EXP 50
48944: PUSH
48945: LD_VAR 0 1
48949: ARRAY
48950: NOT
48951: PUSH
48952: LD_EXP 50
48956: PUSH
48957: LD_VAR 0 1
48961: ARRAY
48962: PUSH
48963: EMPTY
48964: EQUAL
48965: OR
48966: IFFALSE 49003
// begin for i in solds do
48968: LD_ADDR_VAR 0 7
48972: PUSH
48973: LD_VAR 0 2
48977: PUSH
48978: FOR_IN
48979: IFFALSE 48992
// ComStop ( i ) ;
48981: LD_VAR 0 7
48985: PPUSH
48986: CALL_OW 141
48990: GO 48978
48992: POP
48993: POP
// solds := [ ] ;
48994: LD_ADDR_VAR 0 2
48998: PUSH
48999: EMPTY
49000: ST_TO_ADDR
// exit ;
49001: GO 49318
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
49003: LD_VAR 0 5
49007: NOT
49008: PUSH
49009: LD_VAR 0 5
49013: PUSH
49014: LD_INT 3
49016: GREATER
49017: OR
49018: PUSH
49019: LD_EXP 72
49023: PUSH
49024: LD_VAR 0 1
49028: ARRAY
49029: OR
49030: IFFALSE 49071
// begin for i in solds do
49032: LD_ADDR_VAR 0 7
49036: PUSH
49037: LD_VAR 0 2
49041: PUSH
49042: FOR_IN
49043: IFFALSE 49067
// if HasTask ( i ) then
49045: LD_VAR 0 7
49049: PPUSH
49050: CALL_OW 314
49054: IFFALSE 49065
// ComStop ( i ) ;
49056: LD_VAR 0 7
49060: PPUSH
49061: CALL_OW 141
49065: GO 49042
49067: POP
49068: POP
// break ;
49069: GO 49306
// end ; for i in solds do
49071: LD_ADDR_VAR 0 7
49075: PUSH
49076: LD_VAR 0 2
49080: PUSH
49081: FOR_IN
49082: IFFALSE 49298
// begin if IsInUnit ( i ) then
49084: LD_VAR 0 7
49088: PPUSH
49089: CALL_OW 310
49093: IFFALSE 49104
// ComExitBuilding ( i ) ;
49095: LD_VAR 0 7
49099: PPUSH
49100: CALL_OW 122
// if GetLives ( i ) > 333 then
49104: LD_VAR 0 7
49108: PPUSH
49109: CALL_OW 256
49113: PUSH
49114: LD_INT 333
49116: GREATER
49117: IFFALSE 49145
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49119: LD_VAR 0 7
49123: PPUSH
49124: LD_VAR 0 5
49128: PPUSH
49129: LD_VAR 0 7
49133: PPUSH
49134: CALL_OW 74
49138: PPUSH
49139: CALL_OW 115
49143: GO 49296
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
49145: LD_ADDR_VAR 0 8
49149: PUSH
49150: LD_EXP 50
49154: PUSH
49155: LD_VAR 0 1
49159: ARRAY
49160: PPUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 30
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 30
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 30
49186: PUSH
49187: LD_INT 6
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: PPUSH
49200: CALL_OW 72
49204: PPUSH
49205: LD_VAR 0 7
49209: PPUSH
49210: CALL_OW 74
49214: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
49215: LD_VAR 0 7
49219: PPUSH
49220: LD_VAR 0 8
49224: PPUSH
49225: CALL_OW 250
49229: PPUSH
49230: LD_INT 3
49232: PPUSH
49233: LD_INT 5
49235: PPUSH
49236: CALL_OW 272
49240: PPUSH
49241: LD_VAR 0 8
49245: PPUSH
49246: CALL_OW 251
49250: PPUSH
49251: LD_INT 3
49253: PPUSH
49254: LD_INT 5
49256: PPUSH
49257: CALL_OW 273
49261: PPUSH
49262: CALL_OW 111
// SetTag ( i , 0 ) ;
49266: LD_VAR 0 7
49270: PPUSH
49271: LD_INT 0
49273: PPUSH
49274: CALL_OW 109
// solds := solds diff i ;
49278: LD_ADDR_VAR 0 2
49282: PUSH
49283: LD_VAR 0 2
49287: PUSH
49288: LD_VAR 0 7
49292: DIFF
49293: ST_TO_ADDR
// continue ;
49294: GO 49081
// end ; end ;
49296: GO 49081
49298: POP
49299: POP
// until solds ;
49300: LD_VAR 0 2
49304: IFFALSE 48913
// MC_Reset ( base , 18 ) ;
49306: LD_VAR 0 1
49310: PPUSH
49311: LD_INT 18
49313: PPUSH
49314: CALL 21035 0 2
// end ;
49318: LD_VAR 0 4
49322: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
49323: LD_INT 0
49325: PPUSH
49326: PPUSH
49327: PPUSH
49328: PPUSH
49329: PPUSH
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
49334: PPUSH
49335: PPUSH
49336: PPUSH
49337: PPUSH
49338: PPUSH
49339: PPUSH
49340: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
49341: LD_ADDR_VAR 0 12
49345: PUSH
49346: LD_EXP 50
49350: PUSH
49351: LD_VAR 0 1
49355: ARRAY
49356: PPUSH
49357: LD_INT 25
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PPUSH
49367: CALL_OW 72
49371: ST_TO_ADDR
// if mc_remote_driver [ base ] then
49372: LD_EXP 90
49376: PUSH
49377: LD_VAR 0 1
49381: ARRAY
49382: IFFALSE 49406
// mechs := mechs diff mc_remote_driver [ base ] ;
49384: LD_ADDR_VAR 0 12
49388: PUSH
49389: LD_VAR 0 12
49393: PUSH
49394: LD_EXP 90
49398: PUSH
49399: LD_VAR 0 1
49403: ARRAY
49404: DIFF
49405: ST_TO_ADDR
// for i in mechs do
49406: LD_ADDR_VAR 0 5
49410: PUSH
49411: LD_VAR 0 12
49415: PUSH
49416: FOR_IN
49417: IFFALSE 49452
// if GetTag ( i ) > 0 then
49419: LD_VAR 0 5
49423: PPUSH
49424: CALL_OW 110
49428: PUSH
49429: LD_INT 0
49431: GREATER
49432: IFFALSE 49450
// mechs := mechs diff i ;
49434: LD_ADDR_VAR 0 12
49438: PUSH
49439: LD_VAR 0 12
49443: PUSH
49444: LD_VAR 0 5
49448: DIFF
49449: ST_TO_ADDR
49450: GO 49416
49452: POP
49453: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49454: LD_ADDR_VAR 0 8
49458: PUSH
49459: LD_EXP 50
49463: PUSH
49464: LD_VAR 0 1
49468: ARRAY
49469: PPUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 25
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 25
49485: PUSH
49486: LD_INT 5
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 25
49495: PUSH
49496: LD_INT 8
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 25
49505: PUSH
49506: LD_INT 9
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: PPUSH
49520: CALL_OW 72
49524: ST_TO_ADDR
// if not defenders and not solds then
49525: LD_VAR 0 2
49529: NOT
49530: PUSH
49531: LD_VAR 0 8
49535: NOT
49536: AND
49537: IFFALSE 49541
// exit ;
49539: GO 51079
// depot_under_attack := false ;
49541: LD_ADDR_VAR 0 16
49545: PUSH
49546: LD_INT 0
49548: ST_TO_ADDR
// sold_defenders := [ ] ;
49549: LD_ADDR_VAR 0 17
49553: PUSH
49554: EMPTY
49555: ST_TO_ADDR
// if mechs then
49556: LD_VAR 0 12
49560: IFFALSE 49689
// for i in defenders do
49562: LD_ADDR_VAR 0 5
49566: PUSH
49567: LD_VAR 0 2
49571: PUSH
49572: FOR_IN
49573: IFFALSE 49687
// begin SetTag ( i , 20 ) ;
49575: LD_VAR 0 5
49579: PPUSH
49580: LD_INT 20
49582: PPUSH
49583: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
49587: LD_VAR 0 5
49591: PPUSH
49592: CALL_OW 263
49596: PUSH
49597: LD_INT 1
49599: EQUAL
49600: PUSH
49601: LD_VAR 0 5
49605: PPUSH
49606: CALL_OW 311
49610: NOT
49611: AND
49612: PUSH
49613: LD_VAR 0 12
49617: AND
49618: IFFALSE 49685
// begin un := mechs [ 1 ] ;
49620: LD_ADDR_VAR 0 10
49624: PUSH
49625: LD_VAR 0 12
49629: PUSH
49630: LD_INT 1
49632: ARRAY
49633: ST_TO_ADDR
// ComExitBuilding ( un ) ;
49634: LD_VAR 0 10
49638: PPUSH
49639: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
49643: LD_VAR 0 10
49647: PPUSH
49648: LD_VAR 0 5
49652: PPUSH
49653: CALL_OW 180
// SetTag ( un , 19 ) ;
49657: LD_VAR 0 10
49661: PPUSH
49662: LD_INT 19
49664: PPUSH
49665: CALL_OW 109
// mechs := mechs diff un ;
49669: LD_ADDR_VAR 0 12
49673: PUSH
49674: LD_VAR 0 12
49678: PUSH
49679: LD_VAR 0 10
49683: DIFF
49684: ST_TO_ADDR
// end ; end ;
49685: GO 49572
49687: POP
49688: POP
// if solds then
49689: LD_VAR 0 8
49693: IFFALSE 49752
// for i in solds do
49695: LD_ADDR_VAR 0 5
49699: PUSH
49700: LD_VAR 0 8
49704: PUSH
49705: FOR_IN
49706: IFFALSE 49750
// if not GetTag ( i ) then
49708: LD_VAR 0 5
49712: PPUSH
49713: CALL_OW 110
49717: NOT
49718: IFFALSE 49748
// begin defenders := defenders union i ;
49720: LD_ADDR_VAR 0 2
49724: PUSH
49725: LD_VAR 0 2
49729: PUSH
49730: LD_VAR 0 5
49734: UNION
49735: ST_TO_ADDR
// SetTag ( i , 18 ) ;
49736: LD_VAR 0 5
49740: PPUSH
49741: LD_INT 18
49743: PPUSH
49744: CALL_OW 109
// end ;
49748: GO 49705
49750: POP
49751: POP
// repeat wait ( 0 0$1 ) ;
49752: LD_INT 35
49754: PPUSH
49755: CALL_OW 67
// enemy := mc_scan [ base ] ;
49759: LD_ADDR_VAR 0 3
49763: PUSH
49764: LD_EXP 73
49768: PUSH
49769: LD_VAR 0 1
49773: ARRAY
49774: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
49775: LD_EXP 50
49779: PUSH
49780: LD_VAR 0 1
49784: ARRAY
49785: NOT
49786: PUSH
49787: LD_EXP 50
49791: PUSH
49792: LD_VAR 0 1
49796: ARRAY
49797: PUSH
49798: EMPTY
49799: EQUAL
49800: OR
49801: IFFALSE 49838
// begin for i in defenders do
49803: LD_ADDR_VAR 0 5
49807: PUSH
49808: LD_VAR 0 2
49812: PUSH
49813: FOR_IN
49814: IFFALSE 49827
// ComStop ( i ) ;
49816: LD_VAR 0 5
49820: PPUSH
49821: CALL_OW 141
49825: GO 49813
49827: POP
49828: POP
// defenders := [ ] ;
49829: LD_ADDR_VAR 0 2
49833: PUSH
49834: EMPTY
49835: ST_TO_ADDR
// exit ;
49836: GO 51079
// end ; for i in defenders do
49838: LD_ADDR_VAR 0 5
49842: PUSH
49843: LD_VAR 0 2
49847: PUSH
49848: FOR_IN
49849: IFFALSE 50579
// begin e := NearestUnitToUnit ( enemy , i ) ;
49851: LD_ADDR_VAR 0 13
49855: PUSH
49856: LD_VAR 0 3
49860: PPUSH
49861: LD_VAR 0 5
49865: PPUSH
49866: CALL_OW 74
49870: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
49871: LD_ADDR_VAR 0 16
49875: PUSH
49876: LD_EXP 50
49880: PUSH
49881: LD_VAR 0 1
49885: ARRAY
49886: PPUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 30
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 30
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: PPUSH
49915: CALL_OW 72
49919: NOT
49920: PUSH
49921: LD_EXP 50
49925: PUSH
49926: LD_VAR 0 1
49930: ARRAY
49931: PPUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 30
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 30
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: PPUSH
49960: CALL_OW 72
49964: PPUSH
49965: CALL_OW 256
49969: PUSH
49970: LD_INT 600
49972: LESS
49973: OR
49974: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
49975: LD_VAR 0 5
49979: PPUSH
49980: CALL_OW 247
49984: PUSH
49985: LD_INT 2
49987: DOUBLE
49988: EQUAL
49989: IFTRUE 49993
49991: GO 50285
49993: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
49994: LD_VAR 0 5
49998: PPUSH
49999: CALL_OW 256
50003: PUSH
50004: LD_INT 650
50006: GREATER
50007: PUSH
50008: LD_VAR 0 5
50012: PPUSH
50013: LD_VAR 0 13
50017: PPUSH
50018: CALL_OW 296
50022: PUSH
50023: LD_INT 40
50025: LESS
50026: PUSH
50027: LD_VAR 0 13
50031: PPUSH
50032: LD_EXP 75
50036: PUSH
50037: LD_VAR 0 1
50041: ARRAY
50042: PPUSH
50043: CALL_OW 308
50047: OR
50048: AND
50049: IFFALSE 50067
// ComAttackUnit ( i , e ) else
50051: LD_VAR 0 5
50055: PPUSH
50056: LD_VAR 0 13
50060: PPUSH
50061: CALL_OW 115
50065: GO 50168
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
50067: LD_VAR 0 13
50071: PPUSH
50072: LD_EXP 75
50076: PUSH
50077: LD_VAR 0 1
50081: ARRAY
50082: PPUSH
50083: CALL_OW 308
50087: NOT
50088: PUSH
50089: LD_VAR 0 5
50093: PPUSH
50094: LD_VAR 0 13
50098: PPUSH
50099: CALL_OW 296
50103: PUSH
50104: LD_INT 40
50106: GREATEREQUAL
50107: AND
50108: PUSH
50109: LD_VAR 0 5
50113: PPUSH
50114: CALL_OW 256
50118: PUSH
50119: LD_INT 650
50121: LESSEQUAL
50122: OR
50123: PUSH
50124: LD_VAR 0 5
50128: PPUSH
50129: LD_EXP 74
50133: PUSH
50134: LD_VAR 0 1
50138: ARRAY
50139: PPUSH
50140: CALL_OW 308
50144: NOT
50145: AND
50146: IFFALSE 50168
// ComMoveToArea ( i , mc_parking [ base ] ) ;
50148: LD_VAR 0 5
50152: PPUSH
50153: LD_EXP 74
50157: PUSH
50158: LD_VAR 0 1
50162: ARRAY
50163: PPUSH
50164: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
50168: LD_VAR 0 5
50172: PPUSH
50173: CALL_OW 256
50177: PUSH
50178: LD_INT 998
50180: LESS
50181: PUSH
50182: LD_VAR 0 5
50186: PPUSH
50187: CALL_OW 263
50191: PUSH
50192: LD_INT 1
50194: EQUAL
50195: AND
50196: PUSH
50197: LD_VAR 0 5
50201: PPUSH
50202: CALL_OW 311
50206: AND
50207: PUSH
50208: LD_VAR 0 5
50212: PPUSH
50213: LD_EXP 74
50217: PUSH
50218: LD_VAR 0 1
50222: ARRAY
50223: PPUSH
50224: CALL_OW 308
50228: AND
50229: IFFALSE 50283
// begin mech := IsDrivenBy ( i ) ;
50231: LD_ADDR_VAR 0 9
50235: PUSH
50236: LD_VAR 0 5
50240: PPUSH
50241: CALL_OW 311
50245: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
50246: LD_VAR 0 9
50250: PPUSH
50251: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
50255: LD_VAR 0 9
50259: PPUSH
50260: LD_VAR 0 5
50264: PPUSH
50265: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
50269: LD_VAR 0 9
50273: PPUSH
50274: LD_VAR 0 5
50278: PPUSH
50279: CALL_OW 180
// end ; end ; unit_human :
50283: GO 50550
50285: LD_INT 1
50287: DOUBLE
50288: EQUAL
50289: IFTRUE 50293
50291: GO 50549
50293: POP
// begin b := IsInUnit ( i ) ;
50294: LD_ADDR_VAR 0 18
50298: PUSH
50299: LD_VAR 0 5
50303: PPUSH
50304: CALL_OW 310
50308: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
50309: LD_ADDR_VAR 0 19
50313: PUSH
50314: LD_VAR 0 18
50318: NOT
50319: PUSH
50320: LD_VAR 0 18
50324: PPUSH
50325: CALL_OW 266
50329: PUSH
50330: LD_INT 32
50332: PUSH
50333: LD_INT 31
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: IN
50340: OR
50341: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
50342: LD_VAR 0 16
50346: PUSH
50347: LD_VAR 0 2
50351: PPUSH
50352: LD_INT 21
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PPUSH
50362: CALL_OW 72
50366: PUSH
50367: LD_INT 1
50369: LESSEQUAL
50370: OR
50371: PUSH
50372: LD_VAR 0 19
50376: AND
50377: PUSH
50378: LD_VAR 0 5
50382: PUSH
50383: LD_VAR 0 17
50387: IN
50388: NOT
50389: AND
50390: IFFALSE 50483
// begin if b then
50392: LD_VAR 0 18
50396: IFFALSE 50445
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
50398: LD_VAR 0 18
50402: PPUSH
50403: LD_VAR 0 3
50407: PPUSH
50408: LD_VAR 0 18
50412: PPUSH
50413: CALL_OW 74
50417: PPUSH
50418: CALL_OW 296
50422: PUSH
50423: LD_INT 10
50425: LESS
50426: PUSH
50427: LD_VAR 0 18
50431: PPUSH
50432: CALL_OW 461
50436: PUSH
50437: LD_INT 7
50439: NONEQUAL
50440: AND
50441: IFFALSE 50445
// continue ;
50443: GO 49848
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
50445: LD_ADDR_VAR 0 17
50449: PUSH
50450: LD_VAR 0 17
50454: PPUSH
50455: LD_VAR 0 17
50459: PUSH
50460: LD_INT 1
50462: PLUS
50463: PPUSH
50464: LD_VAR 0 5
50468: PPUSH
50469: CALL_OW 1
50473: ST_TO_ADDR
// ComExitBuilding ( i ) ;
50474: LD_VAR 0 5
50478: PPUSH
50479: CALL_OW 122
// end ; if sold_defenders then
50483: LD_VAR 0 17
50487: IFFALSE 50547
// if i in sold_defenders then
50489: LD_VAR 0 5
50493: PUSH
50494: LD_VAR 0 17
50498: IN
50499: IFFALSE 50547
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
50501: LD_VAR 0 5
50505: PPUSH
50506: CALL_OW 314
50510: NOT
50511: PUSH
50512: LD_VAR 0 5
50516: PPUSH
50517: LD_VAR 0 13
50521: PPUSH
50522: CALL_OW 296
50526: PUSH
50527: LD_INT 30
50529: LESS
50530: AND
50531: IFFALSE 50547
// ComAttackUnit ( i , e ) ;
50533: LD_VAR 0 5
50537: PPUSH
50538: LD_VAR 0 13
50542: PPUSH
50543: CALL_OW 115
// end ; end ; end ;
50547: GO 50550
50549: POP
// if IsDead ( i ) then
50550: LD_VAR 0 5
50554: PPUSH
50555: CALL_OW 301
50559: IFFALSE 50577
// defenders := defenders diff i ;
50561: LD_ADDR_VAR 0 2
50565: PUSH
50566: LD_VAR 0 2
50570: PUSH
50571: LD_VAR 0 5
50575: DIFF
50576: ST_TO_ADDR
// end ;
50577: GO 49848
50579: POP
50580: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
50581: LD_VAR 0 3
50585: NOT
50586: PUSH
50587: LD_VAR 0 2
50591: NOT
50592: OR
50593: PUSH
50594: LD_EXP 50
50598: PUSH
50599: LD_VAR 0 1
50603: ARRAY
50604: NOT
50605: OR
50606: IFFALSE 49752
// MC_Reset ( base , 18 ) ;
50608: LD_VAR 0 1
50612: PPUSH
50613: LD_INT 18
50615: PPUSH
50616: CALL 21035 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
50620: LD_ADDR_VAR 0 2
50624: PUSH
50625: LD_VAR 0 2
50629: PUSH
50630: LD_VAR 0 2
50634: PPUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 25
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 25
50650: PUSH
50651: LD_INT 5
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 25
50660: PUSH
50661: LD_INT 8
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 25
50670: PUSH
50671: LD_INT 9
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: PPUSH
50685: CALL_OW 72
50689: DIFF
50690: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
50691: LD_VAR 0 3
50695: NOT
50696: PUSH
50697: LD_VAR 0 2
50701: PPUSH
50702: LD_INT 21
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PPUSH
50712: CALL_OW 72
50716: AND
50717: IFFALSE 51055
// begin tmp := FilterByTag ( defenders , 19 ) ;
50719: LD_ADDR_VAR 0 11
50723: PUSH
50724: LD_VAR 0 2
50728: PPUSH
50729: LD_INT 19
50731: PPUSH
50732: CALL 87508 0 2
50736: ST_TO_ADDR
// if tmp then
50737: LD_VAR 0 11
50741: IFFALSE 50811
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
50743: LD_ADDR_VAR 0 11
50747: PUSH
50748: LD_VAR 0 11
50752: PPUSH
50753: LD_INT 25
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PPUSH
50763: CALL_OW 72
50767: ST_TO_ADDR
// if tmp then
50768: LD_VAR 0 11
50772: IFFALSE 50811
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
50774: LD_ADDR_EXP 62
50778: PUSH
50779: LD_EXP 62
50783: PPUSH
50784: LD_VAR 0 1
50788: PPUSH
50789: LD_EXP 62
50793: PUSH
50794: LD_VAR 0 1
50798: ARRAY
50799: PUSH
50800: LD_VAR 0 11
50804: UNION
50805: PPUSH
50806: CALL_OW 1
50810: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
50811: LD_VAR 0 1
50815: PPUSH
50816: LD_INT 19
50818: PPUSH
50819: CALL 21035 0 2
// repeat wait ( 0 0$1 ) ;
50823: LD_INT 35
50825: PPUSH
50826: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
50830: LD_EXP 50
50834: PUSH
50835: LD_VAR 0 1
50839: ARRAY
50840: NOT
50841: PUSH
50842: LD_EXP 50
50846: PUSH
50847: LD_VAR 0 1
50851: ARRAY
50852: PUSH
50853: EMPTY
50854: EQUAL
50855: OR
50856: IFFALSE 50893
// begin for i in defenders do
50858: LD_ADDR_VAR 0 5
50862: PUSH
50863: LD_VAR 0 2
50867: PUSH
50868: FOR_IN
50869: IFFALSE 50882
// ComStop ( i ) ;
50871: LD_VAR 0 5
50875: PPUSH
50876: CALL_OW 141
50880: GO 50868
50882: POP
50883: POP
// defenders := [ ] ;
50884: LD_ADDR_VAR 0 2
50888: PUSH
50889: EMPTY
50890: ST_TO_ADDR
// exit ;
50891: GO 51079
// end ; for i in defenders do
50893: LD_ADDR_VAR 0 5
50897: PUSH
50898: LD_VAR 0 2
50902: PUSH
50903: FOR_IN
50904: IFFALSE 50993
// begin if not IsInArea ( i , mc_parking [ base ] ) then
50906: LD_VAR 0 5
50910: PPUSH
50911: LD_EXP 74
50915: PUSH
50916: LD_VAR 0 1
50920: ARRAY
50921: PPUSH
50922: CALL_OW 308
50926: NOT
50927: IFFALSE 50951
// ComMoveToArea ( i , mc_parking [ base ] ) else
50929: LD_VAR 0 5
50933: PPUSH
50934: LD_EXP 74
50938: PUSH
50939: LD_VAR 0 1
50943: ARRAY
50944: PPUSH
50945: CALL_OW 113
50949: GO 50991
// if GetControl ( i ) = control_manual then
50951: LD_VAR 0 5
50955: PPUSH
50956: CALL_OW 263
50960: PUSH
50961: LD_INT 1
50963: EQUAL
50964: IFFALSE 50991
// if IsDrivenBy ( i ) then
50966: LD_VAR 0 5
50970: PPUSH
50971: CALL_OW 311
50975: IFFALSE 50991
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
50977: LD_VAR 0 5
50981: PPUSH
50982: CALL_OW 311
50986: PPUSH
50987: CALL_OW 121
// end ;
50991: GO 50903
50993: POP
50994: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
50995: LD_VAR 0 2
50999: PPUSH
51000: LD_INT 95
51002: PUSH
51003: LD_EXP 74
51007: PUSH
51008: LD_VAR 0 1
51012: ARRAY
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PPUSH
51018: CALL_OW 72
51022: PUSH
51023: LD_VAR 0 2
51027: EQUAL
51028: PUSH
51029: LD_EXP 73
51033: PUSH
51034: LD_VAR 0 1
51038: ARRAY
51039: OR
51040: PUSH
51041: LD_EXP 50
51045: PUSH
51046: LD_VAR 0 1
51050: ARRAY
51051: NOT
51052: OR
51053: IFFALSE 50823
// end ; MC_Reset ( base , 19 ) ;
51055: LD_VAR 0 1
51059: PPUSH
51060: LD_INT 19
51062: PPUSH
51063: CALL 21035 0 2
// MC_Reset ( base , 20 ) ;
51067: LD_VAR 0 1
51071: PPUSH
51072: LD_INT 20
51074: PPUSH
51075: CALL 21035 0 2
// end ;
51079: LD_VAR 0 4
51083: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51084: LD_INT 0
51086: PPUSH
51087: PPUSH
51088: PPUSH
51089: PPUSH
// result := false ;
51090: LD_ADDR_VAR 0 2
51094: PUSH
51095: LD_INT 0
51097: ST_TO_ADDR
// side := GetSide ( unit ) ;
51098: LD_ADDR_VAR 0 3
51102: PUSH
51103: LD_VAR 0 1
51107: PPUSH
51108: CALL_OW 255
51112: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51113: LD_ADDR_VAR 0 4
51117: PUSH
51118: LD_VAR 0 1
51122: PPUSH
51123: CALL_OW 248
51127: ST_TO_ADDR
// case nat of 1 :
51128: LD_VAR 0 4
51132: PUSH
51133: LD_INT 1
51135: DOUBLE
51136: EQUAL
51137: IFTRUE 51141
51139: GO 51152
51141: POP
// tech := tech_lassight ; 2 :
51142: LD_ADDR_VAR 0 5
51146: PUSH
51147: LD_INT 12
51149: ST_TO_ADDR
51150: GO 51191
51152: LD_INT 2
51154: DOUBLE
51155: EQUAL
51156: IFTRUE 51160
51158: GO 51171
51160: POP
// tech := tech_mortar ; 3 :
51161: LD_ADDR_VAR 0 5
51165: PUSH
51166: LD_INT 41
51168: ST_TO_ADDR
51169: GO 51191
51171: LD_INT 3
51173: DOUBLE
51174: EQUAL
51175: IFTRUE 51179
51177: GO 51190
51179: POP
// tech := tech_bazooka ; end ;
51180: LD_ADDR_VAR 0 5
51184: PUSH
51185: LD_INT 44
51187: ST_TO_ADDR
51188: GO 51191
51190: POP
// if Researched ( side , tech ) then
51191: LD_VAR 0 3
51195: PPUSH
51196: LD_VAR 0 5
51200: PPUSH
51201: CALL_OW 325
51205: IFFALSE 51232
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51207: LD_ADDR_VAR 0 2
51211: PUSH
51212: LD_INT 5
51214: PUSH
51215: LD_INT 8
51217: PUSH
51218: LD_INT 9
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: PUSH
51226: LD_VAR 0 4
51230: ARRAY
51231: ST_TO_ADDR
// end ;
51232: LD_VAR 0 2
51236: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51237: LD_INT 0
51239: PPUSH
51240: PPUSH
51241: PPUSH
// if not mines then
51242: LD_VAR 0 2
51246: NOT
51247: IFFALSE 51251
// exit ;
51249: GO 51395
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51251: LD_ADDR_VAR 0 5
51255: PUSH
51256: LD_INT 81
51258: PUSH
51259: LD_VAR 0 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: LD_INT 21
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PPUSH
51289: CALL_OW 69
51293: ST_TO_ADDR
// for i in mines do
51294: LD_ADDR_VAR 0 4
51298: PUSH
51299: LD_VAR 0 2
51303: PUSH
51304: FOR_IN
51305: IFFALSE 51393
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
51307: LD_VAR 0 4
51311: PUSH
51312: LD_INT 1
51314: ARRAY
51315: PPUSH
51316: LD_VAR 0 4
51320: PUSH
51321: LD_INT 2
51323: ARRAY
51324: PPUSH
51325: CALL_OW 458
51329: NOT
51330: IFFALSE 51334
// continue ;
51332: GO 51304
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
51334: LD_VAR 0 4
51338: PUSH
51339: LD_INT 1
51341: ARRAY
51342: PPUSH
51343: LD_VAR 0 4
51347: PUSH
51348: LD_INT 2
51350: ARRAY
51351: PPUSH
51352: CALL_OW 428
51356: PUSH
51357: LD_VAR 0 5
51361: IN
51362: IFFALSE 51391
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
51364: LD_VAR 0 4
51368: PUSH
51369: LD_INT 1
51371: ARRAY
51372: PPUSH
51373: LD_VAR 0 4
51377: PUSH
51378: LD_INT 2
51380: ARRAY
51381: PPUSH
51382: LD_VAR 0 1
51386: PPUSH
51387: CALL_OW 456
// end ;
51391: GO 51304
51393: POP
51394: POP
// end ;
51395: LD_VAR 0 3
51399: RET
// export function Count ( array ) ; var i ; begin
51400: LD_INT 0
51402: PPUSH
51403: PPUSH
// result := 0 ;
51404: LD_ADDR_VAR 0 2
51408: PUSH
51409: LD_INT 0
51411: ST_TO_ADDR
// for i in array do
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_VAR 0 1
51421: PUSH
51422: FOR_IN
51423: IFFALSE 51447
// if i then
51425: LD_VAR 0 3
51429: IFFALSE 51445
// result := result + 1 ;
51431: LD_ADDR_VAR 0 2
51435: PUSH
51436: LD_VAR 0 2
51440: PUSH
51441: LD_INT 1
51443: PLUS
51444: ST_TO_ADDR
51445: GO 51422
51447: POP
51448: POP
// end ;
51449: LD_VAR 0 2
51453: RET
// export function IsEmpty ( building ) ; begin
51454: LD_INT 0
51456: PPUSH
// if not building then
51457: LD_VAR 0 1
51461: NOT
51462: IFFALSE 51466
// exit ;
51464: GO 51509
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
51466: LD_ADDR_VAR 0 2
51470: PUSH
51471: LD_VAR 0 1
51475: PUSH
51476: LD_INT 22
51478: PUSH
51479: LD_VAR 0 1
51483: PPUSH
51484: CALL_OW 255
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 58
51495: PUSH
51496: EMPTY
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PPUSH
51503: CALL_OW 69
51507: IN
51508: ST_TO_ADDR
// end ;
51509: LD_VAR 0 2
51513: RET
// export function IsNotFull ( building ) ; begin
51514: LD_INT 0
51516: PPUSH
// if not building then
51517: LD_VAR 0 1
51521: NOT
51522: IFFALSE 51526
// exit ;
51524: GO 51545
// result := UnitsInside ( building ) < 6 ;
51526: LD_ADDR_VAR 0 2
51530: PUSH
51531: LD_VAR 0 1
51535: PPUSH
51536: CALL_OW 313
51540: PUSH
51541: LD_INT 6
51543: LESS
51544: ST_TO_ADDR
// end ;
51545: LD_VAR 0 2
51549: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
51550: LD_INT 0
51552: PPUSH
51553: PPUSH
51554: PPUSH
51555: PPUSH
// tmp := [ ] ;
51556: LD_ADDR_VAR 0 3
51560: PUSH
51561: EMPTY
51562: ST_TO_ADDR
// list := [ ] ;
51563: LD_ADDR_VAR 0 5
51567: PUSH
51568: EMPTY
51569: ST_TO_ADDR
// for i = 16 to 25 do
51570: LD_ADDR_VAR 0 4
51574: PUSH
51575: DOUBLE
51576: LD_INT 16
51578: DEC
51579: ST_TO_ADDR
51580: LD_INT 25
51582: PUSH
51583: FOR_TO
51584: IFFALSE 51657
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
51586: LD_ADDR_VAR 0 3
51590: PUSH
51591: LD_VAR 0 3
51595: PUSH
51596: LD_INT 22
51598: PUSH
51599: LD_VAR 0 1
51603: PPUSH
51604: CALL_OW 255
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 91
51615: PUSH
51616: LD_VAR 0 1
51620: PUSH
51621: LD_INT 6
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 30
51631: PUSH
51632: LD_VAR 0 4
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: PPUSH
51649: CALL_OW 69
51653: ADD
51654: ST_TO_ADDR
51655: GO 51583
51657: POP
51658: POP
// for i = 1 to tmp do
51659: LD_ADDR_VAR 0 4
51663: PUSH
51664: DOUBLE
51665: LD_INT 1
51667: DEC
51668: ST_TO_ADDR
51669: LD_VAR 0 3
51673: PUSH
51674: FOR_TO
51675: IFFALSE 51763
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
51677: LD_ADDR_VAR 0 5
51681: PUSH
51682: LD_VAR 0 5
51686: PUSH
51687: LD_VAR 0 3
51691: PUSH
51692: LD_VAR 0 4
51696: ARRAY
51697: PPUSH
51698: CALL_OW 266
51702: PUSH
51703: LD_VAR 0 3
51707: PUSH
51708: LD_VAR 0 4
51712: ARRAY
51713: PPUSH
51714: CALL_OW 250
51718: PUSH
51719: LD_VAR 0 3
51723: PUSH
51724: LD_VAR 0 4
51728: ARRAY
51729: PPUSH
51730: CALL_OW 251
51734: PUSH
51735: LD_VAR 0 3
51739: PUSH
51740: LD_VAR 0 4
51744: ARRAY
51745: PPUSH
51746: CALL_OW 254
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: ADD
51760: ST_TO_ADDR
51761: GO 51674
51763: POP
51764: POP
// result := list ;
51765: LD_ADDR_VAR 0 2
51769: PUSH
51770: LD_VAR 0 5
51774: ST_TO_ADDR
// end ;
51775: LD_VAR 0 2
51779: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
51780: LD_INT 0
51782: PPUSH
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
// if not factory then
51789: LD_VAR 0 1
51793: NOT
51794: IFFALSE 51798
// exit ;
51796: GO 52391
// if control = control_apeman then
51798: LD_VAR 0 4
51802: PUSH
51803: LD_INT 5
51805: EQUAL
51806: IFFALSE 51915
// begin tmp := UnitsInside ( factory ) ;
51808: LD_ADDR_VAR 0 8
51812: PUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: CALL_OW 313
51822: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
51823: LD_VAR 0 8
51827: PPUSH
51828: LD_INT 25
51830: PUSH
51831: LD_INT 12
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PPUSH
51838: CALL_OW 72
51842: NOT
51843: IFFALSE 51853
// control := control_manual ;
51845: LD_ADDR_VAR 0 4
51849: PUSH
51850: LD_INT 1
51852: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
51853: LD_ADDR_VAR 0 8
51857: PUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL 51550 0 1
51867: ST_TO_ADDR
// if tmp then
51868: LD_VAR 0 8
51872: IFFALSE 51915
// begin for i in tmp do
51874: LD_ADDR_VAR 0 7
51878: PUSH
51879: LD_VAR 0 8
51883: PUSH
51884: FOR_IN
51885: IFFALSE 51913
// if i [ 1 ] = b_ext_radio then
51887: LD_VAR 0 7
51891: PUSH
51892: LD_INT 1
51894: ARRAY
51895: PUSH
51896: LD_INT 22
51898: EQUAL
51899: IFFALSE 51911
// begin control := control_remote ;
51901: LD_ADDR_VAR 0 4
51905: PUSH
51906: LD_INT 2
51908: ST_TO_ADDR
// break ;
51909: GO 51913
// end ;
51911: GO 51884
51913: POP
51914: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51915: LD_VAR 0 1
51919: PPUSH
51920: LD_VAR 0 2
51924: PPUSH
51925: LD_VAR 0 3
51929: PPUSH
51930: LD_VAR 0 4
51934: PPUSH
51935: LD_VAR 0 5
51939: PPUSH
51940: CALL_OW 448
51944: IFFALSE 51979
// begin result := [ chassis , engine , control , weapon ] ;
51946: LD_ADDR_VAR 0 6
51950: PUSH
51951: LD_VAR 0 2
51955: PUSH
51956: LD_VAR 0 3
51960: PUSH
51961: LD_VAR 0 4
51965: PUSH
51966: LD_VAR 0 5
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: ST_TO_ADDR
// exit ;
51977: GO 52391
// end ; _chassis := AvailableChassisList ( factory ) ;
51979: LD_ADDR_VAR 0 9
51983: PUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 475
51993: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
51994: LD_ADDR_VAR 0 11
51998: PUSH
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 476
52008: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52009: LD_ADDR_VAR 0 12
52013: PUSH
52014: LD_VAR 0 1
52018: PPUSH
52019: CALL_OW 477
52023: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52024: LD_ADDR_VAR 0 10
52028: PUSH
52029: LD_VAR 0 1
52033: PPUSH
52034: CALL_OW 478
52038: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52039: LD_VAR 0 9
52043: NOT
52044: PUSH
52045: LD_VAR 0 11
52049: NOT
52050: OR
52051: PUSH
52052: LD_VAR 0 12
52056: NOT
52057: OR
52058: PUSH
52059: LD_VAR 0 10
52063: NOT
52064: OR
52065: IFFALSE 52100
// begin result := [ chassis , engine , control , weapon ] ;
52067: LD_ADDR_VAR 0 6
52071: PUSH
52072: LD_VAR 0 2
52076: PUSH
52077: LD_VAR 0 3
52081: PUSH
52082: LD_VAR 0 4
52086: PUSH
52087: LD_VAR 0 5
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// exit ;
52098: GO 52391
// end ; if not chassis in _chassis then
52100: LD_VAR 0 2
52104: PUSH
52105: LD_VAR 0 9
52109: IN
52110: NOT
52111: IFFALSE 52137
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
52113: LD_ADDR_VAR 0 2
52117: PUSH
52118: LD_VAR 0 9
52122: PUSH
52123: LD_INT 1
52125: PPUSH
52126: LD_VAR 0 9
52130: PPUSH
52131: CALL_OW 12
52135: ARRAY
52136: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
52137: LD_VAR 0 2
52141: PPUSH
52142: LD_VAR 0 3
52146: PPUSH
52147: CALL 52396 0 2
52151: NOT
52152: IFFALSE 52211
// repeat engine := _engine [ 1 ] ;
52154: LD_ADDR_VAR 0 3
52158: PUSH
52159: LD_VAR 0 11
52163: PUSH
52164: LD_INT 1
52166: ARRAY
52167: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
52168: LD_ADDR_VAR 0 11
52172: PUSH
52173: LD_VAR 0 11
52177: PPUSH
52178: LD_INT 1
52180: PPUSH
52181: CALL_OW 3
52185: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
52186: LD_VAR 0 2
52190: PPUSH
52191: LD_VAR 0 3
52195: PPUSH
52196: CALL 52396 0 2
52200: PUSH
52201: LD_VAR 0 11
52205: PUSH
52206: EMPTY
52207: EQUAL
52208: OR
52209: IFFALSE 52154
// if not control in _control then
52211: LD_VAR 0 4
52215: PUSH
52216: LD_VAR 0 12
52220: IN
52221: NOT
52222: IFFALSE 52248
// control := _control [ rand ( 1 , _control ) ] ;
52224: LD_ADDR_VAR 0 4
52228: PUSH
52229: LD_VAR 0 12
52233: PUSH
52234: LD_INT 1
52236: PPUSH
52237: LD_VAR 0 12
52241: PPUSH
52242: CALL_OW 12
52246: ARRAY
52247: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
52248: LD_VAR 0 2
52252: PPUSH
52253: LD_VAR 0 5
52257: PPUSH
52258: CALL 52616 0 2
52262: NOT
52263: IFFALSE 52322
// repeat weapon := _weapon [ 1 ] ;
52265: LD_ADDR_VAR 0 5
52269: PUSH
52270: LD_VAR 0 10
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
52279: LD_ADDR_VAR 0 10
52283: PUSH
52284: LD_VAR 0 10
52288: PPUSH
52289: LD_INT 1
52291: PPUSH
52292: CALL_OW 3
52296: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
52297: LD_VAR 0 2
52301: PPUSH
52302: LD_VAR 0 5
52306: PPUSH
52307: CALL 52616 0 2
52311: PUSH
52312: LD_VAR 0 10
52316: PUSH
52317: EMPTY
52318: EQUAL
52319: OR
52320: IFFALSE 52265
// result := [ ] ;
52322: LD_ADDR_VAR 0 6
52326: PUSH
52327: EMPTY
52328: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52329: LD_VAR 0 1
52333: PPUSH
52334: LD_VAR 0 2
52338: PPUSH
52339: LD_VAR 0 3
52343: PPUSH
52344: LD_VAR 0 4
52348: PPUSH
52349: LD_VAR 0 5
52353: PPUSH
52354: CALL_OW 448
52358: IFFALSE 52391
// result := [ chassis , engine , control , weapon ] ;
52360: LD_ADDR_VAR 0 6
52364: PUSH
52365: LD_VAR 0 2
52369: PUSH
52370: LD_VAR 0 3
52374: PUSH
52375: LD_VAR 0 4
52379: PUSH
52380: LD_VAR 0 5
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// end ;
52391: LD_VAR 0 6
52395: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
52396: LD_INT 0
52398: PPUSH
// if not chassis or not engine then
52399: LD_VAR 0 1
52403: NOT
52404: PUSH
52405: LD_VAR 0 2
52409: NOT
52410: OR
52411: IFFALSE 52415
// exit ;
52413: GO 52611
// case engine of engine_solar :
52415: LD_VAR 0 2
52419: PUSH
52420: LD_INT 2
52422: DOUBLE
52423: EQUAL
52424: IFTRUE 52428
52426: GO 52466
52428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
52429: LD_ADDR_VAR 0 3
52433: PUSH
52434: LD_INT 11
52436: PUSH
52437: LD_INT 12
52439: PUSH
52440: LD_INT 13
52442: PUSH
52443: LD_INT 14
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: ST_TO_ADDR
52464: GO 52595
52466: LD_INT 1
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52536
52474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
52475: LD_ADDR_VAR 0 3
52479: PUSH
52480: LD_INT 11
52482: PUSH
52483: LD_INT 12
52485: PUSH
52486: LD_INT 13
52488: PUSH
52489: LD_INT 14
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: LD_INT 4
52503: PUSH
52504: LD_INT 5
52506: PUSH
52507: LD_INT 21
52509: PUSH
52510: LD_INT 23
52512: PUSH
52513: LD_INT 22
52515: PUSH
52516: LD_INT 24
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
52534: GO 52595
52536: LD_INT 3
52538: DOUBLE
52539: EQUAL
52540: IFTRUE 52544
52542: GO 52594
52544: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52545: LD_ADDR_VAR 0 3
52549: PUSH
52550: LD_INT 13
52552: PUSH
52553: LD_INT 14
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: LD_INT 5
52567: PUSH
52568: LD_INT 21
52570: PUSH
52571: LD_INT 22
52573: PUSH
52574: LD_INT 23
52576: PUSH
52577: LD_INT 24
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
52592: GO 52595
52594: POP
// result := ( chassis in result ) ;
52595: LD_ADDR_VAR 0 3
52599: PUSH
52600: LD_VAR 0 1
52604: PUSH
52605: LD_VAR 0 3
52609: IN
52610: ST_TO_ADDR
// end ;
52611: LD_VAR 0 3
52615: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
52616: LD_INT 0
52618: PPUSH
// if not chassis or not weapon then
52619: LD_VAR 0 1
52623: NOT
52624: PUSH
52625: LD_VAR 0 2
52629: NOT
52630: OR
52631: IFFALSE 52635
// exit ;
52633: GO 53661
// case weapon of us_machine_gun :
52635: LD_VAR 0 2
52639: PUSH
52640: LD_INT 2
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52648
52646: GO 52678
52648: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
52649: LD_ADDR_VAR 0 3
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: LD_INT 5
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
52676: GO 53645
52678: LD_INT 3
52680: DOUBLE
52681: EQUAL
52682: IFTRUE 52686
52684: GO 52716
52686: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
52687: LD_ADDR_VAR 0 3
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: LD_INT 5
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
52714: GO 53645
52716: LD_INT 11
52718: DOUBLE
52719: EQUAL
52720: IFTRUE 52724
52722: GO 52754
52724: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
52725: LD_ADDR_VAR 0 3
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: LD_INT 4
52741: PUSH
52742: LD_INT 5
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
52752: GO 53645
52754: LD_INT 4
52756: DOUBLE
52757: EQUAL
52758: IFTRUE 52762
52760: GO 52788
52762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
52763: LD_ADDR_VAR 0 3
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: LD_INT 5
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
52786: GO 53645
52788: LD_INT 5
52790: DOUBLE
52791: EQUAL
52792: IFTRUE 52796
52794: GO 52822
52796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
52797: LD_ADDR_VAR 0 3
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 4
52810: PUSH
52811: LD_INT 5
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
52820: GO 53645
52822: LD_INT 9
52824: DOUBLE
52825: EQUAL
52826: IFTRUE 52830
52828: GO 52856
52830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
52831: LD_ADDR_VAR 0 3
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: LD_INT 4
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: ST_TO_ADDR
52854: GO 53645
52856: LD_INT 7
52858: DOUBLE
52859: EQUAL
52860: IFTRUE 52864
52862: GO 52890
52864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
52865: LD_ADDR_VAR 0 3
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: LD_INT 5
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
52888: GO 53645
52890: LD_INT 12
52892: DOUBLE
52893: EQUAL
52894: IFTRUE 52898
52896: GO 52924
52898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
52899: LD_ADDR_VAR 0 3
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 4
52912: PUSH
52913: LD_INT 5
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
52922: GO 53645
52924: LD_INT 13
52926: DOUBLE
52927: EQUAL
52928: IFTRUE 52932
52930: GO 52958
52932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
52933: LD_ADDR_VAR 0 3
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 4
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
52956: GO 53645
52958: LD_INT 14
52960: DOUBLE
52961: EQUAL
52962: IFTRUE 52966
52964: GO 52984
52966: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
52967: LD_ADDR_VAR 0 3
52971: PUSH
52972: LD_INT 4
52974: PUSH
52975: LD_INT 5
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: ST_TO_ADDR
52982: GO 53645
52984: LD_INT 6
52986: DOUBLE
52987: EQUAL
52988: IFTRUE 52992
52990: GO 53010
52992: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
52993: LD_ADDR_VAR 0 3
52997: PUSH
52998: LD_INT 4
53000: PUSH
53001: LD_INT 5
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: ST_TO_ADDR
53008: GO 53645
53010: LD_INT 10
53012: DOUBLE
53013: EQUAL
53014: IFTRUE 53018
53016: GO 53036
53018: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53019: LD_ADDR_VAR 0 3
53023: PUSH
53024: LD_INT 4
53026: PUSH
53027: LD_INT 5
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: ST_TO_ADDR
53034: GO 53645
53036: LD_INT 22
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53044
53042: GO 53070
53044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_INT 11
53052: PUSH
53053: LD_INT 12
53055: PUSH
53056: LD_INT 13
53058: PUSH
53059: LD_INT 14
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
53068: GO 53645
53070: LD_INT 23
53072: DOUBLE
53073: EQUAL
53074: IFTRUE 53078
53076: GO 53104
53078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53079: LD_ADDR_VAR 0 3
53083: PUSH
53084: LD_INT 11
53086: PUSH
53087: LD_INT 12
53089: PUSH
53090: LD_INT 13
53092: PUSH
53093: LD_INT 14
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
53102: GO 53645
53104: LD_INT 24
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53112
53110: GO 53138
53112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
53113: LD_ADDR_VAR 0 3
53117: PUSH
53118: LD_INT 11
53120: PUSH
53121: LD_INT 12
53123: PUSH
53124: LD_INT 13
53126: PUSH
53127: LD_INT 14
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: ST_TO_ADDR
53136: GO 53645
53138: LD_INT 30
53140: DOUBLE
53141: EQUAL
53142: IFTRUE 53146
53144: GO 53172
53146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
53147: LD_ADDR_VAR 0 3
53151: PUSH
53152: LD_INT 11
53154: PUSH
53155: LD_INT 12
53157: PUSH
53158: LD_INT 13
53160: PUSH
53161: LD_INT 14
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: ST_TO_ADDR
53170: GO 53645
53172: LD_INT 25
53174: DOUBLE
53175: EQUAL
53176: IFTRUE 53180
53178: GO 53198
53180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
53181: LD_ADDR_VAR 0 3
53185: PUSH
53186: LD_INT 13
53188: PUSH
53189: LD_INT 14
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: ST_TO_ADDR
53196: GO 53645
53198: LD_INT 27
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53206
53204: GO 53224
53206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
53207: LD_ADDR_VAR 0 3
53211: PUSH
53212: LD_INT 13
53214: PUSH
53215: LD_INT 14
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: ST_TO_ADDR
53222: GO 53645
53224: LD_INT 28
53226: DOUBLE
53227: EQUAL
53228: IFTRUE 53232
53230: GO 53250
53232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
53233: LD_ADDR_VAR 0 3
53237: PUSH
53238: LD_INT 13
53240: PUSH
53241: LD_INT 14
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: ST_TO_ADDR
53248: GO 53645
53250: LD_INT 29
53252: DOUBLE
53253: EQUAL
53254: IFTRUE 53258
53256: GO 53276
53258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
53259: LD_ADDR_VAR 0 3
53263: PUSH
53264: LD_INT 13
53266: PUSH
53267: LD_INT 14
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: ST_TO_ADDR
53274: GO 53645
53276: LD_INT 31
53278: DOUBLE
53279: EQUAL
53280: IFTRUE 53284
53282: GO 53302
53284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
53285: LD_ADDR_VAR 0 3
53289: PUSH
53290: LD_INT 13
53292: PUSH
53293: LD_INT 14
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: ST_TO_ADDR
53300: GO 53645
53302: LD_INT 26
53304: DOUBLE
53305: EQUAL
53306: IFTRUE 53310
53308: GO 53328
53310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
53311: LD_ADDR_VAR 0 3
53315: PUSH
53316: LD_INT 13
53318: PUSH
53319: LD_INT 14
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: ST_TO_ADDR
53326: GO 53645
53328: LD_INT 42
53330: DOUBLE
53331: EQUAL
53332: IFTRUE 53336
53334: GO 53362
53336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
53337: LD_ADDR_VAR 0 3
53341: PUSH
53342: LD_INT 21
53344: PUSH
53345: LD_INT 22
53347: PUSH
53348: LD_INT 23
53350: PUSH
53351: LD_INT 24
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: ST_TO_ADDR
53360: GO 53645
53362: LD_INT 43
53364: DOUBLE
53365: EQUAL
53366: IFTRUE 53370
53368: GO 53396
53370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
53371: LD_ADDR_VAR 0 3
53375: PUSH
53376: LD_INT 21
53378: PUSH
53379: LD_INT 22
53381: PUSH
53382: LD_INT 23
53384: PUSH
53385: LD_INT 24
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: ST_TO_ADDR
53394: GO 53645
53396: LD_INT 44
53398: DOUBLE
53399: EQUAL
53400: IFTRUE 53404
53402: GO 53430
53404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
53405: LD_ADDR_VAR 0 3
53409: PUSH
53410: LD_INT 21
53412: PUSH
53413: LD_INT 22
53415: PUSH
53416: LD_INT 23
53418: PUSH
53419: LD_INT 24
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: ST_TO_ADDR
53428: GO 53645
53430: LD_INT 45
53432: DOUBLE
53433: EQUAL
53434: IFTRUE 53438
53436: GO 53464
53438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: LD_INT 21
53446: PUSH
53447: LD_INT 22
53449: PUSH
53450: LD_INT 23
53452: PUSH
53453: LD_INT 24
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
53462: GO 53645
53464: LD_INT 49
53466: DOUBLE
53467: EQUAL
53468: IFTRUE 53472
53470: GO 53498
53472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
53473: LD_ADDR_VAR 0 3
53477: PUSH
53478: LD_INT 21
53480: PUSH
53481: LD_INT 22
53483: PUSH
53484: LD_INT 23
53486: PUSH
53487: LD_INT 24
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: ST_TO_ADDR
53496: GO 53645
53498: LD_INT 51
53500: DOUBLE
53501: EQUAL
53502: IFTRUE 53506
53504: GO 53532
53506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
53507: LD_ADDR_VAR 0 3
53511: PUSH
53512: LD_INT 21
53514: PUSH
53515: LD_INT 22
53517: PUSH
53518: LD_INT 23
53520: PUSH
53521: LD_INT 24
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
53530: GO 53645
53532: LD_INT 52
53534: DOUBLE
53535: EQUAL
53536: IFTRUE 53540
53538: GO 53566
53540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
53541: LD_ADDR_VAR 0 3
53545: PUSH
53546: LD_INT 21
53548: PUSH
53549: LD_INT 22
53551: PUSH
53552: LD_INT 23
53554: PUSH
53555: LD_INT 24
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
53564: GO 53645
53566: LD_INT 53
53568: DOUBLE
53569: EQUAL
53570: IFTRUE 53574
53572: GO 53592
53574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
53575: LD_ADDR_VAR 0 3
53579: PUSH
53580: LD_INT 23
53582: PUSH
53583: LD_INT 24
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: ST_TO_ADDR
53590: GO 53645
53592: LD_INT 46
53594: DOUBLE
53595: EQUAL
53596: IFTRUE 53600
53598: GO 53618
53600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
53601: LD_ADDR_VAR 0 3
53605: PUSH
53606: LD_INT 23
53608: PUSH
53609: LD_INT 24
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: ST_TO_ADDR
53616: GO 53645
53618: LD_INT 47
53620: DOUBLE
53621: EQUAL
53622: IFTRUE 53626
53624: GO 53644
53626: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53627: LD_ADDR_VAR 0 3
53631: PUSH
53632: LD_INT 23
53634: PUSH
53635: LD_INT 24
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: ST_TO_ADDR
53642: GO 53645
53644: POP
// result := ( chassis in result ) ;
53645: LD_ADDR_VAR 0 3
53649: PUSH
53650: LD_VAR 0 1
53654: PUSH
53655: LD_VAR 0 3
53659: IN
53660: ST_TO_ADDR
// end ;
53661: LD_VAR 0 3
53665: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
53666: LD_INT 0
53668: PPUSH
53669: PPUSH
53670: PPUSH
53671: PPUSH
53672: PPUSH
53673: PPUSH
53674: PPUSH
// result := array ;
53675: LD_ADDR_VAR 0 5
53679: PUSH
53680: LD_VAR 0 1
53684: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
53685: LD_VAR 0 1
53689: NOT
53690: PUSH
53691: LD_VAR 0 2
53695: NOT
53696: OR
53697: PUSH
53698: LD_VAR 0 3
53702: NOT
53703: OR
53704: PUSH
53705: LD_VAR 0 2
53709: PUSH
53710: LD_VAR 0 1
53714: GREATER
53715: OR
53716: PUSH
53717: LD_VAR 0 3
53721: PUSH
53722: LD_VAR 0 1
53726: GREATER
53727: OR
53728: IFFALSE 53732
// exit ;
53730: GO 54028
// if direction then
53732: LD_VAR 0 4
53736: IFFALSE 53800
// begin d := 1 ;
53738: LD_ADDR_VAR 0 9
53742: PUSH
53743: LD_INT 1
53745: ST_TO_ADDR
// if i_from > i_to then
53746: LD_VAR 0 2
53750: PUSH
53751: LD_VAR 0 3
53755: GREATER
53756: IFFALSE 53782
// length := ( array - i_from ) + i_to else
53758: LD_ADDR_VAR 0 11
53762: PUSH
53763: LD_VAR 0 1
53767: PUSH
53768: LD_VAR 0 2
53772: MINUS
53773: PUSH
53774: LD_VAR 0 3
53778: PLUS
53779: ST_TO_ADDR
53780: GO 53798
// length := i_to - i_from ;
53782: LD_ADDR_VAR 0 11
53786: PUSH
53787: LD_VAR 0 3
53791: PUSH
53792: LD_VAR 0 2
53796: MINUS
53797: ST_TO_ADDR
// end else
53798: GO 53861
// begin d := - 1 ;
53800: LD_ADDR_VAR 0 9
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: ST_TO_ADDR
// if i_from > i_to then
53809: LD_VAR 0 2
53813: PUSH
53814: LD_VAR 0 3
53818: GREATER
53819: IFFALSE 53839
// length := i_from - i_to else
53821: LD_ADDR_VAR 0 11
53825: PUSH
53826: LD_VAR 0 2
53830: PUSH
53831: LD_VAR 0 3
53835: MINUS
53836: ST_TO_ADDR
53837: GO 53861
// length := ( array - i_to ) + i_from ;
53839: LD_ADDR_VAR 0 11
53843: PUSH
53844: LD_VAR 0 1
53848: PUSH
53849: LD_VAR 0 3
53853: MINUS
53854: PUSH
53855: LD_VAR 0 2
53859: PLUS
53860: ST_TO_ADDR
// end ; if not length then
53861: LD_VAR 0 11
53865: NOT
53866: IFFALSE 53870
// exit ;
53868: GO 54028
// tmp := array ;
53870: LD_ADDR_VAR 0 10
53874: PUSH
53875: LD_VAR 0 1
53879: ST_TO_ADDR
// for i = 1 to length do
53880: LD_ADDR_VAR 0 6
53884: PUSH
53885: DOUBLE
53886: LD_INT 1
53888: DEC
53889: ST_TO_ADDR
53890: LD_VAR 0 11
53894: PUSH
53895: FOR_TO
53896: IFFALSE 54016
// begin for j = 1 to array do
53898: LD_ADDR_VAR 0 7
53902: PUSH
53903: DOUBLE
53904: LD_INT 1
53906: DEC
53907: ST_TO_ADDR
53908: LD_VAR 0 1
53912: PUSH
53913: FOR_TO
53914: IFFALSE 54002
// begin k := j + d ;
53916: LD_ADDR_VAR 0 8
53920: PUSH
53921: LD_VAR 0 7
53925: PUSH
53926: LD_VAR 0 9
53930: PLUS
53931: ST_TO_ADDR
// if k > array then
53932: LD_VAR 0 8
53936: PUSH
53937: LD_VAR 0 1
53941: GREATER
53942: IFFALSE 53952
// k := 1 ;
53944: LD_ADDR_VAR 0 8
53948: PUSH
53949: LD_INT 1
53951: ST_TO_ADDR
// if not k then
53952: LD_VAR 0 8
53956: NOT
53957: IFFALSE 53969
// k := array ;
53959: LD_ADDR_VAR 0 8
53963: PUSH
53964: LD_VAR 0 1
53968: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
53969: LD_ADDR_VAR 0 10
53973: PUSH
53974: LD_VAR 0 10
53978: PPUSH
53979: LD_VAR 0 8
53983: PPUSH
53984: LD_VAR 0 1
53988: PUSH
53989: LD_VAR 0 7
53993: ARRAY
53994: PPUSH
53995: CALL_OW 1
53999: ST_TO_ADDR
// end ;
54000: GO 53913
54002: POP
54003: POP
// array := tmp ;
54004: LD_ADDR_VAR 0 1
54008: PUSH
54009: LD_VAR 0 10
54013: ST_TO_ADDR
// end ;
54014: GO 53895
54016: POP
54017: POP
// result := array ;
54018: LD_ADDR_VAR 0 5
54022: PUSH
54023: LD_VAR 0 1
54027: ST_TO_ADDR
// end ;
54028: LD_VAR 0 5
54032: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54033: LD_INT 0
54035: PPUSH
54036: PPUSH
// result := 0 ;
54037: LD_ADDR_VAR 0 3
54041: PUSH
54042: LD_INT 0
54044: ST_TO_ADDR
// if not array or not value in array then
54045: LD_VAR 0 1
54049: NOT
54050: PUSH
54051: LD_VAR 0 2
54055: PUSH
54056: LD_VAR 0 1
54060: IN
54061: NOT
54062: OR
54063: IFFALSE 54067
// exit ;
54065: GO 54121
// for i = 1 to array do
54067: LD_ADDR_VAR 0 4
54071: PUSH
54072: DOUBLE
54073: LD_INT 1
54075: DEC
54076: ST_TO_ADDR
54077: LD_VAR 0 1
54081: PUSH
54082: FOR_TO
54083: IFFALSE 54119
// if value = array [ i ] then
54085: LD_VAR 0 2
54089: PUSH
54090: LD_VAR 0 1
54094: PUSH
54095: LD_VAR 0 4
54099: ARRAY
54100: EQUAL
54101: IFFALSE 54117
// begin result := i ;
54103: LD_ADDR_VAR 0 3
54107: PUSH
54108: LD_VAR 0 4
54112: ST_TO_ADDR
// exit ;
54113: POP
54114: POP
54115: GO 54121
// end ;
54117: GO 54082
54119: POP
54120: POP
// end ;
54121: LD_VAR 0 3
54125: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
54126: LD_INT 0
54128: PPUSH
// vc_chassis := chassis ;
54129: LD_ADDR_OWVAR 37
54133: PUSH
54134: LD_VAR 0 1
54138: ST_TO_ADDR
// vc_engine := engine ;
54139: LD_ADDR_OWVAR 39
54143: PUSH
54144: LD_VAR 0 2
54148: ST_TO_ADDR
// vc_control := control ;
54149: LD_ADDR_OWVAR 38
54153: PUSH
54154: LD_VAR 0 3
54158: ST_TO_ADDR
// vc_weapon := weapon ;
54159: LD_ADDR_OWVAR 40
54163: PUSH
54164: LD_VAR 0 4
54168: ST_TO_ADDR
// vc_fuel_battery := fuel ;
54169: LD_ADDR_OWVAR 41
54173: PUSH
54174: LD_VAR 0 5
54178: ST_TO_ADDR
// end ;
54179: LD_VAR 0 6
54183: RET
// export function WantPlant ( unit ) ; var task ; begin
54184: LD_INT 0
54186: PPUSH
54187: PPUSH
// result := false ;
54188: LD_ADDR_VAR 0 2
54192: PUSH
54193: LD_INT 0
54195: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
54196: LD_ADDR_VAR 0 3
54200: PUSH
54201: LD_VAR 0 1
54205: PPUSH
54206: CALL_OW 437
54210: ST_TO_ADDR
// if task then
54211: LD_VAR 0 3
54215: IFFALSE 54243
// if task [ 1 ] [ 1 ] = p then
54217: LD_VAR 0 3
54221: PUSH
54222: LD_INT 1
54224: ARRAY
54225: PUSH
54226: LD_INT 1
54228: ARRAY
54229: PUSH
54230: LD_STRING p
54232: EQUAL
54233: IFFALSE 54243
// result := true ;
54235: LD_ADDR_VAR 0 2
54239: PUSH
54240: LD_INT 1
54242: ST_TO_ADDR
// end ;
54243: LD_VAR 0 2
54247: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
54248: LD_INT 0
54250: PPUSH
54251: PPUSH
54252: PPUSH
54253: PPUSH
// if pos < 1 then
54254: LD_VAR 0 2
54258: PUSH
54259: LD_INT 1
54261: LESS
54262: IFFALSE 54266
// exit ;
54264: GO 54569
// if pos = 1 then
54266: LD_VAR 0 2
54270: PUSH
54271: LD_INT 1
54273: EQUAL
54274: IFFALSE 54307
// result := Replace ( arr , pos [ 1 ] , value ) else
54276: LD_ADDR_VAR 0 4
54280: PUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: LD_VAR 0 2
54290: PUSH
54291: LD_INT 1
54293: ARRAY
54294: PPUSH
54295: LD_VAR 0 3
54299: PPUSH
54300: CALL_OW 1
54304: ST_TO_ADDR
54305: GO 54569
// begin tmp := arr ;
54307: LD_ADDR_VAR 0 6
54311: PUSH
54312: LD_VAR 0 1
54316: ST_TO_ADDR
// s_arr := [ tmp ] ;
54317: LD_ADDR_VAR 0 7
54321: PUSH
54322: LD_VAR 0 6
54326: PUSH
54327: EMPTY
54328: LIST
54329: ST_TO_ADDR
// for i = 1 to pos - 1 do
54330: LD_ADDR_VAR 0 5
54334: PUSH
54335: DOUBLE
54336: LD_INT 1
54338: DEC
54339: ST_TO_ADDR
54340: LD_VAR 0 2
54344: PUSH
54345: LD_INT 1
54347: MINUS
54348: PUSH
54349: FOR_TO
54350: IFFALSE 54395
// begin tmp := tmp [ pos [ i ] ] ;
54352: LD_ADDR_VAR 0 6
54356: PUSH
54357: LD_VAR 0 6
54361: PUSH
54362: LD_VAR 0 2
54366: PUSH
54367: LD_VAR 0 5
54371: ARRAY
54372: ARRAY
54373: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
54374: LD_ADDR_VAR 0 7
54378: PUSH
54379: LD_VAR 0 7
54383: PUSH
54384: LD_VAR 0 6
54388: PUSH
54389: EMPTY
54390: LIST
54391: ADD
54392: ST_TO_ADDR
// end ;
54393: GO 54349
54395: POP
54396: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
54397: LD_ADDR_VAR 0 6
54401: PUSH
54402: LD_VAR 0 6
54406: PPUSH
54407: LD_VAR 0 2
54411: PUSH
54412: LD_VAR 0 2
54416: ARRAY
54417: PPUSH
54418: LD_VAR 0 3
54422: PPUSH
54423: CALL_OW 1
54427: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
54428: LD_ADDR_VAR 0 7
54432: PUSH
54433: LD_VAR 0 7
54437: PPUSH
54438: LD_VAR 0 7
54442: PPUSH
54443: LD_VAR 0 6
54447: PPUSH
54448: CALL_OW 1
54452: ST_TO_ADDR
// for i = s_arr downto 2 do
54453: LD_ADDR_VAR 0 5
54457: PUSH
54458: DOUBLE
54459: LD_VAR 0 7
54463: INC
54464: ST_TO_ADDR
54465: LD_INT 2
54467: PUSH
54468: FOR_DOWNTO
54469: IFFALSE 54553
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
54471: LD_ADDR_VAR 0 6
54475: PUSH
54476: LD_VAR 0 7
54480: PUSH
54481: LD_VAR 0 5
54485: PUSH
54486: LD_INT 1
54488: MINUS
54489: ARRAY
54490: PPUSH
54491: LD_VAR 0 2
54495: PUSH
54496: LD_VAR 0 5
54500: PUSH
54501: LD_INT 1
54503: MINUS
54504: ARRAY
54505: PPUSH
54506: LD_VAR 0 7
54510: PUSH
54511: LD_VAR 0 5
54515: ARRAY
54516: PPUSH
54517: CALL_OW 1
54521: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
54522: LD_ADDR_VAR 0 7
54526: PUSH
54527: LD_VAR 0 7
54531: PPUSH
54532: LD_VAR 0 5
54536: PUSH
54537: LD_INT 1
54539: MINUS
54540: PPUSH
54541: LD_VAR 0 6
54545: PPUSH
54546: CALL_OW 1
54550: ST_TO_ADDR
// end ;
54551: GO 54468
54553: POP
54554: POP
// result := s_arr [ 1 ] ;
54555: LD_ADDR_VAR 0 4
54559: PUSH
54560: LD_VAR 0 7
54564: PUSH
54565: LD_INT 1
54567: ARRAY
54568: ST_TO_ADDR
// end ; end ;
54569: LD_VAR 0 4
54573: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
54574: LD_INT 0
54576: PPUSH
54577: PPUSH
// if not list then
54578: LD_VAR 0 1
54582: NOT
54583: IFFALSE 54587
// exit ;
54585: GO 54678
// i := list [ pos1 ] ;
54587: LD_ADDR_VAR 0 5
54591: PUSH
54592: LD_VAR 0 1
54596: PUSH
54597: LD_VAR 0 2
54601: ARRAY
54602: ST_TO_ADDR
// if not i then
54603: LD_VAR 0 5
54607: NOT
54608: IFFALSE 54612
// exit ;
54610: GO 54678
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
54612: LD_ADDR_VAR 0 1
54616: PUSH
54617: LD_VAR 0 1
54621: PPUSH
54622: LD_VAR 0 2
54626: PPUSH
54627: LD_VAR 0 1
54631: PUSH
54632: LD_VAR 0 3
54636: ARRAY
54637: PPUSH
54638: CALL_OW 1
54642: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
54643: LD_ADDR_VAR 0 1
54647: PUSH
54648: LD_VAR 0 1
54652: PPUSH
54653: LD_VAR 0 3
54657: PPUSH
54658: LD_VAR 0 5
54662: PPUSH
54663: CALL_OW 1
54667: ST_TO_ADDR
// result := list ;
54668: LD_ADDR_VAR 0 4
54672: PUSH
54673: LD_VAR 0 1
54677: ST_TO_ADDR
// end ;
54678: LD_VAR 0 4
54682: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
54683: LD_INT 0
54685: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
54686: LD_ADDR_VAR 0 5
54690: PUSH
54691: LD_VAR 0 1
54695: PPUSH
54696: CALL_OW 250
54700: PPUSH
54701: LD_VAR 0 1
54705: PPUSH
54706: CALL_OW 251
54710: PPUSH
54711: LD_VAR 0 2
54715: PPUSH
54716: LD_VAR 0 3
54720: PPUSH
54721: LD_VAR 0 4
54725: PPUSH
54726: CALL 54736 0 5
54730: ST_TO_ADDR
// end ;
54731: LD_VAR 0 5
54735: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
54736: LD_INT 0
54738: PPUSH
54739: PPUSH
54740: PPUSH
54741: PPUSH
// if not list then
54742: LD_VAR 0 3
54746: NOT
54747: IFFALSE 54751
// exit ;
54749: GO 55139
// result := [ ] ;
54751: LD_ADDR_VAR 0 6
54755: PUSH
54756: EMPTY
54757: ST_TO_ADDR
// for i in list do
54758: LD_ADDR_VAR 0 7
54762: PUSH
54763: LD_VAR 0 3
54767: PUSH
54768: FOR_IN
54769: IFFALSE 54971
// begin tmp := GetDistUnitXY ( i , x , y ) ;
54771: LD_ADDR_VAR 0 9
54775: PUSH
54776: LD_VAR 0 7
54780: PPUSH
54781: LD_VAR 0 1
54785: PPUSH
54786: LD_VAR 0 2
54790: PPUSH
54791: CALL_OW 297
54795: ST_TO_ADDR
// if not result then
54796: LD_VAR 0 6
54800: NOT
54801: IFFALSE 54827
// result := [ [ i , tmp ] ] else
54803: LD_ADDR_VAR 0 6
54807: PUSH
54808: LD_VAR 0 7
54812: PUSH
54813: LD_VAR 0 9
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: ST_TO_ADDR
54825: GO 54969
// begin if result [ result ] [ 2 ] < tmp then
54827: LD_VAR 0 6
54831: PUSH
54832: LD_VAR 0 6
54836: ARRAY
54837: PUSH
54838: LD_INT 2
54840: ARRAY
54841: PUSH
54842: LD_VAR 0 9
54846: LESS
54847: IFFALSE 54889
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
54849: LD_ADDR_VAR 0 6
54853: PUSH
54854: LD_VAR 0 6
54858: PPUSH
54859: LD_VAR 0 6
54863: PUSH
54864: LD_INT 1
54866: PLUS
54867: PPUSH
54868: LD_VAR 0 7
54872: PUSH
54873: LD_VAR 0 9
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PPUSH
54882: CALL_OW 2
54886: ST_TO_ADDR
54887: GO 54969
// for j = 1 to result do
54889: LD_ADDR_VAR 0 8
54893: PUSH
54894: DOUBLE
54895: LD_INT 1
54897: DEC
54898: ST_TO_ADDR
54899: LD_VAR 0 6
54903: PUSH
54904: FOR_TO
54905: IFFALSE 54967
// begin if tmp < result [ j ] [ 2 ] then
54907: LD_VAR 0 9
54911: PUSH
54912: LD_VAR 0 6
54916: PUSH
54917: LD_VAR 0 8
54921: ARRAY
54922: PUSH
54923: LD_INT 2
54925: ARRAY
54926: LESS
54927: IFFALSE 54965
// begin result := Insert ( result , j , [ i , tmp ] ) ;
54929: LD_ADDR_VAR 0 6
54933: PUSH
54934: LD_VAR 0 6
54938: PPUSH
54939: LD_VAR 0 8
54943: PPUSH
54944: LD_VAR 0 7
54948: PUSH
54949: LD_VAR 0 9
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PPUSH
54958: CALL_OW 2
54962: ST_TO_ADDR
// break ;
54963: GO 54967
// end ; end ;
54965: GO 54904
54967: POP
54968: POP
// end ; end ;
54969: GO 54768
54971: POP
54972: POP
// if result and not asc then
54973: LD_VAR 0 6
54977: PUSH
54978: LD_VAR 0 4
54982: NOT
54983: AND
54984: IFFALSE 55059
// begin tmp := result ;
54986: LD_ADDR_VAR 0 9
54990: PUSH
54991: LD_VAR 0 6
54995: ST_TO_ADDR
// for i = tmp downto 1 do
54996: LD_ADDR_VAR 0 7
55000: PUSH
55001: DOUBLE
55002: LD_VAR 0 9
55006: INC
55007: ST_TO_ADDR
55008: LD_INT 1
55010: PUSH
55011: FOR_DOWNTO
55012: IFFALSE 55057
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55014: LD_ADDR_VAR 0 6
55018: PUSH
55019: LD_VAR 0 6
55023: PPUSH
55024: LD_VAR 0 9
55028: PUSH
55029: LD_VAR 0 7
55033: MINUS
55034: PUSH
55035: LD_INT 1
55037: PLUS
55038: PPUSH
55039: LD_VAR 0 9
55043: PUSH
55044: LD_VAR 0 7
55048: ARRAY
55049: PPUSH
55050: CALL_OW 1
55054: ST_TO_ADDR
55055: GO 55011
55057: POP
55058: POP
// end ; tmp := [ ] ;
55059: LD_ADDR_VAR 0 9
55063: PUSH
55064: EMPTY
55065: ST_TO_ADDR
// if mode then
55066: LD_VAR 0 5
55070: IFFALSE 55139
// begin for i = 1 to result do
55072: LD_ADDR_VAR 0 7
55076: PUSH
55077: DOUBLE
55078: LD_INT 1
55080: DEC
55081: ST_TO_ADDR
55082: LD_VAR 0 6
55086: PUSH
55087: FOR_TO
55088: IFFALSE 55127
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
55090: LD_ADDR_VAR 0 9
55094: PUSH
55095: LD_VAR 0 9
55099: PPUSH
55100: LD_VAR 0 7
55104: PPUSH
55105: LD_VAR 0 6
55109: PUSH
55110: LD_VAR 0 7
55114: ARRAY
55115: PUSH
55116: LD_INT 1
55118: ARRAY
55119: PPUSH
55120: CALL_OW 1
55124: ST_TO_ADDR
55125: GO 55087
55127: POP
55128: POP
// result := tmp ;
55129: LD_ADDR_VAR 0 6
55133: PUSH
55134: LD_VAR 0 9
55138: ST_TO_ADDR
// end ; end ;
55139: LD_VAR 0 6
55143: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
55144: LD_INT 0
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
55152: LD_ADDR_VAR 0 5
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// if not x or not y then
55174: LD_VAR 0 2
55178: NOT
55179: PUSH
55180: LD_VAR 0 3
55184: NOT
55185: OR
55186: IFFALSE 55190
// exit ;
55188: GO 56836
// if not range then
55190: LD_VAR 0 4
55194: NOT
55195: IFFALSE 55205
// range := 10 ;
55197: LD_ADDR_VAR 0 4
55201: PUSH
55202: LD_INT 10
55204: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55205: LD_ADDR_VAR 0 8
55209: PUSH
55210: LD_INT 81
55212: PUSH
55213: LD_VAR 0 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 92
55224: PUSH
55225: LD_VAR 0 2
55229: PUSH
55230: LD_VAR 0 3
55234: PUSH
55235: LD_VAR 0 4
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: LD_INT 21
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: PPUSH
55268: CALL_OW 69
55272: ST_TO_ADDR
// if not tmp then
55273: LD_VAR 0 8
55277: NOT
55278: IFFALSE 55282
// exit ;
55280: GO 56836
// for i in tmp do
55282: LD_ADDR_VAR 0 6
55286: PUSH
55287: LD_VAR 0 8
55291: PUSH
55292: FOR_IN
55293: IFFALSE 56811
// begin points := [ 0 , 0 , 0 ] ;
55295: LD_ADDR_VAR 0 9
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// bpoints := 1 ;
55314: LD_ADDR_VAR 0 10
55318: PUSH
55319: LD_INT 1
55321: ST_TO_ADDR
// case GetType ( i ) of unit_human :
55322: LD_VAR 0 6
55326: PPUSH
55327: CALL_OW 247
55331: PUSH
55332: LD_INT 1
55334: DOUBLE
55335: EQUAL
55336: IFTRUE 55340
55338: GO 55918
55340: POP
// begin if GetClass ( i ) = 1 then
55341: LD_VAR 0 6
55345: PPUSH
55346: CALL_OW 257
55350: PUSH
55351: LD_INT 1
55353: EQUAL
55354: IFFALSE 55375
// points := [ 10 , 5 , 3 ] ;
55356: LD_ADDR_VAR 0 9
55360: PUSH
55361: LD_INT 10
55363: PUSH
55364: LD_INT 5
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
55375: LD_VAR 0 6
55379: PPUSH
55380: CALL_OW 257
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 4
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: IN
55399: IFFALSE 55420
// points := [ 3 , 2 , 1 ] ;
55401: LD_ADDR_VAR 0 9
55405: PUSH
55406: LD_INT 3
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: ST_TO_ADDR
// if GetClass ( i ) = 5 then
55420: LD_VAR 0 6
55424: PPUSH
55425: CALL_OW 257
55429: PUSH
55430: LD_INT 5
55432: EQUAL
55433: IFFALSE 55454
// points := [ 130 , 5 , 2 ] ;
55435: LD_ADDR_VAR 0 9
55439: PUSH
55440: LD_INT 130
55442: PUSH
55443: LD_INT 5
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: ST_TO_ADDR
// if GetClass ( i ) = 8 then
55454: LD_VAR 0 6
55458: PPUSH
55459: CALL_OW 257
55463: PUSH
55464: LD_INT 8
55466: EQUAL
55467: IFFALSE 55488
// points := [ 35 , 35 , 30 ] ;
55469: LD_ADDR_VAR 0 9
55473: PUSH
55474: LD_INT 35
55476: PUSH
55477: LD_INT 35
55479: PUSH
55480: LD_INT 30
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// if GetClass ( i ) = 9 then
55488: LD_VAR 0 6
55492: PPUSH
55493: CALL_OW 257
55497: PUSH
55498: LD_INT 9
55500: EQUAL
55501: IFFALSE 55522
// points := [ 20 , 55 , 40 ] ;
55503: LD_ADDR_VAR 0 9
55507: PUSH
55508: LD_INT 20
55510: PUSH
55511: LD_INT 55
55513: PUSH
55514: LD_INT 40
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
55522: LD_VAR 0 6
55526: PPUSH
55527: CALL_OW 257
55531: PUSH
55532: LD_INT 12
55534: PUSH
55535: LD_INT 16
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: IN
55542: IFFALSE 55563
// points := [ 5 , 3 , 2 ] ;
55544: LD_ADDR_VAR 0 9
55548: PUSH
55549: LD_INT 5
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: ST_TO_ADDR
// if GetClass ( i ) = 17 then
55563: LD_VAR 0 6
55567: PPUSH
55568: CALL_OW 257
55572: PUSH
55573: LD_INT 17
55575: EQUAL
55576: IFFALSE 55597
// points := [ 100 , 50 , 75 ] ;
55578: LD_ADDR_VAR 0 9
55582: PUSH
55583: LD_INT 100
55585: PUSH
55586: LD_INT 50
55588: PUSH
55589: LD_INT 75
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// if GetClass ( i ) = 15 then
55597: LD_VAR 0 6
55601: PPUSH
55602: CALL_OW 257
55606: PUSH
55607: LD_INT 15
55609: EQUAL
55610: IFFALSE 55631
// points := [ 10 , 5 , 3 ] ;
55612: LD_ADDR_VAR 0 9
55616: PUSH
55617: LD_INT 10
55619: PUSH
55620: LD_INT 5
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// if GetClass ( i ) = 14 then
55631: LD_VAR 0 6
55635: PPUSH
55636: CALL_OW 257
55640: PUSH
55641: LD_INT 14
55643: EQUAL
55644: IFFALSE 55665
// points := [ 10 , 0 , 0 ] ;
55646: LD_ADDR_VAR 0 9
55650: PUSH
55651: LD_INT 10
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: LIST
55664: ST_TO_ADDR
// if GetClass ( i ) = 11 then
55665: LD_VAR 0 6
55669: PPUSH
55670: CALL_OW 257
55674: PUSH
55675: LD_INT 11
55677: EQUAL
55678: IFFALSE 55699
// points := [ 30 , 10 , 5 ] ;
55680: LD_ADDR_VAR 0 9
55684: PUSH
55685: LD_INT 30
55687: PUSH
55688: LD_INT 10
55690: PUSH
55691: LD_INT 5
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
55699: LD_VAR 0 1
55703: PPUSH
55704: LD_INT 5
55706: PPUSH
55707: CALL_OW 321
55711: PUSH
55712: LD_INT 2
55714: EQUAL
55715: IFFALSE 55732
// bpoints := bpoints * 1.8 ;
55717: LD_ADDR_VAR 0 10
55721: PUSH
55722: LD_VAR 0 10
55726: PUSH
55727: LD_REAL  1.80000000000000E+0000
55730: MUL
55731: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
55732: LD_VAR 0 6
55736: PPUSH
55737: CALL_OW 257
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: IN
55760: PUSH
55761: LD_VAR 0 1
55765: PPUSH
55766: LD_INT 51
55768: PPUSH
55769: CALL_OW 321
55773: PUSH
55774: LD_INT 2
55776: EQUAL
55777: AND
55778: IFFALSE 55795
// bpoints := bpoints * 1.2 ;
55780: LD_ADDR_VAR 0 10
55784: PUSH
55785: LD_VAR 0 10
55789: PUSH
55790: LD_REAL  1.20000000000000E+0000
55793: MUL
55794: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
55795: LD_VAR 0 6
55799: PPUSH
55800: CALL_OW 257
55804: PUSH
55805: LD_INT 5
55807: PUSH
55808: LD_INT 7
55810: PUSH
55811: LD_INT 9
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: LIST
55818: IN
55819: PUSH
55820: LD_VAR 0 1
55824: PPUSH
55825: LD_INT 52
55827: PPUSH
55828: CALL_OW 321
55832: PUSH
55833: LD_INT 2
55835: EQUAL
55836: AND
55837: IFFALSE 55854
// bpoints := bpoints * 1.5 ;
55839: LD_ADDR_VAR 0 10
55843: PUSH
55844: LD_VAR 0 10
55848: PUSH
55849: LD_REAL  1.50000000000000E+0000
55852: MUL
55853: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
55854: LD_VAR 0 1
55858: PPUSH
55859: LD_INT 66
55861: PPUSH
55862: CALL_OW 321
55866: PUSH
55867: LD_INT 2
55869: EQUAL
55870: IFFALSE 55887
// bpoints := bpoints * 1.1 ;
55872: LD_ADDR_VAR 0 10
55876: PUSH
55877: LD_VAR 0 10
55881: PUSH
55882: LD_REAL  1.10000000000000E+0000
55885: MUL
55886: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
55887: LD_ADDR_VAR 0 10
55891: PUSH
55892: LD_VAR 0 10
55896: PUSH
55897: LD_VAR 0 6
55901: PPUSH
55902: LD_INT 1
55904: PPUSH
55905: CALL_OW 259
55909: PUSH
55910: LD_REAL  1.15000000000000E+0000
55913: MUL
55914: MUL
55915: ST_TO_ADDR
// end ; unit_vehicle :
55916: GO 56740
55918: LD_INT 2
55920: DOUBLE
55921: EQUAL
55922: IFTRUE 55926
55924: GO 56728
55926: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
55927: LD_VAR 0 6
55931: PPUSH
55932: CALL_OW 264
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: LD_INT 42
55942: PUSH
55943: LD_INT 24
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: IN
55951: IFFALSE 55972
// points := [ 25 , 5 , 3 ] ;
55953: LD_ADDR_VAR 0 9
55957: PUSH
55958: LD_INT 25
55960: PUSH
55961: LD_INT 5
55963: PUSH
55964: LD_INT 3
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
55972: LD_VAR 0 6
55976: PPUSH
55977: CALL_OW 264
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: LD_INT 43
55987: PUSH
55988: LD_INT 25
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: IN
55996: IFFALSE 56017
// points := [ 40 , 15 , 5 ] ;
55998: LD_ADDR_VAR 0 9
56002: PUSH
56003: LD_INT 40
56005: PUSH
56006: LD_INT 15
56008: PUSH
56009: LD_INT 5
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56017: LD_VAR 0 6
56021: PPUSH
56022: CALL_OW 264
56026: PUSH
56027: LD_INT 3
56029: PUSH
56030: LD_INT 23
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: IN
56037: IFFALSE 56058
// points := [ 7 , 25 , 8 ] ;
56039: LD_ADDR_VAR 0 9
56043: PUSH
56044: LD_INT 7
56046: PUSH
56047: LD_INT 25
56049: PUSH
56050: LD_INT 8
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56058: LD_VAR 0 6
56062: PPUSH
56063: CALL_OW 264
56067: PUSH
56068: LD_INT 5
56070: PUSH
56071: LD_INT 27
56073: PUSH
56074: LD_INT 44
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: IN
56082: IFFALSE 56103
// points := [ 14 , 50 , 16 ] ;
56084: LD_ADDR_VAR 0 9
56088: PUSH
56089: LD_INT 14
56091: PUSH
56092: LD_INT 50
56094: PUSH
56095: LD_INT 16
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
56103: LD_VAR 0 6
56107: PPUSH
56108: CALL_OW 264
56112: PUSH
56113: LD_INT 6
56115: PUSH
56116: LD_INT 46
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: IN
56123: IFFALSE 56144
// points := [ 32 , 120 , 70 ] ;
56125: LD_ADDR_VAR 0 9
56129: PUSH
56130: LD_INT 32
56132: PUSH
56133: LD_INT 120
56135: PUSH
56136: LD_INT 70
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
56144: LD_VAR 0 6
56148: PPUSH
56149: CALL_OW 264
56153: PUSH
56154: LD_INT 7
56156: PUSH
56157: LD_INT 28
56159: PUSH
56160: LD_INT 45
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: IN
56168: IFFALSE 56189
// points := [ 35 , 20 , 45 ] ;
56170: LD_ADDR_VAR 0 9
56174: PUSH
56175: LD_INT 35
56177: PUSH
56178: LD_INT 20
56180: PUSH
56181: LD_INT 45
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
56189: LD_VAR 0 6
56193: PPUSH
56194: CALL_OW 264
56198: PUSH
56199: LD_INT 47
56201: PUSH
56202: EMPTY
56203: LIST
56204: IN
56205: IFFALSE 56226
// points := [ 67 , 45 , 75 ] ;
56207: LD_ADDR_VAR 0 9
56211: PUSH
56212: LD_INT 67
56214: PUSH
56215: LD_INT 45
56217: PUSH
56218: LD_INT 75
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
56226: LD_VAR 0 6
56230: PPUSH
56231: CALL_OW 264
56235: PUSH
56236: LD_INT 26
56238: PUSH
56239: EMPTY
56240: LIST
56241: IN
56242: IFFALSE 56263
// points := [ 120 , 30 , 80 ] ;
56244: LD_ADDR_VAR 0 9
56248: PUSH
56249: LD_INT 120
56251: PUSH
56252: LD_INT 30
56254: PUSH
56255: LD_INT 80
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
56263: LD_VAR 0 6
56267: PPUSH
56268: CALL_OW 264
56272: PUSH
56273: LD_INT 22
56275: PUSH
56276: EMPTY
56277: LIST
56278: IN
56279: IFFALSE 56300
// points := [ 40 , 1 , 1 ] ;
56281: LD_ADDR_VAR 0 9
56285: PUSH
56286: LD_INT 40
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
56300: LD_VAR 0 6
56304: PPUSH
56305: CALL_OW 264
56309: PUSH
56310: LD_INT 29
56312: PUSH
56313: EMPTY
56314: LIST
56315: IN
56316: IFFALSE 56337
// points := [ 70 , 200 , 400 ] ;
56318: LD_ADDR_VAR 0 9
56322: PUSH
56323: LD_INT 70
56325: PUSH
56326: LD_INT 200
56328: PUSH
56329: LD_INT 400
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
56337: LD_VAR 0 6
56341: PPUSH
56342: CALL_OW 264
56346: PUSH
56347: LD_INT 14
56349: PUSH
56350: LD_INT 53
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: IN
56357: IFFALSE 56378
// points := [ 40 , 10 , 20 ] ;
56359: LD_ADDR_VAR 0 9
56363: PUSH
56364: LD_INT 40
56366: PUSH
56367: LD_INT 10
56369: PUSH
56370: LD_INT 20
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
56378: LD_VAR 0 6
56382: PPUSH
56383: CALL_OW 264
56387: PUSH
56388: LD_INT 9
56390: PUSH
56391: EMPTY
56392: LIST
56393: IN
56394: IFFALSE 56415
// points := [ 5 , 70 , 20 ] ;
56396: LD_ADDR_VAR 0 9
56400: PUSH
56401: LD_INT 5
56403: PUSH
56404: LD_INT 70
56406: PUSH
56407: LD_INT 20
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
56415: LD_VAR 0 6
56419: PPUSH
56420: CALL_OW 264
56424: PUSH
56425: LD_INT 10
56427: PUSH
56428: EMPTY
56429: LIST
56430: IN
56431: IFFALSE 56452
// points := [ 35 , 110 , 70 ] ;
56433: LD_ADDR_VAR 0 9
56437: PUSH
56438: LD_INT 35
56440: PUSH
56441: LD_INT 110
56443: PUSH
56444: LD_INT 70
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
56452: LD_VAR 0 6
56456: PPUSH
56457: CALL_OW 265
56461: PUSH
56462: LD_INT 25
56464: EQUAL
56465: IFFALSE 56486
// points := [ 80 , 65 , 100 ] ;
56467: LD_ADDR_VAR 0 9
56471: PUSH
56472: LD_INT 80
56474: PUSH
56475: LD_INT 65
56477: PUSH
56478: LD_INT 100
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
56486: LD_VAR 0 6
56490: PPUSH
56491: CALL_OW 263
56495: PUSH
56496: LD_INT 1
56498: EQUAL
56499: IFFALSE 56534
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
56501: LD_ADDR_VAR 0 10
56505: PUSH
56506: LD_VAR 0 10
56510: PUSH
56511: LD_VAR 0 6
56515: PPUSH
56516: CALL_OW 311
56520: PPUSH
56521: LD_INT 3
56523: PPUSH
56524: CALL_OW 259
56528: PUSH
56529: LD_INT 4
56531: MUL
56532: MUL
56533: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
56534: LD_VAR 0 6
56538: PPUSH
56539: CALL_OW 263
56543: PUSH
56544: LD_INT 2
56546: EQUAL
56547: IFFALSE 56598
// begin j := IsControledBy ( i ) ;
56549: LD_ADDR_VAR 0 7
56553: PUSH
56554: LD_VAR 0 6
56558: PPUSH
56559: CALL_OW 312
56563: ST_TO_ADDR
// if j then
56564: LD_VAR 0 7
56568: IFFALSE 56598
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
56570: LD_ADDR_VAR 0 10
56574: PUSH
56575: LD_VAR 0 10
56579: PUSH
56580: LD_VAR 0 7
56584: PPUSH
56585: LD_INT 3
56587: PPUSH
56588: CALL_OW 259
56592: PUSH
56593: LD_INT 3
56595: MUL
56596: MUL
56597: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
56598: LD_VAR 0 6
56602: PPUSH
56603: CALL_OW 264
56607: PUSH
56608: LD_INT 5
56610: PUSH
56611: LD_INT 6
56613: PUSH
56614: LD_INT 46
56616: PUSH
56617: LD_INT 44
56619: PUSH
56620: LD_INT 47
56622: PUSH
56623: LD_INT 45
56625: PUSH
56626: LD_INT 28
56628: PUSH
56629: LD_INT 7
56631: PUSH
56632: LD_INT 27
56634: PUSH
56635: LD_INT 29
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: IN
56650: PUSH
56651: LD_VAR 0 1
56655: PPUSH
56656: LD_INT 52
56658: PPUSH
56659: CALL_OW 321
56663: PUSH
56664: LD_INT 2
56666: EQUAL
56667: AND
56668: IFFALSE 56685
// bpoints := bpoints * 1.2 ;
56670: LD_ADDR_VAR 0 10
56674: PUSH
56675: LD_VAR 0 10
56679: PUSH
56680: LD_REAL  1.20000000000000E+0000
56683: MUL
56684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
56685: LD_VAR 0 6
56689: PPUSH
56690: CALL_OW 264
56694: PUSH
56695: LD_INT 6
56697: PUSH
56698: LD_INT 46
56700: PUSH
56701: LD_INT 47
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: IN
56709: IFFALSE 56726
// bpoints := bpoints * 1.2 ;
56711: LD_ADDR_VAR 0 10
56715: PUSH
56716: LD_VAR 0 10
56720: PUSH
56721: LD_REAL  1.20000000000000E+0000
56724: MUL
56725: ST_TO_ADDR
// end ; unit_building :
56726: GO 56740
56728: LD_INT 3
56730: DOUBLE
56731: EQUAL
56732: IFTRUE 56736
56734: GO 56739
56736: POP
// ; end ;
56737: GO 56740
56739: POP
// for j = 1 to 3 do
56740: LD_ADDR_VAR 0 7
56744: PUSH
56745: DOUBLE
56746: LD_INT 1
56748: DEC
56749: ST_TO_ADDR
56750: LD_INT 3
56752: PUSH
56753: FOR_TO
56754: IFFALSE 56807
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
56756: LD_ADDR_VAR 0 5
56760: PUSH
56761: LD_VAR 0 5
56765: PPUSH
56766: LD_VAR 0 7
56770: PPUSH
56771: LD_VAR 0 5
56775: PUSH
56776: LD_VAR 0 7
56780: ARRAY
56781: PUSH
56782: LD_VAR 0 9
56786: PUSH
56787: LD_VAR 0 7
56791: ARRAY
56792: PUSH
56793: LD_VAR 0 10
56797: MUL
56798: PLUS
56799: PPUSH
56800: CALL_OW 1
56804: ST_TO_ADDR
56805: GO 56753
56807: POP
56808: POP
// end ;
56809: GO 55292
56811: POP
56812: POP
// result := Replace ( result , 4 , tmp ) ;
56813: LD_ADDR_VAR 0 5
56817: PUSH
56818: LD_VAR 0 5
56822: PPUSH
56823: LD_INT 4
56825: PPUSH
56826: LD_VAR 0 8
56830: PPUSH
56831: CALL_OW 1
56835: ST_TO_ADDR
// end ;
56836: LD_VAR 0 5
56840: RET
// export function DangerAtRange ( unit , range ) ; begin
56841: LD_INT 0
56843: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
56844: LD_ADDR_VAR 0 3
56848: PUSH
56849: LD_VAR 0 1
56853: PPUSH
56854: CALL_OW 255
56858: PPUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: CALL_OW 250
56868: PPUSH
56869: LD_VAR 0 1
56873: PPUSH
56874: CALL_OW 251
56878: PPUSH
56879: LD_VAR 0 2
56883: PPUSH
56884: CALL 55144 0 4
56888: ST_TO_ADDR
// end ;
56889: LD_VAR 0 3
56893: RET
// export function DangerInArea ( side , area ) ; begin
56894: LD_INT 0
56896: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
56897: LD_ADDR_VAR 0 3
56901: PUSH
56902: LD_VAR 0 2
56906: PPUSH
56907: LD_INT 81
56909: PUSH
56910: LD_VAR 0 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PPUSH
56919: CALL_OW 70
56923: ST_TO_ADDR
// end ;
56924: LD_VAR 0 3
56928: RET
// export function IsExtension ( b ) ; begin
56929: LD_INT 0
56931: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
56932: LD_ADDR_VAR 0 2
56936: PUSH
56937: LD_VAR 0 1
56941: PUSH
56942: LD_INT 23
56944: PUSH
56945: LD_INT 20
56947: PUSH
56948: LD_INT 22
56950: PUSH
56951: LD_INT 17
56953: PUSH
56954: LD_INT 24
56956: PUSH
56957: LD_INT 21
56959: PUSH
56960: LD_INT 19
56962: PUSH
56963: LD_INT 16
56965: PUSH
56966: LD_INT 25
56968: PUSH
56969: LD_INT 18
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: IN
56984: ST_TO_ADDR
// end ;
56985: LD_VAR 0 2
56989: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
56990: LD_INT 0
56992: PPUSH
56993: PPUSH
56994: PPUSH
// result := [ ] ;
56995: LD_ADDR_VAR 0 3
56999: PUSH
57000: EMPTY
57001: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57002: LD_ADDR_VAR 0 4
57006: PUSH
57007: LD_VAR 0 2
57011: PPUSH
57012: LD_INT 21
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PPUSH
57022: CALL_OW 70
57026: ST_TO_ADDR
// if not tmp then
57027: LD_VAR 0 4
57031: NOT
57032: IFFALSE 57036
// exit ;
57034: GO 57094
// for i in tmp do
57036: LD_ADDR_VAR 0 5
57040: PUSH
57041: LD_VAR 0 4
57045: PUSH
57046: FOR_IN
57047: IFFALSE 57082
// if GetBase ( i ) <> base then
57049: LD_VAR 0 5
57053: PPUSH
57054: CALL_OW 274
57058: PUSH
57059: LD_VAR 0 1
57063: NONEQUAL
57064: IFFALSE 57080
// ComLinkToBase ( base , i ) ;
57066: LD_VAR 0 1
57070: PPUSH
57071: LD_VAR 0 5
57075: PPUSH
57076: CALL_OW 169
57080: GO 57046
57082: POP
57083: POP
// result := tmp ;
57084: LD_ADDR_VAR 0 3
57088: PUSH
57089: LD_VAR 0 4
57093: ST_TO_ADDR
// end ;
57094: LD_VAR 0 3
57098: RET
// export function ComComplete ( unit , b ) ; var i ; begin
57099: LD_INT 0
57101: PPUSH
57102: PPUSH
// if BuildingStatus ( b ) = bs_build then
57103: LD_VAR 0 2
57107: PPUSH
57108: CALL_OW 461
57112: PUSH
57113: LD_INT 1
57115: EQUAL
57116: IFFALSE 57176
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
57118: LD_VAR 0 1
57122: PPUSH
57123: LD_STRING h
57125: PUSH
57126: LD_VAR 0 2
57130: PPUSH
57131: CALL_OW 250
57135: PUSH
57136: LD_VAR 0 2
57140: PPUSH
57141: CALL_OW 251
57145: PUSH
57146: LD_VAR 0 2
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: PUSH
57169: EMPTY
57170: LIST
57171: PPUSH
57172: CALL_OW 446
// end ;
57176: LD_VAR 0 3
57180: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
57181: LD_INT 0
57183: PPUSH
57184: PPUSH
57185: PPUSH
57186: PPUSH
57187: PPUSH
57188: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
57189: LD_VAR 0 1
57193: NOT
57194: PUSH
57195: LD_VAR 0 1
57199: PPUSH
57200: CALL_OW 263
57204: PUSH
57205: LD_INT 2
57207: EQUAL
57208: NOT
57209: OR
57210: IFFALSE 57214
// exit ;
57212: GO 57530
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
57214: LD_ADDR_VAR 0 6
57218: PUSH
57219: LD_INT 22
57221: PUSH
57222: LD_VAR 0 1
57226: PPUSH
57227: CALL_OW 255
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: LD_INT 30
57241: PUSH
57242: LD_INT 36
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 34
57251: PUSH
57252: LD_INT 31
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PPUSH
57268: CALL_OW 69
57272: ST_TO_ADDR
// if not tmp then
57273: LD_VAR 0 6
57277: NOT
57278: IFFALSE 57282
// exit ;
57280: GO 57530
// result := [ ] ;
57282: LD_ADDR_VAR 0 2
57286: PUSH
57287: EMPTY
57288: ST_TO_ADDR
// for i in tmp do
57289: LD_ADDR_VAR 0 3
57293: PUSH
57294: LD_VAR 0 6
57298: PUSH
57299: FOR_IN
57300: IFFALSE 57371
// begin t := UnitsInside ( i ) ;
57302: LD_ADDR_VAR 0 4
57306: PUSH
57307: LD_VAR 0 3
57311: PPUSH
57312: CALL_OW 313
57316: ST_TO_ADDR
// if t then
57317: LD_VAR 0 4
57321: IFFALSE 57369
// for j in t do
57323: LD_ADDR_VAR 0 7
57327: PUSH
57328: LD_VAR 0 4
57332: PUSH
57333: FOR_IN
57334: IFFALSE 57367
// result := Insert ( result , result + 1 , j ) ;
57336: LD_ADDR_VAR 0 2
57340: PUSH
57341: LD_VAR 0 2
57345: PPUSH
57346: LD_VAR 0 2
57350: PUSH
57351: LD_INT 1
57353: PLUS
57354: PPUSH
57355: LD_VAR 0 7
57359: PPUSH
57360: CALL_OW 2
57364: ST_TO_ADDR
57365: GO 57333
57367: POP
57368: POP
// end ;
57369: GO 57299
57371: POP
57372: POP
// if not result then
57373: LD_VAR 0 2
57377: NOT
57378: IFFALSE 57382
// exit ;
57380: GO 57530
// mech := result [ 1 ] ;
57382: LD_ADDR_VAR 0 5
57386: PUSH
57387: LD_VAR 0 2
57391: PUSH
57392: LD_INT 1
57394: ARRAY
57395: ST_TO_ADDR
// if result > 1 then
57396: LD_VAR 0 2
57400: PUSH
57401: LD_INT 1
57403: GREATER
57404: IFFALSE 57516
// for i = 2 to result do
57406: LD_ADDR_VAR 0 3
57410: PUSH
57411: DOUBLE
57412: LD_INT 2
57414: DEC
57415: ST_TO_ADDR
57416: LD_VAR 0 2
57420: PUSH
57421: FOR_TO
57422: IFFALSE 57514
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
57424: LD_ADDR_VAR 0 4
57428: PUSH
57429: LD_VAR 0 2
57433: PUSH
57434: LD_VAR 0 3
57438: ARRAY
57439: PPUSH
57440: LD_INT 3
57442: PPUSH
57443: CALL_OW 259
57447: PUSH
57448: LD_VAR 0 2
57452: PUSH
57453: LD_VAR 0 3
57457: ARRAY
57458: PPUSH
57459: CALL_OW 432
57463: MINUS
57464: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
57465: LD_VAR 0 4
57469: PUSH
57470: LD_VAR 0 5
57474: PPUSH
57475: LD_INT 3
57477: PPUSH
57478: CALL_OW 259
57482: PUSH
57483: LD_VAR 0 5
57487: PPUSH
57488: CALL_OW 432
57492: MINUS
57493: GREATEREQUAL
57494: IFFALSE 57512
// mech := result [ i ] ;
57496: LD_ADDR_VAR 0 5
57500: PUSH
57501: LD_VAR 0 2
57505: PUSH
57506: LD_VAR 0 3
57510: ARRAY
57511: ST_TO_ADDR
// end ;
57512: GO 57421
57514: POP
57515: POP
// ComLinkTo ( vehicle , mech ) ;
57516: LD_VAR 0 1
57520: PPUSH
57521: LD_VAR 0 5
57525: PPUSH
57526: CALL_OW 135
// end ;
57530: LD_VAR 0 2
57534: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
57535: LD_INT 0
57537: PPUSH
57538: PPUSH
57539: PPUSH
57540: PPUSH
57541: PPUSH
57542: PPUSH
57543: PPUSH
57544: PPUSH
57545: PPUSH
57546: PPUSH
57547: PPUSH
57548: PPUSH
57549: PPUSH
// result := [ ] ;
57550: LD_ADDR_VAR 0 7
57554: PUSH
57555: EMPTY
57556: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
57557: LD_VAR 0 1
57561: PPUSH
57562: CALL_OW 266
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: IN
57577: NOT
57578: IFFALSE 57582
// exit ;
57580: GO 59213
// if name then
57582: LD_VAR 0 3
57586: IFFALSE 57602
// SetBName ( base_dep , name ) ;
57588: LD_VAR 0 1
57592: PPUSH
57593: LD_VAR 0 3
57597: PPUSH
57598: CALL_OW 500
// base := GetBase ( base_dep ) ;
57602: LD_ADDR_VAR 0 15
57606: PUSH
57607: LD_VAR 0 1
57611: PPUSH
57612: CALL_OW 274
57616: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
57617: LD_ADDR_VAR 0 16
57621: PUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL_OW 255
57631: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
57632: LD_ADDR_VAR 0 17
57636: PUSH
57637: LD_VAR 0 1
57641: PPUSH
57642: CALL_OW 248
57646: ST_TO_ADDR
// if sources then
57647: LD_VAR 0 5
57651: IFFALSE 57698
// for i = 1 to 3 do
57653: LD_ADDR_VAR 0 8
57657: PUSH
57658: DOUBLE
57659: LD_INT 1
57661: DEC
57662: ST_TO_ADDR
57663: LD_INT 3
57665: PUSH
57666: FOR_TO
57667: IFFALSE 57696
// AddResourceType ( base , i , sources [ i ] ) ;
57669: LD_VAR 0 15
57673: PPUSH
57674: LD_VAR 0 8
57678: PPUSH
57679: LD_VAR 0 5
57683: PUSH
57684: LD_VAR 0 8
57688: ARRAY
57689: PPUSH
57690: CALL_OW 276
57694: GO 57666
57696: POP
57697: POP
// buildings := GetBaseBuildings ( base , area ) ;
57698: LD_ADDR_VAR 0 18
57702: PUSH
57703: LD_VAR 0 15
57707: PPUSH
57708: LD_VAR 0 2
57712: PPUSH
57713: CALL 56990 0 2
57717: ST_TO_ADDR
// InitHc ;
57718: CALL_OW 19
// InitUc ;
57722: CALL_OW 18
// uc_side := side ;
57726: LD_ADDR_OWVAR 20
57730: PUSH
57731: LD_VAR 0 16
57735: ST_TO_ADDR
// uc_nation := nation ;
57736: LD_ADDR_OWVAR 21
57740: PUSH
57741: LD_VAR 0 17
57745: ST_TO_ADDR
// if buildings then
57746: LD_VAR 0 18
57750: IFFALSE 59072
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
57752: LD_ADDR_VAR 0 19
57756: PUSH
57757: LD_VAR 0 18
57761: PPUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 30
57767: PUSH
57768: LD_INT 29
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 30
57777: PUSH
57778: LD_INT 30
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: PPUSH
57790: CALL_OW 72
57794: ST_TO_ADDR
// if tmp then
57795: LD_VAR 0 19
57799: IFFALSE 57847
// for i in tmp do
57801: LD_ADDR_VAR 0 8
57805: PUSH
57806: LD_VAR 0 19
57810: PUSH
57811: FOR_IN
57812: IFFALSE 57845
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
57814: LD_VAR 0 8
57818: PPUSH
57819: CALL_OW 250
57823: PPUSH
57824: LD_VAR 0 8
57828: PPUSH
57829: CALL_OW 251
57833: PPUSH
57834: LD_VAR 0 16
57838: PPUSH
57839: CALL_OW 441
57843: GO 57811
57845: POP
57846: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
57847: LD_VAR 0 18
57851: PPUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 30
57857: PUSH
57858: LD_INT 32
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 30
57867: PUSH
57868: LD_INT 33
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: PPUSH
57880: CALL_OW 72
57884: IFFALSE 57972
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
57886: LD_ADDR_VAR 0 8
57890: PUSH
57891: LD_VAR 0 18
57895: PPUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 30
57901: PUSH
57902: LD_INT 32
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 30
57911: PUSH
57912: LD_INT 33
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: PPUSH
57924: CALL_OW 72
57928: PUSH
57929: FOR_IN
57930: IFFALSE 57970
// begin if not GetBWeapon ( i ) then
57932: LD_VAR 0 8
57936: PPUSH
57937: CALL_OW 269
57941: NOT
57942: IFFALSE 57968
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
57944: LD_VAR 0 8
57948: PPUSH
57949: LD_VAR 0 8
57953: PPUSH
57954: LD_VAR 0 2
57958: PPUSH
57959: CALL 59218 0 2
57963: PPUSH
57964: CALL_OW 431
// end ;
57968: GO 57929
57970: POP
57971: POP
// end ; for i = 1 to personel do
57972: LD_ADDR_VAR 0 8
57976: PUSH
57977: DOUBLE
57978: LD_INT 1
57980: DEC
57981: ST_TO_ADDR
57982: LD_VAR 0 6
57986: PUSH
57987: FOR_TO
57988: IFFALSE 59052
// begin if i > 4 then
57990: LD_VAR 0 8
57994: PUSH
57995: LD_INT 4
57997: GREATER
57998: IFFALSE 58002
// break ;
58000: GO 59052
// case i of 1 :
58002: LD_VAR 0 8
58006: PUSH
58007: LD_INT 1
58009: DOUBLE
58010: EQUAL
58011: IFTRUE 58015
58013: GO 58095
58015: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58016: LD_ADDR_VAR 0 12
58020: PUSH
58021: LD_VAR 0 18
58025: PPUSH
58026: LD_INT 22
58028: PUSH
58029: LD_VAR 0 16
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 58
58040: PUSH
58041: EMPTY
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 30
58049: PUSH
58050: LD_INT 32
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 30
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 30
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: PPUSH
58088: CALL_OW 72
58092: ST_TO_ADDR
58093: GO 58317
58095: LD_INT 2
58097: DOUBLE
58098: EQUAL
58099: IFTRUE 58103
58101: GO 58165
58103: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
58104: LD_ADDR_VAR 0 12
58108: PUSH
58109: LD_VAR 0 18
58113: PPUSH
58114: LD_INT 22
58116: PUSH
58117: LD_VAR 0 16
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 30
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 30
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PPUSH
58158: CALL_OW 72
58162: ST_TO_ADDR
58163: GO 58317
58165: LD_INT 3
58167: DOUBLE
58168: EQUAL
58169: IFTRUE 58173
58171: GO 58235
58173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
58174: LD_ADDR_VAR 0 12
58178: PUSH
58179: LD_VAR 0 18
58183: PPUSH
58184: LD_INT 22
58186: PUSH
58187: LD_VAR 0 16
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 30
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 30
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PPUSH
58228: CALL_OW 72
58232: ST_TO_ADDR
58233: GO 58317
58235: LD_INT 4
58237: DOUBLE
58238: EQUAL
58239: IFTRUE 58243
58241: GO 58316
58243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
58244: LD_ADDR_VAR 0 12
58248: PUSH
58249: LD_VAR 0 18
58253: PPUSH
58254: LD_INT 22
58256: PUSH
58257: LD_VAR 0 16
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 30
58271: PUSH
58272: LD_INT 6
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 30
58281: PUSH
58282: LD_INT 7
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 30
58291: PUSH
58292: LD_INT 8
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PPUSH
58309: CALL_OW 72
58313: ST_TO_ADDR
58314: GO 58317
58316: POP
// if i = 1 then
58317: LD_VAR 0 8
58321: PUSH
58322: LD_INT 1
58324: EQUAL
58325: IFFALSE 58436
// begin tmp := [ ] ;
58327: LD_ADDR_VAR 0 19
58331: PUSH
58332: EMPTY
58333: ST_TO_ADDR
// for j in f do
58334: LD_ADDR_VAR 0 9
58338: PUSH
58339: LD_VAR 0 12
58343: PUSH
58344: FOR_IN
58345: IFFALSE 58418
// if GetBType ( j ) = b_bunker then
58347: LD_VAR 0 9
58351: PPUSH
58352: CALL_OW 266
58356: PUSH
58357: LD_INT 32
58359: EQUAL
58360: IFFALSE 58387
// tmp := Insert ( tmp , 1 , j ) else
58362: LD_ADDR_VAR 0 19
58366: PUSH
58367: LD_VAR 0 19
58371: PPUSH
58372: LD_INT 1
58374: PPUSH
58375: LD_VAR 0 9
58379: PPUSH
58380: CALL_OW 2
58384: ST_TO_ADDR
58385: GO 58416
// tmp := Insert ( tmp , tmp + 1 , j ) ;
58387: LD_ADDR_VAR 0 19
58391: PUSH
58392: LD_VAR 0 19
58396: PPUSH
58397: LD_VAR 0 19
58401: PUSH
58402: LD_INT 1
58404: PLUS
58405: PPUSH
58406: LD_VAR 0 9
58410: PPUSH
58411: CALL_OW 2
58415: ST_TO_ADDR
58416: GO 58344
58418: POP
58419: POP
// if tmp then
58420: LD_VAR 0 19
58424: IFFALSE 58436
// f := tmp ;
58426: LD_ADDR_VAR 0 12
58430: PUSH
58431: LD_VAR 0 19
58435: ST_TO_ADDR
// end ; x := personel [ i ] ;
58436: LD_ADDR_VAR 0 13
58440: PUSH
58441: LD_VAR 0 6
58445: PUSH
58446: LD_VAR 0 8
58450: ARRAY
58451: ST_TO_ADDR
// if x = - 1 then
58452: LD_VAR 0 13
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: EQUAL
58461: IFFALSE 58670
// begin for j in f do
58463: LD_ADDR_VAR 0 9
58467: PUSH
58468: LD_VAR 0 12
58472: PUSH
58473: FOR_IN
58474: IFFALSE 58666
// repeat InitHc ;
58476: CALL_OW 19
// if GetBType ( j ) = b_barracks then
58480: LD_VAR 0 9
58484: PPUSH
58485: CALL_OW 266
58489: PUSH
58490: LD_INT 5
58492: EQUAL
58493: IFFALSE 58563
// begin if UnitsInside ( j ) < 3 then
58495: LD_VAR 0 9
58499: PPUSH
58500: CALL_OW 313
58504: PUSH
58505: LD_INT 3
58507: LESS
58508: IFFALSE 58544
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58510: LD_INT 0
58512: PPUSH
58513: LD_INT 5
58515: PUSH
58516: LD_INT 8
58518: PUSH
58519: LD_INT 9
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: PUSH
58527: LD_VAR 0 17
58531: ARRAY
58532: PPUSH
58533: LD_VAR 0 4
58537: PPUSH
58538: CALL_OW 380
58542: GO 58561
// PrepareHuman ( false , i , skill ) ;
58544: LD_INT 0
58546: PPUSH
58547: LD_VAR 0 8
58551: PPUSH
58552: LD_VAR 0 4
58556: PPUSH
58557: CALL_OW 380
// end else
58561: GO 58580
// PrepareHuman ( false , i , skill ) ;
58563: LD_INT 0
58565: PPUSH
58566: LD_VAR 0 8
58570: PPUSH
58571: LD_VAR 0 4
58575: PPUSH
58576: CALL_OW 380
// un := CreateHuman ;
58580: LD_ADDR_VAR 0 14
58584: PUSH
58585: CALL_OW 44
58589: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58590: LD_ADDR_VAR 0 7
58594: PUSH
58595: LD_VAR 0 7
58599: PPUSH
58600: LD_INT 1
58602: PPUSH
58603: LD_VAR 0 14
58607: PPUSH
58608: CALL_OW 2
58612: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
58613: LD_VAR 0 14
58617: PPUSH
58618: LD_VAR 0 9
58622: PPUSH
58623: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
58627: LD_VAR 0 9
58631: PPUSH
58632: CALL_OW 313
58636: PUSH
58637: LD_INT 6
58639: EQUAL
58640: PUSH
58641: LD_VAR 0 9
58645: PPUSH
58646: CALL_OW 266
58650: PUSH
58651: LD_INT 32
58653: PUSH
58654: LD_INT 31
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: IN
58661: OR
58662: IFFALSE 58476
58664: GO 58473
58666: POP
58667: POP
// end else
58668: GO 59050
// for j = 1 to x do
58670: LD_ADDR_VAR 0 9
58674: PUSH
58675: DOUBLE
58676: LD_INT 1
58678: DEC
58679: ST_TO_ADDR
58680: LD_VAR 0 13
58684: PUSH
58685: FOR_TO
58686: IFFALSE 59048
// begin InitHc ;
58688: CALL_OW 19
// if not f then
58692: LD_VAR 0 12
58696: NOT
58697: IFFALSE 58786
// begin PrepareHuman ( false , i , skill ) ;
58699: LD_INT 0
58701: PPUSH
58702: LD_VAR 0 8
58706: PPUSH
58707: LD_VAR 0 4
58711: PPUSH
58712: CALL_OW 380
// un := CreateHuman ;
58716: LD_ADDR_VAR 0 14
58720: PUSH
58721: CALL_OW 44
58725: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58726: LD_ADDR_VAR 0 7
58730: PUSH
58731: LD_VAR 0 7
58735: PPUSH
58736: LD_INT 1
58738: PPUSH
58739: LD_VAR 0 14
58743: PPUSH
58744: CALL_OW 2
58748: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58749: LD_VAR 0 14
58753: PPUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: CALL_OW 250
58763: PPUSH
58764: LD_VAR 0 1
58768: PPUSH
58769: CALL_OW 251
58773: PPUSH
58774: LD_INT 10
58776: PPUSH
58777: LD_INT 0
58779: PPUSH
58780: CALL_OW 50
// continue ;
58784: GO 58685
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
58786: LD_VAR 0 12
58790: PUSH
58791: LD_INT 1
58793: ARRAY
58794: PPUSH
58795: CALL_OW 313
58799: PUSH
58800: LD_VAR 0 12
58804: PUSH
58805: LD_INT 1
58807: ARRAY
58808: PPUSH
58809: CALL_OW 266
58813: PUSH
58814: LD_INT 32
58816: PUSH
58817: LD_INT 31
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: IN
58824: AND
58825: PUSH
58826: LD_VAR 0 12
58830: PUSH
58831: LD_INT 1
58833: ARRAY
58834: PPUSH
58835: CALL_OW 313
58839: PUSH
58840: LD_INT 6
58842: EQUAL
58843: OR
58844: IFFALSE 58864
// f := Delete ( f , 1 ) ;
58846: LD_ADDR_VAR 0 12
58850: PUSH
58851: LD_VAR 0 12
58855: PPUSH
58856: LD_INT 1
58858: PPUSH
58859: CALL_OW 3
58863: ST_TO_ADDR
// if not f then
58864: LD_VAR 0 12
58868: NOT
58869: IFFALSE 58887
// begin x := x + 2 ;
58871: LD_ADDR_VAR 0 13
58875: PUSH
58876: LD_VAR 0 13
58880: PUSH
58881: LD_INT 2
58883: PLUS
58884: ST_TO_ADDR
// continue ;
58885: GO 58685
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
58887: LD_VAR 0 12
58891: PUSH
58892: LD_INT 1
58894: ARRAY
58895: PPUSH
58896: CALL_OW 266
58900: PUSH
58901: LD_INT 5
58903: EQUAL
58904: IFFALSE 58978
// begin if UnitsInside ( f [ 1 ] ) < 3 then
58906: LD_VAR 0 12
58910: PUSH
58911: LD_INT 1
58913: ARRAY
58914: PPUSH
58915: CALL_OW 313
58919: PUSH
58920: LD_INT 3
58922: LESS
58923: IFFALSE 58959
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58925: LD_INT 0
58927: PPUSH
58928: LD_INT 5
58930: PUSH
58931: LD_INT 8
58933: PUSH
58934: LD_INT 9
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: PUSH
58942: LD_VAR 0 17
58946: ARRAY
58947: PPUSH
58948: LD_VAR 0 4
58952: PPUSH
58953: CALL_OW 380
58957: GO 58976
// PrepareHuman ( false , i , skill ) ;
58959: LD_INT 0
58961: PPUSH
58962: LD_VAR 0 8
58966: PPUSH
58967: LD_VAR 0 4
58971: PPUSH
58972: CALL_OW 380
// end else
58976: GO 58995
// PrepareHuman ( false , i , skill ) ;
58978: LD_INT 0
58980: PPUSH
58981: LD_VAR 0 8
58985: PPUSH
58986: LD_VAR 0 4
58990: PPUSH
58991: CALL_OW 380
// un := CreateHuman ;
58995: LD_ADDR_VAR 0 14
58999: PUSH
59000: CALL_OW 44
59004: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59005: LD_ADDR_VAR 0 7
59009: PUSH
59010: LD_VAR 0 7
59014: PPUSH
59015: LD_INT 1
59017: PPUSH
59018: LD_VAR 0 14
59022: PPUSH
59023: CALL_OW 2
59027: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
59028: LD_VAR 0 14
59032: PPUSH
59033: LD_VAR 0 12
59037: PUSH
59038: LD_INT 1
59040: ARRAY
59041: PPUSH
59042: CALL_OW 52
// end ;
59046: GO 58685
59048: POP
59049: POP
// end ;
59050: GO 57987
59052: POP
59053: POP
// result := result ^ buildings ;
59054: LD_ADDR_VAR 0 7
59058: PUSH
59059: LD_VAR 0 7
59063: PUSH
59064: LD_VAR 0 18
59068: ADD
59069: ST_TO_ADDR
// end else
59070: GO 59213
// begin for i = 1 to personel do
59072: LD_ADDR_VAR 0 8
59076: PUSH
59077: DOUBLE
59078: LD_INT 1
59080: DEC
59081: ST_TO_ADDR
59082: LD_VAR 0 6
59086: PUSH
59087: FOR_TO
59088: IFFALSE 59211
// begin if i > 4 then
59090: LD_VAR 0 8
59094: PUSH
59095: LD_INT 4
59097: GREATER
59098: IFFALSE 59102
// break ;
59100: GO 59211
// x := personel [ i ] ;
59102: LD_ADDR_VAR 0 13
59106: PUSH
59107: LD_VAR 0 6
59111: PUSH
59112: LD_VAR 0 8
59116: ARRAY
59117: ST_TO_ADDR
// if x = - 1 then
59118: LD_VAR 0 13
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: EQUAL
59127: IFFALSE 59131
// continue ;
59129: GO 59087
// PrepareHuman ( false , i , skill ) ;
59131: LD_INT 0
59133: PPUSH
59134: LD_VAR 0 8
59138: PPUSH
59139: LD_VAR 0 4
59143: PPUSH
59144: CALL_OW 380
// un := CreateHuman ;
59148: LD_ADDR_VAR 0 14
59152: PUSH
59153: CALL_OW 44
59157: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59158: LD_VAR 0 14
59162: PPUSH
59163: LD_VAR 0 1
59167: PPUSH
59168: CALL_OW 250
59172: PPUSH
59173: LD_VAR 0 1
59177: PPUSH
59178: CALL_OW 251
59182: PPUSH
59183: LD_INT 10
59185: PPUSH
59186: LD_INT 0
59188: PPUSH
59189: CALL_OW 50
// result := result ^ un ;
59193: LD_ADDR_VAR 0 7
59197: PUSH
59198: LD_VAR 0 7
59202: PUSH
59203: LD_VAR 0 14
59207: ADD
59208: ST_TO_ADDR
// end ;
59209: GO 59087
59211: POP
59212: POP
// end ; end ;
59213: LD_VAR 0 7
59217: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
59218: LD_INT 0
59220: PPUSH
59221: PPUSH
59222: PPUSH
59223: PPUSH
59224: PPUSH
59225: PPUSH
59226: PPUSH
59227: PPUSH
59228: PPUSH
59229: PPUSH
59230: PPUSH
59231: PPUSH
59232: PPUSH
59233: PPUSH
59234: PPUSH
59235: PPUSH
// result := false ;
59236: LD_ADDR_VAR 0 3
59240: PUSH
59241: LD_INT 0
59243: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
59244: LD_VAR 0 1
59248: NOT
59249: PUSH
59250: LD_VAR 0 1
59254: PPUSH
59255: CALL_OW 266
59259: PUSH
59260: LD_INT 32
59262: PUSH
59263: LD_INT 33
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: IN
59270: NOT
59271: OR
59272: IFFALSE 59276
// exit ;
59274: GO 60412
// nat := GetNation ( tower ) ;
59276: LD_ADDR_VAR 0 12
59280: PUSH
59281: LD_VAR 0 1
59285: PPUSH
59286: CALL_OW 248
59290: ST_TO_ADDR
// side := GetSide ( tower ) ;
59291: LD_ADDR_VAR 0 16
59295: PUSH
59296: LD_VAR 0 1
59300: PPUSH
59301: CALL_OW 255
59305: ST_TO_ADDR
// x := GetX ( tower ) ;
59306: LD_ADDR_VAR 0 10
59310: PUSH
59311: LD_VAR 0 1
59315: PPUSH
59316: CALL_OW 250
59320: ST_TO_ADDR
// y := GetY ( tower ) ;
59321: LD_ADDR_VAR 0 11
59325: PUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL_OW 251
59335: ST_TO_ADDR
// if not x or not y then
59336: LD_VAR 0 10
59340: NOT
59341: PUSH
59342: LD_VAR 0 11
59346: NOT
59347: OR
59348: IFFALSE 59352
// exit ;
59350: GO 60412
// weapon := 0 ;
59352: LD_ADDR_VAR 0 18
59356: PUSH
59357: LD_INT 0
59359: ST_TO_ADDR
// fac_list := [ ] ;
59360: LD_ADDR_VAR 0 17
59364: PUSH
59365: EMPTY
59366: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
59367: LD_ADDR_VAR 0 6
59371: PUSH
59372: LD_VAR 0 1
59376: PPUSH
59377: CALL_OW 274
59381: PPUSH
59382: LD_VAR 0 2
59386: PPUSH
59387: CALL 56990 0 2
59391: PPUSH
59392: LD_INT 30
59394: PUSH
59395: LD_INT 3
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PPUSH
59402: CALL_OW 72
59406: ST_TO_ADDR
// if not factories then
59407: LD_VAR 0 6
59411: NOT
59412: IFFALSE 59416
// exit ;
59414: GO 60412
// for i in factories do
59416: LD_ADDR_VAR 0 8
59420: PUSH
59421: LD_VAR 0 6
59425: PUSH
59426: FOR_IN
59427: IFFALSE 59452
// fac_list := fac_list union AvailableWeaponList ( i ) ;
59429: LD_ADDR_VAR 0 17
59433: PUSH
59434: LD_VAR 0 17
59438: PUSH
59439: LD_VAR 0 8
59443: PPUSH
59444: CALL_OW 478
59448: UNION
59449: ST_TO_ADDR
59450: GO 59426
59452: POP
59453: POP
// if not fac_list then
59454: LD_VAR 0 17
59458: NOT
59459: IFFALSE 59463
// exit ;
59461: GO 60412
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
59463: LD_ADDR_VAR 0 5
59467: PUSH
59468: LD_INT 4
59470: PUSH
59471: LD_INT 5
59473: PUSH
59474: LD_INT 9
59476: PUSH
59477: LD_INT 10
59479: PUSH
59480: LD_INT 6
59482: PUSH
59483: LD_INT 7
59485: PUSH
59486: LD_INT 11
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 27
59500: PUSH
59501: LD_INT 28
59503: PUSH
59504: LD_INT 26
59506: PUSH
59507: LD_INT 30
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 43
59518: PUSH
59519: LD_INT 44
59521: PUSH
59522: LD_INT 46
59524: PUSH
59525: LD_INT 45
59527: PUSH
59528: LD_INT 47
59530: PUSH
59531: LD_INT 49
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: PUSH
59547: LD_VAR 0 12
59551: ARRAY
59552: ST_TO_ADDR
// for i in list do
59553: LD_ADDR_VAR 0 8
59557: PUSH
59558: LD_VAR 0 5
59562: PUSH
59563: FOR_IN
59564: IFFALSE 59597
// if not i in fac_list then
59566: LD_VAR 0 8
59570: PUSH
59571: LD_VAR 0 17
59575: IN
59576: NOT
59577: IFFALSE 59595
// list := list diff i ;
59579: LD_ADDR_VAR 0 5
59583: PUSH
59584: LD_VAR 0 5
59588: PUSH
59589: LD_VAR 0 8
59593: DIFF
59594: ST_TO_ADDR
59595: GO 59563
59597: POP
59598: POP
// if not list then
59599: LD_VAR 0 5
59603: NOT
59604: IFFALSE 59608
// exit ;
59606: GO 60412
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
59608: LD_VAR 0 12
59612: PUSH
59613: LD_INT 3
59615: EQUAL
59616: PUSH
59617: LD_INT 49
59619: PUSH
59620: LD_VAR 0 5
59624: IN
59625: AND
59626: PUSH
59627: LD_INT 31
59629: PPUSH
59630: LD_VAR 0 16
59634: PPUSH
59635: CALL_OW 321
59639: PUSH
59640: LD_INT 2
59642: EQUAL
59643: AND
59644: IFFALSE 59704
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
59646: LD_INT 22
59648: PUSH
59649: LD_VAR 0 16
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 35
59660: PUSH
59661: LD_INT 49
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 91
59670: PUSH
59671: LD_VAR 0 1
59675: PUSH
59676: LD_INT 10
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: PPUSH
59689: CALL_OW 69
59693: NOT
59694: IFFALSE 59704
// weapon := ru_time_lapser ;
59696: LD_ADDR_VAR 0 18
59700: PUSH
59701: LD_INT 49
59703: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
59704: LD_VAR 0 12
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: IN
59719: PUSH
59720: LD_INT 11
59722: PUSH
59723: LD_VAR 0 5
59727: IN
59728: PUSH
59729: LD_INT 30
59731: PUSH
59732: LD_VAR 0 5
59736: IN
59737: OR
59738: AND
59739: PUSH
59740: LD_INT 6
59742: PPUSH
59743: LD_VAR 0 16
59747: PPUSH
59748: CALL_OW 321
59752: PUSH
59753: LD_INT 2
59755: EQUAL
59756: AND
59757: IFFALSE 59922
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
59759: LD_INT 22
59761: PUSH
59762: LD_VAR 0 16
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 35
59776: PUSH
59777: LD_INT 11
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 35
59786: PUSH
59787: LD_INT 30
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 91
59801: PUSH
59802: LD_VAR 0 1
59806: PUSH
59807: LD_INT 18
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: PPUSH
59820: CALL_OW 69
59824: NOT
59825: PUSH
59826: LD_INT 22
59828: PUSH
59829: LD_VAR 0 16
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: LD_INT 30
59843: PUSH
59844: LD_INT 32
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 30
59853: PUSH
59854: LD_INT 33
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 91
59868: PUSH
59869: LD_VAR 0 1
59873: PUSH
59874: LD_INT 12
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: PUSH
59887: EMPTY
59888: LIST
59889: PPUSH
59890: CALL_OW 69
59894: PUSH
59895: LD_INT 2
59897: GREATER
59898: AND
59899: IFFALSE 59922
// weapon := [ us_radar , ar_radar ] [ nat ] ;
59901: LD_ADDR_VAR 0 18
59905: PUSH
59906: LD_INT 11
59908: PUSH
59909: LD_INT 30
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_VAR 0 12
59920: ARRAY
59921: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
59922: LD_VAR 0 18
59926: NOT
59927: PUSH
59928: LD_INT 40
59930: PPUSH
59931: LD_VAR 0 16
59935: PPUSH
59936: CALL_OW 321
59940: PUSH
59941: LD_INT 2
59943: EQUAL
59944: AND
59945: PUSH
59946: LD_INT 7
59948: PUSH
59949: LD_VAR 0 5
59953: IN
59954: PUSH
59955: LD_INT 28
59957: PUSH
59958: LD_VAR 0 5
59962: IN
59963: OR
59964: PUSH
59965: LD_INT 45
59967: PUSH
59968: LD_VAR 0 5
59972: IN
59973: OR
59974: AND
59975: IFFALSE 60229
// begin hex := GetHexInfo ( x , y ) ;
59977: LD_ADDR_VAR 0 4
59981: PUSH
59982: LD_VAR 0 10
59986: PPUSH
59987: LD_VAR 0 11
59991: PPUSH
59992: CALL_OW 546
59996: ST_TO_ADDR
// if hex [ 1 ] then
59997: LD_VAR 0 4
60001: PUSH
60002: LD_INT 1
60004: ARRAY
60005: IFFALSE 60009
// exit ;
60007: GO 60412
// height := hex [ 2 ] ;
60009: LD_ADDR_VAR 0 15
60013: PUSH
60014: LD_VAR 0 4
60018: PUSH
60019: LD_INT 2
60021: ARRAY
60022: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60023: LD_ADDR_VAR 0 14
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 5
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// for i in tmp do
60046: LD_ADDR_VAR 0 8
60050: PUSH
60051: LD_VAR 0 14
60055: PUSH
60056: FOR_IN
60057: IFFALSE 60227
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
60059: LD_ADDR_VAR 0 9
60063: PUSH
60064: LD_VAR 0 10
60068: PPUSH
60069: LD_VAR 0 8
60073: PPUSH
60074: LD_INT 5
60076: PPUSH
60077: CALL_OW 272
60081: PUSH
60082: LD_VAR 0 11
60086: PPUSH
60087: LD_VAR 0 8
60091: PPUSH
60092: LD_INT 5
60094: PPUSH
60095: CALL_OW 273
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
60104: LD_VAR 0 9
60108: PUSH
60109: LD_INT 1
60111: ARRAY
60112: PPUSH
60113: LD_VAR 0 9
60117: PUSH
60118: LD_INT 2
60120: ARRAY
60121: PPUSH
60122: CALL_OW 488
60126: IFFALSE 60225
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
60128: LD_ADDR_VAR 0 4
60132: PUSH
60133: LD_VAR 0 9
60137: PUSH
60138: LD_INT 1
60140: ARRAY
60141: PPUSH
60142: LD_VAR 0 9
60146: PUSH
60147: LD_INT 2
60149: ARRAY
60150: PPUSH
60151: CALL_OW 546
60155: ST_TO_ADDR
// if hex [ 1 ] then
60156: LD_VAR 0 4
60160: PUSH
60161: LD_INT 1
60163: ARRAY
60164: IFFALSE 60168
// continue ;
60166: GO 60056
// h := hex [ 2 ] ;
60168: LD_ADDR_VAR 0 13
60172: PUSH
60173: LD_VAR 0 4
60177: PUSH
60178: LD_INT 2
60180: ARRAY
60181: ST_TO_ADDR
// if h + 7 < height then
60182: LD_VAR 0 13
60186: PUSH
60187: LD_INT 7
60189: PLUS
60190: PUSH
60191: LD_VAR 0 15
60195: LESS
60196: IFFALSE 60225
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
60198: LD_ADDR_VAR 0 18
60202: PUSH
60203: LD_INT 7
60205: PUSH
60206: LD_INT 28
60208: PUSH
60209: LD_INT 45
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: PUSH
60217: LD_VAR 0 12
60221: ARRAY
60222: ST_TO_ADDR
// break ;
60223: GO 60227
// end ; end ; end ;
60225: GO 60056
60227: POP
60228: POP
// end ; if not weapon then
60229: LD_VAR 0 18
60233: NOT
60234: IFFALSE 60294
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
60236: LD_ADDR_VAR 0 5
60240: PUSH
60241: LD_VAR 0 5
60245: PUSH
60246: LD_INT 11
60248: PUSH
60249: LD_INT 30
60251: PUSH
60252: LD_INT 49
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: DIFF
60260: ST_TO_ADDR
// if not list then
60261: LD_VAR 0 5
60265: NOT
60266: IFFALSE 60270
// exit ;
60268: GO 60412
// weapon := list [ rand ( 1 , list ) ] ;
60270: LD_ADDR_VAR 0 18
60274: PUSH
60275: LD_VAR 0 5
60279: PUSH
60280: LD_INT 1
60282: PPUSH
60283: LD_VAR 0 5
60287: PPUSH
60288: CALL_OW 12
60292: ARRAY
60293: ST_TO_ADDR
// end ; if weapon then
60294: LD_VAR 0 18
60298: IFFALSE 60412
// begin tmp := CostOfWeapon ( weapon ) ;
60300: LD_ADDR_VAR 0 14
60304: PUSH
60305: LD_VAR 0 18
60309: PPUSH
60310: CALL_OW 451
60314: ST_TO_ADDR
// j := GetBase ( tower ) ;
60315: LD_ADDR_VAR 0 9
60319: PUSH
60320: LD_VAR 0 1
60324: PPUSH
60325: CALL_OW 274
60329: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
60330: LD_VAR 0 9
60334: PPUSH
60335: LD_INT 1
60337: PPUSH
60338: CALL_OW 275
60342: PUSH
60343: LD_VAR 0 14
60347: PUSH
60348: LD_INT 1
60350: ARRAY
60351: GREATEREQUAL
60352: PUSH
60353: LD_VAR 0 9
60357: PPUSH
60358: LD_INT 2
60360: PPUSH
60361: CALL_OW 275
60365: PUSH
60366: LD_VAR 0 14
60370: PUSH
60371: LD_INT 2
60373: ARRAY
60374: GREATEREQUAL
60375: AND
60376: PUSH
60377: LD_VAR 0 9
60381: PPUSH
60382: LD_INT 3
60384: PPUSH
60385: CALL_OW 275
60389: PUSH
60390: LD_VAR 0 14
60394: PUSH
60395: LD_INT 3
60397: ARRAY
60398: GREATEREQUAL
60399: AND
60400: IFFALSE 60412
// result := weapon ;
60402: LD_ADDR_VAR 0 3
60406: PUSH
60407: LD_VAR 0 18
60411: ST_TO_ADDR
// end ; end ;
60412: LD_VAR 0 3
60416: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
60417: LD_INT 0
60419: PPUSH
60420: PPUSH
// result := true ;
60421: LD_ADDR_VAR 0 3
60425: PUSH
60426: LD_INT 1
60428: ST_TO_ADDR
// if array1 = array2 then
60429: LD_VAR 0 1
60433: PUSH
60434: LD_VAR 0 2
60438: EQUAL
60439: IFFALSE 60499
// begin for i = 1 to array1 do
60441: LD_ADDR_VAR 0 4
60445: PUSH
60446: DOUBLE
60447: LD_INT 1
60449: DEC
60450: ST_TO_ADDR
60451: LD_VAR 0 1
60455: PUSH
60456: FOR_TO
60457: IFFALSE 60495
// if array1 [ i ] <> array2 [ i ] then
60459: LD_VAR 0 1
60463: PUSH
60464: LD_VAR 0 4
60468: ARRAY
60469: PUSH
60470: LD_VAR 0 2
60474: PUSH
60475: LD_VAR 0 4
60479: ARRAY
60480: NONEQUAL
60481: IFFALSE 60493
// begin result := false ;
60483: LD_ADDR_VAR 0 3
60487: PUSH
60488: LD_INT 0
60490: ST_TO_ADDR
// break ;
60491: GO 60495
// end ;
60493: GO 60456
60495: POP
60496: POP
// end else
60497: GO 60507
// result := false ;
60499: LD_ADDR_VAR 0 3
60503: PUSH
60504: LD_INT 0
60506: ST_TO_ADDR
// end ;
60507: LD_VAR 0 3
60511: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
60512: LD_INT 0
60514: PPUSH
60515: PPUSH
60516: PPUSH
// pom := GetBase ( fac ) ;
60517: LD_ADDR_VAR 0 5
60521: PUSH
60522: LD_VAR 0 1
60526: PPUSH
60527: CALL_OW 274
60531: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
60532: LD_ADDR_VAR 0 4
60536: PUSH
60537: LD_VAR 0 2
60541: PUSH
60542: LD_INT 1
60544: ARRAY
60545: PPUSH
60546: LD_VAR 0 2
60550: PUSH
60551: LD_INT 2
60553: ARRAY
60554: PPUSH
60555: LD_VAR 0 2
60559: PUSH
60560: LD_INT 3
60562: ARRAY
60563: PPUSH
60564: LD_VAR 0 2
60568: PUSH
60569: LD_INT 4
60571: ARRAY
60572: PPUSH
60573: CALL_OW 449
60577: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60578: LD_ADDR_VAR 0 3
60582: PUSH
60583: LD_VAR 0 5
60587: PPUSH
60588: LD_INT 1
60590: PPUSH
60591: CALL_OW 275
60595: PUSH
60596: LD_VAR 0 4
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: GREATEREQUAL
60605: PUSH
60606: LD_VAR 0 5
60610: PPUSH
60611: LD_INT 2
60613: PPUSH
60614: CALL_OW 275
60618: PUSH
60619: LD_VAR 0 4
60623: PUSH
60624: LD_INT 2
60626: ARRAY
60627: GREATEREQUAL
60628: AND
60629: PUSH
60630: LD_VAR 0 5
60634: PPUSH
60635: LD_INT 3
60637: PPUSH
60638: CALL_OW 275
60642: PUSH
60643: LD_VAR 0 4
60647: PUSH
60648: LD_INT 3
60650: ARRAY
60651: GREATEREQUAL
60652: AND
60653: ST_TO_ADDR
// end ;
60654: LD_VAR 0 3
60658: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
60659: LD_INT 0
60661: PPUSH
60662: PPUSH
60663: PPUSH
60664: PPUSH
// pom := GetBase ( building ) ;
60665: LD_ADDR_VAR 0 3
60669: PUSH
60670: LD_VAR 0 1
60674: PPUSH
60675: CALL_OW 274
60679: ST_TO_ADDR
// if not pom then
60680: LD_VAR 0 3
60684: NOT
60685: IFFALSE 60689
// exit ;
60687: GO 60859
// btype := GetBType ( building ) ;
60689: LD_ADDR_VAR 0 5
60693: PUSH
60694: LD_VAR 0 1
60698: PPUSH
60699: CALL_OW 266
60703: ST_TO_ADDR
// if btype = b_armoury then
60704: LD_VAR 0 5
60708: PUSH
60709: LD_INT 4
60711: EQUAL
60712: IFFALSE 60722
// btype := b_barracks ;
60714: LD_ADDR_VAR 0 5
60718: PUSH
60719: LD_INT 5
60721: ST_TO_ADDR
// if btype = b_depot then
60722: LD_VAR 0 5
60726: PUSH
60727: LD_INT 0
60729: EQUAL
60730: IFFALSE 60740
// btype := b_warehouse ;
60732: LD_ADDR_VAR 0 5
60736: PUSH
60737: LD_INT 1
60739: ST_TO_ADDR
// if btype = b_workshop then
60740: LD_VAR 0 5
60744: PUSH
60745: LD_INT 2
60747: EQUAL
60748: IFFALSE 60758
// btype := b_factory ;
60750: LD_ADDR_VAR 0 5
60754: PUSH
60755: LD_INT 3
60757: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60758: LD_ADDR_VAR 0 4
60762: PUSH
60763: LD_VAR 0 5
60767: PPUSH
60768: LD_VAR 0 1
60772: PPUSH
60773: CALL_OW 248
60777: PPUSH
60778: CALL_OW 450
60782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60783: LD_ADDR_VAR 0 2
60787: PUSH
60788: LD_VAR 0 3
60792: PPUSH
60793: LD_INT 1
60795: PPUSH
60796: CALL_OW 275
60800: PUSH
60801: LD_VAR 0 4
60805: PUSH
60806: LD_INT 1
60808: ARRAY
60809: GREATEREQUAL
60810: PUSH
60811: LD_VAR 0 3
60815: PPUSH
60816: LD_INT 2
60818: PPUSH
60819: CALL_OW 275
60823: PUSH
60824: LD_VAR 0 4
60828: PUSH
60829: LD_INT 2
60831: ARRAY
60832: GREATEREQUAL
60833: AND
60834: PUSH
60835: LD_VAR 0 3
60839: PPUSH
60840: LD_INT 3
60842: PPUSH
60843: CALL_OW 275
60847: PUSH
60848: LD_VAR 0 4
60852: PUSH
60853: LD_INT 3
60855: ARRAY
60856: GREATEREQUAL
60857: AND
60858: ST_TO_ADDR
// end ;
60859: LD_VAR 0 2
60863: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
60864: LD_INT 0
60866: PPUSH
60867: PPUSH
60868: PPUSH
// pom := GetBase ( building ) ;
60869: LD_ADDR_VAR 0 4
60873: PUSH
60874: LD_VAR 0 1
60878: PPUSH
60879: CALL_OW 274
60883: ST_TO_ADDR
// if not pom then
60884: LD_VAR 0 4
60888: NOT
60889: IFFALSE 60893
// exit ;
60891: GO 60994
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60893: LD_ADDR_VAR 0 5
60897: PUSH
60898: LD_VAR 0 2
60902: PPUSH
60903: LD_VAR 0 1
60907: PPUSH
60908: CALL_OW 248
60912: PPUSH
60913: CALL_OW 450
60917: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60918: LD_ADDR_VAR 0 3
60922: PUSH
60923: LD_VAR 0 4
60927: PPUSH
60928: LD_INT 1
60930: PPUSH
60931: CALL_OW 275
60935: PUSH
60936: LD_VAR 0 5
60940: PUSH
60941: LD_INT 1
60943: ARRAY
60944: GREATEREQUAL
60945: PUSH
60946: LD_VAR 0 4
60950: PPUSH
60951: LD_INT 2
60953: PPUSH
60954: CALL_OW 275
60958: PUSH
60959: LD_VAR 0 5
60963: PUSH
60964: LD_INT 2
60966: ARRAY
60967: GREATEREQUAL
60968: AND
60969: PUSH
60970: LD_VAR 0 4
60974: PPUSH
60975: LD_INT 3
60977: PPUSH
60978: CALL_OW 275
60982: PUSH
60983: LD_VAR 0 5
60987: PUSH
60988: LD_INT 3
60990: ARRAY
60991: GREATEREQUAL
60992: AND
60993: ST_TO_ADDR
// end ;
60994: LD_VAR 0 3
60998: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
60999: LD_INT 0
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
// result := false ;
61011: LD_ADDR_VAR 0 6
61015: PUSH
61016: LD_INT 0
61018: ST_TO_ADDR
// if not base or not btype or not x or not y then
61019: LD_VAR 0 1
61023: NOT
61024: PUSH
61025: LD_VAR 0 2
61029: NOT
61030: OR
61031: PUSH
61032: LD_VAR 0 3
61036: NOT
61037: OR
61038: PUSH
61039: LD_VAR 0 4
61043: NOT
61044: OR
61045: IFFALSE 61049
// exit ;
61047: GO 61658
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
61049: LD_ADDR_VAR 0 12
61053: PUSH
61054: LD_VAR 0 2
61058: PPUSH
61059: LD_VAR 0 3
61063: PPUSH
61064: LD_VAR 0 4
61068: PPUSH
61069: LD_VAR 0 5
61073: PPUSH
61074: LD_VAR 0 1
61078: PUSH
61079: LD_INT 1
61081: ARRAY
61082: PPUSH
61083: CALL_OW 248
61087: PPUSH
61088: LD_INT 0
61090: PPUSH
61091: CALL 62495 0 6
61095: ST_TO_ADDR
// if not hexes then
61096: LD_VAR 0 12
61100: NOT
61101: IFFALSE 61105
// exit ;
61103: GO 61658
// for i = 1 to hexes do
61105: LD_ADDR_VAR 0 7
61109: PUSH
61110: DOUBLE
61111: LD_INT 1
61113: DEC
61114: ST_TO_ADDR
61115: LD_VAR 0 12
61119: PUSH
61120: FOR_TO
61121: IFFALSE 61656
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61123: LD_ADDR_VAR 0 11
61127: PUSH
61128: LD_VAR 0 12
61132: PUSH
61133: LD_VAR 0 7
61137: ARRAY
61138: PUSH
61139: LD_INT 1
61141: ARRAY
61142: PPUSH
61143: LD_VAR 0 12
61147: PUSH
61148: LD_VAR 0 7
61152: ARRAY
61153: PUSH
61154: LD_INT 2
61156: ARRAY
61157: PPUSH
61158: CALL_OW 428
61162: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
61163: LD_VAR 0 12
61167: PUSH
61168: LD_VAR 0 7
61172: ARRAY
61173: PUSH
61174: LD_INT 1
61176: ARRAY
61177: PPUSH
61178: LD_VAR 0 12
61182: PUSH
61183: LD_VAR 0 7
61187: ARRAY
61188: PUSH
61189: LD_INT 2
61191: ARRAY
61192: PPUSH
61193: CALL_OW 351
61197: PUSH
61198: LD_VAR 0 12
61202: PUSH
61203: LD_VAR 0 7
61207: ARRAY
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: PPUSH
61213: LD_VAR 0 12
61217: PUSH
61218: LD_VAR 0 7
61222: ARRAY
61223: PUSH
61224: LD_INT 2
61226: ARRAY
61227: PPUSH
61228: CALL_OW 488
61232: NOT
61233: OR
61234: PUSH
61235: LD_VAR 0 11
61239: PPUSH
61240: CALL_OW 247
61244: PUSH
61245: LD_INT 3
61247: EQUAL
61248: OR
61249: IFFALSE 61255
// exit ;
61251: POP
61252: POP
61253: GO 61658
// if not tmp or not tmp in base then
61255: LD_VAR 0 11
61259: NOT
61260: PUSH
61261: LD_VAR 0 11
61265: PUSH
61266: LD_VAR 0 1
61270: IN
61271: NOT
61272: OR
61273: IFFALSE 61277
// continue ;
61275: GO 61120
// result := true ;
61277: LD_ADDR_VAR 0 6
61281: PUSH
61282: LD_INT 1
61284: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61285: LD_ADDR_VAR 0 15
61289: PUSH
61290: LD_VAR 0 1
61294: PPUSH
61295: LD_INT 22
61297: PUSH
61298: LD_VAR 0 11
61302: PPUSH
61303: CALL_OW 255
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 30
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 30
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PPUSH
61344: CALL_OW 72
61348: ST_TO_ADDR
// if dep then
61349: LD_VAR 0 15
61353: IFFALSE 61489
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
61355: LD_ADDR_VAR 0 14
61359: PUSH
61360: LD_VAR 0 15
61364: PUSH
61365: LD_INT 1
61367: ARRAY
61368: PPUSH
61369: CALL_OW 250
61373: PPUSH
61374: LD_VAR 0 15
61378: PUSH
61379: LD_INT 1
61381: ARRAY
61382: PPUSH
61383: CALL_OW 254
61387: PPUSH
61388: LD_INT 5
61390: PPUSH
61391: CALL_OW 272
61395: PUSH
61396: LD_VAR 0 15
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: PPUSH
61405: CALL_OW 251
61409: PPUSH
61410: LD_VAR 0 15
61414: PUSH
61415: LD_INT 1
61417: ARRAY
61418: PPUSH
61419: CALL_OW 254
61423: PPUSH
61424: LD_INT 5
61426: PPUSH
61427: CALL_OW 273
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
61436: LD_VAR 0 14
61440: PUSH
61441: LD_INT 1
61443: ARRAY
61444: PPUSH
61445: LD_VAR 0 14
61449: PUSH
61450: LD_INT 2
61452: ARRAY
61453: PPUSH
61454: CALL_OW 488
61458: IFFALSE 61489
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
61460: LD_VAR 0 11
61464: PPUSH
61465: LD_VAR 0 14
61469: PUSH
61470: LD_INT 1
61472: ARRAY
61473: PPUSH
61474: LD_VAR 0 14
61478: PUSH
61479: LD_INT 2
61481: ARRAY
61482: PPUSH
61483: CALL_OW 111
// continue ;
61487: GO 61120
// end ; end ; r := GetDir ( tmp ) ;
61489: LD_ADDR_VAR 0 13
61493: PUSH
61494: LD_VAR 0 11
61498: PPUSH
61499: CALL_OW 254
61503: ST_TO_ADDR
// if r = 5 then
61504: LD_VAR 0 13
61508: PUSH
61509: LD_INT 5
61511: EQUAL
61512: IFFALSE 61522
// r := 0 ;
61514: LD_ADDR_VAR 0 13
61518: PUSH
61519: LD_INT 0
61521: ST_TO_ADDR
// for j = r to 5 do
61522: LD_ADDR_VAR 0 8
61526: PUSH
61527: DOUBLE
61528: LD_VAR 0 13
61532: DEC
61533: ST_TO_ADDR
61534: LD_INT 5
61536: PUSH
61537: FOR_TO
61538: IFFALSE 61652
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
61540: LD_ADDR_VAR 0 9
61544: PUSH
61545: LD_VAR 0 11
61549: PPUSH
61550: CALL_OW 250
61554: PPUSH
61555: LD_VAR 0 8
61559: PPUSH
61560: LD_INT 2
61562: PPUSH
61563: CALL_OW 272
61567: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
61568: LD_ADDR_VAR 0 10
61572: PUSH
61573: LD_VAR 0 11
61577: PPUSH
61578: CALL_OW 251
61582: PPUSH
61583: LD_VAR 0 8
61587: PPUSH
61588: LD_INT 2
61590: PPUSH
61591: CALL_OW 273
61595: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
61596: LD_VAR 0 9
61600: PPUSH
61601: LD_VAR 0 10
61605: PPUSH
61606: CALL_OW 488
61610: PUSH
61611: LD_VAR 0 9
61615: PPUSH
61616: LD_VAR 0 10
61620: PPUSH
61621: CALL_OW 428
61625: NOT
61626: AND
61627: IFFALSE 61650
// begin ComMoveXY ( tmp , _x , _y ) ;
61629: LD_VAR 0 11
61633: PPUSH
61634: LD_VAR 0 9
61638: PPUSH
61639: LD_VAR 0 10
61643: PPUSH
61644: CALL_OW 111
// break ;
61648: GO 61652
// end ; end ;
61650: GO 61537
61652: POP
61653: POP
// end ;
61654: GO 61120
61656: POP
61657: POP
// end ;
61658: LD_VAR 0 6
61662: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
61663: LD_INT 0
61665: PPUSH
61666: PPUSH
61667: PPUSH
61668: PPUSH
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
61673: PPUSH
61674: PPUSH
// result := false ;
61675: LD_ADDR_VAR 0 6
61679: PUSH
61680: LD_INT 0
61682: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
61683: LD_VAR 0 1
61687: NOT
61688: PUSH
61689: LD_VAR 0 1
61693: PPUSH
61694: CALL_OW 266
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: IN
61709: NOT
61710: OR
61711: PUSH
61712: LD_VAR 0 2
61716: NOT
61717: OR
61718: PUSH
61719: LD_VAR 0 5
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: LD_INT 3
61735: PUSH
61736: LD_INT 4
61738: PUSH
61739: LD_INT 5
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: IN
61750: NOT
61751: OR
61752: PUSH
61753: LD_VAR 0 3
61757: PPUSH
61758: LD_VAR 0 4
61762: PPUSH
61763: CALL_OW 488
61767: NOT
61768: OR
61769: IFFALSE 61773
// exit ;
61771: GO 62490
// pom := GetBase ( depot ) ;
61773: LD_ADDR_VAR 0 10
61777: PUSH
61778: LD_VAR 0 1
61782: PPUSH
61783: CALL_OW 274
61787: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
61788: LD_ADDR_VAR 0 11
61792: PUSH
61793: LD_VAR 0 2
61797: PPUSH
61798: LD_VAR 0 1
61802: PPUSH
61803: CALL_OW 248
61807: PPUSH
61808: CALL_OW 450
61812: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
61813: LD_VAR 0 10
61817: PPUSH
61818: LD_INT 1
61820: PPUSH
61821: CALL_OW 275
61825: PUSH
61826: LD_VAR 0 11
61830: PUSH
61831: LD_INT 1
61833: ARRAY
61834: GREATEREQUAL
61835: PUSH
61836: LD_VAR 0 10
61840: PPUSH
61841: LD_INT 2
61843: PPUSH
61844: CALL_OW 275
61848: PUSH
61849: LD_VAR 0 11
61853: PUSH
61854: LD_INT 2
61856: ARRAY
61857: GREATEREQUAL
61858: AND
61859: PUSH
61860: LD_VAR 0 10
61864: PPUSH
61865: LD_INT 3
61867: PPUSH
61868: CALL_OW 275
61872: PUSH
61873: LD_VAR 0 11
61877: PUSH
61878: LD_INT 3
61880: ARRAY
61881: GREATEREQUAL
61882: AND
61883: NOT
61884: IFFALSE 61888
// exit ;
61886: GO 62490
// if GetBType ( depot ) = b_depot then
61888: LD_VAR 0 1
61892: PPUSH
61893: CALL_OW 266
61897: PUSH
61898: LD_INT 0
61900: EQUAL
61901: IFFALSE 61913
// dist := 28 else
61903: LD_ADDR_VAR 0 14
61907: PUSH
61908: LD_INT 28
61910: ST_TO_ADDR
61911: GO 61921
// dist := 36 ;
61913: LD_ADDR_VAR 0 14
61917: PUSH
61918: LD_INT 36
61920: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
61921: LD_VAR 0 1
61925: PPUSH
61926: LD_VAR 0 3
61930: PPUSH
61931: LD_VAR 0 4
61935: PPUSH
61936: CALL_OW 297
61940: PUSH
61941: LD_VAR 0 14
61945: GREATER
61946: IFFALSE 61950
// exit ;
61948: GO 62490
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
61950: LD_ADDR_VAR 0 12
61954: PUSH
61955: LD_VAR 0 2
61959: PPUSH
61960: LD_VAR 0 3
61964: PPUSH
61965: LD_VAR 0 4
61969: PPUSH
61970: LD_VAR 0 5
61974: PPUSH
61975: LD_VAR 0 1
61979: PPUSH
61980: CALL_OW 248
61984: PPUSH
61985: LD_INT 0
61987: PPUSH
61988: CALL 62495 0 6
61992: ST_TO_ADDR
// if not hexes then
61993: LD_VAR 0 12
61997: NOT
61998: IFFALSE 62002
// exit ;
62000: GO 62490
// hex := GetHexInfo ( x , y ) ;
62002: LD_ADDR_VAR 0 15
62006: PUSH
62007: LD_VAR 0 3
62011: PPUSH
62012: LD_VAR 0 4
62016: PPUSH
62017: CALL_OW 546
62021: ST_TO_ADDR
// if hex [ 1 ] then
62022: LD_VAR 0 15
62026: PUSH
62027: LD_INT 1
62029: ARRAY
62030: IFFALSE 62034
// exit ;
62032: GO 62490
// height := hex [ 2 ] ;
62034: LD_ADDR_VAR 0 13
62038: PUSH
62039: LD_VAR 0 15
62043: PUSH
62044: LD_INT 2
62046: ARRAY
62047: ST_TO_ADDR
// for i = 1 to hexes do
62048: LD_ADDR_VAR 0 7
62052: PUSH
62053: DOUBLE
62054: LD_INT 1
62056: DEC
62057: ST_TO_ADDR
62058: LD_VAR 0 12
62062: PUSH
62063: FOR_TO
62064: IFFALSE 62394
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
62066: LD_VAR 0 12
62070: PUSH
62071: LD_VAR 0 7
62075: ARRAY
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PPUSH
62081: LD_VAR 0 12
62085: PUSH
62086: LD_VAR 0 7
62090: ARRAY
62091: PUSH
62092: LD_INT 2
62094: ARRAY
62095: PPUSH
62096: CALL_OW 488
62100: NOT
62101: PUSH
62102: LD_VAR 0 12
62106: PUSH
62107: LD_VAR 0 7
62111: ARRAY
62112: PUSH
62113: LD_INT 1
62115: ARRAY
62116: PPUSH
62117: LD_VAR 0 12
62121: PUSH
62122: LD_VAR 0 7
62126: ARRAY
62127: PUSH
62128: LD_INT 2
62130: ARRAY
62131: PPUSH
62132: CALL_OW 428
62136: PUSH
62137: LD_INT 0
62139: GREATER
62140: OR
62141: PUSH
62142: LD_VAR 0 12
62146: PUSH
62147: LD_VAR 0 7
62151: ARRAY
62152: PUSH
62153: LD_INT 1
62155: ARRAY
62156: PPUSH
62157: LD_VAR 0 12
62161: PUSH
62162: LD_VAR 0 7
62166: ARRAY
62167: PUSH
62168: LD_INT 2
62170: ARRAY
62171: PPUSH
62172: CALL_OW 351
62176: OR
62177: IFFALSE 62183
// exit ;
62179: POP
62180: POP
62181: GO 62490
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62183: LD_ADDR_VAR 0 8
62187: PUSH
62188: LD_VAR 0 12
62192: PUSH
62193: LD_VAR 0 7
62197: ARRAY
62198: PUSH
62199: LD_INT 1
62201: ARRAY
62202: PPUSH
62203: LD_VAR 0 12
62207: PUSH
62208: LD_VAR 0 7
62212: ARRAY
62213: PUSH
62214: LD_INT 2
62216: ARRAY
62217: PPUSH
62218: CALL_OW 546
62222: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
62223: LD_VAR 0 8
62227: PUSH
62228: LD_INT 1
62230: ARRAY
62231: PUSH
62232: LD_VAR 0 8
62236: PUSH
62237: LD_INT 2
62239: ARRAY
62240: PUSH
62241: LD_VAR 0 13
62245: PUSH
62246: LD_INT 2
62248: PLUS
62249: GREATER
62250: OR
62251: PUSH
62252: LD_VAR 0 8
62256: PUSH
62257: LD_INT 2
62259: ARRAY
62260: PUSH
62261: LD_VAR 0 13
62265: PUSH
62266: LD_INT 2
62268: MINUS
62269: LESS
62270: OR
62271: PUSH
62272: LD_VAR 0 8
62276: PUSH
62277: LD_INT 3
62279: ARRAY
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 8
62286: PUSH
62287: LD_INT 9
62289: PUSH
62290: LD_INT 10
62292: PUSH
62293: LD_INT 11
62295: PUSH
62296: LD_INT 12
62298: PUSH
62299: LD_INT 13
62301: PUSH
62302: LD_INT 16
62304: PUSH
62305: LD_INT 17
62307: PUSH
62308: LD_INT 18
62310: PUSH
62311: LD_INT 19
62313: PUSH
62314: LD_INT 20
62316: PUSH
62317: LD_INT 21
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: IN
62335: NOT
62336: OR
62337: PUSH
62338: LD_VAR 0 8
62342: PUSH
62343: LD_INT 5
62345: ARRAY
62346: NOT
62347: OR
62348: PUSH
62349: LD_VAR 0 8
62353: PUSH
62354: LD_INT 6
62356: ARRAY
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: LD_INT 7
62366: PUSH
62367: LD_INT 9
62369: PUSH
62370: LD_INT 10
62372: PUSH
62373: LD_INT 11
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: IN
62384: NOT
62385: OR
62386: IFFALSE 62392
// exit ;
62388: POP
62389: POP
62390: GO 62490
// end ;
62392: GO 62063
62394: POP
62395: POP
// side := GetSide ( depot ) ;
62396: LD_ADDR_VAR 0 9
62400: PUSH
62401: LD_VAR 0 1
62405: PPUSH
62406: CALL_OW 255
62410: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
62411: LD_VAR 0 9
62415: PPUSH
62416: LD_VAR 0 3
62420: PPUSH
62421: LD_VAR 0 4
62425: PPUSH
62426: LD_INT 20
62428: PPUSH
62429: CALL 55144 0 4
62433: PUSH
62434: LD_INT 4
62436: ARRAY
62437: IFFALSE 62441
// exit ;
62439: GO 62490
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
62441: LD_VAR 0 2
62445: PUSH
62446: LD_INT 29
62448: PUSH
62449: LD_INT 30
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: IN
62456: PUSH
62457: LD_VAR 0 3
62461: PPUSH
62462: LD_VAR 0 4
62466: PPUSH
62467: LD_VAR 0 9
62471: PPUSH
62472: CALL_OW 440
62476: NOT
62477: AND
62478: IFFALSE 62482
// exit ;
62480: GO 62490
// result := true ;
62482: LD_ADDR_VAR 0 6
62486: PUSH
62487: LD_INT 1
62489: ST_TO_ADDR
// end ;
62490: LD_VAR 0 6
62494: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
62495: LD_INT 0
62497: PPUSH
62498: PPUSH
62499: PPUSH
62500: PPUSH
62501: PPUSH
62502: PPUSH
62503: PPUSH
62504: PPUSH
62505: PPUSH
62506: PPUSH
62507: PPUSH
62508: PPUSH
62509: PPUSH
62510: PPUSH
62511: PPUSH
62512: PPUSH
62513: PPUSH
62514: PPUSH
62515: PPUSH
62516: PPUSH
62517: PPUSH
62518: PPUSH
62519: PPUSH
62520: PPUSH
62521: PPUSH
62522: PPUSH
62523: PPUSH
62524: PPUSH
62525: PPUSH
62526: PPUSH
62527: PPUSH
62528: PPUSH
62529: PPUSH
62530: PPUSH
62531: PPUSH
62532: PPUSH
62533: PPUSH
62534: PPUSH
62535: PPUSH
62536: PPUSH
62537: PPUSH
62538: PPUSH
62539: PPUSH
62540: PPUSH
62541: PPUSH
62542: PPUSH
62543: PPUSH
62544: PPUSH
62545: PPUSH
62546: PPUSH
62547: PPUSH
62548: PPUSH
62549: PPUSH
62550: PPUSH
62551: PPUSH
62552: PPUSH
62553: PPUSH
62554: PPUSH
// result = [ ] ;
62555: LD_ADDR_VAR 0 7
62559: PUSH
62560: EMPTY
62561: ST_TO_ADDR
// temp_list = [ ] ;
62562: LD_ADDR_VAR 0 9
62566: PUSH
62567: EMPTY
62568: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
62569: LD_VAR 0 4
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 4
62588: PUSH
62589: LD_INT 5
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: IN
62600: NOT
62601: PUSH
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: IN
62617: PUSH
62618: LD_VAR 0 5
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: IN
62637: NOT
62638: AND
62639: OR
62640: IFFALSE 62644
// exit ;
62642: GO 81035
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
62644: LD_VAR 0 1
62648: PUSH
62649: LD_INT 6
62651: PUSH
62652: LD_INT 7
62654: PUSH
62655: LD_INT 8
62657: PUSH
62658: LD_INT 13
62660: PUSH
62661: LD_INT 12
62663: PUSH
62664: LD_INT 15
62666: PUSH
62667: LD_INT 11
62669: PUSH
62670: LD_INT 14
62672: PUSH
62673: LD_INT 10
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: IN
62687: IFFALSE 62697
// btype = b_lab ;
62689: LD_ADDR_VAR 0 1
62693: PUSH
62694: LD_INT 6
62696: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
62697: LD_VAR 0 6
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: IN
62716: NOT
62717: PUSH
62718: LD_VAR 0 1
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: LD_INT 6
62737: PUSH
62738: LD_INT 36
62740: PUSH
62741: LD_INT 4
62743: PUSH
62744: LD_INT 5
62746: PUSH
62747: LD_INT 31
62749: PUSH
62750: LD_INT 32
62752: PUSH
62753: LD_INT 33
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: IN
62769: NOT
62770: PUSH
62771: LD_VAR 0 6
62775: PUSH
62776: LD_INT 1
62778: EQUAL
62779: AND
62780: OR
62781: PUSH
62782: LD_VAR 0 1
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: LD_INT 3
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: IN
62797: NOT
62798: PUSH
62799: LD_VAR 0 6
62803: PUSH
62804: LD_INT 2
62806: EQUAL
62807: AND
62808: OR
62809: IFFALSE 62819
// mode = 0 ;
62811: LD_ADDR_VAR 0 6
62815: PUSH
62816: LD_INT 0
62818: ST_TO_ADDR
// case mode of 0 :
62819: LD_VAR 0 6
62823: PUSH
62824: LD_INT 0
62826: DOUBLE
62827: EQUAL
62828: IFTRUE 62832
62830: GO 74285
62832: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62833: LD_ADDR_VAR 0 11
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 1
62902: NEG
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: LD_INT 2
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63026: LD_ADDR_VAR 0 12
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: NEG
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 3
63183: NEG
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63222: LD_ADDR_VAR 0 13
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 2
63357: NEG
63358: PUSH
63359: LD_INT 2
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: LD_INT 3
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 3
63381: NEG
63382: PUSH
63383: LD_INT 2
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 3
63393: NEG
63394: PUSH
63395: LD_INT 3
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63421: LD_ADDR_VAR 0 14
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 3
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63617: LD_ADDR_VAR 0 15
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63810: LD_ADDR_VAR 0 16
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: LD_INT 2
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 3
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 3
63967: PUSH
63968: LD_INT 3
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: LD_INT 3
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64003: LD_ADDR_VAR 0 17
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64233: LD_ADDR_VAR 0 18
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: LD_INT 2
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: LD_INT 2
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64463: LD_ADDR_VAR 0 19
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 2
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 2
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64693: LD_ADDR_VAR 0 20
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 2
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64923: LD_ADDR_VAR 0 21
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: LD_INT 2
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: LD_INT 2
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: LD_INT 2
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 2
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65153: LD_ADDR_VAR 0 22
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: LD_INT 2
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: NEG
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65383: LD_ADDR_VAR 0 23
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 2
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: LD_INT 2
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: LD_INT 2
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 2
65570: NEG
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 2
65582: NEG
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 2
65594: NEG
65595: PUSH
65596: LD_INT 3
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 2
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
65663: LD_ADDR_VAR 0 24
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 2
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: LD_INT 2
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: LD_INT 2
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: NEG
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 2
65850: NEG
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: LD_INT 2
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 2
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 3
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 3
65906: PUSH
65907: LD_INT 2
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
65939: LD_ADDR_VAR 0 25
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 1
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 2
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 2
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 2
66115: NEG
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 2
66138: NEG
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 3
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: LD_INT 2
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: LD_INT 3
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 3
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66213: LD_ADDR_VAR 0 26
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 1
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: LD_INT 2
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 2
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 2
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: NEG
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: LD_INT 2
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 2
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 1
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 2
66455: NEG
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66489: LD_ADDR_VAR 0 27
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: LD_INT 1
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: LD_INT 1
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: LD_INT 2
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 2
66624: PUSH
66625: LD_INT 2
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: LD_INT 2
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 2
66665: NEG
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 2
66688: NEG
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: LD_INT 2
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 2
66711: NEG
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 3
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 3
66734: NEG
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66769: LD_ADDR_VAR 0 28
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: LD_INT 1
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 1
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: LD_INT 2
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 2
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 2
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: LD_INT 2
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: LD_INT 2
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: LD_INT 1
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 2
66945: NEG
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: LD_INT 1
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 2
66968: NEG
66969: PUSH
66970: LD_INT 2
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 2
66980: NEG
66981: PUSH
66982: LD_INT 3
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: LD_INT 3
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 3
67004: NEG
67005: PUSH
67006: LD_INT 1
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 3
67016: NEG
67017: PUSH
67018: LD_INT 2
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67051: LD_ADDR_VAR 0 29
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: LD_INT 1
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 1
67132: NEG
67133: PUSH
67134: LD_INT 2
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: LD_INT 1
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 2
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 1
67206: NEG
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: LD_INT 2
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: LD_INT 3
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 1
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: NEG
67296: PUSH
67297: LD_INT 2
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67330: LD_ADDR_VAR 0 30
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 1
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: LD_INT 3
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 1
67531: PUSH
67532: LD_INT 2
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 2
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 3
67573: NEG
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67608: LD_ADDR_VAR 0 31
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 1
67677: NEG
67678: PUSH
67679: LD_INT 1
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 2
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: LD_INT 2
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 2
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 1
67762: NEG
67763: PUSH
67764: LD_INT 1
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 2
67773: NEG
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: LD_INT 2
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: NEG
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: LD_INT 1
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 1
67840: NEG
67841: PUSH
67842: LD_INT 2
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: LD_INT 2
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67886: LD_ADDR_VAR 0 32
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 1
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: LD_INT 1
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: LD_INT 2
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: LD_INT 2
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 2
68011: PUSH
68012: LD_INT 2
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 1
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 2
68063: NEG
68064: PUSH
68065: LD_INT 1
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: LD_INT 3
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: PUSH
68088: LD_INT 2
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: PUSH
68099: LD_INT 2
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 2
68118: NEG
68119: PUSH
68120: LD_INT 1
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 3
68129: NEG
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68164: LD_ADDR_VAR 0 33
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 1
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 2
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: LD_INT 2
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: LD_INT 2
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: LD_INT 1
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 2
68342: NEG
68343: PUSH
68344: LD_INT 2
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 2
68354: NEG
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: NEG
68398: PUSH
68399: LD_INT 2
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 3
68408: NEG
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68443: LD_ADDR_VAR 0 34
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: LD_INT 1
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: PUSH
68482: LD_INT 1
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 1
68512: NEG
68513: PUSH
68514: LD_INT 1
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 1
68524: NEG
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 2
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 2
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 2
68610: NEG
68611: PUSH
68612: LD_INT 1
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: LD_INT 3
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: LD_INT 2
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 3
68657: PUSH
68658: LD_INT 2
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 2
68667: PUSH
68668: LD_INT 3
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 3
68688: NEG
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68723: LD_ADDR_VAR 0 35
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: LD_INT 1
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: LD_INT 1
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: LD_INT 1
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: LD_INT 1
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 2
68804: PUSH
68805: LD_INT 1
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 2
68814: NEG
68815: PUSH
68816: LD_INT 1
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68835: LD_ADDR_VAR 0 36
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: LD_INT 1
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: LD_INT 0
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 1
68916: NEG
68917: PUSH
68918: LD_INT 2
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: LD_INT 2
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68947: LD_ADDR_VAR 0 37
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_INT 1
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: LD_INT 1
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 1
69005: NEG
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: PUSH
69029: LD_INT 1
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 1
69039: NEG
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69059: LD_ADDR_VAR 0 38
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 1
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: LD_INT 1
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 2
69150: NEG
69151: PUSH
69152: LD_INT 1
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69171: LD_ADDR_VAR 0 39
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 1
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 1
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: LD_INT 1
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: LD_INT 0
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 1
69240: NEG
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: NEG
69253: PUSH
69254: LD_INT 2
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 1
69264: PUSH
69265: LD_INT 2
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69283: LD_ADDR_VAR 0 40
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 1
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: LD_INT 1
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 1
69364: PUSH
69365: LD_INT 1
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 1
69375: NEG
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69395: LD_ADDR_VAR 0 41
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: LD_INT 1
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 0
69443: PUSH
69444: LD_INT 1
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: LD_INT 1
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 1
69476: NEG
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 2
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 2
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: LD_INT 2
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 1
69529: PUSH
69530: LD_INT 2
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 1
69539: NEG
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 2
69550: NEG
69551: PUSH
69552: LD_INT 0
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 2
69561: NEG
69562: PUSH
69563: LD_INT 1
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 2
69573: NEG
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 2
69585: NEG
69586: PUSH
69587: LD_INT 3
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 3
69618: PUSH
69619: LD_INT 1
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 3
69628: PUSH
69629: LD_INT 2
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 3
69638: PUSH
69639: LD_INT 3
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: LD_INT 3
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 2
69658: NEG
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 3
69669: NEG
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: NEG
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 3
69692: NEG
69693: PUSH
69694: LD_INT 2
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69745: LD_ADDR_VAR 0 42
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: LD_INT 1
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 1
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: LD_INT 1
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: LD_INT 1
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 1
69803: NEG
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: LD_INT 1
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: LD_INT 2
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 1
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 2
69870: PUSH
69871: LD_INT 2
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 1
69880: PUSH
69881: LD_INT 2
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: LD_INT 2
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 2
69911: NEG
69912: PUSH
69913: LD_INT 1
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 2
69923: NEG
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: LD_INT 3
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 1
69947: NEG
69948: PUSH
69949: LD_INT 3
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: LD_INT 3
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: LD_INT 2
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 3
69981: PUSH
69982: LD_INT 2
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: LD_INT 3
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: LD_INT 2
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 3
70042: NEG
70043: PUSH
70044: LD_INT 2
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 3
70054: NEG
70055: PUSH
70056: LD_INT 3
70058: NEG
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70095: LD_ADDR_VAR 0 43
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: LD_INT 0
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: LD_INT 1
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 1
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: NEG
70154: PUSH
70155: LD_INT 0
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 1
70164: NEG
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 1
70176: NEG
70177: PUSH
70178: LD_INT 2
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: LD_INT 2
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 1
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 2
70210: PUSH
70211: LD_INT 0
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 2
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 1
70230: PUSH
70231: LD_INT 2
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 0
70240: PUSH
70241: LD_INT 2
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 1
70250: NEG
70251: PUSH
70252: LD_INT 1
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 2
70261: NEG
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 2
70272: NEG
70273: PUSH
70274: LD_INT 1
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: LD_INT 3
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 0
70296: PUSH
70297: LD_INT 3
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 1
70307: PUSH
70308: LD_INT 2
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 2
70318: PUSH
70319: LD_INT 1
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 3
70329: PUSH
70330: LD_INT 0
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 3
70339: PUSH
70340: LD_INT 1
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 1
70349: PUSH
70350: LD_INT 3
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 1
70369: NEG
70370: PUSH
70371: LD_INT 2
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 2
70380: NEG
70381: PUSH
70382: LD_INT 1
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 3
70391: NEG
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 3
70402: NEG
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70443: LD_ADDR_VAR 0 44
70447: PUSH
70448: LD_INT 0
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 1
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: LD_INT 1
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: LD_INT 1
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 1
70501: NEG
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 1
70512: NEG
70513: PUSH
70514: LD_INT 1
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 1
70524: NEG
70525: PUSH
70526: LD_INT 2
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 1
70536: PUSH
70537: LD_INT 1
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 2
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 2
70557: PUSH
70558: LD_INT 1
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 2
70567: PUSH
70568: LD_INT 2
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 1
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 1
70587: NEG
70588: PUSH
70589: LD_INT 1
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 2
70598: NEG
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 2
70609: NEG
70610: PUSH
70611: LD_INT 1
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 2
70621: NEG
70622: PUSH
70623: LD_INT 2
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: NEG
70634: PUSH
70635: LD_INT 3
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: LD_INT 1
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: LD_INT 0
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 3
70676: PUSH
70677: LD_INT 2
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: LD_INT 3
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 2
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 2
70706: NEG
70707: PUSH
70708: LD_INT 1
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 3
70717: NEG
70718: PUSH
70719: LD_INT 0
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 3
70728: NEG
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 3
70740: NEG
70741: PUSH
70742: LD_INT 2
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 3
70752: NEG
70753: PUSH
70754: LD_INT 3
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70793: LD_ADDR_VAR 0 45
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: LD_INT 0
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: LD_INT 1
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: PUSH
70822: LD_INT 0
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 1
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 0
70841: PUSH
70842: LD_INT 1
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: LD_INT 0
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 1
70862: NEG
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 1
70874: NEG
70875: PUSH
70876: LD_INT 2
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 0
70886: PUSH
70887: LD_INT 2
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 1
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 2
70908: PUSH
70909: LD_INT 1
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: LD_INT 2
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 2
70959: NEG
70960: PUSH
70961: LD_INT 1
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 2
70971: NEG
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 2
70983: NEG
70984: PUSH
70985: LD_INT 3
70987: NEG
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 1
70995: NEG
70996: PUSH
70997: LD_INT 3
70999: NEG
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 0
71007: PUSH
71008: LD_INT 3
71010: NEG
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 1
71018: PUSH
71019: LD_INT 2
71021: NEG
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 3
71029: PUSH
71030: LD_INT 2
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 3
71039: PUSH
71040: LD_INT 3
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 2
71049: PUSH
71050: LD_INT 3
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 1
71059: PUSH
71060: LD_INT 3
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 0
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 1
71079: NEG
71080: PUSH
71081: LD_INT 2
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 2
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 3
71102: NEG
71103: PUSH
71104: LD_INT 3
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71143: LD_ADDR_VAR 0 46
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: LD_INT 0
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 0
71160: PUSH
71161: LD_INT 1
71163: NEG
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 1
71171: PUSH
71172: LD_INT 0
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 1
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 0
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 1
71201: NEG
71202: PUSH
71203: LD_INT 0
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 1
71212: NEG
71213: PUSH
71214: LD_INT 1
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 1
71224: NEG
71225: PUSH
71226: LD_INT 2
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: LD_INT 2
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: LD_INT 1
71250: NEG
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: LD_INT 0
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 2
71268: PUSH
71269: LD_INT 1
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 1
71278: PUSH
71279: LD_INT 2
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: LD_INT 2
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 1
71298: NEG
71299: PUSH
71300: LD_INT 1
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 2
71309: NEG
71310: PUSH
71311: LD_INT 0
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 2
71320: NEG
71321: PUSH
71322: LD_INT 1
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 1
71332: NEG
71333: PUSH
71334: LD_INT 3
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 0
71344: PUSH
71345: LD_INT 3
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 1
71355: PUSH
71356: LD_INT 2
71358: NEG
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 2
71366: PUSH
71367: LD_INT 1
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 3
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 3
71387: PUSH
71388: LD_INT 1
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 1
71397: PUSH
71398: LD_INT 3
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: LD_INT 3
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 1
71417: NEG
71418: PUSH
71419: LD_INT 2
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 3
71439: NEG
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 3
71450: NEG
71451: PUSH
71452: LD_INT 1
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71491: LD_ADDR_VAR 0 47
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: LD_INT 1
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 1
71519: PUSH
71520: LD_INT 0
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 1
71529: PUSH
71530: LD_INT 1
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 0
71539: PUSH
71540: LD_INT 1
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 1
71549: NEG
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 1
71560: NEG
71561: PUSH
71562: LD_INT 1
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: NEG
71573: PUSH
71574: LD_INT 2
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: LD_INT 2
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 1
71595: PUSH
71596: LD_INT 1
71598: NEG
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 2
71606: NEG
71607: PUSH
71608: LD_INT 1
71610: NEG
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 2
71618: NEG
71619: PUSH
71620: LD_INT 2
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71642: LD_ADDR_VAR 0 48
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: LD_INT 0
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 0
71690: PUSH
71691: LD_INT 1
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 1
71700: NEG
71701: PUSH
71702: LD_INT 0
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: LD_INT 1
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 1
71723: NEG
71724: PUSH
71725: LD_INT 2
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: LD_INT 2
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 1
71746: PUSH
71747: LD_INT 1
71749: NEG
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: LD_INT 0
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: LD_INT 1
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71789: LD_ADDR_VAR 0 49
71793: PUSH
71794: LD_INT 0
71796: PUSH
71797: LD_INT 0
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 0
71806: PUSH
71807: LD_INT 1
71809: NEG
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 1
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: LD_INT 1
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 0
71837: PUSH
71838: LD_INT 1
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: LD_INT 0
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 1
71858: NEG
71859: PUSH
71860: LD_INT 1
71862: NEG
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 1
71870: PUSH
71871: LD_INT 1
71873: NEG
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 2
71881: PUSH
71882: LD_INT 0
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 2
71891: PUSH
71892: LD_INT 1
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 2
71901: PUSH
71902: LD_INT 2
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 1
71911: PUSH
71912: LD_INT 2
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71933: LD_ADDR_VAR 0 50
71937: PUSH
71938: LD_INT 0
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 0
71950: PUSH
71951: LD_INT 1
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 1
71961: PUSH
71962: LD_INT 0
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 1
71971: PUSH
71972: LD_INT 1
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 0
71981: PUSH
71982: LD_INT 1
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 1
71991: NEG
71992: PUSH
71993: LD_INT 0
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 1
72002: NEG
72003: PUSH
72004: LD_INT 1
72006: NEG
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 2
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 2
72024: PUSH
72025: LD_INT 2
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 1
72034: PUSH
72035: LD_INT 2
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 0
72044: PUSH
72045: LD_INT 2
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 1
72054: NEG
72055: PUSH
72056: LD_INT 1
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72077: LD_ADDR_VAR 0 51
72081: PUSH
72082: LD_INT 0
72084: PUSH
72085: LD_INT 0
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 0
72094: PUSH
72095: LD_INT 1
72097: NEG
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 1
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 1
72115: PUSH
72116: LD_INT 1
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: LD_INT 1
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 1
72135: NEG
72136: PUSH
72137: LD_INT 0
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 1
72146: NEG
72147: PUSH
72148: LD_INT 1
72150: NEG
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 1
72158: PUSH
72159: LD_INT 2
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: LD_INT 2
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: LD_INT 1
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 2
72189: NEG
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 2
72200: NEG
72201: PUSH
72202: LD_INT 1
72204: NEG
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72224: LD_ADDR_VAR 0 52
72228: PUSH
72229: LD_INT 0
72231: PUSH
72232: LD_INT 0
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 0
72241: PUSH
72242: LD_INT 1
72244: NEG
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 1
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 1
72262: PUSH
72263: LD_INT 1
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 0
72272: PUSH
72273: LD_INT 1
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 1
72282: NEG
72283: PUSH
72284: LD_INT 0
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 1
72293: NEG
72294: PUSH
72295: LD_INT 1
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 1
72305: NEG
72306: PUSH
72307: LD_INT 2
72309: NEG
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 1
72317: NEG
72318: PUSH
72319: LD_INT 1
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 2
72328: NEG
72329: PUSH
72330: LD_INT 0
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 2
72339: NEG
72340: PUSH
72341: LD_INT 1
72343: NEG
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: NEG
72352: PUSH
72353: LD_INT 2
72355: NEG
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72375: LD_ADDR_VAR 0 53
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 0
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: LD_INT 1
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: LD_INT 0
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 1
72413: PUSH
72414: LD_INT 1
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 0
72423: PUSH
72424: LD_INT 1
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 1
72433: NEG
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 1
72444: NEG
72445: PUSH
72446: LD_INT 1
72448: NEG
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 1
72456: NEG
72457: PUSH
72458: LD_INT 2
72460: NEG
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: LD_INT 2
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 1
72479: PUSH
72480: LD_INT 1
72482: NEG
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 2
72490: PUSH
72491: LD_INT 0
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 2
72500: PUSH
72501: LD_INT 1
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 2
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: LD_INT 2
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 0
72530: PUSH
72531: LD_INT 2
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 1
72540: NEG
72541: PUSH
72542: LD_INT 1
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 2
72551: NEG
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 2
72562: NEG
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 2
72574: NEG
72575: PUSH
72576: LD_INT 2
72578: NEG
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72605: LD_ADDR_VAR 0 54
72609: PUSH
72610: LD_INT 0
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 0
72622: PUSH
72623: LD_INT 1
72625: NEG
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 1
72633: PUSH
72634: LD_INT 0
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 1
72643: PUSH
72644: LD_INT 1
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 0
72653: PUSH
72654: LD_INT 1
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 1
72663: NEG
72664: PUSH
72665: LD_INT 0
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 1
72674: NEG
72675: PUSH
72676: LD_INT 1
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 1
72686: NEG
72687: PUSH
72688: LD_INT 2
72690: NEG
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 0
72698: PUSH
72699: LD_INT 2
72701: NEG
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 1
72709: PUSH
72710: LD_INT 1
72712: NEG
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 2
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 2
72730: PUSH
72731: LD_INT 1
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 2
72740: PUSH
72741: LD_INT 2
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 1
72750: PUSH
72751: LD_INT 2
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 0
72760: PUSH
72761: LD_INT 2
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 1
72770: NEG
72771: PUSH
72772: LD_INT 1
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 2
72781: NEG
72782: PUSH
72783: LD_INT 0
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 2
72792: NEG
72793: PUSH
72794: LD_INT 1
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 2
72804: NEG
72805: PUSH
72806: LD_INT 2
72808: NEG
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72835: LD_ADDR_VAR 0 55
72839: PUSH
72840: LD_INT 0
72842: PUSH
72843: LD_INT 0
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: LD_INT 1
72855: NEG
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 1
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: LD_INT 1
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 0
72883: PUSH
72884: LD_INT 1
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 1
72893: NEG
72894: PUSH
72895: LD_INT 0
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 1
72904: NEG
72905: PUSH
72906: LD_INT 1
72908: NEG
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 1
72916: NEG
72917: PUSH
72918: LD_INT 2
72920: NEG
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 0
72928: PUSH
72929: LD_INT 2
72931: NEG
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 1
72939: PUSH
72940: LD_INT 1
72942: NEG
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 2
72950: PUSH
72951: LD_INT 0
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 2
72960: PUSH
72961: LD_INT 1
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: LD_INT 2
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 1
72980: PUSH
72981: LD_INT 2
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 0
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 1
73000: NEG
73001: PUSH
73002: LD_INT 1
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 2
73011: NEG
73012: PUSH
73013: LD_INT 0
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PUSH
73020: LD_INT 2
73022: NEG
73023: PUSH
73024: LD_INT 1
73026: NEG
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 2
73034: NEG
73035: PUSH
73036: LD_INT 2
73038: NEG
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73065: LD_ADDR_VAR 0 56
73069: PUSH
73070: LD_INT 0
73072: PUSH
73073: LD_INT 0
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 0
73082: PUSH
73083: LD_INT 1
73085: NEG
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 1
73093: PUSH
73094: LD_INT 0
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 1
73103: PUSH
73104: LD_INT 1
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 0
73113: PUSH
73114: LD_INT 1
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 1
73123: NEG
73124: PUSH
73125: LD_INT 0
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 1
73134: NEG
73135: PUSH
73136: LD_INT 1
73138: NEG
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 1
73146: NEG
73147: PUSH
73148: LD_INT 2
73150: NEG
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 0
73158: PUSH
73159: LD_INT 2
73161: NEG
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 1
73169: PUSH
73170: LD_INT 1
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 2
73180: PUSH
73181: LD_INT 0
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 2
73190: PUSH
73191: LD_INT 1
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 2
73200: PUSH
73201: LD_INT 2
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 1
73210: PUSH
73211: LD_INT 2
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 0
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 1
73230: NEG
73231: PUSH
73232: LD_INT 1
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 2
73241: NEG
73242: PUSH
73243: LD_INT 0
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 2
73252: NEG
73253: PUSH
73254: LD_INT 1
73256: NEG
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 2
73264: NEG
73265: PUSH
73266: LD_INT 2
73268: NEG
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73295: LD_ADDR_VAR 0 57
73299: PUSH
73300: LD_INT 0
73302: PUSH
73303: LD_INT 0
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: LD_INT 1
73315: NEG
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 1
73323: PUSH
73324: LD_INT 0
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 1
73333: PUSH
73334: LD_INT 1
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 0
73343: PUSH
73344: LD_INT 1
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 1
73353: NEG
73354: PUSH
73355: LD_INT 0
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 1
73364: NEG
73365: PUSH
73366: LD_INT 1
73368: NEG
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 1
73376: NEG
73377: PUSH
73378: LD_INT 2
73380: NEG
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: LD_INT 2
73391: NEG
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 1
73399: PUSH
73400: LD_INT 1
73402: NEG
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 2
73410: PUSH
73411: LD_INT 0
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 2
73420: PUSH
73421: LD_INT 1
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 2
73430: PUSH
73431: LD_INT 2
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 1
73440: PUSH
73441: LD_INT 2
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 0
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 1
73460: NEG
73461: PUSH
73462: LD_INT 1
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 2
73471: NEG
73472: PUSH
73473: LD_INT 0
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PUSH
73480: LD_INT 2
73482: NEG
73483: PUSH
73484: LD_INT 1
73486: NEG
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 2
73494: NEG
73495: PUSH
73496: LD_INT 2
73498: NEG
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73525: LD_ADDR_VAR 0 58
73529: PUSH
73530: LD_INT 0
73532: PUSH
73533: LD_INT 0
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 0
73542: PUSH
73543: LD_INT 1
73545: NEG
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: LD_INT 1
73553: PUSH
73554: LD_INT 0
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 1
73563: PUSH
73564: LD_INT 1
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 0
73573: PUSH
73574: LD_INT 1
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 1
73583: NEG
73584: PUSH
73585: LD_INT 0
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 1
73594: NEG
73595: PUSH
73596: LD_INT 1
73598: NEG
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 1
73606: NEG
73607: PUSH
73608: LD_INT 2
73610: NEG
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 0
73618: PUSH
73619: LD_INT 2
73621: NEG
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 1
73629: PUSH
73630: LD_INT 1
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 2
73640: PUSH
73641: LD_INT 0
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 2
73650: PUSH
73651: LD_INT 1
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: LD_INT 2
73660: PUSH
73661: LD_INT 2
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: LD_INT 1
73670: PUSH
73671: LD_INT 2
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 0
73680: PUSH
73681: LD_INT 2
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 1
73690: NEG
73691: PUSH
73692: LD_INT 1
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: PUSH
73699: LD_INT 2
73701: NEG
73702: PUSH
73703: LD_INT 0
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 2
73712: NEG
73713: PUSH
73714: LD_INT 1
73716: NEG
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 2
73724: NEG
73725: PUSH
73726: LD_INT 2
73728: NEG
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73755: LD_ADDR_VAR 0 59
73759: PUSH
73760: LD_INT 0
73762: PUSH
73763: LD_INT 0
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PUSH
73770: LD_INT 0
73772: PUSH
73773: LD_INT 1
73775: NEG
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: PUSH
73781: LD_INT 1
73783: PUSH
73784: LD_INT 0
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 1
73793: PUSH
73794: LD_INT 1
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 0
73803: PUSH
73804: LD_INT 1
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 1
73813: NEG
73814: PUSH
73815: LD_INT 0
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: PUSH
73822: LD_INT 1
73824: NEG
73825: PUSH
73826: LD_INT 1
73828: NEG
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73843: LD_ADDR_VAR 0 60
73847: PUSH
73848: LD_INT 0
73850: PUSH
73851: LD_INT 0
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_INT 0
73860: PUSH
73861: LD_INT 1
73863: NEG
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 1
73871: PUSH
73872: LD_INT 0
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 1
73881: PUSH
73882: LD_INT 1
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 0
73891: PUSH
73892: LD_INT 1
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 1
73901: NEG
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 1
73912: NEG
73913: PUSH
73914: LD_INT 1
73916: NEG
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73931: LD_ADDR_VAR 0 61
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: LD_INT 0
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 0
73948: PUSH
73949: LD_INT 1
73951: NEG
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 1
73959: PUSH
73960: LD_INT 0
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: LD_INT 1
73969: PUSH
73970: LD_INT 1
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 0
73979: PUSH
73980: LD_INT 1
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 1
73989: NEG
73990: PUSH
73991: LD_INT 0
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: PUSH
73998: LD_INT 1
74000: NEG
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74019: LD_ADDR_VAR 0 62
74023: PUSH
74024: LD_INT 0
74026: PUSH
74027: LD_INT 0
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 0
74036: PUSH
74037: LD_INT 1
74039: NEG
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_INT 1
74047: PUSH
74048: LD_INT 0
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 1
74057: PUSH
74058: LD_INT 1
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 0
74067: PUSH
74068: LD_INT 1
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PUSH
74075: LD_INT 1
74077: NEG
74078: PUSH
74079: LD_INT 0
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PUSH
74086: LD_INT 1
74088: NEG
74089: PUSH
74090: LD_INT 1
74092: NEG
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74107: LD_ADDR_VAR 0 63
74111: PUSH
74112: LD_INT 0
74114: PUSH
74115: LD_INT 0
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 0
74124: PUSH
74125: LD_INT 1
74127: NEG
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 1
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 1
74145: PUSH
74146: LD_INT 1
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 0
74155: PUSH
74156: LD_INT 1
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 1
74165: NEG
74166: PUSH
74167: LD_INT 0
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: LD_INT 1
74176: NEG
74177: PUSH
74178: LD_INT 1
74180: NEG
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74195: LD_ADDR_VAR 0 64
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: LD_INT 0
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: PUSH
74210: LD_INT 0
74212: PUSH
74213: LD_INT 1
74215: NEG
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 1
74223: PUSH
74224: LD_INT 0
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 1
74233: PUSH
74234: LD_INT 1
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 0
74243: PUSH
74244: LD_INT 1
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: LD_INT 1
74253: NEG
74254: PUSH
74255: LD_INT 0
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 1
74264: NEG
74265: PUSH
74266: LD_INT 1
74268: NEG
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: ST_TO_ADDR
// end ; 1 :
74283: GO 80180
74285: LD_INT 1
74287: DOUBLE
74288: EQUAL
74289: IFTRUE 74293
74291: GO 76916
74293: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74294: LD_ADDR_VAR 0 11
74298: PUSH
74299: LD_INT 1
74301: NEG
74302: PUSH
74303: LD_INT 3
74305: NEG
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 0
74313: PUSH
74314: LD_INT 3
74316: NEG
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: PUSH
74322: LD_INT 1
74324: PUSH
74325: LD_INT 2
74327: NEG
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: LIST
74337: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74338: LD_ADDR_VAR 0 12
74342: PUSH
74343: LD_INT 2
74345: PUSH
74346: LD_INT 1
74348: NEG
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 3
74356: PUSH
74357: LD_INT 0
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_INT 3
74366: PUSH
74367: LD_INT 1
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: LIST
74378: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74379: LD_ADDR_VAR 0 13
74383: PUSH
74384: LD_INT 3
74386: PUSH
74387: LD_INT 2
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: PUSH
74394: LD_INT 3
74396: PUSH
74397: LD_INT 3
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 2
74406: PUSH
74407: LD_INT 3
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: LIST
74418: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74419: LD_ADDR_VAR 0 14
74423: PUSH
74424: LD_INT 1
74426: PUSH
74427: LD_INT 3
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PUSH
74434: LD_INT 0
74436: PUSH
74437: LD_INT 3
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 1
74446: NEG
74447: PUSH
74448: LD_INT 2
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: LIST
74459: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74460: LD_ADDR_VAR 0 15
74464: PUSH
74465: LD_INT 2
74467: NEG
74468: PUSH
74469: LD_INT 1
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 3
74478: NEG
74479: PUSH
74480: LD_INT 0
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 3
74489: NEG
74490: PUSH
74491: LD_INT 1
74493: NEG
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: LIST
74503: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74504: LD_ADDR_VAR 0 16
74508: PUSH
74509: LD_INT 2
74511: NEG
74512: PUSH
74513: LD_INT 3
74515: NEG
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 3
74523: NEG
74524: PUSH
74525: LD_INT 2
74527: NEG
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PUSH
74533: LD_INT 3
74535: NEG
74536: PUSH
74537: LD_INT 3
74539: NEG
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: LIST
74549: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74550: LD_ADDR_VAR 0 17
74554: PUSH
74555: LD_INT 1
74557: NEG
74558: PUSH
74559: LD_INT 3
74561: NEG
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 0
74569: PUSH
74570: LD_INT 3
74572: NEG
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 1
74580: PUSH
74581: LD_INT 2
74583: NEG
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: LIST
74593: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74594: LD_ADDR_VAR 0 18
74598: PUSH
74599: LD_INT 2
74601: PUSH
74602: LD_INT 1
74604: NEG
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 3
74612: PUSH
74613: LD_INT 0
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 3
74622: PUSH
74623: LD_INT 1
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: LIST
74634: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74635: LD_ADDR_VAR 0 19
74639: PUSH
74640: LD_INT 3
74642: PUSH
74643: LD_INT 2
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 3
74652: PUSH
74653: LD_INT 3
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: PUSH
74660: LD_INT 2
74662: PUSH
74663: LD_INT 3
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: LIST
74674: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74675: LD_ADDR_VAR 0 20
74679: PUSH
74680: LD_INT 1
74682: PUSH
74683: LD_INT 3
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 0
74692: PUSH
74693: LD_INT 3
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 1
74702: NEG
74703: PUSH
74704: LD_INT 2
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: LIST
74715: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74716: LD_ADDR_VAR 0 21
74720: PUSH
74721: LD_INT 2
74723: NEG
74724: PUSH
74725: LD_INT 1
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 3
74734: NEG
74735: PUSH
74736: LD_INT 0
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: LD_INT 3
74745: NEG
74746: PUSH
74747: LD_INT 1
74749: NEG
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: LIST
74759: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74760: LD_ADDR_VAR 0 22
74764: PUSH
74765: LD_INT 2
74767: NEG
74768: PUSH
74769: LD_INT 3
74771: NEG
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 3
74779: NEG
74780: PUSH
74781: LD_INT 2
74783: NEG
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 3
74791: NEG
74792: PUSH
74793: LD_INT 3
74795: NEG
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: LIST
74805: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
74806: LD_ADDR_VAR 0 23
74810: PUSH
74811: LD_INT 0
74813: PUSH
74814: LD_INT 3
74816: NEG
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PUSH
74822: LD_INT 1
74824: NEG
74825: PUSH
74826: LD_INT 4
74828: NEG
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: LD_INT 1
74836: PUSH
74837: LD_INT 3
74839: NEG
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
74850: LD_ADDR_VAR 0 24
74854: PUSH
74855: LD_INT 3
74857: PUSH
74858: LD_INT 0
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 3
74867: PUSH
74868: LD_INT 1
74870: NEG
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PUSH
74876: LD_INT 4
74878: PUSH
74879: LD_INT 1
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: LIST
74890: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
74891: LD_ADDR_VAR 0 25
74895: PUSH
74896: LD_INT 3
74898: PUSH
74899: LD_INT 3
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 4
74908: PUSH
74909: LD_INT 3
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 3
74918: PUSH
74919: LD_INT 4
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: LIST
74930: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
74931: LD_ADDR_VAR 0 26
74935: PUSH
74936: LD_INT 0
74938: PUSH
74939: LD_INT 3
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 1
74948: PUSH
74949: LD_INT 4
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 1
74958: NEG
74959: PUSH
74960: LD_INT 3
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: LIST
74971: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
74972: LD_ADDR_VAR 0 27
74976: PUSH
74977: LD_INT 3
74979: NEG
74980: PUSH
74981: LD_INT 0
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: PUSH
74988: LD_INT 3
74990: NEG
74991: PUSH
74992: LD_INT 1
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 4
75001: NEG
75002: PUSH
75003: LD_INT 1
75005: NEG
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
75016: LD_ADDR_VAR 0 28
75020: PUSH
75021: LD_INT 3
75023: NEG
75024: PUSH
75025: LD_INT 3
75027: NEG
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: LD_INT 3
75035: NEG
75036: PUSH
75037: LD_INT 4
75039: NEG
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PUSH
75045: LD_INT 4
75047: NEG
75048: PUSH
75049: LD_INT 3
75051: NEG
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: LIST
75061: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
75062: LD_ADDR_VAR 0 29
75066: PUSH
75067: LD_INT 1
75069: NEG
75070: PUSH
75071: LD_INT 3
75073: NEG
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 0
75081: PUSH
75082: LD_INT 3
75084: NEG
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 1
75092: PUSH
75093: LD_INT 2
75095: NEG
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 1
75103: NEG
75104: PUSH
75105: LD_INT 4
75107: NEG
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PUSH
75113: LD_INT 0
75115: PUSH
75116: LD_INT 4
75118: NEG
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 1
75126: PUSH
75127: LD_INT 3
75129: NEG
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 1
75137: NEG
75138: PUSH
75139: LD_INT 5
75141: NEG
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 0
75149: PUSH
75150: LD_INT 5
75152: NEG
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: PUSH
75158: LD_INT 1
75160: PUSH
75161: LD_INT 4
75163: NEG
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_INT 1
75171: NEG
75172: PUSH
75173: LD_INT 6
75175: NEG
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 0
75183: PUSH
75184: LD_INT 6
75186: NEG
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 1
75194: PUSH
75195: LD_INT 5
75197: NEG
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
75217: LD_ADDR_VAR 0 30
75221: PUSH
75222: LD_INT 2
75224: PUSH
75225: LD_INT 1
75227: NEG
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 3
75235: PUSH
75236: LD_INT 0
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 3
75245: PUSH
75246: LD_INT 1
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: PUSH
75253: LD_INT 3
75255: PUSH
75256: LD_INT 1
75258: NEG
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_INT 4
75266: PUSH
75267: LD_INT 0
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: LD_INT 4
75276: PUSH
75277: LD_INT 1
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 4
75286: PUSH
75287: LD_INT 1
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 5
75297: PUSH
75298: LD_INT 0
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 5
75307: PUSH
75308: LD_INT 1
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 5
75317: PUSH
75318: LD_INT 1
75320: NEG
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 6
75328: PUSH
75329: LD_INT 0
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: PUSH
75336: LD_INT 6
75338: PUSH
75339: LD_INT 1
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
75360: LD_ADDR_VAR 0 31
75364: PUSH
75365: LD_INT 3
75367: PUSH
75368: LD_INT 2
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PUSH
75375: LD_INT 3
75377: PUSH
75378: LD_INT 3
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: PUSH
75385: LD_INT 2
75387: PUSH
75388: LD_INT 3
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: PUSH
75395: LD_INT 4
75397: PUSH
75398: LD_INT 3
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: LD_INT 4
75407: PUSH
75408: LD_INT 4
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 3
75417: PUSH
75418: LD_INT 4
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 5
75427: PUSH
75428: LD_INT 4
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: LD_INT 5
75437: PUSH
75438: LD_INT 5
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: PUSH
75445: LD_INT 4
75447: PUSH
75448: LD_INT 5
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 6
75457: PUSH
75458: LD_INT 5
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: LD_INT 6
75467: PUSH
75468: LD_INT 6
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 5
75477: PUSH
75478: LD_INT 6
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
75499: LD_ADDR_VAR 0 32
75503: PUSH
75504: LD_INT 1
75506: PUSH
75507: LD_INT 3
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: LD_INT 0
75516: PUSH
75517: LD_INT 3
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: LD_INT 1
75526: NEG
75527: PUSH
75528: LD_INT 2
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 1
75537: PUSH
75538: LD_INT 4
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 0
75547: PUSH
75548: LD_INT 4
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 1
75557: NEG
75558: PUSH
75559: LD_INT 3
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 1
75568: PUSH
75569: LD_INT 5
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 0
75578: PUSH
75579: LD_INT 5
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 1
75588: NEG
75589: PUSH
75590: LD_INT 4
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: LD_INT 1
75599: PUSH
75600: LD_INT 6
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 0
75609: PUSH
75610: LD_INT 6
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 1
75619: NEG
75620: PUSH
75621: LD_INT 5
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
75642: LD_ADDR_VAR 0 33
75646: PUSH
75647: LD_INT 2
75649: NEG
75650: PUSH
75651: LD_INT 1
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: LD_INT 3
75660: NEG
75661: PUSH
75662: LD_INT 0
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: PUSH
75669: LD_INT 3
75671: NEG
75672: PUSH
75673: LD_INT 1
75675: NEG
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: LD_INT 3
75683: NEG
75684: PUSH
75685: LD_INT 1
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: PUSH
75692: LD_INT 4
75694: NEG
75695: PUSH
75696: LD_INT 0
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: PUSH
75703: LD_INT 4
75705: NEG
75706: PUSH
75707: LD_INT 1
75709: NEG
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: PUSH
75715: LD_INT 4
75717: NEG
75718: PUSH
75719: LD_INT 1
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: LD_INT 5
75728: NEG
75729: PUSH
75730: LD_INT 0
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 5
75739: NEG
75740: PUSH
75741: LD_INT 1
75743: NEG
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 5
75751: NEG
75752: PUSH
75753: LD_INT 1
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PUSH
75760: LD_INT 6
75762: NEG
75763: PUSH
75764: LD_INT 0
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 6
75773: NEG
75774: PUSH
75775: LD_INT 1
75777: NEG
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
75797: LD_ADDR_VAR 0 34
75801: PUSH
75802: LD_INT 2
75804: NEG
75805: PUSH
75806: LD_INT 3
75808: NEG
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 3
75816: NEG
75817: PUSH
75818: LD_INT 2
75820: NEG
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 3
75828: NEG
75829: PUSH
75830: LD_INT 3
75832: NEG
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 3
75840: NEG
75841: PUSH
75842: LD_INT 4
75844: NEG
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: LD_INT 4
75852: NEG
75853: PUSH
75854: LD_INT 3
75856: NEG
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 4
75864: NEG
75865: PUSH
75866: LD_INT 4
75868: NEG
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 4
75876: NEG
75877: PUSH
75878: LD_INT 5
75880: NEG
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 5
75888: NEG
75889: PUSH
75890: LD_INT 4
75892: NEG
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: PUSH
75898: LD_INT 5
75900: NEG
75901: PUSH
75902: LD_INT 5
75904: NEG
75905: PUSH
75906: EMPTY
75907: LIST
75908: LIST
75909: PUSH
75910: LD_INT 5
75912: NEG
75913: PUSH
75914: LD_INT 6
75916: NEG
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PUSH
75922: LD_INT 6
75924: NEG
75925: PUSH
75926: LD_INT 5
75928: NEG
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: LD_INT 6
75936: NEG
75937: PUSH
75938: LD_INT 6
75940: NEG
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: PUSH
75946: EMPTY
75947: LIST
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
75960: LD_ADDR_VAR 0 41
75964: PUSH
75965: LD_INT 0
75967: PUSH
75968: LD_INT 2
75970: NEG
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 1
75978: NEG
75979: PUSH
75980: LD_INT 3
75982: NEG
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 1
75990: PUSH
75991: LD_INT 2
75993: NEG
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: LIST
76003: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
76004: LD_ADDR_VAR 0 42
76008: PUSH
76009: LD_INT 2
76011: PUSH
76012: LD_INT 0
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 2
76021: PUSH
76022: LD_INT 1
76024: NEG
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: PUSH
76030: LD_INT 3
76032: PUSH
76033: LD_INT 1
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: LIST
76044: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
76045: LD_ADDR_VAR 0 43
76049: PUSH
76050: LD_INT 2
76052: PUSH
76053: LD_INT 2
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: LD_INT 3
76062: PUSH
76063: LD_INT 2
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_INT 2
76072: PUSH
76073: LD_INT 3
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: LIST
76084: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
76085: LD_ADDR_VAR 0 44
76089: PUSH
76090: LD_INT 0
76092: PUSH
76093: LD_INT 2
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PUSH
76100: LD_INT 1
76102: PUSH
76103: LD_INT 3
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: PUSH
76110: LD_INT 1
76112: NEG
76113: PUSH
76114: LD_INT 2
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: EMPTY
76122: LIST
76123: LIST
76124: LIST
76125: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76126: LD_ADDR_VAR 0 45
76130: PUSH
76131: LD_INT 2
76133: NEG
76134: PUSH
76135: LD_INT 0
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: LD_INT 2
76144: NEG
76145: PUSH
76146: LD_INT 1
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: PUSH
76153: LD_INT 3
76155: NEG
76156: PUSH
76157: LD_INT 1
76159: NEG
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: LIST
76169: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
76170: LD_ADDR_VAR 0 46
76174: PUSH
76175: LD_INT 2
76177: NEG
76178: PUSH
76179: LD_INT 2
76181: NEG
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: PUSH
76187: LD_INT 2
76189: NEG
76190: PUSH
76191: LD_INT 3
76193: NEG
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 3
76201: NEG
76202: PUSH
76203: LD_INT 2
76205: NEG
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: LIST
76215: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
76216: LD_ADDR_VAR 0 47
76220: PUSH
76221: LD_INT 2
76223: NEG
76224: PUSH
76225: LD_INT 3
76227: NEG
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: LD_INT 1
76235: NEG
76236: PUSH
76237: LD_INT 3
76239: NEG
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
76249: LD_ADDR_VAR 0 48
76253: PUSH
76254: LD_INT 1
76256: PUSH
76257: LD_INT 2
76259: NEG
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 2
76267: PUSH
76268: LD_INT 1
76270: NEG
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
76280: LD_ADDR_VAR 0 49
76284: PUSH
76285: LD_INT 3
76287: PUSH
76288: LD_INT 1
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PUSH
76295: LD_INT 3
76297: PUSH
76298: LD_INT 2
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
76309: LD_ADDR_VAR 0 50
76313: PUSH
76314: LD_INT 2
76316: PUSH
76317: LD_INT 3
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 1
76326: PUSH
76327: LD_INT 3
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
76338: LD_ADDR_VAR 0 51
76342: PUSH
76343: LD_INT 1
76345: NEG
76346: PUSH
76347: LD_INT 2
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 2
76356: NEG
76357: PUSH
76358: LD_INT 1
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
76369: LD_ADDR_VAR 0 52
76373: PUSH
76374: LD_INT 3
76376: NEG
76377: PUSH
76378: LD_INT 1
76380: NEG
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: PUSH
76386: LD_INT 3
76388: NEG
76389: PUSH
76390: LD_INT 2
76392: NEG
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76402: LD_ADDR_VAR 0 53
76406: PUSH
76407: LD_INT 1
76409: NEG
76410: PUSH
76411: LD_INT 3
76413: NEG
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: PUSH
76419: LD_INT 0
76421: PUSH
76422: LD_INT 3
76424: NEG
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 1
76432: PUSH
76433: LD_INT 2
76435: NEG
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: LIST
76445: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76446: LD_ADDR_VAR 0 54
76450: PUSH
76451: LD_INT 2
76453: PUSH
76454: LD_INT 1
76456: NEG
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: PUSH
76462: LD_INT 3
76464: PUSH
76465: LD_INT 0
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 3
76474: PUSH
76475: LD_INT 1
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: LIST
76486: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76487: LD_ADDR_VAR 0 55
76491: PUSH
76492: LD_INT 3
76494: PUSH
76495: LD_INT 2
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: LD_INT 3
76504: PUSH
76505: LD_INT 3
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: PUSH
76512: LD_INT 2
76514: PUSH
76515: LD_INT 3
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: LIST
76526: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76527: LD_ADDR_VAR 0 56
76531: PUSH
76532: LD_INT 1
76534: PUSH
76535: LD_INT 3
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PUSH
76542: LD_INT 0
76544: PUSH
76545: LD_INT 3
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: PUSH
76552: LD_INT 1
76554: NEG
76555: PUSH
76556: LD_INT 2
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: LIST
76567: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76568: LD_ADDR_VAR 0 57
76572: PUSH
76573: LD_INT 2
76575: NEG
76576: PUSH
76577: LD_INT 1
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 3
76586: NEG
76587: PUSH
76588: LD_INT 0
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: LD_INT 3
76597: NEG
76598: PUSH
76599: LD_INT 1
76601: NEG
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: LIST
76611: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76612: LD_ADDR_VAR 0 58
76616: PUSH
76617: LD_INT 2
76619: NEG
76620: PUSH
76621: LD_INT 3
76623: NEG
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PUSH
76629: LD_INT 3
76631: NEG
76632: PUSH
76633: LD_INT 2
76635: NEG
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: PUSH
76641: LD_INT 3
76643: NEG
76644: PUSH
76645: LD_INT 3
76647: NEG
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
76658: LD_ADDR_VAR 0 59
76662: PUSH
76663: LD_INT 1
76665: NEG
76666: PUSH
76667: LD_INT 2
76669: NEG
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: LD_INT 0
76677: PUSH
76678: LD_INT 2
76680: NEG
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 1
76688: PUSH
76689: LD_INT 1
76691: NEG
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
76702: LD_ADDR_VAR 0 60
76706: PUSH
76707: LD_INT 1
76709: PUSH
76710: LD_INT 1
76712: NEG
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 2
76720: PUSH
76721: LD_INT 0
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: PUSH
76728: LD_INT 2
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: LIST
76742: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
76743: LD_ADDR_VAR 0 61
76747: PUSH
76748: LD_INT 2
76750: PUSH
76751: LD_INT 1
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: PUSH
76758: LD_INT 2
76760: PUSH
76761: LD_INT 2
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: LD_INT 2
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: LIST
76782: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
76783: LD_ADDR_VAR 0 62
76787: PUSH
76788: LD_INT 1
76790: PUSH
76791: LD_INT 2
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: PUSH
76798: LD_INT 0
76800: PUSH
76801: LD_INT 2
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PUSH
76808: LD_INT 1
76810: NEG
76811: PUSH
76812: LD_INT 1
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
76824: LD_ADDR_VAR 0 63
76828: PUSH
76829: LD_INT 1
76831: NEG
76832: PUSH
76833: LD_INT 1
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 2
76842: NEG
76843: PUSH
76844: LD_INT 0
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PUSH
76851: LD_INT 2
76853: NEG
76854: PUSH
76855: LD_INT 1
76857: NEG
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: LIST
76867: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76868: LD_ADDR_VAR 0 64
76872: PUSH
76873: LD_INT 1
76875: NEG
76876: PUSH
76877: LD_INT 2
76879: NEG
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: PUSH
76885: LD_INT 2
76887: NEG
76888: PUSH
76889: LD_INT 1
76891: NEG
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 2
76899: NEG
76900: PUSH
76901: LD_INT 2
76903: NEG
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: LIST
76913: ST_TO_ADDR
// end ; 2 :
76914: GO 80180
76916: LD_INT 2
76918: DOUBLE
76919: EQUAL
76920: IFTRUE 76924
76922: GO 80179
76924: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
76925: LD_ADDR_VAR 0 29
76929: PUSH
76930: LD_INT 4
76932: PUSH
76933: LD_INT 0
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: PUSH
76940: LD_INT 4
76942: PUSH
76943: LD_INT 1
76945: NEG
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: PUSH
76951: LD_INT 5
76953: PUSH
76954: LD_INT 0
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PUSH
76961: LD_INT 5
76963: PUSH
76964: LD_INT 1
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 4
76973: PUSH
76974: LD_INT 1
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: LD_INT 3
76983: PUSH
76984: LD_INT 0
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 3
76993: PUSH
76994: LD_INT 1
76996: NEG
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 3
77004: PUSH
77005: LD_INT 2
77007: NEG
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 5
77015: PUSH
77016: LD_INT 2
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: LD_INT 3
77025: PUSH
77026: LD_INT 3
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PUSH
77033: LD_INT 3
77035: PUSH
77036: LD_INT 2
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: PUSH
77043: LD_INT 4
77045: PUSH
77046: LD_INT 3
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: PUSH
77053: LD_INT 4
77055: PUSH
77056: LD_INT 4
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PUSH
77063: LD_INT 3
77065: PUSH
77066: LD_INT 4
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 2
77075: PUSH
77076: LD_INT 3
77078: PUSH
77079: EMPTY
77080: LIST
77081: LIST
77082: PUSH
77083: LD_INT 2
77085: PUSH
77086: LD_INT 2
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PUSH
77093: LD_INT 4
77095: PUSH
77096: LD_INT 2
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: PUSH
77103: LD_INT 2
77105: PUSH
77106: LD_INT 4
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: PUSH
77113: LD_INT 0
77115: PUSH
77116: LD_INT 4
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: PUSH
77123: LD_INT 0
77125: PUSH
77126: LD_INT 3
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: PUSH
77133: LD_INT 1
77135: PUSH
77136: LD_INT 4
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 1
77145: PUSH
77146: LD_INT 5
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PUSH
77153: LD_INT 0
77155: PUSH
77156: LD_INT 5
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: PUSH
77163: LD_INT 1
77165: NEG
77166: PUSH
77167: LD_INT 4
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: LD_INT 1
77176: NEG
77177: PUSH
77178: LD_INT 3
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 2
77187: PUSH
77188: LD_INT 5
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 2
77197: NEG
77198: PUSH
77199: LD_INT 3
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 3
77208: NEG
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PUSH
77217: LD_INT 3
77219: NEG
77220: PUSH
77221: LD_INT 1
77223: NEG
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: PUSH
77229: LD_INT 2
77231: NEG
77232: PUSH
77233: LD_INT 0
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: PUSH
77240: LD_INT 2
77242: NEG
77243: PUSH
77244: LD_INT 1
77246: PUSH
77247: EMPTY
77248: LIST
77249: LIST
77250: PUSH
77251: LD_INT 3
77253: NEG
77254: PUSH
77255: LD_INT 1
77257: PUSH
77258: EMPTY
77259: LIST
77260: LIST
77261: PUSH
77262: LD_INT 4
77264: NEG
77265: PUSH
77266: LD_INT 0
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PUSH
77273: LD_INT 4
77275: NEG
77276: PUSH
77277: LD_INT 1
77279: NEG
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: PUSH
77285: LD_INT 4
77287: NEG
77288: PUSH
77289: LD_INT 2
77291: NEG
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: LD_INT 2
77299: NEG
77300: PUSH
77301: LD_INT 2
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: PUSH
77308: LD_INT 4
77310: NEG
77311: PUSH
77312: LD_INT 4
77314: NEG
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: PUSH
77320: LD_INT 4
77322: NEG
77323: PUSH
77324: LD_INT 5
77326: NEG
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: LD_INT 3
77334: NEG
77335: PUSH
77336: LD_INT 4
77338: NEG
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 3
77346: NEG
77347: PUSH
77348: LD_INT 3
77350: NEG
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: PUSH
77356: LD_INT 4
77358: NEG
77359: PUSH
77360: LD_INT 3
77362: NEG
77363: PUSH
77364: EMPTY
77365: LIST
77366: LIST
77367: PUSH
77368: LD_INT 5
77370: NEG
77371: PUSH
77372: LD_INT 4
77374: NEG
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PUSH
77380: LD_INT 5
77382: NEG
77383: PUSH
77384: LD_INT 5
77386: NEG
77387: PUSH
77388: EMPTY
77389: LIST
77390: LIST
77391: PUSH
77392: LD_INT 3
77394: NEG
77395: PUSH
77396: LD_INT 5
77398: NEG
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: PUSH
77404: LD_INT 5
77406: NEG
77407: PUSH
77408: LD_INT 3
77410: NEG
77411: PUSH
77412: EMPTY
77413: LIST
77414: LIST
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: LIST
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
77463: LD_ADDR_VAR 0 30
77467: PUSH
77468: LD_INT 4
77470: PUSH
77471: LD_INT 4
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PUSH
77478: LD_INT 4
77480: PUSH
77481: LD_INT 3
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: LD_INT 5
77490: PUSH
77491: LD_INT 4
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: PUSH
77498: LD_INT 5
77500: PUSH
77501: LD_INT 5
77503: PUSH
77504: EMPTY
77505: LIST
77506: LIST
77507: PUSH
77508: LD_INT 4
77510: PUSH
77511: LD_INT 5
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: LD_INT 3
77520: PUSH
77521: LD_INT 4
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 3
77530: PUSH
77531: LD_INT 3
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: LD_INT 5
77540: PUSH
77541: LD_INT 3
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: PUSH
77548: LD_INT 3
77550: PUSH
77551: LD_INT 5
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: PUSH
77558: LD_INT 0
77560: PUSH
77561: LD_INT 3
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: PUSH
77568: LD_INT 0
77570: PUSH
77571: LD_INT 2
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 1
77580: PUSH
77581: LD_INT 3
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: LD_INT 1
77590: PUSH
77591: LD_INT 4
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: LD_INT 0
77600: PUSH
77601: LD_INT 4
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: PUSH
77608: LD_INT 1
77610: NEG
77611: PUSH
77612: LD_INT 3
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: PUSH
77619: LD_INT 1
77621: NEG
77622: PUSH
77623: LD_INT 2
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: LD_INT 2
77632: PUSH
77633: LD_INT 4
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: LD_INT 2
77642: NEG
77643: PUSH
77644: LD_INT 2
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: LD_INT 4
77653: NEG
77654: PUSH
77655: LD_INT 0
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PUSH
77662: LD_INT 4
77664: NEG
77665: PUSH
77666: LD_INT 1
77668: NEG
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: PUSH
77674: LD_INT 3
77676: NEG
77677: PUSH
77678: LD_INT 0
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: PUSH
77685: LD_INT 3
77687: NEG
77688: PUSH
77689: LD_INT 1
77691: PUSH
77692: EMPTY
77693: LIST
77694: LIST
77695: PUSH
77696: LD_INT 4
77698: NEG
77699: PUSH
77700: LD_INT 1
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: PUSH
77707: LD_INT 5
77709: NEG
77710: PUSH
77711: LD_INT 0
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: PUSH
77718: LD_INT 5
77720: NEG
77721: PUSH
77722: LD_INT 1
77724: NEG
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PUSH
77730: LD_INT 5
77732: NEG
77733: PUSH
77734: LD_INT 2
77736: NEG
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PUSH
77742: LD_INT 3
77744: NEG
77745: PUSH
77746: LD_INT 2
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: PUSH
77753: LD_INT 3
77755: NEG
77756: PUSH
77757: LD_INT 3
77759: NEG
77760: PUSH
77761: EMPTY
77762: LIST
77763: LIST
77764: PUSH
77765: LD_INT 3
77767: NEG
77768: PUSH
77769: LD_INT 4
77771: NEG
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PUSH
77777: LD_INT 2
77779: NEG
77780: PUSH
77781: LD_INT 3
77783: NEG
77784: PUSH
77785: EMPTY
77786: LIST
77787: LIST
77788: PUSH
77789: LD_INT 2
77791: NEG
77792: PUSH
77793: LD_INT 2
77795: NEG
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: LD_INT 3
77803: NEG
77804: PUSH
77805: LD_INT 2
77807: NEG
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: LD_INT 4
77815: NEG
77816: PUSH
77817: LD_INT 3
77819: NEG
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: LD_INT 4
77827: NEG
77828: PUSH
77829: LD_INT 4
77831: NEG
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 2
77839: NEG
77840: PUSH
77841: LD_INT 4
77843: NEG
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: PUSH
77849: LD_INT 4
77851: NEG
77852: PUSH
77853: LD_INT 2
77855: NEG
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PUSH
77861: LD_INT 0
77863: PUSH
77864: LD_INT 4
77866: NEG
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: PUSH
77872: LD_INT 0
77874: PUSH
77875: LD_INT 5
77877: NEG
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: LD_INT 1
77885: PUSH
77886: LD_INT 4
77888: NEG
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: PUSH
77894: LD_INT 1
77896: PUSH
77897: LD_INT 3
77899: NEG
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: PUSH
77905: LD_INT 0
77907: PUSH
77908: LD_INT 3
77910: NEG
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: PUSH
77916: LD_INT 1
77918: NEG
77919: PUSH
77920: LD_INT 4
77922: NEG
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: PUSH
77928: LD_INT 1
77930: NEG
77931: PUSH
77932: LD_INT 5
77934: NEG
77935: PUSH
77936: EMPTY
77937: LIST
77938: LIST
77939: PUSH
77940: LD_INT 2
77942: PUSH
77943: LD_INT 3
77945: NEG
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PUSH
77951: LD_INT 2
77953: NEG
77954: PUSH
77955: LD_INT 5
77957: NEG
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: LIST
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: LIST
78007: LIST
78008: LIST
78009: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
78010: LD_ADDR_VAR 0 31
78014: PUSH
78015: LD_INT 0
78017: PUSH
78018: LD_INT 4
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 0
78027: PUSH
78028: LD_INT 3
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 1
78037: PUSH
78038: LD_INT 4
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: LD_INT 1
78047: PUSH
78048: LD_INT 5
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: PUSH
78055: LD_INT 0
78057: PUSH
78058: LD_INT 5
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: PUSH
78065: LD_INT 1
78067: NEG
78068: PUSH
78069: LD_INT 4
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: LD_INT 1
78078: NEG
78079: PUSH
78080: LD_INT 3
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: LD_INT 2
78089: PUSH
78090: LD_INT 5
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: LD_INT 2
78099: NEG
78100: PUSH
78101: LD_INT 3
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 3
78110: NEG
78111: PUSH
78112: LD_INT 0
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: PUSH
78119: LD_INT 3
78121: NEG
78122: PUSH
78123: LD_INT 1
78125: NEG
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: LD_INT 2
78133: NEG
78134: PUSH
78135: LD_INT 0
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: LD_INT 2
78144: NEG
78145: PUSH
78146: LD_INT 1
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 3
78155: NEG
78156: PUSH
78157: LD_INT 1
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: PUSH
78164: LD_INT 4
78166: NEG
78167: PUSH
78168: LD_INT 0
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: LD_INT 4
78177: NEG
78178: PUSH
78179: LD_INT 1
78181: NEG
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PUSH
78187: LD_INT 4
78189: NEG
78190: PUSH
78191: LD_INT 2
78193: NEG
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 2
78201: NEG
78202: PUSH
78203: LD_INT 2
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: PUSH
78210: LD_INT 4
78212: NEG
78213: PUSH
78214: LD_INT 4
78216: NEG
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: PUSH
78222: LD_INT 4
78224: NEG
78225: PUSH
78226: LD_INT 5
78228: NEG
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: LD_INT 3
78236: NEG
78237: PUSH
78238: LD_INT 4
78240: NEG
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PUSH
78246: LD_INT 3
78248: NEG
78249: PUSH
78250: LD_INT 3
78252: NEG
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: PUSH
78258: LD_INT 4
78260: NEG
78261: PUSH
78262: LD_INT 3
78264: NEG
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: PUSH
78270: LD_INT 5
78272: NEG
78273: PUSH
78274: LD_INT 4
78276: NEG
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 5
78284: NEG
78285: PUSH
78286: LD_INT 5
78288: NEG
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PUSH
78294: LD_INT 3
78296: NEG
78297: PUSH
78298: LD_INT 5
78300: NEG
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 5
78308: NEG
78309: PUSH
78310: LD_INT 3
78312: NEG
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: PUSH
78318: LD_INT 0
78320: PUSH
78321: LD_INT 3
78323: NEG
78324: PUSH
78325: EMPTY
78326: LIST
78327: LIST
78328: PUSH
78329: LD_INT 0
78331: PUSH
78332: LD_INT 4
78334: NEG
78335: PUSH
78336: EMPTY
78337: LIST
78338: LIST
78339: PUSH
78340: LD_INT 1
78342: PUSH
78343: LD_INT 3
78345: NEG
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: PUSH
78351: LD_INT 1
78353: PUSH
78354: LD_INT 2
78356: NEG
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 0
78364: PUSH
78365: LD_INT 2
78367: NEG
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: PUSH
78373: LD_INT 1
78375: NEG
78376: PUSH
78377: LD_INT 3
78379: NEG
78380: PUSH
78381: EMPTY
78382: LIST
78383: LIST
78384: PUSH
78385: LD_INT 1
78387: NEG
78388: PUSH
78389: LD_INT 4
78391: NEG
78392: PUSH
78393: EMPTY
78394: LIST
78395: LIST
78396: PUSH
78397: LD_INT 2
78399: PUSH
78400: LD_INT 2
78402: NEG
78403: PUSH
78404: EMPTY
78405: LIST
78406: LIST
78407: PUSH
78408: LD_INT 2
78410: NEG
78411: PUSH
78412: LD_INT 4
78414: NEG
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: LD_INT 4
78422: PUSH
78423: LD_INT 0
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: PUSH
78430: LD_INT 4
78432: PUSH
78433: LD_INT 1
78435: NEG
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: PUSH
78441: LD_INT 5
78443: PUSH
78444: LD_INT 0
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: PUSH
78451: LD_INT 5
78453: PUSH
78454: LD_INT 1
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: PUSH
78461: LD_INT 4
78463: PUSH
78464: LD_INT 1
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: PUSH
78471: LD_INT 3
78473: PUSH
78474: LD_INT 0
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: PUSH
78481: LD_INT 3
78483: PUSH
78484: LD_INT 1
78486: NEG
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 3
78494: PUSH
78495: LD_INT 2
78497: NEG
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PUSH
78503: LD_INT 5
78505: PUSH
78506: LD_INT 2
78508: PUSH
78509: EMPTY
78510: LIST
78511: LIST
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: LIST
78517: LIST
78518: LIST
78519: LIST
78520: LIST
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
78560: LD_ADDR_VAR 0 32
78564: PUSH
78565: LD_INT 4
78567: NEG
78568: PUSH
78569: LD_INT 0
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: PUSH
78576: LD_INT 4
78578: NEG
78579: PUSH
78580: LD_INT 1
78582: NEG
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: PUSH
78588: LD_INT 3
78590: NEG
78591: PUSH
78592: LD_INT 0
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: PUSH
78599: LD_INT 3
78601: NEG
78602: PUSH
78603: LD_INT 1
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PUSH
78610: LD_INT 4
78612: NEG
78613: PUSH
78614: LD_INT 1
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PUSH
78621: LD_INT 5
78623: NEG
78624: PUSH
78625: LD_INT 0
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 5
78634: NEG
78635: PUSH
78636: LD_INT 1
78638: NEG
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: PUSH
78644: LD_INT 5
78646: NEG
78647: PUSH
78648: LD_INT 2
78650: NEG
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PUSH
78656: LD_INT 3
78658: NEG
78659: PUSH
78660: LD_INT 2
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 3
78669: NEG
78670: PUSH
78671: LD_INT 3
78673: NEG
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 3
78681: NEG
78682: PUSH
78683: LD_INT 4
78685: NEG
78686: PUSH
78687: EMPTY
78688: LIST
78689: LIST
78690: PUSH
78691: LD_INT 2
78693: NEG
78694: PUSH
78695: LD_INT 3
78697: NEG
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PUSH
78703: LD_INT 2
78705: NEG
78706: PUSH
78707: LD_INT 2
78709: NEG
78710: PUSH
78711: EMPTY
78712: LIST
78713: LIST
78714: PUSH
78715: LD_INT 3
78717: NEG
78718: PUSH
78719: LD_INT 2
78721: NEG
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: PUSH
78727: LD_INT 4
78729: NEG
78730: PUSH
78731: LD_INT 3
78733: NEG
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: PUSH
78739: LD_INT 4
78741: NEG
78742: PUSH
78743: LD_INT 4
78745: NEG
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 2
78753: NEG
78754: PUSH
78755: LD_INT 4
78757: NEG
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 4
78765: NEG
78766: PUSH
78767: LD_INT 2
78769: NEG
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: PUSH
78775: LD_INT 0
78777: PUSH
78778: LD_INT 4
78780: NEG
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 0
78788: PUSH
78789: LD_INT 5
78791: NEG
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: PUSH
78797: LD_INT 1
78799: PUSH
78800: LD_INT 4
78802: NEG
78803: PUSH
78804: EMPTY
78805: LIST
78806: LIST
78807: PUSH
78808: LD_INT 1
78810: PUSH
78811: LD_INT 3
78813: NEG
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 0
78821: PUSH
78822: LD_INT 3
78824: NEG
78825: PUSH
78826: EMPTY
78827: LIST
78828: LIST
78829: PUSH
78830: LD_INT 1
78832: NEG
78833: PUSH
78834: LD_INT 4
78836: NEG
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: PUSH
78842: LD_INT 1
78844: NEG
78845: PUSH
78846: LD_INT 5
78848: NEG
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: PUSH
78854: LD_INT 2
78856: PUSH
78857: LD_INT 3
78859: NEG
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: PUSH
78865: LD_INT 2
78867: NEG
78868: PUSH
78869: LD_INT 5
78871: NEG
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: PUSH
78877: LD_INT 3
78879: PUSH
78880: LD_INT 0
78882: PUSH
78883: EMPTY
78884: LIST
78885: LIST
78886: PUSH
78887: LD_INT 3
78889: PUSH
78890: LD_INT 1
78892: NEG
78893: PUSH
78894: EMPTY
78895: LIST
78896: LIST
78897: PUSH
78898: LD_INT 4
78900: PUSH
78901: LD_INT 0
78903: PUSH
78904: EMPTY
78905: LIST
78906: LIST
78907: PUSH
78908: LD_INT 4
78910: PUSH
78911: LD_INT 1
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: PUSH
78918: LD_INT 3
78920: PUSH
78921: LD_INT 1
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: PUSH
78928: LD_INT 2
78930: PUSH
78931: LD_INT 0
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 2
78940: PUSH
78941: LD_INT 1
78943: NEG
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PUSH
78949: LD_INT 2
78951: PUSH
78952: LD_INT 2
78954: NEG
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: LD_INT 4
78962: PUSH
78963: LD_INT 2
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 4
78972: PUSH
78973: LD_INT 4
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PUSH
78980: LD_INT 4
78982: PUSH
78983: LD_INT 3
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_INT 5
78992: PUSH
78993: LD_INT 4
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 5
79002: PUSH
79003: LD_INT 5
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 4
79012: PUSH
79013: LD_INT 5
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 3
79022: PUSH
79023: LD_INT 4
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 3
79032: PUSH
79033: LD_INT 3
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 5
79042: PUSH
79043: LD_INT 3
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 3
79052: PUSH
79053: LD_INT 5
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: LIST
79096: LIST
79097: LIST
79098: LIST
79099: LIST
79100: LIST
79101: LIST
79102: LIST
79103: LIST
79104: LIST
79105: LIST
79106: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
79107: LD_ADDR_VAR 0 33
79111: PUSH
79112: LD_INT 4
79114: NEG
79115: PUSH
79116: LD_INT 4
79118: NEG
79119: PUSH
79120: EMPTY
79121: LIST
79122: LIST
79123: PUSH
79124: LD_INT 4
79126: NEG
79127: PUSH
79128: LD_INT 5
79130: NEG
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: PUSH
79136: LD_INT 3
79138: NEG
79139: PUSH
79140: LD_INT 4
79142: NEG
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: PUSH
79148: LD_INT 3
79150: NEG
79151: PUSH
79152: LD_INT 3
79154: NEG
79155: PUSH
79156: EMPTY
79157: LIST
79158: LIST
79159: PUSH
79160: LD_INT 4
79162: NEG
79163: PUSH
79164: LD_INT 3
79166: NEG
79167: PUSH
79168: EMPTY
79169: LIST
79170: LIST
79171: PUSH
79172: LD_INT 5
79174: NEG
79175: PUSH
79176: LD_INT 4
79178: NEG
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: PUSH
79184: LD_INT 5
79186: NEG
79187: PUSH
79188: LD_INT 5
79190: NEG
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 3
79198: NEG
79199: PUSH
79200: LD_INT 5
79202: NEG
79203: PUSH
79204: EMPTY
79205: LIST
79206: LIST
79207: PUSH
79208: LD_INT 5
79210: NEG
79211: PUSH
79212: LD_INT 3
79214: NEG
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: PUSH
79220: LD_INT 0
79222: PUSH
79223: LD_INT 3
79225: NEG
79226: PUSH
79227: EMPTY
79228: LIST
79229: LIST
79230: PUSH
79231: LD_INT 0
79233: PUSH
79234: LD_INT 4
79236: NEG
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: LD_INT 1
79244: PUSH
79245: LD_INT 3
79247: NEG
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: PUSH
79253: LD_INT 1
79255: PUSH
79256: LD_INT 2
79258: NEG
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 0
79266: PUSH
79267: LD_INT 2
79269: NEG
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: PUSH
79275: LD_INT 1
79277: NEG
79278: PUSH
79279: LD_INT 3
79281: NEG
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PUSH
79287: LD_INT 1
79289: NEG
79290: PUSH
79291: LD_INT 4
79293: NEG
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PUSH
79299: LD_INT 2
79301: PUSH
79302: LD_INT 2
79304: NEG
79305: PUSH
79306: EMPTY
79307: LIST
79308: LIST
79309: PUSH
79310: LD_INT 2
79312: NEG
79313: PUSH
79314: LD_INT 4
79316: NEG
79317: PUSH
79318: EMPTY
79319: LIST
79320: LIST
79321: PUSH
79322: LD_INT 4
79324: PUSH
79325: LD_INT 0
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PUSH
79332: LD_INT 4
79334: PUSH
79335: LD_INT 1
79337: NEG
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PUSH
79343: LD_INT 5
79345: PUSH
79346: LD_INT 0
79348: PUSH
79349: EMPTY
79350: LIST
79351: LIST
79352: PUSH
79353: LD_INT 5
79355: PUSH
79356: LD_INT 1
79358: PUSH
79359: EMPTY
79360: LIST
79361: LIST
79362: PUSH
79363: LD_INT 4
79365: PUSH
79366: LD_INT 1
79368: PUSH
79369: EMPTY
79370: LIST
79371: LIST
79372: PUSH
79373: LD_INT 3
79375: PUSH
79376: LD_INT 0
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: PUSH
79383: LD_INT 3
79385: PUSH
79386: LD_INT 1
79388: NEG
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PUSH
79394: LD_INT 3
79396: PUSH
79397: LD_INT 2
79399: NEG
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: PUSH
79405: LD_INT 5
79407: PUSH
79408: LD_INT 2
79410: PUSH
79411: EMPTY
79412: LIST
79413: LIST
79414: PUSH
79415: LD_INT 3
79417: PUSH
79418: LD_INT 3
79420: PUSH
79421: EMPTY
79422: LIST
79423: LIST
79424: PUSH
79425: LD_INT 3
79427: PUSH
79428: LD_INT 2
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: LD_INT 4
79437: PUSH
79438: LD_INT 3
79440: PUSH
79441: EMPTY
79442: LIST
79443: LIST
79444: PUSH
79445: LD_INT 4
79447: PUSH
79448: LD_INT 4
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: PUSH
79455: LD_INT 3
79457: PUSH
79458: LD_INT 4
79460: PUSH
79461: EMPTY
79462: LIST
79463: LIST
79464: PUSH
79465: LD_INT 2
79467: PUSH
79468: LD_INT 3
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PUSH
79475: LD_INT 2
79477: PUSH
79478: LD_INT 2
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PUSH
79485: LD_INT 4
79487: PUSH
79488: LD_INT 2
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 2
79497: PUSH
79498: LD_INT 4
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 0
79507: PUSH
79508: LD_INT 4
79510: PUSH
79511: EMPTY
79512: LIST
79513: LIST
79514: PUSH
79515: LD_INT 0
79517: PUSH
79518: LD_INT 3
79520: PUSH
79521: EMPTY
79522: LIST
79523: LIST
79524: PUSH
79525: LD_INT 1
79527: PUSH
79528: LD_INT 4
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PUSH
79535: LD_INT 1
79537: PUSH
79538: LD_INT 5
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: PUSH
79545: LD_INT 0
79547: PUSH
79548: LD_INT 5
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: PUSH
79555: LD_INT 1
79557: NEG
79558: PUSH
79559: LD_INT 4
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: PUSH
79566: LD_INT 1
79568: NEG
79569: PUSH
79570: LD_INT 3
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: PUSH
79577: LD_INT 2
79579: PUSH
79580: LD_INT 5
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 2
79589: NEG
79590: PUSH
79591: LD_INT 3
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: LIST
79602: LIST
79603: LIST
79604: LIST
79605: LIST
79606: LIST
79607: LIST
79608: LIST
79609: LIST
79610: LIST
79611: LIST
79612: LIST
79613: LIST
79614: LIST
79615: LIST
79616: LIST
79617: LIST
79618: LIST
79619: LIST
79620: LIST
79621: LIST
79622: LIST
79623: LIST
79624: LIST
79625: LIST
79626: LIST
79627: LIST
79628: LIST
79629: LIST
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: LIST
79635: LIST
79636: LIST
79637: LIST
79638: LIST
79639: LIST
79640: LIST
79641: LIST
79642: LIST
79643: LIST
79644: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
79645: LD_ADDR_VAR 0 34
79649: PUSH
79650: LD_INT 0
79652: PUSH
79653: LD_INT 4
79655: NEG
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: PUSH
79661: LD_INT 0
79663: PUSH
79664: LD_INT 5
79666: NEG
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: PUSH
79672: LD_INT 1
79674: PUSH
79675: LD_INT 4
79677: NEG
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: PUSH
79683: LD_INT 1
79685: PUSH
79686: LD_INT 3
79688: NEG
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: LD_INT 0
79696: PUSH
79697: LD_INT 3
79699: NEG
79700: PUSH
79701: EMPTY
79702: LIST
79703: LIST
79704: PUSH
79705: LD_INT 1
79707: NEG
79708: PUSH
79709: LD_INT 4
79711: NEG
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: PUSH
79717: LD_INT 1
79719: NEG
79720: PUSH
79721: LD_INT 5
79723: NEG
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PUSH
79729: LD_INT 2
79731: PUSH
79732: LD_INT 3
79734: NEG
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: PUSH
79740: LD_INT 2
79742: NEG
79743: PUSH
79744: LD_INT 5
79746: NEG
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: PUSH
79752: LD_INT 3
79754: PUSH
79755: LD_INT 0
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: LD_INT 3
79764: PUSH
79765: LD_INT 1
79767: NEG
79768: PUSH
79769: EMPTY
79770: LIST
79771: LIST
79772: PUSH
79773: LD_INT 4
79775: PUSH
79776: LD_INT 0
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: PUSH
79783: LD_INT 4
79785: PUSH
79786: LD_INT 1
79788: PUSH
79789: EMPTY
79790: LIST
79791: LIST
79792: PUSH
79793: LD_INT 3
79795: PUSH
79796: LD_INT 1
79798: PUSH
79799: EMPTY
79800: LIST
79801: LIST
79802: PUSH
79803: LD_INT 2
79805: PUSH
79806: LD_INT 0
79808: PUSH
79809: EMPTY
79810: LIST
79811: LIST
79812: PUSH
79813: LD_INT 2
79815: PUSH
79816: LD_INT 1
79818: NEG
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: PUSH
79824: LD_INT 2
79826: PUSH
79827: LD_INT 2
79829: NEG
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 4
79837: PUSH
79838: LD_INT 2
79840: PUSH
79841: EMPTY
79842: LIST
79843: LIST
79844: PUSH
79845: LD_INT 4
79847: PUSH
79848: LD_INT 4
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: PUSH
79855: LD_INT 4
79857: PUSH
79858: LD_INT 3
79860: PUSH
79861: EMPTY
79862: LIST
79863: LIST
79864: PUSH
79865: LD_INT 5
79867: PUSH
79868: LD_INT 4
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 5
79877: PUSH
79878: LD_INT 5
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PUSH
79885: LD_INT 4
79887: PUSH
79888: LD_INT 5
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 3
79897: PUSH
79898: LD_INT 4
79900: PUSH
79901: EMPTY
79902: LIST
79903: LIST
79904: PUSH
79905: LD_INT 3
79907: PUSH
79908: LD_INT 3
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: PUSH
79915: LD_INT 5
79917: PUSH
79918: LD_INT 3
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PUSH
79925: LD_INT 3
79927: PUSH
79928: LD_INT 5
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PUSH
79935: LD_INT 0
79937: PUSH
79938: LD_INT 3
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: PUSH
79945: LD_INT 0
79947: PUSH
79948: LD_INT 2
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 1
79957: PUSH
79958: LD_INT 3
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 1
79967: PUSH
79968: LD_INT 4
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 0
79977: PUSH
79978: LD_INT 4
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: PUSH
79985: LD_INT 1
79987: NEG
79988: PUSH
79989: LD_INT 3
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: PUSH
79996: LD_INT 1
79998: NEG
79999: PUSH
80000: LD_INT 2
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: LD_INT 2
80009: PUSH
80010: LD_INT 4
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: PUSH
80017: LD_INT 2
80019: NEG
80020: PUSH
80021: LD_INT 2
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: LD_INT 4
80030: NEG
80031: PUSH
80032: LD_INT 0
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: PUSH
80039: LD_INT 4
80041: NEG
80042: PUSH
80043: LD_INT 1
80045: NEG
80046: PUSH
80047: EMPTY
80048: LIST
80049: LIST
80050: PUSH
80051: LD_INT 3
80053: NEG
80054: PUSH
80055: LD_INT 0
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 3
80064: NEG
80065: PUSH
80066: LD_INT 1
80068: PUSH
80069: EMPTY
80070: LIST
80071: LIST
80072: PUSH
80073: LD_INT 4
80075: NEG
80076: PUSH
80077: LD_INT 1
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: PUSH
80084: LD_INT 5
80086: NEG
80087: PUSH
80088: LD_INT 0
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: PUSH
80095: LD_INT 5
80097: NEG
80098: PUSH
80099: LD_INT 1
80101: NEG
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 5
80109: NEG
80110: PUSH
80111: LD_INT 2
80113: NEG
80114: PUSH
80115: EMPTY
80116: LIST
80117: LIST
80118: PUSH
80119: LD_INT 3
80121: NEG
80122: PUSH
80123: LD_INT 2
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: LIST
80134: LIST
80135: LIST
80136: LIST
80137: LIST
80138: LIST
80139: LIST
80140: LIST
80141: LIST
80142: LIST
80143: LIST
80144: LIST
80145: LIST
80146: LIST
80147: LIST
80148: LIST
80149: LIST
80150: LIST
80151: LIST
80152: LIST
80153: LIST
80154: LIST
80155: LIST
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: ST_TO_ADDR
// end ; end ;
80177: GO 80180
80179: POP
// case btype of b_depot , b_warehouse :
80180: LD_VAR 0 1
80184: PUSH
80185: LD_INT 0
80187: DOUBLE
80188: EQUAL
80189: IFTRUE 80199
80191: LD_INT 1
80193: DOUBLE
80194: EQUAL
80195: IFTRUE 80199
80197: GO 80400
80199: POP
// case nation of nation_american :
80200: LD_VAR 0 5
80204: PUSH
80205: LD_INT 1
80207: DOUBLE
80208: EQUAL
80209: IFTRUE 80213
80211: GO 80269
80213: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
80214: LD_ADDR_VAR 0 9
80218: PUSH
80219: LD_VAR 0 11
80223: PUSH
80224: LD_VAR 0 12
80228: PUSH
80229: LD_VAR 0 13
80233: PUSH
80234: LD_VAR 0 14
80238: PUSH
80239: LD_VAR 0 15
80243: PUSH
80244: LD_VAR 0 16
80248: PUSH
80249: EMPTY
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: LIST
80255: LIST
80256: PUSH
80257: LD_VAR 0 4
80261: PUSH
80262: LD_INT 1
80264: PLUS
80265: ARRAY
80266: ST_TO_ADDR
80267: GO 80398
80269: LD_INT 2
80271: DOUBLE
80272: EQUAL
80273: IFTRUE 80277
80275: GO 80333
80277: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
80278: LD_ADDR_VAR 0 9
80282: PUSH
80283: LD_VAR 0 17
80287: PUSH
80288: LD_VAR 0 18
80292: PUSH
80293: LD_VAR 0 19
80297: PUSH
80298: LD_VAR 0 20
80302: PUSH
80303: LD_VAR 0 21
80307: PUSH
80308: LD_VAR 0 22
80312: PUSH
80313: EMPTY
80314: LIST
80315: LIST
80316: LIST
80317: LIST
80318: LIST
80319: LIST
80320: PUSH
80321: LD_VAR 0 4
80325: PUSH
80326: LD_INT 1
80328: PLUS
80329: ARRAY
80330: ST_TO_ADDR
80331: GO 80398
80333: LD_INT 3
80335: DOUBLE
80336: EQUAL
80337: IFTRUE 80341
80339: GO 80397
80341: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
80342: LD_ADDR_VAR 0 9
80346: PUSH
80347: LD_VAR 0 23
80351: PUSH
80352: LD_VAR 0 24
80356: PUSH
80357: LD_VAR 0 25
80361: PUSH
80362: LD_VAR 0 26
80366: PUSH
80367: LD_VAR 0 27
80371: PUSH
80372: LD_VAR 0 28
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: LIST
80381: LIST
80382: LIST
80383: LIST
80384: PUSH
80385: LD_VAR 0 4
80389: PUSH
80390: LD_INT 1
80392: PLUS
80393: ARRAY
80394: ST_TO_ADDR
80395: GO 80398
80397: POP
80398: GO 80953
80400: LD_INT 2
80402: DOUBLE
80403: EQUAL
80404: IFTRUE 80414
80406: LD_INT 3
80408: DOUBLE
80409: EQUAL
80410: IFTRUE 80414
80412: GO 80470
80414: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
80415: LD_ADDR_VAR 0 9
80419: PUSH
80420: LD_VAR 0 29
80424: PUSH
80425: LD_VAR 0 30
80429: PUSH
80430: LD_VAR 0 31
80434: PUSH
80435: LD_VAR 0 32
80439: PUSH
80440: LD_VAR 0 33
80444: PUSH
80445: LD_VAR 0 34
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: LIST
80454: LIST
80455: LIST
80456: LIST
80457: PUSH
80458: LD_VAR 0 4
80462: PUSH
80463: LD_INT 1
80465: PLUS
80466: ARRAY
80467: ST_TO_ADDR
80468: GO 80953
80470: LD_INT 16
80472: DOUBLE
80473: EQUAL
80474: IFTRUE 80532
80476: LD_INT 17
80478: DOUBLE
80479: EQUAL
80480: IFTRUE 80532
80482: LD_INT 18
80484: DOUBLE
80485: EQUAL
80486: IFTRUE 80532
80488: LD_INT 19
80490: DOUBLE
80491: EQUAL
80492: IFTRUE 80532
80494: LD_INT 22
80496: DOUBLE
80497: EQUAL
80498: IFTRUE 80532
80500: LD_INT 20
80502: DOUBLE
80503: EQUAL
80504: IFTRUE 80532
80506: LD_INT 21
80508: DOUBLE
80509: EQUAL
80510: IFTRUE 80532
80512: LD_INT 23
80514: DOUBLE
80515: EQUAL
80516: IFTRUE 80532
80518: LD_INT 24
80520: DOUBLE
80521: EQUAL
80522: IFTRUE 80532
80524: LD_INT 25
80526: DOUBLE
80527: EQUAL
80528: IFTRUE 80532
80530: GO 80588
80532: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
80533: LD_ADDR_VAR 0 9
80537: PUSH
80538: LD_VAR 0 35
80542: PUSH
80543: LD_VAR 0 36
80547: PUSH
80548: LD_VAR 0 37
80552: PUSH
80553: LD_VAR 0 38
80557: PUSH
80558: LD_VAR 0 39
80562: PUSH
80563: LD_VAR 0 40
80567: PUSH
80568: EMPTY
80569: LIST
80570: LIST
80571: LIST
80572: LIST
80573: LIST
80574: LIST
80575: PUSH
80576: LD_VAR 0 4
80580: PUSH
80581: LD_INT 1
80583: PLUS
80584: ARRAY
80585: ST_TO_ADDR
80586: GO 80953
80588: LD_INT 6
80590: DOUBLE
80591: EQUAL
80592: IFTRUE 80644
80594: LD_INT 7
80596: DOUBLE
80597: EQUAL
80598: IFTRUE 80644
80600: LD_INT 8
80602: DOUBLE
80603: EQUAL
80604: IFTRUE 80644
80606: LD_INT 13
80608: DOUBLE
80609: EQUAL
80610: IFTRUE 80644
80612: LD_INT 12
80614: DOUBLE
80615: EQUAL
80616: IFTRUE 80644
80618: LD_INT 15
80620: DOUBLE
80621: EQUAL
80622: IFTRUE 80644
80624: LD_INT 11
80626: DOUBLE
80627: EQUAL
80628: IFTRUE 80644
80630: LD_INT 14
80632: DOUBLE
80633: EQUAL
80634: IFTRUE 80644
80636: LD_INT 10
80638: DOUBLE
80639: EQUAL
80640: IFTRUE 80644
80642: GO 80700
80644: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
80645: LD_ADDR_VAR 0 9
80649: PUSH
80650: LD_VAR 0 41
80654: PUSH
80655: LD_VAR 0 42
80659: PUSH
80660: LD_VAR 0 43
80664: PUSH
80665: LD_VAR 0 44
80669: PUSH
80670: LD_VAR 0 45
80674: PUSH
80675: LD_VAR 0 46
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: LIST
80684: LIST
80685: LIST
80686: LIST
80687: PUSH
80688: LD_VAR 0 4
80692: PUSH
80693: LD_INT 1
80695: PLUS
80696: ARRAY
80697: ST_TO_ADDR
80698: GO 80953
80700: LD_INT 36
80702: DOUBLE
80703: EQUAL
80704: IFTRUE 80708
80706: GO 80764
80708: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
80709: LD_ADDR_VAR 0 9
80713: PUSH
80714: LD_VAR 0 47
80718: PUSH
80719: LD_VAR 0 48
80723: PUSH
80724: LD_VAR 0 49
80728: PUSH
80729: LD_VAR 0 50
80733: PUSH
80734: LD_VAR 0 51
80738: PUSH
80739: LD_VAR 0 52
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: LIST
80748: LIST
80749: LIST
80750: LIST
80751: PUSH
80752: LD_VAR 0 4
80756: PUSH
80757: LD_INT 1
80759: PLUS
80760: ARRAY
80761: ST_TO_ADDR
80762: GO 80953
80764: LD_INT 4
80766: DOUBLE
80767: EQUAL
80768: IFTRUE 80790
80770: LD_INT 5
80772: DOUBLE
80773: EQUAL
80774: IFTRUE 80790
80776: LD_INT 34
80778: DOUBLE
80779: EQUAL
80780: IFTRUE 80790
80782: LD_INT 37
80784: DOUBLE
80785: EQUAL
80786: IFTRUE 80790
80788: GO 80846
80790: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
80791: LD_ADDR_VAR 0 9
80795: PUSH
80796: LD_VAR 0 53
80800: PUSH
80801: LD_VAR 0 54
80805: PUSH
80806: LD_VAR 0 55
80810: PUSH
80811: LD_VAR 0 56
80815: PUSH
80816: LD_VAR 0 57
80820: PUSH
80821: LD_VAR 0 58
80825: PUSH
80826: EMPTY
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: PUSH
80834: LD_VAR 0 4
80838: PUSH
80839: LD_INT 1
80841: PLUS
80842: ARRAY
80843: ST_TO_ADDR
80844: GO 80953
80846: LD_INT 31
80848: DOUBLE
80849: EQUAL
80850: IFTRUE 80896
80852: LD_INT 32
80854: DOUBLE
80855: EQUAL
80856: IFTRUE 80896
80858: LD_INT 33
80860: DOUBLE
80861: EQUAL
80862: IFTRUE 80896
80864: LD_INT 27
80866: DOUBLE
80867: EQUAL
80868: IFTRUE 80896
80870: LD_INT 26
80872: DOUBLE
80873: EQUAL
80874: IFTRUE 80896
80876: LD_INT 28
80878: DOUBLE
80879: EQUAL
80880: IFTRUE 80896
80882: LD_INT 29
80884: DOUBLE
80885: EQUAL
80886: IFTRUE 80896
80888: LD_INT 30
80890: DOUBLE
80891: EQUAL
80892: IFTRUE 80896
80894: GO 80952
80896: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
80897: LD_ADDR_VAR 0 9
80901: PUSH
80902: LD_VAR 0 59
80906: PUSH
80907: LD_VAR 0 60
80911: PUSH
80912: LD_VAR 0 61
80916: PUSH
80917: LD_VAR 0 62
80921: PUSH
80922: LD_VAR 0 63
80926: PUSH
80927: LD_VAR 0 64
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: LIST
80936: LIST
80937: LIST
80938: LIST
80939: PUSH
80940: LD_VAR 0 4
80944: PUSH
80945: LD_INT 1
80947: PLUS
80948: ARRAY
80949: ST_TO_ADDR
80950: GO 80953
80952: POP
// temp_list2 = [ ] ;
80953: LD_ADDR_VAR 0 10
80957: PUSH
80958: EMPTY
80959: ST_TO_ADDR
// for i in temp_list do
80960: LD_ADDR_VAR 0 8
80964: PUSH
80965: LD_VAR 0 9
80969: PUSH
80970: FOR_IN
80971: IFFALSE 81023
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
80973: LD_ADDR_VAR 0 10
80977: PUSH
80978: LD_VAR 0 10
80982: PUSH
80983: LD_VAR 0 8
80987: PUSH
80988: LD_INT 1
80990: ARRAY
80991: PUSH
80992: LD_VAR 0 2
80996: PLUS
80997: PUSH
80998: LD_VAR 0 8
81002: PUSH
81003: LD_INT 2
81005: ARRAY
81006: PUSH
81007: LD_VAR 0 3
81011: PLUS
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: PUSH
81017: EMPTY
81018: LIST
81019: ADD
81020: ST_TO_ADDR
81021: GO 80970
81023: POP
81024: POP
// result = temp_list2 ;
81025: LD_ADDR_VAR 0 7
81029: PUSH
81030: LD_VAR 0 10
81034: ST_TO_ADDR
// end ;
81035: LD_VAR 0 7
81039: RET
// export function EnemyInRange ( unit , dist ) ; begin
81040: LD_INT 0
81042: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
81043: LD_ADDR_VAR 0 3
81047: PUSH
81048: LD_VAR 0 1
81052: PPUSH
81053: CALL_OW 255
81057: PPUSH
81058: LD_VAR 0 1
81062: PPUSH
81063: CALL_OW 250
81067: PPUSH
81068: LD_VAR 0 1
81072: PPUSH
81073: CALL_OW 251
81077: PPUSH
81078: LD_VAR 0 2
81082: PPUSH
81083: CALL 55144 0 4
81087: PUSH
81088: LD_INT 4
81090: ARRAY
81091: ST_TO_ADDR
// end ;
81092: LD_VAR 0 3
81096: RET
// export function PlayerSeeMe ( unit ) ; begin
81097: LD_INT 0
81099: PPUSH
// result := See ( your_side , unit ) ;
81100: LD_ADDR_VAR 0 2
81104: PUSH
81105: LD_OWVAR 2
81109: PPUSH
81110: LD_VAR 0 1
81114: PPUSH
81115: CALL_OW 292
81119: ST_TO_ADDR
// end ;
81120: LD_VAR 0 2
81124: RET
// export function ReverseDir ( unit ) ; begin
81125: LD_INT 0
81127: PPUSH
// if not unit then
81128: LD_VAR 0 1
81132: NOT
81133: IFFALSE 81137
// exit ;
81135: GO 81183
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
81137: LD_ADDR_VAR 0 2
81141: PUSH
81142: LD_INT 3
81144: PUSH
81145: LD_INT 4
81147: PUSH
81148: LD_INT 5
81150: PUSH
81151: LD_INT 0
81153: PUSH
81154: LD_INT 1
81156: PUSH
81157: LD_INT 2
81159: PUSH
81160: EMPTY
81161: LIST
81162: LIST
81163: LIST
81164: LIST
81165: LIST
81166: LIST
81167: PUSH
81168: LD_VAR 0 1
81172: PPUSH
81173: CALL_OW 254
81177: PUSH
81178: LD_INT 1
81180: PLUS
81181: ARRAY
81182: ST_TO_ADDR
// end ;
81183: LD_VAR 0 2
81187: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
81188: LD_INT 0
81190: PPUSH
81191: PPUSH
81192: PPUSH
81193: PPUSH
81194: PPUSH
// if not hexes then
81195: LD_VAR 0 2
81199: NOT
81200: IFFALSE 81204
// exit ;
81202: GO 81352
// dist := 9999 ;
81204: LD_ADDR_VAR 0 5
81208: PUSH
81209: LD_INT 9999
81211: ST_TO_ADDR
// for i = 1 to hexes do
81212: LD_ADDR_VAR 0 4
81216: PUSH
81217: DOUBLE
81218: LD_INT 1
81220: DEC
81221: ST_TO_ADDR
81222: LD_VAR 0 2
81226: PUSH
81227: FOR_TO
81228: IFFALSE 81340
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
81230: LD_VAR 0 1
81234: PPUSH
81235: LD_VAR 0 2
81239: PUSH
81240: LD_VAR 0 4
81244: ARRAY
81245: PUSH
81246: LD_INT 1
81248: ARRAY
81249: PPUSH
81250: LD_VAR 0 2
81254: PUSH
81255: LD_VAR 0 4
81259: ARRAY
81260: PUSH
81261: LD_INT 2
81263: ARRAY
81264: PPUSH
81265: CALL_OW 297
81269: PUSH
81270: LD_VAR 0 5
81274: LESS
81275: IFFALSE 81338
// begin hex := hexes [ i ] ;
81277: LD_ADDR_VAR 0 7
81281: PUSH
81282: LD_VAR 0 2
81286: PUSH
81287: LD_VAR 0 4
81291: ARRAY
81292: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81293: LD_ADDR_VAR 0 5
81297: PUSH
81298: LD_VAR 0 1
81302: PPUSH
81303: LD_VAR 0 2
81307: PUSH
81308: LD_VAR 0 4
81312: ARRAY
81313: PUSH
81314: LD_INT 1
81316: ARRAY
81317: PPUSH
81318: LD_VAR 0 2
81322: PUSH
81323: LD_VAR 0 4
81327: ARRAY
81328: PUSH
81329: LD_INT 2
81331: ARRAY
81332: PPUSH
81333: CALL_OW 297
81337: ST_TO_ADDR
// end ; end ;
81338: GO 81227
81340: POP
81341: POP
// result := hex ;
81342: LD_ADDR_VAR 0 3
81346: PUSH
81347: LD_VAR 0 7
81351: ST_TO_ADDR
// end ;
81352: LD_VAR 0 3
81356: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
81357: LD_INT 0
81359: PPUSH
81360: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
81361: LD_VAR 0 1
81365: NOT
81366: PUSH
81367: LD_VAR 0 1
81371: PUSH
81372: LD_INT 21
81374: PUSH
81375: LD_INT 2
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: PUSH
81382: LD_INT 23
81384: PUSH
81385: LD_INT 2
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: PPUSH
81396: CALL_OW 69
81400: IN
81401: NOT
81402: OR
81403: IFFALSE 81407
// exit ;
81405: GO 81454
// for i = 1 to 3 do
81407: LD_ADDR_VAR 0 3
81411: PUSH
81412: DOUBLE
81413: LD_INT 1
81415: DEC
81416: ST_TO_ADDR
81417: LD_INT 3
81419: PUSH
81420: FOR_TO
81421: IFFALSE 81452
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
81423: LD_VAR 0 1
81427: PPUSH
81428: CALL_OW 250
81432: PPUSH
81433: LD_VAR 0 1
81437: PPUSH
81438: CALL_OW 251
81442: PPUSH
81443: LD_INT 1
81445: PPUSH
81446: CALL_OW 453
81450: GO 81420
81452: POP
81453: POP
// end ;
81454: LD_VAR 0 2
81458: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
81459: LD_INT 0
81461: PPUSH
81462: PPUSH
81463: PPUSH
81464: PPUSH
81465: PPUSH
81466: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
81467: LD_VAR 0 1
81471: NOT
81472: PUSH
81473: LD_VAR 0 2
81477: NOT
81478: OR
81479: PUSH
81480: LD_VAR 0 1
81484: PPUSH
81485: CALL_OW 314
81489: OR
81490: IFFALSE 81494
// exit ;
81492: GO 81935
// x := GetX ( enemy_unit ) ;
81494: LD_ADDR_VAR 0 7
81498: PUSH
81499: LD_VAR 0 2
81503: PPUSH
81504: CALL_OW 250
81508: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
81509: LD_ADDR_VAR 0 8
81513: PUSH
81514: LD_VAR 0 2
81518: PPUSH
81519: CALL_OW 251
81523: ST_TO_ADDR
// if not x or not y then
81524: LD_VAR 0 7
81528: NOT
81529: PUSH
81530: LD_VAR 0 8
81534: NOT
81535: OR
81536: IFFALSE 81540
// exit ;
81538: GO 81935
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
81540: LD_ADDR_VAR 0 6
81544: PUSH
81545: LD_VAR 0 7
81549: PPUSH
81550: LD_INT 0
81552: PPUSH
81553: LD_INT 4
81555: PPUSH
81556: CALL_OW 272
81560: PUSH
81561: LD_VAR 0 8
81565: PPUSH
81566: LD_INT 0
81568: PPUSH
81569: LD_INT 4
81571: PPUSH
81572: CALL_OW 273
81576: PUSH
81577: EMPTY
81578: LIST
81579: LIST
81580: PUSH
81581: LD_VAR 0 7
81585: PPUSH
81586: LD_INT 1
81588: PPUSH
81589: LD_INT 4
81591: PPUSH
81592: CALL_OW 272
81596: PUSH
81597: LD_VAR 0 8
81601: PPUSH
81602: LD_INT 1
81604: PPUSH
81605: LD_INT 4
81607: PPUSH
81608: CALL_OW 273
81612: PUSH
81613: EMPTY
81614: LIST
81615: LIST
81616: PUSH
81617: LD_VAR 0 7
81621: PPUSH
81622: LD_INT 2
81624: PPUSH
81625: LD_INT 4
81627: PPUSH
81628: CALL_OW 272
81632: PUSH
81633: LD_VAR 0 8
81637: PPUSH
81638: LD_INT 2
81640: PPUSH
81641: LD_INT 4
81643: PPUSH
81644: CALL_OW 273
81648: PUSH
81649: EMPTY
81650: LIST
81651: LIST
81652: PUSH
81653: LD_VAR 0 7
81657: PPUSH
81658: LD_INT 3
81660: PPUSH
81661: LD_INT 4
81663: PPUSH
81664: CALL_OW 272
81668: PUSH
81669: LD_VAR 0 8
81673: PPUSH
81674: LD_INT 3
81676: PPUSH
81677: LD_INT 4
81679: PPUSH
81680: CALL_OW 273
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: PUSH
81689: LD_VAR 0 7
81693: PPUSH
81694: LD_INT 4
81696: PPUSH
81697: LD_INT 4
81699: PPUSH
81700: CALL_OW 272
81704: PUSH
81705: LD_VAR 0 8
81709: PPUSH
81710: LD_INT 4
81712: PPUSH
81713: LD_INT 4
81715: PPUSH
81716: CALL_OW 273
81720: PUSH
81721: EMPTY
81722: LIST
81723: LIST
81724: PUSH
81725: LD_VAR 0 7
81729: PPUSH
81730: LD_INT 5
81732: PPUSH
81733: LD_INT 4
81735: PPUSH
81736: CALL_OW 272
81740: PUSH
81741: LD_VAR 0 8
81745: PPUSH
81746: LD_INT 5
81748: PPUSH
81749: LD_INT 4
81751: PPUSH
81752: CALL_OW 273
81756: PUSH
81757: EMPTY
81758: LIST
81759: LIST
81760: PUSH
81761: EMPTY
81762: LIST
81763: LIST
81764: LIST
81765: LIST
81766: LIST
81767: LIST
81768: ST_TO_ADDR
// for i = tmp downto 1 do
81769: LD_ADDR_VAR 0 4
81773: PUSH
81774: DOUBLE
81775: LD_VAR 0 6
81779: INC
81780: ST_TO_ADDR
81781: LD_INT 1
81783: PUSH
81784: FOR_DOWNTO
81785: IFFALSE 81886
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
81787: LD_VAR 0 6
81791: PUSH
81792: LD_VAR 0 4
81796: ARRAY
81797: PUSH
81798: LD_INT 1
81800: ARRAY
81801: PPUSH
81802: LD_VAR 0 6
81806: PUSH
81807: LD_VAR 0 4
81811: ARRAY
81812: PUSH
81813: LD_INT 2
81815: ARRAY
81816: PPUSH
81817: CALL_OW 488
81821: NOT
81822: PUSH
81823: LD_VAR 0 6
81827: PUSH
81828: LD_VAR 0 4
81832: ARRAY
81833: PUSH
81834: LD_INT 1
81836: ARRAY
81837: PPUSH
81838: LD_VAR 0 6
81842: PUSH
81843: LD_VAR 0 4
81847: ARRAY
81848: PUSH
81849: LD_INT 2
81851: ARRAY
81852: PPUSH
81853: CALL_OW 428
81857: PUSH
81858: LD_INT 0
81860: NONEQUAL
81861: OR
81862: IFFALSE 81884
// tmp := Delete ( tmp , i ) ;
81864: LD_ADDR_VAR 0 6
81868: PUSH
81869: LD_VAR 0 6
81873: PPUSH
81874: LD_VAR 0 4
81878: PPUSH
81879: CALL_OW 3
81883: ST_TO_ADDR
81884: GO 81784
81886: POP
81887: POP
// j := GetClosestHex ( unit , tmp ) ;
81888: LD_ADDR_VAR 0 5
81892: PUSH
81893: LD_VAR 0 1
81897: PPUSH
81898: LD_VAR 0 6
81902: PPUSH
81903: CALL 81188 0 2
81907: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
81908: LD_VAR 0 1
81912: PPUSH
81913: LD_VAR 0 5
81917: PUSH
81918: LD_INT 1
81920: ARRAY
81921: PPUSH
81922: LD_VAR 0 5
81926: PUSH
81927: LD_INT 2
81929: ARRAY
81930: PPUSH
81931: CALL_OW 111
// end ;
81935: LD_VAR 0 3
81939: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
81940: LD_INT 0
81942: PPUSH
81943: PPUSH
81944: PPUSH
// uc_side = 0 ;
81945: LD_ADDR_OWVAR 20
81949: PUSH
81950: LD_INT 0
81952: ST_TO_ADDR
// uc_nation = 0 ;
81953: LD_ADDR_OWVAR 21
81957: PUSH
81958: LD_INT 0
81960: ST_TO_ADDR
// InitHc ;
81961: CALL_OW 19
// InitVc ;
81965: CALL_OW 20
// if mastodonts then
81969: LD_VAR 0 6
81973: IFFALSE 82040
// for i = 1 to mastodonts do
81975: LD_ADDR_VAR 0 11
81979: PUSH
81980: DOUBLE
81981: LD_INT 1
81983: DEC
81984: ST_TO_ADDR
81985: LD_VAR 0 6
81989: PUSH
81990: FOR_TO
81991: IFFALSE 82038
// begin vc_chassis := 31 ;
81993: LD_ADDR_OWVAR 37
81997: PUSH
81998: LD_INT 31
82000: ST_TO_ADDR
// vc_control := control_rider ;
82001: LD_ADDR_OWVAR 38
82005: PUSH
82006: LD_INT 4
82008: ST_TO_ADDR
// animal := CreateVehicle ;
82009: LD_ADDR_VAR 0 12
82013: PUSH
82014: CALL_OW 45
82018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82019: LD_VAR 0 12
82023: PPUSH
82024: LD_VAR 0 8
82028: PPUSH
82029: LD_INT 0
82031: PPUSH
82032: CALL 88785 0 3
// end ;
82036: GO 81990
82038: POP
82039: POP
// if horses then
82040: LD_VAR 0 5
82044: IFFALSE 82111
// for i = 1 to horses do
82046: LD_ADDR_VAR 0 11
82050: PUSH
82051: DOUBLE
82052: LD_INT 1
82054: DEC
82055: ST_TO_ADDR
82056: LD_VAR 0 5
82060: PUSH
82061: FOR_TO
82062: IFFALSE 82109
// begin hc_class := 21 ;
82064: LD_ADDR_OWVAR 28
82068: PUSH
82069: LD_INT 21
82071: ST_TO_ADDR
// hc_gallery :=  ;
82072: LD_ADDR_OWVAR 33
82076: PUSH
82077: LD_STRING 
82079: ST_TO_ADDR
// animal := CreateHuman ;
82080: LD_ADDR_VAR 0 12
82084: PUSH
82085: CALL_OW 44
82089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82090: LD_VAR 0 12
82094: PPUSH
82095: LD_VAR 0 8
82099: PPUSH
82100: LD_INT 0
82102: PPUSH
82103: CALL 88785 0 3
// end ;
82107: GO 82061
82109: POP
82110: POP
// if birds then
82111: LD_VAR 0 1
82115: IFFALSE 82182
// for i = 1 to birds do
82117: LD_ADDR_VAR 0 11
82121: PUSH
82122: DOUBLE
82123: LD_INT 1
82125: DEC
82126: ST_TO_ADDR
82127: LD_VAR 0 1
82131: PUSH
82132: FOR_TO
82133: IFFALSE 82180
// begin hc_class = 18 ;
82135: LD_ADDR_OWVAR 28
82139: PUSH
82140: LD_INT 18
82142: ST_TO_ADDR
// hc_gallery =  ;
82143: LD_ADDR_OWVAR 33
82147: PUSH
82148: LD_STRING 
82150: ST_TO_ADDR
// animal := CreateHuman ;
82151: LD_ADDR_VAR 0 12
82155: PUSH
82156: CALL_OW 44
82160: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82161: LD_VAR 0 12
82165: PPUSH
82166: LD_VAR 0 8
82170: PPUSH
82171: LD_INT 0
82173: PPUSH
82174: CALL 88785 0 3
// end ;
82178: GO 82132
82180: POP
82181: POP
// if tigers then
82182: LD_VAR 0 2
82186: IFFALSE 82270
// for i = 1 to tigers do
82188: LD_ADDR_VAR 0 11
82192: PUSH
82193: DOUBLE
82194: LD_INT 1
82196: DEC
82197: ST_TO_ADDR
82198: LD_VAR 0 2
82202: PUSH
82203: FOR_TO
82204: IFFALSE 82268
// begin hc_class = class_tiger ;
82206: LD_ADDR_OWVAR 28
82210: PUSH
82211: LD_INT 14
82213: ST_TO_ADDR
// hc_gallery =  ;
82214: LD_ADDR_OWVAR 33
82218: PUSH
82219: LD_STRING 
82221: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
82222: LD_ADDR_OWVAR 35
82226: PUSH
82227: LD_INT 7
82229: NEG
82230: PPUSH
82231: LD_INT 7
82233: PPUSH
82234: CALL_OW 12
82238: ST_TO_ADDR
// animal := CreateHuman ;
82239: LD_ADDR_VAR 0 12
82243: PUSH
82244: CALL_OW 44
82248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82249: LD_VAR 0 12
82253: PPUSH
82254: LD_VAR 0 8
82258: PPUSH
82259: LD_INT 0
82261: PPUSH
82262: CALL 88785 0 3
// end ;
82266: GO 82203
82268: POP
82269: POP
// if apemans then
82270: LD_VAR 0 3
82274: IFFALSE 82397
// for i = 1 to apemans do
82276: LD_ADDR_VAR 0 11
82280: PUSH
82281: DOUBLE
82282: LD_INT 1
82284: DEC
82285: ST_TO_ADDR
82286: LD_VAR 0 3
82290: PUSH
82291: FOR_TO
82292: IFFALSE 82395
// begin hc_class = class_apeman ;
82294: LD_ADDR_OWVAR 28
82298: PUSH
82299: LD_INT 12
82301: ST_TO_ADDR
// hc_gallery =  ;
82302: LD_ADDR_OWVAR 33
82306: PUSH
82307: LD_STRING 
82309: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
82310: LD_ADDR_OWVAR 35
82314: PUSH
82315: LD_INT 5
82317: NEG
82318: PPUSH
82319: LD_INT 5
82321: PPUSH
82322: CALL_OW 12
82326: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
82327: LD_ADDR_OWVAR 31
82331: PUSH
82332: LD_INT 1
82334: PPUSH
82335: LD_INT 3
82337: PPUSH
82338: CALL_OW 12
82342: PUSH
82343: LD_INT 1
82345: PPUSH
82346: LD_INT 3
82348: PPUSH
82349: CALL_OW 12
82353: PUSH
82354: LD_INT 0
82356: PUSH
82357: LD_INT 0
82359: PUSH
82360: EMPTY
82361: LIST
82362: LIST
82363: LIST
82364: LIST
82365: ST_TO_ADDR
// animal := CreateHuman ;
82366: LD_ADDR_VAR 0 12
82370: PUSH
82371: CALL_OW 44
82375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82376: LD_VAR 0 12
82380: PPUSH
82381: LD_VAR 0 8
82385: PPUSH
82386: LD_INT 0
82388: PPUSH
82389: CALL 88785 0 3
// end ;
82393: GO 82291
82395: POP
82396: POP
// if enchidnas then
82397: LD_VAR 0 4
82401: IFFALSE 82468
// for i = 1 to enchidnas do
82403: LD_ADDR_VAR 0 11
82407: PUSH
82408: DOUBLE
82409: LD_INT 1
82411: DEC
82412: ST_TO_ADDR
82413: LD_VAR 0 4
82417: PUSH
82418: FOR_TO
82419: IFFALSE 82466
// begin hc_class = 13 ;
82421: LD_ADDR_OWVAR 28
82425: PUSH
82426: LD_INT 13
82428: ST_TO_ADDR
// hc_gallery =  ;
82429: LD_ADDR_OWVAR 33
82433: PUSH
82434: LD_STRING 
82436: ST_TO_ADDR
// animal := CreateHuman ;
82437: LD_ADDR_VAR 0 12
82441: PUSH
82442: CALL_OW 44
82446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82447: LD_VAR 0 12
82451: PPUSH
82452: LD_VAR 0 8
82456: PPUSH
82457: LD_INT 0
82459: PPUSH
82460: CALL 88785 0 3
// end ;
82464: GO 82418
82466: POP
82467: POP
// if fishes then
82468: LD_VAR 0 7
82472: IFFALSE 82539
// for i = 1 to fishes do
82474: LD_ADDR_VAR 0 11
82478: PUSH
82479: DOUBLE
82480: LD_INT 1
82482: DEC
82483: ST_TO_ADDR
82484: LD_VAR 0 7
82488: PUSH
82489: FOR_TO
82490: IFFALSE 82537
// begin hc_class = 20 ;
82492: LD_ADDR_OWVAR 28
82496: PUSH
82497: LD_INT 20
82499: ST_TO_ADDR
// hc_gallery =  ;
82500: LD_ADDR_OWVAR 33
82504: PUSH
82505: LD_STRING 
82507: ST_TO_ADDR
// animal := CreateHuman ;
82508: LD_ADDR_VAR 0 12
82512: PUSH
82513: CALL_OW 44
82517: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
82518: LD_VAR 0 12
82522: PPUSH
82523: LD_VAR 0 9
82527: PPUSH
82528: LD_INT 0
82530: PPUSH
82531: CALL 88785 0 3
// end ;
82535: GO 82489
82537: POP
82538: POP
// end ;
82539: LD_VAR 0 10
82543: RET
// export function WantHeal ( sci , unit ) ; begin
82544: LD_INT 0
82546: PPUSH
// if GetTaskList ( sci ) > 0 then
82547: LD_VAR 0 1
82551: PPUSH
82552: CALL_OW 437
82556: PUSH
82557: LD_INT 0
82559: GREATER
82560: IFFALSE 82630
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
82562: LD_VAR 0 1
82566: PPUSH
82567: CALL_OW 437
82571: PUSH
82572: LD_INT 1
82574: ARRAY
82575: PUSH
82576: LD_INT 1
82578: ARRAY
82579: PUSH
82580: LD_STRING l
82582: EQUAL
82583: PUSH
82584: LD_VAR 0 1
82588: PPUSH
82589: CALL_OW 437
82593: PUSH
82594: LD_INT 1
82596: ARRAY
82597: PUSH
82598: LD_INT 4
82600: ARRAY
82601: PUSH
82602: LD_VAR 0 2
82606: EQUAL
82607: AND
82608: IFFALSE 82620
// result := true else
82610: LD_ADDR_VAR 0 3
82614: PUSH
82615: LD_INT 1
82617: ST_TO_ADDR
82618: GO 82628
// result := false ;
82620: LD_ADDR_VAR 0 3
82624: PUSH
82625: LD_INT 0
82627: ST_TO_ADDR
// end else
82628: GO 82638
// result := false ;
82630: LD_ADDR_VAR 0 3
82634: PUSH
82635: LD_INT 0
82637: ST_TO_ADDR
// end ;
82638: LD_VAR 0 3
82642: RET
// export function HealTarget ( sci ) ; begin
82643: LD_INT 0
82645: PPUSH
// if not sci then
82646: LD_VAR 0 1
82650: NOT
82651: IFFALSE 82655
// exit ;
82653: GO 82720
// result := 0 ;
82655: LD_ADDR_VAR 0 2
82659: PUSH
82660: LD_INT 0
82662: ST_TO_ADDR
// if GetTaskList ( sci ) then
82663: LD_VAR 0 1
82667: PPUSH
82668: CALL_OW 437
82672: IFFALSE 82720
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
82674: LD_VAR 0 1
82678: PPUSH
82679: CALL_OW 437
82683: PUSH
82684: LD_INT 1
82686: ARRAY
82687: PUSH
82688: LD_INT 1
82690: ARRAY
82691: PUSH
82692: LD_STRING l
82694: EQUAL
82695: IFFALSE 82720
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
82697: LD_ADDR_VAR 0 2
82701: PUSH
82702: LD_VAR 0 1
82706: PPUSH
82707: CALL_OW 437
82711: PUSH
82712: LD_INT 1
82714: ARRAY
82715: PUSH
82716: LD_INT 4
82718: ARRAY
82719: ST_TO_ADDR
// end ;
82720: LD_VAR 0 2
82724: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
82725: LD_INT 0
82727: PPUSH
82728: PPUSH
82729: PPUSH
82730: PPUSH
82731: PPUSH
82732: PPUSH
82733: PPUSH
82734: PPUSH
82735: PPUSH
82736: PPUSH
82737: PPUSH
82738: PPUSH
82739: PPUSH
82740: PPUSH
82741: PPUSH
82742: PPUSH
82743: PPUSH
82744: PPUSH
82745: PPUSH
82746: PPUSH
82747: PPUSH
82748: PPUSH
82749: PPUSH
82750: PPUSH
82751: PPUSH
82752: PPUSH
82753: PPUSH
82754: PPUSH
82755: PPUSH
82756: PPUSH
82757: PPUSH
82758: PPUSH
82759: PPUSH
82760: PPUSH
// if not list then
82761: LD_VAR 0 1
82765: NOT
82766: IFFALSE 82770
// exit ;
82768: GO 87396
// base := list [ 1 ] ;
82770: LD_ADDR_VAR 0 3
82774: PUSH
82775: LD_VAR 0 1
82779: PUSH
82780: LD_INT 1
82782: ARRAY
82783: ST_TO_ADDR
// group := list [ 2 ] ;
82784: LD_ADDR_VAR 0 4
82788: PUSH
82789: LD_VAR 0 1
82793: PUSH
82794: LD_INT 2
82796: ARRAY
82797: ST_TO_ADDR
// path := list [ 3 ] ;
82798: LD_ADDR_VAR 0 5
82802: PUSH
82803: LD_VAR 0 1
82807: PUSH
82808: LD_INT 3
82810: ARRAY
82811: ST_TO_ADDR
// flags := list [ 4 ] ;
82812: LD_ADDR_VAR 0 6
82816: PUSH
82817: LD_VAR 0 1
82821: PUSH
82822: LD_INT 4
82824: ARRAY
82825: ST_TO_ADDR
// mined := [ ] ;
82826: LD_ADDR_VAR 0 27
82830: PUSH
82831: EMPTY
82832: ST_TO_ADDR
// bombed := [ ] ;
82833: LD_ADDR_VAR 0 28
82837: PUSH
82838: EMPTY
82839: ST_TO_ADDR
// healers := [ ] ;
82840: LD_ADDR_VAR 0 31
82844: PUSH
82845: EMPTY
82846: ST_TO_ADDR
// to_heal := [ ] ;
82847: LD_ADDR_VAR 0 30
82851: PUSH
82852: EMPTY
82853: ST_TO_ADDR
// repairs := [ ] ;
82854: LD_ADDR_VAR 0 33
82858: PUSH
82859: EMPTY
82860: ST_TO_ADDR
// to_repair := [ ] ;
82861: LD_ADDR_VAR 0 32
82865: PUSH
82866: EMPTY
82867: ST_TO_ADDR
// if not group or not path then
82868: LD_VAR 0 4
82872: NOT
82873: PUSH
82874: LD_VAR 0 5
82878: NOT
82879: OR
82880: IFFALSE 82884
// exit ;
82882: GO 87396
// side := GetSide ( group [ 1 ] ) ;
82884: LD_ADDR_VAR 0 35
82888: PUSH
82889: LD_VAR 0 4
82893: PUSH
82894: LD_INT 1
82896: ARRAY
82897: PPUSH
82898: CALL_OW 255
82902: ST_TO_ADDR
// if flags then
82903: LD_VAR 0 6
82907: IFFALSE 83051
// begin f_ignore_area := flags [ 1 ] ;
82909: LD_ADDR_VAR 0 17
82913: PUSH
82914: LD_VAR 0 6
82918: PUSH
82919: LD_INT 1
82921: ARRAY
82922: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
82923: LD_ADDR_VAR 0 18
82927: PUSH
82928: LD_VAR 0 6
82932: PUSH
82933: LD_INT 2
82935: ARRAY
82936: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
82937: LD_ADDR_VAR 0 19
82941: PUSH
82942: LD_VAR 0 6
82946: PUSH
82947: LD_INT 3
82949: ARRAY
82950: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
82951: LD_ADDR_VAR 0 20
82955: PUSH
82956: LD_VAR 0 6
82960: PUSH
82961: LD_INT 4
82963: ARRAY
82964: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
82965: LD_ADDR_VAR 0 21
82969: PUSH
82970: LD_VAR 0 6
82974: PUSH
82975: LD_INT 5
82977: ARRAY
82978: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
82979: LD_ADDR_VAR 0 22
82983: PUSH
82984: LD_VAR 0 6
82988: PUSH
82989: LD_INT 6
82991: ARRAY
82992: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
82993: LD_ADDR_VAR 0 23
82997: PUSH
82998: LD_VAR 0 6
83002: PUSH
83003: LD_INT 7
83005: ARRAY
83006: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
83007: LD_ADDR_VAR 0 24
83011: PUSH
83012: LD_VAR 0 6
83016: PUSH
83017: LD_INT 8
83019: ARRAY
83020: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
83021: LD_ADDR_VAR 0 25
83025: PUSH
83026: LD_VAR 0 6
83030: PUSH
83031: LD_INT 9
83033: ARRAY
83034: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
83035: LD_ADDR_VAR 0 26
83039: PUSH
83040: LD_VAR 0 6
83044: PUSH
83045: LD_INT 10
83047: ARRAY
83048: ST_TO_ADDR
// end else
83049: GO 83131
// begin f_ignore_area := false ;
83051: LD_ADDR_VAR 0 17
83055: PUSH
83056: LD_INT 0
83058: ST_TO_ADDR
// f_capture := false ;
83059: LD_ADDR_VAR 0 18
83063: PUSH
83064: LD_INT 0
83066: ST_TO_ADDR
// f_ignore_civ := false ;
83067: LD_ADDR_VAR 0 19
83071: PUSH
83072: LD_INT 0
83074: ST_TO_ADDR
// f_murder := false ;
83075: LD_ADDR_VAR 0 20
83079: PUSH
83080: LD_INT 0
83082: ST_TO_ADDR
// f_mines := false ;
83083: LD_ADDR_VAR 0 21
83087: PUSH
83088: LD_INT 0
83090: ST_TO_ADDR
// f_repair := false ;
83091: LD_ADDR_VAR 0 22
83095: PUSH
83096: LD_INT 0
83098: ST_TO_ADDR
// f_heal := false ;
83099: LD_ADDR_VAR 0 23
83103: PUSH
83104: LD_INT 0
83106: ST_TO_ADDR
// f_spacetime := false ;
83107: LD_ADDR_VAR 0 24
83111: PUSH
83112: LD_INT 0
83114: ST_TO_ADDR
// f_attack_depot := false ;
83115: LD_ADDR_VAR 0 25
83119: PUSH
83120: LD_INT 0
83122: ST_TO_ADDR
// f_crawl := false ;
83123: LD_ADDR_VAR 0 26
83127: PUSH
83128: LD_INT 0
83130: ST_TO_ADDR
// end ; if f_heal then
83131: LD_VAR 0 23
83135: IFFALSE 83162
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
83137: LD_ADDR_VAR 0 31
83141: PUSH
83142: LD_VAR 0 4
83146: PPUSH
83147: LD_INT 25
83149: PUSH
83150: LD_INT 4
83152: PUSH
83153: EMPTY
83154: LIST
83155: LIST
83156: PPUSH
83157: CALL_OW 72
83161: ST_TO_ADDR
// if f_repair then
83162: LD_VAR 0 22
83166: IFFALSE 83193
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
83168: LD_ADDR_VAR 0 33
83172: PUSH
83173: LD_VAR 0 4
83177: PPUSH
83178: LD_INT 25
83180: PUSH
83181: LD_INT 3
83183: PUSH
83184: EMPTY
83185: LIST
83186: LIST
83187: PPUSH
83188: CALL_OW 72
83192: ST_TO_ADDR
// units_path := [ ] ;
83193: LD_ADDR_VAR 0 16
83197: PUSH
83198: EMPTY
83199: ST_TO_ADDR
// for i = 1 to group do
83200: LD_ADDR_VAR 0 7
83204: PUSH
83205: DOUBLE
83206: LD_INT 1
83208: DEC
83209: ST_TO_ADDR
83210: LD_VAR 0 4
83214: PUSH
83215: FOR_TO
83216: IFFALSE 83245
// units_path := Replace ( units_path , i , path ) ;
83218: LD_ADDR_VAR 0 16
83222: PUSH
83223: LD_VAR 0 16
83227: PPUSH
83228: LD_VAR 0 7
83232: PPUSH
83233: LD_VAR 0 5
83237: PPUSH
83238: CALL_OW 1
83242: ST_TO_ADDR
83243: GO 83215
83245: POP
83246: POP
// repeat for i = group downto 1 do
83247: LD_ADDR_VAR 0 7
83251: PUSH
83252: DOUBLE
83253: LD_VAR 0 4
83257: INC
83258: ST_TO_ADDR
83259: LD_INT 1
83261: PUSH
83262: FOR_DOWNTO
83263: IFFALSE 87359
// begin wait ( 5 ) ;
83265: LD_INT 5
83267: PPUSH
83268: CALL_OW 67
// tmp := [ ] ;
83272: LD_ADDR_VAR 0 14
83276: PUSH
83277: EMPTY
83278: ST_TO_ADDR
// attacking := false ;
83279: LD_ADDR_VAR 0 29
83283: PUSH
83284: LD_INT 0
83286: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
83287: LD_VAR 0 4
83291: PUSH
83292: LD_VAR 0 7
83296: ARRAY
83297: PPUSH
83298: CALL_OW 301
83302: PUSH
83303: LD_VAR 0 4
83307: PUSH
83308: LD_VAR 0 7
83312: ARRAY
83313: NOT
83314: OR
83315: IFFALSE 83424
// begin if GetType ( group [ i ] ) = unit_human then
83317: LD_VAR 0 4
83321: PUSH
83322: LD_VAR 0 7
83326: ARRAY
83327: PPUSH
83328: CALL_OW 247
83332: PUSH
83333: LD_INT 1
83335: EQUAL
83336: IFFALSE 83382
// begin to_heal := to_heal diff group [ i ] ;
83338: LD_ADDR_VAR 0 30
83342: PUSH
83343: LD_VAR 0 30
83347: PUSH
83348: LD_VAR 0 4
83352: PUSH
83353: LD_VAR 0 7
83357: ARRAY
83358: DIFF
83359: ST_TO_ADDR
// healers := healers diff group [ i ] ;
83360: LD_ADDR_VAR 0 31
83364: PUSH
83365: LD_VAR 0 31
83369: PUSH
83370: LD_VAR 0 4
83374: PUSH
83375: LD_VAR 0 7
83379: ARRAY
83380: DIFF
83381: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
83382: LD_ADDR_VAR 0 4
83386: PUSH
83387: LD_VAR 0 4
83391: PPUSH
83392: LD_VAR 0 7
83396: PPUSH
83397: CALL_OW 3
83401: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
83402: LD_ADDR_VAR 0 16
83406: PUSH
83407: LD_VAR 0 16
83411: PPUSH
83412: LD_VAR 0 7
83416: PPUSH
83417: CALL_OW 3
83421: ST_TO_ADDR
// continue ;
83422: GO 83262
// end ; if f_repair then
83424: LD_VAR 0 22
83428: IFFALSE 83917
// begin if GetType ( group [ i ] ) = unit_vehicle then
83430: LD_VAR 0 4
83434: PUSH
83435: LD_VAR 0 7
83439: ARRAY
83440: PPUSH
83441: CALL_OW 247
83445: PUSH
83446: LD_INT 2
83448: EQUAL
83449: IFFALSE 83639
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
83451: LD_VAR 0 4
83455: PUSH
83456: LD_VAR 0 7
83460: ARRAY
83461: PPUSH
83462: CALL_OW 256
83466: PUSH
83467: LD_INT 700
83469: LESS
83470: PUSH
83471: LD_VAR 0 4
83475: PUSH
83476: LD_VAR 0 7
83480: ARRAY
83481: PUSH
83482: LD_VAR 0 32
83486: IN
83487: NOT
83488: AND
83489: IFFALSE 83513
// to_repair := to_repair union group [ i ] ;
83491: LD_ADDR_VAR 0 32
83495: PUSH
83496: LD_VAR 0 32
83500: PUSH
83501: LD_VAR 0 4
83505: PUSH
83506: LD_VAR 0 7
83510: ARRAY
83511: UNION
83512: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
83513: LD_VAR 0 4
83517: PUSH
83518: LD_VAR 0 7
83522: ARRAY
83523: PPUSH
83524: CALL_OW 256
83528: PUSH
83529: LD_INT 1000
83531: EQUAL
83532: PUSH
83533: LD_VAR 0 4
83537: PUSH
83538: LD_VAR 0 7
83542: ARRAY
83543: PUSH
83544: LD_VAR 0 32
83548: IN
83549: AND
83550: IFFALSE 83574
// to_repair := to_repair diff group [ i ] ;
83552: LD_ADDR_VAR 0 32
83556: PUSH
83557: LD_VAR 0 32
83561: PUSH
83562: LD_VAR 0 4
83566: PUSH
83567: LD_VAR 0 7
83571: ARRAY
83572: DIFF
83573: ST_TO_ADDR
// if group [ i ] in to_repair then
83574: LD_VAR 0 4
83578: PUSH
83579: LD_VAR 0 7
83583: ARRAY
83584: PUSH
83585: LD_VAR 0 32
83589: IN
83590: IFFALSE 83637
// begin if not IsInArea ( group [ i ] , f_repair ) then
83592: LD_VAR 0 4
83596: PUSH
83597: LD_VAR 0 7
83601: ARRAY
83602: PPUSH
83603: LD_VAR 0 22
83607: PPUSH
83608: CALL_OW 308
83612: NOT
83613: IFFALSE 83635
// ComMoveToArea ( group [ i ] , f_repair ) ;
83615: LD_VAR 0 4
83619: PUSH
83620: LD_VAR 0 7
83624: ARRAY
83625: PPUSH
83626: LD_VAR 0 22
83630: PPUSH
83631: CALL_OW 113
// continue ;
83635: GO 83262
// end ; end else
83637: GO 83917
// if group [ i ] in repairs then
83639: LD_VAR 0 4
83643: PUSH
83644: LD_VAR 0 7
83648: ARRAY
83649: PUSH
83650: LD_VAR 0 33
83654: IN
83655: IFFALSE 83917
// begin if IsInUnit ( group [ i ] ) then
83657: LD_VAR 0 4
83661: PUSH
83662: LD_VAR 0 7
83666: ARRAY
83667: PPUSH
83668: CALL_OW 310
83672: IFFALSE 83740
// begin z := IsInUnit ( group [ i ] ) ;
83674: LD_ADDR_VAR 0 13
83678: PUSH
83679: LD_VAR 0 4
83683: PUSH
83684: LD_VAR 0 7
83688: ARRAY
83689: PPUSH
83690: CALL_OW 310
83694: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
83695: LD_VAR 0 13
83699: PUSH
83700: LD_VAR 0 32
83704: IN
83705: PUSH
83706: LD_VAR 0 13
83710: PPUSH
83711: LD_VAR 0 22
83715: PPUSH
83716: CALL_OW 308
83720: AND
83721: IFFALSE 83738
// ComExitVehicle ( group [ i ] ) ;
83723: LD_VAR 0 4
83727: PUSH
83728: LD_VAR 0 7
83732: ARRAY
83733: PPUSH
83734: CALL_OW 121
// end else
83738: GO 83917
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
83740: LD_ADDR_VAR 0 13
83744: PUSH
83745: LD_VAR 0 4
83749: PPUSH
83750: LD_INT 95
83752: PUSH
83753: LD_VAR 0 22
83757: PUSH
83758: EMPTY
83759: LIST
83760: LIST
83761: PUSH
83762: LD_INT 58
83764: PUSH
83765: EMPTY
83766: LIST
83767: PUSH
83768: EMPTY
83769: LIST
83770: LIST
83771: PPUSH
83772: CALL_OW 72
83776: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
83777: LD_VAR 0 4
83781: PUSH
83782: LD_VAR 0 7
83786: ARRAY
83787: PPUSH
83788: CALL_OW 314
83792: NOT
83793: IFFALSE 83915
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
83795: LD_ADDR_VAR 0 10
83799: PUSH
83800: LD_VAR 0 13
83804: PPUSH
83805: LD_VAR 0 4
83809: PUSH
83810: LD_VAR 0 7
83814: ARRAY
83815: PPUSH
83816: CALL_OW 74
83820: ST_TO_ADDR
// if not x then
83821: LD_VAR 0 10
83825: NOT
83826: IFFALSE 83830
// continue ;
83828: GO 83262
// if GetLives ( x ) < 1000 then
83830: LD_VAR 0 10
83834: PPUSH
83835: CALL_OW 256
83839: PUSH
83840: LD_INT 1000
83842: LESS
83843: IFFALSE 83867
// ComRepairVehicle ( group [ i ] , x ) else
83845: LD_VAR 0 4
83849: PUSH
83850: LD_VAR 0 7
83854: ARRAY
83855: PPUSH
83856: LD_VAR 0 10
83860: PPUSH
83861: CALL_OW 129
83865: GO 83915
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
83867: LD_VAR 0 23
83871: PUSH
83872: LD_VAR 0 4
83876: PUSH
83877: LD_VAR 0 7
83881: ARRAY
83882: PPUSH
83883: CALL_OW 256
83887: PUSH
83888: LD_INT 1000
83890: LESS
83891: AND
83892: NOT
83893: IFFALSE 83915
// ComEnterUnit ( group [ i ] , x ) ;
83895: LD_VAR 0 4
83899: PUSH
83900: LD_VAR 0 7
83904: ARRAY
83905: PPUSH
83906: LD_VAR 0 10
83910: PPUSH
83911: CALL_OW 120
// end ; continue ;
83915: GO 83262
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
83917: LD_VAR 0 23
83921: PUSH
83922: LD_VAR 0 4
83926: PUSH
83927: LD_VAR 0 7
83931: ARRAY
83932: PPUSH
83933: CALL_OW 247
83937: PUSH
83938: LD_INT 1
83940: EQUAL
83941: AND
83942: IFFALSE 84420
// begin if group [ i ] in healers then
83944: LD_VAR 0 4
83948: PUSH
83949: LD_VAR 0 7
83953: ARRAY
83954: PUSH
83955: LD_VAR 0 31
83959: IN
83960: IFFALSE 84233
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
83962: LD_VAR 0 4
83966: PUSH
83967: LD_VAR 0 7
83971: ARRAY
83972: PPUSH
83973: LD_VAR 0 23
83977: PPUSH
83978: CALL_OW 308
83982: NOT
83983: PUSH
83984: LD_VAR 0 4
83988: PUSH
83989: LD_VAR 0 7
83993: ARRAY
83994: PPUSH
83995: CALL_OW 314
83999: NOT
84000: AND
84001: IFFALSE 84025
// ComMoveToArea ( group [ i ] , f_heal ) else
84003: LD_VAR 0 4
84007: PUSH
84008: LD_VAR 0 7
84012: ARRAY
84013: PPUSH
84014: LD_VAR 0 23
84018: PPUSH
84019: CALL_OW 113
84023: GO 84231
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
84025: LD_VAR 0 4
84029: PUSH
84030: LD_VAR 0 7
84034: ARRAY
84035: PPUSH
84036: CALL 82643 0 1
84040: PPUSH
84041: CALL_OW 256
84045: PUSH
84046: LD_INT 1000
84048: EQUAL
84049: IFFALSE 84068
// ComStop ( group [ i ] ) else
84051: LD_VAR 0 4
84055: PUSH
84056: LD_VAR 0 7
84060: ARRAY
84061: PPUSH
84062: CALL_OW 141
84066: GO 84231
// if not HasTask ( group [ i ] ) and to_heal then
84068: LD_VAR 0 4
84072: PUSH
84073: LD_VAR 0 7
84077: ARRAY
84078: PPUSH
84079: CALL_OW 314
84083: NOT
84084: PUSH
84085: LD_VAR 0 30
84089: AND
84090: IFFALSE 84231
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
84092: LD_ADDR_VAR 0 13
84096: PUSH
84097: LD_VAR 0 30
84101: PPUSH
84102: LD_INT 3
84104: PUSH
84105: LD_INT 54
84107: PUSH
84108: EMPTY
84109: LIST
84110: PUSH
84111: EMPTY
84112: LIST
84113: LIST
84114: PPUSH
84115: CALL_OW 72
84119: PPUSH
84120: LD_VAR 0 4
84124: PUSH
84125: LD_VAR 0 7
84129: ARRAY
84130: PPUSH
84131: CALL_OW 74
84135: ST_TO_ADDR
// if z then
84136: LD_VAR 0 13
84140: IFFALSE 84231
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
84142: LD_INT 91
84144: PUSH
84145: LD_VAR 0 13
84149: PUSH
84150: LD_INT 10
84152: PUSH
84153: EMPTY
84154: LIST
84155: LIST
84156: LIST
84157: PUSH
84158: LD_INT 81
84160: PUSH
84161: LD_VAR 0 13
84165: PPUSH
84166: CALL_OW 255
84170: PUSH
84171: EMPTY
84172: LIST
84173: LIST
84174: PUSH
84175: EMPTY
84176: LIST
84177: LIST
84178: PPUSH
84179: CALL_OW 69
84183: PUSH
84184: LD_INT 0
84186: EQUAL
84187: IFFALSE 84211
// ComHeal ( group [ i ] , z ) else
84189: LD_VAR 0 4
84193: PUSH
84194: LD_VAR 0 7
84198: ARRAY
84199: PPUSH
84200: LD_VAR 0 13
84204: PPUSH
84205: CALL_OW 128
84209: GO 84231
// ComMoveToArea ( group [ i ] , f_heal ) ;
84211: LD_VAR 0 4
84215: PUSH
84216: LD_VAR 0 7
84220: ARRAY
84221: PPUSH
84222: LD_VAR 0 23
84226: PPUSH
84227: CALL_OW 113
// end ; continue ;
84231: GO 83262
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
84233: LD_VAR 0 4
84237: PUSH
84238: LD_VAR 0 7
84242: ARRAY
84243: PPUSH
84244: CALL_OW 256
84248: PUSH
84249: LD_INT 700
84251: LESS
84252: PUSH
84253: LD_VAR 0 4
84257: PUSH
84258: LD_VAR 0 7
84262: ARRAY
84263: PUSH
84264: LD_VAR 0 30
84268: IN
84269: NOT
84270: AND
84271: IFFALSE 84295
// to_heal := to_heal union group [ i ] ;
84273: LD_ADDR_VAR 0 30
84277: PUSH
84278: LD_VAR 0 30
84282: PUSH
84283: LD_VAR 0 4
84287: PUSH
84288: LD_VAR 0 7
84292: ARRAY
84293: UNION
84294: ST_TO_ADDR
// if group [ i ] in to_heal then
84295: LD_VAR 0 4
84299: PUSH
84300: LD_VAR 0 7
84304: ARRAY
84305: PUSH
84306: LD_VAR 0 30
84310: IN
84311: IFFALSE 84420
// begin if GetLives ( group [ i ] ) = 1000 then
84313: LD_VAR 0 4
84317: PUSH
84318: LD_VAR 0 7
84322: ARRAY
84323: PPUSH
84324: CALL_OW 256
84328: PUSH
84329: LD_INT 1000
84331: EQUAL
84332: IFFALSE 84358
// to_heal := to_heal diff group [ i ] else
84334: LD_ADDR_VAR 0 30
84338: PUSH
84339: LD_VAR 0 30
84343: PUSH
84344: LD_VAR 0 4
84348: PUSH
84349: LD_VAR 0 7
84353: ARRAY
84354: DIFF
84355: ST_TO_ADDR
84356: GO 84420
// begin if not IsInArea ( group [ i ] , to_heal ) then
84358: LD_VAR 0 4
84362: PUSH
84363: LD_VAR 0 7
84367: ARRAY
84368: PPUSH
84369: LD_VAR 0 30
84373: PPUSH
84374: CALL_OW 308
84378: NOT
84379: IFFALSE 84403
// ComMoveToArea ( group [ i ] , f_heal ) else
84381: LD_VAR 0 4
84385: PUSH
84386: LD_VAR 0 7
84390: ARRAY
84391: PPUSH
84392: LD_VAR 0 23
84396: PPUSH
84397: CALL_OW 113
84401: GO 84418
// ComHold ( group [ i ] ) ;
84403: LD_VAR 0 4
84407: PUSH
84408: LD_VAR 0 7
84412: ARRAY
84413: PPUSH
84414: CALL_OW 140
// continue ;
84418: GO 83262
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
84420: LD_VAR 0 4
84424: PUSH
84425: LD_VAR 0 7
84429: ARRAY
84430: PPUSH
84431: LD_INT 10
84433: PPUSH
84434: CALL 81040 0 2
84438: NOT
84439: PUSH
84440: LD_VAR 0 16
84444: PUSH
84445: LD_VAR 0 7
84449: ARRAY
84450: PUSH
84451: EMPTY
84452: EQUAL
84453: NOT
84454: AND
84455: IFFALSE 84721
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
84457: LD_VAR 0 4
84461: PUSH
84462: LD_VAR 0 7
84466: ARRAY
84467: PPUSH
84468: CALL_OW 262
84472: PUSH
84473: LD_INT 1
84475: PUSH
84476: LD_INT 2
84478: PUSH
84479: EMPTY
84480: LIST
84481: LIST
84482: IN
84483: IFFALSE 84524
// if GetFuel ( group [ i ] ) < 10 then
84485: LD_VAR 0 4
84489: PUSH
84490: LD_VAR 0 7
84494: ARRAY
84495: PPUSH
84496: CALL_OW 261
84500: PUSH
84501: LD_INT 10
84503: LESS
84504: IFFALSE 84524
// SetFuel ( group [ i ] , 12 ) ;
84506: LD_VAR 0 4
84510: PUSH
84511: LD_VAR 0 7
84515: ARRAY
84516: PPUSH
84517: LD_INT 12
84519: PPUSH
84520: CALL_OW 240
// if units_path [ i ] then
84524: LD_VAR 0 16
84528: PUSH
84529: LD_VAR 0 7
84533: ARRAY
84534: IFFALSE 84719
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
84536: LD_VAR 0 4
84540: PUSH
84541: LD_VAR 0 7
84545: ARRAY
84546: PPUSH
84547: LD_VAR 0 16
84551: PUSH
84552: LD_VAR 0 7
84556: ARRAY
84557: PUSH
84558: LD_INT 1
84560: ARRAY
84561: PUSH
84562: LD_INT 1
84564: ARRAY
84565: PPUSH
84566: LD_VAR 0 16
84570: PUSH
84571: LD_VAR 0 7
84575: ARRAY
84576: PUSH
84577: LD_INT 1
84579: ARRAY
84580: PUSH
84581: LD_INT 2
84583: ARRAY
84584: PPUSH
84585: CALL_OW 297
84589: PUSH
84590: LD_INT 6
84592: GREATER
84593: IFFALSE 84668
// begin if not HasTask ( group [ i ] ) then
84595: LD_VAR 0 4
84599: PUSH
84600: LD_VAR 0 7
84604: ARRAY
84605: PPUSH
84606: CALL_OW 314
84610: NOT
84611: IFFALSE 84666
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
84613: LD_VAR 0 4
84617: PUSH
84618: LD_VAR 0 7
84622: ARRAY
84623: PPUSH
84624: LD_VAR 0 16
84628: PUSH
84629: LD_VAR 0 7
84633: ARRAY
84634: PUSH
84635: LD_INT 1
84637: ARRAY
84638: PUSH
84639: LD_INT 1
84641: ARRAY
84642: PPUSH
84643: LD_VAR 0 16
84647: PUSH
84648: LD_VAR 0 7
84652: ARRAY
84653: PUSH
84654: LD_INT 1
84656: ARRAY
84657: PUSH
84658: LD_INT 2
84660: ARRAY
84661: PPUSH
84662: CALL_OW 114
// end else
84666: GO 84719
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
84668: LD_ADDR_VAR 0 15
84672: PUSH
84673: LD_VAR 0 16
84677: PUSH
84678: LD_VAR 0 7
84682: ARRAY
84683: PPUSH
84684: LD_INT 1
84686: PPUSH
84687: CALL_OW 3
84691: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
84692: LD_ADDR_VAR 0 16
84696: PUSH
84697: LD_VAR 0 16
84701: PPUSH
84702: LD_VAR 0 7
84706: PPUSH
84707: LD_VAR 0 15
84711: PPUSH
84712: CALL_OW 1
84716: ST_TO_ADDR
// continue ;
84717: GO 83262
// end ; end ; end else
84719: GO 87357
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
84721: LD_ADDR_VAR 0 14
84725: PUSH
84726: LD_INT 81
84728: PUSH
84729: LD_VAR 0 4
84733: PUSH
84734: LD_VAR 0 7
84738: ARRAY
84739: PPUSH
84740: CALL_OW 255
84744: PUSH
84745: EMPTY
84746: LIST
84747: LIST
84748: PPUSH
84749: CALL_OW 69
84753: ST_TO_ADDR
// if not tmp then
84754: LD_VAR 0 14
84758: NOT
84759: IFFALSE 84763
// continue ;
84761: GO 83262
// if f_ignore_area then
84763: LD_VAR 0 17
84767: IFFALSE 84855
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
84769: LD_ADDR_VAR 0 15
84773: PUSH
84774: LD_VAR 0 14
84778: PPUSH
84779: LD_INT 3
84781: PUSH
84782: LD_INT 92
84784: PUSH
84785: LD_VAR 0 17
84789: PUSH
84790: LD_INT 1
84792: ARRAY
84793: PUSH
84794: LD_VAR 0 17
84798: PUSH
84799: LD_INT 2
84801: ARRAY
84802: PUSH
84803: LD_VAR 0 17
84807: PUSH
84808: LD_INT 3
84810: ARRAY
84811: PUSH
84812: EMPTY
84813: LIST
84814: LIST
84815: LIST
84816: LIST
84817: PUSH
84818: EMPTY
84819: LIST
84820: LIST
84821: PPUSH
84822: CALL_OW 72
84826: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
84827: LD_VAR 0 14
84831: PUSH
84832: LD_VAR 0 15
84836: DIFF
84837: IFFALSE 84855
// tmp := tmp diff tmp2 ;
84839: LD_ADDR_VAR 0 14
84843: PUSH
84844: LD_VAR 0 14
84848: PUSH
84849: LD_VAR 0 15
84853: DIFF
84854: ST_TO_ADDR
// end ; if not f_murder then
84855: LD_VAR 0 20
84859: NOT
84860: IFFALSE 84918
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
84862: LD_ADDR_VAR 0 15
84866: PUSH
84867: LD_VAR 0 14
84871: PPUSH
84872: LD_INT 3
84874: PUSH
84875: LD_INT 50
84877: PUSH
84878: EMPTY
84879: LIST
84880: PUSH
84881: EMPTY
84882: LIST
84883: LIST
84884: PPUSH
84885: CALL_OW 72
84889: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
84890: LD_VAR 0 14
84894: PUSH
84895: LD_VAR 0 15
84899: DIFF
84900: IFFALSE 84918
// tmp := tmp diff tmp2 ;
84902: LD_ADDR_VAR 0 14
84906: PUSH
84907: LD_VAR 0 14
84911: PUSH
84912: LD_VAR 0 15
84916: DIFF
84917: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
84918: LD_ADDR_VAR 0 14
84922: PUSH
84923: LD_VAR 0 4
84927: PUSH
84928: LD_VAR 0 7
84932: ARRAY
84933: PPUSH
84934: LD_VAR 0 14
84938: PPUSH
84939: LD_INT 1
84941: PPUSH
84942: LD_INT 1
84944: PPUSH
84945: CALL 54683 0 4
84949: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
84950: LD_VAR 0 4
84954: PUSH
84955: LD_VAR 0 7
84959: ARRAY
84960: PPUSH
84961: CALL_OW 257
84965: PUSH
84966: LD_INT 1
84968: EQUAL
84969: IFFALSE 85417
// begin if WantPlant ( group [ i ] ) then
84971: LD_VAR 0 4
84975: PUSH
84976: LD_VAR 0 7
84980: ARRAY
84981: PPUSH
84982: CALL 54184 0 1
84986: IFFALSE 84990
// continue ;
84988: GO 83262
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
84990: LD_VAR 0 18
84994: PUSH
84995: LD_VAR 0 4
84999: PUSH
85000: LD_VAR 0 7
85004: ARRAY
85005: PPUSH
85006: CALL_OW 310
85010: NOT
85011: AND
85012: PUSH
85013: LD_VAR 0 14
85017: PUSH
85018: LD_INT 1
85020: ARRAY
85021: PUSH
85022: LD_VAR 0 14
85026: PPUSH
85027: LD_INT 21
85029: PUSH
85030: LD_INT 2
85032: PUSH
85033: EMPTY
85034: LIST
85035: LIST
85036: PUSH
85037: LD_INT 58
85039: PUSH
85040: EMPTY
85041: LIST
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: PPUSH
85047: CALL_OW 72
85051: IN
85052: AND
85053: IFFALSE 85089
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
85055: LD_VAR 0 4
85059: PUSH
85060: LD_VAR 0 7
85064: ARRAY
85065: PPUSH
85066: LD_VAR 0 14
85070: PUSH
85071: LD_INT 1
85073: ARRAY
85074: PPUSH
85075: CALL_OW 120
// attacking := true ;
85079: LD_ADDR_VAR 0 29
85083: PUSH
85084: LD_INT 1
85086: ST_TO_ADDR
// continue ;
85087: GO 83262
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
85089: LD_VAR 0 26
85093: PUSH
85094: LD_VAR 0 4
85098: PUSH
85099: LD_VAR 0 7
85103: ARRAY
85104: PPUSH
85105: CALL_OW 257
85109: PUSH
85110: LD_INT 1
85112: EQUAL
85113: AND
85114: PUSH
85115: LD_VAR 0 4
85119: PUSH
85120: LD_VAR 0 7
85124: ARRAY
85125: PPUSH
85126: CALL_OW 256
85130: PUSH
85131: LD_INT 800
85133: LESS
85134: AND
85135: PUSH
85136: LD_VAR 0 4
85140: PUSH
85141: LD_VAR 0 7
85145: ARRAY
85146: PPUSH
85147: CALL_OW 318
85151: NOT
85152: AND
85153: IFFALSE 85170
// ComCrawl ( group [ i ] ) ;
85155: LD_VAR 0 4
85159: PUSH
85160: LD_VAR 0 7
85164: ARRAY
85165: PPUSH
85166: CALL_OW 137
// if f_mines then
85170: LD_VAR 0 21
85174: IFFALSE 85417
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
85176: LD_VAR 0 14
85180: PUSH
85181: LD_INT 1
85183: ARRAY
85184: PPUSH
85185: CALL_OW 247
85189: PUSH
85190: LD_INT 3
85192: EQUAL
85193: PUSH
85194: LD_VAR 0 14
85198: PUSH
85199: LD_INT 1
85201: ARRAY
85202: PUSH
85203: LD_VAR 0 27
85207: IN
85208: NOT
85209: AND
85210: IFFALSE 85417
// begin x := GetX ( tmp [ 1 ] ) ;
85212: LD_ADDR_VAR 0 10
85216: PUSH
85217: LD_VAR 0 14
85221: PUSH
85222: LD_INT 1
85224: ARRAY
85225: PPUSH
85226: CALL_OW 250
85230: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
85231: LD_ADDR_VAR 0 11
85235: PUSH
85236: LD_VAR 0 14
85240: PUSH
85241: LD_INT 1
85243: ARRAY
85244: PPUSH
85245: CALL_OW 251
85249: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
85250: LD_ADDR_VAR 0 12
85254: PUSH
85255: LD_VAR 0 4
85259: PUSH
85260: LD_VAR 0 7
85264: ARRAY
85265: PPUSH
85266: CALL 81125 0 1
85270: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
85271: LD_VAR 0 4
85275: PUSH
85276: LD_VAR 0 7
85280: ARRAY
85281: PPUSH
85282: LD_VAR 0 10
85286: PPUSH
85287: LD_VAR 0 11
85291: PPUSH
85292: LD_VAR 0 14
85296: PUSH
85297: LD_INT 1
85299: ARRAY
85300: PPUSH
85301: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
85305: LD_VAR 0 4
85309: PUSH
85310: LD_VAR 0 7
85314: ARRAY
85315: PPUSH
85316: LD_VAR 0 10
85320: PPUSH
85321: LD_VAR 0 12
85325: PPUSH
85326: LD_INT 7
85328: PPUSH
85329: CALL_OW 272
85333: PPUSH
85334: LD_VAR 0 11
85338: PPUSH
85339: LD_VAR 0 12
85343: PPUSH
85344: LD_INT 7
85346: PPUSH
85347: CALL_OW 273
85351: PPUSH
85352: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
85356: LD_VAR 0 4
85360: PUSH
85361: LD_VAR 0 7
85365: ARRAY
85366: PPUSH
85367: LD_INT 71
85369: PPUSH
85370: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
85374: LD_ADDR_VAR 0 27
85378: PUSH
85379: LD_VAR 0 27
85383: PPUSH
85384: LD_VAR 0 27
85388: PUSH
85389: LD_INT 1
85391: PLUS
85392: PPUSH
85393: LD_VAR 0 14
85397: PUSH
85398: LD_INT 1
85400: ARRAY
85401: PPUSH
85402: CALL_OW 1
85406: ST_TO_ADDR
// attacking := true ;
85407: LD_ADDR_VAR 0 29
85411: PUSH
85412: LD_INT 1
85414: ST_TO_ADDR
// continue ;
85415: GO 83262
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
85417: LD_VAR 0 4
85421: PUSH
85422: LD_VAR 0 7
85426: ARRAY
85427: PPUSH
85428: CALL_OW 257
85432: PUSH
85433: LD_INT 17
85435: EQUAL
85436: PUSH
85437: LD_VAR 0 4
85441: PUSH
85442: LD_VAR 0 7
85446: ARRAY
85447: PPUSH
85448: CALL_OW 110
85452: PUSH
85453: LD_INT 71
85455: EQUAL
85456: NOT
85457: AND
85458: IFFALSE 85604
// begin attacking := false ;
85460: LD_ADDR_VAR 0 29
85464: PUSH
85465: LD_INT 0
85467: ST_TO_ADDR
// k := 5 ;
85468: LD_ADDR_VAR 0 9
85472: PUSH
85473: LD_INT 5
85475: ST_TO_ADDR
// if tmp < k then
85476: LD_VAR 0 14
85480: PUSH
85481: LD_VAR 0 9
85485: LESS
85486: IFFALSE 85498
// k := tmp ;
85488: LD_ADDR_VAR 0 9
85492: PUSH
85493: LD_VAR 0 14
85497: ST_TO_ADDR
// for j = 1 to k do
85498: LD_ADDR_VAR 0 8
85502: PUSH
85503: DOUBLE
85504: LD_INT 1
85506: DEC
85507: ST_TO_ADDR
85508: LD_VAR 0 9
85512: PUSH
85513: FOR_TO
85514: IFFALSE 85602
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
85516: LD_VAR 0 14
85520: PUSH
85521: LD_VAR 0 8
85525: ARRAY
85526: PUSH
85527: LD_VAR 0 14
85531: PPUSH
85532: LD_INT 58
85534: PUSH
85535: EMPTY
85536: LIST
85537: PPUSH
85538: CALL_OW 72
85542: IN
85543: NOT
85544: IFFALSE 85600
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85546: LD_VAR 0 4
85550: PUSH
85551: LD_VAR 0 7
85555: ARRAY
85556: PPUSH
85557: LD_VAR 0 14
85561: PUSH
85562: LD_VAR 0 8
85566: ARRAY
85567: PPUSH
85568: CALL_OW 115
// attacking := true ;
85572: LD_ADDR_VAR 0 29
85576: PUSH
85577: LD_INT 1
85579: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
85580: LD_VAR 0 4
85584: PUSH
85585: LD_VAR 0 7
85589: ARRAY
85590: PPUSH
85591: LD_INT 71
85593: PPUSH
85594: CALL_OW 109
// continue ;
85598: GO 85513
// end ; end ;
85600: GO 85513
85602: POP
85603: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
85604: LD_VAR 0 4
85608: PUSH
85609: LD_VAR 0 7
85613: ARRAY
85614: PPUSH
85615: CALL_OW 257
85619: PUSH
85620: LD_INT 8
85622: EQUAL
85623: PUSH
85624: LD_VAR 0 4
85628: PUSH
85629: LD_VAR 0 7
85633: ARRAY
85634: PPUSH
85635: CALL_OW 264
85639: PUSH
85640: LD_INT 28
85642: PUSH
85643: LD_INT 45
85645: PUSH
85646: LD_INT 7
85648: PUSH
85649: LD_INT 47
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: LIST
85656: LIST
85657: IN
85658: OR
85659: IFFALSE 85889
// begin attacking := false ;
85661: LD_ADDR_VAR 0 29
85665: PUSH
85666: LD_INT 0
85668: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
85669: LD_VAR 0 14
85673: PUSH
85674: LD_INT 1
85676: ARRAY
85677: PPUSH
85678: CALL_OW 266
85682: PUSH
85683: LD_INT 32
85685: PUSH
85686: LD_INT 31
85688: PUSH
85689: LD_INT 33
85691: PUSH
85692: LD_INT 4
85694: PUSH
85695: LD_INT 5
85697: PUSH
85698: EMPTY
85699: LIST
85700: LIST
85701: LIST
85702: LIST
85703: LIST
85704: IN
85705: IFFALSE 85889
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
85707: LD_ADDR_VAR 0 9
85711: PUSH
85712: LD_VAR 0 14
85716: PUSH
85717: LD_INT 1
85719: ARRAY
85720: PPUSH
85721: CALL_OW 266
85725: PPUSH
85726: LD_VAR 0 14
85730: PUSH
85731: LD_INT 1
85733: ARRAY
85734: PPUSH
85735: CALL_OW 250
85739: PPUSH
85740: LD_VAR 0 14
85744: PUSH
85745: LD_INT 1
85747: ARRAY
85748: PPUSH
85749: CALL_OW 251
85753: PPUSH
85754: LD_VAR 0 14
85758: PUSH
85759: LD_INT 1
85761: ARRAY
85762: PPUSH
85763: CALL_OW 254
85767: PPUSH
85768: LD_VAR 0 14
85772: PUSH
85773: LD_INT 1
85775: ARRAY
85776: PPUSH
85777: CALL_OW 248
85781: PPUSH
85782: LD_INT 0
85784: PPUSH
85785: CALL 62495 0 6
85789: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
85790: LD_ADDR_VAR 0 8
85794: PUSH
85795: LD_VAR 0 4
85799: PUSH
85800: LD_VAR 0 7
85804: ARRAY
85805: PPUSH
85806: LD_VAR 0 9
85810: PPUSH
85811: CALL 81188 0 2
85815: ST_TO_ADDR
// if j then
85816: LD_VAR 0 8
85820: IFFALSE 85889
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
85822: LD_VAR 0 8
85826: PUSH
85827: LD_INT 1
85829: ARRAY
85830: PPUSH
85831: LD_VAR 0 8
85835: PUSH
85836: LD_INT 2
85838: ARRAY
85839: PPUSH
85840: CALL_OW 488
85844: IFFALSE 85889
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
85846: LD_VAR 0 4
85850: PUSH
85851: LD_VAR 0 7
85855: ARRAY
85856: PPUSH
85857: LD_VAR 0 8
85861: PUSH
85862: LD_INT 1
85864: ARRAY
85865: PPUSH
85866: LD_VAR 0 8
85870: PUSH
85871: LD_INT 2
85873: ARRAY
85874: PPUSH
85875: CALL_OW 116
// attacking := true ;
85879: LD_ADDR_VAR 0 29
85883: PUSH
85884: LD_INT 1
85886: ST_TO_ADDR
// continue ;
85887: GO 83262
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
85889: LD_VAR 0 4
85893: PUSH
85894: LD_VAR 0 7
85898: ARRAY
85899: PPUSH
85900: CALL_OW 265
85904: PUSH
85905: LD_INT 11
85907: EQUAL
85908: IFFALSE 86186
// begin k := 10 ;
85910: LD_ADDR_VAR 0 9
85914: PUSH
85915: LD_INT 10
85917: ST_TO_ADDR
// x := 0 ;
85918: LD_ADDR_VAR 0 10
85922: PUSH
85923: LD_INT 0
85925: ST_TO_ADDR
// if tmp < k then
85926: LD_VAR 0 14
85930: PUSH
85931: LD_VAR 0 9
85935: LESS
85936: IFFALSE 85948
// k := tmp ;
85938: LD_ADDR_VAR 0 9
85942: PUSH
85943: LD_VAR 0 14
85947: ST_TO_ADDR
// for j = k downto 1 do
85948: LD_ADDR_VAR 0 8
85952: PUSH
85953: DOUBLE
85954: LD_VAR 0 9
85958: INC
85959: ST_TO_ADDR
85960: LD_INT 1
85962: PUSH
85963: FOR_DOWNTO
85964: IFFALSE 86039
// begin if GetType ( tmp [ j ] ) = unit_human then
85966: LD_VAR 0 14
85970: PUSH
85971: LD_VAR 0 8
85975: ARRAY
85976: PPUSH
85977: CALL_OW 247
85981: PUSH
85982: LD_INT 1
85984: EQUAL
85985: IFFALSE 86037
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
85987: LD_VAR 0 4
85991: PUSH
85992: LD_VAR 0 7
85996: ARRAY
85997: PPUSH
85998: LD_VAR 0 14
86002: PUSH
86003: LD_VAR 0 8
86007: ARRAY
86008: PPUSH
86009: CALL 81459 0 2
// x := tmp [ j ] ;
86013: LD_ADDR_VAR 0 10
86017: PUSH
86018: LD_VAR 0 14
86022: PUSH
86023: LD_VAR 0 8
86027: ARRAY
86028: ST_TO_ADDR
// attacking := true ;
86029: LD_ADDR_VAR 0 29
86033: PUSH
86034: LD_INT 1
86036: ST_TO_ADDR
// end ; end ;
86037: GO 85963
86039: POP
86040: POP
// if not x then
86041: LD_VAR 0 10
86045: NOT
86046: IFFALSE 86186
// begin attacking := true ;
86048: LD_ADDR_VAR 0 29
86052: PUSH
86053: LD_INT 1
86055: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
86056: LD_VAR 0 4
86060: PUSH
86061: LD_VAR 0 7
86065: ARRAY
86066: PPUSH
86067: CALL_OW 250
86071: PPUSH
86072: LD_VAR 0 4
86076: PUSH
86077: LD_VAR 0 7
86081: ARRAY
86082: PPUSH
86083: CALL_OW 251
86087: PPUSH
86088: CALL_OW 546
86092: PUSH
86093: LD_INT 2
86095: ARRAY
86096: PUSH
86097: LD_VAR 0 14
86101: PUSH
86102: LD_INT 1
86104: ARRAY
86105: PPUSH
86106: CALL_OW 250
86110: PPUSH
86111: LD_VAR 0 14
86115: PUSH
86116: LD_INT 1
86118: ARRAY
86119: PPUSH
86120: CALL_OW 251
86124: PPUSH
86125: CALL_OW 546
86129: PUSH
86130: LD_INT 2
86132: ARRAY
86133: EQUAL
86134: IFFALSE 86162
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
86136: LD_VAR 0 4
86140: PUSH
86141: LD_VAR 0 7
86145: ARRAY
86146: PPUSH
86147: LD_VAR 0 14
86151: PUSH
86152: LD_INT 1
86154: ARRAY
86155: PPUSH
86156: CALL 81459 0 2
86160: GO 86186
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86162: LD_VAR 0 4
86166: PUSH
86167: LD_VAR 0 7
86171: ARRAY
86172: PPUSH
86173: LD_VAR 0 14
86177: PUSH
86178: LD_INT 1
86180: ARRAY
86181: PPUSH
86182: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
86186: LD_VAR 0 4
86190: PUSH
86191: LD_VAR 0 7
86195: ARRAY
86196: PPUSH
86197: CALL_OW 264
86201: PUSH
86202: LD_INT 29
86204: EQUAL
86205: IFFALSE 86571
// begin if WantsToAttack ( group [ i ] ) in bombed then
86207: LD_VAR 0 4
86211: PUSH
86212: LD_VAR 0 7
86216: ARRAY
86217: PPUSH
86218: CALL_OW 319
86222: PUSH
86223: LD_VAR 0 28
86227: IN
86228: IFFALSE 86232
// continue ;
86230: GO 83262
// k := 8 ;
86232: LD_ADDR_VAR 0 9
86236: PUSH
86237: LD_INT 8
86239: ST_TO_ADDR
// x := 0 ;
86240: LD_ADDR_VAR 0 10
86244: PUSH
86245: LD_INT 0
86247: ST_TO_ADDR
// if tmp < k then
86248: LD_VAR 0 14
86252: PUSH
86253: LD_VAR 0 9
86257: LESS
86258: IFFALSE 86270
// k := tmp ;
86260: LD_ADDR_VAR 0 9
86264: PUSH
86265: LD_VAR 0 14
86269: ST_TO_ADDR
// for j = 1 to k do
86270: LD_ADDR_VAR 0 8
86274: PUSH
86275: DOUBLE
86276: LD_INT 1
86278: DEC
86279: ST_TO_ADDR
86280: LD_VAR 0 9
86284: PUSH
86285: FOR_TO
86286: IFFALSE 86418
// begin if GetType ( tmp [ j ] ) = unit_building then
86288: LD_VAR 0 14
86292: PUSH
86293: LD_VAR 0 8
86297: ARRAY
86298: PPUSH
86299: CALL_OW 247
86303: PUSH
86304: LD_INT 3
86306: EQUAL
86307: IFFALSE 86416
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
86309: LD_VAR 0 14
86313: PUSH
86314: LD_VAR 0 8
86318: ARRAY
86319: PUSH
86320: LD_VAR 0 28
86324: IN
86325: NOT
86326: PUSH
86327: LD_VAR 0 14
86331: PUSH
86332: LD_VAR 0 8
86336: ARRAY
86337: PPUSH
86338: CALL_OW 313
86342: AND
86343: IFFALSE 86416
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86345: LD_VAR 0 4
86349: PUSH
86350: LD_VAR 0 7
86354: ARRAY
86355: PPUSH
86356: LD_VAR 0 14
86360: PUSH
86361: LD_VAR 0 8
86365: ARRAY
86366: PPUSH
86367: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
86371: LD_ADDR_VAR 0 28
86375: PUSH
86376: LD_VAR 0 28
86380: PPUSH
86381: LD_VAR 0 28
86385: PUSH
86386: LD_INT 1
86388: PLUS
86389: PPUSH
86390: LD_VAR 0 14
86394: PUSH
86395: LD_VAR 0 8
86399: ARRAY
86400: PPUSH
86401: CALL_OW 1
86405: ST_TO_ADDR
// attacking := true ;
86406: LD_ADDR_VAR 0 29
86410: PUSH
86411: LD_INT 1
86413: ST_TO_ADDR
// break ;
86414: GO 86418
// end ; end ;
86416: GO 86285
86418: POP
86419: POP
// if not attacking and f_attack_depot then
86420: LD_VAR 0 29
86424: NOT
86425: PUSH
86426: LD_VAR 0 25
86430: AND
86431: IFFALSE 86526
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
86433: LD_ADDR_VAR 0 13
86437: PUSH
86438: LD_VAR 0 14
86442: PPUSH
86443: LD_INT 2
86445: PUSH
86446: LD_INT 30
86448: PUSH
86449: LD_INT 0
86451: PUSH
86452: EMPTY
86453: LIST
86454: LIST
86455: PUSH
86456: LD_INT 30
86458: PUSH
86459: LD_INT 1
86461: PUSH
86462: EMPTY
86463: LIST
86464: LIST
86465: PUSH
86466: EMPTY
86467: LIST
86468: LIST
86469: LIST
86470: PPUSH
86471: CALL_OW 72
86475: ST_TO_ADDR
// if z then
86476: LD_VAR 0 13
86480: IFFALSE 86526
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
86482: LD_VAR 0 4
86486: PUSH
86487: LD_VAR 0 7
86491: ARRAY
86492: PPUSH
86493: LD_VAR 0 13
86497: PPUSH
86498: LD_VAR 0 4
86502: PUSH
86503: LD_VAR 0 7
86507: ARRAY
86508: PPUSH
86509: CALL_OW 74
86513: PPUSH
86514: CALL_OW 115
// attacking := true ;
86518: LD_ADDR_VAR 0 29
86522: PUSH
86523: LD_INT 1
86525: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
86526: LD_VAR 0 4
86530: PUSH
86531: LD_VAR 0 7
86535: ARRAY
86536: PPUSH
86537: CALL_OW 256
86541: PUSH
86542: LD_INT 500
86544: LESS
86545: IFFALSE 86571
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86547: LD_VAR 0 4
86551: PUSH
86552: LD_VAR 0 7
86556: ARRAY
86557: PPUSH
86558: LD_VAR 0 14
86562: PUSH
86563: LD_INT 1
86565: ARRAY
86566: PPUSH
86567: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
86571: LD_VAR 0 4
86575: PUSH
86576: LD_VAR 0 7
86580: ARRAY
86581: PPUSH
86582: CALL_OW 264
86586: PUSH
86587: LD_INT 49
86589: EQUAL
86590: IFFALSE 86711
// begin if not HasTask ( group [ i ] ) then
86592: LD_VAR 0 4
86596: PUSH
86597: LD_VAR 0 7
86601: ARRAY
86602: PPUSH
86603: CALL_OW 314
86607: NOT
86608: IFFALSE 86711
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
86610: LD_ADDR_VAR 0 9
86614: PUSH
86615: LD_INT 81
86617: PUSH
86618: LD_VAR 0 4
86622: PUSH
86623: LD_VAR 0 7
86627: ARRAY
86628: PPUSH
86629: CALL_OW 255
86633: PUSH
86634: EMPTY
86635: LIST
86636: LIST
86637: PPUSH
86638: CALL_OW 69
86642: PPUSH
86643: LD_VAR 0 4
86647: PUSH
86648: LD_VAR 0 7
86652: ARRAY
86653: PPUSH
86654: CALL_OW 74
86658: ST_TO_ADDR
// if k then
86659: LD_VAR 0 9
86663: IFFALSE 86711
// if GetDistUnits ( group [ i ] , k ) > 10 then
86665: LD_VAR 0 4
86669: PUSH
86670: LD_VAR 0 7
86674: ARRAY
86675: PPUSH
86676: LD_VAR 0 9
86680: PPUSH
86681: CALL_OW 296
86685: PUSH
86686: LD_INT 10
86688: GREATER
86689: IFFALSE 86711
// ComMoveUnit ( group [ i ] , k ) ;
86691: LD_VAR 0 4
86695: PUSH
86696: LD_VAR 0 7
86700: ARRAY
86701: PPUSH
86702: LD_VAR 0 9
86706: PPUSH
86707: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
86711: LD_VAR 0 4
86715: PUSH
86716: LD_VAR 0 7
86720: ARRAY
86721: PPUSH
86722: CALL_OW 256
86726: PUSH
86727: LD_INT 250
86729: LESS
86730: PUSH
86731: LD_VAR 0 4
86735: PUSH
86736: LD_VAR 0 7
86740: ARRAY
86741: PUSH
86742: LD_INT 21
86744: PUSH
86745: LD_INT 2
86747: PUSH
86748: EMPTY
86749: LIST
86750: LIST
86751: PUSH
86752: LD_INT 23
86754: PUSH
86755: LD_INT 2
86757: PUSH
86758: EMPTY
86759: LIST
86760: LIST
86761: PUSH
86762: EMPTY
86763: LIST
86764: LIST
86765: PPUSH
86766: CALL_OW 69
86770: IN
86771: AND
86772: IFFALSE 86897
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
86774: LD_ADDR_VAR 0 9
86778: PUSH
86779: LD_OWVAR 3
86783: PUSH
86784: LD_VAR 0 4
86788: PUSH
86789: LD_VAR 0 7
86793: ARRAY
86794: DIFF
86795: PPUSH
86796: LD_VAR 0 4
86800: PUSH
86801: LD_VAR 0 7
86805: ARRAY
86806: PPUSH
86807: CALL_OW 74
86811: ST_TO_ADDR
// if not k then
86812: LD_VAR 0 9
86816: NOT
86817: IFFALSE 86821
// continue ;
86819: GO 83262
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
86821: LD_VAR 0 9
86825: PUSH
86826: LD_INT 81
86828: PUSH
86829: LD_VAR 0 4
86833: PUSH
86834: LD_VAR 0 7
86838: ARRAY
86839: PPUSH
86840: CALL_OW 255
86844: PUSH
86845: EMPTY
86846: LIST
86847: LIST
86848: PPUSH
86849: CALL_OW 69
86853: IN
86854: PUSH
86855: LD_VAR 0 9
86859: PPUSH
86860: LD_VAR 0 4
86864: PUSH
86865: LD_VAR 0 7
86869: ARRAY
86870: PPUSH
86871: CALL_OW 296
86875: PUSH
86876: LD_INT 5
86878: LESS
86879: AND
86880: IFFALSE 86897
// ComAutodestruct ( group [ i ] ) ;
86882: LD_VAR 0 4
86886: PUSH
86887: LD_VAR 0 7
86891: ARRAY
86892: PPUSH
86893: CALL 81357 0 1
// end ; if f_attack_depot then
86897: LD_VAR 0 25
86901: IFFALSE 87013
// begin k := 6 ;
86903: LD_ADDR_VAR 0 9
86907: PUSH
86908: LD_INT 6
86910: ST_TO_ADDR
// if tmp < k then
86911: LD_VAR 0 14
86915: PUSH
86916: LD_VAR 0 9
86920: LESS
86921: IFFALSE 86933
// k := tmp ;
86923: LD_ADDR_VAR 0 9
86927: PUSH
86928: LD_VAR 0 14
86932: ST_TO_ADDR
// for j = 1 to k do
86933: LD_ADDR_VAR 0 8
86937: PUSH
86938: DOUBLE
86939: LD_INT 1
86941: DEC
86942: ST_TO_ADDR
86943: LD_VAR 0 9
86947: PUSH
86948: FOR_TO
86949: IFFALSE 87011
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
86951: LD_VAR 0 8
86955: PPUSH
86956: CALL_OW 266
86960: PUSH
86961: LD_INT 0
86963: PUSH
86964: LD_INT 1
86966: PUSH
86967: EMPTY
86968: LIST
86969: LIST
86970: IN
86971: IFFALSE 87009
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86973: LD_VAR 0 4
86977: PUSH
86978: LD_VAR 0 7
86982: ARRAY
86983: PPUSH
86984: LD_VAR 0 14
86988: PUSH
86989: LD_VAR 0 8
86993: ARRAY
86994: PPUSH
86995: CALL_OW 115
// attacking := true ;
86999: LD_ADDR_VAR 0 29
87003: PUSH
87004: LD_INT 1
87006: ST_TO_ADDR
// break ;
87007: GO 87011
// end ;
87009: GO 86948
87011: POP
87012: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
87013: LD_VAR 0 4
87017: PUSH
87018: LD_VAR 0 7
87022: ARRAY
87023: PPUSH
87024: CALL_OW 302
87028: PUSH
87029: LD_VAR 0 29
87033: NOT
87034: AND
87035: IFFALSE 87357
// begin if GetTag ( group [ i ] ) = 71 then
87037: LD_VAR 0 4
87041: PUSH
87042: LD_VAR 0 7
87046: ARRAY
87047: PPUSH
87048: CALL_OW 110
87052: PUSH
87053: LD_INT 71
87055: EQUAL
87056: IFFALSE 87097
// begin if HasTask ( group [ i ] ) then
87058: LD_VAR 0 4
87062: PUSH
87063: LD_VAR 0 7
87067: ARRAY
87068: PPUSH
87069: CALL_OW 314
87073: IFFALSE 87079
// continue else
87075: GO 83262
87077: GO 87097
// SetTag ( group [ i ] , 0 ) ;
87079: LD_VAR 0 4
87083: PUSH
87084: LD_VAR 0 7
87088: ARRAY
87089: PPUSH
87090: LD_INT 0
87092: PPUSH
87093: CALL_OW 109
// end ; k := 8 ;
87097: LD_ADDR_VAR 0 9
87101: PUSH
87102: LD_INT 8
87104: ST_TO_ADDR
// x := 0 ;
87105: LD_ADDR_VAR 0 10
87109: PUSH
87110: LD_INT 0
87112: ST_TO_ADDR
// if tmp < k then
87113: LD_VAR 0 14
87117: PUSH
87118: LD_VAR 0 9
87122: LESS
87123: IFFALSE 87135
// k := tmp ;
87125: LD_ADDR_VAR 0 9
87129: PUSH
87130: LD_VAR 0 14
87134: ST_TO_ADDR
// for j = 1 to k do
87135: LD_ADDR_VAR 0 8
87139: PUSH
87140: DOUBLE
87141: LD_INT 1
87143: DEC
87144: ST_TO_ADDR
87145: LD_VAR 0 9
87149: PUSH
87150: FOR_TO
87151: IFFALSE 87249
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
87153: LD_VAR 0 14
87157: PUSH
87158: LD_VAR 0 8
87162: ARRAY
87163: PPUSH
87164: CALL_OW 247
87168: PUSH
87169: LD_INT 1
87171: EQUAL
87172: PUSH
87173: LD_VAR 0 14
87177: PUSH
87178: LD_VAR 0 8
87182: ARRAY
87183: PPUSH
87184: CALL_OW 256
87188: PUSH
87189: LD_INT 250
87191: LESS
87192: PUSH
87193: LD_VAR 0 20
87197: AND
87198: PUSH
87199: LD_VAR 0 20
87203: NOT
87204: PUSH
87205: LD_VAR 0 14
87209: PUSH
87210: LD_VAR 0 8
87214: ARRAY
87215: PPUSH
87216: CALL_OW 256
87220: PUSH
87221: LD_INT 250
87223: GREATEREQUAL
87224: AND
87225: OR
87226: AND
87227: IFFALSE 87247
// begin x := tmp [ j ] ;
87229: LD_ADDR_VAR 0 10
87233: PUSH
87234: LD_VAR 0 14
87238: PUSH
87239: LD_VAR 0 8
87243: ARRAY
87244: ST_TO_ADDR
// break ;
87245: GO 87249
// end ;
87247: GO 87150
87249: POP
87250: POP
// if x then
87251: LD_VAR 0 10
87255: IFFALSE 87279
// ComAttackUnit ( group [ i ] , x ) else
87257: LD_VAR 0 4
87261: PUSH
87262: LD_VAR 0 7
87266: ARRAY
87267: PPUSH
87268: LD_VAR 0 10
87272: PPUSH
87273: CALL_OW 115
87277: GO 87303
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
87279: LD_VAR 0 4
87283: PUSH
87284: LD_VAR 0 7
87288: ARRAY
87289: PPUSH
87290: LD_VAR 0 14
87294: PUSH
87295: LD_INT 1
87297: ARRAY
87298: PPUSH
87299: CALL_OW 115
// if not HasTask ( group [ i ] ) then
87303: LD_VAR 0 4
87307: PUSH
87308: LD_VAR 0 7
87312: ARRAY
87313: PPUSH
87314: CALL_OW 314
87318: NOT
87319: IFFALSE 87357
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
87321: LD_VAR 0 4
87325: PUSH
87326: LD_VAR 0 7
87330: ARRAY
87331: PPUSH
87332: LD_VAR 0 14
87336: PPUSH
87337: LD_VAR 0 4
87341: PUSH
87342: LD_VAR 0 7
87346: ARRAY
87347: PPUSH
87348: CALL_OW 74
87352: PPUSH
87353: CALL_OW 115
// end ; end ; end ;
87357: GO 83262
87359: POP
87360: POP
// wait ( 0 0$1 ) ;
87361: LD_INT 35
87363: PPUSH
87364: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
87368: LD_VAR 0 4
87372: PUSH
87373: EMPTY
87374: EQUAL
87375: PUSH
87376: LD_INT 81
87378: PUSH
87379: LD_VAR 0 35
87383: PUSH
87384: EMPTY
87385: LIST
87386: LIST
87387: PPUSH
87388: CALL_OW 69
87392: NOT
87393: OR
87394: IFFALSE 83247
// end ;
87396: LD_VAR 0 2
87400: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
87401: LD_INT 0
87403: PPUSH
87404: PPUSH
87405: PPUSH
87406: PPUSH
// if not base_units then
87407: LD_VAR 0 1
87411: NOT
87412: IFFALSE 87416
// exit ;
87414: GO 87503
// result := false ;
87416: LD_ADDR_VAR 0 2
87420: PUSH
87421: LD_INT 0
87423: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
87424: LD_ADDR_VAR 0 5
87428: PUSH
87429: LD_VAR 0 1
87433: PPUSH
87434: LD_INT 21
87436: PUSH
87437: LD_INT 3
87439: PUSH
87440: EMPTY
87441: LIST
87442: LIST
87443: PPUSH
87444: CALL_OW 72
87448: ST_TO_ADDR
// if not tmp then
87449: LD_VAR 0 5
87453: NOT
87454: IFFALSE 87458
// exit ;
87456: GO 87503
// for i in tmp do
87458: LD_ADDR_VAR 0 3
87462: PUSH
87463: LD_VAR 0 5
87467: PUSH
87468: FOR_IN
87469: IFFALSE 87501
// begin result := EnemyInRange ( i , 22 ) ;
87471: LD_ADDR_VAR 0 2
87475: PUSH
87476: LD_VAR 0 3
87480: PPUSH
87481: LD_INT 22
87483: PPUSH
87484: CALL 81040 0 2
87488: ST_TO_ADDR
// if result then
87489: LD_VAR 0 2
87493: IFFALSE 87499
// exit ;
87495: POP
87496: POP
87497: GO 87503
// end ;
87499: GO 87468
87501: POP
87502: POP
// end ;
87503: LD_VAR 0 2
87507: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
87508: LD_INT 0
87510: PPUSH
87511: PPUSH
// if not units then
87512: LD_VAR 0 1
87516: NOT
87517: IFFALSE 87521
// exit ;
87519: GO 87591
// result := [ ] ;
87521: LD_ADDR_VAR 0 3
87525: PUSH
87526: EMPTY
87527: ST_TO_ADDR
// for i in units do
87528: LD_ADDR_VAR 0 4
87532: PUSH
87533: LD_VAR 0 1
87537: PUSH
87538: FOR_IN
87539: IFFALSE 87589
// if GetTag ( i ) = tag then
87541: LD_VAR 0 4
87545: PPUSH
87546: CALL_OW 110
87550: PUSH
87551: LD_VAR 0 2
87555: EQUAL
87556: IFFALSE 87587
// result := Insert ( result , result + 1 , i ) ;
87558: LD_ADDR_VAR 0 3
87562: PUSH
87563: LD_VAR 0 3
87567: PPUSH
87568: LD_VAR 0 3
87572: PUSH
87573: LD_INT 1
87575: PLUS
87576: PPUSH
87577: LD_VAR 0 4
87581: PPUSH
87582: CALL_OW 2
87586: ST_TO_ADDR
87587: GO 87538
87589: POP
87590: POP
// end ;
87591: LD_VAR 0 3
87595: RET
// export function IsDriver ( un ) ; begin
87596: LD_INT 0
87598: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
87599: LD_ADDR_VAR 0 2
87603: PUSH
87604: LD_VAR 0 1
87608: PUSH
87609: LD_INT 55
87611: PUSH
87612: EMPTY
87613: LIST
87614: PPUSH
87615: CALL_OW 69
87619: IN
87620: ST_TO_ADDR
// end ;
87621: LD_VAR 0 2
87625: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
87626: LD_INT 0
87628: PPUSH
87629: PPUSH
// list := [ ] ;
87630: LD_ADDR_VAR 0 5
87634: PUSH
87635: EMPTY
87636: ST_TO_ADDR
// case d of 0 :
87637: LD_VAR 0 3
87641: PUSH
87642: LD_INT 0
87644: DOUBLE
87645: EQUAL
87646: IFTRUE 87650
87648: GO 87783
87650: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
87651: LD_ADDR_VAR 0 5
87655: PUSH
87656: LD_VAR 0 1
87660: PUSH
87661: LD_INT 4
87663: MINUS
87664: PUSH
87665: LD_VAR 0 2
87669: PUSH
87670: LD_INT 4
87672: MINUS
87673: PUSH
87674: LD_INT 2
87676: PUSH
87677: EMPTY
87678: LIST
87679: LIST
87680: LIST
87681: PUSH
87682: LD_VAR 0 1
87686: PUSH
87687: LD_INT 3
87689: MINUS
87690: PUSH
87691: LD_VAR 0 2
87695: PUSH
87696: LD_INT 1
87698: PUSH
87699: EMPTY
87700: LIST
87701: LIST
87702: LIST
87703: PUSH
87704: LD_VAR 0 1
87708: PUSH
87709: LD_INT 4
87711: PLUS
87712: PUSH
87713: LD_VAR 0 2
87717: PUSH
87718: LD_INT 4
87720: PUSH
87721: EMPTY
87722: LIST
87723: LIST
87724: LIST
87725: PUSH
87726: LD_VAR 0 1
87730: PUSH
87731: LD_INT 3
87733: PLUS
87734: PUSH
87735: LD_VAR 0 2
87739: PUSH
87740: LD_INT 3
87742: PLUS
87743: PUSH
87744: LD_INT 5
87746: PUSH
87747: EMPTY
87748: LIST
87749: LIST
87750: LIST
87751: PUSH
87752: LD_VAR 0 1
87756: PUSH
87757: LD_VAR 0 2
87761: PUSH
87762: LD_INT 4
87764: PLUS
87765: PUSH
87766: LD_INT 0
87768: PUSH
87769: EMPTY
87770: LIST
87771: LIST
87772: LIST
87773: PUSH
87774: EMPTY
87775: LIST
87776: LIST
87777: LIST
87778: LIST
87779: LIST
87780: ST_TO_ADDR
// end ; 1 :
87781: GO 88481
87783: LD_INT 1
87785: DOUBLE
87786: EQUAL
87787: IFTRUE 87791
87789: GO 87924
87791: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
87792: LD_ADDR_VAR 0 5
87796: PUSH
87797: LD_VAR 0 1
87801: PUSH
87802: LD_VAR 0 2
87806: PUSH
87807: LD_INT 4
87809: MINUS
87810: PUSH
87811: LD_INT 3
87813: PUSH
87814: EMPTY
87815: LIST
87816: LIST
87817: LIST
87818: PUSH
87819: LD_VAR 0 1
87823: PUSH
87824: LD_INT 3
87826: MINUS
87827: PUSH
87828: LD_VAR 0 2
87832: PUSH
87833: LD_INT 3
87835: MINUS
87836: PUSH
87837: LD_INT 2
87839: PUSH
87840: EMPTY
87841: LIST
87842: LIST
87843: LIST
87844: PUSH
87845: LD_VAR 0 1
87849: PUSH
87850: LD_INT 4
87852: MINUS
87853: PUSH
87854: LD_VAR 0 2
87858: PUSH
87859: LD_INT 1
87861: PUSH
87862: EMPTY
87863: LIST
87864: LIST
87865: LIST
87866: PUSH
87867: LD_VAR 0 1
87871: PUSH
87872: LD_VAR 0 2
87876: PUSH
87877: LD_INT 3
87879: PLUS
87880: PUSH
87881: LD_INT 0
87883: PUSH
87884: EMPTY
87885: LIST
87886: LIST
87887: LIST
87888: PUSH
87889: LD_VAR 0 1
87893: PUSH
87894: LD_INT 4
87896: PLUS
87897: PUSH
87898: LD_VAR 0 2
87902: PUSH
87903: LD_INT 4
87905: PLUS
87906: PUSH
87907: LD_INT 5
87909: PUSH
87910: EMPTY
87911: LIST
87912: LIST
87913: LIST
87914: PUSH
87915: EMPTY
87916: LIST
87917: LIST
87918: LIST
87919: LIST
87920: LIST
87921: ST_TO_ADDR
// end ; 2 :
87922: GO 88481
87924: LD_INT 2
87926: DOUBLE
87927: EQUAL
87928: IFTRUE 87932
87930: GO 88061
87932: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
87933: LD_ADDR_VAR 0 5
87937: PUSH
87938: LD_VAR 0 1
87942: PUSH
87943: LD_VAR 0 2
87947: PUSH
87948: LD_INT 3
87950: MINUS
87951: PUSH
87952: LD_INT 3
87954: PUSH
87955: EMPTY
87956: LIST
87957: LIST
87958: LIST
87959: PUSH
87960: LD_VAR 0 1
87964: PUSH
87965: LD_INT 4
87967: PLUS
87968: PUSH
87969: LD_VAR 0 2
87973: PUSH
87974: LD_INT 4
87976: PUSH
87977: EMPTY
87978: LIST
87979: LIST
87980: LIST
87981: PUSH
87982: LD_VAR 0 1
87986: PUSH
87987: LD_VAR 0 2
87991: PUSH
87992: LD_INT 4
87994: PLUS
87995: PUSH
87996: LD_INT 0
87998: PUSH
87999: EMPTY
88000: LIST
88001: LIST
88002: LIST
88003: PUSH
88004: LD_VAR 0 1
88008: PUSH
88009: LD_INT 3
88011: MINUS
88012: PUSH
88013: LD_VAR 0 2
88017: PUSH
88018: LD_INT 1
88020: PUSH
88021: EMPTY
88022: LIST
88023: LIST
88024: LIST
88025: PUSH
88026: LD_VAR 0 1
88030: PUSH
88031: LD_INT 4
88033: MINUS
88034: PUSH
88035: LD_VAR 0 2
88039: PUSH
88040: LD_INT 4
88042: MINUS
88043: PUSH
88044: LD_INT 2
88046: PUSH
88047: EMPTY
88048: LIST
88049: LIST
88050: LIST
88051: PUSH
88052: EMPTY
88053: LIST
88054: LIST
88055: LIST
88056: LIST
88057: LIST
88058: ST_TO_ADDR
// end ; 3 :
88059: GO 88481
88061: LD_INT 3
88063: DOUBLE
88064: EQUAL
88065: IFTRUE 88069
88067: GO 88202
88069: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
88070: LD_ADDR_VAR 0 5
88074: PUSH
88075: LD_VAR 0 1
88079: PUSH
88080: LD_INT 3
88082: PLUS
88083: PUSH
88084: LD_VAR 0 2
88088: PUSH
88089: LD_INT 4
88091: PUSH
88092: EMPTY
88093: LIST
88094: LIST
88095: LIST
88096: PUSH
88097: LD_VAR 0 1
88101: PUSH
88102: LD_INT 4
88104: PLUS
88105: PUSH
88106: LD_VAR 0 2
88110: PUSH
88111: LD_INT 4
88113: PLUS
88114: PUSH
88115: LD_INT 5
88117: PUSH
88118: EMPTY
88119: LIST
88120: LIST
88121: LIST
88122: PUSH
88123: LD_VAR 0 1
88127: PUSH
88128: LD_INT 4
88130: MINUS
88131: PUSH
88132: LD_VAR 0 2
88136: PUSH
88137: LD_INT 1
88139: PUSH
88140: EMPTY
88141: LIST
88142: LIST
88143: LIST
88144: PUSH
88145: LD_VAR 0 1
88149: PUSH
88150: LD_VAR 0 2
88154: PUSH
88155: LD_INT 4
88157: MINUS
88158: PUSH
88159: LD_INT 3
88161: PUSH
88162: EMPTY
88163: LIST
88164: LIST
88165: LIST
88166: PUSH
88167: LD_VAR 0 1
88171: PUSH
88172: LD_INT 3
88174: MINUS
88175: PUSH
88176: LD_VAR 0 2
88180: PUSH
88181: LD_INT 3
88183: MINUS
88184: PUSH
88185: LD_INT 2
88187: PUSH
88188: EMPTY
88189: LIST
88190: LIST
88191: LIST
88192: PUSH
88193: EMPTY
88194: LIST
88195: LIST
88196: LIST
88197: LIST
88198: LIST
88199: ST_TO_ADDR
// end ; 4 :
88200: GO 88481
88202: LD_INT 4
88204: DOUBLE
88205: EQUAL
88206: IFTRUE 88210
88208: GO 88343
88210: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
88211: LD_ADDR_VAR 0 5
88215: PUSH
88216: LD_VAR 0 1
88220: PUSH
88221: LD_VAR 0 2
88225: PUSH
88226: LD_INT 4
88228: PLUS
88229: PUSH
88230: LD_INT 0
88232: PUSH
88233: EMPTY
88234: LIST
88235: LIST
88236: LIST
88237: PUSH
88238: LD_VAR 0 1
88242: PUSH
88243: LD_INT 3
88245: PLUS
88246: PUSH
88247: LD_VAR 0 2
88251: PUSH
88252: LD_INT 3
88254: PLUS
88255: PUSH
88256: LD_INT 5
88258: PUSH
88259: EMPTY
88260: LIST
88261: LIST
88262: LIST
88263: PUSH
88264: LD_VAR 0 1
88268: PUSH
88269: LD_INT 4
88271: PLUS
88272: PUSH
88273: LD_VAR 0 2
88277: PUSH
88278: LD_INT 4
88280: PUSH
88281: EMPTY
88282: LIST
88283: LIST
88284: LIST
88285: PUSH
88286: LD_VAR 0 1
88290: PUSH
88291: LD_VAR 0 2
88295: PUSH
88296: LD_INT 3
88298: MINUS
88299: PUSH
88300: LD_INT 3
88302: PUSH
88303: EMPTY
88304: LIST
88305: LIST
88306: LIST
88307: PUSH
88308: LD_VAR 0 1
88312: PUSH
88313: LD_INT 4
88315: MINUS
88316: PUSH
88317: LD_VAR 0 2
88321: PUSH
88322: LD_INT 4
88324: MINUS
88325: PUSH
88326: LD_INT 2
88328: PUSH
88329: EMPTY
88330: LIST
88331: LIST
88332: LIST
88333: PUSH
88334: EMPTY
88335: LIST
88336: LIST
88337: LIST
88338: LIST
88339: LIST
88340: ST_TO_ADDR
// end ; 5 :
88341: GO 88481
88343: LD_INT 5
88345: DOUBLE
88346: EQUAL
88347: IFTRUE 88351
88349: GO 88480
88351: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
88352: LD_ADDR_VAR 0 5
88356: PUSH
88357: LD_VAR 0 1
88361: PUSH
88362: LD_INT 4
88364: MINUS
88365: PUSH
88366: LD_VAR 0 2
88370: PUSH
88371: LD_INT 1
88373: PUSH
88374: EMPTY
88375: LIST
88376: LIST
88377: LIST
88378: PUSH
88379: LD_VAR 0 1
88383: PUSH
88384: LD_VAR 0 2
88388: PUSH
88389: LD_INT 4
88391: MINUS
88392: PUSH
88393: LD_INT 3
88395: PUSH
88396: EMPTY
88397: LIST
88398: LIST
88399: LIST
88400: PUSH
88401: LD_VAR 0 1
88405: PUSH
88406: LD_INT 4
88408: PLUS
88409: PUSH
88410: LD_VAR 0 2
88414: PUSH
88415: LD_INT 4
88417: PLUS
88418: PUSH
88419: LD_INT 5
88421: PUSH
88422: EMPTY
88423: LIST
88424: LIST
88425: LIST
88426: PUSH
88427: LD_VAR 0 1
88431: PUSH
88432: LD_INT 3
88434: PLUS
88435: PUSH
88436: LD_VAR 0 2
88440: PUSH
88441: LD_INT 4
88443: PUSH
88444: EMPTY
88445: LIST
88446: LIST
88447: LIST
88448: PUSH
88449: LD_VAR 0 1
88453: PUSH
88454: LD_VAR 0 2
88458: PUSH
88459: LD_INT 3
88461: PLUS
88462: PUSH
88463: LD_INT 0
88465: PUSH
88466: EMPTY
88467: LIST
88468: LIST
88469: LIST
88470: PUSH
88471: EMPTY
88472: LIST
88473: LIST
88474: LIST
88475: LIST
88476: LIST
88477: ST_TO_ADDR
// end ; end ;
88478: GO 88481
88480: POP
// result := list ;
88481: LD_ADDR_VAR 0 4
88485: PUSH
88486: LD_VAR 0 5
88490: ST_TO_ADDR
// end ;
88491: LD_VAR 0 4
88495: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
88496: LD_INT 0
88498: PPUSH
88499: PPUSH
88500: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
88501: LD_VAR 0 1
88505: NOT
88506: PUSH
88507: LD_VAR 0 2
88511: PUSH
88512: LD_INT 1
88514: PUSH
88515: LD_INT 2
88517: PUSH
88518: LD_INT 3
88520: PUSH
88521: LD_INT 4
88523: PUSH
88524: EMPTY
88525: LIST
88526: LIST
88527: LIST
88528: LIST
88529: IN
88530: NOT
88531: OR
88532: IFFALSE 88536
// exit ;
88534: GO 88628
// tmp := [ ] ;
88536: LD_ADDR_VAR 0 5
88540: PUSH
88541: EMPTY
88542: ST_TO_ADDR
// for i in units do
88543: LD_ADDR_VAR 0 4
88547: PUSH
88548: LD_VAR 0 1
88552: PUSH
88553: FOR_IN
88554: IFFALSE 88597
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
88556: LD_ADDR_VAR 0 5
88560: PUSH
88561: LD_VAR 0 5
88565: PPUSH
88566: LD_VAR 0 5
88570: PUSH
88571: LD_INT 1
88573: PLUS
88574: PPUSH
88575: LD_VAR 0 4
88579: PPUSH
88580: LD_VAR 0 2
88584: PPUSH
88585: CALL_OW 259
88589: PPUSH
88590: CALL_OW 2
88594: ST_TO_ADDR
88595: GO 88553
88597: POP
88598: POP
// if not tmp then
88599: LD_VAR 0 5
88603: NOT
88604: IFFALSE 88608
// exit ;
88606: GO 88628
// result := SortListByListDesc ( units , tmp ) ;
88608: LD_ADDR_VAR 0 3
88612: PUSH
88613: LD_VAR 0 1
88617: PPUSH
88618: LD_VAR 0 5
88622: PPUSH
88623: CALL_OW 77
88627: ST_TO_ADDR
// end ;
88628: LD_VAR 0 3
88632: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
88633: LD_INT 0
88635: PPUSH
88636: PPUSH
88637: PPUSH
// x := GetX ( building ) ;
88638: LD_ADDR_VAR 0 4
88642: PUSH
88643: LD_VAR 0 2
88647: PPUSH
88648: CALL_OW 250
88652: ST_TO_ADDR
// y := GetY ( building ) ;
88653: LD_ADDR_VAR 0 5
88657: PUSH
88658: LD_VAR 0 2
88662: PPUSH
88663: CALL_OW 251
88667: ST_TO_ADDR
// if GetTaskList ( unit ) then
88668: LD_VAR 0 1
88672: PPUSH
88673: CALL_OW 437
88677: IFFALSE 88772
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
88679: LD_STRING e
88681: PUSH
88682: LD_VAR 0 1
88686: PPUSH
88687: CALL_OW 437
88691: PUSH
88692: LD_INT 1
88694: ARRAY
88695: PUSH
88696: LD_INT 1
88698: ARRAY
88699: EQUAL
88700: PUSH
88701: LD_VAR 0 4
88705: PUSH
88706: LD_VAR 0 1
88710: PPUSH
88711: CALL_OW 437
88715: PUSH
88716: LD_INT 1
88718: ARRAY
88719: PUSH
88720: LD_INT 2
88722: ARRAY
88723: EQUAL
88724: AND
88725: PUSH
88726: LD_VAR 0 5
88730: PUSH
88731: LD_VAR 0 1
88735: PPUSH
88736: CALL_OW 437
88740: PUSH
88741: LD_INT 1
88743: ARRAY
88744: PUSH
88745: LD_INT 3
88747: ARRAY
88748: EQUAL
88749: AND
88750: IFFALSE 88762
// result := true else
88752: LD_ADDR_VAR 0 3
88756: PUSH
88757: LD_INT 1
88759: ST_TO_ADDR
88760: GO 88770
// result := false ;
88762: LD_ADDR_VAR 0 3
88766: PUSH
88767: LD_INT 0
88769: ST_TO_ADDR
// end else
88770: GO 88780
// result := false ;
88772: LD_ADDR_VAR 0 3
88776: PUSH
88777: LD_INT 0
88779: ST_TO_ADDR
// end ;
88780: LD_VAR 0 3
88784: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
88785: LD_INT 0
88787: PPUSH
88788: PPUSH
88789: PPUSH
88790: PPUSH
// if not unit or not area then
88791: LD_VAR 0 1
88795: NOT
88796: PUSH
88797: LD_VAR 0 2
88801: NOT
88802: OR
88803: IFFALSE 88807
// exit ;
88805: GO 88971
// tmp := AreaToList ( area , i ) ;
88807: LD_ADDR_VAR 0 6
88811: PUSH
88812: LD_VAR 0 2
88816: PPUSH
88817: LD_VAR 0 5
88821: PPUSH
88822: CALL_OW 517
88826: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
88827: LD_ADDR_VAR 0 5
88831: PUSH
88832: DOUBLE
88833: LD_INT 1
88835: DEC
88836: ST_TO_ADDR
88837: LD_VAR 0 6
88841: PUSH
88842: LD_INT 1
88844: ARRAY
88845: PUSH
88846: FOR_TO
88847: IFFALSE 88969
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
88849: LD_ADDR_VAR 0 7
88853: PUSH
88854: LD_VAR 0 6
88858: PUSH
88859: LD_INT 1
88861: ARRAY
88862: PUSH
88863: LD_VAR 0 5
88867: ARRAY
88868: PUSH
88869: LD_VAR 0 6
88873: PUSH
88874: LD_INT 2
88876: ARRAY
88877: PUSH
88878: LD_VAR 0 5
88882: ARRAY
88883: PUSH
88884: EMPTY
88885: LIST
88886: LIST
88887: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
88888: LD_VAR 0 7
88892: PUSH
88893: LD_INT 1
88895: ARRAY
88896: PPUSH
88897: LD_VAR 0 7
88901: PUSH
88902: LD_INT 2
88904: ARRAY
88905: PPUSH
88906: CALL_OW 428
88910: PUSH
88911: LD_INT 0
88913: EQUAL
88914: IFFALSE 88967
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
88916: LD_VAR 0 1
88920: PPUSH
88921: LD_VAR 0 7
88925: PUSH
88926: LD_INT 1
88928: ARRAY
88929: PPUSH
88930: LD_VAR 0 7
88934: PUSH
88935: LD_INT 2
88937: ARRAY
88938: PPUSH
88939: LD_VAR 0 3
88943: PPUSH
88944: CALL_OW 48
// result := IsPlaced ( unit ) ;
88948: LD_ADDR_VAR 0 4
88952: PUSH
88953: LD_VAR 0 1
88957: PPUSH
88958: CALL_OW 305
88962: ST_TO_ADDR
// exit ;
88963: POP
88964: POP
88965: GO 88971
// end ; end ;
88967: GO 88846
88969: POP
88970: POP
// end ;
88971: LD_VAR 0 4
88975: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
88976: LD_INT 0
88978: PPUSH
88979: PPUSH
88980: PPUSH
// if not side or side > 8 then
88981: LD_VAR 0 1
88985: NOT
88986: PUSH
88987: LD_VAR 0 1
88991: PUSH
88992: LD_INT 8
88994: GREATER
88995: OR
88996: IFFALSE 89000
// exit ;
88998: GO 89187
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
89000: LD_ADDR_VAR 0 4
89004: PUSH
89005: LD_INT 22
89007: PUSH
89008: LD_VAR 0 1
89012: PUSH
89013: EMPTY
89014: LIST
89015: LIST
89016: PUSH
89017: LD_INT 21
89019: PUSH
89020: LD_INT 3
89022: PUSH
89023: EMPTY
89024: LIST
89025: LIST
89026: PUSH
89027: EMPTY
89028: LIST
89029: LIST
89030: PPUSH
89031: CALL_OW 69
89035: ST_TO_ADDR
// if not tmp then
89036: LD_VAR 0 4
89040: NOT
89041: IFFALSE 89045
// exit ;
89043: GO 89187
// enable_addtolog := true ;
89045: LD_ADDR_OWVAR 81
89049: PUSH
89050: LD_INT 1
89052: ST_TO_ADDR
// AddToLog ( [ ) ;
89053: LD_STRING [
89055: PPUSH
89056: CALL_OW 561
// for i in tmp do
89060: LD_ADDR_VAR 0 3
89064: PUSH
89065: LD_VAR 0 4
89069: PUSH
89070: FOR_IN
89071: IFFALSE 89178
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
89073: LD_STRING [
89075: PUSH
89076: LD_VAR 0 3
89080: PPUSH
89081: CALL_OW 266
89085: STR
89086: PUSH
89087: LD_STRING , 
89089: STR
89090: PUSH
89091: LD_VAR 0 3
89095: PPUSH
89096: CALL_OW 250
89100: STR
89101: PUSH
89102: LD_STRING , 
89104: STR
89105: PUSH
89106: LD_VAR 0 3
89110: PPUSH
89111: CALL_OW 251
89115: STR
89116: PUSH
89117: LD_STRING , 
89119: STR
89120: PUSH
89121: LD_VAR 0 3
89125: PPUSH
89126: CALL_OW 254
89130: STR
89131: PUSH
89132: LD_STRING , 
89134: STR
89135: PUSH
89136: LD_VAR 0 3
89140: PPUSH
89141: LD_INT 1
89143: PPUSH
89144: CALL_OW 268
89148: STR
89149: PUSH
89150: LD_STRING , 
89152: STR
89153: PUSH
89154: LD_VAR 0 3
89158: PPUSH
89159: LD_INT 2
89161: PPUSH
89162: CALL_OW 268
89166: STR
89167: PUSH
89168: LD_STRING ],
89170: STR
89171: PPUSH
89172: CALL_OW 561
// end ;
89176: GO 89070
89178: POP
89179: POP
// AddToLog ( ]; ) ;
89180: LD_STRING ];
89182: PPUSH
89183: CALL_OW 561
// end ;
89187: LD_VAR 0 2
89191: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
89192: LD_INT 0
89194: PPUSH
89195: PPUSH
89196: PPUSH
89197: PPUSH
89198: PPUSH
// if not area or not rate or not max then
89199: LD_VAR 0 1
89203: NOT
89204: PUSH
89205: LD_VAR 0 2
89209: NOT
89210: OR
89211: PUSH
89212: LD_VAR 0 4
89216: NOT
89217: OR
89218: IFFALSE 89222
// exit ;
89220: GO 89414
// while 1 do
89222: LD_INT 1
89224: IFFALSE 89414
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
89226: LD_ADDR_VAR 0 9
89230: PUSH
89231: LD_VAR 0 1
89235: PPUSH
89236: LD_INT 1
89238: PPUSH
89239: CALL_OW 287
89243: PUSH
89244: LD_INT 10
89246: MUL
89247: ST_TO_ADDR
// r := rate / 10 ;
89248: LD_ADDR_VAR 0 7
89252: PUSH
89253: LD_VAR 0 2
89257: PUSH
89258: LD_INT 10
89260: DIVREAL
89261: ST_TO_ADDR
// time := 1 1$00 ;
89262: LD_ADDR_VAR 0 8
89266: PUSH
89267: LD_INT 2100
89269: ST_TO_ADDR
// if amount < min then
89270: LD_VAR 0 9
89274: PUSH
89275: LD_VAR 0 3
89279: LESS
89280: IFFALSE 89298
// r := r * 2 else
89282: LD_ADDR_VAR 0 7
89286: PUSH
89287: LD_VAR 0 7
89291: PUSH
89292: LD_INT 2
89294: MUL
89295: ST_TO_ADDR
89296: GO 89324
// if amount > max then
89298: LD_VAR 0 9
89302: PUSH
89303: LD_VAR 0 4
89307: GREATER
89308: IFFALSE 89324
// r := r / 2 ;
89310: LD_ADDR_VAR 0 7
89314: PUSH
89315: LD_VAR 0 7
89319: PUSH
89320: LD_INT 2
89322: DIVREAL
89323: ST_TO_ADDR
// time := time / r ;
89324: LD_ADDR_VAR 0 8
89328: PUSH
89329: LD_VAR 0 8
89333: PUSH
89334: LD_VAR 0 7
89338: DIVREAL
89339: ST_TO_ADDR
// if time < 0 then
89340: LD_VAR 0 8
89344: PUSH
89345: LD_INT 0
89347: LESS
89348: IFFALSE 89365
// time := time * - 1 ;
89350: LD_ADDR_VAR 0 8
89354: PUSH
89355: LD_VAR 0 8
89359: PUSH
89360: LD_INT 1
89362: NEG
89363: MUL
89364: ST_TO_ADDR
// wait ( time ) ;
89365: LD_VAR 0 8
89369: PPUSH
89370: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
89374: LD_INT 35
89376: PPUSH
89377: LD_INT 875
89379: PPUSH
89380: CALL_OW 12
89384: PPUSH
89385: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
89389: LD_INT 1
89391: PPUSH
89392: LD_INT 5
89394: PPUSH
89395: CALL_OW 12
89399: PPUSH
89400: LD_VAR 0 1
89404: PPUSH
89405: LD_INT 1
89407: PPUSH
89408: CALL_OW 55
// end ;
89412: GO 89222
// end ;
89414: LD_VAR 0 5
89418: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
89419: LD_INT 0
89421: PPUSH
89422: PPUSH
89423: PPUSH
89424: PPUSH
89425: PPUSH
89426: PPUSH
89427: PPUSH
89428: PPUSH
// if not turrets or not factories then
89429: LD_VAR 0 1
89433: NOT
89434: PUSH
89435: LD_VAR 0 2
89439: NOT
89440: OR
89441: IFFALSE 89445
// exit ;
89443: GO 89752
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
89445: LD_ADDR_VAR 0 10
89449: PUSH
89450: LD_INT 5
89452: PUSH
89453: LD_INT 6
89455: PUSH
89456: EMPTY
89457: LIST
89458: LIST
89459: PUSH
89460: LD_INT 2
89462: PUSH
89463: LD_INT 4
89465: PUSH
89466: EMPTY
89467: LIST
89468: LIST
89469: PUSH
89470: LD_INT 3
89472: PUSH
89473: LD_INT 5
89475: PUSH
89476: EMPTY
89477: LIST
89478: LIST
89479: PUSH
89480: EMPTY
89481: LIST
89482: LIST
89483: LIST
89484: PUSH
89485: LD_INT 24
89487: PUSH
89488: LD_INT 25
89490: PUSH
89491: EMPTY
89492: LIST
89493: LIST
89494: PUSH
89495: LD_INT 23
89497: PUSH
89498: LD_INT 27
89500: PUSH
89501: EMPTY
89502: LIST
89503: LIST
89504: PUSH
89505: EMPTY
89506: LIST
89507: LIST
89508: PUSH
89509: LD_INT 42
89511: PUSH
89512: LD_INT 43
89514: PUSH
89515: EMPTY
89516: LIST
89517: LIST
89518: PUSH
89519: LD_INT 44
89521: PUSH
89522: LD_INT 46
89524: PUSH
89525: EMPTY
89526: LIST
89527: LIST
89528: PUSH
89529: LD_INT 45
89531: PUSH
89532: LD_INT 47
89534: PUSH
89535: EMPTY
89536: LIST
89537: LIST
89538: PUSH
89539: EMPTY
89540: LIST
89541: LIST
89542: LIST
89543: PUSH
89544: EMPTY
89545: LIST
89546: LIST
89547: LIST
89548: ST_TO_ADDR
// result := [ ] ;
89549: LD_ADDR_VAR 0 3
89553: PUSH
89554: EMPTY
89555: ST_TO_ADDR
// for i in turrets do
89556: LD_ADDR_VAR 0 4
89560: PUSH
89561: LD_VAR 0 1
89565: PUSH
89566: FOR_IN
89567: IFFALSE 89750
// begin nat := GetNation ( i ) ;
89569: LD_ADDR_VAR 0 7
89573: PUSH
89574: LD_VAR 0 4
89578: PPUSH
89579: CALL_OW 248
89583: ST_TO_ADDR
// weapon := 0 ;
89584: LD_ADDR_VAR 0 8
89588: PUSH
89589: LD_INT 0
89591: ST_TO_ADDR
// if not nat then
89592: LD_VAR 0 7
89596: NOT
89597: IFFALSE 89601
// continue ;
89599: GO 89566
// for j in list [ nat ] do
89601: LD_ADDR_VAR 0 5
89605: PUSH
89606: LD_VAR 0 10
89610: PUSH
89611: LD_VAR 0 7
89615: ARRAY
89616: PUSH
89617: FOR_IN
89618: IFFALSE 89659
// if GetBWeapon ( i ) = j [ 1 ] then
89620: LD_VAR 0 4
89624: PPUSH
89625: CALL_OW 269
89629: PUSH
89630: LD_VAR 0 5
89634: PUSH
89635: LD_INT 1
89637: ARRAY
89638: EQUAL
89639: IFFALSE 89657
// begin weapon := j [ 2 ] ;
89641: LD_ADDR_VAR 0 8
89645: PUSH
89646: LD_VAR 0 5
89650: PUSH
89651: LD_INT 2
89653: ARRAY
89654: ST_TO_ADDR
// break ;
89655: GO 89659
// end ;
89657: GO 89617
89659: POP
89660: POP
// if not weapon then
89661: LD_VAR 0 8
89665: NOT
89666: IFFALSE 89670
// continue ;
89668: GO 89566
// for k in factories do
89670: LD_ADDR_VAR 0 6
89674: PUSH
89675: LD_VAR 0 2
89679: PUSH
89680: FOR_IN
89681: IFFALSE 89746
// begin weapons := AvailableWeaponList ( k ) ;
89683: LD_ADDR_VAR 0 9
89687: PUSH
89688: LD_VAR 0 6
89692: PPUSH
89693: CALL_OW 478
89697: ST_TO_ADDR
// if not weapons then
89698: LD_VAR 0 9
89702: NOT
89703: IFFALSE 89707
// continue ;
89705: GO 89680
// if weapon in weapons then
89707: LD_VAR 0 8
89711: PUSH
89712: LD_VAR 0 9
89716: IN
89717: IFFALSE 89744
// begin result := [ i , weapon ] ;
89719: LD_ADDR_VAR 0 3
89723: PUSH
89724: LD_VAR 0 4
89728: PUSH
89729: LD_VAR 0 8
89733: PUSH
89734: EMPTY
89735: LIST
89736: LIST
89737: ST_TO_ADDR
// exit ;
89738: POP
89739: POP
89740: POP
89741: POP
89742: GO 89752
// end ; end ;
89744: GO 89680
89746: POP
89747: POP
// end ;
89748: GO 89566
89750: POP
89751: POP
// end ;
89752: LD_VAR 0 3
89756: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
89757: LD_INT 0
89759: PPUSH
// if not side or side > 8 then
89760: LD_VAR 0 3
89764: NOT
89765: PUSH
89766: LD_VAR 0 3
89770: PUSH
89771: LD_INT 8
89773: GREATER
89774: OR
89775: IFFALSE 89779
// exit ;
89777: GO 89838
// if not range then
89779: LD_VAR 0 4
89783: NOT
89784: IFFALSE 89795
// range := - 12 ;
89786: LD_ADDR_VAR 0 4
89790: PUSH
89791: LD_INT 12
89793: NEG
89794: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
89795: LD_VAR 0 1
89799: PPUSH
89800: LD_VAR 0 2
89804: PPUSH
89805: LD_VAR 0 3
89809: PPUSH
89810: LD_VAR 0 4
89814: PPUSH
89815: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
89819: LD_VAR 0 1
89823: PPUSH
89824: LD_VAR 0 2
89828: PPUSH
89829: LD_VAR 0 3
89833: PPUSH
89834: CALL_OW 331
// end ;
89838: LD_VAR 0 5
89842: RET
// export function Video ( mode ) ; begin
89843: LD_INT 0
89845: PPUSH
// ingame_video = mode ;
89846: LD_ADDR_OWVAR 52
89850: PUSH
89851: LD_VAR 0 1
89855: ST_TO_ADDR
// interface_hidden = mode ;
89856: LD_ADDR_OWVAR 54
89860: PUSH
89861: LD_VAR 0 1
89865: ST_TO_ADDR
// end ;
89866: LD_VAR 0 2
89870: RET
// export function Join ( array , element ) ; begin
89871: LD_INT 0
89873: PPUSH
// result := array ^ element ;
89874: LD_ADDR_VAR 0 3
89878: PUSH
89879: LD_VAR 0 1
89883: PUSH
89884: LD_VAR 0 2
89888: ADD
89889: ST_TO_ADDR
// end ;
89890: LD_VAR 0 3
89894: RET
// export function JoinUnion ( array , element ) ; begin
89895: LD_INT 0
89897: PPUSH
// result := array union element ;
89898: LD_ADDR_VAR 0 3
89902: PUSH
89903: LD_VAR 0 1
89907: PUSH
89908: LD_VAR 0 2
89912: UNION
89913: ST_TO_ADDR
// end ;
89914: LD_VAR 0 3
89918: RET
// export function GetBehemoths ( side ) ; begin
89919: LD_INT 0
89921: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
89922: LD_ADDR_VAR 0 2
89926: PUSH
89927: LD_INT 22
89929: PUSH
89930: LD_VAR 0 1
89934: PUSH
89935: EMPTY
89936: LIST
89937: LIST
89938: PUSH
89939: LD_INT 31
89941: PUSH
89942: LD_INT 25
89944: PUSH
89945: EMPTY
89946: LIST
89947: LIST
89948: PUSH
89949: EMPTY
89950: LIST
89951: LIST
89952: PPUSH
89953: CALL_OW 69
89957: ST_TO_ADDR
// end ;
89958: LD_VAR 0 2
89962: RET
// export function Shuffle ( array ) ; var i , index ; begin
89963: LD_INT 0
89965: PPUSH
89966: PPUSH
89967: PPUSH
// result := [ ] ;
89968: LD_ADDR_VAR 0 2
89972: PUSH
89973: EMPTY
89974: ST_TO_ADDR
// if not array then
89975: LD_VAR 0 1
89979: NOT
89980: IFFALSE 89984
// exit ;
89982: GO 90083
// Randomize ;
89984: CALL_OW 10
// for i = array downto 1 do
89988: LD_ADDR_VAR 0 3
89992: PUSH
89993: DOUBLE
89994: LD_VAR 0 1
89998: INC
89999: ST_TO_ADDR
90000: LD_INT 1
90002: PUSH
90003: FOR_DOWNTO
90004: IFFALSE 90081
// begin index := rand ( 1 , array ) ;
90006: LD_ADDR_VAR 0 4
90010: PUSH
90011: LD_INT 1
90013: PPUSH
90014: LD_VAR 0 1
90018: PPUSH
90019: CALL_OW 12
90023: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
90024: LD_ADDR_VAR 0 2
90028: PUSH
90029: LD_VAR 0 2
90033: PPUSH
90034: LD_VAR 0 2
90038: PUSH
90039: LD_INT 1
90041: PLUS
90042: PPUSH
90043: LD_VAR 0 1
90047: PUSH
90048: LD_VAR 0 4
90052: ARRAY
90053: PPUSH
90054: CALL_OW 2
90058: ST_TO_ADDR
// array := Delete ( array , index ) ;
90059: LD_ADDR_VAR 0 1
90063: PUSH
90064: LD_VAR 0 1
90068: PPUSH
90069: LD_VAR 0 4
90073: PPUSH
90074: CALL_OW 3
90078: ST_TO_ADDR
// end ;
90079: GO 90003
90081: POP
90082: POP
// end ;
90083: LD_VAR 0 2
90087: RET
// export function GetBaseMaterials ( base ) ; begin
90088: LD_INT 0
90090: PPUSH
// result := [ 0 , 0 , 0 ] ;
90091: LD_ADDR_VAR 0 2
90095: PUSH
90096: LD_INT 0
90098: PUSH
90099: LD_INT 0
90101: PUSH
90102: LD_INT 0
90104: PUSH
90105: EMPTY
90106: LIST
90107: LIST
90108: LIST
90109: ST_TO_ADDR
// if not base then
90110: LD_VAR 0 1
90114: NOT
90115: IFFALSE 90119
// exit ;
90117: GO 90168
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
90119: LD_ADDR_VAR 0 2
90123: PUSH
90124: LD_VAR 0 1
90128: PPUSH
90129: LD_INT 1
90131: PPUSH
90132: CALL_OW 275
90136: PUSH
90137: LD_VAR 0 1
90141: PPUSH
90142: LD_INT 2
90144: PPUSH
90145: CALL_OW 275
90149: PUSH
90150: LD_VAR 0 1
90154: PPUSH
90155: LD_INT 3
90157: PPUSH
90158: CALL_OW 275
90162: PUSH
90163: EMPTY
90164: LIST
90165: LIST
90166: LIST
90167: ST_TO_ADDR
// end ; end_of_file
90168: LD_VAR 0 2
90172: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
90173: GO 90175
90175: DISABLE
// begin ru_radar := 98 ;
90176: LD_ADDR_EXP 93
90180: PUSH
90181: LD_INT 98
90183: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
90184: LD_ADDR_EXP 94
90188: PUSH
90189: LD_INT 89
90191: ST_TO_ADDR
// us_hack := 99 ;
90192: LD_ADDR_EXP 95
90196: PUSH
90197: LD_INT 99
90199: ST_TO_ADDR
// us_artillery := 97 ;
90200: LD_ADDR_EXP 96
90204: PUSH
90205: LD_INT 97
90207: ST_TO_ADDR
// ar_bio_bomb := 91 ;
90208: LD_ADDR_EXP 97
90212: PUSH
90213: LD_INT 91
90215: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
90216: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
90217: LD_INT 0
90219: PPUSH
90220: PPUSH
90221: PPUSH
90222: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
90223: LD_VAR 0 1
90227: PPUSH
90228: CALL_OW 264
90232: PUSH
90233: LD_EXP 97
90237: EQUAL
90238: IFFALSE 90310
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
90240: LD_INT 68
90242: PPUSH
90243: LD_VAR 0 1
90247: PPUSH
90248: CALL_OW 255
90252: PPUSH
90253: CALL_OW 321
90257: PUSH
90258: LD_INT 2
90260: EQUAL
90261: IFFALSE 90273
// eff := 70 else
90263: LD_ADDR_VAR 0 6
90267: PUSH
90268: LD_INT 70
90270: ST_TO_ADDR
90271: GO 90281
// eff := 30 ;
90273: LD_ADDR_VAR 0 6
90277: PUSH
90278: LD_INT 30
90280: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
90281: LD_VAR 0 1
90285: PPUSH
90286: CALL_OW 250
90290: PPUSH
90291: LD_VAR 0 1
90295: PPUSH
90296: CALL_OW 251
90300: PPUSH
90301: LD_VAR 0 6
90305: PPUSH
90306: CALL_OW 495
// end ; end ;
90310: LD_VAR 0 4
90314: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
90315: LD_INT 0
90317: PPUSH
90318: PPUSH
90319: PPUSH
90320: PPUSH
90321: PPUSH
90322: PPUSH
// if cmd = 124 then
90323: LD_VAR 0 1
90327: PUSH
90328: LD_INT 124
90330: EQUAL
90331: IFFALSE 90537
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
90333: LD_ADDR_VAR 0 5
90337: PUSH
90338: LD_INT 2
90340: PUSH
90341: LD_INT 34
90343: PUSH
90344: LD_INT 53
90346: PUSH
90347: EMPTY
90348: LIST
90349: LIST
90350: PUSH
90351: LD_INT 34
90353: PUSH
90354: LD_INT 14
90356: PUSH
90357: EMPTY
90358: LIST
90359: LIST
90360: PUSH
90361: EMPTY
90362: LIST
90363: LIST
90364: LIST
90365: PPUSH
90366: CALL_OW 69
90370: ST_TO_ADDR
// if not tmp then
90371: LD_VAR 0 5
90375: NOT
90376: IFFALSE 90380
// exit ;
90378: GO 90537
// for i in tmp do
90380: LD_ADDR_VAR 0 3
90384: PUSH
90385: LD_VAR 0 5
90389: PUSH
90390: FOR_IN
90391: IFFALSE 90535
// begin taskList := GetTaskList ( i ) ;
90393: LD_ADDR_VAR 0 6
90397: PUSH
90398: LD_VAR 0 3
90402: PPUSH
90403: CALL_OW 437
90407: ST_TO_ADDR
// if not taskList then
90408: LD_VAR 0 6
90412: NOT
90413: IFFALSE 90417
// continue ;
90415: GO 90390
// for j = 1 to taskList do
90417: LD_ADDR_VAR 0 4
90421: PUSH
90422: DOUBLE
90423: LD_INT 1
90425: DEC
90426: ST_TO_ADDR
90427: LD_VAR 0 6
90431: PUSH
90432: FOR_TO
90433: IFFALSE 90531
// if taskList [ j ] [ 1 ] = | then
90435: LD_VAR 0 6
90439: PUSH
90440: LD_VAR 0 4
90444: ARRAY
90445: PUSH
90446: LD_INT 1
90448: ARRAY
90449: PUSH
90450: LD_STRING |
90452: EQUAL
90453: IFFALSE 90529
// begin _taskList := Delete ( taskList , 1 ) ;
90455: LD_ADDR_VAR 0 7
90459: PUSH
90460: LD_VAR 0 6
90464: PPUSH
90465: LD_INT 1
90467: PPUSH
90468: CALL_OW 3
90472: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
90473: LD_VAR 0 3
90477: PPUSH
90478: LD_VAR 0 7
90482: PPUSH
90483: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
90487: LD_VAR 0 3
90491: PPUSH
90492: LD_VAR 0 6
90496: PUSH
90497: LD_VAR 0 4
90501: ARRAY
90502: PUSH
90503: LD_INT 2
90505: ARRAY
90506: PPUSH
90507: LD_VAR 0 6
90511: PUSH
90512: LD_VAR 0 4
90516: ARRAY
90517: PUSH
90518: LD_INT 3
90520: ARRAY
90521: PPUSH
90522: LD_INT 8
90524: PPUSH
90525: CALL 90542 0 4
// end ;
90529: GO 90432
90531: POP
90532: POP
// end ;
90533: GO 90390
90535: POP
90536: POP
// end ; end ;
90537: LD_VAR 0 2
90541: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
90542: LD_INT 0
90544: PPUSH
90545: PPUSH
90546: PPUSH
90547: PPUSH
90548: PPUSH
90549: PPUSH
90550: PPUSH
90551: PPUSH
90552: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
90553: LD_VAR 0 1
90557: NOT
90558: PUSH
90559: LD_VAR 0 2
90563: PPUSH
90564: LD_VAR 0 3
90568: PPUSH
90569: CALL_OW 488
90573: NOT
90574: OR
90575: PUSH
90576: LD_VAR 0 4
90580: NOT
90581: OR
90582: IFFALSE 90586
// exit ;
90584: GO 90926
// list := [ ] ;
90586: LD_ADDR_VAR 0 13
90590: PUSH
90591: EMPTY
90592: ST_TO_ADDR
// if x - r < 0 then
90593: LD_VAR 0 2
90597: PUSH
90598: LD_VAR 0 4
90602: MINUS
90603: PUSH
90604: LD_INT 0
90606: LESS
90607: IFFALSE 90619
// min_x := 0 else
90609: LD_ADDR_VAR 0 7
90613: PUSH
90614: LD_INT 0
90616: ST_TO_ADDR
90617: GO 90635
// min_x := x - r ;
90619: LD_ADDR_VAR 0 7
90623: PUSH
90624: LD_VAR 0 2
90628: PUSH
90629: LD_VAR 0 4
90633: MINUS
90634: ST_TO_ADDR
// if y - r < 0 then
90635: LD_VAR 0 3
90639: PUSH
90640: LD_VAR 0 4
90644: MINUS
90645: PUSH
90646: LD_INT 0
90648: LESS
90649: IFFALSE 90661
// min_y := 0 else
90651: LD_ADDR_VAR 0 8
90655: PUSH
90656: LD_INT 0
90658: ST_TO_ADDR
90659: GO 90677
// min_y := y - r ;
90661: LD_ADDR_VAR 0 8
90665: PUSH
90666: LD_VAR 0 3
90670: PUSH
90671: LD_VAR 0 4
90675: MINUS
90676: ST_TO_ADDR
// max_x := x + r ;
90677: LD_ADDR_VAR 0 9
90681: PUSH
90682: LD_VAR 0 2
90686: PUSH
90687: LD_VAR 0 4
90691: PLUS
90692: ST_TO_ADDR
// max_y := y + r ;
90693: LD_ADDR_VAR 0 10
90697: PUSH
90698: LD_VAR 0 3
90702: PUSH
90703: LD_VAR 0 4
90707: PLUS
90708: ST_TO_ADDR
// for _x = min_x to max_x do
90709: LD_ADDR_VAR 0 11
90713: PUSH
90714: DOUBLE
90715: LD_VAR 0 7
90719: DEC
90720: ST_TO_ADDR
90721: LD_VAR 0 9
90725: PUSH
90726: FOR_TO
90727: IFFALSE 90844
// for _y = min_y to max_y do
90729: LD_ADDR_VAR 0 12
90733: PUSH
90734: DOUBLE
90735: LD_VAR 0 8
90739: DEC
90740: ST_TO_ADDR
90741: LD_VAR 0 10
90745: PUSH
90746: FOR_TO
90747: IFFALSE 90840
// begin if not ValidHex ( _x , _y ) then
90749: LD_VAR 0 11
90753: PPUSH
90754: LD_VAR 0 12
90758: PPUSH
90759: CALL_OW 488
90763: NOT
90764: IFFALSE 90768
// continue ;
90766: GO 90746
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90768: LD_VAR 0 11
90772: PPUSH
90773: LD_VAR 0 12
90777: PPUSH
90778: CALL_OW 351
90782: PUSH
90783: LD_VAR 0 11
90787: PPUSH
90788: LD_VAR 0 12
90792: PPUSH
90793: CALL_OW 554
90797: AND
90798: IFFALSE 90838
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90800: LD_ADDR_VAR 0 13
90804: PUSH
90805: LD_VAR 0 13
90809: PPUSH
90810: LD_VAR 0 13
90814: PUSH
90815: LD_INT 1
90817: PLUS
90818: PPUSH
90819: LD_VAR 0 11
90823: PUSH
90824: LD_VAR 0 12
90828: PUSH
90829: EMPTY
90830: LIST
90831: LIST
90832: PPUSH
90833: CALL_OW 2
90837: ST_TO_ADDR
// end ;
90838: GO 90746
90840: POP
90841: POP
90842: GO 90726
90844: POP
90845: POP
// if not list then
90846: LD_VAR 0 13
90850: NOT
90851: IFFALSE 90855
// exit ;
90853: GO 90926
// for i in list do
90855: LD_ADDR_VAR 0 6
90859: PUSH
90860: LD_VAR 0 13
90864: PUSH
90865: FOR_IN
90866: IFFALSE 90924
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
90868: LD_VAR 0 1
90872: PPUSH
90873: LD_STRING M
90875: PUSH
90876: LD_VAR 0 6
90880: PUSH
90881: LD_INT 1
90883: ARRAY
90884: PUSH
90885: LD_VAR 0 6
90889: PUSH
90890: LD_INT 2
90892: ARRAY
90893: PUSH
90894: LD_INT 0
90896: PUSH
90897: LD_INT 0
90899: PUSH
90900: LD_INT 0
90902: PUSH
90903: LD_INT 0
90905: PUSH
90906: EMPTY
90907: LIST
90908: LIST
90909: LIST
90910: LIST
90911: LIST
90912: LIST
90913: LIST
90914: PUSH
90915: EMPTY
90916: LIST
90917: PPUSH
90918: CALL_OW 447
90922: GO 90865
90924: POP
90925: POP
// end ;
90926: LD_VAR 0 5
90930: RET
