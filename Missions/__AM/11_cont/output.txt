// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 16703 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 80973 0 9
// PrepareAmerican ;
  77: CALL 525 0 0
// PrepareArabian ;
  81: CALL 2197 0 0
// MC_Start ( ) ;
  85: CALL 18815 0 0
// Action ;
  89: CALL 7672 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 231000
 219: PUSH
 220: LD_INT 210000
 222: PUSH
 223: LD_INT 199500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// end ;
 287: LD_VAR 0 1
 291: RET
// export function CustomInitMacro ; var i ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 296: LD_ADDR_EXP 73
 300: PUSH
 301: LD_INT 20
 303: PUSH
 304: LD_INT 21
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 315: LD_ADDR_EXP 74
 319: PUSH
 320: LD_INT 28
 322: PUSH
 323: LD_INT 24
 325: PUSH
 326: LD_INT 26
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 334: LD_INT 1
 336: PPUSH
 337: LD_INT 6
 339: PUSH
 340: LD_INT 8
 342: PUSH
 343: LD_INT 9
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: PUSH
 351: LD_OWVAR 67
 355: ARRAY
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: CALL 39920 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 364: LD_INT 2
 366: PPUSH
 367: LD_INT 6
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: LD_INT 9
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: PUSH
 381: LD_OWVAR 67
 385: ARRAY
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: CALL 39920 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 6
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: LD_INT 9
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL 39920 0 3
// for i = 1 to mc_bases do
 424: LD_ADDR_VAR 0 2
 428: PUSH
 429: DOUBLE
 430: LD_INT 1
 432: DEC
 433: ST_TO_ADDR
 434: LD_EXP 49
 438: PUSH
 439: FOR_TO
 440: IFFALSE 464
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 442: LD_VAR 0 2
 446: PPUSH
 447: LD_EXP 42
 451: PUSH
 452: LD_VAR 0 2
 456: ARRAY
 457: PPUSH
 458: CALL 40346 0 2
 462: GO 439
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 1
 470: RET
// function Debuger ; var i ; begin
 471: LD_INT 0
 473: PPUSH
 474: PPUSH
// if not debug then
 475: LD_EXP 1
 479: NOT
 480: IFFALSE 484
// exit ;
 482: GO 520
// game_speed := 5 ;
 484: LD_ADDR_OWVAR 65
 488: PUSH
 489: LD_INT 5
 491: ST_TO_ADDR
// uc_side := 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// uc_nation := 1 ;
 500: LD_ADDR_OWVAR 21
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 508: LD_EXP 35
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: CALL_OW 235
// end ; end_of_file
 520: LD_VAR 0 1
 524: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 525: LD_INT 0
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side := 4 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 4
 542: ST_TO_ADDR
// uc_nation := 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 551: LD_ADDR_EXP 29
 555: PUSH
 556: LD_STRING Powell
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: LD_STRING 
 564: PPUSH
 565: CALL 46408 0 3
 569: ST_TO_ADDR
// uc_side := 1 ;
 570: LD_ADDR_OWVAR 20
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 578: LD_ADDR_EXP 20
 582: PUSH
 583: LD_STRING JMM
 585: PPUSH
 586: LD_EXP 1
 590: NOT
 591: PPUSH
 592: LD_EXP 4
 596: PPUSH
 597: CALL 46408 0 3
 601: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 602: LD_EXP 20
 606: PPUSH
 607: CALL_OW 257
 611: PUSH
 612: LD_INT 4
 614: GREATER
 615: IFFALSE 629
// SetClass ( JMM , 1 ) ;
 617: LD_EXP 20
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 629: LD_ADDR_EXP 21
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 4
 647: PPUSH
 648: CALL 46408 0 3
 652: ST_TO_ADDR
// if not Lisa then
 653: LD_EXP 21
 657: NOT
 658: IFFALSE 673
// Lisa := CreateCharacter ( 10_Lisa ) ;
 660: LD_ADDR_EXP 21
 664: PUSH
 665: LD_STRING 10_Lisa
 667: PPUSH
 668: CALL_OW 34
 672: ST_TO_ADDR
// if not Lisa then
 673: LD_EXP 21
 677: NOT
 678: IFFALSE 693
// Lisa := CreateCharacter ( 09_Lisa ) ;
 680: LD_ADDR_EXP 21
 684: PUSH
 685: LD_STRING 09_Lisa
 687: PPUSH
 688: CALL_OW 34
 692: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 693: LD_ADDR_EXP 30
 697: PUSH
 698: LD_STRING Cornel
 700: PPUSH
 701: LD_EXP 1
 705: NOT
 706: PPUSH
 707: LD_EXP 4
 711: PPUSH
 712: CALL 46408 0 3
 716: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING Donaldson
 724: PPUSH
 725: LD_EXP 1
 729: NOT
 730: PPUSH
 731: LD_EXP 4
 735: PPUSH
 736: CALL 46408 0 3
 740: ST_TO_ADDR
// if not Donaldson then
 741: LD_EXP 22
 745: NOT
 746: IFFALSE 761
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 748: LD_ADDR_EXP 22
 752: PUSH
 753: LD_STRING 10_Donaldson
 755: PPUSH
 756: CALL_OW 34
 760: ST_TO_ADDR
// if not Donaldson then
 761: LD_EXP 22
 765: NOT
 766: IFFALSE 781
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 768: LD_ADDR_EXP 22
 772: PUSH
 773: LD_STRING 09_Donaldson
 775: PPUSH
 776: CALL_OW 34
 780: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 781: LD_ADDR_EXP 23
 785: PUSH
 786: LD_STRING Bobby
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 4
 799: PPUSH
 800: CALL 46408 0 3
 804: ST_TO_ADDR
// if not Bobby then
 805: LD_EXP 23
 809: NOT
 810: IFFALSE 825
// Bobby := CreateCharacter ( 10_Bobby ) ;
 812: LD_ADDR_EXP 23
 816: PUSH
 817: LD_STRING 10_Bobby
 819: PPUSH
 820: CALL_OW 34
 824: ST_TO_ADDR
// if not Bobby then
 825: LD_EXP 23
 829: NOT
 830: IFFALSE 845
// Bobby := CreateCharacter ( 09_Bobby ) ;
 832: LD_ADDR_EXP 23
 836: PUSH
 837: LD_STRING 09_Bobby
 839: PPUSH
 840: CALL_OW 34
 844: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 845: LD_ADDR_EXP 24
 849: PUSH
 850: LD_STRING Cyrus
 852: PPUSH
 853: LD_EXP 1
 857: NOT
 858: PPUSH
 859: LD_EXP 4
 863: PPUSH
 864: CALL 46408 0 3
 868: ST_TO_ADDR
// if not Cyrus then
 869: LD_EXP 24
 873: NOT
 874: IFFALSE 889
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 876: LD_ADDR_EXP 24
 880: PUSH
 881: LD_STRING 10_Cyrus
 883: PPUSH
 884: CALL_OW 34
 888: ST_TO_ADDR
// if not Cyrus then
 889: LD_EXP 24
 893: NOT
 894: IFFALSE 909
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING 09_Cyrus
 903: PPUSH
 904: CALL_OW 34
 908: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 909: LD_ADDR_EXP 25
 913: PUSH
 914: LD_STRING Denis
 916: PPUSH
 917: LD_EXP 1
 921: NOT
 922: PPUSH
 923: LD_EXP 4
 927: PPUSH
 928: CALL 46408 0 3
 932: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 26
 937: PUSH
 938: LD_STRING Brown
 940: PPUSH
 941: LD_EXP 1
 945: NOT
 946: PPUSH
 947: LD_EXP 4
 951: PPUSH
 952: CALL 46408 0 3
 956: ST_TO_ADDR
// if not Brown then
 957: LD_EXP 26
 961: NOT
 962: IFFALSE 977
// Brown := CreateCharacter ( 10_Brown ) ;
 964: LD_ADDR_EXP 26
 968: PUSH
 969: LD_STRING 10_Brown
 971: PPUSH
 972: CALL_OW 34
 976: ST_TO_ADDR
// if not Brown then
 977: LD_EXP 26
 981: NOT
 982: IFFALSE 997
// Brown := CreateCharacter ( 08_Brown ) ;
 984: LD_ADDR_EXP 26
 988: PUSH
 989: LD_STRING 08_Brown
 991: PPUSH
 992: CALL_OW 34
 996: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_STRING Gladstone
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 4
1015: PPUSH
1016: CALL 46408 0 3
1020: ST_TO_ADDR
// if not Gladstone then
1021: LD_EXP 27
1025: NOT
1026: IFFALSE 1041
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1028: LD_ADDR_EXP 27
1032: PUSH
1033: LD_STRING 10_Gladstone
1035: PPUSH
1036: CALL_OW 34
1040: ST_TO_ADDR
// if not Gladstone then
1041: LD_EXP 27
1045: NOT
1046: IFFALSE 1061
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1048: LD_ADDR_EXP 27
1052: PUSH
1053: LD_STRING 08_Gladstone
1055: PPUSH
1056: CALL_OW 34
1060: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1061: LD_ADDR_EXP 28
1065: PUSH
1066: LD_STRING Houten
1068: PPUSH
1069: LD_EXP 1
1073: NOT
1074: PPUSH
1075: LD_EXP 4
1079: PPUSH
1080: CALL 46408 0 3
1084: ST_TO_ADDR
// if not Houten then
1085: LD_EXP 28
1089: NOT
1090: IFFALSE 1105
// Houten := CreateCharacter ( 10_Houten ) ;
1092: LD_ADDR_EXP 28
1096: PUSH
1097: LD_STRING 10_Houten
1099: PPUSH
1100: CALL_OW 34
1104: ST_TO_ADDR
// if not Houten then
1105: LD_EXP 28
1109: NOT
1110: IFFALSE 1125
// Houten := CreateCharacter ( 09_Houten ) ;
1112: LD_ADDR_EXP 28
1116: PUSH
1117: LD_STRING 09_Houten
1119: PPUSH
1120: CALL_OW 34
1124: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1125: LD_ADDR_EXP 30
1129: PUSH
1130: LD_STRING Cornell
1132: PPUSH
1133: LD_EXP 1
1137: NOT
1138: PPUSH
1139: LD_EXP 4
1143: PPUSH
1144: CALL 46408 0 3
1148: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: LD_STRING Gary
1156: PPUSH
1157: LD_EXP 1
1161: NOT
1162: PPUSH
1163: LD_EXP 4
1167: PPUSH
1168: CALL 46408 0 3
1172: ST_TO_ADDR
// if not Gary then
1173: LD_EXP 31
1177: NOT
1178: IFFALSE 1193
// Gary := CreateCharacter ( 10_Gary ) ;
1180: LD_ADDR_EXP 31
1184: PUSH
1185: LD_STRING 10_Gary
1187: PPUSH
1188: CALL_OW 34
1192: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1193: LD_ADDR_EXP 32
1197: PUSH
1198: LD_STRING Frank
1200: PPUSH
1201: LD_EXP 1
1205: NOT
1206: PPUSH
1207: LD_EXP 4
1211: PPUSH
1212: CALL 46408 0 3
1216: ST_TO_ADDR
// if not Frank then
1217: LD_EXP 32
1221: NOT
1222: IFFALSE 1237
// Frank := CreateCharacter ( 08_Frank ) ;
1224: LD_ADDR_EXP 32
1228: PUSH
1229: LD_STRING 08_Frank
1231: PPUSH
1232: CALL_OW 34
1236: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1237: LD_ADDR_EXP 33
1241: PUSH
1242: LD_STRING Kikuchi
1244: PPUSH
1245: LD_EXP 1
1249: NOT
1250: PPUSH
1251: LD_EXP 4
1255: PPUSH
1256: CALL 46408 0 3
1260: ST_TO_ADDR
// if not Kikuchi then
1261: LD_EXP 33
1265: NOT
1266: IFFALSE 1281
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1268: LD_ADDR_EXP 33
1272: PUSH
1273: LD_STRING 08_Kikuchi
1275: PPUSH
1276: CALL_OW 34
1280: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1281: LD_ADDR_VAR 0 5
1285: PUSH
1286: LD_EXP 21
1290: PUSH
1291: LD_EXP 22
1295: PUSH
1296: LD_EXP 23
1300: PUSH
1301: LD_EXP 24
1305: PUSH
1306: LD_EXP 25
1310: PUSH
1311: LD_EXP 26
1315: PUSH
1316: LD_EXP 27
1320: PUSH
1321: LD_EXP 28
1325: PUSH
1326: LD_EXP 30
1330: PUSH
1331: LD_EXP 31
1335: PUSH
1336: LD_EXP 32
1340: PUSH
1341: LD_EXP 33
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: ST_TO_ADDR
// tmp := tmp diff 0 ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PUSH
1370: LD_INT 0
1372: DIFF
1373: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1374: LD_ADDR_VAR 0 5
1378: PUSH
1379: LD_VAR 0 5
1383: PUSH
1384: LD_STRING 10_lock
1386: PPUSH
1387: CALL_OW 31
1391: UNION
1392: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1393: LD_ADDR_VAR 0 5
1397: PUSH
1398: LD_VAR 0 5
1402: PUSH
1403: LD_STRING 10c_lock
1405: PPUSH
1406: CALL_OW 31
1410: UNION
1411: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1412: LD_STRING 10_lock
1414: PPUSH
1415: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1419: LD_STRING 10c_lock
1421: PPUSH
1422: CALL_OW 40
// for i in tmp do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1475
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 257
1448: PUSH
1449: LD_INT 8
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: IN
1459: IFFALSE 1473
// SetClass ( i , class_soldier ) ;
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: CALL_OW 336
1473: GO 1436
1475: POP
1476: POP
// if tmp < 12 then
1477: LD_VAR 0 5
1481: PUSH
1482: LD_INT 12
1484: LESS
1485: IFFALSE 1579
// begin k := 16 - tmp ;
1487: LD_ADDR_VAR 0 3
1491: PUSH
1492: LD_INT 16
1494: PUSH
1495: LD_VAR 0 5
1499: MINUS
1500: ST_TO_ADDR
// for i = 1 to k do
1501: LD_ADDR_VAR 0 2
1505: PUSH
1506: DOUBLE
1507: LD_INT 1
1509: DEC
1510: ST_TO_ADDR
1511: LD_VAR 0 3
1515: PUSH
1516: FOR_TO
1517: IFFALSE 1577
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1519: LD_INT 0
1521: PPUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 3
1530: PUSH
1531: LD_INT 4
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 4
1545: PPUSH
1546: CALL_OW 12
1550: ARRAY
1551: PPUSH
1552: LD_INT 6
1554: PPUSH
1555: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1559: LD_ADDR_VAR 0 5
1563: PUSH
1564: LD_VAR 0 5
1568: PUSH
1569: CALL_OW 44
1573: ADD
1574: ST_TO_ADDR
// end ;
1575: GO 1516
1577: POP
1578: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1579: LD_ADDR_EXP 19
1583: PUSH
1584: LD_STRING 1
1586: PPUSH
1587: LD_INT 12
1589: PPUSH
1590: LD_INT 12
1592: PPUSH
1593: LD_INT -5
1595: PUSH
1596: LD_EXP 20
1600: PUSH
1601: LD_INT -2
1603: PUSH
1604: LD_INT -3
1606: PUSH
1607: LD_INT -5
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_VAR 0 5
1621: ADD
1622: PUSH
1623: LD_INT -6
1625: PUSH
1626: LD_INT -4
1628: PUSH
1629: LD_EXP 29
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: ADD
1639: PPUSH
1640: LD_INT 1
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PPUSH
1698: CALL_OW 42
1702: ST_TO_ADDR
// others := tmp diff selected ;
1703: LD_ADDR_VAR 0 8
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 19
1717: DIFF
1718: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1719: LD_ADDR_VAR 0 8
1723: PUSH
1724: LD_VAR 0 8
1728: PUSH
1729: LD_EXP 21
1733: PUSH
1734: LD_EXP 22
1738: PUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_EXP 24
1748: PUSH
1749: LD_EXP 25
1753: PUSH
1754: LD_EXP 26
1758: PUSH
1759: LD_EXP 27
1763: PUSH
1764: LD_EXP 28
1768: PUSH
1769: LD_EXP 30
1773: PUSH
1774: LD_EXP 31
1778: PUSH
1779: LD_EXP 32
1783: PUSH
1784: LD_EXP 33
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: DIFF
1803: ST_TO_ADDR
// if others then
1804: LD_VAR 0 8
1808: IFFALSE 1822
// SaveCharacters ( others , 11_others ) ;
1810: LD_VAR 0 8
1814: PPUSH
1815: LD_STRING 11_others
1817: PPUSH
1818: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1822: LD_ADDR_VAR 0 6
1826: PUSH
1827: LD_INT 3
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: LD_INT 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 4
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 5
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 2
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 7
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 2
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// for i in JMM ^ selected do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_EXP 20
1933: PUSH
1934: LD_EXP 19
1938: ADD
1939: PUSH
1940: FOR_IN
1941: IFFALSE 2130
// begin if GetClass ( i ) = 3 then
1943: LD_VAR 0 2
1947: PPUSH
1948: CALL_OW 257
1952: PUSH
1953: LD_INT 3
1955: EQUAL
1956: IFFALSE 2113
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_VAR 0 6
1967: PUSH
1968: LD_INT 1
1970: ARRAY
1971: PUSH
1972: LD_INT 1
1974: ARRAY
1975: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1976: LD_ADDR_OWVAR 39
1980: PUSH
1981: LD_VAR 0 6
1985: PUSH
1986: LD_INT 1
1988: ARRAY
1989: PUSH
1990: LD_INT 2
1992: ARRAY
1993: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1994: LD_ADDR_OWVAR 38
1998: PUSH
1999: LD_VAR 0 6
2003: PUSH
2004: LD_INT 1
2006: ARRAY
2007: PUSH
2008: LD_INT 3
2010: ARRAY
2011: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2012: LD_ADDR_OWVAR 40
2016: PUSH
2017: LD_VAR 0 6
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PUSH
2026: LD_INT 4
2028: ARRAY
2029: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2030: LD_ADDR_VAR 0 6
2034: PUSH
2035: LD_VAR 0 6
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 3
2047: ST_TO_ADDR
// veh := CreateVehicle ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: CALL_OW 45
2057: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2058: LD_VAR 0 7
2062: PPUSH
2063: LD_INT 8
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_VAR 0 7
2082: PPUSH
2083: CALL_OW 52
// if i = JMM then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_EXP 20
2096: EQUAL
2097: IFFALSE 2111
// SetMark ( veh , 1 ) ;
2099: LD_VAR 0 7
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: CALL_OW 242
// end else
2111: GO 2128
// PlaceUnitArea ( i , am_hum_start , false ) ;
2113: LD_VAR 0 2
2117: PPUSH
2118: LD_INT 9
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 49
// end ;
2128: GO 1940
2130: POP
2131: POP
// vc_chassis := us_medium_tracked ;
2132: LD_ADDR_OWVAR 37
2136: PUSH
2137: LD_INT 3
2139: ST_TO_ADDR
// vc_engine := engine_solar ;
2140: LD_ADDR_OWVAR 39
2144: PUSH
2145: LD_INT 2
2147: ST_TO_ADDR
// vc_control := control_computer ;
2148: LD_ADDR_OWVAR 38
2152: PUSH
2153: LD_INT 3
2155: ST_TO_ADDR
// vc_weapon := us_radar ;
2156: LD_ADDR_OWVAR 40
2160: PUSH
2161: LD_INT 11
2163: ST_TO_ADDR
// veh := CreateVehicle ;
2164: LD_ADDR_VAR 0 7
2168: PUSH
2169: CALL_OW 45
2173: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2174: LD_VAR 0 7
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 142
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 48
// end ; end_of_file
2192: LD_VAR 0 1
2196: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2197: LD_INT 0
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 6
2212: PUSH
2213: LD_INT 7
2215: PUSH
2216: LD_INT 7
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_OWVAR 67
2228: ARRAY
2229: ST_TO_ADDR
// uc_side := 2 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 2
2237: ST_TO_ADDR
// uc_nation := 2 ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 2
2245: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 14
2253: ST_TO_ADDR
// vc_engine := engine_siberite ;
2254: LD_ADDR_OWVAR 39
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// vc_control := control_manual ;
2262: LD_ADDR_OWVAR 38
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2270: LD_ADDR_OWVAR 40
2274: PUSH
2275: LD_INT 31
2277: ST_TO_ADDR
// for i = 1 to 3 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 3
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2376
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_INT 3
2299: PPUSH
2300: LD_VAR 0 5
2304: PPUSH
2305: CALL_OW 380
// un := CreateVehicle ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: CALL_OW 45
2318: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2319: LD_VAR 0 4
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 5
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2339: LD_VAR 0 4
2343: PPUSH
2344: LD_INT 156
2346: PPUSH
2347: LD_INT 15
2349: PPUSH
2350: LD_INT 6
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2360: CALL_OW 44
2364: PPUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: CALL_OW 52
// end ;
2374: GO 2291
2376: POP
2377: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2378: LD_ADDR_EXP 36
2382: PUSH
2383: LD_INT 94
2385: PPUSH
2386: LD_INT 28
2388: PPUSH
2389: LD_STRING dammam
2391: PPUSH
2392: LD_VAR 0 5
2396: PPUSH
2397: LD_INT 10000
2399: PUSH
2400: LD_INT 1000
2402: PUSH
2403: LD_INT 300
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PPUSH
2411: LD_INT 1
2413: NEG
2414: PUSH
2415: LD_INT 5
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL 56568 0 6
2435: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2436: LD_ADDR_EXP 36
2440: PUSH
2441: LD_EXP 36
2445: PUSH
2446: LD_INT 122
2448: PPUSH
2449: LD_INT 25
2451: PPUSH
2452: LD_STRING 
2454: PPUSH
2455: LD_VAR 0 5
2459: PPUSH
2460: LD_INT 500
2462: PUSH
2463: LD_INT 60
2465: PUSH
2466: LD_INT 0
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: PPUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: LD_INT 2
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL 56568 0 6
2497: UNION
2498: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2499: LD_ADDR_EXP 34
2503: PUSH
2504: LD_INT 45
2506: PPUSH
2507: LD_INT 24
2509: PPUSH
2510: LD_STRING jeddah
2512: PPUSH
2513: LD_VAR 0 5
2517: PPUSH
2518: LD_INT 700
2520: PUSH
2521: LD_INT 300
2523: PUSH
2524: LD_INT 10
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PPUSH
2532: LD_INT 1
2534: NEG
2535: PUSH
2536: LD_INT 5
2538: PUSH
2539: LD_INT 3
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL 56568 0 6
2555: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2556: LD_ADDR_EXP 35
2560: PUSH
2561: LD_INT 7
2563: PPUSH
2564: LD_INT 27
2566: PPUSH
2567: LD_STRING riyadh
2569: PPUSH
2570: LD_VAR 0 5
2574: PPUSH
2575: LD_INT 500
2577: PUSH
2578: LD_INT 60
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: PPUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL 56568 0 6
2611: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2612: LD_ADDR_EXP 38
2616: PUSH
2617: LD_INT 204
2619: PPUSH
2620: LD_INT 26
2622: PPUSH
2623: LD_STRING 
2625: PPUSH
2626: LD_VAR 0 5
2630: PPUSH
2631: LD_INT 500
2633: PUSH
2634: LD_INT 50
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: LD_INT 1
2647: NEG
2648: PUSH
2649: LD_INT 3
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL 56568 0 6
2668: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2669: LD_ADDR_EXP 49
2673: PUSH
2674: LD_EXP 36
2678: PUSH
2679: LD_EXP 34
2683: PUSH
2684: LD_EXP 38
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 31
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 58
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2861
// begin if GetBase ( i ) then
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 274
2747: IFFALSE 2751
// continue ;
2749: GO 2735
// d := GetDir ( i ) ;
2751: LD_ADDR_VAR 0 3
2755: PUSH
2756: LD_VAR 0 2
2760: PPUSH
2761: CALL_OW 254
2765: ST_TO_ADDR
// if d < 3 then
2766: LD_VAR 0 3
2770: PUSH
2771: LD_INT 3
2773: LESS
2774: IFFALSE 2792
// d := d + 3 else
2776: LD_ADDR_VAR 0 3
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: PLUS
2789: ST_TO_ADDR
2790: GO 2806
// d := d - 3 ;
2792: LD_ADDR_VAR 0 3
2796: PUSH
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 3
2804: MINUS
2805: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2806: LD_INT 0
2808: PPUSH
2809: LD_INT 8
2811: PPUSH
2812: LD_VAR 0 5
2816: PPUSH
2817: CALL_OW 380
// un := CreateHuman ;
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: CALL_OW 44
2830: ST_TO_ADDR
// SetDir ( un , d ) ;
2831: LD_VAR 0 4
2835: PPUSH
2836: LD_VAR 0 3
2840: PPUSH
2841: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2845: LD_VAR 0 4
2849: PPUSH
2850: LD_VAR 0 2
2854: PPUSH
2855: CALL_OW 52
// end ;
2859: GO 2735
2861: POP
2862: POP
// if Difficulty > 1 then
2863: LD_OWVAR 67
2867: PUSH
2868: LD_INT 1
2870: GREATER
2871: IFFALSE 3242
// begin ar_kamikadze := [ ] ;
2873: LD_ADDR_EXP 41
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_VAR 0 5
2890: PPUSH
2891: CALL_OW 380
// un := CreateHuman ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2917: LD_VAR 0 4
2921: PPUSH
2922: LD_INT 23
2924: PPUSH
2925: LD_INT 44
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 48
// ComCrawl ( un ) ;
2935: LD_VAR 0 4
2939: PPUSH
2940: CALL_OW 137
// un := CreateHuman ;
2944: LD_ADDR_VAR 0 4
2948: PUSH
2949: CALL_OW 44
2953: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2954: LD_VAR 0 4
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 30
2973: PPUSH
2974: LD_INT 39
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 48
// ComCrawl ( un ) ;
2984: LD_VAR 0 4
2988: PPUSH
2989: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2993: LD_INT 0
2995: PPUSH
2996: LD_INT 17
2998: PPUSH
2999: LD_VAR 0 5
3003: PPUSH
3004: CALL_OW 380
// un := CreateHuman ;
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: CALL_OW 44
3017: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3018: LD_VAR 0 4
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3030: LD_VAR 0 4
3034: PPUSH
3035: LD_INT 45
3037: PPUSH
3038: LD_INT 86
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 48
// ComHold ( un ) ;
3048: LD_VAR 0 4
3052: PPUSH
3053: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3057: LD_ADDR_EXP 41
3061: PUSH
3062: LD_EXP 41
3066: PPUSH
3067: LD_EXP 41
3071: PUSH
3072: LD_INT 1
3074: PLUS
3075: PPUSH
3076: LD_VAR 0 4
3080: PPUSH
3081: CALL_OW 1
3085: ST_TO_ADDR
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3108: LD_VAR 0 4
3112: PPUSH
3113: LD_INT 60
3115: PPUSH
3116: LD_INT 85
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: CALL_OW 48
// ComHold ( un ) ;
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3135: LD_ADDR_EXP 41
3139: PUSH
3140: LD_EXP 41
3144: PPUSH
3145: LD_EXP 41
3149: PUSH
3150: LD_INT 1
3152: PLUS
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 1
3163: ST_TO_ADDR
// un := CreateHuman ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 222
3193: PPUSH
3194: LD_INT 166
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 48
// ComHold ( un ) ;
3204: LD_VAR 0 4
3208: PPUSH
3209: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3213: LD_ADDR_EXP 41
3217: PUSH
3218: LD_EXP 41
3222: PPUSH
3223: LD_EXP 41
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: CALL_OW 1
3241: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3242: LD_ADDR_EXP 39
3246: PUSH
3247: EMPTY
3248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3264: LD_ADDR_OWVAR 26
3268: PUSH
3269: LD_STRING Pavel Grigorovic
3271: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3272: LD_ADDR_OWVAR 33
3276: PUSH
3277: LD_STRING SecondCharsGal
3279: ST_TO_ADDR
// hc_face_number := 4 ;
3280: LD_ADDR_OWVAR 34
3284: PUSH
3285: LD_INT 4
3287: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3288: LD_ADDR_EXP 39
3292: PUSH
3293: LD_EXP 39
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 44
3305: PPUSH
3306: CALL_OW 1
3310: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3311: LD_INT 2
3313: PPUSH
3314: LD_INT 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: CALL_OW 380
// hc_name := Lucy Sebel ;
3326: LD_ADDR_OWVAR 26
3330: PUSH
3331: LD_STRING Lucy Sebel
3333: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3334: LD_ADDR_OWVAR 33
3338: PUSH
3339: LD_STRING SecondCharsGal
3341: ST_TO_ADDR
// hc_face_number := 15 ;
3342: LD_ADDR_OWVAR 34
3346: PUSH
3347: LD_INT 15
3349: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3350: LD_ADDR_EXP 39
3354: PUSH
3355: LD_EXP 39
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 44
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3373: LD_INT 2
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_VAR 0 5
3383: PPUSH
3384: CALL_OW 380
// hc_gallery :=  ;
3388: LD_ADDR_OWVAR 33
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_name :=  ;
3396: LD_ADDR_OWVAR 26
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3404: LD_ADDR_EXP 39
3408: PUSH
3409: LD_EXP 39
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 44
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// hc_sex := sex_male ;
3427: LD_ADDR_OWVAR 27
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_class = 11 ;
3435: LD_ADDR_OWVAR 28
3439: PUSH
3440: LD_INT 11
3442: ST_TO_ADDR
// hc_gallery = sandar ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING sandar
3450: ST_TO_ADDR
// hc_face_number = 33 ;
3451: LD_ADDR_OWVAR 34
3455: PUSH
3456: LD_INT 33
3458: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3459: LD_ADDR_OWVAR 26
3463: PUSH
3464: LD_STRING Thabit Muhair Saliba
3466: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3467: LD_ADDR_OWVAR 31
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: ST_TO_ADDR
// Saliba = CreateHuman ;
3490: LD_ADDR_EXP 43
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3500: LD_EXP 43
3504: PPUSH
3505: LD_INT 7
3507: PPUSH
3508: CALL_OW 52
// if gensher_active then
3512: LD_EXP 18
3516: IFFALSE 3543
// begin Gensher = NewCharacter ( Dietrich ) ;
3518: LD_ADDR_EXP 44
3522: PUSH
3523: LD_STRING Dietrich
3525: PPUSH
3526: CALL_OW 25
3530: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3531: LD_EXP 44
3535: PPUSH
3536: LD_INT 94
3538: PPUSH
3539: CALL_OW 52
// end ; InitHc ;
3543: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3547: LD_ADDR_EXP 40
3551: PUSH
3552: EMPTY
3553: ST_TO_ADDR
// for i = 1 to 5 do
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: DOUBLE
3560: LD_INT 1
3562: DEC
3563: ST_TO_ADDR
3564: LD_INT 5
3566: PUSH
3567: FOR_TO
3568: IFFALSE 3740
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3570: LD_INT 13
3572: PUSH
3573: LD_INT 14
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 1
3582: PPUSH
3583: LD_INT 2
3585: PPUSH
3586: CALL_OW 12
3590: ARRAY
3591: PPUSH
3592: LD_INT 1
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 1
3604: PPUSH
3605: LD_INT 2
3607: PPUSH
3608: CALL_OW 12
3612: ARRAY
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 25
3619: PUSH
3620: LD_INT 27
3622: PUSH
3623: LD_INT 26
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: LD_INT 60
3645: PPUSH
3646: LD_INT 100
3648: PPUSH
3649: CALL_OW 12
3653: PPUSH
3654: CALL 53159 0 5
// un := CreateVehicle ;
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: CALL_OW 45
3667: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3668: LD_ADDR_EXP 40
3672: PUSH
3673: LD_EXP 40
3677: PPUSH
3678: LD_EXP 40
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3697: LD_VAR 0 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: LD_INT 5
3707: PPUSH
3708: CALL_OW 12
3712: PPUSH
3713: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3717: LD_VAR 0 4
3721: PPUSH
3722: LD_INT 124
3724: PPUSH
3725: LD_INT 141
3727: PPUSH
3728: LD_INT 8
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 50
// end ;
3738: GO 3567
3740: POP
3741: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3742: LD_ADDR_EXP 42
3746: PUSH
3747: EMPTY
3748: PUSH
3749: EMPTY
3750: PUSH
3751: EMPTY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3758: LD_ADDR_VAR 0 3
3762: PUSH
3763: DOUBLE
3764: LD_INT 1
3766: DEC
3767: ST_TO_ADDR
3768: LD_INT 3
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_OWVAR 67
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 4003
// for i = 1 to 3 do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 3
3803: PUSH
3804: FOR_TO
3805: IFFALSE 3999
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3807: LD_INT 14
3809: PPUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 5
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 2
3847: PPUSH
3848: CALL_OW 12
3852: ARRAY
3853: PPUSH
3854: LD_INT 25
3856: PUSH
3857: LD_INT 27
3859: PUSH
3860: LD_INT 26
3862: PUSH
3863: LD_INT 28
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 1
3874: PPUSH
3875: LD_INT 4
3877: PPUSH
3878: CALL_OW 12
3882: ARRAY
3883: PPUSH
3884: LD_INT 100
3886: PPUSH
3887: CALL 53159 0 5
// un := CreateVehicle ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: CALL_OW 45
3900: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3901: LD_ADDR_EXP 42
3905: PUSH
3906: LD_EXP 42
3910: PPUSH
3911: LD_VAR 0 2
3915: PUSH
3916: LD_EXP 42
3920: PUSH
3921: LD_VAR 0 2
3925: ARRAY
3926: PUSH
3927: LD_INT 1
3929: PLUS
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: CALL 53281 0 3
3944: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 5
3955: PPUSH
3956: CALL_OW 12
3960: PPUSH
3961: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_INT 20
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 49
// end ;
3997: GO 3804
3999: POP
4000: POP
4001: GO 3788
4003: POP
4004: POP
// InitHc ;
4005: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4009: LD_INT 4
4011: PPUSH
4012: LD_INT 5
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 58
// end ;
4028: LD_VAR 0 1
4032: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4033: LD_EXP 41
4037: IFFALSE 4111
4039: GO 4041
4041: DISABLE
4042: LD_INT 0
4044: PPUSH
// begin enable ;
4045: ENABLE
// for i in ar_kamikadze do
4046: LD_ADDR_VAR 0 1
4050: PUSH
4051: LD_EXP 41
4055: PUSH
4056: FOR_IN
4057: IFFALSE 4109
// if See ( 1 , i ) then
4059: LD_INT 1
4061: PPUSH
4062: LD_VAR 0 1
4066: PPUSH
4067: CALL_OW 292
4071: IFFALSE 4107
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PPUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 74
4102: PPUSH
4103: CALL_OW 115
4107: GO 4056
4109: POP
4110: POP
// end ;
4111: PPOPN 1
4113: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4114: LD_EXP 13
4118: IFFALSE 4435
4120: GO 4122
4122: DISABLE
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
4127: PPUSH
4128: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4129: LD_INT 35
4131: PPUSH
4132: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4136: LD_INT 1
4138: PPUSH
4139: CALL 40634 0 1
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: IFFALSE 4129
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 14
4154: PUSH
4155: LD_INT 3
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 32
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: EMPTY
4171: LIST
4172: PPUSH
4173: CALL 40238 0 2
// repeat wait ( 0 0$1 ) ;
4177: LD_INT 35
4179: PPUSH
4180: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4184: LD_EXP 68
4188: PUSH
4189: LD_INT 1
4191: ARRAY
4192: PPUSH
4193: LD_INT 33
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 34
4205: PUSH
4206: LD_INT 32
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 72
4221: IFFALSE 4177
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: LD_EXP 68
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PPUSH
4237: LD_INT 33
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 34
4249: PUSH
4250: LD_INT 32
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 72
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL_OW 469
4282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: LD_INT 5
4297: PPUSH
4298: CALL_OW 469
4302: ST_TO_ADDR
// tmp := 100 ;
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 100
4310: ST_TO_ADDR
// if pos then
4311: LD_VAR 0 4
4315: IFFALSE 4355
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 2
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: PPUSH
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: ARRAY
4342: PPUSH
4343: LD_INT 20
4345: PPUSH
4346: CALL 54177 0 4
4350: PUSH
4351: LD_INT 4
4353: ARRAY
4354: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4355: LD_VAR 0 4
4359: PUSH
4360: LD_EXP 14
4364: NOT
4365: AND
4366: PUSH
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 10
4374: LESS
4375: AND
4376: IFFALSE 4283
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4378: LD_VAR 0 2
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 1
4390: ARRAY
4391: PPUSH
4392: LD_VAR 0 4
4396: PUSH
4397: LD_INT 2
4399: ARRAY
4400: PPUSH
4401: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4405: LD_VAR 0 2
4409: PPUSH
4410: LD_INT 198
4412: PPUSH
4413: LD_INT 113
4415: PPUSH
4416: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4420: LD_VAR 0 2
4424: PPUSH
4425: LD_INT 124
4427: PPUSH
4428: LD_INT 7
4430: PPUSH
4431: CALL_OW 171
// end ;
4435: PPOPN 4
4437: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4438: LD_EXP 6
4442: IFFALSE 7099
4444: GO 4446
4446: DISABLE
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 5
4464: PUSH
4465: LD_INT 6
4467: PUSH
4468: LD_INT 7
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_OWVAR 67
4480: ARRAY
4481: ST_TO_ADDR
// coords := [ ] ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: EMPTY
4488: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4489: LD_ADDR_VAR 0 6
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 14
4541: PUSH
4542: LD_INT 1
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 28
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 14
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: LD_INT 25
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 14
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: LD_INT 2
4583: PUSH
4584: LD_INT 28
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 14
4595: PUSH
4596: LD_INT 1
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: LD_INT 29
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL 40238 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4621: LD_INT 21000
4623: PUSH
4624: LD_INT 19950
4626: PUSH
4627: LD_INT 18900
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_OWVAR 67
4639: ARRAY
4640: PPUSH
4641: CALL_OW 67
// InitHc ;
4645: CALL_OW 19
// InitUc ;
4649: CALL_OW 18
// uc_side := 2 ;
4653: LD_ADDR_OWVAR 20
4657: PUSH
4658: LD_INT 2
4660: ST_TO_ADDR
// uc_nation := 2 ;
4661: LD_ADDR_OWVAR 21
4665: PUSH
4666: LD_INT 2
4668: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: EMPTY
4675: PUSH
4676: EMPTY
4677: PUSH
4678: EMPTY
4679: PUSH
4680: EMPTY
4681: PUSH
4682: EMPTY
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: LD_EXP 68
4708: PUSH
4709: LD_INT 1
4711: ARRAY
4712: PUSH
4713: LD_INT 34
4715: PUSH
4716: LD_INT 32
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: DIFF
4728: PPUSH
4729: CALL_OW 1
4733: ST_TO_ADDR
// for i = 1 to Difficulty do
4734: LD_ADDR_VAR 0 1
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_OWVAR 67
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4888
// begin uc_side := 2 ;
4752: LD_ADDR_OWVAR 20
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// uc_nation := 2 ;
4760: LD_ADDR_OWVAR 21
4764: PUSH
4765: LD_INT 2
4767: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4768: LD_INT 13
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 5
4776: PPUSH
4777: LD_INT 29
4779: PPUSH
4780: LD_INT 100
4782: PPUSH
4783: CALL 53159 0 5
// un := CreateVehicle ;
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: CALL_OW 45
4796: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PUSH
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 1
4817: ARRAY
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: CALL 53281 0 3
4836: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_INT 3
4844: PPUSH
4845: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4849: LD_VAR 0 2
4853: PPUSH
4854: LD_INT 16
4856: PPUSH
4857: LD_INT 0
4859: PPUSH
4860: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4864: LD_VAR 0 2
4868: PPUSH
4869: LD_INT 51
4871: PPUSH
4872: LD_INT 10
4874: PPUSH
4875: CALL_OW 111
// wait ( 0 0$2 ) ;
4879: LD_INT 70
4881: PPUSH
4882: CALL_OW 67
// end ;
4886: GO 4749
4888: POP
4889: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4890: LD_ADDR_VAR 0 5
4894: PUSH
4895: LD_INT 51
4897: PUSH
4898: LD_INT 24
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 75
4907: PUSH
4908: LD_INT 90
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4919: LD_INT 1
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_VAR 0 6
4940: PPUSH
4941: CALL 40471 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_OWVAR 67
4973: ARRAY
4974: PUSH
4975: FOR_TO
4976: IFFALSE 5076
// begin uc_side := 2 ;
4978: LD_ADDR_OWVAR 20
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// uc_nation := 2 ;
4986: LD_ADDR_OWVAR 21
4990: PUSH
4991: LD_INT 2
4993: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4994: LD_INT 0
4996: PPUSH
4997: LD_INT 17
4999: PPUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: CALL_OW 380
// un := CreateHuman ;
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_INT 2
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: LD_INT 2
5039: ARRAY
5040: PUSH
5041: LD_INT 1
5043: PLUS
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PPUSH
5049: LD_VAR 0 2
5053: PPUSH
5054: CALL 53281 0 3
5058: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_INT 13
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: CALL_OW 49
// end ;
5074: GO 4975
5076: POP
5077: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5078: LD_ADDR_VAR 0 1
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_INT 2
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_OWVAR 67
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5228
// begin uc_side := 2 ;
5111: LD_ADDR_OWVAR 20
5115: PUSH
5116: LD_INT 2
5118: ST_TO_ADDR
// uc_nation := 2 ;
5119: LD_ADDR_OWVAR 21
5123: PUSH
5124: LD_INT 2
5126: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 1
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 1
5142: PPUSH
5143: LD_INT 2
5145: PPUSH
5146: CALL_OW 12
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 4
5156: PPUSH
5157: CALL_OW 380
// un := CreateHuman ;
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: CALL_OW 44
5170: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 2
5191: ARRAY
5192: PUSH
5193: LD_INT 1
5195: PLUS
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: LD_VAR 0 2
5205: PPUSH
5206: CALL 53281 0 3
5210: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5211: LD_VAR 0 2
5215: PPUSH
5216: LD_INT 13
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 49
// end ;
5226: GO 5108
5228: POP
5229: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_INT 67
5237: PUSH
5238: LD_INT 112
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 85
5247: PUSH
5248: LD_INT 130
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5259: LD_INT 2
5261: PPUSH
5262: LD_VAR 0 3
5266: PUSH
5267: LD_INT 2
5269: ARRAY
5270: PPUSH
5271: LD_VAR 0 5
5275: PPUSH
5276: LD_VAR 0 6
5280: PPUSH
5281: CALL 40471 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5285: LD_ADDR_VAR 0 1
5289: PUSH
5290: DOUBLE
5291: LD_INT 1
5293: DEC
5294: ST_TO_ADDR
5295: LD_INT 1
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: LD_OWVAR 67
5313: ARRAY
5314: PUSH
5315: FOR_TO
5316: IFFALSE 5416
// begin uc_side := 2 ;
5318: LD_ADDR_OWVAR 20
5322: PUSH
5323: LD_INT 2
5325: ST_TO_ADDR
// uc_nation := 2 ;
5326: LD_ADDR_OWVAR 21
5330: PUSH
5331: LD_INT 2
5333: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5334: LD_INT 0
5336: PPUSH
5337: LD_INT 17
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 380
// un := CreateHuman ;
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 3
5371: PUSH
5372: LD_VAR 0 3
5376: PUSH
5377: LD_INT 3
5379: ARRAY
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 53281 0 3
5398: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5399: LD_VAR 0 2
5403: PPUSH
5404: LD_INT 14
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: GO 5315
5416: POP
5417: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5418: LD_ADDR_VAR 0 5
5422: PUSH
5423: LD_INT 148
5425: PUSH
5426: LD_INT 158
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 148
5435: PUSH
5436: LD_INT 158
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5447: LD_INT 3
5449: PPUSH
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 3
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: LD_VAR 0 6
5468: PPUSH
5469: CALL 40471 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5473: LD_ADDR_VAR 0 1
5477: PUSH
5478: DOUBLE
5479: LD_INT 1
5481: DEC
5482: ST_TO_ADDR
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PUSH
5497: LD_OWVAR 67
5501: ARRAY
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5728
// begin uc_side := 2 ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// uc_nation := 2 ;
5514: LD_ADDR_OWVAR 21
5518: PUSH
5519: LD_INT 2
5521: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5522: LD_INT 14
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 5
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 12
5548: ARRAY
5549: PPUSH
5550: LD_INT 27
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 28
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: CALL_OW 12
5574: ARRAY
5575: PPUSH
5576: LD_INT 100
5578: PPUSH
5579: CALL 53159 0 5
// un := CreateVehicle ;
5583: LD_ADDR_VAR 0 2
5587: PUSH
5588: CALL_OW 45
5592: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_INT 4
5605: PUSH
5606: LD_VAR 0 3
5610: PUSH
5611: LD_INT 4
5613: ARRAY
5614: PUSH
5615: LD_INT 1
5617: PLUS
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: CALL 53281 0 3
5632: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_INT 5
5640: PPUSH
5641: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 15
5652: PPUSH
5653: LD_INT 0
5655: PPUSH
5656: CALL_OW 49
// if GetControl ( un ) = control_manual then
5660: LD_VAR 0 2
5664: PPUSH
5665: CALL_OW 263
5669: PUSH
5670: LD_INT 1
5672: EQUAL
5673: IFFALSE 5704
// begin PrepareHuman ( false , 3 , skill ) ;
5675: LD_INT 0
5677: PPUSH
5678: LD_INT 3
5680: PPUSH
5681: LD_VAR 0 4
5685: PPUSH
5686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5690: CALL_OW 44
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_INT 179
5711: PPUSH
5712: LD_INT 135
5714: PPUSH
5715: CALL_OW 111
// wait ( 0 0$2 ) ;
5719: LD_INT 70
5721: PPUSH
5722: CALL_OW 67
// end ;
5726: GO 5503
5728: POP
5729: POP
// vc_chassis := 15 ;
5730: LD_ADDR_OWVAR 37
5734: PUSH
5735: LD_INT 15
5737: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_VAR 0 3
5747: PPUSH
5748: LD_INT 4
5750: PUSH
5751: LD_VAR 0 3
5755: PUSH
5756: LD_INT 4
5758: ARRAY
5759: PUSH
5760: LD_INT 1
5762: PLUS
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PPUSH
5768: CALL_OW 45
5772: PPUSH
5773: CALL 53281 0 3
5777: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 4
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_INT 4
5794: ARRAY
5795: ARRAY
5796: PPUSH
5797: LD_INT 15
5799: PPUSH
5800: LD_INT 0
5802: PPUSH
5803: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5807: LD_INT 0
5809: PPUSH
5810: LD_INT 11
5812: PPUSH
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 4
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 4
5842: ARRAY
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 44
5856: PPUSH
5857: CALL 53281 0 3
5861: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 4
5869: ARRAY
5870: PUSH
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 4
5878: ARRAY
5879: ARRAY
5880: PPUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 4
5888: ARRAY
5889: PUSH
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 4
5897: ARRAY
5898: PUSH
5899: LD_INT 1
5901: MINUS
5902: ARRAY
5903: PPUSH
5904: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5908: LD_ADDR_VAR 0 5
5912: PUSH
5913: LD_INT 148
5915: PUSH
5916: LD_INT 140
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5926: LD_INT 1
5928: PPUSH
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 4
5936: ARRAY
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL 40471 0 4
// if gensher_active then
5952: LD_EXP 18
5956: IFFALSE 6341
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5958: LD_EXP 44
5962: PPUSH
5963: LD_STRING D10-Diet-1
5965: PPUSH
5966: CALL_OW 94
// for i = 1 to 2 do
5970: LD_ADDR_VAR 0 1
5974: PUSH
5975: DOUBLE
5976: LD_INT 1
5978: DEC
5979: ST_TO_ADDR
5980: LD_INT 2
5982: PUSH
5983: FOR_TO
5984: IFFALSE 6122
// begin uc_side := 2 ;
5986: LD_ADDR_OWVAR 20
5990: PUSH
5991: LD_INT 2
5993: ST_TO_ADDR
// uc_nation := 2 ;
5994: LD_ADDR_OWVAR 21
5998: PUSH
5999: LD_INT 2
6001: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6002: LD_INT 13
6004: PPUSH
6005: LD_INT 3
6007: PPUSH
6008: LD_INT 5
6010: PPUSH
6011: LD_INT 29
6013: PPUSH
6014: LD_INT 100
6016: PPUSH
6017: CALL 53159 0 5
// un := CreateVehicle ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: CALL_OW 45
6030: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 5
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 5
6051: ARRAY
6052: PUSH
6053: LD_INT 1
6055: PLUS
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PPUSH
6061: LD_VAR 0 2
6065: PPUSH
6066: CALL 53281 0 3
6070: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 23
6090: PPUSH
6091: LD_INT 0
6093: PPUSH
6094: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 85
6105: PPUSH
6106: LD_INT 152
6108: PPUSH
6109: CALL_OW 111
// wait ( 0 0$2 ) ;
6113: LD_INT 70
6115: PPUSH
6116: CALL_OW 67
// end ;
6120: GO 5983
6122: POP
6123: POP
// for i = 1 to 3 do
6124: LD_ADDR_VAR 0 1
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_INT 3
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6295
// begin uc_side := 2 ;
6140: LD_ADDR_OWVAR 20
6144: PUSH
6145: LD_INT 2
6147: ST_TO_ADDR
// uc_nation := 2 ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_INT 2
6155: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6156: LD_INT 14
6158: PPUSH
6159: LD_INT 3
6161: PPUSH
6162: LD_INT 5
6164: PPUSH
6165: LD_INT 27
6167: PUSH
6168: LD_INT 28
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 1
6177: PPUSH
6178: LD_INT 2
6180: PPUSH
6181: CALL_OW 12
6185: ARRAY
6186: PPUSH
6187: LD_INT 100
6189: PPUSH
6190: CALL 53159 0 5
// un := CreateVehicle ;
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: CALL_OW 45
6203: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6204: LD_ADDR_VAR 0 3
6208: PUSH
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_INT 5
6216: PUSH
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 5
6224: ARRAY
6225: PUSH
6226: LD_INT 1
6228: PLUS
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: CALL 53281 0 3
6243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6256: LD_VAR 0 2
6260: PPUSH
6261: LD_INT 23
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_INT 85
6278: PPUSH
6279: LD_INT 152
6281: PPUSH
6282: CALL_OW 111
// wait ( 0 0$2 ) ;
6286: LD_INT 70
6288: PPUSH
6289: CALL_OW 67
// end ;
6293: GO 6137
6295: POP
6296: POP
// coords := [ [ 97 , 143 ] ] ;
6297: LD_ADDR_VAR 0 5
6301: PUSH
6302: LD_INT 97
6304: PUSH
6305: LD_INT 143
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6315: LD_INT 1
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 5
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 5
6331: PPUSH
6332: LD_VAR 0 6
6336: PPUSH
6337: CALL 40471 0 4
// end ; Wait ( 13 13$00 ) ;
6341: LD_INT 27300
6343: PPUSH
6344: CALL_OW 67
// tmp := [ ] ;
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: EMPTY
6354: ST_TO_ADDR
// w := 1 ;
6355: LD_ADDR_VAR 0 7
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// repeat tmp := [ ] ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: EMPTY
6369: ST_TO_ADDR
// if w mod 4 = 0 then
6370: LD_VAR 0 7
6374: PUSH
6375: LD_INT 4
6377: MOD
6378: PUSH
6379: LD_INT 0
6381: EQUAL
6382: IFFALSE 6469
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6384: LD_ADDR_VAR 0 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 24
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 11
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 24
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 24
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: ST_TO_ADDR
6467: GO 6571
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6469: LD_ADDR_VAR 0 8
6473: PUSH
6474: LD_INT 14
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 28
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 14
6494: PUSH
6495: LD_INT 1
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 14
6512: PUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 28
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 29
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 11
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 24
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// if w mod 3 = 0 then
6571: LD_VAR 0 7
6575: PUSH
6576: LD_INT 3
6578: MOD
6579: PUSH
6580: LD_INT 0
6582: EQUAL
6583: IFFALSE 6659
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6585: LD_ADDR_VAR 0 8
6589: PUSH
6590: LD_VAR 0 8
6594: PPUSH
6595: LD_INT 1
6597: PUSH
6598: LD_VAR 0 8
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: LD_INT 14
6619: PUSH
6620: LD_INT 1
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 28
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 1
6638: PPUSH
6639: LD_INT 2
6641: PPUSH
6642: CALL_OW 12
6646: ARRAY
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL 53281 0 3
6658: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6659: LD_INT 1
6661: PPUSH
6662: LD_VAR 0 8
6666: PPUSH
6667: CALL 40238 0 2
// if GetSide ( ar_dep_w ) = 2 then
6671: LD_INT 45
6673: PPUSH
6674: CALL_OW 255
6678: PUSH
6679: LD_INT 2
6681: EQUAL
6682: IFFALSE 6767
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6684: LD_ADDR_VAR 0 8
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 28
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 14
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 27
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 27
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_VAR 0 8
6755: PPUSH
6756: CALL 40238 0 2
// wait ( 0 0$50 ) ;
6760: LD_INT 1750
6762: PPUSH
6763: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6774: LD_EXP 68
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: LD_INT 3
6785: PUSH
6786: LD_INT 34
6788: PUSH
6789: LD_INT 32
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 72
6804: PUSH
6805: LD_INT 4
6807: GREATEREQUAL
6808: IFFALSE 6767
// wait ( 0 0$10 ) ;
6810: LD_INT 350
6812: PPUSH
6813: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_EXP 68
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 34
6836: PUSH
6837: LD_INT 32
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 72
6852: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6853: LD_INT 100
6855: PPUSH
6856: CALL_OW 13
6860: PUSH
6861: LD_INT 50
6863: LESS
6864: IFFALSE 6897
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6866: LD_ADDR_VAR 0 5
6870: PUSH
6871: LD_INT 55
6873: PUSH
6874: LD_INT 7
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 75
6883: PUSH
6884: LD_INT 90
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 6926
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_INT 128
6904: PUSH
6905: LD_INT 94
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 180
6914: PUSH
6915: LD_INT 135
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: ST_TO_ADDR
// if w mod 4 = 0 then
6926: LD_VAR 0 7
6930: PUSH
6931: LD_INT 4
6933: MOD
6934: PUSH
6935: LD_INT 0
6937: EQUAL
6938: IFFALSE 6969
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6940: LD_ADDR_VAR 0 5
6944: PUSH
6945: LD_INT 91
6947: PUSH
6948: LD_INT 58
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 117
6957: PUSH
6958: LD_INT 107
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6969: LD_INT 1
6971: PPUSH
6972: LD_VAR 0 3
6976: PPUSH
6977: LD_VAR 0 5
6981: PPUSH
6982: LD_VAR 0 6
6986: PPUSH
6987: CALL 40471 0 4
// if mc_vehicles [ 2 ] then
6991: LD_EXP 68
6995: PUSH
6996: LD_INT 2
6998: ARRAY
6999: IFFALSE 7035
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7001: LD_INT 2
7003: PPUSH
7004: LD_EXP 68
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: LD_INT 73
7015: PUSH
7016: LD_INT 115
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: PPUSH
7026: LD_VAR 0 6
7030: PPUSH
7031: CALL 40471 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7035: LD_INT 22050
7037: PPUSH
7038: LD_INT 28350
7040: PPUSH
7041: CALL_OW 12
7045: PPUSH
7046: CALL_OW 67
// w := w + 1 ;
7050: LD_ADDR_VAR 0 7
7054: PUSH
7055: LD_VAR 0 7
7059: PUSH
7060: LD_INT 1
7062: PLUS
7063: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7064: LD_INT 94
7066: PPUSH
7067: CALL_OW 301
7071: PUSH
7072: LD_EXP 49
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PPUSH
7081: LD_INT 30
7083: PUSH
7084: LD_INT 3
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: NOT
7096: OR
7097: IFFALSE 6363
// end ;
7099: PPOPN 8
7101: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7102: LD_INT 204
7104: IFFALSE 7578
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
// begin enable ;
7115: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7116: LD_INT 35
7118: PPUSH
7119: LD_INT 1190
7121: PPUSH
7122: CALL_OW 12
7126: PPUSH
7127: CALL_OW 67
// tmp := [ ] ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: EMPTY
7137: ST_TO_ADDR
// uc_side := 8 ;
7138: LD_ADDR_OWVAR 20
7142: PUSH
7143: LD_INT 8
7145: ST_TO_ADDR
// uc_nation := 2 ;
7146: LD_ADDR_OWVAR 21
7150: PUSH
7151: LD_INT 2
7153: ST_TO_ADDR
// InitHc ;
7154: CALL_OW 19
// for i = 1 to 3 do
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_INT 3
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7299
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7174: LD_INT 13
7176: PUSH
7177: LD_INT 14
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 1
7186: PPUSH
7187: LD_INT 2
7189: PPUSH
7190: CALL_OW 12
7194: ARRAY
7195: PPUSH
7196: LD_INT 3
7198: PPUSH
7199: LD_INT 5
7201: PPUSH
7202: LD_INT 27
7204: PUSH
7205: LD_INT 28
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 1
7214: PPUSH
7215: LD_INT 2
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 100
7226: PPUSH
7227: CALL 53159 0 5
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 4
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7253: LD_VAR 0 3
7257: PPUSH
7258: LD_INT 15
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_VAR 0 2
7277: PPUSH
7278: LD_VAR 0 2
7282: PUSH
7283: LD_INT 1
7285: PLUS
7286: PPUSH
7287: LD_VAR 0 3
7291: PPUSH
7292: CALL_OW 1
7296: ST_TO_ADDR
// end ;
7297: GO 7171
7299: POP
7300: POP
// for i = 1 to 4 do
7301: LD_ADDR_VAR 0 1
7305: PUSH
7306: DOUBLE
7307: LD_INT 1
7309: DEC
7310: ST_TO_ADDR
7311: LD_INT 4
7313: PUSH
7314: FOR_TO
7315: IFFALSE 7394
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7317: LD_INT 0
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: LD_INT 4
7325: PPUSH
7326: CALL_OW 12
7330: PPUSH
7331: LD_INT 6
7333: PPUSH
7334: CALL_OW 380
// un := CreateHuman ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: CALL_OW 44
7347: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7348: LD_VAR 0 3
7352: PPUSH
7353: LD_INT 15
7355: PPUSH
7356: LD_INT 0
7358: PPUSH
7359: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_INT 1
7380: PLUS
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 1
7391: ST_TO_ADDR
// end ;
7392: GO 7314
7394: POP
7395: POP
// wait ( 0 0$3 ) ;
7396: LD_INT 105
7398: PPUSH
7399: CALL_OW 67
// for i in tmp do
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 2
7412: PUSH
7413: FOR_IN
7414: IFFALSE 7482
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 257
7425: PUSH
7426: LD_INT 1
7428: EQUAL
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 247
7439: PUSH
7440: LD_INT 2
7442: EQUAL
7443: OR
7444: IFFALSE 7480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_INT 81
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 69
7465: PPUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 74
7475: PPUSH
7476: CALL_OW 115
7480: GO 7413
7482: POP
7483: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7484: LD_VAR 0 2
7488: PPUSH
7489: LD_INT 210
7491: PPUSH
7492: LD_INT 178
7494: PPUSH
7495: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7499: LD_ADDR_VAR 0 4
7503: PUSH
7504: LD_INT 10
7506: PPUSH
7507: LD_INT 22
7509: PUSH
7510: LD_INT 8
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 70
7521: ST_TO_ADDR
// if x then
7522: LD_VAR 0 4
7526: IFFALSE 7554
// for i in x do
7528: LD_ADDR_VAR 0 1
7532: PUSH
7533: LD_VAR 0 4
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7552
// RemoveUnit ( i ) ;
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 64
7550: GO 7538
7552: POP
7553: POP
// wait ( 0 0$1 ) ;
7554: LD_INT 35
7556: PPUSH
7557: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 8
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: NOT
7576: IFFALSE 7484
// end ;
7578: PPOPN 4
7580: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7581: LD_INT 22
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 34
7593: PUSH
7594: LD_INT 31
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 24
7606: PUSH
7607: LD_INT 1000
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: IFFALSE 7671
7629: GO 7631
7631: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7632: LD_INT 22
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 34
7644: PUSH
7645: LD_INT 31
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PPUSH
7661: LD_INT 106
7663: PPUSH
7664: LD_INT 14
7666: PPUSH
7667: CALL_OW 111
// end ; end_of_file
7671: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
// InGameOn ;
7680: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7684: LD_EXP 20
7688: PPUSH
7689: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7693: LD_INT 2
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_INT 22
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 34
7760: PUSH
7761: LD_INT 11
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 69
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: ST_TO_ADDR
// for i = 1 to tmp do
7781: LD_ADDR_VAR 0 6
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_VAR 0 2
7795: PUSH
7796: FOR_TO
7797: IFFALSE 7844
// begin if i = 5 then
7799: LD_VAR 0 6
7803: PUSH
7804: LD_INT 5
7806: EQUAL
7807: IFFALSE 7811
// break ;
7809: GO 7844
// sols := Replace ( sols , i , tmp [ i ] ) ;
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: LD_VAR 0 5
7820: PPUSH
7821: LD_VAR 0 6
7825: PPUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_VAR 0 6
7835: ARRAY
7836: PPUSH
7837: CALL_OW 1
7841: ST_TO_ADDR
// end ;
7842: GO 7796
7844: POP
7845: POP
// tmp := ar_force_tmp ;
7846: LD_ADDR_VAR 0 2
7850: PUSH
7851: LD_EXP 39
7855: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_INT 108
7867: PPUSH
7868: LD_INT 139
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PPUSH
7887: LD_EXP 20
7891: PPUSH
7892: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 2
7903: ARRAY
7904: PPUSH
7905: LD_INT 114
7907: PPUSH
7908: LD_INT 132
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7918: LD_VAR 0 2
7922: PUSH
7923: LD_INT 3
7925: ARRAY
7926: PPUSH
7927: LD_INT 115
7929: PPUSH
7930: LD_INT 132
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7940: LD_VAR 0 2
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_INT 3
7956: ARRAY
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7966: LD_VAR 0 4
7970: PPUSH
7971: LD_INT 83
7973: PPUSH
7974: LD_INT 123
7976: PPUSH
7977: CALL_OW 111
// Wait ( 0 0$01 ) ;
7981: LD_INT 35
7983: PPUSH
7984: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7988: LD_INT 90
7990: PPUSH
7991: LD_INT 144
7993: PPUSH
7994: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_INT 88
8005: PPUSH
8006: LD_INT 129
8008: PPUSH
8009: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 92
8020: PUSH
8021: LD_INT 131
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 88
8030: PUSH
8031: LD_INT 127
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 91
8040: PUSH
8041: LD_INT 132
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 92
8050: PUSH
8051: LD_INT 134
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// for i = 1 to sols do
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: DOUBLE
8070: LD_INT 1
8072: DEC
8073: ST_TO_ADDR
8074: LD_VAR 0 5
8078: PUSH
8079: FOR_TO
8080: IFFALSE 8153
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8082: LD_VAR 0 5
8086: PUSH
8087: LD_VAR 0 6
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 3
8097: PUSH
8098: LD_VAR 0 6
8102: ARRAY
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 3
8112: PUSH
8113: LD_VAR 0 6
8117: ARRAY
8118: PUSH
8119: LD_INT 2
8121: ARRAY
8122: PPUSH
8123: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8127: LD_VAR 0 5
8131: PUSH
8132: LD_VAR 0 6
8136: ARRAY
8137: PPUSH
8138: CALL_OW 197
// AddComHold ( sols ) ;
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 200
// end ;
8151: GO 8079
8153: POP
8154: POP
// repeat wait ( 0 0$1 ) ;
8155: LD_INT 35
8157: PPUSH
8158: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8162: LD_VAR 0 5
8166: PUSH
8167: LD_INT 1
8169: ARRAY
8170: PPUSH
8171: LD_INT 92
8173: PPUSH
8174: LD_INT 131
8176: PPUSH
8177: CALL_OW 297
8181: PUSH
8182: LD_INT 4
8184: LESS
8185: IFFALSE 8155
// CenterOnXY ( 96 , 139 ) ;
8187: LD_INT 96
8189: PPUSH
8190: LD_INT 139
8192: PPUSH
8193: CALL_OW 84
// wait ( 0 0$3 ) ;
8197: LD_INT 105
8199: PPUSH
8200: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8204: LD_INT 111
8206: PPUSH
8207: LD_INT 135
8209: PPUSH
8210: LD_INT 1
8212: PPUSH
8213: LD_INT 25
8215: NEG
8216: PPUSH
8217: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8221: LD_VAR 0 2
8225: PUSH
8226: LD_INT 2
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 1
8237: ARRAY
8238: PPUSH
8239: CALL_OW 250
8243: PUSH
8244: LD_INT 3
8246: PLUS
8247: PPUSH
8248: LD_VAR 0 2
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: CALL_OW 251
8261: PPUSH
8262: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8266: LD_VAR 0 2
8270: PUSH
8271: LD_INT 3
8273: ARRAY
8274: PPUSH
8275: LD_INT 7
8277: PPUSH
8278: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8282: LD_VAR 0 2
8286: PUSH
8287: LD_INT 2
8289: ARRAY
8290: PPUSH
8291: LD_VAR 0 2
8295: PUSH
8296: LD_INT 1
8298: ARRAY
8299: PPUSH
8300: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8304: LD_INT 35
8306: PPUSH
8307: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 1
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 2
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: CALL_OW 296
8333: PUSH
8334: LD_INT 5
8336: LESS
8337: IFFALSE 8304
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8339: LD_VAR 0 2
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_VAR 0 2
8352: PUSH
8353: LD_INT 2
8355: ARRAY
8356: PPUSH
8357: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: PPUSH
8370: LD_STRING D1a-Merc1-1
8372: PPUSH
8373: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: ARRAY
8385: PPUSH
8386: LD_STRING D1a-FMerc2-1
8388: PPUSH
8389: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 2
8400: ARRAY
8401: PPUSH
8402: LD_VAR 0 2
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PPUSH
8424: LD_INT 500
8426: PPUSH
8427: CALL_OW 234
// wait ( 0 0$2 ) ;
8431: LD_INT 70
8433: PPUSH
8434: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 1
8445: ARRAY
8446: PPUSH
8447: LD_INT 2
8449: PPUSH
8450: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8454: LD_INT 10
8456: PPUSH
8457: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8461: LD_VAR 0 2
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_STRING D1a-Merc1-2
8472: PPUSH
8473: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8477: LD_INT 7
8479: PPUSH
8480: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8484: LD_VAR 0 2
8488: PUSH
8489: LD_INT 1
8491: ARRAY
8492: PPUSH
8493: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8497: LD_VAR 0 2
8501: PUSH
8502: LD_INT 2
8504: ARRAY
8505: PPUSH
8506: LD_INT 10
8508: PPUSH
8509: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: PPUSH
8522: LD_STRING D1a-FMerc2-2
8524: PPUSH
8525: CALL_OW 88
// wait ( 0 0$1 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8536: LD_INT 7
8538: PPUSH
8539: CALL_OW 85
// wait ( 0 0$2 ) ;
8543: LD_INT 70
8545: PPUSH
8546: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8550: LD_EXP 43
8554: PPUSH
8555: LD_STRING D1a-Saliba-1
8557: PPUSH
8558: CALL_OW 91
// KillUnit ( Saliba ) ;
8562: LD_EXP 43
8566: PPUSH
8567: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8571: LD_VAR 0 2
8575: PUSH
8576: LD_INT 3
8578: ARRAY
8579: PPUSH
8580: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8584: LD_EXP 20
8588: PPUSH
8589: CALL_OW 85
// wait ( 0 0$1 ) ;
8593: LD_INT 35
8595: PPUSH
8596: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8600: LD_VAR 0 5
8604: PPUSH
8605: LD_INT 88
8607: PPUSH
8608: LD_INT 141
8610: PPUSH
8611: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8615: LD_VAR 0 5
8619: PPUSH
8620: LD_INT 70
8622: PPUSH
8623: CALL_OW 202
// wait ( 0 0$2 ) ;
8627: LD_INT 70
8629: PPUSH
8630: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8634: LD_INT 2
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: CALL_OW 80
// InGameOff ;
8650: CALL_OW 9
// ComWalk ( sols ) ;
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8663: LD_STRING M1
8665: PPUSH
8666: CALL_OW 337
// game_speed := 4 ;
8670: LD_ADDR_OWVAR 65
8674: PUSH
8675: LD_INT 4
8677: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 135
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 331
// SaveForQuickRestart ;
8691: CALL_OW 22
// ar_run := true ;
8695: LD_ADDR_EXP 5
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 91
8722: PUSH
8723: LD_INT 7
8725: PUSH
8726: LD_INT 10
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: PUSH
8743: LD_INT 7
8745: PPUSH
8746: CALL_OW 256
8750: PUSH
8751: LD_INT 999
8753: LESS
8754: OR
8755: IFFALSE 8703
// if GetSide ( ar_dep_s ) = 2 then
8757: LD_INT 7
8759: PPUSH
8760: CALL_OW 255
8764: PUSH
8765: LD_INT 2
8767: EQUAL
8768: IFFALSE 8780
// SetSide ( ar_dep_s , 1 ) ;
8770: LD_INT 7
8772: PPUSH
8773: LD_INT 1
8775: PPUSH
8776: CALL_OW 235
// end ;
8780: LD_VAR 0 1
8784: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8785: LD_EXP 5
8789: IFFALSE 9149
8791: GO 8793
8793: DISABLE
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_EXP 39
8808: PUSH
8809: LD_EXP 35
8813: PPUSH
8814: LD_INT 2
8816: PUSH
8817: LD_INT 21
8819: PUSH
8820: LD_INT 2
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 1
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 72
8846: ADD
8847: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_INT 5
8855: PPUSH
8856: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8860: LD_INT 5
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 343
// k := 1 ;
8870: LD_ADDR_VAR 0 3
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// for i in tmp do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_VAR 0 2
8887: PUSH
8888: FOR_IN
8889: IFFALSE 8974
// begin if IsInUnit ( i ) then
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 310
8900: IFFALSE 8911
// ComExitBuilding ( i ) ;
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 122
// if GetClass ( i ) = 3 then
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 257
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: IFFALSE 8960
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_EXP 40
8935: PUSH
8936: LD_VAR 0 3
8940: ARRAY
8941: PPUSH
8942: CALL_OW 180
// k := k + 1 ;
8946: LD_ADDR_VAR 0 3
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 1
8958: PLUS
8959: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_INT 10
8967: PPUSH
8968: CALL_OW 173
// end ;
8972: GO 8888
8974: POP
8975: POP
// ar_patrol := true ;
8976: LD_ADDR_EXP 7
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8984: LD_INT 10
8986: PPUSH
8987: CALL_OW 67
// for i in tmp do
8991: LD_ADDR_VAR 0 1
8995: PUSH
8996: LD_VAR 0 2
9000: PUSH
9001: FOR_IN
9002: IFFALSE 9030
// if not HasTask ( i ) then
9004: LD_VAR 0 1
9008: PPUSH
9009: CALL_OW 314
9013: NOT
9014: IFFALSE 9028
// ComMoveToArea ( i , escape_area ) ;
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 10
9023: PPUSH
9024: CALL_OW 113
9028: GO 9001
9030: POP
9031: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9032: LD_ADDR_VAR 0 3
9036: PUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 95
9044: PUSH
9045: LD_INT 10
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 72
9056: ST_TO_ADDR
// if k then
9057: LD_VAR 0 3
9061: IFFALSE 9130
// for i in k do
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: LD_VAR 0 3
9072: PUSH
9073: FOR_IN
9074: IFFALSE 9128
// begin if IsInUnit ( i ) then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 310
9085: IFFALSE 9101
// RemoveUnit ( IsInUnit ( i ) ) ;
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 310
9096: PPUSH
9097: CALL_OW 64
// RemoveUnit ( i ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 64
// tmp := tmp diff i ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_VAR 0 2
9119: PUSH
9120: LD_VAR 0 1
9124: DIFF
9125: ST_TO_ADDR
// end ;
9126: GO 9073
9128: POP
9129: POP
// until tmp = [ ] ;
9130: LD_VAR 0 2
9134: PUSH
9135: EMPTY
9136: EQUAL
9137: IFFALSE 8984
// ChangeSideFog ( 5 , 5 ) ;
9139: LD_INT 5
9141: PPUSH
9142: LD_INT 5
9144: PPUSH
9145: CALL_OW 343
// end ;
9149: PPOPN 3
9151: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9152: LD_EXP 7
9156: IFFALSE 9446
9158: GO 9160
9160: DISABLE
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
9165: PPUSH
// begin uc_side := 2 ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_INT 2
9173: ST_TO_ADDR
// uc_nation := 2 ;
9174: LD_ADDR_OWVAR 21
9178: PUSH
9179: LD_INT 2
9181: ST_TO_ADDR
// InitHc ;
9182: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9186: LD_INT 1
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 6
9194: PPUSH
9195: CALL_OW 380
// un := CreateHuman ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: CALL_OW 44
9208: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9209: LD_INT 14
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_INT 27
9220: PPUSH
9221: LD_INT 98
9223: PPUSH
9224: CALL 53159 0 5
// veh := CreateVehicle ;
9228: LD_ADDR_VAR 0 3
9232: PUSH
9233: CALL_OW 45
9237: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9238: LD_VAR 0 3
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_INT 179
9257: PPUSH
9258: LD_INT 135
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_VAR 0 3
9277: PPUSH
9278: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 126
9289: PPUSH
9290: LD_INT 133
9292: PPUSH
9293: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9297: LD_INT 10
9299: PPUSH
9300: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: CALL_OW 292
9316: PUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: LD_INT 7
9324: PPUSH
9325: CALL_OW 296
9329: PUSH
9330: LD_INT 9
9332: LESS
9333: OR
9334: IFFALSE 9297
// ComHold ( veh ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_STRING D2aa-Ar1-1
9352: PPUSH
9353: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 177
9364: PPUSH
9365: LD_INT 96
9367: PPUSH
9368: CALL_OW 111
// AddComExitVehicle ( un ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9381: LD_INT 35
9383: PPUSH
9384: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9388: LD_VAR 0 2
9392: PPUSH
9393: LD_INT 204
9395: PPUSH
9396: CALL_OW 296
9400: PUSH
9401: LD_INT 15
9403: LESS
9404: IFFALSE 9381
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9406: LD_ADDR_EXP 49
9410: PUSH
9411: LD_EXP 49
9415: PPUSH
9416: LD_INT 3
9418: PUSH
9419: LD_EXP 49
9423: PUSH
9424: LD_INT 3
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: PLUS
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 53281 0 3
9445: ST_TO_ADDR
// end ;
9446: PPOPN 3
9448: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9449: LD_INT 7
9451: PPUSH
9452: CALL_OW 255
9456: PUSH
9457: LD_INT 1
9459: EQUAL
9460: PUSH
9461: LD_INT 7
9463: PPUSH
9464: CALL_OW 301
9468: OR
9469: IFFALSE 11893
9471: GO 9473
9473: DISABLE
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_EXP 35
9487: PPUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 3
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 72
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9520
// SetSide ( i , 1 ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 235
9518: GO 9503
9520: POP
9521: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_INT 46
9529: PUSH
9530: LD_INT 41
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 50
9539: PUSH
9540: LD_INT 25
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 57
9549: PUSH
9550: LD_INT 75
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 75
9559: PUSH
9560: LD_INT 89
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 51
9569: PUSH
9570: LD_INT 45
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 95
9579: PUSH
9580: LD_INT 95
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 84
9589: PUSH
9590: LD_INT 77
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 101
9599: PUSH
9600: LD_INT 76
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 118
9609: PUSH
9610: LD_INT 81
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 139
9619: PUSH
9620: LD_INT 97
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 129
9629: PUSH
9630: LD_INT 114
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 154
9639: PUSH
9640: LD_INT 111
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: ST_TO_ADDR
// base_captured := true ;
9661: LD_ADDR_EXP 6
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// DialogueOn ;
9669: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9673: LD_EXP 20
9677: PPUSH
9678: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9682: LD_EXP 20
9686: PPUSH
9687: LD_STRING D2-JMM-1
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9694: LD_EXP 29
9698: PPUSH
9699: LD_STRING D2-Pow-1
9701: PPUSH
9702: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9706: LD_EXP 20
9710: PPUSH
9711: LD_STRING D2-JMM-2
9713: PPUSH
9714: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9718: LD_EXP 29
9722: PPUSH
9723: LD_STRING D2-Pow-2
9725: PPUSH
9726: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9730: LD_EXP 20
9734: PPUSH
9735: LD_STRING D2-JMM-3
9737: PPUSH
9738: CALL_OW 88
// DialogueOff ;
9742: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9746: LD_STRING M2
9748: PPUSH
9749: CALL_OW 337
// Wait ( 0 0$2 ) ;
9753: LD_INT 70
9755: PPUSH
9756: CALL_OW 67
// if IsOk ( Gary ) then
9760: LD_EXP 31
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// Say ( Gary , D2a-Gary-1 ) ;
9771: LD_EXP 31
9775: PPUSH
9776: LD_STRING D2a-Gary-1
9778: PPUSH
9779: CALL_OW 88
// if IsOk ( Bobby ) then
9783: LD_EXP 23
9787: PPUSH
9788: CALL_OW 302
9792: IFFALSE 9806
// Say ( Bobby , D2a-Bobby-1 ) ;
9794: LD_EXP 23
9798: PPUSH
9799: LD_STRING D2a-Bobby-1
9801: PPUSH
9802: CALL_OW 88
// if IsOk ( Cyrus ) then
9806: LD_EXP 24
9810: PPUSH
9811: CALL_OW 302
9815: IFFALSE 9829
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9817: LD_EXP 24
9821: PPUSH
9822: LD_STRING D2a-Cyrus-1
9824: PPUSH
9825: CALL_OW 88
// if IsOk ( Lisa ) then
9829: LD_EXP 21
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9852
// Say ( Lisa , D2a-Lisa-1 ) ;
9840: LD_EXP 21
9844: PPUSH
9845: LD_STRING D2a-Lisa-1
9847: PPUSH
9848: CALL_OW 88
// if IsOk ( Frank ) then
9852: LD_EXP 32
9856: PPUSH
9857: CALL_OW 302
9861: IFFALSE 9875
// Say ( Frank , D2a-Frank-1 ) ;
9863: LD_EXP 32
9867: PPUSH
9868: LD_STRING D2a-Frank-1
9870: PPUSH
9871: CALL_OW 88
// if IsOk ( Cornel ) then
9875: LD_EXP 30
9879: PPUSH
9880: CALL_OW 302
9884: IFFALSE 9898
// Say ( Cornel , D2a-Corn-1 ) ;
9886: LD_EXP 30
9890: PPUSH
9891: LD_STRING D2a-Corn-1
9893: PPUSH
9894: CALL_OW 88
// if IsOk ( Donaldson ) then
9898: LD_EXP 22
9902: PPUSH
9903: CALL_OW 302
9907: IFFALSE 9921
// Say ( Donaldson , D2a-Don-1 ) ;
9909: LD_EXP 22
9913: PPUSH
9914: LD_STRING D2a-Don-1
9916: PPUSH
9917: CALL_OW 88
// if IsOk ( Brown ) then
9921: LD_EXP 26
9925: PPUSH
9926: CALL_OW 302
9930: IFFALSE 9944
// Say ( Brown , D2a-Brown-1 ) ;
9932: LD_EXP 26
9936: PPUSH
9937: LD_STRING D2a-Brown-1
9939: PPUSH
9940: CALL_OW 88
// Wait ( 0 0$30 ) ;
9944: LD_INT 1050
9946: PPUSH
9947: CALL_OW 67
// if IsOk ( Frank ) then
9951: LD_EXP 32
9955: PPUSH
9956: CALL_OW 302
9960: IFFALSE 10226
// begin DialogueOn ;
9962: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9966: LD_EXP 20
9970: PUSH
9971: LD_EXP 32
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9984: LD_EXP 32
9988: PPUSH
9989: LD_STRING D3F-Frank-1
9991: PPUSH
9992: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9996: LD_EXP 20
10000: PPUSH
10001: LD_STRING D3F-JMM-1
10003: PPUSH
10004: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10008: LD_EXP 32
10012: PPUSH
10013: LD_STRING D3F-Frank-2
10015: PPUSH
10016: CALL_OW 88
// case Query ( QFrank ) of 1 :
10020: LD_STRING QFrank
10022: PPUSH
10023: CALL_OW 97
10027: PUSH
10028: LD_INT 1
10030: DOUBLE
10031: EQUAL
10032: IFTRUE 10036
10034: GO 10059
10036: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10037: LD_EXP 20
10041: PPUSH
10042: LD_STRING D3Fa-JMM-1
10044: PPUSH
10045: CALL_OW 88
// us_scout := 1 ;
10049: LD_ADDR_EXP 8
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// end ; 2 :
10057: GO 10222
10059: LD_INT 2
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10189
10067: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10068: LD_EXP 20
10072: PPUSH
10073: LD_STRING D3Fb-JMM-1
10075: PPUSH
10076: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10080: LD_EXP 32
10084: PPUSH
10085: LD_STRING D3Fb-Frank-1
10087: PPUSH
10088: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10092: LD_STRING QFrank2
10094: PPUSH
10095: CALL_OW 97
10099: PUSH
10100: LD_INT 1
10102: DOUBLE
10103: EQUAL
10104: IFTRUE 10108
10106: GO 10155
10108: POP
// begin us_scout := 2 ;
10109: LD_ADDR_EXP 8
10113: PUSH
10114: LD_INT 2
10116: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10117: LD_EXP 20
10121: PPUSH
10122: LD_STRING D3Fba-JMM-1
10124: PPUSH
10125: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10129: LD_EXP 32
10133: PPUSH
10134: LD_STRING D3Fba-Frank-1
10136: PPUSH
10137: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10141: LD_EXP 20
10145: PPUSH
10146: LD_STRING D3Fba-JMM-2
10148: PPUSH
10149: CALL_OW 88
// end ; 2 :
10153: GO 10187
10155: LD_INT 2
10157: DOUBLE
10158: EQUAL
10159: IFTRUE 10163
10161: GO 10186
10163: POP
// begin us_scout := 0 ;
10164: LD_ADDR_EXP 8
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10172: LD_EXP 20
10176: PPUSH
10177: LD_STRING D3Fbb-JMM-1
10179: PPUSH
10180: CALL_OW 88
// end ; end ;
10184: GO 10187
10186: POP
// end ; 3 :
10187: GO 10222
10189: LD_INT 3
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10221
10197: POP
// begin us_scout := - 1 ;
10198: LD_ADDR_EXP 8
10202: PUSH
10203: LD_INT 1
10205: NEG
10206: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10207: LD_EXP 20
10211: PPUSH
10212: LD_STRING D3Fc-JMM-1
10214: PPUSH
10215: CALL_OW 88
// end ; end ;
10219: GO 10222
10221: POP
// DialogueOff ;
10222: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10226: LD_EXP 8
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: IN
10242: IFFALSE 10246
// exit ;
10244: GO 11893
// if us_scout in [ 1 , 2 ] then
10246: LD_EXP 8
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: IN
10261: IFFALSE 10960
// begin if IsInUnit ( Frank ) then
10263: LD_EXP 32
10267: PPUSH
10268: CALL_OW 310
10272: IFFALSE 10283
// ComExitBuilding ( Frank ) ;
10274: LD_EXP 32
10278: PPUSH
10279: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10283: LD_EXP 32
10287: PPUSH
10288: CALL_OW 311
10292: IFFALSE 10303
// ComExitVehicle ( Frank ) ;
10294: LD_EXP 32
10298: PPUSH
10299: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10303: LD_EXP 32
10307: PPUSH
10308: LD_INT 4
10310: PPUSH
10311: CALL_OW 235
// wait ( 0 0$1 ) ;
10315: LD_INT 35
10317: PPUSH
10318: CALL_OW 67
// if us_scout = 2 then
10322: LD_EXP 8
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: IFFALSE 10698
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10332: LD_EXP 32
10336: PPUSH
10337: LD_INT 75
10339: PPUSH
10340: LD_INT 63
10342: PPUSH
10343: CALL_OW 111
// AddComHold ( Frank ) ;
10347: LD_EXP 32
10351: PPUSH
10352: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10356: LD_EXP 32
10360: PPUSH
10361: LD_INT 770
10363: PPUSH
10364: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10368: LD_EXP 32
10372: PPUSH
10373: LD_INT 100
10375: PPUSH
10376: LD_INT 75
10378: PPUSH
10379: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10383: LD_EXP 32
10387: PPUSH
10388: LD_INT 123
10390: PPUSH
10391: LD_INT 103
10393: PPUSH
10394: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10398: LD_EXP 32
10402: PPUSH
10403: LD_INT 138
10405: PPUSH
10406: LD_INT 108
10408: PPUSH
10409: CALL_OW 171
// AddComHold ( Frank ) ;
10413: LD_EXP 32
10417: PPUSH
10418: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10422: LD_INT 35
10424: PPUSH
10425: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10429: LD_EXP 32
10433: PPUSH
10434: LD_INT 138
10436: PPUSH
10437: LD_INT 108
10439: PPUSH
10440: CALL_OW 307
10444: IFFALSE 10422
// AddComMoveXY ( Frank , 125 , 132 ) ;
10446: LD_EXP 32
10450: PPUSH
10451: LD_INT 125
10453: PPUSH
10454: LD_INT 132
10456: PPUSH
10457: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10461: LD_INT 35
10463: PPUSH
10464: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10468: LD_INT 1
10470: PPUSH
10471: LD_EXP 32
10475: PPUSH
10476: CALL_OW 292
10480: PUSH
10481: LD_EXP 32
10485: PPUSH
10486: LD_INT 7
10488: PPUSH
10489: CALL_OW 296
10493: PUSH
10494: LD_INT 7
10496: LESS
10497: OR
10498: IFFALSE 10461
// DialogueOn ;
10500: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10504: LD_EXP 32
10508: PPUSH
10509: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10513: LD_INT 10
10515: PPUSH
10516: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10520: LD_EXP 20
10524: PPUSH
10525: LD_STRING D4Fa-JMM-1
10527: PPUSH
10528: CALL_OW 88
// for i in points do
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: LD_VAR 0 2
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10601
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10545: LD_VAR 0 1
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 1
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: LD_INT 20
10568: NEG
10569: PPUSH
10570: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10574: LD_VAR 0 1
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 331
// end ;
10599: GO 10542
10601: POP
10602: POP
// dwait ( 0 0$0.5 ) ;
10603: LD_INT 18
10605: PPUSH
10606: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10610: LD_INT 42
10612: PPUSH
10613: LD_INT 27
10615: PPUSH
10616: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10620: LD_EXP 32
10624: PPUSH
10625: LD_STRING D4Fa-Frank-1
10627: PPUSH
10628: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10632: LD_INT 18
10634: PPUSH
10635: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10639: LD_EXP 20
10643: PPUSH
10644: LD_STRING D4Fa-JMM-2
10646: PPUSH
10647: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10651: LD_INT 118
10653: PPUSH
10654: LD_INT 80
10656: PPUSH
10657: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10661: LD_EXP 32
10665: PPUSH
10666: LD_STRING D4Fa-Frank-2
10668: PPUSH
10669: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10673: LD_INT 10
10675: PPUSH
10676: CALL_OW 68
// DialogueOff ;
10680: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10684: LD_EXP 32
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 235
// end else
10696: GO 10960
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10698: LD_INT 2
10700: PPUSH
10701: LD_INT 4
10703: PPUSH
10704: LD_INT 2
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10714: LD_EXP 32
10718: PPUSH
10719: LD_INT 75
10721: PPUSH
10722: LD_INT 63
10724: PPUSH
10725: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10729: LD_EXP 32
10733: PPUSH
10734: LD_INT 175
10736: PPUSH
10737: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10741: LD_EXP 32
10745: PPUSH
10746: LD_INT 102
10748: PPUSH
10749: LD_INT 76
10751: PPUSH
10752: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10756: LD_EXP 32
10760: PPUSH
10761: LD_INT 108
10763: PPUSH
10764: LD_INT 70
10766: PPUSH
10767: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10771: LD_INT 35
10773: PPUSH
10774: CALL_OW 67
// until See ( 2 , Frank ) ;
10778: LD_INT 2
10780: PPUSH
10781: LD_EXP 32
10785: PPUSH
10786: CALL_OW 292
10790: IFFALSE 10771
// ComMoveXY ( Frank , 112 , 118 ) ;
10792: LD_EXP 32
10796: PPUSH
10797: LD_INT 112
10799: PPUSH
10800: LD_INT 118
10802: PPUSH
10803: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10807: LD_EXP 32
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 750
10819: GREATEREQUAL
10820: IFFALSE 10834
// SetLives ( Frank , 700 ) ;
10822: LD_EXP 32
10826: PPUSH
10827: LD_INT 700
10829: PPUSH
10830: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10834: LD_INT 35
10836: PPUSH
10837: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10841: LD_INT 1
10843: PPUSH
10844: LD_EXP 32
10848: PPUSH
10849: CALL_OW 292
10853: PUSH
10854: LD_EXP 32
10858: PPUSH
10859: LD_INT 7
10861: PPUSH
10862: CALL_OW 296
10866: PUSH
10867: LD_INT 17
10869: LESS
10870: OR
10871: IFFALSE 10834
// DialogueOn ;
10873: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10877: LD_EXP 32
10881: PPUSH
10882: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10886: LD_EXP 32
10890: PPUSH
10891: LD_STRING D4Fb-Frank-1
10893: PPUSH
10894: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10898: LD_EXP 20
10902: PPUSH
10903: LD_STRING D4Fb-JMM-1
10905: PPUSH
10906: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10910: LD_INT 2
10912: PPUSH
10913: LD_STRING D4Fb-FSci1-1
10915: PPUSH
10916: CALL 15541 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10920: LD_EXP 32
10924: PPUSH
10925: LD_STRING D4Fb-Frank-2
10927: PPUSH
10928: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10932: LD_EXP 20
10936: PPUSH
10937: LD_STRING D4Fb-JMM-2
10939: PPUSH
10940: CALL_OW 88
// DialogueOff ;
10944: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10948: LD_EXP 32
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10960: LD_EXP 33
10964: PPUSH
10965: CALL_OW 302
10969: PUSH
10970: LD_EXP 32
10974: NOT
10975: AND
10976: IFFALSE 11124
// begin DialogueOn ;
10978: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10982: LD_EXP 20
10986: PUSH
10987: LD_EXP 33
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11000: LD_EXP 33
11004: PPUSH
11005: LD_STRING D3Y-Yam-1
11007: PPUSH
11008: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11012: LD_EXP 20
11016: PPUSH
11017: LD_STRING D3Y-JMM-1
11019: PPUSH
11020: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11024: LD_EXP 33
11028: PPUSH
11029: LD_STRING D3Y-Yam-2
11031: PPUSH
11032: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11036: LD_STRING QYamoko
11038: PPUSH
11039: CALL_OW 97
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11087
11052: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11053: LD_EXP 20
11057: PPUSH
11058: LD_STRING D3Ya-JMM-1
11060: PPUSH
11061: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11065: LD_EXP 33
11069: PPUSH
11070: LD_STRING D3Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// us_scout := 1 ;
11077: LD_ADDR_EXP 8
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// end ; 2 :
11085: GO 11120
11087: LD_INT 2
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11119
11095: POP
// begin us_scout := - 1 ;
11096: LD_ADDR_EXP 8
11100: PUSH
11101: LD_INT 1
11103: NEG
11104: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11105: LD_EXP 20
11109: PPUSH
11110: LD_STRING D3Yb-JMM-1
11112: PPUSH
11113: CALL_OW 88
// end ; end ;
11117: GO 11120
11119: POP
// DialogueOff ;
11120: CALL_OW 7
// end ; if Frank then
11124: LD_EXP 32
11128: IFFALSE 11132
// exit ;
11130: GO 11893
// if us_scout in [ - 1 , 0 ] then
11132: LD_EXP 8
11136: PUSH
11137: LD_INT 1
11139: NEG
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: IN
11148: IFFALSE 11152
// exit ;
11150: GO 11893
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11152: LD_ADDR_EXP 8
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: LD_OWVAR 67
11175: ARRAY
11176: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11177: LD_EXP 8
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: LD_INT 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: IN
11192: IFFALSE 11893
// begin if IsInUnit ( Kikuchi ) then
11194: LD_EXP 33
11198: PPUSH
11199: CALL_OW 310
11203: IFFALSE 11214
// ComExitBuilding ( Kikuchi ) ;
11205: LD_EXP 33
11209: PPUSH
11210: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11214: LD_EXP 33
11218: PPUSH
11219: CALL_OW 311
11223: IFFALSE 11234
// ComExitVehicle ( Kikuchi ) ;
11225: LD_EXP 33
11229: PPUSH
11230: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_INT 4
11241: PPUSH
11242: CALL_OW 235
// wait ( 0 0$1 ) ;
11246: LD_INT 35
11248: PPUSH
11249: CALL_OW 67
// if us_scout = 2 then
11253: LD_EXP 8
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: IFFALSE 11641
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11263: LD_EXP 33
11267: PPUSH
11268: LD_INT 75
11270: PPUSH
11271: LD_INT 63
11273: PPUSH
11274: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11278: LD_EXP 33
11282: PPUSH
11283: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11287: LD_EXP 33
11291: PPUSH
11292: LD_INT 770
11294: PPUSH
11295: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11299: LD_EXP 33
11303: PPUSH
11304: LD_INT 100
11306: PPUSH
11307: LD_INT 75
11309: PPUSH
11310: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11314: LD_EXP 33
11318: PPUSH
11319: LD_INT 123
11321: PPUSH
11322: LD_INT 103
11324: PPUSH
11325: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11329: LD_EXP 33
11333: PPUSH
11334: LD_INT 138
11336: PPUSH
11337: LD_INT 108
11339: PPUSH
11340: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11344: LD_EXP 33
11348: PPUSH
11349: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11353: LD_INT 35
11355: PPUSH
11356: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11360: LD_EXP 33
11364: PPUSH
11365: LD_INT 138
11367: PPUSH
11368: LD_INT 108
11370: PPUSH
11371: CALL_OW 307
11375: IFFALSE 11353
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11377: LD_EXP 33
11381: PPUSH
11382: LD_INT 125
11384: PPUSH
11385: LD_INT 132
11387: PPUSH
11388: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11392: LD_INT 35
11394: PPUSH
11395: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11399: LD_INT 1
11401: PPUSH
11402: LD_EXP 33
11406: PPUSH
11407: CALL_OW 292
11411: PUSH
11412: LD_EXP 33
11416: PPUSH
11417: LD_INT 7
11419: PPUSH
11420: CALL_OW 296
11424: PUSH
11425: LD_INT 7
11427: LESS
11428: OR
11429: IFFALSE 11392
// DialogueOn ;
11431: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11435: LD_EXP 33
11439: PPUSH
11440: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11444: LD_INT 10
11446: PPUSH
11447: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11451: LD_EXP 33
11455: PPUSH
11456: LD_STRING D4Ya-Yam-1
11458: PPUSH
11459: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11463: LD_EXP 20
11467: PPUSH
11468: LD_STRING D4Ya-JMM-1
11470: PPUSH
11471: CALL_OW 88
// for i in points do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 2
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11544
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11488: LD_VAR 0 1
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 1
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: LD_INT 20
11511: NEG
11512: PPUSH
11513: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11517: LD_VAR 0 1
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PPUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 2
11533: ARRAY
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 331
// end ;
11542: GO 11485
11544: POP
11545: POP
// dwait ( 0 0$0.5 ) ;
11546: LD_INT 18
11548: PPUSH
11549: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11553: LD_INT 42
11555: PPUSH
11556: LD_INT 27
11558: PPUSH
11559: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11563: LD_EXP 33
11567: PPUSH
11568: LD_STRING D4Ya-Yam-2
11570: PPUSH
11571: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11575: LD_INT 18
11577: PPUSH
11578: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11582: LD_INT 118
11584: PPUSH
11585: LD_INT 80
11587: PPUSH
11588: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11592: LD_EXP 20
11596: PPUSH
11597: LD_STRING D4Ya-JMM-2
11599: PPUSH
11600: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11604: LD_EXP 33
11608: PPUSH
11609: LD_STRING D4Ya-Yam-3
11611: PPUSH
11612: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11616: LD_INT 10
11618: PPUSH
11619: CALL_OW 68
// DialogueOff ;
11623: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11627: LD_EXP 33
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 235
// end else
11639: GO 11893
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11641: LD_INT 2
11643: PPUSH
11644: LD_INT 4
11646: PPUSH
11647: LD_INT 2
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11657: LD_EXP 33
11661: PPUSH
11662: LD_INT 75
11664: PPUSH
11665: LD_INT 63
11667: PPUSH
11668: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11672: LD_EXP 33
11676: PPUSH
11677: LD_INT 175
11679: PPUSH
11680: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11684: LD_EXP 33
11688: PPUSH
11689: LD_INT 102
11691: PPUSH
11692: LD_INT 76
11694: PPUSH
11695: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11699: LD_EXP 33
11703: PPUSH
11704: LD_INT 108
11706: PPUSH
11707: LD_INT 70
11709: PPUSH
11710: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11714: LD_INT 35
11716: PPUSH
11717: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11721: LD_INT 2
11723: PPUSH
11724: LD_EXP 33
11728: PPUSH
11729: CALL_OW 292
11733: IFFALSE 11714
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11735: LD_EXP 33
11739: PPUSH
11740: LD_INT 112
11742: PPUSH
11743: LD_INT 118
11745: PPUSH
11746: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11750: LD_EXP 33
11754: PPUSH
11755: CALL_OW 256
11759: PUSH
11760: LD_INT 750
11762: GREATEREQUAL
11763: IFFALSE 11777
// SetLives ( Kikuchi , 700 ) ;
11765: LD_EXP 33
11769: PPUSH
11770: LD_INT 700
11772: PPUSH
11773: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11777: LD_INT 35
11779: PPUSH
11780: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11784: LD_INT 1
11786: PPUSH
11787: LD_EXP 33
11791: PPUSH
11792: CALL_OW 292
11796: PUSH
11797: LD_EXP 33
11801: PPUSH
11802: LD_INT 7
11804: PPUSH
11805: CALL_OW 296
11809: PUSH
11810: LD_INT 17
11812: LESS
11813: OR
11814: IFFALSE 11777
// DialogueOn ;
11816: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11820: LD_EXP 33
11824: PPUSH
11825: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11829: LD_EXP 33
11833: PPUSH
11834: LD_STRING D4Yb-Yam-1
11836: PPUSH
11837: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11841: LD_EXP 20
11845: PPUSH
11846: LD_STRING D4Yb-JMM-1
11848: PPUSH
11849: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11853: LD_EXP 33
11857: PPUSH
11858: LD_STRING D4Yb-Yam-2
11860: PPUSH
11861: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11865: LD_EXP 20
11869: PPUSH
11870: LD_STRING D4Yb-JMM-2
11872: PPUSH
11873: CALL_OW 88
// DialogueOff ;
11877: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11881: LD_EXP 33
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 235
// end ; end ; end ;
11893: PPOPN 2
11895: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11896: LD_EXP 6
11900: IFFALSE 12933
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
// begin enable ;
11911: ENABLE
// if not seen [ 1 ] then
11912: LD_EXP 9
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: NOT
11921: IFFALSE 12101
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: LD_INT 22
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 11
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 33
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 69
11974: ST_TO_ADDR
// if tmp then
11975: LD_VAR 0 2
11979: IFFALSE 12101
// for i in tmp do
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_VAR 0 2
11990: PUSH
11991: FOR_IN
11992: IFFALSE 12099
// if See ( 1 , i ) then
11994: LD_INT 1
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 292
12006: IFFALSE 12097
// begin seen := Replace ( seen , 1 , true ) ;
12008: LD_ADDR_EXP 9
12012: PUSH
12013: LD_EXP 9
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 1
12028: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12029: LD_INT 1
12031: PPUSH
12032: CALL 15363 0 1
12036: IFFALSE 12097
// begin DialogueOn ;
12038: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12058: LD_ADDR_VAR 0 3
12062: PUSH
12063: LD_INT 1
12065: PPUSH
12066: LD_STRING D5a-Sol2-1
12068: PPUSH
12069: CALL 15541 0 2
12073: ST_TO_ADDR
// if not un then
12074: LD_VAR 0 3
12078: NOT
12079: IFFALSE 12091
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12081: LD_INT 2
12083: PPUSH
12084: LD_STRING D5a-FSol2-1
12086: PPUSH
12087: CALL 15541 0 2
// DialogueOff ;
12091: CALL_OW 7
// break ;
12095: GO 12099
// end ; end ;
12097: GO 11991
12099: POP
12100: POP
// end ; if not seen [ 2 ] then
12101: LD_EXP 9
12105: PUSH
12106: LD_INT 2
12108: ARRAY
12109: NOT
12110: IFFALSE 12335
// begin can_kamikazed := true ;
12112: LD_ADDR_EXP 10
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 25
12137: PUSH
12138: LD_INT 17
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// if tmp then
12154: LD_VAR 0 2
12158: IFFALSE 12335
// for i in tmp do
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_VAR 0 2
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12333
// if See ( 1 , i ) then
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 292
12185: IFFALSE 12331
// begin seen := Replace ( seen , 2 , true ) ;
12187: LD_ADDR_EXP 9
12191: PUSH
12192: LD_EXP 9
12196: PPUSH
12197: LD_INT 2
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12208: LD_INT 1
12210: PPUSH
12211: CALL 15363 0 1
12215: IFFALSE 12331
// begin DialogueOn ;
12217: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12230: LD_INT 10
12232: PPUSH
12233: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_STRING D5b-Sol1-1
12247: PPUSH
12248: CALL 15541 0 2
12252: ST_TO_ADDR
// if not un then
12253: LD_VAR 0 3
12257: NOT
12258: IFFALSE 12276
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 2
12267: PPUSH
12268: LD_STRING D5b-FSol1-1
12270: PPUSH
12271: CALL 15541 0 2
12275: ST_TO_ADDR
// if un then
12276: LD_VAR 0 3
12280: IFFALSE 12325
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12282: LD_ADDR_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_STRING D5b-Sol2-1
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: CALL 15767 0 3
12302: ST_TO_ADDR
// if not un2 then
12303: LD_VAR 0 4
12307: NOT
12308: IFFALSE 12325
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12310: LD_INT 2
12312: PPUSH
12313: LD_STRING D5b-FSol2-1
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: CALL 15767 0 3
// end ; DialogueOff ;
12325: CALL_OW 7
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12170
12333: POP
12334: POP
// end ; if not seen [ 3 ] then
12335: LD_EXP 9
12339: PUSH
12340: LD_INT 3
12342: ARRAY
12343: NOT
12344: IFFALSE 12518
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 33
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if tmp then
12380: LD_VAR 0 2
12384: IFFALSE 12518
// for i in tmp do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12516
// if See ( 1 , i ) then
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 292
12411: IFFALSE 12514
// begin seen := Replace ( seen , 3 , true ) ;
12413: LD_ADDR_EXP 9
12417: PUSH
12418: LD_EXP 9
12422: PPUSH
12423: LD_INT 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 1
12433: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12434: LD_INT 1
12436: PPUSH
12437: CALL 15363 0 1
12441: IFFALSE 12514
// begin DialogueOn ;
12443: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12456: LD_INT 10
12458: PPUSH
12459: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_STRING D8-Sol1-1
12473: PPUSH
12474: CALL 15541 0 2
12478: ST_TO_ADDR
// if not un then
12479: LD_VAR 0 3
12483: NOT
12484: IFFALSE 12496
// SayRand ( sex_female , D8-FSol1-1 ) ;
12486: LD_INT 2
12488: PPUSH
12489: LD_STRING D8-FSol1-1
12491: PPUSH
12492: CALL 15541 0 2
// Say ( JMM , D8-JMM-1 ) ;
12496: LD_EXP 20
12500: PPUSH
12501: LD_STRING D8-JMM-1
12503: PPUSH
12504: CALL_OW 88
// DialogueOff ;
12508: CALL_OW 7
// break ;
12512: GO 12516
// end ; end ;
12514: GO 12396
12516: POP
12517: POP
// end ; if not seen [ 4 ] then
12518: LD_EXP 9
12522: PUSH
12523: LD_INT 4
12525: ARRAY
12526: NOT
12527: IFFALSE 12689
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 33
12546: PUSH
12547: LD_INT 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: ST_TO_ADDR
// if tmp then
12563: LD_VAR 0 2
12567: IFFALSE 12689
// for i in tmp do
12569: LD_ADDR_VAR 0 1
12573: PUSH
12574: LD_VAR 0 2
12578: PUSH
12579: FOR_IN
12580: IFFALSE 12687
// if See ( 1 , i ) then
12582: LD_INT 1
12584: PPUSH
12585: LD_VAR 0 1
12589: PPUSH
12590: CALL_OW 292
12594: IFFALSE 12685
// begin seen := Replace ( seen , 4 , true ) ;
12596: LD_ADDR_EXP 9
12600: PUSH
12601: LD_EXP 9
12605: PPUSH
12606: LD_INT 4
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 1
12616: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12617: LD_INT 1
12619: PPUSH
12620: CALL 15363 0 1
12624: IFFALSE 12685
// begin DialogueOn ;
12626: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12639: LD_INT 10
12641: PPUSH
12642: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 1
12653: PPUSH
12654: LD_STRING D5a-Sol1-1
12656: PPUSH
12657: CALL 15541 0 2
12661: ST_TO_ADDR
// if not un then
12662: LD_VAR 0 3
12666: NOT
12667: IFFALSE 12679
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12669: LD_INT 2
12671: PPUSH
12672: LD_STRING D5a-FSol1-1
12674: PPUSH
12675: CALL 15541 0 2
// DialogueOff ;
12679: CALL_OW 7
// break ;
12683: GO 12687
// end ; end ;
12685: GO 12579
12687: POP
12688: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12689: LD_EXP 9
12693: PUSH
12694: LD_INT 5
12696: ARRAY
12697: NOT
12698: PUSH
12699: LD_EXP 9
12703: PUSH
12704: LD_INT 3
12706: ARRAY
12707: AND
12708: IFFALSE 12882
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 34
12727: PUSH
12728: LD_INT 31
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: ST_TO_ADDR
// if tmp then
12744: LD_VAR 0 2
12748: IFFALSE 12882
// for i in tmp do
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: FOR_IN
12761: IFFALSE 12880
// if See ( 1 , i ) then
12763: LD_INT 1
12765: PPUSH
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 292
12775: IFFALSE 12878
// begin seen := Replace ( seen , 5 , true ) ;
12777: LD_ADDR_EXP 9
12781: PUSH
12782: LD_EXP 9
12786: PPUSH
12787: LD_INT 5
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 1
12797: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12798: LD_INT 1
12800: PPUSH
12801: CALL 15363 0 1
12805: IFFALSE 12878
// begin DialogueOn ;
12807: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12811: LD_VAR 0 1
12815: PPUSH
12816: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12820: LD_INT 10
12822: PPUSH
12823: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D8a-Sol2-1
12837: PPUSH
12838: CALL 15541 0 2
12842: ST_TO_ADDR
// if not un then
12843: LD_VAR 0 3
12847: NOT
12848: IFFALSE 12860
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_STRING D8a-FSol2-1
12855: PPUSH
12856: CALL 15541 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12860: LD_EXP 20
12864: PPUSH
12865: LD_STRING D8a-JMM-1
12867: PPUSH
12868: CALL_OW 88
// DialogueOff ;
12872: CALL_OW 7
// break ;
12876: GO 12880
// end ; end ;
12878: GO 12760
12880: POP
12881: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12882: LD_EXP 9
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PUSH
12891: LD_EXP 9
12895: PUSH
12896: LD_INT 2
12898: ARRAY
12899: AND
12900: PUSH
12901: LD_EXP 9
12905: PUSH
12906: LD_INT 3
12908: ARRAY
12909: AND
12910: PUSH
12911: LD_EXP 9
12915: PUSH
12916: LD_INT 4
12918: ARRAY
12919: AND
12920: PUSH
12921: LD_EXP 9
12925: PUSH
12926: LD_INT 5
12928: ARRAY
12929: AND
12930: IFFALSE 12933
// disable ;
12932: DISABLE
// end ;
12933: PPOPN 4
12935: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12936: LD_EXP 10
12940: PUSH
12941: LD_EXP 11
12945: AND
12946: IFFALSE 13144
12948: GO 12950
12950: DISABLE
12951: LD_INT 0
12953: PPUSH
// begin DialogueOn ;
12954: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12958: LD_EXP 11
12962: PPUSH
12963: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_STRING D5c-Sol1-1
12977: PPUSH
12978: CALL 15541 0 2
12982: ST_TO_ADDR
// if not un then
12983: LD_VAR 0 1
12987: NOT
12988: IFFALSE 13006
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 2
12997: PPUSH
12998: LD_STRING D5c-FSol1-1
13000: PPUSH
13001: CALL 15541 0 2
13005: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13006: LD_EXP 20
13010: PPUSH
13011: LD_STRING D5c-JMM-1
13013: PPUSH
13014: CALL_OW 88
// if IsOk ( Lisa ) then
13018: LD_EXP 21
13022: PPUSH
13023: CALL_OW 302
13027: IFFALSE 13043
// Say ( Lisa , D5d-Lisa-1 ) else
13029: LD_EXP 21
13033: PPUSH
13034: LD_STRING D5d-Lisa-1
13036: PPUSH
13037: CALL_OW 88
13041: GO 13128
// if IsOk ( Cyrus ) then
13043: LD_EXP 24
13047: PPUSH
13048: CALL_OW 302
13052: IFFALSE 13068
// Say ( Cyrus , D5d-Cyrus-1 ) else
13054: LD_EXP 24
13058: PPUSH
13059: LD_STRING D5d-Cyrus-1
13061: PPUSH
13062: CALL_OW 88
13066: GO 13128
// if IsOk ( Gary ) then
13068: LD_EXP 31
13072: PPUSH
13073: CALL_OW 302
13077: IFFALSE 13093
// Say ( Gary , D5d-Gary-1 ) else
13079: LD_EXP 31
13083: PPUSH
13084: LD_STRING D5d-Gary-1
13086: PPUSH
13087: CALL_OW 88
13091: GO 13128
// if GetSex ( un ) = sex_male then
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 258
13102: PUSH
13103: LD_INT 1
13105: EQUAL
13106: IFFALSE 13122
// Say ( un , D5d-Sol1-1 ) else
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_STRING D5d-Sol1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13128
// begin DialogueOff ;
13122: CALL_OW 7
// exit ;
13126: GO 13144
// end ; Say ( JMM , D5d-JMM-1 ) ;
13128: LD_EXP 20
13132: PPUSH
13133: LD_STRING D5d-JMM-1
13135: PPUSH
13136: CALL_OW 88
// DialogueOff ;
13140: CALL_OW 7
// end ;
13144: PPOPN 1
13146: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 17
13152: PPUSH
13153: CALL_OW 294
13157: PUSH
13158: LD_INT 2
13160: GREATEREQUAL
13161: IFFALSE 13282
13163: GO 13165
13165: DISABLE
13166: LD_INT 0
13168: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13169: LD_INT 10
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: LD_INT 10
13180: NEG
13181: PPUSH
13182: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13186: LD_INT 10
13188: PPUSH
13189: LD_INT 5
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13199: LD_INT 10
13201: PPUSH
13202: LD_INT 5
13204: PPUSH
13205: CALL_OW 86
// DialogueOn ;
13209: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13213: LD_ADDR_VAR 0 1
13217: PUSH
13218: LD_INT 1
13220: PPUSH
13221: LD_STRING D6-Sci1-1
13223: PPUSH
13224: CALL 15541 0 2
13228: ST_TO_ADDR
// if un then
13229: LD_VAR 0 1
13233: IFFALSE 13271
// begin Say ( JMM , D6-JMM-1 ) ;
13235: LD_EXP 20
13239: PPUSH
13240: LD_STRING D6-JMM-1
13242: PPUSH
13243: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13247: LD_VAR 0 1
13251: PPUSH
13252: LD_STRING D6-Sci1-2
13254: PPUSH
13255: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13259: LD_EXP 20
13263: PPUSH
13264: LD_STRING D6-JMM-2
13266: PPUSH
13267: CALL_OW 88
// end ; DialogueOff ;
13271: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13275: LD_STRING M3
13277: PPUSH
13278: CALL_OW 337
// end ;
13282: PPOPN 1
13284: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13285: LD_OWVAR 1
13289: PUSH
13290: LD_INT 42000
13292: GREATEREQUAL
13293: PUSH
13294: LD_INT 2
13296: PPUSH
13297: LD_INT 169
13299: PPUSH
13300: LD_INT 90
13302: PPUSH
13303: LD_INT 10
13305: PPUSH
13306: CALL 54177 0 4
13310: PUSH
13311: LD_INT 4
13313: ARRAY
13314: PUSH
13315: LD_INT 0
13317: EQUAL
13318: PUSH
13319: LD_INT 45
13321: PPUSH
13322: CALL_OW 301
13326: OR
13327: PUSH
13328: LD_INT 45
13330: PPUSH
13331: CALL_OW 255
13335: PUSH
13336: LD_INT 1
13338: EQUAL
13339: OR
13340: AND
13341: PUSH
13342: LD_INT 94
13344: PPUSH
13345: CALL_OW 301
13349: NOT
13350: AND
13351: IFFALSE 14477
13353: GO 13355
13355: DISABLE
13356: LD_INT 0
13358: PPUSH
13359: PPUSH
13360: PPUSH
13361: PPUSH
// begin uc_side := 5 ;
13362: LD_ADDR_OWVAR 20
13366: PUSH
13367: LD_INT 5
13369: ST_TO_ADDR
// uc_nation := 2 ;
13370: LD_ADDR_OWVAR 21
13374: PUSH
13375: LD_INT 2
13377: ST_TO_ADDR
// InitHc ;
13378: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13382: LD_INT 1
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 8
13390: PPUSH
13391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13395: LD_ADDR_OWVAR 29
13399: PUSH
13400: LD_INT 12
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING SecondCharsGal
13417: ST_TO_ADDR
// hc_face_number := 7 ;
13418: LD_ADDR_OWVAR 34
13422: PUSH
13423: LD_INT 7
13425: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13426: LD_ADDR_EXP 45
13430: PUSH
13431: CALL_OW 44
13435: ST_TO_ADDR
// InitHc ;
13436: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 16
13445: PPUSH
13446: LD_INT 2
13448: PPUSH
13449: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13453: LD_ADDR_OWVAR 29
13457: PUSH
13458: LD_INT 12
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: ST_TO_ADDR
// hc_name :=  ;
13468: LD_ADDR_OWVAR 26
13472: PUSH
13473: LD_STRING 
13475: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13476: LD_ADDR_EXP 46
13480: PUSH
13481: CALL_OW 44
13485: ST_TO_ADDR
// InitHc ;
13486: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// until not InBattle ( 1 ) ;
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 463
13504: NOT
13505: IFFALSE 13490
// wait ( 0 0$5 ) ;
13507: LD_INT 175
13509: PPUSH
13510: CALL_OW 67
// DialogueOn ;
13514: CALL_OW 6
// InGameOn ;
13518: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 22
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 25
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 25
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 8
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: PUSH
13618: LD_EXP 20
13622: PUSH
13623: LD_EXP 21
13627: PUSH
13628: LD_EXP 22
13632: PUSH
13633: LD_EXP 23
13637: PUSH
13638: LD_EXP 24
13642: PUSH
13643: LD_EXP 25
13647: PUSH
13648: LD_EXP 26
13652: PUSH
13653: LD_EXP 27
13657: PUSH
13658: LD_EXP 28
13662: PUSH
13663: LD_EXP 30
13667: PUSH
13668: LD_EXP 31
13672: PUSH
13673: LD_EXP 32
13677: PUSH
13678: LD_EXP 33
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: DIFF
13698: PPUSH
13699: LD_INT 26
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 72
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: ST_TO_ADDR
// if not un and Brown then
13718: LD_VAR 0 1
13722: NOT
13723: PUSH
13724: LD_EXP 26
13728: AND
13729: IFFALSE 13741
// un := Brown ;
13731: LD_ADDR_VAR 0 1
13735: PUSH
13736: LD_EXP 26
13740: ST_TO_ADDR
// if un then
13741: LD_VAR 0 1
13745: IFFALSE 13771
// begin Say ( un , D7-Sol1-1 ) ;
13747: LD_VAR 0 1
13751: PPUSH
13752: LD_STRING D7-Sol1-1
13754: PPUSH
13755: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13759: LD_EXP 20
13763: PPUSH
13764: LD_STRING D7-JMM-1
13766: PPUSH
13767: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13771: LD_EXP 45
13775: PPUSH
13776: LD_STRING D7-Ar1-1
13778: PPUSH
13779: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13783: LD_EXP 20
13787: PPUSH
13788: LD_STRING D7-JMM-2
13790: PPUSH
13791: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13795: LD_EXP 45
13799: PPUSH
13800: LD_STRING D7-Ar1-2
13802: PPUSH
13803: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13807: LD_EXP 20
13811: PPUSH
13812: LD_STRING D7-JMM-3
13814: PPUSH
13815: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13819: LD_EXP 45
13823: PPUSH
13824: LD_STRING D7-Ar1-3
13826: PPUSH
13827: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13831: LD_EXP 20
13835: PPUSH
13836: LD_STRING D7-JMM-4
13838: PPUSH
13839: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13843: LD_EXP 45
13847: PPUSH
13848: LD_STRING D7-Ar1-4
13850: PPUSH
13851: CALL_OW 94
// InGameOff ;
13855: CALL_OW 9
// DialogueOff ;
13859: CALL_OW 7
// case Query ( QCameras ) of 1 :
13863: LD_STRING QCameras
13865: PPUSH
13866: CALL_OW 97
13870: PUSH
13871: LD_INT 1
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 13882
13879: POP
// ; 2 :
13880: GO 13896
13882: LD_INT 2
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13895
13890: POP
// exit ; end ;
13891: GO 14477
13893: GO 13896
13895: POP
// ChangeMissionObjectives ( MCar ) ;
13896: LD_STRING MCar
13898: PPUSH
13899: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13903: LD_INT 124
13905: PPUSH
13906: LD_INT 90
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 6
13914: NEG
13915: PPUSH
13916: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13920: LD_INT 124
13922: PPUSH
13923: LD_INT 90
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13933: LD_INT 12
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 424
// wait ( 3 ) ;
13943: LD_INT 3
13945: PPUSH
13946: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13950: LD_INT 124
13952: PPUSH
13953: LD_INT 90
13955: PPUSH
13956: CALL_OW 86
// cargo := false ;
13960: LD_ADDR_VAR 0 3
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_INT 12
13982: PPUSH
13983: LD_INT 32
13985: PUSH
13986: LD_INT 3
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: LD_INT 32
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 58
14005: PUSH
14006: EMPTY
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 70
14018: ST_TO_ADDR
// until cargo ;
14019: LD_VAR 0 3
14023: IFFALSE 13968
// cargo := cargo [ 1 ] ;
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14039: LD_VAR 0 3
14043: PPUSH
14044: LD_INT 5
14046: PPUSH
14047: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14051: LD_INT 12
14053: PPUSH
14054: LD_INT 0
14056: PPUSH
14057: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14061: LD_EXP 45
14065: PPUSH
14066: LD_INT 11
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14076: LD_EXP 46
14080: PPUSH
14081: LD_INT 11
14083: PPUSH
14084: LD_INT 0
14086: PPUSH
14087: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14091: LD_EXP 45
14095: PUSH
14096: LD_EXP 46
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: LD_INT 12
14107: PPUSH
14108: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14112: LD_EXP 45
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14126: LD_EXP 45
14130: PUSH
14131: LD_EXP 46
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: LD_INT 209
14142: PPUSH
14143: LD_INT 178
14145: PPUSH
14146: CALL_OW 171
// while ( true ) do
14150: LD_INT 1
14152: IFFALSE 14306
// begin wait ( 0 0$1 ) ;
14154: LD_INT 35
14156: PPUSH
14157: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14161: LD_EXP 45
14165: PPUSH
14166: CALL_OW 314
14170: NOT
14171: PUSH
14172: LD_EXP 46
14176: PPUSH
14177: CALL_OW 314
14181: NOT
14182: OR
14183: IFFALSE 14209
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14185: LD_EXP 45
14189: PUSH
14190: LD_EXP 46
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PPUSH
14199: LD_INT 209
14201: PPUSH
14202: LD_INT 178
14204: PPUSH
14205: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14209: LD_EXP 45
14213: PPUSH
14214: LD_INT 10
14216: PPUSH
14217: CALL_OW 308
14221: IFFALSE 14232
// RemoveUnit ( ar_mechanic ) ;
14223: LD_EXP 45
14227: PPUSH
14228: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14232: LD_EXP 46
14236: PPUSH
14237: LD_INT 10
14239: PPUSH
14240: CALL_OW 308
14244: IFFALSE 14255
// RemoveUnit ( ar_mechanic_friend ) ;
14246: LD_EXP 46
14250: PPUSH
14251: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 10
14262: PPUSH
14263: CALL_OW 308
14267: IFFALSE 14278
// RemoveUnit ( cargo ) ;
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14278: LD_EXP 45
14282: PPUSH
14283: CALL_OW 300
14287: NOT
14288: PUSH
14289: LD_EXP 46
14293: PPUSH
14294: CALL_OW 300
14298: NOT
14299: AND
14300: IFFALSE 14304
// break ;
14302: GO 14306
// end ;
14304: GO 14150
// wait ( 0 0$2 ) ;
14306: LD_INT 70
14308: PPUSH
14309: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14313: LD_EXP 45
14317: PPUSH
14318: LD_STRING D7a-Ar1-1
14320: PPUSH
14321: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 129
14332: PUSH
14333: LD_INT 10
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 103
14342: PUSH
14343: LD_INT 6
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 148
14352: PUSH
14353: LD_INT 47
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 155
14362: PUSH
14363: LD_INT 16
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
// if Difficulty = 1 then
14376: LD_OWVAR 67
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: IFFALSE 14421
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14386: LD_ADDR_VAR 0 4
14390: PUSH
14391: LD_VAR 0 4
14395: PUSH
14396: LD_INT 78
14398: PUSH
14399: LD_INT 7
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 104
14408: PUSH
14409: LD_INT 43
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: ADD
14420: ST_TO_ADDR
// for i in tmp do
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 4
14430: PUSH
14431: FOR_IN
14432: IFFALSE 14465
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14434: LD_VAR 0 2
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 2
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: LD_INT 9
14457: NEG
14458: PPUSH
14459: CALL_OW 330
14463: GO 14431
14465: POP
14466: POP
// CenterOnXY ( 129 , 10 ) ;
14467: LD_INT 129
14469: PPUSH
14470: LD_INT 10
14472: PPUSH
14473: CALL_OW 84
// end ;
14477: PPOPN 4
14479: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14480: LD_EXP 15
14484: PUSH
14485: LD_INT 21000
14487: MINUS
14488: PUSH
14489: LD_OWVAR 1
14493: LESSEQUAL
14494: IFFALSE 14534
14496: GO 14498
14498: DISABLE
// begin powell_warn := true ;
14499: LD_ADDR_EXP 16
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// DialogueOn ;
14507: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14511: LD_EXP 29
14515: PPUSH
14516: LD_STRING D9-Pow-1
14518: PPUSH
14519: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14523: LD_INT 10
14525: PPUSH
14526: CALL_OW 68
// DialogueOff ;
14530: CALL_OW 7
// end ;
14534: END
// every 0 0$1 trigger game_time <= tick do
14535: LD_EXP 15
14539: PUSH
14540: LD_OWVAR 1
14544: LESSEQUAL
14545: IFFALSE 14584
14547: GO 14549
14549: DISABLE
// begin DialogueOn ;
14550: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14554: LD_EXP 29
14558: PPUSH
14559: LD_STRING D9a-Pow-1
14561: PPUSH
14562: CALL_OW 94
// dwait ( 0 0$2 ) ;
14566: LD_INT 70
14568: PPUSH
14569: CALL_OW 68
// DialogueOff ;
14573: CALL_OW 7
// YouLost ( Command ) ;
14577: LD_STRING Command
14579: PPUSH
14580: CALL_OW 104
// end ;
14584: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14585: LD_INT 22
14587: PUSH
14588: LD_INT 2
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 30
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PUSH
14614: LD_INT 0
14616: EQUAL
14617: PUSH
14618: LD_EXP 20
14622: PPUSH
14623: CALL_OW 302
14627: AND
14628: IFFALSE 15360
14630: GO 14632
14632: DISABLE
14633: LD_INT 0
14635: PPUSH
// begin if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14636: LD_OWVAR 1
14640: PUSH
14641: LD_INT 199500
14643: PUSH
14644: LD_INT 178500
14646: PUSH
14647: LD_INT 168000
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: LD_OWVAR 67
14659: ARRAY
14660: LESS
14661: IFFALSE 14675
// AddMedal ( Time1 , 1 ) else
14663: LD_STRING Time1
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 101
14673: GO 14706
// if not powell_warn then
14675: LD_EXP 16
14679: NOT
14680: IFFALSE 14695
// AddMedal ( Time1 , - 1 ) else
14682: LD_STRING Time1
14684: PPUSH
14685: LD_INT 1
14687: NEG
14688: PPUSH
14689: CALL_OW 101
14693: GO 14706
// AddMedal ( Time1 , - 2 ) ;
14695: LD_STRING Time1
14697: PPUSH
14698: LD_INT 2
14700: NEG
14701: PPUSH
14702: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14706: LD_EXP 17
14710: PUSH
14711: LD_INT 5
14713: PUSH
14714: LD_INT 4
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_OWVAR 67
14729: ARRAY
14730: GREATEREQUAL
14731: IFFALSE 14746
// AddMedal ( Destroy , - 2 ) else
14733: LD_STRING Destroy
14735: PPUSH
14736: LD_INT 2
14738: NEG
14739: PPUSH
14740: CALL_OW 101
14744: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14746: LD_INT 22
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 50
14768: PUSH
14769: EMPTY
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: PUSH
14782: LD_INT 25
14784: GREATEREQUAL
14785: IFFALSE 14800
// AddMedal ( Destroy , - 1 ) else
14787: LD_STRING Destroy
14789: PPUSH
14790: LD_INT 1
14792: NEG
14793: PPUSH
14794: CALL_OW 101
14798: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14800: LD_INT 22
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 50
14822: PUSH
14823: EMPTY
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: PUSH
14836: LD_INT 15
14838: GREATEREQUAL
14839: IFFALSE 14853
// AddMedal ( Destroy , 1 ) else
14841: LD_STRING Destroy
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: CALL_OW 101
14851: GO 14863
// AddMedal ( Destroy , 2 ) ;
14853: LD_STRING Destroy
14855: PPUSH
14856: LD_INT 2
14858: PPUSH
14859: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14863: LD_EXP 13
14867: PPUSH
14868: LD_STRING 11_artifact_captured
14870: PPUSH
14871: CALL_OW 39
// if artifact_get then
14875: LD_EXP 13
14879: IFFALSE 14893
// AddMedal ( Artefact , 1 ) else
14881: LD_STRING Artefact
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 101
14891: GO 14904
// AddMedal ( Artefact , - 1 ) ;
14893: LD_STRING Artefact
14895: PPUSH
14896: LD_INT 1
14898: NEG
14899: PPUSH
14900: CALL_OW 101
// GiveMedals ( MAIN ) ;
14904: LD_STRING MAIN
14906: PPUSH
14907: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14911: LD_ADDR_EXP 19
14915: PUSH
14916: LD_EXP 19
14920: PPUSH
14921: LD_INT 51
14923: PUSH
14924: EMPTY
14925: LIST
14926: PPUSH
14927: CALL_OW 72
14931: ST_TO_ADDR
// tmp := JMM ^ selected ;
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_EXP 20
14941: PUSH
14942: LD_EXP 19
14946: ADD
14947: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14957: LD_VAR 0 1
14961: PUSH
14962: LD_EXP 20
14966: PUSH
14967: LD_EXP 21
14971: PUSH
14972: LD_EXP 22
14976: PUSH
14977: LD_EXP 23
14981: PUSH
14982: LD_EXP 24
14986: PUSH
14987: LD_EXP 25
14991: PUSH
14992: LD_EXP 26
14996: PUSH
14997: LD_EXP 27
15001: PUSH
15002: LD_EXP 28
15006: PUSH
15007: LD_EXP 30
15011: PUSH
15012: LD_EXP 31
15016: PUSH
15017: LD_EXP 32
15021: PUSH
15022: LD_EXP 33
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: DIFF
15042: PPUSH
15043: LD_STRING 11c_others
15045: PPUSH
15046: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15050: LD_EXP 20
15054: PPUSH
15055: LD_EXP 3
15059: PUSH
15060: LD_STRING JMM
15062: STR
15063: PPUSH
15064: CALL_OW 38
// if Lisa then
15068: LD_EXP 21
15072: IFFALSE 15092
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15074: LD_EXP 21
15078: PPUSH
15079: LD_EXP 3
15083: PUSH
15084: LD_STRING Lisa
15086: STR
15087: PPUSH
15088: CALL_OW 38
// if Donaldson then
15092: LD_EXP 22
15096: IFFALSE 15116
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15098: LD_EXP 22
15102: PPUSH
15103: LD_EXP 3
15107: PUSH
15108: LD_STRING Donaldson
15110: STR
15111: PPUSH
15112: CALL_OW 38
// if Bobby then
15116: LD_EXP 23
15120: IFFALSE 15140
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15122: LD_EXP 23
15126: PPUSH
15127: LD_EXP 3
15131: PUSH
15132: LD_STRING Bobby
15134: STR
15135: PPUSH
15136: CALL_OW 38
// if Cyrus then
15140: LD_EXP 24
15144: IFFALSE 15164
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15146: LD_EXP 24
15150: PPUSH
15151: LD_EXP 3
15155: PUSH
15156: LD_STRING Cyrus
15158: STR
15159: PPUSH
15160: CALL_OW 38
// if Denis then
15164: LD_EXP 25
15168: IFFALSE 15188
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15170: LD_EXP 25
15174: PPUSH
15175: LD_EXP 3
15179: PUSH
15180: LD_STRING Denis
15182: STR
15183: PPUSH
15184: CALL_OW 38
// if Brown then
15188: LD_EXP 26
15192: IFFALSE 15212
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15194: LD_EXP 26
15198: PPUSH
15199: LD_EXP 3
15203: PUSH
15204: LD_STRING Brown
15206: STR
15207: PPUSH
15208: CALL_OW 38
// if Gladstone then
15212: LD_EXP 27
15216: IFFALSE 15236
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15218: LD_EXP 27
15222: PPUSH
15223: LD_EXP 3
15227: PUSH
15228: LD_STRING Gladstone
15230: STR
15231: PPUSH
15232: CALL_OW 38
// if Houten then
15236: LD_EXP 28
15240: IFFALSE 15260
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15242: LD_EXP 28
15246: PPUSH
15247: LD_EXP 3
15251: PUSH
15252: LD_STRING Houten
15254: STR
15255: PPUSH
15256: CALL_OW 38
// if Cornel then
15260: LD_EXP 30
15264: IFFALSE 15284
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15266: LD_EXP 30
15270: PPUSH
15271: LD_EXP 3
15275: PUSH
15276: LD_STRING Cornell
15278: STR
15279: PPUSH
15280: CALL_OW 38
// if Gary then
15284: LD_EXP 31
15288: IFFALSE 15308
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15290: LD_EXP 31
15294: PPUSH
15295: LD_EXP 3
15299: PUSH
15300: LD_STRING Gary
15302: STR
15303: PPUSH
15304: CALL_OW 38
// if Frank then
15308: LD_EXP 32
15312: IFFALSE 15332
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15314: LD_EXP 32
15318: PPUSH
15319: LD_EXP 3
15323: PUSH
15324: LD_STRING Frank
15326: STR
15327: PPUSH
15328: CALL_OW 38
// if Kikuchi then
15332: LD_EXP 33
15336: IFFALSE 15356
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15338: LD_EXP 33
15342: PPUSH
15343: LD_EXP 3
15347: PUSH
15348: LD_STRING Kikuchi
15350: STR
15351: PPUSH
15352: CALL_OW 38
// YouWin ;
15356: CALL_OW 103
// end ;
15360: PPOPN 1
15362: END
// export function CanSayRand ( side ) ; begin
15363: LD_INT 0
15365: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15366: LD_ADDR_VAR 0 2
15370: PUSH
15371: LD_INT 52
15373: PUSH
15374: EMPTY
15375: LIST
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 1
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 25
15414: PUSH
15415: LD_INT 3
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 25
15424: PUSH
15425: LD_INT 4
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: PUSH
15449: LD_EXP 20
15453: PUSH
15454: LD_EXP 32
15458: PUSH
15459: LD_EXP 21
15463: PUSH
15464: LD_EXP 22
15468: PUSH
15469: LD_EXP 23
15473: PUSH
15474: LD_EXP 24
15478: PUSH
15479: LD_EXP 25
15483: PUSH
15484: LD_EXP 26
15488: PUSH
15489: LD_EXP 27
15493: PUSH
15494: LD_EXP 28
15498: PUSH
15499: LD_EXP 29
15503: PUSH
15504: LD_EXP 30
15508: PUSH
15509: LD_EXP 31
15513: PUSH
15514: LD_EXP 33
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: DIFF
15535: ST_TO_ADDR
// end ;
15536: LD_VAR 0 2
15540: RET
// export function SayRand ( sex , dial ) ; begin
15541: LD_INT 0
15543: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15544: LD_ADDR_VAR 0 3
15548: PUSH
15549: LD_INT 52
15551: PUSH
15552: EMPTY
15553: LIST
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 26
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 25
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 25
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 25
15612: PUSH
15613: LD_INT 4
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: LD_EXP 20
15642: PUSH
15643: LD_EXP 32
15647: PUSH
15648: LD_EXP 21
15652: PUSH
15653: LD_EXP 22
15657: PUSH
15658: LD_EXP 23
15662: PUSH
15663: LD_EXP 24
15667: PUSH
15668: LD_EXP 25
15672: PUSH
15673: LD_EXP 26
15677: PUSH
15678: LD_EXP 27
15682: PUSH
15683: LD_EXP 28
15687: PUSH
15688: LD_EXP 29
15692: PUSH
15693: LD_EXP 30
15697: PUSH
15698: LD_EXP 31
15702: PUSH
15703: LD_EXP 33
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: DIFF
15724: ST_TO_ADDR
// if not result then
15725: LD_VAR 0 3
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15762
// result := result [ 1 ] ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: ST_TO_ADDR
// Say ( result , dial ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: CALL_OW 88
// end ;
15762: LD_VAR 0 3
15766: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15767: LD_INT 0
15769: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15770: LD_ADDR_VAR 0 4
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 26
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 2
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 69
15856: PUSH
15857: LD_EXP 20
15861: PUSH
15862: LD_EXP 32
15866: PUSH
15867: LD_EXP 21
15871: PUSH
15872: LD_EXP 22
15876: PUSH
15877: LD_EXP 23
15881: PUSH
15882: LD_EXP 24
15886: PUSH
15887: LD_EXP 25
15891: PUSH
15892: LD_EXP 26
15896: PUSH
15897: LD_EXP 27
15901: PUSH
15902: LD_EXP 28
15906: PUSH
15907: LD_EXP 29
15911: PUSH
15912: LD_EXP 30
15916: PUSH
15917: LD_EXP 31
15921: PUSH
15922: LD_EXP 33
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: PUSH
15943: LD_VAR 0 3
15947: ADD
15948: DIFF
15949: ST_TO_ADDR
// if not result then
15950: LD_VAR 0 4
15954: NOT
15955: IFFALSE 15959
// exit ;
15957: GO 15987
// result := result [ 1 ] ;
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 4
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: ST_TO_ADDR
// Say ( result , dial ) ;
15973: LD_VAR 0 4
15977: PPUSH
15978: LD_VAR 0 2
15982: PPUSH
15983: CALL_OW 88
// end ; end_of_file
15987: LD_VAR 0 4
15991: RET
// export function CustomEvent ( event ) ; begin
15992: LD_INT 0
15994: PPUSH
// end ;
15995: LD_VAR 0 2
15999: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 255
16009: PUSH
16010: LD_INT 1
16012: EQUAL
16013: IFFALSE 16023
// artifact_get := true ;
16015: LD_ADDR_EXP 13
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 2
16035: EQUAL
16036: IFFALSE 16054
// begin artifact_get := false ;
16038: LD_ADDR_EXP 13
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
// artifact_stolen := true ;
16046: LD_ADDR_EXP 12
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16054: LD_ADDR_EXP 14
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// end ;
16062: PPOPN 2
16064: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16065: LD_ADDR_EXP 14
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// end ;
16073: PPOPN 2
16075: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16076: LD_VAR 0 1
16080: PUSH
16081: LD_EXP 20
16085: EQUAL
16086: IFFALSE 16097
// begin YouLost ( JMM ) ;
16088: LD_STRING JMM
16090: PPUSH
16091: CALL_OW 104
// exit ;
16095: GO 16229
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16097: LD_VAR 0 1
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: LD_INT 25
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 25
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 25
16147: PUSH
16148: LD_INT 3
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 25
16157: PUSH
16158: LD_INT 4
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 25
16177: PUSH
16178: LD_INT 8
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: IN
16204: IFFALSE 16220
// loses_counter := loses_counter + 1 ;
16206: LD_ADDR_EXP 17
16210: PUSH
16211: LD_EXP 17
16215: PUSH
16216: LD_INT 1
16218: PLUS
16219: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL 43678 0 1
// end ;
16229: PPOPN 1
16231: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_VAR 0 2
16241: PPUSH
16242: CALL 45790 0 2
// end ;
16246: PPOPN 2
16248: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL 45099 0 1
// end ;
16258: PPOPN 1
16260: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16261: LD_VAR 0 1
16265: PPUSH
16266: LD_VAR 0 2
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_VAR 0 4
16280: PPUSH
16281: LD_VAR 0 5
16285: PPUSH
16286: CALL 42994 0 5
// end ;
16290: PPOPN 5
16292: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16293: LD_VAR 0 1
16297: PPUSH
16298: LD_VAR 0 2
16302: PPUSH
16303: CALL 42590 0 2
// end ;
16307: PPOPN 2
16309: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 247
16319: PUSH
16320: LD_INT 2
16322: EQUAL
16323: IFFALSE 16327
// exit ;
16325: GO 16344
// if not kamikazed then
16327: LD_EXP 11
16331: NOT
16332: IFFALSE 16344
// kamikazed := unit ;
16334: LD_ADDR_EXP 11
16338: PUSH
16339: LD_VAR 0 1
16343: ST_TO_ADDR
// end ;
16344: PPOPN 1
16346: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16347: LD_INT 0
16349: PPUSH
16350: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: CALL 42428 0 4
// end ;
16375: PPOPN 6
16377: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_VAR 0 2
16387: PPUSH
16388: LD_VAR 0 3
16392: PPUSH
16393: CALL 42203 0 3
// end ;
16397: PPOPN 3
16399: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_VAR 0 2
16409: PPUSH
16410: CALL 43374 0 2
// end ;
16414: PPOPN 2
16416: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL 41897 0 2
// end ;
16431: PPOPN 2
16433: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16434: LD_VAR 0 1
16438: PPUSH
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL 42088 0 2
// end ;
16448: PPOPN 2
16450: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL 44858 0 1
// end ;
16460: PPOPN 1
16462: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL 46051 0 2
// end ;
16477: PPOPN 2
16479: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_VAR 0 4
16499: PPUSH
16500: CALL 46267 0 4
// end ;
16504: PPOPN 4
16506: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL 89263 0 1
// end ; end_of_file
16516: PPOPN 1
16518: END
// every 0 0$1 trigger game do
16519: LD_EXP 2
16523: IFFALSE 16553
16525: GO 16527
16527: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16528: LD_INT 7
16530: PUSH
16531: LD_INT 6
16533: PUSH
16534: LD_INT 4
16536: PUSH
16537: LD_INT 6
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: PPUSH
16546: LD_INT 1750
16548: PPUSH
16549: CALL 16554 0 2
16553: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
16558: PPUSH
// if not areas then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16698
// repeat wait ( time ) ;
16568: LD_VAR 0 2
16572: PPUSH
16573: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16577: LD_ADDR_VAR 0 5
16581: PUSH
16582: LD_INT 1
16584: PPUSH
16585: LD_INT 90
16587: PPUSH
16588: CALL_OW 12
16592: ST_TO_ADDR
// for i in areas do
16593: LD_ADDR_VAR 0 4
16597: PUSH
16598: LD_VAR 0 1
16602: PUSH
16603: FOR_IN
16604: IFFALSE 16657
// begin if Prob ( p ) then
16606: LD_VAR 0 5
16610: PPUSH
16611: CALL_OW 13
16615: IFFALSE 16655
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16617: LD_INT 1
16619: PPUSH
16620: LD_INT 5
16622: PPUSH
16623: CALL_OW 12
16627: PPUSH
16628: LD_VAR 0 4
16632: PPUSH
16633: LD_INT 1
16635: PPUSH
16636: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16640: LD_INT 385
16642: PPUSH
16643: LD_INT 595
16645: PPUSH
16646: CALL_OW 12
16650: PPUSH
16651: CALL_OW 67
// end ; end ;
16655: GO 16603
16657: POP
16658: POP
// time := time + 0 0$3 ;
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_VAR 0 2
16668: PUSH
16669: LD_INT 105
16671: PLUS
16672: ST_TO_ADDR
// if time > 7 7$00 then
16673: LD_VAR 0 2
16677: PUSH
16678: LD_INT 14700
16680: GREATER
16681: IFFALSE 16691
// time := 0 0$40 ;
16683: LD_ADDR_VAR 0 2
16687: PUSH
16688: LD_INT 1400
16690: ST_TO_ADDR
// until not game ;
16691: LD_EXP 2
16695: NOT
16696: IFFALSE 16568
// end ; end_of_file
16698: LD_VAR 0 3
16702: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16703: LD_INT 0
16705: PPUSH
16706: PPUSH
// skirmish := false ;
16707: LD_ADDR_EXP 47
16711: PUSH
16712: LD_INT 0
16714: ST_TO_ADDR
// debug_mc := false ;
16715: LD_ADDR_EXP 48
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// mc_bases := [ ] ;
16723: LD_ADDR_EXP 49
16727: PUSH
16728: EMPTY
16729: ST_TO_ADDR
// mc_sides := [ ] ;
16730: LD_ADDR_EXP 75
16734: PUSH
16735: EMPTY
16736: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16737: LD_ADDR_EXP 50
16741: PUSH
16742: EMPTY
16743: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16744: LD_ADDR_EXP 51
16748: PUSH
16749: EMPTY
16750: ST_TO_ADDR
// mc_need_heal := [ ] ;
16751: LD_ADDR_EXP 52
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// mc_healers := [ ] ;
16758: LD_ADDR_EXP 53
16762: PUSH
16763: EMPTY
16764: ST_TO_ADDR
// mc_build_list := [ ] ;
16765: LD_ADDR_EXP 54
16769: PUSH
16770: EMPTY
16771: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16772: LD_ADDR_EXP 81
16776: PUSH
16777: EMPTY
16778: ST_TO_ADDR
// mc_builders := [ ] ;
16779: LD_ADDR_EXP 55
16783: PUSH
16784: EMPTY
16785: ST_TO_ADDR
// mc_construct_list := [ ] ;
16786: LD_ADDR_EXP 56
16790: PUSH
16791: EMPTY
16792: ST_TO_ADDR
// mc_turret_list := [ ] ;
16793: LD_ADDR_EXP 57
16797: PUSH
16798: EMPTY
16799: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16800: LD_ADDR_EXP 58
16804: PUSH
16805: EMPTY
16806: ST_TO_ADDR
// mc_miners := [ ] ;
16807: LD_ADDR_EXP 63
16811: PUSH
16812: EMPTY
16813: ST_TO_ADDR
// mc_mines := [ ] ;
16814: LD_ADDR_EXP 62
16818: PUSH
16819: EMPTY
16820: ST_TO_ADDR
// mc_minefields := [ ] ;
16821: LD_ADDR_EXP 64
16825: PUSH
16826: EMPTY
16827: ST_TO_ADDR
// mc_crates := [ ] ;
16828: LD_ADDR_EXP 65
16832: PUSH
16833: EMPTY
16834: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16835: LD_ADDR_EXP 66
16839: PUSH
16840: EMPTY
16841: ST_TO_ADDR
// mc_crates_area := [ ] ;
16842: LD_ADDR_EXP 67
16846: PUSH
16847: EMPTY
16848: ST_TO_ADDR
// mc_vehicles := [ ] ;
16849: LD_ADDR_EXP 68
16853: PUSH
16854: EMPTY
16855: ST_TO_ADDR
// mc_attack := [ ] ;
16856: LD_ADDR_EXP 69
16860: PUSH
16861: EMPTY
16862: ST_TO_ADDR
// mc_produce := [ ] ;
16863: LD_ADDR_EXP 70
16867: PUSH
16868: EMPTY
16869: ST_TO_ADDR
// mc_defender := [ ] ;
16870: LD_ADDR_EXP 71
16874: PUSH
16875: EMPTY
16876: ST_TO_ADDR
// mc_parking := [ ] ;
16877: LD_ADDR_EXP 73
16881: PUSH
16882: EMPTY
16883: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16884: LD_ADDR_EXP 59
16888: PUSH
16889: EMPTY
16890: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16891: LD_ADDR_EXP 61
16895: PUSH
16896: EMPTY
16897: ST_TO_ADDR
// mc_scan := [ ] ;
16898: LD_ADDR_EXP 72
16902: PUSH
16903: EMPTY
16904: ST_TO_ADDR
// mc_scan_area := [ ] ;
16905: LD_ADDR_EXP 74
16909: PUSH
16910: EMPTY
16911: ST_TO_ADDR
// mc_tech := [ ] ;
16912: LD_ADDR_EXP 76
16916: PUSH
16917: EMPTY
16918: ST_TO_ADDR
// mc_class := [ ] ;
16919: LD_ADDR_EXP 90
16923: PUSH
16924: EMPTY
16925: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16926: LD_ADDR_EXP 91
16930: PUSH
16931: EMPTY
16932: ST_TO_ADDR
// end ;
16933: LD_VAR 0 1
16937: RET
// export function MC_Kill ( base ) ; begin
16938: LD_INT 0
16940: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16941: LD_ADDR_EXP 49
16945: PUSH
16946: LD_EXP 49
16950: PPUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: EMPTY
16957: PPUSH
16958: CALL_OW 1
16962: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16963: LD_ADDR_EXP 50
16967: PUSH
16968: LD_EXP 50
16972: PPUSH
16973: LD_VAR 0 1
16977: PPUSH
16978: EMPTY
16979: PPUSH
16980: CALL_OW 1
16984: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16985: LD_ADDR_EXP 51
16989: PUSH
16990: LD_EXP 51
16994: PPUSH
16995: LD_VAR 0 1
16999: PPUSH
17000: EMPTY
17001: PPUSH
17002: CALL_OW 1
17006: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17007: LD_ADDR_EXP 52
17011: PUSH
17012: LD_EXP 52
17016: PPUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: EMPTY
17023: PPUSH
17024: CALL_OW 1
17028: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17029: LD_ADDR_EXP 53
17033: PUSH
17034: LD_EXP 53
17038: PPUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: EMPTY
17045: PPUSH
17046: CALL_OW 1
17050: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17051: LD_ADDR_EXP 54
17055: PUSH
17056: LD_EXP 54
17060: PPUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: EMPTY
17067: PPUSH
17068: CALL_OW 1
17072: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17073: LD_ADDR_EXP 55
17077: PUSH
17078: LD_EXP 55
17082: PPUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: EMPTY
17089: PPUSH
17090: CALL_OW 1
17094: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17095: LD_ADDR_EXP 56
17099: PUSH
17100: LD_EXP 56
17104: PPUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: EMPTY
17111: PPUSH
17112: CALL_OW 1
17116: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17117: LD_ADDR_EXP 57
17121: PUSH
17122: LD_EXP 57
17126: PPUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: EMPTY
17133: PPUSH
17134: CALL_OW 1
17138: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17139: LD_ADDR_EXP 58
17143: PUSH
17144: LD_EXP 58
17148: PPUSH
17149: LD_VAR 0 1
17153: PPUSH
17154: EMPTY
17155: PPUSH
17156: CALL_OW 1
17160: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17161: LD_ADDR_EXP 59
17165: PUSH
17166: LD_EXP 59
17170: PPUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: EMPTY
17177: PPUSH
17178: CALL_OW 1
17182: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17183: LD_ADDR_EXP 60
17187: PUSH
17188: LD_EXP 60
17192: PPUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: LD_INT 0
17200: PPUSH
17201: CALL_OW 1
17205: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17206: LD_ADDR_EXP 61
17210: PUSH
17211: LD_EXP 61
17215: PPUSH
17216: LD_VAR 0 1
17220: PPUSH
17221: EMPTY
17222: PPUSH
17223: CALL_OW 1
17227: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17228: LD_ADDR_EXP 62
17232: PUSH
17233: LD_EXP 62
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: EMPTY
17244: PPUSH
17245: CALL_OW 1
17249: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17250: LD_ADDR_EXP 63
17254: PUSH
17255: LD_EXP 63
17259: PPUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: EMPTY
17266: PPUSH
17267: CALL_OW 1
17271: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17272: LD_ADDR_EXP 64
17276: PUSH
17277: LD_EXP 64
17281: PPUSH
17282: LD_VAR 0 1
17286: PPUSH
17287: EMPTY
17288: PPUSH
17289: CALL_OW 1
17293: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17294: LD_ADDR_EXP 65
17298: PUSH
17299: LD_EXP 65
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: EMPTY
17310: PPUSH
17311: CALL_OW 1
17315: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17316: LD_ADDR_EXP 66
17320: PUSH
17321: LD_EXP 66
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: EMPTY
17332: PPUSH
17333: CALL_OW 1
17337: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17338: LD_ADDR_EXP 67
17342: PUSH
17343: LD_EXP 67
17347: PPUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: EMPTY
17354: PPUSH
17355: CALL_OW 1
17359: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17360: LD_ADDR_EXP 68
17364: PUSH
17365: LD_EXP 68
17369: PPUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: EMPTY
17376: PPUSH
17377: CALL_OW 1
17381: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17382: LD_ADDR_EXP 69
17386: PUSH
17387: LD_EXP 69
17391: PPUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: EMPTY
17398: PPUSH
17399: CALL_OW 1
17403: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17404: LD_ADDR_EXP 70
17408: PUSH
17409: LD_EXP 70
17413: PPUSH
17414: LD_VAR 0 1
17418: PPUSH
17419: EMPTY
17420: PPUSH
17421: CALL_OW 1
17425: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17426: LD_ADDR_EXP 71
17430: PUSH
17431: LD_EXP 71
17435: PPUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: EMPTY
17442: PPUSH
17443: CALL_OW 1
17447: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17448: LD_ADDR_EXP 72
17452: PUSH
17453: LD_EXP 72
17457: PPUSH
17458: LD_VAR 0 1
17462: PPUSH
17463: EMPTY
17464: PPUSH
17465: CALL_OW 1
17469: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17470: LD_ADDR_EXP 73
17474: PUSH
17475: LD_EXP 73
17479: PPUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: EMPTY
17486: PPUSH
17487: CALL_OW 1
17491: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17492: LD_ADDR_EXP 74
17496: PUSH
17497: LD_EXP 74
17501: PPUSH
17502: LD_VAR 0 1
17506: PPUSH
17507: EMPTY
17508: PPUSH
17509: CALL_OW 1
17513: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17514: LD_ADDR_EXP 76
17518: PUSH
17519: LD_EXP 76
17523: PPUSH
17524: LD_VAR 0 1
17528: PPUSH
17529: EMPTY
17530: PPUSH
17531: CALL_OW 1
17535: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17536: LD_ADDR_EXP 78
17540: PUSH
17541: LD_EXP 78
17545: PPUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: EMPTY
17552: PPUSH
17553: CALL_OW 1
17557: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17558: LD_ADDR_EXP 79
17562: PUSH
17563: LD_EXP 79
17567: PPUSH
17568: LD_VAR 0 1
17572: PPUSH
17573: EMPTY
17574: PPUSH
17575: CALL_OW 1
17579: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17580: LD_ADDR_EXP 80
17584: PUSH
17585: LD_EXP 80
17589: PPUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: EMPTY
17596: PPUSH
17597: CALL_OW 1
17601: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17602: LD_ADDR_EXP 81
17606: PUSH
17607: LD_EXP 81
17611: PPUSH
17612: LD_VAR 0 1
17616: PPUSH
17617: EMPTY
17618: PPUSH
17619: CALL_OW 1
17623: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17624: LD_ADDR_EXP 82
17628: PUSH
17629: LD_EXP 82
17633: PPUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: EMPTY
17640: PPUSH
17641: CALL_OW 1
17645: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17646: LD_ADDR_EXP 83
17650: PUSH
17651: LD_EXP 83
17655: PPUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: EMPTY
17662: PPUSH
17663: CALL_OW 1
17667: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17668: LD_ADDR_EXP 84
17672: PUSH
17673: LD_EXP 84
17677: PPUSH
17678: LD_VAR 0 1
17682: PPUSH
17683: EMPTY
17684: PPUSH
17685: CALL_OW 1
17689: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17690: LD_ADDR_EXP 85
17694: PUSH
17695: LD_EXP 85
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: EMPTY
17706: PPUSH
17707: CALL_OW 1
17711: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17712: LD_ADDR_EXP 86
17716: PUSH
17717: LD_EXP 86
17721: PPUSH
17722: LD_VAR 0 1
17726: PPUSH
17727: EMPTY
17728: PPUSH
17729: CALL_OW 1
17733: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17734: LD_ADDR_EXP 87
17738: PUSH
17739: LD_EXP 87
17743: PPUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: EMPTY
17750: PPUSH
17751: CALL_OW 1
17755: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17756: LD_ADDR_EXP 88
17760: PUSH
17761: LD_EXP 88
17765: PPUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: EMPTY
17772: PPUSH
17773: CALL_OW 1
17777: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17778: LD_ADDR_EXP 89
17782: PUSH
17783: LD_EXP 89
17787: PPUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: EMPTY
17794: PPUSH
17795: CALL_OW 1
17799: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17800: LD_ADDR_EXP 90
17804: PUSH
17805: LD_EXP 90
17809: PPUSH
17810: LD_VAR 0 1
17814: PPUSH
17815: EMPTY
17816: PPUSH
17817: CALL_OW 1
17821: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17822: LD_ADDR_EXP 91
17826: PUSH
17827: LD_EXP 91
17831: PPUSH
17832: LD_VAR 0 1
17836: PPUSH
17837: LD_INT 0
17839: PPUSH
17840: CALL_OW 1
17844: ST_TO_ADDR
// end ;
17845: LD_VAR 0 2
17849: RET
// export function MC_Add ( side , units ) ; var base ; begin
17850: LD_INT 0
17852: PPUSH
17853: PPUSH
// base := mc_bases + 1 ;
17854: LD_ADDR_VAR 0 4
17858: PUSH
17859: LD_EXP 49
17863: PUSH
17864: LD_INT 1
17866: PLUS
17867: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
17868: LD_ADDR_EXP 75
17872: PUSH
17873: LD_EXP 75
17877: PPUSH
17878: LD_VAR 0 4
17882: PPUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 1
17892: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
17893: LD_ADDR_EXP 49
17897: PUSH
17898: LD_EXP 49
17902: PPUSH
17903: LD_VAR 0 4
17907: PPUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: CALL_OW 1
17917: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17918: LD_ADDR_EXP 50
17922: PUSH
17923: LD_EXP 50
17927: PPUSH
17928: LD_VAR 0 4
17932: PPUSH
17933: EMPTY
17934: PPUSH
17935: CALL_OW 1
17939: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17940: LD_ADDR_EXP 51
17944: PUSH
17945: LD_EXP 51
17949: PPUSH
17950: LD_VAR 0 4
17954: PPUSH
17955: EMPTY
17956: PPUSH
17957: CALL_OW 1
17961: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17962: LD_ADDR_EXP 52
17966: PUSH
17967: LD_EXP 52
17971: PPUSH
17972: LD_VAR 0 4
17976: PPUSH
17977: EMPTY
17978: PPUSH
17979: CALL_OW 1
17983: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17984: LD_ADDR_EXP 53
17988: PUSH
17989: LD_EXP 53
17993: PPUSH
17994: LD_VAR 0 4
17998: PPUSH
17999: EMPTY
18000: PPUSH
18001: CALL_OW 1
18005: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18006: LD_ADDR_EXP 54
18010: PUSH
18011: LD_EXP 54
18015: PPUSH
18016: LD_VAR 0 4
18020: PPUSH
18021: EMPTY
18022: PPUSH
18023: CALL_OW 1
18027: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18028: LD_ADDR_EXP 55
18032: PUSH
18033: LD_EXP 55
18037: PPUSH
18038: LD_VAR 0 4
18042: PPUSH
18043: EMPTY
18044: PPUSH
18045: CALL_OW 1
18049: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18050: LD_ADDR_EXP 56
18054: PUSH
18055: LD_EXP 56
18059: PPUSH
18060: LD_VAR 0 4
18064: PPUSH
18065: EMPTY
18066: PPUSH
18067: CALL_OW 1
18071: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18072: LD_ADDR_EXP 57
18076: PUSH
18077: LD_EXP 57
18081: PPUSH
18082: LD_VAR 0 4
18086: PPUSH
18087: EMPTY
18088: PPUSH
18089: CALL_OW 1
18093: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18094: LD_ADDR_EXP 58
18098: PUSH
18099: LD_EXP 58
18103: PPUSH
18104: LD_VAR 0 4
18108: PPUSH
18109: EMPTY
18110: PPUSH
18111: CALL_OW 1
18115: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18116: LD_ADDR_EXP 59
18120: PUSH
18121: LD_EXP 59
18125: PPUSH
18126: LD_VAR 0 4
18130: PPUSH
18131: EMPTY
18132: PPUSH
18133: CALL_OW 1
18137: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18138: LD_ADDR_EXP 60
18142: PUSH
18143: LD_EXP 60
18147: PPUSH
18148: LD_VAR 0 4
18152: PPUSH
18153: LD_INT 0
18155: PPUSH
18156: CALL_OW 1
18160: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18161: LD_ADDR_EXP 61
18165: PUSH
18166: LD_EXP 61
18170: PPUSH
18171: LD_VAR 0 4
18175: PPUSH
18176: EMPTY
18177: PPUSH
18178: CALL_OW 1
18182: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18183: LD_ADDR_EXP 62
18187: PUSH
18188: LD_EXP 62
18192: PPUSH
18193: LD_VAR 0 4
18197: PPUSH
18198: EMPTY
18199: PPUSH
18200: CALL_OW 1
18204: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18205: LD_ADDR_EXP 63
18209: PUSH
18210: LD_EXP 63
18214: PPUSH
18215: LD_VAR 0 4
18219: PPUSH
18220: EMPTY
18221: PPUSH
18222: CALL_OW 1
18226: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18227: LD_ADDR_EXP 64
18231: PUSH
18232: LD_EXP 64
18236: PPUSH
18237: LD_VAR 0 4
18241: PPUSH
18242: EMPTY
18243: PPUSH
18244: CALL_OW 1
18248: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18249: LD_ADDR_EXP 65
18253: PUSH
18254: LD_EXP 65
18258: PPUSH
18259: LD_VAR 0 4
18263: PPUSH
18264: EMPTY
18265: PPUSH
18266: CALL_OW 1
18270: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18271: LD_ADDR_EXP 66
18275: PUSH
18276: LD_EXP 66
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: EMPTY
18287: PPUSH
18288: CALL_OW 1
18292: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18293: LD_ADDR_EXP 67
18297: PUSH
18298: LD_EXP 67
18302: PPUSH
18303: LD_VAR 0 4
18307: PPUSH
18308: EMPTY
18309: PPUSH
18310: CALL_OW 1
18314: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18315: LD_ADDR_EXP 68
18319: PUSH
18320: LD_EXP 68
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: EMPTY
18331: PPUSH
18332: CALL_OW 1
18336: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18337: LD_ADDR_EXP 69
18341: PUSH
18342: LD_EXP 69
18346: PPUSH
18347: LD_VAR 0 4
18351: PPUSH
18352: EMPTY
18353: PPUSH
18354: CALL_OW 1
18358: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18359: LD_ADDR_EXP 70
18363: PUSH
18364: LD_EXP 70
18368: PPUSH
18369: LD_VAR 0 4
18373: PPUSH
18374: EMPTY
18375: PPUSH
18376: CALL_OW 1
18380: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18381: LD_ADDR_EXP 71
18385: PUSH
18386: LD_EXP 71
18390: PPUSH
18391: LD_VAR 0 4
18395: PPUSH
18396: EMPTY
18397: PPUSH
18398: CALL_OW 1
18402: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18403: LD_ADDR_EXP 72
18407: PUSH
18408: LD_EXP 72
18412: PPUSH
18413: LD_VAR 0 4
18417: PPUSH
18418: EMPTY
18419: PPUSH
18420: CALL_OW 1
18424: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18425: LD_ADDR_EXP 73
18429: PUSH
18430: LD_EXP 73
18434: PPUSH
18435: LD_VAR 0 4
18439: PPUSH
18440: EMPTY
18441: PPUSH
18442: CALL_OW 1
18446: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18447: LD_ADDR_EXP 74
18451: PUSH
18452: LD_EXP 74
18456: PPUSH
18457: LD_VAR 0 4
18461: PPUSH
18462: EMPTY
18463: PPUSH
18464: CALL_OW 1
18468: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18469: LD_ADDR_EXP 76
18473: PUSH
18474: LD_EXP 76
18478: PPUSH
18479: LD_VAR 0 4
18483: PPUSH
18484: EMPTY
18485: PPUSH
18486: CALL_OW 1
18490: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18491: LD_ADDR_EXP 78
18495: PUSH
18496: LD_EXP 78
18500: PPUSH
18501: LD_VAR 0 4
18505: PPUSH
18506: EMPTY
18507: PPUSH
18508: CALL_OW 1
18512: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18513: LD_ADDR_EXP 79
18517: PUSH
18518: LD_EXP 79
18522: PPUSH
18523: LD_VAR 0 4
18527: PPUSH
18528: EMPTY
18529: PPUSH
18530: CALL_OW 1
18534: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18535: LD_ADDR_EXP 80
18539: PUSH
18540: LD_EXP 80
18544: PPUSH
18545: LD_VAR 0 4
18549: PPUSH
18550: EMPTY
18551: PPUSH
18552: CALL_OW 1
18556: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18557: LD_ADDR_EXP 81
18561: PUSH
18562: LD_EXP 81
18566: PPUSH
18567: LD_VAR 0 4
18571: PPUSH
18572: EMPTY
18573: PPUSH
18574: CALL_OW 1
18578: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18579: LD_ADDR_EXP 82
18583: PUSH
18584: LD_EXP 82
18588: PPUSH
18589: LD_VAR 0 4
18593: PPUSH
18594: EMPTY
18595: PPUSH
18596: CALL_OW 1
18600: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18601: LD_ADDR_EXP 83
18605: PUSH
18606: LD_EXP 83
18610: PPUSH
18611: LD_VAR 0 4
18615: PPUSH
18616: EMPTY
18617: PPUSH
18618: CALL_OW 1
18622: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18623: LD_ADDR_EXP 84
18627: PUSH
18628: LD_EXP 84
18632: PPUSH
18633: LD_VAR 0 4
18637: PPUSH
18638: EMPTY
18639: PPUSH
18640: CALL_OW 1
18644: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18645: LD_ADDR_EXP 85
18649: PUSH
18650: LD_EXP 85
18654: PPUSH
18655: LD_VAR 0 4
18659: PPUSH
18660: EMPTY
18661: PPUSH
18662: CALL_OW 1
18666: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18667: LD_ADDR_EXP 86
18671: PUSH
18672: LD_EXP 86
18676: PPUSH
18677: LD_VAR 0 4
18681: PPUSH
18682: EMPTY
18683: PPUSH
18684: CALL_OW 1
18688: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18689: LD_ADDR_EXP 87
18693: PUSH
18694: LD_EXP 87
18698: PPUSH
18699: LD_VAR 0 4
18703: PPUSH
18704: EMPTY
18705: PPUSH
18706: CALL_OW 1
18710: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18711: LD_ADDR_EXP 88
18715: PUSH
18716: LD_EXP 88
18720: PPUSH
18721: LD_VAR 0 4
18725: PPUSH
18726: EMPTY
18727: PPUSH
18728: CALL_OW 1
18732: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18733: LD_ADDR_EXP 89
18737: PUSH
18738: LD_EXP 89
18742: PPUSH
18743: LD_VAR 0 4
18747: PPUSH
18748: EMPTY
18749: PPUSH
18750: CALL_OW 1
18754: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18755: LD_ADDR_EXP 90
18759: PUSH
18760: LD_EXP 90
18764: PPUSH
18765: LD_VAR 0 4
18769: PPUSH
18770: EMPTY
18771: PPUSH
18772: CALL_OW 1
18776: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18777: LD_ADDR_EXP 91
18781: PUSH
18782: LD_EXP 91
18786: PPUSH
18787: LD_VAR 0 4
18791: PPUSH
18792: LD_INT 0
18794: PPUSH
18795: CALL_OW 1
18799: ST_TO_ADDR
// result := base ;
18800: LD_ADDR_VAR 0 3
18804: PUSH
18805: LD_VAR 0 4
18809: ST_TO_ADDR
// end ;
18810: LD_VAR 0 3
18814: RET
// export function MC_Start ( ) ; var i ; begin
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
// for i = 1 to mc_bases do
18819: LD_ADDR_VAR 0 2
18823: PUSH
18824: DOUBLE
18825: LD_INT 1
18827: DEC
18828: ST_TO_ADDR
18829: LD_EXP 49
18833: PUSH
18834: FOR_TO
18835: IFFALSE 19912
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
18837: LD_ADDR_EXP 49
18841: PUSH
18842: LD_EXP 49
18846: PPUSH
18847: LD_VAR 0 2
18851: PPUSH
18852: LD_EXP 49
18856: PUSH
18857: LD_VAR 0 2
18861: ARRAY
18862: PUSH
18863: LD_INT 0
18865: DIFF
18866: PPUSH
18867: CALL_OW 1
18871: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
18872: LD_ADDR_EXP 50
18876: PUSH
18877: LD_EXP 50
18881: PPUSH
18882: LD_VAR 0 2
18886: PPUSH
18887: EMPTY
18888: PPUSH
18889: CALL_OW 1
18893: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
18894: LD_ADDR_EXP 51
18898: PUSH
18899: LD_EXP 51
18903: PPUSH
18904: LD_VAR 0 2
18908: PPUSH
18909: EMPTY
18910: PPUSH
18911: CALL_OW 1
18915: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
18916: LD_ADDR_EXP 52
18920: PUSH
18921: LD_EXP 52
18925: PPUSH
18926: LD_VAR 0 2
18930: PPUSH
18931: EMPTY
18932: PPUSH
18933: CALL_OW 1
18937: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
18938: LD_ADDR_EXP 53
18942: PUSH
18943: LD_EXP 53
18947: PPUSH
18948: LD_VAR 0 2
18952: PPUSH
18953: EMPTY
18954: PUSH
18955: EMPTY
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 1
18965: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
18966: LD_ADDR_EXP 54
18970: PUSH
18971: LD_EXP 54
18975: PPUSH
18976: LD_VAR 0 2
18980: PPUSH
18981: EMPTY
18982: PPUSH
18983: CALL_OW 1
18987: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
18988: LD_ADDR_EXP 81
18992: PUSH
18993: LD_EXP 81
18997: PPUSH
18998: LD_VAR 0 2
19002: PPUSH
19003: EMPTY
19004: PPUSH
19005: CALL_OW 1
19009: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19010: LD_ADDR_EXP 55
19014: PUSH
19015: LD_EXP 55
19019: PPUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: EMPTY
19026: PPUSH
19027: CALL_OW 1
19031: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19032: LD_ADDR_EXP 56
19036: PUSH
19037: LD_EXP 56
19041: PPUSH
19042: LD_VAR 0 2
19046: PPUSH
19047: EMPTY
19048: PPUSH
19049: CALL_OW 1
19053: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19054: LD_ADDR_EXP 57
19058: PUSH
19059: LD_EXP 57
19063: PPUSH
19064: LD_VAR 0 2
19068: PPUSH
19069: LD_EXP 49
19073: PUSH
19074: LD_VAR 0 2
19078: ARRAY
19079: PPUSH
19080: LD_INT 2
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 32
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 33
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 72
19112: PPUSH
19113: CALL_OW 1
19117: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19118: LD_ADDR_EXP 58
19122: PUSH
19123: LD_EXP 58
19127: PPUSH
19128: LD_VAR 0 2
19132: PPUSH
19133: LD_EXP 49
19137: PUSH
19138: LD_VAR 0 2
19142: ARRAY
19143: PPUSH
19144: LD_INT 2
19146: PUSH
19147: LD_INT 30
19149: PUSH
19150: LD_INT 32
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 30
19159: PUSH
19160: LD_INT 31
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 58
19174: PUSH
19175: EMPTY
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 72
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19192: LD_ADDR_EXP 59
19196: PUSH
19197: LD_EXP 59
19201: PPUSH
19202: LD_VAR 0 2
19206: PPUSH
19207: EMPTY
19208: PPUSH
19209: CALL_OW 1
19213: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19214: LD_ADDR_EXP 63
19218: PUSH
19219: LD_EXP 63
19223: PPUSH
19224: LD_VAR 0 2
19228: PPUSH
19229: EMPTY
19230: PPUSH
19231: CALL_OW 1
19235: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19236: LD_ADDR_EXP 62
19240: PUSH
19241: LD_EXP 62
19245: PPUSH
19246: LD_VAR 0 2
19250: PPUSH
19251: EMPTY
19252: PPUSH
19253: CALL_OW 1
19257: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19258: LD_ADDR_EXP 64
19262: PUSH
19263: LD_EXP 64
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: EMPTY
19274: PPUSH
19275: CALL_OW 1
19279: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19280: LD_ADDR_EXP 65
19284: PUSH
19285: LD_EXP 65
19289: PPUSH
19290: LD_VAR 0 2
19294: PPUSH
19295: EMPTY
19296: PPUSH
19297: CALL_OW 1
19301: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19302: LD_ADDR_EXP 66
19306: PUSH
19307: LD_EXP 66
19311: PPUSH
19312: LD_VAR 0 2
19316: PPUSH
19317: EMPTY
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
19324: LD_ADDR_EXP 67
19328: PUSH
19329: LD_EXP 67
19333: PPUSH
19334: LD_VAR 0 2
19338: PPUSH
19339: EMPTY
19340: PPUSH
19341: CALL_OW 1
19345: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
19346: LD_ADDR_EXP 68
19350: PUSH
19351: LD_EXP 68
19355: PPUSH
19356: LD_VAR 0 2
19360: PPUSH
19361: EMPTY
19362: PPUSH
19363: CALL_OW 1
19367: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
19368: LD_ADDR_EXP 69
19372: PUSH
19373: LD_EXP 69
19377: PPUSH
19378: LD_VAR 0 2
19382: PPUSH
19383: EMPTY
19384: PPUSH
19385: CALL_OW 1
19389: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
19390: LD_ADDR_EXP 70
19394: PUSH
19395: LD_EXP 70
19399: PPUSH
19400: LD_VAR 0 2
19404: PPUSH
19405: EMPTY
19406: PPUSH
19407: CALL_OW 1
19411: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
19412: LD_ADDR_EXP 71
19416: PUSH
19417: LD_EXP 71
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: EMPTY
19428: PPUSH
19429: CALL_OW 1
19433: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
19434: LD_ADDR_EXP 60
19438: PUSH
19439: LD_EXP 60
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_INT 0
19451: PPUSH
19452: CALL_OW 1
19456: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
19457: LD_ADDR_EXP 73
19461: PUSH
19462: LD_EXP 73
19466: PPUSH
19467: LD_VAR 0 2
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 1
19479: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
19480: LD_ADDR_EXP 61
19484: PUSH
19485: LD_EXP 61
19489: PPUSH
19490: LD_VAR 0 2
19494: PPUSH
19495: EMPTY
19496: PPUSH
19497: CALL_OW 1
19501: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
19502: LD_ADDR_EXP 72
19506: PUSH
19507: LD_EXP 72
19511: PPUSH
19512: LD_VAR 0 2
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 1
19524: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
19525: LD_ADDR_EXP 74
19529: PUSH
19530: LD_EXP 74
19534: PPUSH
19535: LD_VAR 0 2
19539: PPUSH
19540: EMPTY
19541: PPUSH
19542: CALL_OW 1
19546: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
19547: LD_ADDR_EXP 77
19551: PUSH
19552: LD_EXP 77
19556: PPUSH
19557: LD_VAR 0 2
19561: PPUSH
19562: LD_INT 0
19564: PPUSH
19565: CALL_OW 1
19569: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
19570: LD_ADDR_EXP 78
19574: PUSH
19575: LD_EXP 78
19579: PPUSH
19580: LD_VAR 0 2
19584: PPUSH
19585: EMPTY
19586: PPUSH
19587: CALL_OW 1
19591: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
19592: LD_ADDR_EXP 79
19596: PUSH
19597: LD_EXP 79
19601: PPUSH
19602: LD_VAR 0 2
19606: PPUSH
19607: EMPTY
19608: PPUSH
19609: CALL_OW 1
19613: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
19614: LD_ADDR_EXP 80
19618: PUSH
19619: LD_EXP 80
19623: PPUSH
19624: LD_VAR 0 2
19628: PPUSH
19629: EMPTY
19630: PPUSH
19631: CALL_OW 1
19635: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
19636: LD_ADDR_EXP 82
19640: PUSH
19641: LD_EXP 82
19645: PPUSH
19646: LD_VAR 0 2
19650: PPUSH
19651: LD_EXP 49
19655: PUSH
19656: LD_VAR 0 2
19660: ARRAY
19661: PPUSH
19662: LD_INT 2
19664: PUSH
19665: LD_INT 30
19667: PUSH
19668: LD_INT 6
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 30
19677: PUSH
19678: LD_INT 7
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 30
19687: PUSH
19688: LD_INT 8
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: PPUSH
19701: CALL_OW 72
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
19711: LD_ADDR_EXP 83
19715: PUSH
19716: LD_EXP 83
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL_OW 1
19732: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
19733: LD_ADDR_EXP 84
19737: PUSH
19738: LD_EXP 84
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: EMPTY
19749: PPUSH
19750: CALL_OW 1
19754: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
19755: LD_ADDR_EXP 85
19759: PUSH
19760: LD_EXP 85
19764: PPUSH
19765: LD_VAR 0 2
19769: PPUSH
19770: EMPTY
19771: PPUSH
19772: CALL_OW 1
19776: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
19777: LD_ADDR_EXP 86
19781: PUSH
19782: LD_EXP 86
19786: PPUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: EMPTY
19793: PPUSH
19794: CALL_OW 1
19798: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
19799: LD_ADDR_EXP 87
19803: PUSH
19804: LD_EXP 87
19808: PPUSH
19809: LD_VAR 0 2
19813: PPUSH
19814: EMPTY
19815: PPUSH
19816: CALL_OW 1
19820: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
19821: LD_ADDR_EXP 88
19825: PUSH
19826: LD_EXP 88
19830: PPUSH
19831: LD_VAR 0 2
19835: PPUSH
19836: EMPTY
19837: PPUSH
19838: CALL_OW 1
19842: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
19843: LD_ADDR_EXP 89
19847: PUSH
19848: LD_EXP 89
19852: PPUSH
19853: LD_VAR 0 2
19857: PPUSH
19858: EMPTY
19859: PPUSH
19860: CALL_OW 1
19864: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
19865: LD_ADDR_EXP 90
19869: PUSH
19870: LD_EXP 90
19874: PPUSH
19875: LD_VAR 0 2
19879: PPUSH
19880: EMPTY
19881: PPUSH
19882: CALL_OW 1
19886: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
19887: LD_ADDR_EXP 91
19891: PUSH
19892: LD_EXP 91
19896: PPUSH
19897: LD_VAR 0 2
19901: PPUSH
19902: LD_INT 0
19904: PPUSH
19905: CALL_OW 1
19909: ST_TO_ADDR
// end ;
19910: GO 18834
19912: POP
19913: POP
// MC_InitSides ( ) ;
19914: CALL 20200 0 0
// MC_InitResearch ( ) ;
19918: CALL 19939 0 0
// CustomInitMacro ( ) ;
19922: CALL 292 0 0
// skirmish := true ;
19926: LD_ADDR_EXP 47
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// end ;
19934: LD_VAR 0 1
19938: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
// if not mc_bases then
19947: LD_EXP 49
19951: NOT
19952: IFFALSE 19956
// exit ;
19954: GO 20195
// for i = 1 to 8 do
19956: LD_ADDR_VAR 0 2
19960: PUSH
19961: DOUBLE
19962: LD_INT 1
19964: DEC
19965: ST_TO_ADDR
19966: LD_INT 8
19968: PUSH
19969: FOR_TO
19970: IFFALSE 19996
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
19972: LD_ADDR_EXP 76
19976: PUSH
19977: LD_EXP 76
19981: PPUSH
19982: LD_VAR 0 2
19986: PPUSH
19987: EMPTY
19988: PPUSH
19989: CALL_OW 1
19993: ST_TO_ADDR
19994: GO 19969
19996: POP
19997: POP
// tmp := [ ] ;
19998: LD_ADDR_VAR 0 5
20002: PUSH
20003: EMPTY
20004: ST_TO_ADDR
// for i = 1 to mc_sides do
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: DOUBLE
20011: LD_INT 1
20013: DEC
20014: ST_TO_ADDR
20015: LD_EXP 75
20019: PUSH
20020: FOR_TO
20021: IFFALSE 20079
// if not mc_sides [ i ] in tmp then
20023: LD_EXP 75
20027: PUSH
20028: LD_VAR 0 2
20032: ARRAY
20033: PUSH
20034: LD_VAR 0 5
20038: IN
20039: NOT
20040: IFFALSE 20077
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20042: LD_ADDR_VAR 0 5
20046: PUSH
20047: LD_VAR 0 5
20051: PPUSH
20052: LD_VAR 0 5
20056: PUSH
20057: LD_INT 1
20059: PLUS
20060: PPUSH
20061: LD_EXP 75
20065: PUSH
20066: LD_VAR 0 2
20070: ARRAY
20071: PPUSH
20072: CALL_OW 2
20076: ST_TO_ADDR
20077: GO 20020
20079: POP
20080: POP
// if not tmp then
20081: LD_VAR 0 5
20085: NOT
20086: IFFALSE 20090
// exit ;
20088: GO 20195
// for j in tmp do
20090: LD_ADDR_VAR 0 3
20094: PUSH
20095: LD_VAR 0 5
20099: PUSH
20100: FOR_IN
20101: IFFALSE 20193
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20103: LD_ADDR_VAR 0 6
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_VAR 0 3
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: ST_TO_ADDR
// if not un then
20125: LD_VAR 0 6
20129: NOT
20130: IFFALSE 20134
// continue ;
20132: GO 20100
// nation := GetNation ( un [ 1 ] ) ;
20134: LD_ADDR_VAR 0 4
20138: PUSH
20139: LD_VAR 0 6
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: CALL_OW 248
20152: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20153: LD_ADDR_EXP 76
20157: PUSH
20158: LD_EXP 76
20162: PPUSH
20163: LD_VAR 0 3
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_VAR 0 4
20177: PPUSH
20178: LD_INT 1
20180: PPUSH
20181: CALL 46471 0 3
20185: PPUSH
20186: CALL_OW 1
20190: ST_TO_ADDR
// end ;
20191: GO 20100
20193: POP
20194: POP
// end ;
20195: LD_VAR 0 1
20199: RET
// export function MC_InitSides ( ) ; var i ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
// if not mc_bases then
20204: LD_EXP 49
20208: NOT
20209: IFFALSE 20213
// exit ;
20211: GO 20287
// for i = 1 to mc_bases do
20213: LD_ADDR_VAR 0 2
20217: PUSH
20218: DOUBLE
20219: LD_INT 1
20221: DEC
20222: ST_TO_ADDR
20223: LD_EXP 49
20227: PUSH
20228: FOR_TO
20229: IFFALSE 20285
// if mc_bases [ i ] then
20231: LD_EXP 49
20235: PUSH
20236: LD_VAR 0 2
20240: ARRAY
20241: IFFALSE 20283
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20243: LD_ADDR_EXP 75
20247: PUSH
20248: LD_EXP 75
20252: PPUSH
20253: LD_VAR 0 2
20257: PPUSH
20258: LD_EXP 49
20262: PUSH
20263: LD_VAR 0 2
20267: ARRAY
20268: PUSH
20269: LD_INT 1
20271: ARRAY
20272: PPUSH
20273: CALL_OW 255
20277: PPUSH
20278: CALL_OW 1
20282: ST_TO_ADDR
20283: GO 20228
20285: POP
20286: POP
// end ;
20287: LD_VAR 0 1
20291: RET
// every 0 0$01 trigger skirmish do
20292: LD_EXP 47
20296: IFFALSE 20450
20298: GO 20300
20300: DISABLE
// begin enable ;
20301: ENABLE
// MC_CheckBuildings ( ) ;
20302: CALL 24948 0 0
// MC_CheckPeopleLife ( ) ;
20306: CALL 25073 0 0
// RaiseSailEvent ( 100 ) ;
20310: LD_INT 100
20312: PPUSH
20313: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20317: LD_INT 103
20319: PPUSH
20320: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
20324: LD_INT 104
20326: PPUSH
20327: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
20331: LD_INT 105
20333: PPUSH
20334: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
20338: LD_INT 106
20340: PPUSH
20341: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
20345: LD_INT 107
20347: PPUSH
20348: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
20352: LD_INT 108
20354: PPUSH
20355: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
20359: LD_INT 109
20361: PPUSH
20362: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
20366: LD_INT 110
20368: PPUSH
20369: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
20373: LD_INT 111
20375: PPUSH
20376: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
20380: LD_INT 112
20382: PPUSH
20383: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
20387: LD_INT 113
20389: PPUSH
20390: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
20394: LD_INT 120
20396: PPUSH
20397: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
20401: LD_INT 121
20403: PPUSH
20404: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
20408: LD_INT 122
20410: PPUSH
20411: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
20415: LD_INT 123
20417: PPUSH
20418: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
20422: LD_INT 124
20424: PPUSH
20425: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
20429: LD_INT 125
20431: PPUSH
20432: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
20436: LD_INT 126
20438: PPUSH
20439: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
20443: LD_INT 200
20445: PPUSH
20446: CALL_OW 427
// end ;
20450: END
// on SailEvent ( event ) do begin if event < 100 then
20451: LD_VAR 0 1
20455: PUSH
20456: LD_INT 100
20458: LESS
20459: IFFALSE 20470
// CustomEvent ( event ) ;
20461: LD_VAR 0 1
20465: PPUSH
20466: CALL 15992 0 1
// if event = 100 then
20470: LD_VAR 0 1
20474: PUSH
20475: LD_INT 100
20477: EQUAL
20478: IFFALSE 20484
// MC_ClassManager ( ) ;
20480: CALL 20876 0 0
// if event = 101 then
20484: LD_VAR 0 1
20488: PUSH
20489: LD_INT 101
20491: EQUAL
20492: IFFALSE 20498
// MC_RepairBuildings ( ) ;
20494: CALL 25669 0 0
// if event = 102 then
20498: LD_VAR 0 1
20502: PUSH
20503: LD_INT 102
20505: EQUAL
20506: IFFALSE 20512
// MC_Heal ( ) ;
20508: CALL 26401 0 0
// if event = 103 then
20512: LD_VAR 0 1
20516: PUSH
20517: LD_INT 103
20519: EQUAL
20520: IFFALSE 20526
// MC_Build ( ) ;
20522: CALL 26823 0 0
// if event = 104 then
20526: LD_VAR 0 1
20530: PUSH
20531: LD_INT 104
20533: EQUAL
20534: IFFALSE 20540
// MC_TurretWeapon ( ) ;
20536: CALL 28436 0 0
// if event = 105 then
20540: LD_VAR 0 1
20544: PUSH
20545: LD_INT 105
20547: EQUAL
20548: IFFALSE 20554
// MC_BuildUpgrade ( ) ;
20550: CALL 27987 0 0
// if event = 106 then
20554: LD_VAR 0 1
20558: PUSH
20559: LD_INT 106
20561: EQUAL
20562: IFFALSE 20568
// MC_PlantMines ( ) ;
20564: CALL 28866 0 0
// if event = 107 then
20568: LD_VAR 0 1
20572: PUSH
20573: LD_INT 107
20575: EQUAL
20576: IFFALSE 20582
// MC_CollectCrates ( ) ;
20578: CALL 29900 0 0
// if event = 108 then
20582: LD_VAR 0 1
20586: PUSH
20587: LD_INT 108
20589: EQUAL
20590: IFFALSE 20596
// MC_LinkRemoteControl ( ) ;
20592: CALL 31676 0 0
// if event = 109 then
20596: LD_VAR 0 1
20600: PUSH
20601: LD_INT 109
20603: EQUAL
20604: IFFALSE 20610
// MC_ProduceVehicle ( ) ;
20606: CALL 31857 0 0
// if event = 110 then
20610: LD_VAR 0 1
20614: PUSH
20615: LD_INT 110
20617: EQUAL
20618: IFFALSE 20624
// MC_SendAttack ( ) ;
20620: CALL 32323 0 0
// if event = 111 then
20624: LD_VAR 0 1
20628: PUSH
20629: LD_INT 111
20631: EQUAL
20632: IFFALSE 20638
// MC_Defend ( ) ;
20634: CALL 32431 0 0
// if event = 112 then
20638: LD_VAR 0 1
20642: PUSH
20643: LD_INT 112
20645: EQUAL
20646: IFFALSE 20652
// MC_Research ( ) ;
20648: CALL 33036 0 0
// if event = 113 then
20652: LD_VAR 0 1
20656: PUSH
20657: LD_INT 113
20659: EQUAL
20660: IFFALSE 20666
// MC_MinesTrigger ( ) ;
20662: CALL 34150 0 0
// if event = 120 then
20666: LD_VAR 0 1
20670: PUSH
20671: LD_INT 120
20673: EQUAL
20674: IFFALSE 20680
// MC_RepairVehicle ( ) ;
20676: CALL 34249 0 0
// if event = 121 then
20680: LD_VAR 0 1
20684: PUSH
20685: LD_INT 121
20687: EQUAL
20688: IFFALSE 20694
// MC_TameApe ( ) ;
20690: CALL 34979 0 0
// if event = 122 then
20694: LD_VAR 0 1
20698: PUSH
20699: LD_INT 122
20701: EQUAL
20702: IFFALSE 20708
// MC_ChangeApeClass ( ) ;
20704: CALL 35808 0 0
// if event = 123 then
20708: LD_VAR 0 1
20712: PUSH
20713: LD_INT 123
20715: EQUAL
20716: IFFALSE 20722
// MC_Bazooka ( ) ;
20718: CALL 36458 0 0
// if event = 124 then
20722: LD_VAR 0 1
20726: PUSH
20727: LD_INT 124
20729: EQUAL
20730: IFFALSE 20736
// MC_TeleportExit ( ) ;
20732: CALL 36656 0 0
// if event = 125 then
20736: LD_VAR 0 1
20740: PUSH
20741: LD_INT 125
20743: EQUAL
20744: IFFALSE 20750
// MC_Deposits ( ) ;
20746: CALL 37303 0 0
// if event = 126 then
20750: LD_VAR 0 1
20754: PUSH
20755: LD_INT 126
20757: EQUAL
20758: IFFALSE 20764
// MC_RemoteDriver ( ) ;
20760: CALL 37928 0 0
// if event = 200 then
20764: LD_VAR 0 1
20768: PUSH
20769: LD_INT 200
20771: EQUAL
20772: IFFALSE 20778
// MC_Idle ( ) ;
20774: CALL 39661 0 0
// end ;
20778: PPOPN 1
20780: END
// export function MC_Reset ( base , tag ) ; var i ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
// if not mc_bases [ base ] or not tag then
20785: LD_EXP 49
20789: PUSH
20790: LD_VAR 0 1
20794: ARRAY
20795: NOT
20796: PUSH
20797: LD_VAR 0 2
20801: NOT
20802: OR
20803: IFFALSE 20807
// exit ;
20805: GO 20871
// for i in mc_bases [ base ] union mc_ape [ base ] do
20807: LD_ADDR_VAR 0 4
20811: PUSH
20812: LD_EXP 49
20816: PUSH
20817: LD_VAR 0 1
20821: ARRAY
20822: PUSH
20823: LD_EXP 78
20827: PUSH
20828: LD_VAR 0 1
20832: ARRAY
20833: UNION
20834: PUSH
20835: FOR_IN
20836: IFFALSE 20869
// if GetTag ( i ) = tag then
20838: LD_VAR 0 4
20842: PPUSH
20843: CALL_OW 110
20847: PUSH
20848: LD_VAR 0 2
20852: EQUAL
20853: IFFALSE 20867
// SetTag ( i , 0 ) ;
20855: LD_VAR 0 4
20859: PPUSH
20860: LD_INT 0
20862: PPUSH
20863: CALL_OW 109
20867: GO 20835
20869: POP
20870: POP
// end ;
20871: LD_VAR 0 3
20875: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
20876: LD_INT 0
20878: PPUSH
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
20884: PPUSH
20885: PPUSH
// if not mc_bases then
20886: LD_EXP 49
20890: NOT
20891: IFFALSE 20895
// exit ;
20893: GO 21353
// for i = 1 to mc_bases do
20895: LD_ADDR_VAR 0 2
20899: PUSH
20900: DOUBLE
20901: LD_INT 1
20903: DEC
20904: ST_TO_ADDR
20905: LD_EXP 49
20909: PUSH
20910: FOR_TO
20911: IFFALSE 21351
// begin tmp := MC_ClassCheckReq ( i ) ;
20913: LD_ADDR_VAR 0 4
20917: PUSH
20918: LD_VAR 0 2
20922: PPUSH
20923: CALL 21358 0 1
20927: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
20928: LD_ADDR_EXP 90
20932: PUSH
20933: LD_EXP 90
20937: PPUSH
20938: LD_VAR 0 2
20942: PPUSH
20943: LD_VAR 0 4
20947: PPUSH
20948: CALL_OW 1
20952: ST_TO_ADDR
// if not tmp then
20953: LD_VAR 0 4
20957: NOT
20958: IFFALSE 20962
// continue ;
20960: GO 20910
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
20962: LD_ADDR_VAR 0 6
20966: PUSH
20967: LD_EXP 49
20971: PUSH
20972: LD_VAR 0 2
20976: ARRAY
20977: PPUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 4
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 30
20993: PUSH
20994: LD_INT 5
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 72
21010: PUSH
21011: LD_EXP 49
21015: PUSH
21016: LD_VAR 0 2
21020: ARRAY
21021: PPUSH
21022: LD_INT 2
21024: PUSH
21025: LD_INT 30
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 30
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: PPUSH
21050: CALL_OW 72
21054: PUSH
21055: LD_EXP 49
21059: PUSH
21060: LD_VAR 0 2
21064: ARRAY
21065: PPUSH
21066: LD_INT 30
21068: PUSH
21069: LD_INT 3
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 72
21080: PUSH
21081: LD_EXP 49
21085: PUSH
21086: LD_VAR 0 2
21090: ARRAY
21091: PPUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 6
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: LD_INT 7
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 30
21117: PUSH
21118: LD_INT 8
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 72
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
// for j = 1 to 4 do
21142: LD_ADDR_VAR 0 3
21146: PUSH
21147: DOUBLE
21148: LD_INT 1
21150: DEC
21151: ST_TO_ADDR
21152: LD_INT 4
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21347
// begin if not tmp [ j ] then
21158: LD_VAR 0 4
21162: PUSH
21163: LD_VAR 0 3
21167: ARRAY
21168: NOT
21169: IFFALSE 21173
// continue ;
21171: GO 21155
// for p in tmp [ j ] do
21173: LD_ADDR_VAR 0 5
21177: PUSH
21178: LD_VAR 0 4
21182: PUSH
21183: LD_VAR 0 3
21187: ARRAY
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21343
// begin if not b [ j ] then
21192: LD_VAR 0 6
21196: PUSH
21197: LD_VAR 0 3
21201: ARRAY
21202: NOT
21203: IFFALSE 21207
// break ;
21205: GO 21343
// e := 0 ;
21207: LD_ADDR_VAR 0 7
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// for k in b [ j ] do
21215: LD_ADDR_VAR 0 8
21219: PUSH
21220: LD_VAR 0 6
21224: PUSH
21225: LD_VAR 0 3
21229: ARRAY
21230: PUSH
21231: FOR_IN
21232: IFFALSE 21259
// if IsNotFull ( k ) then
21234: LD_VAR 0 8
21238: PPUSH
21239: CALL 50547 0 1
21243: IFFALSE 21257
// begin e := k ;
21245: LD_ADDR_VAR 0 7
21249: PUSH
21250: LD_VAR 0 8
21254: ST_TO_ADDR
// break ;
21255: GO 21259
// end ;
21257: GO 21231
21259: POP
21260: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21261: LD_VAR 0 7
21265: PUSH
21266: LD_VAR 0 5
21270: PPUSH
21271: LD_VAR 0 7
21275: PPUSH
21276: CALL 87666 0 2
21280: NOT
21281: AND
21282: IFFALSE 21341
// begin if IsInUnit ( p ) then
21284: LD_VAR 0 5
21288: PPUSH
21289: CALL_OW 310
21293: IFFALSE 21304
// ComExitBuilding ( p ) ;
21295: LD_VAR 0 5
21299: PPUSH
21300: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21304: LD_VAR 0 5
21308: PPUSH
21309: LD_VAR 0 7
21313: PPUSH
21314: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21318: LD_VAR 0 5
21322: PPUSH
21323: LD_VAR 0 3
21327: PPUSH
21328: CALL_OW 183
// AddComExitBuilding ( p ) ;
21332: LD_VAR 0 5
21336: PPUSH
21337: CALL_OW 182
// end ; end ;
21341: GO 21189
21343: POP
21344: POP
// end ;
21345: GO 21155
21347: POP
21348: POP
// end ;
21349: GO 20910
21351: POP
21352: POP
// end ;
21353: LD_VAR 0 1
21357: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
21358: LD_INT 0
21360: PPUSH
21361: PPUSH
21362: PPUSH
21363: PPUSH
21364: PPUSH
21365: PPUSH
21366: PPUSH
21367: PPUSH
21368: PPUSH
21369: PPUSH
21370: PPUSH
21371: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21372: LD_VAR 0 1
21376: NOT
21377: PUSH
21378: LD_EXP 49
21382: PUSH
21383: LD_VAR 0 1
21387: ARRAY
21388: NOT
21389: OR
21390: PUSH
21391: LD_EXP 49
21395: PUSH
21396: LD_VAR 0 1
21400: ARRAY
21401: PPUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 30
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 30
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: PPUSH
21430: CALL_OW 72
21434: NOT
21435: OR
21436: IFFALSE 21440
// exit ;
21438: GO 24943
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21440: LD_ADDR_VAR 0 4
21444: PUSH
21445: LD_EXP 49
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PPUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 25
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 25
21481: PUSH
21482: LD_INT 3
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 25
21491: PUSH
21492: LD_INT 4
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 25
21501: PUSH
21502: LD_INT 5
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 25
21511: PUSH
21512: LD_INT 8
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 25
21521: PUSH
21522: LD_INT 9
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: PPUSH
21539: CALL_OW 72
21543: ST_TO_ADDR
// if not tmp then
21544: LD_VAR 0 4
21548: NOT
21549: IFFALSE 21553
// exit ;
21551: GO 24943
// for i in tmp do
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_VAR 0 4
21562: PUSH
21563: FOR_IN
21564: IFFALSE 21595
// if GetTag ( i ) then
21566: LD_VAR 0 3
21570: PPUSH
21571: CALL_OW 110
21575: IFFALSE 21593
// tmp := tmp diff i ;
21577: LD_ADDR_VAR 0 4
21581: PUSH
21582: LD_VAR 0 4
21586: PUSH
21587: LD_VAR 0 3
21591: DIFF
21592: ST_TO_ADDR
21593: GO 21563
21595: POP
21596: POP
// if not tmp then
21597: LD_VAR 0 4
21601: NOT
21602: IFFALSE 21606
// exit ;
21604: GO 24943
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21606: LD_ADDR_VAR 0 5
21610: PUSH
21611: LD_EXP 49
21615: PUSH
21616: LD_VAR 0 1
21620: ARRAY
21621: PPUSH
21622: LD_INT 2
21624: PUSH
21625: LD_INT 25
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 25
21637: PUSH
21638: LD_INT 5
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 25
21647: PUSH
21648: LD_INT 8
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 25
21657: PUSH
21658: LD_INT 9
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 72
21676: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
21677: LD_ADDR_VAR 0 6
21681: PUSH
21682: LD_EXP 49
21686: PUSH
21687: LD_VAR 0 1
21691: ARRAY
21692: PPUSH
21693: LD_INT 25
21695: PUSH
21696: LD_INT 2
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PPUSH
21703: CALL_OW 72
21707: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21708: LD_ADDR_VAR 0 7
21712: PUSH
21713: LD_EXP 49
21717: PUSH
21718: LD_VAR 0 1
21722: ARRAY
21723: PPUSH
21724: LD_INT 25
21726: PUSH
21727: LD_INT 3
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 72
21738: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
21739: LD_ADDR_VAR 0 8
21743: PUSH
21744: LD_EXP 49
21748: PUSH
21749: LD_VAR 0 1
21753: ARRAY
21754: PPUSH
21755: LD_INT 25
21757: PUSH
21758: LD_INT 4
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 24
21767: PUSH
21768: LD_INT 251
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PPUSH
21779: CALL_OW 72
21783: ST_TO_ADDR
// if mc_scan [ base ] then
21784: LD_EXP 72
21788: PUSH
21789: LD_VAR 0 1
21793: ARRAY
21794: IFFALSE 22255
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
21796: LD_ADDR_EXP 91
21800: PUSH
21801: LD_EXP 91
21805: PPUSH
21806: LD_VAR 0 1
21810: PPUSH
21811: LD_INT 4
21813: PPUSH
21814: CALL_OW 1
21818: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
21819: LD_ADDR_VAR 0 12
21823: PUSH
21824: LD_EXP 49
21828: PUSH
21829: LD_VAR 0 1
21833: ARRAY
21834: PPUSH
21835: LD_INT 2
21837: PUSH
21838: LD_INT 30
21840: PUSH
21841: LD_INT 4
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 30
21850: PUSH
21851: LD_INT 5
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 72
21867: ST_TO_ADDR
// if not b then
21868: LD_VAR 0 12
21872: NOT
21873: IFFALSE 21877
// exit ;
21875: GO 24943
// p := [ ] ;
21877: LD_ADDR_VAR 0 11
21881: PUSH
21882: EMPTY
21883: ST_TO_ADDR
// if sci >= 2 then
21884: LD_VAR 0 8
21888: PUSH
21889: LD_INT 2
21891: GREATEREQUAL
21892: IFFALSE 21923
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
21894: LD_ADDR_VAR 0 8
21898: PUSH
21899: LD_VAR 0 8
21903: PUSH
21904: LD_INT 1
21906: ARRAY
21907: PUSH
21908: LD_VAR 0 8
21912: PUSH
21913: LD_INT 2
21915: ARRAY
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: ST_TO_ADDR
21921: GO 21984
// if sci = 1 then
21923: LD_VAR 0 8
21927: PUSH
21928: LD_INT 1
21930: EQUAL
21931: IFFALSE 21952
// sci := [ sci [ 1 ] ] else
21933: LD_ADDR_VAR 0 8
21937: PUSH
21938: LD_VAR 0 8
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PUSH
21947: EMPTY
21948: LIST
21949: ST_TO_ADDR
21950: GO 21984
// if sci = 0 then
21952: LD_VAR 0 8
21956: PUSH
21957: LD_INT 0
21959: EQUAL
21960: IFFALSE 21984
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
21962: LD_ADDR_VAR 0 11
21966: PUSH
21967: LD_VAR 0 4
21971: PPUSH
21972: LD_INT 4
21974: PPUSH
21975: CALL 87529 0 2
21979: PUSH
21980: LD_INT 1
21982: ARRAY
21983: ST_TO_ADDR
// if eng > 4 then
21984: LD_VAR 0 6
21988: PUSH
21989: LD_INT 4
21991: GREATER
21992: IFFALSE 22038
// for i = eng downto 4 do
21994: LD_ADDR_VAR 0 3
21998: PUSH
21999: DOUBLE
22000: LD_VAR 0 6
22004: INC
22005: ST_TO_ADDR
22006: LD_INT 4
22008: PUSH
22009: FOR_DOWNTO
22010: IFFALSE 22036
// eng := eng diff eng [ i ] ;
22012: LD_ADDR_VAR 0 6
22016: PUSH
22017: LD_VAR 0 6
22021: PUSH
22022: LD_VAR 0 6
22026: PUSH
22027: LD_VAR 0 3
22031: ARRAY
22032: DIFF
22033: ST_TO_ADDR
22034: GO 22009
22036: POP
22037: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22038: LD_ADDR_VAR 0 4
22042: PUSH
22043: LD_VAR 0 4
22047: PUSH
22048: LD_VAR 0 5
22052: PUSH
22053: LD_VAR 0 6
22057: UNION
22058: PUSH
22059: LD_VAR 0 7
22063: UNION
22064: PUSH
22065: LD_VAR 0 8
22069: UNION
22070: DIFF
22071: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22072: LD_ADDR_VAR 0 13
22076: PUSH
22077: LD_EXP 49
22081: PUSH
22082: LD_VAR 0 1
22086: ARRAY
22087: PPUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 30
22093: PUSH
22094: LD_INT 32
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 30
22103: PUSH
22104: LD_INT 31
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: PPUSH
22116: CALL_OW 72
22120: PUSH
22121: LD_EXP 49
22125: PUSH
22126: LD_VAR 0 1
22130: ARRAY
22131: PPUSH
22132: LD_INT 2
22134: PUSH
22135: LD_INT 30
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 5
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 72
22164: PUSH
22165: LD_INT 6
22167: MUL
22168: PLUS
22169: ST_TO_ADDR
// if bcount < tmp then
22170: LD_VAR 0 13
22174: PUSH
22175: LD_VAR 0 4
22179: LESS
22180: IFFALSE 22226
// for i = tmp downto bcount do
22182: LD_ADDR_VAR 0 3
22186: PUSH
22187: DOUBLE
22188: LD_VAR 0 4
22192: INC
22193: ST_TO_ADDR
22194: LD_VAR 0 13
22198: PUSH
22199: FOR_DOWNTO
22200: IFFALSE 22224
// tmp := Delete ( tmp , tmp ) ;
22202: LD_ADDR_VAR 0 4
22206: PUSH
22207: LD_VAR 0 4
22211: PPUSH
22212: LD_VAR 0 4
22216: PPUSH
22217: CALL_OW 3
22221: ST_TO_ADDR
22222: GO 22199
22224: POP
22225: POP
// result := [ tmp , 0 , 0 , p ] ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_VAR 0 4
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: LD_VAR 0 11
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: ST_TO_ADDR
// exit ;
22253: GO 24943
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22255: LD_EXP 49
22259: PUSH
22260: LD_VAR 0 1
22264: ARRAY
22265: PPUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 30
22271: PUSH
22272: LD_INT 6
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 30
22281: PUSH
22282: LD_INT 7
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 30
22291: PUSH
22292: LD_INT 8
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 72
22309: NOT
22310: PUSH
22311: LD_EXP 49
22315: PUSH
22316: LD_VAR 0 1
22320: ARRAY
22321: PPUSH
22322: LD_INT 30
22324: PUSH
22325: LD_INT 3
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PPUSH
22332: CALL_OW 72
22336: NOT
22337: AND
22338: IFFALSE 22410
// begin if eng = tmp then
22340: LD_VAR 0 6
22344: PUSH
22345: LD_VAR 0 4
22349: EQUAL
22350: IFFALSE 22354
// exit ;
22352: GO 24943
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
22354: LD_ADDR_EXP 91
22358: PUSH
22359: LD_EXP 91
22363: PPUSH
22364: LD_VAR 0 1
22368: PPUSH
22369: LD_INT 1
22371: PPUSH
22372: CALL_OW 1
22376: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: LD_VAR 0 4
22389: PUSH
22390: LD_VAR 0 6
22394: DIFF
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 0
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: ST_TO_ADDR
// exit ;
22408: GO 24943
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22410: LD_EXP 76
22414: PUSH
22415: LD_EXP 75
22419: PUSH
22420: LD_VAR 0 1
22424: ARRAY
22425: ARRAY
22426: PUSH
22427: LD_EXP 49
22431: PUSH
22432: LD_VAR 0 1
22436: ARRAY
22437: PPUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 30
22443: PUSH
22444: LD_INT 6
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: LD_INT 7
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 8
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 72
22481: AND
22482: PUSH
22483: LD_EXP 49
22487: PUSH
22488: LD_VAR 0 1
22492: ARRAY
22493: PPUSH
22494: LD_INT 30
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PPUSH
22504: CALL_OW 72
22508: NOT
22509: AND
22510: IFFALSE 22724
// begin if sci >= 6 then
22512: LD_VAR 0 8
22516: PUSH
22517: LD_INT 6
22519: GREATEREQUAL
22520: IFFALSE 22524
// exit ;
22522: GO 24943
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
22524: LD_ADDR_EXP 91
22528: PUSH
22529: LD_EXP 91
22533: PPUSH
22534: LD_VAR 0 1
22538: PPUSH
22539: LD_INT 2
22541: PPUSH
22542: CALL_OW 1
22546: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
22547: LD_ADDR_VAR 0 9
22551: PUSH
22552: LD_VAR 0 4
22556: PUSH
22557: LD_VAR 0 8
22561: DIFF
22562: PPUSH
22563: LD_INT 4
22565: PPUSH
22566: CALL 87529 0 2
22570: ST_TO_ADDR
// p := [ ] ;
22571: LD_ADDR_VAR 0 11
22575: PUSH
22576: EMPTY
22577: ST_TO_ADDR
// if sci < 6 and sort > 6 then
22578: LD_VAR 0 8
22582: PUSH
22583: LD_INT 6
22585: LESS
22586: PUSH
22587: LD_VAR 0 9
22591: PUSH
22592: LD_INT 6
22594: GREATER
22595: AND
22596: IFFALSE 22677
// begin for i = 1 to 6 - sci do
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: DOUBLE
22604: LD_INT 1
22606: DEC
22607: ST_TO_ADDR
22608: LD_INT 6
22610: PUSH
22611: LD_VAR 0 8
22615: MINUS
22616: PUSH
22617: FOR_TO
22618: IFFALSE 22673
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
22620: LD_ADDR_VAR 0 11
22624: PUSH
22625: LD_VAR 0 11
22629: PPUSH
22630: LD_VAR 0 11
22634: PUSH
22635: LD_INT 1
22637: PLUS
22638: PPUSH
22639: LD_VAR 0 9
22643: PUSH
22644: LD_INT 1
22646: ARRAY
22647: PPUSH
22648: CALL_OW 2
22652: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
22653: LD_ADDR_VAR 0 9
22657: PUSH
22658: LD_VAR 0 9
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 3
22670: ST_TO_ADDR
// end ;
22671: GO 22617
22673: POP
22674: POP
// end else
22675: GO 22697
// if sort then
22677: LD_VAR 0 9
22681: IFFALSE 22697
// p := sort [ 1 ] ;
22683: LD_ADDR_VAR 0 11
22687: PUSH
22688: LD_VAR 0 9
22692: PUSH
22693: LD_INT 1
22695: ARRAY
22696: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
22697: LD_ADDR_VAR 0 2
22701: PUSH
22702: LD_INT 0
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_VAR 0 11
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: ST_TO_ADDR
// exit ;
22722: GO 24943
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22724: LD_EXP 76
22728: PUSH
22729: LD_EXP 75
22733: PUSH
22734: LD_VAR 0 1
22738: ARRAY
22739: ARRAY
22740: PUSH
22741: LD_EXP 49
22745: PUSH
22746: LD_VAR 0 1
22750: ARRAY
22751: PPUSH
22752: LD_INT 2
22754: PUSH
22755: LD_INT 30
22757: PUSH
22758: LD_INT 6
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 30
22767: PUSH
22768: LD_INT 7
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 30
22777: PUSH
22778: LD_INT 8
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: PPUSH
22791: CALL_OW 72
22795: AND
22796: PUSH
22797: LD_EXP 49
22801: PUSH
22802: LD_VAR 0 1
22806: ARRAY
22807: PPUSH
22808: LD_INT 30
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 72
22822: AND
22823: IFFALSE 23557
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
22825: LD_ADDR_EXP 91
22829: PUSH
22830: LD_EXP 91
22834: PPUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: LD_INT 3
22842: PPUSH
22843: CALL_OW 1
22847: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22848: LD_ADDR_VAR 0 2
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: ST_TO_ADDR
// if not eng then
22871: LD_VAR 0 6
22875: NOT
22876: IFFALSE 22939
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
22878: LD_ADDR_VAR 0 11
22882: PUSH
22883: LD_VAR 0 4
22887: PPUSH
22888: LD_INT 2
22890: PPUSH
22891: CALL 87529 0 2
22895: PUSH
22896: LD_INT 1
22898: ARRAY
22899: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
22900: LD_ADDR_VAR 0 2
22904: PUSH
22905: LD_VAR 0 2
22909: PPUSH
22910: LD_INT 2
22912: PPUSH
22913: LD_VAR 0 11
22917: PPUSH
22918: CALL_OW 1
22922: ST_TO_ADDR
// tmp := tmp diff p ;
22923: LD_ADDR_VAR 0 4
22927: PUSH
22928: LD_VAR 0 4
22932: PUSH
22933: LD_VAR 0 11
22937: DIFF
22938: ST_TO_ADDR
// end ; if tmp and sci < 6 then
22939: LD_VAR 0 4
22943: PUSH
22944: LD_VAR 0 8
22948: PUSH
22949: LD_INT 6
22951: LESS
22952: AND
22953: IFFALSE 23141
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
22955: LD_ADDR_VAR 0 9
22959: PUSH
22960: LD_VAR 0 4
22964: PUSH
22965: LD_VAR 0 8
22969: PUSH
22970: LD_VAR 0 7
22974: UNION
22975: DIFF
22976: PPUSH
22977: LD_INT 4
22979: PPUSH
22980: CALL 87529 0 2
22984: ST_TO_ADDR
// p := [ ] ;
22985: LD_ADDR_VAR 0 11
22989: PUSH
22990: EMPTY
22991: ST_TO_ADDR
// if sort then
22992: LD_VAR 0 9
22996: IFFALSE 23112
// for i = 1 to 6 - sci do
22998: LD_ADDR_VAR 0 3
23002: PUSH
23003: DOUBLE
23004: LD_INT 1
23006: DEC
23007: ST_TO_ADDR
23008: LD_INT 6
23010: PUSH
23011: LD_VAR 0 8
23015: MINUS
23016: PUSH
23017: FOR_TO
23018: IFFALSE 23110
// begin if i = sort then
23020: LD_VAR 0 3
23024: PUSH
23025: LD_VAR 0 9
23029: EQUAL
23030: IFFALSE 23034
// break ;
23032: GO 23110
// if GetClass ( i ) = 4 then
23034: LD_VAR 0 3
23038: PPUSH
23039: CALL_OW 257
23043: PUSH
23044: LD_INT 4
23046: EQUAL
23047: IFFALSE 23051
// continue ;
23049: GO 23017
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23051: LD_ADDR_VAR 0 11
23055: PUSH
23056: LD_VAR 0 11
23060: PPUSH
23061: LD_VAR 0 11
23065: PUSH
23066: LD_INT 1
23068: PLUS
23069: PPUSH
23070: LD_VAR 0 9
23074: PUSH
23075: LD_VAR 0 3
23079: ARRAY
23080: PPUSH
23081: CALL_OW 2
23085: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23086: LD_ADDR_VAR 0 4
23090: PUSH
23091: LD_VAR 0 4
23095: PUSH
23096: LD_VAR 0 9
23100: PUSH
23101: LD_VAR 0 3
23105: ARRAY
23106: DIFF
23107: ST_TO_ADDR
// end ;
23108: GO 23017
23110: POP
23111: POP
// if p then
23112: LD_VAR 0 11
23116: IFFALSE 23141
// result := Replace ( result , 4 , p ) ;
23118: LD_ADDR_VAR 0 2
23122: PUSH
23123: LD_VAR 0 2
23127: PPUSH
23128: LD_INT 4
23130: PPUSH
23131: LD_VAR 0 11
23135: PPUSH
23136: CALL_OW 1
23140: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23141: LD_VAR 0 4
23145: PUSH
23146: LD_VAR 0 7
23150: PUSH
23151: LD_INT 6
23153: LESS
23154: AND
23155: IFFALSE 23343
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23157: LD_ADDR_VAR 0 9
23161: PUSH
23162: LD_VAR 0 4
23166: PUSH
23167: LD_VAR 0 8
23171: PUSH
23172: LD_VAR 0 7
23176: UNION
23177: DIFF
23178: PPUSH
23179: LD_INT 3
23181: PPUSH
23182: CALL 87529 0 2
23186: ST_TO_ADDR
// p := [ ] ;
23187: LD_ADDR_VAR 0 11
23191: PUSH
23192: EMPTY
23193: ST_TO_ADDR
// if sort then
23194: LD_VAR 0 9
23198: IFFALSE 23314
// for i = 1 to 6 - mech do
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: DOUBLE
23206: LD_INT 1
23208: DEC
23209: ST_TO_ADDR
23210: LD_INT 6
23212: PUSH
23213: LD_VAR 0 7
23217: MINUS
23218: PUSH
23219: FOR_TO
23220: IFFALSE 23312
// begin if i = sort then
23222: LD_VAR 0 3
23226: PUSH
23227: LD_VAR 0 9
23231: EQUAL
23232: IFFALSE 23236
// break ;
23234: GO 23312
// if GetClass ( i ) = 3 then
23236: LD_VAR 0 3
23240: PPUSH
23241: CALL_OW 257
23245: PUSH
23246: LD_INT 3
23248: EQUAL
23249: IFFALSE 23253
// continue ;
23251: GO 23219
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23253: LD_ADDR_VAR 0 11
23257: PUSH
23258: LD_VAR 0 11
23262: PPUSH
23263: LD_VAR 0 11
23267: PUSH
23268: LD_INT 1
23270: PLUS
23271: PPUSH
23272: LD_VAR 0 9
23276: PUSH
23277: LD_VAR 0 3
23281: ARRAY
23282: PPUSH
23283: CALL_OW 2
23287: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23288: LD_ADDR_VAR 0 4
23292: PUSH
23293: LD_VAR 0 4
23297: PUSH
23298: LD_VAR 0 9
23302: PUSH
23303: LD_VAR 0 3
23307: ARRAY
23308: DIFF
23309: ST_TO_ADDR
// end ;
23310: GO 23219
23312: POP
23313: POP
// if p then
23314: LD_VAR 0 11
23318: IFFALSE 23343
// result := Replace ( result , 3 , p ) ;
23320: LD_ADDR_VAR 0 2
23324: PUSH
23325: LD_VAR 0 2
23329: PPUSH
23330: LD_INT 3
23332: PPUSH
23333: LD_VAR 0 11
23337: PPUSH
23338: CALL_OW 1
23342: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
23343: LD_VAR 0 4
23347: PUSH
23348: LD_INT 6
23350: GREATER
23351: PUSH
23352: LD_VAR 0 6
23356: PUSH
23357: LD_INT 6
23359: LESS
23360: AND
23361: IFFALSE 23555
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23363: LD_ADDR_VAR 0 9
23367: PUSH
23368: LD_VAR 0 4
23372: PUSH
23373: LD_VAR 0 8
23377: PUSH
23378: LD_VAR 0 7
23382: UNION
23383: PUSH
23384: LD_VAR 0 6
23388: UNION
23389: DIFF
23390: PPUSH
23391: LD_INT 2
23393: PPUSH
23394: CALL 87529 0 2
23398: ST_TO_ADDR
// p := [ ] ;
23399: LD_ADDR_VAR 0 11
23403: PUSH
23404: EMPTY
23405: ST_TO_ADDR
// if sort then
23406: LD_VAR 0 9
23410: IFFALSE 23526
// for i = 1 to 6 - eng do
23412: LD_ADDR_VAR 0 3
23416: PUSH
23417: DOUBLE
23418: LD_INT 1
23420: DEC
23421: ST_TO_ADDR
23422: LD_INT 6
23424: PUSH
23425: LD_VAR 0 6
23429: MINUS
23430: PUSH
23431: FOR_TO
23432: IFFALSE 23524
// begin if i = sort then
23434: LD_VAR 0 3
23438: PUSH
23439: LD_VAR 0 9
23443: EQUAL
23444: IFFALSE 23448
// break ;
23446: GO 23524
// if GetClass ( i ) = 2 then
23448: LD_VAR 0 3
23452: PPUSH
23453: CALL_OW 257
23457: PUSH
23458: LD_INT 2
23460: EQUAL
23461: IFFALSE 23465
// continue ;
23463: GO 23431
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23465: LD_ADDR_VAR 0 11
23469: PUSH
23470: LD_VAR 0 11
23474: PPUSH
23475: LD_VAR 0 11
23479: PUSH
23480: LD_INT 1
23482: PLUS
23483: PPUSH
23484: LD_VAR 0 9
23488: PUSH
23489: LD_VAR 0 3
23493: ARRAY
23494: PPUSH
23495: CALL_OW 2
23499: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23500: LD_ADDR_VAR 0 4
23504: PUSH
23505: LD_VAR 0 4
23509: PUSH
23510: LD_VAR 0 9
23514: PUSH
23515: LD_VAR 0 3
23519: ARRAY
23520: DIFF
23521: ST_TO_ADDR
// end ;
23522: GO 23431
23524: POP
23525: POP
// if p then
23526: LD_VAR 0 11
23530: IFFALSE 23555
// result := Replace ( result , 2 , p ) ;
23532: LD_ADDR_VAR 0 2
23536: PUSH
23537: LD_VAR 0 2
23541: PPUSH
23542: LD_INT 2
23544: PPUSH
23545: LD_VAR 0 11
23549: PPUSH
23550: CALL_OW 1
23554: ST_TO_ADDR
// end ; exit ;
23555: GO 24943
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
23557: LD_EXP 76
23561: PUSH
23562: LD_EXP 75
23566: PUSH
23567: LD_VAR 0 1
23571: ARRAY
23572: ARRAY
23573: NOT
23574: PUSH
23575: LD_EXP 49
23579: PUSH
23580: LD_VAR 0 1
23584: ARRAY
23585: PPUSH
23586: LD_INT 30
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 72
23600: AND
23601: PUSH
23602: LD_EXP 54
23606: PUSH
23607: LD_VAR 0 1
23611: ARRAY
23612: AND
23613: IFFALSE 24221
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
23615: LD_ADDR_EXP 91
23619: PUSH
23620: LD_EXP 91
23624: PPUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: LD_INT 5
23632: PPUSH
23633: CALL_OW 1
23637: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23638: LD_ADDR_VAR 0 2
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: ST_TO_ADDR
// if sci > 1 then
23661: LD_VAR 0 8
23665: PUSH
23666: LD_INT 1
23668: GREATER
23669: IFFALSE 23697
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
23671: LD_ADDR_VAR 0 4
23675: PUSH
23676: LD_VAR 0 4
23680: PUSH
23681: LD_VAR 0 8
23685: PUSH
23686: LD_VAR 0 8
23690: PUSH
23691: LD_INT 1
23693: ARRAY
23694: DIFF
23695: DIFF
23696: ST_TO_ADDR
// if tmp and not sci then
23697: LD_VAR 0 4
23701: PUSH
23702: LD_VAR 0 8
23706: NOT
23707: AND
23708: IFFALSE 23777
// begin sort := SortBySkill ( tmp , 4 ) ;
23710: LD_ADDR_VAR 0 9
23714: PUSH
23715: LD_VAR 0 4
23719: PPUSH
23720: LD_INT 4
23722: PPUSH
23723: CALL 87529 0 2
23727: ST_TO_ADDR
// if sort then
23728: LD_VAR 0 9
23732: IFFALSE 23748
// p := sort [ 1 ] ;
23734: LD_ADDR_VAR 0 11
23738: PUSH
23739: LD_VAR 0 9
23743: PUSH
23744: LD_INT 1
23746: ARRAY
23747: ST_TO_ADDR
// if p then
23748: LD_VAR 0 11
23752: IFFALSE 23777
// result := Replace ( result , 4 , p ) ;
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: LD_VAR 0 2
23763: PPUSH
23764: LD_INT 4
23766: PPUSH
23767: LD_VAR 0 11
23771: PPUSH
23772: CALL_OW 1
23776: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23777: LD_ADDR_VAR 0 4
23781: PUSH
23782: LD_VAR 0 4
23786: PUSH
23787: LD_VAR 0 7
23791: DIFF
23792: ST_TO_ADDR
// if tmp and mech < 6 then
23793: LD_VAR 0 4
23797: PUSH
23798: LD_VAR 0 7
23802: PUSH
23803: LD_INT 6
23805: LESS
23806: AND
23807: IFFALSE 23995
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23809: LD_ADDR_VAR 0 9
23813: PUSH
23814: LD_VAR 0 4
23818: PUSH
23819: LD_VAR 0 8
23823: PUSH
23824: LD_VAR 0 7
23828: UNION
23829: DIFF
23830: PPUSH
23831: LD_INT 3
23833: PPUSH
23834: CALL 87529 0 2
23838: ST_TO_ADDR
// p := [ ] ;
23839: LD_ADDR_VAR 0 11
23843: PUSH
23844: EMPTY
23845: ST_TO_ADDR
// if sort then
23846: LD_VAR 0 9
23850: IFFALSE 23966
// for i = 1 to 6 - mech do
23852: LD_ADDR_VAR 0 3
23856: PUSH
23857: DOUBLE
23858: LD_INT 1
23860: DEC
23861: ST_TO_ADDR
23862: LD_INT 6
23864: PUSH
23865: LD_VAR 0 7
23869: MINUS
23870: PUSH
23871: FOR_TO
23872: IFFALSE 23964
// begin if i = sort then
23874: LD_VAR 0 3
23878: PUSH
23879: LD_VAR 0 9
23883: EQUAL
23884: IFFALSE 23888
// break ;
23886: GO 23964
// if GetClass ( i ) = 3 then
23888: LD_VAR 0 3
23892: PPUSH
23893: CALL_OW 257
23897: PUSH
23898: LD_INT 3
23900: EQUAL
23901: IFFALSE 23905
// continue ;
23903: GO 23871
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23905: LD_ADDR_VAR 0 11
23909: PUSH
23910: LD_VAR 0 11
23914: PPUSH
23915: LD_VAR 0 11
23919: PUSH
23920: LD_INT 1
23922: PLUS
23923: PPUSH
23924: LD_VAR 0 9
23928: PUSH
23929: LD_VAR 0 3
23933: ARRAY
23934: PPUSH
23935: CALL_OW 2
23939: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23940: LD_ADDR_VAR 0 4
23944: PUSH
23945: LD_VAR 0 4
23949: PUSH
23950: LD_VAR 0 9
23954: PUSH
23955: LD_VAR 0 3
23959: ARRAY
23960: DIFF
23961: ST_TO_ADDR
// end ;
23962: GO 23871
23964: POP
23965: POP
// if p then
23966: LD_VAR 0 11
23970: IFFALSE 23995
// result := Replace ( result , 3 , p ) ;
23972: LD_ADDR_VAR 0 2
23976: PUSH
23977: LD_VAR 0 2
23981: PPUSH
23982: LD_INT 3
23984: PPUSH
23985: LD_VAR 0 11
23989: PPUSH
23990: CALL_OW 1
23994: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23995: LD_ADDR_VAR 0 4
23999: PUSH
24000: LD_VAR 0 4
24004: PUSH
24005: LD_VAR 0 6
24009: DIFF
24010: ST_TO_ADDR
// if tmp and eng < 6 then
24011: LD_VAR 0 4
24015: PUSH
24016: LD_VAR 0 6
24020: PUSH
24021: LD_INT 6
24023: LESS
24024: AND
24025: IFFALSE 24219
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24027: LD_ADDR_VAR 0 9
24031: PUSH
24032: LD_VAR 0 4
24036: PUSH
24037: LD_VAR 0 8
24041: PUSH
24042: LD_VAR 0 7
24046: UNION
24047: PUSH
24048: LD_VAR 0 6
24052: UNION
24053: DIFF
24054: PPUSH
24055: LD_INT 2
24057: PPUSH
24058: CALL 87529 0 2
24062: ST_TO_ADDR
// p := [ ] ;
24063: LD_ADDR_VAR 0 11
24067: PUSH
24068: EMPTY
24069: ST_TO_ADDR
// if sort then
24070: LD_VAR 0 9
24074: IFFALSE 24190
// for i = 1 to 6 - eng do
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: DOUBLE
24082: LD_INT 1
24084: DEC
24085: ST_TO_ADDR
24086: LD_INT 6
24088: PUSH
24089: LD_VAR 0 6
24093: MINUS
24094: PUSH
24095: FOR_TO
24096: IFFALSE 24188
// begin if i = sort then
24098: LD_VAR 0 3
24102: PUSH
24103: LD_VAR 0 9
24107: EQUAL
24108: IFFALSE 24112
// break ;
24110: GO 24188
// if GetClass ( i ) = 2 then
24112: LD_VAR 0 3
24116: PPUSH
24117: CALL_OW 257
24121: PUSH
24122: LD_INT 2
24124: EQUAL
24125: IFFALSE 24129
// continue ;
24127: GO 24095
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24129: LD_ADDR_VAR 0 11
24133: PUSH
24134: LD_VAR 0 11
24138: PPUSH
24139: LD_VAR 0 11
24143: PUSH
24144: LD_INT 1
24146: PLUS
24147: PPUSH
24148: LD_VAR 0 9
24152: PUSH
24153: LD_VAR 0 3
24157: ARRAY
24158: PPUSH
24159: CALL_OW 2
24163: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24164: LD_ADDR_VAR 0 4
24168: PUSH
24169: LD_VAR 0 4
24173: PUSH
24174: LD_VAR 0 9
24178: PUSH
24179: LD_VAR 0 3
24183: ARRAY
24184: DIFF
24185: ST_TO_ADDR
// end ;
24186: GO 24095
24188: POP
24189: POP
// if p then
24190: LD_VAR 0 11
24194: IFFALSE 24219
// result := Replace ( result , 2 , p ) ;
24196: LD_ADDR_VAR 0 2
24200: PUSH
24201: LD_VAR 0 2
24205: PPUSH
24206: LD_INT 2
24208: PPUSH
24209: LD_VAR 0 11
24213: PPUSH
24214: CALL_OW 1
24218: ST_TO_ADDR
// end ; exit ;
24219: GO 24943
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24221: LD_EXP 76
24225: PUSH
24226: LD_EXP 75
24230: PUSH
24231: LD_VAR 0 1
24235: ARRAY
24236: ARRAY
24237: NOT
24238: PUSH
24239: LD_EXP 49
24243: PUSH
24244: LD_VAR 0 1
24248: ARRAY
24249: PPUSH
24250: LD_INT 30
24252: PUSH
24253: LD_INT 3
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 72
24264: AND
24265: PUSH
24266: LD_EXP 54
24270: PUSH
24271: LD_VAR 0 1
24275: ARRAY
24276: NOT
24277: AND
24278: IFFALSE 24943
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24280: LD_ADDR_EXP 91
24284: PUSH
24285: LD_EXP 91
24289: PPUSH
24290: LD_VAR 0 1
24294: PPUSH
24295: LD_INT 6
24297: PPUSH
24298: CALL_OW 1
24302: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24303: LD_ADDR_VAR 0 2
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: ST_TO_ADDR
// if sci >= 1 then
24326: LD_VAR 0 8
24330: PUSH
24331: LD_INT 1
24333: GREATEREQUAL
24334: IFFALSE 24356
// tmp := tmp diff sci [ 1 ] ;
24336: LD_ADDR_VAR 0 4
24340: PUSH
24341: LD_VAR 0 4
24345: PUSH
24346: LD_VAR 0 8
24350: PUSH
24351: LD_INT 1
24353: ARRAY
24354: DIFF
24355: ST_TO_ADDR
// if tmp and not sci then
24356: LD_VAR 0 4
24360: PUSH
24361: LD_VAR 0 8
24365: NOT
24366: AND
24367: IFFALSE 24436
// begin sort := SortBySkill ( tmp , 4 ) ;
24369: LD_ADDR_VAR 0 9
24373: PUSH
24374: LD_VAR 0 4
24378: PPUSH
24379: LD_INT 4
24381: PPUSH
24382: CALL 87529 0 2
24386: ST_TO_ADDR
// if sort then
24387: LD_VAR 0 9
24391: IFFALSE 24407
// p := sort [ 1 ] ;
24393: LD_ADDR_VAR 0 11
24397: PUSH
24398: LD_VAR 0 9
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: ST_TO_ADDR
// if p then
24407: LD_VAR 0 11
24411: IFFALSE 24436
// result := Replace ( result , 4 , p ) ;
24413: LD_ADDR_VAR 0 2
24417: PUSH
24418: LD_VAR 0 2
24422: PPUSH
24423: LD_INT 4
24425: PPUSH
24426: LD_VAR 0 11
24430: PPUSH
24431: CALL_OW 1
24435: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24436: LD_ADDR_VAR 0 4
24440: PUSH
24441: LD_VAR 0 4
24445: PUSH
24446: LD_VAR 0 7
24450: DIFF
24451: ST_TO_ADDR
// if tmp and mech < 6 then
24452: LD_VAR 0 4
24456: PUSH
24457: LD_VAR 0 7
24461: PUSH
24462: LD_INT 6
24464: LESS
24465: AND
24466: IFFALSE 24648
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
24468: LD_ADDR_VAR 0 9
24472: PUSH
24473: LD_VAR 0 4
24477: PUSH
24478: LD_VAR 0 7
24482: DIFF
24483: PPUSH
24484: LD_INT 3
24486: PPUSH
24487: CALL 87529 0 2
24491: ST_TO_ADDR
// p := [ ] ;
24492: LD_ADDR_VAR 0 11
24496: PUSH
24497: EMPTY
24498: ST_TO_ADDR
// if sort then
24499: LD_VAR 0 9
24503: IFFALSE 24619
// for i = 1 to 6 - mech do
24505: LD_ADDR_VAR 0 3
24509: PUSH
24510: DOUBLE
24511: LD_INT 1
24513: DEC
24514: ST_TO_ADDR
24515: LD_INT 6
24517: PUSH
24518: LD_VAR 0 7
24522: MINUS
24523: PUSH
24524: FOR_TO
24525: IFFALSE 24617
// begin if i = sort then
24527: LD_VAR 0 3
24531: PUSH
24532: LD_VAR 0 9
24536: EQUAL
24537: IFFALSE 24541
// break ;
24539: GO 24617
// if GetClass ( i ) = 3 then
24541: LD_VAR 0 3
24545: PPUSH
24546: CALL_OW 257
24550: PUSH
24551: LD_INT 3
24553: EQUAL
24554: IFFALSE 24558
// continue ;
24556: GO 24524
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24558: LD_ADDR_VAR 0 11
24562: PUSH
24563: LD_VAR 0 11
24567: PPUSH
24568: LD_VAR 0 11
24572: PUSH
24573: LD_INT 1
24575: PLUS
24576: PPUSH
24577: LD_VAR 0 9
24581: PUSH
24582: LD_VAR 0 3
24586: ARRAY
24587: PPUSH
24588: CALL_OW 2
24592: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24593: LD_ADDR_VAR 0 4
24597: PUSH
24598: LD_VAR 0 4
24602: PUSH
24603: LD_VAR 0 9
24607: PUSH
24608: LD_VAR 0 3
24612: ARRAY
24613: DIFF
24614: ST_TO_ADDR
// end ;
24615: GO 24524
24617: POP
24618: POP
// if p then
24619: LD_VAR 0 11
24623: IFFALSE 24648
// result := Replace ( result , 3 , p ) ;
24625: LD_ADDR_VAR 0 2
24629: PUSH
24630: LD_VAR 0 2
24634: PPUSH
24635: LD_INT 3
24637: PPUSH
24638: LD_VAR 0 11
24642: PPUSH
24643: CALL_OW 1
24647: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24648: LD_ADDR_VAR 0 4
24652: PUSH
24653: LD_VAR 0 4
24657: PUSH
24658: LD_VAR 0 6
24662: DIFF
24663: ST_TO_ADDR
// if tmp and eng < 4 then
24664: LD_VAR 0 4
24668: PUSH
24669: LD_VAR 0 6
24673: PUSH
24674: LD_INT 4
24676: LESS
24677: AND
24678: IFFALSE 24868
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
24680: LD_ADDR_VAR 0 9
24684: PUSH
24685: LD_VAR 0 4
24689: PUSH
24690: LD_VAR 0 7
24694: PUSH
24695: LD_VAR 0 6
24699: UNION
24700: DIFF
24701: PPUSH
24702: LD_INT 2
24704: PPUSH
24705: CALL 87529 0 2
24709: ST_TO_ADDR
// p := [ ] ;
24710: LD_ADDR_VAR 0 11
24714: PUSH
24715: EMPTY
24716: ST_TO_ADDR
// if sort then
24717: LD_VAR 0 9
24721: IFFALSE 24837
// for i = 1 to 4 - eng do
24723: LD_ADDR_VAR 0 3
24727: PUSH
24728: DOUBLE
24729: LD_INT 1
24731: DEC
24732: ST_TO_ADDR
24733: LD_INT 4
24735: PUSH
24736: LD_VAR 0 6
24740: MINUS
24741: PUSH
24742: FOR_TO
24743: IFFALSE 24835
// begin if i = sort then
24745: LD_VAR 0 3
24749: PUSH
24750: LD_VAR 0 9
24754: EQUAL
24755: IFFALSE 24759
// break ;
24757: GO 24835
// if GetClass ( i ) = 2 then
24759: LD_VAR 0 3
24763: PPUSH
24764: CALL_OW 257
24768: PUSH
24769: LD_INT 2
24771: EQUAL
24772: IFFALSE 24776
// continue ;
24774: GO 24742
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24776: LD_ADDR_VAR 0 11
24780: PUSH
24781: LD_VAR 0 11
24785: PPUSH
24786: LD_VAR 0 11
24790: PUSH
24791: LD_INT 1
24793: PLUS
24794: PPUSH
24795: LD_VAR 0 9
24799: PUSH
24800: LD_VAR 0 3
24804: ARRAY
24805: PPUSH
24806: CALL_OW 2
24810: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: LD_VAR 0 4
24820: PUSH
24821: LD_VAR 0 9
24825: PUSH
24826: LD_VAR 0 3
24830: ARRAY
24831: DIFF
24832: ST_TO_ADDR
// end ;
24833: GO 24742
24835: POP
24836: POP
// if p then
24837: LD_VAR 0 11
24841: IFFALSE 24866
// result := Replace ( result , 2 , p ) ;
24843: LD_ADDR_VAR 0 2
24847: PUSH
24848: LD_VAR 0 2
24852: PPUSH
24853: LD_INT 2
24855: PPUSH
24856: LD_VAR 0 11
24860: PPUSH
24861: CALL_OW 1
24865: ST_TO_ADDR
// end else
24866: GO 24912
// for i = eng downto 5 do
24868: LD_ADDR_VAR 0 3
24872: PUSH
24873: DOUBLE
24874: LD_VAR 0 6
24878: INC
24879: ST_TO_ADDR
24880: LD_INT 5
24882: PUSH
24883: FOR_DOWNTO
24884: IFFALSE 24910
// tmp := tmp union eng [ i ] ;
24886: LD_ADDR_VAR 0 4
24890: PUSH
24891: LD_VAR 0 4
24895: PUSH
24896: LD_VAR 0 6
24900: PUSH
24901: LD_VAR 0 3
24905: ARRAY
24906: UNION
24907: ST_TO_ADDR
24908: GO 24883
24910: POP
24911: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
24912: LD_ADDR_VAR 0 2
24916: PUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_INT 1
24924: PPUSH
24925: LD_VAR 0 4
24929: PUSH
24930: LD_VAR 0 5
24934: DIFF
24935: PPUSH
24936: CALL_OW 1
24940: ST_TO_ADDR
// exit ;
24941: GO 24943
// end ; end ;
24943: LD_VAR 0 2
24947: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
24948: LD_INT 0
24950: PPUSH
24951: PPUSH
24952: PPUSH
// if not mc_bases then
24953: LD_EXP 49
24957: NOT
24958: IFFALSE 24962
// exit ;
24960: GO 25068
// for i = 1 to mc_bases do
24962: LD_ADDR_VAR 0 2
24966: PUSH
24967: DOUBLE
24968: LD_INT 1
24970: DEC
24971: ST_TO_ADDR
24972: LD_EXP 49
24976: PUSH
24977: FOR_TO
24978: IFFALSE 25059
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_EXP 49
24989: PUSH
24990: LD_VAR 0 2
24994: ARRAY
24995: PPUSH
24996: LD_INT 21
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: LD_INT 24
25011: PUSH
25012: LD_INT 1000
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 72
25031: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25032: LD_ADDR_EXP 50
25036: PUSH
25037: LD_EXP 50
25041: PPUSH
25042: LD_VAR 0 2
25046: PPUSH
25047: LD_VAR 0 3
25051: PPUSH
25052: CALL_OW 1
25056: ST_TO_ADDR
// end ;
25057: GO 24977
25059: POP
25060: POP
// RaiseSailEvent ( 101 ) ;
25061: LD_INT 101
25063: PPUSH
25064: CALL_OW 427
// end ;
25068: LD_VAR 0 1
25072: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
25079: PPUSH
25080: PPUSH
25081: PPUSH
// if not mc_bases then
25082: LD_EXP 49
25086: NOT
25087: IFFALSE 25091
// exit ;
25089: GO 25664
// for i = 1 to mc_bases do
25091: LD_ADDR_VAR 0 2
25095: PUSH
25096: DOUBLE
25097: LD_INT 1
25099: DEC
25100: ST_TO_ADDR
25101: LD_EXP 49
25105: PUSH
25106: FOR_TO
25107: IFFALSE 25655
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25109: LD_ADDR_VAR 0 5
25113: PUSH
25114: LD_EXP 49
25118: PUSH
25119: LD_VAR 0 2
25123: ARRAY
25124: PUSH
25125: LD_EXP 78
25129: PUSH
25130: LD_VAR 0 2
25134: ARRAY
25135: UNION
25136: PPUSH
25137: LD_INT 21
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 54
25155: PUSH
25156: EMPTY
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: LD_INT 24
25168: PUSH
25169: LD_INT 800
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 72
25193: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25194: LD_ADDR_VAR 0 6
25198: PUSH
25199: LD_EXP 49
25203: PUSH
25204: LD_VAR 0 2
25208: ARRAY
25209: PPUSH
25210: LD_INT 21
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 3
25225: PUSH
25226: LD_INT 54
25228: PUSH
25229: EMPTY
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 3
25238: PUSH
25239: LD_INT 24
25241: PUSH
25242: LD_INT 250
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PPUSH
25262: CALL_OW 72
25266: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25267: LD_ADDR_VAR 0 7
25271: PUSH
25272: LD_VAR 0 5
25276: PUSH
25277: LD_VAR 0 6
25281: DIFF
25282: ST_TO_ADDR
// if not need_heal_1 then
25283: LD_VAR 0 6
25287: NOT
25288: IFFALSE 25321
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25290: LD_ADDR_EXP 52
25294: PUSH
25295: LD_EXP 52
25299: PPUSH
25300: LD_VAR 0 2
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PPUSH
25312: EMPTY
25313: PPUSH
25314: CALL 53281 0 3
25318: ST_TO_ADDR
25319: GO 25391
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
25321: LD_ADDR_EXP 52
25325: PUSH
25326: LD_EXP 52
25330: PPUSH
25331: LD_VAR 0 2
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PPUSH
25343: LD_EXP 52
25347: PUSH
25348: LD_VAR 0 2
25352: ARRAY
25353: PUSH
25354: LD_INT 1
25356: ARRAY
25357: PPUSH
25358: LD_INT 3
25360: PUSH
25361: LD_INT 24
25363: PUSH
25364: LD_INT 1000
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PPUSH
25375: CALL_OW 72
25379: PUSH
25380: LD_VAR 0 6
25384: UNION
25385: PPUSH
25386: CALL 53281 0 3
25390: ST_TO_ADDR
// if not need_heal_2 then
25391: LD_VAR 0 7
25395: NOT
25396: IFFALSE 25429
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
25398: LD_ADDR_EXP 52
25402: PUSH
25403: LD_EXP 52
25407: PPUSH
25408: LD_VAR 0 2
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PPUSH
25420: EMPTY
25421: PPUSH
25422: CALL 53281 0 3
25426: ST_TO_ADDR
25427: GO 25461
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
25429: LD_ADDR_EXP 52
25433: PUSH
25434: LD_EXP 52
25438: PPUSH
25439: LD_VAR 0 2
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: LD_VAR 0 7
25455: PPUSH
25456: CALL 53281 0 3
25460: ST_TO_ADDR
// if need_heal_2 then
25461: LD_VAR 0 7
25465: IFFALSE 25637
// for j in need_heal_2 do
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: LD_VAR 0 7
25476: PUSH
25477: FOR_IN
25478: IFFALSE 25635
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
25480: LD_ADDR_VAR 0 5
25484: PUSH
25485: LD_EXP 49
25489: PUSH
25490: LD_VAR 0 2
25494: ARRAY
25495: PPUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 30
25501: PUSH
25502: LD_INT 6
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 30
25511: PUSH
25512: LD_INT 7
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 30
25521: PUSH
25522: LD_INT 8
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 30
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 30
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 25
25551: PUSH
25552: LD_INT 4
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 72
25572: ST_TO_ADDR
// if tmp then
25573: LD_VAR 0 5
25577: IFFALSE 25633
// begin k := NearestUnitToUnit ( tmp , j ) ;
25579: LD_ADDR_VAR 0 4
25583: PUSH
25584: LD_VAR 0 5
25588: PPUSH
25589: LD_VAR 0 3
25593: PPUSH
25594: CALL_OW 74
25598: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
25599: LD_VAR 0 3
25603: PPUSH
25604: LD_VAR 0 4
25608: PPUSH
25609: CALL_OW 296
25613: PUSH
25614: LD_INT 7
25616: GREATER
25617: IFFALSE 25633
// ComMoveUnit ( j , k ) ;
25619: LD_VAR 0 3
25623: PPUSH
25624: LD_VAR 0 4
25628: PPUSH
25629: CALL_OW 112
// end ; end ;
25633: GO 25477
25635: POP
25636: POP
// if not need_heal_1 and not need_heal_2 then
25637: LD_VAR 0 6
25641: NOT
25642: PUSH
25643: LD_VAR 0 7
25647: NOT
25648: AND
25649: IFFALSE 25653
// continue ;
25651: GO 25106
// end ;
25653: GO 25106
25655: POP
25656: POP
// RaiseSailEvent ( 102 ) ;
25657: LD_INT 102
25659: PPUSH
25660: CALL_OW 427
// end ;
25664: LD_VAR 0 1
25668: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
25669: LD_INT 0
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
// if not mc_bases then
25677: LD_EXP 49
25681: NOT
25682: IFFALSE 25686
// exit ;
25684: GO 26396
// for i = 1 to mc_bases do
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: DOUBLE
25692: LD_INT 1
25694: DEC
25695: ST_TO_ADDR
25696: LD_EXP 49
25700: PUSH
25701: FOR_TO
25702: IFFALSE 26394
// begin if not mc_building_need_repair [ i ] then
25704: LD_EXP 50
25708: PUSH
25709: LD_VAR 0 2
25713: ARRAY
25714: NOT
25715: IFFALSE 25889
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
25717: LD_ADDR_VAR 0 6
25721: PUSH
25722: LD_EXP 68
25726: PUSH
25727: LD_VAR 0 2
25731: ARRAY
25732: PPUSH
25733: LD_INT 3
25735: PUSH
25736: LD_INT 24
25738: PUSH
25739: LD_INT 1000
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 34
25755: PUSH
25756: LD_INT 13
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 34
25765: PUSH
25766: LD_INT 52
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PPUSH
25782: CALL_OW 72
25786: ST_TO_ADDR
// if cranes then
25787: LD_VAR 0 6
25791: IFFALSE 25853
// for j in cranes do
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_VAR 0 6
25802: PUSH
25803: FOR_IN
25804: IFFALSE 25851
// if not IsInArea ( j , mc_parking [ i ] ) then
25806: LD_VAR 0 3
25810: PPUSH
25811: LD_EXP 73
25815: PUSH
25816: LD_VAR 0 2
25820: ARRAY
25821: PPUSH
25822: CALL_OW 308
25826: NOT
25827: IFFALSE 25849
// ComMoveToArea ( j , mc_parking [ i ] ) ;
25829: LD_VAR 0 3
25833: PPUSH
25834: LD_EXP 73
25838: PUSH
25839: LD_VAR 0 2
25843: ARRAY
25844: PPUSH
25845: CALL_OW 113
25849: GO 25803
25851: POP
25852: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
25853: LD_ADDR_EXP 51
25857: PUSH
25858: LD_EXP 51
25862: PPUSH
25863: LD_VAR 0 2
25867: PPUSH
25868: EMPTY
25869: PPUSH
25870: CALL_OW 1
25874: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
25875: LD_VAR 0 2
25879: PPUSH
25880: LD_INT 101
25882: PPUSH
25883: CALL 20781 0 2
// continue ;
25887: GO 25701
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
25889: LD_ADDR_EXP 55
25893: PUSH
25894: LD_EXP 55
25898: PPUSH
25899: LD_VAR 0 2
25903: PPUSH
25904: EMPTY
25905: PPUSH
25906: CALL_OW 1
25910: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25911: LD_VAR 0 2
25915: PPUSH
25916: LD_INT 103
25918: PPUSH
25919: CALL 20781 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
25923: LD_ADDR_VAR 0 5
25927: PUSH
25928: LD_EXP 49
25932: PUSH
25933: LD_VAR 0 2
25937: ARRAY
25938: PUSH
25939: LD_EXP 78
25943: PUSH
25944: LD_VAR 0 2
25948: ARRAY
25949: UNION
25950: PPUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 25
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 25
25966: PUSH
25967: LD_INT 16
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: LIST
25978: PUSH
25979: EMPTY
25980: LIST
25981: PPUSH
25982: CALL_OW 72
25986: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
25987: LD_ADDR_VAR 0 6
25991: PUSH
25992: LD_EXP 68
25996: PUSH
25997: LD_VAR 0 2
26001: ARRAY
26002: PPUSH
26003: LD_INT 2
26005: PUSH
26006: LD_INT 34
26008: PUSH
26009: LD_INT 13
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 34
26018: PUSH
26019: LD_INT 52
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 72
26035: ST_TO_ADDR
// if cranes then
26036: LD_VAR 0 6
26040: IFFALSE 26176
// begin for j in cranes do
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 6
26051: PUSH
26052: FOR_IN
26053: IFFALSE 26174
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26055: LD_VAR 0 3
26059: PPUSH
26060: CALL_OW 256
26064: PUSH
26065: LD_INT 500
26067: GREATEREQUAL
26068: PUSH
26069: LD_VAR 0 3
26073: PPUSH
26074: CALL_OW 314
26078: NOT
26079: AND
26080: IFFALSE 26114
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26082: LD_VAR 0 3
26086: PPUSH
26087: LD_EXP 50
26091: PUSH
26092: LD_VAR 0 2
26096: ARRAY
26097: PPUSH
26098: LD_VAR 0 3
26102: PPUSH
26103: CALL_OW 74
26107: PPUSH
26108: CALL_OW 130
26112: GO 26172
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26114: LD_VAR 0 3
26118: PPUSH
26119: CALL_OW 256
26123: PUSH
26124: LD_INT 500
26126: LESS
26127: PUSH
26128: LD_VAR 0 3
26132: PPUSH
26133: LD_EXP 73
26137: PUSH
26138: LD_VAR 0 2
26142: ARRAY
26143: PPUSH
26144: CALL_OW 308
26148: NOT
26149: AND
26150: IFFALSE 26172
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26152: LD_VAR 0 3
26156: PPUSH
26157: LD_EXP 73
26161: PUSH
26162: LD_VAR 0 2
26166: ARRAY
26167: PPUSH
26168: CALL_OW 113
26172: GO 26052
26174: POP
26175: POP
// end ; if not tmp then
26176: LD_VAR 0 5
26180: NOT
26181: IFFALSE 26185
// continue ;
26183: GO 25701
// for j in tmp do
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_VAR 0 5
26194: PUSH
26195: FOR_IN
26196: IFFALSE 26390
// begin if mc_need_heal [ i ] then
26198: LD_EXP 52
26202: PUSH
26203: LD_VAR 0 2
26207: ARRAY
26208: IFFALSE 26256
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26210: LD_VAR 0 3
26214: PUSH
26215: LD_EXP 52
26219: PUSH
26220: LD_VAR 0 2
26224: ARRAY
26225: PUSH
26226: LD_INT 1
26228: ARRAY
26229: IN
26230: PUSH
26231: LD_VAR 0 3
26235: PUSH
26236: LD_EXP 52
26240: PUSH
26241: LD_VAR 0 2
26245: ARRAY
26246: PUSH
26247: LD_INT 2
26249: ARRAY
26250: IN
26251: OR
26252: IFFALSE 26256
// continue ;
26254: GO 26195
// if IsInUnit ( j ) then
26256: LD_VAR 0 3
26260: PPUSH
26261: CALL_OW 310
26265: IFFALSE 26276
// ComExitBuilding ( j ) ;
26267: LD_VAR 0 3
26271: PPUSH
26272: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
26276: LD_VAR 0 3
26280: PUSH
26281: LD_EXP 51
26285: PUSH
26286: LD_VAR 0 2
26290: ARRAY
26291: IN
26292: NOT
26293: IFFALSE 26351
// begin SetTag ( j , 101 ) ;
26295: LD_VAR 0 3
26299: PPUSH
26300: LD_INT 101
26302: PPUSH
26303: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26307: LD_ADDR_EXP 51
26311: PUSH
26312: LD_EXP 51
26316: PPUSH
26317: LD_VAR 0 2
26321: PUSH
26322: LD_EXP 51
26326: PUSH
26327: LD_VAR 0 2
26331: ARRAY
26332: PUSH
26333: LD_INT 1
26335: PLUS
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL 53281 0 3
26350: ST_TO_ADDR
// end ; wait ( 1 ) ;
26351: LD_INT 1
26353: PPUSH
26354: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
26358: LD_VAR 0 3
26362: PPUSH
26363: LD_EXP 50
26367: PUSH
26368: LD_VAR 0 2
26372: ARRAY
26373: PPUSH
26374: LD_VAR 0 3
26378: PPUSH
26379: CALL_OW 74
26383: PPUSH
26384: CALL_OW 130
// end ;
26388: GO 26195
26390: POP
26391: POP
// end ;
26392: GO 25701
26394: POP
26395: POP
// end ;
26396: LD_VAR 0 1
26400: RET
// export function MC_Heal ; var i , j , tmp ; begin
26401: LD_INT 0
26403: PPUSH
26404: PPUSH
26405: PPUSH
26406: PPUSH
// if not mc_bases then
26407: LD_EXP 49
26411: NOT
26412: IFFALSE 26416
// exit ;
26414: GO 26818
// for i = 1 to mc_bases do
26416: LD_ADDR_VAR 0 2
26420: PUSH
26421: DOUBLE
26422: LD_INT 1
26424: DEC
26425: ST_TO_ADDR
26426: LD_EXP 49
26430: PUSH
26431: FOR_TO
26432: IFFALSE 26816
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
26434: LD_EXP 52
26438: PUSH
26439: LD_VAR 0 2
26443: ARRAY
26444: PUSH
26445: LD_INT 1
26447: ARRAY
26448: NOT
26449: PUSH
26450: LD_EXP 52
26454: PUSH
26455: LD_VAR 0 2
26459: ARRAY
26460: PUSH
26461: LD_INT 2
26463: ARRAY
26464: NOT
26465: AND
26466: IFFALSE 26504
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
26468: LD_ADDR_EXP 53
26472: PUSH
26473: LD_EXP 53
26477: PPUSH
26478: LD_VAR 0 2
26482: PPUSH
26483: EMPTY
26484: PPUSH
26485: CALL_OW 1
26489: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_INT 102
26497: PPUSH
26498: CALL 20781 0 2
// continue ;
26502: GO 26431
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
26504: LD_ADDR_VAR 0 4
26508: PUSH
26509: LD_EXP 49
26513: PUSH
26514: LD_VAR 0 2
26518: ARRAY
26519: PPUSH
26520: LD_INT 25
26522: PUSH
26523: LD_INT 4
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PPUSH
26530: CALL_OW 72
26534: ST_TO_ADDR
// if not tmp then
26535: LD_VAR 0 4
26539: NOT
26540: IFFALSE 26544
// continue ;
26542: GO 26431
// if mc_taming [ i ] then
26544: LD_EXP 80
26548: PUSH
26549: LD_VAR 0 2
26553: ARRAY
26554: IFFALSE 26578
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
26556: LD_ADDR_EXP 80
26560: PUSH
26561: LD_EXP 80
26565: PPUSH
26566: LD_VAR 0 2
26570: PPUSH
26571: EMPTY
26572: PPUSH
26573: CALL_OW 1
26577: ST_TO_ADDR
// for j in tmp do
26578: LD_ADDR_VAR 0 3
26582: PUSH
26583: LD_VAR 0 4
26587: PUSH
26588: FOR_IN
26589: IFFALSE 26812
// begin if IsInUnit ( j ) then
26591: LD_VAR 0 3
26595: PPUSH
26596: CALL_OW 310
26600: IFFALSE 26611
// ComExitBuilding ( j ) ;
26602: LD_VAR 0 3
26606: PPUSH
26607: CALL_OW 122
// if not j in mc_healers [ i ] then
26611: LD_VAR 0 3
26615: PUSH
26616: LD_EXP 53
26620: PUSH
26621: LD_VAR 0 2
26625: ARRAY
26626: IN
26627: NOT
26628: IFFALSE 26674
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
26630: LD_ADDR_EXP 53
26634: PUSH
26635: LD_EXP 53
26639: PPUSH
26640: LD_VAR 0 2
26644: PUSH
26645: LD_EXP 53
26649: PUSH
26650: LD_VAR 0 2
26654: ARRAY
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PPUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL 53281 0 3
26673: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 110
26683: PUSH
26684: LD_INT 102
26686: NONEQUAL
26687: IFFALSE 26701
// SetTag ( j , 102 ) ;
26689: LD_VAR 0 3
26693: PPUSH
26694: LD_INT 102
26696: PPUSH
26697: CALL_OW 109
// Wait ( 3 ) ;
26701: LD_INT 3
26703: PPUSH
26704: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
26708: LD_EXP 52
26712: PUSH
26713: LD_VAR 0 2
26717: ARRAY
26718: PUSH
26719: LD_INT 1
26721: ARRAY
26722: IFFALSE 26754
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
26724: LD_VAR 0 3
26728: PPUSH
26729: LD_EXP 52
26733: PUSH
26734: LD_VAR 0 2
26738: ARRAY
26739: PUSH
26740: LD_INT 1
26742: ARRAY
26743: PUSH
26744: LD_INT 1
26746: ARRAY
26747: PPUSH
26748: CALL_OW 128
26752: GO 26810
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
26754: LD_VAR 0 3
26758: PPUSH
26759: CALL_OW 314
26763: NOT
26764: PUSH
26765: LD_EXP 52
26769: PUSH
26770: LD_VAR 0 2
26774: ARRAY
26775: PUSH
26776: LD_INT 2
26778: ARRAY
26779: AND
26780: IFFALSE 26810
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
26782: LD_VAR 0 3
26786: PPUSH
26787: LD_EXP 52
26791: PUSH
26792: LD_VAR 0 2
26796: ARRAY
26797: PUSH
26798: LD_INT 2
26800: ARRAY
26801: PUSH
26802: LD_INT 1
26804: ARRAY
26805: PPUSH
26806: CALL_OW 128
// end ;
26810: GO 26588
26812: POP
26813: POP
// end ;
26814: GO 26431
26816: POP
26817: POP
// end ;
26818: LD_VAR 0 1
26822: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
26823: LD_INT 0
26825: PPUSH
26826: PPUSH
26827: PPUSH
26828: PPUSH
26829: PPUSH
// if not mc_bases then
26830: LD_EXP 49
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 27982
// for i = 1 to mc_bases do
26839: LD_ADDR_VAR 0 2
26843: PUSH
26844: DOUBLE
26845: LD_INT 1
26847: DEC
26848: ST_TO_ADDR
26849: LD_EXP 49
26853: PUSH
26854: FOR_TO
26855: IFFALSE 27980
// begin if mc_scan [ i ] then
26857: LD_EXP 72
26861: PUSH
26862: LD_VAR 0 2
26866: ARRAY
26867: IFFALSE 26871
// continue ;
26869: GO 26854
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
26871: LD_EXP 54
26875: PUSH
26876: LD_VAR 0 2
26880: ARRAY
26881: NOT
26882: PUSH
26883: LD_EXP 56
26887: PUSH
26888: LD_VAR 0 2
26892: ARRAY
26893: NOT
26894: AND
26895: PUSH
26896: LD_EXP 55
26900: PUSH
26901: LD_VAR 0 2
26905: ARRAY
26906: AND
26907: IFFALSE 26945
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
26909: LD_ADDR_EXP 55
26913: PUSH
26914: LD_EXP 55
26918: PPUSH
26919: LD_VAR 0 2
26923: PPUSH
26924: EMPTY
26925: PPUSH
26926: CALL_OW 1
26930: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26931: LD_VAR 0 2
26935: PPUSH
26936: LD_INT 103
26938: PPUSH
26939: CALL 20781 0 2
// continue ;
26943: GO 26854
// end ; if mc_construct_list [ i ] then
26945: LD_EXP 56
26949: PUSH
26950: LD_VAR 0 2
26954: ARRAY
26955: IFFALSE 27175
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
26957: LD_ADDR_VAR 0 4
26961: PUSH
26962: LD_EXP 49
26966: PUSH
26967: LD_VAR 0 2
26971: ARRAY
26972: PPUSH
26973: LD_INT 25
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PPUSH
26983: CALL_OW 72
26987: PUSH
26988: LD_EXP 51
26992: PUSH
26993: LD_VAR 0 2
26997: ARRAY
26998: DIFF
26999: ST_TO_ADDR
// if not tmp then
27000: LD_VAR 0 4
27004: NOT
27005: IFFALSE 27009
// continue ;
27007: GO 26854
// for j in tmp do
27009: LD_ADDR_VAR 0 3
27013: PUSH
27014: LD_VAR 0 4
27018: PUSH
27019: FOR_IN
27020: IFFALSE 27171
// begin if not mc_builders [ i ] then
27022: LD_EXP 55
27026: PUSH
27027: LD_VAR 0 2
27031: ARRAY
27032: NOT
27033: IFFALSE 27091
// begin SetTag ( j , 103 ) ;
27035: LD_VAR 0 3
27039: PPUSH
27040: LD_INT 103
27042: PPUSH
27043: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27047: LD_ADDR_EXP 55
27051: PUSH
27052: LD_EXP 55
27056: PPUSH
27057: LD_VAR 0 2
27061: PUSH
27062: LD_EXP 55
27066: PUSH
27067: LD_VAR 0 2
27071: ARRAY
27072: PUSH
27073: LD_INT 1
27075: PLUS
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PPUSH
27081: LD_VAR 0 3
27085: PPUSH
27086: CALL 53281 0 3
27090: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27091: LD_VAR 0 3
27095: PPUSH
27096: CALL_OW 310
27100: IFFALSE 27111
// ComExitBuilding ( j ) ;
27102: LD_VAR 0 3
27106: PPUSH
27107: CALL_OW 122
// wait ( 3 ) ;
27111: LD_INT 3
27113: PPUSH
27114: CALL_OW 67
// if not mc_construct_list [ i ] then
27118: LD_EXP 56
27122: PUSH
27123: LD_VAR 0 2
27127: ARRAY
27128: NOT
27129: IFFALSE 27133
// break ;
27131: GO 27171
// if not HasTask ( j ) then
27133: LD_VAR 0 3
27137: PPUSH
27138: CALL_OW 314
27142: NOT
27143: IFFALSE 27169
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27145: LD_VAR 0 3
27149: PPUSH
27150: LD_EXP 56
27154: PUSH
27155: LD_VAR 0 2
27159: ARRAY
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: PPUSH
27165: CALL 56132 0 2
// end ;
27169: GO 27019
27171: POP
27172: POP
// end else
27173: GO 27978
// if mc_build_list [ i ] then
27175: LD_EXP 54
27179: PUSH
27180: LD_VAR 0 2
27184: ARRAY
27185: IFFALSE 27978
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27187: LD_ADDR_VAR 0 5
27191: PUSH
27192: LD_EXP 49
27196: PUSH
27197: LD_VAR 0 2
27201: ARRAY
27202: PPUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 30
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 30
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: PPUSH
27231: CALL_OW 72
27235: ST_TO_ADDR
// if depot then
27236: LD_VAR 0 5
27240: IFFALSE 27258
// depot := depot [ 1 ] else
27242: LD_ADDR_VAR 0 5
27246: PUSH
27247: LD_VAR 0 5
27251: PUSH
27252: LD_INT 1
27254: ARRAY
27255: ST_TO_ADDR
27256: GO 27266
// depot := 0 ;
27258: LD_ADDR_VAR 0 5
27262: PUSH
27263: LD_INT 0
27265: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
27266: LD_EXP 54
27270: PUSH
27271: LD_VAR 0 2
27275: ARRAY
27276: PUSH
27277: LD_INT 1
27279: ARRAY
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: CALL 55962 0 1
27289: PUSH
27290: LD_EXP 49
27294: PUSH
27295: LD_VAR 0 2
27299: ARRAY
27300: PPUSH
27301: LD_INT 2
27303: PUSH
27304: LD_INT 30
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 30
27316: PUSH
27317: LD_INT 3
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: LIST
27328: PPUSH
27329: CALL_OW 72
27333: NOT
27334: AND
27335: IFFALSE 27440
// begin for j = 1 to mc_build_list [ i ] do
27337: LD_ADDR_VAR 0 3
27341: PUSH
27342: DOUBLE
27343: LD_INT 1
27345: DEC
27346: ST_TO_ADDR
27347: LD_EXP 54
27351: PUSH
27352: LD_VAR 0 2
27356: ARRAY
27357: PUSH
27358: FOR_TO
27359: IFFALSE 27438
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
27361: LD_EXP 54
27365: PUSH
27366: LD_VAR 0 2
27370: ARRAY
27371: PUSH
27372: LD_VAR 0 3
27376: ARRAY
27377: PUSH
27378: LD_INT 1
27380: ARRAY
27381: PUSH
27382: LD_INT 2
27384: EQUAL
27385: IFFALSE 27436
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
27387: LD_ADDR_EXP 54
27391: PUSH
27392: LD_EXP 54
27396: PPUSH
27397: LD_VAR 0 2
27401: PPUSH
27402: LD_EXP 54
27406: PUSH
27407: LD_VAR 0 2
27411: ARRAY
27412: PPUSH
27413: LD_VAR 0 3
27417: PPUSH
27418: LD_INT 1
27420: PPUSH
27421: LD_INT 0
27423: PPUSH
27424: CALL 52699 0 4
27428: PPUSH
27429: CALL_OW 1
27433: ST_TO_ADDR
// break ;
27434: GO 27438
// end ;
27436: GO 27358
27438: POP
27439: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
27440: LD_EXP 54
27444: PUSH
27445: LD_VAR 0 2
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PUSH
27455: LD_INT 1
27457: ARRAY
27458: PUSH
27459: LD_INT 0
27461: EQUAL
27462: PUSH
27463: LD_VAR 0 5
27467: PUSH
27468: LD_VAR 0 5
27472: PPUSH
27473: LD_EXP 54
27477: PUSH
27478: LD_VAR 0 2
27482: ARRAY
27483: PUSH
27484: LD_INT 1
27486: ARRAY
27487: PUSH
27488: LD_INT 1
27490: ARRAY
27491: PPUSH
27492: LD_EXP 54
27496: PUSH
27497: LD_VAR 0 2
27501: ARRAY
27502: PUSH
27503: LD_INT 1
27505: ARRAY
27506: PUSH
27507: LD_INT 2
27509: ARRAY
27510: PPUSH
27511: LD_EXP 54
27515: PUSH
27516: LD_VAR 0 2
27520: ARRAY
27521: PUSH
27522: LD_INT 1
27524: ARRAY
27525: PUSH
27526: LD_INT 3
27528: ARRAY
27529: PPUSH
27530: LD_EXP 54
27534: PUSH
27535: LD_VAR 0 2
27539: ARRAY
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: PUSH
27545: LD_INT 4
27547: ARRAY
27548: PPUSH
27549: CALL 60696 0 5
27553: AND
27554: OR
27555: IFFALSE 27836
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27557: LD_ADDR_VAR 0 4
27561: PUSH
27562: LD_EXP 49
27566: PUSH
27567: LD_VAR 0 2
27571: ARRAY
27572: PPUSH
27573: LD_INT 25
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 72
27587: PUSH
27588: LD_EXP 51
27592: PUSH
27593: LD_VAR 0 2
27597: ARRAY
27598: DIFF
27599: ST_TO_ADDR
// if not tmp then
27600: LD_VAR 0 4
27604: NOT
27605: IFFALSE 27609
// continue ;
27607: GO 26854
// for j in tmp do
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_VAR 0 4
27618: PUSH
27619: FOR_IN
27620: IFFALSE 27832
// begin if not mc_builders [ i ] then
27622: LD_EXP 55
27626: PUSH
27627: LD_VAR 0 2
27631: ARRAY
27632: NOT
27633: IFFALSE 27691
// begin SetTag ( j , 103 ) ;
27635: LD_VAR 0 3
27639: PPUSH
27640: LD_INT 103
27642: PPUSH
27643: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27647: LD_ADDR_EXP 55
27651: PUSH
27652: LD_EXP 55
27656: PPUSH
27657: LD_VAR 0 2
27661: PUSH
27662: LD_EXP 55
27666: PUSH
27667: LD_VAR 0 2
27671: ARRAY
27672: PUSH
27673: LD_INT 1
27675: PLUS
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PPUSH
27681: LD_VAR 0 3
27685: PPUSH
27686: CALL 53281 0 3
27690: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27691: LD_VAR 0 3
27695: PPUSH
27696: CALL_OW 310
27700: IFFALSE 27711
// ComExitBuilding ( j ) ;
27702: LD_VAR 0 3
27706: PPUSH
27707: CALL_OW 122
// wait ( 3 ) ;
27711: LD_INT 3
27713: PPUSH
27714: CALL_OW 67
// if not mc_build_list [ i ] then
27718: LD_EXP 54
27722: PUSH
27723: LD_VAR 0 2
27727: ARRAY
27728: NOT
27729: IFFALSE 27733
// break ;
27731: GO 27832
// if not HasTask ( j ) then
27733: LD_VAR 0 3
27737: PPUSH
27738: CALL_OW 314
27742: NOT
27743: IFFALSE 27830
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
27745: LD_VAR 0 3
27749: PPUSH
27750: LD_EXP 54
27754: PUSH
27755: LD_VAR 0 2
27759: ARRAY
27760: PUSH
27761: LD_INT 1
27763: ARRAY
27764: PUSH
27765: LD_INT 1
27767: ARRAY
27768: PPUSH
27769: LD_EXP 54
27773: PUSH
27774: LD_VAR 0 2
27778: ARRAY
27779: PUSH
27780: LD_INT 1
27782: ARRAY
27783: PUSH
27784: LD_INT 2
27786: ARRAY
27787: PPUSH
27788: LD_EXP 54
27792: PUSH
27793: LD_VAR 0 2
27797: ARRAY
27798: PUSH
27799: LD_INT 1
27801: ARRAY
27802: PUSH
27803: LD_INT 3
27805: ARRAY
27806: PPUSH
27807: LD_EXP 54
27811: PUSH
27812: LD_VAR 0 2
27816: ARRAY
27817: PUSH
27818: LD_INT 1
27820: ARRAY
27821: PUSH
27822: LD_INT 4
27824: ARRAY
27825: PPUSH
27826: CALL_OW 145
// end ;
27830: GO 27619
27832: POP
27833: POP
// end else
27834: GO 27978
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
27836: LD_EXP 49
27840: PUSH
27841: LD_VAR 0 2
27845: ARRAY
27846: PPUSH
27847: LD_EXP 54
27851: PUSH
27852: LD_VAR 0 2
27856: ARRAY
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PUSH
27862: LD_INT 1
27864: ARRAY
27865: PPUSH
27866: LD_EXP 54
27870: PUSH
27871: LD_VAR 0 2
27875: ARRAY
27876: PUSH
27877: LD_INT 1
27879: ARRAY
27880: PUSH
27881: LD_INT 2
27883: ARRAY
27884: PPUSH
27885: LD_EXP 54
27889: PUSH
27890: LD_VAR 0 2
27894: ARRAY
27895: PUSH
27896: LD_INT 1
27898: ARRAY
27899: PUSH
27900: LD_INT 3
27902: ARRAY
27903: PPUSH
27904: LD_EXP 54
27908: PUSH
27909: LD_VAR 0 2
27913: ARRAY
27914: PUSH
27915: LD_INT 1
27917: ARRAY
27918: PUSH
27919: LD_INT 4
27921: ARRAY
27922: PPUSH
27923: CALL 60032 0 5
27927: NOT
27928: IFFALSE 27978
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
27930: LD_ADDR_EXP 54
27934: PUSH
27935: LD_EXP 54
27939: PPUSH
27940: LD_VAR 0 2
27944: PPUSH
27945: LD_EXP 54
27949: PUSH
27950: LD_VAR 0 2
27954: ARRAY
27955: PPUSH
27956: LD_INT 1
27958: PPUSH
27959: LD_INT 1
27961: NEG
27962: PPUSH
27963: LD_INT 0
27965: PPUSH
27966: CALL 52699 0 4
27970: PPUSH
27971: CALL_OW 1
27975: ST_TO_ADDR
// continue ;
27976: GO 26854
// end ; end ; end ;
27978: GO 26854
27980: POP
27981: POP
// end ;
27982: LD_VAR 0 1
27986: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
27993: PPUSH
27994: PPUSH
// if not mc_bases then
27995: LD_EXP 49
27999: NOT
28000: IFFALSE 28004
// exit ;
28002: GO 28431
// for i = 1 to mc_bases do
28004: LD_ADDR_VAR 0 2
28008: PUSH
28009: DOUBLE
28010: LD_INT 1
28012: DEC
28013: ST_TO_ADDR
28014: LD_EXP 49
28018: PUSH
28019: FOR_TO
28020: IFFALSE 28429
// begin tmp := mc_build_upgrade [ i ] ;
28022: LD_ADDR_VAR 0 4
28026: PUSH
28027: LD_EXP 81
28031: PUSH
28032: LD_VAR 0 2
28036: ARRAY
28037: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28038: LD_ADDR_VAR 0 6
28042: PUSH
28043: LD_EXP 82
28047: PUSH
28048: LD_VAR 0 2
28052: ARRAY
28053: PPUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 30
28059: PUSH
28060: LD_INT 6
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 30
28069: PUSH
28070: LD_INT 7
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 72
28086: ST_TO_ADDR
// if not tmp and not lab then
28087: LD_VAR 0 4
28091: NOT
28092: PUSH
28093: LD_VAR 0 6
28097: NOT
28098: AND
28099: IFFALSE 28103
// continue ;
28101: GO 28019
// if tmp then
28103: LD_VAR 0 4
28107: IFFALSE 28227
// for j in tmp do
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_VAR 0 4
28118: PUSH
28119: FOR_IN
28120: IFFALSE 28225
// begin if UpgradeCost ( j ) then
28122: LD_VAR 0 3
28126: PPUSH
28127: CALL 59692 0 1
28131: IFFALSE 28223
// begin ComUpgrade ( j ) ;
28133: LD_VAR 0 3
28137: PPUSH
28138: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28142: LD_ADDR_EXP 81
28146: PUSH
28147: LD_EXP 81
28151: PPUSH
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_EXP 81
28161: PUSH
28162: LD_VAR 0 2
28166: ARRAY
28167: PUSH
28168: LD_VAR 0 3
28172: DIFF
28173: PPUSH
28174: CALL_OW 1
28178: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28179: LD_ADDR_EXP 56
28183: PUSH
28184: LD_EXP 56
28188: PPUSH
28189: LD_VAR 0 2
28193: PUSH
28194: LD_EXP 56
28198: PUSH
28199: LD_VAR 0 2
28203: ARRAY
28204: PUSH
28205: LD_INT 1
28207: PLUS
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PPUSH
28213: LD_VAR 0 3
28217: PPUSH
28218: CALL 53281 0 3
28222: ST_TO_ADDR
// end ; end ;
28223: GO 28119
28225: POP
28226: POP
// if not lab or not mc_lab_upgrade [ i ] then
28227: LD_VAR 0 6
28231: NOT
28232: PUSH
28233: LD_EXP 83
28237: PUSH
28238: LD_VAR 0 2
28242: ARRAY
28243: NOT
28244: OR
28245: IFFALSE 28249
// continue ;
28247: GO 28019
// for j in lab do
28249: LD_ADDR_VAR 0 3
28253: PUSH
28254: LD_VAR 0 6
28258: PUSH
28259: FOR_IN
28260: IFFALSE 28425
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
28262: LD_VAR 0 3
28266: PPUSH
28267: CALL_OW 266
28271: PUSH
28272: LD_INT 6
28274: PUSH
28275: LD_INT 7
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: IN
28282: PUSH
28283: LD_VAR 0 3
28287: PPUSH
28288: CALL_OW 461
28292: PUSH
28293: LD_INT 1
28295: NONEQUAL
28296: AND
28297: IFFALSE 28423
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
28299: LD_VAR 0 3
28303: PPUSH
28304: LD_EXP 83
28308: PUSH
28309: LD_VAR 0 2
28313: ARRAY
28314: PUSH
28315: LD_INT 1
28317: ARRAY
28318: PPUSH
28319: CALL 59897 0 2
28323: IFFALSE 28423
// begin ComCancel ( j ) ;
28325: LD_VAR 0 3
28329: PPUSH
28330: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
28334: LD_VAR 0 3
28338: PPUSH
28339: LD_EXP 83
28343: PUSH
28344: LD_VAR 0 2
28348: ARRAY
28349: PUSH
28350: LD_INT 1
28352: ARRAY
28353: PPUSH
28354: CALL_OW 207
// if not j in mc_construct_list [ i ] then
28358: LD_VAR 0 3
28362: PUSH
28363: LD_EXP 56
28367: PUSH
28368: LD_VAR 0 2
28372: ARRAY
28373: IN
28374: NOT
28375: IFFALSE 28421
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28377: LD_ADDR_EXP 56
28381: PUSH
28382: LD_EXP 56
28386: PPUSH
28387: LD_VAR 0 2
28391: PUSH
28392: LD_EXP 56
28396: PUSH
28397: LD_VAR 0 2
28401: ARRAY
28402: PUSH
28403: LD_INT 1
28405: PLUS
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PPUSH
28411: LD_VAR 0 3
28415: PPUSH
28416: CALL 53281 0 3
28420: ST_TO_ADDR
// break ;
28421: GO 28425
// end ; end ; end ;
28423: GO 28259
28425: POP
28426: POP
// end ;
28427: GO 28019
28429: POP
28430: POP
// end ;
28431: LD_VAR 0 1
28435: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
28436: LD_INT 0
28438: PPUSH
28439: PPUSH
28440: PPUSH
28441: PPUSH
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
28446: PPUSH
// if not mc_bases then
28447: LD_EXP 49
28451: NOT
28452: IFFALSE 28456
// exit ;
28454: GO 28861
// for i = 1 to mc_bases do
28456: LD_ADDR_VAR 0 2
28460: PUSH
28461: DOUBLE
28462: LD_INT 1
28464: DEC
28465: ST_TO_ADDR
28466: LD_EXP 49
28470: PUSH
28471: FOR_TO
28472: IFFALSE 28859
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
28474: LD_EXP 57
28478: PUSH
28479: LD_VAR 0 2
28483: ARRAY
28484: NOT
28485: PUSH
28486: LD_EXP 49
28490: PUSH
28491: LD_VAR 0 2
28495: ARRAY
28496: PPUSH
28497: LD_INT 30
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 72
28511: NOT
28512: OR
28513: IFFALSE 28517
// continue ;
28515: GO 28471
// busy := false ;
28517: LD_ADDR_VAR 0 8
28521: PUSH
28522: LD_INT 0
28524: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
28525: LD_ADDR_VAR 0 4
28529: PUSH
28530: LD_EXP 49
28534: PUSH
28535: LD_VAR 0 2
28539: ARRAY
28540: PPUSH
28541: LD_INT 30
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PPUSH
28551: CALL_OW 72
28555: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
28556: LD_ADDR_VAR 0 6
28560: PUSH
28561: LD_EXP 57
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: PPUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 30
28577: PUSH
28578: LD_INT 32
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 30
28587: PUSH
28588: LD_INT 33
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: PPUSH
28600: CALL_OW 72
28604: ST_TO_ADDR
// if not t then
28605: LD_VAR 0 6
28609: NOT
28610: IFFALSE 28614
// continue ;
28612: GO 28471
// for j in tmp do
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_VAR 0 4
28623: PUSH
28624: FOR_IN
28625: IFFALSE 28655
// if not BuildingStatus ( j ) = bs_idle then
28627: LD_VAR 0 3
28631: PPUSH
28632: CALL_OW 461
28636: PUSH
28637: LD_INT 2
28639: EQUAL
28640: NOT
28641: IFFALSE 28653
// begin busy := true ;
28643: LD_ADDR_VAR 0 8
28647: PUSH
28648: LD_INT 1
28650: ST_TO_ADDR
// break ;
28651: GO 28655
// end ;
28653: GO 28624
28655: POP
28656: POP
// if busy then
28657: LD_VAR 0 8
28661: IFFALSE 28665
// continue ;
28663: GO 28471
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
28665: LD_ADDR_VAR 0 7
28669: PUSH
28670: LD_VAR 0 6
28674: PPUSH
28675: LD_INT 35
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PPUSH
28685: CALL_OW 72
28689: ST_TO_ADDR
// if tw then
28690: LD_VAR 0 7
28694: IFFALSE 28771
// begin tw := tw [ 1 ] ;
28696: LD_ADDR_VAR 0 7
28700: PUSH
28701: LD_VAR 0 7
28705: PUSH
28706: LD_INT 1
28708: ARRAY
28709: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
28710: LD_ADDR_VAR 0 9
28714: PUSH
28715: LD_VAR 0 7
28719: PPUSH
28720: LD_EXP 74
28724: PUSH
28725: LD_VAR 0 2
28729: ARRAY
28730: PPUSH
28731: CALL 58251 0 2
28735: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
28736: LD_EXP 88
28740: PUSH
28741: LD_VAR 0 2
28745: ARRAY
28746: IFFALSE 28769
// if not weapon in mc_allowed_tower_weapons [ i ] then
28748: LD_VAR 0 9
28752: PUSH
28753: LD_EXP 88
28757: PUSH
28758: LD_VAR 0 2
28762: ARRAY
28763: IN
28764: NOT
28765: IFFALSE 28769
// continue ;
28767: GO 28471
// end else
28769: GO 28834
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
28771: LD_ADDR_VAR 0 5
28775: PUSH
28776: LD_EXP 57
28780: PUSH
28781: LD_VAR 0 2
28785: ARRAY
28786: PPUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: CALL 88452 0 2
28796: ST_TO_ADDR
// if not tmp2 then
28797: LD_VAR 0 5
28801: NOT
28802: IFFALSE 28806
// continue ;
28804: GO 28471
// tw := tmp2 [ 1 ] ;
28806: LD_ADDR_VAR 0 7
28810: PUSH
28811: LD_VAR 0 5
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
28820: LD_ADDR_VAR 0 9
28824: PUSH
28825: LD_VAR 0 5
28829: PUSH
28830: LD_INT 2
28832: ARRAY
28833: ST_TO_ADDR
// end ; if not weapon then
28834: LD_VAR 0 9
28838: NOT
28839: IFFALSE 28843
// continue ;
28841: GO 28471
// ComPlaceWeapon ( tw , weapon ) ;
28843: LD_VAR 0 7
28847: PPUSH
28848: LD_VAR 0 9
28852: PPUSH
28853: CALL_OW 148
// end ;
28857: GO 28471
28859: POP
28860: POP
// end ;
28861: LD_VAR 0 1
28865: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
28870: PPUSH
28871: PPUSH
28872: PPUSH
28873: PPUSH
// if not mc_bases then
28874: LD_EXP 49
28878: NOT
28879: IFFALSE 28883
// exit ;
28881: GO 29895
// for i = 1 to mc_bases do
28883: LD_ADDR_VAR 0 2
28887: PUSH
28888: DOUBLE
28889: LD_INT 1
28891: DEC
28892: ST_TO_ADDR
28893: LD_EXP 49
28897: PUSH
28898: FOR_TO
28899: IFFALSE 29893
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
28901: LD_EXP 62
28905: PUSH
28906: LD_VAR 0 2
28910: ARRAY
28911: NOT
28912: PUSH
28913: LD_EXP 62
28917: PUSH
28918: LD_VAR 0 2
28922: ARRAY
28923: PUSH
28924: LD_EXP 63
28928: PUSH
28929: LD_VAR 0 2
28933: ARRAY
28934: EQUAL
28935: OR
28936: IFFALSE 28940
// continue ;
28938: GO 28898
// if mc_miners [ i ] then
28940: LD_EXP 63
28944: PUSH
28945: LD_VAR 0 2
28949: ARRAY
28950: IFFALSE 29580
// begin k := 1 ;
28952: LD_ADDR_VAR 0 4
28956: PUSH
28957: LD_INT 1
28959: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: DOUBLE
28966: LD_EXP 63
28970: PUSH
28971: LD_VAR 0 2
28975: ARRAY
28976: INC
28977: ST_TO_ADDR
28978: LD_INT 1
28980: PUSH
28981: FOR_DOWNTO
28982: IFFALSE 29578
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
28984: LD_EXP 63
28988: PUSH
28989: LD_VAR 0 2
28993: ARRAY
28994: PUSH
28995: LD_VAR 0 3
28999: ARRAY
29000: PPUSH
29001: CALL_OW 301
29005: PUSH
29006: LD_EXP 63
29010: PUSH
29011: LD_VAR 0 2
29015: ARRAY
29016: PUSH
29017: LD_VAR 0 3
29021: ARRAY
29022: PPUSH
29023: CALL_OW 257
29027: PUSH
29028: LD_INT 1
29030: NONEQUAL
29031: OR
29032: IFFALSE 29095
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29034: LD_ADDR_VAR 0 5
29038: PUSH
29039: LD_EXP 63
29043: PUSH
29044: LD_VAR 0 2
29048: ARRAY
29049: PUSH
29050: LD_EXP 63
29054: PUSH
29055: LD_VAR 0 2
29059: ARRAY
29060: PUSH
29061: LD_VAR 0 3
29065: ARRAY
29066: DIFF
29067: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29068: LD_ADDR_EXP 63
29072: PUSH
29073: LD_EXP 63
29077: PPUSH
29078: LD_VAR 0 2
29082: PPUSH
29083: LD_VAR 0 5
29087: PPUSH
29088: CALL_OW 1
29092: ST_TO_ADDR
// continue ;
29093: GO 28981
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
29095: LD_EXP 63
29099: PUSH
29100: LD_VAR 0 2
29104: ARRAY
29105: PUSH
29106: LD_VAR 0 3
29110: ARRAY
29111: PPUSH
29112: CALL 53217 0 1
29116: PUSH
29117: LD_EXP 63
29121: PUSH
29122: LD_VAR 0 2
29126: ARRAY
29127: PUSH
29128: LD_VAR 0 3
29132: ARRAY
29133: PPUSH
29134: CALL_OW 255
29138: PPUSH
29139: LD_EXP 62
29143: PUSH
29144: LD_VAR 0 2
29148: ARRAY
29149: PUSH
29150: LD_VAR 0 4
29154: ARRAY
29155: PUSH
29156: LD_INT 1
29158: ARRAY
29159: PPUSH
29160: LD_EXP 62
29164: PUSH
29165: LD_VAR 0 2
29169: ARRAY
29170: PUSH
29171: LD_VAR 0 4
29175: ARRAY
29176: PUSH
29177: LD_INT 2
29179: ARRAY
29180: PPUSH
29181: LD_INT 15
29183: PPUSH
29184: CALL 54177 0 4
29188: PUSH
29189: LD_INT 4
29191: ARRAY
29192: PUSH
29193: LD_EXP 63
29197: PUSH
29198: LD_VAR 0 2
29202: ARRAY
29203: PUSH
29204: LD_VAR 0 3
29208: ARRAY
29209: PPUSH
29210: LD_INT 10
29212: PPUSH
29213: CALL 55874 0 2
29217: PUSH
29218: LD_INT 4
29220: ARRAY
29221: OR
29222: AND
29223: IFFALSE 29246
// ComStop ( mc_miners [ i ] [ j ] ) ;
29225: LD_EXP 63
29229: PUSH
29230: LD_VAR 0 2
29234: ARRAY
29235: PUSH
29236: LD_VAR 0 3
29240: ARRAY
29241: PPUSH
29242: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
29246: LD_EXP 63
29250: PUSH
29251: LD_VAR 0 2
29255: ARRAY
29256: PUSH
29257: LD_VAR 0 3
29261: ARRAY
29262: PPUSH
29263: CALL_OW 257
29267: PUSH
29268: LD_INT 1
29270: EQUAL
29271: PUSH
29272: LD_EXP 63
29276: PUSH
29277: LD_VAR 0 2
29281: ARRAY
29282: PUSH
29283: LD_VAR 0 3
29287: ARRAY
29288: PPUSH
29289: CALL_OW 459
29293: NOT
29294: AND
29295: PUSH
29296: LD_EXP 63
29300: PUSH
29301: LD_VAR 0 2
29305: ARRAY
29306: PUSH
29307: LD_VAR 0 3
29311: ARRAY
29312: PPUSH
29313: CALL_OW 255
29317: PPUSH
29318: LD_EXP 62
29322: PUSH
29323: LD_VAR 0 2
29327: ARRAY
29328: PUSH
29329: LD_VAR 0 4
29333: ARRAY
29334: PUSH
29335: LD_INT 1
29337: ARRAY
29338: PPUSH
29339: LD_EXP 62
29343: PUSH
29344: LD_VAR 0 2
29348: ARRAY
29349: PUSH
29350: LD_VAR 0 4
29354: ARRAY
29355: PUSH
29356: LD_INT 2
29358: ARRAY
29359: PPUSH
29360: LD_INT 15
29362: PPUSH
29363: CALL 54177 0 4
29367: PUSH
29368: LD_INT 4
29370: ARRAY
29371: PUSH
29372: LD_INT 0
29374: EQUAL
29375: AND
29376: PUSH
29377: LD_EXP 63
29381: PUSH
29382: LD_VAR 0 2
29386: ARRAY
29387: PUSH
29388: LD_VAR 0 3
29392: ARRAY
29393: PPUSH
29394: CALL_OW 314
29398: NOT
29399: AND
29400: IFFALSE 29576
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29402: LD_EXP 63
29406: PUSH
29407: LD_VAR 0 2
29411: ARRAY
29412: PUSH
29413: LD_VAR 0 3
29417: ARRAY
29418: PPUSH
29419: CALL_OW 310
29423: IFFALSE 29446
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
29425: LD_EXP 63
29429: PUSH
29430: LD_VAR 0 2
29434: ARRAY
29435: PUSH
29436: LD_VAR 0 3
29440: ARRAY
29441: PPUSH
29442: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
29446: LD_EXP 63
29450: PUSH
29451: LD_VAR 0 2
29455: ARRAY
29456: PUSH
29457: LD_VAR 0 3
29461: ARRAY
29462: PPUSH
29463: CALL_OW 314
29467: NOT
29468: IFFALSE 29536
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
29470: LD_EXP 63
29474: PUSH
29475: LD_VAR 0 2
29479: ARRAY
29480: PUSH
29481: LD_VAR 0 3
29485: ARRAY
29486: PPUSH
29487: LD_EXP 62
29491: PUSH
29492: LD_VAR 0 2
29496: ARRAY
29497: PUSH
29498: LD_VAR 0 4
29502: ARRAY
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_EXP 62
29512: PUSH
29513: LD_VAR 0 2
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 4
29523: ARRAY
29524: PUSH
29525: LD_INT 2
29527: ARRAY
29528: PPUSH
29529: LD_INT 0
29531: PPUSH
29532: CALL_OW 193
// k := k + 1 ;
29536: LD_ADDR_VAR 0 4
29540: PUSH
29541: LD_VAR 0 4
29545: PUSH
29546: LD_INT 1
29548: PLUS
29549: ST_TO_ADDR
// if k > mc_mines [ i ] then
29550: LD_VAR 0 4
29554: PUSH
29555: LD_EXP 62
29559: PUSH
29560: LD_VAR 0 2
29564: ARRAY
29565: GREATER
29566: IFFALSE 29576
// k := 1 ;
29568: LD_ADDR_VAR 0 4
29572: PUSH
29573: LD_INT 1
29575: ST_TO_ADDR
// end ; end ;
29576: GO 28981
29578: POP
29579: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
29580: LD_ADDR_VAR 0 5
29584: PUSH
29585: LD_EXP 49
29589: PUSH
29590: LD_VAR 0 2
29594: ARRAY
29595: PPUSH
29596: LD_INT 2
29598: PUSH
29599: LD_INT 30
29601: PUSH
29602: LD_INT 4
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 30
29611: PUSH
29612: LD_INT 5
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 30
29621: PUSH
29622: LD_INT 32
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: PPUSH
29635: CALL_OW 72
29639: ST_TO_ADDR
// if not tmp then
29640: LD_VAR 0 5
29644: NOT
29645: IFFALSE 29649
// continue ;
29647: GO 28898
// list := [ ] ;
29649: LD_ADDR_VAR 0 6
29653: PUSH
29654: EMPTY
29655: ST_TO_ADDR
// for j in tmp do
29656: LD_ADDR_VAR 0 3
29660: PUSH
29661: LD_VAR 0 5
29665: PUSH
29666: FOR_IN
29667: IFFALSE 29736
// begin for k in UnitsInside ( j ) do
29669: LD_ADDR_VAR 0 4
29673: PUSH
29674: LD_VAR 0 3
29678: PPUSH
29679: CALL_OW 313
29683: PUSH
29684: FOR_IN
29685: IFFALSE 29732
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
29687: LD_VAR 0 4
29691: PPUSH
29692: CALL_OW 257
29696: PUSH
29697: LD_INT 1
29699: EQUAL
29700: PUSH
29701: LD_VAR 0 4
29705: PPUSH
29706: CALL_OW 459
29710: NOT
29711: AND
29712: IFFALSE 29730
// list := list ^ k ;
29714: LD_ADDR_VAR 0 6
29718: PUSH
29719: LD_VAR 0 6
29723: PUSH
29724: LD_VAR 0 4
29728: ADD
29729: ST_TO_ADDR
29730: GO 29684
29732: POP
29733: POP
// end ;
29734: GO 29666
29736: POP
29737: POP
// list := list diff mc_miners [ i ] ;
29738: LD_ADDR_VAR 0 6
29742: PUSH
29743: LD_VAR 0 6
29747: PUSH
29748: LD_EXP 63
29752: PUSH
29753: LD_VAR 0 2
29757: ARRAY
29758: DIFF
29759: ST_TO_ADDR
// if not list then
29760: LD_VAR 0 6
29764: NOT
29765: IFFALSE 29769
// continue ;
29767: GO 28898
// k := mc_mines [ i ] - mc_miners [ i ] ;
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: LD_EXP 62
29778: PUSH
29779: LD_VAR 0 2
29783: ARRAY
29784: PUSH
29785: LD_EXP 63
29789: PUSH
29790: LD_VAR 0 2
29794: ARRAY
29795: MINUS
29796: ST_TO_ADDR
// if k > list then
29797: LD_VAR 0 4
29801: PUSH
29802: LD_VAR 0 6
29806: GREATER
29807: IFFALSE 29819
// k := list ;
29809: LD_ADDR_VAR 0 4
29813: PUSH
29814: LD_VAR 0 6
29818: ST_TO_ADDR
// for j = 1 to k do
29819: LD_ADDR_VAR 0 3
29823: PUSH
29824: DOUBLE
29825: LD_INT 1
29827: DEC
29828: ST_TO_ADDR
29829: LD_VAR 0 4
29833: PUSH
29834: FOR_TO
29835: IFFALSE 29889
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
29837: LD_ADDR_EXP 63
29841: PUSH
29842: LD_EXP 63
29846: PPUSH
29847: LD_VAR 0 2
29851: PUSH
29852: LD_EXP 63
29856: PUSH
29857: LD_VAR 0 2
29861: ARRAY
29862: PUSH
29863: LD_INT 1
29865: PLUS
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PPUSH
29871: LD_VAR 0 6
29875: PUSH
29876: LD_VAR 0 3
29880: ARRAY
29881: PPUSH
29882: CALL 53281 0 3
29886: ST_TO_ADDR
29887: GO 29834
29889: POP
29890: POP
// end ;
29891: GO 28898
29893: POP
29894: POP
// end ;
29895: LD_VAR 0 1
29899: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
29900: LD_INT 0
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
29911: PPUSH
// if not mc_bases then
29912: LD_EXP 49
29916: NOT
29917: IFFALSE 29921
// exit ;
29919: GO 31671
// for i = 1 to mc_bases do
29921: LD_ADDR_VAR 0 2
29925: PUSH
29926: DOUBLE
29927: LD_INT 1
29929: DEC
29930: ST_TO_ADDR
29931: LD_EXP 49
29935: PUSH
29936: FOR_TO
29937: IFFALSE 31669
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
29939: LD_EXP 49
29943: PUSH
29944: LD_VAR 0 2
29948: ARRAY
29949: NOT
29950: PUSH
29951: LD_EXP 56
29955: PUSH
29956: LD_VAR 0 2
29960: ARRAY
29961: OR
29962: IFFALSE 29966
// continue ;
29964: GO 29936
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
29966: LD_EXP 65
29970: PUSH
29971: LD_VAR 0 2
29975: ARRAY
29976: NOT
29977: PUSH
29978: LD_EXP 66
29982: PUSH
29983: LD_VAR 0 2
29987: ARRAY
29988: AND
29989: IFFALSE 30027
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
29991: LD_ADDR_EXP 66
29995: PUSH
29996: LD_EXP 66
30000: PPUSH
30001: LD_VAR 0 2
30005: PPUSH
30006: EMPTY
30007: PPUSH
30008: CALL_OW 1
30012: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30013: LD_VAR 0 2
30017: PPUSH
30018: LD_INT 107
30020: PPUSH
30021: CALL 20781 0 2
// continue ;
30025: GO 29936
// end ; target := [ ] ;
30027: LD_ADDR_VAR 0 6
30031: PUSH
30032: EMPTY
30033: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: DOUBLE
30040: LD_EXP 65
30044: PUSH
30045: LD_VAR 0 2
30049: ARRAY
30050: INC
30051: ST_TO_ADDR
30052: LD_INT 1
30054: PUSH
30055: FOR_DOWNTO
30056: IFFALSE 30316
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30058: LD_EXP 65
30062: PUSH
30063: LD_VAR 0 2
30067: ARRAY
30068: PUSH
30069: LD_VAR 0 3
30073: ARRAY
30074: PUSH
30075: LD_INT 2
30077: ARRAY
30078: PPUSH
30079: LD_EXP 65
30083: PUSH
30084: LD_VAR 0 2
30088: ARRAY
30089: PUSH
30090: LD_VAR 0 3
30094: ARRAY
30095: PUSH
30096: LD_INT 3
30098: ARRAY
30099: PPUSH
30100: CALL_OW 488
30104: PUSH
30105: LD_EXP 65
30109: PUSH
30110: LD_VAR 0 2
30114: ARRAY
30115: PUSH
30116: LD_VAR 0 3
30120: ARRAY
30121: PUSH
30122: LD_INT 2
30124: ARRAY
30125: PPUSH
30126: LD_EXP 65
30130: PUSH
30131: LD_VAR 0 2
30135: ARRAY
30136: PUSH
30137: LD_VAR 0 3
30141: ARRAY
30142: PUSH
30143: LD_INT 3
30145: ARRAY
30146: PPUSH
30147: CALL_OW 284
30151: PUSH
30152: LD_INT 0
30154: EQUAL
30155: AND
30156: IFFALSE 30211
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30158: LD_ADDR_VAR 0 5
30162: PUSH
30163: LD_EXP 65
30167: PUSH
30168: LD_VAR 0 2
30172: ARRAY
30173: PPUSH
30174: LD_VAR 0 3
30178: PPUSH
30179: CALL_OW 3
30183: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30184: LD_ADDR_EXP 65
30188: PUSH
30189: LD_EXP 65
30193: PPUSH
30194: LD_VAR 0 2
30198: PPUSH
30199: LD_VAR 0 5
30203: PPUSH
30204: CALL_OW 1
30208: ST_TO_ADDR
// continue ;
30209: GO 30055
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30211: LD_EXP 49
30215: PUSH
30216: LD_VAR 0 2
30220: ARRAY
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: CALL_OW 255
30230: PPUSH
30231: LD_EXP 65
30235: PUSH
30236: LD_VAR 0 2
30240: ARRAY
30241: PUSH
30242: LD_VAR 0 3
30246: ARRAY
30247: PUSH
30248: LD_INT 2
30250: ARRAY
30251: PPUSH
30252: LD_EXP 65
30256: PUSH
30257: LD_VAR 0 2
30261: ARRAY
30262: PUSH
30263: LD_VAR 0 3
30267: ARRAY
30268: PUSH
30269: LD_INT 3
30271: ARRAY
30272: PPUSH
30273: LD_INT 30
30275: PPUSH
30276: CALL 54177 0 4
30280: PUSH
30281: LD_INT 4
30283: ARRAY
30284: PUSH
30285: LD_INT 0
30287: EQUAL
30288: IFFALSE 30314
// begin target := mc_crates [ i ] [ j ] ;
30290: LD_ADDR_VAR 0 6
30294: PUSH
30295: LD_EXP 65
30299: PUSH
30300: LD_VAR 0 2
30304: ARRAY
30305: PUSH
30306: LD_VAR 0 3
30310: ARRAY
30311: ST_TO_ADDR
// break ;
30312: GO 30316
// end ; end ;
30314: GO 30055
30316: POP
30317: POP
// if not target then
30318: LD_VAR 0 6
30322: NOT
30323: IFFALSE 30327
// continue ;
30325: GO 29936
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30327: LD_ADDR_VAR 0 7
30331: PUSH
30332: LD_EXP 68
30336: PUSH
30337: LD_VAR 0 2
30341: ARRAY
30342: PPUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: LD_INT 58
30351: PUSH
30352: EMPTY
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 61
30361: PUSH
30362: EMPTY
30363: LIST
30364: PUSH
30365: LD_INT 33
30367: PUSH
30368: LD_INT 5
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 33
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 34
30397: PUSH
30398: LD_INT 32
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 34
30407: PUSH
30408: LD_INT 51
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 34
30417: PUSH
30418: LD_INT 12
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PPUSH
30435: CALL_OW 72
30439: ST_TO_ADDR
// if not cargo then
30440: LD_VAR 0 7
30444: NOT
30445: IFFALSE 31088
// begin if mc_crates_collector [ i ] < 5 then
30447: LD_EXP 66
30451: PUSH
30452: LD_VAR 0 2
30456: ARRAY
30457: PUSH
30458: LD_INT 5
30460: LESS
30461: IFFALSE 30827
// begin if mc_ape [ i ] then
30463: LD_EXP 78
30467: PUSH
30468: LD_VAR 0 2
30472: ARRAY
30473: IFFALSE 30520
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
30475: LD_ADDR_VAR 0 5
30479: PUSH
30480: LD_EXP 78
30484: PUSH
30485: LD_VAR 0 2
30489: ARRAY
30490: PPUSH
30491: LD_INT 25
30493: PUSH
30494: LD_INT 16
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 24
30503: PUSH
30504: LD_INT 750
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PPUSH
30515: CALL_OW 72
30519: ST_TO_ADDR
// if not tmp then
30520: LD_VAR 0 5
30524: NOT
30525: IFFALSE 30572
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
30527: LD_ADDR_VAR 0 5
30531: PUSH
30532: LD_EXP 49
30536: PUSH
30537: LD_VAR 0 2
30541: ARRAY
30542: PPUSH
30543: LD_INT 25
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 24
30555: PUSH
30556: LD_INT 750
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PPUSH
30567: CALL_OW 72
30571: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
30572: LD_EXP 78
30576: PUSH
30577: LD_VAR 0 2
30581: ARRAY
30582: PUSH
30583: LD_EXP 49
30587: PUSH
30588: LD_VAR 0 2
30592: ARRAY
30593: PPUSH
30594: LD_INT 25
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 24
30606: PUSH
30607: LD_INT 750
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PPUSH
30618: CALL_OW 72
30622: AND
30623: PUSH
30624: LD_VAR 0 5
30628: PUSH
30629: LD_INT 5
30631: LESS
30632: AND
30633: IFFALSE 30715
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
30635: LD_ADDR_VAR 0 3
30639: PUSH
30640: LD_EXP 49
30644: PUSH
30645: LD_VAR 0 2
30649: ARRAY
30650: PPUSH
30651: LD_INT 25
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 24
30663: PUSH
30664: LD_INT 750
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PPUSH
30675: CALL_OW 72
30679: PUSH
30680: FOR_IN
30681: IFFALSE 30713
// begin tmp := tmp union j ;
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: LD_VAR 0 5
30692: PUSH
30693: LD_VAR 0 3
30697: UNION
30698: ST_TO_ADDR
// if tmp >= 5 then
30699: LD_VAR 0 5
30703: PUSH
30704: LD_INT 5
30706: GREATEREQUAL
30707: IFFALSE 30711
// break ;
30709: GO 30713
// end ;
30711: GO 30680
30713: POP
30714: POP
// end ; if not tmp then
30715: LD_VAR 0 5
30719: NOT
30720: IFFALSE 30724
// continue ;
30722: GO 29936
// for j in tmp do
30724: LD_ADDR_VAR 0 3
30728: PUSH
30729: LD_VAR 0 5
30733: PUSH
30734: FOR_IN
30735: IFFALSE 30825
// if not GetTag ( j ) then
30737: LD_VAR 0 3
30741: PPUSH
30742: CALL_OW 110
30746: NOT
30747: IFFALSE 30823
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
30749: LD_ADDR_EXP 66
30753: PUSH
30754: LD_EXP 66
30758: PPUSH
30759: LD_VAR 0 2
30763: PUSH
30764: LD_EXP 66
30768: PUSH
30769: LD_VAR 0 2
30773: ARRAY
30774: PUSH
30775: LD_INT 1
30777: PLUS
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PPUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: CALL 53281 0 3
30792: ST_TO_ADDR
// SetTag ( j , 107 ) ;
30793: LD_VAR 0 3
30797: PPUSH
30798: LD_INT 107
30800: PPUSH
30801: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
30805: LD_EXP 66
30809: PUSH
30810: LD_VAR 0 2
30814: ARRAY
30815: PUSH
30816: LD_INT 5
30818: GREATEREQUAL
30819: IFFALSE 30823
// break ;
30821: GO 30825
// end ;
30823: GO 30734
30825: POP
30826: POP
// end ; if mc_crates_collector [ i ] and target then
30827: LD_EXP 66
30831: PUSH
30832: LD_VAR 0 2
30836: ARRAY
30837: PUSH
30838: LD_VAR 0 6
30842: AND
30843: IFFALSE 31086
// begin if mc_crates_collector [ i ] < target [ 1 ] then
30845: LD_EXP 66
30849: PUSH
30850: LD_VAR 0 2
30854: ARRAY
30855: PUSH
30856: LD_VAR 0 6
30860: PUSH
30861: LD_INT 1
30863: ARRAY
30864: LESS
30865: IFFALSE 30885
// tmp := mc_crates_collector [ i ] else
30867: LD_ADDR_VAR 0 5
30871: PUSH
30872: LD_EXP 66
30876: PUSH
30877: LD_VAR 0 2
30881: ARRAY
30882: ST_TO_ADDR
30883: GO 30899
// tmp := target [ 1 ] ;
30885: LD_ADDR_VAR 0 5
30889: PUSH
30890: LD_VAR 0 6
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: ST_TO_ADDR
// k := 0 ;
30899: LD_ADDR_VAR 0 4
30903: PUSH
30904: LD_INT 0
30906: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: LD_EXP 66
30916: PUSH
30917: LD_VAR 0 2
30921: ARRAY
30922: PUSH
30923: FOR_IN
30924: IFFALSE 31084
// begin k := k + 1 ;
30926: LD_ADDR_VAR 0 4
30930: PUSH
30931: LD_VAR 0 4
30935: PUSH
30936: LD_INT 1
30938: PLUS
30939: ST_TO_ADDR
// if k > tmp then
30940: LD_VAR 0 4
30944: PUSH
30945: LD_VAR 0 5
30949: GREATER
30950: IFFALSE 30954
// break ;
30952: GO 31084
// if not GetClass ( j ) in [ 2 , 16 ] then
30954: LD_VAR 0 3
30958: PPUSH
30959: CALL_OW 257
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: LD_INT 16
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: IN
30974: NOT
30975: IFFALSE 31028
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
30977: LD_ADDR_EXP 66
30981: PUSH
30982: LD_EXP 66
30986: PPUSH
30987: LD_VAR 0 2
30991: PPUSH
30992: LD_EXP 66
30996: PUSH
30997: LD_VAR 0 2
31001: ARRAY
31002: PUSH
31003: LD_VAR 0 3
31007: DIFF
31008: PPUSH
31009: CALL_OW 1
31013: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31014: LD_VAR 0 3
31018: PPUSH
31019: LD_INT 0
31021: PPUSH
31022: CALL_OW 109
// continue ;
31026: GO 30923
// end ; if IsInUnit ( j ) then
31028: LD_VAR 0 3
31032: PPUSH
31033: CALL_OW 310
31037: IFFALSE 31048
// ComExitBuilding ( j ) ;
31039: LD_VAR 0 3
31043: PPUSH
31044: CALL_OW 122
// wait ( 3 ) ;
31048: LD_INT 3
31050: PPUSH
31051: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31055: LD_VAR 0 3
31059: PPUSH
31060: LD_VAR 0 6
31064: PUSH
31065: LD_INT 2
31067: ARRAY
31068: PPUSH
31069: LD_VAR 0 6
31073: PUSH
31074: LD_INT 3
31076: ARRAY
31077: PPUSH
31078: CALL_OW 117
// end ;
31082: GO 30923
31084: POP
31085: POP
// end ; end else
31086: GO 31667
// begin for j in cargo do
31088: LD_ADDR_VAR 0 3
31092: PUSH
31093: LD_VAR 0 7
31097: PUSH
31098: FOR_IN
31099: IFFALSE 31665
// begin if GetTag ( j ) <> 0 then
31101: LD_VAR 0 3
31105: PPUSH
31106: CALL_OW 110
31110: PUSH
31111: LD_INT 0
31113: NONEQUAL
31114: IFFALSE 31118
// continue ;
31116: GO 31098
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31118: LD_VAR 0 3
31122: PPUSH
31123: CALL_OW 256
31127: PUSH
31128: LD_INT 1000
31130: LESS
31131: PUSH
31132: LD_VAR 0 3
31136: PPUSH
31137: LD_EXP 73
31141: PUSH
31142: LD_VAR 0 2
31146: ARRAY
31147: PPUSH
31148: CALL_OW 308
31152: NOT
31153: AND
31154: IFFALSE 31176
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31156: LD_VAR 0 3
31160: PPUSH
31161: LD_EXP 73
31165: PUSH
31166: LD_VAR 0 2
31170: ARRAY
31171: PPUSH
31172: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31176: LD_VAR 0 3
31180: PPUSH
31181: CALL_OW 256
31185: PUSH
31186: LD_INT 1000
31188: LESS
31189: PUSH
31190: LD_VAR 0 3
31194: PPUSH
31195: LD_EXP 73
31199: PUSH
31200: LD_VAR 0 2
31204: ARRAY
31205: PPUSH
31206: CALL_OW 308
31210: AND
31211: IFFALSE 31215
// continue ;
31213: GO 31098
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31215: LD_VAR 0 3
31219: PPUSH
31220: CALL_OW 262
31224: PUSH
31225: LD_INT 2
31227: EQUAL
31228: PUSH
31229: LD_VAR 0 3
31233: PPUSH
31234: CALL_OW 261
31238: PUSH
31239: LD_INT 15
31241: LESS
31242: AND
31243: IFFALSE 31247
// continue ;
31245: GO 31098
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31247: LD_VAR 0 3
31251: PPUSH
31252: CALL_OW 262
31256: PUSH
31257: LD_INT 1
31259: EQUAL
31260: PUSH
31261: LD_VAR 0 3
31265: PPUSH
31266: CALL_OW 261
31270: PUSH
31271: LD_INT 10
31273: LESS
31274: AND
31275: IFFALSE 31604
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31277: LD_ADDR_VAR 0 8
31281: PUSH
31282: LD_EXP 49
31286: PUSH
31287: LD_VAR 0 2
31291: ARRAY
31292: PPUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 30
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 72
31325: ST_TO_ADDR
// if not depot then
31326: LD_VAR 0 8
31330: NOT
31331: IFFALSE 31335
// continue ;
31333: GO 31098
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31335: LD_VAR 0 3
31339: PPUSH
31340: LD_VAR 0 8
31344: PPUSH
31345: LD_VAR 0 3
31349: PPUSH
31350: CALL_OW 74
31354: PPUSH
31355: CALL_OW 296
31359: PUSH
31360: LD_INT 6
31362: LESS
31363: IFFALSE 31379
// SetFuel ( j , 100 ) else
31365: LD_VAR 0 3
31369: PPUSH
31370: LD_INT 100
31372: PPUSH
31373: CALL_OW 240
31377: GO 31604
// if GetFuel ( j ) = 0 then
31379: LD_VAR 0 3
31383: PPUSH
31384: CALL_OW 261
31388: PUSH
31389: LD_INT 0
31391: EQUAL
31392: IFFALSE 31604
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31394: LD_ADDR_EXP 68
31398: PUSH
31399: LD_EXP 68
31403: PPUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: LD_EXP 68
31413: PUSH
31414: LD_VAR 0 2
31418: ARRAY
31419: PUSH
31420: LD_VAR 0 3
31424: DIFF
31425: PPUSH
31426: CALL_OW 1
31430: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
31431: LD_VAR 0 3
31435: PPUSH
31436: CALL_OW 263
31440: PUSH
31441: LD_INT 1
31443: EQUAL
31444: IFFALSE 31460
// ComExitVehicle ( IsInUnit ( j ) ) ;
31446: LD_VAR 0 3
31450: PPUSH
31451: CALL_OW 310
31455: PPUSH
31456: CALL_OW 121
// if GetControl ( j ) = control_remote then
31460: LD_VAR 0 3
31464: PPUSH
31465: CALL_OW 263
31469: PUSH
31470: LD_INT 2
31472: EQUAL
31473: IFFALSE 31484
// ComUnlink ( j ) ;
31475: LD_VAR 0 3
31479: PPUSH
31480: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
31484: LD_ADDR_VAR 0 9
31488: PUSH
31489: LD_VAR 0 2
31493: PPUSH
31494: LD_INT 3
31496: PPUSH
31497: CALL 40741 0 2
31501: ST_TO_ADDR
// if fac then
31502: LD_VAR 0 9
31506: IFFALSE 31602
// begin for k in fac do
31508: LD_ADDR_VAR 0 4
31512: PUSH
31513: LD_VAR 0 9
31517: PUSH
31518: FOR_IN
31519: IFFALSE 31600
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
31521: LD_ADDR_VAR 0 10
31525: PUSH
31526: LD_VAR 0 9
31530: PPUSH
31531: LD_VAR 0 3
31535: PPUSH
31536: CALL_OW 265
31540: PPUSH
31541: LD_VAR 0 3
31545: PPUSH
31546: CALL_OW 262
31550: PPUSH
31551: LD_VAR 0 3
31555: PPUSH
31556: CALL_OW 263
31560: PPUSH
31561: LD_VAR 0 3
31565: PPUSH
31566: CALL_OW 264
31570: PPUSH
31571: CALL 50813 0 5
31575: ST_TO_ADDR
// if components then
31576: LD_VAR 0 10
31580: IFFALSE 31598
// begin MC_InsertProduceList ( i , components ) ;
31582: LD_VAR 0 2
31586: PPUSH
31587: LD_VAR 0 10
31591: PPUSH
31592: CALL 40286 0 2
// break ;
31596: GO 31600
// end ; end ;
31598: GO 31518
31600: POP
31601: POP
// end ; continue ;
31602: GO 31098
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
31604: LD_VAR 0 3
31608: PPUSH
31609: LD_INT 1
31611: PPUSH
31612: CALL_OW 289
31616: PUSH
31617: LD_INT 100
31619: LESS
31620: PUSH
31621: LD_VAR 0 3
31625: PPUSH
31626: CALL_OW 314
31630: NOT
31631: AND
31632: IFFALSE 31661
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31634: LD_VAR 0 3
31638: PPUSH
31639: LD_VAR 0 6
31643: PUSH
31644: LD_INT 2
31646: ARRAY
31647: PPUSH
31648: LD_VAR 0 6
31652: PUSH
31653: LD_INT 3
31655: ARRAY
31656: PPUSH
31657: CALL_OW 117
// break ;
31661: GO 31665
// end ;
31663: GO 31098
31665: POP
31666: POP
// end ; end ;
31667: GO 29936
31669: POP
31670: POP
// end ;
31671: LD_VAR 0 1
31675: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
31676: LD_INT 0
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
// if not mc_bases then
31682: LD_EXP 49
31686: NOT
31687: IFFALSE 31691
// exit ;
31689: GO 31852
// for i = 1 to mc_bases do
31691: LD_ADDR_VAR 0 2
31695: PUSH
31696: DOUBLE
31697: LD_INT 1
31699: DEC
31700: ST_TO_ADDR
31701: LD_EXP 49
31705: PUSH
31706: FOR_TO
31707: IFFALSE 31850
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
31709: LD_ADDR_VAR 0 4
31713: PUSH
31714: LD_EXP 68
31718: PUSH
31719: LD_VAR 0 2
31723: ARRAY
31724: PUSH
31725: LD_EXP 71
31729: PUSH
31730: LD_VAR 0 2
31734: ARRAY
31735: UNION
31736: PPUSH
31737: LD_INT 33
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PPUSH
31747: CALL_OW 72
31751: ST_TO_ADDR
// if tmp then
31752: LD_VAR 0 4
31756: IFFALSE 31848
// for j in tmp do
31758: LD_ADDR_VAR 0 3
31762: PUSH
31763: LD_VAR 0 4
31767: PUSH
31768: FOR_IN
31769: IFFALSE 31846
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
31771: LD_VAR 0 3
31775: PPUSH
31776: CALL_OW 312
31780: NOT
31781: PUSH
31782: LD_VAR 0 3
31786: PPUSH
31787: CALL_OW 256
31791: PUSH
31792: LD_INT 250
31794: GREATEREQUAL
31795: AND
31796: IFFALSE 31809
// Connect ( j ) else
31798: LD_VAR 0 3
31802: PPUSH
31803: CALL 56214 0 1
31807: GO 31844
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
31809: LD_VAR 0 3
31813: PPUSH
31814: CALL_OW 256
31818: PUSH
31819: LD_INT 250
31821: LESS
31822: PUSH
31823: LD_VAR 0 3
31827: PPUSH
31828: CALL_OW 312
31832: AND
31833: IFFALSE 31844
// ComUnlink ( j ) ;
31835: LD_VAR 0 3
31839: PPUSH
31840: CALL_OW 136
31844: GO 31768
31846: POP
31847: POP
// end ;
31848: GO 31706
31850: POP
31851: POP
// end ;
31852: LD_VAR 0 1
31856: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
31857: LD_INT 0
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
31863: PPUSH
// if not mc_bases then
31864: LD_EXP 49
31868: NOT
31869: IFFALSE 31873
// exit ;
31871: GO 32318
// for i = 1 to mc_bases do
31873: LD_ADDR_VAR 0 2
31877: PUSH
31878: DOUBLE
31879: LD_INT 1
31881: DEC
31882: ST_TO_ADDR
31883: LD_EXP 49
31887: PUSH
31888: FOR_TO
31889: IFFALSE 32316
// begin if not mc_produce [ i ] then
31891: LD_EXP 70
31895: PUSH
31896: LD_VAR 0 2
31900: ARRAY
31901: NOT
31902: IFFALSE 31906
// continue ;
31904: GO 31888
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31906: LD_ADDR_VAR 0 5
31910: PUSH
31911: LD_EXP 49
31915: PUSH
31916: LD_VAR 0 2
31920: ARRAY
31921: PPUSH
31922: LD_INT 30
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PPUSH
31932: CALL_OW 72
31936: ST_TO_ADDR
// if not fac then
31937: LD_VAR 0 5
31941: NOT
31942: IFFALSE 31946
// continue ;
31944: GO 31888
// for j in fac do
31946: LD_ADDR_VAR 0 3
31950: PUSH
31951: LD_VAR 0 5
31955: PUSH
31956: FOR_IN
31957: IFFALSE 32312
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
31959: LD_VAR 0 3
31963: PPUSH
31964: CALL_OW 461
31968: PUSH
31969: LD_INT 2
31971: NONEQUAL
31972: PUSH
31973: LD_VAR 0 3
31977: PPUSH
31978: LD_INT 15
31980: PPUSH
31981: CALL 55874 0 2
31985: PUSH
31986: LD_INT 4
31988: ARRAY
31989: OR
31990: IFFALSE 31994
// continue ;
31992: GO 31956
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
31994: LD_VAR 0 3
31998: PPUSH
31999: LD_EXP 70
32003: PUSH
32004: LD_VAR 0 2
32008: ARRAY
32009: PUSH
32010: LD_INT 1
32012: ARRAY
32013: PUSH
32014: LD_INT 1
32016: ARRAY
32017: PPUSH
32018: LD_EXP 70
32022: PUSH
32023: LD_VAR 0 2
32027: ARRAY
32028: PUSH
32029: LD_INT 1
32031: ARRAY
32032: PUSH
32033: LD_INT 2
32035: ARRAY
32036: PPUSH
32037: LD_EXP 70
32041: PUSH
32042: LD_VAR 0 2
32046: ARRAY
32047: PUSH
32048: LD_INT 1
32050: ARRAY
32051: PUSH
32052: LD_INT 3
32054: ARRAY
32055: PPUSH
32056: LD_EXP 70
32060: PUSH
32061: LD_VAR 0 2
32065: ARRAY
32066: PUSH
32067: LD_INT 1
32069: ARRAY
32070: PUSH
32071: LD_INT 4
32073: ARRAY
32074: PPUSH
32075: CALL_OW 448
32079: PUSH
32080: LD_VAR 0 3
32084: PPUSH
32085: LD_EXP 70
32089: PUSH
32090: LD_VAR 0 2
32094: ARRAY
32095: PUSH
32096: LD_INT 1
32098: ARRAY
32099: PUSH
32100: LD_INT 1
32102: ARRAY
32103: PUSH
32104: LD_EXP 70
32108: PUSH
32109: LD_VAR 0 2
32113: ARRAY
32114: PUSH
32115: LD_INT 1
32117: ARRAY
32118: PUSH
32119: LD_INT 2
32121: ARRAY
32122: PUSH
32123: LD_EXP 70
32127: PUSH
32128: LD_VAR 0 2
32132: ARRAY
32133: PUSH
32134: LD_INT 1
32136: ARRAY
32137: PUSH
32138: LD_INT 3
32140: ARRAY
32141: PUSH
32142: LD_EXP 70
32146: PUSH
32147: LD_VAR 0 2
32151: ARRAY
32152: PUSH
32153: LD_INT 1
32155: ARRAY
32156: PUSH
32157: LD_INT 4
32159: ARRAY
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL 59545 0 2
32171: AND
32172: IFFALSE 32310
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32174: LD_VAR 0 3
32178: PPUSH
32179: LD_EXP 70
32183: PUSH
32184: LD_VAR 0 2
32188: ARRAY
32189: PUSH
32190: LD_INT 1
32192: ARRAY
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: PPUSH
32198: LD_EXP 70
32202: PUSH
32203: LD_VAR 0 2
32207: ARRAY
32208: PUSH
32209: LD_INT 1
32211: ARRAY
32212: PUSH
32213: LD_INT 2
32215: ARRAY
32216: PPUSH
32217: LD_EXP 70
32221: PUSH
32222: LD_VAR 0 2
32226: ARRAY
32227: PUSH
32228: LD_INT 1
32230: ARRAY
32231: PUSH
32232: LD_INT 3
32234: ARRAY
32235: PPUSH
32236: LD_EXP 70
32240: PUSH
32241: LD_VAR 0 2
32245: ARRAY
32246: PUSH
32247: LD_INT 1
32249: ARRAY
32250: PUSH
32251: LD_INT 4
32253: ARRAY
32254: PPUSH
32255: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32259: LD_ADDR_VAR 0 4
32263: PUSH
32264: LD_EXP 70
32268: PUSH
32269: LD_VAR 0 2
32273: ARRAY
32274: PPUSH
32275: LD_INT 1
32277: PPUSH
32278: CALL_OW 3
32282: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32283: LD_ADDR_EXP 70
32287: PUSH
32288: LD_EXP 70
32292: PPUSH
32293: LD_VAR 0 2
32297: PPUSH
32298: LD_VAR 0 4
32302: PPUSH
32303: CALL_OW 1
32307: ST_TO_ADDR
// break ;
32308: GO 32312
// end ; end ;
32310: GO 31956
32312: POP
32313: POP
// end ;
32314: GO 31888
32316: POP
32317: POP
// end ;
32318: LD_VAR 0 1
32322: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32323: LD_INT 0
32325: PPUSH
32326: PPUSH
32327: PPUSH
// if not mc_bases then
32328: LD_EXP 49
32332: NOT
32333: IFFALSE 32337
// exit ;
32335: GO 32426
// for i = 1 to mc_bases do
32337: LD_ADDR_VAR 0 2
32341: PUSH
32342: DOUBLE
32343: LD_INT 1
32345: DEC
32346: ST_TO_ADDR
32347: LD_EXP 49
32351: PUSH
32352: FOR_TO
32353: IFFALSE 32424
// begin if mc_attack [ i ] then
32355: LD_EXP 69
32359: PUSH
32360: LD_VAR 0 2
32364: ARRAY
32365: IFFALSE 32422
// begin tmp := mc_attack [ i ] [ 1 ] ;
32367: LD_ADDR_VAR 0 3
32371: PUSH
32372: LD_EXP 69
32376: PUSH
32377: LD_VAR 0 2
32381: ARRAY
32382: PUSH
32383: LD_INT 1
32385: ARRAY
32386: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32387: LD_ADDR_EXP 69
32391: PUSH
32392: LD_EXP 69
32396: PPUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: EMPTY
32403: PPUSH
32404: CALL_OW 1
32408: ST_TO_ADDR
// Attack ( tmp ) ;
32409: LD_VAR 0 3
32413: PPUSH
32414: CALL 81758 0 1
// exit ;
32418: POP
32419: POP
32420: GO 32426
// end ; end ;
32422: GO 32352
32424: POP
32425: POP
// end ;
32426: LD_VAR 0 1
32430: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
32431: LD_INT 0
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
// if not mc_bases then
32440: LD_EXP 49
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 33031
// for i = 1 to mc_bases do
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: DOUBLE
32455: LD_INT 1
32457: DEC
32458: ST_TO_ADDR
32459: LD_EXP 49
32463: PUSH
32464: FOR_TO
32465: IFFALSE 33029
// begin if not mc_bases [ i ] then
32467: LD_EXP 49
32471: PUSH
32472: LD_VAR 0 2
32476: ARRAY
32477: NOT
32478: IFFALSE 32482
// continue ;
32480: GO 32464
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
32482: LD_ADDR_VAR 0 7
32486: PUSH
32487: LD_EXP 49
32491: PUSH
32492: LD_VAR 0 2
32496: ARRAY
32497: PUSH
32498: LD_INT 1
32500: ARRAY
32501: PPUSH
32502: CALL 50117 0 1
32506: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
32507: LD_ADDR_EXP 72
32511: PUSH
32512: LD_EXP 72
32516: PPUSH
32517: LD_VAR 0 2
32521: PPUSH
32522: LD_EXP 49
32526: PUSH
32527: LD_VAR 0 2
32531: ARRAY
32532: PUSH
32533: LD_INT 1
32535: ARRAY
32536: PPUSH
32537: CALL_OW 255
32541: PPUSH
32542: LD_EXP 74
32546: PUSH
32547: LD_VAR 0 2
32551: ARRAY
32552: PPUSH
32553: CALL 48035 0 2
32557: PPUSH
32558: CALL_OW 1
32562: ST_TO_ADDR
// if not mc_scan [ i ] then
32563: LD_EXP 72
32567: PUSH
32568: LD_VAR 0 2
32572: ARRAY
32573: NOT
32574: IFFALSE 32729
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32576: LD_ADDR_VAR 0 4
32580: PUSH
32581: LD_EXP 49
32585: PUSH
32586: LD_VAR 0 2
32590: ARRAY
32591: PPUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 25
32597: PUSH
32598: LD_INT 5
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 25
32607: PUSH
32608: LD_INT 8
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 25
32617: PUSH
32618: LD_INT 9
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: PPUSH
32631: CALL_OW 72
32635: ST_TO_ADDR
// if not tmp then
32636: LD_VAR 0 4
32640: NOT
32641: IFFALSE 32645
// continue ;
32643: GO 32464
// for j in tmp do
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_VAR 0 4
32654: PUSH
32655: FOR_IN
32656: IFFALSE 32727
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
32658: LD_VAR 0 3
32662: PPUSH
32663: CALL_OW 310
32667: PPUSH
32668: CALL_OW 266
32672: PUSH
32673: LD_INT 5
32675: EQUAL
32676: PUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: CALL_OW 257
32686: PUSH
32687: LD_INT 1
32689: EQUAL
32690: AND
32691: PUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: CALL_OW 459
32701: NOT
32702: AND
32703: PUSH
32704: LD_VAR 0 7
32708: AND
32709: IFFALSE 32725
// ComChangeProfession ( j , class ) ;
32711: LD_VAR 0 3
32715: PPUSH
32716: LD_VAR 0 7
32720: PPUSH
32721: CALL_OW 123
32725: GO 32655
32727: POP
32728: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
32729: LD_EXP 72
32733: PUSH
32734: LD_VAR 0 2
32738: ARRAY
32739: PUSH
32740: LD_EXP 71
32744: PUSH
32745: LD_VAR 0 2
32749: ARRAY
32750: NOT
32751: AND
32752: PUSH
32753: LD_EXP 49
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: PPUSH
32764: LD_INT 30
32766: PUSH
32767: LD_INT 32
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PPUSH
32774: CALL_OW 72
32778: NOT
32779: AND
32780: PUSH
32781: LD_EXP 49
32785: PUSH
32786: LD_VAR 0 2
32790: ARRAY
32791: PPUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 30
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 30
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: PPUSH
32820: CALL_OW 72
32824: NOT
32825: AND
32826: IFFALSE 32958
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32828: LD_ADDR_VAR 0 4
32832: PUSH
32833: LD_EXP 49
32837: PUSH
32838: LD_VAR 0 2
32842: ARRAY
32843: PPUSH
32844: LD_INT 2
32846: PUSH
32847: LD_INT 25
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 25
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 25
32869: PUSH
32870: LD_INT 8
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 25
32879: PUSH
32880: LD_INT 9
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: PPUSH
32894: CALL_OW 72
32898: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
32899: LD_ADDR_VAR 0 4
32903: PUSH
32904: LD_VAR 0 4
32908: PUSH
32909: LD_VAR 0 4
32913: PPUSH
32914: LD_INT 18
32916: PPUSH
32917: CALL 86541 0 2
32921: DIFF
32922: ST_TO_ADDR
// if tmp then
32923: LD_VAR 0 4
32927: IFFALSE 32958
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
32929: LD_VAR 0 2
32933: PPUSH
32934: LD_VAR 0 4
32938: PPUSH
32939: LD_EXP 74
32943: PUSH
32944: LD_VAR 0 2
32948: ARRAY
32949: PPUSH
32950: CALL 48070 0 3
// exit ;
32954: POP
32955: POP
32956: GO 33031
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
32958: LD_EXP 72
32962: PUSH
32963: LD_VAR 0 2
32967: ARRAY
32968: PUSH
32969: LD_EXP 71
32973: PUSH
32974: LD_VAR 0 2
32978: ARRAY
32979: AND
32980: IFFALSE 33027
// begin tmp := mc_defender [ i ] ;
32982: LD_ADDR_VAR 0 4
32986: PUSH
32987: LD_EXP 71
32991: PUSH
32992: LD_VAR 0 2
32996: ARRAY
32997: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
32998: LD_VAR 0 2
33002: PPUSH
33003: LD_VAR 0 4
33007: PPUSH
33008: LD_EXP 72
33012: PUSH
33013: LD_VAR 0 2
33017: ARRAY
33018: PPUSH
33019: CALL 48568 0 3
// exit ;
33023: POP
33024: POP
33025: GO 33031
// end ; end ;
33027: GO 32464
33029: POP
33030: POP
// end ;
33031: LD_VAR 0 1
33035: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33036: LD_INT 0
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
// if not mc_bases then
33049: LD_EXP 49
33053: NOT
33054: IFFALSE 33058
// exit ;
33056: GO 34145
// for i = 1 to mc_bases do
33058: LD_ADDR_VAR 0 2
33062: PUSH
33063: DOUBLE
33064: LD_INT 1
33066: DEC
33067: ST_TO_ADDR
33068: LD_EXP 49
33072: PUSH
33073: FOR_TO
33074: IFFALSE 34143
// begin tmp := mc_lab [ i ] ;
33076: LD_ADDR_VAR 0 6
33080: PUSH
33081: LD_EXP 82
33085: PUSH
33086: LD_VAR 0 2
33090: ARRAY
33091: ST_TO_ADDR
// if not tmp then
33092: LD_VAR 0 6
33096: NOT
33097: IFFALSE 33101
// continue ;
33099: GO 33073
// idle_lab := 0 ;
33101: LD_ADDR_VAR 0 11
33105: PUSH
33106: LD_INT 0
33108: ST_TO_ADDR
// for j in tmp do
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_VAR 0 6
33118: PUSH
33119: FOR_IN
33120: IFFALSE 34139
// begin researching := false ;
33122: LD_ADDR_VAR 0 10
33126: PUSH
33127: LD_INT 0
33129: ST_TO_ADDR
// side := GetSide ( j ) ;
33130: LD_ADDR_VAR 0 4
33134: PUSH
33135: LD_VAR 0 3
33139: PPUSH
33140: CALL_OW 255
33144: ST_TO_ADDR
// if not mc_tech [ side ] then
33145: LD_EXP 76
33149: PUSH
33150: LD_VAR 0 4
33154: ARRAY
33155: NOT
33156: IFFALSE 33160
// continue ;
33158: GO 33119
// if BuildingStatus ( j ) = bs_idle then
33160: LD_VAR 0 3
33164: PPUSH
33165: CALL_OW 461
33169: PUSH
33170: LD_INT 2
33172: EQUAL
33173: IFFALSE 33361
// begin if idle_lab and UnitsInside ( j ) < 6 then
33175: LD_VAR 0 11
33179: PUSH
33180: LD_VAR 0 3
33184: PPUSH
33185: CALL_OW 313
33189: PUSH
33190: LD_INT 6
33192: LESS
33193: AND
33194: IFFALSE 33265
// begin tmp2 := UnitsInside ( idle_lab ) ;
33196: LD_ADDR_VAR 0 9
33200: PUSH
33201: LD_VAR 0 11
33205: PPUSH
33206: CALL_OW 313
33210: ST_TO_ADDR
// if tmp2 then
33211: LD_VAR 0 9
33215: IFFALSE 33257
// for x in tmp2 do
33217: LD_ADDR_VAR 0 7
33221: PUSH
33222: LD_VAR 0 9
33226: PUSH
33227: FOR_IN
33228: IFFALSE 33255
// begin ComExitBuilding ( x ) ;
33230: LD_VAR 0 7
33234: PPUSH
33235: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33239: LD_VAR 0 7
33243: PPUSH
33244: LD_VAR 0 3
33248: PPUSH
33249: CALL_OW 180
// end ;
33253: GO 33227
33255: POP
33256: POP
// idle_lab := 0 ;
33257: LD_ADDR_VAR 0 11
33261: PUSH
33262: LD_INT 0
33264: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33265: LD_ADDR_VAR 0 5
33269: PUSH
33270: LD_EXP 76
33274: PUSH
33275: LD_VAR 0 4
33279: ARRAY
33280: PUSH
33281: FOR_IN
33282: IFFALSE 33342
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33284: LD_VAR 0 3
33288: PPUSH
33289: LD_VAR 0 5
33293: PPUSH
33294: CALL_OW 430
33298: PUSH
33299: LD_VAR 0 4
33303: PPUSH
33304: LD_VAR 0 5
33308: PPUSH
33309: CALL 47140 0 2
33313: AND
33314: IFFALSE 33340
// begin researching := true ;
33316: LD_ADDR_VAR 0 10
33320: PUSH
33321: LD_INT 1
33323: ST_TO_ADDR
// ComResearch ( j , t ) ;
33324: LD_VAR 0 3
33328: PPUSH
33329: LD_VAR 0 5
33333: PPUSH
33334: CALL_OW 124
// break ;
33338: GO 33342
// end ;
33340: GO 33281
33342: POP
33343: POP
// if not researching then
33344: LD_VAR 0 10
33348: NOT
33349: IFFALSE 33361
// idle_lab := j ;
33351: LD_ADDR_VAR 0 11
33355: PUSH
33356: LD_VAR 0 3
33360: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33361: LD_VAR 0 3
33365: PPUSH
33366: CALL_OW 461
33370: PUSH
33371: LD_INT 10
33373: EQUAL
33374: IFFALSE 33962
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33376: LD_EXP 78
33380: PUSH
33381: LD_VAR 0 2
33385: ARRAY
33386: NOT
33387: PUSH
33388: LD_EXP 79
33392: PUSH
33393: LD_VAR 0 2
33397: ARRAY
33398: NOT
33399: AND
33400: PUSH
33401: LD_EXP 76
33405: PUSH
33406: LD_VAR 0 4
33410: ARRAY
33411: PUSH
33412: LD_INT 1
33414: GREATER
33415: AND
33416: IFFALSE 33547
// begin ComCancel ( j ) ;
33418: LD_VAR 0 3
33422: PPUSH
33423: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
33427: LD_ADDR_EXP 76
33431: PUSH
33432: LD_EXP 76
33436: PPUSH
33437: LD_VAR 0 4
33441: PPUSH
33442: LD_EXP 76
33446: PUSH
33447: LD_VAR 0 4
33451: ARRAY
33452: PPUSH
33453: LD_EXP 76
33457: PUSH
33458: LD_VAR 0 4
33462: ARRAY
33463: PUSH
33464: LD_INT 1
33466: MINUS
33467: PPUSH
33468: LD_EXP 76
33472: PUSH
33473: LD_VAR 0 4
33477: ARRAY
33478: PPUSH
33479: LD_INT 0
33481: PPUSH
33482: CALL 52699 0 4
33486: PPUSH
33487: CALL_OW 1
33491: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
33492: LD_ADDR_EXP 76
33496: PUSH
33497: LD_EXP 76
33501: PPUSH
33502: LD_VAR 0 4
33506: PPUSH
33507: LD_EXP 76
33511: PUSH
33512: LD_VAR 0 4
33516: ARRAY
33517: PPUSH
33518: LD_EXP 76
33522: PUSH
33523: LD_VAR 0 4
33527: ARRAY
33528: PPUSH
33529: LD_INT 1
33531: PPUSH
33532: LD_INT 0
33534: PPUSH
33535: CALL 52699 0 4
33539: PPUSH
33540: CALL_OW 1
33544: ST_TO_ADDR
// continue ;
33545: GO 33119
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
33547: LD_EXP 78
33551: PUSH
33552: LD_VAR 0 2
33556: ARRAY
33557: PUSH
33558: LD_EXP 79
33562: PUSH
33563: LD_VAR 0 2
33567: ARRAY
33568: NOT
33569: AND
33570: IFFALSE 33697
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
33572: LD_ADDR_EXP 79
33576: PUSH
33577: LD_EXP 79
33581: PPUSH
33582: LD_VAR 0 2
33586: PUSH
33587: LD_EXP 79
33591: PUSH
33592: LD_VAR 0 2
33596: ARRAY
33597: PUSH
33598: LD_INT 1
33600: PLUS
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PPUSH
33606: LD_EXP 78
33610: PUSH
33611: LD_VAR 0 2
33615: ARRAY
33616: PUSH
33617: LD_INT 1
33619: ARRAY
33620: PPUSH
33621: CALL 53281 0 3
33625: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
33626: LD_EXP 78
33630: PUSH
33631: LD_VAR 0 2
33635: ARRAY
33636: PUSH
33637: LD_INT 1
33639: ARRAY
33640: PPUSH
33641: LD_INT 112
33643: PPUSH
33644: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
33648: LD_ADDR_VAR 0 9
33652: PUSH
33653: LD_EXP 78
33657: PUSH
33658: LD_VAR 0 2
33662: ARRAY
33663: PPUSH
33664: LD_INT 1
33666: PPUSH
33667: CALL_OW 3
33671: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
33672: LD_ADDR_EXP 78
33676: PUSH
33677: LD_EXP 78
33681: PPUSH
33682: LD_VAR 0 2
33686: PPUSH
33687: LD_VAR 0 9
33691: PPUSH
33692: CALL_OW 1
33696: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
33697: LD_EXP 78
33701: PUSH
33702: LD_VAR 0 2
33706: ARRAY
33707: PUSH
33708: LD_EXP 79
33712: PUSH
33713: LD_VAR 0 2
33717: ARRAY
33718: AND
33719: PUSH
33720: LD_EXP 79
33724: PUSH
33725: LD_VAR 0 2
33729: ARRAY
33730: PUSH
33731: LD_INT 1
33733: ARRAY
33734: PPUSH
33735: CALL_OW 310
33739: NOT
33740: AND
33741: PUSH
33742: LD_VAR 0 3
33746: PPUSH
33747: CALL_OW 313
33751: PUSH
33752: LD_INT 6
33754: EQUAL
33755: AND
33756: IFFALSE 33812
// begin tmp2 := UnitsInside ( j ) ;
33758: LD_ADDR_VAR 0 9
33762: PUSH
33763: LD_VAR 0 3
33767: PPUSH
33768: CALL_OW 313
33772: ST_TO_ADDR
// if tmp2 = 6 then
33773: LD_VAR 0 9
33777: PUSH
33778: LD_INT 6
33780: EQUAL
33781: IFFALSE 33812
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
33783: LD_VAR 0 9
33787: PUSH
33788: LD_INT 1
33790: ARRAY
33791: PPUSH
33792: LD_INT 112
33794: PPUSH
33795: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
33799: LD_VAR 0 9
33803: PUSH
33804: LD_INT 1
33806: ARRAY
33807: PPUSH
33808: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
33812: LD_EXP 79
33816: PUSH
33817: LD_VAR 0 2
33821: ARRAY
33822: PUSH
33823: LD_EXP 79
33827: PUSH
33828: LD_VAR 0 2
33832: ARRAY
33833: PUSH
33834: LD_INT 1
33836: ARRAY
33837: PPUSH
33838: CALL_OW 314
33842: NOT
33843: AND
33844: PUSH
33845: LD_EXP 79
33849: PUSH
33850: LD_VAR 0 2
33854: ARRAY
33855: PUSH
33856: LD_INT 1
33858: ARRAY
33859: PPUSH
33860: CALL_OW 310
33864: NOT
33865: AND
33866: IFFALSE 33892
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
33868: LD_EXP 79
33872: PUSH
33873: LD_VAR 0 2
33877: ARRAY
33878: PUSH
33879: LD_INT 1
33881: ARRAY
33882: PPUSH
33883: LD_VAR 0 3
33887: PPUSH
33888: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
33892: LD_EXP 79
33896: PUSH
33897: LD_VAR 0 2
33901: ARRAY
33902: PUSH
33903: LD_INT 1
33905: ARRAY
33906: PPUSH
33907: CALL_OW 310
33911: PUSH
33912: LD_EXP 79
33916: PUSH
33917: LD_VAR 0 2
33921: ARRAY
33922: PUSH
33923: LD_INT 1
33925: ARRAY
33926: PPUSH
33927: CALL_OW 310
33931: PPUSH
33932: CALL_OW 461
33936: PUSH
33937: LD_INT 3
33939: NONEQUAL
33940: AND
33941: IFFALSE 33962
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
33943: LD_EXP 79
33947: PUSH
33948: LD_VAR 0 2
33952: ARRAY
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: PPUSH
33958: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
33962: LD_VAR 0 3
33966: PPUSH
33967: CALL_OW 461
33971: PUSH
33972: LD_INT 6
33974: EQUAL
33975: PUSH
33976: LD_VAR 0 6
33980: PUSH
33981: LD_INT 1
33983: GREATER
33984: AND
33985: IFFALSE 34137
// begin sci := [ ] ;
33987: LD_ADDR_VAR 0 8
33991: PUSH
33992: EMPTY
33993: ST_TO_ADDR
// for x in ( tmp diff j ) do
33994: LD_ADDR_VAR 0 7
33998: PUSH
33999: LD_VAR 0 6
34003: PUSH
34004: LD_VAR 0 3
34008: DIFF
34009: PUSH
34010: FOR_IN
34011: IFFALSE 34063
// begin if sci = 6 then
34013: LD_VAR 0 8
34017: PUSH
34018: LD_INT 6
34020: EQUAL
34021: IFFALSE 34025
// break ;
34023: GO 34063
// if BuildingStatus ( x ) = bs_idle then
34025: LD_VAR 0 7
34029: PPUSH
34030: CALL_OW 461
34034: PUSH
34035: LD_INT 2
34037: EQUAL
34038: IFFALSE 34061
// sci := sci ^ UnitsInside ( x ) ;
34040: LD_ADDR_VAR 0 8
34044: PUSH
34045: LD_VAR 0 8
34049: PUSH
34050: LD_VAR 0 7
34054: PPUSH
34055: CALL_OW 313
34059: ADD
34060: ST_TO_ADDR
// end ;
34061: GO 34010
34063: POP
34064: POP
// if not sci then
34065: LD_VAR 0 8
34069: NOT
34070: IFFALSE 34074
// continue ;
34072: GO 33119
// for x in sci do
34074: LD_ADDR_VAR 0 7
34078: PUSH
34079: LD_VAR 0 8
34083: PUSH
34084: FOR_IN
34085: IFFALSE 34135
// if IsInUnit ( x ) and not HasTask ( x ) then
34087: LD_VAR 0 7
34091: PPUSH
34092: CALL_OW 310
34096: PUSH
34097: LD_VAR 0 7
34101: PPUSH
34102: CALL_OW 314
34106: NOT
34107: AND
34108: IFFALSE 34133
// begin ComExitBuilding ( x ) ;
34110: LD_VAR 0 7
34114: PPUSH
34115: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
34119: LD_VAR 0 7
34123: PPUSH
34124: LD_VAR 0 3
34128: PPUSH
34129: CALL_OW 180
// end ;
34133: GO 34084
34135: POP
34136: POP
// end ; end ;
34137: GO 33119
34139: POP
34140: POP
// end ;
34141: GO 33073
34143: POP
34144: POP
// end ;
34145: LD_VAR 0 1
34149: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
// if not mc_bases then
34154: LD_EXP 49
34158: NOT
34159: IFFALSE 34163
// exit ;
34161: GO 34244
// for i = 1 to mc_bases do
34163: LD_ADDR_VAR 0 2
34167: PUSH
34168: DOUBLE
34169: LD_INT 1
34171: DEC
34172: ST_TO_ADDR
34173: LD_EXP 49
34177: PUSH
34178: FOR_TO
34179: IFFALSE 34242
// if mc_mines [ i ] and mc_miners [ i ] then
34181: LD_EXP 62
34185: PUSH
34186: LD_VAR 0 2
34190: ARRAY
34191: PUSH
34192: LD_EXP 63
34196: PUSH
34197: LD_VAR 0 2
34201: ARRAY
34202: AND
34203: IFFALSE 34240
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34205: LD_EXP 63
34209: PUSH
34210: LD_VAR 0 2
34214: ARRAY
34215: PUSH
34216: LD_INT 1
34218: ARRAY
34219: PPUSH
34220: CALL_OW 255
34224: PPUSH
34225: LD_EXP 62
34229: PUSH
34230: LD_VAR 0 2
34234: ARRAY
34235: PPUSH
34236: CALL 50270 0 2
34240: GO 34178
34242: POP
34243: POP
// end ;
34244: LD_VAR 0 1
34248: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34249: LD_INT 0
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
// if not mc_bases or not mc_parking then
34259: LD_EXP 49
34263: NOT
34264: PUSH
34265: LD_EXP 73
34269: NOT
34270: OR
34271: IFFALSE 34275
// exit ;
34273: GO 34974
// for i = 1 to mc_bases do
34275: LD_ADDR_VAR 0 2
34279: PUSH
34280: DOUBLE
34281: LD_INT 1
34283: DEC
34284: ST_TO_ADDR
34285: LD_EXP 49
34289: PUSH
34290: FOR_TO
34291: IFFALSE 34972
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34293: LD_EXP 49
34297: PUSH
34298: LD_VAR 0 2
34302: ARRAY
34303: NOT
34304: PUSH
34305: LD_EXP 73
34309: PUSH
34310: LD_VAR 0 2
34314: ARRAY
34315: NOT
34316: OR
34317: IFFALSE 34321
// continue ;
34319: GO 34290
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34321: LD_ADDR_VAR 0 5
34325: PUSH
34326: LD_EXP 49
34330: PUSH
34331: LD_VAR 0 2
34335: ARRAY
34336: PUSH
34337: LD_INT 1
34339: ARRAY
34340: PPUSH
34341: CALL_OW 255
34345: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34346: LD_ADDR_VAR 0 6
34350: PUSH
34351: LD_EXP 49
34355: PUSH
34356: LD_VAR 0 2
34360: ARRAY
34361: PPUSH
34362: LD_INT 30
34364: PUSH
34365: LD_INT 3
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PPUSH
34372: CALL_OW 72
34376: ST_TO_ADDR
// if not fac then
34377: LD_VAR 0 6
34381: NOT
34382: IFFALSE 34433
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34384: LD_ADDR_VAR 0 6
34388: PUSH
34389: LD_EXP 49
34393: PUSH
34394: LD_VAR 0 2
34398: ARRAY
34399: PPUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 30
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 30
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: PPUSH
34428: CALL_OW 72
34432: ST_TO_ADDR
// if not fac then
34433: LD_VAR 0 6
34437: NOT
34438: IFFALSE 34442
// continue ;
34440: GO 34290
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34442: LD_ADDR_VAR 0 7
34446: PUSH
34447: LD_EXP 73
34451: PUSH
34452: LD_VAR 0 2
34456: ARRAY
34457: PPUSH
34458: LD_INT 22
34460: PUSH
34461: LD_VAR 0 5
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 21
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 24
34485: PUSH
34486: LD_INT 1000
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: PPUSH
34502: CALL_OW 70
34506: ST_TO_ADDR
// for j in fac do
34507: LD_ADDR_VAR 0 3
34511: PUSH
34512: LD_VAR 0 6
34516: PUSH
34517: FOR_IN
34518: IFFALSE 34599
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34520: LD_ADDR_VAR 0 7
34524: PUSH
34525: LD_VAR 0 7
34529: PUSH
34530: LD_INT 22
34532: PUSH
34533: LD_VAR 0 5
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 91
34544: PUSH
34545: LD_VAR 0 3
34549: PUSH
34550: LD_INT 15
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 21
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: LD_INT 24
34573: PUSH
34574: LD_INT 1000
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: PPUSH
34591: CALL_OW 69
34595: UNION
34596: ST_TO_ADDR
34597: GO 34517
34599: POP
34600: POP
// if not vehs then
34601: LD_VAR 0 7
34605: NOT
34606: IFFALSE 34632
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
34608: LD_ADDR_EXP 61
34612: PUSH
34613: LD_EXP 61
34617: PPUSH
34618: LD_VAR 0 2
34622: PPUSH
34623: EMPTY
34624: PPUSH
34625: CALL_OW 1
34629: ST_TO_ADDR
// continue ;
34630: GO 34290
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34632: LD_ADDR_VAR 0 8
34636: PUSH
34637: LD_EXP 49
34641: PUSH
34642: LD_VAR 0 2
34646: ARRAY
34647: PPUSH
34648: LD_INT 30
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 72
34662: ST_TO_ADDR
// if tmp then
34663: LD_VAR 0 8
34667: IFFALSE 34770
// begin for j in tmp do
34669: LD_ADDR_VAR 0 3
34673: PUSH
34674: LD_VAR 0 8
34678: PUSH
34679: FOR_IN
34680: IFFALSE 34768
// for k in UnitsInside ( j ) do
34682: LD_ADDR_VAR 0 4
34686: PUSH
34687: LD_VAR 0 3
34691: PPUSH
34692: CALL_OW 313
34696: PUSH
34697: FOR_IN
34698: IFFALSE 34764
// if k then
34700: LD_VAR 0 4
34704: IFFALSE 34762
// if not k in mc_repair_vehicle [ i ] then
34706: LD_VAR 0 4
34710: PUSH
34711: LD_EXP 61
34715: PUSH
34716: LD_VAR 0 2
34720: ARRAY
34721: IN
34722: NOT
34723: IFFALSE 34762
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
34725: LD_ADDR_EXP 61
34729: PUSH
34730: LD_EXP 61
34734: PPUSH
34735: LD_VAR 0 2
34739: PPUSH
34740: LD_EXP 61
34744: PUSH
34745: LD_VAR 0 2
34749: ARRAY
34750: PUSH
34751: LD_VAR 0 4
34755: UNION
34756: PPUSH
34757: CALL_OW 1
34761: ST_TO_ADDR
34762: GO 34697
34764: POP
34765: POP
34766: GO 34679
34768: POP
34769: POP
// end ; if not mc_repair_vehicle [ i ] then
34770: LD_EXP 61
34774: PUSH
34775: LD_VAR 0 2
34779: ARRAY
34780: NOT
34781: IFFALSE 34785
// continue ;
34783: GO 34290
// for j in mc_repair_vehicle [ i ] do
34785: LD_ADDR_VAR 0 3
34789: PUSH
34790: LD_EXP 61
34794: PUSH
34795: LD_VAR 0 2
34799: ARRAY
34800: PUSH
34801: FOR_IN
34802: IFFALSE 34968
// begin if GetClass ( j ) <> 3 then
34804: LD_VAR 0 3
34808: PPUSH
34809: CALL_OW 257
34813: PUSH
34814: LD_INT 3
34816: NONEQUAL
34817: IFFALSE 34858
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
34819: LD_ADDR_EXP 61
34823: PUSH
34824: LD_EXP 61
34828: PPUSH
34829: LD_VAR 0 2
34833: PPUSH
34834: LD_EXP 61
34838: PUSH
34839: LD_VAR 0 2
34843: ARRAY
34844: PUSH
34845: LD_VAR 0 3
34849: DIFF
34850: PPUSH
34851: CALL_OW 1
34855: ST_TO_ADDR
// continue ;
34856: GO 34801
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34858: LD_VAR 0 3
34862: PPUSH
34863: CALL_OW 311
34867: NOT
34868: PUSH
34869: LD_VAR 0 3
34873: PUSH
34874: LD_EXP 52
34878: PUSH
34879: LD_VAR 0 2
34883: ARRAY
34884: PUSH
34885: LD_INT 1
34887: ARRAY
34888: IN
34889: NOT
34890: AND
34891: PUSH
34892: LD_VAR 0 3
34896: PUSH
34897: LD_EXP 52
34901: PUSH
34902: LD_VAR 0 2
34906: ARRAY
34907: PUSH
34908: LD_INT 2
34910: ARRAY
34911: IN
34912: NOT
34913: AND
34914: IFFALSE 34966
// begin if IsInUnit ( j ) then
34916: LD_VAR 0 3
34920: PPUSH
34921: CALL_OW 310
34925: IFFALSE 34936
// ComExitBuilding ( j ) ;
34927: LD_VAR 0 3
34931: PPUSH
34932: CALL_OW 122
// if not HasTask ( j ) then
34936: LD_VAR 0 3
34940: PPUSH
34941: CALL_OW 314
34945: NOT
34946: IFFALSE 34966
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
34948: LD_VAR 0 3
34952: PPUSH
34953: LD_VAR 0 7
34957: PUSH
34958: LD_INT 1
34960: ARRAY
34961: PPUSH
34962: CALL_OW 189
// end ; end ;
34966: GO 34801
34968: POP
34969: POP
// end ;
34970: GO 34290
34972: POP
34973: POP
// end ;
34974: LD_VAR 0 1
34978: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
// if not mc_bases then
34992: LD_EXP 49
34996: NOT
34997: IFFALSE 35001
// exit ;
34999: GO 35803
// for i = 1 to mc_bases do
35001: LD_ADDR_VAR 0 2
35005: PUSH
35006: DOUBLE
35007: LD_INT 1
35009: DEC
35010: ST_TO_ADDR
35011: LD_EXP 49
35015: PUSH
35016: FOR_TO
35017: IFFALSE 35801
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35019: LD_EXP 77
35023: PUSH
35024: LD_VAR 0 2
35028: ARRAY
35029: NOT
35030: PUSH
35031: LD_EXP 52
35035: PUSH
35036: LD_VAR 0 2
35040: ARRAY
35041: PUSH
35042: LD_INT 1
35044: ARRAY
35045: OR
35046: PUSH
35047: LD_EXP 52
35051: PUSH
35052: LD_VAR 0 2
35056: ARRAY
35057: PUSH
35058: LD_INT 2
35060: ARRAY
35061: OR
35062: PUSH
35063: LD_EXP 75
35067: PUSH
35068: LD_VAR 0 2
35072: ARRAY
35073: PPUSH
35074: LD_INT 1
35076: PPUSH
35077: CALL_OW 325
35081: NOT
35082: OR
35083: PUSH
35084: LD_EXP 72
35088: PUSH
35089: LD_VAR 0 2
35093: ARRAY
35094: OR
35095: IFFALSE 35099
// continue ;
35097: GO 35016
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35099: LD_ADDR_VAR 0 8
35103: PUSH
35104: LD_EXP 49
35108: PUSH
35109: LD_VAR 0 2
35113: ARRAY
35114: PPUSH
35115: LD_INT 25
35117: PUSH
35118: LD_INT 4
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 50
35127: PUSH
35128: EMPTY
35129: LIST
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: LD_INT 60
35136: PUSH
35137: EMPTY
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: PPUSH
35149: CALL_OW 72
35153: PUSH
35154: LD_EXP 53
35158: PUSH
35159: LD_VAR 0 2
35163: ARRAY
35164: DIFF
35165: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35166: LD_ADDR_VAR 0 9
35170: PUSH
35171: LD_EXP 49
35175: PUSH
35176: LD_VAR 0 2
35180: ARRAY
35181: PPUSH
35182: LD_INT 2
35184: PUSH
35185: LD_INT 30
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 30
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: PPUSH
35210: CALL_OW 72
35214: ST_TO_ADDR
// if not tmp or not dep then
35215: LD_VAR 0 8
35219: NOT
35220: PUSH
35221: LD_VAR 0 9
35225: NOT
35226: OR
35227: IFFALSE 35231
// continue ;
35229: GO 35016
// side := GetSide ( tmp [ 1 ] ) ;
35231: LD_ADDR_VAR 0 11
35235: PUSH
35236: LD_VAR 0 8
35240: PUSH
35241: LD_INT 1
35243: ARRAY
35244: PPUSH
35245: CALL_OW 255
35249: ST_TO_ADDR
// dep := dep [ 1 ] ;
35250: LD_ADDR_VAR 0 9
35254: PUSH
35255: LD_VAR 0 9
35259: PUSH
35260: LD_INT 1
35262: ARRAY
35263: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35264: LD_ADDR_VAR 0 7
35268: PUSH
35269: LD_EXP 77
35273: PUSH
35274: LD_VAR 0 2
35278: ARRAY
35279: PPUSH
35280: LD_INT 22
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 25
35292: PUSH
35293: LD_INT 12
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PPUSH
35304: CALL_OW 70
35308: PUSH
35309: LD_INT 22
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 25
35321: PUSH
35322: LD_INT 12
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 91
35331: PUSH
35332: LD_VAR 0 9
35336: PUSH
35337: LD_INT 20
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: PPUSH
35350: CALL_OW 69
35354: UNION
35355: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35356: LD_ADDR_VAR 0 10
35360: PUSH
35361: LD_EXP 77
35365: PUSH
35366: LD_VAR 0 2
35370: ARRAY
35371: PPUSH
35372: LD_INT 81
35374: PUSH
35375: LD_VAR 0 11
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PPUSH
35384: CALL_OW 70
35388: ST_TO_ADDR
// if not apes or danger_at_area then
35389: LD_VAR 0 7
35393: NOT
35394: PUSH
35395: LD_VAR 0 10
35399: OR
35400: IFFALSE 35450
// begin if mc_taming [ i ] then
35402: LD_EXP 80
35406: PUSH
35407: LD_VAR 0 2
35411: ARRAY
35412: IFFALSE 35448
// begin MC_Reset ( i , 121 ) ;
35414: LD_VAR 0 2
35418: PPUSH
35419: LD_INT 121
35421: PPUSH
35422: CALL 20781 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
35426: LD_ADDR_EXP 80
35430: PUSH
35431: LD_EXP 80
35435: PPUSH
35436: LD_VAR 0 2
35440: PPUSH
35441: EMPTY
35442: PPUSH
35443: CALL_OW 1
35447: ST_TO_ADDR
// end ; continue ;
35448: GO 35016
// end ; for j in tmp do
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_VAR 0 8
35459: PUSH
35460: FOR_IN
35461: IFFALSE 35797
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
35463: LD_VAR 0 3
35467: PUSH
35468: LD_EXP 80
35472: PUSH
35473: LD_VAR 0 2
35477: ARRAY
35478: IN
35479: NOT
35480: PUSH
35481: LD_EXP 80
35485: PUSH
35486: LD_VAR 0 2
35490: ARRAY
35491: PUSH
35492: LD_INT 3
35494: LESS
35495: AND
35496: IFFALSE 35554
// begin SetTag ( j , 121 ) ;
35498: LD_VAR 0 3
35502: PPUSH
35503: LD_INT 121
35505: PPUSH
35506: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
35510: LD_ADDR_EXP 80
35514: PUSH
35515: LD_EXP 80
35519: PPUSH
35520: LD_VAR 0 2
35524: PUSH
35525: LD_EXP 80
35529: PUSH
35530: LD_VAR 0 2
35534: ARRAY
35535: PUSH
35536: LD_INT 1
35538: PLUS
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PPUSH
35544: LD_VAR 0 3
35548: PPUSH
35549: CALL 53281 0 3
35553: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
35554: LD_VAR 0 3
35558: PUSH
35559: LD_EXP 80
35563: PUSH
35564: LD_VAR 0 2
35568: ARRAY
35569: IN
35570: IFFALSE 35795
// begin if GetClass ( j ) <> 4 then
35572: LD_VAR 0 3
35576: PPUSH
35577: CALL_OW 257
35581: PUSH
35582: LD_INT 4
35584: NONEQUAL
35585: IFFALSE 35638
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
35587: LD_ADDR_EXP 80
35591: PUSH
35592: LD_EXP 80
35596: PPUSH
35597: LD_VAR 0 2
35601: PPUSH
35602: LD_EXP 80
35606: PUSH
35607: LD_VAR 0 2
35611: ARRAY
35612: PUSH
35613: LD_VAR 0 3
35617: DIFF
35618: PPUSH
35619: CALL_OW 1
35623: ST_TO_ADDR
// SetTag ( j , 0 ) ;
35624: LD_VAR 0 3
35628: PPUSH
35629: LD_INT 0
35631: PPUSH
35632: CALL_OW 109
// continue ;
35636: GO 35460
// end ; if IsInUnit ( j ) then
35638: LD_VAR 0 3
35642: PPUSH
35643: CALL_OW 310
35647: IFFALSE 35658
// ComExitBuilding ( j ) ;
35649: LD_VAR 0 3
35653: PPUSH
35654: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
35658: LD_ADDR_VAR 0 6
35662: PUSH
35663: LD_VAR 0 7
35667: PPUSH
35668: LD_VAR 0 3
35672: PPUSH
35673: CALL_OW 74
35677: ST_TO_ADDR
// if not ape then
35678: LD_VAR 0 6
35682: NOT
35683: IFFALSE 35687
// break ;
35685: GO 35797
// x := GetX ( ape ) ;
35687: LD_ADDR_VAR 0 4
35691: PUSH
35692: LD_VAR 0 6
35696: PPUSH
35697: CALL_OW 250
35701: ST_TO_ADDR
// y := GetY ( ape ) ;
35702: LD_ADDR_VAR 0 5
35706: PUSH
35707: LD_VAR 0 6
35711: PPUSH
35712: CALL_OW 251
35716: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35717: LD_VAR 0 4
35721: PPUSH
35722: LD_VAR 0 5
35726: PPUSH
35727: CALL_OW 488
35731: NOT
35732: PUSH
35733: LD_VAR 0 11
35737: PPUSH
35738: LD_VAR 0 4
35742: PPUSH
35743: LD_VAR 0 5
35747: PPUSH
35748: LD_INT 20
35750: PPUSH
35751: CALL 54177 0 4
35755: PUSH
35756: LD_INT 4
35758: ARRAY
35759: OR
35760: IFFALSE 35764
// break ;
35762: GO 35797
// if not HasTask ( j ) then
35764: LD_VAR 0 3
35768: PPUSH
35769: CALL_OW 314
35773: NOT
35774: IFFALSE 35795
// ComTameXY ( j , x , y ) ;
35776: LD_VAR 0 3
35780: PPUSH
35781: LD_VAR 0 4
35785: PPUSH
35786: LD_VAR 0 5
35790: PPUSH
35791: CALL_OW 131
// end ; end ;
35795: GO 35460
35797: POP
35798: POP
// end ;
35799: GO 35016
35801: POP
35802: POP
// end ;
35803: LD_VAR 0 1
35807: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
35808: LD_INT 0
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
// if not mc_bases then
35818: LD_EXP 49
35822: NOT
35823: IFFALSE 35827
// exit ;
35825: GO 36453
// for i = 1 to mc_bases do
35827: LD_ADDR_VAR 0 2
35831: PUSH
35832: DOUBLE
35833: LD_INT 1
35835: DEC
35836: ST_TO_ADDR
35837: LD_EXP 49
35841: PUSH
35842: FOR_TO
35843: IFFALSE 36451
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
35845: LD_EXP 78
35849: PUSH
35850: LD_VAR 0 2
35854: ARRAY
35855: NOT
35856: PUSH
35857: LD_EXP 78
35861: PUSH
35862: LD_VAR 0 2
35866: ARRAY
35867: PPUSH
35868: LD_INT 25
35870: PUSH
35871: LD_INT 12
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 72
35882: NOT
35883: OR
35884: IFFALSE 35888
// continue ;
35886: GO 35842
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
35888: LD_ADDR_VAR 0 5
35892: PUSH
35893: LD_EXP 78
35897: PUSH
35898: LD_VAR 0 2
35902: ARRAY
35903: PUSH
35904: LD_INT 1
35906: ARRAY
35907: PPUSH
35908: CALL_OW 255
35912: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
35913: LD_VAR 0 5
35917: PPUSH
35918: LD_INT 2
35920: PPUSH
35921: CALL_OW 325
35925: IFFALSE 36178
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
35927: LD_ADDR_VAR 0 4
35931: PUSH
35932: LD_EXP 78
35936: PUSH
35937: LD_VAR 0 2
35941: ARRAY
35942: PPUSH
35943: LD_INT 25
35945: PUSH
35946: LD_INT 16
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PPUSH
35953: CALL_OW 72
35957: ST_TO_ADDR
// if tmp < 6 then
35958: LD_VAR 0 4
35962: PUSH
35963: LD_INT 6
35965: LESS
35966: IFFALSE 36178
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35968: LD_ADDR_VAR 0 6
35972: PUSH
35973: LD_EXP 49
35977: PUSH
35978: LD_VAR 0 2
35982: ARRAY
35983: PPUSH
35984: LD_INT 2
35986: PUSH
35987: LD_INT 30
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 30
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: PPUSH
36012: CALL_OW 72
36016: ST_TO_ADDR
// if depot then
36017: LD_VAR 0 6
36021: IFFALSE 36178
// begin selected := 0 ;
36023: LD_ADDR_VAR 0 7
36027: PUSH
36028: LD_INT 0
36030: ST_TO_ADDR
// for j in depot do
36031: LD_ADDR_VAR 0 3
36035: PUSH
36036: LD_VAR 0 6
36040: PUSH
36041: FOR_IN
36042: IFFALSE 36073
// begin if UnitsInside ( j ) < 6 then
36044: LD_VAR 0 3
36048: PPUSH
36049: CALL_OW 313
36053: PUSH
36054: LD_INT 6
36056: LESS
36057: IFFALSE 36071
// begin selected := j ;
36059: LD_ADDR_VAR 0 7
36063: PUSH
36064: LD_VAR 0 3
36068: ST_TO_ADDR
// break ;
36069: GO 36073
// end ; end ;
36071: GO 36041
36073: POP
36074: POP
// if selected then
36075: LD_VAR 0 7
36079: IFFALSE 36178
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: LD_EXP 78
36090: PUSH
36091: LD_VAR 0 2
36095: ARRAY
36096: PPUSH
36097: LD_INT 25
36099: PUSH
36100: LD_INT 12
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PPUSH
36107: CALL_OW 72
36111: PUSH
36112: FOR_IN
36113: IFFALSE 36176
// if not HasTask ( j ) then
36115: LD_VAR 0 3
36119: PPUSH
36120: CALL_OW 314
36124: NOT
36125: IFFALSE 36174
// begin if not IsInUnit ( j ) then
36127: LD_VAR 0 3
36131: PPUSH
36132: CALL_OW 310
36136: NOT
36137: IFFALSE 36153
// ComEnterUnit ( j , selected ) ;
36139: LD_VAR 0 3
36143: PPUSH
36144: LD_VAR 0 7
36148: PPUSH
36149: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
36153: LD_VAR 0 3
36157: PPUSH
36158: LD_INT 16
36160: PPUSH
36161: CALL_OW 183
// AddComExitBuilding ( j ) ;
36165: LD_VAR 0 3
36169: PPUSH
36170: CALL_OW 182
// end ;
36174: GO 36112
36176: POP
36177: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36178: LD_VAR 0 5
36182: PPUSH
36183: LD_INT 11
36185: PPUSH
36186: CALL_OW 325
36190: IFFALSE 36449
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36192: LD_ADDR_VAR 0 4
36196: PUSH
36197: LD_EXP 78
36201: PUSH
36202: LD_VAR 0 2
36206: ARRAY
36207: PPUSH
36208: LD_INT 25
36210: PUSH
36211: LD_INT 16
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PPUSH
36218: CALL_OW 72
36222: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36223: LD_VAR 0 4
36227: PUSH
36228: LD_INT 6
36230: GREATEREQUAL
36231: PUSH
36232: LD_VAR 0 5
36236: PPUSH
36237: LD_INT 2
36239: PPUSH
36240: CALL_OW 325
36244: NOT
36245: OR
36246: IFFALSE 36449
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36248: LD_ADDR_VAR 0 8
36252: PUSH
36253: LD_EXP 49
36257: PUSH
36258: LD_VAR 0 2
36262: ARRAY
36263: PPUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 30
36269: PUSH
36270: LD_INT 4
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 30
36279: PUSH
36280: LD_INT 5
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: PPUSH
36292: CALL_OW 72
36296: ST_TO_ADDR
// if barracks then
36297: LD_VAR 0 8
36301: IFFALSE 36449
// begin selected := 0 ;
36303: LD_ADDR_VAR 0 7
36307: PUSH
36308: LD_INT 0
36310: ST_TO_ADDR
// for j in barracks do
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_VAR 0 8
36320: PUSH
36321: FOR_IN
36322: IFFALSE 36353
// begin if UnitsInside ( j ) < 6 then
36324: LD_VAR 0 3
36328: PPUSH
36329: CALL_OW 313
36333: PUSH
36334: LD_INT 6
36336: LESS
36337: IFFALSE 36351
// begin selected := j ;
36339: LD_ADDR_VAR 0 7
36343: PUSH
36344: LD_VAR 0 3
36348: ST_TO_ADDR
// break ;
36349: GO 36353
// end ; end ;
36351: GO 36321
36353: POP
36354: POP
// if selected then
36355: LD_VAR 0 7
36359: IFFALSE 36449
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: LD_EXP 78
36370: PUSH
36371: LD_VAR 0 2
36375: ARRAY
36376: PPUSH
36377: LD_INT 25
36379: PUSH
36380: LD_INT 12
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PPUSH
36387: CALL_OW 72
36391: PUSH
36392: FOR_IN
36393: IFFALSE 36447
// if not IsInUnit ( j ) and not HasTask ( j ) then
36395: LD_VAR 0 3
36399: PPUSH
36400: CALL_OW 310
36404: NOT
36405: PUSH
36406: LD_VAR 0 3
36410: PPUSH
36411: CALL_OW 314
36415: NOT
36416: AND
36417: IFFALSE 36445
// begin ComEnterUnit ( j , selected ) ;
36419: LD_VAR 0 3
36423: PPUSH
36424: LD_VAR 0 7
36428: PPUSH
36429: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
36433: LD_VAR 0 3
36437: PPUSH
36438: LD_INT 15
36440: PPUSH
36441: CALL_OW 183
// end ;
36445: GO 36392
36447: POP
36448: POP
// end ; end ; end ; end ; end ;
36449: GO 35842
36451: POP
36452: POP
// end ;
36453: LD_VAR 0 1
36457: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
// if not mc_bases then
36464: LD_EXP 49
36468: NOT
36469: IFFALSE 36473
// exit ;
36471: GO 36651
// for i = 1 to mc_bases do
36473: LD_ADDR_VAR 0 2
36477: PUSH
36478: DOUBLE
36479: LD_INT 1
36481: DEC
36482: ST_TO_ADDR
36483: LD_EXP 49
36487: PUSH
36488: FOR_TO
36489: IFFALSE 36649
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
36491: LD_ADDR_VAR 0 4
36495: PUSH
36496: LD_EXP 49
36500: PUSH
36501: LD_VAR 0 2
36505: ARRAY
36506: PPUSH
36507: LD_INT 25
36509: PUSH
36510: LD_INT 9
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PPUSH
36517: CALL_OW 72
36521: ST_TO_ADDR
// if not tmp then
36522: LD_VAR 0 4
36526: NOT
36527: IFFALSE 36531
// continue ;
36529: GO 36488
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
36531: LD_EXP 75
36535: PUSH
36536: LD_VAR 0 2
36540: ARRAY
36541: PPUSH
36542: LD_INT 29
36544: PPUSH
36545: CALL_OW 325
36549: NOT
36550: PUSH
36551: LD_EXP 75
36555: PUSH
36556: LD_VAR 0 2
36560: ARRAY
36561: PPUSH
36562: LD_INT 28
36564: PPUSH
36565: CALL_OW 325
36569: NOT
36570: AND
36571: IFFALSE 36575
// continue ;
36573: GO 36488
// for j in tmp do
36575: LD_ADDR_VAR 0 3
36579: PUSH
36580: LD_VAR 0 4
36584: PUSH
36585: FOR_IN
36586: IFFALSE 36645
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
36588: LD_VAR 0 3
36592: PUSH
36593: LD_EXP 52
36597: PUSH
36598: LD_VAR 0 2
36602: ARRAY
36603: PUSH
36604: LD_INT 1
36606: ARRAY
36607: IN
36608: NOT
36609: PUSH
36610: LD_VAR 0 3
36614: PUSH
36615: LD_EXP 52
36619: PUSH
36620: LD_VAR 0 2
36624: ARRAY
36625: PUSH
36626: LD_INT 2
36628: ARRAY
36629: IN
36630: NOT
36631: AND
36632: IFFALSE 36643
// ComSpaceTimeShoot ( j ) ;
36634: LD_VAR 0 3
36638: PPUSH
36639: CALL 47231 0 1
36643: GO 36585
36645: POP
36646: POP
// end ;
36647: GO 36488
36649: POP
36650: POP
// end ;
36651: LD_VAR 0 1
36655: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
// if not mc_bases then
36667: LD_EXP 49
36671: NOT
36672: IFFALSE 36676
// exit ;
36674: GO 37298
// for i = 1 to mc_bases do
36676: LD_ADDR_VAR 0 2
36680: PUSH
36681: DOUBLE
36682: LD_INT 1
36684: DEC
36685: ST_TO_ADDR
36686: LD_EXP 49
36690: PUSH
36691: FOR_TO
36692: IFFALSE 37296
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
36694: LD_EXP 84
36698: PUSH
36699: LD_VAR 0 2
36703: ARRAY
36704: NOT
36705: PUSH
36706: LD_INT 38
36708: PPUSH
36709: LD_EXP 75
36713: PUSH
36714: LD_VAR 0 2
36718: ARRAY
36719: PPUSH
36720: CALL_OW 321
36724: PUSH
36725: LD_INT 2
36727: NONEQUAL
36728: OR
36729: IFFALSE 36733
// continue ;
36731: GO 36691
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
36733: LD_ADDR_VAR 0 8
36737: PUSH
36738: LD_EXP 49
36742: PUSH
36743: LD_VAR 0 2
36747: ARRAY
36748: PPUSH
36749: LD_INT 30
36751: PUSH
36752: LD_INT 34
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PPUSH
36759: CALL_OW 72
36763: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
36764: LD_ADDR_VAR 0 9
36768: PUSH
36769: LD_EXP 49
36773: PUSH
36774: LD_VAR 0 2
36778: ARRAY
36779: PPUSH
36780: LD_INT 25
36782: PUSH
36783: LD_INT 4
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PPUSH
36790: CALL_OW 72
36794: PPUSH
36795: LD_INT 0
36797: PPUSH
36798: CALL 86541 0 2
36802: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
36803: LD_VAR 0 9
36807: NOT
36808: PUSH
36809: LD_VAR 0 8
36813: NOT
36814: OR
36815: PUSH
36816: LD_EXP 49
36820: PUSH
36821: LD_VAR 0 2
36825: ARRAY
36826: PPUSH
36827: LD_INT 124
36829: PPUSH
36830: CALL 86541 0 2
36834: OR
36835: IFFALSE 36839
// continue ;
36837: GO 36691
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
36839: LD_EXP 85
36843: PUSH
36844: LD_VAR 0 2
36848: ARRAY
36849: PUSH
36850: LD_EXP 84
36854: PUSH
36855: LD_VAR 0 2
36859: ARRAY
36860: LESS
36861: PUSH
36862: LD_EXP 85
36866: PUSH
36867: LD_VAR 0 2
36871: ARRAY
36872: PUSH
36873: LD_VAR 0 8
36877: LESS
36878: AND
36879: IFFALSE 37294
// begin tmp := sci [ 1 ] ;
36881: LD_ADDR_VAR 0 7
36885: PUSH
36886: LD_VAR 0 9
36890: PUSH
36891: LD_INT 1
36893: ARRAY
36894: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
36895: LD_VAR 0 7
36899: PPUSH
36900: LD_INT 124
36902: PPUSH
36903: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
36907: LD_ADDR_VAR 0 3
36911: PUSH
36912: DOUBLE
36913: LD_EXP 84
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: INC
36924: ST_TO_ADDR
36925: LD_EXP 84
36929: PUSH
36930: LD_VAR 0 2
36934: ARRAY
36935: PUSH
36936: FOR_DOWNTO
36937: IFFALSE 37280
// begin if IsInUnit ( tmp ) then
36939: LD_VAR 0 7
36943: PPUSH
36944: CALL_OW 310
36948: IFFALSE 36959
// ComExitBuilding ( tmp ) ;
36950: LD_VAR 0 7
36954: PPUSH
36955: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
36959: LD_INT 35
36961: PPUSH
36962: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
36966: LD_VAR 0 7
36970: PPUSH
36971: CALL_OW 310
36975: NOT
36976: PUSH
36977: LD_VAR 0 7
36981: PPUSH
36982: CALL_OW 314
36986: NOT
36987: AND
36988: IFFALSE 36959
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
36990: LD_ADDR_VAR 0 6
36994: PUSH
36995: LD_VAR 0 7
36999: PPUSH
37000: CALL_OW 250
37004: PUSH
37005: LD_VAR 0 7
37009: PPUSH
37010: CALL_OW 251
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37019: LD_INT 35
37021: PPUSH
37022: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37026: LD_ADDR_VAR 0 4
37030: PUSH
37031: LD_EXP 84
37035: PUSH
37036: LD_VAR 0 2
37040: ARRAY
37041: PUSH
37042: LD_VAR 0 3
37046: ARRAY
37047: PUSH
37048: LD_INT 1
37050: ARRAY
37051: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37052: LD_ADDR_VAR 0 5
37056: PUSH
37057: LD_EXP 84
37061: PUSH
37062: LD_VAR 0 2
37066: ARRAY
37067: PUSH
37068: LD_VAR 0 3
37072: ARRAY
37073: PUSH
37074: LD_INT 2
37076: ARRAY
37077: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37078: LD_VAR 0 7
37082: PPUSH
37083: LD_INT 10
37085: PPUSH
37086: CALL 55874 0 2
37090: PUSH
37091: LD_INT 4
37093: ARRAY
37094: IFFALSE 37132
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37096: LD_VAR 0 7
37100: PPUSH
37101: LD_VAR 0 6
37105: PUSH
37106: LD_INT 1
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 6
37114: PUSH
37115: LD_INT 2
37117: ARRAY
37118: PPUSH
37119: CALL_OW 111
// wait ( 0 0$10 ) ;
37123: LD_INT 350
37125: PPUSH
37126: CALL_OW 67
// end else
37130: GO 37158
// begin ComMoveXY ( tmp , x , y ) ;
37132: LD_VAR 0 7
37136: PPUSH
37137: LD_VAR 0 4
37141: PPUSH
37142: LD_VAR 0 5
37146: PPUSH
37147: CALL_OW 111
// wait ( 0 0$3 ) ;
37151: LD_INT 105
37153: PPUSH
37154: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
37158: LD_VAR 0 7
37162: PPUSH
37163: LD_VAR 0 4
37167: PPUSH
37168: LD_VAR 0 5
37172: PPUSH
37173: CALL_OW 307
37177: IFFALSE 37019
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37179: LD_VAR 0 7
37183: PPUSH
37184: LD_VAR 0 4
37188: PPUSH
37189: LD_VAR 0 5
37193: PPUSH
37194: LD_VAR 0 8
37198: PUSH
37199: LD_VAR 0 3
37203: ARRAY
37204: PPUSH
37205: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
37209: LD_INT 35
37211: PPUSH
37212: CALL_OW 67
// until not HasTask ( tmp ) ;
37216: LD_VAR 0 7
37220: PPUSH
37221: CALL_OW 314
37225: NOT
37226: IFFALSE 37209
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37228: LD_ADDR_EXP 85
37232: PUSH
37233: LD_EXP 85
37237: PPUSH
37238: LD_VAR 0 2
37242: PUSH
37243: LD_EXP 85
37247: PUSH
37248: LD_VAR 0 2
37252: ARRAY
37253: PUSH
37254: LD_INT 1
37256: PLUS
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PPUSH
37262: LD_VAR 0 8
37266: PUSH
37267: LD_VAR 0 3
37271: ARRAY
37272: PPUSH
37273: CALL 53281 0 3
37277: ST_TO_ADDR
// end ;
37278: GO 36936
37280: POP
37281: POP
// MC_Reset ( i , 124 ) ;
37282: LD_VAR 0 2
37286: PPUSH
37287: LD_INT 124
37289: PPUSH
37290: CALL 20781 0 2
// end ; end ;
37294: GO 36691
37296: POP
37297: POP
// end ;
37298: LD_VAR 0 1
37302: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
37307: PPUSH
// if not mc_bases then
37308: LD_EXP 49
37312: NOT
37313: IFFALSE 37317
// exit ;
37315: GO 37923
// for i = 1 to mc_bases do
37317: LD_ADDR_VAR 0 2
37321: PUSH
37322: DOUBLE
37323: LD_INT 1
37325: DEC
37326: ST_TO_ADDR
37327: LD_EXP 49
37331: PUSH
37332: FOR_TO
37333: IFFALSE 37921
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37335: LD_ADDR_VAR 0 3
37339: PUSH
37340: LD_EXP 49
37344: PUSH
37345: LD_VAR 0 2
37349: ARRAY
37350: PPUSH
37351: LD_INT 25
37353: PUSH
37354: LD_INT 4
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PPUSH
37361: CALL_OW 72
37365: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37366: LD_VAR 0 3
37370: NOT
37371: PUSH
37372: LD_EXP 86
37376: PUSH
37377: LD_VAR 0 2
37381: ARRAY
37382: NOT
37383: OR
37384: PUSH
37385: LD_EXP 49
37389: PUSH
37390: LD_VAR 0 2
37394: ARRAY
37395: PPUSH
37396: LD_INT 2
37398: PUSH
37399: LD_INT 30
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 30
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: PPUSH
37424: CALL_OW 72
37428: NOT
37429: OR
37430: IFFALSE 37480
// begin if mc_deposits_finder [ i ] then
37432: LD_EXP 87
37436: PUSH
37437: LD_VAR 0 2
37441: ARRAY
37442: IFFALSE 37478
// begin MC_Reset ( i , 125 ) ;
37444: LD_VAR 0 2
37448: PPUSH
37449: LD_INT 125
37451: PPUSH
37452: CALL 20781 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37456: LD_ADDR_EXP 87
37460: PUSH
37461: LD_EXP 87
37465: PPUSH
37466: LD_VAR 0 2
37470: PPUSH
37471: EMPTY
37472: PPUSH
37473: CALL_OW 1
37477: ST_TO_ADDR
// end ; continue ;
37478: GO 37332
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
37480: LD_EXP 86
37484: PUSH
37485: LD_VAR 0 2
37489: ARRAY
37490: PUSH
37491: LD_INT 1
37493: ARRAY
37494: PUSH
37495: LD_INT 3
37497: ARRAY
37498: PUSH
37499: LD_INT 1
37501: EQUAL
37502: PUSH
37503: LD_INT 20
37505: PPUSH
37506: LD_EXP 75
37510: PUSH
37511: LD_VAR 0 2
37515: ARRAY
37516: PPUSH
37517: CALL_OW 321
37521: PUSH
37522: LD_INT 2
37524: NONEQUAL
37525: AND
37526: IFFALSE 37576
// begin if mc_deposits_finder [ i ] then
37528: LD_EXP 87
37532: PUSH
37533: LD_VAR 0 2
37537: ARRAY
37538: IFFALSE 37574
// begin MC_Reset ( i , 125 ) ;
37540: LD_VAR 0 2
37544: PPUSH
37545: LD_INT 125
37547: PPUSH
37548: CALL 20781 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37552: LD_ADDR_EXP 87
37556: PUSH
37557: LD_EXP 87
37561: PPUSH
37562: LD_VAR 0 2
37566: PPUSH
37567: EMPTY
37568: PPUSH
37569: CALL_OW 1
37573: ST_TO_ADDR
// end ; continue ;
37574: GO 37332
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
37576: LD_EXP 86
37580: PUSH
37581: LD_VAR 0 2
37585: ARRAY
37586: PUSH
37587: LD_INT 1
37589: ARRAY
37590: PUSH
37591: LD_INT 1
37593: ARRAY
37594: PPUSH
37595: LD_EXP 86
37599: PUSH
37600: LD_VAR 0 2
37604: ARRAY
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PUSH
37610: LD_INT 2
37612: ARRAY
37613: PPUSH
37614: LD_EXP 75
37618: PUSH
37619: LD_VAR 0 2
37623: ARRAY
37624: PPUSH
37625: CALL_OW 440
37629: IFFALSE 37672
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
37631: LD_ADDR_EXP 86
37635: PUSH
37636: LD_EXP 86
37640: PPUSH
37641: LD_VAR 0 2
37645: PPUSH
37646: LD_EXP 86
37650: PUSH
37651: LD_VAR 0 2
37655: ARRAY
37656: PPUSH
37657: LD_INT 1
37659: PPUSH
37660: CALL_OW 3
37664: PPUSH
37665: CALL_OW 1
37669: ST_TO_ADDR
37670: GO 37919
// begin if not mc_deposits_finder [ i ] then
37672: LD_EXP 87
37676: PUSH
37677: LD_VAR 0 2
37681: ARRAY
37682: NOT
37683: IFFALSE 37735
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
37685: LD_ADDR_EXP 87
37689: PUSH
37690: LD_EXP 87
37694: PPUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: LD_VAR 0 3
37704: PUSH
37705: LD_INT 1
37707: ARRAY
37708: PUSH
37709: EMPTY
37710: LIST
37711: PPUSH
37712: CALL_OW 1
37716: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
37717: LD_VAR 0 3
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PPUSH
37726: LD_INT 125
37728: PPUSH
37729: CALL_OW 109
// end else
37733: GO 37919
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
37735: LD_EXP 87
37739: PUSH
37740: LD_VAR 0 2
37744: ARRAY
37745: PUSH
37746: LD_INT 1
37748: ARRAY
37749: PPUSH
37750: CALL_OW 310
37754: IFFALSE 37777
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
37756: LD_EXP 87
37760: PUSH
37761: LD_VAR 0 2
37765: ARRAY
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PPUSH
37771: CALL_OW 122
37775: GO 37919
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
37777: LD_EXP 87
37781: PUSH
37782: LD_VAR 0 2
37786: ARRAY
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: PPUSH
37792: CALL_OW 314
37796: NOT
37797: PUSH
37798: LD_EXP 87
37802: PUSH
37803: LD_VAR 0 2
37807: ARRAY
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PPUSH
37813: LD_EXP 86
37817: PUSH
37818: LD_VAR 0 2
37822: ARRAY
37823: PUSH
37824: LD_INT 1
37826: ARRAY
37827: PUSH
37828: LD_INT 1
37830: ARRAY
37831: PPUSH
37832: LD_EXP 86
37836: PUSH
37837: LD_VAR 0 2
37841: ARRAY
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PUSH
37847: LD_INT 2
37849: ARRAY
37850: PPUSH
37851: CALL_OW 297
37855: PUSH
37856: LD_INT 6
37858: GREATER
37859: AND
37860: IFFALSE 37919
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
37862: LD_EXP 87
37866: PUSH
37867: LD_VAR 0 2
37871: ARRAY
37872: PUSH
37873: LD_INT 1
37875: ARRAY
37876: PPUSH
37877: LD_EXP 86
37881: PUSH
37882: LD_VAR 0 2
37886: ARRAY
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PUSH
37892: LD_INT 1
37894: ARRAY
37895: PPUSH
37896: LD_EXP 86
37900: PUSH
37901: LD_VAR 0 2
37905: ARRAY
37906: PUSH
37907: LD_INT 1
37909: ARRAY
37910: PUSH
37911: LD_INT 2
37913: ARRAY
37914: PPUSH
37915: CALL_OW 111
// end ; end ; end ;
37919: GO 37332
37921: POP
37922: POP
// end ;
37923: LD_VAR 0 1
37927: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
37928: LD_INT 0
37930: PPUSH
37931: PPUSH
37932: PPUSH
37933: PPUSH
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
// if not mc_bases then
37941: LD_EXP 49
37945: NOT
37946: IFFALSE 37950
// exit ;
37948: GO 38674
// for i = 1 to mc_bases do
37950: LD_ADDR_VAR 0 2
37954: PUSH
37955: DOUBLE
37956: LD_INT 1
37958: DEC
37959: ST_TO_ADDR
37960: LD_EXP 49
37964: PUSH
37965: FOR_TO
37966: IFFALSE 38672
// begin if not mc_bases [ i ] then
37968: LD_EXP 49
37972: PUSH
37973: LD_VAR 0 2
37977: ARRAY
37978: NOT
37979: IFFALSE 37983
// continue ;
37981: GO 37965
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
37983: LD_ADDR_VAR 0 7
37987: PUSH
37988: LD_EXP 49
37992: PUSH
37993: LD_VAR 0 2
37997: ARRAY
37998: PUSH
37999: LD_INT 1
38001: ARRAY
38002: PPUSH
38003: CALL_OW 248
38007: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38008: LD_VAR 0 7
38012: PUSH
38013: LD_INT 3
38015: EQUAL
38016: PUSH
38017: LD_EXP 68
38021: PUSH
38022: LD_VAR 0 2
38026: ARRAY
38027: PUSH
38028: LD_EXP 71
38032: PUSH
38033: LD_VAR 0 2
38037: ARRAY
38038: UNION
38039: PPUSH
38040: LD_INT 33
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PPUSH
38050: CALL_OW 72
38054: NOT
38055: OR
38056: IFFALSE 38060
// continue ;
38058: GO 37965
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38060: LD_ADDR_VAR 0 9
38064: PUSH
38065: LD_EXP 49
38069: PUSH
38070: LD_VAR 0 2
38074: ARRAY
38075: PPUSH
38076: LD_INT 30
38078: PUSH
38079: LD_INT 36
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PPUSH
38086: CALL_OW 72
38090: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38091: LD_ADDR_VAR 0 10
38095: PUSH
38096: LD_EXP 68
38100: PUSH
38101: LD_VAR 0 2
38105: ARRAY
38106: PPUSH
38107: LD_INT 34
38109: PUSH
38110: LD_INT 31
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PPUSH
38117: CALL_OW 72
38121: ST_TO_ADDR
// if not cts and not mcts then
38122: LD_VAR 0 9
38126: NOT
38127: PUSH
38128: LD_VAR 0 10
38132: NOT
38133: AND
38134: IFFALSE 38138
// continue ;
38136: GO 37965
// x := cts ;
38138: LD_ADDR_VAR 0 11
38142: PUSH
38143: LD_VAR 0 9
38147: ST_TO_ADDR
// if not x then
38148: LD_VAR 0 11
38152: NOT
38153: IFFALSE 38165
// x := mcts ;
38155: LD_ADDR_VAR 0 11
38159: PUSH
38160: LD_VAR 0 10
38164: ST_TO_ADDR
// if mc_remote_driver [ i ] then
38165: LD_EXP 89
38169: PUSH
38170: LD_VAR 0 2
38174: ARRAY
38175: IFFALSE 38444
// for j in mc_remote_driver [ i ] do
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_EXP 89
38186: PUSH
38187: LD_VAR 0 2
38191: ARRAY
38192: PUSH
38193: FOR_IN
38194: IFFALSE 38442
// begin if GetClass ( j ) <> 3 then
38196: LD_VAR 0 3
38200: PPUSH
38201: CALL_OW 257
38205: PUSH
38206: LD_INT 3
38208: NONEQUAL
38209: IFFALSE 38262
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38211: LD_ADDR_EXP 89
38215: PUSH
38216: LD_EXP 89
38220: PPUSH
38221: LD_VAR 0 2
38225: PPUSH
38226: LD_EXP 89
38230: PUSH
38231: LD_VAR 0 2
38235: ARRAY
38236: PUSH
38237: LD_VAR 0 3
38241: DIFF
38242: PPUSH
38243: CALL_OW 1
38247: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38248: LD_VAR 0 3
38252: PPUSH
38253: LD_INT 0
38255: PPUSH
38256: CALL_OW 109
// continue ;
38260: GO 38193
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38262: LD_VAR 0 3
38266: PPUSH
38267: CALL_OW 310
38271: NOT
38272: PUSH
38273: LD_VAR 0 3
38277: PPUSH
38278: CALL_OW 310
38282: PPUSH
38283: CALL_OW 266
38287: PUSH
38288: LD_INT 36
38290: NONEQUAL
38291: PUSH
38292: LD_VAR 0 3
38296: PPUSH
38297: CALL 86629 0 1
38301: NOT
38302: AND
38303: OR
38304: IFFALSE 38440
// begin if IsInUnit ( j ) then
38306: LD_VAR 0 3
38310: PPUSH
38311: CALL_OW 310
38315: IFFALSE 38326
// ComExitBuilding ( j ) ;
38317: LD_VAR 0 3
38321: PPUSH
38322: CALL_OW 122
// ct := 0 ;
38326: LD_ADDR_VAR 0 8
38330: PUSH
38331: LD_INT 0
38333: ST_TO_ADDR
// for k in x do
38334: LD_ADDR_VAR 0 4
38338: PUSH
38339: LD_VAR 0 11
38343: PUSH
38344: FOR_IN
38345: IFFALSE 38418
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
38347: LD_VAR 0 4
38351: PPUSH
38352: CALL_OW 264
38356: PUSH
38357: LD_INT 31
38359: EQUAL
38360: PUSH
38361: LD_VAR 0 4
38365: PPUSH
38366: CALL_OW 311
38370: NOT
38371: AND
38372: PUSH
38373: LD_VAR 0 4
38377: PPUSH
38378: CALL_OW 266
38382: PUSH
38383: LD_INT 36
38385: EQUAL
38386: PUSH
38387: LD_VAR 0 4
38391: PPUSH
38392: CALL_OW 313
38396: PUSH
38397: LD_INT 3
38399: LESS
38400: AND
38401: OR
38402: IFFALSE 38416
// begin ct := k ;
38404: LD_ADDR_VAR 0 8
38408: PUSH
38409: LD_VAR 0 4
38413: ST_TO_ADDR
// break ;
38414: GO 38418
// end ;
38416: GO 38344
38418: POP
38419: POP
// if ct then
38420: LD_VAR 0 8
38424: IFFALSE 38440
// ComEnterUnit ( j , ct ) ;
38426: LD_VAR 0 3
38430: PPUSH
38431: LD_VAR 0 8
38435: PPUSH
38436: CALL_OW 120
// end ; end ;
38440: GO 38193
38442: POP
38443: POP
// places := 0 ;
38444: LD_ADDR_VAR 0 5
38448: PUSH
38449: LD_INT 0
38451: ST_TO_ADDR
// for j = 1 to x do
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: DOUBLE
38458: LD_INT 1
38460: DEC
38461: ST_TO_ADDR
38462: LD_VAR 0 11
38466: PUSH
38467: FOR_TO
38468: IFFALSE 38523
// if GetWeapon ( x [ j ] ) = ar_control_tower then
38470: LD_VAR 0 11
38474: PUSH
38475: LD_VAR 0 3
38479: ARRAY
38480: PPUSH
38481: CALL_OW 264
38485: PUSH
38486: LD_INT 31
38488: EQUAL
38489: IFFALSE 38507
// places := places + 1 else
38491: LD_ADDR_VAR 0 5
38495: PUSH
38496: LD_VAR 0 5
38500: PUSH
38501: LD_INT 1
38503: PLUS
38504: ST_TO_ADDR
38505: GO 38521
// places := places + 3 ;
38507: LD_ADDR_VAR 0 5
38511: PUSH
38512: LD_VAR 0 5
38516: PUSH
38517: LD_INT 3
38519: PLUS
38520: ST_TO_ADDR
38521: GO 38467
38523: POP
38524: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
38525: LD_ADDR_VAR 0 6
38529: PUSH
38530: LD_EXP 49
38534: PUSH
38535: LD_VAR 0 2
38539: ARRAY
38540: PPUSH
38541: LD_INT 25
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 72
38555: PUSH
38556: LD_EXP 89
38560: PUSH
38561: LD_VAR 0 2
38565: ARRAY
38566: DIFF
38567: PPUSH
38568: LD_INT 3
38570: PPUSH
38571: CALL 87529 0 2
38575: ST_TO_ADDR
// if not tmp then
38576: LD_VAR 0 6
38580: NOT
38581: IFFALSE 38585
// continue ;
38583: GO 37965
// places := places - mc_remote_driver [ i ] ;
38585: LD_ADDR_VAR 0 5
38589: PUSH
38590: LD_VAR 0 5
38594: PUSH
38595: LD_EXP 89
38599: PUSH
38600: LD_VAR 0 2
38604: ARRAY
38605: MINUS
38606: ST_TO_ADDR
// if places then
38607: LD_VAR 0 5
38611: IFFALSE 38670
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
38613: LD_ADDR_EXP 89
38617: PUSH
38618: LD_EXP 89
38622: PPUSH
38623: LD_VAR 0 2
38627: PPUSH
38628: LD_EXP 89
38632: PUSH
38633: LD_VAR 0 2
38637: ARRAY
38638: PUSH
38639: LD_VAR 0 6
38643: PUSH
38644: LD_INT 1
38646: ARRAY
38647: UNION
38648: PPUSH
38649: CALL_OW 1
38653: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
38654: LD_VAR 0 6
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: PPUSH
38663: LD_INT 126
38665: PPUSH
38666: CALL_OW 109
// end ; end ;
38670: GO 37965
38672: POP
38673: POP
// end ;
38674: LD_VAR 0 1
38678: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
38679: LD_INT 0
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
38687: LD_VAR 0 1
38691: NOT
38692: PUSH
38693: LD_VAR 0 2
38697: NOT
38698: OR
38699: PUSH
38700: LD_VAR 0 3
38704: NOT
38705: OR
38706: PUSH
38707: LD_VAR 0 4
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: LD_INT 4
38723: PUSH
38724: LD_INT 5
38726: PUSH
38727: LD_INT 8
38729: PUSH
38730: LD_INT 9
38732: PUSH
38733: LD_INT 15
38735: PUSH
38736: LD_INT 16
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: IN
38750: NOT
38751: OR
38752: IFFALSE 38756
// exit ;
38754: GO 39656
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
38756: LD_ADDR_VAR 0 2
38760: PUSH
38761: LD_VAR 0 2
38765: PPUSH
38766: LD_INT 21
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 24
38778: PUSH
38779: LD_INT 250
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PPUSH
38790: CALL_OW 72
38794: ST_TO_ADDR
// case class of 1 , 15 :
38795: LD_VAR 0 4
38799: PUSH
38800: LD_INT 1
38802: DOUBLE
38803: EQUAL
38804: IFTRUE 38814
38806: LD_INT 15
38808: DOUBLE
38809: EQUAL
38810: IFTRUE 38814
38812: GO 38899
38814: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
38815: LD_ADDR_VAR 0 8
38819: PUSH
38820: LD_VAR 0 2
38824: PPUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 30
38830: PUSH
38831: LD_INT 32
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 30
38840: PUSH
38841: LD_INT 31
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: LIST
38852: PPUSH
38853: CALL_OW 72
38857: PUSH
38858: LD_VAR 0 2
38862: PPUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 30
38868: PUSH
38869: LD_INT 4
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 30
38878: PUSH
38879: LD_INT 5
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: LIST
38890: PPUSH
38891: CALL_OW 72
38895: ADD
38896: ST_TO_ADDR
38897: GO 39145
38899: LD_INT 2
38901: DOUBLE
38902: EQUAL
38903: IFTRUE 38913
38905: LD_INT 16
38907: DOUBLE
38908: EQUAL
38909: IFTRUE 38913
38911: GO 38959
38913: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
38914: LD_ADDR_VAR 0 8
38918: PUSH
38919: LD_VAR 0 2
38923: PPUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 30
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 30
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: PPUSH
38952: CALL_OW 72
38956: ST_TO_ADDR
38957: GO 39145
38959: LD_INT 3
38961: DOUBLE
38962: EQUAL
38963: IFTRUE 38967
38965: GO 39013
38967: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
38968: LD_ADDR_VAR 0 8
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 30
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 30
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: LIST
39005: PPUSH
39006: CALL_OW 72
39010: ST_TO_ADDR
39011: GO 39145
39013: LD_INT 4
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39021
39019: GO 39078
39021: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39022: LD_ADDR_VAR 0 8
39026: PUSH
39027: LD_VAR 0 2
39031: PPUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 30
39037: PUSH
39038: LD_INT 6
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 30
39047: PUSH
39048: LD_INT 7
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 30
39057: PUSH
39058: LD_INT 8
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: PPUSH
39071: CALL_OW 72
39075: ST_TO_ADDR
39076: GO 39145
39078: LD_INT 5
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39098
39084: LD_INT 8
39086: DOUBLE
39087: EQUAL
39088: IFTRUE 39098
39090: LD_INT 9
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39098
39096: GO 39144
39098: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39099: LD_ADDR_VAR 0 8
39103: PUSH
39104: LD_VAR 0 2
39108: PPUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 30
39114: PUSH
39115: LD_INT 4
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 30
39124: PUSH
39125: LD_INT 5
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: PPUSH
39137: CALL_OW 72
39141: ST_TO_ADDR
39142: GO 39145
39144: POP
// if not tmp then
39145: LD_VAR 0 8
39149: NOT
39150: IFFALSE 39154
// exit ;
39152: GO 39656
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39154: LD_VAR 0 4
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 15
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: IN
39169: PUSH
39170: LD_EXP 58
39174: PUSH
39175: LD_VAR 0 1
39179: ARRAY
39180: AND
39181: IFFALSE 39337
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39183: LD_ADDR_VAR 0 9
39187: PUSH
39188: LD_EXP 58
39192: PUSH
39193: LD_VAR 0 1
39197: ARRAY
39198: PUSH
39199: LD_INT 1
39201: ARRAY
39202: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39203: LD_VAR 0 9
39207: PUSH
39208: LD_EXP 59
39212: PUSH
39213: LD_VAR 0 1
39217: ARRAY
39218: IN
39219: NOT
39220: IFFALSE 39335
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
39222: LD_ADDR_EXP 59
39226: PUSH
39227: LD_EXP 59
39231: PPUSH
39232: LD_VAR 0 1
39236: PUSH
39237: LD_EXP 59
39241: PUSH
39242: LD_VAR 0 1
39246: ARRAY
39247: PUSH
39248: LD_INT 1
39250: PLUS
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PPUSH
39256: LD_VAR 0 9
39260: PPUSH
39261: CALL 53281 0 3
39265: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
39266: LD_ADDR_EXP 58
39270: PUSH
39271: LD_EXP 58
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: LD_EXP 58
39285: PUSH
39286: LD_VAR 0 1
39290: ARRAY
39291: PUSH
39292: LD_VAR 0 9
39296: DIFF
39297: PPUSH
39298: CALL_OW 1
39302: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
39303: LD_VAR 0 3
39307: PPUSH
39308: LD_EXP 59
39312: PUSH
39313: LD_VAR 0 1
39317: ARRAY
39318: PUSH
39319: LD_EXP 59
39323: PUSH
39324: LD_VAR 0 1
39328: ARRAY
39329: ARRAY
39330: PPUSH
39331: CALL_OW 120
// end ; exit ;
39335: GO 39656
// end ; if tmp > 1 then
39337: LD_VAR 0 8
39341: PUSH
39342: LD_INT 1
39344: GREATER
39345: IFFALSE 39449
// for i = 2 to tmp do
39347: LD_ADDR_VAR 0 6
39351: PUSH
39352: DOUBLE
39353: LD_INT 2
39355: DEC
39356: ST_TO_ADDR
39357: LD_VAR 0 8
39361: PUSH
39362: FOR_TO
39363: IFFALSE 39447
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
39365: LD_VAR 0 8
39369: PUSH
39370: LD_VAR 0 6
39374: ARRAY
39375: PPUSH
39376: CALL_OW 461
39380: PUSH
39381: LD_INT 6
39383: EQUAL
39384: IFFALSE 39445
// begin x := tmp [ i ] ;
39386: LD_ADDR_VAR 0 9
39390: PUSH
39391: LD_VAR 0 8
39395: PUSH
39396: LD_VAR 0 6
39400: ARRAY
39401: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
39402: LD_ADDR_VAR 0 8
39406: PUSH
39407: LD_VAR 0 8
39411: PPUSH
39412: LD_VAR 0 6
39416: PPUSH
39417: CALL_OW 3
39421: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
39422: LD_ADDR_VAR 0 8
39426: PUSH
39427: LD_VAR 0 8
39431: PPUSH
39432: LD_INT 1
39434: PPUSH
39435: LD_VAR 0 9
39439: PPUSH
39440: CALL_OW 2
39444: ST_TO_ADDR
// end ;
39445: GO 39362
39447: POP
39448: POP
// for i in tmp do
39449: LD_ADDR_VAR 0 6
39453: PUSH
39454: LD_VAR 0 8
39458: PUSH
39459: FOR_IN
39460: IFFALSE 39529
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
39462: LD_VAR 0 6
39466: PPUSH
39467: CALL_OW 313
39471: PUSH
39472: LD_INT 6
39474: LESS
39475: PUSH
39476: LD_VAR 0 6
39480: PPUSH
39481: CALL_OW 266
39485: PUSH
39486: LD_INT 31
39488: PUSH
39489: LD_INT 32
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: IN
39496: NOT
39497: AND
39498: PUSH
39499: LD_VAR 0 6
39503: PPUSH
39504: CALL_OW 313
39508: PUSH
39509: LD_INT 0
39511: EQUAL
39512: OR
39513: IFFALSE 39527
// begin j := i ;
39515: LD_ADDR_VAR 0 7
39519: PUSH
39520: LD_VAR 0 6
39524: ST_TO_ADDR
// break ;
39525: GO 39529
// end ; end ;
39527: GO 39459
39529: POP
39530: POP
// if j then
39531: LD_VAR 0 7
39535: IFFALSE 39553
// ComEnterUnit ( unit , j ) else
39537: LD_VAR 0 3
39541: PPUSH
39542: LD_VAR 0 7
39546: PPUSH
39547: CALL_OW 120
39551: GO 39656
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39553: LD_ADDR_VAR 0 10
39557: PUSH
39558: LD_VAR 0 2
39562: PPUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 30
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 30
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: PPUSH
39591: CALL_OW 72
39595: ST_TO_ADDR
// if depot then
39596: LD_VAR 0 10
39600: IFFALSE 39656
// begin depot := NearestUnitToUnit ( depot , unit ) ;
39602: LD_ADDR_VAR 0 10
39606: PUSH
39607: LD_VAR 0 10
39611: PPUSH
39612: LD_VAR 0 3
39616: PPUSH
39617: CALL_OW 74
39621: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
39622: LD_VAR 0 3
39626: PPUSH
39627: LD_VAR 0 10
39631: PPUSH
39632: CALL_OW 296
39636: PUSH
39637: LD_INT 10
39639: GREATER
39640: IFFALSE 39656
// ComStandNearbyBuilding ( unit , depot ) ;
39642: LD_VAR 0 3
39646: PPUSH
39647: LD_VAR 0 10
39651: PPUSH
39652: CALL 47848 0 2
// end ; end ; end ;
39656: LD_VAR 0 5
39660: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
39661: LD_INT 0
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
// if not mc_bases then
39667: LD_EXP 49
39671: NOT
39672: IFFALSE 39676
// exit ;
39674: GO 39915
// for i = 1 to mc_bases do
39676: LD_ADDR_VAR 0 2
39680: PUSH
39681: DOUBLE
39682: LD_INT 1
39684: DEC
39685: ST_TO_ADDR
39686: LD_EXP 49
39690: PUSH
39691: FOR_TO
39692: IFFALSE 39913
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
39694: LD_ADDR_VAR 0 4
39698: PUSH
39699: LD_EXP 49
39703: PUSH
39704: LD_VAR 0 2
39708: ARRAY
39709: PPUSH
39710: LD_INT 21
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PPUSH
39720: CALL_OW 72
39724: PUSH
39725: LD_EXP 78
39729: PUSH
39730: LD_VAR 0 2
39734: ARRAY
39735: UNION
39736: ST_TO_ADDR
// if not tmp then
39737: LD_VAR 0 4
39741: NOT
39742: IFFALSE 39746
// continue ;
39744: GO 39691
// for j in tmp do
39746: LD_ADDR_VAR 0 3
39750: PUSH
39751: LD_VAR 0 4
39755: PUSH
39756: FOR_IN
39757: IFFALSE 39909
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
39759: LD_VAR 0 3
39763: PPUSH
39764: CALL_OW 110
39768: NOT
39769: PUSH
39770: LD_VAR 0 3
39774: PPUSH
39775: CALL_OW 314
39779: NOT
39780: AND
39781: PUSH
39782: LD_VAR 0 3
39786: PPUSH
39787: CALL_OW 311
39791: NOT
39792: AND
39793: PUSH
39794: LD_VAR 0 3
39798: PPUSH
39799: CALL_OW 310
39803: NOT
39804: AND
39805: PUSH
39806: LD_VAR 0 3
39810: PUSH
39811: LD_EXP 52
39815: PUSH
39816: LD_VAR 0 2
39820: ARRAY
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: IN
39826: NOT
39827: AND
39828: PUSH
39829: LD_VAR 0 3
39833: PUSH
39834: LD_EXP 52
39838: PUSH
39839: LD_VAR 0 2
39843: ARRAY
39844: PUSH
39845: LD_INT 2
39847: ARRAY
39848: IN
39849: NOT
39850: AND
39851: PUSH
39852: LD_VAR 0 3
39856: PUSH
39857: LD_EXP 61
39861: PUSH
39862: LD_VAR 0 2
39866: ARRAY
39867: IN
39868: NOT
39869: AND
39870: IFFALSE 39907
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
39872: LD_VAR 0 2
39876: PPUSH
39877: LD_EXP 49
39881: PUSH
39882: LD_VAR 0 2
39886: ARRAY
39887: PPUSH
39888: LD_VAR 0 3
39892: PPUSH
39893: LD_VAR 0 3
39897: PPUSH
39898: CALL_OW 257
39902: PPUSH
39903: CALL 38679 0 4
// end ;
39907: GO 39756
39909: POP
39910: POP
// end ;
39911: GO 39691
39913: POP
39914: POP
// end ;
39915: LD_VAR 0 1
39919: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
39920: LD_INT 0
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
// if not mc_bases [ base ] then
39928: LD_EXP 49
39932: PUSH
39933: LD_VAR 0 1
39937: ARRAY
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 40125
// tmp := [ ] ;
39943: LD_ADDR_VAR 0 6
39947: PUSH
39948: EMPTY
39949: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
39950: LD_ADDR_VAR 0 7
39954: PUSH
39955: LD_VAR 0 3
39959: PPUSH
39960: LD_INT 0
39962: PPUSH
39963: CALL_OW 517
39967: ST_TO_ADDR
// if not list then
39968: LD_VAR 0 7
39972: NOT
39973: IFFALSE 39977
// exit ;
39975: GO 40125
// for i = 1 to amount do
39977: LD_ADDR_VAR 0 5
39981: PUSH
39982: DOUBLE
39983: LD_INT 1
39985: DEC
39986: ST_TO_ADDR
39987: LD_VAR 0 2
39991: PUSH
39992: FOR_TO
39993: IFFALSE 40073
// begin x := rand ( 1 , list [ 1 ] ) ;
39995: LD_ADDR_VAR 0 8
39999: PUSH
40000: LD_INT 1
40002: PPUSH
40003: LD_VAR 0 7
40007: PUSH
40008: LD_INT 1
40010: ARRAY
40011: PPUSH
40012: CALL_OW 12
40016: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40017: LD_ADDR_VAR 0 6
40021: PUSH
40022: LD_VAR 0 6
40026: PPUSH
40027: LD_VAR 0 5
40031: PPUSH
40032: LD_VAR 0 7
40036: PUSH
40037: LD_INT 1
40039: ARRAY
40040: PUSH
40041: LD_VAR 0 8
40045: ARRAY
40046: PUSH
40047: LD_VAR 0 7
40051: PUSH
40052: LD_INT 2
40054: ARRAY
40055: PUSH
40056: LD_VAR 0 8
40060: ARRAY
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: CALL_OW 1
40070: ST_TO_ADDR
// end ;
40071: GO 39992
40073: POP
40074: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40075: LD_ADDR_EXP 62
40079: PUSH
40080: LD_EXP 62
40084: PPUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: LD_VAR 0 6
40094: PPUSH
40095: CALL_OW 1
40099: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40100: LD_ADDR_EXP 64
40104: PUSH
40105: LD_EXP 64
40109: PPUSH
40110: LD_VAR 0 1
40114: PPUSH
40115: LD_VAR 0 3
40119: PPUSH
40120: CALL_OW 1
40124: ST_TO_ADDR
// end ;
40125: LD_VAR 0 4
40129: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40130: LD_INT 0
40132: PPUSH
// if not mc_bases [ base ] then
40133: LD_EXP 49
40137: PUSH
40138: LD_VAR 0 1
40142: ARRAY
40143: NOT
40144: IFFALSE 40148
// exit ;
40146: GO 40173
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40148: LD_ADDR_EXP 54
40152: PUSH
40153: LD_EXP 54
40157: PPUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: LD_VAR 0 2
40167: PPUSH
40168: CALL_OW 1
40172: ST_TO_ADDR
// end ;
40173: LD_VAR 0 3
40177: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40178: LD_INT 0
40180: PPUSH
// if not mc_bases [ base ] then
40181: LD_EXP 49
40185: PUSH
40186: LD_VAR 0 1
40190: ARRAY
40191: NOT
40192: IFFALSE 40196
// exit ;
40194: GO 40233
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40196: LD_ADDR_EXP 54
40200: PUSH
40201: LD_EXP 54
40205: PPUSH
40206: LD_VAR 0 1
40210: PPUSH
40211: LD_EXP 54
40215: PUSH
40216: LD_VAR 0 1
40220: ARRAY
40221: PUSH
40222: LD_VAR 0 2
40226: UNION
40227: PPUSH
40228: CALL_OW 1
40232: ST_TO_ADDR
// end ;
40233: LD_VAR 0 3
40237: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
40238: LD_INT 0
40240: PPUSH
// if not mc_bases [ base ] then
40241: LD_EXP 49
40245: PUSH
40246: LD_VAR 0 1
40250: ARRAY
40251: NOT
40252: IFFALSE 40256
// exit ;
40254: GO 40281
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
40256: LD_ADDR_EXP 70
40260: PUSH
40261: LD_EXP 70
40265: PPUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: LD_VAR 0 2
40275: PPUSH
40276: CALL_OW 1
40280: ST_TO_ADDR
// end ;
40281: LD_VAR 0 3
40285: RET
// export function MC_InsertProduceList ( base , components ) ; begin
40286: LD_INT 0
40288: PPUSH
// if not mc_bases [ base ] then
40289: LD_EXP 49
40293: PUSH
40294: LD_VAR 0 1
40298: ARRAY
40299: NOT
40300: IFFALSE 40304
// exit ;
40302: GO 40341
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
40304: LD_ADDR_EXP 70
40308: PUSH
40309: LD_EXP 70
40313: PPUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_EXP 70
40323: PUSH
40324: LD_VAR 0 1
40328: ARRAY
40329: PUSH
40330: LD_VAR 0 2
40334: ADD
40335: PPUSH
40336: CALL_OW 1
40340: ST_TO_ADDR
// end ;
40341: LD_VAR 0 3
40345: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
40346: LD_INT 0
40348: PPUSH
// if not mc_bases [ base ] then
40349: LD_EXP 49
40353: PUSH
40354: LD_VAR 0 1
40358: ARRAY
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 40418
// mc_defender := Replace ( mc_defender , base , deflist ) ;
40364: LD_ADDR_EXP 71
40368: PUSH
40369: LD_EXP 71
40373: PPUSH
40374: LD_VAR 0 1
40378: PPUSH
40379: LD_VAR 0 2
40383: PPUSH
40384: CALL_OW 1
40388: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
40389: LD_ADDR_EXP 60
40393: PUSH
40394: LD_EXP 60
40398: PPUSH
40399: LD_VAR 0 1
40403: PPUSH
40404: LD_VAR 0 2
40408: PUSH
40409: LD_INT 0
40411: PLUS
40412: PPUSH
40413: CALL_OW 1
40417: ST_TO_ADDR
// end ;
40418: LD_VAR 0 3
40422: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
40423: LD_INT 0
40425: PPUSH
// if not mc_bases [ base ] then
40426: LD_EXP 49
40430: PUSH
40431: LD_VAR 0 1
40435: ARRAY
40436: NOT
40437: IFFALSE 40441
// exit ;
40439: GO 40466
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
40441: LD_ADDR_EXP 60
40445: PUSH
40446: LD_EXP 60
40450: PPUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: LD_VAR 0 2
40460: PPUSH
40461: CALL_OW 1
40465: ST_TO_ADDR
// end ;
40466: LD_VAR 0 3
40470: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
40471: LD_INT 0
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
// if not mc_bases [ base ] then
40477: LD_EXP 49
40481: PUSH
40482: LD_VAR 0 1
40486: ARRAY
40487: NOT
40488: IFFALSE 40492
// exit ;
40490: GO 40557
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
40492: LD_ADDR_EXP 69
40496: PUSH
40497: LD_EXP 69
40501: PPUSH
40502: LD_VAR 0 1
40506: PUSH
40507: LD_EXP 69
40511: PUSH
40512: LD_VAR 0 1
40516: ARRAY
40517: PUSH
40518: LD_INT 1
40520: PLUS
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PPUSH
40526: LD_VAR 0 1
40530: PUSH
40531: LD_VAR 0 2
40535: PUSH
40536: LD_VAR 0 3
40540: PUSH
40541: LD_VAR 0 4
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: PPUSH
40552: CALL 53281 0 3
40556: ST_TO_ADDR
// end ;
40557: LD_VAR 0 5
40561: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
40562: LD_INT 0
40564: PPUSH
// if not mc_bases [ base ] then
40565: LD_EXP 49
40569: PUSH
40570: LD_VAR 0 1
40574: ARRAY
40575: NOT
40576: IFFALSE 40580
// exit ;
40578: GO 40605
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
40580: LD_ADDR_EXP 86
40584: PUSH
40585: LD_EXP 86
40589: PPUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: CALL_OW 1
40604: ST_TO_ADDR
// end ;
40605: LD_VAR 0 3
40609: RET
// export function MC_GetMinesField ( base ) ; begin
40610: LD_INT 0
40612: PPUSH
// result := mc_mines [ base ] ;
40613: LD_ADDR_VAR 0 2
40617: PUSH
40618: LD_EXP 62
40622: PUSH
40623: LD_VAR 0 1
40627: ARRAY
40628: ST_TO_ADDR
// end ;
40629: LD_VAR 0 2
40633: RET
// export function MC_GetProduceList ( base ) ; begin
40634: LD_INT 0
40636: PPUSH
// result := mc_produce [ base ] ;
40637: LD_ADDR_VAR 0 2
40641: PUSH
40642: LD_EXP 70
40646: PUSH
40647: LD_VAR 0 1
40651: ARRAY
40652: ST_TO_ADDR
// end ;
40653: LD_VAR 0 2
40657: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
40658: LD_INT 0
40660: PPUSH
40661: PPUSH
// if not mc_bases then
40662: LD_EXP 49
40666: NOT
40667: IFFALSE 40671
// exit ;
40669: GO 40736
// if mc_bases [ base ] then
40671: LD_EXP 49
40675: PUSH
40676: LD_VAR 0 1
40680: ARRAY
40681: IFFALSE 40736
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40683: LD_ADDR_VAR 0 3
40687: PUSH
40688: LD_EXP 49
40692: PUSH
40693: LD_VAR 0 1
40697: ARRAY
40698: PPUSH
40699: LD_INT 30
40701: PUSH
40702: LD_VAR 0 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PPUSH
40711: CALL_OW 72
40715: ST_TO_ADDR
// if result then
40716: LD_VAR 0 3
40720: IFFALSE 40736
// result := result [ 1 ] ;
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_VAR 0 3
40731: PUSH
40732: LD_INT 1
40734: ARRAY
40735: ST_TO_ADDR
// end ; end ;
40736: LD_VAR 0 3
40740: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
// if not mc_bases then
40745: LD_EXP 49
40749: NOT
40750: IFFALSE 40754
// exit ;
40752: GO 40799
// if mc_bases [ base ] then
40754: LD_EXP 49
40758: PUSH
40759: LD_VAR 0 1
40763: ARRAY
40764: IFFALSE 40799
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40766: LD_ADDR_VAR 0 3
40770: PUSH
40771: LD_EXP 49
40775: PUSH
40776: LD_VAR 0 1
40780: ARRAY
40781: PPUSH
40782: LD_INT 30
40784: PUSH
40785: LD_VAR 0 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PPUSH
40794: CALL_OW 72
40798: ST_TO_ADDR
// end ;
40799: LD_VAR 0 3
40803: RET
// export function MC_SetTame ( base , area ) ; begin
40804: LD_INT 0
40806: PPUSH
// if not mc_bases or not base then
40807: LD_EXP 49
40811: NOT
40812: PUSH
40813: LD_VAR 0 1
40817: NOT
40818: OR
40819: IFFALSE 40823
// exit ;
40821: GO 40848
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
40823: LD_ADDR_EXP 77
40827: PUSH
40828: LD_EXP 77
40832: PPUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: LD_VAR 0 2
40842: PPUSH
40843: CALL_OW 1
40847: ST_TO_ADDR
// end ;
40848: LD_VAR 0 3
40852: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
40853: LD_INT 0
40855: PPUSH
40856: PPUSH
// if not mc_bases or not base then
40857: LD_EXP 49
40861: NOT
40862: PUSH
40863: LD_VAR 0 1
40867: NOT
40868: OR
40869: IFFALSE 40873
// exit ;
40871: GO 40975
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40873: LD_ADDR_VAR 0 4
40877: PUSH
40878: LD_EXP 49
40882: PUSH
40883: LD_VAR 0 1
40887: ARRAY
40888: PPUSH
40889: LD_INT 30
40891: PUSH
40892: LD_VAR 0 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PPUSH
40901: CALL_OW 72
40905: ST_TO_ADDR
// if not tmp then
40906: LD_VAR 0 4
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 40975
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
40915: LD_ADDR_EXP 81
40919: PUSH
40920: LD_EXP 81
40924: PPUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: LD_EXP 81
40934: PUSH
40935: LD_VAR 0 1
40939: ARRAY
40940: PPUSH
40941: LD_EXP 81
40945: PUSH
40946: LD_VAR 0 1
40950: ARRAY
40951: PUSH
40952: LD_INT 1
40954: PLUS
40955: PPUSH
40956: LD_VAR 0 4
40960: PUSH
40961: LD_INT 1
40963: ARRAY
40964: PPUSH
40965: CALL_OW 2
40969: PPUSH
40970: CALL_OW 1
40974: ST_TO_ADDR
// end ;
40975: LD_VAR 0 3
40979: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
40980: LD_INT 0
40982: PPUSH
40983: PPUSH
// if not mc_bases or not base or not kinds then
40984: LD_EXP 49
40988: NOT
40989: PUSH
40990: LD_VAR 0 1
40994: NOT
40995: OR
40996: PUSH
40997: LD_VAR 0 2
41001: NOT
41002: OR
41003: IFFALSE 41007
// exit ;
41005: GO 41068
// for i in kinds do
41007: LD_ADDR_VAR 0 4
41011: PUSH
41012: LD_VAR 0 2
41016: PUSH
41017: FOR_IN
41018: IFFALSE 41066
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41020: LD_ADDR_EXP 83
41024: PUSH
41025: LD_EXP 83
41029: PPUSH
41030: LD_VAR 0 1
41034: PUSH
41035: LD_EXP 83
41039: PUSH
41040: LD_VAR 0 1
41044: ARRAY
41045: PUSH
41046: LD_INT 1
41048: PLUS
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PPUSH
41054: LD_VAR 0 4
41058: PPUSH
41059: CALL 53281 0 3
41063: ST_TO_ADDR
41064: GO 41017
41066: POP
41067: POP
// end ;
41068: LD_VAR 0 3
41072: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41073: LD_INT 0
41075: PPUSH
// if not mc_bases or not base or not areas then
41076: LD_EXP 49
41080: NOT
41081: PUSH
41082: LD_VAR 0 1
41086: NOT
41087: OR
41088: PUSH
41089: LD_VAR 0 2
41093: NOT
41094: OR
41095: IFFALSE 41099
// exit ;
41097: GO 41124
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41099: LD_ADDR_EXP 67
41103: PUSH
41104: LD_EXP 67
41108: PPUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: LD_VAR 0 2
41118: PPUSH
41119: CALL_OW 1
41123: ST_TO_ADDR
// end ;
41124: LD_VAR 0 3
41128: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41129: LD_INT 0
41131: PPUSH
// if not mc_bases or not base or not teleports_exit then
41132: LD_EXP 49
41136: NOT
41137: PUSH
41138: LD_VAR 0 1
41142: NOT
41143: OR
41144: PUSH
41145: LD_VAR 0 2
41149: NOT
41150: OR
41151: IFFALSE 41155
// exit ;
41153: GO 41180
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41155: LD_ADDR_EXP 84
41159: PUSH
41160: LD_EXP 84
41164: PPUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 2
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// end ;
41180: LD_VAR 0 3
41184: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
41189: PPUSH
// if not mc_bases or not base or not ext_list then
41190: LD_EXP 49
41194: NOT
41195: PUSH
41196: LD_VAR 0 1
41200: NOT
41201: OR
41202: PUSH
41203: LD_VAR 0 5
41207: NOT
41208: OR
41209: IFFALSE 41213
// exit ;
41211: GO 41386
// tmp := GetFacExtXYD ( x , y , d ) ;
41213: LD_ADDR_VAR 0 8
41217: PUSH
41218: LD_VAR 0 2
41222: PPUSH
41223: LD_VAR 0 3
41227: PPUSH
41228: LD_VAR 0 4
41232: PPUSH
41233: CALL 86659 0 3
41237: ST_TO_ADDR
// if not tmp then
41238: LD_VAR 0 8
41242: NOT
41243: IFFALSE 41247
// exit ;
41245: GO 41386
// for i in tmp do
41247: LD_ADDR_VAR 0 7
41251: PUSH
41252: LD_VAR 0 8
41256: PUSH
41257: FOR_IN
41258: IFFALSE 41384
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
41260: LD_ADDR_EXP 54
41264: PUSH
41265: LD_EXP 54
41269: PPUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: LD_EXP 54
41279: PUSH
41280: LD_VAR 0 1
41284: ARRAY
41285: PPUSH
41286: LD_EXP 54
41290: PUSH
41291: LD_VAR 0 1
41295: ARRAY
41296: PUSH
41297: LD_INT 1
41299: PLUS
41300: PPUSH
41301: LD_VAR 0 5
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: PUSH
41310: LD_VAR 0 7
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: PUSH
41319: LD_VAR 0 7
41323: PUSH
41324: LD_INT 2
41326: ARRAY
41327: PUSH
41328: LD_VAR 0 7
41332: PUSH
41333: LD_INT 3
41335: ARRAY
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL_OW 2
41347: PPUSH
41348: CALL_OW 1
41352: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
41353: LD_ADDR_VAR 0 5
41357: PUSH
41358: LD_VAR 0 5
41362: PPUSH
41363: LD_INT 1
41365: PPUSH
41366: CALL_OW 3
41370: ST_TO_ADDR
// if not ext_list then
41371: LD_VAR 0 5
41375: NOT
41376: IFFALSE 41382
// exit ;
41378: POP
41379: POP
41380: GO 41386
// end ;
41382: GO 41257
41384: POP
41385: POP
// end ;
41386: LD_VAR 0 6
41390: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
41391: LD_INT 0
41393: PPUSH
// if not mc_bases or not base or not weapon_list then
41394: LD_EXP 49
41398: NOT
41399: PUSH
41400: LD_VAR 0 1
41404: NOT
41405: OR
41406: PUSH
41407: LD_VAR 0 2
41411: NOT
41412: OR
41413: IFFALSE 41417
// exit ;
41415: GO 41442
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
41417: LD_ADDR_EXP 88
41421: PUSH
41422: LD_EXP 88
41426: PPUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: LD_VAR 0 2
41436: PPUSH
41437: CALL_OW 1
41441: ST_TO_ADDR
// end ;
41442: LD_VAR 0 3
41446: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
41447: LD_INT 0
41449: PPUSH
// if not mc_bases or not base or not tech_list then
41450: LD_EXP 49
41454: NOT
41455: PUSH
41456: LD_VAR 0 1
41460: NOT
41461: OR
41462: PUSH
41463: LD_VAR 0 2
41467: NOT
41468: OR
41469: IFFALSE 41473
// exit ;
41471: GO 41498
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
41473: LD_ADDR_EXP 76
41477: PUSH
41478: LD_EXP 76
41482: PPUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: CALL_OW 1
41497: ST_TO_ADDR
// end ;
41498: LD_VAR 0 3
41502: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
41503: LD_INT 0
41505: PPUSH
// if not mc_bases or not parking_area or not base then
41506: LD_EXP 49
41510: NOT
41511: PUSH
41512: LD_VAR 0 2
41516: NOT
41517: OR
41518: PUSH
41519: LD_VAR 0 1
41523: NOT
41524: OR
41525: IFFALSE 41529
// exit ;
41527: GO 41554
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
41529: LD_ADDR_EXP 73
41533: PUSH
41534: LD_EXP 73
41538: PPUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: LD_VAR 0 2
41548: PPUSH
41549: CALL_OW 1
41553: ST_TO_ADDR
// end ;
41554: LD_VAR 0 3
41558: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
41559: LD_INT 0
41561: PPUSH
// if not mc_bases or not base or not scan_area then
41562: LD_EXP 49
41566: NOT
41567: PUSH
41568: LD_VAR 0 1
41572: NOT
41573: OR
41574: PUSH
41575: LD_VAR 0 2
41579: NOT
41580: OR
41581: IFFALSE 41585
// exit ;
41583: GO 41610
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
41585: LD_ADDR_EXP 74
41589: PUSH
41590: LD_EXP 74
41594: PPUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: LD_VAR 0 2
41604: PPUSH
41605: CALL_OW 1
41609: ST_TO_ADDR
// end ;
41610: LD_VAR 0 3
41614: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
// if not mc_bases or not base then
41619: LD_EXP 49
41623: NOT
41624: PUSH
41625: LD_VAR 0 1
41629: NOT
41630: OR
41631: IFFALSE 41635
// exit ;
41633: GO 41699
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: LD_INT 4
41651: PUSH
41652: LD_INT 11
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
41662: LD_ADDR_EXP 76
41666: PUSH
41667: LD_EXP 76
41671: PPUSH
41672: LD_VAR 0 1
41676: PPUSH
41677: LD_EXP 76
41681: PUSH
41682: LD_VAR 0 1
41686: ARRAY
41687: PUSH
41688: LD_VAR 0 3
41692: DIFF
41693: PPUSH
41694: CALL_OW 1
41698: ST_TO_ADDR
// end ;
41699: LD_VAR 0 2
41703: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
41704: LD_INT 0
41706: PPUSH
// result := mc_vehicles [ base ] ;
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_EXP 68
41716: PUSH
41717: LD_VAR 0 1
41721: ARRAY
41722: ST_TO_ADDR
// if onlyCombat then
41723: LD_VAR 0 2
41727: IFFALSE 41892
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_VAR 0 3
41738: PUSH
41739: LD_VAR 0 3
41743: PPUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 34
41749: PUSH
41750: LD_INT 12
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 34
41759: PUSH
41760: LD_INT 51
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 34
41769: PUSH
41770: LD_EXP 93
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 34
41781: PUSH
41782: LD_INT 32
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 34
41791: PUSH
41792: LD_INT 13
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 34
41801: PUSH
41802: LD_INT 52
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 34
41811: PUSH
41812: LD_INT 14
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 34
41821: PUSH
41822: LD_INT 53
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 34
41831: PUSH
41832: LD_EXP 92
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 34
41843: PUSH
41844: LD_INT 31
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 34
41853: PUSH
41854: LD_INT 48
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 34
41863: PUSH
41864: LD_INT 8
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: PPUSH
41886: CALL_OW 72
41890: DIFF
41891: ST_TO_ADDR
// end ; end_of_file
41892: LD_VAR 0 3
41896: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
41897: LD_INT 0
41899: PPUSH
41900: PPUSH
41901: PPUSH
// if not mc_bases or not skirmish then
41902: LD_EXP 49
41906: NOT
41907: PUSH
41908: LD_EXP 47
41912: NOT
41913: OR
41914: IFFALSE 41918
// exit ;
41916: GO 42083
// for i = 1 to mc_bases do
41918: LD_ADDR_VAR 0 4
41922: PUSH
41923: DOUBLE
41924: LD_INT 1
41926: DEC
41927: ST_TO_ADDR
41928: LD_EXP 49
41932: PUSH
41933: FOR_TO
41934: IFFALSE 42081
// begin if sci in mc_bases [ i ] then
41936: LD_VAR 0 2
41940: PUSH
41941: LD_EXP 49
41945: PUSH
41946: LD_VAR 0 4
41950: ARRAY
41951: IN
41952: IFFALSE 42079
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
41954: LD_ADDR_EXP 78
41958: PUSH
41959: LD_EXP 78
41963: PPUSH
41964: LD_VAR 0 4
41968: PUSH
41969: LD_EXP 78
41973: PUSH
41974: LD_VAR 0 4
41978: ARRAY
41979: PUSH
41980: LD_INT 1
41982: PLUS
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PPUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL 53281 0 3
41997: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
41998: LD_ADDR_VAR 0 5
42002: PUSH
42003: LD_EXP 49
42007: PUSH
42008: LD_VAR 0 4
42012: ARRAY
42013: PPUSH
42014: LD_INT 2
42016: PUSH
42017: LD_INT 30
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 30
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: PPUSH
42042: CALL_OW 72
42046: PPUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 74
42056: ST_TO_ADDR
// if tmp then
42057: LD_VAR 0 5
42061: IFFALSE 42077
// ComStandNearbyBuilding ( ape , tmp ) ;
42063: LD_VAR 0 1
42067: PPUSH
42068: LD_VAR 0 5
42072: PPUSH
42073: CALL 47848 0 2
// break ;
42077: GO 42081
// end ; end ;
42079: GO 41933
42081: POP
42082: POP
// end ;
42083: LD_VAR 0 3
42087: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42088: LD_INT 0
42090: PPUSH
42091: PPUSH
42092: PPUSH
// if not mc_bases or not skirmish then
42093: LD_EXP 49
42097: NOT
42098: PUSH
42099: LD_EXP 47
42103: NOT
42104: OR
42105: IFFALSE 42109
// exit ;
42107: GO 42198
// for i = 1 to mc_bases do
42109: LD_ADDR_VAR 0 4
42113: PUSH
42114: DOUBLE
42115: LD_INT 1
42117: DEC
42118: ST_TO_ADDR
42119: LD_EXP 49
42123: PUSH
42124: FOR_TO
42125: IFFALSE 42196
// begin if building in mc_busy_turret_list [ i ] then
42127: LD_VAR 0 1
42131: PUSH
42132: LD_EXP 59
42136: PUSH
42137: LD_VAR 0 4
42141: ARRAY
42142: IN
42143: IFFALSE 42194
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42145: LD_ADDR_VAR 0 5
42149: PUSH
42150: LD_EXP 59
42154: PUSH
42155: LD_VAR 0 4
42159: ARRAY
42160: PUSH
42161: LD_VAR 0 1
42165: DIFF
42166: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42167: LD_ADDR_EXP 59
42171: PUSH
42172: LD_EXP 59
42176: PPUSH
42177: LD_VAR 0 4
42181: PPUSH
42182: LD_VAR 0 5
42186: PPUSH
42187: CALL_OW 1
42191: ST_TO_ADDR
// break ;
42192: GO 42196
// end ; end ;
42194: GO 42124
42196: POP
42197: POP
// end ;
42198: LD_VAR 0 3
42202: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42203: LD_INT 0
42205: PPUSH
42206: PPUSH
42207: PPUSH
// if not mc_bases or not skirmish then
42208: LD_EXP 49
42212: NOT
42213: PUSH
42214: LD_EXP 47
42218: NOT
42219: OR
42220: IFFALSE 42224
// exit ;
42222: GO 42423
// for i = 1 to mc_bases do
42224: LD_ADDR_VAR 0 5
42228: PUSH
42229: DOUBLE
42230: LD_INT 1
42232: DEC
42233: ST_TO_ADDR
42234: LD_EXP 49
42238: PUSH
42239: FOR_TO
42240: IFFALSE 42421
// if building in mc_bases [ i ] then
42242: LD_VAR 0 1
42246: PUSH
42247: LD_EXP 49
42251: PUSH
42252: LD_VAR 0 5
42256: ARRAY
42257: IN
42258: IFFALSE 42419
// begin tmp := mc_bases [ i ] diff building ;
42260: LD_ADDR_VAR 0 6
42264: PUSH
42265: LD_EXP 49
42269: PUSH
42270: LD_VAR 0 5
42274: ARRAY
42275: PUSH
42276: LD_VAR 0 1
42280: DIFF
42281: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
42282: LD_ADDR_EXP 49
42286: PUSH
42287: LD_EXP 49
42291: PPUSH
42292: LD_VAR 0 5
42296: PPUSH
42297: LD_VAR 0 6
42301: PPUSH
42302: CALL_OW 1
42306: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
42307: LD_VAR 0 1
42311: PUSH
42312: LD_EXP 57
42316: PUSH
42317: LD_VAR 0 5
42321: ARRAY
42322: IN
42323: IFFALSE 42362
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
42325: LD_ADDR_EXP 57
42329: PUSH
42330: LD_EXP 57
42334: PPUSH
42335: LD_VAR 0 5
42339: PPUSH
42340: LD_EXP 57
42344: PUSH
42345: LD_VAR 0 5
42349: ARRAY
42350: PUSH
42351: LD_VAR 0 1
42355: DIFF
42356: PPUSH
42357: CALL_OW 1
42361: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
42362: LD_VAR 0 1
42366: PUSH
42367: LD_EXP 58
42371: PUSH
42372: LD_VAR 0 5
42376: ARRAY
42377: IN
42378: IFFALSE 42417
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
42380: LD_ADDR_EXP 58
42384: PUSH
42385: LD_EXP 58
42389: PPUSH
42390: LD_VAR 0 5
42394: PPUSH
42395: LD_EXP 58
42399: PUSH
42400: LD_VAR 0 5
42404: ARRAY
42405: PUSH
42406: LD_VAR 0 1
42410: DIFF
42411: PPUSH
42412: CALL_OW 1
42416: ST_TO_ADDR
// break ;
42417: GO 42421
// end ;
42419: GO 42239
42421: POP
42422: POP
// end ;
42423: LD_VAR 0 4
42427: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
42428: LD_INT 0
42430: PPUSH
42431: PPUSH
42432: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
42433: LD_EXP 49
42437: NOT
42438: PUSH
42439: LD_EXP 47
42443: NOT
42444: OR
42445: PUSH
42446: LD_VAR 0 3
42450: PUSH
42451: LD_EXP 75
42455: IN
42456: NOT
42457: OR
42458: IFFALSE 42462
// exit ;
42460: GO 42585
// for i = 1 to mc_vehicles do
42462: LD_ADDR_VAR 0 6
42466: PUSH
42467: DOUBLE
42468: LD_INT 1
42470: DEC
42471: ST_TO_ADDR
42472: LD_EXP 68
42476: PUSH
42477: FOR_TO
42478: IFFALSE 42583
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
42480: LD_VAR 0 2
42484: PUSH
42485: LD_EXP 68
42489: PUSH
42490: LD_VAR 0 6
42494: ARRAY
42495: IN
42496: PUSH
42497: LD_VAR 0 1
42501: PUSH
42502: LD_EXP 68
42506: PUSH
42507: LD_VAR 0 6
42511: ARRAY
42512: IN
42513: OR
42514: IFFALSE 42581
// begin tmp := mc_vehicles [ i ] diff old ;
42516: LD_ADDR_VAR 0 7
42520: PUSH
42521: LD_EXP 68
42525: PUSH
42526: LD_VAR 0 6
42530: ARRAY
42531: PUSH
42532: LD_VAR 0 2
42536: DIFF
42537: ST_TO_ADDR
// tmp := tmp diff new ;
42538: LD_ADDR_VAR 0 7
42542: PUSH
42543: LD_VAR 0 7
42547: PUSH
42548: LD_VAR 0 1
42552: DIFF
42553: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
42554: LD_ADDR_EXP 68
42558: PUSH
42559: LD_EXP 68
42563: PPUSH
42564: LD_VAR 0 6
42568: PPUSH
42569: LD_VAR 0 7
42573: PPUSH
42574: CALL_OW 1
42578: ST_TO_ADDR
// break ;
42579: GO 42583
// end ;
42581: GO 42477
42583: POP
42584: POP
// end ;
42585: LD_VAR 0 5
42589: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
42590: LD_INT 0
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
// if not mc_bases or not skirmish then
42596: LD_EXP 49
42600: NOT
42601: PUSH
42602: LD_EXP 47
42606: NOT
42607: OR
42608: IFFALSE 42612
// exit ;
42610: GO 42989
// side := GetSide ( vehicle ) ;
42612: LD_ADDR_VAR 0 5
42616: PUSH
42617: LD_VAR 0 1
42621: PPUSH
42622: CALL_OW 255
42626: ST_TO_ADDR
// for i = 1 to mc_bases do
42627: LD_ADDR_VAR 0 4
42631: PUSH
42632: DOUBLE
42633: LD_INT 1
42635: DEC
42636: ST_TO_ADDR
42637: LD_EXP 49
42641: PUSH
42642: FOR_TO
42643: IFFALSE 42987
// begin if factory in mc_bases [ i ] then
42645: LD_VAR 0 2
42649: PUSH
42650: LD_EXP 49
42654: PUSH
42655: LD_VAR 0 4
42659: ARRAY
42660: IN
42661: IFFALSE 42985
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
42663: LD_EXP 71
42667: PUSH
42668: LD_VAR 0 4
42672: ARRAY
42673: PUSH
42674: LD_EXP 60
42678: PUSH
42679: LD_VAR 0 4
42683: ARRAY
42684: LESS
42685: PUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 264
42695: PUSH
42696: LD_INT 31
42698: PUSH
42699: LD_INT 32
42701: PUSH
42702: LD_INT 51
42704: PUSH
42705: LD_EXP 93
42709: PUSH
42710: LD_INT 12
42712: PUSH
42713: LD_INT 30
42715: PUSH
42716: LD_EXP 92
42720: PUSH
42721: LD_INT 11
42723: PUSH
42724: LD_INT 53
42726: PUSH
42727: LD_INT 14
42729: PUSH
42730: LD_EXP 96
42734: PUSH
42735: LD_INT 29
42737: PUSH
42738: LD_EXP 94
42742: PUSH
42743: LD_INT 13
42745: PUSH
42746: LD_INT 52
42748: PUSH
42749: LD_INT 48
42751: PUSH
42752: LD_INT 8
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: IN
42774: NOT
42775: AND
42776: IFFALSE 42824
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
42778: LD_ADDR_EXP 71
42782: PUSH
42783: LD_EXP 71
42787: PPUSH
42788: LD_VAR 0 4
42792: PUSH
42793: LD_EXP 71
42797: PUSH
42798: LD_VAR 0 4
42802: ARRAY
42803: PUSH
42804: LD_INT 1
42806: PLUS
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PPUSH
42812: LD_VAR 0 1
42816: PPUSH
42817: CALL 53281 0 3
42821: ST_TO_ADDR
42822: GO 42868
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
42824: LD_ADDR_EXP 68
42828: PUSH
42829: LD_EXP 68
42833: PPUSH
42834: LD_VAR 0 4
42838: PUSH
42839: LD_EXP 68
42843: PUSH
42844: LD_VAR 0 4
42848: ARRAY
42849: PUSH
42850: LD_INT 1
42852: PLUS
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PPUSH
42858: LD_VAR 0 1
42862: PPUSH
42863: CALL 53281 0 3
42867: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
42868: LD_VAR 0 1
42872: PPUSH
42873: CALL_OW 263
42877: PUSH
42878: LD_INT 2
42880: EQUAL
42881: IFFALSE 42901
// begin repeat wait ( 0 0$1 ) ;
42883: LD_INT 35
42885: PPUSH
42886: CALL_OW 67
// until IsControledBy ( vehicle ) ;
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 312
42899: IFFALSE 42883
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
42901: LD_VAR 0 1
42905: PPUSH
42906: LD_EXP 73
42910: PUSH
42911: LD_VAR 0 4
42915: ARRAY
42916: PPUSH
42917: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
42921: LD_VAR 0 1
42925: PPUSH
42926: CALL_OW 263
42930: PUSH
42931: LD_INT 1
42933: NONEQUAL
42934: IFFALSE 42938
// break ;
42936: GO 42987
// repeat wait ( 0 0$1 ) ;
42938: LD_INT 35
42940: PPUSH
42941: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
42945: LD_VAR 0 1
42949: PPUSH
42950: LD_EXP 73
42954: PUSH
42955: LD_VAR 0 4
42959: ARRAY
42960: PPUSH
42961: CALL_OW 308
42965: IFFALSE 42938
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
42967: LD_VAR 0 1
42971: PPUSH
42972: CALL_OW 311
42976: PPUSH
42977: CALL_OW 121
// exit ;
42981: POP
42982: POP
42983: GO 42989
// end ; end ;
42985: GO 42642
42987: POP
42988: POP
// end ;
42989: LD_VAR 0 3
42993: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
// if not mc_bases or not skirmish then
43000: LD_EXP 49
43004: NOT
43005: PUSH
43006: LD_EXP 47
43010: NOT
43011: OR
43012: IFFALSE 43016
// exit ;
43014: GO 43369
// repeat wait ( 0 0$1 ) ;
43016: LD_INT 35
43018: PPUSH
43019: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
43023: LD_VAR 0 2
43027: PPUSH
43028: LD_VAR 0 3
43032: PPUSH
43033: CALL_OW 284
43037: IFFALSE 43016
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43039: LD_VAR 0 2
43043: PPUSH
43044: LD_VAR 0 3
43048: PPUSH
43049: CALL_OW 283
43053: PUSH
43054: LD_INT 4
43056: EQUAL
43057: IFFALSE 43061
// exit ;
43059: GO 43369
// for i = 1 to mc_bases do
43061: LD_ADDR_VAR 0 7
43065: PUSH
43066: DOUBLE
43067: LD_INT 1
43069: DEC
43070: ST_TO_ADDR
43071: LD_EXP 49
43075: PUSH
43076: FOR_TO
43077: IFFALSE 43367
// begin if mc_crates_area [ i ] then
43079: LD_EXP 67
43083: PUSH
43084: LD_VAR 0 7
43088: ARRAY
43089: IFFALSE 43200
// for j in mc_crates_area [ i ] do
43091: LD_ADDR_VAR 0 8
43095: PUSH
43096: LD_EXP 67
43100: PUSH
43101: LD_VAR 0 7
43105: ARRAY
43106: PUSH
43107: FOR_IN
43108: IFFALSE 43198
// if InArea ( x , y , j ) then
43110: LD_VAR 0 2
43114: PPUSH
43115: LD_VAR 0 3
43119: PPUSH
43120: LD_VAR 0 8
43124: PPUSH
43125: CALL_OW 309
43129: IFFALSE 43196
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43131: LD_ADDR_EXP 65
43135: PUSH
43136: LD_EXP 65
43140: PPUSH
43141: LD_VAR 0 7
43145: PUSH
43146: LD_EXP 65
43150: PUSH
43151: LD_VAR 0 7
43155: ARRAY
43156: PUSH
43157: LD_INT 1
43159: PLUS
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PPUSH
43165: LD_VAR 0 4
43169: PUSH
43170: LD_VAR 0 2
43174: PUSH
43175: LD_VAR 0 3
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: PPUSH
43185: CALL 53281 0 3
43189: ST_TO_ADDR
// exit ;
43190: POP
43191: POP
43192: POP
43193: POP
43194: GO 43369
// end ;
43196: GO 43107
43198: POP
43199: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43200: LD_ADDR_VAR 0 9
43204: PUSH
43205: LD_EXP 49
43209: PUSH
43210: LD_VAR 0 7
43214: ARRAY
43215: PPUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 30
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 30
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: PPUSH
43244: CALL_OW 72
43248: ST_TO_ADDR
// if not depot then
43249: LD_VAR 0 9
43253: NOT
43254: IFFALSE 43258
// continue ;
43256: GO 43076
// for j in depot do
43258: LD_ADDR_VAR 0 8
43262: PUSH
43263: LD_VAR 0 9
43267: PUSH
43268: FOR_IN
43269: IFFALSE 43363
// if GetDistUnitXY ( j , x , y ) < 30 then
43271: LD_VAR 0 8
43275: PPUSH
43276: LD_VAR 0 2
43280: PPUSH
43281: LD_VAR 0 3
43285: PPUSH
43286: CALL_OW 297
43290: PUSH
43291: LD_INT 30
43293: LESS
43294: IFFALSE 43361
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43296: LD_ADDR_EXP 65
43300: PUSH
43301: LD_EXP 65
43305: PPUSH
43306: LD_VAR 0 7
43310: PUSH
43311: LD_EXP 65
43315: PUSH
43316: LD_VAR 0 7
43320: ARRAY
43321: PUSH
43322: LD_INT 1
43324: PLUS
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PPUSH
43330: LD_VAR 0 4
43334: PUSH
43335: LD_VAR 0 2
43339: PUSH
43340: LD_VAR 0 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: PPUSH
43350: CALL 53281 0 3
43354: ST_TO_ADDR
// exit ;
43355: POP
43356: POP
43357: POP
43358: POP
43359: GO 43369
// end ;
43361: GO 43268
43363: POP
43364: POP
// end ;
43365: GO 43076
43367: POP
43368: POP
// end ;
43369: LD_VAR 0 6
43373: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
43374: LD_INT 0
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
// if not mc_bases or not skirmish then
43380: LD_EXP 49
43384: NOT
43385: PUSH
43386: LD_EXP 47
43390: NOT
43391: OR
43392: IFFALSE 43396
// exit ;
43394: GO 43673
// side := GetSide ( lab ) ;
43396: LD_ADDR_VAR 0 4
43400: PUSH
43401: LD_VAR 0 2
43405: PPUSH
43406: CALL_OW 255
43410: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
43411: LD_VAR 0 4
43415: PUSH
43416: LD_EXP 75
43420: IN
43421: NOT
43422: PUSH
43423: LD_EXP 76
43427: NOT
43428: OR
43429: PUSH
43430: LD_EXP 49
43434: NOT
43435: OR
43436: IFFALSE 43440
// exit ;
43438: GO 43673
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
43440: LD_ADDR_EXP 76
43444: PUSH
43445: LD_EXP 76
43449: PPUSH
43450: LD_VAR 0 4
43454: PPUSH
43455: LD_EXP 76
43459: PUSH
43460: LD_VAR 0 4
43464: ARRAY
43465: PUSH
43466: LD_VAR 0 1
43470: DIFF
43471: PPUSH
43472: CALL_OW 1
43476: ST_TO_ADDR
// for i = 1 to mc_bases do
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: DOUBLE
43483: LD_INT 1
43485: DEC
43486: ST_TO_ADDR
43487: LD_EXP 49
43491: PUSH
43492: FOR_TO
43493: IFFALSE 43671
// begin if lab in mc_bases [ i ] then
43495: LD_VAR 0 2
43499: PUSH
43500: LD_EXP 49
43504: PUSH
43505: LD_VAR 0 5
43509: ARRAY
43510: IN
43511: IFFALSE 43669
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
43513: LD_VAR 0 1
43517: PUSH
43518: LD_INT 11
43520: PUSH
43521: LD_INT 4
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: IN
43536: PUSH
43537: LD_EXP 79
43541: PUSH
43542: LD_VAR 0 5
43546: ARRAY
43547: AND
43548: IFFALSE 43669
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
43550: LD_ADDR_VAR 0 6
43554: PUSH
43555: LD_EXP 79
43559: PUSH
43560: LD_VAR 0 5
43564: ARRAY
43565: PUSH
43566: LD_INT 1
43568: ARRAY
43569: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43570: LD_ADDR_EXP 79
43574: PUSH
43575: LD_EXP 79
43579: PPUSH
43580: LD_VAR 0 5
43584: PPUSH
43585: EMPTY
43586: PPUSH
43587: CALL_OW 1
43591: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
43592: LD_VAR 0 6
43596: PPUSH
43597: LD_INT 0
43599: PPUSH
43600: CALL_OW 109
// ComExitBuilding ( tmp ) ;
43604: LD_VAR 0 6
43608: PPUSH
43609: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
43613: LD_ADDR_EXP 78
43617: PUSH
43618: LD_EXP 78
43622: PPUSH
43623: LD_VAR 0 5
43627: PPUSH
43628: LD_EXP 78
43632: PUSH
43633: LD_VAR 0 5
43637: ARRAY
43638: PPUSH
43639: LD_INT 1
43641: PPUSH
43642: LD_VAR 0 6
43646: PPUSH
43647: CALL_OW 2
43651: PPUSH
43652: CALL_OW 1
43656: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
43657: LD_VAR 0 5
43661: PPUSH
43662: LD_INT 112
43664: PPUSH
43665: CALL 20781 0 2
// end ; end ; end ;
43669: GO 43492
43671: POP
43672: POP
// end ;
43673: LD_VAR 0 3
43677: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
43678: LD_INT 0
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
// if not mc_bases or not skirmish then
43688: LD_EXP 49
43692: NOT
43693: PUSH
43694: LD_EXP 47
43698: NOT
43699: OR
43700: IFFALSE 43704
// exit ;
43702: GO 44853
// for i = 1 to mc_bases do
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: DOUBLE
43710: LD_INT 1
43712: DEC
43713: ST_TO_ADDR
43714: LD_EXP 49
43718: PUSH
43719: FOR_TO
43720: IFFALSE 44851
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
43722: LD_VAR 0 1
43726: PUSH
43727: LD_EXP 49
43731: PUSH
43732: LD_VAR 0 3
43736: ARRAY
43737: IN
43738: PUSH
43739: LD_VAR 0 1
43743: PUSH
43744: LD_EXP 56
43748: PUSH
43749: LD_VAR 0 3
43753: ARRAY
43754: IN
43755: OR
43756: PUSH
43757: LD_VAR 0 1
43761: PUSH
43762: LD_EXP 71
43766: PUSH
43767: LD_VAR 0 3
43771: ARRAY
43772: IN
43773: OR
43774: PUSH
43775: LD_VAR 0 1
43779: PUSH
43780: LD_EXP 68
43784: PUSH
43785: LD_VAR 0 3
43789: ARRAY
43790: IN
43791: OR
43792: PUSH
43793: LD_VAR 0 1
43797: PUSH
43798: LD_EXP 78
43802: PUSH
43803: LD_VAR 0 3
43807: ARRAY
43808: IN
43809: OR
43810: PUSH
43811: LD_VAR 0 1
43815: PUSH
43816: LD_EXP 79
43820: PUSH
43821: LD_VAR 0 3
43825: ARRAY
43826: IN
43827: OR
43828: IFFALSE 44849
// begin if un in mc_ape [ i ] then
43830: LD_VAR 0 1
43834: PUSH
43835: LD_EXP 78
43839: PUSH
43840: LD_VAR 0 3
43844: ARRAY
43845: IN
43846: IFFALSE 43885
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
43848: LD_ADDR_EXP 78
43852: PUSH
43853: LD_EXP 78
43857: PPUSH
43858: LD_VAR 0 3
43862: PPUSH
43863: LD_EXP 78
43867: PUSH
43868: LD_VAR 0 3
43872: ARRAY
43873: PUSH
43874: LD_VAR 0 1
43878: DIFF
43879: PPUSH
43880: CALL_OW 1
43884: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
43885: LD_VAR 0 1
43889: PUSH
43890: LD_EXP 79
43894: PUSH
43895: LD_VAR 0 3
43899: ARRAY
43900: IN
43901: IFFALSE 43925
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43903: LD_ADDR_EXP 79
43907: PUSH
43908: LD_EXP 79
43912: PPUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: EMPTY
43919: PPUSH
43920: CALL_OW 1
43924: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 247
43934: PUSH
43935: LD_INT 2
43937: EQUAL
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 110
43948: PUSH
43949: LD_INT 20
43951: EQUAL
43952: PUSH
43953: LD_VAR 0 1
43957: PUSH
43958: LD_EXP 71
43962: PUSH
43963: LD_VAR 0 3
43967: ARRAY
43968: IN
43969: OR
43970: PUSH
43971: LD_VAR 0 1
43975: PPUSH
43976: CALL_OW 264
43980: PUSH
43981: LD_INT 12
43983: PUSH
43984: LD_INT 51
43986: PUSH
43987: LD_EXP 93
43991: PUSH
43992: LD_INT 32
43994: PUSH
43995: LD_INT 13
43997: PUSH
43998: LD_INT 52
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: IN
44009: OR
44010: AND
44011: IFFALSE 44189
// begin if un in mc_defender [ i ] then
44013: LD_VAR 0 1
44017: PUSH
44018: LD_EXP 71
44022: PUSH
44023: LD_VAR 0 3
44027: ARRAY
44028: IN
44029: IFFALSE 44068
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44031: LD_ADDR_EXP 71
44035: PUSH
44036: LD_EXP 71
44040: PPUSH
44041: LD_VAR 0 3
44045: PPUSH
44046: LD_EXP 71
44050: PUSH
44051: LD_VAR 0 3
44055: ARRAY
44056: PUSH
44057: LD_VAR 0 1
44061: DIFF
44062: PPUSH
44063: CALL_OW 1
44067: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44068: LD_ADDR_VAR 0 8
44072: PUSH
44073: LD_VAR 0 3
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: CALL 40741 0 2
44085: ST_TO_ADDR
// if fac then
44086: LD_VAR 0 8
44090: IFFALSE 44189
// begin for j in fac do
44092: LD_ADDR_VAR 0 4
44096: PUSH
44097: LD_VAR 0 8
44101: PUSH
44102: FOR_IN
44103: IFFALSE 44187
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44105: LD_ADDR_VAR 0 9
44109: PUSH
44110: LD_VAR 0 8
44114: PPUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: CALL_OW 265
44124: PPUSH
44125: LD_VAR 0 1
44129: PPUSH
44130: CALL_OW 262
44134: PPUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 263
44144: PPUSH
44145: LD_VAR 0 1
44149: PPUSH
44150: CALL_OW 264
44154: PPUSH
44155: CALL 50813 0 5
44159: ST_TO_ADDR
// if components then
44160: LD_VAR 0 9
44164: IFFALSE 44185
// begin MC_InsertProduceList ( i , [ components ] ) ;
44166: LD_VAR 0 3
44170: PPUSH
44171: LD_VAR 0 9
44175: PUSH
44176: EMPTY
44177: LIST
44178: PPUSH
44179: CALL 40286 0 2
// break ;
44183: GO 44187
// end ; end ;
44185: GO 44102
44187: POP
44188: POP
// end ; end ; if GetType ( un ) = unit_building then
44189: LD_VAR 0 1
44193: PPUSH
44194: CALL_OW 247
44198: PUSH
44199: LD_INT 3
44201: EQUAL
44202: IFFALSE 44517
// begin btype := GetBType ( un ) ;
44204: LD_ADDR_VAR 0 5
44208: PUSH
44209: LD_VAR 0 1
44213: PPUSH
44214: CALL_OW 266
44218: ST_TO_ADDR
// if btype = b_warehouse then
44219: LD_VAR 0 5
44223: PUSH
44224: LD_INT 1
44226: EQUAL
44227: IFFALSE 44245
// begin btype := b_depot ;
44229: LD_ADDR_VAR 0 5
44233: PUSH
44234: LD_INT 0
44236: ST_TO_ADDR
// pos := 1 ;
44237: LD_ADDR_VAR 0 6
44241: PUSH
44242: LD_INT 1
44244: ST_TO_ADDR
// end ; if btype = b_factory then
44245: LD_VAR 0 5
44249: PUSH
44250: LD_INT 3
44252: EQUAL
44253: IFFALSE 44271
// begin btype := b_workshop ;
44255: LD_ADDR_VAR 0 5
44259: PUSH
44260: LD_INT 2
44262: ST_TO_ADDR
// pos := 1 ;
44263: LD_ADDR_VAR 0 6
44267: PUSH
44268: LD_INT 1
44270: ST_TO_ADDR
// end ; if btype = b_barracks then
44271: LD_VAR 0 5
44275: PUSH
44276: LD_INT 5
44278: EQUAL
44279: IFFALSE 44289
// btype := b_armoury ;
44281: LD_ADDR_VAR 0 5
44285: PUSH
44286: LD_INT 4
44288: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
44289: LD_VAR 0 5
44293: PUSH
44294: LD_INT 7
44296: PUSH
44297: LD_INT 8
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: IN
44304: IFFALSE 44314
// btype := b_lab ;
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: LD_INT 6
44313: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
44314: LD_ADDR_EXP 54
44318: PUSH
44319: LD_EXP 54
44323: PPUSH
44324: LD_VAR 0 3
44328: PUSH
44329: LD_EXP 54
44333: PUSH
44334: LD_VAR 0 3
44338: ARRAY
44339: PUSH
44340: LD_INT 1
44342: PLUS
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PPUSH
44348: LD_VAR 0 5
44352: PUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL_OW 250
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: CALL_OW 251
44372: PUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 254
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: PPUSH
44389: CALL 53281 0 3
44393: ST_TO_ADDR
// if pos = 1 then
44394: LD_VAR 0 6
44398: PUSH
44399: LD_INT 1
44401: EQUAL
44402: IFFALSE 44517
// begin tmp := mc_build_list [ i ] ;
44404: LD_ADDR_VAR 0 7
44408: PUSH
44409: LD_EXP 54
44413: PUSH
44414: LD_VAR 0 3
44418: ARRAY
44419: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
44420: LD_VAR 0 7
44424: PPUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 30
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 30
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: PPUSH
44453: CALL_OW 72
44457: IFFALSE 44467
// pos := 2 ;
44459: LD_ADDR_VAR 0 6
44463: PUSH
44464: LD_INT 2
44466: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
44467: LD_ADDR_VAR 0 7
44471: PUSH
44472: LD_VAR 0 7
44476: PPUSH
44477: LD_VAR 0 6
44481: PPUSH
44482: LD_VAR 0 7
44486: PPUSH
44487: CALL 53607 0 3
44491: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
44492: LD_ADDR_EXP 54
44496: PUSH
44497: LD_EXP 54
44501: PPUSH
44502: LD_VAR 0 3
44506: PPUSH
44507: LD_VAR 0 7
44511: PPUSH
44512: CALL_OW 1
44516: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
44517: LD_VAR 0 1
44521: PUSH
44522: LD_EXP 49
44526: PUSH
44527: LD_VAR 0 3
44531: ARRAY
44532: IN
44533: IFFALSE 44572
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
44535: LD_ADDR_EXP 49
44539: PUSH
44540: LD_EXP 49
44544: PPUSH
44545: LD_VAR 0 3
44549: PPUSH
44550: LD_EXP 49
44554: PUSH
44555: LD_VAR 0 3
44559: ARRAY
44560: PUSH
44561: LD_VAR 0 1
44565: DIFF
44566: PPUSH
44567: CALL_OW 1
44571: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
44572: LD_VAR 0 1
44576: PUSH
44577: LD_EXP 56
44581: PUSH
44582: LD_VAR 0 3
44586: ARRAY
44587: IN
44588: IFFALSE 44627
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
44590: LD_ADDR_EXP 56
44594: PUSH
44595: LD_EXP 56
44599: PPUSH
44600: LD_VAR 0 3
44604: PPUSH
44605: LD_EXP 56
44609: PUSH
44610: LD_VAR 0 3
44614: ARRAY
44615: PUSH
44616: LD_VAR 0 1
44620: DIFF
44621: PPUSH
44622: CALL_OW 1
44626: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
44627: LD_VAR 0 1
44631: PUSH
44632: LD_EXP 68
44636: PUSH
44637: LD_VAR 0 3
44641: ARRAY
44642: IN
44643: IFFALSE 44682
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
44645: LD_ADDR_EXP 68
44649: PUSH
44650: LD_EXP 68
44654: PPUSH
44655: LD_VAR 0 3
44659: PPUSH
44660: LD_EXP 68
44664: PUSH
44665: LD_VAR 0 3
44669: ARRAY
44670: PUSH
44671: LD_VAR 0 1
44675: DIFF
44676: PPUSH
44677: CALL_OW 1
44681: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
44682: LD_VAR 0 1
44686: PUSH
44687: LD_EXP 71
44691: PUSH
44692: LD_VAR 0 3
44696: ARRAY
44697: IN
44698: IFFALSE 44737
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44700: LD_ADDR_EXP 71
44704: PUSH
44705: LD_EXP 71
44709: PPUSH
44710: LD_VAR 0 3
44714: PPUSH
44715: LD_EXP 71
44719: PUSH
44720: LD_VAR 0 3
44724: ARRAY
44725: PUSH
44726: LD_VAR 0 1
44730: DIFF
44731: PPUSH
44732: CALL_OW 1
44736: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
44737: LD_VAR 0 1
44741: PUSH
44742: LD_EXP 58
44746: PUSH
44747: LD_VAR 0 3
44751: ARRAY
44752: IN
44753: IFFALSE 44792
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
44755: LD_ADDR_EXP 58
44759: PUSH
44760: LD_EXP 58
44764: PPUSH
44765: LD_VAR 0 3
44769: PPUSH
44770: LD_EXP 58
44774: PUSH
44775: LD_VAR 0 3
44779: ARRAY
44780: PUSH
44781: LD_VAR 0 1
44785: DIFF
44786: PPUSH
44787: CALL_OW 1
44791: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
44792: LD_VAR 0 1
44796: PUSH
44797: LD_EXP 57
44801: PUSH
44802: LD_VAR 0 3
44806: ARRAY
44807: IN
44808: IFFALSE 44847
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
44810: LD_ADDR_EXP 57
44814: PUSH
44815: LD_EXP 57
44819: PPUSH
44820: LD_VAR 0 3
44824: PPUSH
44825: LD_EXP 57
44829: PUSH
44830: LD_VAR 0 3
44834: ARRAY
44835: PUSH
44836: LD_VAR 0 1
44840: DIFF
44841: PPUSH
44842: CALL_OW 1
44846: ST_TO_ADDR
// end ; break ;
44847: GO 44851
// end ;
44849: GO 43719
44851: POP
44852: POP
// end ;
44853: LD_VAR 0 2
44857: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
44858: LD_INT 0
44860: PPUSH
44861: PPUSH
44862: PPUSH
// if not mc_bases or not skirmish then
44863: LD_EXP 49
44867: NOT
44868: PUSH
44869: LD_EXP 47
44873: NOT
44874: OR
44875: IFFALSE 44879
// exit ;
44877: GO 45094
// for i = 1 to mc_bases do
44879: LD_ADDR_VAR 0 3
44883: PUSH
44884: DOUBLE
44885: LD_INT 1
44887: DEC
44888: ST_TO_ADDR
44889: LD_EXP 49
44893: PUSH
44894: FOR_TO
44895: IFFALSE 45092
// begin if building in mc_construct_list [ i ] then
44897: LD_VAR 0 1
44901: PUSH
44902: LD_EXP 56
44906: PUSH
44907: LD_VAR 0 3
44911: ARRAY
44912: IN
44913: IFFALSE 45090
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
44915: LD_ADDR_EXP 56
44919: PUSH
44920: LD_EXP 56
44924: PPUSH
44925: LD_VAR 0 3
44929: PPUSH
44930: LD_EXP 56
44934: PUSH
44935: LD_VAR 0 3
44939: ARRAY
44940: PUSH
44941: LD_VAR 0 1
44945: DIFF
44946: PPUSH
44947: CALL_OW 1
44951: ST_TO_ADDR
// if building in mc_lab [ i ] then
44952: LD_VAR 0 1
44956: PUSH
44957: LD_EXP 82
44961: PUSH
44962: LD_VAR 0 3
44966: ARRAY
44967: IN
44968: IFFALSE 45023
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
44970: LD_ADDR_EXP 83
44974: PUSH
44975: LD_EXP 83
44979: PPUSH
44980: LD_VAR 0 3
44984: PPUSH
44985: LD_EXP 83
44989: PUSH
44990: LD_VAR 0 3
44994: ARRAY
44995: PPUSH
44996: LD_INT 1
44998: PPUSH
44999: LD_EXP 83
45003: PUSH
45004: LD_VAR 0 3
45008: ARRAY
45009: PPUSH
45010: LD_INT 0
45012: PPUSH
45013: CALL 52699 0 4
45017: PPUSH
45018: CALL_OW 1
45022: ST_TO_ADDR
// if not building in mc_bases [ i ] then
45023: LD_VAR 0 1
45027: PUSH
45028: LD_EXP 49
45032: PUSH
45033: LD_VAR 0 3
45037: ARRAY
45038: IN
45039: NOT
45040: IFFALSE 45086
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45042: LD_ADDR_EXP 49
45046: PUSH
45047: LD_EXP 49
45051: PPUSH
45052: LD_VAR 0 3
45056: PUSH
45057: LD_EXP 49
45061: PUSH
45062: LD_VAR 0 3
45066: ARRAY
45067: PUSH
45068: LD_INT 1
45070: PLUS
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PPUSH
45076: LD_VAR 0 1
45080: PPUSH
45081: CALL 53281 0 3
45085: ST_TO_ADDR
// exit ;
45086: POP
45087: POP
45088: GO 45094
// end ; end ;
45090: GO 44894
45092: POP
45093: POP
// end ;
45094: LD_VAR 0 2
45098: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
45099: LD_INT 0
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
// if not mc_bases or not skirmish then
45108: LD_EXP 49
45112: NOT
45113: PUSH
45114: LD_EXP 47
45118: NOT
45119: OR
45120: IFFALSE 45124
// exit ;
45122: GO 45785
// for i = 1 to mc_bases do
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: DOUBLE
45130: LD_INT 1
45132: DEC
45133: ST_TO_ADDR
45134: LD_EXP 49
45138: PUSH
45139: FOR_TO
45140: IFFALSE 45783
// begin if building in mc_construct_list [ i ] then
45142: LD_VAR 0 1
45146: PUSH
45147: LD_EXP 56
45151: PUSH
45152: LD_VAR 0 3
45156: ARRAY
45157: IN
45158: IFFALSE 45781
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45160: LD_ADDR_EXP 56
45164: PUSH
45165: LD_EXP 56
45169: PPUSH
45170: LD_VAR 0 3
45174: PPUSH
45175: LD_EXP 56
45179: PUSH
45180: LD_VAR 0 3
45184: ARRAY
45185: PUSH
45186: LD_VAR 0 1
45190: DIFF
45191: PPUSH
45192: CALL_OW 1
45196: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45197: LD_ADDR_EXP 49
45201: PUSH
45202: LD_EXP 49
45206: PPUSH
45207: LD_VAR 0 3
45211: PUSH
45212: LD_EXP 49
45216: PUSH
45217: LD_VAR 0 3
45221: ARRAY
45222: PUSH
45223: LD_INT 1
45225: PLUS
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PPUSH
45231: LD_VAR 0 1
45235: PPUSH
45236: CALL 53281 0 3
45240: ST_TO_ADDR
// btype := GetBType ( building ) ;
45241: LD_ADDR_VAR 0 5
45245: PUSH
45246: LD_VAR 0 1
45250: PPUSH
45251: CALL_OW 266
45255: ST_TO_ADDR
// side := GetSide ( building ) ;
45256: LD_ADDR_VAR 0 8
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 255
45270: ST_TO_ADDR
// if btype = b_lab then
45271: LD_VAR 0 5
45275: PUSH
45276: LD_INT 6
45278: EQUAL
45279: IFFALSE 45329
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
45281: LD_ADDR_EXP 82
45285: PUSH
45286: LD_EXP 82
45290: PPUSH
45291: LD_VAR 0 3
45295: PUSH
45296: LD_EXP 82
45300: PUSH
45301: LD_VAR 0 3
45305: ARRAY
45306: PUSH
45307: LD_INT 1
45309: PLUS
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PPUSH
45315: LD_VAR 0 1
45319: PPUSH
45320: CALL 53281 0 3
45324: ST_TO_ADDR
// exit ;
45325: POP
45326: POP
45327: GO 45785
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
45329: LD_VAR 0 5
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 4
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: IN
45348: IFFALSE 45472
// begin if btype = b_armoury then
45350: LD_VAR 0 5
45354: PUSH
45355: LD_INT 4
45357: EQUAL
45358: IFFALSE 45368
// btype := b_barracks ;
45360: LD_ADDR_VAR 0 5
45364: PUSH
45365: LD_INT 5
45367: ST_TO_ADDR
// if btype = b_depot then
45368: LD_VAR 0 5
45372: PUSH
45373: LD_INT 0
45375: EQUAL
45376: IFFALSE 45386
// btype := b_warehouse ;
45378: LD_ADDR_VAR 0 5
45382: PUSH
45383: LD_INT 1
45385: ST_TO_ADDR
// if btype = b_workshop then
45386: LD_VAR 0 5
45390: PUSH
45391: LD_INT 2
45393: EQUAL
45394: IFFALSE 45404
// btype := b_factory ;
45396: LD_ADDR_VAR 0 5
45400: PUSH
45401: LD_INT 3
45403: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
45404: LD_VAR 0 5
45408: PPUSH
45409: LD_VAR 0 8
45413: PPUSH
45414: CALL_OW 323
45418: PUSH
45419: LD_INT 1
45421: EQUAL
45422: IFFALSE 45468
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
45424: LD_ADDR_EXP 81
45428: PUSH
45429: LD_EXP 81
45433: PPUSH
45434: LD_VAR 0 3
45438: PUSH
45439: LD_EXP 81
45443: PUSH
45444: LD_VAR 0 3
45448: ARRAY
45449: PUSH
45450: LD_INT 1
45452: PLUS
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PPUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: CALL 53281 0 3
45467: ST_TO_ADDR
// exit ;
45468: POP
45469: POP
45470: GO 45785
// end ; if btype in [ b_bunker , b_turret ] then
45472: LD_VAR 0 5
45476: PUSH
45477: LD_INT 32
45479: PUSH
45480: LD_INT 33
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: IN
45487: IFFALSE 45777
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
45489: LD_ADDR_EXP 57
45493: PUSH
45494: LD_EXP 57
45498: PPUSH
45499: LD_VAR 0 3
45503: PUSH
45504: LD_EXP 57
45508: PUSH
45509: LD_VAR 0 3
45513: ARRAY
45514: PUSH
45515: LD_INT 1
45517: PLUS
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PPUSH
45523: LD_VAR 0 1
45527: PPUSH
45528: CALL 53281 0 3
45532: ST_TO_ADDR
// if btype = b_bunker then
45533: LD_VAR 0 5
45537: PUSH
45538: LD_INT 32
45540: EQUAL
45541: IFFALSE 45777
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
45543: LD_ADDR_EXP 58
45547: PUSH
45548: LD_EXP 58
45552: PPUSH
45553: LD_VAR 0 3
45557: PUSH
45558: LD_EXP 58
45562: PUSH
45563: LD_VAR 0 3
45567: ARRAY
45568: PUSH
45569: LD_INT 1
45571: PLUS
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PPUSH
45577: LD_VAR 0 1
45581: PPUSH
45582: CALL 53281 0 3
45586: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
45587: LD_ADDR_VAR 0 6
45591: PUSH
45592: LD_EXP 49
45596: PUSH
45597: LD_VAR 0 3
45601: ARRAY
45602: PPUSH
45603: LD_INT 25
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 3
45615: PUSH
45616: LD_INT 54
45618: PUSH
45619: EMPTY
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PPUSH
45630: CALL_OW 72
45634: ST_TO_ADDR
// if tmp then
45635: LD_VAR 0 6
45639: IFFALSE 45645
// exit ;
45641: POP
45642: POP
45643: GO 45785
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45645: LD_ADDR_VAR 0 6
45649: PUSH
45650: LD_EXP 49
45654: PUSH
45655: LD_VAR 0 3
45659: ARRAY
45660: PPUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 30
45666: PUSH
45667: LD_INT 4
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 30
45676: PUSH
45677: LD_INT 5
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: PPUSH
45689: CALL_OW 72
45693: ST_TO_ADDR
// if not tmp then
45694: LD_VAR 0 6
45698: NOT
45699: IFFALSE 45705
// exit ;
45701: POP
45702: POP
45703: GO 45785
// for j in tmp do
45705: LD_ADDR_VAR 0 4
45709: PUSH
45710: LD_VAR 0 6
45714: PUSH
45715: FOR_IN
45716: IFFALSE 45775
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
45718: LD_ADDR_VAR 0 7
45722: PUSH
45723: LD_VAR 0 4
45727: PPUSH
45728: CALL_OW 313
45732: PPUSH
45733: LD_INT 25
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PPUSH
45743: CALL_OW 72
45747: ST_TO_ADDR
// if units then
45748: LD_VAR 0 7
45752: IFFALSE 45773
// begin ComExitBuilding ( units [ 1 ] ) ;
45754: LD_VAR 0 7
45758: PUSH
45759: LD_INT 1
45761: ARRAY
45762: PPUSH
45763: CALL_OW 122
// exit ;
45767: POP
45768: POP
45769: POP
45770: POP
45771: GO 45785
// end ; end ;
45773: GO 45715
45775: POP
45776: POP
// end ; end ; exit ;
45777: POP
45778: POP
45779: GO 45785
// end ; end ;
45781: GO 45139
45783: POP
45784: POP
// end ;
45785: LD_VAR 0 2
45789: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
45790: LD_INT 0
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
45797: PPUSH
45798: PPUSH
// if not mc_bases or not skirmish then
45799: LD_EXP 49
45803: NOT
45804: PUSH
45805: LD_EXP 47
45809: NOT
45810: OR
45811: IFFALSE 45815
// exit ;
45813: GO 46046
// btype := GetBType ( building ) ;
45815: LD_ADDR_VAR 0 6
45819: PUSH
45820: LD_VAR 0 1
45824: PPUSH
45825: CALL_OW 266
45829: ST_TO_ADDR
// x := GetX ( building ) ;
45830: LD_ADDR_VAR 0 7
45834: PUSH
45835: LD_VAR 0 1
45839: PPUSH
45840: CALL_OW 250
45844: ST_TO_ADDR
// y := GetY ( building ) ;
45845: LD_ADDR_VAR 0 8
45849: PUSH
45850: LD_VAR 0 1
45854: PPUSH
45855: CALL_OW 251
45859: ST_TO_ADDR
// d := GetDir ( building ) ;
45860: LD_ADDR_VAR 0 9
45864: PUSH
45865: LD_VAR 0 1
45869: PPUSH
45870: CALL_OW 254
45874: ST_TO_ADDR
// for i = 1 to mc_bases do
45875: LD_ADDR_VAR 0 4
45879: PUSH
45880: DOUBLE
45881: LD_INT 1
45883: DEC
45884: ST_TO_ADDR
45885: LD_EXP 49
45889: PUSH
45890: FOR_TO
45891: IFFALSE 46044
// begin if not mc_build_list [ i ] then
45893: LD_EXP 54
45897: PUSH
45898: LD_VAR 0 4
45902: ARRAY
45903: NOT
45904: IFFALSE 45908
// continue ;
45906: GO 45890
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
45908: LD_VAR 0 6
45912: PUSH
45913: LD_VAR 0 7
45917: PUSH
45918: LD_VAR 0 8
45922: PUSH
45923: LD_VAR 0 9
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: PPUSH
45934: LD_EXP 54
45938: PUSH
45939: LD_VAR 0 4
45943: ARRAY
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PPUSH
45949: CALL 59450 0 2
45953: IFFALSE 46042
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
45955: LD_ADDR_EXP 54
45959: PUSH
45960: LD_EXP 54
45964: PPUSH
45965: LD_VAR 0 4
45969: PPUSH
45970: LD_EXP 54
45974: PUSH
45975: LD_VAR 0 4
45979: ARRAY
45980: PPUSH
45981: LD_INT 1
45983: PPUSH
45984: CALL_OW 3
45988: PPUSH
45989: CALL_OW 1
45993: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
45994: LD_ADDR_EXP 56
45998: PUSH
45999: LD_EXP 56
46003: PPUSH
46004: LD_VAR 0 4
46008: PUSH
46009: LD_EXP 56
46013: PUSH
46014: LD_VAR 0 4
46018: ARRAY
46019: PUSH
46020: LD_INT 1
46022: PLUS
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PPUSH
46028: LD_VAR 0 1
46032: PPUSH
46033: CALL 53281 0 3
46037: ST_TO_ADDR
// exit ;
46038: POP
46039: POP
46040: GO 46046
// end ; end ;
46042: GO 45890
46044: POP
46045: POP
// end ;
46046: LD_VAR 0 3
46050: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
46051: LD_INT 0
46053: PPUSH
46054: PPUSH
46055: PPUSH
// if not mc_bases or not skirmish then
46056: LD_EXP 49
46060: NOT
46061: PUSH
46062: LD_EXP 47
46066: NOT
46067: OR
46068: IFFALSE 46072
// exit ;
46070: GO 46262
// for i = 1 to mc_bases do
46072: LD_ADDR_VAR 0 4
46076: PUSH
46077: DOUBLE
46078: LD_INT 1
46080: DEC
46081: ST_TO_ADDR
46082: LD_EXP 49
46086: PUSH
46087: FOR_TO
46088: IFFALSE 46175
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
46090: LD_VAR 0 1
46094: PUSH
46095: LD_EXP 57
46099: PUSH
46100: LD_VAR 0 4
46104: ARRAY
46105: IN
46106: PUSH
46107: LD_VAR 0 1
46111: PUSH
46112: LD_EXP 58
46116: PUSH
46117: LD_VAR 0 4
46121: ARRAY
46122: IN
46123: NOT
46124: AND
46125: IFFALSE 46173
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46127: LD_ADDR_EXP 58
46131: PUSH
46132: LD_EXP 58
46136: PPUSH
46137: LD_VAR 0 4
46141: PUSH
46142: LD_EXP 58
46146: PUSH
46147: LD_VAR 0 4
46151: ARRAY
46152: PUSH
46153: LD_INT 1
46155: PLUS
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PPUSH
46161: LD_VAR 0 1
46165: PPUSH
46166: CALL 53281 0 3
46170: ST_TO_ADDR
// break ;
46171: GO 46175
// end ; end ;
46173: GO 46087
46175: POP
46176: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
46177: LD_VAR 0 1
46181: PPUSH
46182: CALL_OW 257
46186: PUSH
46187: LD_EXP 75
46191: IN
46192: PUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: CALL_OW 266
46202: PUSH
46203: LD_INT 5
46205: EQUAL
46206: AND
46207: PUSH
46208: LD_VAR 0 2
46212: PPUSH
46213: CALL_OW 110
46217: PUSH
46218: LD_INT 18
46220: NONEQUAL
46221: AND
46222: IFFALSE 46262
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
46224: LD_VAR 0 2
46228: PPUSH
46229: CALL_OW 257
46233: PUSH
46234: LD_INT 5
46236: PUSH
46237: LD_INT 8
46239: PUSH
46240: LD_INT 9
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: IN
46248: IFFALSE 46262
// SetClass ( unit , 1 ) ;
46250: LD_VAR 0 2
46254: PPUSH
46255: LD_INT 1
46257: PPUSH
46258: CALL_OW 336
// end ;
46262: LD_VAR 0 3
46266: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
46267: LD_INT 0
46269: PPUSH
46270: PPUSH
// if not mc_bases or not skirmish then
46271: LD_EXP 49
46275: NOT
46276: PUSH
46277: LD_EXP 47
46281: NOT
46282: OR
46283: IFFALSE 46287
// exit ;
46285: GO 46403
// if GetLives ( abandoned_vehicle ) > 250 then
46287: LD_VAR 0 2
46291: PPUSH
46292: CALL_OW 256
46296: PUSH
46297: LD_INT 250
46299: GREATER
46300: IFFALSE 46304
// exit ;
46302: GO 46403
// for i = 1 to mc_bases do
46304: LD_ADDR_VAR 0 6
46308: PUSH
46309: DOUBLE
46310: LD_INT 1
46312: DEC
46313: ST_TO_ADDR
46314: LD_EXP 49
46318: PUSH
46319: FOR_TO
46320: IFFALSE 46401
// begin if driver in mc_bases [ i ] then
46322: LD_VAR 0 1
46326: PUSH
46327: LD_EXP 49
46331: PUSH
46332: LD_VAR 0 6
46336: ARRAY
46337: IN
46338: IFFALSE 46399
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
46340: LD_VAR 0 1
46344: PPUSH
46345: LD_EXP 49
46349: PUSH
46350: LD_VAR 0 6
46354: ARRAY
46355: PPUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 30
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 30
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: PPUSH
46384: CALL_OW 72
46388: PUSH
46389: LD_INT 1
46391: ARRAY
46392: PPUSH
46393: CALL_OW 112
// break ;
46397: GO 46401
// end ; end ;
46399: GO 46319
46401: POP
46402: POP
// end ; end_of_file
46403: LD_VAR 0 5
46407: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46408: LD_INT 0
46410: PPUSH
46411: PPUSH
// if exist_mode then
46412: LD_VAR 0 2
46416: IFFALSE 46441
// unit := CreateCharacter ( prefix & ident ) else
46418: LD_ADDR_VAR 0 5
46422: PUSH
46423: LD_VAR 0 3
46427: PUSH
46428: LD_VAR 0 1
46432: STR
46433: PPUSH
46434: CALL_OW 34
46438: ST_TO_ADDR
46439: GO 46456
// unit := NewCharacter ( ident ) ;
46441: LD_ADDR_VAR 0 5
46445: PUSH
46446: LD_VAR 0 1
46450: PPUSH
46451: CALL_OW 25
46455: ST_TO_ADDR
// result := unit ;
46456: LD_ADDR_VAR 0 4
46460: PUSH
46461: LD_VAR 0 5
46465: ST_TO_ADDR
// end ;
46466: LD_VAR 0 4
46470: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46471: LD_INT 0
46473: PPUSH
46474: PPUSH
// if not side or not nation then
46475: LD_VAR 0 1
46479: NOT
46480: PUSH
46481: LD_VAR 0 2
46485: NOT
46486: OR
46487: IFFALSE 46491
// exit ;
46489: GO 47135
// case nation of nation_american :
46491: LD_VAR 0 2
46495: PUSH
46496: LD_INT 1
46498: DOUBLE
46499: EQUAL
46500: IFTRUE 46504
46502: GO 46678
46504: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
46505: LD_ADDR_VAR 0 4
46509: PUSH
46510: LD_INT 35
46512: PUSH
46513: LD_INT 45
46515: PUSH
46516: LD_INT 46
46518: PUSH
46519: LD_INT 47
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 6
46530: PUSH
46531: LD_INT 15
46533: PUSH
46534: LD_INT 16
46536: PUSH
46537: LD_INT 7
46539: PUSH
46540: LD_INT 12
46542: PUSH
46543: LD_INT 13
46545: PUSH
46546: LD_INT 10
46548: PUSH
46549: LD_INT 14
46551: PUSH
46552: LD_INT 20
46554: PUSH
46555: LD_INT 21
46557: PUSH
46558: LD_INT 22
46560: PUSH
46561: LD_INT 25
46563: PUSH
46564: LD_INT 32
46566: PUSH
46567: LD_INT 27
46569: PUSH
46570: LD_INT 36
46572: PUSH
46573: LD_INT 69
46575: PUSH
46576: LD_INT 39
46578: PUSH
46579: LD_INT 34
46581: PUSH
46582: LD_INT 40
46584: PUSH
46585: LD_INT 48
46587: PUSH
46588: LD_INT 49
46590: PUSH
46591: LD_INT 50
46593: PUSH
46594: LD_INT 51
46596: PUSH
46597: LD_INT 52
46599: PUSH
46600: LD_INT 53
46602: PUSH
46603: LD_INT 54
46605: PUSH
46606: LD_INT 55
46608: PUSH
46609: LD_INT 56
46611: PUSH
46612: LD_INT 57
46614: PUSH
46615: LD_INT 58
46617: PUSH
46618: LD_INT 59
46620: PUSH
46621: LD_INT 60
46623: PUSH
46624: LD_INT 61
46626: PUSH
46627: LD_INT 62
46629: PUSH
46630: LD_INT 80
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
46676: GO 47059
46678: LD_INT 2
46680: DOUBLE
46681: EQUAL
46682: IFTRUE 46686
46684: GO 46868
46686: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
46687: LD_ADDR_VAR 0 4
46691: PUSH
46692: LD_INT 35
46694: PUSH
46695: LD_INT 45
46697: PUSH
46698: LD_INT 46
46700: PUSH
46701: LD_INT 47
46703: PUSH
46704: LD_INT 70
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 11
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: LD_INT 4
46718: PUSH
46719: LD_INT 5
46721: PUSH
46722: LD_INT 6
46724: PUSH
46725: LD_INT 15
46727: PUSH
46728: LD_INT 18
46730: PUSH
46731: LD_INT 7
46733: PUSH
46734: LD_INT 17
46736: PUSH
46737: LD_INT 8
46739: PUSH
46740: LD_INT 20
46742: PUSH
46743: LD_INT 21
46745: PUSH
46746: LD_INT 22
46748: PUSH
46749: LD_INT 72
46751: PUSH
46752: LD_INT 26
46754: PUSH
46755: LD_INT 69
46757: PUSH
46758: LD_INT 39
46760: PUSH
46761: LD_INT 40
46763: PUSH
46764: LD_INT 41
46766: PUSH
46767: LD_INT 42
46769: PUSH
46770: LD_INT 43
46772: PUSH
46773: LD_INT 48
46775: PUSH
46776: LD_INT 49
46778: PUSH
46779: LD_INT 50
46781: PUSH
46782: LD_INT 51
46784: PUSH
46785: LD_INT 52
46787: PUSH
46788: LD_INT 53
46790: PUSH
46791: LD_INT 54
46793: PUSH
46794: LD_INT 55
46796: PUSH
46797: LD_INT 56
46799: PUSH
46800: LD_INT 60
46802: PUSH
46803: LD_INT 61
46805: PUSH
46806: LD_INT 62
46808: PUSH
46809: LD_INT 66
46811: PUSH
46812: LD_INT 67
46814: PUSH
46815: LD_INT 68
46817: PUSH
46818: LD_INT 81
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
46866: GO 47059
46868: LD_INT 3
46870: DOUBLE
46871: EQUAL
46872: IFTRUE 46876
46874: GO 47058
46876: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
46877: LD_ADDR_VAR 0 4
46881: PUSH
46882: LD_INT 46
46884: PUSH
46885: LD_INT 47
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 11
46896: PUSH
46897: LD_INT 9
46899: PUSH
46900: LD_INT 20
46902: PUSH
46903: LD_INT 19
46905: PUSH
46906: LD_INT 21
46908: PUSH
46909: LD_INT 24
46911: PUSH
46912: LD_INT 22
46914: PUSH
46915: LD_INT 25
46917: PUSH
46918: LD_INT 28
46920: PUSH
46921: LD_INT 29
46923: PUSH
46924: LD_INT 30
46926: PUSH
46927: LD_INT 31
46929: PUSH
46930: LD_INT 37
46932: PUSH
46933: LD_INT 38
46935: PUSH
46936: LD_INT 32
46938: PUSH
46939: LD_INT 27
46941: PUSH
46942: LD_INT 33
46944: PUSH
46945: LD_INT 69
46947: PUSH
46948: LD_INT 39
46950: PUSH
46951: LD_INT 34
46953: PUSH
46954: LD_INT 40
46956: PUSH
46957: LD_INT 71
46959: PUSH
46960: LD_INT 23
46962: PUSH
46963: LD_INT 44
46965: PUSH
46966: LD_INT 48
46968: PUSH
46969: LD_INT 49
46971: PUSH
46972: LD_INT 50
46974: PUSH
46975: LD_INT 51
46977: PUSH
46978: LD_INT 52
46980: PUSH
46981: LD_INT 53
46983: PUSH
46984: LD_INT 54
46986: PUSH
46987: LD_INT 55
46989: PUSH
46990: LD_INT 56
46992: PUSH
46993: LD_INT 57
46995: PUSH
46996: LD_INT 58
46998: PUSH
46999: LD_INT 59
47001: PUSH
47002: LD_INT 63
47004: PUSH
47005: LD_INT 64
47007: PUSH
47008: LD_INT 65
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: ST_TO_ADDR
47056: GO 47059
47058: POP
// if state > - 1 and state < 3 then
47059: LD_VAR 0 3
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: GREATER
47068: PUSH
47069: LD_VAR 0 3
47073: PUSH
47074: LD_INT 3
47076: LESS
47077: AND
47078: IFFALSE 47135
// for i in result do
47080: LD_ADDR_VAR 0 5
47084: PUSH
47085: LD_VAR 0 4
47089: PUSH
47090: FOR_IN
47091: IFFALSE 47133
// if GetTech ( i , side ) <> state then
47093: LD_VAR 0 5
47097: PPUSH
47098: LD_VAR 0 1
47102: PPUSH
47103: CALL_OW 321
47107: PUSH
47108: LD_VAR 0 3
47112: NONEQUAL
47113: IFFALSE 47131
// result := result diff i ;
47115: LD_ADDR_VAR 0 4
47119: PUSH
47120: LD_VAR 0 4
47124: PUSH
47125: LD_VAR 0 5
47129: DIFF
47130: ST_TO_ADDR
47131: GO 47090
47133: POP
47134: POP
// end ;
47135: LD_VAR 0 4
47139: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47140: LD_INT 0
47142: PPUSH
47143: PPUSH
47144: PPUSH
// result := true ;
47145: LD_ADDR_VAR 0 3
47149: PUSH
47150: LD_INT 1
47152: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47153: LD_ADDR_VAR 0 5
47157: PUSH
47158: LD_VAR 0 2
47162: PPUSH
47163: CALL_OW 480
47167: ST_TO_ADDR
// if not tmp then
47168: LD_VAR 0 5
47172: NOT
47173: IFFALSE 47177
// exit ;
47175: GO 47226
// for i in tmp do
47177: LD_ADDR_VAR 0 4
47181: PUSH
47182: LD_VAR 0 5
47186: PUSH
47187: FOR_IN
47188: IFFALSE 47224
// if GetTech ( i , side ) <> state_researched then
47190: LD_VAR 0 4
47194: PPUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: CALL_OW 321
47204: PUSH
47205: LD_INT 2
47207: NONEQUAL
47208: IFFALSE 47222
// begin result := false ;
47210: LD_ADDR_VAR 0 3
47214: PUSH
47215: LD_INT 0
47217: ST_TO_ADDR
// exit ;
47218: POP
47219: POP
47220: GO 47226
// end ;
47222: GO 47187
47224: POP
47225: POP
// end ;
47226: LD_VAR 0 3
47230: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47231: LD_INT 0
47233: PPUSH
47234: PPUSH
47235: PPUSH
47236: PPUSH
47237: PPUSH
47238: PPUSH
47239: PPUSH
47240: PPUSH
47241: PPUSH
47242: PPUSH
47243: PPUSH
47244: PPUSH
47245: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47246: LD_VAR 0 1
47250: NOT
47251: PUSH
47252: LD_VAR 0 1
47256: PPUSH
47257: CALL_OW 257
47261: PUSH
47262: LD_INT 9
47264: NONEQUAL
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 47843
// side := GetSide ( unit ) ;
47270: LD_ADDR_VAR 0 9
47274: PUSH
47275: LD_VAR 0 1
47279: PPUSH
47280: CALL_OW 255
47284: ST_TO_ADDR
// tech_space := tech_spacanom ;
47285: LD_ADDR_VAR 0 12
47289: PUSH
47290: LD_INT 29
47292: ST_TO_ADDR
// tech_time := tech_taurad ;
47293: LD_ADDR_VAR 0 13
47297: PUSH
47298: LD_INT 28
47300: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47301: LD_ADDR_VAR 0 11
47305: PUSH
47306: LD_VAR 0 1
47310: PPUSH
47311: CALL_OW 310
47315: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47316: LD_VAR 0 11
47320: PPUSH
47321: CALL_OW 247
47325: PUSH
47326: LD_INT 2
47328: EQUAL
47329: IFFALSE 47333
// exit ;
47331: GO 47843
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47333: LD_ADDR_VAR 0 8
47337: PUSH
47338: LD_INT 81
47340: PUSH
47341: LD_VAR 0 9
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: LD_INT 21
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PPUSH
47371: CALL_OW 69
47375: ST_TO_ADDR
// if not tmp then
47376: LD_VAR 0 8
47380: NOT
47381: IFFALSE 47385
// exit ;
47383: GO 47843
// if in_unit then
47385: LD_VAR 0 11
47389: IFFALSE 47413
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47391: LD_ADDR_VAR 0 10
47395: PUSH
47396: LD_VAR 0 8
47400: PPUSH
47401: LD_VAR 0 11
47405: PPUSH
47406: CALL_OW 74
47410: ST_TO_ADDR
47411: GO 47433
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47413: LD_ADDR_VAR 0 10
47417: PUSH
47418: LD_VAR 0 8
47422: PPUSH
47423: LD_VAR 0 1
47427: PPUSH
47428: CALL_OW 74
47432: ST_TO_ADDR
// if not enemy then
47433: LD_VAR 0 10
47437: NOT
47438: IFFALSE 47442
// exit ;
47440: GO 47843
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47442: LD_VAR 0 11
47446: PUSH
47447: LD_VAR 0 11
47451: PPUSH
47452: LD_VAR 0 10
47456: PPUSH
47457: CALL_OW 296
47461: PUSH
47462: LD_INT 13
47464: GREATER
47465: AND
47466: PUSH
47467: LD_VAR 0 1
47471: PPUSH
47472: LD_VAR 0 10
47476: PPUSH
47477: CALL_OW 296
47481: PUSH
47482: LD_INT 12
47484: GREATER
47485: OR
47486: IFFALSE 47490
// exit ;
47488: GO 47843
// missile := [ 1 ] ;
47490: LD_ADDR_VAR 0 14
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47501: LD_VAR 0 9
47505: PPUSH
47506: LD_VAR 0 12
47510: PPUSH
47511: CALL_OW 325
47515: IFFALSE 47544
// missile := Insert ( missile , missile + 1 , 2 ) ;
47517: LD_ADDR_VAR 0 14
47521: PUSH
47522: LD_VAR 0 14
47526: PPUSH
47527: LD_VAR 0 14
47531: PUSH
47532: LD_INT 1
47534: PLUS
47535: PPUSH
47536: LD_INT 2
47538: PPUSH
47539: CALL_OW 2
47543: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47544: LD_VAR 0 9
47548: PPUSH
47549: LD_VAR 0 13
47553: PPUSH
47554: CALL_OW 325
47558: PUSH
47559: LD_VAR 0 10
47563: PPUSH
47564: CALL_OW 255
47568: PPUSH
47569: LD_VAR 0 13
47573: PPUSH
47574: CALL_OW 325
47578: NOT
47579: AND
47580: IFFALSE 47609
// missile := Insert ( missile , missile + 1 , 3 ) ;
47582: LD_ADDR_VAR 0 14
47586: PUSH
47587: LD_VAR 0 14
47591: PPUSH
47592: LD_VAR 0 14
47596: PUSH
47597: LD_INT 1
47599: PLUS
47600: PPUSH
47601: LD_INT 3
47603: PPUSH
47604: CALL_OW 2
47608: ST_TO_ADDR
// if missile < 2 then
47609: LD_VAR 0 14
47613: PUSH
47614: LD_INT 2
47616: LESS
47617: IFFALSE 47621
// exit ;
47619: GO 47843
// x := GetX ( enemy ) ;
47621: LD_ADDR_VAR 0 4
47625: PUSH
47626: LD_VAR 0 10
47630: PPUSH
47631: CALL_OW 250
47635: ST_TO_ADDR
// y := GetY ( enemy ) ;
47636: LD_ADDR_VAR 0 5
47640: PUSH
47641: LD_VAR 0 10
47645: PPUSH
47646: CALL_OW 251
47650: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47651: LD_ADDR_VAR 0 6
47655: PUSH
47656: LD_VAR 0 4
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PPUSH
47665: LD_INT 1
47667: PPUSH
47668: CALL_OW 12
47672: PLUS
47673: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47674: LD_ADDR_VAR 0 7
47678: PUSH
47679: LD_VAR 0 5
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PPUSH
47688: LD_INT 1
47690: PPUSH
47691: CALL_OW 12
47695: PLUS
47696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47697: LD_VAR 0 6
47701: PPUSH
47702: LD_VAR 0 7
47706: PPUSH
47707: CALL_OW 488
47711: NOT
47712: IFFALSE 47734
// begin _x := x ;
47714: LD_ADDR_VAR 0 6
47718: PUSH
47719: LD_VAR 0 4
47723: ST_TO_ADDR
// _y := y ;
47724: LD_ADDR_VAR 0 7
47728: PUSH
47729: LD_VAR 0 5
47733: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47734: LD_ADDR_VAR 0 3
47738: PUSH
47739: LD_INT 1
47741: PPUSH
47742: LD_VAR 0 14
47746: PPUSH
47747: CALL_OW 12
47751: ST_TO_ADDR
// case i of 1 :
47752: LD_VAR 0 3
47756: PUSH
47757: LD_INT 1
47759: DOUBLE
47760: EQUAL
47761: IFTRUE 47765
47763: GO 47782
47765: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47766: LD_VAR 0 1
47770: PPUSH
47771: LD_VAR 0 10
47775: PPUSH
47776: CALL_OW 115
47780: GO 47843
47782: LD_INT 2
47784: DOUBLE
47785: EQUAL
47786: IFTRUE 47790
47788: GO 47812
47790: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47791: LD_VAR 0 1
47795: PPUSH
47796: LD_VAR 0 6
47800: PPUSH
47801: LD_VAR 0 7
47805: PPUSH
47806: CALL_OW 153
47810: GO 47843
47812: LD_INT 3
47814: DOUBLE
47815: EQUAL
47816: IFTRUE 47820
47818: GO 47842
47820: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47821: LD_VAR 0 1
47825: PPUSH
47826: LD_VAR 0 6
47830: PPUSH
47831: LD_VAR 0 7
47835: PPUSH
47836: CALL_OW 154
47840: GO 47843
47842: POP
// end ;
47843: LD_VAR 0 2
47847: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47848: LD_INT 0
47850: PPUSH
47851: PPUSH
47852: PPUSH
47853: PPUSH
47854: PPUSH
47855: PPUSH
// if not unit or not building then
47856: LD_VAR 0 1
47860: NOT
47861: PUSH
47862: LD_VAR 0 2
47866: NOT
47867: OR
47868: IFFALSE 47872
// exit ;
47870: GO 48030
// x := GetX ( building ) ;
47872: LD_ADDR_VAR 0 5
47876: PUSH
47877: LD_VAR 0 2
47881: PPUSH
47882: CALL_OW 250
47886: ST_TO_ADDR
// y := GetY ( building ) ;
47887: LD_ADDR_VAR 0 6
47891: PUSH
47892: LD_VAR 0 2
47896: PPUSH
47897: CALL_OW 251
47901: ST_TO_ADDR
// for i = 0 to 5 do
47902: LD_ADDR_VAR 0 4
47906: PUSH
47907: DOUBLE
47908: LD_INT 0
47910: DEC
47911: ST_TO_ADDR
47912: LD_INT 5
47914: PUSH
47915: FOR_TO
47916: IFFALSE 48028
// begin _x := ShiftX ( x , i , 3 ) ;
47918: LD_ADDR_VAR 0 7
47922: PUSH
47923: LD_VAR 0 5
47927: PPUSH
47928: LD_VAR 0 4
47932: PPUSH
47933: LD_INT 3
47935: PPUSH
47936: CALL_OW 272
47940: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
47941: LD_ADDR_VAR 0 8
47945: PUSH
47946: LD_VAR 0 6
47950: PPUSH
47951: LD_VAR 0 4
47955: PPUSH
47956: LD_INT 3
47958: PPUSH
47959: CALL_OW 273
47963: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47964: LD_VAR 0 7
47968: PPUSH
47969: LD_VAR 0 8
47973: PPUSH
47974: CALL_OW 488
47978: NOT
47979: IFFALSE 47983
// continue ;
47981: GO 47915
// if HexInfo ( _x , _y ) = 0 then
47983: LD_VAR 0 7
47987: PPUSH
47988: LD_VAR 0 8
47992: PPUSH
47993: CALL_OW 428
47997: PUSH
47998: LD_INT 0
48000: EQUAL
48001: IFFALSE 48026
// begin ComMoveXY ( unit , _x , _y ) ;
48003: LD_VAR 0 1
48007: PPUSH
48008: LD_VAR 0 7
48012: PPUSH
48013: LD_VAR 0 8
48017: PPUSH
48018: CALL_OW 111
// exit ;
48022: POP
48023: POP
48024: GO 48030
// end ; end ;
48026: GO 47915
48028: POP
48029: POP
// end ;
48030: LD_VAR 0 3
48034: RET
// export function ScanBase ( side , base_area ) ; begin
48035: LD_INT 0
48037: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48038: LD_ADDR_VAR 0 3
48042: PUSH
48043: LD_VAR 0 2
48047: PPUSH
48048: LD_INT 81
48050: PUSH
48051: LD_VAR 0 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PPUSH
48060: CALL_OW 70
48064: ST_TO_ADDR
// end ;
48065: LD_VAR 0 3
48069: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
48070: LD_INT 0
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
48077: LD_VAR 0 1
48081: NOT
48082: PUSH
48083: LD_EXP 49
48087: PUSH
48088: LD_VAR 0 1
48092: ARRAY
48093: NOT
48094: OR
48095: PUSH
48096: LD_VAR 0 2
48100: NOT
48101: OR
48102: PUSH
48103: LD_VAR 0 3
48107: NOT
48108: OR
48109: IFFALSE 48113
// exit ;
48111: GO 48563
// side := mc_sides [ base ] ;
48113: LD_ADDR_VAR 0 6
48117: PUSH
48118: LD_EXP 75
48122: PUSH
48123: LD_VAR 0 1
48127: ARRAY
48128: ST_TO_ADDR
// if not side then
48129: LD_VAR 0 6
48133: NOT
48134: IFFALSE 48138
// exit ;
48136: GO 48563
// for i in solds do
48138: LD_ADDR_VAR 0 7
48142: PUSH
48143: LD_VAR 0 2
48147: PUSH
48148: FOR_IN
48149: IFFALSE 48210
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
48151: LD_VAR 0 7
48155: PPUSH
48156: CALL_OW 310
48160: PPUSH
48161: CALL_OW 266
48165: PUSH
48166: LD_INT 32
48168: PUSH
48169: LD_INT 31
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: IN
48176: IFFALSE 48196
// solds := solds diff i else
48178: LD_ADDR_VAR 0 2
48182: PUSH
48183: LD_VAR 0 2
48187: PUSH
48188: LD_VAR 0 7
48192: DIFF
48193: ST_TO_ADDR
48194: GO 48208
// SetTag ( i , 18 ) ;
48196: LD_VAR 0 7
48200: PPUSH
48201: LD_INT 18
48203: PPUSH
48204: CALL_OW 109
48208: GO 48148
48210: POP
48211: POP
// if not solds then
48212: LD_VAR 0 2
48216: NOT
48217: IFFALSE 48221
// exit ;
48219: GO 48563
// repeat wait ( 0 0$1 ) ;
48221: LD_INT 35
48223: PPUSH
48224: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
48228: LD_ADDR_VAR 0 5
48232: PUSH
48233: LD_VAR 0 6
48237: PPUSH
48238: LD_VAR 0 3
48242: PPUSH
48243: CALL 48035 0 2
48247: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
48248: LD_VAR 0 5
48252: NOT
48253: PUSH
48254: LD_VAR 0 5
48258: PUSH
48259: LD_INT 3
48261: GREATER
48262: OR
48263: PUSH
48264: LD_EXP 71
48268: PUSH
48269: LD_VAR 0 1
48273: ARRAY
48274: OR
48275: IFFALSE 48316
// begin for i in solds do
48277: LD_ADDR_VAR 0 7
48281: PUSH
48282: LD_VAR 0 2
48286: PUSH
48287: FOR_IN
48288: IFFALSE 48312
// if HasTask ( i ) then
48290: LD_VAR 0 7
48294: PPUSH
48295: CALL_OW 314
48299: IFFALSE 48310
// ComStop ( i ) ;
48301: LD_VAR 0 7
48305: PPUSH
48306: CALL_OW 141
48310: GO 48287
48312: POP
48313: POP
// break ;
48314: GO 48551
// end ; for i in solds do
48316: LD_ADDR_VAR 0 7
48320: PUSH
48321: LD_VAR 0 2
48325: PUSH
48326: FOR_IN
48327: IFFALSE 48543
// begin if IsInUnit ( i ) then
48329: LD_VAR 0 7
48333: PPUSH
48334: CALL_OW 310
48338: IFFALSE 48349
// ComExitBuilding ( i ) ;
48340: LD_VAR 0 7
48344: PPUSH
48345: CALL_OW 122
// if GetLives ( i ) > 333 then
48349: LD_VAR 0 7
48353: PPUSH
48354: CALL_OW 256
48358: PUSH
48359: LD_INT 333
48361: GREATER
48362: IFFALSE 48390
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48364: LD_VAR 0 7
48368: PPUSH
48369: LD_VAR 0 5
48373: PPUSH
48374: LD_VAR 0 7
48378: PPUSH
48379: CALL_OW 74
48383: PPUSH
48384: CALL_OW 115
48388: GO 48541
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
48390: LD_ADDR_VAR 0 8
48394: PUSH
48395: LD_EXP 49
48399: PUSH
48400: LD_VAR 0 1
48404: ARRAY
48405: PPUSH
48406: LD_INT 2
48408: PUSH
48409: LD_INT 30
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 30
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 30
48431: PUSH
48432: LD_INT 6
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: PPUSH
48445: CALL_OW 72
48449: PPUSH
48450: LD_VAR 0 7
48454: PPUSH
48455: CALL_OW 74
48459: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
48460: LD_VAR 0 7
48464: PPUSH
48465: LD_VAR 0 8
48469: PPUSH
48470: CALL_OW 250
48474: PPUSH
48475: LD_INT 3
48477: PPUSH
48478: LD_INT 5
48480: PPUSH
48481: CALL_OW 272
48485: PPUSH
48486: LD_VAR 0 8
48490: PPUSH
48491: CALL_OW 251
48495: PPUSH
48496: LD_INT 3
48498: PPUSH
48499: LD_INT 5
48501: PPUSH
48502: CALL_OW 273
48506: PPUSH
48507: CALL_OW 111
// SetTag ( i , 0 ) ;
48511: LD_VAR 0 7
48515: PPUSH
48516: LD_INT 0
48518: PPUSH
48519: CALL_OW 109
// solds := solds diff i ;
48523: LD_ADDR_VAR 0 2
48527: PUSH
48528: LD_VAR 0 2
48532: PUSH
48533: LD_VAR 0 7
48537: DIFF
48538: ST_TO_ADDR
// continue ;
48539: GO 48326
// end ; end ;
48541: GO 48326
48543: POP
48544: POP
// until solds ;
48545: LD_VAR 0 2
48549: IFFALSE 48221
// MC_Reset ( base , 18 ) ;
48551: LD_VAR 0 1
48555: PPUSH
48556: LD_INT 18
48558: PPUSH
48559: CALL 20781 0 2
// end ;
48563: LD_VAR 0 4
48567: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
48568: LD_INT 0
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
48586: LD_ADDR_VAR 0 12
48590: PUSH
48591: LD_EXP 49
48595: PUSH
48596: LD_VAR 0 1
48600: ARRAY
48601: PPUSH
48602: LD_INT 25
48604: PUSH
48605: LD_INT 3
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PPUSH
48612: CALL_OW 72
48616: ST_TO_ADDR
// if mc_remote_driver [ base ] then
48617: LD_EXP 89
48621: PUSH
48622: LD_VAR 0 1
48626: ARRAY
48627: IFFALSE 48651
// mechs := mechs diff mc_remote_driver [ base ] ;
48629: LD_ADDR_VAR 0 12
48633: PUSH
48634: LD_VAR 0 12
48638: PUSH
48639: LD_EXP 89
48643: PUSH
48644: LD_VAR 0 1
48648: ARRAY
48649: DIFF
48650: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
48651: LD_ADDR_VAR 0 8
48655: PUSH
48656: LD_EXP 49
48660: PUSH
48661: LD_VAR 0 1
48665: ARRAY
48666: PPUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 25
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 25
48682: PUSH
48683: LD_INT 5
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 25
48692: PUSH
48693: LD_INT 8
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 25
48702: PUSH
48703: LD_INT 9
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: PPUSH
48717: CALL_OW 72
48721: ST_TO_ADDR
// if not defenders and not solds then
48722: LD_VAR 0 2
48726: NOT
48727: PUSH
48728: LD_VAR 0 8
48732: NOT
48733: AND
48734: IFFALSE 48738
// exit ;
48736: GO 50112
// depot_under_attack := false ;
48738: LD_ADDR_VAR 0 16
48742: PUSH
48743: LD_INT 0
48745: ST_TO_ADDR
// sold_defenders := [ ] ;
48746: LD_ADDR_VAR 0 17
48750: PUSH
48751: EMPTY
48752: ST_TO_ADDR
// if mechs then
48753: LD_VAR 0 12
48757: IFFALSE 48886
// for i in defenders do
48759: LD_ADDR_VAR 0 5
48763: PUSH
48764: LD_VAR 0 2
48768: PUSH
48769: FOR_IN
48770: IFFALSE 48884
// begin SetTag ( i , 20 ) ;
48772: LD_VAR 0 5
48776: PPUSH
48777: LD_INT 20
48779: PPUSH
48780: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
48784: LD_VAR 0 5
48788: PPUSH
48789: CALL_OW 263
48793: PUSH
48794: LD_INT 1
48796: EQUAL
48797: PUSH
48798: LD_VAR 0 5
48802: PPUSH
48803: CALL_OW 311
48807: NOT
48808: AND
48809: PUSH
48810: LD_VAR 0 12
48814: AND
48815: IFFALSE 48882
// begin un := mechs [ 1 ] ;
48817: LD_ADDR_VAR 0 10
48821: PUSH
48822: LD_VAR 0 12
48826: PUSH
48827: LD_INT 1
48829: ARRAY
48830: ST_TO_ADDR
// ComExitBuilding ( un ) ;
48831: LD_VAR 0 10
48835: PPUSH
48836: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
48840: LD_VAR 0 10
48844: PPUSH
48845: LD_VAR 0 5
48849: PPUSH
48850: CALL_OW 180
// SetTag ( un , 19 ) ;
48854: LD_VAR 0 10
48858: PPUSH
48859: LD_INT 19
48861: PPUSH
48862: CALL_OW 109
// mechs := mechs diff un ;
48866: LD_ADDR_VAR 0 12
48870: PUSH
48871: LD_VAR 0 12
48875: PUSH
48876: LD_VAR 0 10
48880: DIFF
48881: ST_TO_ADDR
// end ; end ;
48882: GO 48769
48884: POP
48885: POP
// if solds then
48886: LD_VAR 0 8
48890: IFFALSE 48949
// for i in solds do
48892: LD_ADDR_VAR 0 5
48896: PUSH
48897: LD_VAR 0 8
48901: PUSH
48902: FOR_IN
48903: IFFALSE 48947
// if not GetTag ( i ) then
48905: LD_VAR 0 5
48909: PPUSH
48910: CALL_OW 110
48914: NOT
48915: IFFALSE 48945
// begin defenders := defenders union i ;
48917: LD_ADDR_VAR 0 2
48921: PUSH
48922: LD_VAR 0 2
48926: PUSH
48927: LD_VAR 0 5
48931: UNION
48932: ST_TO_ADDR
// SetTag ( i , 18 ) ;
48933: LD_VAR 0 5
48937: PPUSH
48938: LD_INT 18
48940: PPUSH
48941: CALL_OW 109
// end ;
48945: GO 48902
48947: POP
48948: POP
// repeat wait ( 0 0$1 ) ;
48949: LD_INT 35
48951: PPUSH
48952: CALL_OW 67
// enemy := mc_scan [ base ] ;
48956: LD_ADDR_VAR 0 3
48960: PUSH
48961: LD_EXP 72
48965: PUSH
48966: LD_VAR 0 1
48970: ARRAY
48971: ST_TO_ADDR
// for i in defenders do
48972: LD_ADDR_VAR 0 5
48976: PUSH
48977: LD_VAR 0 2
48981: PUSH
48982: FOR_IN
48983: IFFALSE 49713
// begin e := NearestUnitToUnit ( enemy , i ) ;
48985: LD_ADDR_VAR 0 13
48989: PUSH
48990: LD_VAR 0 3
48994: PPUSH
48995: LD_VAR 0 5
48999: PPUSH
49000: CALL_OW 74
49004: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
49005: LD_ADDR_VAR 0 16
49009: PUSH
49010: LD_EXP 49
49014: PUSH
49015: LD_VAR 0 1
49019: ARRAY
49020: PPUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 30
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 30
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: LIST
49048: PPUSH
49049: CALL_OW 72
49053: NOT
49054: PUSH
49055: LD_EXP 49
49059: PUSH
49060: LD_VAR 0 1
49064: ARRAY
49065: PPUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 30
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 30
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: PPUSH
49094: CALL_OW 72
49098: PPUSH
49099: CALL_OW 256
49103: PUSH
49104: LD_INT 600
49106: LESS
49107: OR
49108: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
49109: LD_VAR 0 5
49113: PPUSH
49114: CALL_OW 247
49118: PUSH
49119: LD_INT 2
49121: DOUBLE
49122: EQUAL
49123: IFTRUE 49127
49125: GO 49419
49127: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
49128: LD_VAR 0 5
49132: PPUSH
49133: CALL_OW 256
49137: PUSH
49138: LD_INT 650
49140: GREATER
49141: PUSH
49142: LD_VAR 0 5
49146: PPUSH
49147: LD_VAR 0 13
49151: PPUSH
49152: CALL_OW 296
49156: PUSH
49157: LD_INT 40
49159: LESS
49160: PUSH
49161: LD_VAR 0 13
49165: PPUSH
49166: LD_EXP 74
49170: PUSH
49171: LD_VAR 0 1
49175: ARRAY
49176: PPUSH
49177: CALL_OW 308
49181: OR
49182: AND
49183: IFFALSE 49201
// ComAttackUnit ( i , e ) else
49185: LD_VAR 0 5
49189: PPUSH
49190: LD_VAR 0 13
49194: PPUSH
49195: CALL_OW 115
49199: GO 49302
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
49201: LD_VAR 0 13
49205: PPUSH
49206: LD_EXP 74
49210: PUSH
49211: LD_VAR 0 1
49215: ARRAY
49216: PPUSH
49217: CALL_OW 308
49221: NOT
49222: PUSH
49223: LD_VAR 0 5
49227: PPUSH
49228: LD_VAR 0 13
49232: PPUSH
49233: CALL_OW 296
49237: PUSH
49238: LD_INT 40
49240: GREATEREQUAL
49241: AND
49242: PUSH
49243: LD_VAR 0 5
49247: PPUSH
49248: CALL_OW 256
49252: PUSH
49253: LD_INT 650
49255: LESSEQUAL
49256: OR
49257: PUSH
49258: LD_VAR 0 5
49262: PPUSH
49263: LD_EXP 73
49267: PUSH
49268: LD_VAR 0 1
49272: ARRAY
49273: PPUSH
49274: CALL_OW 308
49278: NOT
49279: AND
49280: IFFALSE 49302
// ComMoveToArea ( i , mc_parking [ base ] ) ;
49282: LD_VAR 0 5
49286: PPUSH
49287: LD_EXP 73
49291: PUSH
49292: LD_VAR 0 1
49296: ARRAY
49297: PPUSH
49298: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
49302: LD_VAR 0 5
49306: PPUSH
49307: CALL_OW 256
49311: PUSH
49312: LD_INT 998
49314: LESS
49315: PUSH
49316: LD_VAR 0 5
49320: PPUSH
49321: CALL_OW 263
49325: PUSH
49326: LD_INT 1
49328: EQUAL
49329: AND
49330: PUSH
49331: LD_VAR 0 5
49335: PPUSH
49336: CALL_OW 311
49340: AND
49341: PUSH
49342: LD_VAR 0 5
49346: PPUSH
49347: LD_EXP 73
49351: PUSH
49352: LD_VAR 0 1
49356: ARRAY
49357: PPUSH
49358: CALL_OW 308
49362: AND
49363: IFFALSE 49417
// begin mech := IsDrivenBy ( i ) ;
49365: LD_ADDR_VAR 0 9
49369: PUSH
49370: LD_VAR 0 5
49374: PPUSH
49375: CALL_OW 311
49379: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
49380: LD_VAR 0 9
49384: PPUSH
49385: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
49389: LD_VAR 0 9
49393: PPUSH
49394: LD_VAR 0 5
49398: PPUSH
49399: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
49403: LD_VAR 0 9
49407: PPUSH
49408: LD_VAR 0 5
49412: PPUSH
49413: CALL_OW 180
// end ; end ; unit_human :
49417: GO 49684
49419: LD_INT 1
49421: DOUBLE
49422: EQUAL
49423: IFTRUE 49427
49425: GO 49683
49427: POP
// begin b := IsInUnit ( i ) ;
49428: LD_ADDR_VAR 0 18
49432: PUSH
49433: LD_VAR 0 5
49437: PPUSH
49438: CALL_OW 310
49442: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
49443: LD_ADDR_VAR 0 19
49447: PUSH
49448: LD_VAR 0 18
49452: NOT
49453: PUSH
49454: LD_VAR 0 18
49458: PPUSH
49459: CALL_OW 266
49463: PUSH
49464: LD_INT 32
49466: PUSH
49467: LD_INT 31
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: IN
49474: OR
49475: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
49476: LD_VAR 0 16
49480: PUSH
49481: LD_VAR 0 2
49485: PPUSH
49486: LD_INT 21
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PPUSH
49496: CALL_OW 72
49500: PUSH
49501: LD_INT 1
49503: LESSEQUAL
49504: OR
49505: PUSH
49506: LD_VAR 0 19
49510: AND
49511: PUSH
49512: LD_VAR 0 5
49516: PUSH
49517: LD_VAR 0 17
49521: IN
49522: NOT
49523: AND
49524: IFFALSE 49617
// begin if b then
49526: LD_VAR 0 18
49530: IFFALSE 49579
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
49532: LD_VAR 0 18
49536: PPUSH
49537: LD_VAR 0 3
49541: PPUSH
49542: LD_VAR 0 18
49546: PPUSH
49547: CALL_OW 74
49551: PPUSH
49552: CALL_OW 296
49556: PUSH
49557: LD_INT 10
49559: LESS
49560: PUSH
49561: LD_VAR 0 18
49565: PPUSH
49566: CALL_OW 461
49570: PUSH
49571: LD_INT 7
49573: NONEQUAL
49574: AND
49575: IFFALSE 49579
// continue ;
49577: GO 48982
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
49579: LD_ADDR_VAR 0 17
49583: PUSH
49584: LD_VAR 0 17
49588: PPUSH
49589: LD_VAR 0 17
49593: PUSH
49594: LD_INT 1
49596: PLUS
49597: PPUSH
49598: LD_VAR 0 5
49602: PPUSH
49603: CALL_OW 1
49607: ST_TO_ADDR
// ComExitBuilding ( i ) ;
49608: LD_VAR 0 5
49612: PPUSH
49613: CALL_OW 122
// end ; if sold_defenders then
49617: LD_VAR 0 17
49621: IFFALSE 49681
// if i in sold_defenders then
49623: LD_VAR 0 5
49627: PUSH
49628: LD_VAR 0 17
49632: IN
49633: IFFALSE 49681
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
49635: LD_VAR 0 5
49639: PPUSH
49640: CALL_OW 314
49644: NOT
49645: PUSH
49646: LD_VAR 0 5
49650: PPUSH
49651: LD_VAR 0 13
49655: PPUSH
49656: CALL_OW 296
49660: PUSH
49661: LD_INT 30
49663: LESS
49664: AND
49665: IFFALSE 49681
// ComAttackUnit ( i , e ) ;
49667: LD_VAR 0 5
49671: PPUSH
49672: LD_VAR 0 13
49676: PPUSH
49677: CALL_OW 115
// end ; end ; end ;
49681: GO 49684
49683: POP
// if IsDead ( i ) then
49684: LD_VAR 0 5
49688: PPUSH
49689: CALL_OW 301
49693: IFFALSE 49711
// defenders := defenders diff i ;
49695: LD_ADDR_VAR 0 2
49699: PUSH
49700: LD_VAR 0 2
49704: PUSH
49705: LD_VAR 0 5
49709: DIFF
49710: ST_TO_ADDR
// end ;
49711: GO 48982
49713: POP
49714: POP
// until not enemy or not defenders ;
49715: LD_VAR 0 3
49719: NOT
49720: PUSH
49721: LD_VAR 0 2
49725: NOT
49726: OR
49727: IFFALSE 48949
// MC_Reset ( base , 18 ) ;
49729: LD_VAR 0 1
49733: PPUSH
49734: LD_INT 18
49736: PPUSH
49737: CALL 20781 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49741: LD_ADDR_VAR 0 2
49745: PUSH
49746: LD_VAR 0 2
49750: PUSH
49751: LD_VAR 0 2
49755: PPUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 25
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 25
49771: PUSH
49772: LD_INT 5
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 25
49781: PUSH
49782: LD_INT 8
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 25
49791: PUSH
49792: LD_INT 9
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: PPUSH
49806: CALL_OW 72
49810: DIFF
49811: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
49812: LD_VAR 0 3
49816: NOT
49817: PUSH
49818: LD_VAR 0 2
49822: PPUSH
49823: LD_INT 21
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PPUSH
49833: CALL_OW 72
49837: AND
49838: IFFALSE 50100
// begin tmp := FilterByTag ( defenders , 19 ) ;
49840: LD_ADDR_VAR 0 11
49844: PUSH
49845: LD_VAR 0 2
49849: PPUSH
49850: LD_INT 19
49852: PPUSH
49853: CALL 86541 0 2
49857: ST_TO_ADDR
// if tmp then
49858: LD_VAR 0 11
49862: IFFALSE 49932
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
49864: LD_ADDR_VAR 0 11
49868: PUSH
49869: LD_VAR 0 11
49873: PPUSH
49874: LD_INT 25
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PPUSH
49884: CALL_OW 72
49888: ST_TO_ADDR
// if tmp then
49889: LD_VAR 0 11
49893: IFFALSE 49932
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
49895: LD_ADDR_EXP 61
49899: PUSH
49900: LD_EXP 61
49904: PPUSH
49905: LD_VAR 0 1
49909: PPUSH
49910: LD_EXP 61
49914: PUSH
49915: LD_VAR 0 1
49919: ARRAY
49920: PUSH
49921: LD_VAR 0 11
49925: UNION
49926: PPUSH
49927: CALL_OW 1
49931: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
49932: LD_VAR 0 1
49936: PPUSH
49937: LD_INT 19
49939: PPUSH
49940: CALL 20781 0 2
// repeat wait ( 0 0$1 ) ;
49944: LD_INT 35
49946: PPUSH
49947: CALL_OW 67
// for i in defenders do
49951: LD_ADDR_VAR 0 5
49955: PUSH
49956: LD_VAR 0 2
49960: PUSH
49961: FOR_IN
49962: IFFALSE 50051
// begin if not IsInArea ( i , mc_parking [ base ] ) then
49964: LD_VAR 0 5
49968: PPUSH
49969: LD_EXP 73
49973: PUSH
49974: LD_VAR 0 1
49978: ARRAY
49979: PPUSH
49980: CALL_OW 308
49984: NOT
49985: IFFALSE 50009
// ComMoveToArea ( i , mc_parking [ base ] ) else
49987: LD_VAR 0 5
49991: PPUSH
49992: LD_EXP 73
49996: PUSH
49997: LD_VAR 0 1
50001: ARRAY
50002: PPUSH
50003: CALL_OW 113
50007: GO 50049
// if GetControl ( i ) = control_manual then
50009: LD_VAR 0 5
50013: PPUSH
50014: CALL_OW 263
50018: PUSH
50019: LD_INT 1
50021: EQUAL
50022: IFFALSE 50049
// if IsDrivenBy ( i ) then
50024: LD_VAR 0 5
50028: PPUSH
50029: CALL_OW 311
50033: IFFALSE 50049
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
50035: LD_VAR 0 5
50039: PPUSH
50040: CALL_OW 311
50044: PPUSH
50045: CALL_OW 121
// end ;
50049: GO 49961
50051: POP
50052: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
50053: LD_VAR 0 2
50057: PPUSH
50058: LD_INT 95
50060: PUSH
50061: LD_EXP 73
50065: PUSH
50066: LD_VAR 0 1
50070: ARRAY
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PPUSH
50076: CALL_OW 72
50080: PUSH
50081: LD_VAR 0 2
50085: EQUAL
50086: PUSH
50087: LD_EXP 72
50091: PUSH
50092: LD_VAR 0 1
50096: ARRAY
50097: OR
50098: IFFALSE 49944
// end ; MC_Reset ( base , 20 ) ;
50100: LD_VAR 0 1
50104: PPUSH
50105: LD_INT 20
50107: PPUSH
50108: CALL 20781 0 2
// end ;
50112: LD_VAR 0 4
50116: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
50117: LD_INT 0
50119: PPUSH
50120: PPUSH
50121: PPUSH
50122: PPUSH
// result := false ;
50123: LD_ADDR_VAR 0 2
50127: PUSH
50128: LD_INT 0
50130: ST_TO_ADDR
// side := GetSide ( unit ) ;
50131: LD_ADDR_VAR 0 3
50135: PUSH
50136: LD_VAR 0 1
50140: PPUSH
50141: CALL_OW 255
50145: ST_TO_ADDR
// nat := GetNation ( unit ) ;
50146: LD_ADDR_VAR 0 4
50150: PUSH
50151: LD_VAR 0 1
50155: PPUSH
50156: CALL_OW 248
50160: ST_TO_ADDR
// case nat of 1 :
50161: LD_VAR 0 4
50165: PUSH
50166: LD_INT 1
50168: DOUBLE
50169: EQUAL
50170: IFTRUE 50174
50172: GO 50185
50174: POP
// tech := tech_lassight ; 2 :
50175: LD_ADDR_VAR 0 5
50179: PUSH
50180: LD_INT 12
50182: ST_TO_ADDR
50183: GO 50224
50185: LD_INT 2
50187: DOUBLE
50188: EQUAL
50189: IFTRUE 50193
50191: GO 50204
50193: POP
// tech := tech_mortar ; 3 :
50194: LD_ADDR_VAR 0 5
50198: PUSH
50199: LD_INT 41
50201: ST_TO_ADDR
50202: GO 50224
50204: LD_INT 3
50206: DOUBLE
50207: EQUAL
50208: IFTRUE 50212
50210: GO 50223
50212: POP
// tech := tech_bazooka ; end ;
50213: LD_ADDR_VAR 0 5
50217: PUSH
50218: LD_INT 44
50220: ST_TO_ADDR
50221: GO 50224
50223: POP
// if Researched ( side , tech ) then
50224: LD_VAR 0 3
50228: PPUSH
50229: LD_VAR 0 5
50233: PPUSH
50234: CALL_OW 325
50238: IFFALSE 50265
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
50240: LD_ADDR_VAR 0 2
50244: PUSH
50245: LD_INT 5
50247: PUSH
50248: LD_INT 8
50250: PUSH
50251: LD_INT 9
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: PUSH
50259: LD_VAR 0 4
50263: ARRAY
50264: ST_TO_ADDR
// end ;
50265: LD_VAR 0 2
50269: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
50270: LD_INT 0
50272: PPUSH
50273: PPUSH
50274: PPUSH
// if not mines then
50275: LD_VAR 0 2
50279: NOT
50280: IFFALSE 50284
// exit ;
50282: GO 50428
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50284: LD_ADDR_VAR 0 5
50288: PUSH
50289: LD_INT 81
50291: PUSH
50292: LD_VAR 0 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 21
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PPUSH
50322: CALL_OW 69
50326: ST_TO_ADDR
// for i in mines do
50327: LD_ADDR_VAR 0 4
50331: PUSH
50332: LD_VAR 0 2
50336: PUSH
50337: FOR_IN
50338: IFFALSE 50426
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
50340: LD_VAR 0 4
50344: PUSH
50345: LD_INT 1
50347: ARRAY
50348: PPUSH
50349: LD_VAR 0 4
50353: PUSH
50354: LD_INT 2
50356: ARRAY
50357: PPUSH
50358: CALL_OW 458
50362: NOT
50363: IFFALSE 50367
// continue ;
50365: GO 50337
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
50367: LD_VAR 0 4
50371: PUSH
50372: LD_INT 1
50374: ARRAY
50375: PPUSH
50376: LD_VAR 0 4
50380: PUSH
50381: LD_INT 2
50383: ARRAY
50384: PPUSH
50385: CALL_OW 428
50389: PUSH
50390: LD_VAR 0 5
50394: IN
50395: IFFALSE 50424
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
50397: LD_VAR 0 4
50401: PUSH
50402: LD_INT 1
50404: ARRAY
50405: PPUSH
50406: LD_VAR 0 4
50410: PUSH
50411: LD_INT 2
50413: ARRAY
50414: PPUSH
50415: LD_VAR 0 1
50419: PPUSH
50420: CALL_OW 456
// end ;
50424: GO 50337
50426: POP
50427: POP
// end ;
50428: LD_VAR 0 3
50432: RET
// export function Count ( array ) ; var i ; begin
50433: LD_INT 0
50435: PPUSH
50436: PPUSH
// result := 0 ;
50437: LD_ADDR_VAR 0 2
50441: PUSH
50442: LD_INT 0
50444: ST_TO_ADDR
// for i in array do
50445: LD_ADDR_VAR 0 3
50449: PUSH
50450: LD_VAR 0 1
50454: PUSH
50455: FOR_IN
50456: IFFALSE 50480
// if i then
50458: LD_VAR 0 3
50462: IFFALSE 50478
// result := result + 1 ;
50464: LD_ADDR_VAR 0 2
50468: PUSH
50469: LD_VAR 0 2
50473: PUSH
50474: LD_INT 1
50476: PLUS
50477: ST_TO_ADDR
50478: GO 50455
50480: POP
50481: POP
// end ;
50482: LD_VAR 0 2
50486: RET
// export function IsEmpty ( building ) ; begin
50487: LD_INT 0
50489: PPUSH
// if not building then
50490: LD_VAR 0 1
50494: NOT
50495: IFFALSE 50499
// exit ;
50497: GO 50542
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
50499: LD_ADDR_VAR 0 2
50503: PUSH
50504: LD_VAR 0 1
50508: PUSH
50509: LD_INT 22
50511: PUSH
50512: LD_VAR 0 1
50516: PPUSH
50517: CALL_OW 255
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 58
50528: PUSH
50529: EMPTY
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PPUSH
50536: CALL_OW 69
50540: IN
50541: ST_TO_ADDR
// end ;
50542: LD_VAR 0 2
50546: RET
// export function IsNotFull ( building ) ; begin
50547: LD_INT 0
50549: PPUSH
// if not building then
50550: LD_VAR 0 1
50554: NOT
50555: IFFALSE 50559
// exit ;
50557: GO 50578
// result := UnitsInside ( building ) < 6 ;
50559: LD_ADDR_VAR 0 2
50563: PUSH
50564: LD_VAR 0 1
50568: PPUSH
50569: CALL_OW 313
50573: PUSH
50574: LD_INT 6
50576: LESS
50577: ST_TO_ADDR
// end ;
50578: LD_VAR 0 2
50582: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
50583: LD_INT 0
50585: PPUSH
50586: PPUSH
50587: PPUSH
50588: PPUSH
// tmp := [ ] ;
50589: LD_ADDR_VAR 0 3
50593: PUSH
50594: EMPTY
50595: ST_TO_ADDR
// list := [ ] ;
50596: LD_ADDR_VAR 0 5
50600: PUSH
50601: EMPTY
50602: ST_TO_ADDR
// for i = 16 to 25 do
50603: LD_ADDR_VAR 0 4
50607: PUSH
50608: DOUBLE
50609: LD_INT 16
50611: DEC
50612: ST_TO_ADDR
50613: LD_INT 25
50615: PUSH
50616: FOR_TO
50617: IFFALSE 50690
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
50619: LD_ADDR_VAR 0 3
50623: PUSH
50624: LD_VAR 0 3
50628: PUSH
50629: LD_INT 22
50631: PUSH
50632: LD_VAR 0 1
50636: PPUSH
50637: CALL_OW 255
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 91
50648: PUSH
50649: LD_VAR 0 1
50653: PUSH
50654: LD_INT 6
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 30
50664: PUSH
50665: LD_VAR 0 4
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: PUSH
50679: EMPTY
50680: LIST
50681: PPUSH
50682: CALL_OW 69
50686: ADD
50687: ST_TO_ADDR
50688: GO 50616
50690: POP
50691: POP
// for i = 1 to tmp do
50692: LD_ADDR_VAR 0 4
50696: PUSH
50697: DOUBLE
50698: LD_INT 1
50700: DEC
50701: ST_TO_ADDR
50702: LD_VAR 0 3
50706: PUSH
50707: FOR_TO
50708: IFFALSE 50796
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
50710: LD_ADDR_VAR 0 5
50714: PUSH
50715: LD_VAR 0 5
50719: PUSH
50720: LD_VAR 0 3
50724: PUSH
50725: LD_VAR 0 4
50729: ARRAY
50730: PPUSH
50731: CALL_OW 266
50735: PUSH
50736: LD_VAR 0 3
50740: PUSH
50741: LD_VAR 0 4
50745: ARRAY
50746: PPUSH
50747: CALL_OW 250
50751: PUSH
50752: LD_VAR 0 3
50756: PUSH
50757: LD_VAR 0 4
50761: ARRAY
50762: PPUSH
50763: CALL_OW 251
50767: PUSH
50768: LD_VAR 0 3
50772: PUSH
50773: LD_VAR 0 4
50777: ARRAY
50778: PPUSH
50779: CALL_OW 254
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: ADD
50793: ST_TO_ADDR
50794: GO 50707
50796: POP
50797: POP
// result := list ;
50798: LD_ADDR_VAR 0 2
50802: PUSH
50803: LD_VAR 0 5
50807: ST_TO_ADDR
// end ;
50808: LD_VAR 0 2
50812: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
50813: LD_INT 0
50815: PPUSH
50816: PPUSH
50817: PPUSH
50818: PPUSH
50819: PPUSH
50820: PPUSH
50821: PPUSH
// if not factory then
50822: LD_VAR 0 1
50826: NOT
50827: IFFALSE 50831
// exit ;
50829: GO 51424
// if control = control_apeman then
50831: LD_VAR 0 4
50835: PUSH
50836: LD_INT 5
50838: EQUAL
50839: IFFALSE 50948
// begin tmp := UnitsInside ( factory ) ;
50841: LD_ADDR_VAR 0 8
50845: PUSH
50846: LD_VAR 0 1
50850: PPUSH
50851: CALL_OW 313
50855: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
50856: LD_VAR 0 8
50860: PPUSH
50861: LD_INT 25
50863: PUSH
50864: LD_INT 12
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PPUSH
50871: CALL_OW 72
50875: NOT
50876: IFFALSE 50886
// control := control_manual ;
50878: LD_ADDR_VAR 0 4
50882: PUSH
50883: LD_INT 1
50885: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
50886: LD_ADDR_VAR 0 8
50890: PUSH
50891: LD_VAR 0 1
50895: PPUSH
50896: CALL 50583 0 1
50900: ST_TO_ADDR
// if tmp then
50901: LD_VAR 0 8
50905: IFFALSE 50948
// begin for i in tmp do
50907: LD_ADDR_VAR 0 7
50911: PUSH
50912: LD_VAR 0 8
50916: PUSH
50917: FOR_IN
50918: IFFALSE 50946
// if i [ 1 ] = b_ext_radio then
50920: LD_VAR 0 7
50924: PUSH
50925: LD_INT 1
50927: ARRAY
50928: PUSH
50929: LD_INT 22
50931: EQUAL
50932: IFFALSE 50944
// begin control := control_remote ;
50934: LD_ADDR_VAR 0 4
50938: PUSH
50939: LD_INT 2
50941: ST_TO_ADDR
// break ;
50942: GO 50946
// end ;
50944: GO 50917
50946: POP
50947: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50948: LD_VAR 0 1
50952: PPUSH
50953: LD_VAR 0 2
50957: PPUSH
50958: LD_VAR 0 3
50962: PPUSH
50963: LD_VAR 0 4
50967: PPUSH
50968: LD_VAR 0 5
50972: PPUSH
50973: CALL_OW 448
50977: IFFALSE 51012
// begin result := [ chassis , engine , control , weapon ] ;
50979: LD_ADDR_VAR 0 6
50983: PUSH
50984: LD_VAR 0 2
50988: PUSH
50989: LD_VAR 0 3
50993: PUSH
50994: LD_VAR 0 4
50998: PUSH
50999: LD_VAR 0 5
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// exit ;
51010: GO 51424
// end ; _chassis := AvailableChassisList ( factory ) ;
51012: LD_ADDR_VAR 0 9
51016: PUSH
51017: LD_VAR 0 1
51021: PPUSH
51022: CALL_OW 475
51026: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
51027: LD_ADDR_VAR 0 11
51031: PUSH
51032: LD_VAR 0 1
51036: PPUSH
51037: CALL_OW 476
51041: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
51042: LD_ADDR_VAR 0 12
51046: PUSH
51047: LD_VAR 0 1
51051: PPUSH
51052: CALL_OW 477
51056: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
51057: LD_ADDR_VAR 0 10
51061: PUSH
51062: LD_VAR 0 1
51066: PPUSH
51067: CALL_OW 478
51071: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
51072: LD_VAR 0 9
51076: NOT
51077: PUSH
51078: LD_VAR 0 11
51082: NOT
51083: OR
51084: PUSH
51085: LD_VAR 0 12
51089: NOT
51090: OR
51091: PUSH
51092: LD_VAR 0 10
51096: NOT
51097: OR
51098: IFFALSE 51133
// begin result := [ chassis , engine , control , weapon ] ;
51100: LD_ADDR_VAR 0 6
51104: PUSH
51105: LD_VAR 0 2
51109: PUSH
51110: LD_VAR 0 3
51114: PUSH
51115: LD_VAR 0 4
51119: PUSH
51120: LD_VAR 0 5
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: ST_TO_ADDR
// exit ;
51131: GO 51424
// end ; if not chassis in _chassis then
51133: LD_VAR 0 2
51137: PUSH
51138: LD_VAR 0 9
51142: IN
51143: NOT
51144: IFFALSE 51170
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
51146: LD_ADDR_VAR 0 2
51150: PUSH
51151: LD_VAR 0 9
51155: PUSH
51156: LD_INT 1
51158: PPUSH
51159: LD_VAR 0 9
51163: PPUSH
51164: CALL_OW 12
51168: ARRAY
51169: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
51170: LD_VAR 0 2
51174: PPUSH
51175: LD_VAR 0 3
51179: PPUSH
51180: CALL 51429 0 2
51184: NOT
51185: IFFALSE 51244
// repeat engine := _engine [ 1 ] ;
51187: LD_ADDR_VAR 0 3
51191: PUSH
51192: LD_VAR 0 11
51196: PUSH
51197: LD_INT 1
51199: ARRAY
51200: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
51201: LD_ADDR_VAR 0 11
51205: PUSH
51206: LD_VAR 0 11
51210: PPUSH
51211: LD_INT 1
51213: PPUSH
51214: CALL_OW 3
51218: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
51219: LD_VAR 0 2
51223: PPUSH
51224: LD_VAR 0 3
51228: PPUSH
51229: CALL 51429 0 2
51233: PUSH
51234: LD_VAR 0 11
51238: PUSH
51239: EMPTY
51240: EQUAL
51241: OR
51242: IFFALSE 51187
// if not control in _control then
51244: LD_VAR 0 4
51248: PUSH
51249: LD_VAR 0 12
51253: IN
51254: NOT
51255: IFFALSE 51281
// control := _control [ rand ( 1 , _control ) ] ;
51257: LD_ADDR_VAR 0 4
51261: PUSH
51262: LD_VAR 0 12
51266: PUSH
51267: LD_INT 1
51269: PPUSH
51270: LD_VAR 0 12
51274: PPUSH
51275: CALL_OW 12
51279: ARRAY
51280: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
51281: LD_VAR 0 2
51285: PPUSH
51286: LD_VAR 0 5
51290: PPUSH
51291: CALL 51649 0 2
51295: NOT
51296: IFFALSE 51355
// repeat weapon := _weapon [ 1 ] ;
51298: LD_ADDR_VAR 0 5
51302: PUSH
51303: LD_VAR 0 10
51307: PUSH
51308: LD_INT 1
51310: ARRAY
51311: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
51312: LD_ADDR_VAR 0 10
51316: PUSH
51317: LD_VAR 0 10
51321: PPUSH
51322: LD_INT 1
51324: PPUSH
51325: CALL_OW 3
51329: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
51330: LD_VAR 0 2
51334: PPUSH
51335: LD_VAR 0 5
51339: PPUSH
51340: CALL 51649 0 2
51344: PUSH
51345: LD_VAR 0 10
51349: PUSH
51350: EMPTY
51351: EQUAL
51352: OR
51353: IFFALSE 51298
// result := [ ] ;
51355: LD_ADDR_VAR 0 6
51359: PUSH
51360: EMPTY
51361: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51362: LD_VAR 0 1
51366: PPUSH
51367: LD_VAR 0 2
51371: PPUSH
51372: LD_VAR 0 3
51376: PPUSH
51377: LD_VAR 0 4
51381: PPUSH
51382: LD_VAR 0 5
51386: PPUSH
51387: CALL_OW 448
51391: IFFALSE 51424
// result := [ chassis , engine , control , weapon ] ;
51393: LD_ADDR_VAR 0 6
51397: PUSH
51398: LD_VAR 0 2
51402: PUSH
51403: LD_VAR 0 3
51407: PUSH
51408: LD_VAR 0 4
51412: PUSH
51413: LD_VAR 0 5
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: ST_TO_ADDR
// end ;
51424: LD_VAR 0 6
51428: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
51429: LD_INT 0
51431: PPUSH
// if not chassis or not engine then
51432: LD_VAR 0 1
51436: NOT
51437: PUSH
51438: LD_VAR 0 2
51442: NOT
51443: OR
51444: IFFALSE 51448
// exit ;
51446: GO 51644
// case engine of engine_solar :
51448: LD_VAR 0 2
51452: PUSH
51453: LD_INT 2
51455: DOUBLE
51456: EQUAL
51457: IFTRUE 51461
51459: GO 51499
51461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
51462: LD_ADDR_VAR 0 3
51466: PUSH
51467: LD_INT 11
51469: PUSH
51470: LD_INT 12
51472: PUSH
51473: LD_INT 13
51475: PUSH
51476: LD_INT 14
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: ST_TO_ADDR
51497: GO 51628
51499: LD_INT 1
51501: DOUBLE
51502: EQUAL
51503: IFTRUE 51507
51505: GO 51569
51507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
51508: LD_ADDR_VAR 0 3
51512: PUSH
51513: LD_INT 11
51515: PUSH
51516: LD_INT 12
51518: PUSH
51519: LD_INT 13
51521: PUSH
51522: LD_INT 14
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: LD_INT 5
51539: PUSH
51540: LD_INT 21
51542: PUSH
51543: LD_INT 23
51545: PUSH
51546: LD_INT 22
51548: PUSH
51549: LD_INT 24
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
51567: GO 51628
51569: LD_INT 3
51571: DOUBLE
51572: EQUAL
51573: IFTRUE 51577
51575: GO 51627
51577: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51578: LD_ADDR_VAR 0 3
51582: PUSH
51583: LD_INT 13
51585: PUSH
51586: LD_INT 14
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: LD_INT 5
51600: PUSH
51601: LD_INT 21
51603: PUSH
51604: LD_INT 22
51606: PUSH
51607: LD_INT 23
51609: PUSH
51610: LD_INT 24
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
51625: GO 51628
51627: POP
// result := ( chassis in result ) ;
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_VAR 0 1
51637: PUSH
51638: LD_VAR 0 3
51642: IN
51643: ST_TO_ADDR
// end ;
51644: LD_VAR 0 3
51648: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
51649: LD_INT 0
51651: PPUSH
// if not chassis or not weapon then
51652: LD_VAR 0 1
51656: NOT
51657: PUSH
51658: LD_VAR 0 2
51662: NOT
51663: OR
51664: IFFALSE 51668
// exit ;
51666: GO 52694
// case weapon of us_machine_gun :
51668: LD_VAR 0 2
51672: PUSH
51673: LD_INT 2
51675: DOUBLE
51676: EQUAL
51677: IFTRUE 51681
51679: GO 51711
51681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
51682: LD_ADDR_VAR 0 3
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: LD_INT 4
51698: PUSH
51699: LD_INT 5
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: ST_TO_ADDR
51709: GO 52678
51711: LD_INT 3
51713: DOUBLE
51714: EQUAL
51715: IFTRUE 51719
51717: GO 51749
51719: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
51720: LD_ADDR_VAR 0 3
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 4
51736: PUSH
51737: LD_INT 5
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
51747: GO 52678
51749: LD_INT 11
51751: DOUBLE
51752: EQUAL
51753: IFTRUE 51757
51755: GO 51787
51757: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
51758: LD_ADDR_VAR 0 3
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: LD_INT 4
51774: PUSH
51775: LD_INT 5
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
51785: GO 52678
51787: LD_INT 4
51789: DOUBLE
51790: EQUAL
51791: IFTRUE 51795
51793: GO 51821
51795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
51796: LD_ADDR_VAR 0 3
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: LD_INT 4
51809: PUSH
51810: LD_INT 5
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: ST_TO_ADDR
51819: GO 52678
51821: LD_INT 5
51823: DOUBLE
51824: EQUAL
51825: IFTRUE 51829
51827: GO 51855
51829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
51830: LD_ADDR_VAR 0 3
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: LD_INT 4
51843: PUSH
51844: LD_INT 5
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: ST_TO_ADDR
51853: GO 52678
51855: LD_INT 9
51857: DOUBLE
51858: EQUAL
51859: IFTRUE 51863
51861: GO 51889
51863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
51864: LD_ADDR_VAR 0 3
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: LD_INT 4
51877: PUSH
51878: LD_INT 5
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
51887: GO 52678
51889: LD_INT 7
51891: DOUBLE
51892: EQUAL
51893: IFTRUE 51897
51895: GO 51923
51897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
51898: LD_ADDR_VAR 0 3
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: LD_INT 4
51911: PUSH
51912: LD_INT 5
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
51921: GO 52678
51923: LD_INT 12
51925: DOUBLE
51926: EQUAL
51927: IFTRUE 51931
51929: GO 51957
51931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
51932: LD_ADDR_VAR 0 3
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: LD_INT 4
51945: PUSH
51946: LD_INT 5
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
51955: GO 52678
51957: LD_INT 13
51959: DOUBLE
51960: EQUAL
51961: IFTRUE 51965
51963: GO 51991
51965: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
51966: LD_ADDR_VAR 0 3
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: LD_INT 4
51979: PUSH
51980: LD_INT 5
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: ST_TO_ADDR
51989: GO 52678
51991: LD_INT 14
51993: DOUBLE
51994: EQUAL
51995: IFTRUE 51999
51997: GO 52017
51999: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
52000: LD_ADDR_VAR 0 3
52004: PUSH
52005: LD_INT 4
52007: PUSH
52008: LD_INT 5
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: ST_TO_ADDR
52015: GO 52678
52017: LD_INT 6
52019: DOUBLE
52020: EQUAL
52021: IFTRUE 52025
52023: GO 52043
52025: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
52026: LD_ADDR_VAR 0 3
52030: PUSH
52031: LD_INT 4
52033: PUSH
52034: LD_INT 5
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: ST_TO_ADDR
52041: GO 52678
52043: LD_INT 10
52045: DOUBLE
52046: EQUAL
52047: IFTRUE 52051
52049: GO 52069
52051: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
52052: LD_ADDR_VAR 0 3
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: LD_INT 5
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: ST_TO_ADDR
52067: GO 52678
52069: LD_INT 22
52071: DOUBLE
52072: EQUAL
52073: IFTRUE 52077
52075: GO 52103
52077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
52078: LD_ADDR_VAR 0 3
52082: PUSH
52083: LD_INT 11
52085: PUSH
52086: LD_INT 12
52088: PUSH
52089: LD_INT 13
52091: PUSH
52092: LD_INT 14
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
52101: GO 52678
52103: LD_INT 23
52105: DOUBLE
52106: EQUAL
52107: IFTRUE 52111
52109: GO 52137
52111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
52112: LD_ADDR_VAR 0 3
52116: PUSH
52117: LD_INT 11
52119: PUSH
52120: LD_INT 12
52122: PUSH
52123: LD_INT 13
52125: PUSH
52126: LD_INT 14
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
52135: GO 52678
52137: LD_INT 24
52139: DOUBLE
52140: EQUAL
52141: IFTRUE 52145
52143: GO 52171
52145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
52146: LD_ADDR_VAR 0 3
52150: PUSH
52151: LD_INT 11
52153: PUSH
52154: LD_INT 12
52156: PUSH
52157: LD_INT 13
52159: PUSH
52160: LD_INT 14
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
52169: GO 52678
52171: LD_INT 30
52173: DOUBLE
52174: EQUAL
52175: IFTRUE 52179
52177: GO 52205
52179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
52180: LD_ADDR_VAR 0 3
52184: PUSH
52185: LD_INT 11
52187: PUSH
52188: LD_INT 12
52190: PUSH
52191: LD_INT 13
52193: PUSH
52194: LD_INT 14
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: ST_TO_ADDR
52203: GO 52678
52205: LD_INT 25
52207: DOUBLE
52208: EQUAL
52209: IFTRUE 52213
52211: GO 52231
52213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
52214: LD_ADDR_VAR 0 3
52218: PUSH
52219: LD_INT 13
52221: PUSH
52222: LD_INT 14
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: ST_TO_ADDR
52229: GO 52678
52231: LD_INT 27
52233: DOUBLE
52234: EQUAL
52235: IFTRUE 52239
52237: GO 52257
52239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
52240: LD_ADDR_VAR 0 3
52244: PUSH
52245: LD_INT 13
52247: PUSH
52248: LD_INT 14
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: ST_TO_ADDR
52255: GO 52678
52257: LD_INT 28
52259: DOUBLE
52260: EQUAL
52261: IFTRUE 52265
52263: GO 52283
52265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
52266: LD_ADDR_VAR 0 3
52270: PUSH
52271: LD_INT 13
52273: PUSH
52274: LD_INT 14
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: ST_TO_ADDR
52281: GO 52678
52283: LD_INT 29
52285: DOUBLE
52286: EQUAL
52287: IFTRUE 52291
52289: GO 52309
52291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
52292: LD_ADDR_VAR 0 3
52296: PUSH
52297: LD_INT 13
52299: PUSH
52300: LD_INT 14
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: ST_TO_ADDR
52307: GO 52678
52309: LD_INT 31
52311: DOUBLE
52312: EQUAL
52313: IFTRUE 52317
52315: GO 52335
52317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
52318: LD_ADDR_VAR 0 3
52322: PUSH
52323: LD_INT 13
52325: PUSH
52326: LD_INT 14
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: ST_TO_ADDR
52333: GO 52678
52335: LD_INT 26
52337: DOUBLE
52338: EQUAL
52339: IFTRUE 52343
52341: GO 52361
52343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
52344: LD_ADDR_VAR 0 3
52348: PUSH
52349: LD_INT 13
52351: PUSH
52352: LD_INT 14
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: ST_TO_ADDR
52359: GO 52678
52361: LD_INT 42
52363: DOUBLE
52364: EQUAL
52365: IFTRUE 52369
52367: GO 52395
52369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
52370: LD_ADDR_VAR 0 3
52374: PUSH
52375: LD_INT 21
52377: PUSH
52378: LD_INT 22
52380: PUSH
52381: LD_INT 23
52383: PUSH
52384: LD_INT 24
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
52393: GO 52678
52395: LD_INT 43
52397: DOUBLE
52398: EQUAL
52399: IFTRUE 52403
52401: GO 52429
52403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
52404: LD_ADDR_VAR 0 3
52408: PUSH
52409: LD_INT 21
52411: PUSH
52412: LD_INT 22
52414: PUSH
52415: LD_INT 23
52417: PUSH
52418: LD_INT 24
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
52427: GO 52678
52429: LD_INT 44
52431: DOUBLE
52432: EQUAL
52433: IFTRUE 52437
52435: GO 52463
52437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
52438: LD_ADDR_VAR 0 3
52442: PUSH
52443: LD_INT 21
52445: PUSH
52446: LD_INT 22
52448: PUSH
52449: LD_INT 23
52451: PUSH
52452: LD_INT 24
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
52461: GO 52678
52463: LD_INT 45
52465: DOUBLE
52466: EQUAL
52467: IFTRUE 52471
52469: GO 52497
52471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
52472: LD_ADDR_VAR 0 3
52476: PUSH
52477: LD_INT 21
52479: PUSH
52480: LD_INT 22
52482: PUSH
52483: LD_INT 23
52485: PUSH
52486: LD_INT 24
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: ST_TO_ADDR
52495: GO 52678
52497: LD_INT 49
52499: DOUBLE
52500: EQUAL
52501: IFTRUE 52505
52503: GO 52531
52505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
52506: LD_ADDR_VAR 0 3
52510: PUSH
52511: LD_INT 21
52513: PUSH
52514: LD_INT 22
52516: PUSH
52517: LD_INT 23
52519: PUSH
52520: LD_INT 24
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
52529: GO 52678
52531: LD_INT 51
52533: DOUBLE
52534: EQUAL
52535: IFTRUE 52539
52537: GO 52565
52539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
52540: LD_ADDR_VAR 0 3
52544: PUSH
52545: LD_INT 21
52547: PUSH
52548: LD_INT 22
52550: PUSH
52551: LD_INT 23
52553: PUSH
52554: LD_INT 24
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
52563: GO 52678
52565: LD_INT 52
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52573
52571: GO 52599
52573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
52574: LD_ADDR_VAR 0 3
52578: PUSH
52579: LD_INT 21
52581: PUSH
52582: LD_INT 22
52584: PUSH
52585: LD_INT 23
52587: PUSH
52588: LD_INT 24
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: ST_TO_ADDR
52597: GO 52678
52599: LD_INT 53
52601: DOUBLE
52602: EQUAL
52603: IFTRUE 52607
52605: GO 52625
52607: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
52608: LD_ADDR_VAR 0 3
52612: PUSH
52613: LD_INT 23
52615: PUSH
52616: LD_INT 24
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: ST_TO_ADDR
52623: GO 52678
52625: LD_INT 46
52627: DOUBLE
52628: EQUAL
52629: IFTRUE 52633
52631: GO 52651
52633: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
52634: LD_ADDR_VAR 0 3
52638: PUSH
52639: LD_INT 23
52641: PUSH
52642: LD_INT 24
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: ST_TO_ADDR
52649: GO 52678
52651: LD_INT 47
52653: DOUBLE
52654: EQUAL
52655: IFTRUE 52659
52657: GO 52677
52659: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_INT 23
52667: PUSH
52668: LD_INT 24
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: ST_TO_ADDR
52675: GO 52678
52677: POP
// result := ( chassis in result ) ;
52678: LD_ADDR_VAR 0 3
52682: PUSH
52683: LD_VAR 0 1
52687: PUSH
52688: LD_VAR 0 3
52692: IN
52693: ST_TO_ADDR
// end ;
52694: LD_VAR 0 3
52698: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
52699: LD_INT 0
52701: PPUSH
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
// result := array ;
52708: LD_ADDR_VAR 0 5
52712: PUSH
52713: LD_VAR 0 1
52717: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
52718: LD_VAR 0 1
52722: NOT
52723: PUSH
52724: LD_VAR 0 2
52728: NOT
52729: OR
52730: PUSH
52731: LD_VAR 0 3
52735: NOT
52736: OR
52737: PUSH
52738: LD_VAR 0 2
52742: PUSH
52743: LD_VAR 0 1
52747: GREATER
52748: OR
52749: PUSH
52750: LD_VAR 0 3
52754: PUSH
52755: LD_VAR 0 1
52759: GREATER
52760: OR
52761: IFFALSE 52765
// exit ;
52763: GO 53061
// if direction then
52765: LD_VAR 0 4
52769: IFFALSE 52833
// begin d := 1 ;
52771: LD_ADDR_VAR 0 9
52775: PUSH
52776: LD_INT 1
52778: ST_TO_ADDR
// if i_from > i_to then
52779: LD_VAR 0 2
52783: PUSH
52784: LD_VAR 0 3
52788: GREATER
52789: IFFALSE 52815
// length := ( array - i_from ) + i_to else
52791: LD_ADDR_VAR 0 11
52795: PUSH
52796: LD_VAR 0 1
52800: PUSH
52801: LD_VAR 0 2
52805: MINUS
52806: PUSH
52807: LD_VAR 0 3
52811: PLUS
52812: ST_TO_ADDR
52813: GO 52831
// length := i_to - i_from ;
52815: LD_ADDR_VAR 0 11
52819: PUSH
52820: LD_VAR 0 3
52824: PUSH
52825: LD_VAR 0 2
52829: MINUS
52830: ST_TO_ADDR
// end else
52831: GO 52894
// begin d := - 1 ;
52833: LD_ADDR_VAR 0 9
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: ST_TO_ADDR
// if i_from > i_to then
52842: LD_VAR 0 2
52846: PUSH
52847: LD_VAR 0 3
52851: GREATER
52852: IFFALSE 52872
// length := i_from - i_to else
52854: LD_ADDR_VAR 0 11
52858: PUSH
52859: LD_VAR 0 2
52863: PUSH
52864: LD_VAR 0 3
52868: MINUS
52869: ST_TO_ADDR
52870: GO 52894
// length := ( array - i_to ) + i_from ;
52872: LD_ADDR_VAR 0 11
52876: PUSH
52877: LD_VAR 0 1
52881: PUSH
52882: LD_VAR 0 3
52886: MINUS
52887: PUSH
52888: LD_VAR 0 2
52892: PLUS
52893: ST_TO_ADDR
// end ; if not length then
52894: LD_VAR 0 11
52898: NOT
52899: IFFALSE 52903
// exit ;
52901: GO 53061
// tmp := array ;
52903: LD_ADDR_VAR 0 10
52907: PUSH
52908: LD_VAR 0 1
52912: ST_TO_ADDR
// for i = 1 to length do
52913: LD_ADDR_VAR 0 6
52917: PUSH
52918: DOUBLE
52919: LD_INT 1
52921: DEC
52922: ST_TO_ADDR
52923: LD_VAR 0 11
52927: PUSH
52928: FOR_TO
52929: IFFALSE 53049
// begin for j = 1 to array do
52931: LD_ADDR_VAR 0 7
52935: PUSH
52936: DOUBLE
52937: LD_INT 1
52939: DEC
52940: ST_TO_ADDR
52941: LD_VAR 0 1
52945: PUSH
52946: FOR_TO
52947: IFFALSE 53035
// begin k := j + d ;
52949: LD_ADDR_VAR 0 8
52953: PUSH
52954: LD_VAR 0 7
52958: PUSH
52959: LD_VAR 0 9
52963: PLUS
52964: ST_TO_ADDR
// if k > array then
52965: LD_VAR 0 8
52969: PUSH
52970: LD_VAR 0 1
52974: GREATER
52975: IFFALSE 52985
// k := 1 ;
52977: LD_ADDR_VAR 0 8
52981: PUSH
52982: LD_INT 1
52984: ST_TO_ADDR
// if not k then
52985: LD_VAR 0 8
52989: NOT
52990: IFFALSE 53002
// k := array ;
52992: LD_ADDR_VAR 0 8
52996: PUSH
52997: LD_VAR 0 1
53001: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
53002: LD_ADDR_VAR 0 10
53006: PUSH
53007: LD_VAR 0 10
53011: PPUSH
53012: LD_VAR 0 8
53016: PPUSH
53017: LD_VAR 0 1
53021: PUSH
53022: LD_VAR 0 7
53026: ARRAY
53027: PPUSH
53028: CALL_OW 1
53032: ST_TO_ADDR
// end ;
53033: GO 52946
53035: POP
53036: POP
// array := tmp ;
53037: LD_ADDR_VAR 0 1
53041: PUSH
53042: LD_VAR 0 10
53046: ST_TO_ADDR
// end ;
53047: GO 52928
53049: POP
53050: POP
// result := array ;
53051: LD_ADDR_VAR 0 5
53055: PUSH
53056: LD_VAR 0 1
53060: ST_TO_ADDR
// end ;
53061: LD_VAR 0 5
53065: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
53066: LD_INT 0
53068: PPUSH
53069: PPUSH
// result := 0 ;
53070: LD_ADDR_VAR 0 3
53074: PUSH
53075: LD_INT 0
53077: ST_TO_ADDR
// if not array or not value in array then
53078: LD_VAR 0 1
53082: NOT
53083: PUSH
53084: LD_VAR 0 2
53088: PUSH
53089: LD_VAR 0 1
53093: IN
53094: NOT
53095: OR
53096: IFFALSE 53100
// exit ;
53098: GO 53154
// for i = 1 to array do
53100: LD_ADDR_VAR 0 4
53104: PUSH
53105: DOUBLE
53106: LD_INT 1
53108: DEC
53109: ST_TO_ADDR
53110: LD_VAR 0 1
53114: PUSH
53115: FOR_TO
53116: IFFALSE 53152
// if value = array [ i ] then
53118: LD_VAR 0 2
53122: PUSH
53123: LD_VAR 0 1
53127: PUSH
53128: LD_VAR 0 4
53132: ARRAY
53133: EQUAL
53134: IFFALSE 53150
// begin result := i ;
53136: LD_ADDR_VAR 0 3
53140: PUSH
53141: LD_VAR 0 4
53145: ST_TO_ADDR
// exit ;
53146: POP
53147: POP
53148: GO 53154
// end ;
53150: GO 53115
53152: POP
53153: POP
// end ;
53154: LD_VAR 0 3
53158: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
53159: LD_INT 0
53161: PPUSH
// vc_chassis := chassis ;
53162: LD_ADDR_OWVAR 37
53166: PUSH
53167: LD_VAR 0 1
53171: ST_TO_ADDR
// vc_engine := engine ;
53172: LD_ADDR_OWVAR 39
53176: PUSH
53177: LD_VAR 0 2
53181: ST_TO_ADDR
// vc_control := control ;
53182: LD_ADDR_OWVAR 38
53186: PUSH
53187: LD_VAR 0 3
53191: ST_TO_ADDR
// vc_weapon := weapon ;
53192: LD_ADDR_OWVAR 40
53196: PUSH
53197: LD_VAR 0 4
53201: ST_TO_ADDR
// vc_fuel_battery := fuel ;
53202: LD_ADDR_OWVAR 41
53206: PUSH
53207: LD_VAR 0 5
53211: ST_TO_ADDR
// end ;
53212: LD_VAR 0 6
53216: RET
// export function WantPlant ( unit ) ; var task ; begin
53217: LD_INT 0
53219: PPUSH
53220: PPUSH
// result := false ;
53221: LD_ADDR_VAR 0 2
53225: PUSH
53226: LD_INT 0
53228: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
53229: LD_ADDR_VAR 0 3
53233: PUSH
53234: LD_VAR 0 1
53238: PPUSH
53239: CALL_OW 437
53243: ST_TO_ADDR
// if task then
53244: LD_VAR 0 3
53248: IFFALSE 53276
// if task [ 1 ] [ 1 ] = p then
53250: LD_VAR 0 3
53254: PUSH
53255: LD_INT 1
53257: ARRAY
53258: PUSH
53259: LD_INT 1
53261: ARRAY
53262: PUSH
53263: LD_STRING p
53265: EQUAL
53266: IFFALSE 53276
// result := true ;
53268: LD_ADDR_VAR 0 2
53272: PUSH
53273: LD_INT 1
53275: ST_TO_ADDR
// end ;
53276: LD_VAR 0 2
53280: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
53281: LD_INT 0
53283: PPUSH
53284: PPUSH
53285: PPUSH
53286: PPUSH
// if pos < 1 then
53287: LD_VAR 0 2
53291: PUSH
53292: LD_INT 1
53294: LESS
53295: IFFALSE 53299
// exit ;
53297: GO 53602
// if pos = 1 then
53299: LD_VAR 0 2
53303: PUSH
53304: LD_INT 1
53306: EQUAL
53307: IFFALSE 53340
// result := Replace ( arr , pos [ 1 ] , value ) else
53309: LD_ADDR_VAR 0 4
53313: PUSH
53314: LD_VAR 0 1
53318: PPUSH
53319: LD_VAR 0 2
53323: PUSH
53324: LD_INT 1
53326: ARRAY
53327: PPUSH
53328: LD_VAR 0 3
53332: PPUSH
53333: CALL_OW 1
53337: ST_TO_ADDR
53338: GO 53602
// begin tmp := arr ;
53340: LD_ADDR_VAR 0 6
53344: PUSH
53345: LD_VAR 0 1
53349: ST_TO_ADDR
// s_arr := [ tmp ] ;
53350: LD_ADDR_VAR 0 7
53354: PUSH
53355: LD_VAR 0 6
53359: PUSH
53360: EMPTY
53361: LIST
53362: ST_TO_ADDR
// for i = 1 to pos - 1 do
53363: LD_ADDR_VAR 0 5
53367: PUSH
53368: DOUBLE
53369: LD_INT 1
53371: DEC
53372: ST_TO_ADDR
53373: LD_VAR 0 2
53377: PUSH
53378: LD_INT 1
53380: MINUS
53381: PUSH
53382: FOR_TO
53383: IFFALSE 53428
// begin tmp := tmp [ pos [ i ] ] ;
53385: LD_ADDR_VAR 0 6
53389: PUSH
53390: LD_VAR 0 6
53394: PUSH
53395: LD_VAR 0 2
53399: PUSH
53400: LD_VAR 0 5
53404: ARRAY
53405: ARRAY
53406: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
53407: LD_ADDR_VAR 0 7
53411: PUSH
53412: LD_VAR 0 7
53416: PUSH
53417: LD_VAR 0 6
53421: PUSH
53422: EMPTY
53423: LIST
53424: ADD
53425: ST_TO_ADDR
// end ;
53426: GO 53382
53428: POP
53429: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
53430: LD_ADDR_VAR 0 6
53434: PUSH
53435: LD_VAR 0 6
53439: PPUSH
53440: LD_VAR 0 2
53444: PUSH
53445: LD_VAR 0 2
53449: ARRAY
53450: PPUSH
53451: LD_VAR 0 3
53455: PPUSH
53456: CALL_OW 1
53460: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
53461: LD_ADDR_VAR 0 7
53465: PUSH
53466: LD_VAR 0 7
53470: PPUSH
53471: LD_VAR 0 7
53475: PPUSH
53476: LD_VAR 0 6
53480: PPUSH
53481: CALL_OW 1
53485: ST_TO_ADDR
// for i = s_arr downto 2 do
53486: LD_ADDR_VAR 0 5
53490: PUSH
53491: DOUBLE
53492: LD_VAR 0 7
53496: INC
53497: ST_TO_ADDR
53498: LD_INT 2
53500: PUSH
53501: FOR_DOWNTO
53502: IFFALSE 53586
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
53504: LD_ADDR_VAR 0 6
53508: PUSH
53509: LD_VAR 0 7
53513: PUSH
53514: LD_VAR 0 5
53518: PUSH
53519: LD_INT 1
53521: MINUS
53522: ARRAY
53523: PPUSH
53524: LD_VAR 0 2
53528: PUSH
53529: LD_VAR 0 5
53533: PUSH
53534: LD_INT 1
53536: MINUS
53537: ARRAY
53538: PPUSH
53539: LD_VAR 0 7
53543: PUSH
53544: LD_VAR 0 5
53548: ARRAY
53549: PPUSH
53550: CALL_OW 1
53554: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
53555: LD_ADDR_VAR 0 7
53559: PUSH
53560: LD_VAR 0 7
53564: PPUSH
53565: LD_VAR 0 5
53569: PUSH
53570: LD_INT 1
53572: MINUS
53573: PPUSH
53574: LD_VAR 0 6
53578: PPUSH
53579: CALL_OW 1
53583: ST_TO_ADDR
// end ;
53584: GO 53501
53586: POP
53587: POP
// result := s_arr [ 1 ] ;
53588: LD_ADDR_VAR 0 4
53592: PUSH
53593: LD_VAR 0 7
53597: PUSH
53598: LD_INT 1
53600: ARRAY
53601: ST_TO_ADDR
// end ; end ;
53602: LD_VAR 0 4
53606: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
53607: LD_INT 0
53609: PPUSH
53610: PPUSH
// if not list then
53611: LD_VAR 0 1
53615: NOT
53616: IFFALSE 53620
// exit ;
53618: GO 53711
// i := list [ pos1 ] ;
53620: LD_ADDR_VAR 0 5
53624: PUSH
53625: LD_VAR 0 1
53629: PUSH
53630: LD_VAR 0 2
53634: ARRAY
53635: ST_TO_ADDR
// if not i then
53636: LD_VAR 0 5
53640: NOT
53641: IFFALSE 53645
// exit ;
53643: GO 53711
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
53645: LD_ADDR_VAR 0 1
53649: PUSH
53650: LD_VAR 0 1
53654: PPUSH
53655: LD_VAR 0 2
53659: PPUSH
53660: LD_VAR 0 1
53664: PUSH
53665: LD_VAR 0 3
53669: ARRAY
53670: PPUSH
53671: CALL_OW 1
53675: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
53676: LD_ADDR_VAR 0 1
53680: PUSH
53681: LD_VAR 0 1
53685: PPUSH
53686: LD_VAR 0 3
53690: PPUSH
53691: LD_VAR 0 5
53695: PPUSH
53696: CALL_OW 1
53700: ST_TO_ADDR
// result := list ;
53701: LD_ADDR_VAR 0 4
53705: PUSH
53706: LD_VAR 0 1
53710: ST_TO_ADDR
// end ;
53711: LD_VAR 0 4
53715: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
53716: LD_INT 0
53718: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
53719: LD_ADDR_VAR 0 5
53723: PUSH
53724: LD_VAR 0 1
53728: PPUSH
53729: CALL_OW 250
53733: PPUSH
53734: LD_VAR 0 1
53738: PPUSH
53739: CALL_OW 251
53743: PPUSH
53744: LD_VAR 0 2
53748: PPUSH
53749: LD_VAR 0 3
53753: PPUSH
53754: LD_VAR 0 4
53758: PPUSH
53759: CALL 53769 0 5
53763: ST_TO_ADDR
// end ;
53764: LD_VAR 0 5
53768: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
53769: LD_INT 0
53771: PPUSH
53772: PPUSH
53773: PPUSH
53774: PPUSH
// if not list then
53775: LD_VAR 0 3
53779: NOT
53780: IFFALSE 53784
// exit ;
53782: GO 54172
// result := [ ] ;
53784: LD_ADDR_VAR 0 6
53788: PUSH
53789: EMPTY
53790: ST_TO_ADDR
// for i in list do
53791: LD_ADDR_VAR 0 7
53795: PUSH
53796: LD_VAR 0 3
53800: PUSH
53801: FOR_IN
53802: IFFALSE 54004
// begin tmp := GetDistUnitXY ( i , x , y ) ;
53804: LD_ADDR_VAR 0 9
53808: PUSH
53809: LD_VAR 0 7
53813: PPUSH
53814: LD_VAR 0 1
53818: PPUSH
53819: LD_VAR 0 2
53823: PPUSH
53824: CALL_OW 297
53828: ST_TO_ADDR
// if not result then
53829: LD_VAR 0 6
53833: NOT
53834: IFFALSE 53860
// result := [ [ i , tmp ] ] else
53836: LD_ADDR_VAR 0 6
53840: PUSH
53841: LD_VAR 0 7
53845: PUSH
53846: LD_VAR 0 9
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: ST_TO_ADDR
53858: GO 54002
// begin if result [ result ] [ 2 ] < tmp then
53860: LD_VAR 0 6
53864: PUSH
53865: LD_VAR 0 6
53869: ARRAY
53870: PUSH
53871: LD_INT 2
53873: ARRAY
53874: PUSH
53875: LD_VAR 0 9
53879: LESS
53880: IFFALSE 53922
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
53882: LD_ADDR_VAR 0 6
53886: PUSH
53887: LD_VAR 0 6
53891: PPUSH
53892: LD_VAR 0 6
53896: PUSH
53897: LD_INT 1
53899: PLUS
53900: PPUSH
53901: LD_VAR 0 7
53905: PUSH
53906: LD_VAR 0 9
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PPUSH
53915: CALL_OW 2
53919: ST_TO_ADDR
53920: GO 54002
// for j = 1 to result do
53922: LD_ADDR_VAR 0 8
53926: PUSH
53927: DOUBLE
53928: LD_INT 1
53930: DEC
53931: ST_TO_ADDR
53932: LD_VAR 0 6
53936: PUSH
53937: FOR_TO
53938: IFFALSE 54000
// begin if tmp < result [ j ] [ 2 ] then
53940: LD_VAR 0 9
53944: PUSH
53945: LD_VAR 0 6
53949: PUSH
53950: LD_VAR 0 8
53954: ARRAY
53955: PUSH
53956: LD_INT 2
53958: ARRAY
53959: LESS
53960: IFFALSE 53998
// begin result := Insert ( result , j , [ i , tmp ] ) ;
53962: LD_ADDR_VAR 0 6
53966: PUSH
53967: LD_VAR 0 6
53971: PPUSH
53972: LD_VAR 0 8
53976: PPUSH
53977: LD_VAR 0 7
53981: PUSH
53982: LD_VAR 0 9
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PPUSH
53991: CALL_OW 2
53995: ST_TO_ADDR
// break ;
53996: GO 54000
// end ; end ;
53998: GO 53937
54000: POP
54001: POP
// end ; end ;
54002: GO 53801
54004: POP
54005: POP
// if result and not asc then
54006: LD_VAR 0 6
54010: PUSH
54011: LD_VAR 0 4
54015: NOT
54016: AND
54017: IFFALSE 54092
// begin tmp := result ;
54019: LD_ADDR_VAR 0 9
54023: PUSH
54024: LD_VAR 0 6
54028: ST_TO_ADDR
// for i = tmp downto 1 do
54029: LD_ADDR_VAR 0 7
54033: PUSH
54034: DOUBLE
54035: LD_VAR 0 9
54039: INC
54040: ST_TO_ADDR
54041: LD_INT 1
54043: PUSH
54044: FOR_DOWNTO
54045: IFFALSE 54090
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
54047: LD_ADDR_VAR 0 6
54051: PUSH
54052: LD_VAR 0 6
54056: PPUSH
54057: LD_VAR 0 9
54061: PUSH
54062: LD_VAR 0 7
54066: MINUS
54067: PUSH
54068: LD_INT 1
54070: PLUS
54071: PPUSH
54072: LD_VAR 0 9
54076: PUSH
54077: LD_VAR 0 7
54081: ARRAY
54082: PPUSH
54083: CALL_OW 1
54087: ST_TO_ADDR
54088: GO 54044
54090: POP
54091: POP
// end ; tmp := [ ] ;
54092: LD_ADDR_VAR 0 9
54096: PUSH
54097: EMPTY
54098: ST_TO_ADDR
// if mode then
54099: LD_VAR 0 5
54103: IFFALSE 54172
// begin for i = 1 to result do
54105: LD_ADDR_VAR 0 7
54109: PUSH
54110: DOUBLE
54111: LD_INT 1
54113: DEC
54114: ST_TO_ADDR
54115: LD_VAR 0 6
54119: PUSH
54120: FOR_TO
54121: IFFALSE 54160
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
54123: LD_ADDR_VAR 0 9
54127: PUSH
54128: LD_VAR 0 9
54132: PPUSH
54133: LD_VAR 0 7
54137: PPUSH
54138: LD_VAR 0 6
54142: PUSH
54143: LD_VAR 0 7
54147: ARRAY
54148: PUSH
54149: LD_INT 1
54151: ARRAY
54152: PPUSH
54153: CALL_OW 1
54157: ST_TO_ADDR
54158: GO 54120
54160: POP
54161: POP
// result := tmp ;
54162: LD_ADDR_VAR 0 6
54166: PUSH
54167: LD_VAR 0 9
54171: ST_TO_ADDR
// end ; end ;
54172: LD_VAR 0 6
54176: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
54177: LD_INT 0
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
54185: LD_ADDR_VAR 0 5
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: ST_TO_ADDR
// if not x or not y then
54207: LD_VAR 0 2
54211: NOT
54212: PUSH
54213: LD_VAR 0 3
54217: NOT
54218: OR
54219: IFFALSE 54223
// exit ;
54221: GO 55869
// if not range then
54223: LD_VAR 0 4
54227: NOT
54228: IFFALSE 54238
// range := 10 ;
54230: LD_ADDR_VAR 0 4
54234: PUSH
54235: LD_INT 10
54237: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
54238: LD_ADDR_VAR 0 8
54242: PUSH
54243: LD_INT 81
54245: PUSH
54246: LD_VAR 0 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 92
54257: PUSH
54258: LD_VAR 0 2
54262: PUSH
54263: LD_VAR 0 3
54267: PUSH
54268: LD_VAR 0 4
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: LD_INT 21
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: PPUSH
54301: CALL_OW 69
54305: ST_TO_ADDR
// if not tmp then
54306: LD_VAR 0 8
54310: NOT
54311: IFFALSE 54315
// exit ;
54313: GO 55869
// for i in tmp do
54315: LD_ADDR_VAR 0 6
54319: PUSH
54320: LD_VAR 0 8
54324: PUSH
54325: FOR_IN
54326: IFFALSE 55844
// begin points := [ 0 , 0 , 0 ] ;
54328: LD_ADDR_VAR 0 9
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// bpoints := 1 ;
54347: LD_ADDR_VAR 0 10
54351: PUSH
54352: LD_INT 1
54354: ST_TO_ADDR
// case GetType ( i ) of unit_human :
54355: LD_VAR 0 6
54359: PPUSH
54360: CALL_OW 247
54364: PUSH
54365: LD_INT 1
54367: DOUBLE
54368: EQUAL
54369: IFTRUE 54373
54371: GO 54951
54373: POP
// begin if GetClass ( i ) = 1 then
54374: LD_VAR 0 6
54378: PPUSH
54379: CALL_OW 257
54383: PUSH
54384: LD_INT 1
54386: EQUAL
54387: IFFALSE 54408
// points := [ 10 , 5 , 3 ] ;
54389: LD_ADDR_VAR 0 9
54393: PUSH
54394: LD_INT 10
54396: PUSH
54397: LD_INT 5
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
54408: LD_VAR 0 6
54412: PPUSH
54413: CALL_OW 257
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 4
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: IN
54432: IFFALSE 54453
// points := [ 3 , 2 , 1 ] ;
54434: LD_ADDR_VAR 0 9
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// if GetClass ( i ) = 5 then
54453: LD_VAR 0 6
54457: PPUSH
54458: CALL_OW 257
54462: PUSH
54463: LD_INT 5
54465: EQUAL
54466: IFFALSE 54487
// points := [ 130 , 5 , 2 ] ;
54468: LD_ADDR_VAR 0 9
54472: PUSH
54473: LD_INT 130
54475: PUSH
54476: LD_INT 5
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// if GetClass ( i ) = 8 then
54487: LD_VAR 0 6
54491: PPUSH
54492: CALL_OW 257
54496: PUSH
54497: LD_INT 8
54499: EQUAL
54500: IFFALSE 54521
// points := [ 35 , 35 , 30 ] ;
54502: LD_ADDR_VAR 0 9
54506: PUSH
54507: LD_INT 35
54509: PUSH
54510: LD_INT 35
54512: PUSH
54513: LD_INT 30
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// if GetClass ( i ) = 9 then
54521: LD_VAR 0 6
54525: PPUSH
54526: CALL_OW 257
54530: PUSH
54531: LD_INT 9
54533: EQUAL
54534: IFFALSE 54555
// points := [ 20 , 55 , 40 ] ;
54536: LD_ADDR_VAR 0 9
54540: PUSH
54541: LD_INT 20
54543: PUSH
54544: LD_INT 55
54546: PUSH
54547: LD_INT 40
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
54555: LD_VAR 0 6
54559: PPUSH
54560: CALL_OW 257
54564: PUSH
54565: LD_INT 12
54567: PUSH
54568: LD_INT 16
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: IN
54575: IFFALSE 54596
// points := [ 5 , 3 , 2 ] ;
54577: LD_ADDR_VAR 0 9
54581: PUSH
54582: LD_INT 5
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// if GetClass ( i ) = 17 then
54596: LD_VAR 0 6
54600: PPUSH
54601: CALL_OW 257
54605: PUSH
54606: LD_INT 17
54608: EQUAL
54609: IFFALSE 54630
// points := [ 100 , 50 , 75 ] ;
54611: LD_ADDR_VAR 0 9
54615: PUSH
54616: LD_INT 100
54618: PUSH
54619: LD_INT 50
54621: PUSH
54622: LD_INT 75
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: ST_TO_ADDR
// if GetClass ( i ) = 15 then
54630: LD_VAR 0 6
54634: PPUSH
54635: CALL_OW 257
54639: PUSH
54640: LD_INT 15
54642: EQUAL
54643: IFFALSE 54664
// points := [ 10 , 5 , 3 ] ;
54645: LD_ADDR_VAR 0 9
54649: PUSH
54650: LD_INT 10
54652: PUSH
54653: LD_INT 5
54655: PUSH
54656: LD_INT 3
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// if GetClass ( i ) = 14 then
54664: LD_VAR 0 6
54668: PPUSH
54669: CALL_OW 257
54673: PUSH
54674: LD_INT 14
54676: EQUAL
54677: IFFALSE 54698
// points := [ 10 , 0 , 0 ] ;
54679: LD_ADDR_VAR 0 9
54683: PUSH
54684: LD_INT 10
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// if GetClass ( i ) = 11 then
54698: LD_VAR 0 6
54702: PPUSH
54703: CALL_OW 257
54707: PUSH
54708: LD_INT 11
54710: EQUAL
54711: IFFALSE 54732
// points := [ 30 , 10 , 5 ] ;
54713: LD_ADDR_VAR 0 9
54717: PUSH
54718: LD_INT 30
54720: PUSH
54721: LD_INT 10
54723: PUSH
54724: LD_INT 5
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
54732: LD_VAR 0 1
54736: PPUSH
54737: LD_INT 5
54739: PPUSH
54740: CALL_OW 321
54744: PUSH
54745: LD_INT 2
54747: EQUAL
54748: IFFALSE 54765
// bpoints := bpoints * 1.8 ;
54750: LD_ADDR_VAR 0 10
54754: PUSH
54755: LD_VAR 0 10
54759: PUSH
54760: LD_REAL  1.80000000000000E+0000
54763: MUL
54764: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
54765: LD_VAR 0 6
54769: PPUSH
54770: CALL_OW 257
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: LD_INT 4
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: IN
54793: PUSH
54794: LD_VAR 0 1
54798: PPUSH
54799: LD_INT 51
54801: PPUSH
54802: CALL_OW 321
54806: PUSH
54807: LD_INT 2
54809: EQUAL
54810: AND
54811: IFFALSE 54828
// bpoints := bpoints * 1.2 ;
54813: LD_ADDR_VAR 0 10
54817: PUSH
54818: LD_VAR 0 10
54822: PUSH
54823: LD_REAL  1.20000000000000E+0000
54826: MUL
54827: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
54828: LD_VAR 0 6
54832: PPUSH
54833: CALL_OW 257
54837: PUSH
54838: LD_INT 5
54840: PUSH
54841: LD_INT 7
54843: PUSH
54844: LD_INT 9
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: IN
54852: PUSH
54853: LD_VAR 0 1
54857: PPUSH
54858: LD_INT 52
54860: PPUSH
54861: CALL_OW 321
54865: PUSH
54866: LD_INT 2
54868: EQUAL
54869: AND
54870: IFFALSE 54887
// bpoints := bpoints * 1.5 ;
54872: LD_ADDR_VAR 0 10
54876: PUSH
54877: LD_VAR 0 10
54881: PUSH
54882: LD_REAL  1.50000000000000E+0000
54885: MUL
54886: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
54887: LD_VAR 0 1
54891: PPUSH
54892: LD_INT 66
54894: PPUSH
54895: CALL_OW 321
54899: PUSH
54900: LD_INT 2
54902: EQUAL
54903: IFFALSE 54920
// bpoints := bpoints * 1.1 ;
54905: LD_ADDR_VAR 0 10
54909: PUSH
54910: LD_VAR 0 10
54914: PUSH
54915: LD_REAL  1.10000000000000E+0000
54918: MUL
54919: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
54920: LD_ADDR_VAR 0 10
54924: PUSH
54925: LD_VAR 0 10
54929: PUSH
54930: LD_VAR 0 6
54934: PPUSH
54935: LD_INT 1
54937: PPUSH
54938: CALL_OW 259
54942: PUSH
54943: LD_REAL  1.15000000000000E+0000
54946: MUL
54947: MUL
54948: ST_TO_ADDR
// end ; unit_vehicle :
54949: GO 55773
54951: LD_INT 2
54953: DOUBLE
54954: EQUAL
54955: IFTRUE 54959
54957: GO 55761
54959: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
54960: LD_VAR 0 6
54964: PPUSH
54965: CALL_OW 264
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 42
54975: PUSH
54976: LD_INT 24
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: LIST
54983: IN
54984: IFFALSE 55005
// points := [ 25 , 5 , 3 ] ;
54986: LD_ADDR_VAR 0 9
54990: PUSH
54991: LD_INT 25
54993: PUSH
54994: LD_INT 5
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
55005: LD_VAR 0 6
55009: PPUSH
55010: CALL_OW 264
55014: PUSH
55015: LD_INT 4
55017: PUSH
55018: LD_INT 43
55020: PUSH
55021: LD_INT 25
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: IN
55029: IFFALSE 55050
// points := [ 40 , 15 , 5 ] ;
55031: LD_ADDR_VAR 0 9
55035: PUSH
55036: LD_INT 40
55038: PUSH
55039: LD_INT 15
55041: PUSH
55042: LD_INT 5
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
55050: LD_VAR 0 6
55054: PPUSH
55055: CALL_OW 264
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: LD_INT 23
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: IN
55070: IFFALSE 55091
// points := [ 7 , 25 , 8 ] ;
55072: LD_ADDR_VAR 0 9
55076: PUSH
55077: LD_INT 7
55079: PUSH
55080: LD_INT 25
55082: PUSH
55083: LD_INT 8
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
55091: LD_VAR 0 6
55095: PPUSH
55096: CALL_OW 264
55100: PUSH
55101: LD_INT 5
55103: PUSH
55104: LD_INT 27
55106: PUSH
55107: LD_INT 44
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: IN
55115: IFFALSE 55136
// points := [ 14 , 50 , 16 ] ;
55117: LD_ADDR_VAR 0 9
55121: PUSH
55122: LD_INT 14
55124: PUSH
55125: LD_INT 50
55127: PUSH
55128: LD_INT 16
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
55136: LD_VAR 0 6
55140: PPUSH
55141: CALL_OW 264
55145: PUSH
55146: LD_INT 6
55148: PUSH
55149: LD_INT 46
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: IN
55156: IFFALSE 55177
// points := [ 32 , 120 , 70 ] ;
55158: LD_ADDR_VAR 0 9
55162: PUSH
55163: LD_INT 32
55165: PUSH
55166: LD_INT 120
55168: PUSH
55169: LD_INT 70
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
55177: LD_VAR 0 6
55181: PPUSH
55182: CALL_OW 264
55186: PUSH
55187: LD_INT 7
55189: PUSH
55190: LD_INT 28
55192: PUSH
55193: LD_INT 45
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: LIST
55200: IN
55201: IFFALSE 55222
// points := [ 35 , 20 , 45 ] ;
55203: LD_ADDR_VAR 0 9
55207: PUSH
55208: LD_INT 35
55210: PUSH
55211: LD_INT 20
55213: PUSH
55214: LD_INT 45
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
55222: LD_VAR 0 6
55226: PPUSH
55227: CALL_OW 264
55231: PUSH
55232: LD_INT 47
55234: PUSH
55235: EMPTY
55236: LIST
55237: IN
55238: IFFALSE 55259
// points := [ 67 , 45 , 75 ] ;
55240: LD_ADDR_VAR 0 9
55244: PUSH
55245: LD_INT 67
55247: PUSH
55248: LD_INT 45
55250: PUSH
55251: LD_INT 75
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
55259: LD_VAR 0 6
55263: PPUSH
55264: CALL_OW 264
55268: PUSH
55269: LD_INT 26
55271: PUSH
55272: EMPTY
55273: LIST
55274: IN
55275: IFFALSE 55296
// points := [ 120 , 30 , 80 ] ;
55277: LD_ADDR_VAR 0 9
55281: PUSH
55282: LD_INT 120
55284: PUSH
55285: LD_INT 30
55287: PUSH
55288: LD_INT 80
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
55296: LD_VAR 0 6
55300: PPUSH
55301: CALL_OW 264
55305: PUSH
55306: LD_INT 22
55308: PUSH
55309: EMPTY
55310: LIST
55311: IN
55312: IFFALSE 55333
// points := [ 40 , 1 , 1 ] ;
55314: LD_ADDR_VAR 0 9
55318: PUSH
55319: LD_INT 40
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
55333: LD_VAR 0 6
55337: PPUSH
55338: CALL_OW 264
55342: PUSH
55343: LD_INT 29
55345: PUSH
55346: EMPTY
55347: LIST
55348: IN
55349: IFFALSE 55370
// points := [ 70 , 200 , 400 ] ;
55351: LD_ADDR_VAR 0 9
55355: PUSH
55356: LD_INT 70
55358: PUSH
55359: LD_INT 200
55361: PUSH
55362: LD_INT 400
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
55370: LD_VAR 0 6
55374: PPUSH
55375: CALL_OW 264
55379: PUSH
55380: LD_INT 14
55382: PUSH
55383: LD_INT 53
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: IN
55390: IFFALSE 55411
// points := [ 40 , 10 , 20 ] ;
55392: LD_ADDR_VAR 0 9
55396: PUSH
55397: LD_INT 40
55399: PUSH
55400: LD_INT 10
55402: PUSH
55403: LD_INT 20
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
55411: LD_VAR 0 6
55415: PPUSH
55416: CALL_OW 264
55420: PUSH
55421: LD_INT 9
55423: PUSH
55424: EMPTY
55425: LIST
55426: IN
55427: IFFALSE 55448
// points := [ 5 , 70 , 20 ] ;
55429: LD_ADDR_VAR 0 9
55433: PUSH
55434: LD_INT 5
55436: PUSH
55437: LD_INT 70
55439: PUSH
55440: LD_INT 20
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: LIST
55447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
55448: LD_VAR 0 6
55452: PPUSH
55453: CALL_OW 264
55457: PUSH
55458: LD_INT 10
55460: PUSH
55461: EMPTY
55462: LIST
55463: IN
55464: IFFALSE 55485
// points := [ 35 , 110 , 70 ] ;
55466: LD_ADDR_VAR 0 9
55470: PUSH
55471: LD_INT 35
55473: PUSH
55474: LD_INT 110
55476: PUSH
55477: LD_INT 70
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
55485: LD_VAR 0 6
55489: PPUSH
55490: CALL_OW 265
55494: PUSH
55495: LD_INT 25
55497: EQUAL
55498: IFFALSE 55519
// points := [ 80 , 65 , 100 ] ;
55500: LD_ADDR_VAR 0 9
55504: PUSH
55505: LD_INT 80
55507: PUSH
55508: LD_INT 65
55510: PUSH
55511: LD_INT 100
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: LIST
55518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
55519: LD_VAR 0 6
55523: PPUSH
55524: CALL_OW 263
55528: PUSH
55529: LD_INT 1
55531: EQUAL
55532: IFFALSE 55567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
55534: LD_ADDR_VAR 0 10
55538: PUSH
55539: LD_VAR 0 10
55543: PUSH
55544: LD_VAR 0 6
55548: PPUSH
55549: CALL_OW 311
55553: PPUSH
55554: LD_INT 3
55556: PPUSH
55557: CALL_OW 259
55561: PUSH
55562: LD_INT 4
55564: MUL
55565: MUL
55566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
55567: LD_VAR 0 6
55571: PPUSH
55572: CALL_OW 263
55576: PUSH
55577: LD_INT 2
55579: EQUAL
55580: IFFALSE 55631
// begin j := IsControledBy ( i ) ;
55582: LD_ADDR_VAR 0 7
55586: PUSH
55587: LD_VAR 0 6
55591: PPUSH
55592: CALL_OW 312
55596: ST_TO_ADDR
// if j then
55597: LD_VAR 0 7
55601: IFFALSE 55631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
55603: LD_ADDR_VAR 0 10
55607: PUSH
55608: LD_VAR 0 10
55612: PUSH
55613: LD_VAR 0 7
55617: PPUSH
55618: LD_INT 3
55620: PPUSH
55621: CALL_OW 259
55625: PUSH
55626: LD_INT 3
55628: MUL
55629: MUL
55630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
55631: LD_VAR 0 6
55635: PPUSH
55636: CALL_OW 264
55640: PUSH
55641: LD_INT 5
55643: PUSH
55644: LD_INT 6
55646: PUSH
55647: LD_INT 46
55649: PUSH
55650: LD_INT 44
55652: PUSH
55653: LD_INT 47
55655: PUSH
55656: LD_INT 45
55658: PUSH
55659: LD_INT 28
55661: PUSH
55662: LD_INT 7
55664: PUSH
55665: LD_INT 27
55667: PUSH
55668: LD_INT 29
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: IN
55683: PUSH
55684: LD_VAR 0 1
55688: PPUSH
55689: LD_INT 52
55691: PPUSH
55692: CALL_OW 321
55696: PUSH
55697: LD_INT 2
55699: EQUAL
55700: AND
55701: IFFALSE 55718
// bpoints := bpoints * 1.2 ;
55703: LD_ADDR_VAR 0 10
55707: PUSH
55708: LD_VAR 0 10
55712: PUSH
55713: LD_REAL  1.20000000000000E+0000
55716: MUL
55717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
55718: LD_VAR 0 6
55722: PPUSH
55723: CALL_OW 264
55727: PUSH
55728: LD_INT 6
55730: PUSH
55731: LD_INT 46
55733: PUSH
55734: LD_INT 47
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: IN
55742: IFFALSE 55759
// bpoints := bpoints * 1.2 ;
55744: LD_ADDR_VAR 0 10
55748: PUSH
55749: LD_VAR 0 10
55753: PUSH
55754: LD_REAL  1.20000000000000E+0000
55757: MUL
55758: ST_TO_ADDR
// end ; unit_building :
55759: GO 55773
55761: LD_INT 3
55763: DOUBLE
55764: EQUAL
55765: IFTRUE 55769
55767: GO 55772
55769: POP
// ; end ;
55770: GO 55773
55772: POP
// for j = 1 to 3 do
55773: LD_ADDR_VAR 0 7
55777: PUSH
55778: DOUBLE
55779: LD_INT 1
55781: DEC
55782: ST_TO_ADDR
55783: LD_INT 3
55785: PUSH
55786: FOR_TO
55787: IFFALSE 55840
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
55789: LD_ADDR_VAR 0 5
55793: PUSH
55794: LD_VAR 0 5
55798: PPUSH
55799: LD_VAR 0 7
55803: PPUSH
55804: LD_VAR 0 5
55808: PUSH
55809: LD_VAR 0 7
55813: ARRAY
55814: PUSH
55815: LD_VAR 0 9
55819: PUSH
55820: LD_VAR 0 7
55824: ARRAY
55825: PUSH
55826: LD_VAR 0 10
55830: MUL
55831: PLUS
55832: PPUSH
55833: CALL_OW 1
55837: ST_TO_ADDR
55838: GO 55786
55840: POP
55841: POP
// end ;
55842: GO 54325
55844: POP
55845: POP
// result := Replace ( result , 4 , tmp ) ;
55846: LD_ADDR_VAR 0 5
55850: PUSH
55851: LD_VAR 0 5
55855: PPUSH
55856: LD_INT 4
55858: PPUSH
55859: LD_VAR 0 8
55863: PPUSH
55864: CALL_OW 1
55868: ST_TO_ADDR
// end ;
55869: LD_VAR 0 5
55873: RET
// export function DangerAtRange ( unit , range ) ; begin
55874: LD_INT 0
55876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
55877: LD_ADDR_VAR 0 3
55881: PUSH
55882: LD_VAR 0 1
55886: PPUSH
55887: CALL_OW 255
55891: PPUSH
55892: LD_VAR 0 1
55896: PPUSH
55897: CALL_OW 250
55901: PPUSH
55902: LD_VAR 0 1
55906: PPUSH
55907: CALL_OW 251
55911: PPUSH
55912: LD_VAR 0 2
55916: PPUSH
55917: CALL 54177 0 4
55921: ST_TO_ADDR
// end ;
55922: LD_VAR 0 3
55926: RET
// export function DangerInArea ( side , area ) ; begin
55927: LD_INT 0
55929: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
55930: LD_ADDR_VAR 0 3
55934: PUSH
55935: LD_VAR 0 2
55939: PPUSH
55940: LD_INT 81
55942: PUSH
55943: LD_VAR 0 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PPUSH
55952: CALL_OW 70
55956: ST_TO_ADDR
// end ;
55957: LD_VAR 0 3
55961: RET
// export function IsExtension ( b ) ; begin
55962: LD_INT 0
55964: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
55965: LD_ADDR_VAR 0 2
55969: PUSH
55970: LD_VAR 0 1
55974: PUSH
55975: LD_INT 23
55977: PUSH
55978: LD_INT 20
55980: PUSH
55981: LD_INT 22
55983: PUSH
55984: LD_INT 17
55986: PUSH
55987: LD_INT 24
55989: PUSH
55990: LD_INT 21
55992: PUSH
55993: LD_INT 19
55995: PUSH
55996: LD_INT 16
55998: PUSH
55999: LD_INT 25
56001: PUSH
56002: LD_INT 18
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: IN
56017: ST_TO_ADDR
// end ;
56018: LD_VAR 0 2
56022: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
56023: LD_INT 0
56025: PPUSH
56026: PPUSH
56027: PPUSH
// result := [ ] ;
56028: LD_ADDR_VAR 0 3
56032: PUSH
56033: EMPTY
56034: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
56035: LD_ADDR_VAR 0 4
56039: PUSH
56040: LD_VAR 0 2
56044: PPUSH
56045: LD_INT 21
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PPUSH
56055: CALL_OW 70
56059: ST_TO_ADDR
// if not tmp then
56060: LD_VAR 0 4
56064: NOT
56065: IFFALSE 56069
// exit ;
56067: GO 56127
// for i in tmp do
56069: LD_ADDR_VAR 0 5
56073: PUSH
56074: LD_VAR 0 4
56078: PUSH
56079: FOR_IN
56080: IFFALSE 56115
// if GetBase ( i ) <> base then
56082: LD_VAR 0 5
56086: PPUSH
56087: CALL_OW 274
56091: PUSH
56092: LD_VAR 0 1
56096: NONEQUAL
56097: IFFALSE 56113
// ComLinkToBase ( base , i ) ;
56099: LD_VAR 0 1
56103: PPUSH
56104: LD_VAR 0 5
56108: PPUSH
56109: CALL_OW 169
56113: GO 56079
56115: POP
56116: POP
// result := tmp ;
56117: LD_ADDR_VAR 0 3
56121: PUSH
56122: LD_VAR 0 4
56126: ST_TO_ADDR
// end ;
56127: LD_VAR 0 3
56131: RET
// export function ComComplete ( unit , b ) ; var i ; begin
56132: LD_INT 0
56134: PPUSH
56135: PPUSH
// if BuildingStatus ( b ) = bs_build then
56136: LD_VAR 0 2
56140: PPUSH
56141: CALL_OW 461
56145: PUSH
56146: LD_INT 1
56148: EQUAL
56149: IFFALSE 56209
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
56151: LD_VAR 0 1
56155: PPUSH
56156: LD_STRING h
56158: PUSH
56159: LD_VAR 0 2
56163: PPUSH
56164: CALL_OW 250
56168: PUSH
56169: LD_VAR 0 2
56173: PPUSH
56174: CALL_OW 251
56178: PUSH
56179: LD_VAR 0 2
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: PPUSH
56205: CALL_OW 446
// end ;
56209: LD_VAR 0 3
56213: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
56214: LD_INT 0
56216: PPUSH
56217: PPUSH
56218: PPUSH
56219: PPUSH
56220: PPUSH
56221: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
56222: LD_VAR 0 1
56226: NOT
56227: PUSH
56228: LD_VAR 0 1
56232: PPUSH
56233: CALL_OW 263
56237: PUSH
56238: LD_INT 2
56240: EQUAL
56241: NOT
56242: OR
56243: IFFALSE 56247
// exit ;
56245: GO 56563
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
56247: LD_ADDR_VAR 0 6
56251: PUSH
56252: LD_INT 22
56254: PUSH
56255: LD_VAR 0 1
56259: PPUSH
56260: CALL_OW 255
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: LD_INT 30
56274: PUSH
56275: LD_INT 36
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 34
56284: PUSH
56285: LD_INT 31
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PPUSH
56301: CALL_OW 69
56305: ST_TO_ADDR
// if not tmp then
56306: LD_VAR 0 6
56310: NOT
56311: IFFALSE 56315
// exit ;
56313: GO 56563
// result := [ ] ;
56315: LD_ADDR_VAR 0 2
56319: PUSH
56320: EMPTY
56321: ST_TO_ADDR
// for i in tmp do
56322: LD_ADDR_VAR 0 3
56326: PUSH
56327: LD_VAR 0 6
56331: PUSH
56332: FOR_IN
56333: IFFALSE 56404
// begin t := UnitsInside ( i ) ;
56335: LD_ADDR_VAR 0 4
56339: PUSH
56340: LD_VAR 0 3
56344: PPUSH
56345: CALL_OW 313
56349: ST_TO_ADDR
// if t then
56350: LD_VAR 0 4
56354: IFFALSE 56402
// for j in t do
56356: LD_ADDR_VAR 0 7
56360: PUSH
56361: LD_VAR 0 4
56365: PUSH
56366: FOR_IN
56367: IFFALSE 56400
// result := Insert ( result , result + 1 , j ) ;
56369: LD_ADDR_VAR 0 2
56373: PUSH
56374: LD_VAR 0 2
56378: PPUSH
56379: LD_VAR 0 2
56383: PUSH
56384: LD_INT 1
56386: PLUS
56387: PPUSH
56388: LD_VAR 0 7
56392: PPUSH
56393: CALL_OW 2
56397: ST_TO_ADDR
56398: GO 56366
56400: POP
56401: POP
// end ;
56402: GO 56332
56404: POP
56405: POP
// if not result then
56406: LD_VAR 0 2
56410: NOT
56411: IFFALSE 56415
// exit ;
56413: GO 56563
// mech := result [ 1 ] ;
56415: LD_ADDR_VAR 0 5
56419: PUSH
56420: LD_VAR 0 2
56424: PUSH
56425: LD_INT 1
56427: ARRAY
56428: ST_TO_ADDR
// if result > 1 then
56429: LD_VAR 0 2
56433: PUSH
56434: LD_INT 1
56436: GREATER
56437: IFFALSE 56549
// for i = 2 to result do
56439: LD_ADDR_VAR 0 3
56443: PUSH
56444: DOUBLE
56445: LD_INT 2
56447: DEC
56448: ST_TO_ADDR
56449: LD_VAR 0 2
56453: PUSH
56454: FOR_TO
56455: IFFALSE 56547
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
56457: LD_ADDR_VAR 0 4
56461: PUSH
56462: LD_VAR 0 2
56466: PUSH
56467: LD_VAR 0 3
56471: ARRAY
56472: PPUSH
56473: LD_INT 3
56475: PPUSH
56476: CALL_OW 259
56480: PUSH
56481: LD_VAR 0 2
56485: PUSH
56486: LD_VAR 0 3
56490: ARRAY
56491: PPUSH
56492: CALL_OW 432
56496: MINUS
56497: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
56498: LD_VAR 0 4
56502: PUSH
56503: LD_VAR 0 5
56507: PPUSH
56508: LD_INT 3
56510: PPUSH
56511: CALL_OW 259
56515: PUSH
56516: LD_VAR 0 5
56520: PPUSH
56521: CALL_OW 432
56525: MINUS
56526: GREATEREQUAL
56527: IFFALSE 56545
// mech := result [ i ] ;
56529: LD_ADDR_VAR 0 5
56533: PUSH
56534: LD_VAR 0 2
56538: PUSH
56539: LD_VAR 0 3
56543: ARRAY
56544: ST_TO_ADDR
// end ;
56545: GO 56454
56547: POP
56548: POP
// ComLinkTo ( vehicle , mech ) ;
56549: LD_VAR 0 1
56553: PPUSH
56554: LD_VAR 0 5
56558: PPUSH
56559: CALL_OW 135
// end ;
56563: LD_VAR 0 2
56567: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
56568: LD_INT 0
56570: PPUSH
56571: PPUSH
56572: PPUSH
56573: PPUSH
56574: PPUSH
56575: PPUSH
56576: PPUSH
56577: PPUSH
56578: PPUSH
56579: PPUSH
56580: PPUSH
56581: PPUSH
56582: PPUSH
// result := [ ] ;
56583: LD_ADDR_VAR 0 7
56587: PUSH
56588: EMPTY
56589: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
56590: LD_VAR 0 1
56594: PPUSH
56595: CALL_OW 266
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: IN
56610: NOT
56611: IFFALSE 56615
// exit ;
56613: GO 58246
// if name then
56615: LD_VAR 0 3
56619: IFFALSE 56635
// SetBName ( base_dep , name ) ;
56621: LD_VAR 0 1
56625: PPUSH
56626: LD_VAR 0 3
56630: PPUSH
56631: CALL_OW 500
// base := GetBase ( base_dep ) ;
56635: LD_ADDR_VAR 0 15
56639: PUSH
56640: LD_VAR 0 1
56644: PPUSH
56645: CALL_OW 274
56649: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
56650: LD_ADDR_VAR 0 16
56654: PUSH
56655: LD_VAR 0 1
56659: PPUSH
56660: CALL_OW 255
56664: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
56665: LD_ADDR_VAR 0 17
56669: PUSH
56670: LD_VAR 0 1
56674: PPUSH
56675: CALL_OW 248
56679: ST_TO_ADDR
// if sources then
56680: LD_VAR 0 5
56684: IFFALSE 56731
// for i = 1 to 3 do
56686: LD_ADDR_VAR 0 8
56690: PUSH
56691: DOUBLE
56692: LD_INT 1
56694: DEC
56695: ST_TO_ADDR
56696: LD_INT 3
56698: PUSH
56699: FOR_TO
56700: IFFALSE 56729
// AddResourceType ( base , i , sources [ i ] ) ;
56702: LD_VAR 0 15
56706: PPUSH
56707: LD_VAR 0 8
56711: PPUSH
56712: LD_VAR 0 5
56716: PUSH
56717: LD_VAR 0 8
56721: ARRAY
56722: PPUSH
56723: CALL_OW 276
56727: GO 56699
56729: POP
56730: POP
// buildings := GetBaseBuildings ( base , area ) ;
56731: LD_ADDR_VAR 0 18
56735: PUSH
56736: LD_VAR 0 15
56740: PPUSH
56741: LD_VAR 0 2
56745: PPUSH
56746: CALL 56023 0 2
56750: ST_TO_ADDR
// InitHc ;
56751: CALL_OW 19
// InitUc ;
56755: CALL_OW 18
// uc_side := side ;
56759: LD_ADDR_OWVAR 20
56763: PUSH
56764: LD_VAR 0 16
56768: ST_TO_ADDR
// uc_nation := nation ;
56769: LD_ADDR_OWVAR 21
56773: PUSH
56774: LD_VAR 0 17
56778: ST_TO_ADDR
// if buildings then
56779: LD_VAR 0 18
56783: IFFALSE 58105
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
56785: LD_ADDR_VAR 0 19
56789: PUSH
56790: LD_VAR 0 18
56794: PPUSH
56795: LD_INT 2
56797: PUSH
56798: LD_INT 30
56800: PUSH
56801: LD_INT 29
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 30
56810: PUSH
56811: LD_INT 30
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: PPUSH
56823: CALL_OW 72
56827: ST_TO_ADDR
// if tmp then
56828: LD_VAR 0 19
56832: IFFALSE 56880
// for i in tmp do
56834: LD_ADDR_VAR 0 8
56838: PUSH
56839: LD_VAR 0 19
56843: PUSH
56844: FOR_IN
56845: IFFALSE 56878
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
56847: LD_VAR 0 8
56851: PPUSH
56852: CALL_OW 250
56856: PPUSH
56857: LD_VAR 0 8
56861: PPUSH
56862: CALL_OW 251
56866: PPUSH
56867: LD_VAR 0 16
56871: PPUSH
56872: CALL_OW 441
56876: GO 56844
56878: POP
56879: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
56880: LD_VAR 0 18
56884: PPUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 30
56890: PUSH
56891: LD_INT 32
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 30
56900: PUSH
56901: LD_INT 33
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: PPUSH
56913: CALL_OW 72
56917: IFFALSE 57005
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
56919: LD_ADDR_VAR 0 8
56923: PUSH
56924: LD_VAR 0 18
56928: PPUSH
56929: LD_INT 2
56931: PUSH
56932: LD_INT 30
56934: PUSH
56935: LD_INT 32
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 30
56944: PUSH
56945: LD_INT 33
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: LIST
56956: PPUSH
56957: CALL_OW 72
56961: PUSH
56962: FOR_IN
56963: IFFALSE 57003
// begin if not GetBWeapon ( i ) then
56965: LD_VAR 0 8
56969: PPUSH
56970: CALL_OW 269
56974: NOT
56975: IFFALSE 57001
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
56977: LD_VAR 0 8
56981: PPUSH
56982: LD_VAR 0 8
56986: PPUSH
56987: LD_VAR 0 2
56991: PPUSH
56992: CALL 58251 0 2
56996: PPUSH
56997: CALL_OW 431
// end ;
57001: GO 56962
57003: POP
57004: POP
// end ; for i = 1 to personel do
57005: LD_ADDR_VAR 0 8
57009: PUSH
57010: DOUBLE
57011: LD_INT 1
57013: DEC
57014: ST_TO_ADDR
57015: LD_VAR 0 6
57019: PUSH
57020: FOR_TO
57021: IFFALSE 58085
// begin if i > 4 then
57023: LD_VAR 0 8
57027: PUSH
57028: LD_INT 4
57030: GREATER
57031: IFFALSE 57035
// break ;
57033: GO 58085
// case i of 1 :
57035: LD_VAR 0 8
57039: PUSH
57040: LD_INT 1
57042: DOUBLE
57043: EQUAL
57044: IFTRUE 57048
57046: GO 57128
57048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
57049: LD_ADDR_VAR 0 12
57053: PUSH
57054: LD_VAR 0 18
57058: PPUSH
57059: LD_INT 22
57061: PUSH
57062: LD_VAR 0 16
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 58
57073: PUSH
57074: EMPTY
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 30
57082: PUSH
57083: LD_INT 32
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 30
57092: PUSH
57093: LD_INT 4
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 30
57102: PUSH
57103: LD_INT 5
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: PPUSH
57121: CALL_OW 72
57125: ST_TO_ADDR
57126: GO 57350
57128: LD_INT 2
57130: DOUBLE
57131: EQUAL
57132: IFTRUE 57136
57134: GO 57198
57136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
57137: LD_ADDR_VAR 0 12
57141: PUSH
57142: LD_VAR 0 18
57146: PPUSH
57147: LD_INT 22
57149: PUSH
57150: LD_VAR 0 16
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 30
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 30
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PPUSH
57191: CALL_OW 72
57195: ST_TO_ADDR
57196: GO 57350
57198: LD_INT 3
57200: DOUBLE
57201: EQUAL
57202: IFTRUE 57206
57204: GO 57268
57206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
57207: LD_ADDR_VAR 0 12
57211: PUSH
57212: LD_VAR 0 18
57216: PPUSH
57217: LD_INT 22
57219: PUSH
57220: LD_VAR 0 16
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 30
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 30
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PPUSH
57261: CALL_OW 72
57265: ST_TO_ADDR
57266: GO 57350
57268: LD_INT 4
57270: DOUBLE
57271: EQUAL
57272: IFTRUE 57276
57274: GO 57349
57276: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
57277: LD_ADDR_VAR 0 12
57281: PUSH
57282: LD_VAR 0 18
57286: PPUSH
57287: LD_INT 22
57289: PUSH
57290: LD_VAR 0 16
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 30
57304: PUSH
57305: LD_INT 6
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 30
57314: PUSH
57315: LD_INT 7
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 30
57324: PUSH
57325: LD_INT 8
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PPUSH
57342: CALL_OW 72
57346: ST_TO_ADDR
57347: GO 57350
57349: POP
// if i = 1 then
57350: LD_VAR 0 8
57354: PUSH
57355: LD_INT 1
57357: EQUAL
57358: IFFALSE 57469
// begin tmp := [ ] ;
57360: LD_ADDR_VAR 0 19
57364: PUSH
57365: EMPTY
57366: ST_TO_ADDR
// for j in f do
57367: LD_ADDR_VAR 0 9
57371: PUSH
57372: LD_VAR 0 12
57376: PUSH
57377: FOR_IN
57378: IFFALSE 57451
// if GetBType ( j ) = b_bunker then
57380: LD_VAR 0 9
57384: PPUSH
57385: CALL_OW 266
57389: PUSH
57390: LD_INT 32
57392: EQUAL
57393: IFFALSE 57420
// tmp := Insert ( tmp , 1 , j ) else
57395: LD_ADDR_VAR 0 19
57399: PUSH
57400: LD_VAR 0 19
57404: PPUSH
57405: LD_INT 1
57407: PPUSH
57408: LD_VAR 0 9
57412: PPUSH
57413: CALL_OW 2
57417: ST_TO_ADDR
57418: GO 57449
// tmp := Insert ( tmp , tmp + 1 , j ) ;
57420: LD_ADDR_VAR 0 19
57424: PUSH
57425: LD_VAR 0 19
57429: PPUSH
57430: LD_VAR 0 19
57434: PUSH
57435: LD_INT 1
57437: PLUS
57438: PPUSH
57439: LD_VAR 0 9
57443: PPUSH
57444: CALL_OW 2
57448: ST_TO_ADDR
57449: GO 57377
57451: POP
57452: POP
// if tmp then
57453: LD_VAR 0 19
57457: IFFALSE 57469
// f := tmp ;
57459: LD_ADDR_VAR 0 12
57463: PUSH
57464: LD_VAR 0 19
57468: ST_TO_ADDR
// end ; x := personel [ i ] ;
57469: LD_ADDR_VAR 0 13
57473: PUSH
57474: LD_VAR 0 6
57478: PUSH
57479: LD_VAR 0 8
57483: ARRAY
57484: ST_TO_ADDR
// if x = - 1 then
57485: LD_VAR 0 13
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: EQUAL
57494: IFFALSE 57703
// begin for j in f do
57496: LD_ADDR_VAR 0 9
57500: PUSH
57501: LD_VAR 0 12
57505: PUSH
57506: FOR_IN
57507: IFFALSE 57699
// repeat InitHc ;
57509: CALL_OW 19
// if GetBType ( j ) = b_barracks then
57513: LD_VAR 0 9
57517: PPUSH
57518: CALL_OW 266
57522: PUSH
57523: LD_INT 5
57525: EQUAL
57526: IFFALSE 57596
// begin if UnitsInside ( j ) < 3 then
57528: LD_VAR 0 9
57532: PPUSH
57533: CALL_OW 313
57537: PUSH
57538: LD_INT 3
57540: LESS
57541: IFFALSE 57577
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57543: LD_INT 0
57545: PPUSH
57546: LD_INT 5
57548: PUSH
57549: LD_INT 8
57551: PUSH
57552: LD_INT 9
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: PUSH
57560: LD_VAR 0 17
57564: ARRAY
57565: PPUSH
57566: LD_VAR 0 4
57570: PPUSH
57571: CALL_OW 380
57575: GO 57594
// PrepareHuman ( false , i , skill ) ;
57577: LD_INT 0
57579: PPUSH
57580: LD_VAR 0 8
57584: PPUSH
57585: LD_VAR 0 4
57589: PPUSH
57590: CALL_OW 380
// end else
57594: GO 57613
// PrepareHuman ( false , i , skill ) ;
57596: LD_INT 0
57598: PPUSH
57599: LD_VAR 0 8
57603: PPUSH
57604: LD_VAR 0 4
57608: PPUSH
57609: CALL_OW 380
// un := CreateHuman ;
57613: LD_ADDR_VAR 0 14
57617: PUSH
57618: CALL_OW 44
57622: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57623: LD_ADDR_VAR 0 7
57627: PUSH
57628: LD_VAR 0 7
57632: PPUSH
57633: LD_INT 1
57635: PPUSH
57636: LD_VAR 0 14
57640: PPUSH
57641: CALL_OW 2
57645: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
57646: LD_VAR 0 14
57650: PPUSH
57651: LD_VAR 0 9
57655: PPUSH
57656: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
57660: LD_VAR 0 9
57664: PPUSH
57665: CALL_OW 313
57669: PUSH
57670: LD_INT 6
57672: EQUAL
57673: PUSH
57674: LD_VAR 0 9
57678: PPUSH
57679: CALL_OW 266
57683: PUSH
57684: LD_INT 32
57686: PUSH
57687: LD_INT 31
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: IN
57694: OR
57695: IFFALSE 57509
57697: GO 57506
57699: POP
57700: POP
// end else
57701: GO 58083
// for j = 1 to x do
57703: LD_ADDR_VAR 0 9
57707: PUSH
57708: DOUBLE
57709: LD_INT 1
57711: DEC
57712: ST_TO_ADDR
57713: LD_VAR 0 13
57717: PUSH
57718: FOR_TO
57719: IFFALSE 58081
// begin InitHc ;
57721: CALL_OW 19
// if not f then
57725: LD_VAR 0 12
57729: NOT
57730: IFFALSE 57819
// begin PrepareHuman ( false , i , skill ) ;
57732: LD_INT 0
57734: PPUSH
57735: LD_VAR 0 8
57739: PPUSH
57740: LD_VAR 0 4
57744: PPUSH
57745: CALL_OW 380
// un := CreateHuman ;
57749: LD_ADDR_VAR 0 14
57753: PUSH
57754: CALL_OW 44
57758: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57759: LD_ADDR_VAR 0 7
57763: PUSH
57764: LD_VAR 0 7
57768: PPUSH
57769: LD_INT 1
57771: PPUSH
57772: LD_VAR 0 14
57776: PPUSH
57777: CALL_OW 2
57781: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57782: LD_VAR 0 14
57786: PPUSH
57787: LD_VAR 0 1
57791: PPUSH
57792: CALL_OW 250
57796: PPUSH
57797: LD_VAR 0 1
57801: PPUSH
57802: CALL_OW 251
57806: PPUSH
57807: LD_INT 10
57809: PPUSH
57810: LD_INT 0
57812: PPUSH
57813: CALL_OW 50
// continue ;
57817: GO 57718
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
57819: LD_VAR 0 12
57823: PUSH
57824: LD_INT 1
57826: ARRAY
57827: PPUSH
57828: CALL_OW 313
57832: PUSH
57833: LD_VAR 0 12
57837: PUSH
57838: LD_INT 1
57840: ARRAY
57841: PPUSH
57842: CALL_OW 266
57846: PUSH
57847: LD_INT 32
57849: PUSH
57850: LD_INT 31
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: IN
57857: AND
57858: PUSH
57859: LD_VAR 0 12
57863: PUSH
57864: LD_INT 1
57866: ARRAY
57867: PPUSH
57868: CALL_OW 313
57872: PUSH
57873: LD_INT 6
57875: EQUAL
57876: OR
57877: IFFALSE 57897
// f := Delete ( f , 1 ) ;
57879: LD_ADDR_VAR 0 12
57883: PUSH
57884: LD_VAR 0 12
57888: PPUSH
57889: LD_INT 1
57891: PPUSH
57892: CALL_OW 3
57896: ST_TO_ADDR
// if not f then
57897: LD_VAR 0 12
57901: NOT
57902: IFFALSE 57920
// begin x := x + 2 ;
57904: LD_ADDR_VAR 0 13
57908: PUSH
57909: LD_VAR 0 13
57913: PUSH
57914: LD_INT 2
57916: PLUS
57917: ST_TO_ADDR
// continue ;
57918: GO 57718
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
57920: LD_VAR 0 12
57924: PUSH
57925: LD_INT 1
57927: ARRAY
57928: PPUSH
57929: CALL_OW 266
57933: PUSH
57934: LD_INT 5
57936: EQUAL
57937: IFFALSE 58011
// begin if UnitsInside ( f [ 1 ] ) < 3 then
57939: LD_VAR 0 12
57943: PUSH
57944: LD_INT 1
57946: ARRAY
57947: PPUSH
57948: CALL_OW 313
57952: PUSH
57953: LD_INT 3
57955: LESS
57956: IFFALSE 57992
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57958: LD_INT 0
57960: PPUSH
57961: LD_INT 5
57963: PUSH
57964: LD_INT 8
57966: PUSH
57967: LD_INT 9
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: PUSH
57975: LD_VAR 0 17
57979: ARRAY
57980: PPUSH
57981: LD_VAR 0 4
57985: PPUSH
57986: CALL_OW 380
57990: GO 58009
// PrepareHuman ( false , i , skill ) ;
57992: LD_INT 0
57994: PPUSH
57995: LD_VAR 0 8
57999: PPUSH
58000: LD_VAR 0 4
58004: PPUSH
58005: CALL_OW 380
// end else
58009: GO 58028
// PrepareHuman ( false , i , skill ) ;
58011: LD_INT 0
58013: PPUSH
58014: LD_VAR 0 8
58018: PPUSH
58019: LD_VAR 0 4
58023: PPUSH
58024: CALL_OW 380
// un := CreateHuman ;
58028: LD_ADDR_VAR 0 14
58032: PUSH
58033: CALL_OW 44
58037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58038: LD_ADDR_VAR 0 7
58042: PUSH
58043: LD_VAR 0 7
58047: PPUSH
58048: LD_INT 1
58050: PPUSH
58051: LD_VAR 0 14
58055: PPUSH
58056: CALL_OW 2
58060: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
58061: LD_VAR 0 14
58065: PPUSH
58066: LD_VAR 0 12
58070: PUSH
58071: LD_INT 1
58073: ARRAY
58074: PPUSH
58075: CALL_OW 52
// end ;
58079: GO 57718
58081: POP
58082: POP
// end ;
58083: GO 57020
58085: POP
58086: POP
// result := result ^ buildings ;
58087: LD_ADDR_VAR 0 7
58091: PUSH
58092: LD_VAR 0 7
58096: PUSH
58097: LD_VAR 0 18
58101: ADD
58102: ST_TO_ADDR
// end else
58103: GO 58246
// begin for i = 1 to personel do
58105: LD_ADDR_VAR 0 8
58109: PUSH
58110: DOUBLE
58111: LD_INT 1
58113: DEC
58114: ST_TO_ADDR
58115: LD_VAR 0 6
58119: PUSH
58120: FOR_TO
58121: IFFALSE 58244
// begin if i > 4 then
58123: LD_VAR 0 8
58127: PUSH
58128: LD_INT 4
58130: GREATER
58131: IFFALSE 58135
// break ;
58133: GO 58244
// x := personel [ i ] ;
58135: LD_ADDR_VAR 0 13
58139: PUSH
58140: LD_VAR 0 6
58144: PUSH
58145: LD_VAR 0 8
58149: ARRAY
58150: ST_TO_ADDR
// if x = - 1 then
58151: LD_VAR 0 13
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: EQUAL
58160: IFFALSE 58164
// continue ;
58162: GO 58120
// PrepareHuman ( false , i , skill ) ;
58164: LD_INT 0
58166: PPUSH
58167: LD_VAR 0 8
58171: PPUSH
58172: LD_VAR 0 4
58176: PPUSH
58177: CALL_OW 380
// un := CreateHuman ;
58181: LD_ADDR_VAR 0 14
58185: PUSH
58186: CALL_OW 44
58190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58191: LD_VAR 0 14
58195: PPUSH
58196: LD_VAR 0 1
58200: PPUSH
58201: CALL_OW 250
58205: PPUSH
58206: LD_VAR 0 1
58210: PPUSH
58211: CALL_OW 251
58215: PPUSH
58216: LD_INT 10
58218: PPUSH
58219: LD_INT 0
58221: PPUSH
58222: CALL_OW 50
// result := result ^ un ;
58226: LD_ADDR_VAR 0 7
58230: PUSH
58231: LD_VAR 0 7
58235: PUSH
58236: LD_VAR 0 14
58240: ADD
58241: ST_TO_ADDR
// end ;
58242: GO 58120
58244: POP
58245: POP
// end ; end ;
58246: LD_VAR 0 7
58250: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
58251: LD_INT 0
58253: PPUSH
58254: PPUSH
58255: PPUSH
58256: PPUSH
58257: PPUSH
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
58263: PPUSH
58264: PPUSH
58265: PPUSH
58266: PPUSH
58267: PPUSH
58268: PPUSH
// result := false ;
58269: LD_ADDR_VAR 0 3
58273: PUSH
58274: LD_INT 0
58276: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
58277: LD_VAR 0 1
58281: NOT
58282: PUSH
58283: LD_VAR 0 1
58287: PPUSH
58288: CALL_OW 266
58292: PUSH
58293: LD_INT 32
58295: PUSH
58296: LD_INT 33
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: IN
58303: NOT
58304: OR
58305: IFFALSE 58309
// exit ;
58307: GO 59445
// nat := GetNation ( tower ) ;
58309: LD_ADDR_VAR 0 12
58313: PUSH
58314: LD_VAR 0 1
58318: PPUSH
58319: CALL_OW 248
58323: ST_TO_ADDR
// side := GetSide ( tower ) ;
58324: LD_ADDR_VAR 0 16
58328: PUSH
58329: LD_VAR 0 1
58333: PPUSH
58334: CALL_OW 255
58338: ST_TO_ADDR
// x := GetX ( tower ) ;
58339: LD_ADDR_VAR 0 10
58343: PUSH
58344: LD_VAR 0 1
58348: PPUSH
58349: CALL_OW 250
58353: ST_TO_ADDR
// y := GetY ( tower ) ;
58354: LD_ADDR_VAR 0 11
58358: PUSH
58359: LD_VAR 0 1
58363: PPUSH
58364: CALL_OW 251
58368: ST_TO_ADDR
// if not x or not y then
58369: LD_VAR 0 10
58373: NOT
58374: PUSH
58375: LD_VAR 0 11
58379: NOT
58380: OR
58381: IFFALSE 58385
// exit ;
58383: GO 59445
// weapon := 0 ;
58385: LD_ADDR_VAR 0 18
58389: PUSH
58390: LD_INT 0
58392: ST_TO_ADDR
// fac_list := [ ] ;
58393: LD_ADDR_VAR 0 17
58397: PUSH
58398: EMPTY
58399: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
58400: LD_ADDR_VAR 0 6
58404: PUSH
58405: LD_VAR 0 1
58409: PPUSH
58410: CALL_OW 274
58414: PPUSH
58415: LD_VAR 0 2
58419: PPUSH
58420: CALL 56023 0 2
58424: PPUSH
58425: LD_INT 30
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PPUSH
58435: CALL_OW 72
58439: ST_TO_ADDR
// if not factories then
58440: LD_VAR 0 6
58444: NOT
58445: IFFALSE 58449
// exit ;
58447: GO 59445
// for i in factories do
58449: LD_ADDR_VAR 0 8
58453: PUSH
58454: LD_VAR 0 6
58458: PUSH
58459: FOR_IN
58460: IFFALSE 58485
// fac_list := fac_list union AvailableWeaponList ( i ) ;
58462: LD_ADDR_VAR 0 17
58466: PUSH
58467: LD_VAR 0 17
58471: PUSH
58472: LD_VAR 0 8
58476: PPUSH
58477: CALL_OW 478
58481: UNION
58482: ST_TO_ADDR
58483: GO 58459
58485: POP
58486: POP
// if not fac_list then
58487: LD_VAR 0 17
58491: NOT
58492: IFFALSE 58496
// exit ;
58494: GO 59445
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
58496: LD_ADDR_VAR 0 5
58500: PUSH
58501: LD_INT 4
58503: PUSH
58504: LD_INT 5
58506: PUSH
58507: LD_INT 9
58509: PUSH
58510: LD_INT 10
58512: PUSH
58513: LD_INT 6
58515: PUSH
58516: LD_INT 7
58518: PUSH
58519: LD_INT 11
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 27
58533: PUSH
58534: LD_INT 28
58536: PUSH
58537: LD_INT 26
58539: PUSH
58540: LD_INT 30
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 43
58551: PUSH
58552: LD_INT 44
58554: PUSH
58555: LD_INT 46
58557: PUSH
58558: LD_INT 45
58560: PUSH
58561: LD_INT 47
58563: PUSH
58564: LD_INT 49
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: PUSH
58580: LD_VAR 0 12
58584: ARRAY
58585: ST_TO_ADDR
// for i in list do
58586: LD_ADDR_VAR 0 8
58590: PUSH
58591: LD_VAR 0 5
58595: PUSH
58596: FOR_IN
58597: IFFALSE 58630
// if not i in fac_list then
58599: LD_VAR 0 8
58603: PUSH
58604: LD_VAR 0 17
58608: IN
58609: NOT
58610: IFFALSE 58628
// list := list diff i ;
58612: LD_ADDR_VAR 0 5
58616: PUSH
58617: LD_VAR 0 5
58621: PUSH
58622: LD_VAR 0 8
58626: DIFF
58627: ST_TO_ADDR
58628: GO 58596
58630: POP
58631: POP
// if not list then
58632: LD_VAR 0 5
58636: NOT
58637: IFFALSE 58641
// exit ;
58639: GO 59445
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
58641: LD_VAR 0 12
58645: PUSH
58646: LD_INT 3
58648: EQUAL
58649: PUSH
58650: LD_INT 49
58652: PUSH
58653: LD_VAR 0 5
58657: IN
58658: AND
58659: PUSH
58660: LD_INT 31
58662: PPUSH
58663: LD_VAR 0 16
58667: PPUSH
58668: CALL_OW 321
58672: PUSH
58673: LD_INT 2
58675: EQUAL
58676: AND
58677: IFFALSE 58737
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
58679: LD_INT 22
58681: PUSH
58682: LD_VAR 0 16
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 35
58693: PUSH
58694: LD_INT 49
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 91
58703: PUSH
58704: LD_VAR 0 1
58708: PUSH
58709: LD_INT 10
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: PPUSH
58722: CALL_OW 69
58726: NOT
58727: IFFALSE 58737
// weapon := ru_time_lapser ;
58729: LD_ADDR_VAR 0 18
58733: PUSH
58734: LD_INT 49
58736: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
58737: LD_VAR 0 12
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: IN
58752: PUSH
58753: LD_INT 11
58755: PUSH
58756: LD_VAR 0 5
58760: IN
58761: PUSH
58762: LD_INT 30
58764: PUSH
58765: LD_VAR 0 5
58769: IN
58770: OR
58771: AND
58772: PUSH
58773: LD_INT 6
58775: PPUSH
58776: LD_VAR 0 16
58780: PPUSH
58781: CALL_OW 321
58785: PUSH
58786: LD_INT 2
58788: EQUAL
58789: AND
58790: IFFALSE 58955
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
58792: LD_INT 22
58794: PUSH
58795: LD_VAR 0 16
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: LD_INT 35
58809: PUSH
58810: LD_INT 11
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 35
58819: PUSH
58820: LD_INT 30
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 91
58834: PUSH
58835: LD_VAR 0 1
58839: PUSH
58840: LD_INT 18
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: PPUSH
58853: CALL_OW 69
58857: NOT
58858: PUSH
58859: LD_INT 22
58861: PUSH
58862: LD_VAR 0 16
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 30
58876: PUSH
58877: LD_INT 32
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 30
58886: PUSH
58887: LD_INT 33
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 91
58901: PUSH
58902: LD_VAR 0 1
58906: PUSH
58907: LD_INT 12
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: PPUSH
58923: CALL_OW 69
58927: PUSH
58928: LD_INT 2
58930: GREATER
58931: AND
58932: IFFALSE 58955
// weapon := [ us_radar , ar_radar ] [ nat ] ;
58934: LD_ADDR_VAR 0 18
58938: PUSH
58939: LD_INT 11
58941: PUSH
58942: LD_INT 30
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 12
58953: ARRAY
58954: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
58955: LD_VAR 0 18
58959: NOT
58960: PUSH
58961: LD_INT 40
58963: PPUSH
58964: LD_VAR 0 16
58968: PPUSH
58969: CALL_OW 321
58973: PUSH
58974: LD_INT 2
58976: EQUAL
58977: AND
58978: PUSH
58979: LD_INT 7
58981: PUSH
58982: LD_VAR 0 5
58986: IN
58987: PUSH
58988: LD_INT 28
58990: PUSH
58991: LD_VAR 0 5
58995: IN
58996: OR
58997: PUSH
58998: LD_INT 45
59000: PUSH
59001: LD_VAR 0 5
59005: IN
59006: OR
59007: AND
59008: IFFALSE 59262
// begin hex := GetHexInfo ( x , y ) ;
59010: LD_ADDR_VAR 0 4
59014: PUSH
59015: LD_VAR 0 10
59019: PPUSH
59020: LD_VAR 0 11
59024: PPUSH
59025: CALL_OW 546
59029: ST_TO_ADDR
// if hex [ 1 ] then
59030: LD_VAR 0 4
59034: PUSH
59035: LD_INT 1
59037: ARRAY
59038: IFFALSE 59042
// exit ;
59040: GO 59445
// height := hex [ 2 ] ;
59042: LD_ADDR_VAR 0 15
59046: PUSH
59047: LD_VAR 0 4
59051: PUSH
59052: LD_INT 2
59054: ARRAY
59055: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
59056: LD_ADDR_VAR 0 14
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: LD_INT 3
59069: PUSH
59070: LD_INT 5
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: ST_TO_ADDR
// for i in tmp do
59079: LD_ADDR_VAR 0 8
59083: PUSH
59084: LD_VAR 0 14
59088: PUSH
59089: FOR_IN
59090: IFFALSE 59260
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
59092: LD_ADDR_VAR 0 9
59096: PUSH
59097: LD_VAR 0 10
59101: PPUSH
59102: LD_VAR 0 8
59106: PPUSH
59107: LD_INT 5
59109: PPUSH
59110: CALL_OW 272
59114: PUSH
59115: LD_VAR 0 11
59119: PPUSH
59120: LD_VAR 0 8
59124: PPUSH
59125: LD_INT 5
59127: PPUSH
59128: CALL_OW 273
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
59137: LD_VAR 0 9
59141: PUSH
59142: LD_INT 1
59144: ARRAY
59145: PPUSH
59146: LD_VAR 0 9
59150: PUSH
59151: LD_INT 2
59153: ARRAY
59154: PPUSH
59155: CALL_OW 488
59159: IFFALSE 59258
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
59161: LD_ADDR_VAR 0 4
59165: PUSH
59166: LD_VAR 0 9
59170: PUSH
59171: LD_INT 1
59173: ARRAY
59174: PPUSH
59175: LD_VAR 0 9
59179: PUSH
59180: LD_INT 2
59182: ARRAY
59183: PPUSH
59184: CALL_OW 546
59188: ST_TO_ADDR
// if hex [ 1 ] then
59189: LD_VAR 0 4
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: IFFALSE 59201
// continue ;
59199: GO 59089
// h := hex [ 2 ] ;
59201: LD_ADDR_VAR 0 13
59205: PUSH
59206: LD_VAR 0 4
59210: PUSH
59211: LD_INT 2
59213: ARRAY
59214: ST_TO_ADDR
// if h + 7 < height then
59215: LD_VAR 0 13
59219: PUSH
59220: LD_INT 7
59222: PLUS
59223: PUSH
59224: LD_VAR 0 15
59228: LESS
59229: IFFALSE 59258
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
59231: LD_ADDR_VAR 0 18
59235: PUSH
59236: LD_INT 7
59238: PUSH
59239: LD_INT 28
59241: PUSH
59242: LD_INT 45
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: LIST
59249: PUSH
59250: LD_VAR 0 12
59254: ARRAY
59255: ST_TO_ADDR
// break ;
59256: GO 59260
// end ; end ; end ;
59258: GO 59089
59260: POP
59261: POP
// end ; if not weapon then
59262: LD_VAR 0 18
59266: NOT
59267: IFFALSE 59327
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
59269: LD_ADDR_VAR 0 5
59273: PUSH
59274: LD_VAR 0 5
59278: PUSH
59279: LD_INT 11
59281: PUSH
59282: LD_INT 30
59284: PUSH
59285: LD_INT 49
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: DIFF
59293: ST_TO_ADDR
// if not list then
59294: LD_VAR 0 5
59298: NOT
59299: IFFALSE 59303
// exit ;
59301: GO 59445
// weapon := list [ rand ( 1 , list ) ] ;
59303: LD_ADDR_VAR 0 18
59307: PUSH
59308: LD_VAR 0 5
59312: PUSH
59313: LD_INT 1
59315: PPUSH
59316: LD_VAR 0 5
59320: PPUSH
59321: CALL_OW 12
59325: ARRAY
59326: ST_TO_ADDR
// end ; if weapon then
59327: LD_VAR 0 18
59331: IFFALSE 59445
// begin tmp := CostOfWeapon ( weapon ) ;
59333: LD_ADDR_VAR 0 14
59337: PUSH
59338: LD_VAR 0 18
59342: PPUSH
59343: CALL_OW 451
59347: ST_TO_ADDR
// j := GetBase ( tower ) ;
59348: LD_ADDR_VAR 0 9
59352: PUSH
59353: LD_VAR 0 1
59357: PPUSH
59358: CALL_OW 274
59362: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
59363: LD_VAR 0 9
59367: PPUSH
59368: LD_INT 1
59370: PPUSH
59371: CALL_OW 275
59375: PUSH
59376: LD_VAR 0 14
59380: PUSH
59381: LD_INT 1
59383: ARRAY
59384: GREATEREQUAL
59385: PUSH
59386: LD_VAR 0 9
59390: PPUSH
59391: LD_INT 2
59393: PPUSH
59394: CALL_OW 275
59398: PUSH
59399: LD_VAR 0 14
59403: PUSH
59404: LD_INT 2
59406: ARRAY
59407: GREATEREQUAL
59408: AND
59409: PUSH
59410: LD_VAR 0 9
59414: PPUSH
59415: LD_INT 3
59417: PPUSH
59418: CALL_OW 275
59422: PUSH
59423: LD_VAR 0 14
59427: PUSH
59428: LD_INT 3
59430: ARRAY
59431: GREATEREQUAL
59432: AND
59433: IFFALSE 59445
// result := weapon ;
59435: LD_ADDR_VAR 0 3
59439: PUSH
59440: LD_VAR 0 18
59444: ST_TO_ADDR
// end ; end ;
59445: LD_VAR 0 3
59449: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
59450: LD_INT 0
59452: PPUSH
59453: PPUSH
// result := true ;
59454: LD_ADDR_VAR 0 3
59458: PUSH
59459: LD_INT 1
59461: ST_TO_ADDR
// if array1 = array2 then
59462: LD_VAR 0 1
59466: PUSH
59467: LD_VAR 0 2
59471: EQUAL
59472: IFFALSE 59532
// begin for i = 1 to array1 do
59474: LD_ADDR_VAR 0 4
59478: PUSH
59479: DOUBLE
59480: LD_INT 1
59482: DEC
59483: ST_TO_ADDR
59484: LD_VAR 0 1
59488: PUSH
59489: FOR_TO
59490: IFFALSE 59528
// if array1 [ i ] <> array2 [ i ] then
59492: LD_VAR 0 1
59496: PUSH
59497: LD_VAR 0 4
59501: ARRAY
59502: PUSH
59503: LD_VAR 0 2
59507: PUSH
59508: LD_VAR 0 4
59512: ARRAY
59513: NONEQUAL
59514: IFFALSE 59526
// begin result := false ;
59516: LD_ADDR_VAR 0 3
59520: PUSH
59521: LD_INT 0
59523: ST_TO_ADDR
// break ;
59524: GO 59528
// end ;
59526: GO 59489
59528: POP
59529: POP
// end else
59530: GO 59540
// result := false ;
59532: LD_ADDR_VAR 0 3
59536: PUSH
59537: LD_INT 0
59539: ST_TO_ADDR
// end ;
59540: LD_VAR 0 3
59544: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
59545: LD_INT 0
59547: PPUSH
59548: PPUSH
59549: PPUSH
// pom := GetBase ( fac ) ;
59550: LD_ADDR_VAR 0 5
59554: PUSH
59555: LD_VAR 0 1
59559: PPUSH
59560: CALL_OW 274
59564: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
59565: LD_ADDR_VAR 0 4
59569: PUSH
59570: LD_VAR 0 2
59574: PUSH
59575: LD_INT 1
59577: ARRAY
59578: PPUSH
59579: LD_VAR 0 2
59583: PUSH
59584: LD_INT 2
59586: ARRAY
59587: PPUSH
59588: LD_VAR 0 2
59592: PUSH
59593: LD_INT 3
59595: ARRAY
59596: PPUSH
59597: LD_VAR 0 2
59601: PUSH
59602: LD_INT 4
59604: ARRAY
59605: PPUSH
59606: CALL_OW 449
59610: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59611: LD_ADDR_VAR 0 3
59615: PUSH
59616: LD_VAR 0 5
59620: PPUSH
59621: LD_INT 1
59623: PPUSH
59624: CALL_OW 275
59628: PUSH
59629: LD_VAR 0 4
59633: PUSH
59634: LD_INT 1
59636: ARRAY
59637: GREATEREQUAL
59638: PUSH
59639: LD_VAR 0 5
59643: PPUSH
59644: LD_INT 2
59646: PPUSH
59647: CALL_OW 275
59651: PUSH
59652: LD_VAR 0 4
59656: PUSH
59657: LD_INT 2
59659: ARRAY
59660: GREATEREQUAL
59661: AND
59662: PUSH
59663: LD_VAR 0 5
59667: PPUSH
59668: LD_INT 3
59670: PPUSH
59671: CALL_OW 275
59675: PUSH
59676: LD_VAR 0 4
59680: PUSH
59681: LD_INT 3
59683: ARRAY
59684: GREATEREQUAL
59685: AND
59686: ST_TO_ADDR
// end ;
59687: LD_VAR 0 3
59691: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
59692: LD_INT 0
59694: PPUSH
59695: PPUSH
59696: PPUSH
59697: PPUSH
// pom := GetBase ( building ) ;
59698: LD_ADDR_VAR 0 3
59702: PUSH
59703: LD_VAR 0 1
59707: PPUSH
59708: CALL_OW 274
59712: ST_TO_ADDR
// if not pom then
59713: LD_VAR 0 3
59717: NOT
59718: IFFALSE 59722
// exit ;
59720: GO 59892
// btype := GetBType ( building ) ;
59722: LD_ADDR_VAR 0 5
59726: PUSH
59727: LD_VAR 0 1
59731: PPUSH
59732: CALL_OW 266
59736: ST_TO_ADDR
// if btype = b_armoury then
59737: LD_VAR 0 5
59741: PUSH
59742: LD_INT 4
59744: EQUAL
59745: IFFALSE 59755
// btype := b_barracks ;
59747: LD_ADDR_VAR 0 5
59751: PUSH
59752: LD_INT 5
59754: ST_TO_ADDR
// if btype = b_depot then
59755: LD_VAR 0 5
59759: PUSH
59760: LD_INT 0
59762: EQUAL
59763: IFFALSE 59773
// btype := b_warehouse ;
59765: LD_ADDR_VAR 0 5
59769: PUSH
59770: LD_INT 1
59772: ST_TO_ADDR
// if btype = b_workshop then
59773: LD_VAR 0 5
59777: PUSH
59778: LD_INT 2
59780: EQUAL
59781: IFFALSE 59791
// btype := b_factory ;
59783: LD_ADDR_VAR 0 5
59787: PUSH
59788: LD_INT 3
59790: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59791: LD_ADDR_VAR 0 4
59795: PUSH
59796: LD_VAR 0 5
59800: PPUSH
59801: LD_VAR 0 1
59805: PPUSH
59806: CALL_OW 248
59810: PPUSH
59811: CALL_OW 450
59815: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59816: LD_ADDR_VAR 0 2
59820: PUSH
59821: LD_VAR 0 3
59825: PPUSH
59826: LD_INT 1
59828: PPUSH
59829: CALL_OW 275
59833: PUSH
59834: LD_VAR 0 4
59838: PUSH
59839: LD_INT 1
59841: ARRAY
59842: GREATEREQUAL
59843: PUSH
59844: LD_VAR 0 3
59848: PPUSH
59849: LD_INT 2
59851: PPUSH
59852: CALL_OW 275
59856: PUSH
59857: LD_VAR 0 4
59861: PUSH
59862: LD_INT 2
59864: ARRAY
59865: GREATEREQUAL
59866: AND
59867: PUSH
59868: LD_VAR 0 3
59872: PPUSH
59873: LD_INT 3
59875: PPUSH
59876: CALL_OW 275
59880: PUSH
59881: LD_VAR 0 4
59885: PUSH
59886: LD_INT 3
59888: ARRAY
59889: GREATEREQUAL
59890: AND
59891: ST_TO_ADDR
// end ;
59892: LD_VAR 0 2
59896: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
59897: LD_INT 0
59899: PPUSH
59900: PPUSH
59901: PPUSH
// pom := GetBase ( building ) ;
59902: LD_ADDR_VAR 0 4
59906: PUSH
59907: LD_VAR 0 1
59911: PPUSH
59912: CALL_OW 274
59916: ST_TO_ADDR
// if not pom then
59917: LD_VAR 0 4
59921: NOT
59922: IFFALSE 59926
// exit ;
59924: GO 60027
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59926: LD_ADDR_VAR 0 5
59930: PUSH
59931: LD_VAR 0 2
59935: PPUSH
59936: LD_VAR 0 1
59940: PPUSH
59941: CALL_OW 248
59945: PPUSH
59946: CALL_OW 450
59950: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59951: LD_ADDR_VAR 0 3
59955: PUSH
59956: LD_VAR 0 4
59960: PPUSH
59961: LD_INT 1
59963: PPUSH
59964: CALL_OW 275
59968: PUSH
59969: LD_VAR 0 5
59973: PUSH
59974: LD_INT 1
59976: ARRAY
59977: GREATEREQUAL
59978: PUSH
59979: LD_VAR 0 4
59983: PPUSH
59984: LD_INT 2
59986: PPUSH
59987: CALL_OW 275
59991: PUSH
59992: LD_VAR 0 5
59996: PUSH
59997: LD_INT 2
59999: ARRAY
60000: GREATEREQUAL
60001: AND
60002: PUSH
60003: LD_VAR 0 4
60007: PPUSH
60008: LD_INT 3
60010: PPUSH
60011: CALL_OW 275
60015: PUSH
60016: LD_VAR 0 5
60020: PUSH
60021: LD_INT 3
60023: ARRAY
60024: GREATEREQUAL
60025: AND
60026: ST_TO_ADDR
// end ;
60027: LD_VAR 0 3
60031: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
60032: LD_INT 0
60034: PPUSH
60035: PPUSH
60036: PPUSH
60037: PPUSH
60038: PPUSH
60039: PPUSH
60040: PPUSH
60041: PPUSH
60042: PPUSH
60043: PPUSH
// result := false ;
60044: LD_ADDR_VAR 0 6
60048: PUSH
60049: LD_INT 0
60051: ST_TO_ADDR
// if not base or not btype or not x or not y then
60052: LD_VAR 0 1
60056: NOT
60057: PUSH
60058: LD_VAR 0 2
60062: NOT
60063: OR
60064: PUSH
60065: LD_VAR 0 3
60069: NOT
60070: OR
60071: PUSH
60072: LD_VAR 0 4
60076: NOT
60077: OR
60078: IFFALSE 60082
// exit ;
60080: GO 60691
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
60082: LD_ADDR_VAR 0 12
60086: PUSH
60087: LD_VAR 0 2
60091: PPUSH
60092: LD_VAR 0 3
60096: PPUSH
60097: LD_VAR 0 4
60101: PPUSH
60102: LD_VAR 0 5
60106: PPUSH
60107: LD_VAR 0 1
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PPUSH
60116: CALL_OW 248
60120: PPUSH
60121: LD_INT 0
60123: PPUSH
60124: CALL 61528 0 6
60128: ST_TO_ADDR
// if not hexes then
60129: LD_VAR 0 12
60133: NOT
60134: IFFALSE 60138
// exit ;
60136: GO 60691
// for i = 1 to hexes do
60138: LD_ADDR_VAR 0 7
60142: PUSH
60143: DOUBLE
60144: LD_INT 1
60146: DEC
60147: ST_TO_ADDR
60148: LD_VAR 0 12
60152: PUSH
60153: FOR_TO
60154: IFFALSE 60689
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60156: LD_ADDR_VAR 0 11
60160: PUSH
60161: LD_VAR 0 12
60165: PUSH
60166: LD_VAR 0 7
60170: ARRAY
60171: PUSH
60172: LD_INT 1
60174: ARRAY
60175: PPUSH
60176: LD_VAR 0 12
60180: PUSH
60181: LD_VAR 0 7
60185: ARRAY
60186: PUSH
60187: LD_INT 2
60189: ARRAY
60190: PPUSH
60191: CALL_OW 428
60195: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
60196: LD_VAR 0 12
60200: PUSH
60201: LD_VAR 0 7
60205: ARRAY
60206: PUSH
60207: LD_INT 1
60209: ARRAY
60210: PPUSH
60211: LD_VAR 0 12
60215: PUSH
60216: LD_VAR 0 7
60220: ARRAY
60221: PUSH
60222: LD_INT 2
60224: ARRAY
60225: PPUSH
60226: CALL_OW 351
60230: PUSH
60231: LD_VAR 0 12
60235: PUSH
60236: LD_VAR 0 7
60240: ARRAY
60241: PUSH
60242: LD_INT 1
60244: ARRAY
60245: PPUSH
60246: LD_VAR 0 12
60250: PUSH
60251: LD_VAR 0 7
60255: ARRAY
60256: PUSH
60257: LD_INT 2
60259: ARRAY
60260: PPUSH
60261: CALL_OW 488
60265: NOT
60266: OR
60267: PUSH
60268: LD_VAR 0 11
60272: PPUSH
60273: CALL_OW 247
60277: PUSH
60278: LD_INT 3
60280: EQUAL
60281: OR
60282: IFFALSE 60288
// exit ;
60284: POP
60285: POP
60286: GO 60691
// if not tmp or not tmp in base then
60288: LD_VAR 0 11
60292: NOT
60293: PUSH
60294: LD_VAR 0 11
60298: PUSH
60299: LD_VAR 0 1
60303: IN
60304: NOT
60305: OR
60306: IFFALSE 60310
// continue ;
60308: GO 60153
// result := true ;
60310: LD_ADDR_VAR 0 6
60314: PUSH
60315: LD_INT 1
60317: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60318: LD_ADDR_VAR 0 15
60322: PUSH
60323: LD_VAR 0 1
60327: PPUSH
60328: LD_INT 22
60330: PUSH
60331: LD_VAR 0 11
60335: PPUSH
60336: CALL_OW 255
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: LD_INT 30
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 30
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PPUSH
60377: CALL_OW 72
60381: ST_TO_ADDR
// if dep then
60382: LD_VAR 0 15
60386: IFFALSE 60522
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
60388: LD_ADDR_VAR 0 14
60392: PUSH
60393: LD_VAR 0 15
60397: PUSH
60398: LD_INT 1
60400: ARRAY
60401: PPUSH
60402: CALL_OW 250
60406: PPUSH
60407: LD_VAR 0 15
60411: PUSH
60412: LD_INT 1
60414: ARRAY
60415: PPUSH
60416: CALL_OW 254
60420: PPUSH
60421: LD_INT 5
60423: PPUSH
60424: CALL_OW 272
60428: PUSH
60429: LD_VAR 0 15
60433: PUSH
60434: LD_INT 1
60436: ARRAY
60437: PPUSH
60438: CALL_OW 251
60442: PPUSH
60443: LD_VAR 0 15
60447: PUSH
60448: LD_INT 1
60450: ARRAY
60451: PPUSH
60452: CALL_OW 254
60456: PPUSH
60457: LD_INT 5
60459: PPUSH
60460: CALL_OW 273
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
60469: LD_VAR 0 14
60473: PUSH
60474: LD_INT 1
60476: ARRAY
60477: PPUSH
60478: LD_VAR 0 14
60482: PUSH
60483: LD_INT 2
60485: ARRAY
60486: PPUSH
60487: CALL_OW 488
60491: IFFALSE 60522
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
60493: LD_VAR 0 11
60497: PPUSH
60498: LD_VAR 0 14
60502: PUSH
60503: LD_INT 1
60505: ARRAY
60506: PPUSH
60507: LD_VAR 0 14
60511: PUSH
60512: LD_INT 2
60514: ARRAY
60515: PPUSH
60516: CALL_OW 111
// continue ;
60520: GO 60153
// end ; end ; r := GetDir ( tmp ) ;
60522: LD_ADDR_VAR 0 13
60526: PUSH
60527: LD_VAR 0 11
60531: PPUSH
60532: CALL_OW 254
60536: ST_TO_ADDR
// if r = 5 then
60537: LD_VAR 0 13
60541: PUSH
60542: LD_INT 5
60544: EQUAL
60545: IFFALSE 60555
// r := 0 ;
60547: LD_ADDR_VAR 0 13
60551: PUSH
60552: LD_INT 0
60554: ST_TO_ADDR
// for j = r to 5 do
60555: LD_ADDR_VAR 0 8
60559: PUSH
60560: DOUBLE
60561: LD_VAR 0 13
60565: DEC
60566: ST_TO_ADDR
60567: LD_INT 5
60569: PUSH
60570: FOR_TO
60571: IFFALSE 60685
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
60573: LD_ADDR_VAR 0 9
60577: PUSH
60578: LD_VAR 0 11
60582: PPUSH
60583: CALL_OW 250
60587: PPUSH
60588: LD_VAR 0 8
60592: PPUSH
60593: LD_INT 2
60595: PPUSH
60596: CALL_OW 272
60600: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
60601: LD_ADDR_VAR 0 10
60605: PUSH
60606: LD_VAR 0 11
60610: PPUSH
60611: CALL_OW 251
60615: PPUSH
60616: LD_VAR 0 8
60620: PPUSH
60621: LD_INT 2
60623: PPUSH
60624: CALL_OW 273
60628: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
60629: LD_VAR 0 9
60633: PPUSH
60634: LD_VAR 0 10
60638: PPUSH
60639: CALL_OW 488
60643: PUSH
60644: LD_VAR 0 9
60648: PPUSH
60649: LD_VAR 0 10
60653: PPUSH
60654: CALL_OW 428
60658: NOT
60659: AND
60660: IFFALSE 60683
// begin ComMoveXY ( tmp , _x , _y ) ;
60662: LD_VAR 0 11
60666: PPUSH
60667: LD_VAR 0 9
60671: PPUSH
60672: LD_VAR 0 10
60676: PPUSH
60677: CALL_OW 111
// break ;
60681: GO 60685
// end ; end ;
60683: GO 60570
60685: POP
60686: POP
// end ;
60687: GO 60153
60689: POP
60690: POP
// end ;
60691: LD_VAR 0 6
60695: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
60696: LD_INT 0
60698: PPUSH
60699: PPUSH
60700: PPUSH
60701: PPUSH
60702: PPUSH
60703: PPUSH
60704: PPUSH
60705: PPUSH
60706: PPUSH
60707: PPUSH
// result := false ;
60708: LD_ADDR_VAR 0 6
60712: PUSH
60713: LD_INT 0
60715: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
60716: LD_VAR 0 1
60720: NOT
60721: PUSH
60722: LD_VAR 0 1
60726: PPUSH
60727: CALL_OW 266
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: IN
60742: NOT
60743: OR
60744: PUSH
60745: LD_VAR 0 2
60749: NOT
60750: OR
60751: PUSH
60752: LD_VAR 0 5
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: LD_INT 5
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: IN
60783: NOT
60784: OR
60785: PUSH
60786: LD_VAR 0 3
60790: PPUSH
60791: LD_VAR 0 4
60795: PPUSH
60796: CALL_OW 488
60800: NOT
60801: OR
60802: IFFALSE 60806
// exit ;
60804: GO 61523
// pom := GetBase ( depot ) ;
60806: LD_ADDR_VAR 0 10
60810: PUSH
60811: LD_VAR 0 1
60815: PPUSH
60816: CALL_OW 274
60820: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
60821: LD_ADDR_VAR 0 11
60825: PUSH
60826: LD_VAR 0 2
60830: PPUSH
60831: LD_VAR 0 1
60835: PPUSH
60836: CALL_OW 248
60840: PPUSH
60841: CALL_OW 450
60845: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
60846: LD_VAR 0 10
60850: PPUSH
60851: LD_INT 1
60853: PPUSH
60854: CALL_OW 275
60858: PUSH
60859: LD_VAR 0 11
60863: PUSH
60864: LD_INT 1
60866: ARRAY
60867: GREATEREQUAL
60868: PUSH
60869: LD_VAR 0 10
60873: PPUSH
60874: LD_INT 2
60876: PPUSH
60877: CALL_OW 275
60881: PUSH
60882: LD_VAR 0 11
60886: PUSH
60887: LD_INT 2
60889: ARRAY
60890: GREATEREQUAL
60891: AND
60892: PUSH
60893: LD_VAR 0 10
60897: PPUSH
60898: LD_INT 3
60900: PPUSH
60901: CALL_OW 275
60905: PUSH
60906: LD_VAR 0 11
60910: PUSH
60911: LD_INT 3
60913: ARRAY
60914: GREATEREQUAL
60915: AND
60916: NOT
60917: IFFALSE 60921
// exit ;
60919: GO 61523
// if GetBType ( depot ) = b_depot then
60921: LD_VAR 0 1
60925: PPUSH
60926: CALL_OW 266
60930: PUSH
60931: LD_INT 0
60933: EQUAL
60934: IFFALSE 60946
// dist := 28 else
60936: LD_ADDR_VAR 0 14
60940: PUSH
60941: LD_INT 28
60943: ST_TO_ADDR
60944: GO 60954
// dist := 36 ;
60946: LD_ADDR_VAR 0 14
60950: PUSH
60951: LD_INT 36
60953: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
60954: LD_VAR 0 1
60958: PPUSH
60959: LD_VAR 0 3
60963: PPUSH
60964: LD_VAR 0 4
60968: PPUSH
60969: CALL_OW 297
60973: PUSH
60974: LD_VAR 0 14
60978: GREATER
60979: IFFALSE 60983
// exit ;
60981: GO 61523
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
60983: LD_ADDR_VAR 0 12
60987: PUSH
60988: LD_VAR 0 2
60992: PPUSH
60993: LD_VAR 0 3
60997: PPUSH
60998: LD_VAR 0 4
61002: PPUSH
61003: LD_VAR 0 5
61007: PPUSH
61008: LD_VAR 0 1
61012: PPUSH
61013: CALL_OW 248
61017: PPUSH
61018: LD_INT 0
61020: PPUSH
61021: CALL 61528 0 6
61025: ST_TO_ADDR
// if not hexes then
61026: LD_VAR 0 12
61030: NOT
61031: IFFALSE 61035
// exit ;
61033: GO 61523
// hex := GetHexInfo ( x , y ) ;
61035: LD_ADDR_VAR 0 15
61039: PUSH
61040: LD_VAR 0 3
61044: PPUSH
61045: LD_VAR 0 4
61049: PPUSH
61050: CALL_OW 546
61054: ST_TO_ADDR
// if hex [ 1 ] then
61055: LD_VAR 0 15
61059: PUSH
61060: LD_INT 1
61062: ARRAY
61063: IFFALSE 61067
// exit ;
61065: GO 61523
// height := hex [ 2 ] ;
61067: LD_ADDR_VAR 0 13
61071: PUSH
61072: LD_VAR 0 15
61076: PUSH
61077: LD_INT 2
61079: ARRAY
61080: ST_TO_ADDR
// for i = 1 to hexes do
61081: LD_ADDR_VAR 0 7
61085: PUSH
61086: DOUBLE
61087: LD_INT 1
61089: DEC
61090: ST_TO_ADDR
61091: LD_VAR 0 12
61095: PUSH
61096: FOR_TO
61097: IFFALSE 61427
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
61099: LD_VAR 0 12
61103: PUSH
61104: LD_VAR 0 7
61108: ARRAY
61109: PUSH
61110: LD_INT 1
61112: ARRAY
61113: PPUSH
61114: LD_VAR 0 12
61118: PUSH
61119: LD_VAR 0 7
61123: ARRAY
61124: PUSH
61125: LD_INT 2
61127: ARRAY
61128: PPUSH
61129: CALL_OW 488
61133: NOT
61134: PUSH
61135: LD_VAR 0 12
61139: PUSH
61140: LD_VAR 0 7
61144: ARRAY
61145: PUSH
61146: LD_INT 1
61148: ARRAY
61149: PPUSH
61150: LD_VAR 0 12
61154: PUSH
61155: LD_VAR 0 7
61159: ARRAY
61160: PUSH
61161: LD_INT 2
61163: ARRAY
61164: PPUSH
61165: CALL_OW 428
61169: PUSH
61170: LD_INT 0
61172: GREATER
61173: OR
61174: PUSH
61175: LD_VAR 0 12
61179: PUSH
61180: LD_VAR 0 7
61184: ARRAY
61185: PUSH
61186: LD_INT 1
61188: ARRAY
61189: PPUSH
61190: LD_VAR 0 12
61194: PUSH
61195: LD_VAR 0 7
61199: ARRAY
61200: PUSH
61201: LD_INT 2
61203: ARRAY
61204: PPUSH
61205: CALL_OW 351
61209: OR
61210: IFFALSE 61216
// exit ;
61212: POP
61213: POP
61214: GO 61523
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61216: LD_ADDR_VAR 0 8
61220: PUSH
61221: LD_VAR 0 12
61225: PUSH
61226: LD_VAR 0 7
61230: ARRAY
61231: PUSH
61232: LD_INT 1
61234: ARRAY
61235: PPUSH
61236: LD_VAR 0 12
61240: PUSH
61241: LD_VAR 0 7
61245: ARRAY
61246: PUSH
61247: LD_INT 2
61249: ARRAY
61250: PPUSH
61251: CALL_OW 546
61255: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
61256: LD_VAR 0 8
61260: PUSH
61261: LD_INT 1
61263: ARRAY
61264: PUSH
61265: LD_VAR 0 8
61269: PUSH
61270: LD_INT 2
61272: ARRAY
61273: PUSH
61274: LD_VAR 0 13
61278: PUSH
61279: LD_INT 2
61281: PLUS
61282: GREATER
61283: OR
61284: PUSH
61285: LD_VAR 0 8
61289: PUSH
61290: LD_INT 2
61292: ARRAY
61293: PUSH
61294: LD_VAR 0 13
61298: PUSH
61299: LD_INT 2
61301: MINUS
61302: LESS
61303: OR
61304: PUSH
61305: LD_VAR 0 8
61309: PUSH
61310: LD_INT 3
61312: ARRAY
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 8
61319: PUSH
61320: LD_INT 9
61322: PUSH
61323: LD_INT 10
61325: PUSH
61326: LD_INT 11
61328: PUSH
61329: LD_INT 12
61331: PUSH
61332: LD_INT 13
61334: PUSH
61335: LD_INT 16
61337: PUSH
61338: LD_INT 17
61340: PUSH
61341: LD_INT 18
61343: PUSH
61344: LD_INT 19
61346: PUSH
61347: LD_INT 20
61349: PUSH
61350: LD_INT 21
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: IN
61368: NOT
61369: OR
61370: PUSH
61371: LD_VAR 0 8
61375: PUSH
61376: LD_INT 5
61378: ARRAY
61379: NOT
61380: OR
61381: PUSH
61382: LD_VAR 0 8
61386: PUSH
61387: LD_INT 6
61389: ARRAY
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 7
61399: PUSH
61400: LD_INT 9
61402: PUSH
61403: LD_INT 10
61405: PUSH
61406: LD_INT 11
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: IN
61417: NOT
61418: OR
61419: IFFALSE 61425
// exit ;
61421: POP
61422: POP
61423: GO 61523
// end ;
61425: GO 61096
61427: POP
61428: POP
// side := GetSide ( depot ) ;
61429: LD_ADDR_VAR 0 9
61433: PUSH
61434: LD_VAR 0 1
61438: PPUSH
61439: CALL_OW 255
61443: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
61444: LD_VAR 0 9
61448: PPUSH
61449: LD_VAR 0 3
61453: PPUSH
61454: LD_VAR 0 4
61458: PPUSH
61459: LD_INT 20
61461: PPUSH
61462: CALL 54177 0 4
61466: PUSH
61467: LD_INT 4
61469: ARRAY
61470: IFFALSE 61474
// exit ;
61472: GO 61523
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
61474: LD_VAR 0 2
61478: PUSH
61479: LD_INT 29
61481: PUSH
61482: LD_INT 30
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: IN
61489: PUSH
61490: LD_VAR 0 3
61494: PPUSH
61495: LD_VAR 0 4
61499: PPUSH
61500: LD_VAR 0 9
61504: PPUSH
61505: CALL_OW 440
61509: NOT
61510: AND
61511: IFFALSE 61515
// exit ;
61513: GO 61523
// result := true ;
61515: LD_ADDR_VAR 0 6
61519: PUSH
61520: LD_INT 1
61522: ST_TO_ADDR
// end ;
61523: LD_VAR 0 6
61527: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
61528: LD_INT 0
61530: PPUSH
61531: PPUSH
61532: PPUSH
61533: PPUSH
61534: PPUSH
61535: PPUSH
61536: PPUSH
61537: PPUSH
61538: PPUSH
61539: PPUSH
61540: PPUSH
61541: PPUSH
61542: PPUSH
61543: PPUSH
61544: PPUSH
61545: PPUSH
61546: PPUSH
61547: PPUSH
61548: PPUSH
61549: PPUSH
61550: PPUSH
61551: PPUSH
61552: PPUSH
61553: PPUSH
61554: PPUSH
61555: PPUSH
61556: PPUSH
61557: PPUSH
61558: PPUSH
61559: PPUSH
61560: PPUSH
61561: PPUSH
61562: PPUSH
61563: PPUSH
61564: PPUSH
61565: PPUSH
61566: PPUSH
61567: PPUSH
61568: PPUSH
61569: PPUSH
61570: PPUSH
61571: PPUSH
61572: PPUSH
61573: PPUSH
61574: PPUSH
61575: PPUSH
61576: PPUSH
61577: PPUSH
61578: PPUSH
61579: PPUSH
61580: PPUSH
61581: PPUSH
61582: PPUSH
61583: PPUSH
61584: PPUSH
61585: PPUSH
61586: PPUSH
61587: PPUSH
// result = [ ] ;
61588: LD_ADDR_VAR 0 7
61592: PUSH
61593: EMPTY
61594: ST_TO_ADDR
// temp_list = [ ] ;
61595: LD_ADDR_VAR 0 9
61599: PUSH
61600: EMPTY
61601: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
61602: LD_VAR 0 4
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: LD_INT 5
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: IN
61633: NOT
61634: PUSH
61635: LD_VAR 0 1
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: IN
61650: PUSH
61651: LD_VAR 0 5
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: LIST
61669: IN
61670: NOT
61671: AND
61672: OR
61673: IFFALSE 61677
// exit ;
61675: GO 80068
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61677: LD_VAR 0 1
61681: PUSH
61682: LD_INT 6
61684: PUSH
61685: LD_INT 7
61687: PUSH
61688: LD_INT 8
61690: PUSH
61691: LD_INT 13
61693: PUSH
61694: LD_INT 12
61696: PUSH
61697: LD_INT 15
61699: PUSH
61700: LD_INT 11
61702: PUSH
61703: LD_INT 14
61705: PUSH
61706: LD_INT 10
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: IN
61720: IFFALSE 61730
// btype = b_lab ;
61722: LD_ADDR_VAR 0 1
61726: PUSH
61727: LD_INT 6
61729: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
61730: LD_VAR 0 6
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: IN
61749: NOT
61750: PUSH
61751: LD_VAR 0 1
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: LD_INT 6
61770: PUSH
61771: LD_INT 36
61773: PUSH
61774: LD_INT 4
61776: PUSH
61777: LD_INT 5
61779: PUSH
61780: LD_INT 31
61782: PUSH
61783: LD_INT 32
61785: PUSH
61786: LD_INT 33
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: IN
61802: NOT
61803: PUSH
61804: LD_VAR 0 6
61808: PUSH
61809: LD_INT 1
61811: EQUAL
61812: AND
61813: OR
61814: PUSH
61815: LD_VAR 0 1
61819: PUSH
61820: LD_INT 2
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: IN
61830: NOT
61831: PUSH
61832: LD_VAR 0 6
61836: PUSH
61837: LD_INT 2
61839: EQUAL
61840: AND
61841: OR
61842: IFFALSE 61852
// mode = 0 ;
61844: LD_ADDR_VAR 0 6
61848: PUSH
61849: LD_INT 0
61851: ST_TO_ADDR
// case mode of 0 :
61852: LD_VAR 0 6
61856: PUSH
61857: LD_INT 0
61859: DOUBLE
61860: EQUAL
61861: IFTRUE 61865
61863: GO 73318
61865: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61866: LD_ADDR_VAR 0 11
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62059: LD_ADDR_VAR 0 12
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 3
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62255: LD_ADDR_VAR 0 13
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 2
62390: NEG
62391: PUSH
62392: LD_INT 2
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: NEG
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 3
62414: NEG
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62454: LD_ADDR_VAR 0 14
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: LD_INT 3
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62650: LD_ADDR_VAR 0 15
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62843: LD_ADDR_VAR 0 16
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: LD_INT 2
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 2
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 3
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 3
63000: PUSH
63001: LD_INT 3
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63036: LD_ADDR_VAR 0 17
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: LD_INT 2
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63266: LD_ADDR_VAR 0 18
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 2
63442: NEG
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: LD_INT 2
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63496: LD_ADDR_VAR 0 19
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 2
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 2
63695: NEG
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63726: LD_ADDR_VAR 0 20
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 2
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 2
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63956: LD_ADDR_VAR 0 21
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 1
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: LD_INT 1
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: LD_INT 2
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 2
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: LD_INT 2
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64186: LD_ADDR_VAR 0 22
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 2
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: LD_INT 2
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: LD_INT 2
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64416: LD_ADDR_VAR 0 23
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 1
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: NEG
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: LD_INT 2
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: NEG
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: NEG
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 2
64603: NEG
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: LD_INT 2
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 2
64627: NEG
64628: PUSH
64629: LD_INT 3
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: LD_INT 3
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64696: LD_ADDR_VAR 0 24
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 2
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 2
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: NEG
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: NEG
64896: PUSH
64897: LD_INT 2
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
64972: LD_ADDR_VAR 0 25
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: NEG
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 2
65148: NEG
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 2
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 3
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65246: LD_ADDR_VAR 0 26
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 1
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: LD_INT 2
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 2
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 2
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 2
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: PUSH
65458: LD_INT 3
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: LD_INT 3
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: LD_INT 2
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 2
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65522: LD_ADDR_VAR 0 27
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 2
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 2
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 2
65721: NEG
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 2
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 3
65755: NEG
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65802: LD_ADDR_VAR 0 28
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 2
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 2
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 2
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: NEG
65990: PUSH
65991: LD_INT 1
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 2
66001: NEG
66002: PUSH
66003: LD_INT 2
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 2
66013: NEG
66014: PUSH
66015: LD_INT 3
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 3
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 3
66037: NEG
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 3
66049: NEG
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66084: LD_ADDR_VAR 0 29
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: LD_INT 2
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 2
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 2
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 2
66250: NEG
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: NEG
66263: PUSH
66264: LD_INT 2
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 2
66274: NEG
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 3
66328: NEG
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66363: LD_ADDR_VAR 0 30
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 2
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 2
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 2
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: LD_INT 0
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: LD_INT 1
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: LD_INT 2
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 2
66585: PUSH
66586: LD_INT 3
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 2
66595: NEG
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66641: LD_ADDR_VAR 0 31
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: NEG
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: LD_INT 1
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: LD_INT 2
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 2
66806: NEG
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 2
66818: NEG
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 2
66830: NEG
66831: PUSH
66832: LD_INT 3
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 2
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: LD_INT 3
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: LD_INT 2
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 3
66884: NEG
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66919: LD_ADDR_VAR 0 32
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: LD_INT 0
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: NEG
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 2
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: NEG
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: LD_INT 3
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 3
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: LD_INT 3
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 2
67151: NEG
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 3
67162: NEG
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67197: LD_ADDR_VAR 0 33
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 1
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: LD_INT 2
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: LD_INT 1
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 2
67311: PUSH
67312: LD_INT 1
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: LD_INT 2
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 2
67352: NEG
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 2
67375: NEG
67376: PUSH
67377: LD_INT 2
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: LD_INT 3
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 2
67399: PUSH
67400: LD_INT 1
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 3
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 1
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 2
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67476: LD_ADDR_VAR 0 34
67480: PUSH
67481: LD_INT 0
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 1
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: LD_INT 1
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: LD_INT 2
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 2
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: LD_INT 2
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: LD_INT 2
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: NEG
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: NEG
67656: PUSH
67657: LD_INT 2
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: LD_INT 3
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 2
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 2
67710: NEG
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 3
67721: NEG
67722: PUSH
67723: LD_INT 1
67725: NEG
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67756: LD_ADDR_VAR 0 35
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 1
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 1
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: NEG
67826: PUSH
67827: LD_INT 1
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 2
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 2
67847: NEG
67848: PUSH
67849: LD_INT 1
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67868: LD_ADDR_VAR 0 36
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 1
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: NEG
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 1
67937: NEG
67938: PUSH
67939: LD_INT 1
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: LD_INT 2
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: LD_INT 2
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67980: LD_ADDR_VAR 0 37
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 1
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 1
68038: NEG
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 1
68049: NEG
68050: PUSH
68051: LD_INT 1
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 1
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 1
68072: NEG
68073: PUSH
68074: LD_INT 1
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68092: LD_ADDR_VAR 0 38
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 1
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 1
68150: NEG
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 1
68161: NEG
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 2
68183: NEG
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68204: LD_ADDR_VAR 0 39
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 1
68262: NEG
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 1
68273: NEG
68274: PUSH
68275: LD_INT 1
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 1
68285: NEG
68286: PUSH
68287: LD_INT 2
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68316: LD_ADDR_VAR 0 40
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: LD_INT 1
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 1
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 1
68354: PUSH
68355: LD_INT 1
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 1
68374: NEG
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: NEG
68386: PUSH
68387: LD_INT 1
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: NEG
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68428: LD_ADDR_VAR 0 41
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 1
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 0
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: LD_INT 0
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 1
68509: NEG
68510: PUSH
68511: LD_INT 2
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 1
68521: PUSH
68522: LD_INT 1
68524: NEG
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 2
68542: PUSH
68543: LD_INT 1
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: LD_INT 2
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 1
68572: NEG
68573: PUSH
68574: LD_INT 1
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 2
68594: NEG
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 2
68606: NEG
68607: PUSH
68608: LD_INT 2
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 2
68618: NEG
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 2
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: LD_INT 0
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 3
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: LD_INT 2
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 3
68671: PUSH
68672: LD_INT 3
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 2
68681: PUSH
68682: LD_INT 3
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 2
68691: NEG
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 3
68713: NEG
68714: PUSH
68715: LD_INT 1
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: LD_INT 2
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 3
68737: NEG
68738: PUSH
68739: LD_INT 3
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68778: LD_ADDR_VAR 0 42
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: LD_INT 1
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 1
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: LD_INT 0
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: NEG
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: LD_INT 2
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: LD_INT 2
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: LD_INT 1
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 2
68903: PUSH
68904: LD_INT 2
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 1
68913: PUSH
68914: LD_INT 2
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: LD_INT 2
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 1
68933: NEG
68934: PUSH
68935: LD_INT 1
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 2
68944: NEG
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: NEG
68957: PUSH
68958: LD_INT 2
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 2
68968: NEG
68969: PUSH
68970: LD_INT 3
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 1
68980: NEG
68981: PUSH
68982: LD_INT 3
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: LD_INT 3
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 1
69003: PUSH
69004: LD_INT 2
69006: NEG
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 3
69014: PUSH
69015: LD_INT 2
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 3
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 2
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: PUSH
69045: LD_INT 3
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 1
69064: NEG
69065: PUSH
69066: LD_INT 2
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 3
69075: NEG
69076: PUSH
69077: LD_INT 2
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: LD_INT 3
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69128: LD_ADDR_VAR 0 43
69132: PUSH
69133: LD_INT 0
69135: PUSH
69136: LD_INT 0
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 1
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 1
69166: PUSH
69167: LD_INT 1
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 0
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 1
69186: NEG
69187: PUSH
69188: LD_INT 0
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 1
69209: NEG
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: LD_INT 2
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 2
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: LD_INT 1
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 1
69263: PUSH
69264: LD_INT 2
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: LD_INT 2
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: LD_INT 1
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 2
69294: NEG
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 2
69305: NEG
69306: PUSH
69307: LD_INT 1
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: PUSH
69319: LD_INT 3
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 3
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: LD_INT 2
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 2
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 3
69362: PUSH
69363: LD_INT 0
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 3
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: PUSH
69383: LD_INT 3
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: LD_INT 3
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 1
69402: NEG
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: LD_INT 0
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: LD_INT 1
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69476: LD_ADDR_VAR 0 44
69480: PUSH
69481: LD_INT 0
69483: PUSH
69484: LD_INT 0
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: LD_INT 1
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: PUSH
69515: LD_INT 1
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 1
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 1
69534: NEG
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: LD_INT 1
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: NEG
69558: PUSH
69559: LD_INT 2
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: LD_INT 1
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 2
69580: PUSH
69581: LD_INT 0
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 2
69590: PUSH
69591: LD_INT 1
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 1
69610: PUSH
69611: LD_INT 2
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: PUSH
69622: LD_INT 1
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 2
69631: NEG
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 2
69642: NEG
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 2
69654: NEG
69655: PUSH
69656: LD_INT 2
69658: NEG
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 2
69666: NEG
69667: PUSH
69668: LD_INT 3
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: LD_INT 1
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 3
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 3
69709: PUSH
69710: LD_INT 2
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 3
69719: PUSH
69720: LD_INT 3
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 2
69729: PUSH
69730: LD_INT 3
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: LD_INT 1
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 3
69750: NEG
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 3
69761: NEG
69762: PUSH
69763: LD_INT 1
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 3
69773: NEG
69774: PUSH
69775: LD_INT 2
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 3
69785: NEG
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69826: LD_ADDR_VAR 0 45
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 0
69843: PUSH
69844: LD_INT 1
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 1
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: LD_INT 1
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 0
69874: PUSH
69875: LD_INT 1
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 1
69884: NEG
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: LD_INT 1
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: LD_INT 2
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: LD_INT 2
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: PUSH
69931: LD_INT 1
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 2
69941: PUSH
69942: LD_INT 1
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 2
69951: PUSH
69952: LD_INT 2
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 1
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: LD_INT 2
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 2
69992: NEG
69993: PUSH
69994: LD_INT 1
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 2
70004: NEG
70005: PUSH
70006: LD_INT 2
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 2
70016: NEG
70017: PUSH
70018: LD_INT 3
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 1
70028: NEG
70029: PUSH
70030: LD_INT 3
70032: NEG
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: LD_INT 3
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 1
70051: PUSH
70052: LD_INT 2
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 3
70062: PUSH
70063: LD_INT 2
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 3
70072: PUSH
70073: LD_INT 3
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: LD_INT 3
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: NEG
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 3
70123: NEG
70124: PUSH
70125: LD_INT 2
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: LD_INT 3
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70176: LD_ADDR_VAR 0 46
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 1
70234: NEG
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 1
70257: NEG
70258: PUSH
70259: LD_INT 2
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: LD_INT 2
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 1
70280: PUSH
70281: LD_INT 1
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 2
70291: PUSH
70292: LD_INT 0
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 2
70301: PUSH
70302: LD_INT 1
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 1
70311: PUSH
70312: LD_INT 2
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 0
70321: PUSH
70322: LD_INT 2
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 1
70331: NEG
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 2
70342: NEG
70343: PUSH
70344: LD_INT 0
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 2
70353: NEG
70354: PUSH
70355: LD_INT 1
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: NEG
70366: PUSH
70367: LD_INT 3
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: LD_INT 3
70380: NEG
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 1
70388: PUSH
70389: LD_INT 2
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 2
70399: PUSH
70400: LD_INT 1
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 3
70420: PUSH
70421: LD_INT 1
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 1
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: NEG
70451: PUSH
70452: LD_INT 2
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 2
70461: NEG
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 3
70472: NEG
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 3
70483: NEG
70484: PUSH
70485: LD_INT 1
70487: NEG
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70524: LD_ADDR_VAR 0 47
70528: PUSH
70529: LD_INT 0
70531: PUSH
70532: LD_INT 0
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: LD_INT 1
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 1
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 1
70562: PUSH
70563: LD_INT 1
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 0
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 1
70582: NEG
70583: PUSH
70584: LD_INT 0
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 1
70593: NEG
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 1
70605: NEG
70606: PUSH
70607: LD_INT 2
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 0
70617: PUSH
70618: LD_INT 2
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 1
70628: PUSH
70629: LD_INT 1
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: LD_INT 1
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 2
70651: NEG
70652: PUSH
70653: LD_INT 2
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70675: LD_ADDR_VAR 0 48
70679: PUSH
70680: LD_INT 0
70682: PUSH
70683: LD_INT 0
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: LD_INT 1
70695: NEG
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 1
70703: PUSH
70704: LD_INT 0
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 1
70713: PUSH
70714: LD_INT 1
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 0
70723: PUSH
70724: LD_INT 1
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: NEG
70734: PUSH
70735: LD_INT 0
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: LD_INT 1
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 1
70756: NEG
70757: PUSH
70758: LD_INT 2
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: LD_INT 2
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 1
70779: PUSH
70780: LD_INT 1
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 2
70790: PUSH
70791: LD_INT 0
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 2
70800: PUSH
70801: LD_INT 1
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70822: LD_ADDR_VAR 0 49
70826: PUSH
70827: LD_INT 0
70829: PUSH
70830: LD_INT 0
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: LD_INT 1
70842: NEG
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 1
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 1
70860: PUSH
70861: LD_INT 1
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: LD_INT 1
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: LD_INT 0
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 1
70891: NEG
70892: PUSH
70893: LD_INT 1
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: LD_INT 1
70906: NEG
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 2
70914: PUSH
70915: LD_INT 0
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 2
70924: PUSH
70925: LD_INT 1
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 2
70934: PUSH
70935: LD_INT 2
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: PUSH
70945: LD_INT 2
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70966: LD_ADDR_VAR 0 50
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: LD_INT 0
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 0
70983: PUSH
70984: LD_INT 1
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 1
70994: PUSH
70995: LD_INT 0
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 1
71004: PUSH
71005: LD_INT 1
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: LD_INT 1
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 1
71024: NEG
71025: PUSH
71026: LD_INT 0
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 1
71035: NEG
71036: PUSH
71037: LD_INT 1
71039: NEG
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 2
71047: PUSH
71048: LD_INT 1
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 2
71057: PUSH
71058: LD_INT 2
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 1
71067: PUSH
71068: LD_INT 2
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 0
71077: PUSH
71078: LD_INT 2
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 1
71087: NEG
71088: PUSH
71089: LD_INT 1
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71110: LD_ADDR_VAR 0 51
71114: PUSH
71115: LD_INT 0
71117: PUSH
71118: LD_INT 0
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 0
71127: PUSH
71128: LD_INT 1
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 1
71138: PUSH
71139: LD_INT 0
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 1
71148: PUSH
71149: LD_INT 1
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 0
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 1
71168: NEG
71169: PUSH
71170: LD_INT 0
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 1
71179: NEG
71180: PUSH
71181: LD_INT 1
71183: NEG
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 1
71191: PUSH
71192: LD_INT 2
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 0
71201: PUSH
71202: LD_INT 2
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 1
71211: NEG
71212: PUSH
71213: LD_INT 1
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 2
71222: NEG
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 2
71233: NEG
71234: PUSH
71235: LD_INT 1
71237: NEG
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71257: LD_ADDR_VAR 0 52
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 1
71277: NEG
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 1
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 1
71295: PUSH
71296: LD_INT 1
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 0
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 1
71315: NEG
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 1
71326: NEG
71327: PUSH
71328: LD_INT 1
71330: NEG
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 1
71338: NEG
71339: PUSH
71340: LD_INT 2
71342: NEG
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 2
71361: NEG
71362: PUSH
71363: LD_INT 0
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 2
71372: NEG
71373: PUSH
71374: LD_INT 1
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 2
71384: NEG
71385: PUSH
71386: LD_INT 2
71388: NEG
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71408: LD_ADDR_VAR 0 53
71412: PUSH
71413: LD_INT 0
71415: PUSH
71416: LD_INT 0
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 0
71425: PUSH
71426: LD_INT 1
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 1
71446: PUSH
71447: LD_INT 1
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 1
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 1
71466: NEG
71467: PUSH
71468: LD_INT 0
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 1
71477: NEG
71478: PUSH
71479: LD_INT 1
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 1
71489: NEG
71490: PUSH
71491: LD_INT 2
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: LD_INT 2
71504: NEG
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: LD_INT 1
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 2
71523: PUSH
71524: LD_INT 0
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 2
71533: PUSH
71534: LD_INT 1
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 2
71543: PUSH
71544: LD_INT 2
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 1
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: LD_INT 2
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 1
71573: NEG
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 2
71584: NEG
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 2
71595: NEG
71596: PUSH
71597: LD_INT 1
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 2
71607: NEG
71608: PUSH
71609: LD_INT 2
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71638: LD_ADDR_VAR 0 54
71642: PUSH
71643: LD_INT 0
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 0
71655: PUSH
71656: LD_INT 1
71658: NEG
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: LD_INT 0
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 1
71676: PUSH
71677: LD_INT 1
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 0
71686: PUSH
71687: LD_INT 1
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 1
71696: NEG
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 1
71707: NEG
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 1
71719: NEG
71720: PUSH
71721: LD_INT 2
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 0
71731: PUSH
71732: LD_INT 2
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 1
71742: PUSH
71743: LD_INT 1
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 2
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 2
71763: PUSH
71764: LD_INT 1
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 2
71773: PUSH
71774: LD_INT 2
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 1
71783: PUSH
71784: LD_INT 2
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: LD_INT 2
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 1
71803: NEG
71804: PUSH
71805: LD_INT 1
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 2
71814: NEG
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 2
71825: NEG
71826: PUSH
71827: LD_INT 1
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 2
71837: NEG
71838: PUSH
71839: LD_INT 2
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71868: LD_ADDR_VAR 0 55
71872: PUSH
71873: LD_INT 0
71875: PUSH
71876: LD_INT 0
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: LD_INT 1
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 1
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 1
71906: PUSH
71907: LD_INT 1
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 0
71916: PUSH
71917: LD_INT 1
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 1
71937: NEG
71938: PUSH
71939: LD_INT 1
71941: NEG
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 1
71949: NEG
71950: PUSH
71951: LD_INT 2
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: LD_INT 2
71964: NEG
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: LD_INT 1
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 2
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 2
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: PUSH
72004: LD_INT 2
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: LD_INT 2
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: LD_INT 2
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 1
72033: NEG
72034: PUSH
72035: LD_INT 1
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 2
72044: NEG
72045: PUSH
72046: LD_INT 0
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 2
72055: NEG
72056: PUSH
72057: LD_INT 1
72059: NEG
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 2
72067: NEG
72068: PUSH
72069: LD_INT 2
72071: NEG
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72098: LD_ADDR_VAR 0 56
72102: PUSH
72103: LD_INT 0
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: LD_INT 1
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 1
72126: PUSH
72127: LD_INT 0
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 1
72136: PUSH
72137: LD_INT 1
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 0
72146: PUSH
72147: LD_INT 1
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 1
72156: NEG
72157: PUSH
72158: LD_INT 0
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 1
72167: NEG
72168: PUSH
72169: LD_INT 1
72171: NEG
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: LD_INT 1
72179: NEG
72180: PUSH
72181: LD_INT 2
72183: NEG
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 0
72191: PUSH
72192: LD_INT 2
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 1
72202: PUSH
72203: LD_INT 1
72205: NEG
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 2
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 2
72223: PUSH
72224: LD_INT 1
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 2
72233: PUSH
72234: LD_INT 2
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PUSH
72241: LD_INT 1
72243: PUSH
72244: LD_INT 2
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: LD_INT 2
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 1
72263: NEG
72264: PUSH
72265: LD_INT 1
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 2
72274: NEG
72275: PUSH
72276: LD_INT 0
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 2
72285: NEG
72286: PUSH
72287: LD_INT 1
72289: NEG
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 2
72297: NEG
72298: PUSH
72299: LD_INT 2
72301: NEG
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72328: LD_ADDR_VAR 0 57
72332: PUSH
72333: LD_INT 0
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 0
72345: PUSH
72346: LD_INT 1
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 1
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_INT 1
72366: PUSH
72367: LD_INT 1
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 0
72376: PUSH
72377: LD_INT 1
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 1
72386: NEG
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 1
72397: NEG
72398: PUSH
72399: LD_INT 1
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 1
72409: NEG
72410: PUSH
72411: LD_INT 2
72413: NEG
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 0
72421: PUSH
72422: LD_INT 2
72424: NEG
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 1
72432: PUSH
72433: LD_INT 1
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 2
72443: PUSH
72444: LD_INT 0
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 2
72453: PUSH
72454: LD_INT 1
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 2
72463: PUSH
72464: LD_INT 2
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 1
72473: PUSH
72474: LD_INT 2
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 0
72483: PUSH
72484: LD_INT 2
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 1
72493: NEG
72494: PUSH
72495: LD_INT 1
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 2
72504: NEG
72505: PUSH
72506: LD_INT 0
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 2
72515: NEG
72516: PUSH
72517: LD_INT 1
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 2
72527: NEG
72528: PUSH
72529: LD_INT 2
72531: NEG
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72558: LD_ADDR_VAR 0 58
72562: PUSH
72563: LD_INT 0
72565: PUSH
72566: LD_INT 0
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 0
72575: PUSH
72576: LD_INT 1
72578: NEG
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 1
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 1
72596: PUSH
72597: LD_INT 1
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 0
72606: PUSH
72607: LD_INT 1
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: LD_INT 1
72616: NEG
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 1
72627: NEG
72628: PUSH
72629: LD_INT 1
72631: NEG
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: PUSH
72641: LD_INT 2
72643: NEG
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: LD_INT 2
72654: NEG
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 1
72662: PUSH
72663: LD_INT 1
72665: NEG
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 2
72673: PUSH
72674: LD_INT 0
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 2
72683: PUSH
72684: LD_INT 1
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 2
72693: PUSH
72694: LD_INT 2
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 1
72703: PUSH
72704: LD_INT 2
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: LD_INT 2
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 1
72723: NEG
72724: PUSH
72725: LD_INT 1
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 2
72734: NEG
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 2
72745: NEG
72746: PUSH
72747: LD_INT 1
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 2
72757: NEG
72758: PUSH
72759: LD_INT 2
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72788: LD_ADDR_VAR 0 59
72792: PUSH
72793: LD_INT 0
72795: PUSH
72796: LD_INT 0
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 0
72805: PUSH
72806: LD_INT 1
72808: NEG
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 1
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 1
72826: PUSH
72827: LD_INT 1
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 0
72836: PUSH
72837: LD_INT 1
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 1
72846: NEG
72847: PUSH
72848: LD_INT 0
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 1
72857: NEG
72858: PUSH
72859: LD_INT 1
72861: NEG
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72876: LD_ADDR_VAR 0 60
72880: PUSH
72881: LD_INT 0
72883: PUSH
72884: LD_INT 0
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 0
72893: PUSH
72894: LD_INT 1
72896: NEG
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 1
72904: PUSH
72905: LD_INT 0
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 1
72914: PUSH
72915: LD_INT 1
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 0
72924: PUSH
72925: LD_INT 1
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 1
72934: NEG
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 1
72945: NEG
72946: PUSH
72947: LD_INT 1
72949: NEG
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72964: LD_ADDR_VAR 0 61
72968: PUSH
72969: LD_INT 0
72971: PUSH
72972: LD_INT 0
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 0
72981: PUSH
72982: LD_INT 1
72984: NEG
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_INT 1
72992: PUSH
72993: LD_INT 0
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 1
73002: PUSH
73003: LD_INT 1
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PUSH
73010: LD_INT 0
73012: PUSH
73013: LD_INT 1
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PUSH
73020: LD_INT 1
73022: NEG
73023: PUSH
73024: LD_INT 0
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 1
73033: NEG
73034: PUSH
73035: LD_INT 1
73037: NEG
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73052: LD_ADDR_VAR 0 62
73056: PUSH
73057: LD_INT 0
73059: PUSH
73060: LD_INT 0
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 0
73069: PUSH
73070: LD_INT 1
73072: NEG
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 1
73080: PUSH
73081: LD_INT 0
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 1
73090: PUSH
73091: LD_INT 1
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_INT 0
73100: PUSH
73101: LD_INT 1
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 1
73110: NEG
73111: PUSH
73112: LD_INT 0
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 1
73121: NEG
73122: PUSH
73123: LD_INT 1
73125: NEG
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73140: LD_ADDR_VAR 0 63
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: LD_INT 0
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 0
73157: PUSH
73158: LD_INT 1
73160: NEG
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 1
73168: PUSH
73169: LD_INT 0
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 1
73178: PUSH
73179: LD_INT 1
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: LD_INT 1
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 1
73198: NEG
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 1
73209: NEG
73210: PUSH
73211: LD_INT 1
73213: NEG
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73228: LD_ADDR_VAR 0 64
73232: PUSH
73233: LD_INT 0
73235: PUSH
73236: LD_INT 0
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 0
73245: PUSH
73246: LD_INT 1
73248: NEG
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: LD_INT 1
73256: PUSH
73257: LD_INT 0
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: PUSH
73264: LD_INT 1
73266: PUSH
73267: LD_INT 1
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 0
73276: PUSH
73277: LD_INT 1
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 1
73286: NEG
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 1
73297: NEG
73298: PUSH
73299: LD_INT 1
73301: NEG
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: ST_TO_ADDR
// end ; 1 :
73316: GO 79213
73318: LD_INT 1
73320: DOUBLE
73321: EQUAL
73322: IFTRUE 73326
73324: GO 75949
73326: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73327: LD_ADDR_VAR 0 11
73331: PUSH
73332: LD_INT 1
73334: NEG
73335: PUSH
73336: LD_INT 3
73338: NEG
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 0
73346: PUSH
73347: LD_INT 3
73349: NEG
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 1
73357: PUSH
73358: LD_INT 2
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: LIST
73370: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73371: LD_ADDR_VAR 0 12
73375: PUSH
73376: LD_INT 2
73378: PUSH
73379: LD_INT 1
73381: NEG
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 3
73389: PUSH
73390: LD_INT 0
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 3
73399: PUSH
73400: LD_INT 1
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: LIST
73411: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73412: LD_ADDR_VAR 0 13
73416: PUSH
73417: LD_INT 3
73419: PUSH
73420: LD_INT 2
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 3
73429: PUSH
73430: LD_INT 3
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 2
73439: PUSH
73440: LD_INT 3
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: LIST
73451: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73452: LD_ADDR_VAR 0 14
73456: PUSH
73457: LD_INT 1
73459: PUSH
73460: LD_INT 3
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 0
73469: PUSH
73470: LD_INT 3
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: LD_INT 1
73479: NEG
73480: PUSH
73481: LD_INT 2
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: LIST
73492: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73493: LD_ADDR_VAR 0 15
73497: PUSH
73498: LD_INT 2
73500: NEG
73501: PUSH
73502: LD_INT 1
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 3
73511: NEG
73512: PUSH
73513: LD_INT 0
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 3
73522: NEG
73523: PUSH
73524: LD_INT 1
73526: NEG
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: LIST
73536: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73537: LD_ADDR_VAR 0 16
73541: PUSH
73542: LD_INT 2
73544: NEG
73545: PUSH
73546: LD_INT 3
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 3
73556: NEG
73557: PUSH
73558: LD_INT 2
73560: NEG
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 3
73568: NEG
73569: PUSH
73570: LD_INT 3
73572: NEG
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: LIST
73582: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73583: LD_ADDR_VAR 0 17
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: PUSH
73592: LD_INT 3
73594: NEG
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 0
73602: PUSH
73603: LD_INT 3
73605: NEG
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 1
73613: PUSH
73614: LD_INT 2
73616: NEG
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: LIST
73626: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73627: LD_ADDR_VAR 0 18
73631: PUSH
73632: LD_INT 2
73634: PUSH
73635: LD_INT 1
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 3
73645: PUSH
73646: LD_INT 0
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 3
73655: PUSH
73656: LD_INT 1
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: LIST
73667: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73668: LD_ADDR_VAR 0 19
73672: PUSH
73673: LD_INT 3
73675: PUSH
73676: LD_INT 2
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 3
73685: PUSH
73686: LD_INT 3
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 2
73695: PUSH
73696: LD_INT 3
73698: PUSH
73699: EMPTY
73700: LIST
73701: LIST
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73708: LD_ADDR_VAR 0 20
73712: PUSH
73713: LD_INT 1
73715: PUSH
73716: LD_INT 3
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: PUSH
73723: LD_INT 0
73725: PUSH
73726: LD_INT 3
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 1
73735: NEG
73736: PUSH
73737: LD_INT 2
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: LIST
73748: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73749: LD_ADDR_VAR 0 21
73753: PUSH
73754: LD_INT 2
73756: NEG
73757: PUSH
73758: LD_INT 1
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 3
73767: NEG
73768: PUSH
73769: LD_INT 0
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 3
73778: NEG
73779: PUSH
73780: LD_INT 1
73782: NEG
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73793: LD_ADDR_VAR 0 22
73797: PUSH
73798: LD_INT 2
73800: NEG
73801: PUSH
73802: LD_INT 3
73804: NEG
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: PUSH
73810: LD_INT 3
73812: NEG
73813: PUSH
73814: LD_INT 2
73816: NEG
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: PUSH
73822: LD_INT 3
73824: NEG
73825: PUSH
73826: LD_INT 3
73828: NEG
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: LIST
73838: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
73839: LD_ADDR_VAR 0 23
73843: PUSH
73844: LD_INT 0
73846: PUSH
73847: LD_INT 3
73849: NEG
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 1
73857: NEG
73858: PUSH
73859: LD_INT 4
73861: NEG
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 1
73869: PUSH
73870: LD_INT 3
73872: NEG
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: LIST
73882: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
73883: LD_ADDR_VAR 0 24
73887: PUSH
73888: LD_INT 3
73890: PUSH
73891: LD_INT 0
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 3
73900: PUSH
73901: LD_INT 1
73903: NEG
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 4
73911: PUSH
73912: LD_INT 1
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: LIST
73923: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
73924: LD_ADDR_VAR 0 25
73928: PUSH
73929: LD_INT 3
73931: PUSH
73932: LD_INT 3
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 4
73941: PUSH
73942: LD_INT 3
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 3
73951: PUSH
73952: LD_INT 4
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: LIST
73963: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
73964: LD_ADDR_VAR 0 26
73968: PUSH
73969: LD_INT 0
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 1
73981: PUSH
73982: LD_INT 4
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 1
73991: NEG
73992: PUSH
73993: LD_INT 3
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: LIST
74004: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
74005: LD_ADDR_VAR 0 27
74009: PUSH
74010: LD_INT 3
74012: NEG
74013: PUSH
74014: LD_INT 0
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 3
74023: NEG
74024: PUSH
74025: LD_INT 1
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 4
74034: NEG
74035: PUSH
74036: LD_INT 1
74038: NEG
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: LIST
74048: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
74049: LD_ADDR_VAR 0 28
74053: PUSH
74054: LD_INT 3
74056: NEG
74057: PUSH
74058: LD_INT 3
74060: NEG
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 3
74068: NEG
74069: PUSH
74070: LD_INT 4
74072: NEG
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 4
74080: NEG
74081: PUSH
74082: LD_INT 3
74084: NEG
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: LIST
74094: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
74095: LD_ADDR_VAR 0 29
74099: PUSH
74100: LD_INT 1
74102: NEG
74103: PUSH
74104: LD_INT 3
74106: NEG
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 0
74114: PUSH
74115: LD_INT 3
74117: NEG
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 1
74125: PUSH
74126: LD_INT 2
74128: NEG
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 1
74136: NEG
74137: PUSH
74138: LD_INT 4
74140: NEG
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 0
74148: PUSH
74149: LD_INT 4
74151: NEG
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 1
74159: PUSH
74160: LD_INT 3
74162: NEG
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 1
74170: NEG
74171: PUSH
74172: LD_INT 5
74174: NEG
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 0
74182: PUSH
74183: LD_INT 5
74185: NEG
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 1
74193: PUSH
74194: LD_INT 4
74196: NEG
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 1
74204: NEG
74205: PUSH
74206: LD_INT 6
74208: NEG
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 0
74216: PUSH
74217: LD_INT 6
74219: NEG
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 1
74227: PUSH
74228: LD_INT 5
74230: NEG
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
74250: LD_ADDR_VAR 0 30
74254: PUSH
74255: LD_INT 2
74257: PUSH
74258: LD_INT 1
74260: NEG
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 3
74268: PUSH
74269: LD_INT 0
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 3
74278: PUSH
74279: LD_INT 1
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 3
74288: PUSH
74289: LD_INT 1
74291: NEG
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 4
74299: PUSH
74300: LD_INT 0
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 4
74309: PUSH
74310: LD_INT 1
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 4
74319: PUSH
74320: LD_INT 1
74322: NEG
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 5
74330: PUSH
74331: LD_INT 0
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 5
74340: PUSH
74341: LD_INT 1
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 5
74350: PUSH
74351: LD_INT 1
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 6
74361: PUSH
74362: LD_INT 0
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 6
74371: PUSH
74372: LD_INT 1
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
74393: LD_ADDR_VAR 0 31
74397: PUSH
74398: LD_INT 3
74400: PUSH
74401: LD_INT 2
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: LD_INT 3
74410: PUSH
74411: LD_INT 3
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PUSH
74418: LD_INT 2
74420: PUSH
74421: LD_INT 3
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: PUSH
74428: LD_INT 4
74430: PUSH
74431: LD_INT 3
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: PUSH
74438: LD_INT 4
74440: PUSH
74441: LD_INT 4
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 3
74450: PUSH
74451: LD_INT 4
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 5
74460: PUSH
74461: LD_INT 4
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 5
74470: PUSH
74471: LD_INT 5
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: LD_INT 4
74480: PUSH
74481: LD_INT 5
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 6
74490: PUSH
74491: LD_INT 5
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PUSH
74498: LD_INT 6
74500: PUSH
74501: LD_INT 6
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: LD_INT 5
74510: PUSH
74511: LD_INT 6
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
74532: LD_ADDR_VAR 0 32
74536: PUSH
74537: LD_INT 1
74539: PUSH
74540: LD_INT 3
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 0
74549: PUSH
74550: LD_INT 3
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 1
74559: NEG
74560: PUSH
74561: LD_INT 2
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 1
74570: PUSH
74571: LD_INT 4
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 0
74580: PUSH
74581: LD_INT 4
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 1
74590: NEG
74591: PUSH
74592: LD_INT 3
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 1
74601: PUSH
74602: LD_INT 5
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: LD_INT 5
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 1
74621: NEG
74622: PUSH
74623: LD_INT 4
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 1
74632: PUSH
74633: LD_INT 6
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 0
74642: PUSH
74643: LD_INT 6
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 1
74652: NEG
74653: PUSH
74654: LD_INT 5
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74675: LD_ADDR_VAR 0 33
74679: PUSH
74680: LD_INT 2
74682: NEG
74683: PUSH
74684: LD_INT 1
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 3
74693: NEG
74694: PUSH
74695: LD_INT 0
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 3
74704: NEG
74705: PUSH
74706: LD_INT 1
74708: NEG
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 3
74716: NEG
74717: PUSH
74718: LD_INT 1
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 4
74727: NEG
74728: PUSH
74729: LD_INT 0
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 4
74738: NEG
74739: PUSH
74740: LD_INT 1
74742: NEG
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 4
74750: NEG
74751: PUSH
74752: LD_INT 1
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 5
74761: NEG
74762: PUSH
74763: LD_INT 0
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 5
74772: NEG
74773: PUSH
74774: LD_INT 1
74776: NEG
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: PUSH
74782: LD_INT 5
74784: NEG
74785: PUSH
74786: LD_INT 1
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: PUSH
74793: LD_INT 6
74795: NEG
74796: PUSH
74797: LD_INT 0
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 6
74806: NEG
74807: PUSH
74808: LD_INT 1
74810: NEG
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
74830: LD_ADDR_VAR 0 34
74834: PUSH
74835: LD_INT 2
74837: NEG
74838: PUSH
74839: LD_INT 3
74841: NEG
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: PUSH
74847: LD_INT 3
74849: NEG
74850: PUSH
74851: LD_INT 2
74853: NEG
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 3
74861: NEG
74862: PUSH
74863: LD_INT 3
74865: NEG
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 3
74873: NEG
74874: PUSH
74875: LD_INT 4
74877: NEG
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 4
74885: NEG
74886: PUSH
74887: LD_INT 3
74889: NEG
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 4
74897: NEG
74898: PUSH
74899: LD_INT 4
74901: NEG
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: LD_INT 4
74909: NEG
74910: PUSH
74911: LD_INT 5
74913: NEG
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: PUSH
74919: LD_INT 5
74921: NEG
74922: PUSH
74923: LD_INT 4
74925: NEG
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 5
74933: NEG
74934: PUSH
74935: LD_INT 5
74937: NEG
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 5
74945: NEG
74946: PUSH
74947: LD_INT 6
74949: NEG
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 6
74957: NEG
74958: PUSH
74959: LD_INT 5
74961: NEG
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 6
74969: NEG
74970: PUSH
74971: LD_INT 6
74973: NEG
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
74993: LD_ADDR_VAR 0 41
74997: PUSH
74998: LD_INT 0
75000: PUSH
75001: LD_INT 2
75003: NEG
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PUSH
75009: LD_INT 1
75011: NEG
75012: PUSH
75013: LD_INT 3
75015: NEG
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: LD_INT 1
75023: PUSH
75024: LD_INT 2
75026: NEG
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: LIST
75036: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
75037: LD_ADDR_VAR 0 42
75041: PUSH
75042: LD_INT 2
75044: PUSH
75045: LD_INT 0
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 2
75054: PUSH
75055: LD_INT 1
75057: NEG
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: LD_INT 3
75065: PUSH
75066: LD_INT 1
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: LIST
75077: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
75078: LD_ADDR_VAR 0 43
75082: PUSH
75083: LD_INT 2
75085: PUSH
75086: LD_INT 2
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 3
75095: PUSH
75096: LD_INT 2
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 2
75105: PUSH
75106: LD_INT 3
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: LIST
75117: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
75118: LD_ADDR_VAR 0 44
75122: PUSH
75123: LD_INT 0
75125: PUSH
75126: LD_INT 2
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: LD_INT 1
75135: PUSH
75136: LD_INT 3
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 1
75145: NEG
75146: PUSH
75147: LD_INT 2
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: LIST
75158: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75159: LD_ADDR_VAR 0 45
75163: PUSH
75164: LD_INT 2
75166: NEG
75167: PUSH
75168: LD_INT 0
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 2
75177: NEG
75178: PUSH
75179: LD_INT 1
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PUSH
75186: LD_INT 3
75188: NEG
75189: PUSH
75190: LD_INT 1
75192: NEG
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: LIST
75202: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
75203: LD_ADDR_VAR 0 46
75207: PUSH
75208: LD_INT 2
75210: NEG
75211: PUSH
75212: LD_INT 2
75214: NEG
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 2
75222: NEG
75223: PUSH
75224: LD_INT 3
75226: NEG
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 3
75234: NEG
75235: PUSH
75236: LD_INT 2
75238: NEG
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: LIST
75248: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
75249: LD_ADDR_VAR 0 47
75253: PUSH
75254: LD_INT 2
75256: NEG
75257: PUSH
75258: LD_INT 3
75260: NEG
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: LD_INT 1
75268: NEG
75269: PUSH
75270: LD_INT 3
75272: NEG
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
75282: LD_ADDR_VAR 0 48
75286: PUSH
75287: LD_INT 1
75289: PUSH
75290: LD_INT 2
75292: NEG
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 2
75300: PUSH
75301: LD_INT 1
75303: NEG
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
75313: LD_ADDR_VAR 0 49
75317: PUSH
75318: LD_INT 3
75320: PUSH
75321: LD_INT 1
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 3
75330: PUSH
75331: LD_INT 2
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
75342: LD_ADDR_VAR 0 50
75346: PUSH
75347: LD_INT 2
75349: PUSH
75350: LD_INT 3
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: LD_INT 1
75359: PUSH
75360: LD_INT 3
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
75371: LD_ADDR_VAR 0 51
75375: PUSH
75376: LD_INT 1
75378: NEG
75379: PUSH
75380: LD_INT 2
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 2
75389: NEG
75390: PUSH
75391: LD_INT 1
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75402: LD_ADDR_VAR 0 52
75406: PUSH
75407: LD_INT 3
75409: NEG
75410: PUSH
75411: LD_INT 1
75413: NEG
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: PUSH
75419: LD_INT 3
75421: NEG
75422: PUSH
75423: LD_INT 2
75425: NEG
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75435: LD_ADDR_VAR 0 53
75439: PUSH
75440: LD_INT 1
75442: NEG
75443: PUSH
75444: LD_INT 3
75446: NEG
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_INT 0
75454: PUSH
75455: LD_INT 3
75457: NEG
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 1
75465: PUSH
75466: LD_INT 2
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: LIST
75478: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75479: LD_ADDR_VAR 0 54
75483: PUSH
75484: LD_INT 2
75486: PUSH
75487: LD_INT 1
75489: NEG
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 3
75497: PUSH
75498: LD_INT 0
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: LD_INT 3
75507: PUSH
75508: LD_INT 1
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: LIST
75519: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75520: LD_ADDR_VAR 0 55
75524: PUSH
75525: LD_INT 3
75527: PUSH
75528: LD_INT 2
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 3
75537: PUSH
75538: LD_INT 3
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 2
75547: PUSH
75548: LD_INT 3
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: LIST
75559: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75560: LD_ADDR_VAR 0 56
75564: PUSH
75565: LD_INT 1
75567: PUSH
75568: LD_INT 3
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 0
75577: PUSH
75578: LD_INT 3
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 1
75587: NEG
75588: PUSH
75589: LD_INT 2
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75601: LD_ADDR_VAR 0 57
75605: PUSH
75606: LD_INT 2
75608: NEG
75609: PUSH
75610: LD_INT 1
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 3
75619: NEG
75620: PUSH
75621: LD_INT 0
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 3
75630: NEG
75631: PUSH
75632: LD_INT 1
75634: NEG
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: LIST
75644: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75645: LD_ADDR_VAR 0 58
75649: PUSH
75650: LD_INT 2
75652: NEG
75653: PUSH
75654: LD_INT 3
75656: NEG
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: LD_INT 3
75664: NEG
75665: PUSH
75666: LD_INT 2
75668: NEG
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 3
75676: NEG
75677: PUSH
75678: LD_INT 3
75680: NEG
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: LIST
75690: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75691: LD_ADDR_VAR 0 59
75695: PUSH
75696: LD_INT 1
75698: NEG
75699: PUSH
75700: LD_INT 2
75702: NEG
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 0
75710: PUSH
75711: LD_INT 2
75713: NEG
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 1
75721: PUSH
75722: LD_INT 1
75724: NEG
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: LIST
75734: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75735: LD_ADDR_VAR 0 60
75739: PUSH
75740: LD_INT 1
75742: PUSH
75743: LD_INT 1
75745: NEG
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 2
75753: PUSH
75754: LD_INT 0
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: LD_INT 2
75763: PUSH
75764: LD_INT 1
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: LIST
75775: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75776: LD_ADDR_VAR 0 61
75780: PUSH
75781: LD_INT 2
75783: PUSH
75784: LD_INT 1
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PUSH
75791: LD_INT 2
75793: PUSH
75794: LD_INT 2
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PUSH
75801: LD_INT 1
75803: PUSH
75804: LD_INT 2
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: LIST
75815: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75816: LD_ADDR_VAR 0 62
75820: PUSH
75821: LD_INT 1
75823: PUSH
75824: LD_INT 2
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: PUSH
75831: LD_INT 0
75833: PUSH
75834: LD_INT 2
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 1
75843: NEG
75844: PUSH
75845: LD_INT 1
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: LIST
75856: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75857: LD_ADDR_VAR 0 63
75861: PUSH
75862: LD_INT 1
75864: NEG
75865: PUSH
75866: LD_INT 1
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PUSH
75873: LD_INT 2
75875: NEG
75876: PUSH
75877: LD_INT 0
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PUSH
75884: LD_INT 2
75886: NEG
75887: PUSH
75888: LD_INT 1
75890: NEG
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: LIST
75900: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75901: LD_ADDR_VAR 0 64
75905: PUSH
75906: LD_INT 1
75908: NEG
75909: PUSH
75910: LD_INT 2
75912: NEG
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: LD_INT 2
75920: NEG
75921: PUSH
75922: LD_INT 1
75924: NEG
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: PUSH
75930: LD_INT 2
75932: NEG
75933: PUSH
75934: LD_INT 2
75936: NEG
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: LIST
75946: ST_TO_ADDR
// end ; 2 :
75947: GO 79213
75949: LD_INT 2
75951: DOUBLE
75952: EQUAL
75953: IFTRUE 75957
75955: GO 79212
75957: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
75958: LD_ADDR_VAR 0 29
75962: PUSH
75963: LD_INT 4
75965: PUSH
75966: LD_INT 0
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PUSH
75973: LD_INT 4
75975: PUSH
75976: LD_INT 1
75978: NEG
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: PUSH
75984: LD_INT 5
75986: PUSH
75987: LD_INT 0
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: PUSH
75994: LD_INT 5
75996: PUSH
75997: LD_INT 1
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PUSH
76004: LD_INT 4
76006: PUSH
76007: LD_INT 1
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: PUSH
76014: LD_INT 3
76016: PUSH
76017: LD_INT 0
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 3
76026: PUSH
76027: LD_INT 1
76029: NEG
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: PUSH
76035: LD_INT 3
76037: PUSH
76038: LD_INT 2
76040: NEG
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 5
76048: PUSH
76049: LD_INT 2
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: LD_INT 3
76058: PUSH
76059: LD_INT 3
76061: PUSH
76062: EMPTY
76063: LIST
76064: LIST
76065: PUSH
76066: LD_INT 3
76068: PUSH
76069: LD_INT 2
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: PUSH
76076: LD_INT 4
76078: PUSH
76079: LD_INT 3
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: PUSH
76086: LD_INT 4
76088: PUSH
76089: LD_INT 4
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_INT 3
76098: PUSH
76099: LD_INT 4
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 2
76108: PUSH
76109: LD_INT 3
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: PUSH
76116: LD_INT 2
76118: PUSH
76119: LD_INT 2
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 4
76128: PUSH
76129: LD_INT 2
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 2
76138: PUSH
76139: LD_INT 4
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PUSH
76146: LD_INT 0
76148: PUSH
76149: LD_INT 4
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: LD_INT 0
76158: PUSH
76159: LD_INT 3
76161: PUSH
76162: EMPTY
76163: LIST
76164: LIST
76165: PUSH
76166: LD_INT 1
76168: PUSH
76169: LD_INT 4
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PUSH
76176: LD_INT 1
76178: PUSH
76179: LD_INT 5
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: LD_INT 0
76188: PUSH
76189: LD_INT 5
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: PUSH
76196: LD_INT 1
76198: NEG
76199: PUSH
76200: LD_INT 4
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 1
76209: NEG
76210: PUSH
76211: LD_INT 3
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_INT 2
76220: PUSH
76221: LD_INT 5
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 2
76230: NEG
76231: PUSH
76232: LD_INT 3
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: LD_INT 3
76241: NEG
76242: PUSH
76243: LD_INT 0
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: LD_INT 3
76252: NEG
76253: PUSH
76254: LD_INT 1
76256: NEG
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 2
76264: NEG
76265: PUSH
76266: LD_INT 0
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: PUSH
76273: LD_INT 2
76275: NEG
76276: PUSH
76277: LD_INT 1
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 3
76286: NEG
76287: PUSH
76288: LD_INT 1
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PUSH
76295: LD_INT 4
76297: NEG
76298: PUSH
76299: LD_INT 0
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 4
76308: NEG
76309: PUSH
76310: LD_INT 1
76312: NEG
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 4
76320: NEG
76321: PUSH
76322: LD_INT 2
76324: NEG
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 2
76332: NEG
76333: PUSH
76334: LD_INT 2
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 4
76343: NEG
76344: PUSH
76345: LD_INT 4
76347: NEG
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 4
76355: NEG
76356: PUSH
76357: LD_INT 5
76359: NEG
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: PUSH
76365: LD_INT 3
76367: NEG
76368: PUSH
76369: LD_INT 4
76371: NEG
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 3
76379: NEG
76380: PUSH
76381: LD_INT 3
76383: NEG
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 4
76391: NEG
76392: PUSH
76393: LD_INT 3
76395: NEG
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: PUSH
76401: LD_INT 5
76403: NEG
76404: PUSH
76405: LD_INT 4
76407: NEG
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 5
76415: NEG
76416: PUSH
76417: LD_INT 5
76419: NEG
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: PUSH
76425: LD_INT 3
76427: NEG
76428: PUSH
76429: LD_INT 5
76431: NEG
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: PUSH
76437: LD_INT 5
76439: NEG
76440: PUSH
76441: LD_INT 3
76443: NEG
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
76496: LD_ADDR_VAR 0 30
76500: PUSH
76501: LD_INT 4
76503: PUSH
76504: LD_INT 4
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: LD_INT 4
76513: PUSH
76514: LD_INT 3
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: PUSH
76521: LD_INT 5
76523: PUSH
76524: LD_INT 4
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 5
76533: PUSH
76534: LD_INT 5
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: PUSH
76541: LD_INT 4
76543: PUSH
76544: LD_INT 5
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PUSH
76551: LD_INT 3
76553: PUSH
76554: LD_INT 4
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PUSH
76561: LD_INT 3
76563: PUSH
76564: LD_INT 3
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 5
76573: PUSH
76574: LD_INT 3
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 3
76583: PUSH
76584: LD_INT 5
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 0
76593: PUSH
76594: LD_INT 3
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 0
76603: PUSH
76604: LD_INT 2
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PUSH
76611: LD_INT 1
76613: PUSH
76614: LD_INT 3
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PUSH
76621: LD_INT 1
76623: PUSH
76624: LD_INT 4
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: PUSH
76631: LD_INT 0
76633: PUSH
76634: LD_INT 4
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: PUSH
76641: LD_INT 1
76643: NEG
76644: PUSH
76645: LD_INT 3
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: LD_INT 1
76654: NEG
76655: PUSH
76656: LD_INT 2
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: LD_INT 2
76665: PUSH
76666: LD_INT 4
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 2
76675: NEG
76676: PUSH
76677: LD_INT 2
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PUSH
76684: LD_INT 4
76686: NEG
76687: PUSH
76688: LD_INT 0
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: LD_INT 4
76697: NEG
76698: PUSH
76699: LD_INT 1
76701: NEG
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: LD_INT 3
76709: NEG
76710: PUSH
76711: LD_INT 0
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 3
76720: NEG
76721: PUSH
76722: LD_INT 1
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: PUSH
76729: LD_INT 4
76731: NEG
76732: PUSH
76733: LD_INT 1
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PUSH
76740: LD_INT 5
76742: NEG
76743: PUSH
76744: LD_INT 0
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: PUSH
76751: LD_INT 5
76753: NEG
76754: PUSH
76755: LD_INT 1
76757: NEG
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 5
76765: NEG
76766: PUSH
76767: LD_INT 2
76769: NEG
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: LD_INT 3
76777: NEG
76778: PUSH
76779: LD_INT 2
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: LD_INT 3
76788: NEG
76789: PUSH
76790: LD_INT 3
76792: NEG
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: PUSH
76798: LD_INT 3
76800: NEG
76801: PUSH
76802: LD_INT 4
76804: NEG
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 2
76812: NEG
76813: PUSH
76814: LD_INT 3
76816: NEG
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 2
76824: NEG
76825: PUSH
76826: LD_INT 2
76828: NEG
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: LD_INT 3
76836: NEG
76837: PUSH
76838: LD_INT 2
76840: NEG
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: PUSH
76846: LD_INT 4
76848: NEG
76849: PUSH
76850: LD_INT 3
76852: NEG
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: LD_INT 4
76860: NEG
76861: PUSH
76862: LD_INT 4
76864: NEG
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: LD_INT 2
76872: NEG
76873: PUSH
76874: LD_INT 4
76876: NEG
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: PUSH
76882: LD_INT 4
76884: NEG
76885: PUSH
76886: LD_INT 2
76888: NEG
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 0
76896: PUSH
76897: LD_INT 4
76899: NEG
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 0
76907: PUSH
76908: LD_INT 5
76910: NEG
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: LD_INT 1
76918: PUSH
76919: LD_INT 4
76921: NEG
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 1
76929: PUSH
76930: LD_INT 3
76932: NEG
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 0
76940: PUSH
76941: LD_INT 3
76943: NEG
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 1
76951: NEG
76952: PUSH
76953: LD_INT 4
76955: NEG
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PUSH
76961: LD_INT 1
76963: NEG
76964: PUSH
76965: LD_INT 5
76967: NEG
76968: PUSH
76969: EMPTY
76970: LIST
76971: LIST
76972: PUSH
76973: LD_INT 2
76975: PUSH
76976: LD_INT 3
76978: NEG
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: PUSH
76984: LD_INT 2
76986: NEG
76987: PUSH
76988: LD_INT 5
76990: NEG
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: PUSH
76996: EMPTY
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: LIST
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
77043: LD_ADDR_VAR 0 31
77047: PUSH
77048: LD_INT 0
77050: PUSH
77051: LD_INT 4
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 0
77060: PUSH
77061: LD_INT 3
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: LD_INT 1
77070: PUSH
77071: LD_INT 4
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 1
77080: PUSH
77081: LD_INT 5
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 0
77090: PUSH
77091: LD_INT 5
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 1
77100: NEG
77101: PUSH
77102: LD_INT 4
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PUSH
77109: LD_INT 1
77111: NEG
77112: PUSH
77113: LD_INT 3
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: PUSH
77120: LD_INT 2
77122: PUSH
77123: LD_INT 5
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 2
77132: NEG
77133: PUSH
77134: LD_INT 3
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 3
77143: NEG
77144: PUSH
77145: LD_INT 0
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: PUSH
77152: LD_INT 3
77154: NEG
77155: PUSH
77156: LD_INT 1
77158: NEG
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PUSH
77164: LD_INT 2
77166: NEG
77167: PUSH
77168: LD_INT 0
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 2
77177: NEG
77178: PUSH
77179: LD_INT 1
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PUSH
77186: LD_INT 3
77188: NEG
77189: PUSH
77190: LD_INT 1
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: PUSH
77197: LD_INT 4
77199: NEG
77200: PUSH
77201: LD_INT 0
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: PUSH
77208: LD_INT 4
77210: NEG
77211: PUSH
77212: LD_INT 1
77214: NEG
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PUSH
77220: LD_INT 4
77222: NEG
77223: PUSH
77224: LD_INT 2
77226: NEG
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: PUSH
77232: LD_INT 2
77234: NEG
77235: PUSH
77236: LD_INT 2
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: LD_INT 4
77245: NEG
77246: PUSH
77247: LD_INT 4
77249: NEG
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: PUSH
77255: LD_INT 4
77257: NEG
77258: PUSH
77259: LD_INT 5
77261: NEG
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 3
77269: NEG
77270: PUSH
77271: LD_INT 4
77273: NEG
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 3
77281: NEG
77282: PUSH
77283: LD_INT 3
77285: NEG
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: PUSH
77291: LD_INT 4
77293: NEG
77294: PUSH
77295: LD_INT 3
77297: NEG
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PUSH
77303: LD_INT 5
77305: NEG
77306: PUSH
77307: LD_INT 4
77309: NEG
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: PUSH
77315: LD_INT 5
77317: NEG
77318: PUSH
77319: LD_INT 5
77321: NEG
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: LD_INT 3
77329: NEG
77330: PUSH
77331: LD_INT 5
77333: NEG
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: PUSH
77339: LD_INT 5
77341: NEG
77342: PUSH
77343: LD_INT 3
77345: NEG
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PUSH
77351: LD_INT 0
77353: PUSH
77354: LD_INT 3
77356: NEG
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: LD_INT 0
77364: PUSH
77365: LD_INT 4
77367: NEG
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: PUSH
77373: LD_INT 1
77375: PUSH
77376: LD_INT 3
77378: NEG
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PUSH
77384: LD_INT 1
77386: PUSH
77387: LD_INT 2
77389: NEG
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PUSH
77395: LD_INT 0
77397: PUSH
77398: LD_INT 2
77400: NEG
77401: PUSH
77402: EMPTY
77403: LIST
77404: LIST
77405: PUSH
77406: LD_INT 1
77408: NEG
77409: PUSH
77410: LD_INT 3
77412: NEG
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: PUSH
77418: LD_INT 1
77420: NEG
77421: PUSH
77422: LD_INT 4
77424: NEG
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: PUSH
77430: LD_INT 2
77432: PUSH
77433: LD_INT 2
77435: NEG
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 2
77443: NEG
77444: PUSH
77445: LD_INT 4
77447: NEG
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_INT 4
77455: PUSH
77456: LD_INT 0
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_INT 4
77465: PUSH
77466: LD_INT 1
77468: NEG
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PUSH
77474: LD_INT 5
77476: PUSH
77477: LD_INT 0
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: PUSH
77484: LD_INT 5
77486: PUSH
77487: LD_INT 1
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 4
77496: PUSH
77497: LD_INT 1
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: LD_INT 3
77506: PUSH
77507: LD_INT 0
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PUSH
77514: LD_INT 3
77516: PUSH
77517: LD_INT 1
77519: NEG
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: LD_INT 3
77527: PUSH
77528: LD_INT 2
77530: NEG
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: PUSH
77536: LD_INT 5
77538: PUSH
77539: LD_INT 2
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: LIST
77570: LIST
77571: LIST
77572: LIST
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: LIST
77584: LIST
77585: LIST
77586: LIST
77587: LIST
77588: LIST
77589: LIST
77590: LIST
77591: LIST
77592: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
77593: LD_ADDR_VAR 0 32
77597: PUSH
77598: LD_INT 4
77600: NEG
77601: PUSH
77602: LD_INT 0
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: PUSH
77609: LD_INT 4
77611: NEG
77612: PUSH
77613: LD_INT 1
77615: NEG
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 3
77623: NEG
77624: PUSH
77625: LD_INT 0
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PUSH
77632: LD_INT 3
77634: NEG
77635: PUSH
77636: LD_INT 1
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 4
77645: NEG
77646: PUSH
77647: LD_INT 1
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 5
77656: NEG
77657: PUSH
77658: LD_INT 0
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 5
77667: NEG
77668: PUSH
77669: LD_INT 1
77671: NEG
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: PUSH
77677: LD_INT 5
77679: NEG
77680: PUSH
77681: LD_INT 2
77683: NEG
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: PUSH
77689: LD_INT 3
77691: NEG
77692: PUSH
77693: LD_INT 2
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: PUSH
77700: LD_INT 3
77702: NEG
77703: PUSH
77704: LD_INT 3
77706: NEG
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PUSH
77712: LD_INT 3
77714: NEG
77715: PUSH
77716: LD_INT 4
77718: NEG
77719: PUSH
77720: EMPTY
77721: LIST
77722: LIST
77723: PUSH
77724: LD_INT 2
77726: NEG
77727: PUSH
77728: LD_INT 3
77730: NEG
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PUSH
77736: LD_INT 2
77738: NEG
77739: PUSH
77740: LD_INT 2
77742: NEG
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: PUSH
77748: LD_INT 3
77750: NEG
77751: PUSH
77752: LD_INT 2
77754: NEG
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PUSH
77760: LD_INT 4
77762: NEG
77763: PUSH
77764: LD_INT 3
77766: NEG
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: PUSH
77772: LD_INT 4
77774: NEG
77775: PUSH
77776: LD_INT 4
77778: NEG
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 2
77786: NEG
77787: PUSH
77788: LD_INT 4
77790: NEG
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: PUSH
77796: LD_INT 4
77798: NEG
77799: PUSH
77800: LD_INT 2
77802: NEG
77803: PUSH
77804: EMPTY
77805: LIST
77806: LIST
77807: PUSH
77808: LD_INT 0
77810: PUSH
77811: LD_INT 4
77813: NEG
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: LD_INT 0
77821: PUSH
77822: LD_INT 5
77824: NEG
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: LD_INT 1
77832: PUSH
77833: LD_INT 4
77835: NEG
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: PUSH
77841: LD_INT 1
77843: PUSH
77844: LD_INT 3
77846: NEG
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PUSH
77852: LD_INT 0
77854: PUSH
77855: LD_INT 3
77857: NEG
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 1
77865: NEG
77866: PUSH
77867: LD_INT 4
77869: NEG
77870: PUSH
77871: EMPTY
77872: LIST
77873: LIST
77874: PUSH
77875: LD_INT 1
77877: NEG
77878: PUSH
77879: LD_INT 5
77881: NEG
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PUSH
77887: LD_INT 2
77889: PUSH
77890: LD_INT 3
77892: NEG
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: PUSH
77898: LD_INT 2
77900: NEG
77901: PUSH
77902: LD_INT 5
77904: NEG
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: PUSH
77910: LD_INT 3
77912: PUSH
77913: LD_INT 0
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PUSH
77920: LD_INT 3
77922: PUSH
77923: LD_INT 1
77925: NEG
77926: PUSH
77927: EMPTY
77928: LIST
77929: LIST
77930: PUSH
77931: LD_INT 4
77933: PUSH
77934: LD_INT 0
77936: PUSH
77937: EMPTY
77938: LIST
77939: LIST
77940: PUSH
77941: LD_INT 4
77943: PUSH
77944: LD_INT 1
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PUSH
77951: LD_INT 3
77953: PUSH
77954: LD_INT 1
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: PUSH
77961: LD_INT 2
77963: PUSH
77964: LD_INT 0
77966: PUSH
77967: EMPTY
77968: LIST
77969: LIST
77970: PUSH
77971: LD_INT 2
77973: PUSH
77974: LD_INT 1
77976: NEG
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: LD_INT 2
77984: PUSH
77985: LD_INT 2
77987: NEG
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: LD_INT 4
77995: PUSH
77996: LD_INT 2
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: PUSH
78003: LD_INT 4
78005: PUSH
78006: LD_INT 4
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: LD_INT 4
78015: PUSH
78016: LD_INT 3
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 5
78025: PUSH
78026: LD_INT 4
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: PUSH
78033: LD_INT 5
78035: PUSH
78036: LD_INT 5
78038: PUSH
78039: EMPTY
78040: LIST
78041: LIST
78042: PUSH
78043: LD_INT 4
78045: PUSH
78046: LD_INT 5
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: PUSH
78053: LD_INT 3
78055: PUSH
78056: LD_INT 4
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: PUSH
78063: LD_INT 3
78065: PUSH
78066: LD_INT 3
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: PUSH
78073: LD_INT 5
78075: PUSH
78076: LD_INT 3
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: PUSH
78083: LD_INT 3
78085: PUSH
78086: LD_INT 5
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: LIST
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
78140: LD_ADDR_VAR 0 33
78144: PUSH
78145: LD_INT 4
78147: NEG
78148: PUSH
78149: LD_INT 4
78151: NEG
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PUSH
78157: LD_INT 4
78159: NEG
78160: PUSH
78161: LD_INT 5
78163: NEG
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: PUSH
78169: LD_INT 3
78171: NEG
78172: PUSH
78173: LD_INT 4
78175: NEG
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: PUSH
78181: LD_INT 3
78183: NEG
78184: PUSH
78185: LD_INT 3
78187: NEG
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PUSH
78193: LD_INT 4
78195: NEG
78196: PUSH
78197: LD_INT 3
78199: NEG
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: PUSH
78205: LD_INT 5
78207: NEG
78208: PUSH
78209: LD_INT 4
78211: NEG
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: PUSH
78217: LD_INT 5
78219: NEG
78220: PUSH
78221: LD_INT 5
78223: NEG
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PUSH
78229: LD_INT 3
78231: NEG
78232: PUSH
78233: LD_INT 5
78235: NEG
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PUSH
78241: LD_INT 5
78243: NEG
78244: PUSH
78245: LD_INT 3
78247: NEG
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 0
78255: PUSH
78256: LD_INT 3
78258: NEG
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: LD_INT 0
78266: PUSH
78267: LD_INT 4
78269: NEG
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: LD_INT 1
78277: PUSH
78278: LD_INT 3
78280: NEG
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: LD_INT 1
78288: PUSH
78289: LD_INT 2
78291: NEG
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: PUSH
78297: LD_INT 0
78299: PUSH
78300: LD_INT 2
78302: NEG
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 1
78310: NEG
78311: PUSH
78312: LD_INT 3
78314: NEG
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: LD_INT 1
78322: NEG
78323: PUSH
78324: LD_INT 4
78326: NEG
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 2
78334: PUSH
78335: LD_INT 2
78337: NEG
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: PUSH
78343: LD_INT 2
78345: NEG
78346: PUSH
78347: LD_INT 4
78349: NEG
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PUSH
78355: LD_INT 4
78357: PUSH
78358: LD_INT 0
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: PUSH
78365: LD_INT 4
78367: PUSH
78368: LD_INT 1
78370: NEG
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 5
78378: PUSH
78379: LD_INT 0
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 5
78388: PUSH
78389: LD_INT 1
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 4
78398: PUSH
78399: LD_INT 1
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: LD_INT 3
78408: PUSH
78409: LD_INT 0
78411: PUSH
78412: EMPTY
78413: LIST
78414: LIST
78415: PUSH
78416: LD_INT 3
78418: PUSH
78419: LD_INT 1
78421: NEG
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: PUSH
78427: LD_INT 3
78429: PUSH
78430: LD_INT 2
78432: NEG
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PUSH
78438: LD_INT 5
78440: PUSH
78441: LD_INT 2
78443: PUSH
78444: EMPTY
78445: LIST
78446: LIST
78447: PUSH
78448: LD_INT 3
78450: PUSH
78451: LD_INT 3
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: PUSH
78458: LD_INT 3
78460: PUSH
78461: LD_INT 2
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: PUSH
78468: LD_INT 4
78470: PUSH
78471: LD_INT 3
78473: PUSH
78474: EMPTY
78475: LIST
78476: LIST
78477: PUSH
78478: LD_INT 4
78480: PUSH
78481: LD_INT 4
78483: PUSH
78484: EMPTY
78485: LIST
78486: LIST
78487: PUSH
78488: LD_INT 3
78490: PUSH
78491: LD_INT 4
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: PUSH
78498: LD_INT 2
78500: PUSH
78501: LD_INT 3
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: PUSH
78508: LD_INT 2
78510: PUSH
78511: LD_INT 2
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: LD_INT 4
78520: PUSH
78521: LD_INT 2
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: PUSH
78528: LD_INT 2
78530: PUSH
78531: LD_INT 4
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 0
78540: PUSH
78541: LD_INT 4
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: PUSH
78548: LD_INT 0
78550: PUSH
78551: LD_INT 3
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PUSH
78558: LD_INT 1
78560: PUSH
78561: LD_INT 4
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: PUSH
78568: LD_INT 1
78570: PUSH
78571: LD_INT 5
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PUSH
78578: LD_INT 0
78580: PUSH
78581: LD_INT 5
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: PUSH
78588: LD_INT 1
78590: NEG
78591: PUSH
78592: LD_INT 4
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: PUSH
78599: LD_INT 1
78601: NEG
78602: PUSH
78603: LD_INT 3
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PUSH
78610: LD_INT 2
78612: PUSH
78613: LD_INT 5
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PUSH
78620: LD_INT 2
78622: NEG
78623: PUSH
78624: LD_INT 3
78626: PUSH
78627: EMPTY
78628: LIST
78629: LIST
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: LIST
78635: LIST
78636: LIST
78637: LIST
78638: LIST
78639: LIST
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: LIST
78648: LIST
78649: LIST
78650: LIST
78651: LIST
78652: LIST
78653: LIST
78654: LIST
78655: LIST
78656: LIST
78657: LIST
78658: LIST
78659: LIST
78660: LIST
78661: LIST
78662: LIST
78663: LIST
78664: LIST
78665: LIST
78666: LIST
78667: LIST
78668: LIST
78669: LIST
78670: LIST
78671: LIST
78672: LIST
78673: LIST
78674: LIST
78675: LIST
78676: LIST
78677: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78678: LD_ADDR_VAR 0 34
78682: PUSH
78683: LD_INT 0
78685: PUSH
78686: LD_INT 4
78688: NEG
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: PUSH
78694: LD_INT 0
78696: PUSH
78697: LD_INT 5
78699: NEG
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: PUSH
78705: LD_INT 1
78707: PUSH
78708: LD_INT 4
78710: NEG
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: LD_INT 1
78718: PUSH
78719: LD_INT 3
78721: NEG
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: PUSH
78727: LD_INT 0
78729: PUSH
78730: LD_INT 3
78732: NEG
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PUSH
78738: LD_INT 1
78740: NEG
78741: PUSH
78742: LD_INT 4
78744: NEG
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PUSH
78750: LD_INT 1
78752: NEG
78753: PUSH
78754: LD_INT 5
78756: NEG
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: PUSH
78762: LD_INT 2
78764: PUSH
78765: LD_INT 3
78767: NEG
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PUSH
78773: LD_INT 2
78775: NEG
78776: PUSH
78777: LD_INT 5
78779: NEG
78780: PUSH
78781: EMPTY
78782: LIST
78783: LIST
78784: PUSH
78785: LD_INT 3
78787: PUSH
78788: LD_INT 0
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: PUSH
78795: LD_INT 3
78797: PUSH
78798: LD_INT 1
78800: NEG
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 4
78808: PUSH
78809: LD_INT 0
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: LD_INT 4
78818: PUSH
78819: LD_INT 1
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: PUSH
78826: LD_INT 3
78828: PUSH
78829: LD_INT 1
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: PUSH
78836: LD_INT 2
78838: PUSH
78839: LD_INT 0
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: PUSH
78846: LD_INT 2
78848: PUSH
78849: LD_INT 1
78851: NEG
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: PUSH
78857: LD_INT 2
78859: PUSH
78860: LD_INT 2
78862: NEG
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: LD_INT 4
78870: PUSH
78871: LD_INT 2
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: PUSH
78878: LD_INT 4
78880: PUSH
78881: LD_INT 4
78883: PUSH
78884: EMPTY
78885: LIST
78886: LIST
78887: PUSH
78888: LD_INT 4
78890: PUSH
78891: LD_INT 3
78893: PUSH
78894: EMPTY
78895: LIST
78896: LIST
78897: PUSH
78898: LD_INT 5
78900: PUSH
78901: LD_INT 4
78903: PUSH
78904: EMPTY
78905: LIST
78906: LIST
78907: PUSH
78908: LD_INT 5
78910: PUSH
78911: LD_INT 5
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: PUSH
78918: LD_INT 4
78920: PUSH
78921: LD_INT 5
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: PUSH
78928: LD_INT 3
78930: PUSH
78931: LD_INT 4
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 3
78940: PUSH
78941: LD_INT 3
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PUSH
78948: LD_INT 5
78950: PUSH
78951: LD_INT 3
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PUSH
78958: LD_INT 3
78960: PUSH
78961: LD_INT 5
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: PUSH
78968: LD_INT 0
78970: PUSH
78971: LD_INT 3
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: PUSH
78978: LD_INT 0
78980: PUSH
78981: LD_INT 2
78983: PUSH
78984: EMPTY
78985: LIST
78986: LIST
78987: PUSH
78988: LD_INT 1
78990: PUSH
78991: LD_INT 3
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 1
79000: PUSH
79001: LD_INT 4
79003: PUSH
79004: EMPTY
79005: LIST
79006: LIST
79007: PUSH
79008: LD_INT 0
79010: PUSH
79011: LD_INT 4
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: PUSH
79018: LD_INT 1
79020: NEG
79021: PUSH
79022: LD_INT 3
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: LD_INT 1
79031: NEG
79032: PUSH
79033: LD_INT 2
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 2
79042: PUSH
79043: LD_INT 4
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 2
79052: NEG
79053: PUSH
79054: LD_INT 2
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: PUSH
79061: LD_INT 4
79063: NEG
79064: PUSH
79065: LD_INT 0
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 4
79074: NEG
79075: PUSH
79076: LD_INT 1
79078: NEG
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: PUSH
79084: LD_INT 3
79086: NEG
79087: PUSH
79088: LD_INT 0
79090: PUSH
79091: EMPTY
79092: LIST
79093: LIST
79094: PUSH
79095: LD_INT 3
79097: NEG
79098: PUSH
79099: LD_INT 1
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: LD_INT 4
79108: NEG
79109: PUSH
79110: LD_INT 1
79112: PUSH
79113: EMPTY
79114: LIST
79115: LIST
79116: PUSH
79117: LD_INT 5
79119: NEG
79120: PUSH
79121: LD_INT 0
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: PUSH
79128: LD_INT 5
79130: NEG
79131: PUSH
79132: LD_INT 1
79134: NEG
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: PUSH
79140: LD_INT 5
79142: NEG
79143: PUSH
79144: LD_INT 2
79146: NEG
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 3
79154: NEG
79155: PUSH
79156: LD_INT 2
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: LIST
79167: LIST
79168: LIST
79169: LIST
79170: LIST
79171: LIST
79172: LIST
79173: LIST
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: LIST
79186: LIST
79187: LIST
79188: LIST
79189: LIST
79190: LIST
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: LIST
79196: LIST
79197: LIST
79198: LIST
79199: LIST
79200: LIST
79201: LIST
79202: LIST
79203: LIST
79204: LIST
79205: LIST
79206: LIST
79207: LIST
79208: LIST
79209: ST_TO_ADDR
// end ; end ;
79210: GO 79213
79212: POP
// case btype of b_depot , b_warehouse :
79213: LD_VAR 0 1
79217: PUSH
79218: LD_INT 0
79220: DOUBLE
79221: EQUAL
79222: IFTRUE 79232
79224: LD_INT 1
79226: DOUBLE
79227: EQUAL
79228: IFTRUE 79232
79230: GO 79433
79232: POP
// case nation of nation_american :
79233: LD_VAR 0 5
79237: PUSH
79238: LD_INT 1
79240: DOUBLE
79241: EQUAL
79242: IFTRUE 79246
79244: GO 79302
79246: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
79247: LD_ADDR_VAR 0 9
79251: PUSH
79252: LD_VAR 0 11
79256: PUSH
79257: LD_VAR 0 12
79261: PUSH
79262: LD_VAR 0 13
79266: PUSH
79267: LD_VAR 0 14
79271: PUSH
79272: LD_VAR 0 15
79276: PUSH
79277: LD_VAR 0 16
79281: PUSH
79282: EMPTY
79283: LIST
79284: LIST
79285: LIST
79286: LIST
79287: LIST
79288: LIST
79289: PUSH
79290: LD_VAR 0 4
79294: PUSH
79295: LD_INT 1
79297: PLUS
79298: ARRAY
79299: ST_TO_ADDR
79300: GO 79431
79302: LD_INT 2
79304: DOUBLE
79305: EQUAL
79306: IFTRUE 79310
79308: GO 79366
79310: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
79311: LD_ADDR_VAR 0 9
79315: PUSH
79316: LD_VAR 0 17
79320: PUSH
79321: LD_VAR 0 18
79325: PUSH
79326: LD_VAR 0 19
79330: PUSH
79331: LD_VAR 0 20
79335: PUSH
79336: LD_VAR 0 21
79340: PUSH
79341: LD_VAR 0 22
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: LIST
79353: PUSH
79354: LD_VAR 0 4
79358: PUSH
79359: LD_INT 1
79361: PLUS
79362: ARRAY
79363: ST_TO_ADDR
79364: GO 79431
79366: LD_INT 3
79368: DOUBLE
79369: EQUAL
79370: IFTRUE 79374
79372: GO 79430
79374: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
79375: LD_ADDR_VAR 0 9
79379: PUSH
79380: LD_VAR 0 23
79384: PUSH
79385: LD_VAR 0 24
79389: PUSH
79390: LD_VAR 0 25
79394: PUSH
79395: LD_VAR 0 26
79399: PUSH
79400: LD_VAR 0 27
79404: PUSH
79405: LD_VAR 0 28
79409: PUSH
79410: EMPTY
79411: LIST
79412: LIST
79413: LIST
79414: LIST
79415: LIST
79416: LIST
79417: PUSH
79418: LD_VAR 0 4
79422: PUSH
79423: LD_INT 1
79425: PLUS
79426: ARRAY
79427: ST_TO_ADDR
79428: GO 79431
79430: POP
79431: GO 79986
79433: LD_INT 2
79435: DOUBLE
79436: EQUAL
79437: IFTRUE 79447
79439: LD_INT 3
79441: DOUBLE
79442: EQUAL
79443: IFTRUE 79447
79445: GO 79503
79447: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
79448: LD_ADDR_VAR 0 9
79452: PUSH
79453: LD_VAR 0 29
79457: PUSH
79458: LD_VAR 0 30
79462: PUSH
79463: LD_VAR 0 31
79467: PUSH
79468: LD_VAR 0 32
79472: PUSH
79473: LD_VAR 0 33
79477: PUSH
79478: LD_VAR 0 34
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: PUSH
79491: LD_VAR 0 4
79495: PUSH
79496: LD_INT 1
79498: PLUS
79499: ARRAY
79500: ST_TO_ADDR
79501: GO 79986
79503: LD_INT 16
79505: DOUBLE
79506: EQUAL
79507: IFTRUE 79565
79509: LD_INT 17
79511: DOUBLE
79512: EQUAL
79513: IFTRUE 79565
79515: LD_INT 18
79517: DOUBLE
79518: EQUAL
79519: IFTRUE 79565
79521: LD_INT 19
79523: DOUBLE
79524: EQUAL
79525: IFTRUE 79565
79527: LD_INT 22
79529: DOUBLE
79530: EQUAL
79531: IFTRUE 79565
79533: LD_INT 20
79535: DOUBLE
79536: EQUAL
79537: IFTRUE 79565
79539: LD_INT 21
79541: DOUBLE
79542: EQUAL
79543: IFTRUE 79565
79545: LD_INT 23
79547: DOUBLE
79548: EQUAL
79549: IFTRUE 79565
79551: LD_INT 24
79553: DOUBLE
79554: EQUAL
79555: IFTRUE 79565
79557: LD_INT 25
79559: DOUBLE
79560: EQUAL
79561: IFTRUE 79565
79563: GO 79621
79565: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
79566: LD_ADDR_VAR 0 9
79570: PUSH
79571: LD_VAR 0 35
79575: PUSH
79576: LD_VAR 0 36
79580: PUSH
79581: LD_VAR 0 37
79585: PUSH
79586: LD_VAR 0 38
79590: PUSH
79591: LD_VAR 0 39
79595: PUSH
79596: LD_VAR 0 40
79600: PUSH
79601: EMPTY
79602: LIST
79603: LIST
79604: LIST
79605: LIST
79606: LIST
79607: LIST
79608: PUSH
79609: LD_VAR 0 4
79613: PUSH
79614: LD_INT 1
79616: PLUS
79617: ARRAY
79618: ST_TO_ADDR
79619: GO 79986
79621: LD_INT 6
79623: DOUBLE
79624: EQUAL
79625: IFTRUE 79677
79627: LD_INT 7
79629: DOUBLE
79630: EQUAL
79631: IFTRUE 79677
79633: LD_INT 8
79635: DOUBLE
79636: EQUAL
79637: IFTRUE 79677
79639: LD_INT 13
79641: DOUBLE
79642: EQUAL
79643: IFTRUE 79677
79645: LD_INT 12
79647: DOUBLE
79648: EQUAL
79649: IFTRUE 79677
79651: LD_INT 15
79653: DOUBLE
79654: EQUAL
79655: IFTRUE 79677
79657: LD_INT 11
79659: DOUBLE
79660: EQUAL
79661: IFTRUE 79677
79663: LD_INT 14
79665: DOUBLE
79666: EQUAL
79667: IFTRUE 79677
79669: LD_INT 10
79671: DOUBLE
79672: EQUAL
79673: IFTRUE 79677
79675: GO 79733
79677: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
79678: LD_ADDR_VAR 0 9
79682: PUSH
79683: LD_VAR 0 41
79687: PUSH
79688: LD_VAR 0 42
79692: PUSH
79693: LD_VAR 0 43
79697: PUSH
79698: LD_VAR 0 44
79702: PUSH
79703: LD_VAR 0 45
79707: PUSH
79708: LD_VAR 0 46
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: PUSH
79721: LD_VAR 0 4
79725: PUSH
79726: LD_INT 1
79728: PLUS
79729: ARRAY
79730: ST_TO_ADDR
79731: GO 79986
79733: LD_INT 36
79735: DOUBLE
79736: EQUAL
79737: IFTRUE 79741
79739: GO 79797
79741: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
79742: LD_ADDR_VAR 0 9
79746: PUSH
79747: LD_VAR 0 47
79751: PUSH
79752: LD_VAR 0 48
79756: PUSH
79757: LD_VAR 0 49
79761: PUSH
79762: LD_VAR 0 50
79766: PUSH
79767: LD_VAR 0 51
79771: PUSH
79772: LD_VAR 0 52
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: LIST
79781: LIST
79782: LIST
79783: LIST
79784: PUSH
79785: LD_VAR 0 4
79789: PUSH
79790: LD_INT 1
79792: PLUS
79793: ARRAY
79794: ST_TO_ADDR
79795: GO 79986
79797: LD_INT 4
79799: DOUBLE
79800: EQUAL
79801: IFTRUE 79823
79803: LD_INT 5
79805: DOUBLE
79806: EQUAL
79807: IFTRUE 79823
79809: LD_INT 34
79811: DOUBLE
79812: EQUAL
79813: IFTRUE 79823
79815: LD_INT 37
79817: DOUBLE
79818: EQUAL
79819: IFTRUE 79823
79821: GO 79879
79823: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
79824: LD_ADDR_VAR 0 9
79828: PUSH
79829: LD_VAR 0 53
79833: PUSH
79834: LD_VAR 0 54
79838: PUSH
79839: LD_VAR 0 55
79843: PUSH
79844: LD_VAR 0 56
79848: PUSH
79849: LD_VAR 0 57
79853: PUSH
79854: LD_VAR 0 58
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: PUSH
79867: LD_VAR 0 4
79871: PUSH
79872: LD_INT 1
79874: PLUS
79875: ARRAY
79876: ST_TO_ADDR
79877: GO 79986
79879: LD_INT 31
79881: DOUBLE
79882: EQUAL
79883: IFTRUE 79929
79885: LD_INT 32
79887: DOUBLE
79888: EQUAL
79889: IFTRUE 79929
79891: LD_INT 33
79893: DOUBLE
79894: EQUAL
79895: IFTRUE 79929
79897: LD_INT 27
79899: DOUBLE
79900: EQUAL
79901: IFTRUE 79929
79903: LD_INT 26
79905: DOUBLE
79906: EQUAL
79907: IFTRUE 79929
79909: LD_INT 28
79911: DOUBLE
79912: EQUAL
79913: IFTRUE 79929
79915: LD_INT 29
79917: DOUBLE
79918: EQUAL
79919: IFTRUE 79929
79921: LD_INT 30
79923: DOUBLE
79924: EQUAL
79925: IFTRUE 79929
79927: GO 79985
79929: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
79930: LD_ADDR_VAR 0 9
79934: PUSH
79935: LD_VAR 0 59
79939: PUSH
79940: LD_VAR 0 60
79944: PUSH
79945: LD_VAR 0 61
79949: PUSH
79950: LD_VAR 0 62
79954: PUSH
79955: LD_VAR 0 63
79959: PUSH
79960: LD_VAR 0 64
79964: PUSH
79965: EMPTY
79966: LIST
79967: LIST
79968: LIST
79969: LIST
79970: LIST
79971: LIST
79972: PUSH
79973: LD_VAR 0 4
79977: PUSH
79978: LD_INT 1
79980: PLUS
79981: ARRAY
79982: ST_TO_ADDR
79983: GO 79986
79985: POP
// temp_list2 = [ ] ;
79986: LD_ADDR_VAR 0 10
79990: PUSH
79991: EMPTY
79992: ST_TO_ADDR
// for i in temp_list do
79993: LD_ADDR_VAR 0 8
79997: PUSH
79998: LD_VAR 0 9
80002: PUSH
80003: FOR_IN
80004: IFFALSE 80056
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
80006: LD_ADDR_VAR 0 10
80010: PUSH
80011: LD_VAR 0 10
80015: PUSH
80016: LD_VAR 0 8
80020: PUSH
80021: LD_INT 1
80023: ARRAY
80024: PUSH
80025: LD_VAR 0 2
80029: PLUS
80030: PUSH
80031: LD_VAR 0 8
80035: PUSH
80036: LD_INT 2
80038: ARRAY
80039: PUSH
80040: LD_VAR 0 3
80044: PLUS
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PUSH
80050: EMPTY
80051: LIST
80052: ADD
80053: ST_TO_ADDR
80054: GO 80003
80056: POP
80057: POP
// result = temp_list2 ;
80058: LD_ADDR_VAR 0 7
80062: PUSH
80063: LD_VAR 0 10
80067: ST_TO_ADDR
// end ;
80068: LD_VAR 0 7
80072: RET
// export function EnemyInRange ( unit , dist ) ; begin
80073: LD_INT 0
80075: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
80076: LD_ADDR_VAR 0 3
80080: PUSH
80081: LD_VAR 0 1
80085: PPUSH
80086: CALL_OW 255
80090: PPUSH
80091: LD_VAR 0 1
80095: PPUSH
80096: CALL_OW 250
80100: PPUSH
80101: LD_VAR 0 1
80105: PPUSH
80106: CALL_OW 251
80110: PPUSH
80111: LD_VAR 0 2
80115: PPUSH
80116: CALL 54177 0 4
80120: PUSH
80121: LD_INT 4
80123: ARRAY
80124: ST_TO_ADDR
// end ;
80125: LD_VAR 0 3
80129: RET
// export function PlayerSeeMe ( unit ) ; begin
80130: LD_INT 0
80132: PPUSH
// result := See ( your_side , unit ) ;
80133: LD_ADDR_VAR 0 2
80137: PUSH
80138: LD_OWVAR 2
80142: PPUSH
80143: LD_VAR 0 1
80147: PPUSH
80148: CALL_OW 292
80152: ST_TO_ADDR
// end ;
80153: LD_VAR 0 2
80157: RET
// export function ReverseDir ( unit ) ; begin
80158: LD_INT 0
80160: PPUSH
// if not unit then
80161: LD_VAR 0 1
80165: NOT
80166: IFFALSE 80170
// exit ;
80168: GO 80216
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
80170: LD_ADDR_VAR 0 2
80174: PUSH
80175: LD_INT 3
80177: PUSH
80178: LD_INT 4
80180: PUSH
80181: LD_INT 5
80183: PUSH
80184: LD_INT 0
80186: PUSH
80187: LD_INT 1
80189: PUSH
80190: LD_INT 2
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: LIST
80197: LIST
80198: LIST
80199: LIST
80200: PUSH
80201: LD_VAR 0 1
80205: PPUSH
80206: CALL_OW 254
80210: PUSH
80211: LD_INT 1
80213: PLUS
80214: ARRAY
80215: ST_TO_ADDR
// end ;
80216: LD_VAR 0 2
80220: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
80221: LD_INT 0
80223: PPUSH
80224: PPUSH
80225: PPUSH
80226: PPUSH
80227: PPUSH
// if not hexes then
80228: LD_VAR 0 2
80232: NOT
80233: IFFALSE 80237
// exit ;
80235: GO 80385
// dist := 9999 ;
80237: LD_ADDR_VAR 0 5
80241: PUSH
80242: LD_INT 9999
80244: ST_TO_ADDR
// for i = 1 to hexes do
80245: LD_ADDR_VAR 0 4
80249: PUSH
80250: DOUBLE
80251: LD_INT 1
80253: DEC
80254: ST_TO_ADDR
80255: LD_VAR 0 2
80259: PUSH
80260: FOR_TO
80261: IFFALSE 80373
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
80263: LD_VAR 0 1
80267: PPUSH
80268: LD_VAR 0 2
80272: PUSH
80273: LD_VAR 0 4
80277: ARRAY
80278: PUSH
80279: LD_INT 1
80281: ARRAY
80282: PPUSH
80283: LD_VAR 0 2
80287: PUSH
80288: LD_VAR 0 4
80292: ARRAY
80293: PUSH
80294: LD_INT 2
80296: ARRAY
80297: PPUSH
80298: CALL_OW 297
80302: PUSH
80303: LD_VAR 0 5
80307: LESS
80308: IFFALSE 80371
// begin hex := hexes [ i ] ;
80310: LD_ADDR_VAR 0 7
80314: PUSH
80315: LD_VAR 0 2
80319: PUSH
80320: LD_VAR 0 4
80324: ARRAY
80325: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
80326: LD_ADDR_VAR 0 5
80330: PUSH
80331: LD_VAR 0 1
80335: PPUSH
80336: LD_VAR 0 2
80340: PUSH
80341: LD_VAR 0 4
80345: ARRAY
80346: PUSH
80347: LD_INT 1
80349: ARRAY
80350: PPUSH
80351: LD_VAR 0 2
80355: PUSH
80356: LD_VAR 0 4
80360: ARRAY
80361: PUSH
80362: LD_INT 2
80364: ARRAY
80365: PPUSH
80366: CALL_OW 297
80370: ST_TO_ADDR
// end ; end ;
80371: GO 80260
80373: POP
80374: POP
// result := hex ;
80375: LD_ADDR_VAR 0 3
80379: PUSH
80380: LD_VAR 0 7
80384: ST_TO_ADDR
// end ;
80385: LD_VAR 0 3
80389: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
80390: LD_INT 0
80392: PPUSH
80393: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
80394: LD_VAR 0 1
80398: NOT
80399: PUSH
80400: LD_VAR 0 1
80404: PUSH
80405: LD_INT 21
80407: PUSH
80408: LD_INT 2
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PUSH
80415: LD_INT 23
80417: PUSH
80418: LD_INT 2
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PUSH
80425: EMPTY
80426: LIST
80427: LIST
80428: PPUSH
80429: CALL_OW 69
80433: IN
80434: NOT
80435: OR
80436: IFFALSE 80440
// exit ;
80438: GO 80487
// for i = 1 to 3 do
80440: LD_ADDR_VAR 0 3
80444: PUSH
80445: DOUBLE
80446: LD_INT 1
80448: DEC
80449: ST_TO_ADDR
80450: LD_INT 3
80452: PUSH
80453: FOR_TO
80454: IFFALSE 80485
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
80456: LD_VAR 0 1
80460: PPUSH
80461: CALL_OW 250
80465: PPUSH
80466: LD_VAR 0 1
80470: PPUSH
80471: CALL_OW 251
80475: PPUSH
80476: LD_INT 1
80478: PPUSH
80479: CALL_OW 453
80483: GO 80453
80485: POP
80486: POP
// end ;
80487: LD_VAR 0 2
80491: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
80492: LD_INT 0
80494: PPUSH
80495: PPUSH
80496: PPUSH
80497: PPUSH
80498: PPUSH
80499: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
80500: LD_VAR 0 1
80504: NOT
80505: PUSH
80506: LD_VAR 0 2
80510: NOT
80511: OR
80512: PUSH
80513: LD_VAR 0 1
80517: PPUSH
80518: CALL_OW 314
80522: OR
80523: IFFALSE 80527
// exit ;
80525: GO 80968
// x := GetX ( enemy_unit ) ;
80527: LD_ADDR_VAR 0 7
80531: PUSH
80532: LD_VAR 0 2
80536: PPUSH
80537: CALL_OW 250
80541: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
80542: LD_ADDR_VAR 0 8
80546: PUSH
80547: LD_VAR 0 2
80551: PPUSH
80552: CALL_OW 251
80556: ST_TO_ADDR
// if not x or not y then
80557: LD_VAR 0 7
80561: NOT
80562: PUSH
80563: LD_VAR 0 8
80567: NOT
80568: OR
80569: IFFALSE 80573
// exit ;
80571: GO 80968
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
80573: LD_ADDR_VAR 0 6
80577: PUSH
80578: LD_VAR 0 7
80582: PPUSH
80583: LD_INT 0
80585: PPUSH
80586: LD_INT 4
80588: PPUSH
80589: CALL_OW 272
80593: PUSH
80594: LD_VAR 0 8
80598: PPUSH
80599: LD_INT 0
80601: PPUSH
80602: LD_INT 4
80604: PPUSH
80605: CALL_OW 273
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: PUSH
80614: LD_VAR 0 7
80618: PPUSH
80619: LD_INT 1
80621: PPUSH
80622: LD_INT 4
80624: PPUSH
80625: CALL_OW 272
80629: PUSH
80630: LD_VAR 0 8
80634: PPUSH
80635: LD_INT 1
80637: PPUSH
80638: LD_INT 4
80640: PPUSH
80641: CALL_OW 273
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: LD_VAR 0 7
80654: PPUSH
80655: LD_INT 2
80657: PPUSH
80658: LD_INT 4
80660: PPUSH
80661: CALL_OW 272
80665: PUSH
80666: LD_VAR 0 8
80670: PPUSH
80671: LD_INT 2
80673: PPUSH
80674: LD_INT 4
80676: PPUSH
80677: CALL_OW 273
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: PUSH
80686: LD_VAR 0 7
80690: PPUSH
80691: LD_INT 3
80693: PPUSH
80694: LD_INT 4
80696: PPUSH
80697: CALL_OW 272
80701: PUSH
80702: LD_VAR 0 8
80706: PPUSH
80707: LD_INT 3
80709: PPUSH
80710: LD_INT 4
80712: PPUSH
80713: CALL_OW 273
80717: PUSH
80718: EMPTY
80719: LIST
80720: LIST
80721: PUSH
80722: LD_VAR 0 7
80726: PPUSH
80727: LD_INT 4
80729: PPUSH
80730: LD_INT 4
80732: PPUSH
80733: CALL_OW 272
80737: PUSH
80738: LD_VAR 0 8
80742: PPUSH
80743: LD_INT 4
80745: PPUSH
80746: LD_INT 4
80748: PPUSH
80749: CALL_OW 273
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: PUSH
80758: LD_VAR 0 7
80762: PPUSH
80763: LD_INT 5
80765: PPUSH
80766: LD_INT 4
80768: PPUSH
80769: CALL_OW 272
80773: PUSH
80774: LD_VAR 0 8
80778: PPUSH
80779: LD_INT 5
80781: PPUSH
80782: LD_INT 4
80784: PPUSH
80785: CALL_OW 273
80789: PUSH
80790: EMPTY
80791: LIST
80792: LIST
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: ST_TO_ADDR
// for i = tmp downto 1 do
80802: LD_ADDR_VAR 0 4
80806: PUSH
80807: DOUBLE
80808: LD_VAR 0 6
80812: INC
80813: ST_TO_ADDR
80814: LD_INT 1
80816: PUSH
80817: FOR_DOWNTO
80818: IFFALSE 80919
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
80820: LD_VAR 0 6
80824: PUSH
80825: LD_VAR 0 4
80829: ARRAY
80830: PUSH
80831: LD_INT 1
80833: ARRAY
80834: PPUSH
80835: LD_VAR 0 6
80839: PUSH
80840: LD_VAR 0 4
80844: ARRAY
80845: PUSH
80846: LD_INT 2
80848: ARRAY
80849: PPUSH
80850: CALL_OW 488
80854: NOT
80855: PUSH
80856: LD_VAR 0 6
80860: PUSH
80861: LD_VAR 0 4
80865: ARRAY
80866: PUSH
80867: LD_INT 1
80869: ARRAY
80870: PPUSH
80871: LD_VAR 0 6
80875: PUSH
80876: LD_VAR 0 4
80880: ARRAY
80881: PUSH
80882: LD_INT 2
80884: ARRAY
80885: PPUSH
80886: CALL_OW 428
80890: PUSH
80891: LD_INT 0
80893: NONEQUAL
80894: OR
80895: IFFALSE 80917
// tmp := Delete ( tmp , i ) ;
80897: LD_ADDR_VAR 0 6
80901: PUSH
80902: LD_VAR 0 6
80906: PPUSH
80907: LD_VAR 0 4
80911: PPUSH
80912: CALL_OW 3
80916: ST_TO_ADDR
80917: GO 80817
80919: POP
80920: POP
// j := GetClosestHex ( unit , tmp ) ;
80921: LD_ADDR_VAR 0 5
80925: PUSH
80926: LD_VAR 0 1
80930: PPUSH
80931: LD_VAR 0 6
80935: PPUSH
80936: CALL 80221 0 2
80940: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
80941: LD_VAR 0 1
80945: PPUSH
80946: LD_VAR 0 5
80950: PUSH
80951: LD_INT 1
80953: ARRAY
80954: PPUSH
80955: LD_VAR 0 5
80959: PUSH
80960: LD_INT 2
80962: ARRAY
80963: PPUSH
80964: CALL_OW 111
// end ;
80968: LD_VAR 0 3
80972: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
80973: LD_INT 0
80975: PPUSH
80976: PPUSH
80977: PPUSH
// uc_side = 0 ;
80978: LD_ADDR_OWVAR 20
80982: PUSH
80983: LD_INT 0
80985: ST_TO_ADDR
// uc_nation = 0 ;
80986: LD_ADDR_OWVAR 21
80990: PUSH
80991: LD_INT 0
80993: ST_TO_ADDR
// InitHc ;
80994: CALL_OW 19
// InitVc ;
80998: CALL_OW 20
// if mastodonts then
81002: LD_VAR 0 6
81006: IFFALSE 81073
// for i = 1 to mastodonts do
81008: LD_ADDR_VAR 0 11
81012: PUSH
81013: DOUBLE
81014: LD_INT 1
81016: DEC
81017: ST_TO_ADDR
81018: LD_VAR 0 6
81022: PUSH
81023: FOR_TO
81024: IFFALSE 81071
// begin vc_chassis := 31 ;
81026: LD_ADDR_OWVAR 37
81030: PUSH
81031: LD_INT 31
81033: ST_TO_ADDR
// vc_control := control_rider ;
81034: LD_ADDR_OWVAR 38
81038: PUSH
81039: LD_INT 4
81041: ST_TO_ADDR
// animal := CreateVehicle ;
81042: LD_ADDR_VAR 0 12
81046: PUSH
81047: CALL_OW 45
81051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81052: LD_VAR 0 12
81056: PPUSH
81057: LD_VAR 0 8
81061: PPUSH
81062: LD_INT 0
81064: PPUSH
81065: CALL 87818 0 3
// end ;
81069: GO 81023
81071: POP
81072: POP
// if horses then
81073: LD_VAR 0 5
81077: IFFALSE 81144
// for i = 1 to horses do
81079: LD_ADDR_VAR 0 11
81083: PUSH
81084: DOUBLE
81085: LD_INT 1
81087: DEC
81088: ST_TO_ADDR
81089: LD_VAR 0 5
81093: PUSH
81094: FOR_TO
81095: IFFALSE 81142
// begin hc_class := 21 ;
81097: LD_ADDR_OWVAR 28
81101: PUSH
81102: LD_INT 21
81104: ST_TO_ADDR
// hc_gallery :=  ;
81105: LD_ADDR_OWVAR 33
81109: PUSH
81110: LD_STRING 
81112: ST_TO_ADDR
// animal := CreateHuman ;
81113: LD_ADDR_VAR 0 12
81117: PUSH
81118: CALL_OW 44
81122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81123: LD_VAR 0 12
81127: PPUSH
81128: LD_VAR 0 8
81132: PPUSH
81133: LD_INT 0
81135: PPUSH
81136: CALL 87818 0 3
// end ;
81140: GO 81094
81142: POP
81143: POP
// if birds then
81144: LD_VAR 0 1
81148: IFFALSE 81215
// for i = 1 to birds do
81150: LD_ADDR_VAR 0 11
81154: PUSH
81155: DOUBLE
81156: LD_INT 1
81158: DEC
81159: ST_TO_ADDR
81160: LD_VAR 0 1
81164: PUSH
81165: FOR_TO
81166: IFFALSE 81213
// begin hc_class = 18 ;
81168: LD_ADDR_OWVAR 28
81172: PUSH
81173: LD_INT 18
81175: ST_TO_ADDR
// hc_gallery =  ;
81176: LD_ADDR_OWVAR 33
81180: PUSH
81181: LD_STRING 
81183: ST_TO_ADDR
// animal := CreateHuman ;
81184: LD_ADDR_VAR 0 12
81188: PUSH
81189: CALL_OW 44
81193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81194: LD_VAR 0 12
81198: PPUSH
81199: LD_VAR 0 8
81203: PPUSH
81204: LD_INT 0
81206: PPUSH
81207: CALL 87818 0 3
// end ;
81211: GO 81165
81213: POP
81214: POP
// if tigers then
81215: LD_VAR 0 2
81219: IFFALSE 81303
// for i = 1 to tigers do
81221: LD_ADDR_VAR 0 11
81225: PUSH
81226: DOUBLE
81227: LD_INT 1
81229: DEC
81230: ST_TO_ADDR
81231: LD_VAR 0 2
81235: PUSH
81236: FOR_TO
81237: IFFALSE 81301
// begin hc_class = class_tiger ;
81239: LD_ADDR_OWVAR 28
81243: PUSH
81244: LD_INT 14
81246: ST_TO_ADDR
// hc_gallery =  ;
81247: LD_ADDR_OWVAR 33
81251: PUSH
81252: LD_STRING 
81254: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
81255: LD_ADDR_OWVAR 35
81259: PUSH
81260: LD_INT 7
81262: NEG
81263: PPUSH
81264: LD_INT 7
81266: PPUSH
81267: CALL_OW 12
81271: ST_TO_ADDR
// animal := CreateHuman ;
81272: LD_ADDR_VAR 0 12
81276: PUSH
81277: CALL_OW 44
81281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81282: LD_VAR 0 12
81286: PPUSH
81287: LD_VAR 0 8
81291: PPUSH
81292: LD_INT 0
81294: PPUSH
81295: CALL 87818 0 3
// end ;
81299: GO 81236
81301: POP
81302: POP
// if apemans then
81303: LD_VAR 0 3
81307: IFFALSE 81430
// for i = 1 to apemans do
81309: LD_ADDR_VAR 0 11
81313: PUSH
81314: DOUBLE
81315: LD_INT 1
81317: DEC
81318: ST_TO_ADDR
81319: LD_VAR 0 3
81323: PUSH
81324: FOR_TO
81325: IFFALSE 81428
// begin hc_class = class_apeman ;
81327: LD_ADDR_OWVAR 28
81331: PUSH
81332: LD_INT 12
81334: ST_TO_ADDR
// hc_gallery =  ;
81335: LD_ADDR_OWVAR 33
81339: PUSH
81340: LD_STRING 
81342: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
81343: LD_ADDR_OWVAR 35
81347: PUSH
81348: LD_INT 5
81350: NEG
81351: PPUSH
81352: LD_INT 5
81354: PPUSH
81355: CALL_OW 12
81359: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
81360: LD_ADDR_OWVAR 31
81364: PUSH
81365: LD_INT 1
81367: PPUSH
81368: LD_INT 3
81370: PPUSH
81371: CALL_OW 12
81375: PUSH
81376: LD_INT 1
81378: PPUSH
81379: LD_INT 3
81381: PPUSH
81382: CALL_OW 12
81386: PUSH
81387: LD_INT 0
81389: PUSH
81390: LD_INT 0
81392: PUSH
81393: EMPTY
81394: LIST
81395: LIST
81396: LIST
81397: LIST
81398: ST_TO_ADDR
// animal := CreateHuman ;
81399: LD_ADDR_VAR 0 12
81403: PUSH
81404: CALL_OW 44
81408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81409: LD_VAR 0 12
81413: PPUSH
81414: LD_VAR 0 8
81418: PPUSH
81419: LD_INT 0
81421: PPUSH
81422: CALL 87818 0 3
// end ;
81426: GO 81324
81428: POP
81429: POP
// if enchidnas then
81430: LD_VAR 0 4
81434: IFFALSE 81501
// for i = 1 to enchidnas do
81436: LD_ADDR_VAR 0 11
81440: PUSH
81441: DOUBLE
81442: LD_INT 1
81444: DEC
81445: ST_TO_ADDR
81446: LD_VAR 0 4
81450: PUSH
81451: FOR_TO
81452: IFFALSE 81499
// begin hc_class = 13 ;
81454: LD_ADDR_OWVAR 28
81458: PUSH
81459: LD_INT 13
81461: ST_TO_ADDR
// hc_gallery =  ;
81462: LD_ADDR_OWVAR 33
81466: PUSH
81467: LD_STRING 
81469: ST_TO_ADDR
// animal := CreateHuman ;
81470: LD_ADDR_VAR 0 12
81474: PUSH
81475: CALL_OW 44
81479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81480: LD_VAR 0 12
81484: PPUSH
81485: LD_VAR 0 8
81489: PPUSH
81490: LD_INT 0
81492: PPUSH
81493: CALL 87818 0 3
// end ;
81497: GO 81451
81499: POP
81500: POP
// if fishes then
81501: LD_VAR 0 7
81505: IFFALSE 81572
// for i = 1 to fishes do
81507: LD_ADDR_VAR 0 11
81511: PUSH
81512: DOUBLE
81513: LD_INT 1
81515: DEC
81516: ST_TO_ADDR
81517: LD_VAR 0 7
81521: PUSH
81522: FOR_TO
81523: IFFALSE 81570
// begin hc_class = 20 ;
81525: LD_ADDR_OWVAR 28
81529: PUSH
81530: LD_INT 20
81532: ST_TO_ADDR
// hc_gallery =  ;
81533: LD_ADDR_OWVAR 33
81537: PUSH
81538: LD_STRING 
81540: ST_TO_ADDR
// animal := CreateHuman ;
81541: LD_ADDR_VAR 0 12
81545: PUSH
81546: CALL_OW 44
81550: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
81551: LD_VAR 0 12
81555: PPUSH
81556: LD_VAR 0 9
81560: PPUSH
81561: LD_INT 0
81563: PPUSH
81564: CALL 87818 0 3
// end ;
81568: GO 81522
81570: POP
81571: POP
// end ;
81572: LD_VAR 0 10
81576: RET
// export function WantHeal ( sci , unit ) ; begin
81577: LD_INT 0
81579: PPUSH
// if GetTaskList ( sci ) > 0 then
81580: LD_VAR 0 1
81584: PPUSH
81585: CALL_OW 437
81589: PUSH
81590: LD_INT 0
81592: GREATER
81593: IFFALSE 81663
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
81595: LD_VAR 0 1
81599: PPUSH
81600: CALL_OW 437
81604: PUSH
81605: LD_INT 1
81607: ARRAY
81608: PUSH
81609: LD_INT 1
81611: ARRAY
81612: PUSH
81613: LD_STRING l
81615: EQUAL
81616: PUSH
81617: LD_VAR 0 1
81621: PPUSH
81622: CALL_OW 437
81626: PUSH
81627: LD_INT 1
81629: ARRAY
81630: PUSH
81631: LD_INT 4
81633: ARRAY
81634: PUSH
81635: LD_VAR 0 2
81639: EQUAL
81640: AND
81641: IFFALSE 81653
// result := true else
81643: LD_ADDR_VAR 0 3
81647: PUSH
81648: LD_INT 1
81650: ST_TO_ADDR
81651: GO 81661
// result := false ;
81653: LD_ADDR_VAR 0 3
81657: PUSH
81658: LD_INT 0
81660: ST_TO_ADDR
// end else
81661: GO 81671
// result := false ;
81663: LD_ADDR_VAR 0 3
81667: PUSH
81668: LD_INT 0
81670: ST_TO_ADDR
// end ;
81671: LD_VAR 0 3
81675: RET
// export function HealTarget ( sci ) ; begin
81676: LD_INT 0
81678: PPUSH
// if not sci then
81679: LD_VAR 0 1
81683: NOT
81684: IFFALSE 81688
// exit ;
81686: GO 81753
// result := 0 ;
81688: LD_ADDR_VAR 0 2
81692: PUSH
81693: LD_INT 0
81695: ST_TO_ADDR
// if GetTaskList ( sci ) then
81696: LD_VAR 0 1
81700: PPUSH
81701: CALL_OW 437
81705: IFFALSE 81753
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
81707: LD_VAR 0 1
81711: PPUSH
81712: CALL_OW 437
81716: PUSH
81717: LD_INT 1
81719: ARRAY
81720: PUSH
81721: LD_INT 1
81723: ARRAY
81724: PUSH
81725: LD_STRING l
81727: EQUAL
81728: IFFALSE 81753
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
81730: LD_ADDR_VAR 0 2
81734: PUSH
81735: LD_VAR 0 1
81739: PPUSH
81740: CALL_OW 437
81744: PUSH
81745: LD_INT 1
81747: ARRAY
81748: PUSH
81749: LD_INT 4
81751: ARRAY
81752: ST_TO_ADDR
// end ;
81753: LD_VAR 0 2
81757: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
81758: LD_INT 0
81760: PPUSH
81761: PPUSH
81762: PPUSH
81763: PPUSH
81764: PPUSH
81765: PPUSH
81766: PPUSH
81767: PPUSH
81768: PPUSH
81769: PPUSH
81770: PPUSH
81771: PPUSH
81772: PPUSH
81773: PPUSH
81774: PPUSH
81775: PPUSH
81776: PPUSH
81777: PPUSH
81778: PPUSH
81779: PPUSH
81780: PPUSH
81781: PPUSH
81782: PPUSH
81783: PPUSH
81784: PPUSH
81785: PPUSH
81786: PPUSH
81787: PPUSH
81788: PPUSH
81789: PPUSH
81790: PPUSH
81791: PPUSH
81792: PPUSH
81793: PPUSH
// if not list then
81794: LD_VAR 0 1
81798: NOT
81799: IFFALSE 81803
// exit ;
81801: GO 86429
// base := list [ 1 ] ;
81803: LD_ADDR_VAR 0 3
81807: PUSH
81808: LD_VAR 0 1
81812: PUSH
81813: LD_INT 1
81815: ARRAY
81816: ST_TO_ADDR
// group := list [ 2 ] ;
81817: LD_ADDR_VAR 0 4
81821: PUSH
81822: LD_VAR 0 1
81826: PUSH
81827: LD_INT 2
81829: ARRAY
81830: ST_TO_ADDR
// path := list [ 3 ] ;
81831: LD_ADDR_VAR 0 5
81835: PUSH
81836: LD_VAR 0 1
81840: PUSH
81841: LD_INT 3
81843: ARRAY
81844: ST_TO_ADDR
// flags := list [ 4 ] ;
81845: LD_ADDR_VAR 0 6
81849: PUSH
81850: LD_VAR 0 1
81854: PUSH
81855: LD_INT 4
81857: ARRAY
81858: ST_TO_ADDR
// mined := [ ] ;
81859: LD_ADDR_VAR 0 27
81863: PUSH
81864: EMPTY
81865: ST_TO_ADDR
// bombed := [ ] ;
81866: LD_ADDR_VAR 0 28
81870: PUSH
81871: EMPTY
81872: ST_TO_ADDR
// healers := [ ] ;
81873: LD_ADDR_VAR 0 31
81877: PUSH
81878: EMPTY
81879: ST_TO_ADDR
// to_heal := [ ] ;
81880: LD_ADDR_VAR 0 30
81884: PUSH
81885: EMPTY
81886: ST_TO_ADDR
// repairs := [ ] ;
81887: LD_ADDR_VAR 0 33
81891: PUSH
81892: EMPTY
81893: ST_TO_ADDR
// to_repair := [ ] ;
81894: LD_ADDR_VAR 0 32
81898: PUSH
81899: EMPTY
81900: ST_TO_ADDR
// if not group or not path then
81901: LD_VAR 0 4
81905: NOT
81906: PUSH
81907: LD_VAR 0 5
81911: NOT
81912: OR
81913: IFFALSE 81917
// exit ;
81915: GO 86429
// side := GetSide ( group [ 1 ] ) ;
81917: LD_ADDR_VAR 0 35
81921: PUSH
81922: LD_VAR 0 4
81926: PUSH
81927: LD_INT 1
81929: ARRAY
81930: PPUSH
81931: CALL_OW 255
81935: ST_TO_ADDR
// if flags then
81936: LD_VAR 0 6
81940: IFFALSE 82084
// begin f_ignore_area := flags [ 1 ] ;
81942: LD_ADDR_VAR 0 17
81946: PUSH
81947: LD_VAR 0 6
81951: PUSH
81952: LD_INT 1
81954: ARRAY
81955: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
81956: LD_ADDR_VAR 0 18
81960: PUSH
81961: LD_VAR 0 6
81965: PUSH
81966: LD_INT 2
81968: ARRAY
81969: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
81970: LD_ADDR_VAR 0 19
81974: PUSH
81975: LD_VAR 0 6
81979: PUSH
81980: LD_INT 3
81982: ARRAY
81983: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
81984: LD_ADDR_VAR 0 20
81988: PUSH
81989: LD_VAR 0 6
81993: PUSH
81994: LD_INT 4
81996: ARRAY
81997: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
81998: LD_ADDR_VAR 0 21
82002: PUSH
82003: LD_VAR 0 6
82007: PUSH
82008: LD_INT 5
82010: ARRAY
82011: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
82012: LD_ADDR_VAR 0 22
82016: PUSH
82017: LD_VAR 0 6
82021: PUSH
82022: LD_INT 6
82024: ARRAY
82025: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
82026: LD_ADDR_VAR 0 23
82030: PUSH
82031: LD_VAR 0 6
82035: PUSH
82036: LD_INT 7
82038: ARRAY
82039: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
82040: LD_ADDR_VAR 0 24
82044: PUSH
82045: LD_VAR 0 6
82049: PUSH
82050: LD_INT 8
82052: ARRAY
82053: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
82054: LD_ADDR_VAR 0 25
82058: PUSH
82059: LD_VAR 0 6
82063: PUSH
82064: LD_INT 9
82066: ARRAY
82067: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
82068: LD_ADDR_VAR 0 26
82072: PUSH
82073: LD_VAR 0 6
82077: PUSH
82078: LD_INT 10
82080: ARRAY
82081: ST_TO_ADDR
// end else
82082: GO 82164
// begin f_ignore_area := false ;
82084: LD_ADDR_VAR 0 17
82088: PUSH
82089: LD_INT 0
82091: ST_TO_ADDR
// f_capture := false ;
82092: LD_ADDR_VAR 0 18
82096: PUSH
82097: LD_INT 0
82099: ST_TO_ADDR
// f_ignore_civ := false ;
82100: LD_ADDR_VAR 0 19
82104: PUSH
82105: LD_INT 0
82107: ST_TO_ADDR
// f_murder := false ;
82108: LD_ADDR_VAR 0 20
82112: PUSH
82113: LD_INT 0
82115: ST_TO_ADDR
// f_mines := false ;
82116: LD_ADDR_VAR 0 21
82120: PUSH
82121: LD_INT 0
82123: ST_TO_ADDR
// f_repair := false ;
82124: LD_ADDR_VAR 0 22
82128: PUSH
82129: LD_INT 0
82131: ST_TO_ADDR
// f_heal := false ;
82132: LD_ADDR_VAR 0 23
82136: PUSH
82137: LD_INT 0
82139: ST_TO_ADDR
// f_spacetime := false ;
82140: LD_ADDR_VAR 0 24
82144: PUSH
82145: LD_INT 0
82147: ST_TO_ADDR
// f_attack_depot := false ;
82148: LD_ADDR_VAR 0 25
82152: PUSH
82153: LD_INT 0
82155: ST_TO_ADDR
// f_crawl := false ;
82156: LD_ADDR_VAR 0 26
82160: PUSH
82161: LD_INT 0
82163: ST_TO_ADDR
// end ; if f_heal then
82164: LD_VAR 0 23
82168: IFFALSE 82195
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
82170: LD_ADDR_VAR 0 31
82174: PUSH
82175: LD_VAR 0 4
82179: PPUSH
82180: LD_INT 25
82182: PUSH
82183: LD_INT 4
82185: PUSH
82186: EMPTY
82187: LIST
82188: LIST
82189: PPUSH
82190: CALL_OW 72
82194: ST_TO_ADDR
// if f_repair then
82195: LD_VAR 0 22
82199: IFFALSE 82226
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
82201: LD_ADDR_VAR 0 33
82205: PUSH
82206: LD_VAR 0 4
82210: PPUSH
82211: LD_INT 25
82213: PUSH
82214: LD_INT 3
82216: PUSH
82217: EMPTY
82218: LIST
82219: LIST
82220: PPUSH
82221: CALL_OW 72
82225: ST_TO_ADDR
// units_path := [ ] ;
82226: LD_ADDR_VAR 0 16
82230: PUSH
82231: EMPTY
82232: ST_TO_ADDR
// for i = 1 to group do
82233: LD_ADDR_VAR 0 7
82237: PUSH
82238: DOUBLE
82239: LD_INT 1
82241: DEC
82242: ST_TO_ADDR
82243: LD_VAR 0 4
82247: PUSH
82248: FOR_TO
82249: IFFALSE 82278
// units_path := Replace ( units_path , i , path ) ;
82251: LD_ADDR_VAR 0 16
82255: PUSH
82256: LD_VAR 0 16
82260: PPUSH
82261: LD_VAR 0 7
82265: PPUSH
82266: LD_VAR 0 5
82270: PPUSH
82271: CALL_OW 1
82275: ST_TO_ADDR
82276: GO 82248
82278: POP
82279: POP
// repeat for i = group downto 1 do
82280: LD_ADDR_VAR 0 7
82284: PUSH
82285: DOUBLE
82286: LD_VAR 0 4
82290: INC
82291: ST_TO_ADDR
82292: LD_INT 1
82294: PUSH
82295: FOR_DOWNTO
82296: IFFALSE 86392
// begin wait ( 5 ) ;
82298: LD_INT 5
82300: PPUSH
82301: CALL_OW 67
// tmp := [ ] ;
82305: LD_ADDR_VAR 0 14
82309: PUSH
82310: EMPTY
82311: ST_TO_ADDR
// attacking := false ;
82312: LD_ADDR_VAR 0 29
82316: PUSH
82317: LD_INT 0
82319: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
82320: LD_VAR 0 4
82324: PUSH
82325: LD_VAR 0 7
82329: ARRAY
82330: PPUSH
82331: CALL_OW 301
82335: PUSH
82336: LD_VAR 0 4
82340: PUSH
82341: LD_VAR 0 7
82345: ARRAY
82346: NOT
82347: OR
82348: IFFALSE 82457
// begin if GetType ( group [ i ] ) = unit_human then
82350: LD_VAR 0 4
82354: PUSH
82355: LD_VAR 0 7
82359: ARRAY
82360: PPUSH
82361: CALL_OW 247
82365: PUSH
82366: LD_INT 1
82368: EQUAL
82369: IFFALSE 82415
// begin to_heal := to_heal diff group [ i ] ;
82371: LD_ADDR_VAR 0 30
82375: PUSH
82376: LD_VAR 0 30
82380: PUSH
82381: LD_VAR 0 4
82385: PUSH
82386: LD_VAR 0 7
82390: ARRAY
82391: DIFF
82392: ST_TO_ADDR
// healers := healers diff group [ i ] ;
82393: LD_ADDR_VAR 0 31
82397: PUSH
82398: LD_VAR 0 31
82402: PUSH
82403: LD_VAR 0 4
82407: PUSH
82408: LD_VAR 0 7
82412: ARRAY
82413: DIFF
82414: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
82415: LD_ADDR_VAR 0 4
82419: PUSH
82420: LD_VAR 0 4
82424: PPUSH
82425: LD_VAR 0 7
82429: PPUSH
82430: CALL_OW 3
82434: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
82435: LD_ADDR_VAR 0 16
82439: PUSH
82440: LD_VAR 0 16
82444: PPUSH
82445: LD_VAR 0 7
82449: PPUSH
82450: CALL_OW 3
82454: ST_TO_ADDR
// continue ;
82455: GO 82295
// end ; if f_repair then
82457: LD_VAR 0 22
82461: IFFALSE 82950
// begin if GetType ( group [ i ] ) = unit_vehicle then
82463: LD_VAR 0 4
82467: PUSH
82468: LD_VAR 0 7
82472: ARRAY
82473: PPUSH
82474: CALL_OW 247
82478: PUSH
82479: LD_INT 2
82481: EQUAL
82482: IFFALSE 82672
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
82484: LD_VAR 0 4
82488: PUSH
82489: LD_VAR 0 7
82493: ARRAY
82494: PPUSH
82495: CALL_OW 256
82499: PUSH
82500: LD_INT 700
82502: LESS
82503: PUSH
82504: LD_VAR 0 4
82508: PUSH
82509: LD_VAR 0 7
82513: ARRAY
82514: PUSH
82515: LD_VAR 0 32
82519: IN
82520: NOT
82521: AND
82522: IFFALSE 82546
// to_repair := to_repair union group [ i ] ;
82524: LD_ADDR_VAR 0 32
82528: PUSH
82529: LD_VAR 0 32
82533: PUSH
82534: LD_VAR 0 4
82538: PUSH
82539: LD_VAR 0 7
82543: ARRAY
82544: UNION
82545: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
82546: LD_VAR 0 4
82550: PUSH
82551: LD_VAR 0 7
82555: ARRAY
82556: PPUSH
82557: CALL_OW 256
82561: PUSH
82562: LD_INT 1000
82564: EQUAL
82565: PUSH
82566: LD_VAR 0 4
82570: PUSH
82571: LD_VAR 0 7
82575: ARRAY
82576: PUSH
82577: LD_VAR 0 32
82581: IN
82582: AND
82583: IFFALSE 82607
// to_repair := to_repair diff group [ i ] ;
82585: LD_ADDR_VAR 0 32
82589: PUSH
82590: LD_VAR 0 32
82594: PUSH
82595: LD_VAR 0 4
82599: PUSH
82600: LD_VAR 0 7
82604: ARRAY
82605: DIFF
82606: ST_TO_ADDR
// if group [ i ] in to_repair then
82607: LD_VAR 0 4
82611: PUSH
82612: LD_VAR 0 7
82616: ARRAY
82617: PUSH
82618: LD_VAR 0 32
82622: IN
82623: IFFALSE 82670
// begin if not IsInArea ( group [ i ] , f_repair ) then
82625: LD_VAR 0 4
82629: PUSH
82630: LD_VAR 0 7
82634: ARRAY
82635: PPUSH
82636: LD_VAR 0 22
82640: PPUSH
82641: CALL_OW 308
82645: NOT
82646: IFFALSE 82668
// ComMoveToArea ( group [ i ] , f_repair ) ;
82648: LD_VAR 0 4
82652: PUSH
82653: LD_VAR 0 7
82657: ARRAY
82658: PPUSH
82659: LD_VAR 0 22
82663: PPUSH
82664: CALL_OW 113
// continue ;
82668: GO 82295
// end ; end else
82670: GO 82950
// if group [ i ] in repairs then
82672: LD_VAR 0 4
82676: PUSH
82677: LD_VAR 0 7
82681: ARRAY
82682: PUSH
82683: LD_VAR 0 33
82687: IN
82688: IFFALSE 82950
// begin if IsInUnit ( group [ i ] ) then
82690: LD_VAR 0 4
82694: PUSH
82695: LD_VAR 0 7
82699: ARRAY
82700: PPUSH
82701: CALL_OW 310
82705: IFFALSE 82773
// begin z := IsInUnit ( group [ i ] ) ;
82707: LD_ADDR_VAR 0 13
82711: PUSH
82712: LD_VAR 0 4
82716: PUSH
82717: LD_VAR 0 7
82721: ARRAY
82722: PPUSH
82723: CALL_OW 310
82727: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
82728: LD_VAR 0 13
82732: PUSH
82733: LD_VAR 0 32
82737: IN
82738: PUSH
82739: LD_VAR 0 13
82743: PPUSH
82744: LD_VAR 0 22
82748: PPUSH
82749: CALL_OW 308
82753: AND
82754: IFFALSE 82771
// ComExitVehicle ( group [ i ] ) ;
82756: LD_VAR 0 4
82760: PUSH
82761: LD_VAR 0 7
82765: ARRAY
82766: PPUSH
82767: CALL_OW 121
// end else
82771: GO 82950
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
82773: LD_ADDR_VAR 0 13
82777: PUSH
82778: LD_VAR 0 4
82782: PPUSH
82783: LD_INT 95
82785: PUSH
82786: LD_VAR 0 22
82790: PUSH
82791: EMPTY
82792: LIST
82793: LIST
82794: PUSH
82795: LD_INT 58
82797: PUSH
82798: EMPTY
82799: LIST
82800: PUSH
82801: EMPTY
82802: LIST
82803: LIST
82804: PPUSH
82805: CALL_OW 72
82809: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
82810: LD_VAR 0 4
82814: PUSH
82815: LD_VAR 0 7
82819: ARRAY
82820: PPUSH
82821: CALL_OW 314
82825: NOT
82826: IFFALSE 82948
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
82828: LD_ADDR_VAR 0 10
82832: PUSH
82833: LD_VAR 0 13
82837: PPUSH
82838: LD_VAR 0 4
82842: PUSH
82843: LD_VAR 0 7
82847: ARRAY
82848: PPUSH
82849: CALL_OW 74
82853: ST_TO_ADDR
// if not x then
82854: LD_VAR 0 10
82858: NOT
82859: IFFALSE 82863
// continue ;
82861: GO 82295
// if GetLives ( x ) < 1000 then
82863: LD_VAR 0 10
82867: PPUSH
82868: CALL_OW 256
82872: PUSH
82873: LD_INT 1000
82875: LESS
82876: IFFALSE 82900
// ComRepairVehicle ( group [ i ] , x ) else
82878: LD_VAR 0 4
82882: PUSH
82883: LD_VAR 0 7
82887: ARRAY
82888: PPUSH
82889: LD_VAR 0 10
82893: PPUSH
82894: CALL_OW 129
82898: GO 82948
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
82900: LD_VAR 0 23
82904: PUSH
82905: LD_VAR 0 4
82909: PUSH
82910: LD_VAR 0 7
82914: ARRAY
82915: PPUSH
82916: CALL_OW 256
82920: PUSH
82921: LD_INT 1000
82923: LESS
82924: AND
82925: NOT
82926: IFFALSE 82948
// ComEnterUnit ( group [ i ] , x ) ;
82928: LD_VAR 0 4
82932: PUSH
82933: LD_VAR 0 7
82937: ARRAY
82938: PPUSH
82939: LD_VAR 0 10
82943: PPUSH
82944: CALL_OW 120
// end ; continue ;
82948: GO 82295
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
82950: LD_VAR 0 23
82954: PUSH
82955: LD_VAR 0 4
82959: PUSH
82960: LD_VAR 0 7
82964: ARRAY
82965: PPUSH
82966: CALL_OW 247
82970: PUSH
82971: LD_INT 1
82973: EQUAL
82974: AND
82975: IFFALSE 83453
// begin if group [ i ] in healers then
82977: LD_VAR 0 4
82981: PUSH
82982: LD_VAR 0 7
82986: ARRAY
82987: PUSH
82988: LD_VAR 0 31
82992: IN
82993: IFFALSE 83266
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
82995: LD_VAR 0 4
82999: PUSH
83000: LD_VAR 0 7
83004: ARRAY
83005: PPUSH
83006: LD_VAR 0 23
83010: PPUSH
83011: CALL_OW 308
83015: NOT
83016: PUSH
83017: LD_VAR 0 4
83021: PUSH
83022: LD_VAR 0 7
83026: ARRAY
83027: PPUSH
83028: CALL_OW 314
83032: NOT
83033: AND
83034: IFFALSE 83058
// ComMoveToArea ( group [ i ] , f_heal ) else
83036: LD_VAR 0 4
83040: PUSH
83041: LD_VAR 0 7
83045: ARRAY
83046: PPUSH
83047: LD_VAR 0 23
83051: PPUSH
83052: CALL_OW 113
83056: GO 83264
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
83058: LD_VAR 0 4
83062: PUSH
83063: LD_VAR 0 7
83067: ARRAY
83068: PPUSH
83069: CALL 81676 0 1
83073: PPUSH
83074: CALL_OW 256
83078: PUSH
83079: LD_INT 1000
83081: EQUAL
83082: IFFALSE 83101
// ComStop ( group [ i ] ) else
83084: LD_VAR 0 4
83088: PUSH
83089: LD_VAR 0 7
83093: ARRAY
83094: PPUSH
83095: CALL_OW 141
83099: GO 83264
// if not HasTask ( group [ i ] ) and to_heal then
83101: LD_VAR 0 4
83105: PUSH
83106: LD_VAR 0 7
83110: ARRAY
83111: PPUSH
83112: CALL_OW 314
83116: NOT
83117: PUSH
83118: LD_VAR 0 30
83122: AND
83123: IFFALSE 83264
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
83125: LD_ADDR_VAR 0 13
83129: PUSH
83130: LD_VAR 0 30
83134: PPUSH
83135: LD_INT 3
83137: PUSH
83138: LD_INT 54
83140: PUSH
83141: EMPTY
83142: LIST
83143: PUSH
83144: EMPTY
83145: LIST
83146: LIST
83147: PPUSH
83148: CALL_OW 72
83152: PPUSH
83153: LD_VAR 0 4
83157: PUSH
83158: LD_VAR 0 7
83162: ARRAY
83163: PPUSH
83164: CALL_OW 74
83168: ST_TO_ADDR
// if z then
83169: LD_VAR 0 13
83173: IFFALSE 83264
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
83175: LD_INT 91
83177: PUSH
83178: LD_VAR 0 13
83182: PUSH
83183: LD_INT 10
83185: PUSH
83186: EMPTY
83187: LIST
83188: LIST
83189: LIST
83190: PUSH
83191: LD_INT 81
83193: PUSH
83194: LD_VAR 0 13
83198: PPUSH
83199: CALL_OW 255
83203: PUSH
83204: EMPTY
83205: LIST
83206: LIST
83207: PUSH
83208: EMPTY
83209: LIST
83210: LIST
83211: PPUSH
83212: CALL_OW 69
83216: PUSH
83217: LD_INT 0
83219: EQUAL
83220: IFFALSE 83244
// ComHeal ( group [ i ] , z ) else
83222: LD_VAR 0 4
83226: PUSH
83227: LD_VAR 0 7
83231: ARRAY
83232: PPUSH
83233: LD_VAR 0 13
83237: PPUSH
83238: CALL_OW 128
83242: GO 83264
// ComMoveToArea ( group [ i ] , f_heal ) ;
83244: LD_VAR 0 4
83248: PUSH
83249: LD_VAR 0 7
83253: ARRAY
83254: PPUSH
83255: LD_VAR 0 23
83259: PPUSH
83260: CALL_OW 113
// end ; continue ;
83264: GO 82295
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
83266: LD_VAR 0 4
83270: PUSH
83271: LD_VAR 0 7
83275: ARRAY
83276: PPUSH
83277: CALL_OW 256
83281: PUSH
83282: LD_INT 700
83284: LESS
83285: PUSH
83286: LD_VAR 0 4
83290: PUSH
83291: LD_VAR 0 7
83295: ARRAY
83296: PUSH
83297: LD_VAR 0 30
83301: IN
83302: NOT
83303: AND
83304: IFFALSE 83328
// to_heal := to_heal union group [ i ] ;
83306: LD_ADDR_VAR 0 30
83310: PUSH
83311: LD_VAR 0 30
83315: PUSH
83316: LD_VAR 0 4
83320: PUSH
83321: LD_VAR 0 7
83325: ARRAY
83326: UNION
83327: ST_TO_ADDR
// if group [ i ] in to_heal then
83328: LD_VAR 0 4
83332: PUSH
83333: LD_VAR 0 7
83337: ARRAY
83338: PUSH
83339: LD_VAR 0 30
83343: IN
83344: IFFALSE 83453
// begin if GetLives ( group [ i ] ) = 1000 then
83346: LD_VAR 0 4
83350: PUSH
83351: LD_VAR 0 7
83355: ARRAY
83356: PPUSH
83357: CALL_OW 256
83361: PUSH
83362: LD_INT 1000
83364: EQUAL
83365: IFFALSE 83391
// to_heal := to_heal diff group [ i ] else
83367: LD_ADDR_VAR 0 30
83371: PUSH
83372: LD_VAR 0 30
83376: PUSH
83377: LD_VAR 0 4
83381: PUSH
83382: LD_VAR 0 7
83386: ARRAY
83387: DIFF
83388: ST_TO_ADDR
83389: GO 83453
// begin if not IsInArea ( group [ i ] , to_heal ) then
83391: LD_VAR 0 4
83395: PUSH
83396: LD_VAR 0 7
83400: ARRAY
83401: PPUSH
83402: LD_VAR 0 30
83406: PPUSH
83407: CALL_OW 308
83411: NOT
83412: IFFALSE 83436
// ComMoveToArea ( group [ i ] , f_heal ) else
83414: LD_VAR 0 4
83418: PUSH
83419: LD_VAR 0 7
83423: ARRAY
83424: PPUSH
83425: LD_VAR 0 23
83429: PPUSH
83430: CALL_OW 113
83434: GO 83451
// ComHold ( group [ i ] ) ;
83436: LD_VAR 0 4
83440: PUSH
83441: LD_VAR 0 7
83445: ARRAY
83446: PPUSH
83447: CALL_OW 140
// continue ;
83451: GO 82295
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
83453: LD_VAR 0 4
83457: PUSH
83458: LD_VAR 0 7
83462: ARRAY
83463: PPUSH
83464: LD_INT 10
83466: PPUSH
83467: CALL 80073 0 2
83471: NOT
83472: PUSH
83473: LD_VAR 0 16
83477: PUSH
83478: LD_VAR 0 7
83482: ARRAY
83483: PUSH
83484: EMPTY
83485: EQUAL
83486: NOT
83487: AND
83488: IFFALSE 83754
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
83490: LD_VAR 0 4
83494: PUSH
83495: LD_VAR 0 7
83499: ARRAY
83500: PPUSH
83501: CALL_OW 262
83505: PUSH
83506: LD_INT 1
83508: PUSH
83509: LD_INT 2
83511: PUSH
83512: EMPTY
83513: LIST
83514: LIST
83515: IN
83516: IFFALSE 83557
// if GetFuel ( group [ i ] ) < 10 then
83518: LD_VAR 0 4
83522: PUSH
83523: LD_VAR 0 7
83527: ARRAY
83528: PPUSH
83529: CALL_OW 261
83533: PUSH
83534: LD_INT 10
83536: LESS
83537: IFFALSE 83557
// SetFuel ( group [ i ] , 12 ) ;
83539: LD_VAR 0 4
83543: PUSH
83544: LD_VAR 0 7
83548: ARRAY
83549: PPUSH
83550: LD_INT 12
83552: PPUSH
83553: CALL_OW 240
// if units_path [ i ] then
83557: LD_VAR 0 16
83561: PUSH
83562: LD_VAR 0 7
83566: ARRAY
83567: IFFALSE 83752
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
83569: LD_VAR 0 4
83573: PUSH
83574: LD_VAR 0 7
83578: ARRAY
83579: PPUSH
83580: LD_VAR 0 16
83584: PUSH
83585: LD_VAR 0 7
83589: ARRAY
83590: PUSH
83591: LD_INT 1
83593: ARRAY
83594: PUSH
83595: LD_INT 1
83597: ARRAY
83598: PPUSH
83599: LD_VAR 0 16
83603: PUSH
83604: LD_VAR 0 7
83608: ARRAY
83609: PUSH
83610: LD_INT 1
83612: ARRAY
83613: PUSH
83614: LD_INT 2
83616: ARRAY
83617: PPUSH
83618: CALL_OW 297
83622: PUSH
83623: LD_INT 6
83625: GREATER
83626: IFFALSE 83701
// begin if not HasTask ( group [ i ] ) then
83628: LD_VAR 0 4
83632: PUSH
83633: LD_VAR 0 7
83637: ARRAY
83638: PPUSH
83639: CALL_OW 314
83643: NOT
83644: IFFALSE 83699
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
83646: LD_VAR 0 4
83650: PUSH
83651: LD_VAR 0 7
83655: ARRAY
83656: PPUSH
83657: LD_VAR 0 16
83661: PUSH
83662: LD_VAR 0 7
83666: ARRAY
83667: PUSH
83668: LD_INT 1
83670: ARRAY
83671: PUSH
83672: LD_INT 1
83674: ARRAY
83675: PPUSH
83676: LD_VAR 0 16
83680: PUSH
83681: LD_VAR 0 7
83685: ARRAY
83686: PUSH
83687: LD_INT 1
83689: ARRAY
83690: PUSH
83691: LD_INT 2
83693: ARRAY
83694: PPUSH
83695: CALL_OW 114
// end else
83699: GO 83752
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
83701: LD_ADDR_VAR 0 15
83705: PUSH
83706: LD_VAR 0 16
83710: PUSH
83711: LD_VAR 0 7
83715: ARRAY
83716: PPUSH
83717: LD_INT 1
83719: PPUSH
83720: CALL_OW 3
83724: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
83725: LD_ADDR_VAR 0 16
83729: PUSH
83730: LD_VAR 0 16
83734: PPUSH
83735: LD_VAR 0 7
83739: PPUSH
83740: LD_VAR 0 15
83744: PPUSH
83745: CALL_OW 1
83749: ST_TO_ADDR
// continue ;
83750: GO 82295
// end ; end ; end else
83752: GO 86390
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
83754: LD_ADDR_VAR 0 14
83758: PUSH
83759: LD_INT 81
83761: PUSH
83762: LD_VAR 0 4
83766: PUSH
83767: LD_VAR 0 7
83771: ARRAY
83772: PPUSH
83773: CALL_OW 255
83777: PUSH
83778: EMPTY
83779: LIST
83780: LIST
83781: PPUSH
83782: CALL_OW 69
83786: ST_TO_ADDR
// if not tmp then
83787: LD_VAR 0 14
83791: NOT
83792: IFFALSE 83796
// continue ;
83794: GO 82295
// if f_ignore_area then
83796: LD_VAR 0 17
83800: IFFALSE 83888
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
83802: LD_ADDR_VAR 0 15
83806: PUSH
83807: LD_VAR 0 14
83811: PPUSH
83812: LD_INT 3
83814: PUSH
83815: LD_INT 92
83817: PUSH
83818: LD_VAR 0 17
83822: PUSH
83823: LD_INT 1
83825: ARRAY
83826: PUSH
83827: LD_VAR 0 17
83831: PUSH
83832: LD_INT 2
83834: ARRAY
83835: PUSH
83836: LD_VAR 0 17
83840: PUSH
83841: LD_INT 3
83843: ARRAY
83844: PUSH
83845: EMPTY
83846: LIST
83847: LIST
83848: LIST
83849: LIST
83850: PUSH
83851: EMPTY
83852: LIST
83853: LIST
83854: PPUSH
83855: CALL_OW 72
83859: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
83860: LD_VAR 0 14
83864: PUSH
83865: LD_VAR 0 15
83869: DIFF
83870: IFFALSE 83888
// tmp := tmp diff tmp2 ;
83872: LD_ADDR_VAR 0 14
83876: PUSH
83877: LD_VAR 0 14
83881: PUSH
83882: LD_VAR 0 15
83886: DIFF
83887: ST_TO_ADDR
// end ; if not f_murder then
83888: LD_VAR 0 20
83892: NOT
83893: IFFALSE 83951
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
83895: LD_ADDR_VAR 0 15
83899: PUSH
83900: LD_VAR 0 14
83904: PPUSH
83905: LD_INT 3
83907: PUSH
83908: LD_INT 50
83910: PUSH
83911: EMPTY
83912: LIST
83913: PUSH
83914: EMPTY
83915: LIST
83916: LIST
83917: PPUSH
83918: CALL_OW 72
83922: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
83923: LD_VAR 0 14
83927: PUSH
83928: LD_VAR 0 15
83932: DIFF
83933: IFFALSE 83951
// tmp := tmp diff tmp2 ;
83935: LD_ADDR_VAR 0 14
83939: PUSH
83940: LD_VAR 0 14
83944: PUSH
83945: LD_VAR 0 15
83949: DIFF
83950: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
83951: LD_ADDR_VAR 0 14
83955: PUSH
83956: LD_VAR 0 4
83960: PUSH
83961: LD_VAR 0 7
83965: ARRAY
83966: PPUSH
83967: LD_VAR 0 14
83971: PPUSH
83972: LD_INT 1
83974: PPUSH
83975: LD_INT 1
83977: PPUSH
83978: CALL 53716 0 4
83982: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
83983: LD_VAR 0 4
83987: PUSH
83988: LD_VAR 0 7
83992: ARRAY
83993: PPUSH
83994: CALL_OW 257
83998: PUSH
83999: LD_INT 1
84001: EQUAL
84002: IFFALSE 84450
// begin if WantPlant ( group [ i ] ) then
84004: LD_VAR 0 4
84008: PUSH
84009: LD_VAR 0 7
84013: ARRAY
84014: PPUSH
84015: CALL 53217 0 1
84019: IFFALSE 84023
// continue ;
84021: GO 82295
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
84023: LD_VAR 0 18
84027: PUSH
84028: LD_VAR 0 4
84032: PUSH
84033: LD_VAR 0 7
84037: ARRAY
84038: PPUSH
84039: CALL_OW 310
84043: NOT
84044: AND
84045: PUSH
84046: LD_VAR 0 14
84050: PUSH
84051: LD_INT 1
84053: ARRAY
84054: PUSH
84055: LD_VAR 0 14
84059: PPUSH
84060: LD_INT 21
84062: PUSH
84063: LD_INT 2
84065: PUSH
84066: EMPTY
84067: LIST
84068: LIST
84069: PUSH
84070: LD_INT 58
84072: PUSH
84073: EMPTY
84074: LIST
84075: PUSH
84076: EMPTY
84077: LIST
84078: LIST
84079: PPUSH
84080: CALL_OW 72
84084: IN
84085: AND
84086: IFFALSE 84122
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
84088: LD_VAR 0 4
84092: PUSH
84093: LD_VAR 0 7
84097: ARRAY
84098: PPUSH
84099: LD_VAR 0 14
84103: PUSH
84104: LD_INT 1
84106: ARRAY
84107: PPUSH
84108: CALL_OW 120
// attacking := true ;
84112: LD_ADDR_VAR 0 29
84116: PUSH
84117: LD_INT 1
84119: ST_TO_ADDR
// continue ;
84120: GO 82295
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
84122: LD_VAR 0 26
84126: PUSH
84127: LD_VAR 0 4
84131: PUSH
84132: LD_VAR 0 7
84136: ARRAY
84137: PPUSH
84138: CALL_OW 257
84142: PUSH
84143: LD_INT 1
84145: EQUAL
84146: AND
84147: PUSH
84148: LD_VAR 0 4
84152: PUSH
84153: LD_VAR 0 7
84157: ARRAY
84158: PPUSH
84159: CALL_OW 256
84163: PUSH
84164: LD_INT 800
84166: LESS
84167: AND
84168: PUSH
84169: LD_VAR 0 4
84173: PUSH
84174: LD_VAR 0 7
84178: ARRAY
84179: PPUSH
84180: CALL_OW 318
84184: NOT
84185: AND
84186: IFFALSE 84203
// ComCrawl ( group [ i ] ) ;
84188: LD_VAR 0 4
84192: PUSH
84193: LD_VAR 0 7
84197: ARRAY
84198: PPUSH
84199: CALL_OW 137
// if f_mines then
84203: LD_VAR 0 21
84207: IFFALSE 84450
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
84209: LD_VAR 0 14
84213: PUSH
84214: LD_INT 1
84216: ARRAY
84217: PPUSH
84218: CALL_OW 247
84222: PUSH
84223: LD_INT 3
84225: EQUAL
84226: PUSH
84227: LD_VAR 0 14
84231: PUSH
84232: LD_INT 1
84234: ARRAY
84235: PUSH
84236: LD_VAR 0 27
84240: IN
84241: NOT
84242: AND
84243: IFFALSE 84450
// begin x := GetX ( tmp [ 1 ] ) ;
84245: LD_ADDR_VAR 0 10
84249: PUSH
84250: LD_VAR 0 14
84254: PUSH
84255: LD_INT 1
84257: ARRAY
84258: PPUSH
84259: CALL_OW 250
84263: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
84264: LD_ADDR_VAR 0 11
84268: PUSH
84269: LD_VAR 0 14
84273: PUSH
84274: LD_INT 1
84276: ARRAY
84277: PPUSH
84278: CALL_OW 251
84282: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
84283: LD_ADDR_VAR 0 12
84287: PUSH
84288: LD_VAR 0 4
84292: PUSH
84293: LD_VAR 0 7
84297: ARRAY
84298: PPUSH
84299: CALL 80158 0 1
84303: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
84304: LD_VAR 0 4
84308: PUSH
84309: LD_VAR 0 7
84313: ARRAY
84314: PPUSH
84315: LD_VAR 0 10
84319: PPUSH
84320: LD_VAR 0 11
84324: PPUSH
84325: LD_VAR 0 14
84329: PUSH
84330: LD_INT 1
84332: ARRAY
84333: PPUSH
84334: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
84338: LD_VAR 0 4
84342: PUSH
84343: LD_VAR 0 7
84347: ARRAY
84348: PPUSH
84349: LD_VAR 0 10
84353: PPUSH
84354: LD_VAR 0 12
84358: PPUSH
84359: LD_INT 7
84361: PPUSH
84362: CALL_OW 272
84366: PPUSH
84367: LD_VAR 0 11
84371: PPUSH
84372: LD_VAR 0 12
84376: PPUSH
84377: LD_INT 7
84379: PPUSH
84380: CALL_OW 273
84384: PPUSH
84385: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
84389: LD_VAR 0 4
84393: PUSH
84394: LD_VAR 0 7
84398: ARRAY
84399: PPUSH
84400: LD_INT 71
84402: PPUSH
84403: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
84407: LD_ADDR_VAR 0 27
84411: PUSH
84412: LD_VAR 0 27
84416: PPUSH
84417: LD_VAR 0 27
84421: PUSH
84422: LD_INT 1
84424: PLUS
84425: PPUSH
84426: LD_VAR 0 14
84430: PUSH
84431: LD_INT 1
84433: ARRAY
84434: PPUSH
84435: CALL_OW 1
84439: ST_TO_ADDR
// attacking := true ;
84440: LD_ADDR_VAR 0 29
84444: PUSH
84445: LD_INT 1
84447: ST_TO_ADDR
// continue ;
84448: GO 82295
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
84450: LD_VAR 0 4
84454: PUSH
84455: LD_VAR 0 7
84459: ARRAY
84460: PPUSH
84461: CALL_OW 257
84465: PUSH
84466: LD_INT 17
84468: EQUAL
84469: PUSH
84470: LD_VAR 0 4
84474: PUSH
84475: LD_VAR 0 7
84479: ARRAY
84480: PPUSH
84481: CALL_OW 110
84485: PUSH
84486: LD_INT 71
84488: EQUAL
84489: NOT
84490: AND
84491: IFFALSE 84637
// begin attacking := false ;
84493: LD_ADDR_VAR 0 29
84497: PUSH
84498: LD_INT 0
84500: ST_TO_ADDR
// k := 5 ;
84501: LD_ADDR_VAR 0 9
84505: PUSH
84506: LD_INT 5
84508: ST_TO_ADDR
// if tmp < k then
84509: LD_VAR 0 14
84513: PUSH
84514: LD_VAR 0 9
84518: LESS
84519: IFFALSE 84531
// k := tmp ;
84521: LD_ADDR_VAR 0 9
84525: PUSH
84526: LD_VAR 0 14
84530: ST_TO_ADDR
// for j = 1 to k do
84531: LD_ADDR_VAR 0 8
84535: PUSH
84536: DOUBLE
84537: LD_INT 1
84539: DEC
84540: ST_TO_ADDR
84541: LD_VAR 0 9
84545: PUSH
84546: FOR_TO
84547: IFFALSE 84635
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
84549: LD_VAR 0 14
84553: PUSH
84554: LD_VAR 0 8
84558: ARRAY
84559: PUSH
84560: LD_VAR 0 14
84564: PPUSH
84565: LD_INT 58
84567: PUSH
84568: EMPTY
84569: LIST
84570: PPUSH
84571: CALL_OW 72
84575: IN
84576: NOT
84577: IFFALSE 84633
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
84579: LD_VAR 0 4
84583: PUSH
84584: LD_VAR 0 7
84588: ARRAY
84589: PPUSH
84590: LD_VAR 0 14
84594: PUSH
84595: LD_VAR 0 8
84599: ARRAY
84600: PPUSH
84601: CALL_OW 115
// attacking := true ;
84605: LD_ADDR_VAR 0 29
84609: PUSH
84610: LD_INT 1
84612: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
84613: LD_VAR 0 4
84617: PUSH
84618: LD_VAR 0 7
84622: ARRAY
84623: PPUSH
84624: LD_INT 71
84626: PPUSH
84627: CALL_OW 109
// continue ;
84631: GO 84546
// end ; end ;
84633: GO 84546
84635: POP
84636: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
84637: LD_VAR 0 4
84641: PUSH
84642: LD_VAR 0 7
84646: ARRAY
84647: PPUSH
84648: CALL_OW 257
84652: PUSH
84653: LD_INT 8
84655: EQUAL
84656: PUSH
84657: LD_VAR 0 4
84661: PUSH
84662: LD_VAR 0 7
84666: ARRAY
84667: PPUSH
84668: CALL_OW 264
84672: PUSH
84673: LD_INT 28
84675: PUSH
84676: LD_INT 45
84678: PUSH
84679: LD_INT 7
84681: PUSH
84682: LD_INT 47
84684: PUSH
84685: EMPTY
84686: LIST
84687: LIST
84688: LIST
84689: LIST
84690: IN
84691: OR
84692: IFFALSE 84922
// begin attacking := false ;
84694: LD_ADDR_VAR 0 29
84698: PUSH
84699: LD_INT 0
84701: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
84702: LD_VAR 0 14
84706: PUSH
84707: LD_INT 1
84709: ARRAY
84710: PPUSH
84711: CALL_OW 266
84715: PUSH
84716: LD_INT 32
84718: PUSH
84719: LD_INT 31
84721: PUSH
84722: LD_INT 33
84724: PUSH
84725: LD_INT 4
84727: PUSH
84728: LD_INT 5
84730: PUSH
84731: EMPTY
84732: LIST
84733: LIST
84734: LIST
84735: LIST
84736: LIST
84737: IN
84738: IFFALSE 84922
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
84740: LD_ADDR_VAR 0 9
84744: PUSH
84745: LD_VAR 0 14
84749: PUSH
84750: LD_INT 1
84752: ARRAY
84753: PPUSH
84754: CALL_OW 266
84758: PPUSH
84759: LD_VAR 0 14
84763: PUSH
84764: LD_INT 1
84766: ARRAY
84767: PPUSH
84768: CALL_OW 250
84772: PPUSH
84773: LD_VAR 0 14
84777: PUSH
84778: LD_INT 1
84780: ARRAY
84781: PPUSH
84782: CALL_OW 251
84786: PPUSH
84787: LD_VAR 0 14
84791: PUSH
84792: LD_INT 1
84794: ARRAY
84795: PPUSH
84796: CALL_OW 254
84800: PPUSH
84801: LD_VAR 0 14
84805: PUSH
84806: LD_INT 1
84808: ARRAY
84809: PPUSH
84810: CALL_OW 248
84814: PPUSH
84815: LD_INT 0
84817: PPUSH
84818: CALL 61528 0 6
84822: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
84823: LD_ADDR_VAR 0 8
84827: PUSH
84828: LD_VAR 0 4
84832: PUSH
84833: LD_VAR 0 7
84837: ARRAY
84838: PPUSH
84839: LD_VAR 0 9
84843: PPUSH
84844: CALL 80221 0 2
84848: ST_TO_ADDR
// if j then
84849: LD_VAR 0 8
84853: IFFALSE 84922
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
84855: LD_VAR 0 8
84859: PUSH
84860: LD_INT 1
84862: ARRAY
84863: PPUSH
84864: LD_VAR 0 8
84868: PUSH
84869: LD_INT 2
84871: ARRAY
84872: PPUSH
84873: CALL_OW 488
84877: IFFALSE 84922
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
84879: LD_VAR 0 4
84883: PUSH
84884: LD_VAR 0 7
84888: ARRAY
84889: PPUSH
84890: LD_VAR 0 8
84894: PUSH
84895: LD_INT 1
84897: ARRAY
84898: PPUSH
84899: LD_VAR 0 8
84903: PUSH
84904: LD_INT 2
84906: ARRAY
84907: PPUSH
84908: CALL_OW 116
// attacking := true ;
84912: LD_ADDR_VAR 0 29
84916: PUSH
84917: LD_INT 1
84919: ST_TO_ADDR
// continue ;
84920: GO 82295
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
84922: LD_VAR 0 4
84926: PUSH
84927: LD_VAR 0 7
84931: ARRAY
84932: PPUSH
84933: CALL_OW 265
84937: PUSH
84938: LD_INT 11
84940: EQUAL
84941: IFFALSE 85219
// begin k := 10 ;
84943: LD_ADDR_VAR 0 9
84947: PUSH
84948: LD_INT 10
84950: ST_TO_ADDR
// x := 0 ;
84951: LD_ADDR_VAR 0 10
84955: PUSH
84956: LD_INT 0
84958: ST_TO_ADDR
// if tmp < k then
84959: LD_VAR 0 14
84963: PUSH
84964: LD_VAR 0 9
84968: LESS
84969: IFFALSE 84981
// k := tmp ;
84971: LD_ADDR_VAR 0 9
84975: PUSH
84976: LD_VAR 0 14
84980: ST_TO_ADDR
// for j = k downto 1 do
84981: LD_ADDR_VAR 0 8
84985: PUSH
84986: DOUBLE
84987: LD_VAR 0 9
84991: INC
84992: ST_TO_ADDR
84993: LD_INT 1
84995: PUSH
84996: FOR_DOWNTO
84997: IFFALSE 85072
// begin if GetType ( tmp [ j ] ) = unit_human then
84999: LD_VAR 0 14
85003: PUSH
85004: LD_VAR 0 8
85008: ARRAY
85009: PPUSH
85010: CALL_OW 247
85014: PUSH
85015: LD_INT 1
85017: EQUAL
85018: IFFALSE 85070
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
85020: LD_VAR 0 4
85024: PUSH
85025: LD_VAR 0 7
85029: ARRAY
85030: PPUSH
85031: LD_VAR 0 14
85035: PUSH
85036: LD_VAR 0 8
85040: ARRAY
85041: PPUSH
85042: CALL 80492 0 2
// x := tmp [ j ] ;
85046: LD_ADDR_VAR 0 10
85050: PUSH
85051: LD_VAR 0 14
85055: PUSH
85056: LD_VAR 0 8
85060: ARRAY
85061: ST_TO_ADDR
// attacking := true ;
85062: LD_ADDR_VAR 0 29
85066: PUSH
85067: LD_INT 1
85069: ST_TO_ADDR
// end ; end ;
85070: GO 84996
85072: POP
85073: POP
// if not x then
85074: LD_VAR 0 10
85078: NOT
85079: IFFALSE 85219
// begin attacking := true ;
85081: LD_ADDR_VAR 0 29
85085: PUSH
85086: LD_INT 1
85088: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
85089: LD_VAR 0 4
85093: PUSH
85094: LD_VAR 0 7
85098: ARRAY
85099: PPUSH
85100: CALL_OW 250
85104: PPUSH
85105: LD_VAR 0 4
85109: PUSH
85110: LD_VAR 0 7
85114: ARRAY
85115: PPUSH
85116: CALL_OW 251
85120: PPUSH
85121: CALL_OW 546
85125: PUSH
85126: LD_INT 2
85128: ARRAY
85129: PUSH
85130: LD_VAR 0 14
85134: PUSH
85135: LD_INT 1
85137: ARRAY
85138: PPUSH
85139: CALL_OW 250
85143: PPUSH
85144: LD_VAR 0 14
85148: PUSH
85149: LD_INT 1
85151: ARRAY
85152: PPUSH
85153: CALL_OW 251
85157: PPUSH
85158: CALL_OW 546
85162: PUSH
85163: LD_INT 2
85165: ARRAY
85166: EQUAL
85167: IFFALSE 85195
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
85169: LD_VAR 0 4
85173: PUSH
85174: LD_VAR 0 7
85178: ARRAY
85179: PPUSH
85180: LD_VAR 0 14
85184: PUSH
85185: LD_INT 1
85187: ARRAY
85188: PPUSH
85189: CALL 80492 0 2
85193: GO 85219
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85195: LD_VAR 0 4
85199: PUSH
85200: LD_VAR 0 7
85204: ARRAY
85205: PPUSH
85206: LD_VAR 0 14
85210: PUSH
85211: LD_INT 1
85213: ARRAY
85214: PPUSH
85215: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
85219: LD_VAR 0 4
85223: PUSH
85224: LD_VAR 0 7
85228: ARRAY
85229: PPUSH
85230: CALL_OW 264
85234: PUSH
85235: LD_INT 29
85237: EQUAL
85238: IFFALSE 85604
// begin if WantsToAttack ( group [ i ] ) in bombed then
85240: LD_VAR 0 4
85244: PUSH
85245: LD_VAR 0 7
85249: ARRAY
85250: PPUSH
85251: CALL_OW 319
85255: PUSH
85256: LD_VAR 0 28
85260: IN
85261: IFFALSE 85265
// continue ;
85263: GO 82295
// k := 8 ;
85265: LD_ADDR_VAR 0 9
85269: PUSH
85270: LD_INT 8
85272: ST_TO_ADDR
// x := 0 ;
85273: LD_ADDR_VAR 0 10
85277: PUSH
85278: LD_INT 0
85280: ST_TO_ADDR
// if tmp < k then
85281: LD_VAR 0 14
85285: PUSH
85286: LD_VAR 0 9
85290: LESS
85291: IFFALSE 85303
// k := tmp ;
85293: LD_ADDR_VAR 0 9
85297: PUSH
85298: LD_VAR 0 14
85302: ST_TO_ADDR
// for j = 1 to k do
85303: LD_ADDR_VAR 0 8
85307: PUSH
85308: DOUBLE
85309: LD_INT 1
85311: DEC
85312: ST_TO_ADDR
85313: LD_VAR 0 9
85317: PUSH
85318: FOR_TO
85319: IFFALSE 85451
// begin if GetType ( tmp [ j ] ) = unit_building then
85321: LD_VAR 0 14
85325: PUSH
85326: LD_VAR 0 8
85330: ARRAY
85331: PPUSH
85332: CALL_OW 247
85336: PUSH
85337: LD_INT 3
85339: EQUAL
85340: IFFALSE 85449
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
85342: LD_VAR 0 14
85346: PUSH
85347: LD_VAR 0 8
85351: ARRAY
85352: PUSH
85353: LD_VAR 0 28
85357: IN
85358: NOT
85359: PUSH
85360: LD_VAR 0 14
85364: PUSH
85365: LD_VAR 0 8
85369: ARRAY
85370: PPUSH
85371: CALL_OW 313
85375: AND
85376: IFFALSE 85449
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85378: LD_VAR 0 4
85382: PUSH
85383: LD_VAR 0 7
85387: ARRAY
85388: PPUSH
85389: LD_VAR 0 14
85393: PUSH
85394: LD_VAR 0 8
85398: ARRAY
85399: PPUSH
85400: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
85404: LD_ADDR_VAR 0 28
85408: PUSH
85409: LD_VAR 0 28
85413: PPUSH
85414: LD_VAR 0 28
85418: PUSH
85419: LD_INT 1
85421: PLUS
85422: PPUSH
85423: LD_VAR 0 14
85427: PUSH
85428: LD_VAR 0 8
85432: ARRAY
85433: PPUSH
85434: CALL_OW 1
85438: ST_TO_ADDR
// attacking := true ;
85439: LD_ADDR_VAR 0 29
85443: PUSH
85444: LD_INT 1
85446: ST_TO_ADDR
// break ;
85447: GO 85451
// end ; end ;
85449: GO 85318
85451: POP
85452: POP
// if not attacking and f_attack_depot then
85453: LD_VAR 0 29
85457: NOT
85458: PUSH
85459: LD_VAR 0 25
85463: AND
85464: IFFALSE 85559
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85466: LD_ADDR_VAR 0 13
85470: PUSH
85471: LD_VAR 0 14
85475: PPUSH
85476: LD_INT 2
85478: PUSH
85479: LD_INT 30
85481: PUSH
85482: LD_INT 0
85484: PUSH
85485: EMPTY
85486: LIST
85487: LIST
85488: PUSH
85489: LD_INT 30
85491: PUSH
85492: LD_INT 1
85494: PUSH
85495: EMPTY
85496: LIST
85497: LIST
85498: PUSH
85499: EMPTY
85500: LIST
85501: LIST
85502: LIST
85503: PPUSH
85504: CALL_OW 72
85508: ST_TO_ADDR
// if z then
85509: LD_VAR 0 13
85513: IFFALSE 85559
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
85515: LD_VAR 0 4
85519: PUSH
85520: LD_VAR 0 7
85524: ARRAY
85525: PPUSH
85526: LD_VAR 0 13
85530: PPUSH
85531: LD_VAR 0 4
85535: PUSH
85536: LD_VAR 0 7
85540: ARRAY
85541: PPUSH
85542: CALL_OW 74
85546: PPUSH
85547: CALL_OW 115
// attacking := true ;
85551: LD_ADDR_VAR 0 29
85555: PUSH
85556: LD_INT 1
85558: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
85559: LD_VAR 0 4
85563: PUSH
85564: LD_VAR 0 7
85568: ARRAY
85569: PPUSH
85570: CALL_OW 256
85574: PUSH
85575: LD_INT 500
85577: LESS
85578: IFFALSE 85604
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85580: LD_VAR 0 4
85584: PUSH
85585: LD_VAR 0 7
85589: ARRAY
85590: PPUSH
85591: LD_VAR 0 14
85595: PUSH
85596: LD_INT 1
85598: ARRAY
85599: PPUSH
85600: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
85604: LD_VAR 0 4
85608: PUSH
85609: LD_VAR 0 7
85613: ARRAY
85614: PPUSH
85615: CALL_OW 264
85619: PUSH
85620: LD_INT 49
85622: EQUAL
85623: IFFALSE 85744
// begin if not HasTask ( group [ i ] ) then
85625: LD_VAR 0 4
85629: PUSH
85630: LD_VAR 0 7
85634: ARRAY
85635: PPUSH
85636: CALL_OW 314
85640: NOT
85641: IFFALSE 85744
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
85643: LD_ADDR_VAR 0 9
85647: PUSH
85648: LD_INT 81
85650: PUSH
85651: LD_VAR 0 4
85655: PUSH
85656: LD_VAR 0 7
85660: ARRAY
85661: PPUSH
85662: CALL_OW 255
85666: PUSH
85667: EMPTY
85668: LIST
85669: LIST
85670: PPUSH
85671: CALL_OW 69
85675: PPUSH
85676: LD_VAR 0 4
85680: PUSH
85681: LD_VAR 0 7
85685: ARRAY
85686: PPUSH
85687: CALL_OW 74
85691: ST_TO_ADDR
// if k then
85692: LD_VAR 0 9
85696: IFFALSE 85744
// if GetDistUnits ( group [ i ] , k ) > 10 then
85698: LD_VAR 0 4
85702: PUSH
85703: LD_VAR 0 7
85707: ARRAY
85708: PPUSH
85709: LD_VAR 0 9
85713: PPUSH
85714: CALL_OW 296
85718: PUSH
85719: LD_INT 10
85721: GREATER
85722: IFFALSE 85744
// ComMoveUnit ( group [ i ] , k ) ;
85724: LD_VAR 0 4
85728: PUSH
85729: LD_VAR 0 7
85733: ARRAY
85734: PPUSH
85735: LD_VAR 0 9
85739: PPUSH
85740: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
85744: LD_VAR 0 4
85748: PUSH
85749: LD_VAR 0 7
85753: ARRAY
85754: PPUSH
85755: CALL_OW 256
85759: PUSH
85760: LD_INT 250
85762: LESS
85763: PUSH
85764: LD_VAR 0 4
85768: PUSH
85769: LD_VAR 0 7
85773: ARRAY
85774: PUSH
85775: LD_INT 21
85777: PUSH
85778: LD_INT 2
85780: PUSH
85781: EMPTY
85782: LIST
85783: LIST
85784: PUSH
85785: LD_INT 23
85787: PUSH
85788: LD_INT 2
85790: PUSH
85791: EMPTY
85792: LIST
85793: LIST
85794: PUSH
85795: EMPTY
85796: LIST
85797: LIST
85798: PPUSH
85799: CALL_OW 69
85803: IN
85804: AND
85805: IFFALSE 85930
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
85807: LD_ADDR_VAR 0 9
85811: PUSH
85812: LD_OWVAR 3
85816: PUSH
85817: LD_VAR 0 4
85821: PUSH
85822: LD_VAR 0 7
85826: ARRAY
85827: DIFF
85828: PPUSH
85829: LD_VAR 0 4
85833: PUSH
85834: LD_VAR 0 7
85838: ARRAY
85839: PPUSH
85840: CALL_OW 74
85844: ST_TO_ADDR
// if not k then
85845: LD_VAR 0 9
85849: NOT
85850: IFFALSE 85854
// continue ;
85852: GO 82295
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
85854: LD_VAR 0 9
85858: PUSH
85859: LD_INT 81
85861: PUSH
85862: LD_VAR 0 4
85866: PUSH
85867: LD_VAR 0 7
85871: ARRAY
85872: PPUSH
85873: CALL_OW 255
85877: PUSH
85878: EMPTY
85879: LIST
85880: LIST
85881: PPUSH
85882: CALL_OW 69
85886: IN
85887: PUSH
85888: LD_VAR 0 9
85892: PPUSH
85893: LD_VAR 0 4
85897: PUSH
85898: LD_VAR 0 7
85902: ARRAY
85903: PPUSH
85904: CALL_OW 296
85908: PUSH
85909: LD_INT 5
85911: LESS
85912: AND
85913: IFFALSE 85930
// ComAutodestruct ( group [ i ] ) ;
85915: LD_VAR 0 4
85919: PUSH
85920: LD_VAR 0 7
85924: ARRAY
85925: PPUSH
85926: CALL 80390 0 1
// end ; if f_attack_depot then
85930: LD_VAR 0 25
85934: IFFALSE 86046
// begin k := 6 ;
85936: LD_ADDR_VAR 0 9
85940: PUSH
85941: LD_INT 6
85943: ST_TO_ADDR
// if tmp < k then
85944: LD_VAR 0 14
85948: PUSH
85949: LD_VAR 0 9
85953: LESS
85954: IFFALSE 85966
// k := tmp ;
85956: LD_ADDR_VAR 0 9
85960: PUSH
85961: LD_VAR 0 14
85965: ST_TO_ADDR
// for j = 1 to k do
85966: LD_ADDR_VAR 0 8
85970: PUSH
85971: DOUBLE
85972: LD_INT 1
85974: DEC
85975: ST_TO_ADDR
85976: LD_VAR 0 9
85980: PUSH
85981: FOR_TO
85982: IFFALSE 86044
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
85984: LD_VAR 0 8
85988: PPUSH
85989: CALL_OW 266
85993: PUSH
85994: LD_INT 0
85996: PUSH
85997: LD_INT 1
85999: PUSH
86000: EMPTY
86001: LIST
86002: LIST
86003: IN
86004: IFFALSE 86042
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86006: LD_VAR 0 4
86010: PUSH
86011: LD_VAR 0 7
86015: ARRAY
86016: PPUSH
86017: LD_VAR 0 14
86021: PUSH
86022: LD_VAR 0 8
86026: ARRAY
86027: PPUSH
86028: CALL_OW 115
// attacking := true ;
86032: LD_ADDR_VAR 0 29
86036: PUSH
86037: LD_INT 1
86039: ST_TO_ADDR
// break ;
86040: GO 86044
// end ;
86042: GO 85981
86044: POP
86045: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
86046: LD_VAR 0 4
86050: PUSH
86051: LD_VAR 0 7
86055: ARRAY
86056: PPUSH
86057: CALL_OW 302
86061: PUSH
86062: LD_VAR 0 29
86066: NOT
86067: AND
86068: IFFALSE 86390
// begin if GetTag ( group [ i ] ) = 71 then
86070: LD_VAR 0 4
86074: PUSH
86075: LD_VAR 0 7
86079: ARRAY
86080: PPUSH
86081: CALL_OW 110
86085: PUSH
86086: LD_INT 71
86088: EQUAL
86089: IFFALSE 86130
// begin if HasTask ( group [ i ] ) then
86091: LD_VAR 0 4
86095: PUSH
86096: LD_VAR 0 7
86100: ARRAY
86101: PPUSH
86102: CALL_OW 314
86106: IFFALSE 86112
// continue else
86108: GO 82295
86110: GO 86130
// SetTag ( group [ i ] , 0 ) ;
86112: LD_VAR 0 4
86116: PUSH
86117: LD_VAR 0 7
86121: ARRAY
86122: PPUSH
86123: LD_INT 0
86125: PPUSH
86126: CALL_OW 109
// end ; k := 8 ;
86130: LD_ADDR_VAR 0 9
86134: PUSH
86135: LD_INT 8
86137: ST_TO_ADDR
// x := 0 ;
86138: LD_ADDR_VAR 0 10
86142: PUSH
86143: LD_INT 0
86145: ST_TO_ADDR
// if tmp < k then
86146: LD_VAR 0 14
86150: PUSH
86151: LD_VAR 0 9
86155: LESS
86156: IFFALSE 86168
// k := tmp ;
86158: LD_ADDR_VAR 0 9
86162: PUSH
86163: LD_VAR 0 14
86167: ST_TO_ADDR
// for j = 1 to k do
86168: LD_ADDR_VAR 0 8
86172: PUSH
86173: DOUBLE
86174: LD_INT 1
86176: DEC
86177: ST_TO_ADDR
86178: LD_VAR 0 9
86182: PUSH
86183: FOR_TO
86184: IFFALSE 86282
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
86186: LD_VAR 0 14
86190: PUSH
86191: LD_VAR 0 8
86195: ARRAY
86196: PPUSH
86197: CALL_OW 247
86201: PUSH
86202: LD_INT 1
86204: EQUAL
86205: PUSH
86206: LD_VAR 0 14
86210: PUSH
86211: LD_VAR 0 8
86215: ARRAY
86216: PPUSH
86217: CALL_OW 256
86221: PUSH
86222: LD_INT 250
86224: LESS
86225: PUSH
86226: LD_VAR 0 20
86230: AND
86231: PUSH
86232: LD_VAR 0 20
86236: NOT
86237: PUSH
86238: LD_VAR 0 14
86242: PUSH
86243: LD_VAR 0 8
86247: ARRAY
86248: PPUSH
86249: CALL_OW 256
86253: PUSH
86254: LD_INT 250
86256: GREATEREQUAL
86257: AND
86258: OR
86259: AND
86260: IFFALSE 86280
// begin x := tmp [ j ] ;
86262: LD_ADDR_VAR 0 10
86266: PUSH
86267: LD_VAR 0 14
86271: PUSH
86272: LD_VAR 0 8
86276: ARRAY
86277: ST_TO_ADDR
// break ;
86278: GO 86282
// end ;
86280: GO 86183
86282: POP
86283: POP
// if x then
86284: LD_VAR 0 10
86288: IFFALSE 86312
// ComAttackUnit ( group [ i ] , x ) else
86290: LD_VAR 0 4
86294: PUSH
86295: LD_VAR 0 7
86299: ARRAY
86300: PPUSH
86301: LD_VAR 0 10
86305: PPUSH
86306: CALL_OW 115
86310: GO 86336
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86312: LD_VAR 0 4
86316: PUSH
86317: LD_VAR 0 7
86321: ARRAY
86322: PPUSH
86323: LD_VAR 0 14
86327: PUSH
86328: LD_INT 1
86330: ARRAY
86331: PPUSH
86332: CALL_OW 115
// if not HasTask ( group [ i ] ) then
86336: LD_VAR 0 4
86340: PUSH
86341: LD_VAR 0 7
86345: ARRAY
86346: PPUSH
86347: CALL_OW 314
86351: NOT
86352: IFFALSE 86390
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
86354: LD_VAR 0 4
86358: PUSH
86359: LD_VAR 0 7
86363: ARRAY
86364: PPUSH
86365: LD_VAR 0 14
86369: PPUSH
86370: LD_VAR 0 4
86374: PUSH
86375: LD_VAR 0 7
86379: ARRAY
86380: PPUSH
86381: CALL_OW 74
86385: PPUSH
86386: CALL_OW 115
// end ; end ; end ;
86390: GO 82295
86392: POP
86393: POP
// wait ( 0 0$1 ) ;
86394: LD_INT 35
86396: PPUSH
86397: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
86401: LD_VAR 0 4
86405: PUSH
86406: EMPTY
86407: EQUAL
86408: PUSH
86409: LD_INT 81
86411: PUSH
86412: LD_VAR 0 35
86416: PUSH
86417: EMPTY
86418: LIST
86419: LIST
86420: PPUSH
86421: CALL_OW 69
86425: NOT
86426: OR
86427: IFFALSE 82280
// end ;
86429: LD_VAR 0 2
86433: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
86434: LD_INT 0
86436: PPUSH
86437: PPUSH
86438: PPUSH
86439: PPUSH
// if not base_units then
86440: LD_VAR 0 1
86444: NOT
86445: IFFALSE 86449
// exit ;
86447: GO 86536
// result := false ;
86449: LD_ADDR_VAR 0 2
86453: PUSH
86454: LD_INT 0
86456: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
86457: LD_ADDR_VAR 0 5
86461: PUSH
86462: LD_VAR 0 1
86466: PPUSH
86467: LD_INT 21
86469: PUSH
86470: LD_INT 3
86472: PUSH
86473: EMPTY
86474: LIST
86475: LIST
86476: PPUSH
86477: CALL_OW 72
86481: ST_TO_ADDR
// if not tmp then
86482: LD_VAR 0 5
86486: NOT
86487: IFFALSE 86491
// exit ;
86489: GO 86536
// for i in tmp do
86491: LD_ADDR_VAR 0 3
86495: PUSH
86496: LD_VAR 0 5
86500: PUSH
86501: FOR_IN
86502: IFFALSE 86534
// begin result := EnemyInRange ( i , 22 ) ;
86504: LD_ADDR_VAR 0 2
86508: PUSH
86509: LD_VAR 0 3
86513: PPUSH
86514: LD_INT 22
86516: PPUSH
86517: CALL 80073 0 2
86521: ST_TO_ADDR
// if result then
86522: LD_VAR 0 2
86526: IFFALSE 86532
// exit ;
86528: POP
86529: POP
86530: GO 86536
// end ;
86532: GO 86501
86534: POP
86535: POP
// end ;
86536: LD_VAR 0 2
86540: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
86541: LD_INT 0
86543: PPUSH
86544: PPUSH
// if not units then
86545: LD_VAR 0 1
86549: NOT
86550: IFFALSE 86554
// exit ;
86552: GO 86624
// result := [ ] ;
86554: LD_ADDR_VAR 0 3
86558: PUSH
86559: EMPTY
86560: ST_TO_ADDR
// for i in units do
86561: LD_ADDR_VAR 0 4
86565: PUSH
86566: LD_VAR 0 1
86570: PUSH
86571: FOR_IN
86572: IFFALSE 86622
// if GetTag ( i ) = tag then
86574: LD_VAR 0 4
86578: PPUSH
86579: CALL_OW 110
86583: PUSH
86584: LD_VAR 0 2
86588: EQUAL
86589: IFFALSE 86620
// result := Insert ( result , result + 1 , i ) ;
86591: LD_ADDR_VAR 0 3
86595: PUSH
86596: LD_VAR 0 3
86600: PPUSH
86601: LD_VAR 0 3
86605: PUSH
86606: LD_INT 1
86608: PLUS
86609: PPUSH
86610: LD_VAR 0 4
86614: PPUSH
86615: CALL_OW 2
86619: ST_TO_ADDR
86620: GO 86571
86622: POP
86623: POP
// end ;
86624: LD_VAR 0 3
86628: RET
// export function IsDriver ( un ) ; begin
86629: LD_INT 0
86631: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
86632: LD_ADDR_VAR 0 2
86636: PUSH
86637: LD_VAR 0 1
86641: PUSH
86642: LD_INT 55
86644: PUSH
86645: EMPTY
86646: LIST
86647: PPUSH
86648: CALL_OW 69
86652: IN
86653: ST_TO_ADDR
// end ;
86654: LD_VAR 0 2
86658: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
86659: LD_INT 0
86661: PPUSH
86662: PPUSH
// list := [ ] ;
86663: LD_ADDR_VAR 0 5
86667: PUSH
86668: EMPTY
86669: ST_TO_ADDR
// case d of 0 :
86670: LD_VAR 0 3
86674: PUSH
86675: LD_INT 0
86677: DOUBLE
86678: EQUAL
86679: IFTRUE 86683
86681: GO 86816
86683: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
86684: LD_ADDR_VAR 0 5
86688: PUSH
86689: LD_VAR 0 1
86693: PUSH
86694: LD_INT 4
86696: MINUS
86697: PUSH
86698: LD_VAR 0 2
86702: PUSH
86703: LD_INT 4
86705: MINUS
86706: PUSH
86707: LD_INT 2
86709: PUSH
86710: EMPTY
86711: LIST
86712: LIST
86713: LIST
86714: PUSH
86715: LD_VAR 0 1
86719: PUSH
86720: LD_INT 3
86722: MINUS
86723: PUSH
86724: LD_VAR 0 2
86728: PUSH
86729: LD_INT 1
86731: PUSH
86732: EMPTY
86733: LIST
86734: LIST
86735: LIST
86736: PUSH
86737: LD_VAR 0 1
86741: PUSH
86742: LD_INT 4
86744: PLUS
86745: PUSH
86746: LD_VAR 0 2
86750: PUSH
86751: LD_INT 4
86753: PUSH
86754: EMPTY
86755: LIST
86756: LIST
86757: LIST
86758: PUSH
86759: LD_VAR 0 1
86763: PUSH
86764: LD_INT 3
86766: PLUS
86767: PUSH
86768: LD_VAR 0 2
86772: PUSH
86773: LD_INT 3
86775: PLUS
86776: PUSH
86777: LD_INT 5
86779: PUSH
86780: EMPTY
86781: LIST
86782: LIST
86783: LIST
86784: PUSH
86785: LD_VAR 0 1
86789: PUSH
86790: LD_VAR 0 2
86794: PUSH
86795: LD_INT 4
86797: PLUS
86798: PUSH
86799: LD_INT 0
86801: PUSH
86802: EMPTY
86803: LIST
86804: LIST
86805: LIST
86806: PUSH
86807: EMPTY
86808: LIST
86809: LIST
86810: LIST
86811: LIST
86812: LIST
86813: ST_TO_ADDR
// end ; 1 :
86814: GO 87514
86816: LD_INT 1
86818: DOUBLE
86819: EQUAL
86820: IFTRUE 86824
86822: GO 86957
86824: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
86825: LD_ADDR_VAR 0 5
86829: PUSH
86830: LD_VAR 0 1
86834: PUSH
86835: LD_VAR 0 2
86839: PUSH
86840: LD_INT 4
86842: MINUS
86843: PUSH
86844: LD_INT 3
86846: PUSH
86847: EMPTY
86848: LIST
86849: LIST
86850: LIST
86851: PUSH
86852: LD_VAR 0 1
86856: PUSH
86857: LD_INT 3
86859: MINUS
86860: PUSH
86861: LD_VAR 0 2
86865: PUSH
86866: LD_INT 3
86868: MINUS
86869: PUSH
86870: LD_INT 2
86872: PUSH
86873: EMPTY
86874: LIST
86875: LIST
86876: LIST
86877: PUSH
86878: LD_VAR 0 1
86882: PUSH
86883: LD_INT 4
86885: MINUS
86886: PUSH
86887: LD_VAR 0 2
86891: PUSH
86892: LD_INT 1
86894: PUSH
86895: EMPTY
86896: LIST
86897: LIST
86898: LIST
86899: PUSH
86900: LD_VAR 0 1
86904: PUSH
86905: LD_VAR 0 2
86909: PUSH
86910: LD_INT 3
86912: PLUS
86913: PUSH
86914: LD_INT 0
86916: PUSH
86917: EMPTY
86918: LIST
86919: LIST
86920: LIST
86921: PUSH
86922: LD_VAR 0 1
86926: PUSH
86927: LD_INT 4
86929: PLUS
86930: PUSH
86931: LD_VAR 0 2
86935: PUSH
86936: LD_INT 4
86938: PLUS
86939: PUSH
86940: LD_INT 5
86942: PUSH
86943: EMPTY
86944: LIST
86945: LIST
86946: LIST
86947: PUSH
86948: EMPTY
86949: LIST
86950: LIST
86951: LIST
86952: LIST
86953: LIST
86954: ST_TO_ADDR
// end ; 2 :
86955: GO 87514
86957: LD_INT 2
86959: DOUBLE
86960: EQUAL
86961: IFTRUE 86965
86963: GO 87094
86965: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
86966: LD_ADDR_VAR 0 5
86970: PUSH
86971: LD_VAR 0 1
86975: PUSH
86976: LD_VAR 0 2
86980: PUSH
86981: LD_INT 3
86983: MINUS
86984: PUSH
86985: LD_INT 3
86987: PUSH
86988: EMPTY
86989: LIST
86990: LIST
86991: LIST
86992: PUSH
86993: LD_VAR 0 1
86997: PUSH
86998: LD_INT 4
87000: PLUS
87001: PUSH
87002: LD_VAR 0 2
87006: PUSH
87007: LD_INT 4
87009: PUSH
87010: EMPTY
87011: LIST
87012: LIST
87013: LIST
87014: PUSH
87015: LD_VAR 0 1
87019: PUSH
87020: LD_VAR 0 2
87024: PUSH
87025: LD_INT 4
87027: PLUS
87028: PUSH
87029: LD_INT 0
87031: PUSH
87032: EMPTY
87033: LIST
87034: LIST
87035: LIST
87036: PUSH
87037: LD_VAR 0 1
87041: PUSH
87042: LD_INT 3
87044: MINUS
87045: PUSH
87046: LD_VAR 0 2
87050: PUSH
87051: LD_INT 1
87053: PUSH
87054: EMPTY
87055: LIST
87056: LIST
87057: LIST
87058: PUSH
87059: LD_VAR 0 1
87063: PUSH
87064: LD_INT 4
87066: MINUS
87067: PUSH
87068: LD_VAR 0 2
87072: PUSH
87073: LD_INT 4
87075: MINUS
87076: PUSH
87077: LD_INT 2
87079: PUSH
87080: EMPTY
87081: LIST
87082: LIST
87083: LIST
87084: PUSH
87085: EMPTY
87086: LIST
87087: LIST
87088: LIST
87089: LIST
87090: LIST
87091: ST_TO_ADDR
// end ; 3 :
87092: GO 87514
87094: LD_INT 3
87096: DOUBLE
87097: EQUAL
87098: IFTRUE 87102
87100: GO 87235
87102: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
87103: LD_ADDR_VAR 0 5
87107: PUSH
87108: LD_VAR 0 1
87112: PUSH
87113: LD_INT 3
87115: PLUS
87116: PUSH
87117: LD_VAR 0 2
87121: PUSH
87122: LD_INT 4
87124: PUSH
87125: EMPTY
87126: LIST
87127: LIST
87128: LIST
87129: PUSH
87130: LD_VAR 0 1
87134: PUSH
87135: LD_INT 4
87137: PLUS
87138: PUSH
87139: LD_VAR 0 2
87143: PUSH
87144: LD_INT 4
87146: PLUS
87147: PUSH
87148: LD_INT 5
87150: PUSH
87151: EMPTY
87152: LIST
87153: LIST
87154: LIST
87155: PUSH
87156: LD_VAR 0 1
87160: PUSH
87161: LD_INT 4
87163: MINUS
87164: PUSH
87165: LD_VAR 0 2
87169: PUSH
87170: LD_INT 1
87172: PUSH
87173: EMPTY
87174: LIST
87175: LIST
87176: LIST
87177: PUSH
87178: LD_VAR 0 1
87182: PUSH
87183: LD_VAR 0 2
87187: PUSH
87188: LD_INT 4
87190: MINUS
87191: PUSH
87192: LD_INT 3
87194: PUSH
87195: EMPTY
87196: LIST
87197: LIST
87198: LIST
87199: PUSH
87200: LD_VAR 0 1
87204: PUSH
87205: LD_INT 3
87207: MINUS
87208: PUSH
87209: LD_VAR 0 2
87213: PUSH
87214: LD_INT 3
87216: MINUS
87217: PUSH
87218: LD_INT 2
87220: PUSH
87221: EMPTY
87222: LIST
87223: LIST
87224: LIST
87225: PUSH
87226: EMPTY
87227: LIST
87228: LIST
87229: LIST
87230: LIST
87231: LIST
87232: ST_TO_ADDR
// end ; 4 :
87233: GO 87514
87235: LD_INT 4
87237: DOUBLE
87238: EQUAL
87239: IFTRUE 87243
87241: GO 87376
87243: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
87244: LD_ADDR_VAR 0 5
87248: PUSH
87249: LD_VAR 0 1
87253: PUSH
87254: LD_VAR 0 2
87258: PUSH
87259: LD_INT 4
87261: PLUS
87262: PUSH
87263: LD_INT 0
87265: PUSH
87266: EMPTY
87267: LIST
87268: LIST
87269: LIST
87270: PUSH
87271: LD_VAR 0 1
87275: PUSH
87276: LD_INT 3
87278: PLUS
87279: PUSH
87280: LD_VAR 0 2
87284: PUSH
87285: LD_INT 3
87287: PLUS
87288: PUSH
87289: LD_INT 5
87291: PUSH
87292: EMPTY
87293: LIST
87294: LIST
87295: LIST
87296: PUSH
87297: LD_VAR 0 1
87301: PUSH
87302: LD_INT 4
87304: PLUS
87305: PUSH
87306: LD_VAR 0 2
87310: PUSH
87311: LD_INT 4
87313: PUSH
87314: EMPTY
87315: LIST
87316: LIST
87317: LIST
87318: PUSH
87319: LD_VAR 0 1
87323: PUSH
87324: LD_VAR 0 2
87328: PUSH
87329: LD_INT 3
87331: MINUS
87332: PUSH
87333: LD_INT 3
87335: PUSH
87336: EMPTY
87337: LIST
87338: LIST
87339: LIST
87340: PUSH
87341: LD_VAR 0 1
87345: PUSH
87346: LD_INT 4
87348: MINUS
87349: PUSH
87350: LD_VAR 0 2
87354: PUSH
87355: LD_INT 4
87357: MINUS
87358: PUSH
87359: LD_INT 2
87361: PUSH
87362: EMPTY
87363: LIST
87364: LIST
87365: LIST
87366: PUSH
87367: EMPTY
87368: LIST
87369: LIST
87370: LIST
87371: LIST
87372: LIST
87373: ST_TO_ADDR
// end ; 5 :
87374: GO 87514
87376: LD_INT 5
87378: DOUBLE
87379: EQUAL
87380: IFTRUE 87384
87382: GO 87513
87384: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
87385: LD_ADDR_VAR 0 5
87389: PUSH
87390: LD_VAR 0 1
87394: PUSH
87395: LD_INT 4
87397: MINUS
87398: PUSH
87399: LD_VAR 0 2
87403: PUSH
87404: LD_INT 1
87406: PUSH
87407: EMPTY
87408: LIST
87409: LIST
87410: LIST
87411: PUSH
87412: LD_VAR 0 1
87416: PUSH
87417: LD_VAR 0 2
87421: PUSH
87422: LD_INT 4
87424: MINUS
87425: PUSH
87426: LD_INT 3
87428: PUSH
87429: EMPTY
87430: LIST
87431: LIST
87432: LIST
87433: PUSH
87434: LD_VAR 0 1
87438: PUSH
87439: LD_INT 4
87441: PLUS
87442: PUSH
87443: LD_VAR 0 2
87447: PUSH
87448: LD_INT 4
87450: PLUS
87451: PUSH
87452: LD_INT 5
87454: PUSH
87455: EMPTY
87456: LIST
87457: LIST
87458: LIST
87459: PUSH
87460: LD_VAR 0 1
87464: PUSH
87465: LD_INT 3
87467: PLUS
87468: PUSH
87469: LD_VAR 0 2
87473: PUSH
87474: LD_INT 4
87476: PUSH
87477: EMPTY
87478: LIST
87479: LIST
87480: LIST
87481: PUSH
87482: LD_VAR 0 1
87486: PUSH
87487: LD_VAR 0 2
87491: PUSH
87492: LD_INT 3
87494: PLUS
87495: PUSH
87496: LD_INT 0
87498: PUSH
87499: EMPTY
87500: LIST
87501: LIST
87502: LIST
87503: PUSH
87504: EMPTY
87505: LIST
87506: LIST
87507: LIST
87508: LIST
87509: LIST
87510: ST_TO_ADDR
// end ; end ;
87511: GO 87514
87513: POP
// result := list ;
87514: LD_ADDR_VAR 0 4
87518: PUSH
87519: LD_VAR 0 5
87523: ST_TO_ADDR
// end ;
87524: LD_VAR 0 4
87528: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
87529: LD_INT 0
87531: PPUSH
87532: PPUSH
87533: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
87534: LD_VAR 0 1
87538: NOT
87539: PUSH
87540: LD_VAR 0 2
87544: PUSH
87545: LD_INT 1
87547: PUSH
87548: LD_INT 2
87550: PUSH
87551: LD_INT 3
87553: PUSH
87554: LD_INT 4
87556: PUSH
87557: EMPTY
87558: LIST
87559: LIST
87560: LIST
87561: LIST
87562: IN
87563: NOT
87564: OR
87565: IFFALSE 87569
// exit ;
87567: GO 87661
// tmp := [ ] ;
87569: LD_ADDR_VAR 0 5
87573: PUSH
87574: EMPTY
87575: ST_TO_ADDR
// for i in units do
87576: LD_ADDR_VAR 0 4
87580: PUSH
87581: LD_VAR 0 1
87585: PUSH
87586: FOR_IN
87587: IFFALSE 87630
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
87589: LD_ADDR_VAR 0 5
87593: PUSH
87594: LD_VAR 0 5
87598: PPUSH
87599: LD_VAR 0 5
87603: PUSH
87604: LD_INT 1
87606: PLUS
87607: PPUSH
87608: LD_VAR 0 4
87612: PPUSH
87613: LD_VAR 0 2
87617: PPUSH
87618: CALL_OW 259
87622: PPUSH
87623: CALL_OW 2
87627: ST_TO_ADDR
87628: GO 87586
87630: POP
87631: POP
// if not tmp then
87632: LD_VAR 0 5
87636: NOT
87637: IFFALSE 87641
// exit ;
87639: GO 87661
// result := SortListByListDesc ( units , tmp ) ;
87641: LD_ADDR_VAR 0 3
87645: PUSH
87646: LD_VAR 0 1
87650: PPUSH
87651: LD_VAR 0 5
87655: PPUSH
87656: CALL_OW 77
87660: ST_TO_ADDR
// end ;
87661: LD_VAR 0 3
87665: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
87666: LD_INT 0
87668: PPUSH
87669: PPUSH
87670: PPUSH
// x := GetX ( building ) ;
87671: LD_ADDR_VAR 0 4
87675: PUSH
87676: LD_VAR 0 2
87680: PPUSH
87681: CALL_OW 250
87685: ST_TO_ADDR
// y := GetY ( building ) ;
87686: LD_ADDR_VAR 0 5
87690: PUSH
87691: LD_VAR 0 2
87695: PPUSH
87696: CALL_OW 251
87700: ST_TO_ADDR
// if GetTaskList ( unit ) then
87701: LD_VAR 0 1
87705: PPUSH
87706: CALL_OW 437
87710: IFFALSE 87805
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
87712: LD_STRING e
87714: PUSH
87715: LD_VAR 0 1
87719: PPUSH
87720: CALL_OW 437
87724: PUSH
87725: LD_INT 1
87727: ARRAY
87728: PUSH
87729: LD_INT 1
87731: ARRAY
87732: EQUAL
87733: PUSH
87734: LD_VAR 0 4
87738: PUSH
87739: LD_VAR 0 1
87743: PPUSH
87744: CALL_OW 437
87748: PUSH
87749: LD_INT 1
87751: ARRAY
87752: PUSH
87753: LD_INT 2
87755: ARRAY
87756: EQUAL
87757: AND
87758: PUSH
87759: LD_VAR 0 5
87763: PUSH
87764: LD_VAR 0 1
87768: PPUSH
87769: CALL_OW 437
87773: PUSH
87774: LD_INT 1
87776: ARRAY
87777: PUSH
87778: LD_INT 3
87780: ARRAY
87781: EQUAL
87782: AND
87783: IFFALSE 87795
// result := true else
87785: LD_ADDR_VAR 0 3
87789: PUSH
87790: LD_INT 1
87792: ST_TO_ADDR
87793: GO 87803
// result := false ;
87795: LD_ADDR_VAR 0 3
87799: PUSH
87800: LD_INT 0
87802: ST_TO_ADDR
// end else
87803: GO 87813
// result := false ;
87805: LD_ADDR_VAR 0 3
87809: PUSH
87810: LD_INT 0
87812: ST_TO_ADDR
// end ;
87813: LD_VAR 0 3
87817: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
87818: LD_INT 0
87820: PPUSH
87821: PPUSH
87822: PPUSH
87823: PPUSH
// if not unit or not area then
87824: LD_VAR 0 1
87828: NOT
87829: PUSH
87830: LD_VAR 0 2
87834: NOT
87835: OR
87836: IFFALSE 87840
// exit ;
87838: GO 88004
// tmp := AreaToList ( area , i ) ;
87840: LD_ADDR_VAR 0 6
87844: PUSH
87845: LD_VAR 0 2
87849: PPUSH
87850: LD_VAR 0 5
87854: PPUSH
87855: CALL_OW 517
87859: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
87860: LD_ADDR_VAR 0 5
87864: PUSH
87865: DOUBLE
87866: LD_INT 1
87868: DEC
87869: ST_TO_ADDR
87870: LD_VAR 0 6
87874: PUSH
87875: LD_INT 1
87877: ARRAY
87878: PUSH
87879: FOR_TO
87880: IFFALSE 88002
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
87882: LD_ADDR_VAR 0 7
87886: PUSH
87887: LD_VAR 0 6
87891: PUSH
87892: LD_INT 1
87894: ARRAY
87895: PUSH
87896: LD_VAR 0 5
87900: ARRAY
87901: PUSH
87902: LD_VAR 0 6
87906: PUSH
87907: LD_INT 2
87909: ARRAY
87910: PUSH
87911: LD_VAR 0 5
87915: ARRAY
87916: PUSH
87917: EMPTY
87918: LIST
87919: LIST
87920: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
87921: LD_VAR 0 7
87925: PUSH
87926: LD_INT 1
87928: ARRAY
87929: PPUSH
87930: LD_VAR 0 7
87934: PUSH
87935: LD_INT 2
87937: ARRAY
87938: PPUSH
87939: CALL_OW 428
87943: PUSH
87944: LD_INT 0
87946: EQUAL
87947: IFFALSE 88000
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
87949: LD_VAR 0 1
87953: PPUSH
87954: LD_VAR 0 7
87958: PUSH
87959: LD_INT 1
87961: ARRAY
87962: PPUSH
87963: LD_VAR 0 7
87967: PUSH
87968: LD_INT 2
87970: ARRAY
87971: PPUSH
87972: LD_VAR 0 3
87976: PPUSH
87977: CALL_OW 48
// result := IsPlaced ( unit ) ;
87981: LD_ADDR_VAR 0 4
87985: PUSH
87986: LD_VAR 0 1
87990: PPUSH
87991: CALL_OW 305
87995: ST_TO_ADDR
// exit ;
87996: POP
87997: POP
87998: GO 88004
// end ; end ;
88000: GO 87879
88002: POP
88003: POP
// end ;
88004: LD_VAR 0 4
88008: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
88009: LD_INT 0
88011: PPUSH
88012: PPUSH
88013: PPUSH
// if not side or side > 8 then
88014: LD_VAR 0 1
88018: NOT
88019: PUSH
88020: LD_VAR 0 1
88024: PUSH
88025: LD_INT 8
88027: GREATER
88028: OR
88029: IFFALSE 88033
// exit ;
88031: GO 88220
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
88033: LD_ADDR_VAR 0 4
88037: PUSH
88038: LD_INT 22
88040: PUSH
88041: LD_VAR 0 1
88045: PUSH
88046: EMPTY
88047: LIST
88048: LIST
88049: PUSH
88050: LD_INT 21
88052: PUSH
88053: LD_INT 3
88055: PUSH
88056: EMPTY
88057: LIST
88058: LIST
88059: PUSH
88060: EMPTY
88061: LIST
88062: LIST
88063: PPUSH
88064: CALL_OW 69
88068: ST_TO_ADDR
// if not tmp then
88069: LD_VAR 0 4
88073: NOT
88074: IFFALSE 88078
// exit ;
88076: GO 88220
// enable_addtolog := true ;
88078: LD_ADDR_OWVAR 81
88082: PUSH
88083: LD_INT 1
88085: ST_TO_ADDR
// AddToLog ( [ ) ;
88086: LD_STRING [
88088: PPUSH
88089: CALL_OW 561
// for i in tmp do
88093: LD_ADDR_VAR 0 3
88097: PUSH
88098: LD_VAR 0 4
88102: PUSH
88103: FOR_IN
88104: IFFALSE 88211
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
88106: LD_STRING [
88108: PUSH
88109: LD_VAR 0 3
88113: PPUSH
88114: CALL_OW 266
88118: STR
88119: PUSH
88120: LD_STRING , 
88122: STR
88123: PUSH
88124: LD_VAR 0 3
88128: PPUSH
88129: CALL_OW 250
88133: STR
88134: PUSH
88135: LD_STRING , 
88137: STR
88138: PUSH
88139: LD_VAR 0 3
88143: PPUSH
88144: CALL_OW 251
88148: STR
88149: PUSH
88150: LD_STRING , 
88152: STR
88153: PUSH
88154: LD_VAR 0 3
88158: PPUSH
88159: CALL_OW 254
88163: STR
88164: PUSH
88165: LD_STRING , 
88167: STR
88168: PUSH
88169: LD_VAR 0 3
88173: PPUSH
88174: LD_INT 1
88176: PPUSH
88177: CALL_OW 268
88181: STR
88182: PUSH
88183: LD_STRING , 
88185: STR
88186: PUSH
88187: LD_VAR 0 3
88191: PPUSH
88192: LD_INT 2
88194: PPUSH
88195: CALL_OW 268
88199: STR
88200: PUSH
88201: LD_STRING ],
88203: STR
88204: PPUSH
88205: CALL_OW 561
// end ;
88209: GO 88103
88211: POP
88212: POP
// AddToLog ( ]; ) ;
88213: LD_STRING ];
88215: PPUSH
88216: CALL_OW 561
// end ;
88220: LD_VAR 0 2
88224: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
88225: LD_INT 0
88227: PPUSH
88228: PPUSH
88229: PPUSH
88230: PPUSH
88231: PPUSH
// if not area or not rate or not max then
88232: LD_VAR 0 1
88236: NOT
88237: PUSH
88238: LD_VAR 0 2
88242: NOT
88243: OR
88244: PUSH
88245: LD_VAR 0 4
88249: NOT
88250: OR
88251: IFFALSE 88255
// exit ;
88253: GO 88447
// while 1 do
88255: LD_INT 1
88257: IFFALSE 88447
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
88259: LD_ADDR_VAR 0 9
88263: PUSH
88264: LD_VAR 0 1
88268: PPUSH
88269: LD_INT 1
88271: PPUSH
88272: CALL_OW 287
88276: PUSH
88277: LD_INT 10
88279: MUL
88280: ST_TO_ADDR
// r := rate / 10 ;
88281: LD_ADDR_VAR 0 7
88285: PUSH
88286: LD_VAR 0 2
88290: PUSH
88291: LD_INT 10
88293: DIVREAL
88294: ST_TO_ADDR
// time := 1 1$00 ;
88295: LD_ADDR_VAR 0 8
88299: PUSH
88300: LD_INT 2100
88302: ST_TO_ADDR
// if amount < min then
88303: LD_VAR 0 9
88307: PUSH
88308: LD_VAR 0 3
88312: LESS
88313: IFFALSE 88331
// r := r * 2 else
88315: LD_ADDR_VAR 0 7
88319: PUSH
88320: LD_VAR 0 7
88324: PUSH
88325: LD_INT 2
88327: MUL
88328: ST_TO_ADDR
88329: GO 88357
// if amount > max then
88331: LD_VAR 0 9
88335: PUSH
88336: LD_VAR 0 4
88340: GREATER
88341: IFFALSE 88357
// r := r / 2 ;
88343: LD_ADDR_VAR 0 7
88347: PUSH
88348: LD_VAR 0 7
88352: PUSH
88353: LD_INT 2
88355: DIVREAL
88356: ST_TO_ADDR
// time := time / r ;
88357: LD_ADDR_VAR 0 8
88361: PUSH
88362: LD_VAR 0 8
88366: PUSH
88367: LD_VAR 0 7
88371: DIVREAL
88372: ST_TO_ADDR
// if time < 0 then
88373: LD_VAR 0 8
88377: PUSH
88378: LD_INT 0
88380: LESS
88381: IFFALSE 88398
// time := time * - 1 ;
88383: LD_ADDR_VAR 0 8
88387: PUSH
88388: LD_VAR 0 8
88392: PUSH
88393: LD_INT 1
88395: NEG
88396: MUL
88397: ST_TO_ADDR
// wait ( time ) ;
88398: LD_VAR 0 8
88402: PPUSH
88403: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
88407: LD_INT 35
88409: PPUSH
88410: LD_INT 875
88412: PPUSH
88413: CALL_OW 12
88417: PPUSH
88418: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
88422: LD_INT 1
88424: PPUSH
88425: LD_INT 5
88427: PPUSH
88428: CALL_OW 12
88432: PPUSH
88433: LD_VAR 0 1
88437: PPUSH
88438: LD_INT 1
88440: PPUSH
88441: CALL_OW 55
// end ;
88445: GO 88255
// end ;
88447: LD_VAR 0 5
88451: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
88452: LD_INT 0
88454: PPUSH
88455: PPUSH
88456: PPUSH
88457: PPUSH
88458: PPUSH
88459: PPUSH
88460: PPUSH
88461: PPUSH
// if not turrets or not factories then
88462: LD_VAR 0 1
88466: NOT
88467: PUSH
88468: LD_VAR 0 2
88472: NOT
88473: OR
88474: IFFALSE 88478
// exit ;
88476: GO 88785
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
88478: LD_ADDR_VAR 0 10
88482: PUSH
88483: LD_INT 5
88485: PUSH
88486: LD_INT 6
88488: PUSH
88489: EMPTY
88490: LIST
88491: LIST
88492: PUSH
88493: LD_INT 2
88495: PUSH
88496: LD_INT 4
88498: PUSH
88499: EMPTY
88500: LIST
88501: LIST
88502: PUSH
88503: LD_INT 3
88505: PUSH
88506: LD_INT 5
88508: PUSH
88509: EMPTY
88510: LIST
88511: LIST
88512: PUSH
88513: EMPTY
88514: LIST
88515: LIST
88516: LIST
88517: PUSH
88518: LD_INT 24
88520: PUSH
88521: LD_INT 25
88523: PUSH
88524: EMPTY
88525: LIST
88526: LIST
88527: PUSH
88528: LD_INT 23
88530: PUSH
88531: LD_INT 27
88533: PUSH
88534: EMPTY
88535: LIST
88536: LIST
88537: PUSH
88538: EMPTY
88539: LIST
88540: LIST
88541: PUSH
88542: LD_INT 42
88544: PUSH
88545: LD_INT 43
88547: PUSH
88548: EMPTY
88549: LIST
88550: LIST
88551: PUSH
88552: LD_INT 44
88554: PUSH
88555: LD_INT 46
88557: PUSH
88558: EMPTY
88559: LIST
88560: LIST
88561: PUSH
88562: LD_INT 45
88564: PUSH
88565: LD_INT 47
88567: PUSH
88568: EMPTY
88569: LIST
88570: LIST
88571: PUSH
88572: EMPTY
88573: LIST
88574: LIST
88575: LIST
88576: PUSH
88577: EMPTY
88578: LIST
88579: LIST
88580: LIST
88581: ST_TO_ADDR
// result := [ ] ;
88582: LD_ADDR_VAR 0 3
88586: PUSH
88587: EMPTY
88588: ST_TO_ADDR
// for i in turrets do
88589: LD_ADDR_VAR 0 4
88593: PUSH
88594: LD_VAR 0 1
88598: PUSH
88599: FOR_IN
88600: IFFALSE 88783
// begin nat := GetNation ( i ) ;
88602: LD_ADDR_VAR 0 7
88606: PUSH
88607: LD_VAR 0 4
88611: PPUSH
88612: CALL_OW 248
88616: ST_TO_ADDR
// weapon := 0 ;
88617: LD_ADDR_VAR 0 8
88621: PUSH
88622: LD_INT 0
88624: ST_TO_ADDR
// if not nat then
88625: LD_VAR 0 7
88629: NOT
88630: IFFALSE 88634
// continue ;
88632: GO 88599
// for j in list [ nat ] do
88634: LD_ADDR_VAR 0 5
88638: PUSH
88639: LD_VAR 0 10
88643: PUSH
88644: LD_VAR 0 7
88648: ARRAY
88649: PUSH
88650: FOR_IN
88651: IFFALSE 88692
// if GetBWeapon ( i ) = j [ 1 ] then
88653: LD_VAR 0 4
88657: PPUSH
88658: CALL_OW 269
88662: PUSH
88663: LD_VAR 0 5
88667: PUSH
88668: LD_INT 1
88670: ARRAY
88671: EQUAL
88672: IFFALSE 88690
// begin weapon := j [ 2 ] ;
88674: LD_ADDR_VAR 0 8
88678: PUSH
88679: LD_VAR 0 5
88683: PUSH
88684: LD_INT 2
88686: ARRAY
88687: ST_TO_ADDR
// break ;
88688: GO 88692
// end ;
88690: GO 88650
88692: POP
88693: POP
// if not weapon then
88694: LD_VAR 0 8
88698: NOT
88699: IFFALSE 88703
// continue ;
88701: GO 88599
// for k in factories do
88703: LD_ADDR_VAR 0 6
88707: PUSH
88708: LD_VAR 0 2
88712: PUSH
88713: FOR_IN
88714: IFFALSE 88779
// begin weapons := AvailableWeaponList ( k ) ;
88716: LD_ADDR_VAR 0 9
88720: PUSH
88721: LD_VAR 0 6
88725: PPUSH
88726: CALL_OW 478
88730: ST_TO_ADDR
// if not weapons then
88731: LD_VAR 0 9
88735: NOT
88736: IFFALSE 88740
// continue ;
88738: GO 88713
// if weapon in weapons then
88740: LD_VAR 0 8
88744: PUSH
88745: LD_VAR 0 9
88749: IN
88750: IFFALSE 88777
// begin result := [ i , weapon ] ;
88752: LD_ADDR_VAR 0 3
88756: PUSH
88757: LD_VAR 0 4
88761: PUSH
88762: LD_VAR 0 8
88766: PUSH
88767: EMPTY
88768: LIST
88769: LIST
88770: ST_TO_ADDR
// exit ;
88771: POP
88772: POP
88773: POP
88774: POP
88775: GO 88785
// end ; end ;
88777: GO 88713
88779: POP
88780: POP
// end ;
88781: GO 88599
88783: POP
88784: POP
// end ;
88785: LD_VAR 0 3
88789: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
88790: LD_INT 0
88792: PPUSH
// if not side or side > 8 then
88793: LD_VAR 0 3
88797: NOT
88798: PUSH
88799: LD_VAR 0 3
88803: PUSH
88804: LD_INT 8
88806: GREATER
88807: OR
88808: IFFALSE 88812
// exit ;
88810: GO 88871
// if not range then
88812: LD_VAR 0 4
88816: NOT
88817: IFFALSE 88828
// range := - 12 ;
88819: LD_ADDR_VAR 0 4
88823: PUSH
88824: LD_INT 12
88826: NEG
88827: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
88828: LD_VAR 0 1
88832: PPUSH
88833: LD_VAR 0 2
88837: PPUSH
88838: LD_VAR 0 3
88842: PPUSH
88843: LD_VAR 0 4
88847: PPUSH
88848: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
88852: LD_VAR 0 1
88856: PPUSH
88857: LD_VAR 0 2
88861: PPUSH
88862: LD_VAR 0 3
88866: PPUSH
88867: CALL_OW 331
// end ;
88871: LD_VAR 0 5
88875: RET
// export function Video ( mode ) ; begin
88876: LD_INT 0
88878: PPUSH
// ingame_video = mode ;
88879: LD_ADDR_OWVAR 52
88883: PUSH
88884: LD_VAR 0 1
88888: ST_TO_ADDR
// interface_hidden = mode ;
88889: LD_ADDR_OWVAR 54
88893: PUSH
88894: LD_VAR 0 1
88898: ST_TO_ADDR
// end ;
88899: LD_VAR 0 2
88903: RET
// export function Join ( array , element ) ; begin
88904: LD_INT 0
88906: PPUSH
// result := array ^ element ;
88907: LD_ADDR_VAR 0 3
88911: PUSH
88912: LD_VAR 0 1
88916: PUSH
88917: LD_VAR 0 2
88921: ADD
88922: ST_TO_ADDR
// end ;
88923: LD_VAR 0 3
88927: RET
// export function JoinUnion ( array , element ) ; begin
88928: LD_INT 0
88930: PPUSH
// result := array union element ;
88931: LD_ADDR_VAR 0 3
88935: PUSH
88936: LD_VAR 0 1
88940: PUSH
88941: LD_VAR 0 2
88945: UNION
88946: ST_TO_ADDR
// end ;
88947: LD_VAR 0 3
88951: RET
// export function GetBehemoths ( side ) ; begin
88952: LD_INT 0
88954: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
88955: LD_ADDR_VAR 0 2
88959: PUSH
88960: LD_INT 22
88962: PUSH
88963: LD_VAR 0 1
88967: PUSH
88968: EMPTY
88969: LIST
88970: LIST
88971: PUSH
88972: LD_INT 31
88974: PUSH
88975: LD_INT 25
88977: PUSH
88978: EMPTY
88979: LIST
88980: LIST
88981: PUSH
88982: EMPTY
88983: LIST
88984: LIST
88985: PPUSH
88986: CALL_OW 69
88990: ST_TO_ADDR
// end ;
88991: LD_VAR 0 2
88995: RET
// export function Shuffle ( array ) ; var i , index ; begin
88996: LD_INT 0
88998: PPUSH
88999: PPUSH
89000: PPUSH
// result := [ ] ;
89001: LD_ADDR_VAR 0 2
89005: PUSH
89006: EMPTY
89007: ST_TO_ADDR
// if not array then
89008: LD_VAR 0 1
89012: NOT
89013: IFFALSE 89017
// exit ;
89015: GO 89116
// Randomize ;
89017: CALL_OW 10
// for i = array downto 1 do
89021: LD_ADDR_VAR 0 3
89025: PUSH
89026: DOUBLE
89027: LD_VAR 0 1
89031: INC
89032: ST_TO_ADDR
89033: LD_INT 1
89035: PUSH
89036: FOR_DOWNTO
89037: IFFALSE 89114
// begin index := rand ( 1 , array ) ;
89039: LD_ADDR_VAR 0 4
89043: PUSH
89044: LD_INT 1
89046: PPUSH
89047: LD_VAR 0 1
89051: PPUSH
89052: CALL_OW 12
89056: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
89057: LD_ADDR_VAR 0 2
89061: PUSH
89062: LD_VAR 0 2
89066: PPUSH
89067: LD_VAR 0 2
89071: PUSH
89072: LD_INT 1
89074: PLUS
89075: PPUSH
89076: LD_VAR 0 1
89080: PUSH
89081: LD_VAR 0 4
89085: ARRAY
89086: PPUSH
89087: CALL_OW 2
89091: ST_TO_ADDR
// array := Delete ( array , index ) ;
89092: LD_ADDR_VAR 0 1
89096: PUSH
89097: LD_VAR 0 1
89101: PPUSH
89102: LD_VAR 0 4
89106: PPUSH
89107: CALL_OW 3
89111: ST_TO_ADDR
// end ;
89112: GO 89036
89114: POP
89115: POP
// end ; end_of_file
89116: LD_VAR 0 2
89120: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
89121: GO 89123
89123: DISABLE
// begin ru_radar := 98 ;
89124: LD_ADDR_EXP 92
89128: PUSH
89129: LD_INT 98
89131: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
89132: LD_ADDR_EXP 93
89136: PUSH
89137: LD_INT 89
89139: ST_TO_ADDR
// us_hack := 99 ;
89140: LD_ADDR_EXP 94
89144: PUSH
89145: LD_INT 99
89147: ST_TO_ADDR
// us_artillery := 97 ;
89148: LD_ADDR_EXP 95
89152: PUSH
89153: LD_INT 97
89155: ST_TO_ADDR
// ar_bio_bomb := 91 ;
89156: LD_ADDR_EXP 96
89160: PUSH
89161: LD_INT 91
89163: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
89164: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
89165: LD_INT 0
89167: PPUSH
89168: PPUSH
89169: PPUSH
89170: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
89171: LD_VAR 0 1
89175: PPUSH
89176: CALL_OW 264
89180: PUSH
89181: LD_EXP 96
89185: EQUAL
89186: IFFALSE 89258
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89188: LD_INT 68
89190: PPUSH
89191: LD_VAR 0 1
89195: PPUSH
89196: CALL_OW 255
89200: PPUSH
89201: CALL_OW 321
89205: PUSH
89206: LD_INT 2
89208: EQUAL
89209: IFFALSE 89221
// eff := 70 else
89211: LD_ADDR_VAR 0 6
89215: PUSH
89216: LD_INT 70
89218: ST_TO_ADDR
89219: GO 89229
// eff := 30 ;
89221: LD_ADDR_VAR 0 6
89225: PUSH
89226: LD_INT 30
89228: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89229: LD_VAR 0 1
89233: PPUSH
89234: CALL_OW 250
89238: PPUSH
89239: LD_VAR 0 1
89243: PPUSH
89244: CALL_OW 251
89248: PPUSH
89249: LD_VAR 0 6
89253: PPUSH
89254: CALL_OW 495
// end ; end ;
89258: LD_VAR 0 4
89262: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
89263: LD_INT 0
89265: PPUSH
89266: PPUSH
89267: PPUSH
89268: PPUSH
89269: PPUSH
89270: PPUSH
// if cmd = 124 then
89271: LD_VAR 0 1
89275: PUSH
89276: LD_INT 124
89278: EQUAL
89279: IFFALSE 89485
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
89281: LD_ADDR_VAR 0 5
89285: PUSH
89286: LD_INT 2
89288: PUSH
89289: LD_INT 34
89291: PUSH
89292: LD_INT 53
89294: PUSH
89295: EMPTY
89296: LIST
89297: LIST
89298: PUSH
89299: LD_INT 34
89301: PUSH
89302: LD_INT 14
89304: PUSH
89305: EMPTY
89306: LIST
89307: LIST
89308: PUSH
89309: EMPTY
89310: LIST
89311: LIST
89312: LIST
89313: PPUSH
89314: CALL_OW 69
89318: ST_TO_ADDR
// if not tmp then
89319: LD_VAR 0 5
89323: NOT
89324: IFFALSE 89328
// exit ;
89326: GO 89485
// for i in tmp do
89328: LD_ADDR_VAR 0 3
89332: PUSH
89333: LD_VAR 0 5
89337: PUSH
89338: FOR_IN
89339: IFFALSE 89483
// begin taskList := GetTaskList ( i ) ;
89341: LD_ADDR_VAR 0 6
89345: PUSH
89346: LD_VAR 0 3
89350: PPUSH
89351: CALL_OW 437
89355: ST_TO_ADDR
// if not taskList then
89356: LD_VAR 0 6
89360: NOT
89361: IFFALSE 89365
// continue ;
89363: GO 89338
// for j = 1 to taskList do
89365: LD_ADDR_VAR 0 4
89369: PUSH
89370: DOUBLE
89371: LD_INT 1
89373: DEC
89374: ST_TO_ADDR
89375: LD_VAR 0 6
89379: PUSH
89380: FOR_TO
89381: IFFALSE 89479
// if taskList [ j ] [ 1 ] = | then
89383: LD_VAR 0 6
89387: PUSH
89388: LD_VAR 0 4
89392: ARRAY
89393: PUSH
89394: LD_INT 1
89396: ARRAY
89397: PUSH
89398: LD_STRING |
89400: EQUAL
89401: IFFALSE 89477
// begin _taskList := Delete ( taskList , 1 ) ;
89403: LD_ADDR_VAR 0 7
89407: PUSH
89408: LD_VAR 0 6
89412: PPUSH
89413: LD_INT 1
89415: PPUSH
89416: CALL_OW 3
89420: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
89421: LD_VAR 0 3
89425: PPUSH
89426: LD_VAR 0 7
89430: PPUSH
89431: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
89435: LD_VAR 0 3
89439: PPUSH
89440: LD_VAR 0 6
89444: PUSH
89445: LD_VAR 0 4
89449: ARRAY
89450: PUSH
89451: LD_INT 2
89453: ARRAY
89454: PPUSH
89455: LD_VAR 0 6
89459: PUSH
89460: LD_VAR 0 4
89464: ARRAY
89465: PUSH
89466: LD_INT 3
89468: ARRAY
89469: PPUSH
89470: LD_INT 8
89472: PPUSH
89473: CALL 89490 0 4
// end ;
89477: GO 89380
89479: POP
89480: POP
// end ;
89481: GO 89338
89483: POP
89484: POP
// end ; end ;
89485: LD_VAR 0 2
89489: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89490: LD_INT 0
89492: PPUSH
89493: PPUSH
89494: PPUSH
89495: PPUSH
89496: PPUSH
89497: PPUSH
89498: PPUSH
89499: PPUSH
89500: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
89501: LD_VAR 0 1
89505: NOT
89506: PUSH
89507: LD_VAR 0 2
89511: PPUSH
89512: LD_VAR 0 3
89516: PPUSH
89517: CALL_OW 488
89521: NOT
89522: OR
89523: PUSH
89524: LD_VAR 0 4
89528: NOT
89529: OR
89530: IFFALSE 89534
// exit ;
89532: GO 89874
// list := [ ] ;
89534: LD_ADDR_VAR 0 13
89538: PUSH
89539: EMPTY
89540: ST_TO_ADDR
// if x - r < 0 then
89541: LD_VAR 0 2
89545: PUSH
89546: LD_VAR 0 4
89550: MINUS
89551: PUSH
89552: LD_INT 0
89554: LESS
89555: IFFALSE 89567
// min_x := 0 else
89557: LD_ADDR_VAR 0 7
89561: PUSH
89562: LD_INT 0
89564: ST_TO_ADDR
89565: GO 89583
// min_x := x - r ;
89567: LD_ADDR_VAR 0 7
89571: PUSH
89572: LD_VAR 0 2
89576: PUSH
89577: LD_VAR 0 4
89581: MINUS
89582: ST_TO_ADDR
// if y - r < 0 then
89583: LD_VAR 0 3
89587: PUSH
89588: LD_VAR 0 4
89592: MINUS
89593: PUSH
89594: LD_INT 0
89596: LESS
89597: IFFALSE 89609
// min_y := 0 else
89599: LD_ADDR_VAR 0 8
89603: PUSH
89604: LD_INT 0
89606: ST_TO_ADDR
89607: GO 89625
// min_y := y - r ;
89609: LD_ADDR_VAR 0 8
89613: PUSH
89614: LD_VAR 0 3
89618: PUSH
89619: LD_VAR 0 4
89623: MINUS
89624: ST_TO_ADDR
// max_x := x + r ;
89625: LD_ADDR_VAR 0 9
89629: PUSH
89630: LD_VAR 0 2
89634: PUSH
89635: LD_VAR 0 4
89639: PLUS
89640: ST_TO_ADDR
// max_y := y + r ;
89641: LD_ADDR_VAR 0 10
89645: PUSH
89646: LD_VAR 0 3
89650: PUSH
89651: LD_VAR 0 4
89655: PLUS
89656: ST_TO_ADDR
// for _x = min_x to max_x do
89657: LD_ADDR_VAR 0 11
89661: PUSH
89662: DOUBLE
89663: LD_VAR 0 7
89667: DEC
89668: ST_TO_ADDR
89669: LD_VAR 0 9
89673: PUSH
89674: FOR_TO
89675: IFFALSE 89792
// for _y = min_y to max_y do
89677: LD_ADDR_VAR 0 12
89681: PUSH
89682: DOUBLE
89683: LD_VAR 0 8
89687: DEC
89688: ST_TO_ADDR
89689: LD_VAR 0 10
89693: PUSH
89694: FOR_TO
89695: IFFALSE 89788
// begin if not ValidHex ( _x , _y ) then
89697: LD_VAR 0 11
89701: PPUSH
89702: LD_VAR 0 12
89706: PPUSH
89707: CALL_OW 488
89711: NOT
89712: IFFALSE 89716
// continue ;
89714: GO 89694
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89716: LD_VAR 0 11
89720: PPUSH
89721: LD_VAR 0 12
89725: PPUSH
89726: CALL_OW 351
89730: PUSH
89731: LD_VAR 0 11
89735: PPUSH
89736: LD_VAR 0 12
89740: PPUSH
89741: CALL_OW 554
89745: AND
89746: IFFALSE 89786
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89748: LD_ADDR_VAR 0 13
89752: PUSH
89753: LD_VAR 0 13
89757: PPUSH
89758: LD_VAR 0 13
89762: PUSH
89763: LD_INT 1
89765: PLUS
89766: PPUSH
89767: LD_VAR 0 11
89771: PUSH
89772: LD_VAR 0 12
89776: PUSH
89777: EMPTY
89778: LIST
89779: LIST
89780: PPUSH
89781: CALL_OW 2
89785: ST_TO_ADDR
// end ;
89786: GO 89694
89788: POP
89789: POP
89790: GO 89674
89792: POP
89793: POP
// if not list then
89794: LD_VAR 0 13
89798: NOT
89799: IFFALSE 89803
// exit ;
89801: GO 89874
// for i in list do
89803: LD_ADDR_VAR 0 6
89807: PUSH
89808: LD_VAR 0 13
89812: PUSH
89813: FOR_IN
89814: IFFALSE 89872
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89816: LD_VAR 0 1
89820: PPUSH
89821: LD_STRING M
89823: PUSH
89824: LD_VAR 0 6
89828: PUSH
89829: LD_INT 1
89831: ARRAY
89832: PUSH
89833: LD_VAR 0 6
89837: PUSH
89838: LD_INT 2
89840: ARRAY
89841: PUSH
89842: LD_INT 0
89844: PUSH
89845: LD_INT 0
89847: PUSH
89848: LD_INT 0
89850: PUSH
89851: LD_INT 0
89853: PUSH
89854: EMPTY
89855: LIST
89856: LIST
89857: LIST
89858: LIST
89859: LIST
89860: LIST
89861: LIST
89862: PUSH
89863: EMPTY
89864: LIST
89865: PPUSH
89866: CALL_OW 447
89870: GO 89813
89872: POP
89873: POP
// end ;
89874: LD_VAR 0 5
89878: RET
