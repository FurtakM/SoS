// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 16691 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 80325 0 9
// PrepareAmerican ;
  77: CALL 525 0 0
// PrepareArabian ;
  81: CALL 2197 0 0
// MC_Start ( ) ;
  85: CALL 18803 0 0
// Action ;
  89: CALL 7672 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 231000
 219: PUSH
 220: LD_INT 210000
 222: PUSH
 223: LD_INT 199500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// end ;
 287: LD_VAR 0 1
 291: RET
// export function CustomInitMacro ; var i ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 296: LD_ADDR_EXP 73
 300: PUSH
 301: LD_INT 20
 303: PUSH
 304: LD_INT 21
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 315: LD_ADDR_EXP 74
 319: PUSH
 320: LD_INT 28
 322: PUSH
 323: LD_INT 24
 325: PUSH
 326: LD_INT 26
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 334: LD_INT 1
 336: PPUSH
 337: LD_INT 6
 339: PUSH
 340: LD_INT 8
 342: PUSH
 343: LD_INT 9
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: PUSH
 351: LD_OWVAR 67
 355: ARRAY
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: CALL 39604 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 364: LD_INT 2
 366: PPUSH
 367: LD_INT 6
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: LD_INT 9
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: PUSH
 381: LD_OWVAR 67
 385: ARRAY
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: CALL 39604 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 6
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: LD_INT 9
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL 39604 0 3
// for i = 1 to mc_bases do
 424: LD_ADDR_VAR 0 2
 428: PUSH
 429: DOUBLE
 430: LD_INT 1
 432: DEC
 433: ST_TO_ADDR
 434: LD_EXP 49
 438: PUSH
 439: FOR_TO
 440: IFFALSE 464
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 442: LD_VAR 0 2
 446: PPUSH
 447: LD_EXP 42
 451: PUSH
 452: LD_VAR 0 2
 456: ARRAY
 457: PPUSH
 458: CALL 40030 0 2
 462: GO 439
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 1
 470: RET
// function Debuger ; var i ; begin
 471: LD_INT 0
 473: PPUSH
 474: PPUSH
// if not debug then
 475: LD_EXP 1
 479: NOT
 480: IFFALSE 484
// exit ;
 482: GO 520
// game_speed := 5 ;
 484: LD_ADDR_OWVAR 65
 488: PUSH
 489: LD_INT 5
 491: ST_TO_ADDR
// uc_side := 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// uc_nation := 1 ;
 500: LD_ADDR_OWVAR 21
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 508: LD_EXP 35
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: CALL_OW 235
// end ; end_of_file
 520: LD_VAR 0 1
 524: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 525: LD_INT 0
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side := 4 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 4
 542: ST_TO_ADDR
// uc_nation := 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 551: LD_ADDR_EXP 29
 555: PUSH
 556: LD_STRING Powell
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: LD_STRING 
 564: PPUSH
 565: CALL 45902 0 3
 569: ST_TO_ADDR
// uc_side := 1 ;
 570: LD_ADDR_OWVAR 20
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 578: LD_ADDR_EXP 20
 582: PUSH
 583: LD_STRING JMM
 585: PPUSH
 586: LD_EXP 1
 590: NOT
 591: PPUSH
 592: LD_EXP 4
 596: PPUSH
 597: CALL 45902 0 3
 601: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 602: LD_EXP 20
 606: PPUSH
 607: CALL_OW 257
 611: PUSH
 612: LD_INT 4
 614: GREATER
 615: IFFALSE 629
// SetClass ( JMM , 1 ) ;
 617: LD_EXP 20
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 629: LD_ADDR_EXP 21
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 4
 647: PPUSH
 648: CALL 45902 0 3
 652: ST_TO_ADDR
// if not Lisa then
 653: LD_EXP 21
 657: NOT
 658: IFFALSE 673
// Lisa := CreateCharacter ( 10_Lisa ) ;
 660: LD_ADDR_EXP 21
 664: PUSH
 665: LD_STRING 10_Lisa
 667: PPUSH
 668: CALL_OW 34
 672: ST_TO_ADDR
// if not Lisa then
 673: LD_EXP 21
 677: NOT
 678: IFFALSE 693
// Lisa := CreateCharacter ( 09_Lisa ) ;
 680: LD_ADDR_EXP 21
 684: PUSH
 685: LD_STRING 09_Lisa
 687: PPUSH
 688: CALL_OW 34
 692: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 693: LD_ADDR_EXP 30
 697: PUSH
 698: LD_STRING Cornel
 700: PPUSH
 701: LD_EXP 1
 705: NOT
 706: PPUSH
 707: LD_EXP 4
 711: PPUSH
 712: CALL 45902 0 3
 716: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING Donaldson
 724: PPUSH
 725: LD_EXP 1
 729: NOT
 730: PPUSH
 731: LD_EXP 4
 735: PPUSH
 736: CALL 45902 0 3
 740: ST_TO_ADDR
// if not Donaldson then
 741: LD_EXP 22
 745: NOT
 746: IFFALSE 761
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 748: LD_ADDR_EXP 22
 752: PUSH
 753: LD_STRING 10_Donaldson
 755: PPUSH
 756: CALL_OW 34
 760: ST_TO_ADDR
// if not Donaldson then
 761: LD_EXP 22
 765: NOT
 766: IFFALSE 781
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 768: LD_ADDR_EXP 22
 772: PUSH
 773: LD_STRING 09_Donaldson
 775: PPUSH
 776: CALL_OW 34
 780: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 781: LD_ADDR_EXP 23
 785: PUSH
 786: LD_STRING Bobby
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 4
 799: PPUSH
 800: CALL 45902 0 3
 804: ST_TO_ADDR
// if not Bobby then
 805: LD_EXP 23
 809: NOT
 810: IFFALSE 825
// Bobby := CreateCharacter ( 10_Bobby ) ;
 812: LD_ADDR_EXP 23
 816: PUSH
 817: LD_STRING 10_Bobby
 819: PPUSH
 820: CALL_OW 34
 824: ST_TO_ADDR
// if not Bobby then
 825: LD_EXP 23
 829: NOT
 830: IFFALSE 845
// Bobby := CreateCharacter ( 09_Bobby ) ;
 832: LD_ADDR_EXP 23
 836: PUSH
 837: LD_STRING 09_Bobby
 839: PPUSH
 840: CALL_OW 34
 844: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 845: LD_ADDR_EXP 24
 849: PUSH
 850: LD_STRING Cyrus
 852: PPUSH
 853: LD_EXP 1
 857: NOT
 858: PPUSH
 859: LD_EXP 4
 863: PPUSH
 864: CALL 45902 0 3
 868: ST_TO_ADDR
// if not Cyrus then
 869: LD_EXP 24
 873: NOT
 874: IFFALSE 889
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 876: LD_ADDR_EXP 24
 880: PUSH
 881: LD_STRING 10_Cyrus
 883: PPUSH
 884: CALL_OW 34
 888: ST_TO_ADDR
// if not Cyrus then
 889: LD_EXP 24
 893: NOT
 894: IFFALSE 909
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING 09_Cyrus
 903: PPUSH
 904: CALL_OW 34
 908: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 909: LD_ADDR_EXP 25
 913: PUSH
 914: LD_STRING Denis
 916: PPUSH
 917: LD_EXP 1
 921: NOT
 922: PPUSH
 923: LD_EXP 4
 927: PPUSH
 928: CALL 45902 0 3
 932: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 26
 937: PUSH
 938: LD_STRING Brown
 940: PPUSH
 941: LD_EXP 1
 945: NOT
 946: PPUSH
 947: LD_EXP 4
 951: PPUSH
 952: CALL 45902 0 3
 956: ST_TO_ADDR
// if not Brown then
 957: LD_EXP 26
 961: NOT
 962: IFFALSE 977
// Brown := CreateCharacter ( 10_Brown ) ;
 964: LD_ADDR_EXP 26
 968: PUSH
 969: LD_STRING 10_Brown
 971: PPUSH
 972: CALL_OW 34
 976: ST_TO_ADDR
// if not Brown then
 977: LD_EXP 26
 981: NOT
 982: IFFALSE 997
// Brown := CreateCharacter ( 08_Brown ) ;
 984: LD_ADDR_EXP 26
 988: PUSH
 989: LD_STRING 08_Brown
 991: PPUSH
 992: CALL_OW 34
 996: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_STRING Gladstone
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 4
1015: PPUSH
1016: CALL 45902 0 3
1020: ST_TO_ADDR
// if not Gladstone then
1021: LD_EXP 27
1025: NOT
1026: IFFALSE 1041
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1028: LD_ADDR_EXP 27
1032: PUSH
1033: LD_STRING 10_Gladstone
1035: PPUSH
1036: CALL_OW 34
1040: ST_TO_ADDR
// if not Gladstone then
1041: LD_EXP 27
1045: NOT
1046: IFFALSE 1061
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1048: LD_ADDR_EXP 27
1052: PUSH
1053: LD_STRING 08_Gladstone
1055: PPUSH
1056: CALL_OW 34
1060: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1061: LD_ADDR_EXP 28
1065: PUSH
1066: LD_STRING Houten
1068: PPUSH
1069: LD_EXP 1
1073: NOT
1074: PPUSH
1075: LD_EXP 4
1079: PPUSH
1080: CALL 45902 0 3
1084: ST_TO_ADDR
// if not Houten then
1085: LD_EXP 28
1089: NOT
1090: IFFALSE 1105
// Houten := CreateCharacter ( 10_Houten ) ;
1092: LD_ADDR_EXP 28
1096: PUSH
1097: LD_STRING 10_Houten
1099: PPUSH
1100: CALL_OW 34
1104: ST_TO_ADDR
// if not Houten then
1105: LD_EXP 28
1109: NOT
1110: IFFALSE 1125
// Houten := CreateCharacter ( 09_Houten ) ;
1112: LD_ADDR_EXP 28
1116: PUSH
1117: LD_STRING 09_Houten
1119: PPUSH
1120: CALL_OW 34
1124: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1125: LD_ADDR_EXP 30
1129: PUSH
1130: LD_STRING Cornell
1132: PPUSH
1133: LD_EXP 1
1137: NOT
1138: PPUSH
1139: LD_EXP 4
1143: PPUSH
1144: CALL 45902 0 3
1148: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: LD_STRING Gary
1156: PPUSH
1157: LD_EXP 1
1161: NOT
1162: PPUSH
1163: LD_EXP 4
1167: PPUSH
1168: CALL 45902 0 3
1172: ST_TO_ADDR
// if not Gary then
1173: LD_EXP 31
1177: NOT
1178: IFFALSE 1193
// Gary := CreateCharacter ( 10_Gary ) ;
1180: LD_ADDR_EXP 31
1184: PUSH
1185: LD_STRING 10_Gary
1187: PPUSH
1188: CALL_OW 34
1192: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1193: LD_ADDR_EXP 32
1197: PUSH
1198: LD_STRING Frank
1200: PPUSH
1201: LD_EXP 1
1205: NOT
1206: PPUSH
1207: LD_EXP 4
1211: PPUSH
1212: CALL 45902 0 3
1216: ST_TO_ADDR
// if not Frank then
1217: LD_EXP 32
1221: NOT
1222: IFFALSE 1237
// Frank := CreateCharacter ( 08_Frank ) ;
1224: LD_ADDR_EXP 32
1228: PUSH
1229: LD_STRING 08_Frank
1231: PPUSH
1232: CALL_OW 34
1236: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1237: LD_ADDR_EXP 33
1241: PUSH
1242: LD_STRING Kikuchi
1244: PPUSH
1245: LD_EXP 1
1249: NOT
1250: PPUSH
1251: LD_EXP 4
1255: PPUSH
1256: CALL 45902 0 3
1260: ST_TO_ADDR
// if not Kikuchi then
1261: LD_EXP 33
1265: NOT
1266: IFFALSE 1281
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1268: LD_ADDR_EXP 33
1272: PUSH
1273: LD_STRING 08_Kikuchi
1275: PPUSH
1276: CALL_OW 34
1280: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1281: LD_ADDR_VAR 0 5
1285: PUSH
1286: LD_EXP 21
1290: PUSH
1291: LD_EXP 22
1295: PUSH
1296: LD_EXP 23
1300: PUSH
1301: LD_EXP 24
1305: PUSH
1306: LD_EXP 25
1310: PUSH
1311: LD_EXP 26
1315: PUSH
1316: LD_EXP 27
1320: PUSH
1321: LD_EXP 28
1325: PUSH
1326: LD_EXP 30
1330: PUSH
1331: LD_EXP 31
1335: PUSH
1336: LD_EXP 32
1340: PUSH
1341: LD_EXP 33
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: ST_TO_ADDR
// tmp := tmp diff 0 ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PUSH
1370: LD_INT 0
1372: DIFF
1373: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1374: LD_ADDR_VAR 0 5
1378: PUSH
1379: LD_VAR 0 5
1383: PUSH
1384: LD_STRING 10_lock
1386: PPUSH
1387: CALL_OW 31
1391: UNION
1392: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1393: LD_ADDR_VAR 0 5
1397: PUSH
1398: LD_VAR 0 5
1402: PUSH
1403: LD_STRING 10c_lock
1405: PPUSH
1406: CALL_OW 31
1410: UNION
1411: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1412: LD_STRING 10_lock
1414: PPUSH
1415: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1419: LD_STRING 10c_lock
1421: PPUSH
1422: CALL_OW 40
// for i in tmp do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1475
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 257
1448: PUSH
1449: LD_INT 8
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: IN
1459: IFFALSE 1473
// SetClass ( i , class_soldier ) ;
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: CALL_OW 336
1473: GO 1436
1475: POP
1476: POP
// if tmp < 12 then
1477: LD_VAR 0 5
1481: PUSH
1482: LD_INT 12
1484: LESS
1485: IFFALSE 1579
// begin k := 16 - tmp ;
1487: LD_ADDR_VAR 0 3
1491: PUSH
1492: LD_INT 16
1494: PUSH
1495: LD_VAR 0 5
1499: MINUS
1500: ST_TO_ADDR
// for i = 1 to k do
1501: LD_ADDR_VAR 0 2
1505: PUSH
1506: DOUBLE
1507: LD_INT 1
1509: DEC
1510: ST_TO_ADDR
1511: LD_VAR 0 3
1515: PUSH
1516: FOR_TO
1517: IFFALSE 1577
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1519: LD_INT 0
1521: PPUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 3
1530: PUSH
1531: LD_INT 4
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 4
1545: PPUSH
1546: CALL_OW 12
1550: ARRAY
1551: PPUSH
1552: LD_INT 6
1554: PPUSH
1555: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1559: LD_ADDR_VAR 0 5
1563: PUSH
1564: LD_VAR 0 5
1568: PUSH
1569: CALL_OW 44
1573: ADD
1574: ST_TO_ADDR
// end ;
1575: GO 1516
1577: POP
1578: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1579: LD_ADDR_EXP 19
1583: PUSH
1584: LD_STRING 1
1586: PPUSH
1587: LD_INT 12
1589: PPUSH
1590: LD_INT 12
1592: PPUSH
1593: LD_INT -5
1595: PUSH
1596: LD_EXP 20
1600: PUSH
1601: LD_INT -2
1603: PUSH
1604: LD_INT -3
1606: PUSH
1607: LD_INT -5
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_VAR 0 5
1621: ADD
1622: PUSH
1623: LD_INT -6
1625: PUSH
1626: LD_INT -4
1628: PUSH
1629: LD_EXP 29
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: ADD
1639: PPUSH
1640: LD_INT 1
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PPUSH
1698: CALL_OW 42
1702: ST_TO_ADDR
// others := tmp diff selected ;
1703: LD_ADDR_VAR 0 8
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 19
1717: DIFF
1718: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1719: LD_ADDR_VAR 0 8
1723: PUSH
1724: LD_VAR 0 8
1728: PUSH
1729: LD_EXP 21
1733: PUSH
1734: LD_EXP 22
1738: PUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_EXP 24
1748: PUSH
1749: LD_EXP 25
1753: PUSH
1754: LD_EXP 26
1758: PUSH
1759: LD_EXP 27
1763: PUSH
1764: LD_EXP 28
1768: PUSH
1769: LD_EXP 30
1773: PUSH
1774: LD_EXP 31
1778: PUSH
1779: LD_EXP 32
1783: PUSH
1784: LD_EXP 33
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: DIFF
1803: ST_TO_ADDR
// if others then
1804: LD_VAR 0 8
1808: IFFALSE 1822
// SaveCharacters ( others , 11_others ) ;
1810: LD_VAR 0 8
1814: PPUSH
1815: LD_STRING 11_others
1817: PPUSH
1818: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1822: LD_ADDR_VAR 0 6
1826: PUSH
1827: LD_INT 3
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: LD_INT 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 4
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 5
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 2
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 7
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 2
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// for i in JMM ^ selected do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_EXP 20
1933: PUSH
1934: LD_EXP 19
1938: ADD
1939: PUSH
1940: FOR_IN
1941: IFFALSE 2130
// begin if GetClass ( i ) = 3 then
1943: LD_VAR 0 2
1947: PPUSH
1948: CALL_OW 257
1952: PUSH
1953: LD_INT 3
1955: EQUAL
1956: IFFALSE 2113
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_VAR 0 6
1967: PUSH
1968: LD_INT 1
1970: ARRAY
1971: PUSH
1972: LD_INT 1
1974: ARRAY
1975: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1976: LD_ADDR_OWVAR 39
1980: PUSH
1981: LD_VAR 0 6
1985: PUSH
1986: LD_INT 1
1988: ARRAY
1989: PUSH
1990: LD_INT 2
1992: ARRAY
1993: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1994: LD_ADDR_OWVAR 38
1998: PUSH
1999: LD_VAR 0 6
2003: PUSH
2004: LD_INT 1
2006: ARRAY
2007: PUSH
2008: LD_INT 3
2010: ARRAY
2011: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2012: LD_ADDR_OWVAR 40
2016: PUSH
2017: LD_VAR 0 6
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PUSH
2026: LD_INT 4
2028: ARRAY
2029: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2030: LD_ADDR_VAR 0 6
2034: PUSH
2035: LD_VAR 0 6
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 3
2047: ST_TO_ADDR
// veh := CreateVehicle ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: CALL_OW 45
2057: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2058: LD_VAR 0 7
2062: PPUSH
2063: LD_INT 8
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_VAR 0 7
2082: PPUSH
2083: CALL_OW 52
// if i = JMM then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_EXP 20
2096: EQUAL
2097: IFFALSE 2111
// SetMark ( veh , 1 ) ;
2099: LD_VAR 0 7
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: CALL_OW 242
// end else
2111: GO 2128
// PlaceUnitArea ( i , am_hum_start , false ) ;
2113: LD_VAR 0 2
2117: PPUSH
2118: LD_INT 9
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 49
// end ;
2128: GO 1940
2130: POP
2131: POP
// vc_chassis := us_medium_tracked ;
2132: LD_ADDR_OWVAR 37
2136: PUSH
2137: LD_INT 3
2139: ST_TO_ADDR
// vc_engine := engine_solar ;
2140: LD_ADDR_OWVAR 39
2144: PUSH
2145: LD_INT 2
2147: ST_TO_ADDR
// vc_control := control_computer ;
2148: LD_ADDR_OWVAR 38
2152: PUSH
2153: LD_INT 3
2155: ST_TO_ADDR
// vc_weapon := us_radar ;
2156: LD_ADDR_OWVAR 40
2160: PUSH
2161: LD_INT 11
2163: ST_TO_ADDR
// veh := CreateVehicle ;
2164: LD_ADDR_VAR 0 7
2168: PUSH
2169: CALL_OW 45
2173: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2174: LD_VAR 0 7
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 142
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 48
// end ; end_of_file
2192: LD_VAR 0 1
2196: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2197: LD_INT 0
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 6
2212: PUSH
2213: LD_INT 7
2215: PUSH
2216: LD_INT 7
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_OWVAR 67
2228: ARRAY
2229: ST_TO_ADDR
// uc_side := 2 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 2
2237: ST_TO_ADDR
// uc_nation := 2 ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 2
2245: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 14
2253: ST_TO_ADDR
// vc_engine := engine_siberite ;
2254: LD_ADDR_OWVAR 39
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// vc_control := control_manual ;
2262: LD_ADDR_OWVAR 38
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2270: LD_ADDR_OWVAR 40
2274: PUSH
2275: LD_INT 31
2277: ST_TO_ADDR
// for i = 1 to 3 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 3
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2376
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_INT 3
2299: PPUSH
2300: LD_VAR 0 5
2304: PPUSH
2305: CALL_OW 380
// un := CreateVehicle ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: CALL_OW 45
2318: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2319: LD_VAR 0 4
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 5
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2339: LD_VAR 0 4
2343: PPUSH
2344: LD_INT 156
2346: PPUSH
2347: LD_INT 15
2349: PPUSH
2350: LD_INT 6
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2360: CALL_OW 44
2364: PPUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: CALL_OW 52
// end ;
2374: GO 2291
2376: POP
2377: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2378: LD_ADDR_EXP 36
2382: PUSH
2383: LD_INT 94
2385: PPUSH
2386: LD_INT 28
2388: PPUSH
2389: LD_STRING dammam
2391: PPUSH
2392: LD_VAR 0 5
2396: PPUSH
2397: LD_INT 10000
2399: PUSH
2400: LD_INT 1000
2402: PUSH
2403: LD_INT 300
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PPUSH
2411: LD_INT 1
2413: NEG
2414: PUSH
2415: LD_INT 5
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL 55944 0 6
2435: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2436: LD_ADDR_EXP 36
2440: PUSH
2441: LD_EXP 36
2445: PUSH
2446: LD_INT 122
2448: PPUSH
2449: LD_INT 25
2451: PPUSH
2452: LD_STRING 
2454: PPUSH
2455: LD_VAR 0 5
2459: PPUSH
2460: LD_INT 500
2462: PUSH
2463: LD_INT 60
2465: PUSH
2466: LD_INT 0
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: PPUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: LD_INT 2
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL 55944 0 6
2497: UNION
2498: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2499: LD_ADDR_EXP 34
2503: PUSH
2504: LD_INT 45
2506: PPUSH
2507: LD_INT 24
2509: PPUSH
2510: LD_STRING jeddah
2512: PPUSH
2513: LD_VAR 0 5
2517: PPUSH
2518: LD_INT 700
2520: PUSH
2521: LD_INT 300
2523: PUSH
2524: LD_INT 10
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PPUSH
2532: LD_INT 1
2534: NEG
2535: PUSH
2536: LD_INT 5
2538: PUSH
2539: LD_INT 3
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL 55944 0 6
2555: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2556: LD_ADDR_EXP 35
2560: PUSH
2561: LD_INT 7
2563: PPUSH
2564: LD_INT 27
2566: PPUSH
2567: LD_STRING riyadh
2569: PPUSH
2570: LD_VAR 0 5
2574: PPUSH
2575: LD_INT 500
2577: PUSH
2578: LD_INT 60
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: PPUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL 55944 0 6
2611: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2612: LD_ADDR_EXP 38
2616: PUSH
2617: LD_INT 204
2619: PPUSH
2620: LD_INT 26
2622: PPUSH
2623: LD_STRING 
2625: PPUSH
2626: LD_VAR 0 5
2630: PPUSH
2631: LD_INT 500
2633: PUSH
2634: LD_INT 50
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: LD_INT 1
2647: NEG
2648: PUSH
2649: LD_INT 3
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL 55944 0 6
2668: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2669: LD_ADDR_EXP 49
2673: PUSH
2674: LD_EXP 36
2678: PUSH
2679: LD_EXP 34
2683: PUSH
2684: LD_EXP 38
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 31
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 58
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2861
// begin if GetBase ( i ) then
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 274
2747: IFFALSE 2751
// continue ;
2749: GO 2735
// d := GetDir ( i ) ;
2751: LD_ADDR_VAR 0 3
2755: PUSH
2756: LD_VAR 0 2
2760: PPUSH
2761: CALL_OW 254
2765: ST_TO_ADDR
// if d < 3 then
2766: LD_VAR 0 3
2770: PUSH
2771: LD_INT 3
2773: LESS
2774: IFFALSE 2792
// d := d + 3 else
2776: LD_ADDR_VAR 0 3
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: PLUS
2789: ST_TO_ADDR
2790: GO 2806
// d := d - 3 ;
2792: LD_ADDR_VAR 0 3
2796: PUSH
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 3
2804: MINUS
2805: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2806: LD_INT 0
2808: PPUSH
2809: LD_INT 8
2811: PPUSH
2812: LD_VAR 0 5
2816: PPUSH
2817: CALL_OW 380
// un := CreateHuman ;
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: CALL_OW 44
2830: ST_TO_ADDR
// SetDir ( un , d ) ;
2831: LD_VAR 0 4
2835: PPUSH
2836: LD_VAR 0 3
2840: PPUSH
2841: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2845: LD_VAR 0 4
2849: PPUSH
2850: LD_VAR 0 2
2854: PPUSH
2855: CALL_OW 52
// end ;
2859: GO 2735
2861: POP
2862: POP
// if Difficulty > 1 then
2863: LD_OWVAR 67
2867: PUSH
2868: LD_INT 1
2870: GREATER
2871: IFFALSE 3242
// begin ar_kamikadze := [ ] ;
2873: LD_ADDR_EXP 41
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_VAR 0 5
2890: PPUSH
2891: CALL_OW 380
// un := CreateHuman ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2917: LD_VAR 0 4
2921: PPUSH
2922: LD_INT 23
2924: PPUSH
2925: LD_INT 44
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 48
// ComCrawl ( un ) ;
2935: LD_VAR 0 4
2939: PPUSH
2940: CALL_OW 137
// un := CreateHuman ;
2944: LD_ADDR_VAR 0 4
2948: PUSH
2949: CALL_OW 44
2953: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2954: LD_VAR 0 4
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 30
2973: PPUSH
2974: LD_INT 39
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 48
// ComCrawl ( un ) ;
2984: LD_VAR 0 4
2988: PPUSH
2989: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2993: LD_INT 0
2995: PPUSH
2996: LD_INT 17
2998: PPUSH
2999: LD_VAR 0 5
3003: PPUSH
3004: CALL_OW 380
// un := CreateHuman ;
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: CALL_OW 44
3017: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3018: LD_VAR 0 4
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3030: LD_VAR 0 4
3034: PPUSH
3035: LD_INT 45
3037: PPUSH
3038: LD_INT 86
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 48
// ComHold ( un ) ;
3048: LD_VAR 0 4
3052: PPUSH
3053: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3057: LD_ADDR_EXP 41
3061: PUSH
3062: LD_EXP 41
3066: PPUSH
3067: LD_EXP 41
3071: PUSH
3072: LD_INT 1
3074: PLUS
3075: PPUSH
3076: LD_VAR 0 4
3080: PPUSH
3081: CALL_OW 1
3085: ST_TO_ADDR
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3108: LD_VAR 0 4
3112: PPUSH
3113: LD_INT 60
3115: PPUSH
3116: LD_INT 85
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: CALL_OW 48
// ComHold ( un ) ;
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3135: LD_ADDR_EXP 41
3139: PUSH
3140: LD_EXP 41
3144: PPUSH
3145: LD_EXP 41
3149: PUSH
3150: LD_INT 1
3152: PLUS
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 1
3163: ST_TO_ADDR
// un := CreateHuman ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 222
3193: PPUSH
3194: LD_INT 166
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 48
// ComHold ( un ) ;
3204: LD_VAR 0 4
3208: PPUSH
3209: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3213: LD_ADDR_EXP 41
3217: PUSH
3218: LD_EXP 41
3222: PPUSH
3223: LD_EXP 41
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: CALL_OW 1
3241: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3242: LD_ADDR_EXP 39
3246: PUSH
3247: EMPTY
3248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3264: LD_ADDR_OWVAR 26
3268: PUSH
3269: LD_STRING Pavel Grigorovic
3271: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3272: LD_ADDR_OWVAR 33
3276: PUSH
3277: LD_STRING SecondCharsGal
3279: ST_TO_ADDR
// hc_face_number := 4 ;
3280: LD_ADDR_OWVAR 34
3284: PUSH
3285: LD_INT 4
3287: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3288: LD_ADDR_EXP 39
3292: PUSH
3293: LD_EXP 39
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 44
3305: PPUSH
3306: CALL_OW 1
3310: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3311: LD_INT 2
3313: PPUSH
3314: LD_INT 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: CALL_OW 380
// hc_name := Lucy Sebel ;
3326: LD_ADDR_OWVAR 26
3330: PUSH
3331: LD_STRING Lucy Sebel
3333: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3334: LD_ADDR_OWVAR 33
3338: PUSH
3339: LD_STRING SecondCharsGal
3341: ST_TO_ADDR
// hc_face_number := 15 ;
3342: LD_ADDR_OWVAR 34
3346: PUSH
3347: LD_INT 15
3349: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3350: LD_ADDR_EXP 39
3354: PUSH
3355: LD_EXP 39
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 44
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3373: LD_INT 2
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_VAR 0 5
3383: PPUSH
3384: CALL_OW 380
// hc_gallery :=  ;
3388: LD_ADDR_OWVAR 33
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_name :=  ;
3396: LD_ADDR_OWVAR 26
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3404: LD_ADDR_EXP 39
3408: PUSH
3409: LD_EXP 39
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 44
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// hc_sex := sex_male ;
3427: LD_ADDR_OWVAR 27
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_class = 11 ;
3435: LD_ADDR_OWVAR 28
3439: PUSH
3440: LD_INT 11
3442: ST_TO_ADDR
// hc_gallery = sandar ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING sandar
3450: ST_TO_ADDR
// hc_face_number = 33 ;
3451: LD_ADDR_OWVAR 34
3455: PUSH
3456: LD_INT 33
3458: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3459: LD_ADDR_OWVAR 26
3463: PUSH
3464: LD_STRING Thabit Muhair Saliba
3466: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3467: LD_ADDR_OWVAR 31
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: ST_TO_ADDR
// Saliba = CreateHuman ;
3490: LD_ADDR_EXP 43
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3500: LD_EXP 43
3504: PPUSH
3505: LD_INT 7
3507: PPUSH
3508: CALL_OW 52
// if gensher_active then
3512: LD_EXP 18
3516: IFFALSE 3543
// begin Gensher = NewCharacter ( Dietrich ) ;
3518: LD_ADDR_EXP 44
3522: PUSH
3523: LD_STRING Dietrich
3525: PPUSH
3526: CALL_OW 25
3530: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3531: LD_EXP 44
3535: PPUSH
3536: LD_INT 94
3538: PPUSH
3539: CALL_OW 52
// end ; InitHc ;
3543: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3547: LD_ADDR_EXP 40
3551: PUSH
3552: EMPTY
3553: ST_TO_ADDR
// for i = 1 to 5 do
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: DOUBLE
3560: LD_INT 1
3562: DEC
3563: ST_TO_ADDR
3564: LD_INT 5
3566: PUSH
3567: FOR_TO
3568: IFFALSE 3740
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3570: LD_INT 13
3572: PUSH
3573: LD_INT 14
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 1
3582: PPUSH
3583: LD_INT 2
3585: PPUSH
3586: CALL_OW 12
3590: ARRAY
3591: PPUSH
3592: LD_INT 1
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 1
3604: PPUSH
3605: LD_INT 2
3607: PPUSH
3608: CALL_OW 12
3612: ARRAY
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 25
3619: PUSH
3620: LD_INT 27
3622: PUSH
3623: LD_INT 26
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: LD_INT 60
3645: PPUSH
3646: LD_INT 100
3648: PPUSH
3649: CALL_OW 12
3653: PPUSH
3654: CALL 52535 0 5
// un := CreateVehicle ;
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: CALL_OW 45
3667: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3668: LD_ADDR_EXP 40
3672: PUSH
3673: LD_EXP 40
3677: PPUSH
3678: LD_EXP 40
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3697: LD_VAR 0 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: LD_INT 5
3707: PPUSH
3708: CALL_OW 12
3712: PPUSH
3713: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3717: LD_VAR 0 4
3721: PPUSH
3722: LD_INT 124
3724: PPUSH
3725: LD_INT 141
3727: PPUSH
3728: LD_INT 8
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 50
// end ;
3738: GO 3567
3740: POP
3741: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3742: LD_ADDR_EXP 42
3746: PUSH
3747: EMPTY
3748: PUSH
3749: EMPTY
3750: PUSH
3751: EMPTY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3758: LD_ADDR_VAR 0 3
3762: PUSH
3763: DOUBLE
3764: LD_INT 1
3766: DEC
3767: ST_TO_ADDR
3768: LD_INT 3
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_OWVAR 67
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 4003
// for i = 1 to 3 do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 3
3803: PUSH
3804: FOR_TO
3805: IFFALSE 3999
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3807: LD_INT 14
3809: PPUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 5
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 2
3847: PPUSH
3848: CALL_OW 12
3852: ARRAY
3853: PPUSH
3854: LD_INT 25
3856: PUSH
3857: LD_INT 27
3859: PUSH
3860: LD_INT 26
3862: PUSH
3863: LD_INT 28
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 1
3874: PPUSH
3875: LD_INT 4
3877: PPUSH
3878: CALL_OW 12
3882: ARRAY
3883: PPUSH
3884: LD_INT 100
3886: PPUSH
3887: CALL 52535 0 5
// un := CreateVehicle ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: CALL_OW 45
3900: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3901: LD_ADDR_EXP 42
3905: PUSH
3906: LD_EXP 42
3910: PPUSH
3911: LD_VAR 0 2
3915: PUSH
3916: LD_EXP 42
3920: PUSH
3921: LD_VAR 0 2
3925: ARRAY
3926: PUSH
3927: LD_INT 1
3929: PLUS
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: CALL 52657 0 3
3944: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 5
3955: PPUSH
3956: CALL_OW 12
3960: PPUSH
3961: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_INT 20
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 49
// end ;
3997: GO 3804
3999: POP
4000: POP
4001: GO 3788
4003: POP
4004: POP
// InitHc ;
4005: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4009: LD_INT 4
4011: PPUSH
4012: LD_INT 5
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 58
// end ;
4028: LD_VAR 0 1
4032: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4033: LD_EXP 41
4037: IFFALSE 4111
4039: GO 4041
4041: DISABLE
4042: LD_INT 0
4044: PPUSH
// begin enable ;
4045: ENABLE
// for i in ar_kamikadze do
4046: LD_ADDR_VAR 0 1
4050: PUSH
4051: LD_EXP 41
4055: PUSH
4056: FOR_IN
4057: IFFALSE 4109
// if See ( 1 , i ) then
4059: LD_INT 1
4061: PPUSH
4062: LD_VAR 0 1
4066: PPUSH
4067: CALL_OW 292
4071: IFFALSE 4107
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PPUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 74
4102: PPUSH
4103: CALL_OW 115
4107: GO 4056
4109: POP
4110: POP
// end ;
4111: PPOPN 1
4113: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4114: LD_EXP 13
4118: IFFALSE 4435
4120: GO 4122
4122: DISABLE
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
4127: PPUSH
4128: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4129: LD_INT 35
4131: PPUSH
4132: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4136: LD_INT 1
4138: PPUSH
4139: CALL 40318 0 1
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: IFFALSE 4129
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 14
4154: PUSH
4155: LD_INT 3
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 32
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: EMPTY
4171: LIST
4172: PPUSH
4173: CALL 39922 0 2
// repeat wait ( 0 0$1 ) ;
4177: LD_INT 35
4179: PPUSH
4180: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4184: LD_EXP 68
4188: PUSH
4189: LD_INT 1
4191: ARRAY
4192: PPUSH
4193: LD_INT 33
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 34
4205: PUSH
4206: LD_INT 32
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 72
4221: IFFALSE 4177
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: LD_EXP 68
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PPUSH
4237: LD_INT 33
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 34
4249: PUSH
4250: LD_INT 32
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 72
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL_OW 469
4282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: LD_INT 5
4297: PPUSH
4298: CALL_OW 469
4302: ST_TO_ADDR
// tmp := 100 ;
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 100
4310: ST_TO_ADDR
// if pos then
4311: LD_VAR 0 4
4315: IFFALSE 4355
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 2
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: PPUSH
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: ARRAY
4342: PPUSH
4343: LD_INT 20
4345: PPUSH
4346: CALL 53553 0 4
4350: PUSH
4351: LD_INT 4
4353: ARRAY
4354: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4355: LD_VAR 0 4
4359: PUSH
4360: LD_EXP 14
4364: NOT
4365: AND
4366: PUSH
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 10
4374: LESS
4375: AND
4376: IFFALSE 4283
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4378: LD_VAR 0 2
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 1
4390: ARRAY
4391: PPUSH
4392: LD_VAR 0 4
4396: PUSH
4397: LD_INT 2
4399: ARRAY
4400: PPUSH
4401: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4405: LD_VAR 0 2
4409: PPUSH
4410: LD_INT 198
4412: PPUSH
4413: LD_INT 113
4415: PPUSH
4416: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4420: LD_VAR 0 2
4424: PPUSH
4425: LD_INT 124
4427: PPUSH
4428: LD_INT 7
4430: PPUSH
4431: CALL_OW 171
// end ;
4435: PPOPN 4
4437: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4438: LD_EXP 6
4442: IFFALSE 7099
4444: GO 4446
4446: DISABLE
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 5
4464: PUSH
4465: LD_INT 6
4467: PUSH
4468: LD_INT 7
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_OWVAR 67
4480: ARRAY
4481: ST_TO_ADDR
// coords := [ ] ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: EMPTY
4488: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4489: LD_ADDR_VAR 0 6
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 14
4541: PUSH
4542: LD_INT 1
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 28
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 14
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: LD_INT 25
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 14
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: LD_INT 2
4583: PUSH
4584: LD_INT 28
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 14
4595: PUSH
4596: LD_INT 1
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: LD_INT 29
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL 39922 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4621: LD_INT 21000
4623: PUSH
4624: LD_INT 19950
4626: PUSH
4627: LD_INT 18900
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_OWVAR 67
4639: ARRAY
4640: PPUSH
4641: CALL_OW 67
// InitHc ;
4645: CALL_OW 19
// InitUc ;
4649: CALL_OW 18
// uc_side := 2 ;
4653: LD_ADDR_OWVAR 20
4657: PUSH
4658: LD_INT 2
4660: ST_TO_ADDR
// uc_nation := 2 ;
4661: LD_ADDR_OWVAR 21
4665: PUSH
4666: LD_INT 2
4668: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: EMPTY
4675: PUSH
4676: EMPTY
4677: PUSH
4678: EMPTY
4679: PUSH
4680: EMPTY
4681: PUSH
4682: EMPTY
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: LD_EXP 68
4708: PUSH
4709: LD_INT 1
4711: ARRAY
4712: PUSH
4713: LD_INT 34
4715: PUSH
4716: LD_INT 32
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: DIFF
4728: PPUSH
4729: CALL_OW 1
4733: ST_TO_ADDR
// for i = 1 to Difficulty do
4734: LD_ADDR_VAR 0 1
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_OWVAR 67
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4888
// begin uc_side := 2 ;
4752: LD_ADDR_OWVAR 20
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// uc_nation := 2 ;
4760: LD_ADDR_OWVAR 21
4764: PUSH
4765: LD_INT 2
4767: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4768: LD_INT 13
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 5
4776: PPUSH
4777: LD_INT 29
4779: PPUSH
4780: LD_INT 100
4782: PPUSH
4783: CALL 52535 0 5
// un := CreateVehicle ;
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: CALL_OW 45
4796: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PUSH
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 1
4817: ARRAY
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: CALL 52657 0 3
4836: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_INT 3
4844: PPUSH
4845: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4849: LD_VAR 0 2
4853: PPUSH
4854: LD_INT 16
4856: PPUSH
4857: LD_INT 0
4859: PPUSH
4860: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4864: LD_VAR 0 2
4868: PPUSH
4869: LD_INT 51
4871: PPUSH
4872: LD_INT 10
4874: PPUSH
4875: CALL_OW 111
// wait ( 0 0$2 ) ;
4879: LD_INT 70
4881: PPUSH
4882: CALL_OW 67
// end ;
4886: GO 4749
4888: POP
4889: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4890: LD_ADDR_VAR 0 5
4894: PUSH
4895: LD_INT 51
4897: PUSH
4898: LD_INT 24
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 75
4907: PUSH
4908: LD_INT 90
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4919: LD_INT 1
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_VAR 0 6
4940: PPUSH
4941: CALL 40155 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_OWVAR 67
4973: ARRAY
4974: PUSH
4975: FOR_TO
4976: IFFALSE 5076
// begin uc_side := 2 ;
4978: LD_ADDR_OWVAR 20
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// uc_nation := 2 ;
4986: LD_ADDR_OWVAR 21
4990: PUSH
4991: LD_INT 2
4993: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4994: LD_INT 0
4996: PPUSH
4997: LD_INT 17
4999: PPUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: CALL_OW 380
// un := CreateHuman ;
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_INT 2
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: LD_INT 2
5039: ARRAY
5040: PUSH
5041: LD_INT 1
5043: PLUS
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PPUSH
5049: LD_VAR 0 2
5053: PPUSH
5054: CALL 52657 0 3
5058: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_INT 13
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: CALL_OW 49
// end ;
5074: GO 4975
5076: POP
5077: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5078: LD_ADDR_VAR 0 1
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_INT 2
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_OWVAR 67
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5228
// begin uc_side := 2 ;
5111: LD_ADDR_OWVAR 20
5115: PUSH
5116: LD_INT 2
5118: ST_TO_ADDR
// uc_nation := 2 ;
5119: LD_ADDR_OWVAR 21
5123: PUSH
5124: LD_INT 2
5126: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 1
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 1
5142: PPUSH
5143: LD_INT 2
5145: PPUSH
5146: CALL_OW 12
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 4
5156: PPUSH
5157: CALL_OW 380
// un := CreateHuman ;
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: CALL_OW 44
5170: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 2
5191: ARRAY
5192: PUSH
5193: LD_INT 1
5195: PLUS
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: LD_VAR 0 2
5205: PPUSH
5206: CALL 52657 0 3
5210: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5211: LD_VAR 0 2
5215: PPUSH
5216: LD_INT 13
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 49
// end ;
5226: GO 5108
5228: POP
5229: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_INT 67
5237: PUSH
5238: LD_INT 112
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 85
5247: PUSH
5248: LD_INT 130
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5259: LD_INT 2
5261: PPUSH
5262: LD_VAR 0 3
5266: PUSH
5267: LD_INT 2
5269: ARRAY
5270: PPUSH
5271: LD_VAR 0 5
5275: PPUSH
5276: LD_VAR 0 6
5280: PPUSH
5281: CALL 40155 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5285: LD_ADDR_VAR 0 1
5289: PUSH
5290: DOUBLE
5291: LD_INT 1
5293: DEC
5294: ST_TO_ADDR
5295: LD_INT 1
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: LD_OWVAR 67
5313: ARRAY
5314: PUSH
5315: FOR_TO
5316: IFFALSE 5416
// begin uc_side := 2 ;
5318: LD_ADDR_OWVAR 20
5322: PUSH
5323: LD_INT 2
5325: ST_TO_ADDR
// uc_nation := 2 ;
5326: LD_ADDR_OWVAR 21
5330: PUSH
5331: LD_INT 2
5333: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5334: LD_INT 0
5336: PPUSH
5337: LD_INT 17
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 380
// un := CreateHuman ;
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 3
5371: PUSH
5372: LD_VAR 0 3
5376: PUSH
5377: LD_INT 3
5379: ARRAY
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 52657 0 3
5398: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5399: LD_VAR 0 2
5403: PPUSH
5404: LD_INT 14
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: GO 5315
5416: POP
5417: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5418: LD_ADDR_VAR 0 5
5422: PUSH
5423: LD_INT 148
5425: PUSH
5426: LD_INT 158
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 148
5435: PUSH
5436: LD_INT 158
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5447: LD_INT 3
5449: PPUSH
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 3
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: LD_VAR 0 6
5468: PPUSH
5469: CALL 40155 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5473: LD_ADDR_VAR 0 1
5477: PUSH
5478: DOUBLE
5479: LD_INT 1
5481: DEC
5482: ST_TO_ADDR
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PUSH
5497: LD_OWVAR 67
5501: ARRAY
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5728
// begin uc_side := 2 ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// uc_nation := 2 ;
5514: LD_ADDR_OWVAR 21
5518: PUSH
5519: LD_INT 2
5521: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5522: LD_INT 14
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 5
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 12
5548: ARRAY
5549: PPUSH
5550: LD_INT 27
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 28
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: CALL_OW 12
5574: ARRAY
5575: PPUSH
5576: LD_INT 100
5578: PPUSH
5579: CALL 52535 0 5
// un := CreateVehicle ;
5583: LD_ADDR_VAR 0 2
5587: PUSH
5588: CALL_OW 45
5592: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_INT 4
5605: PUSH
5606: LD_VAR 0 3
5610: PUSH
5611: LD_INT 4
5613: ARRAY
5614: PUSH
5615: LD_INT 1
5617: PLUS
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: CALL 52657 0 3
5632: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_INT 5
5640: PPUSH
5641: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 15
5652: PPUSH
5653: LD_INT 0
5655: PPUSH
5656: CALL_OW 49
// if GetControl ( un ) = control_manual then
5660: LD_VAR 0 2
5664: PPUSH
5665: CALL_OW 263
5669: PUSH
5670: LD_INT 1
5672: EQUAL
5673: IFFALSE 5704
// begin PrepareHuman ( false , 3 , skill ) ;
5675: LD_INT 0
5677: PPUSH
5678: LD_INT 3
5680: PPUSH
5681: LD_VAR 0 4
5685: PPUSH
5686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5690: CALL_OW 44
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_INT 179
5711: PPUSH
5712: LD_INT 135
5714: PPUSH
5715: CALL_OW 111
// wait ( 0 0$2 ) ;
5719: LD_INT 70
5721: PPUSH
5722: CALL_OW 67
// end ;
5726: GO 5503
5728: POP
5729: POP
// vc_chassis := 15 ;
5730: LD_ADDR_OWVAR 37
5734: PUSH
5735: LD_INT 15
5737: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_VAR 0 3
5747: PPUSH
5748: LD_INT 4
5750: PUSH
5751: LD_VAR 0 3
5755: PUSH
5756: LD_INT 4
5758: ARRAY
5759: PUSH
5760: LD_INT 1
5762: PLUS
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PPUSH
5768: CALL_OW 45
5772: PPUSH
5773: CALL 52657 0 3
5777: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 4
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_INT 4
5794: ARRAY
5795: ARRAY
5796: PPUSH
5797: LD_INT 15
5799: PPUSH
5800: LD_INT 0
5802: PPUSH
5803: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5807: LD_INT 0
5809: PPUSH
5810: LD_INT 11
5812: PPUSH
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 4
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 4
5842: ARRAY
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 44
5856: PPUSH
5857: CALL 52657 0 3
5861: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 4
5869: ARRAY
5870: PUSH
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 4
5878: ARRAY
5879: ARRAY
5880: PPUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 4
5888: ARRAY
5889: PUSH
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 4
5897: ARRAY
5898: PUSH
5899: LD_INT 1
5901: MINUS
5902: ARRAY
5903: PPUSH
5904: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5908: LD_ADDR_VAR 0 5
5912: PUSH
5913: LD_INT 148
5915: PUSH
5916: LD_INT 140
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5926: LD_INT 1
5928: PPUSH
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 4
5936: ARRAY
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL 40155 0 4
// if gensher_active then
5952: LD_EXP 18
5956: IFFALSE 6341
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5958: LD_EXP 44
5962: PPUSH
5963: LD_STRING D10-Diet-1
5965: PPUSH
5966: CALL_OW 94
// for i = 1 to 2 do
5970: LD_ADDR_VAR 0 1
5974: PUSH
5975: DOUBLE
5976: LD_INT 1
5978: DEC
5979: ST_TO_ADDR
5980: LD_INT 2
5982: PUSH
5983: FOR_TO
5984: IFFALSE 6122
// begin uc_side := 2 ;
5986: LD_ADDR_OWVAR 20
5990: PUSH
5991: LD_INT 2
5993: ST_TO_ADDR
// uc_nation := 2 ;
5994: LD_ADDR_OWVAR 21
5998: PUSH
5999: LD_INT 2
6001: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6002: LD_INT 13
6004: PPUSH
6005: LD_INT 3
6007: PPUSH
6008: LD_INT 5
6010: PPUSH
6011: LD_INT 29
6013: PPUSH
6014: LD_INT 100
6016: PPUSH
6017: CALL 52535 0 5
// un := CreateVehicle ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: CALL_OW 45
6030: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 5
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 5
6051: ARRAY
6052: PUSH
6053: LD_INT 1
6055: PLUS
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PPUSH
6061: LD_VAR 0 2
6065: PPUSH
6066: CALL 52657 0 3
6070: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 23
6090: PPUSH
6091: LD_INT 0
6093: PPUSH
6094: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 85
6105: PPUSH
6106: LD_INT 152
6108: PPUSH
6109: CALL_OW 111
// wait ( 0 0$2 ) ;
6113: LD_INT 70
6115: PPUSH
6116: CALL_OW 67
// end ;
6120: GO 5983
6122: POP
6123: POP
// for i = 1 to 3 do
6124: LD_ADDR_VAR 0 1
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_INT 3
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6295
// begin uc_side := 2 ;
6140: LD_ADDR_OWVAR 20
6144: PUSH
6145: LD_INT 2
6147: ST_TO_ADDR
// uc_nation := 2 ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_INT 2
6155: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6156: LD_INT 14
6158: PPUSH
6159: LD_INT 3
6161: PPUSH
6162: LD_INT 5
6164: PPUSH
6165: LD_INT 27
6167: PUSH
6168: LD_INT 28
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 1
6177: PPUSH
6178: LD_INT 2
6180: PPUSH
6181: CALL_OW 12
6185: ARRAY
6186: PPUSH
6187: LD_INT 100
6189: PPUSH
6190: CALL 52535 0 5
// un := CreateVehicle ;
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: CALL_OW 45
6203: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6204: LD_ADDR_VAR 0 3
6208: PUSH
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_INT 5
6216: PUSH
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 5
6224: ARRAY
6225: PUSH
6226: LD_INT 1
6228: PLUS
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: CALL 52657 0 3
6243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6256: LD_VAR 0 2
6260: PPUSH
6261: LD_INT 23
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_INT 85
6278: PPUSH
6279: LD_INT 152
6281: PPUSH
6282: CALL_OW 111
// wait ( 0 0$2 ) ;
6286: LD_INT 70
6288: PPUSH
6289: CALL_OW 67
// end ;
6293: GO 6137
6295: POP
6296: POP
// coords := [ [ 97 , 143 ] ] ;
6297: LD_ADDR_VAR 0 5
6301: PUSH
6302: LD_INT 97
6304: PUSH
6305: LD_INT 143
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6315: LD_INT 1
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 5
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 5
6331: PPUSH
6332: LD_VAR 0 6
6336: PPUSH
6337: CALL 40155 0 4
// end ; Wait ( 13 13$00 ) ;
6341: LD_INT 27300
6343: PPUSH
6344: CALL_OW 67
// tmp := [ ] ;
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: EMPTY
6354: ST_TO_ADDR
// w := 1 ;
6355: LD_ADDR_VAR 0 7
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// repeat tmp := [ ] ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: EMPTY
6369: ST_TO_ADDR
// if w mod 4 = 0 then
6370: LD_VAR 0 7
6374: PUSH
6375: LD_INT 4
6377: MOD
6378: PUSH
6379: LD_INT 0
6381: EQUAL
6382: IFFALSE 6469
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6384: LD_ADDR_VAR 0 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 24
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 11
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 24
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 24
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: ST_TO_ADDR
6467: GO 6571
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6469: LD_ADDR_VAR 0 8
6473: PUSH
6474: LD_INT 14
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 28
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 14
6494: PUSH
6495: LD_INT 1
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 14
6512: PUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 28
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 29
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 11
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 24
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// if w mod 3 = 0 then
6571: LD_VAR 0 7
6575: PUSH
6576: LD_INT 3
6578: MOD
6579: PUSH
6580: LD_INT 0
6582: EQUAL
6583: IFFALSE 6659
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6585: LD_ADDR_VAR 0 8
6589: PUSH
6590: LD_VAR 0 8
6594: PPUSH
6595: LD_INT 1
6597: PUSH
6598: LD_VAR 0 8
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: LD_INT 14
6619: PUSH
6620: LD_INT 1
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 28
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 1
6638: PPUSH
6639: LD_INT 2
6641: PPUSH
6642: CALL_OW 12
6646: ARRAY
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL 52657 0 3
6658: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6659: LD_INT 1
6661: PPUSH
6662: LD_VAR 0 8
6666: PPUSH
6667: CALL 39922 0 2
// if GetSide ( ar_dep_w ) = 2 then
6671: LD_INT 45
6673: PPUSH
6674: CALL_OW 255
6678: PUSH
6679: LD_INT 2
6681: EQUAL
6682: IFFALSE 6767
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6684: LD_ADDR_VAR 0 8
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 28
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 14
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 27
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 27
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_VAR 0 8
6755: PPUSH
6756: CALL 39922 0 2
// wait ( 0 0$50 ) ;
6760: LD_INT 1750
6762: PPUSH
6763: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6774: LD_EXP 68
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: LD_INT 3
6785: PUSH
6786: LD_INT 34
6788: PUSH
6789: LD_INT 32
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 72
6804: PUSH
6805: LD_INT 4
6807: GREATEREQUAL
6808: IFFALSE 6767
// wait ( 0 0$10 ) ;
6810: LD_INT 350
6812: PPUSH
6813: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_EXP 68
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 34
6836: PUSH
6837: LD_INT 32
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 72
6852: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6853: LD_INT 100
6855: PPUSH
6856: CALL_OW 13
6860: PUSH
6861: LD_INT 50
6863: LESS
6864: IFFALSE 6897
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6866: LD_ADDR_VAR 0 5
6870: PUSH
6871: LD_INT 55
6873: PUSH
6874: LD_INT 7
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 75
6883: PUSH
6884: LD_INT 90
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 6926
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_INT 128
6904: PUSH
6905: LD_INT 94
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 180
6914: PUSH
6915: LD_INT 135
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: ST_TO_ADDR
// if w mod 4 = 0 then
6926: LD_VAR 0 7
6930: PUSH
6931: LD_INT 4
6933: MOD
6934: PUSH
6935: LD_INT 0
6937: EQUAL
6938: IFFALSE 6969
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6940: LD_ADDR_VAR 0 5
6944: PUSH
6945: LD_INT 91
6947: PUSH
6948: LD_INT 58
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 117
6957: PUSH
6958: LD_INT 107
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6969: LD_INT 1
6971: PPUSH
6972: LD_VAR 0 3
6976: PPUSH
6977: LD_VAR 0 5
6981: PPUSH
6982: LD_VAR 0 6
6986: PPUSH
6987: CALL 40155 0 4
// if mc_vehicles [ 2 ] then
6991: LD_EXP 68
6995: PUSH
6996: LD_INT 2
6998: ARRAY
6999: IFFALSE 7035
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7001: LD_INT 2
7003: PPUSH
7004: LD_EXP 68
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: LD_INT 73
7015: PUSH
7016: LD_INT 115
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: PPUSH
7026: LD_VAR 0 6
7030: PPUSH
7031: CALL 40155 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7035: LD_INT 22050
7037: PPUSH
7038: LD_INT 28350
7040: PPUSH
7041: CALL_OW 12
7045: PPUSH
7046: CALL_OW 67
// w := w + 1 ;
7050: LD_ADDR_VAR 0 7
7054: PUSH
7055: LD_VAR 0 7
7059: PUSH
7060: LD_INT 1
7062: PLUS
7063: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7064: LD_INT 94
7066: PPUSH
7067: CALL_OW 301
7071: PUSH
7072: LD_EXP 49
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PPUSH
7081: LD_INT 30
7083: PUSH
7084: LD_INT 3
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: NOT
7096: OR
7097: IFFALSE 6363
// end ;
7099: PPOPN 8
7101: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7102: LD_INT 204
7104: IFFALSE 7578
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
// begin enable ;
7115: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7116: LD_INT 35
7118: PPUSH
7119: LD_INT 1190
7121: PPUSH
7122: CALL_OW 12
7126: PPUSH
7127: CALL_OW 67
// tmp := [ ] ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: EMPTY
7137: ST_TO_ADDR
// uc_side := 8 ;
7138: LD_ADDR_OWVAR 20
7142: PUSH
7143: LD_INT 8
7145: ST_TO_ADDR
// uc_nation := 2 ;
7146: LD_ADDR_OWVAR 21
7150: PUSH
7151: LD_INT 2
7153: ST_TO_ADDR
// InitHc ;
7154: CALL_OW 19
// for i = 1 to 3 do
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_INT 3
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7299
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7174: LD_INT 13
7176: PUSH
7177: LD_INT 14
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 1
7186: PPUSH
7187: LD_INT 2
7189: PPUSH
7190: CALL_OW 12
7194: ARRAY
7195: PPUSH
7196: LD_INT 3
7198: PPUSH
7199: LD_INT 5
7201: PPUSH
7202: LD_INT 27
7204: PUSH
7205: LD_INT 28
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 1
7214: PPUSH
7215: LD_INT 2
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 100
7226: PPUSH
7227: CALL 52535 0 5
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 4
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7253: LD_VAR 0 3
7257: PPUSH
7258: LD_INT 15
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_VAR 0 2
7277: PPUSH
7278: LD_VAR 0 2
7282: PUSH
7283: LD_INT 1
7285: PLUS
7286: PPUSH
7287: LD_VAR 0 3
7291: PPUSH
7292: CALL_OW 1
7296: ST_TO_ADDR
// end ;
7297: GO 7171
7299: POP
7300: POP
// for i = 1 to 4 do
7301: LD_ADDR_VAR 0 1
7305: PUSH
7306: DOUBLE
7307: LD_INT 1
7309: DEC
7310: ST_TO_ADDR
7311: LD_INT 4
7313: PUSH
7314: FOR_TO
7315: IFFALSE 7394
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7317: LD_INT 0
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: LD_INT 4
7325: PPUSH
7326: CALL_OW 12
7330: PPUSH
7331: LD_INT 6
7333: PPUSH
7334: CALL_OW 380
// un := CreateHuman ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: CALL_OW 44
7347: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7348: LD_VAR 0 3
7352: PPUSH
7353: LD_INT 15
7355: PPUSH
7356: LD_INT 0
7358: PPUSH
7359: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_INT 1
7380: PLUS
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 1
7391: ST_TO_ADDR
// end ;
7392: GO 7314
7394: POP
7395: POP
// wait ( 0 0$3 ) ;
7396: LD_INT 105
7398: PPUSH
7399: CALL_OW 67
// for i in tmp do
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 2
7412: PUSH
7413: FOR_IN
7414: IFFALSE 7482
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 257
7425: PUSH
7426: LD_INT 1
7428: EQUAL
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 247
7439: PUSH
7440: LD_INT 2
7442: EQUAL
7443: OR
7444: IFFALSE 7480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_INT 81
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 69
7465: PPUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 74
7475: PPUSH
7476: CALL_OW 115
7480: GO 7413
7482: POP
7483: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7484: LD_VAR 0 2
7488: PPUSH
7489: LD_INT 210
7491: PPUSH
7492: LD_INT 178
7494: PPUSH
7495: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7499: LD_ADDR_VAR 0 4
7503: PUSH
7504: LD_INT 10
7506: PPUSH
7507: LD_INT 22
7509: PUSH
7510: LD_INT 8
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 70
7521: ST_TO_ADDR
// if x then
7522: LD_VAR 0 4
7526: IFFALSE 7554
// for i in x do
7528: LD_ADDR_VAR 0 1
7532: PUSH
7533: LD_VAR 0 4
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7552
// RemoveUnit ( i ) ;
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 64
7550: GO 7538
7552: POP
7553: POP
// wait ( 0 0$1 ) ;
7554: LD_INT 35
7556: PPUSH
7557: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 8
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: NOT
7576: IFFALSE 7484
// end ;
7578: PPOPN 4
7580: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7581: LD_INT 22
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 34
7593: PUSH
7594: LD_INT 31
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 24
7606: PUSH
7607: LD_INT 1000
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: IFFALSE 7671
7629: GO 7631
7631: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7632: LD_INT 22
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 34
7644: PUSH
7645: LD_INT 31
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PPUSH
7661: LD_INT 106
7663: PPUSH
7664: LD_INT 14
7666: PPUSH
7667: CALL_OW 111
// end ; end_of_file
7671: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
// InGameOn ;
7680: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7684: LD_EXP 20
7688: PPUSH
7689: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7693: LD_INT 2
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_INT 22
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 34
7760: PUSH
7761: LD_INT 11
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 69
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: ST_TO_ADDR
// for i = 1 to tmp do
7781: LD_ADDR_VAR 0 6
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_VAR 0 2
7795: PUSH
7796: FOR_TO
7797: IFFALSE 7844
// begin if i = 5 then
7799: LD_VAR 0 6
7803: PUSH
7804: LD_INT 5
7806: EQUAL
7807: IFFALSE 7811
// break ;
7809: GO 7844
// sols := Replace ( sols , i , tmp [ i ] ) ;
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: LD_VAR 0 5
7820: PPUSH
7821: LD_VAR 0 6
7825: PPUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_VAR 0 6
7835: ARRAY
7836: PPUSH
7837: CALL_OW 1
7841: ST_TO_ADDR
// end ;
7842: GO 7796
7844: POP
7845: POP
// tmp := ar_force_tmp ;
7846: LD_ADDR_VAR 0 2
7850: PUSH
7851: LD_EXP 39
7855: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_INT 108
7867: PPUSH
7868: LD_INT 139
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PPUSH
7887: LD_EXP 20
7891: PPUSH
7892: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 2
7903: ARRAY
7904: PPUSH
7905: LD_INT 114
7907: PPUSH
7908: LD_INT 132
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7918: LD_VAR 0 2
7922: PUSH
7923: LD_INT 3
7925: ARRAY
7926: PPUSH
7927: LD_INT 115
7929: PPUSH
7930: LD_INT 132
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7940: LD_VAR 0 2
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_INT 3
7956: ARRAY
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7966: LD_VAR 0 4
7970: PPUSH
7971: LD_INT 83
7973: PPUSH
7974: LD_INT 123
7976: PPUSH
7977: CALL_OW 111
// Wait ( 0 0$01 ) ;
7981: LD_INT 35
7983: PPUSH
7984: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7988: LD_INT 90
7990: PPUSH
7991: LD_INT 144
7993: PPUSH
7994: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_INT 88
8005: PPUSH
8006: LD_INT 129
8008: PPUSH
8009: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 92
8020: PUSH
8021: LD_INT 131
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 88
8030: PUSH
8031: LD_INT 127
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 91
8040: PUSH
8041: LD_INT 132
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 92
8050: PUSH
8051: LD_INT 134
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// for i = 1 to sols do
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: DOUBLE
8070: LD_INT 1
8072: DEC
8073: ST_TO_ADDR
8074: LD_VAR 0 5
8078: PUSH
8079: FOR_TO
8080: IFFALSE 8153
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8082: LD_VAR 0 5
8086: PUSH
8087: LD_VAR 0 6
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 3
8097: PUSH
8098: LD_VAR 0 6
8102: ARRAY
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 3
8112: PUSH
8113: LD_VAR 0 6
8117: ARRAY
8118: PUSH
8119: LD_INT 2
8121: ARRAY
8122: PPUSH
8123: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8127: LD_VAR 0 5
8131: PUSH
8132: LD_VAR 0 6
8136: ARRAY
8137: PPUSH
8138: CALL_OW 197
// AddComHold ( sols ) ;
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 200
// end ;
8151: GO 8079
8153: POP
8154: POP
// repeat wait ( 0 0$1 ) ;
8155: LD_INT 35
8157: PPUSH
8158: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8162: LD_VAR 0 5
8166: PUSH
8167: LD_INT 1
8169: ARRAY
8170: PPUSH
8171: LD_INT 92
8173: PPUSH
8174: LD_INT 131
8176: PPUSH
8177: CALL_OW 297
8181: PUSH
8182: LD_INT 4
8184: LESS
8185: IFFALSE 8155
// CenterOnXY ( 96 , 139 ) ;
8187: LD_INT 96
8189: PPUSH
8190: LD_INT 139
8192: PPUSH
8193: CALL_OW 84
// wait ( 0 0$3 ) ;
8197: LD_INT 105
8199: PPUSH
8200: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8204: LD_INT 111
8206: PPUSH
8207: LD_INT 135
8209: PPUSH
8210: LD_INT 1
8212: PPUSH
8213: LD_INT 25
8215: NEG
8216: PPUSH
8217: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8221: LD_VAR 0 2
8225: PUSH
8226: LD_INT 2
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 1
8237: ARRAY
8238: PPUSH
8239: CALL_OW 250
8243: PUSH
8244: LD_INT 3
8246: PLUS
8247: PPUSH
8248: LD_VAR 0 2
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: CALL_OW 251
8261: PPUSH
8262: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8266: LD_VAR 0 2
8270: PUSH
8271: LD_INT 3
8273: ARRAY
8274: PPUSH
8275: LD_INT 7
8277: PPUSH
8278: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8282: LD_VAR 0 2
8286: PUSH
8287: LD_INT 2
8289: ARRAY
8290: PPUSH
8291: LD_VAR 0 2
8295: PUSH
8296: LD_INT 1
8298: ARRAY
8299: PPUSH
8300: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8304: LD_INT 35
8306: PPUSH
8307: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 1
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 2
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: CALL_OW 296
8333: PUSH
8334: LD_INT 5
8336: LESS
8337: IFFALSE 8304
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8339: LD_VAR 0 2
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_VAR 0 2
8352: PUSH
8353: LD_INT 2
8355: ARRAY
8356: PPUSH
8357: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: PPUSH
8370: LD_STRING D1a-Merc1-1
8372: PPUSH
8373: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: ARRAY
8385: PPUSH
8386: LD_STRING D1a-FMerc2-1
8388: PPUSH
8389: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 2
8400: ARRAY
8401: PPUSH
8402: LD_VAR 0 2
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PPUSH
8424: LD_INT 500
8426: PPUSH
8427: CALL_OW 234
// wait ( 0 0$2 ) ;
8431: LD_INT 70
8433: PPUSH
8434: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 1
8445: ARRAY
8446: PPUSH
8447: LD_INT 2
8449: PPUSH
8450: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8454: LD_INT 10
8456: PPUSH
8457: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8461: LD_VAR 0 2
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_STRING D1a-Merc1-2
8472: PPUSH
8473: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8477: LD_INT 7
8479: PPUSH
8480: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8484: LD_VAR 0 2
8488: PUSH
8489: LD_INT 1
8491: ARRAY
8492: PPUSH
8493: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8497: LD_VAR 0 2
8501: PUSH
8502: LD_INT 2
8504: ARRAY
8505: PPUSH
8506: LD_INT 10
8508: PPUSH
8509: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: PPUSH
8522: LD_STRING D1a-FMerc2-2
8524: PPUSH
8525: CALL_OW 88
// wait ( 0 0$1 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8536: LD_INT 7
8538: PPUSH
8539: CALL_OW 85
// wait ( 0 0$2 ) ;
8543: LD_INT 70
8545: PPUSH
8546: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8550: LD_EXP 43
8554: PPUSH
8555: LD_STRING D1a-Saliba-1
8557: PPUSH
8558: CALL_OW 91
// KillUnit ( Saliba ) ;
8562: LD_EXP 43
8566: PPUSH
8567: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8571: LD_VAR 0 2
8575: PUSH
8576: LD_INT 3
8578: ARRAY
8579: PPUSH
8580: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8584: LD_EXP 20
8588: PPUSH
8589: CALL_OW 85
// wait ( 0 0$1 ) ;
8593: LD_INT 35
8595: PPUSH
8596: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8600: LD_VAR 0 5
8604: PPUSH
8605: LD_INT 88
8607: PPUSH
8608: LD_INT 141
8610: PPUSH
8611: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8615: LD_VAR 0 5
8619: PPUSH
8620: LD_INT 70
8622: PPUSH
8623: CALL_OW 202
// wait ( 0 0$2 ) ;
8627: LD_INT 70
8629: PPUSH
8630: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8634: LD_INT 2
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: CALL_OW 80
// InGameOff ;
8650: CALL_OW 9
// ComWalk ( sols ) ;
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8663: LD_STRING M1
8665: PPUSH
8666: CALL_OW 337
// game_speed := 4 ;
8670: LD_ADDR_OWVAR 65
8674: PUSH
8675: LD_INT 4
8677: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 135
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 331
// SaveForQuickRestart ;
8691: CALL_OW 22
// ar_run := true ;
8695: LD_ADDR_EXP 5
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 91
8722: PUSH
8723: LD_INT 7
8725: PUSH
8726: LD_INT 10
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: PUSH
8743: LD_INT 7
8745: PPUSH
8746: CALL_OW 256
8750: PUSH
8751: LD_INT 999
8753: LESS
8754: OR
8755: IFFALSE 8703
// if GetSide ( ar_dep_s ) = 2 then
8757: LD_INT 7
8759: PPUSH
8760: CALL_OW 255
8764: PUSH
8765: LD_INT 2
8767: EQUAL
8768: IFFALSE 8780
// SetSide ( ar_dep_s , 1 ) ;
8770: LD_INT 7
8772: PPUSH
8773: LD_INT 1
8775: PPUSH
8776: CALL_OW 235
// end ;
8780: LD_VAR 0 1
8784: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8785: LD_EXP 5
8789: IFFALSE 9149
8791: GO 8793
8793: DISABLE
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_EXP 39
8808: PUSH
8809: LD_EXP 35
8813: PPUSH
8814: LD_INT 2
8816: PUSH
8817: LD_INT 21
8819: PUSH
8820: LD_INT 2
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 1
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 72
8846: ADD
8847: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_INT 5
8855: PPUSH
8856: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8860: LD_INT 5
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 343
// k := 1 ;
8870: LD_ADDR_VAR 0 3
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// for i in tmp do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_VAR 0 2
8887: PUSH
8888: FOR_IN
8889: IFFALSE 8974
// begin if IsInUnit ( i ) then
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 310
8900: IFFALSE 8911
// ComExitBuilding ( i ) ;
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 122
// if GetClass ( i ) = 3 then
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 257
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: IFFALSE 8960
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_EXP 40
8935: PUSH
8936: LD_VAR 0 3
8940: ARRAY
8941: PPUSH
8942: CALL_OW 180
// k := k + 1 ;
8946: LD_ADDR_VAR 0 3
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 1
8958: PLUS
8959: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_INT 10
8967: PPUSH
8968: CALL_OW 173
// end ;
8972: GO 8888
8974: POP
8975: POP
// ar_patrol := true ;
8976: LD_ADDR_EXP 7
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8984: LD_INT 10
8986: PPUSH
8987: CALL_OW 67
// for i in tmp do
8991: LD_ADDR_VAR 0 1
8995: PUSH
8996: LD_VAR 0 2
9000: PUSH
9001: FOR_IN
9002: IFFALSE 9030
// if not HasTask ( i ) then
9004: LD_VAR 0 1
9008: PPUSH
9009: CALL_OW 314
9013: NOT
9014: IFFALSE 9028
// ComMoveToArea ( i , escape_area ) ;
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 10
9023: PPUSH
9024: CALL_OW 113
9028: GO 9001
9030: POP
9031: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9032: LD_ADDR_VAR 0 3
9036: PUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 95
9044: PUSH
9045: LD_INT 10
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 72
9056: ST_TO_ADDR
// if k then
9057: LD_VAR 0 3
9061: IFFALSE 9130
// for i in k do
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: LD_VAR 0 3
9072: PUSH
9073: FOR_IN
9074: IFFALSE 9128
// begin if IsInUnit ( i ) then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 310
9085: IFFALSE 9101
// RemoveUnit ( IsInUnit ( i ) ) ;
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 310
9096: PPUSH
9097: CALL_OW 64
// RemoveUnit ( i ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 64
// tmp := tmp diff i ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_VAR 0 2
9119: PUSH
9120: LD_VAR 0 1
9124: DIFF
9125: ST_TO_ADDR
// end ;
9126: GO 9073
9128: POP
9129: POP
// until tmp = [ ] ;
9130: LD_VAR 0 2
9134: PUSH
9135: EMPTY
9136: EQUAL
9137: IFFALSE 8984
// ChangeSideFog ( 5 , 5 ) ;
9139: LD_INT 5
9141: PPUSH
9142: LD_INT 5
9144: PPUSH
9145: CALL_OW 343
// end ;
9149: PPOPN 3
9151: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9152: LD_EXP 7
9156: IFFALSE 9446
9158: GO 9160
9160: DISABLE
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
9165: PPUSH
// begin uc_side := 2 ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_INT 2
9173: ST_TO_ADDR
// uc_nation := 2 ;
9174: LD_ADDR_OWVAR 21
9178: PUSH
9179: LD_INT 2
9181: ST_TO_ADDR
// InitHc ;
9182: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9186: LD_INT 1
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 6
9194: PPUSH
9195: CALL_OW 380
// un := CreateHuman ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: CALL_OW 44
9208: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9209: LD_INT 14
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_INT 27
9220: PPUSH
9221: LD_INT 98
9223: PPUSH
9224: CALL 52535 0 5
// veh := CreateVehicle ;
9228: LD_ADDR_VAR 0 3
9232: PUSH
9233: CALL_OW 45
9237: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9238: LD_VAR 0 3
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_INT 179
9257: PPUSH
9258: LD_INT 135
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_VAR 0 3
9277: PPUSH
9278: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 126
9289: PPUSH
9290: LD_INT 133
9292: PPUSH
9293: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9297: LD_INT 10
9299: PPUSH
9300: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: CALL_OW 292
9316: PUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: LD_INT 7
9324: PPUSH
9325: CALL_OW 296
9329: PUSH
9330: LD_INT 9
9332: LESS
9333: OR
9334: IFFALSE 9297
// ComHold ( veh ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_STRING D2aa-Ar1-1
9352: PPUSH
9353: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 177
9364: PPUSH
9365: LD_INT 96
9367: PPUSH
9368: CALL_OW 111
// AddComExitVehicle ( un ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9381: LD_INT 35
9383: PPUSH
9384: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9388: LD_VAR 0 2
9392: PPUSH
9393: LD_INT 204
9395: PPUSH
9396: CALL_OW 296
9400: PUSH
9401: LD_INT 15
9403: LESS
9404: IFFALSE 9381
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9406: LD_ADDR_EXP 49
9410: PUSH
9411: LD_EXP 49
9415: PPUSH
9416: LD_INT 3
9418: PUSH
9419: LD_EXP 49
9423: PUSH
9424: LD_INT 3
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: PLUS
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 52657 0 3
9445: ST_TO_ADDR
// end ;
9446: PPOPN 3
9448: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9449: LD_INT 7
9451: PPUSH
9452: CALL_OW 255
9456: PUSH
9457: LD_INT 1
9459: EQUAL
9460: PUSH
9461: LD_INT 7
9463: PPUSH
9464: CALL_OW 301
9468: OR
9469: IFFALSE 11893
9471: GO 9473
9473: DISABLE
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_EXP 35
9487: PPUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 3
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 72
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9520
// SetSide ( i , 1 ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 235
9518: GO 9503
9520: POP
9521: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_INT 46
9529: PUSH
9530: LD_INT 41
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 50
9539: PUSH
9540: LD_INT 25
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 57
9549: PUSH
9550: LD_INT 75
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 75
9559: PUSH
9560: LD_INT 89
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 51
9569: PUSH
9570: LD_INT 45
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 95
9579: PUSH
9580: LD_INT 95
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 84
9589: PUSH
9590: LD_INT 77
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 101
9599: PUSH
9600: LD_INT 76
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 118
9609: PUSH
9610: LD_INT 81
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 139
9619: PUSH
9620: LD_INT 97
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 129
9629: PUSH
9630: LD_INT 114
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 154
9639: PUSH
9640: LD_INT 111
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: ST_TO_ADDR
// base_captured := true ;
9661: LD_ADDR_EXP 6
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// DialogueOn ;
9669: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9673: LD_EXP 20
9677: PPUSH
9678: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9682: LD_EXP 20
9686: PPUSH
9687: LD_STRING D2-JMM-1
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9694: LD_EXP 29
9698: PPUSH
9699: LD_STRING D2-Pow-1
9701: PPUSH
9702: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9706: LD_EXP 20
9710: PPUSH
9711: LD_STRING D2-JMM-2
9713: PPUSH
9714: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9718: LD_EXP 29
9722: PPUSH
9723: LD_STRING D2-Pow-2
9725: PPUSH
9726: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9730: LD_EXP 20
9734: PPUSH
9735: LD_STRING D2-JMM-3
9737: PPUSH
9738: CALL_OW 88
// DialogueOff ;
9742: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9746: LD_STRING M2
9748: PPUSH
9749: CALL_OW 337
// Wait ( 0 0$2 ) ;
9753: LD_INT 70
9755: PPUSH
9756: CALL_OW 67
// if IsOk ( Gary ) then
9760: LD_EXP 31
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// Say ( Gary , D2a-Gary-1 ) ;
9771: LD_EXP 31
9775: PPUSH
9776: LD_STRING D2a-Gary-1
9778: PPUSH
9779: CALL_OW 88
// if IsOk ( Bobby ) then
9783: LD_EXP 23
9787: PPUSH
9788: CALL_OW 302
9792: IFFALSE 9806
// Say ( Bobby , D2a-Bobby-1 ) ;
9794: LD_EXP 23
9798: PPUSH
9799: LD_STRING D2a-Bobby-1
9801: PPUSH
9802: CALL_OW 88
// if IsOk ( Cyrus ) then
9806: LD_EXP 24
9810: PPUSH
9811: CALL_OW 302
9815: IFFALSE 9829
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9817: LD_EXP 24
9821: PPUSH
9822: LD_STRING D2a-Cyrus-1
9824: PPUSH
9825: CALL_OW 88
// if IsOk ( Lisa ) then
9829: LD_EXP 21
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9852
// Say ( Lisa , D2a-Lisa-1 ) ;
9840: LD_EXP 21
9844: PPUSH
9845: LD_STRING D2a-Lisa-1
9847: PPUSH
9848: CALL_OW 88
// if IsOk ( Frank ) then
9852: LD_EXP 32
9856: PPUSH
9857: CALL_OW 302
9861: IFFALSE 9875
// Say ( Frank , D2a-Frank-1 ) ;
9863: LD_EXP 32
9867: PPUSH
9868: LD_STRING D2a-Frank-1
9870: PPUSH
9871: CALL_OW 88
// if IsOk ( Cornel ) then
9875: LD_EXP 30
9879: PPUSH
9880: CALL_OW 302
9884: IFFALSE 9898
// Say ( Cornel , D2a-Corn-1 ) ;
9886: LD_EXP 30
9890: PPUSH
9891: LD_STRING D2a-Corn-1
9893: PPUSH
9894: CALL_OW 88
// if IsOk ( Donaldson ) then
9898: LD_EXP 22
9902: PPUSH
9903: CALL_OW 302
9907: IFFALSE 9921
// Say ( Donaldson , D2a-Don-1 ) ;
9909: LD_EXP 22
9913: PPUSH
9914: LD_STRING D2a-Don-1
9916: PPUSH
9917: CALL_OW 88
// if IsOk ( Brown ) then
9921: LD_EXP 26
9925: PPUSH
9926: CALL_OW 302
9930: IFFALSE 9944
// Say ( Brown , D2a-Brown-1 ) ;
9932: LD_EXP 26
9936: PPUSH
9937: LD_STRING D2a-Brown-1
9939: PPUSH
9940: CALL_OW 88
// Wait ( 0 0$30 ) ;
9944: LD_INT 1050
9946: PPUSH
9947: CALL_OW 67
// if IsOk ( Frank ) then
9951: LD_EXP 32
9955: PPUSH
9956: CALL_OW 302
9960: IFFALSE 10226
// begin DialogueOn ;
9962: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9966: LD_EXP 20
9970: PUSH
9971: LD_EXP 32
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9984: LD_EXP 32
9988: PPUSH
9989: LD_STRING D3F-Frank-1
9991: PPUSH
9992: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9996: LD_EXP 20
10000: PPUSH
10001: LD_STRING D3F-JMM-1
10003: PPUSH
10004: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10008: LD_EXP 32
10012: PPUSH
10013: LD_STRING D3F-Frank-2
10015: PPUSH
10016: CALL_OW 88
// case Query ( QFrank ) of 1 :
10020: LD_STRING QFrank
10022: PPUSH
10023: CALL_OW 97
10027: PUSH
10028: LD_INT 1
10030: DOUBLE
10031: EQUAL
10032: IFTRUE 10036
10034: GO 10059
10036: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10037: LD_EXP 20
10041: PPUSH
10042: LD_STRING D3Fa-JMM-1
10044: PPUSH
10045: CALL_OW 88
// us_scout := 1 ;
10049: LD_ADDR_EXP 8
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// end ; 2 :
10057: GO 10222
10059: LD_INT 2
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10189
10067: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10068: LD_EXP 20
10072: PPUSH
10073: LD_STRING D3Fb-JMM-1
10075: PPUSH
10076: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10080: LD_EXP 32
10084: PPUSH
10085: LD_STRING D3Fb-Frank-1
10087: PPUSH
10088: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10092: LD_STRING QFrank2
10094: PPUSH
10095: CALL_OW 97
10099: PUSH
10100: LD_INT 1
10102: DOUBLE
10103: EQUAL
10104: IFTRUE 10108
10106: GO 10155
10108: POP
// begin us_scout := 2 ;
10109: LD_ADDR_EXP 8
10113: PUSH
10114: LD_INT 2
10116: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10117: LD_EXP 20
10121: PPUSH
10122: LD_STRING D3Fba-JMM-1
10124: PPUSH
10125: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10129: LD_EXP 32
10133: PPUSH
10134: LD_STRING D3Fba-Frank-1
10136: PPUSH
10137: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10141: LD_EXP 20
10145: PPUSH
10146: LD_STRING D3Fba-JMM-2
10148: PPUSH
10149: CALL_OW 88
// end ; 2 :
10153: GO 10187
10155: LD_INT 2
10157: DOUBLE
10158: EQUAL
10159: IFTRUE 10163
10161: GO 10186
10163: POP
// begin us_scout := 0 ;
10164: LD_ADDR_EXP 8
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10172: LD_EXP 20
10176: PPUSH
10177: LD_STRING D3Fbb-JMM-1
10179: PPUSH
10180: CALL_OW 88
// end ; end ;
10184: GO 10187
10186: POP
// end ; 3 :
10187: GO 10222
10189: LD_INT 3
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10221
10197: POP
// begin us_scout := - 1 ;
10198: LD_ADDR_EXP 8
10202: PUSH
10203: LD_INT 1
10205: NEG
10206: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10207: LD_EXP 20
10211: PPUSH
10212: LD_STRING D3Fc-JMM-1
10214: PPUSH
10215: CALL_OW 88
// end ; end ;
10219: GO 10222
10221: POP
// DialogueOff ;
10222: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10226: LD_EXP 8
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: IN
10242: IFFALSE 10246
// exit ;
10244: GO 11893
// if us_scout in [ 1 , 2 ] then
10246: LD_EXP 8
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: IN
10261: IFFALSE 10960
// begin if IsInUnit ( Frank ) then
10263: LD_EXP 32
10267: PPUSH
10268: CALL_OW 310
10272: IFFALSE 10283
// ComExitBuilding ( Frank ) ;
10274: LD_EXP 32
10278: PPUSH
10279: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10283: LD_EXP 32
10287: PPUSH
10288: CALL_OW 311
10292: IFFALSE 10303
// ComExitVehicle ( Frank ) ;
10294: LD_EXP 32
10298: PPUSH
10299: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10303: LD_EXP 32
10307: PPUSH
10308: LD_INT 4
10310: PPUSH
10311: CALL_OW 235
// wait ( 0 0$1 ) ;
10315: LD_INT 35
10317: PPUSH
10318: CALL_OW 67
// if us_scout = 2 then
10322: LD_EXP 8
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: IFFALSE 10698
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10332: LD_EXP 32
10336: PPUSH
10337: LD_INT 75
10339: PPUSH
10340: LD_INT 63
10342: PPUSH
10343: CALL_OW 111
// AddComHold ( Frank ) ;
10347: LD_EXP 32
10351: PPUSH
10352: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10356: LD_EXP 32
10360: PPUSH
10361: LD_INT 770
10363: PPUSH
10364: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10368: LD_EXP 32
10372: PPUSH
10373: LD_INT 100
10375: PPUSH
10376: LD_INT 75
10378: PPUSH
10379: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10383: LD_EXP 32
10387: PPUSH
10388: LD_INT 123
10390: PPUSH
10391: LD_INT 103
10393: PPUSH
10394: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10398: LD_EXP 32
10402: PPUSH
10403: LD_INT 138
10405: PPUSH
10406: LD_INT 108
10408: PPUSH
10409: CALL_OW 171
// AddComHold ( Frank ) ;
10413: LD_EXP 32
10417: PPUSH
10418: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10422: LD_INT 35
10424: PPUSH
10425: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10429: LD_EXP 32
10433: PPUSH
10434: LD_INT 138
10436: PPUSH
10437: LD_INT 108
10439: PPUSH
10440: CALL_OW 307
10444: IFFALSE 10422
// AddComMoveXY ( Frank , 125 , 132 ) ;
10446: LD_EXP 32
10450: PPUSH
10451: LD_INT 125
10453: PPUSH
10454: LD_INT 132
10456: PPUSH
10457: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10461: LD_INT 35
10463: PPUSH
10464: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10468: LD_INT 1
10470: PPUSH
10471: LD_EXP 32
10475: PPUSH
10476: CALL_OW 292
10480: PUSH
10481: LD_EXP 32
10485: PPUSH
10486: LD_INT 7
10488: PPUSH
10489: CALL_OW 296
10493: PUSH
10494: LD_INT 7
10496: LESS
10497: OR
10498: IFFALSE 10461
// DialogueOn ;
10500: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10504: LD_EXP 32
10508: PPUSH
10509: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10513: LD_INT 10
10515: PPUSH
10516: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10520: LD_EXP 20
10524: PPUSH
10525: LD_STRING D4Fa-JMM-1
10527: PPUSH
10528: CALL_OW 88
// for i in points do
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: LD_VAR 0 2
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10601
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10545: LD_VAR 0 1
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 1
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: LD_INT 20
10568: NEG
10569: PPUSH
10570: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10574: LD_VAR 0 1
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 331
// end ;
10599: GO 10542
10601: POP
10602: POP
// dwait ( 0 0$0.5 ) ;
10603: LD_INT 18
10605: PPUSH
10606: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10610: LD_INT 42
10612: PPUSH
10613: LD_INT 27
10615: PPUSH
10616: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10620: LD_EXP 32
10624: PPUSH
10625: LD_STRING D4Fa-Frank-1
10627: PPUSH
10628: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10632: LD_INT 18
10634: PPUSH
10635: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10639: LD_EXP 20
10643: PPUSH
10644: LD_STRING D4Fa-JMM-2
10646: PPUSH
10647: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10651: LD_INT 118
10653: PPUSH
10654: LD_INT 80
10656: PPUSH
10657: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10661: LD_EXP 32
10665: PPUSH
10666: LD_STRING D4Fa-Frank-2
10668: PPUSH
10669: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10673: LD_INT 10
10675: PPUSH
10676: CALL_OW 68
// DialogueOff ;
10680: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10684: LD_EXP 32
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 235
// end else
10696: GO 10960
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10698: LD_INT 2
10700: PPUSH
10701: LD_INT 4
10703: PPUSH
10704: LD_INT 2
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10714: LD_EXP 32
10718: PPUSH
10719: LD_INT 75
10721: PPUSH
10722: LD_INT 63
10724: PPUSH
10725: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10729: LD_EXP 32
10733: PPUSH
10734: LD_INT 175
10736: PPUSH
10737: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10741: LD_EXP 32
10745: PPUSH
10746: LD_INT 102
10748: PPUSH
10749: LD_INT 76
10751: PPUSH
10752: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10756: LD_EXP 32
10760: PPUSH
10761: LD_INT 108
10763: PPUSH
10764: LD_INT 70
10766: PPUSH
10767: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10771: LD_INT 35
10773: PPUSH
10774: CALL_OW 67
// until See ( 2 , Frank ) ;
10778: LD_INT 2
10780: PPUSH
10781: LD_EXP 32
10785: PPUSH
10786: CALL_OW 292
10790: IFFALSE 10771
// ComMoveXY ( Frank , 112 , 118 ) ;
10792: LD_EXP 32
10796: PPUSH
10797: LD_INT 112
10799: PPUSH
10800: LD_INT 118
10802: PPUSH
10803: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10807: LD_EXP 32
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 750
10819: GREATEREQUAL
10820: IFFALSE 10834
// SetLives ( Frank , 700 ) ;
10822: LD_EXP 32
10826: PPUSH
10827: LD_INT 700
10829: PPUSH
10830: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10834: LD_INT 35
10836: PPUSH
10837: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10841: LD_INT 1
10843: PPUSH
10844: LD_EXP 32
10848: PPUSH
10849: CALL_OW 292
10853: PUSH
10854: LD_EXP 32
10858: PPUSH
10859: LD_INT 7
10861: PPUSH
10862: CALL_OW 296
10866: PUSH
10867: LD_INT 17
10869: LESS
10870: OR
10871: IFFALSE 10834
// DialogueOn ;
10873: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10877: LD_EXP 32
10881: PPUSH
10882: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10886: LD_EXP 32
10890: PPUSH
10891: LD_STRING D4Fb-Frank-1
10893: PPUSH
10894: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10898: LD_EXP 20
10902: PPUSH
10903: LD_STRING D4Fb-JMM-1
10905: PPUSH
10906: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10910: LD_INT 2
10912: PPUSH
10913: LD_STRING D4Fb-FSci1-1
10915: PPUSH
10916: CALL 15541 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10920: LD_EXP 32
10924: PPUSH
10925: LD_STRING D4Fb-Frank-2
10927: PPUSH
10928: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10932: LD_EXP 20
10936: PPUSH
10937: LD_STRING D4Fb-JMM-2
10939: PPUSH
10940: CALL_OW 88
// DialogueOff ;
10944: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10948: LD_EXP 32
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10960: LD_EXP 33
10964: PPUSH
10965: CALL_OW 302
10969: PUSH
10970: LD_EXP 32
10974: NOT
10975: AND
10976: IFFALSE 11124
// begin DialogueOn ;
10978: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10982: LD_EXP 20
10986: PUSH
10987: LD_EXP 33
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11000: LD_EXP 33
11004: PPUSH
11005: LD_STRING D3Y-Yam-1
11007: PPUSH
11008: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11012: LD_EXP 20
11016: PPUSH
11017: LD_STRING D3Y-JMM-1
11019: PPUSH
11020: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11024: LD_EXP 33
11028: PPUSH
11029: LD_STRING D3Y-Yam-2
11031: PPUSH
11032: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11036: LD_STRING QYamoko
11038: PPUSH
11039: CALL_OW 97
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11087
11052: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11053: LD_EXP 20
11057: PPUSH
11058: LD_STRING D3Ya-JMM-1
11060: PPUSH
11061: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11065: LD_EXP 33
11069: PPUSH
11070: LD_STRING D3Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// us_scout := 1 ;
11077: LD_ADDR_EXP 8
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// end ; 2 :
11085: GO 11120
11087: LD_INT 2
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11119
11095: POP
// begin us_scout := - 1 ;
11096: LD_ADDR_EXP 8
11100: PUSH
11101: LD_INT 1
11103: NEG
11104: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11105: LD_EXP 20
11109: PPUSH
11110: LD_STRING D3Yb-JMM-1
11112: PPUSH
11113: CALL_OW 88
// end ; end ;
11117: GO 11120
11119: POP
// DialogueOff ;
11120: CALL_OW 7
// end ; if Frank then
11124: LD_EXP 32
11128: IFFALSE 11132
// exit ;
11130: GO 11893
// if us_scout in [ - 1 , 0 ] then
11132: LD_EXP 8
11136: PUSH
11137: LD_INT 1
11139: NEG
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: IN
11148: IFFALSE 11152
// exit ;
11150: GO 11893
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11152: LD_ADDR_EXP 8
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: LD_OWVAR 67
11175: ARRAY
11176: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11177: LD_EXP 8
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: LD_INT 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: IN
11192: IFFALSE 11893
// begin if IsInUnit ( Kikuchi ) then
11194: LD_EXP 33
11198: PPUSH
11199: CALL_OW 310
11203: IFFALSE 11214
// ComExitBuilding ( Kikuchi ) ;
11205: LD_EXP 33
11209: PPUSH
11210: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11214: LD_EXP 33
11218: PPUSH
11219: CALL_OW 311
11223: IFFALSE 11234
// ComExitVehicle ( Kikuchi ) ;
11225: LD_EXP 33
11229: PPUSH
11230: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_INT 4
11241: PPUSH
11242: CALL_OW 235
// wait ( 0 0$1 ) ;
11246: LD_INT 35
11248: PPUSH
11249: CALL_OW 67
// if us_scout = 2 then
11253: LD_EXP 8
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: IFFALSE 11641
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11263: LD_EXP 33
11267: PPUSH
11268: LD_INT 75
11270: PPUSH
11271: LD_INT 63
11273: PPUSH
11274: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11278: LD_EXP 33
11282: PPUSH
11283: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11287: LD_EXP 33
11291: PPUSH
11292: LD_INT 770
11294: PPUSH
11295: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11299: LD_EXP 33
11303: PPUSH
11304: LD_INT 100
11306: PPUSH
11307: LD_INT 75
11309: PPUSH
11310: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11314: LD_EXP 33
11318: PPUSH
11319: LD_INT 123
11321: PPUSH
11322: LD_INT 103
11324: PPUSH
11325: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11329: LD_EXP 33
11333: PPUSH
11334: LD_INT 138
11336: PPUSH
11337: LD_INT 108
11339: PPUSH
11340: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11344: LD_EXP 33
11348: PPUSH
11349: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11353: LD_INT 35
11355: PPUSH
11356: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11360: LD_EXP 33
11364: PPUSH
11365: LD_INT 138
11367: PPUSH
11368: LD_INT 108
11370: PPUSH
11371: CALL_OW 307
11375: IFFALSE 11353
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11377: LD_EXP 33
11381: PPUSH
11382: LD_INT 125
11384: PPUSH
11385: LD_INT 132
11387: PPUSH
11388: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11392: LD_INT 35
11394: PPUSH
11395: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11399: LD_INT 1
11401: PPUSH
11402: LD_EXP 33
11406: PPUSH
11407: CALL_OW 292
11411: PUSH
11412: LD_EXP 33
11416: PPUSH
11417: LD_INT 7
11419: PPUSH
11420: CALL_OW 296
11424: PUSH
11425: LD_INT 7
11427: LESS
11428: OR
11429: IFFALSE 11392
// DialogueOn ;
11431: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11435: LD_EXP 33
11439: PPUSH
11440: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11444: LD_INT 10
11446: PPUSH
11447: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11451: LD_EXP 33
11455: PPUSH
11456: LD_STRING D4Ya-Yam-1
11458: PPUSH
11459: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11463: LD_EXP 20
11467: PPUSH
11468: LD_STRING D4Ya-JMM-1
11470: PPUSH
11471: CALL_OW 88
// for i in points do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 2
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11544
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11488: LD_VAR 0 1
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 1
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: LD_INT 20
11511: NEG
11512: PPUSH
11513: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11517: LD_VAR 0 1
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PPUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 2
11533: ARRAY
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 331
// end ;
11542: GO 11485
11544: POP
11545: POP
// dwait ( 0 0$0.5 ) ;
11546: LD_INT 18
11548: PPUSH
11549: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11553: LD_INT 42
11555: PPUSH
11556: LD_INT 27
11558: PPUSH
11559: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11563: LD_EXP 33
11567: PPUSH
11568: LD_STRING D4Ya-Yam-2
11570: PPUSH
11571: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11575: LD_INT 18
11577: PPUSH
11578: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11582: LD_INT 118
11584: PPUSH
11585: LD_INT 80
11587: PPUSH
11588: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11592: LD_EXP 20
11596: PPUSH
11597: LD_STRING D4Ya-JMM-2
11599: PPUSH
11600: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11604: LD_EXP 33
11608: PPUSH
11609: LD_STRING D4Ya-Yam-3
11611: PPUSH
11612: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11616: LD_INT 10
11618: PPUSH
11619: CALL_OW 68
// DialogueOff ;
11623: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11627: LD_EXP 33
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 235
// end else
11639: GO 11893
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11641: LD_INT 2
11643: PPUSH
11644: LD_INT 4
11646: PPUSH
11647: LD_INT 2
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11657: LD_EXP 33
11661: PPUSH
11662: LD_INT 75
11664: PPUSH
11665: LD_INT 63
11667: PPUSH
11668: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11672: LD_EXP 33
11676: PPUSH
11677: LD_INT 175
11679: PPUSH
11680: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11684: LD_EXP 33
11688: PPUSH
11689: LD_INT 102
11691: PPUSH
11692: LD_INT 76
11694: PPUSH
11695: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11699: LD_EXP 33
11703: PPUSH
11704: LD_INT 108
11706: PPUSH
11707: LD_INT 70
11709: PPUSH
11710: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11714: LD_INT 35
11716: PPUSH
11717: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11721: LD_INT 2
11723: PPUSH
11724: LD_EXP 33
11728: PPUSH
11729: CALL_OW 292
11733: IFFALSE 11714
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11735: LD_EXP 33
11739: PPUSH
11740: LD_INT 112
11742: PPUSH
11743: LD_INT 118
11745: PPUSH
11746: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11750: LD_EXP 33
11754: PPUSH
11755: CALL_OW 256
11759: PUSH
11760: LD_INT 750
11762: GREATEREQUAL
11763: IFFALSE 11777
// SetLives ( Kikuchi , 700 ) ;
11765: LD_EXP 33
11769: PPUSH
11770: LD_INT 700
11772: PPUSH
11773: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11777: LD_INT 35
11779: PPUSH
11780: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11784: LD_INT 1
11786: PPUSH
11787: LD_EXP 33
11791: PPUSH
11792: CALL_OW 292
11796: PUSH
11797: LD_EXP 33
11801: PPUSH
11802: LD_INT 7
11804: PPUSH
11805: CALL_OW 296
11809: PUSH
11810: LD_INT 17
11812: LESS
11813: OR
11814: IFFALSE 11777
// DialogueOn ;
11816: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11820: LD_EXP 33
11824: PPUSH
11825: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11829: LD_EXP 33
11833: PPUSH
11834: LD_STRING D4Yb-Yam-1
11836: PPUSH
11837: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11841: LD_EXP 20
11845: PPUSH
11846: LD_STRING D4Yb-JMM-1
11848: PPUSH
11849: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11853: LD_EXP 33
11857: PPUSH
11858: LD_STRING D4Yb-Yam-2
11860: PPUSH
11861: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11865: LD_EXP 20
11869: PPUSH
11870: LD_STRING D4Yb-JMM-2
11872: PPUSH
11873: CALL_OW 88
// DialogueOff ;
11877: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11881: LD_EXP 33
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 235
// end ; end ; end ;
11893: PPOPN 2
11895: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11896: LD_EXP 6
11900: IFFALSE 12933
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
// begin enable ;
11911: ENABLE
// if not seen [ 1 ] then
11912: LD_EXP 9
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: NOT
11921: IFFALSE 12101
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: LD_INT 22
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 11
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 33
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 69
11974: ST_TO_ADDR
// if tmp then
11975: LD_VAR 0 2
11979: IFFALSE 12101
// for i in tmp do
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_VAR 0 2
11990: PUSH
11991: FOR_IN
11992: IFFALSE 12099
// if See ( 1 , i ) then
11994: LD_INT 1
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 292
12006: IFFALSE 12097
// begin seen := Replace ( seen , 1 , true ) ;
12008: LD_ADDR_EXP 9
12012: PUSH
12013: LD_EXP 9
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 1
12028: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12029: LD_INT 1
12031: PPUSH
12032: CALL 15363 0 1
12036: IFFALSE 12097
// begin DialogueOn ;
12038: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12058: LD_ADDR_VAR 0 3
12062: PUSH
12063: LD_INT 1
12065: PPUSH
12066: LD_STRING D5a-Sol2-1
12068: PPUSH
12069: CALL 15541 0 2
12073: ST_TO_ADDR
// if not un then
12074: LD_VAR 0 3
12078: NOT
12079: IFFALSE 12091
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12081: LD_INT 2
12083: PPUSH
12084: LD_STRING D5a-FSol2-1
12086: PPUSH
12087: CALL 15541 0 2
// DialogueOff ;
12091: CALL_OW 7
// break ;
12095: GO 12099
// end ; end ;
12097: GO 11991
12099: POP
12100: POP
// end ; if not seen [ 2 ] then
12101: LD_EXP 9
12105: PUSH
12106: LD_INT 2
12108: ARRAY
12109: NOT
12110: IFFALSE 12335
// begin can_kamikazed := true ;
12112: LD_ADDR_EXP 10
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 25
12137: PUSH
12138: LD_INT 17
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// if tmp then
12154: LD_VAR 0 2
12158: IFFALSE 12335
// for i in tmp do
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_VAR 0 2
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12333
// if See ( 1 , i ) then
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 292
12185: IFFALSE 12331
// begin seen := Replace ( seen , 2 , true ) ;
12187: LD_ADDR_EXP 9
12191: PUSH
12192: LD_EXP 9
12196: PPUSH
12197: LD_INT 2
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12208: LD_INT 1
12210: PPUSH
12211: CALL 15363 0 1
12215: IFFALSE 12331
// begin DialogueOn ;
12217: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12230: LD_INT 10
12232: PPUSH
12233: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_STRING D5b-Sol1-1
12247: PPUSH
12248: CALL 15541 0 2
12252: ST_TO_ADDR
// if not un then
12253: LD_VAR 0 3
12257: NOT
12258: IFFALSE 12276
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 2
12267: PPUSH
12268: LD_STRING D5b-FSol1-1
12270: PPUSH
12271: CALL 15541 0 2
12275: ST_TO_ADDR
// if un then
12276: LD_VAR 0 3
12280: IFFALSE 12325
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12282: LD_ADDR_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_STRING D5b-Sol2-1
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: CALL 15767 0 3
12302: ST_TO_ADDR
// if not un2 then
12303: LD_VAR 0 4
12307: NOT
12308: IFFALSE 12325
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12310: LD_INT 2
12312: PPUSH
12313: LD_STRING D5b-FSol2-1
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: CALL 15767 0 3
// end ; DialogueOff ;
12325: CALL_OW 7
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12170
12333: POP
12334: POP
// end ; if not seen [ 3 ] then
12335: LD_EXP 9
12339: PUSH
12340: LD_INT 3
12342: ARRAY
12343: NOT
12344: IFFALSE 12518
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 33
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if tmp then
12380: LD_VAR 0 2
12384: IFFALSE 12518
// for i in tmp do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12516
// if See ( 1 , i ) then
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 292
12411: IFFALSE 12514
// begin seen := Replace ( seen , 3 , true ) ;
12413: LD_ADDR_EXP 9
12417: PUSH
12418: LD_EXP 9
12422: PPUSH
12423: LD_INT 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 1
12433: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12434: LD_INT 1
12436: PPUSH
12437: CALL 15363 0 1
12441: IFFALSE 12514
// begin DialogueOn ;
12443: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12456: LD_INT 10
12458: PPUSH
12459: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_STRING D8-Sol1-1
12473: PPUSH
12474: CALL 15541 0 2
12478: ST_TO_ADDR
// if not un then
12479: LD_VAR 0 3
12483: NOT
12484: IFFALSE 12496
// SayRand ( sex_female , D8-FSol1-1 ) ;
12486: LD_INT 2
12488: PPUSH
12489: LD_STRING D8-FSol1-1
12491: PPUSH
12492: CALL 15541 0 2
// Say ( JMM , D8-JMM-1 ) ;
12496: LD_EXP 20
12500: PPUSH
12501: LD_STRING D8-JMM-1
12503: PPUSH
12504: CALL_OW 88
// DialogueOff ;
12508: CALL_OW 7
// break ;
12512: GO 12516
// end ; end ;
12514: GO 12396
12516: POP
12517: POP
// end ; if not seen [ 4 ] then
12518: LD_EXP 9
12522: PUSH
12523: LD_INT 4
12525: ARRAY
12526: NOT
12527: IFFALSE 12689
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 33
12546: PUSH
12547: LD_INT 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: ST_TO_ADDR
// if tmp then
12563: LD_VAR 0 2
12567: IFFALSE 12689
// for i in tmp do
12569: LD_ADDR_VAR 0 1
12573: PUSH
12574: LD_VAR 0 2
12578: PUSH
12579: FOR_IN
12580: IFFALSE 12687
// if See ( 1 , i ) then
12582: LD_INT 1
12584: PPUSH
12585: LD_VAR 0 1
12589: PPUSH
12590: CALL_OW 292
12594: IFFALSE 12685
// begin seen := Replace ( seen , 4 , true ) ;
12596: LD_ADDR_EXP 9
12600: PUSH
12601: LD_EXP 9
12605: PPUSH
12606: LD_INT 4
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 1
12616: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12617: LD_INT 1
12619: PPUSH
12620: CALL 15363 0 1
12624: IFFALSE 12685
// begin DialogueOn ;
12626: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12639: LD_INT 10
12641: PPUSH
12642: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 1
12653: PPUSH
12654: LD_STRING D5a-Sol1-1
12656: PPUSH
12657: CALL 15541 0 2
12661: ST_TO_ADDR
// if not un then
12662: LD_VAR 0 3
12666: NOT
12667: IFFALSE 12679
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12669: LD_INT 2
12671: PPUSH
12672: LD_STRING D5a-FSol1-1
12674: PPUSH
12675: CALL 15541 0 2
// DialogueOff ;
12679: CALL_OW 7
// break ;
12683: GO 12687
// end ; end ;
12685: GO 12579
12687: POP
12688: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12689: LD_EXP 9
12693: PUSH
12694: LD_INT 5
12696: ARRAY
12697: NOT
12698: PUSH
12699: LD_EXP 9
12703: PUSH
12704: LD_INT 3
12706: ARRAY
12707: AND
12708: IFFALSE 12882
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 34
12727: PUSH
12728: LD_INT 31
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: ST_TO_ADDR
// if tmp then
12744: LD_VAR 0 2
12748: IFFALSE 12882
// for i in tmp do
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: FOR_IN
12761: IFFALSE 12880
// if See ( 1 , i ) then
12763: LD_INT 1
12765: PPUSH
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 292
12775: IFFALSE 12878
// begin seen := Replace ( seen , 5 , true ) ;
12777: LD_ADDR_EXP 9
12781: PUSH
12782: LD_EXP 9
12786: PPUSH
12787: LD_INT 5
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 1
12797: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12798: LD_INT 1
12800: PPUSH
12801: CALL 15363 0 1
12805: IFFALSE 12878
// begin DialogueOn ;
12807: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12811: LD_VAR 0 1
12815: PPUSH
12816: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12820: LD_INT 10
12822: PPUSH
12823: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D8a-Sol2-1
12837: PPUSH
12838: CALL 15541 0 2
12842: ST_TO_ADDR
// if not un then
12843: LD_VAR 0 3
12847: NOT
12848: IFFALSE 12860
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_STRING D8a-FSol2-1
12855: PPUSH
12856: CALL 15541 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12860: LD_EXP 20
12864: PPUSH
12865: LD_STRING D8a-JMM-1
12867: PPUSH
12868: CALL_OW 88
// DialogueOff ;
12872: CALL_OW 7
// break ;
12876: GO 12880
// end ; end ;
12878: GO 12760
12880: POP
12881: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12882: LD_EXP 9
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PUSH
12891: LD_EXP 9
12895: PUSH
12896: LD_INT 2
12898: ARRAY
12899: AND
12900: PUSH
12901: LD_EXP 9
12905: PUSH
12906: LD_INT 3
12908: ARRAY
12909: AND
12910: PUSH
12911: LD_EXP 9
12915: PUSH
12916: LD_INT 4
12918: ARRAY
12919: AND
12920: PUSH
12921: LD_EXP 9
12925: PUSH
12926: LD_INT 5
12928: ARRAY
12929: AND
12930: IFFALSE 12933
// disable ;
12932: DISABLE
// end ;
12933: PPOPN 4
12935: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12936: LD_EXP 10
12940: PUSH
12941: LD_EXP 11
12945: AND
12946: IFFALSE 13144
12948: GO 12950
12950: DISABLE
12951: LD_INT 0
12953: PPUSH
// begin DialogueOn ;
12954: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12958: LD_EXP 11
12962: PPUSH
12963: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_STRING D5c-Sol1-1
12977: PPUSH
12978: CALL 15541 0 2
12982: ST_TO_ADDR
// if not un then
12983: LD_VAR 0 1
12987: NOT
12988: IFFALSE 13006
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 2
12997: PPUSH
12998: LD_STRING D5c-FSol1-1
13000: PPUSH
13001: CALL 15541 0 2
13005: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13006: LD_EXP 20
13010: PPUSH
13011: LD_STRING D5c-JMM-1
13013: PPUSH
13014: CALL_OW 88
// if IsOk ( Lisa ) then
13018: LD_EXP 21
13022: PPUSH
13023: CALL_OW 302
13027: IFFALSE 13043
// Say ( Lisa , D5d-Lisa-1 ) else
13029: LD_EXP 21
13033: PPUSH
13034: LD_STRING D5d-Lisa-1
13036: PPUSH
13037: CALL_OW 88
13041: GO 13128
// if IsOk ( Cyrus ) then
13043: LD_EXP 24
13047: PPUSH
13048: CALL_OW 302
13052: IFFALSE 13068
// Say ( Cyrus , D5d-Cyrus-1 ) else
13054: LD_EXP 24
13058: PPUSH
13059: LD_STRING D5d-Cyrus-1
13061: PPUSH
13062: CALL_OW 88
13066: GO 13128
// if IsOk ( Gary ) then
13068: LD_EXP 31
13072: PPUSH
13073: CALL_OW 302
13077: IFFALSE 13093
// Say ( Gary , D5d-Gary-1 ) else
13079: LD_EXP 31
13083: PPUSH
13084: LD_STRING D5d-Gary-1
13086: PPUSH
13087: CALL_OW 88
13091: GO 13128
// if GetSex ( un ) = sex_male then
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 258
13102: PUSH
13103: LD_INT 1
13105: EQUAL
13106: IFFALSE 13122
// Say ( un , D5d-Sol1-1 ) else
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_STRING D5d-Sol1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13128
// begin DialogueOff ;
13122: CALL_OW 7
// exit ;
13126: GO 13144
// end ; Say ( JMM , D5d-JMM-1 ) ;
13128: LD_EXP 20
13132: PPUSH
13133: LD_STRING D5d-JMM-1
13135: PPUSH
13136: CALL_OW 88
// DialogueOff ;
13140: CALL_OW 7
// end ;
13144: PPOPN 1
13146: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 17
13152: PPUSH
13153: CALL_OW 294
13157: PUSH
13158: LD_INT 2
13160: GREATEREQUAL
13161: IFFALSE 13282
13163: GO 13165
13165: DISABLE
13166: LD_INT 0
13168: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13169: LD_INT 10
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: LD_INT 10
13180: NEG
13181: PPUSH
13182: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13186: LD_INT 10
13188: PPUSH
13189: LD_INT 5
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13199: LD_INT 10
13201: PPUSH
13202: LD_INT 5
13204: PPUSH
13205: CALL_OW 86
// DialogueOn ;
13209: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13213: LD_ADDR_VAR 0 1
13217: PUSH
13218: LD_INT 1
13220: PPUSH
13221: LD_STRING D6-Sci1-1
13223: PPUSH
13224: CALL 15541 0 2
13228: ST_TO_ADDR
// if un then
13229: LD_VAR 0 1
13233: IFFALSE 13271
// begin Say ( JMM , D6-JMM-1 ) ;
13235: LD_EXP 20
13239: PPUSH
13240: LD_STRING D6-JMM-1
13242: PPUSH
13243: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13247: LD_VAR 0 1
13251: PPUSH
13252: LD_STRING D6-Sci1-2
13254: PPUSH
13255: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13259: LD_EXP 20
13263: PPUSH
13264: LD_STRING D6-JMM-2
13266: PPUSH
13267: CALL_OW 88
// end ; DialogueOff ;
13271: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13275: LD_STRING M3
13277: PPUSH
13278: CALL_OW 337
// end ;
13282: PPOPN 1
13284: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13285: LD_OWVAR 1
13289: PUSH
13290: LD_INT 42000
13292: GREATEREQUAL
13293: PUSH
13294: LD_INT 2
13296: PPUSH
13297: LD_INT 169
13299: PPUSH
13300: LD_INT 90
13302: PPUSH
13303: LD_INT 10
13305: PPUSH
13306: CALL 53553 0 4
13310: PUSH
13311: LD_INT 4
13313: ARRAY
13314: PUSH
13315: LD_INT 0
13317: EQUAL
13318: PUSH
13319: LD_INT 45
13321: PPUSH
13322: CALL_OW 301
13326: OR
13327: PUSH
13328: LD_INT 45
13330: PPUSH
13331: CALL_OW 255
13335: PUSH
13336: LD_INT 1
13338: EQUAL
13339: OR
13340: AND
13341: PUSH
13342: LD_INT 94
13344: PPUSH
13345: CALL_OW 301
13349: NOT
13350: AND
13351: IFFALSE 14477
13353: GO 13355
13355: DISABLE
13356: LD_INT 0
13358: PPUSH
13359: PPUSH
13360: PPUSH
13361: PPUSH
// begin uc_side := 5 ;
13362: LD_ADDR_OWVAR 20
13366: PUSH
13367: LD_INT 5
13369: ST_TO_ADDR
// uc_nation := 2 ;
13370: LD_ADDR_OWVAR 21
13374: PUSH
13375: LD_INT 2
13377: ST_TO_ADDR
// InitHc ;
13378: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13382: LD_INT 1
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 8
13390: PPUSH
13391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13395: LD_ADDR_OWVAR 29
13399: PUSH
13400: LD_INT 12
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING SecondCharsGal
13417: ST_TO_ADDR
// hc_face_number := 7 ;
13418: LD_ADDR_OWVAR 34
13422: PUSH
13423: LD_INT 7
13425: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13426: LD_ADDR_EXP 45
13430: PUSH
13431: CALL_OW 44
13435: ST_TO_ADDR
// InitHc ;
13436: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 16
13445: PPUSH
13446: LD_INT 2
13448: PPUSH
13449: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13453: LD_ADDR_OWVAR 29
13457: PUSH
13458: LD_INT 12
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: ST_TO_ADDR
// hc_name :=  ;
13468: LD_ADDR_OWVAR 26
13472: PUSH
13473: LD_STRING 
13475: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13476: LD_ADDR_EXP 46
13480: PUSH
13481: CALL_OW 44
13485: ST_TO_ADDR
// InitHc ;
13486: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// until not InBattle ( 1 ) ;
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 463
13504: NOT
13505: IFFALSE 13490
// wait ( 0 0$5 ) ;
13507: LD_INT 175
13509: PPUSH
13510: CALL_OW 67
// DialogueOn ;
13514: CALL_OW 6
// InGameOn ;
13518: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 22
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 25
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 25
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 8
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: PUSH
13618: LD_EXP 20
13622: PUSH
13623: LD_EXP 21
13627: PUSH
13628: LD_EXP 22
13632: PUSH
13633: LD_EXP 23
13637: PUSH
13638: LD_EXP 24
13642: PUSH
13643: LD_EXP 25
13647: PUSH
13648: LD_EXP 26
13652: PUSH
13653: LD_EXP 27
13657: PUSH
13658: LD_EXP 28
13662: PUSH
13663: LD_EXP 30
13667: PUSH
13668: LD_EXP 31
13672: PUSH
13673: LD_EXP 32
13677: PUSH
13678: LD_EXP 33
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: DIFF
13698: PPUSH
13699: LD_INT 26
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 72
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: ST_TO_ADDR
// if not un and Brown then
13718: LD_VAR 0 1
13722: NOT
13723: PUSH
13724: LD_EXP 26
13728: AND
13729: IFFALSE 13741
// un := Brown ;
13731: LD_ADDR_VAR 0 1
13735: PUSH
13736: LD_EXP 26
13740: ST_TO_ADDR
// if un then
13741: LD_VAR 0 1
13745: IFFALSE 13771
// begin Say ( un , D7-Sol1-1 ) ;
13747: LD_VAR 0 1
13751: PPUSH
13752: LD_STRING D7-Sol1-1
13754: PPUSH
13755: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13759: LD_EXP 20
13763: PPUSH
13764: LD_STRING D7-JMM-1
13766: PPUSH
13767: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13771: LD_EXP 45
13775: PPUSH
13776: LD_STRING D7-Ar1-1
13778: PPUSH
13779: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13783: LD_EXP 20
13787: PPUSH
13788: LD_STRING D7-JMM-2
13790: PPUSH
13791: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13795: LD_EXP 45
13799: PPUSH
13800: LD_STRING D7-Ar1-2
13802: PPUSH
13803: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13807: LD_EXP 20
13811: PPUSH
13812: LD_STRING D7-JMM-3
13814: PPUSH
13815: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13819: LD_EXP 45
13823: PPUSH
13824: LD_STRING D7-Ar1-3
13826: PPUSH
13827: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13831: LD_EXP 20
13835: PPUSH
13836: LD_STRING D7-JMM-4
13838: PPUSH
13839: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13843: LD_EXP 45
13847: PPUSH
13848: LD_STRING D7-Ar1-4
13850: PPUSH
13851: CALL_OW 94
// InGameOff ;
13855: CALL_OW 9
// DialogueOff ;
13859: CALL_OW 7
// case Query ( QCameras ) of 1 :
13863: LD_STRING QCameras
13865: PPUSH
13866: CALL_OW 97
13870: PUSH
13871: LD_INT 1
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 13882
13879: POP
// ; 2 :
13880: GO 13896
13882: LD_INT 2
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13895
13890: POP
// exit ; end ;
13891: GO 14477
13893: GO 13896
13895: POP
// ChangeMissionObjectives ( MCar ) ;
13896: LD_STRING MCar
13898: PPUSH
13899: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13903: LD_INT 124
13905: PPUSH
13906: LD_INT 90
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 6
13914: NEG
13915: PPUSH
13916: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13920: LD_INT 124
13922: PPUSH
13923: LD_INT 90
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13933: LD_INT 12
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 424
// wait ( 3 ) ;
13943: LD_INT 3
13945: PPUSH
13946: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13950: LD_INT 124
13952: PPUSH
13953: LD_INT 90
13955: PPUSH
13956: CALL_OW 86
// cargo := false ;
13960: LD_ADDR_VAR 0 3
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_INT 12
13982: PPUSH
13983: LD_INT 32
13985: PUSH
13986: LD_INT 3
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: LD_INT 32
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 58
14005: PUSH
14006: EMPTY
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 70
14018: ST_TO_ADDR
// until cargo ;
14019: LD_VAR 0 3
14023: IFFALSE 13968
// cargo := cargo [ 1 ] ;
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14039: LD_VAR 0 3
14043: PPUSH
14044: LD_INT 5
14046: PPUSH
14047: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14051: LD_INT 12
14053: PPUSH
14054: LD_INT 0
14056: PPUSH
14057: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14061: LD_EXP 45
14065: PPUSH
14066: LD_INT 11
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14076: LD_EXP 46
14080: PPUSH
14081: LD_INT 11
14083: PPUSH
14084: LD_INT 0
14086: PPUSH
14087: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14091: LD_EXP 45
14095: PUSH
14096: LD_EXP 46
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: LD_INT 12
14107: PPUSH
14108: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14112: LD_EXP 45
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14126: LD_EXP 45
14130: PUSH
14131: LD_EXP 46
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: LD_INT 209
14142: PPUSH
14143: LD_INT 178
14145: PPUSH
14146: CALL_OW 171
// while ( true ) do
14150: LD_INT 1
14152: IFFALSE 14306
// begin wait ( 0 0$1 ) ;
14154: LD_INT 35
14156: PPUSH
14157: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14161: LD_EXP 45
14165: PPUSH
14166: CALL_OW 314
14170: NOT
14171: PUSH
14172: LD_EXP 46
14176: PPUSH
14177: CALL_OW 314
14181: NOT
14182: OR
14183: IFFALSE 14209
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14185: LD_EXP 45
14189: PUSH
14190: LD_EXP 46
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PPUSH
14199: LD_INT 209
14201: PPUSH
14202: LD_INT 178
14204: PPUSH
14205: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14209: LD_EXP 45
14213: PPUSH
14214: LD_INT 10
14216: PPUSH
14217: CALL_OW 308
14221: IFFALSE 14232
// RemoveUnit ( ar_mechanic ) ;
14223: LD_EXP 45
14227: PPUSH
14228: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14232: LD_EXP 46
14236: PPUSH
14237: LD_INT 10
14239: PPUSH
14240: CALL_OW 308
14244: IFFALSE 14255
// RemoveUnit ( ar_mechanic_friend ) ;
14246: LD_EXP 46
14250: PPUSH
14251: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 10
14262: PPUSH
14263: CALL_OW 308
14267: IFFALSE 14278
// RemoveUnit ( cargo ) ;
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14278: LD_EXP 45
14282: PPUSH
14283: CALL_OW 300
14287: NOT
14288: PUSH
14289: LD_EXP 46
14293: PPUSH
14294: CALL_OW 300
14298: NOT
14299: AND
14300: IFFALSE 14304
// break ;
14302: GO 14306
// end ;
14304: GO 14150
// wait ( 0 0$2 ) ;
14306: LD_INT 70
14308: PPUSH
14309: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14313: LD_EXP 45
14317: PPUSH
14318: LD_STRING D7a-Ar1-1
14320: PPUSH
14321: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 129
14332: PUSH
14333: LD_INT 10
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 103
14342: PUSH
14343: LD_INT 6
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 148
14352: PUSH
14353: LD_INT 47
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 155
14362: PUSH
14363: LD_INT 16
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
// if Difficulty = 1 then
14376: LD_OWVAR 67
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: IFFALSE 14421
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14386: LD_ADDR_VAR 0 4
14390: PUSH
14391: LD_VAR 0 4
14395: PUSH
14396: LD_INT 78
14398: PUSH
14399: LD_INT 7
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 104
14408: PUSH
14409: LD_INT 43
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: ADD
14420: ST_TO_ADDR
// for i in tmp do
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 4
14430: PUSH
14431: FOR_IN
14432: IFFALSE 14465
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14434: LD_VAR 0 2
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 2
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: LD_INT 9
14457: NEG
14458: PPUSH
14459: CALL_OW 330
14463: GO 14431
14465: POP
14466: POP
// CenterOnXY ( 129 , 10 ) ;
14467: LD_INT 129
14469: PPUSH
14470: LD_INT 10
14472: PPUSH
14473: CALL_OW 84
// end ;
14477: PPOPN 4
14479: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14480: LD_EXP 15
14484: PUSH
14485: LD_INT 21000
14487: MINUS
14488: PUSH
14489: LD_OWVAR 1
14493: LESSEQUAL
14494: IFFALSE 14534
14496: GO 14498
14498: DISABLE
// begin powell_warn := true ;
14499: LD_ADDR_EXP 16
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// DialogueOn ;
14507: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14511: LD_EXP 29
14515: PPUSH
14516: LD_STRING D9-Pow-1
14518: PPUSH
14519: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14523: LD_INT 10
14525: PPUSH
14526: CALL_OW 68
// DialogueOff ;
14530: CALL_OW 7
// end ;
14534: END
// every 0 0$1 trigger game_time <= tick do
14535: LD_EXP 15
14539: PUSH
14540: LD_OWVAR 1
14544: LESSEQUAL
14545: IFFALSE 14584
14547: GO 14549
14549: DISABLE
// begin DialogueOn ;
14550: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14554: LD_EXP 29
14558: PPUSH
14559: LD_STRING D9a-Pow-1
14561: PPUSH
14562: CALL_OW 94
// dwait ( 0 0$2 ) ;
14566: LD_INT 70
14568: PPUSH
14569: CALL_OW 68
// DialogueOff ;
14573: CALL_OW 7
// YouLost ( Command ) ;
14577: LD_STRING Command
14579: PPUSH
14580: CALL_OW 104
// end ;
14584: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14585: LD_INT 22
14587: PUSH
14588: LD_INT 2
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 30
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PUSH
14614: LD_INT 0
14616: EQUAL
14617: PUSH
14618: LD_EXP 20
14622: PPUSH
14623: CALL_OW 302
14627: AND
14628: IFFALSE 15360
14630: GO 14632
14632: DISABLE
14633: LD_INT 0
14635: PPUSH
// begin if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14636: LD_OWVAR 1
14640: PUSH
14641: LD_INT 199500
14643: PUSH
14644: LD_INT 178500
14646: PUSH
14647: LD_INT 168000
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: LD_OWVAR 67
14659: ARRAY
14660: LESS
14661: IFFALSE 14675
// AddMedal ( Time1 , 1 ) else
14663: LD_STRING Time1
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 101
14673: GO 14706
// if not powell_warn then
14675: LD_EXP 16
14679: NOT
14680: IFFALSE 14695
// AddMedal ( Time1 , - 1 ) else
14682: LD_STRING Time1
14684: PPUSH
14685: LD_INT 1
14687: NEG
14688: PPUSH
14689: CALL_OW 101
14693: GO 14706
// AddMedal ( Time1 , - 2 ) ;
14695: LD_STRING Time1
14697: PPUSH
14698: LD_INT 2
14700: NEG
14701: PPUSH
14702: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14706: LD_EXP 17
14710: PUSH
14711: LD_INT 5
14713: PUSH
14714: LD_INT 4
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_OWVAR 67
14729: ARRAY
14730: GREATEREQUAL
14731: IFFALSE 14746
// AddMedal ( Destroy , - 2 ) else
14733: LD_STRING Destroy
14735: PPUSH
14736: LD_INT 2
14738: NEG
14739: PPUSH
14740: CALL_OW 101
14744: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14746: LD_INT 22
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 50
14768: PUSH
14769: EMPTY
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: PUSH
14782: LD_INT 25
14784: GREATEREQUAL
14785: IFFALSE 14800
// AddMedal ( Destroy , - 1 ) else
14787: LD_STRING Destroy
14789: PPUSH
14790: LD_INT 1
14792: NEG
14793: PPUSH
14794: CALL_OW 101
14798: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14800: LD_INT 22
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 50
14822: PUSH
14823: EMPTY
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: PUSH
14836: LD_INT 15
14838: GREATEREQUAL
14839: IFFALSE 14853
// AddMedal ( Destroy , 1 ) else
14841: LD_STRING Destroy
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: CALL_OW 101
14851: GO 14863
// AddMedal ( Destroy , 2 ) ;
14853: LD_STRING Destroy
14855: PPUSH
14856: LD_INT 2
14858: PPUSH
14859: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14863: LD_EXP 13
14867: PPUSH
14868: LD_STRING 11_artifact_captured
14870: PPUSH
14871: CALL_OW 39
// if artifact_get then
14875: LD_EXP 13
14879: IFFALSE 14893
// AddMedal ( Artefact , 1 ) else
14881: LD_STRING Artefact
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 101
14891: GO 14904
// AddMedal ( Artefact , - 1 ) ;
14893: LD_STRING Artefact
14895: PPUSH
14896: LD_INT 1
14898: NEG
14899: PPUSH
14900: CALL_OW 101
// GiveMedals ( MAIN ) ;
14904: LD_STRING MAIN
14906: PPUSH
14907: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14911: LD_ADDR_EXP 19
14915: PUSH
14916: LD_EXP 19
14920: PPUSH
14921: LD_INT 51
14923: PUSH
14924: EMPTY
14925: LIST
14926: PPUSH
14927: CALL_OW 72
14931: ST_TO_ADDR
// tmp := JMM ^ selected ;
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_EXP 20
14941: PUSH
14942: LD_EXP 19
14946: ADD
14947: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14957: LD_VAR 0 1
14961: PUSH
14962: LD_EXP 20
14966: PUSH
14967: LD_EXP 21
14971: PUSH
14972: LD_EXP 22
14976: PUSH
14977: LD_EXP 23
14981: PUSH
14982: LD_EXP 24
14986: PUSH
14987: LD_EXP 25
14991: PUSH
14992: LD_EXP 26
14996: PUSH
14997: LD_EXP 27
15001: PUSH
15002: LD_EXP 28
15006: PUSH
15007: LD_EXP 30
15011: PUSH
15012: LD_EXP 31
15016: PUSH
15017: LD_EXP 32
15021: PUSH
15022: LD_EXP 33
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: DIFF
15042: PPUSH
15043: LD_STRING 11c_others
15045: PPUSH
15046: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15050: LD_EXP 20
15054: PPUSH
15055: LD_EXP 3
15059: PUSH
15060: LD_STRING JMM
15062: STR
15063: PPUSH
15064: CALL_OW 38
// if Lisa then
15068: LD_EXP 21
15072: IFFALSE 15092
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15074: LD_EXP 21
15078: PPUSH
15079: LD_EXP 3
15083: PUSH
15084: LD_STRING Lisa
15086: STR
15087: PPUSH
15088: CALL_OW 38
// if Donaldson then
15092: LD_EXP 22
15096: IFFALSE 15116
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15098: LD_EXP 22
15102: PPUSH
15103: LD_EXP 3
15107: PUSH
15108: LD_STRING Donaldson
15110: STR
15111: PPUSH
15112: CALL_OW 38
// if Bobby then
15116: LD_EXP 23
15120: IFFALSE 15140
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15122: LD_EXP 23
15126: PPUSH
15127: LD_EXP 3
15131: PUSH
15132: LD_STRING Bobby
15134: STR
15135: PPUSH
15136: CALL_OW 38
// if Cyrus then
15140: LD_EXP 24
15144: IFFALSE 15164
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15146: LD_EXP 24
15150: PPUSH
15151: LD_EXP 3
15155: PUSH
15156: LD_STRING Cyrus
15158: STR
15159: PPUSH
15160: CALL_OW 38
// if Denis then
15164: LD_EXP 25
15168: IFFALSE 15188
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15170: LD_EXP 25
15174: PPUSH
15175: LD_EXP 3
15179: PUSH
15180: LD_STRING Denis
15182: STR
15183: PPUSH
15184: CALL_OW 38
// if Brown then
15188: LD_EXP 26
15192: IFFALSE 15212
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15194: LD_EXP 26
15198: PPUSH
15199: LD_EXP 3
15203: PUSH
15204: LD_STRING Brown
15206: STR
15207: PPUSH
15208: CALL_OW 38
// if Gladstone then
15212: LD_EXP 27
15216: IFFALSE 15236
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15218: LD_EXP 27
15222: PPUSH
15223: LD_EXP 3
15227: PUSH
15228: LD_STRING Gladstone
15230: STR
15231: PPUSH
15232: CALL_OW 38
// if Houten then
15236: LD_EXP 28
15240: IFFALSE 15260
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15242: LD_EXP 28
15246: PPUSH
15247: LD_EXP 3
15251: PUSH
15252: LD_STRING Houten
15254: STR
15255: PPUSH
15256: CALL_OW 38
// if Cornel then
15260: LD_EXP 30
15264: IFFALSE 15284
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15266: LD_EXP 30
15270: PPUSH
15271: LD_EXP 3
15275: PUSH
15276: LD_STRING Cornell
15278: STR
15279: PPUSH
15280: CALL_OW 38
// if Gary then
15284: LD_EXP 31
15288: IFFALSE 15308
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15290: LD_EXP 31
15294: PPUSH
15295: LD_EXP 3
15299: PUSH
15300: LD_STRING Gary
15302: STR
15303: PPUSH
15304: CALL_OW 38
// if Frank then
15308: LD_EXP 32
15312: IFFALSE 15332
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15314: LD_EXP 32
15318: PPUSH
15319: LD_EXP 3
15323: PUSH
15324: LD_STRING Frank
15326: STR
15327: PPUSH
15328: CALL_OW 38
// if Kikuchi then
15332: LD_EXP 33
15336: IFFALSE 15356
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15338: LD_EXP 33
15342: PPUSH
15343: LD_EXP 3
15347: PUSH
15348: LD_STRING Kikuchi
15350: STR
15351: PPUSH
15352: CALL_OW 38
// YouWin ;
15356: CALL_OW 103
// end ;
15360: PPOPN 1
15362: END
// export function CanSayRand ( side ) ; begin
15363: LD_INT 0
15365: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15366: LD_ADDR_VAR 0 2
15370: PUSH
15371: LD_INT 52
15373: PUSH
15374: EMPTY
15375: LIST
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 1
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 25
15414: PUSH
15415: LD_INT 3
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 25
15424: PUSH
15425: LD_INT 4
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: PUSH
15449: LD_EXP 20
15453: PUSH
15454: LD_EXP 32
15458: PUSH
15459: LD_EXP 21
15463: PUSH
15464: LD_EXP 22
15468: PUSH
15469: LD_EXP 23
15473: PUSH
15474: LD_EXP 24
15478: PUSH
15479: LD_EXP 25
15483: PUSH
15484: LD_EXP 26
15488: PUSH
15489: LD_EXP 27
15493: PUSH
15494: LD_EXP 28
15498: PUSH
15499: LD_EXP 29
15503: PUSH
15504: LD_EXP 30
15508: PUSH
15509: LD_EXP 31
15513: PUSH
15514: LD_EXP 33
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: DIFF
15535: ST_TO_ADDR
// end ;
15536: LD_VAR 0 2
15540: RET
// export function SayRand ( sex , dial ) ; begin
15541: LD_INT 0
15543: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15544: LD_ADDR_VAR 0 3
15548: PUSH
15549: LD_INT 52
15551: PUSH
15552: EMPTY
15553: LIST
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 26
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 25
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 25
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 25
15612: PUSH
15613: LD_INT 4
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: LD_EXP 20
15642: PUSH
15643: LD_EXP 32
15647: PUSH
15648: LD_EXP 21
15652: PUSH
15653: LD_EXP 22
15657: PUSH
15658: LD_EXP 23
15662: PUSH
15663: LD_EXP 24
15667: PUSH
15668: LD_EXP 25
15672: PUSH
15673: LD_EXP 26
15677: PUSH
15678: LD_EXP 27
15682: PUSH
15683: LD_EXP 28
15687: PUSH
15688: LD_EXP 29
15692: PUSH
15693: LD_EXP 30
15697: PUSH
15698: LD_EXP 31
15702: PUSH
15703: LD_EXP 33
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: DIFF
15724: ST_TO_ADDR
// if not result then
15725: LD_VAR 0 3
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15762
// result := result [ 1 ] ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: ST_TO_ADDR
// Say ( result , dial ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: CALL_OW 88
// end ;
15762: LD_VAR 0 3
15766: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15767: LD_INT 0
15769: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15770: LD_ADDR_VAR 0 4
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 26
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 2
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 69
15856: PUSH
15857: LD_EXP 20
15861: PUSH
15862: LD_EXP 32
15866: PUSH
15867: LD_EXP 21
15871: PUSH
15872: LD_EXP 22
15876: PUSH
15877: LD_EXP 23
15881: PUSH
15882: LD_EXP 24
15886: PUSH
15887: LD_EXP 25
15891: PUSH
15892: LD_EXP 26
15896: PUSH
15897: LD_EXP 27
15901: PUSH
15902: LD_EXP 28
15906: PUSH
15907: LD_EXP 29
15911: PUSH
15912: LD_EXP 30
15916: PUSH
15917: LD_EXP 31
15921: PUSH
15922: LD_EXP 33
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: PUSH
15943: LD_VAR 0 3
15947: ADD
15948: DIFF
15949: ST_TO_ADDR
// if not result then
15950: LD_VAR 0 4
15954: NOT
15955: IFFALSE 15959
// exit ;
15957: GO 15987
// result := result [ 1 ] ;
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 4
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: ST_TO_ADDR
// Say ( result , dial ) ;
15973: LD_VAR 0 4
15977: PPUSH
15978: LD_VAR 0 2
15982: PPUSH
15983: CALL_OW 88
// end ; end_of_file
15987: LD_VAR 0 4
15991: RET
// export function CustomEvent ( event ) ; begin
15992: LD_INT 0
15994: PPUSH
// end ;
15995: LD_VAR 0 2
15999: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 255
16009: PUSH
16010: LD_INT 1
16012: EQUAL
16013: IFFALSE 16023
// artifact_get := true ;
16015: LD_ADDR_EXP 13
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 2
16035: EQUAL
16036: IFFALSE 16054
// begin artifact_get := false ;
16038: LD_ADDR_EXP 13
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
// artifact_stolen := true ;
16046: LD_ADDR_EXP 12
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16054: LD_ADDR_EXP 14
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// end ;
16062: PPOPN 2
16064: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16065: LD_ADDR_EXP 14
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// end ;
16073: PPOPN 2
16075: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16076: LD_VAR 0 1
16080: PUSH
16081: LD_EXP 20
16085: EQUAL
16086: IFFALSE 16097
// begin YouLost ( JMM ) ;
16088: LD_STRING JMM
16090: PPUSH
16091: CALL_OW 104
// exit ;
16095: GO 16229
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16097: LD_VAR 0 1
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: LD_INT 25
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 25
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 25
16147: PUSH
16148: LD_INT 3
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 25
16157: PUSH
16158: LD_INT 4
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 25
16177: PUSH
16178: LD_INT 8
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: IN
16204: IFFALSE 16220
// loses_counter := loses_counter + 1 ;
16206: LD_ADDR_EXP 17
16210: PUSH
16211: LD_EXP 17
16215: PUSH
16216: LD_INT 1
16218: PLUS
16219: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL 43305 0 1
// end ;
16229: PPOPN 1
16231: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_VAR 0 2
16241: PPUSH
16242: CALL 45284 0 2
// end ;
16246: PPOPN 2
16248: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL 44593 0 1
// end ;
16258: PPOPN 1
16260: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16261: LD_VAR 0 1
16265: PPUSH
16266: LD_VAR 0 2
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_VAR 0 4
16280: PPUSH
16281: LD_VAR 0 5
16285: PPUSH
16286: CALL 42621 0 5
// end ;
16290: PPOPN 5
16292: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16293: LD_VAR 0 1
16297: PPUSH
16298: LD_VAR 0 2
16302: PPUSH
16303: CALL 42211 0 2
// end ;
16307: PPOPN 2
16309: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 247
16319: PUSH
16320: LD_INT 2
16322: EQUAL
16323: IFFALSE 16327
// exit ;
16325: GO 16344
// if not kamikazed then
16327: LD_EXP 11
16331: NOT
16332: IFFALSE 16344
// kamikazed := unit ;
16334: LD_ADDR_EXP 11
16338: PUSH
16339: LD_VAR 0 1
16343: ST_TO_ADDR
// end ;
16344: PPOPN 1
16346: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16347: LD_INT 0
16349: PPUSH
16350: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: CALL 42049 0 4
// end ;
16375: PPOPN 6
16377: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_VAR 0 2
16387: PPUSH
16388: LD_VAR 0 3
16392: PPUSH
16393: CALL 41824 0 3
// end ;
16397: PPOPN 3
16399: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_VAR 0 2
16409: PPUSH
16410: CALL 43001 0 2
// end ;
16414: PPOPN 2
16416: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL 41518 0 2
// end ;
16431: PPOPN 2
16433: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16434: LD_VAR 0 1
16438: PPUSH
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL 41709 0 2
// end ;
16448: PPOPN 2
16450: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL 44352 0 1
// end ;
16460: PPOPN 1
16462: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL 45545 0 2
// end ;
16477: PPOPN 2
16479: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_VAR 0 4
16499: PPUSH
16500: CALL 45761 0 4
// end ; end_of_file
16504: PPOPN 4
16506: END
// every 0 0$1 trigger game do
16507: LD_EXP 2
16511: IFFALSE 16541
16513: GO 16515
16515: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16516: LD_INT 7
16518: PUSH
16519: LD_INT 6
16521: PUSH
16522: LD_INT 4
16524: PUSH
16525: LD_INT 6
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: PPUSH
16534: LD_INT 1750
16536: PPUSH
16537: CALL 16542 0 2
16541: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16542: LD_INT 0
16544: PPUSH
16545: PPUSH
16546: PPUSH
// if not areas then
16547: LD_VAR 0 1
16551: NOT
16552: IFFALSE 16556
// exit ;
16554: GO 16686
// repeat wait ( time ) ;
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16565: LD_ADDR_VAR 0 5
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_INT 90
16575: PPUSH
16576: CALL_OW 12
16580: ST_TO_ADDR
// for i in areas do
16581: LD_ADDR_VAR 0 4
16585: PUSH
16586: LD_VAR 0 1
16590: PUSH
16591: FOR_IN
16592: IFFALSE 16645
// begin if Prob ( p ) then
16594: LD_VAR 0 5
16598: PPUSH
16599: CALL_OW 13
16603: IFFALSE 16643
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 5
16610: PPUSH
16611: CALL_OW 12
16615: PPUSH
16616: LD_VAR 0 4
16620: PPUSH
16621: LD_INT 1
16623: PPUSH
16624: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16628: LD_INT 385
16630: PPUSH
16631: LD_INT 595
16633: PPUSH
16634: CALL_OW 12
16638: PPUSH
16639: CALL_OW 67
// end ; end ;
16643: GO 16591
16645: POP
16646: POP
// time := time + 0 0$3 ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 105
16659: PLUS
16660: ST_TO_ADDR
// if time > 7 7$00 then
16661: LD_VAR 0 2
16665: PUSH
16666: LD_INT 14700
16668: GREATER
16669: IFFALSE 16679
// time := 0 0$40 ;
16671: LD_ADDR_VAR 0 2
16675: PUSH
16676: LD_INT 1400
16678: ST_TO_ADDR
// until not game ;
16679: LD_EXP 2
16683: NOT
16684: IFFALSE 16556
// end ; end_of_file
16686: LD_VAR 0 3
16690: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16691: LD_INT 0
16693: PPUSH
16694: PPUSH
// skirmish := false ;
16695: LD_ADDR_EXP 47
16699: PUSH
16700: LD_INT 0
16702: ST_TO_ADDR
// debug_mc := false ;
16703: LD_ADDR_EXP 48
16707: PUSH
16708: LD_INT 0
16710: ST_TO_ADDR
// mc_bases := [ ] ;
16711: LD_ADDR_EXP 49
16715: PUSH
16716: EMPTY
16717: ST_TO_ADDR
// mc_sides := [ ] ;
16718: LD_ADDR_EXP 75
16722: PUSH
16723: EMPTY
16724: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16725: LD_ADDR_EXP 50
16729: PUSH
16730: EMPTY
16731: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16732: LD_ADDR_EXP 51
16736: PUSH
16737: EMPTY
16738: ST_TO_ADDR
// mc_need_heal := [ ] ;
16739: LD_ADDR_EXP 52
16743: PUSH
16744: EMPTY
16745: ST_TO_ADDR
// mc_healers := [ ] ;
16746: LD_ADDR_EXP 53
16750: PUSH
16751: EMPTY
16752: ST_TO_ADDR
// mc_build_list := [ ] ;
16753: LD_ADDR_EXP 54
16757: PUSH
16758: EMPTY
16759: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16760: LD_ADDR_EXP 81
16764: PUSH
16765: EMPTY
16766: ST_TO_ADDR
// mc_builders := [ ] ;
16767: LD_ADDR_EXP 55
16771: PUSH
16772: EMPTY
16773: ST_TO_ADDR
// mc_construct_list := [ ] ;
16774: LD_ADDR_EXP 56
16778: PUSH
16779: EMPTY
16780: ST_TO_ADDR
// mc_turret_list := [ ] ;
16781: LD_ADDR_EXP 57
16785: PUSH
16786: EMPTY
16787: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16788: LD_ADDR_EXP 58
16792: PUSH
16793: EMPTY
16794: ST_TO_ADDR
// mc_miners := [ ] ;
16795: LD_ADDR_EXP 63
16799: PUSH
16800: EMPTY
16801: ST_TO_ADDR
// mc_mines := [ ] ;
16802: LD_ADDR_EXP 62
16806: PUSH
16807: EMPTY
16808: ST_TO_ADDR
// mc_minefields := [ ] ;
16809: LD_ADDR_EXP 64
16813: PUSH
16814: EMPTY
16815: ST_TO_ADDR
// mc_crates := [ ] ;
16816: LD_ADDR_EXP 65
16820: PUSH
16821: EMPTY
16822: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16823: LD_ADDR_EXP 66
16827: PUSH
16828: EMPTY
16829: ST_TO_ADDR
// mc_crates_area := [ ] ;
16830: LD_ADDR_EXP 67
16834: PUSH
16835: EMPTY
16836: ST_TO_ADDR
// mc_vehicles := [ ] ;
16837: LD_ADDR_EXP 68
16841: PUSH
16842: EMPTY
16843: ST_TO_ADDR
// mc_attack := [ ] ;
16844: LD_ADDR_EXP 69
16848: PUSH
16849: EMPTY
16850: ST_TO_ADDR
// mc_produce := [ ] ;
16851: LD_ADDR_EXP 70
16855: PUSH
16856: EMPTY
16857: ST_TO_ADDR
// mc_defender := [ ] ;
16858: LD_ADDR_EXP 71
16862: PUSH
16863: EMPTY
16864: ST_TO_ADDR
// mc_parking := [ ] ;
16865: LD_ADDR_EXP 73
16869: PUSH
16870: EMPTY
16871: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16872: LD_ADDR_EXP 59
16876: PUSH
16877: EMPTY
16878: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16879: LD_ADDR_EXP 61
16883: PUSH
16884: EMPTY
16885: ST_TO_ADDR
// mc_scan := [ ] ;
16886: LD_ADDR_EXP 72
16890: PUSH
16891: EMPTY
16892: ST_TO_ADDR
// mc_scan_area := [ ] ;
16893: LD_ADDR_EXP 74
16897: PUSH
16898: EMPTY
16899: ST_TO_ADDR
// mc_tech := [ ] ;
16900: LD_ADDR_EXP 76
16904: PUSH
16905: EMPTY
16906: ST_TO_ADDR
// mc_class := [ ] ;
16907: LD_ADDR_EXP 90
16911: PUSH
16912: EMPTY
16913: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16914: LD_ADDR_EXP 91
16918: PUSH
16919: EMPTY
16920: ST_TO_ADDR
// end ;
16921: LD_VAR 0 1
16925: RET
// export function MC_Kill ( base ) ; begin
16926: LD_INT 0
16928: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16929: LD_ADDR_EXP 49
16933: PUSH
16934: LD_EXP 49
16938: PPUSH
16939: LD_VAR 0 1
16943: PPUSH
16944: EMPTY
16945: PPUSH
16946: CALL_OW 1
16950: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16951: LD_ADDR_EXP 50
16955: PUSH
16956: LD_EXP 50
16960: PPUSH
16961: LD_VAR 0 1
16965: PPUSH
16966: EMPTY
16967: PPUSH
16968: CALL_OW 1
16972: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16973: LD_ADDR_EXP 51
16977: PUSH
16978: LD_EXP 51
16982: PPUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: EMPTY
16989: PPUSH
16990: CALL_OW 1
16994: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16995: LD_ADDR_EXP 52
16999: PUSH
17000: LD_EXP 52
17004: PPUSH
17005: LD_VAR 0 1
17009: PPUSH
17010: EMPTY
17011: PPUSH
17012: CALL_OW 1
17016: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17017: LD_ADDR_EXP 53
17021: PUSH
17022: LD_EXP 53
17026: PPUSH
17027: LD_VAR 0 1
17031: PPUSH
17032: EMPTY
17033: PPUSH
17034: CALL_OW 1
17038: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17039: LD_ADDR_EXP 54
17043: PUSH
17044: LD_EXP 54
17048: PPUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: EMPTY
17055: PPUSH
17056: CALL_OW 1
17060: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17061: LD_ADDR_EXP 55
17065: PUSH
17066: LD_EXP 55
17070: PPUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: EMPTY
17077: PPUSH
17078: CALL_OW 1
17082: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17083: LD_ADDR_EXP 56
17087: PUSH
17088: LD_EXP 56
17092: PPUSH
17093: LD_VAR 0 1
17097: PPUSH
17098: EMPTY
17099: PPUSH
17100: CALL_OW 1
17104: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17105: LD_ADDR_EXP 57
17109: PUSH
17110: LD_EXP 57
17114: PPUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: EMPTY
17121: PPUSH
17122: CALL_OW 1
17126: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17127: LD_ADDR_EXP 58
17131: PUSH
17132: LD_EXP 58
17136: PPUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: EMPTY
17143: PPUSH
17144: CALL_OW 1
17148: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17149: LD_ADDR_EXP 59
17153: PUSH
17154: LD_EXP 59
17158: PPUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: EMPTY
17165: PPUSH
17166: CALL_OW 1
17170: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17171: LD_ADDR_EXP 60
17175: PUSH
17176: LD_EXP 60
17180: PPUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: LD_INT 0
17188: PPUSH
17189: CALL_OW 1
17193: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17194: LD_ADDR_EXP 61
17198: PUSH
17199: LD_EXP 61
17203: PPUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: EMPTY
17210: PPUSH
17211: CALL_OW 1
17215: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17216: LD_ADDR_EXP 62
17220: PUSH
17221: LD_EXP 62
17225: PPUSH
17226: LD_VAR 0 1
17230: PPUSH
17231: EMPTY
17232: PPUSH
17233: CALL_OW 1
17237: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17238: LD_ADDR_EXP 63
17242: PUSH
17243: LD_EXP 63
17247: PPUSH
17248: LD_VAR 0 1
17252: PPUSH
17253: EMPTY
17254: PPUSH
17255: CALL_OW 1
17259: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17260: LD_ADDR_EXP 64
17264: PUSH
17265: LD_EXP 64
17269: PPUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: EMPTY
17276: PPUSH
17277: CALL_OW 1
17281: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17282: LD_ADDR_EXP 65
17286: PUSH
17287: LD_EXP 65
17291: PPUSH
17292: LD_VAR 0 1
17296: PPUSH
17297: EMPTY
17298: PPUSH
17299: CALL_OW 1
17303: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17304: LD_ADDR_EXP 66
17308: PUSH
17309: LD_EXP 66
17313: PPUSH
17314: LD_VAR 0 1
17318: PPUSH
17319: EMPTY
17320: PPUSH
17321: CALL_OW 1
17325: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17326: LD_ADDR_EXP 67
17330: PUSH
17331: LD_EXP 67
17335: PPUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: EMPTY
17342: PPUSH
17343: CALL_OW 1
17347: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17348: LD_ADDR_EXP 68
17352: PUSH
17353: LD_EXP 68
17357: PPUSH
17358: LD_VAR 0 1
17362: PPUSH
17363: EMPTY
17364: PPUSH
17365: CALL_OW 1
17369: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17370: LD_ADDR_EXP 69
17374: PUSH
17375: LD_EXP 69
17379: PPUSH
17380: LD_VAR 0 1
17384: PPUSH
17385: EMPTY
17386: PPUSH
17387: CALL_OW 1
17391: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17392: LD_ADDR_EXP 70
17396: PUSH
17397: LD_EXP 70
17401: PPUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: EMPTY
17408: PPUSH
17409: CALL_OW 1
17413: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17414: LD_ADDR_EXP 71
17418: PUSH
17419: LD_EXP 71
17423: PPUSH
17424: LD_VAR 0 1
17428: PPUSH
17429: EMPTY
17430: PPUSH
17431: CALL_OW 1
17435: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17436: LD_ADDR_EXP 72
17440: PUSH
17441: LD_EXP 72
17445: PPUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: EMPTY
17452: PPUSH
17453: CALL_OW 1
17457: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17458: LD_ADDR_EXP 73
17462: PUSH
17463: LD_EXP 73
17467: PPUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: EMPTY
17474: PPUSH
17475: CALL_OW 1
17479: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17480: LD_ADDR_EXP 74
17484: PUSH
17485: LD_EXP 74
17489: PPUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: EMPTY
17496: PPUSH
17497: CALL_OW 1
17501: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17502: LD_ADDR_EXP 76
17506: PUSH
17507: LD_EXP 76
17511: PPUSH
17512: LD_VAR 0 1
17516: PPUSH
17517: EMPTY
17518: PPUSH
17519: CALL_OW 1
17523: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17524: LD_ADDR_EXP 78
17528: PUSH
17529: LD_EXP 78
17533: PPUSH
17534: LD_VAR 0 1
17538: PPUSH
17539: EMPTY
17540: PPUSH
17541: CALL_OW 1
17545: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17546: LD_ADDR_EXP 79
17550: PUSH
17551: LD_EXP 79
17555: PPUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: EMPTY
17562: PPUSH
17563: CALL_OW 1
17567: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17568: LD_ADDR_EXP 80
17572: PUSH
17573: LD_EXP 80
17577: PPUSH
17578: LD_VAR 0 1
17582: PPUSH
17583: EMPTY
17584: PPUSH
17585: CALL_OW 1
17589: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17590: LD_ADDR_EXP 81
17594: PUSH
17595: LD_EXP 81
17599: PPUSH
17600: LD_VAR 0 1
17604: PPUSH
17605: EMPTY
17606: PPUSH
17607: CALL_OW 1
17611: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17612: LD_ADDR_EXP 82
17616: PUSH
17617: LD_EXP 82
17621: PPUSH
17622: LD_VAR 0 1
17626: PPUSH
17627: EMPTY
17628: PPUSH
17629: CALL_OW 1
17633: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17634: LD_ADDR_EXP 83
17638: PUSH
17639: LD_EXP 83
17643: PPUSH
17644: LD_VAR 0 1
17648: PPUSH
17649: EMPTY
17650: PPUSH
17651: CALL_OW 1
17655: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17656: LD_ADDR_EXP 84
17660: PUSH
17661: LD_EXP 84
17665: PPUSH
17666: LD_VAR 0 1
17670: PPUSH
17671: EMPTY
17672: PPUSH
17673: CALL_OW 1
17677: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17678: LD_ADDR_EXP 85
17682: PUSH
17683: LD_EXP 85
17687: PPUSH
17688: LD_VAR 0 1
17692: PPUSH
17693: EMPTY
17694: PPUSH
17695: CALL_OW 1
17699: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17700: LD_ADDR_EXP 86
17704: PUSH
17705: LD_EXP 86
17709: PPUSH
17710: LD_VAR 0 1
17714: PPUSH
17715: EMPTY
17716: PPUSH
17717: CALL_OW 1
17721: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17722: LD_ADDR_EXP 87
17726: PUSH
17727: LD_EXP 87
17731: PPUSH
17732: LD_VAR 0 1
17736: PPUSH
17737: EMPTY
17738: PPUSH
17739: CALL_OW 1
17743: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17744: LD_ADDR_EXP 88
17748: PUSH
17749: LD_EXP 88
17753: PPUSH
17754: LD_VAR 0 1
17758: PPUSH
17759: EMPTY
17760: PPUSH
17761: CALL_OW 1
17765: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17766: LD_ADDR_EXP 89
17770: PUSH
17771: LD_EXP 89
17775: PPUSH
17776: LD_VAR 0 1
17780: PPUSH
17781: EMPTY
17782: PPUSH
17783: CALL_OW 1
17787: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17788: LD_ADDR_EXP 90
17792: PUSH
17793: LD_EXP 90
17797: PPUSH
17798: LD_VAR 0 1
17802: PPUSH
17803: EMPTY
17804: PPUSH
17805: CALL_OW 1
17809: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17810: LD_ADDR_EXP 91
17814: PUSH
17815: LD_EXP 91
17819: PPUSH
17820: LD_VAR 0 1
17824: PPUSH
17825: LD_INT 0
17827: PPUSH
17828: CALL_OW 1
17832: ST_TO_ADDR
// end ;
17833: LD_VAR 0 2
17837: RET
// export function MC_Add ( side , units ) ; var base ; begin
17838: LD_INT 0
17840: PPUSH
17841: PPUSH
// base := mc_bases + 1 ;
17842: LD_ADDR_VAR 0 4
17846: PUSH
17847: LD_EXP 49
17851: PUSH
17852: LD_INT 1
17854: PLUS
17855: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
17856: LD_ADDR_EXP 75
17860: PUSH
17861: LD_EXP 75
17865: PPUSH
17866: LD_VAR 0 4
17870: PPUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 1
17880: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
17881: LD_ADDR_EXP 49
17885: PUSH
17886: LD_EXP 49
17890: PPUSH
17891: LD_VAR 0 4
17895: PPUSH
17896: LD_VAR 0 2
17900: PPUSH
17901: CALL_OW 1
17905: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17906: LD_ADDR_EXP 50
17910: PUSH
17911: LD_EXP 50
17915: PPUSH
17916: LD_VAR 0 4
17920: PPUSH
17921: EMPTY
17922: PPUSH
17923: CALL_OW 1
17927: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17928: LD_ADDR_EXP 51
17932: PUSH
17933: LD_EXP 51
17937: PPUSH
17938: LD_VAR 0 4
17942: PPUSH
17943: EMPTY
17944: PPUSH
17945: CALL_OW 1
17949: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17950: LD_ADDR_EXP 52
17954: PUSH
17955: LD_EXP 52
17959: PPUSH
17960: LD_VAR 0 4
17964: PPUSH
17965: EMPTY
17966: PPUSH
17967: CALL_OW 1
17971: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17972: LD_ADDR_EXP 53
17976: PUSH
17977: LD_EXP 53
17981: PPUSH
17982: LD_VAR 0 4
17986: PPUSH
17987: EMPTY
17988: PPUSH
17989: CALL_OW 1
17993: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17994: LD_ADDR_EXP 54
17998: PUSH
17999: LD_EXP 54
18003: PPUSH
18004: LD_VAR 0 4
18008: PPUSH
18009: EMPTY
18010: PPUSH
18011: CALL_OW 1
18015: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18016: LD_ADDR_EXP 55
18020: PUSH
18021: LD_EXP 55
18025: PPUSH
18026: LD_VAR 0 4
18030: PPUSH
18031: EMPTY
18032: PPUSH
18033: CALL_OW 1
18037: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18038: LD_ADDR_EXP 56
18042: PUSH
18043: LD_EXP 56
18047: PPUSH
18048: LD_VAR 0 4
18052: PPUSH
18053: EMPTY
18054: PPUSH
18055: CALL_OW 1
18059: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18060: LD_ADDR_EXP 57
18064: PUSH
18065: LD_EXP 57
18069: PPUSH
18070: LD_VAR 0 4
18074: PPUSH
18075: EMPTY
18076: PPUSH
18077: CALL_OW 1
18081: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18082: LD_ADDR_EXP 58
18086: PUSH
18087: LD_EXP 58
18091: PPUSH
18092: LD_VAR 0 4
18096: PPUSH
18097: EMPTY
18098: PPUSH
18099: CALL_OW 1
18103: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18104: LD_ADDR_EXP 59
18108: PUSH
18109: LD_EXP 59
18113: PPUSH
18114: LD_VAR 0 4
18118: PPUSH
18119: EMPTY
18120: PPUSH
18121: CALL_OW 1
18125: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18126: LD_ADDR_EXP 60
18130: PUSH
18131: LD_EXP 60
18135: PPUSH
18136: LD_VAR 0 4
18140: PPUSH
18141: LD_INT 0
18143: PPUSH
18144: CALL_OW 1
18148: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18149: LD_ADDR_EXP 61
18153: PUSH
18154: LD_EXP 61
18158: PPUSH
18159: LD_VAR 0 4
18163: PPUSH
18164: EMPTY
18165: PPUSH
18166: CALL_OW 1
18170: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18171: LD_ADDR_EXP 62
18175: PUSH
18176: LD_EXP 62
18180: PPUSH
18181: LD_VAR 0 4
18185: PPUSH
18186: EMPTY
18187: PPUSH
18188: CALL_OW 1
18192: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18193: LD_ADDR_EXP 63
18197: PUSH
18198: LD_EXP 63
18202: PPUSH
18203: LD_VAR 0 4
18207: PPUSH
18208: EMPTY
18209: PPUSH
18210: CALL_OW 1
18214: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18215: LD_ADDR_EXP 64
18219: PUSH
18220: LD_EXP 64
18224: PPUSH
18225: LD_VAR 0 4
18229: PPUSH
18230: EMPTY
18231: PPUSH
18232: CALL_OW 1
18236: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18237: LD_ADDR_EXP 65
18241: PUSH
18242: LD_EXP 65
18246: PPUSH
18247: LD_VAR 0 4
18251: PPUSH
18252: EMPTY
18253: PPUSH
18254: CALL_OW 1
18258: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18259: LD_ADDR_EXP 66
18263: PUSH
18264: LD_EXP 66
18268: PPUSH
18269: LD_VAR 0 4
18273: PPUSH
18274: EMPTY
18275: PPUSH
18276: CALL_OW 1
18280: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18281: LD_ADDR_EXP 67
18285: PUSH
18286: LD_EXP 67
18290: PPUSH
18291: LD_VAR 0 4
18295: PPUSH
18296: EMPTY
18297: PPUSH
18298: CALL_OW 1
18302: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18303: LD_ADDR_EXP 68
18307: PUSH
18308: LD_EXP 68
18312: PPUSH
18313: LD_VAR 0 4
18317: PPUSH
18318: EMPTY
18319: PPUSH
18320: CALL_OW 1
18324: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18325: LD_ADDR_EXP 69
18329: PUSH
18330: LD_EXP 69
18334: PPUSH
18335: LD_VAR 0 4
18339: PPUSH
18340: EMPTY
18341: PPUSH
18342: CALL_OW 1
18346: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18347: LD_ADDR_EXP 70
18351: PUSH
18352: LD_EXP 70
18356: PPUSH
18357: LD_VAR 0 4
18361: PPUSH
18362: EMPTY
18363: PPUSH
18364: CALL_OW 1
18368: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18369: LD_ADDR_EXP 71
18373: PUSH
18374: LD_EXP 71
18378: PPUSH
18379: LD_VAR 0 4
18383: PPUSH
18384: EMPTY
18385: PPUSH
18386: CALL_OW 1
18390: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18391: LD_ADDR_EXP 72
18395: PUSH
18396: LD_EXP 72
18400: PPUSH
18401: LD_VAR 0 4
18405: PPUSH
18406: EMPTY
18407: PPUSH
18408: CALL_OW 1
18412: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18413: LD_ADDR_EXP 73
18417: PUSH
18418: LD_EXP 73
18422: PPUSH
18423: LD_VAR 0 4
18427: PPUSH
18428: EMPTY
18429: PPUSH
18430: CALL_OW 1
18434: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18435: LD_ADDR_EXP 74
18439: PUSH
18440: LD_EXP 74
18444: PPUSH
18445: LD_VAR 0 4
18449: PPUSH
18450: EMPTY
18451: PPUSH
18452: CALL_OW 1
18456: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18457: LD_ADDR_EXP 76
18461: PUSH
18462: LD_EXP 76
18466: PPUSH
18467: LD_VAR 0 4
18471: PPUSH
18472: EMPTY
18473: PPUSH
18474: CALL_OW 1
18478: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18479: LD_ADDR_EXP 78
18483: PUSH
18484: LD_EXP 78
18488: PPUSH
18489: LD_VAR 0 4
18493: PPUSH
18494: EMPTY
18495: PPUSH
18496: CALL_OW 1
18500: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18501: LD_ADDR_EXP 79
18505: PUSH
18506: LD_EXP 79
18510: PPUSH
18511: LD_VAR 0 4
18515: PPUSH
18516: EMPTY
18517: PPUSH
18518: CALL_OW 1
18522: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18523: LD_ADDR_EXP 80
18527: PUSH
18528: LD_EXP 80
18532: PPUSH
18533: LD_VAR 0 4
18537: PPUSH
18538: EMPTY
18539: PPUSH
18540: CALL_OW 1
18544: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18545: LD_ADDR_EXP 81
18549: PUSH
18550: LD_EXP 81
18554: PPUSH
18555: LD_VAR 0 4
18559: PPUSH
18560: EMPTY
18561: PPUSH
18562: CALL_OW 1
18566: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18567: LD_ADDR_EXP 82
18571: PUSH
18572: LD_EXP 82
18576: PPUSH
18577: LD_VAR 0 4
18581: PPUSH
18582: EMPTY
18583: PPUSH
18584: CALL_OW 1
18588: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18589: LD_ADDR_EXP 83
18593: PUSH
18594: LD_EXP 83
18598: PPUSH
18599: LD_VAR 0 4
18603: PPUSH
18604: EMPTY
18605: PPUSH
18606: CALL_OW 1
18610: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18611: LD_ADDR_EXP 84
18615: PUSH
18616: LD_EXP 84
18620: PPUSH
18621: LD_VAR 0 4
18625: PPUSH
18626: EMPTY
18627: PPUSH
18628: CALL_OW 1
18632: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18633: LD_ADDR_EXP 85
18637: PUSH
18638: LD_EXP 85
18642: PPUSH
18643: LD_VAR 0 4
18647: PPUSH
18648: EMPTY
18649: PPUSH
18650: CALL_OW 1
18654: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18655: LD_ADDR_EXP 86
18659: PUSH
18660: LD_EXP 86
18664: PPUSH
18665: LD_VAR 0 4
18669: PPUSH
18670: EMPTY
18671: PPUSH
18672: CALL_OW 1
18676: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18677: LD_ADDR_EXP 87
18681: PUSH
18682: LD_EXP 87
18686: PPUSH
18687: LD_VAR 0 4
18691: PPUSH
18692: EMPTY
18693: PPUSH
18694: CALL_OW 1
18698: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18699: LD_ADDR_EXP 88
18703: PUSH
18704: LD_EXP 88
18708: PPUSH
18709: LD_VAR 0 4
18713: PPUSH
18714: EMPTY
18715: PPUSH
18716: CALL_OW 1
18720: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18721: LD_ADDR_EXP 89
18725: PUSH
18726: LD_EXP 89
18730: PPUSH
18731: LD_VAR 0 4
18735: PPUSH
18736: EMPTY
18737: PPUSH
18738: CALL_OW 1
18742: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18743: LD_ADDR_EXP 90
18747: PUSH
18748: LD_EXP 90
18752: PPUSH
18753: LD_VAR 0 4
18757: PPUSH
18758: EMPTY
18759: PPUSH
18760: CALL_OW 1
18764: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18765: LD_ADDR_EXP 91
18769: PUSH
18770: LD_EXP 91
18774: PPUSH
18775: LD_VAR 0 4
18779: PPUSH
18780: LD_INT 0
18782: PPUSH
18783: CALL_OW 1
18787: ST_TO_ADDR
// result := base ;
18788: LD_ADDR_VAR 0 3
18792: PUSH
18793: LD_VAR 0 4
18797: ST_TO_ADDR
// end ;
18798: LD_VAR 0 3
18802: RET
// export function MC_Start ( ) ; var i ; begin
18803: LD_INT 0
18805: PPUSH
18806: PPUSH
// for i = 1 to mc_bases do
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: DOUBLE
18813: LD_INT 1
18815: DEC
18816: ST_TO_ADDR
18817: LD_EXP 49
18821: PUSH
18822: FOR_TO
18823: IFFALSE 19900
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
18825: LD_ADDR_EXP 49
18829: PUSH
18830: LD_EXP 49
18834: PPUSH
18835: LD_VAR 0 2
18839: PPUSH
18840: LD_EXP 49
18844: PUSH
18845: LD_VAR 0 2
18849: ARRAY
18850: PUSH
18851: LD_INT 0
18853: DIFF
18854: PPUSH
18855: CALL_OW 1
18859: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
18860: LD_ADDR_EXP 50
18864: PUSH
18865: LD_EXP 50
18869: PPUSH
18870: LD_VAR 0 2
18874: PPUSH
18875: EMPTY
18876: PPUSH
18877: CALL_OW 1
18881: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
18882: LD_ADDR_EXP 51
18886: PUSH
18887: LD_EXP 51
18891: PPUSH
18892: LD_VAR 0 2
18896: PPUSH
18897: EMPTY
18898: PPUSH
18899: CALL_OW 1
18903: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
18904: LD_ADDR_EXP 52
18908: PUSH
18909: LD_EXP 52
18913: PPUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: EMPTY
18920: PPUSH
18921: CALL_OW 1
18925: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
18926: LD_ADDR_EXP 53
18930: PUSH
18931: LD_EXP 53
18935: PPUSH
18936: LD_VAR 0 2
18940: PPUSH
18941: EMPTY
18942: PUSH
18943: EMPTY
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PPUSH
18949: CALL_OW 1
18953: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
18954: LD_ADDR_EXP 54
18958: PUSH
18959: LD_EXP 54
18963: PPUSH
18964: LD_VAR 0 2
18968: PPUSH
18969: EMPTY
18970: PPUSH
18971: CALL_OW 1
18975: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
18976: LD_ADDR_EXP 81
18980: PUSH
18981: LD_EXP 81
18985: PPUSH
18986: LD_VAR 0 2
18990: PPUSH
18991: EMPTY
18992: PPUSH
18993: CALL_OW 1
18997: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
18998: LD_ADDR_EXP 55
19002: PUSH
19003: LD_EXP 55
19007: PPUSH
19008: LD_VAR 0 2
19012: PPUSH
19013: EMPTY
19014: PPUSH
19015: CALL_OW 1
19019: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19020: LD_ADDR_EXP 56
19024: PUSH
19025: LD_EXP 56
19029: PPUSH
19030: LD_VAR 0 2
19034: PPUSH
19035: EMPTY
19036: PPUSH
19037: CALL_OW 1
19041: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19042: LD_ADDR_EXP 57
19046: PUSH
19047: LD_EXP 57
19051: PPUSH
19052: LD_VAR 0 2
19056: PPUSH
19057: LD_EXP 49
19061: PUSH
19062: LD_VAR 0 2
19066: ARRAY
19067: PPUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 30
19073: PUSH
19074: LD_INT 32
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 30
19083: PUSH
19084: LD_INT 33
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: PPUSH
19096: CALL_OW 72
19100: PPUSH
19101: CALL_OW 1
19105: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19106: LD_ADDR_EXP 58
19110: PUSH
19111: LD_EXP 58
19115: PPUSH
19116: LD_VAR 0 2
19120: PPUSH
19121: LD_EXP 49
19125: PUSH
19126: LD_VAR 0 2
19130: ARRAY
19131: PPUSH
19132: LD_INT 2
19134: PUSH
19135: LD_INT 30
19137: PUSH
19138: LD_INT 32
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 30
19147: PUSH
19148: LD_INT 31
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 58
19162: PUSH
19163: EMPTY
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 72
19174: PPUSH
19175: CALL_OW 1
19179: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19180: LD_ADDR_EXP 59
19184: PUSH
19185: LD_EXP 59
19189: PPUSH
19190: LD_VAR 0 2
19194: PPUSH
19195: EMPTY
19196: PPUSH
19197: CALL_OW 1
19201: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19202: LD_ADDR_EXP 63
19206: PUSH
19207: LD_EXP 63
19211: PPUSH
19212: LD_VAR 0 2
19216: PPUSH
19217: EMPTY
19218: PPUSH
19219: CALL_OW 1
19223: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19224: LD_ADDR_EXP 62
19228: PUSH
19229: LD_EXP 62
19233: PPUSH
19234: LD_VAR 0 2
19238: PPUSH
19239: EMPTY
19240: PPUSH
19241: CALL_OW 1
19245: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19246: LD_ADDR_EXP 64
19250: PUSH
19251: LD_EXP 64
19255: PPUSH
19256: LD_VAR 0 2
19260: PPUSH
19261: EMPTY
19262: PPUSH
19263: CALL_OW 1
19267: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19268: LD_ADDR_EXP 65
19272: PUSH
19273: LD_EXP 65
19277: PPUSH
19278: LD_VAR 0 2
19282: PPUSH
19283: EMPTY
19284: PPUSH
19285: CALL_OW 1
19289: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19290: LD_ADDR_EXP 66
19294: PUSH
19295: LD_EXP 66
19299: PPUSH
19300: LD_VAR 0 2
19304: PPUSH
19305: EMPTY
19306: PPUSH
19307: CALL_OW 1
19311: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
19312: LD_ADDR_EXP 67
19316: PUSH
19317: LD_EXP 67
19321: PPUSH
19322: LD_VAR 0 2
19326: PPUSH
19327: EMPTY
19328: PPUSH
19329: CALL_OW 1
19333: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
19334: LD_ADDR_EXP 68
19338: PUSH
19339: LD_EXP 68
19343: PPUSH
19344: LD_VAR 0 2
19348: PPUSH
19349: EMPTY
19350: PPUSH
19351: CALL_OW 1
19355: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
19356: LD_ADDR_EXP 69
19360: PUSH
19361: LD_EXP 69
19365: PPUSH
19366: LD_VAR 0 2
19370: PPUSH
19371: EMPTY
19372: PPUSH
19373: CALL_OW 1
19377: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
19378: LD_ADDR_EXP 70
19382: PUSH
19383: LD_EXP 70
19387: PPUSH
19388: LD_VAR 0 2
19392: PPUSH
19393: EMPTY
19394: PPUSH
19395: CALL_OW 1
19399: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
19400: LD_ADDR_EXP 71
19404: PUSH
19405: LD_EXP 71
19409: PPUSH
19410: LD_VAR 0 2
19414: PPUSH
19415: EMPTY
19416: PPUSH
19417: CALL_OW 1
19421: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
19422: LD_ADDR_EXP 60
19426: PUSH
19427: LD_EXP 60
19431: PPUSH
19432: LD_VAR 0 2
19436: PPUSH
19437: LD_INT 0
19439: PPUSH
19440: CALL_OW 1
19444: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
19445: LD_ADDR_EXP 73
19449: PUSH
19450: LD_EXP 73
19454: PPUSH
19455: LD_VAR 0 2
19459: PPUSH
19460: LD_INT 0
19462: PPUSH
19463: CALL_OW 1
19467: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
19468: LD_ADDR_EXP 61
19472: PUSH
19473: LD_EXP 61
19477: PPUSH
19478: LD_VAR 0 2
19482: PPUSH
19483: EMPTY
19484: PPUSH
19485: CALL_OW 1
19489: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
19490: LD_ADDR_EXP 72
19494: PUSH
19495: LD_EXP 72
19499: PPUSH
19500: LD_VAR 0 2
19504: PPUSH
19505: LD_INT 0
19507: PPUSH
19508: CALL_OW 1
19512: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
19513: LD_ADDR_EXP 74
19517: PUSH
19518: LD_EXP 74
19522: PPUSH
19523: LD_VAR 0 2
19527: PPUSH
19528: EMPTY
19529: PPUSH
19530: CALL_OW 1
19534: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
19535: LD_ADDR_EXP 77
19539: PUSH
19540: LD_EXP 77
19544: PPUSH
19545: LD_VAR 0 2
19549: PPUSH
19550: LD_INT 0
19552: PPUSH
19553: CALL_OW 1
19557: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
19558: LD_ADDR_EXP 78
19562: PUSH
19563: LD_EXP 78
19567: PPUSH
19568: LD_VAR 0 2
19572: PPUSH
19573: EMPTY
19574: PPUSH
19575: CALL_OW 1
19579: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
19580: LD_ADDR_EXP 79
19584: PUSH
19585: LD_EXP 79
19589: PPUSH
19590: LD_VAR 0 2
19594: PPUSH
19595: EMPTY
19596: PPUSH
19597: CALL_OW 1
19601: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
19602: LD_ADDR_EXP 80
19606: PUSH
19607: LD_EXP 80
19611: PPUSH
19612: LD_VAR 0 2
19616: PPUSH
19617: EMPTY
19618: PPUSH
19619: CALL_OW 1
19623: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
19624: LD_ADDR_EXP 82
19628: PUSH
19629: LD_EXP 82
19633: PPUSH
19634: LD_VAR 0 2
19638: PPUSH
19639: LD_EXP 49
19643: PUSH
19644: LD_VAR 0 2
19648: ARRAY
19649: PPUSH
19650: LD_INT 2
19652: PUSH
19653: LD_INT 30
19655: PUSH
19656: LD_INT 6
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 30
19665: PUSH
19666: LD_INT 7
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 30
19675: PUSH
19676: LD_INT 8
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: PPUSH
19689: CALL_OW 72
19693: PPUSH
19694: CALL_OW 1
19698: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
19699: LD_ADDR_EXP 83
19703: PUSH
19704: LD_EXP 83
19708: PPUSH
19709: LD_VAR 0 2
19713: PPUSH
19714: EMPTY
19715: PPUSH
19716: CALL_OW 1
19720: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
19721: LD_ADDR_EXP 84
19725: PUSH
19726: LD_EXP 84
19730: PPUSH
19731: LD_VAR 0 2
19735: PPUSH
19736: EMPTY
19737: PPUSH
19738: CALL_OW 1
19742: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
19743: LD_ADDR_EXP 85
19747: PUSH
19748: LD_EXP 85
19752: PPUSH
19753: LD_VAR 0 2
19757: PPUSH
19758: EMPTY
19759: PPUSH
19760: CALL_OW 1
19764: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
19765: LD_ADDR_EXP 86
19769: PUSH
19770: LD_EXP 86
19774: PPUSH
19775: LD_VAR 0 2
19779: PPUSH
19780: EMPTY
19781: PPUSH
19782: CALL_OW 1
19786: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
19787: LD_ADDR_EXP 87
19791: PUSH
19792: LD_EXP 87
19796: PPUSH
19797: LD_VAR 0 2
19801: PPUSH
19802: EMPTY
19803: PPUSH
19804: CALL_OW 1
19808: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
19809: LD_ADDR_EXP 88
19813: PUSH
19814: LD_EXP 88
19818: PPUSH
19819: LD_VAR 0 2
19823: PPUSH
19824: EMPTY
19825: PPUSH
19826: CALL_OW 1
19830: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
19831: LD_ADDR_EXP 89
19835: PUSH
19836: LD_EXP 89
19840: PPUSH
19841: LD_VAR 0 2
19845: PPUSH
19846: EMPTY
19847: PPUSH
19848: CALL_OW 1
19852: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
19853: LD_ADDR_EXP 90
19857: PUSH
19858: LD_EXP 90
19862: PPUSH
19863: LD_VAR 0 2
19867: PPUSH
19868: EMPTY
19869: PPUSH
19870: CALL_OW 1
19874: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
19875: LD_ADDR_EXP 91
19879: PUSH
19880: LD_EXP 91
19884: PPUSH
19885: LD_VAR 0 2
19889: PPUSH
19890: LD_INT 0
19892: PPUSH
19893: CALL_OW 1
19897: ST_TO_ADDR
// end ;
19898: GO 18822
19900: POP
19901: POP
// MC_InitSides ( ) ;
19902: CALL 20188 0 0
// MC_InitResearch ( ) ;
19906: CALL 19927 0 0
// CustomInitMacro ( ) ;
19910: CALL 292 0 0
// skirmish := true ;
19914: LD_ADDR_EXP 47
19918: PUSH
19919: LD_INT 1
19921: ST_TO_ADDR
// end ;
19922: LD_VAR 0 1
19926: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
19927: LD_INT 0
19929: PPUSH
19930: PPUSH
19931: PPUSH
19932: PPUSH
19933: PPUSH
19934: PPUSH
// if not mc_bases then
19935: LD_EXP 49
19939: NOT
19940: IFFALSE 19944
// exit ;
19942: GO 20183
// for i = 1 to 8 do
19944: LD_ADDR_VAR 0 2
19948: PUSH
19949: DOUBLE
19950: LD_INT 1
19952: DEC
19953: ST_TO_ADDR
19954: LD_INT 8
19956: PUSH
19957: FOR_TO
19958: IFFALSE 19984
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
19960: LD_ADDR_EXP 76
19964: PUSH
19965: LD_EXP 76
19969: PPUSH
19970: LD_VAR 0 2
19974: PPUSH
19975: EMPTY
19976: PPUSH
19977: CALL_OW 1
19981: ST_TO_ADDR
19982: GO 19957
19984: POP
19985: POP
// tmp := [ ] ;
19986: LD_ADDR_VAR 0 5
19990: PUSH
19991: EMPTY
19992: ST_TO_ADDR
// for i = 1 to mc_sides do
19993: LD_ADDR_VAR 0 2
19997: PUSH
19998: DOUBLE
19999: LD_INT 1
20001: DEC
20002: ST_TO_ADDR
20003: LD_EXP 75
20007: PUSH
20008: FOR_TO
20009: IFFALSE 20067
// if not mc_sides [ i ] in tmp then
20011: LD_EXP 75
20015: PUSH
20016: LD_VAR 0 2
20020: ARRAY
20021: PUSH
20022: LD_VAR 0 5
20026: IN
20027: NOT
20028: IFFALSE 20065
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20030: LD_ADDR_VAR 0 5
20034: PUSH
20035: LD_VAR 0 5
20039: PPUSH
20040: LD_VAR 0 5
20044: PUSH
20045: LD_INT 1
20047: PLUS
20048: PPUSH
20049: LD_EXP 75
20053: PUSH
20054: LD_VAR 0 2
20058: ARRAY
20059: PPUSH
20060: CALL_OW 2
20064: ST_TO_ADDR
20065: GO 20008
20067: POP
20068: POP
// if not tmp then
20069: LD_VAR 0 5
20073: NOT
20074: IFFALSE 20078
// exit ;
20076: GO 20183
// for j in tmp do
20078: LD_ADDR_VAR 0 3
20082: PUSH
20083: LD_VAR 0 5
20087: PUSH
20088: FOR_IN
20089: IFFALSE 20181
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20091: LD_ADDR_VAR 0 6
20095: PUSH
20096: LD_INT 22
20098: PUSH
20099: LD_VAR 0 3
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PPUSH
20108: CALL_OW 69
20112: ST_TO_ADDR
// if not un then
20113: LD_VAR 0 6
20117: NOT
20118: IFFALSE 20122
// continue ;
20120: GO 20088
// nation := GetNation ( un [ 1 ] ) ;
20122: LD_ADDR_VAR 0 4
20126: PUSH
20127: LD_VAR 0 6
20131: PUSH
20132: LD_INT 1
20134: ARRAY
20135: PPUSH
20136: CALL_OW 248
20140: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20141: LD_ADDR_EXP 76
20145: PUSH
20146: LD_EXP 76
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_VAR 0 3
20160: PPUSH
20161: LD_VAR 0 4
20165: PPUSH
20166: LD_INT 1
20168: PPUSH
20169: CALL 45965 0 3
20173: PPUSH
20174: CALL_OW 1
20178: ST_TO_ADDR
// end ;
20179: GO 20088
20181: POP
20182: POP
// end ;
20183: LD_VAR 0 1
20187: RET
// export function MC_InitSides ( ) ; var i ; begin
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
// if not mc_bases then
20192: LD_EXP 49
20196: NOT
20197: IFFALSE 20201
// exit ;
20199: GO 20275
// for i = 1 to mc_bases do
20201: LD_ADDR_VAR 0 2
20205: PUSH
20206: DOUBLE
20207: LD_INT 1
20209: DEC
20210: ST_TO_ADDR
20211: LD_EXP 49
20215: PUSH
20216: FOR_TO
20217: IFFALSE 20273
// if mc_bases [ i ] then
20219: LD_EXP 49
20223: PUSH
20224: LD_VAR 0 2
20228: ARRAY
20229: IFFALSE 20271
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20231: LD_ADDR_EXP 75
20235: PUSH
20236: LD_EXP 75
20240: PPUSH
20241: LD_VAR 0 2
20245: PPUSH
20246: LD_EXP 49
20250: PUSH
20251: LD_VAR 0 2
20255: ARRAY
20256: PUSH
20257: LD_INT 1
20259: ARRAY
20260: PPUSH
20261: CALL_OW 255
20265: PPUSH
20266: CALL_OW 1
20270: ST_TO_ADDR
20271: GO 20216
20273: POP
20274: POP
// end ;
20275: LD_VAR 0 1
20279: RET
// every 0 0$01 trigger skirmish do
20280: LD_EXP 47
20284: IFFALSE 20438
20286: GO 20288
20288: DISABLE
// begin enable ;
20289: ENABLE
// MC_CheckBuildings ( ) ;
20290: CALL 24927 0 0
// MC_CheckPeopleLife ( ) ;
20294: CALL 25052 0 0
// RaiseSailEvent ( 100 ) ;
20298: LD_INT 100
20300: PPUSH
20301: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20305: LD_INT 103
20307: PPUSH
20308: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
20312: LD_INT 104
20314: PPUSH
20315: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
20319: LD_INT 105
20321: PPUSH
20322: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
20326: LD_INT 106
20328: PPUSH
20329: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
20333: LD_INT 107
20335: PPUSH
20336: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
20340: LD_INT 108
20342: PPUSH
20343: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
20347: LD_INT 109
20349: PPUSH
20350: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
20354: LD_INT 110
20356: PPUSH
20357: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
20361: LD_INT 111
20363: PPUSH
20364: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
20368: LD_INT 112
20370: PPUSH
20371: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
20375: LD_INT 113
20377: PPUSH
20378: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
20382: LD_INT 120
20384: PPUSH
20385: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
20389: LD_INT 121
20391: PPUSH
20392: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
20396: LD_INT 122
20398: PPUSH
20399: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
20403: LD_INT 123
20405: PPUSH
20406: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
20410: LD_INT 124
20412: PPUSH
20413: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
20417: LD_INT 125
20419: PPUSH
20420: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
20424: LD_INT 126
20426: PPUSH
20427: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
20431: LD_INT 200
20433: PPUSH
20434: CALL_OW 427
// end ;
20438: END
// on SailEvent ( event ) do begin if event < 100 then
20439: LD_VAR 0 1
20443: PUSH
20444: LD_INT 100
20446: LESS
20447: IFFALSE 20458
// CustomEvent ( event ) ;
20449: LD_VAR 0 1
20453: PPUSH
20454: CALL 15992 0 1
// if event = 100 then
20458: LD_VAR 0 1
20462: PUSH
20463: LD_INT 100
20465: EQUAL
20466: IFFALSE 20472
// MC_ClassManager ( ) ;
20468: CALL 20864 0 0
// if event = 101 then
20472: LD_VAR 0 1
20476: PUSH
20477: LD_INT 101
20479: EQUAL
20480: IFFALSE 20486
// MC_RepairBuildings ( ) ;
20482: CALL 25648 0 0
// if event = 102 then
20486: LD_VAR 0 1
20490: PUSH
20491: LD_INT 102
20493: EQUAL
20494: IFFALSE 20500
// MC_Heal ( ) ;
20496: CALL 26054 0 0
// if event = 103 then
20500: LD_VAR 0 1
20504: PUSH
20505: LD_INT 103
20507: EQUAL
20508: IFFALSE 20514
// MC_Build ( ) ;
20510: CALL 26476 0 0
// if event = 104 then
20514: LD_VAR 0 1
20518: PUSH
20519: LD_INT 104
20521: EQUAL
20522: IFFALSE 20528
// MC_TurretWeapon ( ) ;
20524: CALL 28089 0 0
// if event = 105 then
20528: LD_VAR 0 1
20532: PUSH
20533: LD_INT 105
20535: EQUAL
20536: IFFALSE 20542
// MC_BuildUpgrade ( ) ;
20538: CALL 27640 0 0
// if event = 106 then
20542: LD_VAR 0 1
20546: PUSH
20547: LD_INT 106
20549: EQUAL
20550: IFFALSE 20556
// MC_PlantMines ( ) ;
20552: CALL 28519 0 0
// if event = 107 then
20556: LD_VAR 0 1
20560: PUSH
20561: LD_INT 107
20563: EQUAL
20564: IFFALSE 20570
// MC_CollectCrates ( ) ;
20566: CALL 29553 0 0
// if event = 108 then
20570: LD_VAR 0 1
20574: PUSH
20575: LD_INT 108
20577: EQUAL
20578: IFFALSE 20584
// MC_LinkRemoteControl ( ) ;
20580: CALL 31310 0 0
// if event = 109 then
20584: LD_VAR 0 1
20588: PUSH
20589: LD_INT 109
20591: EQUAL
20592: IFFALSE 20598
// MC_ProduceVehicle ( ) ;
20594: CALL 31491 0 0
// if event = 110 then
20598: LD_VAR 0 1
20602: PUSH
20603: LD_INT 110
20605: EQUAL
20606: IFFALSE 20612
// MC_SendAttack ( ) ;
20608: CALL 31972 0 0
// if event = 111 then
20612: LD_VAR 0 1
20616: PUSH
20617: LD_INT 111
20619: EQUAL
20620: IFFALSE 20626
// MC_Defend ( ) ;
20622: CALL 32080 0 0
// if event = 112 then
20626: LD_VAR 0 1
20630: PUSH
20631: LD_INT 112
20633: EQUAL
20634: IFFALSE 20640
// MC_Research ( ) ;
20636: CALL 32707 0 0
// if event = 113 then
20640: LD_VAR 0 1
20644: PUSH
20645: LD_INT 113
20647: EQUAL
20648: IFFALSE 20654
// MC_MinesTrigger ( ) ;
20650: CALL 33821 0 0
// if event = 120 then
20654: LD_VAR 0 1
20658: PUSH
20659: LD_INT 120
20661: EQUAL
20662: IFFALSE 20668
// MC_RepairVehicle ( ) ;
20664: CALL 33920 0 0
// if event = 121 then
20668: LD_VAR 0 1
20672: PUSH
20673: LD_INT 121
20675: EQUAL
20676: IFFALSE 20682
// MC_TameApe ( ) ;
20678: CALL 34663 0 0
// if event = 122 then
20682: LD_VAR 0 1
20686: PUSH
20687: LD_INT 122
20689: EQUAL
20690: IFFALSE 20696
// MC_ChangeApeClass ( ) ;
20692: CALL 35492 0 0
// if event = 123 then
20696: LD_VAR 0 1
20700: PUSH
20701: LD_INT 123
20703: EQUAL
20704: IFFALSE 20710
// MC_Bazooka ( ) ;
20706: CALL 36142 0 0
// if event = 124 then
20710: LD_VAR 0 1
20714: PUSH
20715: LD_INT 124
20717: EQUAL
20718: IFFALSE 20724
// MC_TeleportExit ( ) ;
20720: CALL 36340 0 0
// if event = 125 then
20724: LD_VAR 0 1
20728: PUSH
20729: LD_INT 125
20731: EQUAL
20732: IFFALSE 20738
// MC_Deposits ( ) ;
20734: CALL 36987 0 0
// if event = 126 then
20738: LD_VAR 0 1
20742: PUSH
20743: LD_INT 126
20745: EQUAL
20746: IFFALSE 20752
// MC_RemoteDriver ( ) ;
20748: CALL 37612 0 0
// if event = 200 then
20752: LD_VAR 0 1
20756: PUSH
20757: LD_INT 200
20759: EQUAL
20760: IFFALSE 20766
// MC_Idle ( ) ;
20762: CALL 39345 0 0
// end ;
20766: PPOPN 1
20768: END
// export function MC_Reset ( base , tag ) ; var i ; begin
20769: LD_INT 0
20771: PPUSH
20772: PPUSH
// if not mc_bases [ base ] or not tag then
20773: LD_EXP 49
20777: PUSH
20778: LD_VAR 0 1
20782: ARRAY
20783: NOT
20784: PUSH
20785: LD_VAR 0 2
20789: NOT
20790: OR
20791: IFFALSE 20795
// exit ;
20793: GO 20859
// for i in mc_bases [ base ] union mc_ape [ base ] do
20795: LD_ADDR_VAR 0 4
20799: PUSH
20800: LD_EXP 49
20804: PUSH
20805: LD_VAR 0 1
20809: ARRAY
20810: PUSH
20811: LD_EXP 78
20815: PUSH
20816: LD_VAR 0 1
20820: ARRAY
20821: UNION
20822: PUSH
20823: FOR_IN
20824: IFFALSE 20857
// if GetTag ( i ) = tag then
20826: LD_VAR 0 4
20830: PPUSH
20831: CALL_OW 110
20835: PUSH
20836: LD_VAR 0 2
20840: EQUAL
20841: IFFALSE 20855
// SetTag ( i , 0 ) ;
20843: LD_VAR 0 4
20847: PPUSH
20848: LD_INT 0
20850: PPUSH
20851: CALL_OW 109
20855: GO 20823
20857: POP
20858: POP
// end ;
20859: LD_VAR 0 3
20863: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
20864: LD_INT 0
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
// if not mc_bases then
20874: LD_EXP 49
20878: NOT
20879: IFFALSE 20883
// exit ;
20881: GO 21341
// for i = 1 to mc_bases do
20883: LD_ADDR_VAR 0 2
20887: PUSH
20888: DOUBLE
20889: LD_INT 1
20891: DEC
20892: ST_TO_ADDR
20893: LD_EXP 49
20897: PUSH
20898: FOR_TO
20899: IFFALSE 21339
// begin tmp := MC_ClassCheckReq ( i ) ;
20901: LD_ADDR_VAR 0 4
20905: PUSH
20906: LD_VAR 0 2
20910: PPUSH
20911: CALL 21346 0 1
20915: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
20916: LD_ADDR_EXP 90
20920: PUSH
20921: LD_EXP 90
20925: PPUSH
20926: LD_VAR 0 2
20930: PPUSH
20931: LD_VAR 0 4
20935: PPUSH
20936: CALL_OW 1
20940: ST_TO_ADDR
// if not tmp then
20941: LD_VAR 0 4
20945: NOT
20946: IFFALSE 20950
// continue ;
20948: GO 20898
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
20950: LD_ADDR_VAR 0 6
20954: PUSH
20955: LD_EXP 49
20959: PUSH
20960: LD_VAR 0 2
20964: ARRAY
20965: PPUSH
20966: LD_INT 2
20968: PUSH
20969: LD_INT 30
20971: PUSH
20972: LD_INT 4
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 30
20981: PUSH
20982: LD_INT 5
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: PPUSH
20994: CALL_OW 72
20998: PUSH
20999: LD_EXP 49
21003: PUSH
21004: LD_VAR 0 2
21008: ARRAY
21009: PPUSH
21010: LD_INT 2
21012: PUSH
21013: LD_INT 30
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 30
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: PPUSH
21038: CALL_OW 72
21042: PUSH
21043: LD_EXP 49
21047: PUSH
21048: LD_VAR 0 2
21052: ARRAY
21053: PPUSH
21054: LD_INT 30
21056: PUSH
21057: LD_INT 3
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PPUSH
21064: CALL_OW 72
21068: PUSH
21069: LD_EXP 49
21073: PUSH
21074: LD_VAR 0 2
21078: ARRAY
21079: PPUSH
21080: LD_INT 2
21082: PUSH
21083: LD_INT 30
21085: PUSH
21086: LD_INT 6
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 30
21095: PUSH
21096: LD_INT 7
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 30
21105: PUSH
21106: LD_INT 8
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: PPUSH
21119: CALL_OW 72
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: ST_TO_ADDR
// for j = 1 to 4 do
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: DOUBLE
21136: LD_INT 1
21138: DEC
21139: ST_TO_ADDR
21140: LD_INT 4
21142: PUSH
21143: FOR_TO
21144: IFFALSE 21335
// begin if not tmp [ j ] then
21146: LD_VAR 0 4
21150: PUSH
21151: LD_VAR 0 3
21155: ARRAY
21156: NOT
21157: IFFALSE 21161
// continue ;
21159: GO 21143
// for p in tmp [ j ] do
21161: LD_ADDR_VAR 0 5
21165: PUSH
21166: LD_VAR 0 4
21170: PUSH
21171: LD_VAR 0 3
21175: ARRAY
21176: PUSH
21177: FOR_IN
21178: IFFALSE 21331
// begin if not b [ j ] then
21180: LD_VAR 0 6
21184: PUSH
21185: LD_VAR 0 3
21189: ARRAY
21190: NOT
21191: IFFALSE 21195
// break ;
21193: GO 21331
// e := 0 ;
21195: LD_ADDR_VAR 0 7
21199: PUSH
21200: LD_INT 0
21202: ST_TO_ADDR
// for k in b [ j ] do
21203: LD_ADDR_VAR 0 8
21207: PUSH
21208: LD_VAR 0 6
21212: PUSH
21213: LD_VAR 0 3
21217: ARRAY
21218: PUSH
21219: FOR_IN
21220: IFFALSE 21247
// if IsNotFull ( k ) then
21222: LD_VAR 0 8
21226: PPUSH
21227: CALL 49991 0 1
21231: IFFALSE 21245
// begin e := k ;
21233: LD_ADDR_VAR 0 7
21237: PUSH
21238: LD_VAR 0 8
21242: ST_TO_ADDR
// break ;
21243: GO 21247
// end ;
21245: GO 21219
21247: POP
21248: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21249: LD_VAR 0 7
21253: PUSH
21254: LD_VAR 0 5
21258: PPUSH
21259: LD_VAR 0 7
21263: PPUSH
21264: CALL 87018 0 2
21268: NOT
21269: AND
21270: IFFALSE 21329
// begin if IsInUnit ( p ) then
21272: LD_VAR 0 5
21276: PPUSH
21277: CALL_OW 310
21281: IFFALSE 21292
// ComExitBuilding ( p ) ;
21283: LD_VAR 0 5
21287: PPUSH
21288: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21292: LD_VAR 0 5
21296: PPUSH
21297: LD_VAR 0 7
21301: PPUSH
21302: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21306: LD_VAR 0 5
21310: PPUSH
21311: LD_VAR 0 3
21315: PPUSH
21316: CALL_OW 183
// AddComExitBuilding ( p ) ;
21320: LD_VAR 0 5
21324: PPUSH
21325: CALL_OW 182
// end ; end ;
21329: GO 21177
21331: POP
21332: POP
// end ;
21333: GO 21143
21335: POP
21336: POP
// end ;
21337: GO 20898
21339: POP
21340: POP
// end ;
21341: LD_VAR 0 1
21345: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
21346: LD_INT 0
21348: PPUSH
21349: PPUSH
21350: PPUSH
21351: PPUSH
21352: PPUSH
21353: PPUSH
21354: PPUSH
21355: PPUSH
21356: PPUSH
21357: PPUSH
21358: PPUSH
21359: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21360: LD_VAR 0 1
21364: NOT
21365: PUSH
21366: LD_EXP 49
21370: PUSH
21371: LD_VAR 0 1
21375: ARRAY
21376: NOT
21377: OR
21378: PUSH
21379: LD_EXP 49
21383: PUSH
21384: LD_VAR 0 1
21388: ARRAY
21389: PPUSH
21390: LD_INT 2
21392: PUSH
21393: LD_INT 30
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 30
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 72
21422: NOT
21423: OR
21424: IFFALSE 21428
// exit ;
21426: GO 24922
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21428: LD_ADDR_VAR 0 4
21432: PUSH
21433: LD_EXP 49
21437: PUSH
21438: LD_VAR 0 1
21442: ARRAY
21443: PPUSH
21444: LD_INT 2
21446: PUSH
21447: LD_INT 25
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 25
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 25
21469: PUSH
21470: LD_INT 3
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 25
21479: PUSH
21480: LD_INT 4
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 25
21489: PUSH
21490: LD_INT 5
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 25
21499: PUSH
21500: LD_INT 8
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 25
21509: PUSH
21510: LD_INT 9
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL_OW 72
21531: ST_TO_ADDR
// for i in tmp do
21532: LD_ADDR_VAR 0 3
21536: PUSH
21537: LD_VAR 0 4
21541: PUSH
21542: FOR_IN
21543: IFFALSE 21574
// if GetTag ( i ) then
21545: LD_VAR 0 3
21549: PPUSH
21550: CALL_OW 110
21554: IFFALSE 21572
// tmp := tmp diff i ;
21556: LD_ADDR_VAR 0 4
21560: PUSH
21561: LD_VAR 0 4
21565: PUSH
21566: LD_VAR 0 3
21570: DIFF
21571: ST_TO_ADDR
21572: GO 21542
21574: POP
21575: POP
// if not tmp then
21576: LD_VAR 0 4
21580: NOT
21581: IFFALSE 21585
// exit ;
21583: GO 24922
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21585: LD_ADDR_VAR 0 5
21589: PUSH
21590: LD_EXP 49
21594: PUSH
21595: LD_VAR 0 1
21599: ARRAY
21600: PPUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 25
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 25
21616: PUSH
21617: LD_INT 5
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 25
21626: PUSH
21627: LD_INT 8
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 25
21636: PUSH
21637: LD_INT 9
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: PPUSH
21651: CALL_OW 72
21655: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
21656: LD_ADDR_VAR 0 6
21660: PUSH
21661: LD_EXP 49
21665: PUSH
21666: LD_VAR 0 1
21670: ARRAY
21671: PPUSH
21672: LD_INT 25
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 72
21686: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21687: LD_ADDR_VAR 0 7
21691: PUSH
21692: LD_EXP 49
21696: PUSH
21697: LD_VAR 0 1
21701: ARRAY
21702: PPUSH
21703: LD_INT 25
21705: PUSH
21706: LD_INT 3
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PPUSH
21713: CALL_OW 72
21717: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
21718: LD_ADDR_VAR 0 8
21722: PUSH
21723: LD_EXP 49
21727: PUSH
21728: LD_VAR 0 1
21732: ARRAY
21733: PPUSH
21734: LD_INT 25
21736: PUSH
21737: LD_INT 4
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 24
21746: PUSH
21747: LD_INT 251
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PPUSH
21758: CALL_OW 72
21762: ST_TO_ADDR
// if mc_scan [ base ] then
21763: LD_EXP 72
21767: PUSH
21768: LD_VAR 0 1
21772: ARRAY
21773: IFFALSE 22234
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
21775: LD_ADDR_EXP 91
21779: PUSH
21780: LD_EXP 91
21784: PPUSH
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 4
21792: PPUSH
21793: CALL_OW 1
21797: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
21798: LD_ADDR_VAR 0 12
21802: PUSH
21803: LD_EXP 49
21807: PUSH
21808: LD_VAR 0 1
21812: ARRAY
21813: PPUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 30
21819: PUSH
21820: LD_INT 4
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 30
21829: PUSH
21830: LD_INT 5
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: PPUSH
21842: CALL_OW 72
21846: ST_TO_ADDR
// if not b then
21847: LD_VAR 0 12
21851: NOT
21852: IFFALSE 21856
// exit ;
21854: GO 24922
// p := [ ] ;
21856: LD_ADDR_VAR 0 11
21860: PUSH
21861: EMPTY
21862: ST_TO_ADDR
// if sci >= 2 then
21863: LD_VAR 0 8
21867: PUSH
21868: LD_INT 2
21870: GREATEREQUAL
21871: IFFALSE 21902
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
21873: LD_ADDR_VAR 0 8
21877: PUSH
21878: LD_VAR 0 8
21882: PUSH
21883: LD_INT 1
21885: ARRAY
21886: PUSH
21887: LD_VAR 0 8
21891: PUSH
21892: LD_INT 2
21894: ARRAY
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: ST_TO_ADDR
21900: GO 21963
// if sci = 1 then
21902: LD_VAR 0 8
21906: PUSH
21907: LD_INT 1
21909: EQUAL
21910: IFFALSE 21931
// sci := [ sci [ 1 ] ] else
21912: LD_ADDR_VAR 0 8
21916: PUSH
21917: LD_VAR 0 8
21921: PUSH
21922: LD_INT 1
21924: ARRAY
21925: PUSH
21926: EMPTY
21927: LIST
21928: ST_TO_ADDR
21929: GO 21963
// if sci = 0 then
21931: LD_VAR 0 8
21935: PUSH
21936: LD_INT 0
21938: EQUAL
21939: IFFALSE 21963
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
21941: LD_ADDR_VAR 0 11
21945: PUSH
21946: LD_VAR 0 4
21950: PPUSH
21951: LD_INT 4
21953: PPUSH
21954: CALL 86881 0 2
21958: PUSH
21959: LD_INT 1
21961: ARRAY
21962: ST_TO_ADDR
// if eng > 4 then
21963: LD_VAR 0 6
21967: PUSH
21968: LD_INT 4
21970: GREATER
21971: IFFALSE 22017
// for i = eng downto 4 do
21973: LD_ADDR_VAR 0 3
21977: PUSH
21978: DOUBLE
21979: LD_VAR 0 6
21983: INC
21984: ST_TO_ADDR
21985: LD_INT 4
21987: PUSH
21988: FOR_DOWNTO
21989: IFFALSE 22015
// eng := eng diff eng [ i ] ;
21991: LD_ADDR_VAR 0 6
21995: PUSH
21996: LD_VAR 0 6
22000: PUSH
22001: LD_VAR 0 6
22005: PUSH
22006: LD_VAR 0 3
22010: ARRAY
22011: DIFF
22012: ST_TO_ADDR
22013: GO 21988
22015: POP
22016: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22017: LD_ADDR_VAR 0 4
22021: PUSH
22022: LD_VAR 0 4
22026: PUSH
22027: LD_VAR 0 5
22031: PUSH
22032: LD_VAR 0 6
22036: UNION
22037: PUSH
22038: LD_VAR 0 7
22042: UNION
22043: PUSH
22044: LD_VAR 0 8
22048: UNION
22049: DIFF
22050: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22051: LD_ADDR_VAR 0 13
22055: PUSH
22056: LD_EXP 49
22060: PUSH
22061: LD_VAR 0 1
22065: ARRAY
22066: PPUSH
22067: LD_INT 2
22069: PUSH
22070: LD_INT 30
22072: PUSH
22073: LD_INT 32
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 31
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 72
22099: PUSH
22100: LD_EXP 49
22104: PUSH
22105: LD_VAR 0 1
22109: ARRAY
22110: PPUSH
22111: LD_INT 2
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 4
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 30
22126: PUSH
22127: LD_INT 5
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: PPUSH
22139: CALL_OW 72
22143: PUSH
22144: LD_INT 6
22146: MUL
22147: PLUS
22148: ST_TO_ADDR
// if bcount < tmp then
22149: LD_VAR 0 13
22153: PUSH
22154: LD_VAR 0 4
22158: LESS
22159: IFFALSE 22205
// for i = tmp downto bcount do
22161: LD_ADDR_VAR 0 3
22165: PUSH
22166: DOUBLE
22167: LD_VAR 0 4
22171: INC
22172: ST_TO_ADDR
22173: LD_VAR 0 13
22177: PUSH
22178: FOR_DOWNTO
22179: IFFALSE 22203
// tmp := Delete ( tmp , tmp ) ;
22181: LD_ADDR_VAR 0 4
22185: PUSH
22186: LD_VAR 0 4
22190: PPUSH
22191: LD_VAR 0 4
22195: PPUSH
22196: CALL_OW 3
22200: ST_TO_ADDR
22201: GO 22178
22203: POP
22204: POP
// result := [ tmp , 0 , 0 , p ] ;
22205: LD_ADDR_VAR 0 2
22209: PUSH
22210: LD_VAR 0 4
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_VAR 0 11
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: ST_TO_ADDR
// exit ;
22232: GO 24922
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22234: LD_EXP 49
22238: PUSH
22239: LD_VAR 0 1
22243: ARRAY
22244: PPUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 30
22250: PUSH
22251: LD_INT 6
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 30
22260: PUSH
22261: LD_INT 7
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 30
22270: PUSH
22271: LD_INT 8
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: PPUSH
22284: CALL_OW 72
22288: NOT
22289: PUSH
22290: LD_EXP 49
22294: PUSH
22295: LD_VAR 0 1
22299: ARRAY
22300: PPUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PPUSH
22311: CALL_OW 72
22315: NOT
22316: AND
22317: IFFALSE 22389
// begin if eng = tmp then
22319: LD_VAR 0 6
22323: PUSH
22324: LD_VAR 0 4
22328: EQUAL
22329: IFFALSE 22333
// exit ;
22331: GO 24922
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
22333: LD_ADDR_EXP 91
22337: PUSH
22338: LD_EXP 91
22342: PPUSH
22343: LD_VAR 0 1
22347: PPUSH
22348: LD_INT 1
22350: PPUSH
22351: CALL_OW 1
22355: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
22356: LD_ADDR_VAR 0 2
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: LD_VAR 0 4
22368: PUSH
22369: LD_VAR 0 6
22373: DIFF
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// exit ;
22387: GO 24922
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22389: LD_EXP 76
22393: PUSH
22394: LD_EXP 75
22398: PUSH
22399: LD_VAR 0 1
22403: ARRAY
22404: ARRAY
22405: PUSH
22406: LD_EXP 49
22410: PUSH
22411: LD_VAR 0 1
22415: ARRAY
22416: PPUSH
22417: LD_INT 2
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 6
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 30
22432: PUSH
22433: LD_INT 7
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 30
22442: PUSH
22443: LD_INT 8
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: PPUSH
22456: CALL_OW 72
22460: AND
22461: PUSH
22462: LD_EXP 49
22466: PUSH
22467: LD_VAR 0 1
22471: ARRAY
22472: PPUSH
22473: LD_INT 30
22475: PUSH
22476: LD_INT 3
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PPUSH
22483: CALL_OW 72
22487: NOT
22488: AND
22489: IFFALSE 22703
// begin if sci >= 6 then
22491: LD_VAR 0 8
22495: PUSH
22496: LD_INT 6
22498: GREATEREQUAL
22499: IFFALSE 22503
// exit ;
22501: GO 24922
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
22503: LD_ADDR_EXP 91
22507: PUSH
22508: LD_EXP 91
22512: PPUSH
22513: LD_VAR 0 1
22517: PPUSH
22518: LD_INT 2
22520: PPUSH
22521: CALL_OW 1
22525: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
22526: LD_ADDR_VAR 0 9
22530: PUSH
22531: LD_VAR 0 4
22535: PUSH
22536: LD_VAR 0 8
22540: DIFF
22541: PPUSH
22542: LD_INT 4
22544: PPUSH
22545: CALL 86881 0 2
22549: ST_TO_ADDR
// p := [ ] ;
22550: LD_ADDR_VAR 0 11
22554: PUSH
22555: EMPTY
22556: ST_TO_ADDR
// if sci < 6 and sort > 6 then
22557: LD_VAR 0 8
22561: PUSH
22562: LD_INT 6
22564: LESS
22565: PUSH
22566: LD_VAR 0 9
22570: PUSH
22571: LD_INT 6
22573: GREATER
22574: AND
22575: IFFALSE 22656
// begin for i = 1 to 6 - sci do
22577: LD_ADDR_VAR 0 3
22581: PUSH
22582: DOUBLE
22583: LD_INT 1
22585: DEC
22586: ST_TO_ADDR
22587: LD_INT 6
22589: PUSH
22590: LD_VAR 0 8
22594: MINUS
22595: PUSH
22596: FOR_TO
22597: IFFALSE 22652
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
22599: LD_ADDR_VAR 0 11
22603: PUSH
22604: LD_VAR 0 11
22608: PPUSH
22609: LD_VAR 0 11
22613: PUSH
22614: LD_INT 1
22616: PLUS
22617: PPUSH
22618: LD_VAR 0 9
22622: PUSH
22623: LD_INT 1
22625: ARRAY
22626: PPUSH
22627: CALL_OW 2
22631: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
22632: LD_ADDR_VAR 0 9
22636: PUSH
22637: LD_VAR 0 9
22641: PPUSH
22642: LD_INT 1
22644: PPUSH
22645: CALL_OW 3
22649: ST_TO_ADDR
// end ;
22650: GO 22596
22652: POP
22653: POP
// end else
22654: GO 22676
// if sort then
22656: LD_VAR 0 9
22660: IFFALSE 22676
// p := sort [ 1 ] ;
22662: LD_ADDR_VAR 0 11
22666: PUSH
22667: LD_VAR 0 9
22671: PUSH
22672: LD_INT 1
22674: ARRAY
22675: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
22676: LD_ADDR_VAR 0 2
22680: PUSH
22681: LD_INT 0
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: LD_VAR 0 11
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: ST_TO_ADDR
// exit ;
22701: GO 24922
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22703: LD_EXP 76
22707: PUSH
22708: LD_EXP 75
22712: PUSH
22713: LD_VAR 0 1
22717: ARRAY
22718: ARRAY
22719: PUSH
22720: LD_EXP 49
22724: PUSH
22725: LD_VAR 0 1
22729: ARRAY
22730: PPUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 30
22736: PUSH
22737: LD_INT 6
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 30
22746: PUSH
22747: LD_INT 7
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 30
22756: PUSH
22757: LD_INT 8
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 72
22774: AND
22775: PUSH
22776: LD_EXP 49
22780: PUSH
22781: LD_VAR 0 1
22785: ARRAY
22786: PPUSH
22787: LD_INT 30
22789: PUSH
22790: LD_INT 3
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PPUSH
22797: CALL_OW 72
22801: AND
22802: IFFALSE 23536
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
22804: LD_ADDR_EXP 91
22808: PUSH
22809: LD_EXP 91
22813: PPUSH
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_INT 3
22821: PPUSH
22822: CALL_OW 1
22826: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22827: LD_ADDR_VAR 0 2
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: ST_TO_ADDR
// if not eng then
22850: LD_VAR 0 6
22854: NOT
22855: IFFALSE 22918
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
22857: LD_ADDR_VAR 0 11
22861: PUSH
22862: LD_VAR 0 4
22866: PPUSH
22867: LD_INT 2
22869: PPUSH
22870: CALL 86881 0 2
22874: PUSH
22875: LD_INT 1
22877: ARRAY
22878: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
22879: LD_ADDR_VAR 0 2
22883: PUSH
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_INT 2
22891: PPUSH
22892: LD_VAR 0 11
22896: PPUSH
22897: CALL_OW 1
22901: ST_TO_ADDR
// tmp := tmp diff p ;
22902: LD_ADDR_VAR 0 4
22906: PUSH
22907: LD_VAR 0 4
22911: PUSH
22912: LD_VAR 0 11
22916: DIFF
22917: ST_TO_ADDR
// end ; if tmp and sci < 6 then
22918: LD_VAR 0 4
22922: PUSH
22923: LD_VAR 0 8
22927: PUSH
22928: LD_INT 6
22930: LESS
22931: AND
22932: IFFALSE 23120
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
22934: LD_ADDR_VAR 0 9
22938: PUSH
22939: LD_VAR 0 4
22943: PUSH
22944: LD_VAR 0 8
22948: PUSH
22949: LD_VAR 0 7
22953: UNION
22954: DIFF
22955: PPUSH
22956: LD_INT 4
22958: PPUSH
22959: CALL 86881 0 2
22963: ST_TO_ADDR
// p := [ ] ;
22964: LD_ADDR_VAR 0 11
22968: PUSH
22969: EMPTY
22970: ST_TO_ADDR
// if sort then
22971: LD_VAR 0 9
22975: IFFALSE 23091
// for i = 1 to 6 - sci do
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: DOUBLE
22983: LD_INT 1
22985: DEC
22986: ST_TO_ADDR
22987: LD_INT 6
22989: PUSH
22990: LD_VAR 0 8
22994: MINUS
22995: PUSH
22996: FOR_TO
22997: IFFALSE 23089
// begin if i = sort then
22999: LD_VAR 0 3
23003: PUSH
23004: LD_VAR 0 9
23008: EQUAL
23009: IFFALSE 23013
// break ;
23011: GO 23089
// if GetClass ( i ) = 4 then
23013: LD_VAR 0 3
23017: PPUSH
23018: CALL_OW 257
23022: PUSH
23023: LD_INT 4
23025: EQUAL
23026: IFFALSE 23030
// continue ;
23028: GO 22996
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23030: LD_ADDR_VAR 0 11
23034: PUSH
23035: LD_VAR 0 11
23039: PPUSH
23040: LD_VAR 0 11
23044: PUSH
23045: LD_INT 1
23047: PLUS
23048: PPUSH
23049: LD_VAR 0 9
23053: PUSH
23054: LD_VAR 0 3
23058: ARRAY
23059: PPUSH
23060: CALL_OW 2
23064: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23065: LD_ADDR_VAR 0 4
23069: PUSH
23070: LD_VAR 0 4
23074: PUSH
23075: LD_VAR 0 9
23079: PUSH
23080: LD_VAR 0 3
23084: ARRAY
23085: DIFF
23086: ST_TO_ADDR
// end ;
23087: GO 22996
23089: POP
23090: POP
// if p then
23091: LD_VAR 0 11
23095: IFFALSE 23120
// result := Replace ( result , 4 , p ) ;
23097: LD_ADDR_VAR 0 2
23101: PUSH
23102: LD_VAR 0 2
23106: PPUSH
23107: LD_INT 4
23109: PPUSH
23110: LD_VAR 0 11
23114: PPUSH
23115: CALL_OW 1
23119: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23120: LD_VAR 0 4
23124: PUSH
23125: LD_VAR 0 7
23129: PUSH
23130: LD_INT 6
23132: LESS
23133: AND
23134: IFFALSE 23322
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23136: LD_ADDR_VAR 0 9
23140: PUSH
23141: LD_VAR 0 4
23145: PUSH
23146: LD_VAR 0 8
23150: PUSH
23151: LD_VAR 0 7
23155: UNION
23156: DIFF
23157: PPUSH
23158: LD_INT 3
23160: PPUSH
23161: CALL 86881 0 2
23165: ST_TO_ADDR
// p := [ ] ;
23166: LD_ADDR_VAR 0 11
23170: PUSH
23171: EMPTY
23172: ST_TO_ADDR
// if sort then
23173: LD_VAR 0 9
23177: IFFALSE 23293
// for i = 1 to 6 - mech do
23179: LD_ADDR_VAR 0 3
23183: PUSH
23184: DOUBLE
23185: LD_INT 1
23187: DEC
23188: ST_TO_ADDR
23189: LD_INT 6
23191: PUSH
23192: LD_VAR 0 7
23196: MINUS
23197: PUSH
23198: FOR_TO
23199: IFFALSE 23291
// begin if i = sort then
23201: LD_VAR 0 3
23205: PUSH
23206: LD_VAR 0 9
23210: EQUAL
23211: IFFALSE 23215
// break ;
23213: GO 23291
// if GetClass ( i ) = 3 then
23215: LD_VAR 0 3
23219: PPUSH
23220: CALL_OW 257
23224: PUSH
23225: LD_INT 3
23227: EQUAL
23228: IFFALSE 23232
// continue ;
23230: GO 23198
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23232: LD_ADDR_VAR 0 11
23236: PUSH
23237: LD_VAR 0 11
23241: PPUSH
23242: LD_VAR 0 11
23246: PUSH
23247: LD_INT 1
23249: PLUS
23250: PPUSH
23251: LD_VAR 0 9
23255: PUSH
23256: LD_VAR 0 3
23260: ARRAY
23261: PPUSH
23262: CALL_OW 2
23266: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23267: LD_ADDR_VAR 0 4
23271: PUSH
23272: LD_VAR 0 4
23276: PUSH
23277: LD_VAR 0 9
23281: PUSH
23282: LD_VAR 0 3
23286: ARRAY
23287: DIFF
23288: ST_TO_ADDR
// end ;
23289: GO 23198
23291: POP
23292: POP
// if p then
23293: LD_VAR 0 11
23297: IFFALSE 23322
// result := Replace ( result , 3 , p ) ;
23299: LD_ADDR_VAR 0 2
23303: PUSH
23304: LD_VAR 0 2
23308: PPUSH
23309: LD_INT 3
23311: PPUSH
23312: LD_VAR 0 11
23316: PPUSH
23317: CALL_OW 1
23321: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
23322: LD_VAR 0 4
23326: PUSH
23327: LD_INT 6
23329: GREATER
23330: PUSH
23331: LD_VAR 0 6
23335: PUSH
23336: LD_INT 6
23338: LESS
23339: AND
23340: IFFALSE 23534
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23342: LD_ADDR_VAR 0 9
23346: PUSH
23347: LD_VAR 0 4
23351: PUSH
23352: LD_VAR 0 8
23356: PUSH
23357: LD_VAR 0 7
23361: UNION
23362: PUSH
23363: LD_VAR 0 6
23367: UNION
23368: DIFF
23369: PPUSH
23370: LD_INT 2
23372: PPUSH
23373: CALL 86881 0 2
23377: ST_TO_ADDR
// p := [ ] ;
23378: LD_ADDR_VAR 0 11
23382: PUSH
23383: EMPTY
23384: ST_TO_ADDR
// if sort then
23385: LD_VAR 0 9
23389: IFFALSE 23505
// for i = 1 to 6 - eng do
23391: LD_ADDR_VAR 0 3
23395: PUSH
23396: DOUBLE
23397: LD_INT 1
23399: DEC
23400: ST_TO_ADDR
23401: LD_INT 6
23403: PUSH
23404: LD_VAR 0 6
23408: MINUS
23409: PUSH
23410: FOR_TO
23411: IFFALSE 23503
// begin if i = sort then
23413: LD_VAR 0 3
23417: PUSH
23418: LD_VAR 0 9
23422: EQUAL
23423: IFFALSE 23427
// break ;
23425: GO 23503
// if GetClass ( i ) = 2 then
23427: LD_VAR 0 3
23431: PPUSH
23432: CALL_OW 257
23436: PUSH
23437: LD_INT 2
23439: EQUAL
23440: IFFALSE 23444
// continue ;
23442: GO 23410
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23444: LD_ADDR_VAR 0 11
23448: PUSH
23449: LD_VAR 0 11
23453: PPUSH
23454: LD_VAR 0 11
23458: PUSH
23459: LD_INT 1
23461: PLUS
23462: PPUSH
23463: LD_VAR 0 9
23467: PUSH
23468: LD_VAR 0 3
23472: ARRAY
23473: PPUSH
23474: CALL_OW 2
23478: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23479: LD_ADDR_VAR 0 4
23483: PUSH
23484: LD_VAR 0 4
23488: PUSH
23489: LD_VAR 0 9
23493: PUSH
23494: LD_VAR 0 3
23498: ARRAY
23499: DIFF
23500: ST_TO_ADDR
// end ;
23501: GO 23410
23503: POP
23504: POP
// if p then
23505: LD_VAR 0 11
23509: IFFALSE 23534
// result := Replace ( result , 2 , p ) ;
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_VAR 0 2
23520: PPUSH
23521: LD_INT 2
23523: PPUSH
23524: LD_VAR 0 11
23528: PPUSH
23529: CALL_OW 1
23533: ST_TO_ADDR
// end ; exit ;
23534: GO 24922
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
23536: LD_EXP 76
23540: PUSH
23541: LD_EXP 75
23545: PUSH
23546: LD_VAR 0 1
23550: ARRAY
23551: ARRAY
23552: NOT
23553: PUSH
23554: LD_EXP 49
23558: PUSH
23559: LD_VAR 0 1
23563: ARRAY
23564: PPUSH
23565: LD_INT 30
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PPUSH
23575: CALL_OW 72
23579: AND
23580: PUSH
23581: LD_EXP 54
23585: PUSH
23586: LD_VAR 0 1
23590: ARRAY
23591: AND
23592: IFFALSE 24200
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
23594: LD_ADDR_EXP 91
23598: PUSH
23599: LD_EXP 91
23603: PPUSH
23604: LD_VAR 0 1
23608: PPUSH
23609: LD_INT 5
23611: PPUSH
23612: CALL_OW 1
23616: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23617: LD_ADDR_VAR 0 2
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: ST_TO_ADDR
// if sci > 1 then
23640: LD_VAR 0 8
23644: PUSH
23645: LD_INT 1
23647: GREATER
23648: IFFALSE 23676
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
23650: LD_ADDR_VAR 0 4
23654: PUSH
23655: LD_VAR 0 4
23659: PUSH
23660: LD_VAR 0 8
23664: PUSH
23665: LD_VAR 0 8
23669: PUSH
23670: LD_INT 1
23672: ARRAY
23673: DIFF
23674: DIFF
23675: ST_TO_ADDR
// if tmp and not sci then
23676: LD_VAR 0 4
23680: PUSH
23681: LD_VAR 0 8
23685: NOT
23686: AND
23687: IFFALSE 23756
// begin sort := SortBySkill ( tmp , 4 ) ;
23689: LD_ADDR_VAR 0 9
23693: PUSH
23694: LD_VAR 0 4
23698: PPUSH
23699: LD_INT 4
23701: PPUSH
23702: CALL 86881 0 2
23706: ST_TO_ADDR
// if sort then
23707: LD_VAR 0 9
23711: IFFALSE 23727
// p := sort [ 1 ] ;
23713: LD_ADDR_VAR 0 11
23717: PUSH
23718: LD_VAR 0 9
23722: PUSH
23723: LD_INT 1
23725: ARRAY
23726: ST_TO_ADDR
// if p then
23727: LD_VAR 0 11
23731: IFFALSE 23756
// result := Replace ( result , 4 , p ) ;
23733: LD_ADDR_VAR 0 2
23737: PUSH
23738: LD_VAR 0 2
23742: PPUSH
23743: LD_INT 4
23745: PPUSH
23746: LD_VAR 0 11
23750: PPUSH
23751: CALL_OW 1
23755: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23756: LD_ADDR_VAR 0 4
23760: PUSH
23761: LD_VAR 0 4
23765: PUSH
23766: LD_VAR 0 7
23770: DIFF
23771: ST_TO_ADDR
// if tmp and mech < 6 then
23772: LD_VAR 0 4
23776: PUSH
23777: LD_VAR 0 7
23781: PUSH
23782: LD_INT 6
23784: LESS
23785: AND
23786: IFFALSE 23974
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23788: LD_ADDR_VAR 0 9
23792: PUSH
23793: LD_VAR 0 4
23797: PUSH
23798: LD_VAR 0 8
23802: PUSH
23803: LD_VAR 0 7
23807: UNION
23808: DIFF
23809: PPUSH
23810: LD_INT 3
23812: PPUSH
23813: CALL 86881 0 2
23817: ST_TO_ADDR
// p := [ ] ;
23818: LD_ADDR_VAR 0 11
23822: PUSH
23823: EMPTY
23824: ST_TO_ADDR
// if sort then
23825: LD_VAR 0 9
23829: IFFALSE 23945
// for i = 1 to 6 - mech do
23831: LD_ADDR_VAR 0 3
23835: PUSH
23836: DOUBLE
23837: LD_INT 1
23839: DEC
23840: ST_TO_ADDR
23841: LD_INT 6
23843: PUSH
23844: LD_VAR 0 7
23848: MINUS
23849: PUSH
23850: FOR_TO
23851: IFFALSE 23943
// begin if i = sort then
23853: LD_VAR 0 3
23857: PUSH
23858: LD_VAR 0 9
23862: EQUAL
23863: IFFALSE 23867
// break ;
23865: GO 23943
// if GetClass ( i ) = 3 then
23867: LD_VAR 0 3
23871: PPUSH
23872: CALL_OW 257
23876: PUSH
23877: LD_INT 3
23879: EQUAL
23880: IFFALSE 23884
// continue ;
23882: GO 23850
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23884: LD_ADDR_VAR 0 11
23888: PUSH
23889: LD_VAR 0 11
23893: PPUSH
23894: LD_VAR 0 11
23898: PUSH
23899: LD_INT 1
23901: PLUS
23902: PPUSH
23903: LD_VAR 0 9
23907: PUSH
23908: LD_VAR 0 3
23912: ARRAY
23913: PPUSH
23914: CALL_OW 2
23918: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23919: LD_ADDR_VAR 0 4
23923: PUSH
23924: LD_VAR 0 4
23928: PUSH
23929: LD_VAR 0 9
23933: PUSH
23934: LD_VAR 0 3
23938: ARRAY
23939: DIFF
23940: ST_TO_ADDR
// end ;
23941: GO 23850
23943: POP
23944: POP
// if p then
23945: LD_VAR 0 11
23949: IFFALSE 23974
// result := Replace ( result , 3 , p ) ;
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_VAR 0 2
23960: PPUSH
23961: LD_INT 3
23963: PPUSH
23964: LD_VAR 0 11
23968: PPUSH
23969: CALL_OW 1
23973: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23974: LD_ADDR_VAR 0 4
23978: PUSH
23979: LD_VAR 0 4
23983: PUSH
23984: LD_VAR 0 6
23988: DIFF
23989: ST_TO_ADDR
// if tmp and eng < 6 then
23990: LD_VAR 0 4
23994: PUSH
23995: LD_VAR 0 6
23999: PUSH
24000: LD_INT 6
24002: LESS
24003: AND
24004: IFFALSE 24198
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24006: LD_ADDR_VAR 0 9
24010: PUSH
24011: LD_VAR 0 4
24015: PUSH
24016: LD_VAR 0 8
24020: PUSH
24021: LD_VAR 0 7
24025: UNION
24026: PUSH
24027: LD_VAR 0 6
24031: UNION
24032: DIFF
24033: PPUSH
24034: LD_INT 2
24036: PPUSH
24037: CALL 86881 0 2
24041: ST_TO_ADDR
// p := [ ] ;
24042: LD_ADDR_VAR 0 11
24046: PUSH
24047: EMPTY
24048: ST_TO_ADDR
// if sort then
24049: LD_VAR 0 9
24053: IFFALSE 24169
// for i = 1 to 6 - eng do
24055: LD_ADDR_VAR 0 3
24059: PUSH
24060: DOUBLE
24061: LD_INT 1
24063: DEC
24064: ST_TO_ADDR
24065: LD_INT 6
24067: PUSH
24068: LD_VAR 0 6
24072: MINUS
24073: PUSH
24074: FOR_TO
24075: IFFALSE 24167
// begin if i = sort then
24077: LD_VAR 0 3
24081: PUSH
24082: LD_VAR 0 9
24086: EQUAL
24087: IFFALSE 24091
// break ;
24089: GO 24167
// if GetClass ( i ) = 2 then
24091: LD_VAR 0 3
24095: PPUSH
24096: CALL_OW 257
24100: PUSH
24101: LD_INT 2
24103: EQUAL
24104: IFFALSE 24108
// continue ;
24106: GO 24074
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24108: LD_ADDR_VAR 0 11
24112: PUSH
24113: LD_VAR 0 11
24117: PPUSH
24118: LD_VAR 0 11
24122: PUSH
24123: LD_INT 1
24125: PLUS
24126: PPUSH
24127: LD_VAR 0 9
24131: PUSH
24132: LD_VAR 0 3
24136: ARRAY
24137: PPUSH
24138: CALL_OW 2
24142: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24143: LD_ADDR_VAR 0 4
24147: PUSH
24148: LD_VAR 0 4
24152: PUSH
24153: LD_VAR 0 9
24157: PUSH
24158: LD_VAR 0 3
24162: ARRAY
24163: DIFF
24164: ST_TO_ADDR
// end ;
24165: GO 24074
24167: POP
24168: POP
// if p then
24169: LD_VAR 0 11
24173: IFFALSE 24198
// result := Replace ( result , 2 , p ) ;
24175: LD_ADDR_VAR 0 2
24179: PUSH
24180: LD_VAR 0 2
24184: PPUSH
24185: LD_INT 2
24187: PPUSH
24188: LD_VAR 0 11
24192: PPUSH
24193: CALL_OW 1
24197: ST_TO_ADDR
// end ; exit ;
24198: GO 24922
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24200: LD_EXP 76
24204: PUSH
24205: LD_EXP 75
24209: PUSH
24210: LD_VAR 0 1
24214: ARRAY
24215: ARRAY
24216: NOT
24217: PUSH
24218: LD_EXP 49
24222: PUSH
24223: LD_VAR 0 1
24227: ARRAY
24228: PPUSH
24229: LD_INT 30
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: CALL_OW 72
24243: AND
24244: PUSH
24245: LD_EXP 54
24249: PUSH
24250: LD_VAR 0 1
24254: ARRAY
24255: NOT
24256: AND
24257: IFFALSE 24922
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24259: LD_ADDR_EXP 91
24263: PUSH
24264: LD_EXP 91
24268: PPUSH
24269: LD_VAR 0 1
24273: PPUSH
24274: LD_INT 6
24276: PPUSH
24277: CALL_OW 1
24281: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24282: LD_ADDR_VAR 0 2
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: ST_TO_ADDR
// if sci >= 1 then
24305: LD_VAR 0 8
24309: PUSH
24310: LD_INT 1
24312: GREATEREQUAL
24313: IFFALSE 24335
// tmp := tmp diff sci [ 1 ] ;
24315: LD_ADDR_VAR 0 4
24319: PUSH
24320: LD_VAR 0 4
24324: PUSH
24325: LD_VAR 0 8
24329: PUSH
24330: LD_INT 1
24332: ARRAY
24333: DIFF
24334: ST_TO_ADDR
// if tmp and not sci then
24335: LD_VAR 0 4
24339: PUSH
24340: LD_VAR 0 8
24344: NOT
24345: AND
24346: IFFALSE 24415
// begin sort := SortBySkill ( tmp , 4 ) ;
24348: LD_ADDR_VAR 0 9
24352: PUSH
24353: LD_VAR 0 4
24357: PPUSH
24358: LD_INT 4
24360: PPUSH
24361: CALL 86881 0 2
24365: ST_TO_ADDR
// if sort then
24366: LD_VAR 0 9
24370: IFFALSE 24386
// p := sort [ 1 ] ;
24372: LD_ADDR_VAR 0 11
24376: PUSH
24377: LD_VAR 0 9
24381: PUSH
24382: LD_INT 1
24384: ARRAY
24385: ST_TO_ADDR
// if p then
24386: LD_VAR 0 11
24390: IFFALSE 24415
// result := Replace ( result , 4 , p ) ;
24392: LD_ADDR_VAR 0 2
24396: PUSH
24397: LD_VAR 0 2
24401: PPUSH
24402: LD_INT 4
24404: PPUSH
24405: LD_VAR 0 11
24409: PPUSH
24410: CALL_OW 1
24414: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24415: LD_ADDR_VAR 0 4
24419: PUSH
24420: LD_VAR 0 4
24424: PUSH
24425: LD_VAR 0 7
24429: DIFF
24430: ST_TO_ADDR
// if tmp and mech < 6 then
24431: LD_VAR 0 4
24435: PUSH
24436: LD_VAR 0 7
24440: PUSH
24441: LD_INT 6
24443: LESS
24444: AND
24445: IFFALSE 24627
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
24447: LD_ADDR_VAR 0 9
24451: PUSH
24452: LD_VAR 0 4
24456: PUSH
24457: LD_VAR 0 7
24461: DIFF
24462: PPUSH
24463: LD_INT 3
24465: PPUSH
24466: CALL 86881 0 2
24470: ST_TO_ADDR
// p := [ ] ;
24471: LD_ADDR_VAR 0 11
24475: PUSH
24476: EMPTY
24477: ST_TO_ADDR
// if sort then
24478: LD_VAR 0 9
24482: IFFALSE 24598
// for i = 1 to 6 - mech do
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: DOUBLE
24490: LD_INT 1
24492: DEC
24493: ST_TO_ADDR
24494: LD_INT 6
24496: PUSH
24497: LD_VAR 0 7
24501: MINUS
24502: PUSH
24503: FOR_TO
24504: IFFALSE 24596
// begin if i = sort then
24506: LD_VAR 0 3
24510: PUSH
24511: LD_VAR 0 9
24515: EQUAL
24516: IFFALSE 24520
// break ;
24518: GO 24596
// if GetClass ( i ) = 3 then
24520: LD_VAR 0 3
24524: PPUSH
24525: CALL_OW 257
24529: PUSH
24530: LD_INT 3
24532: EQUAL
24533: IFFALSE 24537
// continue ;
24535: GO 24503
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24537: LD_ADDR_VAR 0 11
24541: PUSH
24542: LD_VAR 0 11
24546: PPUSH
24547: LD_VAR 0 11
24551: PUSH
24552: LD_INT 1
24554: PLUS
24555: PPUSH
24556: LD_VAR 0 9
24560: PUSH
24561: LD_VAR 0 3
24565: ARRAY
24566: PPUSH
24567: CALL_OW 2
24571: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24572: LD_ADDR_VAR 0 4
24576: PUSH
24577: LD_VAR 0 4
24581: PUSH
24582: LD_VAR 0 9
24586: PUSH
24587: LD_VAR 0 3
24591: ARRAY
24592: DIFF
24593: ST_TO_ADDR
// end ;
24594: GO 24503
24596: POP
24597: POP
// if p then
24598: LD_VAR 0 11
24602: IFFALSE 24627
// result := Replace ( result , 3 , p ) ;
24604: LD_ADDR_VAR 0 2
24608: PUSH
24609: LD_VAR 0 2
24613: PPUSH
24614: LD_INT 3
24616: PPUSH
24617: LD_VAR 0 11
24621: PPUSH
24622: CALL_OW 1
24626: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24627: LD_ADDR_VAR 0 4
24631: PUSH
24632: LD_VAR 0 4
24636: PUSH
24637: LD_VAR 0 6
24641: DIFF
24642: ST_TO_ADDR
// if tmp and eng < 4 then
24643: LD_VAR 0 4
24647: PUSH
24648: LD_VAR 0 6
24652: PUSH
24653: LD_INT 4
24655: LESS
24656: AND
24657: IFFALSE 24847
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
24659: LD_ADDR_VAR 0 9
24663: PUSH
24664: LD_VAR 0 4
24668: PUSH
24669: LD_VAR 0 7
24673: PUSH
24674: LD_VAR 0 6
24678: UNION
24679: DIFF
24680: PPUSH
24681: LD_INT 2
24683: PPUSH
24684: CALL 86881 0 2
24688: ST_TO_ADDR
// p := [ ] ;
24689: LD_ADDR_VAR 0 11
24693: PUSH
24694: EMPTY
24695: ST_TO_ADDR
// if sort then
24696: LD_VAR 0 9
24700: IFFALSE 24816
// for i = 1 to 4 - eng do
24702: LD_ADDR_VAR 0 3
24706: PUSH
24707: DOUBLE
24708: LD_INT 1
24710: DEC
24711: ST_TO_ADDR
24712: LD_INT 4
24714: PUSH
24715: LD_VAR 0 6
24719: MINUS
24720: PUSH
24721: FOR_TO
24722: IFFALSE 24814
// begin if i = sort then
24724: LD_VAR 0 3
24728: PUSH
24729: LD_VAR 0 9
24733: EQUAL
24734: IFFALSE 24738
// break ;
24736: GO 24814
// if GetClass ( i ) = 2 then
24738: LD_VAR 0 3
24742: PPUSH
24743: CALL_OW 257
24747: PUSH
24748: LD_INT 2
24750: EQUAL
24751: IFFALSE 24755
// continue ;
24753: GO 24721
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24755: LD_ADDR_VAR 0 11
24759: PUSH
24760: LD_VAR 0 11
24764: PPUSH
24765: LD_VAR 0 11
24769: PUSH
24770: LD_INT 1
24772: PLUS
24773: PPUSH
24774: LD_VAR 0 9
24778: PUSH
24779: LD_VAR 0 3
24783: ARRAY
24784: PPUSH
24785: CALL_OW 2
24789: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24790: LD_ADDR_VAR 0 4
24794: PUSH
24795: LD_VAR 0 4
24799: PUSH
24800: LD_VAR 0 9
24804: PUSH
24805: LD_VAR 0 3
24809: ARRAY
24810: DIFF
24811: ST_TO_ADDR
// end ;
24812: GO 24721
24814: POP
24815: POP
// if p then
24816: LD_VAR 0 11
24820: IFFALSE 24845
// result := Replace ( result , 2 , p ) ;
24822: LD_ADDR_VAR 0 2
24826: PUSH
24827: LD_VAR 0 2
24831: PPUSH
24832: LD_INT 2
24834: PPUSH
24835: LD_VAR 0 11
24839: PPUSH
24840: CALL_OW 1
24844: ST_TO_ADDR
// end else
24845: GO 24891
// for i = eng downto 5 do
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: DOUBLE
24853: LD_VAR 0 6
24857: INC
24858: ST_TO_ADDR
24859: LD_INT 5
24861: PUSH
24862: FOR_DOWNTO
24863: IFFALSE 24889
// tmp := tmp union eng [ i ] ;
24865: LD_ADDR_VAR 0 4
24869: PUSH
24870: LD_VAR 0 4
24874: PUSH
24875: LD_VAR 0 6
24879: PUSH
24880: LD_VAR 0 3
24884: ARRAY
24885: UNION
24886: ST_TO_ADDR
24887: GO 24862
24889: POP
24890: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
24891: LD_ADDR_VAR 0 2
24895: PUSH
24896: LD_VAR 0 2
24900: PPUSH
24901: LD_INT 1
24903: PPUSH
24904: LD_VAR 0 4
24908: PUSH
24909: LD_VAR 0 5
24913: DIFF
24914: PPUSH
24915: CALL_OW 1
24919: ST_TO_ADDR
// exit ;
24920: GO 24922
// end ; end ;
24922: LD_VAR 0 2
24926: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
24927: LD_INT 0
24929: PPUSH
24930: PPUSH
24931: PPUSH
// if not mc_bases then
24932: LD_EXP 49
24936: NOT
24937: IFFALSE 24941
// exit ;
24939: GO 25047
// for i = 1 to mc_bases do
24941: LD_ADDR_VAR 0 2
24945: PUSH
24946: DOUBLE
24947: LD_INT 1
24949: DEC
24950: ST_TO_ADDR
24951: LD_EXP 49
24955: PUSH
24956: FOR_TO
24957: IFFALSE 25038
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
24959: LD_ADDR_VAR 0 3
24963: PUSH
24964: LD_EXP 49
24968: PUSH
24969: LD_VAR 0 2
24973: ARRAY
24974: PPUSH
24975: LD_INT 21
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 3
24987: PUSH
24988: LD_INT 24
24990: PUSH
24991: LD_INT 1000
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PPUSH
25006: CALL_OW 72
25010: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25011: LD_ADDR_EXP 50
25015: PUSH
25016: LD_EXP 50
25020: PPUSH
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_VAR 0 3
25030: PPUSH
25031: CALL_OW 1
25035: ST_TO_ADDR
// end ;
25036: GO 24956
25038: POP
25039: POP
// RaiseSailEvent ( 101 ) ;
25040: LD_INT 101
25042: PPUSH
25043: CALL_OW 427
// end ;
25047: LD_VAR 0 1
25051: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25052: LD_INT 0
25054: PPUSH
25055: PPUSH
25056: PPUSH
25057: PPUSH
25058: PPUSH
25059: PPUSH
25060: PPUSH
// if not mc_bases then
25061: LD_EXP 49
25065: NOT
25066: IFFALSE 25070
// exit ;
25068: GO 25643
// for i = 1 to mc_bases do
25070: LD_ADDR_VAR 0 2
25074: PUSH
25075: DOUBLE
25076: LD_INT 1
25078: DEC
25079: ST_TO_ADDR
25080: LD_EXP 49
25084: PUSH
25085: FOR_TO
25086: IFFALSE 25634
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
25088: LD_ADDR_VAR 0 5
25092: PUSH
25093: LD_EXP 49
25097: PUSH
25098: LD_VAR 0 2
25102: ARRAY
25103: PUSH
25104: LD_EXP 78
25108: PUSH
25109: LD_VAR 0 2
25113: ARRAY
25114: UNION
25115: PPUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 54
25134: PUSH
25135: EMPTY
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: LD_INT 24
25147: PUSH
25148: LD_INT 750
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PPUSH
25168: CALL_OW 72
25172: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25173: LD_ADDR_VAR 0 6
25177: PUSH
25178: LD_EXP 49
25182: PUSH
25183: LD_VAR 0 2
25187: ARRAY
25188: PPUSH
25189: LD_INT 21
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: LD_INT 3
25204: PUSH
25205: LD_INT 54
25207: PUSH
25208: EMPTY
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 3
25217: PUSH
25218: LD_INT 24
25220: PUSH
25221: LD_INT 250
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: LIST
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PPUSH
25241: CALL_OW 72
25245: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25246: LD_ADDR_VAR 0 7
25250: PUSH
25251: LD_VAR 0 5
25255: PUSH
25256: LD_VAR 0 6
25260: DIFF
25261: ST_TO_ADDR
// if not need_heal_1 then
25262: LD_VAR 0 6
25266: NOT
25267: IFFALSE 25300
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25269: LD_ADDR_EXP 52
25273: PUSH
25274: LD_EXP 52
25278: PPUSH
25279: LD_VAR 0 2
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: EMPTY
25292: PPUSH
25293: CALL 52657 0 3
25297: ST_TO_ADDR
25298: GO 25370
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
25300: LD_ADDR_EXP 52
25304: PUSH
25305: LD_EXP 52
25309: PPUSH
25310: LD_VAR 0 2
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PPUSH
25322: LD_EXP 52
25326: PUSH
25327: LD_VAR 0 2
25331: ARRAY
25332: PUSH
25333: LD_INT 1
25335: ARRAY
25336: PPUSH
25337: LD_INT 3
25339: PUSH
25340: LD_INT 24
25342: PUSH
25343: LD_INT 1000
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 72
25358: PUSH
25359: LD_VAR 0 6
25363: UNION
25364: PPUSH
25365: CALL 52657 0 3
25369: ST_TO_ADDR
// if not need_heal_2 then
25370: LD_VAR 0 7
25374: NOT
25375: IFFALSE 25408
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
25377: LD_ADDR_EXP 52
25381: PUSH
25382: LD_EXP 52
25386: PPUSH
25387: LD_VAR 0 2
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PPUSH
25399: EMPTY
25400: PPUSH
25401: CALL 52657 0 3
25405: ST_TO_ADDR
25406: GO 25440
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
25408: LD_ADDR_EXP 52
25412: PUSH
25413: LD_EXP 52
25417: PPUSH
25418: LD_VAR 0 2
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PPUSH
25430: LD_VAR 0 7
25434: PPUSH
25435: CALL 52657 0 3
25439: ST_TO_ADDR
// if need_heal_2 then
25440: LD_VAR 0 7
25444: IFFALSE 25616
// for j in need_heal_2 do
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_VAR 0 7
25455: PUSH
25456: FOR_IN
25457: IFFALSE 25614
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
25459: LD_ADDR_VAR 0 5
25463: PUSH
25464: LD_EXP 49
25468: PUSH
25469: LD_VAR 0 2
25473: ARRAY
25474: PPUSH
25475: LD_INT 2
25477: PUSH
25478: LD_INT 30
25480: PUSH
25481: LD_INT 6
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 30
25490: PUSH
25491: LD_INT 7
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 30
25500: PUSH
25501: LD_INT 8
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 30
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 25
25530: PUSH
25531: LD_INT 4
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: PPUSH
25547: CALL_OW 72
25551: ST_TO_ADDR
// if tmp then
25552: LD_VAR 0 5
25556: IFFALSE 25612
// begin k := NearestUnitToUnit ( tmp , j ) ;
25558: LD_ADDR_VAR 0 4
25562: PUSH
25563: LD_VAR 0 5
25567: PPUSH
25568: LD_VAR 0 3
25572: PPUSH
25573: CALL_OW 74
25577: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
25578: LD_VAR 0 3
25582: PPUSH
25583: LD_VAR 0 4
25587: PPUSH
25588: CALL_OW 296
25592: PUSH
25593: LD_INT 7
25595: GREATER
25596: IFFALSE 25612
// ComMoveUnit ( j , k ) ;
25598: LD_VAR 0 3
25602: PPUSH
25603: LD_VAR 0 4
25607: PPUSH
25608: CALL_OW 112
// end ; end ;
25612: GO 25456
25614: POP
25615: POP
// if not need_heal_1 and not need_heal_2 then
25616: LD_VAR 0 6
25620: NOT
25621: PUSH
25622: LD_VAR 0 7
25626: NOT
25627: AND
25628: IFFALSE 25632
// continue ;
25630: GO 25085
// end ;
25632: GO 25085
25634: POP
25635: POP
// RaiseSailEvent ( 102 ) ;
25636: LD_INT 102
25638: PPUSH
25639: CALL_OW 427
// end ;
25643: LD_VAR 0 1
25647: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
25648: LD_INT 0
25650: PPUSH
25651: PPUSH
25652: PPUSH
25653: PPUSH
25654: PPUSH
// if not mc_bases then
25655: LD_EXP 49
25659: NOT
25660: IFFALSE 25664
// exit ;
25662: GO 26049
// for i = 1 to mc_bases do
25664: LD_ADDR_VAR 0 2
25668: PUSH
25669: DOUBLE
25670: LD_INT 1
25672: DEC
25673: ST_TO_ADDR
25674: LD_EXP 49
25678: PUSH
25679: FOR_TO
25680: IFFALSE 26047
// begin if not mc_building_need_repair [ i ] then
25682: LD_EXP 50
25686: PUSH
25687: LD_VAR 0 2
25691: ARRAY
25692: NOT
25693: IFFALSE 25731
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
25695: LD_ADDR_EXP 51
25699: PUSH
25700: LD_EXP 51
25704: PPUSH
25705: LD_VAR 0 2
25709: PPUSH
25710: EMPTY
25711: PPUSH
25712: CALL_OW 1
25716: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
25717: LD_VAR 0 2
25721: PPUSH
25722: LD_INT 101
25724: PPUSH
25725: CALL 20769 0 2
// continue ;
25729: GO 25679
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
25731: LD_ADDR_EXP 55
25735: PUSH
25736: LD_EXP 55
25740: PPUSH
25741: LD_VAR 0 2
25745: PPUSH
25746: EMPTY
25747: PPUSH
25748: CALL_OW 1
25752: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25753: LD_VAR 0 2
25757: PPUSH
25758: LD_INT 103
25760: PPUSH
25761: CALL 20769 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
25765: LD_ADDR_VAR 0 5
25769: PUSH
25770: LD_EXP 49
25774: PUSH
25775: LD_VAR 0 2
25779: ARRAY
25780: PUSH
25781: LD_EXP 78
25785: PUSH
25786: LD_VAR 0 2
25790: ARRAY
25791: UNION
25792: PPUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 25
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 25
25808: PUSH
25809: LD_INT 16
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: PPUSH
25824: CALL_OW 72
25828: ST_TO_ADDR
// if not tmp then
25829: LD_VAR 0 5
25833: NOT
25834: IFFALSE 25838
// continue ;
25836: GO 25679
// for j in tmp do
25838: LD_ADDR_VAR 0 3
25842: PUSH
25843: LD_VAR 0 5
25847: PUSH
25848: FOR_IN
25849: IFFALSE 26043
// begin if mc_need_heal [ i ] then
25851: LD_EXP 52
25855: PUSH
25856: LD_VAR 0 2
25860: ARRAY
25861: IFFALSE 25909
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
25863: LD_VAR 0 3
25867: PUSH
25868: LD_EXP 52
25872: PUSH
25873: LD_VAR 0 2
25877: ARRAY
25878: PUSH
25879: LD_INT 1
25881: ARRAY
25882: IN
25883: PUSH
25884: LD_VAR 0 3
25888: PUSH
25889: LD_EXP 52
25893: PUSH
25894: LD_VAR 0 2
25898: ARRAY
25899: PUSH
25900: LD_INT 2
25902: ARRAY
25903: IN
25904: OR
25905: IFFALSE 25909
// continue ;
25907: GO 25848
// if IsInUnit ( j ) then
25909: LD_VAR 0 3
25913: PPUSH
25914: CALL_OW 310
25918: IFFALSE 25929
// ComExitBuilding ( j ) ;
25920: LD_VAR 0 3
25924: PPUSH
25925: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
25929: LD_VAR 0 3
25933: PUSH
25934: LD_EXP 51
25938: PUSH
25939: LD_VAR 0 2
25943: ARRAY
25944: IN
25945: NOT
25946: IFFALSE 26004
// begin SetTag ( j , 101 ) ;
25948: LD_VAR 0 3
25952: PPUSH
25953: LD_INT 101
25955: PPUSH
25956: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
25960: LD_ADDR_EXP 51
25964: PUSH
25965: LD_EXP 51
25969: PPUSH
25970: LD_VAR 0 2
25974: PUSH
25975: LD_EXP 51
25979: PUSH
25980: LD_VAR 0 2
25984: ARRAY
25985: PUSH
25986: LD_INT 1
25988: PLUS
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PPUSH
25994: LD_VAR 0 3
25998: PPUSH
25999: CALL 52657 0 3
26003: ST_TO_ADDR
// end ; wait ( 1 ) ;
26004: LD_INT 1
26006: PPUSH
26007: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
26011: LD_VAR 0 3
26015: PPUSH
26016: LD_EXP 50
26020: PUSH
26021: LD_VAR 0 2
26025: ARRAY
26026: PPUSH
26027: LD_VAR 0 3
26031: PPUSH
26032: CALL_OW 74
26036: PPUSH
26037: CALL_OW 130
// end ;
26041: GO 25848
26043: POP
26044: POP
// end ;
26045: GO 25679
26047: POP
26048: POP
// end ;
26049: LD_VAR 0 1
26053: RET
// export function MC_Heal ; var i , j , tmp ; begin
26054: LD_INT 0
26056: PPUSH
26057: PPUSH
26058: PPUSH
26059: PPUSH
// if not mc_bases then
26060: LD_EXP 49
26064: NOT
26065: IFFALSE 26069
// exit ;
26067: GO 26471
// for i = 1 to mc_bases do
26069: LD_ADDR_VAR 0 2
26073: PUSH
26074: DOUBLE
26075: LD_INT 1
26077: DEC
26078: ST_TO_ADDR
26079: LD_EXP 49
26083: PUSH
26084: FOR_TO
26085: IFFALSE 26469
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
26087: LD_EXP 52
26091: PUSH
26092: LD_VAR 0 2
26096: ARRAY
26097: PUSH
26098: LD_INT 1
26100: ARRAY
26101: NOT
26102: PUSH
26103: LD_EXP 52
26107: PUSH
26108: LD_VAR 0 2
26112: ARRAY
26113: PUSH
26114: LD_INT 2
26116: ARRAY
26117: NOT
26118: AND
26119: IFFALSE 26157
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
26121: LD_ADDR_EXP 53
26125: PUSH
26126: LD_EXP 53
26130: PPUSH
26131: LD_VAR 0 2
26135: PPUSH
26136: EMPTY
26137: PPUSH
26138: CALL_OW 1
26142: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
26143: LD_VAR 0 2
26147: PPUSH
26148: LD_INT 102
26150: PPUSH
26151: CALL 20769 0 2
// continue ;
26155: GO 26084
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
26157: LD_ADDR_VAR 0 4
26161: PUSH
26162: LD_EXP 49
26166: PUSH
26167: LD_VAR 0 2
26171: ARRAY
26172: PPUSH
26173: LD_INT 25
26175: PUSH
26176: LD_INT 4
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PPUSH
26183: CALL_OW 72
26187: ST_TO_ADDR
// if not tmp then
26188: LD_VAR 0 4
26192: NOT
26193: IFFALSE 26197
// continue ;
26195: GO 26084
// if mc_taming [ i ] then
26197: LD_EXP 80
26201: PUSH
26202: LD_VAR 0 2
26206: ARRAY
26207: IFFALSE 26231
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
26209: LD_ADDR_EXP 80
26213: PUSH
26214: LD_EXP 80
26218: PPUSH
26219: LD_VAR 0 2
26223: PPUSH
26224: EMPTY
26225: PPUSH
26226: CALL_OW 1
26230: ST_TO_ADDR
// for j in tmp do
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_VAR 0 4
26240: PUSH
26241: FOR_IN
26242: IFFALSE 26465
// begin if IsInUnit ( j ) then
26244: LD_VAR 0 3
26248: PPUSH
26249: CALL_OW 310
26253: IFFALSE 26264
// ComExitBuilding ( j ) ;
26255: LD_VAR 0 3
26259: PPUSH
26260: CALL_OW 122
// if not j in mc_healers [ i ] then
26264: LD_VAR 0 3
26268: PUSH
26269: LD_EXP 53
26273: PUSH
26274: LD_VAR 0 2
26278: ARRAY
26279: IN
26280: NOT
26281: IFFALSE 26327
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
26283: LD_ADDR_EXP 53
26287: PUSH
26288: LD_EXP 53
26292: PPUSH
26293: LD_VAR 0 2
26297: PUSH
26298: LD_EXP 53
26302: PUSH
26303: LD_VAR 0 2
26307: ARRAY
26308: PUSH
26309: LD_INT 1
26311: PLUS
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PPUSH
26317: LD_VAR 0 3
26321: PPUSH
26322: CALL 52657 0 3
26326: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
26327: LD_VAR 0 3
26331: PPUSH
26332: CALL_OW 110
26336: PUSH
26337: LD_INT 102
26339: NONEQUAL
26340: IFFALSE 26354
// SetTag ( j , 102 ) ;
26342: LD_VAR 0 3
26346: PPUSH
26347: LD_INT 102
26349: PPUSH
26350: CALL_OW 109
// Wait ( 3 ) ;
26354: LD_INT 3
26356: PPUSH
26357: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
26361: LD_EXP 52
26365: PUSH
26366: LD_VAR 0 2
26370: ARRAY
26371: PUSH
26372: LD_INT 1
26374: ARRAY
26375: IFFALSE 26407
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
26377: LD_VAR 0 3
26381: PPUSH
26382: LD_EXP 52
26386: PUSH
26387: LD_VAR 0 2
26391: ARRAY
26392: PUSH
26393: LD_INT 1
26395: ARRAY
26396: PUSH
26397: LD_INT 1
26399: ARRAY
26400: PPUSH
26401: CALL_OW 128
26405: GO 26463
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
26407: LD_VAR 0 3
26411: PPUSH
26412: CALL_OW 314
26416: NOT
26417: PUSH
26418: LD_EXP 52
26422: PUSH
26423: LD_VAR 0 2
26427: ARRAY
26428: PUSH
26429: LD_INT 2
26431: ARRAY
26432: AND
26433: IFFALSE 26463
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
26435: LD_VAR 0 3
26439: PPUSH
26440: LD_EXP 52
26444: PUSH
26445: LD_VAR 0 2
26449: ARRAY
26450: PUSH
26451: LD_INT 2
26453: ARRAY
26454: PUSH
26455: LD_INT 1
26457: ARRAY
26458: PPUSH
26459: CALL_OW 128
// end ;
26463: GO 26241
26465: POP
26466: POP
// end ;
26467: GO 26084
26469: POP
26470: POP
// end ;
26471: LD_VAR 0 1
26475: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
26476: LD_INT 0
26478: PPUSH
26479: PPUSH
26480: PPUSH
26481: PPUSH
26482: PPUSH
// if not mc_bases then
26483: LD_EXP 49
26487: NOT
26488: IFFALSE 26492
// exit ;
26490: GO 27635
// for i = 1 to mc_bases do
26492: LD_ADDR_VAR 0 2
26496: PUSH
26497: DOUBLE
26498: LD_INT 1
26500: DEC
26501: ST_TO_ADDR
26502: LD_EXP 49
26506: PUSH
26507: FOR_TO
26508: IFFALSE 27633
// begin if mc_scan [ i ] then
26510: LD_EXP 72
26514: PUSH
26515: LD_VAR 0 2
26519: ARRAY
26520: IFFALSE 26524
// continue ;
26522: GO 26507
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
26524: LD_EXP 54
26528: PUSH
26529: LD_VAR 0 2
26533: ARRAY
26534: NOT
26535: PUSH
26536: LD_EXP 56
26540: PUSH
26541: LD_VAR 0 2
26545: ARRAY
26546: NOT
26547: AND
26548: PUSH
26549: LD_EXP 55
26553: PUSH
26554: LD_VAR 0 2
26558: ARRAY
26559: AND
26560: IFFALSE 26598
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
26562: LD_ADDR_EXP 55
26566: PUSH
26567: LD_EXP 55
26571: PPUSH
26572: LD_VAR 0 2
26576: PPUSH
26577: EMPTY
26578: PPUSH
26579: CALL_OW 1
26583: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26584: LD_VAR 0 2
26588: PPUSH
26589: LD_INT 103
26591: PPUSH
26592: CALL 20769 0 2
// continue ;
26596: GO 26507
// end ; if mc_construct_list [ i ] then
26598: LD_EXP 56
26602: PUSH
26603: LD_VAR 0 2
26607: ARRAY
26608: IFFALSE 26828
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
26610: LD_ADDR_VAR 0 4
26614: PUSH
26615: LD_EXP 49
26619: PUSH
26620: LD_VAR 0 2
26624: ARRAY
26625: PPUSH
26626: LD_INT 25
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 72
26640: PUSH
26641: LD_EXP 51
26645: PUSH
26646: LD_VAR 0 2
26650: ARRAY
26651: DIFF
26652: ST_TO_ADDR
// if not tmp then
26653: LD_VAR 0 4
26657: NOT
26658: IFFALSE 26662
// continue ;
26660: GO 26507
// for j in tmp do
26662: LD_ADDR_VAR 0 3
26666: PUSH
26667: LD_VAR 0 4
26671: PUSH
26672: FOR_IN
26673: IFFALSE 26824
// begin if not mc_builders [ i ] then
26675: LD_EXP 55
26679: PUSH
26680: LD_VAR 0 2
26684: ARRAY
26685: NOT
26686: IFFALSE 26744
// begin SetTag ( j , 103 ) ;
26688: LD_VAR 0 3
26692: PPUSH
26693: LD_INT 103
26695: PPUSH
26696: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
26700: LD_ADDR_EXP 55
26704: PUSH
26705: LD_EXP 55
26709: PPUSH
26710: LD_VAR 0 2
26714: PUSH
26715: LD_EXP 55
26719: PUSH
26720: LD_VAR 0 2
26724: ARRAY
26725: PUSH
26726: LD_INT 1
26728: PLUS
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PPUSH
26734: LD_VAR 0 3
26738: PPUSH
26739: CALL 52657 0 3
26743: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
26744: LD_VAR 0 3
26748: PPUSH
26749: CALL_OW 310
26753: IFFALSE 26764
// ComExitBuilding ( j ) ;
26755: LD_VAR 0 3
26759: PPUSH
26760: CALL_OW 122
// wait ( 3 ) ;
26764: LD_INT 3
26766: PPUSH
26767: CALL_OW 67
// if not mc_construct_list [ i ] then
26771: LD_EXP 56
26775: PUSH
26776: LD_VAR 0 2
26780: ARRAY
26781: NOT
26782: IFFALSE 26786
// break ;
26784: GO 26824
// if not HasTask ( j ) then
26786: LD_VAR 0 3
26790: PPUSH
26791: CALL_OW 314
26795: NOT
26796: IFFALSE 26822
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
26798: LD_VAR 0 3
26802: PPUSH
26803: LD_EXP 56
26807: PUSH
26808: LD_VAR 0 2
26812: ARRAY
26813: PUSH
26814: LD_INT 1
26816: ARRAY
26817: PPUSH
26818: CALL 55508 0 2
// end ;
26822: GO 26672
26824: POP
26825: POP
// end else
26826: GO 27631
// if mc_build_list [ i ] then
26828: LD_EXP 54
26832: PUSH
26833: LD_VAR 0 2
26837: ARRAY
26838: IFFALSE 27631
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
26840: LD_ADDR_VAR 0 5
26844: PUSH
26845: LD_EXP 49
26849: PUSH
26850: LD_VAR 0 2
26854: ARRAY
26855: PPUSH
26856: LD_INT 2
26858: PUSH
26859: LD_INT 30
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 30
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: PPUSH
26884: CALL_OW 72
26888: ST_TO_ADDR
// if depot then
26889: LD_VAR 0 5
26893: IFFALSE 26911
// depot := depot [ 1 ] else
26895: LD_ADDR_VAR 0 5
26899: PUSH
26900: LD_VAR 0 5
26904: PUSH
26905: LD_INT 1
26907: ARRAY
26908: ST_TO_ADDR
26909: GO 26919
// depot := 0 ;
26911: LD_ADDR_VAR 0 5
26915: PUSH
26916: LD_INT 0
26918: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
26919: LD_EXP 54
26923: PUSH
26924: LD_VAR 0 2
26928: ARRAY
26929: PUSH
26930: LD_INT 1
26932: ARRAY
26933: PUSH
26934: LD_INT 1
26936: ARRAY
26937: PPUSH
26938: CALL 55338 0 1
26942: PUSH
26943: LD_EXP 49
26947: PUSH
26948: LD_VAR 0 2
26952: ARRAY
26953: PPUSH
26954: LD_INT 2
26956: PUSH
26957: LD_INT 30
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 30
26969: PUSH
26970: LD_INT 3
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: PPUSH
26982: CALL_OW 72
26986: NOT
26987: AND
26988: IFFALSE 27093
// begin for j = 1 to mc_build_list [ i ] do
26990: LD_ADDR_VAR 0 3
26994: PUSH
26995: DOUBLE
26996: LD_INT 1
26998: DEC
26999: ST_TO_ADDR
27000: LD_EXP 54
27004: PUSH
27005: LD_VAR 0 2
27009: ARRAY
27010: PUSH
27011: FOR_TO
27012: IFFALSE 27091
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
27014: LD_EXP 54
27018: PUSH
27019: LD_VAR 0 2
27023: ARRAY
27024: PUSH
27025: LD_VAR 0 3
27029: ARRAY
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PUSH
27035: LD_INT 2
27037: EQUAL
27038: IFFALSE 27089
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
27040: LD_ADDR_EXP 54
27044: PUSH
27045: LD_EXP 54
27049: PPUSH
27050: LD_VAR 0 2
27054: PPUSH
27055: LD_EXP 54
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: PPUSH
27066: LD_VAR 0 3
27070: PPUSH
27071: LD_INT 1
27073: PPUSH
27074: LD_INT 0
27076: PPUSH
27077: CALL 52075 0 4
27081: PPUSH
27082: CALL_OW 1
27086: ST_TO_ADDR
// break ;
27087: GO 27091
// end ;
27089: GO 27011
27091: POP
27092: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
27093: LD_EXP 54
27097: PUSH
27098: LD_VAR 0 2
27102: ARRAY
27103: PUSH
27104: LD_INT 1
27106: ARRAY
27107: PUSH
27108: LD_INT 1
27110: ARRAY
27111: PUSH
27112: LD_INT 0
27114: EQUAL
27115: PUSH
27116: LD_VAR 0 5
27120: PUSH
27121: LD_VAR 0 5
27125: PPUSH
27126: LD_EXP 54
27130: PUSH
27131: LD_VAR 0 2
27135: ARRAY
27136: PUSH
27137: LD_INT 1
27139: ARRAY
27140: PUSH
27141: LD_INT 1
27143: ARRAY
27144: PPUSH
27145: LD_EXP 54
27149: PUSH
27150: LD_VAR 0 2
27154: ARRAY
27155: PUSH
27156: LD_INT 1
27158: ARRAY
27159: PUSH
27160: LD_INT 2
27162: ARRAY
27163: PPUSH
27164: LD_EXP 54
27168: PUSH
27169: LD_VAR 0 2
27173: ARRAY
27174: PUSH
27175: LD_INT 1
27177: ARRAY
27178: PUSH
27179: LD_INT 3
27181: ARRAY
27182: PPUSH
27183: LD_EXP 54
27187: PUSH
27188: LD_VAR 0 2
27192: ARRAY
27193: PUSH
27194: LD_INT 1
27196: ARRAY
27197: PUSH
27198: LD_INT 4
27200: ARRAY
27201: PPUSH
27202: CALL 60054 0 5
27206: AND
27207: OR
27208: IFFALSE 27489
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27210: LD_ADDR_VAR 0 4
27214: PUSH
27215: LD_EXP 49
27219: PUSH
27220: LD_VAR 0 2
27224: ARRAY
27225: PPUSH
27226: LD_INT 25
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PPUSH
27236: CALL_OW 72
27240: PUSH
27241: LD_EXP 51
27245: PUSH
27246: LD_VAR 0 2
27250: ARRAY
27251: DIFF
27252: ST_TO_ADDR
// if not tmp then
27253: LD_VAR 0 4
27257: NOT
27258: IFFALSE 27262
// continue ;
27260: GO 26507
// for j in tmp do
27262: LD_ADDR_VAR 0 3
27266: PUSH
27267: LD_VAR 0 4
27271: PUSH
27272: FOR_IN
27273: IFFALSE 27485
// begin if not mc_builders [ i ] then
27275: LD_EXP 55
27279: PUSH
27280: LD_VAR 0 2
27284: ARRAY
27285: NOT
27286: IFFALSE 27344
// begin SetTag ( j , 103 ) ;
27288: LD_VAR 0 3
27292: PPUSH
27293: LD_INT 103
27295: PPUSH
27296: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27300: LD_ADDR_EXP 55
27304: PUSH
27305: LD_EXP 55
27309: PPUSH
27310: LD_VAR 0 2
27314: PUSH
27315: LD_EXP 55
27319: PUSH
27320: LD_VAR 0 2
27324: ARRAY
27325: PUSH
27326: LD_INT 1
27328: PLUS
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PPUSH
27334: LD_VAR 0 3
27338: PPUSH
27339: CALL 52657 0 3
27343: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27344: LD_VAR 0 3
27348: PPUSH
27349: CALL_OW 310
27353: IFFALSE 27364
// ComExitBuilding ( j ) ;
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL_OW 122
// wait ( 3 ) ;
27364: LD_INT 3
27366: PPUSH
27367: CALL_OW 67
// if not mc_build_list [ i ] then
27371: LD_EXP 54
27375: PUSH
27376: LD_VAR 0 2
27380: ARRAY
27381: NOT
27382: IFFALSE 27386
// break ;
27384: GO 27485
// if not HasTask ( j ) then
27386: LD_VAR 0 3
27390: PPUSH
27391: CALL_OW 314
27395: NOT
27396: IFFALSE 27483
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
27398: LD_VAR 0 3
27402: PPUSH
27403: LD_EXP 54
27407: PUSH
27408: LD_VAR 0 2
27412: ARRAY
27413: PUSH
27414: LD_INT 1
27416: ARRAY
27417: PUSH
27418: LD_INT 1
27420: ARRAY
27421: PPUSH
27422: LD_EXP 54
27426: PUSH
27427: LD_VAR 0 2
27431: ARRAY
27432: PUSH
27433: LD_INT 1
27435: ARRAY
27436: PUSH
27437: LD_INT 2
27439: ARRAY
27440: PPUSH
27441: LD_EXP 54
27445: PUSH
27446: LD_VAR 0 2
27450: ARRAY
27451: PUSH
27452: LD_INT 1
27454: ARRAY
27455: PUSH
27456: LD_INT 3
27458: ARRAY
27459: PPUSH
27460: LD_EXP 54
27464: PUSH
27465: LD_VAR 0 2
27469: ARRAY
27470: PUSH
27471: LD_INT 1
27473: ARRAY
27474: PUSH
27475: LD_INT 4
27477: ARRAY
27478: PPUSH
27479: CALL_OW 145
// end ;
27483: GO 27272
27485: POP
27486: POP
// end else
27487: GO 27631
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
27489: LD_EXP 49
27493: PUSH
27494: LD_VAR 0 2
27498: ARRAY
27499: PPUSH
27500: LD_EXP 54
27504: PUSH
27505: LD_VAR 0 2
27509: ARRAY
27510: PUSH
27511: LD_INT 1
27513: ARRAY
27514: PUSH
27515: LD_INT 1
27517: ARRAY
27518: PPUSH
27519: LD_EXP 54
27523: PUSH
27524: LD_VAR 0 2
27528: ARRAY
27529: PUSH
27530: LD_INT 1
27532: ARRAY
27533: PUSH
27534: LD_INT 2
27536: ARRAY
27537: PPUSH
27538: LD_EXP 54
27542: PUSH
27543: LD_VAR 0 2
27547: ARRAY
27548: PUSH
27549: LD_INT 1
27551: ARRAY
27552: PUSH
27553: LD_INT 3
27555: ARRAY
27556: PPUSH
27557: LD_EXP 54
27561: PUSH
27562: LD_VAR 0 2
27566: ARRAY
27567: PUSH
27568: LD_INT 1
27570: ARRAY
27571: PUSH
27572: LD_INT 4
27574: ARRAY
27575: PPUSH
27576: CALL 59408 0 5
27580: NOT
27581: IFFALSE 27631
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
27583: LD_ADDR_EXP 54
27587: PUSH
27588: LD_EXP 54
27592: PPUSH
27593: LD_VAR 0 2
27597: PPUSH
27598: LD_EXP 54
27602: PUSH
27603: LD_VAR 0 2
27607: ARRAY
27608: PPUSH
27609: LD_INT 1
27611: PPUSH
27612: LD_INT 1
27614: NEG
27615: PPUSH
27616: LD_INT 0
27618: PPUSH
27619: CALL 52075 0 4
27623: PPUSH
27624: CALL_OW 1
27628: ST_TO_ADDR
// continue ;
27629: GO 26507
// end ; end ; end ;
27631: GO 26507
27633: POP
27634: POP
// end ;
27635: LD_VAR 0 1
27639: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
27640: LD_INT 0
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
// if not mc_bases then
27648: LD_EXP 49
27652: NOT
27653: IFFALSE 27657
// exit ;
27655: GO 28084
// for i = 1 to mc_bases do
27657: LD_ADDR_VAR 0 2
27661: PUSH
27662: DOUBLE
27663: LD_INT 1
27665: DEC
27666: ST_TO_ADDR
27667: LD_EXP 49
27671: PUSH
27672: FOR_TO
27673: IFFALSE 28082
// begin tmp := mc_build_upgrade [ i ] ;
27675: LD_ADDR_VAR 0 4
27679: PUSH
27680: LD_EXP 81
27684: PUSH
27685: LD_VAR 0 2
27689: ARRAY
27690: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
27691: LD_ADDR_VAR 0 6
27695: PUSH
27696: LD_EXP 82
27700: PUSH
27701: LD_VAR 0 2
27705: ARRAY
27706: PPUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 30
27712: PUSH
27713: LD_INT 6
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 30
27722: PUSH
27723: LD_INT 7
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: PPUSH
27735: CALL_OW 72
27739: ST_TO_ADDR
// if not tmp and not lab then
27740: LD_VAR 0 4
27744: NOT
27745: PUSH
27746: LD_VAR 0 6
27750: NOT
27751: AND
27752: IFFALSE 27756
// continue ;
27754: GO 27672
// if tmp then
27756: LD_VAR 0 4
27760: IFFALSE 27880
// for j in tmp do
27762: LD_ADDR_VAR 0 3
27766: PUSH
27767: LD_VAR 0 4
27771: PUSH
27772: FOR_IN
27773: IFFALSE 27878
// begin if UpgradeCost ( j ) then
27775: LD_VAR 0 3
27779: PPUSH
27780: CALL 59068 0 1
27784: IFFALSE 27876
// begin ComUpgrade ( j ) ;
27786: LD_VAR 0 3
27790: PPUSH
27791: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
27795: LD_ADDR_EXP 81
27799: PUSH
27800: LD_EXP 81
27804: PPUSH
27805: LD_VAR 0 2
27809: PPUSH
27810: LD_EXP 81
27814: PUSH
27815: LD_VAR 0 2
27819: ARRAY
27820: PUSH
27821: LD_VAR 0 3
27825: DIFF
27826: PPUSH
27827: CALL_OW 1
27831: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
27832: LD_ADDR_EXP 56
27836: PUSH
27837: LD_EXP 56
27841: PPUSH
27842: LD_VAR 0 2
27846: PUSH
27847: LD_EXP 56
27851: PUSH
27852: LD_VAR 0 2
27856: ARRAY
27857: PUSH
27858: LD_INT 1
27860: PLUS
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PPUSH
27866: LD_VAR 0 3
27870: PPUSH
27871: CALL 52657 0 3
27875: ST_TO_ADDR
// end ; end ;
27876: GO 27772
27878: POP
27879: POP
// if not lab or not mc_lab_upgrade [ i ] then
27880: LD_VAR 0 6
27884: NOT
27885: PUSH
27886: LD_EXP 83
27890: PUSH
27891: LD_VAR 0 2
27895: ARRAY
27896: NOT
27897: OR
27898: IFFALSE 27902
// continue ;
27900: GO 27672
// for j in lab do
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_VAR 0 6
27911: PUSH
27912: FOR_IN
27913: IFFALSE 28078
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
27915: LD_VAR 0 3
27919: PPUSH
27920: CALL_OW 266
27924: PUSH
27925: LD_INT 6
27927: PUSH
27928: LD_INT 7
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: IN
27935: PUSH
27936: LD_VAR 0 3
27940: PPUSH
27941: CALL_OW 461
27945: PUSH
27946: LD_INT 1
27948: NONEQUAL
27949: AND
27950: IFFALSE 28076
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
27952: LD_VAR 0 3
27956: PPUSH
27957: LD_EXP 83
27961: PUSH
27962: LD_VAR 0 2
27966: ARRAY
27967: PUSH
27968: LD_INT 1
27970: ARRAY
27971: PPUSH
27972: CALL 59273 0 2
27976: IFFALSE 28076
// begin ComCancel ( j ) ;
27978: LD_VAR 0 3
27982: PPUSH
27983: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
27987: LD_VAR 0 3
27991: PPUSH
27992: LD_EXP 83
27996: PUSH
27997: LD_VAR 0 2
28001: ARRAY
28002: PUSH
28003: LD_INT 1
28005: ARRAY
28006: PPUSH
28007: CALL_OW 207
// if not j in mc_construct_list [ i ] then
28011: LD_VAR 0 3
28015: PUSH
28016: LD_EXP 56
28020: PUSH
28021: LD_VAR 0 2
28025: ARRAY
28026: IN
28027: NOT
28028: IFFALSE 28074
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28030: LD_ADDR_EXP 56
28034: PUSH
28035: LD_EXP 56
28039: PPUSH
28040: LD_VAR 0 2
28044: PUSH
28045: LD_EXP 56
28049: PUSH
28050: LD_VAR 0 2
28054: ARRAY
28055: PUSH
28056: LD_INT 1
28058: PLUS
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: LD_VAR 0 3
28068: PPUSH
28069: CALL 52657 0 3
28073: ST_TO_ADDR
// break ;
28074: GO 28078
// end ; end ; end ;
28076: GO 27912
28078: POP
28079: POP
// end ;
28080: GO 27672
28082: POP
28083: POP
// end ;
28084: LD_VAR 0 1
28088: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
28089: LD_INT 0
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
// if not mc_bases then
28100: LD_EXP 49
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28514
// for i = 1 to mc_bases do
28109: LD_ADDR_VAR 0 2
28113: PUSH
28114: DOUBLE
28115: LD_INT 1
28117: DEC
28118: ST_TO_ADDR
28119: LD_EXP 49
28123: PUSH
28124: FOR_TO
28125: IFFALSE 28512
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
28127: LD_EXP 57
28131: PUSH
28132: LD_VAR 0 2
28136: ARRAY
28137: NOT
28138: PUSH
28139: LD_EXP 49
28143: PUSH
28144: LD_VAR 0 2
28148: ARRAY
28149: PPUSH
28150: LD_INT 30
28152: PUSH
28153: LD_INT 3
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL_OW 72
28164: NOT
28165: OR
28166: IFFALSE 28170
// continue ;
28168: GO 28124
// busy := false ;
28170: LD_ADDR_VAR 0 8
28174: PUSH
28175: LD_INT 0
28177: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
28178: LD_ADDR_VAR 0 4
28182: PUSH
28183: LD_EXP 49
28187: PUSH
28188: LD_VAR 0 2
28192: ARRAY
28193: PPUSH
28194: LD_INT 30
28196: PUSH
28197: LD_INT 3
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 72
28208: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
28209: LD_ADDR_VAR 0 6
28213: PUSH
28214: LD_EXP 57
28218: PUSH
28219: LD_VAR 0 2
28223: ARRAY
28224: PPUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 30
28230: PUSH
28231: LD_INT 32
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 30
28240: PUSH
28241: LD_INT 33
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: LIST
28252: PPUSH
28253: CALL_OW 72
28257: ST_TO_ADDR
// if not t then
28258: LD_VAR 0 6
28262: NOT
28263: IFFALSE 28267
// continue ;
28265: GO 28124
// for j in tmp do
28267: LD_ADDR_VAR 0 3
28271: PUSH
28272: LD_VAR 0 4
28276: PUSH
28277: FOR_IN
28278: IFFALSE 28308
// if not BuildingStatus ( j ) = bs_idle then
28280: LD_VAR 0 3
28284: PPUSH
28285: CALL_OW 461
28289: PUSH
28290: LD_INT 2
28292: EQUAL
28293: NOT
28294: IFFALSE 28306
// begin busy := true ;
28296: LD_ADDR_VAR 0 8
28300: PUSH
28301: LD_INT 1
28303: ST_TO_ADDR
// break ;
28304: GO 28308
// end ;
28306: GO 28277
28308: POP
28309: POP
// if busy then
28310: LD_VAR 0 8
28314: IFFALSE 28318
// continue ;
28316: GO 28124
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
28318: LD_ADDR_VAR 0 7
28322: PUSH
28323: LD_VAR 0 6
28327: PPUSH
28328: LD_INT 35
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PPUSH
28338: CALL_OW 72
28342: ST_TO_ADDR
// if tw then
28343: LD_VAR 0 7
28347: IFFALSE 28424
// begin tw := tw [ 1 ] ;
28349: LD_ADDR_VAR 0 7
28353: PUSH
28354: LD_VAR 0 7
28358: PUSH
28359: LD_INT 1
28361: ARRAY
28362: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
28363: LD_ADDR_VAR 0 9
28367: PUSH
28368: LD_VAR 0 7
28372: PPUSH
28373: LD_EXP 74
28377: PUSH
28378: LD_VAR 0 2
28382: ARRAY
28383: PPUSH
28384: CALL 57627 0 2
28388: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
28389: LD_EXP 88
28393: PUSH
28394: LD_VAR 0 2
28398: ARRAY
28399: IFFALSE 28422
// if not weapon in mc_allowed_tower_weapons [ i ] then
28401: LD_VAR 0 9
28405: PUSH
28406: LD_EXP 88
28410: PUSH
28411: LD_VAR 0 2
28415: ARRAY
28416: IN
28417: NOT
28418: IFFALSE 28422
// continue ;
28420: GO 28124
// end else
28422: GO 28487
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
28424: LD_ADDR_VAR 0 5
28428: PUSH
28429: LD_EXP 57
28433: PUSH
28434: LD_VAR 0 2
28438: ARRAY
28439: PPUSH
28440: LD_VAR 0 4
28444: PPUSH
28445: CALL 87804 0 2
28449: ST_TO_ADDR
// if not tmp2 then
28450: LD_VAR 0 5
28454: NOT
28455: IFFALSE 28459
// continue ;
28457: GO 28124
// tw := tmp2 [ 1 ] ;
28459: LD_ADDR_VAR 0 7
28463: PUSH
28464: LD_VAR 0 5
28468: PUSH
28469: LD_INT 1
28471: ARRAY
28472: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_VAR 0 5
28482: PUSH
28483: LD_INT 2
28485: ARRAY
28486: ST_TO_ADDR
// end ; if not weapon then
28487: LD_VAR 0 9
28491: NOT
28492: IFFALSE 28496
// continue ;
28494: GO 28124
// ComPlaceWeapon ( tw , weapon ) ;
28496: LD_VAR 0 7
28500: PPUSH
28501: LD_VAR 0 9
28505: PPUSH
28506: CALL_OW 148
// end ;
28510: GO 28124
28512: POP
28513: POP
// end ;
28514: LD_VAR 0 1
28518: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
28519: LD_INT 0
28521: PPUSH
28522: PPUSH
28523: PPUSH
28524: PPUSH
28525: PPUSH
28526: PPUSH
// if not mc_bases then
28527: LD_EXP 49
28531: NOT
28532: IFFALSE 28536
// exit ;
28534: GO 29548
// for i = 1 to mc_bases do
28536: LD_ADDR_VAR 0 2
28540: PUSH
28541: DOUBLE
28542: LD_INT 1
28544: DEC
28545: ST_TO_ADDR
28546: LD_EXP 49
28550: PUSH
28551: FOR_TO
28552: IFFALSE 29546
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
28554: LD_EXP 62
28558: PUSH
28559: LD_VAR 0 2
28563: ARRAY
28564: NOT
28565: PUSH
28566: LD_EXP 62
28570: PUSH
28571: LD_VAR 0 2
28575: ARRAY
28576: PUSH
28577: LD_EXP 63
28581: PUSH
28582: LD_VAR 0 2
28586: ARRAY
28587: EQUAL
28588: OR
28589: IFFALSE 28593
// continue ;
28591: GO 28551
// if mc_miners [ i ] then
28593: LD_EXP 63
28597: PUSH
28598: LD_VAR 0 2
28602: ARRAY
28603: IFFALSE 29233
// begin k := 1 ;
28605: LD_ADDR_VAR 0 4
28609: PUSH
28610: LD_INT 1
28612: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: DOUBLE
28619: LD_EXP 63
28623: PUSH
28624: LD_VAR 0 2
28628: ARRAY
28629: INC
28630: ST_TO_ADDR
28631: LD_INT 1
28633: PUSH
28634: FOR_DOWNTO
28635: IFFALSE 29231
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
28637: LD_EXP 63
28641: PUSH
28642: LD_VAR 0 2
28646: ARRAY
28647: PUSH
28648: LD_VAR 0 3
28652: ARRAY
28653: PPUSH
28654: CALL_OW 301
28658: PUSH
28659: LD_EXP 63
28663: PUSH
28664: LD_VAR 0 2
28668: ARRAY
28669: PUSH
28670: LD_VAR 0 3
28674: ARRAY
28675: PPUSH
28676: CALL_OW 257
28680: PUSH
28681: LD_INT 1
28683: NONEQUAL
28684: OR
28685: IFFALSE 28748
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
28687: LD_ADDR_VAR 0 5
28691: PUSH
28692: LD_EXP 63
28696: PUSH
28697: LD_VAR 0 2
28701: ARRAY
28702: PUSH
28703: LD_EXP 63
28707: PUSH
28708: LD_VAR 0 2
28712: ARRAY
28713: PUSH
28714: LD_VAR 0 3
28718: ARRAY
28719: DIFF
28720: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
28721: LD_ADDR_EXP 63
28725: PUSH
28726: LD_EXP 63
28730: PPUSH
28731: LD_VAR 0 2
28735: PPUSH
28736: LD_VAR 0 5
28740: PPUSH
28741: CALL_OW 1
28745: ST_TO_ADDR
// continue ;
28746: GO 28634
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
28748: LD_EXP 63
28752: PUSH
28753: LD_VAR 0 2
28757: ARRAY
28758: PUSH
28759: LD_VAR 0 3
28763: ARRAY
28764: PPUSH
28765: CALL 52593 0 1
28769: PUSH
28770: LD_EXP 63
28774: PUSH
28775: LD_VAR 0 2
28779: ARRAY
28780: PUSH
28781: LD_VAR 0 3
28785: ARRAY
28786: PPUSH
28787: CALL_OW 255
28791: PPUSH
28792: LD_EXP 62
28796: PUSH
28797: LD_VAR 0 2
28801: ARRAY
28802: PUSH
28803: LD_VAR 0 4
28807: ARRAY
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: PPUSH
28813: LD_EXP 62
28817: PUSH
28818: LD_VAR 0 2
28822: ARRAY
28823: PUSH
28824: LD_VAR 0 4
28828: ARRAY
28829: PUSH
28830: LD_INT 2
28832: ARRAY
28833: PPUSH
28834: LD_INT 15
28836: PPUSH
28837: CALL 53553 0 4
28841: PUSH
28842: LD_INT 4
28844: ARRAY
28845: PUSH
28846: LD_EXP 63
28850: PUSH
28851: LD_VAR 0 2
28855: ARRAY
28856: PUSH
28857: LD_VAR 0 3
28861: ARRAY
28862: PPUSH
28863: LD_INT 10
28865: PPUSH
28866: CALL 55250 0 2
28870: PUSH
28871: LD_INT 4
28873: ARRAY
28874: OR
28875: AND
28876: IFFALSE 28899
// ComStop ( mc_miners [ i ] [ j ] ) ;
28878: LD_EXP 63
28882: PUSH
28883: LD_VAR 0 2
28887: ARRAY
28888: PUSH
28889: LD_VAR 0 3
28893: ARRAY
28894: PPUSH
28895: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
28899: LD_EXP 63
28903: PUSH
28904: LD_VAR 0 2
28908: ARRAY
28909: PUSH
28910: LD_VAR 0 3
28914: ARRAY
28915: PPUSH
28916: CALL_OW 257
28920: PUSH
28921: LD_INT 1
28923: EQUAL
28924: PUSH
28925: LD_EXP 63
28929: PUSH
28930: LD_VAR 0 2
28934: ARRAY
28935: PUSH
28936: LD_VAR 0 3
28940: ARRAY
28941: PPUSH
28942: CALL_OW 459
28946: NOT
28947: AND
28948: PUSH
28949: LD_EXP 63
28953: PUSH
28954: LD_VAR 0 2
28958: ARRAY
28959: PUSH
28960: LD_VAR 0 3
28964: ARRAY
28965: PPUSH
28966: CALL_OW 255
28970: PPUSH
28971: LD_EXP 62
28975: PUSH
28976: LD_VAR 0 2
28980: ARRAY
28981: PUSH
28982: LD_VAR 0 4
28986: ARRAY
28987: PUSH
28988: LD_INT 1
28990: ARRAY
28991: PPUSH
28992: LD_EXP 62
28996: PUSH
28997: LD_VAR 0 2
29001: ARRAY
29002: PUSH
29003: LD_VAR 0 4
29007: ARRAY
29008: PUSH
29009: LD_INT 2
29011: ARRAY
29012: PPUSH
29013: LD_INT 15
29015: PPUSH
29016: CALL 53553 0 4
29020: PUSH
29021: LD_INT 4
29023: ARRAY
29024: PUSH
29025: LD_INT 0
29027: EQUAL
29028: AND
29029: PUSH
29030: LD_EXP 63
29034: PUSH
29035: LD_VAR 0 2
29039: ARRAY
29040: PUSH
29041: LD_VAR 0 3
29045: ARRAY
29046: PPUSH
29047: CALL_OW 314
29051: NOT
29052: AND
29053: IFFALSE 29229
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29055: LD_EXP 63
29059: PUSH
29060: LD_VAR 0 2
29064: ARRAY
29065: PUSH
29066: LD_VAR 0 3
29070: ARRAY
29071: PPUSH
29072: CALL_OW 310
29076: IFFALSE 29099
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
29078: LD_EXP 63
29082: PUSH
29083: LD_VAR 0 2
29087: ARRAY
29088: PUSH
29089: LD_VAR 0 3
29093: ARRAY
29094: PPUSH
29095: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
29099: LD_EXP 63
29103: PUSH
29104: LD_VAR 0 2
29108: ARRAY
29109: PUSH
29110: LD_VAR 0 3
29114: ARRAY
29115: PPUSH
29116: CALL_OW 314
29120: NOT
29121: IFFALSE 29189
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
29123: LD_EXP 63
29127: PUSH
29128: LD_VAR 0 2
29132: ARRAY
29133: PUSH
29134: LD_VAR 0 3
29138: ARRAY
29139: PPUSH
29140: LD_EXP 62
29144: PUSH
29145: LD_VAR 0 2
29149: ARRAY
29150: PUSH
29151: LD_VAR 0 4
29155: ARRAY
29156: PUSH
29157: LD_INT 1
29159: ARRAY
29160: PPUSH
29161: LD_EXP 62
29165: PUSH
29166: LD_VAR 0 2
29170: ARRAY
29171: PUSH
29172: LD_VAR 0 4
29176: ARRAY
29177: PUSH
29178: LD_INT 2
29180: ARRAY
29181: PPUSH
29182: LD_INT 0
29184: PPUSH
29185: CALL_OW 193
// k := k + 1 ;
29189: LD_ADDR_VAR 0 4
29193: PUSH
29194: LD_VAR 0 4
29198: PUSH
29199: LD_INT 1
29201: PLUS
29202: ST_TO_ADDR
// if k > mc_mines [ i ] then
29203: LD_VAR 0 4
29207: PUSH
29208: LD_EXP 62
29212: PUSH
29213: LD_VAR 0 2
29217: ARRAY
29218: GREATER
29219: IFFALSE 29229
// k := 1 ;
29221: LD_ADDR_VAR 0 4
29225: PUSH
29226: LD_INT 1
29228: ST_TO_ADDR
// end ; end ;
29229: GO 28634
29231: POP
29232: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
29233: LD_ADDR_VAR 0 5
29237: PUSH
29238: LD_EXP 49
29242: PUSH
29243: LD_VAR 0 2
29247: ARRAY
29248: PPUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 30
29254: PUSH
29255: LD_INT 4
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 30
29264: PUSH
29265: LD_INT 5
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 30
29274: PUSH
29275: LD_INT 32
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 72
29292: ST_TO_ADDR
// if not tmp then
29293: LD_VAR 0 5
29297: NOT
29298: IFFALSE 29302
// continue ;
29300: GO 28551
// list := [ ] ;
29302: LD_ADDR_VAR 0 6
29306: PUSH
29307: EMPTY
29308: ST_TO_ADDR
// for j in tmp do
29309: LD_ADDR_VAR 0 3
29313: PUSH
29314: LD_VAR 0 5
29318: PUSH
29319: FOR_IN
29320: IFFALSE 29389
// begin for k in UnitsInside ( j ) do
29322: LD_ADDR_VAR 0 4
29326: PUSH
29327: LD_VAR 0 3
29331: PPUSH
29332: CALL_OW 313
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29385
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
29340: LD_VAR 0 4
29344: PPUSH
29345: CALL_OW 257
29349: PUSH
29350: LD_INT 1
29352: EQUAL
29353: PUSH
29354: LD_VAR 0 4
29358: PPUSH
29359: CALL_OW 459
29363: NOT
29364: AND
29365: IFFALSE 29383
// list := list ^ k ;
29367: LD_ADDR_VAR 0 6
29371: PUSH
29372: LD_VAR 0 6
29376: PUSH
29377: LD_VAR 0 4
29381: ADD
29382: ST_TO_ADDR
29383: GO 29337
29385: POP
29386: POP
// end ;
29387: GO 29319
29389: POP
29390: POP
// list := list diff mc_miners [ i ] ;
29391: LD_ADDR_VAR 0 6
29395: PUSH
29396: LD_VAR 0 6
29400: PUSH
29401: LD_EXP 63
29405: PUSH
29406: LD_VAR 0 2
29410: ARRAY
29411: DIFF
29412: ST_TO_ADDR
// if not list then
29413: LD_VAR 0 6
29417: NOT
29418: IFFALSE 29422
// continue ;
29420: GO 28551
// k := mc_mines [ i ] - mc_miners [ i ] ;
29422: LD_ADDR_VAR 0 4
29426: PUSH
29427: LD_EXP 62
29431: PUSH
29432: LD_VAR 0 2
29436: ARRAY
29437: PUSH
29438: LD_EXP 63
29442: PUSH
29443: LD_VAR 0 2
29447: ARRAY
29448: MINUS
29449: ST_TO_ADDR
// if k > list then
29450: LD_VAR 0 4
29454: PUSH
29455: LD_VAR 0 6
29459: GREATER
29460: IFFALSE 29472
// k := list ;
29462: LD_ADDR_VAR 0 4
29466: PUSH
29467: LD_VAR 0 6
29471: ST_TO_ADDR
// for j = 1 to k do
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: DOUBLE
29478: LD_INT 1
29480: DEC
29481: ST_TO_ADDR
29482: LD_VAR 0 4
29486: PUSH
29487: FOR_TO
29488: IFFALSE 29542
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
29490: LD_ADDR_EXP 63
29494: PUSH
29495: LD_EXP 63
29499: PPUSH
29500: LD_VAR 0 2
29504: PUSH
29505: LD_EXP 63
29509: PUSH
29510: LD_VAR 0 2
29514: ARRAY
29515: PUSH
29516: LD_INT 1
29518: PLUS
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PPUSH
29524: LD_VAR 0 6
29528: PUSH
29529: LD_VAR 0 3
29533: ARRAY
29534: PPUSH
29535: CALL 52657 0 3
29539: ST_TO_ADDR
29540: GO 29487
29542: POP
29543: POP
// end ;
29544: GO 28551
29546: POP
29547: POP
// end ;
29548: LD_VAR 0 1
29552: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
// if not mc_bases then
29565: LD_EXP 49
29569: NOT
29570: IFFALSE 29574
// exit ;
29572: GO 31305
// for i = 1 to mc_bases do
29574: LD_ADDR_VAR 0 2
29578: PUSH
29579: DOUBLE
29580: LD_INT 1
29582: DEC
29583: ST_TO_ADDR
29584: LD_EXP 49
29588: PUSH
29589: FOR_TO
29590: IFFALSE 31303
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
29592: LD_EXP 49
29596: PUSH
29597: LD_VAR 0 2
29601: ARRAY
29602: NOT
29603: PUSH
29604: LD_EXP 56
29608: PUSH
29609: LD_VAR 0 2
29613: ARRAY
29614: OR
29615: IFFALSE 29619
// continue ;
29617: GO 29589
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
29619: LD_EXP 65
29623: PUSH
29624: LD_VAR 0 2
29628: ARRAY
29629: NOT
29630: PUSH
29631: LD_EXP 66
29635: PUSH
29636: LD_VAR 0 2
29640: ARRAY
29641: AND
29642: IFFALSE 29680
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
29644: LD_ADDR_EXP 66
29648: PUSH
29649: LD_EXP 66
29653: PPUSH
29654: LD_VAR 0 2
29658: PPUSH
29659: EMPTY
29660: PPUSH
29661: CALL_OW 1
29665: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
29666: LD_VAR 0 2
29670: PPUSH
29671: LD_INT 107
29673: PPUSH
29674: CALL 20769 0 2
// continue ;
29678: GO 29589
// end ; target := [ ] ;
29680: LD_ADDR_VAR 0 6
29684: PUSH
29685: EMPTY
29686: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
29687: LD_ADDR_VAR 0 3
29691: PUSH
29692: DOUBLE
29693: LD_EXP 65
29697: PUSH
29698: LD_VAR 0 2
29702: ARRAY
29703: INC
29704: ST_TO_ADDR
29705: LD_INT 1
29707: PUSH
29708: FOR_DOWNTO
29709: IFFALSE 29969
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
29711: LD_EXP 65
29715: PUSH
29716: LD_VAR 0 2
29720: ARRAY
29721: PUSH
29722: LD_VAR 0 3
29726: ARRAY
29727: PUSH
29728: LD_INT 2
29730: ARRAY
29731: PPUSH
29732: LD_EXP 65
29736: PUSH
29737: LD_VAR 0 2
29741: ARRAY
29742: PUSH
29743: LD_VAR 0 3
29747: ARRAY
29748: PUSH
29749: LD_INT 3
29751: ARRAY
29752: PPUSH
29753: CALL_OW 488
29757: PUSH
29758: LD_EXP 65
29762: PUSH
29763: LD_VAR 0 2
29767: ARRAY
29768: PUSH
29769: LD_VAR 0 3
29773: ARRAY
29774: PUSH
29775: LD_INT 2
29777: ARRAY
29778: PPUSH
29779: LD_EXP 65
29783: PUSH
29784: LD_VAR 0 2
29788: ARRAY
29789: PUSH
29790: LD_VAR 0 3
29794: ARRAY
29795: PUSH
29796: LD_INT 3
29798: ARRAY
29799: PPUSH
29800: CALL_OW 284
29804: PUSH
29805: LD_INT 0
29807: EQUAL
29808: AND
29809: IFFALSE 29864
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
29811: LD_ADDR_VAR 0 5
29815: PUSH
29816: LD_EXP 65
29820: PUSH
29821: LD_VAR 0 2
29825: ARRAY
29826: PPUSH
29827: LD_VAR 0 3
29831: PPUSH
29832: CALL_OW 3
29836: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
29837: LD_ADDR_EXP 65
29841: PUSH
29842: LD_EXP 65
29846: PPUSH
29847: LD_VAR 0 2
29851: PPUSH
29852: LD_VAR 0 5
29856: PPUSH
29857: CALL_OW 1
29861: ST_TO_ADDR
// continue ;
29862: GO 29708
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
29864: LD_EXP 49
29868: PUSH
29869: LD_VAR 0 2
29873: ARRAY
29874: PUSH
29875: LD_INT 1
29877: ARRAY
29878: PPUSH
29879: CALL_OW 255
29883: PPUSH
29884: LD_EXP 65
29888: PUSH
29889: LD_VAR 0 2
29893: ARRAY
29894: PUSH
29895: LD_VAR 0 3
29899: ARRAY
29900: PUSH
29901: LD_INT 2
29903: ARRAY
29904: PPUSH
29905: LD_EXP 65
29909: PUSH
29910: LD_VAR 0 2
29914: ARRAY
29915: PUSH
29916: LD_VAR 0 3
29920: ARRAY
29921: PUSH
29922: LD_INT 3
29924: ARRAY
29925: PPUSH
29926: LD_INT 30
29928: PPUSH
29929: CALL 53553 0 4
29933: PUSH
29934: LD_INT 4
29936: ARRAY
29937: PUSH
29938: LD_INT 0
29940: EQUAL
29941: IFFALSE 29967
// begin target := mc_crates [ i ] [ j ] ;
29943: LD_ADDR_VAR 0 6
29947: PUSH
29948: LD_EXP 65
29952: PUSH
29953: LD_VAR 0 2
29957: ARRAY
29958: PUSH
29959: LD_VAR 0 3
29963: ARRAY
29964: ST_TO_ADDR
// break ;
29965: GO 29969
// end ; end ;
29967: GO 29708
29969: POP
29970: POP
// if not target then
29971: LD_VAR 0 6
29975: NOT
29976: IFFALSE 29980
// continue ;
29978: GO 29589
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
29980: LD_ADDR_VAR 0 7
29984: PUSH
29985: LD_EXP 68
29989: PUSH
29990: LD_VAR 0 2
29994: ARRAY
29995: PPUSH
29996: LD_INT 2
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: LD_INT 58
30004: PUSH
30005: EMPTY
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 61
30014: PUSH
30015: EMPTY
30016: LIST
30017: PUSH
30018: LD_INT 33
30020: PUSH
30021: LD_INT 5
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 33
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 2
30047: PUSH
30048: LD_INT 34
30050: PUSH
30051: LD_INT 32
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 34
30060: PUSH
30061: LD_INT 51
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 34
30070: PUSH
30071: LD_INT 12
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 72
30092: ST_TO_ADDR
// if not cargo then
30093: LD_VAR 0 7
30097: NOT
30098: IFFALSE 30741
// begin if mc_crates_collector [ i ] < 5 then
30100: LD_EXP 66
30104: PUSH
30105: LD_VAR 0 2
30109: ARRAY
30110: PUSH
30111: LD_INT 5
30113: LESS
30114: IFFALSE 30480
// begin if mc_ape [ i ] then
30116: LD_EXP 78
30120: PUSH
30121: LD_VAR 0 2
30125: ARRAY
30126: IFFALSE 30173
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
30128: LD_ADDR_VAR 0 5
30132: PUSH
30133: LD_EXP 78
30137: PUSH
30138: LD_VAR 0 2
30142: ARRAY
30143: PPUSH
30144: LD_INT 25
30146: PUSH
30147: LD_INT 16
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 24
30156: PUSH
30157: LD_INT 750
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PPUSH
30168: CALL_OW 72
30172: ST_TO_ADDR
// if not tmp then
30173: LD_VAR 0 5
30177: NOT
30178: IFFALSE 30225
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
30180: LD_ADDR_VAR 0 5
30184: PUSH
30185: LD_EXP 49
30189: PUSH
30190: LD_VAR 0 2
30194: ARRAY
30195: PPUSH
30196: LD_INT 25
30198: PUSH
30199: LD_INT 2
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 24
30208: PUSH
30209: LD_INT 750
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 72
30224: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
30225: LD_EXP 78
30229: PUSH
30230: LD_VAR 0 2
30234: ARRAY
30235: PUSH
30236: LD_EXP 49
30240: PUSH
30241: LD_VAR 0 2
30245: ARRAY
30246: PPUSH
30247: LD_INT 25
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 24
30259: PUSH
30260: LD_INT 750
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PPUSH
30271: CALL_OW 72
30275: AND
30276: PUSH
30277: LD_VAR 0 5
30281: PUSH
30282: LD_INT 5
30284: LESS
30285: AND
30286: IFFALSE 30368
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: LD_EXP 49
30297: PUSH
30298: LD_VAR 0 2
30302: ARRAY
30303: PPUSH
30304: LD_INT 25
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 24
30316: PUSH
30317: LD_INT 750
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PPUSH
30328: CALL_OW 72
30332: PUSH
30333: FOR_IN
30334: IFFALSE 30366
// begin tmp := tmp union j ;
30336: LD_ADDR_VAR 0 5
30340: PUSH
30341: LD_VAR 0 5
30345: PUSH
30346: LD_VAR 0 3
30350: UNION
30351: ST_TO_ADDR
// if tmp >= 5 then
30352: LD_VAR 0 5
30356: PUSH
30357: LD_INT 5
30359: GREATEREQUAL
30360: IFFALSE 30364
// break ;
30362: GO 30366
// end ;
30364: GO 30333
30366: POP
30367: POP
// end ; if not tmp then
30368: LD_VAR 0 5
30372: NOT
30373: IFFALSE 30377
// continue ;
30375: GO 29589
// for j in tmp do
30377: LD_ADDR_VAR 0 3
30381: PUSH
30382: LD_VAR 0 5
30386: PUSH
30387: FOR_IN
30388: IFFALSE 30478
// if not GetTag ( j ) then
30390: LD_VAR 0 3
30394: PPUSH
30395: CALL_OW 110
30399: NOT
30400: IFFALSE 30476
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
30402: LD_ADDR_EXP 66
30406: PUSH
30407: LD_EXP 66
30411: PPUSH
30412: LD_VAR 0 2
30416: PUSH
30417: LD_EXP 66
30421: PUSH
30422: LD_VAR 0 2
30426: ARRAY
30427: PUSH
30428: LD_INT 1
30430: PLUS
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PPUSH
30436: LD_VAR 0 3
30440: PPUSH
30441: CALL 52657 0 3
30445: ST_TO_ADDR
// SetTag ( j , 107 ) ;
30446: LD_VAR 0 3
30450: PPUSH
30451: LD_INT 107
30453: PPUSH
30454: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
30458: LD_EXP 66
30462: PUSH
30463: LD_VAR 0 2
30467: ARRAY
30468: PUSH
30469: LD_INT 5
30471: GREATEREQUAL
30472: IFFALSE 30476
// break ;
30474: GO 30478
// end ;
30476: GO 30387
30478: POP
30479: POP
// end ; if mc_crates_collector [ i ] and target then
30480: LD_EXP 66
30484: PUSH
30485: LD_VAR 0 2
30489: ARRAY
30490: PUSH
30491: LD_VAR 0 6
30495: AND
30496: IFFALSE 30739
// begin if mc_crates_collector [ i ] < target [ 1 ] then
30498: LD_EXP 66
30502: PUSH
30503: LD_VAR 0 2
30507: ARRAY
30508: PUSH
30509: LD_VAR 0 6
30513: PUSH
30514: LD_INT 1
30516: ARRAY
30517: LESS
30518: IFFALSE 30538
// tmp := mc_crates_collector [ i ] else
30520: LD_ADDR_VAR 0 5
30524: PUSH
30525: LD_EXP 66
30529: PUSH
30530: LD_VAR 0 2
30534: ARRAY
30535: ST_TO_ADDR
30536: GO 30552
// tmp := target [ 1 ] ;
30538: LD_ADDR_VAR 0 5
30542: PUSH
30543: LD_VAR 0 6
30547: PUSH
30548: LD_INT 1
30550: ARRAY
30551: ST_TO_ADDR
// k := 0 ;
30552: LD_ADDR_VAR 0 4
30556: PUSH
30557: LD_INT 0
30559: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
30560: LD_ADDR_VAR 0 3
30564: PUSH
30565: LD_EXP 66
30569: PUSH
30570: LD_VAR 0 2
30574: ARRAY
30575: PUSH
30576: FOR_IN
30577: IFFALSE 30737
// begin k := k + 1 ;
30579: LD_ADDR_VAR 0 4
30583: PUSH
30584: LD_VAR 0 4
30588: PUSH
30589: LD_INT 1
30591: PLUS
30592: ST_TO_ADDR
// if k > tmp then
30593: LD_VAR 0 4
30597: PUSH
30598: LD_VAR 0 5
30602: GREATER
30603: IFFALSE 30607
// break ;
30605: GO 30737
// if not GetClass ( j ) in [ 2 , 16 ] then
30607: LD_VAR 0 3
30611: PPUSH
30612: CALL_OW 257
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 16
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: IN
30627: NOT
30628: IFFALSE 30681
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
30630: LD_ADDR_EXP 66
30634: PUSH
30635: LD_EXP 66
30639: PPUSH
30640: LD_VAR 0 2
30644: PPUSH
30645: LD_EXP 66
30649: PUSH
30650: LD_VAR 0 2
30654: ARRAY
30655: PUSH
30656: LD_VAR 0 3
30660: DIFF
30661: PPUSH
30662: CALL_OW 1
30666: ST_TO_ADDR
// SetTag ( j , 0 ) ;
30667: LD_VAR 0 3
30671: PPUSH
30672: LD_INT 0
30674: PPUSH
30675: CALL_OW 109
// continue ;
30679: GO 30576
// end ; if IsInUnit ( j ) then
30681: LD_VAR 0 3
30685: PPUSH
30686: CALL_OW 310
30690: IFFALSE 30701
// ComExitBuilding ( j ) ;
30692: LD_VAR 0 3
30696: PPUSH
30697: CALL_OW 122
// wait ( 3 ) ;
30701: LD_INT 3
30703: PPUSH
30704: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
30708: LD_VAR 0 3
30712: PPUSH
30713: LD_VAR 0 6
30717: PUSH
30718: LD_INT 2
30720: ARRAY
30721: PPUSH
30722: LD_VAR 0 6
30726: PUSH
30727: LD_INT 3
30729: ARRAY
30730: PPUSH
30731: CALL_OW 117
// end ;
30735: GO 30576
30737: POP
30738: POP
// end ; end else
30739: GO 31301
// begin for j in cargo do
30741: LD_ADDR_VAR 0 3
30745: PUSH
30746: LD_VAR 0 7
30750: PUSH
30751: FOR_IN
30752: IFFALSE 31299
// begin if GetTag ( j ) <> 0 then
30754: LD_VAR 0 3
30758: PPUSH
30759: CALL_OW 110
30763: PUSH
30764: LD_INT 0
30766: NONEQUAL
30767: IFFALSE 30771
// continue ;
30769: GO 30751
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
30771: LD_VAR 0 3
30775: PPUSH
30776: CALL_OW 256
30780: PUSH
30781: LD_INT 1000
30783: LESS
30784: PUSH
30785: LD_VAR 0 3
30789: PPUSH
30790: LD_EXP 73
30794: PUSH
30795: LD_VAR 0 2
30799: ARRAY
30800: PPUSH
30801: CALL_OW 308
30805: NOT
30806: AND
30807: IFFALSE 30829
// ComMoveToArea ( j , mc_parking [ i ] ) ;
30809: LD_VAR 0 3
30813: PPUSH
30814: LD_EXP 73
30818: PUSH
30819: LD_VAR 0 2
30823: ARRAY
30824: PPUSH
30825: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
30829: LD_VAR 0 3
30833: PPUSH
30834: CALL_OW 256
30838: PUSH
30839: LD_INT 1000
30841: LESS
30842: PUSH
30843: LD_VAR 0 3
30847: PPUSH
30848: LD_EXP 73
30852: PUSH
30853: LD_VAR 0 2
30857: ARRAY
30858: PPUSH
30859: CALL_OW 308
30863: AND
30864: IFFALSE 30868
// continue ;
30866: GO 30751
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
30868: LD_VAR 0 3
30872: PPUSH
30873: CALL_OW 262
30877: PUSH
30878: LD_INT 2
30880: EQUAL
30881: PUSH
30882: LD_VAR 0 3
30886: PPUSH
30887: CALL_OW 261
30891: PUSH
30892: LD_INT 15
30894: LESS
30895: AND
30896: IFFALSE 30900
// continue ;
30898: GO 30751
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
30900: LD_VAR 0 3
30904: PPUSH
30905: CALL_OW 262
30909: PUSH
30910: LD_INT 1
30912: EQUAL
30913: PUSH
30914: LD_VAR 0 3
30918: PPUSH
30919: CALL_OW 261
30923: PUSH
30924: LD_INT 10
30926: LESS
30927: AND
30928: IFFALSE 31238
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
30930: LD_ADDR_VAR 0 8
30934: PUSH
30935: LD_EXP 49
30939: PUSH
30940: LD_VAR 0 2
30944: ARRAY
30945: PPUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 30
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 30
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: PPUSH
30974: CALL_OW 72
30978: ST_TO_ADDR
// if not depot then
30979: LD_VAR 0 8
30983: NOT
30984: IFFALSE 30988
// continue ;
30986: GO 30751
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
30988: LD_VAR 0 3
30992: PPUSH
30993: LD_VAR 0 8
30997: PPUSH
30998: LD_VAR 0 3
31002: PPUSH
31003: CALL_OW 74
31007: PPUSH
31008: CALL_OW 296
31012: PUSH
31013: LD_INT 6
31015: LESS
31016: IFFALSE 31032
// SetFuel ( j , 100 ) else
31018: LD_VAR 0 3
31022: PPUSH
31023: LD_INT 100
31025: PPUSH
31026: CALL_OW 240
31030: GO 31238
// if GetFuel ( j ) = 0 then
31032: LD_VAR 0 3
31036: PPUSH
31037: CALL_OW 261
31041: PUSH
31042: LD_INT 0
31044: EQUAL
31045: IFFALSE 31238
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31047: LD_ADDR_EXP 68
31051: PUSH
31052: LD_EXP 68
31056: PPUSH
31057: LD_VAR 0 2
31061: PPUSH
31062: LD_EXP 68
31066: PUSH
31067: LD_VAR 0 2
31071: ARRAY
31072: PUSH
31073: LD_VAR 0 3
31077: DIFF
31078: PPUSH
31079: CALL_OW 1
31083: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
31084: LD_VAR 0 3
31088: PPUSH
31089: CALL_OW 263
31093: PUSH
31094: LD_INT 1
31096: EQUAL
31097: IFFALSE 31113
// ComExitVehicle ( IsInUnit ( j ) ) ;
31099: LD_VAR 0 3
31103: PPUSH
31104: CALL_OW 310
31108: PPUSH
31109: CALL_OW 121
// if GetControl ( j ) = control_remote then
31113: LD_VAR 0 3
31117: PPUSH
31118: CALL_OW 263
31122: PUSH
31123: LD_INT 2
31125: EQUAL
31126: IFFALSE 31137
// ComUnlink ( j ) ;
31128: LD_VAR 0 3
31132: PPUSH
31133: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
31137: LD_ADDR_VAR 0 9
31141: PUSH
31142: LD_VAR 0 2
31146: PPUSH
31147: LD_INT 3
31149: PPUSH
31150: CALL 40342 0 2
31154: ST_TO_ADDR
// if fac then
31155: LD_VAR 0 9
31159: IFFALSE 31236
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
31161: LD_ADDR_VAR 0 10
31165: PUSH
31166: LD_VAR 0 9
31170: PPUSH
31171: LD_VAR 0 3
31175: PPUSH
31176: CALL_OW 265
31180: PPUSH
31181: LD_VAR 0 3
31185: PPUSH
31186: CALL_OW 262
31190: PPUSH
31191: LD_VAR 0 3
31195: PPUSH
31196: CALL_OW 263
31200: PPUSH
31201: LD_VAR 0 3
31205: PPUSH
31206: CALL_OW 264
31210: PPUSH
31211: CALL 50257 0 5
31215: ST_TO_ADDR
// if components then
31216: LD_VAR 0 10
31220: IFFALSE 31236
// MC_InsertProduceList ( i , components ) ;
31222: LD_VAR 0 2
31226: PPUSH
31227: LD_VAR 0 10
31231: PPUSH
31232: CALL 39970 0 2
// end ; continue ;
31236: GO 30751
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
31238: LD_VAR 0 3
31242: PPUSH
31243: LD_INT 1
31245: PPUSH
31246: CALL_OW 289
31250: PUSH
31251: LD_INT 100
31253: LESS
31254: PUSH
31255: LD_VAR 0 3
31259: PPUSH
31260: CALL_OW 314
31264: NOT
31265: AND
31266: IFFALSE 31295
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31268: LD_VAR 0 3
31272: PPUSH
31273: LD_VAR 0 6
31277: PUSH
31278: LD_INT 2
31280: ARRAY
31281: PPUSH
31282: LD_VAR 0 6
31286: PUSH
31287: LD_INT 3
31289: ARRAY
31290: PPUSH
31291: CALL_OW 117
// break ;
31295: GO 31299
// end ;
31297: GO 30751
31299: POP
31300: POP
// end ; end ;
31301: GO 29589
31303: POP
31304: POP
// end ;
31305: LD_VAR 0 1
31309: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
// if not mc_bases then
31316: LD_EXP 49
31320: NOT
31321: IFFALSE 31325
// exit ;
31323: GO 31486
// for i = 1 to mc_bases do
31325: LD_ADDR_VAR 0 2
31329: PUSH
31330: DOUBLE
31331: LD_INT 1
31333: DEC
31334: ST_TO_ADDR
31335: LD_EXP 49
31339: PUSH
31340: FOR_TO
31341: IFFALSE 31484
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
31343: LD_ADDR_VAR 0 4
31347: PUSH
31348: LD_EXP 68
31352: PUSH
31353: LD_VAR 0 2
31357: ARRAY
31358: PUSH
31359: LD_EXP 71
31363: PUSH
31364: LD_VAR 0 2
31368: ARRAY
31369: UNION
31370: PPUSH
31371: LD_INT 33
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PPUSH
31381: CALL_OW 72
31385: ST_TO_ADDR
// if tmp then
31386: LD_VAR 0 4
31390: IFFALSE 31482
// for j in tmp do
31392: LD_ADDR_VAR 0 3
31396: PUSH
31397: LD_VAR 0 4
31401: PUSH
31402: FOR_IN
31403: IFFALSE 31480
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
31405: LD_VAR 0 3
31409: PPUSH
31410: CALL_OW 312
31414: NOT
31415: PUSH
31416: LD_VAR 0 3
31420: PPUSH
31421: CALL_OW 256
31425: PUSH
31426: LD_INT 250
31428: GREATEREQUAL
31429: AND
31430: IFFALSE 31443
// Connect ( j ) else
31432: LD_VAR 0 3
31436: PPUSH
31437: CALL 55590 0 1
31441: GO 31478
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
31443: LD_VAR 0 3
31447: PPUSH
31448: CALL_OW 256
31452: PUSH
31453: LD_INT 250
31455: LESS
31456: PUSH
31457: LD_VAR 0 3
31461: PPUSH
31462: CALL_OW 312
31466: AND
31467: IFFALSE 31478
// ComUnlink ( j ) ;
31469: LD_VAR 0 3
31473: PPUSH
31474: CALL_OW 136
31478: GO 31402
31480: POP
31481: POP
// end ;
31482: GO 31340
31484: POP
31485: POP
// end ;
31486: LD_VAR 0 1
31490: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
31491: LD_INT 0
31493: PPUSH
31494: PPUSH
31495: PPUSH
31496: PPUSH
31497: PPUSH
// if not mc_bases then
31498: LD_EXP 49
31502: NOT
31503: IFFALSE 31507
// exit ;
31505: GO 31967
// for i = 1 to mc_bases do
31507: LD_ADDR_VAR 0 2
31511: PUSH
31512: DOUBLE
31513: LD_INT 1
31515: DEC
31516: ST_TO_ADDR
31517: LD_EXP 49
31521: PUSH
31522: FOR_TO
31523: IFFALSE 31965
// begin if not mc_produce [ i ] then
31525: LD_EXP 70
31529: PUSH
31530: LD_VAR 0 2
31534: ARRAY
31535: NOT
31536: IFFALSE 31540
// continue ;
31538: GO 31522
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31540: LD_ADDR_VAR 0 5
31544: PUSH
31545: LD_EXP 49
31549: PUSH
31550: LD_VAR 0 2
31554: ARRAY
31555: PPUSH
31556: LD_INT 30
31558: PUSH
31559: LD_INT 3
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PPUSH
31566: CALL_OW 72
31570: ST_TO_ADDR
// if not fac then
31571: LD_VAR 0 5
31575: NOT
31576: IFFALSE 31580
// continue ;
31578: GO 31522
// for j in fac do
31580: LD_ADDR_VAR 0 3
31584: PUSH
31585: LD_VAR 0 5
31589: PUSH
31590: FOR_IN
31591: IFFALSE 31961
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
31593: LD_VAR 0 3
31597: PPUSH
31598: CALL_OW 461
31602: PUSH
31603: LD_INT 2
31605: NONEQUAL
31606: PUSH
31607: LD_VAR 0 3
31611: PPUSH
31612: LD_INT 15
31614: PPUSH
31615: CALL 55250 0 2
31619: PUSH
31620: LD_INT 4
31622: ARRAY
31623: OR
31624: PUSH
31625: LD_VAR 0 3
31629: PPUSH
31630: CALL_OW 313
31634: PUSH
31635: LD_INT 0
31637: EQUAL
31638: OR
31639: IFFALSE 31643
// continue ;
31641: GO 31590
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
31643: LD_VAR 0 3
31647: PPUSH
31648: LD_EXP 70
31652: PUSH
31653: LD_VAR 0 2
31657: ARRAY
31658: PUSH
31659: LD_INT 1
31661: ARRAY
31662: PUSH
31663: LD_INT 1
31665: ARRAY
31666: PPUSH
31667: LD_EXP 70
31671: PUSH
31672: LD_VAR 0 2
31676: ARRAY
31677: PUSH
31678: LD_INT 1
31680: ARRAY
31681: PUSH
31682: LD_INT 2
31684: ARRAY
31685: PPUSH
31686: LD_EXP 70
31690: PUSH
31691: LD_VAR 0 2
31695: ARRAY
31696: PUSH
31697: LD_INT 1
31699: ARRAY
31700: PUSH
31701: LD_INT 3
31703: ARRAY
31704: PPUSH
31705: LD_EXP 70
31709: PUSH
31710: LD_VAR 0 2
31714: ARRAY
31715: PUSH
31716: LD_INT 1
31718: ARRAY
31719: PUSH
31720: LD_INT 4
31722: ARRAY
31723: PPUSH
31724: CALL_OW 448
31728: PUSH
31729: LD_VAR 0 3
31733: PPUSH
31734: LD_EXP 70
31738: PUSH
31739: LD_VAR 0 2
31743: ARRAY
31744: PUSH
31745: LD_INT 1
31747: ARRAY
31748: PUSH
31749: LD_INT 1
31751: ARRAY
31752: PUSH
31753: LD_EXP 70
31757: PUSH
31758: LD_VAR 0 2
31762: ARRAY
31763: PUSH
31764: LD_INT 1
31766: ARRAY
31767: PUSH
31768: LD_INT 2
31770: ARRAY
31771: PUSH
31772: LD_EXP 70
31776: PUSH
31777: LD_VAR 0 2
31781: ARRAY
31782: PUSH
31783: LD_INT 1
31785: ARRAY
31786: PUSH
31787: LD_INT 3
31789: ARRAY
31790: PUSH
31791: LD_EXP 70
31795: PUSH
31796: LD_VAR 0 2
31800: ARRAY
31801: PUSH
31802: LD_INT 1
31804: ARRAY
31805: PUSH
31806: LD_INT 4
31808: ARRAY
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: PPUSH
31816: CALL 58921 0 2
31820: AND
31821: IFFALSE 31959
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
31823: LD_VAR 0 3
31827: PPUSH
31828: LD_EXP 70
31832: PUSH
31833: LD_VAR 0 2
31837: ARRAY
31838: PUSH
31839: LD_INT 1
31841: ARRAY
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PPUSH
31847: LD_EXP 70
31851: PUSH
31852: LD_VAR 0 2
31856: ARRAY
31857: PUSH
31858: LD_INT 1
31860: ARRAY
31861: PUSH
31862: LD_INT 2
31864: ARRAY
31865: PPUSH
31866: LD_EXP 70
31870: PUSH
31871: LD_VAR 0 2
31875: ARRAY
31876: PUSH
31877: LD_INT 1
31879: ARRAY
31880: PUSH
31881: LD_INT 3
31883: ARRAY
31884: PPUSH
31885: LD_EXP 70
31889: PUSH
31890: LD_VAR 0 2
31894: ARRAY
31895: PUSH
31896: LD_INT 1
31898: ARRAY
31899: PUSH
31900: LD_INT 4
31902: ARRAY
31903: PPUSH
31904: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
31908: LD_ADDR_VAR 0 4
31912: PUSH
31913: LD_EXP 70
31917: PUSH
31918: LD_VAR 0 2
31922: ARRAY
31923: PPUSH
31924: LD_INT 1
31926: PPUSH
31927: CALL_OW 3
31931: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
31932: LD_ADDR_EXP 70
31936: PUSH
31937: LD_EXP 70
31941: PPUSH
31942: LD_VAR 0 2
31946: PPUSH
31947: LD_VAR 0 4
31951: PPUSH
31952: CALL_OW 1
31956: ST_TO_ADDR
// break ;
31957: GO 31961
// end ; end ;
31959: GO 31590
31961: POP
31962: POP
// end ;
31963: GO 31522
31965: POP
31966: POP
// end ;
31967: LD_VAR 0 1
31971: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
31972: LD_INT 0
31974: PPUSH
31975: PPUSH
31976: PPUSH
// if not mc_bases then
31977: LD_EXP 49
31981: NOT
31982: IFFALSE 31986
// exit ;
31984: GO 32075
// for i = 1 to mc_bases do
31986: LD_ADDR_VAR 0 2
31990: PUSH
31991: DOUBLE
31992: LD_INT 1
31994: DEC
31995: ST_TO_ADDR
31996: LD_EXP 49
32000: PUSH
32001: FOR_TO
32002: IFFALSE 32073
// begin if mc_attack [ i ] then
32004: LD_EXP 69
32008: PUSH
32009: LD_VAR 0 2
32013: ARRAY
32014: IFFALSE 32071
// begin tmp := mc_attack [ i ] [ 1 ] ;
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_EXP 69
32025: PUSH
32026: LD_VAR 0 2
32030: ARRAY
32031: PUSH
32032: LD_INT 1
32034: ARRAY
32035: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32036: LD_ADDR_EXP 69
32040: PUSH
32041: LD_EXP 69
32045: PPUSH
32046: LD_VAR 0 2
32050: PPUSH
32051: EMPTY
32052: PPUSH
32053: CALL_OW 1
32057: ST_TO_ADDR
// Attack ( tmp ) ;
32058: LD_VAR 0 3
32062: PPUSH
32063: CALL 81110 0 1
// exit ;
32067: POP
32068: POP
32069: GO 32075
// end ; end ;
32071: GO 32001
32073: POP
32074: POP
// end ;
32075: LD_VAR 0 1
32079: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
32080: LD_INT 0
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
32088: PPUSH
// if not mc_bases then
32089: LD_EXP 49
32093: NOT
32094: IFFALSE 32098
// exit ;
32096: GO 32702
// for i = 1 to mc_bases do
32098: LD_ADDR_VAR 0 2
32102: PUSH
32103: DOUBLE
32104: LD_INT 1
32106: DEC
32107: ST_TO_ADDR
32108: LD_EXP 49
32112: PUSH
32113: FOR_TO
32114: IFFALSE 32700
// begin if not mc_bases [ i ] then
32116: LD_EXP 49
32120: PUSH
32121: LD_VAR 0 2
32125: ARRAY
32126: NOT
32127: IFFALSE 32131
// continue ;
32129: GO 32113
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
32131: LD_ADDR_VAR 0 7
32135: PUSH
32136: LD_EXP 49
32140: PUSH
32141: LD_VAR 0 2
32145: ARRAY
32146: PUSH
32147: LD_INT 1
32149: ARRAY
32150: PPUSH
32151: CALL 49561 0 1
32155: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
32156: LD_ADDR_EXP 72
32160: PUSH
32161: LD_EXP 72
32165: PPUSH
32166: LD_VAR 0 2
32170: PPUSH
32171: LD_EXP 49
32175: PUSH
32176: LD_VAR 0 2
32180: ARRAY
32181: PUSH
32182: LD_INT 1
32184: ARRAY
32185: PPUSH
32186: CALL_OW 255
32190: PPUSH
32191: LD_EXP 74
32195: PUSH
32196: LD_VAR 0 2
32200: ARRAY
32201: PPUSH
32202: CALL 47521 0 2
32206: PPUSH
32207: CALL_OW 1
32211: ST_TO_ADDR
// if not mc_scan [ i ] then
32212: LD_EXP 72
32216: PUSH
32217: LD_VAR 0 2
32221: ARRAY
32222: NOT
32223: IFFALSE 32378
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32225: LD_ADDR_VAR 0 4
32229: PUSH
32230: LD_EXP 49
32234: PUSH
32235: LD_VAR 0 2
32239: ARRAY
32240: PPUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 25
32246: PUSH
32247: LD_INT 5
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 25
32256: PUSH
32257: LD_INT 8
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 25
32266: PUSH
32267: LD_INT 9
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: PPUSH
32280: CALL_OW 72
32284: ST_TO_ADDR
// if not tmp then
32285: LD_VAR 0 4
32289: NOT
32290: IFFALSE 32294
// continue ;
32292: GO 32113
// for j in tmp do
32294: LD_ADDR_VAR 0 3
32298: PUSH
32299: LD_VAR 0 4
32303: PUSH
32304: FOR_IN
32305: IFFALSE 32376
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
32307: LD_VAR 0 3
32311: PPUSH
32312: CALL_OW 310
32316: PPUSH
32317: CALL_OW 266
32321: PUSH
32322: LD_INT 5
32324: EQUAL
32325: PUSH
32326: LD_VAR 0 3
32330: PPUSH
32331: CALL_OW 257
32335: PUSH
32336: LD_INT 1
32338: EQUAL
32339: AND
32340: PUSH
32341: LD_VAR 0 3
32345: PPUSH
32346: CALL_OW 459
32350: NOT
32351: AND
32352: PUSH
32353: LD_VAR 0 7
32357: AND
32358: IFFALSE 32374
// ComChangeProfession ( j , class ) ;
32360: LD_VAR 0 3
32364: PPUSH
32365: LD_VAR 0 7
32369: PPUSH
32370: CALL_OW 123
32374: GO 32304
32376: POP
32377: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
32378: LD_EXP 72
32382: PUSH
32383: LD_VAR 0 2
32387: ARRAY
32388: PUSH
32389: LD_EXP 71
32393: PUSH
32394: LD_VAR 0 2
32398: ARRAY
32399: NOT
32400: AND
32401: PUSH
32402: LD_EXP 49
32406: PUSH
32407: LD_VAR 0 2
32411: ARRAY
32412: PPUSH
32413: LD_INT 30
32415: PUSH
32416: LD_INT 32
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PPUSH
32423: CALL_OW 72
32427: NOT
32428: AND
32429: PUSH
32430: LD_EXP 49
32434: PUSH
32435: LD_VAR 0 2
32439: ARRAY
32440: PPUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 30
32446: PUSH
32447: LD_INT 4
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 30
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: PPUSH
32469: CALL_OW 72
32473: NOT
32474: AND
32475: IFFALSE 32607
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32477: LD_ADDR_VAR 0 4
32481: PUSH
32482: LD_EXP 49
32486: PUSH
32487: LD_VAR 0 2
32491: ARRAY
32492: PPUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 25
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 25
32508: PUSH
32509: LD_INT 5
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 25
32518: PUSH
32519: LD_INT 8
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 25
32528: PUSH
32529: LD_INT 9
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: PPUSH
32543: CALL_OW 72
32547: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
32548: LD_ADDR_VAR 0 4
32552: PUSH
32553: LD_VAR 0 4
32557: PUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: LD_INT 18
32565: PPUSH
32566: CALL 85893 0 2
32570: DIFF
32571: ST_TO_ADDR
// if tmp then
32572: LD_VAR 0 4
32576: IFFALSE 32607
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
32578: LD_VAR 0 2
32582: PPUSH
32583: LD_VAR 0 4
32587: PPUSH
32588: LD_EXP 74
32592: PUSH
32593: LD_VAR 0 2
32597: ARRAY
32598: PPUSH
32599: CALL 47556 0 3
// exit ;
32603: POP
32604: POP
32605: GO 32702
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
32607: LD_EXP 72
32611: PUSH
32612: LD_VAR 0 2
32616: ARRAY
32617: PUSH
32618: LD_EXP 71
32622: PUSH
32623: LD_VAR 0 2
32627: ARRAY
32628: AND
32629: IFFALSE 32698
// begin tmp := mc_defender [ i ] ;
32631: LD_ADDR_VAR 0 4
32635: PUSH
32636: LD_EXP 71
32640: PUSH
32641: LD_VAR 0 2
32645: ARRAY
32646: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
32647: LD_ADDR_EXP 71
32651: PUSH
32652: LD_EXP 71
32656: PPUSH
32657: LD_VAR 0 2
32661: PPUSH
32662: EMPTY
32663: PPUSH
32664: CALL_OW 1
32668: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
32669: LD_VAR 0 2
32673: PPUSH
32674: LD_VAR 0 4
32678: PPUSH
32679: LD_EXP 72
32683: PUSH
32684: LD_VAR 0 2
32688: ARRAY
32689: PPUSH
32690: CALL 48054 0 3
// exit ;
32694: POP
32695: POP
32696: GO 32702
// end ; end ;
32698: GO 32113
32700: POP
32701: POP
// end ;
32702: LD_VAR 0 1
32706: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
32707: LD_INT 0
32709: PPUSH
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
// if not mc_bases then
32720: LD_EXP 49
32724: NOT
32725: IFFALSE 32729
// exit ;
32727: GO 33816
// for i = 1 to mc_bases do
32729: LD_ADDR_VAR 0 2
32733: PUSH
32734: DOUBLE
32735: LD_INT 1
32737: DEC
32738: ST_TO_ADDR
32739: LD_EXP 49
32743: PUSH
32744: FOR_TO
32745: IFFALSE 33814
// begin tmp := mc_lab [ i ] ;
32747: LD_ADDR_VAR 0 6
32751: PUSH
32752: LD_EXP 82
32756: PUSH
32757: LD_VAR 0 2
32761: ARRAY
32762: ST_TO_ADDR
// if not tmp then
32763: LD_VAR 0 6
32767: NOT
32768: IFFALSE 32772
// continue ;
32770: GO 32744
// idle_lab := 0 ;
32772: LD_ADDR_VAR 0 11
32776: PUSH
32777: LD_INT 0
32779: ST_TO_ADDR
// for j in tmp do
32780: LD_ADDR_VAR 0 3
32784: PUSH
32785: LD_VAR 0 6
32789: PUSH
32790: FOR_IN
32791: IFFALSE 33810
// begin researching := false ;
32793: LD_ADDR_VAR 0 10
32797: PUSH
32798: LD_INT 0
32800: ST_TO_ADDR
// side := GetSide ( j ) ;
32801: LD_ADDR_VAR 0 4
32805: PUSH
32806: LD_VAR 0 3
32810: PPUSH
32811: CALL_OW 255
32815: ST_TO_ADDR
// if not mc_tech [ side ] then
32816: LD_EXP 76
32820: PUSH
32821: LD_VAR 0 4
32825: ARRAY
32826: NOT
32827: IFFALSE 32831
// continue ;
32829: GO 32790
// if BuildingStatus ( j ) = bs_idle then
32831: LD_VAR 0 3
32835: PPUSH
32836: CALL_OW 461
32840: PUSH
32841: LD_INT 2
32843: EQUAL
32844: IFFALSE 33032
// begin if idle_lab and UnitsInside ( j ) < 6 then
32846: LD_VAR 0 11
32850: PUSH
32851: LD_VAR 0 3
32855: PPUSH
32856: CALL_OW 313
32860: PUSH
32861: LD_INT 6
32863: LESS
32864: AND
32865: IFFALSE 32936
// begin tmp2 := UnitsInside ( idle_lab ) ;
32867: LD_ADDR_VAR 0 9
32871: PUSH
32872: LD_VAR 0 11
32876: PPUSH
32877: CALL_OW 313
32881: ST_TO_ADDR
// if tmp2 then
32882: LD_VAR 0 9
32886: IFFALSE 32928
// for x in tmp2 do
32888: LD_ADDR_VAR 0 7
32892: PUSH
32893: LD_VAR 0 9
32897: PUSH
32898: FOR_IN
32899: IFFALSE 32926
// begin ComExitBuilding ( x ) ;
32901: LD_VAR 0 7
32905: PPUSH
32906: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
32910: LD_VAR 0 7
32914: PPUSH
32915: LD_VAR 0 3
32919: PPUSH
32920: CALL_OW 180
// end ;
32924: GO 32898
32926: POP
32927: POP
// idle_lab := 0 ;
32928: LD_ADDR_VAR 0 11
32932: PUSH
32933: LD_INT 0
32935: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
32936: LD_ADDR_VAR 0 5
32940: PUSH
32941: LD_EXP 76
32945: PUSH
32946: LD_VAR 0 4
32950: ARRAY
32951: PUSH
32952: FOR_IN
32953: IFFALSE 33013
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
32955: LD_VAR 0 3
32959: PPUSH
32960: LD_VAR 0 5
32964: PPUSH
32965: CALL_OW 430
32969: PUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: LD_VAR 0 5
32979: PPUSH
32980: CALL 46626 0 2
32984: AND
32985: IFFALSE 33011
// begin researching := true ;
32987: LD_ADDR_VAR 0 10
32991: PUSH
32992: LD_INT 1
32994: ST_TO_ADDR
// ComResearch ( j , t ) ;
32995: LD_VAR 0 3
32999: PPUSH
33000: LD_VAR 0 5
33004: PPUSH
33005: CALL_OW 124
// break ;
33009: GO 33013
// end ;
33011: GO 32952
33013: POP
33014: POP
// if not researching then
33015: LD_VAR 0 10
33019: NOT
33020: IFFALSE 33032
// idle_lab := j ;
33022: LD_ADDR_VAR 0 11
33026: PUSH
33027: LD_VAR 0 3
33031: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33032: LD_VAR 0 3
33036: PPUSH
33037: CALL_OW 461
33041: PUSH
33042: LD_INT 10
33044: EQUAL
33045: IFFALSE 33633
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33047: LD_EXP 78
33051: PUSH
33052: LD_VAR 0 2
33056: ARRAY
33057: NOT
33058: PUSH
33059: LD_EXP 79
33063: PUSH
33064: LD_VAR 0 2
33068: ARRAY
33069: NOT
33070: AND
33071: PUSH
33072: LD_EXP 76
33076: PUSH
33077: LD_VAR 0 4
33081: ARRAY
33082: PUSH
33083: LD_INT 1
33085: GREATER
33086: AND
33087: IFFALSE 33218
// begin ComCancel ( j ) ;
33089: LD_VAR 0 3
33093: PPUSH
33094: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
33098: LD_ADDR_EXP 76
33102: PUSH
33103: LD_EXP 76
33107: PPUSH
33108: LD_VAR 0 4
33112: PPUSH
33113: LD_EXP 76
33117: PUSH
33118: LD_VAR 0 4
33122: ARRAY
33123: PPUSH
33124: LD_EXP 76
33128: PUSH
33129: LD_VAR 0 4
33133: ARRAY
33134: PUSH
33135: LD_INT 1
33137: MINUS
33138: PPUSH
33139: LD_EXP 76
33143: PUSH
33144: LD_VAR 0 4
33148: ARRAY
33149: PPUSH
33150: LD_INT 0
33152: PPUSH
33153: CALL 52075 0 4
33157: PPUSH
33158: CALL_OW 1
33162: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
33163: LD_ADDR_EXP 76
33167: PUSH
33168: LD_EXP 76
33172: PPUSH
33173: LD_VAR 0 4
33177: PPUSH
33178: LD_EXP 76
33182: PUSH
33183: LD_VAR 0 4
33187: ARRAY
33188: PPUSH
33189: LD_EXP 76
33193: PUSH
33194: LD_VAR 0 4
33198: ARRAY
33199: PPUSH
33200: LD_INT 1
33202: PPUSH
33203: LD_INT 0
33205: PPUSH
33206: CALL 52075 0 4
33210: PPUSH
33211: CALL_OW 1
33215: ST_TO_ADDR
// continue ;
33216: GO 32790
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
33218: LD_EXP 78
33222: PUSH
33223: LD_VAR 0 2
33227: ARRAY
33228: PUSH
33229: LD_EXP 79
33233: PUSH
33234: LD_VAR 0 2
33238: ARRAY
33239: NOT
33240: AND
33241: IFFALSE 33368
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
33243: LD_ADDR_EXP 79
33247: PUSH
33248: LD_EXP 79
33252: PPUSH
33253: LD_VAR 0 2
33257: PUSH
33258: LD_EXP 79
33262: PUSH
33263: LD_VAR 0 2
33267: ARRAY
33268: PUSH
33269: LD_INT 1
33271: PLUS
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PPUSH
33277: LD_EXP 78
33281: PUSH
33282: LD_VAR 0 2
33286: ARRAY
33287: PUSH
33288: LD_INT 1
33290: ARRAY
33291: PPUSH
33292: CALL 52657 0 3
33296: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
33297: LD_EXP 78
33301: PUSH
33302: LD_VAR 0 2
33306: ARRAY
33307: PUSH
33308: LD_INT 1
33310: ARRAY
33311: PPUSH
33312: LD_INT 112
33314: PPUSH
33315: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
33319: LD_ADDR_VAR 0 9
33323: PUSH
33324: LD_EXP 78
33328: PUSH
33329: LD_VAR 0 2
33333: ARRAY
33334: PPUSH
33335: LD_INT 1
33337: PPUSH
33338: CALL_OW 3
33342: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
33343: LD_ADDR_EXP 78
33347: PUSH
33348: LD_EXP 78
33352: PPUSH
33353: LD_VAR 0 2
33357: PPUSH
33358: LD_VAR 0 9
33362: PPUSH
33363: CALL_OW 1
33367: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
33368: LD_EXP 78
33372: PUSH
33373: LD_VAR 0 2
33377: ARRAY
33378: PUSH
33379: LD_EXP 79
33383: PUSH
33384: LD_VAR 0 2
33388: ARRAY
33389: AND
33390: PUSH
33391: LD_EXP 79
33395: PUSH
33396: LD_VAR 0 2
33400: ARRAY
33401: PUSH
33402: LD_INT 1
33404: ARRAY
33405: PPUSH
33406: CALL_OW 310
33410: NOT
33411: AND
33412: PUSH
33413: LD_VAR 0 3
33417: PPUSH
33418: CALL_OW 313
33422: PUSH
33423: LD_INT 6
33425: EQUAL
33426: AND
33427: IFFALSE 33483
// begin tmp2 := UnitsInside ( j ) ;
33429: LD_ADDR_VAR 0 9
33433: PUSH
33434: LD_VAR 0 3
33438: PPUSH
33439: CALL_OW 313
33443: ST_TO_ADDR
// if tmp2 = 6 then
33444: LD_VAR 0 9
33448: PUSH
33449: LD_INT 6
33451: EQUAL
33452: IFFALSE 33483
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
33454: LD_VAR 0 9
33458: PUSH
33459: LD_INT 1
33461: ARRAY
33462: PPUSH
33463: LD_INT 112
33465: PPUSH
33466: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
33470: LD_VAR 0 9
33474: PUSH
33475: LD_INT 1
33477: ARRAY
33478: PPUSH
33479: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
33483: LD_EXP 79
33487: PUSH
33488: LD_VAR 0 2
33492: ARRAY
33493: PUSH
33494: LD_EXP 79
33498: PUSH
33499: LD_VAR 0 2
33503: ARRAY
33504: PUSH
33505: LD_INT 1
33507: ARRAY
33508: PPUSH
33509: CALL_OW 314
33513: NOT
33514: AND
33515: PUSH
33516: LD_EXP 79
33520: PUSH
33521: LD_VAR 0 2
33525: ARRAY
33526: PUSH
33527: LD_INT 1
33529: ARRAY
33530: PPUSH
33531: CALL_OW 310
33535: NOT
33536: AND
33537: IFFALSE 33563
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
33539: LD_EXP 79
33543: PUSH
33544: LD_VAR 0 2
33548: ARRAY
33549: PUSH
33550: LD_INT 1
33552: ARRAY
33553: PPUSH
33554: LD_VAR 0 3
33558: PPUSH
33559: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
33563: LD_EXP 79
33567: PUSH
33568: LD_VAR 0 2
33572: ARRAY
33573: PUSH
33574: LD_INT 1
33576: ARRAY
33577: PPUSH
33578: CALL_OW 310
33582: PUSH
33583: LD_EXP 79
33587: PUSH
33588: LD_VAR 0 2
33592: ARRAY
33593: PUSH
33594: LD_INT 1
33596: ARRAY
33597: PPUSH
33598: CALL_OW 310
33602: PPUSH
33603: CALL_OW 461
33607: PUSH
33608: LD_INT 3
33610: NONEQUAL
33611: AND
33612: IFFALSE 33633
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
33614: LD_EXP 79
33618: PUSH
33619: LD_VAR 0 2
33623: ARRAY
33624: PUSH
33625: LD_INT 1
33627: ARRAY
33628: PPUSH
33629: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
33633: LD_VAR 0 3
33637: PPUSH
33638: CALL_OW 461
33642: PUSH
33643: LD_INT 6
33645: EQUAL
33646: PUSH
33647: LD_VAR 0 6
33651: PUSH
33652: LD_INT 1
33654: GREATER
33655: AND
33656: IFFALSE 33808
// begin sci := [ ] ;
33658: LD_ADDR_VAR 0 8
33662: PUSH
33663: EMPTY
33664: ST_TO_ADDR
// for x in ( tmp diff j ) do
33665: LD_ADDR_VAR 0 7
33669: PUSH
33670: LD_VAR 0 6
33674: PUSH
33675: LD_VAR 0 3
33679: DIFF
33680: PUSH
33681: FOR_IN
33682: IFFALSE 33734
// begin if sci = 6 then
33684: LD_VAR 0 8
33688: PUSH
33689: LD_INT 6
33691: EQUAL
33692: IFFALSE 33696
// break ;
33694: GO 33734
// if BuildingStatus ( x ) = bs_idle then
33696: LD_VAR 0 7
33700: PPUSH
33701: CALL_OW 461
33705: PUSH
33706: LD_INT 2
33708: EQUAL
33709: IFFALSE 33732
// sci := sci ^ UnitsInside ( x ) ;
33711: LD_ADDR_VAR 0 8
33715: PUSH
33716: LD_VAR 0 8
33720: PUSH
33721: LD_VAR 0 7
33725: PPUSH
33726: CALL_OW 313
33730: ADD
33731: ST_TO_ADDR
// end ;
33732: GO 33681
33734: POP
33735: POP
// if not sci then
33736: LD_VAR 0 8
33740: NOT
33741: IFFALSE 33745
// continue ;
33743: GO 32790
// for x in sci do
33745: LD_ADDR_VAR 0 7
33749: PUSH
33750: LD_VAR 0 8
33754: PUSH
33755: FOR_IN
33756: IFFALSE 33806
// if IsInUnit ( x ) and not HasTask ( x ) then
33758: LD_VAR 0 7
33762: PPUSH
33763: CALL_OW 310
33767: PUSH
33768: LD_VAR 0 7
33772: PPUSH
33773: CALL_OW 314
33777: NOT
33778: AND
33779: IFFALSE 33804
// begin ComExitBuilding ( x ) ;
33781: LD_VAR 0 7
33785: PPUSH
33786: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33790: LD_VAR 0 7
33794: PPUSH
33795: LD_VAR 0 3
33799: PPUSH
33800: CALL_OW 180
// end ;
33804: GO 33755
33806: POP
33807: POP
// end ; end ;
33808: GO 32790
33810: POP
33811: POP
// end ;
33812: GO 32744
33814: POP
33815: POP
// end ;
33816: LD_VAR 0 1
33820: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
// if not mc_bases then
33825: LD_EXP 49
33829: NOT
33830: IFFALSE 33834
// exit ;
33832: GO 33915
// for i = 1 to mc_bases do
33834: LD_ADDR_VAR 0 2
33838: PUSH
33839: DOUBLE
33840: LD_INT 1
33842: DEC
33843: ST_TO_ADDR
33844: LD_EXP 49
33848: PUSH
33849: FOR_TO
33850: IFFALSE 33913
// if mc_mines [ i ] and mc_miners [ i ] then
33852: LD_EXP 62
33856: PUSH
33857: LD_VAR 0 2
33861: ARRAY
33862: PUSH
33863: LD_EXP 63
33867: PUSH
33868: LD_VAR 0 2
33872: ARRAY
33873: AND
33874: IFFALSE 33911
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
33876: LD_EXP 63
33880: PUSH
33881: LD_VAR 0 2
33885: ARRAY
33886: PUSH
33887: LD_INT 1
33889: ARRAY
33890: PPUSH
33891: CALL_OW 255
33895: PPUSH
33896: LD_EXP 62
33900: PUSH
33901: LD_VAR 0 2
33905: ARRAY
33906: PPUSH
33907: CALL 49714 0 2
33911: GO 33849
33913: POP
33914: POP
// end ;
33915: LD_VAR 0 1
33919: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
33920: LD_INT 0
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
// if not mc_bases or not mc_parking then
33930: LD_EXP 49
33934: NOT
33935: PUSH
33936: LD_EXP 73
33940: NOT
33941: OR
33942: IFFALSE 33946
// exit ;
33944: GO 34658
// for i = 1 to mc_bases do
33946: LD_ADDR_VAR 0 2
33950: PUSH
33951: DOUBLE
33952: LD_INT 1
33954: DEC
33955: ST_TO_ADDR
33956: LD_EXP 49
33960: PUSH
33961: FOR_TO
33962: IFFALSE 34656
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
33964: LD_EXP 49
33968: PUSH
33969: LD_VAR 0 2
33973: ARRAY
33974: NOT
33975: PUSH
33976: LD_EXP 73
33980: PUSH
33981: LD_VAR 0 2
33985: ARRAY
33986: NOT
33987: OR
33988: IFFALSE 33992
// continue ;
33990: GO 33961
// if mc_scan [ i ] then
33992: LD_EXP 72
33996: PUSH
33997: LD_VAR 0 2
34001: ARRAY
34002: IFFALSE 34028
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
34004: LD_ADDR_EXP 61
34008: PUSH
34009: LD_EXP 61
34013: PPUSH
34014: LD_VAR 0 2
34018: PPUSH
34019: EMPTY
34020: PPUSH
34021: CALL_OW 1
34025: ST_TO_ADDR
// continue ;
34026: GO 33961
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34028: LD_ADDR_VAR 0 5
34032: PUSH
34033: LD_EXP 49
34037: PUSH
34038: LD_VAR 0 2
34042: ARRAY
34043: PUSH
34044: LD_INT 1
34046: ARRAY
34047: PPUSH
34048: CALL_OW 255
34052: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34053: LD_ADDR_VAR 0 6
34057: PUSH
34058: LD_EXP 49
34062: PUSH
34063: LD_VAR 0 2
34067: ARRAY
34068: PPUSH
34069: LD_INT 30
34071: PUSH
34072: LD_INT 3
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PPUSH
34079: CALL_OW 72
34083: ST_TO_ADDR
// if not fac then
34084: LD_VAR 0 6
34088: NOT
34089: IFFALSE 34140
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34091: LD_ADDR_VAR 0 6
34095: PUSH
34096: LD_EXP 49
34100: PUSH
34101: LD_VAR 0 2
34105: ARRAY
34106: PPUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 30
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 30
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: PPUSH
34135: CALL_OW 72
34139: ST_TO_ADDR
// if not fac then
34140: LD_VAR 0 6
34144: NOT
34145: IFFALSE 34149
// continue ;
34147: GO 33961
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34149: LD_ADDR_VAR 0 7
34153: PUSH
34154: LD_EXP 73
34158: PUSH
34159: LD_VAR 0 2
34163: ARRAY
34164: PPUSH
34165: LD_INT 22
34167: PUSH
34168: LD_VAR 0 5
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 21
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 3
34189: PUSH
34190: LD_INT 24
34192: PUSH
34193: LD_INT 1000
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: PPUSH
34209: CALL_OW 70
34213: PUSH
34214: LD_INT 22
34216: PUSH
34217: LD_VAR 0 5
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 91
34228: PUSH
34229: LD_VAR 0 6
34233: PUSH
34234: LD_INT 1
34236: ARRAY
34237: PUSH
34238: LD_INT 25
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 21
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 24
34261: PUSH
34262: LD_INT 1000
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: PPUSH
34279: CALL_OW 69
34283: UNION
34284: ST_TO_ADDR
// if not vehs then
34285: LD_VAR 0 7
34289: NOT
34290: IFFALSE 34316
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
34292: LD_ADDR_EXP 61
34296: PUSH
34297: LD_EXP 61
34301: PPUSH
34302: LD_VAR 0 2
34306: PPUSH
34307: EMPTY
34308: PPUSH
34309: CALL_OW 1
34313: ST_TO_ADDR
// continue ;
34314: GO 33961
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34316: LD_ADDR_VAR 0 8
34320: PUSH
34321: LD_EXP 49
34325: PUSH
34326: LD_VAR 0 2
34330: ARRAY
34331: PPUSH
34332: LD_INT 30
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PPUSH
34342: CALL_OW 72
34346: ST_TO_ADDR
// if tmp then
34347: LD_VAR 0 8
34351: IFFALSE 34454
// begin for j in tmp do
34353: LD_ADDR_VAR 0 3
34357: PUSH
34358: LD_VAR 0 8
34362: PUSH
34363: FOR_IN
34364: IFFALSE 34452
// for k in UnitsInside ( j ) do
34366: LD_ADDR_VAR 0 4
34370: PUSH
34371: LD_VAR 0 3
34375: PPUSH
34376: CALL_OW 313
34380: PUSH
34381: FOR_IN
34382: IFFALSE 34448
// if k then
34384: LD_VAR 0 4
34388: IFFALSE 34446
// if not k in mc_repair_vehicle [ i ] then
34390: LD_VAR 0 4
34394: PUSH
34395: LD_EXP 61
34399: PUSH
34400: LD_VAR 0 2
34404: ARRAY
34405: IN
34406: NOT
34407: IFFALSE 34446
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
34409: LD_ADDR_EXP 61
34413: PUSH
34414: LD_EXP 61
34418: PPUSH
34419: LD_VAR 0 2
34423: PPUSH
34424: LD_EXP 61
34428: PUSH
34429: LD_VAR 0 2
34433: ARRAY
34434: PUSH
34435: LD_VAR 0 4
34439: UNION
34440: PPUSH
34441: CALL_OW 1
34445: ST_TO_ADDR
34446: GO 34381
34448: POP
34449: POP
34450: GO 34363
34452: POP
34453: POP
// end ; if not mc_repair_vehicle [ i ] then
34454: LD_EXP 61
34458: PUSH
34459: LD_VAR 0 2
34463: ARRAY
34464: NOT
34465: IFFALSE 34469
// continue ;
34467: GO 33961
// for j in mc_repair_vehicle [ i ] do
34469: LD_ADDR_VAR 0 3
34473: PUSH
34474: LD_EXP 61
34478: PUSH
34479: LD_VAR 0 2
34483: ARRAY
34484: PUSH
34485: FOR_IN
34486: IFFALSE 34652
// begin if GetClass ( j ) <> 3 then
34488: LD_VAR 0 3
34492: PPUSH
34493: CALL_OW 257
34497: PUSH
34498: LD_INT 3
34500: NONEQUAL
34501: IFFALSE 34542
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
34503: LD_ADDR_EXP 61
34507: PUSH
34508: LD_EXP 61
34512: PPUSH
34513: LD_VAR 0 2
34517: PPUSH
34518: LD_EXP 61
34522: PUSH
34523: LD_VAR 0 2
34527: ARRAY
34528: PUSH
34529: LD_VAR 0 3
34533: DIFF
34534: PPUSH
34535: CALL_OW 1
34539: ST_TO_ADDR
// continue ;
34540: GO 34485
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34542: LD_VAR 0 3
34546: PPUSH
34547: CALL_OW 311
34551: NOT
34552: PUSH
34553: LD_VAR 0 3
34557: PUSH
34558: LD_EXP 52
34562: PUSH
34563: LD_VAR 0 2
34567: ARRAY
34568: PUSH
34569: LD_INT 1
34571: ARRAY
34572: IN
34573: NOT
34574: AND
34575: PUSH
34576: LD_VAR 0 3
34580: PUSH
34581: LD_EXP 52
34585: PUSH
34586: LD_VAR 0 2
34590: ARRAY
34591: PUSH
34592: LD_INT 2
34594: ARRAY
34595: IN
34596: NOT
34597: AND
34598: IFFALSE 34650
// begin if IsInUnit ( j ) then
34600: LD_VAR 0 3
34604: PPUSH
34605: CALL_OW 310
34609: IFFALSE 34620
// ComExitBuilding ( j ) ;
34611: LD_VAR 0 3
34615: PPUSH
34616: CALL_OW 122
// if not HasTask ( j ) then
34620: LD_VAR 0 3
34624: PPUSH
34625: CALL_OW 314
34629: NOT
34630: IFFALSE 34650
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
34632: LD_VAR 0 3
34636: PPUSH
34637: LD_VAR 0 7
34641: PUSH
34642: LD_INT 1
34644: ARRAY
34645: PPUSH
34646: CALL_OW 189
// end ; end ;
34650: GO 34485
34652: POP
34653: POP
// end ;
34654: GO 33961
34656: POP
34657: POP
// end ;
34658: LD_VAR 0 1
34662: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
34663: LD_INT 0
34665: PPUSH
34666: PPUSH
34667: PPUSH
34668: PPUSH
34669: PPUSH
34670: PPUSH
34671: PPUSH
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
// if not mc_bases then
34676: LD_EXP 49
34680: NOT
34681: IFFALSE 34685
// exit ;
34683: GO 35487
// for i = 1 to mc_bases do
34685: LD_ADDR_VAR 0 2
34689: PUSH
34690: DOUBLE
34691: LD_INT 1
34693: DEC
34694: ST_TO_ADDR
34695: LD_EXP 49
34699: PUSH
34700: FOR_TO
34701: IFFALSE 35485
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
34703: LD_EXP 77
34707: PUSH
34708: LD_VAR 0 2
34712: ARRAY
34713: NOT
34714: PUSH
34715: LD_EXP 52
34719: PUSH
34720: LD_VAR 0 2
34724: ARRAY
34725: PUSH
34726: LD_INT 1
34728: ARRAY
34729: OR
34730: PUSH
34731: LD_EXP 52
34735: PUSH
34736: LD_VAR 0 2
34740: ARRAY
34741: PUSH
34742: LD_INT 2
34744: ARRAY
34745: OR
34746: PUSH
34747: LD_EXP 75
34751: PUSH
34752: LD_VAR 0 2
34756: ARRAY
34757: PPUSH
34758: LD_INT 1
34760: PPUSH
34761: CALL_OW 325
34765: NOT
34766: OR
34767: PUSH
34768: LD_EXP 72
34772: PUSH
34773: LD_VAR 0 2
34777: ARRAY
34778: OR
34779: IFFALSE 34783
// continue ;
34781: GO 34700
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
34783: LD_ADDR_VAR 0 8
34787: PUSH
34788: LD_EXP 49
34792: PUSH
34793: LD_VAR 0 2
34797: ARRAY
34798: PPUSH
34799: LD_INT 25
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 50
34811: PUSH
34812: EMPTY
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: LD_INT 60
34820: PUSH
34821: EMPTY
34822: LIST
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: PPUSH
34833: CALL_OW 72
34837: PUSH
34838: LD_EXP 53
34842: PUSH
34843: LD_VAR 0 2
34847: ARRAY
34848: DIFF
34849: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34850: LD_ADDR_VAR 0 9
34854: PUSH
34855: LD_EXP 49
34859: PUSH
34860: LD_VAR 0 2
34864: ARRAY
34865: PPUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 30
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 30
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: PPUSH
34894: CALL_OW 72
34898: ST_TO_ADDR
// if not tmp or not dep then
34899: LD_VAR 0 8
34903: NOT
34904: PUSH
34905: LD_VAR 0 9
34909: NOT
34910: OR
34911: IFFALSE 34915
// continue ;
34913: GO 34700
// side := GetSide ( tmp [ 1 ] ) ;
34915: LD_ADDR_VAR 0 11
34919: PUSH
34920: LD_VAR 0 8
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: PPUSH
34929: CALL_OW 255
34933: ST_TO_ADDR
// dep := dep [ 1 ] ;
34934: LD_ADDR_VAR 0 9
34938: PUSH
34939: LD_VAR 0 9
34943: PUSH
34944: LD_INT 1
34946: ARRAY
34947: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
34948: LD_ADDR_VAR 0 7
34952: PUSH
34953: LD_EXP 77
34957: PUSH
34958: LD_VAR 0 2
34962: ARRAY
34963: PPUSH
34964: LD_INT 22
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 25
34976: PUSH
34977: LD_INT 12
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PPUSH
34988: CALL_OW 70
34992: PUSH
34993: LD_INT 22
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 25
35005: PUSH
35006: LD_INT 12
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 91
35015: PUSH
35016: LD_VAR 0 9
35020: PUSH
35021: LD_INT 20
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: PPUSH
35034: CALL_OW 69
35038: UNION
35039: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35040: LD_ADDR_VAR 0 10
35044: PUSH
35045: LD_EXP 77
35049: PUSH
35050: LD_VAR 0 2
35054: ARRAY
35055: PPUSH
35056: LD_INT 81
35058: PUSH
35059: LD_VAR 0 11
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PPUSH
35068: CALL_OW 70
35072: ST_TO_ADDR
// if not apes or danger_at_area then
35073: LD_VAR 0 7
35077: NOT
35078: PUSH
35079: LD_VAR 0 10
35083: OR
35084: IFFALSE 35134
// begin if mc_taming [ i ] then
35086: LD_EXP 80
35090: PUSH
35091: LD_VAR 0 2
35095: ARRAY
35096: IFFALSE 35132
// begin MC_Reset ( i , 121 ) ;
35098: LD_VAR 0 2
35102: PPUSH
35103: LD_INT 121
35105: PPUSH
35106: CALL 20769 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
35110: LD_ADDR_EXP 80
35114: PUSH
35115: LD_EXP 80
35119: PPUSH
35120: LD_VAR 0 2
35124: PPUSH
35125: EMPTY
35126: PPUSH
35127: CALL_OW 1
35131: ST_TO_ADDR
// end ; continue ;
35132: GO 34700
// end ; for j in tmp do
35134: LD_ADDR_VAR 0 3
35138: PUSH
35139: LD_VAR 0 8
35143: PUSH
35144: FOR_IN
35145: IFFALSE 35481
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
35147: LD_VAR 0 3
35151: PUSH
35152: LD_EXP 80
35156: PUSH
35157: LD_VAR 0 2
35161: ARRAY
35162: IN
35163: NOT
35164: PUSH
35165: LD_EXP 80
35169: PUSH
35170: LD_VAR 0 2
35174: ARRAY
35175: PUSH
35176: LD_INT 3
35178: LESS
35179: AND
35180: IFFALSE 35238
// begin SetTag ( j , 121 ) ;
35182: LD_VAR 0 3
35186: PPUSH
35187: LD_INT 121
35189: PPUSH
35190: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
35194: LD_ADDR_EXP 80
35198: PUSH
35199: LD_EXP 80
35203: PPUSH
35204: LD_VAR 0 2
35208: PUSH
35209: LD_EXP 80
35213: PUSH
35214: LD_VAR 0 2
35218: ARRAY
35219: PUSH
35220: LD_INT 1
35222: PLUS
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PPUSH
35228: LD_VAR 0 3
35232: PPUSH
35233: CALL 52657 0 3
35237: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
35238: LD_VAR 0 3
35242: PUSH
35243: LD_EXP 80
35247: PUSH
35248: LD_VAR 0 2
35252: ARRAY
35253: IN
35254: IFFALSE 35479
// begin if GetClass ( j ) <> 4 then
35256: LD_VAR 0 3
35260: PPUSH
35261: CALL_OW 257
35265: PUSH
35266: LD_INT 4
35268: NONEQUAL
35269: IFFALSE 35322
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
35271: LD_ADDR_EXP 80
35275: PUSH
35276: LD_EXP 80
35280: PPUSH
35281: LD_VAR 0 2
35285: PPUSH
35286: LD_EXP 80
35290: PUSH
35291: LD_VAR 0 2
35295: ARRAY
35296: PUSH
35297: LD_VAR 0 3
35301: DIFF
35302: PPUSH
35303: CALL_OW 1
35307: ST_TO_ADDR
// SetTag ( j , 0 ) ;
35308: LD_VAR 0 3
35312: PPUSH
35313: LD_INT 0
35315: PPUSH
35316: CALL_OW 109
// continue ;
35320: GO 35144
// end ; if IsInUnit ( j ) then
35322: LD_VAR 0 3
35326: PPUSH
35327: CALL_OW 310
35331: IFFALSE 35342
// ComExitBuilding ( j ) ;
35333: LD_VAR 0 3
35337: PPUSH
35338: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
35342: LD_ADDR_VAR 0 6
35346: PUSH
35347: LD_VAR 0 7
35351: PPUSH
35352: LD_VAR 0 3
35356: PPUSH
35357: CALL_OW 74
35361: ST_TO_ADDR
// if not ape then
35362: LD_VAR 0 6
35366: NOT
35367: IFFALSE 35371
// break ;
35369: GO 35481
// x := GetX ( ape ) ;
35371: LD_ADDR_VAR 0 4
35375: PUSH
35376: LD_VAR 0 6
35380: PPUSH
35381: CALL_OW 250
35385: ST_TO_ADDR
// y := GetY ( ape ) ;
35386: LD_ADDR_VAR 0 5
35390: PUSH
35391: LD_VAR 0 6
35395: PPUSH
35396: CALL_OW 251
35400: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35401: LD_VAR 0 4
35405: PPUSH
35406: LD_VAR 0 5
35410: PPUSH
35411: CALL_OW 488
35415: NOT
35416: PUSH
35417: LD_VAR 0 11
35421: PPUSH
35422: LD_VAR 0 4
35426: PPUSH
35427: LD_VAR 0 5
35431: PPUSH
35432: LD_INT 20
35434: PPUSH
35435: CALL 53553 0 4
35439: PUSH
35440: LD_INT 4
35442: ARRAY
35443: OR
35444: IFFALSE 35448
// break ;
35446: GO 35481
// if not HasTask ( j ) then
35448: LD_VAR 0 3
35452: PPUSH
35453: CALL_OW 314
35457: NOT
35458: IFFALSE 35479
// ComTameXY ( j , x , y ) ;
35460: LD_VAR 0 3
35464: PPUSH
35465: LD_VAR 0 4
35469: PPUSH
35470: LD_VAR 0 5
35474: PPUSH
35475: CALL_OW 131
// end ; end ;
35479: GO 35144
35481: POP
35482: POP
// end ;
35483: GO 34700
35485: POP
35486: POP
// end ;
35487: LD_VAR 0 1
35491: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
35492: LD_INT 0
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
35500: PPUSH
35501: PPUSH
// if not mc_bases then
35502: LD_EXP 49
35506: NOT
35507: IFFALSE 35511
// exit ;
35509: GO 36137
// for i = 1 to mc_bases do
35511: LD_ADDR_VAR 0 2
35515: PUSH
35516: DOUBLE
35517: LD_INT 1
35519: DEC
35520: ST_TO_ADDR
35521: LD_EXP 49
35525: PUSH
35526: FOR_TO
35527: IFFALSE 36135
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
35529: LD_EXP 78
35533: PUSH
35534: LD_VAR 0 2
35538: ARRAY
35539: NOT
35540: PUSH
35541: LD_EXP 78
35545: PUSH
35546: LD_VAR 0 2
35550: ARRAY
35551: PPUSH
35552: LD_INT 25
35554: PUSH
35555: LD_INT 12
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PPUSH
35562: CALL_OW 72
35566: NOT
35567: OR
35568: IFFALSE 35572
// continue ;
35570: GO 35526
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
35572: LD_ADDR_VAR 0 5
35576: PUSH
35577: LD_EXP 78
35581: PUSH
35582: LD_VAR 0 2
35586: ARRAY
35587: PUSH
35588: LD_INT 1
35590: ARRAY
35591: PPUSH
35592: CALL_OW 255
35596: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
35597: LD_VAR 0 5
35601: PPUSH
35602: LD_INT 2
35604: PPUSH
35605: CALL_OW 325
35609: IFFALSE 35862
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
35611: LD_ADDR_VAR 0 4
35615: PUSH
35616: LD_EXP 78
35620: PUSH
35621: LD_VAR 0 2
35625: ARRAY
35626: PPUSH
35627: LD_INT 25
35629: PUSH
35630: LD_INT 16
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PPUSH
35637: CALL_OW 72
35641: ST_TO_ADDR
// if tmp < 6 then
35642: LD_VAR 0 4
35646: PUSH
35647: LD_INT 6
35649: LESS
35650: IFFALSE 35862
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35652: LD_ADDR_VAR 0 6
35656: PUSH
35657: LD_EXP 49
35661: PUSH
35662: LD_VAR 0 2
35666: ARRAY
35667: PPUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 30
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 30
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: PPUSH
35696: CALL_OW 72
35700: ST_TO_ADDR
// if depot then
35701: LD_VAR 0 6
35705: IFFALSE 35862
// begin selected := 0 ;
35707: LD_ADDR_VAR 0 7
35711: PUSH
35712: LD_INT 0
35714: ST_TO_ADDR
// for j in depot do
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_VAR 0 6
35724: PUSH
35725: FOR_IN
35726: IFFALSE 35757
// begin if UnitsInside ( j ) < 6 then
35728: LD_VAR 0 3
35732: PPUSH
35733: CALL_OW 313
35737: PUSH
35738: LD_INT 6
35740: LESS
35741: IFFALSE 35755
// begin selected := j ;
35743: LD_ADDR_VAR 0 7
35747: PUSH
35748: LD_VAR 0 3
35752: ST_TO_ADDR
// break ;
35753: GO 35757
// end ; end ;
35755: GO 35725
35757: POP
35758: POP
// if selected then
35759: LD_VAR 0 7
35763: IFFALSE 35862
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
35765: LD_ADDR_VAR 0 3
35769: PUSH
35770: LD_EXP 78
35774: PUSH
35775: LD_VAR 0 2
35779: ARRAY
35780: PPUSH
35781: LD_INT 25
35783: PUSH
35784: LD_INT 12
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PPUSH
35791: CALL_OW 72
35795: PUSH
35796: FOR_IN
35797: IFFALSE 35860
// if not HasTask ( j ) then
35799: LD_VAR 0 3
35803: PPUSH
35804: CALL_OW 314
35808: NOT
35809: IFFALSE 35858
// begin if not IsInUnit ( j ) then
35811: LD_VAR 0 3
35815: PPUSH
35816: CALL_OW 310
35820: NOT
35821: IFFALSE 35837
// ComEnterUnit ( j , selected ) ;
35823: LD_VAR 0 3
35827: PPUSH
35828: LD_VAR 0 7
35832: PPUSH
35833: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
35837: LD_VAR 0 3
35841: PPUSH
35842: LD_INT 16
35844: PPUSH
35845: CALL_OW 183
// AddComExitBuilding ( j ) ;
35849: LD_VAR 0 3
35853: PPUSH
35854: CALL_OW 182
// end ;
35858: GO 35796
35860: POP
35861: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
35862: LD_VAR 0 5
35866: PPUSH
35867: LD_INT 11
35869: PPUSH
35870: CALL_OW 325
35874: IFFALSE 36133
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
35876: LD_ADDR_VAR 0 4
35880: PUSH
35881: LD_EXP 78
35885: PUSH
35886: LD_VAR 0 2
35890: ARRAY
35891: PPUSH
35892: LD_INT 25
35894: PUSH
35895: LD_INT 16
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PPUSH
35902: CALL_OW 72
35906: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
35907: LD_VAR 0 4
35911: PUSH
35912: LD_INT 6
35914: GREATEREQUAL
35915: PUSH
35916: LD_VAR 0 5
35920: PPUSH
35921: LD_INT 2
35923: PPUSH
35924: CALL_OW 325
35928: NOT
35929: OR
35930: IFFALSE 36133
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
35932: LD_ADDR_VAR 0 8
35936: PUSH
35937: LD_EXP 49
35941: PUSH
35942: LD_VAR 0 2
35946: ARRAY
35947: PPUSH
35948: LD_INT 2
35950: PUSH
35951: LD_INT 30
35953: PUSH
35954: LD_INT 4
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 30
35963: PUSH
35964: LD_INT 5
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: PPUSH
35976: CALL_OW 72
35980: ST_TO_ADDR
// if barracks then
35981: LD_VAR 0 8
35985: IFFALSE 36133
// begin selected := 0 ;
35987: LD_ADDR_VAR 0 7
35991: PUSH
35992: LD_INT 0
35994: ST_TO_ADDR
// for j in barracks do
35995: LD_ADDR_VAR 0 3
35999: PUSH
36000: LD_VAR 0 8
36004: PUSH
36005: FOR_IN
36006: IFFALSE 36037
// begin if UnitsInside ( j ) < 6 then
36008: LD_VAR 0 3
36012: PPUSH
36013: CALL_OW 313
36017: PUSH
36018: LD_INT 6
36020: LESS
36021: IFFALSE 36035
// begin selected := j ;
36023: LD_ADDR_VAR 0 7
36027: PUSH
36028: LD_VAR 0 3
36032: ST_TO_ADDR
// break ;
36033: GO 36037
// end ; end ;
36035: GO 36005
36037: POP
36038: POP
// if selected then
36039: LD_VAR 0 7
36043: IFFALSE 36133
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36045: LD_ADDR_VAR 0 3
36049: PUSH
36050: LD_EXP 78
36054: PUSH
36055: LD_VAR 0 2
36059: ARRAY
36060: PPUSH
36061: LD_INT 25
36063: PUSH
36064: LD_INT 12
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PPUSH
36071: CALL_OW 72
36075: PUSH
36076: FOR_IN
36077: IFFALSE 36131
// if not IsInUnit ( j ) and not HasTask ( j ) then
36079: LD_VAR 0 3
36083: PPUSH
36084: CALL_OW 310
36088: NOT
36089: PUSH
36090: LD_VAR 0 3
36094: PPUSH
36095: CALL_OW 314
36099: NOT
36100: AND
36101: IFFALSE 36129
// begin ComEnterUnit ( j , selected ) ;
36103: LD_VAR 0 3
36107: PPUSH
36108: LD_VAR 0 7
36112: PPUSH
36113: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
36117: LD_VAR 0 3
36121: PPUSH
36122: LD_INT 15
36124: PPUSH
36125: CALL_OW 183
// end ;
36129: GO 36076
36131: POP
36132: POP
// end ; end ; end ; end ; end ;
36133: GO 35526
36135: POP
36136: POP
// end ;
36137: LD_VAR 0 1
36141: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
36142: LD_INT 0
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
// if not mc_bases then
36148: LD_EXP 49
36152: NOT
36153: IFFALSE 36157
// exit ;
36155: GO 36335
// for i = 1 to mc_bases do
36157: LD_ADDR_VAR 0 2
36161: PUSH
36162: DOUBLE
36163: LD_INT 1
36165: DEC
36166: ST_TO_ADDR
36167: LD_EXP 49
36171: PUSH
36172: FOR_TO
36173: IFFALSE 36333
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
36175: LD_ADDR_VAR 0 4
36179: PUSH
36180: LD_EXP 49
36184: PUSH
36185: LD_VAR 0 2
36189: ARRAY
36190: PPUSH
36191: LD_INT 25
36193: PUSH
36194: LD_INT 9
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PPUSH
36201: CALL_OW 72
36205: ST_TO_ADDR
// if not tmp then
36206: LD_VAR 0 4
36210: NOT
36211: IFFALSE 36215
// continue ;
36213: GO 36172
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
36215: LD_EXP 75
36219: PUSH
36220: LD_VAR 0 2
36224: ARRAY
36225: PPUSH
36226: LD_INT 29
36228: PPUSH
36229: CALL_OW 325
36233: NOT
36234: PUSH
36235: LD_EXP 75
36239: PUSH
36240: LD_VAR 0 2
36244: ARRAY
36245: PPUSH
36246: LD_INT 28
36248: PPUSH
36249: CALL_OW 325
36253: NOT
36254: AND
36255: IFFALSE 36259
// continue ;
36257: GO 36172
// for j in tmp do
36259: LD_ADDR_VAR 0 3
36263: PUSH
36264: LD_VAR 0 4
36268: PUSH
36269: FOR_IN
36270: IFFALSE 36329
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
36272: LD_VAR 0 3
36276: PUSH
36277: LD_EXP 52
36281: PUSH
36282: LD_VAR 0 2
36286: ARRAY
36287: PUSH
36288: LD_INT 1
36290: ARRAY
36291: IN
36292: NOT
36293: PUSH
36294: LD_VAR 0 3
36298: PUSH
36299: LD_EXP 52
36303: PUSH
36304: LD_VAR 0 2
36308: ARRAY
36309: PUSH
36310: LD_INT 2
36312: ARRAY
36313: IN
36314: NOT
36315: AND
36316: IFFALSE 36327
// ComSpaceTimeShoot ( j ) ;
36318: LD_VAR 0 3
36322: PPUSH
36323: CALL 46717 0 1
36327: GO 36269
36329: POP
36330: POP
// end ;
36331: GO 36172
36333: POP
36334: POP
// end ;
36335: LD_VAR 0 1
36339: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
36340: LD_INT 0
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
// if not mc_bases then
36351: LD_EXP 49
36355: NOT
36356: IFFALSE 36360
// exit ;
36358: GO 36982
// for i = 1 to mc_bases do
36360: LD_ADDR_VAR 0 2
36364: PUSH
36365: DOUBLE
36366: LD_INT 1
36368: DEC
36369: ST_TO_ADDR
36370: LD_EXP 49
36374: PUSH
36375: FOR_TO
36376: IFFALSE 36980
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
36378: LD_EXP 84
36382: PUSH
36383: LD_VAR 0 2
36387: ARRAY
36388: NOT
36389: PUSH
36390: LD_INT 38
36392: PPUSH
36393: LD_EXP 75
36397: PUSH
36398: LD_VAR 0 2
36402: ARRAY
36403: PPUSH
36404: CALL_OW 321
36408: PUSH
36409: LD_INT 2
36411: NONEQUAL
36412: OR
36413: IFFALSE 36417
// continue ;
36415: GO 36375
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
36417: LD_ADDR_VAR 0 8
36421: PUSH
36422: LD_EXP 49
36426: PUSH
36427: LD_VAR 0 2
36431: ARRAY
36432: PPUSH
36433: LD_INT 30
36435: PUSH
36436: LD_INT 34
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PPUSH
36443: CALL_OW 72
36447: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_EXP 49
36457: PUSH
36458: LD_VAR 0 2
36462: ARRAY
36463: PPUSH
36464: LD_INT 25
36466: PUSH
36467: LD_INT 4
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PPUSH
36474: CALL_OW 72
36478: PPUSH
36479: LD_INT 0
36481: PPUSH
36482: CALL 85893 0 2
36486: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
36487: LD_VAR 0 9
36491: NOT
36492: PUSH
36493: LD_VAR 0 8
36497: NOT
36498: OR
36499: PUSH
36500: LD_EXP 49
36504: PUSH
36505: LD_VAR 0 2
36509: ARRAY
36510: PPUSH
36511: LD_INT 124
36513: PPUSH
36514: CALL 85893 0 2
36518: OR
36519: IFFALSE 36523
// continue ;
36521: GO 36375
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
36523: LD_EXP 85
36527: PUSH
36528: LD_VAR 0 2
36532: ARRAY
36533: PUSH
36534: LD_EXP 84
36538: PUSH
36539: LD_VAR 0 2
36543: ARRAY
36544: LESS
36545: PUSH
36546: LD_EXP 85
36550: PUSH
36551: LD_VAR 0 2
36555: ARRAY
36556: PUSH
36557: LD_VAR 0 8
36561: LESS
36562: AND
36563: IFFALSE 36978
// begin tmp := sci [ 1 ] ;
36565: LD_ADDR_VAR 0 7
36569: PUSH
36570: LD_VAR 0 9
36574: PUSH
36575: LD_INT 1
36577: ARRAY
36578: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
36579: LD_VAR 0 7
36583: PPUSH
36584: LD_INT 124
36586: PPUSH
36587: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
36591: LD_ADDR_VAR 0 3
36595: PUSH
36596: DOUBLE
36597: LD_EXP 84
36601: PUSH
36602: LD_VAR 0 2
36606: ARRAY
36607: INC
36608: ST_TO_ADDR
36609: LD_EXP 84
36613: PUSH
36614: LD_VAR 0 2
36618: ARRAY
36619: PUSH
36620: FOR_DOWNTO
36621: IFFALSE 36964
// begin if IsInUnit ( tmp ) then
36623: LD_VAR 0 7
36627: PPUSH
36628: CALL_OW 310
36632: IFFALSE 36643
// ComExitBuilding ( tmp ) ;
36634: LD_VAR 0 7
36638: PPUSH
36639: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
36643: LD_INT 35
36645: PPUSH
36646: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
36650: LD_VAR 0 7
36654: PPUSH
36655: CALL_OW 310
36659: NOT
36660: PUSH
36661: LD_VAR 0 7
36665: PPUSH
36666: CALL_OW 314
36670: NOT
36671: AND
36672: IFFALSE 36643
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
36674: LD_ADDR_VAR 0 6
36678: PUSH
36679: LD_VAR 0 7
36683: PPUSH
36684: CALL_OW 250
36688: PUSH
36689: LD_VAR 0 7
36693: PPUSH
36694: CALL_OW 251
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
36703: LD_INT 35
36705: PPUSH
36706: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
36710: LD_ADDR_VAR 0 4
36714: PUSH
36715: LD_EXP 84
36719: PUSH
36720: LD_VAR 0 2
36724: ARRAY
36725: PUSH
36726: LD_VAR 0 3
36730: ARRAY
36731: PUSH
36732: LD_INT 1
36734: ARRAY
36735: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
36736: LD_ADDR_VAR 0 5
36740: PUSH
36741: LD_EXP 84
36745: PUSH
36746: LD_VAR 0 2
36750: ARRAY
36751: PUSH
36752: LD_VAR 0 3
36756: ARRAY
36757: PUSH
36758: LD_INT 2
36760: ARRAY
36761: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
36762: LD_VAR 0 7
36766: PPUSH
36767: LD_INT 10
36769: PPUSH
36770: CALL 55250 0 2
36774: PUSH
36775: LD_INT 4
36777: ARRAY
36778: IFFALSE 36816
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
36780: LD_VAR 0 7
36784: PPUSH
36785: LD_VAR 0 6
36789: PUSH
36790: LD_INT 1
36792: ARRAY
36793: PPUSH
36794: LD_VAR 0 6
36798: PUSH
36799: LD_INT 2
36801: ARRAY
36802: PPUSH
36803: CALL_OW 111
// wait ( 0 0$10 ) ;
36807: LD_INT 350
36809: PPUSH
36810: CALL_OW 67
// end else
36814: GO 36842
// begin ComMoveXY ( tmp , x , y ) ;
36816: LD_VAR 0 7
36820: PPUSH
36821: LD_VAR 0 4
36825: PPUSH
36826: LD_VAR 0 5
36830: PPUSH
36831: CALL_OW 111
// wait ( 0 0$3 ) ;
36835: LD_INT 105
36837: PPUSH
36838: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
36842: LD_VAR 0 7
36846: PPUSH
36847: LD_VAR 0 4
36851: PPUSH
36852: LD_VAR 0 5
36856: PPUSH
36857: CALL_OW 307
36861: IFFALSE 36703
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
36863: LD_VAR 0 7
36867: PPUSH
36868: LD_VAR 0 4
36872: PPUSH
36873: LD_VAR 0 5
36877: PPUSH
36878: LD_VAR 0 8
36882: PUSH
36883: LD_VAR 0 3
36887: ARRAY
36888: PPUSH
36889: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
36893: LD_INT 35
36895: PPUSH
36896: CALL_OW 67
// until not HasTask ( tmp ) ;
36900: LD_VAR 0 7
36904: PPUSH
36905: CALL_OW 314
36909: NOT
36910: IFFALSE 36893
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
36912: LD_ADDR_EXP 85
36916: PUSH
36917: LD_EXP 85
36921: PPUSH
36922: LD_VAR 0 2
36926: PUSH
36927: LD_EXP 85
36931: PUSH
36932: LD_VAR 0 2
36936: ARRAY
36937: PUSH
36938: LD_INT 1
36940: PLUS
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PPUSH
36946: LD_VAR 0 8
36950: PUSH
36951: LD_VAR 0 3
36955: ARRAY
36956: PPUSH
36957: CALL 52657 0 3
36961: ST_TO_ADDR
// end ;
36962: GO 36620
36964: POP
36965: POP
// MC_Reset ( i , 124 ) ;
36966: LD_VAR 0 2
36970: PPUSH
36971: LD_INT 124
36973: PPUSH
36974: CALL 20769 0 2
// end ; end ;
36978: GO 36375
36980: POP
36981: POP
// end ;
36982: LD_VAR 0 1
36986: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
36987: LD_INT 0
36989: PPUSH
36990: PPUSH
36991: PPUSH
// if not mc_bases then
36992: LD_EXP 49
36996: NOT
36997: IFFALSE 37001
// exit ;
36999: GO 37607
// for i = 1 to mc_bases do
37001: LD_ADDR_VAR 0 2
37005: PUSH
37006: DOUBLE
37007: LD_INT 1
37009: DEC
37010: ST_TO_ADDR
37011: LD_EXP 49
37015: PUSH
37016: FOR_TO
37017: IFFALSE 37605
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37019: LD_ADDR_VAR 0 3
37023: PUSH
37024: LD_EXP 49
37028: PUSH
37029: LD_VAR 0 2
37033: ARRAY
37034: PPUSH
37035: LD_INT 25
37037: PUSH
37038: LD_INT 4
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PPUSH
37045: CALL_OW 72
37049: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37050: LD_VAR 0 3
37054: NOT
37055: PUSH
37056: LD_EXP 86
37060: PUSH
37061: LD_VAR 0 2
37065: ARRAY
37066: NOT
37067: OR
37068: PUSH
37069: LD_EXP 49
37073: PUSH
37074: LD_VAR 0 2
37078: ARRAY
37079: PPUSH
37080: LD_INT 2
37082: PUSH
37083: LD_INT 30
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 30
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: PPUSH
37108: CALL_OW 72
37112: NOT
37113: OR
37114: IFFALSE 37164
// begin if mc_deposits_finder [ i ] then
37116: LD_EXP 87
37120: PUSH
37121: LD_VAR 0 2
37125: ARRAY
37126: IFFALSE 37162
// begin MC_Reset ( i , 125 ) ;
37128: LD_VAR 0 2
37132: PPUSH
37133: LD_INT 125
37135: PPUSH
37136: CALL 20769 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37140: LD_ADDR_EXP 87
37144: PUSH
37145: LD_EXP 87
37149: PPUSH
37150: LD_VAR 0 2
37154: PPUSH
37155: EMPTY
37156: PPUSH
37157: CALL_OW 1
37161: ST_TO_ADDR
// end ; continue ;
37162: GO 37016
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
37164: LD_EXP 86
37168: PUSH
37169: LD_VAR 0 2
37173: ARRAY
37174: PUSH
37175: LD_INT 1
37177: ARRAY
37178: PUSH
37179: LD_INT 3
37181: ARRAY
37182: PUSH
37183: LD_INT 1
37185: EQUAL
37186: PUSH
37187: LD_INT 20
37189: PPUSH
37190: LD_EXP 75
37194: PUSH
37195: LD_VAR 0 2
37199: ARRAY
37200: PPUSH
37201: CALL_OW 321
37205: PUSH
37206: LD_INT 2
37208: NONEQUAL
37209: AND
37210: IFFALSE 37260
// begin if mc_deposits_finder [ i ] then
37212: LD_EXP 87
37216: PUSH
37217: LD_VAR 0 2
37221: ARRAY
37222: IFFALSE 37258
// begin MC_Reset ( i , 125 ) ;
37224: LD_VAR 0 2
37228: PPUSH
37229: LD_INT 125
37231: PPUSH
37232: CALL 20769 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37236: LD_ADDR_EXP 87
37240: PUSH
37241: LD_EXP 87
37245: PPUSH
37246: LD_VAR 0 2
37250: PPUSH
37251: EMPTY
37252: PPUSH
37253: CALL_OW 1
37257: ST_TO_ADDR
// end ; continue ;
37258: GO 37016
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
37260: LD_EXP 86
37264: PUSH
37265: LD_VAR 0 2
37269: ARRAY
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: PUSH
37275: LD_INT 1
37277: ARRAY
37278: PPUSH
37279: LD_EXP 86
37283: PUSH
37284: LD_VAR 0 2
37288: ARRAY
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: PPUSH
37298: LD_EXP 75
37302: PUSH
37303: LD_VAR 0 2
37307: ARRAY
37308: PPUSH
37309: CALL_OW 440
37313: IFFALSE 37356
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
37315: LD_ADDR_EXP 86
37319: PUSH
37320: LD_EXP 86
37324: PPUSH
37325: LD_VAR 0 2
37329: PPUSH
37330: LD_EXP 86
37334: PUSH
37335: LD_VAR 0 2
37339: ARRAY
37340: PPUSH
37341: LD_INT 1
37343: PPUSH
37344: CALL_OW 3
37348: PPUSH
37349: CALL_OW 1
37353: ST_TO_ADDR
37354: GO 37603
// begin if not mc_deposits_finder [ i ] then
37356: LD_EXP 87
37360: PUSH
37361: LD_VAR 0 2
37365: ARRAY
37366: NOT
37367: IFFALSE 37419
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
37369: LD_ADDR_EXP 87
37373: PUSH
37374: LD_EXP 87
37378: PPUSH
37379: LD_VAR 0 2
37383: PPUSH
37384: LD_VAR 0 3
37388: PUSH
37389: LD_INT 1
37391: ARRAY
37392: PUSH
37393: EMPTY
37394: LIST
37395: PPUSH
37396: CALL_OW 1
37400: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
37401: LD_VAR 0 3
37405: PUSH
37406: LD_INT 1
37408: ARRAY
37409: PPUSH
37410: LD_INT 125
37412: PPUSH
37413: CALL_OW 109
// end else
37417: GO 37603
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
37419: LD_EXP 87
37423: PUSH
37424: LD_VAR 0 2
37428: ARRAY
37429: PUSH
37430: LD_INT 1
37432: ARRAY
37433: PPUSH
37434: CALL_OW 310
37438: IFFALSE 37461
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
37440: LD_EXP 87
37444: PUSH
37445: LD_VAR 0 2
37449: ARRAY
37450: PUSH
37451: LD_INT 1
37453: ARRAY
37454: PPUSH
37455: CALL_OW 122
37459: GO 37603
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
37461: LD_EXP 87
37465: PUSH
37466: LD_VAR 0 2
37470: ARRAY
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: PPUSH
37476: CALL_OW 314
37480: NOT
37481: PUSH
37482: LD_EXP 87
37486: PUSH
37487: LD_VAR 0 2
37491: ARRAY
37492: PUSH
37493: LD_INT 1
37495: ARRAY
37496: PPUSH
37497: LD_EXP 86
37501: PUSH
37502: LD_VAR 0 2
37506: ARRAY
37507: PUSH
37508: LD_INT 1
37510: ARRAY
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PPUSH
37516: LD_EXP 86
37520: PUSH
37521: LD_VAR 0 2
37525: ARRAY
37526: PUSH
37527: LD_INT 1
37529: ARRAY
37530: PUSH
37531: LD_INT 2
37533: ARRAY
37534: PPUSH
37535: CALL_OW 297
37539: PUSH
37540: LD_INT 6
37542: GREATER
37543: AND
37544: IFFALSE 37603
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
37546: LD_EXP 87
37550: PUSH
37551: LD_VAR 0 2
37555: ARRAY
37556: PUSH
37557: LD_INT 1
37559: ARRAY
37560: PPUSH
37561: LD_EXP 86
37565: PUSH
37566: LD_VAR 0 2
37570: ARRAY
37571: PUSH
37572: LD_INT 1
37574: ARRAY
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: PPUSH
37580: LD_EXP 86
37584: PUSH
37585: LD_VAR 0 2
37589: ARRAY
37590: PUSH
37591: LD_INT 1
37593: ARRAY
37594: PUSH
37595: LD_INT 2
37597: ARRAY
37598: PPUSH
37599: CALL_OW 111
// end ; end ; end ;
37603: GO 37016
37605: POP
37606: POP
// end ;
37607: LD_VAR 0 1
37611: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
37612: LD_INT 0
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
// if not mc_bases then
37625: LD_EXP 49
37629: NOT
37630: IFFALSE 37634
// exit ;
37632: GO 38358
// for i = 1 to mc_bases do
37634: LD_ADDR_VAR 0 2
37638: PUSH
37639: DOUBLE
37640: LD_INT 1
37642: DEC
37643: ST_TO_ADDR
37644: LD_EXP 49
37648: PUSH
37649: FOR_TO
37650: IFFALSE 38356
// begin if not mc_bases [ i ] then
37652: LD_EXP 49
37656: PUSH
37657: LD_VAR 0 2
37661: ARRAY
37662: NOT
37663: IFFALSE 37667
// continue ;
37665: GO 37649
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
37667: LD_ADDR_VAR 0 7
37671: PUSH
37672: LD_EXP 49
37676: PUSH
37677: LD_VAR 0 2
37681: ARRAY
37682: PUSH
37683: LD_INT 1
37685: ARRAY
37686: PPUSH
37687: CALL_OW 248
37691: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
37692: LD_VAR 0 7
37696: PUSH
37697: LD_INT 3
37699: EQUAL
37700: PUSH
37701: LD_EXP 68
37705: PUSH
37706: LD_VAR 0 2
37710: ARRAY
37711: PUSH
37712: LD_EXP 71
37716: PUSH
37717: LD_VAR 0 2
37721: ARRAY
37722: UNION
37723: PPUSH
37724: LD_INT 33
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PPUSH
37734: CALL_OW 72
37738: NOT
37739: OR
37740: IFFALSE 37744
// continue ;
37742: GO 37649
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
37744: LD_ADDR_VAR 0 9
37748: PUSH
37749: LD_EXP 49
37753: PUSH
37754: LD_VAR 0 2
37758: ARRAY
37759: PPUSH
37760: LD_INT 30
37762: PUSH
37763: LD_INT 36
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PPUSH
37770: CALL_OW 72
37774: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
37775: LD_ADDR_VAR 0 10
37779: PUSH
37780: LD_EXP 68
37784: PUSH
37785: LD_VAR 0 2
37789: ARRAY
37790: PPUSH
37791: LD_INT 34
37793: PUSH
37794: LD_INT 31
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PPUSH
37801: CALL_OW 72
37805: ST_TO_ADDR
// if not cts and not mcts then
37806: LD_VAR 0 9
37810: NOT
37811: PUSH
37812: LD_VAR 0 10
37816: NOT
37817: AND
37818: IFFALSE 37822
// continue ;
37820: GO 37649
// x := cts ;
37822: LD_ADDR_VAR 0 11
37826: PUSH
37827: LD_VAR 0 9
37831: ST_TO_ADDR
// if not x then
37832: LD_VAR 0 11
37836: NOT
37837: IFFALSE 37849
// x := mcts ;
37839: LD_ADDR_VAR 0 11
37843: PUSH
37844: LD_VAR 0 10
37848: ST_TO_ADDR
// if mc_remote_driver [ i ] then
37849: LD_EXP 89
37853: PUSH
37854: LD_VAR 0 2
37858: ARRAY
37859: IFFALSE 38128
// for j in mc_remote_driver [ i ] do
37861: LD_ADDR_VAR 0 3
37865: PUSH
37866: LD_EXP 89
37870: PUSH
37871: LD_VAR 0 2
37875: ARRAY
37876: PUSH
37877: FOR_IN
37878: IFFALSE 38126
// begin if GetClass ( j ) <> 3 then
37880: LD_VAR 0 3
37884: PPUSH
37885: CALL_OW 257
37889: PUSH
37890: LD_INT 3
37892: NONEQUAL
37893: IFFALSE 37946
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
37895: LD_ADDR_EXP 89
37899: PUSH
37900: LD_EXP 89
37904: PPUSH
37905: LD_VAR 0 2
37909: PPUSH
37910: LD_EXP 89
37914: PUSH
37915: LD_VAR 0 2
37919: ARRAY
37920: PUSH
37921: LD_VAR 0 3
37925: DIFF
37926: PPUSH
37927: CALL_OW 1
37931: ST_TO_ADDR
// SetTag ( j , 0 ) ;
37932: LD_VAR 0 3
37936: PPUSH
37937: LD_INT 0
37939: PPUSH
37940: CALL_OW 109
// continue ;
37944: GO 37877
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
37946: LD_VAR 0 3
37950: PPUSH
37951: CALL_OW 310
37955: NOT
37956: PUSH
37957: LD_VAR 0 3
37961: PPUSH
37962: CALL_OW 310
37966: PPUSH
37967: CALL_OW 266
37971: PUSH
37972: LD_INT 36
37974: NONEQUAL
37975: PUSH
37976: LD_VAR 0 3
37980: PPUSH
37981: CALL 85981 0 1
37985: NOT
37986: AND
37987: OR
37988: IFFALSE 38124
// begin if IsInUnit ( j ) then
37990: LD_VAR 0 3
37994: PPUSH
37995: CALL_OW 310
37999: IFFALSE 38010
// ComExitBuilding ( j ) ;
38001: LD_VAR 0 3
38005: PPUSH
38006: CALL_OW 122
// ct := 0 ;
38010: LD_ADDR_VAR 0 8
38014: PUSH
38015: LD_INT 0
38017: ST_TO_ADDR
// for k in x do
38018: LD_ADDR_VAR 0 4
38022: PUSH
38023: LD_VAR 0 11
38027: PUSH
38028: FOR_IN
38029: IFFALSE 38102
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
38031: LD_VAR 0 4
38035: PPUSH
38036: CALL_OW 264
38040: PUSH
38041: LD_INT 31
38043: EQUAL
38044: PUSH
38045: LD_VAR 0 4
38049: PPUSH
38050: CALL_OW 311
38054: NOT
38055: AND
38056: PUSH
38057: LD_VAR 0 4
38061: PPUSH
38062: CALL_OW 266
38066: PUSH
38067: LD_INT 36
38069: EQUAL
38070: PUSH
38071: LD_VAR 0 4
38075: PPUSH
38076: CALL_OW 313
38080: PUSH
38081: LD_INT 3
38083: LESS
38084: AND
38085: OR
38086: IFFALSE 38100
// begin ct := k ;
38088: LD_ADDR_VAR 0 8
38092: PUSH
38093: LD_VAR 0 4
38097: ST_TO_ADDR
// break ;
38098: GO 38102
// end ;
38100: GO 38028
38102: POP
38103: POP
// if ct then
38104: LD_VAR 0 8
38108: IFFALSE 38124
// ComEnterUnit ( j , ct ) ;
38110: LD_VAR 0 3
38114: PPUSH
38115: LD_VAR 0 8
38119: PPUSH
38120: CALL_OW 120
// end ; end ;
38124: GO 37877
38126: POP
38127: POP
// places := 0 ;
38128: LD_ADDR_VAR 0 5
38132: PUSH
38133: LD_INT 0
38135: ST_TO_ADDR
// for j = 1 to x do
38136: LD_ADDR_VAR 0 3
38140: PUSH
38141: DOUBLE
38142: LD_INT 1
38144: DEC
38145: ST_TO_ADDR
38146: LD_VAR 0 11
38150: PUSH
38151: FOR_TO
38152: IFFALSE 38207
// if GetWeapon ( x [ j ] ) = ar_control_tower then
38154: LD_VAR 0 11
38158: PUSH
38159: LD_VAR 0 3
38163: ARRAY
38164: PPUSH
38165: CALL_OW 264
38169: PUSH
38170: LD_INT 31
38172: EQUAL
38173: IFFALSE 38191
// places := places + 1 else
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: LD_VAR 0 5
38184: PUSH
38185: LD_INT 1
38187: PLUS
38188: ST_TO_ADDR
38189: GO 38205
// places := places + 3 ;
38191: LD_ADDR_VAR 0 5
38195: PUSH
38196: LD_VAR 0 5
38200: PUSH
38201: LD_INT 3
38203: PLUS
38204: ST_TO_ADDR
38205: GO 38151
38207: POP
38208: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
38209: LD_ADDR_VAR 0 6
38213: PUSH
38214: LD_EXP 49
38218: PUSH
38219: LD_VAR 0 2
38223: ARRAY
38224: PPUSH
38225: LD_INT 25
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PPUSH
38235: CALL_OW 72
38239: PUSH
38240: LD_EXP 89
38244: PUSH
38245: LD_VAR 0 2
38249: ARRAY
38250: DIFF
38251: PPUSH
38252: LD_INT 3
38254: PPUSH
38255: CALL 86881 0 2
38259: ST_TO_ADDR
// if not tmp then
38260: LD_VAR 0 6
38264: NOT
38265: IFFALSE 38269
// continue ;
38267: GO 37649
// places := places - mc_remote_driver [ i ] ;
38269: LD_ADDR_VAR 0 5
38273: PUSH
38274: LD_VAR 0 5
38278: PUSH
38279: LD_EXP 89
38283: PUSH
38284: LD_VAR 0 2
38288: ARRAY
38289: MINUS
38290: ST_TO_ADDR
// if places then
38291: LD_VAR 0 5
38295: IFFALSE 38354
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
38297: LD_ADDR_EXP 89
38301: PUSH
38302: LD_EXP 89
38306: PPUSH
38307: LD_VAR 0 2
38311: PPUSH
38312: LD_EXP 89
38316: PUSH
38317: LD_VAR 0 2
38321: ARRAY
38322: PUSH
38323: LD_VAR 0 6
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: UNION
38332: PPUSH
38333: CALL_OW 1
38337: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
38338: LD_VAR 0 6
38342: PUSH
38343: LD_INT 1
38345: ARRAY
38346: PPUSH
38347: LD_INT 126
38349: PPUSH
38350: CALL_OW 109
// end ; end ;
38354: GO 37649
38356: POP
38357: POP
// end ;
38358: LD_VAR 0 1
38362: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
38363: LD_INT 0
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
38371: LD_VAR 0 1
38375: NOT
38376: PUSH
38377: LD_VAR 0 2
38381: NOT
38382: OR
38383: PUSH
38384: LD_VAR 0 3
38388: NOT
38389: OR
38390: PUSH
38391: LD_VAR 0 4
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: LD_INT 4
38407: PUSH
38408: LD_INT 5
38410: PUSH
38411: LD_INT 8
38413: PUSH
38414: LD_INT 9
38416: PUSH
38417: LD_INT 15
38419: PUSH
38420: LD_INT 16
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: IN
38434: NOT
38435: OR
38436: IFFALSE 38440
// exit ;
38438: GO 39340
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
38440: LD_ADDR_VAR 0 2
38444: PUSH
38445: LD_VAR 0 2
38449: PPUSH
38450: LD_INT 21
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 24
38462: PUSH
38463: LD_INT 250
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PPUSH
38474: CALL_OW 72
38478: ST_TO_ADDR
// case class of 1 , 15 :
38479: LD_VAR 0 4
38483: PUSH
38484: LD_INT 1
38486: DOUBLE
38487: EQUAL
38488: IFTRUE 38498
38490: LD_INT 15
38492: DOUBLE
38493: EQUAL
38494: IFTRUE 38498
38496: GO 38583
38498: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
38499: LD_ADDR_VAR 0 8
38503: PUSH
38504: LD_VAR 0 2
38508: PPUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 30
38514: PUSH
38515: LD_INT 32
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 30
38524: PUSH
38525: LD_INT 31
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: PPUSH
38537: CALL_OW 72
38541: PUSH
38542: LD_VAR 0 2
38546: PPUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 30
38552: PUSH
38553: LD_INT 4
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 30
38562: PUSH
38563: LD_INT 5
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: PPUSH
38575: CALL_OW 72
38579: ADD
38580: ST_TO_ADDR
38581: GO 38829
38583: LD_INT 2
38585: DOUBLE
38586: EQUAL
38587: IFTRUE 38597
38589: LD_INT 16
38591: DOUBLE
38592: EQUAL
38593: IFTRUE 38597
38595: GO 38643
38597: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
38598: LD_ADDR_VAR 0 8
38602: PUSH
38603: LD_VAR 0 2
38607: PPUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 30
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 72
38640: ST_TO_ADDR
38641: GO 38829
38643: LD_INT 3
38645: DOUBLE
38646: EQUAL
38647: IFTRUE 38651
38649: GO 38697
38651: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
38652: LD_ADDR_VAR 0 8
38656: PUSH
38657: LD_VAR 0 2
38661: PPUSH
38662: LD_INT 2
38664: PUSH
38665: LD_INT 30
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 30
38677: PUSH
38678: LD_INT 3
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 72
38694: ST_TO_ADDR
38695: GO 38829
38697: LD_INT 4
38699: DOUBLE
38700: EQUAL
38701: IFTRUE 38705
38703: GO 38762
38705: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
38706: LD_ADDR_VAR 0 8
38710: PUSH
38711: LD_VAR 0 2
38715: PPUSH
38716: LD_INT 2
38718: PUSH
38719: LD_INT 30
38721: PUSH
38722: LD_INT 6
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 30
38731: PUSH
38732: LD_INT 7
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 30
38741: PUSH
38742: LD_INT 8
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: PPUSH
38755: CALL_OW 72
38759: ST_TO_ADDR
38760: GO 38829
38762: LD_INT 5
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38782
38768: LD_INT 8
38770: DOUBLE
38771: EQUAL
38772: IFTRUE 38782
38774: LD_INT 9
38776: DOUBLE
38777: EQUAL
38778: IFTRUE 38782
38780: GO 38828
38782: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
38783: LD_ADDR_VAR 0 8
38787: PUSH
38788: LD_VAR 0 2
38792: PPUSH
38793: LD_INT 2
38795: PUSH
38796: LD_INT 30
38798: PUSH
38799: LD_INT 4
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 30
38808: PUSH
38809: LD_INT 5
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: LIST
38820: PPUSH
38821: CALL_OW 72
38825: ST_TO_ADDR
38826: GO 38829
38828: POP
// if not tmp then
38829: LD_VAR 0 8
38833: NOT
38834: IFFALSE 38838
// exit ;
38836: GO 39340
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
38838: LD_VAR 0 4
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: LD_INT 15
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: IN
38853: PUSH
38854: LD_EXP 58
38858: PUSH
38859: LD_VAR 0 1
38863: ARRAY
38864: AND
38865: IFFALSE 39021
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
38867: LD_ADDR_VAR 0 9
38871: PUSH
38872: LD_EXP 58
38876: PUSH
38877: LD_VAR 0 1
38881: ARRAY
38882: PUSH
38883: LD_INT 1
38885: ARRAY
38886: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
38887: LD_VAR 0 9
38891: PUSH
38892: LD_EXP 59
38896: PUSH
38897: LD_VAR 0 1
38901: ARRAY
38902: IN
38903: NOT
38904: IFFALSE 39019
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
38906: LD_ADDR_EXP 59
38910: PUSH
38911: LD_EXP 59
38915: PPUSH
38916: LD_VAR 0 1
38920: PUSH
38921: LD_EXP 59
38925: PUSH
38926: LD_VAR 0 1
38930: ARRAY
38931: PUSH
38932: LD_INT 1
38934: PLUS
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PPUSH
38940: LD_VAR 0 9
38944: PPUSH
38945: CALL 52657 0 3
38949: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
38950: LD_ADDR_EXP 58
38954: PUSH
38955: LD_EXP 58
38959: PPUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: LD_EXP 58
38969: PUSH
38970: LD_VAR 0 1
38974: ARRAY
38975: PUSH
38976: LD_VAR 0 9
38980: DIFF
38981: PPUSH
38982: CALL_OW 1
38986: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
38987: LD_VAR 0 3
38991: PPUSH
38992: LD_EXP 59
38996: PUSH
38997: LD_VAR 0 1
39001: ARRAY
39002: PUSH
39003: LD_EXP 59
39007: PUSH
39008: LD_VAR 0 1
39012: ARRAY
39013: ARRAY
39014: PPUSH
39015: CALL_OW 120
// end ; exit ;
39019: GO 39340
// end ; if tmp > 1 then
39021: LD_VAR 0 8
39025: PUSH
39026: LD_INT 1
39028: GREATER
39029: IFFALSE 39133
// for i = 2 to tmp do
39031: LD_ADDR_VAR 0 6
39035: PUSH
39036: DOUBLE
39037: LD_INT 2
39039: DEC
39040: ST_TO_ADDR
39041: LD_VAR 0 8
39045: PUSH
39046: FOR_TO
39047: IFFALSE 39131
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
39049: LD_VAR 0 8
39053: PUSH
39054: LD_VAR 0 6
39058: ARRAY
39059: PPUSH
39060: CALL_OW 461
39064: PUSH
39065: LD_INT 6
39067: EQUAL
39068: IFFALSE 39129
// begin x := tmp [ i ] ;
39070: LD_ADDR_VAR 0 9
39074: PUSH
39075: LD_VAR 0 8
39079: PUSH
39080: LD_VAR 0 6
39084: ARRAY
39085: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
39086: LD_ADDR_VAR 0 8
39090: PUSH
39091: LD_VAR 0 8
39095: PPUSH
39096: LD_VAR 0 6
39100: PPUSH
39101: CALL_OW 3
39105: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
39106: LD_ADDR_VAR 0 8
39110: PUSH
39111: LD_VAR 0 8
39115: PPUSH
39116: LD_INT 1
39118: PPUSH
39119: LD_VAR 0 9
39123: PPUSH
39124: CALL_OW 2
39128: ST_TO_ADDR
// end ;
39129: GO 39046
39131: POP
39132: POP
// for i in tmp do
39133: LD_ADDR_VAR 0 6
39137: PUSH
39138: LD_VAR 0 8
39142: PUSH
39143: FOR_IN
39144: IFFALSE 39213
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
39146: LD_VAR 0 6
39150: PPUSH
39151: CALL_OW 313
39155: PUSH
39156: LD_INT 6
39158: LESS
39159: PUSH
39160: LD_VAR 0 6
39164: PPUSH
39165: CALL_OW 266
39169: PUSH
39170: LD_INT 31
39172: PUSH
39173: LD_INT 32
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: IN
39180: NOT
39181: AND
39182: PUSH
39183: LD_VAR 0 6
39187: PPUSH
39188: CALL_OW 313
39192: PUSH
39193: LD_INT 0
39195: EQUAL
39196: OR
39197: IFFALSE 39211
// begin j := i ;
39199: LD_ADDR_VAR 0 7
39203: PUSH
39204: LD_VAR 0 6
39208: ST_TO_ADDR
// break ;
39209: GO 39213
// end ; end ;
39211: GO 39143
39213: POP
39214: POP
// if j then
39215: LD_VAR 0 7
39219: IFFALSE 39237
// ComEnterUnit ( unit , j ) else
39221: LD_VAR 0 3
39225: PPUSH
39226: LD_VAR 0 7
39230: PPUSH
39231: CALL_OW 120
39235: GO 39340
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39237: LD_ADDR_VAR 0 10
39241: PUSH
39242: LD_VAR 0 2
39246: PPUSH
39247: LD_INT 2
39249: PUSH
39250: LD_INT 30
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 30
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: PPUSH
39275: CALL_OW 72
39279: ST_TO_ADDR
// if depot then
39280: LD_VAR 0 10
39284: IFFALSE 39340
// begin depot := NearestUnitToUnit ( depot , unit ) ;
39286: LD_ADDR_VAR 0 10
39290: PUSH
39291: LD_VAR 0 10
39295: PPUSH
39296: LD_VAR 0 3
39300: PPUSH
39301: CALL_OW 74
39305: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
39306: LD_VAR 0 3
39310: PPUSH
39311: LD_VAR 0 10
39315: PPUSH
39316: CALL_OW 296
39320: PUSH
39321: LD_INT 10
39323: GREATER
39324: IFFALSE 39340
// ComStandNearbyBuilding ( unit , depot ) ;
39326: LD_VAR 0 3
39330: PPUSH
39331: LD_VAR 0 10
39335: PPUSH
39336: CALL 47334 0 2
// end ; end ; end ;
39340: LD_VAR 0 5
39344: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
39345: LD_INT 0
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
// if not mc_bases then
39351: LD_EXP 49
39355: NOT
39356: IFFALSE 39360
// exit ;
39358: GO 39599
// for i = 1 to mc_bases do
39360: LD_ADDR_VAR 0 2
39364: PUSH
39365: DOUBLE
39366: LD_INT 1
39368: DEC
39369: ST_TO_ADDR
39370: LD_EXP 49
39374: PUSH
39375: FOR_TO
39376: IFFALSE 39597
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
39378: LD_ADDR_VAR 0 4
39382: PUSH
39383: LD_EXP 49
39387: PUSH
39388: LD_VAR 0 2
39392: ARRAY
39393: PPUSH
39394: LD_INT 21
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PPUSH
39404: CALL_OW 72
39408: PUSH
39409: LD_EXP 78
39413: PUSH
39414: LD_VAR 0 2
39418: ARRAY
39419: UNION
39420: ST_TO_ADDR
// if not tmp then
39421: LD_VAR 0 4
39425: NOT
39426: IFFALSE 39430
// continue ;
39428: GO 39375
// for j in tmp do
39430: LD_ADDR_VAR 0 3
39434: PUSH
39435: LD_VAR 0 4
39439: PUSH
39440: FOR_IN
39441: IFFALSE 39593
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
39443: LD_VAR 0 3
39447: PPUSH
39448: CALL_OW 110
39452: NOT
39453: PUSH
39454: LD_VAR 0 3
39458: PPUSH
39459: CALL_OW 314
39463: NOT
39464: AND
39465: PUSH
39466: LD_VAR 0 3
39470: PPUSH
39471: CALL_OW 311
39475: NOT
39476: AND
39477: PUSH
39478: LD_VAR 0 3
39482: PPUSH
39483: CALL_OW 310
39487: NOT
39488: AND
39489: PUSH
39490: LD_VAR 0 3
39494: PUSH
39495: LD_EXP 52
39499: PUSH
39500: LD_VAR 0 2
39504: ARRAY
39505: PUSH
39506: LD_INT 1
39508: ARRAY
39509: IN
39510: NOT
39511: AND
39512: PUSH
39513: LD_VAR 0 3
39517: PUSH
39518: LD_EXP 52
39522: PUSH
39523: LD_VAR 0 2
39527: ARRAY
39528: PUSH
39529: LD_INT 2
39531: ARRAY
39532: IN
39533: NOT
39534: AND
39535: PUSH
39536: LD_VAR 0 3
39540: PUSH
39541: LD_EXP 61
39545: PUSH
39546: LD_VAR 0 2
39550: ARRAY
39551: IN
39552: NOT
39553: AND
39554: IFFALSE 39591
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
39556: LD_VAR 0 2
39560: PPUSH
39561: LD_EXP 49
39565: PUSH
39566: LD_VAR 0 2
39570: ARRAY
39571: PPUSH
39572: LD_VAR 0 3
39576: PPUSH
39577: LD_VAR 0 3
39581: PPUSH
39582: CALL_OW 257
39586: PPUSH
39587: CALL 38363 0 4
// end ;
39591: GO 39440
39593: POP
39594: POP
// end ;
39595: GO 39375
39597: POP
39598: POP
// end ;
39599: LD_VAR 0 1
39603: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
39604: LD_INT 0
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
// if not mc_bases [ base ] then
39612: LD_EXP 49
39616: PUSH
39617: LD_VAR 0 1
39621: ARRAY
39622: NOT
39623: IFFALSE 39627
// exit ;
39625: GO 39809
// tmp := [ ] ;
39627: LD_ADDR_VAR 0 6
39631: PUSH
39632: EMPTY
39633: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
39634: LD_ADDR_VAR 0 7
39638: PUSH
39639: LD_VAR 0 3
39643: PPUSH
39644: LD_INT 0
39646: PPUSH
39647: CALL_OW 517
39651: ST_TO_ADDR
// if not list then
39652: LD_VAR 0 7
39656: NOT
39657: IFFALSE 39661
// exit ;
39659: GO 39809
// for i = 1 to amount do
39661: LD_ADDR_VAR 0 5
39665: PUSH
39666: DOUBLE
39667: LD_INT 1
39669: DEC
39670: ST_TO_ADDR
39671: LD_VAR 0 2
39675: PUSH
39676: FOR_TO
39677: IFFALSE 39757
// begin x := rand ( 1 , list [ 1 ] ) ;
39679: LD_ADDR_VAR 0 8
39683: PUSH
39684: LD_INT 1
39686: PPUSH
39687: LD_VAR 0 7
39691: PUSH
39692: LD_INT 1
39694: ARRAY
39695: PPUSH
39696: CALL_OW 12
39700: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
39701: LD_ADDR_VAR 0 6
39705: PUSH
39706: LD_VAR 0 6
39710: PPUSH
39711: LD_VAR 0 5
39715: PPUSH
39716: LD_VAR 0 7
39720: PUSH
39721: LD_INT 1
39723: ARRAY
39724: PUSH
39725: LD_VAR 0 8
39729: ARRAY
39730: PUSH
39731: LD_VAR 0 7
39735: PUSH
39736: LD_INT 2
39738: ARRAY
39739: PUSH
39740: LD_VAR 0 8
39744: ARRAY
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PPUSH
39750: CALL_OW 1
39754: ST_TO_ADDR
// end ;
39755: GO 39676
39757: POP
39758: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
39759: LD_ADDR_EXP 62
39763: PUSH
39764: LD_EXP 62
39768: PPUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: LD_VAR 0 6
39778: PPUSH
39779: CALL_OW 1
39783: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
39784: LD_ADDR_EXP 64
39788: PUSH
39789: LD_EXP 64
39793: PPUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: LD_VAR 0 3
39803: PPUSH
39804: CALL_OW 1
39808: ST_TO_ADDR
// end ;
39809: LD_VAR 0 4
39813: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
39814: LD_INT 0
39816: PPUSH
// if not mc_bases [ base ] then
39817: LD_EXP 49
39821: PUSH
39822: LD_VAR 0 1
39826: ARRAY
39827: NOT
39828: IFFALSE 39832
// exit ;
39830: GO 39857
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
39832: LD_ADDR_EXP 54
39836: PUSH
39837: LD_EXP 54
39841: PPUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: LD_VAR 0 2
39851: PPUSH
39852: CALL_OW 1
39856: ST_TO_ADDR
// end ;
39857: LD_VAR 0 3
39861: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
39862: LD_INT 0
39864: PPUSH
// if not mc_bases [ base ] then
39865: LD_EXP 49
39869: PUSH
39870: LD_VAR 0 1
39874: ARRAY
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 39917
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
39880: LD_ADDR_EXP 54
39884: PUSH
39885: LD_EXP 54
39889: PPUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: LD_EXP 54
39899: PUSH
39900: LD_VAR 0 1
39904: ARRAY
39905: PUSH
39906: LD_VAR 0 2
39910: UNION
39911: PPUSH
39912: CALL_OW 1
39916: ST_TO_ADDR
// end ;
39917: LD_VAR 0 3
39921: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
39922: LD_INT 0
39924: PPUSH
// if not mc_bases [ base ] then
39925: LD_EXP 49
39929: PUSH
39930: LD_VAR 0 1
39934: ARRAY
39935: NOT
39936: IFFALSE 39940
// exit ;
39938: GO 39965
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
39940: LD_ADDR_EXP 70
39944: PUSH
39945: LD_EXP 70
39949: PPUSH
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_VAR 0 2
39959: PPUSH
39960: CALL_OW 1
39964: ST_TO_ADDR
// end ;
39965: LD_VAR 0 3
39969: RET
// export function MC_InsertProduceList ( base , components ) ; begin
39970: LD_INT 0
39972: PPUSH
// if not mc_bases [ base ] then
39973: LD_EXP 49
39977: PUSH
39978: LD_VAR 0 1
39982: ARRAY
39983: NOT
39984: IFFALSE 39988
// exit ;
39986: GO 40025
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
39988: LD_ADDR_EXP 70
39992: PUSH
39993: LD_EXP 70
39997: PPUSH
39998: LD_VAR 0 1
40002: PPUSH
40003: LD_EXP 70
40007: PUSH
40008: LD_VAR 0 1
40012: ARRAY
40013: PUSH
40014: LD_VAR 0 2
40018: ADD
40019: PPUSH
40020: CALL_OW 1
40024: ST_TO_ADDR
// end ;
40025: LD_VAR 0 3
40029: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
40030: LD_INT 0
40032: PPUSH
// if not mc_bases [ base ] then
40033: LD_EXP 49
40037: PUSH
40038: LD_VAR 0 1
40042: ARRAY
40043: NOT
40044: IFFALSE 40048
// exit ;
40046: GO 40102
// mc_defender := Replace ( mc_defender , base , deflist ) ;
40048: LD_ADDR_EXP 71
40052: PUSH
40053: LD_EXP 71
40057: PPUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: LD_VAR 0 2
40067: PPUSH
40068: CALL_OW 1
40072: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
40073: LD_ADDR_EXP 60
40077: PUSH
40078: LD_EXP 60
40082: PPUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: LD_VAR 0 2
40092: PUSH
40093: LD_INT 0
40095: PLUS
40096: PPUSH
40097: CALL_OW 1
40101: ST_TO_ADDR
// end ;
40102: LD_VAR 0 3
40106: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
40107: LD_INT 0
40109: PPUSH
// if not mc_bases [ base ] then
40110: LD_EXP 49
40114: PUSH
40115: LD_VAR 0 1
40119: ARRAY
40120: NOT
40121: IFFALSE 40125
// exit ;
40123: GO 40150
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
40125: LD_ADDR_EXP 60
40129: PUSH
40130: LD_EXP 60
40134: PPUSH
40135: LD_VAR 0 1
40139: PPUSH
40140: LD_VAR 0 2
40144: PPUSH
40145: CALL_OW 1
40149: ST_TO_ADDR
// end ;
40150: LD_VAR 0 3
40154: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
40155: LD_INT 0
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
// if not mc_bases [ base ] then
40161: LD_EXP 49
40165: PUSH
40166: LD_VAR 0 1
40170: ARRAY
40171: NOT
40172: IFFALSE 40176
// exit ;
40174: GO 40241
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
40176: LD_ADDR_EXP 69
40180: PUSH
40181: LD_EXP 69
40185: PPUSH
40186: LD_VAR 0 1
40190: PUSH
40191: LD_EXP 69
40195: PUSH
40196: LD_VAR 0 1
40200: ARRAY
40201: PUSH
40202: LD_INT 1
40204: PLUS
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PPUSH
40210: LD_VAR 0 1
40214: PUSH
40215: LD_VAR 0 2
40219: PUSH
40220: LD_VAR 0 3
40224: PUSH
40225: LD_VAR 0 4
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: PPUSH
40236: CALL 52657 0 3
40240: ST_TO_ADDR
// end ;
40241: LD_VAR 0 5
40245: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
40246: LD_INT 0
40248: PPUSH
// if not mc_bases [ base ] then
40249: LD_EXP 49
40253: PUSH
40254: LD_VAR 0 1
40258: ARRAY
40259: NOT
40260: IFFALSE 40264
// exit ;
40262: GO 40289
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
40264: LD_ADDR_EXP 86
40268: PUSH
40269: LD_EXP 86
40273: PPUSH
40274: LD_VAR 0 1
40278: PPUSH
40279: LD_VAR 0 2
40283: PPUSH
40284: CALL_OW 1
40288: ST_TO_ADDR
// end ;
40289: LD_VAR 0 3
40293: RET
// export function MC_GetMinesField ( base ) ; begin
40294: LD_INT 0
40296: PPUSH
// result := mc_mines [ base ] ;
40297: LD_ADDR_VAR 0 2
40301: PUSH
40302: LD_EXP 62
40306: PUSH
40307: LD_VAR 0 1
40311: ARRAY
40312: ST_TO_ADDR
// end ;
40313: LD_VAR 0 2
40317: RET
// export function MC_GetProduceList ( base ) ; begin
40318: LD_INT 0
40320: PPUSH
// result := mc_produce [ base ] ;
40321: LD_ADDR_VAR 0 2
40325: PUSH
40326: LD_EXP 70
40330: PUSH
40331: LD_VAR 0 1
40335: ARRAY
40336: ST_TO_ADDR
// end ;
40337: LD_VAR 0 2
40341: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
40342: LD_INT 0
40344: PPUSH
40345: PPUSH
// if not mc_bases then
40346: LD_EXP 49
40350: NOT
40351: IFFALSE 40355
// exit ;
40353: GO 40420
// if mc_bases [ base ] then
40355: LD_EXP 49
40359: PUSH
40360: LD_VAR 0 1
40364: ARRAY
40365: IFFALSE 40420
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40367: LD_ADDR_VAR 0 3
40371: PUSH
40372: LD_EXP 49
40376: PUSH
40377: LD_VAR 0 1
40381: ARRAY
40382: PPUSH
40383: LD_INT 30
40385: PUSH
40386: LD_VAR 0 2
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PPUSH
40395: CALL_OW 72
40399: ST_TO_ADDR
// if result then
40400: LD_VAR 0 3
40404: IFFALSE 40420
// result := result [ 1 ] ;
40406: LD_ADDR_VAR 0 3
40410: PUSH
40411: LD_VAR 0 3
40415: PUSH
40416: LD_INT 1
40418: ARRAY
40419: ST_TO_ADDR
// end ; end ;
40420: LD_VAR 0 3
40424: RET
// export function MC_SetTame ( base , area ) ; begin
40425: LD_INT 0
40427: PPUSH
// if not mc_bases or not base then
40428: LD_EXP 49
40432: NOT
40433: PUSH
40434: LD_VAR 0 1
40438: NOT
40439: OR
40440: IFFALSE 40444
// exit ;
40442: GO 40469
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
40444: LD_ADDR_EXP 77
40448: PUSH
40449: LD_EXP 77
40453: PPUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: LD_VAR 0 2
40463: PPUSH
40464: CALL_OW 1
40468: ST_TO_ADDR
// end ;
40469: LD_VAR 0 3
40473: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
40474: LD_INT 0
40476: PPUSH
40477: PPUSH
// if not mc_bases or not base then
40478: LD_EXP 49
40482: NOT
40483: PUSH
40484: LD_VAR 0 1
40488: NOT
40489: OR
40490: IFFALSE 40494
// exit ;
40492: GO 40596
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40494: LD_ADDR_VAR 0 4
40498: PUSH
40499: LD_EXP 49
40503: PUSH
40504: LD_VAR 0 1
40508: ARRAY
40509: PPUSH
40510: LD_INT 30
40512: PUSH
40513: LD_VAR 0 2
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PPUSH
40522: CALL_OW 72
40526: ST_TO_ADDR
// if not tmp then
40527: LD_VAR 0 4
40531: NOT
40532: IFFALSE 40536
// exit ;
40534: GO 40596
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
40536: LD_ADDR_EXP 81
40540: PUSH
40541: LD_EXP 81
40545: PPUSH
40546: LD_VAR 0 1
40550: PPUSH
40551: LD_EXP 81
40555: PUSH
40556: LD_VAR 0 1
40560: ARRAY
40561: PPUSH
40562: LD_EXP 81
40566: PUSH
40567: LD_VAR 0 1
40571: ARRAY
40572: PUSH
40573: LD_INT 1
40575: PLUS
40576: PPUSH
40577: LD_VAR 0 4
40581: PUSH
40582: LD_INT 1
40584: ARRAY
40585: PPUSH
40586: CALL_OW 2
40590: PPUSH
40591: CALL_OW 1
40595: ST_TO_ADDR
// end ;
40596: LD_VAR 0 3
40600: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
40601: LD_INT 0
40603: PPUSH
40604: PPUSH
// if not mc_bases or not base or not kinds then
40605: LD_EXP 49
40609: NOT
40610: PUSH
40611: LD_VAR 0 1
40615: NOT
40616: OR
40617: PUSH
40618: LD_VAR 0 2
40622: NOT
40623: OR
40624: IFFALSE 40628
// exit ;
40626: GO 40689
// for i in kinds do
40628: LD_ADDR_VAR 0 4
40632: PUSH
40633: LD_VAR 0 2
40637: PUSH
40638: FOR_IN
40639: IFFALSE 40687
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
40641: LD_ADDR_EXP 83
40645: PUSH
40646: LD_EXP 83
40650: PPUSH
40651: LD_VAR 0 1
40655: PUSH
40656: LD_EXP 83
40660: PUSH
40661: LD_VAR 0 1
40665: ARRAY
40666: PUSH
40667: LD_INT 1
40669: PLUS
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PPUSH
40675: LD_VAR 0 4
40679: PPUSH
40680: CALL 52657 0 3
40684: ST_TO_ADDR
40685: GO 40638
40687: POP
40688: POP
// end ;
40689: LD_VAR 0 3
40693: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
40694: LD_INT 0
40696: PPUSH
// if not mc_bases or not base or not areas then
40697: LD_EXP 49
40701: NOT
40702: PUSH
40703: LD_VAR 0 1
40707: NOT
40708: OR
40709: PUSH
40710: LD_VAR 0 2
40714: NOT
40715: OR
40716: IFFALSE 40720
// exit ;
40718: GO 40745
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
40720: LD_ADDR_EXP 67
40724: PUSH
40725: LD_EXP 67
40729: PPUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: CALL_OW 1
40744: ST_TO_ADDR
// end ;
40745: LD_VAR 0 3
40749: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
40750: LD_INT 0
40752: PPUSH
// if not mc_bases or not base or not teleports_exit then
40753: LD_EXP 49
40757: NOT
40758: PUSH
40759: LD_VAR 0 1
40763: NOT
40764: OR
40765: PUSH
40766: LD_VAR 0 2
40770: NOT
40771: OR
40772: IFFALSE 40776
// exit ;
40774: GO 40801
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
40776: LD_ADDR_EXP 84
40780: PUSH
40781: LD_EXP 84
40785: PPUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: LD_VAR 0 2
40795: PPUSH
40796: CALL_OW 1
40800: ST_TO_ADDR
// end ;
40801: LD_VAR 0 3
40805: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
40806: LD_INT 0
40808: PPUSH
40809: PPUSH
40810: PPUSH
// if not mc_bases or not base or not ext_list then
40811: LD_EXP 49
40815: NOT
40816: PUSH
40817: LD_VAR 0 1
40821: NOT
40822: OR
40823: PUSH
40824: LD_VAR 0 5
40828: NOT
40829: OR
40830: IFFALSE 40834
// exit ;
40832: GO 41007
// tmp := GetFacExtXYD ( x , y , d ) ;
40834: LD_ADDR_VAR 0 8
40838: PUSH
40839: LD_VAR 0 2
40843: PPUSH
40844: LD_VAR 0 3
40848: PPUSH
40849: LD_VAR 0 4
40853: PPUSH
40854: CALL 86011 0 3
40858: ST_TO_ADDR
// if not tmp then
40859: LD_VAR 0 8
40863: NOT
40864: IFFALSE 40868
// exit ;
40866: GO 41007
// for i in tmp do
40868: LD_ADDR_VAR 0 7
40872: PUSH
40873: LD_VAR 0 8
40877: PUSH
40878: FOR_IN
40879: IFFALSE 41005
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
40881: LD_ADDR_EXP 54
40885: PUSH
40886: LD_EXP 54
40890: PPUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: LD_EXP 54
40900: PUSH
40901: LD_VAR 0 1
40905: ARRAY
40906: PPUSH
40907: LD_EXP 54
40911: PUSH
40912: LD_VAR 0 1
40916: ARRAY
40917: PUSH
40918: LD_INT 1
40920: PLUS
40921: PPUSH
40922: LD_VAR 0 5
40926: PUSH
40927: LD_INT 1
40929: ARRAY
40930: PUSH
40931: LD_VAR 0 7
40935: PUSH
40936: LD_INT 1
40938: ARRAY
40939: PUSH
40940: LD_VAR 0 7
40944: PUSH
40945: LD_INT 2
40947: ARRAY
40948: PUSH
40949: LD_VAR 0 7
40953: PUSH
40954: LD_INT 3
40956: ARRAY
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: PPUSH
40964: CALL_OW 2
40968: PPUSH
40969: CALL_OW 1
40973: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
40974: LD_ADDR_VAR 0 5
40978: PUSH
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_INT 1
40986: PPUSH
40987: CALL_OW 3
40991: ST_TO_ADDR
// if not ext_list then
40992: LD_VAR 0 5
40996: NOT
40997: IFFALSE 41003
// exit ;
40999: POP
41000: POP
41001: GO 41007
// end ;
41003: GO 40878
41005: POP
41006: POP
// end ;
41007: LD_VAR 0 6
41011: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
41012: LD_INT 0
41014: PPUSH
// if not mc_bases or not base or not weapon_list then
41015: LD_EXP 49
41019: NOT
41020: PUSH
41021: LD_VAR 0 1
41025: NOT
41026: OR
41027: PUSH
41028: LD_VAR 0 2
41032: NOT
41033: OR
41034: IFFALSE 41038
// exit ;
41036: GO 41063
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
41038: LD_ADDR_EXP 88
41042: PUSH
41043: LD_EXP 88
41047: PPUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: LD_VAR 0 2
41057: PPUSH
41058: CALL_OW 1
41062: ST_TO_ADDR
// end ;
41063: LD_VAR 0 3
41067: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
41068: LD_INT 0
41070: PPUSH
// if not mc_bases or not base or not tech_list then
41071: LD_EXP 49
41075: NOT
41076: PUSH
41077: LD_VAR 0 1
41081: NOT
41082: OR
41083: PUSH
41084: LD_VAR 0 2
41088: NOT
41089: OR
41090: IFFALSE 41094
// exit ;
41092: GO 41119
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
41094: LD_ADDR_EXP 76
41098: PUSH
41099: LD_EXP 76
41103: PPUSH
41104: LD_VAR 0 1
41108: PPUSH
41109: LD_VAR 0 2
41113: PPUSH
41114: CALL_OW 1
41118: ST_TO_ADDR
// end ;
41119: LD_VAR 0 3
41123: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
41124: LD_INT 0
41126: PPUSH
// if not mc_bases or not parking_area or not base then
41127: LD_EXP 49
41131: NOT
41132: PUSH
41133: LD_VAR 0 2
41137: NOT
41138: OR
41139: PUSH
41140: LD_VAR 0 1
41144: NOT
41145: OR
41146: IFFALSE 41150
// exit ;
41148: GO 41175
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
41150: LD_ADDR_EXP 73
41154: PUSH
41155: LD_EXP 73
41159: PPUSH
41160: LD_VAR 0 1
41164: PPUSH
41165: LD_VAR 0 2
41169: PPUSH
41170: CALL_OW 1
41174: ST_TO_ADDR
// end ;
41175: LD_VAR 0 3
41179: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
41180: LD_INT 0
41182: PPUSH
// if not mc_bases or not base or not scan_area then
41183: LD_EXP 49
41187: NOT
41188: PUSH
41189: LD_VAR 0 1
41193: NOT
41194: OR
41195: PUSH
41196: LD_VAR 0 2
41200: NOT
41201: OR
41202: IFFALSE 41206
// exit ;
41204: GO 41231
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
41206: LD_ADDR_EXP 74
41210: PUSH
41211: LD_EXP 74
41215: PPUSH
41216: LD_VAR 0 1
41220: PPUSH
41221: LD_VAR 0 2
41225: PPUSH
41226: CALL_OW 1
41230: ST_TO_ADDR
// end ;
41231: LD_VAR 0 3
41235: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
41236: LD_INT 0
41238: PPUSH
41239: PPUSH
// if not mc_bases or not base then
41240: LD_EXP 49
41244: NOT
41245: PUSH
41246: LD_VAR 0 1
41250: NOT
41251: OR
41252: IFFALSE 41256
// exit ;
41254: GO 41320
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
41256: LD_ADDR_VAR 0 3
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 3
41269: PUSH
41270: LD_INT 4
41272: PUSH
41273: LD_INT 11
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
41283: LD_ADDR_EXP 76
41287: PUSH
41288: LD_EXP 76
41292: PPUSH
41293: LD_VAR 0 1
41297: PPUSH
41298: LD_EXP 76
41302: PUSH
41303: LD_VAR 0 1
41307: ARRAY
41308: PUSH
41309: LD_VAR 0 3
41313: DIFF
41314: PPUSH
41315: CALL_OW 1
41319: ST_TO_ADDR
// end ;
41320: LD_VAR 0 2
41324: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
41325: LD_INT 0
41327: PPUSH
// result := mc_vehicles [ base ] ;
41328: LD_ADDR_VAR 0 3
41332: PUSH
41333: LD_EXP 68
41337: PUSH
41338: LD_VAR 0 1
41342: ARRAY
41343: ST_TO_ADDR
// if onlyCombat then
41344: LD_VAR 0 2
41348: IFFALSE 41513
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
41350: LD_ADDR_VAR 0 3
41354: PUSH
41355: LD_VAR 0 3
41359: PUSH
41360: LD_VAR 0 3
41364: PPUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 34
41370: PUSH
41371: LD_INT 12
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 34
41380: PUSH
41381: LD_INT 51
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 34
41390: PUSH
41391: LD_EXP 93
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 34
41402: PUSH
41403: LD_INT 32
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 34
41412: PUSH
41413: LD_INT 13
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 34
41422: PUSH
41423: LD_INT 52
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 34
41432: PUSH
41433: LD_INT 14
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 34
41442: PUSH
41443: LD_INT 53
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 34
41452: PUSH
41453: LD_EXP 92
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 34
41464: PUSH
41465: LD_INT 31
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 34
41474: PUSH
41475: LD_INT 48
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 34
41484: PUSH
41485: LD_INT 8
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: PPUSH
41507: CALL_OW 72
41511: DIFF
41512: ST_TO_ADDR
// end ; end_of_file
41513: LD_VAR 0 3
41517: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
41518: LD_INT 0
41520: PPUSH
41521: PPUSH
41522: PPUSH
// if not mc_bases or not skirmish then
41523: LD_EXP 49
41527: NOT
41528: PUSH
41529: LD_EXP 47
41533: NOT
41534: OR
41535: IFFALSE 41539
// exit ;
41537: GO 41704
// for i = 1 to mc_bases do
41539: LD_ADDR_VAR 0 4
41543: PUSH
41544: DOUBLE
41545: LD_INT 1
41547: DEC
41548: ST_TO_ADDR
41549: LD_EXP 49
41553: PUSH
41554: FOR_TO
41555: IFFALSE 41702
// begin if sci in mc_bases [ i ] then
41557: LD_VAR 0 2
41561: PUSH
41562: LD_EXP 49
41566: PUSH
41567: LD_VAR 0 4
41571: ARRAY
41572: IN
41573: IFFALSE 41700
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
41575: LD_ADDR_EXP 78
41579: PUSH
41580: LD_EXP 78
41584: PPUSH
41585: LD_VAR 0 4
41589: PUSH
41590: LD_EXP 78
41594: PUSH
41595: LD_VAR 0 4
41599: ARRAY
41600: PUSH
41601: LD_INT 1
41603: PLUS
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PPUSH
41609: LD_VAR 0 1
41613: PPUSH
41614: CALL 52657 0 3
41618: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
41619: LD_ADDR_VAR 0 5
41623: PUSH
41624: LD_EXP 49
41628: PUSH
41629: LD_VAR 0 4
41633: ARRAY
41634: PPUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 30
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 30
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: PPUSH
41663: CALL_OW 72
41667: PPUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 74
41677: ST_TO_ADDR
// if tmp then
41678: LD_VAR 0 5
41682: IFFALSE 41698
// ComStandNearbyBuilding ( ape , tmp ) ;
41684: LD_VAR 0 1
41688: PPUSH
41689: LD_VAR 0 5
41693: PPUSH
41694: CALL 47334 0 2
// break ;
41698: GO 41702
// end ; end ;
41700: GO 41554
41702: POP
41703: POP
// end ;
41704: LD_VAR 0 3
41708: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
41709: LD_INT 0
41711: PPUSH
41712: PPUSH
41713: PPUSH
// if not mc_bases or not skirmish then
41714: LD_EXP 49
41718: NOT
41719: PUSH
41720: LD_EXP 47
41724: NOT
41725: OR
41726: IFFALSE 41730
// exit ;
41728: GO 41819
// for i = 1 to mc_bases do
41730: LD_ADDR_VAR 0 4
41734: PUSH
41735: DOUBLE
41736: LD_INT 1
41738: DEC
41739: ST_TO_ADDR
41740: LD_EXP 49
41744: PUSH
41745: FOR_TO
41746: IFFALSE 41817
// begin if building in mc_busy_turret_list [ i ] then
41748: LD_VAR 0 1
41752: PUSH
41753: LD_EXP 59
41757: PUSH
41758: LD_VAR 0 4
41762: ARRAY
41763: IN
41764: IFFALSE 41815
// begin tmp := mc_busy_turret_list [ i ] diff building ;
41766: LD_ADDR_VAR 0 5
41770: PUSH
41771: LD_EXP 59
41775: PUSH
41776: LD_VAR 0 4
41780: ARRAY
41781: PUSH
41782: LD_VAR 0 1
41786: DIFF
41787: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
41788: LD_ADDR_EXP 59
41792: PUSH
41793: LD_EXP 59
41797: PPUSH
41798: LD_VAR 0 4
41802: PPUSH
41803: LD_VAR 0 5
41807: PPUSH
41808: CALL_OW 1
41812: ST_TO_ADDR
// break ;
41813: GO 41817
// end ; end ;
41815: GO 41745
41817: POP
41818: POP
// end ;
41819: LD_VAR 0 3
41823: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
41824: LD_INT 0
41826: PPUSH
41827: PPUSH
41828: PPUSH
// if not mc_bases or not skirmish then
41829: LD_EXP 49
41833: NOT
41834: PUSH
41835: LD_EXP 47
41839: NOT
41840: OR
41841: IFFALSE 41845
// exit ;
41843: GO 42044
// for i = 1 to mc_bases do
41845: LD_ADDR_VAR 0 5
41849: PUSH
41850: DOUBLE
41851: LD_INT 1
41853: DEC
41854: ST_TO_ADDR
41855: LD_EXP 49
41859: PUSH
41860: FOR_TO
41861: IFFALSE 42042
// if building in mc_bases [ i ] then
41863: LD_VAR 0 1
41867: PUSH
41868: LD_EXP 49
41872: PUSH
41873: LD_VAR 0 5
41877: ARRAY
41878: IN
41879: IFFALSE 42040
// begin tmp := mc_bases [ i ] diff building ;
41881: LD_ADDR_VAR 0 6
41885: PUSH
41886: LD_EXP 49
41890: PUSH
41891: LD_VAR 0 5
41895: ARRAY
41896: PUSH
41897: LD_VAR 0 1
41901: DIFF
41902: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
41903: LD_ADDR_EXP 49
41907: PUSH
41908: LD_EXP 49
41912: PPUSH
41913: LD_VAR 0 5
41917: PPUSH
41918: LD_VAR 0 6
41922: PPUSH
41923: CALL_OW 1
41927: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
41928: LD_VAR 0 1
41932: PUSH
41933: LD_EXP 57
41937: PUSH
41938: LD_VAR 0 5
41942: ARRAY
41943: IN
41944: IFFALSE 41983
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
41946: LD_ADDR_EXP 57
41950: PUSH
41951: LD_EXP 57
41955: PPUSH
41956: LD_VAR 0 5
41960: PPUSH
41961: LD_EXP 57
41965: PUSH
41966: LD_VAR 0 5
41970: ARRAY
41971: PUSH
41972: LD_VAR 0 1
41976: DIFF
41977: PPUSH
41978: CALL_OW 1
41982: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
41983: LD_VAR 0 1
41987: PUSH
41988: LD_EXP 58
41992: PUSH
41993: LD_VAR 0 5
41997: ARRAY
41998: IN
41999: IFFALSE 42038
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
42001: LD_ADDR_EXP 58
42005: PUSH
42006: LD_EXP 58
42010: PPUSH
42011: LD_VAR 0 5
42015: PPUSH
42016: LD_EXP 58
42020: PUSH
42021: LD_VAR 0 5
42025: ARRAY
42026: PUSH
42027: LD_VAR 0 1
42031: DIFF
42032: PPUSH
42033: CALL_OW 1
42037: ST_TO_ADDR
// break ;
42038: GO 42042
// end ;
42040: GO 41860
42042: POP
42043: POP
// end ;
42044: LD_VAR 0 4
42048: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
42049: LD_INT 0
42051: PPUSH
42052: PPUSH
42053: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
42054: LD_EXP 49
42058: NOT
42059: PUSH
42060: LD_EXP 47
42064: NOT
42065: OR
42066: PUSH
42067: LD_VAR 0 3
42071: PUSH
42072: LD_EXP 75
42076: IN
42077: NOT
42078: OR
42079: IFFALSE 42083
// exit ;
42081: GO 42206
// for i = 1 to mc_vehicles do
42083: LD_ADDR_VAR 0 6
42087: PUSH
42088: DOUBLE
42089: LD_INT 1
42091: DEC
42092: ST_TO_ADDR
42093: LD_EXP 68
42097: PUSH
42098: FOR_TO
42099: IFFALSE 42204
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
42101: LD_VAR 0 2
42105: PUSH
42106: LD_EXP 68
42110: PUSH
42111: LD_VAR 0 6
42115: ARRAY
42116: IN
42117: PUSH
42118: LD_VAR 0 1
42122: PUSH
42123: LD_EXP 68
42127: PUSH
42128: LD_VAR 0 6
42132: ARRAY
42133: IN
42134: OR
42135: IFFALSE 42202
// begin tmp := mc_vehicles [ i ] diff old ;
42137: LD_ADDR_VAR 0 7
42141: PUSH
42142: LD_EXP 68
42146: PUSH
42147: LD_VAR 0 6
42151: ARRAY
42152: PUSH
42153: LD_VAR 0 2
42157: DIFF
42158: ST_TO_ADDR
// tmp := tmp diff new ;
42159: LD_ADDR_VAR 0 7
42163: PUSH
42164: LD_VAR 0 7
42168: PUSH
42169: LD_VAR 0 1
42173: DIFF
42174: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
42175: LD_ADDR_EXP 68
42179: PUSH
42180: LD_EXP 68
42184: PPUSH
42185: LD_VAR 0 6
42189: PPUSH
42190: LD_VAR 0 7
42194: PPUSH
42195: CALL_OW 1
42199: ST_TO_ADDR
// break ;
42200: GO 42204
// end ;
42202: GO 42098
42204: POP
42205: POP
// end ;
42206: LD_VAR 0 5
42210: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
42211: LD_INT 0
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
// if not mc_bases or not skirmish then
42217: LD_EXP 49
42221: NOT
42222: PUSH
42223: LD_EXP 47
42227: NOT
42228: OR
42229: IFFALSE 42233
// exit ;
42231: GO 42616
// side := GetSide ( vehicle ) ;
42233: LD_ADDR_VAR 0 5
42237: PUSH
42238: LD_VAR 0 1
42242: PPUSH
42243: CALL_OW 255
42247: ST_TO_ADDR
// for i = 1 to mc_bases do
42248: LD_ADDR_VAR 0 4
42252: PUSH
42253: DOUBLE
42254: LD_INT 1
42256: DEC
42257: ST_TO_ADDR
42258: LD_EXP 49
42262: PUSH
42263: FOR_TO
42264: IFFALSE 42614
// begin if factory in mc_bases [ i ] then
42266: LD_VAR 0 2
42270: PUSH
42271: LD_EXP 49
42275: PUSH
42276: LD_VAR 0 4
42280: ARRAY
42281: IN
42282: IFFALSE 42612
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
42284: LD_EXP 71
42288: PUSH
42289: LD_VAR 0 4
42293: ARRAY
42294: PUSH
42295: LD_EXP 60
42299: PUSH
42300: LD_VAR 0 4
42304: ARRAY
42305: LESS
42306: PUSH
42307: LD_VAR 0 1
42311: PPUSH
42312: CALL_OW 264
42316: PUSH
42317: LD_INT 31
42319: PUSH
42320: LD_INT 32
42322: PUSH
42323: LD_INT 51
42325: PUSH
42326: LD_EXP 93
42330: PUSH
42331: LD_INT 12
42333: PUSH
42334: LD_INT 30
42336: PUSH
42337: LD_EXP 92
42341: PUSH
42342: LD_INT 11
42344: PUSH
42345: LD_INT 53
42347: PUSH
42348: LD_INT 14
42350: PUSH
42351: LD_EXP 96
42355: PUSH
42356: LD_INT 29
42358: PUSH
42359: LD_EXP 94
42363: PUSH
42364: LD_INT 13
42366: PUSH
42367: LD_INT 52
42369: PUSH
42370: LD_INT 48
42372: PUSH
42373: LD_INT 8
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: IN
42395: NOT
42396: AND
42397: IFFALSE 42438
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
42399: LD_ADDR_EXP 71
42403: PUSH
42404: LD_EXP 71
42408: PPUSH
42409: LD_VAR 0 4
42413: PPUSH
42414: LD_EXP 71
42418: PUSH
42419: LD_VAR 0 4
42423: ARRAY
42424: PUSH
42425: LD_VAR 0 1
42429: ADD
42430: PPUSH
42431: CALL_OW 1
42435: ST_TO_ADDR
42436: GO 42482
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
42438: LD_ADDR_EXP 68
42442: PUSH
42443: LD_EXP 68
42447: PPUSH
42448: LD_VAR 0 4
42452: PUSH
42453: LD_EXP 68
42457: PUSH
42458: LD_VAR 0 4
42462: ARRAY
42463: PUSH
42464: LD_INT 1
42466: PLUS
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PPUSH
42472: LD_VAR 0 1
42476: PPUSH
42477: CALL 52657 0 3
42481: ST_TO_ADDR
// if not mc_scan [ i ] then
42482: LD_EXP 72
42486: PUSH
42487: LD_VAR 0 4
42491: ARRAY
42492: NOT
42493: IFFALSE 42612
// begin if GetControl ( vehicle ) = control_remote then
42495: LD_VAR 0 1
42499: PPUSH
42500: CALL_OW 263
42504: PUSH
42505: LD_INT 2
42507: EQUAL
42508: IFFALSE 42528
// repeat wait ( 0 0$1 ) ;
42510: LD_INT 35
42512: PPUSH
42513: CALL_OW 67
// until IsControledBy ( vehicle ) ;
42517: LD_VAR 0 1
42521: PPUSH
42522: CALL_OW 312
42526: IFFALSE 42510
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
42528: LD_VAR 0 1
42532: PPUSH
42533: LD_EXP 73
42537: PUSH
42538: LD_VAR 0 4
42542: ARRAY
42543: PPUSH
42544: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 263
42557: PUSH
42558: LD_INT 1
42560: NONEQUAL
42561: IFFALSE 42565
// break ;
42563: GO 42614
// repeat wait ( 0 0$1 ) ;
42565: LD_INT 35
42567: PPUSH
42568: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
42572: LD_VAR 0 1
42576: PPUSH
42577: LD_EXP 73
42581: PUSH
42582: LD_VAR 0 4
42586: ARRAY
42587: PPUSH
42588: CALL_OW 308
42592: IFFALSE 42565
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
42594: LD_VAR 0 1
42598: PPUSH
42599: CALL_OW 311
42603: PPUSH
42604: CALL_OW 121
// exit ;
42608: POP
42609: POP
42610: GO 42616
// end ; end ; end ;
42612: GO 42263
42614: POP
42615: POP
// end ;
42616: LD_VAR 0 3
42620: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
42621: LD_INT 0
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
// if not mc_bases or not skirmish then
42627: LD_EXP 49
42631: NOT
42632: PUSH
42633: LD_EXP 47
42637: NOT
42638: OR
42639: IFFALSE 42643
// exit ;
42641: GO 42996
// repeat wait ( 0 0$1 ) ;
42643: LD_INT 35
42645: PPUSH
42646: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
42650: LD_VAR 0 2
42654: PPUSH
42655: LD_VAR 0 3
42659: PPUSH
42660: CALL_OW 284
42664: IFFALSE 42643
// if GetResourceTypeXY ( x , y ) = mat_artefact then
42666: LD_VAR 0 2
42670: PPUSH
42671: LD_VAR 0 3
42675: PPUSH
42676: CALL_OW 283
42680: PUSH
42681: LD_INT 4
42683: EQUAL
42684: IFFALSE 42688
// exit ;
42686: GO 42996
// for i = 1 to mc_bases do
42688: LD_ADDR_VAR 0 7
42692: PUSH
42693: DOUBLE
42694: LD_INT 1
42696: DEC
42697: ST_TO_ADDR
42698: LD_EXP 49
42702: PUSH
42703: FOR_TO
42704: IFFALSE 42994
// begin if mc_crates_area [ i ] then
42706: LD_EXP 67
42710: PUSH
42711: LD_VAR 0 7
42715: ARRAY
42716: IFFALSE 42827
// for j in mc_crates_area [ i ] do
42718: LD_ADDR_VAR 0 8
42722: PUSH
42723: LD_EXP 67
42727: PUSH
42728: LD_VAR 0 7
42732: ARRAY
42733: PUSH
42734: FOR_IN
42735: IFFALSE 42825
// if InArea ( x , y , j ) then
42737: LD_VAR 0 2
42741: PPUSH
42742: LD_VAR 0 3
42746: PPUSH
42747: LD_VAR 0 8
42751: PPUSH
42752: CALL_OW 309
42756: IFFALSE 42823
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
42758: LD_ADDR_EXP 65
42762: PUSH
42763: LD_EXP 65
42767: PPUSH
42768: LD_VAR 0 7
42772: PUSH
42773: LD_EXP 65
42777: PUSH
42778: LD_VAR 0 7
42782: ARRAY
42783: PUSH
42784: LD_INT 1
42786: PLUS
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PPUSH
42792: LD_VAR 0 4
42796: PUSH
42797: LD_VAR 0 2
42801: PUSH
42802: LD_VAR 0 3
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: PPUSH
42812: CALL 52657 0 3
42816: ST_TO_ADDR
// exit ;
42817: POP
42818: POP
42819: POP
42820: POP
42821: GO 42996
// end ;
42823: GO 42734
42825: POP
42826: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
42827: LD_ADDR_VAR 0 9
42831: PUSH
42832: LD_EXP 49
42836: PUSH
42837: LD_VAR 0 7
42841: ARRAY
42842: PPUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 30
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 30
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: PPUSH
42871: CALL_OW 72
42875: ST_TO_ADDR
// if not depot then
42876: LD_VAR 0 9
42880: NOT
42881: IFFALSE 42885
// continue ;
42883: GO 42703
// for j in depot do
42885: LD_ADDR_VAR 0 8
42889: PUSH
42890: LD_VAR 0 9
42894: PUSH
42895: FOR_IN
42896: IFFALSE 42990
// if GetDistUnitXY ( j , x , y ) < 30 then
42898: LD_VAR 0 8
42902: PPUSH
42903: LD_VAR 0 2
42907: PPUSH
42908: LD_VAR 0 3
42912: PPUSH
42913: CALL_OW 297
42917: PUSH
42918: LD_INT 30
42920: LESS
42921: IFFALSE 42988
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
42923: LD_ADDR_EXP 65
42927: PUSH
42928: LD_EXP 65
42932: PPUSH
42933: LD_VAR 0 7
42937: PUSH
42938: LD_EXP 65
42942: PUSH
42943: LD_VAR 0 7
42947: ARRAY
42948: PUSH
42949: LD_INT 1
42951: PLUS
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PPUSH
42957: LD_VAR 0 4
42961: PUSH
42962: LD_VAR 0 2
42966: PUSH
42967: LD_VAR 0 3
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: PPUSH
42977: CALL 52657 0 3
42981: ST_TO_ADDR
// exit ;
42982: POP
42983: POP
42984: POP
42985: POP
42986: GO 42996
// end ;
42988: GO 42895
42990: POP
42991: POP
// end ;
42992: GO 42703
42994: POP
42995: POP
// end ;
42996: LD_VAR 0 6
43000: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
43001: LD_INT 0
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
// if not mc_bases or not skirmish then
43007: LD_EXP 49
43011: NOT
43012: PUSH
43013: LD_EXP 47
43017: NOT
43018: OR
43019: IFFALSE 43023
// exit ;
43021: GO 43300
// side := GetSide ( lab ) ;
43023: LD_ADDR_VAR 0 4
43027: PUSH
43028: LD_VAR 0 2
43032: PPUSH
43033: CALL_OW 255
43037: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
43038: LD_VAR 0 4
43042: PUSH
43043: LD_EXP 75
43047: IN
43048: NOT
43049: PUSH
43050: LD_EXP 76
43054: NOT
43055: OR
43056: PUSH
43057: LD_EXP 49
43061: NOT
43062: OR
43063: IFFALSE 43067
// exit ;
43065: GO 43300
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
43067: LD_ADDR_EXP 76
43071: PUSH
43072: LD_EXP 76
43076: PPUSH
43077: LD_VAR 0 4
43081: PPUSH
43082: LD_EXP 76
43086: PUSH
43087: LD_VAR 0 4
43091: ARRAY
43092: PUSH
43093: LD_VAR 0 1
43097: DIFF
43098: PPUSH
43099: CALL_OW 1
43103: ST_TO_ADDR
// for i = 1 to mc_bases do
43104: LD_ADDR_VAR 0 5
43108: PUSH
43109: DOUBLE
43110: LD_INT 1
43112: DEC
43113: ST_TO_ADDR
43114: LD_EXP 49
43118: PUSH
43119: FOR_TO
43120: IFFALSE 43298
// begin if lab in mc_bases [ i ] then
43122: LD_VAR 0 2
43126: PUSH
43127: LD_EXP 49
43131: PUSH
43132: LD_VAR 0 5
43136: ARRAY
43137: IN
43138: IFFALSE 43296
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
43140: LD_VAR 0 1
43144: PUSH
43145: LD_INT 11
43147: PUSH
43148: LD_INT 4
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: IN
43163: PUSH
43164: LD_EXP 79
43168: PUSH
43169: LD_VAR 0 5
43173: ARRAY
43174: AND
43175: IFFALSE 43296
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
43177: LD_ADDR_VAR 0 6
43181: PUSH
43182: LD_EXP 79
43186: PUSH
43187: LD_VAR 0 5
43191: ARRAY
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43197: LD_ADDR_EXP 79
43201: PUSH
43202: LD_EXP 79
43206: PPUSH
43207: LD_VAR 0 5
43211: PPUSH
43212: EMPTY
43213: PPUSH
43214: CALL_OW 1
43218: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
43219: LD_VAR 0 6
43223: PPUSH
43224: LD_INT 0
43226: PPUSH
43227: CALL_OW 109
// ComExitBuilding ( tmp ) ;
43231: LD_VAR 0 6
43235: PPUSH
43236: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
43240: LD_ADDR_EXP 78
43244: PUSH
43245: LD_EXP 78
43249: PPUSH
43250: LD_VAR 0 5
43254: PPUSH
43255: LD_EXP 78
43259: PUSH
43260: LD_VAR 0 5
43264: ARRAY
43265: PPUSH
43266: LD_INT 1
43268: PPUSH
43269: LD_VAR 0 6
43273: PPUSH
43274: CALL_OW 2
43278: PPUSH
43279: CALL_OW 1
43283: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
43284: LD_VAR 0 5
43288: PPUSH
43289: LD_INT 112
43291: PPUSH
43292: CALL 20769 0 2
// end ; end ; end ;
43296: GO 43119
43298: POP
43299: POP
// end ;
43300: LD_VAR 0 3
43304: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
43305: LD_INT 0
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
// if not mc_bases or not skirmish then
43315: LD_EXP 49
43319: NOT
43320: PUSH
43321: LD_EXP 47
43325: NOT
43326: OR
43327: IFFALSE 43331
// exit ;
43329: GO 44347
// for i = 1 to mc_bases do
43331: LD_ADDR_VAR 0 3
43335: PUSH
43336: DOUBLE
43337: LD_INT 1
43339: DEC
43340: ST_TO_ADDR
43341: LD_EXP 49
43345: PUSH
43346: FOR_TO
43347: IFFALSE 44345
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
43349: LD_VAR 0 1
43353: PUSH
43354: LD_EXP 49
43358: PUSH
43359: LD_VAR 0 3
43363: ARRAY
43364: IN
43365: PUSH
43366: LD_VAR 0 1
43370: PUSH
43371: LD_EXP 56
43375: PUSH
43376: LD_VAR 0 3
43380: ARRAY
43381: IN
43382: OR
43383: PUSH
43384: LD_VAR 0 1
43388: PUSH
43389: LD_EXP 68
43393: PUSH
43394: LD_VAR 0 3
43398: ARRAY
43399: IN
43400: OR
43401: PUSH
43402: LD_VAR 0 1
43406: PUSH
43407: LD_EXP 78
43411: PUSH
43412: LD_VAR 0 3
43416: ARRAY
43417: IN
43418: OR
43419: PUSH
43420: LD_VAR 0 1
43424: PUSH
43425: LD_EXP 79
43429: PUSH
43430: LD_VAR 0 3
43434: ARRAY
43435: IN
43436: OR
43437: IFFALSE 44343
// begin if un in mc_ape [ i ] then
43439: LD_VAR 0 1
43443: PUSH
43444: LD_EXP 78
43448: PUSH
43449: LD_VAR 0 3
43453: ARRAY
43454: IN
43455: IFFALSE 43494
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
43457: LD_ADDR_EXP 78
43461: PUSH
43462: LD_EXP 78
43466: PPUSH
43467: LD_VAR 0 3
43471: PPUSH
43472: LD_EXP 78
43476: PUSH
43477: LD_VAR 0 3
43481: ARRAY
43482: PUSH
43483: LD_VAR 0 1
43487: DIFF
43488: PPUSH
43489: CALL_OW 1
43493: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
43494: LD_VAR 0 1
43498: PUSH
43499: LD_EXP 79
43503: PUSH
43504: LD_VAR 0 3
43508: ARRAY
43509: IN
43510: IFFALSE 43534
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43512: LD_ADDR_EXP 79
43516: PUSH
43517: LD_EXP 79
43521: PPUSH
43522: LD_VAR 0 3
43526: PPUSH
43527: EMPTY
43528: PPUSH
43529: CALL_OW 1
43533: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
43534: LD_VAR 0 1
43538: PPUSH
43539: CALL_OW 247
43543: PUSH
43544: LD_INT 2
43546: EQUAL
43547: PUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: CALL_OW 110
43557: PUSH
43558: LD_INT 20
43560: EQUAL
43561: PUSH
43562: LD_VAR 0 1
43566: PUSH
43567: LD_EXP 71
43571: PUSH
43572: LD_VAR 0 3
43576: ARRAY
43577: IN
43578: OR
43579: AND
43580: IFFALSE 43683
// begin fac := MC_GetBuilding ( i , b_factory ) ;
43582: LD_ADDR_VAR 0 8
43586: PUSH
43587: LD_VAR 0 3
43591: PPUSH
43592: LD_INT 3
43594: PPUSH
43595: CALL 40342 0 2
43599: ST_TO_ADDR
// if fac then
43600: LD_VAR 0 8
43604: IFFALSE 43683
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
43606: LD_ADDR_VAR 0 9
43610: PUSH
43611: LD_VAR 0 8
43615: PPUSH
43616: LD_VAR 0 1
43620: PPUSH
43621: CALL_OW 265
43625: PPUSH
43626: LD_VAR 0 1
43630: PPUSH
43631: CALL_OW 262
43635: PPUSH
43636: LD_VAR 0 1
43640: PPUSH
43641: CALL_OW 263
43645: PPUSH
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 264
43655: PPUSH
43656: CALL 50257 0 5
43660: ST_TO_ADDR
// if components then
43661: LD_VAR 0 9
43665: IFFALSE 43681
// MC_InsertProduceList ( i , components ) ;
43667: LD_VAR 0 3
43671: PPUSH
43672: LD_VAR 0 9
43676: PPUSH
43677: CALL 39970 0 2
// break ;
43681: GO 44345
// end ; end ; if GetType ( un ) = unit_building then
43683: LD_VAR 0 1
43687: PPUSH
43688: CALL_OW 247
43692: PUSH
43693: LD_INT 3
43695: EQUAL
43696: IFFALSE 44011
// begin btype := GetBType ( un ) ;
43698: LD_ADDR_VAR 0 5
43702: PUSH
43703: LD_VAR 0 1
43707: PPUSH
43708: CALL_OW 266
43712: ST_TO_ADDR
// if btype = b_warehouse then
43713: LD_VAR 0 5
43717: PUSH
43718: LD_INT 1
43720: EQUAL
43721: IFFALSE 43739
// begin btype := b_depot ;
43723: LD_ADDR_VAR 0 5
43727: PUSH
43728: LD_INT 0
43730: ST_TO_ADDR
// pos := 1 ;
43731: LD_ADDR_VAR 0 6
43735: PUSH
43736: LD_INT 1
43738: ST_TO_ADDR
// end ; if btype = b_factory then
43739: LD_VAR 0 5
43743: PUSH
43744: LD_INT 3
43746: EQUAL
43747: IFFALSE 43765
// begin btype := b_workshop ;
43749: LD_ADDR_VAR 0 5
43753: PUSH
43754: LD_INT 2
43756: ST_TO_ADDR
// pos := 1 ;
43757: LD_ADDR_VAR 0 6
43761: PUSH
43762: LD_INT 1
43764: ST_TO_ADDR
// end ; if btype = b_barracks then
43765: LD_VAR 0 5
43769: PUSH
43770: LD_INT 5
43772: EQUAL
43773: IFFALSE 43783
// btype := b_armoury ;
43775: LD_ADDR_VAR 0 5
43779: PUSH
43780: LD_INT 4
43782: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
43783: LD_VAR 0 5
43787: PUSH
43788: LD_INT 7
43790: PUSH
43791: LD_INT 8
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: IN
43798: IFFALSE 43808
// btype := b_lab ;
43800: LD_ADDR_VAR 0 5
43804: PUSH
43805: LD_INT 6
43807: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
43808: LD_ADDR_EXP 54
43812: PUSH
43813: LD_EXP 54
43817: PPUSH
43818: LD_VAR 0 3
43822: PUSH
43823: LD_EXP 54
43827: PUSH
43828: LD_VAR 0 3
43832: ARRAY
43833: PUSH
43834: LD_INT 1
43836: PLUS
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PPUSH
43842: LD_VAR 0 5
43846: PUSH
43847: LD_VAR 0 1
43851: PPUSH
43852: CALL_OW 250
43856: PUSH
43857: LD_VAR 0 1
43861: PPUSH
43862: CALL_OW 251
43866: PUSH
43867: LD_VAR 0 1
43871: PPUSH
43872: CALL_OW 254
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: PPUSH
43883: CALL 52657 0 3
43887: ST_TO_ADDR
// if pos = 1 then
43888: LD_VAR 0 6
43892: PUSH
43893: LD_INT 1
43895: EQUAL
43896: IFFALSE 44011
// begin tmp := mc_build_list [ i ] ;
43898: LD_ADDR_VAR 0 7
43902: PUSH
43903: LD_EXP 54
43907: PUSH
43908: LD_VAR 0 3
43912: ARRAY
43913: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
43914: LD_VAR 0 7
43918: PPUSH
43919: LD_INT 2
43921: PUSH
43922: LD_INT 30
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 30
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: PPUSH
43947: CALL_OW 72
43951: IFFALSE 43961
// pos := 2 ;
43953: LD_ADDR_VAR 0 6
43957: PUSH
43958: LD_INT 2
43960: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
43961: LD_ADDR_VAR 0 7
43965: PUSH
43966: LD_VAR 0 7
43970: PPUSH
43971: LD_VAR 0 6
43975: PPUSH
43976: LD_VAR 0 7
43980: PPUSH
43981: CALL 52983 0 3
43985: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
43986: LD_ADDR_EXP 54
43990: PUSH
43991: LD_EXP 54
43995: PPUSH
43996: LD_VAR 0 3
44000: PPUSH
44001: LD_VAR 0 7
44005: PPUSH
44006: CALL_OW 1
44010: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
44011: LD_VAR 0 1
44015: PUSH
44016: LD_EXP 49
44020: PUSH
44021: LD_VAR 0 3
44025: ARRAY
44026: IN
44027: IFFALSE 44066
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
44029: LD_ADDR_EXP 49
44033: PUSH
44034: LD_EXP 49
44038: PPUSH
44039: LD_VAR 0 3
44043: PPUSH
44044: LD_EXP 49
44048: PUSH
44049: LD_VAR 0 3
44053: ARRAY
44054: PUSH
44055: LD_VAR 0 1
44059: DIFF
44060: PPUSH
44061: CALL_OW 1
44065: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
44066: LD_VAR 0 1
44070: PUSH
44071: LD_EXP 56
44075: PUSH
44076: LD_VAR 0 3
44080: ARRAY
44081: IN
44082: IFFALSE 44121
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
44084: LD_ADDR_EXP 56
44088: PUSH
44089: LD_EXP 56
44093: PPUSH
44094: LD_VAR 0 3
44098: PPUSH
44099: LD_EXP 56
44103: PUSH
44104: LD_VAR 0 3
44108: ARRAY
44109: PUSH
44110: LD_VAR 0 1
44114: DIFF
44115: PPUSH
44116: CALL_OW 1
44120: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
44121: LD_VAR 0 1
44125: PUSH
44126: LD_EXP 68
44130: PUSH
44131: LD_VAR 0 3
44135: ARRAY
44136: IN
44137: IFFALSE 44176
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
44139: LD_ADDR_EXP 68
44143: PUSH
44144: LD_EXP 68
44148: PPUSH
44149: LD_VAR 0 3
44153: PPUSH
44154: LD_EXP 68
44158: PUSH
44159: LD_VAR 0 3
44163: ARRAY
44164: PUSH
44165: LD_VAR 0 1
44169: DIFF
44170: PPUSH
44171: CALL_OW 1
44175: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
44176: LD_VAR 0 1
44180: PUSH
44181: LD_EXP 71
44185: PUSH
44186: LD_VAR 0 3
44190: ARRAY
44191: IN
44192: IFFALSE 44231
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44194: LD_ADDR_EXP 71
44198: PUSH
44199: LD_EXP 71
44203: PPUSH
44204: LD_VAR 0 3
44208: PPUSH
44209: LD_EXP 71
44213: PUSH
44214: LD_VAR 0 3
44218: ARRAY
44219: PUSH
44220: LD_VAR 0 1
44224: DIFF
44225: PPUSH
44226: CALL_OW 1
44230: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
44231: LD_VAR 0 1
44235: PUSH
44236: LD_EXP 58
44240: PUSH
44241: LD_VAR 0 3
44245: ARRAY
44246: IN
44247: IFFALSE 44286
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
44249: LD_ADDR_EXP 58
44253: PUSH
44254: LD_EXP 58
44258: PPUSH
44259: LD_VAR 0 3
44263: PPUSH
44264: LD_EXP 58
44268: PUSH
44269: LD_VAR 0 3
44273: ARRAY
44274: PUSH
44275: LD_VAR 0 1
44279: DIFF
44280: PPUSH
44281: CALL_OW 1
44285: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
44286: LD_VAR 0 1
44290: PUSH
44291: LD_EXP 57
44295: PUSH
44296: LD_VAR 0 3
44300: ARRAY
44301: IN
44302: IFFALSE 44341
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
44304: LD_ADDR_EXP 57
44308: PUSH
44309: LD_EXP 57
44313: PPUSH
44314: LD_VAR 0 3
44318: PPUSH
44319: LD_EXP 57
44323: PUSH
44324: LD_VAR 0 3
44328: ARRAY
44329: PUSH
44330: LD_VAR 0 1
44334: DIFF
44335: PPUSH
44336: CALL_OW 1
44340: ST_TO_ADDR
// end ; break ;
44341: GO 44345
// end ;
44343: GO 43346
44345: POP
44346: POP
// end ;
44347: LD_VAR 0 2
44351: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
44352: LD_INT 0
44354: PPUSH
44355: PPUSH
44356: PPUSH
// if not mc_bases or not skirmish then
44357: LD_EXP 49
44361: NOT
44362: PUSH
44363: LD_EXP 47
44367: NOT
44368: OR
44369: IFFALSE 44373
// exit ;
44371: GO 44588
// for i = 1 to mc_bases do
44373: LD_ADDR_VAR 0 3
44377: PUSH
44378: DOUBLE
44379: LD_INT 1
44381: DEC
44382: ST_TO_ADDR
44383: LD_EXP 49
44387: PUSH
44388: FOR_TO
44389: IFFALSE 44586
// begin if building in mc_construct_list [ i ] then
44391: LD_VAR 0 1
44395: PUSH
44396: LD_EXP 56
44400: PUSH
44401: LD_VAR 0 3
44405: ARRAY
44406: IN
44407: IFFALSE 44584
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
44409: LD_ADDR_EXP 56
44413: PUSH
44414: LD_EXP 56
44418: PPUSH
44419: LD_VAR 0 3
44423: PPUSH
44424: LD_EXP 56
44428: PUSH
44429: LD_VAR 0 3
44433: ARRAY
44434: PUSH
44435: LD_VAR 0 1
44439: DIFF
44440: PPUSH
44441: CALL_OW 1
44445: ST_TO_ADDR
// if building in mc_lab [ i ] then
44446: LD_VAR 0 1
44450: PUSH
44451: LD_EXP 82
44455: PUSH
44456: LD_VAR 0 3
44460: ARRAY
44461: IN
44462: IFFALSE 44517
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
44464: LD_ADDR_EXP 83
44468: PUSH
44469: LD_EXP 83
44473: PPUSH
44474: LD_VAR 0 3
44478: PPUSH
44479: LD_EXP 83
44483: PUSH
44484: LD_VAR 0 3
44488: ARRAY
44489: PPUSH
44490: LD_INT 1
44492: PPUSH
44493: LD_EXP 83
44497: PUSH
44498: LD_VAR 0 3
44502: ARRAY
44503: PPUSH
44504: LD_INT 0
44506: PPUSH
44507: CALL 52075 0 4
44511: PPUSH
44512: CALL_OW 1
44516: ST_TO_ADDR
// if not building in mc_bases [ i ] then
44517: LD_VAR 0 1
44521: PUSH
44522: LD_EXP 49
44526: PUSH
44527: LD_VAR 0 3
44531: ARRAY
44532: IN
44533: NOT
44534: IFFALSE 44580
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
44536: LD_ADDR_EXP 49
44540: PUSH
44541: LD_EXP 49
44545: PPUSH
44546: LD_VAR 0 3
44550: PUSH
44551: LD_EXP 49
44555: PUSH
44556: LD_VAR 0 3
44560: ARRAY
44561: PUSH
44562: LD_INT 1
44564: PLUS
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PPUSH
44570: LD_VAR 0 1
44574: PPUSH
44575: CALL 52657 0 3
44579: ST_TO_ADDR
// exit ;
44580: POP
44581: POP
44582: GO 44588
// end ; end ;
44584: GO 44388
44586: POP
44587: POP
// end ;
44588: LD_VAR 0 2
44592: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
44593: LD_INT 0
44595: PPUSH
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
// if not mc_bases or not skirmish then
44602: LD_EXP 49
44606: NOT
44607: PUSH
44608: LD_EXP 47
44612: NOT
44613: OR
44614: IFFALSE 44618
// exit ;
44616: GO 45279
// for i = 1 to mc_bases do
44618: LD_ADDR_VAR 0 3
44622: PUSH
44623: DOUBLE
44624: LD_INT 1
44626: DEC
44627: ST_TO_ADDR
44628: LD_EXP 49
44632: PUSH
44633: FOR_TO
44634: IFFALSE 45277
// begin if building in mc_construct_list [ i ] then
44636: LD_VAR 0 1
44640: PUSH
44641: LD_EXP 56
44645: PUSH
44646: LD_VAR 0 3
44650: ARRAY
44651: IN
44652: IFFALSE 45275
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
44654: LD_ADDR_EXP 56
44658: PUSH
44659: LD_EXP 56
44663: PPUSH
44664: LD_VAR 0 3
44668: PPUSH
44669: LD_EXP 56
44673: PUSH
44674: LD_VAR 0 3
44678: ARRAY
44679: PUSH
44680: LD_VAR 0 1
44684: DIFF
44685: PPUSH
44686: CALL_OW 1
44690: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
44691: LD_ADDR_EXP 49
44695: PUSH
44696: LD_EXP 49
44700: PPUSH
44701: LD_VAR 0 3
44705: PUSH
44706: LD_EXP 49
44710: PUSH
44711: LD_VAR 0 3
44715: ARRAY
44716: PUSH
44717: LD_INT 1
44719: PLUS
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PPUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL 52657 0 3
44734: ST_TO_ADDR
// btype := GetBType ( building ) ;
44735: LD_ADDR_VAR 0 5
44739: PUSH
44740: LD_VAR 0 1
44744: PPUSH
44745: CALL_OW 266
44749: ST_TO_ADDR
// side := GetSide ( building ) ;
44750: LD_ADDR_VAR 0 8
44754: PUSH
44755: LD_VAR 0 1
44759: PPUSH
44760: CALL_OW 255
44764: ST_TO_ADDR
// if btype = b_lab then
44765: LD_VAR 0 5
44769: PUSH
44770: LD_INT 6
44772: EQUAL
44773: IFFALSE 44823
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
44775: LD_ADDR_EXP 82
44779: PUSH
44780: LD_EXP 82
44784: PPUSH
44785: LD_VAR 0 3
44789: PUSH
44790: LD_EXP 82
44794: PUSH
44795: LD_VAR 0 3
44799: ARRAY
44800: PUSH
44801: LD_INT 1
44803: PLUS
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PPUSH
44809: LD_VAR 0 1
44813: PPUSH
44814: CALL 52657 0 3
44818: ST_TO_ADDR
// exit ;
44819: POP
44820: POP
44821: GO 45279
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
44823: LD_VAR 0 5
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 4
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: IN
44842: IFFALSE 44966
// begin if btype = b_armoury then
44844: LD_VAR 0 5
44848: PUSH
44849: LD_INT 4
44851: EQUAL
44852: IFFALSE 44862
// btype := b_barracks ;
44854: LD_ADDR_VAR 0 5
44858: PUSH
44859: LD_INT 5
44861: ST_TO_ADDR
// if btype = b_depot then
44862: LD_VAR 0 5
44866: PUSH
44867: LD_INT 0
44869: EQUAL
44870: IFFALSE 44880
// btype := b_warehouse ;
44872: LD_ADDR_VAR 0 5
44876: PUSH
44877: LD_INT 1
44879: ST_TO_ADDR
// if btype = b_workshop then
44880: LD_VAR 0 5
44884: PUSH
44885: LD_INT 2
44887: EQUAL
44888: IFFALSE 44898
// btype := b_factory ;
44890: LD_ADDR_VAR 0 5
44894: PUSH
44895: LD_INT 3
44897: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
44898: LD_VAR 0 5
44902: PPUSH
44903: LD_VAR 0 8
44907: PPUSH
44908: CALL_OW 323
44912: PUSH
44913: LD_INT 1
44915: EQUAL
44916: IFFALSE 44962
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
44918: LD_ADDR_EXP 81
44922: PUSH
44923: LD_EXP 81
44927: PPUSH
44928: LD_VAR 0 3
44932: PUSH
44933: LD_EXP 81
44937: PUSH
44938: LD_VAR 0 3
44942: ARRAY
44943: PUSH
44944: LD_INT 1
44946: PLUS
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PPUSH
44952: LD_VAR 0 1
44956: PPUSH
44957: CALL 52657 0 3
44961: ST_TO_ADDR
// exit ;
44962: POP
44963: POP
44964: GO 45279
// end ; if btype in [ b_bunker , b_turret ] then
44966: LD_VAR 0 5
44970: PUSH
44971: LD_INT 32
44973: PUSH
44974: LD_INT 33
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: IN
44981: IFFALSE 45271
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
44983: LD_ADDR_EXP 57
44987: PUSH
44988: LD_EXP 57
44992: PPUSH
44993: LD_VAR 0 3
44997: PUSH
44998: LD_EXP 57
45002: PUSH
45003: LD_VAR 0 3
45007: ARRAY
45008: PUSH
45009: LD_INT 1
45011: PLUS
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PPUSH
45017: LD_VAR 0 1
45021: PPUSH
45022: CALL 52657 0 3
45026: ST_TO_ADDR
// if btype = b_bunker then
45027: LD_VAR 0 5
45031: PUSH
45032: LD_INT 32
45034: EQUAL
45035: IFFALSE 45271
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
45037: LD_ADDR_EXP 58
45041: PUSH
45042: LD_EXP 58
45046: PPUSH
45047: LD_VAR 0 3
45051: PUSH
45052: LD_EXP 58
45056: PUSH
45057: LD_VAR 0 3
45061: ARRAY
45062: PUSH
45063: LD_INT 1
45065: PLUS
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PPUSH
45071: LD_VAR 0 1
45075: PPUSH
45076: CALL 52657 0 3
45080: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
45081: LD_ADDR_VAR 0 6
45085: PUSH
45086: LD_EXP 49
45090: PUSH
45091: LD_VAR 0 3
45095: ARRAY
45096: PPUSH
45097: LD_INT 25
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: LD_INT 54
45112: PUSH
45113: EMPTY
45114: LIST
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PPUSH
45124: CALL_OW 72
45128: ST_TO_ADDR
// if tmp then
45129: LD_VAR 0 6
45133: IFFALSE 45139
// exit ;
45135: POP
45136: POP
45137: GO 45279
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45139: LD_ADDR_VAR 0 6
45143: PUSH
45144: LD_EXP 49
45148: PUSH
45149: LD_VAR 0 3
45153: ARRAY
45154: PPUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 30
45160: PUSH
45161: LD_INT 4
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 30
45170: PUSH
45171: LD_INT 5
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: PPUSH
45183: CALL_OW 72
45187: ST_TO_ADDR
// if not tmp then
45188: LD_VAR 0 6
45192: NOT
45193: IFFALSE 45199
// exit ;
45195: POP
45196: POP
45197: GO 45279
// for j in tmp do
45199: LD_ADDR_VAR 0 4
45203: PUSH
45204: LD_VAR 0 6
45208: PUSH
45209: FOR_IN
45210: IFFALSE 45269
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
45212: LD_ADDR_VAR 0 7
45216: PUSH
45217: LD_VAR 0 4
45221: PPUSH
45222: CALL_OW 313
45226: PPUSH
45227: LD_INT 25
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PPUSH
45237: CALL_OW 72
45241: ST_TO_ADDR
// if units then
45242: LD_VAR 0 7
45246: IFFALSE 45267
// begin ComExitBuilding ( units [ 1 ] ) ;
45248: LD_VAR 0 7
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PPUSH
45257: CALL_OW 122
// exit ;
45261: POP
45262: POP
45263: POP
45264: POP
45265: GO 45279
// end ; end ;
45267: GO 45209
45269: POP
45270: POP
// end ; end ; exit ;
45271: POP
45272: POP
45273: GO 45279
// end ; end ;
45275: GO 44633
45277: POP
45278: POP
// end ;
45279: LD_VAR 0 2
45283: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
45284: LD_INT 0
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
45290: PPUSH
45291: PPUSH
45292: PPUSH
// if not mc_bases or not skirmish then
45293: LD_EXP 49
45297: NOT
45298: PUSH
45299: LD_EXP 47
45303: NOT
45304: OR
45305: IFFALSE 45309
// exit ;
45307: GO 45540
// btype := GetBType ( building ) ;
45309: LD_ADDR_VAR 0 6
45313: PUSH
45314: LD_VAR 0 1
45318: PPUSH
45319: CALL_OW 266
45323: ST_TO_ADDR
// x := GetX ( building ) ;
45324: LD_ADDR_VAR 0 7
45328: PUSH
45329: LD_VAR 0 1
45333: PPUSH
45334: CALL_OW 250
45338: ST_TO_ADDR
// y := GetY ( building ) ;
45339: LD_ADDR_VAR 0 8
45343: PUSH
45344: LD_VAR 0 1
45348: PPUSH
45349: CALL_OW 251
45353: ST_TO_ADDR
// d := GetDir ( building ) ;
45354: LD_ADDR_VAR 0 9
45358: PUSH
45359: LD_VAR 0 1
45363: PPUSH
45364: CALL_OW 254
45368: ST_TO_ADDR
// for i = 1 to mc_bases do
45369: LD_ADDR_VAR 0 4
45373: PUSH
45374: DOUBLE
45375: LD_INT 1
45377: DEC
45378: ST_TO_ADDR
45379: LD_EXP 49
45383: PUSH
45384: FOR_TO
45385: IFFALSE 45538
// begin if not mc_build_list [ i ] then
45387: LD_EXP 54
45391: PUSH
45392: LD_VAR 0 4
45396: ARRAY
45397: NOT
45398: IFFALSE 45402
// continue ;
45400: GO 45384
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
45402: LD_VAR 0 6
45406: PUSH
45407: LD_VAR 0 7
45411: PUSH
45412: LD_VAR 0 8
45416: PUSH
45417: LD_VAR 0 9
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: PPUSH
45428: LD_EXP 54
45432: PUSH
45433: LD_VAR 0 4
45437: ARRAY
45438: PUSH
45439: LD_INT 1
45441: ARRAY
45442: PPUSH
45443: CALL 58826 0 2
45447: IFFALSE 45536
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
45449: LD_ADDR_EXP 54
45453: PUSH
45454: LD_EXP 54
45458: PPUSH
45459: LD_VAR 0 4
45463: PPUSH
45464: LD_EXP 54
45468: PUSH
45469: LD_VAR 0 4
45473: ARRAY
45474: PPUSH
45475: LD_INT 1
45477: PPUSH
45478: CALL_OW 3
45482: PPUSH
45483: CALL_OW 1
45487: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
45488: LD_ADDR_EXP 56
45492: PUSH
45493: LD_EXP 56
45497: PPUSH
45498: LD_VAR 0 4
45502: PUSH
45503: LD_EXP 56
45507: PUSH
45508: LD_VAR 0 4
45512: ARRAY
45513: PUSH
45514: LD_INT 1
45516: PLUS
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PPUSH
45522: LD_VAR 0 1
45526: PPUSH
45527: CALL 52657 0 3
45531: ST_TO_ADDR
// exit ;
45532: POP
45533: POP
45534: GO 45540
// end ; end ;
45536: GO 45384
45538: POP
45539: POP
// end ;
45540: LD_VAR 0 3
45544: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
45545: LD_INT 0
45547: PPUSH
45548: PPUSH
45549: PPUSH
// if not mc_bases or not skirmish then
45550: LD_EXP 49
45554: NOT
45555: PUSH
45556: LD_EXP 47
45560: NOT
45561: OR
45562: IFFALSE 45566
// exit ;
45564: GO 45756
// for i = 1 to mc_bases do
45566: LD_ADDR_VAR 0 4
45570: PUSH
45571: DOUBLE
45572: LD_INT 1
45574: DEC
45575: ST_TO_ADDR
45576: LD_EXP 49
45580: PUSH
45581: FOR_TO
45582: IFFALSE 45669
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
45584: LD_VAR 0 1
45588: PUSH
45589: LD_EXP 57
45593: PUSH
45594: LD_VAR 0 4
45598: ARRAY
45599: IN
45600: PUSH
45601: LD_VAR 0 1
45605: PUSH
45606: LD_EXP 58
45610: PUSH
45611: LD_VAR 0 4
45615: ARRAY
45616: IN
45617: NOT
45618: AND
45619: IFFALSE 45667
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
45621: LD_ADDR_EXP 58
45625: PUSH
45626: LD_EXP 58
45630: PPUSH
45631: LD_VAR 0 4
45635: PUSH
45636: LD_EXP 58
45640: PUSH
45641: LD_VAR 0 4
45645: ARRAY
45646: PUSH
45647: LD_INT 1
45649: PLUS
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PPUSH
45655: LD_VAR 0 1
45659: PPUSH
45660: CALL 52657 0 3
45664: ST_TO_ADDR
// break ;
45665: GO 45669
// end ; end ;
45667: GO 45581
45669: POP
45670: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
45671: LD_VAR 0 1
45675: PPUSH
45676: CALL_OW 257
45680: PUSH
45681: LD_EXP 75
45685: IN
45686: PUSH
45687: LD_VAR 0 1
45691: PPUSH
45692: CALL_OW 266
45696: PUSH
45697: LD_INT 5
45699: EQUAL
45700: AND
45701: PUSH
45702: LD_VAR 0 2
45706: PPUSH
45707: CALL_OW 110
45711: PUSH
45712: LD_INT 18
45714: NONEQUAL
45715: AND
45716: IFFALSE 45756
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
45718: LD_VAR 0 2
45722: PPUSH
45723: CALL_OW 257
45727: PUSH
45728: LD_INT 5
45730: PUSH
45731: LD_INT 8
45733: PUSH
45734: LD_INT 9
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: IN
45742: IFFALSE 45756
// SetClass ( unit , 1 ) ;
45744: LD_VAR 0 2
45748: PPUSH
45749: LD_INT 1
45751: PPUSH
45752: CALL_OW 336
// end ;
45756: LD_VAR 0 3
45760: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
45761: LD_INT 0
45763: PPUSH
45764: PPUSH
// if not mc_bases or not skirmish then
45765: LD_EXP 49
45769: NOT
45770: PUSH
45771: LD_EXP 47
45775: NOT
45776: OR
45777: IFFALSE 45781
// exit ;
45779: GO 45897
// if GetLives ( abandoned_vehicle ) > 250 then
45781: LD_VAR 0 2
45785: PPUSH
45786: CALL_OW 256
45790: PUSH
45791: LD_INT 250
45793: GREATER
45794: IFFALSE 45798
// exit ;
45796: GO 45897
// for i = 1 to mc_bases do
45798: LD_ADDR_VAR 0 6
45802: PUSH
45803: DOUBLE
45804: LD_INT 1
45806: DEC
45807: ST_TO_ADDR
45808: LD_EXP 49
45812: PUSH
45813: FOR_TO
45814: IFFALSE 45895
// begin if driver in mc_bases [ i ] then
45816: LD_VAR 0 1
45820: PUSH
45821: LD_EXP 49
45825: PUSH
45826: LD_VAR 0 6
45830: ARRAY
45831: IN
45832: IFFALSE 45893
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
45834: LD_VAR 0 1
45838: PPUSH
45839: LD_EXP 49
45843: PUSH
45844: LD_VAR 0 6
45848: ARRAY
45849: PPUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 30
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 30
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: PPUSH
45878: CALL_OW 72
45882: PUSH
45883: LD_INT 1
45885: ARRAY
45886: PPUSH
45887: CALL_OW 112
// break ;
45891: GO 45895
// end ; end ;
45893: GO 45813
45895: POP
45896: POP
// end ; end_of_file
45897: LD_VAR 0 5
45901: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
45902: LD_INT 0
45904: PPUSH
45905: PPUSH
// if exist_mode then
45906: LD_VAR 0 2
45910: IFFALSE 45935
// unit := CreateCharacter ( prefix & ident ) else
45912: LD_ADDR_VAR 0 5
45916: PUSH
45917: LD_VAR 0 3
45921: PUSH
45922: LD_VAR 0 1
45926: STR
45927: PPUSH
45928: CALL_OW 34
45932: ST_TO_ADDR
45933: GO 45950
// unit := NewCharacter ( ident ) ;
45935: LD_ADDR_VAR 0 5
45939: PUSH
45940: LD_VAR 0 1
45944: PPUSH
45945: CALL_OW 25
45949: ST_TO_ADDR
// result := unit ;
45950: LD_ADDR_VAR 0 4
45954: PUSH
45955: LD_VAR 0 5
45959: ST_TO_ADDR
// end ;
45960: LD_VAR 0 4
45964: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
45965: LD_INT 0
45967: PPUSH
45968: PPUSH
// if not side or not nation then
45969: LD_VAR 0 1
45973: NOT
45974: PUSH
45975: LD_VAR 0 2
45979: NOT
45980: OR
45981: IFFALSE 45985
// exit ;
45983: GO 46621
// case nation of nation_american :
45985: LD_VAR 0 2
45989: PUSH
45990: LD_INT 1
45992: DOUBLE
45993: EQUAL
45994: IFTRUE 45998
45996: GO 46168
45998: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
45999: LD_ADDR_VAR 0 4
46003: PUSH
46004: LD_INT 35
46006: PUSH
46007: LD_INT 45
46009: PUSH
46010: LD_INT 46
46012: PUSH
46013: LD_INT 47
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 6
46024: PUSH
46025: LD_INT 15
46027: PUSH
46028: LD_INT 16
46030: PUSH
46031: LD_INT 7
46033: PUSH
46034: LD_INT 12
46036: PUSH
46037: LD_INT 13
46039: PUSH
46040: LD_INT 10
46042: PUSH
46043: LD_INT 14
46045: PUSH
46046: LD_INT 20
46048: PUSH
46049: LD_INT 21
46051: PUSH
46052: LD_INT 22
46054: PUSH
46055: LD_INT 25
46057: PUSH
46058: LD_INT 32
46060: PUSH
46061: LD_INT 27
46063: PUSH
46064: LD_INT 36
46066: PUSH
46067: LD_INT 69
46069: PUSH
46070: LD_INT 39
46072: PUSH
46073: LD_INT 34
46075: PUSH
46076: LD_INT 40
46078: PUSH
46079: LD_INT 48
46081: PUSH
46082: LD_INT 49
46084: PUSH
46085: LD_INT 50
46087: PUSH
46088: LD_INT 51
46090: PUSH
46091: LD_INT 52
46093: PUSH
46094: LD_INT 53
46096: PUSH
46097: LD_INT 54
46099: PUSH
46100: LD_INT 55
46102: PUSH
46103: LD_INT 56
46105: PUSH
46106: LD_INT 57
46108: PUSH
46109: LD_INT 58
46111: PUSH
46112: LD_INT 59
46114: PUSH
46115: LD_INT 60
46117: PUSH
46118: LD_INT 61
46120: PUSH
46121: LD_INT 62
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
46166: GO 46545
46168: LD_INT 2
46170: DOUBLE
46171: EQUAL
46172: IFTRUE 46176
46174: GO 46354
46176: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
46177: LD_ADDR_VAR 0 4
46181: PUSH
46182: LD_INT 35
46184: PUSH
46185: LD_INT 45
46187: PUSH
46188: LD_INT 46
46190: PUSH
46191: LD_INT 47
46193: PUSH
46194: LD_INT 70
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 11
46202: PUSH
46203: LD_INT 3
46205: PUSH
46206: LD_INT 4
46208: PUSH
46209: LD_INT 5
46211: PUSH
46212: LD_INT 6
46214: PUSH
46215: LD_INT 15
46217: PUSH
46218: LD_INT 18
46220: PUSH
46221: LD_INT 7
46223: PUSH
46224: LD_INT 17
46226: PUSH
46227: LD_INT 8
46229: PUSH
46230: LD_INT 20
46232: PUSH
46233: LD_INT 21
46235: PUSH
46236: LD_INT 22
46238: PUSH
46239: LD_INT 72
46241: PUSH
46242: LD_INT 26
46244: PUSH
46245: LD_INT 69
46247: PUSH
46248: LD_INT 39
46250: PUSH
46251: LD_INT 40
46253: PUSH
46254: LD_INT 41
46256: PUSH
46257: LD_INT 42
46259: PUSH
46260: LD_INT 43
46262: PUSH
46263: LD_INT 48
46265: PUSH
46266: LD_INT 49
46268: PUSH
46269: LD_INT 50
46271: PUSH
46272: LD_INT 51
46274: PUSH
46275: LD_INT 52
46277: PUSH
46278: LD_INT 53
46280: PUSH
46281: LD_INT 54
46283: PUSH
46284: LD_INT 55
46286: PUSH
46287: LD_INT 56
46289: PUSH
46290: LD_INT 60
46292: PUSH
46293: LD_INT 61
46295: PUSH
46296: LD_INT 62
46298: PUSH
46299: LD_INT 66
46301: PUSH
46302: LD_INT 67
46304: PUSH
46305: LD_INT 68
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
46352: GO 46545
46354: LD_INT 3
46356: DOUBLE
46357: EQUAL
46358: IFTRUE 46362
46360: GO 46544
46362: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
46363: LD_ADDR_VAR 0 4
46367: PUSH
46368: LD_INT 46
46370: PUSH
46371: LD_INT 47
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: LD_INT 11
46382: PUSH
46383: LD_INT 9
46385: PUSH
46386: LD_INT 20
46388: PUSH
46389: LD_INT 19
46391: PUSH
46392: LD_INT 21
46394: PUSH
46395: LD_INT 24
46397: PUSH
46398: LD_INT 22
46400: PUSH
46401: LD_INT 25
46403: PUSH
46404: LD_INT 28
46406: PUSH
46407: LD_INT 29
46409: PUSH
46410: LD_INT 30
46412: PUSH
46413: LD_INT 31
46415: PUSH
46416: LD_INT 37
46418: PUSH
46419: LD_INT 38
46421: PUSH
46422: LD_INT 32
46424: PUSH
46425: LD_INT 27
46427: PUSH
46428: LD_INT 33
46430: PUSH
46431: LD_INT 69
46433: PUSH
46434: LD_INT 39
46436: PUSH
46437: LD_INT 34
46439: PUSH
46440: LD_INT 40
46442: PUSH
46443: LD_INT 71
46445: PUSH
46446: LD_INT 23
46448: PUSH
46449: LD_INT 44
46451: PUSH
46452: LD_INT 48
46454: PUSH
46455: LD_INT 49
46457: PUSH
46458: LD_INT 50
46460: PUSH
46461: LD_INT 51
46463: PUSH
46464: LD_INT 52
46466: PUSH
46467: LD_INT 53
46469: PUSH
46470: LD_INT 54
46472: PUSH
46473: LD_INT 55
46475: PUSH
46476: LD_INT 56
46478: PUSH
46479: LD_INT 57
46481: PUSH
46482: LD_INT 58
46484: PUSH
46485: LD_INT 59
46487: PUSH
46488: LD_INT 63
46490: PUSH
46491: LD_INT 64
46493: PUSH
46494: LD_INT 65
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
46542: GO 46545
46544: POP
// if state > - 1 and state < 3 then
46545: LD_VAR 0 3
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: GREATER
46554: PUSH
46555: LD_VAR 0 3
46559: PUSH
46560: LD_INT 3
46562: LESS
46563: AND
46564: IFFALSE 46621
// for i in result do
46566: LD_ADDR_VAR 0 5
46570: PUSH
46571: LD_VAR 0 4
46575: PUSH
46576: FOR_IN
46577: IFFALSE 46619
// if GetTech ( i , side ) <> state then
46579: LD_VAR 0 5
46583: PPUSH
46584: LD_VAR 0 1
46588: PPUSH
46589: CALL_OW 321
46593: PUSH
46594: LD_VAR 0 3
46598: NONEQUAL
46599: IFFALSE 46617
// result := result diff i ;
46601: LD_ADDR_VAR 0 4
46605: PUSH
46606: LD_VAR 0 4
46610: PUSH
46611: LD_VAR 0 5
46615: DIFF
46616: ST_TO_ADDR
46617: GO 46576
46619: POP
46620: POP
// end ;
46621: LD_VAR 0 4
46625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
46626: LD_INT 0
46628: PPUSH
46629: PPUSH
46630: PPUSH
// result := true ;
46631: LD_ADDR_VAR 0 3
46635: PUSH
46636: LD_INT 1
46638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
46639: LD_ADDR_VAR 0 5
46643: PUSH
46644: LD_VAR 0 2
46648: PPUSH
46649: CALL_OW 480
46653: ST_TO_ADDR
// if not tmp then
46654: LD_VAR 0 5
46658: NOT
46659: IFFALSE 46663
// exit ;
46661: GO 46712
// for i in tmp do
46663: LD_ADDR_VAR 0 4
46667: PUSH
46668: LD_VAR 0 5
46672: PUSH
46673: FOR_IN
46674: IFFALSE 46710
// if GetTech ( i , side ) <> state_researched then
46676: LD_VAR 0 4
46680: PPUSH
46681: LD_VAR 0 1
46685: PPUSH
46686: CALL_OW 321
46690: PUSH
46691: LD_INT 2
46693: NONEQUAL
46694: IFFALSE 46708
// begin result := false ;
46696: LD_ADDR_VAR 0 3
46700: PUSH
46701: LD_INT 0
46703: ST_TO_ADDR
// exit ;
46704: POP
46705: POP
46706: GO 46712
// end ;
46708: GO 46673
46710: POP
46711: POP
// end ;
46712: LD_VAR 0 3
46716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
46717: LD_INT 0
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
46724: PPUSH
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
46730: PPUSH
46731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
46732: LD_VAR 0 1
46736: NOT
46737: PUSH
46738: LD_VAR 0 1
46742: PPUSH
46743: CALL_OW 257
46747: PUSH
46748: LD_INT 9
46750: NONEQUAL
46751: OR
46752: IFFALSE 46756
// exit ;
46754: GO 47329
// side := GetSide ( unit ) ;
46756: LD_ADDR_VAR 0 9
46760: PUSH
46761: LD_VAR 0 1
46765: PPUSH
46766: CALL_OW 255
46770: ST_TO_ADDR
// tech_space := tech_spacanom ;
46771: LD_ADDR_VAR 0 12
46775: PUSH
46776: LD_INT 29
46778: ST_TO_ADDR
// tech_time := tech_taurad ;
46779: LD_ADDR_VAR 0 13
46783: PUSH
46784: LD_INT 28
46786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
46787: LD_ADDR_VAR 0 11
46791: PUSH
46792: LD_VAR 0 1
46796: PPUSH
46797: CALL_OW 310
46801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
46802: LD_VAR 0 11
46806: PPUSH
46807: CALL_OW 247
46811: PUSH
46812: LD_INT 2
46814: EQUAL
46815: IFFALSE 46819
// exit ;
46817: GO 47329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46819: LD_ADDR_VAR 0 8
46823: PUSH
46824: LD_INT 81
46826: PUSH
46827: LD_VAR 0 9
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 21
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PPUSH
46857: CALL_OW 69
46861: ST_TO_ADDR
// if not tmp then
46862: LD_VAR 0 8
46866: NOT
46867: IFFALSE 46871
// exit ;
46869: GO 47329
// if in_unit then
46871: LD_VAR 0 11
46875: IFFALSE 46899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
46877: LD_ADDR_VAR 0 10
46881: PUSH
46882: LD_VAR 0 8
46886: PPUSH
46887: LD_VAR 0 11
46891: PPUSH
46892: CALL_OW 74
46896: ST_TO_ADDR
46897: GO 46919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
46899: LD_ADDR_VAR 0 10
46903: PUSH
46904: LD_VAR 0 8
46908: PPUSH
46909: LD_VAR 0 1
46913: PPUSH
46914: CALL_OW 74
46918: ST_TO_ADDR
// if not enemy then
46919: LD_VAR 0 10
46923: NOT
46924: IFFALSE 46928
// exit ;
46926: GO 47329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
46928: LD_VAR 0 11
46932: PUSH
46933: LD_VAR 0 11
46937: PPUSH
46938: LD_VAR 0 10
46942: PPUSH
46943: CALL_OW 296
46947: PUSH
46948: LD_INT 13
46950: GREATER
46951: AND
46952: PUSH
46953: LD_VAR 0 1
46957: PPUSH
46958: LD_VAR 0 10
46962: PPUSH
46963: CALL_OW 296
46967: PUSH
46968: LD_INT 12
46970: GREATER
46971: OR
46972: IFFALSE 46976
// exit ;
46974: GO 47329
// missile := [ 1 ] ;
46976: LD_ADDR_VAR 0 14
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
46987: LD_VAR 0 9
46991: PPUSH
46992: LD_VAR 0 12
46996: PPUSH
46997: CALL_OW 325
47001: IFFALSE 47030
// missile := Insert ( missile , missile + 1 , 2 ) ;
47003: LD_ADDR_VAR 0 14
47007: PUSH
47008: LD_VAR 0 14
47012: PPUSH
47013: LD_VAR 0 14
47017: PUSH
47018: LD_INT 1
47020: PLUS
47021: PPUSH
47022: LD_INT 2
47024: PPUSH
47025: CALL_OW 2
47029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47030: LD_VAR 0 9
47034: PPUSH
47035: LD_VAR 0 13
47039: PPUSH
47040: CALL_OW 325
47044: PUSH
47045: LD_VAR 0 10
47049: PPUSH
47050: CALL_OW 255
47054: PPUSH
47055: LD_VAR 0 13
47059: PPUSH
47060: CALL_OW 325
47064: NOT
47065: AND
47066: IFFALSE 47095
// missile := Insert ( missile , missile + 1 , 3 ) ;
47068: LD_ADDR_VAR 0 14
47072: PUSH
47073: LD_VAR 0 14
47077: PPUSH
47078: LD_VAR 0 14
47082: PUSH
47083: LD_INT 1
47085: PLUS
47086: PPUSH
47087: LD_INT 3
47089: PPUSH
47090: CALL_OW 2
47094: ST_TO_ADDR
// if missile < 2 then
47095: LD_VAR 0 14
47099: PUSH
47100: LD_INT 2
47102: LESS
47103: IFFALSE 47107
// exit ;
47105: GO 47329
// x := GetX ( enemy ) ;
47107: LD_ADDR_VAR 0 4
47111: PUSH
47112: LD_VAR 0 10
47116: PPUSH
47117: CALL_OW 250
47121: ST_TO_ADDR
// y := GetY ( enemy ) ;
47122: LD_ADDR_VAR 0 5
47126: PUSH
47127: LD_VAR 0 10
47131: PPUSH
47132: CALL_OW 251
47136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47137: LD_ADDR_VAR 0 6
47141: PUSH
47142: LD_VAR 0 4
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PPUSH
47151: LD_INT 1
47153: PPUSH
47154: CALL_OW 12
47158: PLUS
47159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47160: LD_ADDR_VAR 0 7
47164: PUSH
47165: LD_VAR 0 5
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PPUSH
47174: LD_INT 1
47176: PPUSH
47177: CALL_OW 12
47181: PLUS
47182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47183: LD_VAR 0 6
47187: PPUSH
47188: LD_VAR 0 7
47192: PPUSH
47193: CALL_OW 488
47197: NOT
47198: IFFALSE 47220
// begin _x := x ;
47200: LD_ADDR_VAR 0 6
47204: PUSH
47205: LD_VAR 0 4
47209: ST_TO_ADDR
// _y := y ;
47210: LD_ADDR_VAR 0 7
47214: PUSH
47215: LD_VAR 0 5
47219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47220: LD_ADDR_VAR 0 3
47224: PUSH
47225: LD_INT 1
47227: PPUSH
47228: LD_VAR 0 14
47232: PPUSH
47233: CALL_OW 12
47237: ST_TO_ADDR
// case i of 1 :
47238: LD_VAR 0 3
47242: PUSH
47243: LD_INT 1
47245: DOUBLE
47246: EQUAL
47247: IFTRUE 47251
47249: GO 47268
47251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47252: LD_VAR 0 1
47256: PPUSH
47257: LD_VAR 0 10
47261: PPUSH
47262: CALL_OW 115
47266: GO 47329
47268: LD_INT 2
47270: DOUBLE
47271: EQUAL
47272: IFTRUE 47276
47274: GO 47298
47276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47277: LD_VAR 0 1
47281: PPUSH
47282: LD_VAR 0 6
47286: PPUSH
47287: LD_VAR 0 7
47291: PPUSH
47292: CALL_OW 153
47296: GO 47329
47298: LD_INT 3
47300: DOUBLE
47301: EQUAL
47302: IFTRUE 47306
47304: GO 47328
47306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47307: LD_VAR 0 1
47311: PPUSH
47312: LD_VAR 0 6
47316: PPUSH
47317: LD_VAR 0 7
47321: PPUSH
47322: CALL_OW 154
47326: GO 47329
47328: POP
// end ;
47329: LD_VAR 0 2
47333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47334: LD_INT 0
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
// if not unit or not building then
47342: LD_VAR 0 1
47346: NOT
47347: PUSH
47348: LD_VAR 0 2
47352: NOT
47353: OR
47354: IFFALSE 47358
// exit ;
47356: GO 47516
// x := GetX ( building ) ;
47358: LD_ADDR_VAR 0 5
47362: PUSH
47363: LD_VAR 0 2
47367: PPUSH
47368: CALL_OW 250
47372: ST_TO_ADDR
// y := GetY ( building ) ;
47373: LD_ADDR_VAR 0 6
47377: PUSH
47378: LD_VAR 0 2
47382: PPUSH
47383: CALL_OW 251
47387: ST_TO_ADDR
// for i = 0 to 5 do
47388: LD_ADDR_VAR 0 4
47392: PUSH
47393: DOUBLE
47394: LD_INT 0
47396: DEC
47397: ST_TO_ADDR
47398: LD_INT 5
47400: PUSH
47401: FOR_TO
47402: IFFALSE 47514
// begin _x := ShiftX ( x , i , 3 ) ;
47404: LD_ADDR_VAR 0 7
47408: PUSH
47409: LD_VAR 0 5
47413: PPUSH
47414: LD_VAR 0 4
47418: PPUSH
47419: LD_INT 3
47421: PPUSH
47422: CALL_OW 272
47426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
47427: LD_ADDR_VAR 0 8
47431: PUSH
47432: LD_VAR 0 6
47436: PPUSH
47437: LD_VAR 0 4
47441: PPUSH
47442: LD_INT 3
47444: PPUSH
47445: CALL_OW 273
47449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47450: LD_VAR 0 7
47454: PPUSH
47455: LD_VAR 0 8
47459: PPUSH
47460: CALL_OW 488
47464: NOT
47465: IFFALSE 47469
// continue ;
47467: GO 47401
// if HexInfo ( _x , _y ) = 0 then
47469: LD_VAR 0 7
47473: PPUSH
47474: LD_VAR 0 8
47478: PPUSH
47479: CALL_OW 428
47483: PUSH
47484: LD_INT 0
47486: EQUAL
47487: IFFALSE 47512
// begin ComMoveXY ( unit , _x , _y ) ;
47489: LD_VAR 0 1
47493: PPUSH
47494: LD_VAR 0 7
47498: PPUSH
47499: LD_VAR 0 8
47503: PPUSH
47504: CALL_OW 111
// exit ;
47508: POP
47509: POP
47510: GO 47516
// end ; end ;
47512: GO 47401
47514: POP
47515: POP
// end ;
47516: LD_VAR 0 3
47520: RET
// export function ScanBase ( side , base_area ) ; begin
47521: LD_INT 0
47523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
47524: LD_ADDR_VAR 0 3
47528: PUSH
47529: LD_VAR 0 2
47533: PPUSH
47534: LD_INT 81
47536: PUSH
47537: LD_VAR 0 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PPUSH
47546: CALL_OW 70
47550: ST_TO_ADDR
// end ;
47551: LD_VAR 0 3
47555: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
47556: LD_INT 0
47558: PPUSH
47559: PPUSH
47560: PPUSH
47561: PPUSH
47562: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
47563: LD_VAR 0 1
47567: NOT
47568: PUSH
47569: LD_EXP 49
47573: PUSH
47574: LD_VAR 0 1
47578: ARRAY
47579: NOT
47580: OR
47581: PUSH
47582: LD_VAR 0 2
47586: NOT
47587: OR
47588: PUSH
47589: LD_VAR 0 3
47593: NOT
47594: OR
47595: IFFALSE 47599
// exit ;
47597: GO 48049
// side := mc_sides [ base ] ;
47599: LD_ADDR_VAR 0 6
47603: PUSH
47604: LD_EXP 75
47608: PUSH
47609: LD_VAR 0 1
47613: ARRAY
47614: ST_TO_ADDR
// if not side then
47615: LD_VAR 0 6
47619: NOT
47620: IFFALSE 47624
// exit ;
47622: GO 48049
// for i in solds do
47624: LD_ADDR_VAR 0 7
47628: PUSH
47629: LD_VAR 0 2
47633: PUSH
47634: FOR_IN
47635: IFFALSE 47696
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
47637: LD_VAR 0 7
47641: PPUSH
47642: CALL_OW 310
47646: PPUSH
47647: CALL_OW 266
47651: PUSH
47652: LD_INT 32
47654: PUSH
47655: LD_INT 31
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: IN
47662: IFFALSE 47682
// solds := solds diff i else
47664: LD_ADDR_VAR 0 2
47668: PUSH
47669: LD_VAR 0 2
47673: PUSH
47674: LD_VAR 0 7
47678: DIFF
47679: ST_TO_ADDR
47680: GO 47694
// SetTag ( i , 18 ) ;
47682: LD_VAR 0 7
47686: PPUSH
47687: LD_INT 18
47689: PPUSH
47690: CALL_OW 109
47694: GO 47634
47696: POP
47697: POP
// if not solds then
47698: LD_VAR 0 2
47702: NOT
47703: IFFALSE 47707
// exit ;
47705: GO 48049
// repeat wait ( 0 0$1 ) ;
47707: LD_INT 35
47709: PPUSH
47710: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: LD_VAR 0 6
47723: PPUSH
47724: LD_VAR 0 3
47728: PPUSH
47729: CALL 47521 0 2
47733: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
47734: LD_VAR 0 5
47738: NOT
47739: PUSH
47740: LD_VAR 0 5
47744: PUSH
47745: LD_INT 3
47747: GREATER
47748: OR
47749: PUSH
47750: LD_EXP 71
47754: PUSH
47755: LD_VAR 0 1
47759: ARRAY
47760: OR
47761: IFFALSE 47802
// begin for i in solds do
47763: LD_ADDR_VAR 0 7
47767: PUSH
47768: LD_VAR 0 2
47772: PUSH
47773: FOR_IN
47774: IFFALSE 47798
// if HasTask ( i ) then
47776: LD_VAR 0 7
47780: PPUSH
47781: CALL_OW 314
47785: IFFALSE 47796
// ComStop ( i ) ;
47787: LD_VAR 0 7
47791: PPUSH
47792: CALL_OW 141
47796: GO 47773
47798: POP
47799: POP
// break ;
47800: GO 48037
// end ; for i in solds do
47802: LD_ADDR_VAR 0 7
47806: PUSH
47807: LD_VAR 0 2
47811: PUSH
47812: FOR_IN
47813: IFFALSE 48029
// begin if IsInUnit ( i ) then
47815: LD_VAR 0 7
47819: PPUSH
47820: CALL_OW 310
47824: IFFALSE 47835
// ComExitBuilding ( i ) ;
47826: LD_VAR 0 7
47830: PPUSH
47831: CALL_OW 122
// if GetLives ( i ) > 333 then
47835: LD_VAR 0 7
47839: PPUSH
47840: CALL_OW 256
47844: PUSH
47845: LD_INT 333
47847: GREATER
47848: IFFALSE 47876
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47850: LD_VAR 0 7
47854: PPUSH
47855: LD_VAR 0 5
47859: PPUSH
47860: LD_VAR 0 7
47864: PPUSH
47865: CALL_OW 74
47869: PPUSH
47870: CALL_OW 115
47874: GO 48027
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
47876: LD_ADDR_VAR 0 8
47880: PUSH
47881: LD_EXP 49
47885: PUSH
47886: LD_VAR 0 1
47890: ARRAY
47891: PPUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 30
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 30
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 30
47917: PUSH
47918: LD_INT 6
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: PPUSH
47931: CALL_OW 72
47935: PPUSH
47936: LD_VAR 0 7
47940: PPUSH
47941: CALL_OW 74
47945: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
47946: LD_VAR 0 7
47950: PPUSH
47951: LD_VAR 0 8
47955: PPUSH
47956: CALL_OW 250
47960: PPUSH
47961: LD_INT 3
47963: PPUSH
47964: LD_INT 5
47966: PPUSH
47967: CALL_OW 272
47971: PPUSH
47972: LD_VAR 0 8
47976: PPUSH
47977: CALL_OW 251
47981: PPUSH
47982: LD_INT 3
47984: PPUSH
47985: LD_INT 5
47987: PPUSH
47988: CALL_OW 273
47992: PPUSH
47993: CALL_OW 111
// SetTag ( i , 0 ) ;
47997: LD_VAR 0 7
48001: PPUSH
48002: LD_INT 0
48004: PPUSH
48005: CALL_OW 109
// solds := solds diff i ;
48009: LD_ADDR_VAR 0 2
48013: PUSH
48014: LD_VAR 0 2
48018: PUSH
48019: LD_VAR 0 7
48023: DIFF
48024: ST_TO_ADDR
// continue ;
48025: GO 47812
// end ; end ;
48027: GO 47812
48029: POP
48030: POP
// until solds ;
48031: LD_VAR 0 2
48035: IFFALSE 47707
// MC_Reset ( base , 18 ) ;
48037: LD_VAR 0 1
48041: PPUSH
48042: LD_INT 18
48044: PPUSH
48045: CALL 20769 0 2
// end ;
48049: LD_VAR 0 4
48053: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
48054: LD_INT 0
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
48071: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
48072: LD_ADDR_VAR 0 12
48076: PUSH
48077: LD_EXP 49
48081: PUSH
48082: LD_VAR 0 1
48086: ARRAY
48087: PPUSH
48088: LD_INT 25
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PPUSH
48098: CALL_OW 72
48102: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
48103: LD_ADDR_VAR 0 8
48107: PUSH
48108: LD_EXP 49
48112: PUSH
48113: LD_VAR 0 1
48117: ARRAY
48118: PPUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 25
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 25
48134: PUSH
48135: LD_INT 5
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 25
48144: PUSH
48145: LD_INT 8
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 25
48154: PUSH
48155: LD_INT 9
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: PPUSH
48169: CALL_OW 72
48173: ST_TO_ADDR
// if not defenders and not solds then
48174: LD_VAR 0 2
48178: NOT
48179: PUSH
48180: LD_VAR 0 8
48184: NOT
48185: AND
48186: IFFALSE 48190
// exit ;
48188: GO 49556
// depot_under_attack := false ;
48190: LD_ADDR_VAR 0 16
48194: PUSH
48195: LD_INT 0
48197: ST_TO_ADDR
// sold_defenders := [ ] ;
48198: LD_ADDR_VAR 0 17
48202: PUSH
48203: EMPTY
48204: ST_TO_ADDR
// if mechs then
48205: LD_VAR 0 12
48209: IFFALSE 48338
// for i in defenders do
48211: LD_ADDR_VAR 0 5
48215: PUSH
48216: LD_VAR 0 2
48220: PUSH
48221: FOR_IN
48222: IFFALSE 48336
// begin SetTag ( i , 20 ) ;
48224: LD_VAR 0 5
48228: PPUSH
48229: LD_INT 20
48231: PPUSH
48232: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
48236: LD_VAR 0 5
48240: PPUSH
48241: CALL_OW 263
48245: PUSH
48246: LD_INT 1
48248: EQUAL
48249: PUSH
48250: LD_VAR 0 5
48254: PPUSH
48255: CALL_OW 311
48259: NOT
48260: AND
48261: PUSH
48262: LD_VAR 0 12
48266: AND
48267: IFFALSE 48334
// begin un := mechs [ 1 ] ;
48269: LD_ADDR_VAR 0 10
48273: PUSH
48274: LD_VAR 0 12
48278: PUSH
48279: LD_INT 1
48281: ARRAY
48282: ST_TO_ADDR
// ComExitBuilding ( un ) ;
48283: LD_VAR 0 10
48287: PPUSH
48288: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
48292: LD_VAR 0 10
48296: PPUSH
48297: LD_VAR 0 5
48301: PPUSH
48302: CALL_OW 180
// SetTag ( un , 19 ) ;
48306: LD_VAR 0 10
48310: PPUSH
48311: LD_INT 19
48313: PPUSH
48314: CALL_OW 109
// mechs := mechs diff un ;
48318: LD_ADDR_VAR 0 12
48322: PUSH
48323: LD_VAR 0 12
48327: PUSH
48328: LD_VAR 0 10
48332: DIFF
48333: ST_TO_ADDR
// end ; end ;
48334: GO 48221
48336: POP
48337: POP
// if solds then
48338: LD_VAR 0 8
48342: IFFALSE 48401
// for i in solds do
48344: LD_ADDR_VAR 0 5
48348: PUSH
48349: LD_VAR 0 8
48353: PUSH
48354: FOR_IN
48355: IFFALSE 48399
// if not GetTag ( i ) then
48357: LD_VAR 0 5
48361: PPUSH
48362: CALL_OW 110
48366: NOT
48367: IFFALSE 48397
// begin defenders := defenders union i ;
48369: LD_ADDR_VAR 0 2
48373: PUSH
48374: LD_VAR 0 2
48378: PUSH
48379: LD_VAR 0 5
48383: UNION
48384: ST_TO_ADDR
// SetTag ( i , 18 ) ;
48385: LD_VAR 0 5
48389: PPUSH
48390: LD_INT 18
48392: PPUSH
48393: CALL_OW 109
// end ;
48397: GO 48354
48399: POP
48400: POP
// repeat wait ( 0 0$1 ) ;
48401: LD_INT 35
48403: PPUSH
48404: CALL_OW 67
// enemy := mc_scan [ base ] ;
48408: LD_ADDR_VAR 0 3
48412: PUSH
48413: LD_EXP 72
48417: PUSH
48418: LD_VAR 0 1
48422: ARRAY
48423: ST_TO_ADDR
// for i in defenders do
48424: LD_ADDR_VAR 0 5
48428: PUSH
48429: LD_VAR 0 2
48433: PUSH
48434: FOR_IN
48435: IFFALSE 49120
// begin e := NearestUnitToUnit ( enemy , i ) ;
48437: LD_ADDR_VAR 0 13
48441: PUSH
48442: LD_VAR 0 3
48446: PPUSH
48447: LD_VAR 0 5
48451: PPUSH
48452: CALL_OW 74
48456: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
48457: LD_ADDR_VAR 0 16
48461: PUSH
48462: LD_EXP 49
48466: PUSH
48467: LD_VAR 0 1
48471: ARRAY
48472: PPUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 30
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 30
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: PPUSH
48501: CALL_OW 72
48505: NOT
48506: PUSH
48507: LD_EXP 49
48511: PUSH
48512: LD_VAR 0 1
48516: ARRAY
48517: PPUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 30
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 30
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: PPUSH
48546: CALL_OW 72
48550: PPUSH
48551: CALL_OW 256
48555: PUSH
48556: LD_INT 600
48558: LESS
48559: OR
48560: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
48561: LD_VAR 0 5
48565: PPUSH
48566: CALL_OW 247
48570: PUSH
48571: LD_INT 2
48573: DOUBLE
48574: EQUAL
48575: IFTRUE 48579
48577: GO 48826
48579: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
48580: LD_VAR 0 5
48584: PPUSH
48585: CALL_OW 256
48589: PUSH
48590: LD_INT 650
48592: GREATER
48593: PUSH
48594: LD_VAR 0 5
48598: PPUSH
48599: LD_VAR 0 13
48603: PPUSH
48604: CALL_OW 296
48608: PUSH
48609: LD_INT 40
48611: LESS
48612: AND
48613: IFFALSE 48631
// ComAttackUnit ( i , e ) else
48615: LD_VAR 0 5
48619: PPUSH
48620: LD_VAR 0 13
48624: PPUSH
48625: CALL_OW 115
48629: GO 48709
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
48631: LD_VAR 0 5
48635: PPUSH
48636: LD_VAR 0 13
48640: PPUSH
48641: CALL_OW 296
48645: PUSH
48646: LD_INT 30
48648: GREATEREQUAL
48649: PUSH
48650: LD_VAR 0 5
48654: PPUSH
48655: CALL_OW 256
48659: PUSH
48660: LD_INT 650
48662: LESSEQUAL
48663: OR
48664: PUSH
48665: LD_VAR 0 5
48669: PPUSH
48670: LD_EXP 73
48674: PUSH
48675: LD_VAR 0 1
48679: ARRAY
48680: PPUSH
48681: CALL_OW 308
48685: NOT
48686: AND
48687: IFFALSE 48709
// ComMoveToArea ( i , mc_parking [ base ] ) ;
48689: LD_VAR 0 5
48693: PPUSH
48694: LD_EXP 73
48698: PUSH
48699: LD_VAR 0 1
48703: ARRAY
48704: PPUSH
48705: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
48709: LD_VAR 0 5
48713: PPUSH
48714: CALL_OW 256
48718: PUSH
48719: LD_INT 998
48721: LESS
48722: PUSH
48723: LD_VAR 0 5
48727: PPUSH
48728: CALL_OW 263
48732: PUSH
48733: LD_INT 1
48735: EQUAL
48736: AND
48737: PUSH
48738: LD_VAR 0 5
48742: PPUSH
48743: CALL_OW 311
48747: AND
48748: PUSH
48749: LD_VAR 0 5
48753: PPUSH
48754: LD_EXP 73
48758: PUSH
48759: LD_VAR 0 1
48763: ARRAY
48764: PPUSH
48765: CALL_OW 308
48769: AND
48770: IFFALSE 48824
// begin mech := IsDrivenBy ( i ) ;
48772: LD_ADDR_VAR 0 9
48776: PUSH
48777: LD_VAR 0 5
48781: PPUSH
48782: CALL_OW 311
48786: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
48787: LD_VAR 0 9
48791: PPUSH
48792: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
48796: LD_VAR 0 9
48800: PPUSH
48801: LD_VAR 0 5
48805: PPUSH
48806: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
48810: LD_VAR 0 9
48814: PPUSH
48815: LD_VAR 0 5
48819: PPUSH
48820: CALL_OW 180
// end ; end ; unit_human :
48824: GO 49091
48826: LD_INT 1
48828: DOUBLE
48829: EQUAL
48830: IFTRUE 48834
48832: GO 49090
48834: POP
// begin b := IsInUnit ( i ) ;
48835: LD_ADDR_VAR 0 18
48839: PUSH
48840: LD_VAR 0 5
48844: PPUSH
48845: CALL_OW 310
48849: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
48850: LD_ADDR_VAR 0 19
48854: PUSH
48855: LD_VAR 0 18
48859: NOT
48860: PUSH
48861: LD_VAR 0 18
48865: PPUSH
48866: CALL_OW 266
48870: PUSH
48871: LD_INT 32
48873: PUSH
48874: LD_INT 31
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: IN
48881: OR
48882: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
48883: LD_VAR 0 16
48887: PUSH
48888: LD_VAR 0 2
48892: PPUSH
48893: LD_INT 21
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PPUSH
48903: CALL_OW 72
48907: PUSH
48908: LD_INT 1
48910: LESSEQUAL
48911: OR
48912: PUSH
48913: LD_VAR 0 19
48917: AND
48918: PUSH
48919: LD_VAR 0 5
48923: PUSH
48924: LD_VAR 0 17
48928: IN
48929: NOT
48930: AND
48931: IFFALSE 49024
// begin if b then
48933: LD_VAR 0 18
48937: IFFALSE 48986
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
48939: LD_VAR 0 18
48943: PPUSH
48944: LD_VAR 0 3
48948: PPUSH
48949: LD_VAR 0 18
48953: PPUSH
48954: CALL_OW 74
48958: PPUSH
48959: CALL_OW 296
48963: PUSH
48964: LD_INT 10
48966: LESS
48967: PUSH
48968: LD_VAR 0 18
48972: PPUSH
48973: CALL_OW 461
48977: PUSH
48978: LD_INT 7
48980: NONEQUAL
48981: AND
48982: IFFALSE 48986
// continue ;
48984: GO 48434
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
48986: LD_ADDR_VAR 0 17
48990: PUSH
48991: LD_VAR 0 17
48995: PPUSH
48996: LD_VAR 0 17
49000: PUSH
49001: LD_INT 1
49003: PLUS
49004: PPUSH
49005: LD_VAR 0 5
49009: PPUSH
49010: CALL_OW 1
49014: ST_TO_ADDR
// ComExitBuilding ( i ) ;
49015: LD_VAR 0 5
49019: PPUSH
49020: CALL_OW 122
// end ; if sold_defenders then
49024: LD_VAR 0 17
49028: IFFALSE 49088
// if i in sold_defenders then
49030: LD_VAR 0 5
49034: PUSH
49035: LD_VAR 0 17
49039: IN
49040: IFFALSE 49088
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
49042: LD_VAR 0 5
49046: PPUSH
49047: CALL_OW 314
49051: NOT
49052: PUSH
49053: LD_VAR 0 5
49057: PPUSH
49058: LD_VAR 0 13
49062: PPUSH
49063: CALL_OW 296
49067: PUSH
49068: LD_INT 30
49070: LESS
49071: AND
49072: IFFALSE 49088
// ComAttackUnit ( i , e ) ;
49074: LD_VAR 0 5
49078: PPUSH
49079: LD_VAR 0 13
49083: PPUSH
49084: CALL_OW 115
// end ; end ; end ;
49088: GO 49091
49090: POP
// if IsDead ( i ) then
49091: LD_VAR 0 5
49095: PPUSH
49096: CALL_OW 301
49100: IFFALSE 49118
// defenders := defenders diff i ;
49102: LD_ADDR_VAR 0 2
49106: PUSH
49107: LD_VAR 0 2
49111: PUSH
49112: LD_VAR 0 5
49116: DIFF
49117: ST_TO_ADDR
// end ;
49118: GO 48434
49120: POP
49121: POP
// until not enemy or not defenders ;
49122: LD_VAR 0 3
49126: NOT
49127: PUSH
49128: LD_VAR 0 2
49132: NOT
49133: OR
49134: IFFALSE 48401
// MC_Reset ( base , 18 ) ;
49136: LD_VAR 0 1
49140: PPUSH
49141: LD_INT 18
49143: PPUSH
49144: CALL 20769 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49148: LD_ADDR_VAR 0 2
49152: PUSH
49153: LD_VAR 0 2
49157: PUSH
49158: LD_VAR 0 2
49162: PPUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 25
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 25
49178: PUSH
49179: LD_INT 5
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 25
49188: PUSH
49189: LD_INT 8
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 25
49198: PUSH
49199: LD_INT 9
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: PPUSH
49213: CALL_OW 72
49217: DIFF
49218: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
49219: LD_VAR 0 3
49223: NOT
49224: PUSH
49225: LD_VAR 0 2
49229: PPUSH
49230: LD_INT 21
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PPUSH
49240: CALL_OW 72
49244: AND
49245: IFFALSE 49507
// begin tmp := FilterByTag ( defenders , 19 ) ;
49247: LD_ADDR_VAR 0 11
49251: PUSH
49252: LD_VAR 0 2
49256: PPUSH
49257: LD_INT 19
49259: PPUSH
49260: CALL 85893 0 2
49264: ST_TO_ADDR
// if tmp then
49265: LD_VAR 0 11
49269: IFFALSE 49339
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
49271: LD_ADDR_VAR 0 11
49275: PUSH
49276: LD_VAR 0 11
49280: PPUSH
49281: LD_INT 25
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PPUSH
49291: CALL_OW 72
49295: ST_TO_ADDR
// if tmp then
49296: LD_VAR 0 11
49300: IFFALSE 49339
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
49302: LD_ADDR_EXP 61
49306: PUSH
49307: LD_EXP 61
49311: PPUSH
49312: LD_VAR 0 1
49316: PPUSH
49317: LD_EXP 61
49321: PUSH
49322: LD_VAR 0 1
49326: ARRAY
49327: PUSH
49328: LD_VAR 0 11
49332: UNION
49333: PPUSH
49334: CALL_OW 1
49338: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
49339: LD_VAR 0 1
49343: PPUSH
49344: LD_INT 19
49346: PPUSH
49347: CALL 20769 0 2
// repeat wait ( 0 0$1 ) ;
49351: LD_INT 35
49353: PPUSH
49354: CALL_OW 67
// for i in defenders do
49358: LD_ADDR_VAR 0 5
49362: PUSH
49363: LD_VAR 0 2
49367: PUSH
49368: FOR_IN
49369: IFFALSE 49458
// begin if not IsInArea ( i , mc_parking [ base ] ) then
49371: LD_VAR 0 5
49375: PPUSH
49376: LD_EXP 73
49380: PUSH
49381: LD_VAR 0 1
49385: ARRAY
49386: PPUSH
49387: CALL_OW 308
49391: NOT
49392: IFFALSE 49416
// ComMoveToArea ( i , mc_parking [ base ] ) else
49394: LD_VAR 0 5
49398: PPUSH
49399: LD_EXP 73
49403: PUSH
49404: LD_VAR 0 1
49408: ARRAY
49409: PPUSH
49410: CALL_OW 113
49414: GO 49456
// if GetControl ( i ) = control_manual then
49416: LD_VAR 0 5
49420: PPUSH
49421: CALL_OW 263
49425: PUSH
49426: LD_INT 1
49428: EQUAL
49429: IFFALSE 49456
// if IsDrivenBy ( i ) then
49431: LD_VAR 0 5
49435: PPUSH
49436: CALL_OW 311
49440: IFFALSE 49456
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
49442: LD_VAR 0 5
49446: PPUSH
49447: CALL_OW 311
49451: PPUSH
49452: CALL_OW 121
// end ;
49456: GO 49368
49458: POP
49459: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
49460: LD_VAR 0 2
49464: PPUSH
49465: LD_INT 95
49467: PUSH
49468: LD_EXP 73
49472: PUSH
49473: LD_VAR 0 1
49477: ARRAY
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PPUSH
49483: CALL_OW 72
49487: PUSH
49488: LD_VAR 0 2
49492: EQUAL
49493: PUSH
49494: LD_EXP 72
49498: PUSH
49499: LD_VAR 0 1
49503: ARRAY
49504: OR
49505: IFFALSE 49351
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
49507: LD_ADDR_EXP 71
49511: PUSH
49512: LD_EXP 71
49516: PPUSH
49517: LD_VAR 0 1
49521: PPUSH
49522: LD_EXP 71
49526: PUSH
49527: LD_VAR 0 1
49531: ARRAY
49532: PUSH
49533: LD_VAR 0 2
49537: UNION
49538: PPUSH
49539: CALL_OW 1
49543: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
49544: LD_VAR 0 1
49548: PPUSH
49549: LD_INT 20
49551: PPUSH
49552: CALL 20769 0 2
// end ;
49556: LD_VAR 0 4
49560: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
49561: LD_INT 0
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
// result := false ;
49567: LD_ADDR_VAR 0 2
49571: PUSH
49572: LD_INT 0
49574: ST_TO_ADDR
// side := GetSide ( unit ) ;
49575: LD_ADDR_VAR 0 3
49579: PUSH
49580: LD_VAR 0 1
49584: PPUSH
49585: CALL_OW 255
49589: ST_TO_ADDR
// nat := GetNation ( unit ) ;
49590: LD_ADDR_VAR 0 4
49594: PUSH
49595: LD_VAR 0 1
49599: PPUSH
49600: CALL_OW 248
49604: ST_TO_ADDR
// case nat of 1 :
49605: LD_VAR 0 4
49609: PUSH
49610: LD_INT 1
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49618
49616: GO 49629
49618: POP
// tech := tech_lassight ; 2 :
49619: LD_ADDR_VAR 0 5
49623: PUSH
49624: LD_INT 12
49626: ST_TO_ADDR
49627: GO 49668
49629: LD_INT 2
49631: DOUBLE
49632: EQUAL
49633: IFTRUE 49637
49635: GO 49648
49637: POP
// tech := tech_mortar ; 3 :
49638: LD_ADDR_VAR 0 5
49642: PUSH
49643: LD_INT 41
49645: ST_TO_ADDR
49646: GO 49668
49648: LD_INT 3
49650: DOUBLE
49651: EQUAL
49652: IFTRUE 49656
49654: GO 49667
49656: POP
// tech := tech_bazooka ; end ;
49657: LD_ADDR_VAR 0 5
49661: PUSH
49662: LD_INT 44
49664: ST_TO_ADDR
49665: GO 49668
49667: POP
// if Researched ( side , tech ) then
49668: LD_VAR 0 3
49672: PPUSH
49673: LD_VAR 0 5
49677: PPUSH
49678: CALL_OW 325
49682: IFFALSE 49709
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
49684: LD_ADDR_VAR 0 2
49688: PUSH
49689: LD_INT 5
49691: PUSH
49692: LD_INT 8
49694: PUSH
49695: LD_INT 9
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: PUSH
49703: LD_VAR 0 4
49707: ARRAY
49708: ST_TO_ADDR
// end ;
49709: LD_VAR 0 2
49713: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
49714: LD_INT 0
49716: PPUSH
49717: PPUSH
49718: PPUSH
// if not mines then
49719: LD_VAR 0 2
49723: NOT
49724: IFFALSE 49728
// exit ;
49726: GO 49872
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49728: LD_ADDR_VAR 0 5
49732: PUSH
49733: LD_INT 81
49735: PUSH
49736: LD_VAR 0 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: LD_INT 21
49750: PUSH
49751: LD_INT 3
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PPUSH
49766: CALL_OW 69
49770: ST_TO_ADDR
// for i in mines do
49771: LD_ADDR_VAR 0 4
49775: PUSH
49776: LD_VAR 0 2
49780: PUSH
49781: FOR_IN
49782: IFFALSE 49870
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
49784: LD_VAR 0 4
49788: PUSH
49789: LD_INT 1
49791: ARRAY
49792: PPUSH
49793: LD_VAR 0 4
49797: PUSH
49798: LD_INT 2
49800: ARRAY
49801: PPUSH
49802: CALL_OW 458
49806: NOT
49807: IFFALSE 49811
// continue ;
49809: GO 49781
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49811: LD_VAR 0 4
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PPUSH
49820: LD_VAR 0 4
49824: PUSH
49825: LD_INT 2
49827: ARRAY
49828: PPUSH
49829: CALL_OW 428
49833: PUSH
49834: LD_VAR 0 5
49838: IN
49839: IFFALSE 49868
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49841: LD_VAR 0 4
49845: PUSH
49846: LD_INT 1
49848: ARRAY
49849: PPUSH
49850: LD_VAR 0 4
49854: PUSH
49855: LD_INT 2
49857: ARRAY
49858: PPUSH
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 456
// end ;
49868: GO 49781
49870: POP
49871: POP
// end ;
49872: LD_VAR 0 3
49876: RET
// export function Count ( array ) ; var i ; begin
49877: LD_INT 0
49879: PPUSH
49880: PPUSH
// result := 0 ;
49881: LD_ADDR_VAR 0 2
49885: PUSH
49886: LD_INT 0
49888: ST_TO_ADDR
// for i in array do
49889: LD_ADDR_VAR 0 3
49893: PUSH
49894: LD_VAR 0 1
49898: PUSH
49899: FOR_IN
49900: IFFALSE 49924
// if i then
49902: LD_VAR 0 3
49906: IFFALSE 49922
// result := result + 1 ;
49908: LD_ADDR_VAR 0 2
49912: PUSH
49913: LD_VAR 0 2
49917: PUSH
49918: LD_INT 1
49920: PLUS
49921: ST_TO_ADDR
49922: GO 49899
49924: POP
49925: POP
// end ;
49926: LD_VAR 0 2
49930: RET
// export function IsEmpty ( building ) ; begin
49931: LD_INT 0
49933: PPUSH
// if not building then
49934: LD_VAR 0 1
49938: NOT
49939: IFFALSE 49943
// exit ;
49941: GO 49986
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49943: LD_ADDR_VAR 0 2
49947: PUSH
49948: LD_VAR 0 1
49952: PUSH
49953: LD_INT 22
49955: PUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 255
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 58
49972: PUSH
49973: EMPTY
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PPUSH
49980: CALL_OW 69
49984: IN
49985: ST_TO_ADDR
// end ;
49986: LD_VAR 0 2
49990: RET
// export function IsNotFull ( building ) ; begin
49991: LD_INT 0
49993: PPUSH
// if not building then
49994: LD_VAR 0 1
49998: NOT
49999: IFFALSE 50003
// exit ;
50001: GO 50022
// result := UnitsInside ( building ) < 6 ;
50003: LD_ADDR_VAR 0 2
50007: PUSH
50008: LD_VAR 0 1
50012: PPUSH
50013: CALL_OW 313
50017: PUSH
50018: LD_INT 6
50020: LESS
50021: ST_TO_ADDR
// end ;
50022: LD_VAR 0 2
50026: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
50027: LD_INT 0
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
// tmp := [ ] ;
50033: LD_ADDR_VAR 0 3
50037: PUSH
50038: EMPTY
50039: ST_TO_ADDR
// list := [ ] ;
50040: LD_ADDR_VAR 0 5
50044: PUSH
50045: EMPTY
50046: ST_TO_ADDR
// for i = 16 to 25 do
50047: LD_ADDR_VAR 0 4
50051: PUSH
50052: DOUBLE
50053: LD_INT 16
50055: DEC
50056: ST_TO_ADDR
50057: LD_INT 25
50059: PUSH
50060: FOR_TO
50061: IFFALSE 50134
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_VAR 0 3
50072: PUSH
50073: LD_INT 22
50075: PUSH
50076: LD_VAR 0 1
50080: PPUSH
50081: CALL_OW 255
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 91
50092: PUSH
50093: LD_VAR 0 1
50097: PUSH
50098: LD_INT 6
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 30
50108: PUSH
50109: LD_VAR 0 4
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: PPUSH
50126: CALL_OW 69
50130: ADD
50131: ST_TO_ADDR
50132: GO 50060
50134: POP
50135: POP
// for i = 1 to tmp do
50136: LD_ADDR_VAR 0 4
50140: PUSH
50141: DOUBLE
50142: LD_INT 1
50144: DEC
50145: ST_TO_ADDR
50146: LD_VAR 0 3
50150: PUSH
50151: FOR_TO
50152: IFFALSE 50240
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
50154: LD_ADDR_VAR 0 5
50158: PUSH
50159: LD_VAR 0 5
50163: PUSH
50164: LD_VAR 0 3
50168: PUSH
50169: LD_VAR 0 4
50173: ARRAY
50174: PPUSH
50175: CALL_OW 266
50179: PUSH
50180: LD_VAR 0 3
50184: PUSH
50185: LD_VAR 0 4
50189: ARRAY
50190: PPUSH
50191: CALL_OW 250
50195: PUSH
50196: LD_VAR 0 3
50200: PUSH
50201: LD_VAR 0 4
50205: ARRAY
50206: PPUSH
50207: CALL_OW 251
50211: PUSH
50212: LD_VAR 0 3
50216: PUSH
50217: LD_VAR 0 4
50221: ARRAY
50222: PPUSH
50223: CALL_OW 254
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: PUSH
50234: EMPTY
50235: LIST
50236: ADD
50237: ST_TO_ADDR
50238: GO 50151
50240: POP
50241: POP
// result := list ;
50242: LD_ADDR_VAR 0 2
50246: PUSH
50247: LD_VAR 0 5
50251: ST_TO_ADDR
// end ;
50252: LD_VAR 0 2
50256: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
50257: LD_INT 0
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
// if not factory then
50266: LD_VAR 0 1
50270: NOT
50271: IFFALSE 50275
// exit ;
50273: GO 50800
// if control = control_apeman then
50275: LD_VAR 0 4
50279: PUSH
50280: LD_INT 5
50282: EQUAL
50283: IFFALSE 50392
// begin tmp := UnitsInside ( factory ) ;
50285: LD_ADDR_VAR 0 8
50289: PUSH
50290: LD_VAR 0 1
50294: PPUSH
50295: CALL_OW 313
50299: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
50300: LD_VAR 0 8
50304: PPUSH
50305: LD_INT 25
50307: PUSH
50308: LD_INT 12
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PPUSH
50315: CALL_OW 72
50319: NOT
50320: IFFALSE 50330
// control := control_manual ;
50322: LD_ADDR_VAR 0 4
50326: PUSH
50327: LD_INT 1
50329: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
50330: LD_ADDR_VAR 0 8
50334: PUSH
50335: LD_VAR 0 1
50339: PPUSH
50340: CALL 50027 0 1
50344: ST_TO_ADDR
// if tmp then
50345: LD_VAR 0 8
50349: IFFALSE 50392
// begin for i in tmp do
50351: LD_ADDR_VAR 0 7
50355: PUSH
50356: LD_VAR 0 8
50360: PUSH
50361: FOR_IN
50362: IFFALSE 50390
// if i [ 1 ] = b_ext_radar then
50364: LD_VAR 0 7
50368: PUSH
50369: LD_INT 1
50371: ARRAY
50372: PUSH
50373: LD_INT 20
50375: EQUAL
50376: IFFALSE 50388
// begin control := control_remote ;
50378: LD_ADDR_VAR 0 4
50382: PUSH
50383: LD_INT 2
50385: ST_TO_ADDR
// break ;
50386: GO 50390
// end ;
50388: GO 50361
50390: POP
50391: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50392: LD_VAR 0 1
50396: PPUSH
50397: LD_VAR 0 2
50401: PPUSH
50402: LD_VAR 0 3
50406: PPUSH
50407: LD_VAR 0 4
50411: PPUSH
50412: LD_VAR 0 5
50416: PPUSH
50417: CALL_OW 448
50421: IFFALSE 50456
// begin result := [ chassis , engine , control , weapon ] ;
50423: LD_ADDR_VAR 0 6
50427: PUSH
50428: LD_VAR 0 2
50432: PUSH
50433: LD_VAR 0 3
50437: PUSH
50438: LD_VAR 0 4
50442: PUSH
50443: LD_VAR 0 5
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: ST_TO_ADDR
// exit ;
50454: GO 50800
// end ; _chassis := AvailableChassisList ( factory ) ;
50456: LD_ADDR_VAR 0 9
50460: PUSH
50461: LD_VAR 0 1
50465: PPUSH
50466: CALL_OW 475
50470: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
50471: LD_ADDR_VAR 0 11
50475: PUSH
50476: LD_VAR 0 1
50480: PPUSH
50481: CALL_OW 476
50485: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
50486: LD_ADDR_VAR 0 12
50490: PUSH
50491: LD_VAR 0 1
50495: PPUSH
50496: CALL_OW 477
50500: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
50501: LD_ADDR_VAR 0 10
50505: PUSH
50506: LD_VAR 0 1
50510: PPUSH
50511: CALL_OW 478
50515: ST_TO_ADDR
// if not chassis in _chassis then
50516: LD_VAR 0 2
50520: PUSH
50521: LD_VAR 0 9
50525: IN
50526: NOT
50527: IFFALSE 50553
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
50529: LD_ADDR_VAR 0 2
50533: PUSH
50534: LD_VAR 0 9
50538: PUSH
50539: LD_INT 1
50541: PPUSH
50542: LD_VAR 0 9
50546: PPUSH
50547: CALL_OW 12
50551: ARRAY
50552: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
50553: LD_VAR 0 2
50557: PPUSH
50558: LD_VAR 0 3
50562: PPUSH
50563: CALL 50805 0 2
50567: NOT
50568: IFFALSE 50627
// repeat engine := _engine [ 1 ] ;
50570: LD_ADDR_VAR 0 3
50574: PUSH
50575: LD_VAR 0 11
50579: PUSH
50580: LD_INT 1
50582: ARRAY
50583: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
50584: LD_ADDR_VAR 0 11
50588: PUSH
50589: LD_VAR 0 11
50593: PPUSH
50594: LD_INT 1
50596: PPUSH
50597: CALL_OW 3
50601: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
50602: LD_VAR 0 2
50606: PPUSH
50607: LD_VAR 0 3
50611: PPUSH
50612: CALL 50805 0 2
50616: PUSH
50617: LD_VAR 0 11
50621: PUSH
50622: EMPTY
50623: EQUAL
50624: OR
50625: IFFALSE 50570
// if not control in _control then
50627: LD_VAR 0 4
50631: PUSH
50632: LD_VAR 0 12
50636: IN
50637: NOT
50638: IFFALSE 50664
// control := _control [ rand ( 1 , _control ) ] ;
50640: LD_ADDR_VAR 0 4
50644: PUSH
50645: LD_VAR 0 12
50649: PUSH
50650: LD_INT 1
50652: PPUSH
50653: LD_VAR 0 12
50657: PPUSH
50658: CALL_OW 12
50662: ARRAY
50663: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
50664: LD_VAR 0 2
50668: PPUSH
50669: LD_VAR 0 5
50673: PPUSH
50674: CALL 51025 0 2
50678: NOT
50679: IFFALSE 50738
// repeat weapon := _weapon [ 1 ] ;
50681: LD_ADDR_VAR 0 5
50685: PUSH
50686: LD_VAR 0 10
50690: PUSH
50691: LD_INT 1
50693: ARRAY
50694: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
50695: LD_ADDR_VAR 0 10
50699: PUSH
50700: LD_VAR 0 10
50704: PPUSH
50705: LD_INT 1
50707: PPUSH
50708: CALL_OW 3
50712: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
50713: LD_VAR 0 2
50717: PPUSH
50718: LD_VAR 0 5
50722: PPUSH
50723: CALL 51025 0 2
50727: PUSH
50728: LD_VAR 0 10
50732: PUSH
50733: EMPTY
50734: EQUAL
50735: OR
50736: IFFALSE 50681
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50738: LD_VAR 0 1
50742: PPUSH
50743: LD_VAR 0 2
50747: PPUSH
50748: LD_VAR 0 3
50752: PPUSH
50753: LD_VAR 0 4
50757: PPUSH
50758: LD_VAR 0 5
50762: PPUSH
50763: CALL_OW 448
50767: IFFALSE 50800
// result := [ chassis , engine , control , weapon ] ;
50769: LD_ADDR_VAR 0 6
50773: PUSH
50774: LD_VAR 0 2
50778: PUSH
50779: LD_VAR 0 3
50783: PUSH
50784: LD_VAR 0 4
50788: PUSH
50789: LD_VAR 0 5
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// end ;
50800: LD_VAR 0 6
50804: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50805: LD_INT 0
50807: PPUSH
// if not chassis or not engine then
50808: LD_VAR 0 1
50812: NOT
50813: PUSH
50814: LD_VAR 0 2
50818: NOT
50819: OR
50820: IFFALSE 50824
// exit ;
50822: GO 51020
// case engine of engine_solar :
50824: LD_VAR 0 2
50828: PUSH
50829: LD_INT 2
50831: DOUBLE
50832: EQUAL
50833: IFTRUE 50837
50835: GO 50875
50837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50838: LD_ADDR_VAR 0 3
50842: PUSH
50843: LD_INT 11
50845: PUSH
50846: LD_INT 12
50848: PUSH
50849: LD_INT 13
50851: PUSH
50852: LD_INT 14
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: ST_TO_ADDR
50873: GO 51004
50875: LD_INT 1
50877: DOUBLE
50878: EQUAL
50879: IFTRUE 50883
50881: GO 50945
50883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50884: LD_ADDR_VAR 0 3
50888: PUSH
50889: LD_INT 11
50891: PUSH
50892: LD_INT 12
50894: PUSH
50895: LD_INT 13
50897: PUSH
50898: LD_INT 14
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: LD_INT 4
50912: PUSH
50913: LD_INT 5
50915: PUSH
50916: LD_INT 21
50918: PUSH
50919: LD_INT 23
50921: PUSH
50922: LD_INT 22
50924: PUSH
50925: LD_INT 24
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: ST_TO_ADDR
50943: GO 51004
50945: LD_INT 3
50947: DOUBLE
50948: EQUAL
50949: IFTRUE 50953
50951: GO 51003
50953: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50954: LD_ADDR_VAR 0 3
50958: PUSH
50959: LD_INT 13
50961: PUSH
50962: LD_INT 14
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: LD_INT 4
50973: PUSH
50974: LD_INT 5
50976: PUSH
50977: LD_INT 21
50979: PUSH
50980: LD_INT 22
50982: PUSH
50983: LD_INT 23
50985: PUSH
50986: LD_INT 24
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
51001: GO 51004
51003: POP
// result := ( chassis in result ) ;
51004: LD_ADDR_VAR 0 3
51008: PUSH
51009: LD_VAR 0 1
51013: PUSH
51014: LD_VAR 0 3
51018: IN
51019: ST_TO_ADDR
// end ;
51020: LD_VAR 0 3
51024: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
51025: LD_INT 0
51027: PPUSH
// if not chassis or not weapon then
51028: LD_VAR 0 1
51032: NOT
51033: PUSH
51034: LD_VAR 0 2
51038: NOT
51039: OR
51040: IFFALSE 51044
// exit ;
51042: GO 52070
// case weapon of us_machine_gun :
51044: LD_VAR 0 2
51048: PUSH
51049: LD_INT 2
51051: DOUBLE
51052: EQUAL
51053: IFTRUE 51057
51055: GO 51087
51057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
51058: LD_ADDR_VAR 0 3
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: LD_INT 4
51074: PUSH
51075: LD_INT 5
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
51085: GO 52054
51087: LD_INT 3
51089: DOUBLE
51090: EQUAL
51091: IFTRUE 51095
51093: GO 51125
51095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
51096: LD_ADDR_VAR 0 3
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: LD_INT 5
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: ST_TO_ADDR
51123: GO 52054
51125: LD_INT 11
51127: DOUBLE
51128: EQUAL
51129: IFTRUE 51133
51131: GO 51163
51133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
51134: LD_ADDR_VAR 0 3
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: LD_INT 5
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: ST_TO_ADDR
51161: GO 52054
51163: LD_INT 4
51165: DOUBLE
51166: EQUAL
51167: IFTRUE 51171
51169: GO 51197
51171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
51172: LD_ADDR_VAR 0 3
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: LD_INT 4
51185: PUSH
51186: LD_INT 5
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: ST_TO_ADDR
51195: GO 52054
51197: LD_INT 5
51199: DOUBLE
51200: EQUAL
51201: IFTRUE 51205
51203: GO 51231
51205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
51206: LD_ADDR_VAR 0 3
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: LD_INT 4
51219: PUSH
51220: LD_INT 5
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: ST_TO_ADDR
51229: GO 52054
51231: LD_INT 9
51233: DOUBLE
51234: EQUAL
51235: IFTRUE 51239
51237: GO 51265
51239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
51240: LD_ADDR_VAR 0 3
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: LD_INT 5
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: ST_TO_ADDR
51263: GO 52054
51265: LD_INT 7
51267: DOUBLE
51268: EQUAL
51269: IFTRUE 51273
51271: GO 51299
51273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
51274: LD_ADDR_VAR 0 3
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: LD_INT 5
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
51297: GO 52054
51299: LD_INT 12
51301: DOUBLE
51302: EQUAL
51303: IFTRUE 51307
51305: GO 51333
51307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
51308: LD_ADDR_VAR 0 3
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: LD_INT 4
51321: PUSH
51322: LD_INT 5
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: ST_TO_ADDR
51331: GO 52054
51333: LD_INT 13
51335: DOUBLE
51336: EQUAL
51337: IFTRUE 51341
51339: GO 51367
51341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
51342: LD_ADDR_VAR 0 3
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: LD_INT 4
51355: PUSH
51356: LD_INT 5
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
51365: GO 52054
51367: LD_INT 14
51369: DOUBLE
51370: EQUAL
51371: IFTRUE 51375
51373: GO 51393
51375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
51376: LD_ADDR_VAR 0 3
51380: PUSH
51381: LD_INT 4
51383: PUSH
51384: LD_INT 5
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: ST_TO_ADDR
51391: GO 52054
51393: LD_INT 6
51395: DOUBLE
51396: EQUAL
51397: IFTRUE 51401
51399: GO 51419
51401: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
51402: LD_ADDR_VAR 0 3
51406: PUSH
51407: LD_INT 4
51409: PUSH
51410: LD_INT 5
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: ST_TO_ADDR
51417: GO 52054
51419: LD_INT 10
51421: DOUBLE
51422: EQUAL
51423: IFTRUE 51427
51425: GO 51445
51427: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
51428: LD_ADDR_VAR 0 3
51432: PUSH
51433: LD_INT 4
51435: PUSH
51436: LD_INT 5
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: ST_TO_ADDR
51443: GO 52054
51445: LD_INT 22
51447: DOUBLE
51448: EQUAL
51449: IFTRUE 51453
51451: GO 51479
51453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
51454: LD_ADDR_VAR 0 3
51458: PUSH
51459: LD_INT 11
51461: PUSH
51462: LD_INT 12
51464: PUSH
51465: LD_INT 13
51467: PUSH
51468: LD_INT 14
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: ST_TO_ADDR
51477: GO 52054
51479: LD_INT 23
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51487
51485: GO 51513
51487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
51488: LD_ADDR_VAR 0 3
51492: PUSH
51493: LD_INT 11
51495: PUSH
51496: LD_INT 12
51498: PUSH
51499: LD_INT 13
51501: PUSH
51502: LD_INT 14
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: ST_TO_ADDR
51511: GO 52054
51513: LD_INT 24
51515: DOUBLE
51516: EQUAL
51517: IFTRUE 51521
51519: GO 51547
51521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
51522: LD_ADDR_VAR 0 3
51526: PUSH
51527: LD_INT 11
51529: PUSH
51530: LD_INT 12
51532: PUSH
51533: LD_INT 13
51535: PUSH
51536: LD_INT 14
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: ST_TO_ADDR
51545: GO 52054
51547: LD_INT 30
51549: DOUBLE
51550: EQUAL
51551: IFTRUE 51555
51553: GO 51581
51555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
51556: LD_ADDR_VAR 0 3
51560: PUSH
51561: LD_INT 11
51563: PUSH
51564: LD_INT 12
51566: PUSH
51567: LD_INT 13
51569: PUSH
51570: LD_INT 14
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: ST_TO_ADDR
51579: GO 52054
51581: LD_INT 25
51583: DOUBLE
51584: EQUAL
51585: IFTRUE 51589
51587: GO 51607
51589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
51590: LD_ADDR_VAR 0 3
51594: PUSH
51595: LD_INT 13
51597: PUSH
51598: LD_INT 14
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: ST_TO_ADDR
51605: GO 52054
51607: LD_INT 27
51609: DOUBLE
51610: EQUAL
51611: IFTRUE 51615
51613: GO 51633
51615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
51616: LD_ADDR_VAR 0 3
51620: PUSH
51621: LD_INT 13
51623: PUSH
51624: LD_INT 14
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: ST_TO_ADDR
51631: GO 52054
51633: LD_INT 28
51635: DOUBLE
51636: EQUAL
51637: IFTRUE 51641
51639: GO 51659
51641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
51642: LD_ADDR_VAR 0 3
51646: PUSH
51647: LD_INT 13
51649: PUSH
51650: LD_INT 14
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: ST_TO_ADDR
51657: GO 52054
51659: LD_INT 29
51661: DOUBLE
51662: EQUAL
51663: IFTRUE 51667
51665: GO 51685
51667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
51668: LD_ADDR_VAR 0 3
51672: PUSH
51673: LD_INT 13
51675: PUSH
51676: LD_INT 14
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: ST_TO_ADDR
51683: GO 52054
51685: LD_INT 31
51687: DOUBLE
51688: EQUAL
51689: IFTRUE 51693
51691: GO 51711
51693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
51694: LD_ADDR_VAR 0 3
51698: PUSH
51699: LD_INT 13
51701: PUSH
51702: LD_INT 14
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: ST_TO_ADDR
51709: GO 52054
51711: LD_INT 26
51713: DOUBLE
51714: EQUAL
51715: IFTRUE 51719
51717: GO 51737
51719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
51720: LD_ADDR_VAR 0 3
51724: PUSH
51725: LD_INT 13
51727: PUSH
51728: LD_INT 14
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: ST_TO_ADDR
51735: GO 52054
51737: LD_INT 42
51739: DOUBLE
51740: EQUAL
51741: IFTRUE 51745
51743: GO 51771
51745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51746: LD_ADDR_VAR 0 3
51750: PUSH
51751: LD_INT 21
51753: PUSH
51754: LD_INT 22
51756: PUSH
51757: LD_INT 23
51759: PUSH
51760: LD_INT 24
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: ST_TO_ADDR
51769: GO 52054
51771: LD_INT 43
51773: DOUBLE
51774: EQUAL
51775: IFTRUE 51779
51777: GO 51805
51779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51780: LD_ADDR_VAR 0 3
51784: PUSH
51785: LD_INT 21
51787: PUSH
51788: LD_INT 22
51790: PUSH
51791: LD_INT 23
51793: PUSH
51794: LD_INT 24
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
51803: GO 52054
51805: LD_INT 44
51807: DOUBLE
51808: EQUAL
51809: IFTRUE 51813
51811: GO 51839
51813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51814: LD_ADDR_VAR 0 3
51818: PUSH
51819: LD_INT 21
51821: PUSH
51822: LD_INT 22
51824: PUSH
51825: LD_INT 23
51827: PUSH
51828: LD_INT 24
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
51837: GO 52054
51839: LD_INT 45
51841: DOUBLE
51842: EQUAL
51843: IFTRUE 51847
51845: GO 51873
51847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51848: LD_ADDR_VAR 0 3
51852: PUSH
51853: LD_INT 21
51855: PUSH
51856: LD_INT 22
51858: PUSH
51859: LD_INT 23
51861: PUSH
51862: LD_INT 24
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: ST_TO_ADDR
51871: GO 52054
51873: LD_INT 49
51875: DOUBLE
51876: EQUAL
51877: IFTRUE 51881
51879: GO 51907
51881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51882: LD_ADDR_VAR 0 3
51886: PUSH
51887: LD_INT 21
51889: PUSH
51890: LD_INT 22
51892: PUSH
51893: LD_INT 23
51895: PUSH
51896: LD_INT 24
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: ST_TO_ADDR
51905: GO 52054
51907: LD_INT 51
51909: DOUBLE
51910: EQUAL
51911: IFTRUE 51915
51913: GO 51941
51915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51916: LD_ADDR_VAR 0 3
51920: PUSH
51921: LD_INT 21
51923: PUSH
51924: LD_INT 22
51926: PUSH
51927: LD_INT 23
51929: PUSH
51930: LD_INT 24
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: ST_TO_ADDR
51939: GO 52054
51941: LD_INT 52
51943: DOUBLE
51944: EQUAL
51945: IFTRUE 51949
51947: GO 51975
51949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51950: LD_ADDR_VAR 0 3
51954: PUSH
51955: LD_INT 21
51957: PUSH
51958: LD_INT 22
51960: PUSH
51961: LD_INT 23
51963: PUSH
51964: LD_INT 24
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: ST_TO_ADDR
51973: GO 52054
51975: LD_INT 53
51977: DOUBLE
51978: EQUAL
51979: IFTRUE 51983
51981: GO 52001
51983: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51984: LD_ADDR_VAR 0 3
51988: PUSH
51989: LD_INT 23
51991: PUSH
51992: LD_INT 24
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: ST_TO_ADDR
51999: GO 52054
52001: LD_INT 46
52003: DOUBLE
52004: EQUAL
52005: IFTRUE 52009
52007: GO 52027
52009: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
52010: LD_ADDR_VAR 0 3
52014: PUSH
52015: LD_INT 23
52017: PUSH
52018: LD_INT 24
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: ST_TO_ADDR
52025: GO 52054
52027: LD_INT 47
52029: DOUBLE
52030: EQUAL
52031: IFTRUE 52035
52033: GO 52053
52035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52036: LD_ADDR_VAR 0 3
52040: PUSH
52041: LD_INT 23
52043: PUSH
52044: LD_INT 24
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: ST_TO_ADDR
52051: GO 52054
52053: POP
// result := ( chassis in result ) ;
52054: LD_ADDR_VAR 0 3
52058: PUSH
52059: LD_VAR 0 1
52063: PUSH
52064: LD_VAR 0 3
52068: IN
52069: ST_TO_ADDR
// end ;
52070: LD_VAR 0 3
52074: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
52075: LD_INT 0
52077: PPUSH
52078: PPUSH
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
52083: PPUSH
// result := array ;
52084: LD_ADDR_VAR 0 5
52088: PUSH
52089: LD_VAR 0 1
52093: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
52094: LD_VAR 0 1
52098: NOT
52099: PUSH
52100: LD_VAR 0 2
52104: NOT
52105: OR
52106: PUSH
52107: LD_VAR 0 3
52111: NOT
52112: OR
52113: PUSH
52114: LD_VAR 0 2
52118: PUSH
52119: LD_VAR 0 1
52123: GREATER
52124: OR
52125: PUSH
52126: LD_VAR 0 3
52130: PUSH
52131: LD_VAR 0 1
52135: GREATER
52136: OR
52137: IFFALSE 52141
// exit ;
52139: GO 52437
// if direction then
52141: LD_VAR 0 4
52145: IFFALSE 52209
// begin d := 1 ;
52147: LD_ADDR_VAR 0 9
52151: PUSH
52152: LD_INT 1
52154: ST_TO_ADDR
// if i_from > i_to then
52155: LD_VAR 0 2
52159: PUSH
52160: LD_VAR 0 3
52164: GREATER
52165: IFFALSE 52191
// length := ( array - i_from ) + i_to else
52167: LD_ADDR_VAR 0 11
52171: PUSH
52172: LD_VAR 0 1
52176: PUSH
52177: LD_VAR 0 2
52181: MINUS
52182: PUSH
52183: LD_VAR 0 3
52187: PLUS
52188: ST_TO_ADDR
52189: GO 52207
// length := i_to - i_from ;
52191: LD_ADDR_VAR 0 11
52195: PUSH
52196: LD_VAR 0 3
52200: PUSH
52201: LD_VAR 0 2
52205: MINUS
52206: ST_TO_ADDR
// end else
52207: GO 52270
// begin d := - 1 ;
52209: LD_ADDR_VAR 0 9
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: ST_TO_ADDR
// if i_from > i_to then
52218: LD_VAR 0 2
52222: PUSH
52223: LD_VAR 0 3
52227: GREATER
52228: IFFALSE 52248
// length := i_from - i_to else
52230: LD_ADDR_VAR 0 11
52234: PUSH
52235: LD_VAR 0 2
52239: PUSH
52240: LD_VAR 0 3
52244: MINUS
52245: ST_TO_ADDR
52246: GO 52270
// length := ( array - i_to ) + i_from ;
52248: LD_ADDR_VAR 0 11
52252: PUSH
52253: LD_VAR 0 1
52257: PUSH
52258: LD_VAR 0 3
52262: MINUS
52263: PUSH
52264: LD_VAR 0 2
52268: PLUS
52269: ST_TO_ADDR
// end ; if not length then
52270: LD_VAR 0 11
52274: NOT
52275: IFFALSE 52279
// exit ;
52277: GO 52437
// tmp := array ;
52279: LD_ADDR_VAR 0 10
52283: PUSH
52284: LD_VAR 0 1
52288: ST_TO_ADDR
// for i = 1 to length do
52289: LD_ADDR_VAR 0 6
52293: PUSH
52294: DOUBLE
52295: LD_INT 1
52297: DEC
52298: ST_TO_ADDR
52299: LD_VAR 0 11
52303: PUSH
52304: FOR_TO
52305: IFFALSE 52425
// begin for j = 1 to array do
52307: LD_ADDR_VAR 0 7
52311: PUSH
52312: DOUBLE
52313: LD_INT 1
52315: DEC
52316: ST_TO_ADDR
52317: LD_VAR 0 1
52321: PUSH
52322: FOR_TO
52323: IFFALSE 52411
// begin k := j + d ;
52325: LD_ADDR_VAR 0 8
52329: PUSH
52330: LD_VAR 0 7
52334: PUSH
52335: LD_VAR 0 9
52339: PLUS
52340: ST_TO_ADDR
// if k > array then
52341: LD_VAR 0 8
52345: PUSH
52346: LD_VAR 0 1
52350: GREATER
52351: IFFALSE 52361
// k := 1 ;
52353: LD_ADDR_VAR 0 8
52357: PUSH
52358: LD_INT 1
52360: ST_TO_ADDR
// if not k then
52361: LD_VAR 0 8
52365: NOT
52366: IFFALSE 52378
// k := array ;
52368: LD_ADDR_VAR 0 8
52372: PUSH
52373: LD_VAR 0 1
52377: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
52378: LD_ADDR_VAR 0 10
52382: PUSH
52383: LD_VAR 0 10
52387: PPUSH
52388: LD_VAR 0 8
52392: PPUSH
52393: LD_VAR 0 1
52397: PUSH
52398: LD_VAR 0 7
52402: ARRAY
52403: PPUSH
52404: CALL_OW 1
52408: ST_TO_ADDR
// end ;
52409: GO 52322
52411: POP
52412: POP
// array := tmp ;
52413: LD_ADDR_VAR 0 1
52417: PUSH
52418: LD_VAR 0 10
52422: ST_TO_ADDR
// end ;
52423: GO 52304
52425: POP
52426: POP
// result := array ;
52427: LD_ADDR_VAR 0 5
52431: PUSH
52432: LD_VAR 0 1
52436: ST_TO_ADDR
// end ;
52437: LD_VAR 0 5
52441: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
52442: LD_INT 0
52444: PPUSH
52445: PPUSH
// result := 0 ;
52446: LD_ADDR_VAR 0 3
52450: PUSH
52451: LD_INT 0
52453: ST_TO_ADDR
// if not array or not value in array then
52454: LD_VAR 0 1
52458: NOT
52459: PUSH
52460: LD_VAR 0 2
52464: PUSH
52465: LD_VAR 0 1
52469: IN
52470: NOT
52471: OR
52472: IFFALSE 52476
// exit ;
52474: GO 52530
// for i = 1 to array do
52476: LD_ADDR_VAR 0 4
52480: PUSH
52481: DOUBLE
52482: LD_INT 1
52484: DEC
52485: ST_TO_ADDR
52486: LD_VAR 0 1
52490: PUSH
52491: FOR_TO
52492: IFFALSE 52528
// if value = array [ i ] then
52494: LD_VAR 0 2
52498: PUSH
52499: LD_VAR 0 1
52503: PUSH
52504: LD_VAR 0 4
52508: ARRAY
52509: EQUAL
52510: IFFALSE 52526
// begin result := i ;
52512: LD_ADDR_VAR 0 3
52516: PUSH
52517: LD_VAR 0 4
52521: ST_TO_ADDR
// exit ;
52522: POP
52523: POP
52524: GO 52530
// end ;
52526: GO 52491
52528: POP
52529: POP
// end ;
52530: LD_VAR 0 3
52534: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
52535: LD_INT 0
52537: PPUSH
// vc_chassis := chassis ;
52538: LD_ADDR_OWVAR 37
52542: PUSH
52543: LD_VAR 0 1
52547: ST_TO_ADDR
// vc_engine := engine ;
52548: LD_ADDR_OWVAR 39
52552: PUSH
52553: LD_VAR 0 2
52557: ST_TO_ADDR
// vc_control := control ;
52558: LD_ADDR_OWVAR 38
52562: PUSH
52563: LD_VAR 0 3
52567: ST_TO_ADDR
// vc_weapon := weapon ;
52568: LD_ADDR_OWVAR 40
52572: PUSH
52573: LD_VAR 0 4
52577: ST_TO_ADDR
// vc_fuel_battery := fuel ;
52578: LD_ADDR_OWVAR 41
52582: PUSH
52583: LD_VAR 0 5
52587: ST_TO_ADDR
// end ;
52588: LD_VAR 0 6
52592: RET
// export function WantPlant ( unit ) ; var task ; begin
52593: LD_INT 0
52595: PPUSH
52596: PPUSH
// result := false ;
52597: LD_ADDR_VAR 0 2
52601: PUSH
52602: LD_INT 0
52604: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
52605: LD_ADDR_VAR 0 3
52609: PUSH
52610: LD_VAR 0 1
52614: PPUSH
52615: CALL_OW 437
52619: ST_TO_ADDR
// if task then
52620: LD_VAR 0 3
52624: IFFALSE 52652
// if task [ 1 ] [ 1 ] = p then
52626: LD_VAR 0 3
52630: PUSH
52631: LD_INT 1
52633: ARRAY
52634: PUSH
52635: LD_INT 1
52637: ARRAY
52638: PUSH
52639: LD_STRING p
52641: EQUAL
52642: IFFALSE 52652
// result := true ;
52644: LD_ADDR_VAR 0 2
52648: PUSH
52649: LD_INT 1
52651: ST_TO_ADDR
// end ;
52652: LD_VAR 0 2
52656: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
52657: LD_INT 0
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
// if pos < 1 then
52663: LD_VAR 0 2
52667: PUSH
52668: LD_INT 1
52670: LESS
52671: IFFALSE 52675
// exit ;
52673: GO 52978
// if pos = 1 then
52675: LD_VAR 0 2
52679: PUSH
52680: LD_INT 1
52682: EQUAL
52683: IFFALSE 52716
// result := Replace ( arr , pos [ 1 ] , value ) else
52685: LD_ADDR_VAR 0 4
52689: PUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: LD_VAR 0 2
52699: PUSH
52700: LD_INT 1
52702: ARRAY
52703: PPUSH
52704: LD_VAR 0 3
52708: PPUSH
52709: CALL_OW 1
52713: ST_TO_ADDR
52714: GO 52978
// begin tmp := arr ;
52716: LD_ADDR_VAR 0 6
52720: PUSH
52721: LD_VAR 0 1
52725: ST_TO_ADDR
// s_arr := [ tmp ] ;
52726: LD_ADDR_VAR 0 7
52730: PUSH
52731: LD_VAR 0 6
52735: PUSH
52736: EMPTY
52737: LIST
52738: ST_TO_ADDR
// for i = 1 to pos - 1 do
52739: LD_ADDR_VAR 0 5
52743: PUSH
52744: DOUBLE
52745: LD_INT 1
52747: DEC
52748: ST_TO_ADDR
52749: LD_VAR 0 2
52753: PUSH
52754: LD_INT 1
52756: MINUS
52757: PUSH
52758: FOR_TO
52759: IFFALSE 52804
// begin tmp := tmp [ pos [ i ] ] ;
52761: LD_ADDR_VAR 0 6
52765: PUSH
52766: LD_VAR 0 6
52770: PUSH
52771: LD_VAR 0 2
52775: PUSH
52776: LD_VAR 0 5
52780: ARRAY
52781: ARRAY
52782: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52783: LD_ADDR_VAR 0 7
52787: PUSH
52788: LD_VAR 0 7
52792: PUSH
52793: LD_VAR 0 6
52797: PUSH
52798: EMPTY
52799: LIST
52800: ADD
52801: ST_TO_ADDR
// end ;
52802: GO 52758
52804: POP
52805: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52806: LD_ADDR_VAR 0 6
52810: PUSH
52811: LD_VAR 0 6
52815: PPUSH
52816: LD_VAR 0 2
52820: PUSH
52821: LD_VAR 0 2
52825: ARRAY
52826: PPUSH
52827: LD_VAR 0 3
52831: PPUSH
52832: CALL_OW 1
52836: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52837: LD_ADDR_VAR 0 7
52841: PUSH
52842: LD_VAR 0 7
52846: PPUSH
52847: LD_VAR 0 7
52851: PPUSH
52852: LD_VAR 0 6
52856: PPUSH
52857: CALL_OW 1
52861: ST_TO_ADDR
// for i = s_arr downto 2 do
52862: LD_ADDR_VAR 0 5
52866: PUSH
52867: DOUBLE
52868: LD_VAR 0 7
52872: INC
52873: ST_TO_ADDR
52874: LD_INT 2
52876: PUSH
52877: FOR_DOWNTO
52878: IFFALSE 52962
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52880: LD_ADDR_VAR 0 6
52884: PUSH
52885: LD_VAR 0 7
52889: PUSH
52890: LD_VAR 0 5
52894: PUSH
52895: LD_INT 1
52897: MINUS
52898: ARRAY
52899: PPUSH
52900: LD_VAR 0 2
52904: PUSH
52905: LD_VAR 0 5
52909: PUSH
52910: LD_INT 1
52912: MINUS
52913: ARRAY
52914: PPUSH
52915: LD_VAR 0 7
52919: PUSH
52920: LD_VAR 0 5
52924: ARRAY
52925: PPUSH
52926: CALL_OW 1
52930: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52931: LD_ADDR_VAR 0 7
52935: PUSH
52936: LD_VAR 0 7
52940: PPUSH
52941: LD_VAR 0 5
52945: PUSH
52946: LD_INT 1
52948: MINUS
52949: PPUSH
52950: LD_VAR 0 6
52954: PPUSH
52955: CALL_OW 1
52959: ST_TO_ADDR
// end ;
52960: GO 52877
52962: POP
52963: POP
// result := s_arr [ 1 ] ;
52964: LD_ADDR_VAR 0 4
52968: PUSH
52969: LD_VAR 0 7
52973: PUSH
52974: LD_INT 1
52976: ARRAY
52977: ST_TO_ADDR
// end ; end ;
52978: LD_VAR 0 4
52982: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52983: LD_INT 0
52985: PPUSH
52986: PPUSH
// if not list then
52987: LD_VAR 0 1
52991: NOT
52992: IFFALSE 52996
// exit ;
52994: GO 53087
// i := list [ pos1 ] ;
52996: LD_ADDR_VAR 0 5
53000: PUSH
53001: LD_VAR 0 1
53005: PUSH
53006: LD_VAR 0 2
53010: ARRAY
53011: ST_TO_ADDR
// if not i then
53012: LD_VAR 0 5
53016: NOT
53017: IFFALSE 53021
// exit ;
53019: GO 53087
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
53021: LD_ADDR_VAR 0 1
53025: PUSH
53026: LD_VAR 0 1
53030: PPUSH
53031: LD_VAR 0 2
53035: PPUSH
53036: LD_VAR 0 1
53040: PUSH
53041: LD_VAR 0 3
53045: ARRAY
53046: PPUSH
53047: CALL_OW 1
53051: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
53052: LD_ADDR_VAR 0 1
53056: PUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: LD_VAR 0 3
53066: PPUSH
53067: LD_VAR 0 5
53071: PPUSH
53072: CALL_OW 1
53076: ST_TO_ADDR
// result := list ;
53077: LD_ADDR_VAR 0 4
53081: PUSH
53082: LD_VAR 0 1
53086: ST_TO_ADDR
// end ;
53087: LD_VAR 0 4
53091: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
53092: LD_INT 0
53094: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
53095: LD_ADDR_VAR 0 5
53099: PUSH
53100: LD_VAR 0 1
53104: PPUSH
53105: CALL_OW 250
53109: PPUSH
53110: LD_VAR 0 1
53114: PPUSH
53115: CALL_OW 251
53119: PPUSH
53120: LD_VAR 0 2
53124: PPUSH
53125: LD_VAR 0 3
53129: PPUSH
53130: LD_VAR 0 4
53134: PPUSH
53135: CALL 53145 0 5
53139: ST_TO_ADDR
// end ;
53140: LD_VAR 0 5
53144: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
53145: LD_INT 0
53147: PPUSH
53148: PPUSH
53149: PPUSH
53150: PPUSH
// if not list then
53151: LD_VAR 0 3
53155: NOT
53156: IFFALSE 53160
// exit ;
53158: GO 53548
// result := [ ] ;
53160: LD_ADDR_VAR 0 6
53164: PUSH
53165: EMPTY
53166: ST_TO_ADDR
// for i in list do
53167: LD_ADDR_VAR 0 7
53171: PUSH
53172: LD_VAR 0 3
53176: PUSH
53177: FOR_IN
53178: IFFALSE 53380
// begin tmp := GetDistUnitXY ( i , x , y ) ;
53180: LD_ADDR_VAR 0 9
53184: PUSH
53185: LD_VAR 0 7
53189: PPUSH
53190: LD_VAR 0 1
53194: PPUSH
53195: LD_VAR 0 2
53199: PPUSH
53200: CALL_OW 297
53204: ST_TO_ADDR
// if not result then
53205: LD_VAR 0 6
53209: NOT
53210: IFFALSE 53236
// result := [ [ i , tmp ] ] else
53212: LD_ADDR_VAR 0 6
53216: PUSH
53217: LD_VAR 0 7
53221: PUSH
53222: LD_VAR 0 9
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: EMPTY
53232: LIST
53233: ST_TO_ADDR
53234: GO 53378
// begin if result [ result ] [ 2 ] < tmp then
53236: LD_VAR 0 6
53240: PUSH
53241: LD_VAR 0 6
53245: ARRAY
53246: PUSH
53247: LD_INT 2
53249: ARRAY
53250: PUSH
53251: LD_VAR 0 9
53255: LESS
53256: IFFALSE 53298
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
53258: LD_ADDR_VAR 0 6
53262: PUSH
53263: LD_VAR 0 6
53267: PPUSH
53268: LD_VAR 0 6
53272: PUSH
53273: LD_INT 1
53275: PLUS
53276: PPUSH
53277: LD_VAR 0 7
53281: PUSH
53282: LD_VAR 0 9
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PPUSH
53291: CALL_OW 2
53295: ST_TO_ADDR
53296: GO 53378
// for j = 1 to result do
53298: LD_ADDR_VAR 0 8
53302: PUSH
53303: DOUBLE
53304: LD_INT 1
53306: DEC
53307: ST_TO_ADDR
53308: LD_VAR 0 6
53312: PUSH
53313: FOR_TO
53314: IFFALSE 53376
// begin if tmp < result [ j ] [ 2 ] then
53316: LD_VAR 0 9
53320: PUSH
53321: LD_VAR 0 6
53325: PUSH
53326: LD_VAR 0 8
53330: ARRAY
53331: PUSH
53332: LD_INT 2
53334: ARRAY
53335: LESS
53336: IFFALSE 53374
// begin result := Insert ( result , j , [ i , tmp ] ) ;
53338: LD_ADDR_VAR 0 6
53342: PUSH
53343: LD_VAR 0 6
53347: PPUSH
53348: LD_VAR 0 8
53352: PPUSH
53353: LD_VAR 0 7
53357: PUSH
53358: LD_VAR 0 9
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PPUSH
53367: CALL_OW 2
53371: ST_TO_ADDR
// break ;
53372: GO 53376
// end ; end ;
53374: GO 53313
53376: POP
53377: POP
// end ; end ;
53378: GO 53177
53380: POP
53381: POP
// if result and not asc then
53382: LD_VAR 0 6
53386: PUSH
53387: LD_VAR 0 4
53391: NOT
53392: AND
53393: IFFALSE 53468
// begin tmp := result ;
53395: LD_ADDR_VAR 0 9
53399: PUSH
53400: LD_VAR 0 6
53404: ST_TO_ADDR
// for i = tmp downto 1 do
53405: LD_ADDR_VAR 0 7
53409: PUSH
53410: DOUBLE
53411: LD_VAR 0 9
53415: INC
53416: ST_TO_ADDR
53417: LD_INT 1
53419: PUSH
53420: FOR_DOWNTO
53421: IFFALSE 53466
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
53423: LD_ADDR_VAR 0 6
53427: PUSH
53428: LD_VAR 0 6
53432: PPUSH
53433: LD_VAR 0 9
53437: PUSH
53438: LD_VAR 0 7
53442: MINUS
53443: PUSH
53444: LD_INT 1
53446: PLUS
53447: PPUSH
53448: LD_VAR 0 9
53452: PUSH
53453: LD_VAR 0 7
53457: ARRAY
53458: PPUSH
53459: CALL_OW 1
53463: ST_TO_ADDR
53464: GO 53420
53466: POP
53467: POP
// end ; tmp := [ ] ;
53468: LD_ADDR_VAR 0 9
53472: PUSH
53473: EMPTY
53474: ST_TO_ADDR
// if mode then
53475: LD_VAR 0 5
53479: IFFALSE 53548
// begin for i = 1 to result do
53481: LD_ADDR_VAR 0 7
53485: PUSH
53486: DOUBLE
53487: LD_INT 1
53489: DEC
53490: ST_TO_ADDR
53491: LD_VAR 0 6
53495: PUSH
53496: FOR_TO
53497: IFFALSE 53536
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
53499: LD_ADDR_VAR 0 9
53503: PUSH
53504: LD_VAR 0 9
53508: PPUSH
53509: LD_VAR 0 7
53513: PPUSH
53514: LD_VAR 0 6
53518: PUSH
53519: LD_VAR 0 7
53523: ARRAY
53524: PUSH
53525: LD_INT 1
53527: ARRAY
53528: PPUSH
53529: CALL_OW 1
53533: ST_TO_ADDR
53534: GO 53496
53536: POP
53537: POP
// result := tmp ;
53538: LD_ADDR_VAR 0 6
53542: PUSH
53543: LD_VAR 0 9
53547: ST_TO_ADDR
// end ; end ;
53548: LD_VAR 0 6
53552: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
53553: LD_INT 0
53555: PPUSH
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
53560: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
53561: LD_ADDR_VAR 0 5
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// if not x or not y then
53583: LD_VAR 0 2
53587: NOT
53588: PUSH
53589: LD_VAR 0 3
53593: NOT
53594: OR
53595: IFFALSE 53599
// exit ;
53597: GO 55245
// if not range then
53599: LD_VAR 0 4
53603: NOT
53604: IFFALSE 53614
// range := 10 ;
53606: LD_ADDR_VAR 0 4
53610: PUSH
53611: LD_INT 10
53613: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
53614: LD_ADDR_VAR 0 8
53618: PUSH
53619: LD_INT 81
53621: PUSH
53622: LD_VAR 0 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 92
53633: PUSH
53634: LD_VAR 0 2
53638: PUSH
53639: LD_VAR 0 3
53643: PUSH
53644: LD_VAR 0 4
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 21
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: PPUSH
53677: CALL_OW 69
53681: ST_TO_ADDR
// if not tmp then
53682: LD_VAR 0 8
53686: NOT
53687: IFFALSE 53691
// exit ;
53689: GO 55245
// for i in tmp do
53691: LD_ADDR_VAR 0 6
53695: PUSH
53696: LD_VAR 0 8
53700: PUSH
53701: FOR_IN
53702: IFFALSE 55220
// begin points := [ 0 , 0 , 0 ] ;
53704: LD_ADDR_VAR 0 9
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: ST_TO_ADDR
// bpoints := 1 ;
53723: LD_ADDR_VAR 0 10
53727: PUSH
53728: LD_INT 1
53730: ST_TO_ADDR
// case GetType ( i ) of unit_human :
53731: LD_VAR 0 6
53735: PPUSH
53736: CALL_OW 247
53740: PUSH
53741: LD_INT 1
53743: DOUBLE
53744: EQUAL
53745: IFTRUE 53749
53747: GO 54327
53749: POP
// begin if GetClass ( i ) = 1 then
53750: LD_VAR 0 6
53754: PPUSH
53755: CALL_OW 257
53759: PUSH
53760: LD_INT 1
53762: EQUAL
53763: IFFALSE 53784
// points := [ 10 , 5 , 3 ] ;
53765: LD_ADDR_VAR 0 9
53769: PUSH
53770: LD_INT 10
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: LD_INT 3
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53784: LD_VAR 0 6
53788: PPUSH
53789: CALL_OW 257
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 4
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: IN
53808: IFFALSE 53829
// points := [ 3 , 2 , 1 ] ;
53810: LD_ADDR_VAR 0 9
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53829: LD_VAR 0 6
53833: PPUSH
53834: CALL_OW 257
53838: PUSH
53839: LD_INT 5
53841: EQUAL
53842: IFFALSE 53863
// points := [ 130 , 5 , 2 ] ;
53844: LD_ADDR_VAR 0 9
53848: PUSH
53849: LD_INT 130
53851: PUSH
53852: LD_INT 5
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53863: LD_VAR 0 6
53867: PPUSH
53868: CALL_OW 257
53872: PUSH
53873: LD_INT 8
53875: EQUAL
53876: IFFALSE 53897
// points := [ 35 , 35 , 30 ] ;
53878: LD_ADDR_VAR 0 9
53882: PUSH
53883: LD_INT 35
53885: PUSH
53886: LD_INT 35
53888: PUSH
53889: LD_INT 30
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53897: LD_VAR 0 6
53901: PPUSH
53902: CALL_OW 257
53906: PUSH
53907: LD_INT 9
53909: EQUAL
53910: IFFALSE 53931
// points := [ 20 , 55 , 40 ] ;
53912: LD_ADDR_VAR 0 9
53916: PUSH
53917: LD_INT 20
53919: PUSH
53920: LD_INT 55
53922: PUSH
53923: LD_INT 40
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53931: LD_VAR 0 6
53935: PPUSH
53936: CALL_OW 257
53940: PUSH
53941: LD_INT 12
53943: PUSH
53944: LD_INT 16
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: IN
53951: IFFALSE 53972
// points := [ 5 , 3 , 2 ] ;
53953: LD_ADDR_VAR 0 9
53957: PUSH
53958: LD_INT 5
53960: PUSH
53961: LD_INT 3
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53972: LD_VAR 0 6
53976: PPUSH
53977: CALL_OW 257
53981: PUSH
53982: LD_INT 17
53984: EQUAL
53985: IFFALSE 54006
// points := [ 100 , 50 , 75 ] ;
53987: LD_ADDR_VAR 0 9
53991: PUSH
53992: LD_INT 100
53994: PUSH
53995: LD_INT 50
53997: PUSH
53998: LD_INT 75
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: ST_TO_ADDR
// if GetClass ( i ) = 15 then
54006: LD_VAR 0 6
54010: PPUSH
54011: CALL_OW 257
54015: PUSH
54016: LD_INT 15
54018: EQUAL
54019: IFFALSE 54040
// points := [ 10 , 5 , 3 ] ;
54021: LD_ADDR_VAR 0 9
54025: PUSH
54026: LD_INT 10
54028: PUSH
54029: LD_INT 5
54031: PUSH
54032: LD_INT 3
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: ST_TO_ADDR
// if GetClass ( i ) = 14 then
54040: LD_VAR 0 6
54044: PPUSH
54045: CALL_OW 257
54049: PUSH
54050: LD_INT 14
54052: EQUAL
54053: IFFALSE 54074
// points := [ 10 , 0 , 0 ] ;
54055: LD_ADDR_VAR 0 9
54059: PUSH
54060: LD_INT 10
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// if GetClass ( i ) = 11 then
54074: LD_VAR 0 6
54078: PPUSH
54079: CALL_OW 257
54083: PUSH
54084: LD_INT 11
54086: EQUAL
54087: IFFALSE 54108
// points := [ 30 , 10 , 5 ] ;
54089: LD_ADDR_VAR 0 9
54093: PUSH
54094: LD_INT 30
54096: PUSH
54097: LD_INT 10
54099: PUSH
54100: LD_INT 5
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
54108: LD_VAR 0 1
54112: PPUSH
54113: LD_INT 5
54115: PPUSH
54116: CALL_OW 321
54120: PUSH
54121: LD_INT 2
54123: EQUAL
54124: IFFALSE 54141
// bpoints := bpoints * 1.8 ;
54126: LD_ADDR_VAR 0 10
54130: PUSH
54131: LD_VAR 0 10
54135: PUSH
54136: LD_REAL  1.80000000000000E+0000
54139: MUL
54140: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
54141: LD_VAR 0 6
54145: PPUSH
54146: CALL_OW 257
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: LD_INT 4
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: IN
54169: PUSH
54170: LD_VAR 0 1
54174: PPUSH
54175: LD_INT 51
54177: PPUSH
54178: CALL_OW 321
54182: PUSH
54183: LD_INT 2
54185: EQUAL
54186: AND
54187: IFFALSE 54204
// bpoints := bpoints * 1.2 ;
54189: LD_ADDR_VAR 0 10
54193: PUSH
54194: LD_VAR 0 10
54198: PUSH
54199: LD_REAL  1.20000000000000E+0000
54202: MUL
54203: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
54204: LD_VAR 0 6
54208: PPUSH
54209: CALL_OW 257
54213: PUSH
54214: LD_INT 5
54216: PUSH
54217: LD_INT 7
54219: PUSH
54220: LD_INT 9
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: IN
54228: PUSH
54229: LD_VAR 0 1
54233: PPUSH
54234: LD_INT 52
54236: PPUSH
54237: CALL_OW 321
54241: PUSH
54242: LD_INT 2
54244: EQUAL
54245: AND
54246: IFFALSE 54263
// bpoints := bpoints * 1.5 ;
54248: LD_ADDR_VAR 0 10
54252: PUSH
54253: LD_VAR 0 10
54257: PUSH
54258: LD_REAL  1.50000000000000E+0000
54261: MUL
54262: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
54263: LD_VAR 0 1
54267: PPUSH
54268: LD_INT 66
54270: PPUSH
54271: CALL_OW 321
54275: PUSH
54276: LD_INT 2
54278: EQUAL
54279: IFFALSE 54296
// bpoints := bpoints * 1.1 ;
54281: LD_ADDR_VAR 0 10
54285: PUSH
54286: LD_VAR 0 10
54290: PUSH
54291: LD_REAL  1.10000000000000E+0000
54294: MUL
54295: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
54296: LD_ADDR_VAR 0 10
54300: PUSH
54301: LD_VAR 0 10
54305: PUSH
54306: LD_VAR 0 6
54310: PPUSH
54311: LD_INT 1
54313: PPUSH
54314: CALL_OW 259
54318: PUSH
54319: LD_REAL  1.15000000000000E+0000
54322: MUL
54323: MUL
54324: ST_TO_ADDR
// end ; unit_vehicle :
54325: GO 55149
54327: LD_INT 2
54329: DOUBLE
54330: EQUAL
54331: IFTRUE 54335
54333: GO 55137
54335: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
54336: LD_VAR 0 6
54340: PPUSH
54341: CALL_OW 264
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 42
54351: PUSH
54352: LD_INT 24
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: IN
54360: IFFALSE 54381
// points := [ 25 , 5 , 3 ] ;
54362: LD_ADDR_VAR 0 9
54366: PUSH
54367: LD_INT 25
54369: PUSH
54370: LD_INT 5
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
54381: LD_VAR 0 6
54385: PPUSH
54386: CALL_OW 264
54390: PUSH
54391: LD_INT 4
54393: PUSH
54394: LD_INT 43
54396: PUSH
54397: LD_INT 25
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: LIST
54404: IN
54405: IFFALSE 54426
// points := [ 40 , 15 , 5 ] ;
54407: LD_ADDR_VAR 0 9
54411: PUSH
54412: LD_INT 40
54414: PUSH
54415: LD_INT 15
54417: PUSH
54418: LD_INT 5
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
54426: LD_VAR 0 6
54430: PPUSH
54431: CALL_OW 264
54435: PUSH
54436: LD_INT 3
54438: PUSH
54439: LD_INT 23
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: IN
54446: IFFALSE 54467
// points := [ 7 , 25 , 8 ] ;
54448: LD_ADDR_VAR 0 9
54452: PUSH
54453: LD_INT 7
54455: PUSH
54456: LD_INT 25
54458: PUSH
54459: LD_INT 8
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
54467: LD_VAR 0 6
54471: PPUSH
54472: CALL_OW 264
54476: PUSH
54477: LD_INT 5
54479: PUSH
54480: LD_INT 27
54482: PUSH
54483: LD_INT 44
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: IN
54491: IFFALSE 54512
// points := [ 14 , 50 , 16 ] ;
54493: LD_ADDR_VAR 0 9
54497: PUSH
54498: LD_INT 14
54500: PUSH
54501: LD_INT 50
54503: PUSH
54504: LD_INT 16
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
54512: LD_VAR 0 6
54516: PPUSH
54517: CALL_OW 264
54521: PUSH
54522: LD_INT 6
54524: PUSH
54525: LD_INT 46
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: IN
54532: IFFALSE 54553
// points := [ 32 , 120 , 70 ] ;
54534: LD_ADDR_VAR 0 9
54538: PUSH
54539: LD_INT 32
54541: PUSH
54542: LD_INT 120
54544: PUSH
54545: LD_INT 70
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
54553: LD_VAR 0 6
54557: PPUSH
54558: CALL_OW 264
54562: PUSH
54563: LD_INT 7
54565: PUSH
54566: LD_INT 28
54568: PUSH
54569: LD_INT 45
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: IN
54577: IFFALSE 54598
// points := [ 35 , 20 , 45 ] ;
54579: LD_ADDR_VAR 0 9
54583: PUSH
54584: LD_INT 35
54586: PUSH
54587: LD_INT 20
54589: PUSH
54590: LD_INT 45
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
54598: LD_VAR 0 6
54602: PPUSH
54603: CALL_OW 264
54607: PUSH
54608: LD_INT 47
54610: PUSH
54611: EMPTY
54612: LIST
54613: IN
54614: IFFALSE 54635
// points := [ 67 , 45 , 75 ] ;
54616: LD_ADDR_VAR 0 9
54620: PUSH
54621: LD_INT 67
54623: PUSH
54624: LD_INT 45
54626: PUSH
54627: LD_INT 75
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
54635: LD_VAR 0 6
54639: PPUSH
54640: CALL_OW 264
54644: PUSH
54645: LD_INT 26
54647: PUSH
54648: EMPTY
54649: LIST
54650: IN
54651: IFFALSE 54672
// points := [ 120 , 30 , 80 ] ;
54653: LD_ADDR_VAR 0 9
54657: PUSH
54658: LD_INT 120
54660: PUSH
54661: LD_INT 30
54663: PUSH
54664: LD_INT 80
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
54672: LD_VAR 0 6
54676: PPUSH
54677: CALL_OW 264
54681: PUSH
54682: LD_INT 22
54684: PUSH
54685: EMPTY
54686: LIST
54687: IN
54688: IFFALSE 54709
// points := [ 40 , 1 , 1 ] ;
54690: LD_ADDR_VAR 0 9
54694: PUSH
54695: LD_INT 40
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
54709: LD_VAR 0 6
54713: PPUSH
54714: CALL_OW 264
54718: PUSH
54719: LD_INT 29
54721: PUSH
54722: EMPTY
54723: LIST
54724: IN
54725: IFFALSE 54746
// points := [ 70 , 200 , 400 ] ;
54727: LD_ADDR_VAR 0 9
54731: PUSH
54732: LD_INT 70
54734: PUSH
54735: LD_INT 200
54737: PUSH
54738: LD_INT 400
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54746: LD_VAR 0 6
54750: PPUSH
54751: CALL_OW 264
54755: PUSH
54756: LD_INT 14
54758: PUSH
54759: LD_INT 53
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: IN
54766: IFFALSE 54787
// points := [ 40 , 10 , 20 ] ;
54768: LD_ADDR_VAR 0 9
54772: PUSH
54773: LD_INT 40
54775: PUSH
54776: LD_INT 10
54778: PUSH
54779: LD_INT 20
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54787: LD_VAR 0 6
54791: PPUSH
54792: CALL_OW 264
54796: PUSH
54797: LD_INT 9
54799: PUSH
54800: EMPTY
54801: LIST
54802: IN
54803: IFFALSE 54824
// points := [ 5 , 70 , 20 ] ;
54805: LD_ADDR_VAR 0 9
54809: PUSH
54810: LD_INT 5
54812: PUSH
54813: LD_INT 70
54815: PUSH
54816: LD_INT 20
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54824: LD_VAR 0 6
54828: PPUSH
54829: CALL_OW 264
54833: PUSH
54834: LD_INT 10
54836: PUSH
54837: EMPTY
54838: LIST
54839: IN
54840: IFFALSE 54861
// points := [ 35 , 110 , 70 ] ;
54842: LD_ADDR_VAR 0 9
54846: PUSH
54847: LD_INT 35
54849: PUSH
54850: LD_INT 110
54852: PUSH
54853: LD_INT 70
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54861: LD_VAR 0 6
54865: PPUSH
54866: CALL_OW 265
54870: PUSH
54871: LD_INT 25
54873: EQUAL
54874: IFFALSE 54895
// points := [ 80 , 65 , 100 ] ;
54876: LD_ADDR_VAR 0 9
54880: PUSH
54881: LD_INT 80
54883: PUSH
54884: LD_INT 65
54886: PUSH
54887: LD_INT 100
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54895: LD_VAR 0 6
54899: PPUSH
54900: CALL_OW 263
54904: PUSH
54905: LD_INT 1
54907: EQUAL
54908: IFFALSE 54943
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54910: LD_ADDR_VAR 0 10
54914: PUSH
54915: LD_VAR 0 10
54919: PUSH
54920: LD_VAR 0 6
54924: PPUSH
54925: CALL_OW 311
54929: PPUSH
54930: LD_INT 3
54932: PPUSH
54933: CALL_OW 259
54937: PUSH
54938: LD_INT 4
54940: MUL
54941: MUL
54942: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54943: LD_VAR 0 6
54947: PPUSH
54948: CALL_OW 263
54952: PUSH
54953: LD_INT 2
54955: EQUAL
54956: IFFALSE 55007
// begin j := IsControledBy ( i ) ;
54958: LD_ADDR_VAR 0 7
54962: PUSH
54963: LD_VAR 0 6
54967: PPUSH
54968: CALL_OW 312
54972: ST_TO_ADDR
// if j then
54973: LD_VAR 0 7
54977: IFFALSE 55007
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54979: LD_ADDR_VAR 0 10
54983: PUSH
54984: LD_VAR 0 10
54988: PUSH
54989: LD_VAR 0 7
54993: PPUSH
54994: LD_INT 3
54996: PPUSH
54997: CALL_OW 259
55001: PUSH
55002: LD_INT 3
55004: MUL
55005: MUL
55006: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
55007: LD_VAR 0 6
55011: PPUSH
55012: CALL_OW 264
55016: PUSH
55017: LD_INT 5
55019: PUSH
55020: LD_INT 6
55022: PUSH
55023: LD_INT 46
55025: PUSH
55026: LD_INT 44
55028: PUSH
55029: LD_INT 47
55031: PUSH
55032: LD_INT 45
55034: PUSH
55035: LD_INT 28
55037: PUSH
55038: LD_INT 7
55040: PUSH
55041: LD_INT 27
55043: PUSH
55044: LD_INT 29
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: IN
55059: PUSH
55060: LD_VAR 0 1
55064: PPUSH
55065: LD_INT 52
55067: PPUSH
55068: CALL_OW 321
55072: PUSH
55073: LD_INT 2
55075: EQUAL
55076: AND
55077: IFFALSE 55094
// bpoints := bpoints * 1.2 ;
55079: LD_ADDR_VAR 0 10
55083: PUSH
55084: LD_VAR 0 10
55088: PUSH
55089: LD_REAL  1.20000000000000E+0000
55092: MUL
55093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
55094: LD_VAR 0 6
55098: PPUSH
55099: CALL_OW 264
55103: PUSH
55104: LD_INT 6
55106: PUSH
55107: LD_INT 46
55109: PUSH
55110: LD_INT 47
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: IN
55118: IFFALSE 55135
// bpoints := bpoints * 1.2 ;
55120: LD_ADDR_VAR 0 10
55124: PUSH
55125: LD_VAR 0 10
55129: PUSH
55130: LD_REAL  1.20000000000000E+0000
55133: MUL
55134: ST_TO_ADDR
// end ; unit_building :
55135: GO 55149
55137: LD_INT 3
55139: DOUBLE
55140: EQUAL
55141: IFTRUE 55145
55143: GO 55148
55145: POP
// ; end ;
55146: GO 55149
55148: POP
// for j = 1 to 3 do
55149: LD_ADDR_VAR 0 7
55153: PUSH
55154: DOUBLE
55155: LD_INT 1
55157: DEC
55158: ST_TO_ADDR
55159: LD_INT 3
55161: PUSH
55162: FOR_TO
55163: IFFALSE 55216
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
55165: LD_ADDR_VAR 0 5
55169: PUSH
55170: LD_VAR 0 5
55174: PPUSH
55175: LD_VAR 0 7
55179: PPUSH
55180: LD_VAR 0 5
55184: PUSH
55185: LD_VAR 0 7
55189: ARRAY
55190: PUSH
55191: LD_VAR 0 9
55195: PUSH
55196: LD_VAR 0 7
55200: ARRAY
55201: PUSH
55202: LD_VAR 0 10
55206: MUL
55207: PLUS
55208: PPUSH
55209: CALL_OW 1
55213: ST_TO_ADDR
55214: GO 55162
55216: POP
55217: POP
// end ;
55218: GO 53701
55220: POP
55221: POP
// result := Replace ( result , 4 , tmp ) ;
55222: LD_ADDR_VAR 0 5
55226: PUSH
55227: LD_VAR 0 5
55231: PPUSH
55232: LD_INT 4
55234: PPUSH
55235: LD_VAR 0 8
55239: PPUSH
55240: CALL_OW 1
55244: ST_TO_ADDR
// end ;
55245: LD_VAR 0 5
55249: RET
// export function DangerAtRange ( unit , range ) ; begin
55250: LD_INT 0
55252: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
55253: LD_ADDR_VAR 0 3
55257: PUSH
55258: LD_VAR 0 1
55262: PPUSH
55263: CALL_OW 255
55267: PPUSH
55268: LD_VAR 0 1
55272: PPUSH
55273: CALL_OW 250
55277: PPUSH
55278: LD_VAR 0 1
55282: PPUSH
55283: CALL_OW 251
55287: PPUSH
55288: LD_VAR 0 2
55292: PPUSH
55293: CALL 53553 0 4
55297: ST_TO_ADDR
// end ;
55298: LD_VAR 0 3
55302: RET
// export function DangerInArea ( side , area ) ; begin
55303: LD_INT 0
55305: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
55306: LD_ADDR_VAR 0 3
55310: PUSH
55311: LD_VAR 0 2
55315: PPUSH
55316: LD_INT 81
55318: PUSH
55319: LD_VAR 0 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PPUSH
55328: CALL_OW 70
55332: ST_TO_ADDR
// end ;
55333: LD_VAR 0 3
55337: RET
// export function IsExtension ( b ) ; begin
55338: LD_INT 0
55340: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
55341: LD_ADDR_VAR 0 2
55345: PUSH
55346: LD_VAR 0 1
55350: PUSH
55351: LD_INT 23
55353: PUSH
55354: LD_INT 20
55356: PUSH
55357: LD_INT 22
55359: PUSH
55360: LD_INT 17
55362: PUSH
55363: LD_INT 24
55365: PUSH
55366: LD_INT 21
55368: PUSH
55369: LD_INT 19
55371: PUSH
55372: LD_INT 16
55374: PUSH
55375: LD_INT 25
55377: PUSH
55378: LD_INT 18
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: IN
55393: ST_TO_ADDR
// end ;
55394: LD_VAR 0 2
55398: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
55399: LD_INT 0
55401: PPUSH
55402: PPUSH
55403: PPUSH
// result := [ ] ;
55404: LD_ADDR_VAR 0 3
55408: PUSH
55409: EMPTY
55410: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
55411: LD_ADDR_VAR 0 4
55415: PUSH
55416: LD_VAR 0 2
55420: PPUSH
55421: LD_INT 21
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PPUSH
55431: CALL_OW 70
55435: ST_TO_ADDR
// if not tmp then
55436: LD_VAR 0 4
55440: NOT
55441: IFFALSE 55445
// exit ;
55443: GO 55503
// for i in tmp do
55445: LD_ADDR_VAR 0 5
55449: PUSH
55450: LD_VAR 0 4
55454: PUSH
55455: FOR_IN
55456: IFFALSE 55491
// if GetBase ( i ) <> base then
55458: LD_VAR 0 5
55462: PPUSH
55463: CALL_OW 274
55467: PUSH
55468: LD_VAR 0 1
55472: NONEQUAL
55473: IFFALSE 55489
// ComLinkToBase ( base , i ) ;
55475: LD_VAR 0 1
55479: PPUSH
55480: LD_VAR 0 5
55484: PPUSH
55485: CALL_OW 169
55489: GO 55455
55491: POP
55492: POP
// result := tmp ;
55493: LD_ADDR_VAR 0 3
55497: PUSH
55498: LD_VAR 0 4
55502: ST_TO_ADDR
// end ;
55503: LD_VAR 0 3
55507: RET
// export function ComComplete ( unit , b ) ; var i ; begin
55508: LD_INT 0
55510: PPUSH
55511: PPUSH
// if BuildingStatus ( b ) = bs_build then
55512: LD_VAR 0 2
55516: PPUSH
55517: CALL_OW 461
55521: PUSH
55522: LD_INT 1
55524: EQUAL
55525: IFFALSE 55585
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
55527: LD_VAR 0 1
55531: PPUSH
55532: LD_STRING h
55534: PUSH
55535: LD_VAR 0 2
55539: PPUSH
55540: CALL_OW 250
55544: PUSH
55545: LD_VAR 0 2
55549: PPUSH
55550: CALL_OW 251
55554: PUSH
55555: LD_VAR 0 2
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: PPUSH
55581: CALL_OW 446
// end ;
55585: LD_VAR 0 3
55589: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
55590: LD_INT 0
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
55598: LD_VAR 0 1
55602: NOT
55603: PUSH
55604: LD_VAR 0 1
55608: PPUSH
55609: CALL_OW 263
55613: PUSH
55614: LD_INT 2
55616: EQUAL
55617: NOT
55618: OR
55619: IFFALSE 55623
// exit ;
55621: GO 55939
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
55623: LD_ADDR_VAR 0 6
55627: PUSH
55628: LD_INT 22
55630: PUSH
55631: LD_VAR 0 1
55635: PPUSH
55636: CALL_OW 255
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: LD_INT 30
55650: PUSH
55651: LD_INT 36
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 34
55660: PUSH
55661: LD_INT 31
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PPUSH
55677: CALL_OW 69
55681: ST_TO_ADDR
// if not tmp then
55682: LD_VAR 0 6
55686: NOT
55687: IFFALSE 55691
// exit ;
55689: GO 55939
// result := [ ] ;
55691: LD_ADDR_VAR 0 2
55695: PUSH
55696: EMPTY
55697: ST_TO_ADDR
// for i in tmp do
55698: LD_ADDR_VAR 0 3
55702: PUSH
55703: LD_VAR 0 6
55707: PUSH
55708: FOR_IN
55709: IFFALSE 55780
// begin t := UnitsInside ( i ) ;
55711: LD_ADDR_VAR 0 4
55715: PUSH
55716: LD_VAR 0 3
55720: PPUSH
55721: CALL_OW 313
55725: ST_TO_ADDR
// if t then
55726: LD_VAR 0 4
55730: IFFALSE 55778
// for j in t do
55732: LD_ADDR_VAR 0 7
55736: PUSH
55737: LD_VAR 0 4
55741: PUSH
55742: FOR_IN
55743: IFFALSE 55776
// result := Insert ( result , result + 1 , j ) ;
55745: LD_ADDR_VAR 0 2
55749: PUSH
55750: LD_VAR 0 2
55754: PPUSH
55755: LD_VAR 0 2
55759: PUSH
55760: LD_INT 1
55762: PLUS
55763: PPUSH
55764: LD_VAR 0 7
55768: PPUSH
55769: CALL_OW 2
55773: ST_TO_ADDR
55774: GO 55742
55776: POP
55777: POP
// end ;
55778: GO 55708
55780: POP
55781: POP
// if not result then
55782: LD_VAR 0 2
55786: NOT
55787: IFFALSE 55791
// exit ;
55789: GO 55939
// mech := result [ 1 ] ;
55791: LD_ADDR_VAR 0 5
55795: PUSH
55796: LD_VAR 0 2
55800: PUSH
55801: LD_INT 1
55803: ARRAY
55804: ST_TO_ADDR
// if result > 1 then
55805: LD_VAR 0 2
55809: PUSH
55810: LD_INT 1
55812: GREATER
55813: IFFALSE 55925
// for i = 2 to result do
55815: LD_ADDR_VAR 0 3
55819: PUSH
55820: DOUBLE
55821: LD_INT 2
55823: DEC
55824: ST_TO_ADDR
55825: LD_VAR 0 2
55829: PUSH
55830: FOR_TO
55831: IFFALSE 55923
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55833: LD_ADDR_VAR 0 4
55837: PUSH
55838: LD_VAR 0 2
55842: PUSH
55843: LD_VAR 0 3
55847: ARRAY
55848: PPUSH
55849: LD_INT 3
55851: PPUSH
55852: CALL_OW 259
55856: PUSH
55857: LD_VAR 0 2
55861: PUSH
55862: LD_VAR 0 3
55866: ARRAY
55867: PPUSH
55868: CALL_OW 432
55872: MINUS
55873: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55874: LD_VAR 0 4
55878: PUSH
55879: LD_VAR 0 5
55883: PPUSH
55884: LD_INT 3
55886: PPUSH
55887: CALL_OW 259
55891: PUSH
55892: LD_VAR 0 5
55896: PPUSH
55897: CALL_OW 432
55901: MINUS
55902: GREATEREQUAL
55903: IFFALSE 55921
// mech := result [ i ] ;
55905: LD_ADDR_VAR 0 5
55909: PUSH
55910: LD_VAR 0 2
55914: PUSH
55915: LD_VAR 0 3
55919: ARRAY
55920: ST_TO_ADDR
// end ;
55921: GO 55830
55923: POP
55924: POP
// ComLinkTo ( vehicle , mech ) ;
55925: LD_VAR 0 1
55929: PPUSH
55930: LD_VAR 0 5
55934: PPUSH
55935: CALL_OW 135
// end ;
55939: LD_VAR 0 2
55943: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55944: LD_INT 0
55946: PPUSH
55947: PPUSH
55948: PPUSH
55949: PPUSH
55950: PPUSH
55951: PPUSH
55952: PPUSH
55953: PPUSH
55954: PPUSH
55955: PPUSH
55956: PPUSH
55957: PPUSH
55958: PPUSH
// result := [ ] ;
55959: LD_ADDR_VAR 0 7
55963: PUSH
55964: EMPTY
55965: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55966: LD_VAR 0 1
55970: PPUSH
55971: CALL_OW 266
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: IN
55986: NOT
55987: IFFALSE 55991
// exit ;
55989: GO 57622
// if name then
55991: LD_VAR 0 3
55995: IFFALSE 56011
// SetBName ( base_dep , name ) ;
55997: LD_VAR 0 1
56001: PPUSH
56002: LD_VAR 0 3
56006: PPUSH
56007: CALL_OW 500
// base := GetBase ( base_dep ) ;
56011: LD_ADDR_VAR 0 15
56015: PUSH
56016: LD_VAR 0 1
56020: PPUSH
56021: CALL_OW 274
56025: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
56026: LD_ADDR_VAR 0 16
56030: PUSH
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 255
56040: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
56041: LD_ADDR_VAR 0 17
56045: PUSH
56046: LD_VAR 0 1
56050: PPUSH
56051: CALL_OW 248
56055: ST_TO_ADDR
// if sources then
56056: LD_VAR 0 5
56060: IFFALSE 56107
// for i = 1 to 3 do
56062: LD_ADDR_VAR 0 8
56066: PUSH
56067: DOUBLE
56068: LD_INT 1
56070: DEC
56071: ST_TO_ADDR
56072: LD_INT 3
56074: PUSH
56075: FOR_TO
56076: IFFALSE 56105
// AddResourceType ( base , i , sources [ i ] ) ;
56078: LD_VAR 0 15
56082: PPUSH
56083: LD_VAR 0 8
56087: PPUSH
56088: LD_VAR 0 5
56092: PUSH
56093: LD_VAR 0 8
56097: ARRAY
56098: PPUSH
56099: CALL_OW 276
56103: GO 56075
56105: POP
56106: POP
// buildings := GetBaseBuildings ( base , area ) ;
56107: LD_ADDR_VAR 0 18
56111: PUSH
56112: LD_VAR 0 15
56116: PPUSH
56117: LD_VAR 0 2
56121: PPUSH
56122: CALL 55399 0 2
56126: ST_TO_ADDR
// InitHc ;
56127: CALL_OW 19
// InitUc ;
56131: CALL_OW 18
// uc_side := side ;
56135: LD_ADDR_OWVAR 20
56139: PUSH
56140: LD_VAR 0 16
56144: ST_TO_ADDR
// uc_nation := nation ;
56145: LD_ADDR_OWVAR 21
56149: PUSH
56150: LD_VAR 0 17
56154: ST_TO_ADDR
// if buildings then
56155: LD_VAR 0 18
56159: IFFALSE 57481
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
56161: LD_ADDR_VAR 0 19
56165: PUSH
56166: LD_VAR 0 18
56170: PPUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 30
56176: PUSH
56177: LD_INT 29
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 30
56186: PUSH
56187: LD_INT 30
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: PPUSH
56199: CALL_OW 72
56203: ST_TO_ADDR
// if tmp then
56204: LD_VAR 0 19
56208: IFFALSE 56256
// for i in tmp do
56210: LD_ADDR_VAR 0 8
56214: PUSH
56215: LD_VAR 0 19
56219: PUSH
56220: FOR_IN
56221: IFFALSE 56254
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
56223: LD_VAR 0 8
56227: PPUSH
56228: CALL_OW 250
56232: PPUSH
56233: LD_VAR 0 8
56237: PPUSH
56238: CALL_OW 251
56242: PPUSH
56243: LD_VAR 0 16
56247: PPUSH
56248: CALL_OW 441
56252: GO 56220
56254: POP
56255: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
56256: LD_VAR 0 18
56260: PPUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 30
56266: PUSH
56267: LD_INT 32
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 30
56276: PUSH
56277: LD_INT 33
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: PPUSH
56289: CALL_OW 72
56293: IFFALSE 56381
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
56295: LD_ADDR_VAR 0 8
56299: PUSH
56300: LD_VAR 0 18
56304: PPUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 30
56310: PUSH
56311: LD_INT 32
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 30
56320: PUSH
56321: LD_INT 33
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: PPUSH
56333: CALL_OW 72
56337: PUSH
56338: FOR_IN
56339: IFFALSE 56379
// begin if not GetBWeapon ( i ) then
56341: LD_VAR 0 8
56345: PPUSH
56346: CALL_OW 269
56350: NOT
56351: IFFALSE 56377
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
56353: LD_VAR 0 8
56357: PPUSH
56358: LD_VAR 0 8
56362: PPUSH
56363: LD_VAR 0 2
56367: PPUSH
56368: CALL 57627 0 2
56372: PPUSH
56373: CALL_OW 431
// end ;
56377: GO 56338
56379: POP
56380: POP
// end ; for i = 1 to personel do
56381: LD_ADDR_VAR 0 8
56385: PUSH
56386: DOUBLE
56387: LD_INT 1
56389: DEC
56390: ST_TO_ADDR
56391: LD_VAR 0 6
56395: PUSH
56396: FOR_TO
56397: IFFALSE 57461
// begin if i > 4 then
56399: LD_VAR 0 8
56403: PUSH
56404: LD_INT 4
56406: GREATER
56407: IFFALSE 56411
// break ;
56409: GO 57461
// case i of 1 :
56411: LD_VAR 0 8
56415: PUSH
56416: LD_INT 1
56418: DOUBLE
56419: EQUAL
56420: IFTRUE 56424
56422: GO 56504
56424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
56425: LD_ADDR_VAR 0 12
56429: PUSH
56430: LD_VAR 0 18
56434: PPUSH
56435: LD_INT 22
56437: PUSH
56438: LD_VAR 0 16
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 58
56449: PUSH
56450: EMPTY
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 30
56458: PUSH
56459: LD_INT 32
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 30
56468: PUSH
56469: LD_INT 4
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 30
56478: PUSH
56479: LD_INT 5
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: LIST
56496: PPUSH
56497: CALL_OW 72
56501: ST_TO_ADDR
56502: GO 56726
56504: LD_INT 2
56506: DOUBLE
56507: EQUAL
56508: IFTRUE 56512
56510: GO 56574
56512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
56513: LD_ADDR_VAR 0 12
56517: PUSH
56518: LD_VAR 0 18
56522: PPUSH
56523: LD_INT 22
56525: PUSH
56526: LD_VAR 0 16
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 30
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 30
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PPUSH
56567: CALL_OW 72
56571: ST_TO_ADDR
56572: GO 56726
56574: LD_INT 3
56576: DOUBLE
56577: EQUAL
56578: IFTRUE 56582
56580: GO 56644
56582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
56583: LD_ADDR_VAR 0 12
56587: PUSH
56588: LD_VAR 0 18
56592: PPUSH
56593: LD_INT 22
56595: PUSH
56596: LD_VAR 0 16
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: LD_INT 30
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 30
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PPUSH
56637: CALL_OW 72
56641: ST_TO_ADDR
56642: GO 56726
56644: LD_INT 4
56646: DOUBLE
56647: EQUAL
56648: IFTRUE 56652
56650: GO 56725
56652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
56653: LD_ADDR_VAR 0 12
56657: PUSH
56658: LD_VAR 0 18
56662: PPUSH
56663: LD_INT 22
56665: PUSH
56666: LD_VAR 0 16
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 30
56680: PUSH
56681: LD_INT 6
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 30
56690: PUSH
56691: LD_INT 7
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 30
56700: PUSH
56701: LD_INT 8
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PPUSH
56718: CALL_OW 72
56722: ST_TO_ADDR
56723: GO 56726
56725: POP
// if i = 1 then
56726: LD_VAR 0 8
56730: PUSH
56731: LD_INT 1
56733: EQUAL
56734: IFFALSE 56845
// begin tmp := [ ] ;
56736: LD_ADDR_VAR 0 19
56740: PUSH
56741: EMPTY
56742: ST_TO_ADDR
// for j in f do
56743: LD_ADDR_VAR 0 9
56747: PUSH
56748: LD_VAR 0 12
56752: PUSH
56753: FOR_IN
56754: IFFALSE 56827
// if GetBType ( j ) = b_bunker then
56756: LD_VAR 0 9
56760: PPUSH
56761: CALL_OW 266
56765: PUSH
56766: LD_INT 32
56768: EQUAL
56769: IFFALSE 56796
// tmp := Insert ( tmp , 1 , j ) else
56771: LD_ADDR_VAR 0 19
56775: PUSH
56776: LD_VAR 0 19
56780: PPUSH
56781: LD_INT 1
56783: PPUSH
56784: LD_VAR 0 9
56788: PPUSH
56789: CALL_OW 2
56793: ST_TO_ADDR
56794: GO 56825
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56796: LD_ADDR_VAR 0 19
56800: PUSH
56801: LD_VAR 0 19
56805: PPUSH
56806: LD_VAR 0 19
56810: PUSH
56811: LD_INT 1
56813: PLUS
56814: PPUSH
56815: LD_VAR 0 9
56819: PPUSH
56820: CALL_OW 2
56824: ST_TO_ADDR
56825: GO 56753
56827: POP
56828: POP
// if tmp then
56829: LD_VAR 0 19
56833: IFFALSE 56845
// f := tmp ;
56835: LD_ADDR_VAR 0 12
56839: PUSH
56840: LD_VAR 0 19
56844: ST_TO_ADDR
// end ; x := personel [ i ] ;
56845: LD_ADDR_VAR 0 13
56849: PUSH
56850: LD_VAR 0 6
56854: PUSH
56855: LD_VAR 0 8
56859: ARRAY
56860: ST_TO_ADDR
// if x = - 1 then
56861: LD_VAR 0 13
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: EQUAL
56870: IFFALSE 57079
// begin for j in f do
56872: LD_ADDR_VAR 0 9
56876: PUSH
56877: LD_VAR 0 12
56881: PUSH
56882: FOR_IN
56883: IFFALSE 57075
// repeat InitHc ;
56885: CALL_OW 19
// if GetBType ( j ) = b_barracks then
56889: LD_VAR 0 9
56893: PPUSH
56894: CALL_OW 266
56898: PUSH
56899: LD_INT 5
56901: EQUAL
56902: IFFALSE 56972
// begin if UnitsInside ( j ) < 3 then
56904: LD_VAR 0 9
56908: PPUSH
56909: CALL_OW 313
56913: PUSH
56914: LD_INT 3
56916: LESS
56917: IFFALSE 56953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56919: LD_INT 0
56921: PPUSH
56922: LD_INT 5
56924: PUSH
56925: LD_INT 8
56927: PUSH
56928: LD_INT 9
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: PUSH
56936: LD_VAR 0 17
56940: ARRAY
56941: PPUSH
56942: LD_VAR 0 4
56946: PPUSH
56947: CALL_OW 380
56951: GO 56970
// PrepareHuman ( false , i , skill ) ;
56953: LD_INT 0
56955: PPUSH
56956: LD_VAR 0 8
56960: PPUSH
56961: LD_VAR 0 4
56965: PPUSH
56966: CALL_OW 380
// end else
56970: GO 56989
// PrepareHuman ( false , i , skill ) ;
56972: LD_INT 0
56974: PPUSH
56975: LD_VAR 0 8
56979: PPUSH
56980: LD_VAR 0 4
56984: PPUSH
56985: CALL_OW 380
// un := CreateHuman ;
56989: LD_ADDR_VAR 0 14
56993: PUSH
56994: CALL_OW 44
56998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56999: LD_ADDR_VAR 0 7
57003: PUSH
57004: LD_VAR 0 7
57008: PPUSH
57009: LD_INT 1
57011: PPUSH
57012: LD_VAR 0 14
57016: PPUSH
57017: CALL_OW 2
57021: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
57022: LD_VAR 0 14
57026: PPUSH
57027: LD_VAR 0 9
57031: PPUSH
57032: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
57036: LD_VAR 0 9
57040: PPUSH
57041: CALL_OW 313
57045: PUSH
57046: LD_INT 6
57048: EQUAL
57049: PUSH
57050: LD_VAR 0 9
57054: PPUSH
57055: CALL_OW 266
57059: PUSH
57060: LD_INT 32
57062: PUSH
57063: LD_INT 31
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: IN
57070: OR
57071: IFFALSE 56885
57073: GO 56882
57075: POP
57076: POP
// end else
57077: GO 57459
// for j = 1 to x do
57079: LD_ADDR_VAR 0 9
57083: PUSH
57084: DOUBLE
57085: LD_INT 1
57087: DEC
57088: ST_TO_ADDR
57089: LD_VAR 0 13
57093: PUSH
57094: FOR_TO
57095: IFFALSE 57457
// begin InitHc ;
57097: CALL_OW 19
// if not f then
57101: LD_VAR 0 12
57105: NOT
57106: IFFALSE 57195
// begin PrepareHuman ( false , i , skill ) ;
57108: LD_INT 0
57110: PPUSH
57111: LD_VAR 0 8
57115: PPUSH
57116: LD_VAR 0 4
57120: PPUSH
57121: CALL_OW 380
// un := CreateHuman ;
57125: LD_ADDR_VAR 0 14
57129: PUSH
57130: CALL_OW 44
57134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57135: LD_ADDR_VAR 0 7
57139: PUSH
57140: LD_VAR 0 7
57144: PPUSH
57145: LD_INT 1
57147: PPUSH
57148: LD_VAR 0 14
57152: PPUSH
57153: CALL_OW 2
57157: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57158: LD_VAR 0 14
57162: PPUSH
57163: LD_VAR 0 1
57167: PPUSH
57168: CALL_OW 250
57172: PPUSH
57173: LD_VAR 0 1
57177: PPUSH
57178: CALL_OW 251
57182: PPUSH
57183: LD_INT 10
57185: PPUSH
57186: LD_INT 0
57188: PPUSH
57189: CALL_OW 50
// continue ;
57193: GO 57094
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
57195: LD_VAR 0 12
57199: PUSH
57200: LD_INT 1
57202: ARRAY
57203: PPUSH
57204: CALL_OW 313
57208: PUSH
57209: LD_VAR 0 12
57213: PUSH
57214: LD_INT 1
57216: ARRAY
57217: PPUSH
57218: CALL_OW 266
57222: PUSH
57223: LD_INT 32
57225: PUSH
57226: LD_INT 31
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: IN
57233: AND
57234: PUSH
57235: LD_VAR 0 12
57239: PUSH
57240: LD_INT 1
57242: ARRAY
57243: PPUSH
57244: CALL_OW 313
57248: PUSH
57249: LD_INT 6
57251: EQUAL
57252: OR
57253: IFFALSE 57273
// f := Delete ( f , 1 ) ;
57255: LD_ADDR_VAR 0 12
57259: PUSH
57260: LD_VAR 0 12
57264: PPUSH
57265: LD_INT 1
57267: PPUSH
57268: CALL_OW 3
57272: ST_TO_ADDR
// if not f then
57273: LD_VAR 0 12
57277: NOT
57278: IFFALSE 57296
// begin x := x + 2 ;
57280: LD_ADDR_VAR 0 13
57284: PUSH
57285: LD_VAR 0 13
57289: PUSH
57290: LD_INT 2
57292: PLUS
57293: ST_TO_ADDR
// continue ;
57294: GO 57094
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
57296: LD_VAR 0 12
57300: PUSH
57301: LD_INT 1
57303: ARRAY
57304: PPUSH
57305: CALL_OW 266
57309: PUSH
57310: LD_INT 5
57312: EQUAL
57313: IFFALSE 57387
// begin if UnitsInside ( f [ 1 ] ) < 3 then
57315: LD_VAR 0 12
57319: PUSH
57320: LD_INT 1
57322: ARRAY
57323: PPUSH
57324: CALL_OW 313
57328: PUSH
57329: LD_INT 3
57331: LESS
57332: IFFALSE 57368
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57334: LD_INT 0
57336: PPUSH
57337: LD_INT 5
57339: PUSH
57340: LD_INT 8
57342: PUSH
57343: LD_INT 9
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: PUSH
57351: LD_VAR 0 17
57355: ARRAY
57356: PPUSH
57357: LD_VAR 0 4
57361: PPUSH
57362: CALL_OW 380
57366: GO 57385
// PrepareHuman ( false , i , skill ) ;
57368: LD_INT 0
57370: PPUSH
57371: LD_VAR 0 8
57375: PPUSH
57376: LD_VAR 0 4
57380: PPUSH
57381: CALL_OW 380
// end else
57385: GO 57404
// PrepareHuman ( false , i , skill ) ;
57387: LD_INT 0
57389: PPUSH
57390: LD_VAR 0 8
57394: PPUSH
57395: LD_VAR 0 4
57399: PPUSH
57400: CALL_OW 380
// un := CreateHuman ;
57404: LD_ADDR_VAR 0 14
57408: PUSH
57409: CALL_OW 44
57413: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57414: LD_ADDR_VAR 0 7
57418: PUSH
57419: LD_VAR 0 7
57423: PPUSH
57424: LD_INT 1
57426: PPUSH
57427: LD_VAR 0 14
57431: PPUSH
57432: CALL_OW 2
57436: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
57437: LD_VAR 0 14
57441: PPUSH
57442: LD_VAR 0 12
57446: PUSH
57447: LD_INT 1
57449: ARRAY
57450: PPUSH
57451: CALL_OW 52
// end ;
57455: GO 57094
57457: POP
57458: POP
// end ;
57459: GO 56396
57461: POP
57462: POP
// result := result ^ buildings ;
57463: LD_ADDR_VAR 0 7
57467: PUSH
57468: LD_VAR 0 7
57472: PUSH
57473: LD_VAR 0 18
57477: ADD
57478: ST_TO_ADDR
// end else
57479: GO 57622
// begin for i = 1 to personel do
57481: LD_ADDR_VAR 0 8
57485: PUSH
57486: DOUBLE
57487: LD_INT 1
57489: DEC
57490: ST_TO_ADDR
57491: LD_VAR 0 6
57495: PUSH
57496: FOR_TO
57497: IFFALSE 57620
// begin if i > 4 then
57499: LD_VAR 0 8
57503: PUSH
57504: LD_INT 4
57506: GREATER
57507: IFFALSE 57511
// break ;
57509: GO 57620
// x := personel [ i ] ;
57511: LD_ADDR_VAR 0 13
57515: PUSH
57516: LD_VAR 0 6
57520: PUSH
57521: LD_VAR 0 8
57525: ARRAY
57526: ST_TO_ADDR
// if x = - 1 then
57527: LD_VAR 0 13
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: EQUAL
57536: IFFALSE 57540
// continue ;
57538: GO 57496
// PrepareHuman ( false , i , skill ) ;
57540: LD_INT 0
57542: PPUSH
57543: LD_VAR 0 8
57547: PPUSH
57548: LD_VAR 0 4
57552: PPUSH
57553: CALL_OW 380
// un := CreateHuman ;
57557: LD_ADDR_VAR 0 14
57561: PUSH
57562: CALL_OW 44
57566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57567: LD_VAR 0 14
57571: PPUSH
57572: LD_VAR 0 1
57576: PPUSH
57577: CALL_OW 250
57581: PPUSH
57582: LD_VAR 0 1
57586: PPUSH
57587: CALL_OW 251
57591: PPUSH
57592: LD_INT 10
57594: PPUSH
57595: LD_INT 0
57597: PPUSH
57598: CALL_OW 50
// result := result ^ un ;
57602: LD_ADDR_VAR 0 7
57606: PUSH
57607: LD_VAR 0 7
57611: PUSH
57612: LD_VAR 0 14
57616: ADD
57617: ST_TO_ADDR
// end ;
57618: GO 57496
57620: POP
57621: POP
// end ; end ;
57622: LD_VAR 0 7
57626: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
57627: LD_INT 0
57629: PPUSH
57630: PPUSH
57631: PPUSH
57632: PPUSH
57633: PPUSH
57634: PPUSH
57635: PPUSH
57636: PPUSH
57637: PPUSH
57638: PPUSH
57639: PPUSH
57640: PPUSH
57641: PPUSH
57642: PPUSH
57643: PPUSH
57644: PPUSH
// result := false ;
57645: LD_ADDR_VAR 0 3
57649: PUSH
57650: LD_INT 0
57652: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
57653: LD_VAR 0 1
57657: NOT
57658: PUSH
57659: LD_VAR 0 1
57663: PPUSH
57664: CALL_OW 266
57668: PUSH
57669: LD_INT 32
57671: PUSH
57672: LD_INT 33
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: IN
57679: NOT
57680: OR
57681: IFFALSE 57685
// exit ;
57683: GO 58821
// nat := GetNation ( tower ) ;
57685: LD_ADDR_VAR 0 12
57689: PUSH
57690: LD_VAR 0 1
57694: PPUSH
57695: CALL_OW 248
57699: ST_TO_ADDR
// side := GetSide ( tower ) ;
57700: LD_ADDR_VAR 0 16
57704: PUSH
57705: LD_VAR 0 1
57709: PPUSH
57710: CALL_OW 255
57714: ST_TO_ADDR
// x := GetX ( tower ) ;
57715: LD_ADDR_VAR 0 10
57719: PUSH
57720: LD_VAR 0 1
57724: PPUSH
57725: CALL_OW 250
57729: ST_TO_ADDR
// y := GetY ( tower ) ;
57730: LD_ADDR_VAR 0 11
57734: PUSH
57735: LD_VAR 0 1
57739: PPUSH
57740: CALL_OW 251
57744: ST_TO_ADDR
// if not x or not y then
57745: LD_VAR 0 10
57749: NOT
57750: PUSH
57751: LD_VAR 0 11
57755: NOT
57756: OR
57757: IFFALSE 57761
// exit ;
57759: GO 58821
// weapon := 0 ;
57761: LD_ADDR_VAR 0 18
57765: PUSH
57766: LD_INT 0
57768: ST_TO_ADDR
// fac_list := [ ] ;
57769: LD_ADDR_VAR 0 17
57773: PUSH
57774: EMPTY
57775: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
57776: LD_ADDR_VAR 0 6
57780: PUSH
57781: LD_VAR 0 1
57785: PPUSH
57786: CALL_OW 274
57790: PPUSH
57791: LD_VAR 0 2
57795: PPUSH
57796: CALL 55399 0 2
57800: PPUSH
57801: LD_INT 30
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PPUSH
57811: CALL_OW 72
57815: ST_TO_ADDR
// if not factories then
57816: LD_VAR 0 6
57820: NOT
57821: IFFALSE 57825
// exit ;
57823: GO 58821
// for i in factories do
57825: LD_ADDR_VAR 0 8
57829: PUSH
57830: LD_VAR 0 6
57834: PUSH
57835: FOR_IN
57836: IFFALSE 57861
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57838: LD_ADDR_VAR 0 17
57842: PUSH
57843: LD_VAR 0 17
57847: PUSH
57848: LD_VAR 0 8
57852: PPUSH
57853: CALL_OW 478
57857: UNION
57858: ST_TO_ADDR
57859: GO 57835
57861: POP
57862: POP
// if not fac_list then
57863: LD_VAR 0 17
57867: NOT
57868: IFFALSE 57872
// exit ;
57870: GO 58821
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57872: LD_ADDR_VAR 0 5
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: LD_INT 5
57882: PUSH
57883: LD_INT 9
57885: PUSH
57886: LD_INT 10
57888: PUSH
57889: LD_INT 6
57891: PUSH
57892: LD_INT 7
57894: PUSH
57895: LD_INT 11
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 27
57909: PUSH
57910: LD_INT 28
57912: PUSH
57913: LD_INT 26
57915: PUSH
57916: LD_INT 30
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 43
57927: PUSH
57928: LD_INT 44
57930: PUSH
57931: LD_INT 46
57933: PUSH
57934: LD_INT 45
57936: PUSH
57937: LD_INT 47
57939: PUSH
57940: LD_INT 49
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: PUSH
57956: LD_VAR 0 12
57960: ARRAY
57961: ST_TO_ADDR
// for i in list do
57962: LD_ADDR_VAR 0 8
57966: PUSH
57967: LD_VAR 0 5
57971: PUSH
57972: FOR_IN
57973: IFFALSE 58006
// if not i in fac_list then
57975: LD_VAR 0 8
57979: PUSH
57980: LD_VAR 0 17
57984: IN
57985: NOT
57986: IFFALSE 58004
// list := list diff i ;
57988: LD_ADDR_VAR 0 5
57992: PUSH
57993: LD_VAR 0 5
57997: PUSH
57998: LD_VAR 0 8
58002: DIFF
58003: ST_TO_ADDR
58004: GO 57972
58006: POP
58007: POP
// if not list then
58008: LD_VAR 0 5
58012: NOT
58013: IFFALSE 58017
// exit ;
58015: GO 58821
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
58017: LD_VAR 0 12
58021: PUSH
58022: LD_INT 3
58024: EQUAL
58025: PUSH
58026: LD_INT 49
58028: PUSH
58029: LD_VAR 0 5
58033: IN
58034: AND
58035: PUSH
58036: LD_INT 31
58038: PPUSH
58039: LD_VAR 0 16
58043: PPUSH
58044: CALL_OW 321
58048: PUSH
58049: LD_INT 2
58051: EQUAL
58052: AND
58053: IFFALSE 58113
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
58055: LD_INT 22
58057: PUSH
58058: LD_VAR 0 16
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 35
58069: PUSH
58070: LD_INT 49
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 91
58079: PUSH
58080: LD_VAR 0 1
58084: PUSH
58085: LD_INT 10
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: PPUSH
58098: CALL_OW 69
58102: NOT
58103: IFFALSE 58113
// weapon := ru_time_lapser ;
58105: LD_ADDR_VAR 0 18
58109: PUSH
58110: LD_INT 49
58112: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
58113: LD_VAR 0 12
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: IN
58128: PUSH
58129: LD_INT 11
58131: PUSH
58132: LD_VAR 0 5
58136: IN
58137: PUSH
58138: LD_INT 30
58140: PUSH
58141: LD_VAR 0 5
58145: IN
58146: OR
58147: AND
58148: PUSH
58149: LD_INT 6
58151: PPUSH
58152: LD_VAR 0 16
58156: PPUSH
58157: CALL_OW 321
58161: PUSH
58162: LD_INT 2
58164: EQUAL
58165: AND
58166: IFFALSE 58331
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
58168: LD_INT 22
58170: PUSH
58171: LD_VAR 0 16
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 35
58185: PUSH
58186: LD_INT 11
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 35
58195: PUSH
58196: LD_INT 30
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 91
58210: PUSH
58211: LD_VAR 0 1
58215: PUSH
58216: LD_INT 18
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: PPUSH
58229: CALL_OW 69
58233: NOT
58234: PUSH
58235: LD_INT 22
58237: PUSH
58238: LD_VAR 0 16
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 30
58252: PUSH
58253: LD_INT 32
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 30
58262: PUSH
58263: LD_INT 33
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 91
58277: PUSH
58278: LD_VAR 0 1
58282: PUSH
58283: LD_INT 12
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: PPUSH
58299: CALL_OW 69
58303: PUSH
58304: LD_INT 2
58306: GREATER
58307: AND
58308: IFFALSE 58331
// weapon := [ us_radar , ar_radar ] [ nat ] ;
58310: LD_ADDR_VAR 0 18
58314: PUSH
58315: LD_INT 11
58317: PUSH
58318: LD_INT 30
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_VAR 0 12
58329: ARRAY
58330: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
58331: LD_VAR 0 18
58335: NOT
58336: PUSH
58337: LD_INT 40
58339: PPUSH
58340: LD_VAR 0 16
58344: PPUSH
58345: CALL_OW 321
58349: PUSH
58350: LD_INT 2
58352: EQUAL
58353: AND
58354: PUSH
58355: LD_INT 7
58357: PUSH
58358: LD_VAR 0 5
58362: IN
58363: PUSH
58364: LD_INT 28
58366: PUSH
58367: LD_VAR 0 5
58371: IN
58372: OR
58373: PUSH
58374: LD_INT 45
58376: PUSH
58377: LD_VAR 0 5
58381: IN
58382: OR
58383: AND
58384: IFFALSE 58638
// begin hex := GetHexInfo ( x , y ) ;
58386: LD_ADDR_VAR 0 4
58390: PUSH
58391: LD_VAR 0 10
58395: PPUSH
58396: LD_VAR 0 11
58400: PPUSH
58401: CALL_OW 546
58405: ST_TO_ADDR
// if hex [ 1 ] then
58406: LD_VAR 0 4
58410: PUSH
58411: LD_INT 1
58413: ARRAY
58414: IFFALSE 58418
// exit ;
58416: GO 58821
// height := hex [ 2 ] ;
58418: LD_ADDR_VAR 0 15
58422: PUSH
58423: LD_VAR 0 4
58427: PUSH
58428: LD_INT 2
58430: ARRAY
58431: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
58432: LD_ADDR_VAR 0 14
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: LD_INT 5
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: ST_TO_ADDR
// for i in tmp do
58455: LD_ADDR_VAR 0 8
58459: PUSH
58460: LD_VAR 0 14
58464: PUSH
58465: FOR_IN
58466: IFFALSE 58636
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
58468: LD_ADDR_VAR 0 9
58472: PUSH
58473: LD_VAR 0 10
58477: PPUSH
58478: LD_VAR 0 8
58482: PPUSH
58483: LD_INT 5
58485: PPUSH
58486: CALL_OW 272
58490: PUSH
58491: LD_VAR 0 11
58495: PPUSH
58496: LD_VAR 0 8
58500: PPUSH
58501: LD_INT 5
58503: PPUSH
58504: CALL_OW 273
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58513: LD_VAR 0 9
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: PPUSH
58522: LD_VAR 0 9
58526: PUSH
58527: LD_INT 2
58529: ARRAY
58530: PPUSH
58531: CALL_OW 488
58535: IFFALSE 58634
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
58537: LD_ADDR_VAR 0 4
58541: PUSH
58542: LD_VAR 0 9
58546: PUSH
58547: LD_INT 1
58549: ARRAY
58550: PPUSH
58551: LD_VAR 0 9
58555: PUSH
58556: LD_INT 2
58558: ARRAY
58559: PPUSH
58560: CALL_OW 546
58564: ST_TO_ADDR
// if hex [ 1 ] then
58565: LD_VAR 0 4
58569: PUSH
58570: LD_INT 1
58572: ARRAY
58573: IFFALSE 58577
// continue ;
58575: GO 58465
// h := hex [ 2 ] ;
58577: LD_ADDR_VAR 0 13
58581: PUSH
58582: LD_VAR 0 4
58586: PUSH
58587: LD_INT 2
58589: ARRAY
58590: ST_TO_ADDR
// if h + 7 < height then
58591: LD_VAR 0 13
58595: PUSH
58596: LD_INT 7
58598: PLUS
58599: PUSH
58600: LD_VAR 0 15
58604: LESS
58605: IFFALSE 58634
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
58607: LD_ADDR_VAR 0 18
58611: PUSH
58612: LD_INT 7
58614: PUSH
58615: LD_INT 28
58617: PUSH
58618: LD_INT 45
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: PUSH
58626: LD_VAR 0 12
58630: ARRAY
58631: ST_TO_ADDR
// break ;
58632: GO 58636
// end ; end ; end ;
58634: GO 58465
58636: POP
58637: POP
// end ; if not weapon then
58638: LD_VAR 0 18
58642: NOT
58643: IFFALSE 58703
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
58645: LD_ADDR_VAR 0 5
58649: PUSH
58650: LD_VAR 0 5
58654: PUSH
58655: LD_INT 11
58657: PUSH
58658: LD_INT 30
58660: PUSH
58661: LD_INT 49
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: LIST
58668: DIFF
58669: ST_TO_ADDR
// if not list then
58670: LD_VAR 0 5
58674: NOT
58675: IFFALSE 58679
// exit ;
58677: GO 58821
// weapon := list [ rand ( 1 , list ) ] ;
58679: LD_ADDR_VAR 0 18
58683: PUSH
58684: LD_VAR 0 5
58688: PUSH
58689: LD_INT 1
58691: PPUSH
58692: LD_VAR 0 5
58696: PPUSH
58697: CALL_OW 12
58701: ARRAY
58702: ST_TO_ADDR
// end ; if weapon then
58703: LD_VAR 0 18
58707: IFFALSE 58821
// begin tmp := CostOfWeapon ( weapon ) ;
58709: LD_ADDR_VAR 0 14
58713: PUSH
58714: LD_VAR 0 18
58718: PPUSH
58719: CALL_OW 451
58723: ST_TO_ADDR
// j := GetBase ( tower ) ;
58724: LD_ADDR_VAR 0 9
58728: PUSH
58729: LD_VAR 0 1
58733: PPUSH
58734: CALL_OW 274
58738: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58739: LD_VAR 0 9
58743: PPUSH
58744: LD_INT 1
58746: PPUSH
58747: CALL_OW 275
58751: PUSH
58752: LD_VAR 0 14
58756: PUSH
58757: LD_INT 1
58759: ARRAY
58760: GREATEREQUAL
58761: PUSH
58762: LD_VAR 0 9
58766: PPUSH
58767: LD_INT 2
58769: PPUSH
58770: CALL_OW 275
58774: PUSH
58775: LD_VAR 0 14
58779: PUSH
58780: LD_INT 2
58782: ARRAY
58783: GREATEREQUAL
58784: AND
58785: PUSH
58786: LD_VAR 0 9
58790: PPUSH
58791: LD_INT 3
58793: PPUSH
58794: CALL_OW 275
58798: PUSH
58799: LD_VAR 0 14
58803: PUSH
58804: LD_INT 3
58806: ARRAY
58807: GREATEREQUAL
58808: AND
58809: IFFALSE 58821
// result := weapon ;
58811: LD_ADDR_VAR 0 3
58815: PUSH
58816: LD_VAR 0 18
58820: ST_TO_ADDR
// end ; end ;
58821: LD_VAR 0 3
58825: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58826: LD_INT 0
58828: PPUSH
58829: PPUSH
// result := true ;
58830: LD_ADDR_VAR 0 3
58834: PUSH
58835: LD_INT 1
58837: ST_TO_ADDR
// if array1 = array2 then
58838: LD_VAR 0 1
58842: PUSH
58843: LD_VAR 0 2
58847: EQUAL
58848: IFFALSE 58908
// begin for i = 1 to array1 do
58850: LD_ADDR_VAR 0 4
58854: PUSH
58855: DOUBLE
58856: LD_INT 1
58858: DEC
58859: ST_TO_ADDR
58860: LD_VAR 0 1
58864: PUSH
58865: FOR_TO
58866: IFFALSE 58904
// if array1 [ i ] <> array2 [ i ] then
58868: LD_VAR 0 1
58872: PUSH
58873: LD_VAR 0 4
58877: ARRAY
58878: PUSH
58879: LD_VAR 0 2
58883: PUSH
58884: LD_VAR 0 4
58888: ARRAY
58889: NONEQUAL
58890: IFFALSE 58902
// begin result := false ;
58892: LD_ADDR_VAR 0 3
58896: PUSH
58897: LD_INT 0
58899: ST_TO_ADDR
// break ;
58900: GO 58904
// end ;
58902: GO 58865
58904: POP
58905: POP
// end else
58906: GO 58916
// result := false ;
58908: LD_ADDR_VAR 0 3
58912: PUSH
58913: LD_INT 0
58915: ST_TO_ADDR
// end ;
58916: LD_VAR 0 3
58920: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58921: LD_INT 0
58923: PPUSH
58924: PPUSH
58925: PPUSH
// pom := GetBase ( fac ) ;
58926: LD_ADDR_VAR 0 5
58930: PUSH
58931: LD_VAR 0 1
58935: PPUSH
58936: CALL_OW 274
58940: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
58941: LD_ADDR_VAR 0 4
58945: PUSH
58946: LD_VAR 0 2
58950: PUSH
58951: LD_INT 1
58953: ARRAY
58954: PPUSH
58955: LD_VAR 0 2
58959: PUSH
58960: LD_INT 2
58962: ARRAY
58963: PPUSH
58964: LD_VAR 0 2
58968: PUSH
58969: LD_INT 3
58971: ARRAY
58972: PPUSH
58973: LD_VAR 0 2
58977: PUSH
58978: LD_INT 4
58980: ARRAY
58981: PPUSH
58982: CALL_OW 449
58986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58987: LD_ADDR_VAR 0 3
58991: PUSH
58992: LD_VAR 0 5
58996: PPUSH
58997: LD_INT 1
58999: PPUSH
59000: CALL_OW 275
59004: PUSH
59005: LD_VAR 0 4
59009: PUSH
59010: LD_INT 1
59012: ARRAY
59013: GREATEREQUAL
59014: PUSH
59015: LD_VAR 0 5
59019: PPUSH
59020: LD_INT 2
59022: PPUSH
59023: CALL_OW 275
59027: PUSH
59028: LD_VAR 0 4
59032: PUSH
59033: LD_INT 2
59035: ARRAY
59036: GREATEREQUAL
59037: AND
59038: PUSH
59039: LD_VAR 0 5
59043: PPUSH
59044: LD_INT 3
59046: PPUSH
59047: CALL_OW 275
59051: PUSH
59052: LD_VAR 0 4
59056: PUSH
59057: LD_INT 3
59059: ARRAY
59060: GREATEREQUAL
59061: AND
59062: ST_TO_ADDR
// end ;
59063: LD_VAR 0 3
59067: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
59068: LD_INT 0
59070: PPUSH
59071: PPUSH
59072: PPUSH
59073: PPUSH
// pom := GetBase ( building ) ;
59074: LD_ADDR_VAR 0 3
59078: PUSH
59079: LD_VAR 0 1
59083: PPUSH
59084: CALL_OW 274
59088: ST_TO_ADDR
// if not pom then
59089: LD_VAR 0 3
59093: NOT
59094: IFFALSE 59098
// exit ;
59096: GO 59268
// btype := GetBType ( building ) ;
59098: LD_ADDR_VAR 0 5
59102: PUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: CALL_OW 266
59112: ST_TO_ADDR
// if btype = b_armoury then
59113: LD_VAR 0 5
59117: PUSH
59118: LD_INT 4
59120: EQUAL
59121: IFFALSE 59131
// btype := b_barracks ;
59123: LD_ADDR_VAR 0 5
59127: PUSH
59128: LD_INT 5
59130: ST_TO_ADDR
// if btype = b_depot then
59131: LD_VAR 0 5
59135: PUSH
59136: LD_INT 0
59138: EQUAL
59139: IFFALSE 59149
// btype := b_warehouse ;
59141: LD_ADDR_VAR 0 5
59145: PUSH
59146: LD_INT 1
59148: ST_TO_ADDR
// if btype = b_workshop then
59149: LD_VAR 0 5
59153: PUSH
59154: LD_INT 2
59156: EQUAL
59157: IFFALSE 59167
// btype := b_factory ;
59159: LD_ADDR_VAR 0 5
59163: PUSH
59164: LD_INT 3
59166: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59167: LD_ADDR_VAR 0 4
59171: PUSH
59172: LD_VAR 0 5
59176: PPUSH
59177: LD_VAR 0 1
59181: PPUSH
59182: CALL_OW 248
59186: PPUSH
59187: CALL_OW 450
59191: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59192: LD_ADDR_VAR 0 2
59196: PUSH
59197: LD_VAR 0 3
59201: PPUSH
59202: LD_INT 1
59204: PPUSH
59205: CALL_OW 275
59209: PUSH
59210: LD_VAR 0 4
59214: PUSH
59215: LD_INT 1
59217: ARRAY
59218: GREATEREQUAL
59219: PUSH
59220: LD_VAR 0 3
59224: PPUSH
59225: LD_INT 2
59227: PPUSH
59228: CALL_OW 275
59232: PUSH
59233: LD_VAR 0 4
59237: PUSH
59238: LD_INT 2
59240: ARRAY
59241: GREATEREQUAL
59242: AND
59243: PUSH
59244: LD_VAR 0 3
59248: PPUSH
59249: LD_INT 3
59251: PPUSH
59252: CALL_OW 275
59256: PUSH
59257: LD_VAR 0 4
59261: PUSH
59262: LD_INT 3
59264: ARRAY
59265: GREATEREQUAL
59266: AND
59267: ST_TO_ADDR
// end ;
59268: LD_VAR 0 2
59272: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
59273: LD_INT 0
59275: PPUSH
59276: PPUSH
59277: PPUSH
// pom := GetBase ( building ) ;
59278: LD_ADDR_VAR 0 4
59282: PUSH
59283: LD_VAR 0 1
59287: PPUSH
59288: CALL_OW 274
59292: ST_TO_ADDR
// if not pom then
59293: LD_VAR 0 4
59297: NOT
59298: IFFALSE 59302
// exit ;
59300: GO 59403
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59302: LD_ADDR_VAR 0 5
59306: PUSH
59307: LD_VAR 0 2
59311: PPUSH
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 248
59321: PPUSH
59322: CALL_OW 450
59326: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59327: LD_ADDR_VAR 0 3
59331: PUSH
59332: LD_VAR 0 4
59336: PPUSH
59337: LD_INT 1
59339: PPUSH
59340: CALL_OW 275
59344: PUSH
59345: LD_VAR 0 5
59349: PUSH
59350: LD_INT 1
59352: ARRAY
59353: GREATEREQUAL
59354: PUSH
59355: LD_VAR 0 4
59359: PPUSH
59360: LD_INT 2
59362: PPUSH
59363: CALL_OW 275
59367: PUSH
59368: LD_VAR 0 5
59372: PUSH
59373: LD_INT 2
59375: ARRAY
59376: GREATEREQUAL
59377: AND
59378: PUSH
59379: LD_VAR 0 4
59383: PPUSH
59384: LD_INT 3
59386: PPUSH
59387: CALL_OW 275
59391: PUSH
59392: LD_VAR 0 5
59396: PUSH
59397: LD_INT 3
59399: ARRAY
59400: GREATEREQUAL
59401: AND
59402: ST_TO_ADDR
// end ;
59403: LD_VAR 0 3
59407: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
59408: LD_INT 0
59410: PPUSH
59411: PPUSH
59412: PPUSH
59413: PPUSH
59414: PPUSH
59415: PPUSH
59416: PPUSH
59417: PPUSH
59418: PPUSH
59419: PPUSH
// result := false ;
59420: LD_ADDR_VAR 0 6
59424: PUSH
59425: LD_INT 0
59427: ST_TO_ADDR
// if not base or not btype or not x or not y then
59428: LD_VAR 0 1
59432: NOT
59433: PUSH
59434: LD_VAR 0 2
59438: NOT
59439: OR
59440: PUSH
59441: LD_VAR 0 3
59445: NOT
59446: OR
59447: PUSH
59448: LD_VAR 0 4
59452: NOT
59453: OR
59454: IFFALSE 59458
// exit ;
59456: GO 60049
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
59458: LD_ADDR_VAR 0 12
59462: PUSH
59463: LD_VAR 0 2
59467: PPUSH
59468: LD_VAR 0 3
59472: PPUSH
59473: LD_VAR 0 4
59477: PPUSH
59478: LD_VAR 0 5
59482: PPUSH
59483: LD_VAR 0 1
59487: PUSH
59488: LD_INT 1
59490: ARRAY
59491: PPUSH
59492: CALL_OW 248
59496: PPUSH
59497: LD_INT 0
59499: PPUSH
59500: CALL 60886 0 6
59504: ST_TO_ADDR
// if not hexes then
59505: LD_VAR 0 12
59509: NOT
59510: IFFALSE 59514
// exit ;
59512: GO 60049
// for i = 1 to hexes do
59514: LD_ADDR_VAR 0 7
59518: PUSH
59519: DOUBLE
59520: LD_INT 1
59522: DEC
59523: ST_TO_ADDR
59524: LD_VAR 0 12
59528: PUSH
59529: FOR_TO
59530: IFFALSE 60047
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59532: LD_ADDR_VAR 0 11
59536: PUSH
59537: LD_VAR 0 12
59541: PUSH
59542: LD_VAR 0 7
59546: ARRAY
59547: PUSH
59548: LD_INT 1
59550: ARRAY
59551: PPUSH
59552: LD_VAR 0 12
59556: PUSH
59557: LD_VAR 0 7
59561: ARRAY
59562: PUSH
59563: LD_INT 2
59565: ARRAY
59566: PPUSH
59567: CALL_OW 428
59571: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59572: LD_VAR 0 12
59576: PUSH
59577: LD_VAR 0 7
59581: ARRAY
59582: PUSH
59583: LD_INT 1
59585: ARRAY
59586: PPUSH
59587: LD_VAR 0 12
59591: PUSH
59592: LD_VAR 0 7
59596: ARRAY
59597: PUSH
59598: LD_INT 2
59600: ARRAY
59601: PPUSH
59602: CALL_OW 351
59606: PUSH
59607: LD_VAR 0 12
59611: PUSH
59612: LD_VAR 0 7
59616: ARRAY
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: PPUSH
59622: LD_VAR 0 12
59626: PUSH
59627: LD_VAR 0 7
59631: ARRAY
59632: PUSH
59633: LD_INT 2
59635: ARRAY
59636: PPUSH
59637: CALL_OW 488
59641: NOT
59642: OR
59643: PUSH
59644: LD_VAR 0 11
59648: PPUSH
59649: CALL_OW 247
59653: PUSH
59654: LD_INT 3
59656: EQUAL
59657: OR
59658: IFFALSE 59664
// exit ;
59660: POP
59661: POP
59662: GO 60049
// if not tmp then
59664: LD_VAR 0 11
59668: NOT
59669: IFFALSE 59673
// continue ;
59671: GO 59529
// result := true ;
59673: LD_ADDR_VAR 0 6
59677: PUSH
59678: LD_INT 1
59680: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59681: LD_ADDR_VAR 0 15
59685: PUSH
59686: LD_INT 22
59688: PUSH
59689: LD_VAR 0 11
59693: PPUSH
59694: CALL_OW 255
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 30
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 30
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PPUSH
59735: CALL_OW 69
59739: ST_TO_ADDR
// if dep then
59740: LD_VAR 0 15
59744: IFFALSE 59880
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
59746: LD_ADDR_VAR 0 14
59750: PUSH
59751: LD_VAR 0 15
59755: PUSH
59756: LD_INT 1
59758: ARRAY
59759: PPUSH
59760: CALL_OW 250
59764: PPUSH
59765: LD_VAR 0 15
59769: PUSH
59770: LD_INT 1
59772: ARRAY
59773: PPUSH
59774: CALL_OW 254
59778: PPUSH
59779: LD_INT 5
59781: PPUSH
59782: CALL_OW 272
59786: PUSH
59787: LD_VAR 0 15
59791: PUSH
59792: LD_INT 1
59794: ARRAY
59795: PPUSH
59796: CALL_OW 251
59800: PPUSH
59801: LD_VAR 0 15
59805: PUSH
59806: LD_INT 1
59808: ARRAY
59809: PPUSH
59810: CALL_OW 254
59814: PPUSH
59815: LD_INT 5
59817: PPUSH
59818: CALL_OW 273
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
59827: LD_VAR 0 14
59831: PUSH
59832: LD_INT 1
59834: ARRAY
59835: PPUSH
59836: LD_VAR 0 14
59840: PUSH
59841: LD_INT 2
59843: ARRAY
59844: PPUSH
59845: CALL_OW 488
59849: IFFALSE 59880
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
59851: LD_VAR 0 11
59855: PPUSH
59856: LD_VAR 0 14
59860: PUSH
59861: LD_INT 1
59863: ARRAY
59864: PPUSH
59865: LD_VAR 0 14
59869: PUSH
59870: LD_INT 2
59872: ARRAY
59873: PPUSH
59874: CALL_OW 111
// continue ;
59878: GO 59529
// end ; end ; r := GetDir ( tmp ) ;
59880: LD_ADDR_VAR 0 13
59884: PUSH
59885: LD_VAR 0 11
59889: PPUSH
59890: CALL_OW 254
59894: ST_TO_ADDR
// if r = 5 then
59895: LD_VAR 0 13
59899: PUSH
59900: LD_INT 5
59902: EQUAL
59903: IFFALSE 59913
// r := 0 ;
59905: LD_ADDR_VAR 0 13
59909: PUSH
59910: LD_INT 0
59912: ST_TO_ADDR
// for j = r to 5 do
59913: LD_ADDR_VAR 0 8
59917: PUSH
59918: DOUBLE
59919: LD_VAR 0 13
59923: DEC
59924: ST_TO_ADDR
59925: LD_INT 5
59927: PUSH
59928: FOR_TO
59929: IFFALSE 60043
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
59931: LD_ADDR_VAR 0 9
59935: PUSH
59936: LD_VAR 0 11
59940: PPUSH
59941: CALL_OW 250
59945: PPUSH
59946: LD_VAR 0 8
59950: PPUSH
59951: LD_INT 2
59953: PPUSH
59954: CALL_OW 272
59958: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
59959: LD_ADDR_VAR 0 10
59963: PUSH
59964: LD_VAR 0 11
59968: PPUSH
59969: CALL_OW 251
59973: PPUSH
59974: LD_VAR 0 8
59978: PPUSH
59979: LD_INT 2
59981: PPUSH
59982: CALL_OW 273
59986: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
59987: LD_VAR 0 9
59991: PPUSH
59992: LD_VAR 0 10
59996: PPUSH
59997: CALL_OW 488
60001: PUSH
60002: LD_VAR 0 9
60006: PPUSH
60007: LD_VAR 0 10
60011: PPUSH
60012: CALL_OW 428
60016: NOT
60017: AND
60018: IFFALSE 60041
// begin ComMoveXY ( tmp , _x , _y ) ;
60020: LD_VAR 0 11
60024: PPUSH
60025: LD_VAR 0 9
60029: PPUSH
60030: LD_VAR 0 10
60034: PPUSH
60035: CALL_OW 111
// break ;
60039: GO 60043
// end ; end ;
60041: GO 59928
60043: POP
60044: POP
// end ;
60045: GO 59529
60047: POP
60048: POP
// end ;
60049: LD_VAR 0 6
60053: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
60054: LD_INT 0
60056: PPUSH
60057: PPUSH
60058: PPUSH
60059: PPUSH
60060: PPUSH
60061: PPUSH
60062: PPUSH
60063: PPUSH
60064: PPUSH
60065: PPUSH
// result := false ;
60066: LD_ADDR_VAR 0 6
60070: PUSH
60071: LD_INT 0
60073: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
60074: LD_VAR 0 1
60078: NOT
60079: PUSH
60080: LD_VAR 0 1
60084: PPUSH
60085: CALL_OW 266
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: IN
60100: NOT
60101: OR
60102: PUSH
60103: LD_VAR 0 2
60107: NOT
60108: OR
60109: PUSH
60110: LD_VAR 0 5
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: LD_INT 5
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: IN
60141: NOT
60142: OR
60143: PUSH
60144: LD_VAR 0 3
60148: PPUSH
60149: LD_VAR 0 4
60153: PPUSH
60154: CALL_OW 488
60158: NOT
60159: OR
60160: IFFALSE 60164
// exit ;
60162: GO 60881
// pom := GetBase ( depot ) ;
60164: LD_ADDR_VAR 0 10
60168: PUSH
60169: LD_VAR 0 1
60173: PPUSH
60174: CALL_OW 274
60178: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
60179: LD_ADDR_VAR 0 11
60183: PUSH
60184: LD_VAR 0 2
60188: PPUSH
60189: LD_VAR 0 1
60193: PPUSH
60194: CALL_OW 248
60198: PPUSH
60199: CALL_OW 450
60203: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
60204: LD_VAR 0 10
60208: PPUSH
60209: LD_INT 1
60211: PPUSH
60212: CALL_OW 275
60216: PUSH
60217: LD_VAR 0 11
60221: PUSH
60222: LD_INT 1
60224: ARRAY
60225: GREATEREQUAL
60226: PUSH
60227: LD_VAR 0 10
60231: PPUSH
60232: LD_INT 2
60234: PPUSH
60235: CALL_OW 275
60239: PUSH
60240: LD_VAR 0 11
60244: PUSH
60245: LD_INT 2
60247: ARRAY
60248: GREATEREQUAL
60249: AND
60250: PUSH
60251: LD_VAR 0 10
60255: PPUSH
60256: LD_INT 3
60258: PPUSH
60259: CALL_OW 275
60263: PUSH
60264: LD_VAR 0 11
60268: PUSH
60269: LD_INT 3
60271: ARRAY
60272: GREATEREQUAL
60273: AND
60274: NOT
60275: IFFALSE 60279
// exit ;
60277: GO 60881
// if GetBType ( depot ) = b_depot then
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 266
60288: PUSH
60289: LD_INT 0
60291: EQUAL
60292: IFFALSE 60304
// dist := 28 else
60294: LD_ADDR_VAR 0 14
60298: PUSH
60299: LD_INT 28
60301: ST_TO_ADDR
60302: GO 60312
// dist := 36 ;
60304: LD_ADDR_VAR 0 14
60308: PUSH
60309: LD_INT 36
60311: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
60312: LD_VAR 0 1
60316: PPUSH
60317: LD_VAR 0 3
60321: PPUSH
60322: LD_VAR 0 4
60326: PPUSH
60327: CALL_OW 297
60331: PUSH
60332: LD_VAR 0 14
60336: GREATER
60337: IFFALSE 60341
// exit ;
60339: GO 60881
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
60341: LD_ADDR_VAR 0 12
60345: PUSH
60346: LD_VAR 0 2
60350: PPUSH
60351: LD_VAR 0 3
60355: PPUSH
60356: LD_VAR 0 4
60360: PPUSH
60361: LD_VAR 0 5
60365: PPUSH
60366: LD_VAR 0 1
60370: PPUSH
60371: CALL_OW 248
60375: PPUSH
60376: LD_INT 0
60378: PPUSH
60379: CALL 60886 0 6
60383: ST_TO_ADDR
// if not hexes then
60384: LD_VAR 0 12
60388: NOT
60389: IFFALSE 60393
// exit ;
60391: GO 60881
// hex := GetHexInfo ( x , y ) ;
60393: LD_ADDR_VAR 0 15
60397: PUSH
60398: LD_VAR 0 3
60402: PPUSH
60403: LD_VAR 0 4
60407: PPUSH
60408: CALL_OW 546
60412: ST_TO_ADDR
// if hex [ 1 ] then
60413: LD_VAR 0 15
60417: PUSH
60418: LD_INT 1
60420: ARRAY
60421: IFFALSE 60425
// exit ;
60423: GO 60881
// height := hex [ 2 ] ;
60425: LD_ADDR_VAR 0 13
60429: PUSH
60430: LD_VAR 0 15
60434: PUSH
60435: LD_INT 2
60437: ARRAY
60438: ST_TO_ADDR
// for i = 1 to hexes do
60439: LD_ADDR_VAR 0 7
60443: PUSH
60444: DOUBLE
60445: LD_INT 1
60447: DEC
60448: ST_TO_ADDR
60449: LD_VAR 0 12
60453: PUSH
60454: FOR_TO
60455: IFFALSE 60785
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
60457: LD_VAR 0 12
60461: PUSH
60462: LD_VAR 0 7
60466: ARRAY
60467: PUSH
60468: LD_INT 1
60470: ARRAY
60471: PPUSH
60472: LD_VAR 0 12
60476: PUSH
60477: LD_VAR 0 7
60481: ARRAY
60482: PUSH
60483: LD_INT 2
60485: ARRAY
60486: PPUSH
60487: CALL_OW 488
60491: NOT
60492: PUSH
60493: LD_VAR 0 12
60497: PUSH
60498: LD_VAR 0 7
60502: ARRAY
60503: PUSH
60504: LD_INT 1
60506: ARRAY
60507: PPUSH
60508: LD_VAR 0 12
60512: PUSH
60513: LD_VAR 0 7
60517: ARRAY
60518: PUSH
60519: LD_INT 2
60521: ARRAY
60522: PPUSH
60523: CALL_OW 428
60527: PUSH
60528: LD_INT 0
60530: GREATER
60531: OR
60532: PUSH
60533: LD_VAR 0 12
60537: PUSH
60538: LD_VAR 0 7
60542: ARRAY
60543: PUSH
60544: LD_INT 1
60546: ARRAY
60547: PPUSH
60548: LD_VAR 0 12
60552: PUSH
60553: LD_VAR 0 7
60557: ARRAY
60558: PUSH
60559: LD_INT 2
60561: ARRAY
60562: PPUSH
60563: CALL_OW 351
60567: OR
60568: IFFALSE 60574
// exit ;
60570: POP
60571: POP
60572: GO 60881
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60574: LD_ADDR_VAR 0 8
60578: PUSH
60579: LD_VAR 0 12
60583: PUSH
60584: LD_VAR 0 7
60588: ARRAY
60589: PUSH
60590: LD_INT 1
60592: ARRAY
60593: PPUSH
60594: LD_VAR 0 12
60598: PUSH
60599: LD_VAR 0 7
60603: ARRAY
60604: PUSH
60605: LD_INT 2
60607: ARRAY
60608: PPUSH
60609: CALL_OW 546
60613: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
60614: LD_VAR 0 8
60618: PUSH
60619: LD_INT 1
60621: ARRAY
60622: PUSH
60623: LD_VAR 0 8
60627: PUSH
60628: LD_INT 2
60630: ARRAY
60631: PUSH
60632: LD_VAR 0 13
60636: PUSH
60637: LD_INT 2
60639: PLUS
60640: GREATER
60641: OR
60642: PUSH
60643: LD_VAR 0 8
60647: PUSH
60648: LD_INT 2
60650: ARRAY
60651: PUSH
60652: LD_VAR 0 13
60656: PUSH
60657: LD_INT 2
60659: MINUS
60660: LESS
60661: OR
60662: PUSH
60663: LD_VAR 0 8
60667: PUSH
60668: LD_INT 3
60670: ARRAY
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 8
60677: PUSH
60678: LD_INT 9
60680: PUSH
60681: LD_INT 10
60683: PUSH
60684: LD_INT 11
60686: PUSH
60687: LD_INT 12
60689: PUSH
60690: LD_INT 13
60692: PUSH
60693: LD_INT 16
60695: PUSH
60696: LD_INT 17
60698: PUSH
60699: LD_INT 18
60701: PUSH
60702: LD_INT 19
60704: PUSH
60705: LD_INT 20
60707: PUSH
60708: LD_INT 21
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: IN
60726: NOT
60727: OR
60728: PUSH
60729: LD_VAR 0 8
60733: PUSH
60734: LD_INT 5
60736: ARRAY
60737: NOT
60738: OR
60739: PUSH
60740: LD_VAR 0 8
60744: PUSH
60745: LD_INT 6
60747: ARRAY
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: LD_INT 7
60757: PUSH
60758: LD_INT 9
60760: PUSH
60761: LD_INT 10
60763: PUSH
60764: LD_INT 11
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: IN
60775: NOT
60776: OR
60777: IFFALSE 60783
// exit ;
60779: POP
60780: POP
60781: GO 60881
// end ;
60783: GO 60454
60785: POP
60786: POP
// side := GetSide ( depot ) ;
60787: LD_ADDR_VAR 0 9
60791: PUSH
60792: LD_VAR 0 1
60796: PPUSH
60797: CALL_OW 255
60801: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60802: LD_VAR 0 9
60806: PPUSH
60807: LD_VAR 0 3
60811: PPUSH
60812: LD_VAR 0 4
60816: PPUSH
60817: LD_INT 20
60819: PPUSH
60820: CALL 53553 0 4
60824: PUSH
60825: LD_INT 4
60827: ARRAY
60828: IFFALSE 60832
// exit ;
60830: GO 60881
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60832: LD_VAR 0 2
60836: PUSH
60837: LD_INT 29
60839: PUSH
60840: LD_INT 30
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: IN
60847: PUSH
60848: LD_VAR 0 3
60852: PPUSH
60853: LD_VAR 0 4
60857: PPUSH
60858: LD_VAR 0 9
60862: PPUSH
60863: CALL_OW 440
60867: NOT
60868: AND
60869: IFFALSE 60873
// exit ;
60871: GO 60881
// result := true ;
60873: LD_ADDR_VAR 0 6
60877: PUSH
60878: LD_INT 1
60880: ST_TO_ADDR
// end ;
60881: LD_VAR 0 6
60885: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
60886: LD_INT 0
60888: PPUSH
60889: PPUSH
60890: PPUSH
60891: PPUSH
60892: PPUSH
60893: PPUSH
60894: PPUSH
60895: PPUSH
60896: PPUSH
60897: PPUSH
60898: PPUSH
60899: PPUSH
60900: PPUSH
60901: PPUSH
60902: PPUSH
60903: PPUSH
60904: PPUSH
60905: PPUSH
60906: PPUSH
60907: PPUSH
60908: PPUSH
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
60917: PPUSH
60918: PPUSH
60919: PPUSH
60920: PPUSH
60921: PPUSH
60922: PPUSH
60923: PPUSH
60924: PPUSH
60925: PPUSH
60926: PPUSH
60927: PPUSH
60928: PPUSH
60929: PPUSH
60930: PPUSH
60931: PPUSH
60932: PPUSH
60933: PPUSH
60934: PPUSH
60935: PPUSH
60936: PPUSH
60937: PPUSH
60938: PPUSH
60939: PPUSH
60940: PPUSH
60941: PPUSH
60942: PPUSH
60943: PPUSH
60944: PPUSH
60945: PPUSH
// result = [ ] ;
60946: LD_ADDR_VAR 0 7
60950: PUSH
60951: EMPTY
60952: ST_TO_ADDR
// temp_list = [ ] ;
60953: LD_ADDR_VAR 0 9
60957: PUSH
60958: EMPTY
60959: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60960: LD_VAR 0 4
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 3
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: LD_INT 5
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: IN
60991: NOT
60992: PUSH
60993: LD_VAR 0 1
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: IN
61008: PUSH
61009: LD_VAR 0 5
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: IN
61028: NOT
61029: AND
61030: OR
61031: IFFALSE 61035
// exit ;
61033: GO 79420
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61035: LD_VAR 0 1
61039: PUSH
61040: LD_INT 6
61042: PUSH
61043: LD_INT 7
61045: PUSH
61046: LD_INT 8
61048: PUSH
61049: LD_INT 13
61051: PUSH
61052: LD_INT 12
61054: PUSH
61055: LD_INT 15
61057: PUSH
61058: LD_INT 11
61060: PUSH
61061: LD_INT 14
61063: PUSH
61064: LD_INT 10
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: IN
61078: IFFALSE 61088
// btype = b_lab ;
61080: LD_ADDR_VAR 0 1
61084: PUSH
61085: LD_INT 6
61087: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
61088: LD_VAR 0 6
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: IN
61107: NOT
61108: PUSH
61109: LD_VAR 0 1
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: LD_INT 3
61125: PUSH
61126: LD_INT 6
61128: PUSH
61129: LD_INT 36
61131: PUSH
61132: LD_INT 4
61134: PUSH
61135: LD_INT 5
61137: PUSH
61138: LD_INT 31
61140: PUSH
61141: LD_INT 32
61143: PUSH
61144: LD_INT 33
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: IN
61160: NOT
61161: PUSH
61162: LD_VAR 0 6
61166: PUSH
61167: LD_INT 1
61169: EQUAL
61170: AND
61171: OR
61172: PUSH
61173: LD_VAR 0 1
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 3
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: IN
61188: NOT
61189: PUSH
61190: LD_VAR 0 6
61194: PUSH
61195: LD_INT 2
61197: EQUAL
61198: AND
61199: OR
61200: IFFALSE 61210
// mode = 0 ;
61202: LD_ADDR_VAR 0 6
61206: PUSH
61207: LD_INT 0
61209: ST_TO_ADDR
// case mode of 0 :
61210: LD_VAR 0 6
61214: PUSH
61215: LD_INT 0
61217: DOUBLE
61218: EQUAL
61219: IFTRUE 61223
61221: GO 72676
61223: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61224: LD_ADDR_VAR 0 11
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 3
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61417: LD_ADDR_VAR 0 12
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 2
61540: NEG
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61613: LD_ADDR_VAR 0 13
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 2
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: NEG
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 3
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: NEG
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: LD_INT 3
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61812: LD_ADDR_VAR 0 14
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: LD_INT 3
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 3
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62008: LD_ADDR_VAR 0 15
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: NEG
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: NEG
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62201: LD_ADDR_VAR 0 16
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62394: LD_ADDR_VAR 0 17
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 2
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 2
62581: NEG
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62624: LD_ADDR_VAR 0 18
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 2
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: LD_INT 2
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 2
62811: NEG
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62854: LD_ADDR_VAR 0 19
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: NEG
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63084: LD_ADDR_VAR 0 20
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: LD_INT 2
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: LD_INT 1
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 2
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_INT 2
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 2
63260: NEG
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63314: LD_ADDR_VAR 0 21
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: NEG
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63544: LD_ADDR_VAR 0 22
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: LD_INT 2
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 2
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: LD_INT 1
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 2
63743: NEG
63744: PUSH
63745: LD_INT 2
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63774: LD_ADDR_VAR 0 23
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 1
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: LD_INT 2
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 2
63985: NEG
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: LD_INT 3
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64054: LD_ADDR_VAR 0 24
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: LD_INT 2
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: LD_INT 2
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: NEG
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 2
64253: NEG
64254: PUSH
64255: LD_INT 2
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: LD_INT 2
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 3
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
64330: LD_ADDR_VAR 0 25
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 2
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: NEG
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 2
64517: NEG
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 3
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 3
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64604: LD_ADDR_VAR 0 26
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 2
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 2
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 2
64780: NEG
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: LD_INT 2
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: LD_INT 3
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64880: LD_ADDR_VAR 0 27
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: LD_INT 2
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 2
65079: NEG
65080: PUSH
65081: LD_INT 2
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 3
65113: NEG
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 3
65125: NEG
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65160: LD_ADDR_VAR 0 28
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: LD_INT 2
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: LD_INT 2
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 2
65336: NEG
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 2
65347: NEG
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: NEG
65360: PUSH
65361: LD_INT 2
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 2
65371: NEG
65372: PUSH
65373: LD_INT 3
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: LD_INT 3
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 3
65395: NEG
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: NEG
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65442: LD_ADDR_VAR 0 29
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: LD_INT 2
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: LD_INT 2
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 2
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: LD_INT 2
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 1
65597: NEG
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 2
65608: NEG
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: NEG
65621: PUSH
65622: LD_INT 2
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 2
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: LD_INT 2
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65721: LD_ADDR_VAR 0 30
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: LD_INT 1
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: LD_INT 2
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: LD_INT 2
65817: NEG
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 2
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: LD_INT 1
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 2
65856: PUSH
65857: LD_INT 2
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: LD_INT 2
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: NEG
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 2
65898: NEG
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 1
65910: NEG
65911: PUSH
65912: LD_INT 3
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: LD_INT 2
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 3
65933: PUSH
65934: LD_INT 2
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: LD_INT 3
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65999: LD_ADDR_VAR 0 31
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 1
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 2
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 2
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: LD_INT 2
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 2
66188: NEG
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 2
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 3
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: LD_INT 2
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 3
66242: NEG
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66277: LD_ADDR_VAR 0 32
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: LD_INT 2
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 2
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: LD_INT 2
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 2
66443: NEG
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: NEG
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: LD_INT 3
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 3
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 2
66509: NEG
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 3
66520: NEG
66521: PUSH
66522: LD_INT 1
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66555: LD_ADDR_VAR 0 33
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 2
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: LD_INT 2
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: NEG
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 2
66710: NEG
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 2
66721: NEG
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 2
66733: NEG
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 2
66745: NEG
66746: PUSH
66747: LD_INT 3
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: LD_INT 2
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 3
66799: NEG
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66834: LD_ADDR_VAR 0 34
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: LD_INT 1
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 1
66903: NEG
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 2
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 2
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: LD_INT 2
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 2
67013: NEG
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 3
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 2
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: LD_INT 3
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 2
67068: NEG
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67114: LD_ADDR_VAR 0 35
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: NEG
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: LD_INT 1
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67226: LD_ADDR_VAR 0 36
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 1
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 1
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: LD_INT 1
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: NEG
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67338: LD_ADDR_VAR 0 37
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: LD_INT 1
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 1
67407: NEG
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67450: LD_ADDR_VAR 0 38
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: NEG
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: LD_INT 1
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: NEG
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67562: LD_ADDR_VAR 0 39
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: LD_INT 0
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 1
67600: PUSH
67601: LD_INT 1
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 0
67610: PUSH
67611: LD_INT 1
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 1
67620: NEG
67621: PUSH
67622: LD_INT 0
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: LD_INT 1
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67674: LD_ADDR_VAR 0 40
67678: PUSH
67679: LD_INT 0
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 1
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: PUSH
67713: LD_INT 1
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: PUSH
67745: LD_INT 1
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67786: LD_ADDR_VAR 0 41
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 1
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 1
67855: NEG
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 2
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 2
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 2
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 1
67920: PUSH
67921: LD_INT 2
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 2
67952: NEG
67953: PUSH
67954: LD_INT 1
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: LD_INT 2
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 2
67976: NEG
67977: PUSH
67978: LD_INT 3
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: LD_INT 1
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: LD_INT 0
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: PUSH
68030: LD_INT 3
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 2
68039: PUSH
68040: LD_INT 3
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: LD_INT 1
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 3
68060: NEG
68061: PUSH
68062: LD_INT 0
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 3
68083: NEG
68084: PUSH
68085: LD_INT 2
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 3
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68136: LD_ADDR_VAR 0 42
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: LD_INT 2
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: LD_INT 2
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: LD_INT 1
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: LD_INT 2
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: LD_INT 1
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 2
68302: NEG
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 2
68314: NEG
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: LD_INT 3
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 1
68338: NEG
68339: PUSH
68340: LD_INT 3
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 0
68350: PUSH
68351: LD_INT 3
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 1
68361: PUSH
68362: LD_INT 2
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: PUSH
68373: LD_INT 2
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 3
68382: PUSH
68383: LD_INT 3
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 2
68392: PUSH
68393: LD_INT 3
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 1
68402: PUSH
68403: LD_INT 3
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 0
68412: PUSH
68413: LD_INT 3
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: NEG
68423: PUSH
68424: LD_INT 2
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 3
68433: NEG
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 3
68445: NEG
68446: PUSH
68447: LD_INT 3
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68486: LD_ADDR_VAR 0 43
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: LD_INT 1
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: LD_INT 1
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 1
68544: NEG
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: PUSH
68557: LD_INT 1
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: LD_INT 2
68582: NEG
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 2
68611: PUSH
68612: LD_INT 1
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 1
68621: PUSH
68622: LD_INT 2
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_INT 2
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 1
68641: NEG
68642: PUSH
68643: LD_INT 1
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 2
68652: NEG
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: LD_INT 1
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 1
68675: NEG
68676: PUSH
68677: LD_INT 3
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: LD_INT 3
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 1
68698: PUSH
68699: LD_INT 2
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 2
68709: PUSH
68710: LD_INT 1
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 3
68730: PUSH
68731: LD_INT 1
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: LD_INT 3
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 3
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: LD_INT 2
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 2
68771: NEG
68772: PUSH
68773: LD_INT 1
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: LD_INT 1
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68834: LD_ADDR_VAR 0 44
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 0
68851: PUSH
68852: LD_INT 1
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 1
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: LD_INT 1
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 1
68903: NEG
68904: PUSH
68905: LD_INT 1
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: LD_INT 2
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: LD_INT 1
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: LD_INT 0
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 2
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: LD_INT 2
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 1
68968: PUSH
68969: LD_INT 2
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 1
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 0
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: LD_INT 2
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 2
69024: NEG
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 2
69036: PUSH
69037: LD_INT 1
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 3
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: LD_INT 1
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 3
69067: PUSH
69068: LD_INT 2
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 3
69077: PUSH
69078: LD_INT 3
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 2
69087: PUSH
69088: LD_INT 3
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 2
69097: NEG
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 3
69108: NEG
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 3
69119: NEG
69120: PUSH
69121: LD_INT 1
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: NEG
69132: PUSH
69133: LD_INT 2
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: LD_INT 3
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69184: LD_ADDR_VAR 0 45
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_INT 1
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 1
69222: PUSH
69223: LD_INT 1
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 1
69242: NEG
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: LD_INT 1
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: LD_INT 2
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 0
69277: PUSH
69278: LD_INT 2
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 1
69288: PUSH
69289: LD_INT 1
69291: NEG
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 2
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 2
69309: PUSH
69310: LD_INT 2
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: LD_INT 2
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 2
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 2
69350: NEG
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 2
69362: NEG
69363: PUSH
69364: LD_INT 2
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 2
69374: NEG
69375: PUSH
69376: LD_INT 3
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: PUSH
69388: LD_INT 3
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: LD_INT 3
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: LD_INT 2
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: LD_INT 2
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: PUSH
69431: LD_INT 3
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 2
69440: PUSH
69441: LD_INT 3
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 1
69450: PUSH
69451: LD_INT 3
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 0
69460: PUSH
69461: LD_INT 3
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: NEG
69471: PUSH
69472: LD_INT 2
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 3
69481: NEG
69482: PUSH
69483: LD_INT 2
69485: NEG
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 3
69493: NEG
69494: PUSH
69495: LD_INT 3
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69534: LD_ADDR_VAR 0 46
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: LD_INT 1
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 1
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 1
69592: NEG
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 1
69603: NEG
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: LD_INT 1
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 2
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 2
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: NEG
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: NEG
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 2
69711: NEG
69712: PUSH
69713: LD_INT 1
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: PUSH
69725: LD_INT 3
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: LD_INT 3
69738: NEG
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 1
69746: PUSH
69747: LD_INT 2
69749: NEG
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 2
69757: PUSH
69758: LD_INT 1
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 3
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 3
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 1
69788: PUSH
69789: LD_INT 3
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: LD_INT 3
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 1
69808: NEG
69809: PUSH
69810: LD_INT 2
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 2
69819: NEG
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 3
69830: NEG
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: LD_INT 1
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69882: LD_ADDR_VAR 0 47
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 0
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: LD_INT 1
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 1
69910: PUSH
69911: LD_INT 0
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: PUSH
69921: LD_INT 1
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 1
69940: NEG
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 1
69951: NEG
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: LD_INT 2
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: LD_INT 2
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 1
69986: PUSH
69987: LD_INT 1
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: NEG
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: NEG
70010: PUSH
70011: LD_INT 2
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70033: LD_ADDR_VAR 0 48
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: LD_INT 0
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 1
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 1
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: NEG
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 1
70102: NEG
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: NEG
70115: PUSH
70116: LD_INT 2
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: LD_INT 2
70129: NEG
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 1
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 2
70148: PUSH
70149: LD_INT 0
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70180: LD_ADDR_VAR 0 49
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: LD_INT 0
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: LD_INT 1
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 1
70208: PUSH
70209: LD_INT 0
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 1
70218: PUSH
70219: LD_INT 1
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 1
70238: NEG
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: LD_INT 1
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 1
70261: PUSH
70262: LD_INT 1
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 2
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 2
70282: PUSH
70283: LD_INT 1
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: LD_INT 2
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70324: LD_ADDR_VAR 0 50
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 1
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: LD_INT 1
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 1
70382: NEG
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 1
70393: NEG
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 2
70405: PUSH
70406: LD_INT 1
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 2
70415: PUSH
70416: LD_INT 2
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: PUSH
70426: LD_INT 2
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: LD_INT 1
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70468: LD_ADDR_VAR 0 51
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 1
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 1
70506: PUSH
70507: LD_INT 1
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: LD_INT 1
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 1
70526: NEG
70527: PUSH
70528: LD_INT 0
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 1
70537: NEG
70538: PUSH
70539: LD_INT 1
70541: NEG
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 1
70549: PUSH
70550: LD_INT 2
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: LD_INT 2
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: NEG
70570: PUSH
70571: LD_INT 1
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 2
70580: NEG
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 2
70591: NEG
70592: PUSH
70593: LD_INT 1
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70615: LD_ADDR_VAR 0 52
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 1
70635: NEG
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: LD_INT 1
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: LD_INT 1
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 1
70673: NEG
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 1
70684: NEG
70685: PUSH
70686: LD_INT 1
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: LD_INT 2
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 1
70708: NEG
70709: PUSH
70710: LD_INT 1
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 2
70719: NEG
70720: PUSH
70721: LD_INT 0
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 2
70730: NEG
70731: PUSH
70732: LD_INT 1
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: NEG
70743: PUSH
70744: LD_INT 2
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70766: LD_ADDR_VAR 0 53
70770: PUSH
70771: LD_INT 0
70773: PUSH
70774: LD_INT 0
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 0
70783: PUSH
70784: LD_INT 1
70786: NEG
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: LD_INT 0
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: LD_INT 1
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: LD_INT 1
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 1
70824: NEG
70825: PUSH
70826: LD_INT 0
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 1
70835: NEG
70836: PUSH
70837: LD_INT 1
70839: NEG
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: LD_INT 2
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 1
70870: PUSH
70871: LD_INT 1
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 2
70881: PUSH
70882: LD_INT 0
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 2
70891: PUSH
70892: LD_INT 1
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 2
70901: PUSH
70902: LD_INT 2
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 1
70911: PUSH
70912: LD_INT 2
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 0
70921: PUSH
70922: LD_INT 2
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 1
70931: NEG
70932: PUSH
70933: LD_INT 1
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 2
70942: NEG
70943: PUSH
70944: LD_INT 0
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 2
70953: NEG
70954: PUSH
70955: LD_INT 1
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 2
70965: NEG
70966: PUSH
70967: LD_INT 2
70969: NEG
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70996: LD_ADDR_VAR 0 54
71000: PUSH
71001: LD_INT 0
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 0
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 1
71024: PUSH
71025: LD_INT 0
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 1
71054: NEG
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 1
71065: NEG
71066: PUSH
71067: LD_INT 1
71069: NEG
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: LD_INT 2
71081: NEG
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 0
71089: PUSH
71090: LD_INT 2
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 1
71100: PUSH
71101: LD_INT 1
71103: NEG
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 2
71111: PUSH
71112: LD_INT 0
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 2
71121: PUSH
71122: LD_INT 1
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 2
71131: PUSH
71132: LD_INT 2
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 1
71141: PUSH
71142: LD_INT 2
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 0
71151: PUSH
71152: LD_INT 2
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: NEG
71162: PUSH
71163: LD_INT 1
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: NEG
71173: PUSH
71174: LD_INT 0
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 2
71183: NEG
71184: PUSH
71185: LD_INT 1
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 2
71195: NEG
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71226: LD_ADDR_VAR 0 55
71230: PUSH
71231: LD_INT 0
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 1
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 1
71254: PUSH
71255: LD_INT 0
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 1
71264: PUSH
71265: LD_INT 1
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 1
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: NEG
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 1
71295: NEG
71296: PUSH
71297: LD_INT 1
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: NEG
71308: PUSH
71309: LD_INT 2
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: LD_INT 2
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: LD_INT 1
71333: NEG
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 2
71341: PUSH
71342: LD_INT 0
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 2
71361: PUSH
71362: LD_INT 2
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 1
71371: PUSH
71372: LD_INT 2
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: LD_INT 2
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 1
71391: NEG
71392: PUSH
71393: LD_INT 1
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 2
71402: NEG
71403: PUSH
71404: LD_INT 0
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 2
71413: NEG
71414: PUSH
71415: LD_INT 1
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 2
71425: NEG
71426: PUSH
71427: LD_INT 2
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71456: LD_ADDR_VAR 0 56
71460: PUSH
71461: LD_INT 0
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 1
71484: PUSH
71485: LD_INT 0
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 1
71494: PUSH
71495: LD_INT 1
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 1
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 1
71514: NEG
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 1
71525: NEG
71526: PUSH
71527: LD_INT 1
71529: NEG
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 1
71537: NEG
71538: PUSH
71539: LD_INT 2
71541: NEG
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 0
71549: PUSH
71550: LD_INT 2
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 1
71560: PUSH
71561: LD_INT 1
71563: NEG
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 2
71571: PUSH
71572: LD_INT 0
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 2
71581: PUSH
71582: LD_INT 1
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 2
71591: PUSH
71592: LD_INT 2
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 1
71601: PUSH
71602: LD_INT 2
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: LD_INT 2
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 1
71621: NEG
71622: PUSH
71623: LD_INT 1
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 2
71632: NEG
71633: PUSH
71634: LD_INT 0
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 2
71643: NEG
71644: PUSH
71645: LD_INT 1
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 2
71655: NEG
71656: PUSH
71657: LD_INT 2
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71686: LD_ADDR_VAR 0 57
71690: PUSH
71691: LD_INT 0
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: LD_INT 1
71706: NEG
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 1
71714: PUSH
71715: LD_INT 0
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 1
71724: PUSH
71725: LD_INT 1
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: LD_INT 1
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 1
71744: NEG
71745: PUSH
71746: LD_INT 0
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 1
71755: NEG
71756: PUSH
71757: LD_INT 1
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: LD_INT 2
71771: NEG
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 0
71779: PUSH
71780: LD_INT 2
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 1
71790: PUSH
71791: LD_INT 1
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 2
71801: PUSH
71802: LD_INT 0
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: LD_INT 1
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 2
71821: PUSH
71822: LD_INT 2
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: LD_INT 2
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 0
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 1
71851: NEG
71852: PUSH
71853: LD_INT 1
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 2
71862: NEG
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 2
71873: NEG
71874: PUSH
71875: LD_INT 1
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 2
71885: NEG
71886: PUSH
71887: LD_INT 2
71889: NEG
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71916: LD_ADDR_VAR 0 58
71920: PUSH
71921: LD_INT 0
71923: PUSH
71924: LD_INT 0
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 0
71933: PUSH
71934: LD_INT 1
71936: NEG
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 1
71944: PUSH
71945: LD_INT 0
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 1
71954: PUSH
71955: LD_INT 1
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 0
71964: PUSH
71965: LD_INT 1
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: LD_INT 0
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: LD_INT 1
71989: NEG
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 1
71997: NEG
71998: PUSH
71999: LD_INT 2
72001: NEG
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 0
72009: PUSH
72010: LD_INT 2
72012: NEG
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 1
72020: PUSH
72021: LD_INT 1
72023: NEG
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: LD_INT 0
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 2
72041: PUSH
72042: LD_INT 1
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 2
72051: PUSH
72052: LD_INT 2
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: LD_INT 2
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 0
72071: PUSH
72072: LD_INT 2
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 1
72081: NEG
72082: PUSH
72083: LD_INT 1
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 2
72092: NEG
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 2
72103: NEG
72104: PUSH
72105: LD_INT 1
72107: NEG
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 2
72115: NEG
72116: PUSH
72117: LD_INT 2
72119: NEG
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72146: LD_ADDR_VAR 0 59
72150: PUSH
72151: LD_INT 0
72153: PUSH
72154: LD_INT 0
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 0
72163: PUSH
72164: LD_INT 1
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 1
72174: PUSH
72175: LD_INT 0
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 1
72184: PUSH
72185: LD_INT 1
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 0
72194: PUSH
72195: LD_INT 1
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 1
72204: NEG
72205: PUSH
72206: LD_INT 0
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 1
72215: NEG
72216: PUSH
72217: LD_INT 1
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72234: LD_ADDR_VAR 0 60
72238: PUSH
72239: LD_INT 0
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 0
72251: PUSH
72252: LD_INT 1
72254: NEG
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 1
72262: PUSH
72263: LD_INT 0
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 1
72272: PUSH
72273: LD_INT 1
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 0
72282: PUSH
72283: LD_INT 1
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: PUSH
72294: LD_INT 0
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 1
72303: NEG
72304: PUSH
72305: LD_INT 1
72307: NEG
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72322: LD_ADDR_VAR 0 61
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: LD_INT 0
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 0
72339: PUSH
72340: LD_INT 1
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 1
72350: PUSH
72351: LD_INT 0
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 1
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 0
72370: PUSH
72371: LD_INT 1
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 1
72380: NEG
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 1
72391: NEG
72392: PUSH
72393: LD_INT 1
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72410: LD_ADDR_VAR 0 62
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: LD_INT 0
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: LD_INT 1
72430: NEG
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 1
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 1
72448: PUSH
72449: LD_INT 1
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 0
72458: PUSH
72459: LD_INT 1
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 1
72468: NEG
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 1
72479: NEG
72480: PUSH
72481: LD_INT 1
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72498: LD_ADDR_VAR 0 63
72502: PUSH
72503: LD_INT 0
72505: PUSH
72506: LD_INT 0
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 0
72515: PUSH
72516: LD_INT 1
72518: NEG
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 1
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 1
72536: PUSH
72537: LD_INT 1
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: LD_INT 1
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 1
72556: NEG
72557: PUSH
72558: LD_INT 0
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: LD_INT 1
72571: NEG
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72586: LD_ADDR_VAR 0 64
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: LD_INT 0
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 0
72603: PUSH
72604: LD_INT 1
72606: NEG
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 1
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 1
72624: PUSH
72625: LD_INT 1
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 0
72634: PUSH
72635: LD_INT 1
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 1
72644: NEG
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 1
72655: NEG
72656: PUSH
72657: LD_INT 1
72659: NEG
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: ST_TO_ADDR
// end ; 1 :
72674: GO 78571
72676: LD_INT 1
72678: DOUBLE
72679: EQUAL
72680: IFTRUE 72684
72682: GO 75307
72684: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72685: LD_ADDR_VAR 0 11
72689: PUSH
72690: LD_INT 1
72692: NEG
72693: PUSH
72694: LD_INT 3
72696: NEG
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 0
72704: PUSH
72705: LD_INT 3
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 1
72715: PUSH
72716: LD_INT 2
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: LIST
72728: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72729: LD_ADDR_VAR 0 12
72733: PUSH
72734: LD_INT 2
72736: PUSH
72737: LD_INT 1
72739: NEG
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 3
72747: PUSH
72748: LD_INT 0
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 3
72757: PUSH
72758: LD_INT 1
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: LIST
72769: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72770: LD_ADDR_VAR 0 13
72774: PUSH
72775: LD_INT 3
72777: PUSH
72778: LD_INT 2
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 3
72787: PUSH
72788: LD_INT 3
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 2
72797: PUSH
72798: LD_INT 3
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: LIST
72809: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72810: LD_ADDR_VAR 0 14
72814: PUSH
72815: LD_INT 1
72817: PUSH
72818: LD_INT 3
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: LD_INT 3
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 1
72837: NEG
72838: PUSH
72839: LD_INT 2
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72851: LD_ADDR_VAR 0 15
72855: PUSH
72856: LD_INT 2
72858: NEG
72859: PUSH
72860: LD_INT 1
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 3
72869: NEG
72870: PUSH
72871: LD_INT 0
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 3
72880: NEG
72881: PUSH
72882: LD_INT 1
72884: NEG
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: LIST
72894: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72895: LD_ADDR_VAR 0 16
72899: PUSH
72900: LD_INT 2
72902: NEG
72903: PUSH
72904: LD_INT 3
72906: NEG
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 3
72914: NEG
72915: PUSH
72916: LD_INT 2
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 3
72926: NEG
72927: PUSH
72928: LD_INT 3
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: LIST
72940: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72941: LD_ADDR_VAR 0 17
72945: PUSH
72946: LD_INT 1
72948: NEG
72949: PUSH
72950: LD_INT 3
72952: NEG
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: LD_INT 3
72963: NEG
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 1
72971: PUSH
72972: LD_INT 2
72974: NEG
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: LIST
72984: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72985: LD_ADDR_VAR 0 18
72989: PUSH
72990: LD_INT 2
72992: PUSH
72993: LD_INT 1
72995: NEG
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 3
73003: PUSH
73004: LD_INT 0
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 3
73013: PUSH
73014: LD_INT 1
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: LIST
73025: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73026: LD_ADDR_VAR 0 19
73030: PUSH
73031: LD_INT 3
73033: PUSH
73034: LD_INT 2
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 3
73043: PUSH
73044: LD_INT 3
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 2
73053: PUSH
73054: LD_INT 3
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: LIST
73065: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73066: LD_ADDR_VAR 0 20
73070: PUSH
73071: LD_INT 1
73073: PUSH
73074: LD_INT 3
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 0
73083: PUSH
73084: LD_INT 3
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 1
73093: NEG
73094: PUSH
73095: LD_INT 2
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: LIST
73106: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73107: LD_ADDR_VAR 0 21
73111: PUSH
73112: LD_INT 2
73114: NEG
73115: PUSH
73116: LD_INT 1
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 3
73125: NEG
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 3
73136: NEG
73137: PUSH
73138: LD_INT 1
73140: NEG
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: LIST
73150: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73151: LD_ADDR_VAR 0 22
73155: PUSH
73156: LD_INT 2
73158: NEG
73159: PUSH
73160: LD_INT 3
73162: NEG
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 3
73170: NEG
73171: PUSH
73172: LD_INT 2
73174: NEG
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 3
73182: NEG
73183: PUSH
73184: LD_INT 3
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: LIST
73196: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
73197: LD_ADDR_VAR 0 23
73201: PUSH
73202: LD_INT 0
73204: PUSH
73205: LD_INT 3
73207: NEG
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: PUSH
73213: LD_INT 1
73215: NEG
73216: PUSH
73217: LD_INT 4
73219: NEG
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_INT 1
73227: PUSH
73228: LD_INT 3
73230: NEG
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: LIST
73240: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
73241: LD_ADDR_VAR 0 24
73245: PUSH
73246: LD_INT 3
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 3
73258: PUSH
73259: LD_INT 1
73261: NEG
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: LD_INT 4
73269: PUSH
73270: LD_INT 1
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: LIST
73281: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
73282: LD_ADDR_VAR 0 25
73286: PUSH
73287: LD_INT 3
73289: PUSH
73290: LD_INT 3
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 4
73299: PUSH
73300: LD_INT 3
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 3
73309: PUSH
73310: LD_INT 4
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
73322: LD_ADDR_VAR 0 26
73326: PUSH
73327: LD_INT 0
73329: PUSH
73330: LD_INT 3
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 1
73339: PUSH
73340: LD_INT 4
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 1
73349: NEG
73350: PUSH
73351: LD_INT 3
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: LIST
73362: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
73363: LD_ADDR_VAR 0 27
73367: PUSH
73368: LD_INT 3
73370: NEG
73371: PUSH
73372: LD_INT 0
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 3
73381: NEG
73382: PUSH
73383: LD_INT 1
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 4
73392: NEG
73393: PUSH
73394: LD_INT 1
73396: NEG
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: LIST
73406: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
73407: LD_ADDR_VAR 0 28
73411: PUSH
73412: LD_INT 3
73414: NEG
73415: PUSH
73416: LD_INT 3
73418: NEG
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: LD_INT 3
73426: NEG
73427: PUSH
73428: LD_INT 4
73430: NEG
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 4
73438: NEG
73439: PUSH
73440: LD_INT 3
73442: NEG
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: LIST
73452: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
73453: LD_ADDR_VAR 0 29
73457: PUSH
73458: LD_INT 1
73460: NEG
73461: PUSH
73462: LD_INT 3
73464: NEG
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PUSH
73470: LD_INT 0
73472: PUSH
73473: LD_INT 3
73475: NEG
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 1
73483: PUSH
73484: LD_INT 2
73486: NEG
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 1
73494: NEG
73495: PUSH
73496: LD_INT 4
73498: NEG
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 0
73506: PUSH
73507: LD_INT 4
73509: NEG
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 1
73517: PUSH
73518: LD_INT 3
73520: NEG
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PUSH
73526: LD_INT 1
73528: NEG
73529: PUSH
73530: LD_INT 5
73532: NEG
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 0
73540: PUSH
73541: LD_INT 5
73543: NEG
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: LD_INT 1
73551: PUSH
73552: LD_INT 4
73554: NEG
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PUSH
73560: LD_INT 1
73562: NEG
73563: PUSH
73564: LD_INT 6
73566: NEG
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: LD_INT 6
73577: NEG
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 1
73585: PUSH
73586: LD_INT 5
73588: NEG
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
73608: LD_ADDR_VAR 0 30
73612: PUSH
73613: LD_INT 2
73615: PUSH
73616: LD_INT 1
73618: NEG
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 3
73626: PUSH
73627: LD_INT 0
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 3
73636: PUSH
73637: LD_INT 1
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 3
73646: PUSH
73647: LD_INT 1
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 4
73657: PUSH
73658: LD_INT 0
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 4
73667: PUSH
73668: LD_INT 1
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 4
73677: PUSH
73678: LD_INT 1
73680: NEG
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 5
73688: PUSH
73689: LD_INT 0
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 5
73698: PUSH
73699: LD_INT 1
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 5
73708: PUSH
73709: LD_INT 1
73711: NEG
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 6
73719: PUSH
73720: LD_INT 0
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 6
73729: PUSH
73730: LD_INT 1
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73751: LD_ADDR_VAR 0 31
73755: PUSH
73756: LD_INT 3
73758: PUSH
73759: LD_INT 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 3
73768: PUSH
73769: LD_INT 3
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 2
73778: PUSH
73779: LD_INT 3
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 4
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 4
73798: PUSH
73799: LD_INT 4
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 3
73808: PUSH
73809: LD_INT 4
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 5
73818: PUSH
73819: LD_INT 4
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 5
73828: PUSH
73829: LD_INT 5
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: LD_INT 5
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 6
73848: PUSH
73849: LD_INT 5
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 6
73858: PUSH
73859: LD_INT 6
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 5
73868: PUSH
73869: LD_INT 6
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73890: LD_ADDR_VAR 0 32
73894: PUSH
73895: LD_INT 1
73897: PUSH
73898: LD_INT 3
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 0
73907: PUSH
73908: LD_INT 3
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: LD_INT 1
73917: NEG
73918: PUSH
73919: LD_INT 2
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 1
73928: PUSH
73929: LD_INT 4
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: LD_INT 4
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 1
73948: NEG
73949: PUSH
73950: LD_INT 3
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 1
73959: PUSH
73960: LD_INT 5
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: LD_INT 0
73969: PUSH
73970: LD_INT 5
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 1
73979: NEG
73980: PUSH
73981: LD_INT 4
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: LD_INT 1
73990: PUSH
73991: LD_INT 6
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: PUSH
73998: LD_INT 0
74000: PUSH
74001: LD_INT 6
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 1
74010: NEG
74011: PUSH
74012: LD_INT 5
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74033: LD_ADDR_VAR 0 33
74037: PUSH
74038: LD_INT 2
74040: NEG
74041: PUSH
74042: LD_INT 1
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 3
74051: NEG
74052: PUSH
74053: LD_INT 0
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 3
74062: NEG
74063: PUSH
74064: LD_INT 1
74066: NEG
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 3
74074: NEG
74075: PUSH
74076: LD_INT 1
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 4
74085: NEG
74086: PUSH
74087: LD_INT 0
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 4
74096: NEG
74097: PUSH
74098: LD_INT 1
74100: NEG
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 4
74108: NEG
74109: PUSH
74110: LD_INT 1
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 5
74119: NEG
74120: PUSH
74121: LD_INT 0
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 5
74130: NEG
74131: PUSH
74132: LD_INT 1
74134: NEG
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 5
74142: NEG
74143: PUSH
74144: LD_INT 1
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: PUSH
74151: LD_INT 6
74153: NEG
74154: PUSH
74155: LD_INT 0
74157: PUSH
74158: EMPTY
74159: LIST
74160: LIST
74161: PUSH
74162: LD_INT 6
74164: NEG
74165: PUSH
74166: LD_INT 1
74168: NEG
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: LIST
74184: LIST
74185: LIST
74186: LIST
74187: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
74188: LD_ADDR_VAR 0 34
74192: PUSH
74193: LD_INT 2
74195: NEG
74196: PUSH
74197: LD_INT 3
74199: NEG
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 3
74207: NEG
74208: PUSH
74209: LD_INT 2
74211: NEG
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 3
74219: NEG
74220: PUSH
74221: LD_INT 3
74223: NEG
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 3
74231: NEG
74232: PUSH
74233: LD_INT 4
74235: NEG
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 4
74243: NEG
74244: PUSH
74245: LD_INT 3
74247: NEG
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: PUSH
74253: LD_INT 4
74255: NEG
74256: PUSH
74257: LD_INT 4
74259: NEG
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 4
74267: NEG
74268: PUSH
74269: LD_INT 5
74271: NEG
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 5
74279: NEG
74280: PUSH
74281: LD_INT 4
74283: NEG
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 5
74291: NEG
74292: PUSH
74293: LD_INT 5
74295: NEG
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 5
74303: NEG
74304: PUSH
74305: LD_INT 6
74307: NEG
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 6
74315: NEG
74316: PUSH
74317: LD_INT 5
74319: NEG
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 6
74327: NEG
74328: PUSH
74329: LD_INT 6
74331: NEG
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
74351: LD_ADDR_VAR 0 41
74355: PUSH
74356: LD_INT 0
74358: PUSH
74359: LD_INT 2
74361: NEG
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: LD_INT 1
74369: NEG
74370: PUSH
74371: LD_INT 3
74373: NEG
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 1
74381: PUSH
74382: LD_INT 2
74384: NEG
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: LIST
74394: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
74395: LD_ADDR_VAR 0 42
74399: PUSH
74400: LD_INT 2
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: PUSH
74410: LD_INT 2
74412: PUSH
74413: LD_INT 1
74415: NEG
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: PUSH
74421: LD_INT 3
74423: PUSH
74424: LD_INT 1
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: LIST
74435: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
74436: LD_ADDR_VAR 0 43
74440: PUSH
74441: LD_INT 2
74443: PUSH
74444: LD_INT 2
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 3
74453: PUSH
74454: LD_INT 2
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 2
74463: PUSH
74464: LD_INT 3
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: LIST
74475: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
74476: LD_ADDR_VAR 0 44
74480: PUSH
74481: LD_INT 0
74483: PUSH
74484: LD_INT 2
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PUSH
74491: LD_INT 1
74493: PUSH
74494: LD_INT 3
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 1
74503: NEG
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: LIST
74516: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74517: LD_ADDR_VAR 0 45
74521: PUSH
74522: LD_INT 2
74524: NEG
74525: PUSH
74526: LD_INT 0
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PUSH
74533: LD_INT 2
74535: NEG
74536: PUSH
74537: LD_INT 1
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: PUSH
74544: LD_INT 3
74546: NEG
74547: PUSH
74548: LD_INT 1
74550: NEG
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: LIST
74560: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
74561: LD_ADDR_VAR 0 46
74565: PUSH
74566: LD_INT 2
74568: NEG
74569: PUSH
74570: LD_INT 2
74572: NEG
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 2
74580: NEG
74581: PUSH
74582: LD_INT 3
74584: NEG
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 3
74592: NEG
74593: PUSH
74594: LD_INT 2
74596: NEG
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
74607: LD_ADDR_VAR 0 47
74611: PUSH
74612: LD_INT 2
74614: NEG
74615: PUSH
74616: LD_INT 3
74618: NEG
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PUSH
74624: LD_INT 1
74626: NEG
74627: PUSH
74628: LD_INT 3
74630: NEG
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
74640: LD_ADDR_VAR 0 48
74644: PUSH
74645: LD_INT 1
74647: PUSH
74648: LD_INT 2
74650: NEG
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: PUSH
74656: LD_INT 2
74658: PUSH
74659: LD_INT 1
74661: NEG
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
74671: LD_ADDR_VAR 0 49
74675: PUSH
74676: LD_INT 3
74678: PUSH
74679: LD_INT 1
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 3
74688: PUSH
74689: LD_INT 2
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74700: LD_ADDR_VAR 0 50
74704: PUSH
74705: LD_INT 2
74707: PUSH
74708: LD_INT 3
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 1
74717: PUSH
74718: LD_INT 3
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74729: LD_ADDR_VAR 0 51
74733: PUSH
74734: LD_INT 1
74736: NEG
74737: PUSH
74738: LD_INT 2
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_INT 2
74747: NEG
74748: PUSH
74749: LD_INT 1
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74760: LD_ADDR_VAR 0 52
74764: PUSH
74765: LD_INT 3
74767: NEG
74768: PUSH
74769: LD_INT 1
74771: NEG
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 3
74779: NEG
74780: PUSH
74781: LD_INT 2
74783: NEG
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74793: LD_ADDR_VAR 0 53
74797: PUSH
74798: LD_INT 1
74800: NEG
74801: PUSH
74802: LD_INT 3
74804: NEG
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PUSH
74810: LD_INT 0
74812: PUSH
74813: LD_INT 3
74815: NEG
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 1
74823: PUSH
74824: LD_INT 2
74826: NEG
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: LIST
74836: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74837: LD_ADDR_VAR 0 54
74841: PUSH
74842: LD_INT 2
74844: PUSH
74845: LD_INT 1
74847: NEG
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: PUSH
74853: LD_INT 3
74855: PUSH
74856: LD_INT 0
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: LD_INT 3
74865: PUSH
74866: LD_INT 1
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: LIST
74877: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74878: LD_ADDR_VAR 0 55
74882: PUSH
74883: LD_INT 3
74885: PUSH
74886: LD_INT 2
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 3
74895: PUSH
74896: LD_INT 3
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 2
74905: PUSH
74906: LD_INT 3
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: LIST
74917: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74918: LD_ADDR_VAR 0 56
74922: PUSH
74923: LD_INT 1
74925: PUSH
74926: LD_INT 3
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 0
74935: PUSH
74936: LD_INT 3
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 1
74945: NEG
74946: PUSH
74947: LD_INT 2
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: LIST
74958: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74959: LD_ADDR_VAR 0 57
74963: PUSH
74964: LD_INT 2
74966: NEG
74967: PUSH
74968: LD_INT 1
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 3
74977: NEG
74978: PUSH
74979: LD_INT 0
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_INT 3
74988: NEG
74989: PUSH
74990: LD_INT 1
74992: NEG
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75003: LD_ADDR_VAR 0 58
75007: PUSH
75008: LD_INT 2
75010: NEG
75011: PUSH
75012: LD_INT 3
75014: NEG
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: PUSH
75020: LD_INT 3
75022: NEG
75023: PUSH
75024: LD_INT 2
75026: NEG
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: PUSH
75032: LD_INT 3
75034: NEG
75035: PUSH
75036: LD_INT 3
75038: NEG
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: LIST
75048: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75049: LD_ADDR_VAR 0 59
75053: PUSH
75054: LD_INT 1
75056: NEG
75057: PUSH
75058: LD_INT 2
75060: NEG
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 0
75068: PUSH
75069: LD_INT 2
75071: NEG
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 1
75079: PUSH
75080: LD_INT 1
75082: NEG
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: LIST
75092: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75093: LD_ADDR_VAR 0 60
75097: PUSH
75098: LD_INT 1
75100: PUSH
75101: LD_INT 1
75103: NEG
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 2
75111: PUSH
75112: LD_INT 0
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 2
75121: PUSH
75122: LD_INT 1
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: LIST
75133: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75134: LD_ADDR_VAR 0 61
75138: PUSH
75139: LD_INT 2
75141: PUSH
75142: LD_INT 1
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: LD_INT 2
75151: PUSH
75152: LD_INT 2
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 1
75161: PUSH
75162: LD_INT 2
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: LIST
75173: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75174: LD_ADDR_VAR 0 62
75178: PUSH
75179: LD_INT 1
75181: PUSH
75182: LD_INT 2
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: LD_INT 2
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 1
75201: NEG
75202: PUSH
75203: LD_INT 1
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: LIST
75214: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75215: LD_ADDR_VAR 0 63
75219: PUSH
75220: LD_INT 1
75222: NEG
75223: PUSH
75224: LD_INT 1
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 2
75233: NEG
75234: PUSH
75235: LD_INT 0
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: LD_INT 2
75244: NEG
75245: PUSH
75246: LD_INT 1
75248: NEG
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: LIST
75258: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75259: LD_ADDR_VAR 0 64
75263: PUSH
75264: LD_INT 1
75266: NEG
75267: PUSH
75268: LD_INT 2
75270: NEG
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: LD_INT 2
75278: NEG
75279: PUSH
75280: LD_INT 1
75282: NEG
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: LD_INT 2
75290: NEG
75291: PUSH
75292: LD_INT 2
75294: NEG
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: LIST
75304: ST_TO_ADDR
// end ; 2 :
75305: GO 78571
75307: LD_INT 2
75309: DOUBLE
75310: EQUAL
75311: IFTRUE 75315
75313: GO 78570
75315: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
75316: LD_ADDR_VAR 0 29
75320: PUSH
75321: LD_INT 4
75323: PUSH
75324: LD_INT 0
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 4
75333: PUSH
75334: LD_INT 1
75336: NEG
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 5
75344: PUSH
75345: LD_INT 0
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 5
75354: PUSH
75355: LD_INT 1
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 4
75364: PUSH
75365: LD_INT 1
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 3
75374: PUSH
75375: LD_INT 0
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 3
75384: PUSH
75385: LD_INT 1
75387: NEG
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PUSH
75393: LD_INT 3
75395: PUSH
75396: LD_INT 2
75398: NEG
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 5
75406: PUSH
75407: LD_INT 2
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 3
75416: PUSH
75417: LD_INT 3
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_INT 3
75426: PUSH
75427: LD_INT 2
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 4
75436: PUSH
75437: LD_INT 3
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 4
75446: PUSH
75447: LD_INT 4
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PUSH
75454: LD_INT 3
75456: PUSH
75457: LD_INT 4
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PUSH
75464: LD_INT 2
75466: PUSH
75467: LD_INT 3
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 2
75476: PUSH
75477: LD_INT 2
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: LD_INT 4
75486: PUSH
75487: LD_INT 2
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PUSH
75494: LD_INT 2
75496: PUSH
75497: LD_INT 4
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 0
75506: PUSH
75507: LD_INT 4
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: LD_INT 0
75516: PUSH
75517: LD_INT 3
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: LD_INT 1
75526: PUSH
75527: LD_INT 4
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PUSH
75534: LD_INT 1
75536: PUSH
75537: LD_INT 5
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: PUSH
75544: LD_INT 0
75546: PUSH
75547: LD_INT 5
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 1
75556: NEG
75557: PUSH
75558: LD_INT 4
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 1
75567: NEG
75568: PUSH
75569: LD_INT 3
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 2
75578: PUSH
75579: LD_INT 5
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 2
75588: NEG
75589: PUSH
75590: LD_INT 3
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: LD_INT 3
75599: NEG
75600: PUSH
75601: LD_INT 0
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: PUSH
75608: LD_INT 3
75610: NEG
75611: PUSH
75612: LD_INT 1
75614: NEG
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 2
75622: NEG
75623: PUSH
75624: LD_INT 0
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: LD_INT 2
75633: NEG
75634: PUSH
75635: LD_INT 1
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PUSH
75642: LD_INT 3
75644: NEG
75645: PUSH
75646: LD_INT 1
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 4
75655: NEG
75656: PUSH
75657: LD_INT 0
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PUSH
75664: LD_INT 4
75666: NEG
75667: PUSH
75668: LD_INT 1
75670: NEG
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: LD_INT 4
75678: NEG
75679: PUSH
75680: LD_INT 2
75682: NEG
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 2
75690: NEG
75691: PUSH
75692: LD_INT 2
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: LD_INT 4
75701: NEG
75702: PUSH
75703: LD_INT 4
75705: NEG
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 4
75713: NEG
75714: PUSH
75715: LD_INT 5
75717: NEG
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: LD_INT 3
75725: NEG
75726: PUSH
75727: LD_INT 4
75729: NEG
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: LD_INT 3
75737: NEG
75738: PUSH
75739: LD_INT 3
75741: NEG
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 4
75749: NEG
75750: PUSH
75751: LD_INT 3
75753: NEG
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 5
75761: NEG
75762: PUSH
75763: LD_INT 4
75765: NEG
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 5
75773: NEG
75774: PUSH
75775: LD_INT 5
75777: NEG
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 3
75785: NEG
75786: PUSH
75787: LD_INT 5
75789: NEG
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 5
75797: NEG
75798: PUSH
75799: LD_INT 3
75801: NEG
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75854: LD_ADDR_VAR 0 30
75858: PUSH
75859: LD_INT 4
75861: PUSH
75862: LD_INT 4
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 4
75871: PUSH
75872: LD_INT 3
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 5
75881: PUSH
75882: LD_INT 4
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: PUSH
75889: LD_INT 5
75891: PUSH
75892: LD_INT 5
75894: PUSH
75895: EMPTY
75896: LIST
75897: LIST
75898: PUSH
75899: LD_INT 4
75901: PUSH
75902: LD_INT 5
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: PUSH
75909: LD_INT 3
75911: PUSH
75912: LD_INT 4
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 3
75921: PUSH
75922: LD_INT 3
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_INT 5
75931: PUSH
75932: LD_INT 3
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 3
75941: PUSH
75942: LD_INT 5
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 0
75951: PUSH
75952: LD_INT 3
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: LD_INT 2
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: PUSH
75969: LD_INT 1
75971: PUSH
75972: LD_INT 3
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PUSH
75979: LD_INT 1
75981: PUSH
75982: LD_INT 4
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: PUSH
75989: LD_INT 0
75991: PUSH
75992: LD_INT 4
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: PUSH
75999: LD_INT 1
76001: NEG
76002: PUSH
76003: LD_INT 3
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PUSH
76010: LD_INT 1
76012: NEG
76013: PUSH
76014: LD_INT 2
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: LD_INT 2
76023: PUSH
76024: LD_INT 4
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: PUSH
76031: LD_INT 2
76033: NEG
76034: PUSH
76035: LD_INT 2
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 4
76044: NEG
76045: PUSH
76046: LD_INT 0
76048: PUSH
76049: EMPTY
76050: LIST
76051: LIST
76052: PUSH
76053: LD_INT 4
76055: NEG
76056: PUSH
76057: LD_INT 1
76059: NEG
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: LD_INT 3
76067: NEG
76068: PUSH
76069: LD_INT 0
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: PUSH
76076: LD_INT 3
76078: NEG
76079: PUSH
76080: LD_INT 1
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: PUSH
76087: LD_INT 4
76089: NEG
76090: PUSH
76091: LD_INT 1
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: LD_INT 5
76100: NEG
76101: PUSH
76102: LD_INT 0
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 5
76111: NEG
76112: PUSH
76113: LD_INT 1
76115: NEG
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 5
76123: NEG
76124: PUSH
76125: LD_INT 2
76127: NEG
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 3
76135: NEG
76136: PUSH
76137: LD_INT 2
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 3
76146: NEG
76147: PUSH
76148: LD_INT 3
76150: NEG
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: LD_INT 3
76158: NEG
76159: PUSH
76160: LD_INT 4
76162: NEG
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 2
76170: NEG
76171: PUSH
76172: LD_INT 3
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 2
76182: NEG
76183: PUSH
76184: LD_INT 2
76186: NEG
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 3
76194: NEG
76195: PUSH
76196: LD_INT 2
76198: NEG
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: LD_INT 4
76206: NEG
76207: PUSH
76208: LD_INT 3
76210: NEG
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: PUSH
76216: LD_INT 4
76218: NEG
76219: PUSH
76220: LD_INT 4
76222: NEG
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 2
76230: NEG
76231: PUSH
76232: LD_INT 4
76234: NEG
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: LD_INT 4
76242: NEG
76243: PUSH
76244: LD_INT 2
76246: NEG
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: LD_INT 0
76254: PUSH
76255: LD_INT 4
76257: NEG
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: PUSH
76263: LD_INT 0
76265: PUSH
76266: LD_INT 5
76268: NEG
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: PUSH
76274: LD_INT 1
76276: PUSH
76277: LD_INT 4
76279: NEG
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: PUSH
76285: LD_INT 1
76287: PUSH
76288: LD_INT 3
76290: NEG
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 0
76298: PUSH
76299: LD_INT 3
76301: NEG
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 1
76309: NEG
76310: PUSH
76311: LD_INT 4
76313: NEG
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 1
76321: NEG
76322: PUSH
76323: LD_INT 5
76325: NEG
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 2
76333: PUSH
76334: LD_INT 3
76336: NEG
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: PUSH
76342: LD_INT 2
76344: NEG
76345: PUSH
76346: LD_INT 5
76348: NEG
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: LIST
76358: LIST
76359: LIST
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
76401: LD_ADDR_VAR 0 31
76405: PUSH
76406: LD_INT 0
76408: PUSH
76409: LD_INT 4
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 0
76418: PUSH
76419: LD_INT 3
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: PUSH
76426: LD_INT 1
76428: PUSH
76429: LD_INT 4
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 1
76438: PUSH
76439: LD_INT 5
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 0
76448: PUSH
76449: LD_INT 5
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PUSH
76456: LD_INT 1
76458: NEG
76459: PUSH
76460: LD_INT 4
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: PUSH
76467: LD_INT 1
76469: NEG
76470: PUSH
76471: LD_INT 3
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: LD_INT 2
76480: PUSH
76481: LD_INT 5
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PUSH
76488: LD_INT 2
76490: NEG
76491: PUSH
76492: LD_INT 3
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 3
76501: NEG
76502: PUSH
76503: LD_INT 0
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 3
76512: NEG
76513: PUSH
76514: LD_INT 1
76516: NEG
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: PUSH
76522: LD_INT 2
76524: NEG
76525: PUSH
76526: LD_INT 0
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PUSH
76533: LD_INT 2
76535: NEG
76536: PUSH
76537: LD_INT 1
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: LD_INT 3
76546: NEG
76547: PUSH
76548: LD_INT 1
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: PUSH
76555: LD_INT 4
76557: NEG
76558: PUSH
76559: LD_INT 0
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PUSH
76566: LD_INT 4
76568: NEG
76569: PUSH
76570: LD_INT 1
76572: NEG
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: PUSH
76578: LD_INT 4
76580: NEG
76581: PUSH
76582: LD_INT 2
76584: NEG
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: LD_INT 2
76592: NEG
76593: PUSH
76594: LD_INT 2
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 4
76603: NEG
76604: PUSH
76605: LD_INT 4
76607: NEG
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 4
76615: NEG
76616: PUSH
76617: LD_INT 5
76619: NEG
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 3
76627: NEG
76628: PUSH
76629: LD_INT 4
76631: NEG
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: PUSH
76637: LD_INT 3
76639: NEG
76640: PUSH
76641: LD_INT 3
76643: NEG
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: LD_INT 4
76651: NEG
76652: PUSH
76653: LD_INT 3
76655: NEG
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: LD_INT 5
76663: NEG
76664: PUSH
76665: LD_INT 4
76667: NEG
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 5
76675: NEG
76676: PUSH
76677: LD_INT 5
76679: NEG
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 3
76687: NEG
76688: PUSH
76689: LD_INT 5
76691: NEG
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: LD_INT 5
76699: NEG
76700: PUSH
76701: LD_INT 3
76703: NEG
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: LD_INT 0
76711: PUSH
76712: LD_INT 3
76714: NEG
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: LD_INT 4
76725: NEG
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: LD_INT 3
76736: NEG
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 1
76744: PUSH
76745: LD_INT 2
76747: NEG
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: LD_INT 0
76755: PUSH
76756: LD_INT 2
76758: NEG
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: PUSH
76764: LD_INT 1
76766: NEG
76767: PUSH
76768: LD_INT 3
76770: NEG
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 4
76782: NEG
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 2
76790: PUSH
76791: LD_INT 2
76793: NEG
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 2
76801: NEG
76802: PUSH
76803: LD_INT 4
76805: NEG
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: PUSH
76811: LD_INT 4
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: LD_INT 4
76823: PUSH
76824: LD_INT 1
76826: NEG
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 5
76834: PUSH
76835: LD_INT 0
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 5
76844: PUSH
76845: LD_INT 1
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 4
76854: PUSH
76855: LD_INT 1
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: LD_INT 3
76864: PUSH
76865: LD_INT 0
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: LD_INT 3
76874: PUSH
76875: LD_INT 1
76877: NEG
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 3
76885: PUSH
76886: LD_INT 2
76888: NEG
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 5
76896: PUSH
76897: LD_INT 2
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: LIST
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76951: LD_ADDR_VAR 0 32
76955: PUSH
76956: LD_INT 4
76958: NEG
76959: PUSH
76960: LD_INT 0
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: PUSH
76967: LD_INT 4
76969: NEG
76970: PUSH
76971: LD_INT 1
76973: NEG
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 3
76981: NEG
76982: PUSH
76983: LD_INT 0
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: PUSH
76990: LD_INT 3
76992: NEG
76993: PUSH
76994: LD_INT 1
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PUSH
77001: LD_INT 4
77003: NEG
77004: PUSH
77005: LD_INT 1
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: LD_INT 5
77014: NEG
77015: PUSH
77016: LD_INT 0
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: LD_INT 5
77025: NEG
77026: PUSH
77027: LD_INT 1
77029: NEG
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PUSH
77035: LD_INT 5
77037: NEG
77038: PUSH
77039: LD_INT 2
77041: NEG
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PUSH
77047: LD_INT 3
77049: NEG
77050: PUSH
77051: LD_INT 2
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 3
77060: NEG
77061: PUSH
77062: LD_INT 3
77064: NEG
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 3
77072: NEG
77073: PUSH
77074: LD_INT 4
77076: NEG
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: LD_INT 2
77084: NEG
77085: PUSH
77086: LD_INT 3
77088: NEG
77089: PUSH
77090: EMPTY
77091: LIST
77092: LIST
77093: PUSH
77094: LD_INT 2
77096: NEG
77097: PUSH
77098: LD_INT 2
77100: NEG
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 3
77108: NEG
77109: PUSH
77110: LD_INT 2
77112: NEG
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: LD_INT 4
77120: NEG
77121: PUSH
77122: LD_INT 3
77124: NEG
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 4
77132: NEG
77133: PUSH
77134: LD_INT 4
77136: NEG
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 2
77144: NEG
77145: PUSH
77146: LD_INT 4
77148: NEG
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 4
77156: NEG
77157: PUSH
77158: LD_INT 2
77160: NEG
77161: PUSH
77162: EMPTY
77163: LIST
77164: LIST
77165: PUSH
77166: LD_INT 0
77168: PUSH
77169: LD_INT 4
77171: NEG
77172: PUSH
77173: EMPTY
77174: LIST
77175: LIST
77176: PUSH
77177: LD_INT 0
77179: PUSH
77180: LD_INT 5
77182: NEG
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: LD_INT 1
77190: PUSH
77191: LD_INT 4
77193: NEG
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PUSH
77199: LD_INT 1
77201: PUSH
77202: LD_INT 3
77204: NEG
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: LD_INT 3
77215: NEG
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: PUSH
77221: LD_INT 1
77223: NEG
77224: PUSH
77225: LD_INT 4
77227: NEG
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 1
77235: NEG
77236: PUSH
77237: LD_INT 5
77239: NEG
77240: PUSH
77241: EMPTY
77242: LIST
77243: LIST
77244: PUSH
77245: LD_INT 2
77247: PUSH
77248: LD_INT 3
77250: NEG
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: PUSH
77256: LD_INT 2
77258: NEG
77259: PUSH
77260: LD_INT 5
77262: NEG
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: PUSH
77268: LD_INT 3
77270: PUSH
77271: LD_INT 0
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: PUSH
77278: LD_INT 3
77280: PUSH
77281: LD_INT 1
77283: NEG
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 4
77291: PUSH
77292: LD_INT 0
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 4
77301: PUSH
77302: LD_INT 1
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: PUSH
77309: LD_INT 3
77311: PUSH
77312: LD_INT 1
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: LD_INT 2
77321: PUSH
77322: LD_INT 0
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PUSH
77329: LD_INT 2
77331: PUSH
77332: LD_INT 1
77334: NEG
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: PUSH
77340: LD_INT 2
77342: PUSH
77343: LD_INT 2
77345: NEG
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PUSH
77351: LD_INT 4
77353: PUSH
77354: LD_INT 2
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_INT 4
77363: PUSH
77364: LD_INT 4
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: PUSH
77371: LD_INT 4
77373: PUSH
77374: LD_INT 3
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: PUSH
77381: LD_INT 5
77383: PUSH
77384: LD_INT 4
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: PUSH
77391: LD_INT 5
77393: PUSH
77394: LD_INT 5
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 4
77403: PUSH
77404: LD_INT 5
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: PUSH
77411: LD_INT 3
77413: PUSH
77414: LD_INT 4
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: LD_INT 3
77423: PUSH
77424: LD_INT 3
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 5
77433: PUSH
77434: LD_INT 3
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 3
77443: PUSH
77444: LD_INT 5
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: LIST
77484: LIST
77485: LIST
77486: LIST
77487: LIST
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: LIST
77495: LIST
77496: LIST
77497: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
77498: LD_ADDR_VAR 0 33
77502: PUSH
77503: LD_INT 4
77505: NEG
77506: PUSH
77507: LD_INT 4
77509: NEG
77510: PUSH
77511: EMPTY
77512: LIST
77513: LIST
77514: PUSH
77515: LD_INT 4
77517: NEG
77518: PUSH
77519: LD_INT 5
77521: NEG
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: PUSH
77527: LD_INT 3
77529: NEG
77530: PUSH
77531: LD_INT 4
77533: NEG
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_INT 3
77541: NEG
77542: PUSH
77543: LD_INT 3
77545: NEG
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PUSH
77551: LD_INT 4
77553: NEG
77554: PUSH
77555: LD_INT 3
77557: NEG
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 5
77565: NEG
77566: PUSH
77567: LD_INT 4
77569: NEG
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_INT 5
77577: NEG
77578: PUSH
77579: LD_INT 5
77581: NEG
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: PUSH
77587: LD_INT 3
77589: NEG
77590: PUSH
77591: LD_INT 5
77593: NEG
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: PUSH
77599: LD_INT 5
77601: NEG
77602: PUSH
77603: LD_INT 3
77605: NEG
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 0
77613: PUSH
77614: LD_INT 3
77616: NEG
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: PUSH
77622: LD_INT 0
77624: PUSH
77625: LD_INT 4
77627: NEG
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: PUSH
77633: LD_INT 1
77635: PUSH
77636: LD_INT 3
77638: NEG
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: LD_INT 1
77646: PUSH
77647: LD_INT 2
77649: NEG
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PUSH
77655: LD_INT 0
77657: PUSH
77658: LD_INT 2
77660: NEG
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: PUSH
77666: LD_INT 1
77668: NEG
77669: PUSH
77670: LD_INT 3
77672: NEG
77673: PUSH
77674: EMPTY
77675: LIST
77676: LIST
77677: PUSH
77678: LD_INT 1
77680: NEG
77681: PUSH
77682: LD_INT 4
77684: NEG
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: LD_INT 2
77692: PUSH
77693: LD_INT 2
77695: NEG
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 2
77703: NEG
77704: PUSH
77705: LD_INT 4
77707: NEG
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: PUSH
77713: LD_INT 4
77715: PUSH
77716: LD_INT 0
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PUSH
77723: LD_INT 4
77725: PUSH
77726: LD_INT 1
77728: NEG
77729: PUSH
77730: EMPTY
77731: LIST
77732: LIST
77733: PUSH
77734: LD_INT 5
77736: PUSH
77737: LD_INT 0
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: LD_INT 5
77746: PUSH
77747: LD_INT 1
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PUSH
77754: LD_INT 4
77756: PUSH
77757: LD_INT 1
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: PUSH
77764: LD_INT 3
77766: PUSH
77767: LD_INT 0
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 3
77776: PUSH
77777: LD_INT 1
77779: NEG
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: PUSH
77785: LD_INT 3
77787: PUSH
77788: LD_INT 2
77790: NEG
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: PUSH
77796: LD_INT 5
77798: PUSH
77799: LD_INT 2
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: PUSH
77806: LD_INT 3
77808: PUSH
77809: LD_INT 3
77811: PUSH
77812: EMPTY
77813: LIST
77814: LIST
77815: PUSH
77816: LD_INT 3
77818: PUSH
77819: LD_INT 2
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: LD_INT 4
77828: PUSH
77829: LD_INT 3
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PUSH
77836: LD_INT 4
77838: PUSH
77839: LD_INT 4
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PUSH
77846: LD_INT 3
77848: PUSH
77849: LD_INT 4
77851: PUSH
77852: EMPTY
77853: LIST
77854: LIST
77855: PUSH
77856: LD_INT 2
77858: PUSH
77859: LD_INT 3
77861: PUSH
77862: EMPTY
77863: LIST
77864: LIST
77865: PUSH
77866: LD_INT 2
77868: PUSH
77869: LD_INT 2
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 4
77878: PUSH
77879: LD_INT 2
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: LD_INT 2
77888: PUSH
77889: LD_INT 4
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: LD_INT 4
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: LD_INT 3
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: PUSH
77916: LD_INT 1
77918: PUSH
77919: LD_INT 4
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: LD_INT 1
77928: PUSH
77929: LD_INT 5
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 0
77938: PUSH
77939: LD_INT 5
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: LD_INT 1
77948: NEG
77949: PUSH
77950: LD_INT 4
77952: PUSH
77953: EMPTY
77954: LIST
77955: LIST
77956: PUSH
77957: LD_INT 1
77959: NEG
77960: PUSH
77961: LD_INT 3
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: LD_INT 2
77970: PUSH
77971: LD_INT 5
77973: PUSH
77974: EMPTY
77975: LIST
77976: LIST
77977: PUSH
77978: LD_INT 2
77980: NEG
77981: PUSH
77982: LD_INT 3
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: LIST
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: LIST
78007: LIST
78008: LIST
78009: LIST
78010: LIST
78011: LIST
78012: LIST
78013: LIST
78014: LIST
78015: LIST
78016: LIST
78017: LIST
78018: LIST
78019: LIST
78020: LIST
78021: LIST
78022: LIST
78023: LIST
78024: LIST
78025: LIST
78026: LIST
78027: LIST
78028: LIST
78029: LIST
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78036: LD_ADDR_VAR 0 34
78040: PUSH
78041: LD_INT 0
78043: PUSH
78044: LD_INT 4
78046: NEG
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: PUSH
78052: LD_INT 0
78054: PUSH
78055: LD_INT 5
78057: NEG
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: PUSH
78063: LD_INT 1
78065: PUSH
78066: LD_INT 4
78068: NEG
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: PUSH
78074: LD_INT 1
78076: PUSH
78077: LD_INT 3
78079: NEG
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 0
78087: PUSH
78088: LD_INT 3
78090: NEG
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: PUSH
78096: LD_INT 1
78098: NEG
78099: PUSH
78100: LD_INT 4
78102: NEG
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 1
78110: NEG
78111: PUSH
78112: LD_INT 5
78114: NEG
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 2
78122: PUSH
78123: LD_INT 3
78125: NEG
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: LD_INT 2
78133: NEG
78134: PUSH
78135: LD_INT 5
78137: NEG
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: LD_INT 3
78145: PUSH
78146: LD_INT 0
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 3
78155: PUSH
78156: LD_INT 1
78158: NEG
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: PUSH
78164: LD_INT 4
78166: PUSH
78167: LD_INT 0
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: PUSH
78174: LD_INT 4
78176: PUSH
78177: LD_INT 1
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: LD_INT 3
78186: PUSH
78187: LD_INT 1
78189: PUSH
78190: EMPTY
78191: LIST
78192: LIST
78193: PUSH
78194: LD_INT 2
78196: PUSH
78197: LD_INT 0
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: PUSH
78204: LD_INT 2
78206: PUSH
78207: LD_INT 1
78209: NEG
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: PUSH
78215: LD_INT 2
78217: PUSH
78218: LD_INT 2
78220: NEG
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: PUSH
78226: LD_INT 4
78228: PUSH
78229: LD_INT 2
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: PUSH
78236: LD_INT 4
78238: PUSH
78239: LD_INT 4
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PUSH
78246: LD_INT 4
78248: PUSH
78249: LD_INT 3
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PUSH
78256: LD_INT 5
78258: PUSH
78259: LD_INT 4
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PUSH
78266: LD_INT 5
78268: PUSH
78269: LD_INT 5
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: PUSH
78276: LD_INT 4
78278: PUSH
78279: LD_INT 5
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: LD_INT 3
78288: PUSH
78289: LD_INT 4
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 3
78298: PUSH
78299: LD_INT 3
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 5
78308: PUSH
78309: LD_INT 3
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 3
78318: PUSH
78319: LD_INT 5
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: PUSH
78326: LD_INT 0
78328: PUSH
78329: LD_INT 3
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: PUSH
78336: LD_INT 0
78338: PUSH
78339: LD_INT 2
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: LD_INT 1
78348: PUSH
78349: LD_INT 3
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 1
78358: PUSH
78359: LD_INT 4
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: PUSH
78366: LD_INT 0
78368: PUSH
78369: LD_INT 4
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 1
78378: NEG
78379: PUSH
78380: LD_INT 3
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 1
78389: NEG
78390: PUSH
78391: LD_INT 2
78393: PUSH
78394: EMPTY
78395: LIST
78396: LIST
78397: PUSH
78398: LD_INT 2
78400: PUSH
78401: LD_INT 4
78403: PUSH
78404: EMPTY
78405: LIST
78406: LIST
78407: PUSH
78408: LD_INT 2
78410: NEG
78411: PUSH
78412: LD_INT 2
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PUSH
78419: LD_INT 4
78421: NEG
78422: PUSH
78423: LD_INT 0
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: PUSH
78430: LD_INT 4
78432: NEG
78433: PUSH
78434: LD_INT 1
78436: NEG
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: PUSH
78442: LD_INT 3
78444: NEG
78445: PUSH
78446: LD_INT 0
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: PUSH
78453: LD_INT 3
78455: NEG
78456: PUSH
78457: LD_INT 1
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 4
78466: NEG
78467: PUSH
78468: LD_INT 1
78470: PUSH
78471: EMPTY
78472: LIST
78473: LIST
78474: PUSH
78475: LD_INT 5
78477: NEG
78478: PUSH
78479: LD_INT 0
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PUSH
78486: LD_INT 5
78488: NEG
78489: PUSH
78490: LD_INT 1
78492: NEG
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: PUSH
78498: LD_INT 5
78500: NEG
78501: PUSH
78502: LD_INT 2
78504: NEG
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PUSH
78510: LD_INT 3
78512: NEG
78513: PUSH
78514: LD_INT 2
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: LIST
78564: LIST
78565: LIST
78566: LIST
78567: ST_TO_ADDR
// end ; end ;
78568: GO 78571
78570: POP
// case btype of b_depot , b_warehouse :
78571: LD_VAR 0 1
78575: PUSH
78576: LD_INT 0
78578: DOUBLE
78579: EQUAL
78580: IFTRUE 78590
78582: LD_INT 1
78584: DOUBLE
78585: EQUAL
78586: IFTRUE 78590
78588: GO 78791
78590: POP
// case nation of nation_american :
78591: LD_VAR 0 5
78595: PUSH
78596: LD_INT 1
78598: DOUBLE
78599: EQUAL
78600: IFTRUE 78604
78602: GO 78660
78604: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
78605: LD_ADDR_VAR 0 9
78609: PUSH
78610: LD_VAR 0 11
78614: PUSH
78615: LD_VAR 0 12
78619: PUSH
78620: LD_VAR 0 13
78624: PUSH
78625: LD_VAR 0 14
78629: PUSH
78630: LD_VAR 0 15
78634: PUSH
78635: LD_VAR 0 16
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: PUSH
78648: LD_VAR 0 4
78652: PUSH
78653: LD_INT 1
78655: PLUS
78656: ARRAY
78657: ST_TO_ADDR
78658: GO 78789
78660: LD_INT 2
78662: DOUBLE
78663: EQUAL
78664: IFTRUE 78668
78666: GO 78724
78668: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
78669: LD_ADDR_VAR 0 9
78673: PUSH
78674: LD_VAR 0 17
78678: PUSH
78679: LD_VAR 0 18
78683: PUSH
78684: LD_VAR 0 19
78688: PUSH
78689: LD_VAR 0 20
78693: PUSH
78694: LD_VAR 0 21
78698: PUSH
78699: LD_VAR 0 22
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: PUSH
78712: LD_VAR 0 4
78716: PUSH
78717: LD_INT 1
78719: PLUS
78720: ARRAY
78721: ST_TO_ADDR
78722: GO 78789
78724: LD_INT 3
78726: DOUBLE
78727: EQUAL
78728: IFTRUE 78732
78730: GO 78788
78732: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78733: LD_ADDR_VAR 0 9
78737: PUSH
78738: LD_VAR 0 23
78742: PUSH
78743: LD_VAR 0 24
78747: PUSH
78748: LD_VAR 0 25
78752: PUSH
78753: LD_VAR 0 26
78757: PUSH
78758: LD_VAR 0 27
78762: PUSH
78763: LD_VAR 0 28
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: PUSH
78776: LD_VAR 0 4
78780: PUSH
78781: LD_INT 1
78783: PLUS
78784: ARRAY
78785: ST_TO_ADDR
78786: GO 78789
78788: POP
78789: GO 79338
78791: LD_INT 2
78793: DOUBLE
78794: EQUAL
78795: IFTRUE 78805
78797: LD_INT 3
78799: DOUBLE
78800: EQUAL
78801: IFTRUE 78805
78803: GO 78861
78805: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78806: LD_ADDR_VAR 0 9
78810: PUSH
78811: LD_VAR 0 29
78815: PUSH
78816: LD_VAR 0 30
78820: PUSH
78821: LD_VAR 0 31
78825: PUSH
78826: LD_VAR 0 32
78830: PUSH
78831: LD_VAR 0 33
78835: PUSH
78836: LD_VAR 0 34
78840: PUSH
78841: EMPTY
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: PUSH
78849: LD_VAR 0 4
78853: PUSH
78854: LD_INT 1
78856: PLUS
78857: ARRAY
78858: ST_TO_ADDR
78859: GO 79338
78861: LD_INT 16
78863: DOUBLE
78864: EQUAL
78865: IFTRUE 78917
78867: LD_INT 17
78869: DOUBLE
78870: EQUAL
78871: IFTRUE 78917
78873: LD_INT 18
78875: DOUBLE
78876: EQUAL
78877: IFTRUE 78917
78879: LD_INT 19
78881: DOUBLE
78882: EQUAL
78883: IFTRUE 78917
78885: LD_INT 20
78887: DOUBLE
78888: EQUAL
78889: IFTRUE 78917
78891: LD_INT 21
78893: DOUBLE
78894: EQUAL
78895: IFTRUE 78917
78897: LD_INT 23
78899: DOUBLE
78900: EQUAL
78901: IFTRUE 78917
78903: LD_INT 24
78905: DOUBLE
78906: EQUAL
78907: IFTRUE 78917
78909: LD_INT 25
78911: DOUBLE
78912: EQUAL
78913: IFTRUE 78917
78915: GO 78973
78917: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78918: LD_ADDR_VAR 0 9
78922: PUSH
78923: LD_VAR 0 35
78927: PUSH
78928: LD_VAR 0 36
78932: PUSH
78933: LD_VAR 0 37
78937: PUSH
78938: LD_VAR 0 38
78942: PUSH
78943: LD_VAR 0 39
78947: PUSH
78948: LD_VAR 0 40
78952: PUSH
78953: EMPTY
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: PUSH
78961: LD_VAR 0 4
78965: PUSH
78966: LD_INT 1
78968: PLUS
78969: ARRAY
78970: ST_TO_ADDR
78971: GO 79338
78973: LD_INT 6
78975: DOUBLE
78976: EQUAL
78977: IFTRUE 79029
78979: LD_INT 7
78981: DOUBLE
78982: EQUAL
78983: IFTRUE 79029
78985: LD_INT 8
78987: DOUBLE
78988: EQUAL
78989: IFTRUE 79029
78991: LD_INT 13
78993: DOUBLE
78994: EQUAL
78995: IFTRUE 79029
78997: LD_INT 12
78999: DOUBLE
79000: EQUAL
79001: IFTRUE 79029
79003: LD_INT 15
79005: DOUBLE
79006: EQUAL
79007: IFTRUE 79029
79009: LD_INT 11
79011: DOUBLE
79012: EQUAL
79013: IFTRUE 79029
79015: LD_INT 14
79017: DOUBLE
79018: EQUAL
79019: IFTRUE 79029
79021: LD_INT 10
79023: DOUBLE
79024: EQUAL
79025: IFTRUE 79029
79027: GO 79085
79029: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
79030: LD_ADDR_VAR 0 9
79034: PUSH
79035: LD_VAR 0 41
79039: PUSH
79040: LD_VAR 0 42
79044: PUSH
79045: LD_VAR 0 43
79049: PUSH
79050: LD_VAR 0 44
79054: PUSH
79055: LD_VAR 0 45
79059: PUSH
79060: LD_VAR 0 46
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: PUSH
79073: LD_VAR 0 4
79077: PUSH
79078: LD_INT 1
79080: PLUS
79081: ARRAY
79082: ST_TO_ADDR
79083: GO 79338
79085: LD_INT 36
79087: DOUBLE
79088: EQUAL
79089: IFTRUE 79093
79091: GO 79149
79093: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
79094: LD_ADDR_VAR 0 9
79098: PUSH
79099: LD_VAR 0 47
79103: PUSH
79104: LD_VAR 0 48
79108: PUSH
79109: LD_VAR 0 49
79113: PUSH
79114: LD_VAR 0 50
79118: PUSH
79119: LD_VAR 0 51
79123: PUSH
79124: LD_VAR 0 52
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: LIST
79133: LIST
79134: LIST
79135: LIST
79136: PUSH
79137: LD_VAR 0 4
79141: PUSH
79142: LD_INT 1
79144: PLUS
79145: ARRAY
79146: ST_TO_ADDR
79147: GO 79338
79149: LD_INT 4
79151: DOUBLE
79152: EQUAL
79153: IFTRUE 79175
79155: LD_INT 5
79157: DOUBLE
79158: EQUAL
79159: IFTRUE 79175
79161: LD_INT 34
79163: DOUBLE
79164: EQUAL
79165: IFTRUE 79175
79167: LD_INT 37
79169: DOUBLE
79170: EQUAL
79171: IFTRUE 79175
79173: GO 79231
79175: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
79176: LD_ADDR_VAR 0 9
79180: PUSH
79181: LD_VAR 0 53
79185: PUSH
79186: LD_VAR 0 54
79190: PUSH
79191: LD_VAR 0 55
79195: PUSH
79196: LD_VAR 0 56
79200: PUSH
79201: LD_VAR 0 57
79205: PUSH
79206: LD_VAR 0 58
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: LIST
79215: LIST
79216: LIST
79217: LIST
79218: PUSH
79219: LD_VAR 0 4
79223: PUSH
79224: LD_INT 1
79226: PLUS
79227: ARRAY
79228: ST_TO_ADDR
79229: GO 79338
79231: LD_INT 31
79233: DOUBLE
79234: EQUAL
79235: IFTRUE 79281
79237: LD_INT 32
79239: DOUBLE
79240: EQUAL
79241: IFTRUE 79281
79243: LD_INT 33
79245: DOUBLE
79246: EQUAL
79247: IFTRUE 79281
79249: LD_INT 27
79251: DOUBLE
79252: EQUAL
79253: IFTRUE 79281
79255: LD_INT 26
79257: DOUBLE
79258: EQUAL
79259: IFTRUE 79281
79261: LD_INT 28
79263: DOUBLE
79264: EQUAL
79265: IFTRUE 79281
79267: LD_INT 29
79269: DOUBLE
79270: EQUAL
79271: IFTRUE 79281
79273: LD_INT 30
79275: DOUBLE
79276: EQUAL
79277: IFTRUE 79281
79279: GO 79337
79281: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
79282: LD_ADDR_VAR 0 9
79286: PUSH
79287: LD_VAR 0 59
79291: PUSH
79292: LD_VAR 0 60
79296: PUSH
79297: LD_VAR 0 61
79301: PUSH
79302: LD_VAR 0 62
79306: PUSH
79307: LD_VAR 0 63
79311: PUSH
79312: LD_VAR 0 64
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: PUSH
79325: LD_VAR 0 4
79329: PUSH
79330: LD_INT 1
79332: PLUS
79333: ARRAY
79334: ST_TO_ADDR
79335: GO 79338
79337: POP
// temp_list2 = [ ] ;
79338: LD_ADDR_VAR 0 10
79342: PUSH
79343: EMPTY
79344: ST_TO_ADDR
// for i in temp_list do
79345: LD_ADDR_VAR 0 8
79349: PUSH
79350: LD_VAR 0 9
79354: PUSH
79355: FOR_IN
79356: IFFALSE 79408
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
79358: LD_ADDR_VAR 0 10
79362: PUSH
79363: LD_VAR 0 10
79367: PUSH
79368: LD_VAR 0 8
79372: PUSH
79373: LD_INT 1
79375: ARRAY
79376: PUSH
79377: LD_VAR 0 2
79381: PLUS
79382: PUSH
79383: LD_VAR 0 8
79387: PUSH
79388: LD_INT 2
79390: ARRAY
79391: PUSH
79392: LD_VAR 0 3
79396: PLUS
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PUSH
79402: EMPTY
79403: LIST
79404: ADD
79405: ST_TO_ADDR
79406: GO 79355
79408: POP
79409: POP
// result = temp_list2 ;
79410: LD_ADDR_VAR 0 7
79414: PUSH
79415: LD_VAR 0 10
79419: ST_TO_ADDR
// end ;
79420: LD_VAR 0 7
79424: RET
// export function EnemyInRange ( unit , dist ) ; begin
79425: LD_INT 0
79427: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
79428: LD_ADDR_VAR 0 3
79432: PUSH
79433: LD_VAR 0 1
79437: PPUSH
79438: CALL_OW 255
79442: PPUSH
79443: LD_VAR 0 1
79447: PPUSH
79448: CALL_OW 250
79452: PPUSH
79453: LD_VAR 0 1
79457: PPUSH
79458: CALL_OW 251
79462: PPUSH
79463: LD_VAR 0 2
79467: PPUSH
79468: CALL 53553 0 4
79472: PUSH
79473: LD_INT 4
79475: ARRAY
79476: ST_TO_ADDR
// end ;
79477: LD_VAR 0 3
79481: RET
// export function PlayerSeeMe ( unit ) ; begin
79482: LD_INT 0
79484: PPUSH
// result := See ( your_side , unit ) ;
79485: LD_ADDR_VAR 0 2
79489: PUSH
79490: LD_OWVAR 2
79494: PPUSH
79495: LD_VAR 0 1
79499: PPUSH
79500: CALL_OW 292
79504: ST_TO_ADDR
// end ;
79505: LD_VAR 0 2
79509: RET
// export function ReverseDir ( unit ) ; begin
79510: LD_INT 0
79512: PPUSH
// if not unit then
79513: LD_VAR 0 1
79517: NOT
79518: IFFALSE 79522
// exit ;
79520: GO 79568
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
79522: LD_ADDR_VAR 0 2
79526: PUSH
79527: LD_INT 3
79529: PUSH
79530: LD_INT 4
79532: PUSH
79533: LD_INT 5
79535: PUSH
79536: LD_INT 0
79538: PUSH
79539: LD_INT 1
79541: PUSH
79542: LD_INT 2
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: LIST
79549: LIST
79550: LIST
79551: LIST
79552: PUSH
79553: LD_VAR 0 1
79557: PPUSH
79558: CALL_OW 254
79562: PUSH
79563: LD_INT 1
79565: PLUS
79566: ARRAY
79567: ST_TO_ADDR
// end ;
79568: LD_VAR 0 2
79572: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
79573: LD_INT 0
79575: PPUSH
79576: PPUSH
79577: PPUSH
79578: PPUSH
79579: PPUSH
// if not hexes then
79580: LD_VAR 0 2
79584: NOT
79585: IFFALSE 79589
// exit ;
79587: GO 79737
// dist := 9999 ;
79589: LD_ADDR_VAR 0 5
79593: PUSH
79594: LD_INT 9999
79596: ST_TO_ADDR
// for i = 1 to hexes do
79597: LD_ADDR_VAR 0 4
79601: PUSH
79602: DOUBLE
79603: LD_INT 1
79605: DEC
79606: ST_TO_ADDR
79607: LD_VAR 0 2
79611: PUSH
79612: FOR_TO
79613: IFFALSE 79725
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
79615: LD_VAR 0 1
79619: PPUSH
79620: LD_VAR 0 2
79624: PUSH
79625: LD_VAR 0 4
79629: ARRAY
79630: PUSH
79631: LD_INT 1
79633: ARRAY
79634: PPUSH
79635: LD_VAR 0 2
79639: PUSH
79640: LD_VAR 0 4
79644: ARRAY
79645: PUSH
79646: LD_INT 2
79648: ARRAY
79649: PPUSH
79650: CALL_OW 297
79654: PUSH
79655: LD_VAR 0 5
79659: LESS
79660: IFFALSE 79723
// begin hex := hexes [ i ] ;
79662: LD_ADDR_VAR 0 7
79666: PUSH
79667: LD_VAR 0 2
79671: PUSH
79672: LD_VAR 0 4
79676: ARRAY
79677: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
79678: LD_ADDR_VAR 0 5
79682: PUSH
79683: LD_VAR 0 1
79687: PPUSH
79688: LD_VAR 0 2
79692: PUSH
79693: LD_VAR 0 4
79697: ARRAY
79698: PUSH
79699: LD_INT 1
79701: ARRAY
79702: PPUSH
79703: LD_VAR 0 2
79707: PUSH
79708: LD_VAR 0 4
79712: ARRAY
79713: PUSH
79714: LD_INT 2
79716: ARRAY
79717: PPUSH
79718: CALL_OW 297
79722: ST_TO_ADDR
// end ; end ;
79723: GO 79612
79725: POP
79726: POP
// result := hex ;
79727: LD_ADDR_VAR 0 3
79731: PUSH
79732: LD_VAR 0 7
79736: ST_TO_ADDR
// end ;
79737: LD_VAR 0 3
79741: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79742: LD_INT 0
79744: PPUSH
79745: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79746: LD_VAR 0 1
79750: NOT
79751: PUSH
79752: LD_VAR 0 1
79756: PUSH
79757: LD_INT 21
79759: PUSH
79760: LD_INT 2
79762: PUSH
79763: EMPTY
79764: LIST
79765: LIST
79766: PUSH
79767: LD_INT 23
79769: PUSH
79770: LD_INT 2
79772: PUSH
79773: EMPTY
79774: LIST
79775: LIST
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: PPUSH
79781: CALL_OW 69
79785: IN
79786: NOT
79787: OR
79788: IFFALSE 79792
// exit ;
79790: GO 79839
// for i = 1 to 3 do
79792: LD_ADDR_VAR 0 3
79796: PUSH
79797: DOUBLE
79798: LD_INT 1
79800: DEC
79801: ST_TO_ADDR
79802: LD_INT 3
79804: PUSH
79805: FOR_TO
79806: IFFALSE 79837
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79808: LD_VAR 0 1
79812: PPUSH
79813: CALL_OW 250
79817: PPUSH
79818: LD_VAR 0 1
79822: PPUSH
79823: CALL_OW 251
79827: PPUSH
79828: LD_INT 1
79830: PPUSH
79831: CALL_OW 453
79835: GO 79805
79837: POP
79838: POP
// end ;
79839: LD_VAR 0 2
79843: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79844: LD_INT 0
79846: PPUSH
79847: PPUSH
79848: PPUSH
79849: PPUSH
79850: PPUSH
79851: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79852: LD_VAR 0 1
79856: NOT
79857: PUSH
79858: LD_VAR 0 2
79862: NOT
79863: OR
79864: PUSH
79865: LD_VAR 0 1
79869: PPUSH
79870: CALL_OW 314
79874: OR
79875: IFFALSE 79879
// exit ;
79877: GO 80320
// x := GetX ( enemy_unit ) ;
79879: LD_ADDR_VAR 0 7
79883: PUSH
79884: LD_VAR 0 2
79888: PPUSH
79889: CALL_OW 250
79893: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79894: LD_ADDR_VAR 0 8
79898: PUSH
79899: LD_VAR 0 2
79903: PPUSH
79904: CALL_OW 251
79908: ST_TO_ADDR
// if not x or not y then
79909: LD_VAR 0 7
79913: NOT
79914: PUSH
79915: LD_VAR 0 8
79919: NOT
79920: OR
79921: IFFALSE 79925
// exit ;
79923: GO 80320
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79925: LD_ADDR_VAR 0 6
79929: PUSH
79930: LD_VAR 0 7
79934: PPUSH
79935: LD_INT 0
79937: PPUSH
79938: LD_INT 4
79940: PPUSH
79941: CALL_OW 272
79945: PUSH
79946: LD_VAR 0 8
79950: PPUSH
79951: LD_INT 0
79953: PPUSH
79954: LD_INT 4
79956: PPUSH
79957: CALL_OW 273
79961: PUSH
79962: EMPTY
79963: LIST
79964: LIST
79965: PUSH
79966: LD_VAR 0 7
79970: PPUSH
79971: LD_INT 1
79973: PPUSH
79974: LD_INT 4
79976: PPUSH
79977: CALL_OW 272
79981: PUSH
79982: LD_VAR 0 8
79986: PPUSH
79987: LD_INT 1
79989: PPUSH
79990: LD_INT 4
79992: PPUSH
79993: CALL_OW 273
79997: PUSH
79998: EMPTY
79999: LIST
80000: LIST
80001: PUSH
80002: LD_VAR 0 7
80006: PPUSH
80007: LD_INT 2
80009: PPUSH
80010: LD_INT 4
80012: PPUSH
80013: CALL_OW 272
80017: PUSH
80018: LD_VAR 0 8
80022: PPUSH
80023: LD_INT 2
80025: PPUSH
80026: LD_INT 4
80028: PPUSH
80029: CALL_OW 273
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: PUSH
80038: LD_VAR 0 7
80042: PPUSH
80043: LD_INT 3
80045: PPUSH
80046: LD_INT 4
80048: PPUSH
80049: CALL_OW 272
80053: PUSH
80054: LD_VAR 0 8
80058: PPUSH
80059: LD_INT 3
80061: PPUSH
80062: LD_INT 4
80064: PPUSH
80065: CALL_OW 273
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PUSH
80074: LD_VAR 0 7
80078: PPUSH
80079: LD_INT 4
80081: PPUSH
80082: LD_INT 4
80084: PPUSH
80085: CALL_OW 272
80089: PUSH
80090: LD_VAR 0 8
80094: PPUSH
80095: LD_INT 4
80097: PPUSH
80098: LD_INT 4
80100: PPUSH
80101: CALL_OW 273
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: PUSH
80110: LD_VAR 0 7
80114: PPUSH
80115: LD_INT 5
80117: PPUSH
80118: LD_INT 4
80120: PPUSH
80121: CALL_OW 272
80125: PUSH
80126: LD_VAR 0 8
80130: PPUSH
80131: LD_INT 5
80133: PPUSH
80134: LD_INT 4
80136: PPUSH
80137: CALL_OW 273
80141: PUSH
80142: EMPTY
80143: LIST
80144: LIST
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: LIST
80150: LIST
80151: LIST
80152: LIST
80153: ST_TO_ADDR
// for i = tmp downto 1 do
80154: LD_ADDR_VAR 0 4
80158: PUSH
80159: DOUBLE
80160: LD_VAR 0 6
80164: INC
80165: ST_TO_ADDR
80166: LD_INT 1
80168: PUSH
80169: FOR_DOWNTO
80170: IFFALSE 80271
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
80172: LD_VAR 0 6
80176: PUSH
80177: LD_VAR 0 4
80181: ARRAY
80182: PUSH
80183: LD_INT 1
80185: ARRAY
80186: PPUSH
80187: LD_VAR 0 6
80191: PUSH
80192: LD_VAR 0 4
80196: ARRAY
80197: PUSH
80198: LD_INT 2
80200: ARRAY
80201: PPUSH
80202: CALL_OW 488
80206: NOT
80207: PUSH
80208: LD_VAR 0 6
80212: PUSH
80213: LD_VAR 0 4
80217: ARRAY
80218: PUSH
80219: LD_INT 1
80221: ARRAY
80222: PPUSH
80223: LD_VAR 0 6
80227: PUSH
80228: LD_VAR 0 4
80232: ARRAY
80233: PUSH
80234: LD_INT 2
80236: ARRAY
80237: PPUSH
80238: CALL_OW 428
80242: PUSH
80243: LD_INT 0
80245: NONEQUAL
80246: OR
80247: IFFALSE 80269
// tmp := Delete ( tmp , i ) ;
80249: LD_ADDR_VAR 0 6
80253: PUSH
80254: LD_VAR 0 6
80258: PPUSH
80259: LD_VAR 0 4
80263: PPUSH
80264: CALL_OW 3
80268: ST_TO_ADDR
80269: GO 80169
80271: POP
80272: POP
// j := GetClosestHex ( unit , tmp ) ;
80273: LD_ADDR_VAR 0 5
80277: PUSH
80278: LD_VAR 0 1
80282: PPUSH
80283: LD_VAR 0 6
80287: PPUSH
80288: CALL 79573 0 2
80292: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
80293: LD_VAR 0 1
80297: PPUSH
80298: LD_VAR 0 5
80302: PUSH
80303: LD_INT 1
80305: ARRAY
80306: PPUSH
80307: LD_VAR 0 5
80311: PUSH
80312: LD_INT 2
80314: ARRAY
80315: PPUSH
80316: CALL_OW 111
// end ;
80320: LD_VAR 0 3
80324: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
80325: LD_INT 0
80327: PPUSH
80328: PPUSH
80329: PPUSH
// uc_side = 0 ;
80330: LD_ADDR_OWVAR 20
80334: PUSH
80335: LD_INT 0
80337: ST_TO_ADDR
// uc_nation = 0 ;
80338: LD_ADDR_OWVAR 21
80342: PUSH
80343: LD_INT 0
80345: ST_TO_ADDR
// InitHc ;
80346: CALL_OW 19
// InitVc ;
80350: CALL_OW 20
// if mastodonts then
80354: LD_VAR 0 6
80358: IFFALSE 80425
// for i = 1 to mastodonts do
80360: LD_ADDR_VAR 0 11
80364: PUSH
80365: DOUBLE
80366: LD_INT 1
80368: DEC
80369: ST_TO_ADDR
80370: LD_VAR 0 6
80374: PUSH
80375: FOR_TO
80376: IFFALSE 80423
// begin vc_chassis := 31 ;
80378: LD_ADDR_OWVAR 37
80382: PUSH
80383: LD_INT 31
80385: ST_TO_ADDR
// vc_control := control_rider ;
80386: LD_ADDR_OWVAR 38
80390: PUSH
80391: LD_INT 4
80393: ST_TO_ADDR
// animal := CreateVehicle ;
80394: LD_ADDR_VAR 0 12
80398: PUSH
80399: CALL_OW 45
80403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80404: LD_VAR 0 12
80408: PPUSH
80409: LD_VAR 0 8
80413: PPUSH
80414: LD_INT 0
80416: PPUSH
80417: CALL 87170 0 3
// end ;
80421: GO 80375
80423: POP
80424: POP
// if horses then
80425: LD_VAR 0 5
80429: IFFALSE 80496
// for i = 1 to horses do
80431: LD_ADDR_VAR 0 11
80435: PUSH
80436: DOUBLE
80437: LD_INT 1
80439: DEC
80440: ST_TO_ADDR
80441: LD_VAR 0 5
80445: PUSH
80446: FOR_TO
80447: IFFALSE 80494
// begin hc_class := 21 ;
80449: LD_ADDR_OWVAR 28
80453: PUSH
80454: LD_INT 21
80456: ST_TO_ADDR
// hc_gallery :=  ;
80457: LD_ADDR_OWVAR 33
80461: PUSH
80462: LD_STRING 
80464: ST_TO_ADDR
// animal := CreateHuman ;
80465: LD_ADDR_VAR 0 12
80469: PUSH
80470: CALL_OW 44
80474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80475: LD_VAR 0 12
80479: PPUSH
80480: LD_VAR 0 8
80484: PPUSH
80485: LD_INT 0
80487: PPUSH
80488: CALL 87170 0 3
// end ;
80492: GO 80446
80494: POP
80495: POP
// if birds then
80496: LD_VAR 0 1
80500: IFFALSE 80567
// for i = 1 to birds do
80502: LD_ADDR_VAR 0 11
80506: PUSH
80507: DOUBLE
80508: LD_INT 1
80510: DEC
80511: ST_TO_ADDR
80512: LD_VAR 0 1
80516: PUSH
80517: FOR_TO
80518: IFFALSE 80565
// begin hc_class = 18 ;
80520: LD_ADDR_OWVAR 28
80524: PUSH
80525: LD_INT 18
80527: ST_TO_ADDR
// hc_gallery =  ;
80528: LD_ADDR_OWVAR 33
80532: PUSH
80533: LD_STRING 
80535: ST_TO_ADDR
// animal := CreateHuman ;
80536: LD_ADDR_VAR 0 12
80540: PUSH
80541: CALL_OW 44
80545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80546: LD_VAR 0 12
80550: PPUSH
80551: LD_VAR 0 8
80555: PPUSH
80556: LD_INT 0
80558: PPUSH
80559: CALL 87170 0 3
// end ;
80563: GO 80517
80565: POP
80566: POP
// if tigers then
80567: LD_VAR 0 2
80571: IFFALSE 80655
// for i = 1 to tigers do
80573: LD_ADDR_VAR 0 11
80577: PUSH
80578: DOUBLE
80579: LD_INT 1
80581: DEC
80582: ST_TO_ADDR
80583: LD_VAR 0 2
80587: PUSH
80588: FOR_TO
80589: IFFALSE 80653
// begin hc_class = class_tiger ;
80591: LD_ADDR_OWVAR 28
80595: PUSH
80596: LD_INT 14
80598: ST_TO_ADDR
// hc_gallery =  ;
80599: LD_ADDR_OWVAR 33
80603: PUSH
80604: LD_STRING 
80606: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
80607: LD_ADDR_OWVAR 35
80611: PUSH
80612: LD_INT 7
80614: NEG
80615: PPUSH
80616: LD_INT 7
80618: PPUSH
80619: CALL_OW 12
80623: ST_TO_ADDR
// animal := CreateHuman ;
80624: LD_ADDR_VAR 0 12
80628: PUSH
80629: CALL_OW 44
80633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80634: LD_VAR 0 12
80638: PPUSH
80639: LD_VAR 0 8
80643: PPUSH
80644: LD_INT 0
80646: PPUSH
80647: CALL 87170 0 3
// end ;
80651: GO 80588
80653: POP
80654: POP
// if apemans then
80655: LD_VAR 0 3
80659: IFFALSE 80782
// for i = 1 to apemans do
80661: LD_ADDR_VAR 0 11
80665: PUSH
80666: DOUBLE
80667: LD_INT 1
80669: DEC
80670: ST_TO_ADDR
80671: LD_VAR 0 3
80675: PUSH
80676: FOR_TO
80677: IFFALSE 80780
// begin hc_class = class_apeman ;
80679: LD_ADDR_OWVAR 28
80683: PUSH
80684: LD_INT 12
80686: ST_TO_ADDR
// hc_gallery =  ;
80687: LD_ADDR_OWVAR 33
80691: PUSH
80692: LD_STRING 
80694: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
80695: LD_ADDR_OWVAR 35
80699: PUSH
80700: LD_INT 5
80702: NEG
80703: PPUSH
80704: LD_INT 5
80706: PPUSH
80707: CALL_OW 12
80711: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80712: LD_ADDR_OWVAR 31
80716: PUSH
80717: LD_INT 1
80719: PPUSH
80720: LD_INT 3
80722: PPUSH
80723: CALL_OW 12
80727: PUSH
80728: LD_INT 1
80730: PPUSH
80731: LD_INT 3
80733: PPUSH
80734: CALL_OW 12
80738: PUSH
80739: LD_INT 0
80741: PUSH
80742: LD_INT 0
80744: PUSH
80745: EMPTY
80746: LIST
80747: LIST
80748: LIST
80749: LIST
80750: ST_TO_ADDR
// animal := CreateHuman ;
80751: LD_ADDR_VAR 0 12
80755: PUSH
80756: CALL_OW 44
80760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80761: LD_VAR 0 12
80765: PPUSH
80766: LD_VAR 0 8
80770: PPUSH
80771: LD_INT 0
80773: PPUSH
80774: CALL 87170 0 3
// end ;
80778: GO 80676
80780: POP
80781: POP
// if enchidnas then
80782: LD_VAR 0 4
80786: IFFALSE 80853
// for i = 1 to enchidnas do
80788: LD_ADDR_VAR 0 11
80792: PUSH
80793: DOUBLE
80794: LD_INT 1
80796: DEC
80797: ST_TO_ADDR
80798: LD_VAR 0 4
80802: PUSH
80803: FOR_TO
80804: IFFALSE 80851
// begin hc_class = 13 ;
80806: LD_ADDR_OWVAR 28
80810: PUSH
80811: LD_INT 13
80813: ST_TO_ADDR
// hc_gallery =  ;
80814: LD_ADDR_OWVAR 33
80818: PUSH
80819: LD_STRING 
80821: ST_TO_ADDR
// animal := CreateHuman ;
80822: LD_ADDR_VAR 0 12
80826: PUSH
80827: CALL_OW 44
80831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80832: LD_VAR 0 12
80836: PPUSH
80837: LD_VAR 0 8
80841: PPUSH
80842: LD_INT 0
80844: PPUSH
80845: CALL 87170 0 3
// end ;
80849: GO 80803
80851: POP
80852: POP
// if fishes then
80853: LD_VAR 0 7
80857: IFFALSE 80924
// for i = 1 to fishes do
80859: LD_ADDR_VAR 0 11
80863: PUSH
80864: DOUBLE
80865: LD_INT 1
80867: DEC
80868: ST_TO_ADDR
80869: LD_VAR 0 7
80873: PUSH
80874: FOR_TO
80875: IFFALSE 80922
// begin hc_class = 20 ;
80877: LD_ADDR_OWVAR 28
80881: PUSH
80882: LD_INT 20
80884: ST_TO_ADDR
// hc_gallery =  ;
80885: LD_ADDR_OWVAR 33
80889: PUSH
80890: LD_STRING 
80892: ST_TO_ADDR
// animal := CreateHuman ;
80893: LD_ADDR_VAR 0 12
80897: PUSH
80898: CALL_OW 44
80902: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80903: LD_VAR 0 12
80907: PPUSH
80908: LD_VAR 0 9
80912: PPUSH
80913: LD_INT 0
80915: PPUSH
80916: CALL 87170 0 3
// end ;
80920: GO 80874
80922: POP
80923: POP
// end ;
80924: LD_VAR 0 10
80928: RET
// export function WantHeal ( sci , unit ) ; begin
80929: LD_INT 0
80931: PPUSH
// if GetTaskList ( sci ) > 0 then
80932: LD_VAR 0 1
80936: PPUSH
80937: CALL_OW 437
80941: PUSH
80942: LD_INT 0
80944: GREATER
80945: IFFALSE 81015
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80947: LD_VAR 0 1
80951: PPUSH
80952: CALL_OW 437
80956: PUSH
80957: LD_INT 1
80959: ARRAY
80960: PUSH
80961: LD_INT 1
80963: ARRAY
80964: PUSH
80965: LD_STRING l
80967: EQUAL
80968: PUSH
80969: LD_VAR 0 1
80973: PPUSH
80974: CALL_OW 437
80978: PUSH
80979: LD_INT 1
80981: ARRAY
80982: PUSH
80983: LD_INT 4
80985: ARRAY
80986: PUSH
80987: LD_VAR 0 2
80991: EQUAL
80992: AND
80993: IFFALSE 81005
// result := true else
80995: LD_ADDR_VAR 0 3
80999: PUSH
81000: LD_INT 1
81002: ST_TO_ADDR
81003: GO 81013
// result := false ;
81005: LD_ADDR_VAR 0 3
81009: PUSH
81010: LD_INT 0
81012: ST_TO_ADDR
// end else
81013: GO 81023
// result := false ;
81015: LD_ADDR_VAR 0 3
81019: PUSH
81020: LD_INT 0
81022: ST_TO_ADDR
// end ;
81023: LD_VAR 0 3
81027: RET
// export function HealTarget ( sci ) ; begin
81028: LD_INT 0
81030: PPUSH
// if not sci then
81031: LD_VAR 0 1
81035: NOT
81036: IFFALSE 81040
// exit ;
81038: GO 81105
// result := 0 ;
81040: LD_ADDR_VAR 0 2
81044: PUSH
81045: LD_INT 0
81047: ST_TO_ADDR
// if GetTaskList ( sci ) then
81048: LD_VAR 0 1
81052: PPUSH
81053: CALL_OW 437
81057: IFFALSE 81105
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
81059: LD_VAR 0 1
81063: PPUSH
81064: CALL_OW 437
81068: PUSH
81069: LD_INT 1
81071: ARRAY
81072: PUSH
81073: LD_INT 1
81075: ARRAY
81076: PUSH
81077: LD_STRING l
81079: EQUAL
81080: IFFALSE 81105
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
81082: LD_ADDR_VAR 0 2
81086: PUSH
81087: LD_VAR 0 1
81091: PPUSH
81092: CALL_OW 437
81096: PUSH
81097: LD_INT 1
81099: ARRAY
81100: PUSH
81101: LD_INT 4
81103: ARRAY
81104: ST_TO_ADDR
// end ;
81105: LD_VAR 0 2
81109: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
81110: LD_INT 0
81112: PPUSH
81113: PPUSH
81114: PPUSH
81115: PPUSH
81116: PPUSH
81117: PPUSH
81118: PPUSH
81119: PPUSH
81120: PPUSH
81121: PPUSH
81122: PPUSH
81123: PPUSH
81124: PPUSH
81125: PPUSH
81126: PPUSH
81127: PPUSH
81128: PPUSH
81129: PPUSH
81130: PPUSH
81131: PPUSH
81132: PPUSH
81133: PPUSH
81134: PPUSH
81135: PPUSH
81136: PPUSH
81137: PPUSH
81138: PPUSH
81139: PPUSH
81140: PPUSH
81141: PPUSH
81142: PPUSH
81143: PPUSH
81144: PPUSH
81145: PPUSH
// if not list then
81146: LD_VAR 0 1
81150: NOT
81151: IFFALSE 81155
// exit ;
81153: GO 85781
// base := list [ 1 ] ;
81155: LD_ADDR_VAR 0 3
81159: PUSH
81160: LD_VAR 0 1
81164: PUSH
81165: LD_INT 1
81167: ARRAY
81168: ST_TO_ADDR
// group := list [ 2 ] ;
81169: LD_ADDR_VAR 0 4
81173: PUSH
81174: LD_VAR 0 1
81178: PUSH
81179: LD_INT 2
81181: ARRAY
81182: ST_TO_ADDR
// path := list [ 3 ] ;
81183: LD_ADDR_VAR 0 5
81187: PUSH
81188: LD_VAR 0 1
81192: PUSH
81193: LD_INT 3
81195: ARRAY
81196: ST_TO_ADDR
// flags := list [ 4 ] ;
81197: LD_ADDR_VAR 0 6
81201: PUSH
81202: LD_VAR 0 1
81206: PUSH
81207: LD_INT 4
81209: ARRAY
81210: ST_TO_ADDR
// mined := [ ] ;
81211: LD_ADDR_VAR 0 27
81215: PUSH
81216: EMPTY
81217: ST_TO_ADDR
// bombed := [ ] ;
81218: LD_ADDR_VAR 0 28
81222: PUSH
81223: EMPTY
81224: ST_TO_ADDR
// healers := [ ] ;
81225: LD_ADDR_VAR 0 31
81229: PUSH
81230: EMPTY
81231: ST_TO_ADDR
// to_heal := [ ] ;
81232: LD_ADDR_VAR 0 30
81236: PUSH
81237: EMPTY
81238: ST_TO_ADDR
// repairs := [ ] ;
81239: LD_ADDR_VAR 0 33
81243: PUSH
81244: EMPTY
81245: ST_TO_ADDR
// to_repair := [ ] ;
81246: LD_ADDR_VAR 0 32
81250: PUSH
81251: EMPTY
81252: ST_TO_ADDR
// if not group or not path then
81253: LD_VAR 0 4
81257: NOT
81258: PUSH
81259: LD_VAR 0 5
81263: NOT
81264: OR
81265: IFFALSE 81269
// exit ;
81267: GO 85781
// side := GetSide ( group [ 1 ] ) ;
81269: LD_ADDR_VAR 0 35
81273: PUSH
81274: LD_VAR 0 4
81278: PUSH
81279: LD_INT 1
81281: ARRAY
81282: PPUSH
81283: CALL_OW 255
81287: ST_TO_ADDR
// if flags then
81288: LD_VAR 0 6
81292: IFFALSE 81436
// begin f_ignore_area := flags [ 1 ] ;
81294: LD_ADDR_VAR 0 17
81298: PUSH
81299: LD_VAR 0 6
81303: PUSH
81304: LD_INT 1
81306: ARRAY
81307: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
81308: LD_ADDR_VAR 0 18
81312: PUSH
81313: LD_VAR 0 6
81317: PUSH
81318: LD_INT 2
81320: ARRAY
81321: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
81322: LD_ADDR_VAR 0 19
81326: PUSH
81327: LD_VAR 0 6
81331: PUSH
81332: LD_INT 3
81334: ARRAY
81335: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
81336: LD_ADDR_VAR 0 20
81340: PUSH
81341: LD_VAR 0 6
81345: PUSH
81346: LD_INT 4
81348: ARRAY
81349: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
81350: LD_ADDR_VAR 0 21
81354: PUSH
81355: LD_VAR 0 6
81359: PUSH
81360: LD_INT 5
81362: ARRAY
81363: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
81364: LD_ADDR_VAR 0 22
81368: PUSH
81369: LD_VAR 0 6
81373: PUSH
81374: LD_INT 6
81376: ARRAY
81377: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
81378: LD_ADDR_VAR 0 23
81382: PUSH
81383: LD_VAR 0 6
81387: PUSH
81388: LD_INT 7
81390: ARRAY
81391: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
81392: LD_ADDR_VAR 0 24
81396: PUSH
81397: LD_VAR 0 6
81401: PUSH
81402: LD_INT 8
81404: ARRAY
81405: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
81406: LD_ADDR_VAR 0 25
81410: PUSH
81411: LD_VAR 0 6
81415: PUSH
81416: LD_INT 9
81418: ARRAY
81419: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
81420: LD_ADDR_VAR 0 26
81424: PUSH
81425: LD_VAR 0 6
81429: PUSH
81430: LD_INT 10
81432: ARRAY
81433: ST_TO_ADDR
// end else
81434: GO 81516
// begin f_ignore_area := false ;
81436: LD_ADDR_VAR 0 17
81440: PUSH
81441: LD_INT 0
81443: ST_TO_ADDR
// f_capture := false ;
81444: LD_ADDR_VAR 0 18
81448: PUSH
81449: LD_INT 0
81451: ST_TO_ADDR
// f_ignore_civ := false ;
81452: LD_ADDR_VAR 0 19
81456: PUSH
81457: LD_INT 0
81459: ST_TO_ADDR
// f_murder := false ;
81460: LD_ADDR_VAR 0 20
81464: PUSH
81465: LD_INT 0
81467: ST_TO_ADDR
// f_mines := false ;
81468: LD_ADDR_VAR 0 21
81472: PUSH
81473: LD_INT 0
81475: ST_TO_ADDR
// f_repair := false ;
81476: LD_ADDR_VAR 0 22
81480: PUSH
81481: LD_INT 0
81483: ST_TO_ADDR
// f_heal := false ;
81484: LD_ADDR_VAR 0 23
81488: PUSH
81489: LD_INT 0
81491: ST_TO_ADDR
// f_spacetime := false ;
81492: LD_ADDR_VAR 0 24
81496: PUSH
81497: LD_INT 0
81499: ST_TO_ADDR
// f_attack_depot := false ;
81500: LD_ADDR_VAR 0 25
81504: PUSH
81505: LD_INT 0
81507: ST_TO_ADDR
// f_crawl := false ;
81508: LD_ADDR_VAR 0 26
81512: PUSH
81513: LD_INT 0
81515: ST_TO_ADDR
// end ; if f_heal then
81516: LD_VAR 0 23
81520: IFFALSE 81547
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
81522: LD_ADDR_VAR 0 31
81526: PUSH
81527: LD_VAR 0 4
81531: PPUSH
81532: LD_INT 25
81534: PUSH
81535: LD_INT 4
81537: PUSH
81538: EMPTY
81539: LIST
81540: LIST
81541: PPUSH
81542: CALL_OW 72
81546: ST_TO_ADDR
// if f_repair then
81547: LD_VAR 0 22
81551: IFFALSE 81578
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
81553: LD_ADDR_VAR 0 33
81557: PUSH
81558: LD_VAR 0 4
81562: PPUSH
81563: LD_INT 25
81565: PUSH
81566: LD_INT 3
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: PPUSH
81573: CALL_OW 72
81577: ST_TO_ADDR
// units_path := [ ] ;
81578: LD_ADDR_VAR 0 16
81582: PUSH
81583: EMPTY
81584: ST_TO_ADDR
// for i = 1 to group do
81585: LD_ADDR_VAR 0 7
81589: PUSH
81590: DOUBLE
81591: LD_INT 1
81593: DEC
81594: ST_TO_ADDR
81595: LD_VAR 0 4
81599: PUSH
81600: FOR_TO
81601: IFFALSE 81630
// units_path := Replace ( units_path , i , path ) ;
81603: LD_ADDR_VAR 0 16
81607: PUSH
81608: LD_VAR 0 16
81612: PPUSH
81613: LD_VAR 0 7
81617: PPUSH
81618: LD_VAR 0 5
81622: PPUSH
81623: CALL_OW 1
81627: ST_TO_ADDR
81628: GO 81600
81630: POP
81631: POP
// repeat for i = group downto 1 do
81632: LD_ADDR_VAR 0 7
81636: PUSH
81637: DOUBLE
81638: LD_VAR 0 4
81642: INC
81643: ST_TO_ADDR
81644: LD_INT 1
81646: PUSH
81647: FOR_DOWNTO
81648: IFFALSE 85744
// begin wait ( 5 ) ;
81650: LD_INT 5
81652: PPUSH
81653: CALL_OW 67
// tmp := [ ] ;
81657: LD_ADDR_VAR 0 14
81661: PUSH
81662: EMPTY
81663: ST_TO_ADDR
// attacking := false ;
81664: LD_ADDR_VAR 0 29
81668: PUSH
81669: LD_INT 0
81671: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
81672: LD_VAR 0 4
81676: PUSH
81677: LD_VAR 0 7
81681: ARRAY
81682: PPUSH
81683: CALL_OW 301
81687: PUSH
81688: LD_VAR 0 4
81692: PUSH
81693: LD_VAR 0 7
81697: ARRAY
81698: NOT
81699: OR
81700: IFFALSE 81809
// begin if GetType ( group [ i ] ) = unit_human then
81702: LD_VAR 0 4
81706: PUSH
81707: LD_VAR 0 7
81711: ARRAY
81712: PPUSH
81713: CALL_OW 247
81717: PUSH
81718: LD_INT 1
81720: EQUAL
81721: IFFALSE 81767
// begin to_heal := to_heal diff group [ i ] ;
81723: LD_ADDR_VAR 0 30
81727: PUSH
81728: LD_VAR 0 30
81732: PUSH
81733: LD_VAR 0 4
81737: PUSH
81738: LD_VAR 0 7
81742: ARRAY
81743: DIFF
81744: ST_TO_ADDR
// healers := healers diff group [ i ] ;
81745: LD_ADDR_VAR 0 31
81749: PUSH
81750: LD_VAR 0 31
81754: PUSH
81755: LD_VAR 0 4
81759: PUSH
81760: LD_VAR 0 7
81764: ARRAY
81765: DIFF
81766: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
81767: LD_ADDR_VAR 0 4
81771: PUSH
81772: LD_VAR 0 4
81776: PPUSH
81777: LD_VAR 0 7
81781: PPUSH
81782: CALL_OW 3
81786: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
81787: LD_ADDR_VAR 0 16
81791: PUSH
81792: LD_VAR 0 16
81796: PPUSH
81797: LD_VAR 0 7
81801: PPUSH
81802: CALL_OW 3
81806: ST_TO_ADDR
// continue ;
81807: GO 81647
// end ; if f_repair then
81809: LD_VAR 0 22
81813: IFFALSE 82302
// begin if GetType ( group [ i ] ) = unit_vehicle then
81815: LD_VAR 0 4
81819: PUSH
81820: LD_VAR 0 7
81824: ARRAY
81825: PPUSH
81826: CALL_OW 247
81830: PUSH
81831: LD_INT 2
81833: EQUAL
81834: IFFALSE 82024
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
81836: LD_VAR 0 4
81840: PUSH
81841: LD_VAR 0 7
81845: ARRAY
81846: PPUSH
81847: CALL_OW 256
81851: PUSH
81852: LD_INT 700
81854: LESS
81855: PUSH
81856: LD_VAR 0 4
81860: PUSH
81861: LD_VAR 0 7
81865: ARRAY
81866: PUSH
81867: LD_VAR 0 32
81871: IN
81872: NOT
81873: AND
81874: IFFALSE 81898
// to_repair := to_repair union group [ i ] ;
81876: LD_ADDR_VAR 0 32
81880: PUSH
81881: LD_VAR 0 32
81885: PUSH
81886: LD_VAR 0 4
81890: PUSH
81891: LD_VAR 0 7
81895: ARRAY
81896: UNION
81897: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
81898: LD_VAR 0 4
81902: PUSH
81903: LD_VAR 0 7
81907: ARRAY
81908: PPUSH
81909: CALL_OW 256
81913: PUSH
81914: LD_INT 1000
81916: EQUAL
81917: PUSH
81918: LD_VAR 0 4
81922: PUSH
81923: LD_VAR 0 7
81927: ARRAY
81928: PUSH
81929: LD_VAR 0 32
81933: IN
81934: AND
81935: IFFALSE 81959
// to_repair := to_repair diff group [ i ] ;
81937: LD_ADDR_VAR 0 32
81941: PUSH
81942: LD_VAR 0 32
81946: PUSH
81947: LD_VAR 0 4
81951: PUSH
81952: LD_VAR 0 7
81956: ARRAY
81957: DIFF
81958: ST_TO_ADDR
// if group [ i ] in to_repair then
81959: LD_VAR 0 4
81963: PUSH
81964: LD_VAR 0 7
81968: ARRAY
81969: PUSH
81970: LD_VAR 0 32
81974: IN
81975: IFFALSE 82022
// begin if not IsInArea ( group [ i ] , f_repair ) then
81977: LD_VAR 0 4
81981: PUSH
81982: LD_VAR 0 7
81986: ARRAY
81987: PPUSH
81988: LD_VAR 0 22
81992: PPUSH
81993: CALL_OW 308
81997: NOT
81998: IFFALSE 82020
// ComMoveToArea ( group [ i ] , f_repair ) ;
82000: LD_VAR 0 4
82004: PUSH
82005: LD_VAR 0 7
82009: ARRAY
82010: PPUSH
82011: LD_VAR 0 22
82015: PPUSH
82016: CALL_OW 113
// continue ;
82020: GO 81647
// end ; end else
82022: GO 82302
// if group [ i ] in repairs then
82024: LD_VAR 0 4
82028: PUSH
82029: LD_VAR 0 7
82033: ARRAY
82034: PUSH
82035: LD_VAR 0 33
82039: IN
82040: IFFALSE 82302
// begin if IsInUnit ( group [ i ] ) then
82042: LD_VAR 0 4
82046: PUSH
82047: LD_VAR 0 7
82051: ARRAY
82052: PPUSH
82053: CALL_OW 310
82057: IFFALSE 82125
// begin z := IsInUnit ( group [ i ] ) ;
82059: LD_ADDR_VAR 0 13
82063: PUSH
82064: LD_VAR 0 4
82068: PUSH
82069: LD_VAR 0 7
82073: ARRAY
82074: PPUSH
82075: CALL_OW 310
82079: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
82080: LD_VAR 0 13
82084: PUSH
82085: LD_VAR 0 32
82089: IN
82090: PUSH
82091: LD_VAR 0 13
82095: PPUSH
82096: LD_VAR 0 22
82100: PPUSH
82101: CALL_OW 308
82105: AND
82106: IFFALSE 82123
// ComExitVehicle ( group [ i ] ) ;
82108: LD_VAR 0 4
82112: PUSH
82113: LD_VAR 0 7
82117: ARRAY
82118: PPUSH
82119: CALL_OW 121
// end else
82123: GO 82302
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
82125: LD_ADDR_VAR 0 13
82129: PUSH
82130: LD_VAR 0 4
82134: PPUSH
82135: LD_INT 95
82137: PUSH
82138: LD_VAR 0 22
82142: PUSH
82143: EMPTY
82144: LIST
82145: LIST
82146: PUSH
82147: LD_INT 58
82149: PUSH
82150: EMPTY
82151: LIST
82152: PUSH
82153: EMPTY
82154: LIST
82155: LIST
82156: PPUSH
82157: CALL_OW 72
82161: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
82162: LD_VAR 0 4
82166: PUSH
82167: LD_VAR 0 7
82171: ARRAY
82172: PPUSH
82173: CALL_OW 314
82177: NOT
82178: IFFALSE 82300
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
82180: LD_ADDR_VAR 0 10
82184: PUSH
82185: LD_VAR 0 13
82189: PPUSH
82190: LD_VAR 0 4
82194: PUSH
82195: LD_VAR 0 7
82199: ARRAY
82200: PPUSH
82201: CALL_OW 74
82205: ST_TO_ADDR
// if not x then
82206: LD_VAR 0 10
82210: NOT
82211: IFFALSE 82215
// continue ;
82213: GO 81647
// if GetLives ( x ) < 1000 then
82215: LD_VAR 0 10
82219: PPUSH
82220: CALL_OW 256
82224: PUSH
82225: LD_INT 1000
82227: LESS
82228: IFFALSE 82252
// ComRepairVehicle ( group [ i ] , x ) else
82230: LD_VAR 0 4
82234: PUSH
82235: LD_VAR 0 7
82239: ARRAY
82240: PPUSH
82241: LD_VAR 0 10
82245: PPUSH
82246: CALL_OW 129
82250: GO 82300
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
82252: LD_VAR 0 23
82256: PUSH
82257: LD_VAR 0 4
82261: PUSH
82262: LD_VAR 0 7
82266: ARRAY
82267: PPUSH
82268: CALL_OW 256
82272: PUSH
82273: LD_INT 1000
82275: LESS
82276: AND
82277: NOT
82278: IFFALSE 82300
// ComEnterUnit ( group [ i ] , x ) ;
82280: LD_VAR 0 4
82284: PUSH
82285: LD_VAR 0 7
82289: ARRAY
82290: PPUSH
82291: LD_VAR 0 10
82295: PPUSH
82296: CALL_OW 120
// end ; continue ;
82300: GO 81647
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
82302: LD_VAR 0 23
82306: PUSH
82307: LD_VAR 0 4
82311: PUSH
82312: LD_VAR 0 7
82316: ARRAY
82317: PPUSH
82318: CALL_OW 247
82322: PUSH
82323: LD_INT 1
82325: EQUAL
82326: AND
82327: IFFALSE 82805
// begin if group [ i ] in healers then
82329: LD_VAR 0 4
82333: PUSH
82334: LD_VAR 0 7
82338: ARRAY
82339: PUSH
82340: LD_VAR 0 31
82344: IN
82345: IFFALSE 82618
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
82347: LD_VAR 0 4
82351: PUSH
82352: LD_VAR 0 7
82356: ARRAY
82357: PPUSH
82358: LD_VAR 0 23
82362: PPUSH
82363: CALL_OW 308
82367: NOT
82368: PUSH
82369: LD_VAR 0 4
82373: PUSH
82374: LD_VAR 0 7
82378: ARRAY
82379: PPUSH
82380: CALL_OW 314
82384: NOT
82385: AND
82386: IFFALSE 82410
// ComMoveToArea ( group [ i ] , f_heal ) else
82388: LD_VAR 0 4
82392: PUSH
82393: LD_VAR 0 7
82397: ARRAY
82398: PPUSH
82399: LD_VAR 0 23
82403: PPUSH
82404: CALL_OW 113
82408: GO 82616
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
82410: LD_VAR 0 4
82414: PUSH
82415: LD_VAR 0 7
82419: ARRAY
82420: PPUSH
82421: CALL 81028 0 1
82425: PPUSH
82426: CALL_OW 256
82430: PUSH
82431: LD_INT 1000
82433: EQUAL
82434: IFFALSE 82453
// ComStop ( group [ i ] ) else
82436: LD_VAR 0 4
82440: PUSH
82441: LD_VAR 0 7
82445: ARRAY
82446: PPUSH
82447: CALL_OW 141
82451: GO 82616
// if not HasTask ( group [ i ] ) and to_heal then
82453: LD_VAR 0 4
82457: PUSH
82458: LD_VAR 0 7
82462: ARRAY
82463: PPUSH
82464: CALL_OW 314
82468: NOT
82469: PUSH
82470: LD_VAR 0 30
82474: AND
82475: IFFALSE 82616
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
82477: LD_ADDR_VAR 0 13
82481: PUSH
82482: LD_VAR 0 30
82486: PPUSH
82487: LD_INT 3
82489: PUSH
82490: LD_INT 54
82492: PUSH
82493: EMPTY
82494: LIST
82495: PUSH
82496: EMPTY
82497: LIST
82498: LIST
82499: PPUSH
82500: CALL_OW 72
82504: PPUSH
82505: LD_VAR 0 4
82509: PUSH
82510: LD_VAR 0 7
82514: ARRAY
82515: PPUSH
82516: CALL_OW 74
82520: ST_TO_ADDR
// if z then
82521: LD_VAR 0 13
82525: IFFALSE 82616
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
82527: LD_INT 91
82529: PUSH
82530: LD_VAR 0 13
82534: PUSH
82535: LD_INT 10
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: LIST
82542: PUSH
82543: LD_INT 81
82545: PUSH
82546: LD_VAR 0 13
82550: PPUSH
82551: CALL_OW 255
82555: PUSH
82556: EMPTY
82557: LIST
82558: LIST
82559: PUSH
82560: EMPTY
82561: LIST
82562: LIST
82563: PPUSH
82564: CALL_OW 69
82568: PUSH
82569: LD_INT 0
82571: EQUAL
82572: IFFALSE 82596
// ComHeal ( group [ i ] , z ) else
82574: LD_VAR 0 4
82578: PUSH
82579: LD_VAR 0 7
82583: ARRAY
82584: PPUSH
82585: LD_VAR 0 13
82589: PPUSH
82590: CALL_OW 128
82594: GO 82616
// ComMoveToArea ( group [ i ] , f_heal ) ;
82596: LD_VAR 0 4
82600: PUSH
82601: LD_VAR 0 7
82605: ARRAY
82606: PPUSH
82607: LD_VAR 0 23
82611: PPUSH
82612: CALL_OW 113
// end ; continue ;
82616: GO 81647
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
82618: LD_VAR 0 4
82622: PUSH
82623: LD_VAR 0 7
82627: ARRAY
82628: PPUSH
82629: CALL_OW 256
82633: PUSH
82634: LD_INT 700
82636: LESS
82637: PUSH
82638: LD_VAR 0 4
82642: PUSH
82643: LD_VAR 0 7
82647: ARRAY
82648: PUSH
82649: LD_VAR 0 30
82653: IN
82654: NOT
82655: AND
82656: IFFALSE 82680
// to_heal := to_heal union group [ i ] ;
82658: LD_ADDR_VAR 0 30
82662: PUSH
82663: LD_VAR 0 30
82667: PUSH
82668: LD_VAR 0 4
82672: PUSH
82673: LD_VAR 0 7
82677: ARRAY
82678: UNION
82679: ST_TO_ADDR
// if group [ i ] in to_heal then
82680: LD_VAR 0 4
82684: PUSH
82685: LD_VAR 0 7
82689: ARRAY
82690: PUSH
82691: LD_VAR 0 30
82695: IN
82696: IFFALSE 82805
// begin if GetLives ( group [ i ] ) = 1000 then
82698: LD_VAR 0 4
82702: PUSH
82703: LD_VAR 0 7
82707: ARRAY
82708: PPUSH
82709: CALL_OW 256
82713: PUSH
82714: LD_INT 1000
82716: EQUAL
82717: IFFALSE 82743
// to_heal := to_heal diff group [ i ] else
82719: LD_ADDR_VAR 0 30
82723: PUSH
82724: LD_VAR 0 30
82728: PUSH
82729: LD_VAR 0 4
82733: PUSH
82734: LD_VAR 0 7
82738: ARRAY
82739: DIFF
82740: ST_TO_ADDR
82741: GO 82805
// begin if not IsInArea ( group [ i ] , to_heal ) then
82743: LD_VAR 0 4
82747: PUSH
82748: LD_VAR 0 7
82752: ARRAY
82753: PPUSH
82754: LD_VAR 0 30
82758: PPUSH
82759: CALL_OW 308
82763: NOT
82764: IFFALSE 82788
// ComMoveToArea ( group [ i ] , f_heal ) else
82766: LD_VAR 0 4
82770: PUSH
82771: LD_VAR 0 7
82775: ARRAY
82776: PPUSH
82777: LD_VAR 0 23
82781: PPUSH
82782: CALL_OW 113
82786: GO 82803
// ComHold ( group [ i ] ) ;
82788: LD_VAR 0 4
82792: PUSH
82793: LD_VAR 0 7
82797: ARRAY
82798: PPUSH
82799: CALL_OW 140
// continue ;
82803: GO 81647
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
82805: LD_VAR 0 4
82809: PUSH
82810: LD_VAR 0 7
82814: ARRAY
82815: PPUSH
82816: LD_INT 10
82818: PPUSH
82819: CALL 79425 0 2
82823: NOT
82824: PUSH
82825: LD_VAR 0 16
82829: PUSH
82830: LD_VAR 0 7
82834: ARRAY
82835: PUSH
82836: EMPTY
82837: EQUAL
82838: NOT
82839: AND
82840: IFFALSE 83106
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
82842: LD_VAR 0 4
82846: PUSH
82847: LD_VAR 0 7
82851: ARRAY
82852: PPUSH
82853: CALL_OW 262
82857: PUSH
82858: LD_INT 1
82860: PUSH
82861: LD_INT 2
82863: PUSH
82864: EMPTY
82865: LIST
82866: LIST
82867: IN
82868: IFFALSE 82909
// if GetFuel ( group [ i ] ) < 10 then
82870: LD_VAR 0 4
82874: PUSH
82875: LD_VAR 0 7
82879: ARRAY
82880: PPUSH
82881: CALL_OW 261
82885: PUSH
82886: LD_INT 10
82888: LESS
82889: IFFALSE 82909
// SetFuel ( group [ i ] , 12 ) ;
82891: LD_VAR 0 4
82895: PUSH
82896: LD_VAR 0 7
82900: ARRAY
82901: PPUSH
82902: LD_INT 12
82904: PPUSH
82905: CALL_OW 240
// if units_path [ i ] then
82909: LD_VAR 0 16
82913: PUSH
82914: LD_VAR 0 7
82918: ARRAY
82919: IFFALSE 83104
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
82921: LD_VAR 0 4
82925: PUSH
82926: LD_VAR 0 7
82930: ARRAY
82931: PPUSH
82932: LD_VAR 0 16
82936: PUSH
82937: LD_VAR 0 7
82941: ARRAY
82942: PUSH
82943: LD_INT 1
82945: ARRAY
82946: PUSH
82947: LD_INT 1
82949: ARRAY
82950: PPUSH
82951: LD_VAR 0 16
82955: PUSH
82956: LD_VAR 0 7
82960: ARRAY
82961: PUSH
82962: LD_INT 1
82964: ARRAY
82965: PUSH
82966: LD_INT 2
82968: ARRAY
82969: PPUSH
82970: CALL_OW 297
82974: PUSH
82975: LD_INT 6
82977: GREATER
82978: IFFALSE 83053
// begin if not HasTask ( group [ i ] ) then
82980: LD_VAR 0 4
82984: PUSH
82985: LD_VAR 0 7
82989: ARRAY
82990: PPUSH
82991: CALL_OW 314
82995: NOT
82996: IFFALSE 83051
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
82998: LD_VAR 0 4
83002: PUSH
83003: LD_VAR 0 7
83007: ARRAY
83008: PPUSH
83009: LD_VAR 0 16
83013: PUSH
83014: LD_VAR 0 7
83018: ARRAY
83019: PUSH
83020: LD_INT 1
83022: ARRAY
83023: PUSH
83024: LD_INT 1
83026: ARRAY
83027: PPUSH
83028: LD_VAR 0 16
83032: PUSH
83033: LD_VAR 0 7
83037: ARRAY
83038: PUSH
83039: LD_INT 1
83041: ARRAY
83042: PUSH
83043: LD_INT 2
83045: ARRAY
83046: PPUSH
83047: CALL_OW 114
// end else
83051: GO 83104
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
83053: LD_ADDR_VAR 0 15
83057: PUSH
83058: LD_VAR 0 16
83062: PUSH
83063: LD_VAR 0 7
83067: ARRAY
83068: PPUSH
83069: LD_INT 1
83071: PPUSH
83072: CALL_OW 3
83076: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
83077: LD_ADDR_VAR 0 16
83081: PUSH
83082: LD_VAR 0 16
83086: PPUSH
83087: LD_VAR 0 7
83091: PPUSH
83092: LD_VAR 0 15
83096: PPUSH
83097: CALL_OW 1
83101: ST_TO_ADDR
// continue ;
83102: GO 81647
// end ; end ; end else
83104: GO 85742
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
83106: LD_ADDR_VAR 0 14
83110: PUSH
83111: LD_INT 81
83113: PUSH
83114: LD_VAR 0 4
83118: PUSH
83119: LD_VAR 0 7
83123: ARRAY
83124: PPUSH
83125: CALL_OW 255
83129: PUSH
83130: EMPTY
83131: LIST
83132: LIST
83133: PPUSH
83134: CALL_OW 69
83138: ST_TO_ADDR
// if not tmp then
83139: LD_VAR 0 14
83143: NOT
83144: IFFALSE 83148
// continue ;
83146: GO 81647
// if f_ignore_area then
83148: LD_VAR 0 17
83152: IFFALSE 83240
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
83154: LD_ADDR_VAR 0 15
83158: PUSH
83159: LD_VAR 0 14
83163: PPUSH
83164: LD_INT 3
83166: PUSH
83167: LD_INT 92
83169: PUSH
83170: LD_VAR 0 17
83174: PUSH
83175: LD_INT 1
83177: ARRAY
83178: PUSH
83179: LD_VAR 0 17
83183: PUSH
83184: LD_INT 2
83186: ARRAY
83187: PUSH
83188: LD_VAR 0 17
83192: PUSH
83193: LD_INT 3
83195: ARRAY
83196: PUSH
83197: EMPTY
83198: LIST
83199: LIST
83200: LIST
83201: LIST
83202: PUSH
83203: EMPTY
83204: LIST
83205: LIST
83206: PPUSH
83207: CALL_OW 72
83211: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
83212: LD_VAR 0 14
83216: PUSH
83217: LD_VAR 0 15
83221: DIFF
83222: IFFALSE 83240
// tmp := tmp diff tmp2 ;
83224: LD_ADDR_VAR 0 14
83228: PUSH
83229: LD_VAR 0 14
83233: PUSH
83234: LD_VAR 0 15
83238: DIFF
83239: ST_TO_ADDR
// end ; if not f_murder then
83240: LD_VAR 0 20
83244: NOT
83245: IFFALSE 83303
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
83247: LD_ADDR_VAR 0 15
83251: PUSH
83252: LD_VAR 0 14
83256: PPUSH
83257: LD_INT 3
83259: PUSH
83260: LD_INT 50
83262: PUSH
83263: EMPTY
83264: LIST
83265: PUSH
83266: EMPTY
83267: LIST
83268: LIST
83269: PPUSH
83270: CALL_OW 72
83274: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
83275: LD_VAR 0 14
83279: PUSH
83280: LD_VAR 0 15
83284: DIFF
83285: IFFALSE 83303
// tmp := tmp diff tmp2 ;
83287: LD_ADDR_VAR 0 14
83291: PUSH
83292: LD_VAR 0 14
83296: PUSH
83297: LD_VAR 0 15
83301: DIFF
83302: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
83303: LD_ADDR_VAR 0 14
83307: PUSH
83308: LD_VAR 0 4
83312: PUSH
83313: LD_VAR 0 7
83317: ARRAY
83318: PPUSH
83319: LD_VAR 0 14
83323: PPUSH
83324: LD_INT 1
83326: PPUSH
83327: LD_INT 1
83329: PPUSH
83330: CALL 53092 0 4
83334: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
83335: LD_VAR 0 4
83339: PUSH
83340: LD_VAR 0 7
83344: ARRAY
83345: PPUSH
83346: CALL_OW 257
83350: PUSH
83351: LD_INT 1
83353: EQUAL
83354: IFFALSE 83802
// begin if WantPlant ( group [ i ] ) then
83356: LD_VAR 0 4
83360: PUSH
83361: LD_VAR 0 7
83365: ARRAY
83366: PPUSH
83367: CALL 52593 0 1
83371: IFFALSE 83375
// continue ;
83373: GO 81647
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
83375: LD_VAR 0 18
83379: PUSH
83380: LD_VAR 0 4
83384: PUSH
83385: LD_VAR 0 7
83389: ARRAY
83390: PPUSH
83391: CALL_OW 310
83395: NOT
83396: AND
83397: PUSH
83398: LD_VAR 0 14
83402: PUSH
83403: LD_INT 1
83405: ARRAY
83406: PUSH
83407: LD_VAR 0 14
83411: PPUSH
83412: LD_INT 21
83414: PUSH
83415: LD_INT 2
83417: PUSH
83418: EMPTY
83419: LIST
83420: LIST
83421: PUSH
83422: LD_INT 58
83424: PUSH
83425: EMPTY
83426: LIST
83427: PUSH
83428: EMPTY
83429: LIST
83430: LIST
83431: PPUSH
83432: CALL_OW 72
83436: IN
83437: AND
83438: IFFALSE 83474
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
83440: LD_VAR 0 4
83444: PUSH
83445: LD_VAR 0 7
83449: ARRAY
83450: PPUSH
83451: LD_VAR 0 14
83455: PUSH
83456: LD_INT 1
83458: ARRAY
83459: PPUSH
83460: CALL_OW 120
// attacking := true ;
83464: LD_ADDR_VAR 0 29
83468: PUSH
83469: LD_INT 1
83471: ST_TO_ADDR
// continue ;
83472: GO 81647
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
83474: LD_VAR 0 26
83478: PUSH
83479: LD_VAR 0 4
83483: PUSH
83484: LD_VAR 0 7
83488: ARRAY
83489: PPUSH
83490: CALL_OW 257
83494: PUSH
83495: LD_INT 1
83497: EQUAL
83498: AND
83499: PUSH
83500: LD_VAR 0 4
83504: PUSH
83505: LD_VAR 0 7
83509: ARRAY
83510: PPUSH
83511: CALL_OW 256
83515: PUSH
83516: LD_INT 800
83518: LESS
83519: AND
83520: PUSH
83521: LD_VAR 0 4
83525: PUSH
83526: LD_VAR 0 7
83530: ARRAY
83531: PPUSH
83532: CALL_OW 318
83536: NOT
83537: AND
83538: IFFALSE 83555
// ComCrawl ( group [ i ] ) ;
83540: LD_VAR 0 4
83544: PUSH
83545: LD_VAR 0 7
83549: ARRAY
83550: PPUSH
83551: CALL_OW 137
// if f_mines then
83555: LD_VAR 0 21
83559: IFFALSE 83802
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
83561: LD_VAR 0 14
83565: PUSH
83566: LD_INT 1
83568: ARRAY
83569: PPUSH
83570: CALL_OW 247
83574: PUSH
83575: LD_INT 3
83577: EQUAL
83578: PUSH
83579: LD_VAR 0 14
83583: PUSH
83584: LD_INT 1
83586: ARRAY
83587: PUSH
83588: LD_VAR 0 27
83592: IN
83593: NOT
83594: AND
83595: IFFALSE 83802
// begin x := GetX ( tmp [ 1 ] ) ;
83597: LD_ADDR_VAR 0 10
83601: PUSH
83602: LD_VAR 0 14
83606: PUSH
83607: LD_INT 1
83609: ARRAY
83610: PPUSH
83611: CALL_OW 250
83615: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
83616: LD_ADDR_VAR 0 11
83620: PUSH
83621: LD_VAR 0 14
83625: PUSH
83626: LD_INT 1
83628: ARRAY
83629: PPUSH
83630: CALL_OW 251
83634: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
83635: LD_ADDR_VAR 0 12
83639: PUSH
83640: LD_VAR 0 4
83644: PUSH
83645: LD_VAR 0 7
83649: ARRAY
83650: PPUSH
83651: CALL 79510 0 1
83655: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
83656: LD_VAR 0 4
83660: PUSH
83661: LD_VAR 0 7
83665: ARRAY
83666: PPUSH
83667: LD_VAR 0 10
83671: PPUSH
83672: LD_VAR 0 11
83676: PPUSH
83677: LD_VAR 0 14
83681: PUSH
83682: LD_INT 1
83684: ARRAY
83685: PPUSH
83686: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
83690: LD_VAR 0 4
83694: PUSH
83695: LD_VAR 0 7
83699: ARRAY
83700: PPUSH
83701: LD_VAR 0 10
83705: PPUSH
83706: LD_VAR 0 12
83710: PPUSH
83711: LD_INT 7
83713: PPUSH
83714: CALL_OW 272
83718: PPUSH
83719: LD_VAR 0 11
83723: PPUSH
83724: LD_VAR 0 12
83728: PPUSH
83729: LD_INT 7
83731: PPUSH
83732: CALL_OW 273
83736: PPUSH
83737: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
83741: LD_VAR 0 4
83745: PUSH
83746: LD_VAR 0 7
83750: ARRAY
83751: PPUSH
83752: LD_INT 71
83754: PPUSH
83755: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
83759: LD_ADDR_VAR 0 27
83763: PUSH
83764: LD_VAR 0 27
83768: PPUSH
83769: LD_VAR 0 27
83773: PUSH
83774: LD_INT 1
83776: PLUS
83777: PPUSH
83778: LD_VAR 0 14
83782: PUSH
83783: LD_INT 1
83785: ARRAY
83786: PPUSH
83787: CALL_OW 1
83791: ST_TO_ADDR
// attacking := true ;
83792: LD_ADDR_VAR 0 29
83796: PUSH
83797: LD_INT 1
83799: ST_TO_ADDR
// continue ;
83800: GO 81647
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
83802: LD_VAR 0 4
83806: PUSH
83807: LD_VAR 0 7
83811: ARRAY
83812: PPUSH
83813: CALL_OW 257
83817: PUSH
83818: LD_INT 17
83820: EQUAL
83821: PUSH
83822: LD_VAR 0 4
83826: PUSH
83827: LD_VAR 0 7
83831: ARRAY
83832: PPUSH
83833: CALL_OW 110
83837: PUSH
83838: LD_INT 71
83840: EQUAL
83841: NOT
83842: AND
83843: IFFALSE 83989
// begin attacking := false ;
83845: LD_ADDR_VAR 0 29
83849: PUSH
83850: LD_INT 0
83852: ST_TO_ADDR
// k := 5 ;
83853: LD_ADDR_VAR 0 9
83857: PUSH
83858: LD_INT 5
83860: ST_TO_ADDR
// if tmp < k then
83861: LD_VAR 0 14
83865: PUSH
83866: LD_VAR 0 9
83870: LESS
83871: IFFALSE 83883
// k := tmp ;
83873: LD_ADDR_VAR 0 9
83877: PUSH
83878: LD_VAR 0 14
83882: ST_TO_ADDR
// for j = 1 to k do
83883: LD_ADDR_VAR 0 8
83887: PUSH
83888: DOUBLE
83889: LD_INT 1
83891: DEC
83892: ST_TO_ADDR
83893: LD_VAR 0 9
83897: PUSH
83898: FOR_TO
83899: IFFALSE 83987
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
83901: LD_VAR 0 14
83905: PUSH
83906: LD_VAR 0 8
83910: ARRAY
83911: PUSH
83912: LD_VAR 0 14
83916: PPUSH
83917: LD_INT 58
83919: PUSH
83920: EMPTY
83921: LIST
83922: PPUSH
83923: CALL_OW 72
83927: IN
83928: NOT
83929: IFFALSE 83985
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83931: LD_VAR 0 4
83935: PUSH
83936: LD_VAR 0 7
83940: ARRAY
83941: PPUSH
83942: LD_VAR 0 14
83946: PUSH
83947: LD_VAR 0 8
83951: ARRAY
83952: PPUSH
83953: CALL_OW 115
// attacking := true ;
83957: LD_ADDR_VAR 0 29
83961: PUSH
83962: LD_INT 1
83964: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
83965: LD_VAR 0 4
83969: PUSH
83970: LD_VAR 0 7
83974: ARRAY
83975: PPUSH
83976: LD_INT 71
83978: PPUSH
83979: CALL_OW 109
// continue ;
83983: GO 83898
// end ; end ;
83985: GO 83898
83987: POP
83988: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
83989: LD_VAR 0 4
83993: PUSH
83994: LD_VAR 0 7
83998: ARRAY
83999: PPUSH
84000: CALL_OW 257
84004: PUSH
84005: LD_INT 8
84007: EQUAL
84008: PUSH
84009: LD_VAR 0 4
84013: PUSH
84014: LD_VAR 0 7
84018: ARRAY
84019: PPUSH
84020: CALL_OW 264
84024: PUSH
84025: LD_INT 28
84027: PUSH
84028: LD_INT 45
84030: PUSH
84031: LD_INT 7
84033: PUSH
84034: LD_INT 47
84036: PUSH
84037: EMPTY
84038: LIST
84039: LIST
84040: LIST
84041: LIST
84042: IN
84043: OR
84044: IFFALSE 84274
// begin attacking := false ;
84046: LD_ADDR_VAR 0 29
84050: PUSH
84051: LD_INT 0
84053: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
84054: LD_VAR 0 14
84058: PUSH
84059: LD_INT 1
84061: ARRAY
84062: PPUSH
84063: CALL_OW 266
84067: PUSH
84068: LD_INT 32
84070: PUSH
84071: LD_INT 31
84073: PUSH
84074: LD_INT 33
84076: PUSH
84077: LD_INT 4
84079: PUSH
84080: LD_INT 5
84082: PUSH
84083: EMPTY
84084: LIST
84085: LIST
84086: LIST
84087: LIST
84088: LIST
84089: IN
84090: IFFALSE 84274
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
84092: LD_ADDR_VAR 0 9
84096: PUSH
84097: LD_VAR 0 14
84101: PUSH
84102: LD_INT 1
84104: ARRAY
84105: PPUSH
84106: CALL_OW 266
84110: PPUSH
84111: LD_VAR 0 14
84115: PUSH
84116: LD_INT 1
84118: ARRAY
84119: PPUSH
84120: CALL_OW 250
84124: PPUSH
84125: LD_VAR 0 14
84129: PUSH
84130: LD_INT 1
84132: ARRAY
84133: PPUSH
84134: CALL_OW 251
84138: PPUSH
84139: LD_VAR 0 14
84143: PUSH
84144: LD_INT 1
84146: ARRAY
84147: PPUSH
84148: CALL_OW 254
84152: PPUSH
84153: LD_VAR 0 14
84157: PUSH
84158: LD_INT 1
84160: ARRAY
84161: PPUSH
84162: CALL_OW 248
84166: PPUSH
84167: LD_INT 0
84169: PPUSH
84170: CALL 60886 0 6
84174: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
84175: LD_ADDR_VAR 0 8
84179: PUSH
84180: LD_VAR 0 4
84184: PUSH
84185: LD_VAR 0 7
84189: ARRAY
84190: PPUSH
84191: LD_VAR 0 9
84195: PPUSH
84196: CALL 79573 0 2
84200: ST_TO_ADDR
// if j then
84201: LD_VAR 0 8
84205: IFFALSE 84274
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
84207: LD_VAR 0 8
84211: PUSH
84212: LD_INT 1
84214: ARRAY
84215: PPUSH
84216: LD_VAR 0 8
84220: PUSH
84221: LD_INT 2
84223: ARRAY
84224: PPUSH
84225: CALL_OW 488
84229: IFFALSE 84274
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
84231: LD_VAR 0 4
84235: PUSH
84236: LD_VAR 0 7
84240: ARRAY
84241: PPUSH
84242: LD_VAR 0 8
84246: PUSH
84247: LD_INT 1
84249: ARRAY
84250: PPUSH
84251: LD_VAR 0 8
84255: PUSH
84256: LD_INT 2
84258: ARRAY
84259: PPUSH
84260: CALL_OW 116
// attacking := true ;
84264: LD_ADDR_VAR 0 29
84268: PUSH
84269: LD_INT 1
84271: ST_TO_ADDR
// continue ;
84272: GO 81647
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
84274: LD_VAR 0 4
84278: PUSH
84279: LD_VAR 0 7
84283: ARRAY
84284: PPUSH
84285: CALL_OW 265
84289: PUSH
84290: LD_INT 11
84292: EQUAL
84293: IFFALSE 84571
// begin k := 10 ;
84295: LD_ADDR_VAR 0 9
84299: PUSH
84300: LD_INT 10
84302: ST_TO_ADDR
// x := 0 ;
84303: LD_ADDR_VAR 0 10
84307: PUSH
84308: LD_INT 0
84310: ST_TO_ADDR
// if tmp < k then
84311: LD_VAR 0 14
84315: PUSH
84316: LD_VAR 0 9
84320: LESS
84321: IFFALSE 84333
// k := tmp ;
84323: LD_ADDR_VAR 0 9
84327: PUSH
84328: LD_VAR 0 14
84332: ST_TO_ADDR
// for j = k downto 1 do
84333: LD_ADDR_VAR 0 8
84337: PUSH
84338: DOUBLE
84339: LD_VAR 0 9
84343: INC
84344: ST_TO_ADDR
84345: LD_INT 1
84347: PUSH
84348: FOR_DOWNTO
84349: IFFALSE 84424
// begin if GetType ( tmp [ j ] ) = unit_human then
84351: LD_VAR 0 14
84355: PUSH
84356: LD_VAR 0 8
84360: ARRAY
84361: PPUSH
84362: CALL_OW 247
84366: PUSH
84367: LD_INT 1
84369: EQUAL
84370: IFFALSE 84422
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
84372: LD_VAR 0 4
84376: PUSH
84377: LD_VAR 0 7
84381: ARRAY
84382: PPUSH
84383: LD_VAR 0 14
84387: PUSH
84388: LD_VAR 0 8
84392: ARRAY
84393: PPUSH
84394: CALL 79844 0 2
// x := tmp [ j ] ;
84398: LD_ADDR_VAR 0 10
84402: PUSH
84403: LD_VAR 0 14
84407: PUSH
84408: LD_VAR 0 8
84412: ARRAY
84413: ST_TO_ADDR
// attacking := true ;
84414: LD_ADDR_VAR 0 29
84418: PUSH
84419: LD_INT 1
84421: ST_TO_ADDR
// end ; end ;
84422: GO 84348
84424: POP
84425: POP
// if not x then
84426: LD_VAR 0 10
84430: NOT
84431: IFFALSE 84571
// begin attacking := true ;
84433: LD_ADDR_VAR 0 29
84437: PUSH
84438: LD_INT 1
84440: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
84441: LD_VAR 0 4
84445: PUSH
84446: LD_VAR 0 7
84450: ARRAY
84451: PPUSH
84452: CALL_OW 250
84456: PPUSH
84457: LD_VAR 0 4
84461: PUSH
84462: LD_VAR 0 7
84466: ARRAY
84467: PPUSH
84468: CALL_OW 251
84472: PPUSH
84473: CALL_OW 546
84477: PUSH
84478: LD_INT 2
84480: ARRAY
84481: PUSH
84482: LD_VAR 0 14
84486: PUSH
84487: LD_INT 1
84489: ARRAY
84490: PPUSH
84491: CALL_OW 250
84495: PPUSH
84496: LD_VAR 0 14
84500: PUSH
84501: LD_INT 1
84503: ARRAY
84504: PPUSH
84505: CALL_OW 251
84509: PPUSH
84510: CALL_OW 546
84514: PUSH
84515: LD_INT 2
84517: ARRAY
84518: EQUAL
84519: IFFALSE 84547
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
84521: LD_VAR 0 4
84525: PUSH
84526: LD_VAR 0 7
84530: ARRAY
84531: PPUSH
84532: LD_VAR 0 14
84536: PUSH
84537: LD_INT 1
84539: ARRAY
84540: PPUSH
84541: CALL 79844 0 2
84545: GO 84571
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
84547: LD_VAR 0 4
84551: PUSH
84552: LD_VAR 0 7
84556: ARRAY
84557: PPUSH
84558: LD_VAR 0 14
84562: PUSH
84563: LD_INT 1
84565: ARRAY
84566: PPUSH
84567: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
84571: LD_VAR 0 4
84575: PUSH
84576: LD_VAR 0 7
84580: ARRAY
84581: PPUSH
84582: CALL_OW 264
84586: PUSH
84587: LD_INT 29
84589: EQUAL
84590: IFFALSE 84956
// begin if WantsToAttack ( group [ i ] ) in bombed then
84592: LD_VAR 0 4
84596: PUSH
84597: LD_VAR 0 7
84601: ARRAY
84602: PPUSH
84603: CALL_OW 319
84607: PUSH
84608: LD_VAR 0 28
84612: IN
84613: IFFALSE 84617
// continue ;
84615: GO 81647
// k := 8 ;
84617: LD_ADDR_VAR 0 9
84621: PUSH
84622: LD_INT 8
84624: ST_TO_ADDR
// x := 0 ;
84625: LD_ADDR_VAR 0 10
84629: PUSH
84630: LD_INT 0
84632: ST_TO_ADDR
// if tmp < k then
84633: LD_VAR 0 14
84637: PUSH
84638: LD_VAR 0 9
84642: LESS
84643: IFFALSE 84655
// k := tmp ;
84645: LD_ADDR_VAR 0 9
84649: PUSH
84650: LD_VAR 0 14
84654: ST_TO_ADDR
// for j = 1 to k do
84655: LD_ADDR_VAR 0 8
84659: PUSH
84660: DOUBLE
84661: LD_INT 1
84663: DEC
84664: ST_TO_ADDR
84665: LD_VAR 0 9
84669: PUSH
84670: FOR_TO
84671: IFFALSE 84803
// begin if GetType ( tmp [ j ] ) = unit_building then
84673: LD_VAR 0 14
84677: PUSH
84678: LD_VAR 0 8
84682: ARRAY
84683: PPUSH
84684: CALL_OW 247
84688: PUSH
84689: LD_INT 3
84691: EQUAL
84692: IFFALSE 84801
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
84694: LD_VAR 0 14
84698: PUSH
84699: LD_VAR 0 8
84703: ARRAY
84704: PUSH
84705: LD_VAR 0 28
84709: IN
84710: NOT
84711: PUSH
84712: LD_VAR 0 14
84716: PUSH
84717: LD_VAR 0 8
84721: ARRAY
84722: PPUSH
84723: CALL_OW 313
84727: AND
84728: IFFALSE 84801
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
84730: LD_VAR 0 4
84734: PUSH
84735: LD_VAR 0 7
84739: ARRAY
84740: PPUSH
84741: LD_VAR 0 14
84745: PUSH
84746: LD_VAR 0 8
84750: ARRAY
84751: PPUSH
84752: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
84756: LD_ADDR_VAR 0 28
84760: PUSH
84761: LD_VAR 0 28
84765: PPUSH
84766: LD_VAR 0 28
84770: PUSH
84771: LD_INT 1
84773: PLUS
84774: PPUSH
84775: LD_VAR 0 14
84779: PUSH
84780: LD_VAR 0 8
84784: ARRAY
84785: PPUSH
84786: CALL_OW 1
84790: ST_TO_ADDR
// attacking := true ;
84791: LD_ADDR_VAR 0 29
84795: PUSH
84796: LD_INT 1
84798: ST_TO_ADDR
// break ;
84799: GO 84803
// end ; end ;
84801: GO 84670
84803: POP
84804: POP
// if not attacking and f_attack_depot then
84805: LD_VAR 0 29
84809: NOT
84810: PUSH
84811: LD_VAR 0 25
84815: AND
84816: IFFALSE 84911
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84818: LD_ADDR_VAR 0 13
84822: PUSH
84823: LD_VAR 0 14
84827: PPUSH
84828: LD_INT 2
84830: PUSH
84831: LD_INT 30
84833: PUSH
84834: LD_INT 0
84836: PUSH
84837: EMPTY
84838: LIST
84839: LIST
84840: PUSH
84841: LD_INT 30
84843: PUSH
84844: LD_INT 1
84846: PUSH
84847: EMPTY
84848: LIST
84849: LIST
84850: PUSH
84851: EMPTY
84852: LIST
84853: LIST
84854: LIST
84855: PPUSH
84856: CALL_OW 72
84860: ST_TO_ADDR
// if z then
84861: LD_VAR 0 13
84865: IFFALSE 84911
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
84867: LD_VAR 0 4
84871: PUSH
84872: LD_VAR 0 7
84876: ARRAY
84877: PPUSH
84878: LD_VAR 0 13
84882: PPUSH
84883: LD_VAR 0 4
84887: PUSH
84888: LD_VAR 0 7
84892: ARRAY
84893: PPUSH
84894: CALL_OW 74
84898: PPUSH
84899: CALL_OW 115
// attacking := true ;
84903: LD_ADDR_VAR 0 29
84907: PUSH
84908: LD_INT 1
84910: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
84911: LD_VAR 0 4
84915: PUSH
84916: LD_VAR 0 7
84920: ARRAY
84921: PPUSH
84922: CALL_OW 256
84926: PUSH
84927: LD_INT 500
84929: LESS
84930: IFFALSE 84956
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
84932: LD_VAR 0 4
84936: PUSH
84937: LD_VAR 0 7
84941: ARRAY
84942: PPUSH
84943: LD_VAR 0 14
84947: PUSH
84948: LD_INT 1
84950: ARRAY
84951: PPUSH
84952: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
84956: LD_VAR 0 4
84960: PUSH
84961: LD_VAR 0 7
84965: ARRAY
84966: PPUSH
84967: CALL_OW 264
84971: PUSH
84972: LD_INT 49
84974: EQUAL
84975: IFFALSE 85096
// begin if not HasTask ( group [ i ] ) then
84977: LD_VAR 0 4
84981: PUSH
84982: LD_VAR 0 7
84986: ARRAY
84987: PPUSH
84988: CALL_OW 314
84992: NOT
84993: IFFALSE 85096
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
84995: LD_ADDR_VAR 0 9
84999: PUSH
85000: LD_INT 81
85002: PUSH
85003: LD_VAR 0 4
85007: PUSH
85008: LD_VAR 0 7
85012: ARRAY
85013: PPUSH
85014: CALL_OW 255
85018: PUSH
85019: EMPTY
85020: LIST
85021: LIST
85022: PPUSH
85023: CALL_OW 69
85027: PPUSH
85028: LD_VAR 0 4
85032: PUSH
85033: LD_VAR 0 7
85037: ARRAY
85038: PPUSH
85039: CALL_OW 74
85043: ST_TO_ADDR
// if k then
85044: LD_VAR 0 9
85048: IFFALSE 85096
// if GetDistUnits ( group [ i ] , k ) > 10 then
85050: LD_VAR 0 4
85054: PUSH
85055: LD_VAR 0 7
85059: ARRAY
85060: PPUSH
85061: LD_VAR 0 9
85065: PPUSH
85066: CALL_OW 296
85070: PUSH
85071: LD_INT 10
85073: GREATER
85074: IFFALSE 85096
// ComMoveUnit ( group [ i ] , k ) ;
85076: LD_VAR 0 4
85080: PUSH
85081: LD_VAR 0 7
85085: ARRAY
85086: PPUSH
85087: LD_VAR 0 9
85091: PPUSH
85092: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
85096: LD_VAR 0 4
85100: PUSH
85101: LD_VAR 0 7
85105: ARRAY
85106: PPUSH
85107: CALL_OW 256
85111: PUSH
85112: LD_INT 250
85114: LESS
85115: PUSH
85116: LD_VAR 0 4
85120: PUSH
85121: LD_VAR 0 7
85125: ARRAY
85126: PUSH
85127: LD_INT 21
85129: PUSH
85130: LD_INT 2
85132: PUSH
85133: EMPTY
85134: LIST
85135: LIST
85136: PUSH
85137: LD_INT 23
85139: PUSH
85140: LD_INT 2
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: EMPTY
85148: LIST
85149: LIST
85150: PPUSH
85151: CALL_OW 69
85155: IN
85156: AND
85157: IFFALSE 85282
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
85159: LD_ADDR_VAR 0 9
85163: PUSH
85164: LD_OWVAR 3
85168: PUSH
85169: LD_VAR 0 4
85173: PUSH
85174: LD_VAR 0 7
85178: ARRAY
85179: DIFF
85180: PPUSH
85181: LD_VAR 0 4
85185: PUSH
85186: LD_VAR 0 7
85190: ARRAY
85191: PPUSH
85192: CALL_OW 74
85196: ST_TO_ADDR
// if not k then
85197: LD_VAR 0 9
85201: NOT
85202: IFFALSE 85206
// continue ;
85204: GO 81647
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
85206: LD_VAR 0 9
85210: PUSH
85211: LD_INT 81
85213: PUSH
85214: LD_VAR 0 4
85218: PUSH
85219: LD_VAR 0 7
85223: ARRAY
85224: PPUSH
85225: CALL_OW 255
85229: PUSH
85230: EMPTY
85231: LIST
85232: LIST
85233: PPUSH
85234: CALL_OW 69
85238: IN
85239: PUSH
85240: LD_VAR 0 9
85244: PPUSH
85245: LD_VAR 0 4
85249: PUSH
85250: LD_VAR 0 7
85254: ARRAY
85255: PPUSH
85256: CALL_OW 296
85260: PUSH
85261: LD_INT 5
85263: LESS
85264: AND
85265: IFFALSE 85282
// ComAutodestruct ( group [ i ] ) ;
85267: LD_VAR 0 4
85271: PUSH
85272: LD_VAR 0 7
85276: ARRAY
85277: PPUSH
85278: CALL 79742 0 1
// end ; if f_attack_depot then
85282: LD_VAR 0 25
85286: IFFALSE 85398
// begin k := 6 ;
85288: LD_ADDR_VAR 0 9
85292: PUSH
85293: LD_INT 6
85295: ST_TO_ADDR
// if tmp < k then
85296: LD_VAR 0 14
85300: PUSH
85301: LD_VAR 0 9
85305: LESS
85306: IFFALSE 85318
// k := tmp ;
85308: LD_ADDR_VAR 0 9
85312: PUSH
85313: LD_VAR 0 14
85317: ST_TO_ADDR
// for j = 1 to k do
85318: LD_ADDR_VAR 0 8
85322: PUSH
85323: DOUBLE
85324: LD_INT 1
85326: DEC
85327: ST_TO_ADDR
85328: LD_VAR 0 9
85332: PUSH
85333: FOR_TO
85334: IFFALSE 85396
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
85336: LD_VAR 0 8
85340: PPUSH
85341: CALL_OW 266
85345: PUSH
85346: LD_INT 0
85348: PUSH
85349: LD_INT 1
85351: PUSH
85352: EMPTY
85353: LIST
85354: LIST
85355: IN
85356: IFFALSE 85394
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85358: LD_VAR 0 4
85362: PUSH
85363: LD_VAR 0 7
85367: ARRAY
85368: PPUSH
85369: LD_VAR 0 14
85373: PUSH
85374: LD_VAR 0 8
85378: ARRAY
85379: PPUSH
85380: CALL_OW 115
// attacking := true ;
85384: LD_ADDR_VAR 0 29
85388: PUSH
85389: LD_INT 1
85391: ST_TO_ADDR
// break ;
85392: GO 85396
// end ;
85394: GO 85333
85396: POP
85397: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
85398: LD_VAR 0 4
85402: PUSH
85403: LD_VAR 0 7
85407: ARRAY
85408: PPUSH
85409: CALL_OW 302
85413: PUSH
85414: LD_VAR 0 29
85418: NOT
85419: AND
85420: IFFALSE 85742
// begin if GetTag ( group [ i ] ) = 71 then
85422: LD_VAR 0 4
85426: PUSH
85427: LD_VAR 0 7
85431: ARRAY
85432: PPUSH
85433: CALL_OW 110
85437: PUSH
85438: LD_INT 71
85440: EQUAL
85441: IFFALSE 85482
// begin if HasTask ( group [ i ] ) then
85443: LD_VAR 0 4
85447: PUSH
85448: LD_VAR 0 7
85452: ARRAY
85453: PPUSH
85454: CALL_OW 314
85458: IFFALSE 85464
// continue else
85460: GO 81647
85462: GO 85482
// SetTag ( group [ i ] , 0 ) ;
85464: LD_VAR 0 4
85468: PUSH
85469: LD_VAR 0 7
85473: ARRAY
85474: PPUSH
85475: LD_INT 0
85477: PPUSH
85478: CALL_OW 109
// end ; k := 8 ;
85482: LD_ADDR_VAR 0 9
85486: PUSH
85487: LD_INT 8
85489: ST_TO_ADDR
// x := 0 ;
85490: LD_ADDR_VAR 0 10
85494: PUSH
85495: LD_INT 0
85497: ST_TO_ADDR
// if tmp < k then
85498: LD_VAR 0 14
85502: PUSH
85503: LD_VAR 0 9
85507: LESS
85508: IFFALSE 85520
// k := tmp ;
85510: LD_ADDR_VAR 0 9
85514: PUSH
85515: LD_VAR 0 14
85519: ST_TO_ADDR
// for j = 1 to k do
85520: LD_ADDR_VAR 0 8
85524: PUSH
85525: DOUBLE
85526: LD_INT 1
85528: DEC
85529: ST_TO_ADDR
85530: LD_VAR 0 9
85534: PUSH
85535: FOR_TO
85536: IFFALSE 85634
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
85538: LD_VAR 0 14
85542: PUSH
85543: LD_VAR 0 8
85547: ARRAY
85548: PPUSH
85549: CALL_OW 247
85553: PUSH
85554: LD_INT 1
85556: EQUAL
85557: PUSH
85558: LD_VAR 0 14
85562: PUSH
85563: LD_VAR 0 8
85567: ARRAY
85568: PPUSH
85569: CALL_OW 256
85573: PUSH
85574: LD_INT 250
85576: LESS
85577: PUSH
85578: LD_VAR 0 20
85582: AND
85583: PUSH
85584: LD_VAR 0 20
85588: NOT
85589: PUSH
85590: LD_VAR 0 14
85594: PUSH
85595: LD_VAR 0 8
85599: ARRAY
85600: PPUSH
85601: CALL_OW 256
85605: PUSH
85606: LD_INT 250
85608: GREATEREQUAL
85609: AND
85610: OR
85611: AND
85612: IFFALSE 85632
// begin x := tmp [ j ] ;
85614: LD_ADDR_VAR 0 10
85618: PUSH
85619: LD_VAR 0 14
85623: PUSH
85624: LD_VAR 0 8
85628: ARRAY
85629: ST_TO_ADDR
// break ;
85630: GO 85634
// end ;
85632: GO 85535
85634: POP
85635: POP
// if x then
85636: LD_VAR 0 10
85640: IFFALSE 85664
// ComAttackUnit ( group [ i ] , x ) else
85642: LD_VAR 0 4
85646: PUSH
85647: LD_VAR 0 7
85651: ARRAY
85652: PPUSH
85653: LD_VAR 0 10
85657: PPUSH
85658: CALL_OW 115
85662: GO 85688
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85664: LD_VAR 0 4
85668: PUSH
85669: LD_VAR 0 7
85673: ARRAY
85674: PPUSH
85675: LD_VAR 0 14
85679: PUSH
85680: LD_INT 1
85682: ARRAY
85683: PPUSH
85684: CALL_OW 115
// if not HasTask ( group [ i ] ) then
85688: LD_VAR 0 4
85692: PUSH
85693: LD_VAR 0 7
85697: ARRAY
85698: PPUSH
85699: CALL_OW 314
85703: NOT
85704: IFFALSE 85742
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
85706: LD_VAR 0 4
85710: PUSH
85711: LD_VAR 0 7
85715: ARRAY
85716: PPUSH
85717: LD_VAR 0 14
85721: PPUSH
85722: LD_VAR 0 4
85726: PUSH
85727: LD_VAR 0 7
85731: ARRAY
85732: PPUSH
85733: CALL_OW 74
85737: PPUSH
85738: CALL_OW 115
// end ; end ; end ;
85742: GO 81647
85744: POP
85745: POP
// wait ( 0 0$1 ) ;
85746: LD_INT 35
85748: PPUSH
85749: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
85753: LD_VAR 0 4
85757: PUSH
85758: EMPTY
85759: EQUAL
85760: PUSH
85761: LD_INT 81
85763: PUSH
85764: LD_VAR 0 35
85768: PUSH
85769: EMPTY
85770: LIST
85771: LIST
85772: PPUSH
85773: CALL_OW 69
85777: NOT
85778: OR
85779: IFFALSE 81632
// end ;
85781: LD_VAR 0 2
85785: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
85786: LD_INT 0
85788: PPUSH
85789: PPUSH
85790: PPUSH
85791: PPUSH
// if not base_units then
85792: LD_VAR 0 1
85796: NOT
85797: IFFALSE 85801
// exit ;
85799: GO 85888
// result := false ;
85801: LD_ADDR_VAR 0 2
85805: PUSH
85806: LD_INT 0
85808: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85809: LD_ADDR_VAR 0 5
85813: PUSH
85814: LD_VAR 0 1
85818: PPUSH
85819: LD_INT 21
85821: PUSH
85822: LD_INT 3
85824: PUSH
85825: EMPTY
85826: LIST
85827: LIST
85828: PPUSH
85829: CALL_OW 72
85833: ST_TO_ADDR
// if not tmp then
85834: LD_VAR 0 5
85838: NOT
85839: IFFALSE 85843
// exit ;
85841: GO 85888
// for i in tmp do
85843: LD_ADDR_VAR 0 3
85847: PUSH
85848: LD_VAR 0 5
85852: PUSH
85853: FOR_IN
85854: IFFALSE 85886
// begin result := EnemyInRange ( i , 22 ) ;
85856: LD_ADDR_VAR 0 2
85860: PUSH
85861: LD_VAR 0 3
85865: PPUSH
85866: LD_INT 22
85868: PPUSH
85869: CALL 79425 0 2
85873: ST_TO_ADDR
// if result then
85874: LD_VAR 0 2
85878: IFFALSE 85884
// exit ;
85880: POP
85881: POP
85882: GO 85888
// end ;
85884: GO 85853
85886: POP
85887: POP
// end ;
85888: LD_VAR 0 2
85892: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
85893: LD_INT 0
85895: PPUSH
85896: PPUSH
// if not units then
85897: LD_VAR 0 1
85901: NOT
85902: IFFALSE 85906
// exit ;
85904: GO 85976
// result := [ ] ;
85906: LD_ADDR_VAR 0 3
85910: PUSH
85911: EMPTY
85912: ST_TO_ADDR
// for i in units do
85913: LD_ADDR_VAR 0 4
85917: PUSH
85918: LD_VAR 0 1
85922: PUSH
85923: FOR_IN
85924: IFFALSE 85974
// if GetTag ( i ) = tag then
85926: LD_VAR 0 4
85930: PPUSH
85931: CALL_OW 110
85935: PUSH
85936: LD_VAR 0 2
85940: EQUAL
85941: IFFALSE 85972
// result := Insert ( result , result + 1 , i ) ;
85943: LD_ADDR_VAR 0 3
85947: PUSH
85948: LD_VAR 0 3
85952: PPUSH
85953: LD_VAR 0 3
85957: PUSH
85958: LD_INT 1
85960: PLUS
85961: PPUSH
85962: LD_VAR 0 4
85966: PPUSH
85967: CALL_OW 2
85971: ST_TO_ADDR
85972: GO 85923
85974: POP
85975: POP
// end ;
85976: LD_VAR 0 3
85980: RET
// export function IsDriver ( un ) ; begin
85981: LD_INT 0
85983: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85984: LD_ADDR_VAR 0 2
85988: PUSH
85989: LD_VAR 0 1
85993: PUSH
85994: LD_INT 55
85996: PUSH
85997: EMPTY
85998: LIST
85999: PPUSH
86000: CALL_OW 69
86004: IN
86005: ST_TO_ADDR
// end ;
86006: LD_VAR 0 2
86010: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
86011: LD_INT 0
86013: PPUSH
86014: PPUSH
// list := [ ] ;
86015: LD_ADDR_VAR 0 5
86019: PUSH
86020: EMPTY
86021: ST_TO_ADDR
// case d of 0 :
86022: LD_VAR 0 3
86026: PUSH
86027: LD_INT 0
86029: DOUBLE
86030: EQUAL
86031: IFTRUE 86035
86033: GO 86168
86035: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
86036: LD_ADDR_VAR 0 5
86040: PUSH
86041: LD_VAR 0 1
86045: PUSH
86046: LD_INT 4
86048: MINUS
86049: PUSH
86050: LD_VAR 0 2
86054: PUSH
86055: LD_INT 4
86057: MINUS
86058: PUSH
86059: LD_INT 2
86061: PUSH
86062: EMPTY
86063: LIST
86064: LIST
86065: LIST
86066: PUSH
86067: LD_VAR 0 1
86071: PUSH
86072: LD_INT 3
86074: MINUS
86075: PUSH
86076: LD_VAR 0 2
86080: PUSH
86081: LD_INT 1
86083: PUSH
86084: EMPTY
86085: LIST
86086: LIST
86087: LIST
86088: PUSH
86089: LD_VAR 0 1
86093: PUSH
86094: LD_INT 4
86096: PLUS
86097: PUSH
86098: LD_VAR 0 2
86102: PUSH
86103: LD_INT 4
86105: PUSH
86106: EMPTY
86107: LIST
86108: LIST
86109: LIST
86110: PUSH
86111: LD_VAR 0 1
86115: PUSH
86116: LD_INT 3
86118: PLUS
86119: PUSH
86120: LD_VAR 0 2
86124: PUSH
86125: LD_INT 3
86127: PLUS
86128: PUSH
86129: LD_INT 5
86131: PUSH
86132: EMPTY
86133: LIST
86134: LIST
86135: LIST
86136: PUSH
86137: LD_VAR 0 1
86141: PUSH
86142: LD_VAR 0 2
86146: PUSH
86147: LD_INT 4
86149: PLUS
86150: PUSH
86151: LD_INT 0
86153: PUSH
86154: EMPTY
86155: LIST
86156: LIST
86157: LIST
86158: PUSH
86159: EMPTY
86160: LIST
86161: LIST
86162: LIST
86163: LIST
86164: LIST
86165: ST_TO_ADDR
// end ; 1 :
86166: GO 86866
86168: LD_INT 1
86170: DOUBLE
86171: EQUAL
86172: IFTRUE 86176
86174: GO 86309
86176: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
86177: LD_ADDR_VAR 0 5
86181: PUSH
86182: LD_VAR 0 1
86186: PUSH
86187: LD_VAR 0 2
86191: PUSH
86192: LD_INT 4
86194: MINUS
86195: PUSH
86196: LD_INT 3
86198: PUSH
86199: EMPTY
86200: LIST
86201: LIST
86202: LIST
86203: PUSH
86204: LD_VAR 0 1
86208: PUSH
86209: LD_INT 3
86211: MINUS
86212: PUSH
86213: LD_VAR 0 2
86217: PUSH
86218: LD_INT 3
86220: MINUS
86221: PUSH
86222: LD_INT 2
86224: PUSH
86225: EMPTY
86226: LIST
86227: LIST
86228: LIST
86229: PUSH
86230: LD_VAR 0 1
86234: PUSH
86235: LD_INT 4
86237: MINUS
86238: PUSH
86239: LD_VAR 0 2
86243: PUSH
86244: LD_INT 1
86246: PUSH
86247: EMPTY
86248: LIST
86249: LIST
86250: LIST
86251: PUSH
86252: LD_VAR 0 1
86256: PUSH
86257: LD_VAR 0 2
86261: PUSH
86262: LD_INT 3
86264: PLUS
86265: PUSH
86266: LD_INT 0
86268: PUSH
86269: EMPTY
86270: LIST
86271: LIST
86272: LIST
86273: PUSH
86274: LD_VAR 0 1
86278: PUSH
86279: LD_INT 4
86281: PLUS
86282: PUSH
86283: LD_VAR 0 2
86287: PUSH
86288: LD_INT 4
86290: PLUS
86291: PUSH
86292: LD_INT 5
86294: PUSH
86295: EMPTY
86296: LIST
86297: LIST
86298: LIST
86299: PUSH
86300: EMPTY
86301: LIST
86302: LIST
86303: LIST
86304: LIST
86305: LIST
86306: ST_TO_ADDR
// end ; 2 :
86307: GO 86866
86309: LD_INT 2
86311: DOUBLE
86312: EQUAL
86313: IFTRUE 86317
86315: GO 86446
86317: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
86318: LD_ADDR_VAR 0 5
86322: PUSH
86323: LD_VAR 0 1
86327: PUSH
86328: LD_VAR 0 2
86332: PUSH
86333: LD_INT 3
86335: MINUS
86336: PUSH
86337: LD_INT 3
86339: PUSH
86340: EMPTY
86341: LIST
86342: LIST
86343: LIST
86344: PUSH
86345: LD_VAR 0 1
86349: PUSH
86350: LD_INT 4
86352: PLUS
86353: PUSH
86354: LD_VAR 0 2
86358: PUSH
86359: LD_INT 4
86361: PUSH
86362: EMPTY
86363: LIST
86364: LIST
86365: LIST
86366: PUSH
86367: LD_VAR 0 1
86371: PUSH
86372: LD_VAR 0 2
86376: PUSH
86377: LD_INT 4
86379: PLUS
86380: PUSH
86381: LD_INT 0
86383: PUSH
86384: EMPTY
86385: LIST
86386: LIST
86387: LIST
86388: PUSH
86389: LD_VAR 0 1
86393: PUSH
86394: LD_INT 3
86396: MINUS
86397: PUSH
86398: LD_VAR 0 2
86402: PUSH
86403: LD_INT 1
86405: PUSH
86406: EMPTY
86407: LIST
86408: LIST
86409: LIST
86410: PUSH
86411: LD_VAR 0 1
86415: PUSH
86416: LD_INT 4
86418: MINUS
86419: PUSH
86420: LD_VAR 0 2
86424: PUSH
86425: LD_INT 4
86427: MINUS
86428: PUSH
86429: LD_INT 2
86431: PUSH
86432: EMPTY
86433: LIST
86434: LIST
86435: LIST
86436: PUSH
86437: EMPTY
86438: LIST
86439: LIST
86440: LIST
86441: LIST
86442: LIST
86443: ST_TO_ADDR
// end ; 3 :
86444: GO 86866
86446: LD_INT 3
86448: DOUBLE
86449: EQUAL
86450: IFTRUE 86454
86452: GO 86587
86454: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
86455: LD_ADDR_VAR 0 5
86459: PUSH
86460: LD_VAR 0 1
86464: PUSH
86465: LD_INT 3
86467: PLUS
86468: PUSH
86469: LD_VAR 0 2
86473: PUSH
86474: LD_INT 4
86476: PUSH
86477: EMPTY
86478: LIST
86479: LIST
86480: LIST
86481: PUSH
86482: LD_VAR 0 1
86486: PUSH
86487: LD_INT 4
86489: PLUS
86490: PUSH
86491: LD_VAR 0 2
86495: PUSH
86496: LD_INT 4
86498: PLUS
86499: PUSH
86500: LD_INT 5
86502: PUSH
86503: EMPTY
86504: LIST
86505: LIST
86506: LIST
86507: PUSH
86508: LD_VAR 0 1
86512: PUSH
86513: LD_INT 4
86515: MINUS
86516: PUSH
86517: LD_VAR 0 2
86521: PUSH
86522: LD_INT 1
86524: PUSH
86525: EMPTY
86526: LIST
86527: LIST
86528: LIST
86529: PUSH
86530: LD_VAR 0 1
86534: PUSH
86535: LD_VAR 0 2
86539: PUSH
86540: LD_INT 4
86542: MINUS
86543: PUSH
86544: LD_INT 3
86546: PUSH
86547: EMPTY
86548: LIST
86549: LIST
86550: LIST
86551: PUSH
86552: LD_VAR 0 1
86556: PUSH
86557: LD_INT 3
86559: MINUS
86560: PUSH
86561: LD_VAR 0 2
86565: PUSH
86566: LD_INT 3
86568: MINUS
86569: PUSH
86570: LD_INT 2
86572: PUSH
86573: EMPTY
86574: LIST
86575: LIST
86576: LIST
86577: PUSH
86578: EMPTY
86579: LIST
86580: LIST
86581: LIST
86582: LIST
86583: LIST
86584: ST_TO_ADDR
// end ; 4 :
86585: GO 86866
86587: LD_INT 4
86589: DOUBLE
86590: EQUAL
86591: IFTRUE 86595
86593: GO 86728
86595: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
86596: LD_ADDR_VAR 0 5
86600: PUSH
86601: LD_VAR 0 1
86605: PUSH
86606: LD_VAR 0 2
86610: PUSH
86611: LD_INT 4
86613: PLUS
86614: PUSH
86615: LD_INT 0
86617: PUSH
86618: EMPTY
86619: LIST
86620: LIST
86621: LIST
86622: PUSH
86623: LD_VAR 0 1
86627: PUSH
86628: LD_INT 3
86630: PLUS
86631: PUSH
86632: LD_VAR 0 2
86636: PUSH
86637: LD_INT 3
86639: PLUS
86640: PUSH
86641: LD_INT 5
86643: PUSH
86644: EMPTY
86645: LIST
86646: LIST
86647: LIST
86648: PUSH
86649: LD_VAR 0 1
86653: PUSH
86654: LD_INT 4
86656: PLUS
86657: PUSH
86658: LD_VAR 0 2
86662: PUSH
86663: LD_INT 4
86665: PUSH
86666: EMPTY
86667: LIST
86668: LIST
86669: LIST
86670: PUSH
86671: LD_VAR 0 1
86675: PUSH
86676: LD_VAR 0 2
86680: PUSH
86681: LD_INT 3
86683: MINUS
86684: PUSH
86685: LD_INT 3
86687: PUSH
86688: EMPTY
86689: LIST
86690: LIST
86691: LIST
86692: PUSH
86693: LD_VAR 0 1
86697: PUSH
86698: LD_INT 4
86700: MINUS
86701: PUSH
86702: LD_VAR 0 2
86706: PUSH
86707: LD_INT 4
86709: MINUS
86710: PUSH
86711: LD_INT 2
86713: PUSH
86714: EMPTY
86715: LIST
86716: LIST
86717: LIST
86718: PUSH
86719: EMPTY
86720: LIST
86721: LIST
86722: LIST
86723: LIST
86724: LIST
86725: ST_TO_ADDR
// end ; 5 :
86726: GO 86866
86728: LD_INT 5
86730: DOUBLE
86731: EQUAL
86732: IFTRUE 86736
86734: GO 86865
86736: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
86737: LD_ADDR_VAR 0 5
86741: PUSH
86742: LD_VAR 0 1
86746: PUSH
86747: LD_INT 4
86749: MINUS
86750: PUSH
86751: LD_VAR 0 2
86755: PUSH
86756: LD_INT 1
86758: PUSH
86759: EMPTY
86760: LIST
86761: LIST
86762: LIST
86763: PUSH
86764: LD_VAR 0 1
86768: PUSH
86769: LD_VAR 0 2
86773: PUSH
86774: LD_INT 4
86776: MINUS
86777: PUSH
86778: LD_INT 3
86780: PUSH
86781: EMPTY
86782: LIST
86783: LIST
86784: LIST
86785: PUSH
86786: LD_VAR 0 1
86790: PUSH
86791: LD_INT 4
86793: PLUS
86794: PUSH
86795: LD_VAR 0 2
86799: PUSH
86800: LD_INT 4
86802: PLUS
86803: PUSH
86804: LD_INT 5
86806: PUSH
86807: EMPTY
86808: LIST
86809: LIST
86810: LIST
86811: PUSH
86812: LD_VAR 0 1
86816: PUSH
86817: LD_INT 3
86819: PLUS
86820: PUSH
86821: LD_VAR 0 2
86825: PUSH
86826: LD_INT 4
86828: PUSH
86829: EMPTY
86830: LIST
86831: LIST
86832: LIST
86833: PUSH
86834: LD_VAR 0 1
86838: PUSH
86839: LD_VAR 0 2
86843: PUSH
86844: LD_INT 3
86846: PLUS
86847: PUSH
86848: LD_INT 0
86850: PUSH
86851: EMPTY
86852: LIST
86853: LIST
86854: LIST
86855: PUSH
86856: EMPTY
86857: LIST
86858: LIST
86859: LIST
86860: LIST
86861: LIST
86862: ST_TO_ADDR
// end ; end ;
86863: GO 86866
86865: POP
// result := list ;
86866: LD_ADDR_VAR 0 4
86870: PUSH
86871: LD_VAR 0 5
86875: ST_TO_ADDR
// end ;
86876: LD_VAR 0 4
86880: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86881: LD_INT 0
86883: PPUSH
86884: PPUSH
86885: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86886: LD_VAR 0 1
86890: NOT
86891: PUSH
86892: LD_VAR 0 2
86896: PUSH
86897: LD_INT 1
86899: PUSH
86900: LD_INT 2
86902: PUSH
86903: LD_INT 3
86905: PUSH
86906: LD_INT 4
86908: PUSH
86909: EMPTY
86910: LIST
86911: LIST
86912: LIST
86913: LIST
86914: IN
86915: NOT
86916: OR
86917: IFFALSE 86921
// exit ;
86919: GO 87013
// tmp := [ ] ;
86921: LD_ADDR_VAR 0 5
86925: PUSH
86926: EMPTY
86927: ST_TO_ADDR
// for i in units do
86928: LD_ADDR_VAR 0 4
86932: PUSH
86933: LD_VAR 0 1
86937: PUSH
86938: FOR_IN
86939: IFFALSE 86982
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
86941: LD_ADDR_VAR 0 5
86945: PUSH
86946: LD_VAR 0 5
86950: PPUSH
86951: LD_VAR 0 5
86955: PUSH
86956: LD_INT 1
86958: PLUS
86959: PPUSH
86960: LD_VAR 0 4
86964: PPUSH
86965: LD_VAR 0 2
86969: PPUSH
86970: CALL_OW 259
86974: PPUSH
86975: CALL_OW 2
86979: ST_TO_ADDR
86980: GO 86938
86982: POP
86983: POP
// if not tmp then
86984: LD_VAR 0 5
86988: NOT
86989: IFFALSE 86993
// exit ;
86991: GO 87013
// result := SortListByListDesc ( units , tmp ) ;
86993: LD_ADDR_VAR 0 3
86997: PUSH
86998: LD_VAR 0 1
87002: PPUSH
87003: LD_VAR 0 5
87007: PPUSH
87008: CALL_OW 77
87012: ST_TO_ADDR
// end ;
87013: LD_VAR 0 3
87017: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
87018: LD_INT 0
87020: PPUSH
87021: PPUSH
87022: PPUSH
// x := GetX ( building ) ;
87023: LD_ADDR_VAR 0 4
87027: PUSH
87028: LD_VAR 0 2
87032: PPUSH
87033: CALL_OW 250
87037: ST_TO_ADDR
// y := GetY ( building ) ;
87038: LD_ADDR_VAR 0 5
87042: PUSH
87043: LD_VAR 0 2
87047: PPUSH
87048: CALL_OW 251
87052: ST_TO_ADDR
// if GetTaskList ( unit ) then
87053: LD_VAR 0 1
87057: PPUSH
87058: CALL_OW 437
87062: IFFALSE 87157
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
87064: LD_STRING e
87066: PUSH
87067: LD_VAR 0 1
87071: PPUSH
87072: CALL_OW 437
87076: PUSH
87077: LD_INT 1
87079: ARRAY
87080: PUSH
87081: LD_INT 1
87083: ARRAY
87084: EQUAL
87085: PUSH
87086: LD_VAR 0 4
87090: PUSH
87091: LD_VAR 0 1
87095: PPUSH
87096: CALL_OW 437
87100: PUSH
87101: LD_INT 1
87103: ARRAY
87104: PUSH
87105: LD_INT 2
87107: ARRAY
87108: EQUAL
87109: AND
87110: PUSH
87111: LD_VAR 0 5
87115: PUSH
87116: LD_VAR 0 1
87120: PPUSH
87121: CALL_OW 437
87125: PUSH
87126: LD_INT 1
87128: ARRAY
87129: PUSH
87130: LD_INT 3
87132: ARRAY
87133: EQUAL
87134: AND
87135: IFFALSE 87147
// result := true else
87137: LD_ADDR_VAR 0 3
87141: PUSH
87142: LD_INT 1
87144: ST_TO_ADDR
87145: GO 87155
// result := false ;
87147: LD_ADDR_VAR 0 3
87151: PUSH
87152: LD_INT 0
87154: ST_TO_ADDR
// end else
87155: GO 87165
// result := false ;
87157: LD_ADDR_VAR 0 3
87161: PUSH
87162: LD_INT 0
87164: ST_TO_ADDR
// end ;
87165: LD_VAR 0 3
87169: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
87170: LD_INT 0
87172: PPUSH
87173: PPUSH
87174: PPUSH
87175: PPUSH
// if not unit or not area then
87176: LD_VAR 0 1
87180: NOT
87181: PUSH
87182: LD_VAR 0 2
87186: NOT
87187: OR
87188: IFFALSE 87192
// exit ;
87190: GO 87356
// tmp := AreaToList ( area , i ) ;
87192: LD_ADDR_VAR 0 6
87196: PUSH
87197: LD_VAR 0 2
87201: PPUSH
87202: LD_VAR 0 5
87206: PPUSH
87207: CALL_OW 517
87211: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
87212: LD_ADDR_VAR 0 5
87216: PUSH
87217: DOUBLE
87218: LD_INT 1
87220: DEC
87221: ST_TO_ADDR
87222: LD_VAR 0 6
87226: PUSH
87227: LD_INT 1
87229: ARRAY
87230: PUSH
87231: FOR_TO
87232: IFFALSE 87354
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
87234: LD_ADDR_VAR 0 7
87238: PUSH
87239: LD_VAR 0 6
87243: PUSH
87244: LD_INT 1
87246: ARRAY
87247: PUSH
87248: LD_VAR 0 5
87252: ARRAY
87253: PUSH
87254: LD_VAR 0 6
87258: PUSH
87259: LD_INT 2
87261: ARRAY
87262: PUSH
87263: LD_VAR 0 5
87267: ARRAY
87268: PUSH
87269: EMPTY
87270: LIST
87271: LIST
87272: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
87273: LD_VAR 0 7
87277: PUSH
87278: LD_INT 1
87280: ARRAY
87281: PPUSH
87282: LD_VAR 0 7
87286: PUSH
87287: LD_INT 2
87289: ARRAY
87290: PPUSH
87291: CALL_OW 428
87295: PUSH
87296: LD_INT 0
87298: EQUAL
87299: IFFALSE 87352
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
87301: LD_VAR 0 1
87305: PPUSH
87306: LD_VAR 0 7
87310: PUSH
87311: LD_INT 1
87313: ARRAY
87314: PPUSH
87315: LD_VAR 0 7
87319: PUSH
87320: LD_INT 2
87322: ARRAY
87323: PPUSH
87324: LD_VAR 0 3
87328: PPUSH
87329: CALL_OW 48
// result := IsPlaced ( unit ) ;
87333: LD_ADDR_VAR 0 4
87337: PUSH
87338: LD_VAR 0 1
87342: PPUSH
87343: CALL_OW 305
87347: ST_TO_ADDR
// exit ;
87348: POP
87349: POP
87350: GO 87356
// end ; end ;
87352: GO 87231
87354: POP
87355: POP
// end ;
87356: LD_VAR 0 4
87360: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
87361: LD_INT 0
87363: PPUSH
87364: PPUSH
87365: PPUSH
// if not side or side > 8 then
87366: LD_VAR 0 1
87370: NOT
87371: PUSH
87372: LD_VAR 0 1
87376: PUSH
87377: LD_INT 8
87379: GREATER
87380: OR
87381: IFFALSE 87385
// exit ;
87383: GO 87572
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
87385: LD_ADDR_VAR 0 4
87389: PUSH
87390: LD_INT 22
87392: PUSH
87393: LD_VAR 0 1
87397: PUSH
87398: EMPTY
87399: LIST
87400: LIST
87401: PUSH
87402: LD_INT 21
87404: PUSH
87405: LD_INT 3
87407: PUSH
87408: EMPTY
87409: LIST
87410: LIST
87411: PUSH
87412: EMPTY
87413: LIST
87414: LIST
87415: PPUSH
87416: CALL_OW 69
87420: ST_TO_ADDR
// if not tmp then
87421: LD_VAR 0 4
87425: NOT
87426: IFFALSE 87430
// exit ;
87428: GO 87572
// enable_addtolog := true ;
87430: LD_ADDR_OWVAR 81
87434: PUSH
87435: LD_INT 1
87437: ST_TO_ADDR
// AddToLog ( [ ) ;
87438: LD_STRING [
87440: PPUSH
87441: CALL_OW 561
// for i in tmp do
87445: LD_ADDR_VAR 0 3
87449: PUSH
87450: LD_VAR 0 4
87454: PUSH
87455: FOR_IN
87456: IFFALSE 87563
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
87458: LD_STRING [
87460: PUSH
87461: LD_VAR 0 3
87465: PPUSH
87466: CALL_OW 266
87470: STR
87471: PUSH
87472: LD_STRING , 
87474: STR
87475: PUSH
87476: LD_VAR 0 3
87480: PPUSH
87481: CALL_OW 250
87485: STR
87486: PUSH
87487: LD_STRING , 
87489: STR
87490: PUSH
87491: LD_VAR 0 3
87495: PPUSH
87496: CALL_OW 251
87500: STR
87501: PUSH
87502: LD_STRING , 
87504: STR
87505: PUSH
87506: LD_VAR 0 3
87510: PPUSH
87511: CALL_OW 254
87515: STR
87516: PUSH
87517: LD_STRING , 
87519: STR
87520: PUSH
87521: LD_VAR 0 3
87525: PPUSH
87526: LD_INT 1
87528: PPUSH
87529: CALL_OW 268
87533: STR
87534: PUSH
87535: LD_STRING , 
87537: STR
87538: PUSH
87539: LD_VAR 0 3
87543: PPUSH
87544: LD_INT 2
87546: PPUSH
87547: CALL_OW 268
87551: STR
87552: PUSH
87553: LD_STRING ],
87555: STR
87556: PPUSH
87557: CALL_OW 561
// end ;
87561: GO 87455
87563: POP
87564: POP
// AddToLog ( ]; ) ;
87565: LD_STRING ];
87567: PPUSH
87568: CALL_OW 561
// end ;
87572: LD_VAR 0 2
87576: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
87577: LD_INT 0
87579: PPUSH
87580: PPUSH
87581: PPUSH
87582: PPUSH
87583: PPUSH
// if not area or not rate or not max then
87584: LD_VAR 0 1
87588: NOT
87589: PUSH
87590: LD_VAR 0 2
87594: NOT
87595: OR
87596: PUSH
87597: LD_VAR 0 4
87601: NOT
87602: OR
87603: IFFALSE 87607
// exit ;
87605: GO 87799
// while 1 do
87607: LD_INT 1
87609: IFFALSE 87799
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
87611: LD_ADDR_VAR 0 9
87615: PUSH
87616: LD_VAR 0 1
87620: PPUSH
87621: LD_INT 1
87623: PPUSH
87624: CALL_OW 287
87628: PUSH
87629: LD_INT 10
87631: MUL
87632: ST_TO_ADDR
// r := rate / 10 ;
87633: LD_ADDR_VAR 0 7
87637: PUSH
87638: LD_VAR 0 2
87642: PUSH
87643: LD_INT 10
87645: DIVREAL
87646: ST_TO_ADDR
// time := 1 1$00 ;
87647: LD_ADDR_VAR 0 8
87651: PUSH
87652: LD_INT 2100
87654: ST_TO_ADDR
// if amount < min then
87655: LD_VAR 0 9
87659: PUSH
87660: LD_VAR 0 3
87664: LESS
87665: IFFALSE 87683
// r := r * 2 else
87667: LD_ADDR_VAR 0 7
87671: PUSH
87672: LD_VAR 0 7
87676: PUSH
87677: LD_INT 2
87679: MUL
87680: ST_TO_ADDR
87681: GO 87709
// if amount > max then
87683: LD_VAR 0 9
87687: PUSH
87688: LD_VAR 0 4
87692: GREATER
87693: IFFALSE 87709
// r := r / 2 ;
87695: LD_ADDR_VAR 0 7
87699: PUSH
87700: LD_VAR 0 7
87704: PUSH
87705: LD_INT 2
87707: DIVREAL
87708: ST_TO_ADDR
// time := time / r ;
87709: LD_ADDR_VAR 0 8
87713: PUSH
87714: LD_VAR 0 8
87718: PUSH
87719: LD_VAR 0 7
87723: DIVREAL
87724: ST_TO_ADDR
// if time < 0 then
87725: LD_VAR 0 8
87729: PUSH
87730: LD_INT 0
87732: LESS
87733: IFFALSE 87750
// time := time * - 1 ;
87735: LD_ADDR_VAR 0 8
87739: PUSH
87740: LD_VAR 0 8
87744: PUSH
87745: LD_INT 1
87747: NEG
87748: MUL
87749: ST_TO_ADDR
// wait ( time ) ;
87750: LD_VAR 0 8
87754: PPUSH
87755: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
87759: LD_INT 35
87761: PPUSH
87762: LD_INT 875
87764: PPUSH
87765: CALL_OW 12
87769: PPUSH
87770: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87774: LD_INT 1
87776: PPUSH
87777: LD_INT 5
87779: PPUSH
87780: CALL_OW 12
87784: PPUSH
87785: LD_VAR 0 1
87789: PPUSH
87790: LD_INT 1
87792: PPUSH
87793: CALL_OW 55
// end ;
87797: GO 87607
// end ;
87799: LD_VAR 0 5
87803: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87804: LD_INT 0
87806: PPUSH
87807: PPUSH
87808: PPUSH
87809: PPUSH
87810: PPUSH
87811: PPUSH
87812: PPUSH
87813: PPUSH
// if not turrets or not factories then
87814: LD_VAR 0 1
87818: NOT
87819: PUSH
87820: LD_VAR 0 2
87824: NOT
87825: OR
87826: IFFALSE 87830
// exit ;
87828: GO 88137
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87830: LD_ADDR_VAR 0 10
87834: PUSH
87835: LD_INT 5
87837: PUSH
87838: LD_INT 6
87840: PUSH
87841: EMPTY
87842: LIST
87843: LIST
87844: PUSH
87845: LD_INT 2
87847: PUSH
87848: LD_INT 4
87850: PUSH
87851: EMPTY
87852: LIST
87853: LIST
87854: PUSH
87855: LD_INT 3
87857: PUSH
87858: LD_INT 5
87860: PUSH
87861: EMPTY
87862: LIST
87863: LIST
87864: PUSH
87865: EMPTY
87866: LIST
87867: LIST
87868: LIST
87869: PUSH
87870: LD_INT 24
87872: PUSH
87873: LD_INT 25
87875: PUSH
87876: EMPTY
87877: LIST
87878: LIST
87879: PUSH
87880: LD_INT 23
87882: PUSH
87883: LD_INT 27
87885: PUSH
87886: EMPTY
87887: LIST
87888: LIST
87889: PUSH
87890: EMPTY
87891: LIST
87892: LIST
87893: PUSH
87894: LD_INT 42
87896: PUSH
87897: LD_INT 43
87899: PUSH
87900: EMPTY
87901: LIST
87902: LIST
87903: PUSH
87904: LD_INT 44
87906: PUSH
87907: LD_INT 46
87909: PUSH
87910: EMPTY
87911: LIST
87912: LIST
87913: PUSH
87914: LD_INT 45
87916: PUSH
87917: LD_INT 47
87919: PUSH
87920: EMPTY
87921: LIST
87922: LIST
87923: PUSH
87924: EMPTY
87925: LIST
87926: LIST
87927: LIST
87928: PUSH
87929: EMPTY
87930: LIST
87931: LIST
87932: LIST
87933: ST_TO_ADDR
// result := [ ] ;
87934: LD_ADDR_VAR 0 3
87938: PUSH
87939: EMPTY
87940: ST_TO_ADDR
// for i in turrets do
87941: LD_ADDR_VAR 0 4
87945: PUSH
87946: LD_VAR 0 1
87950: PUSH
87951: FOR_IN
87952: IFFALSE 88135
// begin nat := GetNation ( i ) ;
87954: LD_ADDR_VAR 0 7
87958: PUSH
87959: LD_VAR 0 4
87963: PPUSH
87964: CALL_OW 248
87968: ST_TO_ADDR
// weapon := 0 ;
87969: LD_ADDR_VAR 0 8
87973: PUSH
87974: LD_INT 0
87976: ST_TO_ADDR
// if not nat then
87977: LD_VAR 0 7
87981: NOT
87982: IFFALSE 87986
// continue ;
87984: GO 87951
// for j in list [ nat ] do
87986: LD_ADDR_VAR 0 5
87990: PUSH
87991: LD_VAR 0 10
87995: PUSH
87996: LD_VAR 0 7
88000: ARRAY
88001: PUSH
88002: FOR_IN
88003: IFFALSE 88044
// if GetBWeapon ( i ) = j [ 1 ] then
88005: LD_VAR 0 4
88009: PPUSH
88010: CALL_OW 269
88014: PUSH
88015: LD_VAR 0 5
88019: PUSH
88020: LD_INT 1
88022: ARRAY
88023: EQUAL
88024: IFFALSE 88042
// begin weapon := j [ 2 ] ;
88026: LD_ADDR_VAR 0 8
88030: PUSH
88031: LD_VAR 0 5
88035: PUSH
88036: LD_INT 2
88038: ARRAY
88039: ST_TO_ADDR
// break ;
88040: GO 88044
// end ;
88042: GO 88002
88044: POP
88045: POP
// if not weapon then
88046: LD_VAR 0 8
88050: NOT
88051: IFFALSE 88055
// continue ;
88053: GO 87951
// for k in factories do
88055: LD_ADDR_VAR 0 6
88059: PUSH
88060: LD_VAR 0 2
88064: PUSH
88065: FOR_IN
88066: IFFALSE 88131
// begin weapons := AvailableWeaponList ( k ) ;
88068: LD_ADDR_VAR 0 9
88072: PUSH
88073: LD_VAR 0 6
88077: PPUSH
88078: CALL_OW 478
88082: ST_TO_ADDR
// if not weapons then
88083: LD_VAR 0 9
88087: NOT
88088: IFFALSE 88092
// continue ;
88090: GO 88065
// if weapon in weapons then
88092: LD_VAR 0 8
88096: PUSH
88097: LD_VAR 0 9
88101: IN
88102: IFFALSE 88129
// begin result := [ i , weapon ] ;
88104: LD_ADDR_VAR 0 3
88108: PUSH
88109: LD_VAR 0 4
88113: PUSH
88114: LD_VAR 0 8
88118: PUSH
88119: EMPTY
88120: LIST
88121: LIST
88122: ST_TO_ADDR
// exit ;
88123: POP
88124: POP
88125: POP
88126: POP
88127: GO 88137
// end ; end ;
88129: GO 88065
88131: POP
88132: POP
// end ;
88133: GO 87951
88135: POP
88136: POP
// end ;
88137: LD_VAR 0 3
88141: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
88142: LD_INT 0
88144: PPUSH
// if not side or side > 8 then
88145: LD_VAR 0 3
88149: NOT
88150: PUSH
88151: LD_VAR 0 3
88155: PUSH
88156: LD_INT 8
88158: GREATER
88159: OR
88160: IFFALSE 88164
// exit ;
88162: GO 88223
// if not range then
88164: LD_VAR 0 4
88168: NOT
88169: IFFALSE 88180
// range := - 12 ;
88171: LD_ADDR_VAR 0 4
88175: PUSH
88176: LD_INT 12
88178: NEG
88179: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
88180: LD_VAR 0 1
88184: PPUSH
88185: LD_VAR 0 2
88189: PPUSH
88190: LD_VAR 0 3
88194: PPUSH
88195: LD_VAR 0 4
88199: PPUSH
88200: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
88204: LD_VAR 0 1
88208: PPUSH
88209: LD_VAR 0 2
88213: PPUSH
88214: LD_VAR 0 3
88218: PPUSH
88219: CALL_OW 331
// end ;
88223: LD_VAR 0 5
88227: RET
// export function Video ( mode ) ; begin
88228: LD_INT 0
88230: PPUSH
// ingame_video = mode ;
88231: LD_ADDR_OWVAR 52
88235: PUSH
88236: LD_VAR 0 1
88240: ST_TO_ADDR
// interface_hidden = mode ;
88241: LD_ADDR_OWVAR 54
88245: PUSH
88246: LD_VAR 0 1
88250: ST_TO_ADDR
// end ;
88251: LD_VAR 0 2
88255: RET
// export function Join ( array , element ) ; begin
88256: LD_INT 0
88258: PPUSH
// result := array ^ element ;
88259: LD_ADDR_VAR 0 3
88263: PUSH
88264: LD_VAR 0 1
88268: PUSH
88269: LD_VAR 0 2
88273: ADD
88274: ST_TO_ADDR
// end ;
88275: LD_VAR 0 3
88279: RET
// export function JoinUnion ( array , element ) ; begin
88280: LD_INT 0
88282: PPUSH
// result := array union element ;
88283: LD_ADDR_VAR 0 3
88287: PUSH
88288: LD_VAR 0 1
88292: PUSH
88293: LD_VAR 0 2
88297: UNION
88298: ST_TO_ADDR
// end ;
88299: LD_VAR 0 3
88303: RET
// export function GetBehemoths ( side ) ; begin
88304: LD_INT 0
88306: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
88307: LD_ADDR_VAR 0 2
88311: PUSH
88312: LD_INT 22
88314: PUSH
88315: LD_VAR 0 1
88319: PUSH
88320: EMPTY
88321: LIST
88322: LIST
88323: PUSH
88324: LD_INT 31
88326: PUSH
88327: LD_INT 25
88329: PUSH
88330: EMPTY
88331: LIST
88332: LIST
88333: PUSH
88334: EMPTY
88335: LIST
88336: LIST
88337: PPUSH
88338: CALL_OW 69
88342: ST_TO_ADDR
// end ;
88343: LD_VAR 0 2
88347: RET
// export function Shuffle ( array ) ; var i , index ; begin
88348: LD_INT 0
88350: PPUSH
88351: PPUSH
88352: PPUSH
// result := [ ] ;
88353: LD_ADDR_VAR 0 2
88357: PUSH
88358: EMPTY
88359: ST_TO_ADDR
// if not array then
88360: LD_VAR 0 1
88364: NOT
88365: IFFALSE 88369
// exit ;
88367: GO 88468
// Randomize ;
88369: CALL_OW 10
// for i = array downto 1 do
88373: LD_ADDR_VAR 0 3
88377: PUSH
88378: DOUBLE
88379: LD_VAR 0 1
88383: INC
88384: ST_TO_ADDR
88385: LD_INT 1
88387: PUSH
88388: FOR_DOWNTO
88389: IFFALSE 88466
// begin index := rand ( 1 , array ) ;
88391: LD_ADDR_VAR 0 4
88395: PUSH
88396: LD_INT 1
88398: PPUSH
88399: LD_VAR 0 1
88403: PPUSH
88404: CALL_OW 12
88408: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
88409: LD_ADDR_VAR 0 2
88413: PUSH
88414: LD_VAR 0 2
88418: PPUSH
88419: LD_VAR 0 2
88423: PUSH
88424: LD_INT 1
88426: PLUS
88427: PPUSH
88428: LD_VAR 0 1
88432: PUSH
88433: LD_VAR 0 4
88437: ARRAY
88438: PPUSH
88439: CALL_OW 2
88443: ST_TO_ADDR
// array := Delete ( array , index ) ;
88444: LD_ADDR_VAR 0 1
88448: PUSH
88449: LD_VAR 0 1
88453: PPUSH
88454: LD_VAR 0 4
88458: PPUSH
88459: CALL_OW 3
88463: ST_TO_ADDR
// end ;
88464: GO 88388
88466: POP
88467: POP
// end ; end_of_file
88468: LD_VAR 0 2
88472: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
88473: GO 88475
88475: DISABLE
// begin ru_radar := 98 ;
88476: LD_ADDR_EXP 92
88480: PUSH
88481: LD_INT 98
88483: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
88484: LD_ADDR_EXP 93
88488: PUSH
88489: LD_INT 89
88491: ST_TO_ADDR
// us_hack := 99 ;
88492: LD_ADDR_EXP 94
88496: PUSH
88497: LD_INT 99
88499: ST_TO_ADDR
// us_artillery := 97 ;
88500: LD_ADDR_EXP 95
88504: PUSH
88505: LD_INT 97
88507: ST_TO_ADDR
// ar_bio_bomb := 91 ;
88508: LD_ADDR_EXP 96
88512: PUSH
88513: LD_INT 91
88515: ST_TO_ADDR
// end ;
88516: END
