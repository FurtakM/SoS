// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 16800 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 81373 0 9
// PrepareAmerican ;
  77: CALL 525 0 0
// PrepareArabian ;
  81: CALL 2197 0 0
// MC_Start ( ) ;
  85: CALL 18912 0 0
// Action ;
  89: CALL 7672 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 231000
 219: PUSH
 220: LD_INT 210000
 222: PUSH
 223: LD_INT 199500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// end ;
 287: LD_VAR 0 1
 291: RET
// export function CustomInitMacro ; var i ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 296: LD_ADDR_EXP 73
 300: PUSH
 301: LD_INT 20
 303: PUSH
 304: LD_INT 21
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 315: LD_ADDR_EXP 74
 319: PUSH
 320: LD_INT 28
 322: PUSH
 323: LD_INT 24
 325: PUSH
 326: LD_INT 26
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 334: LD_INT 1
 336: PPUSH
 337: LD_INT 6
 339: PUSH
 340: LD_INT 8
 342: PUSH
 343: LD_INT 9
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: PUSH
 351: LD_OWVAR 67
 355: ARRAY
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: CALL 40017 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 364: LD_INT 2
 366: PPUSH
 367: LD_INT 6
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: LD_INT 9
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: PUSH
 381: LD_OWVAR 67
 385: ARRAY
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: CALL 40017 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 6
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: LD_INT 9
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL 40017 0 3
// for i = 1 to mc_bases do
 424: LD_ADDR_VAR 0 2
 428: PUSH
 429: DOUBLE
 430: LD_INT 1
 432: DEC
 433: ST_TO_ADDR
 434: LD_EXP 49
 438: PUSH
 439: FOR_TO
 440: IFFALSE 464
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 442: LD_VAR 0 2
 446: PPUSH
 447: LD_EXP 42
 451: PUSH
 452: LD_VAR 0 2
 456: ARRAY
 457: PPUSH
 458: CALL 40443 0 2
 462: GO 439
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 1
 470: RET
// function Debuger ; var i ; begin
 471: LD_INT 0
 473: PPUSH
 474: PPUSH
// if not debug then
 475: LD_EXP 1
 479: NOT
 480: IFFALSE 484
// exit ;
 482: GO 520
// game_speed := 5 ;
 484: LD_ADDR_OWVAR 65
 488: PUSH
 489: LD_INT 5
 491: ST_TO_ADDR
// uc_side := 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// uc_nation := 1 ;
 500: LD_ADDR_OWVAR 21
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 508: LD_EXP 35
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: CALL_OW 235
// end ; end_of_file
 520: LD_VAR 0 1
 524: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 525: LD_INT 0
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side := 4 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 4
 542: ST_TO_ADDR
// uc_nation := 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 551: LD_ADDR_EXP 29
 555: PUSH
 556: LD_STRING Powell
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: LD_STRING 
 564: PPUSH
 565: CALL 46593 0 3
 569: ST_TO_ADDR
// uc_side := 1 ;
 570: LD_ADDR_OWVAR 20
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 578: LD_ADDR_EXP 20
 582: PUSH
 583: LD_STRING JMM
 585: PPUSH
 586: LD_EXP 1
 590: NOT
 591: PPUSH
 592: LD_EXP 4
 596: PPUSH
 597: CALL 46593 0 3
 601: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 602: LD_EXP 20
 606: PPUSH
 607: CALL_OW 257
 611: PUSH
 612: LD_INT 4
 614: GREATER
 615: IFFALSE 629
// SetClass ( JMM , 1 ) ;
 617: LD_EXP 20
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 629: LD_ADDR_EXP 21
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 4
 647: PPUSH
 648: CALL 46593 0 3
 652: ST_TO_ADDR
// if not Lisa then
 653: LD_EXP 21
 657: NOT
 658: IFFALSE 673
// Lisa := CreateCharacter ( 10_Lisa ) ;
 660: LD_ADDR_EXP 21
 664: PUSH
 665: LD_STRING 10_Lisa
 667: PPUSH
 668: CALL_OW 34
 672: ST_TO_ADDR
// if not Lisa then
 673: LD_EXP 21
 677: NOT
 678: IFFALSE 693
// Lisa := CreateCharacter ( 09_Lisa ) ;
 680: LD_ADDR_EXP 21
 684: PUSH
 685: LD_STRING 09_Lisa
 687: PPUSH
 688: CALL_OW 34
 692: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 693: LD_ADDR_EXP 30
 697: PUSH
 698: LD_STRING Cornel
 700: PPUSH
 701: LD_EXP 1
 705: NOT
 706: PPUSH
 707: LD_EXP 4
 711: PPUSH
 712: CALL 46593 0 3
 716: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING Donaldson
 724: PPUSH
 725: LD_EXP 1
 729: NOT
 730: PPUSH
 731: LD_EXP 4
 735: PPUSH
 736: CALL 46593 0 3
 740: ST_TO_ADDR
// if not Donaldson then
 741: LD_EXP 22
 745: NOT
 746: IFFALSE 761
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 748: LD_ADDR_EXP 22
 752: PUSH
 753: LD_STRING 10_Donaldson
 755: PPUSH
 756: CALL_OW 34
 760: ST_TO_ADDR
// if not Donaldson then
 761: LD_EXP 22
 765: NOT
 766: IFFALSE 781
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 768: LD_ADDR_EXP 22
 772: PUSH
 773: LD_STRING 09_Donaldson
 775: PPUSH
 776: CALL_OW 34
 780: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 781: LD_ADDR_EXP 23
 785: PUSH
 786: LD_STRING Bobby
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 4
 799: PPUSH
 800: CALL 46593 0 3
 804: ST_TO_ADDR
// if not Bobby then
 805: LD_EXP 23
 809: NOT
 810: IFFALSE 825
// Bobby := CreateCharacter ( 10_Bobby ) ;
 812: LD_ADDR_EXP 23
 816: PUSH
 817: LD_STRING 10_Bobby
 819: PPUSH
 820: CALL_OW 34
 824: ST_TO_ADDR
// if not Bobby then
 825: LD_EXP 23
 829: NOT
 830: IFFALSE 845
// Bobby := CreateCharacter ( 09_Bobby ) ;
 832: LD_ADDR_EXP 23
 836: PUSH
 837: LD_STRING 09_Bobby
 839: PPUSH
 840: CALL_OW 34
 844: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 845: LD_ADDR_EXP 24
 849: PUSH
 850: LD_STRING Cyrus
 852: PPUSH
 853: LD_EXP 1
 857: NOT
 858: PPUSH
 859: LD_EXP 4
 863: PPUSH
 864: CALL 46593 0 3
 868: ST_TO_ADDR
// if not Cyrus then
 869: LD_EXP 24
 873: NOT
 874: IFFALSE 889
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 876: LD_ADDR_EXP 24
 880: PUSH
 881: LD_STRING 10_Cyrus
 883: PPUSH
 884: CALL_OW 34
 888: ST_TO_ADDR
// if not Cyrus then
 889: LD_EXP 24
 893: NOT
 894: IFFALSE 909
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING 09_Cyrus
 903: PPUSH
 904: CALL_OW 34
 908: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 909: LD_ADDR_EXP 25
 913: PUSH
 914: LD_STRING Denis
 916: PPUSH
 917: LD_EXP 1
 921: NOT
 922: PPUSH
 923: LD_EXP 4
 927: PPUSH
 928: CALL 46593 0 3
 932: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 26
 937: PUSH
 938: LD_STRING Brown
 940: PPUSH
 941: LD_EXP 1
 945: NOT
 946: PPUSH
 947: LD_EXP 4
 951: PPUSH
 952: CALL 46593 0 3
 956: ST_TO_ADDR
// if not Brown then
 957: LD_EXP 26
 961: NOT
 962: IFFALSE 977
// Brown := CreateCharacter ( 10_Brown ) ;
 964: LD_ADDR_EXP 26
 968: PUSH
 969: LD_STRING 10_Brown
 971: PPUSH
 972: CALL_OW 34
 976: ST_TO_ADDR
// if not Brown then
 977: LD_EXP 26
 981: NOT
 982: IFFALSE 997
// Brown := CreateCharacter ( 08_Brown ) ;
 984: LD_ADDR_EXP 26
 988: PUSH
 989: LD_STRING 08_Brown
 991: PPUSH
 992: CALL_OW 34
 996: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_STRING Gladstone
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 4
1015: PPUSH
1016: CALL 46593 0 3
1020: ST_TO_ADDR
// if not Gladstone then
1021: LD_EXP 27
1025: NOT
1026: IFFALSE 1041
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1028: LD_ADDR_EXP 27
1032: PUSH
1033: LD_STRING 10_Gladstone
1035: PPUSH
1036: CALL_OW 34
1040: ST_TO_ADDR
// if not Gladstone then
1041: LD_EXP 27
1045: NOT
1046: IFFALSE 1061
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1048: LD_ADDR_EXP 27
1052: PUSH
1053: LD_STRING 08_Gladstone
1055: PPUSH
1056: CALL_OW 34
1060: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1061: LD_ADDR_EXP 28
1065: PUSH
1066: LD_STRING Houten
1068: PPUSH
1069: LD_EXP 1
1073: NOT
1074: PPUSH
1075: LD_EXP 4
1079: PPUSH
1080: CALL 46593 0 3
1084: ST_TO_ADDR
// if not Houten then
1085: LD_EXP 28
1089: NOT
1090: IFFALSE 1105
// Houten := CreateCharacter ( 10_Houten ) ;
1092: LD_ADDR_EXP 28
1096: PUSH
1097: LD_STRING 10_Houten
1099: PPUSH
1100: CALL_OW 34
1104: ST_TO_ADDR
// if not Houten then
1105: LD_EXP 28
1109: NOT
1110: IFFALSE 1125
// Houten := CreateCharacter ( 09_Houten ) ;
1112: LD_ADDR_EXP 28
1116: PUSH
1117: LD_STRING 09_Houten
1119: PPUSH
1120: CALL_OW 34
1124: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1125: LD_ADDR_EXP 30
1129: PUSH
1130: LD_STRING Cornell
1132: PPUSH
1133: LD_EXP 1
1137: NOT
1138: PPUSH
1139: LD_EXP 4
1143: PPUSH
1144: CALL 46593 0 3
1148: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: LD_STRING Gary
1156: PPUSH
1157: LD_EXP 1
1161: NOT
1162: PPUSH
1163: LD_EXP 4
1167: PPUSH
1168: CALL 46593 0 3
1172: ST_TO_ADDR
// if not Gary then
1173: LD_EXP 31
1177: NOT
1178: IFFALSE 1193
// Gary := CreateCharacter ( 10_Gary ) ;
1180: LD_ADDR_EXP 31
1184: PUSH
1185: LD_STRING 10_Gary
1187: PPUSH
1188: CALL_OW 34
1192: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1193: LD_ADDR_EXP 32
1197: PUSH
1198: LD_STRING Frank
1200: PPUSH
1201: LD_EXP 1
1205: NOT
1206: PPUSH
1207: LD_EXP 4
1211: PPUSH
1212: CALL 46593 0 3
1216: ST_TO_ADDR
// if not Frank then
1217: LD_EXP 32
1221: NOT
1222: IFFALSE 1237
// Frank := CreateCharacter ( 08_Frank ) ;
1224: LD_ADDR_EXP 32
1228: PUSH
1229: LD_STRING 08_Frank
1231: PPUSH
1232: CALL_OW 34
1236: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1237: LD_ADDR_EXP 33
1241: PUSH
1242: LD_STRING Kikuchi
1244: PPUSH
1245: LD_EXP 1
1249: NOT
1250: PPUSH
1251: LD_EXP 4
1255: PPUSH
1256: CALL 46593 0 3
1260: ST_TO_ADDR
// if not Kikuchi then
1261: LD_EXP 33
1265: NOT
1266: IFFALSE 1281
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1268: LD_ADDR_EXP 33
1272: PUSH
1273: LD_STRING 08_Kikuchi
1275: PPUSH
1276: CALL_OW 34
1280: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1281: LD_ADDR_VAR 0 5
1285: PUSH
1286: LD_EXP 21
1290: PUSH
1291: LD_EXP 22
1295: PUSH
1296: LD_EXP 23
1300: PUSH
1301: LD_EXP 24
1305: PUSH
1306: LD_EXP 25
1310: PUSH
1311: LD_EXP 26
1315: PUSH
1316: LD_EXP 27
1320: PUSH
1321: LD_EXP 28
1325: PUSH
1326: LD_EXP 30
1330: PUSH
1331: LD_EXP 31
1335: PUSH
1336: LD_EXP 32
1340: PUSH
1341: LD_EXP 33
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: ST_TO_ADDR
// tmp := tmp diff 0 ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PUSH
1370: LD_INT 0
1372: DIFF
1373: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1374: LD_ADDR_VAR 0 5
1378: PUSH
1379: LD_VAR 0 5
1383: PUSH
1384: LD_STRING 10_lock
1386: PPUSH
1387: CALL_OW 31
1391: UNION
1392: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1393: LD_ADDR_VAR 0 5
1397: PUSH
1398: LD_VAR 0 5
1402: PUSH
1403: LD_STRING 10c_lock
1405: PPUSH
1406: CALL_OW 31
1410: UNION
1411: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1412: LD_STRING 10_lock
1414: PPUSH
1415: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1419: LD_STRING 10c_lock
1421: PPUSH
1422: CALL_OW 40
// for i in tmp do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1475
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 257
1448: PUSH
1449: LD_INT 8
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: IN
1459: IFFALSE 1473
// SetClass ( i , class_soldier ) ;
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: CALL_OW 336
1473: GO 1436
1475: POP
1476: POP
// if tmp < 12 then
1477: LD_VAR 0 5
1481: PUSH
1482: LD_INT 12
1484: LESS
1485: IFFALSE 1579
// begin k := 16 - tmp ;
1487: LD_ADDR_VAR 0 3
1491: PUSH
1492: LD_INT 16
1494: PUSH
1495: LD_VAR 0 5
1499: MINUS
1500: ST_TO_ADDR
// for i = 1 to k do
1501: LD_ADDR_VAR 0 2
1505: PUSH
1506: DOUBLE
1507: LD_INT 1
1509: DEC
1510: ST_TO_ADDR
1511: LD_VAR 0 3
1515: PUSH
1516: FOR_TO
1517: IFFALSE 1577
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1519: LD_INT 0
1521: PPUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 3
1530: PUSH
1531: LD_INT 4
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 4
1545: PPUSH
1546: CALL_OW 12
1550: ARRAY
1551: PPUSH
1552: LD_INT 6
1554: PPUSH
1555: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1559: LD_ADDR_VAR 0 5
1563: PUSH
1564: LD_VAR 0 5
1568: PUSH
1569: CALL_OW 44
1573: ADD
1574: ST_TO_ADDR
// end ;
1575: GO 1516
1577: POP
1578: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1579: LD_ADDR_EXP 19
1583: PUSH
1584: LD_STRING 1
1586: PPUSH
1587: LD_INT 12
1589: PPUSH
1590: LD_INT 12
1592: PPUSH
1593: LD_INT -5
1595: PUSH
1596: LD_EXP 20
1600: PUSH
1601: LD_INT -2
1603: PUSH
1604: LD_INT -3
1606: PUSH
1607: LD_INT -5
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_VAR 0 5
1621: ADD
1622: PUSH
1623: LD_INT -6
1625: PUSH
1626: LD_INT -4
1628: PUSH
1629: LD_EXP 29
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: ADD
1639: PPUSH
1640: LD_INT 1
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PPUSH
1698: CALL_OW 42
1702: ST_TO_ADDR
// others := tmp diff selected ;
1703: LD_ADDR_VAR 0 8
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 19
1717: DIFF
1718: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1719: LD_ADDR_VAR 0 8
1723: PUSH
1724: LD_VAR 0 8
1728: PUSH
1729: LD_EXP 21
1733: PUSH
1734: LD_EXP 22
1738: PUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_EXP 24
1748: PUSH
1749: LD_EXP 25
1753: PUSH
1754: LD_EXP 26
1758: PUSH
1759: LD_EXP 27
1763: PUSH
1764: LD_EXP 28
1768: PUSH
1769: LD_EXP 30
1773: PUSH
1774: LD_EXP 31
1778: PUSH
1779: LD_EXP 32
1783: PUSH
1784: LD_EXP 33
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: DIFF
1803: ST_TO_ADDR
// if others then
1804: LD_VAR 0 8
1808: IFFALSE 1822
// SaveCharacters ( others , 11_others ) ;
1810: LD_VAR 0 8
1814: PPUSH
1815: LD_STRING 11_others
1817: PPUSH
1818: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1822: LD_ADDR_VAR 0 6
1826: PUSH
1827: LD_INT 3
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: LD_INT 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 4
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 5
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 2
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 7
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 2
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// for i in JMM ^ selected do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_EXP 20
1933: PUSH
1934: LD_EXP 19
1938: ADD
1939: PUSH
1940: FOR_IN
1941: IFFALSE 2130
// begin if GetClass ( i ) = 3 then
1943: LD_VAR 0 2
1947: PPUSH
1948: CALL_OW 257
1952: PUSH
1953: LD_INT 3
1955: EQUAL
1956: IFFALSE 2113
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_VAR 0 6
1967: PUSH
1968: LD_INT 1
1970: ARRAY
1971: PUSH
1972: LD_INT 1
1974: ARRAY
1975: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1976: LD_ADDR_OWVAR 39
1980: PUSH
1981: LD_VAR 0 6
1985: PUSH
1986: LD_INT 1
1988: ARRAY
1989: PUSH
1990: LD_INT 2
1992: ARRAY
1993: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1994: LD_ADDR_OWVAR 38
1998: PUSH
1999: LD_VAR 0 6
2003: PUSH
2004: LD_INT 1
2006: ARRAY
2007: PUSH
2008: LD_INT 3
2010: ARRAY
2011: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2012: LD_ADDR_OWVAR 40
2016: PUSH
2017: LD_VAR 0 6
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PUSH
2026: LD_INT 4
2028: ARRAY
2029: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2030: LD_ADDR_VAR 0 6
2034: PUSH
2035: LD_VAR 0 6
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 3
2047: ST_TO_ADDR
// veh := CreateVehicle ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: CALL_OW 45
2057: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2058: LD_VAR 0 7
2062: PPUSH
2063: LD_INT 8
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_VAR 0 7
2082: PPUSH
2083: CALL_OW 52
// if i = JMM then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_EXP 20
2096: EQUAL
2097: IFFALSE 2111
// SetMark ( veh , 1 ) ;
2099: LD_VAR 0 7
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: CALL_OW 242
// end else
2111: GO 2128
// PlaceUnitArea ( i , am_hum_start , false ) ;
2113: LD_VAR 0 2
2117: PPUSH
2118: LD_INT 9
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 49
// end ;
2128: GO 1940
2130: POP
2131: POP
// vc_chassis := us_medium_tracked ;
2132: LD_ADDR_OWVAR 37
2136: PUSH
2137: LD_INT 3
2139: ST_TO_ADDR
// vc_engine := engine_solar ;
2140: LD_ADDR_OWVAR 39
2144: PUSH
2145: LD_INT 2
2147: ST_TO_ADDR
// vc_control := control_computer ;
2148: LD_ADDR_OWVAR 38
2152: PUSH
2153: LD_INT 3
2155: ST_TO_ADDR
// vc_weapon := us_radar ;
2156: LD_ADDR_OWVAR 40
2160: PUSH
2161: LD_INT 11
2163: ST_TO_ADDR
// veh := CreateVehicle ;
2164: LD_ADDR_VAR 0 7
2168: PUSH
2169: CALL_OW 45
2173: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2174: LD_VAR 0 7
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 142
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 48
// end ; end_of_file
2192: LD_VAR 0 1
2196: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2197: LD_INT 0
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 6
2212: PUSH
2213: LD_INT 7
2215: PUSH
2216: LD_INT 7
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_OWVAR 67
2228: ARRAY
2229: ST_TO_ADDR
// uc_side := 2 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 2
2237: ST_TO_ADDR
// uc_nation := 2 ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 2
2245: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 14
2253: ST_TO_ADDR
// vc_engine := engine_siberite ;
2254: LD_ADDR_OWVAR 39
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// vc_control := control_manual ;
2262: LD_ADDR_OWVAR 38
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2270: LD_ADDR_OWVAR 40
2274: PUSH
2275: LD_INT 31
2277: ST_TO_ADDR
// for i = 1 to 3 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 3
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2376
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_INT 3
2299: PPUSH
2300: LD_VAR 0 5
2304: PPUSH
2305: CALL_OW 380
// un := CreateVehicle ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: CALL_OW 45
2318: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2319: LD_VAR 0 4
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 5
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2339: LD_VAR 0 4
2343: PPUSH
2344: LD_INT 156
2346: PPUSH
2347: LD_INT 15
2349: PPUSH
2350: LD_INT 6
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2360: CALL_OW 44
2364: PPUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: CALL_OW 52
// end ;
2374: GO 2291
2376: POP
2377: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2378: LD_ADDR_EXP 36
2382: PUSH
2383: LD_INT 94
2385: PPUSH
2386: LD_INT 28
2388: PPUSH
2389: LD_STRING dammam
2391: PPUSH
2392: LD_VAR 0 5
2396: PPUSH
2397: LD_INT 10000
2399: PUSH
2400: LD_INT 1000
2402: PUSH
2403: LD_INT 300
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PPUSH
2411: LD_INT 1
2413: NEG
2414: PUSH
2415: LD_INT 5
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL 56968 0 6
2435: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2436: LD_ADDR_EXP 36
2440: PUSH
2441: LD_EXP 36
2445: PUSH
2446: LD_INT 122
2448: PPUSH
2449: LD_INT 25
2451: PPUSH
2452: LD_STRING 
2454: PPUSH
2455: LD_VAR 0 5
2459: PPUSH
2460: LD_INT 500
2462: PUSH
2463: LD_INT 60
2465: PUSH
2466: LD_INT 0
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: PPUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: LD_INT 2
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL 56968 0 6
2497: UNION
2498: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2499: LD_ADDR_EXP 34
2503: PUSH
2504: LD_INT 45
2506: PPUSH
2507: LD_INT 24
2509: PPUSH
2510: LD_STRING jeddah
2512: PPUSH
2513: LD_VAR 0 5
2517: PPUSH
2518: LD_INT 700
2520: PUSH
2521: LD_INT 300
2523: PUSH
2524: LD_INT 10
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PPUSH
2532: LD_INT 1
2534: NEG
2535: PUSH
2536: LD_INT 5
2538: PUSH
2539: LD_INT 3
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL 56968 0 6
2555: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2556: LD_ADDR_EXP 35
2560: PUSH
2561: LD_INT 7
2563: PPUSH
2564: LD_INT 27
2566: PPUSH
2567: LD_STRING riyadh
2569: PPUSH
2570: LD_VAR 0 5
2574: PPUSH
2575: LD_INT 500
2577: PUSH
2578: LD_INT 60
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: PPUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL 56968 0 6
2611: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2612: LD_ADDR_EXP 38
2616: PUSH
2617: LD_INT 204
2619: PPUSH
2620: LD_INT 26
2622: PPUSH
2623: LD_STRING 
2625: PPUSH
2626: LD_VAR 0 5
2630: PPUSH
2631: LD_INT 500
2633: PUSH
2634: LD_INT 50
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: LD_INT 1
2647: NEG
2648: PUSH
2649: LD_INT 3
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL 56968 0 6
2668: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2669: LD_ADDR_EXP 49
2673: PUSH
2674: LD_EXP 36
2678: PUSH
2679: LD_EXP 34
2683: PUSH
2684: LD_EXP 38
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 31
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 58
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2861
// begin if GetBase ( i ) then
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 274
2747: IFFALSE 2751
// continue ;
2749: GO 2735
// d := GetDir ( i ) ;
2751: LD_ADDR_VAR 0 3
2755: PUSH
2756: LD_VAR 0 2
2760: PPUSH
2761: CALL_OW 254
2765: ST_TO_ADDR
// if d < 3 then
2766: LD_VAR 0 3
2770: PUSH
2771: LD_INT 3
2773: LESS
2774: IFFALSE 2792
// d := d + 3 else
2776: LD_ADDR_VAR 0 3
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: PLUS
2789: ST_TO_ADDR
2790: GO 2806
// d := d - 3 ;
2792: LD_ADDR_VAR 0 3
2796: PUSH
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 3
2804: MINUS
2805: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2806: LD_INT 0
2808: PPUSH
2809: LD_INT 8
2811: PPUSH
2812: LD_VAR 0 5
2816: PPUSH
2817: CALL_OW 380
// un := CreateHuman ;
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: CALL_OW 44
2830: ST_TO_ADDR
// SetDir ( un , d ) ;
2831: LD_VAR 0 4
2835: PPUSH
2836: LD_VAR 0 3
2840: PPUSH
2841: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2845: LD_VAR 0 4
2849: PPUSH
2850: LD_VAR 0 2
2854: PPUSH
2855: CALL_OW 52
// end ;
2859: GO 2735
2861: POP
2862: POP
// if Difficulty > 1 then
2863: LD_OWVAR 67
2867: PUSH
2868: LD_INT 1
2870: GREATER
2871: IFFALSE 3242
// begin ar_kamikadze := [ ] ;
2873: LD_ADDR_EXP 41
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_VAR 0 5
2890: PPUSH
2891: CALL_OW 380
// un := CreateHuman ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2917: LD_VAR 0 4
2921: PPUSH
2922: LD_INT 23
2924: PPUSH
2925: LD_INT 44
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 48
// ComCrawl ( un ) ;
2935: LD_VAR 0 4
2939: PPUSH
2940: CALL_OW 137
// un := CreateHuman ;
2944: LD_ADDR_VAR 0 4
2948: PUSH
2949: CALL_OW 44
2953: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2954: LD_VAR 0 4
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 30
2973: PPUSH
2974: LD_INT 39
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 48
// ComCrawl ( un ) ;
2984: LD_VAR 0 4
2988: PPUSH
2989: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2993: LD_INT 0
2995: PPUSH
2996: LD_INT 17
2998: PPUSH
2999: LD_VAR 0 5
3003: PPUSH
3004: CALL_OW 380
// un := CreateHuman ;
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: CALL_OW 44
3017: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3018: LD_VAR 0 4
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3030: LD_VAR 0 4
3034: PPUSH
3035: LD_INT 45
3037: PPUSH
3038: LD_INT 86
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 48
// ComHold ( un ) ;
3048: LD_VAR 0 4
3052: PPUSH
3053: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3057: LD_ADDR_EXP 41
3061: PUSH
3062: LD_EXP 41
3066: PPUSH
3067: LD_EXP 41
3071: PUSH
3072: LD_INT 1
3074: PLUS
3075: PPUSH
3076: LD_VAR 0 4
3080: PPUSH
3081: CALL_OW 1
3085: ST_TO_ADDR
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3108: LD_VAR 0 4
3112: PPUSH
3113: LD_INT 60
3115: PPUSH
3116: LD_INT 85
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: CALL_OW 48
// ComHold ( un ) ;
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3135: LD_ADDR_EXP 41
3139: PUSH
3140: LD_EXP 41
3144: PPUSH
3145: LD_EXP 41
3149: PUSH
3150: LD_INT 1
3152: PLUS
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 1
3163: ST_TO_ADDR
// un := CreateHuman ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 222
3193: PPUSH
3194: LD_INT 166
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 48
// ComHold ( un ) ;
3204: LD_VAR 0 4
3208: PPUSH
3209: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3213: LD_ADDR_EXP 41
3217: PUSH
3218: LD_EXP 41
3222: PPUSH
3223: LD_EXP 41
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: CALL_OW 1
3241: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3242: LD_ADDR_EXP 39
3246: PUSH
3247: EMPTY
3248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3264: LD_ADDR_OWVAR 26
3268: PUSH
3269: LD_STRING Pavel Grigorovic
3271: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3272: LD_ADDR_OWVAR 33
3276: PUSH
3277: LD_STRING SecondCharsGal
3279: ST_TO_ADDR
// hc_face_number := 4 ;
3280: LD_ADDR_OWVAR 34
3284: PUSH
3285: LD_INT 4
3287: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3288: LD_ADDR_EXP 39
3292: PUSH
3293: LD_EXP 39
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 44
3305: PPUSH
3306: CALL_OW 1
3310: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3311: LD_INT 2
3313: PPUSH
3314: LD_INT 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: CALL_OW 380
// hc_name := Lucy Sebel ;
3326: LD_ADDR_OWVAR 26
3330: PUSH
3331: LD_STRING Lucy Sebel
3333: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3334: LD_ADDR_OWVAR 33
3338: PUSH
3339: LD_STRING SecondCharsGal
3341: ST_TO_ADDR
// hc_face_number := 15 ;
3342: LD_ADDR_OWVAR 34
3346: PUSH
3347: LD_INT 15
3349: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3350: LD_ADDR_EXP 39
3354: PUSH
3355: LD_EXP 39
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 44
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3373: LD_INT 2
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_VAR 0 5
3383: PPUSH
3384: CALL_OW 380
// hc_gallery :=  ;
3388: LD_ADDR_OWVAR 33
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_name :=  ;
3396: LD_ADDR_OWVAR 26
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3404: LD_ADDR_EXP 39
3408: PUSH
3409: LD_EXP 39
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 44
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// hc_sex := sex_male ;
3427: LD_ADDR_OWVAR 27
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_class = 11 ;
3435: LD_ADDR_OWVAR 28
3439: PUSH
3440: LD_INT 11
3442: ST_TO_ADDR
// hc_gallery = sandar ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING sandar
3450: ST_TO_ADDR
// hc_face_number = 33 ;
3451: LD_ADDR_OWVAR 34
3455: PUSH
3456: LD_INT 33
3458: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3459: LD_ADDR_OWVAR 26
3463: PUSH
3464: LD_STRING Thabit Muhair Saliba
3466: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3467: LD_ADDR_OWVAR 31
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: ST_TO_ADDR
// Saliba = CreateHuman ;
3490: LD_ADDR_EXP 43
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3500: LD_EXP 43
3504: PPUSH
3505: LD_INT 7
3507: PPUSH
3508: CALL_OW 52
// if gensher_active then
3512: LD_EXP 18
3516: IFFALSE 3543
// begin Gensher = NewCharacter ( Dietrich ) ;
3518: LD_ADDR_EXP 44
3522: PUSH
3523: LD_STRING Dietrich
3525: PPUSH
3526: CALL_OW 25
3530: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3531: LD_EXP 44
3535: PPUSH
3536: LD_INT 94
3538: PPUSH
3539: CALL_OW 52
// end ; InitHc ;
3543: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3547: LD_ADDR_EXP 40
3551: PUSH
3552: EMPTY
3553: ST_TO_ADDR
// for i = 1 to 5 do
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: DOUBLE
3560: LD_INT 1
3562: DEC
3563: ST_TO_ADDR
3564: LD_INT 5
3566: PUSH
3567: FOR_TO
3568: IFFALSE 3740
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3570: LD_INT 13
3572: PUSH
3573: LD_INT 14
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 1
3582: PPUSH
3583: LD_INT 2
3585: PPUSH
3586: CALL_OW 12
3590: ARRAY
3591: PPUSH
3592: LD_INT 1
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 1
3604: PPUSH
3605: LD_INT 2
3607: PPUSH
3608: CALL_OW 12
3612: ARRAY
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 25
3619: PUSH
3620: LD_INT 27
3622: PUSH
3623: LD_INT 26
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: LD_INT 60
3645: PPUSH
3646: LD_INT 100
3648: PPUSH
3649: CALL_OW 12
3653: PPUSH
3654: CALL 53559 0 5
// un := CreateVehicle ;
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: CALL_OW 45
3667: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3668: LD_ADDR_EXP 40
3672: PUSH
3673: LD_EXP 40
3677: PPUSH
3678: LD_EXP 40
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3697: LD_VAR 0 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: LD_INT 5
3707: PPUSH
3708: CALL_OW 12
3712: PPUSH
3713: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3717: LD_VAR 0 4
3721: PPUSH
3722: LD_INT 124
3724: PPUSH
3725: LD_INT 141
3727: PPUSH
3728: LD_INT 8
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 50
// end ;
3738: GO 3567
3740: POP
3741: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3742: LD_ADDR_EXP 42
3746: PUSH
3747: EMPTY
3748: PUSH
3749: EMPTY
3750: PUSH
3751: EMPTY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3758: LD_ADDR_VAR 0 3
3762: PUSH
3763: DOUBLE
3764: LD_INT 1
3766: DEC
3767: ST_TO_ADDR
3768: LD_INT 3
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_OWVAR 67
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 4003
// for i = 1 to 3 do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 3
3803: PUSH
3804: FOR_TO
3805: IFFALSE 3999
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3807: LD_INT 14
3809: PPUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 5
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 2
3847: PPUSH
3848: CALL_OW 12
3852: ARRAY
3853: PPUSH
3854: LD_INT 25
3856: PUSH
3857: LD_INT 27
3859: PUSH
3860: LD_INT 26
3862: PUSH
3863: LD_INT 28
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 1
3874: PPUSH
3875: LD_INT 4
3877: PPUSH
3878: CALL_OW 12
3882: ARRAY
3883: PPUSH
3884: LD_INT 100
3886: PPUSH
3887: CALL 53559 0 5
// un := CreateVehicle ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: CALL_OW 45
3900: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3901: LD_ADDR_EXP 42
3905: PUSH
3906: LD_EXP 42
3910: PPUSH
3911: LD_VAR 0 2
3915: PUSH
3916: LD_EXP 42
3920: PUSH
3921: LD_VAR 0 2
3925: ARRAY
3926: PUSH
3927: LD_INT 1
3929: PLUS
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: CALL 53681 0 3
3944: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 5
3955: PPUSH
3956: CALL_OW 12
3960: PPUSH
3961: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_INT 20
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 49
// end ;
3997: GO 3804
3999: POP
4000: POP
4001: GO 3788
4003: POP
4004: POP
// InitHc ;
4005: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4009: LD_INT 4
4011: PPUSH
4012: LD_INT 5
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 58
// end ;
4028: LD_VAR 0 1
4032: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4033: LD_EXP 41
4037: IFFALSE 4111
4039: GO 4041
4041: DISABLE
4042: LD_INT 0
4044: PPUSH
// begin enable ;
4045: ENABLE
// for i in ar_kamikadze do
4046: LD_ADDR_VAR 0 1
4050: PUSH
4051: LD_EXP 41
4055: PUSH
4056: FOR_IN
4057: IFFALSE 4109
// if See ( 1 , i ) then
4059: LD_INT 1
4061: PPUSH
4062: LD_VAR 0 1
4066: PPUSH
4067: CALL_OW 292
4071: IFFALSE 4107
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PPUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 74
4102: PPUSH
4103: CALL_OW 115
4107: GO 4056
4109: POP
4110: POP
// end ;
4111: PPOPN 1
4113: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4114: LD_EXP 13
4118: IFFALSE 4435
4120: GO 4122
4122: DISABLE
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
4127: PPUSH
4128: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4129: LD_INT 35
4131: PPUSH
4132: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4136: LD_INT 1
4138: PPUSH
4139: CALL 40731 0 1
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: IFFALSE 4129
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 14
4154: PUSH
4155: LD_INT 3
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 32
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: EMPTY
4171: LIST
4172: PPUSH
4173: CALL 40335 0 2
// repeat wait ( 0 0$1 ) ;
4177: LD_INT 35
4179: PPUSH
4180: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4184: LD_EXP 68
4188: PUSH
4189: LD_INT 1
4191: ARRAY
4192: PPUSH
4193: LD_INT 33
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 34
4205: PUSH
4206: LD_INT 32
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 72
4221: IFFALSE 4177
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: LD_EXP 68
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PPUSH
4237: LD_INT 33
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 34
4249: PUSH
4250: LD_INT 32
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 72
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL_OW 469
4282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: LD_INT 5
4297: PPUSH
4298: CALL_OW 469
4302: ST_TO_ADDR
// tmp := 100 ;
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 100
4310: ST_TO_ADDR
// if pos then
4311: LD_VAR 0 4
4315: IFFALSE 4355
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 2
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: PPUSH
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: ARRAY
4342: PPUSH
4343: LD_INT 20
4345: PPUSH
4346: CALL 54577 0 4
4350: PUSH
4351: LD_INT 4
4353: ARRAY
4354: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4355: LD_VAR 0 4
4359: PUSH
4360: LD_EXP 14
4364: NOT
4365: AND
4366: PUSH
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 10
4374: LESS
4375: AND
4376: IFFALSE 4283
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4378: LD_VAR 0 2
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 1
4390: ARRAY
4391: PPUSH
4392: LD_VAR 0 4
4396: PUSH
4397: LD_INT 2
4399: ARRAY
4400: PPUSH
4401: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4405: LD_VAR 0 2
4409: PPUSH
4410: LD_INT 198
4412: PPUSH
4413: LD_INT 113
4415: PPUSH
4416: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4420: LD_VAR 0 2
4424: PPUSH
4425: LD_INT 124
4427: PPUSH
4428: LD_INT 7
4430: PPUSH
4431: CALL_OW 171
// end ;
4435: PPOPN 4
4437: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4438: LD_EXP 6
4442: IFFALSE 7099
4444: GO 4446
4446: DISABLE
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 5
4464: PUSH
4465: LD_INT 6
4467: PUSH
4468: LD_INT 7
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_OWVAR 67
4480: ARRAY
4481: ST_TO_ADDR
// coords := [ ] ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: EMPTY
4488: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4489: LD_ADDR_VAR 0 6
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 14
4541: PUSH
4542: LD_INT 1
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 28
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 14
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: LD_INT 25
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 14
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: LD_INT 2
4583: PUSH
4584: LD_INT 28
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 14
4595: PUSH
4596: LD_INT 1
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: LD_INT 29
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL 40335 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4621: LD_INT 21000
4623: PUSH
4624: LD_INT 19950
4626: PUSH
4627: LD_INT 18900
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_OWVAR 67
4639: ARRAY
4640: PPUSH
4641: CALL_OW 67
// InitHc ;
4645: CALL_OW 19
// InitUc ;
4649: CALL_OW 18
// uc_side := 2 ;
4653: LD_ADDR_OWVAR 20
4657: PUSH
4658: LD_INT 2
4660: ST_TO_ADDR
// uc_nation := 2 ;
4661: LD_ADDR_OWVAR 21
4665: PUSH
4666: LD_INT 2
4668: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: EMPTY
4675: PUSH
4676: EMPTY
4677: PUSH
4678: EMPTY
4679: PUSH
4680: EMPTY
4681: PUSH
4682: EMPTY
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: LD_EXP 68
4708: PUSH
4709: LD_INT 1
4711: ARRAY
4712: PUSH
4713: LD_INT 34
4715: PUSH
4716: LD_INT 32
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: DIFF
4728: PPUSH
4729: CALL_OW 1
4733: ST_TO_ADDR
// for i = 1 to Difficulty do
4734: LD_ADDR_VAR 0 1
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_OWVAR 67
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4888
// begin uc_side := 2 ;
4752: LD_ADDR_OWVAR 20
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// uc_nation := 2 ;
4760: LD_ADDR_OWVAR 21
4764: PUSH
4765: LD_INT 2
4767: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4768: LD_INT 13
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 5
4776: PPUSH
4777: LD_INT 29
4779: PPUSH
4780: LD_INT 100
4782: PPUSH
4783: CALL 53559 0 5
// un := CreateVehicle ;
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: CALL_OW 45
4796: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PUSH
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 1
4817: ARRAY
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: CALL 53681 0 3
4836: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_INT 3
4844: PPUSH
4845: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4849: LD_VAR 0 2
4853: PPUSH
4854: LD_INT 16
4856: PPUSH
4857: LD_INT 0
4859: PPUSH
4860: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4864: LD_VAR 0 2
4868: PPUSH
4869: LD_INT 51
4871: PPUSH
4872: LD_INT 10
4874: PPUSH
4875: CALL_OW 111
// wait ( 0 0$2 ) ;
4879: LD_INT 70
4881: PPUSH
4882: CALL_OW 67
// end ;
4886: GO 4749
4888: POP
4889: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4890: LD_ADDR_VAR 0 5
4894: PUSH
4895: LD_INT 51
4897: PUSH
4898: LD_INT 24
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 75
4907: PUSH
4908: LD_INT 90
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4919: LD_INT 1
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_VAR 0 6
4940: PPUSH
4941: CALL 40568 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_OWVAR 67
4973: ARRAY
4974: PUSH
4975: FOR_TO
4976: IFFALSE 5076
// begin uc_side := 2 ;
4978: LD_ADDR_OWVAR 20
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// uc_nation := 2 ;
4986: LD_ADDR_OWVAR 21
4990: PUSH
4991: LD_INT 2
4993: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4994: LD_INT 0
4996: PPUSH
4997: LD_INT 17
4999: PPUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: CALL_OW 380
// un := CreateHuman ;
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_INT 2
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: LD_INT 2
5039: ARRAY
5040: PUSH
5041: LD_INT 1
5043: PLUS
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PPUSH
5049: LD_VAR 0 2
5053: PPUSH
5054: CALL 53681 0 3
5058: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_INT 13
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: CALL_OW 49
// end ;
5074: GO 4975
5076: POP
5077: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5078: LD_ADDR_VAR 0 1
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_INT 2
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_OWVAR 67
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5228
// begin uc_side := 2 ;
5111: LD_ADDR_OWVAR 20
5115: PUSH
5116: LD_INT 2
5118: ST_TO_ADDR
// uc_nation := 2 ;
5119: LD_ADDR_OWVAR 21
5123: PUSH
5124: LD_INT 2
5126: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 1
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 1
5142: PPUSH
5143: LD_INT 2
5145: PPUSH
5146: CALL_OW 12
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 4
5156: PPUSH
5157: CALL_OW 380
// un := CreateHuman ;
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: CALL_OW 44
5170: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 2
5191: ARRAY
5192: PUSH
5193: LD_INT 1
5195: PLUS
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: LD_VAR 0 2
5205: PPUSH
5206: CALL 53681 0 3
5210: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5211: LD_VAR 0 2
5215: PPUSH
5216: LD_INT 13
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 49
// end ;
5226: GO 5108
5228: POP
5229: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_INT 67
5237: PUSH
5238: LD_INT 112
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 85
5247: PUSH
5248: LD_INT 130
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5259: LD_INT 2
5261: PPUSH
5262: LD_VAR 0 3
5266: PUSH
5267: LD_INT 2
5269: ARRAY
5270: PPUSH
5271: LD_VAR 0 5
5275: PPUSH
5276: LD_VAR 0 6
5280: PPUSH
5281: CALL 40568 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5285: LD_ADDR_VAR 0 1
5289: PUSH
5290: DOUBLE
5291: LD_INT 1
5293: DEC
5294: ST_TO_ADDR
5295: LD_INT 1
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: LD_OWVAR 67
5313: ARRAY
5314: PUSH
5315: FOR_TO
5316: IFFALSE 5416
// begin uc_side := 2 ;
5318: LD_ADDR_OWVAR 20
5322: PUSH
5323: LD_INT 2
5325: ST_TO_ADDR
// uc_nation := 2 ;
5326: LD_ADDR_OWVAR 21
5330: PUSH
5331: LD_INT 2
5333: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5334: LD_INT 0
5336: PPUSH
5337: LD_INT 17
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 380
// un := CreateHuman ;
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 3
5371: PUSH
5372: LD_VAR 0 3
5376: PUSH
5377: LD_INT 3
5379: ARRAY
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 53681 0 3
5398: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5399: LD_VAR 0 2
5403: PPUSH
5404: LD_INT 14
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: GO 5315
5416: POP
5417: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5418: LD_ADDR_VAR 0 5
5422: PUSH
5423: LD_INT 148
5425: PUSH
5426: LD_INT 158
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 148
5435: PUSH
5436: LD_INT 158
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5447: LD_INT 3
5449: PPUSH
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 3
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: LD_VAR 0 6
5468: PPUSH
5469: CALL 40568 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5473: LD_ADDR_VAR 0 1
5477: PUSH
5478: DOUBLE
5479: LD_INT 1
5481: DEC
5482: ST_TO_ADDR
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PUSH
5497: LD_OWVAR 67
5501: ARRAY
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5728
// begin uc_side := 2 ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// uc_nation := 2 ;
5514: LD_ADDR_OWVAR 21
5518: PUSH
5519: LD_INT 2
5521: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5522: LD_INT 14
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 5
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 12
5548: ARRAY
5549: PPUSH
5550: LD_INT 27
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 28
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: CALL_OW 12
5574: ARRAY
5575: PPUSH
5576: LD_INT 100
5578: PPUSH
5579: CALL 53559 0 5
// un := CreateVehicle ;
5583: LD_ADDR_VAR 0 2
5587: PUSH
5588: CALL_OW 45
5592: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_INT 4
5605: PUSH
5606: LD_VAR 0 3
5610: PUSH
5611: LD_INT 4
5613: ARRAY
5614: PUSH
5615: LD_INT 1
5617: PLUS
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: CALL 53681 0 3
5632: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_INT 5
5640: PPUSH
5641: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 15
5652: PPUSH
5653: LD_INT 0
5655: PPUSH
5656: CALL_OW 49
// if GetControl ( un ) = control_manual then
5660: LD_VAR 0 2
5664: PPUSH
5665: CALL_OW 263
5669: PUSH
5670: LD_INT 1
5672: EQUAL
5673: IFFALSE 5704
// begin PrepareHuman ( false , 3 , skill ) ;
5675: LD_INT 0
5677: PPUSH
5678: LD_INT 3
5680: PPUSH
5681: LD_VAR 0 4
5685: PPUSH
5686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5690: CALL_OW 44
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_INT 179
5711: PPUSH
5712: LD_INT 135
5714: PPUSH
5715: CALL_OW 111
// wait ( 0 0$2 ) ;
5719: LD_INT 70
5721: PPUSH
5722: CALL_OW 67
// end ;
5726: GO 5503
5728: POP
5729: POP
// vc_chassis := 15 ;
5730: LD_ADDR_OWVAR 37
5734: PUSH
5735: LD_INT 15
5737: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_VAR 0 3
5747: PPUSH
5748: LD_INT 4
5750: PUSH
5751: LD_VAR 0 3
5755: PUSH
5756: LD_INT 4
5758: ARRAY
5759: PUSH
5760: LD_INT 1
5762: PLUS
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PPUSH
5768: CALL_OW 45
5772: PPUSH
5773: CALL 53681 0 3
5777: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 4
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_INT 4
5794: ARRAY
5795: ARRAY
5796: PPUSH
5797: LD_INT 15
5799: PPUSH
5800: LD_INT 0
5802: PPUSH
5803: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5807: LD_INT 0
5809: PPUSH
5810: LD_INT 11
5812: PPUSH
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 4
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 4
5842: ARRAY
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 44
5856: PPUSH
5857: CALL 53681 0 3
5861: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 4
5869: ARRAY
5870: PUSH
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 4
5878: ARRAY
5879: ARRAY
5880: PPUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 4
5888: ARRAY
5889: PUSH
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 4
5897: ARRAY
5898: PUSH
5899: LD_INT 1
5901: MINUS
5902: ARRAY
5903: PPUSH
5904: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5908: LD_ADDR_VAR 0 5
5912: PUSH
5913: LD_INT 148
5915: PUSH
5916: LD_INT 140
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5926: LD_INT 1
5928: PPUSH
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 4
5936: ARRAY
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL 40568 0 4
// if gensher_active then
5952: LD_EXP 18
5956: IFFALSE 6341
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5958: LD_EXP 44
5962: PPUSH
5963: LD_STRING D10-Diet-1
5965: PPUSH
5966: CALL_OW 94
// for i = 1 to 2 do
5970: LD_ADDR_VAR 0 1
5974: PUSH
5975: DOUBLE
5976: LD_INT 1
5978: DEC
5979: ST_TO_ADDR
5980: LD_INT 2
5982: PUSH
5983: FOR_TO
5984: IFFALSE 6122
// begin uc_side := 2 ;
5986: LD_ADDR_OWVAR 20
5990: PUSH
5991: LD_INT 2
5993: ST_TO_ADDR
// uc_nation := 2 ;
5994: LD_ADDR_OWVAR 21
5998: PUSH
5999: LD_INT 2
6001: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6002: LD_INT 13
6004: PPUSH
6005: LD_INT 3
6007: PPUSH
6008: LD_INT 5
6010: PPUSH
6011: LD_INT 29
6013: PPUSH
6014: LD_INT 100
6016: PPUSH
6017: CALL 53559 0 5
// un := CreateVehicle ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: CALL_OW 45
6030: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 5
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 5
6051: ARRAY
6052: PUSH
6053: LD_INT 1
6055: PLUS
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PPUSH
6061: LD_VAR 0 2
6065: PPUSH
6066: CALL 53681 0 3
6070: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 23
6090: PPUSH
6091: LD_INT 0
6093: PPUSH
6094: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 85
6105: PPUSH
6106: LD_INT 152
6108: PPUSH
6109: CALL_OW 111
// wait ( 0 0$2 ) ;
6113: LD_INT 70
6115: PPUSH
6116: CALL_OW 67
// end ;
6120: GO 5983
6122: POP
6123: POP
// for i = 1 to 3 do
6124: LD_ADDR_VAR 0 1
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_INT 3
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6295
// begin uc_side := 2 ;
6140: LD_ADDR_OWVAR 20
6144: PUSH
6145: LD_INT 2
6147: ST_TO_ADDR
// uc_nation := 2 ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_INT 2
6155: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6156: LD_INT 14
6158: PPUSH
6159: LD_INT 3
6161: PPUSH
6162: LD_INT 5
6164: PPUSH
6165: LD_INT 27
6167: PUSH
6168: LD_INT 28
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 1
6177: PPUSH
6178: LD_INT 2
6180: PPUSH
6181: CALL_OW 12
6185: ARRAY
6186: PPUSH
6187: LD_INT 100
6189: PPUSH
6190: CALL 53559 0 5
// un := CreateVehicle ;
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: CALL_OW 45
6203: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6204: LD_ADDR_VAR 0 3
6208: PUSH
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_INT 5
6216: PUSH
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 5
6224: ARRAY
6225: PUSH
6226: LD_INT 1
6228: PLUS
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: CALL 53681 0 3
6243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6256: LD_VAR 0 2
6260: PPUSH
6261: LD_INT 23
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_INT 85
6278: PPUSH
6279: LD_INT 152
6281: PPUSH
6282: CALL_OW 111
// wait ( 0 0$2 ) ;
6286: LD_INT 70
6288: PPUSH
6289: CALL_OW 67
// end ;
6293: GO 6137
6295: POP
6296: POP
// coords := [ [ 97 , 143 ] ] ;
6297: LD_ADDR_VAR 0 5
6301: PUSH
6302: LD_INT 97
6304: PUSH
6305: LD_INT 143
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6315: LD_INT 1
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 5
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 5
6331: PPUSH
6332: LD_VAR 0 6
6336: PPUSH
6337: CALL 40568 0 4
// end ; Wait ( 13 13$00 ) ;
6341: LD_INT 27300
6343: PPUSH
6344: CALL_OW 67
// tmp := [ ] ;
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: EMPTY
6354: ST_TO_ADDR
// w := 1 ;
6355: LD_ADDR_VAR 0 7
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// repeat tmp := [ ] ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: EMPTY
6369: ST_TO_ADDR
// if w mod 4 = 0 then
6370: LD_VAR 0 7
6374: PUSH
6375: LD_INT 4
6377: MOD
6378: PUSH
6379: LD_INT 0
6381: EQUAL
6382: IFFALSE 6469
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6384: LD_ADDR_VAR 0 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 24
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 11
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 24
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 24
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: ST_TO_ADDR
6467: GO 6571
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6469: LD_ADDR_VAR 0 8
6473: PUSH
6474: LD_INT 14
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 28
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 14
6494: PUSH
6495: LD_INT 1
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 14
6512: PUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 28
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 29
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 11
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 24
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// if w mod 3 = 0 then
6571: LD_VAR 0 7
6575: PUSH
6576: LD_INT 3
6578: MOD
6579: PUSH
6580: LD_INT 0
6582: EQUAL
6583: IFFALSE 6659
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6585: LD_ADDR_VAR 0 8
6589: PUSH
6590: LD_VAR 0 8
6594: PPUSH
6595: LD_INT 1
6597: PUSH
6598: LD_VAR 0 8
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: LD_INT 14
6619: PUSH
6620: LD_INT 1
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 28
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 1
6638: PPUSH
6639: LD_INT 2
6641: PPUSH
6642: CALL_OW 12
6646: ARRAY
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL 53681 0 3
6658: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6659: LD_INT 1
6661: PPUSH
6662: LD_VAR 0 8
6666: PPUSH
6667: CALL 40335 0 2
// if GetSide ( ar_dep_w ) = 2 then
6671: LD_INT 45
6673: PPUSH
6674: CALL_OW 255
6678: PUSH
6679: LD_INT 2
6681: EQUAL
6682: IFFALSE 6767
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6684: LD_ADDR_VAR 0 8
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 28
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 14
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 27
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 27
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_VAR 0 8
6755: PPUSH
6756: CALL 40335 0 2
// wait ( 0 0$50 ) ;
6760: LD_INT 1750
6762: PPUSH
6763: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6774: LD_EXP 68
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: LD_INT 3
6785: PUSH
6786: LD_INT 34
6788: PUSH
6789: LD_INT 32
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 72
6804: PUSH
6805: LD_INT 4
6807: GREATEREQUAL
6808: IFFALSE 6767
// wait ( 0 0$10 ) ;
6810: LD_INT 350
6812: PPUSH
6813: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_EXP 68
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 34
6836: PUSH
6837: LD_INT 32
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 72
6852: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6853: LD_INT 100
6855: PPUSH
6856: CALL_OW 13
6860: PUSH
6861: LD_INT 50
6863: LESS
6864: IFFALSE 6897
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6866: LD_ADDR_VAR 0 5
6870: PUSH
6871: LD_INT 55
6873: PUSH
6874: LD_INT 7
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 75
6883: PUSH
6884: LD_INT 90
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 6926
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_INT 128
6904: PUSH
6905: LD_INT 94
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 180
6914: PUSH
6915: LD_INT 135
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: ST_TO_ADDR
// if w mod 4 = 0 then
6926: LD_VAR 0 7
6930: PUSH
6931: LD_INT 4
6933: MOD
6934: PUSH
6935: LD_INT 0
6937: EQUAL
6938: IFFALSE 6969
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6940: LD_ADDR_VAR 0 5
6944: PUSH
6945: LD_INT 91
6947: PUSH
6948: LD_INT 58
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 117
6957: PUSH
6958: LD_INT 107
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6969: LD_INT 1
6971: PPUSH
6972: LD_VAR 0 3
6976: PPUSH
6977: LD_VAR 0 5
6981: PPUSH
6982: LD_VAR 0 6
6986: PPUSH
6987: CALL 40568 0 4
// if mc_vehicles [ 2 ] then
6991: LD_EXP 68
6995: PUSH
6996: LD_INT 2
6998: ARRAY
6999: IFFALSE 7035
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7001: LD_INT 2
7003: PPUSH
7004: LD_EXP 68
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: LD_INT 73
7015: PUSH
7016: LD_INT 115
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: PPUSH
7026: LD_VAR 0 6
7030: PPUSH
7031: CALL 40568 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7035: LD_INT 22050
7037: PPUSH
7038: LD_INT 28350
7040: PPUSH
7041: CALL_OW 12
7045: PPUSH
7046: CALL_OW 67
// w := w + 1 ;
7050: LD_ADDR_VAR 0 7
7054: PUSH
7055: LD_VAR 0 7
7059: PUSH
7060: LD_INT 1
7062: PLUS
7063: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7064: LD_INT 94
7066: PPUSH
7067: CALL_OW 301
7071: PUSH
7072: LD_EXP 49
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PPUSH
7081: LD_INT 30
7083: PUSH
7084: LD_INT 3
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: NOT
7096: OR
7097: IFFALSE 6363
// end ;
7099: PPOPN 8
7101: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7102: LD_INT 204
7104: IFFALSE 7578
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
// begin enable ;
7115: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7116: LD_INT 35
7118: PPUSH
7119: LD_INT 1190
7121: PPUSH
7122: CALL_OW 12
7126: PPUSH
7127: CALL_OW 67
// tmp := [ ] ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: EMPTY
7137: ST_TO_ADDR
// uc_side := 8 ;
7138: LD_ADDR_OWVAR 20
7142: PUSH
7143: LD_INT 8
7145: ST_TO_ADDR
// uc_nation := 2 ;
7146: LD_ADDR_OWVAR 21
7150: PUSH
7151: LD_INT 2
7153: ST_TO_ADDR
// InitHc ;
7154: CALL_OW 19
// for i = 1 to 3 do
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_INT 3
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7299
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7174: LD_INT 13
7176: PUSH
7177: LD_INT 14
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 1
7186: PPUSH
7187: LD_INT 2
7189: PPUSH
7190: CALL_OW 12
7194: ARRAY
7195: PPUSH
7196: LD_INT 3
7198: PPUSH
7199: LD_INT 5
7201: PPUSH
7202: LD_INT 27
7204: PUSH
7205: LD_INT 28
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 1
7214: PPUSH
7215: LD_INT 2
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 100
7226: PPUSH
7227: CALL 53559 0 5
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 4
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7253: LD_VAR 0 3
7257: PPUSH
7258: LD_INT 15
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_VAR 0 2
7277: PPUSH
7278: LD_VAR 0 2
7282: PUSH
7283: LD_INT 1
7285: PLUS
7286: PPUSH
7287: LD_VAR 0 3
7291: PPUSH
7292: CALL_OW 1
7296: ST_TO_ADDR
// end ;
7297: GO 7171
7299: POP
7300: POP
// for i = 1 to 4 do
7301: LD_ADDR_VAR 0 1
7305: PUSH
7306: DOUBLE
7307: LD_INT 1
7309: DEC
7310: ST_TO_ADDR
7311: LD_INT 4
7313: PUSH
7314: FOR_TO
7315: IFFALSE 7394
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7317: LD_INT 0
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: LD_INT 4
7325: PPUSH
7326: CALL_OW 12
7330: PPUSH
7331: LD_INT 6
7333: PPUSH
7334: CALL_OW 380
// un := CreateHuman ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: CALL_OW 44
7347: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7348: LD_VAR 0 3
7352: PPUSH
7353: LD_INT 15
7355: PPUSH
7356: LD_INT 0
7358: PPUSH
7359: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_INT 1
7380: PLUS
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 1
7391: ST_TO_ADDR
// end ;
7392: GO 7314
7394: POP
7395: POP
// wait ( 0 0$3 ) ;
7396: LD_INT 105
7398: PPUSH
7399: CALL_OW 67
// for i in tmp do
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 2
7412: PUSH
7413: FOR_IN
7414: IFFALSE 7482
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 257
7425: PUSH
7426: LD_INT 1
7428: EQUAL
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 247
7439: PUSH
7440: LD_INT 2
7442: EQUAL
7443: OR
7444: IFFALSE 7480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_INT 81
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 69
7465: PPUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 74
7475: PPUSH
7476: CALL_OW 115
7480: GO 7413
7482: POP
7483: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7484: LD_VAR 0 2
7488: PPUSH
7489: LD_INT 210
7491: PPUSH
7492: LD_INT 178
7494: PPUSH
7495: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7499: LD_ADDR_VAR 0 4
7503: PUSH
7504: LD_INT 10
7506: PPUSH
7507: LD_INT 22
7509: PUSH
7510: LD_INT 8
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 70
7521: ST_TO_ADDR
// if x then
7522: LD_VAR 0 4
7526: IFFALSE 7554
// for i in x do
7528: LD_ADDR_VAR 0 1
7532: PUSH
7533: LD_VAR 0 4
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7552
// RemoveUnit ( i ) ;
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 64
7550: GO 7538
7552: POP
7553: POP
// wait ( 0 0$1 ) ;
7554: LD_INT 35
7556: PPUSH
7557: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 8
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: NOT
7576: IFFALSE 7484
// end ;
7578: PPOPN 4
7580: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7581: LD_INT 22
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 34
7593: PUSH
7594: LD_INT 31
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 24
7606: PUSH
7607: LD_INT 1000
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: IFFALSE 7671
7629: GO 7631
7631: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7632: LD_INT 22
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 34
7644: PUSH
7645: LD_INT 31
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PPUSH
7661: LD_INT 106
7663: PPUSH
7664: LD_INT 14
7666: PPUSH
7667: CALL_OW 111
// end ; end_of_file
7671: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
// InGameOn ;
7680: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7684: LD_EXP 20
7688: PPUSH
7689: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7693: LD_INT 2
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_INT 22
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 34
7760: PUSH
7761: LD_INT 11
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 69
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: ST_TO_ADDR
// for i = 1 to tmp do
7781: LD_ADDR_VAR 0 6
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_VAR 0 2
7795: PUSH
7796: FOR_TO
7797: IFFALSE 7844
// begin if i = 5 then
7799: LD_VAR 0 6
7803: PUSH
7804: LD_INT 5
7806: EQUAL
7807: IFFALSE 7811
// break ;
7809: GO 7844
// sols := Replace ( sols , i , tmp [ i ] ) ;
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: LD_VAR 0 5
7820: PPUSH
7821: LD_VAR 0 6
7825: PPUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_VAR 0 6
7835: ARRAY
7836: PPUSH
7837: CALL_OW 1
7841: ST_TO_ADDR
// end ;
7842: GO 7796
7844: POP
7845: POP
// tmp := ar_force_tmp ;
7846: LD_ADDR_VAR 0 2
7850: PUSH
7851: LD_EXP 39
7855: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_INT 108
7867: PPUSH
7868: LD_INT 139
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PPUSH
7887: LD_EXP 20
7891: PPUSH
7892: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 2
7903: ARRAY
7904: PPUSH
7905: LD_INT 114
7907: PPUSH
7908: LD_INT 132
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7918: LD_VAR 0 2
7922: PUSH
7923: LD_INT 3
7925: ARRAY
7926: PPUSH
7927: LD_INT 115
7929: PPUSH
7930: LD_INT 132
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7940: LD_VAR 0 2
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_INT 3
7956: ARRAY
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7966: LD_VAR 0 4
7970: PPUSH
7971: LD_INT 83
7973: PPUSH
7974: LD_INT 123
7976: PPUSH
7977: CALL_OW 111
// Wait ( 0 0$01 ) ;
7981: LD_INT 35
7983: PPUSH
7984: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7988: LD_INT 90
7990: PPUSH
7991: LD_INT 144
7993: PPUSH
7994: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_INT 88
8005: PPUSH
8006: LD_INT 129
8008: PPUSH
8009: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 92
8020: PUSH
8021: LD_INT 131
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 88
8030: PUSH
8031: LD_INT 127
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 91
8040: PUSH
8041: LD_INT 132
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 92
8050: PUSH
8051: LD_INT 134
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// for i = 1 to sols do
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: DOUBLE
8070: LD_INT 1
8072: DEC
8073: ST_TO_ADDR
8074: LD_VAR 0 5
8078: PUSH
8079: FOR_TO
8080: IFFALSE 8153
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8082: LD_VAR 0 5
8086: PUSH
8087: LD_VAR 0 6
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 3
8097: PUSH
8098: LD_VAR 0 6
8102: ARRAY
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 3
8112: PUSH
8113: LD_VAR 0 6
8117: ARRAY
8118: PUSH
8119: LD_INT 2
8121: ARRAY
8122: PPUSH
8123: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8127: LD_VAR 0 5
8131: PUSH
8132: LD_VAR 0 6
8136: ARRAY
8137: PPUSH
8138: CALL_OW 197
// AddComHold ( sols ) ;
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 200
// end ;
8151: GO 8079
8153: POP
8154: POP
// repeat wait ( 0 0$1 ) ;
8155: LD_INT 35
8157: PPUSH
8158: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8162: LD_VAR 0 5
8166: PUSH
8167: LD_INT 1
8169: ARRAY
8170: PPUSH
8171: LD_INT 92
8173: PPUSH
8174: LD_INT 131
8176: PPUSH
8177: CALL_OW 297
8181: PUSH
8182: LD_INT 4
8184: LESS
8185: IFFALSE 8155
// CenterOnXY ( 96 , 139 ) ;
8187: LD_INT 96
8189: PPUSH
8190: LD_INT 139
8192: PPUSH
8193: CALL_OW 84
// wait ( 0 0$3 ) ;
8197: LD_INT 105
8199: PPUSH
8200: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8204: LD_INT 111
8206: PPUSH
8207: LD_INT 135
8209: PPUSH
8210: LD_INT 1
8212: PPUSH
8213: LD_INT 25
8215: NEG
8216: PPUSH
8217: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8221: LD_VAR 0 2
8225: PUSH
8226: LD_INT 2
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 1
8237: ARRAY
8238: PPUSH
8239: CALL_OW 250
8243: PUSH
8244: LD_INT 3
8246: PLUS
8247: PPUSH
8248: LD_VAR 0 2
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: CALL_OW 251
8261: PPUSH
8262: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8266: LD_VAR 0 2
8270: PUSH
8271: LD_INT 3
8273: ARRAY
8274: PPUSH
8275: LD_INT 7
8277: PPUSH
8278: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8282: LD_VAR 0 2
8286: PUSH
8287: LD_INT 2
8289: ARRAY
8290: PPUSH
8291: LD_VAR 0 2
8295: PUSH
8296: LD_INT 1
8298: ARRAY
8299: PPUSH
8300: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8304: LD_INT 35
8306: PPUSH
8307: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 1
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 2
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: CALL_OW 296
8333: PUSH
8334: LD_INT 5
8336: LESS
8337: IFFALSE 8304
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8339: LD_VAR 0 2
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_VAR 0 2
8352: PUSH
8353: LD_INT 2
8355: ARRAY
8356: PPUSH
8357: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: PPUSH
8370: LD_STRING D1a-Merc1-1
8372: PPUSH
8373: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: ARRAY
8385: PPUSH
8386: LD_STRING D1a-FMerc2-1
8388: PPUSH
8389: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 2
8400: ARRAY
8401: PPUSH
8402: LD_VAR 0 2
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PPUSH
8424: LD_INT 500
8426: PPUSH
8427: CALL_OW 234
// wait ( 0 0$2 ) ;
8431: LD_INT 70
8433: PPUSH
8434: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 1
8445: ARRAY
8446: PPUSH
8447: LD_INT 2
8449: PPUSH
8450: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8454: LD_INT 10
8456: PPUSH
8457: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8461: LD_VAR 0 2
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_STRING D1a-Merc1-2
8472: PPUSH
8473: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8477: LD_INT 7
8479: PPUSH
8480: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8484: LD_VAR 0 2
8488: PUSH
8489: LD_INT 1
8491: ARRAY
8492: PPUSH
8493: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8497: LD_VAR 0 2
8501: PUSH
8502: LD_INT 2
8504: ARRAY
8505: PPUSH
8506: LD_INT 10
8508: PPUSH
8509: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: PPUSH
8522: LD_STRING D1a-FMerc2-2
8524: PPUSH
8525: CALL_OW 88
// wait ( 0 0$1 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8536: LD_INT 7
8538: PPUSH
8539: CALL_OW 85
// wait ( 0 0$2 ) ;
8543: LD_INT 70
8545: PPUSH
8546: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8550: LD_EXP 43
8554: PPUSH
8555: LD_STRING D1a-Saliba-1
8557: PPUSH
8558: CALL_OW 91
// KillUnit ( Saliba ) ;
8562: LD_EXP 43
8566: PPUSH
8567: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8571: LD_VAR 0 2
8575: PUSH
8576: LD_INT 3
8578: ARRAY
8579: PPUSH
8580: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8584: LD_EXP 20
8588: PPUSH
8589: CALL_OW 85
// wait ( 0 0$1 ) ;
8593: LD_INT 35
8595: PPUSH
8596: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8600: LD_VAR 0 5
8604: PPUSH
8605: LD_INT 88
8607: PPUSH
8608: LD_INT 141
8610: PPUSH
8611: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8615: LD_VAR 0 5
8619: PPUSH
8620: LD_INT 70
8622: PPUSH
8623: CALL_OW 202
// wait ( 0 0$2 ) ;
8627: LD_INT 70
8629: PPUSH
8630: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8634: LD_INT 2
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: CALL_OW 80
// InGameOff ;
8650: CALL_OW 9
// ComWalk ( sols ) ;
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8663: LD_STRING M1
8665: PPUSH
8666: CALL_OW 337
// game_speed := 4 ;
8670: LD_ADDR_OWVAR 65
8674: PUSH
8675: LD_INT 4
8677: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 135
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 331
// SaveForQuickRestart ;
8691: CALL_OW 22
// ar_run := true ;
8695: LD_ADDR_EXP 5
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 91
8722: PUSH
8723: LD_INT 7
8725: PUSH
8726: LD_INT 10
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: PUSH
8743: LD_INT 7
8745: PPUSH
8746: CALL_OW 256
8750: PUSH
8751: LD_INT 999
8753: LESS
8754: OR
8755: IFFALSE 8703
// if GetSide ( ar_dep_s ) = 2 then
8757: LD_INT 7
8759: PPUSH
8760: CALL_OW 255
8764: PUSH
8765: LD_INT 2
8767: EQUAL
8768: IFFALSE 8780
// SetSide ( ar_dep_s , 1 ) ;
8770: LD_INT 7
8772: PPUSH
8773: LD_INT 1
8775: PPUSH
8776: CALL_OW 235
// end ;
8780: LD_VAR 0 1
8784: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8785: LD_EXP 5
8789: IFFALSE 9149
8791: GO 8793
8793: DISABLE
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_EXP 39
8808: PUSH
8809: LD_EXP 35
8813: PPUSH
8814: LD_INT 2
8816: PUSH
8817: LD_INT 21
8819: PUSH
8820: LD_INT 2
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 1
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 72
8846: ADD
8847: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_INT 5
8855: PPUSH
8856: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8860: LD_INT 5
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 343
// k := 1 ;
8870: LD_ADDR_VAR 0 3
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// for i in tmp do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_VAR 0 2
8887: PUSH
8888: FOR_IN
8889: IFFALSE 8974
// begin if IsInUnit ( i ) then
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 310
8900: IFFALSE 8911
// ComExitBuilding ( i ) ;
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 122
// if GetClass ( i ) = 3 then
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 257
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: IFFALSE 8960
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_EXP 40
8935: PUSH
8936: LD_VAR 0 3
8940: ARRAY
8941: PPUSH
8942: CALL_OW 180
// k := k + 1 ;
8946: LD_ADDR_VAR 0 3
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 1
8958: PLUS
8959: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_INT 10
8967: PPUSH
8968: CALL_OW 173
// end ;
8972: GO 8888
8974: POP
8975: POP
// ar_patrol := true ;
8976: LD_ADDR_EXP 7
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8984: LD_INT 10
8986: PPUSH
8987: CALL_OW 67
// for i in tmp do
8991: LD_ADDR_VAR 0 1
8995: PUSH
8996: LD_VAR 0 2
9000: PUSH
9001: FOR_IN
9002: IFFALSE 9030
// if not HasTask ( i ) then
9004: LD_VAR 0 1
9008: PPUSH
9009: CALL_OW 314
9013: NOT
9014: IFFALSE 9028
// ComMoveToArea ( i , escape_area ) ;
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 10
9023: PPUSH
9024: CALL_OW 113
9028: GO 9001
9030: POP
9031: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9032: LD_ADDR_VAR 0 3
9036: PUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 95
9044: PUSH
9045: LD_INT 10
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 72
9056: ST_TO_ADDR
// if k then
9057: LD_VAR 0 3
9061: IFFALSE 9130
// for i in k do
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: LD_VAR 0 3
9072: PUSH
9073: FOR_IN
9074: IFFALSE 9128
// begin if IsInUnit ( i ) then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 310
9085: IFFALSE 9101
// RemoveUnit ( IsInUnit ( i ) ) ;
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 310
9096: PPUSH
9097: CALL_OW 64
// RemoveUnit ( i ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 64
// tmp := tmp diff i ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_VAR 0 2
9119: PUSH
9120: LD_VAR 0 1
9124: DIFF
9125: ST_TO_ADDR
// end ;
9126: GO 9073
9128: POP
9129: POP
// until tmp = [ ] ;
9130: LD_VAR 0 2
9134: PUSH
9135: EMPTY
9136: EQUAL
9137: IFFALSE 8984
// ChangeSideFog ( 5 , 5 ) ;
9139: LD_INT 5
9141: PPUSH
9142: LD_INT 5
9144: PPUSH
9145: CALL_OW 343
// end ;
9149: PPOPN 3
9151: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9152: LD_EXP 7
9156: IFFALSE 9446
9158: GO 9160
9160: DISABLE
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
9165: PPUSH
// begin uc_side := 2 ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_INT 2
9173: ST_TO_ADDR
// uc_nation := 2 ;
9174: LD_ADDR_OWVAR 21
9178: PUSH
9179: LD_INT 2
9181: ST_TO_ADDR
// InitHc ;
9182: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9186: LD_INT 1
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 6
9194: PPUSH
9195: CALL_OW 380
// un := CreateHuman ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: CALL_OW 44
9208: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9209: LD_INT 14
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_INT 27
9220: PPUSH
9221: LD_INT 98
9223: PPUSH
9224: CALL 53559 0 5
// veh := CreateVehicle ;
9228: LD_ADDR_VAR 0 3
9232: PUSH
9233: CALL_OW 45
9237: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9238: LD_VAR 0 3
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_INT 179
9257: PPUSH
9258: LD_INT 135
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_VAR 0 3
9277: PPUSH
9278: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 126
9289: PPUSH
9290: LD_INT 133
9292: PPUSH
9293: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9297: LD_INT 10
9299: PPUSH
9300: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: CALL_OW 292
9316: PUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: LD_INT 7
9324: PPUSH
9325: CALL_OW 296
9329: PUSH
9330: LD_INT 9
9332: LESS
9333: OR
9334: IFFALSE 9297
// ComHold ( veh ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_STRING D2aa-Ar1-1
9352: PPUSH
9353: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 177
9364: PPUSH
9365: LD_INT 96
9367: PPUSH
9368: CALL_OW 111
// AddComExitVehicle ( un ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9381: LD_INT 35
9383: PPUSH
9384: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9388: LD_VAR 0 2
9392: PPUSH
9393: LD_INT 204
9395: PPUSH
9396: CALL_OW 296
9400: PUSH
9401: LD_INT 15
9403: LESS
9404: IFFALSE 9381
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9406: LD_ADDR_EXP 49
9410: PUSH
9411: LD_EXP 49
9415: PPUSH
9416: LD_INT 3
9418: PUSH
9419: LD_EXP 49
9423: PUSH
9424: LD_INT 3
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: PLUS
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 53681 0 3
9445: ST_TO_ADDR
// end ;
9446: PPOPN 3
9448: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9449: LD_INT 7
9451: PPUSH
9452: CALL_OW 255
9456: PUSH
9457: LD_INT 1
9459: EQUAL
9460: PUSH
9461: LD_INT 7
9463: PPUSH
9464: CALL_OW 301
9468: OR
9469: IFFALSE 11893
9471: GO 9473
9473: DISABLE
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_EXP 35
9487: PPUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 3
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 72
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9520
// SetSide ( i , 1 ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 235
9518: GO 9503
9520: POP
9521: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_INT 46
9529: PUSH
9530: LD_INT 41
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 50
9539: PUSH
9540: LD_INT 25
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 57
9549: PUSH
9550: LD_INT 75
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 75
9559: PUSH
9560: LD_INT 89
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 51
9569: PUSH
9570: LD_INT 45
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 95
9579: PUSH
9580: LD_INT 95
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 84
9589: PUSH
9590: LD_INT 77
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 101
9599: PUSH
9600: LD_INT 76
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 118
9609: PUSH
9610: LD_INT 81
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 139
9619: PUSH
9620: LD_INT 97
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 129
9629: PUSH
9630: LD_INT 114
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 154
9639: PUSH
9640: LD_INT 111
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: ST_TO_ADDR
// base_captured := true ;
9661: LD_ADDR_EXP 6
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// DialogueOn ;
9669: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9673: LD_EXP 20
9677: PPUSH
9678: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9682: LD_EXP 20
9686: PPUSH
9687: LD_STRING D2-JMM-1
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9694: LD_EXP 29
9698: PPUSH
9699: LD_STRING D2-Pow-1
9701: PPUSH
9702: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9706: LD_EXP 20
9710: PPUSH
9711: LD_STRING D2-JMM-2
9713: PPUSH
9714: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9718: LD_EXP 29
9722: PPUSH
9723: LD_STRING D2-Pow-2
9725: PPUSH
9726: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9730: LD_EXP 20
9734: PPUSH
9735: LD_STRING D2-JMM-3
9737: PPUSH
9738: CALL_OW 88
// DialogueOff ;
9742: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9746: LD_STRING M2
9748: PPUSH
9749: CALL_OW 337
// Wait ( 0 0$2 ) ;
9753: LD_INT 70
9755: PPUSH
9756: CALL_OW 67
// if IsOk ( Gary ) then
9760: LD_EXP 31
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// Say ( Gary , D2a-Gary-1 ) ;
9771: LD_EXP 31
9775: PPUSH
9776: LD_STRING D2a-Gary-1
9778: PPUSH
9779: CALL_OW 88
// if IsOk ( Bobby ) then
9783: LD_EXP 23
9787: PPUSH
9788: CALL_OW 302
9792: IFFALSE 9806
// Say ( Bobby , D2a-Bobby-1 ) ;
9794: LD_EXP 23
9798: PPUSH
9799: LD_STRING D2a-Bobby-1
9801: PPUSH
9802: CALL_OW 88
// if IsOk ( Cyrus ) then
9806: LD_EXP 24
9810: PPUSH
9811: CALL_OW 302
9815: IFFALSE 9829
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9817: LD_EXP 24
9821: PPUSH
9822: LD_STRING D2a-Cyrus-1
9824: PPUSH
9825: CALL_OW 88
// if IsOk ( Lisa ) then
9829: LD_EXP 21
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9852
// Say ( Lisa , D2a-Lisa-1 ) ;
9840: LD_EXP 21
9844: PPUSH
9845: LD_STRING D2a-Lisa-1
9847: PPUSH
9848: CALL_OW 88
// if IsOk ( Frank ) then
9852: LD_EXP 32
9856: PPUSH
9857: CALL_OW 302
9861: IFFALSE 9875
// Say ( Frank , D2a-Frank-1 ) ;
9863: LD_EXP 32
9867: PPUSH
9868: LD_STRING D2a-Frank-1
9870: PPUSH
9871: CALL_OW 88
// if IsOk ( Cornel ) then
9875: LD_EXP 30
9879: PPUSH
9880: CALL_OW 302
9884: IFFALSE 9898
// Say ( Cornel , D2a-Corn-1 ) ;
9886: LD_EXP 30
9890: PPUSH
9891: LD_STRING D2a-Corn-1
9893: PPUSH
9894: CALL_OW 88
// if IsOk ( Donaldson ) then
9898: LD_EXP 22
9902: PPUSH
9903: CALL_OW 302
9907: IFFALSE 9921
// Say ( Donaldson , D2a-Don-1 ) ;
9909: LD_EXP 22
9913: PPUSH
9914: LD_STRING D2a-Don-1
9916: PPUSH
9917: CALL_OW 88
// if IsOk ( Brown ) then
9921: LD_EXP 26
9925: PPUSH
9926: CALL_OW 302
9930: IFFALSE 9944
// Say ( Brown , D2a-Brown-1 ) ;
9932: LD_EXP 26
9936: PPUSH
9937: LD_STRING D2a-Brown-1
9939: PPUSH
9940: CALL_OW 88
// Wait ( 0 0$30 ) ;
9944: LD_INT 1050
9946: PPUSH
9947: CALL_OW 67
// if IsOk ( Frank ) then
9951: LD_EXP 32
9955: PPUSH
9956: CALL_OW 302
9960: IFFALSE 10226
// begin DialogueOn ;
9962: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9966: LD_EXP 20
9970: PUSH
9971: LD_EXP 32
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9984: LD_EXP 32
9988: PPUSH
9989: LD_STRING D3F-Frank-1
9991: PPUSH
9992: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9996: LD_EXP 20
10000: PPUSH
10001: LD_STRING D3F-JMM-1
10003: PPUSH
10004: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10008: LD_EXP 32
10012: PPUSH
10013: LD_STRING D3F-Frank-2
10015: PPUSH
10016: CALL_OW 88
// case Query ( QFrank ) of 1 :
10020: LD_STRING QFrank
10022: PPUSH
10023: CALL_OW 97
10027: PUSH
10028: LD_INT 1
10030: DOUBLE
10031: EQUAL
10032: IFTRUE 10036
10034: GO 10059
10036: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10037: LD_EXP 20
10041: PPUSH
10042: LD_STRING D3Fa-JMM-1
10044: PPUSH
10045: CALL_OW 88
// us_scout := 1 ;
10049: LD_ADDR_EXP 8
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// end ; 2 :
10057: GO 10222
10059: LD_INT 2
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10189
10067: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10068: LD_EXP 20
10072: PPUSH
10073: LD_STRING D3Fb-JMM-1
10075: PPUSH
10076: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10080: LD_EXP 32
10084: PPUSH
10085: LD_STRING D3Fb-Frank-1
10087: PPUSH
10088: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10092: LD_STRING QFrank2
10094: PPUSH
10095: CALL_OW 97
10099: PUSH
10100: LD_INT 1
10102: DOUBLE
10103: EQUAL
10104: IFTRUE 10108
10106: GO 10155
10108: POP
// begin us_scout := 2 ;
10109: LD_ADDR_EXP 8
10113: PUSH
10114: LD_INT 2
10116: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10117: LD_EXP 20
10121: PPUSH
10122: LD_STRING D3Fba-JMM-1
10124: PPUSH
10125: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10129: LD_EXP 32
10133: PPUSH
10134: LD_STRING D3Fba-Frank-1
10136: PPUSH
10137: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10141: LD_EXP 20
10145: PPUSH
10146: LD_STRING D3Fba-JMM-2
10148: PPUSH
10149: CALL_OW 88
// end ; 2 :
10153: GO 10187
10155: LD_INT 2
10157: DOUBLE
10158: EQUAL
10159: IFTRUE 10163
10161: GO 10186
10163: POP
// begin us_scout := 0 ;
10164: LD_ADDR_EXP 8
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10172: LD_EXP 20
10176: PPUSH
10177: LD_STRING D3Fbb-JMM-1
10179: PPUSH
10180: CALL_OW 88
// end ; end ;
10184: GO 10187
10186: POP
// end ; 3 :
10187: GO 10222
10189: LD_INT 3
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10221
10197: POP
// begin us_scout := - 1 ;
10198: LD_ADDR_EXP 8
10202: PUSH
10203: LD_INT 1
10205: NEG
10206: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10207: LD_EXP 20
10211: PPUSH
10212: LD_STRING D3Fc-JMM-1
10214: PPUSH
10215: CALL_OW 88
// end ; end ;
10219: GO 10222
10221: POP
// DialogueOff ;
10222: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10226: LD_EXP 8
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: IN
10242: IFFALSE 10246
// exit ;
10244: GO 11893
// if us_scout in [ 1 , 2 ] then
10246: LD_EXP 8
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: IN
10261: IFFALSE 10960
// begin if IsInUnit ( Frank ) then
10263: LD_EXP 32
10267: PPUSH
10268: CALL_OW 310
10272: IFFALSE 10283
// ComExitBuilding ( Frank ) ;
10274: LD_EXP 32
10278: PPUSH
10279: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10283: LD_EXP 32
10287: PPUSH
10288: CALL_OW 311
10292: IFFALSE 10303
// ComExitVehicle ( Frank ) ;
10294: LD_EXP 32
10298: PPUSH
10299: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10303: LD_EXP 32
10307: PPUSH
10308: LD_INT 4
10310: PPUSH
10311: CALL_OW 235
// wait ( 0 0$1 ) ;
10315: LD_INT 35
10317: PPUSH
10318: CALL_OW 67
// if us_scout = 2 then
10322: LD_EXP 8
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: IFFALSE 10698
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10332: LD_EXP 32
10336: PPUSH
10337: LD_INT 75
10339: PPUSH
10340: LD_INT 63
10342: PPUSH
10343: CALL_OW 111
// AddComHold ( Frank ) ;
10347: LD_EXP 32
10351: PPUSH
10352: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10356: LD_EXP 32
10360: PPUSH
10361: LD_INT 770
10363: PPUSH
10364: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10368: LD_EXP 32
10372: PPUSH
10373: LD_INT 100
10375: PPUSH
10376: LD_INT 75
10378: PPUSH
10379: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10383: LD_EXP 32
10387: PPUSH
10388: LD_INT 123
10390: PPUSH
10391: LD_INT 103
10393: PPUSH
10394: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10398: LD_EXP 32
10402: PPUSH
10403: LD_INT 138
10405: PPUSH
10406: LD_INT 108
10408: PPUSH
10409: CALL_OW 171
// AddComHold ( Frank ) ;
10413: LD_EXP 32
10417: PPUSH
10418: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10422: LD_INT 35
10424: PPUSH
10425: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10429: LD_EXP 32
10433: PPUSH
10434: LD_INT 138
10436: PPUSH
10437: LD_INT 108
10439: PPUSH
10440: CALL_OW 307
10444: IFFALSE 10422
// AddComMoveXY ( Frank , 125 , 132 ) ;
10446: LD_EXP 32
10450: PPUSH
10451: LD_INT 125
10453: PPUSH
10454: LD_INT 132
10456: PPUSH
10457: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10461: LD_INT 35
10463: PPUSH
10464: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10468: LD_INT 1
10470: PPUSH
10471: LD_EXP 32
10475: PPUSH
10476: CALL_OW 292
10480: PUSH
10481: LD_EXP 32
10485: PPUSH
10486: LD_INT 7
10488: PPUSH
10489: CALL_OW 296
10493: PUSH
10494: LD_INT 7
10496: LESS
10497: OR
10498: IFFALSE 10461
// DialogueOn ;
10500: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10504: LD_EXP 32
10508: PPUSH
10509: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10513: LD_INT 10
10515: PPUSH
10516: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10520: LD_EXP 20
10524: PPUSH
10525: LD_STRING D4Fa-JMM-1
10527: PPUSH
10528: CALL_OW 88
// for i in points do
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: LD_VAR 0 2
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10601
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10545: LD_VAR 0 1
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 1
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: LD_INT 20
10568: NEG
10569: PPUSH
10570: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10574: LD_VAR 0 1
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 331
// end ;
10599: GO 10542
10601: POP
10602: POP
// dwait ( 0 0$0.5 ) ;
10603: LD_INT 18
10605: PPUSH
10606: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10610: LD_INT 42
10612: PPUSH
10613: LD_INT 27
10615: PPUSH
10616: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10620: LD_EXP 32
10624: PPUSH
10625: LD_STRING D4Fa-Frank-1
10627: PPUSH
10628: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10632: LD_INT 18
10634: PPUSH
10635: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10639: LD_EXP 20
10643: PPUSH
10644: LD_STRING D4Fa-JMM-2
10646: PPUSH
10647: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10651: LD_INT 118
10653: PPUSH
10654: LD_INT 80
10656: PPUSH
10657: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10661: LD_EXP 32
10665: PPUSH
10666: LD_STRING D4Fa-Frank-2
10668: PPUSH
10669: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10673: LD_INT 10
10675: PPUSH
10676: CALL_OW 68
// DialogueOff ;
10680: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10684: LD_EXP 32
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 235
// end else
10696: GO 10960
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10698: LD_INT 2
10700: PPUSH
10701: LD_INT 4
10703: PPUSH
10704: LD_INT 2
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10714: LD_EXP 32
10718: PPUSH
10719: LD_INT 75
10721: PPUSH
10722: LD_INT 63
10724: PPUSH
10725: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10729: LD_EXP 32
10733: PPUSH
10734: LD_INT 175
10736: PPUSH
10737: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10741: LD_EXP 32
10745: PPUSH
10746: LD_INT 102
10748: PPUSH
10749: LD_INT 76
10751: PPUSH
10752: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10756: LD_EXP 32
10760: PPUSH
10761: LD_INT 108
10763: PPUSH
10764: LD_INT 70
10766: PPUSH
10767: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10771: LD_INT 35
10773: PPUSH
10774: CALL_OW 67
// until See ( 2 , Frank ) ;
10778: LD_INT 2
10780: PPUSH
10781: LD_EXP 32
10785: PPUSH
10786: CALL_OW 292
10790: IFFALSE 10771
// ComMoveXY ( Frank , 112 , 118 ) ;
10792: LD_EXP 32
10796: PPUSH
10797: LD_INT 112
10799: PPUSH
10800: LD_INT 118
10802: PPUSH
10803: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10807: LD_EXP 32
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 750
10819: GREATEREQUAL
10820: IFFALSE 10834
// SetLives ( Frank , 700 ) ;
10822: LD_EXP 32
10826: PPUSH
10827: LD_INT 700
10829: PPUSH
10830: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10834: LD_INT 35
10836: PPUSH
10837: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10841: LD_INT 1
10843: PPUSH
10844: LD_EXP 32
10848: PPUSH
10849: CALL_OW 292
10853: PUSH
10854: LD_EXP 32
10858: PPUSH
10859: LD_INT 7
10861: PPUSH
10862: CALL_OW 296
10866: PUSH
10867: LD_INT 17
10869: LESS
10870: OR
10871: IFFALSE 10834
// DialogueOn ;
10873: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10877: LD_EXP 32
10881: PPUSH
10882: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10886: LD_EXP 32
10890: PPUSH
10891: LD_STRING D4Fb-Frank-1
10893: PPUSH
10894: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10898: LD_EXP 20
10902: PPUSH
10903: LD_STRING D4Fb-JMM-1
10905: PPUSH
10906: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10910: LD_INT 2
10912: PPUSH
10913: LD_STRING D4Fb-FSci1-1
10915: PPUSH
10916: CALL 15638 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10920: LD_EXP 32
10924: PPUSH
10925: LD_STRING D4Fb-Frank-2
10927: PPUSH
10928: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10932: LD_EXP 20
10936: PPUSH
10937: LD_STRING D4Fb-JMM-2
10939: PPUSH
10940: CALL_OW 88
// DialogueOff ;
10944: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10948: LD_EXP 32
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10960: LD_EXP 33
10964: PPUSH
10965: CALL_OW 302
10969: PUSH
10970: LD_EXP 32
10974: NOT
10975: AND
10976: IFFALSE 11124
// begin DialogueOn ;
10978: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10982: LD_EXP 20
10986: PUSH
10987: LD_EXP 33
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11000: LD_EXP 33
11004: PPUSH
11005: LD_STRING D3Y-Yam-1
11007: PPUSH
11008: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11012: LD_EXP 20
11016: PPUSH
11017: LD_STRING D3Y-JMM-1
11019: PPUSH
11020: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11024: LD_EXP 33
11028: PPUSH
11029: LD_STRING D3Y-Yam-2
11031: PPUSH
11032: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11036: LD_STRING QYamoko
11038: PPUSH
11039: CALL_OW 97
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11087
11052: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11053: LD_EXP 20
11057: PPUSH
11058: LD_STRING D3Ya-JMM-1
11060: PPUSH
11061: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11065: LD_EXP 33
11069: PPUSH
11070: LD_STRING D3Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// us_scout := 1 ;
11077: LD_ADDR_EXP 8
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// end ; 2 :
11085: GO 11120
11087: LD_INT 2
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11119
11095: POP
// begin us_scout := - 1 ;
11096: LD_ADDR_EXP 8
11100: PUSH
11101: LD_INT 1
11103: NEG
11104: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11105: LD_EXP 20
11109: PPUSH
11110: LD_STRING D3Yb-JMM-1
11112: PPUSH
11113: CALL_OW 88
// end ; end ;
11117: GO 11120
11119: POP
// DialogueOff ;
11120: CALL_OW 7
// end ; if Frank then
11124: LD_EXP 32
11128: IFFALSE 11132
// exit ;
11130: GO 11893
// if us_scout in [ - 1 , 0 ] then
11132: LD_EXP 8
11136: PUSH
11137: LD_INT 1
11139: NEG
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: IN
11148: IFFALSE 11152
// exit ;
11150: GO 11893
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11152: LD_ADDR_EXP 8
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: LD_OWVAR 67
11175: ARRAY
11176: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11177: LD_EXP 8
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: LD_INT 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: IN
11192: IFFALSE 11893
// begin if IsInUnit ( Kikuchi ) then
11194: LD_EXP 33
11198: PPUSH
11199: CALL_OW 310
11203: IFFALSE 11214
// ComExitBuilding ( Kikuchi ) ;
11205: LD_EXP 33
11209: PPUSH
11210: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11214: LD_EXP 33
11218: PPUSH
11219: CALL_OW 311
11223: IFFALSE 11234
// ComExitVehicle ( Kikuchi ) ;
11225: LD_EXP 33
11229: PPUSH
11230: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_INT 4
11241: PPUSH
11242: CALL_OW 235
// wait ( 0 0$1 ) ;
11246: LD_INT 35
11248: PPUSH
11249: CALL_OW 67
// if us_scout = 2 then
11253: LD_EXP 8
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: IFFALSE 11641
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11263: LD_EXP 33
11267: PPUSH
11268: LD_INT 75
11270: PPUSH
11271: LD_INT 63
11273: PPUSH
11274: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11278: LD_EXP 33
11282: PPUSH
11283: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11287: LD_EXP 33
11291: PPUSH
11292: LD_INT 770
11294: PPUSH
11295: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11299: LD_EXP 33
11303: PPUSH
11304: LD_INT 100
11306: PPUSH
11307: LD_INT 75
11309: PPUSH
11310: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11314: LD_EXP 33
11318: PPUSH
11319: LD_INT 123
11321: PPUSH
11322: LD_INT 103
11324: PPUSH
11325: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11329: LD_EXP 33
11333: PPUSH
11334: LD_INT 138
11336: PPUSH
11337: LD_INT 108
11339: PPUSH
11340: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11344: LD_EXP 33
11348: PPUSH
11349: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11353: LD_INT 35
11355: PPUSH
11356: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11360: LD_EXP 33
11364: PPUSH
11365: LD_INT 138
11367: PPUSH
11368: LD_INT 108
11370: PPUSH
11371: CALL_OW 307
11375: IFFALSE 11353
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11377: LD_EXP 33
11381: PPUSH
11382: LD_INT 125
11384: PPUSH
11385: LD_INT 132
11387: PPUSH
11388: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11392: LD_INT 35
11394: PPUSH
11395: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11399: LD_INT 1
11401: PPUSH
11402: LD_EXP 33
11406: PPUSH
11407: CALL_OW 292
11411: PUSH
11412: LD_EXP 33
11416: PPUSH
11417: LD_INT 7
11419: PPUSH
11420: CALL_OW 296
11424: PUSH
11425: LD_INT 7
11427: LESS
11428: OR
11429: IFFALSE 11392
// DialogueOn ;
11431: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11435: LD_EXP 33
11439: PPUSH
11440: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11444: LD_INT 10
11446: PPUSH
11447: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11451: LD_EXP 33
11455: PPUSH
11456: LD_STRING D4Ya-Yam-1
11458: PPUSH
11459: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11463: LD_EXP 20
11467: PPUSH
11468: LD_STRING D4Ya-JMM-1
11470: PPUSH
11471: CALL_OW 88
// for i in points do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 2
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11544
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11488: LD_VAR 0 1
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 1
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: LD_INT 20
11511: NEG
11512: PPUSH
11513: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11517: LD_VAR 0 1
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PPUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 2
11533: ARRAY
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 331
// end ;
11542: GO 11485
11544: POP
11545: POP
// dwait ( 0 0$0.5 ) ;
11546: LD_INT 18
11548: PPUSH
11549: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11553: LD_INT 42
11555: PPUSH
11556: LD_INT 27
11558: PPUSH
11559: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11563: LD_EXP 33
11567: PPUSH
11568: LD_STRING D4Ya-Yam-2
11570: PPUSH
11571: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11575: LD_INT 18
11577: PPUSH
11578: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11582: LD_INT 118
11584: PPUSH
11585: LD_INT 80
11587: PPUSH
11588: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11592: LD_EXP 20
11596: PPUSH
11597: LD_STRING D4Ya-JMM-2
11599: PPUSH
11600: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11604: LD_EXP 33
11608: PPUSH
11609: LD_STRING D4Ya-Yam-3
11611: PPUSH
11612: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11616: LD_INT 10
11618: PPUSH
11619: CALL_OW 68
// DialogueOff ;
11623: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11627: LD_EXP 33
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 235
// end else
11639: GO 11893
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11641: LD_INT 2
11643: PPUSH
11644: LD_INT 4
11646: PPUSH
11647: LD_INT 2
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11657: LD_EXP 33
11661: PPUSH
11662: LD_INT 75
11664: PPUSH
11665: LD_INT 63
11667: PPUSH
11668: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11672: LD_EXP 33
11676: PPUSH
11677: LD_INT 175
11679: PPUSH
11680: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11684: LD_EXP 33
11688: PPUSH
11689: LD_INT 102
11691: PPUSH
11692: LD_INT 76
11694: PPUSH
11695: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11699: LD_EXP 33
11703: PPUSH
11704: LD_INT 108
11706: PPUSH
11707: LD_INT 70
11709: PPUSH
11710: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11714: LD_INT 35
11716: PPUSH
11717: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11721: LD_INT 2
11723: PPUSH
11724: LD_EXP 33
11728: PPUSH
11729: CALL_OW 292
11733: IFFALSE 11714
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11735: LD_EXP 33
11739: PPUSH
11740: LD_INT 112
11742: PPUSH
11743: LD_INT 118
11745: PPUSH
11746: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11750: LD_EXP 33
11754: PPUSH
11755: CALL_OW 256
11759: PUSH
11760: LD_INT 750
11762: GREATEREQUAL
11763: IFFALSE 11777
// SetLives ( Kikuchi , 700 ) ;
11765: LD_EXP 33
11769: PPUSH
11770: LD_INT 700
11772: PPUSH
11773: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11777: LD_INT 35
11779: PPUSH
11780: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11784: LD_INT 1
11786: PPUSH
11787: LD_EXP 33
11791: PPUSH
11792: CALL_OW 292
11796: PUSH
11797: LD_EXP 33
11801: PPUSH
11802: LD_INT 7
11804: PPUSH
11805: CALL_OW 296
11809: PUSH
11810: LD_INT 17
11812: LESS
11813: OR
11814: IFFALSE 11777
// DialogueOn ;
11816: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11820: LD_EXP 33
11824: PPUSH
11825: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11829: LD_EXP 33
11833: PPUSH
11834: LD_STRING D4Yb-Yam-1
11836: PPUSH
11837: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11841: LD_EXP 20
11845: PPUSH
11846: LD_STRING D4Yb-JMM-1
11848: PPUSH
11849: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11853: LD_EXP 33
11857: PPUSH
11858: LD_STRING D4Yb-Yam-2
11860: PPUSH
11861: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11865: LD_EXP 20
11869: PPUSH
11870: LD_STRING D4Yb-JMM-2
11872: PPUSH
11873: CALL_OW 88
// DialogueOff ;
11877: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11881: LD_EXP 33
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 235
// end ; end ; end ;
11893: PPOPN 2
11895: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11896: LD_EXP 6
11900: IFFALSE 12933
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
// begin enable ;
11911: ENABLE
// if not seen [ 1 ] then
11912: LD_EXP 9
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: NOT
11921: IFFALSE 12101
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: LD_INT 22
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 11
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 33
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 69
11974: ST_TO_ADDR
// if tmp then
11975: LD_VAR 0 2
11979: IFFALSE 12101
// for i in tmp do
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_VAR 0 2
11990: PUSH
11991: FOR_IN
11992: IFFALSE 12099
// if See ( 1 , i ) then
11994: LD_INT 1
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 292
12006: IFFALSE 12097
// begin seen := Replace ( seen , 1 , true ) ;
12008: LD_ADDR_EXP 9
12012: PUSH
12013: LD_EXP 9
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 1
12028: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12029: LD_INT 1
12031: PPUSH
12032: CALL 15460 0 1
12036: IFFALSE 12097
// begin DialogueOn ;
12038: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12058: LD_ADDR_VAR 0 3
12062: PUSH
12063: LD_INT 1
12065: PPUSH
12066: LD_STRING D5a-Sol2-1
12068: PPUSH
12069: CALL 15638 0 2
12073: ST_TO_ADDR
// if not un then
12074: LD_VAR 0 3
12078: NOT
12079: IFFALSE 12091
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12081: LD_INT 2
12083: PPUSH
12084: LD_STRING D5a-FSol2-1
12086: PPUSH
12087: CALL 15638 0 2
// DialogueOff ;
12091: CALL_OW 7
// break ;
12095: GO 12099
// end ; end ;
12097: GO 11991
12099: POP
12100: POP
// end ; if not seen [ 2 ] then
12101: LD_EXP 9
12105: PUSH
12106: LD_INT 2
12108: ARRAY
12109: NOT
12110: IFFALSE 12335
// begin can_kamikazed := true ;
12112: LD_ADDR_EXP 10
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 25
12137: PUSH
12138: LD_INT 17
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// if tmp then
12154: LD_VAR 0 2
12158: IFFALSE 12335
// for i in tmp do
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_VAR 0 2
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12333
// if See ( 1 , i ) then
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 292
12185: IFFALSE 12331
// begin seen := Replace ( seen , 2 , true ) ;
12187: LD_ADDR_EXP 9
12191: PUSH
12192: LD_EXP 9
12196: PPUSH
12197: LD_INT 2
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12208: LD_INT 1
12210: PPUSH
12211: CALL 15460 0 1
12215: IFFALSE 12331
// begin DialogueOn ;
12217: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12230: LD_INT 10
12232: PPUSH
12233: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_STRING D5b-Sol1-1
12247: PPUSH
12248: CALL 15638 0 2
12252: ST_TO_ADDR
// if not un then
12253: LD_VAR 0 3
12257: NOT
12258: IFFALSE 12276
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 2
12267: PPUSH
12268: LD_STRING D5b-FSol1-1
12270: PPUSH
12271: CALL 15638 0 2
12275: ST_TO_ADDR
// if un then
12276: LD_VAR 0 3
12280: IFFALSE 12325
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12282: LD_ADDR_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_STRING D5b-Sol2-1
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: CALL 15864 0 3
12302: ST_TO_ADDR
// if not un2 then
12303: LD_VAR 0 4
12307: NOT
12308: IFFALSE 12325
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12310: LD_INT 2
12312: PPUSH
12313: LD_STRING D5b-FSol2-1
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: CALL 15864 0 3
// end ; DialogueOff ;
12325: CALL_OW 7
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12170
12333: POP
12334: POP
// end ; if not seen [ 3 ] then
12335: LD_EXP 9
12339: PUSH
12340: LD_INT 3
12342: ARRAY
12343: NOT
12344: IFFALSE 12518
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 33
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if tmp then
12380: LD_VAR 0 2
12384: IFFALSE 12518
// for i in tmp do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12516
// if See ( 1 , i ) then
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 292
12411: IFFALSE 12514
// begin seen := Replace ( seen , 3 , true ) ;
12413: LD_ADDR_EXP 9
12417: PUSH
12418: LD_EXP 9
12422: PPUSH
12423: LD_INT 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 1
12433: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12434: LD_INT 1
12436: PPUSH
12437: CALL 15460 0 1
12441: IFFALSE 12514
// begin DialogueOn ;
12443: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12456: LD_INT 10
12458: PPUSH
12459: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_STRING D8-Sol1-1
12473: PPUSH
12474: CALL 15638 0 2
12478: ST_TO_ADDR
// if not un then
12479: LD_VAR 0 3
12483: NOT
12484: IFFALSE 12496
// SayRand ( sex_female , D8-FSol1-1 ) ;
12486: LD_INT 2
12488: PPUSH
12489: LD_STRING D8-FSol1-1
12491: PPUSH
12492: CALL 15638 0 2
// Say ( JMM , D8-JMM-1 ) ;
12496: LD_EXP 20
12500: PPUSH
12501: LD_STRING D8-JMM-1
12503: PPUSH
12504: CALL_OW 88
// DialogueOff ;
12508: CALL_OW 7
// break ;
12512: GO 12516
// end ; end ;
12514: GO 12396
12516: POP
12517: POP
// end ; if not seen [ 4 ] then
12518: LD_EXP 9
12522: PUSH
12523: LD_INT 4
12525: ARRAY
12526: NOT
12527: IFFALSE 12689
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 33
12546: PUSH
12547: LD_INT 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: ST_TO_ADDR
// if tmp then
12563: LD_VAR 0 2
12567: IFFALSE 12689
// for i in tmp do
12569: LD_ADDR_VAR 0 1
12573: PUSH
12574: LD_VAR 0 2
12578: PUSH
12579: FOR_IN
12580: IFFALSE 12687
// if See ( 1 , i ) then
12582: LD_INT 1
12584: PPUSH
12585: LD_VAR 0 1
12589: PPUSH
12590: CALL_OW 292
12594: IFFALSE 12685
// begin seen := Replace ( seen , 4 , true ) ;
12596: LD_ADDR_EXP 9
12600: PUSH
12601: LD_EXP 9
12605: PPUSH
12606: LD_INT 4
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 1
12616: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12617: LD_INT 1
12619: PPUSH
12620: CALL 15460 0 1
12624: IFFALSE 12685
// begin DialogueOn ;
12626: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12639: LD_INT 10
12641: PPUSH
12642: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 1
12653: PPUSH
12654: LD_STRING D5a-Sol1-1
12656: PPUSH
12657: CALL 15638 0 2
12661: ST_TO_ADDR
// if not un then
12662: LD_VAR 0 3
12666: NOT
12667: IFFALSE 12679
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12669: LD_INT 2
12671: PPUSH
12672: LD_STRING D5a-FSol1-1
12674: PPUSH
12675: CALL 15638 0 2
// DialogueOff ;
12679: CALL_OW 7
// break ;
12683: GO 12687
// end ; end ;
12685: GO 12579
12687: POP
12688: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12689: LD_EXP 9
12693: PUSH
12694: LD_INT 5
12696: ARRAY
12697: NOT
12698: PUSH
12699: LD_EXP 9
12703: PUSH
12704: LD_INT 3
12706: ARRAY
12707: AND
12708: IFFALSE 12882
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 34
12727: PUSH
12728: LD_INT 31
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: ST_TO_ADDR
// if tmp then
12744: LD_VAR 0 2
12748: IFFALSE 12882
// for i in tmp do
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: FOR_IN
12761: IFFALSE 12880
// if See ( 1 , i ) then
12763: LD_INT 1
12765: PPUSH
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 292
12775: IFFALSE 12878
// begin seen := Replace ( seen , 5 , true ) ;
12777: LD_ADDR_EXP 9
12781: PUSH
12782: LD_EXP 9
12786: PPUSH
12787: LD_INT 5
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 1
12797: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12798: LD_INT 1
12800: PPUSH
12801: CALL 15460 0 1
12805: IFFALSE 12878
// begin DialogueOn ;
12807: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12811: LD_VAR 0 1
12815: PPUSH
12816: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12820: LD_INT 10
12822: PPUSH
12823: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D8a-Sol2-1
12837: PPUSH
12838: CALL 15638 0 2
12842: ST_TO_ADDR
// if not un then
12843: LD_VAR 0 3
12847: NOT
12848: IFFALSE 12860
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_STRING D8a-FSol2-1
12855: PPUSH
12856: CALL 15638 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12860: LD_EXP 20
12864: PPUSH
12865: LD_STRING D8a-JMM-1
12867: PPUSH
12868: CALL_OW 88
// DialogueOff ;
12872: CALL_OW 7
// break ;
12876: GO 12880
// end ; end ;
12878: GO 12760
12880: POP
12881: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12882: LD_EXP 9
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PUSH
12891: LD_EXP 9
12895: PUSH
12896: LD_INT 2
12898: ARRAY
12899: AND
12900: PUSH
12901: LD_EXP 9
12905: PUSH
12906: LD_INT 3
12908: ARRAY
12909: AND
12910: PUSH
12911: LD_EXP 9
12915: PUSH
12916: LD_INT 4
12918: ARRAY
12919: AND
12920: PUSH
12921: LD_EXP 9
12925: PUSH
12926: LD_INT 5
12928: ARRAY
12929: AND
12930: IFFALSE 12933
// disable ;
12932: DISABLE
// end ;
12933: PPOPN 4
12935: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12936: LD_EXP 10
12940: PUSH
12941: LD_EXP 11
12945: AND
12946: IFFALSE 13144
12948: GO 12950
12950: DISABLE
12951: LD_INT 0
12953: PPUSH
// begin DialogueOn ;
12954: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12958: LD_EXP 11
12962: PPUSH
12963: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_STRING D5c-Sol1-1
12977: PPUSH
12978: CALL 15638 0 2
12982: ST_TO_ADDR
// if not un then
12983: LD_VAR 0 1
12987: NOT
12988: IFFALSE 13006
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 2
12997: PPUSH
12998: LD_STRING D5c-FSol1-1
13000: PPUSH
13001: CALL 15638 0 2
13005: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13006: LD_EXP 20
13010: PPUSH
13011: LD_STRING D5c-JMM-1
13013: PPUSH
13014: CALL_OW 88
// if IsOk ( Lisa ) then
13018: LD_EXP 21
13022: PPUSH
13023: CALL_OW 302
13027: IFFALSE 13043
// Say ( Lisa , D5d-Lisa-1 ) else
13029: LD_EXP 21
13033: PPUSH
13034: LD_STRING D5d-Lisa-1
13036: PPUSH
13037: CALL_OW 88
13041: GO 13128
// if IsOk ( Cyrus ) then
13043: LD_EXP 24
13047: PPUSH
13048: CALL_OW 302
13052: IFFALSE 13068
// Say ( Cyrus , D5d-Cyrus-1 ) else
13054: LD_EXP 24
13058: PPUSH
13059: LD_STRING D5d-Cyrus-1
13061: PPUSH
13062: CALL_OW 88
13066: GO 13128
// if IsOk ( Gary ) then
13068: LD_EXP 31
13072: PPUSH
13073: CALL_OW 302
13077: IFFALSE 13093
// Say ( Gary , D5d-Gary-1 ) else
13079: LD_EXP 31
13083: PPUSH
13084: LD_STRING D5d-Gary-1
13086: PPUSH
13087: CALL_OW 88
13091: GO 13128
// if GetSex ( un ) = sex_male then
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 258
13102: PUSH
13103: LD_INT 1
13105: EQUAL
13106: IFFALSE 13122
// Say ( un , D5d-Sol1-1 ) else
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_STRING D5d-Sol1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13128
// begin DialogueOff ;
13122: CALL_OW 7
// exit ;
13126: GO 13144
// end ; Say ( JMM , D5d-JMM-1 ) ;
13128: LD_EXP 20
13132: PPUSH
13133: LD_STRING D5d-JMM-1
13135: PPUSH
13136: CALL_OW 88
// DialogueOff ;
13140: CALL_OW 7
// end ;
13144: PPOPN 1
13146: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 17
13152: PPUSH
13153: CALL_OW 294
13157: PUSH
13158: LD_INT 2
13160: GREATEREQUAL
13161: IFFALSE 13282
13163: GO 13165
13165: DISABLE
13166: LD_INT 0
13168: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13169: LD_INT 10
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: LD_INT 10
13180: NEG
13181: PPUSH
13182: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13186: LD_INT 10
13188: PPUSH
13189: LD_INT 5
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13199: LD_INT 10
13201: PPUSH
13202: LD_INT 5
13204: PPUSH
13205: CALL_OW 86
// DialogueOn ;
13209: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13213: LD_ADDR_VAR 0 1
13217: PUSH
13218: LD_INT 1
13220: PPUSH
13221: LD_STRING D6-Sci1-1
13223: PPUSH
13224: CALL 15638 0 2
13228: ST_TO_ADDR
// if un then
13229: LD_VAR 0 1
13233: IFFALSE 13271
// begin Say ( JMM , D6-JMM-1 ) ;
13235: LD_EXP 20
13239: PPUSH
13240: LD_STRING D6-JMM-1
13242: PPUSH
13243: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13247: LD_VAR 0 1
13251: PPUSH
13252: LD_STRING D6-Sci1-2
13254: PPUSH
13255: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13259: LD_EXP 20
13263: PPUSH
13264: LD_STRING D6-JMM-2
13266: PPUSH
13267: CALL_OW 88
// end ; DialogueOff ;
13271: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13275: LD_STRING M3
13277: PPUSH
13278: CALL_OW 337
// end ;
13282: PPOPN 1
13284: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13285: LD_OWVAR 1
13289: PUSH
13290: LD_INT 42000
13292: GREATEREQUAL
13293: PUSH
13294: LD_INT 2
13296: PPUSH
13297: LD_INT 169
13299: PPUSH
13300: LD_INT 90
13302: PPUSH
13303: LD_INT 10
13305: PPUSH
13306: CALL 54577 0 4
13310: PUSH
13311: LD_INT 4
13313: ARRAY
13314: PUSH
13315: LD_INT 0
13317: EQUAL
13318: PUSH
13319: LD_INT 45
13321: PPUSH
13322: CALL_OW 301
13326: OR
13327: PUSH
13328: LD_INT 45
13330: PPUSH
13331: CALL_OW 255
13335: PUSH
13336: LD_INT 1
13338: EQUAL
13339: OR
13340: AND
13341: PUSH
13342: LD_INT 94
13344: PPUSH
13345: CALL_OW 301
13349: NOT
13350: AND
13351: IFFALSE 14477
13353: GO 13355
13355: DISABLE
13356: LD_INT 0
13358: PPUSH
13359: PPUSH
13360: PPUSH
13361: PPUSH
// begin uc_side := 5 ;
13362: LD_ADDR_OWVAR 20
13366: PUSH
13367: LD_INT 5
13369: ST_TO_ADDR
// uc_nation := 2 ;
13370: LD_ADDR_OWVAR 21
13374: PUSH
13375: LD_INT 2
13377: ST_TO_ADDR
// InitHc ;
13378: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13382: LD_INT 1
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 8
13390: PPUSH
13391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13395: LD_ADDR_OWVAR 29
13399: PUSH
13400: LD_INT 12
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING SecondCharsGal
13417: ST_TO_ADDR
// hc_face_number := 7 ;
13418: LD_ADDR_OWVAR 34
13422: PUSH
13423: LD_INT 7
13425: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13426: LD_ADDR_EXP 45
13430: PUSH
13431: CALL_OW 44
13435: ST_TO_ADDR
// InitHc ;
13436: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 16
13445: PPUSH
13446: LD_INT 2
13448: PPUSH
13449: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13453: LD_ADDR_OWVAR 29
13457: PUSH
13458: LD_INT 12
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: ST_TO_ADDR
// hc_name :=  ;
13468: LD_ADDR_OWVAR 26
13472: PUSH
13473: LD_STRING 
13475: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13476: LD_ADDR_EXP 46
13480: PUSH
13481: CALL_OW 44
13485: ST_TO_ADDR
// InitHc ;
13486: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// until not InBattle ( 1 ) ;
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 463
13504: NOT
13505: IFFALSE 13490
// wait ( 0 0$5 ) ;
13507: LD_INT 175
13509: PPUSH
13510: CALL_OW 67
// DialogueOn ;
13514: CALL_OW 6
// InGameOn ;
13518: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 22
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 25
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 25
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 8
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: PUSH
13618: LD_EXP 20
13622: PUSH
13623: LD_EXP 21
13627: PUSH
13628: LD_EXP 22
13632: PUSH
13633: LD_EXP 23
13637: PUSH
13638: LD_EXP 24
13642: PUSH
13643: LD_EXP 25
13647: PUSH
13648: LD_EXP 26
13652: PUSH
13653: LD_EXP 27
13657: PUSH
13658: LD_EXP 28
13662: PUSH
13663: LD_EXP 30
13667: PUSH
13668: LD_EXP 31
13672: PUSH
13673: LD_EXP 32
13677: PUSH
13678: LD_EXP 33
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: DIFF
13698: PPUSH
13699: LD_INT 26
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 72
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: ST_TO_ADDR
// if not un and Brown then
13718: LD_VAR 0 1
13722: NOT
13723: PUSH
13724: LD_EXP 26
13728: AND
13729: IFFALSE 13741
// un := Brown ;
13731: LD_ADDR_VAR 0 1
13735: PUSH
13736: LD_EXP 26
13740: ST_TO_ADDR
// if un then
13741: LD_VAR 0 1
13745: IFFALSE 13771
// begin Say ( un , D7-Sol1-1 ) ;
13747: LD_VAR 0 1
13751: PPUSH
13752: LD_STRING D7-Sol1-1
13754: PPUSH
13755: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13759: LD_EXP 20
13763: PPUSH
13764: LD_STRING D7-JMM-1
13766: PPUSH
13767: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13771: LD_EXP 45
13775: PPUSH
13776: LD_STRING D7-Ar1-1
13778: PPUSH
13779: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13783: LD_EXP 20
13787: PPUSH
13788: LD_STRING D7-JMM-2
13790: PPUSH
13791: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13795: LD_EXP 45
13799: PPUSH
13800: LD_STRING D7-Ar1-2
13802: PPUSH
13803: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13807: LD_EXP 20
13811: PPUSH
13812: LD_STRING D7-JMM-3
13814: PPUSH
13815: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13819: LD_EXP 45
13823: PPUSH
13824: LD_STRING D7-Ar1-3
13826: PPUSH
13827: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13831: LD_EXP 20
13835: PPUSH
13836: LD_STRING D7-JMM-4
13838: PPUSH
13839: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13843: LD_EXP 45
13847: PPUSH
13848: LD_STRING D7-Ar1-4
13850: PPUSH
13851: CALL_OW 94
// InGameOff ;
13855: CALL_OW 9
// DialogueOff ;
13859: CALL_OW 7
// case Query ( QCameras ) of 1 :
13863: LD_STRING QCameras
13865: PPUSH
13866: CALL_OW 97
13870: PUSH
13871: LD_INT 1
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 13882
13879: POP
// ; 2 :
13880: GO 13896
13882: LD_INT 2
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13895
13890: POP
// exit ; end ;
13891: GO 14477
13893: GO 13896
13895: POP
// ChangeMissionObjectives ( MCar ) ;
13896: LD_STRING MCar
13898: PPUSH
13899: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13903: LD_INT 124
13905: PPUSH
13906: LD_INT 90
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 6
13914: NEG
13915: PPUSH
13916: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13920: LD_INT 124
13922: PPUSH
13923: LD_INT 90
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13933: LD_INT 12
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 424
// wait ( 3 ) ;
13943: LD_INT 3
13945: PPUSH
13946: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13950: LD_INT 124
13952: PPUSH
13953: LD_INT 90
13955: PPUSH
13956: CALL_OW 86
// cargo := false ;
13960: LD_ADDR_VAR 0 3
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_INT 12
13982: PPUSH
13983: LD_INT 32
13985: PUSH
13986: LD_INT 3
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: LD_INT 32
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 58
14005: PUSH
14006: EMPTY
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 70
14018: ST_TO_ADDR
// until cargo ;
14019: LD_VAR 0 3
14023: IFFALSE 13968
// cargo := cargo [ 1 ] ;
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14039: LD_VAR 0 3
14043: PPUSH
14044: LD_INT 5
14046: PPUSH
14047: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14051: LD_INT 12
14053: PPUSH
14054: LD_INT 0
14056: PPUSH
14057: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14061: LD_EXP 45
14065: PPUSH
14066: LD_INT 11
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14076: LD_EXP 46
14080: PPUSH
14081: LD_INT 11
14083: PPUSH
14084: LD_INT 0
14086: PPUSH
14087: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14091: LD_EXP 45
14095: PUSH
14096: LD_EXP 46
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: LD_INT 12
14107: PPUSH
14108: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14112: LD_EXP 45
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14126: LD_EXP 45
14130: PUSH
14131: LD_EXP 46
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: LD_INT 209
14142: PPUSH
14143: LD_INT 178
14145: PPUSH
14146: CALL_OW 171
// while ( true ) do
14150: LD_INT 1
14152: IFFALSE 14306
// begin wait ( 0 0$1 ) ;
14154: LD_INT 35
14156: PPUSH
14157: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14161: LD_EXP 45
14165: PPUSH
14166: CALL_OW 314
14170: NOT
14171: PUSH
14172: LD_EXP 46
14176: PPUSH
14177: CALL_OW 314
14181: NOT
14182: OR
14183: IFFALSE 14209
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14185: LD_EXP 45
14189: PUSH
14190: LD_EXP 46
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PPUSH
14199: LD_INT 209
14201: PPUSH
14202: LD_INT 178
14204: PPUSH
14205: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14209: LD_EXP 45
14213: PPUSH
14214: LD_INT 10
14216: PPUSH
14217: CALL_OW 308
14221: IFFALSE 14232
// RemoveUnit ( ar_mechanic ) ;
14223: LD_EXP 45
14227: PPUSH
14228: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14232: LD_EXP 46
14236: PPUSH
14237: LD_INT 10
14239: PPUSH
14240: CALL_OW 308
14244: IFFALSE 14255
// RemoveUnit ( ar_mechanic_friend ) ;
14246: LD_EXP 46
14250: PPUSH
14251: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 10
14262: PPUSH
14263: CALL_OW 308
14267: IFFALSE 14278
// RemoveUnit ( cargo ) ;
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14278: LD_EXP 45
14282: PPUSH
14283: CALL_OW 300
14287: NOT
14288: PUSH
14289: LD_EXP 46
14293: PPUSH
14294: CALL_OW 300
14298: NOT
14299: AND
14300: IFFALSE 14304
// break ;
14302: GO 14306
// end ;
14304: GO 14150
// wait ( 0 0$2 ) ;
14306: LD_INT 70
14308: PPUSH
14309: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14313: LD_EXP 45
14317: PPUSH
14318: LD_STRING D7a-Ar1-1
14320: PPUSH
14321: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 129
14332: PUSH
14333: LD_INT 10
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 103
14342: PUSH
14343: LD_INT 6
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 148
14352: PUSH
14353: LD_INT 47
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 155
14362: PUSH
14363: LD_INT 16
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
// if Difficulty = 1 then
14376: LD_OWVAR 67
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: IFFALSE 14421
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14386: LD_ADDR_VAR 0 4
14390: PUSH
14391: LD_VAR 0 4
14395: PUSH
14396: LD_INT 78
14398: PUSH
14399: LD_INT 7
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 104
14408: PUSH
14409: LD_INT 43
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: ADD
14420: ST_TO_ADDR
// for i in tmp do
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 4
14430: PUSH
14431: FOR_IN
14432: IFFALSE 14465
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14434: LD_VAR 0 2
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 2
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: LD_INT 9
14457: NEG
14458: PPUSH
14459: CALL_OW 330
14463: GO 14431
14465: POP
14466: POP
// CenterOnXY ( 129 , 10 ) ;
14467: LD_INT 129
14469: PPUSH
14470: LD_INT 10
14472: PPUSH
14473: CALL_OW 84
// end ;
14477: PPOPN 4
14479: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14480: LD_EXP 15
14484: PUSH
14485: LD_INT 21000
14487: MINUS
14488: PUSH
14489: LD_OWVAR 1
14493: LESSEQUAL
14494: IFFALSE 14534
14496: GO 14498
14498: DISABLE
// begin powell_warn := true ;
14499: LD_ADDR_EXP 16
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// DialogueOn ;
14507: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14511: LD_EXP 29
14515: PPUSH
14516: LD_STRING D9-Pow-1
14518: PPUSH
14519: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14523: LD_INT 10
14525: PPUSH
14526: CALL_OW 68
// DialogueOff ;
14530: CALL_OW 7
// end ;
14534: END
// every 0 0$1 trigger game_time <= tick do
14535: LD_EXP 15
14539: PUSH
14540: LD_OWVAR 1
14544: LESSEQUAL
14545: IFFALSE 14584
14547: GO 14549
14549: DISABLE
// begin DialogueOn ;
14550: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14554: LD_EXP 29
14558: PPUSH
14559: LD_STRING D9a-Pow-1
14561: PPUSH
14562: CALL_OW 94
// dwait ( 0 0$2 ) ;
14566: LD_INT 70
14568: PPUSH
14569: CALL_OW 68
// DialogueOff ;
14573: CALL_OW 7
// YouLost ( Command ) ;
14577: LD_STRING Command
14579: PPUSH
14580: CALL_OW 104
// end ;
14584: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp , m1 , m2 , m3 ;
14585: LD_INT 22
14587: PUSH
14588: LD_INT 2
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 30
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PUSH
14614: LD_INT 0
14616: EQUAL
14617: PUSH
14618: LD_EXP 20
14622: PPUSH
14623: CALL_OW 302
14627: AND
14628: IFFALSE 15457
14630: GO 14632
14632: DISABLE
14633: LD_INT 0
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
// begin m1 := false ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: LD_INT 0
14646: ST_TO_ADDR
// m2 := false ;
14647: LD_ADDR_VAR 0 3
14651: PUSH
14652: LD_INT 0
14654: ST_TO_ADDR
// m3 := false ;
14655: LD_ADDR_VAR 0 4
14659: PUSH
14660: LD_INT 0
14662: ST_TO_ADDR
// if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14663: LD_OWVAR 1
14667: PUSH
14668: LD_INT 199500
14670: PUSH
14671: LD_INT 178500
14673: PUSH
14674: LD_INT 168000
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: LD_OWVAR 67
14686: ARRAY
14687: LESS
14688: IFFALSE 14710
// begin m3 := true ;
14690: LD_ADDR_VAR 0 4
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// AddMedal ( Time1 , 1 ) ;
14698: LD_STRING Time1
14700: PPUSH
14701: LD_INT 1
14703: PPUSH
14704: CALL_OW 101
// end else
14708: GO 14741
// if not powell_warn then
14710: LD_EXP 16
14714: NOT
14715: IFFALSE 14730
// AddMedal ( Time1 , - 1 ) else
14717: LD_STRING Time1
14719: PPUSH
14720: LD_INT 1
14722: NEG
14723: PPUSH
14724: CALL_OW 101
14728: GO 14741
// AddMedal ( Time1 , - 2 ) ;
14730: LD_STRING Time1
14732: PPUSH
14733: LD_INT 2
14735: NEG
14736: PPUSH
14737: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14741: LD_EXP 17
14745: PUSH
14746: LD_INT 5
14748: PUSH
14749: LD_INT 4
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: PUSH
14760: LD_OWVAR 67
14764: ARRAY
14765: GREATEREQUAL
14766: IFFALSE 14781
// AddMedal ( Destroy , - 2 ) else
14768: LD_STRING Destroy
14770: PPUSH
14771: LD_INT 2
14773: NEG
14774: PPUSH
14775: CALL_OW 101
14779: GO 14914
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14781: LD_INT 22
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 21
14793: PUSH
14794: LD_INT 3
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 50
14803: PUSH
14804: EMPTY
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 69
14816: PUSH
14817: LD_INT 25
14819: GREATEREQUAL
14820: IFFALSE 14835
// AddMedal ( Destroy , - 1 ) else
14822: LD_STRING Destroy
14824: PPUSH
14825: LD_INT 1
14827: NEG
14828: PPUSH
14829: CALL_OW 101
14833: GO 14914
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14835: LD_INT 22
14837: PUSH
14838: LD_INT 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 21
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 50
14857: PUSH
14858: EMPTY
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: PUSH
14871: LD_INT 15
14873: GREATEREQUAL
14874: IFFALSE 14896
// begin m1 := true ;
14876: LD_ADDR_VAR 0 2
14880: PUSH
14881: LD_INT 1
14883: ST_TO_ADDR
// AddMedal ( Destroy , 1 ) ;
14884: LD_STRING Destroy
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 101
// end else
14894: GO 14914
// begin m1 := true ;
14896: LD_ADDR_VAR 0 2
14900: PUSH
14901: LD_INT 1
14903: ST_TO_ADDR
// AddMedal ( Destroy , 2 ) ;
14904: LD_STRING Destroy
14906: PPUSH
14907: LD_INT 2
14909: PPUSH
14910: CALL_OW 101
// end ; SaveVariable ( artifact_get , 11_artifact_captured ) ;
14914: LD_EXP 13
14918: PPUSH
14919: LD_STRING 11_artifact_captured
14921: PPUSH
14922: CALL_OW 39
// if artifact_get then
14926: LD_EXP 13
14930: IFFALSE 14952
// begin m2 := true ;
14932: LD_ADDR_VAR 0 3
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
14940: LD_STRING Artefact
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: CALL_OW 101
// end else
14950: GO 14963
// AddMedal ( Artefact , - 1 ) ;
14952: LD_STRING Artefact
14954: PPUSH
14955: LD_INT 1
14957: NEG
14958: PPUSH
14959: CALL_OW 101
// if m1 and m2 and m3 and Difficulty = 3 then
14963: LD_VAR 0 2
14967: PUSH
14968: LD_VAR 0 3
14972: AND
14973: PUSH
14974: LD_VAR 0 4
14978: AND
14979: PUSH
14980: LD_OWVAR 67
14984: PUSH
14985: LD_INT 3
14987: EQUAL
14988: AND
14989: IFFALSE 15001
// SetAchievementEX ( ACH_AMER , 11 ) ;
14991: LD_STRING ACH_AMER
14993: PPUSH
14994: LD_INT 11
14996: PPUSH
14997: CALL_OW 564
// GiveMedals ( MAIN ) ;
15001: LD_STRING MAIN
15003: PPUSH
15004: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
15008: LD_ADDR_EXP 19
15012: PUSH
15013: LD_EXP 19
15017: PPUSH
15018: LD_INT 51
15020: PUSH
15021: EMPTY
15022: LIST
15023: PPUSH
15024: CALL_OW 72
15028: ST_TO_ADDR
// tmp := JMM ^ selected ;
15029: LD_ADDR_VAR 0 1
15033: PUSH
15034: LD_EXP 20
15038: PUSH
15039: LD_EXP 19
15043: ADD
15044: ST_TO_ADDR
// RewardPeople ( tmp ) ;
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
15054: LD_VAR 0 1
15058: PUSH
15059: LD_EXP 20
15063: PUSH
15064: LD_EXP 21
15068: PUSH
15069: LD_EXP 22
15073: PUSH
15074: LD_EXP 23
15078: PUSH
15079: LD_EXP 24
15083: PUSH
15084: LD_EXP 25
15088: PUSH
15089: LD_EXP 26
15093: PUSH
15094: LD_EXP 27
15098: PUSH
15099: LD_EXP 28
15103: PUSH
15104: LD_EXP 30
15108: PUSH
15109: LD_EXP 31
15113: PUSH
15114: LD_EXP 32
15118: PUSH
15119: LD_EXP 33
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: DIFF
15139: PPUSH
15140: LD_STRING 11c_others
15142: PPUSH
15143: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15147: LD_EXP 20
15151: PPUSH
15152: LD_EXP 3
15156: PUSH
15157: LD_STRING JMM
15159: STR
15160: PPUSH
15161: CALL_OW 38
// if Lisa then
15165: LD_EXP 21
15169: IFFALSE 15189
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15171: LD_EXP 21
15175: PPUSH
15176: LD_EXP 3
15180: PUSH
15181: LD_STRING Lisa
15183: STR
15184: PPUSH
15185: CALL_OW 38
// if Donaldson then
15189: LD_EXP 22
15193: IFFALSE 15213
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15195: LD_EXP 22
15199: PPUSH
15200: LD_EXP 3
15204: PUSH
15205: LD_STRING Donaldson
15207: STR
15208: PPUSH
15209: CALL_OW 38
// if Bobby then
15213: LD_EXP 23
15217: IFFALSE 15237
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15219: LD_EXP 23
15223: PPUSH
15224: LD_EXP 3
15228: PUSH
15229: LD_STRING Bobby
15231: STR
15232: PPUSH
15233: CALL_OW 38
// if Cyrus then
15237: LD_EXP 24
15241: IFFALSE 15261
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15243: LD_EXP 24
15247: PPUSH
15248: LD_EXP 3
15252: PUSH
15253: LD_STRING Cyrus
15255: STR
15256: PPUSH
15257: CALL_OW 38
// if Denis then
15261: LD_EXP 25
15265: IFFALSE 15285
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15267: LD_EXP 25
15271: PPUSH
15272: LD_EXP 3
15276: PUSH
15277: LD_STRING Denis
15279: STR
15280: PPUSH
15281: CALL_OW 38
// if Brown then
15285: LD_EXP 26
15289: IFFALSE 15309
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15291: LD_EXP 26
15295: PPUSH
15296: LD_EXP 3
15300: PUSH
15301: LD_STRING Brown
15303: STR
15304: PPUSH
15305: CALL_OW 38
// if Gladstone then
15309: LD_EXP 27
15313: IFFALSE 15333
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15315: LD_EXP 27
15319: PPUSH
15320: LD_EXP 3
15324: PUSH
15325: LD_STRING Gladstone
15327: STR
15328: PPUSH
15329: CALL_OW 38
// if Houten then
15333: LD_EXP 28
15337: IFFALSE 15357
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15339: LD_EXP 28
15343: PPUSH
15344: LD_EXP 3
15348: PUSH
15349: LD_STRING Houten
15351: STR
15352: PPUSH
15353: CALL_OW 38
// if Cornel then
15357: LD_EXP 30
15361: IFFALSE 15381
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15363: LD_EXP 30
15367: PPUSH
15368: LD_EXP 3
15372: PUSH
15373: LD_STRING Cornell
15375: STR
15376: PPUSH
15377: CALL_OW 38
// if Gary then
15381: LD_EXP 31
15385: IFFALSE 15405
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15387: LD_EXP 31
15391: PPUSH
15392: LD_EXP 3
15396: PUSH
15397: LD_STRING Gary
15399: STR
15400: PPUSH
15401: CALL_OW 38
// if Frank then
15405: LD_EXP 32
15409: IFFALSE 15429
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15411: LD_EXP 32
15415: PPUSH
15416: LD_EXP 3
15420: PUSH
15421: LD_STRING Frank
15423: STR
15424: PPUSH
15425: CALL_OW 38
// if Kikuchi then
15429: LD_EXP 33
15433: IFFALSE 15453
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15435: LD_EXP 33
15439: PPUSH
15440: LD_EXP 3
15444: PUSH
15445: LD_STRING Kikuchi
15447: STR
15448: PPUSH
15449: CALL_OW 38
// YouWin ;
15453: CALL_OW 103
// end ;
15457: PPOPN 4
15459: END
// export function CanSayRand ( side ) ; begin
15460: LD_INT 0
15462: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_INT 52
15470: PUSH
15471: EMPTY
15472: LIST
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_VAR 0 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 2
15488: PUSH
15489: LD_INT 25
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 25
15501: PUSH
15502: LD_INT 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 25
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 4
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: PUSH
15546: LD_EXP 20
15550: PUSH
15551: LD_EXP 32
15555: PUSH
15556: LD_EXP 21
15560: PUSH
15561: LD_EXP 22
15565: PUSH
15566: LD_EXP 23
15570: PUSH
15571: LD_EXP 24
15575: PUSH
15576: LD_EXP 25
15580: PUSH
15581: LD_EXP 26
15585: PUSH
15586: LD_EXP 27
15590: PUSH
15591: LD_EXP 28
15595: PUSH
15596: LD_EXP 29
15600: PUSH
15601: LD_EXP 30
15605: PUSH
15606: LD_EXP 31
15610: PUSH
15611: LD_EXP 33
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: DIFF
15632: ST_TO_ADDR
// end ;
15633: LD_VAR 0 2
15637: RET
// export function SayRand ( sex , dial ) ; begin
15638: LD_INT 0
15640: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: LD_INT 52
15648: PUSH
15649: EMPTY
15650: LIST
15651: PUSH
15652: LD_INT 22
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 26
15664: PUSH
15665: LD_VAR 0 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: LD_INT 25
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 25
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 25
15699: PUSH
15700: LD_INT 3
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 25
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: PUSH
15735: LD_EXP 20
15739: PUSH
15740: LD_EXP 32
15744: PUSH
15745: LD_EXP 21
15749: PUSH
15750: LD_EXP 22
15754: PUSH
15755: LD_EXP 23
15759: PUSH
15760: LD_EXP 24
15764: PUSH
15765: LD_EXP 25
15769: PUSH
15770: LD_EXP 26
15774: PUSH
15775: LD_EXP 27
15779: PUSH
15780: LD_EXP 28
15784: PUSH
15785: LD_EXP 29
15789: PUSH
15790: LD_EXP 30
15794: PUSH
15795: LD_EXP 31
15799: PUSH
15800: LD_EXP 33
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: DIFF
15821: ST_TO_ADDR
// if not result then
15822: LD_VAR 0 3
15826: NOT
15827: IFFALSE 15831
// exit ;
15829: GO 15859
// result := result [ 1 ] ;
15831: LD_ADDR_VAR 0 3
15835: PUSH
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 1
15843: ARRAY
15844: ST_TO_ADDR
// Say ( result , dial ) ;
15845: LD_VAR 0 3
15849: PPUSH
15850: LD_VAR 0 2
15854: PPUSH
15855: CALL_OW 88
// end ;
15859: LD_VAR 0 3
15863: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15864: LD_INT 0
15866: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_INT 1
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 26
15884: PUSH
15885: LD_VAR 0 1
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 25
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 25
15909: PUSH
15910: LD_INT 2
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 25
15919: PUSH
15920: LD_INT 3
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 25
15929: PUSH
15930: LD_INT 4
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: PPUSH
15949: CALL_OW 69
15953: PUSH
15954: LD_EXP 20
15958: PUSH
15959: LD_EXP 32
15963: PUSH
15964: LD_EXP 21
15968: PUSH
15969: LD_EXP 22
15973: PUSH
15974: LD_EXP 23
15978: PUSH
15979: LD_EXP 24
15983: PUSH
15984: LD_EXP 25
15988: PUSH
15989: LD_EXP 26
15993: PUSH
15994: LD_EXP 27
15998: PUSH
15999: LD_EXP 28
16003: PUSH
16004: LD_EXP 29
16008: PUSH
16009: LD_EXP 30
16013: PUSH
16014: LD_EXP 31
16018: PUSH
16019: LD_EXP 33
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: PUSH
16040: LD_VAR 0 3
16044: ADD
16045: DIFF
16046: ST_TO_ADDR
// if not result then
16047: LD_VAR 0 4
16051: NOT
16052: IFFALSE 16056
// exit ;
16054: GO 16084
// result := result [ 1 ] ;
16056: LD_ADDR_VAR 0 4
16060: PUSH
16061: LD_VAR 0 4
16065: PUSH
16066: LD_INT 1
16068: ARRAY
16069: ST_TO_ADDR
// Say ( result , dial ) ;
16070: LD_VAR 0 4
16074: PPUSH
16075: LD_VAR 0 2
16079: PPUSH
16080: CALL_OW 88
// end ; end_of_file
16084: LD_VAR 0 4
16088: RET
// export function CustomEvent ( event ) ; begin
16089: LD_INT 0
16091: PPUSH
// end ;
16092: LD_VAR 0 2
16096: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 255
16106: PUSH
16107: LD_INT 1
16109: EQUAL
16110: IFFALSE 16120
// artifact_get := true ;
16112: LD_ADDR_EXP 13
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 255
16129: PUSH
16130: LD_INT 2
16132: EQUAL
16133: IFFALSE 16151
// begin artifact_get := false ;
16135: LD_ADDR_EXP 13
16139: PUSH
16140: LD_INT 0
16142: ST_TO_ADDR
// artifact_stolen := true ;
16143: LD_ADDR_EXP 12
16147: PUSH
16148: LD_INT 1
16150: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16151: LD_ADDR_EXP 14
16155: PUSH
16156: LD_INT 1
16158: ST_TO_ADDR
// end ;
16159: PPOPN 2
16161: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16162: LD_ADDR_EXP 14
16166: PUSH
16167: LD_INT 0
16169: ST_TO_ADDR
// end ;
16170: PPOPN 2
16172: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16173: LD_VAR 0 1
16177: PUSH
16178: LD_EXP 20
16182: EQUAL
16183: IFFALSE 16194
// begin YouLost ( JMM ) ;
16185: LD_STRING JMM
16187: PPUSH
16188: CALL_OW 104
// exit ;
16192: GO 16326
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16194: LD_VAR 0 1
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 21
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: LD_INT 25
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 25
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 25
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 25
16254: PUSH
16255: LD_INT 4
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 25
16264: PUSH
16265: LD_INT 5
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 25
16274: PUSH
16275: LD_INT 8
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: PPUSH
16296: CALL_OW 69
16300: IN
16301: IFFALSE 16317
// loses_counter := loses_counter + 1 ;
16303: LD_ADDR_EXP 17
16307: PUSH
16308: LD_EXP 17
16312: PUSH
16313: LD_INT 1
16315: PLUS
16316: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL 43775 0 1
// end ;
16326: PPOPN 1
16328: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16329: LD_VAR 0 1
16333: PPUSH
16334: LD_VAR 0 2
16338: PPUSH
16339: CALL 45975 0 2
// end ;
16343: PPOPN 2
16345: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL 45284 0 1
// end ;
16355: PPOPN 1
16357: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_VAR 0 2
16367: PPUSH
16368: LD_VAR 0 3
16372: PPUSH
16373: LD_VAR 0 4
16377: PPUSH
16378: LD_VAR 0 5
16382: PPUSH
16383: CALL 43091 0 5
// end ;
16387: PPOPN 5
16389: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16390: LD_VAR 0 1
16394: PPUSH
16395: LD_VAR 0 2
16399: PPUSH
16400: CALL 42687 0 2
// end ;
16404: PPOPN 2
16406: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 247
16416: PUSH
16417: LD_INT 2
16419: EQUAL
16420: IFFALSE 16424
// exit ;
16422: GO 16441
// if not kamikazed then
16424: LD_EXP 11
16428: NOT
16429: IFFALSE 16441
// kamikazed := unit ;
16431: LD_ADDR_EXP 11
16435: PUSH
16436: LD_VAR 0 1
16440: ST_TO_ADDR
// end ;
16441: PPOPN 1
16443: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16444: LD_INT 0
16446: PPUSH
16447: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16448: LD_VAR 0 1
16452: PPUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_VAR 0 3
16462: PPUSH
16463: LD_VAR 0 4
16467: PPUSH
16468: CALL 42525 0 4
// end ;
16472: PPOPN 6
16474: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_VAR 0 3
16489: PPUSH
16490: CALL 42300 0 3
// end ;
16494: PPOPN 3
16496: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: CALL 43471 0 2
// end ;
16511: PPOPN 2
16513: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16514: LD_VAR 0 1
16518: PPUSH
16519: LD_VAR 0 2
16523: PPUSH
16524: CALL 41994 0 2
// end ;
16528: PPOPN 2
16530: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16531: LD_VAR 0 1
16535: PPUSH
16536: LD_VAR 0 2
16540: PPUSH
16541: CALL 42185 0 2
// end ;
16545: PPOPN 2
16547: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL 45043 0 1
// end ;
16557: PPOPN 1
16559: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16560: LD_VAR 0 1
16564: PPUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL 46236 0 2
// end ;
16574: PPOPN 2
16576: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16577: LD_VAR 0 1
16581: PPUSH
16582: LD_VAR 0 2
16586: PPUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: LD_VAR 0 4
16596: PPUSH
16597: CALL 46452 0 4
// end ;
16601: PPOPN 4
16603: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL 89748 0 1
// end ; end_of_file
16613: PPOPN 1
16615: END
// every 0 0$1 trigger game do
16616: LD_EXP 2
16620: IFFALSE 16650
16622: GO 16624
16624: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16625: LD_INT 7
16627: PUSH
16628: LD_INT 6
16630: PUSH
16631: LD_INT 4
16633: PUSH
16634: LD_INT 6
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: PPUSH
16643: LD_INT 1750
16645: PPUSH
16646: CALL 16651 0 2
16650: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16651: LD_INT 0
16653: PPUSH
16654: PPUSH
16655: PPUSH
// if not areas then
16656: LD_VAR 0 1
16660: NOT
16661: IFFALSE 16665
// exit ;
16663: GO 16795
// repeat wait ( time ) ;
16665: LD_VAR 0 2
16669: PPUSH
16670: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16674: LD_ADDR_VAR 0 5
16678: PUSH
16679: LD_INT 1
16681: PPUSH
16682: LD_INT 90
16684: PPUSH
16685: CALL_OW 12
16689: ST_TO_ADDR
// for i in areas do
16690: LD_ADDR_VAR 0 4
16694: PUSH
16695: LD_VAR 0 1
16699: PUSH
16700: FOR_IN
16701: IFFALSE 16754
// begin if Prob ( p ) then
16703: LD_VAR 0 5
16707: PPUSH
16708: CALL_OW 13
16712: IFFALSE 16752
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16714: LD_INT 1
16716: PPUSH
16717: LD_INT 5
16719: PPUSH
16720: CALL_OW 12
16724: PPUSH
16725: LD_VAR 0 4
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16737: LD_INT 385
16739: PPUSH
16740: LD_INT 595
16742: PPUSH
16743: CALL_OW 12
16747: PPUSH
16748: CALL_OW 67
// end ; end ;
16752: GO 16700
16754: POP
16755: POP
// time := time + 0 0$3 ;
16756: LD_ADDR_VAR 0 2
16760: PUSH
16761: LD_VAR 0 2
16765: PUSH
16766: LD_INT 105
16768: PLUS
16769: ST_TO_ADDR
// if time > 7 7$00 then
16770: LD_VAR 0 2
16774: PUSH
16775: LD_INT 14700
16777: GREATER
16778: IFFALSE 16788
// time := 0 0$40 ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_INT 1400
16787: ST_TO_ADDR
// until not game ;
16788: LD_EXP 2
16792: NOT
16793: IFFALSE 16665
// end ; end_of_file
16795: LD_VAR 0 3
16799: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16800: LD_INT 0
16802: PPUSH
16803: PPUSH
// skirmish := false ;
16804: LD_ADDR_EXP 47
16808: PUSH
16809: LD_INT 0
16811: ST_TO_ADDR
// debug_mc := false ;
16812: LD_ADDR_EXP 48
16816: PUSH
16817: LD_INT 0
16819: ST_TO_ADDR
// mc_bases := [ ] ;
16820: LD_ADDR_EXP 49
16824: PUSH
16825: EMPTY
16826: ST_TO_ADDR
// mc_sides := [ ] ;
16827: LD_ADDR_EXP 75
16831: PUSH
16832: EMPTY
16833: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16834: LD_ADDR_EXP 50
16838: PUSH
16839: EMPTY
16840: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16841: LD_ADDR_EXP 51
16845: PUSH
16846: EMPTY
16847: ST_TO_ADDR
// mc_need_heal := [ ] ;
16848: LD_ADDR_EXP 52
16852: PUSH
16853: EMPTY
16854: ST_TO_ADDR
// mc_healers := [ ] ;
16855: LD_ADDR_EXP 53
16859: PUSH
16860: EMPTY
16861: ST_TO_ADDR
// mc_build_list := [ ] ;
16862: LD_ADDR_EXP 54
16866: PUSH
16867: EMPTY
16868: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16869: LD_ADDR_EXP 81
16873: PUSH
16874: EMPTY
16875: ST_TO_ADDR
// mc_builders := [ ] ;
16876: LD_ADDR_EXP 55
16880: PUSH
16881: EMPTY
16882: ST_TO_ADDR
// mc_construct_list := [ ] ;
16883: LD_ADDR_EXP 56
16887: PUSH
16888: EMPTY
16889: ST_TO_ADDR
// mc_turret_list := [ ] ;
16890: LD_ADDR_EXP 57
16894: PUSH
16895: EMPTY
16896: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16897: LD_ADDR_EXP 58
16901: PUSH
16902: EMPTY
16903: ST_TO_ADDR
// mc_miners := [ ] ;
16904: LD_ADDR_EXP 63
16908: PUSH
16909: EMPTY
16910: ST_TO_ADDR
// mc_mines := [ ] ;
16911: LD_ADDR_EXP 62
16915: PUSH
16916: EMPTY
16917: ST_TO_ADDR
// mc_minefields := [ ] ;
16918: LD_ADDR_EXP 64
16922: PUSH
16923: EMPTY
16924: ST_TO_ADDR
// mc_crates := [ ] ;
16925: LD_ADDR_EXP 65
16929: PUSH
16930: EMPTY
16931: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16932: LD_ADDR_EXP 66
16936: PUSH
16937: EMPTY
16938: ST_TO_ADDR
// mc_crates_area := [ ] ;
16939: LD_ADDR_EXP 67
16943: PUSH
16944: EMPTY
16945: ST_TO_ADDR
// mc_vehicles := [ ] ;
16946: LD_ADDR_EXP 68
16950: PUSH
16951: EMPTY
16952: ST_TO_ADDR
// mc_attack := [ ] ;
16953: LD_ADDR_EXP 69
16957: PUSH
16958: EMPTY
16959: ST_TO_ADDR
// mc_produce := [ ] ;
16960: LD_ADDR_EXP 70
16964: PUSH
16965: EMPTY
16966: ST_TO_ADDR
// mc_defender := [ ] ;
16967: LD_ADDR_EXP 71
16971: PUSH
16972: EMPTY
16973: ST_TO_ADDR
// mc_parking := [ ] ;
16974: LD_ADDR_EXP 73
16978: PUSH
16979: EMPTY
16980: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16981: LD_ADDR_EXP 59
16985: PUSH
16986: EMPTY
16987: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16988: LD_ADDR_EXP 61
16992: PUSH
16993: EMPTY
16994: ST_TO_ADDR
// mc_scan := [ ] ;
16995: LD_ADDR_EXP 72
16999: PUSH
17000: EMPTY
17001: ST_TO_ADDR
// mc_scan_area := [ ] ;
17002: LD_ADDR_EXP 74
17006: PUSH
17007: EMPTY
17008: ST_TO_ADDR
// mc_tech := [ ] ;
17009: LD_ADDR_EXP 76
17013: PUSH
17014: EMPTY
17015: ST_TO_ADDR
// mc_class := [ ] ;
17016: LD_ADDR_EXP 90
17020: PUSH
17021: EMPTY
17022: ST_TO_ADDR
// mc_class_case_use := [ ] ;
17023: LD_ADDR_EXP 91
17027: PUSH
17028: EMPTY
17029: ST_TO_ADDR
// end ;
17030: LD_VAR 0 1
17034: RET
// export function MC_Kill ( base ) ; begin
17035: LD_INT 0
17037: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
17038: LD_ADDR_EXP 49
17042: PUSH
17043: LD_EXP 49
17047: PPUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: EMPTY
17054: PPUSH
17055: CALL_OW 1
17059: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17060: LD_ADDR_EXP 50
17064: PUSH
17065: LD_EXP 50
17069: PPUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: EMPTY
17076: PPUSH
17077: CALL_OW 1
17081: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17082: LD_ADDR_EXP 51
17086: PUSH
17087: LD_EXP 51
17091: PPUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: EMPTY
17098: PPUSH
17099: CALL_OW 1
17103: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17104: LD_ADDR_EXP 52
17108: PUSH
17109: LD_EXP 52
17113: PPUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: EMPTY
17120: PPUSH
17121: CALL_OW 1
17125: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17126: LD_ADDR_EXP 53
17130: PUSH
17131: LD_EXP 53
17135: PPUSH
17136: LD_VAR 0 1
17140: PPUSH
17141: EMPTY
17142: PPUSH
17143: CALL_OW 1
17147: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17148: LD_ADDR_EXP 54
17152: PUSH
17153: LD_EXP 54
17157: PPUSH
17158: LD_VAR 0 1
17162: PPUSH
17163: EMPTY
17164: PPUSH
17165: CALL_OW 1
17169: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17170: LD_ADDR_EXP 55
17174: PUSH
17175: LD_EXP 55
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: EMPTY
17186: PPUSH
17187: CALL_OW 1
17191: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17192: LD_ADDR_EXP 56
17196: PUSH
17197: LD_EXP 56
17201: PPUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: EMPTY
17208: PPUSH
17209: CALL_OW 1
17213: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17214: LD_ADDR_EXP 57
17218: PUSH
17219: LD_EXP 57
17223: PPUSH
17224: LD_VAR 0 1
17228: PPUSH
17229: EMPTY
17230: PPUSH
17231: CALL_OW 1
17235: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17236: LD_ADDR_EXP 58
17240: PUSH
17241: LD_EXP 58
17245: PPUSH
17246: LD_VAR 0 1
17250: PPUSH
17251: EMPTY
17252: PPUSH
17253: CALL_OW 1
17257: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17258: LD_ADDR_EXP 59
17262: PUSH
17263: LD_EXP 59
17267: PPUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: EMPTY
17274: PPUSH
17275: CALL_OW 1
17279: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17280: LD_ADDR_EXP 60
17284: PUSH
17285: LD_EXP 60
17289: PPUSH
17290: LD_VAR 0 1
17294: PPUSH
17295: LD_INT 0
17297: PPUSH
17298: CALL_OW 1
17302: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17303: LD_ADDR_EXP 61
17307: PUSH
17308: LD_EXP 61
17312: PPUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: EMPTY
17319: PPUSH
17320: CALL_OW 1
17324: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17325: LD_ADDR_EXP 62
17329: PUSH
17330: LD_EXP 62
17334: PPUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: EMPTY
17341: PPUSH
17342: CALL_OW 1
17346: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17347: LD_ADDR_EXP 63
17351: PUSH
17352: LD_EXP 63
17356: PPUSH
17357: LD_VAR 0 1
17361: PPUSH
17362: EMPTY
17363: PPUSH
17364: CALL_OW 1
17368: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17369: LD_ADDR_EXP 64
17373: PUSH
17374: LD_EXP 64
17378: PPUSH
17379: LD_VAR 0 1
17383: PPUSH
17384: EMPTY
17385: PPUSH
17386: CALL_OW 1
17390: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17391: LD_ADDR_EXP 65
17395: PUSH
17396: LD_EXP 65
17400: PPUSH
17401: LD_VAR 0 1
17405: PPUSH
17406: EMPTY
17407: PPUSH
17408: CALL_OW 1
17412: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17413: LD_ADDR_EXP 66
17417: PUSH
17418: LD_EXP 66
17422: PPUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: EMPTY
17429: PPUSH
17430: CALL_OW 1
17434: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17435: LD_ADDR_EXP 67
17439: PUSH
17440: LD_EXP 67
17444: PPUSH
17445: LD_VAR 0 1
17449: PPUSH
17450: EMPTY
17451: PPUSH
17452: CALL_OW 1
17456: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17457: LD_ADDR_EXP 68
17461: PUSH
17462: LD_EXP 68
17466: PPUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: EMPTY
17473: PPUSH
17474: CALL_OW 1
17478: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17479: LD_ADDR_EXP 69
17483: PUSH
17484: LD_EXP 69
17488: PPUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: EMPTY
17495: PPUSH
17496: CALL_OW 1
17500: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17501: LD_ADDR_EXP 70
17505: PUSH
17506: LD_EXP 70
17510: PPUSH
17511: LD_VAR 0 1
17515: PPUSH
17516: EMPTY
17517: PPUSH
17518: CALL_OW 1
17522: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17523: LD_ADDR_EXP 71
17527: PUSH
17528: LD_EXP 71
17532: PPUSH
17533: LD_VAR 0 1
17537: PPUSH
17538: EMPTY
17539: PPUSH
17540: CALL_OW 1
17544: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17545: LD_ADDR_EXP 72
17549: PUSH
17550: LD_EXP 72
17554: PPUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: EMPTY
17561: PPUSH
17562: CALL_OW 1
17566: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17567: LD_ADDR_EXP 73
17571: PUSH
17572: LD_EXP 73
17576: PPUSH
17577: LD_VAR 0 1
17581: PPUSH
17582: EMPTY
17583: PPUSH
17584: CALL_OW 1
17588: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17589: LD_ADDR_EXP 74
17593: PUSH
17594: LD_EXP 74
17598: PPUSH
17599: LD_VAR 0 1
17603: PPUSH
17604: EMPTY
17605: PPUSH
17606: CALL_OW 1
17610: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17611: LD_ADDR_EXP 76
17615: PUSH
17616: LD_EXP 76
17620: PPUSH
17621: LD_VAR 0 1
17625: PPUSH
17626: EMPTY
17627: PPUSH
17628: CALL_OW 1
17632: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17633: LD_ADDR_EXP 78
17637: PUSH
17638: LD_EXP 78
17642: PPUSH
17643: LD_VAR 0 1
17647: PPUSH
17648: EMPTY
17649: PPUSH
17650: CALL_OW 1
17654: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17655: LD_ADDR_EXP 79
17659: PUSH
17660: LD_EXP 79
17664: PPUSH
17665: LD_VAR 0 1
17669: PPUSH
17670: EMPTY
17671: PPUSH
17672: CALL_OW 1
17676: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17677: LD_ADDR_EXP 80
17681: PUSH
17682: LD_EXP 80
17686: PPUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: EMPTY
17693: PPUSH
17694: CALL_OW 1
17698: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17699: LD_ADDR_EXP 81
17703: PUSH
17704: LD_EXP 81
17708: PPUSH
17709: LD_VAR 0 1
17713: PPUSH
17714: EMPTY
17715: PPUSH
17716: CALL_OW 1
17720: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17721: LD_ADDR_EXP 82
17725: PUSH
17726: LD_EXP 82
17730: PPUSH
17731: LD_VAR 0 1
17735: PPUSH
17736: EMPTY
17737: PPUSH
17738: CALL_OW 1
17742: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17743: LD_ADDR_EXP 83
17747: PUSH
17748: LD_EXP 83
17752: PPUSH
17753: LD_VAR 0 1
17757: PPUSH
17758: EMPTY
17759: PPUSH
17760: CALL_OW 1
17764: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17765: LD_ADDR_EXP 84
17769: PUSH
17770: LD_EXP 84
17774: PPUSH
17775: LD_VAR 0 1
17779: PPUSH
17780: EMPTY
17781: PPUSH
17782: CALL_OW 1
17786: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17787: LD_ADDR_EXP 85
17791: PUSH
17792: LD_EXP 85
17796: PPUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: EMPTY
17803: PPUSH
17804: CALL_OW 1
17808: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17809: LD_ADDR_EXP 86
17813: PUSH
17814: LD_EXP 86
17818: PPUSH
17819: LD_VAR 0 1
17823: PPUSH
17824: EMPTY
17825: PPUSH
17826: CALL_OW 1
17830: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17831: LD_ADDR_EXP 87
17835: PUSH
17836: LD_EXP 87
17840: PPUSH
17841: LD_VAR 0 1
17845: PPUSH
17846: EMPTY
17847: PPUSH
17848: CALL_OW 1
17852: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17853: LD_ADDR_EXP 88
17857: PUSH
17858: LD_EXP 88
17862: PPUSH
17863: LD_VAR 0 1
17867: PPUSH
17868: EMPTY
17869: PPUSH
17870: CALL_OW 1
17874: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17875: LD_ADDR_EXP 89
17879: PUSH
17880: LD_EXP 89
17884: PPUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: EMPTY
17891: PPUSH
17892: CALL_OW 1
17896: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17897: LD_ADDR_EXP 90
17901: PUSH
17902: LD_EXP 90
17906: PPUSH
17907: LD_VAR 0 1
17911: PPUSH
17912: EMPTY
17913: PPUSH
17914: CALL_OW 1
17918: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17919: LD_ADDR_EXP 91
17923: PUSH
17924: LD_EXP 91
17928: PPUSH
17929: LD_VAR 0 1
17933: PPUSH
17934: LD_INT 0
17936: PPUSH
17937: CALL_OW 1
17941: ST_TO_ADDR
// end ;
17942: LD_VAR 0 2
17946: RET
// export function MC_Add ( side , units ) ; var base ; begin
17947: LD_INT 0
17949: PPUSH
17950: PPUSH
// base := mc_bases + 1 ;
17951: LD_ADDR_VAR 0 4
17955: PUSH
17956: LD_EXP 49
17960: PUSH
17961: LD_INT 1
17963: PLUS
17964: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
17965: LD_ADDR_EXP 75
17969: PUSH
17970: LD_EXP 75
17974: PPUSH
17975: LD_VAR 0 4
17979: PPUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 1
17989: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
17990: LD_ADDR_EXP 49
17994: PUSH
17995: LD_EXP 49
17999: PPUSH
18000: LD_VAR 0 4
18004: PPUSH
18005: LD_VAR 0 2
18009: PPUSH
18010: CALL_OW 1
18014: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
18015: LD_ADDR_EXP 50
18019: PUSH
18020: LD_EXP 50
18024: PPUSH
18025: LD_VAR 0 4
18029: PPUSH
18030: EMPTY
18031: PPUSH
18032: CALL_OW 1
18036: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
18037: LD_ADDR_EXP 51
18041: PUSH
18042: LD_EXP 51
18046: PPUSH
18047: LD_VAR 0 4
18051: PPUSH
18052: EMPTY
18053: PPUSH
18054: CALL_OW 1
18058: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
18059: LD_ADDR_EXP 52
18063: PUSH
18064: LD_EXP 52
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: EMPTY
18075: PPUSH
18076: CALL_OW 1
18080: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
18081: LD_ADDR_EXP 53
18085: PUSH
18086: LD_EXP 53
18090: PPUSH
18091: LD_VAR 0 4
18095: PPUSH
18096: EMPTY
18097: PPUSH
18098: CALL_OW 1
18102: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18103: LD_ADDR_EXP 54
18107: PUSH
18108: LD_EXP 54
18112: PPUSH
18113: LD_VAR 0 4
18117: PPUSH
18118: EMPTY
18119: PPUSH
18120: CALL_OW 1
18124: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18125: LD_ADDR_EXP 55
18129: PUSH
18130: LD_EXP 55
18134: PPUSH
18135: LD_VAR 0 4
18139: PPUSH
18140: EMPTY
18141: PPUSH
18142: CALL_OW 1
18146: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18147: LD_ADDR_EXP 56
18151: PUSH
18152: LD_EXP 56
18156: PPUSH
18157: LD_VAR 0 4
18161: PPUSH
18162: EMPTY
18163: PPUSH
18164: CALL_OW 1
18168: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18169: LD_ADDR_EXP 57
18173: PUSH
18174: LD_EXP 57
18178: PPUSH
18179: LD_VAR 0 4
18183: PPUSH
18184: EMPTY
18185: PPUSH
18186: CALL_OW 1
18190: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18191: LD_ADDR_EXP 58
18195: PUSH
18196: LD_EXP 58
18200: PPUSH
18201: LD_VAR 0 4
18205: PPUSH
18206: EMPTY
18207: PPUSH
18208: CALL_OW 1
18212: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18213: LD_ADDR_EXP 59
18217: PUSH
18218: LD_EXP 59
18222: PPUSH
18223: LD_VAR 0 4
18227: PPUSH
18228: EMPTY
18229: PPUSH
18230: CALL_OW 1
18234: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18235: LD_ADDR_EXP 60
18239: PUSH
18240: LD_EXP 60
18244: PPUSH
18245: LD_VAR 0 4
18249: PPUSH
18250: LD_INT 0
18252: PPUSH
18253: CALL_OW 1
18257: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18258: LD_ADDR_EXP 61
18262: PUSH
18263: LD_EXP 61
18267: PPUSH
18268: LD_VAR 0 4
18272: PPUSH
18273: EMPTY
18274: PPUSH
18275: CALL_OW 1
18279: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18280: LD_ADDR_EXP 62
18284: PUSH
18285: LD_EXP 62
18289: PPUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: EMPTY
18296: PPUSH
18297: CALL_OW 1
18301: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18302: LD_ADDR_EXP 63
18306: PUSH
18307: LD_EXP 63
18311: PPUSH
18312: LD_VAR 0 4
18316: PPUSH
18317: EMPTY
18318: PPUSH
18319: CALL_OW 1
18323: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18324: LD_ADDR_EXP 64
18328: PUSH
18329: LD_EXP 64
18333: PPUSH
18334: LD_VAR 0 4
18338: PPUSH
18339: EMPTY
18340: PPUSH
18341: CALL_OW 1
18345: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18346: LD_ADDR_EXP 65
18350: PUSH
18351: LD_EXP 65
18355: PPUSH
18356: LD_VAR 0 4
18360: PPUSH
18361: EMPTY
18362: PPUSH
18363: CALL_OW 1
18367: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18368: LD_ADDR_EXP 66
18372: PUSH
18373: LD_EXP 66
18377: PPUSH
18378: LD_VAR 0 4
18382: PPUSH
18383: EMPTY
18384: PPUSH
18385: CALL_OW 1
18389: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18390: LD_ADDR_EXP 67
18394: PUSH
18395: LD_EXP 67
18399: PPUSH
18400: LD_VAR 0 4
18404: PPUSH
18405: EMPTY
18406: PPUSH
18407: CALL_OW 1
18411: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18412: LD_ADDR_EXP 68
18416: PUSH
18417: LD_EXP 68
18421: PPUSH
18422: LD_VAR 0 4
18426: PPUSH
18427: EMPTY
18428: PPUSH
18429: CALL_OW 1
18433: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18434: LD_ADDR_EXP 69
18438: PUSH
18439: LD_EXP 69
18443: PPUSH
18444: LD_VAR 0 4
18448: PPUSH
18449: EMPTY
18450: PPUSH
18451: CALL_OW 1
18455: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18456: LD_ADDR_EXP 70
18460: PUSH
18461: LD_EXP 70
18465: PPUSH
18466: LD_VAR 0 4
18470: PPUSH
18471: EMPTY
18472: PPUSH
18473: CALL_OW 1
18477: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18478: LD_ADDR_EXP 71
18482: PUSH
18483: LD_EXP 71
18487: PPUSH
18488: LD_VAR 0 4
18492: PPUSH
18493: EMPTY
18494: PPUSH
18495: CALL_OW 1
18499: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18500: LD_ADDR_EXP 72
18504: PUSH
18505: LD_EXP 72
18509: PPUSH
18510: LD_VAR 0 4
18514: PPUSH
18515: EMPTY
18516: PPUSH
18517: CALL_OW 1
18521: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18522: LD_ADDR_EXP 73
18526: PUSH
18527: LD_EXP 73
18531: PPUSH
18532: LD_VAR 0 4
18536: PPUSH
18537: EMPTY
18538: PPUSH
18539: CALL_OW 1
18543: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18544: LD_ADDR_EXP 74
18548: PUSH
18549: LD_EXP 74
18553: PPUSH
18554: LD_VAR 0 4
18558: PPUSH
18559: EMPTY
18560: PPUSH
18561: CALL_OW 1
18565: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18566: LD_ADDR_EXP 76
18570: PUSH
18571: LD_EXP 76
18575: PPUSH
18576: LD_VAR 0 4
18580: PPUSH
18581: EMPTY
18582: PPUSH
18583: CALL_OW 1
18587: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18588: LD_ADDR_EXP 78
18592: PUSH
18593: LD_EXP 78
18597: PPUSH
18598: LD_VAR 0 4
18602: PPUSH
18603: EMPTY
18604: PPUSH
18605: CALL_OW 1
18609: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18610: LD_ADDR_EXP 79
18614: PUSH
18615: LD_EXP 79
18619: PPUSH
18620: LD_VAR 0 4
18624: PPUSH
18625: EMPTY
18626: PPUSH
18627: CALL_OW 1
18631: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18632: LD_ADDR_EXP 80
18636: PUSH
18637: LD_EXP 80
18641: PPUSH
18642: LD_VAR 0 4
18646: PPUSH
18647: EMPTY
18648: PPUSH
18649: CALL_OW 1
18653: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18654: LD_ADDR_EXP 81
18658: PUSH
18659: LD_EXP 81
18663: PPUSH
18664: LD_VAR 0 4
18668: PPUSH
18669: EMPTY
18670: PPUSH
18671: CALL_OW 1
18675: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18676: LD_ADDR_EXP 82
18680: PUSH
18681: LD_EXP 82
18685: PPUSH
18686: LD_VAR 0 4
18690: PPUSH
18691: EMPTY
18692: PPUSH
18693: CALL_OW 1
18697: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18698: LD_ADDR_EXP 83
18702: PUSH
18703: LD_EXP 83
18707: PPUSH
18708: LD_VAR 0 4
18712: PPUSH
18713: EMPTY
18714: PPUSH
18715: CALL_OW 1
18719: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18720: LD_ADDR_EXP 84
18724: PUSH
18725: LD_EXP 84
18729: PPUSH
18730: LD_VAR 0 4
18734: PPUSH
18735: EMPTY
18736: PPUSH
18737: CALL_OW 1
18741: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18742: LD_ADDR_EXP 85
18746: PUSH
18747: LD_EXP 85
18751: PPUSH
18752: LD_VAR 0 4
18756: PPUSH
18757: EMPTY
18758: PPUSH
18759: CALL_OW 1
18763: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18764: LD_ADDR_EXP 86
18768: PUSH
18769: LD_EXP 86
18773: PPUSH
18774: LD_VAR 0 4
18778: PPUSH
18779: EMPTY
18780: PPUSH
18781: CALL_OW 1
18785: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18786: LD_ADDR_EXP 87
18790: PUSH
18791: LD_EXP 87
18795: PPUSH
18796: LD_VAR 0 4
18800: PPUSH
18801: EMPTY
18802: PPUSH
18803: CALL_OW 1
18807: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18808: LD_ADDR_EXP 88
18812: PUSH
18813: LD_EXP 88
18817: PPUSH
18818: LD_VAR 0 4
18822: PPUSH
18823: EMPTY
18824: PPUSH
18825: CALL_OW 1
18829: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18830: LD_ADDR_EXP 89
18834: PUSH
18835: LD_EXP 89
18839: PPUSH
18840: LD_VAR 0 4
18844: PPUSH
18845: EMPTY
18846: PPUSH
18847: CALL_OW 1
18851: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18852: LD_ADDR_EXP 90
18856: PUSH
18857: LD_EXP 90
18861: PPUSH
18862: LD_VAR 0 4
18866: PPUSH
18867: EMPTY
18868: PPUSH
18869: CALL_OW 1
18873: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18874: LD_ADDR_EXP 91
18878: PUSH
18879: LD_EXP 91
18883: PPUSH
18884: LD_VAR 0 4
18888: PPUSH
18889: LD_INT 0
18891: PPUSH
18892: CALL_OW 1
18896: ST_TO_ADDR
// result := base ;
18897: LD_ADDR_VAR 0 3
18901: PUSH
18902: LD_VAR 0 4
18906: ST_TO_ADDR
// end ;
18907: LD_VAR 0 3
18911: RET
// export function MC_Start ( ) ; var i ; begin
18912: LD_INT 0
18914: PPUSH
18915: PPUSH
// for i = 1 to mc_bases do
18916: LD_ADDR_VAR 0 2
18920: PUSH
18921: DOUBLE
18922: LD_INT 1
18924: DEC
18925: ST_TO_ADDR
18926: LD_EXP 49
18930: PUSH
18931: FOR_TO
18932: IFFALSE 20009
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
18934: LD_ADDR_EXP 49
18938: PUSH
18939: LD_EXP 49
18943: PPUSH
18944: LD_VAR 0 2
18948: PPUSH
18949: LD_EXP 49
18953: PUSH
18954: LD_VAR 0 2
18958: ARRAY
18959: PUSH
18960: LD_INT 0
18962: DIFF
18963: PPUSH
18964: CALL_OW 1
18968: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
18969: LD_ADDR_EXP 50
18973: PUSH
18974: LD_EXP 50
18978: PPUSH
18979: LD_VAR 0 2
18983: PPUSH
18984: EMPTY
18985: PPUSH
18986: CALL_OW 1
18990: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
18991: LD_ADDR_EXP 51
18995: PUSH
18996: LD_EXP 51
19000: PPUSH
19001: LD_VAR 0 2
19005: PPUSH
19006: EMPTY
19007: PPUSH
19008: CALL_OW 1
19012: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
19013: LD_ADDR_EXP 52
19017: PUSH
19018: LD_EXP 52
19022: PPUSH
19023: LD_VAR 0 2
19027: PPUSH
19028: EMPTY
19029: PPUSH
19030: CALL_OW 1
19034: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
19035: LD_ADDR_EXP 53
19039: PUSH
19040: LD_EXP 53
19044: PPUSH
19045: LD_VAR 0 2
19049: PPUSH
19050: EMPTY
19051: PUSH
19052: EMPTY
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PPUSH
19058: CALL_OW 1
19062: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
19063: LD_ADDR_EXP 54
19067: PUSH
19068: LD_EXP 54
19072: PPUSH
19073: LD_VAR 0 2
19077: PPUSH
19078: EMPTY
19079: PPUSH
19080: CALL_OW 1
19084: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
19085: LD_ADDR_EXP 81
19089: PUSH
19090: LD_EXP 81
19094: PPUSH
19095: LD_VAR 0 2
19099: PPUSH
19100: EMPTY
19101: PPUSH
19102: CALL_OW 1
19106: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19107: LD_ADDR_EXP 55
19111: PUSH
19112: LD_EXP 55
19116: PPUSH
19117: LD_VAR 0 2
19121: PPUSH
19122: EMPTY
19123: PPUSH
19124: CALL_OW 1
19128: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19129: LD_ADDR_EXP 56
19133: PUSH
19134: LD_EXP 56
19138: PPUSH
19139: LD_VAR 0 2
19143: PPUSH
19144: EMPTY
19145: PPUSH
19146: CALL_OW 1
19150: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19151: LD_ADDR_EXP 57
19155: PUSH
19156: LD_EXP 57
19160: PPUSH
19161: LD_VAR 0 2
19165: PPUSH
19166: LD_EXP 49
19170: PUSH
19171: LD_VAR 0 2
19175: ARRAY
19176: PPUSH
19177: LD_INT 2
19179: PUSH
19180: LD_INT 30
19182: PUSH
19183: LD_INT 32
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 30
19192: PUSH
19193: LD_INT 33
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 72
19209: PPUSH
19210: CALL_OW 1
19214: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19215: LD_ADDR_EXP 58
19219: PUSH
19220: LD_EXP 58
19224: PPUSH
19225: LD_VAR 0 2
19229: PPUSH
19230: LD_EXP 49
19234: PUSH
19235: LD_VAR 0 2
19239: ARRAY
19240: PPUSH
19241: LD_INT 2
19243: PUSH
19244: LD_INT 30
19246: PUSH
19247: LD_INT 32
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 30
19256: PUSH
19257: LD_INT 31
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 58
19271: PUSH
19272: EMPTY
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PPUSH
19279: CALL_OW 72
19283: PPUSH
19284: CALL_OW 1
19288: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19289: LD_ADDR_EXP 59
19293: PUSH
19294: LD_EXP 59
19298: PPUSH
19299: LD_VAR 0 2
19303: PPUSH
19304: EMPTY
19305: PPUSH
19306: CALL_OW 1
19310: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19311: LD_ADDR_EXP 63
19315: PUSH
19316: LD_EXP 63
19320: PPUSH
19321: LD_VAR 0 2
19325: PPUSH
19326: EMPTY
19327: PPUSH
19328: CALL_OW 1
19332: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19333: LD_ADDR_EXP 62
19337: PUSH
19338: LD_EXP 62
19342: PPUSH
19343: LD_VAR 0 2
19347: PPUSH
19348: EMPTY
19349: PPUSH
19350: CALL_OW 1
19354: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19355: LD_ADDR_EXP 64
19359: PUSH
19360: LD_EXP 64
19364: PPUSH
19365: LD_VAR 0 2
19369: PPUSH
19370: EMPTY
19371: PPUSH
19372: CALL_OW 1
19376: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19377: LD_ADDR_EXP 65
19381: PUSH
19382: LD_EXP 65
19386: PPUSH
19387: LD_VAR 0 2
19391: PPUSH
19392: EMPTY
19393: PPUSH
19394: CALL_OW 1
19398: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19399: LD_ADDR_EXP 66
19403: PUSH
19404: LD_EXP 66
19408: PPUSH
19409: LD_VAR 0 2
19413: PPUSH
19414: EMPTY
19415: PPUSH
19416: CALL_OW 1
19420: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
19421: LD_ADDR_EXP 67
19425: PUSH
19426: LD_EXP 67
19430: PPUSH
19431: LD_VAR 0 2
19435: PPUSH
19436: EMPTY
19437: PPUSH
19438: CALL_OW 1
19442: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
19443: LD_ADDR_EXP 68
19447: PUSH
19448: LD_EXP 68
19452: PPUSH
19453: LD_VAR 0 2
19457: PPUSH
19458: EMPTY
19459: PPUSH
19460: CALL_OW 1
19464: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
19465: LD_ADDR_EXP 69
19469: PUSH
19470: LD_EXP 69
19474: PPUSH
19475: LD_VAR 0 2
19479: PPUSH
19480: EMPTY
19481: PPUSH
19482: CALL_OW 1
19486: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
19487: LD_ADDR_EXP 70
19491: PUSH
19492: LD_EXP 70
19496: PPUSH
19497: LD_VAR 0 2
19501: PPUSH
19502: EMPTY
19503: PPUSH
19504: CALL_OW 1
19508: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
19509: LD_ADDR_EXP 71
19513: PUSH
19514: LD_EXP 71
19518: PPUSH
19519: LD_VAR 0 2
19523: PPUSH
19524: EMPTY
19525: PPUSH
19526: CALL_OW 1
19530: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
19531: LD_ADDR_EXP 60
19535: PUSH
19536: LD_EXP 60
19540: PPUSH
19541: LD_VAR 0 2
19545: PPUSH
19546: LD_INT 0
19548: PPUSH
19549: CALL_OW 1
19553: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
19554: LD_ADDR_EXP 73
19558: PUSH
19559: LD_EXP 73
19563: PPUSH
19564: LD_VAR 0 2
19568: PPUSH
19569: LD_INT 0
19571: PPUSH
19572: CALL_OW 1
19576: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
19577: LD_ADDR_EXP 61
19581: PUSH
19582: LD_EXP 61
19586: PPUSH
19587: LD_VAR 0 2
19591: PPUSH
19592: EMPTY
19593: PPUSH
19594: CALL_OW 1
19598: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
19599: LD_ADDR_EXP 72
19603: PUSH
19604: LD_EXP 72
19608: PPUSH
19609: LD_VAR 0 2
19613: PPUSH
19614: LD_INT 0
19616: PPUSH
19617: CALL_OW 1
19621: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
19622: LD_ADDR_EXP 74
19626: PUSH
19627: LD_EXP 74
19631: PPUSH
19632: LD_VAR 0 2
19636: PPUSH
19637: EMPTY
19638: PPUSH
19639: CALL_OW 1
19643: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
19644: LD_ADDR_EXP 77
19648: PUSH
19649: LD_EXP 77
19653: PPUSH
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_INT 0
19661: PPUSH
19662: CALL_OW 1
19666: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
19667: LD_ADDR_EXP 78
19671: PUSH
19672: LD_EXP 78
19676: PPUSH
19677: LD_VAR 0 2
19681: PPUSH
19682: EMPTY
19683: PPUSH
19684: CALL_OW 1
19688: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
19689: LD_ADDR_EXP 79
19693: PUSH
19694: LD_EXP 79
19698: PPUSH
19699: LD_VAR 0 2
19703: PPUSH
19704: EMPTY
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
19711: LD_ADDR_EXP 80
19715: PUSH
19716: LD_EXP 80
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL_OW 1
19732: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
19733: LD_ADDR_EXP 82
19737: PUSH
19738: LD_EXP 82
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: LD_EXP 49
19752: PUSH
19753: LD_VAR 0 2
19757: ARRAY
19758: PPUSH
19759: LD_INT 2
19761: PUSH
19762: LD_INT 30
19764: PUSH
19765: LD_INT 6
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 30
19774: PUSH
19775: LD_INT 7
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 30
19784: PUSH
19785: LD_INT 8
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PPUSH
19798: CALL_OW 72
19802: PPUSH
19803: CALL_OW 1
19807: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
19808: LD_ADDR_EXP 83
19812: PUSH
19813: LD_EXP 83
19817: PPUSH
19818: LD_VAR 0 2
19822: PPUSH
19823: EMPTY
19824: PPUSH
19825: CALL_OW 1
19829: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
19830: LD_ADDR_EXP 84
19834: PUSH
19835: LD_EXP 84
19839: PPUSH
19840: LD_VAR 0 2
19844: PPUSH
19845: EMPTY
19846: PPUSH
19847: CALL_OW 1
19851: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
19852: LD_ADDR_EXP 85
19856: PUSH
19857: LD_EXP 85
19861: PPUSH
19862: LD_VAR 0 2
19866: PPUSH
19867: EMPTY
19868: PPUSH
19869: CALL_OW 1
19873: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
19874: LD_ADDR_EXP 86
19878: PUSH
19879: LD_EXP 86
19883: PPUSH
19884: LD_VAR 0 2
19888: PPUSH
19889: EMPTY
19890: PPUSH
19891: CALL_OW 1
19895: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
19896: LD_ADDR_EXP 87
19900: PUSH
19901: LD_EXP 87
19905: PPUSH
19906: LD_VAR 0 2
19910: PPUSH
19911: EMPTY
19912: PPUSH
19913: CALL_OW 1
19917: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
19918: LD_ADDR_EXP 88
19922: PUSH
19923: LD_EXP 88
19927: PPUSH
19928: LD_VAR 0 2
19932: PPUSH
19933: EMPTY
19934: PPUSH
19935: CALL_OW 1
19939: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
19940: LD_ADDR_EXP 89
19944: PUSH
19945: LD_EXP 89
19949: PPUSH
19950: LD_VAR 0 2
19954: PPUSH
19955: EMPTY
19956: PPUSH
19957: CALL_OW 1
19961: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
19962: LD_ADDR_EXP 90
19966: PUSH
19967: LD_EXP 90
19971: PPUSH
19972: LD_VAR 0 2
19976: PPUSH
19977: EMPTY
19978: PPUSH
19979: CALL_OW 1
19983: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
19984: LD_ADDR_EXP 91
19988: PUSH
19989: LD_EXP 91
19993: PPUSH
19994: LD_VAR 0 2
19998: PPUSH
19999: LD_INT 0
20001: PPUSH
20002: CALL_OW 1
20006: ST_TO_ADDR
// end ;
20007: GO 18931
20009: POP
20010: POP
// MC_InitSides ( ) ;
20011: CALL 20297 0 0
// MC_InitResearch ( ) ;
20015: CALL 20036 0 0
// CustomInitMacro ( ) ;
20019: CALL 292 0 0
// skirmish := true ;
20023: LD_ADDR_EXP 47
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// end ;
20031: LD_VAR 0 1
20035: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
20036: LD_INT 0
20038: PPUSH
20039: PPUSH
20040: PPUSH
20041: PPUSH
20042: PPUSH
20043: PPUSH
// if not mc_bases then
20044: LD_EXP 49
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20292
// for i = 1 to 8 do
20053: LD_ADDR_VAR 0 2
20057: PUSH
20058: DOUBLE
20059: LD_INT 1
20061: DEC
20062: ST_TO_ADDR
20063: LD_INT 8
20065: PUSH
20066: FOR_TO
20067: IFFALSE 20093
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
20069: LD_ADDR_EXP 76
20073: PUSH
20074: LD_EXP 76
20078: PPUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: EMPTY
20085: PPUSH
20086: CALL_OW 1
20090: ST_TO_ADDR
20091: GO 20066
20093: POP
20094: POP
// tmp := [ ] ;
20095: LD_ADDR_VAR 0 5
20099: PUSH
20100: EMPTY
20101: ST_TO_ADDR
// for i = 1 to mc_sides do
20102: LD_ADDR_VAR 0 2
20106: PUSH
20107: DOUBLE
20108: LD_INT 1
20110: DEC
20111: ST_TO_ADDR
20112: LD_EXP 75
20116: PUSH
20117: FOR_TO
20118: IFFALSE 20176
// if not mc_sides [ i ] in tmp then
20120: LD_EXP 75
20124: PUSH
20125: LD_VAR 0 2
20129: ARRAY
20130: PUSH
20131: LD_VAR 0 5
20135: IN
20136: NOT
20137: IFFALSE 20174
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20139: LD_ADDR_VAR 0 5
20143: PUSH
20144: LD_VAR 0 5
20148: PPUSH
20149: LD_VAR 0 5
20153: PUSH
20154: LD_INT 1
20156: PLUS
20157: PPUSH
20158: LD_EXP 75
20162: PUSH
20163: LD_VAR 0 2
20167: ARRAY
20168: PPUSH
20169: CALL_OW 2
20173: ST_TO_ADDR
20174: GO 20117
20176: POP
20177: POP
// if not tmp then
20178: LD_VAR 0 5
20182: NOT
20183: IFFALSE 20187
// exit ;
20185: GO 20292
// for j in tmp do
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: LD_VAR 0 5
20196: PUSH
20197: FOR_IN
20198: IFFALSE 20290
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20200: LD_ADDR_VAR 0 6
20204: PUSH
20205: LD_INT 22
20207: PUSH
20208: LD_VAR 0 3
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PPUSH
20217: CALL_OW 69
20221: ST_TO_ADDR
// if not un then
20222: LD_VAR 0 6
20226: NOT
20227: IFFALSE 20231
// continue ;
20229: GO 20197
// nation := GetNation ( un [ 1 ] ) ;
20231: LD_ADDR_VAR 0 4
20235: PUSH
20236: LD_VAR 0 6
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: CALL_OW 248
20249: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20250: LD_ADDR_EXP 76
20254: PUSH
20255: LD_EXP 76
20259: PPUSH
20260: LD_VAR 0 3
20264: PPUSH
20265: LD_VAR 0 3
20269: PPUSH
20270: LD_VAR 0 4
20274: PPUSH
20275: LD_INT 1
20277: PPUSH
20278: CALL 46656 0 3
20282: PPUSH
20283: CALL_OW 1
20287: ST_TO_ADDR
// end ;
20288: GO 20197
20290: POP
20291: POP
// end ;
20292: LD_VAR 0 1
20296: RET
// export function MC_InitSides ( ) ; var i ; begin
20297: LD_INT 0
20299: PPUSH
20300: PPUSH
// if not mc_bases then
20301: LD_EXP 49
20305: NOT
20306: IFFALSE 20310
// exit ;
20308: GO 20384
// for i = 1 to mc_bases do
20310: LD_ADDR_VAR 0 2
20314: PUSH
20315: DOUBLE
20316: LD_INT 1
20318: DEC
20319: ST_TO_ADDR
20320: LD_EXP 49
20324: PUSH
20325: FOR_TO
20326: IFFALSE 20382
// if mc_bases [ i ] then
20328: LD_EXP 49
20332: PUSH
20333: LD_VAR 0 2
20337: ARRAY
20338: IFFALSE 20380
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20340: LD_ADDR_EXP 75
20344: PUSH
20345: LD_EXP 75
20349: PPUSH
20350: LD_VAR 0 2
20354: PPUSH
20355: LD_EXP 49
20359: PUSH
20360: LD_VAR 0 2
20364: ARRAY
20365: PUSH
20366: LD_INT 1
20368: ARRAY
20369: PPUSH
20370: CALL_OW 255
20374: PPUSH
20375: CALL_OW 1
20379: ST_TO_ADDR
20380: GO 20325
20382: POP
20383: POP
// end ;
20384: LD_VAR 0 1
20388: RET
// every 0 0$01 trigger skirmish do
20389: LD_EXP 47
20393: IFFALSE 20547
20395: GO 20397
20397: DISABLE
// begin enable ;
20398: ENABLE
// MC_CheckBuildings ( ) ;
20399: CALL 25045 0 0
// MC_CheckPeopleLife ( ) ;
20403: CALL 25170 0 0
// RaiseSailEvent ( 100 ) ;
20407: LD_INT 100
20409: PPUSH
20410: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20414: LD_INT 103
20416: PPUSH
20417: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
20421: LD_INT 104
20423: PPUSH
20424: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
20428: LD_INT 105
20430: PPUSH
20431: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
20435: LD_INT 106
20437: PPUSH
20438: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
20442: LD_INT 107
20444: PPUSH
20445: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
20449: LD_INT 108
20451: PPUSH
20452: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
20456: LD_INT 109
20458: PPUSH
20459: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
20463: LD_INT 110
20465: PPUSH
20466: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
20470: LD_INT 111
20472: PPUSH
20473: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
20477: LD_INT 112
20479: PPUSH
20480: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
20484: LD_INT 113
20486: PPUSH
20487: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
20491: LD_INT 120
20493: PPUSH
20494: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
20498: LD_INT 121
20500: PPUSH
20501: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
20505: LD_INT 122
20507: PPUSH
20508: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
20512: LD_INT 123
20514: PPUSH
20515: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
20519: LD_INT 124
20521: PPUSH
20522: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
20526: LD_INT 125
20528: PPUSH
20529: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
20533: LD_INT 126
20535: PPUSH
20536: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
20540: LD_INT 200
20542: PPUSH
20543: CALL_OW 427
// end ;
20547: END
// on SailEvent ( event ) do begin if event < 100 then
20548: LD_VAR 0 1
20552: PUSH
20553: LD_INT 100
20555: LESS
20556: IFFALSE 20567
// CustomEvent ( event ) ;
20558: LD_VAR 0 1
20562: PPUSH
20563: CALL 16089 0 1
// if event = 100 then
20567: LD_VAR 0 1
20571: PUSH
20572: LD_INT 100
20574: EQUAL
20575: IFFALSE 20581
// MC_ClassManager ( ) ;
20577: CALL 20973 0 0
// if event = 101 then
20581: LD_VAR 0 1
20585: PUSH
20586: LD_INT 101
20588: EQUAL
20589: IFFALSE 20595
// MC_RepairBuildings ( ) ;
20591: CALL 25766 0 0
// if event = 102 then
20595: LD_VAR 0 1
20599: PUSH
20600: LD_INT 102
20602: EQUAL
20603: IFFALSE 20609
// MC_Heal ( ) ;
20605: CALL 26498 0 0
// if event = 103 then
20609: LD_VAR 0 1
20613: PUSH
20614: LD_INT 103
20616: EQUAL
20617: IFFALSE 20623
// MC_Build ( ) ;
20619: CALL 26920 0 0
// if event = 104 then
20623: LD_VAR 0 1
20627: PUSH
20628: LD_INT 104
20630: EQUAL
20631: IFFALSE 20637
// MC_TurretWeapon ( ) ;
20633: CALL 28533 0 0
// if event = 105 then
20637: LD_VAR 0 1
20641: PUSH
20642: LD_INT 105
20644: EQUAL
20645: IFFALSE 20651
// MC_BuildUpgrade ( ) ;
20647: CALL 28084 0 0
// if event = 106 then
20651: LD_VAR 0 1
20655: PUSH
20656: LD_INT 106
20658: EQUAL
20659: IFFALSE 20665
// MC_PlantMines ( ) ;
20661: CALL 28963 0 0
// if event = 107 then
20665: LD_VAR 0 1
20669: PUSH
20670: LD_INT 107
20672: EQUAL
20673: IFFALSE 20679
// MC_CollectCrates ( ) ;
20675: CALL 29997 0 0
// if event = 108 then
20679: LD_VAR 0 1
20683: PUSH
20684: LD_INT 108
20686: EQUAL
20687: IFFALSE 20693
// MC_LinkRemoteControl ( ) ;
20689: CALL 31773 0 0
// if event = 109 then
20693: LD_VAR 0 1
20697: PUSH
20698: LD_INT 109
20700: EQUAL
20701: IFFALSE 20707
// MC_ProduceVehicle ( ) ;
20703: CALL 31954 0 0
// if event = 110 then
20707: LD_VAR 0 1
20711: PUSH
20712: LD_INT 110
20714: EQUAL
20715: IFFALSE 20721
// MC_SendAttack ( ) ;
20717: CALL 32420 0 0
// if event = 111 then
20721: LD_VAR 0 1
20725: PUSH
20726: LD_INT 111
20728: EQUAL
20729: IFFALSE 20735
// MC_Defend ( ) ;
20731: CALL 32528 0 0
// if event = 112 then
20735: LD_VAR 0 1
20739: PUSH
20740: LD_INT 112
20742: EQUAL
20743: IFFALSE 20749
// MC_Research ( ) ;
20745: CALL 33133 0 0
// if event = 113 then
20749: LD_VAR 0 1
20753: PUSH
20754: LD_INT 113
20756: EQUAL
20757: IFFALSE 20763
// MC_MinesTrigger ( ) ;
20759: CALL 34247 0 0
// if event = 120 then
20763: LD_VAR 0 1
20767: PUSH
20768: LD_INT 120
20770: EQUAL
20771: IFFALSE 20777
// MC_RepairVehicle ( ) ;
20773: CALL 34346 0 0
// if event = 121 then
20777: LD_VAR 0 1
20781: PUSH
20782: LD_INT 121
20784: EQUAL
20785: IFFALSE 20791
// MC_TameApe ( ) ;
20787: CALL 35076 0 0
// if event = 122 then
20791: LD_VAR 0 1
20795: PUSH
20796: LD_INT 122
20798: EQUAL
20799: IFFALSE 20805
// MC_ChangeApeClass ( ) ;
20801: CALL 35905 0 0
// if event = 123 then
20805: LD_VAR 0 1
20809: PUSH
20810: LD_INT 123
20812: EQUAL
20813: IFFALSE 20819
// MC_Bazooka ( ) ;
20815: CALL 36555 0 0
// if event = 124 then
20819: LD_VAR 0 1
20823: PUSH
20824: LD_INT 124
20826: EQUAL
20827: IFFALSE 20833
// MC_TeleportExit ( ) ;
20829: CALL 36753 0 0
// if event = 125 then
20833: LD_VAR 0 1
20837: PUSH
20838: LD_INT 125
20840: EQUAL
20841: IFFALSE 20847
// MC_Deposits ( ) ;
20843: CALL 37400 0 0
// if event = 126 then
20847: LD_VAR 0 1
20851: PUSH
20852: LD_INT 126
20854: EQUAL
20855: IFFALSE 20861
// MC_RemoteDriver ( ) ;
20857: CALL 38025 0 0
// if event = 200 then
20861: LD_VAR 0 1
20865: PUSH
20866: LD_INT 200
20868: EQUAL
20869: IFFALSE 20875
// MC_Idle ( ) ;
20871: CALL 39758 0 0
// end ;
20875: PPOPN 1
20877: END
// export function MC_Reset ( base , tag ) ; var i ; begin
20878: LD_INT 0
20880: PPUSH
20881: PPUSH
// if not mc_bases [ base ] or not tag then
20882: LD_EXP 49
20886: PUSH
20887: LD_VAR 0 1
20891: ARRAY
20892: NOT
20893: PUSH
20894: LD_VAR 0 2
20898: NOT
20899: OR
20900: IFFALSE 20904
// exit ;
20902: GO 20968
// for i in mc_bases [ base ] union mc_ape [ base ] do
20904: LD_ADDR_VAR 0 4
20908: PUSH
20909: LD_EXP 49
20913: PUSH
20914: LD_VAR 0 1
20918: ARRAY
20919: PUSH
20920: LD_EXP 78
20924: PUSH
20925: LD_VAR 0 1
20929: ARRAY
20930: UNION
20931: PUSH
20932: FOR_IN
20933: IFFALSE 20966
// if GetTag ( i ) = tag then
20935: LD_VAR 0 4
20939: PPUSH
20940: CALL_OW 110
20944: PUSH
20945: LD_VAR 0 2
20949: EQUAL
20950: IFFALSE 20964
// SetTag ( i , 0 ) ;
20952: LD_VAR 0 4
20956: PPUSH
20957: LD_INT 0
20959: PPUSH
20960: CALL_OW 109
20964: GO 20932
20966: POP
20967: POP
// end ;
20968: LD_VAR 0 3
20972: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
20973: LD_INT 0
20975: PPUSH
20976: PPUSH
20977: PPUSH
20978: PPUSH
20979: PPUSH
20980: PPUSH
20981: PPUSH
20982: PPUSH
// if not mc_bases then
20983: LD_EXP 49
20987: NOT
20988: IFFALSE 20992
// exit ;
20990: GO 21450
// for i = 1 to mc_bases do
20992: LD_ADDR_VAR 0 2
20996: PUSH
20997: DOUBLE
20998: LD_INT 1
21000: DEC
21001: ST_TO_ADDR
21002: LD_EXP 49
21006: PUSH
21007: FOR_TO
21008: IFFALSE 21448
// begin tmp := MC_ClassCheckReq ( i ) ;
21010: LD_ADDR_VAR 0 4
21014: PUSH
21015: LD_VAR 0 2
21019: PPUSH
21020: CALL 21455 0 1
21024: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
21025: LD_ADDR_EXP 90
21029: PUSH
21030: LD_EXP 90
21034: PPUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: LD_VAR 0 4
21044: PPUSH
21045: CALL_OW 1
21049: ST_TO_ADDR
// if not tmp then
21050: LD_VAR 0 4
21054: NOT
21055: IFFALSE 21059
// continue ;
21057: GO 21007
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
21059: LD_ADDR_VAR 0 6
21063: PUSH
21064: LD_EXP 49
21068: PUSH
21069: LD_VAR 0 2
21073: ARRAY
21074: PPUSH
21075: LD_INT 2
21077: PUSH
21078: LD_INT 30
21080: PUSH
21081: LD_INT 4
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 30
21090: PUSH
21091: LD_INT 5
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: LIST
21102: PPUSH
21103: CALL_OW 72
21107: PUSH
21108: LD_EXP 49
21112: PUSH
21113: LD_VAR 0 2
21117: ARRAY
21118: PPUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 30
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 30
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: PPUSH
21147: CALL_OW 72
21151: PUSH
21152: LD_EXP 49
21156: PUSH
21157: LD_VAR 0 2
21161: ARRAY
21162: PPUSH
21163: LD_INT 30
21165: PUSH
21166: LD_INT 3
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PPUSH
21173: CALL_OW 72
21177: PUSH
21178: LD_EXP 49
21182: PUSH
21183: LD_VAR 0 2
21187: ARRAY
21188: PPUSH
21189: LD_INT 2
21191: PUSH
21192: LD_INT 30
21194: PUSH
21195: LD_INT 6
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 30
21204: PUSH
21205: LD_INT 7
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 30
21214: PUSH
21215: LD_INT 8
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: PPUSH
21228: CALL_OW 72
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: ST_TO_ADDR
// for j = 1 to 4 do
21239: LD_ADDR_VAR 0 3
21243: PUSH
21244: DOUBLE
21245: LD_INT 1
21247: DEC
21248: ST_TO_ADDR
21249: LD_INT 4
21251: PUSH
21252: FOR_TO
21253: IFFALSE 21444
// begin if not tmp [ j ] then
21255: LD_VAR 0 4
21259: PUSH
21260: LD_VAR 0 3
21264: ARRAY
21265: NOT
21266: IFFALSE 21270
// continue ;
21268: GO 21252
// for p in tmp [ j ] do
21270: LD_ADDR_VAR 0 5
21274: PUSH
21275: LD_VAR 0 4
21279: PUSH
21280: LD_VAR 0 3
21284: ARRAY
21285: PUSH
21286: FOR_IN
21287: IFFALSE 21440
// begin if not b [ j ] then
21289: LD_VAR 0 6
21293: PUSH
21294: LD_VAR 0 3
21298: ARRAY
21299: NOT
21300: IFFALSE 21304
// break ;
21302: GO 21440
// e := 0 ;
21304: LD_ADDR_VAR 0 7
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// for k in b [ j ] do
21312: LD_ADDR_VAR 0 8
21316: PUSH
21317: LD_VAR 0 6
21321: PUSH
21322: LD_VAR 0 3
21326: ARRAY
21327: PUSH
21328: FOR_IN
21329: IFFALSE 21356
// if IsNotFull ( k ) then
21331: LD_VAR 0 8
21335: PPUSH
21336: CALL 50947 0 1
21340: IFFALSE 21354
// begin e := k ;
21342: LD_ADDR_VAR 0 7
21346: PUSH
21347: LD_VAR 0 8
21351: ST_TO_ADDR
// break ;
21352: GO 21356
// end ;
21354: GO 21328
21356: POP
21357: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21358: LD_VAR 0 7
21362: PUSH
21363: LD_VAR 0 5
21367: PPUSH
21368: LD_VAR 0 7
21372: PPUSH
21373: CALL 88066 0 2
21377: NOT
21378: AND
21379: IFFALSE 21438
// begin if IsInUnit ( p ) then
21381: LD_VAR 0 5
21385: PPUSH
21386: CALL_OW 310
21390: IFFALSE 21401
// ComExitBuilding ( p ) ;
21392: LD_VAR 0 5
21396: PPUSH
21397: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21401: LD_VAR 0 5
21405: PPUSH
21406: LD_VAR 0 7
21410: PPUSH
21411: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21415: LD_VAR 0 5
21419: PPUSH
21420: LD_VAR 0 3
21424: PPUSH
21425: CALL_OW 183
// AddComExitBuilding ( p ) ;
21429: LD_VAR 0 5
21433: PPUSH
21434: CALL_OW 182
// end ; end ;
21438: GO 21286
21440: POP
21441: POP
// end ;
21442: GO 21252
21444: POP
21445: POP
// end ;
21446: GO 21007
21448: POP
21449: POP
// end ;
21450: LD_VAR 0 1
21454: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
21455: LD_INT 0
21457: PPUSH
21458: PPUSH
21459: PPUSH
21460: PPUSH
21461: PPUSH
21462: PPUSH
21463: PPUSH
21464: PPUSH
21465: PPUSH
21466: PPUSH
21467: PPUSH
21468: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21469: LD_VAR 0 1
21473: NOT
21474: PUSH
21475: LD_EXP 49
21479: PUSH
21480: LD_VAR 0 1
21484: ARRAY
21485: NOT
21486: OR
21487: PUSH
21488: LD_EXP 49
21492: PUSH
21493: LD_VAR 0 1
21497: ARRAY
21498: PPUSH
21499: LD_INT 2
21501: PUSH
21502: LD_INT 30
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 30
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL_OW 72
21531: NOT
21532: OR
21533: IFFALSE 21537
// exit ;
21535: GO 25040
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21537: LD_ADDR_VAR 0 4
21541: PUSH
21542: LD_EXP 49
21546: PUSH
21547: LD_VAR 0 1
21551: ARRAY
21552: PPUSH
21553: LD_INT 2
21555: PUSH
21556: LD_INT 25
21558: PUSH
21559: LD_INT 1
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 25
21578: PUSH
21579: LD_INT 3
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 25
21588: PUSH
21589: LD_INT 4
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 25
21598: PUSH
21599: LD_INT 5
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 25
21608: PUSH
21609: LD_INT 8
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 25
21618: PUSH
21619: LD_INT 9
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: PPUSH
21636: CALL_OW 72
21640: ST_TO_ADDR
// if not tmp then
21641: LD_VAR 0 4
21645: NOT
21646: IFFALSE 21650
// exit ;
21648: GO 25040
// for i in tmp do
21650: LD_ADDR_VAR 0 3
21654: PUSH
21655: LD_VAR 0 4
21659: PUSH
21660: FOR_IN
21661: IFFALSE 21692
// if GetTag ( i ) then
21663: LD_VAR 0 3
21667: PPUSH
21668: CALL_OW 110
21672: IFFALSE 21690
// tmp := tmp diff i ;
21674: LD_ADDR_VAR 0 4
21678: PUSH
21679: LD_VAR 0 4
21683: PUSH
21684: LD_VAR 0 3
21688: DIFF
21689: ST_TO_ADDR
21690: GO 21660
21692: POP
21693: POP
// if not tmp then
21694: LD_VAR 0 4
21698: NOT
21699: IFFALSE 21703
// exit ;
21701: GO 25040
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21703: LD_ADDR_VAR 0 5
21707: PUSH
21708: LD_EXP 49
21712: PUSH
21713: LD_VAR 0 1
21717: ARRAY
21718: PPUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 25
21734: PUSH
21735: LD_INT 5
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 25
21744: PUSH
21745: LD_INT 8
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 25
21754: PUSH
21755: LD_INT 9
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: PPUSH
21769: CALL_OW 72
21773: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
21774: LD_ADDR_VAR 0 6
21778: PUSH
21779: LD_EXP 49
21783: PUSH
21784: LD_VAR 0 1
21788: ARRAY
21789: PPUSH
21790: LD_INT 25
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PPUSH
21800: CALL_OW 72
21804: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21805: LD_ADDR_VAR 0 7
21809: PUSH
21810: LD_EXP 49
21814: PUSH
21815: LD_VAR 0 1
21819: ARRAY
21820: PPUSH
21821: LD_INT 25
21823: PUSH
21824: LD_INT 3
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PPUSH
21831: CALL_OW 72
21835: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
21836: LD_ADDR_VAR 0 8
21840: PUSH
21841: LD_EXP 49
21845: PUSH
21846: LD_VAR 0 1
21850: ARRAY
21851: PPUSH
21852: LD_INT 25
21854: PUSH
21855: LD_INT 4
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 24
21864: PUSH
21865: LD_INT 251
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PPUSH
21876: CALL_OW 72
21880: ST_TO_ADDR
// if mc_scan [ base ] then
21881: LD_EXP 72
21885: PUSH
21886: LD_VAR 0 1
21890: ARRAY
21891: IFFALSE 22352
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
21893: LD_ADDR_EXP 91
21897: PUSH
21898: LD_EXP 91
21902: PPUSH
21903: LD_VAR 0 1
21907: PPUSH
21908: LD_INT 4
21910: PPUSH
21911: CALL_OW 1
21915: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
21916: LD_ADDR_VAR 0 12
21920: PUSH
21921: LD_EXP 49
21925: PUSH
21926: LD_VAR 0 1
21930: ARRAY
21931: PPUSH
21932: LD_INT 2
21934: PUSH
21935: LD_INT 30
21937: PUSH
21938: LD_INT 4
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 5
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: PPUSH
21960: CALL_OW 72
21964: ST_TO_ADDR
// if not b then
21965: LD_VAR 0 12
21969: NOT
21970: IFFALSE 21974
// exit ;
21972: GO 25040
// p := [ ] ;
21974: LD_ADDR_VAR 0 11
21978: PUSH
21979: EMPTY
21980: ST_TO_ADDR
// if sci >= 2 then
21981: LD_VAR 0 8
21985: PUSH
21986: LD_INT 2
21988: GREATEREQUAL
21989: IFFALSE 22020
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
21991: LD_ADDR_VAR 0 8
21995: PUSH
21996: LD_VAR 0 8
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: PUSH
22005: LD_VAR 0 8
22009: PUSH
22010: LD_INT 2
22012: ARRAY
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: ST_TO_ADDR
22018: GO 22081
// if sci = 1 then
22020: LD_VAR 0 8
22024: PUSH
22025: LD_INT 1
22027: EQUAL
22028: IFFALSE 22049
// sci := [ sci [ 1 ] ] else
22030: LD_ADDR_VAR 0 8
22034: PUSH
22035: LD_VAR 0 8
22039: PUSH
22040: LD_INT 1
22042: ARRAY
22043: PUSH
22044: EMPTY
22045: LIST
22046: ST_TO_ADDR
22047: GO 22081
// if sci = 0 then
22049: LD_VAR 0 8
22053: PUSH
22054: LD_INT 0
22056: EQUAL
22057: IFFALSE 22081
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
22059: LD_ADDR_VAR 0 11
22063: PUSH
22064: LD_VAR 0 4
22068: PPUSH
22069: LD_INT 4
22071: PPUSH
22072: CALL 87929 0 2
22076: PUSH
22077: LD_INT 1
22079: ARRAY
22080: ST_TO_ADDR
// if eng > 4 then
22081: LD_VAR 0 6
22085: PUSH
22086: LD_INT 4
22088: GREATER
22089: IFFALSE 22135
// for i = eng downto 4 do
22091: LD_ADDR_VAR 0 3
22095: PUSH
22096: DOUBLE
22097: LD_VAR 0 6
22101: INC
22102: ST_TO_ADDR
22103: LD_INT 4
22105: PUSH
22106: FOR_DOWNTO
22107: IFFALSE 22133
// eng := eng diff eng [ i ] ;
22109: LD_ADDR_VAR 0 6
22113: PUSH
22114: LD_VAR 0 6
22118: PUSH
22119: LD_VAR 0 6
22123: PUSH
22124: LD_VAR 0 3
22128: ARRAY
22129: DIFF
22130: ST_TO_ADDR
22131: GO 22106
22133: POP
22134: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22135: LD_ADDR_VAR 0 4
22139: PUSH
22140: LD_VAR 0 4
22144: PUSH
22145: LD_VAR 0 5
22149: PUSH
22150: LD_VAR 0 6
22154: UNION
22155: PUSH
22156: LD_VAR 0 7
22160: UNION
22161: PUSH
22162: LD_VAR 0 8
22166: UNION
22167: DIFF
22168: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22169: LD_ADDR_VAR 0 13
22173: PUSH
22174: LD_EXP 49
22178: PUSH
22179: LD_VAR 0 1
22183: ARRAY
22184: PPUSH
22185: LD_INT 2
22187: PUSH
22188: LD_INT 30
22190: PUSH
22191: LD_INT 32
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 30
22200: PUSH
22201: LD_INT 31
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: PPUSH
22213: CALL_OW 72
22217: PUSH
22218: LD_EXP 49
22222: PUSH
22223: LD_VAR 0 1
22227: ARRAY
22228: PPUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 30
22234: PUSH
22235: LD_INT 4
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 30
22244: PUSH
22245: LD_INT 5
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: PPUSH
22257: CALL_OW 72
22261: PUSH
22262: LD_INT 6
22264: MUL
22265: PLUS
22266: ST_TO_ADDR
// if bcount < tmp then
22267: LD_VAR 0 13
22271: PUSH
22272: LD_VAR 0 4
22276: LESS
22277: IFFALSE 22323
// for i = tmp downto bcount do
22279: LD_ADDR_VAR 0 3
22283: PUSH
22284: DOUBLE
22285: LD_VAR 0 4
22289: INC
22290: ST_TO_ADDR
22291: LD_VAR 0 13
22295: PUSH
22296: FOR_DOWNTO
22297: IFFALSE 22321
// tmp := Delete ( tmp , tmp ) ;
22299: LD_ADDR_VAR 0 4
22303: PUSH
22304: LD_VAR 0 4
22308: PPUSH
22309: LD_VAR 0 4
22313: PPUSH
22314: CALL_OW 3
22318: ST_TO_ADDR
22319: GO 22296
22321: POP
22322: POP
// result := [ tmp , 0 , 0 , p ] ;
22323: LD_ADDR_VAR 0 2
22327: PUSH
22328: LD_VAR 0 4
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: LD_VAR 0 11
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: ST_TO_ADDR
// exit ;
22350: GO 25040
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22352: LD_EXP 49
22356: PUSH
22357: LD_VAR 0 1
22361: ARRAY
22362: PPUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 30
22368: PUSH
22369: LD_INT 6
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 30
22378: PUSH
22379: LD_INT 7
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 30
22388: PUSH
22389: LD_INT 8
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: PPUSH
22402: CALL_OW 72
22406: NOT
22407: PUSH
22408: LD_EXP 49
22412: PUSH
22413: LD_VAR 0 1
22417: ARRAY
22418: PPUSH
22419: LD_INT 30
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PPUSH
22429: CALL_OW 72
22433: NOT
22434: AND
22435: IFFALSE 22507
// begin if eng = tmp then
22437: LD_VAR 0 6
22441: PUSH
22442: LD_VAR 0 4
22446: EQUAL
22447: IFFALSE 22451
// exit ;
22449: GO 25040
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
22451: LD_ADDR_EXP 91
22455: PUSH
22456: LD_EXP 91
22460: PPUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: LD_INT 1
22468: PPUSH
22469: CALL_OW 1
22473: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
22474: LD_ADDR_VAR 0 2
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: LD_VAR 0 4
22486: PUSH
22487: LD_VAR 0 6
22491: DIFF
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: ST_TO_ADDR
// exit ;
22505: GO 25040
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22507: LD_EXP 76
22511: PUSH
22512: LD_EXP 75
22516: PUSH
22517: LD_VAR 0 1
22521: ARRAY
22522: ARRAY
22523: PUSH
22524: LD_EXP 49
22528: PUSH
22529: LD_VAR 0 1
22533: ARRAY
22534: PPUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 6
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 30
22550: PUSH
22551: LD_INT 7
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 30
22560: PUSH
22561: LD_INT 8
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: PPUSH
22574: CALL_OW 72
22578: AND
22579: PUSH
22580: LD_EXP 49
22584: PUSH
22585: LD_VAR 0 1
22589: ARRAY
22590: PPUSH
22591: LD_INT 30
22593: PUSH
22594: LD_INT 3
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 72
22605: NOT
22606: AND
22607: IFFALSE 22821
// begin if sci >= 6 then
22609: LD_VAR 0 8
22613: PUSH
22614: LD_INT 6
22616: GREATEREQUAL
22617: IFFALSE 22621
// exit ;
22619: GO 25040
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
22621: LD_ADDR_EXP 91
22625: PUSH
22626: LD_EXP 91
22630: PPUSH
22631: LD_VAR 0 1
22635: PPUSH
22636: LD_INT 2
22638: PPUSH
22639: CALL_OW 1
22643: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
22644: LD_ADDR_VAR 0 9
22648: PUSH
22649: LD_VAR 0 4
22653: PUSH
22654: LD_VAR 0 8
22658: DIFF
22659: PPUSH
22660: LD_INT 4
22662: PPUSH
22663: CALL 87929 0 2
22667: ST_TO_ADDR
// p := [ ] ;
22668: LD_ADDR_VAR 0 11
22672: PUSH
22673: EMPTY
22674: ST_TO_ADDR
// if sci < 6 and sort > 6 then
22675: LD_VAR 0 8
22679: PUSH
22680: LD_INT 6
22682: LESS
22683: PUSH
22684: LD_VAR 0 9
22688: PUSH
22689: LD_INT 6
22691: GREATER
22692: AND
22693: IFFALSE 22774
// begin for i = 1 to 6 - sci do
22695: LD_ADDR_VAR 0 3
22699: PUSH
22700: DOUBLE
22701: LD_INT 1
22703: DEC
22704: ST_TO_ADDR
22705: LD_INT 6
22707: PUSH
22708: LD_VAR 0 8
22712: MINUS
22713: PUSH
22714: FOR_TO
22715: IFFALSE 22770
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
22717: LD_ADDR_VAR 0 11
22721: PUSH
22722: LD_VAR 0 11
22726: PPUSH
22727: LD_VAR 0 11
22731: PUSH
22732: LD_INT 1
22734: PLUS
22735: PPUSH
22736: LD_VAR 0 9
22740: PUSH
22741: LD_INT 1
22743: ARRAY
22744: PPUSH
22745: CALL_OW 2
22749: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
22750: LD_ADDR_VAR 0 9
22754: PUSH
22755: LD_VAR 0 9
22759: PPUSH
22760: LD_INT 1
22762: PPUSH
22763: CALL_OW 3
22767: ST_TO_ADDR
// end ;
22768: GO 22714
22770: POP
22771: POP
// end else
22772: GO 22794
// if sort then
22774: LD_VAR 0 9
22778: IFFALSE 22794
// p := sort [ 1 ] ;
22780: LD_ADDR_VAR 0 11
22784: PUSH
22785: LD_VAR 0 9
22789: PUSH
22790: LD_INT 1
22792: ARRAY
22793: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
22794: LD_ADDR_VAR 0 2
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: LD_INT 0
22807: PUSH
22808: LD_VAR 0 11
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: ST_TO_ADDR
// exit ;
22819: GO 25040
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22821: LD_EXP 76
22825: PUSH
22826: LD_EXP 75
22830: PUSH
22831: LD_VAR 0 1
22835: ARRAY
22836: ARRAY
22837: PUSH
22838: LD_EXP 49
22842: PUSH
22843: LD_VAR 0 1
22847: ARRAY
22848: PPUSH
22849: LD_INT 2
22851: PUSH
22852: LD_INT 30
22854: PUSH
22855: LD_INT 6
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 30
22864: PUSH
22865: LD_INT 7
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 30
22874: PUSH
22875: LD_INT 8
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 72
22892: AND
22893: PUSH
22894: LD_EXP 49
22898: PUSH
22899: LD_VAR 0 1
22903: ARRAY
22904: PPUSH
22905: LD_INT 30
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PPUSH
22915: CALL_OW 72
22919: AND
22920: IFFALSE 23654
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
22922: LD_ADDR_EXP 91
22926: PUSH
22927: LD_EXP 91
22931: PPUSH
22932: LD_VAR 0 1
22936: PPUSH
22937: LD_INT 3
22939: PPUSH
22940: CALL_OW 1
22944: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22945: LD_ADDR_VAR 0 2
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: ST_TO_ADDR
// if not eng then
22968: LD_VAR 0 6
22972: NOT
22973: IFFALSE 23036
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
22975: LD_ADDR_VAR 0 11
22979: PUSH
22980: LD_VAR 0 4
22984: PPUSH
22985: LD_INT 2
22987: PPUSH
22988: CALL 87929 0 2
22992: PUSH
22993: LD_INT 1
22995: ARRAY
22996: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
22997: LD_ADDR_VAR 0 2
23001: PUSH
23002: LD_VAR 0 2
23006: PPUSH
23007: LD_INT 2
23009: PPUSH
23010: LD_VAR 0 11
23014: PPUSH
23015: CALL_OW 1
23019: ST_TO_ADDR
// tmp := tmp diff p ;
23020: LD_ADDR_VAR 0 4
23024: PUSH
23025: LD_VAR 0 4
23029: PUSH
23030: LD_VAR 0 11
23034: DIFF
23035: ST_TO_ADDR
// end ; if tmp and sci < 6 then
23036: LD_VAR 0 4
23040: PUSH
23041: LD_VAR 0 8
23045: PUSH
23046: LD_INT 6
23048: LESS
23049: AND
23050: IFFALSE 23238
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
23052: LD_ADDR_VAR 0 9
23056: PUSH
23057: LD_VAR 0 4
23061: PUSH
23062: LD_VAR 0 8
23066: PUSH
23067: LD_VAR 0 7
23071: UNION
23072: DIFF
23073: PPUSH
23074: LD_INT 4
23076: PPUSH
23077: CALL 87929 0 2
23081: ST_TO_ADDR
// p := [ ] ;
23082: LD_ADDR_VAR 0 11
23086: PUSH
23087: EMPTY
23088: ST_TO_ADDR
// if sort then
23089: LD_VAR 0 9
23093: IFFALSE 23209
// for i = 1 to 6 - sci do
23095: LD_ADDR_VAR 0 3
23099: PUSH
23100: DOUBLE
23101: LD_INT 1
23103: DEC
23104: ST_TO_ADDR
23105: LD_INT 6
23107: PUSH
23108: LD_VAR 0 8
23112: MINUS
23113: PUSH
23114: FOR_TO
23115: IFFALSE 23207
// begin if i = sort then
23117: LD_VAR 0 3
23121: PUSH
23122: LD_VAR 0 9
23126: EQUAL
23127: IFFALSE 23131
// break ;
23129: GO 23207
// if GetClass ( i ) = 4 then
23131: LD_VAR 0 3
23135: PPUSH
23136: CALL_OW 257
23140: PUSH
23141: LD_INT 4
23143: EQUAL
23144: IFFALSE 23148
// continue ;
23146: GO 23114
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23148: LD_ADDR_VAR 0 11
23152: PUSH
23153: LD_VAR 0 11
23157: PPUSH
23158: LD_VAR 0 11
23162: PUSH
23163: LD_INT 1
23165: PLUS
23166: PPUSH
23167: LD_VAR 0 9
23171: PUSH
23172: LD_VAR 0 3
23176: ARRAY
23177: PPUSH
23178: CALL_OW 2
23182: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23183: LD_ADDR_VAR 0 4
23187: PUSH
23188: LD_VAR 0 4
23192: PUSH
23193: LD_VAR 0 9
23197: PUSH
23198: LD_VAR 0 3
23202: ARRAY
23203: DIFF
23204: ST_TO_ADDR
// end ;
23205: GO 23114
23207: POP
23208: POP
// if p then
23209: LD_VAR 0 11
23213: IFFALSE 23238
// result := Replace ( result , 4 , p ) ;
23215: LD_ADDR_VAR 0 2
23219: PUSH
23220: LD_VAR 0 2
23224: PPUSH
23225: LD_INT 4
23227: PPUSH
23228: LD_VAR 0 11
23232: PPUSH
23233: CALL_OW 1
23237: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23238: LD_VAR 0 4
23242: PUSH
23243: LD_VAR 0 7
23247: PUSH
23248: LD_INT 6
23250: LESS
23251: AND
23252: IFFALSE 23440
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23254: LD_ADDR_VAR 0 9
23258: PUSH
23259: LD_VAR 0 4
23263: PUSH
23264: LD_VAR 0 8
23268: PUSH
23269: LD_VAR 0 7
23273: UNION
23274: DIFF
23275: PPUSH
23276: LD_INT 3
23278: PPUSH
23279: CALL 87929 0 2
23283: ST_TO_ADDR
// p := [ ] ;
23284: LD_ADDR_VAR 0 11
23288: PUSH
23289: EMPTY
23290: ST_TO_ADDR
// if sort then
23291: LD_VAR 0 9
23295: IFFALSE 23411
// for i = 1 to 6 - mech do
23297: LD_ADDR_VAR 0 3
23301: PUSH
23302: DOUBLE
23303: LD_INT 1
23305: DEC
23306: ST_TO_ADDR
23307: LD_INT 6
23309: PUSH
23310: LD_VAR 0 7
23314: MINUS
23315: PUSH
23316: FOR_TO
23317: IFFALSE 23409
// begin if i = sort then
23319: LD_VAR 0 3
23323: PUSH
23324: LD_VAR 0 9
23328: EQUAL
23329: IFFALSE 23333
// break ;
23331: GO 23409
// if GetClass ( i ) = 3 then
23333: LD_VAR 0 3
23337: PPUSH
23338: CALL_OW 257
23342: PUSH
23343: LD_INT 3
23345: EQUAL
23346: IFFALSE 23350
// continue ;
23348: GO 23316
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23350: LD_ADDR_VAR 0 11
23354: PUSH
23355: LD_VAR 0 11
23359: PPUSH
23360: LD_VAR 0 11
23364: PUSH
23365: LD_INT 1
23367: PLUS
23368: PPUSH
23369: LD_VAR 0 9
23373: PUSH
23374: LD_VAR 0 3
23378: ARRAY
23379: PPUSH
23380: CALL_OW 2
23384: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23385: LD_ADDR_VAR 0 4
23389: PUSH
23390: LD_VAR 0 4
23394: PUSH
23395: LD_VAR 0 9
23399: PUSH
23400: LD_VAR 0 3
23404: ARRAY
23405: DIFF
23406: ST_TO_ADDR
// end ;
23407: GO 23316
23409: POP
23410: POP
// if p then
23411: LD_VAR 0 11
23415: IFFALSE 23440
// result := Replace ( result , 3 , p ) ;
23417: LD_ADDR_VAR 0 2
23421: PUSH
23422: LD_VAR 0 2
23426: PPUSH
23427: LD_INT 3
23429: PPUSH
23430: LD_VAR 0 11
23434: PPUSH
23435: CALL_OW 1
23439: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
23440: LD_VAR 0 4
23444: PUSH
23445: LD_INT 6
23447: GREATER
23448: PUSH
23449: LD_VAR 0 6
23453: PUSH
23454: LD_INT 6
23456: LESS
23457: AND
23458: IFFALSE 23652
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23460: LD_ADDR_VAR 0 9
23464: PUSH
23465: LD_VAR 0 4
23469: PUSH
23470: LD_VAR 0 8
23474: PUSH
23475: LD_VAR 0 7
23479: UNION
23480: PUSH
23481: LD_VAR 0 6
23485: UNION
23486: DIFF
23487: PPUSH
23488: LD_INT 2
23490: PPUSH
23491: CALL 87929 0 2
23495: ST_TO_ADDR
// p := [ ] ;
23496: LD_ADDR_VAR 0 11
23500: PUSH
23501: EMPTY
23502: ST_TO_ADDR
// if sort then
23503: LD_VAR 0 9
23507: IFFALSE 23623
// for i = 1 to 6 - eng do
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: DOUBLE
23515: LD_INT 1
23517: DEC
23518: ST_TO_ADDR
23519: LD_INT 6
23521: PUSH
23522: LD_VAR 0 6
23526: MINUS
23527: PUSH
23528: FOR_TO
23529: IFFALSE 23621
// begin if i = sort then
23531: LD_VAR 0 3
23535: PUSH
23536: LD_VAR 0 9
23540: EQUAL
23541: IFFALSE 23545
// break ;
23543: GO 23621
// if GetClass ( i ) = 2 then
23545: LD_VAR 0 3
23549: PPUSH
23550: CALL_OW 257
23554: PUSH
23555: LD_INT 2
23557: EQUAL
23558: IFFALSE 23562
// continue ;
23560: GO 23528
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23562: LD_ADDR_VAR 0 11
23566: PUSH
23567: LD_VAR 0 11
23571: PPUSH
23572: LD_VAR 0 11
23576: PUSH
23577: LD_INT 1
23579: PLUS
23580: PPUSH
23581: LD_VAR 0 9
23585: PUSH
23586: LD_VAR 0 3
23590: ARRAY
23591: PPUSH
23592: CALL_OW 2
23596: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23597: LD_ADDR_VAR 0 4
23601: PUSH
23602: LD_VAR 0 4
23606: PUSH
23607: LD_VAR 0 9
23611: PUSH
23612: LD_VAR 0 3
23616: ARRAY
23617: DIFF
23618: ST_TO_ADDR
// end ;
23619: GO 23528
23621: POP
23622: POP
// if p then
23623: LD_VAR 0 11
23627: IFFALSE 23652
// result := Replace ( result , 2 , p ) ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_VAR 0 2
23638: PPUSH
23639: LD_INT 2
23641: PPUSH
23642: LD_VAR 0 11
23646: PPUSH
23647: CALL_OW 1
23651: ST_TO_ADDR
// end ; exit ;
23652: GO 25040
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
23654: LD_EXP 76
23658: PUSH
23659: LD_EXP 75
23663: PUSH
23664: LD_VAR 0 1
23668: ARRAY
23669: ARRAY
23670: NOT
23671: PUSH
23672: LD_EXP 49
23676: PUSH
23677: LD_VAR 0 1
23681: ARRAY
23682: PPUSH
23683: LD_INT 30
23685: PUSH
23686: LD_INT 3
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PPUSH
23693: CALL_OW 72
23697: AND
23698: PUSH
23699: LD_EXP 54
23703: PUSH
23704: LD_VAR 0 1
23708: ARRAY
23709: AND
23710: IFFALSE 24318
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
23712: LD_ADDR_EXP 91
23716: PUSH
23717: LD_EXP 91
23721: PPUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: LD_INT 5
23729: PPUSH
23730: CALL_OW 1
23734: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23735: LD_ADDR_VAR 0 2
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: ST_TO_ADDR
// if sci > 1 then
23758: LD_VAR 0 8
23762: PUSH
23763: LD_INT 1
23765: GREATER
23766: IFFALSE 23794
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
23768: LD_ADDR_VAR 0 4
23772: PUSH
23773: LD_VAR 0 4
23777: PUSH
23778: LD_VAR 0 8
23782: PUSH
23783: LD_VAR 0 8
23787: PUSH
23788: LD_INT 1
23790: ARRAY
23791: DIFF
23792: DIFF
23793: ST_TO_ADDR
// if tmp and not sci then
23794: LD_VAR 0 4
23798: PUSH
23799: LD_VAR 0 8
23803: NOT
23804: AND
23805: IFFALSE 23874
// begin sort := SortBySkill ( tmp , 4 ) ;
23807: LD_ADDR_VAR 0 9
23811: PUSH
23812: LD_VAR 0 4
23816: PPUSH
23817: LD_INT 4
23819: PPUSH
23820: CALL 87929 0 2
23824: ST_TO_ADDR
// if sort then
23825: LD_VAR 0 9
23829: IFFALSE 23845
// p := sort [ 1 ] ;
23831: LD_ADDR_VAR 0 11
23835: PUSH
23836: LD_VAR 0 9
23840: PUSH
23841: LD_INT 1
23843: ARRAY
23844: ST_TO_ADDR
// if p then
23845: LD_VAR 0 11
23849: IFFALSE 23874
// result := Replace ( result , 4 , p ) ;
23851: LD_ADDR_VAR 0 2
23855: PUSH
23856: LD_VAR 0 2
23860: PPUSH
23861: LD_INT 4
23863: PPUSH
23864: LD_VAR 0 11
23868: PPUSH
23869: CALL_OW 1
23873: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23874: LD_ADDR_VAR 0 4
23878: PUSH
23879: LD_VAR 0 4
23883: PUSH
23884: LD_VAR 0 7
23888: DIFF
23889: ST_TO_ADDR
// if tmp and mech < 6 then
23890: LD_VAR 0 4
23894: PUSH
23895: LD_VAR 0 7
23899: PUSH
23900: LD_INT 6
23902: LESS
23903: AND
23904: IFFALSE 24092
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23906: LD_ADDR_VAR 0 9
23910: PUSH
23911: LD_VAR 0 4
23915: PUSH
23916: LD_VAR 0 8
23920: PUSH
23921: LD_VAR 0 7
23925: UNION
23926: DIFF
23927: PPUSH
23928: LD_INT 3
23930: PPUSH
23931: CALL 87929 0 2
23935: ST_TO_ADDR
// p := [ ] ;
23936: LD_ADDR_VAR 0 11
23940: PUSH
23941: EMPTY
23942: ST_TO_ADDR
// if sort then
23943: LD_VAR 0 9
23947: IFFALSE 24063
// for i = 1 to 6 - mech do
23949: LD_ADDR_VAR 0 3
23953: PUSH
23954: DOUBLE
23955: LD_INT 1
23957: DEC
23958: ST_TO_ADDR
23959: LD_INT 6
23961: PUSH
23962: LD_VAR 0 7
23966: MINUS
23967: PUSH
23968: FOR_TO
23969: IFFALSE 24061
// begin if i = sort then
23971: LD_VAR 0 3
23975: PUSH
23976: LD_VAR 0 9
23980: EQUAL
23981: IFFALSE 23985
// break ;
23983: GO 24061
// if GetClass ( i ) = 3 then
23985: LD_VAR 0 3
23989: PPUSH
23990: CALL_OW 257
23994: PUSH
23995: LD_INT 3
23997: EQUAL
23998: IFFALSE 24002
// continue ;
24000: GO 23968
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24002: LD_ADDR_VAR 0 11
24006: PUSH
24007: LD_VAR 0 11
24011: PPUSH
24012: LD_VAR 0 11
24016: PUSH
24017: LD_INT 1
24019: PLUS
24020: PPUSH
24021: LD_VAR 0 9
24025: PUSH
24026: LD_VAR 0 3
24030: ARRAY
24031: PPUSH
24032: CALL_OW 2
24036: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24037: LD_ADDR_VAR 0 4
24041: PUSH
24042: LD_VAR 0 4
24046: PUSH
24047: LD_VAR 0 9
24051: PUSH
24052: LD_VAR 0 3
24056: ARRAY
24057: DIFF
24058: ST_TO_ADDR
// end ;
24059: GO 23968
24061: POP
24062: POP
// if p then
24063: LD_VAR 0 11
24067: IFFALSE 24092
// result := Replace ( result , 3 , p ) ;
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_INT 3
24081: PPUSH
24082: LD_VAR 0 11
24086: PPUSH
24087: CALL_OW 1
24091: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24092: LD_ADDR_VAR 0 4
24096: PUSH
24097: LD_VAR 0 4
24101: PUSH
24102: LD_VAR 0 6
24106: DIFF
24107: ST_TO_ADDR
// if tmp and eng < 6 then
24108: LD_VAR 0 4
24112: PUSH
24113: LD_VAR 0 6
24117: PUSH
24118: LD_INT 6
24120: LESS
24121: AND
24122: IFFALSE 24316
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24124: LD_ADDR_VAR 0 9
24128: PUSH
24129: LD_VAR 0 4
24133: PUSH
24134: LD_VAR 0 8
24138: PUSH
24139: LD_VAR 0 7
24143: UNION
24144: PUSH
24145: LD_VAR 0 6
24149: UNION
24150: DIFF
24151: PPUSH
24152: LD_INT 2
24154: PPUSH
24155: CALL 87929 0 2
24159: ST_TO_ADDR
// p := [ ] ;
24160: LD_ADDR_VAR 0 11
24164: PUSH
24165: EMPTY
24166: ST_TO_ADDR
// if sort then
24167: LD_VAR 0 9
24171: IFFALSE 24287
// for i = 1 to 6 - eng do
24173: LD_ADDR_VAR 0 3
24177: PUSH
24178: DOUBLE
24179: LD_INT 1
24181: DEC
24182: ST_TO_ADDR
24183: LD_INT 6
24185: PUSH
24186: LD_VAR 0 6
24190: MINUS
24191: PUSH
24192: FOR_TO
24193: IFFALSE 24285
// begin if i = sort then
24195: LD_VAR 0 3
24199: PUSH
24200: LD_VAR 0 9
24204: EQUAL
24205: IFFALSE 24209
// break ;
24207: GO 24285
// if GetClass ( i ) = 2 then
24209: LD_VAR 0 3
24213: PPUSH
24214: CALL_OW 257
24218: PUSH
24219: LD_INT 2
24221: EQUAL
24222: IFFALSE 24226
// continue ;
24224: GO 24192
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24226: LD_ADDR_VAR 0 11
24230: PUSH
24231: LD_VAR 0 11
24235: PPUSH
24236: LD_VAR 0 11
24240: PUSH
24241: LD_INT 1
24243: PLUS
24244: PPUSH
24245: LD_VAR 0 9
24249: PUSH
24250: LD_VAR 0 3
24254: ARRAY
24255: PPUSH
24256: CALL_OW 2
24260: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24261: LD_ADDR_VAR 0 4
24265: PUSH
24266: LD_VAR 0 4
24270: PUSH
24271: LD_VAR 0 9
24275: PUSH
24276: LD_VAR 0 3
24280: ARRAY
24281: DIFF
24282: ST_TO_ADDR
// end ;
24283: GO 24192
24285: POP
24286: POP
// if p then
24287: LD_VAR 0 11
24291: IFFALSE 24316
// result := Replace ( result , 2 , p ) ;
24293: LD_ADDR_VAR 0 2
24297: PUSH
24298: LD_VAR 0 2
24302: PPUSH
24303: LD_INT 2
24305: PPUSH
24306: LD_VAR 0 11
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
// end ; exit ;
24316: GO 25040
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24318: LD_EXP 76
24322: PUSH
24323: LD_EXP 75
24327: PUSH
24328: LD_VAR 0 1
24332: ARRAY
24333: ARRAY
24334: NOT
24335: PUSH
24336: LD_EXP 49
24340: PUSH
24341: LD_VAR 0 1
24345: ARRAY
24346: PPUSH
24347: LD_INT 30
24349: PUSH
24350: LD_INT 3
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 72
24361: AND
24362: PUSH
24363: LD_EXP 54
24367: PUSH
24368: LD_VAR 0 1
24372: ARRAY
24373: NOT
24374: AND
24375: IFFALSE 25040
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24377: LD_ADDR_EXP 91
24381: PUSH
24382: LD_EXP 91
24386: PPUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: LD_INT 6
24394: PPUSH
24395: CALL_OW 1
24399: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24400: LD_ADDR_VAR 0 2
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: ST_TO_ADDR
// if sci >= 1 then
24423: LD_VAR 0 8
24427: PUSH
24428: LD_INT 1
24430: GREATEREQUAL
24431: IFFALSE 24453
// tmp := tmp diff sci [ 1 ] ;
24433: LD_ADDR_VAR 0 4
24437: PUSH
24438: LD_VAR 0 4
24442: PUSH
24443: LD_VAR 0 8
24447: PUSH
24448: LD_INT 1
24450: ARRAY
24451: DIFF
24452: ST_TO_ADDR
// if tmp and not sci then
24453: LD_VAR 0 4
24457: PUSH
24458: LD_VAR 0 8
24462: NOT
24463: AND
24464: IFFALSE 24533
// begin sort := SortBySkill ( tmp , 4 ) ;
24466: LD_ADDR_VAR 0 9
24470: PUSH
24471: LD_VAR 0 4
24475: PPUSH
24476: LD_INT 4
24478: PPUSH
24479: CALL 87929 0 2
24483: ST_TO_ADDR
// if sort then
24484: LD_VAR 0 9
24488: IFFALSE 24504
// p := sort [ 1 ] ;
24490: LD_ADDR_VAR 0 11
24494: PUSH
24495: LD_VAR 0 9
24499: PUSH
24500: LD_INT 1
24502: ARRAY
24503: ST_TO_ADDR
// if p then
24504: LD_VAR 0 11
24508: IFFALSE 24533
// result := Replace ( result , 4 , p ) ;
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: LD_VAR 0 2
24519: PPUSH
24520: LD_INT 4
24522: PPUSH
24523: LD_VAR 0 11
24527: PPUSH
24528: CALL_OW 1
24532: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24533: LD_ADDR_VAR 0 4
24537: PUSH
24538: LD_VAR 0 4
24542: PUSH
24543: LD_VAR 0 7
24547: DIFF
24548: ST_TO_ADDR
// if tmp and mech < 6 then
24549: LD_VAR 0 4
24553: PUSH
24554: LD_VAR 0 7
24558: PUSH
24559: LD_INT 6
24561: LESS
24562: AND
24563: IFFALSE 24745
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
24565: LD_ADDR_VAR 0 9
24569: PUSH
24570: LD_VAR 0 4
24574: PUSH
24575: LD_VAR 0 7
24579: DIFF
24580: PPUSH
24581: LD_INT 3
24583: PPUSH
24584: CALL 87929 0 2
24588: ST_TO_ADDR
// p := [ ] ;
24589: LD_ADDR_VAR 0 11
24593: PUSH
24594: EMPTY
24595: ST_TO_ADDR
// if sort then
24596: LD_VAR 0 9
24600: IFFALSE 24716
// for i = 1 to 6 - mech do
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: DOUBLE
24608: LD_INT 1
24610: DEC
24611: ST_TO_ADDR
24612: LD_INT 6
24614: PUSH
24615: LD_VAR 0 7
24619: MINUS
24620: PUSH
24621: FOR_TO
24622: IFFALSE 24714
// begin if i = sort then
24624: LD_VAR 0 3
24628: PUSH
24629: LD_VAR 0 9
24633: EQUAL
24634: IFFALSE 24638
// break ;
24636: GO 24714
// if GetClass ( i ) = 3 then
24638: LD_VAR 0 3
24642: PPUSH
24643: CALL_OW 257
24647: PUSH
24648: LD_INT 3
24650: EQUAL
24651: IFFALSE 24655
// continue ;
24653: GO 24621
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24655: LD_ADDR_VAR 0 11
24659: PUSH
24660: LD_VAR 0 11
24664: PPUSH
24665: LD_VAR 0 11
24669: PUSH
24670: LD_INT 1
24672: PLUS
24673: PPUSH
24674: LD_VAR 0 9
24678: PUSH
24679: LD_VAR 0 3
24683: ARRAY
24684: PPUSH
24685: CALL_OW 2
24689: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24690: LD_ADDR_VAR 0 4
24694: PUSH
24695: LD_VAR 0 4
24699: PUSH
24700: LD_VAR 0 9
24704: PUSH
24705: LD_VAR 0 3
24709: ARRAY
24710: DIFF
24711: ST_TO_ADDR
// end ;
24712: GO 24621
24714: POP
24715: POP
// if p then
24716: LD_VAR 0 11
24720: IFFALSE 24745
// result := Replace ( result , 3 , p ) ;
24722: LD_ADDR_VAR 0 2
24726: PUSH
24727: LD_VAR 0 2
24731: PPUSH
24732: LD_INT 3
24734: PPUSH
24735: LD_VAR 0 11
24739: PPUSH
24740: CALL_OW 1
24744: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24745: LD_ADDR_VAR 0 4
24749: PUSH
24750: LD_VAR 0 4
24754: PUSH
24755: LD_VAR 0 6
24759: DIFF
24760: ST_TO_ADDR
// if tmp and eng < 4 then
24761: LD_VAR 0 4
24765: PUSH
24766: LD_VAR 0 6
24770: PUSH
24771: LD_INT 4
24773: LESS
24774: AND
24775: IFFALSE 24965
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
24777: LD_ADDR_VAR 0 9
24781: PUSH
24782: LD_VAR 0 4
24786: PUSH
24787: LD_VAR 0 7
24791: PUSH
24792: LD_VAR 0 6
24796: UNION
24797: DIFF
24798: PPUSH
24799: LD_INT 2
24801: PPUSH
24802: CALL 87929 0 2
24806: ST_TO_ADDR
// p := [ ] ;
24807: LD_ADDR_VAR 0 11
24811: PUSH
24812: EMPTY
24813: ST_TO_ADDR
// if sort then
24814: LD_VAR 0 9
24818: IFFALSE 24934
// for i = 1 to 4 - eng do
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: DOUBLE
24826: LD_INT 1
24828: DEC
24829: ST_TO_ADDR
24830: LD_INT 4
24832: PUSH
24833: LD_VAR 0 6
24837: MINUS
24838: PUSH
24839: FOR_TO
24840: IFFALSE 24932
// begin if i = sort then
24842: LD_VAR 0 3
24846: PUSH
24847: LD_VAR 0 9
24851: EQUAL
24852: IFFALSE 24856
// break ;
24854: GO 24932
// if GetClass ( i ) = 2 then
24856: LD_VAR 0 3
24860: PPUSH
24861: CALL_OW 257
24865: PUSH
24866: LD_INT 2
24868: EQUAL
24869: IFFALSE 24873
// continue ;
24871: GO 24839
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24873: LD_ADDR_VAR 0 11
24877: PUSH
24878: LD_VAR 0 11
24882: PPUSH
24883: LD_VAR 0 11
24887: PUSH
24888: LD_INT 1
24890: PLUS
24891: PPUSH
24892: LD_VAR 0 9
24896: PUSH
24897: LD_VAR 0 3
24901: ARRAY
24902: PPUSH
24903: CALL_OW 2
24907: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24908: LD_ADDR_VAR 0 4
24912: PUSH
24913: LD_VAR 0 4
24917: PUSH
24918: LD_VAR 0 9
24922: PUSH
24923: LD_VAR 0 3
24927: ARRAY
24928: DIFF
24929: ST_TO_ADDR
// end ;
24930: GO 24839
24932: POP
24933: POP
// if p then
24934: LD_VAR 0 11
24938: IFFALSE 24963
// result := Replace ( result , 2 , p ) ;
24940: LD_ADDR_VAR 0 2
24944: PUSH
24945: LD_VAR 0 2
24949: PPUSH
24950: LD_INT 2
24952: PPUSH
24953: LD_VAR 0 11
24957: PPUSH
24958: CALL_OW 1
24962: ST_TO_ADDR
// end else
24963: GO 25009
// for i = eng downto 5 do
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: DOUBLE
24971: LD_VAR 0 6
24975: INC
24976: ST_TO_ADDR
24977: LD_INT 5
24979: PUSH
24980: FOR_DOWNTO
24981: IFFALSE 25007
// tmp := tmp union eng [ i ] ;
24983: LD_ADDR_VAR 0 4
24987: PUSH
24988: LD_VAR 0 4
24992: PUSH
24993: LD_VAR 0 6
24997: PUSH
24998: LD_VAR 0 3
25002: ARRAY
25003: UNION
25004: ST_TO_ADDR
25005: GO 24980
25007: POP
25008: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
25009: LD_ADDR_VAR 0 2
25013: PUSH
25014: LD_VAR 0 2
25018: PPUSH
25019: LD_INT 1
25021: PPUSH
25022: LD_VAR 0 4
25026: PUSH
25027: LD_VAR 0 5
25031: DIFF
25032: PPUSH
25033: CALL_OW 1
25037: ST_TO_ADDR
// exit ;
25038: GO 25040
// end ; end ;
25040: LD_VAR 0 2
25044: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
25045: LD_INT 0
25047: PPUSH
25048: PPUSH
25049: PPUSH
// if not mc_bases then
25050: LD_EXP 49
25054: NOT
25055: IFFALSE 25059
// exit ;
25057: GO 25165
// for i = 1 to mc_bases do
25059: LD_ADDR_VAR 0 2
25063: PUSH
25064: DOUBLE
25065: LD_INT 1
25067: DEC
25068: ST_TO_ADDR
25069: LD_EXP 49
25073: PUSH
25074: FOR_TO
25075: IFFALSE 25156
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_EXP 49
25086: PUSH
25087: LD_VAR 0 2
25091: ARRAY
25092: PPUSH
25093: LD_INT 21
25095: PUSH
25096: LD_INT 3
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: LD_INT 24
25108: PUSH
25109: LD_INT 1000
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PPUSH
25124: CALL_OW 72
25128: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25129: LD_ADDR_EXP 50
25133: PUSH
25134: LD_EXP 50
25138: PPUSH
25139: LD_VAR 0 2
25143: PPUSH
25144: LD_VAR 0 3
25148: PPUSH
25149: CALL_OW 1
25153: ST_TO_ADDR
// end ;
25154: GO 25074
25156: POP
25157: POP
// RaiseSailEvent ( 101 ) ;
25158: LD_INT 101
25160: PPUSH
25161: CALL_OW 427
// end ;
25165: LD_VAR 0 1
25169: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25170: LD_INT 0
25172: PPUSH
25173: PPUSH
25174: PPUSH
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
// if not mc_bases then
25179: LD_EXP 49
25183: NOT
25184: IFFALSE 25188
// exit ;
25186: GO 25761
// for i = 1 to mc_bases do
25188: LD_ADDR_VAR 0 2
25192: PUSH
25193: DOUBLE
25194: LD_INT 1
25196: DEC
25197: ST_TO_ADDR
25198: LD_EXP 49
25202: PUSH
25203: FOR_TO
25204: IFFALSE 25752
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25206: LD_ADDR_VAR 0 5
25210: PUSH
25211: LD_EXP 49
25215: PUSH
25216: LD_VAR 0 2
25220: ARRAY
25221: PUSH
25222: LD_EXP 78
25226: PUSH
25227: LD_VAR 0 2
25231: ARRAY
25232: UNION
25233: PPUSH
25234: LD_INT 21
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: LD_INT 54
25252: PUSH
25253: EMPTY
25254: LIST
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 3
25262: PUSH
25263: LD_INT 24
25265: PUSH
25266: LD_INT 800
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PPUSH
25286: CALL_OW 72
25290: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25291: LD_ADDR_VAR 0 6
25295: PUSH
25296: LD_EXP 49
25300: PUSH
25301: LD_VAR 0 2
25305: ARRAY
25306: PPUSH
25307: LD_INT 21
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: LD_INT 3
25322: PUSH
25323: LD_INT 54
25325: PUSH
25326: EMPTY
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 3
25335: PUSH
25336: LD_INT 24
25338: PUSH
25339: LD_INT 250
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PPUSH
25359: CALL_OW 72
25363: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25364: LD_ADDR_VAR 0 7
25368: PUSH
25369: LD_VAR 0 5
25373: PUSH
25374: LD_VAR 0 6
25378: DIFF
25379: ST_TO_ADDR
// if not need_heal_1 then
25380: LD_VAR 0 6
25384: NOT
25385: IFFALSE 25418
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25387: LD_ADDR_EXP 52
25391: PUSH
25392: LD_EXP 52
25396: PPUSH
25397: LD_VAR 0 2
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: EMPTY
25410: PPUSH
25411: CALL 53681 0 3
25415: ST_TO_ADDR
25416: GO 25488
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
25418: LD_ADDR_EXP 52
25422: PUSH
25423: LD_EXP 52
25427: PPUSH
25428: LD_VAR 0 2
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PPUSH
25440: LD_EXP 52
25444: PUSH
25445: LD_VAR 0 2
25449: ARRAY
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: PPUSH
25455: LD_INT 3
25457: PUSH
25458: LD_INT 24
25460: PUSH
25461: LD_INT 1000
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PPUSH
25472: CALL_OW 72
25476: PUSH
25477: LD_VAR 0 6
25481: UNION
25482: PPUSH
25483: CALL 53681 0 3
25487: ST_TO_ADDR
// if not need_heal_2 then
25488: LD_VAR 0 7
25492: NOT
25493: IFFALSE 25526
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
25495: LD_ADDR_EXP 52
25499: PUSH
25500: LD_EXP 52
25504: PPUSH
25505: LD_VAR 0 2
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PPUSH
25517: EMPTY
25518: PPUSH
25519: CALL 53681 0 3
25523: ST_TO_ADDR
25524: GO 25558
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
25526: LD_ADDR_EXP 52
25530: PUSH
25531: LD_EXP 52
25535: PPUSH
25536: LD_VAR 0 2
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PPUSH
25548: LD_VAR 0 7
25552: PPUSH
25553: CALL 53681 0 3
25557: ST_TO_ADDR
// if need_heal_2 then
25558: LD_VAR 0 7
25562: IFFALSE 25734
// for j in need_heal_2 do
25564: LD_ADDR_VAR 0 3
25568: PUSH
25569: LD_VAR 0 7
25573: PUSH
25574: FOR_IN
25575: IFFALSE 25732
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
25577: LD_ADDR_VAR 0 5
25581: PUSH
25582: LD_EXP 49
25586: PUSH
25587: LD_VAR 0 2
25591: ARRAY
25592: PPUSH
25593: LD_INT 2
25595: PUSH
25596: LD_INT 30
25598: PUSH
25599: LD_INT 6
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 30
25608: PUSH
25609: LD_INT 7
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 30
25618: PUSH
25619: LD_INT 8
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 30
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 30
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 25
25648: PUSH
25649: LD_INT 4
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: PPUSH
25665: CALL_OW 72
25669: ST_TO_ADDR
// if tmp then
25670: LD_VAR 0 5
25674: IFFALSE 25730
// begin k := NearestUnitToUnit ( tmp , j ) ;
25676: LD_ADDR_VAR 0 4
25680: PUSH
25681: LD_VAR 0 5
25685: PPUSH
25686: LD_VAR 0 3
25690: PPUSH
25691: CALL_OW 74
25695: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
25696: LD_VAR 0 3
25700: PPUSH
25701: LD_VAR 0 4
25705: PPUSH
25706: CALL_OW 296
25710: PUSH
25711: LD_INT 7
25713: GREATER
25714: IFFALSE 25730
// ComMoveUnit ( j , k ) ;
25716: LD_VAR 0 3
25720: PPUSH
25721: LD_VAR 0 4
25725: PPUSH
25726: CALL_OW 112
// end ; end ;
25730: GO 25574
25732: POP
25733: POP
// if not need_heal_1 and not need_heal_2 then
25734: LD_VAR 0 6
25738: NOT
25739: PUSH
25740: LD_VAR 0 7
25744: NOT
25745: AND
25746: IFFALSE 25750
// continue ;
25748: GO 25203
// end ;
25750: GO 25203
25752: POP
25753: POP
// RaiseSailEvent ( 102 ) ;
25754: LD_INT 102
25756: PPUSH
25757: CALL_OW 427
// end ;
25761: LD_VAR 0 1
25765: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
25766: LD_INT 0
25768: PPUSH
25769: PPUSH
25770: PPUSH
25771: PPUSH
25772: PPUSH
25773: PPUSH
// if not mc_bases then
25774: LD_EXP 49
25778: NOT
25779: IFFALSE 25783
// exit ;
25781: GO 26493
// for i = 1 to mc_bases do
25783: LD_ADDR_VAR 0 2
25787: PUSH
25788: DOUBLE
25789: LD_INT 1
25791: DEC
25792: ST_TO_ADDR
25793: LD_EXP 49
25797: PUSH
25798: FOR_TO
25799: IFFALSE 26491
// begin if not mc_building_need_repair [ i ] then
25801: LD_EXP 50
25805: PUSH
25806: LD_VAR 0 2
25810: ARRAY
25811: NOT
25812: IFFALSE 25986
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
25814: LD_ADDR_VAR 0 6
25818: PUSH
25819: LD_EXP 68
25823: PUSH
25824: LD_VAR 0 2
25828: ARRAY
25829: PPUSH
25830: LD_INT 3
25832: PUSH
25833: LD_INT 24
25835: PUSH
25836: LD_INT 1000
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 2
25849: PUSH
25850: LD_INT 34
25852: PUSH
25853: LD_INT 13
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 34
25862: PUSH
25863: LD_INT 52
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 72
25883: ST_TO_ADDR
// if cranes then
25884: LD_VAR 0 6
25888: IFFALSE 25950
// for j in cranes do
25890: LD_ADDR_VAR 0 3
25894: PUSH
25895: LD_VAR 0 6
25899: PUSH
25900: FOR_IN
25901: IFFALSE 25948
// if not IsInArea ( j , mc_parking [ i ] ) then
25903: LD_VAR 0 3
25907: PPUSH
25908: LD_EXP 73
25912: PUSH
25913: LD_VAR 0 2
25917: ARRAY
25918: PPUSH
25919: CALL_OW 308
25923: NOT
25924: IFFALSE 25946
// ComMoveToArea ( j , mc_parking [ i ] ) ;
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_EXP 73
25935: PUSH
25936: LD_VAR 0 2
25940: ARRAY
25941: PPUSH
25942: CALL_OW 113
25946: GO 25900
25948: POP
25949: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
25950: LD_ADDR_EXP 51
25954: PUSH
25955: LD_EXP 51
25959: PPUSH
25960: LD_VAR 0 2
25964: PPUSH
25965: EMPTY
25966: PPUSH
25967: CALL_OW 1
25971: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
25972: LD_VAR 0 2
25976: PPUSH
25977: LD_INT 101
25979: PPUSH
25980: CALL 20878 0 2
// continue ;
25984: GO 25798
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
25986: LD_ADDR_EXP 55
25990: PUSH
25991: LD_EXP 55
25995: PPUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: EMPTY
26002: PPUSH
26003: CALL_OW 1
26007: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26008: LD_VAR 0 2
26012: PPUSH
26013: LD_INT 103
26015: PPUSH
26016: CALL 20878 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
26020: LD_ADDR_VAR 0 5
26024: PUSH
26025: LD_EXP 49
26029: PUSH
26030: LD_VAR 0 2
26034: ARRAY
26035: PUSH
26036: LD_EXP 78
26040: PUSH
26041: LD_VAR 0 2
26045: ARRAY
26046: UNION
26047: PPUSH
26048: LD_INT 2
26050: PUSH
26051: LD_INT 25
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 25
26063: PUSH
26064: LD_INT 16
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: PPUSH
26079: CALL_OW 72
26083: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
26084: LD_ADDR_VAR 0 6
26088: PUSH
26089: LD_EXP 68
26093: PUSH
26094: LD_VAR 0 2
26098: ARRAY
26099: PPUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 34
26105: PUSH
26106: LD_INT 13
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 34
26115: PUSH
26116: LD_INT 52
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 72
26132: ST_TO_ADDR
// if cranes then
26133: LD_VAR 0 6
26137: IFFALSE 26273
// begin for j in cranes do
26139: LD_ADDR_VAR 0 3
26143: PUSH
26144: LD_VAR 0 6
26148: PUSH
26149: FOR_IN
26150: IFFALSE 26271
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26152: LD_VAR 0 3
26156: PPUSH
26157: CALL_OW 256
26161: PUSH
26162: LD_INT 500
26164: GREATEREQUAL
26165: PUSH
26166: LD_VAR 0 3
26170: PPUSH
26171: CALL_OW 314
26175: NOT
26176: AND
26177: IFFALSE 26211
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26179: LD_VAR 0 3
26183: PPUSH
26184: LD_EXP 50
26188: PUSH
26189: LD_VAR 0 2
26193: ARRAY
26194: PPUSH
26195: LD_VAR 0 3
26199: PPUSH
26200: CALL_OW 74
26204: PPUSH
26205: CALL_OW 130
26209: GO 26269
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26211: LD_VAR 0 3
26215: PPUSH
26216: CALL_OW 256
26220: PUSH
26221: LD_INT 500
26223: LESS
26224: PUSH
26225: LD_VAR 0 3
26229: PPUSH
26230: LD_EXP 73
26234: PUSH
26235: LD_VAR 0 2
26239: ARRAY
26240: PPUSH
26241: CALL_OW 308
26245: NOT
26246: AND
26247: IFFALSE 26269
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26249: LD_VAR 0 3
26253: PPUSH
26254: LD_EXP 73
26258: PUSH
26259: LD_VAR 0 2
26263: ARRAY
26264: PPUSH
26265: CALL_OW 113
26269: GO 26149
26271: POP
26272: POP
// end ; if not tmp then
26273: LD_VAR 0 5
26277: NOT
26278: IFFALSE 26282
// continue ;
26280: GO 25798
// for j in tmp do
26282: LD_ADDR_VAR 0 3
26286: PUSH
26287: LD_VAR 0 5
26291: PUSH
26292: FOR_IN
26293: IFFALSE 26487
// begin if mc_need_heal [ i ] then
26295: LD_EXP 52
26299: PUSH
26300: LD_VAR 0 2
26304: ARRAY
26305: IFFALSE 26353
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26307: LD_VAR 0 3
26311: PUSH
26312: LD_EXP 52
26316: PUSH
26317: LD_VAR 0 2
26321: ARRAY
26322: PUSH
26323: LD_INT 1
26325: ARRAY
26326: IN
26327: PUSH
26328: LD_VAR 0 3
26332: PUSH
26333: LD_EXP 52
26337: PUSH
26338: LD_VAR 0 2
26342: ARRAY
26343: PUSH
26344: LD_INT 2
26346: ARRAY
26347: IN
26348: OR
26349: IFFALSE 26353
// continue ;
26351: GO 26292
// if IsInUnit ( j ) then
26353: LD_VAR 0 3
26357: PPUSH
26358: CALL_OW 310
26362: IFFALSE 26373
// ComExitBuilding ( j ) ;
26364: LD_VAR 0 3
26368: PPUSH
26369: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
26373: LD_VAR 0 3
26377: PUSH
26378: LD_EXP 51
26382: PUSH
26383: LD_VAR 0 2
26387: ARRAY
26388: IN
26389: NOT
26390: IFFALSE 26448
// begin SetTag ( j , 101 ) ;
26392: LD_VAR 0 3
26396: PPUSH
26397: LD_INT 101
26399: PPUSH
26400: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26404: LD_ADDR_EXP 51
26408: PUSH
26409: LD_EXP 51
26413: PPUSH
26414: LD_VAR 0 2
26418: PUSH
26419: LD_EXP 51
26423: PUSH
26424: LD_VAR 0 2
26428: ARRAY
26429: PUSH
26430: LD_INT 1
26432: PLUS
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PPUSH
26438: LD_VAR 0 3
26442: PPUSH
26443: CALL 53681 0 3
26447: ST_TO_ADDR
// end ; wait ( 1 ) ;
26448: LD_INT 1
26450: PPUSH
26451: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
26455: LD_VAR 0 3
26459: PPUSH
26460: LD_EXP 50
26464: PUSH
26465: LD_VAR 0 2
26469: ARRAY
26470: PPUSH
26471: LD_VAR 0 3
26475: PPUSH
26476: CALL_OW 74
26480: PPUSH
26481: CALL_OW 130
// end ;
26485: GO 26292
26487: POP
26488: POP
// end ;
26489: GO 25798
26491: POP
26492: POP
// end ;
26493: LD_VAR 0 1
26497: RET
// export function MC_Heal ; var i , j , tmp ; begin
26498: LD_INT 0
26500: PPUSH
26501: PPUSH
26502: PPUSH
26503: PPUSH
// if not mc_bases then
26504: LD_EXP 49
26508: NOT
26509: IFFALSE 26513
// exit ;
26511: GO 26915
// for i = 1 to mc_bases do
26513: LD_ADDR_VAR 0 2
26517: PUSH
26518: DOUBLE
26519: LD_INT 1
26521: DEC
26522: ST_TO_ADDR
26523: LD_EXP 49
26527: PUSH
26528: FOR_TO
26529: IFFALSE 26913
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
26531: LD_EXP 52
26535: PUSH
26536: LD_VAR 0 2
26540: ARRAY
26541: PUSH
26542: LD_INT 1
26544: ARRAY
26545: NOT
26546: PUSH
26547: LD_EXP 52
26551: PUSH
26552: LD_VAR 0 2
26556: ARRAY
26557: PUSH
26558: LD_INT 2
26560: ARRAY
26561: NOT
26562: AND
26563: IFFALSE 26601
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
26565: LD_ADDR_EXP 53
26569: PUSH
26570: LD_EXP 53
26574: PPUSH
26575: LD_VAR 0 2
26579: PPUSH
26580: EMPTY
26581: PPUSH
26582: CALL_OW 1
26586: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
26587: LD_VAR 0 2
26591: PPUSH
26592: LD_INT 102
26594: PPUSH
26595: CALL 20878 0 2
// continue ;
26599: GO 26528
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
26601: LD_ADDR_VAR 0 4
26605: PUSH
26606: LD_EXP 49
26610: PUSH
26611: LD_VAR 0 2
26615: ARRAY
26616: PPUSH
26617: LD_INT 25
26619: PUSH
26620: LD_INT 4
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PPUSH
26627: CALL_OW 72
26631: ST_TO_ADDR
// if not tmp then
26632: LD_VAR 0 4
26636: NOT
26637: IFFALSE 26641
// continue ;
26639: GO 26528
// if mc_taming [ i ] then
26641: LD_EXP 80
26645: PUSH
26646: LD_VAR 0 2
26650: ARRAY
26651: IFFALSE 26675
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
26653: LD_ADDR_EXP 80
26657: PUSH
26658: LD_EXP 80
26662: PPUSH
26663: LD_VAR 0 2
26667: PPUSH
26668: EMPTY
26669: PPUSH
26670: CALL_OW 1
26674: ST_TO_ADDR
// for j in tmp do
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_VAR 0 4
26684: PUSH
26685: FOR_IN
26686: IFFALSE 26909
// begin if IsInUnit ( j ) then
26688: LD_VAR 0 3
26692: PPUSH
26693: CALL_OW 310
26697: IFFALSE 26708
// ComExitBuilding ( j ) ;
26699: LD_VAR 0 3
26703: PPUSH
26704: CALL_OW 122
// if not j in mc_healers [ i ] then
26708: LD_VAR 0 3
26712: PUSH
26713: LD_EXP 53
26717: PUSH
26718: LD_VAR 0 2
26722: ARRAY
26723: IN
26724: NOT
26725: IFFALSE 26771
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
26727: LD_ADDR_EXP 53
26731: PUSH
26732: LD_EXP 53
26736: PPUSH
26737: LD_VAR 0 2
26741: PUSH
26742: LD_EXP 53
26746: PUSH
26747: LD_VAR 0 2
26751: ARRAY
26752: PUSH
26753: LD_INT 1
26755: PLUS
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PPUSH
26761: LD_VAR 0 3
26765: PPUSH
26766: CALL 53681 0 3
26770: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
26771: LD_VAR 0 3
26775: PPUSH
26776: CALL_OW 110
26780: PUSH
26781: LD_INT 102
26783: NONEQUAL
26784: IFFALSE 26798
// SetTag ( j , 102 ) ;
26786: LD_VAR 0 3
26790: PPUSH
26791: LD_INT 102
26793: PPUSH
26794: CALL_OW 109
// Wait ( 3 ) ;
26798: LD_INT 3
26800: PPUSH
26801: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
26805: LD_EXP 52
26809: PUSH
26810: LD_VAR 0 2
26814: ARRAY
26815: PUSH
26816: LD_INT 1
26818: ARRAY
26819: IFFALSE 26851
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
26821: LD_VAR 0 3
26825: PPUSH
26826: LD_EXP 52
26830: PUSH
26831: LD_VAR 0 2
26835: ARRAY
26836: PUSH
26837: LD_INT 1
26839: ARRAY
26840: PUSH
26841: LD_INT 1
26843: ARRAY
26844: PPUSH
26845: CALL_OW 128
26849: GO 26907
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
26851: LD_VAR 0 3
26855: PPUSH
26856: CALL_OW 314
26860: NOT
26861: PUSH
26862: LD_EXP 52
26866: PUSH
26867: LD_VAR 0 2
26871: ARRAY
26872: PUSH
26873: LD_INT 2
26875: ARRAY
26876: AND
26877: IFFALSE 26907
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
26879: LD_VAR 0 3
26883: PPUSH
26884: LD_EXP 52
26888: PUSH
26889: LD_VAR 0 2
26893: ARRAY
26894: PUSH
26895: LD_INT 2
26897: ARRAY
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: PPUSH
26903: CALL_OW 128
// end ;
26907: GO 26685
26909: POP
26910: POP
// end ;
26911: GO 26528
26913: POP
26914: POP
// end ;
26915: LD_VAR 0 1
26919: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
26920: LD_INT 0
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
// if not mc_bases then
26927: LD_EXP 49
26931: NOT
26932: IFFALSE 26936
// exit ;
26934: GO 28079
// for i = 1 to mc_bases do
26936: LD_ADDR_VAR 0 2
26940: PUSH
26941: DOUBLE
26942: LD_INT 1
26944: DEC
26945: ST_TO_ADDR
26946: LD_EXP 49
26950: PUSH
26951: FOR_TO
26952: IFFALSE 28077
// begin if mc_scan [ i ] then
26954: LD_EXP 72
26958: PUSH
26959: LD_VAR 0 2
26963: ARRAY
26964: IFFALSE 26968
// continue ;
26966: GO 26951
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
26968: LD_EXP 54
26972: PUSH
26973: LD_VAR 0 2
26977: ARRAY
26978: NOT
26979: PUSH
26980: LD_EXP 56
26984: PUSH
26985: LD_VAR 0 2
26989: ARRAY
26990: NOT
26991: AND
26992: PUSH
26993: LD_EXP 55
26997: PUSH
26998: LD_VAR 0 2
27002: ARRAY
27003: AND
27004: IFFALSE 27042
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
27006: LD_ADDR_EXP 55
27010: PUSH
27011: LD_EXP 55
27015: PPUSH
27016: LD_VAR 0 2
27020: PPUSH
27021: EMPTY
27022: PPUSH
27023: CALL_OW 1
27027: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
27028: LD_VAR 0 2
27032: PPUSH
27033: LD_INT 103
27035: PPUSH
27036: CALL 20878 0 2
// continue ;
27040: GO 26951
// end ; if mc_construct_list [ i ] then
27042: LD_EXP 56
27046: PUSH
27047: LD_VAR 0 2
27051: ARRAY
27052: IFFALSE 27272
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27054: LD_ADDR_VAR 0 4
27058: PUSH
27059: LD_EXP 49
27063: PUSH
27064: LD_VAR 0 2
27068: ARRAY
27069: PPUSH
27070: LD_INT 25
27072: PUSH
27073: LD_INT 2
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PPUSH
27080: CALL_OW 72
27084: PUSH
27085: LD_EXP 51
27089: PUSH
27090: LD_VAR 0 2
27094: ARRAY
27095: DIFF
27096: ST_TO_ADDR
// if not tmp then
27097: LD_VAR 0 4
27101: NOT
27102: IFFALSE 27106
// continue ;
27104: GO 26951
// for j in tmp do
27106: LD_ADDR_VAR 0 3
27110: PUSH
27111: LD_VAR 0 4
27115: PUSH
27116: FOR_IN
27117: IFFALSE 27268
// begin if not mc_builders [ i ] then
27119: LD_EXP 55
27123: PUSH
27124: LD_VAR 0 2
27128: ARRAY
27129: NOT
27130: IFFALSE 27188
// begin SetTag ( j , 103 ) ;
27132: LD_VAR 0 3
27136: PPUSH
27137: LD_INT 103
27139: PPUSH
27140: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27144: LD_ADDR_EXP 55
27148: PUSH
27149: LD_EXP 55
27153: PPUSH
27154: LD_VAR 0 2
27158: PUSH
27159: LD_EXP 55
27163: PUSH
27164: LD_VAR 0 2
27168: ARRAY
27169: PUSH
27170: LD_INT 1
27172: PLUS
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PPUSH
27178: LD_VAR 0 3
27182: PPUSH
27183: CALL 53681 0 3
27187: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27188: LD_VAR 0 3
27192: PPUSH
27193: CALL_OW 310
27197: IFFALSE 27208
// ComExitBuilding ( j ) ;
27199: LD_VAR 0 3
27203: PPUSH
27204: CALL_OW 122
// wait ( 3 ) ;
27208: LD_INT 3
27210: PPUSH
27211: CALL_OW 67
// if not mc_construct_list [ i ] then
27215: LD_EXP 56
27219: PUSH
27220: LD_VAR 0 2
27224: ARRAY
27225: NOT
27226: IFFALSE 27230
// break ;
27228: GO 27268
// if not HasTask ( j ) then
27230: LD_VAR 0 3
27234: PPUSH
27235: CALL_OW 314
27239: NOT
27240: IFFALSE 27266
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27242: LD_VAR 0 3
27246: PPUSH
27247: LD_EXP 56
27251: PUSH
27252: LD_VAR 0 2
27256: ARRAY
27257: PUSH
27258: LD_INT 1
27260: ARRAY
27261: PPUSH
27262: CALL 56532 0 2
// end ;
27266: GO 27116
27268: POP
27269: POP
// end else
27270: GO 28075
// if mc_build_list [ i ] then
27272: LD_EXP 54
27276: PUSH
27277: LD_VAR 0 2
27281: ARRAY
27282: IFFALSE 28075
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27284: LD_ADDR_VAR 0 5
27288: PUSH
27289: LD_EXP 49
27293: PUSH
27294: LD_VAR 0 2
27298: ARRAY
27299: PPUSH
27300: LD_INT 2
27302: PUSH
27303: LD_INT 30
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 30
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: PPUSH
27328: CALL_OW 72
27332: ST_TO_ADDR
// if depot then
27333: LD_VAR 0 5
27337: IFFALSE 27355
// depot := depot [ 1 ] else
27339: LD_ADDR_VAR 0 5
27343: PUSH
27344: LD_VAR 0 5
27348: PUSH
27349: LD_INT 1
27351: ARRAY
27352: ST_TO_ADDR
27353: GO 27363
// depot := 0 ;
27355: LD_ADDR_VAR 0 5
27359: PUSH
27360: LD_INT 0
27362: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
27363: LD_EXP 54
27367: PUSH
27368: LD_VAR 0 2
27372: ARRAY
27373: PUSH
27374: LD_INT 1
27376: ARRAY
27377: PUSH
27378: LD_INT 1
27380: ARRAY
27381: PPUSH
27382: CALL 56362 0 1
27386: PUSH
27387: LD_EXP 49
27391: PUSH
27392: LD_VAR 0 2
27396: ARRAY
27397: PPUSH
27398: LD_INT 2
27400: PUSH
27401: LD_INT 30
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 30
27413: PUSH
27414: LD_INT 3
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: PPUSH
27426: CALL_OW 72
27430: NOT
27431: AND
27432: IFFALSE 27537
// begin for j = 1 to mc_build_list [ i ] do
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: DOUBLE
27440: LD_INT 1
27442: DEC
27443: ST_TO_ADDR
27444: LD_EXP 54
27448: PUSH
27449: LD_VAR 0 2
27453: ARRAY
27454: PUSH
27455: FOR_TO
27456: IFFALSE 27535
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
27458: LD_EXP 54
27462: PUSH
27463: LD_VAR 0 2
27467: ARRAY
27468: PUSH
27469: LD_VAR 0 3
27473: ARRAY
27474: PUSH
27475: LD_INT 1
27477: ARRAY
27478: PUSH
27479: LD_INT 2
27481: EQUAL
27482: IFFALSE 27533
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
27484: LD_ADDR_EXP 54
27488: PUSH
27489: LD_EXP 54
27493: PPUSH
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_EXP 54
27503: PUSH
27504: LD_VAR 0 2
27508: ARRAY
27509: PPUSH
27510: LD_VAR 0 3
27514: PPUSH
27515: LD_INT 1
27517: PPUSH
27518: LD_INT 0
27520: PPUSH
27521: CALL 53099 0 4
27525: PPUSH
27526: CALL_OW 1
27530: ST_TO_ADDR
// break ;
27531: GO 27535
// end ;
27533: GO 27455
27535: POP
27536: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
27537: LD_EXP 54
27541: PUSH
27542: LD_VAR 0 2
27546: ARRAY
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: PUSH
27552: LD_INT 1
27554: ARRAY
27555: PUSH
27556: LD_INT 0
27558: EQUAL
27559: PUSH
27560: LD_VAR 0 5
27564: PUSH
27565: LD_VAR 0 5
27569: PPUSH
27570: LD_EXP 54
27574: PUSH
27575: LD_VAR 0 2
27579: ARRAY
27580: PUSH
27581: LD_INT 1
27583: ARRAY
27584: PUSH
27585: LD_INT 1
27587: ARRAY
27588: PPUSH
27589: LD_EXP 54
27593: PUSH
27594: LD_VAR 0 2
27598: ARRAY
27599: PUSH
27600: LD_INT 1
27602: ARRAY
27603: PUSH
27604: LD_INT 2
27606: ARRAY
27607: PPUSH
27608: LD_EXP 54
27612: PUSH
27613: LD_VAR 0 2
27617: ARRAY
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: PUSH
27623: LD_INT 3
27625: ARRAY
27626: PPUSH
27627: LD_EXP 54
27631: PUSH
27632: LD_VAR 0 2
27636: ARRAY
27637: PUSH
27638: LD_INT 1
27640: ARRAY
27641: PUSH
27642: LD_INT 4
27644: ARRAY
27645: PPUSH
27646: CALL 61096 0 5
27650: AND
27651: OR
27652: IFFALSE 27933
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27654: LD_ADDR_VAR 0 4
27658: PUSH
27659: LD_EXP 49
27663: PUSH
27664: LD_VAR 0 2
27668: ARRAY
27669: PPUSH
27670: LD_INT 25
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PPUSH
27680: CALL_OW 72
27684: PUSH
27685: LD_EXP 51
27689: PUSH
27690: LD_VAR 0 2
27694: ARRAY
27695: DIFF
27696: ST_TO_ADDR
// if not tmp then
27697: LD_VAR 0 4
27701: NOT
27702: IFFALSE 27706
// continue ;
27704: GO 26951
// for j in tmp do
27706: LD_ADDR_VAR 0 3
27710: PUSH
27711: LD_VAR 0 4
27715: PUSH
27716: FOR_IN
27717: IFFALSE 27929
// begin if not mc_builders [ i ] then
27719: LD_EXP 55
27723: PUSH
27724: LD_VAR 0 2
27728: ARRAY
27729: NOT
27730: IFFALSE 27788
// begin SetTag ( j , 103 ) ;
27732: LD_VAR 0 3
27736: PPUSH
27737: LD_INT 103
27739: PPUSH
27740: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27744: LD_ADDR_EXP 55
27748: PUSH
27749: LD_EXP 55
27753: PPUSH
27754: LD_VAR 0 2
27758: PUSH
27759: LD_EXP 55
27763: PUSH
27764: LD_VAR 0 2
27768: ARRAY
27769: PUSH
27770: LD_INT 1
27772: PLUS
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PPUSH
27778: LD_VAR 0 3
27782: PPUSH
27783: CALL 53681 0 3
27787: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27788: LD_VAR 0 3
27792: PPUSH
27793: CALL_OW 310
27797: IFFALSE 27808
// ComExitBuilding ( j ) ;
27799: LD_VAR 0 3
27803: PPUSH
27804: CALL_OW 122
// wait ( 3 ) ;
27808: LD_INT 3
27810: PPUSH
27811: CALL_OW 67
// if not mc_build_list [ i ] then
27815: LD_EXP 54
27819: PUSH
27820: LD_VAR 0 2
27824: ARRAY
27825: NOT
27826: IFFALSE 27830
// break ;
27828: GO 27929
// if not HasTask ( j ) then
27830: LD_VAR 0 3
27834: PPUSH
27835: CALL_OW 314
27839: NOT
27840: IFFALSE 27927
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
27842: LD_VAR 0 3
27846: PPUSH
27847: LD_EXP 54
27851: PUSH
27852: LD_VAR 0 2
27856: ARRAY
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PUSH
27862: LD_INT 1
27864: ARRAY
27865: PPUSH
27866: LD_EXP 54
27870: PUSH
27871: LD_VAR 0 2
27875: ARRAY
27876: PUSH
27877: LD_INT 1
27879: ARRAY
27880: PUSH
27881: LD_INT 2
27883: ARRAY
27884: PPUSH
27885: LD_EXP 54
27889: PUSH
27890: LD_VAR 0 2
27894: ARRAY
27895: PUSH
27896: LD_INT 1
27898: ARRAY
27899: PUSH
27900: LD_INT 3
27902: ARRAY
27903: PPUSH
27904: LD_EXP 54
27908: PUSH
27909: LD_VAR 0 2
27913: ARRAY
27914: PUSH
27915: LD_INT 1
27917: ARRAY
27918: PUSH
27919: LD_INT 4
27921: ARRAY
27922: PPUSH
27923: CALL_OW 145
// end ;
27927: GO 27716
27929: POP
27930: POP
// end else
27931: GO 28075
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
27933: LD_EXP 49
27937: PUSH
27938: LD_VAR 0 2
27942: ARRAY
27943: PPUSH
27944: LD_EXP 54
27948: PUSH
27949: LD_VAR 0 2
27953: ARRAY
27954: PUSH
27955: LD_INT 1
27957: ARRAY
27958: PUSH
27959: LD_INT 1
27961: ARRAY
27962: PPUSH
27963: LD_EXP 54
27967: PUSH
27968: LD_VAR 0 2
27972: ARRAY
27973: PUSH
27974: LD_INT 1
27976: ARRAY
27977: PUSH
27978: LD_INT 2
27980: ARRAY
27981: PPUSH
27982: LD_EXP 54
27986: PUSH
27987: LD_VAR 0 2
27991: ARRAY
27992: PUSH
27993: LD_INT 1
27995: ARRAY
27996: PUSH
27997: LD_INT 3
27999: ARRAY
28000: PPUSH
28001: LD_EXP 54
28005: PUSH
28006: LD_VAR 0 2
28010: ARRAY
28011: PUSH
28012: LD_INT 1
28014: ARRAY
28015: PUSH
28016: LD_INT 4
28018: ARRAY
28019: PPUSH
28020: CALL 60432 0 5
28024: NOT
28025: IFFALSE 28075
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
28027: LD_ADDR_EXP 54
28031: PUSH
28032: LD_EXP 54
28036: PPUSH
28037: LD_VAR 0 2
28041: PPUSH
28042: LD_EXP 54
28046: PUSH
28047: LD_VAR 0 2
28051: ARRAY
28052: PPUSH
28053: LD_INT 1
28055: PPUSH
28056: LD_INT 1
28058: NEG
28059: PPUSH
28060: LD_INT 0
28062: PPUSH
28063: CALL 53099 0 4
28067: PPUSH
28068: CALL_OW 1
28072: ST_TO_ADDR
// continue ;
28073: GO 26951
// end ; end ; end ;
28075: GO 26951
28077: POP
28078: POP
// end ;
28079: LD_VAR 0 1
28083: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
28084: LD_INT 0
28086: PPUSH
28087: PPUSH
28088: PPUSH
28089: PPUSH
28090: PPUSH
28091: PPUSH
// if not mc_bases then
28092: LD_EXP 49
28096: NOT
28097: IFFALSE 28101
// exit ;
28099: GO 28528
// for i = 1 to mc_bases do
28101: LD_ADDR_VAR 0 2
28105: PUSH
28106: DOUBLE
28107: LD_INT 1
28109: DEC
28110: ST_TO_ADDR
28111: LD_EXP 49
28115: PUSH
28116: FOR_TO
28117: IFFALSE 28526
// begin tmp := mc_build_upgrade [ i ] ;
28119: LD_ADDR_VAR 0 4
28123: PUSH
28124: LD_EXP 81
28128: PUSH
28129: LD_VAR 0 2
28133: ARRAY
28134: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28135: LD_ADDR_VAR 0 6
28139: PUSH
28140: LD_EXP 82
28144: PUSH
28145: LD_VAR 0 2
28149: ARRAY
28150: PPUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 30
28156: PUSH
28157: LD_INT 6
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 30
28166: PUSH
28167: LD_INT 7
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 72
28183: ST_TO_ADDR
// if not tmp and not lab then
28184: LD_VAR 0 4
28188: NOT
28189: PUSH
28190: LD_VAR 0 6
28194: NOT
28195: AND
28196: IFFALSE 28200
// continue ;
28198: GO 28116
// if tmp then
28200: LD_VAR 0 4
28204: IFFALSE 28324
// for j in tmp do
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: LD_VAR 0 4
28215: PUSH
28216: FOR_IN
28217: IFFALSE 28322
// begin if UpgradeCost ( j ) then
28219: LD_VAR 0 3
28223: PPUSH
28224: CALL 60092 0 1
28228: IFFALSE 28320
// begin ComUpgrade ( j ) ;
28230: LD_VAR 0 3
28234: PPUSH
28235: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28239: LD_ADDR_EXP 81
28243: PUSH
28244: LD_EXP 81
28248: PPUSH
28249: LD_VAR 0 2
28253: PPUSH
28254: LD_EXP 81
28258: PUSH
28259: LD_VAR 0 2
28263: ARRAY
28264: PUSH
28265: LD_VAR 0 3
28269: DIFF
28270: PPUSH
28271: CALL_OW 1
28275: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28276: LD_ADDR_EXP 56
28280: PUSH
28281: LD_EXP 56
28285: PPUSH
28286: LD_VAR 0 2
28290: PUSH
28291: LD_EXP 56
28295: PUSH
28296: LD_VAR 0 2
28300: ARRAY
28301: PUSH
28302: LD_INT 1
28304: PLUS
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PPUSH
28310: LD_VAR 0 3
28314: PPUSH
28315: CALL 53681 0 3
28319: ST_TO_ADDR
// end ; end ;
28320: GO 28216
28322: POP
28323: POP
// if not lab or not mc_lab_upgrade [ i ] then
28324: LD_VAR 0 6
28328: NOT
28329: PUSH
28330: LD_EXP 83
28334: PUSH
28335: LD_VAR 0 2
28339: ARRAY
28340: NOT
28341: OR
28342: IFFALSE 28346
// continue ;
28344: GO 28116
// for j in lab do
28346: LD_ADDR_VAR 0 3
28350: PUSH
28351: LD_VAR 0 6
28355: PUSH
28356: FOR_IN
28357: IFFALSE 28522
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
28359: LD_VAR 0 3
28363: PPUSH
28364: CALL_OW 266
28368: PUSH
28369: LD_INT 6
28371: PUSH
28372: LD_INT 7
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: IN
28379: PUSH
28380: LD_VAR 0 3
28384: PPUSH
28385: CALL_OW 461
28389: PUSH
28390: LD_INT 1
28392: NONEQUAL
28393: AND
28394: IFFALSE 28520
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
28396: LD_VAR 0 3
28400: PPUSH
28401: LD_EXP 83
28405: PUSH
28406: LD_VAR 0 2
28410: ARRAY
28411: PUSH
28412: LD_INT 1
28414: ARRAY
28415: PPUSH
28416: CALL 60297 0 2
28420: IFFALSE 28520
// begin ComCancel ( j ) ;
28422: LD_VAR 0 3
28426: PPUSH
28427: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
28431: LD_VAR 0 3
28435: PPUSH
28436: LD_EXP 83
28440: PUSH
28441: LD_VAR 0 2
28445: ARRAY
28446: PUSH
28447: LD_INT 1
28449: ARRAY
28450: PPUSH
28451: CALL_OW 207
// if not j in mc_construct_list [ i ] then
28455: LD_VAR 0 3
28459: PUSH
28460: LD_EXP 56
28464: PUSH
28465: LD_VAR 0 2
28469: ARRAY
28470: IN
28471: NOT
28472: IFFALSE 28518
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28474: LD_ADDR_EXP 56
28478: PUSH
28479: LD_EXP 56
28483: PPUSH
28484: LD_VAR 0 2
28488: PUSH
28489: LD_EXP 56
28493: PUSH
28494: LD_VAR 0 2
28498: ARRAY
28499: PUSH
28500: LD_INT 1
28502: PLUS
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PPUSH
28508: LD_VAR 0 3
28512: PPUSH
28513: CALL 53681 0 3
28517: ST_TO_ADDR
// break ;
28518: GO 28522
// end ; end ; end ;
28520: GO 28356
28522: POP
28523: POP
// end ;
28524: GO 28116
28526: POP
28527: POP
// end ;
28528: LD_VAR 0 1
28532: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
28533: LD_INT 0
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
// if not mc_bases then
28544: LD_EXP 49
28548: NOT
28549: IFFALSE 28553
// exit ;
28551: GO 28958
// for i = 1 to mc_bases do
28553: LD_ADDR_VAR 0 2
28557: PUSH
28558: DOUBLE
28559: LD_INT 1
28561: DEC
28562: ST_TO_ADDR
28563: LD_EXP 49
28567: PUSH
28568: FOR_TO
28569: IFFALSE 28956
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
28571: LD_EXP 57
28575: PUSH
28576: LD_VAR 0 2
28580: ARRAY
28581: NOT
28582: PUSH
28583: LD_EXP 49
28587: PUSH
28588: LD_VAR 0 2
28592: ARRAY
28593: PPUSH
28594: LD_INT 30
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PPUSH
28604: CALL_OW 72
28608: NOT
28609: OR
28610: IFFALSE 28614
// continue ;
28612: GO 28568
// busy := false ;
28614: LD_ADDR_VAR 0 8
28618: PUSH
28619: LD_INT 0
28621: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
28622: LD_ADDR_VAR 0 4
28626: PUSH
28627: LD_EXP 49
28631: PUSH
28632: LD_VAR 0 2
28636: ARRAY
28637: PPUSH
28638: LD_INT 30
28640: PUSH
28641: LD_INT 3
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PPUSH
28648: CALL_OW 72
28652: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
28653: LD_ADDR_VAR 0 6
28657: PUSH
28658: LD_EXP 57
28662: PUSH
28663: LD_VAR 0 2
28667: ARRAY
28668: PPUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 30
28674: PUSH
28675: LD_INT 32
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 30
28684: PUSH
28685: LD_INT 33
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: PPUSH
28697: CALL_OW 72
28701: ST_TO_ADDR
// if not t then
28702: LD_VAR 0 6
28706: NOT
28707: IFFALSE 28711
// continue ;
28709: GO 28568
// for j in tmp do
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: LD_VAR 0 4
28720: PUSH
28721: FOR_IN
28722: IFFALSE 28752
// if not BuildingStatus ( j ) = bs_idle then
28724: LD_VAR 0 3
28728: PPUSH
28729: CALL_OW 461
28733: PUSH
28734: LD_INT 2
28736: EQUAL
28737: NOT
28738: IFFALSE 28750
// begin busy := true ;
28740: LD_ADDR_VAR 0 8
28744: PUSH
28745: LD_INT 1
28747: ST_TO_ADDR
// break ;
28748: GO 28752
// end ;
28750: GO 28721
28752: POP
28753: POP
// if busy then
28754: LD_VAR 0 8
28758: IFFALSE 28762
// continue ;
28760: GO 28568
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
28762: LD_ADDR_VAR 0 7
28766: PUSH
28767: LD_VAR 0 6
28771: PPUSH
28772: LD_INT 35
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 72
28786: ST_TO_ADDR
// if tw then
28787: LD_VAR 0 7
28791: IFFALSE 28868
// begin tw := tw [ 1 ] ;
28793: LD_ADDR_VAR 0 7
28797: PUSH
28798: LD_VAR 0 7
28802: PUSH
28803: LD_INT 1
28805: ARRAY
28806: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
28807: LD_ADDR_VAR 0 9
28811: PUSH
28812: LD_VAR 0 7
28816: PPUSH
28817: LD_EXP 74
28821: PUSH
28822: LD_VAR 0 2
28826: ARRAY
28827: PPUSH
28828: CALL 58651 0 2
28832: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
28833: LD_EXP 88
28837: PUSH
28838: LD_VAR 0 2
28842: ARRAY
28843: IFFALSE 28866
// if not weapon in mc_allowed_tower_weapons [ i ] then
28845: LD_VAR 0 9
28849: PUSH
28850: LD_EXP 88
28854: PUSH
28855: LD_VAR 0 2
28859: ARRAY
28860: IN
28861: NOT
28862: IFFALSE 28866
// continue ;
28864: GO 28568
// end else
28866: GO 28931
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
28868: LD_ADDR_VAR 0 5
28872: PUSH
28873: LD_EXP 57
28877: PUSH
28878: LD_VAR 0 2
28882: ARRAY
28883: PPUSH
28884: LD_VAR 0 4
28888: PPUSH
28889: CALL 88852 0 2
28893: ST_TO_ADDR
// if not tmp2 then
28894: LD_VAR 0 5
28898: NOT
28899: IFFALSE 28903
// continue ;
28901: GO 28568
// tw := tmp2 [ 1 ] ;
28903: LD_ADDR_VAR 0 7
28907: PUSH
28908: LD_VAR 0 5
28912: PUSH
28913: LD_INT 1
28915: ARRAY
28916: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
28917: LD_ADDR_VAR 0 9
28921: PUSH
28922: LD_VAR 0 5
28926: PUSH
28927: LD_INT 2
28929: ARRAY
28930: ST_TO_ADDR
// end ; if not weapon then
28931: LD_VAR 0 9
28935: NOT
28936: IFFALSE 28940
// continue ;
28938: GO 28568
// ComPlaceWeapon ( tw , weapon ) ;
28940: LD_VAR 0 7
28944: PPUSH
28945: LD_VAR 0 9
28949: PPUSH
28950: CALL_OW 148
// end ;
28954: GO 28568
28956: POP
28957: POP
// end ;
28958: LD_VAR 0 1
28962: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
28963: LD_INT 0
28965: PPUSH
28966: PPUSH
28967: PPUSH
28968: PPUSH
28969: PPUSH
28970: PPUSH
// if not mc_bases then
28971: LD_EXP 49
28975: NOT
28976: IFFALSE 28980
// exit ;
28978: GO 29992
// for i = 1 to mc_bases do
28980: LD_ADDR_VAR 0 2
28984: PUSH
28985: DOUBLE
28986: LD_INT 1
28988: DEC
28989: ST_TO_ADDR
28990: LD_EXP 49
28994: PUSH
28995: FOR_TO
28996: IFFALSE 29990
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
28998: LD_EXP 62
29002: PUSH
29003: LD_VAR 0 2
29007: ARRAY
29008: NOT
29009: PUSH
29010: LD_EXP 62
29014: PUSH
29015: LD_VAR 0 2
29019: ARRAY
29020: PUSH
29021: LD_EXP 63
29025: PUSH
29026: LD_VAR 0 2
29030: ARRAY
29031: EQUAL
29032: OR
29033: IFFALSE 29037
// continue ;
29035: GO 28995
// if mc_miners [ i ] then
29037: LD_EXP 63
29041: PUSH
29042: LD_VAR 0 2
29046: ARRAY
29047: IFFALSE 29677
// begin k := 1 ;
29049: LD_ADDR_VAR 0 4
29053: PUSH
29054: LD_INT 1
29056: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
29057: LD_ADDR_VAR 0 3
29061: PUSH
29062: DOUBLE
29063: LD_EXP 63
29067: PUSH
29068: LD_VAR 0 2
29072: ARRAY
29073: INC
29074: ST_TO_ADDR
29075: LD_INT 1
29077: PUSH
29078: FOR_DOWNTO
29079: IFFALSE 29675
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
29081: LD_EXP 63
29085: PUSH
29086: LD_VAR 0 2
29090: ARRAY
29091: PUSH
29092: LD_VAR 0 3
29096: ARRAY
29097: PPUSH
29098: CALL_OW 301
29102: PUSH
29103: LD_EXP 63
29107: PUSH
29108: LD_VAR 0 2
29112: ARRAY
29113: PUSH
29114: LD_VAR 0 3
29118: ARRAY
29119: PPUSH
29120: CALL_OW 257
29124: PUSH
29125: LD_INT 1
29127: NONEQUAL
29128: OR
29129: IFFALSE 29192
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29131: LD_ADDR_VAR 0 5
29135: PUSH
29136: LD_EXP 63
29140: PUSH
29141: LD_VAR 0 2
29145: ARRAY
29146: PUSH
29147: LD_EXP 63
29151: PUSH
29152: LD_VAR 0 2
29156: ARRAY
29157: PUSH
29158: LD_VAR 0 3
29162: ARRAY
29163: DIFF
29164: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29165: LD_ADDR_EXP 63
29169: PUSH
29170: LD_EXP 63
29174: PPUSH
29175: LD_VAR 0 2
29179: PPUSH
29180: LD_VAR 0 5
29184: PPUSH
29185: CALL_OW 1
29189: ST_TO_ADDR
// continue ;
29190: GO 29078
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
29192: LD_EXP 63
29196: PUSH
29197: LD_VAR 0 2
29201: ARRAY
29202: PUSH
29203: LD_VAR 0 3
29207: ARRAY
29208: PPUSH
29209: CALL 53617 0 1
29213: PUSH
29214: LD_EXP 63
29218: PUSH
29219: LD_VAR 0 2
29223: ARRAY
29224: PUSH
29225: LD_VAR 0 3
29229: ARRAY
29230: PPUSH
29231: CALL_OW 255
29235: PPUSH
29236: LD_EXP 62
29240: PUSH
29241: LD_VAR 0 2
29245: ARRAY
29246: PUSH
29247: LD_VAR 0 4
29251: ARRAY
29252: PUSH
29253: LD_INT 1
29255: ARRAY
29256: PPUSH
29257: LD_EXP 62
29261: PUSH
29262: LD_VAR 0 2
29266: ARRAY
29267: PUSH
29268: LD_VAR 0 4
29272: ARRAY
29273: PUSH
29274: LD_INT 2
29276: ARRAY
29277: PPUSH
29278: LD_INT 15
29280: PPUSH
29281: CALL 54577 0 4
29285: PUSH
29286: LD_INT 4
29288: ARRAY
29289: PUSH
29290: LD_EXP 63
29294: PUSH
29295: LD_VAR 0 2
29299: ARRAY
29300: PUSH
29301: LD_VAR 0 3
29305: ARRAY
29306: PPUSH
29307: LD_INT 10
29309: PPUSH
29310: CALL 56274 0 2
29314: PUSH
29315: LD_INT 4
29317: ARRAY
29318: OR
29319: AND
29320: IFFALSE 29343
// ComStop ( mc_miners [ i ] [ j ] ) ;
29322: LD_EXP 63
29326: PUSH
29327: LD_VAR 0 2
29331: ARRAY
29332: PUSH
29333: LD_VAR 0 3
29337: ARRAY
29338: PPUSH
29339: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
29343: LD_EXP 63
29347: PUSH
29348: LD_VAR 0 2
29352: ARRAY
29353: PUSH
29354: LD_VAR 0 3
29358: ARRAY
29359: PPUSH
29360: CALL_OW 257
29364: PUSH
29365: LD_INT 1
29367: EQUAL
29368: PUSH
29369: LD_EXP 63
29373: PUSH
29374: LD_VAR 0 2
29378: ARRAY
29379: PUSH
29380: LD_VAR 0 3
29384: ARRAY
29385: PPUSH
29386: CALL_OW 459
29390: NOT
29391: AND
29392: PUSH
29393: LD_EXP 63
29397: PUSH
29398: LD_VAR 0 2
29402: ARRAY
29403: PUSH
29404: LD_VAR 0 3
29408: ARRAY
29409: PPUSH
29410: CALL_OW 255
29414: PPUSH
29415: LD_EXP 62
29419: PUSH
29420: LD_VAR 0 2
29424: ARRAY
29425: PUSH
29426: LD_VAR 0 4
29430: ARRAY
29431: PUSH
29432: LD_INT 1
29434: ARRAY
29435: PPUSH
29436: LD_EXP 62
29440: PUSH
29441: LD_VAR 0 2
29445: ARRAY
29446: PUSH
29447: LD_VAR 0 4
29451: ARRAY
29452: PUSH
29453: LD_INT 2
29455: ARRAY
29456: PPUSH
29457: LD_INT 15
29459: PPUSH
29460: CALL 54577 0 4
29464: PUSH
29465: LD_INT 4
29467: ARRAY
29468: PUSH
29469: LD_INT 0
29471: EQUAL
29472: AND
29473: PUSH
29474: LD_EXP 63
29478: PUSH
29479: LD_VAR 0 2
29483: ARRAY
29484: PUSH
29485: LD_VAR 0 3
29489: ARRAY
29490: PPUSH
29491: CALL_OW 314
29495: NOT
29496: AND
29497: IFFALSE 29673
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29499: LD_EXP 63
29503: PUSH
29504: LD_VAR 0 2
29508: ARRAY
29509: PUSH
29510: LD_VAR 0 3
29514: ARRAY
29515: PPUSH
29516: CALL_OW 310
29520: IFFALSE 29543
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
29522: LD_EXP 63
29526: PUSH
29527: LD_VAR 0 2
29531: ARRAY
29532: PUSH
29533: LD_VAR 0 3
29537: ARRAY
29538: PPUSH
29539: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
29543: LD_EXP 63
29547: PUSH
29548: LD_VAR 0 2
29552: ARRAY
29553: PUSH
29554: LD_VAR 0 3
29558: ARRAY
29559: PPUSH
29560: CALL_OW 314
29564: NOT
29565: IFFALSE 29633
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
29567: LD_EXP 63
29571: PUSH
29572: LD_VAR 0 2
29576: ARRAY
29577: PUSH
29578: LD_VAR 0 3
29582: ARRAY
29583: PPUSH
29584: LD_EXP 62
29588: PUSH
29589: LD_VAR 0 2
29593: ARRAY
29594: PUSH
29595: LD_VAR 0 4
29599: ARRAY
29600: PUSH
29601: LD_INT 1
29603: ARRAY
29604: PPUSH
29605: LD_EXP 62
29609: PUSH
29610: LD_VAR 0 2
29614: ARRAY
29615: PUSH
29616: LD_VAR 0 4
29620: ARRAY
29621: PUSH
29622: LD_INT 2
29624: ARRAY
29625: PPUSH
29626: LD_INT 0
29628: PPUSH
29629: CALL_OW 193
// k := k + 1 ;
29633: LD_ADDR_VAR 0 4
29637: PUSH
29638: LD_VAR 0 4
29642: PUSH
29643: LD_INT 1
29645: PLUS
29646: ST_TO_ADDR
// if k > mc_mines [ i ] then
29647: LD_VAR 0 4
29651: PUSH
29652: LD_EXP 62
29656: PUSH
29657: LD_VAR 0 2
29661: ARRAY
29662: GREATER
29663: IFFALSE 29673
// k := 1 ;
29665: LD_ADDR_VAR 0 4
29669: PUSH
29670: LD_INT 1
29672: ST_TO_ADDR
// end ; end ;
29673: GO 29078
29675: POP
29676: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
29677: LD_ADDR_VAR 0 5
29681: PUSH
29682: LD_EXP 49
29686: PUSH
29687: LD_VAR 0 2
29691: ARRAY
29692: PPUSH
29693: LD_INT 2
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 4
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 30
29708: PUSH
29709: LD_INT 5
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 30
29718: PUSH
29719: LD_INT 32
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: PPUSH
29732: CALL_OW 72
29736: ST_TO_ADDR
// if not tmp then
29737: LD_VAR 0 5
29741: NOT
29742: IFFALSE 29746
// continue ;
29744: GO 28995
// list := [ ] ;
29746: LD_ADDR_VAR 0 6
29750: PUSH
29751: EMPTY
29752: ST_TO_ADDR
// for j in tmp do
29753: LD_ADDR_VAR 0 3
29757: PUSH
29758: LD_VAR 0 5
29762: PUSH
29763: FOR_IN
29764: IFFALSE 29833
// begin for k in UnitsInside ( j ) do
29766: LD_ADDR_VAR 0 4
29770: PUSH
29771: LD_VAR 0 3
29775: PPUSH
29776: CALL_OW 313
29780: PUSH
29781: FOR_IN
29782: IFFALSE 29829
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
29784: LD_VAR 0 4
29788: PPUSH
29789: CALL_OW 257
29793: PUSH
29794: LD_INT 1
29796: EQUAL
29797: PUSH
29798: LD_VAR 0 4
29802: PPUSH
29803: CALL_OW 459
29807: NOT
29808: AND
29809: IFFALSE 29827
// list := list ^ k ;
29811: LD_ADDR_VAR 0 6
29815: PUSH
29816: LD_VAR 0 6
29820: PUSH
29821: LD_VAR 0 4
29825: ADD
29826: ST_TO_ADDR
29827: GO 29781
29829: POP
29830: POP
// end ;
29831: GO 29763
29833: POP
29834: POP
// list := list diff mc_miners [ i ] ;
29835: LD_ADDR_VAR 0 6
29839: PUSH
29840: LD_VAR 0 6
29844: PUSH
29845: LD_EXP 63
29849: PUSH
29850: LD_VAR 0 2
29854: ARRAY
29855: DIFF
29856: ST_TO_ADDR
// if not list then
29857: LD_VAR 0 6
29861: NOT
29862: IFFALSE 29866
// continue ;
29864: GO 28995
// k := mc_mines [ i ] - mc_miners [ i ] ;
29866: LD_ADDR_VAR 0 4
29870: PUSH
29871: LD_EXP 62
29875: PUSH
29876: LD_VAR 0 2
29880: ARRAY
29881: PUSH
29882: LD_EXP 63
29886: PUSH
29887: LD_VAR 0 2
29891: ARRAY
29892: MINUS
29893: ST_TO_ADDR
// if k > list then
29894: LD_VAR 0 4
29898: PUSH
29899: LD_VAR 0 6
29903: GREATER
29904: IFFALSE 29916
// k := list ;
29906: LD_ADDR_VAR 0 4
29910: PUSH
29911: LD_VAR 0 6
29915: ST_TO_ADDR
// for j = 1 to k do
29916: LD_ADDR_VAR 0 3
29920: PUSH
29921: DOUBLE
29922: LD_INT 1
29924: DEC
29925: ST_TO_ADDR
29926: LD_VAR 0 4
29930: PUSH
29931: FOR_TO
29932: IFFALSE 29986
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
29934: LD_ADDR_EXP 63
29938: PUSH
29939: LD_EXP 63
29943: PPUSH
29944: LD_VAR 0 2
29948: PUSH
29949: LD_EXP 63
29953: PUSH
29954: LD_VAR 0 2
29958: ARRAY
29959: PUSH
29960: LD_INT 1
29962: PLUS
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PPUSH
29968: LD_VAR 0 6
29972: PUSH
29973: LD_VAR 0 3
29977: ARRAY
29978: PPUSH
29979: CALL 53681 0 3
29983: ST_TO_ADDR
29984: GO 29931
29986: POP
29987: POP
// end ;
29988: GO 28995
29990: POP
29991: POP
// end ;
29992: LD_VAR 0 1
29996: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
29997: LD_INT 0
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
// if not mc_bases then
30009: LD_EXP 49
30013: NOT
30014: IFFALSE 30018
// exit ;
30016: GO 31768
// for i = 1 to mc_bases do
30018: LD_ADDR_VAR 0 2
30022: PUSH
30023: DOUBLE
30024: LD_INT 1
30026: DEC
30027: ST_TO_ADDR
30028: LD_EXP 49
30032: PUSH
30033: FOR_TO
30034: IFFALSE 31766
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
30036: LD_EXP 49
30040: PUSH
30041: LD_VAR 0 2
30045: ARRAY
30046: NOT
30047: PUSH
30048: LD_EXP 56
30052: PUSH
30053: LD_VAR 0 2
30057: ARRAY
30058: OR
30059: IFFALSE 30063
// continue ;
30061: GO 30033
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
30063: LD_EXP 65
30067: PUSH
30068: LD_VAR 0 2
30072: ARRAY
30073: NOT
30074: PUSH
30075: LD_EXP 66
30079: PUSH
30080: LD_VAR 0 2
30084: ARRAY
30085: AND
30086: IFFALSE 30124
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
30088: LD_ADDR_EXP 66
30092: PUSH
30093: LD_EXP 66
30097: PPUSH
30098: LD_VAR 0 2
30102: PPUSH
30103: EMPTY
30104: PPUSH
30105: CALL_OW 1
30109: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30110: LD_VAR 0 2
30114: PPUSH
30115: LD_INT 107
30117: PPUSH
30118: CALL 20878 0 2
// continue ;
30122: GO 30033
// end ; target := [ ] ;
30124: LD_ADDR_VAR 0 6
30128: PUSH
30129: EMPTY
30130: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: DOUBLE
30137: LD_EXP 65
30141: PUSH
30142: LD_VAR 0 2
30146: ARRAY
30147: INC
30148: ST_TO_ADDR
30149: LD_INT 1
30151: PUSH
30152: FOR_DOWNTO
30153: IFFALSE 30413
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30155: LD_EXP 65
30159: PUSH
30160: LD_VAR 0 2
30164: ARRAY
30165: PUSH
30166: LD_VAR 0 3
30170: ARRAY
30171: PUSH
30172: LD_INT 2
30174: ARRAY
30175: PPUSH
30176: LD_EXP 65
30180: PUSH
30181: LD_VAR 0 2
30185: ARRAY
30186: PUSH
30187: LD_VAR 0 3
30191: ARRAY
30192: PUSH
30193: LD_INT 3
30195: ARRAY
30196: PPUSH
30197: CALL_OW 488
30201: PUSH
30202: LD_EXP 65
30206: PUSH
30207: LD_VAR 0 2
30211: ARRAY
30212: PUSH
30213: LD_VAR 0 3
30217: ARRAY
30218: PUSH
30219: LD_INT 2
30221: ARRAY
30222: PPUSH
30223: LD_EXP 65
30227: PUSH
30228: LD_VAR 0 2
30232: ARRAY
30233: PUSH
30234: LD_VAR 0 3
30238: ARRAY
30239: PUSH
30240: LD_INT 3
30242: ARRAY
30243: PPUSH
30244: CALL_OW 284
30248: PUSH
30249: LD_INT 0
30251: EQUAL
30252: AND
30253: IFFALSE 30308
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30255: LD_ADDR_VAR 0 5
30259: PUSH
30260: LD_EXP 65
30264: PUSH
30265: LD_VAR 0 2
30269: ARRAY
30270: PPUSH
30271: LD_VAR 0 3
30275: PPUSH
30276: CALL_OW 3
30280: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30281: LD_ADDR_EXP 65
30285: PUSH
30286: LD_EXP 65
30290: PPUSH
30291: LD_VAR 0 2
30295: PPUSH
30296: LD_VAR 0 5
30300: PPUSH
30301: CALL_OW 1
30305: ST_TO_ADDR
// continue ;
30306: GO 30152
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30308: LD_EXP 49
30312: PUSH
30313: LD_VAR 0 2
30317: ARRAY
30318: PUSH
30319: LD_INT 1
30321: ARRAY
30322: PPUSH
30323: CALL_OW 255
30327: PPUSH
30328: LD_EXP 65
30332: PUSH
30333: LD_VAR 0 2
30337: ARRAY
30338: PUSH
30339: LD_VAR 0 3
30343: ARRAY
30344: PUSH
30345: LD_INT 2
30347: ARRAY
30348: PPUSH
30349: LD_EXP 65
30353: PUSH
30354: LD_VAR 0 2
30358: ARRAY
30359: PUSH
30360: LD_VAR 0 3
30364: ARRAY
30365: PUSH
30366: LD_INT 3
30368: ARRAY
30369: PPUSH
30370: LD_INT 30
30372: PPUSH
30373: CALL 54577 0 4
30377: PUSH
30378: LD_INT 4
30380: ARRAY
30381: PUSH
30382: LD_INT 0
30384: EQUAL
30385: IFFALSE 30411
// begin target := mc_crates [ i ] [ j ] ;
30387: LD_ADDR_VAR 0 6
30391: PUSH
30392: LD_EXP 65
30396: PUSH
30397: LD_VAR 0 2
30401: ARRAY
30402: PUSH
30403: LD_VAR 0 3
30407: ARRAY
30408: ST_TO_ADDR
// break ;
30409: GO 30413
// end ; end ;
30411: GO 30152
30413: POP
30414: POP
// if not target then
30415: LD_VAR 0 6
30419: NOT
30420: IFFALSE 30424
// continue ;
30422: GO 30033
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30424: LD_ADDR_VAR 0 7
30428: PUSH
30429: LD_EXP 68
30433: PUSH
30434: LD_VAR 0 2
30438: ARRAY
30439: PPUSH
30440: LD_INT 2
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: LD_INT 58
30448: PUSH
30449: EMPTY
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 61
30458: PUSH
30459: EMPTY
30460: LIST
30461: PUSH
30462: LD_INT 33
30464: PUSH
30465: LD_INT 5
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 33
30474: PUSH
30475: LD_INT 3
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 34
30494: PUSH
30495: LD_INT 32
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 34
30504: PUSH
30505: LD_INT 51
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 34
30514: PUSH
30515: LD_INT 12
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PPUSH
30532: CALL_OW 72
30536: ST_TO_ADDR
// if not cargo then
30537: LD_VAR 0 7
30541: NOT
30542: IFFALSE 31185
// begin if mc_crates_collector [ i ] < 5 then
30544: LD_EXP 66
30548: PUSH
30549: LD_VAR 0 2
30553: ARRAY
30554: PUSH
30555: LD_INT 5
30557: LESS
30558: IFFALSE 30924
// begin if mc_ape [ i ] then
30560: LD_EXP 78
30564: PUSH
30565: LD_VAR 0 2
30569: ARRAY
30570: IFFALSE 30617
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
30572: LD_ADDR_VAR 0 5
30576: PUSH
30577: LD_EXP 78
30581: PUSH
30582: LD_VAR 0 2
30586: ARRAY
30587: PPUSH
30588: LD_INT 25
30590: PUSH
30591: LD_INT 16
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 24
30600: PUSH
30601: LD_INT 750
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PPUSH
30612: CALL_OW 72
30616: ST_TO_ADDR
// if not tmp then
30617: LD_VAR 0 5
30621: NOT
30622: IFFALSE 30669
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
30624: LD_ADDR_VAR 0 5
30628: PUSH
30629: LD_EXP 49
30633: PUSH
30634: LD_VAR 0 2
30638: ARRAY
30639: PPUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 24
30652: PUSH
30653: LD_INT 750
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PPUSH
30664: CALL_OW 72
30668: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
30669: LD_EXP 78
30673: PUSH
30674: LD_VAR 0 2
30678: ARRAY
30679: PUSH
30680: LD_EXP 49
30684: PUSH
30685: LD_VAR 0 2
30689: ARRAY
30690: PPUSH
30691: LD_INT 25
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 24
30703: PUSH
30704: LD_INT 750
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PPUSH
30715: CALL_OW 72
30719: AND
30720: PUSH
30721: LD_VAR 0 5
30725: PUSH
30726: LD_INT 5
30728: LESS
30729: AND
30730: IFFALSE 30812
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
30732: LD_ADDR_VAR 0 3
30736: PUSH
30737: LD_EXP 49
30741: PUSH
30742: LD_VAR 0 2
30746: ARRAY
30747: PPUSH
30748: LD_INT 25
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 24
30760: PUSH
30761: LD_INT 750
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PPUSH
30772: CALL_OW 72
30776: PUSH
30777: FOR_IN
30778: IFFALSE 30810
// begin tmp := tmp union j ;
30780: LD_ADDR_VAR 0 5
30784: PUSH
30785: LD_VAR 0 5
30789: PUSH
30790: LD_VAR 0 3
30794: UNION
30795: ST_TO_ADDR
// if tmp >= 5 then
30796: LD_VAR 0 5
30800: PUSH
30801: LD_INT 5
30803: GREATEREQUAL
30804: IFFALSE 30808
// break ;
30806: GO 30810
// end ;
30808: GO 30777
30810: POP
30811: POP
// end ; if not tmp then
30812: LD_VAR 0 5
30816: NOT
30817: IFFALSE 30821
// continue ;
30819: GO 30033
// for j in tmp do
30821: LD_ADDR_VAR 0 3
30825: PUSH
30826: LD_VAR 0 5
30830: PUSH
30831: FOR_IN
30832: IFFALSE 30922
// if not GetTag ( j ) then
30834: LD_VAR 0 3
30838: PPUSH
30839: CALL_OW 110
30843: NOT
30844: IFFALSE 30920
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
30846: LD_ADDR_EXP 66
30850: PUSH
30851: LD_EXP 66
30855: PPUSH
30856: LD_VAR 0 2
30860: PUSH
30861: LD_EXP 66
30865: PUSH
30866: LD_VAR 0 2
30870: ARRAY
30871: PUSH
30872: LD_INT 1
30874: PLUS
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PPUSH
30880: LD_VAR 0 3
30884: PPUSH
30885: CALL 53681 0 3
30889: ST_TO_ADDR
// SetTag ( j , 107 ) ;
30890: LD_VAR 0 3
30894: PPUSH
30895: LD_INT 107
30897: PPUSH
30898: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
30902: LD_EXP 66
30906: PUSH
30907: LD_VAR 0 2
30911: ARRAY
30912: PUSH
30913: LD_INT 5
30915: GREATEREQUAL
30916: IFFALSE 30920
// break ;
30918: GO 30922
// end ;
30920: GO 30831
30922: POP
30923: POP
// end ; if mc_crates_collector [ i ] and target then
30924: LD_EXP 66
30928: PUSH
30929: LD_VAR 0 2
30933: ARRAY
30934: PUSH
30935: LD_VAR 0 6
30939: AND
30940: IFFALSE 31183
// begin if mc_crates_collector [ i ] < target [ 1 ] then
30942: LD_EXP 66
30946: PUSH
30947: LD_VAR 0 2
30951: ARRAY
30952: PUSH
30953: LD_VAR 0 6
30957: PUSH
30958: LD_INT 1
30960: ARRAY
30961: LESS
30962: IFFALSE 30982
// tmp := mc_crates_collector [ i ] else
30964: LD_ADDR_VAR 0 5
30968: PUSH
30969: LD_EXP 66
30973: PUSH
30974: LD_VAR 0 2
30978: ARRAY
30979: ST_TO_ADDR
30980: GO 30996
// tmp := target [ 1 ] ;
30982: LD_ADDR_VAR 0 5
30986: PUSH
30987: LD_VAR 0 6
30991: PUSH
30992: LD_INT 1
30994: ARRAY
30995: ST_TO_ADDR
// k := 0 ;
30996: LD_ADDR_VAR 0 4
31000: PUSH
31001: LD_INT 0
31003: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
31004: LD_ADDR_VAR 0 3
31008: PUSH
31009: LD_EXP 66
31013: PUSH
31014: LD_VAR 0 2
31018: ARRAY
31019: PUSH
31020: FOR_IN
31021: IFFALSE 31181
// begin k := k + 1 ;
31023: LD_ADDR_VAR 0 4
31027: PUSH
31028: LD_VAR 0 4
31032: PUSH
31033: LD_INT 1
31035: PLUS
31036: ST_TO_ADDR
// if k > tmp then
31037: LD_VAR 0 4
31041: PUSH
31042: LD_VAR 0 5
31046: GREATER
31047: IFFALSE 31051
// break ;
31049: GO 31181
// if not GetClass ( j ) in [ 2 , 16 ] then
31051: LD_VAR 0 3
31055: PPUSH
31056: CALL_OW 257
31060: PUSH
31061: LD_INT 2
31063: PUSH
31064: LD_INT 16
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: IN
31071: NOT
31072: IFFALSE 31125
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
31074: LD_ADDR_EXP 66
31078: PUSH
31079: LD_EXP 66
31083: PPUSH
31084: LD_VAR 0 2
31088: PPUSH
31089: LD_EXP 66
31093: PUSH
31094: LD_VAR 0 2
31098: ARRAY
31099: PUSH
31100: LD_VAR 0 3
31104: DIFF
31105: PPUSH
31106: CALL_OW 1
31110: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31111: LD_VAR 0 3
31115: PPUSH
31116: LD_INT 0
31118: PPUSH
31119: CALL_OW 109
// continue ;
31123: GO 31020
// end ; if IsInUnit ( j ) then
31125: LD_VAR 0 3
31129: PPUSH
31130: CALL_OW 310
31134: IFFALSE 31145
// ComExitBuilding ( j ) ;
31136: LD_VAR 0 3
31140: PPUSH
31141: CALL_OW 122
// wait ( 3 ) ;
31145: LD_INT 3
31147: PPUSH
31148: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31152: LD_VAR 0 3
31156: PPUSH
31157: LD_VAR 0 6
31161: PUSH
31162: LD_INT 2
31164: ARRAY
31165: PPUSH
31166: LD_VAR 0 6
31170: PUSH
31171: LD_INT 3
31173: ARRAY
31174: PPUSH
31175: CALL_OW 117
// end ;
31179: GO 31020
31181: POP
31182: POP
// end ; end else
31183: GO 31764
// begin for j in cargo do
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: LD_VAR 0 7
31194: PUSH
31195: FOR_IN
31196: IFFALSE 31762
// begin if GetTag ( j ) <> 0 then
31198: LD_VAR 0 3
31202: PPUSH
31203: CALL_OW 110
31207: PUSH
31208: LD_INT 0
31210: NONEQUAL
31211: IFFALSE 31215
// continue ;
31213: GO 31195
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31215: LD_VAR 0 3
31219: PPUSH
31220: CALL_OW 256
31224: PUSH
31225: LD_INT 1000
31227: LESS
31228: PUSH
31229: LD_VAR 0 3
31233: PPUSH
31234: LD_EXP 73
31238: PUSH
31239: LD_VAR 0 2
31243: ARRAY
31244: PPUSH
31245: CALL_OW 308
31249: NOT
31250: AND
31251: IFFALSE 31273
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31253: LD_VAR 0 3
31257: PPUSH
31258: LD_EXP 73
31262: PUSH
31263: LD_VAR 0 2
31267: ARRAY
31268: PPUSH
31269: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31273: LD_VAR 0 3
31277: PPUSH
31278: CALL_OW 256
31282: PUSH
31283: LD_INT 1000
31285: LESS
31286: PUSH
31287: LD_VAR 0 3
31291: PPUSH
31292: LD_EXP 73
31296: PUSH
31297: LD_VAR 0 2
31301: ARRAY
31302: PPUSH
31303: CALL_OW 308
31307: AND
31308: IFFALSE 31312
// continue ;
31310: GO 31195
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31312: LD_VAR 0 3
31316: PPUSH
31317: CALL_OW 262
31321: PUSH
31322: LD_INT 2
31324: EQUAL
31325: PUSH
31326: LD_VAR 0 3
31330: PPUSH
31331: CALL_OW 261
31335: PUSH
31336: LD_INT 15
31338: LESS
31339: AND
31340: IFFALSE 31344
// continue ;
31342: GO 31195
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31344: LD_VAR 0 3
31348: PPUSH
31349: CALL_OW 262
31353: PUSH
31354: LD_INT 1
31356: EQUAL
31357: PUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: CALL_OW 261
31367: PUSH
31368: LD_INT 10
31370: LESS
31371: AND
31372: IFFALSE 31701
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31374: LD_ADDR_VAR 0 8
31378: PUSH
31379: LD_EXP 49
31383: PUSH
31384: LD_VAR 0 2
31388: ARRAY
31389: PPUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 30
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 30
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: PPUSH
31418: CALL_OW 72
31422: ST_TO_ADDR
// if not depot then
31423: LD_VAR 0 8
31427: NOT
31428: IFFALSE 31432
// continue ;
31430: GO 31195
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31432: LD_VAR 0 3
31436: PPUSH
31437: LD_VAR 0 8
31441: PPUSH
31442: LD_VAR 0 3
31446: PPUSH
31447: CALL_OW 74
31451: PPUSH
31452: CALL_OW 296
31456: PUSH
31457: LD_INT 6
31459: LESS
31460: IFFALSE 31476
// SetFuel ( j , 100 ) else
31462: LD_VAR 0 3
31466: PPUSH
31467: LD_INT 100
31469: PPUSH
31470: CALL_OW 240
31474: GO 31701
// if GetFuel ( j ) = 0 then
31476: LD_VAR 0 3
31480: PPUSH
31481: CALL_OW 261
31485: PUSH
31486: LD_INT 0
31488: EQUAL
31489: IFFALSE 31701
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31491: LD_ADDR_EXP 68
31495: PUSH
31496: LD_EXP 68
31500: PPUSH
31501: LD_VAR 0 2
31505: PPUSH
31506: LD_EXP 68
31510: PUSH
31511: LD_VAR 0 2
31515: ARRAY
31516: PUSH
31517: LD_VAR 0 3
31521: DIFF
31522: PPUSH
31523: CALL_OW 1
31527: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
31528: LD_VAR 0 3
31532: PPUSH
31533: CALL_OW 263
31537: PUSH
31538: LD_INT 1
31540: EQUAL
31541: IFFALSE 31557
// ComExitVehicle ( IsInUnit ( j ) ) ;
31543: LD_VAR 0 3
31547: PPUSH
31548: CALL_OW 310
31552: PPUSH
31553: CALL_OW 121
// if GetControl ( j ) = control_remote then
31557: LD_VAR 0 3
31561: PPUSH
31562: CALL_OW 263
31566: PUSH
31567: LD_INT 2
31569: EQUAL
31570: IFFALSE 31581
// ComUnlink ( j ) ;
31572: LD_VAR 0 3
31576: PPUSH
31577: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
31581: LD_ADDR_VAR 0 9
31585: PUSH
31586: LD_VAR 0 2
31590: PPUSH
31591: LD_INT 3
31593: PPUSH
31594: CALL 40838 0 2
31598: ST_TO_ADDR
// if fac then
31599: LD_VAR 0 9
31603: IFFALSE 31699
// begin for k in fac do
31605: LD_ADDR_VAR 0 4
31609: PUSH
31610: LD_VAR 0 9
31614: PUSH
31615: FOR_IN
31616: IFFALSE 31697
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
31618: LD_ADDR_VAR 0 10
31622: PUSH
31623: LD_VAR 0 9
31627: PPUSH
31628: LD_VAR 0 3
31632: PPUSH
31633: CALL_OW 265
31637: PPUSH
31638: LD_VAR 0 3
31642: PPUSH
31643: CALL_OW 262
31647: PPUSH
31648: LD_VAR 0 3
31652: PPUSH
31653: CALL_OW 263
31657: PPUSH
31658: LD_VAR 0 3
31662: PPUSH
31663: CALL_OW 264
31667: PPUSH
31668: CALL 51213 0 5
31672: ST_TO_ADDR
// if components then
31673: LD_VAR 0 10
31677: IFFALSE 31695
// begin MC_InsertProduceList ( i , components ) ;
31679: LD_VAR 0 2
31683: PPUSH
31684: LD_VAR 0 10
31688: PPUSH
31689: CALL 40383 0 2
// break ;
31693: GO 31697
// end ; end ;
31695: GO 31615
31697: POP
31698: POP
// end ; continue ;
31699: GO 31195
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
31701: LD_VAR 0 3
31705: PPUSH
31706: LD_INT 1
31708: PPUSH
31709: CALL_OW 289
31713: PUSH
31714: LD_INT 100
31716: LESS
31717: PUSH
31718: LD_VAR 0 3
31722: PPUSH
31723: CALL_OW 314
31727: NOT
31728: AND
31729: IFFALSE 31758
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31731: LD_VAR 0 3
31735: PPUSH
31736: LD_VAR 0 6
31740: PUSH
31741: LD_INT 2
31743: ARRAY
31744: PPUSH
31745: LD_VAR 0 6
31749: PUSH
31750: LD_INT 3
31752: ARRAY
31753: PPUSH
31754: CALL_OW 117
// break ;
31758: GO 31762
// end ;
31760: GO 31195
31762: POP
31763: POP
// end ; end ;
31764: GO 30033
31766: POP
31767: POP
// end ;
31768: LD_VAR 0 1
31772: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
// if not mc_bases then
31779: LD_EXP 49
31783: NOT
31784: IFFALSE 31788
// exit ;
31786: GO 31949
// for i = 1 to mc_bases do
31788: LD_ADDR_VAR 0 2
31792: PUSH
31793: DOUBLE
31794: LD_INT 1
31796: DEC
31797: ST_TO_ADDR
31798: LD_EXP 49
31802: PUSH
31803: FOR_TO
31804: IFFALSE 31947
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
31806: LD_ADDR_VAR 0 4
31810: PUSH
31811: LD_EXP 68
31815: PUSH
31816: LD_VAR 0 2
31820: ARRAY
31821: PUSH
31822: LD_EXP 71
31826: PUSH
31827: LD_VAR 0 2
31831: ARRAY
31832: UNION
31833: PPUSH
31834: LD_INT 33
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PPUSH
31844: CALL_OW 72
31848: ST_TO_ADDR
// if tmp then
31849: LD_VAR 0 4
31853: IFFALSE 31945
// for j in tmp do
31855: LD_ADDR_VAR 0 3
31859: PUSH
31860: LD_VAR 0 4
31864: PUSH
31865: FOR_IN
31866: IFFALSE 31943
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
31868: LD_VAR 0 3
31872: PPUSH
31873: CALL_OW 312
31877: NOT
31878: PUSH
31879: LD_VAR 0 3
31883: PPUSH
31884: CALL_OW 256
31888: PUSH
31889: LD_INT 250
31891: GREATEREQUAL
31892: AND
31893: IFFALSE 31906
// Connect ( j ) else
31895: LD_VAR 0 3
31899: PPUSH
31900: CALL 56614 0 1
31904: GO 31941
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
31906: LD_VAR 0 3
31910: PPUSH
31911: CALL_OW 256
31915: PUSH
31916: LD_INT 250
31918: LESS
31919: PUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: CALL_OW 312
31929: AND
31930: IFFALSE 31941
// ComUnlink ( j ) ;
31932: LD_VAR 0 3
31936: PPUSH
31937: CALL_OW 136
31941: GO 31865
31943: POP
31944: POP
// end ;
31945: GO 31803
31947: POP
31948: POP
// end ;
31949: LD_VAR 0 1
31953: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
31954: LD_INT 0
31956: PPUSH
31957: PPUSH
31958: PPUSH
31959: PPUSH
31960: PPUSH
// if not mc_bases then
31961: LD_EXP 49
31965: NOT
31966: IFFALSE 31970
// exit ;
31968: GO 32415
// for i = 1 to mc_bases do
31970: LD_ADDR_VAR 0 2
31974: PUSH
31975: DOUBLE
31976: LD_INT 1
31978: DEC
31979: ST_TO_ADDR
31980: LD_EXP 49
31984: PUSH
31985: FOR_TO
31986: IFFALSE 32413
// begin if not mc_produce [ i ] then
31988: LD_EXP 70
31992: PUSH
31993: LD_VAR 0 2
31997: ARRAY
31998: NOT
31999: IFFALSE 32003
// continue ;
32001: GO 31985
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32003: LD_ADDR_VAR 0 5
32007: PUSH
32008: LD_EXP 49
32012: PUSH
32013: LD_VAR 0 2
32017: ARRAY
32018: PPUSH
32019: LD_INT 30
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PPUSH
32029: CALL_OW 72
32033: ST_TO_ADDR
// if not fac then
32034: LD_VAR 0 5
32038: NOT
32039: IFFALSE 32043
// continue ;
32041: GO 31985
// for j in fac do
32043: LD_ADDR_VAR 0 3
32047: PUSH
32048: LD_VAR 0 5
32052: PUSH
32053: FOR_IN
32054: IFFALSE 32409
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
32056: LD_VAR 0 3
32060: PPUSH
32061: CALL_OW 461
32065: PUSH
32066: LD_INT 2
32068: NONEQUAL
32069: PUSH
32070: LD_VAR 0 3
32074: PPUSH
32075: LD_INT 15
32077: PPUSH
32078: CALL 56274 0 2
32082: PUSH
32083: LD_INT 4
32085: ARRAY
32086: OR
32087: IFFALSE 32091
// continue ;
32089: GO 32053
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
32091: LD_VAR 0 3
32095: PPUSH
32096: LD_EXP 70
32100: PUSH
32101: LD_VAR 0 2
32105: ARRAY
32106: PUSH
32107: LD_INT 1
32109: ARRAY
32110: PUSH
32111: LD_INT 1
32113: ARRAY
32114: PPUSH
32115: LD_EXP 70
32119: PUSH
32120: LD_VAR 0 2
32124: ARRAY
32125: PUSH
32126: LD_INT 1
32128: ARRAY
32129: PUSH
32130: LD_INT 2
32132: ARRAY
32133: PPUSH
32134: LD_EXP 70
32138: PUSH
32139: LD_VAR 0 2
32143: ARRAY
32144: PUSH
32145: LD_INT 1
32147: ARRAY
32148: PUSH
32149: LD_INT 3
32151: ARRAY
32152: PPUSH
32153: LD_EXP 70
32157: PUSH
32158: LD_VAR 0 2
32162: ARRAY
32163: PUSH
32164: LD_INT 1
32166: ARRAY
32167: PUSH
32168: LD_INT 4
32170: ARRAY
32171: PPUSH
32172: CALL_OW 448
32176: PUSH
32177: LD_VAR 0 3
32181: PPUSH
32182: LD_EXP 70
32186: PUSH
32187: LD_VAR 0 2
32191: ARRAY
32192: PUSH
32193: LD_INT 1
32195: ARRAY
32196: PUSH
32197: LD_INT 1
32199: ARRAY
32200: PUSH
32201: LD_EXP 70
32205: PUSH
32206: LD_VAR 0 2
32210: ARRAY
32211: PUSH
32212: LD_INT 1
32214: ARRAY
32215: PUSH
32216: LD_INT 2
32218: ARRAY
32219: PUSH
32220: LD_EXP 70
32224: PUSH
32225: LD_VAR 0 2
32229: ARRAY
32230: PUSH
32231: LD_INT 1
32233: ARRAY
32234: PUSH
32235: LD_INT 3
32237: ARRAY
32238: PUSH
32239: LD_EXP 70
32243: PUSH
32244: LD_VAR 0 2
32248: ARRAY
32249: PUSH
32250: LD_INT 1
32252: ARRAY
32253: PUSH
32254: LD_INT 4
32256: ARRAY
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: PPUSH
32264: CALL 59945 0 2
32268: AND
32269: IFFALSE 32407
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32271: LD_VAR 0 3
32275: PPUSH
32276: LD_EXP 70
32280: PUSH
32281: LD_VAR 0 2
32285: ARRAY
32286: PUSH
32287: LD_INT 1
32289: ARRAY
32290: PUSH
32291: LD_INT 1
32293: ARRAY
32294: PPUSH
32295: LD_EXP 70
32299: PUSH
32300: LD_VAR 0 2
32304: ARRAY
32305: PUSH
32306: LD_INT 1
32308: ARRAY
32309: PUSH
32310: LD_INT 2
32312: ARRAY
32313: PPUSH
32314: LD_EXP 70
32318: PUSH
32319: LD_VAR 0 2
32323: ARRAY
32324: PUSH
32325: LD_INT 1
32327: ARRAY
32328: PUSH
32329: LD_INT 3
32331: ARRAY
32332: PPUSH
32333: LD_EXP 70
32337: PUSH
32338: LD_VAR 0 2
32342: ARRAY
32343: PUSH
32344: LD_INT 1
32346: ARRAY
32347: PUSH
32348: LD_INT 4
32350: ARRAY
32351: PPUSH
32352: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32356: LD_ADDR_VAR 0 4
32360: PUSH
32361: LD_EXP 70
32365: PUSH
32366: LD_VAR 0 2
32370: ARRAY
32371: PPUSH
32372: LD_INT 1
32374: PPUSH
32375: CALL_OW 3
32379: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32380: LD_ADDR_EXP 70
32384: PUSH
32385: LD_EXP 70
32389: PPUSH
32390: LD_VAR 0 2
32394: PPUSH
32395: LD_VAR 0 4
32399: PPUSH
32400: CALL_OW 1
32404: ST_TO_ADDR
// break ;
32405: GO 32409
// end ; end ;
32407: GO 32053
32409: POP
32410: POP
// end ;
32411: GO 31985
32413: POP
32414: POP
// end ;
32415: LD_VAR 0 1
32419: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
32424: PPUSH
// if not mc_bases then
32425: LD_EXP 49
32429: NOT
32430: IFFALSE 32434
// exit ;
32432: GO 32523
// for i = 1 to mc_bases do
32434: LD_ADDR_VAR 0 2
32438: PUSH
32439: DOUBLE
32440: LD_INT 1
32442: DEC
32443: ST_TO_ADDR
32444: LD_EXP 49
32448: PUSH
32449: FOR_TO
32450: IFFALSE 32521
// begin if mc_attack [ i ] then
32452: LD_EXP 69
32456: PUSH
32457: LD_VAR 0 2
32461: ARRAY
32462: IFFALSE 32519
// begin tmp := mc_attack [ i ] [ 1 ] ;
32464: LD_ADDR_VAR 0 3
32468: PUSH
32469: LD_EXP 69
32473: PUSH
32474: LD_VAR 0 2
32478: ARRAY
32479: PUSH
32480: LD_INT 1
32482: ARRAY
32483: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32484: LD_ADDR_EXP 69
32488: PUSH
32489: LD_EXP 69
32493: PPUSH
32494: LD_VAR 0 2
32498: PPUSH
32499: EMPTY
32500: PPUSH
32501: CALL_OW 1
32505: ST_TO_ADDR
// Attack ( tmp ) ;
32506: LD_VAR 0 3
32510: PPUSH
32511: CALL 82158 0 1
// exit ;
32515: POP
32516: POP
32517: GO 32523
// end ; end ;
32519: GO 32449
32521: POP
32522: POP
// end ;
32523: LD_VAR 0 1
32527: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
32528: LD_INT 0
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
// if not mc_bases then
32537: LD_EXP 49
32541: NOT
32542: IFFALSE 32546
// exit ;
32544: GO 33128
// for i = 1 to mc_bases do
32546: LD_ADDR_VAR 0 2
32550: PUSH
32551: DOUBLE
32552: LD_INT 1
32554: DEC
32555: ST_TO_ADDR
32556: LD_EXP 49
32560: PUSH
32561: FOR_TO
32562: IFFALSE 33126
// begin if not mc_bases [ i ] then
32564: LD_EXP 49
32568: PUSH
32569: LD_VAR 0 2
32573: ARRAY
32574: NOT
32575: IFFALSE 32579
// continue ;
32577: GO 32561
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
32579: LD_ADDR_VAR 0 7
32583: PUSH
32584: LD_EXP 49
32588: PUSH
32589: LD_VAR 0 2
32593: ARRAY
32594: PUSH
32595: LD_INT 1
32597: ARRAY
32598: PPUSH
32599: CALL 50517 0 1
32603: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
32604: LD_ADDR_EXP 72
32608: PUSH
32609: LD_EXP 72
32613: PPUSH
32614: LD_VAR 0 2
32618: PPUSH
32619: LD_EXP 49
32623: PUSH
32624: LD_VAR 0 2
32628: ARRAY
32629: PUSH
32630: LD_INT 1
32632: ARRAY
32633: PPUSH
32634: CALL_OW 255
32638: PPUSH
32639: LD_EXP 74
32643: PUSH
32644: LD_VAR 0 2
32648: ARRAY
32649: PPUSH
32650: CALL 48220 0 2
32654: PPUSH
32655: CALL_OW 1
32659: ST_TO_ADDR
// if not mc_scan [ i ] then
32660: LD_EXP 72
32664: PUSH
32665: LD_VAR 0 2
32669: ARRAY
32670: NOT
32671: IFFALSE 32826
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32673: LD_ADDR_VAR 0 4
32677: PUSH
32678: LD_EXP 49
32682: PUSH
32683: LD_VAR 0 2
32687: ARRAY
32688: PPUSH
32689: LD_INT 2
32691: PUSH
32692: LD_INT 25
32694: PUSH
32695: LD_INT 5
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 25
32704: PUSH
32705: LD_INT 8
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 25
32714: PUSH
32715: LD_INT 9
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: PPUSH
32728: CALL_OW 72
32732: ST_TO_ADDR
// if not tmp then
32733: LD_VAR 0 4
32737: NOT
32738: IFFALSE 32742
// continue ;
32740: GO 32561
// for j in tmp do
32742: LD_ADDR_VAR 0 3
32746: PUSH
32747: LD_VAR 0 4
32751: PUSH
32752: FOR_IN
32753: IFFALSE 32824
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
32755: LD_VAR 0 3
32759: PPUSH
32760: CALL_OW 310
32764: PPUSH
32765: CALL_OW 266
32769: PUSH
32770: LD_INT 5
32772: EQUAL
32773: PUSH
32774: LD_VAR 0 3
32778: PPUSH
32779: CALL_OW 257
32783: PUSH
32784: LD_INT 1
32786: EQUAL
32787: AND
32788: PUSH
32789: LD_VAR 0 3
32793: PPUSH
32794: CALL_OW 459
32798: NOT
32799: AND
32800: PUSH
32801: LD_VAR 0 7
32805: AND
32806: IFFALSE 32822
// ComChangeProfession ( j , class ) ;
32808: LD_VAR 0 3
32812: PPUSH
32813: LD_VAR 0 7
32817: PPUSH
32818: CALL_OW 123
32822: GO 32752
32824: POP
32825: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
32826: LD_EXP 72
32830: PUSH
32831: LD_VAR 0 2
32835: ARRAY
32836: PUSH
32837: LD_EXP 71
32841: PUSH
32842: LD_VAR 0 2
32846: ARRAY
32847: NOT
32848: AND
32849: PUSH
32850: LD_EXP 49
32854: PUSH
32855: LD_VAR 0 2
32859: ARRAY
32860: PPUSH
32861: LD_INT 30
32863: PUSH
32864: LD_INT 32
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PPUSH
32871: CALL_OW 72
32875: NOT
32876: AND
32877: PUSH
32878: LD_EXP 49
32882: PUSH
32883: LD_VAR 0 2
32887: ARRAY
32888: PPUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 30
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 30
32904: PUSH
32905: LD_INT 5
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: PPUSH
32917: CALL_OW 72
32921: NOT
32922: AND
32923: IFFALSE 33055
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32925: LD_ADDR_VAR 0 4
32929: PUSH
32930: LD_EXP 49
32934: PUSH
32935: LD_VAR 0 2
32939: ARRAY
32940: PPUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 25
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 25
32956: PUSH
32957: LD_INT 5
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 25
32966: PUSH
32967: LD_INT 8
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 25
32976: PUSH
32977: LD_INT 9
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: PPUSH
32991: CALL_OW 72
32995: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
32996: LD_ADDR_VAR 0 4
33000: PUSH
33001: LD_VAR 0 4
33005: PUSH
33006: LD_VAR 0 4
33010: PPUSH
33011: LD_INT 18
33013: PPUSH
33014: CALL 86941 0 2
33018: DIFF
33019: ST_TO_ADDR
// if tmp then
33020: LD_VAR 0 4
33024: IFFALSE 33055
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
33026: LD_VAR 0 2
33030: PPUSH
33031: LD_VAR 0 4
33035: PPUSH
33036: LD_EXP 74
33040: PUSH
33041: LD_VAR 0 2
33045: ARRAY
33046: PPUSH
33047: CALL 48255 0 3
// exit ;
33051: POP
33052: POP
33053: GO 33128
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
33055: LD_EXP 72
33059: PUSH
33060: LD_VAR 0 2
33064: ARRAY
33065: PUSH
33066: LD_EXP 71
33070: PUSH
33071: LD_VAR 0 2
33075: ARRAY
33076: AND
33077: IFFALSE 33124
// begin tmp := mc_defender [ i ] ;
33079: LD_ADDR_VAR 0 4
33083: PUSH
33084: LD_EXP 71
33088: PUSH
33089: LD_VAR 0 2
33093: ARRAY
33094: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
33095: LD_VAR 0 2
33099: PPUSH
33100: LD_VAR 0 4
33104: PPUSH
33105: LD_EXP 72
33109: PUSH
33110: LD_VAR 0 2
33114: ARRAY
33115: PPUSH
33116: CALL 48816 0 3
// exit ;
33120: POP
33121: POP
33122: GO 33128
// end ; end ;
33124: GO 32561
33126: POP
33127: POP
// end ;
33128: LD_VAR 0 1
33132: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33133: LD_INT 0
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
33143: PPUSH
33144: PPUSH
33145: PPUSH
// if not mc_bases then
33146: LD_EXP 49
33150: NOT
33151: IFFALSE 33155
// exit ;
33153: GO 34242
// for i = 1 to mc_bases do
33155: LD_ADDR_VAR 0 2
33159: PUSH
33160: DOUBLE
33161: LD_INT 1
33163: DEC
33164: ST_TO_ADDR
33165: LD_EXP 49
33169: PUSH
33170: FOR_TO
33171: IFFALSE 34240
// begin tmp := mc_lab [ i ] ;
33173: LD_ADDR_VAR 0 6
33177: PUSH
33178: LD_EXP 82
33182: PUSH
33183: LD_VAR 0 2
33187: ARRAY
33188: ST_TO_ADDR
// if not tmp then
33189: LD_VAR 0 6
33193: NOT
33194: IFFALSE 33198
// continue ;
33196: GO 33170
// idle_lab := 0 ;
33198: LD_ADDR_VAR 0 11
33202: PUSH
33203: LD_INT 0
33205: ST_TO_ADDR
// for j in tmp do
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_VAR 0 6
33215: PUSH
33216: FOR_IN
33217: IFFALSE 34236
// begin researching := false ;
33219: LD_ADDR_VAR 0 10
33223: PUSH
33224: LD_INT 0
33226: ST_TO_ADDR
// side := GetSide ( j ) ;
33227: LD_ADDR_VAR 0 4
33231: PUSH
33232: LD_VAR 0 3
33236: PPUSH
33237: CALL_OW 255
33241: ST_TO_ADDR
// if not mc_tech [ side ] then
33242: LD_EXP 76
33246: PUSH
33247: LD_VAR 0 4
33251: ARRAY
33252: NOT
33253: IFFALSE 33257
// continue ;
33255: GO 33216
// if BuildingStatus ( j ) = bs_idle then
33257: LD_VAR 0 3
33261: PPUSH
33262: CALL_OW 461
33266: PUSH
33267: LD_INT 2
33269: EQUAL
33270: IFFALSE 33458
// begin if idle_lab and UnitsInside ( j ) < 6 then
33272: LD_VAR 0 11
33276: PUSH
33277: LD_VAR 0 3
33281: PPUSH
33282: CALL_OW 313
33286: PUSH
33287: LD_INT 6
33289: LESS
33290: AND
33291: IFFALSE 33362
// begin tmp2 := UnitsInside ( idle_lab ) ;
33293: LD_ADDR_VAR 0 9
33297: PUSH
33298: LD_VAR 0 11
33302: PPUSH
33303: CALL_OW 313
33307: ST_TO_ADDR
// if tmp2 then
33308: LD_VAR 0 9
33312: IFFALSE 33354
// for x in tmp2 do
33314: LD_ADDR_VAR 0 7
33318: PUSH
33319: LD_VAR 0 9
33323: PUSH
33324: FOR_IN
33325: IFFALSE 33352
// begin ComExitBuilding ( x ) ;
33327: LD_VAR 0 7
33331: PPUSH
33332: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33336: LD_VAR 0 7
33340: PPUSH
33341: LD_VAR 0 3
33345: PPUSH
33346: CALL_OW 180
// end ;
33350: GO 33324
33352: POP
33353: POP
// idle_lab := 0 ;
33354: LD_ADDR_VAR 0 11
33358: PUSH
33359: LD_INT 0
33361: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33362: LD_ADDR_VAR 0 5
33366: PUSH
33367: LD_EXP 76
33371: PUSH
33372: LD_VAR 0 4
33376: ARRAY
33377: PUSH
33378: FOR_IN
33379: IFFALSE 33439
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33381: LD_VAR 0 3
33385: PPUSH
33386: LD_VAR 0 5
33390: PPUSH
33391: CALL_OW 430
33395: PUSH
33396: LD_VAR 0 4
33400: PPUSH
33401: LD_VAR 0 5
33405: PPUSH
33406: CALL 47325 0 2
33410: AND
33411: IFFALSE 33437
// begin researching := true ;
33413: LD_ADDR_VAR 0 10
33417: PUSH
33418: LD_INT 1
33420: ST_TO_ADDR
// ComResearch ( j , t ) ;
33421: LD_VAR 0 3
33425: PPUSH
33426: LD_VAR 0 5
33430: PPUSH
33431: CALL_OW 124
// break ;
33435: GO 33439
// end ;
33437: GO 33378
33439: POP
33440: POP
// if not researching then
33441: LD_VAR 0 10
33445: NOT
33446: IFFALSE 33458
// idle_lab := j ;
33448: LD_ADDR_VAR 0 11
33452: PUSH
33453: LD_VAR 0 3
33457: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33458: LD_VAR 0 3
33462: PPUSH
33463: CALL_OW 461
33467: PUSH
33468: LD_INT 10
33470: EQUAL
33471: IFFALSE 34059
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33473: LD_EXP 78
33477: PUSH
33478: LD_VAR 0 2
33482: ARRAY
33483: NOT
33484: PUSH
33485: LD_EXP 79
33489: PUSH
33490: LD_VAR 0 2
33494: ARRAY
33495: NOT
33496: AND
33497: PUSH
33498: LD_EXP 76
33502: PUSH
33503: LD_VAR 0 4
33507: ARRAY
33508: PUSH
33509: LD_INT 1
33511: GREATER
33512: AND
33513: IFFALSE 33644
// begin ComCancel ( j ) ;
33515: LD_VAR 0 3
33519: PPUSH
33520: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
33524: LD_ADDR_EXP 76
33528: PUSH
33529: LD_EXP 76
33533: PPUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: LD_EXP 76
33543: PUSH
33544: LD_VAR 0 4
33548: ARRAY
33549: PPUSH
33550: LD_EXP 76
33554: PUSH
33555: LD_VAR 0 4
33559: ARRAY
33560: PUSH
33561: LD_INT 1
33563: MINUS
33564: PPUSH
33565: LD_EXP 76
33569: PUSH
33570: LD_VAR 0 4
33574: ARRAY
33575: PPUSH
33576: LD_INT 0
33578: PPUSH
33579: CALL 53099 0 4
33583: PPUSH
33584: CALL_OW 1
33588: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
33589: LD_ADDR_EXP 76
33593: PUSH
33594: LD_EXP 76
33598: PPUSH
33599: LD_VAR 0 4
33603: PPUSH
33604: LD_EXP 76
33608: PUSH
33609: LD_VAR 0 4
33613: ARRAY
33614: PPUSH
33615: LD_EXP 76
33619: PUSH
33620: LD_VAR 0 4
33624: ARRAY
33625: PPUSH
33626: LD_INT 1
33628: PPUSH
33629: LD_INT 0
33631: PPUSH
33632: CALL 53099 0 4
33636: PPUSH
33637: CALL_OW 1
33641: ST_TO_ADDR
// continue ;
33642: GO 33216
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
33644: LD_EXP 78
33648: PUSH
33649: LD_VAR 0 2
33653: ARRAY
33654: PUSH
33655: LD_EXP 79
33659: PUSH
33660: LD_VAR 0 2
33664: ARRAY
33665: NOT
33666: AND
33667: IFFALSE 33794
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
33669: LD_ADDR_EXP 79
33673: PUSH
33674: LD_EXP 79
33678: PPUSH
33679: LD_VAR 0 2
33683: PUSH
33684: LD_EXP 79
33688: PUSH
33689: LD_VAR 0 2
33693: ARRAY
33694: PUSH
33695: LD_INT 1
33697: PLUS
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PPUSH
33703: LD_EXP 78
33707: PUSH
33708: LD_VAR 0 2
33712: ARRAY
33713: PUSH
33714: LD_INT 1
33716: ARRAY
33717: PPUSH
33718: CALL 53681 0 3
33722: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
33723: LD_EXP 78
33727: PUSH
33728: LD_VAR 0 2
33732: ARRAY
33733: PUSH
33734: LD_INT 1
33736: ARRAY
33737: PPUSH
33738: LD_INT 112
33740: PPUSH
33741: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
33745: LD_ADDR_VAR 0 9
33749: PUSH
33750: LD_EXP 78
33754: PUSH
33755: LD_VAR 0 2
33759: ARRAY
33760: PPUSH
33761: LD_INT 1
33763: PPUSH
33764: CALL_OW 3
33768: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
33769: LD_ADDR_EXP 78
33773: PUSH
33774: LD_EXP 78
33778: PPUSH
33779: LD_VAR 0 2
33783: PPUSH
33784: LD_VAR 0 9
33788: PPUSH
33789: CALL_OW 1
33793: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
33794: LD_EXP 78
33798: PUSH
33799: LD_VAR 0 2
33803: ARRAY
33804: PUSH
33805: LD_EXP 79
33809: PUSH
33810: LD_VAR 0 2
33814: ARRAY
33815: AND
33816: PUSH
33817: LD_EXP 79
33821: PUSH
33822: LD_VAR 0 2
33826: ARRAY
33827: PUSH
33828: LD_INT 1
33830: ARRAY
33831: PPUSH
33832: CALL_OW 310
33836: NOT
33837: AND
33838: PUSH
33839: LD_VAR 0 3
33843: PPUSH
33844: CALL_OW 313
33848: PUSH
33849: LD_INT 6
33851: EQUAL
33852: AND
33853: IFFALSE 33909
// begin tmp2 := UnitsInside ( j ) ;
33855: LD_ADDR_VAR 0 9
33859: PUSH
33860: LD_VAR 0 3
33864: PPUSH
33865: CALL_OW 313
33869: ST_TO_ADDR
// if tmp2 = 6 then
33870: LD_VAR 0 9
33874: PUSH
33875: LD_INT 6
33877: EQUAL
33878: IFFALSE 33909
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
33880: LD_VAR 0 9
33884: PUSH
33885: LD_INT 1
33887: ARRAY
33888: PPUSH
33889: LD_INT 112
33891: PPUSH
33892: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
33896: LD_VAR 0 9
33900: PUSH
33901: LD_INT 1
33903: ARRAY
33904: PPUSH
33905: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
33909: LD_EXP 79
33913: PUSH
33914: LD_VAR 0 2
33918: ARRAY
33919: PUSH
33920: LD_EXP 79
33924: PUSH
33925: LD_VAR 0 2
33929: ARRAY
33930: PUSH
33931: LD_INT 1
33933: ARRAY
33934: PPUSH
33935: CALL_OW 314
33939: NOT
33940: AND
33941: PUSH
33942: LD_EXP 79
33946: PUSH
33947: LD_VAR 0 2
33951: ARRAY
33952: PUSH
33953: LD_INT 1
33955: ARRAY
33956: PPUSH
33957: CALL_OW 310
33961: NOT
33962: AND
33963: IFFALSE 33989
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
33965: LD_EXP 79
33969: PUSH
33970: LD_VAR 0 2
33974: ARRAY
33975: PUSH
33976: LD_INT 1
33978: ARRAY
33979: PPUSH
33980: LD_VAR 0 3
33984: PPUSH
33985: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
33989: LD_EXP 79
33993: PUSH
33994: LD_VAR 0 2
33998: ARRAY
33999: PUSH
34000: LD_INT 1
34002: ARRAY
34003: PPUSH
34004: CALL_OW 310
34008: PUSH
34009: LD_EXP 79
34013: PUSH
34014: LD_VAR 0 2
34018: ARRAY
34019: PUSH
34020: LD_INT 1
34022: ARRAY
34023: PPUSH
34024: CALL_OW 310
34028: PPUSH
34029: CALL_OW 461
34033: PUSH
34034: LD_INT 3
34036: NONEQUAL
34037: AND
34038: IFFALSE 34059
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
34040: LD_EXP 79
34044: PUSH
34045: LD_VAR 0 2
34049: ARRAY
34050: PUSH
34051: LD_INT 1
34053: ARRAY
34054: PPUSH
34055: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
34059: LD_VAR 0 3
34063: PPUSH
34064: CALL_OW 461
34068: PUSH
34069: LD_INT 6
34071: EQUAL
34072: PUSH
34073: LD_VAR 0 6
34077: PUSH
34078: LD_INT 1
34080: GREATER
34081: AND
34082: IFFALSE 34234
// begin sci := [ ] ;
34084: LD_ADDR_VAR 0 8
34088: PUSH
34089: EMPTY
34090: ST_TO_ADDR
// for x in ( tmp diff j ) do
34091: LD_ADDR_VAR 0 7
34095: PUSH
34096: LD_VAR 0 6
34100: PUSH
34101: LD_VAR 0 3
34105: DIFF
34106: PUSH
34107: FOR_IN
34108: IFFALSE 34160
// begin if sci = 6 then
34110: LD_VAR 0 8
34114: PUSH
34115: LD_INT 6
34117: EQUAL
34118: IFFALSE 34122
// break ;
34120: GO 34160
// if BuildingStatus ( x ) = bs_idle then
34122: LD_VAR 0 7
34126: PPUSH
34127: CALL_OW 461
34131: PUSH
34132: LD_INT 2
34134: EQUAL
34135: IFFALSE 34158
// sci := sci ^ UnitsInside ( x ) ;
34137: LD_ADDR_VAR 0 8
34141: PUSH
34142: LD_VAR 0 8
34146: PUSH
34147: LD_VAR 0 7
34151: PPUSH
34152: CALL_OW 313
34156: ADD
34157: ST_TO_ADDR
// end ;
34158: GO 34107
34160: POP
34161: POP
// if not sci then
34162: LD_VAR 0 8
34166: NOT
34167: IFFALSE 34171
// continue ;
34169: GO 33216
// for x in sci do
34171: LD_ADDR_VAR 0 7
34175: PUSH
34176: LD_VAR 0 8
34180: PUSH
34181: FOR_IN
34182: IFFALSE 34232
// if IsInUnit ( x ) and not HasTask ( x ) then
34184: LD_VAR 0 7
34188: PPUSH
34189: CALL_OW 310
34193: PUSH
34194: LD_VAR 0 7
34198: PPUSH
34199: CALL_OW 314
34203: NOT
34204: AND
34205: IFFALSE 34230
// begin ComExitBuilding ( x ) ;
34207: LD_VAR 0 7
34211: PPUSH
34212: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
34216: LD_VAR 0 7
34220: PPUSH
34221: LD_VAR 0 3
34225: PPUSH
34226: CALL_OW 180
// end ;
34230: GO 34181
34232: POP
34233: POP
// end ; end ;
34234: GO 33216
34236: POP
34237: POP
// end ;
34238: GO 33170
34240: POP
34241: POP
// end ;
34242: LD_VAR 0 1
34246: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34247: LD_INT 0
34249: PPUSH
34250: PPUSH
// if not mc_bases then
34251: LD_EXP 49
34255: NOT
34256: IFFALSE 34260
// exit ;
34258: GO 34341
// for i = 1 to mc_bases do
34260: LD_ADDR_VAR 0 2
34264: PUSH
34265: DOUBLE
34266: LD_INT 1
34268: DEC
34269: ST_TO_ADDR
34270: LD_EXP 49
34274: PUSH
34275: FOR_TO
34276: IFFALSE 34339
// if mc_mines [ i ] and mc_miners [ i ] then
34278: LD_EXP 62
34282: PUSH
34283: LD_VAR 0 2
34287: ARRAY
34288: PUSH
34289: LD_EXP 63
34293: PUSH
34294: LD_VAR 0 2
34298: ARRAY
34299: AND
34300: IFFALSE 34337
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34302: LD_EXP 63
34306: PUSH
34307: LD_VAR 0 2
34311: ARRAY
34312: PUSH
34313: LD_INT 1
34315: ARRAY
34316: PPUSH
34317: CALL_OW 255
34321: PPUSH
34322: LD_EXP 62
34326: PUSH
34327: LD_VAR 0 2
34331: ARRAY
34332: PPUSH
34333: CALL 50670 0 2
34337: GO 34275
34339: POP
34340: POP
// end ;
34341: LD_VAR 0 1
34345: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34346: LD_INT 0
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
// if not mc_bases or not mc_parking then
34356: LD_EXP 49
34360: NOT
34361: PUSH
34362: LD_EXP 73
34366: NOT
34367: OR
34368: IFFALSE 34372
// exit ;
34370: GO 35071
// for i = 1 to mc_bases do
34372: LD_ADDR_VAR 0 2
34376: PUSH
34377: DOUBLE
34378: LD_INT 1
34380: DEC
34381: ST_TO_ADDR
34382: LD_EXP 49
34386: PUSH
34387: FOR_TO
34388: IFFALSE 35069
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34390: LD_EXP 49
34394: PUSH
34395: LD_VAR 0 2
34399: ARRAY
34400: NOT
34401: PUSH
34402: LD_EXP 73
34406: PUSH
34407: LD_VAR 0 2
34411: ARRAY
34412: NOT
34413: OR
34414: IFFALSE 34418
// continue ;
34416: GO 34387
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34418: LD_ADDR_VAR 0 5
34422: PUSH
34423: LD_EXP 49
34427: PUSH
34428: LD_VAR 0 2
34432: ARRAY
34433: PUSH
34434: LD_INT 1
34436: ARRAY
34437: PPUSH
34438: CALL_OW 255
34442: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34443: LD_ADDR_VAR 0 6
34447: PUSH
34448: LD_EXP 49
34452: PUSH
34453: LD_VAR 0 2
34457: ARRAY
34458: PPUSH
34459: LD_INT 30
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PPUSH
34469: CALL_OW 72
34473: ST_TO_ADDR
// if not fac then
34474: LD_VAR 0 6
34478: NOT
34479: IFFALSE 34530
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34481: LD_ADDR_VAR 0 6
34485: PUSH
34486: LD_EXP 49
34490: PUSH
34491: LD_VAR 0 2
34495: ARRAY
34496: PPUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 30
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 30
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: PPUSH
34525: CALL_OW 72
34529: ST_TO_ADDR
// if not fac then
34530: LD_VAR 0 6
34534: NOT
34535: IFFALSE 34539
// continue ;
34537: GO 34387
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34539: LD_ADDR_VAR 0 7
34543: PUSH
34544: LD_EXP 73
34548: PUSH
34549: LD_VAR 0 2
34553: ARRAY
34554: PPUSH
34555: LD_INT 22
34557: PUSH
34558: LD_VAR 0 5
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 21
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 24
34582: PUSH
34583: LD_INT 1000
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: PPUSH
34599: CALL_OW 70
34603: ST_TO_ADDR
// for j in fac do
34604: LD_ADDR_VAR 0 3
34608: PUSH
34609: LD_VAR 0 6
34613: PUSH
34614: FOR_IN
34615: IFFALSE 34696
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34617: LD_ADDR_VAR 0 7
34621: PUSH
34622: LD_VAR 0 7
34626: PUSH
34627: LD_INT 22
34629: PUSH
34630: LD_VAR 0 5
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 91
34641: PUSH
34642: LD_VAR 0 3
34646: PUSH
34647: LD_INT 15
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 21
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 3
34667: PUSH
34668: LD_INT 24
34670: PUSH
34671: LD_INT 1000
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: PPUSH
34688: CALL_OW 69
34692: UNION
34693: ST_TO_ADDR
34694: GO 34614
34696: POP
34697: POP
// if not vehs then
34698: LD_VAR 0 7
34702: NOT
34703: IFFALSE 34729
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
34705: LD_ADDR_EXP 61
34709: PUSH
34710: LD_EXP 61
34714: PPUSH
34715: LD_VAR 0 2
34719: PPUSH
34720: EMPTY
34721: PPUSH
34722: CALL_OW 1
34726: ST_TO_ADDR
// continue ;
34727: GO 34387
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34729: LD_ADDR_VAR 0 8
34733: PUSH
34734: LD_EXP 49
34738: PUSH
34739: LD_VAR 0 2
34743: ARRAY
34744: PPUSH
34745: LD_INT 30
34747: PUSH
34748: LD_INT 3
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PPUSH
34755: CALL_OW 72
34759: ST_TO_ADDR
// if tmp then
34760: LD_VAR 0 8
34764: IFFALSE 34867
// begin for j in tmp do
34766: LD_ADDR_VAR 0 3
34770: PUSH
34771: LD_VAR 0 8
34775: PUSH
34776: FOR_IN
34777: IFFALSE 34865
// for k in UnitsInside ( j ) do
34779: LD_ADDR_VAR 0 4
34783: PUSH
34784: LD_VAR 0 3
34788: PPUSH
34789: CALL_OW 313
34793: PUSH
34794: FOR_IN
34795: IFFALSE 34861
// if k then
34797: LD_VAR 0 4
34801: IFFALSE 34859
// if not k in mc_repair_vehicle [ i ] then
34803: LD_VAR 0 4
34807: PUSH
34808: LD_EXP 61
34812: PUSH
34813: LD_VAR 0 2
34817: ARRAY
34818: IN
34819: NOT
34820: IFFALSE 34859
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
34822: LD_ADDR_EXP 61
34826: PUSH
34827: LD_EXP 61
34831: PPUSH
34832: LD_VAR 0 2
34836: PPUSH
34837: LD_EXP 61
34841: PUSH
34842: LD_VAR 0 2
34846: ARRAY
34847: PUSH
34848: LD_VAR 0 4
34852: UNION
34853: PPUSH
34854: CALL_OW 1
34858: ST_TO_ADDR
34859: GO 34794
34861: POP
34862: POP
34863: GO 34776
34865: POP
34866: POP
// end ; if not mc_repair_vehicle [ i ] then
34867: LD_EXP 61
34871: PUSH
34872: LD_VAR 0 2
34876: ARRAY
34877: NOT
34878: IFFALSE 34882
// continue ;
34880: GO 34387
// for j in mc_repair_vehicle [ i ] do
34882: LD_ADDR_VAR 0 3
34886: PUSH
34887: LD_EXP 61
34891: PUSH
34892: LD_VAR 0 2
34896: ARRAY
34897: PUSH
34898: FOR_IN
34899: IFFALSE 35065
// begin if GetClass ( j ) <> 3 then
34901: LD_VAR 0 3
34905: PPUSH
34906: CALL_OW 257
34910: PUSH
34911: LD_INT 3
34913: NONEQUAL
34914: IFFALSE 34955
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
34916: LD_ADDR_EXP 61
34920: PUSH
34921: LD_EXP 61
34925: PPUSH
34926: LD_VAR 0 2
34930: PPUSH
34931: LD_EXP 61
34935: PUSH
34936: LD_VAR 0 2
34940: ARRAY
34941: PUSH
34942: LD_VAR 0 3
34946: DIFF
34947: PPUSH
34948: CALL_OW 1
34952: ST_TO_ADDR
// continue ;
34953: GO 34898
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34955: LD_VAR 0 3
34959: PPUSH
34960: CALL_OW 311
34964: NOT
34965: PUSH
34966: LD_VAR 0 3
34970: PUSH
34971: LD_EXP 52
34975: PUSH
34976: LD_VAR 0 2
34980: ARRAY
34981: PUSH
34982: LD_INT 1
34984: ARRAY
34985: IN
34986: NOT
34987: AND
34988: PUSH
34989: LD_VAR 0 3
34993: PUSH
34994: LD_EXP 52
34998: PUSH
34999: LD_VAR 0 2
35003: ARRAY
35004: PUSH
35005: LD_INT 2
35007: ARRAY
35008: IN
35009: NOT
35010: AND
35011: IFFALSE 35063
// begin if IsInUnit ( j ) then
35013: LD_VAR 0 3
35017: PPUSH
35018: CALL_OW 310
35022: IFFALSE 35033
// ComExitBuilding ( j ) ;
35024: LD_VAR 0 3
35028: PPUSH
35029: CALL_OW 122
// if not HasTask ( j ) then
35033: LD_VAR 0 3
35037: PPUSH
35038: CALL_OW 314
35042: NOT
35043: IFFALSE 35063
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
35045: LD_VAR 0 3
35049: PPUSH
35050: LD_VAR 0 7
35054: PUSH
35055: LD_INT 1
35057: ARRAY
35058: PPUSH
35059: CALL_OW 189
// end ; end ;
35063: GO 34898
35065: POP
35066: POP
// end ;
35067: GO 34387
35069: POP
35070: POP
// end ;
35071: LD_VAR 0 1
35075: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
35076: LD_INT 0
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
// if not mc_bases then
35089: LD_EXP 49
35093: NOT
35094: IFFALSE 35098
// exit ;
35096: GO 35900
// for i = 1 to mc_bases do
35098: LD_ADDR_VAR 0 2
35102: PUSH
35103: DOUBLE
35104: LD_INT 1
35106: DEC
35107: ST_TO_ADDR
35108: LD_EXP 49
35112: PUSH
35113: FOR_TO
35114: IFFALSE 35898
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35116: LD_EXP 77
35120: PUSH
35121: LD_VAR 0 2
35125: ARRAY
35126: NOT
35127: PUSH
35128: LD_EXP 52
35132: PUSH
35133: LD_VAR 0 2
35137: ARRAY
35138: PUSH
35139: LD_INT 1
35141: ARRAY
35142: OR
35143: PUSH
35144: LD_EXP 52
35148: PUSH
35149: LD_VAR 0 2
35153: ARRAY
35154: PUSH
35155: LD_INT 2
35157: ARRAY
35158: OR
35159: PUSH
35160: LD_EXP 75
35164: PUSH
35165: LD_VAR 0 2
35169: ARRAY
35170: PPUSH
35171: LD_INT 1
35173: PPUSH
35174: CALL_OW 325
35178: NOT
35179: OR
35180: PUSH
35181: LD_EXP 72
35185: PUSH
35186: LD_VAR 0 2
35190: ARRAY
35191: OR
35192: IFFALSE 35196
// continue ;
35194: GO 35113
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35196: LD_ADDR_VAR 0 8
35200: PUSH
35201: LD_EXP 49
35205: PUSH
35206: LD_VAR 0 2
35210: ARRAY
35211: PPUSH
35212: LD_INT 25
35214: PUSH
35215: LD_INT 4
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 50
35224: PUSH
35225: EMPTY
35226: LIST
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: LD_INT 60
35233: PUSH
35234: EMPTY
35235: LIST
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: PPUSH
35246: CALL_OW 72
35250: PUSH
35251: LD_EXP 53
35255: PUSH
35256: LD_VAR 0 2
35260: ARRAY
35261: DIFF
35262: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35263: LD_ADDR_VAR 0 9
35267: PUSH
35268: LD_EXP 49
35272: PUSH
35273: LD_VAR 0 2
35277: ARRAY
35278: PPUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 30
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 30
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: PPUSH
35307: CALL_OW 72
35311: ST_TO_ADDR
// if not tmp or not dep then
35312: LD_VAR 0 8
35316: NOT
35317: PUSH
35318: LD_VAR 0 9
35322: NOT
35323: OR
35324: IFFALSE 35328
// continue ;
35326: GO 35113
// side := GetSide ( tmp [ 1 ] ) ;
35328: LD_ADDR_VAR 0 11
35332: PUSH
35333: LD_VAR 0 8
35337: PUSH
35338: LD_INT 1
35340: ARRAY
35341: PPUSH
35342: CALL_OW 255
35346: ST_TO_ADDR
// dep := dep [ 1 ] ;
35347: LD_ADDR_VAR 0 9
35351: PUSH
35352: LD_VAR 0 9
35356: PUSH
35357: LD_INT 1
35359: ARRAY
35360: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35361: LD_ADDR_VAR 0 7
35365: PUSH
35366: LD_EXP 77
35370: PUSH
35371: LD_VAR 0 2
35375: ARRAY
35376: PPUSH
35377: LD_INT 22
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 25
35389: PUSH
35390: LD_INT 12
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PPUSH
35401: CALL_OW 70
35405: PUSH
35406: LD_INT 22
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 25
35418: PUSH
35419: LD_INT 12
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 91
35428: PUSH
35429: LD_VAR 0 9
35433: PUSH
35434: LD_INT 20
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: PPUSH
35447: CALL_OW 69
35451: UNION
35452: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35453: LD_ADDR_VAR 0 10
35457: PUSH
35458: LD_EXP 77
35462: PUSH
35463: LD_VAR 0 2
35467: ARRAY
35468: PPUSH
35469: LD_INT 81
35471: PUSH
35472: LD_VAR 0 11
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PPUSH
35481: CALL_OW 70
35485: ST_TO_ADDR
// if not apes or danger_at_area then
35486: LD_VAR 0 7
35490: NOT
35491: PUSH
35492: LD_VAR 0 10
35496: OR
35497: IFFALSE 35547
// begin if mc_taming [ i ] then
35499: LD_EXP 80
35503: PUSH
35504: LD_VAR 0 2
35508: ARRAY
35509: IFFALSE 35545
// begin MC_Reset ( i , 121 ) ;
35511: LD_VAR 0 2
35515: PPUSH
35516: LD_INT 121
35518: PPUSH
35519: CALL 20878 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
35523: LD_ADDR_EXP 80
35527: PUSH
35528: LD_EXP 80
35532: PPUSH
35533: LD_VAR 0 2
35537: PPUSH
35538: EMPTY
35539: PPUSH
35540: CALL_OW 1
35544: ST_TO_ADDR
// end ; continue ;
35545: GO 35113
// end ; for j in tmp do
35547: LD_ADDR_VAR 0 3
35551: PUSH
35552: LD_VAR 0 8
35556: PUSH
35557: FOR_IN
35558: IFFALSE 35894
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
35560: LD_VAR 0 3
35564: PUSH
35565: LD_EXP 80
35569: PUSH
35570: LD_VAR 0 2
35574: ARRAY
35575: IN
35576: NOT
35577: PUSH
35578: LD_EXP 80
35582: PUSH
35583: LD_VAR 0 2
35587: ARRAY
35588: PUSH
35589: LD_INT 3
35591: LESS
35592: AND
35593: IFFALSE 35651
// begin SetTag ( j , 121 ) ;
35595: LD_VAR 0 3
35599: PPUSH
35600: LD_INT 121
35602: PPUSH
35603: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
35607: LD_ADDR_EXP 80
35611: PUSH
35612: LD_EXP 80
35616: PPUSH
35617: LD_VAR 0 2
35621: PUSH
35622: LD_EXP 80
35626: PUSH
35627: LD_VAR 0 2
35631: ARRAY
35632: PUSH
35633: LD_INT 1
35635: PLUS
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PPUSH
35641: LD_VAR 0 3
35645: PPUSH
35646: CALL 53681 0 3
35650: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
35651: LD_VAR 0 3
35655: PUSH
35656: LD_EXP 80
35660: PUSH
35661: LD_VAR 0 2
35665: ARRAY
35666: IN
35667: IFFALSE 35892
// begin if GetClass ( j ) <> 4 then
35669: LD_VAR 0 3
35673: PPUSH
35674: CALL_OW 257
35678: PUSH
35679: LD_INT 4
35681: NONEQUAL
35682: IFFALSE 35735
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
35684: LD_ADDR_EXP 80
35688: PUSH
35689: LD_EXP 80
35693: PPUSH
35694: LD_VAR 0 2
35698: PPUSH
35699: LD_EXP 80
35703: PUSH
35704: LD_VAR 0 2
35708: ARRAY
35709: PUSH
35710: LD_VAR 0 3
35714: DIFF
35715: PPUSH
35716: CALL_OW 1
35720: ST_TO_ADDR
// SetTag ( j , 0 ) ;
35721: LD_VAR 0 3
35725: PPUSH
35726: LD_INT 0
35728: PPUSH
35729: CALL_OW 109
// continue ;
35733: GO 35557
// end ; if IsInUnit ( j ) then
35735: LD_VAR 0 3
35739: PPUSH
35740: CALL_OW 310
35744: IFFALSE 35755
// ComExitBuilding ( j ) ;
35746: LD_VAR 0 3
35750: PPUSH
35751: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
35755: LD_ADDR_VAR 0 6
35759: PUSH
35760: LD_VAR 0 7
35764: PPUSH
35765: LD_VAR 0 3
35769: PPUSH
35770: CALL_OW 74
35774: ST_TO_ADDR
// if not ape then
35775: LD_VAR 0 6
35779: NOT
35780: IFFALSE 35784
// break ;
35782: GO 35894
// x := GetX ( ape ) ;
35784: LD_ADDR_VAR 0 4
35788: PUSH
35789: LD_VAR 0 6
35793: PPUSH
35794: CALL_OW 250
35798: ST_TO_ADDR
// y := GetY ( ape ) ;
35799: LD_ADDR_VAR 0 5
35803: PUSH
35804: LD_VAR 0 6
35808: PPUSH
35809: CALL_OW 251
35813: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35814: LD_VAR 0 4
35818: PPUSH
35819: LD_VAR 0 5
35823: PPUSH
35824: CALL_OW 488
35828: NOT
35829: PUSH
35830: LD_VAR 0 11
35834: PPUSH
35835: LD_VAR 0 4
35839: PPUSH
35840: LD_VAR 0 5
35844: PPUSH
35845: LD_INT 20
35847: PPUSH
35848: CALL 54577 0 4
35852: PUSH
35853: LD_INT 4
35855: ARRAY
35856: OR
35857: IFFALSE 35861
// break ;
35859: GO 35894
// if not HasTask ( j ) then
35861: LD_VAR 0 3
35865: PPUSH
35866: CALL_OW 314
35870: NOT
35871: IFFALSE 35892
// ComTameXY ( j , x , y ) ;
35873: LD_VAR 0 3
35877: PPUSH
35878: LD_VAR 0 4
35882: PPUSH
35883: LD_VAR 0 5
35887: PPUSH
35888: CALL_OW 131
// end ; end ;
35892: GO 35557
35894: POP
35895: POP
// end ;
35896: GO 35113
35898: POP
35899: POP
// end ;
35900: LD_VAR 0 1
35904: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
35905: LD_INT 0
35907: PPUSH
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
// if not mc_bases then
35915: LD_EXP 49
35919: NOT
35920: IFFALSE 35924
// exit ;
35922: GO 36550
// for i = 1 to mc_bases do
35924: LD_ADDR_VAR 0 2
35928: PUSH
35929: DOUBLE
35930: LD_INT 1
35932: DEC
35933: ST_TO_ADDR
35934: LD_EXP 49
35938: PUSH
35939: FOR_TO
35940: IFFALSE 36548
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
35942: LD_EXP 78
35946: PUSH
35947: LD_VAR 0 2
35951: ARRAY
35952: NOT
35953: PUSH
35954: LD_EXP 78
35958: PUSH
35959: LD_VAR 0 2
35963: ARRAY
35964: PPUSH
35965: LD_INT 25
35967: PUSH
35968: LD_INT 12
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PPUSH
35975: CALL_OW 72
35979: NOT
35980: OR
35981: IFFALSE 35985
// continue ;
35983: GO 35939
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
35985: LD_ADDR_VAR 0 5
35989: PUSH
35990: LD_EXP 78
35994: PUSH
35995: LD_VAR 0 2
35999: ARRAY
36000: PUSH
36001: LD_INT 1
36003: ARRAY
36004: PPUSH
36005: CALL_OW 255
36009: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
36010: LD_VAR 0 5
36014: PPUSH
36015: LD_INT 2
36017: PPUSH
36018: CALL_OW 325
36022: IFFALSE 36275
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36024: LD_ADDR_VAR 0 4
36028: PUSH
36029: LD_EXP 78
36033: PUSH
36034: LD_VAR 0 2
36038: ARRAY
36039: PPUSH
36040: LD_INT 25
36042: PUSH
36043: LD_INT 16
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PPUSH
36050: CALL_OW 72
36054: ST_TO_ADDR
// if tmp < 6 then
36055: LD_VAR 0 4
36059: PUSH
36060: LD_INT 6
36062: LESS
36063: IFFALSE 36275
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
36065: LD_ADDR_VAR 0 6
36069: PUSH
36070: LD_EXP 49
36074: PUSH
36075: LD_VAR 0 2
36079: ARRAY
36080: PPUSH
36081: LD_INT 2
36083: PUSH
36084: LD_INT 30
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 30
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: PPUSH
36109: CALL_OW 72
36113: ST_TO_ADDR
// if depot then
36114: LD_VAR 0 6
36118: IFFALSE 36275
// begin selected := 0 ;
36120: LD_ADDR_VAR 0 7
36124: PUSH
36125: LD_INT 0
36127: ST_TO_ADDR
// for j in depot do
36128: LD_ADDR_VAR 0 3
36132: PUSH
36133: LD_VAR 0 6
36137: PUSH
36138: FOR_IN
36139: IFFALSE 36170
// begin if UnitsInside ( j ) < 6 then
36141: LD_VAR 0 3
36145: PPUSH
36146: CALL_OW 313
36150: PUSH
36151: LD_INT 6
36153: LESS
36154: IFFALSE 36168
// begin selected := j ;
36156: LD_ADDR_VAR 0 7
36160: PUSH
36161: LD_VAR 0 3
36165: ST_TO_ADDR
// break ;
36166: GO 36170
// end ; end ;
36168: GO 36138
36170: POP
36171: POP
// if selected then
36172: LD_VAR 0 7
36176: IFFALSE 36275
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_EXP 78
36187: PUSH
36188: LD_VAR 0 2
36192: ARRAY
36193: PPUSH
36194: LD_INT 25
36196: PUSH
36197: LD_INT 12
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PPUSH
36204: CALL_OW 72
36208: PUSH
36209: FOR_IN
36210: IFFALSE 36273
// if not HasTask ( j ) then
36212: LD_VAR 0 3
36216: PPUSH
36217: CALL_OW 314
36221: NOT
36222: IFFALSE 36271
// begin if not IsInUnit ( j ) then
36224: LD_VAR 0 3
36228: PPUSH
36229: CALL_OW 310
36233: NOT
36234: IFFALSE 36250
// ComEnterUnit ( j , selected ) ;
36236: LD_VAR 0 3
36240: PPUSH
36241: LD_VAR 0 7
36245: PPUSH
36246: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
36250: LD_VAR 0 3
36254: PPUSH
36255: LD_INT 16
36257: PPUSH
36258: CALL_OW 183
// AddComExitBuilding ( j ) ;
36262: LD_VAR 0 3
36266: PPUSH
36267: CALL_OW 182
// end ;
36271: GO 36209
36273: POP
36274: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36275: LD_VAR 0 5
36279: PPUSH
36280: LD_INT 11
36282: PPUSH
36283: CALL_OW 325
36287: IFFALSE 36546
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36289: LD_ADDR_VAR 0 4
36293: PUSH
36294: LD_EXP 78
36298: PUSH
36299: LD_VAR 0 2
36303: ARRAY
36304: PPUSH
36305: LD_INT 25
36307: PUSH
36308: LD_INT 16
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PPUSH
36315: CALL_OW 72
36319: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36320: LD_VAR 0 4
36324: PUSH
36325: LD_INT 6
36327: GREATEREQUAL
36328: PUSH
36329: LD_VAR 0 5
36333: PPUSH
36334: LD_INT 2
36336: PPUSH
36337: CALL_OW 325
36341: NOT
36342: OR
36343: IFFALSE 36546
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36345: LD_ADDR_VAR 0 8
36349: PUSH
36350: LD_EXP 49
36354: PUSH
36355: LD_VAR 0 2
36359: ARRAY
36360: PPUSH
36361: LD_INT 2
36363: PUSH
36364: LD_INT 30
36366: PUSH
36367: LD_INT 4
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 30
36376: PUSH
36377: LD_INT 5
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: PPUSH
36389: CALL_OW 72
36393: ST_TO_ADDR
// if barracks then
36394: LD_VAR 0 8
36398: IFFALSE 36546
// begin selected := 0 ;
36400: LD_ADDR_VAR 0 7
36404: PUSH
36405: LD_INT 0
36407: ST_TO_ADDR
// for j in barracks do
36408: LD_ADDR_VAR 0 3
36412: PUSH
36413: LD_VAR 0 8
36417: PUSH
36418: FOR_IN
36419: IFFALSE 36450
// begin if UnitsInside ( j ) < 6 then
36421: LD_VAR 0 3
36425: PPUSH
36426: CALL_OW 313
36430: PUSH
36431: LD_INT 6
36433: LESS
36434: IFFALSE 36448
// begin selected := j ;
36436: LD_ADDR_VAR 0 7
36440: PUSH
36441: LD_VAR 0 3
36445: ST_TO_ADDR
// break ;
36446: GO 36450
// end ; end ;
36448: GO 36418
36450: POP
36451: POP
// if selected then
36452: LD_VAR 0 7
36456: IFFALSE 36546
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36458: LD_ADDR_VAR 0 3
36462: PUSH
36463: LD_EXP 78
36467: PUSH
36468: LD_VAR 0 2
36472: ARRAY
36473: PPUSH
36474: LD_INT 25
36476: PUSH
36477: LD_INT 12
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PPUSH
36484: CALL_OW 72
36488: PUSH
36489: FOR_IN
36490: IFFALSE 36544
// if not IsInUnit ( j ) and not HasTask ( j ) then
36492: LD_VAR 0 3
36496: PPUSH
36497: CALL_OW 310
36501: NOT
36502: PUSH
36503: LD_VAR 0 3
36507: PPUSH
36508: CALL_OW 314
36512: NOT
36513: AND
36514: IFFALSE 36542
// begin ComEnterUnit ( j , selected ) ;
36516: LD_VAR 0 3
36520: PPUSH
36521: LD_VAR 0 7
36525: PPUSH
36526: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
36530: LD_VAR 0 3
36534: PPUSH
36535: LD_INT 15
36537: PPUSH
36538: CALL_OW 183
// end ;
36542: GO 36489
36544: POP
36545: POP
// end ; end ; end ; end ; end ;
36546: GO 35939
36548: POP
36549: POP
// end ;
36550: LD_VAR 0 1
36554: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
36555: LD_INT 0
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
// if not mc_bases then
36561: LD_EXP 49
36565: NOT
36566: IFFALSE 36570
// exit ;
36568: GO 36748
// for i = 1 to mc_bases do
36570: LD_ADDR_VAR 0 2
36574: PUSH
36575: DOUBLE
36576: LD_INT 1
36578: DEC
36579: ST_TO_ADDR
36580: LD_EXP 49
36584: PUSH
36585: FOR_TO
36586: IFFALSE 36746
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
36588: LD_ADDR_VAR 0 4
36592: PUSH
36593: LD_EXP 49
36597: PUSH
36598: LD_VAR 0 2
36602: ARRAY
36603: PPUSH
36604: LD_INT 25
36606: PUSH
36607: LD_INT 9
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PPUSH
36614: CALL_OW 72
36618: ST_TO_ADDR
// if not tmp then
36619: LD_VAR 0 4
36623: NOT
36624: IFFALSE 36628
// continue ;
36626: GO 36585
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
36628: LD_EXP 75
36632: PUSH
36633: LD_VAR 0 2
36637: ARRAY
36638: PPUSH
36639: LD_INT 29
36641: PPUSH
36642: CALL_OW 325
36646: NOT
36647: PUSH
36648: LD_EXP 75
36652: PUSH
36653: LD_VAR 0 2
36657: ARRAY
36658: PPUSH
36659: LD_INT 28
36661: PPUSH
36662: CALL_OW 325
36666: NOT
36667: AND
36668: IFFALSE 36672
// continue ;
36670: GO 36585
// for j in tmp do
36672: LD_ADDR_VAR 0 3
36676: PUSH
36677: LD_VAR 0 4
36681: PUSH
36682: FOR_IN
36683: IFFALSE 36742
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
36685: LD_VAR 0 3
36689: PUSH
36690: LD_EXP 52
36694: PUSH
36695: LD_VAR 0 2
36699: ARRAY
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: IN
36705: NOT
36706: PUSH
36707: LD_VAR 0 3
36711: PUSH
36712: LD_EXP 52
36716: PUSH
36717: LD_VAR 0 2
36721: ARRAY
36722: PUSH
36723: LD_INT 2
36725: ARRAY
36726: IN
36727: NOT
36728: AND
36729: IFFALSE 36740
// ComSpaceTimeShoot ( j ) ;
36731: LD_VAR 0 3
36735: PPUSH
36736: CALL 47416 0 1
36740: GO 36682
36742: POP
36743: POP
// end ;
36744: GO 36585
36746: POP
36747: POP
// end ;
36748: LD_VAR 0 1
36752: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
36753: LD_INT 0
36755: PPUSH
36756: PPUSH
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
// if not mc_bases then
36764: LD_EXP 49
36768: NOT
36769: IFFALSE 36773
// exit ;
36771: GO 37395
// for i = 1 to mc_bases do
36773: LD_ADDR_VAR 0 2
36777: PUSH
36778: DOUBLE
36779: LD_INT 1
36781: DEC
36782: ST_TO_ADDR
36783: LD_EXP 49
36787: PUSH
36788: FOR_TO
36789: IFFALSE 37393
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
36791: LD_EXP 84
36795: PUSH
36796: LD_VAR 0 2
36800: ARRAY
36801: NOT
36802: PUSH
36803: LD_INT 38
36805: PPUSH
36806: LD_EXP 75
36810: PUSH
36811: LD_VAR 0 2
36815: ARRAY
36816: PPUSH
36817: CALL_OW 321
36821: PUSH
36822: LD_INT 2
36824: NONEQUAL
36825: OR
36826: IFFALSE 36830
// continue ;
36828: GO 36788
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
36830: LD_ADDR_VAR 0 8
36834: PUSH
36835: LD_EXP 49
36839: PUSH
36840: LD_VAR 0 2
36844: ARRAY
36845: PPUSH
36846: LD_INT 30
36848: PUSH
36849: LD_INT 34
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PPUSH
36856: CALL_OW 72
36860: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
36861: LD_ADDR_VAR 0 9
36865: PUSH
36866: LD_EXP 49
36870: PUSH
36871: LD_VAR 0 2
36875: ARRAY
36876: PPUSH
36877: LD_INT 25
36879: PUSH
36880: LD_INT 4
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PPUSH
36887: CALL_OW 72
36891: PPUSH
36892: LD_INT 0
36894: PPUSH
36895: CALL 86941 0 2
36899: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
36900: LD_VAR 0 9
36904: NOT
36905: PUSH
36906: LD_VAR 0 8
36910: NOT
36911: OR
36912: PUSH
36913: LD_EXP 49
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: PPUSH
36924: LD_INT 124
36926: PPUSH
36927: CALL 86941 0 2
36931: OR
36932: IFFALSE 36936
// continue ;
36934: GO 36788
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
36936: LD_EXP 85
36940: PUSH
36941: LD_VAR 0 2
36945: ARRAY
36946: PUSH
36947: LD_EXP 84
36951: PUSH
36952: LD_VAR 0 2
36956: ARRAY
36957: LESS
36958: PUSH
36959: LD_EXP 85
36963: PUSH
36964: LD_VAR 0 2
36968: ARRAY
36969: PUSH
36970: LD_VAR 0 8
36974: LESS
36975: AND
36976: IFFALSE 37391
// begin tmp := sci [ 1 ] ;
36978: LD_ADDR_VAR 0 7
36982: PUSH
36983: LD_VAR 0 9
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
36992: LD_VAR 0 7
36996: PPUSH
36997: LD_INT 124
36999: PPUSH
37000: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
37004: LD_ADDR_VAR 0 3
37008: PUSH
37009: DOUBLE
37010: LD_EXP 84
37014: PUSH
37015: LD_VAR 0 2
37019: ARRAY
37020: INC
37021: ST_TO_ADDR
37022: LD_EXP 84
37026: PUSH
37027: LD_VAR 0 2
37031: ARRAY
37032: PUSH
37033: FOR_DOWNTO
37034: IFFALSE 37377
// begin if IsInUnit ( tmp ) then
37036: LD_VAR 0 7
37040: PPUSH
37041: CALL_OW 310
37045: IFFALSE 37056
// ComExitBuilding ( tmp ) ;
37047: LD_VAR 0 7
37051: PPUSH
37052: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
37056: LD_INT 35
37058: PPUSH
37059: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
37063: LD_VAR 0 7
37067: PPUSH
37068: CALL_OW 310
37072: NOT
37073: PUSH
37074: LD_VAR 0 7
37078: PPUSH
37079: CALL_OW 314
37083: NOT
37084: AND
37085: IFFALSE 37056
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
37087: LD_ADDR_VAR 0 6
37091: PUSH
37092: LD_VAR 0 7
37096: PPUSH
37097: CALL_OW 250
37101: PUSH
37102: LD_VAR 0 7
37106: PPUSH
37107: CALL_OW 251
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37116: LD_INT 35
37118: PPUSH
37119: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37123: LD_ADDR_VAR 0 4
37127: PUSH
37128: LD_EXP 84
37132: PUSH
37133: LD_VAR 0 2
37137: ARRAY
37138: PUSH
37139: LD_VAR 0 3
37143: ARRAY
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37149: LD_ADDR_VAR 0 5
37153: PUSH
37154: LD_EXP 84
37158: PUSH
37159: LD_VAR 0 2
37163: ARRAY
37164: PUSH
37165: LD_VAR 0 3
37169: ARRAY
37170: PUSH
37171: LD_INT 2
37173: ARRAY
37174: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37175: LD_VAR 0 7
37179: PPUSH
37180: LD_INT 10
37182: PPUSH
37183: CALL 56274 0 2
37187: PUSH
37188: LD_INT 4
37190: ARRAY
37191: IFFALSE 37229
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37193: LD_VAR 0 7
37197: PPUSH
37198: LD_VAR 0 6
37202: PUSH
37203: LD_INT 1
37205: ARRAY
37206: PPUSH
37207: LD_VAR 0 6
37211: PUSH
37212: LD_INT 2
37214: ARRAY
37215: PPUSH
37216: CALL_OW 111
// wait ( 0 0$10 ) ;
37220: LD_INT 350
37222: PPUSH
37223: CALL_OW 67
// end else
37227: GO 37255
// begin ComMoveXY ( tmp , x , y ) ;
37229: LD_VAR 0 7
37233: PPUSH
37234: LD_VAR 0 4
37238: PPUSH
37239: LD_VAR 0 5
37243: PPUSH
37244: CALL_OW 111
// wait ( 0 0$3 ) ;
37248: LD_INT 105
37250: PPUSH
37251: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
37255: LD_VAR 0 7
37259: PPUSH
37260: LD_VAR 0 4
37264: PPUSH
37265: LD_VAR 0 5
37269: PPUSH
37270: CALL_OW 307
37274: IFFALSE 37116
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37276: LD_VAR 0 7
37280: PPUSH
37281: LD_VAR 0 4
37285: PPUSH
37286: LD_VAR 0 5
37290: PPUSH
37291: LD_VAR 0 8
37295: PUSH
37296: LD_VAR 0 3
37300: ARRAY
37301: PPUSH
37302: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
37306: LD_INT 35
37308: PPUSH
37309: CALL_OW 67
// until not HasTask ( tmp ) ;
37313: LD_VAR 0 7
37317: PPUSH
37318: CALL_OW 314
37322: NOT
37323: IFFALSE 37306
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37325: LD_ADDR_EXP 85
37329: PUSH
37330: LD_EXP 85
37334: PPUSH
37335: LD_VAR 0 2
37339: PUSH
37340: LD_EXP 85
37344: PUSH
37345: LD_VAR 0 2
37349: ARRAY
37350: PUSH
37351: LD_INT 1
37353: PLUS
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PPUSH
37359: LD_VAR 0 8
37363: PUSH
37364: LD_VAR 0 3
37368: ARRAY
37369: PPUSH
37370: CALL 53681 0 3
37374: ST_TO_ADDR
// end ;
37375: GO 37033
37377: POP
37378: POP
// MC_Reset ( i , 124 ) ;
37379: LD_VAR 0 2
37383: PPUSH
37384: LD_INT 124
37386: PPUSH
37387: CALL 20878 0 2
// end ; end ;
37391: GO 36788
37393: POP
37394: POP
// end ;
37395: LD_VAR 0 1
37399: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37400: LD_INT 0
37402: PPUSH
37403: PPUSH
37404: PPUSH
// if not mc_bases then
37405: LD_EXP 49
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 38020
// for i = 1 to mc_bases do
37414: LD_ADDR_VAR 0 2
37418: PUSH
37419: DOUBLE
37420: LD_INT 1
37422: DEC
37423: ST_TO_ADDR
37424: LD_EXP 49
37428: PUSH
37429: FOR_TO
37430: IFFALSE 38018
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37432: LD_ADDR_VAR 0 3
37436: PUSH
37437: LD_EXP 49
37441: PUSH
37442: LD_VAR 0 2
37446: ARRAY
37447: PPUSH
37448: LD_INT 25
37450: PUSH
37451: LD_INT 4
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PPUSH
37458: CALL_OW 72
37462: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37463: LD_VAR 0 3
37467: NOT
37468: PUSH
37469: LD_EXP 86
37473: PUSH
37474: LD_VAR 0 2
37478: ARRAY
37479: NOT
37480: OR
37481: PUSH
37482: LD_EXP 49
37486: PUSH
37487: LD_VAR 0 2
37491: ARRAY
37492: PPUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 30
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 30
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL_OW 72
37525: NOT
37526: OR
37527: IFFALSE 37577
// begin if mc_deposits_finder [ i ] then
37529: LD_EXP 87
37533: PUSH
37534: LD_VAR 0 2
37538: ARRAY
37539: IFFALSE 37575
// begin MC_Reset ( i , 125 ) ;
37541: LD_VAR 0 2
37545: PPUSH
37546: LD_INT 125
37548: PPUSH
37549: CALL 20878 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37553: LD_ADDR_EXP 87
37557: PUSH
37558: LD_EXP 87
37562: PPUSH
37563: LD_VAR 0 2
37567: PPUSH
37568: EMPTY
37569: PPUSH
37570: CALL_OW 1
37574: ST_TO_ADDR
// end ; continue ;
37575: GO 37429
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
37577: LD_EXP 86
37581: PUSH
37582: LD_VAR 0 2
37586: ARRAY
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: PUSH
37592: LD_INT 3
37594: ARRAY
37595: PUSH
37596: LD_INT 1
37598: EQUAL
37599: PUSH
37600: LD_INT 20
37602: PPUSH
37603: LD_EXP 75
37607: PUSH
37608: LD_VAR 0 2
37612: ARRAY
37613: PPUSH
37614: CALL_OW 321
37618: PUSH
37619: LD_INT 2
37621: NONEQUAL
37622: AND
37623: IFFALSE 37673
// begin if mc_deposits_finder [ i ] then
37625: LD_EXP 87
37629: PUSH
37630: LD_VAR 0 2
37634: ARRAY
37635: IFFALSE 37671
// begin MC_Reset ( i , 125 ) ;
37637: LD_VAR 0 2
37641: PPUSH
37642: LD_INT 125
37644: PPUSH
37645: CALL 20878 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37649: LD_ADDR_EXP 87
37653: PUSH
37654: LD_EXP 87
37658: PPUSH
37659: LD_VAR 0 2
37663: PPUSH
37664: EMPTY
37665: PPUSH
37666: CALL_OW 1
37670: ST_TO_ADDR
// end ; continue ;
37671: GO 37429
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
37673: LD_EXP 86
37677: PUSH
37678: LD_VAR 0 2
37682: ARRAY
37683: PUSH
37684: LD_INT 1
37686: ARRAY
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: PPUSH
37692: LD_EXP 86
37696: PUSH
37697: LD_VAR 0 2
37701: ARRAY
37702: PUSH
37703: LD_INT 1
37705: ARRAY
37706: PUSH
37707: LD_INT 2
37709: ARRAY
37710: PPUSH
37711: LD_EXP 75
37715: PUSH
37716: LD_VAR 0 2
37720: ARRAY
37721: PPUSH
37722: CALL_OW 440
37726: IFFALSE 37769
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
37728: LD_ADDR_EXP 86
37732: PUSH
37733: LD_EXP 86
37737: PPUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: LD_EXP 86
37747: PUSH
37748: LD_VAR 0 2
37752: ARRAY
37753: PPUSH
37754: LD_INT 1
37756: PPUSH
37757: CALL_OW 3
37761: PPUSH
37762: CALL_OW 1
37766: ST_TO_ADDR
37767: GO 38016
// begin if not mc_deposits_finder [ i ] then
37769: LD_EXP 87
37773: PUSH
37774: LD_VAR 0 2
37778: ARRAY
37779: NOT
37780: IFFALSE 37832
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
37782: LD_ADDR_EXP 87
37786: PUSH
37787: LD_EXP 87
37791: PPUSH
37792: LD_VAR 0 2
37796: PPUSH
37797: LD_VAR 0 3
37801: PUSH
37802: LD_INT 1
37804: ARRAY
37805: PUSH
37806: EMPTY
37807: LIST
37808: PPUSH
37809: CALL_OW 1
37813: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
37814: LD_VAR 0 3
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PPUSH
37823: LD_INT 125
37825: PPUSH
37826: CALL_OW 109
// end else
37830: GO 38016
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
37832: LD_EXP 87
37836: PUSH
37837: LD_VAR 0 2
37841: ARRAY
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PPUSH
37847: CALL_OW 310
37851: IFFALSE 37874
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
37853: LD_EXP 87
37857: PUSH
37858: LD_VAR 0 2
37862: ARRAY
37863: PUSH
37864: LD_INT 1
37866: ARRAY
37867: PPUSH
37868: CALL_OW 122
37872: GO 38016
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
37874: LD_EXP 87
37878: PUSH
37879: LD_VAR 0 2
37883: ARRAY
37884: PUSH
37885: LD_INT 1
37887: ARRAY
37888: PPUSH
37889: CALL_OW 314
37893: NOT
37894: PUSH
37895: LD_EXP 87
37899: PUSH
37900: LD_VAR 0 2
37904: ARRAY
37905: PUSH
37906: LD_INT 1
37908: ARRAY
37909: PPUSH
37910: LD_EXP 86
37914: PUSH
37915: LD_VAR 0 2
37919: ARRAY
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PUSH
37925: LD_INT 1
37927: ARRAY
37928: PPUSH
37929: LD_EXP 86
37933: PUSH
37934: LD_VAR 0 2
37938: ARRAY
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: PUSH
37944: LD_INT 2
37946: ARRAY
37947: PPUSH
37948: CALL_OW 297
37952: PUSH
37953: LD_INT 6
37955: GREATER
37956: AND
37957: IFFALSE 38016
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
37959: LD_EXP 87
37963: PUSH
37964: LD_VAR 0 2
37968: ARRAY
37969: PUSH
37970: LD_INT 1
37972: ARRAY
37973: PPUSH
37974: LD_EXP 86
37978: PUSH
37979: LD_VAR 0 2
37983: ARRAY
37984: PUSH
37985: LD_INT 1
37987: ARRAY
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PPUSH
37993: LD_EXP 86
37997: PUSH
37998: LD_VAR 0 2
38002: ARRAY
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PUSH
38008: LD_INT 2
38010: ARRAY
38011: PPUSH
38012: CALL_OW 111
// end ; end ; end ;
38016: GO 37429
38018: POP
38019: POP
// end ;
38020: LD_VAR 0 1
38024: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
38025: LD_INT 0
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
// if not mc_bases then
38038: LD_EXP 49
38042: NOT
38043: IFFALSE 38047
// exit ;
38045: GO 38771
// for i = 1 to mc_bases do
38047: LD_ADDR_VAR 0 2
38051: PUSH
38052: DOUBLE
38053: LD_INT 1
38055: DEC
38056: ST_TO_ADDR
38057: LD_EXP 49
38061: PUSH
38062: FOR_TO
38063: IFFALSE 38769
// begin if not mc_bases [ i ] then
38065: LD_EXP 49
38069: PUSH
38070: LD_VAR 0 2
38074: ARRAY
38075: NOT
38076: IFFALSE 38080
// continue ;
38078: GO 38062
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
38080: LD_ADDR_VAR 0 7
38084: PUSH
38085: LD_EXP 49
38089: PUSH
38090: LD_VAR 0 2
38094: ARRAY
38095: PUSH
38096: LD_INT 1
38098: ARRAY
38099: PPUSH
38100: CALL_OW 248
38104: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38105: LD_VAR 0 7
38109: PUSH
38110: LD_INT 3
38112: EQUAL
38113: PUSH
38114: LD_EXP 68
38118: PUSH
38119: LD_VAR 0 2
38123: ARRAY
38124: PUSH
38125: LD_EXP 71
38129: PUSH
38130: LD_VAR 0 2
38134: ARRAY
38135: UNION
38136: PPUSH
38137: LD_INT 33
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PPUSH
38147: CALL_OW 72
38151: NOT
38152: OR
38153: IFFALSE 38157
// continue ;
38155: GO 38062
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38157: LD_ADDR_VAR 0 9
38161: PUSH
38162: LD_EXP 49
38166: PUSH
38167: LD_VAR 0 2
38171: ARRAY
38172: PPUSH
38173: LD_INT 30
38175: PUSH
38176: LD_INT 36
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PPUSH
38183: CALL_OW 72
38187: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38188: LD_ADDR_VAR 0 10
38192: PUSH
38193: LD_EXP 68
38197: PUSH
38198: LD_VAR 0 2
38202: ARRAY
38203: PPUSH
38204: LD_INT 34
38206: PUSH
38207: LD_INT 31
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PPUSH
38214: CALL_OW 72
38218: ST_TO_ADDR
// if not cts and not mcts then
38219: LD_VAR 0 9
38223: NOT
38224: PUSH
38225: LD_VAR 0 10
38229: NOT
38230: AND
38231: IFFALSE 38235
// continue ;
38233: GO 38062
// x := cts ;
38235: LD_ADDR_VAR 0 11
38239: PUSH
38240: LD_VAR 0 9
38244: ST_TO_ADDR
// if not x then
38245: LD_VAR 0 11
38249: NOT
38250: IFFALSE 38262
// x := mcts ;
38252: LD_ADDR_VAR 0 11
38256: PUSH
38257: LD_VAR 0 10
38261: ST_TO_ADDR
// if mc_remote_driver [ i ] then
38262: LD_EXP 89
38266: PUSH
38267: LD_VAR 0 2
38271: ARRAY
38272: IFFALSE 38541
// for j in mc_remote_driver [ i ] do
38274: LD_ADDR_VAR 0 3
38278: PUSH
38279: LD_EXP 89
38283: PUSH
38284: LD_VAR 0 2
38288: ARRAY
38289: PUSH
38290: FOR_IN
38291: IFFALSE 38539
// begin if GetClass ( j ) <> 3 then
38293: LD_VAR 0 3
38297: PPUSH
38298: CALL_OW 257
38302: PUSH
38303: LD_INT 3
38305: NONEQUAL
38306: IFFALSE 38359
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38308: LD_ADDR_EXP 89
38312: PUSH
38313: LD_EXP 89
38317: PPUSH
38318: LD_VAR 0 2
38322: PPUSH
38323: LD_EXP 89
38327: PUSH
38328: LD_VAR 0 2
38332: ARRAY
38333: PUSH
38334: LD_VAR 0 3
38338: DIFF
38339: PPUSH
38340: CALL_OW 1
38344: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38345: LD_VAR 0 3
38349: PPUSH
38350: LD_INT 0
38352: PPUSH
38353: CALL_OW 109
// continue ;
38357: GO 38290
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38359: LD_VAR 0 3
38363: PPUSH
38364: CALL_OW 310
38368: NOT
38369: PUSH
38370: LD_VAR 0 3
38374: PPUSH
38375: CALL_OW 310
38379: PPUSH
38380: CALL_OW 266
38384: PUSH
38385: LD_INT 36
38387: NONEQUAL
38388: PUSH
38389: LD_VAR 0 3
38393: PPUSH
38394: CALL 87029 0 1
38398: NOT
38399: AND
38400: OR
38401: IFFALSE 38537
// begin if IsInUnit ( j ) then
38403: LD_VAR 0 3
38407: PPUSH
38408: CALL_OW 310
38412: IFFALSE 38423
// ComExitBuilding ( j ) ;
38414: LD_VAR 0 3
38418: PPUSH
38419: CALL_OW 122
// ct := 0 ;
38423: LD_ADDR_VAR 0 8
38427: PUSH
38428: LD_INT 0
38430: ST_TO_ADDR
// for k in x do
38431: LD_ADDR_VAR 0 4
38435: PUSH
38436: LD_VAR 0 11
38440: PUSH
38441: FOR_IN
38442: IFFALSE 38515
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
38444: LD_VAR 0 4
38448: PPUSH
38449: CALL_OW 264
38453: PUSH
38454: LD_INT 31
38456: EQUAL
38457: PUSH
38458: LD_VAR 0 4
38462: PPUSH
38463: CALL_OW 311
38467: NOT
38468: AND
38469: PUSH
38470: LD_VAR 0 4
38474: PPUSH
38475: CALL_OW 266
38479: PUSH
38480: LD_INT 36
38482: EQUAL
38483: PUSH
38484: LD_VAR 0 4
38488: PPUSH
38489: CALL_OW 313
38493: PUSH
38494: LD_INT 3
38496: LESS
38497: AND
38498: OR
38499: IFFALSE 38513
// begin ct := k ;
38501: LD_ADDR_VAR 0 8
38505: PUSH
38506: LD_VAR 0 4
38510: ST_TO_ADDR
// break ;
38511: GO 38515
// end ;
38513: GO 38441
38515: POP
38516: POP
// if ct then
38517: LD_VAR 0 8
38521: IFFALSE 38537
// ComEnterUnit ( j , ct ) ;
38523: LD_VAR 0 3
38527: PPUSH
38528: LD_VAR 0 8
38532: PPUSH
38533: CALL_OW 120
// end ; end ;
38537: GO 38290
38539: POP
38540: POP
// places := 0 ;
38541: LD_ADDR_VAR 0 5
38545: PUSH
38546: LD_INT 0
38548: ST_TO_ADDR
// for j = 1 to x do
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: DOUBLE
38555: LD_INT 1
38557: DEC
38558: ST_TO_ADDR
38559: LD_VAR 0 11
38563: PUSH
38564: FOR_TO
38565: IFFALSE 38620
// if GetWeapon ( x [ j ] ) = ar_control_tower then
38567: LD_VAR 0 11
38571: PUSH
38572: LD_VAR 0 3
38576: ARRAY
38577: PPUSH
38578: CALL_OW 264
38582: PUSH
38583: LD_INT 31
38585: EQUAL
38586: IFFALSE 38604
// places := places + 1 else
38588: LD_ADDR_VAR 0 5
38592: PUSH
38593: LD_VAR 0 5
38597: PUSH
38598: LD_INT 1
38600: PLUS
38601: ST_TO_ADDR
38602: GO 38618
// places := places + 3 ;
38604: LD_ADDR_VAR 0 5
38608: PUSH
38609: LD_VAR 0 5
38613: PUSH
38614: LD_INT 3
38616: PLUS
38617: ST_TO_ADDR
38618: GO 38564
38620: POP
38621: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
38622: LD_ADDR_VAR 0 6
38626: PUSH
38627: LD_EXP 49
38631: PUSH
38632: LD_VAR 0 2
38636: ARRAY
38637: PPUSH
38638: LD_INT 25
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PPUSH
38648: CALL_OW 72
38652: PUSH
38653: LD_EXP 89
38657: PUSH
38658: LD_VAR 0 2
38662: ARRAY
38663: DIFF
38664: PPUSH
38665: LD_INT 3
38667: PPUSH
38668: CALL 87929 0 2
38672: ST_TO_ADDR
// if not tmp then
38673: LD_VAR 0 6
38677: NOT
38678: IFFALSE 38682
// continue ;
38680: GO 38062
// places := places - mc_remote_driver [ i ] ;
38682: LD_ADDR_VAR 0 5
38686: PUSH
38687: LD_VAR 0 5
38691: PUSH
38692: LD_EXP 89
38696: PUSH
38697: LD_VAR 0 2
38701: ARRAY
38702: MINUS
38703: ST_TO_ADDR
// if places then
38704: LD_VAR 0 5
38708: IFFALSE 38767
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
38710: LD_ADDR_EXP 89
38714: PUSH
38715: LD_EXP 89
38719: PPUSH
38720: LD_VAR 0 2
38724: PPUSH
38725: LD_EXP 89
38729: PUSH
38730: LD_VAR 0 2
38734: ARRAY
38735: PUSH
38736: LD_VAR 0 6
38740: PUSH
38741: LD_INT 1
38743: ARRAY
38744: UNION
38745: PPUSH
38746: CALL_OW 1
38750: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
38751: LD_VAR 0 6
38755: PUSH
38756: LD_INT 1
38758: ARRAY
38759: PPUSH
38760: LD_INT 126
38762: PPUSH
38763: CALL_OW 109
// end ; end ;
38767: GO 38062
38769: POP
38770: POP
// end ;
38771: LD_VAR 0 1
38775: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
38784: LD_VAR 0 1
38788: NOT
38789: PUSH
38790: LD_VAR 0 2
38794: NOT
38795: OR
38796: PUSH
38797: LD_VAR 0 3
38801: NOT
38802: OR
38803: PUSH
38804: LD_VAR 0 4
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: LD_INT 3
38817: PUSH
38818: LD_INT 4
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: LD_INT 8
38826: PUSH
38827: LD_INT 9
38829: PUSH
38830: LD_INT 15
38832: PUSH
38833: LD_INT 16
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: IN
38847: NOT
38848: OR
38849: IFFALSE 38853
// exit ;
38851: GO 39753
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
38853: LD_ADDR_VAR 0 2
38857: PUSH
38858: LD_VAR 0 2
38862: PPUSH
38863: LD_INT 21
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 24
38875: PUSH
38876: LD_INT 250
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PPUSH
38887: CALL_OW 72
38891: ST_TO_ADDR
// case class of 1 , 15 :
38892: LD_VAR 0 4
38896: PUSH
38897: LD_INT 1
38899: DOUBLE
38900: EQUAL
38901: IFTRUE 38911
38903: LD_INT 15
38905: DOUBLE
38906: EQUAL
38907: IFTRUE 38911
38909: GO 38996
38911: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
38912: LD_ADDR_VAR 0 8
38916: PUSH
38917: LD_VAR 0 2
38921: PPUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 30
38927: PUSH
38928: LD_INT 32
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 30
38937: PUSH
38938: LD_INT 31
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: PPUSH
38950: CALL_OW 72
38954: PUSH
38955: LD_VAR 0 2
38959: PPUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 30
38965: PUSH
38966: LD_INT 4
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 30
38975: PUSH
38976: LD_INT 5
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: PPUSH
38988: CALL_OW 72
38992: ADD
38993: ST_TO_ADDR
38994: GO 39242
38996: LD_INT 2
38998: DOUBLE
38999: EQUAL
39000: IFTRUE 39010
39002: LD_INT 16
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39010
39008: GO 39056
39010: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
39011: LD_ADDR_VAR 0 8
39015: PUSH
39016: LD_VAR 0 2
39020: PPUSH
39021: LD_INT 2
39023: PUSH
39024: LD_INT 30
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 30
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: PPUSH
39049: CALL_OW 72
39053: ST_TO_ADDR
39054: GO 39242
39056: LD_INT 3
39058: DOUBLE
39059: EQUAL
39060: IFTRUE 39064
39062: GO 39110
39064: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
39065: LD_ADDR_VAR 0 8
39069: PUSH
39070: LD_VAR 0 2
39074: PPUSH
39075: LD_INT 2
39077: PUSH
39078: LD_INT 30
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 30
39090: PUSH
39091: LD_INT 3
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: PPUSH
39103: CALL_OW 72
39107: ST_TO_ADDR
39108: GO 39242
39110: LD_INT 4
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39175
39118: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39119: LD_ADDR_VAR 0 8
39123: PUSH
39124: LD_VAR 0 2
39128: PPUSH
39129: LD_INT 2
39131: PUSH
39132: LD_INT 30
39134: PUSH
39135: LD_INT 6
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 30
39144: PUSH
39145: LD_INT 7
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 30
39154: PUSH
39155: LD_INT 8
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: PPUSH
39168: CALL_OW 72
39172: ST_TO_ADDR
39173: GO 39242
39175: LD_INT 5
39177: DOUBLE
39178: EQUAL
39179: IFTRUE 39195
39181: LD_INT 8
39183: DOUBLE
39184: EQUAL
39185: IFTRUE 39195
39187: LD_INT 9
39189: DOUBLE
39190: EQUAL
39191: IFTRUE 39195
39193: GO 39241
39195: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39196: LD_ADDR_VAR 0 8
39200: PUSH
39201: LD_VAR 0 2
39205: PPUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 30
39211: PUSH
39212: LD_INT 4
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 30
39221: PUSH
39222: LD_INT 5
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: PPUSH
39234: CALL_OW 72
39238: ST_TO_ADDR
39239: GO 39242
39241: POP
// if not tmp then
39242: LD_VAR 0 8
39246: NOT
39247: IFFALSE 39251
// exit ;
39249: GO 39753
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39251: LD_VAR 0 4
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 15
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: IN
39266: PUSH
39267: LD_EXP 58
39271: PUSH
39272: LD_VAR 0 1
39276: ARRAY
39277: AND
39278: IFFALSE 39434
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39280: LD_ADDR_VAR 0 9
39284: PUSH
39285: LD_EXP 58
39289: PUSH
39290: LD_VAR 0 1
39294: ARRAY
39295: PUSH
39296: LD_INT 1
39298: ARRAY
39299: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39300: LD_VAR 0 9
39304: PUSH
39305: LD_EXP 59
39309: PUSH
39310: LD_VAR 0 1
39314: ARRAY
39315: IN
39316: NOT
39317: IFFALSE 39432
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
39319: LD_ADDR_EXP 59
39323: PUSH
39324: LD_EXP 59
39328: PPUSH
39329: LD_VAR 0 1
39333: PUSH
39334: LD_EXP 59
39338: PUSH
39339: LD_VAR 0 1
39343: ARRAY
39344: PUSH
39345: LD_INT 1
39347: PLUS
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PPUSH
39353: LD_VAR 0 9
39357: PPUSH
39358: CALL 53681 0 3
39362: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
39363: LD_ADDR_EXP 58
39367: PUSH
39368: LD_EXP 58
39372: PPUSH
39373: LD_VAR 0 1
39377: PPUSH
39378: LD_EXP 58
39382: PUSH
39383: LD_VAR 0 1
39387: ARRAY
39388: PUSH
39389: LD_VAR 0 9
39393: DIFF
39394: PPUSH
39395: CALL_OW 1
39399: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
39400: LD_VAR 0 3
39404: PPUSH
39405: LD_EXP 59
39409: PUSH
39410: LD_VAR 0 1
39414: ARRAY
39415: PUSH
39416: LD_EXP 59
39420: PUSH
39421: LD_VAR 0 1
39425: ARRAY
39426: ARRAY
39427: PPUSH
39428: CALL_OW 120
// end ; exit ;
39432: GO 39753
// end ; if tmp > 1 then
39434: LD_VAR 0 8
39438: PUSH
39439: LD_INT 1
39441: GREATER
39442: IFFALSE 39546
// for i = 2 to tmp do
39444: LD_ADDR_VAR 0 6
39448: PUSH
39449: DOUBLE
39450: LD_INT 2
39452: DEC
39453: ST_TO_ADDR
39454: LD_VAR 0 8
39458: PUSH
39459: FOR_TO
39460: IFFALSE 39544
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
39462: LD_VAR 0 8
39466: PUSH
39467: LD_VAR 0 6
39471: ARRAY
39472: PPUSH
39473: CALL_OW 461
39477: PUSH
39478: LD_INT 6
39480: EQUAL
39481: IFFALSE 39542
// begin x := tmp [ i ] ;
39483: LD_ADDR_VAR 0 9
39487: PUSH
39488: LD_VAR 0 8
39492: PUSH
39493: LD_VAR 0 6
39497: ARRAY
39498: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
39499: LD_ADDR_VAR 0 8
39503: PUSH
39504: LD_VAR 0 8
39508: PPUSH
39509: LD_VAR 0 6
39513: PPUSH
39514: CALL_OW 3
39518: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
39519: LD_ADDR_VAR 0 8
39523: PUSH
39524: LD_VAR 0 8
39528: PPUSH
39529: LD_INT 1
39531: PPUSH
39532: LD_VAR 0 9
39536: PPUSH
39537: CALL_OW 2
39541: ST_TO_ADDR
// end ;
39542: GO 39459
39544: POP
39545: POP
// for i in tmp do
39546: LD_ADDR_VAR 0 6
39550: PUSH
39551: LD_VAR 0 8
39555: PUSH
39556: FOR_IN
39557: IFFALSE 39626
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
39559: LD_VAR 0 6
39563: PPUSH
39564: CALL_OW 313
39568: PUSH
39569: LD_INT 6
39571: LESS
39572: PUSH
39573: LD_VAR 0 6
39577: PPUSH
39578: CALL_OW 266
39582: PUSH
39583: LD_INT 31
39585: PUSH
39586: LD_INT 32
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: IN
39593: NOT
39594: AND
39595: PUSH
39596: LD_VAR 0 6
39600: PPUSH
39601: CALL_OW 313
39605: PUSH
39606: LD_INT 0
39608: EQUAL
39609: OR
39610: IFFALSE 39624
// begin j := i ;
39612: LD_ADDR_VAR 0 7
39616: PUSH
39617: LD_VAR 0 6
39621: ST_TO_ADDR
// break ;
39622: GO 39626
// end ; end ;
39624: GO 39556
39626: POP
39627: POP
// if j then
39628: LD_VAR 0 7
39632: IFFALSE 39650
// ComEnterUnit ( unit , j ) else
39634: LD_VAR 0 3
39638: PPUSH
39639: LD_VAR 0 7
39643: PPUSH
39644: CALL_OW 120
39648: GO 39753
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39650: LD_ADDR_VAR 0 10
39654: PUSH
39655: LD_VAR 0 2
39659: PPUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 30
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 30
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: PPUSH
39688: CALL_OW 72
39692: ST_TO_ADDR
// if depot then
39693: LD_VAR 0 10
39697: IFFALSE 39753
// begin depot := NearestUnitToUnit ( depot , unit ) ;
39699: LD_ADDR_VAR 0 10
39703: PUSH
39704: LD_VAR 0 10
39708: PPUSH
39709: LD_VAR 0 3
39713: PPUSH
39714: CALL_OW 74
39718: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
39719: LD_VAR 0 3
39723: PPUSH
39724: LD_VAR 0 10
39728: PPUSH
39729: CALL_OW 296
39733: PUSH
39734: LD_INT 10
39736: GREATER
39737: IFFALSE 39753
// ComStandNearbyBuilding ( unit , depot ) ;
39739: LD_VAR 0 3
39743: PPUSH
39744: LD_VAR 0 10
39748: PPUSH
39749: CALL 48033 0 2
// end ; end ; end ;
39753: LD_VAR 0 5
39757: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
39758: LD_INT 0
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
// if not mc_bases then
39764: LD_EXP 49
39768: NOT
39769: IFFALSE 39773
// exit ;
39771: GO 40012
// for i = 1 to mc_bases do
39773: LD_ADDR_VAR 0 2
39777: PUSH
39778: DOUBLE
39779: LD_INT 1
39781: DEC
39782: ST_TO_ADDR
39783: LD_EXP 49
39787: PUSH
39788: FOR_TO
39789: IFFALSE 40010
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
39791: LD_ADDR_VAR 0 4
39795: PUSH
39796: LD_EXP 49
39800: PUSH
39801: LD_VAR 0 2
39805: ARRAY
39806: PPUSH
39807: LD_INT 21
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PPUSH
39817: CALL_OW 72
39821: PUSH
39822: LD_EXP 78
39826: PUSH
39827: LD_VAR 0 2
39831: ARRAY
39832: UNION
39833: ST_TO_ADDR
// if not tmp then
39834: LD_VAR 0 4
39838: NOT
39839: IFFALSE 39843
// continue ;
39841: GO 39788
// for j in tmp do
39843: LD_ADDR_VAR 0 3
39847: PUSH
39848: LD_VAR 0 4
39852: PUSH
39853: FOR_IN
39854: IFFALSE 40006
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
39856: LD_VAR 0 3
39860: PPUSH
39861: CALL_OW 110
39865: NOT
39866: PUSH
39867: LD_VAR 0 3
39871: PPUSH
39872: CALL_OW 314
39876: NOT
39877: AND
39878: PUSH
39879: LD_VAR 0 3
39883: PPUSH
39884: CALL_OW 311
39888: NOT
39889: AND
39890: PUSH
39891: LD_VAR 0 3
39895: PPUSH
39896: CALL_OW 310
39900: NOT
39901: AND
39902: PUSH
39903: LD_VAR 0 3
39907: PUSH
39908: LD_EXP 52
39912: PUSH
39913: LD_VAR 0 2
39917: ARRAY
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: IN
39923: NOT
39924: AND
39925: PUSH
39926: LD_VAR 0 3
39930: PUSH
39931: LD_EXP 52
39935: PUSH
39936: LD_VAR 0 2
39940: ARRAY
39941: PUSH
39942: LD_INT 2
39944: ARRAY
39945: IN
39946: NOT
39947: AND
39948: PUSH
39949: LD_VAR 0 3
39953: PUSH
39954: LD_EXP 61
39958: PUSH
39959: LD_VAR 0 2
39963: ARRAY
39964: IN
39965: NOT
39966: AND
39967: IFFALSE 40004
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
39969: LD_VAR 0 2
39973: PPUSH
39974: LD_EXP 49
39978: PUSH
39979: LD_VAR 0 2
39983: ARRAY
39984: PPUSH
39985: LD_VAR 0 3
39989: PPUSH
39990: LD_VAR 0 3
39994: PPUSH
39995: CALL_OW 257
39999: PPUSH
40000: CALL 38776 0 4
// end ;
40004: GO 39853
40006: POP
40007: POP
// end ;
40008: GO 39788
40010: POP
40011: POP
// end ;
40012: LD_VAR 0 1
40016: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
40017: LD_INT 0
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
// if not mc_bases [ base ] then
40025: LD_EXP 49
40029: PUSH
40030: LD_VAR 0 1
40034: ARRAY
40035: NOT
40036: IFFALSE 40040
// exit ;
40038: GO 40222
// tmp := [ ] ;
40040: LD_ADDR_VAR 0 6
40044: PUSH
40045: EMPTY
40046: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
40047: LD_ADDR_VAR 0 7
40051: PUSH
40052: LD_VAR 0 3
40056: PPUSH
40057: LD_INT 0
40059: PPUSH
40060: CALL_OW 517
40064: ST_TO_ADDR
// if not list then
40065: LD_VAR 0 7
40069: NOT
40070: IFFALSE 40074
// exit ;
40072: GO 40222
// for i = 1 to amount do
40074: LD_ADDR_VAR 0 5
40078: PUSH
40079: DOUBLE
40080: LD_INT 1
40082: DEC
40083: ST_TO_ADDR
40084: LD_VAR 0 2
40088: PUSH
40089: FOR_TO
40090: IFFALSE 40170
// begin x := rand ( 1 , list [ 1 ] ) ;
40092: LD_ADDR_VAR 0 8
40096: PUSH
40097: LD_INT 1
40099: PPUSH
40100: LD_VAR 0 7
40104: PUSH
40105: LD_INT 1
40107: ARRAY
40108: PPUSH
40109: CALL_OW 12
40113: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40114: LD_ADDR_VAR 0 6
40118: PUSH
40119: LD_VAR 0 6
40123: PPUSH
40124: LD_VAR 0 5
40128: PPUSH
40129: LD_VAR 0 7
40133: PUSH
40134: LD_INT 1
40136: ARRAY
40137: PUSH
40138: LD_VAR 0 8
40142: ARRAY
40143: PUSH
40144: LD_VAR 0 7
40148: PUSH
40149: LD_INT 2
40151: ARRAY
40152: PUSH
40153: LD_VAR 0 8
40157: ARRAY
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PPUSH
40163: CALL_OW 1
40167: ST_TO_ADDR
// end ;
40168: GO 40089
40170: POP
40171: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40172: LD_ADDR_EXP 62
40176: PUSH
40177: LD_EXP 62
40181: PPUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: LD_VAR 0 6
40191: PPUSH
40192: CALL_OW 1
40196: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40197: LD_ADDR_EXP 64
40201: PUSH
40202: LD_EXP 64
40206: PPUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: LD_VAR 0 3
40216: PPUSH
40217: CALL_OW 1
40221: ST_TO_ADDR
// end ;
40222: LD_VAR 0 4
40226: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40227: LD_INT 0
40229: PPUSH
// if not mc_bases [ base ] then
40230: LD_EXP 49
40234: PUSH
40235: LD_VAR 0 1
40239: ARRAY
40240: NOT
40241: IFFALSE 40245
// exit ;
40243: GO 40270
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40245: LD_ADDR_EXP 54
40249: PUSH
40250: LD_EXP 54
40254: PPUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: LD_VAR 0 2
40264: PPUSH
40265: CALL_OW 1
40269: ST_TO_ADDR
// end ;
40270: LD_VAR 0 3
40274: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40275: LD_INT 0
40277: PPUSH
// if not mc_bases [ base ] then
40278: LD_EXP 49
40282: PUSH
40283: LD_VAR 0 1
40287: ARRAY
40288: NOT
40289: IFFALSE 40293
// exit ;
40291: GO 40330
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40293: LD_ADDR_EXP 54
40297: PUSH
40298: LD_EXP 54
40302: PPUSH
40303: LD_VAR 0 1
40307: PPUSH
40308: LD_EXP 54
40312: PUSH
40313: LD_VAR 0 1
40317: ARRAY
40318: PUSH
40319: LD_VAR 0 2
40323: UNION
40324: PPUSH
40325: CALL_OW 1
40329: ST_TO_ADDR
// end ;
40330: LD_VAR 0 3
40334: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
40335: LD_INT 0
40337: PPUSH
// if not mc_bases [ base ] then
40338: LD_EXP 49
40342: PUSH
40343: LD_VAR 0 1
40347: ARRAY
40348: NOT
40349: IFFALSE 40353
// exit ;
40351: GO 40378
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
40353: LD_ADDR_EXP 70
40357: PUSH
40358: LD_EXP 70
40362: PPUSH
40363: LD_VAR 0 1
40367: PPUSH
40368: LD_VAR 0 2
40372: PPUSH
40373: CALL_OW 1
40377: ST_TO_ADDR
// end ;
40378: LD_VAR 0 3
40382: RET
// export function MC_InsertProduceList ( base , components ) ; begin
40383: LD_INT 0
40385: PPUSH
// if not mc_bases [ base ] then
40386: LD_EXP 49
40390: PUSH
40391: LD_VAR 0 1
40395: ARRAY
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 40438
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
40401: LD_ADDR_EXP 70
40405: PUSH
40406: LD_EXP 70
40410: PPUSH
40411: LD_VAR 0 1
40415: PPUSH
40416: LD_EXP 70
40420: PUSH
40421: LD_VAR 0 1
40425: ARRAY
40426: PUSH
40427: LD_VAR 0 2
40431: ADD
40432: PPUSH
40433: CALL_OW 1
40437: ST_TO_ADDR
// end ;
40438: LD_VAR 0 3
40442: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
40443: LD_INT 0
40445: PPUSH
// if not mc_bases [ base ] then
40446: LD_EXP 49
40450: PUSH
40451: LD_VAR 0 1
40455: ARRAY
40456: NOT
40457: IFFALSE 40461
// exit ;
40459: GO 40515
// mc_defender := Replace ( mc_defender , base , deflist ) ;
40461: LD_ADDR_EXP 71
40465: PUSH
40466: LD_EXP 71
40470: PPUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: LD_VAR 0 2
40480: PPUSH
40481: CALL_OW 1
40485: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
40486: LD_ADDR_EXP 60
40490: PUSH
40491: LD_EXP 60
40495: PPUSH
40496: LD_VAR 0 1
40500: PPUSH
40501: LD_VAR 0 2
40505: PUSH
40506: LD_INT 0
40508: PLUS
40509: PPUSH
40510: CALL_OW 1
40514: ST_TO_ADDR
// end ;
40515: LD_VAR 0 3
40519: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
40520: LD_INT 0
40522: PPUSH
// if not mc_bases [ base ] then
40523: LD_EXP 49
40527: PUSH
40528: LD_VAR 0 1
40532: ARRAY
40533: NOT
40534: IFFALSE 40538
// exit ;
40536: GO 40563
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
40538: LD_ADDR_EXP 60
40542: PUSH
40543: LD_EXP 60
40547: PPUSH
40548: LD_VAR 0 1
40552: PPUSH
40553: LD_VAR 0 2
40557: PPUSH
40558: CALL_OW 1
40562: ST_TO_ADDR
// end ;
40563: LD_VAR 0 3
40567: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
40568: LD_INT 0
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
// if not mc_bases [ base ] then
40574: LD_EXP 49
40578: PUSH
40579: LD_VAR 0 1
40583: ARRAY
40584: NOT
40585: IFFALSE 40589
// exit ;
40587: GO 40654
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
40589: LD_ADDR_EXP 69
40593: PUSH
40594: LD_EXP 69
40598: PPUSH
40599: LD_VAR 0 1
40603: PUSH
40604: LD_EXP 69
40608: PUSH
40609: LD_VAR 0 1
40613: ARRAY
40614: PUSH
40615: LD_INT 1
40617: PLUS
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PPUSH
40623: LD_VAR 0 1
40627: PUSH
40628: LD_VAR 0 2
40632: PUSH
40633: LD_VAR 0 3
40637: PUSH
40638: LD_VAR 0 4
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: PPUSH
40649: CALL 53681 0 3
40653: ST_TO_ADDR
// end ;
40654: LD_VAR 0 5
40658: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
40659: LD_INT 0
40661: PPUSH
// if not mc_bases [ base ] then
40662: LD_EXP 49
40666: PUSH
40667: LD_VAR 0 1
40671: ARRAY
40672: NOT
40673: IFFALSE 40677
// exit ;
40675: GO 40702
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
40677: LD_ADDR_EXP 86
40681: PUSH
40682: LD_EXP 86
40686: PPUSH
40687: LD_VAR 0 1
40691: PPUSH
40692: LD_VAR 0 2
40696: PPUSH
40697: CALL_OW 1
40701: ST_TO_ADDR
// end ;
40702: LD_VAR 0 3
40706: RET
// export function MC_GetMinesField ( base ) ; begin
40707: LD_INT 0
40709: PPUSH
// result := mc_mines [ base ] ;
40710: LD_ADDR_VAR 0 2
40714: PUSH
40715: LD_EXP 62
40719: PUSH
40720: LD_VAR 0 1
40724: ARRAY
40725: ST_TO_ADDR
// end ;
40726: LD_VAR 0 2
40730: RET
// export function MC_GetProduceList ( base ) ; begin
40731: LD_INT 0
40733: PPUSH
// result := mc_produce [ base ] ;
40734: LD_ADDR_VAR 0 2
40738: PUSH
40739: LD_EXP 70
40743: PUSH
40744: LD_VAR 0 1
40748: ARRAY
40749: ST_TO_ADDR
// end ;
40750: LD_VAR 0 2
40754: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
40755: LD_INT 0
40757: PPUSH
40758: PPUSH
// if not mc_bases then
40759: LD_EXP 49
40763: NOT
40764: IFFALSE 40768
// exit ;
40766: GO 40833
// if mc_bases [ base ] then
40768: LD_EXP 49
40772: PUSH
40773: LD_VAR 0 1
40777: ARRAY
40778: IFFALSE 40833
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40780: LD_ADDR_VAR 0 3
40784: PUSH
40785: LD_EXP 49
40789: PUSH
40790: LD_VAR 0 1
40794: ARRAY
40795: PPUSH
40796: LD_INT 30
40798: PUSH
40799: LD_VAR 0 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PPUSH
40808: CALL_OW 72
40812: ST_TO_ADDR
// if result then
40813: LD_VAR 0 3
40817: IFFALSE 40833
// result := result [ 1 ] ;
40819: LD_ADDR_VAR 0 3
40823: PUSH
40824: LD_VAR 0 3
40828: PUSH
40829: LD_INT 1
40831: ARRAY
40832: ST_TO_ADDR
// end ; end ;
40833: LD_VAR 0 3
40837: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
40838: LD_INT 0
40840: PPUSH
40841: PPUSH
// if not mc_bases then
40842: LD_EXP 49
40846: NOT
40847: IFFALSE 40851
// exit ;
40849: GO 40896
// if mc_bases [ base ] then
40851: LD_EXP 49
40855: PUSH
40856: LD_VAR 0 1
40860: ARRAY
40861: IFFALSE 40896
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40863: LD_ADDR_VAR 0 3
40867: PUSH
40868: LD_EXP 49
40872: PUSH
40873: LD_VAR 0 1
40877: ARRAY
40878: PPUSH
40879: LD_INT 30
40881: PUSH
40882: LD_VAR 0 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PPUSH
40891: CALL_OW 72
40895: ST_TO_ADDR
// end ;
40896: LD_VAR 0 3
40900: RET
// export function MC_SetTame ( base , area ) ; begin
40901: LD_INT 0
40903: PPUSH
// if not mc_bases or not base then
40904: LD_EXP 49
40908: NOT
40909: PUSH
40910: LD_VAR 0 1
40914: NOT
40915: OR
40916: IFFALSE 40920
// exit ;
40918: GO 40945
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
40920: LD_ADDR_EXP 77
40924: PUSH
40925: LD_EXP 77
40929: PPUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: LD_VAR 0 2
40939: PPUSH
40940: CALL_OW 1
40944: ST_TO_ADDR
// end ;
40945: LD_VAR 0 3
40949: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
40950: LD_INT 0
40952: PPUSH
40953: PPUSH
// if not mc_bases or not base then
40954: LD_EXP 49
40958: NOT
40959: PUSH
40960: LD_VAR 0 1
40964: NOT
40965: OR
40966: IFFALSE 40970
// exit ;
40968: GO 41072
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40970: LD_ADDR_VAR 0 4
40974: PUSH
40975: LD_EXP 49
40979: PUSH
40980: LD_VAR 0 1
40984: ARRAY
40985: PPUSH
40986: LD_INT 30
40988: PUSH
40989: LD_VAR 0 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PPUSH
40998: CALL_OW 72
41002: ST_TO_ADDR
// if not tmp then
41003: LD_VAR 0 4
41007: NOT
41008: IFFALSE 41012
// exit ;
41010: GO 41072
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
41012: LD_ADDR_EXP 81
41016: PUSH
41017: LD_EXP 81
41021: PPUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: LD_EXP 81
41031: PUSH
41032: LD_VAR 0 1
41036: ARRAY
41037: PPUSH
41038: LD_EXP 81
41042: PUSH
41043: LD_VAR 0 1
41047: ARRAY
41048: PUSH
41049: LD_INT 1
41051: PLUS
41052: PPUSH
41053: LD_VAR 0 4
41057: PUSH
41058: LD_INT 1
41060: ARRAY
41061: PPUSH
41062: CALL_OW 2
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
// end ;
41072: LD_VAR 0 3
41076: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
41077: LD_INT 0
41079: PPUSH
41080: PPUSH
// if not mc_bases or not base or not kinds then
41081: LD_EXP 49
41085: NOT
41086: PUSH
41087: LD_VAR 0 1
41091: NOT
41092: OR
41093: PUSH
41094: LD_VAR 0 2
41098: NOT
41099: OR
41100: IFFALSE 41104
// exit ;
41102: GO 41165
// for i in kinds do
41104: LD_ADDR_VAR 0 4
41108: PUSH
41109: LD_VAR 0 2
41113: PUSH
41114: FOR_IN
41115: IFFALSE 41163
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41117: LD_ADDR_EXP 83
41121: PUSH
41122: LD_EXP 83
41126: PPUSH
41127: LD_VAR 0 1
41131: PUSH
41132: LD_EXP 83
41136: PUSH
41137: LD_VAR 0 1
41141: ARRAY
41142: PUSH
41143: LD_INT 1
41145: PLUS
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PPUSH
41151: LD_VAR 0 4
41155: PPUSH
41156: CALL 53681 0 3
41160: ST_TO_ADDR
41161: GO 41114
41163: POP
41164: POP
// end ;
41165: LD_VAR 0 3
41169: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41170: LD_INT 0
41172: PPUSH
// if not mc_bases or not base or not areas then
41173: LD_EXP 49
41177: NOT
41178: PUSH
41179: LD_VAR 0 1
41183: NOT
41184: OR
41185: PUSH
41186: LD_VAR 0 2
41190: NOT
41191: OR
41192: IFFALSE 41196
// exit ;
41194: GO 41221
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41196: LD_ADDR_EXP 67
41200: PUSH
41201: LD_EXP 67
41205: PPUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: LD_VAR 0 2
41215: PPUSH
41216: CALL_OW 1
41220: ST_TO_ADDR
// end ;
41221: LD_VAR 0 3
41225: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41226: LD_INT 0
41228: PPUSH
// if not mc_bases or not base or not teleports_exit then
41229: LD_EXP 49
41233: NOT
41234: PUSH
41235: LD_VAR 0 1
41239: NOT
41240: OR
41241: PUSH
41242: LD_VAR 0 2
41246: NOT
41247: OR
41248: IFFALSE 41252
// exit ;
41250: GO 41277
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41252: LD_ADDR_EXP 84
41256: PUSH
41257: LD_EXP 84
41261: PPUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: LD_VAR 0 2
41271: PPUSH
41272: CALL_OW 1
41276: ST_TO_ADDR
// end ;
41277: LD_VAR 0 3
41281: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41282: LD_INT 0
41284: PPUSH
41285: PPUSH
41286: PPUSH
// if not mc_bases or not base or not ext_list then
41287: LD_EXP 49
41291: NOT
41292: PUSH
41293: LD_VAR 0 1
41297: NOT
41298: OR
41299: PUSH
41300: LD_VAR 0 5
41304: NOT
41305: OR
41306: IFFALSE 41310
// exit ;
41308: GO 41483
// tmp := GetFacExtXYD ( x , y , d ) ;
41310: LD_ADDR_VAR 0 8
41314: PUSH
41315: LD_VAR 0 2
41319: PPUSH
41320: LD_VAR 0 3
41324: PPUSH
41325: LD_VAR 0 4
41329: PPUSH
41330: CALL 87059 0 3
41334: ST_TO_ADDR
// if not tmp then
41335: LD_VAR 0 8
41339: NOT
41340: IFFALSE 41344
// exit ;
41342: GO 41483
// for i in tmp do
41344: LD_ADDR_VAR 0 7
41348: PUSH
41349: LD_VAR 0 8
41353: PUSH
41354: FOR_IN
41355: IFFALSE 41481
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
41357: LD_ADDR_EXP 54
41361: PUSH
41362: LD_EXP 54
41366: PPUSH
41367: LD_VAR 0 1
41371: PPUSH
41372: LD_EXP 54
41376: PUSH
41377: LD_VAR 0 1
41381: ARRAY
41382: PPUSH
41383: LD_EXP 54
41387: PUSH
41388: LD_VAR 0 1
41392: ARRAY
41393: PUSH
41394: LD_INT 1
41396: PLUS
41397: PPUSH
41398: LD_VAR 0 5
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: PUSH
41407: LD_VAR 0 7
41411: PUSH
41412: LD_INT 1
41414: ARRAY
41415: PUSH
41416: LD_VAR 0 7
41420: PUSH
41421: LD_INT 2
41423: ARRAY
41424: PUSH
41425: LD_VAR 0 7
41429: PUSH
41430: LD_INT 3
41432: ARRAY
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: PPUSH
41440: CALL_OW 2
41444: PPUSH
41445: CALL_OW 1
41449: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
41450: LD_ADDR_VAR 0 5
41454: PUSH
41455: LD_VAR 0 5
41459: PPUSH
41460: LD_INT 1
41462: PPUSH
41463: CALL_OW 3
41467: ST_TO_ADDR
// if not ext_list then
41468: LD_VAR 0 5
41472: NOT
41473: IFFALSE 41479
// exit ;
41475: POP
41476: POP
41477: GO 41483
// end ;
41479: GO 41354
41481: POP
41482: POP
// end ;
41483: LD_VAR 0 6
41487: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
41488: LD_INT 0
41490: PPUSH
// if not mc_bases or not base or not weapon_list then
41491: LD_EXP 49
41495: NOT
41496: PUSH
41497: LD_VAR 0 1
41501: NOT
41502: OR
41503: PUSH
41504: LD_VAR 0 2
41508: NOT
41509: OR
41510: IFFALSE 41514
// exit ;
41512: GO 41539
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
41514: LD_ADDR_EXP 88
41518: PUSH
41519: LD_EXP 88
41523: PPUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: LD_VAR 0 2
41533: PPUSH
41534: CALL_OW 1
41538: ST_TO_ADDR
// end ;
41539: LD_VAR 0 3
41543: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
41544: LD_INT 0
41546: PPUSH
// if not mc_bases or not base or not tech_list then
41547: LD_EXP 49
41551: NOT
41552: PUSH
41553: LD_VAR 0 1
41557: NOT
41558: OR
41559: PUSH
41560: LD_VAR 0 2
41564: NOT
41565: OR
41566: IFFALSE 41570
// exit ;
41568: GO 41595
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
41570: LD_ADDR_EXP 76
41574: PUSH
41575: LD_EXP 76
41579: PPUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: LD_VAR 0 2
41589: PPUSH
41590: CALL_OW 1
41594: ST_TO_ADDR
// end ;
41595: LD_VAR 0 3
41599: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
41600: LD_INT 0
41602: PPUSH
// if not mc_bases or not parking_area or not base then
41603: LD_EXP 49
41607: NOT
41608: PUSH
41609: LD_VAR 0 2
41613: NOT
41614: OR
41615: PUSH
41616: LD_VAR 0 1
41620: NOT
41621: OR
41622: IFFALSE 41626
// exit ;
41624: GO 41651
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
41626: LD_ADDR_EXP 73
41630: PUSH
41631: LD_EXP 73
41635: PPUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: LD_VAR 0 2
41645: PPUSH
41646: CALL_OW 1
41650: ST_TO_ADDR
// end ;
41651: LD_VAR 0 3
41655: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
41656: LD_INT 0
41658: PPUSH
// if not mc_bases or not base or not scan_area then
41659: LD_EXP 49
41663: NOT
41664: PUSH
41665: LD_VAR 0 1
41669: NOT
41670: OR
41671: PUSH
41672: LD_VAR 0 2
41676: NOT
41677: OR
41678: IFFALSE 41682
// exit ;
41680: GO 41707
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
41682: LD_ADDR_EXP 74
41686: PUSH
41687: LD_EXP 74
41691: PPUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: LD_VAR 0 2
41701: PPUSH
41702: CALL_OW 1
41706: ST_TO_ADDR
// end ;
41707: LD_VAR 0 3
41711: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
41712: LD_INT 0
41714: PPUSH
41715: PPUSH
// if not mc_bases or not base then
41716: LD_EXP 49
41720: NOT
41721: PUSH
41722: LD_VAR 0 1
41726: NOT
41727: OR
41728: IFFALSE 41732
// exit ;
41730: GO 41796
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: LD_INT 3
41745: PUSH
41746: LD_INT 4
41748: PUSH
41749: LD_INT 11
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
41759: LD_ADDR_EXP 76
41763: PUSH
41764: LD_EXP 76
41768: PPUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: LD_EXP 76
41778: PUSH
41779: LD_VAR 0 1
41783: ARRAY
41784: PUSH
41785: LD_VAR 0 3
41789: DIFF
41790: PPUSH
41791: CALL_OW 1
41795: ST_TO_ADDR
// end ;
41796: LD_VAR 0 2
41800: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
41801: LD_INT 0
41803: PPUSH
// result := mc_vehicles [ base ] ;
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_EXP 68
41813: PUSH
41814: LD_VAR 0 1
41818: ARRAY
41819: ST_TO_ADDR
// if onlyCombat then
41820: LD_VAR 0 2
41824: IFFALSE 41989
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
41826: LD_ADDR_VAR 0 3
41830: PUSH
41831: LD_VAR 0 3
41835: PUSH
41836: LD_VAR 0 3
41840: PPUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 34
41846: PUSH
41847: LD_INT 12
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 34
41856: PUSH
41857: LD_INT 51
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 34
41866: PUSH
41867: LD_EXP 93
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 34
41878: PUSH
41879: LD_INT 32
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 34
41888: PUSH
41889: LD_INT 13
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 34
41898: PUSH
41899: LD_INT 52
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 34
41908: PUSH
41909: LD_INT 14
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 34
41918: PUSH
41919: LD_INT 53
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 34
41928: PUSH
41929: LD_EXP 92
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 34
41940: PUSH
41941: LD_INT 31
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 34
41950: PUSH
41951: LD_INT 48
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 34
41960: PUSH
41961: LD_INT 8
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: PPUSH
41983: CALL_OW 72
41987: DIFF
41988: ST_TO_ADDR
// end ; end_of_file
41989: LD_VAR 0 3
41993: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
41994: LD_INT 0
41996: PPUSH
41997: PPUSH
41998: PPUSH
// if not mc_bases or not skirmish then
41999: LD_EXP 49
42003: NOT
42004: PUSH
42005: LD_EXP 47
42009: NOT
42010: OR
42011: IFFALSE 42015
// exit ;
42013: GO 42180
// for i = 1 to mc_bases do
42015: LD_ADDR_VAR 0 4
42019: PUSH
42020: DOUBLE
42021: LD_INT 1
42023: DEC
42024: ST_TO_ADDR
42025: LD_EXP 49
42029: PUSH
42030: FOR_TO
42031: IFFALSE 42178
// begin if sci in mc_bases [ i ] then
42033: LD_VAR 0 2
42037: PUSH
42038: LD_EXP 49
42042: PUSH
42043: LD_VAR 0 4
42047: ARRAY
42048: IN
42049: IFFALSE 42176
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
42051: LD_ADDR_EXP 78
42055: PUSH
42056: LD_EXP 78
42060: PPUSH
42061: LD_VAR 0 4
42065: PUSH
42066: LD_EXP 78
42070: PUSH
42071: LD_VAR 0 4
42075: ARRAY
42076: PUSH
42077: LD_INT 1
42079: PLUS
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PPUSH
42085: LD_VAR 0 1
42089: PPUSH
42090: CALL 53681 0 3
42094: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
42095: LD_ADDR_VAR 0 5
42099: PUSH
42100: LD_EXP 49
42104: PUSH
42105: LD_VAR 0 4
42109: ARRAY
42110: PPUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 30
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 30
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: PPUSH
42139: CALL_OW 72
42143: PPUSH
42144: LD_VAR 0 1
42148: PPUSH
42149: CALL_OW 74
42153: ST_TO_ADDR
// if tmp then
42154: LD_VAR 0 5
42158: IFFALSE 42174
// ComStandNearbyBuilding ( ape , tmp ) ;
42160: LD_VAR 0 1
42164: PPUSH
42165: LD_VAR 0 5
42169: PPUSH
42170: CALL 48033 0 2
// break ;
42174: GO 42178
// end ; end ;
42176: GO 42030
42178: POP
42179: POP
// end ;
42180: LD_VAR 0 3
42184: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42185: LD_INT 0
42187: PPUSH
42188: PPUSH
42189: PPUSH
// if not mc_bases or not skirmish then
42190: LD_EXP 49
42194: NOT
42195: PUSH
42196: LD_EXP 47
42200: NOT
42201: OR
42202: IFFALSE 42206
// exit ;
42204: GO 42295
// for i = 1 to mc_bases do
42206: LD_ADDR_VAR 0 4
42210: PUSH
42211: DOUBLE
42212: LD_INT 1
42214: DEC
42215: ST_TO_ADDR
42216: LD_EXP 49
42220: PUSH
42221: FOR_TO
42222: IFFALSE 42293
// begin if building in mc_busy_turret_list [ i ] then
42224: LD_VAR 0 1
42228: PUSH
42229: LD_EXP 59
42233: PUSH
42234: LD_VAR 0 4
42238: ARRAY
42239: IN
42240: IFFALSE 42291
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42242: LD_ADDR_VAR 0 5
42246: PUSH
42247: LD_EXP 59
42251: PUSH
42252: LD_VAR 0 4
42256: ARRAY
42257: PUSH
42258: LD_VAR 0 1
42262: DIFF
42263: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42264: LD_ADDR_EXP 59
42268: PUSH
42269: LD_EXP 59
42273: PPUSH
42274: LD_VAR 0 4
42278: PPUSH
42279: LD_VAR 0 5
42283: PPUSH
42284: CALL_OW 1
42288: ST_TO_ADDR
// break ;
42289: GO 42293
// end ; end ;
42291: GO 42221
42293: POP
42294: POP
// end ;
42295: LD_VAR 0 3
42299: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42300: LD_INT 0
42302: PPUSH
42303: PPUSH
42304: PPUSH
// if not mc_bases or not skirmish then
42305: LD_EXP 49
42309: NOT
42310: PUSH
42311: LD_EXP 47
42315: NOT
42316: OR
42317: IFFALSE 42321
// exit ;
42319: GO 42520
// for i = 1 to mc_bases do
42321: LD_ADDR_VAR 0 5
42325: PUSH
42326: DOUBLE
42327: LD_INT 1
42329: DEC
42330: ST_TO_ADDR
42331: LD_EXP 49
42335: PUSH
42336: FOR_TO
42337: IFFALSE 42518
// if building in mc_bases [ i ] then
42339: LD_VAR 0 1
42343: PUSH
42344: LD_EXP 49
42348: PUSH
42349: LD_VAR 0 5
42353: ARRAY
42354: IN
42355: IFFALSE 42516
// begin tmp := mc_bases [ i ] diff building ;
42357: LD_ADDR_VAR 0 6
42361: PUSH
42362: LD_EXP 49
42366: PUSH
42367: LD_VAR 0 5
42371: ARRAY
42372: PUSH
42373: LD_VAR 0 1
42377: DIFF
42378: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
42379: LD_ADDR_EXP 49
42383: PUSH
42384: LD_EXP 49
42388: PPUSH
42389: LD_VAR 0 5
42393: PPUSH
42394: LD_VAR 0 6
42398: PPUSH
42399: CALL_OW 1
42403: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
42404: LD_VAR 0 1
42408: PUSH
42409: LD_EXP 57
42413: PUSH
42414: LD_VAR 0 5
42418: ARRAY
42419: IN
42420: IFFALSE 42459
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
42422: LD_ADDR_EXP 57
42426: PUSH
42427: LD_EXP 57
42431: PPUSH
42432: LD_VAR 0 5
42436: PPUSH
42437: LD_EXP 57
42441: PUSH
42442: LD_VAR 0 5
42446: ARRAY
42447: PUSH
42448: LD_VAR 0 1
42452: DIFF
42453: PPUSH
42454: CALL_OW 1
42458: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
42459: LD_VAR 0 1
42463: PUSH
42464: LD_EXP 58
42468: PUSH
42469: LD_VAR 0 5
42473: ARRAY
42474: IN
42475: IFFALSE 42514
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
42477: LD_ADDR_EXP 58
42481: PUSH
42482: LD_EXP 58
42486: PPUSH
42487: LD_VAR 0 5
42491: PPUSH
42492: LD_EXP 58
42496: PUSH
42497: LD_VAR 0 5
42501: ARRAY
42502: PUSH
42503: LD_VAR 0 1
42507: DIFF
42508: PPUSH
42509: CALL_OW 1
42513: ST_TO_ADDR
// break ;
42514: GO 42518
// end ;
42516: GO 42336
42518: POP
42519: POP
// end ;
42520: LD_VAR 0 4
42524: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
42525: LD_INT 0
42527: PPUSH
42528: PPUSH
42529: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
42530: LD_EXP 49
42534: NOT
42535: PUSH
42536: LD_EXP 47
42540: NOT
42541: OR
42542: PUSH
42543: LD_VAR 0 3
42547: PUSH
42548: LD_EXP 75
42552: IN
42553: NOT
42554: OR
42555: IFFALSE 42559
// exit ;
42557: GO 42682
// for i = 1 to mc_vehicles do
42559: LD_ADDR_VAR 0 6
42563: PUSH
42564: DOUBLE
42565: LD_INT 1
42567: DEC
42568: ST_TO_ADDR
42569: LD_EXP 68
42573: PUSH
42574: FOR_TO
42575: IFFALSE 42680
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
42577: LD_VAR 0 2
42581: PUSH
42582: LD_EXP 68
42586: PUSH
42587: LD_VAR 0 6
42591: ARRAY
42592: IN
42593: PUSH
42594: LD_VAR 0 1
42598: PUSH
42599: LD_EXP 68
42603: PUSH
42604: LD_VAR 0 6
42608: ARRAY
42609: IN
42610: OR
42611: IFFALSE 42678
// begin tmp := mc_vehicles [ i ] diff old ;
42613: LD_ADDR_VAR 0 7
42617: PUSH
42618: LD_EXP 68
42622: PUSH
42623: LD_VAR 0 6
42627: ARRAY
42628: PUSH
42629: LD_VAR 0 2
42633: DIFF
42634: ST_TO_ADDR
// tmp := tmp diff new ;
42635: LD_ADDR_VAR 0 7
42639: PUSH
42640: LD_VAR 0 7
42644: PUSH
42645: LD_VAR 0 1
42649: DIFF
42650: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
42651: LD_ADDR_EXP 68
42655: PUSH
42656: LD_EXP 68
42660: PPUSH
42661: LD_VAR 0 6
42665: PPUSH
42666: LD_VAR 0 7
42670: PPUSH
42671: CALL_OW 1
42675: ST_TO_ADDR
// break ;
42676: GO 42680
// end ;
42678: GO 42574
42680: POP
42681: POP
// end ;
42682: LD_VAR 0 5
42686: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
42687: LD_INT 0
42689: PPUSH
42690: PPUSH
42691: PPUSH
42692: PPUSH
// if not mc_bases or not skirmish then
42693: LD_EXP 49
42697: NOT
42698: PUSH
42699: LD_EXP 47
42703: NOT
42704: OR
42705: IFFALSE 42709
// exit ;
42707: GO 43086
// side := GetSide ( vehicle ) ;
42709: LD_ADDR_VAR 0 5
42713: PUSH
42714: LD_VAR 0 1
42718: PPUSH
42719: CALL_OW 255
42723: ST_TO_ADDR
// for i = 1 to mc_bases do
42724: LD_ADDR_VAR 0 4
42728: PUSH
42729: DOUBLE
42730: LD_INT 1
42732: DEC
42733: ST_TO_ADDR
42734: LD_EXP 49
42738: PUSH
42739: FOR_TO
42740: IFFALSE 43084
// begin if factory in mc_bases [ i ] then
42742: LD_VAR 0 2
42746: PUSH
42747: LD_EXP 49
42751: PUSH
42752: LD_VAR 0 4
42756: ARRAY
42757: IN
42758: IFFALSE 43082
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
42760: LD_EXP 71
42764: PUSH
42765: LD_VAR 0 4
42769: ARRAY
42770: PUSH
42771: LD_EXP 60
42775: PUSH
42776: LD_VAR 0 4
42780: ARRAY
42781: LESS
42782: PUSH
42783: LD_VAR 0 1
42787: PPUSH
42788: CALL_OW 264
42792: PUSH
42793: LD_INT 31
42795: PUSH
42796: LD_INT 32
42798: PUSH
42799: LD_INT 51
42801: PUSH
42802: LD_EXP 93
42806: PUSH
42807: LD_INT 12
42809: PUSH
42810: LD_INT 30
42812: PUSH
42813: LD_EXP 92
42817: PUSH
42818: LD_INT 11
42820: PUSH
42821: LD_INT 53
42823: PUSH
42824: LD_INT 14
42826: PUSH
42827: LD_EXP 96
42831: PUSH
42832: LD_INT 29
42834: PUSH
42835: LD_EXP 94
42839: PUSH
42840: LD_INT 13
42842: PUSH
42843: LD_INT 52
42845: PUSH
42846: LD_INT 48
42848: PUSH
42849: LD_INT 8
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: IN
42871: NOT
42872: AND
42873: IFFALSE 42921
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
42875: LD_ADDR_EXP 71
42879: PUSH
42880: LD_EXP 71
42884: PPUSH
42885: LD_VAR 0 4
42889: PUSH
42890: LD_EXP 71
42894: PUSH
42895: LD_VAR 0 4
42899: ARRAY
42900: PUSH
42901: LD_INT 1
42903: PLUS
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PPUSH
42909: LD_VAR 0 1
42913: PPUSH
42914: CALL 53681 0 3
42918: ST_TO_ADDR
42919: GO 42965
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
42921: LD_ADDR_EXP 68
42925: PUSH
42926: LD_EXP 68
42930: PPUSH
42931: LD_VAR 0 4
42935: PUSH
42936: LD_EXP 68
42940: PUSH
42941: LD_VAR 0 4
42945: ARRAY
42946: PUSH
42947: LD_INT 1
42949: PLUS
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PPUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: CALL 53681 0 3
42964: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
42965: LD_VAR 0 1
42969: PPUSH
42970: CALL_OW 263
42974: PUSH
42975: LD_INT 2
42977: EQUAL
42978: IFFALSE 42998
// begin repeat wait ( 0 0$1 ) ;
42980: LD_INT 35
42982: PPUSH
42983: CALL_OW 67
// until IsControledBy ( vehicle ) ;
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 312
42996: IFFALSE 42980
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
42998: LD_VAR 0 1
43002: PPUSH
43003: LD_EXP 73
43007: PUSH
43008: LD_VAR 0 4
43012: ARRAY
43013: PPUSH
43014: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
43018: LD_VAR 0 1
43022: PPUSH
43023: CALL_OW 263
43027: PUSH
43028: LD_INT 1
43030: NONEQUAL
43031: IFFALSE 43035
// break ;
43033: GO 43084
// repeat wait ( 0 0$1 ) ;
43035: LD_INT 35
43037: PPUSH
43038: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
43042: LD_VAR 0 1
43046: PPUSH
43047: LD_EXP 73
43051: PUSH
43052: LD_VAR 0 4
43056: ARRAY
43057: PPUSH
43058: CALL_OW 308
43062: IFFALSE 43035
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
43064: LD_VAR 0 1
43068: PPUSH
43069: CALL_OW 311
43073: PPUSH
43074: CALL_OW 121
// exit ;
43078: POP
43079: POP
43080: GO 43086
// end ; end ;
43082: GO 42739
43084: POP
43085: POP
// end ;
43086: LD_VAR 0 3
43090: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
43091: LD_INT 0
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
// if not mc_bases or not skirmish then
43097: LD_EXP 49
43101: NOT
43102: PUSH
43103: LD_EXP 47
43107: NOT
43108: OR
43109: IFFALSE 43113
// exit ;
43111: GO 43466
// repeat wait ( 0 0$1 ) ;
43113: LD_INT 35
43115: PPUSH
43116: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
43120: LD_VAR 0 2
43124: PPUSH
43125: LD_VAR 0 3
43129: PPUSH
43130: CALL_OW 284
43134: IFFALSE 43113
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43136: LD_VAR 0 2
43140: PPUSH
43141: LD_VAR 0 3
43145: PPUSH
43146: CALL_OW 283
43150: PUSH
43151: LD_INT 4
43153: EQUAL
43154: IFFALSE 43158
// exit ;
43156: GO 43466
// for i = 1 to mc_bases do
43158: LD_ADDR_VAR 0 7
43162: PUSH
43163: DOUBLE
43164: LD_INT 1
43166: DEC
43167: ST_TO_ADDR
43168: LD_EXP 49
43172: PUSH
43173: FOR_TO
43174: IFFALSE 43464
// begin if mc_crates_area [ i ] then
43176: LD_EXP 67
43180: PUSH
43181: LD_VAR 0 7
43185: ARRAY
43186: IFFALSE 43297
// for j in mc_crates_area [ i ] do
43188: LD_ADDR_VAR 0 8
43192: PUSH
43193: LD_EXP 67
43197: PUSH
43198: LD_VAR 0 7
43202: ARRAY
43203: PUSH
43204: FOR_IN
43205: IFFALSE 43295
// if InArea ( x , y , j ) then
43207: LD_VAR 0 2
43211: PPUSH
43212: LD_VAR 0 3
43216: PPUSH
43217: LD_VAR 0 8
43221: PPUSH
43222: CALL_OW 309
43226: IFFALSE 43293
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43228: LD_ADDR_EXP 65
43232: PUSH
43233: LD_EXP 65
43237: PPUSH
43238: LD_VAR 0 7
43242: PUSH
43243: LD_EXP 65
43247: PUSH
43248: LD_VAR 0 7
43252: ARRAY
43253: PUSH
43254: LD_INT 1
43256: PLUS
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PPUSH
43262: LD_VAR 0 4
43266: PUSH
43267: LD_VAR 0 2
43271: PUSH
43272: LD_VAR 0 3
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: PPUSH
43282: CALL 53681 0 3
43286: ST_TO_ADDR
// exit ;
43287: POP
43288: POP
43289: POP
43290: POP
43291: GO 43466
// end ;
43293: GO 43204
43295: POP
43296: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43297: LD_ADDR_VAR 0 9
43301: PUSH
43302: LD_EXP 49
43306: PUSH
43307: LD_VAR 0 7
43311: ARRAY
43312: PPUSH
43313: LD_INT 2
43315: PUSH
43316: LD_INT 30
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 30
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: PPUSH
43341: CALL_OW 72
43345: ST_TO_ADDR
// if not depot then
43346: LD_VAR 0 9
43350: NOT
43351: IFFALSE 43355
// continue ;
43353: GO 43173
// for j in depot do
43355: LD_ADDR_VAR 0 8
43359: PUSH
43360: LD_VAR 0 9
43364: PUSH
43365: FOR_IN
43366: IFFALSE 43460
// if GetDistUnitXY ( j , x , y ) < 30 then
43368: LD_VAR 0 8
43372: PPUSH
43373: LD_VAR 0 2
43377: PPUSH
43378: LD_VAR 0 3
43382: PPUSH
43383: CALL_OW 297
43387: PUSH
43388: LD_INT 30
43390: LESS
43391: IFFALSE 43458
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43393: LD_ADDR_EXP 65
43397: PUSH
43398: LD_EXP 65
43402: PPUSH
43403: LD_VAR 0 7
43407: PUSH
43408: LD_EXP 65
43412: PUSH
43413: LD_VAR 0 7
43417: ARRAY
43418: PUSH
43419: LD_INT 1
43421: PLUS
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PPUSH
43427: LD_VAR 0 4
43431: PUSH
43432: LD_VAR 0 2
43436: PUSH
43437: LD_VAR 0 3
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: PPUSH
43447: CALL 53681 0 3
43451: ST_TO_ADDR
// exit ;
43452: POP
43453: POP
43454: POP
43455: POP
43456: GO 43466
// end ;
43458: GO 43365
43460: POP
43461: POP
// end ;
43462: GO 43173
43464: POP
43465: POP
// end ;
43466: LD_VAR 0 6
43470: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
43471: LD_INT 0
43473: PPUSH
43474: PPUSH
43475: PPUSH
43476: PPUSH
// if not mc_bases or not skirmish then
43477: LD_EXP 49
43481: NOT
43482: PUSH
43483: LD_EXP 47
43487: NOT
43488: OR
43489: IFFALSE 43493
// exit ;
43491: GO 43770
// side := GetSide ( lab ) ;
43493: LD_ADDR_VAR 0 4
43497: PUSH
43498: LD_VAR 0 2
43502: PPUSH
43503: CALL_OW 255
43507: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
43508: LD_VAR 0 4
43512: PUSH
43513: LD_EXP 75
43517: IN
43518: NOT
43519: PUSH
43520: LD_EXP 76
43524: NOT
43525: OR
43526: PUSH
43527: LD_EXP 49
43531: NOT
43532: OR
43533: IFFALSE 43537
// exit ;
43535: GO 43770
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
43537: LD_ADDR_EXP 76
43541: PUSH
43542: LD_EXP 76
43546: PPUSH
43547: LD_VAR 0 4
43551: PPUSH
43552: LD_EXP 76
43556: PUSH
43557: LD_VAR 0 4
43561: ARRAY
43562: PUSH
43563: LD_VAR 0 1
43567: DIFF
43568: PPUSH
43569: CALL_OW 1
43573: ST_TO_ADDR
// for i = 1 to mc_bases do
43574: LD_ADDR_VAR 0 5
43578: PUSH
43579: DOUBLE
43580: LD_INT 1
43582: DEC
43583: ST_TO_ADDR
43584: LD_EXP 49
43588: PUSH
43589: FOR_TO
43590: IFFALSE 43768
// begin if lab in mc_bases [ i ] then
43592: LD_VAR 0 2
43596: PUSH
43597: LD_EXP 49
43601: PUSH
43602: LD_VAR 0 5
43606: ARRAY
43607: IN
43608: IFFALSE 43766
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
43610: LD_VAR 0 1
43614: PUSH
43615: LD_INT 11
43617: PUSH
43618: LD_INT 4
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: IN
43633: PUSH
43634: LD_EXP 79
43638: PUSH
43639: LD_VAR 0 5
43643: ARRAY
43644: AND
43645: IFFALSE 43766
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
43647: LD_ADDR_VAR 0 6
43651: PUSH
43652: LD_EXP 79
43656: PUSH
43657: LD_VAR 0 5
43661: ARRAY
43662: PUSH
43663: LD_INT 1
43665: ARRAY
43666: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43667: LD_ADDR_EXP 79
43671: PUSH
43672: LD_EXP 79
43676: PPUSH
43677: LD_VAR 0 5
43681: PPUSH
43682: EMPTY
43683: PPUSH
43684: CALL_OW 1
43688: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
43689: LD_VAR 0 6
43693: PPUSH
43694: LD_INT 0
43696: PPUSH
43697: CALL_OW 109
// ComExitBuilding ( tmp ) ;
43701: LD_VAR 0 6
43705: PPUSH
43706: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
43710: LD_ADDR_EXP 78
43714: PUSH
43715: LD_EXP 78
43719: PPUSH
43720: LD_VAR 0 5
43724: PPUSH
43725: LD_EXP 78
43729: PUSH
43730: LD_VAR 0 5
43734: ARRAY
43735: PPUSH
43736: LD_INT 1
43738: PPUSH
43739: LD_VAR 0 6
43743: PPUSH
43744: CALL_OW 2
43748: PPUSH
43749: CALL_OW 1
43753: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
43754: LD_VAR 0 5
43758: PPUSH
43759: LD_INT 112
43761: PPUSH
43762: CALL 20878 0 2
// end ; end ; end ;
43766: GO 43589
43768: POP
43769: POP
// end ;
43770: LD_VAR 0 3
43774: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
43775: LD_INT 0
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
// if not mc_bases or not skirmish then
43785: LD_EXP 49
43789: NOT
43790: PUSH
43791: LD_EXP 47
43795: NOT
43796: OR
43797: IFFALSE 43801
// exit ;
43799: GO 45038
// for i = 1 to mc_bases do
43801: LD_ADDR_VAR 0 3
43805: PUSH
43806: DOUBLE
43807: LD_INT 1
43809: DEC
43810: ST_TO_ADDR
43811: LD_EXP 49
43815: PUSH
43816: FOR_TO
43817: IFFALSE 45036
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
43819: LD_VAR 0 1
43823: PUSH
43824: LD_EXP 49
43828: PUSH
43829: LD_VAR 0 3
43833: ARRAY
43834: IN
43835: PUSH
43836: LD_VAR 0 1
43840: PUSH
43841: LD_EXP 56
43845: PUSH
43846: LD_VAR 0 3
43850: ARRAY
43851: IN
43852: OR
43853: PUSH
43854: LD_VAR 0 1
43858: PUSH
43859: LD_EXP 71
43863: PUSH
43864: LD_VAR 0 3
43868: ARRAY
43869: IN
43870: OR
43871: PUSH
43872: LD_VAR 0 1
43876: PUSH
43877: LD_EXP 68
43881: PUSH
43882: LD_VAR 0 3
43886: ARRAY
43887: IN
43888: OR
43889: PUSH
43890: LD_VAR 0 1
43894: PUSH
43895: LD_EXP 78
43899: PUSH
43900: LD_VAR 0 3
43904: ARRAY
43905: IN
43906: OR
43907: PUSH
43908: LD_VAR 0 1
43912: PUSH
43913: LD_EXP 79
43917: PUSH
43918: LD_VAR 0 3
43922: ARRAY
43923: IN
43924: OR
43925: IFFALSE 45034
// begin if un in mc_ape [ i ] then
43927: LD_VAR 0 1
43931: PUSH
43932: LD_EXP 78
43936: PUSH
43937: LD_VAR 0 3
43941: ARRAY
43942: IN
43943: IFFALSE 43982
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
43945: LD_ADDR_EXP 78
43949: PUSH
43950: LD_EXP 78
43954: PPUSH
43955: LD_VAR 0 3
43959: PPUSH
43960: LD_EXP 78
43964: PUSH
43965: LD_VAR 0 3
43969: ARRAY
43970: PUSH
43971: LD_VAR 0 1
43975: DIFF
43976: PPUSH
43977: CALL_OW 1
43981: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
43982: LD_VAR 0 1
43986: PUSH
43987: LD_EXP 79
43991: PUSH
43992: LD_VAR 0 3
43996: ARRAY
43997: IN
43998: IFFALSE 44022
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44000: LD_ADDR_EXP 79
44004: PUSH
44005: LD_EXP 79
44009: PPUSH
44010: LD_VAR 0 3
44014: PPUSH
44015: EMPTY
44016: PPUSH
44017: CALL_OW 1
44021: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
44022: LD_VAR 0 1
44026: PPUSH
44027: CALL_OW 247
44031: PUSH
44032: LD_INT 2
44034: EQUAL
44035: PUSH
44036: LD_VAR 0 1
44040: PPUSH
44041: CALL_OW 110
44045: PUSH
44046: LD_INT 20
44048: EQUAL
44049: PUSH
44050: LD_VAR 0 1
44054: PUSH
44055: LD_EXP 71
44059: PUSH
44060: LD_VAR 0 3
44064: ARRAY
44065: IN
44066: OR
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: CALL_OW 264
44077: PUSH
44078: LD_INT 12
44080: PUSH
44081: LD_INT 51
44083: PUSH
44084: LD_EXP 93
44088: PUSH
44089: LD_INT 32
44091: PUSH
44092: LD_INT 13
44094: PUSH
44095: LD_INT 52
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: IN
44106: OR
44107: AND
44108: IFFALSE 44286
// begin if un in mc_defender [ i ] then
44110: LD_VAR 0 1
44114: PUSH
44115: LD_EXP 71
44119: PUSH
44120: LD_VAR 0 3
44124: ARRAY
44125: IN
44126: IFFALSE 44165
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44128: LD_ADDR_EXP 71
44132: PUSH
44133: LD_EXP 71
44137: PPUSH
44138: LD_VAR 0 3
44142: PPUSH
44143: LD_EXP 71
44147: PUSH
44148: LD_VAR 0 3
44152: ARRAY
44153: PUSH
44154: LD_VAR 0 1
44158: DIFF
44159: PPUSH
44160: CALL_OW 1
44164: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44165: LD_ADDR_VAR 0 8
44169: PUSH
44170: LD_VAR 0 3
44174: PPUSH
44175: LD_INT 3
44177: PPUSH
44178: CALL 40838 0 2
44182: ST_TO_ADDR
// if fac then
44183: LD_VAR 0 8
44187: IFFALSE 44286
// begin for j in fac do
44189: LD_ADDR_VAR 0 4
44193: PUSH
44194: LD_VAR 0 8
44198: PUSH
44199: FOR_IN
44200: IFFALSE 44284
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44202: LD_ADDR_VAR 0 9
44206: PUSH
44207: LD_VAR 0 8
44211: PPUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 265
44221: PPUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: CALL_OW 262
44231: PPUSH
44232: LD_VAR 0 1
44236: PPUSH
44237: CALL_OW 263
44241: PPUSH
44242: LD_VAR 0 1
44246: PPUSH
44247: CALL_OW 264
44251: PPUSH
44252: CALL 51213 0 5
44256: ST_TO_ADDR
// if components then
44257: LD_VAR 0 9
44261: IFFALSE 44282
// begin MC_InsertProduceList ( i , [ components ] ) ;
44263: LD_VAR 0 3
44267: PPUSH
44268: LD_VAR 0 9
44272: PUSH
44273: EMPTY
44274: LIST
44275: PPUSH
44276: CALL 40383 0 2
// break ;
44280: GO 44284
// end ; end ;
44282: GO 44199
44284: POP
44285: POP
// end ; end ; if GetType ( un ) = unit_building then
44286: LD_VAR 0 1
44290: PPUSH
44291: CALL_OW 247
44295: PUSH
44296: LD_INT 3
44298: EQUAL
44299: IFFALSE 44702
// begin btype := GetBType ( un ) ;
44301: LD_ADDR_VAR 0 5
44305: PUSH
44306: LD_VAR 0 1
44310: PPUSH
44311: CALL_OW 266
44315: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
44316: LD_VAR 0 5
44320: PUSH
44321: LD_INT 29
44323: PUSH
44324: LD_INT 30
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: IN
44331: IFFALSE 44404
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
44333: LD_VAR 0 1
44337: PPUSH
44338: CALL_OW 250
44342: PPUSH
44343: LD_VAR 0 1
44347: PPUSH
44348: CALL_OW 251
44352: PPUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL_OW 255
44362: PPUSH
44363: CALL_OW 440
44367: NOT
44368: IFFALSE 44404
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
44370: LD_VAR 0 1
44374: PPUSH
44375: CALL_OW 250
44379: PPUSH
44380: LD_VAR 0 1
44384: PPUSH
44385: CALL_OW 251
44389: PPUSH
44390: LD_VAR 0 1
44394: PPUSH
44395: CALL_OW 255
44399: PPUSH
44400: CALL_OW 441
// end ; if btype = b_warehouse then
44404: LD_VAR 0 5
44408: PUSH
44409: LD_INT 1
44411: EQUAL
44412: IFFALSE 44430
// begin btype := b_depot ;
44414: LD_ADDR_VAR 0 5
44418: PUSH
44419: LD_INT 0
44421: ST_TO_ADDR
// pos := 1 ;
44422: LD_ADDR_VAR 0 6
44426: PUSH
44427: LD_INT 1
44429: ST_TO_ADDR
// end ; if btype = b_factory then
44430: LD_VAR 0 5
44434: PUSH
44435: LD_INT 3
44437: EQUAL
44438: IFFALSE 44456
// begin btype := b_workshop ;
44440: LD_ADDR_VAR 0 5
44444: PUSH
44445: LD_INT 2
44447: ST_TO_ADDR
// pos := 1 ;
44448: LD_ADDR_VAR 0 6
44452: PUSH
44453: LD_INT 1
44455: ST_TO_ADDR
// end ; if btype = b_barracks then
44456: LD_VAR 0 5
44460: PUSH
44461: LD_INT 5
44463: EQUAL
44464: IFFALSE 44474
// btype := b_armoury ;
44466: LD_ADDR_VAR 0 5
44470: PUSH
44471: LD_INT 4
44473: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
44474: LD_VAR 0 5
44478: PUSH
44479: LD_INT 7
44481: PUSH
44482: LD_INT 8
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: IN
44489: IFFALSE 44499
// btype := b_lab ;
44491: LD_ADDR_VAR 0 5
44495: PUSH
44496: LD_INT 6
44498: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
44499: LD_ADDR_EXP 54
44503: PUSH
44504: LD_EXP 54
44508: PPUSH
44509: LD_VAR 0 3
44513: PUSH
44514: LD_EXP 54
44518: PUSH
44519: LD_VAR 0 3
44523: ARRAY
44524: PUSH
44525: LD_INT 1
44527: PLUS
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PPUSH
44533: LD_VAR 0 5
44537: PUSH
44538: LD_VAR 0 1
44542: PPUSH
44543: CALL_OW 250
44547: PUSH
44548: LD_VAR 0 1
44552: PPUSH
44553: CALL_OW 251
44557: PUSH
44558: LD_VAR 0 1
44562: PPUSH
44563: CALL_OW 254
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: PPUSH
44574: CALL 53681 0 3
44578: ST_TO_ADDR
// if pos = 1 then
44579: LD_VAR 0 6
44583: PUSH
44584: LD_INT 1
44586: EQUAL
44587: IFFALSE 44702
// begin tmp := mc_build_list [ i ] ;
44589: LD_ADDR_VAR 0 7
44593: PUSH
44594: LD_EXP 54
44598: PUSH
44599: LD_VAR 0 3
44603: ARRAY
44604: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
44605: LD_VAR 0 7
44609: PPUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 30
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 30
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: PPUSH
44638: CALL_OW 72
44642: IFFALSE 44652
// pos := 2 ;
44644: LD_ADDR_VAR 0 6
44648: PUSH
44649: LD_INT 2
44651: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
44652: LD_ADDR_VAR 0 7
44656: PUSH
44657: LD_VAR 0 7
44661: PPUSH
44662: LD_VAR 0 6
44666: PPUSH
44667: LD_VAR 0 7
44671: PPUSH
44672: CALL 54007 0 3
44676: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
44677: LD_ADDR_EXP 54
44681: PUSH
44682: LD_EXP 54
44686: PPUSH
44687: LD_VAR 0 3
44691: PPUSH
44692: LD_VAR 0 7
44696: PPUSH
44697: CALL_OW 1
44701: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
44702: LD_VAR 0 1
44706: PUSH
44707: LD_EXP 49
44711: PUSH
44712: LD_VAR 0 3
44716: ARRAY
44717: IN
44718: IFFALSE 44757
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
44720: LD_ADDR_EXP 49
44724: PUSH
44725: LD_EXP 49
44729: PPUSH
44730: LD_VAR 0 3
44734: PPUSH
44735: LD_EXP 49
44739: PUSH
44740: LD_VAR 0 3
44744: ARRAY
44745: PUSH
44746: LD_VAR 0 1
44750: DIFF
44751: PPUSH
44752: CALL_OW 1
44756: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
44757: LD_VAR 0 1
44761: PUSH
44762: LD_EXP 56
44766: PUSH
44767: LD_VAR 0 3
44771: ARRAY
44772: IN
44773: IFFALSE 44812
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
44775: LD_ADDR_EXP 56
44779: PUSH
44780: LD_EXP 56
44784: PPUSH
44785: LD_VAR 0 3
44789: PPUSH
44790: LD_EXP 56
44794: PUSH
44795: LD_VAR 0 3
44799: ARRAY
44800: PUSH
44801: LD_VAR 0 1
44805: DIFF
44806: PPUSH
44807: CALL_OW 1
44811: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
44812: LD_VAR 0 1
44816: PUSH
44817: LD_EXP 68
44821: PUSH
44822: LD_VAR 0 3
44826: ARRAY
44827: IN
44828: IFFALSE 44867
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
44830: LD_ADDR_EXP 68
44834: PUSH
44835: LD_EXP 68
44839: PPUSH
44840: LD_VAR 0 3
44844: PPUSH
44845: LD_EXP 68
44849: PUSH
44850: LD_VAR 0 3
44854: ARRAY
44855: PUSH
44856: LD_VAR 0 1
44860: DIFF
44861: PPUSH
44862: CALL_OW 1
44866: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
44867: LD_VAR 0 1
44871: PUSH
44872: LD_EXP 71
44876: PUSH
44877: LD_VAR 0 3
44881: ARRAY
44882: IN
44883: IFFALSE 44922
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44885: LD_ADDR_EXP 71
44889: PUSH
44890: LD_EXP 71
44894: PPUSH
44895: LD_VAR 0 3
44899: PPUSH
44900: LD_EXP 71
44904: PUSH
44905: LD_VAR 0 3
44909: ARRAY
44910: PUSH
44911: LD_VAR 0 1
44915: DIFF
44916: PPUSH
44917: CALL_OW 1
44921: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
44922: LD_VAR 0 1
44926: PUSH
44927: LD_EXP 58
44931: PUSH
44932: LD_VAR 0 3
44936: ARRAY
44937: IN
44938: IFFALSE 44977
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
44940: LD_ADDR_EXP 58
44944: PUSH
44945: LD_EXP 58
44949: PPUSH
44950: LD_VAR 0 3
44954: PPUSH
44955: LD_EXP 58
44959: PUSH
44960: LD_VAR 0 3
44964: ARRAY
44965: PUSH
44966: LD_VAR 0 1
44970: DIFF
44971: PPUSH
44972: CALL_OW 1
44976: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
44977: LD_VAR 0 1
44981: PUSH
44982: LD_EXP 57
44986: PUSH
44987: LD_VAR 0 3
44991: ARRAY
44992: IN
44993: IFFALSE 45032
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
44995: LD_ADDR_EXP 57
44999: PUSH
45000: LD_EXP 57
45004: PPUSH
45005: LD_VAR 0 3
45009: PPUSH
45010: LD_EXP 57
45014: PUSH
45015: LD_VAR 0 3
45019: ARRAY
45020: PUSH
45021: LD_VAR 0 1
45025: DIFF
45026: PPUSH
45027: CALL_OW 1
45031: ST_TO_ADDR
// end ; break ;
45032: GO 45036
// end ;
45034: GO 43816
45036: POP
45037: POP
// end ;
45038: LD_VAR 0 2
45042: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
45043: LD_INT 0
45045: PPUSH
45046: PPUSH
45047: PPUSH
// if not mc_bases or not skirmish then
45048: LD_EXP 49
45052: NOT
45053: PUSH
45054: LD_EXP 47
45058: NOT
45059: OR
45060: IFFALSE 45064
// exit ;
45062: GO 45279
// for i = 1 to mc_bases do
45064: LD_ADDR_VAR 0 3
45068: PUSH
45069: DOUBLE
45070: LD_INT 1
45072: DEC
45073: ST_TO_ADDR
45074: LD_EXP 49
45078: PUSH
45079: FOR_TO
45080: IFFALSE 45277
// begin if building in mc_construct_list [ i ] then
45082: LD_VAR 0 1
45086: PUSH
45087: LD_EXP 56
45091: PUSH
45092: LD_VAR 0 3
45096: ARRAY
45097: IN
45098: IFFALSE 45275
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45100: LD_ADDR_EXP 56
45104: PUSH
45105: LD_EXP 56
45109: PPUSH
45110: LD_VAR 0 3
45114: PPUSH
45115: LD_EXP 56
45119: PUSH
45120: LD_VAR 0 3
45124: ARRAY
45125: PUSH
45126: LD_VAR 0 1
45130: DIFF
45131: PPUSH
45132: CALL_OW 1
45136: ST_TO_ADDR
// if building in mc_lab [ i ] then
45137: LD_VAR 0 1
45141: PUSH
45142: LD_EXP 82
45146: PUSH
45147: LD_VAR 0 3
45151: ARRAY
45152: IN
45153: IFFALSE 45208
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
45155: LD_ADDR_EXP 83
45159: PUSH
45160: LD_EXP 83
45164: PPUSH
45165: LD_VAR 0 3
45169: PPUSH
45170: LD_EXP 83
45174: PUSH
45175: LD_VAR 0 3
45179: ARRAY
45180: PPUSH
45181: LD_INT 1
45183: PPUSH
45184: LD_EXP 83
45188: PUSH
45189: LD_VAR 0 3
45193: ARRAY
45194: PPUSH
45195: LD_INT 0
45197: PPUSH
45198: CALL 53099 0 4
45202: PPUSH
45203: CALL_OW 1
45207: ST_TO_ADDR
// if not building in mc_bases [ i ] then
45208: LD_VAR 0 1
45212: PUSH
45213: LD_EXP 49
45217: PUSH
45218: LD_VAR 0 3
45222: ARRAY
45223: IN
45224: NOT
45225: IFFALSE 45271
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45227: LD_ADDR_EXP 49
45231: PUSH
45232: LD_EXP 49
45236: PPUSH
45237: LD_VAR 0 3
45241: PUSH
45242: LD_EXP 49
45246: PUSH
45247: LD_VAR 0 3
45251: ARRAY
45252: PUSH
45253: LD_INT 1
45255: PLUS
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PPUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL 53681 0 3
45270: ST_TO_ADDR
// exit ;
45271: POP
45272: POP
45273: GO 45279
// end ; end ;
45275: GO 45079
45277: POP
45278: POP
// end ;
45279: LD_VAR 0 2
45283: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
45284: LD_INT 0
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
45290: PPUSH
45291: PPUSH
45292: PPUSH
// if not mc_bases or not skirmish then
45293: LD_EXP 49
45297: NOT
45298: PUSH
45299: LD_EXP 47
45303: NOT
45304: OR
45305: IFFALSE 45309
// exit ;
45307: GO 45970
// for i = 1 to mc_bases do
45309: LD_ADDR_VAR 0 3
45313: PUSH
45314: DOUBLE
45315: LD_INT 1
45317: DEC
45318: ST_TO_ADDR
45319: LD_EXP 49
45323: PUSH
45324: FOR_TO
45325: IFFALSE 45968
// begin if building in mc_construct_list [ i ] then
45327: LD_VAR 0 1
45331: PUSH
45332: LD_EXP 56
45336: PUSH
45337: LD_VAR 0 3
45341: ARRAY
45342: IN
45343: IFFALSE 45966
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45345: LD_ADDR_EXP 56
45349: PUSH
45350: LD_EXP 56
45354: PPUSH
45355: LD_VAR 0 3
45359: PPUSH
45360: LD_EXP 56
45364: PUSH
45365: LD_VAR 0 3
45369: ARRAY
45370: PUSH
45371: LD_VAR 0 1
45375: DIFF
45376: PPUSH
45377: CALL_OW 1
45381: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45382: LD_ADDR_EXP 49
45386: PUSH
45387: LD_EXP 49
45391: PPUSH
45392: LD_VAR 0 3
45396: PUSH
45397: LD_EXP 49
45401: PUSH
45402: LD_VAR 0 3
45406: ARRAY
45407: PUSH
45408: LD_INT 1
45410: PLUS
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PPUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: CALL 53681 0 3
45425: ST_TO_ADDR
// btype := GetBType ( building ) ;
45426: LD_ADDR_VAR 0 5
45430: PUSH
45431: LD_VAR 0 1
45435: PPUSH
45436: CALL_OW 266
45440: ST_TO_ADDR
// side := GetSide ( building ) ;
45441: LD_ADDR_VAR 0 8
45445: PUSH
45446: LD_VAR 0 1
45450: PPUSH
45451: CALL_OW 255
45455: ST_TO_ADDR
// if btype = b_lab then
45456: LD_VAR 0 5
45460: PUSH
45461: LD_INT 6
45463: EQUAL
45464: IFFALSE 45514
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
45466: LD_ADDR_EXP 82
45470: PUSH
45471: LD_EXP 82
45475: PPUSH
45476: LD_VAR 0 3
45480: PUSH
45481: LD_EXP 82
45485: PUSH
45486: LD_VAR 0 3
45490: ARRAY
45491: PUSH
45492: LD_INT 1
45494: PLUS
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PPUSH
45500: LD_VAR 0 1
45504: PPUSH
45505: CALL 53681 0 3
45509: ST_TO_ADDR
// exit ;
45510: POP
45511: POP
45512: GO 45970
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
45514: LD_VAR 0 5
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 4
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: IN
45533: IFFALSE 45657
// begin if btype = b_armoury then
45535: LD_VAR 0 5
45539: PUSH
45540: LD_INT 4
45542: EQUAL
45543: IFFALSE 45553
// btype := b_barracks ;
45545: LD_ADDR_VAR 0 5
45549: PUSH
45550: LD_INT 5
45552: ST_TO_ADDR
// if btype = b_depot then
45553: LD_VAR 0 5
45557: PUSH
45558: LD_INT 0
45560: EQUAL
45561: IFFALSE 45571
// btype := b_warehouse ;
45563: LD_ADDR_VAR 0 5
45567: PUSH
45568: LD_INT 1
45570: ST_TO_ADDR
// if btype = b_workshop then
45571: LD_VAR 0 5
45575: PUSH
45576: LD_INT 2
45578: EQUAL
45579: IFFALSE 45589
// btype := b_factory ;
45581: LD_ADDR_VAR 0 5
45585: PUSH
45586: LD_INT 3
45588: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
45589: LD_VAR 0 5
45593: PPUSH
45594: LD_VAR 0 8
45598: PPUSH
45599: CALL_OW 323
45603: PUSH
45604: LD_INT 1
45606: EQUAL
45607: IFFALSE 45653
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
45609: LD_ADDR_EXP 81
45613: PUSH
45614: LD_EXP 81
45618: PPUSH
45619: LD_VAR 0 3
45623: PUSH
45624: LD_EXP 81
45628: PUSH
45629: LD_VAR 0 3
45633: ARRAY
45634: PUSH
45635: LD_INT 1
45637: PLUS
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PPUSH
45643: LD_VAR 0 1
45647: PPUSH
45648: CALL 53681 0 3
45652: ST_TO_ADDR
// exit ;
45653: POP
45654: POP
45655: GO 45970
// end ; if btype in [ b_bunker , b_turret ] then
45657: LD_VAR 0 5
45661: PUSH
45662: LD_INT 32
45664: PUSH
45665: LD_INT 33
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: IN
45672: IFFALSE 45962
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
45674: LD_ADDR_EXP 57
45678: PUSH
45679: LD_EXP 57
45683: PPUSH
45684: LD_VAR 0 3
45688: PUSH
45689: LD_EXP 57
45693: PUSH
45694: LD_VAR 0 3
45698: ARRAY
45699: PUSH
45700: LD_INT 1
45702: PLUS
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PPUSH
45708: LD_VAR 0 1
45712: PPUSH
45713: CALL 53681 0 3
45717: ST_TO_ADDR
// if btype = b_bunker then
45718: LD_VAR 0 5
45722: PUSH
45723: LD_INT 32
45725: EQUAL
45726: IFFALSE 45962
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
45728: LD_ADDR_EXP 58
45732: PUSH
45733: LD_EXP 58
45737: PPUSH
45738: LD_VAR 0 3
45742: PUSH
45743: LD_EXP 58
45747: PUSH
45748: LD_VAR 0 3
45752: ARRAY
45753: PUSH
45754: LD_INT 1
45756: PLUS
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PPUSH
45762: LD_VAR 0 1
45766: PPUSH
45767: CALL 53681 0 3
45771: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
45772: LD_ADDR_VAR 0 6
45776: PUSH
45777: LD_EXP 49
45781: PUSH
45782: LD_VAR 0 3
45786: ARRAY
45787: PPUSH
45788: LD_INT 25
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: LD_INT 54
45803: PUSH
45804: EMPTY
45805: LIST
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PPUSH
45815: CALL_OW 72
45819: ST_TO_ADDR
// if tmp then
45820: LD_VAR 0 6
45824: IFFALSE 45830
// exit ;
45826: POP
45827: POP
45828: GO 45970
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45830: LD_ADDR_VAR 0 6
45834: PUSH
45835: LD_EXP 49
45839: PUSH
45840: LD_VAR 0 3
45844: ARRAY
45845: PPUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 30
45851: PUSH
45852: LD_INT 4
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 30
45861: PUSH
45862: LD_INT 5
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: PPUSH
45874: CALL_OW 72
45878: ST_TO_ADDR
// if not tmp then
45879: LD_VAR 0 6
45883: NOT
45884: IFFALSE 45890
// exit ;
45886: POP
45887: POP
45888: GO 45970
// for j in tmp do
45890: LD_ADDR_VAR 0 4
45894: PUSH
45895: LD_VAR 0 6
45899: PUSH
45900: FOR_IN
45901: IFFALSE 45960
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
45903: LD_ADDR_VAR 0 7
45907: PUSH
45908: LD_VAR 0 4
45912: PPUSH
45913: CALL_OW 313
45917: PPUSH
45918: LD_INT 25
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PPUSH
45928: CALL_OW 72
45932: ST_TO_ADDR
// if units then
45933: LD_VAR 0 7
45937: IFFALSE 45958
// begin ComExitBuilding ( units [ 1 ] ) ;
45939: LD_VAR 0 7
45943: PUSH
45944: LD_INT 1
45946: ARRAY
45947: PPUSH
45948: CALL_OW 122
// exit ;
45952: POP
45953: POP
45954: POP
45955: POP
45956: GO 45970
// end ; end ;
45958: GO 45900
45960: POP
45961: POP
// end ; end ; exit ;
45962: POP
45963: POP
45964: GO 45970
// end ; end ;
45966: GO 45324
45968: POP
45969: POP
// end ;
45970: LD_VAR 0 2
45974: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
45975: LD_INT 0
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
// if not mc_bases or not skirmish then
45984: LD_EXP 49
45988: NOT
45989: PUSH
45990: LD_EXP 47
45994: NOT
45995: OR
45996: IFFALSE 46000
// exit ;
45998: GO 46231
// btype := GetBType ( building ) ;
46000: LD_ADDR_VAR 0 6
46004: PUSH
46005: LD_VAR 0 1
46009: PPUSH
46010: CALL_OW 266
46014: ST_TO_ADDR
// x := GetX ( building ) ;
46015: LD_ADDR_VAR 0 7
46019: PUSH
46020: LD_VAR 0 1
46024: PPUSH
46025: CALL_OW 250
46029: ST_TO_ADDR
// y := GetY ( building ) ;
46030: LD_ADDR_VAR 0 8
46034: PUSH
46035: LD_VAR 0 1
46039: PPUSH
46040: CALL_OW 251
46044: ST_TO_ADDR
// d := GetDir ( building ) ;
46045: LD_ADDR_VAR 0 9
46049: PUSH
46050: LD_VAR 0 1
46054: PPUSH
46055: CALL_OW 254
46059: ST_TO_ADDR
// for i = 1 to mc_bases do
46060: LD_ADDR_VAR 0 4
46064: PUSH
46065: DOUBLE
46066: LD_INT 1
46068: DEC
46069: ST_TO_ADDR
46070: LD_EXP 49
46074: PUSH
46075: FOR_TO
46076: IFFALSE 46229
// begin if not mc_build_list [ i ] then
46078: LD_EXP 54
46082: PUSH
46083: LD_VAR 0 4
46087: ARRAY
46088: NOT
46089: IFFALSE 46093
// continue ;
46091: GO 46075
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
46093: LD_VAR 0 6
46097: PUSH
46098: LD_VAR 0 7
46102: PUSH
46103: LD_VAR 0 8
46107: PUSH
46108: LD_VAR 0 9
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: PPUSH
46119: LD_EXP 54
46123: PUSH
46124: LD_VAR 0 4
46128: ARRAY
46129: PUSH
46130: LD_INT 1
46132: ARRAY
46133: PPUSH
46134: CALL 59850 0 2
46138: IFFALSE 46227
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
46140: LD_ADDR_EXP 54
46144: PUSH
46145: LD_EXP 54
46149: PPUSH
46150: LD_VAR 0 4
46154: PPUSH
46155: LD_EXP 54
46159: PUSH
46160: LD_VAR 0 4
46164: ARRAY
46165: PPUSH
46166: LD_INT 1
46168: PPUSH
46169: CALL_OW 3
46173: PPUSH
46174: CALL_OW 1
46178: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
46179: LD_ADDR_EXP 56
46183: PUSH
46184: LD_EXP 56
46188: PPUSH
46189: LD_VAR 0 4
46193: PUSH
46194: LD_EXP 56
46198: PUSH
46199: LD_VAR 0 4
46203: ARRAY
46204: PUSH
46205: LD_INT 1
46207: PLUS
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PPUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL 53681 0 3
46222: ST_TO_ADDR
// exit ;
46223: POP
46224: POP
46225: GO 46231
// end ; end ;
46227: GO 46075
46229: POP
46230: POP
// end ;
46231: LD_VAR 0 3
46235: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
46236: LD_INT 0
46238: PPUSH
46239: PPUSH
46240: PPUSH
// if not mc_bases or not skirmish then
46241: LD_EXP 49
46245: NOT
46246: PUSH
46247: LD_EXP 47
46251: NOT
46252: OR
46253: IFFALSE 46257
// exit ;
46255: GO 46447
// for i = 1 to mc_bases do
46257: LD_ADDR_VAR 0 4
46261: PUSH
46262: DOUBLE
46263: LD_INT 1
46265: DEC
46266: ST_TO_ADDR
46267: LD_EXP 49
46271: PUSH
46272: FOR_TO
46273: IFFALSE 46360
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
46275: LD_VAR 0 1
46279: PUSH
46280: LD_EXP 57
46284: PUSH
46285: LD_VAR 0 4
46289: ARRAY
46290: IN
46291: PUSH
46292: LD_VAR 0 1
46296: PUSH
46297: LD_EXP 58
46301: PUSH
46302: LD_VAR 0 4
46306: ARRAY
46307: IN
46308: NOT
46309: AND
46310: IFFALSE 46358
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46312: LD_ADDR_EXP 58
46316: PUSH
46317: LD_EXP 58
46321: PPUSH
46322: LD_VAR 0 4
46326: PUSH
46327: LD_EXP 58
46331: PUSH
46332: LD_VAR 0 4
46336: ARRAY
46337: PUSH
46338: LD_INT 1
46340: PLUS
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PPUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: CALL 53681 0 3
46355: ST_TO_ADDR
// break ;
46356: GO 46360
// end ; end ;
46358: GO 46272
46360: POP
46361: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
46362: LD_VAR 0 1
46366: PPUSH
46367: CALL_OW 257
46371: PUSH
46372: LD_EXP 75
46376: IN
46377: PUSH
46378: LD_VAR 0 1
46382: PPUSH
46383: CALL_OW 266
46387: PUSH
46388: LD_INT 5
46390: EQUAL
46391: AND
46392: PUSH
46393: LD_VAR 0 2
46397: PPUSH
46398: CALL_OW 110
46402: PUSH
46403: LD_INT 18
46405: NONEQUAL
46406: AND
46407: IFFALSE 46447
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
46409: LD_VAR 0 2
46413: PPUSH
46414: CALL_OW 257
46418: PUSH
46419: LD_INT 5
46421: PUSH
46422: LD_INT 8
46424: PUSH
46425: LD_INT 9
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: IN
46433: IFFALSE 46447
// SetClass ( unit , 1 ) ;
46435: LD_VAR 0 2
46439: PPUSH
46440: LD_INT 1
46442: PPUSH
46443: CALL_OW 336
// end ;
46447: LD_VAR 0 3
46451: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
46452: LD_INT 0
46454: PPUSH
46455: PPUSH
// if not mc_bases or not skirmish then
46456: LD_EXP 49
46460: NOT
46461: PUSH
46462: LD_EXP 47
46466: NOT
46467: OR
46468: IFFALSE 46472
// exit ;
46470: GO 46588
// if GetLives ( abandoned_vehicle ) > 250 then
46472: LD_VAR 0 2
46476: PPUSH
46477: CALL_OW 256
46481: PUSH
46482: LD_INT 250
46484: GREATER
46485: IFFALSE 46489
// exit ;
46487: GO 46588
// for i = 1 to mc_bases do
46489: LD_ADDR_VAR 0 6
46493: PUSH
46494: DOUBLE
46495: LD_INT 1
46497: DEC
46498: ST_TO_ADDR
46499: LD_EXP 49
46503: PUSH
46504: FOR_TO
46505: IFFALSE 46586
// begin if driver in mc_bases [ i ] then
46507: LD_VAR 0 1
46511: PUSH
46512: LD_EXP 49
46516: PUSH
46517: LD_VAR 0 6
46521: ARRAY
46522: IN
46523: IFFALSE 46584
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
46525: LD_VAR 0 1
46529: PPUSH
46530: LD_EXP 49
46534: PUSH
46535: LD_VAR 0 6
46539: ARRAY
46540: PPUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 30
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 30
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: LIST
46568: PPUSH
46569: CALL_OW 72
46573: PUSH
46574: LD_INT 1
46576: ARRAY
46577: PPUSH
46578: CALL_OW 112
// break ;
46582: GO 46586
// end ; end ;
46584: GO 46504
46586: POP
46587: POP
// end ; end_of_file
46588: LD_VAR 0 5
46592: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46593: LD_INT 0
46595: PPUSH
46596: PPUSH
// if exist_mode then
46597: LD_VAR 0 2
46601: IFFALSE 46626
// unit := CreateCharacter ( prefix & ident ) else
46603: LD_ADDR_VAR 0 5
46607: PUSH
46608: LD_VAR 0 3
46612: PUSH
46613: LD_VAR 0 1
46617: STR
46618: PPUSH
46619: CALL_OW 34
46623: ST_TO_ADDR
46624: GO 46641
// unit := NewCharacter ( ident ) ;
46626: LD_ADDR_VAR 0 5
46630: PUSH
46631: LD_VAR 0 1
46635: PPUSH
46636: CALL_OW 25
46640: ST_TO_ADDR
// result := unit ;
46641: LD_ADDR_VAR 0 4
46645: PUSH
46646: LD_VAR 0 5
46650: ST_TO_ADDR
// end ;
46651: LD_VAR 0 4
46655: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46656: LD_INT 0
46658: PPUSH
46659: PPUSH
// if not side or not nation then
46660: LD_VAR 0 1
46664: NOT
46665: PUSH
46666: LD_VAR 0 2
46670: NOT
46671: OR
46672: IFFALSE 46676
// exit ;
46674: GO 47320
// case nation of nation_american :
46676: LD_VAR 0 2
46680: PUSH
46681: LD_INT 1
46683: DOUBLE
46684: EQUAL
46685: IFTRUE 46689
46687: GO 46863
46689: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
46690: LD_ADDR_VAR 0 4
46694: PUSH
46695: LD_INT 35
46697: PUSH
46698: LD_INT 45
46700: PUSH
46701: LD_INT 46
46703: PUSH
46704: LD_INT 47
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 6
46715: PUSH
46716: LD_INT 15
46718: PUSH
46719: LD_INT 16
46721: PUSH
46722: LD_INT 7
46724: PUSH
46725: LD_INT 12
46727: PUSH
46728: LD_INT 13
46730: PUSH
46731: LD_INT 10
46733: PUSH
46734: LD_INT 14
46736: PUSH
46737: LD_INT 20
46739: PUSH
46740: LD_INT 21
46742: PUSH
46743: LD_INT 22
46745: PUSH
46746: LD_INT 25
46748: PUSH
46749: LD_INT 32
46751: PUSH
46752: LD_INT 27
46754: PUSH
46755: LD_INT 36
46757: PUSH
46758: LD_INT 69
46760: PUSH
46761: LD_INT 39
46763: PUSH
46764: LD_INT 34
46766: PUSH
46767: LD_INT 40
46769: PUSH
46770: LD_INT 48
46772: PUSH
46773: LD_INT 49
46775: PUSH
46776: LD_INT 50
46778: PUSH
46779: LD_INT 51
46781: PUSH
46782: LD_INT 52
46784: PUSH
46785: LD_INT 53
46787: PUSH
46788: LD_INT 54
46790: PUSH
46791: LD_INT 55
46793: PUSH
46794: LD_INT 56
46796: PUSH
46797: LD_INT 57
46799: PUSH
46800: LD_INT 58
46802: PUSH
46803: LD_INT 59
46805: PUSH
46806: LD_INT 60
46808: PUSH
46809: LD_INT 61
46811: PUSH
46812: LD_INT 62
46814: PUSH
46815: LD_INT 80
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: ST_TO_ADDR
46861: GO 47244
46863: LD_INT 2
46865: DOUBLE
46866: EQUAL
46867: IFTRUE 46871
46869: GO 47053
46871: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
46872: LD_ADDR_VAR 0 4
46876: PUSH
46877: LD_INT 35
46879: PUSH
46880: LD_INT 45
46882: PUSH
46883: LD_INT 46
46885: PUSH
46886: LD_INT 47
46888: PUSH
46889: LD_INT 70
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 11
46897: PUSH
46898: LD_INT 3
46900: PUSH
46901: LD_INT 4
46903: PUSH
46904: LD_INT 5
46906: PUSH
46907: LD_INT 6
46909: PUSH
46910: LD_INT 15
46912: PUSH
46913: LD_INT 18
46915: PUSH
46916: LD_INT 7
46918: PUSH
46919: LD_INT 17
46921: PUSH
46922: LD_INT 8
46924: PUSH
46925: LD_INT 20
46927: PUSH
46928: LD_INT 21
46930: PUSH
46931: LD_INT 22
46933: PUSH
46934: LD_INT 72
46936: PUSH
46937: LD_INT 26
46939: PUSH
46940: LD_INT 69
46942: PUSH
46943: LD_INT 39
46945: PUSH
46946: LD_INT 40
46948: PUSH
46949: LD_INT 41
46951: PUSH
46952: LD_INT 42
46954: PUSH
46955: LD_INT 43
46957: PUSH
46958: LD_INT 48
46960: PUSH
46961: LD_INT 49
46963: PUSH
46964: LD_INT 50
46966: PUSH
46967: LD_INT 51
46969: PUSH
46970: LD_INT 52
46972: PUSH
46973: LD_INT 53
46975: PUSH
46976: LD_INT 54
46978: PUSH
46979: LD_INT 55
46981: PUSH
46982: LD_INT 56
46984: PUSH
46985: LD_INT 60
46987: PUSH
46988: LD_INT 61
46990: PUSH
46991: LD_INT 62
46993: PUSH
46994: LD_INT 66
46996: PUSH
46997: LD_INT 67
46999: PUSH
47000: LD_INT 68
47002: PUSH
47003: LD_INT 81
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
47051: GO 47244
47053: LD_INT 3
47055: DOUBLE
47056: EQUAL
47057: IFTRUE 47061
47059: GO 47243
47061: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
47062: LD_ADDR_VAR 0 4
47066: PUSH
47067: LD_INT 46
47069: PUSH
47070: LD_INT 47
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 11
47081: PUSH
47082: LD_INT 9
47084: PUSH
47085: LD_INT 20
47087: PUSH
47088: LD_INT 19
47090: PUSH
47091: LD_INT 21
47093: PUSH
47094: LD_INT 24
47096: PUSH
47097: LD_INT 22
47099: PUSH
47100: LD_INT 25
47102: PUSH
47103: LD_INT 28
47105: PUSH
47106: LD_INT 29
47108: PUSH
47109: LD_INT 30
47111: PUSH
47112: LD_INT 31
47114: PUSH
47115: LD_INT 37
47117: PUSH
47118: LD_INT 38
47120: PUSH
47121: LD_INT 32
47123: PUSH
47124: LD_INT 27
47126: PUSH
47127: LD_INT 33
47129: PUSH
47130: LD_INT 69
47132: PUSH
47133: LD_INT 39
47135: PUSH
47136: LD_INT 34
47138: PUSH
47139: LD_INT 40
47141: PUSH
47142: LD_INT 71
47144: PUSH
47145: LD_INT 23
47147: PUSH
47148: LD_INT 44
47150: PUSH
47151: LD_INT 48
47153: PUSH
47154: LD_INT 49
47156: PUSH
47157: LD_INT 50
47159: PUSH
47160: LD_INT 51
47162: PUSH
47163: LD_INT 52
47165: PUSH
47166: LD_INT 53
47168: PUSH
47169: LD_INT 54
47171: PUSH
47172: LD_INT 55
47174: PUSH
47175: LD_INT 56
47177: PUSH
47178: LD_INT 57
47180: PUSH
47181: LD_INT 58
47183: PUSH
47184: LD_INT 59
47186: PUSH
47187: LD_INT 63
47189: PUSH
47190: LD_INT 64
47192: PUSH
47193: LD_INT 65
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: ST_TO_ADDR
47241: GO 47244
47243: POP
// if state > - 1 and state < 3 then
47244: LD_VAR 0 3
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: GREATER
47253: PUSH
47254: LD_VAR 0 3
47258: PUSH
47259: LD_INT 3
47261: LESS
47262: AND
47263: IFFALSE 47320
// for i in result do
47265: LD_ADDR_VAR 0 5
47269: PUSH
47270: LD_VAR 0 4
47274: PUSH
47275: FOR_IN
47276: IFFALSE 47318
// if GetTech ( i , side ) <> state then
47278: LD_VAR 0 5
47282: PPUSH
47283: LD_VAR 0 1
47287: PPUSH
47288: CALL_OW 321
47292: PUSH
47293: LD_VAR 0 3
47297: NONEQUAL
47298: IFFALSE 47316
// result := result diff i ;
47300: LD_ADDR_VAR 0 4
47304: PUSH
47305: LD_VAR 0 4
47309: PUSH
47310: LD_VAR 0 5
47314: DIFF
47315: ST_TO_ADDR
47316: GO 47275
47318: POP
47319: POP
// end ;
47320: LD_VAR 0 4
47324: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47325: LD_INT 0
47327: PPUSH
47328: PPUSH
47329: PPUSH
// result := true ;
47330: LD_ADDR_VAR 0 3
47334: PUSH
47335: LD_INT 1
47337: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47338: LD_ADDR_VAR 0 5
47342: PUSH
47343: LD_VAR 0 2
47347: PPUSH
47348: CALL_OW 480
47352: ST_TO_ADDR
// if not tmp then
47353: LD_VAR 0 5
47357: NOT
47358: IFFALSE 47362
// exit ;
47360: GO 47411
// for i in tmp do
47362: LD_ADDR_VAR 0 4
47366: PUSH
47367: LD_VAR 0 5
47371: PUSH
47372: FOR_IN
47373: IFFALSE 47409
// if GetTech ( i , side ) <> state_researched then
47375: LD_VAR 0 4
47379: PPUSH
47380: LD_VAR 0 1
47384: PPUSH
47385: CALL_OW 321
47389: PUSH
47390: LD_INT 2
47392: NONEQUAL
47393: IFFALSE 47407
// begin result := false ;
47395: LD_ADDR_VAR 0 3
47399: PUSH
47400: LD_INT 0
47402: ST_TO_ADDR
// exit ;
47403: POP
47404: POP
47405: GO 47411
// end ;
47407: GO 47372
47409: POP
47410: POP
// end ;
47411: LD_VAR 0 3
47415: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47416: LD_INT 0
47418: PPUSH
47419: PPUSH
47420: PPUSH
47421: PPUSH
47422: PPUSH
47423: PPUSH
47424: PPUSH
47425: PPUSH
47426: PPUSH
47427: PPUSH
47428: PPUSH
47429: PPUSH
47430: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47431: LD_VAR 0 1
47435: NOT
47436: PUSH
47437: LD_VAR 0 1
47441: PPUSH
47442: CALL_OW 257
47446: PUSH
47447: LD_INT 9
47449: NONEQUAL
47450: OR
47451: IFFALSE 47455
// exit ;
47453: GO 48028
// side := GetSide ( unit ) ;
47455: LD_ADDR_VAR 0 9
47459: PUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: CALL_OW 255
47469: ST_TO_ADDR
// tech_space := tech_spacanom ;
47470: LD_ADDR_VAR 0 12
47474: PUSH
47475: LD_INT 29
47477: ST_TO_ADDR
// tech_time := tech_taurad ;
47478: LD_ADDR_VAR 0 13
47482: PUSH
47483: LD_INT 28
47485: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47486: LD_ADDR_VAR 0 11
47490: PUSH
47491: LD_VAR 0 1
47495: PPUSH
47496: CALL_OW 310
47500: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47501: LD_VAR 0 11
47505: PPUSH
47506: CALL_OW 247
47510: PUSH
47511: LD_INT 2
47513: EQUAL
47514: IFFALSE 47518
// exit ;
47516: GO 48028
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47518: LD_ADDR_VAR 0 8
47522: PUSH
47523: LD_INT 81
47525: PUSH
47526: LD_VAR 0 9
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: LD_INT 21
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PPUSH
47556: CALL_OW 69
47560: ST_TO_ADDR
// if not tmp then
47561: LD_VAR 0 8
47565: NOT
47566: IFFALSE 47570
// exit ;
47568: GO 48028
// if in_unit then
47570: LD_VAR 0 11
47574: IFFALSE 47598
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47576: LD_ADDR_VAR 0 10
47580: PUSH
47581: LD_VAR 0 8
47585: PPUSH
47586: LD_VAR 0 11
47590: PPUSH
47591: CALL_OW 74
47595: ST_TO_ADDR
47596: GO 47618
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47598: LD_ADDR_VAR 0 10
47602: PUSH
47603: LD_VAR 0 8
47607: PPUSH
47608: LD_VAR 0 1
47612: PPUSH
47613: CALL_OW 74
47617: ST_TO_ADDR
// if not enemy then
47618: LD_VAR 0 10
47622: NOT
47623: IFFALSE 47627
// exit ;
47625: GO 48028
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47627: LD_VAR 0 11
47631: PUSH
47632: LD_VAR 0 11
47636: PPUSH
47637: LD_VAR 0 10
47641: PPUSH
47642: CALL_OW 296
47646: PUSH
47647: LD_INT 13
47649: GREATER
47650: AND
47651: PUSH
47652: LD_VAR 0 1
47656: PPUSH
47657: LD_VAR 0 10
47661: PPUSH
47662: CALL_OW 296
47666: PUSH
47667: LD_INT 12
47669: GREATER
47670: OR
47671: IFFALSE 47675
// exit ;
47673: GO 48028
// missile := [ 1 ] ;
47675: LD_ADDR_VAR 0 14
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47686: LD_VAR 0 9
47690: PPUSH
47691: LD_VAR 0 12
47695: PPUSH
47696: CALL_OW 325
47700: IFFALSE 47729
// missile := Insert ( missile , missile + 1 , 2 ) ;
47702: LD_ADDR_VAR 0 14
47706: PUSH
47707: LD_VAR 0 14
47711: PPUSH
47712: LD_VAR 0 14
47716: PUSH
47717: LD_INT 1
47719: PLUS
47720: PPUSH
47721: LD_INT 2
47723: PPUSH
47724: CALL_OW 2
47728: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47729: LD_VAR 0 9
47733: PPUSH
47734: LD_VAR 0 13
47738: PPUSH
47739: CALL_OW 325
47743: PUSH
47744: LD_VAR 0 10
47748: PPUSH
47749: CALL_OW 255
47753: PPUSH
47754: LD_VAR 0 13
47758: PPUSH
47759: CALL_OW 325
47763: NOT
47764: AND
47765: IFFALSE 47794
// missile := Insert ( missile , missile + 1 , 3 ) ;
47767: LD_ADDR_VAR 0 14
47771: PUSH
47772: LD_VAR 0 14
47776: PPUSH
47777: LD_VAR 0 14
47781: PUSH
47782: LD_INT 1
47784: PLUS
47785: PPUSH
47786: LD_INT 3
47788: PPUSH
47789: CALL_OW 2
47793: ST_TO_ADDR
// if missile < 2 then
47794: LD_VAR 0 14
47798: PUSH
47799: LD_INT 2
47801: LESS
47802: IFFALSE 47806
// exit ;
47804: GO 48028
// x := GetX ( enemy ) ;
47806: LD_ADDR_VAR 0 4
47810: PUSH
47811: LD_VAR 0 10
47815: PPUSH
47816: CALL_OW 250
47820: ST_TO_ADDR
// y := GetY ( enemy ) ;
47821: LD_ADDR_VAR 0 5
47825: PUSH
47826: LD_VAR 0 10
47830: PPUSH
47831: CALL_OW 251
47835: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47836: LD_ADDR_VAR 0 6
47840: PUSH
47841: LD_VAR 0 4
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PPUSH
47850: LD_INT 1
47852: PPUSH
47853: CALL_OW 12
47857: PLUS
47858: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47859: LD_ADDR_VAR 0 7
47863: PUSH
47864: LD_VAR 0 5
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PPUSH
47873: LD_INT 1
47875: PPUSH
47876: CALL_OW 12
47880: PLUS
47881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47882: LD_VAR 0 6
47886: PPUSH
47887: LD_VAR 0 7
47891: PPUSH
47892: CALL_OW 488
47896: NOT
47897: IFFALSE 47919
// begin _x := x ;
47899: LD_ADDR_VAR 0 6
47903: PUSH
47904: LD_VAR 0 4
47908: ST_TO_ADDR
// _y := y ;
47909: LD_ADDR_VAR 0 7
47913: PUSH
47914: LD_VAR 0 5
47918: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47919: LD_ADDR_VAR 0 3
47923: PUSH
47924: LD_INT 1
47926: PPUSH
47927: LD_VAR 0 14
47931: PPUSH
47932: CALL_OW 12
47936: ST_TO_ADDR
// case i of 1 :
47937: LD_VAR 0 3
47941: PUSH
47942: LD_INT 1
47944: DOUBLE
47945: EQUAL
47946: IFTRUE 47950
47948: GO 47967
47950: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47951: LD_VAR 0 1
47955: PPUSH
47956: LD_VAR 0 10
47960: PPUSH
47961: CALL_OW 115
47965: GO 48028
47967: LD_INT 2
47969: DOUBLE
47970: EQUAL
47971: IFTRUE 47975
47973: GO 47997
47975: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47976: LD_VAR 0 1
47980: PPUSH
47981: LD_VAR 0 6
47985: PPUSH
47986: LD_VAR 0 7
47990: PPUSH
47991: CALL_OW 153
47995: GO 48028
47997: LD_INT 3
47999: DOUBLE
48000: EQUAL
48001: IFTRUE 48005
48003: GO 48027
48005: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48006: LD_VAR 0 1
48010: PPUSH
48011: LD_VAR 0 6
48015: PPUSH
48016: LD_VAR 0 7
48020: PPUSH
48021: CALL_OW 154
48025: GO 48028
48027: POP
// end ;
48028: LD_VAR 0 2
48032: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48033: LD_INT 0
48035: PPUSH
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
48040: PPUSH
// if not unit or not building then
48041: LD_VAR 0 1
48045: NOT
48046: PUSH
48047: LD_VAR 0 2
48051: NOT
48052: OR
48053: IFFALSE 48057
// exit ;
48055: GO 48215
// x := GetX ( building ) ;
48057: LD_ADDR_VAR 0 5
48061: PUSH
48062: LD_VAR 0 2
48066: PPUSH
48067: CALL_OW 250
48071: ST_TO_ADDR
// y := GetY ( building ) ;
48072: LD_ADDR_VAR 0 6
48076: PUSH
48077: LD_VAR 0 2
48081: PPUSH
48082: CALL_OW 251
48086: ST_TO_ADDR
// for i = 0 to 5 do
48087: LD_ADDR_VAR 0 4
48091: PUSH
48092: DOUBLE
48093: LD_INT 0
48095: DEC
48096: ST_TO_ADDR
48097: LD_INT 5
48099: PUSH
48100: FOR_TO
48101: IFFALSE 48213
// begin _x := ShiftX ( x , i , 3 ) ;
48103: LD_ADDR_VAR 0 7
48107: PUSH
48108: LD_VAR 0 5
48112: PPUSH
48113: LD_VAR 0 4
48117: PPUSH
48118: LD_INT 3
48120: PPUSH
48121: CALL_OW 272
48125: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48126: LD_ADDR_VAR 0 8
48130: PUSH
48131: LD_VAR 0 6
48135: PPUSH
48136: LD_VAR 0 4
48140: PPUSH
48141: LD_INT 3
48143: PPUSH
48144: CALL_OW 273
48148: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48149: LD_VAR 0 7
48153: PPUSH
48154: LD_VAR 0 8
48158: PPUSH
48159: CALL_OW 488
48163: NOT
48164: IFFALSE 48168
// continue ;
48166: GO 48100
// if HexInfo ( _x , _y ) = 0 then
48168: LD_VAR 0 7
48172: PPUSH
48173: LD_VAR 0 8
48177: PPUSH
48178: CALL_OW 428
48182: PUSH
48183: LD_INT 0
48185: EQUAL
48186: IFFALSE 48211
// begin ComMoveXY ( unit , _x , _y ) ;
48188: LD_VAR 0 1
48192: PPUSH
48193: LD_VAR 0 7
48197: PPUSH
48198: LD_VAR 0 8
48202: PPUSH
48203: CALL_OW 111
// exit ;
48207: POP
48208: POP
48209: GO 48215
// end ; end ;
48211: GO 48100
48213: POP
48214: POP
// end ;
48215: LD_VAR 0 3
48219: RET
// export function ScanBase ( side , base_area ) ; begin
48220: LD_INT 0
48222: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48223: LD_ADDR_VAR 0 3
48227: PUSH
48228: LD_VAR 0 2
48232: PPUSH
48233: LD_INT 81
48235: PUSH
48236: LD_VAR 0 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PPUSH
48245: CALL_OW 70
48249: ST_TO_ADDR
// end ;
48250: LD_VAR 0 3
48254: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
48255: LD_INT 0
48257: PPUSH
48258: PPUSH
48259: PPUSH
48260: PPUSH
48261: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
48262: LD_VAR 0 1
48266: NOT
48267: PUSH
48268: LD_EXP 49
48272: PUSH
48273: LD_VAR 0 1
48277: ARRAY
48278: NOT
48279: OR
48280: PUSH
48281: LD_VAR 0 2
48285: NOT
48286: OR
48287: PUSH
48288: LD_VAR 0 3
48292: NOT
48293: OR
48294: IFFALSE 48298
// exit ;
48296: GO 48811
// side := mc_sides [ base ] ;
48298: LD_ADDR_VAR 0 6
48302: PUSH
48303: LD_EXP 75
48307: PUSH
48308: LD_VAR 0 1
48312: ARRAY
48313: ST_TO_ADDR
// if not side then
48314: LD_VAR 0 6
48318: NOT
48319: IFFALSE 48323
// exit ;
48321: GO 48811
// for i in solds do
48323: LD_ADDR_VAR 0 7
48327: PUSH
48328: LD_VAR 0 2
48332: PUSH
48333: FOR_IN
48334: IFFALSE 48395
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
48336: LD_VAR 0 7
48340: PPUSH
48341: CALL_OW 310
48345: PPUSH
48346: CALL_OW 266
48350: PUSH
48351: LD_INT 32
48353: PUSH
48354: LD_INT 31
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: IN
48361: IFFALSE 48381
// solds := solds diff i else
48363: LD_ADDR_VAR 0 2
48367: PUSH
48368: LD_VAR 0 2
48372: PUSH
48373: LD_VAR 0 7
48377: DIFF
48378: ST_TO_ADDR
48379: GO 48393
// SetTag ( i , 18 ) ;
48381: LD_VAR 0 7
48385: PPUSH
48386: LD_INT 18
48388: PPUSH
48389: CALL_OW 109
48393: GO 48333
48395: POP
48396: POP
// if not solds then
48397: LD_VAR 0 2
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 48811
// repeat wait ( 0 0$1 ) ;
48406: LD_INT 35
48408: PPUSH
48409: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
48413: LD_ADDR_VAR 0 5
48417: PUSH
48418: LD_VAR 0 6
48422: PPUSH
48423: LD_VAR 0 3
48427: PPUSH
48428: CALL 48220 0 2
48432: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
48433: LD_EXP 49
48437: PUSH
48438: LD_VAR 0 1
48442: ARRAY
48443: NOT
48444: PUSH
48445: LD_EXP 49
48449: PUSH
48450: LD_VAR 0 1
48454: ARRAY
48455: PUSH
48456: EMPTY
48457: EQUAL
48458: OR
48459: IFFALSE 48496
// begin for i in solds do
48461: LD_ADDR_VAR 0 7
48465: PUSH
48466: LD_VAR 0 2
48470: PUSH
48471: FOR_IN
48472: IFFALSE 48485
// ComStop ( i ) ;
48474: LD_VAR 0 7
48478: PPUSH
48479: CALL_OW 141
48483: GO 48471
48485: POP
48486: POP
// solds := [ ] ;
48487: LD_ADDR_VAR 0 2
48491: PUSH
48492: EMPTY
48493: ST_TO_ADDR
// exit ;
48494: GO 48811
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
48496: LD_VAR 0 5
48500: NOT
48501: PUSH
48502: LD_VAR 0 5
48506: PUSH
48507: LD_INT 3
48509: GREATER
48510: OR
48511: PUSH
48512: LD_EXP 71
48516: PUSH
48517: LD_VAR 0 1
48521: ARRAY
48522: OR
48523: IFFALSE 48564
// begin for i in solds do
48525: LD_ADDR_VAR 0 7
48529: PUSH
48530: LD_VAR 0 2
48534: PUSH
48535: FOR_IN
48536: IFFALSE 48560
// if HasTask ( i ) then
48538: LD_VAR 0 7
48542: PPUSH
48543: CALL_OW 314
48547: IFFALSE 48558
// ComStop ( i ) ;
48549: LD_VAR 0 7
48553: PPUSH
48554: CALL_OW 141
48558: GO 48535
48560: POP
48561: POP
// break ;
48562: GO 48799
// end ; for i in solds do
48564: LD_ADDR_VAR 0 7
48568: PUSH
48569: LD_VAR 0 2
48573: PUSH
48574: FOR_IN
48575: IFFALSE 48791
// begin if IsInUnit ( i ) then
48577: LD_VAR 0 7
48581: PPUSH
48582: CALL_OW 310
48586: IFFALSE 48597
// ComExitBuilding ( i ) ;
48588: LD_VAR 0 7
48592: PPUSH
48593: CALL_OW 122
// if GetLives ( i ) > 333 then
48597: LD_VAR 0 7
48601: PPUSH
48602: CALL_OW 256
48606: PUSH
48607: LD_INT 333
48609: GREATER
48610: IFFALSE 48638
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48612: LD_VAR 0 7
48616: PPUSH
48617: LD_VAR 0 5
48621: PPUSH
48622: LD_VAR 0 7
48626: PPUSH
48627: CALL_OW 74
48631: PPUSH
48632: CALL_OW 115
48636: GO 48789
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
48638: LD_ADDR_VAR 0 8
48642: PUSH
48643: LD_EXP 49
48647: PUSH
48648: LD_VAR 0 1
48652: ARRAY
48653: PPUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 30
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 30
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 30
48679: PUSH
48680: LD_INT 6
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: PPUSH
48693: CALL_OW 72
48697: PPUSH
48698: LD_VAR 0 7
48702: PPUSH
48703: CALL_OW 74
48707: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
48708: LD_VAR 0 7
48712: PPUSH
48713: LD_VAR 0 8
48717: PPUSH
48718: CALL_OW 250
48722: PPUSH
48723: LD_INT 3
48725: PPUSH
48726: LD_INT 5
48728: PPUSH
48729: CALL_OW 272
48733: PPUSH
48734: LD_VAR 0 8
48738: PPUSH
48739: CALL_OW 251
48743: PPUSH
48744: LD_INT 3
48746: PPUSH
48747: LD_INT 5
48749: PPUSH
48750: CALL_OW 273
48754: PPUSH
48755: CALL_OW 111
// SetTag ( i , 0 ) ;
48759: LD_VAR 0 7
48763: PPUSH
48764: LD_INT 0
48766: PPUSH
48767: CALL_OW 109
// solds := solds diff i ;
48771: LD_ADDR_VAR 0 2
48775: PUSH
48776: LD_VAR 0 2
48780: PUSH
48781: LD_VAR 0 7
48785: DIFF
48786: ST_TO_ADDR
// continue ;
48787: GO 48574
// end ; end ;
48789: GO 48574
48791: POP
48792: POP
// until solds ;
48793: LD_VAR 0 2
48797: IFFALSE 48406
// MC_Reset ( base , 18 ) ;
48799: LD_VAR 0 1
48803: PPUSH
48804: LD_INT 18
48806: PPUSH
48807: CALL 20878 0 2
// end ;
48811: LD_VAR 0 4
48815: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
48816: LD_INT 0
48818: PPUSH
48819: PPUSH
48820: PPUSH
48821: PPUSH
48822: PPUSH
48823: PPUSH
48824: PPUSH
48825: PPUSH
48826: PPUSH
48827: PPUSH
48828: PPUSH
48829: PPUSH
48830: PPUSH
48831: PPUSH
48832: PPUSH
48833: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
48834: LD_ADDR_VAR 0 12
48838: PUSH
48839: LD_EXP 49
48843: PUSH
48844: LD_VAR 0 1
48848: ARRAY
48849: PPUSH
48850: LD_INT 25
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PPUSH
48860: CALL_OW 72
48864: ST_TO_ADDR
// if mc_remote_driver [ base ] then
48865: LD_EXP 89
48869: PUSH
48870: LD_VAR 0 1
48874: ARRAY
48875: IFFALSE 48899
// mechs := mechs diff mc_remote_driver [ base ] ;
48877: LD_ADDR_VAR 0 12
48881: PUSH
48882: LD_VAR 0 12
48886: PUSH
48887: LD_EXP 89
48891: PUSH
48892: LD_VAR 0 1
48896: ARRAY
48897: DIFF
48898: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
48899: LD_ADDR_VAR 0 8
48903: PUSH
48904: LD_EXP 49
48908: PUSH
48909: LD_VAR 0 1
48913: ARRAY
48914: PPUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 25
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 25
48930: PUSH
48931: LD_INT 5
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 25
48940: PUSH
48941: LD_INT 8
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 25
48950: PUSH
48951: LD_INT 9
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: PPUSH
48965: CALL_OW 72
48969: ST_TO_ADDR
// if not defenders and not solds then
48970: LD_VAR 0 2
48974: NOT
48975: PUSH
48976: LD_VAR 0 8
48980: NOT
48981: AND
48982: IFFALSE 48986
// exit ;
48984: GO 50512
// depot_under_attack := false ;
48986: LD_ADDR_VAR 0 16
48990: PUSH
48991: LD_INT 0
48993: ST_TO_ADDR
// sold_defenders := [ ] ;
48994: LD_ADDR_VAR 0 17
48998: PUSH
48999: EMPTY
49000: ST_TO_ADDR
// if mechs then
49001: LD_VAR 0 12
49005: IFFALSE 49134
// for i in defenders do
49007: LD_ADDR_VAR 0 5
49011: PUSH
49012: LD_VAR 0 2
49016: PUSH
49017: FOR_IN
49018: IFFALSE 49132
// begin SetTag ( i , 20 ) ;
49020: LD_VAR 0 5
49024: PPUSH
49025: LD_INT 20
49027: PPUSH
49028: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
49032: LD_VAR 0 5
49036: PPUSH
49037: CALL_OW 263
49041: PUSH
49042: LD_INT 1
49044: EQUAL
49045: PUSH
49046: LD_VAR 0 5
49050: PPUSH
49051: CALL_OW 311
49055: NOT
49056: AND
49057: PUSH
49058: LD_VAR 0 12
49062: AND
49063: IFFALSE 49130
// begin un := mechs [ 1 ] ;
49065: LD_ADDR_VAR 0 10
49069: PUSH
49070: LD_VAR 0 12
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: ST_TO_ADDR
// ComExitBuilding ( un ) ;
49079: LD_VAR 0 10
49083: PPUSH
49084: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
49088: LD_VAR 0 10
49092: PPUSH
49093: LD_VAR 0 5
49097: PPUSH
49098: CALL_OW 180
// SetTag ( un , 19 ) ;
49102: LD_VAR 0 10
49106: PPUSH
49107: LD_INT 19
49109: PPUSH
49110: CALL_OW 109
// mechs := mechs diff un ;
49114: LD_ADDR_VAR 0 12
49118: PUSH
49119: LD_VAR 0 12
49123: PUSH
49124: LD_VAR 0 10
49128: DIFF
49129: ST_TO_ADDR
// end ; end ;
49130: GO 49017
49132: POP
49133: POP
// if solds then
49134: LD_VAR 0 8
49138: IFFALSE 49197
// for i in solds do
49140: LD_ADDR_VAR 0 5
49144: PUSH
49145: LD_VAR 0 8
49149: PUSH
49150: FOR_IN
49151: IFFALSE 49195
// if not GetTag ( i ) then
49153: LD_VAR 0 5
49157: PPUSH
49158: CALL_OW 110
49162: NOT
49163: IFFALSE 49193
// begin defenders := defenders union i ;
49165: LD_ADDR_VAR 0 2
49169: PUSH
49170: LD_VAR 0 2
49174: PUSH
49175: LD_VAR 0 5
49179: UNION
49180: ST_TO_ADDR
// SetTag ( i , 18 ) ;
49181: LD_VAR 0 5
49185: PPUSH
49186: LD_INT 18
49188: PPUSH
49189: CALL_OW 109
// end ;
49193: GO 49150
49195: POP
49196: POP
// repeat wait ( 0 0$1 ) ;
49197: LD_INT 35
49199: PPUSH
49200: CALL_OW 67
// enemy := mc_scan [ base ] ;
49204: LD_ADDR_VAR 0 3
49208: PUSH
49209: LD_EXP 72
49213: PUSH
49214: LD_VAR 0 1
49218: ARRAY
49219: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
49220: LD_EXP 49
49224: PUSH
49225: LD_VAR 0 1
49229: ARRAY
49230: NOT
49231: PUSH
49232: LD_EXP 49
49236: PUSH
49237: LD_VAR 0 1
49241: ARRAY
49242: PUSH
49243: EMPTY
49244: EQUAL
49245: OR
49246: IFFALSE 49283
// begin for i in defenders do
49248: LD_ADDR_VAR 0 5
49252: PUSH
49253: LD_VAR 0 2
49257: PUSH
49258: FOR_IN
49259: IFFALSE 49272
// ComStop ( i ) ;
49261: LD_VAR 0 5
49265: PPUSH
49266: CALL_OW 141
49270: GO 49258
49272: POP
49273: POP
// defenders := [ ] ;
49274: LD_ADDR_VAR 0 2
49278: PUSH
49279: EMPTY
49280: ST_TO_ADDR
// exit ;
49281: GO 50512
// end ; for i in defenders do
49283: LD_ADDR_VAR 0 5
49287: PUSH
49288: LD_VAR 0 2
49292: PUSH
49293: FOR_IN
49294: IFFALSE 50024
// begin e := NearestUnitToUnit ( enemy , i ) ;
49296: LD_ADDR_VAR 0 13
49300: PUSH
49301: LD_VAR 0 3
49305: PPUSH
49306: LD_VAR 0 5
49310: PPUSH
49311: CALL_OW 74
49315: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
49316: LD_ADDR_VAR 0 16
49320: PUSH
49321: LD_EXP 49
49325: PUSH
49326: LD_VAR 0 1
49330: ARRAY
49331: PPUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 30
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 30
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: PPUSH
49360: CALL_OW 72
49364: NOT
49365: PUSH
49366: LD_EXP 49
49370: PUSH
49371: LD_VAR 0 1
49375: ARRAY
49376: PPUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 30
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 30
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: PPUSH
49405: CALL_OW 72
49409: PPUSH
49410: CALL_OW 256
49414: PUSH
49415: LD_INT 600
49417: LESS
49418: OR
49419: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
49420: LD_VAR 0 5
49424: PPUSH
49425: CALL_OW 247
49429: PUSH
49430: LD_INT 2
49432: DOUBLE
49433: EQUAL
49434: IFTRUE 49438
49436: GO 49730
49438: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
49439: LD_VAR 0 5
49443: PPUSH
49444: CALL_OW 256
49448: PUSH
49449: LD_INT 650
49451: GREATER
49452: PUSH
49453: LD_VAR 0 5
49457: PPUSH
49458: LD_VAR 0 13
49462: PPUSH
49463: CALL_OW 296
49467: PUSH
49468: LD_INT 40
49470: LESS
49471: PUSH
49472: LD_VAR 0 13
49476: PPUSH
49477: LD_EXP 74
49481: PUSH
49482: LD_VAR 0 1
49486: ARRAY
49487: PPUSH
49488: CALL_OW 308
49492: OR
49493: AND
49494: IFFALSE 49512
// ComAttackUnit ( i , e ) else
49496: LD_VAR 0 5
49500: PPUSH
49501: LD_VAR 0 13
49505: PPUSH
49506: CALL_OW 115
49510: GO 49613
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
49512: LD_VAR 0 13
49516: PPUSH
49517: LD_EXP 74
49521: PUSH
49522: LD_VAR 0 1
49526: ARRAY
49527: PPUSH
49528: CALL_OW 308
49532: NOT
49533: PUSH
49534: LD_VAR 0 5
49538: PPUSH
49539: LD_VAR 0 13
49543: PPUSH
49544: CALL_OW 296
49548: PUSH
49549: LD_INT 40
49551: GREATEREQUAL
49552: AND
49553: PUSH
49554: LD_VAR 0 5
49558: PPUSH
49559: CALL_OW 256
49563: PUSH
49564: LD_INT 650
49566: LESSEQUAL
49567: OR
49568: PUSH
49569: LD_VAR 0 5
49573: PPUSH
49574: LD_EXP 73
49578: PUSH
49579: LD_VAR 0 1
49583: ARRAY
49584: PPUSH
49585: CALL_OW 308
49589: NOT
49590: AND
49591: IFFALSE 49613
// ComMoveToArea ( i , mc_parking [ base ] ) ;
49593: LD_VAR 0 5
49597: PPUSH
49598: LD_EXP 73
49602: PUSH
49603: LD_VAR 0 1
49607: ARRAY
49608: PPUSH
49609: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
49613: LD_VAR 0 5
49617: PPUSH
49618: CALL_OW 256
49622: PUSH
49623: LD_INT 998
49625: LESS
49626: PUSH
49627: LD_VAR 0 5
49631: PPUSH
49632: CALL_OW 263
49636: PUSH
49637: LD_INT 1
49639: EQUAL
49640: AND
49641: PUSH
49642: LD_VAR 0 5
49646: PPUSH
49647: CALL_OW 311
49651: AND
49652: PUSH
49653: LD_VAR 0 5
49657: PPUSH
49658: LD_EXP 73
49662: PUSH
49663: LD_VAR 0 1
49667: ARRAY
49668: PPUSH
49669: CALL_OW 308
49673: AND
49674: IFFALSE 49728
// begin mech := IsDrivenBy ( i ) ;
49676: LD_ADDR_VAR 0 9
49680: PUSH
49681: LD_VAR 0 5
49685: PPUSH
49686: CALL_OW 311
49690: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
49691: LD_VAR 0 9
49695: PPUSH
49696: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
49700: LD_VAR 0 9
49704: PPUSH
49705: LD_VAR 0 5
49709: PPUSH
49710: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
49714: LD_VAR 0 9
49718: PPUSH
49719: LD_VAR 0 5
49723: PPUSH
49724: CALL_OW 180
// end ; end ; unit_human :
49728: GO 49995
49730: LD_INT 1
49732: DOUBLE
49733: EQUAL
49734: IFTRUE 49738
49736: GO 49994
49738: POP
// begin b := IsInUnit ( i ) ;
49739: LD_ADDR_VAR 0 18
49743: PUSH
49744: LD_VAR 0 5
49748: PPUSH
49749: CALL_OW 310
49753: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
49754: LD_ADDR_VAR 0 19
49758: PUSH
49759: LD_VAR 0 18
49763: NOT
49764: PUSH
49765: LD_VAR 0 18
49769: PPUSH
49770: CALL_OW 266
49774: PUSH
49775: LD_INT 32
49777: PUSH
49778: LD_INT 31
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: IN
49785: OR
49786: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
49787: LD_VAR 0 16
49791: PUSH
49792: LD_VAR 0 2
49796: PPUSH
49797: LD_INT 21
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PPUSH
49807: CALL_OW 72
49811: PUSH
49812: LD_INT 1
49814: LESSEQUAL
49815: OR
49816: PUSH
49817: LD_VAR 0 19
49821: AND
49822: PUSH
49823: LD_VAR 0 5
49827: PUSH
49828: LD_VAR 0 17
49832: IN
49833: NOT
49834: AND
49835: IFFALSE 49928
// begin if b then
49837: LD_VAR 0 18
49841: IFFALSE 49890
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
49843: LD_VAR 0 18
49847: PPUSH
49848: LD_VAR 0 3
49852: PPUSH
49853: LD_VAR 0 18
49857: PPUSH
49858: CALL_OW 74
49862: PPUSH
49863: CALL_OW 296
49867: PUSH
49868: LD_INT 10
49870: LESS
49871: PUSH
49872: LD_VAR 0 18
49876: PPUSH
49877: CALL_OW 461
49881: PUSH
49882: LD_INT 7
49884: NONEQUAL
49885: AND
49886: IFFALSE 49890
// continue ;
49888: GO 49293
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
49890: LD_ADDR_VAR 0 17
49894: PUSH
49895: LD_VAR 0 17
49899: PPUSH
49900: LD_VAR 0 17
49904: PUSH
49905: LD_INT 1
49907: PLUS
49908: PPUSH
49909: LD_VAR 0 5
49913: PPUSH
49914: CALL_OW 1
49918: ST_TO_ADDR
// ComExitBuilding ( i ) ;
49919: LD_VAR 0 5
49923: PPUSH
49924: CALL_OW 122
// end ; if sold_defenders then
49928: LD_VAR 0 17
49932: IFFALSE 49992
// if i in sold_defenders then
49934: LD_VAR 0 5
49938: PUSH
49939: LD_VAR 0 17
49943: IN
49944: IFFALSE 49992
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
49946: LD_VAR 0 5
49950: PPUSH
49951: CALL_OW 314
49955: NOT
49956: PUSH
49957: LD_VAR 0 5
49961: PPUSH
49962: LD_VAR 0 13
49966: PPUSH
49967: CALL_OW 296
49971: PUSH
49972: LD_INT 30
49974: LESS
49975: AND
49976: IFFALSE 49992
// ComAttackUnit ( i , e ) ;
49978: LD_VAR 0 5
49982: PPUSH
49983: LD_VAR 0 13
49987: PPUSH
49988: CALL_OW 115
// end ; end ; end ;
49992: GO 49995
49994: POP
// if IsDead ( i ) then
49995: LD_VAR 0 5
49999: PPUSH
50000: CALL_OW 301
50004: IFFALSE 50022
// defenders := defenders diff i ;
50006: LD_ADDR_VAR 0 2
50010: PUSH
50011: LD_VAR 0 2
50015: PUSH
50016: LD_VAR 0 5
50020: DIFF
50021: ST_TO_ADDR
// end ;
50022: GO 49293
50024: POP
50025: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
50026: LD_VAR 0 3
50030: NOT
50031: PUSH
50032: LD_VAR 0 2
50036: NOT
50037: OR
50038: PUSH
50039: LD_EXP 49
50043: PUSH
50044: LD_VAR 0 1
50048: ARRAY
50049: NOT
50050: OR
50051: IFFALSE 49197
// MC_Reset ( base , 18 ) ;
50053: LD_VAR 0 1
50057: PPUSH
50058: LD_INT 18
50060: PPUSH
50061: CALL 20878 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
50065: LD_ADDR_VAR 0 2
50069: PUSH
50070: LD_VAR 0 2
50074: PUSH
50075: LD_VAR 0 2
50079: PPUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 25
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 25
50095: PUSH
50096: LD_INT 5
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 25
50105: PUSH
50106: LD_INT 8
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 25
50115: PUSH
50116: LD_INT 9
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: PPUSH
50130: CALL_OW 72
50134: DIFF
50135: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
50136: LD_VAR 0 3
50140: NOT
50141: PUSH
50142: LD_VAR 0 2
50146: PPUSH
50147: LD_INT 21
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PPUSH
50157: CALL_OW 72
50161: AND
50162: IFFALSE 50500
// begin tmp := FilterByTag ( defenders , 19 ) ;
50164: LD_ADDR_VAR 0 11
50168: PUSH
50169: LD_VAR 0 2
50173: PPUSH
50174: LD_INT 19
50176: PPUSH
50177: CALL 86941 0 2
50181: ST_TO_ADDR
// if tmp then
50182: LD_VAR 0 11
50186: IFFALSE 50256
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
50188: LD_ADDR_VAR 0 11
50192: PUSH
50193: LD_VAR 0 11
50197: PPUSH
50198: LD_INT 25
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PPUSH
50208: CALL_OW 72
50212: ST_TO_ADDR
// if tmp then
50213: LD_VAR 0 11
50217: IFFALSE 50256
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
50219: LD_ADDR_EXP 61
50223: PUSH
50224: LD_EXP 61
50228: PPUSH
50229: LD_VAR 0 1
50233: PPUSH
50234: LD_EXP 61
50238: PUSH
50239: LD_VAR 0 1
50243: ARRAY
50244: PUSH
50245: LD_VAR 0 11
50249: UNION
50250: PPUSH
50251: CALL_OW 1
50255: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
50256: LD_VAR 0 1
50260: PPUSH
50261: LD_INT 19
50263: PPUSH
50264: CALL 20878 0 2
// repeat wait ( 0 0$1 ) ;
50268: LD_INT 35
50270: PPUSH
50271: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
50275: LD_EXP 49
50279: PUSH
50280: LD_VAR 0 1
50284: ARRAY
50285: NOT
50286: PUSH
50287: LD_EXP 49
50291: PUSH
50292: LD_VAR 0 1
50296: ARRAY
50297: PUSH
50298: EMPTY
50299: EQUAL
50300: OR
50301: IFFALSE 50338
// begin for i in defenders do
50303: LD_ADDR_VAR 0 5
50307: PUSH
50308: LD_VAR 0 2
50312: PUSH
50313: FOR_IN
50314: IFFALSE 50327
// ComStop ( i ) ;
50316: LD_VAR 0 5
50320: PPUSH
50321: CALL_OW 141
50325: GO 50313
50327: POP
50328: POP
// defenders := [ ] ;
50329: LD_ADDR_VAR 0 2
50333: PUSH
50334: EMPTY
50335: ST_TO_ADDR
// exit ;
50336: GO 50512
// end ; for i in defenders do
50338: LD_ADDR_VAR 0 5
50342: PUSH
50343: LD_VAR 0 2
50347: PUSH
50348: FOR_IN
50349: IFFALSE 50438
// begin if not IsInArea ( i , mc_parking [ base ] ) then
50351: LD_VAR 0 5
50355: PPUSH
50356: LD_EXP 73
50360: PUSH
50361: LD_VAR 0 1
50365: ARRAY
50366: PPUSH
50367: CALL_OW 308
50371: NOT
50372: IFFALSE 50396
// ComMoveToArea ( i , mc_parking [ base ] ) else
50374: LD_VAR 0 5
50378: PPUSH
50379: LD_EXP 73
50383: PUSH
50384: LD_VAR 0 1
50388: ARRAY
50389: PPUSH
50390: CALL_OW 113
50394: GO 50436
// if GetControl ( i ) = control_manual then
50396: LD_VAR 0 5
50400: PPUSH
50401: CALL_OW 263
50405: PUSH
50406: LD_INT 1
50408: EQUAL
50409: IFFALSE 50436
// if IsDrivenBy ( i ) then
50411: LD_VAR 0 5
50415: PPUSH
50416: CALL_OW 311
50420: IFFALSE 50436
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
50422: LD_VAR 0 5
50426: PPUSH
50427: CALL_OW 311
50431: PPUSH
50432: CALL_OW 121
// end ;
50436: GO 50348
50438: POP
50439: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
50440: LD_VAR 0 2
50444: PPUSH
50445: LD_INT 95
50447: PUSH
50448: LD_EXP 73
50452: PUSH
50453: LD_VAR 0 1
50457: ARRAY
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PPUSH
50463: CALL_OW 72
50467: PUSH
50468: LD_VAR 0 2
50472: EQUAL
50473: PUSH
50474: LD_EXP 72
50478: PUSH
50479: LD_VAR 0 1
50483: ARRAY
50484: OR
50485: PUSH
50486: LD_EXP 49
50490: PUSH
50491: LD_VAR 0 1
50495: ARRAY
50496: NOT
50497: OR
50498: IFFALSE 50268
// end ; MC_Reset ( base , 20 ) ;
50500: LD_VAR 0 1
50504: PPUSH
50505: LD_INT 20
50507: PPUSH
50508: CALL 20878 0 2
// end ;
50512: LD_VAR 0 4
50516: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
50517: LD_INT 0
50519: PPUSH
50520: PPUSH
50521: PPUSH
50522: PPUSH
// result := false ;
50523: LD_ADDR_VAR 0 2
50527: PUSH
50528: LD_INT 0
50530: ST_TO_ADDR
// side := GetSide ( unit ) ;
50531: LD_ADDR_VAR 0 3
50535: PUSH
50536: LD_VAR 0 1
50540: PPUSH
50541: CALL_OW 255
50545: ST_TO_ADDR
// nat := GetNation ( unit ) ;
50546: LD_ADDR_VAR 0 4
50550: PUSH
50551: LD_VAR 0 1
50555: PPUSH
50556: CALL_OW 248
50560: ST_TO_ADDR
// case nat of 1 :
50561: LD_VAR 0 4
50565: PUSH
50566: LD_INT 1
50568: DOUBLE
50569: EQUAL
50570: IFTRUE 50574
50572: GO 50585
50574: POP
// tech := tech_lassight ; 2 :
50575: LD_ADDR_VAR 0 5
50579: PUSH
50580: LD_INT 12
50582: ST_TO_ADDR
50583: GO 50624
50585: LD_INT 2
50587: DOUBLE
50588: EQUAL
50589: IFTRUE 50593
50591: GO 50604
50593: POP
// tech := tech_mortar ; 3 :
50594: LD_ADDR_VAR 0 5
50598: PUSH
50599: LD_INT 41
50601: ST_TO_ADDR
50602: GO 50624
50604: LD_INT 3
50606: DOUBLE
50607: EQUAL
50608: IFTRUE 50612
50610: GO 50623
50612: POP
// tech := tech_bazooka ; end ;
50613: LD_ADDR_VAR 0 5
50617: PUSH
50618: LD_INT 44
50620: ST_TO_ADDR
50621: GO 50624
50623: POP
// if Researched ( side , tech ) then
50624: LD_VAR 0 3
50628: PPUSH
50629: LD_VAR 0 5
50633: PPUSH
50634: CALL_OW 325
50638: IFFALSE 50665
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
50640: LD_ADDR_VAR 0 2
50644: PUSH
50645: LD_INT 5
50647: PUSH
50648: LD_INT 8
50650: PUSH
50651: LD_INT 9
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: PUSH
50659: LD_VAR 0 4
50663: ARRAY
50664: ST_TO_ADDR
// end ;
50665: LD_VAR 0 2
50669: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
50670: LD_INT 0
50672: PPUSH
50673: PPUSH
50674: PPUSH
// if not mines then
50675: LD_VAR 0 2
50679: NOT
50680: IFFALSE 50684
// exit ;
50682: GO 50828
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50684: LD_ADDR_VAR 0 5
50688: PUSH
50689: LD_INT 81
50691: PUSH
50692: LD_VAR 0 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: LD_INT 21
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PPUSH
50722: CALL_OW 69
50726: ST_TO_ADDR
// for i in mines do
50727: LD_ADDR_VAR 0 4
50731: PUSH
50732: LD_VAR 0 2
50736: PUSH
50737: FOR_IN
50738: IFFALSE 50826
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
50740: LD_VAR 0 4
50744: PUSH
50745: LD_INT 1
50747: ARRAY
50748: PPUSH
50749: LD_VAR 0 4
50753: PUSH
50754: LD_INT 2
50756: ARRAY
50757: PPUSH
50758: CALL_OW 458
50762: NOT
50763: IFFALSE 50767
// continue ;
50765: GO 50737
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
50767: LD_VAR 0 4
50771: PUSH
50772: LD_INT 1
50774: ARRAY
50775: PPUSH
50776: LD_VAR 0 4
50780: PUSH
50781: LD_INT 2
50783: ARRAY
50784: PPUSH
50785: CALL_OW 428
50789: PUSH
50790: LD_VAR 0 5
50794: IN
50795: IFFALSE 50824
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
50797: LD_VAR 0 4
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: PPUSH
50806: LD_VAR 0 4
50810: PUSH
50811: LD_INT 2
50813: ARRAY
50814: PPUSH
50815: LD_VAR 0 1
50819: PPUSH
50820: CALL_OW 456
// end ;
50824: GO 50737
50826: POP
50827: POP
// end ;
50828: LD_VAR 0 3
50832: RET
// export function Count ( array ) ; var i ; begin
50833: LD_INT 0
50835: PPUSH
50836: PPUSH
// result := 0 ;
50837: LD_ADDR_VAR 0 2
50841: PUSH
50842: LD_INT 0
50844: ST_TO_ADDR
// for i in array do
50845: LD_ADDR_VAR 0 3
50849: PUSH
50850: LD_VAR 0 1
50854: PUSH
50855: FOR_IN
50856: IFFALSE 50880
// if i then
50858: LD_VAR 0 3
50862: IFFALSE 50878
// result := result + 1 ;
50864: LD_ADDR_VAR 0 2
50868: PUSH
50869: LD_VAR 0 2
50873: PUSH
50874: LD_INT 1
50876: PLUS
50877: ST_TO_ADDR
50878: GO 50855
50880: POP
50881: POP
// end ;
50882: LD_VAR 0 2
50886: RET
// export function IsEmpty ( building ) ; begin
50887: LD_INT 0
50889: PPUSH
// if not building then
50890: LD_VAR 0 1
50894: NOT
50895: IFFALSE 50899
// exit ;
50897: GO 50942
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
50899: LD_ADDR_VAR 0 2
50903: PUSH
50904: LD_VAR 0 1
50908: PUSH
50909: LD_INT 22
50911: PUSH
50912: LD_VAR 0 1
50916: PPUSH
50917: CALL_OW 255
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 58
50928: PUSH
50929: EMPTY
50930: LIST
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PPUSH
50936: CALL_OW 69
50940: IN
50941: ST_TO_ADDR
// end ;
50942: LD_VAR 0 2
50946: RET
// export function IsNotFull ( building ) ; begin
50947: LD_INT 0
50949: PPUSH
// if not building then
50950: LD_VAR 0 1
50954: NOT
50955: IFFALSE 50959
// exit ;
50957: GO 50978
// result := UnitsInside ( building ) < 6 ;
50959: LD_ADDR_VAR 0 2
50963: PUSH
50964: LD_VAR 0 1
50968: PPUSH
50969: CALL_OW 313
50973: PUSH
50974: LD_INT 6
50976: LESS
50977: ST_TO_ADDR
// end ;
50978: LD_VAR 0 2
50982: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
50983: LD_INT 0
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
// tmp := [ ] ;
50989: LD_ADDR_VAR 0 3
50993: PUSH
50994: EMPTY
50995: ST_TO_ADDR
// list := [ ] ;
50996: LD_ADDR_VAR 0 5
51000: PUSH
51001: EMPTY
51002: ST_TO_ADDR
// for i = 16 to 25 do
51003: LD_ADDR_VAR 0 4
51007: PUSH
51008: DOUBLE
51009: LD_INT 16
51011: DEC
51012: ST_TO_ADDR
51013: LD_INT 25
51015: PUSH
51016: FOR_TO
51017: IFFALSE 51090
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_VAR 0 3
51028: PUSH
51029: LD_INT 22
51031: PUSH
51032: LD_VAR 0 1
51036: PPUSH
51037: CALL_OW 255
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 91
51048: PUSH
51049: LD_VAR 0 1
51053: PUSH
51054: LD_INT 6
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 30
51064: PUSH
51065: LD_VAR 0 4
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: PUSH
51079: EMPTY
51080: LIST
51081: PPUSH
51082: CALL_OW 69
51086: ADD
51087: ST_TO_ADDR
51088: GO 51016
51090: POP
51091: POP
// for i = 1 to tmp do
51092: LD_ADDR_VAR 0 4
51096: PUSH
51097: DOUBLE
51098: LD_INT 1
51100: DEC
51101: ST_TO_ADDR
51102: LD_VAR 0 3
51106: PUSH
51107: FOR_TO
51108: IFFALSE 51196
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
51110: LD_ADDR_VAR 0 5
51114: PUSH
51115: LD_VAR 0 5
51119: PUSH
51120: LD_VAR 0 3
51124: PUSH
51125: LD_VAR 0 4
51129: ARRAY
51130: PPUSH
51131: CALL_OW 266
51135: PUSH
51136: LD_VAR 0 3
51140: PUSH
51141: LD_VAR 0 4
51145: ARRAY
51146: PPUSH
51147: CALL_OW 250
51151: PUSH
51152: LD_VAR 0 3
51156: PUSH
51157: LD_VAR 0 4
51161: ARRAY
51162: PPUSH
51163: CALL_OW 251
51167: PUSH
51168: LD_VAR 0 3
51172: PUSH
51173: LD_VAR 0 4
51177: ARRAY
51178: PPUSH
51179: CALL_OW 254
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: PUSH
51190: EMPTY
51191: LIST
51192: ADD
51193: ST_TO_ADDR
51194: GO 51107
51196: POP
51197: POP
// result := list ;
51198: LD_ADDR_VAR 0 2
51202: PUSH
51203: LD_VAR 0 5
51207: ST_TO_ADDR
// end ;
51208: LD_VAR 0 2
51212: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
51213: LD_INT 0
51215: PPUSH
51216: PPUSH
51217: PPUSH
51218: PPUSH
51219: PPUSH
51220: PPUSH
51221: PPUSH
// if not factory then
51222: LD_VAR 0 1
51226: NOT
51227: IFFALSE 51231
// exit ;
51229: GO 51824
// if control = control_apeman then
51231: LD_VAR 0 4
51235: PUSH
51236: LD_INT 5
51238: EQUAL
51239: IFFALSE 51348
// begin tmp := UnitsInside ( factory ) ;
51241: LD_ADDR_VAR 0 8
51245: PUSH
51246: LD_VAR 0 1
51250: PPUSH
51251: CALL_OW 313
51255: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
51256: LD_VAR 0 8
51260: PPUSH
51261: LD_INT 25
51263: PUSH
51264: LD_INT 12
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PPUSH
51271: CALL_OW 72
51275: NOT
51276: IFFALSE 51286
// control := control_manual ;
51278: LD_ADDR_VAR 0 4
51282: PUSH
51283: LD_INT 1
51285: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
51286: LD_ADDR_VAR 0 8
51290: PUSH
51291: LD_VAR 0 1
51295: PPUSH
51296: CALL 50983 0 1
51300: ST_TO_ADDR
// if tmp then
51301: LD_VAR 0 8
51305: IFFALSE 51348
// begin for i in tmp do
51307: LD_ADDR_VAR 0 7
51311: PUSH
51312: LD_VAR 0 8
51316: PUSH
51317: FOR_IN
51318: IFFALSE 51346
// if i [ 1 ] = b_ext_radio then
51320: LD_VAR 0 7
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: PUSH
51329: LD_INT 22
51331: EQUAL
51332: IFFALSE 51344
// begin control := control_remote ;
51334: LD_ADDR_VAR 0 4
51338: PUSH
51339: LD_INT 2
51341: ST_TO_ADDR
// break ;
51342: GO 51346
// end ;
51344: GO 51317
51346: POP
51347: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51348: LD_VAR 0 1
51352: PPUSH
51353: LD_VAR 0 2
51357: PPUSH
51358: LD_VAR 0 3
51362: PPUSH
51363: LD_VAR 0 4
51367: PPUSH
51368: LD_VAR 0 5
51372: PPUSH
51373: CALL_OW 448
51377: IFFALSE 51412
// begin result := [ chassis , engine , control , weapon ] ;
51379: LD_ADDR_VAR 0 6
51383: PUSH
51384: LD_VAR 0 2
51388: PUSH
51389: LD_VAR 0 3
51393: PUSH
51394: LD_VAR 0 4
51398: PUSH
51399: LD_VAR 0 5
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: ST_TO_ADDR
// exit ;
51410: GO 51824
// end ; _chassis := AvailableChassisList ( factory ) ;
51412: LD_ADDR_VAR 0 9
51416: PUSH
51417: LD_VAR 0 1
51421: PPUSH
51422: CALL_OW 475
51426: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
51427: LD_ADDR_VAR 0 11
51431: PUSH
51432: LD_VAR 0 1
51436: PPUSH
51437: CALL_OW 476
51441: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
51442: LD_ADDR_VAR 0 12
51446: PUSH
51447: LD_VAR 0 1
51451: PPUSH
51452: CALL_OW 477
51456: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
51457: LD_ADDR_VAR 0 10
51461: PUSH
51462: LD_VAR 0 1
51466: PPUSH
51467: CALL_OW 478
51471: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
51472: LD_VAR 0 9
51476: NOT
51477: PUSH
51478: LD_VAR 0 11
51482: NOT
51483: OR
51484: PUSH
51485: LD_VAR 0 12
51489: NOT
51490: OR
51491: PUSH
51492: LD_VAR 0 10
51496: NOT
51497: OR
51498: IFFALSE 51533
// begin result := [ chassis , engine , control , weapon ] ;
51500: LD_ADDR_VAR 0 6
51504: PUSH
51505: LD_VAR 0 2
51509: PUSH
51510: LD_VAR 0 3
51514: PUSH
51515: LD_VAR 0 4
51519: PUSH
51520: LD_VAR 0 5
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// exit ;
51531: GO 51824
// end ; if not chassis in _chassis then
51533: LD_VAR 0 2
51537: PUSH
51538: LD_VAR 0 9
51542: IN
51543: NOT
51544: IFFALSE 51570
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
51546: LD_ADDR_VAR 0 2
51550: PUSH
51551: LD_VAR 0 9
51555: PUSH
51556: LD_INT 1
51558: PPUSH
51559: LD_VAR 0 9
51563: PPUSH
51564: CALL_OW 12
51568: ARRAY
51569: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
51570: LD_VAR 0 2
51574: PPUSH
51575: LD_VAR 0 3
51579: PPUSH
51580: CALL 51829 0 2
51584: NOT
51585: IFFALSE 51644
// repeat engine := _engine [ 1 ] ;
51587: LD_ADDR_VAR 0 3
51591: PUSH
51592: LD_VAR 0 11
51596: PUSH
51597: LD_INT 1
51599: ARRAY
51600: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
51601: LD_ADDR_VAR 0 11
51605: PUSH
51606: LD_VAR 0 11
51610: PPUSH
51611: LD_INT 1
51613: PPUSH
51614: CALL_OW 3
51618: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
51619: LD_VAR 0 2
51623: PPUSH
51624: LD_VAR 0 3
51628: PPUSH
51629: CALL 51829 0 2
51633: PUSH
51634: LD_VAR 0 11
51638: PUSH
51639: EMPTY
51640: EQUAL
51641: OR
51642: IFFALSE 51587
// if not control in _control then
51644: LD_VAR 0 4
51648: PUSH
51649: LD_VAR 0 12
51653: IN
51654: NOT
51655: IFFALSE 51681
// control := _control [ rand ( 1 , _control ) ] ;
51657: LD_ADDR_VAR 0 4
51661: PUSH
51662: LD_VAR 0 12
51666: PUSH
51667: LD_INT 1
51669: PPUSH
51670: LD_VAR 0 12
51674: PPUSH
51675: CALL_OW 12
51679: ARRAY
51680: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
51681: LD_VAR 0 2
51685: PPUSH
51686: LD_VAR 0 5
51690: PPUSH
51691: CALL 52049 0 2
51695: NOT
51696: IFFALSE 51755
// repeat weapon := _weapon [ 1 ] ;
51698: LD_ADDR_VAR 0 5
51702: PUSH
51703: LD_VAR 0 10
51707: PUSH
51708: LD_INT 1
51710: ARRAY
51711: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
51712: LD_ADDR_VAR 0 10
51716: PUSH
51717: LD_VAR 0 10
51721: PPUSH
51722: LD_INT 1
51724: PPUSH
51725: CALL_OW 3
51729: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
51730: LD_VAR 0 2
51734: PPUSH
51735: LD_VAR 0 5
51739: PPUSH
51740: CALL 52049 0 2
51744: PUSH
51745: LD_VAR 0 10
51749: PUSH
51750: EMPTY
51751: EQUAL
51752: OR
51753: IFFALSE 51698
// result := [ ] ;
51755: LD_ADDR_VAR 0 6
51759: PUSH
51760: EMPTY
51761: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51762: LD_VAR 0 1
51766: PPUSH
51767: LD_VAR 0 2
51771: PPUSH
51772: LD_VAR 0 3
51776: PPUSH
51777: LD_VAR 0 4
51781: PPUSH
51782: LD_VAR 0 5
51786: PPUSH
51787: CALL_OW 448
51791: IFFALSE 51824
// result := [ chassis , engine , control , weapon ] ;
51793: LD_ADDR_VAR 0 6
51797: PUSH
51798: LD_VAR 0 2
51802: PUSH
51803: LD_VAR 0 3
51807: PUSH
51808: LD_VAR 0 4
51812: PUSH
51813: LD_VAR 0 5
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// end ;
51824: LD_VAR 0 6
51828: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
51829: LD_INT 0
51831: PPUSH
// if not chassis or not engine then
51832: LD_VAR 0 1
51836: NOT
51837: PUSH
51838: LD_VAR 0 2
51842: NOT
51843: OR
51844: IFFALSE 51848
// exit ;
51846: GO 52044
// case engine of engine_solar :
51848: LD_VAR 0 2
51852: PUSH
51853: LD_INT 2
51855: DOUBLE
51856: EQUAL
51857: IFTRUE 51861
51859: GO 51899
51861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
51862: LD_ADDR_VAR 0 3
51866: PUSH
51867: LD_INT 11
51869: PUSH
51870: LD_INT 12
51872: PUSH
51873: LD_INT 13
51875: PUSH
51876: LD_INT 14
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
51897: GO 52028
51899: LD_INT 1
51901: DOUBLE
51902: EQUAL
51903: IFTRUE 51907
51905: GO 51969
51907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
51908: LD_ADDR_VAR 0 3
51912: PUSH
51913: LD_INT 11
51915: PUSH
51916: LD_INT 12
51918: PUSH
51919: LD_INT 13
51921: PUSH
51922: LD_INT 14
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: LD_INT 4
51936: PUSH
51937: LD_INT 5
51939: PUSH
51940: LD_INT 21
51942: PUSH
51943: LD_INT 23
51945: PUSH
51946: LD_INT 22
51948: PUSH
51949: LD_INT 24
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
51967: GO 52028
51969: LD_INT 3
51971: DOUBLE
51972: EQUAL
51973: IFTRUE 51977
51975: GO 52027
51977: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51978: LD_ADDR_VAR 0 3
51982: PUSH
51983: LD_INT 13
51985: PUSH
51986: LD_INT 14
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 4
51997: PUSH
51998: LD_INT 5
52000: PUSH
52001: LD_INT 21
52003: PUSH
52004: LD_INT 22
52006: PUSH
52007: LD_INT 23
52009: PUSH
52010: LD_INT 24
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: ST_TO_ADDR
52025: GO 52028
52027: POP
// result := ( chassis in result ) ;
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_VAR 0 1
52037: PUSH
52038: LD_VAR 0 3
52042: IN
52043: ST_TO_ADDR
// end ;
52044: LD_VAR 0 3
52048: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
52049: LD_INT 0
52051: PPUSH
// if not chassis or not weapon then
52052: LD_VAR 0 1
52056: NOT
52057: PUSH
52058: LD_VAR 0 2
52062: NOT
52063: OR
52064: IFFALSE 52068
// exit ;
52066: GO 53094
// case weapon of us_machine_gun :
52068: LD_VAR 0 2
52072: PUSH
52073: LD_INT 2
52075: DOUBLE
52076: EQUAL
52077: IFTRUE 52081
52079: GO 52111
52081: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
52082: LD_ADDR_VAR 0 3
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: LD_INT 4
52098: PUSH
52099: LD_INT 5
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
52109: GO 53078
52111: LD_INT 3
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52119
52117: GO 52149
52119: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
52120: LD_ADDR_VAR 0 3
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: LD_INT 4
52136: PUSH
52137: LD_INT 5
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
52147: GO 53078
52149: LD_INT 11
52151: DOUBLE
52152: EQUAL
52153: IFTRUE 52157
52155: GO 52187
52157: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
52158: LD_ADDR_VAR 0 3
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 4
52174: PUSH
52175: LD_INT 5
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: ST_TO_ADDR
52185: GO 53078
52187: LD_INT 4
52189: DOUBLE
52190: EQUAL
52191: IFTRUE 52195
52193: GO 52221
52195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
52196: LD_ADDR_VAR 0 3
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: LD_INT 4
52209: PUSH
52210: LD_INT 5
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
52219: GO 53078
52221: LD_INT 5
52223: DOUBLE
52224: EQUAL
52225: IFTRUE 52229
52227: GO 52255
52229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
52230: LD_ADDR_VAR 0 3
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: LD_INT 4
52243: PUSH
52244: LD_INT 5
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
52253: GO 53078
52255: LD_INT 9
52257: DOUBLE
52258: EQUAL
52259: IFTRUE 52263
52261: GO 52289
52263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
52264: LD_ADDR_VAR 0 3
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: LD_INT 5
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: ST_TO_ADDR
52287: GO 53078
52289: LD_INT 7
52291: DOUBLE
52292: EQUAL
52293: IFTRUE 52297
52295: GO 52323
52297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
52298: LD_ADDR_VAR 0 3
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: LD_INT 4
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: ST_TO_ADDR
52321: GO 53078
52323: LD_INT 12
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52331
52329: GO 52357
52331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
52332: LD_ADDR_VAR 0 3
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: LD_INT 4
52345: PUSH
52346: LD_INT 5
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
52355: GO 53078
52357: LD_INT 13
52359: DOUBLE
52360: EQUAL
52361: IFTRUE 52365
52363: GO 52391
52365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
52366: LD_ADDR_VAR 0 3
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 4
52379: PUSH
52380: LD_INT 5
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
52389: GO 53078
52391: LD_INT 14
52393: DOUBLE
52394: EQUAL
52395: IFTRUE 52399
52397: GO 52417
52399: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
52400: LD_ADDR_VAR 0 3
52404: PUSH
52405: LD_INT 4
52407: PUSH
52408: LD_INT 5
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: ST_TO_ADDR
52415: GO 53078
52417: LD_INT 6
52419: DOUBLE
52420: EQUAL
52421: IFTRUE 52425
52423: GO 52443
52425: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
52426: LD_ADDR_VAR 0 3
52430: PUSH
52431: LD_INT 4
52433: PUSH
52434: LD_INT 5
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: ST_TO_ADDR
52441: GO 53078
52443: LD_INT 10
52445: DOUBLE
52446: EQUAL
52447: IFTRUE 52451
52449: GO 52469
52451: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
52452: LD_ADDR_VAR 0 3
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: LD_INT 5
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: ST_TO_ADDR
52467: GO 53078
52469: LD_INT 22
52471: DOUBLE
52472: EQUAL
52473: IFTRUE 52477
52475: GO 52503
52477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
52478: LD_ADDR_VAR 0 3
52482: PUSH
52483: LD_INT 11
52485: PUSH
52486: LD_INT 12
52488: PUSH
52489: LD_INT 13
52491: PUSH
52492: LD_INT 14
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: ST_TO_ADDR
52501: GO 53078
52503: LD_INT 23
52505: DOUBLE
52506: EQUAL
52507: IFTRUE 52511
52509: GO 52537
52511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
52512: LD_ADDR_VAR 0 3
52516: PUSH
52517: LD_INT 11
52519: PUSH
52520: LD_INT 12
52522: PUSH
52523: LD_INT 13
52525: PUSH
52526: LD_INT 14
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
52535: GO 53078
52537: LD_INT 24
52539: DOUBLE
52540: EQUAL
52541: IFTRUE 52545
52543: GO 52571
52545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
52546: LD_ADDR_VAR 0 3
52550: PUSH
52551: LD_INT 11
52553: PUSH
52554: LD_INT 12
52556: PUSH
52557: LD_INT 13
52559: PUSH
52560: LD_INT 14
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
52569: GO 53078
52571: LD_INT 30
52573: DOUBLE
52574: EQUAL
52575: IFTRUE 52579
52577: GO 52605
52579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
52580: LD_ADDR_VAR 0 3
52584: PUSH
52585: LD_INT 11
52587: PUSH
52588: LD_INT 12
52590: PUSH
52591: LD_INT 13
52593: PUSH
52594: LD_INT 14
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: ST_TO_ADDR
52603: GO 53078
52605: LD_INT 25
52607: DOUBLE
52608: EQUAL
52609: IFTRUE 52613
52611: GO 52631
52613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
52614: LD_ADDR_VAR 0 3
52618: PUSH
52619: LD_INT 13
52621: PUSH
52622: LD_INT 14
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: ST_TO_ADDR
52629: GO 53078
52631: LD_INT 27
52633: DOUBLE
52634: EQUAL
52635: IFTRUE 52639
52637: GO 52657
52639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_INT 13
52647: PUSH
52648: LD_INT 14
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: ST_TO_ADDR
52655: GO 53078
52657: LD_INT 28
52659: DOUBLE
52660: EQUAL
52661: IFTRUE 52665
52663: GO 52683
52665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
52666: LD_ADDR_VAR 0 3
52670: PUSH
52671: LD_INT 13
52673: PUSH
52674: LD_INT 14
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: ST_TO_ADDR
52681: GO 53078
52683: LD_INT 29
52685: DOUBLE
52686: EQUAL
52687: IFTRUE 52691
52689: GO 52709
52691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
52692: LD_ADDR_VAR 0 3
52696: PUSH
52697: LD_INT 13
52699: PUSH
52700: LD_INT 14
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: ST_TO_ADDR
52707: GO 53078
52709: LD_INT 31
52711: DOUBLE
52712: EQUAL
52713: IFTRUE 52717
52715: GO 52735
52717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
52718: LD_ADDR_VAR 0 3
52722: PUSH
52723: LD_INT 13
52725: PUSH
52726: LD_INT 14
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: ST_TO_ADDR
52733: GO 53078
52735: LD_INT 26
52737: DOUBLE
52738: EQUAL
52739: IFTRUE 52743
52741: GO 52761
52743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
52744: LD_ADDR_VAR 0 3
52748: PUSH
52749: LD_INT 13
52751: PUSH
52752: LD_INT 14
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: ST_TO_ADDR
52759: GO 53078
52761: LD_INT 42
52763: DOUBLE
52764: EQUAL
52765: IFTRUE 52769
52767: GO 52795
52769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
52770: LD_ADDR_VAR 0 3
52774: PUSH
52775: LD_INT 21
52777: PUSH
52778: LD_INT 22
52780: PUSH
52781: LD_INT 23
52783: PUSH
52784: LD_INT 24
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: ST_TO_ADDR
52793: GO 53078
52795: LD_INT 43
52797: DOUBLE
52798: EQUAL
52799: IFTRUE 52803
52801: GO 52829
52803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
52804: LD_ADDR_VAR 0 3
52808: PUSH
52809: LD_INT 21
52811: PUSH
52812: LD_INT 22
52814: PUSH
52815: LD_INT 23
52817: PUSH
52818: LD_INT 24
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: ST_TO_ADDR
52827: GO 53078
52829: LD_INT 44
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52837
52835: GO 52863
52837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
52838: LD_ADDR_VAR 0 3
52842: PUSH
52843: LD_INT 21
52845: PUSH
52846: LD_INT 22
52848: PUSH
52849: LD_INT 23
52851: PUSH
52852: LD_INT 24
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
52861: GO 53078
52863: LD_INT 45
52865: DOUBLE
52866: EQUAL
52867: IFTRUE 52871
52869: GO 52897
52871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
52872: LD_ADDR_VAR 0 3
52876: PUSH
52877: LD_INT 21
52879: PUSH
52880: LD_INT 22
52882: PUSH
52883: LD_INT 23
52885: PUSH
52886: LD_INT 24
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: ST_TO_ADDR
52895: GO 53078
52897: LD_INT 49
52899: DOUBLE
52900: EQUAL
52901: IFTRUE 52905
52903: GO 52931
52905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
52906: LD_ADDR_VAR 0 3
52910: PUSH
52911: LD_INT 21
52913: PUSH
52914: LD_INT 22
52916: PUSH
52917: LD_INT 23
52919: PUSH
52920: LD_INT 24
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
52929: GO 53078
52931: LD_INT 51
52933: DOUBLE
52934: EQUAL
52935: IFTRUE 52939
52937: GO 52965
52939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
52940: LD_ADDR_VAR 0 3
52944: PUSH
52945: LD_INT 21
52947: PUSH
52948: LD_INT 22
52950: PUSH
52951: LD_INT 23
52953: PUSH
52954: LD_INT 24
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: ST_TO_ADDR
52963: GO 53078
52965: LD_INT 52
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52973
52971: GO 52999
52973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
52974: LD_ADDR_VAR 0 3
52978: PUSH
52979: LD_INT 21
52981: PUSH
52982: LD_INT 22
52984: PUSH
52985: LD_INT 23
52987: PUSH
52988: LD_INT 24
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
52997: GO 53078
52999: LD_INT 53
53001: DOUBLE
53002: EQUAL
53003: IFTRUE 53007
53005: GO 53025
53007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
53008: LD_ADDR_VAR 0 3
53012: PUSH
53013: LD_INT 23
53015: PUSH
53016: LD_INT 24
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: ST_TO_ADDR
53023: GO 53078
53025: LD_INT 46
53027: DOUBLE
53028: EQUAL
53029: IFTRUE 53033
53031: GO 53051
53033: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
53034: LD_ADDR_VAR 0 3
53038: PUSH
53039: LD_INT 23
53041: PUSH
53042: LD_INT 24
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: ST_TO_ADDR
53049: GO 53078
53051: LD_INT 47
53053: DOUBLE
53054: EQUAL
53055: IFTRUE 53059
53057: GO 53077
53059: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53060: LD_ADDR_VAR 0 3
53064: PUSH
53065: LD_INT 23
53067: PUSH
53068: LD_INT 24
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: ST_TO_ADDR
53075: GO 53078
53077: POP
// result := ( chassis in result ) ;
53078: LD_ADDR_VAR 0 3
53082: PUSH
53083: LD_VAR 0 1
53087: PUSH
53088: LD_VAR 0 3
53092: IN
53093: ST_TO_ADDR
// end ;
53094: LD_VAR 0 3
53098: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
53099: LD_INT 0
53101: PPUSH
53102: PPUSH
53103: PPUSH
53104: PPUSH
53105: PPUSH
53106: PPUSH
53107: PPUSH
// result := array ;
53108: LD_ADDR_VAR 0 5
53112: PUSH
53113: LD_VAR 0 1
53117: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
53118: LD_VAR 0 1
53122: NOT
53123: PUSH
53124: LD_VAR 0 2
53128: NOT
53129: OR
53130: PUSH
53131: LD_VAR 0 3
53135: NOT
53136: OR
53137: PUSH
53138: LD_VAR 0 2
53142: PUSH
53143: LD_VAR 0 1
53147: GREATER
53148: OR
53149: PUSH
53150: LD_VAR 0 3
53154: PUSH
53155: LD_VAR 0 1
53159: GREATER
53160: OR
53161: IFFALSE 53165
// exit ;
53163: GO 53461
// if direction then
53165: LD_VAR 0 4
53169: IFFALSE 53233
// begin d := 1 ;
53171: LD_ADDR_VAR 0 9
53175: PUSH
53176: LD_INT 1
53178: ST_TO_ADDR
// if i_from > i_to then
53179: LD_VAR 0 2
53183: PUSH
53184: LD_VAR 0 3
53188: GREATER
53189: IFFALSE 53215
// length := ( array - i_from ) + i_to else
53191: LD_ADDR_VAR 0 11
53195: PUSH
53196: LD_VAR 0 1
53200: PUSH
53201: LD_VAR 0 2
53205: MINUS
53206: PUSH
53207: LD_VAR 0 3
53211: PLUS
53212: ST_TO_ADDR
53213: GO 53231
// length := i_to - i_from ;
53215: LD_ADDR_VAR 0 11
53219: PUSH
53220: LD_VAR 0 3
53224: PUSH
53225: LD_VAR 0 2
53229: MINUS
53230: ST_TO_ADDR
// end else
53231: GO 53294
// begin d := - 1 ;
53233: LD_ADDR_VAR 0 9
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: ST_TO_ADDR
// if i_from > i_to then
53242: LD_VAR 0 2
53246: PUSH
53247: LD_VAR 0 3
53251: GREATER
53252: IFFALSE 53272
// length := i_from - i_to else
53254: LD_ADDR_VAR 0 11
53258: PUSH
53259: LD_VAR 0 2
53263: PUSH
53264: LD_VAR 0 3
53268: MINUS
53269: ST_TO_ADDR
53270: GO 53294
// length := ( array - i_to ) + i_from ;
53272: LD_ADDR_VAR 0 11
53276: PUSH
53277: LD_VAR 0 1
53281: PUSH
53282: LD_VAR 0 3
53286: MINUS
53287: PUSH
53288: LD_VAR 0 2
53292: PLUS
53293: ST_TO_ADDR
// end ; if not length then
53294: LD_VAR 0 11
53298: NOT
53299: IFFALSE 53303
// exit ;
53301: GO 53461
// tmp := array ;
53303: LD_ADDR_VAR 0 10
53307: PUSH
53308: LD_VAR 0 1
53312: ST_TO_ADDR
// for i = 1 to length do
53313: LD_ADDR_VAR 0 6
53317: PUSH
53318: DOUBLE
53319: LD_INT 1
53321: DEC
53322: ST_TO_ADDR
53323: LD_VAR 0 11
53327: PUSH
53328: FOR_TO
53329: IFFALSE 53449
// begin for j = 1 to array do
53331: LD_ADDR_VAR 0 7
53335: PUSH
53336: DOUBLE
53337: LD_INT 1
53339: DEC
53340: ST_TO_ADDR
53341: LD_VAR 0 1
53345: PUSH
53346: FOR_TO
53347: IFFALSE 53435
// begin k := j + d ;
53349: LD_ADDR_VAR 0 8
53353: PUSH
53354: LD_VAR 0 7
53358: PUSH
53359: LD_VAR 0 9
53363: PLUS
53364: ST_TO_ADDR
// if k > array then
53365: LD_VAR 0 8
53369: PUSH
53370: LD_VAR 0 1
53374: GREATER
53375: IFFALSE 53385
// k := 1 ;
53377: LD_ADDR_VAR 0 8
53381: PUSH
53382: LD_INT 1
53384: ST_TO_ADDR
// if not k then
53385: LD_VAR 0 8
53389: NOT
53390: IFFALSE 53402
// k := array ;
53392: LD_ADDR_VAR 0 8
53396: PUSH
53397: LD_VAR 0 1
53401: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
53402: LD_ADDR_VAR 0 10
53406: PUSH
53407: LD_VAR 0 10
53411: PPUSH
53412: LD_VAR 0 8
53416: PPUSH
53417: LD_VAR 0 1
53421: PUSH
53422: LD_VAR 0 7
53426: ARRAY
53427: PPUSH
53428: CALL_OW 1
53432: ST_TO_ADDR
// end ;
53433: GO 53346
53435: POP
53436: POP
// array := tmp ;
53437: LD_ADDR_VAR 0 1
53441: PUSH
53442: LD_VAR 0 10
53446: ST_TO_ADDR
// end ;
53447: GO 53328
53449: POP
53450: POP
// result := array ;
53451: LD_ADDR_VAR 0 5
53455: PUSH
53456: LD_VAR 0 1
53460: ST_TO_ADDR
// end ;
53461: LD_VAR 0 5
53465: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
53466: LD_INT 0
53468: PPUSH
53469: PPUSH
// result := 0 ;
53470: LD_ADDR_VAR 0 3
53474: PUSH
53475: LD_INT 0
53477: ST_TO_ADDR
// if not array or not value in array then
53478: LD_VAR 0 1
53482: NOT
53483: PUSH
53484: LD_VAR 0 2
53488: PUSH
53489: LD_VAR 0 1
53493: IN
53494: NOT
53495: OR
53496: IFFALSE 53500
// exit ;
53498: GO 53554
// for i = 1 to array do
53500: LD_ADDR_VAR 0 4
53504: PUSH
53505: DOUBLE
53506: LD_INT 1
53508: DEC
53509: ST_TO_ADDR
53510: LD_VAR 0 1
53514: PUSH
53515: FOR_TO
53516: IFFALSE 53552
// if value = array [ i ] then
53518: LD_VAR 0 2
53522: PUSH
53523: LD_VAR 0 1
53527: PUSH
53528: LD_VAR 0 4
53532: ARRAY
53533: EQUAL
53534: IFFALSE 53550
// begin result := i ;
53536: LD_ADDR_VAR 0 3
53540: PUSH
53541: LD_VAR 0 4
53545: ST_TO_ADDR
// exit ;
53546: POP
53547: POP
53548: GO 53554
// end ;
53550: GO 53515
53552: POP
53553: POP
// end ;
53554: LD_VAR 0 3
53558: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
53559: LD_INT 0
53561: PPUSH
// vc_chassis := chassis ;
53562: LD_ADDR_OWVAR 37
53566: PUSH
53567: LD_VAR 0 1
53571: ST_TO_ADDR
// vc_engine := engine ;
53572: LD_ADDR_OWVAR 39
53576: PUSH
53577: LD_VAR 0 2
53581: ST_TO_ADDR
// vc_control := control ;
53582: LD_ADDR_OWVAR 38
53586: PUSH
53587: LD_VAR 0 3
53591: ST_TO_ADDR
// vc_weapon := weapon ;
53592: LD_ADDR_OWVAR 40
53596: PUSH
53597: LD_VAR 0 4
53601: ST_TO_ADDR
// vc_fuel_battery := fuel ;
53602: LD_ADDR_OWVAR 41
53606: PUSH
53607: LD_VAR 0 5
53611: ST_TO_ADDR
// end ;
53612: LD_VAR 0 6
53616: RET
// export function WantPlant ( unit ) ; var task ; begin
53617: LD_INT 0
53619: PPUSH
53620: PPUSH
// result := false ;
53621: LD_ADDR_VAR 0 2
53625: PUSH
53626: LD_INT 0
53628: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
53629: LD_ADDR_VAR 0 3
53633: PUSH
53634: LD_VAR 0 1
53638: PPUSH
53639: CALL_OW 437
53643: ST_TO_ADDR
// if task then
53644: LD_VAR 0 3
53648: IFFALSE 53676
// if task [ 1 ] [ 1 ] = p then
53650: LD_VAR 0 3
53654: PUSH
53655: LD_INT 1
53657: ARRAY
53658: PUSH
53659: LD_INT 1
53661: ARRAY
53662: PUSH
53663: LD_STRING p
53665: EQUAL
53666: IFFALSE 53676
// result := true ;
53668: LD_ADDR_VAR 0 2
53672: PUSH
53673: LD_INT 1
53675: ST_TO_ADDR
// end ;
53676: LD_VAR 0 2
53680: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
53681: LD_INT 0
53683: PPUSH
53684: PPUSH
53685: PPUSH
53686: PPUSH
// if pos < 1 then
53687: LD_VAR 0 2
53691: PUSH
53692: LD_INT 1
53694: LESS
53695: IFFALSE 53699
// exit ;
53697: GO 54002
// if pos = 1 then
53699: LD_VAR 0 2
53703: PUSH
53704: LD_INT 1
53706: EQUAL
53707: IFFALSE 53740
// result := Replace ( arr , pos [ 1 ] , value ) else
53709: LD_ADDR_VAR 0 4
53713: PUSH
53714: LD_VAR 0 1
53718: PPUSH
53719: LD_VAR 0 2
53723: PUSH
53724: LD_INT 1
53726: ARRAY
53727: PPUSH
53728: LD_VAR 0 3
53732: PPUSH
53733: CALL_OW 1
53737: ST_TO_ADDR
53738: GO 54002
// begin tmp := arr ;
53740: LD_ADDR_VAR 0 6
53744: PUSH
53745: LD_VAR 0 1
53749: ST_TO_ADDR
// s_arr := [ tmp ] ;
53750: LD_ADDR_VAR 0 7
53754: PUSH
53755: LD_VAR 0 6
53759: PUSH
53760: EMPTY
53761: LIST
53762: ST_TO_ADDR
// for i = 1 to pos - 1 do
53763: LD_ADDR_VAR 0 5
53767: PUSH
53768: DOUBLE
53769: LD_INT 1
53771: DEC
53772: ST_TO_ADDR
53773: LD_VAR 0 2
53777: PUSH
53778: LD_INT 1
53780: MINUS
53781: PUSH
53782: FOR_TO
53783: IFFALSE 53828
// begin tmp := tmp [ pos [ i ] ] ;
53785: LD_ADDR_VAR 0 6
53789: PUSH
53790: LD_VAR 0 6
53794: PUSH
53795: LD_VAR 0 2
53799: PUSH
53800: LD_VAR 0 5
53804: ARRAY
53805: ARRAY
53806: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
53807: LD_ADDR_VAR 0 7
53811: PUSH
53812: LD_VAR 0 7
53816: PUSH
53817: LD_VAR 0 6
53821: PUSH
53822: EMPTY
53823: LIST
53824: ADD
53825: ST_TO_ADDR
// end ;
53826: GO 53782
53828: POP
53829: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
53830: LD_ADDR_VAR 0 6
53834: PUSH
53835: LD_VAR 0 6
53839: PPUSH
53840: LD_VAR 0 2
53844: PUSH
53845: LD_VAR 0 2
53849: ARRAY
53850: PPUSH
53851: LD_VAR 0 3
53855: PPUSH
53856: CALL_OW 1
53860: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
53861: LD_ADDR_VAR 0 7
53865: PUSH
53866: LD_VAR 0 7
53870: PPUSH
53871: LD_VAR 0 7
53875: PPUSH
53876: LD_VAR 0 6
53880: PPUSH
53881: CALL_OW 1
53885: ST_TO_ADDR
// for i = s_arr downto 2 do
53886: LD_ADDR_VAR 0 5
53890: PUSH
53891: DOUBLE
53892: LD_VAR 0 7
53896: INC
53897: ST_TO_ADDR
53898: LD_INT 2
53900: PUSH
53901: FOR_DOWNTO
53902: IFFALSE 53986
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
53904: LD_ADDR_VAR 0 6
53908: PUSH
53909: LD_VAR 0 7
53913: PUSH
53914: LD_VAR 0 5
53918: PUSH
53919: LD_INT 1
53921: MINUS
53922: ARRAY
53923: PPUSH
53924: LD_VAR 0 2
53928: PUSH
53929: LD_VAR 0 5
53933: PUSH
53934: LD_INT 1
53936: MINUS
53937: ARRAY
53938: PPUSH
53939: LD_VAR 0 7
53943: PUSH
53944: LD_VAR 0 5
53948: ARRAY
53949: PPUSH
53950: CALL_OW 1
53954: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
53955: LD_ADDR_VAR 0 7
53959: PUSH
53960: LD_VAR 0 7
53964: PPUSH
53965: LD_VAR 0 5
53969: PUSH
53970: LD_INT 1
53972: MINUS
53973: PPUSH
53974: LD_VAR 0 6
53978: PPUSH
53979: CALL_OW 1
53983: ST_TO_ADDR
// end ;
53984: GO 53901
53986: POP
53987: POP
// result := s_arr [ 1 ] ;
53988: LD_ADDR_VAR 0 4
53992: PUSH
53993: LD_VAR 0 7
53997: PUSH
53998: LD_INT 1
54000: ARRAY
54001: ST_TO_ADDR
// end ; end ;
54002: LD_VAR 0 4
54006: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
54007: LD_INT 0
54009: PPUSH
54010: PPUSH
// if not list then
54011: LD_VAR 0 1
54015: NOT
54016: IFFALSE 54020
// exit ;
54018: GO 54111
// i := list [ pos1 ] ;
54020: LD_ADDR_VAR 0 5
54024: PUSH
54025: LD_VAR 0 1
54029: PUSH
54030: LD_VAR 0 2
54034: ARRAY
54035: ST_TO_ADDR
// if not i then
54036: LD_VAR 0 5
54040: NOT
54041: IFFALSE 54045
// exit ;
54043: GO 54111
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
54045: LD_ADDR_VAR 0 1
54049: PUSH
54050: LD_VAR 0 1
54054: PPUSH
54055: LD_VAR 0 2
54059: PPUSH
54060: LD_VAR 0 1
54064: PUSH
54065: LD_VAR 0 3
54069: ARRAY
54070: PPUSH
54071: CALL_OW 1
54075: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
54076: LD_ADDR_VAR 0 1
54080: PUSH
54081: LD_VAR 0 1
54085: PPUSH
54086: LD_VAR 0 3
54090: PPUSH
54091: LD_VAR 0 5
54095: PPUSH
54096: CALL_OW 1
54100: ST_TO_ADDR
// result := list ;
54101: LD_ADDR_VAR 0 4
54105: PUSH
54106: LD_VAR 0 1
54110: ST_TO_ADDR
// end ;
54111: LD_VAR 0 4
54115: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
54116: LD_INT 0
54118: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
54119: LD_ADDR_VAR 0 5
54123: PUSH
54124: LD_VAR 0 1
54128: PPUSH
54129: CALL_OW 250
54133: PPUSH
54134: LD_VAR 0 1
54138: PPUSH
54139: CALL_OW 251
54143: PPUSH
54144: LD_VAR 0 2
54148: PPUSH
54149: LD_VAR 0 3
54153: PPUSH
54154: LD_VAR 0 4
54158: PPUSH
54159: CALL 54169 0 5
54163: ST_TO_ADDR
// end ;
54164: LD_VAR 0 5
54168: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
54169: LD_INT 0
54171: PPUSH
54172: PPUSH
54173: PPUSH
54174: PPUSH
// if not list then
54175: LD_VAR 0 3
54179: NOT
54180: IFFALSE 54184
// exit ;
54182: GO 54572
// result := [ ] ;
54184: LD_ADDR_VAR 0 6
54188: PUSH
54189: EMPTY
54190: ST_TO_ADDR
// for i in list do
54191: LD_ADDR_VAR 0 7
54195: PUSH
54196: LD_VAR 0 3
54200: PUSH
54201: FOR_IN
54202: IFFALSE 54404
// begin tmp := GetDistUnitXY ( i , x , y ) ;
54204: LD_ADDR_VAR 0 9
54208: PUSH
54209: LD_VAR 0 7
54213: PPUSH
54214: LD_VAR 0 1
54218: PPUSH
54219: LD_VAR 0 2
54223: PPUSH
54224: CALL_OW 297
54228: ST_TO_ADDR
// if not result then
54229: LD_VAR 0 6
54233: NOT
54234: IFFALSE 54260
// result := [ [ i , tmp ] ] else
54236: LD_ADDR_VAR 0 6
54240: PUSH
54241: LD_VAR 0 7
54245: PUSH
54246: LD_VAR 0 9
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: ST_TO_ADDR
54258: GO 54402
// begin if result [ result ] [ 2 ] < tmp then
54260: LD_VAR 0 6
54264: PUSH
54265: LD_VAR 0 6
54269: ARRAY
54270: PUSH
54271: LD_INT 2
54273: ARRAY
54274: PUSH
54275: LD_VAR 0 9
54279: LESS
54280: IFFALSE 54322
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
54282: LD_ADDR_VAR 0 6
54286: PUSH
54287: LD_VAR 0 6
54291: PPUSH
54292: LD_VAR 0 6
54296: PUSH
54297: LD_INT 1
54299: PLUS
54300: PPUSH
54301: LD_VAR 0 7
54305: PUSH
54306: LD_VAR 0 9
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PPUSH
54315: CALL_OW 2
54319: ST_TO_ADDR
54320: GO 54402
// for j = 1 to result do
54322: LD_ADDR_VAR 0 8
54326: PUSH
54327: DOUBLE
54328: LD_INT 1
54330: DEC
54331: ST_TO_ADDR
54332: LD_VAR 0 6
54336: PUSH
54337: FOR_TO
54338: IFFALSE 54400
// begin if tmp < result [ j ] [ 2 ] then
54340: LD_VAR 0 9
54344: PUSH
54345: LD_VAR 0 6
54349: PUSH
54350: LD_VAR 0 8
54354: ARRAY
54355: PUSH
54356: LD_INT 2
54358: ARRAY
54359: LESS
54360: IFFALSE 54398
// begin result := Insert ( result , j , [ i , tmp ] ) ;
54362: LD_ADDR_VAR 0 6
54366: PUSH
54367: LD_VAR 0 6
54371: PPUSH
54372: LD_VAR 0 8
54376: PPUSH
54377: LD_VAR 0 7
54381: PUSH
54382: LD_VAR 0 9
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PPUSH
54391: CALL_OW 2
54395: ST_TO_ADDR
// break ;
54396: GO 54400
// end ; end ;
54398: GO 54337
54400: POP
54401: POP
// end ; end ;
54402: GO 54201
54404: POP
54405: POP
// if result and not asc then
54406: LD_VAR 0 6
54410: PUSH
54411: LD_VAR 0 4
54415: NOT
54416: AND
54417: IFFALSE 54492
// begin tmp := result ;
54419: LD_ADDR_VAR 0 9
54423: PUSH
54424: LD_VAR 0 6
54428: ST_TO_ADDR
// for i = tmp downto 1 do
54429: LD_ADDR_VAR 0 7
54433: PUSH
54434: DOUBLE
54435: LD_VAR 0 9
54439: INC
54440: ST_TO_ADDR
54441: LD_INT 1
54443: PUSH
54444: FOR_DOWNTO
54445: IFFALSE 54490
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
54447: LD_ADDR_VAR 0 6
54451: PUSH
54452: LD_VAR 0 6
54456: PPUSH
54457: LD_VAR 0 9
54461: PUSH
54462: LD_VAR 0 7
54466: MINUS
54467: PUSH
54468: LD_INT 1
54470: PLUS
54471: PPUSH
54472: LD_VAR 0 9
54476: PUSH
54477: LD_VAR 0 7
54481: ARRAY
54482: PPUSH
54483: CALL_OW 1
54487: ST_TO_ADDR
54488: GO 54444
54490: POP
54491: POP
// end ; tmp := [ ] ;
54492: LD_ADDR_VAR 0 9
54496: PUSH
54497: EMPTY
54498: ST_TO_ADDR
// if mode then
54499: LD_VAR 0 5
54503: IFFALSE 54572
// begin for i = 1 to result do
54505: LD_ADDR_VAR 0 7
54509: PUSH
54510: DOUBLE
54511: LD_INT 1
54513: DEC
54514: ST_TO_ADDR
54515: LD_VAR 0 6
54519: PUSH
54520: FOR_TO
54521: IFFALSE 54560
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
54523: LD_ADDR_VAR 0 9
54527: PUSH
54528: LD_VAR 0 9
54532: PPUSH
54533: LD_VAR 0 7
54537: PPUSH
54538: LD_VAR 0 6
54542: PUSH
54543: LD_VAR 0 7
54547: ARRAY
54548: PUSH
54549: LD_INT 1
54551: ARRAY
54552: PPUSH
54553: CALL_OW 1
54557: ST_TO_ADDR
54558: GO 54520
54560: POP
54561: POP
// result := tmp ;
54562: LD_ADDR_VAR 0 6
54566: PUSH
54567: LD_VAR 0 9
54571: ST_TO_ADDR
// end ; end ;
54572: LD_VAR 0 6
54576: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
54577: LD_INT 0
54579: PPUSH
54580: PPUSH
54581: PPUSH
54582: PPUSH
54583: PPUSH
54584: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
54585: LD_ADDR_VAR 0 5
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// if not x or not y then
54607: LD_VAR 0 2
54611: NOT
54612: PUSH
54613: LD_VAR 0 3
54617: NOT
54618: OR
54619: IFFALSE 54623
// exit ;
54621: GO 56269
// if not range then
54623: LD_VAR 0 4
54627: NOT
54628: IFFALSE 54638
// range := 10 ;
54630: LD_ADDR_VAR 0 4
54634: PUSH
54635: LD_INT 10
54637: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
54638: LD_ADDR_VAR 0 8
54642: PUSH
54643: LD_INT 81
54645: PUSH
54646: LD_VAR 0 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 92
54657: PUSH
54658: LD_VAR 0 2
54662: PUSH
54663: LD_VAR 0 3
54667: PUSH
54668: LD_VAR 0 4
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 3
54681: PUSH
54682: LD_INT 21
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: PPUSH
54701: CALL_OW 69
54705: ST_TO_ADDR
// if not tmp then
54706: LD_VAR 0 8
54710: NOT
54711: IFFALSE 54715
// exit ;
54713: GO 56269
// for i in tmp do
54715: LD_ADDR_VAR 0 6
54719: PUSH
54720: LD_VAR 0 8
54724: PUSH
54725: FOR_IN
54726: IFFALSE 56244
// begin points := [ 0 , 0 , 0 ] ;
54728: LD_ADDR_VAR 0 9
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: ST_TO_ADDR
// bpoints := 1 ;
54747: LD_ADDR_VAR 0 10
54751: PUSH
54752: LD_INT 1
54754: ST_TO_ADDR
// case GetType ( i ) of unit_human :
54755: LD_VAR 0 6
54759: PPUSH
54760: CALL_OW 247
54764: PUSH
54765: LD_INT 1
54767: DOUBLE
54768: EQUAL
54769: IFTRUE 54773
54771: GO 55351
54773: POP
// begin if GetClass ( i ) = 1 then
54774: LD_VAR 0 6
54778: PPUSH
54779: CALL_OW 257
54783: PUSH
54784: LD_INT 1
54786: EQUAL
54787: IFFALSE 54808
// points := [ 10 , 5 , 3 ] ;
54789: LD_ADDR_VAR 0 9
54793: PUSH
54794: LD_INT 10
54796: PUSH
54797: LD_INT 5
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
54808: LD_VAR 0 6
54812: PPUSH
54813: CALL_OW 257
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 4
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: IN
54832: IFFALSE 54853
// points := [ 3 , 2 , 1 ] ;
54834: LD_ADDR_VAR 0 9
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: ST_TO_ADDR
// if GetClass ( i ) = 5 then
54853: LD_VAR 0 6
54857: PPUSH
54858: CALL_OW 257
54862: PUSH
54863: LD_INT 5
54865: EQUAL
54866: IFFALSE 54887
// points := [ 130 , 5 , 2 ] ;
54868: LD_ADDR_VAR 0 9
54872: PUSH
54873: LD_INT 130
54875: PUSH
54876: LD_INT 5
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// if GetClass ( i ) = 8 then
54887: LD_VAR 0 6
54891: PPUSH
54892: CALL_OW 257
54896: PUSH
54897: LD_INT 8
54899: EQUAL
54900: IFFALSE 54921
// points := [ 35 , 35 , 30 ] ;
54902: LD_ADDR_VAR 0 9
54906: PUSH
54907: LD_INT 35
54909: PUSH
54910: LD_INT 35
54912: PUSH
54913: LD_INT 30
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// if GetClass ( i ) = 9 then
54921: LD_VAR 0 6
54925: PPUSH
54926: CALL_OW 257
54930: PUSH
54931: LD_INT 9
54933: EQUAL
54934: IFFALSE 54955
// points := [ 20 , 55 , 40 ] ;
54936: LD_ADDR_VAR 0 9
54940: PUSH
54941: LD_INT 20
54943: PUSH
54944: LD_INT 55
54946: PUSH
54947: LD_INT 40
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
54955: LD_VAR 0 6
54959: PPUSH
54960: CALL_OW 257
54964: PUSH
54965: LD_INT 12
54967: PUSH
54968: LD_INT 16
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: IN
54975: IFFALSE 54996
// points := [ 5 , 3 , 2 ] ;
54977: LD_ADDR_VAR 0 9
54981: PUSH
54982: LD_INT 5
54984: PUSH
54985: LD_INT 3
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: LIST
54995: ST_TO_ADDR
// if GetClass ( i ) = 17 then
54996: LD_VAR 0 6
55000: PPUSH
55001: CALL_OW 257
55005: PUSH
55006: LD_INT 17
55008: EQUAL
55009: IFFALSE 55030
// points := [ 100 , 50 , 75 ] ;
55011: LD_ADDR_VAR 0 9
55015: PUSH
55016: LD_INT 100
55018: PUSH
55019: LD_INT 50
55021: PUSH
55022: LD_INT 75
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// if GetClass ( i ) = 15 then
55030: LD_VAR 0 6
55034: PPUSH
55035: CALL_OW 257
55039: PUSH
55040: LD_INT 15
55042: EQUAL
55043: IFFALSE 55064
// points := [ 10 , 5 , 3 ] ;
55045: LD_ADDR_VAR 0 9
55049: PUSH
55050: LD_INT 10
55052: PUSH
55053: LD_INT 5
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: ST_TO_ADDR
// if GetClass ( i ) = 14 then
55064: LD_VAR 0 6
55068: PPUSH
55069: CALL_OW 257
55073: PUSH
55074: LD_INT 14
55076: EQUAL
55077: IFFALSE 55098
// points := [ 10 , 0 , 0 ] ;
55079: LD_ADDR_VAR 0 9
55083: PUSH
55084: LD_INT 10
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// if GetClass ( i ) = 11 then
55098: LD_VAR 0 6
55102: PPUSH
55103: CALL_OW 257
55107: PUSH
55108: LD_INT 11
55110: EQUAL
55111: IFFALSE 55132
// points := [ 30 , 10 , 5 ] ;
55113: LD_ADDR_VAR 0 9
55117: PUSH
55118: LD_INT 30
55120: PUSH
55121: LD_INT 10
55123: PUSH
55124: LD_INT 5
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
55132: LD_VAR 0 1
55136: PPUSH
55137: LD_INT 5
55139: PPUSH
55140: CALL_OW 321
55144: PUSH
55145: LD_INT 2
55147: EQUAL
55148: IFFALSE 55165
// bpoints := bpoints * 1.8 ;
55150: LD_ADDR_VAR 0 10
55154: PUSH
55155: LD_VAR 0 10
55159: PUSH
55160: LD_REAL  1.80000000000000E+0000
55163: MUL
55164: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
55165: LD_VAR 0 6
55169: PPUSH
55170: CALL_OW 257
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 4
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: IN
55193: PUSH
55194: LD_VAR 0 1
55198: PPUSH
55199: LD_INT 51
55201: PPUSH
55202: CALL_OW 321
55206: PUSH
55207: LD_INT 2
55209: EQUAL
55210: AND
55211: IFFALSE 55228
// bpoints := bpoints * 1.2 ;
55213: LD_ADDR_VAR 0 10
55217: PUSH
55218: LD_VAR 0 10
55222: PUSH
55223: LD_REAL  1.20000000000000E+0000
55226: MUL
55227: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
55228: LD_VAR 0 6
55232: PPUSH
55233: CALL_OW 257
55237: PUSH
55238: LD_INT 5
55240: PUSH
55241: LD_INT 7
55243: PUSH
55244: LD_INT 9
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: IN
55252: PUSH
55253: LD_VAR 0 1
55257: PPUSH
55258: LD_INT 52
55260: PPUSH
55261: CALL_OW 321
55265: PUSH
55266: LD_INT 2
55268: EQUAL
55269: AND
55270: IFFALSE 55287
// bpoints := bpoints * 1.5 ;
55272: LD_ADDR_VAR 0 10
55276: PUSH
55277: LD_VAR 0 10
55281: PUSH
55282: LD_REAL  1.50000000000000E+0000
55285: MUL
55286: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
55287: LD_VAR 0 1
55291: PPUSH
55292: LD_INT 66
55294: PPUSH
55295: CALL_OW 321
55299: PUSH
55300: LD_INT 2
55302: EQUAL
55303: IFFALSE 55320
// bpoints := bpoints * 1.1 ;
55305: LD_ADDR_VAR 0 10
55309: PUSH
55310: LD_VAR 0 10
55314: PUSH
55315: LD_REAL  1.10000000000000E+0000
55318: MUL
55319: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
55320: LD_ADDR_VAR 0 10
55324: PUSH
55325: LD_VAR 0 10
55329: PUSH
55330: LD_VAR 0 6
55334: PPUSH
55335: LD_INT 1
55337: PPUSH
55338: CALL_OW 259
55342: PUSH
55343: LD_REAL  1.15000000000000E+0000
55346: MUL
55347: MUL
55348: ST_TO_ADDR
// end ; unit_vehicle :
55349: GO 56173
55351: LD_INT 2
55353: DOUBLE
55354: EQUAL
55355: IFTRUE 55359
55357: GO 56161
55359: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
55360: LD_VAR 0 6
55364: PPUSH
55365: CALL_OW 264
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 42
55375: PUSH
55376: LD_INT 24
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: IN
55384: IFFALSE 55405
// points := [ 25 , 5 , 3 ] ;
55386: LD_ADDR_VAR 0 9
55390: PUSH
55391: LD_INT 25
55393: PUSH
55394: LD_INT 5
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
55405: LD_VAR 0 6
55409: PPUSH
55410: CALL_OW 264
55414: PUSH
55415: LD_INT 4
55417: PUSH
55418: LD_INT 43
55420: PUSH
55421: LD_INT 25
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: LIST
55428: IN
55429: IFFALSE 55450
// points := [ 40 , 15 , 5 ] ;
55431: LD_ADDR_VAR 0 9
55435: PUSH
55436: LD_INT 40
55438: PUSH
55439: LD_INT 15
55441: PUSH
55442: LD_INT 5
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: LIST
55449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
55450: LD_VAR 0 6
55454: PPUSH
55455: CALL_OW 264
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 23
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: IN
55470: IFFALSE 55491
// points := [ 7 , 25 , 8 ] ;
55472: LD_ADDR_VAR 0 9
55476: PUSH
55477: LD_INT 7
55479: PUSH
55480: LD_INT 25
55482: PUSH
55483: LD_INT 8
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
55491: LD_VAR 0 6
55495: PPUSH
55496: CALL_OW 264
55500: PUSH
55501: LD_INT 5
55503: PUSH
55504: LD_INT 27
55506: PUSH
55507: LD_INT 44
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: IN
55515: IFFALSE 55536
// points := [ 14 , 50 , 16 ] ;
55517: LD_ADDR_VAR 0 9
55521: PUSH
55522: LD_INT 14
55524: PUSH
55525: LD_INT 50
55527: PUSH
55528: LD_INT 16
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
55536: LD_VAR 0 6
55540: PPUSH
55541: CALL_OW 264
55545: PUSH
55546: LD_INT 6
55548: PUSH
55549: LD_INT 46
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: IN
55556: IFFALSE 55577
// points := [ 32 , 120 , 70 ] ;
55558: LD_ADDR_VAR 0 9
55562: PUSH
55563: LD_INT 32
55565: PUSH
55566: LD_INT 120
55568: PUSH
55569: LD_INT 70
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: LIST
55576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
55577: LD_VAR 0 6
55581: PPUSH
55582: CALL_OW 264
55586: PUSH
55587: LD_INT 7
55589: PUSH
55590: LD_INT 28
55592: PUSH
55593: LD_INT 45
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: IN
55601: IFFALSE 55622
// points := [ 35 , 20 , 45 ] ;
55603: LD_ADDR_VAR 0 9
55607: PUSH
55608: LD_INT 35
55610: PUSH
55611: LD_INT 20
55613: PUSH
55614: LD_INT 45
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
55622: LD_VAR 0 6
55626: PPUSH
55627: CALL_OW 264
55631: PUSH
55632: LD_INT 47
55634: PUSH
55635: EMPTY
55636: LIST
55637: IN
55638: IFFALSE 55659
// points := [ 67 , 45 , 75 ] ;
55640: LD_ADDR_VAR 0 9
55644: PUSH
55645: LD_INT 67
55647: PUSH
55648: LD_INT 45
55650: PUSH
55651: LD_INT 75
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
55659: LD_VAR 0 6
55663: PPUSH
55664: CALL_OW 264
55668: PUSH
55669: LD_INT 26
55671: PUSH
55672: EMPTY
55673: LIST
55674: IN
55675: IFFALSE 55696
// points := [ 120 , 30 , 80 ] ;
55677: LD_ADDR_VAR 0 9
55681: PUSH
55682: LD_INT 120
55684: PUSH
55685: LD_INT 30
55687: PUSH
55688: LD_INT 80
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
55696: LD_VAR 0 6
55700: PPUSH
55701: CALL_OW 264
55705: PUSH
55706: LD_INT 22
55708: PUSH
55709: EMPTY
55710: LIST
55711: IN
55712: IFFALSE 55733
// points := [ 40 , 1 , 1 ] ;
55714: LD_ADDR_VAR 0 9
55718: PUSH
55719: LD_INT 40
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
55733: LD_VAR 0 6
55737: PPUSH
55738: CALL_OW 264
55742: PUSH
55743: LD_INT 29
55745: PUSH
55746: EMPTY
55747: LIST
55748: IN
55749: IFFALSE 55770
// points := [ 70 , 200 , 400 ] ;
55751: LD_ADDR_VAR 0 9
55755: PUSH
55756: LD_INT 70
55758: PUSH
55759: LD_INT 200
55761: PUSH
55762: LD_INT 400
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
55770: LD_VAR 0 6
55774: PPUSH
55775: CALL_OW 264
55779: PUSH
55780: LD_INT 14
55782: PUSH
55783: LD_INT 53
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: IN
55790: IFFALSE 55811
// points := [ 40 , 10 , 20 ] ;
55792: LD_ADDR_VAR 0 9
55796: PUSH
55797: LD_INT 40
55799: PUSH
55800: LD_INT 10
55802: PUSH
55803: LD_INT 20
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
55811: LD_VAR 0 6
55815: PPUSH
55816: CALL_OW 264
55820: PUSH
55821: LD_INT 9
55823: PUSH
55824: EMPTY
55825: LIST
55826: IN
55827: IFFALSE 55848
// points := [ 5 , 70 , 20 ] ;
55829: LD_ADDR_VAR 0 9
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: LD_INT 70
55839: PUSH
55840: LD_INT 20
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
55848: LD_VAR 0 6
55852: PPUSH
55853: CALL_OW 264
55857: PUSH
55858: LD_INT 10
55860: PUSH
55861: EMPTY
55862: LIST
55863: IN
55864: IFFALSE 55885
// points := [ 35 , 110 , 70 ] ;
55866: LD_ADDR_VAR 0 9
55870: PUSH
55871: LD_INT 35
55873: PUSH
55874: LD_INT 110
55876: PUSH
55877: LD_INT 70
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
55885: LD_VAR 0 6
55889: PPUSH
55890: CALL_OW 265
55894: PUSH
55895: LD_INT 25
55897: EQUAL
55898: IFFALSE 55919
// points := [ 80 , 65 , 100 ] ;
55900: LD_ADDR_VAR 0 9
55904: PUSH
55905: LD_INT 80
55907: PUSH
55908: LD_INT 65
55910: PUSH
55911: LD_INT 100
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
55919: LD_VAR 0 6
55923: PPUSH
55924: CALL_OW 263
55928: PUSH
55929: LD_INT 1
55931: EQUAL
55932: IFFALSE 55967
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
55934: LD_ADDR_VAR 0 10
55938: PUSH
55939: LD_VAR 0 10
55943: PUSH
55944: LD_VAR 0 6
55948: PPUSH
55949: CALL_OW 311
55953: PPUSH
55954: LD_INT 3
55956: PPUSH
55957: CALL_OW 259
55961: PUSH
55962: LD_INT 4
55964: MUL
55965: MUL
55966: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
55967: LD_VAR 0 6
55971: PPUSH
55972: CALL_OW 263
55976: PUSH
55977: LD_INT 2
55979: EQUAL
55980: IFFALSE 56031
// begin j := IsControledBy ( i ) ;
55982: LD_ADDR_VAR 0 7
55986: PUSH
55987: LD_VAR 0 6
55991: PPUSH
55992: CALL_OW 312
55996: ST_TO_ADDR
// if j then
55997: LD_VAR 0 7
56001: IFFALSE 56031
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
56003: LD_ADDR_VAR 0 10
56007: PUSH
56008: LD_VAR 0 10
56012: PUSH
56013: LD_VAR 0 7
56017: PPUSH
56018: LD_INT 3
56020: PPUSH
56021: CALL_OW 259
56025: PUSH
56026: LD_INT 3
56028: MUL
56029: MUL
56030: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
56031: LD_VAR 0 6
56035: PPUSH
56036: CALL_OW 264
56040: PUSH
56041: LD_INT 5
56043: PUSH
56044: LD_INT 6
56046: PUSH
56047: LD_INT 46
56049: PUSH
56050: LD_INT 44
56052: PUSH
56053: LD_INT 47
56055: PUSH
56056: LD_INT 45
56058: PUSH
56059: LD_INT 28
56061: PUSH
56062: LD_INT 7
56064: PUSH
56065: LD_INT 27
56067: PUSH
56068: LD_INT 29
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: IN
56083: PUSH
56084: LD_VAR 0 1
56088: PPUSH
56089: LD_INT 52
56091: PPUSH
56092: CALL_OW 321
56096: PUSH
56097: LD_INT 2
56099: EQUAL
56100: AND
56101: IFFALSE 56118
// bpoints := bpoints * 1.2 ;
56103: LD_ADDR_VAR 0 10
56107: PUSH
56108: LD_VAR 0 10
56112: PUSH
56113: LD_REAL  1.20000000000000E+0000
56116: MUL
56117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
56118: LD_VAR 0 6
56122: PPUSH
56123: CALL_OW 264
56127: PUSH
56128: LD_INT 6
56130: PUSH
56131: LD_INT 46
56133: PUSH
56134: LD_INT 47
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: IN
56142: IFFALSE 56159
// bpoints := bpoints * 1.2 ;
56144: LD_ADDR_VAR 0 10
56148: PUSH
56149: LD_VAR 0 10
56153: PUSH
56154: LD_REAL  1.20000000000000E+0000
56157: MUL
56158: ST_TO_ADDR
// end ; unit_building :
56159: GO 56173
56161: LD_INT 3
56163: DOUBLE
56164: EQUAL
56165: IFTRUE 56169
56167: GO 56172
56169: POP
// ; end ;
56170: GO 56173
56172: POP
// for j = 1 to 3 do
56173: LD_ADDR_VAR 0 7
56177: PUSH
56178: DOUBLE
56179: LD_INT 1
56181: DEC
56182: ST_TO_ADDR
56183: LD_INT 3
56185: PUSH
56186: FOR_TO
56187: IFFALSE 56240
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
56189: LD_ADDR_VAR 0 5
56193: PUSH
56194: LD_VAR 0 5
56198: PPUSH
56199: LD_VAR 0 7
56203: PPUSH
56204: LD_VAR 0 5
56208: PUSH
56209: LD_VAR 0 7
56213: ARRAY
56214: PUSH
56215: LD_VAR 0 9
56219: PUSH
56220: LD_VAR 0 7
56224: ARRAY
56225: PUSH
56226: LD_VAR 0 10
56230: MUL
56231: PLUS
56232: PPUSH
56233: CALL_OW 1
56237: ST_TO_ADDR
56238: GO 56186
56240: POP
56241: POP
// end ;
56242: GO 54725
56244: POP
56245: POP
// result := Replace ( result , 4 , tmp ) ;
56246: LD_ADDR_VAR 0 5
56250: PUSH
56251: LD_VAR 0 5
56255: PPUSH
56256: LD_INT 4
56258: PPUSH
56259: LD_VAR 0 8
56263: PPUSH
56264: CALL_OW 1
56268: ST_TO_ADDR
// end ;
56269: LD_VAR 0 5
56273: RET
// export function DangerAtRange ( unit , range ) ; begin
56274: LD_INT 0
56276: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
56277: LD_ADDR_VAR 0 3
56281: PUSH
56282: LD_VAR 0 1
56286: PPUSH
56287: CALL_OW 255
56291: PPUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: CALL_OW 250
56301: PPUSH
56302: LD_VAR 0 1
56306: PPUSH
56307: CALL_OW 251
56311: PPUSH
56312: LD_VAR 0 2
56316: PPUSH
56317: CALL 54577 0 4
56321: ST_TO_ADDR
// end ;
56322: LD_VAR 0 3
56326: RET
// export function DangerInArea ( side , area ) ; begin
56327: LD_INT 0
56329: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
56330: LD_ADDR_VAR 0 3
56334: PUSH
56335: LD_VAR 0 2
56339: PPUSH
56340: LD_INT 81
56342: PUSH
56343: LD_VAR 0 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PPUSH
56352: CALL_OW 70
56356: ST_TO_ADDR
// end ;
56357: LD_VAR 0 3
56361: RET
// export function IsExtension ( b ) ; begin
56362: LD_INT 0
56364: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
56365: LD_ADDR_VAR 0 2
56369: PUSH
56370: LD_VAR 0 1
56374: PUSH
56375: LD_INT 23
56377: PUSH
56378: LD_INT 20
56380: PUSH
56381: LD_INT 22
56383: PUSH
56384: LD_INT 17
56386: PUSH
56387: LD_INT 24
56389: PUSH
56390: LD_INT 21
56392: PUSH
56393: LD_INT 19
56395: PUSH
56396: LD_INT 16
56398: PUSH
56399: LD_INT 25
56401: PUSH
56402: LD_INT 18
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: IN
56417: ST_TO_ADDR
// end ;
56418: LD_VAR 0 2
56422: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
56423: LD_INT 0
56425: PPUSH
56426: PPUSH
56427: PPUSH
// result := [ ] ;
56428: LD_ADDR_VAR 0 3
56432: PUSH
56433: EMPTY
56434: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
56435: LD_ADDR_VAR 0 4
56439: PUSH
56440: LD_VAR 0 2
56444: PPUSH
56445: LD_INT 21
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PPUSH
56455: CALL_OW 70
56459: ST_TO_ADDR
// if not tmp then
56460: LD_VAR 0 4
56464: NOT
56465: IFFALSE 56469
// exit ;
56467: GO 56527
// for i in tmp do
56469: LD_ADDR_VAR 0 5
56473: PUSH
56474: LD_VAR 0 4
56478: PUSH
56479: FOR_IN
56480: IFFALSE 56515
// if GetBase ( i ) <> base then
56482: LD_VAR 0 5
56486: PPUSH
56487: CALL_OW 274
56491: PUSH
56492: LD_VAR 0 1
56496: NONEQUAL
56497: IFFALSE 56513
// ComLinkToBase ( base , i ) ;
56499: LD_VAR 0 1
56503: PPUSH
56504: LD_VAR 0 5
56508: PPUSH
56509: CALL_OW 169
56513: GO 56479
56515: POP
56516: POP
// result := tmp ;
56517: LD_ADDR_VAR 0 3
56521: PUSH
56522: LD_VAR 0 4
56526: ST_TO_ADDR
// end ;
56527: LD_VAR 0 3
56531: RET
// export function ComComplete ( unit , b ) ; var i ; begin
56532: LD_INT 0
56534: PPUSH
56535: PPUSH
// if BuildingStatus ( b ) = bs_build then
56536: LD_VAR 0 2
56540: PPUSH
56541: CALL_OW 461
56545: PUSH
56546: LD_INT 1
56548: EQUAL
56549: IFFALSE 56609
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_STRING h
56558: PUSH
56559: LD_VAR 0 2
56563: PPUSH
56564: CALL_OW 250
56568: PUSH
56569: LD_VAR 0 2
56573: PPUSH
56574: CALL_OW 251
56578: PUSH
56579: LD_VAR 0 2
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: PPUSH
56605: CALL_OW 446
// end ;
56609: LD_VAR 0 3
56613: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
56614: LD_INT 0
56616: PPUSH
56617: PPUSH
56618: PPUSH
56619: PPUSH
56620: PPUSH
56621: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
56622: LD_VAR 0 1
56626: NOT
56627: PUSH
56628: LD_VAR 0 1
56632: PPUSH
56633: CALL_OW 263
56637: PUSH
56638: LD_INT 2
56640: EQUAL
56641: NOT
56642: OR
56643: IFFALSE 56647
// exit ;
56645: GO 56963
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
56647: LD_ADDR_VAR 0 6
56651: PUSH
56652: LD_INT 22
56654: PUSH
56655: LD_VAR 0 1
56659: PPUSH
56660: CALL_OW 255
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 30
56674: PUSH
56675: LD_INT 36
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 34
56684: PUSH
56685: LD_INT 31
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PPUSH
56701: CALL_OW 69
56705: ST_TO_ADDR
// if not tmp then
56706: LD_VAR 0 6
56710: NOT
56711: IFFALSE 56715
// exit ;
56713: GO 56963
// result := [ ] ;
56715: LD_ADDR_VAR 0 2
56719: PUSH
56720: EMPTY
56721: ST_TO_ADDR
// for i in tmp do
56722: LD_ADDR_VAR 0 3
56726: PUSH
56727: LD_VAR 0 6
56731: PUSH
56732: FOR_IN
56733: IFFALSE 56804
// begin t := UnitsInside ( i ) ;
56735: LD_ADDR_VAR 0 4
56739: PUSH
56740: LD_VAR 0 3
56744: PPUSH
56745: CALL_OW 313
56749: ST_TO_ADDR
// if t then
56750: LD_VAR 0 4
56754: IFFALSE 56802
// for j in t do
56756: LD_ADDR_VAR 0 7
56760: PUSH
56761: LD_VAR 0 4
56765: PUSH
56766: FOR_IN
56767: IFFALSE 56800
// result := Insert ( result , result + 1 , j ) ;
56769: LD_ADDR_VAR 0 2
56773: PUSH
56774: LD_VAR 0 2
56778: PPUSH
56779: LD_VAR 0 2
56783: PUSH
56784: LD_INT 1
56786: PLUS
56787: PPUSH
56788: LD_VAR 0 7
56792: PPUSH
56793: CALL_OW 2
56797: ST_TO_ADDR
56798: GO 56766
56800: POP
56801: POP
// end ;
56802: GO 56732
56804: POP
56805: POP
// if not result then
56806: LD_VAR 0 2
56810: NOT
56811: IFFALSE 56815
// exit ;
56813: GO 56963
// mech := result [ 1 ] ;
56815: LD_ADDR_VAR 0 5
56819: PUSH
56820: LD_VAR 0 2
56824: PUSH
56825: LD_INT 1
56827: ARRAY
56828: ST_TO_ADDR
// if result > 1 then
56829: LD_VAR 0 2
56833: PUSH
56834: LD_INT 1
56836: GREATER
56837: IFFALSE 56949
// for i = 2 to result do
56839: LD_ADDR_VAR 0 3
56843: PUSH
56844: DOUBLE
56845: LD_INT 2
56847: DEC
56848: ST_TO_ADDR
56849: LD_VAR 0 2
56853: PUSH
56854: FOR_TO
56855: IFFALSE 56947
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
56857: LD_ADDR_VAR 0 4
56861: PUSH
56862: LD_VAR 0 2
56866: PUSH
56867: LD_VAR 0 3
56871: ARRAY
56872: PPUSH
56873: LD_INT 3
56875: PPUSH
56876: CALL_OW 259
56880: PUSH
56881: LD_VAR 0 2
56885: PUSH
56886: LD_VAR 0 3
56890: ARRAY
56891: PPUSH
56892: CALL_OW 432
56896: MINUS
56897: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
56898: LD_VAR 0 4
56902: PUSH
56903: LD_VAR 0 5
56907: PPUSH
56908: LD_INT 3
56910: PPUSH
56911: CALL_OW 259
56915: PUSH
56916: LD_VAR 0 5
56920: PPUSH
56921: CALL_OW 432
56925: MINUS
56926: GREATEREQUAL
56927: IFFALSE 56945
// mech := result [ i ] ;
56929: LD_ADDR_VAR 0 5
56933: PUSH
56934: LD_VAR 0 2
56938: PUSH
56939: LD_VAR 0 3
56943: ARRAY
56944: ST_TO_ADDR
// end ;
56945: GO 56854
56947: POP
56948: POP
// ComLinkTo ( vehicle , mech ) ;
56949: LD_VAR 0 1
56953: PPUSH
56954: LD_VAR 0 5
56958: PPUSH
56959: CALL_OW 135
// end ;
56963: LD_VAR 0 2
56967: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
56968: LD_INT 0
56970: PPUSH
56971: PPUSH
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
56976: PPUSH
56977: PPUSH
56978: PPUSH
56979: PPUSH
56980: PPUSH
56981: PPUSH
56982: PPUSH
// result := [ ] ;
56983: LD_ADDR_VAR 0 7
56987: PUSH
56988: EMPTY
56989: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
56990: LD_VAR 0 1
56994: PPUSH
56995: CALL_OW 266
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: IN
57010: NOT
57011: IFFALSE 57015
// exit ;
57013: GO 58646
// if name then
57015: LD_VAR 0 3
57019: IFFALSE 57035
// SetBName ( base_dep , name ) ;
57021: LD_VAR 0 1
57025: PPUSH
57026: LD_VAR 0 3
57030: PPUSH
57031: CALL_OW 500
// base := GetBase ( base_dep ) ;
57035: LD_ADDR_VAR 0 15
57039: PUSH
57040: LD_VAR 0 1
57044: PPUSH
57045: CALL_OW 274
57049: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
57050: LD_ADDR_VAR 0 16
57054: PUSH
57055: LD_VAR 0 1
57059: PPUSH
57060: CALL_OW 255
57064: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
57065: LD_ADDR_VAR 0 17
57069: PUSH
57070: LD_VAR 0 1
57074: PPUSH
57075: CALL_OW 248
57079: ST_TO_ADDR
// if sources then
57080: LD_VAR 0 5
57084: IFFALSE 57131
// for i = 1 to 3 do
57086: LD_ADDR_VAR 0 8
57090: PUSH
57091: DOUBLE
57092: LD_INT 1
57094: DEC
57095: ST_TO_ADDR
57096: LD_INT 3
57098: PUSH
57099: FOR_TO
57100: IFFALSE 57129
// AddResourceType ( base , i , sources [ i ] ) ;
57102: LD_VAR 0 15
57106: PPUSH
57107: LD_VAR 0 8
57111: PPUSH
57112: LD_VAR 0 5
57116: PUSH
57117: LD_VAR 0 8
57121: ARRAY
57122: PPUSH
57123: CALL_OW 276
57127: GO 57099
57129: POP
57130: POP
// buildings := GetBaseBuildings ( base , area ) ;
57131: LD_ADDR_VAR 0 18
57135: PUSH
57136: LD_VAR 0 15
57140: PPUSH
57141: LD_VAR 0 2
57145: PPUSH
57146: CALL 56423 0 2
57150: ST_TO_ADDR
// InitHc ;
57151: CALL_OW 19
// InitUc ;
57155: CALL_OW 18
// uc_side := side ;
57159: LD_ADDR_OWVAR 20
57163: PUSH
57164: LD_VAR 0 16
57168: ST_TO_ADDR
// uc_nation := nation ;
57169: LD_ADDR_OWVAR 21
57173: PUSH
57174: LD_VAR 0 17
57178: ST_TO_ADDR
// if buildings then
57179: LD_VAR 0 18
57183: IFFALSE 58505
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
57185: LD_ADDR_VAR 0 19
57189: PUSH
57190: LD_VAR 0 18
57194: PPUSH
57195: LD_INT 2
57197: PUSH
57198: LD_INT 30
57200: PUSH
57201: LD_INT 29
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 30
57210: PUSH
57211: LD_INT 30
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: PPUSH
57223: CALL_OW 72
57227: ST_TO_ADDR
// if tmp then
57228: LD_VAR 0 19
57232: IFFALSE 57280
// for i in tmp do
57234: LD_ADDR_VAR 0 8
57238: PUSH
57239: LD_VAR 0 19
57243: PUSH
57244: FOR_IN
57245: IFFALSE 57278
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
57247: LD_VAR 0 8
57251: PPUSH
57252: CALL_OW 250
57256: PPUSH
57257: LD_VAR 0 8
57261: PPUSH
57262: CALL_OW 251
57266: PPUSH
57267: LD_VAR 0 16
57271: PPUSH
57272: CALL_OW 441
57276: GO 57244
57278: POP
57279: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
57280: LD_VAR 0 18
57284: PPUSH
57285: LD_INT 2
57287: PUSH
57288: LD_INT 30
57290: PUSH
57291: LD_INT 32
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 30
57300: PUSH
57301: LD_INT 33
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: PPUSH
57313: CALL_OW 72
57317: IFFALSE 57405
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
57319: LD_ADDR_VAR 0 8
57323: PUSH
57324: LD_VAR 0 18
57328: PPUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 30
57334: PUSH
57335: LD_INT 32
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 30
57344: PUSH
57345: LD_INT 33
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: LIST
57356: PPUSH
57357: CALL_OW 72
57361: PUSH
57362: FOR_IN
57363: IFFALSE 57403
// begin if not GetBWeapon ( i ) then
57365: LD_VAR 0 8
57369: PPUSH
57370: CALL_OW 269
57374: NOT
57375: IFFALSE 57401
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
57377: LD_VAR 0 8
57381: PPUSH
57382: LD_VAR 0 8
57386: PPUSH
57387: LD_VAR 0 2
57391: PPUSH
57392: CALL 58651 0 2
57396: PPUSH
57397: CALL_OW 431
// end ;
57401: GO 57362
57403: POP
57404: POP
// end ; for i = 1 to personel do
57405: LD_ADDR_VAR 0 8
57409: PUSH
57410: DOUBLE
57411: LD_INT 1
57413: DEC
57414: ST_TO_ADDR
57415: LD_VAR 0 6
57419: PUSH
57420: FOR_TO
57421: IFFALSE 58485
// begin if i > 4 then
57423: LD_VAR 0 8
57427: PUSH
57428: LD_INT 4
57430: GREATER
57431: IFFALSE 57435
// break ;
57433: GO 58485
// case i of 1 :
57435: LD_VAR 0 8
57439: PUSH
57440: LD_INT 1
57442: DOUBLE
57443: EQUAL
57444: IFTRUE 57448
57446: GO 57528
57448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
57449: LD_ADDR_VAR 0 12
57453: PUSH
57454: LD_VAR 0 18
57458: PPUSH
57459: LD_INT 22
57461: PUSH
57462: LD_VAR 0 16
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 58
57473: PUSH
57474: EMPTY
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 30
57482: PUSH
57483: LD_INT 32
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 30
57492: PUSH
57493: LD_INT 4
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 30
57502: PUSH
57503: LD_INT 5
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: PPUSH
57521: CALL_OW 72
57525: ST_TO_ADDR
57526: GO 57750
57528: LD_INT 2
57530: DOUBLE
57531: EQUAL
57532: IFTRUE 57536
57534: GO 57598
57536: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
57537: LD_ADDR_VAR 0 12
57541: PUSH
57542: LD_VAR 0 18
57546: PPUSH
57547: LD_INT 22
57549: PUSH
57550: LD_VAR 0 16
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 30
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 30
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PPUSH
57591: CALL_OW 72
57595: ST_TO_ADDR
57596: GO 57750
57598: LD_INT 3
57600: DOUBLE
57601: EQUAL
57602: IFTRUE 57606
57604: GO 57668
57606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
57607: LD_ADDR_VAR 0 12
57611: PUSH
57612: LD_VAR 0 18
57616: PPUSH
57617: LD_INT 22
57619: PUSH
57620: LD_VAR 0 16
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 30
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 30
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PPUSH
57661: CALL_OW 72
57665: ST_TO_ADDR
57666: GO 57750
57668: LD_INT 4
57670: DOUBLE
57671: EQUAL
57672: IFTRUE 57676
57674: GO 57749
57676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
57677: LD_ADDR_VAR 0 12
57681: PUSH
57682: LD_VAR 0 18
57686: PPUSH
57687: LD_INT 22
57689: PUSH
57690: LD_VAR 0 16
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: LD_INT 30
57704: PUSH
57705: LD_INT 6
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 30
57714: PUSH
57715: LD_INT 7
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 30
57724: PUSH
57725: LD_INT 8
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PPUSH
57742: CALL_OW 72
57746: ST_TO_ADDR
57747: GO 57750
57749: POP
// if i = 1 then
57750: LD_VAR 0 8
57754: PUSH
57755: LD_INT 1
57757: EQUAL
57758: IFFALSE 57869
// begin tmp := [ ] ;
57760: LD_ADDR_VAR 0 19
57764: PUSH
57765: EMPTY
57766: ST_TO_ADDR
// for j in f do
57767: LD_ADDR_VAR 0 9
57771: PUSH
57772: LD_VAR 0 12
57776: PUSH
57777: FOR_IN
57778: IFFALSE 57851
// if GetBType ( j ) = b_bunker then
57780: LD_VAR 0 9
57784: PPUSH
57785: CALL_OW 266
57789: PUSH
57790: LD_INT 32
57792: EQUAL
57793: IFFALSE 57820
// tmp := Insert ( tmp , 1 , j ) else
57795: LD_ADDR_VAR 0 19
57799: PUSH
57800: LD_VAR 0 19
57804: PPUSH
57805: LD_INT 1
57807: PPUSH
57808: LD_VAR 0 9
57812: PPUSH
57813: CALL_OW 2
57817: ST_TO_ADDR
57818: GO 57849
// tmp := Insert ( tmp , tmp + 1 , j ) ;
57820: LD_ADDR_VAR 0 19
57824: PUSH
57825: LD_VAR 0 19
57829: PPUSH
57830: LD_VAR 0 19
57834: PUSH
57835: LD_INT 1
57837: PLUS
57838: PPUSH
57839: LD_VAR 0 9
57843: PPUSH
57844: CALL_OW 2
57848: ST_TO_ADDR
57849: GO 57777
57851: POP
57852: POP
// if tmp then
57853: LD_VAR 0 19
57857: IFFALSE 57869
// f := tmp ;
57859: LD_ADDR_VAR 0 12
57863: PUSH
57864: LD_VAR 0 19
57868: ST_TO_ADDR
// end ; x := personel [ i ] ;
57869: LD_ADDR_VAR 0 13
57873: PUSH
57874: LD_VAR 0 6
57878: PUSH
57879: LD_VAR 0 8
57883: ARRAY
57884: ST_TO_ADDR
// if x = - 1 then
57885: LD_VAR 0 13
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: EQUAL
57894: IFFALSE 58103
// begin for j in f do
57896: LD_ADDR_VAR 0 9
57900: PUSH
57901: LD_VAR 0 12
57905: PUSH
57906: FOR_IN
57907: IFFALSE 58099
// repeat InitHc ;
57909: CALL_OW 19
// if GetBType ( j ) = b_barracks then
57913: LD_VAR 0 9
57917: PPUSH
57918: CALL_OW 266
57922: PUSH
57923: LD_INT 5
57925: EQUAL
57926: IFFALSE 57996
// begin if UnitsInside ( j ) < 3 then
57928: LD_VAR 0 9
57932: PPUSH
57933: CALL_OW 313
57937: PUSH
57938: LD_INT 3
57940: LESS
57941: IFFALSE 57977
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57943: LD_INT 0
57945: PPUSH
57946: LD_INT 5
57948: PUSH
57949: LD_INT 8
57951: PUSH
57952: LD_INT 9
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: LIST
57959: PUSH
57960: LD_VAR 0 17
57964: ARRAY
57965: PPUSH
57966: LD_VAR 0 4
57970: PPUSH
57971: CALL_OW 380
57975: GO 57994
// PrepareHuman ( false , i , skill ) ;
57977: LD_INT 0
57979: PPUSH
57980: LD_VAR 0 8
57984: PPUSH
57985: LD_VAR 0 4
57989: PPUSH
57990: CALL_OW 380
// end else
57994: GO 58013
// PrepareHuman ( false , i , skill ) ;
57996: LD_INT 0
57998: PPUSH
57999: LD_VAR 0 8
58003: PPUSH
58004: LD_VAR 0 4
58008: PPUSH
58009: CALL_OW 380
// un := CreateHuman ;
58013: LD_ADDR_VAR 0 14
58017: PUSH
58018: CALL_OW 44
58022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58023: LD_ADDR_VAR 0 7
58027: PUSH
58028: LD_VAR 0 7
58032: PPUSH
58033: LD_INT 1
58035: PPUSH
58036: LD_VAR 0 14
58040: PPUSH
58041: CALL_OW 2
58045: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
58046: LD_VAR 0 14
58050: PPUSH
58051: LD_VAR 0 9
58055: PPUSH
58056: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
58060: LD_VAR 0 9
58064: PPUSH
58065: CALL_OW 313
58069: PUSH
58070: LD_INT 6
58072: EQUAL
58073: PUSH
58074: LD_VAR 0 9
58078: PPUSH
58079: CALL_OW 266
58083: PUSH
58084: LD_INT 32
58086: PUSH
58087: LD_INT 31
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: IN
58094: OR
58095: IFFALSE 57909
58097: GO 57906
58099: POP
58100: POP
// end else
58101: GO 58483
// for j = 1 to x do
58103: LD_ADDR_VAR 0 9
58107: PUSH
58108: DOUBLE
58109: LD_INT 1
58111: DEC
58112: ST_TO_ADDR
58113: LD_VAR 0 13
58117: PUSH
58118: FOR_TO
58119: IFFALSE 58481
// begin InitHc ;
58121: CALL_OW 19
// if not f then
58125: LD_VAR 0 12
58129: NOT
58130: IFFALSE 58219
// begin PrepareHuman ( false , i , skill ) ;
58132: LD_INT 0
58134: PPUSH
58135: LD_VAR 0 8
58139: PPUSH
58140: LD_VAR 0 4
58144: PPUSH
58145: CALL_OW 380
// un := CreateHuman ;
58149: LD_ADDR_VAR 0 14
58153: PUSH
58154: CALL_OW 44
58158: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58159: LD_ADDR_VAR 0 7
58163: PUSH
58164: LD_VAR 0 7
58168: PPUSH
58169: LD_INT 1
58171: PPUSH
58172: LD_VAR 0 14
58176: PPUSH
58177: CALL_OW 2
58181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58182: LD_VAR 0 14
58186: PPUSH
58187: LD_VAR 0 1
58191: PPUSH
58192: CALL_OW 250
58196: PPUSH
58197: LD_VAR 0 1
58201: PPUSH
58202: CALL_OW 251
58206: PPUSH
58207: LD_INT 10
58209: PPUSH
58210: LD_INT 0
58212: PPUSH
58213: CALL_OW 50
// continue ;
58217: GO 58118
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
58219: LD_VAR 0 12
58223: PUSH
58224: LD_INT 1
58226: ARRAY
58227: PPUSH
58228: CALL_OW 313
58232: PUSH
58233: LD_VAR 0 12
58237: PUSH
58238: LD_INT 1
58240: ARRAY
58241: PPUSH
58242: CALL_OW 266
58246: PUSH
58247: LD_INT 32
58249: PUSH
58250: LD_INT 31
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: IN
58257: AND
58258: PUSH
58259: LD_VAR 0 12
58263: PUSH
58264: LD_INT 1
58266: ARRAY
58267: PPUSH
58268: CALL_OW 313
58272: PUSH
58273: LD_INT 6
58275: EQUAL
58276: OR
58277: IFFALSE 58297
// f := Delete ( f , 1 ) ;
58279: LD_ADDR_VAR 0 12
58283: PUSH
58284: LD_VAR 0 12
58288: PPUSH
58289: LD_INT 1
58291: PPUSH
58292: CALL_OW 3
58296: ST_TO_ADDR
// if not f then
58297: LD_VAR 0 12
58301: NOT
58302: IFFALSE 58320
// begin x := x + 2 ;
58304: LD_ADDR_VAR 0 13
58308: PUSH
58309: LD_VAR 0 13
58313: PUSH
58314: LD_INT 2
58316: PLUS
58317: ST_TO_ADDR
// continue ;
58318: GO 58118
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
58320: LD_VAR 0 12
58324: PUSH
58325: LD_INT 1
58327: ARRAY
58328: PPUSH
58329: CALL_OW 266
58333: PUSH
58334: LD_INT 5
58336: EQUAL
58337: IFFALSE 58411
// begin if UnitsInside ( f [ 1 ] ) < 3 then
58339: LD_VAR 0 12
58343: PUSH
58344: LD_INT 1
58346: ARRAY
58347: PPUSH
58348: CALL_OW 313
58352: PUSH
58353: LD_INT 3
58355: LESS
58356: IFFALSE 58392
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58358: LD_INT 0
58360: PPUSH
58361: LD_INT 5
58363: PUSH
58364: LD_INT 8
58366: PUSH
58367: LD_INT 9
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: LIST
58374: PUSH
58375: LD_VAR 0 17
58379: ARRAY
58380: PPUSH
58381: LD_VAR 0 4
58385: PPUSH
58386: CALL_OW 380
58390: GO 58409
// PrepareHuman ( false , i , skill ) ;
58392: LD_INT 0
58394: PPUSH
58395: LD_VAR 0 8
58399: PPUSH
58400: LD_VAR 0 4
58404: PPUSH
58405: CALL_OW 380
// end else
58409: GO 58428
// PrepareHuman ( false , i , skill ) ;
58411: LD_INT 0
58413: PPUSH
58414: LD_VAR 0 8
58418: PPUSH
58419: LD_VAR 0 4
58423: PPUSH
58424: CALL_OW 380
// un := CreateHuman ;
58428: LD_ADDR_VAR 0 14
58432: PUSH
58433: CALL_OW 44
58437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58438: LD_ADDR_VAR 0 7
58442: PUSH
58443: LD_VAR 0 7
58447: PPUSH
58448: LD_INT 1
58450: PPUSH
58451: LD_VAR 0 14
58455: PPUSH
58456: CALL_OW 2
58460: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
58461: LD_VAR 0 14
58465: PPUSH
58466: LD_VAR 0 12
58470: PUSH
58471: LD_INT 1
58473: ARRAY
58474: PPUSH
58475: CALL_OW 52
// end ;
58479: GO 58118
58481: POP
58482: POP
// end ;
58483: GO 57420
58485: POP
58486: POP
// result := result ^ buildings ;
58487: LD_ADDR_VAR 0 7
58491: PUSH
58492: LD_VAR 0 7
58496: PUSH
58497: LD_VAR 0 18
58501: ADD
58502: ST_TO_ADDR
// end else
58503: GO 58646
// begin for i = 1 to personel do
58505: LD_ADDR_VAR 0 8
58509: PUSH
58510: DOUBLE
58511: LD_INT 1
58513: DEC
58514: ST_TO_ADDR
58515: LD_VAR 0 6
58519: PUSH
58520: FOR_TO
58521: IFFALSE 58644
// begin if i > 4 then
58523: LD_VAR 0 8
58527: PUSH
58528: LD_INT 4
58530: GREATER
58531: IFFALSE 58535
// break ;
58533: GO 58644
// x := personel [ i ] ;
58535: LD_ADDR_VAR 0 13
58539: PUSH
58540: LD_VAR 0 6
58544: PUSH
58545: LD_VAR 0 8
58549: ARRAY
58550: ST_TO_ADDR
// if x = - 1 then
58551: LD_VAR 0 13
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: EQUAL
58560: IFFALSE 58564
// continue ;
58562: GO 58520
// PrepareHuman ( false , i , skill ) ;
58564: LD_INT 0
58566: PPUSH
58567: LD_VAR 0 8
58571: PPUSH
58572: LD_VAR 0 4
58576: PPUSH
58577: CALL_OW 380
// un := CreateHuman ;
58581: LD_ADDR_VAR 0 14
58585: PUSH
58586: CALL_OW 44
58590: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58591: LD_VAR 0 14
58595: PPUSH
58596: LD_VAR 0 1
58600: PPUSH
58601: CALL_OW 250
58605: PPUSH
58606: LD_VAR 0 1
58610: PPUSH
58611: CALL_OW 251
58615: PPUSH
58616: LD_INT 10
58618: PPUSH
58619: LD_INT 0
58621: PPUSH
58622: CALL_OW 50
// result := result ^ un ;
58626: LD_ADDR_VAR 0 7
58630: PUSH
58631: LD_VAR 0 7
58635: PUSH
58636: LD_VAR 0 14
58640: ADD
58641: ST_TO_ADDR
// end ;
58642: GO 58520
58644: POP
58645: POP
// end ; end ;
58646: LD_VAR 0 7
58650: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
58651: LD_INT 0
58653: PPUSH
58654: PPUSH
58655: PPUSH
58656: PPUSH
58657: PPUSH
58658: PPUSH
58659: PPUSH
58660: PPUSH
58661: PPUSH
58662: PPUSH
58663: PPUSH
58664: PPUSH
58665: PPUSH
58666: PPUSH
58667: PPUSH
58668: PPUSH
// result := false ;
58669: LD_ADDR_VAR 0 3
58673: PUSH
58674: LD_INT 0
58676: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
58677: LD_VAR 0 1
58681: NOT
58682: PUSH
58683: LD_VAR 0 1
58687: PPUSH
58688: CALL_OW 266
58692: PUSH
58693: LD_INT 32
58695: PUSH
58696: LD_INT 33
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: IN
58703: NOT
58704: OR
58705: IFFALSE 58709
// exit ;
58707: GO 59845
// nat := GetNation ( tower ) ;
58709: LD_ADDR_VAR 0 12
58713: PUSH
58714: LD_VAR 0 1
58718: PPUSH
58719: CALL_OW 248
58723: ST_TO_ADDR
// side := GetSide ( tower ) ;
58724: LD_ADDR_VAR 0 16
58728: PUSH
58729: LD_VAR 0 1
58733: PPUSH
58734: CALL_OW 255
58738: ST_TO_ADDR
// x := GetX ( tower ) ;
58739: LD_ADDR_VAR 0 10
58743: PUSH
58744: LD_VAR 0 1
58748: PPUSH
58749: CALL_OW 250
58753: ST_TO_ADDR
// y := GetY ( tower ) ;
58754: LD_ADDR_VAR 0 11
58758: PUSH
58759: LD_VAR 0 1
58763: PPUSH
58764: CALL_OW 251
58768: ST_TO_ADDR
// if not x or not y then
58769: LD_VAR 0 10
58773: NOT
58774: PUSH
58775: LD_VAR 0 11
58779: NOT
58780: OR
58781: IFFALSE 58785
// exit ;
58783: GO 59845
// weapon := 0 ;
58785: LD_ADDR_VAR 0 18
58789: PUSH
58790: LD_INT 0
58792: ST_TO_ADDR
// fac_list := [ ] ;
58793: LD_ADDR_VAR 0 17
58797: PUSH
58798: EMPTY
58799: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
58800: LD_ADDR_VAR 0 6
58804: PUSH
58805: LD_VAR 0 1
58809: PPUSH
58810: CALL_OW 274
58814: PPUSH
58815: LD_VAR 0 2
58819: PPUSH
58820: CALL 56423 0 2
58824: PPUSH
58825: LD_INT 30
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PPUSH
58835: CALL_OW 72
58839: ST_TO_ADDR
// if not factories then
58840: LD_VAR 0 6
58844: NOT
58845: IFFALSE 58849
// exit ;
58847: GO 59845
// for i in factories do
58849: LD_ADDR_VAR 0 8
58853: PUSH
58854: LD_VAR 0 6
58858: PUSH
58859: FOR_IN
58860: IFFALSE 58885
// fac_list := fac_list union AvailableWeaponList ( i ) ;
58862: LD_ADDR_VAR 0 17
58866: PUSH
58867: LD_VAR 0 17
58871: PUSH
58872: LD_VAR 0 8
58876: PPUSH
58877: CALL_OW 478
58881: UNION
58882: ST_TO_ADDR
58883: GO 58859
58885: POP
58886: POP
// if not fac_list then
58887: LD_VAR 0 17
58891: NOT
58892: IFFALSE 58896
// exit ;
58894: GO 59845
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
58896: LD_ADDR_VAR 0 5
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: LD_INT 5
58906: PUSH
58907: LD_INT 9
58909: PUSH
58910: LD_INT 10
58912: PUSH
58913: LD_INT 6
58915: PUSH
58916: LD_INT 7
58918: PUSH
58919: LD_INT 11
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 27
58933: PUSH
58934: LD_INT 28
58936: PUSH
58937: LD_INT 26
58939: PUSH
58940: LD_INT 30
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 43
58951: PUSH
58952: LD_INT 44
58954: PUSH
58955: LD_INT 46
58957: PUSH
58958: LD_INT 45
58960: PUSH
58961: LD_INT 47
58963: PUSH
58964: LD_INT 49
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: PUSH
58980: LD_VAR 0 12
58984: ARRAY
58985: ST_TO_ADDR
// for i in list do
58986: LD_ADDR_VAR 0 8
58990: PUSH
58991: LD_VAR 0 5
58995: PUSH
58996: FOR_IN
58997: IFFALSE 59030
// if not i in fac_list then
58999: LD_VAR 0 8
59003: PUSH
59004: LD_VAR 0 17
59008: IN
59009: NOT
59010: IFFALSE 59028
// list := list diff i ;
59012: LD_ADDR_VAR 0 5
59016: PUSH
59017: LD_VAR 0 5
59021: PUSH
59022: LD_VAR 0 8
59026: DIFF
59027: ST_TO_ADDR
59028: GO 58996
59030: POP
59031: POP
// if not list then
59032: LD_VAR 0 5
59036: NOT
59037: IFFALSE 59041
// exit ;
59039: GO 59845
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
59041: LD_VAR 0 12
59045: PUSH
59046: LD_INT 3
59048: EQUAL
59049: PUSH
59050: LD_INT 49
59052: PUSH
59053: LD_VAR 0 5
59057: IN
59058: AND
59059: PUSH
59060: LD_INT 31
59062: PPUSH
59063: LD_VAR 0 16
59067: PPUSH
59068: CALL_OW 321
59072: PUSH
59073: LD_INT 2
59075: EQUAL
59076: AND
59077: IFFALSE 59137
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
59079: LD_INT 22
59081: PUSH
59082: LD_VAR 0 16
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 35
59093: PUSH
59094: LD_INT 49
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 91
59103: PUSH
59104: LD_VAR 0 1
59108: PUSH
59109: LD_INT 10
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: PPUSH
59122: CALL_OW 69
59126: NOT
59127: IFFALSE 59137
// weapon := ru_time_lapser ;
59129: LD_ADDR_VAR 0 18
59133: PUSH
59134: LD_INT 49
59136: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
59137: LD_VAR 0 12
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: IN
59152: PUSH
59153: LD_INT 11
59155: PUSH
59156: LD_VAR 0 5
59160: IN
59161: PUSH
59162: LD_INT 30
59164: PUSH
59165: LD_VAR 0 5
59169: IN
59170: OR
59171: AND
59172: PUSH
59173: LD_INT 6
59175: PPUSH
59176: LD_VAR 0 16
59180: PPUSH
59181: CALL_OW 321
59185: PUSH
59186: LD_INT 2
59188: EQUAL
59189: AND
59190: IFFALSE 59355
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
59192: LD_INT 22
59194: PUSH
59195: LD_VAR 0 16
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: LD_INT 35
59209: PUSH
59210: LD_INT 11
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 35
59219: PUSH
59220: LD_INT 30
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 91
59234: PUSH
59235: LD_VAR 0 1
59239: PUSH
59240: LD_INT 18
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: PPUSH
59253: CALL_OW 69
59257: NOT
59258: PUSH
59259: LD_INT 22
59261: PUSH
59262: LD_VAR 0 16
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 30
59276: PUSH
59277: LD_INT 32
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 30
59286: PUSH
59287: LD_INT 33
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 91
59301: PUSH
59302: LD_VAR 0 1
59306: PUSH
59307: LD_INT 12
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: PPUSH
59323: CALL_OW 69
59327: PUSH
59328: LD_INT 2
59330: GREATER
59331: AND
59332: IFFALSE 59355
// weapon := [ us_radar , ar_radar ] [ nat ] ;
59334: LD_ADDR_VAR 0 18
59338: PUSH
59339: LD_INT 11
59341: PUSH
59342: LD_INT 30
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_VAR 0 12
59353: ARRAY
59354: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
59355: LD_VAR 0 18
59359: NOT
59360: PUSH
59361: LD_INT 40
59363: PPUSH
59364: LD_VAR 0 16
59368: PPUSH
59369: CALL_OW 321
59373: PUSH
59374: LD_INT 2
59376: EQUAL
59377: AND
59378: PUSH
59379: LD_INT 7
59381: PUSH
59382: LD_VAR 0 5
59386: IN
59387: PUSH
59388: LD_INT 28
59390: PUSH
59391: LD_VAR 0 5
59395: IN
59396: OR
59397: PUSH
59398: LD_INT 45
59400: PUSH
59401: LD_VAR 0 5
59405: IN
59406: OR
59407: AND
59408: IFFALSE 59662
// begin hex := GetHexInfo ( x , y ) ;
59410: LD_ADDR_VAR 0 4
59414: PUSH
59415: LD_VAR 0 10
59419: PPUSH
59420: LD_VAR 0 11
59424: PPUSH
59425: CALL_OW 546
59429: ST_TO_ADDR
// if hex [ 1 ] then
59430: LD_VAR 0 4
59434: PUSH
59435: LD_INT 1
59437: ARRAY
59438: IFFALSE 59442
// exit ;
59440: GO 59845
// height := hex [ 2 ] ;
59442: LD_ADDR_VAR 0 15
59446: PUSH
59447: LD_VAR 0 4
59451: PUSH
59452: LD_INT 2
59454: ARRAY
59455: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
59456: LD_ADDR_VAR 0 14
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: LD_INT 5
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: ST_TO_ADDR
// for i in tmp do
59479: LD_ADDR_VAR 0 8
59483: PUSH
59484: LD_VAR 0 14
59488: PUSH
59489: FOR_IN
59490: IFFALSE 59660
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
59492: LD_ADDR_VAR 0 9
59496: PUSH
59497: LD_VAR 0 10
59501: PPUSH
59502: LD_VAR 0 8
59506: PPUSH
59507: LD_INT 5
59509: PPUSH
59510: CALL_OW 272
59514: PUSH
59515: LD_VAR 0 11
59519: PPUSH
59520: LD_VAR 0 8
59524: PPUSH
59525: LD_INT 5
59527: PPUSH
59528: CALL_OW 273
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
59537: LD_VAR 0 9
59541: PUSH
59542: LD_INT 1
59544: ARRAY
59545: PPUSH
59546: LD_VAR 0 9
59550: PUSH
59551: LD_INT 2
59553: ARRAY
59554: PPUSH
59555: CALL_OW 488
59559: IFFALSE 59658
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
59561: LD_ADDR_VAR 0 4
59565: PUSH
59566: LD_VAR 0 9
59570: PUSH
59571: LD_INT 1
59573: ARRAY
59574: PPUSH
59575: LD_VAR 0 9
59579: PUSH
59580: LD_INT 2
59582: ARRAY
59583: PPUSH
59584: CALL_OW 546
59588: ST_TO_ADDR
// if hex [ 1 ] then
59589: LD_VAR 0 4
59593: PUSH
59594: LD_INT 1
59596: ARRAY
59597: IFFALSE 59601
// continue ;
59599: GO 59489
// h := hex [ 2 ] ;
59601: LD_ADDR_VAR 0 13
59605: PUSH
59606: LD_VAR 0 4
59610: PUSH
59611: LD_INT 2
59613: ARRAY
59614: ST_TO_ADDR
// if h + 7 < height then
59615: LD_VAR 0 13
59619: PUSH
59620: LD_INT 7
59622: PLUS
59623: PUSH
59624: LD_VAR 0 15
59628: LESS
59629: IFFALSE 59658
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
59631: LD_ADDR_VAR 0 18
59635: PUSH
59636: LD_INT 7
59638: PUSH
59639: LD_INT 28
59641: PUSH
59642: LD_INT 45
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: LIST
59649: PUSH
59650: LD_VAR 0 12
59654: ARRAY
59655: ST_TO_ADDR
// break ;
59656: GO 59660
// end ; end ; end ;
59658: GO 59489
59660: POP
59661: POP
// end ; if not weapon then
59662: LD_VAR 0 18
59666: NOT
59667: IFFALSE 59727
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
59669: LD_ADDR_VAR 0 5
59673: PUSH
59674: LD_VAR 0 5
59678: PUSH
59679: LD_INT 11
59681: PUSH
59682: LD_INT 30
59684: PUSH
59685: LD_INT 49
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: DIFF
59693: ST_TO_ADDR
// if not list then
59694: LD_VAR 0 5
59698: NOT
59699: IFFALSE 59703
// exit ;
59701: GO 59845
// weapon := list [ rand ( 1 , list ) ] ;
59703: LD_ADDR_VAR 0 18
59707: PUSH
59708: LD_VAR 0 5
59712: PUSH
59713: LD_INT 1
59715: PPUSH
59716: LD_VAR 0 5
59720: PPUSH
59721: CALL_OW 12
59725: ARRAY
59726: ST_TO_ADDR
// end ; if weapon then
59727: LD_VAR 0 18
59731: IFFALSE 59845
// begin tmp := CostOfWeapon ( weapon ) ;
59733: LD_ADDR_VAR 0 14
59737: PUSH
59738: LD_VAR 0 18
59742: PPUSH
59743: CALL_OW 451
59747: ST_TO_ADDR
// j := GetBase ( tower ) ;
59748: LD_ADDR_VAR 0 9
59752: PUSH
59753: LD_VAR 0 1
59757: PPUSH
59758: CALL_OW 274
59762: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
59763: LD_VAR 0 9
59767: PPUSH
59768: LD_INT 1
59770: PPUSH
59771: CALL_OW 275
59775: PUSH
59776: LD_VAR 0 14
59780: PUSH
59781: LD_INT 1
59783: ARRAY
59784: GREATEREQUAL
59785: PUSH
59786: LD_VAR 0 9
59790: PPUSH
59791: LD_INT 2
59793: PPUSH
59794: CALL_OW 275
59798: PUSH
59799: LD_VAR 0 14
59803: PUSH
59804: LD_INT 2
59806: ARRAY
59807: GREATEREQUAL
59808: AND
59809: PUSH
59810: LD_VAR 0 9
59814: PPUSH
59815: LD_INT 3
59817: PPUSH
59818: CALL_OW 275
59822: PUSH
59823: LD_VAR 0 14
59827: PUSH
59828: LD_INT 3
59830: ARRAY
59831: GREATEREQUAL
59832: AND
59833: IFFALSE 59845
// result := weapon ;
59835: LD_ADDR_VAR 0 3
59839: PUSH
59840: LD_VAR 0 18
59844: ST_TO_ADDR
// end ; end ;
59845: LD_VAR 0 3
59849: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
59850: LD_INT 0
59852: PPUSH
59853: PPUSH
// result := true ;
59854: LD_ADDR_VAR 0 3
59858: PUSH
59859: LD_INT 1
59861: ST_TO_ADDR
// if array1 = array2 then
59862: LD_VAR 0 1
59866: PUSH
59867: LD_VAR 0 2
59871: EQUAL
59872: IFFALSE 59932
// begin for i = 1 to array1 do
59874: LD_ADDR_VAR 0 4
59878: PUSH
59879: DOUBLE
59880: LD_INT 1
59882: DEC
59883: ST_TO_ADDR
59884: LD_VAR 0 1
59888: PUSH
59889: FOR_TO
59890: IFFALSE 59928
// if array1 [ i ] <> array2 [ i ] then
59892: LD_VAR 0 1
59896: PUSH
59897: LD_VAR 0 4
59901: ARRAY
59902: PUSH
59903: LD_VAR 0 2
59907: PUSH
59908: LD_VAR 0 4
59912: ARRAY
59913: NONEQUAL
59914: IFFALSE 59926
// begin result := false ;
59916: LD_ADDR_VAR 0 3
59920: PUSH
59921: LD_INT 0
59923: ST_TO_ADDR
// break ;
59924: GO 59928
// end ;
59926: GO 59889
59928: POP
59929: POP
// end else
59930: GO 59940
// result := false ;
59932: LD_ADDR_VAR 0 3
59936: PUSH
59937: LD_INT 0
59939: ST_TO_ADDR
// end ;
59940: LD_VAR 0 3
59944: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
59945: LD_INT 0
59947: PPUSH
59948: PPUSH
59949: PPUSH
// pom := GetBase ( fac ) ;
59950: LD_ADDR_VAR 0 5
59954: PUSH
59955: LD_VAR 0 1
59959: PPUSH
59960: CALL_OW 274
59964: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
59965: LD_ADDR_VAR 0 4
59969: PUSH
59970: LD_VAR 0 2
59974: PUSH
59975: LD_INT 1
59977: ARRAY
59978: PPUSH
59979: LD_VAR 0 2
59983: PUSH
59984: LD_INT 2
59986: ARRAY
59987: PPUSH
59988: LD_VAR 0 2
59992: PUSH
59993: LD_INT 3
59995: ARRAY
59996: PPUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_INT 4
60004: ARRAY
60005: PPUSH
60006: CALL_OW 449
60010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60011: LD_ADDR_VAR 0 3
60015: PUSH
60016: LD_VAR 0 5
60020: PPUSH
60021: LD_INT 1
60023: PPUSH
60024: CALL_OW 275
60028: PUSH
60029: LD_VAR 0 4
60033: PUSH
60034: LD_INT 1
60036: ARRAY
60037: GREATEREQUAL
60038: PUSH
60039: LD_VAR 0 5
60043: PPUSH
60044: LD_INT 2
60046: PPUSH
60047: CALL_OW 275
60051: PUSH
60052: LD_VAR 0 4
60056: PUSH
60057: LD_INT 2
60059: ARRAY
60060: GREATEREQUAL
60061: AND
60062: PUSH
60063: LD_VAR 0 5
60067: PPUSH
60068: LD_INT 3
60070: PPUSH
60071: CALL_OW 275
60075: PUSH
60076: LD_VAR 0 4
60080: PUSH
60081: LD_INT 3
60083: ARRAY
60084: GREATEREQUAL
60085: AND
60086: ST_TO_ADDR
// end ;
60087: LD_VAR 0 3
60091: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
60096: PPUSH
60097: PPUSH
// pom := GetBase ( building ) ;
60098: LD_ADDR_VAR 0 3
60102: PUSH
60103: LD_VAR 0 1
60107: PPUSH
60108: CALL_OW 274
60112: ST_TO_ADDR
// if not pom then
60113: LD_VAR 0 3
60117: NOT
60118: IFFALSE 60122
// exit ;
60120: GO 60292
// btype := GetBType ( building ) ;
60122: LD_ADDR_VAR 0 5
60126: PUSH
60127: LD_VAR 0 1
60131: PPUSH
60132: CALL_OW 266
60136: ST_TO_ADDR
// if btype = b_armoury then
60137: LD_VAR 0 5
60141: PUSH
60142: LD_INT 4
60144: EQUAL
60145: IFFALSE 60155
// btype := b_barracks ;
60147: LD_ADDR_VAR 0 5
60151: PUSH
60152: LD_INT 5
60154: ST_TO_ADDR
// if btype = b_depot then
60155: LD_VAR 0 5
60159: PUSH
60160: LD_INT 0
60162: EQUAL
60163: IFFALSE 60173
// btype := b_warehouse ;
60165: LD_ADDR_VAR 0 5
60169: PUSH
60170: LD_INT 1
60172: ST_TO_ADDR
// if btype = b_workshop then
60173: LD_VAR 0 5
60177: PUSH
60178: LD_INT 2
60180: EQUAL
60181: IFFALSE 60191
// btype := b_factory ;
60183: LD_ADDR_VAR 0 5
60187: PUSH
60188: LD_INT 3
60190: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60191: LD_ADDR_VAR 0 4
60195: PUSH
60196: LD_VAR 0 5
60200: PPUSH
60201: LD_VAR 0 1
60205: PPUSH
60206: CALL_OW 248
60210: PPUSH
60211: CALL_OW 450
60215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60216: LD_ADDR_VAR 0 2
60220: PUSH
60221: LD_VAR 0 3
60225: PPUSH
60226: LD_INT 1
60228: PPUSH
60229: CALL_OW 275
60233: PUSH
60234: LD_VAR 0 4
60238: PUSH
60239: LD_INT 1
60241: ARRAY
60242: GREATEREQUAL
60243: PUSH
60244: LD_VAR 0 3
60248: PPUSH
60249: LD_INT 2
60251: PPUSH
60252: CALL_OW 275
60256: PUSH
60257: LD_VAR 0 4
60261: PUSH
60262: LD_INT 2
60264: ARRAY
60265: GREATEREQUAL
60266: AND
60267: PUSH
60268: LD_VAR 0 3
60272: PPUSH
60273: LD_INT 3
60275: PPUSH
60276: CALL_OW 275
60280: PUSH
60281: LD_VAR 0 4
60285: PUSH
60286: LD_INT 3
60288: ARRAY
60289: GREATEREQUAL
60290: AND
60291: ST_TO_ADDR
// end ;
60292: LD_VAR 0 2
60296: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
60297: LD_INT 0
60299: PPUSH
60300: PPUSH
60301: PPUSH
// pom := GetBase ( building ) ;
60302: LD_ADDR_VAR 0 4
60306: PUSH
60307: LD_VAR 0 1
60311: PPUSH
60312: CALL_OW 274
60316: ST_TO_ADDR
// if not pom then
60317: LD_VAR 0 4
60321: NOT
60322: IFFALSE 60326
// exit ;
60324: GO 60427
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60326: LD_ADDR_VAR 0 5
60330: PUSH
60331: LD_VAR 0 2
60335: PPUSH
60336: LD_VAR 0 1
60340: PPUSH
60341: CALL_OW 248
60345: PPUSH
60346: CALL_OW 450
60350: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60351: LD_ADDR_VAR 0 3
60355: PUSH
60356: LD_VAR 0 4
60360: PPUSH
60361: LD_INT 1
60363: PPUSH
60364: CALL_OW 275
60368: PUSH
60369: LD_VAR 0 5
60373: PUSH
60374: LD_INT 1
60376: ARRAY
60377: GREATEREQUAL
60378: PUSH
60379: LD_VAR 0 4
60383: PPUSH
60384: LD_INT 2
60386: PPUSH
60387: CALL_OW 275
60391: PUSH
60392: LD_VAR 0 5
60396: PUSH
60397: LD_INT 2
60399: ARRAY
60400: GREATEREQUAL
60401: AND
60402: PUSH
60403: LD_VAR 0 4
60407: PPUSH
60408: LD_INT 3
60410: PPUSH
60411: CALL_OW 275
60415: PUSH
60416: LD_VAR 0 5
60420: PUSH
60421: LD_INT 3
60423: ARRAY
60424: GREATEREQUAL
60425: AND
60426: ST_TO_ADDR
// end ;
60427: LD_VAR 0 3
60431: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
60432: LD_INT 0
60434: PPUSH
60435: PPUSH
60436: PPUSH
60437: PPUSH
60438: PPUSH
60439: PPUSH
60440: PPUSH
60441: PPUSH
60442: PPUSH
60443: PPUSH
// result := false ;
60444: LD_ADDR_VAR 0 6
60448: PUSH
60449: LD_INT 0
60451: ST_TO_ADDR
// if not base or not btype or not x or not y then
60452: LD_VAR 0 1
60456: NOT
60457: PUSH
60458: LD_VAR 0 2
60462: NOT
60463: OR
60464: PUSH
60465: LD_VAR 0 3
60469: NOT
60470: OR
60471: PUSH
60472: LD_VAR 0 4
60476: NOT
60477: OR
60478: IFFALSE 60482
// exit ;
60480: GO 61091
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
60482: LD_ADDR_VAR 0 12
60486: PUSH
60487: LD_VAR 0 2
60491: PPUSH
60492: LD_VAR 0 3
60496: PPUSH
60497: LD_VAR 0 4
60501: PPUSH
60502: LD_VAR 0 5
60506: PPUSH
60507: LD_VAR 0 1
60511: PUSH
60512: LD_INT 1
60514: ARRAY
60515: PPUSH
60516: CALL_OW 248
60520: PPUSH
60521: LD_INT 0
60523: PPUSH
60524: CALL 61928 0 6
60528: ST_TO_ADDR
// if not hexes then
60529: LD_VAR 0 12
60533: NOT
60534: IFFALSE 60538
// exit ;
60536: GO 61091
// for i = 1 to hexes do
60538: LD_ADDR_VAR 0 7
60542: PUSH
60543: DOUBLE
60544: LD_INT 1
60546: DEC
60547: ST_TO_ADDR
60548: LD_VAR 0 12
60552: PUSH
60553: FOR_TO
60554: IFFALSE 61089
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60556: LD_ADDR_VAR 0 11
60560: PUSH
60561: LD_VAR 0 12
60565: PUSH
60566: LD_VAR 0 7
60570: ARRAY
60571: PUSH
60572: LD_INT 1
60574: ARRAY
60575: PPUSH
60576: LD_VAR 0 12
60580: PUSH
60581: LD_VAR 0 7
60585: ARRAY
60586: PUSH
60587: LD_INT 2
60589: ARRAY
60590: PPUSH
60591: CALL_OW 428
60595: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
60596: LD_VAR 0 12
60600: PUSH
60601: LD_VAR 0 7
60605: ARRAY
60606: PUSH
60607: LD_INT 1
60609: ARRAY
60610: PPUSH
60611: LD_VAR 0 12
60615: PUSH
60616: LD_VAR 0 7
60620: ARRAY
60621: PUSH
60622: LD_INT 2
60624: ARRAY
60625: PPUSH
60626: CALL_OW 351
60630: PUSH
60631: LD_VAR 0 12
60635: PUSH
60636: LD_VAR 0 7
60640: ARRAY
60641: PUSH
60642: LD_INT 1
60644: ARRAY
60645: PPUSH
60646: LD_VAR 0 12
60650: PUSH
60651: LD_VAR 0 7
60655: ARRAY
60656: PUSH
60657: LD_INT 2
60659: ARRAY
60660: PPUSH
60661: CALL_OW 488
60665: NOT
60666: OR
60667: PUSH
60668: LD_VAR 0 11
60672: PPUSH
60673: CALL_OW 247
60677: PUSH
60678: LD_INT 3
60680: EQUAL
60681: OR
60682: IFFALSE 60688
// exit ;
60684: POP
60685: POP
60686: GO 61091
// if not tmp or not tmp in base then
60688: LD_VAR 0 11
60692: NOT
60693: PUSH
60694: LD_VAR 0 11
60698: PUSH
60699: LD_VAR 0 1
60703: IN
60704: NOT
60705: OR
60706: IFFALSE 60710
// continue ;
60708: GO 60553
// result := true ;
60710: LD_ADDR_VAR 0 6
60714: PUSH
60715: LD_INT 1
60717: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60718: LD_ADDR_VAR 0 15
60722: PUSH
60723: LD_VAR 0 1
60727: PPUSH
60728: LD_INT 22
60730: PUSH
60731: LD_VAR 0 11
60735: PPUSH
60736: CALL_OW 255
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 30
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 30
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: LIST
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PPUSH
60777: CALL_OW 72
60781: ST_TO_ADDR
// if dep then
60782: LD_VAR 0 15
60786: IFFALSE 60922
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
60788: LD_ADDR_VAR 0 14
60792: PUSH
60793: LD_VAR 0 15
60797: PUSH
60798: LD_INT 1
60800: ARRAY
60801: PPUSH
60802: CALL_OW 250
60806: PPUSH
60807: LD_VAR 0 15
60811: PUSH
60812: LD_INT 1
60814: ARRAY
60815: PPUSH
60816: CALL_OW 254
60820: PPUSH
60821: LD_INT 5
60823: PPUSH
60824: CALL_OW 272
60828: PUSH
60829: LD_VAR 0 15
60833: PUSH
60834: LD_INT 1
60836: ARRAY
60837: PPUSH
60838: CALL_OW 251
60842: PPUSH
60843: LD_VAR 0 15
60847: PUSH
60848: LD_INT 1
60850: ARRAY
60851: PPUSH
60852: CALL_OW 254
60856: PPUSH
60857: LD_INT 5
60859: PPUSH
60860: CALL_OW 273
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
60869: LD_VAR 0 14
60873: PUSH
60874: LD_INT 1
60876: ARRAY
60877: PPUSH
60878: LD_VAR 0 14
60882: PUSH
60883: LD_INT 2
60885: ARRAY
60886: PPUSH
60887: CALL_OW 488
60891: IFFALSE 60922
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
60893: LD_VAR 0 11
60897: PPUSH
60898: LD_VAR 0 14
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PPUSH
60907: LD_VAR 0 14
60911: PUSH
60912: LD_INT 2
60914: ARRAY
60915: PPUSH
60916: CALL_OW 111
// continue ;
60920: GO 60553
// end ; end ; r := GetDir ( tmp ) ;
60922: LD_ADDR_VAR 0 13
60926: PUSH
60927: LD_VAR 0 11
60931: PPUSH
60932: CALL_OW 254
60936: ST_TO_ADDR
// if r = 5 then
60937: LD_VAR 0 13
60941: PUSH
60942: LD_INT 5
60944: EQUAL
60945: IFFALSE 60955
// r := 0 ;
60947: LD_ADDR_VAR 0 13
60951: PUSH
60952: LD_INT 0
60954: ST_TO_ADDR
// for j = r to 5 do
60955: LD_ADDR_VAR 0 8
60959: PUSH
60960: DOUBLE
60961: LD_VAR 0 13
60965: DEC
60966: ST_TO_ADDR
60967: LD_INT 5
60969: PUSH
60970: FOR_TO
60971: IFFALSE 61085
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
60973: LD_ADDR_VAR 0 9
60977: PUSH
60978: LD_VAR 0 11
60982: PPUSH
60983: CALL_OW 250
60987: PPUSH
60988: LD_VAR 0 8
60992: PPUSH
60993: LD_INT 2
60995: PPUSH
60996: CALL_OW 272
61000: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
61001: LD_ADDR_VAR 0 10
61005: PUSH
61006: LD_VAR 0 11
61010: PPUSH
61011: CALL_OW 251
61015: PPUSH
61016: LD_VAR 0 8
61020: PPUSH
61021: LD_INT 2
61023: PPUSH
61024: CALL_OW 273
61028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
61029: LD_VAR 0 9
61033: PPUSH
61034: LD_VAR 0 10
61038: PPUSH
61039: CALL_OW 488
61043: PUSH
61044: LD_VAR 0 9
61048: PPUSH
61049: LD_VAR 0 10
61053: PPUSH
61054: CALL_OW 428
61058: NOT
61059: AND
61060: IFFALSE 61083
// begin ComMoveXY ( tmp , _x , _y ) ;
61062: LD_VAR 0 11
61066: PPUSH
61067: LD_VAR 0 9
61071: PPUSH
61072: LD_VAR 0 10
61076: PPUSH
61077: CALL_OW 111
// break ;
61081: GO 61085
// end ; end ;
61083: GO 60970
61085: POP
61086: POP
// end ;
61087: GO 60553
61089: POP
61090: POP
// end ;
61091: LD_VAR 0 6
61095: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
61096: LD_INT 0
61098: PPUSH
61099: PPUSH
61100: PPUSH
61101: PPUSH
61102: PPUSH
61103: PPUSH
61104: PPUSH
61105: PPUSH
61106: PPUSH
61107: PPUSH
// result := false ;
61108: LD_ADDR_VAR 0 6
61112: PUSH
61113: LD_INT 0
61115: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
61116: LD_VAR 0 1
61120: NOT
61121: PUSH
61122: LD_VAR 0 1
61126: PPUSH
61127: CALL_OW 266
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: IN
61142: NOT
61143: OR
61144: PUSH
61145: LD_VAR 0 2
61149: NOT
61150: OR
61151: PUSH
61152: LD_VAR 0 5
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: LD_INT 4
61171: PUSH
61172: LD_INT 5
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: IN
61183: NOT
61184: OR
61185: PUSH
61186: LD_VAR 0 3
61190: PPUSH
61191: LD_VAR 0 4
61195: PPUSH
61196: CALL_OW 488
61200: NOT
61201: OR
61202: IFFALSE 61206
// exit ;
61204: GO 61923
// pom := GetBase ( depot ) ;
61206: LD_ADDR_VAR 0 10
61210: PUSH
61211: LD_VAR 0 1
61215: PPUSH
61216: CALL_OW 274
61220: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
61221: LD_ADDR_VAR 0 11
61225: PUSH
61226: LD_VAR 0 2
61230: PPUSH
61231: LD_VAR 0 1
61235: PPUSH
61236: CALL_OW 248
61240: PPUSH
61241: CALL_OW 450
61245: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
61246: LD_VAR 0 10
61250: PPUSH
61251: LD_INT 1
61253: PPUSH
61254: CALL_OW 275
61258: PUSH
61259: LD_VAR 0 11
61263: PUSH
61264: LD_INT 1
61266: ARRAY
61267: GREATEREQUAL
61268: PUSH
61269: LD_VAR 0 10
61273: PPUSH
61274: LD_INT 2
61276: PPUSH
61277: CALL_OW 275
61281: PUSH
61282: LD_VAR 0 11
61286: PUSH
61287: LD_INT 2
61289: ARRAY
61290: GREATEREQUAL
61291: AND
61292: PUSH
61293: LD_VAR 0 10
61297: PPUSH
61298: LD_INT 3
61300: PPUSH
61301: CALL_OW 275
61305: PUSH
61306: LD_VAR 0 11
61310: PUSH
61311: LD_INT 3
61313: ARRAY
61314: GREATEREQUAL
61315: AND
61316: NOT
61317: IFFALSE 61321
// exit ;
61319: GO 61923
// if GetBType ( depot ) = b_depot then
61321: LD_VAR 0 1
61325: PPUSH
61326: CALL_OW 266
61330: PUSH
61331: LD_INT 0
61333: EQUAL
61334: IFFALSE 61346
// dist := 28 else
61336: LD_ADDR_VAR 0 14
61340: PUSH
61341: LD_INT 28
61343: ST_TO_ADDR
61344: GO 61354
// dist := 36 ;
61346: LD_ADDR_VAR 0 14
61350: PUSH
61351: LD_INT 36
61353: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
61354: LD_VAR 0 1
61358: PPUSH
61359: LD_VAR 0 3
61363: PPUSH
61364: LD_VAR 0 4
61368: PPUSH
61369: CALL_OW 297
61373: PUSH
61374: LD_VAR 0 14
61378: GREATER
61379: IFFALSE 61383
// exit ;
61381: GO 61923
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
61383: LD_ADDR_VAR 0 12
61387: PUSH
61388: LD_VAR 0 2
61392: PPUSH
61393: LD_VAR 0 3
61397: PPUSH
61398: LD_VAR 0 4
61402: PPUSH
61403: LD_VAR 0 5
61407: PPUSH
61408: LD_VAR 0 1
61412: PPUSH
61413: CALL_OW 248
61417: PPUSH
61418: LD_INT 0
61420: PPUSH
61421: CALL 61928 0 6
61425: ST_TO_ADDR
// if not hexes then
61426: LD_VAR 0 12
61430: NOT
61431: IFFALSE 61435
// exit ;
61433: GO 61923
// hex := GetHexInfo ( x , y ) ;
61435: LD_ADDR_VAR 0 15
61439: PUSH
61440: LD_VAR 0 3
61444: PPUSH
61445: LD_VAR 0 4
61449: PPUSH
61450: CALL_OW 546
61454: ST_TO_ADDR
// if hex [ 1 ] then
61455: LD_VAR 0 15
61459: PUSH
61460: LD_INT 1
61462: ARRAY
61463: IFFALSE 61467
// exit ;
61465: GO 61923
// height := hex [ 2 ] ;
61467: LD_ADDR_VAR 0 13
61471: PUSH
61472: LD_VAR 0 15
61476: PUSH
61477: LD_INT 2
61479: ARRAY
61480: ST_TO_ADDR
// for i = 1 to hexes do
61481: LD_ADDR_VAR 0 7
61485: PUSH
61486: DOUBLE
61487: LD_INT 1
61489: DEC
61490: ST_TO_ADDR
61491: LD_VAR 0 12
61495: PUSH
61496: FOR_TO
61497: IFFALSE 61827
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
61499: LD_VAR 0 12
61503: PUSH
61504: LD_VAR 0 7
61508: ARRAY
61509: PUSH
61510: LD_INT 1
61512: ARRAY
61513: PPUSH
61514: LD_VAR 0 12
61518: PUSH
61519: LD_VAR 0 7
61523: ARRAY
61524: PUSH
61525: LD_INT 2
61527: ARRAY
61528: PPUSH
61529: CALL_OW 488
61533: NOT
61534: PUSH
61535: LD_VAR 0 12
61539: PUSH
61540: LD_VAR 0 7
61544: ARRAY
61545: PUSH
61546: LD_INT 1
61548: ARRAY
61549: PPUSH
61550: LD_VAR 0 12
61554: PUSH
61555: LD_VAR 0 7
61559: ARRAY
61560: PUSH
61561: LD_INT 2
61563: ARRAY
61564: PPUSH
61565: CALL_OW 428
61569: PUSH
61570: LD_INT 0
61572: GREATER
61573: OR
61574: PUSH
61575: LD_VAR 0 12
61579: PUSH
61580: LD_VAR 0 7
61584: ARRAY
61585: PUSH
61586: LD_INT 1
61588: ARRAY
61589: PPUSH
61590: LD_VAR 0 12
61594: PUSH
61595: LD_VAR 0 7
61599: ARRAY
61600: PUSH
61601: LD_INT 2
61603: ARRAY
61604: PPUSH
61605: CALL_OW 351
61609: OR
61610: IFFALSE 61616
// exit ;
61612: POP
61613: POP
61614: GO 61923
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61616: LD_ADDR_VAR 0 8
61620: PUSH
61621: LD_VAR 0 12
61625: PUSH
61626: LD_VAR 0 7
61630: ARRAY
61631: PUSH
61632: LD_INT 1
61634: ARRAY
61635: PPUSH
61636: LD_VAR 0 12
61640: PUSH
61641: LD_VAR 0 7
61645: ARRAY
61646: PUSH
61647: LD_INT 2
61649: ARRAY
61650: PPUSH
61651: CALL_OW 546
61655: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
61656: LD_VAR 0 8
61660: PUSH
61661: LD_INT 1
61663: ARRAY
61664: PUSH
61665: LD_VAR 0 8
61669: PUSH
61670: LD_INT 2
61672: ARRAY
61673: PUSH
61674: LD_VAR 0 13
61678: PUSH
61679: LD_INT 2
61681: PLUS
61682: GREATER
61683: OR
61684: PUSH
61685: LD_VAR 0 8
61689: PUSH
61690: LD_INT 2
61692: ARRAY
61693: PUSH
61694: LD_VAR 0 13
61698: PUSH
61699: LD_INT 2
61701: MINUS
61702: LESS
61703: OR
61704: PUSH
61705: LD_VAR 0 8
61709: PUSH
61710: LD_INT 3
61712: ARRAY
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 8
61719: PUSH
61720: LD_INT 9
61722: PUSH
61723: LD_INT 10
61725: PUSH
61726: LD_INT 11
61728: PUSH
61729: LD_INT 12
61731: PUSH
61732: LD_INT 13
61734: PUSH
61735: LD_INT 16
61737: PUSH
61738: LD_INT 17
61740: PUSH
61741: LD_INT 18
61743: PUSH
61744: LD_INT 19
61746: PUSH
61747: LD_INT 20
61749: PUSH
61750: LD_INT 21
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: IN
61768: NOT
61769: OR
61770: PUSH
61771: LD_VAR 0 8
61775: PUSH
61776: LD_INT 5
61778: ARRAY
61779: NOT
61780: OR
61781: PUSH
61782: LD_VAR 0 8
61786: PUSH
61787: LD_INT 6
61789: ARRAY
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 7
61799: PUSH
61800: LD_INT 9
61802: PUSH
61803: LD_INT 10
61805: PUSH
61806: LD_INT 11
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: IN
61817: NOT
61818: OR
61819: IFFALSE 61825
// exit ;
61821: POP
61822: POP
61823: GO 61923
// end ;
61825: GO 61496
61827: POP
61828: POP
// side := GetSide ( depot ) ;
61829: LD_ADDR_VAR 0 9
61833: PUSH
61834: LD_VAR 0 1
61838: PPUSH
61839: CALL_OW 255
61843: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
61844: LD_VAR 0 9
61848: PPUSH
61849: LD_VAR 0 3
61853: PPUSH
61854: LD_VAR 0 4
61858: PPUSH
61859: LD_INT 20
61861: PPUSH
61862: CALL 54577 0 4
61866: PUSH
61867: LD_INT 4
61869: ARRAY
61870: IFFALSE 61874
// exit ;
61872: GO 61923
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
61874: LD_VAR 0 2
61878: PUSH
61879: LD_INT 29
61881: PUSH
61882: LD_INT 30
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: IN
61889: PUSH
61890: LD_VAR 0 3
61894: PPUSH
61895: LD_VAR 0 4
61899: PPUSH
61900: LD_VAR 0 9
61904: PPUSH
61905: CALL_OW 440
61909: NOT
61910: AND
61911: IFFALSE 61915
// exit ;
61913: GO 61923
// result := true ;
61915: LD_ADDR_VAR 0 6
61919: PUSH
61920: LD_INT 1
61922: ST_TO_ADDR
// end ;
61923: LD_VAR 0 6
61927: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
61928: LD_INT 0
61930: PPUSH
61931: PPUSH
61932: PPUSH
61933: PPUSH
61934: PPUSH
61935: PPUSH
61936: PPUSH
61937: PPUSH
61938: PPUSH
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
61943: PPUSH
61944: PPUSH
61945: PPUSH
61946: PPUSH
61947: PPUSH
61948: PPUSH
61949: PPUSH
61950: PPUSH
61951: PPUSH
61952: PPUSH
61953: PPUSH
61954: PPUSH
61955: PPUSH
61956: PPUSH
61957: PPUSH
61958: PPUSH
61959: PPUSH
61960: PPUSH
61961: PPUSH
61962: PPUSH
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
61967: PPUSH
61968: PPUSH
61969: PPUSH
61970: PPUSH
61971: PPUSH
61972: PPUSH
61973: PPUSH
61974: PPUSH
61975: PPUSH
61976: PPUSH
61977: PPUSH
61978: PPUSH
61979: PPUSH
61980: PPUSH
61981: PPUSH
61982: PPUSH
61983: PPUSH
61984: PPUSH
61985: PPUSH
61986: PPUSH
61987: PPUSH
// result = [ ] ;
61988: LD_ADDR_VAR 0 7
61992: PUSH
61993: EMPTY
61994: ST_TO_ADDR
// temp_list = [ ] ;
61995: LD_ADDR_VAR 0 9
61999: PUSH
62000: EMPTY
62001: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
62002: LD_VAR 0 4
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 4
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: IN
62033: NOT
62034: PUSH
62035: LD_VAR 0 1
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: IN
62050: PUSH
62051: LD_VAR 0 5
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: LIST
62069: IN
62070: NOT
62071: AND
62072: OR
62073: IFFALSE 62077
// exit ;
62075: GO 80468
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
62077: LD_VAR 0 1
62081: PUSH
62082: LD_INT 6
62084: PUSH
62085: LD_INT 7
62087: PUSH
62088: LD_INT 8
62090: PUSH
62091: LD_INT 13
62093: PUSH
62094: LD_INT 12
62096: PUSH
62097: LD_INT 15
62099: PUSH
62100: LD_INT 11
62102: PUSH
62103: LD_INT 14
62105: PUSH
62106: LD_INT 10
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: IN
62120: IFFALSE 62130
// btype = b_lab ;
62122: LD_ADDR_VAR 0 1
62126: PUSH
62127: LD_INT 6
62129: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
62130: LD_VAR 0 6
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: IN
62149: NOT
62150: PUSH
62151: LD_VAR 0 1
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: LD_INT 6
62170: PUSH
62171: LD_INT 36
62173: PUSH
62174: LD_INT 4
62176: PUSH
62177: LD_INT 5
62179: PUSH
62180: LD_INT 31
62182: PUSH
62183: LD_INT 32
62185: PUSH
62186: LD_INT 33
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: IN
62202: NOT
62203: PUSH
62204: LD_VAR 0 6
62208: PUSH
62209: LD_INT 1
62211: EQUAL
62212: AND
62213: OR
62214: PUSH
62215: LD_VAR 0 1
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: IN
62230: NOT
62231: PUSH
62232: LD_VAR 0 6
62236: PUSH
62237: LD_INT 2
62239: EQUAL
62240: AND
62241: OR
62242: IFFALSE 62252
// mode = 0 ;
62244: LD_ADDR_VAR 0 6
62248: PUSH
62249: LD_INT 0
62251: ST_TO_ADDR
// case mode of 0 :
62252: LD_VAR 0 6
62256: PUSH
62257: LD_INT 0
62259: DOUBLE
62260: EQUAL
62261: IFTRUE 62265
62263: GO 73718
62265: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62266: LD_ADDR_VAR 0 11
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62459: LD_ADDR_VAR 0 12
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 3
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62655: LD_ADDR_VAR 0 13
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: LD_INT 3
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 3
62814: NEG
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: NEG
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62854: LD_ADDR_VAR 0 14
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 3
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63050: LD_ADDR_VAR 0 15
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63243: LD_ADDR_VAR 0 16
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 2
63378: NEG
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 3
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63436: LD_ADDR_VAR 0 17
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 2
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 1
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: NEG
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63666: LD_ADDR_VAR 0 18
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 1
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: NEG
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 2
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 2
63865: NEG
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63896: LD_ADDR_VAR 0 19
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 2
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 2
64095: NEG
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64126: LD_ADDR_VAR 0 20
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64356: LD_ADDR_VAR 0 21
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 2
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: NEG
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 2
64543: NEG
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64586: LD_ADDR_VAR 0 22
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 2
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 2
64773: NEG
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64816: LD_ADDR_VAR 0 23
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 2
64992: NEG
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 2
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: LD_INT 3
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: LD_INT 3
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 2
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
65096: LD_ADDR_VAR 0 24
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 2
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: NEG
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 2
65283: NEG
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: LD_INT 2
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 3
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 3
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
65372: LD_ADDR_VAR 0 25
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 2
65507: PUSH
65508: LD_INT 2
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 2
65571: NEG
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 3
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: LD_INT 3
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 3
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65646: LD_ADDR_VAR 0 26
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 2
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: LD_INT 2
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: LD_INT 2
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: LD_INT 2
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: LD_INT 2
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: LD_INT 3
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65922: LD_ADDR_VAR 0 27
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 1
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: LD_INT 1
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: LD_INT 1
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: NEG
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 2
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 2
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: NEG
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: LD_INT 2
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: LD_INT 2
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 2
66144: NEG
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: LD_INT 2
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66202: LD_ADDR_VAR 0 28
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 2
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: LD_INT 2
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 2
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: NEG
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 2
66401: NEG
66402: PUSH
66403: LD_INT 2
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: LD_INT 3
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 3
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: LD_INT 2
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66484: LD_ADDR_VAR 0 29
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: NEG
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: LD_INT 2
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: LD_INT 2
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: LD_INT 2
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: LD_INT 3
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: LD_INT 2
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 3
66728: NEG
66729: PUSH
66730: LD_INT 2
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66763: LD_ADDR_VAR 0 30
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: LD_INT 1
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: LD_INT 1
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: LD_INT 2
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 2
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: LD_INT 2
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: NEG
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: LD_INT 1
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 3
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: LD_INT 3
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PUSH
66997: LD_INT 1
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: LD_INT 1
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67041: LD_ADDR_VAR 0 31
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: LD_INT 1
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: LD_INT 1
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 1
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 2
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: LD_INT 1
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 2
67230: NEG
67231: PUSH
67232: LD_INT 3
67234: NEG
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 2
67242: PUSH
67243: LD_INT 1
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 3
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: LD_INT 3
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: LD_INT 2
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 3
67284: NEG
67285: PUSH
67286: LD_INT 2
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67319: LD_ADDR_VAR 0 32
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 1
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 1
67400: NEG
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: NEG
67509: PUSH
67510: LD_INT 3
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 2
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: LD_INT 3
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 2
67551: NEG
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: NEG
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67597: LD_ADDR_VAR 0 33
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 1
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: LD_INT 0
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: NEG
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: LD_INT 1
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 2
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 1
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 1
67741: NEG
67742: PUSH
67743: LD_INT 1
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 2
67752: NEG
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 2
67775: NEG
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 2
67787: NEG
67788: PUSH
67789: LD_INT 3
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: LD_INT 1
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 3
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: LD_INT 3
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: LD_INT 2
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 3
67841: NEG
67842: PUSH
67843: LD_INT 2
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67876: LD_ADDR_VAR 0 34
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 1
67934: NEG
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: LD_INT 2
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: LD_INT 1
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: LD_INT 2
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: LD_INT 1
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 2
68055: NEG
68056: PUSH
68057: LD_INT 2
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: NEG
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: LD_INT 2
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 2
68110: NEG
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 3
68121: NEG
68122: PUSH
68123: LD_INT 1
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68156: LD_ADDR_VAR 0 35
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: LD_INT 0
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: LD_INT 1
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: LD_INT 0
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 2
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 2
68247: NEG
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68268: LD_ADDR_VAR 0 36
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 1
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 2
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 1
68361: PUSH
68362: LD_INT 2
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68380: LD_ADDR_VAR 0 37
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: LD_INT 0
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 0
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_INT 1
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: NEG
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: LD_INT 1
68464: NEG
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68492: LD_ADDR_VAR 0 38
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: LD_INT 1
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 1
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: LD_INT 1
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 1
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: NEG
68562: PUSH
68563: LD_INT 1
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 2
68573: PUSH
68574: LD_INT 1
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: LD_INT 1
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68604: LD_ADDR_VAR 0 39
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: LD_INT 0
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 1
68642: PUSH
68643: LD_INT 1
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: LD_INT 1
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 1
68673: NEG
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 1
68685: NEG
68686: PUSH
68687: LD_INT 2
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 1
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68716: LD_ADDR_VAR 0 40
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 1
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 1
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: LD_INT 1
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 1
68774: NEG
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 1
68785: NEG
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 1
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68828: LD_ADDR_VAR 0 41
68832: PUSH
68833: LD_INT 0
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 1
68909: NEG
68910: PUSH
68911: LD_INT 2
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: LD_INT 1
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: LD_INT 0
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 2
68942: PUSH
68943: LD_INT 1
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 2
68952: PUSH
68953: LD_INT 2
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: LD_INT 2
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 2
68983: NEG
68984: PUSH
68985: LD_INT 0
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 2
68994: NEG
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 2
69006: NEG
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 3
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 2
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: PUSH
69052: LD_INT 1
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 3
69061: PUSH
69062: LD_INT 2
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: LD_INT 3
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 2
69081: PUSH
69082: LD_INT 3
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 2
69091: NEG
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 3
69102: NEG
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 3
69125: NEG
69126: PUSH
69127: LD_INT 2
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69178: LD_ADDR_VAR 0 42
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 1
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 1
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 1
69236: NEG
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: NEG
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: LD_INT 2
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: LD_INT 2
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: PUSH
69283: LD_INT 1
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 2
69303: PUSH
69304: LD_INT 2
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 1
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: LD_INT 2
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 1
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 2
69356: NEG
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 2
69368: NEG
69369: PUSH
69370: LD_INT 3
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: LD_INT 3
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: LD_INT 2
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 3
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 3
69424: PUSH
69425: LD_INT 3
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 2
69434: PUSH
69435: LD_INT 3
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 1
69444: PUSH
69445: LD_INT 3
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: LD_INT 3
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: LD_INT 2
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 3
69475: NEG
69476: PUSH
69477: LD_INT 2
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 3
69487: NEG
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69528: LD_ADDR_VAR 0 43
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 1
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 1
69597: NEG
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 1
69609: NEG
69610: PUSH
69611: LD_INT 2
69613: NEG
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 0
69621: PUSH
69622: LD_INT 2
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: LD_INT 1
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: LD_INT 1
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 1
69663: PUSH
69664: LD_INT 2
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: LD_INT 2
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 1
69683: NEG
69684: PUSH
69685: LD_INT 1
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 2
69694: NEG
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 2
69705: NEG
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 1
69717: NEG
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 3
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 1
69740: PUSH
69741: LD_INT 2
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 2
69751: PUSH
69752: LD_INT 1
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 3
69762: PUSH
69763: LD_INT 0
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 3
69772: PUSH
69773: LD_INT 1
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 1
69782: PUSH
69783: LD_INT 3
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 0
69792: PUSH
69793: LD_INT 3
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 1
69802: NEG
69803: PUSH
69804: LD_INT 2
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 2
69813: NEG
69814: PUSH
69815: LD_INT 1
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 3
69824: NEG
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: NEG
69836: PUSH
69837: LD_INT 1
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69876: LD_ADDR_VAR 0 44
69880: PUSH
69881: LD_INT 0
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: LD_INT 1
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 1
69914: PUSH
69915: LD_INT 1
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: LD_INT 1
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 1
69934: NEG
69935: PUSH
69936: LD_INT 0
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 1
69945: NEG
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 1
69957: NEG
69958: PUSH
69959: LD_INT 2
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 1
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: LD_INT 0
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 2
69990: PUSH
69991: LD_INT 1
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 2
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: LD_INT 2
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 2
70031: NEG
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 2
70054: NEG
70055: PUSH
70056: LD_INT 2
70058: NEG
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 2
70066: NEG
70067: PUSH
70068: LD_INT 3
70070: NEG
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 2
70078: PUSH
70079: LD_INT 1
70081: NEG
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 3
70099: PUSH
70100: LD_INT 1
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: LD_INT 3
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 2
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: LD_INT 1
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: LD_INT 0
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 3
70161: NEG
70162: PUSH
70163: LD_INT 1
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 3
70173: NEG
70174: PUSH
70175: LD_INT 2
70177: NEG
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 3
70185: NEG
70186: PUSH
70187: LD_INT 3
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70226: LD_ADDR_VAR 0 45
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: LD_INT 1
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 1
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: LD_INT 1
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: LD_INT 0
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: PUSH
70297: LD_INT 1
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 1
70307: NEG
70308: PUSH
70309: LD_INT 2
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: LD_INT 2
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 1
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 2
70341: PUSH
70342: LD_INT 1
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: LD_INT 2
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 1
70361: PUSH
70362: LD_INT 2
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 1
70381: NEG
70382: PUSH
70383: LD_INT 1
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 2
70392: NEG
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 2
70404: NEG
70405: PUSH
70406: LD_INT 2
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 2
70416: NEG
70417: PUSH
70418: LD_INT 3
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 1
70428: NEG
70429: PUSH
70430: LD_INT 3
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 3
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: LD_INT 2
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 3
70462: PUSH
70463: LD_INT 2
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 3
70472: PUSH
70473: LD_INT 3
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 2
70482: PUSH
70483: LD_INT 3
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 3
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 3
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 1
70512: NEG
70513: PUSH
70514: LD_INT 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 3
70523: NEG
70524: PUSH
70525: LD_INT 2
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 3
70535: NEG
70536: PUSH
70537: LD_INT 3
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70576: LD_ADDR_VAR 0 46
70580: PUSH
70581: LD_INT 0
70583: PUSH
70584: LD_INT 0
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 1
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 1
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 0
70624: PUSH
70625: LD_INT 1
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 1
70634: NEG
70635: PUSH
70636: LD_INT 0
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 1
70645: NEG
70646: PUSH
70647: LD_INT 1
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: LD_INT 2
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 0
70669: PUSH
70670: LD_INT 2
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 1
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 2
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: PUSH
70712: LD_INT 2
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 0
70721: PUSH
70722: LD_INT 2
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 1
70731: NEG
70732: PUSH
70733: LD_INT 1
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: NEG
70743: PUSH
70744: LD_INT 0
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 2
70753: NEG
70754: PUSH
70755: LD_INT 1
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 1
70765: NEG
70766: PUSH
70767: LD_INT 3
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: LD_INT 3
70780: NEG
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: PUSH
70789: LD_INT 2
70791: NEG
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 2
70799: PUSH
70800: LD_INT 1
70802: NEG
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 3
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 3
70820: PUSH
70821: LD_INT 1
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 1
70830: PUSH
70831: LD_INT 3
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: LD_INT 3
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 1
70850: NEG
70851: PUSH
70852: LD_INT 2
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 2
70861: NEG
70862: PUSH
70863: LD_INT 1
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 3
70872: NEG
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 3
70883: NEG
70884: PUSH
70885: LD_INT 1
70887: NEG
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70924: LD_ADDR_VAR 0 47
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 1
70962: PUSH
70963: LD_INT 1
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 0
70972: PUSH
70973: LD_INT 1
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 1
70982: NEG
70983: PUSH
70984: LD_INT 0
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 1
70993: NEG
70994: PUSH
70995: LD_INT 1
70997: NEG
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 1
71005: NEG
71006: PUSH
71007: LD_INT 2
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 0
71017: PUSH
71018: LD_INT 2
71020: NEG
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 1
71028: PUSH
71029: LD_INT 1
71031: NEG
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 2
71039: NEG
71040: PUSH
71041: LD_INT 1
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 2
71051: NEG
71052: PUSH
71053: LD_INT 2
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71075: LD_ADDR_VAR 0 48
71079: PUSH
71080: LD_INT 0
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 0
71092: PUSH
71093: LD_INT 1
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 1
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 1
71113: PUSH
71114: LD_INT 1
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 0
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: LD_INT 0
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 1
71144: NEG
71145: PUSH
71146: LD_INT 1
71148: NEG
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 1
71156: NEG
71157: PUSH
71158: LD_INT 2
71160: NEG
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: LD_INT 1
71182: NEG
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 2
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 2
71200: PUSH
71201: LD_INT 1
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71222: LD_ADDR_VAR 0 49
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: LD_INT 1
71242: NEG
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 1
71250: PUSH
71251: LD_INT 0
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 1
71260: PUSH
71261: LD_INT 1
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 0
71270: PUSH
71271: LD_INT 1
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 1
71280: NEG
71281: PUSH
71282: LD_INT 0
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 1
71291: NEG
71292: PUSH
71293: LD_INT 1
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 1
71303: PUSH
71304: LD_INT 1
71306: NEG
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 2
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 2
71324: PUSH
71325: LD_INT 1
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 2
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 1
71344: PUSH
71345: LD_INT 2
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71366: LD_ADDR_VAR 0 50
71370: PUSH
71371: LD_INT 0
71373: PUSH
71374: LD_INT 0
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 0
71383: PUSH
71384: LD_INT 1
71386: NEG
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 1
71394: PUSH
71395: LD_INT 0
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: LD_INT 1
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: LD_INT 1
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 1
71435: NEG
71436: PUSH
71437: LD_INT 1
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: PUSH
71448: LD_INT 1
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 2
71457: PUSH
71458: LD_INT 2
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 1
71467: PUSH
71468: LD_INT 2
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 0
71477: PUSH
71478: LD_INT 2
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 1
71487: NEG
71488: PUSH
71489: LD_INT 1
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71510: LD_ADDR_VAR 0 51
71514: PUSH
71515: LD_INT 0
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 0
71527: PUSH
71528: LD_INT 1
71530: NEG
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 1
71538: PUSH
71539: LD_INT 0
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 1
71548: PUSH
71549: LD_INT 1
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 0
71558: PUSH
71559: LD_INT 1
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 1
71568: NEG
71569: PUSH
71570: LD_INT 0
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 1
71579: NEG
71580: PUSH
71581: LD_INT 1
71583: NEG
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 1
71591: PUSH
71592: LD_INT 2
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: LD_INT 2
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 1
71611: NEG
71612: PUSH
71613: LD_INT 1
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 2
71622: NEG
71623: PUSH
71624: LD_INT 0
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 2
71633: NEG
71634: PUSH
71635: LD_INT 1
71637: NEG
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71657: LD_ADDR_VAR 0 52
71661: PUSH
71662: LD_INT 0
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 0
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: LD_INT 0
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 1
71695: PUSH
71696: LD_INT 1
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: LD_INT 1
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 1
71715: NEG
71716: PUSH
71717: LD_INT 0
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 1
71726: NEG
71727: PUSH
71728: LD_INT 1
71730: NEG
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 1
71738: NEG
71739: PUSH
71740: LD_INT 2
71742: NEG
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 1
71750: NEG
71751: PUSH
71752: LD_INT 1
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 2
71761: NEG
71762: PUSH
71763: LD_INT 0
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 2
71772: NEG
71773: PUSH
71774: LD_INT 1
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 2
71784: NEG
71785: PUSH
71786: LD_INT 2
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71808: LD_ADDR_VAR 0 53
71812: PUSH
71813: LD_INT 0
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 0
71825: PUSH
71826: LD_INT 1
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 1
71836: PUSH
71837: LD_INT 0
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 1
71846: PUSH
71847: LD_INT 1
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 1
71866: NEG
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 1
71877: NEG
71878: PUSH
71879: LD_INT 1
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 1
71889: NEG
71890: PUSH
71891: LD_INT 2
71893: NEG
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 0
71901: PUSH
71902: LD_INT 2
71904: NEG
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 1
71912: PUSH
71913: LD_INT 1
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 2
71923: PUSH
71924: LD_INT 0
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 2
71933: PUSH
71934: LD_INT 1
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 2
71943: PUSH
71944: LD_INT 2
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 1
71953: PUSH
71954: LD_INT 2
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: LD_INT 2
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 1
71973: NEG
71974: PUSH
71975: LD_INT 1
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 2
71984: NEG
71985: PUSH
71986: LD_INT 0
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 2
71995: NEG
71996: PUSH
71997: LD_INT 1
71999: NEG
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 2
72007: NEG
72008: PUSH
72009: LD_INT 2
72011: NEG
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72038: LD_ADDR_VAR 0 54
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: LD_INT 0
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 1
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: PUSH
72077: LD_INT 1
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 1
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 1
72096: NEG
72097: PUSH
72098: LD_INT 0
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 1
72107: NEG
72108: PUSH
72109: LD_INT 1
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: LD_INT 2
72123: NEG
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 0
72131: PUSH
72132: LD_INT 2
72134: NEG
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 1
72142: PUSH
72143: LD_INT 1
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 2
72153: PUSH
72154: LD_INT 0
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 2
72163: PUSH
72164: LD_INT 1
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 2
72173: PUSH
72174: LD_INT 2
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 1
72183: PUSH
72184: LD_INT 2
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: LD_INT 2
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 1
72203: NEG
72204: PUSH
72205: LD_INT 1
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 2
72214: NEG
72215: PUSH
72216: LD_INT 0
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 2
72225: NEG
72226: PUSH
72227: LD_INT 1
72229: NEG
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 2
72237: NEG
72238: PUSH
72239: LD_INT 2
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72268: LD_ADDR_VAR 0 55
72272: PUSH
72273: LD_INT 0
72275: PUSH
72276: LD_INT 0
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 0
72285: PUSH
72286: LD_INT 1
72288: NEG
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 1
72296: PUSH
72297: LD_INT 0
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 1
72306: PUSH
72307: LD_INT 1
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 0
72316: PUSH
72317: LD_INT 1
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 1
72326: NEG
72327: PUSH
72328: LD_INT 0
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 1
72337: NEG
72338: PUSH
72339: LD_INT 1
72341: NEG
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 1
72349: NEG
72350: PUSH
72351: LD_INT 2
72353: NEG
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 0
72361: PUSH
72362: LD_INT 2
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 1
72372: PUSH
72373: LD_INT 1
72375: NEG
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 2
72383: PUSH
72384: LD_INT 0
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 2
72393: PUSH
72394: LD_INT 1
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 2
72403: PUSH
72404: LD_INT 2
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 1
72413: PUSH
72414: LD_INT 2
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 0
72423: PUSH
72424: LD_INT 2
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 1
72433: NEG
72434: PUSH
72435: LD_INT 1
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 2
72444: NEG
72445: PUSH
72446: LD_INT 0
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 2
72455: NEG
72456: PUSH
72457: LD_INT 1
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 2
72467: NEG
72468: PUSH
72469: LD_INT 2
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72498: LD_ADDR_VAR 0 56
72502: PUSH
72503: LD_INT 0
72505: PUSH
72506: LD_INT 0
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 0
72515: PUSH
72516: LD_INT 1
72518: NEG
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 1
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 1
72536: PUSH
72537: LD_INT 1
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: LD_INT 1
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 1
72556: NEG
72557: PUSH
72558: LD_INT 0
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: LD_INT 1
72571: NEG
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 1
72579: NEG
72580: PUSH
72581: LD_INT 2
72583: NEG
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 0
72591: PUSH
72592: LD_INT 2
72594: NEG
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 1
72602: PUSH
72603: LD_INT 1
72605: NEG
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 2
72613: PUSH
72614: LD_INT 0
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 2
72623: PUSH
72624: LD_INT 1
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 2
72633: PUSH
72634: LD_INT 2
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 1
72643: PUSH
72644: LD_INT 2
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 0
72653: PUSH
72654: LD_INT 2
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 1
72663: NEG
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 2
72674: NEG
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 2
72685: NEG
72686: PUSH
72687: LD_INT 1
72689: NEG
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 2
72697: NEG
72698: PUSH
72699: LD_INT 2
72701: NEG
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72728: LD_ADDR_VAR 0 57
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 0
72745: PUSH
72746: LD_INT 1
72748: NEG
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 1
72756: PUSH
72757: LD_INT 0
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 1
72766: PUSH
72767: LD_INT 1
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 0
72776: PUSH
72777: LD_INT 1
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 1
72786: NEG
72787: PUSH
72788: LD_INT 0
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 1
72797: NEG
72798: PUSH
72799: LD_INT 1
72801: NEG
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 1
72809: NEG
72810: PUSH
72811: LD_INT 2
72813: NEG
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: LD_INT 2
72824: NEG
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 1
72832: PUSH
72833: LD_INT 1
72835: NEG
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 2
72843: PUSH
72844: LD_INT 0
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 2
72853: PUSH
72854: LD_INT 1
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 2
72863: PUSH
72864: LD_INT 2
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: LD_INT 2
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 0
72883: PUSH
72884: LD_INT 2
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 1
72893: NEG
72894: PUSH
72895: LD_INT 1
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 2
72904: NEG
72905: PUSH
72906: LD_INT 0
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 2
72915: NEG
72916: PUSH
72917: LD_INT 1
72919: NEG
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_INT 2
72927: NEG
72928: PUSH
72929: LD_INT 2
72931: NEG
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72958: LD_ADDR_VAR 0 58
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: LD_INT 0
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 0
72975: PUSH
72976: LD_INT 1
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 1
72986: PUSH
72987: LD_INT 0
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 1
72996: PUSH
72997: LD_INT 1
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 0
73006: PUSH
73007: LD_INT 1
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 1
73016: NEG
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: LD_INT 1
73027: NEG
73028: PUSH
73029: LD_INT 1
73031: NEG
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: LD_INT 1
73039: NEG
73040: PUSH
73041: LD_INT 2
73043: NEG
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 0
73051: PUSH
73052: LD_INT 2
73054: NEG
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 1
73062: PUSH
73063: LD_INT 1
73065: NEG
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: LD_INT 0
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 2
73083: PUSH
73084: LD_INT 1
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 2
73093: PUSH
73094: LD_INT 2
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 1
73103: PUSH
73104: LD_INT 2
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 0
73113: PUSH
73114: LD_INT 2
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 1
73123: NEG
73124: PUSH
73125: LD_INT 1
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 2
73134: NEG
73135: PUSH
73136: LD_INT 0
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 2
73145: NEG
73146: PUSH
73147: LD_INT 1
73149: NEG
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 2
73157: NEG
73158: PUSH
73159: LD_INT 2
73161: NEG
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73188: LD_ADDR_VAR 0 59
73192: PUSH
73193: LD_INT 0
73195: PUSH
73196: LD_INT 0
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 0
73205: PUSH
73206: LD_INT 1
73208: NEG
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 1
73216: PUSH
73217: LD_INT 0
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 1
73226: PUSH
73227: LD_INT 1
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 0
73236: PUSH
73237: LD_INT 1
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 1
73246: NEG
73247: PUSH
73248: LD_INT 0
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 1
73257: NEG
73258: PUSH
73259: LD_INT 1
73261: NEG
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73276: LD_ADDR_VAR 0 60
73280: PUSH
73281: LD_INT 0
73283: PUSH
73284: LD_INT 0
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: LD_INT 1
73296: NEG
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 1
73304: PUSH
73305: LD_INT 0
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 1
73314: PUSH
73315: LD_INT 1
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 0
73324: PUSH
73325: LD_INT 1
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 1
73334: NEG
73335: PUSH
73336: LD_INT 0
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 1
73345: NEG
73346: PUSH
73347: LD_INT 1
73349: NEG
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73364: LD_ADDR_VAR 0 61
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: LD_INT 0
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 0
73381: PUSH
73382: LD_INT 1
73384: NEG
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 1
73392: PUSH
73393: LD_INT 0
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 1
73402: PUSH
73403: LD_INT 1
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 0
73412: PUSH
73413: LD_INT 1
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 1
73422: NEG
73423: PUSH
73424: LD_INT 0
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 1
73433: NEG
73434: PUSH
73435: LD_INT 1
73437: NEG
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73452: LD_ADDR_VAR 0 62
73456: PUSH
73457: LD_INT 0
73459: PUSH
73460: LD_INT 0
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 0
73469: PUSH
73470: LD_INT 1
73472: NEG
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 1
73480: PUSH
73481: LD_INT 0
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 1
73490: PUSH
73491: LD_INT 1
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 0
73500: PUSH
73501: LD_INT 1
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 1
73510: NEG
73511: PUSH
73512: LD_INT 0
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 1
73521: NEG
73522: PUSH
73523: LD_INT 1
73525: NEG
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73540: LD_ADDR_VAR 0 63
73544: PUSH
73545: LD_INT 0
73547: PUSH
73548: LD_INT 0
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: LD_INT 0
73557: PUSH
73558: LD_INT 1
73560: NEG
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 1
73568: PUSH
73569: LD_INT 0
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 1
73578: PUSH
73579: LD_INT 1
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 0
73588: PUSH
73589: LD_INT 1
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: LD_INT 1
73598: NEG
73599: PUSH
73600: LD_INT 0
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 1
73609: NEG
73610: PUSH
73611: LD_INT 1
73613: NEG
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73628: LD_ADDR_VAR 0 64
73632: PUSH
73633: LD_INT 0
73635: PUSH
73636: LD_INT 0
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 0
73645: PUSH
73646: LD_INT 1
73648: NEG
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 1
73656: PUSH
73657: LD_INT 0
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 1
73666: PUSH
73667: LD_INT 1
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 0
73676: PUSH
73677: LD_INT 1
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 1
73686: NEG
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 1
73697: NEG
73698: PUSH
73699: LD_INT 1
73701: NEG
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: ST_TO_ADDR
// end ; 1 :
73716: GO 79613
73718: LD_INT 1
73720: DOUBLE
73721: EQUAL
73722: IFTRUE 73726
73724: GO 76349
73726: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73727: LD_ADDR_VAR 0 11
73731: PUSH
73732: LD_INT 1
73734: NEG
73735: PUSH
73736: LD_INT 3
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 0
73746: PUSH
73747: LD_INT 3
73749: NEG
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: LD_INT 2
73760: NEG
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: LIST
73770: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73771: LD_ADDR_VAR 0 12
73775: PUSH
73776: LD_INT 2
73778: PUSH
73779: LD_INT 1
73781: NEG
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 3
73789: PUSH
73790: LD_INT 0
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 3
73799: PUSH
73800: LD_INT 1
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: LIST
73811: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73812: LD_ADDR_VAR 0 13
73816: PUSH
73817: LD_INT 3
73819: PUSH
73820: LD_INT 2
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 3
73829: PUSH
73830: LD_INT 3
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 2
73839: PUSH
73840: LD_INT 3
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: LIST
73851: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73852: LD_ADDR_VAR 0 14
73856: PUSH
73857: LD_INT 1
73859: PUSH
73860: LD_INT 3
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 0
73869: PUSH
73870: LD_INT 3
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: NEG
73880: PUSH
73881: LD_INT 2
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: LIST
73892: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73893: LD_ADDR_VAR 0 15
73897: PUSH
73898: LD_INT 2
73900: NEG
73901: PUSH
73902: LD_INT 1
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 3
73911: NEG
73912: PUSH
73913: LD_INT 0
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 3
73922: NEG
73923: PUSH
73924: LD_INT 1
73926: NEG
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: LIST
73936: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73937: LD_ADDR_VAR 0 16
73941: PUSH
73942: LD_INT 2
73944: NEG
73945: PUSH
73946: LD_INT 3
73948: NEG
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 3
73956: NEG
73957: PUSH
73958: LD_INT 2
73960: NEG
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 3
73968: NEG
73969: PUSH
73970: LD_INT 3
73972: NEG
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: LIST
73982: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73983: LD_ADDR_VAR 0 17
73987: PUSH
73988: LD_INT 1
73990: NEG
73991: PUSH
73992: LD_INT 3
73994: NEG
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: LD_INT 3
74005: NEG
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 1
74013: PUSH
74014: LD_INT 2
74016: NEG
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: LIST
74026: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74027: LD_ADDR_VAR 0 18
74031: PUSH
74032: LD_INT 2
74034: PUSH
74035: LD_INT 1
74037: NEG
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 3
74045: PUSH
74046: LD_INT 0
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 3
74055: PUSH
74056: LD_INT 1
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: LIST
74067: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74068: LD_ADDR_VAR 0 19
74072: PUSH
74073: LD_INT 3
74075: PUSH
74076: LD_INT 2
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 3
74085: PUSH
74086: LD_INT 3
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 2
74095: PUSH
74096: LD_INT 3
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: LIST
74107: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74108: LD_ADDR_VAR 0 20
74112: PUSH
74113: LD_INT 1
74115: PUSH
74116: LD_INT 3
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 0
74125: PUSH
74126: LD_INT 3
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 1
74135: NEG
74136: PUSH
74137: LD_INT 2
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: LIST
74148: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74149: LD_ADDR_VAR 0 21
74153: PUSH
74154: LD_INT 2
74156: NEG
74157: PUSH
74158: LD_INT 1
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 3
74167: NEG
74168: PUSH
74169: LD_INT 0
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 3
74178: NEG
74179: PUSH
74180: LD_INT 1
74182: NEG
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: LIST
74192: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74193: LD_ADDR_VAR 0 22
74197: PUSH
74198: LD_INT 2
74200: NEG
74201: PUSH
74202: LD_INT 3
74204: NEG
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: PUSH
74210: LD_INT 3
74212: NEG
74213: PUSH
74214: LD_INT 2
74216: NEG
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 3
74224: NEG
74225: PUSH
74226: LD_INT 3
74228: NEG
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: LIST
74238: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
74239: LD_ADDR_VAR 0 23
74243: PUSH
74244: LD_INT 0
74246: PUSH
74247: LD_INT 3
74249: NEG
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_INT 1
74257: NEG
74258: PUSH
74259: LD_INT 4
74261: NEG
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 1
74269: PUSH
74270: LD_INT 3
74272: NEG
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: LIST
74282: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
74283: LD_ADDR_VAR 0 24
74287: PUSH
74288: LD_INT 3
74290: PUSH
74291: LD_INT 0
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 3
74300: PUSH
74301: LD_INT 1
74303: NEG
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 4
74311: PUSH
74312: LD_INT 1
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: LIST
74323: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
74324: LD_ADDR_VAR 0 25
74328: PUSH
74329: LD_INT 3
74331: PUSH
74332: LD_INT 3
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 4
74341: PUSH
74342: LD_INT 3
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 3
74351: PUSH
74352: LD_INT 4
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: LIST
74363: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
74364: LD_ADDR_VAR 0 26
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: LD_INT 3
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 1
74381: PUSH
74382: LD_INT 4
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 1
74391: NEG
74392: PUSH
74393: LD_INT 3
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: LIST
74404: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
74405: LD_ADDR_VAR 0 27
74409: PUSH
74410: LD_INT 3
74412: NEG
74413: PUSH
74414: LD_INT 0
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: PUSH
74421: LD_INT 3
74423: NEG
74424: PUSH
74425: LD_INT 1
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 4
74434: NEG
74435: PUSH
74436: LD_INT 1
74438: NEG
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: LIST
74448: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
74449: LD_ADDR_VAR 0 28
74453: PUSH
74454: LD_INT 3
74456: NEG
74457: PUSH
74458: LD_INT 3
74460: NEG
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 3
74468: NEG
74469: PUSH
74470: LD_INT 4
74472: NEG
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: LD_INT 4
74480: NEG
74481: PUSH
74482: LD_INT 3
74484: NEG
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: LIST
74494: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
74495: LD_ADDR_VAR 0 29
74499: PUSH
74500: LD_INT 1
74502: NEG
74503: PUSH
74504: LD_INT 3
74506: NEG
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 0
74514: PUSH
74515: LD_INT 3
74517: NEG
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: LD_INT 1
74525: PUSH
74526: LD_INT 2
74528: NEG
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: PUSH
74534: LD_INT 1
74536: NEG
74537: PUSH
74538: LD_INT 4
74540: NEG
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: LD_INT 4
74551: NEG
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 1
74559: PUSH
74560: LD_INT 3
74562: NEG
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 1
74570: NEG
74571: PUSH
74572: LD_INT 5
74574: NEG
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 0
74582: PUSH
74583: LD_INT 5
74585: NEG
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 1
74593: PUSH
74594: LD_INT 4
74596: NEG
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: LD_INT 1
74604: NEG
74605: PUSH
74606: LD_INT 6
74608: NEG
74609: PUSH
74610: EMPTY
74611: LIST
74612: LIST
74613: PUSH
74614: LD_INT 0
74616: PUSH
74617: LD_INT 6
74619: NEG
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: PUSH
74625: LD_INT 1
74627: PUSH
74628: LD_INT 5
74630: NEG
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
74650: LD_ADDR_VAR 0 30
74654: PUSH
74655: LD_INT 2
74657: PUSH
74658: LD_INT 1
74660: NEG
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: PUSH
74666: LD_INT 3
74668: PUSH
74669: LD_INT 0
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 3
74678: PUSH
74679: LD_INT 1
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 3
74688: PUSH
74689: LD_INT 1
74691: NEG
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 4
74699: PUSH
74700: LD_INT 0
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 4
74709: PUSH
74710: LD_INT 1
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 4
74719: PUSH
74720: LD_INT 1
74722: NEG
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 5
74730: PUSH
74731: LD_INT 0
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 5
74740: PUSH
74741: LD_INT 1
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 5
74750: PUSH
74751: LD_INT 1
74753: NEG
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 6
74761: PUSH
74762: LD_INT 0
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 6
74771: PUSH
74772: LD_INT 1
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
74793: LD_ADDR_VAR 0 31
74797: PUSH
74798: LD_INT 3
74800: PUSH
74801: LD_INT 2
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PUSH
74808: LD_INT 3
74810: PUSH
74811: LD_INT 3
74813: PUSH
74814: EMPTY
74815: LIST
74816: LIST
74817: PUSH
74818: LD_INT 2
74820: PUSH
74821: LD_INT 3
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: PUSH
74828: LD_INT 4
74830: PUSH
74831: LD_INT 3
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 4
74840: PUSH
74841: LD_INT 4
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 3
74850: PUSH
74851: LD_INT 4
74853: PUSH
74854: EMPTY
74855: LIST
74856: LIST
74857: PUSH
74858: LD_INT 5
74860: PUSH
74861: LD_INT 4
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: PUSH
74868: LD_INT 5
74870: PUSH
74871: LD_INT 5
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: PUSH
74878: LD_INT 4
74880: PUSH
74881: LD_INT 5
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: PUSH
74888: LD_INT 6
74890: PUSH
74891: LD_INT 5
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 6
74900: PUSH
74901: LD_INT 6
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: PUSH
74908: LD_INT 5
74910: PUSH
74911: LD_INT 6
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
74932: LD_ADDR_VAR 0 32
74936: PUSH
74937: LD_INT 1
74939: PUSH
74940: LD_INT 3
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: LD_INT 0
74949: PUSH
74950: LD_INT 3
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 1
74959: NEG
74960: PUSH
74961: LD_INT 2
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 1
74970: PUSH
74971: LD_INT 4
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 0
74980: PUSH
74981: LD_INT 4
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: PUSH
74988: LD_INT 1
74990: NEG
74991: PUSH
74992: LD_INT 3
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 1
75001: PUSH
75002: LD_INT 5
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PUSH
75009: LD_INT 0
75011: PUSH
75012: LD_INT 5
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 1
75021: NEG
75022: PUSH
75023: LD_INT 4
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 1
75032: PUSH
75033: LD_INT 6
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: LD_INT 6
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 1
75052: NEG
75053: PUSH
75054: LD_INT 5
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
75075: LD_ADDR_VAR 0 33
75079: PUSH
75080: LD_INT 2
75082: NEG
75083: PUSH
75084: LD_INT 1
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: LD_INT 3
75093: NEG
75094: PUSH
75095: LD_INT 0
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 3
75104: NEG
75105: PUSH
75106: LD_INT 1
75108: NEG
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 3
75116: NEG
75117: PUSH
75118: LD_INT 1
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: LD_INT 4
75127: NEG
75128: PUSH
75129: LD_INT 0
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: PUSH
75136: LD_INT 4
75138: NEG
75139: PUSH
75140: LD_INT 1
75142: NEG
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 4
75150: NEG
75151: PUSH
75152: LD_INT 1
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 5
75161: NEG
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 5
75172: NEG
75173: PUSH
75174: LD_INT 1
75176: NEG
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 5
75184: NEG
75185: PUSH
75186: LD_INT 1
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 6
75195: NEG
75196: PUSH
75197: LD_INT 0
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PUSH
75204: LD_INT 6
75206: NEG
75207: PUSH
75208: LD_INT 1
75210: NEG
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
75230: LD_ADDR_VAR 0 34
75234: PUSH
75235: LD_INT 2
75237: NEG
75238: PUSH
75239: LD_INT 3
75241: NEG
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: PUSH
75247: LD_INT 3
75249: NEG
75250: PUSH
75251: LD_INT 2
75253: NEG
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PUSH
75259: LD_INT 3
75261: NEG
75262: PUSH
75263: LD_INT 3
75265: NEG
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 3
75273: NEG
75274: PUSH
75275: LD_INT 4
75277: NEG
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 4
75285: NEG
75286: PUSH
75287: LD_INT 3
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 4
75297: NEG
75298: PUSH
75299: LD_INT 4
75301: NEG
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 4
75309: NEG
75310: PUSH
75311: LD_INT 5
75313: NEG
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 5
75321: NEG
75322: PUSH
75323: LD_INT 4
75325: NEG
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 5
75333: NEG
75334: PUSH
75335: LD_INT 5
75337: NEG
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 5
75345: NEG
75346: PUSH
75347: LD_INT 6
75349: NEG
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: LD_INT 6
75357: NEG
75358: PUSH
75359: LD_INT 5
75361: NEG
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: PUSH
75367: LD_INT 6
75369: NEG
75370: PUSH
75371: LD_INT 6
75373: NEG
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
75393: LD_ADDR_VAR 0 41
75397: PUSH
75398: LD_INT 0
75400: PUSH
75401: LD_INT 2
75403: NEG
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 1
75411: NEG
75412: PUSH
75413: LD_INT 3
75415: NEG
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: LD_INT 1
75423: PUSH
75424: LD_INT 2
75426: NEG
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: LIST
75436: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
75437: LD_ADDR_VAR 0 42
75441: PUSH
75442: LD_INT 2
75444: PUSH
75445: LD_INT 0
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_INT 2
75454: PUSH
75455: LD_INT 1
75457: NEG
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 3
75465: PUSH
75466: LD_INT 1
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: LIST
75477: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
75478: LD_ADDR_VAR 0 43
75482: PUSH
75483: LD_INT 2
75485: PUSH
75486: LD_INT 2
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: PUSH
75493: LD_INT 3
75495: PUSH
75496: LD_INT 2
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: PUSH
75503: LD_INT 2
75505: PUSH
75506: LD_INT 3
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: LIST
75517: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
75518: LD_ADDR_VAR 0 44
75522: PUSH
75523: LD_INT 0
75525: PUSH
75526: LD_INT 2
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 1
75535: PUSH
75536: LD_INT 3
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 1
75545: NEG
75546: PUSH
75547: LD_INT 2
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: LIST
75558: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75559: LD_ADDR_VAR 0 45
75563: PUSH
75564: LD_INT 2
75566: NEG
75567: PUSH
75568: LD_INT 0
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 2
75577: NEG
75578: PUSH
75579: LD_INT 1
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 3
75588: NEG
75589: PUSH
75590: LD_INT 1
75592: NEG
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: LIST
75602: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
75603: LD_ADDR_VAR 0 46
75607: PUSH
75608: LD_INT 2
75610: NEG
75611: PUSH
75612: LD_INT 2
75614: NEG
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 2
75622: NEG
75623: PUSH
75624: LD_INT 3
75626: NEG
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: LD_INT 3
75634: NEG
75635: PUSH
75636: LD_INT 2
75638: NEG
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: LIST
75648: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
75649: LD_ADDR_VAR 0 47
75653: PUSH
75654: LD_INT 2
75656: NEG
75657: PUSH
75658: LD_INT 3
75660: NEG
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 1
75668: NEG
75669: PUSH
75670: LD_INT 3
75672: NEG
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
75682: LD_ADDR_VAR 0 48
75686: PUSH
75687: LD_INT 1
75689: PUSH
75690: LD_INT 2
75692: NEG
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 2
75700: PUSH
75701: LD_INT 1
75703: NEG
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: EMPTY
75710: LIST
75711: LIST
75712: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
75713: LD_ADDR_VAR 0 49
75717: PUSH
75718: LD_INT 3
75720: PUSH
75721: LD_INT 1
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 3
75730: PUSH
75731: LD_INT 2
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
75742: LD_ADDR_VAR 0 50
75746: PUSH
75747: LD_INT 2
75749: PUSH
75750: LD_INT 3
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 1
75759: PUSH
75760: LD_INT 3
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
75771: LD_ADDR_VAR 0 51
75775: PUSH
75776: LD_INT 1
75778: NEG
75779: PUSH
75780: LD_INT 2
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PUSH
75787: LD_INT 2
75789: NEG
75790: PUSH
75791: LD_INT 1
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75802: LD_ADDR_VAR 0 52
75806: PUSH
75807: LD_INT 3
75809: NEG
75810: PUSH
75811: LD_INT 1
75813: NEG
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: LD_INT 3
75821: NEG
75822: PUSH
75823: LD_INT 2
75825: NEG
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75835: LD_ADDR_VAR 0 53
75839: PUSH
75840: LD_INT 1
75842: NEG
75843: PUSH
75844: LD_INT 3
75846: NEG
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: PUSH
75852: LD_INT 0
75854: PUSH
75855: LD_INT 3
75857: NEG
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: LD_INT 1
75865: PUSH
75866: LD_INT 2
75868: NEG
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: LIST
75878: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75879: LD_ADDR_VAR 0 54
75883: PUSH
75884: LD_INT 2
75886: PUSH
75887: LD_INT 1
75889: NEG
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 3
75897: PUSH
75898: LD_INT 0
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: LD_INT 3
75907: PUSH
75908: LD_INT 1
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: LIST
75919: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75920: LD_ADDR_VAR 0 55
75924: PUSH
75925: LD_INT 3
75927: PUSH
75928: LD_INT 2
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 3
75937: PUSH
75938: LD_INT 3
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 2
75947: PUSH
75948: LD_INT 3
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: LIST
75959: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75960: LD_ADDR_VAR 0 56
75964: PUSH
75965: LD_INT 1
75967: PUSH
75968: LD_INT 3
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: PUSH
75975: LD_INT 0
75977: PUSH
75978: LD_INT 3
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 1
75987: NEG
75988: PUSH
75989: LD_INT 2
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: LIST
76000: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76001: LD_ADDR_VAR 0 57
76005: PUSH
76006: LD_INT 2
76008: NEG
76009: PUSH
76010: LD_INT 1
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 3
76019: NEG
76020: PUSH
76021: LD_INT 0
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: LD_INT 3
76030: NEG
76031: PUSH
76032: LD_INT 1
76034: NEG
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: LIST
76044: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76045: LD_ADDR_VAR 0 58
76049: PUSH
76050: LD_INT 2
76052: NEG
76053: PUSH
76054: LD_INT 3
76056: NEG
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: LD_INT 3
76064: NEG
76065: PUSH
76066: LD_INT 2
76068: NEG
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: LD_INT 3
76076: NEG
76077: PUSH
76078: LD_INT 3
76080: NEG
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: LIST
76090: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
76091: LD_ADDR_VAR 0 59
76095: PUSH
76096: LD_INT 1
76098: NEG
76099: PUSH
76100: LD_INT 2
76102: NEG
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: PUSH
76108: LD_INT 0
76110: PUSH
76111: LD_INT 2
76113: NEG
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: PUSH
76119: LD_INT 1
76121: PUSH
76122: LD_INT 1
76124: NEG
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: LIST
76134: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
76135: LD_ADDR_VAR 0 60
76139: PUSH
76140: LD_INT 1
76142: PUSH
76143: LD_INT 1
76145: NEG
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: PUSH
76151: LD_INT 2
76153: PUSH
76154: LD_INT 0
76156: PUSH
76157: EMPTY
76158: LIST
76159: LIST
76160: PUSH
76161: LD_INT 2
76163: PUSH
76164: LD_INT 1
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: LIST
76175: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
76176: LD_ADDR_VAR 0 61
76180: PUSH
76181: LD_INT 2
76183: PUSH
76184: LD_INT 1
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: PUSH
76191: LD_INT 2
76193: PUSH
76194: LD_INT 2
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: PUSH
76201: LD_INT 1
76203: PUSH
76204: LD_INT 2
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: LIST
76215: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
76216: LD_ADDR_VAR 0 62
76220: PUSH
76221: LD_INT 1
76223: PUSH
76224: LD_INT 2
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 0
76233: PUSH
76234: LD_INT 2
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 1
76243: NEG
76244: PUSH
76245: LD_INT 1
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: LIST
76256: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
76257: LD_ADDR_VAR 0 63
76261: PUSH
76262: LD_INT 1
76264: NEG
76265: PUSH
76266: LD_INT 1
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: PUSH
76273: LD_INT 2
76275: NEG
76276: PUSH
76277: LD_INT 0
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 2
76286: NEG
76287: PUSH
76288: LD_INT 1
76290: NEG
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: LIST
76300: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76301: LD_ADDR_VAR 0 64
76305: PUSH
76306: LD_INT 1
76308: NEG
76309: PUSH
76310: LD_INT 2
76312: NEG
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 2
76320: NEG
76321: PUSH
76322: LD_INT 1
76324: NEG
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 2
76332: NEG
76333: PUSH
76334: LD_INT 2
76336: NEG
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: LIST
76346: ST_TO_ADDR
// end ; 2 :
76347: GO 79613
76349: LD_INT 2
76351: DOUBLE
76352: EQUAL
76353: IFTRUE 76357
76355: GO 79612
76357: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
76358: LD_ADDR_VAR 0 29
76362: PUSH
76363: LD_INT 4
76365: PUSH
76366: LD_INT 0
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 4
76375: PUSH
76376: LD_INT 1
76378: NEG
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: LD_INT 5
76386: PUSH
76387: LD_INT 0
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: PUSH
76394: LD_INT 5
76396: PUSH
76397: LD_INT 1
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 4
76406: PUSH
76407: LD_INT 1
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: PUSH
76414: LD_INT 3
76416: PUSH
76417: LD_INT 0
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PUSH
76424: LD_INT 3
76426: PUSH
76427: LD_INT 1
76429: NEG
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: PUSH
76435: LD_INT 3
76437: PUSH
76438: LD_INT 2
76440: NEG
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 5
76448: PUSH
76449: LD_INT 2
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PUSH
76456: LD_INT 3
76458: PUSH
76459: LD_INT 3
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PUSH
76466: LD_INT 3
76468: PUSH
76469: LD_INT 2
76471: PUSH
76472: EMPTY
76473: LIST
76474: LIST
76475: PUSH
76476: LD_INT 4
76478: PUSH
76479: LD_INT 3
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: PUSH
76486: LD_INT 4
76488: PUSH
76489: LD_INT 4
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: PUSH
76496: LD_INT 3
76498: PUSH
76499: LD_INT 4
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 2
76508: PUSH
76509: LD_INT 3
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: LD_INT 2
76518: PUSH
76519: LD_INT 2
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 4
76528: PUSH
76529: LD_INT 2
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: PUSH
76536: LD_INT 2
76538: PUSH
76539: LD_INT 4
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: PUSH
76546: LD_INT 0
76548: PUSH
76549: LD_INT 4
76551: PUSH
76552: EMPTY
76553: LIST
76554: LIST
76555: PUSH
76556: LD_INT 0
76558: PUSH
76559: LD_INT 3
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PUSH
76566: LD_INT 1
76568: PUSH
76569: LD_INT 4
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: PUSH
76576: LD_INT 1
76578: PUSH
76579: LD_INT 5
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: PUSH
76586: LD_INT 0
76588: PUSH
76589: LD_INT 5
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: PUSH
76596: LD_INT 1
76598: NEG
76599: PUSH
76600: LD_INT 4
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: PUSH
76607: LD_INT 1
76609: NEG
76610: PUSH
76611: LD_INT 3
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: PUSH
76618: LD_INT 2
76620: PUSH
76621: LD_INT 5
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: PUSH
76628: LD_INT 2
76630: NEG
76631: PUSH
76632: LD_INT 3
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 3
76641: NEG
76642: PUSH
76643: LD_INT 0
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: LD_INT 3
76652: NEG
76653: PUSH
76654: LD_INT 1
76656: NEG
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: PUSH
76662: LD_INT 2
76664: NEG
76665: PUSH
76666: LD_INT 0
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 2
76675: NEG
76676: PUSH
76677: LD_INT 1
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PUSH
76684: LD_INT 3
76686: NEG
76687: PUSH
76688: LD_INT 1
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: LD_INT 4
76697: NEG
76698: PUSH
76699: LD_INT 0
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 4
76708: NEG
76709: PUSH
76710: LD_INT 1
76712: NEG
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 4
76720: NEG
76721: PUSH
76722: LD_INT 2
76724: NEG
76725: PUSH
76726: EMPTY
76727: LIST
76728: LIST
76729: PUSH
76730: LD_INT 2
76732: NEG
76733: PUSH
76734: LD_INT 2
76736: PUSH
76737: EMPTY
76738: LIST
76739: LIST
76740: PUSH
76741: LD_INT 4
76743: NEG
76744: PUSH
76745: LD_INT 4
76747: NEG
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: LD_INT 4
76755: NEG
76756: PUSH
76757: LD_INT 5
76759: NEG
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 3
76767: NEG
76768: PUSH
76769: LD_INT 4
76771: NEG
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: LD_INT 3
76779: NEG
76780: PUSH
76781: LD_INT 3
76783: NEG
76784: PUSH
76785: EMPTY
76786: LIST
76787: LIST
76788: PUSH
76789: LD_INT 4
76791: NEG
76792: PUSH
76793: LD_INT 3
76795: NEG
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: PUSH
76801: LD_INT 5
76803: NEG
76804: PUSH
76805: LD_INT 4
76807: NEG
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: PUSH
76813: LD_INT 5
76815: NEG
76816: PUSH
76817: LD_INT 5
76819: NEG
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: PUSH
76825: LD_INT 3
76827: NEG
76828: PUSH
76829: LD_INT 5
76831: NEG
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 5
76839: NEG
76840: PUSH
76841: LD_INT 3
76843: NEG
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: LIST
76886: LIST
76887: LIST
76888: LIST
76889: LIST
76890: LIST
76891: LIST
76892: LIST
76893: LIST
76894: LIST
76895: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
76896: LD_ADDR_VAR 0 30
76900: PUSH
76901: LD_INT 4
76903: PUSH
76904: LD_INT 4
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PUSH
76911: LD_INT 4
76913: PUSH
76914: LD_INT 3
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PUSH
76921: LD_INT 5
76923: PUSH
76924: LD_INT 4
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: PUSH
76931: LD_INT 5
76933: PUSH
76934: LD_INT 5
76936: PUSH
76937: EMPTY
76938: LIST
76939: LIST
76940: PUSH
76941: LD_INT 4
76943: PUSH
76944: LD_INT 5
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: PUSH
76951: LD_INT 3
76953: PUSH
76954: LD_INT 4
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PUSH
76961: LD_INT 3
76963: PUSH
76964: LD_INT 3
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 5
76973: PUSH
76974: LD_INT 3
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: LD_INT 3
76983: PUSH
76984: LD_INT 5
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 0
76993: PUSH
76994: LD_INT 3
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PUSH
77001: LD_INT 0
77003: PUSH
77004: LD_INT 2
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: PUSH
77011: LD_INT 1
77013: PUSH
77014: LD_INT 3
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 1
77023: PUSH
77024: LD_INT 4
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: LD_INT 0
77033: PUSH
77034: LD_INT 4
77036: PUSH
77037: EMPTY
77038: LIST
77039: LIST
77040: PUSH
77041: LD_INT 1
77043: NEG
77044: PUSH
77045: LD_INT 3
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 1
77054: NEG
77055: PUSH
77056: LD_INT 2
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PUSH
77063: LD_INT 2
77065: PUSH
77066: LD_INT 4
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 2
77075: NEG
77076: PUSH
77077: LD_INT 2
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PUSH
77084: LD_INT 4
77086: NEG
77087: PUSH
77088: LD_INT 0
77090: PUSH
77091: EMPTY
77092: LIST
77093: LIST
77094: PUSH
77095: LD_INT 4
77097: NEG
77098: PUSH
77099: LD_INT 1
77101: NEG
77102: PUSH
77103: EMPTY
77104: LIST
77105: LIST
77106: PUSH
77107: LD_INT 3
77109: NEG
77110: PUSH
77111: LD_INT 0
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: LD_INT 3
77120: NEG
77121: PUSH
77122: LD_INT 1
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 4
77131: NEG
77132: PUSH
77133: LD_INT 1
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: LD_INT 5
77142: NEG
77143: PUSH
77144: LD_INT 0
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 5
77153: NEG
77154: PUSH
77155: LD_INT 1
77157: NEG
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: PUSH
77163: LD_INT 5
77165: NEG
77166: PUSH
77167: LD_INT 2
77169: NEG
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 3
77177: NEG
77178: PUSH
77179: LD_INT 2
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PUSH
77186: LD_INT 3
77188: NEG
77189: PUSH
77190: LD_INT 3
77192: NEG
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: PUSH
77198: LD_INT 3
77200: NEG
77201: PUSH
77202: LD_INT 4
77204: NEG
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: PUSH
77210: LD_INT 2
77212: NEG
77213: PUSH
77214: LD_INT 3
77216: NEG
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: PUSH
77222: LD_INT 2
77224: NEG
77225: PUSH
77226: LD_INT 2
77228: NEG
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: PUSH
77234: LD_INT 3
77236: NEG
77237: PUSH
77238: LD_INT 2
77240: NEG
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: PUSH
77246: LD_INT 4
77248: NEG
77249: PUSH
77250: LD_INT 3
77252: NEG
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: PUSH
77258: LD_INT 4
77260: NEG
77261: PUSH
77262: LD_INT 4
77264: NEG
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PUSH
77270: LD_INT 2
77272: NEG
77273: PUSH
77274: LD_INT 4
77276: NEG
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 4
77284: NEG
77285: PUSH
77286: LD_INT 2
77288: NEG
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: LD_INT 0
77296: PUSH
77297: LD_INT 4
77299: NEG
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: LD_INT 0
77307: PUSH
77308: LD_INT 5
77310: NEG
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: PUSH
77316: LD_INT 1
77318: PUSH
77319: LD_INT 4
77321: NEG
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: LD_INT 1
77329: PUSH
77330: LD_INT 3
77332: NEG
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PUSH
77338: LD_INT 0
77340: PUSH
77341: LD_INT 3
77343: NEG
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: PUSH
77349: LD_INT 1
77351: NEG
77352: PUSH
77353: LD_INT 4
77355: NEG
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_INT 1
77363: NEG
77364: PUSH
77365: LD_INT 5
77367: NEG
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: PUSH
77373: LD_INT 2
77375: PUSH
77376: LD_INT 3
77378: NEG
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PUSH
77384: LD_INT 2
77386: NEG
77387: PUSH
77388: LD_INT 5
77390: NEG
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: LIST
77409: LIST
77410: LIST
77411: LIST
77412: LIST
77413: LIST
77414: LIST
77415: LIST
77416: LIST
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: LIST
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
77443: LD_ADDR_VAR 0 31
77447: PUSH
77448: LD_INT 0
77450: PUSH
77451: LD_INT 4
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: PUSH
77458: LD_INT 0
77460: PUSH
77461: LD_INT 3
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: LD_INT 1
77470: PUSH
77471: LD_INT 4
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PUSH
77478: LD_INT 1
77480: PUSH
77481: LD_INT 5
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: LD_INT 0
77490: PUSH
77491: LD_INT 5
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: PUSH
77498: LD_INT 1
77500: NEG
77501: PUSH
77502: LD_INT 4
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: PUSH
77509: LD_INT 1
77511: NEG
77512: PUSH
77513: LD_INT 3
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: LD_INT 2
77522: PUSH
77523: LD_INT 5
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 2
77532: NEG
77533: PUSH
77534: LD_INT 3
77536: PUSH
77537: EMPTY
77538: LIST
77539: LIST
77540: PUSH
77541: LD_INT 3
77543: NEG
77544: PUSH
77545: LD_INT 0
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PUSH
77552: LD_INT 3
77554: NEG
77555: PUSH
77556: LD_INT 1
77558: NEG
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: PUSH
77564: LD_INT 2
77566: NEG
77567: PUSH
77568: LD_INT 0
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_INT 2
77577: NEG
77578: PUSH
77579: LD_INT 1
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: LD_INT 3
77588: NEG
77589: PUSH
77590: LD_INT 1
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: PUSH
77597: LD_INT 4
77599: NEG
77600: PUSH
77601: LD_INT 0
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: PUSH
77608: LD_INT 4
77610: NEG
77611: PUSH
77612: LD_INT 1
77614: NEG
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PUSH
77620: LD_INT 4
77622: NEG
77623: PUSH
77624: LD_INT 2
77626: NEG
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PUSH
77632: LD_INT 2
77634: NEG
77635: PUSH
77636: LD_INT 2
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 4
77645: NEG
77646: PUSH
77647: LD_INT 4
77649: NEG
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PUSH
77655: LD_INT 4
77657: NEG
77658: PUSH
77659: LD_INT 5
77661: NEG
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PUSH
77667: LD_INT 3
77669: NEG
77670: PUSH
77671: LD_INT 4
77673: NEG
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: PUSH
77679: LD_INT 3
77681: NEG
77682: PUSH
77683: LD_INT 3
77685: NEG
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: PUSH
77691: LD_INT 4
77693: NEG
77694: PUSH
77695: LD_INT 3
77697: NEG
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: PUSH
77703: LD_INT 5
77705: NEG
77706: PUSH
77707: LD_INT 4
77709: NEG
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: LD_INT 5
77717: NEG
77718: PUSH
77719: LD_INT 5
77721: NEG
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 3
77729: NEG
77730: PUSH
77731: LD_INT 5
77733: NEG
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: PUSH
77739: LD_INT 5
77741: NEG
77742: PUSH
77743: LD_INT 3
77745: NEG
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 0
77753: PUSH
77754: LD_INT 3
77756: NEG
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: LD_INT 0
77764: PUSH
77765: LD_INT 4
77767: NEG
77768: PUSH
77769: EMPTY
77770: LIST
77771: LIST
77772: PUSH
77773: LD_INT 1
77775: PUSH
77776: LD_INT 3
77778: NEG
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 1
77786: PUSH
77787: LD_INT 2
77789: NEG
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: PUSH
77795: LD_INT 0
77797: PUSH
77798: LD_INT 2
77800: NEG
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: PUSH
77806: LD_INT 1
77808: NEG
77809: PUSH
77810: LD_INT 3
77812: NEG
77813: PUSH
77814: EMPTY
77815: LIST
77816: LIST
77817: PUSH
77818: LD_INT 1
77820: NEG
77821: PUSH
77822: LD_INT 4
77824: NEG
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: LD_INT 2
77832: PUSH
77833: LD_INT 2
77835: NEG
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: PUSH
77841: LD_INT 2
77843: NEG
77844: PUSH
77845: LD_INT 4
77847: NEG
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: PUSH
77853: LD_INT 4
77855: PUSH
77856: LD_INT 0
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 4
77865: PUSH
77866: LD_INT 1
77868: NEG
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 5
77876: PUSH
77877: LD_INT 0
77879: PUSH
77880: EMPTY
77881: LIST
77882: LIST
77883: PUSH
77884: LD_INT 5
77886: PUSH
77887: LD_INT 1
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: PUSH
77894: LD_INT 4
77896: PUSH
77897: LD_INT 1
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: LD_INT 3
77906: PUSH
77907: LD_INT 0
77909: PUSH
77910: EMPTY
77911: LIST
77912: LIST
77913: PUSH
77914: LD_INT 3
77916: PUSH
77917: LD_INT 1
77919: NEG
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PUSH
77925: LD_INT 3
77927: PUSH
77928: LD_INT 2
77930: NEG
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 5
77938: PUSH
77939: LD_INT 2
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: LIST
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
77993: LD_ADDR_VAR 0 32
77997: PUSH
77998: LD_INT 4
78000: NEG
78001: PUSH
78002: LD_INT 0
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: PUSH
78009: LD_INT 4
78011: NEG
78012: PUSH
78013: LD_INT 1
78015: NEG
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 3
78023: NEG
78024: PUSH
78025: LD_INT 0
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: PUSH
78032: LD_INT 3
78034: NEG
78035: PUSH
78036: LD_INT 1
78038: PUSH
78039: EMPTY
78040: LIST
78041: LIST
78042: PUSH
78043: LD_INT 4
78045: NEG
78046: PUSH
78047: LD_INT 1
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: PUSH
78054: LD_INT 5
78056: NEG
78057: PUSH
78058: LD_INT 0
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: PUSH
78065: LD_INT 5
78067: NEG
78068: PUSH
78069: LD_INT 1
78071: NEG
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: LD_INT 5
78079: NEG
78080: PUSH
78081: LD_INT 2
78083: NEG
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: PUSH
78089: LD_INT 3
78091: NEG
78092: PUSH
78093: LD_INT 2
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: LD_INT 3
78102: NEG
78103: PUSH
78104: LD_INT 3
78106: NEG
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: PUSH
78112: LD_INT 3
78114: NEG
78115: PUSH
78116: LD_INT 4
78118: NEG
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: LD_INT 2
78126: NEG
78127: PUSH
78128: LD_INT 3
78130: NEG
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: PUSH
78136: LD_INT 2
78138: NEG
78139: PUSH
78140: LD_INT 2
78142: NEG
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: PUSH
78148: LD_INT 3
78150: NEG
78151: PUSH
78152: LD_INT 2
78154: NEG
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: PUSH
78160: LD_INT 4
78162: NEG
78163: PUSH
78164: LD_INT 3
78166: NEG
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: PUSH
78172: LD_INT 4
78174: NEG
78175: PUSH
78176: LD_INT 4
78178: NEG
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: LD_INT 2
78186: NEG
78187: PUSH
78188: LD_INT 4
78190: NEG
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: PUSH
78196: LD_INT 4
78198: NEG
78199: PUSH
78200: LD_INT 2
78202: NEG
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: LD_INT 4
78213: NEG
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: LD_INT 0
78221: PUSH
78222: LD_INT 5
78224: NEG
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: PUSH
78230: LD_INT 1
78232: PUSH
78233: LD_INT 4
78235: NEG
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PUSH
78241: LD_INT 1
78243: PUSH
78244: LD_INT 3
78246: NEG
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: PUSH
78252: LD_INT 0
78254: PUSH
78255: LD_INT 3
78257: NEG
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: LD_INT 1
78265: NEG
78266: PUSH
78267: LD_INT 4
78269: NEG
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: LD_INT 1
78277: NEG
78278: PUSH
78279: LD_INT 5
78281: NEG
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: PUSH
78287: LD_INT 2
78289: PUSH
78290: LD_INT 3
78292: NEG
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: PUSH
78298: LD_INT 2
78300: NEG
78301: PUSH
78302: LD_INT 5
78304: NEG
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: PUSH
78310: LD_INT 3
78312: PUSH
78313: LD_INT 0
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: LD_INT 3
78322: PUSH
78323: LD_INT 1
78325: NEG
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: LD_INT 4
78333: PUSH
78334: LD_INT 0
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: PUSH
78341: LD_INT 4
78343: PUSH
78344: LD_INT 1
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: PUSH
78351: LD_INT 3
78353: PUSH
78354: LD_INT 1
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: PUSH
78361: LD_INT 2
78363: PUSH
78364: LD_INT 0
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: PUSH
78371: LD_INT 2
78373: PUSH
78374: LD_INT 1
78376: NEG
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_INT 2
78384: PUSH
78385: LD_INT 2
78387: NEG
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PUSH
78393: LD_INT 4
78395: PUSH
78396: LD_INT 2
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: PUSH
78403: LD_INT 4
78405: PUSH
78406: LD_INT 4
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: PUSH
78413: LD_INT 4
78415: PUSH
78416: LD_INT 3
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PUSH
78423: LD_INT 5
78425: PUSH
78426: LD_INT 4
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PUSH
78433: LD_INT 5
78435: PUSH
78436: LD_INT 5
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: PUSH
78443: LD_INT 4
78445: PUSH
78446: LD_INT 5
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: PUSH
78453: LD_INT 3
78455: PUSH
78456: LD_INT 4
78458: PUSH
78459: EMPTY
78460: LIST
78461: LIST
78462: PUSH
78463: LD_INT 3
78465: PUSH
78466: LD_INT 3
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: LD_INT 5
78475: PUSH
78476: LD_INT 3
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: PUSH
78483: LD_INT 3
78485: PUSH
78486: LD_INT 5
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: LIST
78509: LIST
78510: LIST
78511: LIST
78512: LIST
78513: LIST
78514: LIST
78515: LIST
78516: LIST
78517: LIST
78518: LIST
78519: LIST
78520: LIST
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
78540: LD_ADDR_VAR 0 33
78544: PUSH
78545: LD_INT 4
78547: NEG
78548: PUSH
78549: LD_INT 4
78551: NEG
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PUSH
78557: LD_INT 4
78559: NEG
78560: PUSH
78561: LD_INT 5
78563: NEG
78564: PUSH
78565: EMPTY
78566: LIST
78567: LIST
78568: PUSH
78569: LD_INT 3
78571: NEG
78572: PUSH
78573: LD_INT 4
78575: NEG
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_INT 3
78583: NEG
78584: PUSH
78585: LD_INT 3
78587: NEG
78588: PUSH
78589: EMPTY
78590: LIST
78591: LIST
78592: PUSH
78593: LD_INT 4
78595: NEG
78596: PUSH
78597: LD_INT 3
78599: NEG
78600: PUSH
78601: EMPTY
78602: LIST
78603: LIST
78604: PUSH
78605: LD_INT 5
78607: NEG
78608: PUSH
78609: LD_INT 4
78611: NEG
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: LD_INT 5
78619: NEG
78620: PUSH
78621: LD_INT 5
78623: NEG
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: PUSH
78629: LD_INT 3
78631: NEG
78632: PUSH
78633: LD_INT 5
78635: NEG
78636: PUSH
78637: EMPTY
78638: LIST
78639: LIST
78640: PUSH
78641: LD_INT 5
78643: NEG
78644: PUSH
78645: LD_INT 3
78647: NEG
78648: PUSH
78649: EMPTY
78650: LIST
78651: LIST
78652: PUSH
78653: LD_INT 0
78655: PUSH
78656: LD_INT 3
78658: NEG
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: PUSH
78664: LD_INT 0
78666: PUSH
78667: LD_INT 4
78669: NEG
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PUSH
78675: LD_INT 1
78677: PUSH
78678: LD_INT 3
78680: NEG
78681: PUSH
78682: EMPTY
78683: LIST
78684: LIST
78685: PUSH
78686: LD_INT 1
78688: PUSH
78689: LD_INT 2
78691: NEG
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PUSH
78697: LD_INT 0
78699: PUSH
78700: LD_INT 2
78702: NEG
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: PUSH
78708: LD_INT 1
78710: NEG
78711: PUSH
78712: LD_INT 3
78714: NEG
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: PUSH
78720: LD_INT 1
78722: NEG
78723: PUSH
78724: LD_INT 4
78726: NEG
78727: PUSH
78728: EMPTY
78729: LIST
78730: LIST
78731: PUSH
78732: LD_INT 2
78734: PUSH
78735: LD_INT 2
78737: NEG
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PUSH
78743: LD_INT 2
78745: NEG
78746: PUSH
78747: LD_INT 4
78749: NEG
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PUSH
78755: LD_INT 4
78757: PUSH
78758: LD_INT 0
78760: PUSH
78761: EMPTY
78762: LIST
78763: LIST
78764: PUSH
78765: LD_INT 4
78767: PUSH
78768: LD_INT 1
78770: NEG
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: PUSH
78776: LD_INT 5
78778: PUSH
78779: LD_INT 0
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 5
78788: PUSH
78789: LD_INT 1
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: PUSH
78796: LD_INT 4
78798: PUSH
78799: LD_INT 1
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 3
78808: PUSH
78809: LD_INT 0
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: LD_INT 3
78818: PUSH
78819: LD_INT 1
78821: NEG
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: PUSH
78827: LD_INT 3
78829: PUSH
78830: LD_INT 2
78832: NEG
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PUSH
78838: LD_INT 5
78840: PUSH
78841: LD_INT 2
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 3
78850: PUSH
78851: LD_INT 3
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PUSH
78858: LD_INT 3
78860: PUSH
78861: LD_INT 2
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: LD_INT 4
78870: PUSH
78871: LD_INT 3
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: PUSH
78878: LD_INT 4
78880: PUSH
78881: LD_INT 4
78883: PUSH
78884: EMPTY
78885: LIST
78886: LIST
78887: PUSH
78888: LD_INT 3
78890: PUSH
78891: LD_INT 4
78893: PUSH
78894: EMPTY
78895: LIST
78896: LIST
78897: PUSH
78898: LD_INT 2
78900: PUSH
78901: LD_INT 3
78903: PUSH
78904: EMPTY
78905: LIST
78906: LIST
78907: PUSH
78908: LD_INT 2
78910: PUSH
78911: LD_INT 2
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: PUSH
78918: LD_INT 4
78920: PUSH
78921: LD_INT 2
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: PUSH
78928: LD_INT 2
78930: PUSH
78931: LD_INT 4
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 0
78940: PUSH
78941: LD_INT 4
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PUSH
78948: LD_INT 0
78950: PUSH
78951: LD_INT 3
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PUSH
78958: LD_INT 1
78960: PUSH
78961: LD_INT 4
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: PUSH
78968: LD_INT 1
78970: PUSH
78971: LD_INT 5
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: PUSH
78978: LD_INT 0
78980: PUSH
78981: LD_INT 5
78983: PUSH
78984: EMPTY
78985: LIST
78986: LIST
78987: PUSH
78988: LD_INT 1
78990: NEG
78991: PUSH
78992: LD_INT 4
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: LD_INT 1
79001: NEG
79002: PUSH
79003: LD_INT 3
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 2
79012: PUSH
79013: LD_INT 5
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 2
79022: NEG
79023: PUSH
79024: LD_INT 3
79026: PUSH
79027: EMPTY
79028: LIST
79029: LIST
79030: PUSH
79031: EMPTY
79032: LIST
79033: LIST
79034: LIST
79035: LIST
79036: LIST
79037: LIST
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: LIST
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
79078: LD_ADDR_VAR 0 34
79082: PUSH
79083: LD_INT 0
79085: PUSH
79086: LD_INT 4
79088: NEG
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: PUSH
79094: LD_INT 0
79096: PUSH
79097: LD_INT 5
79099: NEG
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: PUSH
79105: LD_INT 1
79107: PUSH
79108: LD_INT 4
79110: NEG
79111: PUSH
79112: EMPTY
79113: LIST
79114: LIST
79115: PUSH
79116: LD_INT 1
79118: PUSH
79119: LD_INT 3
79121: NEG
79122: PUSH
79123: EMPTY
79124: LIST
79125: LIST
79126: PUSH
79127: LD_INT 0
79129: PUSH
79130: LD_INT 3
79132: NEG
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: PUSH
79138: LD_INT 1
79140: NEG
79141: PUSH
79142: LD_INT 4
79144: NEG
79145: PUSH
79146: EMPTY
79147: LIST
79148: LIST
79149: PUSH
79150: LD_INT 1
79152: NEG
79153: PUSH
79154: LD_INT 5
79156: NEG
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 2
79164: PUSH
79165: LD_INT 3
79167: NEG
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: LD_INT 2
79175: NEG
79176: PUSH
79177: LD_INT 5
79179: NEG
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: LD_INT 3
79187: PUSH
79188: LD_INT 0
79190: PUSH
79191: EMPTY
79192: LIST
79193: LIST
79194: PUSH
79195: LD_INT 3
79197: PUSH
79198: LD_INT 1
79200: NEG
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: LD_INT 4
79208: PUSH
79209: LD_INT 0
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: PUSH
79216: LD_INT 4
79218: PUSH
79219: LD_INT 1
79221: PUSH
79222: EMPTY
79223: LIST
79224: LIST
79225: PUSH
79226: LD_INT 3
79228: PUSH
79229: LD_INT 1
79231: PUSH
79232: EMPTY
79233: LIST
79234: LIST
79235: PUSH
79236: LD_INT 2
79238: PUSH
79239: LD_INT 0
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: PUSH
79246: LD_INT 2
79248: PUSH
79249: LD_INT 1
79251: NEG
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 2
79259: PUSH
79260: LD_INT 2
79262: NEG
79263: PUSH
79264: EMPTY
79265: LIST
79266: LIST
79267: PUSH
79268: LD_INT 4
79270: PUSH
79271: LD_INT 2
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: LD_INT 4
79280: PUSH
79281: LD_INT 4
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PUSH
79288: LD_INT 4
79290: PUSH
79291: LD_INT 3
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: PUSH
79298: LD_INT 5
79300: PUSH
79301: LD_INT 4
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: PUSH
79308: LD_INT 5
79310: PUSH
79311: LD_INT 5
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: PUSH
79318: LD_INT 4
79320: PUSH
79321: LD_INT 5
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: PUSH
79328: LD_INT 3
79330: PUSH
79331: LD_INT 4
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: PUSH
79338: LD_INT 3
79340: PUSH
79341: LD_INT 3
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: PUSH
79348: LD_INT 5
79350: PUSH
79351: LD_INT 3
79353: PUSH
79354: EMPTY
79355: LIST
79356: LIST
79357: PUSH
79358: LD_INT 3
79360: PUSH
79361: LD_INT 5
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: PUSH
79368: LD_INT 0
79370: PUSH
79371: LD_INT 3
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: LD_INT 0
79380: PUSH
79381: LD_INT 2
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: LD_INT 1
79390: PUSH
79391: LD_INT 3
79393: PUSH
79394: EMPTY
79395: LIST
79396: LIST
79397: PUSH
79398: LD_INT 1
79400: PUSH
79401: LD_INT 4
79403: PUSH
79404: EMPTY
79405: LIST
79406: LIST
79407: PUSH
79408: LD_INT 0
79410: PUSH
79411: LD_INT 4
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: LD_INT 1
79420: NEG
79421: PUSH
79422: LD_INT 3
79424: PUSH
79425: EMPTY
79426: LIST
79427: LIST
79428: PUSH
79429: LD_INT 1
79431: NEG
79432: PUSH
79433: LD_INT 2
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 2
79442: PUSH
79443: LD_INT 4
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 2
79452: NEG
79453: PUSH
79454: LD_INT 2
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: PUSH
79461: LD_INT 4
79463: NEG
79464: PUSH
79465: LD_INT 0
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 4
79474: NEG
79475: PUSH
79476: LD_INT 1
79478: NEG
79479: PUSH
79480: EMPTY
79481: LIST
79482: LIST
79483: PUSH
79484: LD_INT 3
79486: NEG
79487: PUSH
79488: LD_INT 0
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 3
79497: NEG
79498: PUSH
79499: LD_INT 1
79501: PUSH
79502: EMPTY
79503: LIST
79504: LIST
79505: PUSH
79506: LD_INT 4
79508: NEG
79509: PUSH
79510: LD_INT 1
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 5
79519: NEG
79520: PUSH
79521: LD_INT 0
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 5
79530: NEG
79531: PUSH
79532: LD_INT 1
79534: NEG
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: PUSH
79540: LD_INT 5
79542: NEG
79543: PUSH
79544: LD_INT 2
79546: NEG
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: PUSH
79552: LD_INT 3
79554: NEG
79555: PUSH
79556: LD_INT 2
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: EMPTY
79564: LIST
79565: LIST
79566: LIST
79567: LIST
79568: LIST
79569: LIST
79570: LIST
79571: LIST
79572: LIST
79573: LIST
79574: LIST
79575: LIST
79576: LIST
79577: LIST
79578: LIST
79579: LIST
79580: LIST
79581: LIST
79582: LIST
79583: LIST
79584: LIST
79585: LIST
79586: LIST
79587: LIST
79588: LIST
79589: LIST
79590: LIST
79591: LIST
79592: LIST
79593: LIST
79594: LIST
79595: LIST
79596: LIST
79597: LIST
79598: LIST
79599: LIST
79600: LIST
79601: LIST
79602: LIST
79603: LIST
79604: LIST
79605: LIST
79606: LIST
79607: LIST
79608: LIST
79609: ST_TO_ADDR
// end ; end ;
79610: GO 79613
79612: POP
// case btype of b_depot , b_warehouse :
79613: LD_VAR 0 1
79617: PUSH
79618: LD_INT 0
79620: DOUBLE
79621: EQUAL
79622: IFTRUE 79632
79624: LD_INT 1
79626: DOUBLE
79627: EQUAL
79628: IFTRUE 79632
79630: GO 79833
79632: POP
// case nation of nation_american :
79633: LD_VAR 0 5
79637: PUSH
79638: LD_INT 1
79640: DOUBLE
79641: EQUAL
79642: IFTRUE 79646
79644: GO 79702
79646: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
79647: LD_ADDR_VAR 0 9
79651: PUSH
79652: LD_VAR 0 11
79656: PUSH
79657: LD_VAR 0 12
79661: PUSH
79662: LD_VAR 0 13
79666: PUSH
79667: LD_VAR 0 14
79671: PUSH
79672: LD_VAR 0 15
79676: PUSH
79677: LD_VAR 0 16
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: PUSH
79690: LD_VAR 0 4
79694: PUSH
79695: LD_INT 1
79697: PLUS
79698: ARRAY
79699: ST_TO_ADDR
79700: GO 79831
79702: LD_INT 2
79704: DOUBLE
79705: EQUAL
79706: IFTRUE 79710
79708: GO 79766
79710: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
79711: LD_ADDR_VAR 0 9
79715: PUSH
79716: LD_VAR 0 17
79720: PUSH
79721: LD_VAR 0 18
79725: PUSH
79726: LD_VAR 0 19
79730: PUSH
79731: LD_VAR 0 20
79735: PUSH
79736: LD_VAR 0 21
79740: PUSH
79741: LD_VAR 0 22
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: LIST
79750: LIST
79751: LIST
79752: LIST
79753: PUSH
79754: LD_VAR 0 4
79758: PUSH
79759: LD_INT 1
79761: PLUS
79762: ARRAY
79763: ST_TO_ADDR
79764: GO 79831
79766: LD_INT 3
79768: DOUBLE
79769: EQUAL
79770: IFTRUE 79774
79772: GO 79830
79774: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
79775: LD_ADDR_VAR 0 9
79779: PUSH
79780: LD_VAR 0 23
79784: PUSH
79785: LD_VAR 0 24
79789: PUSH
79790: LD_VAR 0 25
79794: PUSH
79795: LD_VAR 0 26
79799: PUSH
79800: LD_VAR 0 27
79804: PUSH
79805: LD_VAR 0 28
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: LIST
79814: LIST
79815: LIST
79816: LIST
79817: PUSH
79818: LD_VAR 0 4
79822: PUSH
79823: LD_INT 1
79825: PLUS
79826: ARRAY
79827: ST_TO_ADDR
79828: GO 79831
79830: POP
79831: GO 80386
79833: LD_INT 2
79835: DOUBLE
79836: EQUAL
79837: IFTRUE 79847
79839: LD_INT 3
79841: DOUBLE
79842: EQUAL
79843: IFTRUE 79847
79845: GO 79903
79847: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
79848: LD_ADDR_VAR 0 9
79852: PUSH
79853: LD_VAR 0 29
79857: PUSH
79858: LD_VAR 0 30
79862: PUSH
79863: LD_VAR 0 31
79867: PUSH
79868: LD_VAR 0 32
79872: PUSH
79873: LD_VAR 0 33
79877: PUSH
79878: LD_VAR 0 34
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: LIST
79890: PUSH
79891: LD_VAR 0 4
79895: PUSH
79896: LD_INT 1
79898: PLUS
79899: ARRAY
79900: ST_TO_ADDR
79901: GO 80386
79903: LD_INT 16
79905: DOUBLE
79906: EQUAL
79907: IFTRUE 79965
79909: LD_INT 17
79911: DOUBLE
79912: EQUAL
79913: IFTRUE 79965
79915: LD_INT 18
79917: DOUBLE
79918: EQUAL
79919: IFTRUE 79965
79921: LD_INT 19
79923: DOUBLE
79924: EQUAL
79925: IFTRUE 79965
79927: LD_INT 22
79929: DOUBLE
79930: EQUAL
79931: IFTRUE 79965
79933: LD_INT 20
79935: DOUBLE
79936: EQUAL
79937: IFTRUE 79965
79939: LD_INT 21
79941: DOUBLE
79942: EQUAL
79943: IFTRUE 79965
79945: LD_INT 23
79947: DOUBLE
79948: EQUAL
79949: IFTRUE 79965
79951: LD_INT 24
79953: DOUBLE
79954: EQUAL
79955: IFTRUE 79965
79957: LD_INT 25
79959: DOUBLE
79960: EQUAL
79961: IFTRUE 79965
79963: GO 80021
79965: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
79966: LD_ADDR_VAR 0 9
79970: PUSH
79971: LD_VAR 0 35
79975: PUSH
79976: LD_VAR 0 36
79980: PUSH
79981: LD_VAR 0 37
79985: PUSH
79986: LD_VAR 0 38
79990: PUSH
79991: LD_VAR 0 39
79995: PUSH
79996: LD_VAR 0 40
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: LIST
80005: LIST
80006: LIST
80007: LIST
80008: PUSH
80009: LD_VAR 0 4
80013: PUSH
80014: LD_INT 1
80016: PLUS
80017: ARRAY
80018: ST_TO_ADDR
80019: GO 80386
80021: LD_INT 6
80023: DOUBLE
80024: EQUAL
80025: IFTRUE 80077
80027: LD_INT 7
80029: DOUBLE
80030: EQUAL
80031: IFTRUE 80077
80033: LD_INT 8
80035: DOUBLE
80036: EQUAL
80037: IFTRUE 80077
80039: LD_INT 13
80041: DOUBLE
80042: EQUAL
80043: IFTRUE 80077
80045: LD_INT 12
80047: DOUBLE
80048: EQUAL
80049: IFTRUE 80077
80051: LD_INT 15
80053: DOUBLE
80054: EQUAL
80055: IFTRUE 80077
80057: LD_INT 11
80059: DOUBLE
80060: EQUAL
80061: IFTRUE 80077
80063: LD_INT 14
80065: DOUBLE
80066: EQUAL
80067: IFTRUE 80077
80069: LD_INT 10
80071: DOUBLE
80072: EQUAL
80073: IFTRUE 80077
80075: GO 80133
80077: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
80078: LD_ADDR_VAR 0 9
80082: PUSH
80083: LD_VAR 0 41
80087: PUSH
80088: LD_VAR 0 42
80092: PUSH
80093: LD_VAR 0 43
80097: PUSH
80098: LD_VAR 0 44
80102: PUSH
80103: LD_VAR 0 45
80107: PUSH
80108: LD_VAR 0 46
80112: PUSH
80113: EMPTY
80114: LIST
80115: LIST
80116: LIST
80117: LIST
80118: LIST
80119: LIST
80120: PUSH
80121: LD_VAR 0 4
80125: PUSH
80126: LD_INT 1
80128: PLUS
80129: ARRAY
80130: ST_TO_ADDR
80131: GO 80386
80133: LD_INT 36
80135: DOUBLE
80136: EQUAL
80137: IFTRUE 80141
80139: GO 80197
80141: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
80142: LD_ADDR_VAR 0 9
80146: PUSH
80147: LD_VAR 0 47
80151: PUSH
80152: LD_VAR 0 48
80156: PUSH
80157: LD_VAR 0 49
80161: PUSH
80162: LD_VAR 0 50
80166: PUSH
80167: LD_VAR 0 51
80171: PUSH
80172: LD_VAR 0 52
80176: PUSH
80177: EMPTY
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: PUSH
80185: LD_VAR 0 4
80189: PUSH
80190: LD_INT 1
80192: PLUS
80193: ARRAY
80194: ST_TO_ADDR
80195: GO 80386
80197: LD_INT 4
80199: DOUBLE
80200: EQUAL
80201: IFTRUE 80223
80203: LD_INT 5
80205: DOUBLE
80206: EQUAL
80207: IFTRUE 80223
80209: LD_INT 34
80211: DOUBLE
80212: EQUAL
80213: IFTRUE 80223
80215: LD_INT 37
80217: DOUBLE
80218: EQUAL
80219: IFTRUE 80223
80221: GO 80279
80223: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
80224: LD_ADDR_VAR 0 9
80228: PUSH
80229: LD_VAR 0 53
80233: PUSH
80234: LD_VAR 0 54
80238: PUSH
80239: LD_VAR 0 55
80243: PUSH
80244: LD_VAR 0 56
80248: PUSH
80249: LD_VAR 0 57
80253: PUSH
80254: LD_VAR 0 58
80258: PUSH
80259: EMPTY
80260: LIST
80261: LIST
80262: LIST
80263: LIST
80264: LIST
80265: LIST
80266: PUSH
80267: LD_VAR 0 4
80271: PUSH
80272: LD_INT 1
80274: PLUS
80275: ARRAY
80276: ST_TO_ADDR
80277: GO 80386
80279: LD_INT 31
80281: DOUBLE
80282: EQUAL
80283: IFTRUE 80329
80285: LD_INT 32
80287: DOUBLE
80288: EQUAL
80289: IFTRUE 80329
80291: LD_INT 33
80293: DOUBLE
80294: EQUAL
80295: IFTRUE 80329
80297: LD_INT 27
80299: DOUBLE
80300: EQUAL
80301: IFTRUE 80329
80303: LD_INT 26
80305: DOUBLE
80306: EQUAL
80307: IFTRUE 80329
80309: LD_INT 28
80311: DOUBLE
80312: EQUAL
80313: IFTRUE 80329
80315: LD_INT 29
80317: DOUBLE
80318: EQUAL
80319: IFTRUE 80329
80321: LD_INT 30
80323: DOUBLE
80324: EQUAL
80325: IFTRUE 80329
80327: GO 80385
80329: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
80330: LD_ADDR_VAR 0 9
80334: PUSH
80335: LD_VAR 0 59
80339: PUSH
80340: LD_VAR 0 60
80344: PUSH
80345: LD_VAR 0 61
80349: PUSH
80350: LD_VAR 0 62
80354: PUSH
80355: LD_VAR 0 63
80359: PUSH
80360: LD_VAR 0 64
80364: PUSH
80365: EMPTY
80366: LIST
80367: LIST
80368: LIST
80369: LIST
80370: LIST
80371: LIST
80372: PUSH
80373: LD_VAR 0 4
80377: PUSH
80378: LD_INT 1
80380: PLUS
80381: ARRAY
80382: ST_TO_ADDR
80383: GO 80386
80385: POP
// temp_list2 = [ ] ;
80386: LD_ADDR_VAR 0 10
80390: PUSH
80391: EMPTY
80392: ST_TO_ADDR
// for i in temp_list do
80393: LD_ADDR_VAR 0 8
80397: PUSH
80398: LD_VAR 0 9
80402: PUSH
80403: FOR_IN
80404: IFFALSE 80456
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
80406: LD_ADDR_VAR 0 10
80410: PUSH
80411: LD_VAR 0 10
80415: PUSH
80416: LD_VAR 0 8
80420: PUSH
80421: LD_INT 1
80423: ARRAY
80424: PUSH
80425: LD_VAR 0 2
80429: PLUS
80430: PUSH
80431: LD_VAR 0 8
80435: PUSH
80436: LD_INT 2
80438: ARRAY
80439: PUSH
80440: LD_VAR 0 3
80444: PLUS
80445: PUSH
80446: EMPTY
80447: LIST
80448: LIST
80449: PUSH
80450: EMPTY
80451: LIST
80452: ADD
80453: ST_TO_ADDR
80454: GO 80403
80456: POP
80457: POP
// result = temp_list2 ;
80458: LD_ADDR_VAR 0 7
80462: PUSH
80463: LD_VAR 0 10
80467: ST_TO_ADDR
// end ;
80468: LD_VAR 0 7
80472: RET
// export function EnemyInRange ( unit , dist ) ; begin
80473: LD_INT 0
80475: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
80476: LD_ADDR_VAR 0 3
80480: PUSH
80481: LD_VAR 0 1
80485: PPUSH
80486: CALL_OW 255
80490: PPUSH
80491: LD_VAR 0 1
80495: PPUSH
80496: CALL_OW 250
80500: PPUSH
80501: LD_VAR 0 1
80505: PPUSH
80506: CALL_OW 251
80510: PPUSH
80511: LD_VAR 0 2
80515: PPUSH
80516: CALL 54577 0 4
80520: PUSH
80521: LD_INT 4
80523: ARRAY
80524: ST_TO_ADDR
// end ;
80525: LD_VAR 0 3
80529: RET
// export function PlayerSeeMe ( unit ) ; begin
80530: LD_INT 0
80532: PPUSH
// result := See ( your_side , unit ) ;
80533: LD_ADDR_VAR 0 2
80537: PUSH
80538: LD_OWVAR 2
80542: PPUSH
80543: LD_VAR 0 1
80547: PPUSH
80548: CALL_OW 292
80552: ST_TO_ADDR
// end ;
80553: LD_VAR 0 2
80557: RET
// export function ReverseDir ( unit ) ; begin
80558: LD_INT 0
80560: PPUSH
// if not unit then
80561: LD_VAR 0 1
80565: NOT
80566: IFFALSE 80570
// exit ;
80568: GO 80616
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
80570: LD_ADDR_VAR 0 2
80574: PUSH
80575: LD_INT 3
80577: PUSH
80578: LD_INT 4
80580: PUSH
80581: LD_INT 5
80583: PUSH
80584: LD_INT 0
80586: PUSH
80587: LD_INT 1
80589: PUSH
80590: LD_INT 2
80592: PUSH
80593: EMPTY
80594: LIST
80595: LIST
80596: LIST
80597: LIST
80598: LIST
80599: LIST
80600: PUSH
80601: LD_VAR 0 1
80605: PPUSH
80606: CALL_OW 254
80610: PUSH
80611: LD_INT 1
80613: PLUS
80614: ARRAY
80615: ST_TO_ADDR
// end ;
80616: LD_VAR 0 2
80620: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
80621: LD_INT 0
80623: PPUSH
80624: PPUSH
80625: PPUSH
80626: PPUSH
80627: PPUSH
// if not hexes then
80628: LD_VAR 0 2
80632: NOT
80633: IFFALSE 80637
// exit ;
80635: GO 80785
// dist := 9999 ;
80637: LD_ADDR_VAR 0 5
80641: PUSH
80642: LD_INT 9999
80644: ST_TO_ADDR
// for i = 1 to hexes do
80645: LD_ADDR_VAR 0 4
80649: PUSH
80650: DOUBLE
80651: LD_INT 1
80653: DEC
80654: ST_TO_ADDR
80655: LD_VAR 0 2
80659: PUSH
80660: FOR_TO
80661: IFFALSE 80773
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
80663: LD_VAR 0 1
80667: PPUSH
80668: LD_VAR 0 2
80672: PUSH
80673: LD_VAR 0 4
80677: ARRAY
80678: PUSH
80679: LD_INT 1
80681: ARRAY
80682: PPUSH
80683: LD_VAR 0 2
80687: PUSH
80688: LD_VAR 0 4
80692: ARRAY
80693: PUSH
80694: LD_INT 2
80696: ARRAY
80697: PPUSH
80698: CALL_OW 297
80702: PUSH
80703: LD_VAR 0 5
80707: LESS
80708: IFFALSE 80771
// begin hex := hexes [ i ] ;
80710: LD_ADDR_VAR 0 7
80714: PUSH
80715: LD_VAR 0 2
80719: PUSH
80720: LD_VAR 0 4
80724: ARRAY
80725: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
80726: LD_ADDR_VAR 0 5
80730: PUSH
80731: LD_VAR 0 1
80735: PPUSH
80736: LD_VAR 0 2
80740: PUSH
80741: LD_VAR 0 4
80745: ARRAY
80746: PUSH
80747: LD_INT 1
80749: ARRAY
80750: PPUSH
80751: LD_VAR 0 2
80755: PUSH
80756: LD_VAR 0 4
80760: ARRAY
80761: PUSH
80762: LD_INT 2
80764: ARRAY
80765: PPUSH
80766: CALL_OW 297
80770: ST_TO_ADDR
// end ; end ;
80771: GO 80660
80773: POP
80774: POP
// result := hex ;
80775: LD_ADDR_VAR 0 3
80779: PUSH
80780: LD_VAR 0 7
80784: ST_TO_ADDR
// end ;
80785: LD_VAR 0 3
80789: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
80790: LD_INT 0
80792: PPUSH
80793: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
80794: LD_VAR 0 1
80798: NOT
80799: PUSH
80800: LD_VAR 0 1
80804: PUSH
80805: LD_INT 21
80807: PUSH
80808: LD_INT 2
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: PUSH
80815: LD_INT 23
80817: PUSH
80818: LD_INT 2
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: PUSH
80825: EMPTY
80826: LIST
80827: LIST
80828: PPUSH
80829: CALL_OW 69
80833: IN
80834: NOT
80835: OR
80836: IFFALSE 80840
// exit ;
80838: GO 80887
// for i = 1 to 3 do
80840: LD_ADDR_VAR 0 3
80844: PUSH
80845: DOUBLE
80846: LD_INT 1
80848: DEC
80849: ST_TO_ADDR
80850: LD_INT 3
80852: PUSH
80853: FOR_TO
80854: IFFALSE 80885
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
80856: LD_VAR 0 1
80860: PPUSH
80861: CALL_OW 250
80865: PPUSH
80866: LD_VAR 0 1
80870: PPUSH
80871: CALL_OW 251
80875: PPUSH
80876: LD_INT 1
80878: PPUSH
80879: CALL_OW 453
80883: GO 80853
80885: POP
80886: POP
// end ;
80887: LD_VAR 0 2
80891: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
80892: LD_INT 0
80894: PPUSH
80895: PPUSH
80896: PPUSH
80897: PPUSH
80898: PPUSH
80899: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
80900: LD_VAR 0 1
80904: NOT
80905: PUSH
80906: LD_VAR 0 2
80910: NOT
80911: OR
80912: PUSH
80913: LD_VAR 0 1
80917: PPUSH
80918: CALL_OW 314
80922: OR
80923: IFFALSE 80927
// exit ;
80925: GO 81368
// x := GetX ( enemy_unit ) ;
80927: LD_ADDR_VAR 0 7
80931: PUSH
80932: LD_VAR 0 2
80936: PPUSH
80937: CALL_OW 250
80941: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
80942: LD_ADDR_VAR 0 8
80946: PUSH
80947: LD_VAR 0 2
80951: PPUSH
80952: CALL_OW 251
80956: ST_TO_ADDR
// if not x or not y then
80957: LD_VAR 0 7
80961: NOT
80962: PUSH
80963: LD_VAR 0 8
80967: NOT
80968: OR
80969: IFFALSE 80973
// exit ;
80971: GO 81368
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
80973: LD_ADDR_VAR 0 6
80977: PUSH
80978: LD_VAR 0 7
80982: PPUSH
80983: LD_INT 0
80985: PPUSH
80986: LD_INT 4
80988: PPUSH
80989: CALL_OW 272
80993: PUSH
80994: LD_VAR 0 8
80998: PPUSH
80999: LD_INT 0
81001: PPUSH
81002: LD_INT 4
81004: PPUSH
81005: CALL_OW 273
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_VAR 0 7
81018: PPUSH
81019: LD_INT 1
81021: PPUSH
81022: LD_INT 4
81024: PPUSH
81025: CALL_OW 272
81029: PUSH
81030: LD_VAR 0 8
81034: PPUSH
81035: LD_INT 1
81037: PPUSH
81038: LD_INT 4
81040: PPUSH
81041: CALL_OW 273
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: PUSH
81050: LD_VAR 0 7
81054: PPUSH
81055: LD_INT 2
81057: PPUSH
81058: LD_INT 4
81060: PPUSH
81061: CALL_OW 272
81065: PUSH
81066: LD_VAR 0 8
81070: PPUSH
81071: LD_INT 2
81073: PPUSH
81074: LD_INT 4
81076: PPUSH
81077: CALL_OW 273
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: PUSH
81086: LD_VAR 0 7
81090: PPUSH
81091: LD_INT 3
81093: PPUSH
81094: LD_INT 4
81096: PPUSH
81097: CALL_OW 272
81101: PUSH
81102: LD_VAR 0 8
81106: PPUSH
81107: LD_INT 3
81109: PPUSH
81110: LD_INT 4
81112: PPUSH
81113: CALL_OW 273
81117: PUSH
81118: EMPTY
81119: LIST
81120: LIST
81121: PUSH
81122: LD_VAR 0 7
81126: PPUSH
81127: LD_INT 4
81129: PPUSH
81130: LD_INT 4
81132: PPUSH
81133: CALL_OW 272
81137: PUSH
81138: LD_VAR 0 8
81142: PPUSH
81143: LD_INT 4
81145: PPUSH
81146: LD_INT 4
81148: PPUSH
81149: CALL_OW 273
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: PUSH
81158: LD_VAR 0 7
81162: PPUSH
81163: LD_INT 5
81165: PPUSH
81166: LD_INT 4
81168: PPUSH
81169: CALL_OW 272
81173: PUSH
81174: LD_VAR 0 8
81178: PPUSH
81179: LD_INT 5
81181: PPUSH
81182: LD_INT 4
81184: PPUSH
81185: CALL_OW 273
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: PUSH
81194: EMPTY
81195: LIST
81196: LIST
81197: LIST
81198: LIST
81199: LIST
81200: LIST
81201: ST_TO_ADDR
// for i = tmp downto 1 do
81202: LD_ADDR_VAR 0 4
81206: PUSH
81207: DOUBLE
81208: LD_VAR 0 6
81212: INC
81213: ST_TO_ADDR
81214: LD_INT 1
81216: PUSH
81217: FOR_DOWNTO
81218: IFFALSE 81319
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
81220: LD_VAR 0 6
81224: PUSH
81225: LD_VAR 0 4
81229: ARRAY
81230: PUSH
81231: LD_INT 1
81233: ARRAY
81234: PPUSH
81235: LD_VAR 0 6
81239: PUSH
81240: LD_VAR 0 4
81244: ARRAY
81245: PUSH
81246: LD_INT 2
81248: ARRAY
81249: PPUSH
81250: CALL_OW 488
81254: NOT
81255: PUSH
81256: LD_VAR 0 6
81260: PUSH
81261: LD_VAR 0 4
81265: ARRAY
81266: PUSH
81267: LD_INT 1
81269: ARRAY
81270: PPUSH
81271: LD_VAR 0 6
81275: PUSH
81276: LD_VAR 0 4
81280: ARRAY
81281: PUSH
81282: LD_INT 2
81284: ARRAY
81285: PPUSH
81286: CALL_OW 428
81290: PUSH
81291: LD_INT 0
81293: NONEQUAL
81294: OR
81295: IFFALSE 81317
// tmp := Delete ( tmp , i ) ;
81297: LD_ADDR_VAR 0 6
81301: PUSH
81302: LD_VAR 0 6
81306: PPUSH
81307: LD_VAR 0 4
81311: PPUSH
81312: CALL_OW 3
81316: ST_TO_ADDR
81317: GO 81217
81319: POP
81320: POP
// j := GetClosestHex ( unit , tmp ) ;
81321: LD_ADDR_VAR 0 5
81325: PUSH
81326: LD_VAR 0 1
81330: PPUSH
81331: LD_VAR 0 6
81335: PPUSH
81336: CALL 80621 0 2
81340: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
81341: LD_VAR 0 1
81345: PPUSH
81346: LD_VAR 0 5
81350: PUSH
81351: LD_INT 1
81353: ARRAY
81354: PPUSH
81355: LD_VAR 0 5
81359: PUSH
81360: LD_INT 2
81362: ARRAY
81363: PPUSH
81364: CALL_OW 111
// end ;
81368: LD_VAR 0 3
81372: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
81373: LD_INT 0
81375: PPUSH
81376: PPUSH
81377: PPUSH
// uc_side = 0 ;
81378: LD_ADDR_OWVAR 20
81382: PUSH
81383: LD_INT 0
81385: ST_TO_ADDR
// uc_nation = 0 ;
81386: LD_ADDR_OWVAR 21
81390: PUSH
81391: LD_INT 0
81393: ST_TO_ADDR
// InitHc ;
81394: CALL_OW 19
// InitVc ;
81398: CALL_OW 20
// if mastodonts then
81402: LD_VAR 0 6
81406: IFFALSE 81473
// for i = 1 to mastodonts do
81408: LD_ADDR_VAR 0 11
81412: PUSH
81413: DOUBLE
81414: LD_INT 1
81416: DEC
81417: ST_TO_ADDR
81418: LD_VAR 0 6
81422: PUSH
81423: FOR_TO
81424: IFFALSE 81471
// begin vc_chassis := 31 ;
81426: LD_ADDR_OWVAR 37
81430: PUSH
81431: LD_INT 31
81433: ST_TO_ADDR
// vc_control := control_rider ;
81434: LD_ADDR_OWVAR 38
81438: PUSH
81439: LD_INT 4
81441: ST_TO_ADDR
// animal := CreateVehicle ;
81442: LD_ADDR_VAR 0 12
81446: PUSH
81447: CALL_OW 45
81451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81452: LD_VAR 0 12
81456: PPUSH
81457: LD_VAR 0 8
81461: PPUSH
81462: LD_INT 0
81464: PPUSH
81465: CALL 88218 0 3
// end ;
81469: GO 81423
81471: POP
81472: POP
// if horses then
81473: LD_VAR 0 5
81477: IFFALSE 81544
// for i = 1 to horses do
81479: LD_ADDR_VAR 0 11
81483: PUSH
81484: DOUBLE
81485: LD_INT 1
81487: DEC
81488: ST_TO_ADDR
81489: LD_VAR 0 5
81493: PUSH
81494: FOR_TO
81495: IFFALSE 81542
// begin hc_class := 21 ;
81497: LD_ADDR_OWVAR 28
81501: PUSH
81502: LD_INT 21
81504: ST_TO_ADDR
// hc_gallery :=  ;
81505: LD_ADDR_OWVAR 33
81509: PUSH
81510: LD_STRING 
81512: ST_TO_ADDR
// animal := CreateHuman ;
81513: LD_ADDR_VAR 0 12
81517: PUSH
81518: CALL_OW 44
81522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81523: LD_VAR 0 12
81527: PPUSH
81528: LD_VAR 0 8
81532: PPUSH
81533: LD_INT 0
81535: PPUSH
81536: CALL 88218 0 3
// end ;
81540: GO 81494
81542: POP
81543: POP
// if birds then
81544: LD_VAR 0 1
81548: IFFALSE 81615
// for i = 1 to birds do
81550: LD_ADDR_VAR 0 11
81554: PUSH
81555: DOUBLE
81556: LD_INT 1
81558: DEC
81559: ST_TO_ADDR
81560: LD_VAR 0 1
81564: PUSH
81565: FOR_TO
81566: IFFALSE 81613
// begin hc_class = 18 ;
81568: LD_ADDR_OWVAR 28
81572: PUSH
81573: LD_INT 18
81575: ST_TO_ADDR
// hc_gallery =  ;
81576: LD_ADDR_OWVAR 33
81580: PUSH
81581: LD_STRING 
81583: ST_TO_ADDR
// animal := CreateHuman ;
81584: LD_ADDR_VAR 0 12
81588: PUSH
81589: CALL_OW 44
81593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81594: LD_VAR 0 12
81598: PPUSH
81599: LD_VAR 0 8
81603: PPUSH
81604: LD_INT 0
81606: PPUSH
81607: CALL 88218 0 3
// end ;
81611: GO 81565
81613: POP
81614: POP
// if tigers then
81615: LD_VAR 0 2
81619: IFFALSE 81703
// for i = 1 to tigers do
81621: LD_ADDR_VAR 0 11
81625: PUSH
81626: DOUBLE
81627: LD_INT 1
81629: DEC
81630: ST_TO_ADDR
81631: LD_VAR 0 2
81635: PUSH
81636: FOR_TO
81637: IFFALSE 81701
// begin hc_class = class_tiger ;
81639: LD_ADDR_OWVAR 28
81643: PUSH
81644: LD_INT 14
81646: ST_TO_ADDR
// hc_gallery =  ;
81647: LD_ADDR_OWVAR 33
81651: PUSH
81652: LD_STRING 
81654: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
81655: LD_ADDR_OWVAR 35
81659: PUSH
81660: LD_INT 7
81662: NEG
81663: PPUSH
81664: LD_INT 7
81666: PPUSH
81667: CALL_OW 12
81671: ST_TO_ADDR
// animal := CreateHuman ;
81672: LD_ADDR_VAR 0 12
81676: PUSH
81677: CALL_OW 44
81681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81682: LD_VAR 0 12
81686: PPUSH
81687: LD_VAR 0 8
81691: PPUSH
81692: LD_INT 0
81694: PPUSH
81695: CALL 88218 0 3
// end ;
81699: GO 81636
81701: POP
81702: POP
// if apemans then
81703: LD_VAR 0 3
81707: IFFALSE 81830
// for i = 1 to apemans do
81709: LD_ADDR_VAR 0 11
81713: PUSH
81714: DOUBLE
81715: LD_INT 1
81717: DEC
81718: ST_TO_ADDR
81719: LD_VAR 0 3
81723: PUSH
81724: FOR_TO
81725: IFFALSE 81828
// begin hc_class = class_apeman ;
81727: LD_ADDR_OWVAR 28
81731: PUSH
81732: LD_INT 12
81734: ST_TO_ADDR
// hc_gallery =  ;
81735: LD_ADDR_OWVAR 33
81739: PUSH
81740: LD_STRING 
81742: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
81743: LD_ADDR_OWVAR 35
81747: PUSH
81748: LD_INT 5
81750: NEG
81751: PPUSH
81752: LD_INT 5
81754: PPUSH
81755: CALL_OW 12
81759: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
81760: LD_ADDR_OWVAR 31
81764: PUSH
81765: LD_INT 1
81767: PPUSH
81768: LD_INT 3
81770: PPUSH
81771: CALL_OW 12
81775: PUSH
81776: LD_INT 1
81778: PPUSH
81779: LD_INT 3
81781: PPUSH
81782: CALL_OW 12
81786: PUSH
81787: LD_INT 0
81789: PUSH
81790: LD_INT 0
81792: PUSH
81793: EMPTY
81794: LIST
81795: LIST
81796: LIST
81797: LIST
81798: ST_TO_ADDR
// animal := CreateHuman ;
81799: LD_ADDR_VAR 0 12
81803: PUSH
81804: CALL_OW 44
81808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81809: LD_VAR 0 12
81813: PPUSH
81814: LD_VAR 0 8
81818: PPUSH
81819: LD_INT 0
81821: PPUSH
81822: CALL 88218 0 3
// end ;
81826: GO 81724
81828: POP
81829: POP
// if enchidnas then
81830: LD_VAR 0 4
81834: IFFALSE 81901
// for i = 1 to enchidnas do
81836: LD_ADDR_VAR 0 11
81840: PUSH
81841: DOUBLE
81842: LD_INT 1
81844: DEC
81845: ST_TO_ADDR
81846: LD_VAR 0 4
81850: PUSH
81851: FOR_TO
81852: IFFALSE 81899
// begin hc_class = 13 ;
81854: LD_ADDR_OWVAR 28
81858: PUSH
81859: LD_INT 13
81861: ST_TO_ADDR
// hc_gallery =  ;
81862: LD_ADDR_OWVAR 33
81866: PUSH
81867: LD_STRING 
81869: ST_TO_ADDR
// animal := CreateHuman ;
81870: LD_ADDR_VAR 0 12
81874: PUSH
81875: CALL_OW 44
81879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81880: LD_VAR 0 12
81884: PPUSH
81885: LD_VAR 0 8
81889: PPUSH
81890: LD_INT 0
81892: PPUSH
81893: CALL 88218 0 3
// end ;
81897: GO 81851
81899: POP
81900: POP
// if fishes then
81901: LD_VAR 0 7
81905: IFFALSE 81972
// for i = 1 to fishes do
81907: LD_ADDR_VAR 0 11
81911: PUSH
81912: DOUBLE
81913: LD_INT 1
81915: DEC
81916: ST_TO_ADDR
81917: LD_VAR 0 7
81921: PUSH
81922: FOR_TO
81923: IFFALSE 81970
// begin hc_class = 20 ;
81925: LD_ADDR_OWVAR 28
81929: PUSH
81930: LD_INT 20
81932: ST_TO_ADDR
// hc_gallery =  ;
81933: LD_ADDR_OWVAR 33
81937: PUSH
81938: LD_STRING 
81940: ST_TO_ADDR
// animal := CreateHuman ;
81941: LD_ADDR_VAR 0 12
81945: PUSH
81946: CALL_OW 44
81950: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
81951: LD_VAR 0 12
81955: PPUSH
81956: LD_VAR 0 9
81960: PPUSH
81961: LD_INT 0
81963: PPUSH
81964: CALL 88218 0 3
// end ;
81968: GO 81922
81970: POP
81971: POP
// end ;
81972: LD_VAR 0 10
81976: RET
// export function WantHeal ( sci , unit ) ; begin
81977: LD_INT 0
81979: PPUSH
// if GetTaskList ( sci ) > 0 then
81980: LD_VAR 0 1
81984: PPUSH
81985: CALL_OW 437
81989: PUSH
81990: LD_INT 0
81992: GREATER
81993: IFFALSE 82063
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
81995: LD_VAR 0 1
81999: PPUSH
82000: CALL_OW 437
82004: PUSH
82005: LD_INT 1
82007: ARRAY
82008: PUSH
82009: LD_INT 1
82011: ARRAY
82012: PUSH
82013: LD_STRING l
82015: EQUAL
82016: PUSH
82017: LD_VAR 0 1
82021: PPUSH
82022: CALL_OW 437
82026: PUSH
82027: LD_INT 1
82029: ARRAY
82030: PUSH
82031: LD_INT 4
82033: ARRAY
82034: PUSH
82035: LD_VAR 0 2
82039: EQUAL
82040: AND
82041: IFFALSE 82053
// result := true else
82043: LD_ADDR_VAR 0 3
82047: PUSH
82048: LD_INT 1
82050: ST_TO_ADDR
82051: GO 82061
// result := false ;
82053: LD_ADDR_VAR 0 3
82057: PUSH
82058: LD_INT 0
82060: ST_TO_ADDR
// end else
82061: GO 82071
// result := false ;
82063: LD_ADDR_VAR 0 3
82067: PUSH
82068: LD_INT 0
82070: ST_TO_ADDR
// end ;
82071: LD_VAR 0 3
82075: RET
// export function HealTarget ( sci ) ; begin
82076: LD_INT 0
82078: PPUSH
// if not sci then
82079: LD_VAR 0 1
82083: NOT
82084: IFFALSE 82088
// exit ;
82086: GO 82153
// result := 0 ;
82088: LD_ADDR_VAR 0 2
82092: PUSH
82093: LD_INT 0
82095: ST_TO_ADDR
// if GetTaskList ( sci ) then
82096: LD_VAR 0 1
82100: PPUSH
82101: CALL_OW 437
82105: IFFALSE 82153
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
82107: LD_VAR 0 1
82111: PPUSH
82112: CALL_OW 437
82116: PUSH
82117: LD_INT 1
82119: ARRAY
82120: PUSH
82121: LD_INT 1
82123: ARRAY
82124: PUSH
82125: LD_STRING l
82127: EQUAL
82128: IFFALSE 82153
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
82130: LD_ADDR_VAR 0 2
82134: PUSH
82135: LD_VAR 0 1
82139: PPUSH
82140: CALL_OW 437
82144: PUSH
82145: LD_INT 1
82147: ARRAY
82148: PUSH
82149: LD_INT 4
82151: ARRAY
82152: ST_TO_ADDR
// end ;
82153: LD_VAR 0 2
82157: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
82158: LD_INT 0
82160: PPUSH
82161: PPUSH
82162: PPUSH
82163: PPUSH
82164: PPUSH
82165: PPUSH
82166: PPUSH
82167: PPUSH
82168: PPUSH
82169: PPUSH
82170: PPUSH
82171: PPUSH
82172: PPUSH
82173: PPUSH
82174: PPUSH
82175: PPUSH
82176: PPUSH
82177: PPUSH
82178: PPUSH
82179: PPUSH
82180: PPUSH
82181: PPUSH
82182: PPUSH
82183: PPUSH
82184: PPUSH
82185: PPUSH
82186: PPUSH
82187: PPUSH
82188: PPUSH
82189: PPUSH
82190: PPUSH
82191: PPUSH
82192: PPUSH
82193: PPUSH
// if not list then
82194: LD_VAR 0 1
82198: NOT
82199: IFFALSE 82203
// exit ;
82201: GO 86829
// base := list [ 1 ] ;
82203: LD_ADDR_VAR 0 3
82207: PUSH
82208: LD_VAR 0 1
82212: PUSH
82213: LD_INT 1
82215: ARRAY
82216: ST_TO_ADDR
// group := list [ 2 ] ;
82217: LD_ADDR_VAR 0 4
82221: PUSH
82222: LD_VAR 0 1
82226: PUSH
82227: LD_INT 2
82229: ARRAY
82230: ST_TO_ADDR
// path := list [ 3 ] ;
82231: LD_ADDR_VAR 0 5
82235: PUSH
82236: LD_VAR 0 1
82240: PUSH
82241: LD_INT 3
82243: ARRAY
82244: ST_TO_ADDR
// flags := list [ 4 ] ;
82245: LD_ADDR_VAR 0 6
82249: PUSH
82250: LD_VAR 0 1
82254: PUSH
82255: LD_INT 4
82257: ARRAY
82258: ST_TO_ADDR
// mined := [ ] ;
82259: LD_ADDR_VAR 0 27
82263: PUSH
82264: EMPTY
82265: ST_TO_ADDR
// bombed := [ ] ;
82266: LD_ADDR_VAR 0 28
82270: PUSH
82271: EMPTY
82272: ST_TO_ADDR
// healers := [ ] ;
82273: LD_ADDR_VAR 0 31
82277: PUSH
82278: EMPTY
82279: ST_TO_ADDR
// to_heal := [ ] ;
82280: LD_ADDR_VAR 0 30
82284: PUSH
82285: EMPTY
82286: ST_TO_ADDR
// repairs := [ ] ;
82287: LD_ADDR_VAR 0 33
82291: PUSH
82292: EMPTY
82293: ST_TO_ADDR
// to_repair := [ ] ;
82294: LD_ADDR_VAR 0 32
82298: PUSH
82299: EMPTY
82300: ST_TO_ADDR
// if not group or not path then
82301: LD_VAR 0 4
82305: NOT
82306: PUSH
82307: LD_VAR 0 5
82311: NOT
82312: OR
82313: IFFALSE 82317
// exit ;
82315: GO 86829
// side := GetSide ( group [ 1 ] ) ;
82317: LD_ADDR_VAR 0 35
82321: PUSH
82322: LD_VAR 0 4
82326: PUSH
82327: LD_INT 1
82329: ARRAY
82330: PPUSH
82331: CALL_OW 255
82335: ST_TO_ADDR
// if flags then
82336: LD_VAR 0 6
82340: IFFALSE 82484
// begin f_ignore_area := flags [ 1 ] ;
82342: LD_ADDR_VAR 0 17
82346: PUSH
82347: LD_VAR 0 6
82351: PUSH
82352: LD_INT 1
82354: ARRAY
82355: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
82356: LD_ADDR_VAR 0 18
82360: PUSH
82361: LD_VAR 0 6
82365: PUSH
82366: LD_INT 2
82368: ARRAY
82369: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
82370: LD_ADDR_VAR 0 19
82374: PUSH
82375: LD_VAR 0 6
82379: PUSH
82380: LD_INT 3
82382: ARRAY
82383: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
82384: LD_ADDR_VAR 0 20
82388: PUSH
82389: LD_VAR 0 6
82393: PUSH
82394: LD_INT 4
82396: ARRAY
82397: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
82398: LD_ADDR_VAR 0 21
82402: PUSH
82403: LD_VAR 0 6
82407: PUSH
82408: LD_INT 5
82410: ARRAY
82411: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
82412: LD_ADDR_VAR 0 22
82416: PUSH
82417: LD_VAR 0 6
82421: PUSH
82422: LD_INT 6
82424: ARRAY
82425: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
82426: LD_ADDR_VAR 0 23
82430: PUSH
82431: LD_VAR 0 6
82435: PUSH
82436: LD_INT 7
82438: ARRAY
82439: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
82440: LD_ADDR_VAR 0 24
82444: PUSH
82445: LD_VAR 0 6
82449: PUSH
82450: LD_INT 8
82452: ARRAY
82453: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
82454: LD_ADDR_VAR 0 25
82458: PUSH
82459: LD_VAR 0 6
82463: PUSH
82464: LD_INT 9
82466: ARRAY
82467: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
82468: LD_ADDR_VAR 0 26
82472: PUSH
82473: LD_VAR 0 6
82477: PUSH
82478: LD_INT 10
82480: ARRAY
82481: ST_TO_ADDR
// end else
82482: GO 82564
// begin f_ignore_area := false ;
82484: LD_ADDR_VAR 0 17
82488: PUSH
82489: LD_INT 0
82491: ST_TO_ADDR
// f_capture := false ;
82492: LD_ADDR_VAR 0 18
82496: PUSH
82497: LD_INT 0
82499: ST_TO_ADDR
// f_ignore_civ := false ;
82500: LD_ADDR_VAR 0 19
82504: PUSH
82505: LD_INT 0
82507: ST_TO_ADDR
// f_murder := false ;
82508: LD_ADDR_VAR 0 20
82512: PUSH
82513: LD_INT 0
82515: ST_TO_ADDR
// f_mines := false ;
82516: LD_ADDR_VAR 0 21
82520: PUSH
82521: LD_INT 0
82523: ST_TO_ADDR
// f_repair := false ;
82524: LD_ADDR_VAR 0 22
82528: PUSH
82529: LD_INT 0
82531: ST_TO_ADDR
// f_heal := false ;
82532: LD_ADDR_VAR 0 23
82536: PUSH
82537: LD_INT 0
82539: ST_TO_ADDR
// f_spacetime := false ;
82540: LD_ADDR_VAR 0 24
82544: PUSH
82545: LD_INT 0
82547: ST_TO_ADDR
// f_attack_depot := false ;
82548: LD_ADDR_VAR 0 25
82552: PUSH
82553: LD_INT 0
82555: ST_TO_ADDR
// f_crawl := false ;
82556: LD_ADDR_VAR 0 26
82560: PUSH
82561: LD_INT 0
82563: ST_TO_ADDR
// end ; if f_heal then
82564: LD_VAR 0 23
82568: IFFALSE 82595
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
82570: LD_ADDR_VAR 0 31
82574: PUSH
82575: LD_VAR 0 4
82579: PPUSH
82580: LD_INT 25
82582: PUSH
82583: LD_INT 4
82585: PUSH
82586: EMPTY
82587: LIST
82588: LIST
82589: PPUSH
82590: CALL_OW 72
82594: ST_TO_ADDR
// if f_repair then
82595: LD_VAR 0 22
82599: IFFALSE 82626
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
82601: LD_ADDR_VAR 0 33
82605: PUSH
82606: LD_VAR 0 4
82610: PPUSH
82611: LD_INT 25
82613: PUSH
82614: LD_INT 3
82616: PUSH
82617: EMPTY
82618: LIST
82619: LIST
82620: PPUSH
82621: CALL_OW 72
82625: ST_TO_ADDR
// units_path := [ ] ;
82626: LD_ADDR_VAR 0 16
82630: PUSH
82631: EMPTY
82632: ST_TO_ADDR
// for i = 1 to group do
82633: LD_ADDR_VAR 0 7
82637: PUSH
82638: DOUBLE
82639: LD_INT 1
82641: DEC
82642: ST_TO_ADDR
82643: LD_VAR 0 4
82647: PUSH
82648: FOR_TO
82649: IFFALSE 82678
// units_path := Replace ( units_path , i , path ) ;
82651: LD_ADDR_VAR 0 16
82655: PUSH
82656: LD_VAR 0 16
82660: PPUSH
82661: LD_VAR 0 7
82665: PPUSH
82666: LD_VAR 0 5
82670: PPUSH
82671: CALL_OW 1
82675: ST_TO_ADDR
82676: GO 82648
82678: POP
82679: POP
// repeat for i = group downto 1 do
82680: LD_ADDR_VAR 0 7
82684: PUSH
82685: DOUBLE
82686: LD_VAR 0 4
82690: INC
82691: ST_TO_ADDR
82692: LD_INT 1
82694: PUSH
82695: FOR_DOWNTO
82696: IFFALSE 86792
// begin wait ( 5 ) ;
82698: LD_INT 5
82700: PPUSH
82701: CALL_OW 67
// tmp := [ ] ;
82705: LD_ADDR_VAR 0 14
82709: PUSH
82710: EMPTY
82711: ST_TO_ADDR
// attacking := false ;
82712: LD_ADDR_VAR 0 29
82716: PUSH
82717: LD_INT 0
82719: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
82720: LD_VAR 0 4
82724: PUSH
82725: LD_VAR 0 7
82729: ARRAY
82730: PPUSH
82731: CALL_OW 301
82735: PUSH
82736: LD_VAR 0 4
82740: PUSH
82741: LD_VAR 0 7
82745: ARRAY
82746: NOT
82747: OR
82748: IFFALSE 82857
// begin if GetType ( group [ i ] ) = unit_human then
82750: LD_VAR 0 4
82754: PUSH
82755: LD_VAR 0 7
82759: ARRAY
82760: PPUSH
82761: CALL_OW 247
82765: PUSH
82766: LD_INT 1
82768: EQUAL
82769: IFFALSE 82815
// begin to_heal := to_heal diff group [ i ] ;
82771: LD_ADDR_VAR 0 30
82775: PUSH
82776: LD_VAR 0 30
82780: PUSH
82781: LD_VAR 0 4
82785: PUSH
82786: LD_VAR 0 7
82790: ARRAY
82791: DIFF
82792: ST_TO_ADDR
// healers := healers diff group [ i ] ;
82793: LD_ADDR_VAR 0 31
82797: PUSH
82798: LD_VAR 0 31
82802: PUSH
82803: LD_VAR 0 4
82807: PUSH
82808: LD_VAR 0 7
82812: ARRAY
82813: DIFF
82814: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
82815: LD_ADDR_VAR 0 4
82819: PUSH
82820: LD_VAR 0 4
82824: PPUSH
82825: LD_VAR 0 7
82829: PPUSH
82830: CALL_OW 3
82834: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
82835: LD_ADDR_VAR 0 16
82839: PUSH
82840: LD_VAR 0 16
82844: PPUSH
82845: LD_VAR 0 7
82849: PPUSH
82850: CALL_OW 3
82854: ST_TO_ADDR
// continue ;
82855: GO 82695
// end ; if f_repair then
82857: LD_VAR 0 22
82861: IFFALSE 83350
// begin if GetType ( group [ i ] ) = unit_vehicle then
82863: LD_VAR 0 4
82867: PUSH
82868: LD_VAR 0 7
82872: ARRAY
82873: PPUSH
82874: CALL_OW 247
82878: PUSH
82879: LD_INT 2
82881: EQUAL
82882: IFFALSE 83072
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
82884: LD_VAR 0 4
82888: PUSH
82889: LD_VAR 0 7
82893: ARRAY
82894: PPUSH
82895: CALL_OW 256
82899: PUSH
82900: LD_INT 700
82902: LESS
82903: PUSH
82904: LD_VAR 0 4
82908: PUSH
82909: LD_VAR 0 7
82913: ARRAY
82914: PUSH
82915: LD_VAR 0 32
82919: IN
82920: NOT
82921: AND
82922: IFFALSE 82946
// to_repair := to_repair union group [ i ] ;
82924: LD_ADDR_VAR 0 32
82928: PUSH
82929: LD_VAR 0 32
82933: PUSH
82934: LD_VAR 0 4
82938: PUSH
82939: LD_VAR 0 7
82943: ARRAY
82944: UNION
82945: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
82946: LD_VAR 0 4
82950: PUSH
82951: LD_VAR 0 7
82955: ARRAY
82956: PPUSH
82957: CALL_OW 256
82961: PUSH
82962: LD_INT 1000
82964: EQUAL
82965: PUSH
82966: LD_VAR 0 4
82970: PUSH
82971: LD_VAR 0 7
82975: ARRAY
82976: PUSH
82977: LD_VAR 0 32
82981: IN
82982: AND
82983: IFFALSE 83007
// to_repair := to_repair diff group [ i ] ;
82985: LD_ADDR_VAR 0 32
82989: PUSH
82990: LD_VAR 0 32
82994: PUSH
82995: LD_VAR 0 4
82999: PUSH
83000: LD_VAR 0 7
83004: ARRAY
83005: DIFF
83006: ST_TO_ADDR
// if group [ i ] in to_repair then
83007: LD_VAR 0 4
83011: PUSH
83012: LD_VAR 0 7
83016: ARRAY
83017: PUSH
83018: LD_VAR 0 32
83022: IN
83023: IFFALSE 83070
// begin if not IsInArea ( group [ i ] , f_repair ) then
83025: LD_VAR 0 4
83029: PUSH
83030: LD_VAR 0 7
83034: ARRAY
83035: PPUSH
83036: LD_VAR 0 22
83040: PPUSH
83041: CALL_OW 308
83045: NOT
83046: IFFALSE 83068
// ComMoveToArea ( group [ i ] , f_repair ) ;
83048: LD_VAR 0 4
83052: PUSH
83053: LD_VAR 0 7
83057: ARRAY
83058: PPUSH
83059: LD_VAR 0 22
83063: PPUSH
83064: CALL_OW 113
// continue ;
83068: GO 82695
// end ; end else
83070: GO 83350
// if group [ i ] in repairs then
83072: LD_VAR 0 4
83076: PUSH
83077: LD_VAR 0 7
83081: ARRAY
83082: PUSH
83083: LD_VAR 0 33
83087: IN
83088: IFFALSE 83350
// begin if IsInUnit ( group [ i ] ) then
83090: LD_VAR 0 4
83094: PUSH
83095: LD_VAR 0 7
83099: ARRAY
83100: PPUSH
83101: CALL_OW 310
83105: IFFALSE 83173
// begin z := IsInUnit ( group [ i ] ) ;
83107: LD_ADDR_VAR 0 13
83111: PUSH
83112: LD_VAR 0 4
83116: PUSH
83117: LD_VAR 0 7
83121: ARRAY
83122: PPUSH
83123: CALL_OW 310
83127: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
83128: LD_VAR 0 13
83132: PUSH
83133: LD_VAR 0 32
83137: IN
83138: PUSH
83139: LD_VAR 0 13
83143: PPUSH
83144: LD_VAR 0 22
83148: PPUSH
83149: CALL_OW 308
83153: AND
83154: IFFALSE 83171
// ComExitVehicle ( group [ i ] ) ;
83156: LD_VAR 0 4
83160: PUSH
83161: LD_VAR 0 7
83165: ARRAY
83166: PPUSH
83167: CALL_OW 121
// end else
83171: GO 83350
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
83173: LD_ADDR_VAR 0 13
83177: PUSH
83178: LD_VAR 0 4
83182: PPUSH
83183: LD_INT 95
83185: PUSH
83186: LD_VAR 0 22
83190: PUSH
83191: EMPTY
83192: LIST
83193: LIST
83194: PUSH
83195: LD_INT 58
83197: PUSH
83198: EMPTY
83199: LIST
83200: PUSH
83201: EMPTY
83202: LIST
83203: LIST
83204: PPUSH
83205: CALL_OW 72
83209: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
83210: LD_VAR 0 4
83214: PUSH
83215: LD_VAR 0 7
83219: ARRAY
83220: PPUSH
83221: CALL_OW 314
83225: NOT
83226: IFFALSE 83348
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
83228: LD_ADDR_VAR 0 10
83232: PUSH
83233: LD_VAR 0 13
83237: PPUSH
83238: LD_VAR 0 4
83242: PUSH
83243: LD_VAR 0 7
83247: ARRAY
83248: PPUSH
83249: CALL_OW 74
83253: ST_TO_ADDR
// if not x then
83254: LD_VAR 0 10
83258: NOT
83259: IFFALSE 83263
// continue ;
83261: GO 82695
// if GetLives ( x ) < 1000 then
83263: LD_VAR 0 10
83267: PPUSH
83268: CALL_OW 256
83272: PUSH
83273: LD_INT 1000
83275: LESS
83276: IFFALSE 83300
// ComRepairVehicle ( group [ i ] , x ) else
83278: LD_VAR 0 4
83282: PUSH
83283: LD_VAR 0 7
83287: ARRAY
83288: PPUSH
83289: LD_VAR 0 10
83293: PPUSH
83294: CALL_OW 129
83298: GO 83348
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
83300: LD_VAR 0 23
83304: PUSH
83305: LD_VAR 0 4
83309: PUSH
83310: LD_VAR 0 7
83314: ARRAY
83315: PPUSH
83316: CALL_OW 256
83320: PUSH
83321: LD_INT 1000
83323: LESS
83324: AND
83325: NOT
83326: IFFALSE 83348
// ComEnterUnit ( group [ i ] , x ) ;
83328: LD_VAR 0 4
83332: PUSH
83333: LD_VAR 0 7
83337: ARRAY
83338: PPUSH
83339: LD_VAR 0 10
83343: PPUSH
83344: CALL_OW 120
// end ; continue ;
83348: GO 82695
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
83350: LD_VAR 0 23
83354: PUSH
83355: LD_VAR 0 4
83359: PUSH
83360: LD_VAR 0 7
83364: ARRAY
83365: PPUSH
83366: CALL_OW 247
83370: PUSH
83371: LD_INT 1
83373: EQUAL
83374: AND
83375: IFFALSE 83853
// begin if group [ i ] in healers then
83377: LD_VAR 0 4
83381: PUSH
83382: LD_VAR 0 7
83386: ARRAY
83387: PUSH
83388: LD_VAR 0 31
83392: IN
83393: IFFALSE 83666
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
83395: LD_VAR 0 4
83399: PUSH
83400: LD_VAR 0 7
83404: ARRAY
83405: PPUSH
83406: LD_VAR 0 23
83410: PPUSH
83411: CALL_OW 308
83415: NOT
83416: PUSH
83417: LD_VAR 0 4
83421: PUSH
83422: LD_VAR 0 7
83426: ARRAY
83427: PPUSH
83428: CALL_OW 314
83432: NOT
83433: AND
83434: IFFALSE 83458
// ComMoveToArea ( group [ i ] , f_heal ) else
83436: LD_VAR 0 4
83440: PUSH
83441: LD_VAR 0 7
83445: ARRAY
83446: PPUSH
83447: LD_VAR 0 23
83451: PPUSH
83452: CALL_OW 113
83456: GO 83664
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
83458: LD_VAR 0 4
83462: PUSH
83463: LD_VAR 0 7
83467: ARRAY
83468: PPUSH
83469: CALL 82076 0 1
83473: PPUSH
83474: CALL_OW 256
83478: PUSH
83479: LD_INT 1000
83481: EQUAL
83482: IFFALSE 83501
// ComStop ( group [ i ] ) else
83484: LD_VAR 0 4
83488: PUSH
83489: LD_VAR 0 7
83493: ARRAY
83494: PPUSH
83495: CALL_OW 141
83499: GO 83664
// if not HasTask ( group [ i ] ) and to_heal then
83501: LD_VAR 0 4
83505: PUSH
83506: LD_VAR 0 7
83510: ARRAY
83511: PPUSH
83512: CALL_OW 314
83516: NOT
83517: PUSH
83518: LD_VAR 0 30
83522: AND
83523: IFFALSE 83664
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
83525: LD_ADDR_VAR 0 13
83529: PUSH
83530: LD_VAR 0 30
83534: PPUSH
83535: LD_INT 3
83537: PUSH
83538: LD_INT 54
83540: PUSH
83541: EMPTY
83542: LIST
83543: PUSH
83544: EMPTY
83545: LIST
83546: LIST
83547: PPUSH
83548: CALL_OW 72
83552: PPUSH
83553: LD_VAR 0 4
83557: PUSH
83558: LD_VAR 0 7
83562: ARRAY
83563: PPUSH
83564: CALL_OW 74
83568: ST_TO_ADDR
// if z then
83569: LD_VAR 0 13
83573: IFFALSE 83664
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
83575: LD_INT 91
83577: PUSH
83578: LD_VAR 0 13
83582: PUSH
83583: LD_INT 10
83585: PUSH
83586: EMPTY
83587: LIST
83588: LIST
83589: LIST
83590: PUSH
83591: LD_INT 81
83593: PUSH
83594: LD_VAR 0 13
83598: PPUSH
83599: CALL_OW 255
83603: PUSH
83604: EMPTY
83605: LIST
83606: LIST
83607: PUSH
83608: EMPTY
83609: LIST
83610: LIST
83611: PPUSH
83612: CALL_OW 69
83616: PUSH
83617: LD_INT 0
83619: EQUAL
83620: IFFALSE 83644
// ComHeal ( group [ i ] , z ) else
83622: LD_VAR 0 4
83626: PUSH
83627: LD_VAR 0 7
83631: ARRAY
83632: PPUSH
83633: LD_VAR 0 13
83637: PPUSH
83638: CALL_OW 128
83642: GO 83664
// ComMoveToArea ( group [ i ] , f_heal ) ;
83644: LD_VAR 0 4
83648: PUSH
83649: LD_VAR 0 7
83653: ARRAY
83654: PPUSH
83655: LD_VAR 0 23
83659: PPUSH
83660: CALL_OW 113
// end ; continue ;
83664: GO 82695
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
83666: LD_VAR 0 4
83670: PUSH
83671: LD_VAR 0 7
83675: ARRAY
83676: PPUSH
83677: CALL_OW 256
83681: PUSH
83682: LD_INT 700
83684: LESS
83685: PUSH
83686: LD_VAR 0 4
83690: PUSH
83691: LD_VAR 0 7
83695: ARRAY
83696: PUSH
83697: LD_VAR 0 30
83701: IN
83702: NOT
83703: AND
83704: IFFALSE 83728
// to_heal := to_heal union group [ i ] ;
83706: LD_ADDR_VAR 0 30
83710: PUSH
83711: LD_VAR 0 30
83715: PUSH
83716: LD_VAR 0 4
83720: PUSH
83721: LD_VAR 0 7
83725: ARRAY
83726: UNION
83727: ST_TO_ADDR
// if group [ i ] in to_heal then
83728: LD_VAR 0 4
83732: PUSH
83733: LD_VAR 0 7
83737: ARRAY
83738: PUSH
83739: LD_VAR 0 30
83743: IN
83744: IFFALSE 83853
// begin if GetLives ( group [ i ] ) = 1000 then
83746: LD_VAR 0 4
83750: PUSH
83751: LD_VAR 0 7
83755: ARRAY
83756: PPUSH
83757: CALL_OW 256
83761: PUSH
83762: LD_INT 1000
83764: EQUAL
83765: IFFALSE 83791
// to_heal := to_heal diff group [ i ] else
83767: LD_ADDR_VAR 0 30
83771: PUSH
83772: LD_VAR 0 30
83776: PUSH
83777: LD_VAR 0 4
83781: PUSH
83782: LD_VAR 0 7
83786: ARRAY
83787: DIFF
83788: ST_TO_ADDR
83789: GO 83853
// begin if not IsInArea ( group [ i ] , to_heal ) then
83791: LD_VAR 0 4
83795: PUSH
83796: LD_VAR 0 7
83800: ARRAY
83801: PPUSH
83802: LD_VAR 0 30
83806: PPUSH
83807: CALL_OW 308
83811: NOT
83812: IFFALSE 83836
// ComMoveToArea ( group [ i ] , f_heal ) else
83814: LD_VAR 0 4
83818: PUSH
83819: LD_VAR 0 7
83823: ARRAY
83824: PPUSH
83825: LD_VAR 0 23
83829: PPUSH
83830: CALL_OW 113
83834: GO 83851
// ComHold ( group [ i ] ) ;
83836: LD_VAR 0 4
83840: PUSH
83841: LD_VAR 0 7
83845: ARRAY
83846: PPUSH
83847: CALL_OW 140
// continue ;
83851: GO 82695
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
83853: LD_VAR 0 4
83857: PUSH
83858: LD_VAR 0 7
83862: ARRAY
83863: PPUSH
83864: LD_INT 10
83866: PPUSH
83867: CALL 80473 0 2
83871: NOT
83872: PUSH
83873: LD_VAR 0 16
83877: PUSH
83878: LD_VAR 0 7
83882: ARRAY
83883: PUSH
83884: EMPTY
83885: EQUAL
83886: NOT
83887: AND
83888: IFFALSE 84154
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
83890: LD_VAR 0 4
83894: PUSH
83895: LD_VAR 0 7
83899: ARRAY
83900: PPUSH
83901: CALL_OW 262
83905: PUSH
83906: LD_INT 1
83908: PUSH
83909: LD_INT 2
83911: PUSH
83912: EMPTY
83913: LIST
83914: LIST
83915: IN
83916: IFFALSE 83957
// if GetFuel ( group [ i ] ) < 10 then
83918: LD_VAR 0 4
83922: PUSH
83923: LD_VAR 0 7
83927: ARRAY
83928: PPUSH
83929: CALL_OW 261
83933: PUSH
83934: LD_INT 10
83936: LESS
83937: IFFALSE 83957
// SetFuel ( group [ i ] , 12 ) ;
83939: LD_VAR 0 4
83943: PUSH
83944: LD_VAR 0 7
83948: ARRAY
83949: PPUSH
83950: LD_INT 12
83952: PPUSH
83953: CALL_OW 240
// if units_path [ i ] then
83957: LD_VAR 0 16
83961: PUSH
83962: LD_VAR 0 7
83966: ARRAY
83967: IFFALSE 84152
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
83969: LD_VAR 0 4
83973: PUSH
83974: LD_VAR 0 7
83978: ARRAY
83979: PPUSH
83980: LD_VAR 0 16
83984: PUSH
83985: LD_VAR 0 7
83989: ARRAY
83990: PUSH
83991: LD_INT 1
83993: ARRAY
83994: PUSH
83995: LD_INT 1
83997: ARRAY
83998: PPUSH
83999: LD_VAR 0 16
84003: PUSH
84004: LD_VAR 0 7
84008: ARRAY
84009: PUSH
84010: LD_INT 1
84012: ARRAY
84013: PUSH
84014: LD_INT 2
84016: ARRAY
84017: PPUSH
84018: CALL_OW 297
84022: PUSH
84023: LD_INT 6
84025: GREATER
84026: IFFALSE 84101
// begin if not HasTask ( group [ i ] ) then
84028: LD_VAR 0 4
84032: PUSH
84033: LD_VAR 0 7
84037: ARRAY
84038: PPUSH
84039: CALL_OW 314
84043: NOT
84044: IFFALSE 84099
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
84046: LD_VAR 0 4
84050: PUSH
84051: LD_VAR 0 7
84055: ARRAY
84056: PPUSH
84057: LD_VAR 0 16
84061: PUSH
84062: LD_VAR 0 7
84066: ARRAY
84067: PUSH
84068: LD_INT 1
84070: ARRAY
84071: PUSH
84072: LD_INT 1
84074: ARRAY
84075: PPUSH
84076: LD_VAR 0 16
84080: PUSH
84081: LD_VAR 0 7
84085: ARRAY
84086: PUSH
84087: LD_INT 1
84089: ARRAY
84090: PUSH
84091: LD_INT 2
84093: ARRAY
84094: PPUSH
84095: CALL_OW 114
// end else
84099: GO 84152
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
84101: LD_ADDR_VAR 0 15
84105: PUSH
84106: LD_VAR 0 16
84110: PUSH
84111: LD_VAR 0 7
84115: ARRAY
84116: PPUSH
84117: LD_INT 1
84119: PPUSH
84120: CALL_OW 3
84124: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
84125: LD_ADDR_VAR 0 16
84129: PUSH
84130: LD_VAR 0 16
84134: PPUSH
84135: LD_VAR 0 7
84139: PPUSH
84140: LD_VAR 0 15
84144: PPUSH
84145: CALL_OW 1
84149: ST_TO_ADDR
// continue ;
84150: GO 82695
// end ; end ; end else
84152: GO 86790
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
84154: LD_ADDR_VAR 0 14
84158: PUSH
84159: LD_INT 81
84161: PUSH
84162: LD_VAR 0 4
84166: PUSH
84167: LD_VAR 0 7
84171: ARRAY
84172: PPUSH
84173: CALL_OW 255
84177: PUSH
84178: EMPTY
84179: LIST
84180: LIST
84181: PPUSH
84182: CALL_OW 69
84186: ST_TO_ADDR
// if not tmp then
84187: LD_VAR 0 14
84191: NOT
84192: IFFALSE 84196
// continue ;
84194: GO 82695
// if f_ignore_area then
84196: LD_VAR 0 17
84200: IFFALSE 84288
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
84202: LD_ADDR_VAR 0 15
84206: PUSH
84207: LD_VAR 0 14
84211: PPUSH
84212: LD_INT 3
84214: PUSH
84215: LD_INT 92
84217: PUSH
84218: LD_VAR 0 17
84222: PUSH
84223: LD_INT 1
84225: ARRAY
84226: PUSH
84227: LD_VAR 0 17
84231: PUSH
84232: LD_INT 2
84234: ARRAY
84235: PUSH
84236: LD_VAR 0 17
84240: PUSH
84241: LD_INT 3
84243: ARRAY
84244: PUSH
84245: EMPTY
84246: LIST
84247: LIST
84248: LIST
84249: LIST
84250: PUSH
84251: EMPTY
84252: LIST
84253: LIST
84254: PPUSH
84255: CALL_OW 72
84259: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
84260: LD_VAR 0 14
84264: PUSH
84265: LD_VAR 0 15
84269: DIFF
84270: IFFALSE 84288
// tmp := tmp diff tmp2 ;
84272: LD_ADDR_VAR 0 14
84276: PUSH
84277: LD_VAR 0 14
84281: PUSH
84282: LD_VAR 0 15
84286: DIFF
84287: ST_TO_ADDR
// end ; if not f_murder then
84288: LD_VAR 0 20
84292: NOT
84293: IFFALSE 84351
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
84295: LD_ADDR_VAR 0 15
84299: PUSH
84300: LD_VAR 0 14
84304: PPUSH
84305: LD_INT 3
84307: PUSH
84308: LD_INT 50
84310: PUSH
84311: EMPTY
84312: LIST
84313: PUSH
84314: EMPTY
84315: LIST
84316: LIST
84317: PPUSH
84318: CALL_OW 72
84322: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
84323: LD_VAR 0 14
84327: PUSH
84328: LD_VAR 0 15
84332: DIFF
84333: IFFALSE 84351
// tmp := tmp diff tmp2 ;
84335: LD_ADDR_VAR 0 14
84339: PUSH
84340: LD_VAR 0 14
84344: PUSH
84345: LD_VAR 0 15
84349: DIFF
84350: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
84351: LD_ADDR_VAR 0 14
84355: PUSH
84356: LD_VAR 0 4
84360: PUSH
84361: LD_VAR 0 7
84365: ARRAY
84366: PPUSH
84367: LD_VAR 0 14
84371: PPUSH
84372: LD_INT 1
84374: PPUSH
84375: LD_INT 1
84377: PPUSH
84378: CALL 54116 0 4
84382: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
84383: LD_VAR 0 4
84387: PUSH
84388: LD_VAR 0 7
84392: ARRAY
84393: PPUSH
84394: CALL_OW 257
84398: PUSH
84399: LD_INT 1
84401: EQUAL
84402: IFFALSE 84850
// begin if WantPlant ( group [ i ] ) then
84404: LD_VAR 0 4
84408: PUSH
84409: LD_VAR 0 7
84413: ARRAY
84414: PPUSH
84415: CALL 53617 0 1
84419: IFFALSE 84423
// continue ;
84421: GO 82695
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
84423: LD_VAR 0 18
84427: PUSH
84428: LD_VAR 0 4
84432: PUSH
84433: LD_VAR 0 7
84437: ARRAY
84438: PPUSH
84439: CALL_OW 310
84443: NOT
84444: AND
84445: PUSH
84446: LD_VAR 0 14
84450: PUSH
84451: LD_INT 1
84453: ARRAY
84454: PUSH
84455: LD_VAR 0 14
84459: PPUSH
84460: LD_INT 21
84462: PUSH
84463: LD_INT 2
84465: PUSH
84466: EMPTY
84467: LIST
84468: LIST
84469: PUSH
84470: LD_INT 58
84472: PUSH
84473: EMPTY
84474: LIST
84475: PUSH
84476: EMPTY
84477: LIST
84478: LIST
84479: PPUSH
84480: CALL_OW 72
84484: IN
84485: AND
84486: IFFALSE 84522
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
84488: LD_VAR 0 4
84492: PUSH
84493: LD_VAR 0 7
84497: ARRAY
84498: PPUSH
84499: LD_VAR 0 14
84503: PUSH
84504: LD_INT 1
84506: ARRAY
84507: PPUSH
84508: CALL_OW 120
// attacking := true ;
84512: LD_ADDR_VAR 0 29
84516: PUSH
84517: LD_INT 1
84519: ST_TO_ADDR
// continue ;
84520: GO 82695
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
84522: LD_VAR 0 26
84526: PUSH
84527: LD_VAR 0 4
84531: PUSH
84532: LD_VAR 0 7
84536: ARRAY
84537: PPUSH
84538: CALL_OW 257
84542: PUSH
84543: LD_INT 1
84545: EQUAL
84546: AND
84547: PUSH
84548: LD_VAR 0 4
84552: PUSH
84553: LD_VAR 0 7
84557: ARRAY
84558: PPUSH
84559: CALL_OW 256
84563: PUSH
84564: LD_INT 800
84566: LESS
84567: AND
84568: PUSH
84569: LD_VAR 0 4
84573: PUSH
84574: LD_VAR 0 7
84578: ARRAY
84579: PPUSH
84580: CALL_OW 318
84584: NOT
84585: AND
84586: IFFALSE 84603
// ComCrawl ( group [ i ] ) ;
84588: LD_VAR 0 4
84592: PUSH
84593: LD_VAR 0 7
84597: ARRAY
84598: PPUSH
84599: CALL_OW 137
// if f_mines then
84603: LD_VAR 0 21
84607: IFFALSE 84850
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
84609: LD_VAR 0 14
84613: PUSH
84614: LD_INT 1
84616: ARRAY
84617: PPUSH
84618: CALL_OW 247
84622: PUSH
84623: LD_INT 3
84625: EQUAL
84626: PUSH
84627: LD_VAR 0 14
84631: PUSH
84632: LD_INT 1
84634: ARRAY
84635: PUSH
84636: LD_VAR 0 27
84640: IN
84641: NOT
84642: AND
84643: IFFALSE 84850
// begin x := GetX ( tmp [ 1 ] ) ;
84645: LD_ADDR_VAR 0 10
84649: PUSH
84650: LD_VAR 0 14
84654: PUSH
84655: LD_INT 1
84657: ARRAY
84658: PPUSH
84659: CALL_OW 250
84663: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
84664: LD_ADDR_VAR 0 11
84668: PUSH
84669: LD_VAR 0 14
84673: PUSH
84674: LD_INT 1
84676: ARRAY
84677: PPUSH
84678: CALL_OW 251
84682: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
84683: LD_ADDR_VAR 0 12
84687: PUSH
84688: LD_VAR 0 4
84692: PUSH
84693: LD_VAR 0 7
84697: ARRAY
84698: PPUSH
84699: CALL 80558 0 1
84703: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
84704: LD_VAR 0 4
84708: PUSH
84709: LD_VAR 0 7
84713: ARRAY
84714: PPUSH
84715: LD_VAR 0 10
84719: PPUSH
84720: LD_VAR 0 11
84724: PPUSH
84725: LD_VAR 0 14
84729: PUSH
84730: LD_INT 1
84732: ARRAY
84733: PPUSH
84734: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
84738: LD_VAR 0 4
84742: PUSH
84743: LD_VAR 0 7
84747: ARRAY
84748: PPUSH
84749: LD_VAR 0 10
84753: PPUSH
84754: LD_VAR 0 12
84758: PPUSH
84759: LD_INT 7
84761: PPUSH
84762: CALL_OW 272
84766: PPUSH
84767: LD_VAR 0 11
84771: PPUSH
84772: LD_VAR 0 12
84776: PPUSH
84777: LD_INT 7
84779: PPUSH
84780: CALL_OW 273
84784: PPUSH
84785: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
84789: LD_VAR 0 4
84793: PUSH
84794: LD_VAR 0 7
84798: ARRAY
84799: PPUSH
84800: LD_INT 71
84802: PPUSH
84803: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
84807: LD_ADDR_VAR 0 27
84811: PUSH
84812: LD_VAR 0 27
84816: PPUSH
84817: LD_VAR 0 27
84821: PUSH
84822: LD_INT 1
84824: PLUS
84825: PPUSH
84826: LD_VAR 0 14
84830: PUSH
84831: LD_INT 1
84833: ARRAY
84834: PPUSH
84835: CALL_OW 1
84839: ST_TO_ADDR
// attacking := true ;
84840: LD_ADDR_VAR 0 29
84844: PUSH
84845: LD_INT 1
84847: ST_TO_ADDR
// continue ;
84848: GO 82695
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
84850: LD_VAR 0 4
84854: PUSH
84855: LD_VAR 0 7
84859: ARRAY
84860: PPUSH
84861: CALL_OW 257
84865: PUSH
84866: LD_INT 17
84868: EQUAL
84869: PUSH
84870: LD_VAR 0 4
84874: PUSH
84875: LD_VAR 0 7
84879: ARRAY
84880: PPUSH
84881: CALL_OW 110
84885: PUSH
84886: LD_INT 71
84888: EQUAL
84889: NOT
84890: AND
84891: IFFALSE 85037
// begin attacking := false ;
84893: LD_ADDR_VAR 0 29
84897: PUSH
84898: LD_INT 0
84900: ST_TO_ADDR
// k := 5 ;
84901: LD_ADDR_VAR 0 9
84905: PUSH
84906: LD_INT 5
84908: ST_TO_ADDR
// if tmp < k then
84909: LD_VAR 0 14
84913: PUSH
84914: LD_VAR 0 9
84918: LESS
84919: IFFALSE 84931
// k := tmp ;
84921: LD_ADDR_VAR 0 9
84925: PUSH
84926: LD_VAR 0 14
84930: ST_TO_ADDR
// for j = 1 to k do
84931: LD_ADDR_VAR 0 8
84935: PUSH
84936: DOUBLE
84937: LD_INT 1
84939: DEC
84940: ST_TO_ADDR
84941: LD_VAR 0 9
84945: PUSH
84946: FOR_TO
84947: IFFALSE 85035
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
84949: LD_VAR 0 14
84953: PUSH
84954: LD_VAR 0 8
84958: ARRAY
84959: PUSH
84960: LD_VAR 0 14
84964: PPUSH
84965: LD_INT 58
84967: PUSH
84968: EMPTY
84969: LIST
84970: PPUSH
84971: CALL_OW 72
84975: IN
84976: NOT
84977: IFFALSE 85033
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
84979: LD_VAR 0 4
84983: PUSH
84984: LD_VAR 0 7
84988: ARRAY
84989: PPUSH
84990: LD_VAR 0 14
84994: PUSH
84995: LD_VAR 0 8
84999: ARRAY
85000: PPUSH
85001: CALL_OW 115
// attacking := true ;
85005: LD_ADDR_VAR 0 29
85009: PUSH
85010: LD_INT 1
85012: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
85013: LD_VAR 0 4
85017: PUSH
85018: LD_VAR 0 7
85022: ARRAY
85023: PPUSH
85024: LD_INT 71
85026: PPUSH
85027: CALL_OW 109
// continue ;
85031: GO 84946
// end ; end ;
85033: GO 84946
85035: POP
85036: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
85037: LD_VAR 0 4
85041: PUSH
85042: LD_VAR 0 7
85046: ARRAY
85047: PPUSH
85048: CALL_OW 257
85052: PUSH
85053: LD_INT 8
85055: EQUAL
85056: PUSH
85057: LD_VAR 0 4
85061: PUSH
85062: LD_VAR 0 7
85066: ARRAY
85067: PPUSH
85068: CALL_OW 264
85072: PUSH
85073: LD_INT 28
85075: PUSH
85076: LD_INT 45
85078: PUSH
85079: LD_INT 7
85081: PUSH
85082: LD_INT 47
85084: PUSH
85085: EMPTY
85086: LIST
85087: LIST
85088: LIST
85089: LIST
85090: IN
85091: OR
85092: IFFALSE 85322
// begin attacking := false ;
85094: LD_ADDR_VAR 0 29
85098: PUSH
85099: LD_INT 0
85101: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
85102: LD_VAR 0 14
85106: PUSH
85107: LD_INT 1
85109: ARRAY
85110: PPUSH
85111: CALL_OW 266
85115: PUSH
85116: LD_INT 32
85118: PUSH
85119: LD_INT 31
85121: PUSH
85122: LD_INT 33
85124: PUSH
85125: LD_INT 4
85127: PUSH
85128: LD_INT 5
85130: PUSH
85131: EMPTY
85132: LIST
85133: LIST
85134: LIST
85135: LIST
85136: LIST
85137: IN
85138: IFFALSE 85322
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
85140: LD_ADDR_VAR 0 9
85144: PUSH
85145: LD_VAR 0 14
85149: PUSH
85150: LD_INT 1
85152: ARRAY
85153: PPUSH
85154: CALL_OW 266
85158: PPUSH
85159: LD_VAR 0 14
85163: PUSH
85164: LD_INT 1
85166: ARRAY
85167: PPUSH
85168: CALL_OW 250
85172: PPUSH
85173: LD_VAR 0 14
85177: PUSH
85178: LD_INT 1
85180: ARRAY
85181: PPUSH
85182: CALL_OW 251
85186: PPUSH
85187: LD_VAR 0 14
85191: PUSH
85192: LD_INT 1
85194: ARRAY
85195: PPUSH
85196: CALL_OW 254
85200: PPUSH
85201: LD_VAR 0 14
85205: PUSH
85206: LD_INT 1
85208: ARRAY
85209: PPUSH
85210: CALL_OW 248
85214: PPUSH
85215: LD_INT 0
85217: PPUSH
85218: CALL 61928 0 6
85222: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
85223: LD_ADDR_VAR 0 8
85227: PUSH
85228: LD_VAR 0 4
85232: PUSH
85233: LD_VAR 0 7
85237: ARRAY
85238: PPUSH
85239: LD_VAR 0 9
85243: PPUSH
85244: CALL 80621 0 2
85248: ST_TO_ADDR
// if j then
85249: LD_VAR 0 8
85253: IFFALSE 85322
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
85255: LD_VAR 0 8
85259: PUSH
85260: LD_INT 1
85262: ARRAY
85263: PPUSH
85264: LD_VAR 0 8
85268: PUSH
85269: LD_INT 2
85271: ARRAY
85272: PPUSH
85273: CALL_OW 488
85277: IFFALSE 85322
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
85279: LD_VAR 0 4
85283: PUSH
85284: LD_VAR 0 7
85288: ARRAY
85289: PPUSH
85290: LD_VAR 0 8
85294: PUSH
85295: LD_INT 1
85297: ARRAY
85298: PPUSH
85299: LD_VAR 0 8
85303: PUSH
85304: LD_INT 2
85306: ARRAY
85307: PPUSH
85308: CALL_OW 116
// attacking := true ;
85312: LD_ADDR_VAR 0 29
85316: PUSH
85317: LD_INT 1
85319: ST_TO_ADDR
// continue ;
85320: GO 82695
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
85322: LD_VAR 0 4
85326: PUSH
85327: LD_VAR 0 7
85331: ARRAY
85332: PPUSH
85333: CALL_OW 265
85337: PUSH
85338: LD_INT 11
85340: EQUAL
85341: IFFALSE 85619
// begin k := 10 ;
85343: LD_ADDR_VAR 0 9
85347: PUSH
85348: LD_INT 10
85350: ST_TO_ADDR
// x := 0 ;
85351: LD_ADDR_VAR 0 10
85355: PUSH
85356: LD_INT 0
85358: ST_TO_ADDR
// if tmp < k then
85359: LD_VAR 0 14
85363: PUSH
85364: LD_VAR 0 9
85368: LESS
85369: IFFALSE 85381
// k := tmp ;
85371: LD_ADDR_VAR 0 9
85375: PUSH
85376: LD_VAR 0 14
85380: ST_TO_ADDR
// for j = k downto 1 do
85381: LD_ADDR_VAR 0 8
85385: PUSH
85386: DOUBLE
85387: LD_VAR 0 9
85391: INC
85392: ST_TO_ADDR
85393: LD_INT 1
85395: PUSH
85396: FOR_DOWNTO
85397: IFFALSE 85472
// begin if GetType ( tmp [ j ] ) = unit_human then
85399: LD_VAR 0 14
85403: PUSH
85404: LD_VAR 0 8
85408: ARRAY
85409: PPUSH
85410: CALL_OW 247
85414: PUSH
85415: LD_INT 1
85417: EQUAL
85418: IFFALSE 85470
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
85420: LD_VAR 0 4
85424: PUSH
85425: LD_VAR 0 7
85429: ARRAY
85430: PPUSH
85431: LD_VAR 0 14
85435: PUSH
85436: LD_VAR 0 8
85440: ARRAY
85441: PPUSH
85442: CALL 80892 0 2
// x := tmp [ j ] ;
85446: LD_ADDR_VAR 0 10
85450: PUSH
85451: LD_VAR 0 14
85455: PUSH
85456: LD_VAR 0 8
85460: ARRAY
85461: ST_TO_ADDR
// attacking := true ;
85462: LD_ADDR_VAR 0 29
85466: PUSH
85467: LD_INT 1
85469: ST_TO_ADDR
// end ; end ;
85470: GO 85396
85472: POP
85473: POP
// if not x then
85474: LD_VAR 0 10
85478: NOT
85479: IFFALSE 85619
// begin attacking := true ;
85481: LD_ADDR_VAR 0 29
85485: PUSH
85486: LD_INT 1
85488: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
85489: LD_VAR 0 4
85493: PUSH
85494: LD_VAR 0 7
85498: ARRAY
85499: PPUSH
85500: CALL_OW 250
85504: PPUSH
85505: LD_VAR 0 4
85509: PUSH
85510: LD_VAR 0 7
85514: ARRAY
85515: PPUSH
85516: CALL_OW 251
85520: PPUSH
85521: CALL_OW 546
85525: PUSH
85526: LD_INT 2
85528: ARRAY
85529: PUSH
85530: LD_VAR 0 14
85534: PUSH
85535: LD_INT 1
85537: ARRAY
85538: PPUSH
85539: CALL_OW 250
85543: PPUSH
85544: LD_VAR 0 14
85548: PUSH
85549: LD_INT 1
85551: ARRAY
85552: PPUSH
85553: CALL_OW 251
85557: PPUSH
85558: CALL_OW 546
85562: PUSH
85563: LD_INT 2
85565: ARRAY
85566: EQUAL
85567: IFFALSE 85595
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
85569: LD_VAR 0 4
85573: PUSH
85574: LD_VAR 0 7
85578: ARRAY
85579: PPUSH
85580: LD_VAR 0 14
85584: PUSH
85585: LD_INT 1
85587: ARRAY
85588: PPUSH
85589: CALL 80892 0 2
85593: GO 85619
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85595: LD_VAR 0 4
85599: PUSH
85600: LD_VAR 0 7
85604: ARRAY
85605: PPUSH
85606: LD_VAR 0 14
85610: PUSH
85611: LD_INT 1
85613: ARRAY
85614: PPUSH
85615: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
85619: LD_VAR 0 4
85623: PUSH
85624: LD_VAR 0 7
85628: ARRAY
85629: PPUSH
85630: CALL_OW 264
85634: PUSH
85635: LD_INT 29
85637: EQUAL
85638: IFFALSE 86004
// begin if WantsToAttack ( group [ i ] ) in bombed then
85640: LD_VAR 0 4
85644: PUSH
85645: LD_VAR 0 7
85649: ARRAY
85650: PPUSH
85651: CALL_OW 319
85655: PUSH
85656: LD_VAR 0 28
85660: IN
85661: IFFALSE 85665
// continue ;
85663: GO 82695
// k := 8 ;
85665: LD_ADDR_VAR 0 9
85669: PUSH
85670: LD_INT 8
85672: ST_TO_ADDR
// x := 0 ;
85673: LD_ADDR_VAR 0 10
85677: PUSH
85678: LD_INT 0
85680: ST_TO_ADDR
// if tmp < k then
85681: LD_VAR 0 14
85685: PUSH
85686: LD_VAR 0 9
85690: LESS
85691: IFFALSE 85703
// k := tmp ;
85693: LD_ADDR_VAR 0 9
85697: PUSH
85698: LD_VAR 0 14
85702: ST_TO_ADDR
// for j = 1 to k do
85703: LD_ADDR_VAR 0 8
85707: PUSH
85708: DOUBLE
85709: LD_INT 1
85711: DEC
85712: ST_TO_ADDR
85713: LD_VAR 0 9
85717: PUSH
85718: FOR_TO
85719: IFFALSE 85851
// begin if GetType ( tmp [ j ] ) = unit_building then
85721: LD_VAR 0 14
85725: PUSH
85726: LD_VAR 0 8
85730: ARRAY
85731: PPUSH
85732: CALL_OW 247
85736: PUSH
85737: LD_INT 3
85739: EQUAL
85740: IFFALSE 85849
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
85742: LD_VAR 0 14
85746: PUSH
85747: LD_VAR 0 8
85751: ARRAY
85752: PUSH
85753: LD_VAR 0 28
85757: IN
85758: NOT
85759: PUSH
85760: LD_VAR 0 14
85764: PUSH
85765: LD_VAR 0 8
85769: ARRAY
85770: PPUSH
85771: CALL_OW 313
85775: AND
85776: IFFALSE 85849
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85778: LD_VAR 0 4
85782: PUSH
85783: LD_VAR 0 7
85787: ARRAY
85788: PPUSH
85789: LD_VAR 0 14
85793: PUSH
85794: LD_VAR 0 8
85798: ARRAY
85799: PPUSH
85800: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
85804: LD_ADDR_VAR 0 28
85808: PUSH
85809: LD_VAR 0 28
85813: PPUSH
85814: LD_VAR 0 28
85818: PUSH
85819: LD_INT 1
85821: PLUS
85822: PPUSH
85823: LD_VAR 0 14
85827: PUSH
85828: LD_VAR 0 8
85832: ARRAY
85833: PPUSH
85834: CALL_OW 1
85838: ST_TO_ADDR
// attacking := true ;
85839: LD_ADDR_VAR 0 29
85843: PUSH
85844: LD_INT 1
85846: ST_TO_ADDR
// break ;
85847: GO 85851
// end ; end ;
85849: GO 85718
85851: POP
85852: POP
// if not attacking and f_attack_depot then
85853: LD_VAR 0 29
85857: NOT
85858: PUSH
85859: LD_VAR 0 25
85863: AND
85864: IFFALSE 85959
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85866: LD_ADDR_VAR 0 13
85870: PUSH
85871: LD_VAR 0 14
85875: PPUSH
85876: LD_INT 2
85878: PUSH
85879: LD_INT 30
85881: PUSH
85882: LD_INT 0
85884: PUSH
85885: EMPTY
85886: LIST
85887: LIST
85888: PUSH
85889: LD_INT 30
85891: PUSH
85892: LD_INT 1
85894: PUSH
85895: EMPTY
85896: LIST
85897: LIST
85898: PUSH
85899: EMPTY
85900: LIST
85901: LIST
85902: LIST
85903: PPUSH
85904: CALL_OW 72
85908: ST_TO_ADDR
// if z then
85909: LD_VAR 0 13
85913: IFFALSE 85959
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
85915: LD_VAR 0 4
85919: PUSH
85920: LD_VAR 0 7
85924: ARRAY
85925: PPUSH
85926: LD_VAR 0 13
85930: PPUSH
85931: LD_VAR 0 4
85935: PUSH
85936: LD_VAR 0 7
85940: ARRAY
85941: PPUSH
85942: CALL_OW 74
85946: PPUSH
85947: CALL_OW 115
// attacking := true ;
85951: LD_ADDR_VAR 0 29
85955: PUSH
85956: LD_INT 1
85958: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
85959: LD_VAR 0 4
85963: PUSH
85964: LD_VAR 0 7
85968: ARRAY
85969: PPUSH
85970: CALL_OW 256
85974: PUSH
85975: LD_INT 500
85977: LESS
85978: IFFALSE 86004
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85980: LD_VAR 0 4
85984: PUSH
85985: LD_VAR 0 7
85989: ARRAY
85990: PPUSH
85991: LD_VAR 0 14
85995: PUSH
85996: LD_INT 1
85998: ARRAY
85999: PPUSH
86000: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
86004: LD_VAR 0 4
86008: PUSH
86009: LD_VAR 0 7
86013: ARRAY
86014: PPUSH
86015: CALL_OW 264
86019: PUSH
86020: LD_INT 49
86022: EQUAL
86023: IFFALSE 86144
// begin if not HasTask ( group [ i ] ) then
86025: LD_VAR 0 4
86029: PUSH
86030: LD_VAR 0 7
86034: ARRAY
86035: PPUSH
86036: CALL_OW 314
86040: NOT
86041: IFFALSE 86144
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
86043: LD_ADDR_VAR 0 9
86047: PUSH
86048: LD_INT 81
86050: PUSH
86051: LD_VAR 0 4
86055: PUSH
86056: LD_VAR 0 7
86060: ARRAY
86061: PPUSH
86062: CALL_OW 255
86066: PUSH
86067: EMPTY
86068: LIST
86069: LIST
86070: PPUSH
86071: CALL_OW 69
86075: PPUSH
86076: LD_VAR 0 4
86080: PUSH
86081: LD_VAR 0 7
86085: ARRAY
86086: PPUSH
86087: CALL_OW 74
86091: ST_TO_ADDR
// if k then
86092: LD_VAR 0 9
86096: IFFALSE 86144
// if GetDistUnits ( group [ i ] , k ) > 10 then
86098: LD_VAR 0 4
86102: PUSH
86103: LD_VAR 0 7
86107: ARRAY
86108: PPUSH
86109: LD_VAR 0 9
86113: PPUSH
86114: CALL_OW 296
86118: PUSH
86119: LD_INT 10
86121: GREATER
86122: IFFALSE 86144
// ComMoveUnit ( group [ i ] , k ) ;
86124: LD_VAR 0 4
86128: PUSH
86129: LD_VAR 0 7
86133: ARRAY
86134: PPUSH
86135: LD_VAR 0 9
86139: PPUSH
86140: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
86144: LD_VAR 0 4
86148: PUSH
86149: LD_VAR 0 7
86153: ARRAY
86154: PPUSH
86155: CALL_OW 256
86159: PUSH
86160: LD_INT 250
86162: LESS
86163: PUSH
86164: LD_VAR 0 4
86168: PUSH
86169: LD_VAR 0 7
86173: ARRAY
86174: PUSH
86175: LD_INT 21
86177: PUSH
86178: LD_INT 2
86180: PUSH
86181: EMPTY
86182: LIST
86183: LIST
86184: PUSH
86185: LD_INT 23
86187: PUSH
86188: LD_INT 2
86190: PUSH
86191: EMPTY
86192: LIST
86193: LIST
86194: PUSH
86195: EMPTY
86196: LIST
86197: LIST
86198: PPUSH
86199: CALL_OW 69
86203: IN
86204: AND
86205: IFFALSE 86330
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
86207: LD_ADDR_VAR 0 9
86211: PUSH
86212: LD_OWVAR 3
86216: PUSH
86217: LD_VAR 0 4
86221: PUSH
86222: LD_VAR 0 7
86226: ARRAY
86227: DIFF
86228: PPUSH
86229: LD_VAR 0 4
86233: PUSH
86234: LD_VAR 0 7
86238: ARRAY
86239: PPUSH
86240: CALL_OW 74
86244: ST_TO_ADDR
// if not k then
86245: LD_VAR 0 9
86249: NOT
86250: IFFALSE 86254
// continue ;
86252: GO 82695
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
86254: LD_VAR 0 9
86258: PUSH
86259: LD_INT 81
86261: PUSH
86262: LD_VAR 0 4
86266: PUSH
86267: LD_VAR 0 7
86271: ARRAY
86272: PPUSH
86273: CALL_OW 255
86277: PUSH
86278: EMPTY
86279: LIST
86280: LIST
86281: PPUSH
86282: CALL_OW 69
86286: IN
86287: PUSH
86288: LD_VAR 0 9
86292: PPUSH
86293: LD_VAR 0 4
86297: PUSH
86298: LD_VAR 0 7
86302: ARRAY
86303: PPUSH
86304: CALL_OW 296
86308: PUSH
86309: LD_INT 5
86311: LESS
86312: AND
86313: IFFALSE 86330
// ComAutodestruct ( group [ i ] ) ;
86315: LD_VAR 0 4
86319: PUSH
86320: LD_VAR 0 7
86324: ARRAY
86325: PPUSH
86326: CALL 80790 0 1
// end ; if f_attack_depot then
86330: LD_VAR 0 25
86334: IFFALSE 86446
// begin k := 6 ;
86336: LD_ADDR_VAR 0 9
86340: PUSH
86341: LD_INT 6
86343: ST_TO_ADDR
// if tmp < k then
86344: LD_VAR 0 14
86348: PUSH
86349: LD_VAR 0 9
86353: LESS
86354: IFFALSE 86366
// k := tmp ;
86356: LD_ADDR_VAR 0 9
86360: PUSH
86361: LD_VAR 0 14
86365: ST_TO_ADDR
// for j = 1 to k do
86366: LD_ADDR_VAR 0 8
86370: PUSH
86371: DOUBLE
86372: LD_INT 1
86374: DEC
86375: ST_TO_ADDR
86376: LD_VAR 0 9
86380: PUSH
86381: FOR_TO
86382: IFFALSE 86444
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
86384: LD_VAR 0 8
86388: PPUSH
86389: CALL_OW 266
86393: PUSH
86394: LD_INT 0
86396: PUSH
86397: LD_INT 1
86399: PUSH
86400: EMPTY
86401: LIST
86402: LIST
86403: IN
86404: IFFALSE 86442
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86406: LD_VAR 0 4
86410: PUSH
86411: LD_VAR 0 7
86415: ARRAY
86416: PPUSH
86417: LD_VAR 0 14
86421: PUSH
86422: LD_VAR 0 8
86426: ARRAY
86427: PPUSH
86428: CALL_OW 115
// attacking := true ;
86432: LD_ADDR_VAR 0 29
86436: PUSH
86437: LD_INT 1
86439: ST_TO_ADDR
// break ;
86440: GO 86444
// end ;
86442: GO 86381
86444: POP
86445: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
86446: LD_VAR 0 4
86450: PUSH
86451: LD_VAR 0 7
86455: ARRAY
86456: PPUSH
86457: CALL_OW 302
86461: PUSH
86462: LD_VAR 0 29
86466: NOT
86467: AND
86468: IFFALSE 86790
// begin if GetTag ( group [ i ] ) = 71 then
86470: LD_VAR 0 4
86474: PUSH
86475: LD_VAR 0 7
86479: ARRAY
86480: PPUSH
86481: CALL_OW 110
86485: PUSH
86486: LD_INT 71
86488: EQUAL
86489: IFFALSE 86530
// begin if HasTask ( group [ i ] ) then
86491: LD_VAR 0 4
86495: PUSH
86496: LD_VAR 0 7
86500: ARRAY
86501: PPUSH
86502: CALL_OW 314
86506: IFFALSE 86512
// continue else
86508: GO 82695
86510: GO 86530
// SetTag ( group [ i ] , 0 ) ;
86512: LD_VAR 0 4
86516: PUSH
86517: LD_VAR 0 7
86521: ARRAY
86522: PPUSH
86523: LD_INT 0
86525: PPUSH
86526: CALL_OW 109
// end ; k := 8 ;
86530: LD_ADDR_VAR 0 9
86534: PUSH
86535: LD_INT 8
86537: ST_TO_ADDR
// x := 0 ;
86538: LD_ADDR_VAR 0 10
86542: PUSH
86543: LD_INT 0
86545: ST_TO_ADDR
// if tmp < k then
86546: LD_VAR 0 14
86550: PUSH
86551: LD_VAR 0 9
86555: LESS
86556: IFFALSE 86568
// k := tmp ;
86558: LD_ADDR_VAR 0 9
86562: PUSH
86563: LD_VAR 0 14
86567: ST_TO_ADDR
// for j = 1 to k do
86568: LD_ADDR_VAR 0 8
86572: PUSH
86573: DOUBLE
86574: LD_INT 1
86576: DEC
86577: ST_TO_ADDR
86578: LD_VAR 0 9
86582: PUSH
86583: FOR_TO
86584: IFFALSE 86682
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
86586: LD_VAR 0 14
86590: PUSH
86591: LD_VAR 0 8
86595: ARRAY
86596: PPUSH
86597: CALL_OW 247
86601: PUSH
86602: LD_INT 1
86604: EQUAL
86605: PUSH
86606: LD_VAR 0 14
86610: PUSH
86611: LD_VAR 0 8
86615: ARRAY
86616: PPUSH
86617: CALL_OW 256
86621: PUSH
86622: LD_INT 250
86624: LESS
86625: PUSH
86626: LD_VAR 0 20
86630: AND
86631: PUSH
86632: LD_VAR 0 20
86636: NOT
86637: PUSH
86638: LD_VAR 0 14
86642: PUSH
86643: LD_VAR 0 8
86647: ARRAY
86648: PPUSH
86649: CALL_OW 256
86653: PUSH
86654: LD_INT 250
86656: GREATEREQUAL
86657: AND
86658: OR
86659: AND
86660: IFFALSE 86680
// begin x := tmp [ j ] ;
86662: LD_ADDR_VAR 0 10
86666: PUSH
86667: LD_VAR 0 14
86671: PUSH
86672: LD_VAR 0 8
86676: ARRAY
86677: ST_TO_ADDR
// break ;
86678: GO 86682
// end ;
86680: GO 86583
86682: POP
86683: POP
// if x then
86684: LD_VAR 0 10
86688: IFFALSE 86712
// ComAttackUnit ( group [ i ] , x ) else
86690: LD_VAR 0 4
86694: PUSH
86695: LD_VAR 0 7
86699: ARRAY
86700: PPUSH
86701: LD_VAR 0 10
86705: PPUSH
86706: CALL_OW 115
86710: GO 86736
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86712: LD_VAR 0 4
86716: PUSH
86717: LD_VAR 0 7
86721: ARRAY
86722: PPUSH
86723: LD_VAR 0 14
86727: PUSH
86728: LD_INT 1
86730: ARRAY
86731: PPUSH
86732: CALL_OW 115
// if not HasTask ( group [ i ] ) then
86736: LD_VAR 0 4
86740: PUSH
86741: LD_VAR 0 7
86745: ARRAY
86746: PPUSH
86747: CALL_OW 314
86751: NOT
86752: IFFALSE 86790
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
86754: LD_VAR 0 4
86758: PUSH
86759: LD_VAR 0 7
86763: ARRAY
86764: PPUSH
86765: LD_VAR 0 14
86769: PPUSH
86770: LD_VAR 0 4
86774: PUSH
86775: LD_VAR 0 7
86779: ARRAY
86780: PPUSH
86781: CALL_OW 74
86785: PPUSH
86786: CALL_OW 115
// end ; end ; end ;
86790: GO 82695
86792: POP
86793: POP
// wait ( 0 0$1 ) ;
86794: LD_INT 35
86796: PPUSH
86797: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
86801: LD_VAR 0 4
86805: PUSH
86806: EMPTY
86807: EQUAL
86808: PUSH
86809: LD_INT 81
86811: PUSH
86812: LD_VAR 0 35
86816: PUSH
86817: EMPTY
86818: LIST
86819: LIST
86820: PPUSH
86821: CALL_OW 69
86825: NOT
86826: OR
86827: IFFALSE 82680
// end ;
86829: LD_VAR 0 2
86833: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
86834: LD_INT 0
86836: PPUSH
86837: PPUSH
86838: PPUSH
86839: PPUSH
// if not base_units then
86840: LD_VAR 0 1
86844: NOT
86845: IFFALSE 86849
// exit ;
86847: GO 86936
// result := false ;
86849: LD_ADDR_VAR 0 2
86853: PUSH
86854: LD_INT 0
86856: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
86857: LD_ADDR_VAR 0 5
86861: PUSH
86862: LD_VAR 0 1
86866: PPUSH
86867: LD_INT 21
86869: PUSH
86870: LD_INT 3
86872: PUSH
86873: EMPTY
86874: LIST
86875: LIST
86876: PPUSH
86877: CALL_OW 72
86881: ST_TO_ADDR
// if not tmp then
86882: LD_VAR 0 5
86886: NOT
86887: IFFALSE 86891
// exit ;
86889: GO 86936
// for i in tmp do
86891: LD_ADDR_VAR 0 3
86895: PUSH
86896: LD_VAR 0 5
86900: PUSH
86901: FOR_IN
86902: IFFALSE 86934
// begin result := EnemyInRange ( i , 22 ) ;
86904: LD_ADDR_VAR 0 2
86908: PUSH
86909: LD_VAR 0 3
86913: PPUSH
86914: LD_INT 22
86916: PPUSH
86917: CALL 80473 0 2
86921: ST_TO_ADDR
// if result then
86922: LD_VAR 0 2
86926: IFFALSE 86932
// exit ;
86928: POP
86929: POP
86930: GO 86936
// end ;
86932: GO 86901
86934: POP
86935: POP
// end ;
86936: LD_VAR 0 2
86940: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
86941: LD_INT 0
86943: PPUSH
86944: PPUSH
// if not units then
86945: LD_VAR 0 1
86949: NOT
86950: IFFALSE 86954
// exit ;
86952: GO 87024
// result := [ ] ;
86954: LD_ADDR_VAR 0 3
86958: PUSH
86959: EMPTY
86960: ST_TO_ADDR
// for i in units do
86961: LD_ADDR_VAR 0 4
86965: PUSH
86966: LD_VAR 0 1
86970: PUSH
86971: FOR_IN
86972: IFFALSE 87022
// if GetTag ( i ) = tag then
86974: LD_VAR 0 4
86978: PPUSH
86979: CALL_OW 110
86983: PUSH
86984: LD_VAR 0 2
86988: EQUAL
86989: IFFALSE 87020
// result := Insert ( result , result + 1 , i ) ;
86991: LD_ADDR_VAR 0 3
86995: PUSH
86996: LD_VAR 0 3
87000: PPUSH
87001: LD_VAR 0 3
87005: PUSH
87006: LD_INT 1
87008: PLUS
87009: PPUSH
87010: LD_VAR 0 4
87014: PPUSH
87015: CALL_OW 2
87019: ST_TO_ADDR
87020: GO 86971
87022: POP
87023: POP
// end ;
87024: LD_VAR 0 3
87028: RET
// export function IsDriver ( un ) ; begin
87029: LD_INT 0
87031: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
87032: LD_ADDR_VAR 0 2
87036: PUSH
87037: LD_VAR 0 1
87041: PUSH
87042: LD_INT 55
87044: PUSH
87045: EMPTY
87046: LIST
87047: PPUSH
87048: CALL_OW 69
87052: IN
87053: ST_TO_ADDR
// end ;
87054: LD_VAR 0 2
87058: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
87059: LD_INT 0
87061: PPUSH
87062: PPUSH
// list := [ ] ;
87063: LD_ADDR_VAR 0 5
87067: PUSH
87068: EMPTY
87069: ST_TO_ADDR
// case d of 0 :
87070: LD_VAR 0 3
87074: PUSH
87075: LD_INT 0
87077: DOUBLE
87078: EQUAL
87079: IFTRUE 87083
87081: GO 87216
87083: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
87084: LD_ADDR_VAR 0 5
87088: PUSH
87089: LD_VAR 0 1
87093: PUSH
87094: LD_INT 4
87096: MINUS
87097: PUSH
87098: LD_VAR 0 2
87102: PUSH
87103: LD_INT 4
87105: MINUS
87106: PUSH
87107: LD_INT 2
87109: PUSH
87110: EMPTY
87111: LIST
87112: LIST
87113: LIST
87114: PUSH
87115: LD_VAR 0 1
87119: PUSH
87120: LD_INT 3
87122: MINUS
87123: PUSH
87124: LD_VAR 0 2
87128: PUSH
87129: LD_INT 1
87131: PUSH
87132: EMPTY
87133: LIST
87134: LIST
87135: LIST
87136: PUSH
87137: LD_VAR 0 1
87141: PUSH
87142: LD_INT 4
87144: PLUS
87145: PUSH
87146: LD_VAR 0 2
87150: PUSH
87151: LD_INT 4
87153: PUSH
87154: EMPTY
87155: LIST
87156: LIST
87157: LIST
87158: PUSH
87159: LD_VAR 0 1
87163: PUSH
87164: LD_INT 3
87166: PLUS
87167: PUSH
87168: LD_VAR 0 2
87172: PUSH
87173: LD_INT 3
87175: PLUS
87176: PUSH
87177: LD_INT 5
87179: PUSH
87180: EMPTY
87181: LIST
87182: LIST
87183: LIST
87184: PUSH
87185: LD_VAR 0 1
87189: PUSH
87190: LD_VAR 0 2
87194: PUSH
87195: LD_INT 4
87197: PLUS
87198: PUSH
87199: LD_INT 0
87201: PUSH
87202: EMPTY
87203: LIST
87204: LIST
87205: LIST
87206: PUSH
87207: EMPTY
87208: LIST
87209: LIST
87210: LIST
87211: LIST
87212: LIST
87213: ST_TO_ADDR
// end ; 1 :
87214: GO 87914
87216: LD_INT 1
87218: DOUBLE
87219: EQUAL
87220: IFTRUE 87224
87222: GO 87357
87224: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
87225: LD_ADDR_VAR 0 5
87229: PUSH
87230: LD_VAR 0 1
87234: PUSH
87235: LD_VAR 0 2
87239: PUSH
87240: LD_INT 4
87242: MINUS
87243: PUSH
87244: LD_INT 3
87246: PUSH
87247: EMPTY
87248: LIST
87249: LIST
87250: LIST
87251: PUSH
87252: LD_VAR 0 1
87256: PUSH
87257: LD_INT 3
87259: MINUS
87260: PUSH
87261: LD_VAR 0 2
87265: PUSH
87266: LD_INT 3
87268: MINUS
87269: PUSH
87270: LD_INT 2
87272: PUSH
87273: EMPTY
87274: LIST
87275: LIST
87276: LIST
87277: PUSH
87278: LD_VAR 0 1
87282: PUSH
87283: LD_INT 4
87285: MINUS
87286: PUSH
87287: LD_VAR 0 2
87291: PUSH
87292: LD_INT 1
87294: PUSH
87295: EMPTY
87296: LIST
87297: LIST
87298: LIST
87299: PUSH
87300: LD_VAR 0 1
87304: PUSH
87305: LD_VAR 0 2
87309: PUSH
87310: LD_INT 3
87312: PLUS
87313: PUSH
87314: LD_INT 0
87316: PUSH
87317: EMPTY
87318: LIST
87319: LIST
87320: LIST
87321: PUSH
87322: LD_VAR 0 1
87326: PUSH
87327: LD_INT 4
87329: PLUS
87330: PUSH
87331: LD_VAR 0 2
87335: PUSH
87336: LD_INT 4
87338: PLUS
87339: PUSH
87340: LD_INT 5
87342: PUSH
87343: EMPTY
87344: LIST
87345: LIST
87346: LIST
87347: PUSH
87348: EMPTY
87349: LIST
87350: LIST
87351: LIST
87352: LIST
87353: LIST
87354: ST_TO_ADDR
// end ; 2 :
87355: GO 87914
87357: LD_INT 2
87359: DOUBLE
87360: EQUAL
87361: IFTRUE 87365
87363: GO 87494
87365: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
87366: LD_ADDR_VAR 0 5
87370: PUSH
87371: LD_VAR 0 1
87375: PUSH
87376: LD_VAR 0 2
87380: PUSH
87381: LD_INT 3
87383: MINUS
87384: PUSH
87385: LD_INT 3
87387: PUSH
87388: EMPTY
87389: LIST
87390: LIST
87391: LIST
87392: PUSH
87393: LD_VAR 0 1
87397: PUSH
87398: LD_INT 4
87400: PLUS
87401: PUSH
87402: LD_VAR 0 2
87406: PUSH
87407: LD_INT 4
87409: PUSH
87410: EMPTY
87411: LIST
87412: LIST
87413: LIST
87414: PUSH
87415: LD_VAR 0 1
87419: PUSH
87420: LD_VAR 0 2
87424: PUSH
87425: LD_INT 4
87427: PLUS
87428: PUSH
87429: LD_INT 0
87431: PUSH
87432: EMPTY
87433: LIST
87434: LIST
87435: LIST
87436: PUSH
87437: LD_VAR 0 1
87441: PUSH
87442: LD_INT 3
87444: MINUS
87445: PUSH
87446: LD_VAR 0 2
87450: PUSH
87451: LD_INT 1
87453: PUSH
87454: EMPTY
87455: LIST
87456: LIST
87457: LIST
87458: PUSH
87459: LD_VAR 0 1
87463: PUSH
87464: LD_INT 4
87466: MINUS
87467: PUSH
87468: LD_VAR 0 2
87472: PUSH
87473: LD_INT 4
87475: MINUS
87476: PUSH
87477: LD_INT 2
87479: PUSH
87480: EMPTY
87481: LIST
87482: LIST
87483: LIST
87484: PUSH
87485: EMPTY
87486: LIST
87487: LIST
87488: LIST
87489: LIST
87490: LIST
87491: ST_TO_ADDR
// end ; 3 :
87492: GO 87914
87494: LD_INT 3
87496: DOUBLE
87497: EQUAL
87498: IFTRUE 87502
87500: GO 87635
87502: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
87503: LD_ADDR_VAR 0 5
87507: PUSH
87508: LD_VAR 0 1
87512: PUSH
87513: LD_INT 3
87515: PLUS
87516: PUSH
87517: LD_VAR 0 2
87521: PUSH
87522: LD_INT 4
87524: PUSH
87525: EMPTY
87526: LIST
87527: LIST
87528: LIST
87529: PUSH
87530: LD_VAR 0 1
87534: PUSH
87535: LD_INT 4
87537: PLUS
87538: PUSH
87539: LD_VAR 0 2
87543: PUSH
87544: LD_INT 4
87546: PLUS
87547: PUSH
87548: LD_INT 5
87550: PUSH
87551: EMPTY
87552: LIST
87553: LIST
87554: LIST
87555: PUSH
87556: LD_VAR 0 1
87560: PUSH
87561: LD_INT 4
87563: MINUS
87564: PUSH
87565: LD_VAR 0 2
87569: PUSH
87570: LD_INT 1
87572: PUSH
87573: EMPTY
87574: LIST
87575: LIST
87576: LIST
87577: PUSH
87578: LD_VAR 0 1
87582: PUSH
87583: LD_VAR 0 2
87587: PUSH
87588: LD_INT 4
87590: MINUS
87591: PUSH
87592: LD_INT 3
87594: PUSH
87595: EMPTY
87596: LIST
87597: LIST
87598: LIST
87599: PUSH
87600: LD_VAR 0 1
87604: PUSH
87605: LD_INT 3
87607: MINUS
87608: PUSH
87609: LD_VAR 0 2
87613: PUSH
87614: LD_INT 3
87616: MINUS
87617: PUSH
87618: LD_INT 2
87620: PUSH
87621: EMPTY
87622: LIST
87623: LIST
87624: LIST
87625: PUSH
87626: EMPTY
87627: LIST
87628: LIST
87629: LIST
87630: LIST
87631: LIST
87632: ST_TO_ADDR
// end ; 4 :
87633: GO 87914
87635: LD_INT 4
87637: DOUBLE
87638: EQUAL
87639: IFTRUE 87643
87641: GO 87776
87643: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
87644: LD_ADDR_VAR 0 5
87648: PUSH
87649: LD_VAR 0 1
87653: PUSH
87654: LD_VAR 0 2
87658: PUSH
87659: LD_INT 4
87661: PLUS
87662: PUSH
87663: LD_INT 0
87665: PUSH
87666: EMPTY
87667: LIST
87668: LIST
87669: LIST
87670: PUSH
87671: LD_VAR 0 1
87675: PUSH
87676: LD_INT 3
87678: PLUS
87679: PUSH
87680: LD_VAR 0 2
87684: PUSH
87685: LD_INT 3
87687: PLUS
87688: PUSH
87689: LD_INT 5
87691: PUSH
87692: EMPTY
87693: LIST
87694: LIST
87695: LIST
87696: PUSH
87697: LD_VAR 0 1
87701: PUSH
87702: LD_INT 4
87704: PLUS
87705: PUSH
87706: LD_VAR 0 2
87710: PUSH
87711: LD_INT 4
87713: PUSH
87714: EMPTY
87715: LIST
87716: LIST
87717: LIST
87718: PUSH
87719: LD_VAR 0 1
87723: PUSH
87724: LD_VAR 0 2
87728: PUSH
87729: LD_INT 3
87731: MINUS
87732: PUSH
87733: LD_INT 3
87735: PUSH
87736: EMPTY
87737: LIST
87738: LIST
87739: LIST
87740: PUSH
87741: LD_VAR 0 1
87745: PUSH
87746: LD_INT 4
87748: MINUS
87749: PUSH
87750: LD_VAR 0 2
87754: PUSH
87755: LD_INT 4
87757: MINUS
87758: PUSH
87759: LD_INT 2
87761: PUSH
87762: EMPTY
87763: LIST
87764: LIST
87765: LIST
87766: PUSH
87767: EMPTY
87768: LIST
87769: LIST
87770: LIST
87771: LIST
87772: LIST
87773: ST_TO_ADDR
// end ; 5 :
87774: GO 87914
87776: LD_INT 5
87778: DOUBLE
87779: EQUAL
87780: IFTRUE 87784
87782: GO 87913
87784: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
87785: LD_ADDR_VAR 0 5
87789: PUSH
87790: LD_VAR 0 1
87794: PUSH
87795: LD_INT 4
87797: MINUS
87798: PUSH
87799: LD_VAR 0 2
87803: PUSH
87804: LD_INT 1
87806: PUSH
87807: EMPTY
87808: LIST
87809: LIST
87810: LIST
87811: PUSH
87812: LD_VAR 0 1
87816: PUSH
87817: LD_VAR 0 2
87821: PUSH
87822: LD_INT 4
87824: MINUS
87825: PUSH
87826: LD_INT 3
87828: PUSH
87829: EMPTY
87830: LIST
87831: LIST
87832: LIST
87833: PUSH
87834: LD_VAR 0 1
87838: PUSH
87839: LD_INT 4
87841: PLUS
87842: PUSH
87843: LD_VAR 0 2
87847: PUSH
87848: LD_INT 4
87850: PLUS
87851: PUSH
87852: LD_INT 5
87854: PUSH
87855: EMPTY
87856: LIST
87857: LIST
87858: LIST
87859: PUSH
87860: LD_VAR 0 1
87864: PUSH
87865: LD_INT 3
87867: PLUS
87868: PUSH
87869: LD_VAR 0 2
87873: PUSH
87874: LD_INT 4
87876: PUSH
87877: EMPTY
87878: LIST
87879: LIST
87880: LIST
87881: PUSH
87882: LD_VAR 0 1
87886: PUSH
87887: LD_VAR 0 2
87891: PUSH
87892: LD_INT 3
87894: PLUS
87895: PUSH
87896: LD_INT 0
87898: PUSH
87899: EMPTY
87900: LIST
87901: LIST
87902: LIST
87903: PUSH
87904: EMPTY
87905: LIST
87906: LIST
87907: LIST
87908: LIST
87909: LIST
87910: ST_TO_ADDR
// end ; end ;
87911: GO 87914
87913: POP
// result := list ;
87914: LD_ADDR_VAR 0 4
87918: PUSH
87919: LD_VAR 0 5
87923: ST_TO_ADDR
// end ;
87924: LD_VAR 0 4
87928: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
87929: LD_INT 0
87931: PPUSH
87932: PPUSH
87933: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
87934: LD_VAR 0 1
87938: NOT
87939: PUSH
87940: LD_VAR 0 2
87944: PUSH
87945: LD_INT 1
87947: PUSH
87948: LD_INT 2
87950: PUSH
87951: LD_INT 3
87953: PUSH
87954: LD_INT 4
87956: PUSH
87957: EMPTY
87958: LIST
87959: LIST
87960: LIST
87961: LIST
87962: IN
87963: NOT
87964: OR
87965: IFFALSE 87969
// exit ;
87967: GO 88061
// tmp := [ ] ;
87969: LD_ADDR_VAR 0 5
87973: PUSH
87974: EMPTY
87975: ST_TO_ADDR
// for i in units do
87976: LD_ADDR_VAR 0 4
87980: PUSH
87981: LD_VAR 0 1
87985: PUSH
87986: FOR_IN
87987: IFFALSE 88030
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
87989: LD_ADDR_VAR 0 5
87993: PUSH
87994: LD_VAR 0 5
87998: PPUSH
87999: LD_VAR 0 5
88003: PUSH
88004: LD_INT 1
88006: PLUS
88007: PPUSH
88008: LD_VAR 0 4
88012: PPUSH
88013: LD_VAR 0 2
88017: PPUSH
88018: CALL_OW 259
88022: PPUSH
88023: CALL_OW 2
88027: ST_TO_ADDR
88028: GO 87986
88030: POP
88031: POP
// if not tmp then
88032: LD_VAR 0 5
88036: NOT
88037: IFFALSE 88041
// exit ;
88039: GO 88061
// result := SortListByListDesc ( units , tmp ) ;
88041: LD_ADDR_VAR 0 3
88045: PUSH
88046: LD_VAR 0 1
88050: PPUSH
88051: LD_VAR 0 5
88055: PPUSH
88056: CALL_OW 77
88060: ST_TO_ADDR
// end ;
88061: LD_VAR 0 3
88065: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
88066: LD_INT 0
88068: PPUSH
88069: PPUSH
88070: PPUSH
// x := GetX ( building ) ;
88071: LD_ADDR_VAR 0 4
88075: PUSH
88076: LD_VAR 0 2
88080: PPUSH
88081: CALL_OW 250
88085: ST_TO_ADDR
// y := GetY ( building ) ;
88086: LD_ADDR_VAR 0 5
88090: PUSH
88091: LD_VAR 0 2
88095: PPUSH
88096: CALL_OW 251
88100: ST_TO_ADDR
// if GetTaskList ( unit ) then
88101: LD_VAR 0 1
88105: PPUSH
88106: CALL_OW 437
88110: IFFALSE 88205
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
88112: LD_STRING e
88114: PUSH
88115: LD_VAR 0 1
88119: PPUSH
88120: CALL_OW 437
88124: PUSH
88125: LD_INT 1
88127: ARRAY
88128: PUSH
88129: LD_INT 1
88131: ARRAY
88132: EQUAL
88133: PUSH
88134: LD_VAR 0 4
88138: PUSH
88139: LD_VAR 0 1
88143: PPUSH
88144: CALL_OW 437
88148: PUSH
88149: LD_INT 1
88151: ARRAY
88152: PUSH
88153: LD_INT 2
88155: ARRAY
88156: EQUAL
88157: AND
88158: PUSH
88159: LD_VAR 0 5
88163: PUSH
88164: LD_VAR 0 1
88168: PPUSH
88169: CALL_OW 437
88173: PUSH
88174: LD_INT 1
88176: ARRAY
88177: PUSH
88178: LD_INT 3
88180: ARRAY
88181: EQUAL
88182: AND
88183: IFFALSE 88195
// result := true else
88185: LD_ADDR_VAR 0 3
88189: PUSH
88190: LD_INT 1
88192: ST_TO_ADDR
88193: GO 88203
// result := false ;
88195: LD_ADDR_VAR 0 3
88199: PUSH
88200: LD_INT 0
88202: ST_TO_ADDR
// end else
88203: GO 88213
// result := false ;
88205: LD_ADDR_VAR 0 3
88209: PUSH
88210: LD_INT 0
88212: ST_TO_ADDR
// end ;
88213: LD_VAR 0 3
88217: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
88218: LD_INT 0
88220: PPUSH
88221: PPUSH
88222: PPUSH
88223: PPUSH
// if not unit or not area then
88224: LD_VAR 0 1
88228: NOT
88229: PUSH
88230: LD_VAR 0 2
88234: NOT
88235: OR
88236: IFFALSE 88240
// exit ;
88238: GO 88404
// tmp := AreaToList ( area , i ) ;
88240: LD_ADDR_VAR 0 6
88244: PUSH
88245: LD_VAR 0 2
88249: PPUSH
88250: LD_VAR 0 5
88254: PPUSH
88255: CALL_OW 517
88259: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
88260: LD_ADDR_VAR 0 5
88264: PUSH
88265: DOUBLE
88266: LD_INT 1
88268: DEC
88269: ST_TO_ADDR
88270: LD_VAR 0 6
88274: PUSH
88275: LD_INT 1
88277: ARRAY
88278: PUSH
88279: FOR_TO
88280: IFFALSE 88402
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
88282: LD_ADDR_VAR 0 7
88286: PUSH
88287: LD_VAR 0 6
88291: PUSH
88292: LD_INT 1
88294: ARRAY
88295: PUSH
88296: LD_VAR 0 5
88300: ARRAY
88301: PUSH
88302: LD_VAR 0 6
88306: PUSH
88307: LD_INT 2
88309: ARRAY
88310: PUSH
88311: LD_VAR 0 5
88315: ARRAY
88316: PUSH
88317: EMPTY
88318: LIST
88319: LIST
88320: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
88321: LD_VAR 0 7
88325: PUSH
88326: LD_INT 1
88328: ARRAY
88329: PPUSH
88330: LD_VAR 0 7
88334: PUSH
88335: LD_INT 2
88337: ARRAY
88338: PPUSH
88339: CALL_OW 428
88343: PUSH
88344: LD_INT 0
88346: EQUAL
88347: IFFALSE 88400
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
88349: LD_VAR 0 1
88353: PPUSH
88354: LD_VAR 0 7
88358: PUSH
88359: LD_INT 1
88361: ARRAY
88362: PPUSH
88363: LD_VAR 0 7
88367: PUSH
88368: LD_INT 2
88370: ARRAY
88371: PPUSH
88372: LD_VAR 0 3
88376: PPUSH
88377: CALL_OW 48
// result := IsPlaced ( unit ) ;
88381: LD_ADDR_VAR 0 4
88385: PUSH
88386: LD_VAR 0 1
88390: PPUSH
88391: CALL_OW 305
88395: ST_TO_ADDR
// exit ;
88396: POP
88397: POP
88398: GO 88404
// end ; end ;
88400: GO 88279
88402: POP
88403: POP
// end ;
88404: LD_VAR 0 4
88408: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
88409: LD_INT 0
88411: PPUSH
88412: PPUSH
88413: PPUSH
// if not side or side > 8 then
88414: LD_VAR 0 1
88418: NOT
88419: PUSH
88420: LD_VAR 0 1
88424: PUSH
88425: LD_INT 8
88427: GREATER
88428: OR
88429: IFFALSE 88433
// exit ;
88431: GO 88620
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
88433: LD_ADDR_VAR 0 4
88437: PUSH
88438: LD_INT 22
88440: PUSH
88441: LD_VAR 0 1
88445: PUSH
88446: EMPTY
88447: LIST
88448: LIST
88449: PUSH
88450: LD_INT 21
88452: PUSH
88453: LD_INT 3
88455: PUSH
88456: EMPTY
88457: LIST
88458: LIST
88459: PUSH
88460: EMPTY
88461: LIST
88462: LIST
88463: PPUSH
88464: CALL_OW 69
88468: ST_TO_ADDR
// if not tmp then
88469: LD_VAR 0 4
88473: NOT
88474: IFFALSE 88478
// exit ;
88476: GO 88620
// enable_addtolog := true ;
88478: LD_ADDR_OWVAR 81
88482: PUSH
88483: LD_INT 1
88485: ST_TO_ADDR
// AddToLog ( [ ) ;
88486: LD_STRING [
88488: PPUSH
88489: CALL_OW 561
// for i in tmp do
88493: LD_ADDR_VAR 0 3
88497: PUSH
88498: LD_VAR 0 4
88502: PUSH
88503: FOR_IN
88504: IFFALSE 88611
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
88506: LD_STRING [
88508: PUSH
88509: LD_VAR 0 3
88513: PPUSH
88514: CALL_OW 266
88518: STR
88519: PUSH
88520: LD_STRING , 
88522: STR
88523: PUSH
88524: LD_VAR 0 3
88528: PPUSH
88529: CALL_OW 250
88533: STR
88534: PUSH
88535: LD_STRING , 
88537: STR
88538: PUSH
88539: LD_VAR 0 3
88543: PPUSH
88544: CALL_OW 251
88548: STR
88549: PUSH
88550: LD_STRING , 
88552: STR
88553: PUSH
88554: LD_VAR 0 3
88558: PPUSH
88559: CALL_OW 254
88563: STR
88564: PUSH
88565: LD_STRING , 
88567: STR
88568: PUSH
88569: LD_VAR 0 3
88573: PPUSH
88574: LD_INT 1
88576: PPUSH
88577: CALL_OW 268
88581: STR
88582: PUSH
88583: LD_STRING , 
88585: STR
88586: PUSH
88587: LD_VAR 0 3
88591: PPUSH
88592: LD_INT 2
88594: PPUSH
88595: CALL_OW 268
88599: STR
88600: PUSH
88601: LD_STRING ],
88603: STR
88604: PPUSH
88605: CALL_OW 561
// end ;
88609: GO 88503
88611: POP
88612: POP
// AddToLog ( ]; ) ;
88613: LD_STRING ];
88615: PPUSH
88616: CALL_OW 561
// end ;
88620: LD_VAR 0 2
88624: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
88625: LD_INT 0
88627: PPUSH
88628: PPUSH
88629: PPUSH
88630: PPUSH
88631: PPUSH
// if not area or not rate or not max then
88632: LD_VAR 0 1
88636: NOT
88637: PUSH
88638: LD_VAR 0 2
88642: NOT
88643: OR
88644: PUSH
88645: LD_VAR 0 4
88649: NOT
88650: OR
88651: IFFALSE 88655
// exit ;
88653: GO 88847
// while 1 do
88655: LD_INT 1
88657: IFFALSE 88847
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
88659: LD_ADDR_VAR 0 9
88663: PUSH
88664: LD_VAR 0 1
88668: PPUSH
88669: LD_INT 1
88671: PPUSH
88672: CALL_OW 287
88676: PUSH
88677: LD_INT 10
88679: MUL
88680: ST_TO_ADDR
// r := rate / 10 ;
88681: LD_ADDR_VAR 0 7
88685: PUSH
88686: LD_VAR 0 2
88690: PUSH
88691: LD_INT 10
88693: DIVREAL
88694: ST_TO_ADDR
// time := 1 1$00 ;
88695: LD_ADDR_VAR 0 8
88699: PUSH
88700: LD_INT 2100
88702: ST_TO_ADDR
// if amount < min then
88703: LD_VAR 0 9
88707: PUSH
88708: LD_VAR 0 3
88712: LESS
88713: IFFALSE 88731
// r := r * 2 else
88715: LD_ADDR_VAR 0 7
88719: PUSH
88720: LD_VAR 0 7
88724: PUSH
88725: LD_INT 2
88727: MUL
88728: ST_TO_ADDR
88729: GO 88757
// if amount > max then
88731: LD_VAR 0 9
88735: PUSH
88736: LD_VAR 0 4
88740: GREATER
88741: IFFALSE 88757
// r := r / 2 ;
88743: LD_ADDR_VAR 0 7
88747: PUSH
88748: LD_VAR 0 7
88752: PUSH
88753: LD_INT 2
88755: DIVREAL
88756: ST_TO_ADDR
// time := time / r ;
88757: LD_ADDR_VAR 0 8
88761: PUSH
88762: LD_VAR 0 8
88766: PUSH
88767: LD_VAR 0 7
88771: DIVREAL
88772: ST_TO_ADDR
// if time < 0 then
88773: LD_VAR 0 8
88777: PUSH
88778: LD_INT 0
88780: LESS
88781: IFFALSE 88798
// time := time * - 1 ;
88783: LD_ADDR_VAR 0 8
88787: PUSH
88788: LD_VAR 0 8
88792: PUSH
88793: LD_INT 1
88795: NEG
88796: MUL
88797: ST_TO_ADDR
// wait ( time ) ;
88798: LD_VAR 0 8
88802: PPUSH
88803: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
88807: LD_INT 35
88809: PPUSH
88810: LD_INT 875
88812: PPUSH
88813: CALL_OW 12
88817: PPUSH
88818: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
88822: LD_INT 1
88824: PPUSH
88825: LD_INT 5
88827: PPUSH
88828: CALL_OW 12
88832: PPUSH
88833: LD_VAR 0 1
88837: PPUSH
88838: LD_INT 1
88840: PPUSH
88841: CALL_OW 55
// end ;
88845: GO 88655
// end ;
88847: LD_VAR 0 5
88851: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
88852: LD_INT 0
88854: PPUSH
88855: PPUSH
88856: PPUSH
88857: PPUSH
88858: PPUSH
88859: PPUSH
88860: PPUSH
88861: PPUSH
// if not turrets or not factories then
88862: LD_VAR 0 1
88866: NOT
88867: PUSH
88868: LD_VAR 0 2
88872: NOT
88873: OR
88874: IFFALSE 88878
// exit ;
88876: GO 89185
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
88878: LD_ADDR_VAR 0 10
88882: PUSH
88883: LD_INT 5
88885: PUSH
88886: LD_INT 6
88888: PUSH
88889: EMPTY
88890: LIST
88891: LIST
88892: PUSH
88893: LD_INT 2
88895: PUSH
88896: LD_INT 4
88898: PUSH
88899: EMPTY
88900: LIST
88901: LIST
88902: PUSH
88903: LD_INT 3
88905: PUSH
88906: LD_INT 5
88908: PUSH
88909: EMPTY
88910: LIST
88911: LIST
88912: PUSH
88913: EMPTY
88914: LIST
88915: LIST
88916: LIST
88917: PUSH
88918: LD_INT 24
88920: PUSH
88921: LD_INT 25
88923: PUSH
88924: EMPTY
88925: LIST
88926: LIST
88927: PUSH
88928: LD_INT 23
88930: PUSH
88931: LD_INT 27
88933: PUSH
88934: EMPTY
88935: LIST
88936: LIST
88937: PUSH
88938: EMPTY
88939: LIST
88940: LIST
88941: PUSH
88942: LD_INT 42
88944: PUSH
88945: LD_INT 43
88947: PUSH
88948: EMPTY
88949: LIST
88950: LIST
88951: PUSH
88952: LD_INT 44
88954: PUSH
88955: LD_INT 46
88957: PUSH
88958: EMPTY
88959: LIST
88960: LIST
88961: PUSH
88962: LD_INT 45
88964: PUSH
88965: LD_INT 47
88967: PUSH
88968: EMPTY
88969: LIST
88970: LIST
88971: PUSH
88972: EMPTY
88973: LIST
88974: LIST
88975: LIST
88976: PUSH
88977: EMPTY
88978: LIST
88979: LIST
88980: LIST
88981: ST_TO_ADDR
// result := [ ] ;
88982: LD_ADDR_VAR 0 3
88986: PUSH
88987: EMPTY
88988: ST_TO_ADDR
// for i in turrets do
88989: LD_ADDR_VAR 0 4
88993: PUSH
88994: LD_VAR 0 1
88998: PUSH
88999: FOR_IN
89000: IFFALSE 89183
// begin nat := GetNation ( i ) ;
89002: LD_ADDR_VAR 0 7
89006: PUSH
89007: LD_VAR 0 4
89011: PPUSH
89012: CALL_OW 248
89016: ST_TO_ADDR
// weapon := 0 ;
89017: LD_ADDR_VAR 0 8
89021: PUSH
89022: LD_INT 0
89024: ST_TO_ADDR
// if not nat then
89025: LD_VAR 0 7
89029: NOT
89030: IFFALSE 89034
// continue ;
89032: GO 88999
// for j in list [ nat ] do
89034: LD_ADDR_VAR 0 5
89038: PUSH
89039: LD_VAR 0 10
89043: PUSH
89044: LD_VAR 0 7
89048: ARRAY
89049: PUSH
89050: FOR_IN
89051: IFFALSE 89092
// if GetBWeapon ( i ) = j [ 1 ] then
89053: LD_VAR 0 4
89057: PPUSH
89058: CALL_OW 269
89062: PUSH
89063: LD_VAR 0 5
89067: PUSH
89068: LD_INT 1
89070: ARRAY
89071: EQUAL
89072: IFFALSE 89090
// begin weapon := j [ 2 ] ;
89074: LD_ADDR_VAR 0 8
89078: PUSH
89079: LD_VAR 0 5
89083: PUSH
89084: LD_INT 2
89086: ARRAY
89087: ST_TO_ADDR
// break ;
89088: GO 89092
// end ;
89090: GO 89050
89092: POP
89093: POP
// if not weapon then
89094: LD_VAR 0 8
89098: NOT
89099: IFFALSE 89103
// continue ;
89101: GO 88999
// for k in factories do
89103: LD_ADDR_VAR 0 6
89107: PUSH
89108: LD_VAR 0 2
89112: PUSH
89113: FOR_IN
89114: IFFALSE 89179
// begin weapons := AvailableWeaponList ( k ) ;
89116: LD_ADDR_VAR 0 9
89120: PUSH
89121: LD_VAR 0 6
89125: PPUSH
89126: CALL_OW 478
89130: ST_TO_ADDR
// if not weapons then
89131: LD_VAR 0 9
89135: NOT
89136: IFFALSE 89140
// continue ;
89138: GO 89113
// if weapon in weapons then
89140: LD_VAR 0 8
89144: PUSH
89145: LD_VAR 0 9
89149: IN
89150: IFFALSE 89177
// begin result := [ i , weapon ] ;
89152: LD_ADDR_VAR 0 3
89156: PUSH
89157: LD_VAR 0 4
89161: PUSH
89162: LD_VAR 0 8
89166: PUSH
89167: EMPTY
89168: LIST
89169: LIST
89170: ST_TO_ADDR
// exit ;
89171: POP
89172: POP
89173: POP
89174: POP
89175: GO 89185
// end ; end ;
89177: GO 89113
89179: POP
89180: POP
// end ;
89181: GO 88999
89183: POP
89184: POP
// end ;
89185: LD_VAR 0 3
89189: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
89190: LD_INT 0
89192: PPUSH
// if not side or side > 8 then
89193: LD_VAR 0 3
89197: NOT
89198: PUSH
89199: LD_VAR 0 3
89203: PUSH
89204: LD_INT 8
89206: GREATER
89207: OR
89208: IFFALSE 89212
// exit ;
89210: GO 89271
// if not range then
89212: LD_VAR 0 4
89216: NOT
89217: IFFALSE 89228
// range := - 12 ;
89219: LD_ADDR_VAR 0 4
89223: PUSH
89224: LD_INT 12
89226: NEG
89227: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
89228: LD_VAR 0 1
89232: PPUSH
89233: LD_VAR 0 2
89237: PPUSH
89238: LD_VAR 0 3
89242: PPUSH
89243: LD_VAR 0 4
89247: PPUSH
89248: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
89252: LD_VAR 0 1
89256: PPUSH
89257: LD_VAR 0 2
89261: PPUSH
89262: LD_VAR 0 3
89266: PPUSH
89267: CALL_OW 331
// end ;
89271: LD_VAR 0 5
89275: RET
// export function Video ( mode ) ; begin
89276: LD_INT 0
89278: PPUSH
// ingame_video = mode ;
89279: LD_ADDR_OWVAR 52
89283: PUSH
89284: LD_VAR 0 1
89288: ST_TO_ADDR
// interface_hidden = mode ;
89289: LD_ADDR_OWVAR 54
89293: PUSH
89294: LD_VAR 0 1
89298: ST_TO_ADDR
// end ;
89299: LD_VAR 0 2
89303: RET
// export function Join ( array , element ) ; begin
89304: LD_INT 0
89306: PPUSH
// result := array ^ element ;
89307: LD_ADDR_VAR 0 3
89311: PUSH
89312: LD_VAR 0 1
89316: PUSH
89317: LD_VAR 0 2
89321: ADD
89322: ST_TO_ADDR
// end ;
89323: LD_VAR 0 3
89327: RET
// export function JoinUnion ( array , element ) ; begin
89328: LD_INT 0
89330: PPUSH
// result := array union element ;
89331: LD_ADDR_VAR 0 3
89335: PUSH
89336: LD_VAR 0 1
89340: PUSH
89341: LD_VAR 0 2
89345: UNION
89346: ST_TO_ADDR
// end ;
89347: LD_VAR 0 3
89351: RET
// export function GetBehemoths ( side ) ; begin
89352: LD_INT 0
89354: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
89355: LD_ADDR_VAR 0 2
89359: PUSH
89360: LD_INT 22
89362: PUSH
89363: LD_VAR 0 1
89367: PUSH
89368: EMPTY
89369: LIST
89370: LIST
89371: PUSH
89372: LD_INT 31
89374: PUSH
89375: LD_INT 25
89377: PUSH
89378: EMPTY
89379: LIST
89380: LIST
89381: PUSH
89382: EMPTY
89383: LIST
89384: LIST
89385: PPUSH
89386: CALL_OW 69
89390: ST_TO_ADDR
// end ;
89391: LD_VAR 0 2
89395: RET
// export function Shuffle ( array ) ; var i , index ; begin
89396: LD_INT 0
89398: PPUSH
89399: PPUSH
89400: PPUSH
// result := [ ] ;
89401: LD_ADDR_VAR 0 2
89405: PUSH
89406: EMPTY
89407: ST_TO_ADDR
// if not array then
89408: LD_VAR 0 1
89412: NOT
89413: IFFALSE 89417
// exit ;
89415: GO 89516
// Randomize ;
89417: CALL_OW 10
// for i = array downto 1 do
89421: LD_ADDR_VAR 0 3
89425: PUSH
89426: DOUBLE
89427: LD_VAR 0 1
89431: INC
89432: ST_TO_ADDR
89433: LD_INT 1
89435: PUSH
89436: FOR_DOWNTO
89437: IFFALSE 89514
// begin index := rand ( 1 , array ) ;
89439: LD_ADDR_VAR 0 4
89443: PUSH
89444: LD_INT 1
89446: PPUSH
89447: LD_VAR 0 1
89451: PPUSH
89452: CALL_OW 12
89456: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
89457: LD_ADDR_VAR 0 2
89461: PUSH
89462: LD_VAR 0 2
89466: PPUSH
89467: LD_VAR 0 2
89471: PUSH
89472: LD_INT 1
89474: PLUS
89475: PPUSH
89476: LD_VAR 0 1
89480: PUSH
89481: LD_VAR 0 4
89485: ARRAY
89486: PPUSH
89487: CALL_OW 2
89491: ST_TO_ADDR
// array := Delete ( array , index ) ;
89492: LD_ADDR_VAR 0 1
89496: PUSH
89497: LD_VAR 0 1
89501: PPUSH
89502: LD_VAR 0 4
89506: PPUSH
89507: CALL_OW 3
89511: ST_TO_ADDR
// end ;
89512: GO 89436
89514: POP
89515: POP
// end ;
89516: LD_VAR 0 2
89520: RET
// export function GetBaseMaterials ( base ) ; begin
89521: LD_INT 0
89523: PPUSH
// result := [ 0 , 0 , 0 ] ;
89524: LD_ADDR_VAR 0 2
89528: PUSH
89529: LD_INT 0
89531: PUSH
89532: LD_INT 0
89534: PUSH
89535: LD_INT 0
89537: PUSH
89538: EMPTY
89539: LIST
89540: LIST
89541: LIST
89542: ST_TO_ADDR
// if not base then
89543: LD_VAR 0 1
89547: NOT
89548: IFFALSE 89552
// exit ;
89550: GO 89601
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
89552: LD_ADDR_VAR 0 2
89556: PUSH
89557: LD_VAR 0 1
89561: PPUSH
89562: LD_INT 1
89564: PPUSH
89565: CALL_OW 275
89569: PUSH
89570: LD_VAR 0 1
89574: PPUSH
89575: LD_INT 2
89577: PPUSH
89578: CALL_OW 275
89582: PUSH
89583: LD_VAR 0 1
89587: PPUSH
89588: LD_INT 3
89590: PPUSH
89591: CALL_OW 275
89595: PUSH
89596: EMPTY
89597: LIST
89598: LIST
89599: LIST
89600: ST_TO_ADDR
// end ; end_of_file
89601: LD_VAR 0 2
89605: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
89606: GO 89608
89608: DISABLE
// begin ru_radar := 98 ;
89609: LD_ADDR_EXP 92
89613: PUSH
89614: LD_INT 98
89616: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
89617: LD_ADDR_EXP 93
89621: PUSH
89622: LD_INT 89
89624: ST_TO_ADDR
// us_hack := 99 ;
89625: LD_ADDR_EXP 94
89629: PUSH
89630: LD_INT 99
89632: ST_TO_ADDR
// us_artillery := 97 ;
89633: LD_ADDR_EXP 95
89637: PUSH
89638: LD_INT 97
89640: ST_TO_ADDR
// ar_bio_bomb := 91 ;
89641: LD_ADDR_EXP 96
89645: PUSH
89646: LD_INT 91
89648: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
89649: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
89650: LD_INT 0
89652: PPUSH
89653: PPUSH
89654: PPUSH
89655: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
89656: LD_VAR 0 1
89660: PPUSH
89661: CALL_OW 264
89665: PUSH
89666: LD_EXP 96
89670: EQUAL
89671: IFFALSE 89743
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89673: LD_INT 68
89675: PPUSH
89676: LD_VAR 0 1
89680: PPUSH
89681: CALL_OW 255
89685: PPUSH
89686: CALL_OW 321
89690: PUSH
89691: LD_INT 2
89693: EQUAL
89694: IFFALSE 89706
// eff := 70 else
89696: LD_ADDR_VAR 0 6
89700: PUSH
89701: LD_INT 70
89703: ST_TO_ADDR
89704: GO 89714
// eff := 30 ;
89706: LD_ADDR_VAR 0 6
89710: PUSH
89711: LD_INT 30
89713: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89714: LD_VAR 0 1
89718: PPUSH
89719: CALL_OW 250
89723: PPUSH
89724: LD_VAR 0 1
89728: PPUSH
89729: CALL_OW 251
89733: PPUSH
89734: LD_VAR 0 6
89738: PPUSH
89739: CALL_OW 495
// end ; end ;
89743: LD_VAR 0 4
89747: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
89748: LD_INT 0
89750: PPUSH
89751: PPUSH
89752: PPUSH
89753: PPUSH
89754: PPUSH
89755: PPUSH
// if cmd = 124 then
89756: LD_VAR 0 1
89760: PUSH
89761: LD_INT 124
89763: EQUAL
89764: IFFALSE 89970
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
89766: LD_ADDR_VAR 0 5
89770: PUSH
89771: LD_INT 2
89773: PUSH
89774: LD_INT 34
89776: PUSH
89777: LD_INT 53
89779: PUSH
89780: EMPTY
89781: LIST
89782: LIST
89783: PUSH
89784: LD_INT 34
89786: PUSH
89787: LD_INT 14
89789: PUSH
89790: EMPTY
89791: LIST
89792: LIST
89793: PUSH
89794: EMPTY
89795: LIST
89796: LIST
89797: LIST
89798: PPUSH
89799: CALL_OW 69
89803: ST_TO_ADDR
// if not tmp then
89804: LD_VAR 0 5
89808: NOT
89809: IFFALSE 89813
// exit ;
89811: GO 89970
// for i in tmp do
89813: LD_ADDR_VAR 0 3
89817: PUSH
89818: LD_VAR 0 5
89822: PUSH
89823: FOR_IN
89824: IFFALSE 89968
// begin taskList := GetTaskList ( i ) ;
89826: LD_ADDR_VAR 0 6
89830: PUSH
89831: LD_VAR 0 3
89835: PPUSH
89836: CALL_OW 437
89840: ST_TO_ADDR
// if not taskList then
89841: LD_VAR 0 6
89845: NOT
89846: IFFALSE 89850
// continue ;
89848: GO 89823
// for j = 1 to taskList do
89850: LD_ADDR_VAR 0 4
89854: PUSH
89855: DOUBLE
89856: LD_INT 1
89858: DEC
89859: ST_TO_ADDR
89860: LD_VAR 0 6
89864: PUSH
89865: FOR_TO
89866: IFFALSE 89964
// if taskList [ j ] [ 1 ] = | then
89868: LD_VAR 0 6
89872: PUSH
89873: LD_VAR 0 4
89877: ARRAY
89878: PUSH
89879: LD_INT 1
89881: ARRAY
89882: PUSH
89883: LD_STRING |
89885: EQUAL
89886: IFFALSE 89962
// begin _taskList := Delete ( taskList , 1 ) ;
89888: LD_ADDR_VAR 0 7
89892: PUSH
89893: LD_VAR 0 6
89897: PPUSH
89898: LD_INT 1
89900: PPUSH
89901: CALL_OW 3
89905: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
89906: LD_VAR 0 3
89910: PPUSH
89911: LD_VAR 0 7
89915: PPUSH
89916: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
89920: LD_VAR 0 3
89924: PPUSH
89925: LD_VAR 0 6
89929: PUSH
89930: LD_VAR 0 4
89934: ARRAY
89935: PUSH
89936: LD_INT 2
89938: ARRAY
89939: PPUSH
89940: LD_VAR 0 6
89944: PUSH
89945: LD_VAR 0 4
89949: ARRAY
89950: PUSH
89951: LD_INT 3
89953: ARRAY
89954: PPUSH
89955: LD_INT 8
89957: PPUSH
89958: CALL 89975 0 4
// end ;
89962: GO 89865
89964: POP
89965: POP
// end ;
89966: GO 89823
89968: POP
89969: POP
// end ; end ;
89970: LD_VAR 0 2
89974: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89975: LD_INT 0
89977: PPUSH
89978: PPUSH
89979: PPUSH
89980: PPUSH
89981: PPUSH
89982: PPUSH
89983: PPUSH
89984: PPUSH
89985: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
89986: LD_VAR 0 1
89990: NOT
89991: PUSH
89992: LD_VAR 0 2
89996: PPUSH
89997: LD_VAR 0 3
90001: PPUSH
90002: CALL_OW 488
90006: NOT
90007: OR
90008: PUSH
90009: LD_VAR 0 4
90013: NOT
90014: OR
90015: IFFALSE 90019
// exit ;
90017: GO 90359
// list := [ ] ;
90019: LD_ADDR_VAR 0 13
90023: PUSH
90024: EMPTY
90025: ST_TO_ADDR
// if x - r < 0 then
90026: LD_VAR 0 2
90030: PUSH
90031: LD_VAR 0 4
90035: MINUS
90036: PUSH
90037: LD_INT 0
90039: LESS
90040: IFFALSE 90052
// min_x := 0 else
90042: LD_ADDR_VAR 0 7
90046: PUSH
90047: LD_INT 0
90049: ST_TO_ADDR
90050: GO 90068
// min_x := x - r ;
90052: LD_ADDR_VAR 0 7
90056: PUSH
90057: LD_VAR 0 2
90061: PUSH
90062: LD_VAR 0 4
90066: MINUS
90067: ST_TO_ADDR
// if y - r < 0 then
90068: LD_VAR 0 3
90072: PUSH
90073: LD_VAR 0 4
90077: MINUS
90078: PUSH
90079: LD_INT 0
90081: LESS
90082: IFFALSE 90094
// min_y := 0 else
90084: LD_ADDR_VAR 0 8
90088: PUSH
90089: LD_INT 0
90091: ST_TO_ADDR
90092: GO 90110
// min_y := y - r ;
90094: LD_ADDR_VAR 0 8
90098: PUSH
90099: LD_VAR 0 3
90103: PUSH
90104: LD_VAR 0 4
90108: MINUS
90109: ST_TO_ADDR
// max_x := x + r ;
90110: LD_ADDR_VAR 0 9
90114: PUSH
90115: LD_VAR 0 2
90119: PUSH
90120: LD_VAR 0 4
90124: PLUS
90125: ST_TO_ADDR
// max_y := y + r ;
90126: LD_ADDR_VAR 0 10
90130: PUSH
90131: LD_VAR 0 3
90135: PUSH
90136: LD_VAR 0 4
90140: PLUS
90141: ST_TO_ADDR
// for _x = min_x to max_x do
90142: LD_ADDR_VAR 0 11
90146: PUSH
90147: DOUBLE
90148: LD_VAR 0 7
90152: DEC
90153: ST_TO_ADDR
90154: LD_VAR 0 9
90158: PUSH
90159: FOR_TO
90160: IFFALSE 90277
// for _y = min_y to max_y do
90162: LD_ADDR_VAR 0 12
90166: PUSH
90167: DOUBLE
90168: LD_VAR 0 8
90172: DEC
90173: ST_TO_ADDR
90174: LD_VAR 0 10
90178: PUSH
90179: FOR_TO
90180: IFFALSE 90273
// begin if not ValidHex ( _x , _y ) then
90182: LD_VAR 0 11
90186: PPUSH
90187: LD_VAR 0 12
90191: PPUSH
90192: CALL_OW 488
90196: NOT
90197: IFFALSE 90201
// continue ;
90199: GO 90179
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90201: LD_VAR 0 11
90205: PPUSH
90206: LD_VAR 0 12
90210: PPUSH
90211: CALL_OW 351
90215: PUSH
90216: LD_VAR 0 11
90220: PPUSH
90221: LD_VAR 0 12
90225: PPUSH
90226: CALL_OW 554
90230: AND
90231: IFFALSE 90271
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90233: LD_ADDR_VAR 0 13
90237: PUSH
90238: LD_VAR 0 13
90242: PPUSH
90243: LD_VAR 0 13
90247: PUSH
90248: LD_INT 1
90250: PLUS
90251: PPUSH
90252: LD_VAR 0 11
90256: PUSH
90257: LD_VAR 0 12
90261: PUSH
90262: EMPTY
90263: LIST
90264: LIST
90265: PPUSH
90266: CALL_OW 2
90270: ST_TO_ADDR
// end ;
90271: GO 90179
90273: POP
90274: POP
90275: GO 90159
90277: POP
90278: POP
// if not list then
90279: LD_VAR 0 13
90283: NOT
90284: IFFALSE 90288
// exit ;
90286: GO 90359
// for i in list do
90288: LD_ADDR_VAR 0 6
90292: PUSH
90293: LD_VAR 0 13
90297: PUSH
90298: FOR_IN
90299: IFFALSE 90357
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
90301: LD_VAR 0 1
90305: PPUSH
90306: LD_STRING M
90308: PUSH
90309: LD_VAR 0 6
90313: PUSH
90314: LD_INT 1
90316: ARRAY
90317: PUSH
90318: LD_VAR 0 6
90322: PUSH
90323: LD_INT 2
90325: ARRAY
90326: PUSH
90327: LD_INT 0
90329: PUSH
90330: LD_INT 0
90332: PUSH
90333: LD_INT 0
90335: PUSH
90336: LD_INT 0
90338: PUSH
90339: EMPTY
90340: LIST
90341: LIST
90342: LIST
90343: LIST
90344: LIST
90345: LIST
90346: LIST
90347: PUSH
90348: EMPTY
90349: LIST
90350: PPUSH
90351: CALL_OW 447
90355: GO 90298
90357: POP
90358: POP
// end ;
90359: LD_VAR 0 5
90363: RET
