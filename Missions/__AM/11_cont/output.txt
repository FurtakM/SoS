// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 16703 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 80343 0 9
// PrepareAmerican ;
  77: CALL 525 0 0
// PrepareArabian ;
  81: CALL 2197 0 0
// MC_Start ( ) ;
  85: CALL 18815 0 0
// Action ;
  89: CALL 7672 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 231000
 219: PUSH
 220: LD_INT 210000
 222: PUSH
 223: LD_INT 199500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// end ;
 287: LD_VAR 0 1
 291: RET
// export function CustomInitMacro ; var i ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 296: LD_ADDR_EXP 73
 300: PUSH
 301: LD_INT 20
 303: PUSH
 304: LD_INT 21
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 315: LD_ADDR_EXP 74
 319: PUSH
 320: LD_INT 28
 322: PUSH
 323: LD_INT 24
 325: PUSH
 326: LD_INT 26
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 334: LD_INT 1
 336: PPUSH
 337: LD_INT 6
 339: PUSH
 340: LD_INT 8
 342: PUSH
 343: LD_INT 9
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: PUSH
 351: LD_OWVAR 67
 355: ARRAY
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: CALL 39558 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 364: LD_INT 2
 366: PPUSH
 367: LD_INT 6
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: LD_INT 9
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: PUSH
 381: LD_OWVAR 67
 385: ARRAY
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: CALL 39558 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 6
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: LD_INT 9
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL 39558 0 3
// for i = 1 to mc_bases do
 424: LD_ADDR_VAR 0 2
 428: PUSH
 429: DOUBLE
 430: LD_INT 1
 432: DEC
 433: ST_TO_ADDR
 434: LD_EXP 49
 438: PUSH
 439: FOR_TO
 440: IFFALSE 464
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 442: LD_VAR 0 2
 446: PPUSH
 447: LD_EXP 42
 451: PUSH
 452: LD_VAR 0 2
 456: ARRAY
 457: PPUSH
 458: CALL 39984 0 2
 462: GO 439
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 1
 470: RET
// function Debuger ; var i ; begin
 471: LD_INT 0
 473: PPUSH
 474: PPUSH
// if not debug then
 475: LD_EXP 1
 479: NOT
 480: IFFALSE 484
// exit ;
 482: GO 520
// game_speed := 5 ;
 484: LD_ADDR_OWVAR 65
 488: PUSH
 489: LD_INT 5
 491: ST_TO_ADDR
// uc_side := 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// uc_nation := 1 ;
 500: LD_ADDR_OWVAR 21
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 508: LD_EXP 35
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: CALL_OW 235
// end ; end_of_file
 520: LD_VAR 0 1
 524: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 525: LD_INT 0
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
// uc_side := 4 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 4
 542: ST_TO_ADDR
// uc_nation := 1 ;
 543: LD_ADDR_OWVAR 21
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 551: LD_ADDR_EXP 29
 555: PUSH
 556: LD_STRING Powell
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: LD_STRING 
 564: PPUSH
 565: CALL 45926 0 3
 569: ST_TO_ADDR
// uc_side := 1 ;
 570: LD_ADDR_OWVAR 20
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 578: LD_ADDR_EXP 20
 582: PUSH
 583: LD_STRING JMM
 585: PPUSH
 586: LD_EXP 1
 590: NOT
 591: PPUSH
 592: LD_EXP 4
 596: PPUSH
 597: CALL 45926 0 3
 601: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 602: LD_EXP 20
 606: PPUSH
 607: CALL_OW 257
 611: PUSH
 612: LD_INT 4
 614: GREATER
 615: IFFALSE 629
// SetClass ( JMM , 1 ) ;
 617: LD_EXP 20
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 629: LD_ADDR_EXP 21
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 4
 647: PPUSH
 648: CALL 45926 0 3
 652: ST_TO_ADDR
// if not Lisa then
 653: LD_EXP 21
 657: NOT
 658: IFFALSE 673
// Lisa := CreateCharacter ( 10_Lisa ) ;
 660: LD_ADDR_EXP 21
 664: PUSH
 665: LD_STRING 10_Lisa
 667: PPUSH
 668: CALL_OW 34
 672: ST_TO_ADDR
// if not Lisa then
 673: LD_EXP 21
 677: NOT
 678: IFFALSE 693
// Lisa := CreateCharacter ( 09_Lisa ) ;
 680: LD_ADDR_EXP 21
 684: PUSH
 685: LD_STRING 09_Lisa
 687: PPUSH
 688: CALL_OW 34
 692: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 693: LD_ADDR_EXP 30
 697: PUSH
 698: LD_STRING Cornel
 700: PPUSH
 701: LD_EXP 1
 705: NOT
 706: PPUSH
 707: LD_EXP 4
 711: PPUSH
 712: CALL 45926 0 3
 716: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING Donaldson
 724: PPUSH
 725: LD_EXP 1
 729: NOT
 730: PPUSH
 731: LD_EXP 4
 735: PPUSH
 736: CALL 45926 0 3
 740: ST_TO_ADDR
// if not Donaldson then
 741: LD_EXP 22
 745: NOT
 746: IFFALSE 761
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 748: LD_ADDR_EXP 22
 752: PUSH
 753: LD_STRING 10_Donaldson
 755: PPUSH
 756: CALL_OW 34
 760: ST_TO_ADDR
// if not Donaldson then
 761: LD_EXP 22
 765: NOT
 766: IFFALSE 781
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 768: LD_ADDR_EXP 22
 772: PUSH
 773: LD_STRING 09_Donaldson
 775: PPUSH
 776: CALL_OW 34
 780: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 781: LD_ADDR_EXP 23
 785: PUSH
 786: LD_STRING Bobby
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 4
 799: PPUSH
 800: CALL 45926 0 3
 804: ST_TO_ADDR
// if not Bobby then
 805: LD_EXP 23
 809: NOT
 810: IFFALSE 825
// Bobby := CreateCharacter ( 10_Bobby ) ;
 812: LD_ADDR_EXP 23
 816: PUSH
 817: LD_STRING 10_Bobby
 819: PPUSH
 820: CALL_OW 34
 824: ST_TO_ADDR
// if not Bobby then
 825: LD_EXP 23
 829: NOT
 830: IFFALSE 845
// Bobby := CreateCharacter ( 09_Bobby ) ;
 832: LD_ADDR_EXP 23
 836: PUSH
 837: LD_STRING 09_Bobby
 839: PPUSH
 840: CALL_OW 34
 844: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 845: LD_ADDR_EXP 24
 849: PUSH
 850: LD_STRING Cyrus
 852: PPUSH
 853: LD_EXP 1
 857: NOT
 858: PPUSH
 859: LD_EXP 4
 863: PPUSH
 864: CALL 45926 0 3
 868: ST_TO_ADDR
// if not Cyrus then
 869: LD_EXP 24
 873: NOT
 874: IFFALSE 889
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 876: LD_ADDR_EXP 24
 880: PUSH
 881: LD_STRING 10_Cyrus
 883: PPUSH
 884: CALL_OW 34
 888: ST_TO_ADDR
// if not Cyrus then
 889: LD_EXP 24
 893: NOT
 894: IFFALSE 909
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING 09_Cyrus
 903: PPUSH
 904: CALL_OW 34
 908: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 909: LD_ADDR_EXP 25
 913: PUSH
 914: LD_STRING Denis
 916: PPUSH
 917: LD_EXP 1
 921: NOT
 922: PPUSH
 923: LD_EXP 4
 927: PPUSH
 928: CALL 45926 0 3
 932: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 26
 937: PUSH
 938: LD_STRING Brown
 940: PPUSH
 941: LD_EXP 1
 945: NOT
 946: PPUSH
 947: LD_EXP 4
 951: PPUSH
 952: CALL 45926 0 3
 956: ST_TO_ADDR
// if not Brown then
 957: LD_EXP 26
 961: NOT
 962: IFFALSE 977
// Brown := CreateCharacter ( 10_Brown ) ;
 964: LD_ADDR_EXP 26
 968: PUSH
 969: LD_STRING 10_Brown
 971: PPUSH
 972: CALL_OW 34
 976: ST_TO_ADDR
// if not Brown then
 977: LD_EXP 26
 981: NOT
 982: IFFALSE 997
// Brown := CreateCharacter ( 08_Brown ) ;
 984: LD_ADDR_EXP 26
 988: PUSH
 989: LD_STRING 08_Brown
 991: PPUSH
 992: CALL_OW 34
 996: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_STRING Gladstone
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 4
1015: PPUSH
1016: CALL 45926 0 3
1020: ST_TO_ADDR
// if not Gladstone then
1021: LD_EXP 27
1025: NOT
1026: IFFALSE 1041
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1028: LD_ADDR_EXP 27
1032: PUSH
1033: LD_STRING 10_Gladstone
1035: PPUSH
1036: CALL_OW 34
1040: ST_TO_ADDR
// if not Gladstone then
1041: LD_EXP 27
1045: NOT
1046: IFFALSE 1061
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1048: LD_ADDR_EXP 27
1052: PUSH
1053: LD_STRING 08_Gladstone
1055: PPUSH
1056: CALL_OW 34
1060: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1061: LD_ADDR_EXP 28
1065: PUSH
1066: LD_STRING Houten
1068: PPUSH
1069: LD_EXP 1
1073: NOT
1074: PPUSH
1075: LD_EXP 4
1079: PPUSH
1080: CALL 45926 0 3
1084: ST_TO_ADDR
// if not Houten then
1085: LD_EXP 28
1089: NOT
1090: IFFALSE 1105
// Houten := CreateCharacter ( 10_Houten ) ;
1092: LD_ADDR_EXP 28
1096: PUSH
1097: LD_STRING 10_Houten
1099: PPUSH
1100: CALL_OW 34
1104: ST_TO_ADDR
// if not Houten then
1105: LD_EXP 28
1109: NOT
1110: IFFALSE 1125
// Houten := CreateCharacter ( 09_Houten ) ;
1112: LD_ADDR_EXP 28
1116: PUSH
1117: LD_STRING 09_Houten
1119: PPUSH
1120: CALL_OW 34
1124: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1125: LD_ADDR_EXP 30
1129: PUSH
1130: LD_STRING Cornell
1132: PPUSH
1133: LD_EXP 1
1137: NOT
1138: PPUSH
1139: LD_EXP 4
1143: PPUSH
1144: CALL 45926 0 3
1148: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: LD_STRING Gary
1156: PPUSH
1157: LD_EXP 1
1161: NOT
1162: PPUSH
1163: LD_EXP 4
1167: PPUSH
1168: CALL 45926 0 3
1172: ST_TO_ADDR
// if not Gary then
1173: LD_EXP 31
1177: NOT
1178: IFFALSE 1193
// Gary := CreateCharacter ( 10_Gary ) ;
1180: LD_ADDR_EXP 31
1184: PUSH
1185: LD_STRING 10_Gary
1187: PPUSH
1188: CALL_OW 34
1192: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1193: LD_ADDR_EXP 32
1197: PUSH
1198: LD_STRING Frank
1200: PPUSH
1201: LD_EXP 1
1205: NOT
1206: PPUSH
1207: LD_EXP 4
1211: PPUSH
1212: CALL 45926 0 3
1216: ST_TO_ADDR
// if not Frank then
1217: LD_EXP 32
1221: NOT
1222: IFFALSE 1237
// Frank := CreateCharacter ( 08_Frank ) ;
1224: LD_ADDR_EXP 32
1228: PUSH
1229: LD_STRING 08_Frank
1231: PPUSH
1232: CALL_OW 34
1236: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1237: LD_ADDR_EXP 33
1241: PUSH
1242: LD_STRING Kikuchi
1244: PPUSH
1245: LD_EXP 1
1249: NOT
1250: PPUSH
1251: LD_EXP 4
1255: PPUSH
1256: CALL 45926 0 3
1260: ST_TO_ADDR
// if not Kikuchi then
1261: LD_EXP 33
1265: NOT
1266: IFFALSE 1281
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1268: LD_ADDR_EXP 33
1272: PUSH
1273: LD_STRING 08_Kikuchi
1275: PPUSH
1276: CALL_OW 34
1280: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1281: LD_ADDR_VAR 0 5
1285: PUSH
1286: LD_EXP 21
1290: PUSH
1291: LD_EXP 22
1295: PUSH
1296: LD_EXP 23
1300: PUSH
1301: LD_EXP 24
1305: PUSH
1306: LD_EXP 25
1310: PUSH
1311: LD_EXP 26
1315: PUSH
1316: LD_EXP 27
1320: PUSH
1321: LD_EXP 28
1325: PUSH
1326: LD_EXP 30
1330: PUSH
1331: LD_EXP 31
1335: PUSH
1336: LD_EXP 32
1340: PUSH
1341: LD_EXP 33
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: ST_TO_ADDR
// tmp := tmp diff 0 ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PUSH
1370: LD_INT 0
1372: DIFF
1373: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1374: LD_ADDR_VAR 0 5
1378: PUSH
1379: LD_VAR 0 5
1383: PUSH
1384: LD_STRING 10_lock
1386: PPUSH
1387: CALL_OW 31
1391: UNION
1392: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1393: LD_ADDR_VAR 0 5
1397: PUSH
1398: LD_VAR 0 5
1402: PUSH
1403: LD_STRING 10c_lock
1405: PPUSH
1406: CALL_OW 31
1410: UNION
1411: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1412: LD_STRING 10_lock
1414: PPUSH
1415: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1419: LD_STRING 10c_lock
1421: PPUSH
1422: CALL_OW 40
// for i in tmp do
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 5
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1475
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1439: LD_VAR 0 2
1443: PPUSH
1444: CALL_OW 257
1448: PUSH
1449: LD_INT 8
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: IN
1459: IFFALSE 1473
// SetClass ( i , class_soldier ) ;
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: CALL_OW 336
1473: GO 1436
1475: POP
1476: POP
// if tmp < 12 then
1477: LD_VAR 0 5
1481: PUSH
1482: LD_INT 12
1484: LESS
1485: IFFALSE 1579
// begin k := 16 - tmp ;
1487: LD_ADDR_VAR 0 3
1491: PUSH
1492: LD_INT 16
1494: PUSH
1495: LD_VAR 0 5
1499: MINUS
1500: ST_TO_ADDR
// for i = 1 to k do
1501: LD_ADDR_VAR 0 2
1505: PUSH
1506: DOUBLE
1507: LD_INT 1
1509: DEC
1510: ST_TO_ADDR
1511: LD_VAR 0 3
1515: PUSH
1516: FOR_TO
1517: IFFALSE 1577
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1519: LD_INT 0
1521: PPUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 3
1530: PUSH
1531: LD_INT 4
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 4
1545: PPUSH
1546: CALL_OW 12
1550: ARRAY
1551: PPUSH
1552: LD_INT 6
1554: PPUSH
1555: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1559: LD_ADDR_VAR 0 5
1563: PUSH
1564: LD_VAR 0 5
1568: PUSH
1569: CALL_OW 44
1573: ADD
1574: ST_TO_ADDR
// end ;
1575: GO 1516
1577: POP
1578: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1579: LD_ADDR_EXP 19
1583: PUSH
1584: LD_STRING 1
1586: PPUSH
1587: LD_INT 12
1589: PPUSH
1590: LD_INT 12
1592: PPUSH
1593: LD_INT -5
1595: PUSH
1596: LD_EXP 20
1600: PUSH
1601: LD_INT -2
1603: PUSH
1604: LD_INT -3
1606: PUSH
1607: LD_INT -5
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_VAR 0 5
1621: ADD
1622: PUSH
1623: LD_INT -6
1625: PUSH
1626: LD_INT -4
1628: PUSH
1629: LD_EXP 29
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: ADD
1639: PPUSH
1640: LD_INT 1
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PPUSH
1698: CALL_OW 42
1702: ST_TO_ADDR
// others := tmp diff selected ;
1703: LD_ADDR_VAR 0 8
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 19
1717: DIFF
1718: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1719: LD_ADDR_VAR 0 8
1723: PUSH
1724: LD_VAR 0 8
1728: PUSH
1729: LD_EXP 21
1733: PUSH
1734: LD_EXP 22
1738: PUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_EXP 24
1748: PUSH
1749: LD_EXP 25
1753: PUSH
1754: LD_EXP 26
1758: PUSH
1759: LD_EXP 27
1763: PUSH
1764: LD_EXP 28
1768: PUSH
1769: LD_EXP 30
1773: PUSH
1774: LD_EXP 31
1778: PUSH
1779: LD_EXP 32
1783: PUSH
1784: LD_EXP 33
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: DIFF
1803: ST_TO_ADDR
// if others then
1804: LD_VAR 0 8
1808: IFFALSE 1822
// SaveCharacters ( others , 11_others ) ;
1810: LD_VAR 0 8
1814: PPUSH
1815: LD_STRING 11_others
1817: PPUSH
1818: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1822: LD_ADDR_VAR 0 6
1826: PUSH
1827: LD_INT 3
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: LD_INT 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 4
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 5
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 2
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 7
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 2
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// for i in JMM ^ selected do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_EXP 20
1933: PUSH
1934: LD_EXP 19
1938: ADD
1939: PUSH
1940: FOR_IN
1941: IFFALSE 2130
// begin if GetClass ( i ) = 3 then
1943: LD_VAR 0 2
1947: PPUSH
1948: CALL_OW 257
1952: PUSH
1953: LD_INT 3
1955: EQUAL
1956: IFFALSE 2113
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_VAR 0 6
1967: PUSH
1968: LD_INT 1
1970: ARRAY
1971: PUSH
1972: LD_INT 1
1974: ARRAY
1975: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1976: LD_ADDR_OWVAR 39
1980: PUSH
1981: LD_VAR 0 6
1985: PUSH
1986: LD_INT 1
1988: ARRAY
1989: PUSH
1990: LD_INT 2
1992: ARRAY
1993: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1994: LD_ADDR_OWVAR 38
1998: PUSH
1999: LD_VAR 0 6
2003: PUSH
2004: LD_INT 1
2006: ARRAY
2007: PUSH
2008: LD_INT 3
2010: ARRAY
2011: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2012: LD_ADDR_OWVAR 40
2016: PUSH
2017: LD_VAR 0 6
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PUSH
2026: LD_INT 4
2028: ARRAY
2029: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2030: LD_ADDR_VAR 0 6
2034: PUSH
2035: LD_VAR 0 6
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 3
2047: ST_TO_ADDR
// veh := CreateVehicle ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: CALL_OW 45
2057: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2058: LD_VAR 0 7
2062: PPUSH
2063: LD_INT 8
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_VAR 0 7
2082: PPUSH
2083: CALL_OW 52
// if i = JMM then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_EXP 20
2096: EQUAL
2097: IFFALSE 2111
// SetMark ( veh , 1 ) ;
2099: LD_VAR 0 7
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: CALL_OW 242
// end else
2111: GO 2128
// PlaceUnitArea ( i , am_hum_start , false ) ;
2113: LD_VAR 0 2
2117: PPUSH
2118: LD_INT 9
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 49
// end ;
2128: GO 1940
2130: POP
2131: POP
// vc_chassis := us_medium_tracked ;
2132: LD_ADDR_OWVAR 37
2136: PUSH
2137: LD_INT 3
2139: ST_TO_ADDR
// vc_engine := engine_solar ;
2140: LD_ADDR_OWVAR 39
2144: PUSH
2145: LD_INT 2
2147: ST_TO_ADDR
// vc_control := control_computer ;
2148: LD_ADDR_OWVAR 38
2152: PUSH
2153: LD_INT 3
2155: ST_TO_ADDR
// vc_weapon := us_radar ;
2156: LD_ADDR_OWVAR 40
2160: PUSH
2161: LD_INT 11
2163: ST_TO_ADDR
// veh := CreateVehicle ;
2164: LD_ADDR_VAR 0 7
2168: PUSH
2169: CALL_OW 45
2173: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2174: LD_VAR 0 7
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 142
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 48
// end ; end_of_file
2192: LD_VAR 0 1
2196: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2197: LD_INT 0
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 6
2212: PUSH
2213: LD_INT 7
2215: PUSH
2216: LD_INT 7
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_OWVAR 67
2228: ARRAY
2229: ST_TO_ADDR
// uc_side := 2 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 2
2237: ST_TO_ADDR
// uc_nation := 2 ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 2
2245: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 14
2253: ST_TO_ADDR
// vc_engine := engine_siberite ;
2254: LD_ADDR_OWVAR 39
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// vc_control := control_manual ;
2262: LD_ADDR_OWVAR 38
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2270: LD_ADDR_OWVAR 40
2274: PUSH
2275: LD_INT 31
2277: ST_TO_ADDR
// for i = 1 to 3 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 3
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2376
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_INT 3
2299: PPUSH
2300: LD_VAR 0 5
2304: PPUSH
2305: CALL_OW 380
// un := CreateVehicle ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: CALL_OW 45
2318: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2319: LD_VAR 0 4
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 5
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2339: LD_VAR 0 4
2343: PPUSH
2344: LD_INT 156
2346: PPUSH
2347: LD_INT 15
2349: PPUSH
2350: LD_INT 6
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2360: CALL_OW 44
2364: PPUSH
2365: LD_VAR 0 4
2369: PPUSH
2370: CALL_OW 52
// end ;
2374: GO 2291
2376: POP
2377: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2378: LD_ADDR_EXP 36
2382: PUSH
2383: LD_INT 94
2385: PPUSH
2386: LD_INT 28
2388: PPUSH
2389: LD_STRING dammam
2391: PPUSH
2392: LD_VAR 0 5
2396: PPUSH
2397: LD_INT 10000
2399: PUSH
2400: LD_INT 1000
2402: PUSH
2403: LD_INT 300
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PPUSH
2411: LD_INT 1
2413: NEG
2414: PUSH
2415: LD_INT 5
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL 55938 0 6
2435: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2436: LD_ADDR_EXP 36
2440: PUSH
2441: LD_EXP 36
2445: PUSH
2446: LD_INT 122
2448: PPUSH
2449: LD_INT 25
2451: PPUSH
2452: LD_STRING 
2454: PPUSH
2455: LD_VAR 0 5
2459: PPUSH
2460: LD_INT 500
2462: PUSH
2463: LD_INT 60
2465: PUSH
2466: LD_INT 0
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: PPUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: LD_INT 2
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL 55938 0 6
2497: UNION
2498: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2499: LD_ADDR_EXP 34
2503: PUSH
2504: LD_INT 45
2506: PPUSH
2507: LD_INT 24
2509: PPUSH
2510: LD_STRING jeddah
2512: PPUSH
2513: LD_VAR 0 5
2517: PPUSH
2518: LD_INT 700
2520: PUSH
2521: LD_INT 300
2523: PUSH
2524: LD_INT 10
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PPUSH
2532: LD_INT 1
2534: NEG
2535: PUSH
2536: LD_INT 5
2538: PUSH
2539: LD_INT 3
2541: PUSH
2542: LD_INT 2
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL 55938 0 6
2555: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2556: LD_ADDR_EXP 35
2560: PUSH
2561: LD_INT 7
2563: PPUSH
2564: LD_INT 27
2566: PPUSH
2567: LD_STRING riyadh
2569: PPUSH
2570: LD_VAR 0 5
2574: PPUSH
2575: LD_INT 500
2577: PUSH
2578: LD_INT 60
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: PPUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL 55938 0 6
2611: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2612: LD_ADDR_EXP 38
2616: PUSH
2617: LD_INT 204
2619: PPUSH
2620: LD_INT 26
2622: PPUSH
2623: LD_STRING 
2625: PPUSH
2626: LD_VAR 0 5
2630: PPUSH
2631: LD_INT 500
2633: PUSH
2634: LD_INT 50
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: LD_INT 1
2647: NEG
2648: PUSH
2649: LD_INT 3
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL 55938 0 6
2668: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2669: LD_ADDR_EXP 49
2673: PUSH
2674: LD_EXP 36
2678: PUSH
2679: LD_EXP 34
2683: PUSH
2684: LD_EXP 38
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 31
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 58
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2861
// begin if GetBase ( i ) then
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 274
2747: IFFALSE 2751
// continue ;
2749: GO 2735
// d := GetDir ( i ) ;
2751: LD_ADDR_VAR 0 3
2755: PUSH
2756: LD_VAR 0 2
2760: PPUSH
2761: CALL_OW 254
2765: ST_TO_ADDR
// if d < 3 then
2766: LD_VAR 0 3
2770: PUSH
2771: LD_INT 3
2773: LESS
2774: IFFALSE 2792
// d := d + 3 else
2776: LD_ADDR_VAR 0 3
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: PLUS
2789: ST_TO_ADDR
2790: GO 2806
// d := d - 3 ;
2792: LD_ADDR_VAR 0 3
2796: PUSH
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 3
2804: MINUS
2805: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2806: LD_INT 0
2808: PPUSH
2809: LD_INT 8
2811: PPUSH
2812: LD_VAR 0 5
2816: PPUSH
2817: CALL_OW 380
// un := CreateHuman ;
2821: LD_ADDR_VAR 0 4
2825: PUSH
2826: CALL_OW 44
2830: ST_TO_ADDR
// SetDir ( un , d ) ;
2831: LD_VAR 0 4
2835: PPUSH
2836: LD_VAR 0 3
2840: PPUSH
2841: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2845: LD_VAR 0 4
2849: PPUSH
2850: LD_VAR 0 2
2854: PPUSH
2855: CALL_OW 52
// end ;
2859: GO 2735
2861: POP
2862: POP
// if Difficulty > 1 then
2863: LD_OWVAR 67
2867: PUSH
2868: LD_INT 1
2870: GREATER
2871: IFFALSE 3242
// begin ar_kamikadze := [ ] ;
2873: LD_ADDR_EXP 41
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_VAR 0 5
2890: PPUSH
2891: CALL_OW 380
// un := CreateHuman ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2905: LD_VAR 0 4
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2917: LD_VAR 0 4
2921: PPUSH
2922: LD_INT 23
2924: PPUSH
2925: LD_INT 44
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 48
// ComCrawl ( un ) ;
2935: LD_VAR 0 4
2939: PPUSH
2940: CALL_OW 137
// un := CreateHuman ;
2944: LD_ADDR_VAR 0 4
2948: PUSH
2949: CALL_OW 44
2953: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2954: LD_VAR 0 4
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 30
2973: PPUSH
2974: LD_INT 39
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 48
// ComCrawl ( un ) ;
2984: LD_VAR 0 4
2988: PPUSH
2989: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2993: LD_INT 0
2995: PPUSH
2996: LD_INT 17
2998: PPUSH
2999: LD_VAR 0 5
3003: PPUSH
3004: CALL_OW 380
// un := CreateHuman ;
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: CALL_OW 44
3017: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3018: LD_VAR 0 4
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3030: LD_VAR 0 4
3034: PPUSH
3035: LD_INT 45
3037: PPUSH
3038: LD_INT 86
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 48
// ComHold ( un ) ;
3048: LD_VAR 0 4
3052: PPUSH
3053: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3057: LD_ADDR_EXP 41
3061: PUSH
3062: LD_EXP 41
3066: PPUSH
3067: LD_EXP 41
3071: PUSH
3072: LD_INT 1
3074: PLUS
3075: PPUSH
3076: LD_VAR 0 4
3080: PPUSH
3081: CALL_OW 1
3085: ST_TO_ADDR
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3108: LD_VAR 0 4
3112: PPUSH
3113: LD_INT 60
3115: PPUSH
3116: LD_INT 85
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: CALL_OW 48
// ComHold ( un ) ;
3126: LD_VAR 0 4
3130: PPUSH
3131: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3135: LD_ADDR_EXP 41
3139: PUSH
3140: LD_EXP 41
3144: PPUSH
3145: LD_EXP 41
3149: PUSH
3150: LD_INT 1
3152: PLUS
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 1
3163: ST_TO_ADDR
// un := CreateHuman ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 222
3193: PPUSH
3194: LD_INT 166
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 48
// ComHold ( un ) ;
3204: LD_VAR 0 4
3208: PPUSH
3209: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3213: LD_ADDR_EXP 41
3217: PUSH
3218: LD_EXP 41
3222: PPUSH
3223: LD_EXP 41
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: CALL_OW 1
3241: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3242: LD_ADDR_EXP 39
3246: PUSH
3247: EMPTY
3248: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3264: LD_ADDR_OWVAR 26
3268: PUSH
3269: LD_STRING Pavel Grigorovic
3271: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3272: LD_ADDR_OWVAR 33
3276: PUSH
3277: LD_STRING SecondCharsGal
3279: ST_TO_ADDR
// hc_face_number := 4 ;
3280: LD_ADDR_OWVAR 34
3284: PUSH
3285: LD_INT 4
3287: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3288: LD_ADDR_EXP 39
3292: PUSH
3293: LD_EXP 39
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 44
3305: PPUSH
3306: CALL_OW 1
3310: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3311: LD_INT 2
3313: PPUSH
3314: LD_INT 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: CALL_OW 380
// hc_name := Lucy Sebel ;
3326: LD_ADDR_OWVAR 26
3330: PUSH
3331: LD_STRING Lucy Sebel
3333: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3334: LD_ADDR_OWVAR 33
3338: PUSH
3339: LD_STRING SecondCharsGal
3341: ST_TO_ADDR
// hc_face_number := 15 ;
3342: LD_ADDR_OWVAR 34
3346: PUSH
3347: LD_INT 15
3349: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3350: LD_ADDR_EXP 39
3354: PUSH
3355: LD_EXP 39
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 44
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3373: LD_INT 2
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_VAR 0 5
3383: PPUSH
3384: CALL_OW 380
// hc_gallery :=  ;
3388: LD_ADDR_OWVAR 33
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_name :=  ;
3396: LD_ADDR_OWVAR 26
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3404: LD_ADDR_EXP 39
3408: PUSH
3409: LD_EXP 39
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 44
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// hc_sex := sex_male ;
3427: LD_ADDR_OWVAR 27
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_class = 11 ;
3435: LD_ADDR_OWVAR 28
3439: PUSH
3440: LD_INT 11
3442: ST_TO_ADDR
// hc_gallery = sandar ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING sandar
3450: ST_TO_ADDR
// hc_face_number = 33 ;
3451: LD_ADDR_OWVAR 34
3455: PUSH
3456: LD_INT 33
3458: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3459: LD_ADDR_OWVAR 26
3463: PUSH
3464: LD_STRING Thabit Muhair Saliba
3466: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3467: LD_ADDR_OWVAR 31
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: ST_TO_ADDR
// Saliba = CreateHuman ;
3490: LD_ADDR_EXP 43
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3500: LD_EXP 43
3504: PPUSH
3505: LD_INT 7
3507: PPUSH
3508: CALL_OW 52
// if gensher_active then
3512: LD_EXP 18
3516: IFFALSE 3543
// begin Gensher = NewCharacter ( Dietrich ) ;
3518: LD_ADDR_EXP 44
3522: PUSH
3523: LD_STRING Dietrich
3525: PPUSH
3526: CALL_OW 25
3530: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3531: LD_EXP 44
3535: PPUSH
3536: LD_INT 94
3538: PPUSH
3539: CALL_OW 52
// end ; InitHc ;
3543: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3547: LD_ADDR_EXP 40
3551: PUSH
3552: EMPTY
3553: ST_TO_ADDR
// for i = 1 to 5 do
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: DOUBLE
3560: LD_INT 1
3562: DEC
3563: ST_TO_ADDR
3564: LD_INT 5
3566: PUSH
3567: FOR_TO
3568: IFFALSE 3740
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3570: LD_INT 13
3572: PUSH
3573: LD_INT 14
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 1
3582: PPUSH
3583: LD_INT 2
3585: PPUSH
3586: CALL_OW 12
3590: ARRAY
3591: PPUSH
3592: LD_INT 1
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 1
3604: PPUSH
3605: LD_INT 2
3607: PPUSH
3608: CALL_OW 12
3612: ARRAY
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 25
3619: PUSH
3620: LD_INT 27
3622: PUSH
3623: LD_INT 26
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: LD_INT 60
3645: PPUSH
3646: LD_INT 100
3648: PPUSH
3649: CALL_OW 12
3653: PPUSH
3654: CALL 52529 0 5
// un := CreateVehicle ;
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: CALL_OW 45
3667: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3668: LD_ADDR_EXP 40
3672: PUSH
3673: LD_EXP 40
3677: PPUSH
3678: LD_EXP 40
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3697: LD_VAR 0 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: LD_INT 5
3707: PPUSH
3708: CALL_OW 12
3712: PPUSH
3713: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3717: LD_VAR 0 4
3721: PPUSH
3722: LD_INT 124
3724: PPUSH
3725: LD_INT 141
3727: PPUSH
3728: LD_INT 8
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 50
// end ;
3738: GO 3567
3740: POP
3741: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3742: LD_ADDR_EXP 42
3746: PUSH
3747: EMPTY
3748: PUSH
3749: EMPTY
3750: PUSH
3751: EMPTY
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3758: LD_ADDR_VAR 0 3
3762: PUSH
3763: DOUBLE
3764: LD_INT 1
3766: DEC
3767: ST_TO_ADDR
3768: LD_INT 3
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_OWVAR 67
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 4003
// for i = 1 to 3 do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 3
3803: PUSH
3804: FOR_TO
3805: IFFALSE 3999
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3807: LD_INT 14
3809: PPUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: PPUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 5
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_INT 2
3847: PPUSH
3848: CALL_OW 12
3852: ARRAY
3853: PPUSH
3854: LD_INT 25
3856: PUSH
3857: LD_INT 27
3859: PUSH
3860: LD_INT 26
3862: PUSH
3863: LD_INT 28
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 1
3874: PPUSH
3875: LD_INT 4
3877: PPUSH
3878: CALL_OW 12
3882: ARRAY
3883: PPUSH
3884: LD_INT 100
3886: PPUSH
3887: CALL 52529 0 5
// un := CreateVehicle ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: CALL_OW 45
3900: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3901: LD_ADDR_EXP 42
3905: PUSH
3906: LD_EXP 42
3910: PPUSH
3911: LD_VAR 0 2
3915: PUSH
3916: LD_EXP 42
3920: PUSH
3921: LD_VAR 0 2
3925: ARRAY
3926: PUSH
3927: LD_INT 1
3929: PLUS
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: CALL 52651 0 3
3944: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 5
3955: PPUSH
3956: CALL_OW 12
3960: PPUSH
3961: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_INT 20
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 49
// end ;
3997: GO 3804
3999: POP
4000: POP
4001: GO 3788
4003: POP
4004: POP
// InitHc ;
4005: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4009: LD_INT 4
4011: PPUSH
4012: LD_INT 5
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 58
// end ;
4028: LD_VAR 0 1
4032: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4033: LD_EXP 41
4037: IFFALSE 4111
4039: GO 4041
4041: DISABLE
4042: LD_INT 0
4044: PPUSH
// begin enable ;
4045: ENABLE
// for i in ar_kamikadze do
4046: LD_ADDR_VAR 0 1
4050: PUSH
4051: LD_EXP 41
4055: PUSH
4056: FOR_IN
4057: IFFALSE 4109
// if See ( 1 , i ) then
4059: LD_INT 1
4061: PPUSH
4062: LD_VAR 0 1
4066: PPUSH
4067: CALL_OW 292
4071: IFFALSE 4107
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PPUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 74
4102: PPUSH
4103: CALL_OW 115
4107: GO 4056
4109: POP
4110: POP
// end ;
4111: PPOPN 1
4113: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4114: LD_EXP 13
4118: IFFALSE 4435
4120: GO 4122
4122: DISABLE
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
4127: PPUSH
4128: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4129: LD_INT 35
4131: PPUSH
4132: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4136: LD_INT 1
4138: PPUSH
4139: CALL 40272 0 1
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: IFFALSE 4129
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 14
4154: PUSH
4155: LD_INT 3
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 32
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: EMPTY
4171: LIST
4172: PPUSH
4173: CALL 39876 0 2
// repeat wait ( 0 0$1 ) ;
4177: LD_INT 35
4179: PPUSH
4180: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4184: LD_EXP 68
4188: PUSH
4189: LD_INT 1
4191: ARRAY
4192: PPUSH
4193: LD_INT 33
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 34
4205: PUSH
4206: LD_INT 32
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 72
4221: IFFALSE 4177
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: LD_EXP 68
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PPUSH
4237: LD_INT 33
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 34
4249: PUSH
4250: LD_INT 32
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 72
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL_OW 469
4282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: LD_INT 5
4297: PPUSH
4298: CALL_OW 469
4302: ST_TO_ADDR
// tmp := 100 ;
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 100
4310: ST_TO_ADDR
// if pos then
4311: LD_VAR 0 4
4315: IFFALSE 4355
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 2
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: PPUSH
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: ARRAY
4342: PPUSH
4343: LD_INT 20
4345: PPUSH
4346: CALL 53547 0 4
4350: PUSH
4351: LD_INT 4
4353: ARRAY
4354: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4355: LD_VAR 0 4
4359: PUSH
4360: LD_EXP 14
4364: NOT
4365: AND
4366: PUSH
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 10
4374: LESS
4375: AND
4376: IFFALSE 4283
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4378: LD_VAR 0 2
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 1
4390: ARRAY
4391: PPUSH
4392: LD_VAR 0 4
4396: PUSH
4397: LD_INT 2
4399: ARRAY
4400: PPUSH
4401: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4405: LD_VAR 0 2
4409: PPUSH
4410: LD_INT 198
4412: PPUSH
4413: LD_INT 113
4415: PPUSH
4416: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4420: LD_VAR 0 2
4424: PPUSH
4425: LD_INT 124
4427: PPUSH
4428: LD_INT 7
4430: PPUSH
4431: CALL_OW 171
// end ;
4435: PPOPN 4
4437: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4438: LD_EXP 6
4442: IFFALSE 7099
4444: GO 4446
4446: DISABLE
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 5
4464: PUSH
4465: LD_INT 6
4467: PUSH
4468: LD_INT 7
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: LD_OWVAR 67
4480: ARRAY
4481: ST_TO_ADDR
// coords := [ ] ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: EMPTY
4488: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4489: LD_ADDR_VAR 0 6
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 14
4541: PUSH
4542: LD_INT 1
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 28
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 14
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: LD_INT 25
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 14
4577: PUSH
4578: LD_INT 1
4580: PUSH
4581: LD_INT 2
4583: PUSH
4584: LD_INT 28
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 14
4595: PUSH
4596: LD_INT 1
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: LD_INT 29
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL 39876 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4621: LD_INT 21000
4623: PUSH
4624: LD_INT 19950
4626: PUSH
4627: LD_INT 18900
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_OWVAR 67
4639: ARRAY
4640: PPUSH
4641: CALL_OW 67
// InitHc ;
4645: CALL_OW 19
// InitUc ;
4649: CALL_OW 18
// uc_side := 2 ;
4653: LD_ADDR_OWVAR 20
4657: PUSH
4658: LD_INT 2
4660: ST_TO_ADDR
// uc_nation := 2 ;
4661: LD_ADDR_OWVAR 21
4665: PUSH
4666: LD_INT 2
4668: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: EMPTY
4675: PUSH
4676: EMPTY
4677: PUSH
4678: EMPTY
4679: PUSH
4680: EMPTY
4681: PUSH
4682: EMPTY
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: LD_EXP 68
4708: PUSH
4709: LD_INT 1
4711: ARRAY
4712: PUSH
4713: LD_INT 34
4715: PUSH
4716: LD_INT 32
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: DIFF
4728: PPUSH
4729: CALL_OW 1
4733: ST_TO_ADDR
// for i = 1 to Difficulty do
4734: LD_ADDR_VAR 0 1
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_OWVAR 67
4748: PUSH
4749: FOR_TO
4750: IFFALSE 4888
// begin uc_side := 2 ;
4752: LD_ADDR_OWVAR 20
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// uc_nation := 2 ;
4760: LD_ADDR_OWVAR 21
4764: PUSH
4765: LD_INT 2
4767: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4768: LD_INT 13
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 5
4776: PPUSH
4777: LD_INT 29
4779: PPUSH
4780: LD_INT 100
4782: PPUSH
4783: CALL 52529 0 5
// un := CreateVehicle ;
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: CALL_OW 45
4796: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PUSH
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 1
4817: ARRAY
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: CALL 52651 0 3
4836: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_INT 3
4844: PPUSH
4845: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4849: LD_VAR 0 2
4853: PPUSH
4854: LD_INT 16
4856: PPUSH
4857: LD_INT 0
4859: PPUSH
4860: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4864: LD_VAR 0 2
4868: PPUSH
4869: LD_INT 51
4871: PPUSH
4872: LD_INT 10
4874: PPUSH
4875: CALL_OW 111
// wait ( 0 0$2 ) ;
4879: LD_INT 70
4881: PPUSH
4882: CALL_OW 67
// end ;
4886: GO 4749
4888: POP
4889: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4890: LD_ADDR_VAR 0 5
4894: PUSH
4895: LD_INT 51
4897: PUSH
4898: LD_INT 24
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 75
4907: PUSH
4908: LD_INT 90
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4919: LD_INT 1
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_VAR 0 6
4940: PPUSH
4941: CALL 40109 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_OWVAR 67
4973: ARRAY
4974: PUSH
4975: FOR_TO
4976: IFFALSE 5076
// begin uc_side := 2 ;
4978: LD_ADDR_OWVAR 20
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// uc_nation := 2 ;
4986: LD_ADDR_OWVAR 21
4990: PUSH
4991: LD_INT 2
4993: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4994: LD_INT 0
4996: PPUSH
4997: LD_INT 17
4999: PPUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: CALL_OW 380
// un := CreateHuman ;
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_INT 2
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: LD_INT 2
5039: ARRAY
5040: PUSH
5041: LD_INT 1
5043: PLUS
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PPUSH
5049: LD_VAR 0 2
5053: PPUSH
5054: CALL 52651 0 3
5058: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_INT 13
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: CALL_OW 49
// end ;
5074: GO 4975
5076: POP
5077: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5078: LD_ADDR_VAR 0 1
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_INT 2
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_OWVAR 67
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5228
// begin uc_side := 2 ;
5111: LD_ADDR_OWVAR 20
5115: PUSH
5116: LD_INT 2
5118: ST_TO_ADDR
// uc_nation := 2 ;
5119: LD_ADDR_OWVAR 21
5123: PUSH
5124: LD_INT 2
5126: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 1
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 1
5142: PPUSH
5143: LD_INT 2
5145: PPUSH
5146: CALL_OW 12
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 4
5156: PPUSH
5157: CALL_OW 380
// un := CreateHuman ;
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: CALL_OW 44
5170: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 2
5191: ARRAY
5192: PUSH
5193: LD_INT 1
5195: PLUS
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: LD_VAR 0 2
5205: PPUSH
5206: CALL 52651 0 3
5210: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5211: LD_VAR 0 2
5215: PPUSH
5216: LD_INT 13
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 49
// end ;
5226: GO 5108
5228: POP
5229: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5230: LD_ADDR_VAR 0 5
5234: PUSH
5235: LD_INT 67
5237: PUSH
5238: LD_INT 112
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 85
5247: PUSH
5248: LD_INT 130
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5259: LD_INT 2
5261: PPUSH
5262: LD_VAR 0 3
5266: PUSH
5267: LD_INT 2
5269: ARRAY
5270: PPUSH
5271: LD_VAR 0 5
5275: PPUSH
5276: LD_VAR 0 6
5280: PPUSH
5281: CALL 40109 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5285: LD_ADDR_VAR 0 1
5289: PUSH
5290: DOUBLE
5291: LD_INT 1
5293: DEC
5294: ST_TO_ADDR
5295: LD_INT 1
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: LD_OWVAR 67
5313: ARRAY
5314: PUSH
5315: FOR_TO
5316: IFFALSE 5416
// begin uc_side := 2 ;
5318: LD_ADDR_OWVAR 20
5322: PUSH
5323: LD_INT 2
5325: ST_TO_ADDR
// uc_nation := 2 ;
5326: LD_ADDR_OWVAR 21
5330: PUSH
5331: LD_INT 2
5333: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5334: LD_INT 0
5336: PPUSH
5337: LD_INT 17
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 380
// un := CreateHuman ;
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 3
5371: PUSH
5372: LD_VAR 0 3
5376: PUSH
5377: LD_INT 3
5379: ARRAY
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 52651 0 3
5398: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5399: LD_VAR 0 2
5403: PPUSH
5404: LD_INT 14
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// end ;
5414: GO 5315
5416: POP
5417: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5418: LD_ADDR_VAR 0 5
5422: PUSH
5423: LD_INT 148
5425: PUSH
5426: LD_INT 158
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 148
5435: PUSH
5436: LD_INT 158
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5447: LD_INT 3
5449: PPUSH
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 3
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: LD_VAR 0 6
5468: PPUSH
5469: CALL 40109 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5473: LD_ADDR_VAR 0 1
5477: PUSH
5478: DOUBLE
5479: LD_INT 1
5481: DEC
5482: ST_TO_ADDR
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PUSH
5497: LD_OWVAR 67
5501: ARRAY
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5728
// begin uc_side := 2 ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_INT 2
5513: ST_TO_ADDR
// uc_nation := 2 ;
5514: LD_ADDR_OWVAR 21
5518: PUSH
5519: LD_INT 2
5521: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5522: LD_INT 14
5524: PPUSH
5525: LD_INT 3
5527: PPUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 5
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 12
5548: ARRAY
5549: PPUSH
5550: LD_INT 27
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 28
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: CALL_OW 12
5574: ARRAY
5575: PPUSH
5576: LD_INT 100
5578: PPUSH
5579: CALL 52529 0 5
// un := CreateVehicle ;
5583: LD_ADDR_VAR 0 2
5587: PUSH
5588: CALL_OW 45
5592: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_INT 4
5605: PUSH
5606: LD_VAR 0 3
5610: PUSH
5611: LD_INT 4
5613: ARRAY
5614: PUSH
5615: LD_INT 1
5617: PLUS
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: CALL 52651 0 3
5632: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_INT 5
5640: PPUSH
5641: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 15
5652: PPUSH
5653: LD_INT 0
5655: PPUSH
5656: CALL_OW 49
// if GetControl ( un ) = control_manual then
5660: LD_VAR 0 2
5664: PPUSH
5665: CALL_OW 263
5669: PUSH
5670: LD_INT 1
5672: EQUAL
5673: IFFALSE 5704
// begin PrepareHuman ( false , 3 , skill ) ;
5675: LD_INT 0
5677: PPUSH
5678: LD_INT 3
5680: PPUSH
5681: LD_VAR 0 4
5685: PPUSH
5686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5690: CALL_OW 44
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_INT 179
5711: PPUSH
5712: LD_INT 135
5714: PPUSH
5715: CALL_OW 111
// wait ( 0 0$2 ) ;
5719: LD_INT 70
5721: PPUSH
5722: CALL_OW 67
// end ;
5726: GO 5503
5728: POP
5729: POP
// vc_chassis := 15 ;
5730: LD_ADDR_OWVAR 37
5734: PUSH
5735: LD_INT 15
5737: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_VAR 0 3
5747: PPUSH
5748: LD_INT 4
5750: PUSH
5751: LD_VAR 0 3
5755: PUSH
5756: LD_INT 4
5758: ARRAY
5759: PUSH
5760: LD_INT 1
5762: PLUS
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PPUSH
5768: CALL_OW 45
5772: PPUSH
5773: CALL 52651 0 3
5777: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 4
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_INT 4
5794: ARRAY
5795: ARRAY
5796: PPUSH
5797: LD_INT 15
5799: PPUSH
5800: LD_INT 0
5802: PPUSH
5803: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5807: LD_INT 0
5809: PPUSH
5810: LD_INT 11
5812: PPUSH
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PPUSH
5832: LD_INT 4
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 4
5842: ARRAY
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 44
5856: PPUSH
5857: CALL 52651 0 3
5861: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 4
5869: ARRAY
5870: PUSH
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 4
5878: ARRAY
5879: ARRAY
5880: PPUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 4
5888: ARRAY
5889: PUSH
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 4
5897: ARRAY
5898: PUSH
5899: LD_INT 1
5901: MINUS
5902: ARRAY
5903: PPUSH
5904: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5908: LD_ADDR_VAR 0 5
5912: PUSH
5913: LD_INT 148
5915: PUSH
5916: LD_INT 140
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5926: LD_INT 1
5928: PPUSH
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 4
5936: ARRAY
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL 40109 0 4
// if gensher_active then
5952: LD_EXP 18
5956: IFFALSE 6341
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5958: LD_EXP 44
5962: PPUSH
5963: LD_STRING D10-Diet-1
5965: PPUSH
5966: CALL_OW 94
// for i = 1 to 2 do
5970: LD_ADDR_VAR 0 1
5974: PUSH
5975: DOUBLE
5976: LD_INT 1
5978: DEC
5979: ST_TO_ADDR
5980: LD_INT 2
5982: PUSH
5983: FOR_TO
5984: IFFALSE 6122
// begin uc_side := 2 ;
5986: LD_ADDR_OWVAR 20
5990: PUSH
5991: LD_INT 2
5993: ST_TO_ADDR
// uc_nation := 2 ;
5994: LD_ADDR_OWVAR 21
5998: PUSH
5999: LD_INT 2
6001: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6002: LD_INT 13
6004: PPUSH
6005: LD_INT 3
6007: PPUSH
6008: LD_INT 5
6010: PPUSH
6011: LD_INT 29
6013: PPUSH
6014: LD_INT 100
6016: PPUSH
6017: CALL 52529 0 5
// un := CreateVehicle ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: CALL_OW 45
6030: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 5
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 5
6051: ARRAY
6052: PUSH
6053: LD_INT 1
6055: PLUS
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PPUSH
6061: LD_VAR 0 2
6065: PPUSH
6066: CALL 52651 0 3
6070: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 23
6090: PPUSH
6091: LD_INT 0
6093: PPUSH
6094: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 85
6105: PPUSH
6106: LD_INT 152
6108: PPUSH
6109: CALL_OW 111
// wait ( 0 0$2 ) ;
6113: LD_INT 70
6115: PPUSH
6116: CALL_OW 67
// end ;
6120: GO 5983
6122: POP
6123: POP
// for i = 1 to 3 do
6124: LD_ADDR_VAR 0 1
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_INT 3
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6295
// begin uc_side := 2 ;
6140: LD_ADDR_OWVAR 20
6144: PUSH
6145: LD_INT 2
6147: ST_TO_ADDR
// uc_nation := 2 ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_INT 2
6155: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6156: LD_INT 14
6158: PPUSH
6159: LD_INT 3
6161: PPUSH
6162: LD_INT 5
6164: PPUSH
6165: LD_INT 27
6167: PUSH
6168: LD_INT 28
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 1
6177: PPUSH
6178: LD_INT 2
6180: PPUSH
6181: CALL_OW 12
6185: ARRAY
6186: PPUSH
6187: LD_INT 100
6189: PPUSH
6190: CALL 52529 0 5
// un := CreateVehicle ;
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: CALL_OW 45
6203: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6204: LD_ADDR_VAR 0 3
6208: PUSH
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_INT 5
6216: PUSH
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 5
6224: ARRAY
6225: PUSH
6226: LD_INT 1
6228: PLUS
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: CALL 52651 0 3
6243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6256: LD_VAR 0 2
6260: PPUSH
6261: LD_INT 23
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_INT 85
6278: PPUSH
6279: LD_INT 152
6281: PPUSH
6282: CALL_OW 111
// wait ( 0 0$2 ) ;
6286: LD_INT 70
6288: PPUSH
6289: CALL_OW 67
// end ;
6293: GO 6137
6295: POP
6296: POP
// coords := [ [ 97 , 143 ] ] ;
6297: LD_ADDR_VAR 0 5
6301: PUSH
6302: LD_INT 97
6304: PUSH
6305: LD_INT 143
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6315: LD_INT 1
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 5
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 5
6331: PPUSH
6332: LD_VAR 0 6
6336: PPUSH
6337: CALL 40109 0 4
// end ; Wait ( 13 13$00 ) ;
6341: LD_INT 27300
6343: PPUSH
6344: CALL_OW 67
// tmp := [ ] ;
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: EMPTY
6354: ST_TO_ADDR
// w := 1 ;
6355: LD_ADDR_VAR 0 7
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// repeat tmp := [ ] ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: EMPTY
6369: ST_TO_ADDR
// if w mod 4 = 0 then
6370: LD_VAR 0 7
6374: PUSH
6375: LD_INT 4
6377: MOD
6378: PUSH
6379: LD_INT 0
6381: EQUAL
6382: IFFALSE 6469
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6384: LD_ADDR_VAR 0 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 24
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 11
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 24
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 24
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: ST_TO_ADDR
6467: GO 6571
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6469: LD_ADDR_VAR 0 8
6473: PUSH
6474: LD_INT 14
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 28
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 14
6494: PUSH
6495: LD_INT 1
6497: PUSH
6498: LD_INT 2
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 14
6512: PUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 28
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 14
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 29
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 11
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 24
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// if w mod 3 = 0 then
6571: LD_VAR 0 7
6575: PUSH
6576: LD_INT 3
6578: MOD
6579: PUSH
6580: LD_INT 0
6582: EQUAL
6583: IFFALSE 6659
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6585: LD_ADDR_VAR 0 8
6589: PUSH
6590: LD_VAR 0 8
6594: PPUSH
6595: LD_INT 1
6597: PUSH
6598: LD_VAR 0 8
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PUSH
6609: LD_INT 1
6611: PLUS
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: LD_INT 14
6619: PUSH
6620: LD_INT 1
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 28
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 1
6638: PPUSH
6639: LD_INT 2
6641: PPUSH
6642: CALL_OW 12
6646: ARRAY
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL 52651 0 3
6658: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6659: LD_INT 1
6661: PPUSH
6662: LD_VAR 0 8
6666: PPUSH
6667: CALL 39876 0 2
// if GetSide ( ar_dep_w ) = 2 then
6671: LD_INT 45
6673: PPUSH
6674: CALL_OW 255
6678: PUSH
6679: LD_INT 2
6681: EQUAL
6682: IFFALSE 6767
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6684: LD_ADDR_VAR 0 8
6688: PUSH
6689: LD_INT 14
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 28
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 14
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 27
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 27
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_VAR 0 8
6755: PPUSH
6756: CALL 39876 0 2
// wait ( 0 0$50 ) ;
6760: LD_INT 1750
6762: PPUSH
6763: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6774: LD_EXP 68
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: LD_INT 3
6785: PUSH
6786: LD_INT 34
6788: PUSH
6789: LD_INT 32
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 72
6804: PUSH
6805: LD_INT 4
6807: GREATEREQUAL
6808: IFFALSE 6767
// wait ( 0 0$10 ) ;
6810: LD_INT 350
6812: PPUSH
6813: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_EXP 68
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 34
6836: PUSH
6837: LD_INT 32
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 72
6852: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6853: LD_INT 100
6855: PPUSH
6856: CALL_OW 13
6860: PUSH
6861: LD_INT 50
6863: LESS
6864: IFFALSE 6897
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6866: LD_ADDR_VAR 0 5
6870: PUSH
6871: LD_INT 55
6873: PUSH
6874: LD_INT 7
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 75
6883: PUSH
6884: LD_INT 90
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 6926
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_INT 128
6904: PUSH
6905: LD_INT 94
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 180
6914: PUSH
6915: LD_INT 135
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: ST_TO_ADDR
// if w mod 4 = 0 then
6926: LD_VAR 0 7
6930: PUSH
6931: LD_INT 4
6933: MOD
6934: PUSH
6935: LD_INT 0
6937: EQUAL
6938: IFFALSE 6969
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6940: LD_ADDR_VAR 0 5
6944: PUSH
6945: LD_INT 91
6947: PUSH
6948: LD_INT 58
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 117
6957: PUSH
6958: LD_INT 107
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6969: LD_INT 1
6971: PPUSH
6972: LD_VAR 0 3
6976: PPUSH
6977: LD_VAR 0 5
6981: PPUSH
6982: LD_VAR 0 6
6986: PPUSH
6987: CALL 40109 0 4
// if mc_vehicles [ 2 ] then
6991: LD_EXP 68
6995: PUSH
6996: LD_INT 2
6998: ARRAY
6999: IFFALSE 7035
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7001: LD_INT 2
7003: PPUSH
7004: LD_EXP 68
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: LD_INT 73
7015: PUSH
7016: LD_INT 115
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: PPUSH
7026: LD_VAR 0 6
7030: PPUSH
7031: CALL 40109 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7035: LD_INT 22050
7037: PPUSH
7038: LD_INT 28350
7040: PPUSH
7041: CALL_OW 12
7045: PPUSH
7046: CALL_OW 67
// w := w + 1 ;
7050: LD_ADDR_VAR 0 7
7054: PUSH
7055: LD_VAR 0 7
7059: PUSH
7060: LD_INT 1
7062: PLUS
7063: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7064: LD_INT 94
7066: PPUSH
7067: CALL_OW 301
7071: PUSH
7072: LD_EXP 49
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PPUSH
7081: LD_INT 30
7083: PUSH
7084: LD_INT 3
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: NOT
7096: OR
7097: IFFALSE 6363
// end ;
7099: PPOPN 8
7101: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7102: LD_INT 204
7104: IFFALSE 7578
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
// begin enable ;
7115: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7116: LD_INT 35
7118: PPUSH
7119: LD_INT 1190
7121: PPUSH
7122: CALL_OW 12
7126: PPUSH
7127: CALL_OW 67
// tmp := [ ] ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: EMPTY
7137: ST_TO_ADDR
// uc_side := 8 ;
7138: LD_ADDR_OWVAR 20
7142: PUSH
7143: LD_INT 8
7145: ST_TO_ADDR
// uc_nation := 2 ;
7146: LD_ADDR_OWVAR 21
7150: PUSH
7151: LD_INT 2
7153: ST_TO_ADDR
// InitHc ;
7154: CALL_OW 19
// for i = 1 to 3 do
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_INT 3
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7299
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7174: LD_INT 13
7176: PUSH
7177: LD_INT 14
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 1
7186: PPUSH
7187: LD_INT 2
7189: PPUSH
7190: CALL_OW 12
7194: ARRAY
7195: PPUSH
7196: LD_INT 3
7198: PPUSH
7199: LD_INT 5
7201: PPUSH
7202: LD_INT 27
7204: PUSH
7205: LD_INT 28
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 1
7214: PPUSH
7215: LD_INT 2
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 100
7226: PPUSH
7227: CALL 52529 0 5
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 4
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7253: LD_VAR 0 3
7257: PPUSH
7258: LD_INT 15
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_VAR 0 2
7277: PPUSH
7278: LD_VAR 0 2
7282: PUSH
7283: LD_INT 1
7285: PLUS
7286: PPUSH
7287: LD_VAR 0 3
7291: PPUSH
7292: CALL_OW 1
7296: ST_TO_ADDR
// end ;
7297: GO 7171
7299: POP
7300: POP
// for i = 1 to 4 do
7301: LD_ADDR_VAR 0 1
7305: PUSH
7306: DOUBLE
7307: LD_INT 1
7309: DEC
7310: ST_TO_ADDR
7311: LD_INT 4
7313: PUSH
7314: FOR_TO
7315: IFFALSE 7394
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7317: LD_INT 0
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: LD_INT 4
7325: PPUSH
7326: CALL_OW 12
7330: PPUSH
7331: LD_INT 6
7333: PPUSH
7334: CALL_OW 380
// un := CreateHuman ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: CALL_OW 44
7347: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7348: LD_VAR 0 3
7352: PPUSH
7353: LD_INT 15
7355: PPUSH
7356: LD_INT 0
7358: PPUSH
7359: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_INT 1
7380: PLUS
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 1
7391: ST_TO_ADDR
// end ;
7392: GO 7314
7394: POP
7395: POP
// wait ( 0 0$3 ) ;
7396: LD_INT 105
7398: PPUSH
7399: CALL_OW 67
// for i in tmp do
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_VAR 0 2
7412: PUSH
7413: FOR_IN
7414: IFFALSE 7482
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 257
7425: PUSH
7426: LD_INT 1
7428: EQUAL
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 247
7439: PUSH
7440: LD_INT 2
7442: EQUAL
7443: OR
7444: IFFALSE 7480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_INT 81
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 69
7465: PPUSH
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 74
7475: PPUSH
7476: CALL_OW 115
7480: GO 7413
7482: POP
7483: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7484: LD_VAR 0 2
7488: PPUSH
7489: LD_INT 210
7491: PPUSH
7492: LD_INT 178
7494: PPUSH
7495: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7499: LD_ADDR_VAR 0 4
7503: PUSH
7504: LD_INT 10
7506: PPUSH
7507: LD_INT 22
7509: PUSH
7510: LD_INT 8
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 70
7521: ST_TO_ADDR
// if x then
7522: LD_VAR 0 4
7526: IFFALSE 7554
// for i in x do
7528: LD_ADDR_VAR 0 1
7532: PUSH
7533: LD_VAR 0 4
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7552
// RemoveUnit ( i ) ;
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 64
7550: GO 7538
7552: POP
7553: POP
// wait ( 0 0$1 ) ;
7554: LD_INT 35
7556: PPUSH
7557: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 8
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: NOT
7576: IFFALSE 7484
// end ;
7578: PPOPN 4
7580: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7581: LD_INT 22
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 34
7593: PUSH
7594: LD_INT 31
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 24
7606: PUSH
7607: LD_INT 1000
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: IFFALSE 7671
7629: GO 7631
7631: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7632: LD_INT 22
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 34
7644: PUSH
7645: LD_INT 31
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PPUSH
7661: LD_INT 106
7663: PPUSH
7664: LD_INT 14
7666: PPUSH
7667: CALL_OW 111
// end ; end_of_file
7671: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
// InGameOn ;
7680: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7684: LD_EXP 20
7688: PPUSH
7689: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7693: LD_INT 2
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_INT 22
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 34
7760: PUSH
7761: LD_INT 11
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 69
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: ST_TO_ADDR
// for i = 1 to tmp do
7781: LD_ADDR_VAR 0 6
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_VAR 0 2
7795: PUSH
7796: FOR_TO
7797: IFFALSE 7844
// begin if i = 5 then
7799: LD_VAR 0 6
7803: PUSH
7804: LD_INT 5
7806: EQUAL
7807: IFFALSE 7811
// break ;
7809: GO 7844
// sols := Replace ( sols , i , tmp [ i ] ) ;
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: LD_VAR 0 5
7820: PPUSH
7821: LD_VAR 0 6
7825: PPUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_VAR 0 6
7835: ARRAY
7836: PPUSH
7837: CALL_OW 1
7841: ST_TO_ADDR
// end ;
7842: GO 7796
7844: POP
7845: POP
// tmp := ar_force_tmp ;
7846: LD_ADDR_VAR 0 2
7850: PUSH
7851: LD_EXP 39
7855: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: LD_INT 108
7867: PPUSH
7868: LD_INT 139
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PPUSH
7887: LD_EXP 20
7891: PPUSH
7892: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 2
7903: ARRAY
7904: PPUSH
7905: LD_INT 114
7907: PPUSH
7908: LD_INT 132
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7918: LD_VAR 0 2
7922: PUSH
7923: LD_INT 3
7925: ARRAY
7926: PPUSH
7927: LD_INT 115
7929: PPUSH
7930: LD_INT 132
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7940: LD_VAR 0 2
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PUSH
7949: LD_VAR 0 2
7953: PUSH
7954: LD_INT 3
7956: ARRAY
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7966: LD_VAR 0 4
7970: PPUSH
7971: LD_INT 83
7973: PPUSH
7974: LD_INT 123
7976: PPUSH
7977: CALL_OW 111
// Wait ( 0 0$01 ) ;
7981: LD_INT 35
7983: PPUSH
7984: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7988: LD_INT 90
7990: PPUSH
7991: LD_INT 144
7993: PPUSH
7994: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_INT 88
8005: PPUSH
8006: LD_INT 129
8008: PPUSH
8009: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 92
8020: PUSH
8021: LD_INT 131
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 88
8030: PUSH
8031: LD_INT 127
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 91
8040: PUSH
8041: LD_INT 132
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 92
8050: PUSH
8051: LD_INT 134
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: ST_TO_ADDR
// for i = 1 to sols do
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: DOUBLE
8070: LD_INT 1
8072: DEC
8073: ST_TO_ADDR
8074: LD_VAR 0 5
8078: PUSH
8079: FOR_TO
8080: IFFALSE 8153
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8082: LD_VAR 0 5
8086: PUSH
8087: LD_VAR 0 6
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 3
8097: PUSH
8098: LD_VAR 0 6
8102: ARRAY
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 3
8112: PUSH
8113: LD_VAR 0 6
8117: ARRAY
8118: PUSH
8119: LD_INT 2
8121: ARRAY
8122: PPUSH
8123: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8127: LD_VAR 0 5
8131: PUSH
8132: LD_VAR 0 6
8136: ARRAY
8137: PPUSH
8138: CALL_OW 197
// AddComHold ( sols ) ;
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 200
// end ;
8151: GO 8079
8153: POP
8154: POP
// repeat wait ( 0 0$1 ) ;
8155: LD_INT 35
8157: PPUSH
8158: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8162: LD_VAR 0 5
8166: PUSH
8167: LD_INT 1
8169: ARRAY
8170: PPUSH
8171: LD_INT 92
8173: PPUSH
8174: LD_INT 131
8176: PPUSH
8177: CALL_OW 297
8181: PUSH
8182: LD_INT 4
8184: LESS
8185: IFFALSE 8155
// CenterOnXY ( 96 , 139 ) ;
8187: LD_INT 96
8189: PPUSH
8190: LD_INT 139
8192: PPUSH
8193: CALL_OW 84
// wait ( 0 0$3 ) ;
8197: LD_INT 105
8199: PPUSH
8200: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8204: LD_INT 111
8206: PPUSH
8207: LD_INT 135
8209: PPUSH
8210: LD_INT 1
8212: PPUSH
8213: LD_INT 25
8215: NEG
8216: PPUSH
8217: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8221: LD_VAR 0 2
8225: PUSH
8226: LD_INT 2
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 1
8237: ARRAY
8238: PPUSH
8239: CALL_OW 250
8243: PUSH
8244: LD_INT 3
8246: PLUS
8247: PPUSH
8248: LD_VAR 0 2
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: CALL_OW 251
8261: PPUSH
8262: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8266: LD_VAR 0 2
8270: PUSH
8271: LD_INT 3
8273: ARRAY
8274: PPUSH
8275: LD_INT 7
8277: PPUSH
8278: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8282: LD_VAR 0 2
8286: PUSH
8287: LD_INT 2
8289: ARRAY
8290: PPUSH
8291: LD_VAR 0 2
8295: PUSH
8296: LD_INT 1
8298: ARRAY
8299: PPUSH
8300: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8304: LD_INT 35
8306: PPUSH
8307: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 1
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 2
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: CALL_OW 296
8333: PUSH
8334: LD_INT 5
8336: LESS
8337: IFFALSE 8304
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8339: LD_VAR 0 2
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_VAR 0 2
8352: PUSH
8353: LD_INT 2
8355: ARRAY
8356: PPUSH
8357: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: PPUSH
8370: LD_STRING D1a-Merc1-1
8372: PPUSH
8373: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: ARRAY
8385: PPUSH
8386: LD_STRING D1a-FMerc2-1
8388: PPUSH
8389: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 2
8400: ARRAY
8401: PPUSH
8402: LD_VAR 0 2
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PPUSH
8424: LD_INT 500
8426: PPUSH
8427: CALL_OW 234
// wait ( 0 0$2 ) ;
8431: LD_INT 70
8433: PPUSH
8434: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 1
8445: ARRAY
8446: PPUSH
8447: LD_INT 2
8449: PPUSH
8450: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8454: LD_INT 10
8456: PPUSH
8457: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8461: LD_VAR 0 2
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_STRING D1a-Merc1-2
8472: PPUSH
8473: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8477: LD_INT 7
8479: PPUSH
8480: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8484: LD_VAR 0 2
8488: PUSH
8489: LD_INT 1
8491: ARRAY
8492: PPUSH
8493: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8497: LD_VAR 0 2
8501: PUSH
8502: LD_INT 2
8504: ARRAY
8505: PPUSH
8506: LD_INT 10
8508: PPUSH
8509: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: PPUSH
8522: LD_STRING D1a-FMerc2-2
8524: PPUSH
8525: CALL_OW 88
// wait ( 0 0$1 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8536: LD_INT 7
8538: PPUSH
8539: CALL_OW 85
// wait ( 0 0$2 ) ;
8543: LD_INT 70
8545: PPUSH
8546: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8550: LD_EXP 43
8554: PPUSH
8555: LD_STRING D1a-Saliba-1
8557: PPUSH
8558: CALL_OW 91
// KillUnit ( Saliba ) ;
8562: LD_EXP 43
8566: PPUSH
8567: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8571: LD_VAR 0 2
8575: PUSH
8576: LD_INT 3
8578: ARRAY
8579: PPUSH
8580: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8584: LD_EXP 20
8588: PPUSH
8589: CALL_OW 85
// wait ( 0 0$1 ) ;
8593: LD_INT 35
8595: PPUSH
8596: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8600: LD_VAR 0 5
8604: PPUSH
8605: LD_INT 88
8607: PPUSH
8608: LD_INT 141
8610: PPUSH
8611: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8615: LD_VAR 0 5
8619: PPUSH
8620: LD_INT 70
8622: PPUSH
8623: CALL_OW 202
// wait ( 0 0$2 ) ;
8627: LD_INT 70
8629: PPUSH
8630: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8634: LD_INT 2
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: CALL_OW 80
// InGameOff ;
8650: CALL_OW 9
// ComWalk ( sols ) ;
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8663: LD_STRING M1
8665: PPUSH
8666: CALL_OW 337
// game_speed := 4 ;
8670: LD_ADDR_OWVAR 65
8674: PUSH
8675: LD_INT 4
8677: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 135
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 331
// SaveForQuickRestart ;
8691: CALL_OW 22
// ar_run := true ;
8695: LD_ADDR_EXP 5
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 91
8722: PUSH
8723: LD_INT 7
8725: PUSH
8726: LD_INT 10
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: PUSH
8743: LD_INT 7
8745: PPUSH
8746: CALL_OW 256
8750: PUSH
8751: LD_INT 999
8753: LESS
8754: OR
8755: IFFALSE 8703
// if GetSide ( ar_dep_s ) = 2 then
8757: LD_INT 7
8759: PPUSH
8760: CALL_OW 255
8764: PUSH
8765: LD_INT 2
8767: EQUAL
8768: IFFALSE 8780
// SetSide ( ar_dep_s , 1 ) ;
8770: LD_INT 7
8772: PPUSH
8773: LD_INT 1
8775: PPUSH
8776: CALL_OW 235
// end ;
8780: LD_VAR 0 1
8784: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8785: LD_EXP 5
8789: IFFALSE 9149
8791: GO 8793
8793: DISABLE
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_EXP 39
8808: PUSH
8809: LD_EXP 35
8813: PPUSH
8814: LD_INT 2
8816: PUSH
8817: LD_INT 21
8819: PUSH
8820: LD_INT 2
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: LD_INT 21
8829: PUSH
8830: LD_INT 1
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 72
8846: ADD
8847: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_INT 5
8855: PPUSH
8856: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8860: LD_INT 5
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 343
// k := 1 ;
8870: LD_ADDR_VAR 0 3
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// for i in tmp do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_VAR 0 2
8887: PUSH
8888: FOR_IN
8889: IFFALSE 8974
// begin if IsInUnit ( i ) then
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 310
8900: IFFALSE 8911
// ComExitBuilding ( i ) ;
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 122
// if GetClass ( i ) = 3 then
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 257
8920: PUSH
8921: LD_INT 3
8923: EQUAL
8924: IFFALSE 8960
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_EXP 40
8935: PUSH
8936: LD_VAR 0 3
8940: ARRAY
8941: PPUSH
8942: CALL_OW 180
// k := k + 1 ;
8946: LD_ADDR_VAR 0 3
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 1
8958: PLUS
8959: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_INT 10
8967: PPUSH
8968: CALL_OW 173
// end ;
8972: GO 8888
8974: POP
8975: POP
// ar_patrol := true ;
8976: LD_ADDR_EXP 7
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8984: LD_INT 10
8986: PPUSH
8987: CALL_OW 67
// for i in tmp do
8991: LD_ADDR_VAR 0 1
8995: PUSH
8996: LD_VAR 0 2
9000: PUSH
9001: FOR_IN
9002: IFFALSE 9030
// if not HasTask ( i ) then
9004: LD_VAR 0 1
9008: PPUSH
9009: CALL_OW 314
9013: NOT
9014: IFFALSE 9028
// ComMoveToArea ( i , escape_area ) ;
9016: LD_VAR 0 1
9020: PPUSH
9021: LD_INT 10
9023: PPUSH
9024: CALL_OW 113
9028: GO 9001
9030: POP
9031: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9032: LD_ADDR_VAR 0 3
9036: PUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 95
9044: PUSH
9045: LD_INT 10
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 72
9056: ST_TO_ADDR
// if k then
9057: LD_VAR 0 3
9061: IFFALSE 9130
// for i in k do
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: LD_VAR 0 3
9072: PUSH
9073: FOR_IN
9074: IFFALSE 9128
// begin if IsInUnit ( i ) then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 310
9085: IFFALSE 9101
// RemoveUnit ( IsInUnit ( i ) ) ;
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 310
9096: PPUSH
9097: CALL_OW 64
// RemoveUnit ( i ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: CALL_OW 64
// tmp := tmp diff i ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_VAR 0 2
9119: PUSH
9120: LD_VAR 0 1
9124: DIFF
9125: ST_TO_ADDR
// end ;
9126: GO 9073
9128: POP
9129: POP
// until tmp = [ ] ;
9130: LD_VAR 0 2
9134: PUSH
9135: EMPTY
9136: EQUAL
9137: IFFALSE 8984
// ChangeSideFog ( 5 , 5 ) ;
9139: LD_INT 5
9141: PPUSH
9142: LD_INT 5
9144: PPUSH
9145: CALL_OW 343
// end ;
9149: PPOPN 3
9151: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9152: LD_EXP 7
9156: IFFALSE 9446
9158: GO 9160
9160: DISABLE
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
9165: PPUSH
// begin uc_side := 2 ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_INT 2
9173: ST_TO_ADDR
// uc_nation := 2 ;
9174: LD_ADDR_OWVAR 21
9178: PUSH
9179: LD_INT 2
9181: ST_TO_ADDR
// InitHc ;
9182: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9186: LD_INT 1
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 6
9194: PPUSH
9195: CALL_OW 380
// un := CreateHuman ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: CALL_OW 44
9208: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9209: LD_INT 14
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_INT 27
9220: PPUSH
9221: LD_INT 98
9223: PPUSH
9224: CALL 52529 0 5
// veh := CreateVehicle ;
9228: LD_ADDR_VAR 0 3
9232: PUSH
9233: CALL_OW 45
9237: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9238: LD_VAR 0 3
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_INT 179
9257: PPUSH
9258: LD_INT 135
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_VAR 0 3
9277: PPUSH
9278: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 126
9289: PPUSH
9290: LD_INT 133
9292: PPUSH
9293: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9297: LD_INT 10
9299: PPUSH
9300: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: CALL_OW 292
9316: PUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: LD_INT 7
9324: PPUSH
9325: CALL_OW 296
9329: PUSH
9330: LD_INT 9
9332: LESS
9333: OR
9334: IFFALSE 9297
// ComHold ( veh ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_STRING D2aa-Ar1-1
9352: PPUSH
9353: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 177
9364: PPUSH
9365: LD_INT 96
9367: PPUSH
9368: CALL_OW 111
// AddComExitVehicle ( un ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9381: LD_INT 35
9383: PPUSH
9384: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9388: LD_VAR 0 2
9392: PPUSH
9393: LD_INT 204
9395: PPUSH
9396: CALL_OW 296
9400: PUSH
9401: LD_INT 15
9403: LESS
9404: IFFALSE 9381
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9406: LD_ADDR_EXP 49
9410: PUSH
9411: LD_EXP 49
9415: PPUSH
9416: LD_INT 3
9418: PUSH
9419: LD_EXP 49
9423: PUSH
9424: LD_INT 3
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: PLUS
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 52651 0 3
9445: ST_TO_ADDR
// end ;
9446: PPOPN 3
9448: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9449: LD_INT 7
9451: PPUSH
9452: CALL_OW 255
9456: PUSH
9457: LD_INT 1
9459: EQUAL
9460: PUSH
9461: LD_INT 7
9463: PPUSH
9464: CALL_OW 301
9468: OR
9469: IFFALSE 11893
9471: GO 9473
9473: DISABLE
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_EXP 35
9487: PPUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 3
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 72
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9520
// SetSide ( i , 1 ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 235
9518: GO 9503
9520: POP
9521: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_INT 46
9529: PUSH
9530: LD_INT 41
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 50
9539: PUSH
9540: LD_INT 25
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 57
9549: PUSH
9550: LD_INT 75
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 75
9559: PUSH
9560: LD_INT 89
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 51
9569: PUSH
9570: LD_INT 45
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 95
9579: PUSH
9580: LD_INT 95
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 84
9589: PUSH
9590: LD_INT 77
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 101
9599: PUSH
9600: LD_INT 76
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 118
9609: PUSH
9610: LD_INT 81
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 139
9619: PUSH
9620: LD_INT 97
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 129
9629: PUSH
9630: LD_INT 114
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 154
9639: PUSH
9640: LD_INT 111
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: ST_TO_ADDR
// base_captured := true ;
9661: LD_ADDR_EXP 6
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// DialogueOn ;
9669: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9673: LD_EXP 20
9677: PPUSH
9678: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9682: LD_EXP 20
9686: PPUSH
9687: LD_STRING D2-JMM-1
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9694: LD_EXP 29
9698: PPUSH
9699: LD_STRING D2-Pow-1
9701: PPUSH
9702: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9706: LD_EXP 20
9710: PPUSH
9711: LD_STRING D2-JMM-2
9713: PPUSH
9714: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9718: LD_EXP 29
9722: PPUSH
9723: LD_STRING D2-Pow-2
9725: PPUSH
9726: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9730: LD_EXP 20
9734: PPUSH
9735: LD_STRING D2-JMM-3
9737: PPUSH
9738: CALL_OW 88
// DialogueOff ;
9742: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9746: LD_STRING M2
9748: PPUSH
9749: CALL_OW 337
// Wait ( 0 0$2 ) ;
9753: LD_INT 70
9755: PPUSH
9756: CALL_OW 67
// if IsOk ( Gary ) then
9760: LD_EXP 31
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// Say ( Gary , D2a-Gary-1 ) ;
9771: LD_EXP 31
9775: PPUSH
9776: LD_STRING D2a-Gary-1
9778: PPUSH
9779: CALL_OW 88
// if IsOk ( Bobby ) then
9783: LD_EXP 23
9787: PPUSH
9788: CALL_OW 302
9792: IFFALSE 9806
// Say ( Bobby , D2a-Bobby-1 ) ;
9794: LD_EXP 23
9798: PPUSH
9799: LD_STRING D2a-Bobby-1
9801: PPUSH
9802: CALL_OW 88
// if IsOk ( Cyrus ) then
9806: LD_EXP 24
9810: PPUSH
9811: CALL_OW 302
9815: IFFALSE 9829
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9817: LD_EXP 24
9821: PPUSH
9822: LD_STRING D2a-Cyrus-1
9824: PPUSH
9825: CALL_OW 88
// if IsOk ( Lisa ) then
9829: LD_EXP 21
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9852
// Say ( Lisa , D2a-Lisa-1 ) ;
9840: LD_EXP 21
9844: PPUSH
9845: LD_STRING D2a-Lisa-1
9847: PPUSH
9848: CALL_OW 88
// if IsOk ( Frank ) then
9852: LD_EXP 32
9856: PPUSH
9857: CALL_OW 302
9861: IFFALSE 9875
// Say ( Frank , D2a-Frank-1 ) ;
9863: LD_EXP 32
9867: PPUSH
9868: LD_STRING D2a-Frank-1
9870: PPUSH
9871: CALL_OW 88
// if IsOk ( Cornel ) then
9875: LD_EXP 30
9879: PPUSH
9880: CALL_OW 302
9884: IFFALSE 9898
// Say ( Cornel , D2a-Corn-1 ) ;
9886: LD_EXP 30
9890: PPUSH
9891: LD_STRING D2a-Corn-1
9893: PPUSH
9894: CALL_OW 88
// if IsOk ( Donaldson ) then
9898: LD_EXP 22
9902: PPUSH
9903: CALL_OW 302
9907: IFFALSE 9921
// Say ( Donaldson , D2a-Don-1 ) ;
9909: LD_EXP 22
9913: PPUSH
9914: LD_STRING D2a-Don-1
9916: PPUSH
9917: CALL_OW 88
// if IsOk ( Brown ) then
9921: LD_EXP 26
9925: PPUSH
9926: CALL_OW 302
9930: IFFALSE 9944
// Say ( Brown , D2a-Brown-1 ) ;
9932: LD_EXP 26
9936: PPUSH
9937: LD_STRING D2a-Brown-1
9939: PPUSH
9940: CALL_OW 88
// Wait ( 0 0$30 ) ;
9944: LD_INT 1050
9946: PPUSH
9947: CALL_OW 67
// if IsOk ( Frank ) then
9951: LD_EXP 32
9955: PPUSH
9956: CALL_OW 302
9960: IFFALSE 10226
// begin DialogueOn ;
9962: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9966: LD_EXP 20
9970: PUSH
9971: LD_EXP 32
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9984: LD_EXP 32
9988: PPUSH
9989: LD_STRING D3F-Frank-1
9991: PPUSH
9992: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9996: LD_EXP 20
10000: PPUSH
10001: LD_STRING D3F-JMM-1
10003: PPUSH
10004: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10008: LD_EXP 32
10012: PPUSH
10013: LD_STRING D3F-Frank-2
10015: PPUSH
10016: CALL_OW 88
// case Query ( QFrank ) of 1 :
10020: LD_STRING QFrank
10022: PPUSH
10023: CALL_OW 97
10027: PUSH
10028: LD_INT 1
10030: DOUBLE
10031: EQUAL
10032: IFTRUE 10036
10034: GO 10059
10036: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10037: LD_EXP 20
10041: PPUSH
10042: LD_STRING D3Fa-JMM-1
10044: PPUSH
10045: CALL_OW 88
// us_scout := 1 ;
10049: LD_ADDR_EXP 8
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// end ; 2 :
10057: GO 10222
10059: LD_INT 2
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10189
10067: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10068: LD_EXP 20
10072: PPUSH
10073: LD_STRING D3Fb-JMM-1
10075: PPUSH
10076: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10080: LD_EXP 32
10084: PPUSH
10085: LD_STRING D3Fb-Frank-1
10087: PPUSH
10088: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10092: LD_STRING QFrank2
10094: PPUSH
10095: CALL_OW 97
10099: PUSH
10100: LD_INT 1
10102: DOUBLE
10103: EQUAL
10104: IFTRUE 10108
10106: GO 10155
10108: POP
// begin us_scout := 2 ;
10109: LD_ADDR_EXP 8
10113: PUSH
10114: LD_INT 2
10116: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10117: LD_EXP 20
10121: PPUSH
10122: LD_STRING D3Fba-JMM-1
10124: PPUSH
10125: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10129: LD_EXP 32
10133: PPUSH
10134: LD_STRING D3Fba-Frank-1
10136: PPUSH
10137: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10141: LD_EXP 20
10145: PPUSH
10146: LD_STRING D3Fba-JMM-2
10148: PPUSH
10149: CALL_OW 88
// end ; 2 :
10153: GO 10187
10155: LD_INT 2
10157: DOUBLE
10158: EQUAL
10159: IFTRUE 10163
10161: GO 10186
10163: POP
// begin us_scout := 0 ;
10164: LD_ADDR_EXP 8
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10172: LD_EXP 20
10176: PPUSH
10177: LD_STRING D3Fbb-JMM-1
10179: PPUSH
10180: CALL_OW 88
// end ; end ;
10184: GO 10187
10186: POP
// end ; 3 :
10187: GO 10222
10189: LD_INT 3
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10221
10197: POP
// begin us_scout := - 1 ;
10198: LD_ADDR_EXP 8
10202: PUSH
10203: LD_INT 1
10205: NEG
10206: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10207: LD_EXP 20
10211: PPUSH
10212: LD_STRING D3Fc-JMM-1
10214: PPUSH
10215: CALL_OW 88
// end ; end ;
10219: GO 10222
10221: POP
// DialogueOff ;
10222: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10226: LD_EXP 8
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: IN
10242: IFFALSE 10246
// exit ;
10244: GO 11893
// if us_scout in [ 1 , 2 ] then
10246: LD_EXP 8
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: IN
10261: IFFALSE 10960
// begin if IsInUnit ( Frank ) then
10263: LD_EXP 32
10267: PPUSH
10268: CALL_OW 310
10272: IFFALSE 10283
// ComExitBuilding ( Frank ) ;
10274: LD_EXP 32
10278: PPUSH
10279: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10283: LD_EXP 32
10287: PPUSH
10288: CALL_OW 311
10292: IFFALSE 10303
// ComExitVehicle ( Frank ) ;
10294: LD_EXP 32
10298: PPUSH
10299: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10303: LD_EXP 32
10307: PPUSH
10308: LD_INT 4
10310: PPUSH
10311: CALL_OW 235
// wait ( 0 0$1 ) ;
10315: LD_INT 35
10317: PPUSH
10318: CALL_OW 67
// if us_scout = 2 then
10322: LD_EXP 8
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: IFFALSE 10698
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10332: LD_EXP 32
10336: PPUSH
10337: LD_INT 75
10339: PPUSH
10340: LD_INT 63
10342: PPUSH
10343: CALL_OW 111
// AddComHold ( Frank ) ;
10347: LD_EXP 32
10351: PPUSH
10352: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10356: LD_EXP 32
10360: PPUSH
10361: LD_INT 770
10363: PPUSH
10364: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10368: LD_EXP 32
10372: PPUSH
10373: LD_INT 100
10375: PPUSH
10376: LD_INT 75
10378: PPUSH
10379: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10383: LD_EXP 32
10387: PPUSH
10388: LD_INT 123
10390: PPUSH
10391: LD_INT 103
10393: PPUSH
10394: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10398: LD_EXP 32
10402: PPUSH
10403: LD_INT 138
10405: PPUSH
10406: LD_INT 108
10408: PPUSH
10409: CALL_OW 171
// AddComHold ( Frank ) ;
10413: LD_EXP 32
10417: PPUSH
10418: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10422: LD_INT 35
10424: PPUSH
10425: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10429: LD_EXP 32
10433: PPUSH
10434: LD_INT 138
10436: PPUSH
10437: LD_INT 108
10439: PPUSH
10440: CALL_OW 307
10444: IFFALSE 10422
// AddComMoveXY ( Frank , 125 , 132 ) ;
10446: LD_EXP 32
10450: PPUSH
10451: LD_INT 125
10453: PPUSH
10454: LD_INT 132
10456: PPUSH
10457: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10461: LD_INT 35
10463: PPUSH
10464: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10468: LD_INT 1
10470: PPUSH
10471: LD_EXP 32
10475: PPUSH
10476: CALL_OW 292
10480: PUSH
10481: LD_EXP 32
10485: PPUSH
10486: LD_INT 7
10488: PPUSH
10489: CALL_OW 296
10493: PUSH
10494: LD_INT 7
10496: LESS
10497: OR
10498: IFFALSE 10461
// DialogueOn ;
10500: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10504: LD_EXP 32
10508: PPUSH
10509: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10513: LD_INT 10
10515: PPUSH
10516: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10520: LD_EXP 20
10524: PPUSH
10525: LD_STRING D4Fa-JMM-1
10527: PPUSH
10528: CALL_OW 88
// for i in points do
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: LD_VAR 0 2
10541: PUSH
10542: FOR_IN
10543: IFFALSE 10601
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10545: LD_VAR 0 1
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 1
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: LD_INT 20
10568: NEG
10569: PPUSH
10570: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10574: LD_VAR 0 1
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 331
// end ;
10599: GO 10542
10601: POP
10602: POP
// dwait ( 0 0$0.5 ) ;
10603: LD_INT 18
10605: PPUSH
10606: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10610: LD_INT 42
10612: PPUSH
10613: LD_INT 27
10615: PPUSH
10616: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10620: LD_EXP 32
10624: PPUSH
10625: LD_STRING D4Fa-Frank-1
10627: PPUSH
10628: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10632: LD_INT 18
10634: PPUSH
10635: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10639: LD_EXP 20
10643: PPUSH
10644: LD_STRING D4Fa-JMM-2
10646: PPUSH
10647: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10651: LD_INT 118
10653: PPUSH
10654: LD_INT 80
10656: PPUSH
10657: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10661: LD_EXP 32
10665: PPUSH
10666: LD_STRING D4Fa-Frank-2
10668: PPUSH
10669: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10673: LD_INT 10
10675: PPUSH
10676: CALL_OW 68
// DialogueOff ;
10680: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10684: LD_EXP 32
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 235
// end else
10696: GO 10960
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10698: LD_INT 2
10700: PPUSH
10701: LD_INT 4
10703: PPUSH
10704: LD_INT 2
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10714: LD_EXP 32
10718: PPUSH
10719: LD_INT 75
10721: PPUSH
10722: LD_INT 63
10724: PPUSH
10725: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10729: LD_EXP 32
10733: PPUSH
10734: LD_INT 175
10736: PPUSH
10737: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10741: LD_EXP 32
10745: PPUSH
10746: LD_INT 102
10748: PPUSH
10749: LD_INT 76
10751: PPUSH
10752: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10756: LD_EXP 32
10760: PPUSH
10761: LD_INT 108
10763: PPUSH
10764: LD_INT 70
10766: PPUSH
10767: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10771: LD_INT 35
10773: PPUSH
10774: CALL_OW 67
// until See ( 2 , Frank ) ;
10778: LD_INT 2
10780: PPUSH
10781: LD_EXP 32
10785: PPUSH
10786: CALL_OW 292
10790: IFFALSE 10771
// ComMoveXY ( Frank , 112 , 118 ) ;
10792: LD_EXP 32
10796: PPUSH
10797: LD_INT 112
10799: PPUSH
10800: LD_INT 118
10802: PPUSH
10803: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10807: LD_EXP 32
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 750
10819: GREATEREQUAL
10820: IFFALSE 10834
// SetLives ( Frank , 700 ) ;
10822: LD_EXP 32
10826: PPUSH
10827: LD_INT 700
10829: PPUSH
10830: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10834: LD_INT 35
10836: PPUSH
10837: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10841: LD_INT 1
10843: PPUSH
10844: LD_EXP 32
10848: PPUSH
10849: CALL_OW 292
10853: PUSH
10854: LD_EXP 32
10858: PPUSH
10859: LD_INT 7
10861: PPUSH
10862: CALL_OW 296
10866: PUSH
10867: LD_INT 17
10869: LESS
10870: OR
10871: IFFALSE 10834
// DialogueOn ;
10873: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10877: LD_EXP 32
10881: PPUSH
10882: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10886: LD_EXP 32
10890: PPUSH
10891: LD_STRING D4Fb-Frank-1
10893: PPUSH
10894: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10898: LD_EXP 20
10902: PPUSH
10903: LD_STRING D4Fb-JMM-1
10905: PPUSH
10906: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10910: LD_INT 2
10912: PPUSH
10913: LD_STRING D4Fb-FSci1-1
10915: PPUSH
10916: CALL 15541 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10920: LD_EXP 32
10924: PPUSH
10925: LD_STRING D4Fb-Frank-2
10927: PPUSH
10928: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10932: LD_EXP 20
10936: PPUSH
10937: LD_STRING D4Fb-JMM-2
10939: PPUSH
10940: CALL_OW 88
// DialogueOff ;
10944: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10948: LD_EXP 32
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10960: LD_EXP 33
10964: PPUSH
10965: CALL_OW 302
10969: PUSH
10970: LD_EXP 32
10974: NOT
10975: AND
10976: IFFALSE 11124
// begin DialogueOn ;
10978: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10982: LD_EXP 20
10986: PUSH
10987: LD_EXP 33
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11000: LD_EXP 33
11004: PPUSH
11005: LD_STRING D3Y-Yam-1
11007: PPUSH
11008: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11012: LD_EXP 20
11016: PPUSH
11017: LD_STRING D3Y-JMM-1
11019: PPUSH
11020: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11024: LD_EXP 33
11028: PPUSH
11029: LD_STRING D3Y-Yam-2
11031: PPUSH
11032: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11036: LD_STRING QYamoko
11038: PPUSH
11039: CALL_OW 97
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11087
11052: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11053: LD_EXP 20
11057: PPUSH
11058: LD_STRING D3Ya-JMM-1
11060: PPUSH
11061: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11065: LD_EXP 33
11069: PPUSH
11070: LD_STRING D3Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// us_scout := 1 ;
11077: LD_ADDR_EXP 8
11081: PUSH
11082: LD_INT 1
11084: ST_TO_ADDR
// end ; 2 :
11085: GO 11120
11087: LD_INT 2
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11119
11095: POP
// begin us_scout := - 1 ;
11096: LD_ADDR_EXP 8
11100: PUSH
11101: LD_INT 1
11103: NEG
11104: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11105: LD_EXP 20
11109: PPUSH
11110: LD_STRING D3Yb-JMM-1
11112: PPUSH
11113: CALL_OW 88
// end ; end ;
11117: GO 11120
11119: POP
// DialogueOff ;
11120: CALL_OW 7
// end ; if Frank then
11124: LD_EXP 32
11128: IFFALSE 11132
// exit ;
11130: GO 11893
// if us_scout in [ - 1 , 0 ] then
11132: LD_EXP 8
11136: PUSH
11137: LD_INT 1
11139: NEG
11140: PUSH
11141: LD_INT 0
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: IN
11148: IFFALSE 11152
// exit ;
11150: GO 11893
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11152: LD_ADDR_EXP 8
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: LD_OWVAR 67
11175: ARRAY
11176: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11177: LD_EXP 8
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: LD_INT 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: IN
11192: IFFALSE 11893
// begin if IsInUnit ( Kikuchi ) then
11194: LD_EXP 33
11198: PPUSH
11199: CALL_OW 310
11203: IFFALSE 11214
// ComExitBuilding ( Kikuchi ) ;
11205: LD_EXP 33
11209: PPUSH
11210: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11214: LD_EXP 33
11218: PPUSH
11219: CALL_OW 311
11223: IFFALSE 11234
// ComExitVehicle ( Kikuchi ) ;
11225: LD_EXP 33
11229: PPUSH
11230: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_INT 4
11241: PPUSH
11242: CALL_OW 235
// wait ( 0 0$1 ) ;
11246: LD_INT 35
11248: PPUSH
11249: CALL_OW 67
// if us_scout = 2 then
11253: LD_EXP 8
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: IFFALSE 11641
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11263: LD_EXP 33
11267: PPUSH
11268: LD_INT 75
11270: PPUSH
11271: LD_INT 63
11273: PPUSH
11274: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11278: LD_EXP 33
11282: PPUSH
11283: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11287: LD_EXP 33
11291: PPUSH
11292: LD_INT 770
11294: PPUSH
11295: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11299: LD_EXP 33
11303: PPUSH
11304: LD_INT 100
11306: PPUSH
11307: LD_INT 75
11309: PPUSH
11310: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11314: LD_EXP 33
11318: PPUSH
11319: LD_INT 123
11321: PPUSH
11322: LD_INT 103
11324: PPUSH
11325: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11329: LD_EXP 33
11333: PPUSH
11334: LD_INT 138
11336: PPUSH
11337: LD_INT 108
11339: PPUSH
11340: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11344: LD_EXP 33
11348: PPUSH
11349: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11353: LD_INT 35
11355: PPUSH
11356: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11360: LD_EXP 33
11364: PPUSH
11365: LD_INT 138
11367: PPUSH
11368: LD_INT 108
11370: PPUSH
11371: CALL_OW 307
11375: IFFALSE 11353
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11377: LD_EXP 33
11381: PPUSH
11382: LD_INT 125
11384: PPUSH
11385: LD_INT 132
11387: PPUSH
11388: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11392: LD_INT 35
11394: PPUSH
11395: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11399: LD_INT 1
11401: PPUSH
11402: LD_EXP 33
11406: PPUSH
11407: CALL_OW 292
11411: PUSH
11412: LD_EXP 33
11416: PPUSH
11417: LD_INT 7
11419: PPUSH
11420: CALL_OW 296
11424: PUSH
11425: LD_INT 7
11427: LESS
11428: OR
11429: IFFALSE 11392
// DialogueOn ;
11431: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11435: LD_EXP 33
11439: PPUSH
11440: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11444: LD_INT 10
11446: PPUSH
11447: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11451: LD_EXP 33
11455: PPUSH
11456: LD_STRING D4Ya-Yam-1
11458: PPUSH
11459: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11463: LD_EXP 20
11467: PPUSH
11468: LD_STRING D4Ya-JMM-1
11470: PPUSH
11471: CALL_OW 88
// for i in points do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 2
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11544
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11488: LD_VAR 0 1
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 1
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: LD_INT 20
11511: NEG
11512: PPUSH
11513: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11517: LD_VAR 0 1
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PPUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 2
11533: ARRAY
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 331
// end ;
11542: GO 11485
11544: POP
11545: POP
// dwait ( 0 0$0.5 ) ;
11546: LD_INT 18
11548: PPUSH
11549: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11553: LD_INT 42
11555: PPUSH
11556: LD_INT 27
11558: PPUSH
11559: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11563: LD_EXP 33
11567: PPUSH
11568: LD_STRING D4Ya-Yam-2
11570: PPUSH
11571: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11575: LD_INT 18
11577: PPUSH
11578: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11582: LD_INT 118
11584: PPUSH
11585: LD_INT 80
11587: PPUSH
11588: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11592: LD_EXP 20
11596: PPUSH
11597: LD_STRING D4Ya-JMM-2
11599: PPUSH
11600: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11604: LD_EXP 33
11608: PPUSH
11609: LD_STRING D4Ya-Yam-3
11611: PPUSH
11612: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11616: LD_INT 10
11618: PPUSH
11619: CALL_OW 68
// DialogueOff ;
11623: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11627: LD_EXP 33
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 235
// end else
11639: GO 11893
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11641: LD_INT 2
11643: PPUSH
11644: LD_INT 4
11646: PPUSH
11647: LD_INT 2
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11657: LD_EXP 33
11661: PPUSH
11662: LD_INT 75
11664: PPUSH
11665: LD_INT 63
11667: PPUSH
11668: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11672: LD_EXP 33
11676: PPUSH
11677: LD_INT 175
11679: PPUSH
11680: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11684: LD_EXP 33
11688: PPUSH
11689: LD_INT 102
11691: PPUSH
11692: LD_INT 76
11694: PPUSH
11695: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11699: LD_EXP 33
11703: PPUSH
11704: LD_INT 108
11706: PPUSH
11707: LD_INT 70
11709: PPUSH
11710: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11714: LD_INT 35
11716: PPUSH
11717: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11721: LD_INT 2
11723: PPUSH
11724: LD_EXP 33
11728: PPUSH
11729: CALL_OW 292
11733: IFFALSE 11714
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11735: LD_EXP 33
11739: PPUSH
11740: LD_INT 112
11742: PPUSH
11743: LD_INT 118
11745: PPUSH
11746: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11750: LD_EXP 33
11754: PPUSH
11755: CALL_OW 256
11759: PUSH
11760: LD_INT 750
11762: GREATEREQUAL
11763: IFFALSE 11777
// SetLives ( Kikuchi , 700 ) ;
11765: LD_EXP 33
11769: PPUSH
11770: LD_INT 700
11772: PPUSH
11773: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11777: LD_INT 35
11779: PPUSH
11780: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11784: LD_INT 1
11786: PPUSH
11787: LD_EXP 33
11791: PPUSH
11792: CALL_OW 292
11796: PUSH
11797: LD_EXP 33
11801: PPUSH
11802: LD_INT 7
11804: PPUSH
11805: CALL_OW 296
11809: PUSH
11810: LD_INT 17
11812: LESS
11813: OR
11814: IFFALSE 11777
// DialogueOn ;
11816: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11820: LD_EXP 33
11824: PPUSH
11825: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11829: LD_EXP 33
11833: PPUSH
11834: LD_STRING D4Yb-Yam-1
11836: PPUSH
11837: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11841: LD_EXP 20
11845: PPUSH
11846: LD_STRING D4Yb-JMM-1
11848: PPUSH
11849: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11853: LD_EXP 33
11857: PPUSH
11858: LD_STRING D4Yb-Yam-2
11860: PPUSH
11861: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11865: LD_EXP 20
11869: PPUSH
11870: LD_STRING D4Yb-JMM-2
11872: PPUSH
11873: CALL_OW 88
// DialogueOff ;
11877: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11881: LD_EXP 33
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 235
// end ; end ; end ;
11893: PPOPN 2
11895: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11896: LD_EXP 6
11900: IFFALSE 12933
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
// begin enable ;
11911: ENABLE
// if not seen [ 1 ] then
11912: LD_EXP 9
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: NOT
11921: IFFALSE 12101
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: LD_INT 22
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 11
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 33
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 69
11974: ST_TO_ADDR
// if tmp then
11975: LD_VAR 0 2
11979: IFFALSE 12101
// for i in tmp do
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_VAR 0 2
11990: PUSH
11991: FOR_IN
11992: IFFALSE 12099
// if See ( 1 , i ) then
11994: LD_INT 1
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 292
12006: IFFALSE 12097
// begin seen := Replace ( seen , 1 , true ) ;
12008: LD_ADDR_EXP 9
12012: PUSH
12013: LD_EXP 9
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 1
12028: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12029: LD_INT 1
12031: PPUSH
12032: CALL 15363 0 1
12036: IFFALSE 12097
// begin DialogueOn ;
12038: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12058: LD_ADDR_VAR 0 3
12062: PUSH
12063: LD_INT 1
12065: PPUSH
12066: LD_STRING D5a-Sol2-1
12068: PPUSH
12069: CALL 15541 0 2
12073: ST_TO_ADDR
// if not un then
12074: LD_VAR 0 3
12078: NOT
12079: IFFALSE 12091
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12081: LD_INT 2
12083: PPUSH
12084: LD_STRING D5a-FSol2-1
12086: PPUSH
12087: CALL 15541 0 2
// DialogueOff ;
12091: CALL_OW 7
// break ;
12095: GO 12099
// end ; end ;
12097: GO 11991
12099: POP
12100: POP
// end ; if not seen [ 2 ] then
12101: LD_EXP 9
12105: PUSH
12106: LD_INT 2
12108: ARRAY
12109: NOT
12110: IFFALSE 12335
// begin can_kamikazed := true ;
12112: LD_ADDR_EXP 10
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 25
12137: PUSH
12138: LD_INT 17
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// if tmp then
12154: LD_VAR 0 2
12158: IFFALSE 12335
// for i in tmp do
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_VAR 0 2
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12333
// if See ( 1 , i ) then
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 292
12185: IFFALSE 12331
// begin seen := Replace ( seen , 2 , true ) ;
12187: LD_ADDR_EXP 9
12191: PUSH
12192: LD_EXP 9
12196: PPUSH
12197: LD_INT 2
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12208: LD_INT 1
12210: PPUSH
12211: CALL 15363 0 1
12215: IFFALSE 12331
// begin DialogueOn ;
12217: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12230: LD_INT 10
12232: PPUSH
12233: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_STRING D5b-Sol1-1
12247: PPUSH
12248: CALL 15541 0 2
12252: ST_TO_ADDR
// if not un then
12253: LD_VAR 0 3
12257: NOT
12258: IFFALSE 12276
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 2
12267: PPUSH
12268: LD_STRING D5b-FSol1-1
12270: PPUSH
12271: CALL 15541 0 2
12275: ST_TO_ADDR
// if un then
12276: LD_VAR 0 3
12280: IFFALSE 12325
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12282: LD_ADDR_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_STRING D5b-Sol2-1
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: CALL 15767 0 3
12302: ST_TO_ADDR
// if not un2 then
12303: LD_VAR 0 4
12307: NOT
12308: IFFALSE 12325
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12310: LD_INT 2
12312: PPUSH
12313: LD_STRING D5b-FSol2-1
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: CALL 15767 0 3
// end ; DialogueOff ;
12325: CALL_OW 7
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12170
12333: POP
12334: POP
// end ; if not seen [ 3 ] then
12335: LD_EXP 9
12339: PUSH
12340: LD_INT 3
12342: ARRAY
12343: NOT
12344: IFFALSE 12518
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 33
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if tmp then
12380: LD_VAR 0 2
12384: IFFALSE 12518
// for i in tmp do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12516
// if See ( 1 , i ) then
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 292
12411: IFFALSE 12514
// begin seen := Replace ( seen , 3 , true ) ;
12413: LD_ADDR_EXP 9
12417: PUSH
12418: LD_EXP 9
12422: PPUSH
12423: LD_INT 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 1
12433: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12434: LD_INT 1
12436: PPUSH
12437: CALL 15363 0 1
12441: IFFALSE 12514
// begin DialogueOn ;
12443: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12456: LD_INT 10
12458: PPUSH
12459: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_STRING D8-Sol1-1
12473: PPUSH
12474: CALL 15541 0 2
12478: ST_TO_ADDR
// if not un then
12479: LD_VAR 0 3
12483: NOT
12484: IFFALSE 12496
// SayRand ( sex_female , D8-FSol1-1 ) ;
12486: LD_INT 2
12488: PPUSH
12489: LD_STRING D8-FSol1-1
12491: PPUSH
12492: CALL 15541 0 2
// Say ( JMM , D8-JMM-1 ) ;
12496: LD_EXP 20
12500: PPUSH
12501: LD_STRING D8-JMM-1
12503: PPUSH
12504: CALL_OW 88
// DialogueOff ;
12508: CALL_OW 7
// break ;
12512: GO 12516
// end ; end ;
12514: GO 12396
12516: POP
12517: POP
// end ; if not seen [ 4 ] then
12518: LD_EXP 9
12522: PUSH
12523: LD_INT 4
12525: ARRAY
12526: NOT
12527: IFFALSE 12689
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 33
12546: PUSH
12547: LD_INT 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: ST_TO_ADDR
// if tmp then
12563: LD_VAR 0 2
12567: IFFALSE 12689
// for i in tmp do
12569: LD_ADDR_VAR 0 1
12573: PUSH
12574: LD_VAR 0 2
12578: PUSH
12579: FOR_IN
12580: IFFALSE 12687
// if See ( 1 , i ) then
12582: LD_INT 1
12584: PPUSH
12585: LD_VAR 0 1
12589: PPUSH
12590: CALL_OW 292
12594: IFFALSE 12685
// begin seen := Replace ( seen , 4 , true ) ;
12596: LD_ADDR_EXP 9
12600: PUSH
12601: LD_EXP 9
12605: PPUSH
12606: LD_INT 4
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 1
12616: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12617: LD_INT 1
12619: PPUSH
12620: CALL 15363 0 1
12624: IFFALSE 12685
// begin DialogueOn ;
12626: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12639: LD_INT 10
12641: PPUSH
12642: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 1
12653: PPUSH
12654: LD_STRING D5a-Sol1-1
12656: PPUSH
12657: CALL 15541 0 2
12661: ST_TO_ADDR
// if not un then
12662: LD_VAR 0 3
12666: NOT
12667: IFFALSE 12679
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12669: LD_INT 2
12671: PPUSH
12672: LD_STRING D5a-FSol1-1
12674: PPUSH
12675: CALL 15541 0 2
// DialogueOff ;
12679: CALL_OW 7
// break ;
12683: GO 12687
// end ; end ;
12685: GO 12579
12687: POP
12688: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12689: LD_EXP 9
12693: PUSH
12694: LD_INT 5
12696: ARRAY
12697: NOT
12698: PUSH
12699: LD_EXP 9
12703: PUSH
12704: LD_INT 3
12706: ARRAY
12707: AND
12708: IFFALSE 12882
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 34
12727: PUSH
12728: LD_INT 31
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: ST_TO_ADDR
// if tmp then
12744: LD_VAR 0 2
12748: IFFALSE 12882
// for i in tmp do
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: FOR_IN
12761: IFFALSE 12880
// if See ( 1 , i ) then
12763: LD_INT 1
12765: PPUSH
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 292
12775: IFFALSE 12878
// begin seen := Replace ( seen , 5 , true ) ;
12777: LD_ADDR_EXP 9
12781: PUSH
12782: LD_EXP 9
12786: PPUSH
12787: LD_INT 5
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 1
12797: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12798: LD_INT 1
12800: PPUSH
12801: CALL 15363 0 1
12805: IFFALSE 12878
// begin DialogueOn ;
12807: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12811: LD_VAR 0 1
12815: PPUSH
12816: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12820: LD_INT 10
12822: PPUSH
12823: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D8a-Sol2-1
12837: PPUSH
12838: CALL 15541 0 2
12842: ST_TO_ADDR
// if not un then
12843: LD_VAR 0 3
12847: NOT
12848: IFFALSE 12860
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_STRING D8a-FSol2-1
12855: PPUSH
12856: CALL 15541 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12860: LD_EXP 20
12864: PPUSH
12865: LD_STRING D8a-JMM-1
12867: PPUSH
12868: CALL_OW 88
// DialogueOff ;
12872: CALL_OW 7
// break ;
12876: GO 12880
// end ; end ;
12878: GO 12760
12880: POP
12881: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12882: LD_EXP 9
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PUSH
12891: LD_EXP 9
12895: PUSH
12896: LD_INT 2
12898: ARRAY
12899: AND
12900: PUSH
12901: LD_EXP 9
12905: PUSH
12906: LD_INT 3
12908: ARRAY
12909: AND
12910: PUSH
12911: LD_EXP 9
12915: PUSH
12916: LD_INT 4
12918: ARRAY
12919: AND
12920: PUSH
12921: LD_EXP 9
12925: PUSH
12926: LD_INT 5
12928: ARRAY
12929: AND
12930: IFFALSE 12933
// disable ;
12932: DISABLE
// end ;
12933: PPOPN 4
12935: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12936: LD_EXP 10
12940: PUSH
12941: LD_EXP 11
12945: AND
12946: IFFALSE 13144
12948: GO 12950
12950: DISABLE
12951: LD_INT 0
12953: PPUSH
// begin DialogueOn ;
12954: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12958: LD_EXP 11
12962: PPUSH
12963: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_STRING D5c-Sol1-1
12977: PPUSH
12978: CALL 15541 0 2
12982: ST_TO_ADDR
// if not un then
12983: LD_VAR 0 1
12987: NOT
12988: IFFALSE 13006
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 2
12997: PPUSH
12998: LD_STRING D5c-FSol1-1
13000: PPUSH
13001: CALL 15541 0 2
13005: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13006: LD_EXP 20
13010: PPUSH
13011: LD_STRING D5c-JMM-1
13013: PPUSH
13014: CALL_OW 88
// if IsOk ( Lisa ) then
13018: LD_EXP 21
13022: PPUSH
13023: CALL_OW 302
13027: IFFALSE 13043
// Say ( Lisa , D5d-Lisa-1 ) else
13029: LD_EXP 21
13033: PPUSH
13034: LD_STRING D5d-Lisa-1
13036: PPUSH
13037: CALL_OW 88
13041: GO 13128
// if IsOk ( Cyrus ) then
13043: LD_EXP 24
13047: PPUSH
13048: CALL_OW 302
13052: IFFALSE 13068
// Say ( Cyrus , D5d-Cyrus-1 ) else
13054: LD_EXP 24
13058: PPUSH
13059: LD_STRING D5d-Cyrus-1
13061: PPUSH
13062: CALL_OW 88
13066: GO 13128
// if IsOk ( Gary ) then
13068: LD_EXP 31
13072: PPUSH
13073: CALL_OW 302
13077: IFFALSE 13093
// Say ( Gary , D5d-Gary-1 ) else
13079: LD_EXP 31
13083: PPUSH
13084: LD_STRING D5d-Gary-1
13086: PPUSH
13087: CALL_OW 88
13091: GO 13128
// if GetSex ( un ) = sex_male then
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 258
13102: PUSH
13103: LD_INT 1
13105: EQUAL
13106: IFFALSE 13122
// Say ( un , D5d-Sol1-1 ) else
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_STRING D5d-Sol1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13128
// begin DialogueOff ;
13122: CALL_OW 7
// exit ;
13126: GO 13144
// end ; Say ( JMM , D5d-JMM-1 ) ;
13128: LD_EXP 20
13132: PPUSH
13133: LD_STRING D5d-JMM-1
13135: PPUSH
13136: CALL_OW 88
// DialogueOff ;
13140: CALL_OW 7
// end ;
13144: PPOPN 1
13146: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 17
13152: PPUSH
13153: CALL_OW 294
13157: PUSH
13158: LD_INT 2
13160: GREATEREQUAL
13161: IFFALSE 13282
13163: GO 13165
13165: DISABLE
13166: LD_INT 0
13168: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13169: LD_INT 10
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: LD_INT 10
13180: NEG
13181: PPUSH
13182: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13186: LD_INT 10
13188: PPUSH
13189: LD_INT 5
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13199: LD_INT 10
13201: PPUSH
13202: LD_INT 5
13204: PPUSH
13205: CALL_OW 86
// DialogueOn ;
13209: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13213: LD_ADDR_VAR 0 1
13217: PUSH
13218: LD_INT 1
13220: PPUSH
13221: LD_STRING D6-Sci1-1
13223: PPUSH
13224: CALL 15541 0 2
13228: ST_TO_ADDR
// if un then
13229: LD_VAR 0 1
13233: IFFALSE 13271
// begin Say ( JMM , D6-JMM-1 ) ;
13235: LD_EXP 20
13239: PPUSH
13240: LD_STRING D6-JMM-1
13242: PPUSH
13243: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13247: LD_VAR 0 1
13251: PPUSH
13252: LD_STRING D6-Sci1-2
13254: PPUSH
13255: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13259: LD_EXP 20
13263: PPUSH
13264: LD_STRING D6-JMM-2
13266: PPUSH
13267: CALL_OW 88
// end ; DialogueOff ;
13271: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13275: LD_STRING M3
13277: PPUSH
13278: CALL_OW 337
// end ;
13282: PPOPN 1
13284: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13285: LD_OWVAR 1
13289: PUSH
13290: LD_INT 42000
13292: GREATEREQUAL
13293: PUSH
13294: LD_INT 2
13296: PPUSH
13297: LD_INT 169
13299: PPUSH
13300: LD_INT 90
13302: PPUSH
13303: LD_INT 10
13305: PPUSH
13306: CALL 53547 0 4
13310: PUSH
13311: LD_INT 4
13313: ARRAY
13314: PUSH
13315: LD_INT 0
13317: EQUAL
13318: PUSH
13319: LD_INT 45
13321: PPUSH
13322: CALL_OW 301
13326: OR
13327: PUSH
13328: LD_INT 45
13330: PPUSH
13331: CALL_OW 255
13335: PUSH
13336: LD_INT 1
13338: EQUAL
13339: OR
13340: AND
13341: PUSH
13342: LD_INT 94
13344: PPUSH
13345: CALL_OW 301
13349: NOT
13350: AND
13351: IFFALSE 14477
13353: GO 13355
13355: DISABLE
13356: LD_INT 0
13358: PPUSH
13359: PPUSH
13360: PPUSH
13361: PPUSH
// begin uc_side := 5 ;
13362: LD_ADDR_OWVAR 20
13366: PUSH
13367: LD_INT 5
13369: ST_TO_ADDR
// uc_nation := 2 ;
13370: LD_ADDR_OWVAR 21
13374: PUSH
13375: LD_INT 2
13377: ST_TO_ADDR
// InitHc ;
13378: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13382: LD_INT 1
13384: PPUSH
13385: LD_INT 3
13387: PPUSH
13388: LD_INT 8
13390: PPUSH
13391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13395: LD_ADDR_OWVAR 29
13399: PUSH
13400: LD_INT 12
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING SecondCharsGal
13417: ST_TO_ADDR
// hc_face_number := 7 ;
13418: LD_ADDR_OWVAR 34
13422: PUSH
13423: LD_INT 7
13425: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13426: LD_ADDR_EXP 45
13430: PUSH
13431: CALL_OW 44
13435: ST_TO_ADDR
// InitHc ;
13436: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 16
13445: PPUSH
13446: LD_INT 2
13448: PPUSH
13449: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13453: LD_ADDR_OWVAR 29
13457: PUSH
13458: LD_INT 12
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: ST_TO_ADDR
// hc_name :=  ;
13468: LD_ADDR_OWVAR 26
13472: PUSH
13473: LD_STRING 
13475: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13476: LD_ADDR_EXP 46
13480: PUSH
13481: CALL_OW 44
13485: ST_TO_ADDR
// InitHc ;
13486: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// until not InBattle ( 1 ) ;
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 463
13504: NOT
13505: IFFALSE 13490
// wait ( 0 0$5 ) ;
13507: LD_INT 175
13509: PPUSH
13510: CALL_OW 67
// DialogueOn ;
13514: CALL_OW 6
// InGameOn ;
13518: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 22
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 25
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 25
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 8
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: PUSH
13618: LD_EXP 20
13622: PUSH
13623: LD_EXP 21
13627: PUSH
13628: LD_EXP 22
13632: PUSH
13633: LD_EXP 23
13637: PUSH
13638: LD_EXP 24
13642: PUSH
13643: LD_EXP 25
13647: PUSH
13648: LD_EXP 26
13652: PUSH
13653: LD_EXP 27
13657: PUSH
13658: LD_EXP 28
13662: PUSH
13663: LD_EXP 30
13667: PUSH
13668: LD_EXP 31
13672: PUSH
13673: LD_EXP 32
13677: PUSH
13678: LD_EXP 33
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: DIFF
13698: PPUSH
13699: LD_INT 26
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 72
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: ST_TO_ADDR
// if not un and Brown then
13718: LD_VAR 0 1
13722: NOT
13723: PUSH
13724: LD_EXP 26
13728: AND
13729: IFFALSE 13741
// un := Brown ;
13731: LD_ADDR_VAR 0 1
13735: PUSH
13736: LD_EXP 26
13740: ST_TO_ADDR
// if un then
13741: LD_VAR 0 1
13745: IFFALSE 13771
// begin Say ( un , D7-Sol1-1 ) ;
13747: LD_VAR 0 1
13751: PPUSH
13752: LD_STRING D7-Sol1-1
13754: PPUSH
13755: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13759: LD_EXP 20
13763: PPUSH
13764: LD_STRING D7-JMM-1
13766: PPUSH
13767: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13771: LD_EXP 45
13775: PPUSH
13776: LD_STRING D7-Ar1-1
13778: PPUSH
13779: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13783: LD_EXP 20
13787: PPUSH
13788: LD_STRING D7-JMM-2
13790: PPUSH
13791: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13795: LD_EXP 45
13799: PPUSH
13800: LD_STRING D7-Ar1-2
13802: PPUSH
13803: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13807: LD_EXP 20
13811: PPUSH
13812: LD_STRING D7-JMM-3
13814: PPUSH
13815: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13819: LD_EXP 45
13823: PPUSH
13824: LD_STRING D7-Ar1-3
13826: PPUSH
13827: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13831: LD_EXP 20
13835: PPUSH
13836: LD_STRING D7-JMM-4
13838: PPUSH
13839: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13843: LD_EXP 45
13847: PPUSH
13848: LD_STRING D7-Ar1-4
13850: PPUSH
13851: CALL_OW 94
// InGameOff ;
13855: CALL_OW 9
// DialogueOff ;
13859: CALL_OW 7
// case Query ( QCameras ) of 1 :
13863: LD_STRING QCameras
13865: PPUSH
13866: CALL_OW 97
13870: PUSH
13871: LD_INT 1
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 13882
13879: POP
// ; 2 :
13880: GO 13896
13882: LD_INT 2
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13895
13890: POP
// exit ; end ;
13891: GO 14477
13893: GO 13896
13895: POP
// ChangeMissionObjectives ( MCar ) ;
13896: LD_STRING MCar
13898: PPUSH
13899: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13903: LD_INT 124
13905: PPUSH
13906: LD_INT 90
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 6
13914: NEG
13915: PPUSH
13916: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13920: LD_INT 124
13922: PPUSH
13923: LD_INT 90
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13933: LD_INT 12
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 424
// wait ( 3 ) ;
13943: LD_INT 3
13945: PPUSH
13946: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13950: LD_INT 124
13952: PPUSH
13953: LD_INT 90
13955: PPUSH
13956: CALL_OW 86
// cargo := false ;
13960: LD_ADDR_VAR 0 3
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_INT 12
13982: PPUSH
13983: LD_INT 32
13985: PUSH
13986: LD_INT 3
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: LD_INT 32
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 58
14005: PUSH
14006: EMPTY
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 70
14018: ST_TO_ADDR
// until cargo ;
14019: LD_VAR 0 3
14023: IFFALSE 13968
// cargo := cargo [ 1 ] ;
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_VAR 0 3
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14039: LD_VAR 0 3
14043: PPUSH
14044: LD_INT 5
14046: PPUSH
14047: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14051: LD_INT 12
14053: PPUSH
14054: LD_INT 0
14056: PPUSH
14057: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14061: LD_EXP 45
14065: PPUSH
14066: LD_INT 11
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14076: LD_EXP 46
14080: PPUSH
14081: LD_INT 11
14083: PPUSH
14084: LD_INT 0
14086: PPUSH
14087: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14091: LD_EXP 45
14095: PUSH
14096: LD_EXP 46
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: LD_INT 12
14107: PPUSH
14108: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14112: LD_EXP 45
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14126: LD_EXP 45
14130: PUSH
14131: LD_EXP 46
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: LD_INT 209
14142: PPUSH
14143: LD_INT 178
14145: PPUSH
14146: CALL_OW 171
// while ( true ) do
14150: LD_INT 1
14152: IFFALSE 14306
// begin wait ( 0 0$1 ) ;
14154: LD_INT 35
14156: PPUSH
14157: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14161: LD_EXP 45
14165: PPUSH
14166: CALL_OW 314
14170: NOT
14171: PUSH
14172: LD_EXP 46
14176: PPUSH
14177: CALL_OW 314
14181: NOT
14182: OR
14183: IFFALSE 14209
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14185: LD_EXP 45
14189: PUSH
14190: LD_EXP 46
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PPUSH
14199: LD_INT 209
14201: PPUSH
14202: LD_INT 178
14204: PPUSH
14205: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14209: LD_EXP 45
14213: PPUSH
14214: LD_INT 10
14216: PPUSH
14217: CALL_OW 308
14221: IFFALSE 14232
// RemoveUnit ( ar_mechanic ) ;
14223: LD_EXP 45
14227: PPUSH
14228: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14232: LD_EXP 46
14236: PPUSH
14237: LD_INT 10
14239: PPUSH
14240: CALL_OW 308
14244: IFFALSE 14255
// RemoveUnit ( ar_mechanic_friend ) ;
14246: LD_EXP 46
14250: PPUSH
14251: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 10
14262: PPUSH
14263: CALL_OW 308
14267: IFFALSE 14278
// RemoveUnit ( cargo ) ;
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14278: LD_EXP 45
14282: PPUSH
14283: CALL_OW 300
14287: NOT
14288: PUSH
14289: LD_EXP 46
14293: PPUSH
14294: CALL_OW 300
14298: NOT
14299: AND
14300: IFFALSE 14304
// break ;
14302: GO 14306
// end ;
14304: GO 14150
// wait ( 0 0$2 ) ;
14306: LD_INT 70
14308: PPUSH
14309: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14313: LD_EXP 45
14317: PPUSH
14318: LD_STRING D7a-Ar1-1
14320: PPUSH
14321: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 129
14332: PUSH
14333: LD_INT 10
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 103
14342: PUSH
14343: LD_INT 6
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 148
14352: PUSH
14353: LD_INT 47
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 155
14362: PUSH
14363: LD_INT 16
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
// if Difficulty = 1 then
14376: LD_OWVAR 67
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: IFFALSE 14421
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14386: LD_ADDR_VAR 0 4
14390: PUSH
14391: LD_VAR 0 4
14395: PUSH
14396: LD_INT 78
14398: PUSH
14399: LD_INT 7
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 104
14408: PUSH
14409: LD_INT 43
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: ADD
14420: ST_TO_ADDR
// for i in tmp do
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 4
14430: PUSH
14431: FOR_IN
14432: IFFALSE 14465
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14434: LD_VAR 0 2
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 2
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: LD_INT 9
14457: NEG
14458: PPUSH
14459: CALL_OW 330
14463: GO 14431
14465: POP
14466: POP
// CenterOnXY ( 129 , 10 ) ;
14467: LD_INT 129
14469: PPUSH
14470: LD_INT 10
14472: PPUSH
14473: CALL_OW 84
// end ;
14477: PPOPN 4
14479: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14480: LD_EXP 15
14484: PUSH
14485: LD_INT 21000
14487: MINUS
14488: PUSH
14489: LD_OWVAR 1
14493: LESSEQUAL
14494: IFFALSE 14534
14496: GO 14498
14498: DISABLE
// begin powell_warn := true ;
14499: LD_ADDR_EXP 16
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// DialogueOn ;
14507: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14511: LD_EXP 29
14515: PPUSH
14516: LD_STRING D9-Pow-1
14518: PPUSH
14519: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14523: LD_INT 10
14525: PPUSH
14526: CALL_OW 68
// DialogueOff ;
14530: CALL_OW 7
// end ;
14534: END
// every 0 0$1 trigger game_time <= tick do
14535: LD_EXP 15
14539: PUSH
14540: LD_OWVAR 1
14544: LESSEQUAL
14545: IFFALSE 14584
14547: GO 14549
14549: DISABLE
// begin DialogueOn ;
14550: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14554: LD_EXP 29
14558: PPUSH
14559: LD_STRING D9a-Pow-1
14561: PPUSH
14562: CALL_OW 94
// dwait ( 0 0$2 ) ;
14566: LD_INT 70
14568: PPUSH
14569: CALL_OW 68
// DialogueOff ;
14573: CALL_OW 7
// YouLost ( Command ) ;
14577: LD_STRING Command
14579: PPUSH
14580: CALL_OW 104
// end ;
14584: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14585: LD_INT 22
14587: PUSH
14588: LD_INT 2
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 30
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PUSH
14614: LD_INT 0
14616: EQUAL
14617: PUSH
14618: LD_EXP 20
14622: PPUSH
14623: CALL_OW 302
14627: AND
14628: IFFALSE 15360
14630: GO 14632
14632: DISABLE
14633: LD_INT 0
14635: PPUSH
// begin if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14636: LD_OWVAR 1
14640: PUSH
14641: LD_INT 199500
14643: PUSH
14644: LD_INT 178500
14646: PUSH
14647: LD_INT 168000
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: LD_OWVAR 67
14659: ARRAY
14660: LESS
14661: IFFALSE 14675
// AddMedal ( Time1 , 1 ) else
14663: LD_STRING Time1
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 101
14673: GO 14706
// if not powell_warn then
14675: LD_EXP 16
14679: NOT
14680: IFFALSE 14695
// AddMedal ( Time1 , - 1 ) else
14682: LD_STRING Time1
14684: PPUSH
14685: LD_INT 1
14687: NEG
14688: PPUSH
14689: CALL_OW 101
14693: GO 14706
// AddMedal ( Time1 , - 2 ) ;
14695: LD_STRING Time1
14697: PPUSH
14698: LD_INT 2
14700: NEG
14701: PPUSH
14702: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14706: LD_EXP 17
14710: PUSH
14711: LD_INT 5
14713: PUSH
14714: LD_INT 4
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_OWVAR 67
14729: ARRAY
14730: GREATEREQUAL
14731: IFFALSE 14746
// AddMedal ( Destroy , - 2 ) else
14733: LD_STRING Destroy
14735: PPUSH
14736: LD_INT 2
14738: NEG
14739: PPUSH
14740: CALL_OW 101
14744: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14746: LD_INT 22
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 50
14768: PUSH
14769: EMPTY
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: PUSH
14782: LD_INT 25
14784: GREATEREQUAL
14785: IFFALSE 14800
// AddMedal ( Destroy , - 1 ) else
14787: LD_STRING Destroy
14789: PPUSH
14790: LD_INT 1
14792: NEG
14793: PPUSH
14794: CALL_OW 101
14798: GO 14863
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14800: LD_INT 22
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 50
14822: PUSH
14823: EMPTY
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: PUSH
14836: LD_INT 15
14838: GREATEREQUAL
14839: IFFALSE 14853
// AddMedal ( Destroy , 1 ) else
14841: LD_STRING Destroy
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: CALL_OW 101
14851: GO 14863
// AddMedal ( Destroy , 2 ) ;
14853: LD_STRING Destroy
14855: PPUSH
14856: LD_INT 2
14858: PPUSH
14859: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14863: LD_EXP 13
14867: PPUSH
14868: LD_STRING 11_artifact_captured
14870: PPUSH
14871: CALL_OW 39
// if artifact_get then
14875: LD_EXP 13
14879: IFFALSE 14893
// AddMedal ( Artefact , 1 ) else
14881: LD_STRING Artefact
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 101
14891: GO 14904
// AddMedal ( Artefact , - 1 ) ;
14893: LD_STRING Artefact
14895: PPUSH
14896: LD_INT 1
14898: NEG
14899: PPUSH
14900: CALL_OW 101
// GiveMedals ( MAIN ) ;
14904: LD_STRING MAIN
14906: PPUSH
14907: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14911: LD_ADDR_EXP 19
14915: PUSH
14916: LD_EXP 19
14920: PPUSH
14921: LD_INT 51
14923: PUSH
14924: EMPTY
14925: LIST
14926: PPUSH
14927: CALL_OW 72
14931: ST_TO_ADDR
// tmp := JMM ^ selected ;
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_EXP 20
14941: PUSH
14942: LD_EXP 19
14946: ADD
14947: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14957: LD_VAR 0 1
14961: PUSH
14962: LD_EXP 20
14966: PUSH
14967: LD_EXP 21
14971: PUSH
14972: LD_EXP 22
14976: PUSH
14977: LD_EXP 23
14981: PUSH
14982: LD_EXP 24
14986: PUSH
14987: LD_EXP 25
14991: PUSH
14992: LD_EXP 26
14996: PUSH
14997: LD_EXP 27
15001: PUSH
15002: LD_EXP 28
15006: PUSH
15007: LD_EXP 30
15011: PUSH
15012: LD_EXP 31
15016: PUSH
15017: LD_EXP 32
15021: PUSH
15022: LD_EXP 33
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: DIFF
15042: PPUSH
15043: LD_STRING 11c_others
15045: PPUSH
15046: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15050: LD_EXP 20
15054: PPUSH
15055: LD_EXP 3
15059: PUSH
15060: LD_STRING JMM
15062: STR
15063: PPUSH
15064: CALL_OW 38
// if Lisa then
15068: LD_EXP 21
15072: IFFALSE 15092
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15074: LD_EXP 21
15078: PPUSH
15079: LD_EXP 3
15083: PUSH
15084: LD_STRING Lisa
15086: STR
15087: PPUSH
15088: CALL_OW 38
// if Donaldson then
15092: LD_EXP 22
15096: IFFALSE 15116
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15098: LD_EXP 22
15102: PPUSH
15103: LD_EXP 3
15107: PUSH
15108: LD_STRING Donaldson
15110: STR
15111: PPUSH
15112: CALL_OW 38
// if Bobby then
15116: LD_EXP 23
15120: IFFALSE 15140
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15122: LD_EXP 23
15126: PPUSH
15127: LD_EXP 3
15131: PUSH
15132: LD_STRING Bobby
15134: STR
15135: PPUSH
15136: CALL_OW 38
// if Cyrus then
15140: LD_EXP 24
15144: IFFALSE 15164
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15146: LD_EXP 24
15150: PPUSH
15151: LD_EXP 3
15155: PUSH
15156: LD_STRING Cyrus
15158: STR
15159: PPUSH
15160: CALL_OW 38
// if Denis then
15164: LD_EXP 25
15168: IFFALSE 15188
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15170: LD_EXP 25
15174: PPUSH
15175: LD_EXP 3
15179: PUSH
15180: LD_STRING Denis
15182: STR
15183: PPUSH
15184: CALL_OW 38
// if Brown then
15188: LD_EXP 26
15192: IFFALSE 15212
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15194: LD_EXP 26
15198: PPUSH
15199: LD_EXP 3
15203: PUSH
15204: LD_STRING Brown
15206: STR
15207: PPUSH
15208: CALL_OW 38
// if Gladstone then
15212: LD_EXP 27
15216: IFFALSE 15236
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15218: LD_EXP 27
15222: PPUSH
15223: LD_EXP 3
15227: PUSH
15228: LD_STRING Gladstone
15230: STR
15231: PPUSH
15232: CALL_OW 38
// if Houten then
15236: LD_EXP 28
15240: IFFALSE 15260
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15242: LD_EXP 28
15246: PPUSH
15247: LD_EXP 3
15251: PUSH
15252: LD_STRING Houten
15254: STR
15255: PPUSH
15256: CALL_OW 38
// if Cornel then
15260: LD_EXP 30
15264: IFFALSE 15284
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15266: LD_EXP 30
15270: PPUSH
15271: LD_EXP 3
15275: PUSH
15276: LD_STRING Cornell
15278: STR
15279: PPUSH
15280: CALL_OW 38
// if Gary then
15284: LD_EXP 31
15288: IFFALSE 15308
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15290: LD_EXP 31
15294: PPUSH
15295: LD_EXP 3
15299: PUSH
15300: LD_STRING Gary
15302: STR
15303: PPUSH
15304: CALL_OW 38
// if Frank then
15308: LD_EXP 32
15312: IFFALSE 15332
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15314: LD_EXP 32
15318: PPUSH
15319: LD_EXP 3
15323: PUSH
15324: LD_STRING Frank
15326: STR
15327: PPUSH
15328: CALL_OW 38
// if Kikuchi then
15332: LD_EXP 33
15336: IFFALSE 15356
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15338: LD_EXP 33
15342: PPUSH
15343: LD_EXP 3
15347: PUSH
15348: LD_STRING Kikuchi
15350: STR
15351: PPUSH
15352: CALL_OW 38
// YouWin ;
15356: CALL_OW 103
// end ;
15360: PPOPN 1
15362: END
// export function CanSayRand ( side ) ; begin
15363: LD_INT 0
15365: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15366: LD_ADDR_VAR 0 2
15370: PUSH
15371: LD_INT 52
15373: PUSH
15374: EMPTY
15375: LIST
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 1
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 25
15414: PUSH
15415: LD_INT 3
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 25
15424: PUSH
15425: LD_INT 4
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: PUSH
15449: LD_EXP 20
15453: PUSH
15454: LD_EXP 32
15458: PUSH
15459: LD_EXP 21
15463: PUSH
15464: LD_EXP 22
15468: PUSH
15469: LD_EXP 23
15473: PUSH
15474: LD_EXP 24
15478: PUSH
15479: LD_EXP 25
15483: PUSH
15484: LD_EXP 26
15488: PUSH
15489: LD_EXP 27
15493: PUSH
15494: LD_EXP 28
15498: PUSH
15499: LD_EXP 29
15503: PUSH
15504: LD_EXP 30
15508: PUSH
15509: LD_EXP 31
15513: PUSH
15514: LD_EXP 33
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: DIFF
15535: ST_TO_ADDR
// end ;
15536: LD_VAR 0 2
15540: RET
// export function SayRand ( sex , dial ) ; begin
15541: LD_INT 0
15543: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15544: LD_ADDR_VAR 0 3
15548: PUSH
15549: LD_INT 52
15551: PUSH
15552: EMPTY
15553: LIST
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 26
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 25
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 25
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 25
15612: PUSH
15613: LD_INT 4
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: LD_EXP 20
15642: PUSH
15643: LD_EXP 32
15647: PUSH
15648: LD_EXP 21
15652: PUSH
15653: LD_EXP 22
15657: PUSH
15658: LD_EXP 23
15662: PUSH
15663: LD_EXP 24
15667: PUSH
15668: LD_EXP 25
15672: PUSH
15673: LD_EXP 26
15677: PUSH
15678: LD_EXP 27
15682: PUSH
15683: LD_EXP 28
15687: PUSH
15688: LD_EXP 29
15692: PUSH
15693: LD_EXP 30
15697: PUSH
15698: LD_EXP 31
15702: PUSH
15703: LD_EXP 33
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: DIFF
15724: ST_TO_ADDR
// if not result then
15725: LD_VAR 0 3
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15762
// result := result [ 1 ] ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: ST_TO_ADDR
// Say ( result , dial ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: CALL_OW 88
// end ;
15762: LD_VAR 0 3
15766: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15767: LD_INT 0
15769: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15770: LD_ADDR_VAR 0 4
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 26
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 2
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 69
15856: PUSH
15857: LD_EXP 20
15861: PUSH
15862: LD_EXP 32
15866: PUSH
15867: LD_EXP 21
15871: PUSH
15872: LD_EXP 22
15876: PUSH
15877: LD_EXP 23
15881: PUSH
15882: LD_EXP 24
15886: PUSH
15887: LD_EXP 25
15891: PUSH
15892: LD_EXP 26
15896: PUSH
15897: LD_EXP 27
15901: PUSH
15902: LD_EXP 28
15906: PUSH
15907: LD_EXP 29
15911: PUSH
15912: LD_EXP 30
15916: PUSH
15917: LD_EXP 31
15921: PUSH
15922: LD_EXP 33
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: PUSH
15943: LD_VAR 0 3
15947: ADD
15948: DIFF
15949: ST_TO_ADDR
// if not result then
15950: LD_VAR 0 4
15954: NOT
15955: IFFALSE 15959
// exit ;
15957: GO 15987
// result := result [ 1 ] ;
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 4
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: ST_TO_ADDR
// Say ( result , dial ) ;
15973: LD_VAR 0 4
15977: PPUSH
15978: LD_VAR 0 2
15982: PPUSH
15983: CALL_OW 88
// end ; end_of_file
15987: LD_VAR 0 4
15991: RET
// export function CustomEvent ( event ) ; begin
15992: LD_INT 0
15994: PPUSH
// end ;
15995: LD_VAR 0 2
15999: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 255
16009: PUSH
16010: LD_INT 1
16012: EQUAL
16013: IFFALSE 16023
// artifact_get := true ;
16015: LD_ADDR_EXP 13
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 2
16035: EQUAL
16036: IFFALSE 16054
// begin artifact_get := false ;
16038: LD_ADDR_EXP 13
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
// artifact_stolen := true ;
16046: LD_ADDR_EXP 12
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16054: LD_ADDR_EXP 14
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// end ;
16062: PPOPN 2
16064: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16065: LD_ADDR_EXP 14
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// end ;
16073: PPOPN 2
16075: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16076: LD_VAR 0 1
16080: PUSH
16081: LD_EXP 20
16085: EQUAL
16086: IFFALSE 16097
// begin YouLost ( JMM ) ;
16088: LD_STRING JMM
16090: PPUSH
16091: CALL_OW 104
// exit ;
16095: GO 16229
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16097: LD_VAR 0 1
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: LD_INT 25
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 25
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 25
16147: PUSH
16148: LD_INT 3
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 25
16157: PUSH
16158: LD_INT 4
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 25
16177: PUSH
16178: LD_INT 8
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: IN
16204: IFFALSE 16220
// loses_counter := loses_counter + 1 ;
16206: LD_ADDR_EXP 17
16210: PUSH
16211: LD_EXP 17
16215: PUSH
16216: LD_INT 1
16218: PLUS
16219: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL 43253 0 1
// end ;
16229: PPOPN 1
16231: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_VAR 0 2
16241: PPUSH
16242: CALL 45308 0 2
// end ;
16246: PPOPN 2
16248: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL 44617 0 1
// end ;
16258: PPOPN 1
16260: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16261: LD_VAR 0 1
16265: PPUSH
16266: LD_VAR 0 2
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_VAR 0 4
16280: PPUSH
16281: LD_VAR 0 5
16285: PPUSH
16286: CALL 42569 0 5
// end ;
16290: PPOPN 5
16292: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16293: LD_VAR 0 1
16297: PPUSH
16298: LD_VAR 0 2
16302: PPUSH
16303: CALL 42165 0 2
// end ;
16307: PPOPN 2
16309: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 247
16319: PUSH
16320: LD_INT 2
16322: EQUAL
16323: IFFALSE 16327
// exit ;
16325: GO 16344
// if not kamikazed then
16327: LD_EXP 11
16331: NOT
16332: IFFALSE 16344
// kamikazed := unit ;
16334: LD_ADDR_EXP 11
16338: PUSH
16339: LD_VAR 0 1
16343: ST_TO_ADDR
// end ;
16344: PPOPN 1
16346: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16347: LD_INT 0
16349: PPUSH
16350: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: CALL 42003 0 4
// end ;
16375: PPOPN 6
16377: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_VAR 0 2
16387: PPUSH
16388: LD_VAR 0 3
16392: PPUSH
16393: CALL 41778 0 3
// end ;
16397: PPOPN 3
16399: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_VAR 0 2
16409: PPUSH
16410: CALL 42949 0 2
// end ;
16414: PPOPN 2
16416: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL 41472 0 2
// end ;
16431: PPOPN 2
16433: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16434: LD_VAR 0 1
16438: PPUSH
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL 41663 0 2
// end ;
16448: PPOPN 2
16450: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL 44376 0 1
// end ;
16460: PPOPN 1
16462: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL 45569 0 2
// end ;
16477: PPOPN 2
16479: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_VAR 0 4
16499: PPUSH
16500: CALL 45785 0 4
// end ;
16504: PPOPN 4
16506: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL 88633 0 1
// end ; end_of_file
16516: PPOPN 1
16518: END
// every 0 0$1 trigger game do
16519: LD_EXP 2
16523: IFFALSE 16553
16525: GO 16527
16527: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16528: LD_INT 7
16530: PUSH
16531: LD_INT 6
16533: PUSH
16534: LD_INT 4
16536: PUSH
16537: LD_INT 6
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: PPUSH
16546: LD_INT 1750
16548: PPUSH
16549: CALL 16554 0 2
16553: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
16558: PPUSH
// if not areas then
16559: LD_VAR 0 1
16563: NOT
16564: IFFALSE 16568
// exit ;
16566: GO 16698
// repeat wait ( time ) ;
16568: LD_VAR 0 2
16572: PPUSH
16573: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16577: LD_ADDR_VAR 0 5
16581: PUSH
16582: LD_INT 1
16584: PPUSH
16585: LD_INT 90
16587: PPUSH
16588: CALL_OW 12
16592: ST_TO_ADDR
// for i in areas do
16593: LD_ADDR_VAR 0 4
16597: PUSH
16598: LD_VAR 0 1
16602: PUSH
16603: FOR_IN
16604: IFFALSE 16657
// begin if Prob ( p ) then
16606: LD_VAR 0 5
16610: PPUSH
16611: CALL_OW 13
16615: IFFALSE 16655
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16617: LD_INT 1
16619: PPUSH
16620: LD_INT 5
16622: PPUSH
16623: CALL_OW 12
16627: PPUSH
16628: LD_VAR 0 4
16632: PPUSH
16633: LD_INT 1
16635: PPUSH
16636: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16640: LD_INT 385
16642: PPUSH
16643: LD_INT 595
16645: PPUSH
16646: CALL_OW 12
16650: PPUSH
16651: CALL_OW 67
// end ; end ;
16655: GO 16603
16657: POP
16658: POP
// time := time + 0 0$3 ;
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_VAR 0 2
16668: PUSH
16669: LD_INT 105
16671: PLUS
16672: ST_TO_ADDR
// if time > 7 7$00 then
16673: LD_VAR 0 2
16677: PUSH
16678: LD_INT 14700
16680: GREATER
16681: IFFALSE 16691
// time := 0 0$40 ;
16683: LD_ADDR_VAR 0 2
16687: PUSH
16688: LD_INT 1400
16690: ST_TO_ADDR
// until not game ;
16691: LD_EXP 2
16695: NOT
16696: IFFALSE 16568
// end ; end_of_file
16698: LD_VAR 0 3
16702: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16703: LD_INT 0
16705: PPUSH
16706: PPUSH
// skirmish := false ;
16707: LD_ADDR_EXP 47
16711: PUSH
16712: LD_INT 0
16714: ST_TO_ADDR
// debug_mc := false ;
16715: LD_ADDR_EXP 48
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// mc_bases := [ ] ;
16723: LD_ADDR_EXP 49
16727: PUSH
16728: EMPTY
16729: ST_TO_ADDR
// mc_sides := [ ] ;
16730: LD_ADDR_EXP 75
16734: PUSH
16735: EMPTY
16736: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16737: LD_ADDR_EXP 50
16741: PUSH
16742: EMPTY
16743: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16744: LD_ADDR_EXP 51
16748: PUSH
16749: EMPTY
16750: ST_TO_ADDR
// mc_need_heal := [ ] ;
16751: LD_ADDR_EXP 52
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// mc_healers := [ ] ;
16758: LD_ADDR_EXP 53
16762: PUSH
16763: EMPTY
16764: ST_TO_ADDR
// mc_build_list := [ ] ;
16765: LD_ADDR_EXP 54
16769: PUSH
16770: EMPTY
16771: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16772: LD_ADDR_EXP 81
16776: PUSH
16777: EMPTY
16778: ST_TO_ADDR
// mc_builders := [ ] ;
16779: LD_ADDR_EXP 55
16783: PUSH
16784: EMPTY
16785: ST_TO_ADDR
// mc_construct_list := [ ] ;
16786: LD_ADDR_EXP 56
16790: PUSH
16791: EMPTY
16792: ST_TO_ADDR
// mc_turret_list := [ ] ;
16793: LD_ADDR_EXP 57
16797: PUSH
16798: EMPTY
16799: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16800: LD_ADDR_EXP 58
16804: PUSH
16805: EMPTY
16806: ST_TO_ADDR
// mc_miners := [ ] ;
16807: LD_ADDR_EXP 63
16811: PUSH
16812: EMPTY
16813: ST_TO_ADDR
// mc_mines := [ ] ;
16814: LD_ADDR_EXP 62
16818: PUSH
16819: EMPTY
16820: ST_TO_ADDR
// mc_minefields := [ ] ;
16821: LD_ADDR_EXP 64
16825: PUSH
16826: EMPTY
16827: ST_TO_ADDR
// mc_crates := [ ] ;
16828: LD_ADDR_EXP 65
16832: PUSH
16833: EMPTY
16834: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16835: LD_ADDR_EXP 66
16839: PUSH
16840: EMPTY
16841: ST_TO_ADDR
// mc_crates_area := [ ] ;
16842: LD_ADDR_EXP 67
16846: PUSH
16847: EMPTY
16848: ST_TO_ADDR
// mc_vehicles := [ ] ;
16849: LD_ADDR_EXP 68
16853: PUSH
16854: EMPTY
16855: ST_TO_ADDR
// mc_attack := [ ] ;
16856: LD_ADDR_EXP 69
16860: PUSH
16861: EMPTY
16862: ST_TO_ADDR
// mc_produce := [ ] ;
16863: LD_ADDR_EXP 70
16867: PUSH
16868: EMPTY
16869: ST_TO_ADDR
// mc_defender := [ ] ;
16870: LD_ADDR_EXP 71
16874: PUSH
16875: EMPTY
16876: ST_TO_ADDR
// mc_parking := [ ] ;
16877: LD_ADDR_EXP 73
16881: PUSH
16882: EMPTY
16883: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16884: LD_ADDR_EXP 59
16888: PUSH
16889: EMPTY
16890: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16891: LD_ADDR_EXP 61
16895: PUSH
16896: EMPTY
16897: ST_TO_ADDR
// mc_scan := [ ] ;
16898: LD_ADDR_EXP 72
16902: PUSH
16903: EMPTY
16904: ST_TO_ADDR
// mc_scan_area := [ ] ;
16905: LD_ADDR_EXP 74
16909: PUSH
16910: EMPTY
16911: ST_TO_ADDR
// mc_tech := [ ] ;
16912: LD_ADDR_EXP 76
16916: PUSH
16917: EMPTY
16918: ST_TO_ADDR
// mc_class := [ ] ;
16919: LD_ADDR_EXP 90
16923: PUSH
16924: EMPTY
16925: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16926: LD_ADDR_EXP 91
16930: PUSH
16931: EMPTY
16932: ST_TO_ADDR
// end ;
16933: LD_VAR 0 1
16937: RET
// export function MC_Kill ( base ) ; begin
16938: LD_INT 0
16940: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16941: LD_ADDR_EXP 49
16945: PUSH
16946: LD_EXP 49
16950: PPUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: EMPTY
16957: PPUSH
16958: CALL_OW 1
16962: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16963: LD_ADDR_EXP 50
16967: PUSH
16968: LD_EXP 50
16972: PPUSH
16973: LD_VAR 0 1
16977: PPUSH
16978: EMPTY
16979: PPUSH
16980: CALL_OW 1
16984: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16985: LD_ADDR_EXP 51
16989: PUSH
16990: LD_EXP 51
16994: PPUSH
16995: LD_VAR 0 1
16999: PPUSH
17000: EMPTY
17001: PPUSH
17002: CALL_OW 1
17006: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17007: LD_ADDR_EXP 52
17011: PUSH
17012: LD_EXP 52
17016: PPUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: EMPTY
17023: PPUSH
17024: CALL_OW 1
17028: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17029: LD_ADDR_EXP 53
17033: PUSH
17034: LD_EXP 53
17038: PPUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: EMPTY
17045: PPUSH
17046: CALL_OW 1
17050: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17051: LD_ADDR_EXP 54
17055: PUSH
17056: LD_EXP 54
17060: PPUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: EMPTY
17067: PPUSH
17068: CALL_OW 1
17072: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17073: LD_ADDR_EXP 55
17077: PUSH
17078: LD_EXP 55
17082: PPUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: EMPTY
17089: PPUSH
17090: CALL_OW 1
17094: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17095: LD_ADDR_EXP 56
17099: PUSH
17100: LD_EXP 56
17104: PPUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: EMPTY
17111: PPUSH
17112: CALL_OW 1
17116: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17117: LD_ADDR_EXP 57
17121: PUSH
17122: LD_EXP 57
17126: PPUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: EMPTY
17133: PPUSH
17134: CALL_OW 1
17138: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17139: LD_ADDR_EXP 58
17143: PUSH
17144: LD_EXP 58
17148: PPUSH
17149: LD_VAR 0 1
17153: PPUSH
17154: EMPTY
17155: PPUSH
17156: CALL_OW 1
17160: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17161: LD_ADDR_EXP 59
17165: PUSH
17166: LD_EXP 59
17170: PPUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: EMPTY
17177: PPUSH
17178: CALL_OW 1
17182: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17183: LD_ADDR_EXP 60
17187: PUSH
17188: LD_EXP 60
17192: PPUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: LD_INT 0
17200: PPUSH
17201: CALL_OW 1
17205: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17206: LD_ADDR_EXP 61
17210: PUSH
17211: LD_EXP 61
17215: PPUSH
17216: LD_VAR 0 1
17220: PPUSH
17221: EMPTY
17222: PPUSH
17223: CALL_OW 1
17227: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17228: LD_ADDR_EXP 62
17232: PUSH
17233: LD_EXP 62
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: EMPTY
17244: PPUSH
17245: CALL_OW 1
17249: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17250: LD_ADDR_EXP 63
17254: PUSH
17255: LD_EXP 63
17259: PPUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: EMPTY
17266: PPUSH
17267: CALL_OW 1
17271: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17272: LD_ADDR_EXP 64
17276: PUSH
17277: LD_EXP 64
17281: PPUSH
17282: LD_VAR 0 1
17286: PPUSH
17287: EMPTY
17288: PPUSH
17289: CALL_OW 1
17293: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17294: LD_ADDR_EXP 65
17298: PUSH
17299: LD_EXP 65
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: EMPTY
17310: PPUSH
17311: CALL_OW 1
17315: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17316: LD_ADDR_EXP 66
17320: PUSH
17321: LD_EXP 66
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: EMPTY
17332: PPUSH
17333: CALL_OW 1
17337: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17338: LD_ADDR_EXP 67
17342: PUSH
17343: LD_EXP 67
17347: PPUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: EMPTY
17354: PPUSH
17355: CALL_OW 1
17359: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17360: LD_ADDR_EXP 68
17364: PUSH
17365: LD_EXP 68
17369: PPUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: EMPTY
17376: PPUSH
17377: CALL_OW 1
17381: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17382: LD_ADDR_EXP 69
17386: PUSH
17387: LD_EXP 69
17391: PPUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: EMPTY
17398: PPUSH
17399: CALL_OW 1
17403: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17404: LD_ADDR_EXP 70
17408: PUSH
17409: LD_EXP 70
17413: PPUSH
17414: LD_VAR 0 1
17418: PPUSH
17419: EMPTY
17420: PPUSH
17421: CALL_OW 1
17425: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17426: LD_ADDR_EXP 71
17430: PUSH
17431: LD_EXP 71
17435: PPUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: EMPTY
17442: PPUSH
17443: CALL_OW 1
17447: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17448: LD_ADDR_EXP 72
17452: PUSH
17453: LD_EXP 72
17457: PPUSH
17458: LD_VAR 0 1
17462: PPUSH
17463: EMPTY
17464: PPUSH
17465: CALL_OW 1
17469: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17470: LD_ADDR_EXP 73
17474: PUSH
17475: LD_EXP 73
17479: PPUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: EMPTY
17486: PPUSH
17487: CALL_OW 1
17491: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17492: LD_ADDR_EXP 74
17496: PUSH
17497: LD_EXP 74
17501: PPUSH
17502: LD_VAR 0 1
17506: PPUSH
17507: EMPTY
17508: PPUSH
17509: CALL_OW 1
17513: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17514: LD_ADDR_EXP 76
17518: PUSH
17519: LD_EXP 76
17523: PPUSH
17524: LD_VAR 0 1
17528: PPUSH
17529: EMPTY
17530: PPUSH
17531: CALL_OW 1
17535: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17536: LD_ADDR_EXP 78
17540: PUSH
17541: LD_EXP 78
17545: PPUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: EMPTY
17552: PPUSH
17553: CALL_OW 1
17557: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17558: LD_ADDR_EXP 79
17562: PUSH
17563: LD_EXP 79
17567: PPUSH
17568: LD_VAR 0 1
17572: PPUSH
17573: EMPTY
17574: PPUSH
17575: CALL_OW 1
17579: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17580: LD_ADDR_EXP 80
17584: PUSH
17585: LD_EXP 80
17589: PPUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: EMPTY
17596: PPUSH
17597: CALL_OW 1
17601: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17602: LD_ADDR_EXP 81
17606: PUSH
17607: LD_EXP 81
17611: PPUSH
17612: LD_VAR 0 1
17616: PPUSH
17617: EMPTY
17618: PPUSH
17619: CALL_OW 1
17623: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17624: LD_ADDR_EXP 82
17628: PUSH
17629: LD_EXP 82
17633: PPUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: EMPTY
17640: PPUSH
17641: CALL_OW 1
17645: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17646: LD_ADDR_EXP 83
17650: PUSH
17651: LD_EXP 83
17655: PPUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: EMPTY
17662: PPUSH
17663: CALL_OW 1
17667: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17668: LD_ADDR_EXP 84
17672: PUSH
17673: LD_EXP 84
17677: PPUSH
17678: LD_VAR 0 1
17682: PPUSH
17683: EMPTY
17684: PPUSH
17685: CALL_OW 1
17689: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17690: LD_ADDR_EXP 85
17694: PUSH
17695: LD_EXP 85
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: EMPTY
17706: PPUSH
17707: CALL_OW 1
17711: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17712: LD_ADDR_EXP 86
17716: PUSH
17717: LD_EXP 86
17721: PPUSH
17722: LD_VAR 0 1
17726: PPUSH
17727: EMPTY
17728: PPUSH
17729: CALL_OW 1
17733: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17734: LD_ADDR_EXP 87
17738: PUSH
17739: LD_EXP 87
17743: PPUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: EMPTY
17750: PPUSH
17751: CALL_OW 1
17755: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17756: LD_ADDR_EXP 88
17760: PUSH
17761: LD_EXP 88
17765: PPUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: EMPTY
17772: PPUSH
17773: CALL_OW 1
17777: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17778: LD_ADDR_EXP 89
17782: PUSH
17783: LD_EXP 89
17787: PPUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: EMPTY
17794: PPUSH
17795: CALL_OW 1
17799: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17800: LD_ADDR_EXP 90
17804: PUSH
17805: LD_EXP 90
17809: PPUSH
17810: LD_VAR 0 1
17814: PPUSH
17815: EMPTY
17816: PPUSH
17817: CALL_OW 1
17821: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17822: LD_ADDR_EXP 91
17826: PUSH
17827: LD_EXP 91
17831: PPUSH
17832: LD_VAR 0 1
17836: PPUSH
17837: LD_INT 0
17839: PPUSH
17840: CALL_OW 1
17844: ST_TO_ADDR
// end ;
17845: LD_VAR 0 2
17849: RET
// export function MC_Add ( side , units ) ; var base ; begin
17850: LD_INT 0
17852: PPUSH
17853: PPUSH
// base := mc_bases + 1 ;
17854: LD_ADDR_VAR 0 4
17858: PUSH
17859: LD_EXP 49
17863: PUSH
17864: LD_INT 1
17866: PLUS
17867: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
17868: LD_ADDR_EXP 75
17872: PUSH
17873: LD_EXP 75
17877: PPUSH
17878: LD_VAR 0 4
17882: PPUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 1
17892: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
17893: LD_ADDR_EXP 49
17897: PUSH
17898: LD_EXP 49
17902: PPUSH
17903: LD_VAR 0 4
17907: PPUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: CALL_OW 1
17917: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17918: LD_ADDR_EXP 50
17922: PUSH
17923: LD_EXP 50
17927: PPUSH
17928: LD_VAR 0 4
17932: PPUSH
17933: EMPTY
17934: PPUSH
17935: CALL_OW 1
17939: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17940: LD_ADDR_EXP 51
17944: PUSH
17945: LD_EXP 51
17949: PPUSH
17950: LD_VAR 0 4
17954: PPUSH
17955: EMPTY
17956: PPUSH
17957: CALL_OW 1
17961: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17962: LD_ADDR_EXP 52
17966: PUSH
17967: LD_EXP 52
17971: PPUSH
17972: LD_VAR 0 4
17976: PPUSH
17977: EMPTY
17978: PPUSH
17979: CALL_OW 1
17983: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17984: LD_ADDR_EXP 53
17988: PUSH
17989: LD_EXP 53
17993: PPUSH
17994: LD_VAR 0 4
17998: PPUSH
17999: EMPTY
18000: PPUSH
18001: CALL_OW 1
18005: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18006: LD_ADDR_EXP 54
18010: PUSH
18011: LD_EXP 54
18015: PPUSH
18016: LD_VAR 0 4
18020: PPUSH
18021: EMPTY
18022: PPUSH
18023: CALL_OW 1
18027: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18028: LD_ADDR_EXP 55
18032: PUSH
18033: LD_EXP 55
18037: PPUSH
18038: LD_VAR 0 4
18042: PPUSH
18043: EMPTY
18044: PPUSH
18045: CALL_OW 1
18049: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18050: LD_ADDR_EXP 56
18054: PUSH
18055: LD_EXP 56
18059: PPUSH
18060: LD_VAR 0 4
18064: PPUSH
18065: EMPTY
18066: PPUSH
18067: CALL_OW 1
18071: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18072: LD_ADDR_EXP 57
18076: PUSH
18077: LD_EXP 57
18081: PPUSH
18082: LD_VAR 0 4
18086: PPUSH
18087: EMPTY
18088: PPUSH
18089: CALL_OW 1
18093: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18094: LD_ADDR_EXP 58
18098: PUSH
18099: LD_EXP 58
18103: PPUSH
18104: LD_VAR 0 4
18108: PPUSH
18109: EMPTY
18110: PPUSH
18111: CALL_OW 1
18115: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18116: LD_ADDR_EXP 59
18120: PUSH
18121: LD_EXP 59
18125: PPUSH
18126: LD_VAR 0 4
18130: PPUSH
18131: EMPTY
18132: PPUSH
18133: CALL_OW 1
18137: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18138: LD_ADDR_EXP 60
18142: PUSH
18143: LD_EXP 60
18147: PPUSH
18148: LD_VAR 0 4
18152: PPUSH
18153: LD_INT 0
18155: PPUSH
18156: CALL_OW 1
18160: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18161: LD_ADDR_EXP 61
18165: PUSH
18166: LD_EXP 61
18170: PPUSH
18171: LD_VAR 0 4
18175: PPUSH
18176: EMPTY
18177: PPUSH
18178: CALL_OW 1
18182: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18183: LD_ADDR_EXP 62
18187: PUSH
18188: LD_EXP 62
18192: PPUSH
18193: LD_VAR 0 4
18197: PPUSH
18198: EMPTY
18199: PPUSH
18200: CALL_OW 1
18204: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18205: LD_ADDR_EXP 63
18209: PUSH
18210: LD_EXP 63
18214: PPUSH
18215: LD_VAR 0 4
18219: PPUSH
18220: EMPTY
18221: PPUSH
18222: CALL_OW 1
18226: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18227: LD_ADDR_EXP 64
18231: PUSH
18232: LD_EXP 64
18236: PPUSH
18237: LD_VAR 0 4
18241: PPUSH
18242: EMPTY
18243: PPUSH
18244: CALL_OW 1
18248: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18249: LD_ADDR_EXP 65
18253: PUSH
18254: LD_EXP 65
18258: PPUSH
18259: LD_VAR 0 4
18263: PPUSH
18264: EMPTY
18265: PPUSH
18266: CALL_OW 1
18270: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18271: LD_ADDR_EXP 66
18275: PUSH
18276: LD_EXP 66
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: EMPTY
18287: PPUSH
18288: CALL_OW 1
18292: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18293: LD_ADDR_EXP 67
18297: PUSH
18298: LD_EXP 67
18302: PPUSH
18303: LD_VAR 0 4
18307: PPUSH
18308: EMPTY
18309: PPUSH
18310: CALL_OW 1
18314: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18315: LD_ADDR_EXP 68
18319: PUSH
18320: LD_EXP 68
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: EMPTY
18331: PPUSH
18332: CALL_OW 1
18336: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18337: LD_ADDR_EXP 69
18341: PUSH
18342: LD_EXP 69
18346: PPUSH
18347: LD_VAR 0 4
18351: PPUSH
18352: EMPTY
18353: PPUSH
18354: CALL_OW 1
18358: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18359: LD_ADDR_EXP 70
18363: PUSH
18364: LD_EXP 70
18368: PPUSH
18369: LD_VAR 0 4
18373: PPUSH
18374: EMPTY
18375: PPUSH
18376: CALL_OW 1
18380: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18381: LD_ADDR_EXP 71
18385: PUSH
18386: LD_EXP 71
18390: PPUSH
18391: LD_VAR 0 4
18395: PPUSH
18396: EMPTY
18397: PPUSH
18398: CALL_OW 1
18402: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18403: LD_ADDR_EXP 72
18407: PUSH
18408: LD_EXP 72
18412: PPUSH
18413: LD_VAR 0 4
18417: PPUSH
18418: EMPTY
18419: PPUSH
18420: CALL_OW 1
18424: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18425: LD_ADDR_EXP 73
18429: PUSH
18430: LD_EXP 73
18434: PPUSH
18435: LD_VAR 0 4
18439: PPUSH
18440: EMPTY
18441: PPUSH
18442: CALL_OW 1
18446: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18447: LD_ADDR_EXP 74
18451: PUSH
18452: LD_EXP 74
18456: PPUSH
18457: LD_VAR 0 4
18461: PPUSH
18462: EMPTY
18463: PPUSH
18464: CALL_OW 1
18468: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18469: LD_ADDR_EXP 76
18473: PUSH
18474: LD_EXP 76
18478: PPUSH
18479: LD_VAR 0 4
18483: PPUSH
18484: EMPTY
18485: PPUSH
18486: CALL_OW 1
18490: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18491: LD_ADDR_EXP 78
18495: PUSH
18496: LD_EXP 78
18500: PPUSH
18501: LD_VAR 0 4
18505: PPUSH
18506: EMPTY
18507: PPUSH
18508: CALL_OW 1
18512: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18513: LD_ADDR_EXP 79
18517: PUSH
18518: LD_EXP 79
18522: PPUSH
18523: LD_VAR 0 4
18527: PPUSH
18528: EMPTY
18529: PPUSH
18530: CALL_OW 1
18534: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18535: LD_ADDR_EXP 80
18539: PUSH
18540: LD_EXP 80
18544: PPUSH
18545: LD_VAR 0 4
18549: PPUSH
18550: EMPTY
18551: PPUSH
18552: CALL_OW 1
18556: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18557: LD_ADDR_EXP 81
18561: PUSH
18562: LD_EXP 81
18566: PPUSH
18567: LD_VAR 0 4
18571: PPUSH
18572: EMPTY
18573: PPUSH
18574: CALL_OW 1
18578: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18579: LD_ADDR_EXP 82
18583: PUSH
18584: LD_EXP 82
18588: PPUSH
18589: LD_VAR 0 4
18593: PPUSH
18594: EMPTY
18595: PPUSH
18596: CALL_OW 1
18600: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18601: LD_ADDR_EXP 83
18605: PUSH
18606: LD_EXP 83
18610: PPUSH
18611: LD_VAR 0 4
18615: PPUSH
18616: EMPTY
18617: PPUSH
18618: CALL_OW 1
18622: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18623: LD_ADDR_EXP 84
18627: PUSH
18628: LD_EXP 84
18632: PPUSH
18633: LD_VAR 0 4
18637: PPUSH
18638: EMPTY
18639: PPUSH
18640: CALL_OW 1
18644: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18645: LD_ADDR_EXP 85
18649: PUSH
18650: LD_EXP 85
18654: PPUSH
18655: LD_VAR 0 4
18659: PPUSH
18660: EMPTY
18661: PPUSH
18662: CALL_OW 1
18666: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18667: LD_ADDR_EXP 86
18671: PUSH
18672: LD_EXP 86
18676: PPUSH
18677: LD_VAR 0 4
18681: PPUSH
18682: EMPTY
18683: PPUSH
18684: CALL_OW 1
18688: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18689: LD_ADDR_EXP 87
18693: PUSH
18694: LD_EXP 87
18698: PPUSH
18699: LD_VAR 0 4
18703: PPUSH
18704: EMPTY
18705: PPUSH
18706: CALL_OW 1
18710: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18711: LD_ADDR_EXP 88
18715: PUSH
18716: LD_EXP 88
18720: PPUSH
18721: LD_VAR 0 4
18725: PPUSH
18726: EMPTY
18727: PPUSH
18728: CALL_OW 1
18732: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18733: LD_ADDR_EXP 89
18737: PUSH
18738: LD_EXP 89
18742: PPUSH
18743: LD_VAR 0 4
18747: PPUSH
18748: EMPTY
18749: PPUSH
18750: CALL_OW 1
18754: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18755: LD_ADDR_EXP 90
18759: PUSH
18760: LD_EXP 90
18764: PPUSH
18765: LD_VAR 0 4
18769: PPUSH
18770: EMPTY
18771: PPUSH
18772: CALL_OW 1
18776: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18777: LD_ADDR_EXP 91
18781: PUSH
18782: LD_EXP 91
18786: PPUSH
18787: LD_VAR 0 4
18791: PPUSH
18792: LD_INT 0
18794: PPUSH
18795: CALL_OW 1
18799: ST_TO_ADDR
// result := base ;
18800: LD_ADDR_VAR 0 3
18804: PUSH
18805: LD_VAR 0 4
18809: ST_TO_ADDR
// end ;
18810: LD_VAR 0 3
18814: RET
// export function MC_Start ( ) ; var i ; begin
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
// for i = 1 to mc_bases do
18819: LD_ADDR_VAR 0 2
18823: PUSH
18824: DOUBLE
18825: LD_INT 1
18827: DEC
18828: ST_TO_ADDR
18829: LD_EXP 49
18833: PUSH
18834: FOR_TO
18835: IFFALSE 19912
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
18837: LD_ADDR_EXP 49
18841: PUSH
18842: LD_EXP 49
18846: PPUSH
18847: LD_VAR 0 2
18851: PPUSH
18852: LD_EXP 49
18856: PUSH
18857: LD_VAR 0 2
18861: ARRAY
18862: PUSH
18863: LD_INT 0
18865: DIFF
18866: PPUSH
18867: CALL_OW 1
18871: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
18872: LD_ADDR_EXP 50
18876: PUSH
18877: LD_EXP 50
18881: PPUSH
18882: LD_VAR 0 2
18886: PPUSH
18887: EMPTY
18888: PPUSH
18889: CALL_OW 1
18893: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
18894: LD_ADDR_EXP 51
18898: PUSH
18899: LD_EXP 51
18903: PPUSH
18904: LD_VAR 0 2
18908: PPUSH
18909: EMPTY
18910: PPUSH
18911: CALL_OW 1
18915: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
18916: LD_ADDR_EXP 52
18920: PUSH
18921: LD_EXP 52
18925: PPUSH
18926: LD_VAR 0 2
18930: PPUSH
18931: EMPTY
18932: PPUSH
18933: CALL_OW 1
18937: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
18938: LD_ADDR_EXP 53
18942: PUSH
18943: LD_EXP 53
18947: PPUSH
18948: LD_VAR 0 2
18952: PPUSH
18953: EMPTY
18954: PUSH
18955: EMPTY
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 1
18965: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
18966: LD_ADDR_EXP 54
18970: PUSH
18971: LD_EXP 54
18975: PPUSH
18976: LD_VAR 0 2
18980: PPUSH
18981: EMPTY
18982: PPUSH
18983: CALL_OW 1
18987: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
18988: LD_ADDR_EXP 81
18992: PUSH
18993: LD_EXP 81
18997: PPUSH
18998: LD_VAR 0 2
19002: PPUSH
19003: EMPTY
19004: PPUSH
19005: CALL_OW 1
19009: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19010: LD_ADDR_EXP 55
19014: PUSH
19015: LD_EXP 55
19019: PPUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: EMPTY
19026: PPUSH
19027: CALL_OW 1
19031: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19032: LD_ADDR_EXP 56
19036: PUSH
19037: LD_EXP 56
19041: PPUSH
19042: LD_VAR 0 2
19046: PPUSH
19047: EMPTY
19048: PPUSH
19049: CALL_OW 1
19053: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19054: LD_ADDR_EXP 57
19058: PUSH
19059: LD_EXP 57
19063: PPUSH
19064: LD_VAR 0 2
19068: PPUSH
19069: LD_EXP 49
19073: PUSH
19074: LD_VAR 0 2
19078: ARRAY
19079: PPUSH
19080: LD_INT 2
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 32
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 33
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 72
19112: PPUSH
19113: CALL_OW 1
19117: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19118: LD_ADDR_EXP 58
19122: PUSH
19123: LD_EXP 58
19127: PPUSH
19128: LD_VAR 0 2
19132: PPUSH
19133: LD_EXP 49
19137: PUSH
19138: LD_VAR 0 2
19142: ARRAY
19143: PPUSH
19144: LD_INT 2
19146: PUSH
19147: LD_INT 30
19149: PUSH
19150: LD_INT 32
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 30
19159: PUSH
19160: LD_INT 31
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 58
19174: PUSH
19175: EMPTY
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 72
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19192: LD_ADDR_EXP 59
19196: PUSH
19197: LD_EXP 59
19201: PPUSH
19202: LD_VAR 0 2
19206: PPUSH
19207: EMPTY
19208: PPUSH
19209: CALL_OW 1
19213: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19214: LD_ADDR_EXP 63
19218: PUSH
19219: LD_EXP 63
19223: PPUSH
19224: LD_VAR 0 2
19228: PPUSH
19229: EMPTY
19230: PPUSH
19231: CALL_OW 1
19235: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19236: LD_ADDR_EXP 62
19240: PUSH
19241: LD_EXP 62
19245: PPUSH
19246: LD_VAR 0 2
19250: PPUSH
19251: EMPTY
19252: PPUSH
19253: CALL_OW 1
19257: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19258: LD_ADDR_EXP 64
19262: PUSH
19263: LD_EXP 64
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: EMPTY
19274: PPUSH
19275: CALL_OW 1
19279: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19280: LD_ADDR_EXP 65
19284: PUSH
19285: LD_EXP 65
19289: PPUSH
19290: LD_VAR 0 2
19294: PPUSH
19295: EMPTY
19296: PPUSH
19297: CALL_OW 1
19301: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19302: LD_ADDR_EXP 66
19306: PUSH
19307: LD_EXP 66
19311: PPUSH
19312: LD_VAR 0 2
19316: PPUSH
19317: EMPTY
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
19324: LD_ADDR_EXP 67
19328: PUSH
19329: LD_EXP 67
19333: PPUSH
19334: LD_VAR 0 2
19338: PPUSH
19339: EMPTY
19340: PPUSH
19341: CALL_OW 1
19345: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
19346: LD_ADDR_EXP 68
19350: PUSH
19351: LD_EXP 68
19355: PPUSH
19356: LD_VAR 0 2
19360: PPUSH
19361: EMPTY
19362: PPUSH
19363: CALL_OW 1
19367: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
19368: LD_ADDR_EXP 69
19372: PUSH
19373: LD_EXP 69
19377: PPUSH
19378: LD_VAR 0 2
19382: PPUSH
19383: EMPTY
19384: PPUSH
19385: CALL_OW 1
19389: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
19390: LD_ADDR_EXP 70
19394: PUSH
19395: LD_EXP 70
19399: PPUSH
19400: LD_VAR 0 2
19404: PPUSH
19405: EMPTY
19406: PPUSH
19407: CALL_OW 1
19411: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
19412: LD_ADDR_EXP 71
19416: PUSH
19417: LD_EXP 71
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: EMPTY
19428: PPUSH
19429: CALL_OW 1
19433: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
19434: LD_ADDR_EXP 60
19438: PUSH
19439: LD_EXP 60
19443: PPUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_INT 0
19451: PPUSH
19452: CALL_OW 1
19456: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
19457: LD_ADDR_EXP 73
19461: PUSH
19462: LD_EXP 73
19466: PPUSH
19467: LD_VAR 0 2
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 1
19479: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
19480: LD_ADDR_EXP 61
19484: PUSH
19485: LD_EXP 61
19489: PPUSH
19490: LD_VAR 0 2
19494: PPUSH
19495: EMPTY
19496: PPUSH
19497: CALL_OW 1
19501: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
19502: LD_ADDR_EXP 72
19506: PUSH
19507: LD_EXP 72
19511: PPUSH
19512: LD_VAR 0 2
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 1
19524: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
19525: LD_ADDR_EXP 74
19529: PUSH
19530: LD_EXP 74
19534: PPUSH
19535: LD_VAR 0 2
19539: PPUSH
19540: EMPTY
19541: PPUSH
19542: CALL_OW 1
19546: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
19547: LD_ADDR_EXP 77
19551: PUSH
19552: LD_EXP 77
19556: PPUSH
19557: LD_VAR 0 2
19561: PPUSH
19562: LD_INT 0
19564: PPUSH
19565: CALL_OW 1
19569: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
19570: LD_ADDR_EXP 78
19574: PUSH
19575: LD_EXP 78
19579: PPUSH
19580: LD_VAR 0 2
19584: PPUSH
19585: EMPTY
19586: PPUSH
19587: CALL_OW 1
19591: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
19592: LD_ADDR_EXP 79
19596: PUSH
19597: LD_EXP 79
19601: PPUSH
19602: LD_VAR 0 2
19606: PPUSH
19607: EMPTY
19608: PPUSH
19609: CALL_OW 1
19613: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
19614: LD_ADDR_EXP 80
19618: PUSH
19619: LD_EXP 80
19623: PPUSH
19624: LD_VAR 0 2
19628: PPUSH
19629: EMPTY
19630: PPUSH
19631: CALL_OW 1
19635: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
19636: LD_ADDR_EXP 82
19640: PUSH
19641: LD_EXP 82
19645: PPUSH
19646: LD_VAR 0 2
19650: PPUSH
19651: LD_EXP 49
19655: PUSH
19656: LD_VAR 0 2
19660: ARRAY
19661: PPUSH
19662: LD_INT 2
19664: PUSH
19665: LD_INT 30
19667: PUSH
19668: LD_INT 6
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 30
19677: PUSH
19678: LD_INT 7
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 30
19687: PUSH
19688: LD_INT 8
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: PPUSH
19701: CALL_OW 72
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
19711: LD_ADDR_EXP 83
19715: PUSH
19716: LD_EXP 83
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL_OW 1
19732: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
19733: LD_ADDR_EXP 84
19737: PUSH
19738: LD_EXP 84
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: EMPTY
19749: PPUSH
19750: CALL_OW 1
19754: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
19755: LD_ADDR_EXP 85
19759: PUSH
19760: LD_EXP 85
19764: PPUSH
19765: LD_VAR 0 2
19769: PPUSH
19770: EMPTY
19771: PPUSH
19772: CALL_OW 1
19776: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
19777: LD_ADDR_EXP 86
19781: PUSH
19782: LD_EXP 86
19786: PPUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: EMPTY
19793: PPUSH
19794: CALL_OW 1
19798: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
19799: LD_ADDR_EXP 87
19803: PUSH
19804: LD_EXP 87
19808: PPUSH
19809: LD_VAR 0 2
19813: PPUSH
19814: EMPTY
19815: PPUSH
19816: CALL_OW 1
19820: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
19821: LD_ADDR_EXP 88
19825: PUSH
19826: LD_EXP 88
19830: PPUSH
19831: LD_VAR 0 2
19835: PPUSH
19836: EMPTY
19837: PPUSH
19838: CALL_OW 1
19842: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
19843: LD_ADDR_EXP 89
19847: PUSH
19848: LD_EXP 89
19852: PPUSH
19853: LD_VAR 0 2
19857: PPUSH
19858: EMPTY
19859: PPUSH
19860: CALL_OW 1
19864: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
19865: LD_ADDR_EXP 90
19869: PUSH
19870: LD_EXP 90
19874: PPUSH
19875: LD_VAR 0 2
19879: PPUSH
19880: EMPTY
19881: PPUSH
19882: CALL_OW 1
19886: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
19887: LD_ADDR_EXP 91
19891: PUSH
19892: LD_EXP 91
19896: PPUSH
19897: LD_VAR 0 2
19901: PPUSH
19902: LD_INT 0
19904: PPUSH
19905: CALL_OW 1
19909: ST_TO_ADDR
// end ;
19910: GO 18834
19912: POP
19913: POP
// MC_InitSides ( ) ;
19914: CALL 20200 0 0
// MC_InitResearch ( ) ;
19918: CALL 19939 0 0
// CustomInitMacro ( ) ;
19922: CALL 292 0 0
// skirmish := true ;
19926: LD_ADDR_EXP 47
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// end ;
19934: LD_VAR 0 1
19938: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
// if not mc_bases then
19947: LD_EXP 49
19951: NOT
19952: IFFALSE 19956
// exit ;
19954: GO 20195
// for i = 1 to 8 do
19956: LD_ADDR_VAR 0 2
19960: PUSH
19961: DOUBLE
19962: LD_INT 1
19964: DEC
19965: ST_TO_ADDR
19966: LD_INT 8
19968: PUSH
19969: FOR_TO
19970: IFFALSE 19996
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
19972: LD_ADDR_EXP 76
19976: PUSH
19977: LD_EXP 76
19981: PPUSH
19982: LD_VAR 0 2
19986: PPUSH
19987: EMPTY
19988: PPUSH
19989: CALL_OW 1
19993: ST_TO_ADDR
19994: GO 19969
19996: POP
19997: POP
// tmp := [ ] ;
19998: LD_ADDR_VAR 0 5
20002: PUSH
20003: EMPTY
20004: ST_TO_ADDR
// for i = 1 to mc_sides do
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: DOUBLE
20011: LD_INT 1
20013: DEC
20014: ST_TO_ADDR
20015: LD_EXP 75
20019: PUSH
20020: FOR_TO
20021: IFFALSE 20079
// if not mc_sides [ i ] in tmp then
20023: LD_EXP 75
20027: PUSH
20028: LD_VAR 0 2
20032: ARRAY
20033: PUSH
20034: LD_VAR 0 5
20038: IN
20039: NOT
20040: IFFALSE 20077
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20042: LD_ADDR_VAR 0 5
20046: PUSH
20047: LD_VAR 0 5
20051: PPUSH
20052: LD_VAR 0 5
20056: PUSH
20057: LD_INT 1
20059: PLUS
20060: PPUSH
20061: LD_EXP 75
20065: PUSH
20066: LD_VAR 0 2
20070: ARRAY
20071: PPUSH
20072: CALL_OW 2
20076: ST_TO_ADDR
20077: GO 20020
20079: POP
20080: POP
// if not tmp then
20081: LD_VAR 0 5
20085: NOT
20086: IFFALSE 20090
// exit ;
20088: GO 20195
// for j in tmp do
20090: LD_ADDR_VAR 0 3
20094: PUSH
20095: LD_VAR 0 5
20099: PUSH
20100: FOR_IN
20101: IFFALSE 20193
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20103: LD_ADDR_VAR 0 6
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_VAR 0 3
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: ST_TO_ADDR
// if not un then
20125: LD_VAR 0 6
20129: NOT
20130: IFFALSE 20134
// continue ;
20132: GO 20100
// nation := GetNation ( un [ 1 ] ) ;
20134: LD_ADDR_VAR 0 4
20138: PUSH
20139: LD_VAR 0 6
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: CALL_OW 248
20152: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20153: LD_ADDR_EXP 76
20157: PUSH
20158: LD_EXP 76
20162: PPUSH
20163: LD_VAR 0 3
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_VAR 0 4
20177: PPUSH
20178: LD_INT 1
20180: PPUSH
20181: CALL 45989 0 3
20185: PPUSH
20186: CALL_OW 1
20190: ST_TO_ADDR
// end ;
20191: GO 20100
20193: POP
20194: POP
// end ;
20195: LD_VAR 0 1
20199: RET
// export function MC_InitSides ( ) ; var i ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
// if not mc_bases then
20204: LD_EXP 49
20208: NOT
20209: IFFALSE 20213
// exit ;
20211: GO 20287
// for i = 1 to mc_bases do
20213: LD_ADDR_VAR 0 2
20217: PUSH
20218: DOUBLE
20219: LD_INT 1
20221: DEC
20222: ST_TO_ADDR
20223: LD_EXP 49
20227: PUSH
20228: FOR_TO
20229: IFFALSE 20285
// if mc_bases [ i ] then
20231: LD_EXP 49
20235: PUSH
20236: LD_VAR 0 2
20240: ARRAY
20241: IFFALSE 20283
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20243: LD_ADDR_EXP 75
20247: PUSH
20248: LD_EXP 75
20252: PPUSH
20253: LD_VAR 0 2
20257: PPUSH
20258: LD_EXP 49
20262: PUSH
20263: LD_VAR 0 2
20267: ARRAY
20268: PUSH
20269: LD_INT 1
20271: ARRAY
20272: PPUSH
20273: CALL_OW 255
20277: PPUSH
20278: CALL_OW 1
20282: ST_TO_ADDR
20283: GO 20228
20285: POP
20286: POP
// end ;
20287: LD_VAR 0 1
20291: RET
// every 0 0$01 trigger skirmish do
20292: LD_EXP 47
20296: IFFALSE 20450
20298: GO 20300
20300: DISABLE
// begin enable ;
20301: ENABLE
// MC_CheckBuildings ( ) ;
20302: CALL 24939 0 0
// MC_CheckPeopleLife ( ) ;
20306: CALL 25064 0 0
// RaiseSailEvent ( 100 ) ;
20310: LD_INT 100
20312: PPUSH
20313: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20317: LD_INT 103
20319: PPUSH
20320: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
20324: LD_INT 104
20326: PPUSH
20327: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
20331: LD_INT 105
20333: PPUSH
20334: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
20338: LD_INT 106
20340: PPUSH
20341: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
20345: LD_INT 107
20347: PPUSH
20348: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
20352: LD_INT 108
20354: PPUSH
20355: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
20359: LD_INT 109
20361: PPUSH
20362: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
20366: LD_INT 110
20368: PPUSH
20369: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
20373: LD_INT 111
20375: PPUSH
20376: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
20380: LD_INT 112
20382: PPUSH
20383: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
20387: LD_INT 113
20389: PPUSH
20390: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
20394: LD_INT 120
20396: PPUSH
20397: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
20401: LD_INT 121
20403: PPUSH
20404: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
20408: LD_INT 122
20410: PPUSH
20411: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
20415: LD_INT 123
20417: PPUSH
20418: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
20422: LD_INT 124
20424: PPUSH
20425: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
20429: LD_INT 125
20431: PPUSH
20432: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
20436: LD_INT 126
20438: PPUSH
20439: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
20443: LD_INT 200
20445: PPUSH
20446: CALL_OW 427
// end ;
20450: END
// on SailEvent ( event ) do begin if event < 100 then
20451: LD_VAR 0 1
20455: PUSH
20456: LD_INT 100
20458: LESS
20459: IFFALSE 20470
// CustomEvent ( event ) ;
20461: LD_VAR 0 1
20465: PPUSH
20466: CALL 15992 0 1
// if event = 100 then
20470: LD_VAR 0 1
20474: PUSH
20475: LD_INT 100
20477: EQUAL
20478: IFFALSE 20484
// MC_ClassManager ( ) ;
20480: CALL 20876 0 0
// if event = 101 then
20484: LD_VAR 0 1
20488: PUSH
20489: LD_INT 101
20491: EQUAL
20492: IFFALSE 20498
// MC_RepairBuildings ( ) ;
20494: CALL 25660 0 0
// if event = 102 then
20498: LD_VAR 0 1
20502: PUSH
20503: LD_INT 102
20505: EQUAL
20506: IFFALSE 20512
// MC_Heal ( ) ;
20508: CALL 26066 0 0
// if event = 103 then
20512: LD_VAR 0 1
20516: PUSH
20517: LD_INT 103
20519: EQUAL
20520: IFFALSE 20526
// MC_Build ( ) ;
20522: CALL 26488 0 0
// if event = 104 then
20526: LD_VAR 0 1
20530: PUSH
20531: LD_INT 104
20533: EQUAL
20534: IFFALSE 20540
// MC_TurretWeapon ( ) ;
20536: CALL 28101 0 0
// if event = 105 then
20540: LD_VAR 0 1
20544: PUSH
20545: LD_INT 105
20547: EQUAL
20548: IFFALSE 20554
// MC_BuildUpgrade ( ) ;
20550: CALL 27652 0 0
// if event = 106 then
20554: LD_VAR 0 1
20558: PUSH
20559: LD_INT 106
20561: EQUAL
20562: IFFALSE 20568
// MC_PlantMines ( ) ;
20564: CALL 28531 0 0
// if event = 107 then
20568: LD_VAR 0 1
20572: PUSH
20573: LD_INT 107
20575: EQUAL
20576: IFFALSE 20582
// MC_CollectCrates ( ) ;
20578: CALL 29565 0 0
// if event = 108 then
20582: LD_VAR 0 1
20586: PUSH
20587: LD_INT 108
20589: EQUAL
20590: IFFALSE 20596
// MC_LinkRemoteControl ( ) ;
20592: CALL 31322 0 0
// if event = 109 then
20596: LD_VAR 0 1
20600: PUSH
20601: LD_INT 109
20603: EQUAL
20604: IFFALSE 20610
// MC_ProduceVehicle ( ) ;
20606: CALL 31503 0 0
// if event = 110 then
20610: LD_VAR 0 1
20614: PUSH
20615: LD_INT 110
20617: EQUAL
20618: IFFALSE 20624
// MC_SendAttack ( ) ;
20620: CALL 31984 0 0
// if event = 111 then
20624: LD_VAR 0 1
20628: PUSH
20629: LD_INT 111
20631: EQUAL
20632: IFFALSE 20638
// MC_Defend ( ) ;
20634: CALL 32092 0 0
// if event = 112 then
20638: LD_VAR 0 1
20642: PUSH
20643: LD_INT 112
20645: EQUAL
20646: IFFALSE 20652
// MC_Research ( ) ;
20648: CALL 32697 0 0
// if event = 113 then
20652: LD_VAR 0 1
20656: PUSH
20657: LD_INT 113
20659: EQUAL
20660: IFFALSE 20666
// MC_MinesTrigger ( ) ;
20662: CALL 33811 0 0
// if event = 120 then
20666: LD_VAR 0 1
20670: PUSH
20671: LD_INT 120
20673: EQUAL
20674: IFFALSE 20680
// MC_RepairVehicle ( ) ;
20676: CALL 33910 0 0
// if event = 121 then
20680: LD_VAR 0 1
20684: PUSH
20685: LD_INT 121
20687: EQUAL
20688: IFFALSE 20694
// MC_TameApe ( ) ;
20690: CALL 34617 0 0
// if event = 122 then
20694: LD_VAR 0 1
20698: PUSH
20699: LD_INT 122
20701: EQUAL
20702: IFFALSE 20708
// MC_ChangeApeClass ( ) ;
20704: CALL 35446 0 0
// if event = 123 then
20708: LD_VAR 0 1
20712: PUSH
20713: LD_INT 123
20715: EQUAL
20716: IFFALSE 20722
// MC_Bazooka ( ) ;
20718: CALL 36096 0 0
// if event = 124 then
20722: LD_VAR 0 1
20726: PUSH
20727: LD_INT 124
20729: EQUAL
20730: IFFALSE 20736
// MC_TeleportExit ( ) ;
20732: CALL 36294 0 0
// if event = 125 then
20736: LD_VAR 0 1
20740: PUSH
20741: LD_INT 125
20743: EQUAL
20744: IFFALSE 20750
// MC_Deposits ( ) ;
20746: CALL 36941 0 0
// if event = 126 then
20750: LD_VAR 0 1
20754: PUSH
20755: LD_INT 126
20757: EQUAL
20758: IFFALSE 20764
// MC_RemoteDriver ( ) ;
20760: CALL 37566 0 0
// if event = 200 then
20764: LD_VAR 0 1
20768: PUSH
20769: LD_INT 200
20771: EQUAL
20772: IFFALSE 20778
// MC_Idle ( ) ;
20774: CALL 39299 0 0
// end ;
20778: PPOPN 1
20780: END
// export function MC_Reset ( base , tag ) ; var i ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
// if not mc_bases [ base ] or not tag then
20785: LD_EXP 49
20789: PUSH
20790: LD_VAR 0 1
20794: ARRAY
20795: NOT
20796: PUSH
20797: LD_VAR 0 2
20801: NOT
20802: OR
20803: IFFALSE 20807
// exit ;
20805: GO 20871
// for i in mc_bases [ base ] union mc_ape [ base ] do
20807: LD_ADDR_VAR 0 4
20811: PUSH
20812: LD_EXP 49
20816: PUSH
20817: LD_VAR 0 1
20821: ARRAY
20822: PUSH
20823: LD_EXP 78
20827: PUSH
20828: LD_VAR 0 1
20832: ARRAY
20833: UNION
20834: PUSH
20835: FOR_IN
20836: IFFALSE 20869
// if GetTag ( i ) = tag then
20838: LD_VAR 0 4
20842: PPUSH
20843: CALL_OW 110
20847: PUSH
20848: LD_VAR 0 2
20852: EQUAL
20853: IFFALSE 20867
// SetTag ( i , 0 ) ;
20855: LD_VAR 0 4
20859: PPUSH
20860: LD_INT 0
20862: PPUSH
20863: CALL_OW 109
20867: GO 20835
20869: POP
20870: POP
// end ;
20871: LD_VAR 0 3
20875: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
20876: LD_INT 0
20878: PPUSH
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
20884: PPUSH
20885: PPUSH
// if not mc_bases then
20886: LD_EXP 49
20890: NOT
20891: IFFALSE 20895
// exit ;
20893: GO 21353
// for i = 1 to mc_bases do
20895: LD_ADDR_VAR 0 2
20899: PUSH
20900: DOUBLE
20901: LD_INT 1
20903: DEC
20904: ST_TO_ADDR
20905: LD_EXP 49
20909: PUSH
20910: FOR_TO
20911: IFFALSE 21351
// begin tmp := MC_ClassCheckReq ( i ) ;
20913: LD_ADDR_VAR 0 4
20917: PUSH
20918: LD_VAR 0 2
20922: PPUSH
20923: CALL 21358 0 1
20927: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
20928: LD_ADDR_EXP 90
20932: PUSH
20933: LD_EXP 90
20937: PPUSH
20938: LD_VAR 0 2
20942: PPUSH
20943: LD_VAR 0 4
20947: PPUSH
20948: CALL_OW 1
20952: ST_TO_ADDR
// if not tmp then
20953: LD_VAR 0 4
20957: NOT
20958: IFFALSE 20962
// continue ;
20960: GO 20910
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
20962: LD_ADDR_VAR 0 6
20966: PUSH
20967: LD_EXP 49
20971: PUSH
20972: LD_VAR 0 2
20976: ARRAY
20977: PPUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 4
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 30
20993: PUSH
20994: LD_INT 5
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 72
21010: PUSH
21011: LD_EXP 49
21015: PUSH
21016: LD_VAR 0 2
21020: ARRAY
21021: PPUSH
21022: LD_INT 2
21024: PUSH
21025: LD_INT 30
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 30
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: PPUSH
21050: CALL_OW 72
21054: PUSH
21055: LD_EXP 49
21059: PUSH
21060: LD_VAR 0 2
21064: ARRAY
21065: PPUSH
21066: LD_INT 30
21068: PUSH
21069: LD_INT 3
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 72
21080: PUSH
21081: LD_EXP 49
21085: PUSH
21086: LD_VAR 0 2
21090: ARRAY
21091: PPUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 6
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: LD_INT 7
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 30
21117: PUSH
21118: LD_INT 8
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 72
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
// for j = 1 to 4 do
21142: LD_ADDR_VAR 0 3
21146: PUSH
21147: DOUBLE
21148: LD_INT 1
21150: DEC
21151: ST_TO_ADDR
21152: LD_INT 4
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21347
// begin if not tmp [ j ] then
21158: LD_VAR 0 4
21162: PUSH
21163: LD_VAR 0 3
21167: ARRAY
21168: NOT
21169: IFFALSE 21173
// continue ;
21171: GO 21155
// for p in tmp [ j ] do
21173: LD_ADDR_VAR 0 5
21177: PUSH
21178: LD_VAR 0 4
21182: PUSH
21183: LD_VAR 0 3
21187: ARRAY
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21343
// begin if not b [ j ] then
21192: LD_VAR 0 6
21196: PUSH
21197: LD_VAR 0 3
21201: ARRAY
21202: NOT
21203: IFFALSE 21207
// break ;
21205: GO 21343
// e := 0 ;
21207: LD_ADDR_VAR 0 7
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// for k in b [ j ] do
21215: LD_ADDR_VAR 0 8
21219: PUSH
21220: LD_VAR 0 6
21224: PUSH
21225: LD_VAR 0 3
21229: ARRAY
21230: PUSH
21231: FOR_IN
21232: IFFALSE 21259
// if IsNotFull ( k ) then
21234: LD_VAR 0 8
21238: PPUSH
21239: CALL 49978 0 1
21243: IFFALSE 21257
// begin e := k ;
21245: LD_ADDR_VAR 0 7
21249: PUSH
21250: LD_VAR 0 8
21254: ST_TO_ADDR
// break ;
21255: GO 21259
// end ;
21257: GO 21231
21259: POP
21260: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21261: LD_VAR 0 7
21265: PUSH
21266: LD_VAR 0 5
21270: PPUSH
21271: LD_VAR 0 7
21275: PPUSH
21276: CALL 87036 0 2
21280: NOT
21281: AND
21282: IFFALSE 21341
// begin if IsInUnit ( p ) then
21284: LD_VAR 0 5
21288: PPUSH
21289: CALL_OW 310
21293: IFFALSE 21304
// ComExitBuilding ( p ) ;
21295: LD_VAR 0 5
21299: PPUSH
21300: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21304: LD_VAR 0 5
21308: PPUSH
21309: LD_VAR 0 7
21313: PPUSH
21314: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21318: LD_VAR 0 5
21322: PPUSH
21323: LD_VAR 0 3
21327: PPUSH
21328: CALL_OW 183
// AddComExitBuilding ( p ) ;
21332: LD_VAR 0 5
21336: PPUSH
21337: CALL_OW 182
// end ; end ;
21341: GO 21189
21343: POP
21344: POP
// end ;
21345: GO 21155
21347: POP
21348: POP
// end ;
21349: GO 20910
21351: POP
21352: POP
// end ;
21353: LD_VAR 0 1
21357: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
21358: LD_INT 0
21360: PPUSH
21361: PPUSH
21362: PPUSH
21363: PPUSH
21364: PPUSH
21365: PPUSH
21366: PPUSH
21367: PPUSH
21368: PPUSH
21369: PPUSH
21370: PPUSH
21371: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21372: LD_VAR 0 1
21376: NOT
21377: PUSH
21378: LD_EXP 49
21382: PUSH
21383: LD_VAR 0 1
21387: ARRAY
21388: NOT
21389: OR
21390: PUSH
21391: LD_EXP 49
21395: PUSH
21396: LD_VAR 0 1
21400: ARRAY
21401: PPUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 30
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 30
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: PPUSH
21430: CALL_OW 72
21434: NOT
21435: OR
21436: IFFALSE 21440
// exit ;
21438: GO 24934
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21440: LD_ADDR_VAR 0 4
21444: PUSH
21445: LD_EXP 49
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PPUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 25
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 25
21481: PUSH
21482: LD_INT 3
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 25
21491: PUSH
21492: LD_INT 4
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 25
21501: PUSH
21502: LD_INT 5
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 25
21511: PUSH
21512: LD_INT 8
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 25
21521: PUSH
21522: LD_INT 9
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: PPUSH
21539: CALL_OW 72
21543: ST_TO_ADDR
// for i in tmp do
21544: LD_ADDR_VAR 0 3
21548: PUSH
21549: LD_VAR 0 4
21553: PUSH
21554: FOR_IN
21555: IFFALSE 21586
// if GetTag ( i ) then
21557: LD_VAR 0 3
21561: PPUSH
21562: CALL_OW 110
21566: IFFALSE 21584
// tmp := tmp diff i ;
21568: LD_ADDR_VAR 0 4
21572: PUSH
21573: LD_VAR 0 4
21577: PUSH
21578: LD_VAR 0 3
21582: DIFF
21583: ST_TO_ADDR
21584: GO 21554
21586: POP
21587: POP
// if not tmp then
21588: LD_VAR 0 4
21592: NOT
21593: IFFALSE 21597
// exit ;
21595: GO 24934
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21597: LD_ADDR_VAR 0 5
21601: PUSH
21602: LD_EXP 49
21606: PUSH
21607: LD_VAR 0 1
21611: ARRAY
21612: PPUSH
21613: LD_INT 2
21615: PUSH
21616: LD_INT 25
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 25
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 25
21638: PUSH
21639: LD_INT 8
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 25
21648: PUSH
21649: LD_INT 9
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: PPUSH
21663: CALL_OW 72
21667: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
21668: LD_ADDR_VAR 0 6
21672: PUSH
21673: LD_EXP 49
21677: PUSH
21678: LD_VAR 0 1
21682: ARRAY
21683: PPUSH
21684: LD_INT 25
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PPUSH
21694: CALL_OW 72
21698: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21699: LD_ADDR_VAR 0 7
21703: PUSH
21704: LD_EXP 49
21708: PUSH
21709: LD_VAR 0 1
21713: ARRAY
21714: PPUSH
21715: LD_INT 25
21717: PUSH
21718: LD_INT 3
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PPUSH
21725: CALL_OW 72
21729: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
21730: LD_ADDR_VAR 0 8
21734: PUSH
21735: LD_EXP 49
21739: PUSH
21740: LD_VAR 0 1
21744: ARRAY
21745: PPUSH
21746: LD_INT 25
21748: PUSH
21749: LD_INT 4
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 24
21758: PUSH
21759: LD_INT 251
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PPUSH
21770: CALL_OW 72
21774: ST_TO_ADDR
// if mc_scan [ base ] then
21775: LD_EXP 72
21779: PUSH
21780: LD_VAR 0 1
21784: ARRAY
21785: IFFALSE 22246
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
21787: LD_ADDR_EXP 91
21791: PUSH
21792: LD_EXP 91
21796: PPUSH
21797: LD_VAR 0 1
21801: PPUSH
21802: LD_INT 4
21804: PPUSH
21805: CALL_OW 1
21809: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
21810: LD_ADDR_VAR 0 12
21814: PUSH
21815: LD_EXP 49
21819: PUSH
21820: LD_VAR 0 1
21824: ARRAY
21825: PPUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 30
21831: PUSH
21832: LD_INT 4
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 30
21841: PUSH
21842: LD_INT 5
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: LIST
21853: PPUSH
21854: CALL_OW 72
21858: ST_TO_ADDR
// if not b then
21859: LD_VAR 0 12
21863: NOT
21864: IFFALSE 21868
// exit ;
21866: GO 24934
// p := [ ] ;
21868: LD_ADDR_VAR 0 11
21872: PUSH
21873: EMPTY
21874: ST_TO_ADDR
// if sci >= 2 then
21875: LD_VAR 0 8
21879: PUSH
21880: LD_INT 2
21882: GREATEREQUAL
21883: IFFALSE 21914
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
21885: LD_ADDR_VAR 0 8
21889: PUSH
21890: LD_VAR 0 8
21894: PUSH
21895: LD_INT 1
21897: ARRAY
21898: PUSH
21899: LD_VAR 0 8
21903: PUSH
21904: LD_INT 2
21906: ARRAY
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: ST_TO_ADDR
21912: GO 21975
// if sci = 1 then
21914: LD_VAR 0 8
21918: PUSH
21919: LD_INT 1
21921: EQUAL
21922: IFFALSE 21943
// sci := [ sci [ 1 ] ] else
21924: LD_ADDR_VAR 0 8
21928: PUSH
21929: LD_VAR 0 8
21933: PUSH
21934: LD_INT 1
21936: ARRAY
21937: PUSH
21938: EMPTY
21939: LIST
21940: ST_TO_ADDR
21941: GO 21975
// if sci = 0 then
21943: LD_VAR 0 8
21947: PUSH
21948: LD_INT 0
21950: EQUAL
21951: IFFALSE 21975
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
21953: LD_ADDR_VAR 0 11
21957: PUSH
21958: LD_VAR 0 4
21962: PPUSH
21963: LD_INT 4
21965: PPUSH
21966: CALL 86899 0 2
21970: PUSH
21971: LD_INT 1
21973: ARRAY
21974: ST_TO_ADDR
// if eng > 4 then
21975: LD_VAR 0 6
21979: PUSH
21980: LD_INT 4
21982: GREATER
21983: IFFALSE 22029
// for i = eng downto 4 do
21985: LD_ADDR_VAR 0 3
21989: PUSH
21990: DOUBLE
21991: LD_VAR 0 6
21995: INC
21996: ST_TO_ADDR
21997: LD_INT 4
21999: PUSH
22000: FOR_DOWNTO
22001: IFFALSE 22027
// eng := eng diff eng [ i ] ;
22003: LD_ADDR_VAR 0 6
22007: PUSH
22008: LD_VAR 0 6
22012: PUSH
22013: LD_VAR 0 6
22017: PUSH
22018: LD_VAR 0 3
22022: ARRAY
22023: DIFF
22024: ST_TO_ADDR
22025: GO 22000
22027: POP
22028: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22029: LD_ADDR_VAR 0 4
22033: PUSH
22034: LD_VAR 0 4
22038: PUSH
22039: LD_VAR 0 5
22043: PUSH
22044: LD_VAR 0 6
22048: UNION
22049: PUSH
22050: LD_VAR 0 7
22054: UNION
22055: PUSH
22056: LD_VAR 0 8
22060: UNION
22061: DIFF
22062: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22063: LD_ADDR_VAR 0 13
22067: PUSH
22068: LD_EXP 49
22072: PUSH
22073: LD_VAR 0 1
22077: ARRAY
22078: PPUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 30
22084: PUSH
22085: LD_INT 32
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 30
22094: PUSH
22095: LD_INT 31
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: PPUSH
22107: CALL_OW 72
22111: PUSH
22112: LD_EXP 49
22116: PUSH
22117: LD_VAR 0 1
22121: ARRAY
22122: PPUSH
22123: LD_INT 2
22125: PUSH
22126: LD_INT 30
22128: PUSH
22129: LD_INT 4
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 5
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: PPUSH
22151: CALL_OW 72
22155: PUSH
22156: LD_INT 6
22158: MUL
22159: PLUS
22160: ST_TO_ADDR
// if bcount < tmp then
22161: LD_VAR 0 13
22165: PUSH
22166: LD_VAR 0 4
22170: LESS
22171: IFFALSE 22217
// for i = tmp downto bcount do
22173: LD_ADDR_VAR 0 3
22177: PUSH
22178: DOUBLE
22179: LD_VAR 0 4
22183: INC
22184: ST_TO_ADDR
22185: LD_VAR 0 13
22189: PUSH
22190: FOR_DOWNTO
22191: IFFALSE 22215
// tmp := Delete ( tmp , tmp ) ;
22193: LD_ADDR_VAR 0 4
22197: PUSH
22198: LD_VAR 0 4
22202: PPUSH
22203: LD_VAR 0 4
22207: PPUSH
22208: CALL_OW 3
22212: ST_TO_ADDR
22213: GO 22190
22215: POP
22216: POP
// result := [ tmp , 0 , 0 , p ] ;
22217: LD_ADDR_VAR 0 2
22221: PUSH
22222: LD_VAR 0 4
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_VAR 0 11
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: ST_TO_ADDR
// exit ;
22244: GO 24934
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22246: LD_EXP 49
22250: PUSH
22251: LD_VAR 0 1
22255: ARRAY
22256: PPUSH
22257: LD_INT 2
22259: PUSH
22260: LD_INT 30
22262: PUSH
22263: LD_INT 6
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 30
22272: PUSH
22273: LD_INT 7
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 30
22282: PUSH
22283: LD_INT 8
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: PPUSH
22296: CALL_OW 72
22300: NOT
22301: PUSH
22302: LD_EXP 49
22306: PUSH
22307: LD_VAR 0 1
22311: ARRAY
22312: PPUSH
22313: LD_INT 30
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PPUSH
22323: CALL_OW 72
22327: NOT
22328: AND
22329: IFFALSE 22401
// begin if eng = tmp then
22331: LD_VAR 0 6
22335: PUSH
22336: LD_VAR 0 4
22340: EQUAL
22341: IFFALSE 22345
// exit ;
22343: GO 24934
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
22345: LD_ADDR_EXP 91
22349: PUSH
22350: LD_EXP 91
22354: PPUSH
22355: LD_VAR 0 1
22359: PPUSH
22360: LD_INT 1
22362: PPUSH
22363: CALL_OW 1
22367: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
22368: LD_ADDR_VAR 0 2
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: LD_VAR 0 4
22380: PUSH
22381: LD_VAR 0 6
22385: DIFF
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: ST_TO_ADDR
// exit ;
22399: GO 24934
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22401: LD_EXP 76
22405: PUSH
22406: LD_EXP 75
22410: PUSH
22411: LD_VAR 0 1
22415: ARRAY
22416: ARRAY
22417: PUSH
22418: LD_EXP 49
22422: PUSH
22423: LD_VAR 0 1
22427: ARRAY
22428: PPUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 30
22434: PUSH
22435: LD_INT 6
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 30
22444: PUSH
22445: LD_INT 7
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 30
22454: PUSH
22455: LD_INT 8
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: PPUSH
22468: CALL_OW 72
22472: AND
22473: PUSH
22474: LD_EXP 49
22478: PUSH
22479: LD_VAR 0 1
22483: ARRAY
22484: PPUSH
22485: LD_INT 30
22487: PUSH
22488: LD_INT 3
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PPUSH
22495: CALL_OW 72
22499: NOT
22500: AND
22501: IFFALSE 22715
// begin if sci >= 6 then
22503: LD_VAR 0 8
22507: PUSH
22508: LD_INT 6
22510: GREATEREQUAL
22511: IFFALSE 22515
// exit ;
22513: GO 24934
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
22515: LD_ADDR_EXP 91
22519: PUSH
22520: LD_EXP 91
22524: PPUSH
22525: LD_VAR 0 1
22529: PPUSH
22530: LD_INT 2
22532: PPUSH
22533: CALL_OW 1
22537: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
22538: LD_ADDR_VAR 0 9
22542: PUSH
22543: LD_VAR 0 4
22547: PUSH
22548: LD_VAR 0 8
22552: DIFF
22553: PPUSH
22554: LD_INT 4
22556: PPUSH
22557: CALL 86899 0 2
22561: ST_TO_ADDR
// p := [ ] ;
22562: LD_ADDR_VAR 0 11
22566: PUSH
22567: EMPTY
22568: ST_TO_ADDR
// if sci < 6 and sort > 6 then
22569: LD_VAR 0 8
22573: PUSH
22574: LD_INT 6
22576: LESS
22577: PUSH
22578: LD_VAR 0 9
22582: PUSH
22583: LD_INT 6
22585: GREATER
22586: AND
22587: IFFALSE 22668
// begin for i = 1 to 6 - sci do
22589: LD_ADDR_VAR 0 3
22593: PUSH
22594: DOUBLE
22595: LD_INT 1
22597: DEC
22598: ST_TO_ADDR
22599: LD_INT 6
22601: PUSH
22602: LD_VAR 0 8
22606: MINUS
22607: PUSH
22608: FOR_TO
22609: IFFALSE 22664
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
22611: LD_ADDR_VAR 0 11
22615: PUSH
22616: LD_VAR 0 11
22620: PPUSH
22621: LD_VAR 0 11
22625: PUSH
22626: LD_INT 1
22628: PLUS
22629: PPUSH
22630: LD_VAR 0 9
22634: PUSH
22635: LD_INT 1
22637: ARRAY
22638: PPUSH
22639: CALL_OW 2
22643: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
22644: LD_ADDR_VAR 0 9
22648: PUSH
22649: LD_VAR 0 9
22653: PPUSH
22654: LD_INT 1
22656: PPUSH
22657: CALL_OW 3
22661: ST_TO_ADDR
// end ;
22662: GO 22608
22664: POP
22665: POP
// end else
22666: GO 22688
// if sort then
22668: LD_VAR 0 9
22672: IFFALSE 22688
// p := sort [ 1 ] ;
22674: LD_ADDR_VAR 0 11
22678: PUSH
22679: LD_VAR 0 9
22683: PUSH
22684: LD_INT 1
22686: ARRAY
22687: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
22688: LD_ADDR_VAR 0 2
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: LD_VAR 0 11
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: ST_TO_ADDR
// exit ;
22713: GO 24934
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22715: LD_EXP 76
22719: PUSH
22720: LD_EXP 75
22724: PUSH
22725: LD_VAR 0 1
22729: ARRAY
22730: ARRAY
22731: PUSH
22732: LD_EXP 49
22736: PUSH
22737: LD_VAR 0 1
22741: ARRAY
22742: PPUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 30
22748: PUSH
22749: LD_INT 6
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 30
22758: PUSH
22759: LD_INT 7
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 30
22768: PUSH
22769: LD_INT 8
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: PPUSH
22782: CALL_OW 72
22786: AND
22787: PUSH
22788: LD_EXP 49
22792: PUSH
22793: LD_VAR 0 1
22797: ARRAY
22798: PPUSH
22799: LD_INT 30
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 72
22813: AND
22814: IFFALSE 23548
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
22816: LD_ADDR_EXP 91
22820: PUSH
22821: LD_EXP 91
22825: PPUSH
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_INT 3
22833: PPUSH
22834: CALL_OW 1
22838: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22839: LD_ADDR_VAR 0 2
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: ST_TO_ADDR
// if not eng then
22862: LD_VAR 0 6
22866: NOT
22867: IFFALSE 22930
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
22869: LD_ADDR_VAR 0 11
22873: PUSH
22874: LD_VAR 0 4
22878: PPUSH
22879: LD_INT 2
22881: PPUSH
22882: CALL 86899 0 2
22886: PUSH
22887: LD_INT 1
22889: ARRAY
22890: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
22891: LD_ADDR_VAR 0 2
22895: PUSH
22896: LD_VAR 0 2
22900: PPUSH
22901: LD_INT 2
22903: PPUSH
22904: LD_VAR 0 11
22908: PPUSH
22909: CALL_OW 1
22913: ST_TO_ADDR
// tmp := tmp diff p ;
22914: LD_ADDR_VAR 0 4
22918: PUSH
22919: LD_VAR 0 4
22923: PUSH
22924: LD_VAR 0 11
22928: DIFF
22929: ST_TO_ADDR
// end ; if tmp and sci < 6 then
22930: LD_VAR 0 4
22934: PUSH
22935: LD_VAR 0 8
22939: PUSH
22940: LD_INT 6
22942: LESS
22943: AND
22944: IFFALSE 23132
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
22946: LD_ADDR_VAR 0 9
22950: PUSH
22951: LD_VAR 0 4
22955: PUSH
22956: LD_VAR 0 8
22960: PUSH
22961: LD_VAR 0 7
22965: UNION
22966: DIFF
22967: PPUSH
22968: LD_INT 4
22970: PPUSH
22971: CALL 86899 0 2
22975: ST_TO_ADDR
// p := [ ] ;
22976: LD_ADDR_VAR 0 11
22980: PUSH
22981: EMPTY
22982: ST_TO_ADDR
// if sort then
22983: LD_VAR 0 9
22987: IFFALSE 23103
// for i = 1 to 6 - sci do
22989: LD_ADDR_VAR 0 3
22993: PUSH
22994: DOUBLE
22995: LD_INT 1
22997: DEC
22998: ST_TO_ADDR
22999: LD_INT 6
23001: PUSH
23002: LD_VAR 0 8
23006: MINUS
23007: PUSH
23008: FOR_TO
23009: IFFALSE 23101
// begin if i = sort then
23011: LD_VAR 0 3
23015: PUSH
23016: LD_VAR 0 9
23020: EQUAL
23021: IFFALSE 23025
// break ;
23023: GO 23101
// if GetClass ( i ) = 4 then
23025: LD_VAR 0 3
23029: PPUSH
23030: CALL_OW 257
23034: PUSH
23035: LD_INT 4
23037: EQUAL
23038: IFFALSE 23042
// continue ;
23040: GO 23008
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23042: LD_ADDR_VAR 0 11
23046: PUSH
23047: LD_VAR 0 11
23051: PPUSH
23052: LD_VAR 0 11
23056: PUSH
23057: LD_INT 1
23059: PLUS
23060: PPUSH
23061: LD_VAR 0 9
23065: PUSH
23066: LD_VAR 0 3
23070: ARRAY
23071: PPUSH
23072: CALL_OW 2
23076: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23077: LD_ADDR_VAR 0 4
23081: PUSH
23082: LD_VAR 0 4
23086: PUSH
23087: LD_VAR 0 9
23091: PUSH
23092: LD_VAR 0 3
23096: ARRAY
23097: DIFF
23098: ST_TO_ADDR
// end ;
23099: GO 23008
23101: POP
23102: POP
// if p then
23103: LD_VAR 0 11
23107: IFFALSE 23132
// result := Replace ( result , 4 , p ) ;
23109: LD_ADDR_VAR 0 2
23113: PUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_INT 4
23121: PPUSH
23122: LD_VAR 0 11
23126: PPUSH
23127: CALL_OW 1
23131: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23132: LD_VAR 0 4
23136: PUSH
23137: LD_VAR 0 7
23141: PUSH
23142: LD_INT 6
23144: LESS
23145: AND
23146: IFFALSE 23334
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23148: LD_ADDR_VAR 0 9
23152: PUSH
23153: LD_VAR 0 4
23157: PUSH
23158: LD_VAR 0 8
23162: PUSH
23163: LD_VAR 0 7
23167: UNION
23168: DIFF
23169: PPUSH
23170: LD_INT 3
23172: PPUSH
23173: CALL 86899 0 2
23177: ST_TO_ADDR
// p := [ ] ;
23178: LD_ADDR_VAR 0 11
23182: PUSH
23183: EMPTY
23184: ST_TO_ADDR
// if sort then
23185: LD_VAR 0 9
23189: IFFALSE 23305
// for i = 1 to 6 - mech do
23191: LD_ADDR_VAR 0 3
23195: PUSH
23196: DOUBLE
23197: LD_INT 1
23199: DEC
23200: ST_TO_ADDR
23201: LD_INT 6
23203: PUSH
23204: LD_VAR 0 7
23208: MINUS
23209: PUSH
23210: FOR_TO
23211: IFFALSE 23303
// begin if i = sort then
23213: LD_VAR 0 3
23217: PUSH
23218: LD_VAR 0 9
23222: EQUAL
23223: IFFALSE 23227
// break ;
23225: GO 23303
// if GetClass ( i ) = 3 then
23227: LD_VAR 0 3
23231: PPUSH
23232: CALL_OW 257
23236: PUSH
23237: LD_INT 3
23239: EQUAL
23240: IFFALSE 23244
// continue ;
23242: GO 23210
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23244: LD_ADDR_VAR 0 11
23248: PUSH
23249: LD_VAR 0 11
23253: PPUSH
23254: LD_VAR 0 11
23258: PUSH
23259: LD_INT 1
23261: PLUS
23262: PPUSH
23263: LD_VAR 0 9
23267: PUSH
23268: LD_VAR 0 3
23272: ARRAY
23273: PPUSH
23274: CALL_OW 2
23278: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23279: LD_ADDR_VAR 0 4
23283: PUSH
23284: LD_VAR 0 4
23288: PUSH
23289: LD_VAR 0 9
23293: PUSH
23294: LD_VAR 0 3
23298: ARRAY
23299: DIFF
23300: ST_TO_ADDR
// end ;
23301: GO 23210
23303: POP
23304: POP
// if p then
23305: LD_VAR 0 11
23309: IFFALSE 23334
// result := Replace ( result , 3 , p ) ;
23311: LD_ADDR_VAR 0 2
23315: PUSH
23316: LD_VAR 0 2
23320: PPUSH
23321: LD_INT 3
23323: PPUSH
23324: LD_VAR 0 11
23328: PPUSH
23329: CALL_OW 1
23333: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
23334: LD_VAR 0 4
23338: PUSH
23339: LD_INT 6
23341: GREATER
23342: PUSH
23343: LD_VAR 0 6
23347: PUSH
23348: LD_INT 6
23350: LESS
23351: AND
23352: IFFALSE 23546
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23354: LD_ADDR_VAR 0 9
23358: PUSH
23359: LD_VAR 0 4
23363: PUSH
23364: LD_VAR 0 8
23368: PUSH
23369: LD_VAR 0 7
23373: UNION
23374: PUSH
23375: LD_VAR 0 6
23379: UNION
23380: DIFF
23381: PPUSH
23382: LD_INT 2
23384: PPUSH
23385: CALL 86899 0 2
23389: ST_TO_ADDR
// p := [ ] ;
23390: LD_ADDR_VAR 0 11
23394: PUSH
23395: EMPTY
23396: ST_TO_ADDR
// if sort then
23397: LD_VAR 0 9
23401: IFFALSE 23517
// for i = 1 to 6 - eng do
23403: LD_ADDR_VAR 0 3
23407: PUSH
23408: DOUBLE
23409: LD_INT 1
23411: DEC
23412: ST_TO_ADDR
23413: LD_INT 6
23415: PUSH
23416: LD_VAR 0 6
23420: MINUS
23421: PUSH
23422: FOR_TO
23423: IFFALSE 23515
// begin if i = sort then
23425: LD_VAR 0 3
23429: PUSH
23430: LD_VAR 0 9
23434: EQUAL
23435: IFFALSE 23439
// break ;
23437: GO 23515
// if GetClass ( i ) = 2 then
23439: LD_VAR 0 3
23443: PPUSH
23444: CALL_OW 257
23448: PUSH
23449: LD_INT 2
23451: EQUAL
23452: IFFALSE 23456
// continue ;
23454: GO 23422
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23456: LD_ADDR_VAR 0 11
23460: PUSH
23461: LD_VAR 0 11
23465: PPUSH
23466: LD_VAR 0 11
23470: PUSH
23471: LD_INT 1
23473: PLUS
23474: PPUSH
23475: LD_VAR 0 9
23479: PUSH
23480: LD_VAR 0 3
23484: ARRAY
23485: PPUSH
23486: CALL_OW 2
23490: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23491: LD_ADDR_VAR 0 4
23495: PUSH
23496: LD_VAR 0 4
23500: PUSH
23501: LD_VAR 0 9
23505: PUSH
23506: LD_VAR 0 3
23510: ARRAY
23511: DIFF
23512: ST_TO_ADDR
// end ;
23513: GO 23422
23515: POP
23516: POP
// if p then
23517: LD_VAR 0 11
23521: IFFALSE 23546
// result := Replace ( result , 2 , p ) ;
23523: LD_ADDR_VAR 0 2
23527: PUSH
23528: LD_VAR 0 2
23532: PPUSH
23533: LD_INT 2
23535: PPUSH
23536: LD_VAR 0 11
23540: PPUSH
23541: CALL_OW 1
23545: ST_TO_ADDR
// end ; exit ;
23546: GO 24934
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
23548: LD_EXP 76
23552: PUSH
23553: LD_EXP 75
23557: PUSH
23558: LD_VAR 0 1
23562: ARRAY
23563: ARRAY
23564: NOT
23565: PUSH
23566: LD_EXP 49
23570: PUSH
23571: LD_VAR 0 1
23575: ARRAY
23576: PPUSH
23577: LD_INT 30
23579: PUSH
23580: LD_INT 3
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PPUSH
23587: CALL_OW 72
23591: AND
23592: PUSH
23593: LD_EXP 54
23597: PUSH
23598: LD_VAR 0 1
23602: ARRAY
23603: AND
23604: IFFALSE 24212
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
23606: LD_ADDR_EXP 91
23610: PUSH
23611: LD_EXP 91
23615: PPUSH
23616: LD_VAR 0 1
23620: PPUSH
23621: LD_INT 5
23623: PPUSH
23624: CALL_OW 1
23628: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: ST_TO_ADDR
// if sci > 1 then
23652: LD_VAR 0 8
23656: PUSH
23657: LD_INT 1
23659: GREATER
23660: IFFALSE 23688
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
23662: LD_ADDR_VAR 0 4
23666: PUSH
23667: LD_VAR 0 4
23671: PUSH
23672: LD_VAR 0 8
23676: PUSH
23677: LD_VAR 0 8
23681: PUSH
23682: LD_INT 1
23684: ARRAY
23685: DIFF
23686: DIFF
23687: ST_TO_ADDR
// if tmp and not sci then
23688: LD_VAR 0 4
23692: PUSH
23693: LD_VAR 0 8
23697: NOT
23698: AND
23699: IFFALSE 23768
// begin sort := SortBySkill ( tmp , 4 ) ;
23701: LD_ADDR_VAR 0 9
23705: PUSH
23706: LD_VAR 0 4
23710: PPUSH
23711: LD_INT 4
23713: PPUSH
23714: CALL 86899 0 2
23718: ST_TO_ADDR
// if sort then
23719: LD_VAR 0 9
23723: IFFALSE 23739
// p := sort [ 1 ] ;
23725: LD_ADDR_VAR 0 11
23729: PUSH
23730: LD_VAR 0 9
23734: PUSH
23735: LD_INT 1
23737: ARRAY
23738: ST_TO_ADDR
// if p then
23739: LD_VAR 0 11
23743: IFFALSE 23768
// result := Replace ( result , 4 , p ) ;
23745: LD_ADDR_VAR 0 2
23749: PUSH
23750: LD_VAR 0 2
23754: PPUSH
23755: LD_INT 4
23757: PPUSH
23758: LD_VAR 0 11
23762: PPUSH
23763: CALL_OW 1
23767: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23768: LD_ADDR_VAR 0 4
23772: PUSH
23773: LD_VAR 0 4
23777: PUSH
23778: LD_VAR 0 7
23782: DIFF
23783: ST_TO_ADDR
// if tmp and mech < 6 then
23784: LD_VAR 0 4
23788: PUSH
23789: LD_VAR 0 7
23793: PUSH
23794: LD_INT 6
23796: LESS
23797: AND
23798: IFFALSE 23986
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23800: LD_ADDR_VAR 0 9
23804: PUSH
23805: LD_VAR 0 4
23809: PUSH
23810: LD_VAR 0 8
23814: PUSH
23815: LD_VAR 0 7
23819: UNION
23820: DIFF
23821: PPUSH
23822: LD_INT 3
23824: PPUSH
23825: CALL 86899 0 2
23829: ST_TO_ADDR
// p := [ ] ;
23830: LD_ADDR_VAR 0 11
23834: PUSH
23835: EMPTY
23836: ST_TO_ADDR
// if sort then
23837: LD_VAR 0 9
23841: IFFALSE 23957
// for i = 1 to 6 - mech do
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: DOUBLE
23849: LD_INT 1
23851: DEC
23852: ST_TO_ADDR
23853: LD_INT 6
23855: PUSH
23856: LD_VAR 0 7
23860: MINUS
23861: PUSH
23862: FOR_TO
23863: IFFALSE 23955
// begin if i = sort then
23865: LD_VAR 0 3
23869: PUSH
23870: LD_VAR 0 9
23874: EQUAL
23875: IFFALSE 23879
// break ;
23877: GO 23955
// if GetClass ( i ) = 3 then
23879: LD_VAR 0 3
23883: PPUSH
23884: CALL_OW 257
23888: PUSH
23889: LD_INT 3
23891: EQUAL
23892: IFFALSE 23896
// continue ;
23894: GO 23862
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23896: LD_ADDR_VAR 0 11
23900: PUSH
23901: LD_VAR 0 11
23905: PPUSH
23906: LD_VAR 0 11
23910: PUSH
23911: LD_INT 1
23913: PLUS
23914: PPUSH
23915: LD_VAR 0 9
23919: PUSH
23920: LD_VAR 0 3
23924: ARRAY
23925: PPUSH
23926: CALL_OW 2
23930: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23931: LD_ADDR_VAR 0 4
23935: PUSH
23936: LD_VAR 0 4
23940: PUSH
23941: LD_VAR 0 9
23945: PUSH
23946: LD_VAR 0 3
23950: ARRAY
23951: DIFF
23952: ST_TO_ADDR
// end ;
23953: GO 23862
23955: POP
23956: POP
// if p then
23957: LD_VAR 0 11
23961: IFFALSE 23986
// result := Replace ( result , 3 , p ) ;
23963: LD_ADDR_VAR 0 2
23967: PUSH
23968: LD_VAR 0 2
23972: PPUSH
23973: LD_INT 3
23975: PPUSH
23976: LD_VAR 0 11
23980: PPUSH
23981: CALL_OW 1
23985: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23986: LD_ADDR_VAR 0 4
23990: PUSH
23991: LD_VAR 0 4
23995: PUSH
23996: LD_VAR 0 6
24000: DIFF
24001: ST_TO_ADDR
// if tmp and eng < 6 then
24002: LD_VAR 0 4
24006: PUSH
24007: LD_VAR 0 6
24011: PUSH
24012: LD_INT 6
24014: LESS
24015: AND
24016: IFFALSE 24210
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24018: LD_ADDR_VAR 0 9
24022: PUSH
24023: LD_VAR 0 4
24027: PUSH
24028: LD_VAR 0 8
24032: PUSH
24033: LD_VAR 0 7
24037: UNION
24038: PUSH
24039: LD_VAR 0 6
24043: UNION
24044: DIFF
24045: PPUSH
24046: LD_INT 2
24048: PPUSH
24049: CALL 86899 0 2
24053: ST_TO_ADDR
// p := [ ] ;
24054: LD_ADDR_VAR 0 11
24058: PUSH
24059: EMPTY
24060: ST_TO_ADDR
// if sort then
24061: LD_VAR 0 9
24065: IFFALSE 24181
// for i = 1 to 6 - eng do
24067: LD_ADDR_VAR 0 3
24071: PUSH
24072: DOUBLE
24073: LD_INT 1
24075: DEC
24076: ST_TO_ADDR
24077: LD_INT 6
24079: PUSH
24080: LD_VAR 0 6
24084: MINUS
24085: PUSH
24086: FOR_TO
24087: IFFALSE 24179
// begin if i = sort then
24089: LD_VAR 0 3
24093: PUSH
24094: LD_VAR 0 9
24098: EQUAL
24099: IFFALSE 24103
// break ;
24101: GO 24179
// if GetClass ( i ) = 2 then
24103: LD_VAR 0 3
24107: PPUSH
24108: CALL_OW 257
24112: PUSH
24113: LD_INT 2
24115: EQUAL
24116: IFFALSE 24120
// continue ;
24118: GO 24086
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24120: LD_ADDR_VAR 0 11
24124: PUSH
24125: LD_VAR 0 11
24129: PPUSH
24130: LD_VAR 0 11
24134: PUSH
24135: LD_INT 1
24137: PLUS
24138: PPUSH
24139: LD_VAR 0 9
24143: PUSH
24144: LD_VAR 0 3
24148: ARRAY
24149: PPUSH
24150: CALL_OW 2
24154: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24155: LD_ADDR_VAR 0 4
24159: PUSH
24160: LD_VAR 0 4
24164: PUSH
24165: LD_VAR 0 9
24169: PUSH
24170: LD_VAR 0 3
24174: ARRAY
24175: DIFF
24176: ST_TO_ADDR
// end ;
24177: GO 24086
24179: POP
24180: POP
// if p then
24181: LD_VAR 0 11
24185: IFFALSE 24210
// result := Replace ( result , 2 , p ) ;
24187: LD_ADDR_VAR 0 2
24191: PUSH
24192: LD_VAR 0 2
24196: PPUSH
24197: LD_INT 2
24199: PPUSH
24200: LD_VAR 0 11
24204: PPUSH
24205: CALL_OW 1
24209: ST_TO_ADDR
// end ; exit ;
24210: GO 24934
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24212: LD_EXP 76
24216: PUSH
24217: LD_EXP 75
24221: PUSH
24222: LD_VAR 0 1
24226: ARRAY
24227: ARRAY
24228: NOT
24229: PUSH
24230: LD_EXP 49
24234: PUSH
24235: LD_VAR 0 1
24239: ARRAY
24240: PPUSH
24241: LD_INT 30
24243: PUSH
24244: LD_INT 3
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PPUSH
24251: CALL_OW 72
24255: AND
24256: PUSH
24257: LD_EXP 54
24261: PUSH
24262: LD_VAR 0 1
24266: ARRAY
24267: NOT
24268: AND
24269: IFFALSE 24934
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24271: LD_ADDR_EXP 91
24275: PUSH
24276: LD_EXP 91
24280: PPUSH
24281: LD_VAR 0 1
24285: PPUSH
24286: LD_INT 6
24288: PPUSH
24289: CALL_OW 1
24293: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24294: LD_ADDR_VAR 0 2
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: ST_TO_ADDR
// if sci >= 1 then
24317: LD_VAR 0 8
24321: PUSH
24322: LD_INT 1
24324: GREATEREQUAL
24325: IFFALSE 24347
// tmp := tmp diff sci [ 1 ] ;
24327: LD_ADDR_VAR 0 4
24331: PUSH
24332: LD_VAR 0 4
24336: PUSH
24337: LD_VAR 0 8
24341: PUSH
24342: LD_INT 1
24344: ARRAY
24345: DIFF
24346: ST_TO_ADDR
// if tmp and not sci then
24347: LD_VAR 0 4
24351: PUSH
24352: LD_VAR 0 8
24356: NOT
24357: AND
24358: IFFALSE 24427
// begin sort := SortBySkill ( tmp , 4 ) ;
24360: LD_ADDR_VAR 0 9
24364: PUSH
24365: LD_VAR 0 4
24369: PPUSH
24370: LD_INT 4
24372: PPUSH
24373: CALL 86899 0 2
24377: ST_TO_ADDR
// if sort then
24378: LD_VAR 0 9
24382: IFFALSE 24398
// p := sort [ 1 ] ;
24384: LD_ADDR_VAR 0 11
24388: PUSH
24389: LD_VAR 0 9
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: ST_TO_ADDR
// if p then
24398: LD_VAR 0 11
24402: IFFALSE 24427
// result := Replace ( result , 4 , p ) ;
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: LD_VAR 0 2
24413: PPUSH
24414: LD_INT 4
24416: PPUSH
24417: LD_VAR 0 11
24421: PPUSH
24422: CALL_OW 1
24426: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24427: LD_ADDR_VAR 0 4
24431: PUSH
24432: LD_VAR 0 4
24436: PUSH
24437: LD_VAR 0 7
24441: DIFF
24442: ST_TO_ADDR
// if tmp and mech < 6 then
24443: LD_VAR 0 4
24447: PUSH
24448: LD_VAR 0 7
24452: PUSH
24453: LD_INT 6
24455: LESS
24456: AND
24457: IFFALSE 24639
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
24459: LD_ADDR_VAR 0 9
24463: PUSH
24464: LD_VAR 0 4
24468: PUSH
24469: LD_VAR 0 7
24473: DIFF
24474: PPUSH
24475: LD_INT 3
24477: PPUSH
24478: CALL 86899 0 2
24482: ST_TO_ADDR
// p := [ ] ;
24483: LD_ADDR_VAR 0 11
24487: PUSH
24488: EMPTY
24489: ST_TO_ADDR
// if sort then
24490: LD_VAR 0 9
24494: IFFALSE 24610
// for i = 1 to 6 - mech do
24496: LD_ADDR_VAR 0 3
24500: PUSH
24501: DOUBLE
24502: LD_INT 1
24504: DEC
24505: ST_TO_ADDR
24506: LD_INT 6
24508: PUSH
24509: LD_VAR 0 7
24513: MINUS
24514: PUSH
24515: FOR_TO
24516: IFFALSE 24608
// begin if i = sort then
24518: LD_VAR 0 3
24522: PUSH
24523: LD_VAR 0 9
24527: EQUAL
24528: IFFALSE 24532
// break ;
24530: GO 24608
// if GetClass ( i ) = 3 then
24532: LD_VAR 0 3
24536: PPUSH
24537: CALL_OW 257
24541: PUSH
24542: LD_INT 3
24544: EQUAL
24545: IFFALSE 24549
// continue ;
24547: GO 24515
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24549: LD_ADDR_VAR 0 11
24553: PUSH
24554: LD_VAR 0 11
24558: PPUSH
24559: LD_VAR 0 11
24563: PUSH
24564: LD_INT 1
24566: PLUS
24567: PPUSH
24568: LD_VAR 0 9
24572: PUSH
24573: LD_VAR 0 3
24577: ARRAY
24578: PPUSH
24579: CALL_OW 2
24583: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24584: LD_ADDR_VAR 0 4
24588: PUSH
24589: LD_VAR 0 4
24593: PUSH
24594: LD_VAR 0 9
24598: PUSH
24599: LD_VAR 0 3
24603: ARRAY
24604: DIFF
24605: ST_TO_ADDR
// end ;
24606: GO 24515
24608: POP
24609: POP
// if p then
24610: LD_VAR 0 11
24614: IFFALSE 24639
// result := Replace ( result , 3 , p ) ;
24616: LD_ADDR_VAR 0 2
24620: PUSH
24621: LD_VAR 0 2
24625: PPUSH
24626: LD_INT 3
24628: PPUSH
24629: LD_VAR 0 11
24633: PPUSH
24634: CALL_OW 1
24638: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24639: LD_ADDR_VAR 0 4
24643: PUSH
24644: LD_VAR 0 4
24648: PUSH
24649: LD_VAR 0 6
24653: DIFF
24654: ST_TO_ADDR
// if tmp and eng < 4 then
24655: LD_VAR 0 4
24659: PUSH
24660: LD_VAR 0 6
24664: PUSH
24665: LD_INT 4
24667: LESS
24668: AND
24669: IFFALSE 24859
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
24671: LD_ADDR_VAR 0 9
24675: PUSH
24676: LD_VAR 0 4
24680: PUSH
24681: LD_VAR 0 7
24685: PUSH
24686: LD_VAR 0 6
24690: UNION
24691: DIFF
24692: PPUSH
24693: LD_INT 2
24695: PPUSH
24696: CALL 86899 0 2
24700: ST_TO_ADDR
// p := [ ] ;
24701: LD_ADDR_VAR 0 11
24705: PUSH
24706: EMPTY
24707: ST_TO_ADDR
// if sort then
24708: LD_VAR 0 9
24712: IFFALSE 24828
// for i = 1 to 4 - eng do
24714: LD_ADDR_VAR 0 3
24718: PUSH
24719: DOUBLE
24720: LD_INT 1
24722: DEC
24723: ST_TO_ADDR
24724: LD_INT 4
24726: PUSH
24727: LD_VAR 0 6
24731: MINUS
24732: PUSH
24733: FOR_TO
24734: IFFALSE 24826
// begin if i = sort then
24736: LD_VAR 0 3
24740: PUSH
24741: LD_VAR 0 9
24745: EQUAL
24746: IFFALSE 24750
// break ;
24748: GO 24826
// if GetClass ( i ) = 2 then
24750: LD_VAR 0 3
24754: PPUSH
24755: CALL_OW 257
24759: PUSH
24760: LD_INT 2
24762: EQUAL
24763: IFFALSE 24767
// continue ;
24765: GO 24733
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24767: LD_ADDR_VAR 0 11
24771: PUSH
24772: LD_VAR 0 11
24776: PPUSH
24777: LD_VAR 0 11
24781: PUSH
24782: LD_INT 1
24784: PLUS
24785: PPUSH
24786: LD_VAR 0 9
24790: PUSH
24791: LD_VAR 0 3
24795: ARRAY
24796: PPUSH
24797: CALL_OW 2
24801: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24802: LD_ADDR_VAR 0 4
24806: PUSH
24807: LD_VAR 0 4
24811: PUSH
24812: LD_VAR 0 9
24816: PUSH
24817: LD_VAR 0 3
24821: ARRAY
24822: DIFF
24823: ST_TO_ADDR
// end ;
24824: GO 24733
24826: POP
24827: POP
// if p then
24828: LD_VAR 0 11
24832: IFFALSE 24857
// result := Replace ( result , 2 , p ) ;
24834: LD_ADDR_VAR 0 2
24838: PUSH
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_INT 2
24846: PPUSH
24847: LD_VAR 0 11
24851: PPUSH
24852: CALL_OW 1
24856: ST_TO_ADDR
// end else
24857: GO 24903
// for i = eng downto 5 do
24859: LD_ADDR_VAR 0 3
24863: PUSH
24864: DOUBLE
24865: LD_VAR 0 6
24869: INC
24870: ST_TO_ADDR
24871: LD_INT 5
24873: PUSH
24874: FOR_DOWNTO
24875: IFFALSE 24901
// tmp := tmp union eng [ i ] ;
24877: LD_ADDR_VAR 0 4
24881: PUSH
24882: LD_VAR 0 4
24886: PUSH
24887: LD_VAR 0 6
24891: PUSH
24892: LD_VAR 0 3
24896: ARRAY
24897: UNION
24898: ST_TO_ADDR
24899: GO 24874
24901: POP
24902: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
24903: LD_ADDR_VAR 0 2
24907: PUSH
24908: LD_VAR 0 2
24912: PPUSH
24913: LD_INT 1
24915: PPUSH
24916: LD_VAR 0 4
24920: PUSH
24921: LD_VAR 0 5
24925: DIFF
24926: PPUSH
24927: CALL_OW 1
24931: ST_TO_ADDR
// exit ;
24932: GO 24934
// end ; end ;
24934: LD_VAR 0 2
24938: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
24939: LD_INT 0
24941: PPUSH
24942: PPUSH
24943: PPUSH
// if not mc_bases then
24944: LD_EXP 49
24948: NOT
24949: IFFALSE 24953
// exit ;
24951: GO 25059
// for i = 1 to mc_bases do
24953: LD_ADDR_VAR 0 2
24957: PUSH
24958: DOUBLE
24959: LD_INT 1
24961: DEC
24962: ST_TO_ADDR
24963: LD_EXP 49
24967: PUSH
24968: FOR_TO
24969: IFFALSE 25050
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
24971: LD_ADDR_VAR 0 3
24975: PUSH
24976: LD_EXP 49
24980: PUSH
24981: LD_VAR 0 2
24985: ARRAY
24986: PPUSH
24987: LD_INT 21
24989: PUSH
24990: LD_INT 3
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 3
24999: PUSH
25000: LD_INT 24
25002: PUSH
25003: LD_INT 1000
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PPUSH
25018: CALL_OW 72
25022: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25023: LD_ADDR_EXP 50
25027: PUSH
25028: LD_EXP 50
25032: PPUSH
25033: LD_VAR 0 2
25037: PPUSH
25038: LD_VAR 0 3
25042: PPUSH
25043: CALL_OW 1
25047: ST_TO_ADDR
// end ;
25048: GO 24968
25050: POP
25051: POP
// RaiseSailEvent ( 101 ) ;
25052: LD_INT 101
25054: PPUSH
25055: CALL_OW 427
// end ;
25059: LD_VAR 0 1
25063: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25064: LD_INT 0
25066: PPUSH
25067: PPUSH
25068: PPUSH
25069: PPUSH
25070: PPUSH
25071: PPUSH
25072: PPUSH
// if not mc_bases then
25073: LD_EXP 49
25077: NOT
25078: IFFALSE 25082
// exit ;
25080: GO 25655
// for i = 1 to mc_bases do
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: DOUBLE
25088: LD_INT 1
25090: DEC
25091: ST_TO_ADDR
25092: LD_EXP 49
25096: PUSH
25097: FOR_TO
25098: IFFALSE 25646
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25100: LD_ADDR_VAR 0 5
25104: PUSH
25105: LD_EXP 49
25109: PUSH
25110: LD_VAR 0 2
25114: ARRAY
25115: PUSH
25116: LD_EXP 78
25120: PUSH
25121: LD_VAR 0 2
25125: ARRAY
25126: UNION
25127: PPUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 3
25143: PUSH
25144: LD_INT 54
25146: PUSH
25147: EMPTY
25148: LIST
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 3
25156: PUSH
25157: LD_INT 24
25159: PUSH
25160: LD_INT 800
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PPUSH
25180: CALL_OW 72
25184: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25185: LD_ADDR_VAR 0 6
25189: PUSH
25190: LD_EXP 49
25194: PUSH
25195: LD_VAR 0 2
25199: ARRAY
25200: PPUSH
25201: LD_INT 21
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: LD_INT 3
25216: PUSH
25217: LD_INT 54
25219: PUSH
25220: EMPTY
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 3
25229: PUSH
25230: LD_INT 24
25232: PUSH
25233: LD_INT 250
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PPUSH
25253: CALL_OW 72
25257: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25258: LD_ADDR_VAR 0 7
25262: PUSH
25263: LD_VAR 0 5
25267: PUSH
25268: LD_VAR 0 6
25272: DIFF
25273: ST_TO_ADDR
// if not need_heal_1 then
25274: LD_VAR 0 6
25278: NOT
25279: IFFALSE 25312
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25281: LD_ADDR_EXP 52
25285: PUSH
25286: LD_EXP 52
25290: PPUSH
25291: LD_VAR 0 2
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PPUSH
25303: EMPTY
25304: PPUSH
25305: CALL 52651 0 3
25309: ST_TO_ADDR
25310: GO 25382
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
25312: LD_ADDR_EXP 52
25316: PUSH
25317: LD_EXP 52
25321: PPUSH
25322: LD_VAR 0 2
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PPUSH
25334: LD_EXP 52
25338: PUSH
25339: LD_VAR 0 2
25343: ARRAY
25344: PUSH
25345: LD_INT 1
25347: ARRAY
25348: PPUSH
25349: LD_INT 3
25351: PUSH
25352: LD_INT 24
25354: PUSH
25355: LD_INT 1000
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PPUSH
25366: CALL_OW 72
25370: PUSH
25371: LD_VAR 0 6
25375: UNION
25376: PPUSH
25377: CALL 52651 0 3
25381: ST_TO_ADDR
// if not need_heal_2 then
25382: LD_VAR 0 7
25386: NOT
25387: IFFALSE 25420
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
25389: LD_ADDR_EXP 52
25393: PUSH
25394: LD_EXP 52
25398: PPUSH
25399: LD_VAR 0 2
25403: PUSH
25404: LD_INT 2
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PPUSH
25411: EMPTY
25412: PPUSH
25413: CALL 52651 0 3
25417: ST_TO_ADDR
25418: GO 25452
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
25420: LD_ADDR_EXP 52
25424: PUSH
25425: LD_EXP 52
25429: PPUSH
25430: LD_VAR 0 2
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PPUSH
25442: LD_VAR 0 7
25446: PPUSH
25447: CALL 52651 0 3
25451: ST_TO_ADDR
// if need_heal_2 then
25452: LD_VAR 0 7
25456: IFFALSE 25628
// for j in need_heal_2 do
25458: LD_ADDR_VAR 0 3
25462: PUSH
25463: LD_VAR 0 7
25467: PUSH
25468: FOR_IN
25469: IFFALSE 25626
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
25471: LD_ADDR_VAR 0 5
25475: PUSH
25476: LD_EXP 49
25480: PUSH
25481: LD_VAR 0 2
25485: ARRAY
25486: PPUSH
25487: LD_INT 2
25489: PUSH
25490: LD_INT 30
25492: PUSH
25493: LD_INT 6
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 30
25502: PUSH
25503: LD_INT 7
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 30
25512: PUSH
25513: LD_INT 8
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 30
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 30
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 25
25542: PUSH
25543: LD_INT 4
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: PPUSH
25559: CALL_OW 72
25563: ST_TO_ADDR
// if tmp then
25564: LD_VAR 0 5
25568: IFFALSE 25624
// begin k := NearestUnitToUnit ( tmp , j ) ;
25570: LD_ADDR_VAR 0 4
25574: PUSH
25575: LD_VAR 0 5
25579: PPUSH
25580: LD_VAR 0 3
25584: PPUSH
25585: CALL_OW 74
25589: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
25590: LD_VAR 0 3
25594: PPUSH
25595: LD_VAR 0 4
25599: PPUSH
25600: CALL_OW 296
25604: PUSH
25605: LD_INT 7
25607: GREATER
25608: IFFALSE 25624
// ComMoveUnit ( j , k ) ;
25610: LD_VAR 0 3
25614: PPUSH
25615: LD_VAR 0 4
25619: PPUSH
25620: CALL_OW 112
// end ; end ;
25624: GO 25468
25626: POP
25627: POP
// if not need_heal_1 and not need_heal_2 then
25628: LD_VAR 0 6
25632: NOT
25633: PUSH
25634: LD_VAR 0 7
25638: NOT
25639: AND
25640: IFFALSE 25644
// continue ;
25642: GO 25097
// end ;
25644: GO 25097
25646: POP
25647: POP
// RaiseSailEvent ( 102 ) ;
25648: LD_INT 102
25650: PPUSH
25651: CALL_OW 427
// end ;
25655: LD_VAR 0 1
25659: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
// if not mc_bases then
25667: LD_EXP 49
25671: NOT
25672: IFFALSE 25676
// exit ;
25674: GO 26061
// for i = 1 to mc_bases do
25676: LD_ADDR_VAR 0 2
25680: PUSH
25681: DOUBLE
25682: LD_INT 1
25684: DEC
25685: ST_TO_ADDR
25686: LD_EXP 49
25690: PUSH
25691: FOR_TO
25692: IFFALSE 26059
// begin if not mc_building_need_repair [ i ] then
25694: LD_EXP 50
25698: PUSH
25699: LD_VAR 0 2
25703: ARRAY
25704: NOT
25705: IFFALSE 25743
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
25707: LD_ADDR_EXP 51
25711: PUSH
25712: LD_EXP 51
25716: PPUSH
25717: LD_VAR 0 2
25721: PPUSH
25722: EMPTY
25723: PPUSH
25724: CALL_OW 1
25728: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
25729: LD_VAR 0 2
25733: PPUSH
25734: LD_INT 101
25736: PPUSH
25737: CALL 20781 0 2
// continue ;
25741: GO 25691
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
25743: LD_ADDR_EXP 55
25747: PUSH
25748: LD_EXP 55
25752: PPUSH
25753: LD_VAR 0 2
25757: PPUSH
25758: EMPTY
25759: PPUSH
25760: CALL_OW 1
25764: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25765: LD_VAR 0 2
25769: PPUSH
25770: LD_INT 103
25772: PPUSH
25773: CALL 20781 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
25777: LD_ADDR_VAR 0 5
25781: PUSH
25782: LD_EXP 49
25786: PUSH
25787: LD_VAR 0 2
25791: ARRAY
25792: PUSH
25793: LD_EXP 78
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: UNION
25804: PPUSH
25805: LD_INT 2
25807: PUSH
25808: LD_INT 25
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 25
25820: PUSH
25821: LD_INT 16
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: PPUSH
25836: CALL_OW 72
25840: ST_TO_ADDR
// if not tmp then
25841: LD_VAR 0 5
25845: NOT
25846: IFFALSE 25850
// continue ;
25848: GO 25691
// for j in tmp do
25850: LD_ADDR_VAR 0 3
25854: PUSH
25855: LD_VAR 0 5
25859: PUSH
25860: FOR_IN
25861: IFFALSE 26055
// begin if mc_need_heal [ i ] then
25863: LD_EXP 52
25867: PUSH
25868: LD_VAR 0 2
25872: ARRAY
25873: IFFALSE 25921
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
25875: LD_VAR 0 3
25879: PUSH
25880: LD_EXP 52
25884: PUSH
25885: LD_VAR 0 2
25889: ARRAY
25890: PUSH
25891: LD_INT 1
25893: ARRAY
25894: IN
25895: PUSH
25896: LD_VAR 0 3
25900: PUSH
25901: LD_EXP 52
25905: PUSH
25906: LD_VAR 0 2
25910: ARRAY
25911: PUSH
25912: LD_INT 2
25914: ARRAY
25915: IN
25916: OR
25917: IFFALSE 25921
// continue ;
25919: GO 25860
// if IsInUnit ( j ) then
25921: LD_VAR 0 3
25925: PPUSH
25926: CALL_OW 310
25930: IFFALSE 25941
// ComExitBuilding ( j ) ;
25932: LD_VAR 0 3
25936: PPUSH
25937: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
25941: LD_VAR 0 3
25945: PUSH
25946: LD_EXP 51
25950: PUSH
25951: LD_VAR 0 2
25955: ARRAY
25956: IN
25957: NOT
25958: IFFALSE 26016
// begin SetTag ( j , 101 ) ;
25960: LD_VAR 0 3
25964: PPUSH
25965: LD_INT 101
25967: PPUSH
25968: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
25972: LD_ADDR_EXP 51
25976: PUSH
25977: LD_EXP 51
25981: PPUSH
25982: LD_VAR 0 2
25986: PUSH
25987: LD_EXP 51
25991: PUSH
25992: LD_VAR 0 2
25996: ARRAY
25997: PUSH
25998: LD_INT 1
26000: PLUS
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PPUSH
26006: LD_VAR 0 3
26010: PPUSH
26011: CALL 52651 0 3
26015: ST_TO_ADDR
// end ; wait ( 1 ) ;
26016: LD_INT 1
26018: PPUSH
26019: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
26023: LD_VAR 0 3
26027: PPUSH
26028: LD_EXP 50
26032: PUSH
26033: LD_VAR 0 2
26037: ARRAY
26038: PPUSH
26039: LD_VAR 0 3
26043: PPUSH
26044: CALL_OW 74
26048: PPUSH
26049: CALL_OW 130
// end ;
26053: GO 25860
26055: POP
26056: POP
// end ;
26057: GO 25691
26059: POP
26060: POP
// end ;
26061: LD_VAR 0 1
26065: RET
// export function MC_Heal ; var i , j , tmp ; begin
26066: LD_INT 0
26068: PPUSH
26069: PPUSH
26070: PPUSH
26071: PPUSH
// if not mc_bases then
26072: LD_EXP 49
26076: NOT
26077: IFFALSE 26081
// exit ;
26079: GO 26483
// for i = 1 to mc_bases do
26081: LD_ADDR_VAR 0 2
26085: PUSH
26086: DOUBLE
26087: LD_INT 1
26089: DEC
26090: ST_TO_ADDR
26091: LD_EXP 49
26095: PUSH
26096: FOR_TO
26097: IFFALSE 26481
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
26099: LD_EXP 52
26103: PUSH
26104: LD_VAR 0 2
26108: ARRAY
26109: PUSH
26110: LD_INT 1
26112: ARRAY
26113: NOT
26114: PUSH
26115: LD_EXP 52
26119: PUSH
26120: LD_VAR 0 2
26124: ARRAY
26125: PUSH
26126: LD_INT 2
26128: ARRAY
26129: NOT
26130: AND
26131: IFFALSE 26169
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
26133: LD_ADDR_EXP 53
26137: PUSH
26138: LD_EXP 53
26142: PPUSH
26143: LD_VAR 0 2
26147: PPUSH
26148: EMPTY
26149: PPUSH
26150: CALL_OW 1
26154: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
26155: LD_VAR 0 2
26159: PPUSH
26160: LD_INT 102
26162: PPUSH
26163: CALL 20781 0 2
// continue ;
26167: GO 26096
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
26169: LD_ADDR_VAR 0 4
26173: PUSH
26174: LD_EXP 49
26178: PUSH
26179: LD_VAR 0 2
26183: ARRAY
26184: PPUSH
26185: LD_INT 25
26187: PUSH
26188: LD_INT 4
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PPUSH
26195: CALL_OW 72
26199: ST_TO_ADDR
// if not tmp then
26200: LD_VAR 0 4
26204: NOT
26205: IFFALSE 26209
// continue ;
26207: GO 26096
// if mc_taming [ i ] then
26209: LD_EXP 80
26213: PUSH
26214: LD_VAR 0 2
26218: ARRAY
26219: IFFALSE 26243
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
26221: LD_ADDR_EXP 80
26225: PUSH
26226: LD_EXP 80
26230: PPUSH
26231: LD_VAR 0 2
26235: PPUSH
26236: EMPTY
26237: PPUSH
26238: CALL_OW 1
26242: ST_TO_ADDR
// for j in tmp do
26243: LD_ADDR_VAR 0 3
26247: PUSH
26248: LD_VAR 0 4
26252: PUSH
26253: FOR_IN
26254: IFFALSE 26477
// begin if IsInUnit ( j ) then
26256: LD_VAR 0 3
26260: PPUSH
26261: CALL_OW 310
26265: IFFALSE 26276
// ComExitBuilding ( j ) ;
26267: LD_VAR 0 3
26271: PPUSH
26272: CALL_OW 122
// if not j in mc_healers [ i ] then
26276: LD_VAR 0 3
26280: PUSH
26281: LD_EXP 53
26285: PUSH
26286: LD_VAR 0 2
26290: ARRAY
26291: IN
26292: NOT
26293: IFFALSE 26339
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
26295: LD_ADDR_EXP 53
26299: PUSH
26300: LD_EXP 53
26304: PPUSH
26305: LD_VAR 0 2
26309: PUSH
26310: LD_EXP 53
26314: PUSH
26315: LD_VAR 0 2
26319: ARRAY
26320: PUSH
26321: LD_INT 1
26323: PLUS
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PPUSH
26329: LD_VAR 0 3
26333: PPUSH
26334: CALL 52651 0 3
26338: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
26339: LD_VAR 0 3
26343: PPUSH
26344: CALL_OW 110
26348: PUSH
26349: LD_INT 102
26351: NONEQUAL
26352: IFFALSE 26366
// SetTag ( j , 102 ) ;
26354: LD_VAR 0 3
26358: PPUSH
26359: LD_INT 102
26361: PPUSH
26362: CALL_OW 109
// Wait ( 3 ) ;
26366: LD_INT 3
26368: PPUSH
26369: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
26373: LD_EXP 52
26377: PUSH
26378: LD_VAR 0 2
26382: ARRAY
26383: PUSH
26384: LD_INT 1
26386: ARRAY
26387: IFFALSE 26419
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
26389: LD_VAR 0 3
26393: PPUSH
26394: LD_EXP 52
26398: PUSH
26399: LD_VAR 0 2
26403: ARRAY
26404: PUSH
26405: LD_INT 1
26407: ARRAY
26408: PUSH
26409: LD_INT 1
26411: ARRAY
26412: PPUSH
26413: CALL_OW 128
26417: GO 26475
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
26419: LD_VAR 0 3
26423: PPUSH
26424: CALL_OW 314
26428: NOT
26429: PUSH
26430: LD_EXP 52
26434: PUSH
26435: LD_VAR 0 2
26439: ARRAY
26440: PUSH
26441: LD_INT 2
26443: ARRAY
26444: AND
26445: IFFALSE 26475
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
26447: LD_VAR 0 3
26451: PPUSH
26452: LD_EXP 52
26456: PUSH
26457: LD_VAR 0 2
26461: ARRAY
26462: PUSH
26463: LD_INT 2
26465: ARRAY
26466: PUSH
26467: LD_INT 1
26469: ARRAY
26470: PPUSH
26471: CALL_OW 128
// end ;
26475: GO 26253
26477: POP
26478: POP
// end ;
26479: GO 26096
26481: POP
26482: POP
// end ;
26483: LD_VAR 0 1
26487: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
26488: LD_INT 0
26490: PPUSH
26491: PPUSH
26492: PPUSH
26493: PPUSH
26494: PPUSH
// if not mc_bases then
26495: LD_EXP 49
26499: NOT
26500: IFFALSE 26504
// exit ;
26502: GO 27647
// for i = 1 to mc_bases do
26504: LD_ADDR_VAR 0 2
26508: PUSH
26509: DOUBLE
26510: LD_INT 1
26512: DEC
26513: ST_TO_ADDR
26514: LD_EXP 49
26518: PUSH
26519: FOR_TO
26520: IFFALSE 27645
// begin if mc_scan [ i ] then
26522: LD_EXP 72
26526: PUSH
26527: LD_VAR 0 2
26531: ARRAY
26532: IFFALSE 26536
// continue ;
26534: GO 26519
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
26536: LD_EXP 54
26540: PUSH
26541: LD_VAR 0 2
26545: ARRAY
26546: NOT
26547: PUSH
26548: LD_EXP 56
26552: PUSH
26553: LD_VAR 0 2
26557: ARRAY
26558: NOT
26559: AND
26560: PUSH
26561: LD_EXP 55
26565: PUSH
26566: LD_VAR 0 2
26570: ARRAY
26571: AND
26572: IFFALSE 26610
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
26574: LD_ADDR_EXP 55
26578: PUSH
26579: LD_EXP 55
26583: PPUSH
26584: LD_VAR 0 2
26588: PPUSH
26589: EMPTY
26590: PPUSH
26591: CALL_OW 1
26595: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26596: LD_VAR 0 2
26600: PPUSH
26601: LD_INT 103
26603: PPUSH
26604: CALL 20781 0 2
// continue ;
26608: GO 26519
// end ; if mc_construct_list [ i ] then
26610: LD_EXP 56
26614: PUSH
26615: LD_VAR 0 2
26619: ARRAY
26620: IFFALSE 26840
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
26622: LD_ADDR_VAR 0 4
26626: PUSH
26627: LD_EXP 49
26631: PUSH
26632: LD_VAR 0 2
26636: ARRAY
26637: PPUSH
26638: LD_INT 25
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PPUSH
26648: CALL_OW 72
26652: PUSH
26653: LD_EXP 51
26657: PUSH
26658: LD_VAR 0 2
26662: ARRAY
26663: DIFF
26664: ST_TO_ADDR
// if not tmp then
26665: LD_VAR 0 4
26669: NOT
26670: IFFALSE 26674
// continue ;
26672: GO 26519
// for j in tmp do
26674: LD_ADDR_VAR 0 3
26678: PUSH
26679: LD_VAR 0 4
26683: PUSH
26684: FOR_IN
26685: IFFALSE 26836
// begin if not mc_builders [ i ] then
26687: LD_EXP 55
26691: PUSH
26692: LD_VAR 0 2
26696: ARRAY
26697: NOT
26698: IFFALSE 26756
// begin SetTag ( j , 103 ) ;
26700: LD_VAR 0 3
26704: PPUSH
26705: LD_INT 103
26707: PPUSH
26708: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
26712: LD_ADDR_EXP 55
26716: PUSH
26717: LD_EXP 55
26721: PPUSH
26722: LD_VAR 0 2
26726: PUSH
26727: LD_EXP 55
26731: PUSH
26732: LD_VAR 0 2
26736: ARRAY
26737: PUSH
26738: LD_INT 1
26740: PLUS
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PPUSH
26746: LD_VAR 0 3
26750: PPUSH
26751: CALL 52651 0 3
26755: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 310
26765: IFFALSE 26776
// ComExitBuilding ( j ) ;
26767: LD_VAR 0 3
26771: PPUSH
26772: CALL_OW 122
// wait ( 3 ) ;
26776: LD_INT 3
26778: PPUSH
26779: CALL_OW 67
// if not mc_construct_list [ i ] then
26783: LD_EXP 56
26787: PUSH
26788: LD_VAR 0 2
26792: ARRAY
26793: NOT
26794: IFFALSE 26798
// break ;
26796: GO 26836
// if not HasTask ( j ) then
26798: LD_VAR 0 3
26802: PPUSH
26803: CALL_OW 314
26807: NOT
26808: IFFALSE 26834
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
26810: LD_VAR 0 3
26814: PPUSH
26815: LD_EXP 56
26819: PUSH
26820: LD_VAR 0 2
26824: ARRAY
26825: PUSH
26826: LD_INT 1
26828: ARRAY
26829: PPUSH
26830: CALL 55502 0 2
// end ;
26834: GO 26684
26836: POP
26837: POP
// end else
26838: GO 27643
// if mc_build_list [ i ] then
26840: LD_EXP 54
26844: PUSH
26845: LD_VAR 0 2
26849: ARRAY
26850: IFFALSE 27643
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
26852: LD_ADDR_VAR 0 5
26856: PUSH
26857: LD_EXP 49
26861: PUSH
26862: LD_VAR 0 2
26866: ARRAY
26867: PPUSH
26868: LD_INT 2
26870: PUSH
26871: LD_INT 30
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 30
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: LIST
26895: PPUSH
26896: CALL_OW 72
26900: ST_TO_ADDR
// if depot then
26901: LD_VAR 0 5
26905: IFFALSE 26923
// depot := depot [ 1 ] else
26907: LD_ADDR_VAR 0 5
26911: PUSH
26912: LD_VAR 0 5
26916: PUSH
26917: LD_INT 1
26919: ARRAY
26920: ST_TO_ADDR
26921: GO 26931
// depot := 0 ;
26923: LD_ADDR_VAR 0 5
26927: PUSH
26928: LD_INT 0
26930: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
26931: LD_EXP 54
26935: PUSH
26936: LD_VAR 0 2
26940: ARRAY
26941: PUSH
26942: LD_INT 1
26944: ARRAY
26945: PUSH
26946: LD_INT 1
26948: ARRAY
26949: PPUSH
26950: CALL 55332 0 1
26954: PUSH
26955: LD_EXP 49
26959: PUSH
26960: LD_VAR 0 2
26964: ARRAY
26965: PPUSH
26966: LD_INT 2
26968: PUSH
26969: LD_INT 30
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 30
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: PPUSH
26994: CALL_OW 72
26998: NOT
26999: AND
27000: IFFALSE 27105
// begin for j = 1 to mc_build_list [ i ] do
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: DOUBLE
27008: LD_INT 1
27010: DEC
27011: ST_TO_ADDR
27012: LD_EXP 54
27016: PUSH
27017: LD_VAR 0 2
27021: ARRAY
27022: PUSH
27023: FOR_TO
27024: IFFALSE 27103
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
27026: LD_EXP 54
27030: PUSH
27031: LD_VAR 0 2
27035: ARRAY
27036: PUSH
27037: LD_VAR 0 3
27041: ARRAY
27042: PUSH
27043: LD_INT 1
27045: ARRAY
27046: PUSH
27047: LD_INT 2
27049: EQUAL
27050: IFFALSE 27101
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
27052: LD_ADDR_EXP 54
27056: PUSH
27057: LD_EXP 54
27061: PPUSH
27062: LD_VAR 0 2
27066: PPUSH
27067: LD_EXP 54
27071: PUSH
27072: LD_VAR 0 2
27076: ARRAY
27077: PPUSH
27078: LD_VAR 0 3
27082: PPUSH
27083: LD_INT 1
27085: PPUSH
27086: LD_INT 0
27088: PPUSH
27089: CALL 52069 0 4
27093: PPUSH
27094: CALL_OW 1
27098: ST_TO_ADDR
// break ;
27099: GO 27103
// end ;
27101: GO 27023
27103: POP
27104: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
27105: LD_EXP 54
27109: PUSH
27110: LD_VAR 0 2
27114: ARRAY
27115: PUSH
27116: LD_INT 1
27118: ARRAY
27119: PUSH
27120: LD_INT 1
27122: ARRAY
27123: PUSH
27124: LD_INT 0
27126: EQUAL
27127: PUSH
27128: LD_VAR 0 5
27132: PUSH
27133: LD_VAR 0 5
27137: PPUSH
27138: LD_EXP 54
27142: PUSH
27143: LD_VAR 0 2
27147: ARRAY
27148: PUSH
27149: LD_INT 1
27151: ARRAY
27152: PUSH
27153: LD_INT 1
27155: ARRAY
27156: PPUSH
27157: LD_EXP 54
27161: PUSH
27162: LD_VAR 0 2
27166: ARRAY
27167: PUSH
27168: LD_INT 1
27170: ARRAY
27171: PUSH
27172: LD_INT 2
27174: ARRAY
27175: PPUSH
27176: LD_EXP 54
27180: PUSH
27181: LD_VAR 0 2
27185: ARRAY
27186: PUSH
27187: LD_INT 1
27189: ARRAY
27190: PUSH
27191: LD_INT 3
27193: ARRAY
27194: PPUSH
27195: LD_EXP 54
27199: PUSH
27200: LD_VAR 0 2
27204: ARRAY
27205: PUSH
27206: LD_INT 1
27208: ARRAY
27209: PUSH
27210: LD_INT 4
27212: ARRAY
27213: PPUSH
27214: CALL 60066 0 5
27218: AND
27219: OR
27220: IFFALSE 27501
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27222: LD_ADDR_VAR 0 4
27226: PUSH
27227: LD_EXP 49
27231: PUSH
27232: LD_VAR 0 2
27236: ARRAY
27237: PPUSH
27238: LD_INT 25
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PPUSH
27248: CALL_OW 72
27252: PUSH
27253: LD_EXP 51
27257: PUSH
27258: LD_VAR 0 2
27262: ARRAY
27263: DIFF
27264: ST_TO_ADDR
// if not tmp then
27265: LD_VAR 0 4
27269: NOT
27270: IFFALSE 27274
// continue ;
27272: GO 26519
// for j in tmp do
27274: LD_ADDR_VAR 0 3
27278: PUSH
27279: LD_VAR 0 4
27283: PUSH
27284: FOR_IN
27285: IFFALSE 27497
// begin if not mc_builders [ i ] then
27287: LD_EXP 55
27291: PUSH
27292: LD_VAR 0 2
27296: ARRAY
27297: NOT
27298: IFFALSE 27356
// begin SetTag ( j , 103 ) ;
27300: LD_VAR 0 3
27304: PPUSH
27305: LD_INT 103
27307: PPUSH
27308: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27312: LD_ADDR_EXP 55
27316: PUSH
27317: LD_EXP 55
27321: PPUSH
27322: LD_VAR 0 2
27326: PUSH
27327: LD_EXP 55
27331: PUSH
27332: LD_VAR 0 2
27336: ARRAY
27337: PUSH
27338: LD_INT 1
27340: PLUS
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PPUSH
27346: LD_VAR 0 3
27350: PPUSH
27351: CALL 52651 0 3
27355: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27356: LD_VAR 0 3
27360: PPUSH
27361: CALL_OW 310
27365: IFFALSE 27376
// ComExitBuilding ( j ) ;
27367: LD_VAR 0 3
27371: PPUSH
27372: CALL_OW 122
// wait ( 3 ) ;
27376: LD_INT 3
27378: PPUSH
27379: CALL_OW 67
// if not mc_build_list [ i ] then
27383: LD_EXP 54
27387: PUSH
27388: LD_VAR 0 2
27392: ARRAY
27393: NOT
27394: IFFALSE 27398
// break ;
27396: GO 27497
// if not HasTask ( j ) then
27398: LD_VAR 0 3
27402: PPUSH
27403: CALL_OW 314
27407: NOT
27408: IFFALSE 27495
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
27410: LD_VAR 0 3
27414: PPUSH
27415: LD_EXP 54
27419: PUSH
27420: LD_VAR 0 2
27424: ARRAY
27425: PUSH
27426: LD_INT 1
27428: ARRAY
27429: PUSH
27430: LD_INT 1
27432: ARRAY
27433: PPUSH
27434: LD_EXP 54
27438: PUSH
27439: LD_VAR 0 2
27443: ARRAY
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PUSH
27449: LD_INT 2
27451: ARRAY
27452: PPUSH
27453: LD_EXP 54
27457: PUSH
27458: LD_VAR 0 2
27462: ARRAY
27463: PUSH
27464: LD_INT 1
27466: ARRAY
27467: PUSH
27468: LD_INT 3
27470: ARRAY
27471: PPUSH
27472: LD_EXP 54
27476: PUSH
27477: LD_VAR 0 2
27481: ARRAY
27482: PUSH
27483: LD_INT 1
27485: ARRAY
27486: PUSH
27487: LD_INT 4
27489: ARRAY
27490: PPUSH
27491: CALL_OW 145
// end ;
27495: GO 27284
27497: POP
27498: POP
// end else
27499: GO 27643
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
27501: LD_EXP 49
27505: PUSH
27506: LD_VAR 0 2
27510: ARRAY
27511: PPUSH
27512: LD_EXP 54
27516: PUSH
27517: LD_VAR 0 2
27521: ARRAY
27522: PUSH
27523: LD_INT 1
27525: ARRAY
27526: PUSH
27527: LD_INT 1
27529: ARRAY
27530: PPUSH
27531: LD_EXP 54
27535: PUSH
27536: LD_VAR 0 2
27540: ARRAY
27541: PUSH
27542: LD_INT 1
27544: ARRAY
27545: PUSH
27546: LD_INT 2
27548: ARRAY
27549: PPUSH
27550: LD_EXP 54
27554: PUSH
27555: LD_VAR 0 2
27559: ARRAY
27560: PUSH
27561: LD_INT 1
27563: ARRAY
27564: PUSH
27565: LD_INT 3
27567: ARRAY
27568: PPUSH
27569: LD_EXP 54
27573: PUSH
27574: LD_VAR 0 2
27578: ARRAY
27579: PUSH
27580: LD_INT 1
27582: ARRAY
27583: PUSH
27584: LD_INT 4
27586: ARRAY
27587: PPUSH
27588: CALL 59402 0 5
27592: NOT
27593: IFFALSE 27643
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
27595: LD_ADDR_EXP 54
27599: PUSH
27600: LD_EXP 54
27604: PPUSH
27605: LD_VAR 0 2
27609: PPUSH
27610: LD_EXP 54
27614: PUSH
27615: LD_VAR 0 2
27619: ARRAY
27620: PPUSH
27621: LD_INT 1
27623: PPUSH
27624: LD_INT 1
27626: NEG
27627: PPUSH
27628: LD_INT 0
27630: PPUSH
27631: CALL 52069 0 4
27635: PPUSH
27636: CALL_OW 1
27640: ST_TO_ADDR
// continue ;
27641: GO 26519
// end ; end ; end ;
27643: GO 26519
27645: POP
27646: POP
// end ;
27647: LD_VAR 0 1
27651: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
27652: LD_INT 0
27654: PPUSH
27655: PPUSH
27656: PPUSH
27657: PPUSH
27658: PPUSH
27659: PPUSH
// if not mc_bases then
27660: LD_EXP 49
27664: NOT
27665: IFFALSE 27669
// exit ;
27667: GO 28096
// for i = 1 to mc_bases do
27669: LD_ADDR_VAR 0 2
27673: PUSH
27674: DOUBLE
27675: LD_INT 1
27677: DEC
27678: ST_TO_ADDR
27679: LD_EXP 49
27683: PUSH
27684: FOR_TO
27685: IFFALSE 28094
// begin tmp := mc_build_upgrade [ i ] ;
27687: LD_ADDR_VAR 0 4
27691: PUSH
27692: LD_EXP 81
27696: PUSH
27697: LD_VAR 0 2
27701: ARRAY
27702: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
27703: LD_ADDR_VAR 0 6
27707: PUSH
27708: LD_EXP 82
27712: PUSH
27713: LD_VAR 0 2
27717: ARRAY
27718: PPUSH
27719: LD_INT 2
27721: PUSH
27722: LD_INT 30
27724: PUSH
27725: LD_INT 6
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 30
27734: PUSH
27735: LD_INT 7
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: PPUSH
27747: CALL_OW 72
27751: ST_TO_ADDR
// if not tmp and not lab then
27752: LD_VAR 0 4
27756: NOT
27757: PUSH
27758: LD_VAR 0 6
27762: NOT
27763: AND
27764: IFFALSE 27768
// continue ;
27766: GO 27684
// if tmp then
27768: LD_VAR 0 4
27772: IFFALSE 27892
// for j in tmp do
27774: LD_ADDR_VAR 0 3
27778: PUSH
27779: LD_VAR 0 4
27783: PUSH
27784: FOR_IN
27785: IFFALSE 27890
// begin if UpgradeCost ( j ) then
27787: LD_VAR 0 3
27791: PPUSH
27792: CALL 59062 0 1
27796: IFFALSE 27888
// begin ComUpgrade ( j ) ;
27798: LD_VAR 0 3
27802: PPUSH
27803: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
27807: LD_ADDR_EXP 81
27811: PUSH
27812: LD_EXP 81
27816: PPUSH
27817: LD_VAR 0 2
27821: PPUSH
27822: LD_EXP 81
27826: PUSH
27827: LD_VAR 0 2
27831: ARRAY
27832: PUSH
27833: LD_VAR 0 3
27837: DIFF
27838: PPUSH
27839: CALL_OW 1
27843: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
27844: LD_ADDR_EXP 56
27848: PUSH
27849: LD_EXP 56
27853: PPUSH
27854: LD_VAR 0 2
27858: PUSH
27859: LD_EXP 56
27863: PUSH
27864: LD_VAR 0 2
27868: ARRAY
27869: PUSH
27870: LD_INT 1
27872: PLUS
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PPUSH
27878: LD_VAR 0 3
27882: PPUSH
27883: CALL 52651 0 3
27887: ST_TO_ADDR
// end ; end ;
27888: GO 27784
27890: POP
27891: POP
// if not lab or not mc_lab_upgrade [ i ] then
27892: LD_VAR 0 6
27896: NOT
27897: PUSH
27898: LD_EXP 83
27902: PUSH
27903: LD_VAR 0 2
27907: ARRAY
27908: NOT
27909: OR
27910: IFFALSE 27914
// continue ;
27912: GO 27684
// for j in lab do
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_VAR 0 6
27923: PUSH
27924: FOR_IN
27925: IFFALSE 28090
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
27927: LD_VAR 0 3
27931: PPUSH
27932: CALL_OW 266
27936: PUSH
27937: LD_INT 6
27939: PUSH
27940: LD_INT 7
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: IN
27947: PUSH
27948: LD_VAR 0 3
27952: PPUSH
27953: CALL_OW 461
27957: PUSH
27958: LD_INT 1
27960: NONEQUAL
27961: AND
27962: IFFALSE 28088
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
27964: LD_VAR 0 3
27968: PPUSH
27969: LD_EXP 83
27973: PUSH
27974: LD_VAR 0 2
27978: ARRAY
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PPUSH
27984: CALL 59267 0 2
27988: IFFALSE 28088
// begin ComCancel ( j ) ;
27990: LD_VAR 0 3
27994: PPUSH
27995: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
27999: LD_VAR 0 3
28003: PPUSH
28004: LD_EXP 83
28008: PUSH
28009: LD_VAR 0 2
28013: ARRAY
28014: PUSH
28015: LD_INT 1
28017: ARRAY
28018: PPUSH
28019: CALL_OW 207
// if not j in mc_construct_list [ i ] then
28023: LD_VAR 0 3
28027: PUSH
28028: LD_EXP 56
28032: PUSH
28033: LD_VAR 0 2
28037: ARRAY
28038: IN
28039: NOT
28040: IFFALSE 28086
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28042: LD_ADDR_EXP 56
28046: PUSH
28047: LD_EXP 56
28051: PPUSH
28052: LD_VAR 0 2
28056: PUSH
28057: LD_EXP 56
28061: PUSH
28062: LD_VAR 0 2
28066: ARRAY
28067: PUSH
28068: LD_INT 1
28070: PLUS
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PPUSH
28076: LD_VAR 0 3
28080: PPUSH
28081: CALL 52651 0 3
28085: ST_TO_ADDR
// break ;
28086: GO 28090
// end ; end ; end ;
28088: GO 27924
28090: POP
28091: POP
// end ;
28092: GO 27684
28094: POP
28095: POP
// end ;
28096: LD_VAR 0 1
28100: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
28101: LD_INT 0
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
28108: PPUSH
28109: PPUSH
28110: PPUSH
28111: PPUSH
// if not mc_bases then
28112: LD_EXP 49
28116: NOT
28117: IFFALSE 28121
// exit ;
28119: GO 28526
// for i = 1 to mc_bases do
28121: LD_ADDR_VAR 0 2
28125: PUSH
28126: DOUBLE
28127: LD_INT 1
28129: DEC
28130: ST_TO_ADDR
28131: LD_EXP 49
28135: PUSH
28136: FOR_TO
28137: IFFALSE 28524
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
28139: LD_EXP 57
28143: PUSH
28144: LD_VAR 0 2
28148: ARRAY
28149: NOT
28150: PUSH
28151: LD_EXP 49
28155: PUSH
28156: LD_VAR 0 2
28160: ARRAY
28161: PPUSH
28162: LD_INT 30
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PPUSH
28172: CALL_OW 72
28176: NOT
28177: OR
28178: IFFALSE 28182
// continue ;
28180: GO 28136
// busy := false ;
28182: LD_ADDR_VAR 0 8
28186: PUSH
28187: LD_INT 0
28189: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
28190: LD_ADDR_VAR 0 4
28194: PUSH
28195: LD_EXP 49
28199: PUSH
28200: LD_VAR 0 2
28204: ARRAY
28205: PPUSH
28206: LD_INT 30
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PPUSH
28216: CALL_OW 72
28220: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
28221: LD_ADDR_VAR 0 6
28225: PUSH
28226: LD_EXP 57
28230: PUSH
28231: LD_VAR 0 2
28235: ARRAY
28236: PPUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 30
28242: PUSH
28243: LD_INT 32
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 30
28252: PUSH
28253: LD_INT 33
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: PPUSH
28265: CALL_OW 72
28269: ST_TO_ADDR
// if not t then
28270: LD_VAR 0 6
28274: NOT
28275: IFFALSE 28279
// continue ;
28277: GO 28136
// for j in tmp do
28279: LD_ADDR_VAR 0 3
28283: PUSH
28284: LD_VAR 0 4
28288: PUSH
28289: FOR_IN
28290: IFFALSE 28320
// if not BuildingStatus ( j ) = bs_idle then
28292: LD_VAR 0 3
28296: PPUSH
28297: CALL_OW 461
28301: PUSH
28302: LD_INT 2
28304: EQUAL
28305: NOT
28306: IFFALSE 28318
// begin busy := true ;
28308: LD_ADDR_VAR 0 8
28312: PUSH
28313: LD_INT 1
28315: ST_TO_ADDR
// break ;
28316: GO 28320
// end ;
28318: GO 28289
28320: POP
28321: POP
// if busy then
28322: LD_VAR 0 8
28326: IFFALSE 28330
// continue ;
28328: GO 28136
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
28330: LD_ADDR_VAR 0 7
28334: PUSH
28335: LD_VAR 0 6
28339: PPUSH
28340: LD_INT 35
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PPUSH
28350: CALL_OW 72
28354: ST_TO_ADDR
// if tw then
28355: LD_VAR 0 7
28359: IFFALSE 28436
// begin tw := tw [ 1 ] ;
28361: LD_ADDR_VAR 0 7
28365: PUSH
28366: LD_VAR 0 7
28370: PUSH
28371: LD_INT 1
28373: ARRAY
28374: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
28375: LD_ADDR_VAR 0 9
28379: PUSH
28380: LD_VAR 0 7
28384: PPUSH
28385: LD_EXP 74
28389: PUSH
28390: LD_VAR 0 2
28394: ARRAY
28395: PPUSH
28396: CALL 57621 0 2
28400: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
28401: LD_EXP 88
28405: PUSH
28406: LD_VAR 0 2
28410: ARRAY
28411: IFFALSE 28434
// if not weapon in mc_allowed_tower_weapons [ i ] then
28413: LD_VAR 0 9
28417: PUSH
28418: LD_EXP 88
28422: PUSH
28423: LD_VAR 0 2
28427: ARRAY
28428: IN
28429: NOT
28430: IFFALSE 28434
// continue ;
28432: GO 28136
// end else
28434: GO 28499
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
28436: LD_ADDR_VAR 0 5
28440: PUSH
28441: LD_EXP 57
28445: PUSH
28446: LD_VAR 0 2
28450: ARRAY
28451: PPUSH
28452: LD_VAR 0 4
28456: PPUSH
28457: CALL 87822 0 2
28461: ST_TO_ADDR
// if not tmp2 then
28462: LD_VAR 0 5
28466: NOT
28467: IFFALSE 28471
// continue ;
28469: GO 28136
// tw := tmp2 [ 1 ] ;
28471: LD_ADDR_VAR 0 7
28475: PUSH
28476: LD_VAR 0 5
28480: PUSH
28481: LD_INT 1
28483: ARRAY
28484: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
28485: LD_ADDR_VAR 0 9
28489: PUSH
28490: LD_VAR 0 5
28494: PUSH
28495: LD_INT 2
28497: ARRAY
28498: ST_TO_ADDR
// end ; if not weapon then
28499: LD_VAR 0 9
28503: NOT
28504: IFFALSE 28508
// continue ;
28506: GO 28136
// ComPlaceWeapon ( tw , weapon ) ;
28508: LD_VAR 0 7
28512: PPUSH
28513: LD_VAR 0 9
28517: PPUSH
28518: CALL_OW 148
// end ;
28522: GO 28136
28524: POP
28525: POP
// end ;
28526: LD_VAR 0 1
28530: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
28531: LD_INT 0
28533: PPUSH
28534: PPUSH
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
// if not mc_bases then
28539: LD_EXP 49
28543: NOT
28544: IFFALSE 28548
// exit ;
28546: GO 29560
// for i = 1 to mc_bases do
28548: LD_ADDR_VAR 0 2
28552: PUSH
28553: DOUBLE
28554: LD_INT 1
28556: DEC
28557: ST_TO_ADDR
28558: LD_EXP 49
28562: PUSH
28563: FOR_TO
28564: IFFALSE 29558
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
28566: LD_EXP 62
28570: PUSH
28571: LD_VAR 0 2
28575: ARRAY
28576: NOT
28577: PUSH
28578: LD_EXP 62
28582: PUSH
28583: LD_VAR 0 2
28587: ARRAY
28588: PUSH
28589: LD_EXP 63
28593: PUSH
28594: LD_VAR 0 2
28598: ARRAY
28599: EQUAL
28600: OR
28601: IFFALSE 28605
// continue ;
28603: GO 28563
// if mc_miners [ i ] then
28605: LD_EXP 63
28609: PUSH
28610: LD_VAR 0 2
28614: ARRAY
28615: IFFALSE 29245
// begin k := 1 ;
28617: LD_ADDR_VAR 0 4
28621: PUSH
28622: LD_INT 1
28624: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
28625: LD_ADDR_VAR 0 3
28629: PUSH
28630: DOUBLE
28631: LD_EXP 63
28635: PUSH
28636: LD_VAR 0 2
28640: ARRAY
28641: INC
28642: ST_TO_ADDR
28643: LD_INT 1
28645: PUSH
28646: FOR_DOWNTO
28647: IFFALSE 29243
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
28649: LD_EXP 63
28653: PUSH
28654: LD_VAR 0 2
28658: ARRAY
28659: PUSH
28660: LD_VAR 0 3
28664: ARRAY
28665: PPUSH
28666: CALL_OW 301
28670: PUSH
28671: LD_EXP 63
28675: PUSH
28676: LD_VAR 0 2
28680: ARRAY
28681: PUSH
28682: LD_VAR 0 3
28686: ARRAY
28687: PPUSH
28688: CALL_OW 257
28692: PUSH
28693: LD_INT 1
28695: NONEQUAL
28696: OR
28697: IFFALSE 28760
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
28699: LD_ADDR_VAR 0 5
28703: PUSH
28704: LD_EXP 63
28708: PUSH
28709: LD_VAR 0 2
28713: ARRAY
28714: PUSH
28715: LD_EXP 63
28719: PUSH
28720: LD_VAR 0 2
28724: ARRAY
28725: PUSH
28726: LD_VAR 0 3
28730: ARRAY
28731: DIFF
28732: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
28733: LD_ADDR_EXP 63
28737: PUSH
28738: LD_EXP 63
28742: PPUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: LD_VAR 0 5
28752: PPUSH
28753: CALL_OW 1
28757: ST_TO_ADDR
// continue ;
28758: GO 28646
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
28760: LD_EXP 63
28764: PUSH
28765: LD_VAR 0 2
28769: ARRAY
28770: PUSH
28771: LD_VAR 0 3
28775: ARRAY
28776: PPUSH
28777: CALL 52587 0 1
28781: PUSH
28782: LD_EXP 63
28786: PUSH
28787: LD_VAR 0 2
28791: ARRAY
28792: PUSH
28793: LD_VAR 0 3
28797: ARRAY
28798: PPUSH
28799: CALL_OW 255
28803: PPUSH
28804: LD_EXP 62
28808: PUSH
28809: LD_VAR 0 2
28813: ARRAY
28814: PUSH
28815: LD_VAR 0 4
28819: ARRAY
28820: PUSH
28821: LD_INT 1
28823: ARRAY
28824: PPUSH
28825: LD_EXP 62
28829: PUSH
28830: LD_VAR 0 2
28834: ARRAY
28835: PUSH
28836: LD_VAR 0 4
28840: ARRAY
28841: PUSH
28842: LD_INT 2
28844: ARRAY
28845: PPUSH
28846: LD_INT 15
28848: PPUSH
28849: CALL 53547 0 4
28853: PUSH
28854: LD_INT 4
28856: ARRAY
28857: PUSH
28858: LD_EXP 63
28862: PUSH
28863: LD_VAR 0 2
28867: ARRAY
28868: PUSH
28869: LD_VAR 0 3
28873: ARRAY
28874: PPUSH
28875: LD_INT 10
28877: PPUSH
28878: CALL 55244 0 2
28882: PUSH
28883: LD_INT 4
28885: ARRAY
28886: OR
28887: AND
28888: IFFALSE 28911
// ComStop ( mc_miners [ i ] [ j ] ) ;
28890: LD_EXP 63
28894: PUSH
28895: LD_VAR 0 2
28899: ARRAY
28900: PUSH
28901: LD_VAR 0 3
28905: ARRAY
28906: PPUSH
28907: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
28911: LD_EXP 63
28915: PUSH
28916: LD_VAR 0 2
28920: ARRAY
28921: PUSH
28922: LD_VAR 0 3
28926: ARRAY
28927: PPUSH
28928: CALL_OW 257
28932: PUSH
28933: LD_INT 1
28935: EQUAL
28936: PUSH
28937: LD_EXP 63
28941: PUSH
28942: LD_VAR 0 2
28946: ARRAY
28947: PUSH
28948: LD_VAR 0 3
28952: ARRAY
28953: PPUSH
28954: CALL_OW 459
28958: NOT
28959: AND
28960: PUSH
28961: LD_EXP 63
28965: PUSH
28966: LD_VAR 0 2
28970: ARRAY
28971: PUSH
28972: LD_VAR 0 3
28976: ARRAY
28977: PPUSH
28978: CALL_OW 255
28982: PPUSH
28983: LD_EXP 62
28987: PUSH
28988: LD_VAR 0 2
28992: ARRAY
28993: PUSH
28994: LD_VAR 0 4
28998: ARRAY
28999: PUSH
29000: LD_INT 1
29002: ARRAY
29003: PPUSH
29004: LD_EXP 62
29008: PUSH
29009: LD_VAR 0 2
29013: ARRAY
29014: PUSH
29015: LD_VAR 0 4
29019: ARRAY
29020: PUSH
29021: LD_INT 2
29023: ARRAY
29024: PPUSH
29025: LD_INT 15
29027: PPUSH
29028: CALL 53547 0 4
29032: PUSH
29033: LD_INT 4
29035: ARRAY
29036: PUSH
29037: LD_INT 0
29039: EQUAL
29040: AND
29041: PUSH
29042: LD_EXP 63
29046: PUSH
29047: LD_VAR 0 2
29051: ARRAY
29052: PUSH
29053: LD_VAR 0 3
29057: ARRAY
29058: PPUSH
29059: CALL_OW 314
29063: NOT
29064: AND
29065: IFFALSE 29241
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29067: LD_EXP 63
29071: PUSH
29072: LD_VAR 0 2
29076: ARRAY
29077: PUSH
29078: LD_VAR 0 3
29082: ARRAY
29083: PPUSH
29084: CALL_OW 310
29088: IFFALSE 29111
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
29090: LD_EXP 63
29094: PUSH
29095: LD_VAR 0 2
29099: ARRAY
29100: PUSH
29101: LD_VAR 0 3
29105: ARRAY
29106: PPUSH
29107: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
29111: LD_EXP 63
29115: PUSH
29116: LD_VAR 0 2
29120: ARRAY
29121: PUSH
29122: LD_VAR 0 3
29126: ARRAY
29127: PPUSH
29128: CALL_OW 314
29132: NOT
29133: IFFALSE 29201
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
29135: LD_EXP 63
29139: PUSH
29140: LD_VAR 0 2
29144: ARRAY
29145: PUSH
29146: LD_VAR 0 3
29150: ARRAY
29151: PPUSH
29152: LD_EXP 62
29156: PUSH
29157: LD_VAR 0 2
29161: ARRAY
29162: PUSH
29163: LD_VAR 0 4
29167: ARRAY
29168: PUSH
29169: LD_INT 1
29171: ARRAY
29172: PPUSH
29173: LD_EXP 62
29177: PUSH
29178: LD_VAR 0 2
29182: ARRAY
29183: PUSH
29184: LD_VAR 0 4
29188: ARRAY
29189: PUSH
29190: LD_INT 2
29192: ARRAY
29193: PPUSH
29194: LD_INT 0
29196: PPUSH
29197: CALL_OW 193
// k := k + 1 ;
29201: LD_ADDR_VAR 0 4
29205: PUSH
29206: LD_VAR 0 4
29210: PUSH
29211: LD_INT 1
29213: PLUS
29214: ST_TO_ADDR
// if k > mc_mines [ i ] then
29215: LD_VAR 0 4
29219: PUSH
29220: LD_EXP 62
29224: PUSH
29225: LD_VAR 0 2
29229: ARRAY
29230: GREATER
29231: IFFALSE 29241
// k := 1 ;
29233: LD_ADDR_VAR 0 4
29237: PUSH
29238: LD_INT 1
29240: ST_TO_ADDR
// end ; end ;
29241: GO 28646
29243: POP
29244: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
29245: LD_ADDR_VAR 0 5
29249: PUSH
29250: LD_EXP 49
29254: PUSH
29255: LD_VAR 0 2
29259: ARRAY
29260: PPUSH
29261: LD_INT 2
29263: PUSH
29264: LD_INT 30
29266: PUSH
29267: LD_INT 4
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 30
29276: PUSH
29277: LD_INT 5
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 30
29286: PUSH
29287: LD_INT 32
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 72
29304: ST_TO_ADDR
// if not tmp then
29305: LD_VAR 0 5
29309: NOT
29310: IFFALSE 29314
// continue ;
29312: GO 28563
// list := [ ] ;
29314: LD_ADDR_VAR 0 6
29318: PUSH
29319: EMPTY
29320: ST_TO_ADDR
// for j in tmp do
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_VAR 0 5
29330: PUSH
29331: FOR_IN
29332: IFFALSE 29401
// begin for k in UnitsInside ( j ) do
29334: LD_ADDR_VAR 0 4
29338: PUSH
29339: LD_VAR 0 3
29343: PPUSH
29344: CALL_OW 313
29348: PUSH
29349: FOR_IN
29350: IFFALSE 29397
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
29352: LD_VAR 0 4
29356: PPUSH
29357: CALL_OW 257
29361: PUSH
29362: LD_INT 1
29364: EQUAL
29365: PUSH
29366: LD_VAR 0 4
29370: PPUSH
29371: CALL_OW 459
29375: NOT
29376: AND
29377: IFFALSE 29395
// list := list ^ k ;
29379: LD_ADDR_VAR 0 6
29383: PUSH
29384: LD_VAR 0 6
29388: PUSH
29389: LD_VAR 0 4
29393: ADD
29394: ST_TO_ADDR
29395: GO 29349
29397: POP
29398: POP
// end ;
29399: GO 29331
29401: POP
29402: POP
// list := list diff mc_miners [ i ] ;
29403: LD_ADDR_VAR 0 6
29407: PUSH
29408: LD_VAR 0 6
29412: PUSH
29413: LD_EXP 63
29417: PUSH
29418: LD_VAR 0 2
29422: ARRAY
29423: DIFF
29424: ST_TO_ADDR
// if not list then
29425: LD_VAR 0 6
29429: NOT
29430: IFFALSE 29434
// continue ;
29432: GO 28563
// k := mc_mines [ i ] - mc_miners [ i ] ;
29434: LD_ADDR_VAR 0 4
29438: PUSH
29439: LD_EXP 62
29443: PUSH
29444: LD_VAR 0 2
29448: ARRAY
29449: PUSH
29450: LD_EXP 63
29454: PUSH
29455: LD_VAR 0 2
29459: ARRAY
29460: MINUS
29461: ST_TO_ADDR
// if k > list then
29462: LD_VAR 0 4
29466: PUSH
29467: LD_VAR 0 6
29471: GREATER
29472: IFFALSE 29484
// k := list ;
29474: LD_ADDR_VAR 0 4
29478: PUSH
29479: LD_VAR 0 6
29483: ST_TO_ADDR
// for j = 1 to k do
29484: LD_ADDR_VAR 0 3
29488: PUSH
29489: DOUBLE
29490: LD_INT 1
29492: DEC
29493: ST_TO_ADDR
29494: LD_VAR 0 4
29498: PUSH
29499: FOR_TO
29500: IFFALSE 29554
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
29502: LD_ADDR_EXP 63
29506: PUSH
29507: LD_EXP 63
29511: PPUSH
29512: LD_VAR 0 2
29516: PUSH
29517: LD_EXP 63
29521: PUSH
29522: LD_VAR 0 2
29526: ARRAY
29527: PUSH
29528: LD_INT 1
29530: PLUS
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PPUSH
29536: LD_VAR 0 6
29540: PUSH
29541: LD_VAR 0 3
29545: ARRAY
29546: PPUSH
29547: CALL 52651 0 3
29551: ST_TO_ADDR
29552: GO 29499
29554: POP
29555: POP
// end ;
29556: GO 28563
29558: POP
29559: POP
// end ;
29560: LD_VAR 0 1
29564: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
29569: PPUSH
29570: PPUSH
29571: PPUSH
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
29576: PPUSH
// if not mc_bases then
29577: LD_EXP 49
29581: NOT
29582: IFFALSE 29586
// exit ;
29584: GO 31317
// for i = 1 to mc_bases do
29586: LD_ADDR_VAR 0 2
29590: PUSH
29591: DOUBLE
29592: LD_INT 1
29594: DEC
29595: ST_TO_ADDR
29596: LD_EXP 49
29600: PUSH
29601: FOR_TO
29602: IFFALSE 31315
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
29604: LD_EXP 49
29608: PUSH
29609: LD_VAR 0 2
29613: ARRAY
29614: NOT
29615: PUSH
29616: LD_EXP 56
29620: PUSH
29621: LD_VAR 0 2
29625: ARRAY
29626: OR
29627: IFFALSE 29631
// continue ;
29629: GO 29601
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
29631: LD_EXP 65
29635: PUSH
29636: LD_VAR 0 2
29640: ARRAY
29641: NOT
29642: PUSH
29643: LD_EXP 66
29647: PUSH
29648: LD_VAR 0 2
29652: ARRAY
29653: AND
29654: IFFALSE 29692
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
29656: LD_ADDR_EXP 66
29660: PUSH
29661: LD_EXP 66
29665: PPUSH
29666: LD_VAR 0 2
29670: PPUSH
29671: EMPTY
29672: PPUSH
29673: CALL_OW 1
29677: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
29678: LD_VAR 0 2
29682: PPUSH
29683: LD_INT 107
29685: PPUSH
29686: CALL 20781 0 2
// continue ;
29690: GO 29601
// end ; target := [ ] ;
29692: LD_ADDR_VAR 0 6
29696: PUSH
29697: EMPTY
29698: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
29699: LD_ADDR_VAR 0 3
29703: PUSH
29704: DOUBLE
29705: LD_EXP 65
29709: PUSH
29710: LD_VAR 0 2
29714: ARRAY
29715: INC
29716: ST_TO_ADDR
29717: LD_INT 1
29719: PUSH
29720: FOR_DOWNTO
29721: IFFALSE 29981
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
29723: LD_EXP 65
29727: PUSH
29728: LD_VAR 0 2
29732: ARRAY
29733: PUSH
29734: LD_VAR 0 3
29738: ARRAY
29739: PUSH
29740: LD_INT 2
29742: ARRAY
29743: PPUSH
29744: LD_EXP 65
29748: PUSH
29749: LD_VAR 0 2
29753: ARRAY
29754: PUSH
29755: LD_VAR 0 3
29759: ARRAY
29760: PUSH
29761: LD_INT 3
29763: ARRAY
29764: PPUSH
29765: CALL_OW 488
29769: PUSH
29770: LD_EXP 65
29774: PUSH
29775: LD_VAR 0 2
29779: ARRAY
29780: PUSH
29781: LD_VAR 0 3
29785: ARRAY
29786: PUSH
29787: LD_INT 2
29789: ARRAY
29790: PPUSH
29791: LD_EXP 65
29795: PUSH
29796: LD_VAR 0 2
29800: ARRAY
29801: PUSH
29802: LD_VAR 0 3
29806: ARRAY
29807: PUSH
29808: LD_INT 3
29810: ARRAY
29811: PPUSH
29812: CALL_OW 284
29816: PUSH
29817: LD_INT 0
29819: EQUAL
29820: AND
29821: IFFALSE 29876
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
29823: LD_ADDR_VAR 0 5
29827: PUSH
29828: LD_EXP 65
29832: PUSH
29833: LD_VAR 0 2
29837: ARRAY
29838: PPUSH
29839: LD_VAR 0 3
29843: PPUSH
29844: CALL_OW 3
29848: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
29849: LD_ADDR_EXP 65
29853: PUSH
29854: LD_EXP 65
29858: PPUSH
29859: LD_VAR 0 2
29863: PPUSH
29864: LD_VAR 0 5
29868: PPUSH
29869: CALL_OW 1
29873: ST_TO_ADDR
// continue ;
29874: GO 29720
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
29876: LD_EXP 49
29880: PUSH
29881: LD_VAR 0 2
29885: ARRAY
29886: PUSH
29887: LD_INT 1
29889: ARRAY
29890: PPUSH
29891: CALL_OW 255
29895: PPUSH
29896: LD_EXP 65
29900: PUSH
29901: LD_VAR 0 2
29905: ARRAY
29906: PUSH
29907: LD_VAR 0 3
29911: ARRAY
29912: PUSH
29913: LD_INT 2
29915: ARRAY
29916: PPUSH
29917: LD_EXP 65
29921: PUSH
29922: LD_VAR 0 2
29926: ARRAY
29927: PUSH
29928: LD_VAR 0 3
29932: ARRAY
29933: PUSH
29934: LD_INT 3
29936: ARRAY
29937: PPUSH
29938: LD_INT 30
29940: PPUSH
29941: CALL 53547 0 4
29945: PUSH
29946: LD_INT 4
29948: ARRAY
29949: PUSH
29950: LD_INT 0
29952: EQUAL
29953: IFFALSE 29979
// begin target := mc_crates [ i ] [ j ] ;
29955: LD_ADDR_VAR 0 6
29959: PUSH
29960: LD_EXP 65
29964: PUSH
29965: LD_VAR 0 2
29969: ARRAY
29970: PUSH
29971: LD_VAR 0 3
29975: ARRAY
29976: ST_TO_ADDR
// break ;
29977: GO 29981
// end ; end ;
29979: GO 29720
29981: POP
29982: POP
// if not target then
29983: LD_VAR 0 6
29987: NOT
29988: IFFALSE 29992
// continue ;
29990: GO 29601
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
29992: LD_ADDR_VAR 0 7
29996: PUSH
29997: LD_EXP 68
30001: PUSH
30002: LD_VAR 0 2
30006: ARRAY
30007: PPUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 3
30013: PUSH
30014: LD_INT 58
30016: PUSH
30017: EMPTY
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 61
30026: PUSH
30027: EMPTY
30028: LIST
30029: PUSH
30030: LD_INT 33
30032: PUSH
30033: LD_INT 5
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 33
30042: PUSH
30043: LD_INT 3
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: LD_INT 34
30062: PUSH
30063: LD_INT 32
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 34
30072: PUSH
30073: LD_INT 51
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 34
30082: PUSH
30083: LD_INT 12
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PPUSH
30100: CALL_OW 72
30104: ST_TO_ADDR
// if not cargo then
30105: LD_VAR 0 7
30109: NOT
30110: IFFALSE 30753
// begin if mc_crates_collector [ i ] < 5 then
30112: LD_EXP 66
30116: PUSH
30117: LD_VAR 0 2
30121: ARRAY
30122: PUSH
30123: LD_INT 5
30125: LESS
30126: IFFALSE 30492
// begin if mc_ape [ i ] then
30128: LD_EXP 78
30132: PUSH
30133: LD_VAR 0 2
30137: ARRAY
30138: IFFALSE 30185
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
30140: LD_ADDR_VAR 0 5
30144: PUSH
30145: LD_EXP 78
30149: PUSH
30150: LD_VAR 0 2
30154: ARRAY
30155: PPUSH
30156: LD_INT 25
30158: PUSH
30159: LD_INT 16
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 24
30168: PUSH
30169: LD_INT 750
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PPUSH
30180: CALL_OW 72
30184: ST_TO_ADDR
// if not tmp then
30185: LD_VAR 0 5
30189: NOT
30190: IFFALSE 30237
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
30192: LD_ADDR_VAR 0 5
30196: PUSH
30197: LD_EXP 49
30201: PUSH
30202: LD_VAR 0 2
30206: ARRAY
30207: PPUSH
30208: LD_INT 25
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 24
30220: PUSH
30221: LD_INT 750
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PPUSH
30232: CALL_OW 72
30236: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
30237: LD_EXP 78
30241: PUSH
30242: LD_VAR 0 2
30246: ARRAY
30247: PUSH
30248: LD_EXP 49
30252: PUSH
30253: LD_VAR 0 2
30257: ARRAY
30258: PPUSH
30259: LD_INT 25
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 24
30271: PUSH
30272: LD_INT 750
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PPUSH
30283: CALL_OW 72
30287: AND
30288: PUSH
30289: LD_VAR 0 5
30293: PUSH
30294: LD_INT 5
30296: LESS
30297: AND
30298: IFFALSE 30380
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
30300: LD_ADDR_VAR 0 3
30304: PUSH
30305: LD_EXP 49
30309: PUSH
30310: LD_VAR 0 2
30314: ARRAY
30315: PPUSH
30316: LD_INT 25
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 24
30328: PUSH
30329: LD_INT 750
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 72
30344: PUSH
30345: FOR_IN
30346: IFFALSE 30378
// begin tmp := tmp union j ;
30348: LD_ADDR_VAR 0 5
30352: PUSH
30353: LD_VAR 0 5
30357: PUSH
30358: LD_VAR 0 3
30362: UNION
30363: ST_TO_ADDR
// if tmp >= 5 then
30364: LD_VAR 0 5
30368: PUSH
30369: LD_INT 5
30371: GREATEREQUAL
30372: IFFALSE 30376
// break ;
30374: GO 30378
// end ;
30376: GO 30345
30378: POP
30379: POP
// end ; if not tmp then
30380: LD_VAR 0 5
30384: NOT
30385: IFFALSE 30389
// continue ;
30387: GO 29601
// for j in tmp do
30389: LD_ADDR_VAR 0 3
30393: PUSH
30394: LD_VAR 0 5
30398: PUSH
30399: FOR_IN
30400: IFFALSE 30490
// if not GetTag ( j ) then
30402: LD_VAR 0 3
30406: PPUSH
30407: CALL_OW 110
30411: NOT
30412: IFFALSE 30488
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
30414: LD_ADDR_EXP 66
30418: PUSH
30419: LD_EXP 66
30423: PPUSH
30424: LD_VAR 0 2
30428: PUSH
30429: LD_EXP 66
30433: PUSH
30434: LD_VAR 0 2
30438: ARRAY
30439: PUSH
30440: LD_INT 1
30442: PLUS
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PPUSH
30448: LD_VAR 0 3
30452: PPUSH
30453: CALL 52651 0 3
30457: ST_TO_ADDR
// SetTag ( j , 107 ) ;
30458: LD_VAR 0 3
30462: PPUSH
30463: LD_INT 107
30465: PPUSH
30466: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
30470: LD_EXP 66
30474: PUSH
30475: LD_VAR 0 2
30479: ARRAY
30480: PUSH
30481: LD_INT 5
30483: GREATEREQUAL
30484: IFFALSE 30488
// break ;
30486: GO 30490
// end ;
30488: GO 30399
30490: POP
30491: POP
// end ; if mc_crates_collector [ i ] and target then
30492: LD_EXP 66
30496: PUSH
30497: LD_VAR 0 2
30501: ARRAY
30502: PUSH
30503: LD_VAR 0 6
30507: AND
30508: IFFALSE 30751
// begin if mc_crates_collector [ i ] < target [ 1 ] then
30510: LD_EXP 66
30514: PUSH
30515: LD_VAR 0 2
30519: ARRAY
30520: PUSH
30521: LD_VAR 0 6
30525: PUSH
30526: LD_INT 1
30528: ARRAY
30529: LESS
30530: IFFALSE 30550
// tmp := mc_crates_collector [ i ] else
30532: LD_ADDR_VAR 0 5
30536: PUSH
30537: LD_EXP 66
30541: PUSH
30542: LD_VAR 0 2
30546: ARRAY
30547: ST_TO_ADDR
30548: GO 30564
// tmp := target [ 1 ] ;
30550: LD_ADDR_VAR 0 5
30554: PUSH
30555: LD_VAR 0 6
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: ST_TO_ADDR
// k := 0 ;
30564: LD_ADDR_VAR 0 4
30568: PUSH
30569: LD_INT 0
30571: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
30572: LD_ADDR_VAR 0 3
30576: PUSH
30577: LD_EXP 66
30581: PUSH
30582: LD_VAR 0 2
30586: ARRAY
30587: PUSH
30588: FOR_IN
30589: IFFALSE 30749
// begin k := k + 1 ;
30591: LD_ADDR_VAR 0 4
30595: PUSH
30596: LD_VAR 0 4
30600: PUSH
30601: LD_INT 1
30603: PLUS
30604: ST_TO_ADDR
// if k > tmp then
30605: LD_VAR 0 4
30609: PUSH
30610: LD_VAR 0 5
30614: GREATER
30615: IFFALSE 30619
// break ;
30617: GO 30749
// if not GetClass ( j ) in [ 2 , 16 ] then
30619: LD_VAR 0 3
30623: PPUSH
30624: CALL_OW 257
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 16
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: IN
30639: NOT
30640: IFFALSE 30693
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
30642: LD_ADDR_EXP 66
30646: PUSH
30647: LD_EXP 66
30651: PPUSH
30652: LD_VAR 0 2
30656: PPUSH
30657: LD_EXP 66
30661: PUSH
30662: LD_VAR 0 2
30666: ARRAY
30667: PUSH
30668: LD_VAR 0 3
30672: DIFF
30673: PPUSH
30674: CALL_OW 1
30678: ST_TO_ADDR
// SetTag ( j , 0 ) ;
30679: LD_VAR 0 3
30683: PPUSH
30684: LD_INT 0
30686: PPUSH
30687: CALL_OW 109
// continue ;
30691: GO 30588
// end ; if IsInUnit ( j ) then
30693: LD_VAR 0 3
30697: PPUSH
30698: CALL_OW 310
30702: IFFALSE 30713
// ComExitBuilding ( j ) ;
30704: LD_VAR 0 3
30708: PPUSH
30709: CALL_OW 122
// wait ( 3 ) ;
30713: LD_INT 3
30715: PPUSH
30716: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
30720: LD_VAR 0 3
30724: PPUSH
30725: LD_VAR 0 6
30729: PUSH
30730: LD_INT 2
30732: ARRAY
30733: PPUSH
30734: LD_VAR 0 6
30738: PUSH
30739: LD_INT 3
30741: ARRAY
30742: PPUSH
30743: CALL_OW 117
// end ;
30747: GO 30588
30749: POP
30750: POP
// end ; end else
30751: GO 31313
// begin for j in cargo do
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_VAR 0 7
30762: PUSH
30763: FOR_IN
30764: IFFALSE 31311
// begin if GetTag ( j ) <> 0 then
30766: LD_VAR 0 3
30770: PPUSH
30771: CALL_OW 110
30775: PUSH
30776: LD_INT 0
30778: NONEQUAL
30779: IFFALSE 30783
// continue ;
30781: GO 30763
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
30783: LD_VAR 0 3
30787: PPUSH
30788: CALL_OW 256
30792: PUSH
30793: LD_INT 1000
30795: LESS
30796: PUSH
30797: LD_VAR 0 3
30801: PPUSH
30802: LD_EXP 73
30806: PUSH
30807: LD_VAR 0 2
30811: ARRAY
30812: PPUSH
30813: CALL_OW 308
30817: NOT
30818: AND
30819: IFFALSE 30841
// ComMoveToArea ( j , mc_parking [ i ] ) ;
30821: LD_VAR 0 3
30825: PPUSH
30826: LD_EXP 73
30830: PUSH
30831: LD_VAR 0 2
30835: ARRAY
30836: PPUSH
30837: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
30841: LD_VAR 0 3
30845: PPUSH
30846: CALL_OW 256
30850: PUSH
30851: LD_INT 1000
30853: LESS
30854: PUSH
30855: LD_VAR 0 3
30859: PPUSH
30860: LD_EXP 73
30864: PUSH
30865: LD_VAR 0 2
30869: ARRAY
30870: PPUSH
30871: CALL_OW 308
30875: AND
30876: IFFALSE 30880
// continue ;
30878: GO 30763
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
30880: LD_VAR 0 3
30884: PPUSH
30885: CALL_OW 262
30889: PUSH
30890: LD_INT 2
30892: EQUAL
30893: PUSH
30894: LD_VAR 0 3
30898: PPUSH
30899: CALL_OW 261
30903: PUSH
30904: LD_INT 15
30906: LESS
30907: AND
30908: IFFALSE 30912
// continue ;
30910: GO 30763
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
30912: LD_VAR 0 3
30916: PPUSH
30917: CALL_OW 262
30921: PUSH
30922: LD_INT 1
30924: EQUAL
30925: PUSH
30926: LD_VAR 0 3
30930: PPUSH
30931: CALL_OW 261
30935: PUSH
30936: LD_INT 10
30938: LESS
30939: AND
30940: IFFALSE 31250
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
30942: LD_ADDR_VAR 0 8
30946: PUSH
30947: LD_EXP 49
30951: PUSH
30952: LD_VAR 0 2
30956: ARRAY
30957: PPUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 30
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 30
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: PPUSH
30986: CALL_OW 72
30990: ST_TO_ADDR
// if not depot then
30991: LD_VAR 0 8
30995: NOT
30996: IFFALSE 31000
// continue ;
30998: GO 30763
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31000: LD_VAR 0 3
31004: PPUSH
31005: LD_VAR 0 8
31009: PPUSH
31010: LD_VAR 0 3
31014: PPUSH
31015: CALL_OW 74
31019: PPUSH
31020: CALL_OW 296
31024: PUSH
31025: LD_INT 6
31027: LESS
31028: IFFALSE 31044
// SetFuel ( j , 100 ) else
31030: LD_VAR 0 3
31034: PPUSH
31035: LD_INT 100
31037: PPUSH
31038: CALL_OW 240
31042: GO 31250
// if GetFuel ( j ) = 0 then
31044: LD_VAR 0 3
31048: PPUSH
31049: CALL_OW 261
31053: PUSH
31054: LD_INT 0
31056: EQUAL
31057: IFFALSE 31250
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31059: LD_ADDR_EXP 68
31063: PUSH
31064: LD_EXP 68
31068: PPUSH
31069: LD_VAR 0 2
31073: PPUSH
31074: LD_EXP 68
31078: PUSH
31079: LD_VAR 0 2
31083: ARRAY
31084: PUSH
31085: LD_VAR 0 3
31089: DIFF
31090: PPUSH
31091: CALL_OW 1
31095: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
31096: LD_VAR 0 3
31100: PPUSH
31101: CALL_OW 263
31105: PUSH
31106: LD_INT 1
31108: EQUAL
31109: IFFALSE 31125
// ComExitVehicle ( IsInUnit ( j ) ) ;
31111: LD_VAR 0 3
31115: PPUSH
31116: CALL_OW 310
31120: PPUSH
31121: CALL_OW 121
// if GetControl ( j ) = control_remote then
31125: LD_VAR 0 3
31129: PPUSH
31130: CALL_OW 263
31134: PUSH
31135: LD_INT 2
31137: EQUAL
31138: IFFALSE 31149
// ComUnlink ( j ) ;
31140: LD_VAR 0 3
31144: PPUSH
31145: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
31149: LD_ADDR_VAR 0 9
31153: PUSH
31154: LD_VAR 0 2
31158: PPUSH
31159: LD_INT 3
31161: PPUSH
31162: CALL 40296 0 2
31166: ST_TO_ADDR
// if fac then
31167: LD_VAR 0 9
31171: IFFALSE 31248
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
31173: LD_ADDR_VAR 0 10
31177: PUSH
31178: LD_VAR 0 9
31182: PPUSH
31183: LD_VAR 0 3
31187: PPUSH
31188: CALL_OW 265
31192: PPUSH
31193: LD_VAR 0 3
31197: PPUSH
31198: CALL_OW 262
31202: PPUSH
31203: LD_VAR 0 3
31207: PPUSH
31208: CALL_OW 263
31212: PPUSH
31213: LD_VAR 0 3
31217: PPUSH
31218: CALL_OW 264
31222: PPUSH
31223: CALL 50244 0 5
31227: ST_TO_ADDR
// if components then
31228: LD_VAR 0 10
31232: IFFALSE 31248
// MC_InsertProduceList ( i , components ) ;
31234: LD_VAR 0 2
31238: PPUSH
31239: LD_VAR 0 10
31243: PPUSH
31244: CALL 39924 0 2
// end ; continue ;
31248: GO 30763
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
31250: LD_VAR 0 3
31254: PPUSH
31255: LD_INT 1
31257: PPUSH
31258: CALL_OW 289
31262: PUSH
31263: LD_INT 100
31265: LESS
31266: PUSH
31267: LD_VAR 0 3
31271: PPUSH
31272: CALL_OW 314
31276: NOT
31277: AND
31278: IFFALSE 31307
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31280: LD_VAR 0 3
31284: PPUSH
31285: LD_VAR 0 6
31289: PUSH
31290: LD_INT 2
31292: ARRAY
31293: PPUSH
31294: LD_VAR 0 6
31298: PUSH
31299: LD_INT 3
31301: ARRAY
31302: PPUSH
31303: CALL_OW 117
// break ;
31307: GO 31311
// end ;
31309: GO 30763
31311: POP
31312: POP
// end ; end ;
31313: GO 29601
31315: POP
31316: POP
// end ;
31317: LD_VAR 0 1
31321: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
31322: LD_INT 0
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
// if not mc_bases then
31328: LD_EXP 49
31332: NOT
31333: IFFALSE 31337
// exit ;
31335: GO 31498
// for i = 1 to mc_bases do
31337: LD_ADDR_VAR 0 2
31341: PUSH
31342: DOUBLE
31343: LD_INT 1
31345: DEC
31346: ST_TO_ADDR
31347: LD_EXP 49
31351: PUSH
31352: FOR_TO
31353: IFFALSE 31496
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
31355: LD_ADDR_VAR 0 4
31359: PUSH
31360: LD_EXP 68
31364: PUSH
31365: LD_VAR 0 2
31369: ARRAY
31370: PUSH
31371: LD_EXP 71
31375: PUSH
31376: LD_VAR 0 2
31380: ARRAY
31381: UNION
31382: PPUSH
31383: LD_INT 33
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PPUSH
31393: CALL_OW 72
31397: ST_TO_ADDR
// if tmp then
31398: LD_VAR 0 4
31402: IFFALSE 31494
// for j in tmp do
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_VAR 0 4
31413: PUSH
31414: FOR_IN
31415: IFFALSE 31492
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
31417: LD_VAR 0 3
31421: PPUSH
31422: CALL_OW 312
31426: NOT
31427: PUSH
31428: LD_VAR 0 3
31432: PPUSH
31433: CALL_OW 256
31437: PUSH
31438: LD_INT 250
31440: GREATEREQUAL
31441: AND
31442: IFFALSE 31455
// Connect ( j ) else
31444: LD_VAR 0 3
31448: PPUSH
31449: CALL 55584 0 1
31453: GO 31490
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
31455: LD_VAR 0 3
31459: PPUSH
31460: CALL_OW 256
31464: PUSH
31465: LD_INT 250
31467: LESS
31468: PUSH
31469: LD_VAR 0 3
31473: PPUSH
31474: CALL_OW 312
31478: AND
31479: IFFALSE 31490
// ComUnlink ( j ) ;
31481: LD_VAR 0 3
31485: PPUSH
31486: CALL_OW 136
31490: GO 31414
31492: POP
31493: POP
// end ;
31494: GO 31352
31496: POP
31497: POP
// end ;
31498: LD_VAR 0 1
31502: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
31503: LD_INT 0
31505: PPUSH
31506: PPUSH
31507: PPUSH
31508: PPUSH
31509: PPUSH
// if not mc_bases then
31510: LD_EXP 49
31514: NOT
31515: IFFALSE 31519
// exit ;
31517: GO 31979
// for i = 1 to mc_bases do
31519: LD_ADDR_VAR 0 2
31523: PUSH
31524: DOUBLE
31525: LD_INT 1
31527: DEC
31528: ST_TO_ADDR
31529: LD_EXP 49
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31977
// begin if not mc_produce [ i ] then
31537: LD_EXP 70
31541: PUSH
31542: LD_VAR 0 2
31546: ARRAY
31547: NOT
31548: IFFALSE 31552
// continue ;
31550: GO 31534
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31552: LD_ADDR_VAR 0 5
31556: PUSH
31557: LD_EXP 49
31561: PUSH
31562: LD_VAR 0 2
31566: ARRAY
31567: PPUSH
31568: LD_INT 30
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PPUSH
31578: CALL_OW 72
31582: ST_TO_ADDR
// if not fac then
31583: LD_VAR 0 5
31587: NOT
31588: IFFALSE 31592
// continue ;
31590: GO 31534
// for j in fac do
31592: LD_ADDR_VAR 0 3
31596: PUSH
31597: LD_VAR 0 5
31601: PUSH
31602: FOR_IN
31603: IFFALSE 31973
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
31605: LD_VAR 0 3
31609: PPUSH
31610: CALL_OW 461
31614: PUSH
31615: LD_INT 2
31617: NONEQUAL
31618: PUSH
31619: LD_VAR 0 3
31623: PPUSH
31624: LD_INT 15
31626: PPUSH
31627: CALL 55244 0 2
31631: PUSH
31632: LD_INT 4
31634: ARRAY
31635: OR
31636: PUSH
31637: LD_VAR 0 3
31641: PPUSH
31642: CALL_OW 313
31646: PUSH
31647: LD_INT 0
31649: EQUAL
31650: OR
31651: IFFALSE 31655
// continue ;
31653: GO 31602
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
31655: LD_VAR 0 3
31659: PPUSH
31660: LD_EXP 70
31664: PUSH
31665: LD_VAR 0 2
31669: ARRAY
31670: PUSH
31671: LD_INT 1
31673: ARRAY
31674: PUSH
31675: LD_INT 1
31677: ARRAY
31678: PPUSH
31679: LD_EXP 70
31683: PUSH
31684: LD_VAR 0 2
31688: ARRAY
31689: PUSH
31690: LD_INT 1
31692: ARRAY
31693: PUSH
31694: LD_INT 2
31696: ARRAY
31697: PPUSH
31698: LD_EXP 70
31702: PUSH
31703: LD_VAR 0 2
31707: ARRAY
31708: PUSH
31709: LD_INT 1
31711: ARRAY
31712: PUSH
31713: LD_INT 3
31715: ARRAY
31716: PPUSH
31717: LD_EXP 70
31721: PUSH
31722: LD_VAR 0 2
31726: ARRAY
31727: PUSH
31728: LD_INT 1
31730: ARRAY
31731: PUSH
31732: LD_INT 4
31734: ARRAY
31735: PPUSH
31736: CALL_OW 448
31740: PUSH
31741: LD_VAR 0 3
31745: PPUSH
31746: LD_EXP 70
31750: PUSH
31751: LD_VAR 0 2
31755: ARRAY
31756: PUSH
31757: LD_INT 1
31759: ARRAY
31760: PUSH
31761: LD_INT 1
31763: ARRAY
31764: PUSH
31765: LD_EXP 70
31769: PUSH
31770: LD_VAR 0 2
31774: ARRAY
31775: PUSH
31776: LD_INT 1
31778: ARRAY
31779: PUSH
31780: LD_INT 2
31782: ARRAY
31783: PUSH
31784: LD_EXP 70
31788: PUSH
31789: LD_VAR 0 2
31793: ARRAY
31794: PUSH
31795: LD_INT 1
31797: ARRAY
31798: PUSH
31799: LD_INT 3
31801: ARRAY
31802: PUSH
31803: LD_EXP 70
31807: PUSH
31808: LD_VAR 0 2
31812: ARRAY
31813: PUSH
31814: LD_INT 1
31816: ARRAY
31817: PUSH
31818: LD_INT 4
31820: ARRAY
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: PPUSH
31828: CALL 58915 0 2
31832: AND
31833: IFFALSE 31971
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
31835: LD_VAR 0 3
31839: PPUSH
31840: LD_EXP 70
31844: PUSH
31845: LD_VAR 0 2
31849: ARRAY
31850: PUSH
31851: LD_INT 1
31853: ARRAY
31854: PUSH
31855: LD_INT 1
31857: ARRAY
31858: PPUSH
31859: LD_EXP 70
31863: PUSH
31864: LD_VAR 0 2
31868: ARRAY
31869: PUSH
31870: LD_INT 1
31872: ARRAY
31873: PUSH
31874: LD_INT 2
31876: ARRAY
31877: PPUSH
31878: LD_EXP 70
31882: PUSH
31883: LD_VAR 0 2
31887: ARRAY
31888: PUSH
31889: LD_INT 1
31891: ARRAY
31892: PUSH
31893: LD_INT 3
31895: ARRAY
31896: PPUSH
31897: LD_EXP 70
31901: PUSH
31902: LD_VAR 0 2
31906: ARRAY
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: PUSH
31912: LD_INT 4
31914: ARRAY
31915: PPUSH
31916: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
31920: LD_ADDR_VAR 0 4
31924: PUSH
31925: LD_EXP 70
31929: PUSH
31930: LD_VAR 0 2
31934: ARRAY
31935: PPUSH
31936: LD_INT 1
31938: PPUSH
31939: CALL_OW 3
31943: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
31944: LD_ADDR_EXP 70
31948: PUSH
31949: LD_EXP 70
31953: PPUSH
31954: LD_VAR 0 2
31958: PPUSH
31959: LD_VAR 0 4
31963: PPUSH
31964: CALL_OW 1
31968: ST_TO_ADDR
// break ;
31969: GO 31973
// end ; end ;
31971: GO 31602
31973: POP
31974: POP
// end ;
31975: GO 31534
31977: POP
31978: POP
// end ;
31979: LD_VAR 0 1
31983: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
31984: LD_INT 0
31986: PPUSH
31987: PPUSH
31988: PPUSH
// if not mc_bases then
31989: LD_EXP 49
31993: NOT
31994: IFFALSE 31998
// exit ;
31996: GO 32087
// for i = 1 to mc_bases do
31998: LD_ADDR_VAR 0 2
32002: PUSH
32003: DOUBLE
32004: LD_INT 1
32006: DEC
32007: ST_TO_ADDR
32008: LD_EXP 49
32012: PUSH
32013: FOR_TO
32014: IFFALSE 32085
// begin if mc_attack [ i ] then
32016: LD_EXP 69
32020: PUSH
32021: LD_VAR 0 2
32025: ARRAY
32026: IFFALSE 32083
// begin tmp := mc_attack [ i ] [ 1 ] ;
32028: LD_ADDR_VAR 0 3
32032: PUSH
32033: LD_EXP 69
32037: PUSH
32038: LD_VAR 0 2
32042: ARRAY
32043: PUSH
32044: LD_INT 1
32046: ARRAY
32047: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32048: LD_ADDR_EXP 69
32052: PUSH
32053: LD_EXP 69
32057: PPUSH
32058: LD_VAR 0 2
32062: PPUSH
32063: EMPTY
32064: PPUSH
32065: CALL_OW 1
32069: ST_TO_ADDR
// Attack ( tmp ) ;
32070: LD_VAR 0 3
32074: PPUSH
32075: CALL 81128 0 1
// exit ;
32079: POP
32080: POP
32081: GO 32087
// end ; end ;
32083: GO 32013
32085: POP
32086: POP
// end ;
32087: LD_VAR 0 1
32091: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
32092: LD_INT 0
32094: PPUSH
32095: PPUSH
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
// if not mc_bases then
32101: LD_EXP 49
32105: NOT
32106: IFFALSE 32110
// exit ;
32108: GO 32692
// for i = 1 to mc_bases do
32110: LD_ADDR_VAR 0 2
32114: PUSH
32115: DOUBLE
32116: LD_INT 1
32118: DEC
32119: ST_TO_ADDR
32120: LD_EXP 49
32124: PUSH
32125: FOR_TO
32126: IFFALSE 32690
// begin if not mc_bases [ i ] then
32128: LD_EXP 49
32132: PUSH
32133: LD_VAR 0 2
32137: ARRAY
32138: NOT
32139: IFFALSE 32143
// continue ;
32141: GO 32125
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
32143: LD_ADDR_VAR 0 7
32147: PUSH
32148: LD_EXP 49
32152: PUSH
32153: LD_VAR 0 2
32157: ARRAY
32158: PUSH
32159: LD_INT 1
32161: ARRAY
32162: PPUSH
32163: CALL 49548 0 1
32167: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
32168: LD_ADDR_EXP 72
32172: PUSH
32173: LD_EXP 72
32177: PPUSH
32178: LD_VAR 0 2
32182: PPUSH
32183: LD_EXP 49
32187: PUSH
32188: LD_VAR 0 2
32192: ARRAY
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: PPUSH
32198: CALL_OW 255
32202: PPUSH
32203: LD_EXP 74
32207: PUSH
32208: LD_VAR 0 2
32212: ARRAY
32213: PPUSH
32214: CALL 47545 0 2
32218: PPUSH
32219: CALL_OW 1
32223: ST_TO_ADDR
// if not mc_scan [ i ] then
32224: LD_EXP 72
32228: PUSH
32229: LD_VAR 0 2
32233: ARRAY
32234: NOT
32235: IFFALSE 32390
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32237: LD_ADDR_VAR 0 4
32241: PUSH
32242: LD_EXP 49
32246: PUSH
32247: LD_VAR 0 2
32251: ARRAY
32252: PPUSH
32253: LD_INT 2
32255: PUSH
32256: LD_INT 25
32258: PUSH
32259: LD_INT 5
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 25
32268: PUSH
32269: LD_INT 8
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 25
32278: PUSH
32279: LD_INT 9
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: PPUSH
32292: CALL_OW 72
32296: ST_TO_ADDR
// if not tmp then
32297: LD_VAR 0 4
32301: NOT
32302: IFFALSE 32306
// continue ;
32304: GO 32125
// for j in tmp do
32306: LD_ADDR_VAR 0 3
32310: PUSH
32311: LD_VAR 0 4
32315: PUSH
32316: FOR_IN
32317: IFFALSE 32388
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
32319: LD_VAR 0 3
32323: PPUSH
32324: CALL_OW 310
32328: PPUSH
32329: CALL_OW 266
32333: PUSH
32334: LD_INT 5
32336: EQUAL
32337: PUSH
32338: LD_VAR 0 3
32342: PPUSH
32343: CALL_OW 257
32347: PUSH
32348: LD_INT 1
32350: EQUAL
32351: AND
32352: PUSH
32353: LD_VAR 0 3
32357: PPUSH
32358: CALL_OW 459
32362: NOT
32363: AND
32364: PUSH
32365: LD_VAR 0 7
32369: AND
32370: IFFALSE 32386
// ComChangeProfession ( j , class ) ;
32372: LD_VAR 0 3
32376: PPUSH
32377: LD_VAR 0 7
32381: PPUSH
32382: CALL_OW 123
32386: GO 32316
32388: POP
32389: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
32390: LD_EXP 72
32394: PUSH
32395: LD_VAR 0 2
32399: ARRAY
32400: PUSH
32401: LD_EXP 71
32405: PUSH
32406: LD_VAR 0 2
32410: ARRAY
32411: NOT
32412: AND
32413: PUSH
32414: LD_EXP 49
32418: PUSH
32419: LD_VAR 0 2
32423: ARRAY
32424: PPUSH
32425: LD_INT 30
32427: PUSH
32428: LD_INT 32
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PPUSH
32435: CALL_OW 72
32439: NOT
32440: AND
32441: PUSH
32442: LD_EXP 49
32446: PUSH
32447: LD_VAR 0 2
32451: ARRAY
32452: PPUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 30
32458: PUSH
32459: LD_INT 4
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 30
32468: PUSH
32469: LD_INT 5
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: PPUSH
32481: CALL_OW 72
32485: NOT
32486: AND
32487: IFFALSE 32619
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
32489: LD_ADDR_VAR 0 4
32493: PUSH
32494: LD_EXP 49
32498: PUSH
32499: LD_VAR 0 2
32503: ARRAY
32504: PPUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 25
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 25
32520: PUSH
32521: LD_INT 5
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 25
32530: PUSH
32531: LD_INT 8
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 25
32540: PUSH
32541: LD_INT 9
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: PPUSH
32555: CALL_OW 72
32559: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
32560: LD_ADDR_VAR 0 4
32564: PUSH
32565: LD_VAR 0 4
32569: PUSH
32570: LD_VAR 0 4
32574: PPUSH
32575: LD_INT 18
32577: PPUSH
32578: CALL 85911 0 2
32582: DIFF
32583: ST_TO_ADDR
// if tmp then
32584: LD_VAR 0 4
32588: IFFALSE 32619
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
32590: LD_VAR 0 2
32594: PPUSH
32595: LD_VAR 0 4
32599: PPUSH
32600: LD_EXP 74
32604: PUSH
32605: LD_VAR 0 2
32609: ARRAY
32610: PPUSH
32611: CALL 47580 0 3
// exit ;
32615: POP
32616: POP
32617: GO 32692
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
32619: LD_EXP 72
32623: PUSH
32624: LD_VAR 0 2
32628: ARRAY
32629: PUSH
32630: LD_EXP 71
32634: PUSH
32635: LD_VAR 0 2
32639: ARRAY
32640: AND
32641: IFFALSE 32688
// begin tmp := mc_defender [ i ] ;
32643: LD_ADDR_VAR 0 4
32647: PUSH
32648: LD_EXP 71
32652: PUSH
32653: LD_VAR 0 2
32657: ARRAY
32658: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
32659: LD_VAR 0 2
32663: PPUSH
32664: LD_VAR 0 4
32668: PPUSH
32669: LD_EXP 72
32673: PUSH
32674: LD_VAR 0 2
32678: ARRAY
32679: PPUSH
32680: CALL 48078 0 3
// exit ;
32684: POP
32685: POP
32686: GO 32692
// end ; end ;
32688: GO 32125
32690: POP
32691: POP
// end ;
32692: LD_VAR 0 1
32696: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
32697: LD_INT 0
32699: PPUSH
32700: PPUSH
32701: PPUSH
32702: PPUSH
32703: PPUSH
32704: PPUSH
32705: PPUSH
32706: PPUSH
32707: PPUSH
32708: PPUSH
32709: PPUSH
// if not mc_bases then
32710: LD_EXP 49
32714: NOT
32715: IFFALSE 32719
// exit ;
32717: GO 33806
// for i = 1 to mc_bases do
32719: LD_ADDR_VAR 0 2
32723: PUSH
32724: DOUBLE
32725: LD_INT 1
32727: DEC
32728: ST_TO_ADDR
32729: LD_EXP 49
32733: PUSH
32734: FOR_TO
32735: IFFALSE 33804
// begin tmp := mc_lab [ i ] ;
32737: LD_ADDR_VAR 0 6
32741: PUSH
32742: LD_EXP 82
32746: PUSH
32747: LD_VAR 0 2
32751: ARRAY
32752: ST_TO_ADDR
// if not tmp then
32753: LD_VAR 0 6
32757: NOT
32758: IFFALSE 32762
// continue ;
32760: GO 32734
// idle_lab := 0 ;
32762: LD_ADDR_VAR 0 11
32766: PUSH
32767: LD_INT 0
32769: ST_TO_ADDR
// for j in tmp do
32770: LD_ADDR_VAR 0 3
32774: PUSH
32775: LD_VAR 0 6
32779: PUSH
32780: FOR_IN
32781: IFFALSE 33800
// begin researching := false ;
32783: LD_ADDR_VAR 0 10
32787: PUSH
32788: LD_INT 0
32790: ST_TO_ADDR
// side := GetSide ( j ) ;
32791: LD_ADDR_VAR 0 4
32795: PUSH
32796: LD_VAR 0 3
32800: PPUSH
32801: CALL_OW 255
32805: ST_TO_ADDR
// if not mc_tech [ side ] then
32806: LD_EXP 76
32810: PUSH
32811: LD_VAR 0 4
32815: ARRAY
32816: NOT
32817: IFFALSE 32821
// continue ;
32819: GO 32780
// if BuildingStatus ( j ) = bs_idle then
32821: LD_VAR 0 3
32825: PPUSH
32826: CALL_OW 461
32830: PUSH
32831: LD_INT 2
32833: EQUAL
32834: IFFALSE 33022
// begin if idle_lab and UnitsInside ( j ) < 6 then
32836: LD_VAR 0 11
32840: PUSH
32841: LD_VAR 0 3
32845: PPUSH
32846: CALL_OW 313
32850: PUSH
32851: LD_INT 6
32853: LESS
32854: AND
32855: IFFALSE 32926
// begin tmp2 := UnitsInside ( idle_lab ) ;
32857: LD_ADDR_VAR 0 9
32861: PUSH
32862: LD_VAR 0 11
32866: PPUSH
32867: CALL_OW 313
32871: ST_TO_ADDR
// if tmp2 then
32872: LD_VAR 0 9
32876: IFFALSE 32918
// for x in tmp2 do
32878: LD_ADDR_VAR 0 7
32882: PUSH
32883: LD_VAR 0 9
32887: PUSH
32888: FOR_IN
32889: IFFALSE 32916
// begin ComExitBuilding ( x ) ;
32891: LD_VAR 0 7
32895: PPUSH
32896: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
32900: LD_VAR 0 7
32904: PPUSH
32905: LD_VAR 0 3
32909: PPUSH
32910: CALL_OW 180
// end ;
32914: GO 32888
32916: POP
32917: POP
// idle_lab := 0 ;
32918: LD_ADDR_VAR 0 11
32922: PUSH
32923: LD_INT 0
32925: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
32926: LD_ADDR_VAR 0 5
32930: PUSH
32931: LD_EXP 76
32935: PUSH
32936: LD_VAR 0 4
32940: ARRAY
32941: PUSH
32942: FOR_IN
32943: IFFALSE 33003
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
32945: LD_VAR 0 3
32949: PPUSH
32950: LD_VAR 0 5
32954: PPUSH
32955: CALL_OW 430
32959: PUSH
32960: LD_VAR 0 4
32964: PPUSH
32965: LD_VAR 0 5
32969: PPUSH
32970: CALL 46650 0 2
32974: AND
32975: IFFALSE 33001
// begin researching := true ;
32977: LD_ADDR_VAR 0 10
32981: PUSH
32982: LD_INT 1
32984: ST_TO_ADDR
// ComResearch ( j , t ) ;
32985: LD_VAR 0 3
32989: PPUSH
32990: LD_VAR 0 5
32994: PPUSH
32995: CALL_OW 124
// break ;
32999: GO 33003
// end ;
33001: GO 32942
33003: POP
33004: POP
// if not researching then
33005: LD_VAR 0 10
33009: NOT
33010: IFFALSE 33022
// idle_lab := j ;
33012: LD_ADDR_VAR 0 11
33016: PUSH
33017: LD_VAR 0 3
33021: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33022: LD_VAR 0 3
33026: PPUSH
33027: CALL_OW 461
33031: PUSH
33032: LD_INT 10
33034: EQUAL
33035: IFFALSE 33623
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33037: LD_EXP 78
33041: PUSH
33042: LD_VAR 0 2
33046: ARRAY
33047: NOT
33048: PUSH
33049: LD_EXP 79
33053: PUSH
33054: LD_VAR 0 2
33058: ARRAY
33059: NOT
33060: AND
33061: PUSH
33062: LD_EXP 76
33066: PUSH
33067: LD_VAR 0 4
33071: ARRAY
33072: PUSH
33073: LD_INT 1
33075: GREATER
33076: AND
33077: IFFALSE 33208
// begin ComCancel ( j ) ;
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
33088: LD_ADDR_EXP 76
33092: PUSH
33093: LD_EXP 76
33097: PPUSH
33098: LD_VAR 0 4
33102: PPUSH
33103: LD_EXP 76
33107: PUSH
33108: LD_VAR 0 4
33112: ARRAY
33113: PPUSH
33114: LD_EXP 76
33118: PUSH
33119: LD_VAR 0 4
33123: ARRAY
33124: PUSH
33125: LD_INT 1
33127: MINUS
33128: PPUSH
33129: LD_EXP 76
33133: PUSH
33134: LD_VAR 0 4
33138: ARRAY
33139: PPUSH
33140: LD_INT 0
33142: PPUSH
33143: CALL 52069 0 4
33147: PPUSH
33148: CALL_OW 1
33152: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
33153: LD_ADDR_EXP 76
33157: PUSH
33158: LD_EXP 76
33162: PPUSH
33163: LD_VAR 0 4
33167: PPUSH
33168: LD_EXP 76
33172: PUSH
33173: LD_VAR 0 4
33177: ARRAY
33178: PPUSH
33179: LD_EXP 76
33183: PUSH
33184: LD_VAR 0 4
33188: ARRAY
33189: PPUSH
33190: LD_INT 1
33192: PPUSH
33193: LD_INT 0
33195: PPUSH
33196: CALL 52069 0 4
33200: PPUSH
33201: CALL_OW 1
33205: ST_TO_ADDR
// continue ;
33206: GO 32780
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
33208: LD_EXP 78
33212: PUSH
33213: LD_VAR 0 2
33217: ARRAY
33218: PUSH
33219: LD_EXP 79
33223: PUSH
33224: LD_VAR 0 2
33228: ARRAY
33229: NOT
33230: AND
33231: IFFALSE 33358
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
33233: LD_ADDR_EXP 79
33237: PUSH
33238: LD_EXP 79
33242: PPUSH
33243: LD_VAR 0 2
33247: PUSH
33248: LD_EXP 79
33252: PUSH
33253: LD_VAR 0 2
33257: ARRAY
33258: PUSH
33259: LD_INT 1
33261: PLUS
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PPUSH
33267: LD_EXP 78
33271: PUSH
33272: LD_VAR 0 2
33276: ARRAY
33277: PUSH
33278: LD_INT 1
33280: ARRAY
33281: PPUSH
33282: CALL 52651 0 3
33286: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
33287: LD_EXP 78
33291: PUSH
33292: LD_VAR 0 2
33296: ARRAY
33297: PUSH
33298: LD_INT 1
33300: ARRAY
33301: PPUSH
33302: LD_INT 112
33304: PPUSH
33305: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
33309: LD_ADDR_VAR 0 9
33313: PUSH
33314: LD_EXP 78
33318: PUSH
33319: LD_VAR 0 2
33323: ARRAY
33324: PPUSH
33325: LD_INT 1
33327: PPUSH
33328: CALL_OW 3
33332: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
33333: LD_ADDR_EXP 78
33337: PUSH
33338: LD_EXP 78
33342: PPUSH
33343: LD_VAR 0 2
33347: PPUSH
33348: LD_VAR 0 9
33352: PPUSH
33353: CALL_OW 1
33357: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
33358: LD_EXP 78
33362: PUSH
33363: LD_VAR 0 2
33367: ARRAY
33368: PUSH
33369: LD_EXP 79
33373: PUSH
33374: LD_VAR 0 2
33378: ARRAY
33379: AND
33380: PUSH
33381: LD_EXP 79
33385: PUSH
33386: LD_VAR 0 2
33390: ARRAY
33391: PUSH
33392: LD_INT 1
33394: ARRAY
33395: PPUSH
33396: CALL_OW 310
33400: NOT
33401: AND
33402: PUSH
33403: LD_VAR 0 3
33407: PPUSH
33408: CALL_OW 313
33412: PUSH
33413: LD_INT 6
33415: EQUAL
33416: AND
33417: IFFALSE 33473
// begin tmp2 := UnitsInside ( j ) ;
33419: LD_ADDR_VAR 0 9
33423: PUSH
33424: LD_VAR 0 3
33428: PPUSH
33429: CALL_OW 313
33433: ST_TO_ADDR
// if tmp2 = 6 then
33434: LD_VAR 0 9
33438: PUSH
33439: LD_INT 6
33441: EQUAL
33442: IFFALSE 33473
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
33444: LD_VAR 0 9
33448: PUSH
33449: LD_INT 1
33451: ARRAY
33452: PPUSH
33453: LD_INT 112
33455: PPUSH
33456: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
33460: LD_VAR 0 9
33464: PUSH
33465: LD_INT 1
33467: ARRAY
33468: PPUSH
33469: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
33473: LD_EXP 79
33477: PUSH
33478: LD_VAR 0 2
33482: ARRAY
33483: PUSH
33484: LD_EXP 79
33488: PUSH
33489: LD_VAR 0 2
33493: ARRAY
33494: PUSH
33495: LD_INT 1
33497: ARRAY
33498: PPUSH
33499: CALL_OW 314
33503: NOT
33504: AND
33505: PUSH
33506: LD_EXP 79
33510: PUSH
33511: LD_VAR 0 2
33515: ARRAY
33516: PUSH
33517: LD_INT 1
33519: ARRAY
33520: PPUSH
33521: CALL_OW 310
33525: NOT
33526: AND
33527: IFFALSE 33553
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
33529: LD_EXP 79
33533: PUSH
33534: LD_VAR 0 2
33538: ARRAY
33539: PUSH
33540: LD_INT 1
33542: ARRAY
33543: PPUSH
33544: LD_VAR 0 3
33548: PPUSH
33549: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
33553: LD_EXP 79
33557: PUSH
33558: LD_VAR 0 2
33562: ARRAY
33563: PUSH
33564: LD_INT 1
33566: ARRAY
33567: PPUSH
33568: CALL_OW 310
33572: PUSH
33573: LD_EXP 79
33577: PUSH
33578: LD_VAR 0 2
33582: ARRAY
33583: PUSH
33584: LD_INT 1
33586: ARRAY
33587: PPUSH
33588: CALL_OW 310
33592: PPUSH
33593: CALL_OW 461
33597: PUSH
33598: LD_INT 3
33600: NONEQUAL
33601: AND
33602: IFFALSE 33623
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
33604: LD_EXP 79
33608: PUSH
33609: LD_VAR 0 2
33613: ARRAY
33614: PUSH
33615: LD_INT 1
33617: ARRAY
33618: PPUSH
33619: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
33623: LD_VAR 0 3
33627: PPUSH
33628: CALL_OW 461
33632: PUSH
33633: LD_INT 6
33635: EQUAL
33636: PUSH
33637: LD_VAR 0 6
33641: PUSH
33642: LD_INT 1
33644: GREATER
33645: AND
33646: IFFALSE 33798
// begin sci := [ ] ;
33648: LD_ADDR_VAR 0 8
33652: PUSH
33653: EMPTY
33654: ST_TO_ADDR
// for x in ( tmp diff j ) do
33655: LD_ADDR_VAR 0 7
33659: PUSH
33660: LD_VAR 0 6
33664: PUSH
33665: LD_VAR 0 3
33669: DIFF
33670: PUSH
33671: FOR_IN
33672: IFFALSE 33724
// begin if sci = 6 then
33674: LD_VAR 0 8
33678: PUSH
33679: LD_INT 6
33681: EQUAL
33682: IFFALSE 33686
// break ;
33684: GO 33724
// if BuildingStatus ( x ) = bs_idle then
33686: LD_VAR 0 7
33690: PPUSH
33691: CALL_OW 461
33695: PUSH
33696: LD_INT 2
33698: EQUAL
33699: IFFALSE 33722
// sci := sci ^ UnitsInside ( x ) ;
33701: LD_ADDR_VAR 0 8
33705: PUSH
33706: LD_VAR 0 8
33710: PUSH
33711: LD_VAR 0 7
33715: PPUSH
33716: CALL_OW 313
33720: ADD
33721: ST_TO_ADDR
// end ;
33722: GO 33671
33724: POP
33725: POP
// if not sci then
33726: LD_VAR 0 8
33730: NOT
33731: IFFALSE 33735
// continue ;
33733: GO 32780
// for x in sci do
33735: LD_ADDR_VAR 0 7
33739: PUSH
33740: LD_VAR 0 8
33744: PUSH
33745: FOR_IN
33746: IFFALSE 33796
// if IsInUnit ( x ) and not HasTask ( x ) then
33748: LD_VAR 0 7
33752: PPUSH
33753: CALL_OW 310
33757: PUSH
33758: LD_VAR 0 7
33762: PPUSH
33763: CALL_OW 314
33767: NOT
33768: AND
33769: IFFALSE 33794
// begin ComExitBuilding ( x ) ;
33771: LD_VAR 0 7
33775: PPUSH
33776: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33780: LD_VAR 0 7
33784: PPUSH
33785: LD_VAR 0 3
33789: PPUSH
33790: CALL_OW 180
// end ;
33794: GO 33745
33796: POP
33797: POP
// end ; end ;
33798: GO 32780
33800: POP
33801: POP
// end ;
33802: GO 32734
33804: POP
33805: POP
// end ;
33806: LD_VAR 0 1
33810: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
33811: LD_INT 0
33813: PPUSH
33814: PPUSH
// if not mc_bases then
33815: LD_EXP 49
33819: NOT
33820: IFFALSE 33824
// exit ;
33822: GO 33905
// for i = 1 to mc_bases do
33824: LD_ADDR_VAR 0 2
33828: PUSH
33829: DOUBLE
33830: LD_INT 1
33832: DEC
33833: ST_TO_ADDR
33834: LD_EXP 49
33838: PUSH
33839: FOR_TO
33840: IFFALSE 33903
// if mc_mines [ i ] and mc_miners [ i ] then
33842: LD_EXP 62
33846: PUSH
33847: LD_VAR 0 2
33851: ARRAY
33852: PUSH
33853: LD_EXP 63
33857: PUSH
33858: LD_VAR 0 2
33862: ARRAY
33863: AND
33864: IFFALSE 33901
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
33866: LD_EXP 63
33870: PUSH
33871: LD_VAR 0 2
33875: ARRAY
33876: PUSH
33877: LD_INT 1
33879: ARRAY
33880: PPUSH
33881: CALL_OW 255
33885: PPUSH
33886: LD_EXP 62
33890: PUSH
33891: LD_VAR 0 2
33895: ARRAY
33896: PPUSH
33897: CALL 49701 0 2
33901: GO 33839
33903: POP
33904: POP
// end ;
33905: LD_VAR 0 1
33909: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
33910: LD_INT 0
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
// if not mc_bases or not mc_parking then
33920: LD_EXP 49
33924: NOT
33925: PUSH
33926: LD_EXP 73
33930: NOT
33931: OR
33932: IFFALSE 33936
// exit ;
33934: GO 34612
// for i = 1 to mc_bases do
33936: LD_ADDR_VAR 0 2
33940: PUSH
33941: DOUBLE
33942: LD_INT 1
33944: DEC
33945: ST_TO_ADDR
33946: LD_EXP 49
33950: PUSH
33951: FOR_TO
33952: IFFALSE 34610
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
33954: LD_EXP 49
33958: PUSH
33959: LD_VAR 0 2
33963: ARRAY
33964: NOT
33965: PUSH
33966: LD_EXP 73
33970: PUSH
33971: LD_VAR 0 2
33975: ARRAY
33976: NOT
33977: OR
33978: IFFALSE 33982
// continue ;
33980: GO 33951
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
33982: LD_ADDR_VAR 0 5
33986: PUSH
33987: LD_EXP 49
33991: PUSH
33992: LD_VAR 0 2
33996: ARRAY
33997: PUSH
33998: LD_INT 1
34000: ARRAY
34001: PPUSH
34002: CALL_OW 255
34006: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34007: LD_ADDR_VAR 0 6
34011: PUSH
34012: LD_EXP 49
34016: PUSH
34017: LD_VAR 0 2
34021: ARRAY
34022: PPUSH
34023: LD_INT 30
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PPUSH
34033: CALL_OW 72
34037: ST_TO_ADDR
// if not fac then
34038: LD_VAR 0 6
34042: NOT
34043: IFFALSE 34094
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34045: LD_ADDR_VAR 0 6
34049: PUSH
34050: LD_EXP 49
34054: PUSH
34055: LD_VAR 0 2
34059: ARRAY
34060: PPUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 30
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 30
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: PPUSH
34089: CALL_OW 72
34093: ST_TO_ADDR
// if not fac then
34094: LD_VAR 0 6
34098: NOT
34099: IFFALSE 34103
// continue ;
34101: GO 33951
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34103: LD_ADDR_VAR 0 7
34107: PUSH
34108: LD_EXP 73
34112: PUSH
34113: LD_VAR 0 2
34117: ARRAY
34118: PPUSH
34119: LD_INT 22
34121: PUSH
34122: LD_VAR 0 5
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 21
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 3
34143: PUSH
34144: LD_INT 24
34146: PUSH
34147: LD_INT 1000
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: PPUSH
34163: CALL_OW 70
34167: PUSH
34168: LD_INT 22
34170: PUSH
34171: LD_VAR 0 5
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 91
34182: PUSH
34183: LD_VAR 0 6
34187: PUSH
34188: LD_INT 1
34190: ARRAY
34191: PUSH
34192: LD_INT 25
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 21
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 3
34212: PUSH
34213: LD_INT 24
34215: PUSH
34216: LD_INT 1000
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 69
34237: UNION
34238: ST_TO_ADDR
// if not vehs then
34239: LD_VAR 0 7
34243: NOT
34244: IFFALSE 34270
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
34246: LD_ADDR_EXP 61
34250: PUSH
34251: LD_EXP 61
34255: PPUSH
34256: LD_VAR 0 2
34260: PPUSH
34261: EMPTY
34262: PPUSH
34263: CALL_OW 1
34267: ST_TO_ADDR
// continue ;
34268: GO 33951
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34270: LD_ADDR_VAR 0 8
34274: PUSH
34275: LD_EXP 49
34279: PUSH
34280: LD_VAR 0 2
34284: ARRAY
34285: PPUSH
34286: LD_INT 30
34288: PUSH
34289: LD_INT 3
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PPUSH
34296: CALL_OW 72
34300: ST_TO_ADDR
// if tmp then
34301: LD_VAR 0 8
34305: IFFALSE 34408
// begin for j in tmp do
34307: LD_ADDR_VAR 0 3
34311: PUSH
34312: LD_VAR 0 8
34316: PUSH
34317: FOR_IN
34318: IFFALSE 34406
// for k in UnitsInside ( j ) do
34320: LD_ADDR_VAR 0 4
34324: PUSH
34325: LD_VAR 0 3
34329: PPUSH
34330: CALL_OW 313
34334: PUSH
34335: FOR_IN
34336: IFFALSE 34402
// if k then
34338: LD_VAR 0 4
34342: IFFALSE 34400
// if not k in mc_repair_vehicle [ i ] then
34344: LD_VAR 0 4
34348: PUSH
34349: LD_EXP 61
34353: PUSH
34354: LD_VAR 0 2
34358: ARRAY
34359: IN
34360: NOT
34361: IFFALSE 34400
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
34363: LD_ADDR_EXP 61
34367: PUSH
34368: LD_EXP 61
34372: PPUSH
34373: LD_VAR 0 2
34377: PPUSH
34378: LD_EXP 61
34382: PUSH
34383: LD_VAR 0 2
34387: ARRAY
34388: PUSH
34389: LD_VAR 0 4
34393: UNION
34394: PPUSH
34395: CALL_OW 1
34399: ST_TO_ADDR
34400: GO 34335
34402: POP
34403: POP
34404: GO 34317
34406: POP
34407: POP
// end ; if not mc_repair_vehicle [ i ] then
34408: LD_EXP 61
34412: PUSH
34413: LD_VAR 0 2
34417: ARRAY
34418: NOT
34419: IFFALSE 34423
// continue ;
34421: GO 33951
// for j in mc_repair_vehicle [ i ] do
34423: LD_ADDR_VAR 0 3
34427: PUSH
34428: LD_EXP 61
34432: PUSH
34433: LD_VAR 0 2
34437: ARRAY
34438: PUSH
34439: FOR_IN
34440: IFFALSE 34606
// begin if GetClass ( j ) <> 3 then
34442: LD_VAR 0 3
34446: PPUSH
34447: CALL_OW 257
34451: PUSH
34452: LD_INT 3
34454: NONEQUAL
34455: IFFALSE 34496
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
34457: LD_ADDR_EXP 61
34461: PUSH
34462: LD_EXP 61
34466: PPUSH
34467: LD_VAR 0 2
34471: PPUSH
34472: LD_EXP 61
34476: PUSH
34477: LD_VAR 0 2
34481: ARRAY
34482: PUSH
34483: LD_VAR 0 3
34487: DIFF
34488: PPUSH
34489: CALL_OW 1
34493: ST_TO_ADDR
// continue ;
34494: GO 34439
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34496: LD_VAR 0 3
34500: PPUSH
34501: CALL_OW 311
34505: NOT
34506: PUSH
34507: LD_VAR 0 3
34511: PUSH
34512: LD_EXP 52
34516: PUSH
34517: LD_VAR 0 2
34521: ARRAY
34522: PUSH
34523: LD_INT 1
34525: ARRAY
34526: IN
34527: NOT
34528: AND
34529: PUSH
34530: LD_VAR 0 3
34534: PUSH
34535: LD_EXP 52
34539: PUSH
34540: LD_VAR 0 2
34544: ARRAY
34545: PUSH
34546: LD_INT 2
34548: ARRAY
34549: IN
34550: NOT
34551: AND
34552: IFFALSE 34604
// begin if IsInUnit ( j ) then
34554: LD_VAR 0 3
34558: PPUSH
34559: CALL_OW 310
34563: IFFALSE 34574
// ComExitBuilding ( j ) ;
34565: LD_VAR 0 3
34569: PPUSH
34570: CALL_OW 122
// if not HasTask ( j ) then
34574: LD_VAR 0 3
34578: PPUSH
34579: CALL_OW 314
34583: NOT
34584: IFFALSE 34604
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
34586: LD_VAR 0 3
34590: PPUSH
34591: LD_VAR 0 7
34595: PUSH
34596: LD_INT 1
34598: ARRAY
34599: PPUSH
34600: CALL_OW 189
// end ; end ;
34604: GO 34439
34606: POP
34607: POP
// end ;
34608: GO 33951
34610: POP
34611: POP
// end ;
34612: LD_VAR 0 1
34616: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
34617: LD_INT 0
34619: PPUSH
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
// if not mc_bases then
34630: LD_EXP 49
34634: NOT
34635: IFFALSE 34639
// exit ;
34637: GO 35441
// for i = 1 to mc_bases do
34639: LD_ADDR_VAR 0 2
34643: PUSH
34644: DOUBLE
34645: LD_INT 1
34647: DEC
34648: ST_TO_ADDR
34649: LD_EXP 49
34653: PUSH
34654: FOR_TO
34655: IFFALSE 35439
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
34657: LD_EXP 77
34661: PUSH
34662: LD_VAR 0 2
34666: ARRAY
34667: NOT
34668: PUSH
34669: LD_EXP 52
34673: PUSH
34674: LD_VAR 0 2
34678: ARRAY
34679: PUSH
34680: LD_INT 1
34682: ARRAY
34683: OR
34684: PUSH
34685: LD_EXP 52
34689: PUSH
34690: LD_VAR 0 2
34694: ARRAY
34695: PUSH
34696: LD_INT 2
34698: ARRAY
34699: OR
34700: PUSH
34701: LD_EXP 75
34705: PUSH
34706: LD_VAR 0 2
34710: ARRAY
34711: PPUSH
34712: LD_INT 1
34714: PPUSH
34715: CALL_OW 325
34719: NOT
34720: OR
34721: PUSH
34722: LD_EXP 72
34726: PUSH
34727: LD_VAR 0 2
34731: ARRAY
34732: OR
34733: IFFALSE 34737
// continue ;
34735: GO 34654
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
34737: LD_ADDR_VAR 0 8
34741: PUSH
34742: LD_EXP 49
34746: PUSH
34747: LD_VAR 0 2
34751: ARRAY
34752: PPUSH
34753: LD_INT 25
34755: PUSH
34756: LD_INT 4
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 50
34765: PUSH
34766: EMPTY
34767: LIST
34768: PUSH
34769: LD_INT 3
34771: PUSH
34772: LD_INT 60
34774: PUSH
34775: EMPTY
34776: LIST
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: PPUSH
34787: CALL_OW 72
34791: PUSH
34792: LD_EXP 53
34796: PUSH
34797: LD_VAR 0 2
34801: ARRAY
34802: DIFF
34803: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34804: LD_ADDR_VAR 0 9
34808: PUSH
34809: LD_EXP 49
34813: PUSH
34814: LD_VAR 0 2
34818: ARRAY
34819: PPUSH
34820: LD_INT 2
34822: PUSH
34823: LD_INT 30
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 30
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: PPUSH
34848: CALL_OW 72
34852: ST_TO_ADDR
// if not tmp or not dep then
34853: LD_VAR 0 8
34857: NOT
34858: PUSH
34859: LD_VAR 0 9
34863: NOT
34864: OR
34865: IFFALSE 34869
// continue ;
34867: GO 34654
// side := GetSide ( tmp [ 1 ] ) ;
34869: LD_ADDR_VAR 0 11
34873: PUSH
34874: LD_VAR 0 8
34878: PUSH
34879: LD_INT 1
34881: ARRAY
34882: PPUSH
34883: CALL_OW 255
34887: ST_TO_ADDR
// dep := dep [ 1 ] ;
34888: LD_ADDR_VAR 0 9
34892: PUSH
34893: LD_VAR 0 9
34897: PUSH
34898: LD_INT 1
34900: ARRAY
34901: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
34902: LD_ADDR_VAR 0 7
34906: PUSH
34907: LD_EXP 77
34911: PUSH
34912: LD_VAR 0 2
34916: ARRAY
34917: PPUSH
34918: LD_INT 22
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 25
34930: PUSH
34931: LD_INT 12
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PPUSH
34942: CALL_OW 70
34946: PUSH
34947: LD_INT 22
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 25
34959: PUSH
34960: LD_INT 12
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 91
34969: PUSH
34970: LD_VAR 0 9
34974: PUSH
34975: LD_INT 20
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: LIST
34987: PPUSH
34988: CALL_OW 69
34992: UNION
34993: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
34994: LD_ADDR_VAR 0 10
34998: PUSH
34999: LD_EXP 77
35003: PUSH
35004: LD_VAR 0 2
35008: ARRAY
35009: PPUSH
35010: LD_INT 81
35012: PUSH
35013: LD_VAR 0 11
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PPUSH
35022: CALL_OW 70
35026: ST_TO_ADDR
// if not apes or danger_at_area then
35027: LD_VAR 0 7
35031: NOT
35032: PUSH
35033: LD_VAR 0 10
35037: OR
35038: IFFALSE 35088
// begin if mc_taming [ i ] then
35040: LD_EXP 80
35044: PUSH
35045: LD_VAR 0 2
35049: ARRAY
35050: IFFALSE 35086
// begin MC_Reset ( i , 121 ) ;
35052: LD_VAR 0 2
35056: PPUSH
35057: LD_INT 121
35059: PPUSH
35060: CALL 20781 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
35064: LD_ADDR_EXP 80
35068: PUSH
35069: LD_EXP 80
35073: PPUSH
35074: LD_VAR 0 2
35078: PPUSH
35079: EMPTY
35080: PPUSH
35081: CALL_OW 1
35085: ST_TO_ADDR
// end ; continue ;
35086: GO 34654
// end ; for j in tmp do
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_VAR 0 8
35097: PUSH
35098: FOR_IN
35099: IFFALSE 35435
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
35101: LD_VAR 0 3
35105: PUSH
35106: LD_EXP 80
35110: PUSH
35111: LD_VAR 0 2
35115: ARRAY
35116: IN
35117: NOT
35118: PUSH
35119: LD_EXP 80
35123: PUSH
35124: LD_VAR 0 2
35128: ARRAY
35129: PUSH
35130: LD_INT 3
35132: LESS
35133: AND
35134: IFFALSE 35192
// begin SetTag ( j , 121 ) ;
35136: LD_VAR 0 3
35140: PPUSH
35141: LD_INT 121
35143: PPUSH
35144: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
35148: LD_ADDR_EXP 80
35152: PUSH
35153: LD_EXP 80
35157: PPUSH
35158: LD_VAR 0 2
35162: PUSH
35163: LD_EXP 80
35167: PUSH
35168: LD_VAR 0 2
35172: ARRAY
35173: PUSH
35174: LD_INT 1
35176: PLUS
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PPUSH
35182: LD_VAR 0 3
35186: PPUSH
35187: CALL 52651 0 3
35191: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
35192: LD_VAR 0 3
35196: PUSH
35197: LD_EXP 80
35201: PUSH
35202: LD_VAR 0 2
35206: ARRAY
35207: IN
35208: IFFALSE 35433
// begin if GetClass ( j ) <> 4 then
35210: LD_VAR 0 3
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 4
35222: NONEQUAL
35223: IFFALSE 35276
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
35225: LD_ADDR_EXP 80
35229: PUSH
35230: LD_EXP 80
35234: PPUSH
35235: LD_VAR 0 2
35239: PPUSH
35240: LD_EXP 80
35244: PUSH
35245: LD_VAR 0 2
35249: ARRAY
35250: PUSH
35251: LD_VAR 0 3
35255: DIFF
35256: PPUSH
35257: CALL_OW 1
35261: ST_TO_ADDR
// SetTag ( j , 0 ) ;
35262: LD_VAR 0 3
35266: PPUSH
35267: LD_INT 0
35269: PPUSH
35270: CALL_OW 109
// continue ;
35274: GO 35098
// end ; if IsInUnit ( j ) then
35276: LD_VAR 0 3
35280: PPUSH
35281: CALL_OW 310
35285: IFFALSE 35296
// ComExitBuilding ( j ) ;
35287: LD_VAR 0 3
35291: PPUSH
35292: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
35296: LD_ADDR_VAR 0 6
35300: PUSH
35301: LD_VAR 0 7
35305: PPUSH
35306: LD_VAR 0 3
35310: PPUSH
35311: CALL_OW 74
35315: ST_TO_ADDR
// if not ape then
35316: LD_VAR 0 6
35320: NOT
35321: IFFALSE 35325
// break ;
35323: GO 35435
// x := GetX ( ape ) ;
35325: LD_ADDR_VAR 0 4
35329: PUSH
35330: LD_VAR 0 6
35334: PPUSH
35335: CALL_OW 250
35339: ST_TO_ADDR
// y := GetY ( ape ) ;
35340: LD_ADDR_VAR 0 5
35344: PUSH
35345: LD_VAR 0 6
35349: PPUSH
35350: CALL_OW 251
35354: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35355: LD_VAR 0 4
35359: PPUSH
35360: LD_VAR 0 5
35364: PPUSH
35365: CALL_OW 488
35369: NOT
35370: PUSH
35371: LD_VAR 0 11
35375: PPUSH
35376: LD_VAR 0 4
35380: PPUSH
35381: LD_VAR 0 5
35385: PPUSH
35386: LD_INT 20
35388: PPUSH
35389: CALL 53547 0 4
35393: PUSH
35394: LD_INT 4
35396: ARRAY
35397: OR
35398: IFFALSE 35402
// break ;
35400: GO 35435
// if not HasTask ( j ) then
35402: LD_VAR 0 3
35406: PPUSH
35407: CALL_OW 314
35411: NOT
35412: IFFALSE 35433
// ComTameXY ( j , x , y ) ;
35414: LD_VAR 0 3
35418: PPUSH
35419: LD_VAR 0 4
35423: PPUSH
35424: LD_VAR 0 5
35428: PPUSH
35429: CALL_OW 131
// end ; end ;
35433: GO 35098
35435: POP
35436: POP
// end ;
35437: GO 34654
35439: POP
35440: POP
// end ;
35441: LD_VAR 0 1
35445: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
35446: LD_INT 0
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
// if not mc_bases then
35456: LD_EXP 49
35460: NOT
35461: IFFALSE 35465
// exit ;
35463: GO 36091
// for i = 1 to mc_bases do
35465: LD_ADDR_VAR 0 2
35469: PUSH
35470: DOUBLE
35471: LD_INT 1
35473: DEC
35474: ST_TO_ADDR
35475: LD_EXP 49
35479: PUSH
35480: FOR_TO
35481: IFFALSE 36089
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
35483: LD_EXP 78
35487: PUSH
35488: LD_VAR 0 2
35492: ARRAY
35493: NOT
35494: PUSH
35495: LD_EXP 78
35499: PUSH
35500: LD_VAR 0 2
35504: ARRAY
35505: PPUSH
35506: LD_INT 25
35508: PUSH
35509: LD_INT 12
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PPUSH
35516: CALL_OW 72
35520: NOT
35521: OR
35522: IFFALSE 35526
// continue ;
35524: GO 35480
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
35526: LD_ADDR_VAR 0 5
35530: PUSH
35531: LD_EXP 78
35535: PUSH
35536: LD_VAR 0 2
35540: ARRAY
35541: PUSH
35542: LD_INT 1
35544: ARRAY
35545: PPUSH
35546: CALL_OW 255
35550: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
35551: LD_VAR 0 5
35555: PPUSH
35556: LD_INT 2
35558: PPUSH
35559: CALL_OW 325
35563: IFFALSE 35816
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
35565: LD_ADDR_VAR 0 4
35569: PUSH
35570: LD_EXP 78
35574: PUSH
35575: LD_VAR 0 2
35579: ARRAY
35580: PPUSH
35581: LD_INT 25
35583: PUSH
35584: LD_INT 16
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PPUSH
35591: CALL_OW 72
35595: ST_TO_ADDR
// if tmp < 6 then
35596: LD_VAR 0 4
35600: PUSH
35601: LD_INT 6
35603: LESS
35604: IFFALSE 35816
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35606: LD_ADDR_VAR 0 6
35610: PUSH
35611: LD_EXP 49
35615: PUSH
35616: LD_VAR 0 2
35620: ARRAY
35621: PPUSH
35622: LD_INT 2
35624: PUSH
35625: LD_INT 30
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 30
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: PPUSH
35650: CALL_OW 72
35654: ST_TO_ADDR
// if depot then
35655: LD_VAR 0 6
35659: IFFALSE 35816
// begin selected := 0 ;
35661: LD_ADDR_VAR 0 7
35665: PUSH
35666: LD_INT 0
35668: ST_TO_ADDR
// for j in depot do
35669: LD_ADDR_VAR 0 3
35673: PUSH
35674: LD_VAR 0 6
35678: PUSH
35679: FOR_IN
35680: IFFALSE 35711
// begin if UnitsInside ( j ) < 6 then
35682: LD_VAR 0 3
35686: PPUSH
35687: CALL_OW 313
35691: PUSH
35692: LD_INT 6
35694: LESS
35695: IFFALSE 35709
// begin selected := j ;
35697: LD_ADDR_VAR 0 7
35701: PUSH
35702: LD_VAR 0 3
35706: ST_TO_ADDR
// break ;
35707: GO 35711
// end ; end ;
35709: GO 35679
35711: POP
35712: POP
// if selected then
35713: LD_VAR 0 7
35717: IFFALSE 35816
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
35719: LD_ADDR_VAR 0 3
35723: PUSH
35724: LD_EXP 78
35728: PUSH
35729: LD_VAR 0 2
35733: ARRAY
35734: PPUSH
35735: LD_INT 25
35737: PUSH
35738: LD_INT 12
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PPUSH
35745: CALL_OW 72
35749: PUSH
35750: FOR_IN
35751: IFFALSE 35814
// if not HasTask ( j ) then
35753: LD_VAR 0 3
35757: PPUSH
35758: CALL_OW 314
35762: NOT
35763: IFFALSE 35812
// begin if not IsInUnit ( j ) then
35765: LD_VAR 0 3
35769: PPUSH
35770: CALL_OW 310
35774: NOT
35775: IFFALSE 35791
// ComEnterUnit ( j , selected ) ;
35777: LD_VAR 0 3
35781: PPUSH
35782: LD_VAR 0 7
35786: PPUSH
35787: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
35791: LD_VAR 0 3
35795: PPUSH
35796: LD_INT 16
35798: PPUSH
35799: CALL_OW 183
// AddComExitBuilding ( j ) ;
35803: LD_VAR 0 3
35807: PPUSH
35808: CALL_OW 182
// end ;
35812: GO 35750
35814: POP
35815: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
35816: LD_VAR 0 5
35820: PPUSH
35821: LD_INT 11
35823: PPUSH
35824: CALL_OW 325
35828: IFFALSE 36087
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
35830: LD_ADDR_VAR 0 4
35834: PUSH
35835: LD_EXP 78
35839: PUSH
35840: LD_VAR 0 2
35844: ARRAY
35845: PPUSH
35846: LD_INT 25
35848: PUSH
35849: LD_INT 16
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PPUSH
35856: CALL_OW 72
35860: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
35861: LD_VAR 0 4
35865: PUSH
35866: LD_INT 6
35868: GREATEREQUAL
35869: PUSH
35870: LD_VAR 0 5
35874: PPUSH
35875: LD_INT 2
35877: PPUSH
35878: CALL_OW 325
35882: NOT
35883: OR
35884: IFFALSE 36087
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
35886: LD_ADDR_VAR 0 8
35890: PUSH
35891: LD_EXP 49
35895: PUSH
35896: LD_VAR 0 2
35900: ARRAY
35901: PPUSH
35902: LD_INT 2
35904: PUSH
35905: LD_INT 30
35907: PUSH
35908: LD_INT 4
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 30
35917: PUSH
35918: LD_INT 5
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: PPUSH
35930: CALL_OW 72
35934: ST_TO_ADDR
// if barracks then
35935: LD_VAR 0 8
35939: IFFALSE 36087
// begin selected := 0 ;
35941: LD_ADDR_VAR 0 7
35945: PUSH
35946: LD_INT 0
35948: ST_TO_ADDR
// for j in barracks do
35949: LD_ADDR_VAR 0 3
35953: PUSH
35954: LD_VAR 0 8
35958: PUSH
35959: FOR_IN
35960: IFFALSE 35991
// begin if UnitsInside ( j ) < 6 then
35962: LD_VAR 0 3
35966: PPUSH
35967: CALL_OW 313
35971: PUSH
35972: LD_INT 6
35974: LESS
35975: IFFALSE 35989
// begin selected := j ;
35977: LD_ADDR_VAR 0 7
35981: PUSH
35982: LD_VAR 0 3
35986: ST_TO_ADDR
// break ;
35987: GO 35991
// end ; end ;
35989: GO 35959
35991: POP
35992: POP
// if selected then
35993: LD_VAR 0 7
35997: IFFALSE 36087
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
35999: LD_ADDR_VAR 0 3
36003: PUSH
36004: LD_EXP 78
36008: PUSH
36009: LD_VAR 0 2
36013: ARRAY
36014: PPUSH
36015: LD_INT 25
36017: PUSH
36018: LD_INT 12
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PPUSH
36025: CALL_OW 72
36029: PUSH
36030: FOR_IN
36031: IFFALSE 36085
// if not IsInUnit ( j ) and not HasTask ( j ) then
36033: LD_VAR 0 3
36037: PPUSH
36038: CALL_OW 310
36042: NOT
36043: PUSH
36044: LD_VAR 0 3
36048: PPUSH
36049: CALL_OW 314
36053: NOT
36054: AND
36055: IFFALSE 36083
// begin ComEnterUnit ( j , selected ) ;
36057: LD_VAR 0 3
36061: PPUSH
36062: LD_VAR 0 7
36066: PPUSH
36067: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
36071: LD_VAR 0 3
36075: PPUSH
36076: LD_INT 15
36078: PPUSH
36079: CALL_OW 183
// end ;
36083: GO 36030
36085: POP
36086: POP
// end ; end ; end ; end ; end ;
36087: GO 35480
36089: POP
36090: POP
// end ;
36091: LD_VAR 0 1
36095: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
36096: LD_INT 0
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
// if not mc_bases then
36102: LD_EXP 49
36106: NOT
36107: IFFALSE 36111
// exit ;
36109: GO 36289
// for i = 1 to mc_bases do
36111: LD_ADDR_VAR 0 2
36115: PUSH
36116: DOUBLE
36117: LD_INT 1
36119: DEC
36120: ST_TO_ADDR
36121: LD_EXP 49
36125: PUSH
36126: FOR_TO
36127: IFFALSE 36287
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
36129: LD_ADDR_VAR 0 4
36133: PUSH
36134: LD_EXP 49
36138: PUSH
36139: LD_VAR 0 2
36143: ARRAY
36144: PPUSH
36145: LD_INT 25
36147: PUSH
36148: LD_INT 9
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PPUSH
36155: CALL_OW 72
36159: ST_TO_ADDR
// if not tmp then
36160: LD_VAR 0 4
36164: NOT
36165: IFFALSE 36169
// continue ;
36167: GO 36126
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
36169: LD_EXP 75
36173: PUSH
36174: LD_VAR 0 2
36178: ARRAY
36179: PPUSH
36180: LD_INT 29
36182: PPUSH
36183: CALL_OW 325
36187: NOT
36188: PUSH
36189: LD_EXP 75
36193: PUSH
36194: LD_VAR 0 2
36198: ARRAY
36199: PPUSH
36200: LD_INT 28
36202: PPUSH
36203: CALL_OW 325
36207: NOT
36208: AND
36209: IFFALSE 36213
// continue ;
36211: GO 36126
// for j in tmp do
36213: LD_ADDR_VAR 0 3
36217: PUSH
36218: LD_VAR 0 4
36222: PUSH
36223: FOR_IN
36224: IFFALSE 36283
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
36226: LD_VAR 0 3
36230: PUSH
36231: LD_EXP 52
36235: PUSH
36236: LD_VAR 0 2
36240: ARRAY
36241: PUSH
36242: LD_INT 1
36244: ARRAY
36245: IN
36246: NOT
36247: PUSH
36248: LD_VAR 0 3
36252: PUSH
36253: LD_EXP 52
36257: PUSH
36258: LD_VAR 0 2
36262: ARRAY
36263: PUSH
36264: LD_INT 2
36266: ARRAY
36267: IN
36268: NOT
36269: AND
36270: IFFALSE 36281
// ComSpaceTimeShoot ( j ) ;
36272: LD_VAR 0 3
36276: PPUSH
36277: CALL 46741 0 1
36281: GO 36223
36283: POP
36284: POP
// end ;
36285: GO 36126
36287: POP
36288: POP
// end ;
36289: LD_VAR 0 1
36293: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
36294: LD_INT 0
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
// if not mc_bases then
36305: LD_EXP 49
36309: NOT
36310: IFFALSE 36314
// exit ;
36312: GO 36936
// for i = 1 to mc_bases do
36314: LD_ADDR_VAR 0 2
36318: PUSH
36319: DOUBLE
36320: LD_INT 1
36322: DEC
36323: ST_TO_ADDR
36324: LD_EXP 49
36328: PUSH
36329: FOR_TO
36330: IFFALSE 36934
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
36332: LD_EXP 84
36336: PUSH
36337: LD_VAR 0 2
36341: ARRAY
36342: NOT
36343: PUSH
36344: LD_INT 38
36346: PPUSH
36347: LD_EXP 75
36351: PUSH
36352: LD_VAR 0 2
36356: ARRAY
36357: PPUSH
36358: CALL_OW 321
36362: PUSH
36363: LD_INT 2
36365: NONEQUAL
36366: OR
36367: IFFALSE 36371
// continue ;
36369: GO 36329
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
36371: LD_ADDR_VAR 0 8
36375: PUSH
36376: LD_EXP 49
36380: PUSH
36381: LD_VAR 0 2
36385: ARRAY
36386: PPUSH
36387: LD_INT 30
36389: PUSH
36390: LD_INT 34
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PPUSH
36397: CALL_OW 72
36401: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
36402: LD_ADDR_VAR 0 9
36406: PUSH
36407: LD_EXP 49
36411: PUSH
36412: LD_VAR 0 2
36416: ARRAY
36417: PPUSH
36418: LD_INT 25
36420: PUSH
36421: LD_INT 4
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PPUSH
36428: CALL_OW 72
36432: PPUSH
36433: LD_INT 0
36435: PPUSH
36436: CALL 85911 0 2
36440: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
36441: LD_VAR 0 9
36445: NOT
36446: PUSH
36447: LD_VAR 0 8
36451: NOT
36452: OR
36453: PUSH
36454: LD_EXP 49
36458: PUSH
36459: LD_VAR 0 2
36463: ARRAY
36464: PPUSH
36465: LD_INT 124
36467: PPUSH
36468: CALL 85911 0 2
36472: OR
36473: IFFALSE 36477
// continue ;
36475: GO 36329
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
36477: LD_EXP 85
36481: PUSH
36482: LD_VAR 0 2
36486: ARRAY
36487: PUSH
36488: LD_EXP 84
36492: PUSH
36493: LD_VAR 0 2
36497: ARRAY
36498: LESS
36499: PUSH
36500: LD_EXP 85
36504: PUSH
36505: LD_VAR 0 2
36509: ARRAY
36510: PUSH
36511: LD_VAR 0 8
36515: LESS
36516: AND
36517: IFFALSE 36932
// begin tmp := sci [ 1 ] ;
36519: LD_ADDR_VAR 0 7
36523: PUSH
36524: LD_VAR 0 9
36528: PUSH
36529: LD_INT 1
36531: ARRAY
36532: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
36533: LD_VAR 0 7
36537: PPUSH
36538: LD_INT 124
36540: PPUSH
36541: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
36545: LD_ADDR_VAR 0 3
36549: PUSH
36550: DOUBLE
36551: LD_EXP 84
36555: PUSH
36556: LD_VAR 0 2
36560: ARRAY
36561: INC
36562: ST_TO_ADDR
36563: LD_EXP 84
36567: PUSH
36568: LD_VAR 0 2
36572: ARRAY
36573: PUSH
36574: FOR_DOWNTO
36575: IFFALSE 36918
// begin if IsInUnit ( tmp ) then
36577: LD_VAR 0 7
36581: PPUSH
36582: CALL_OW 310
36586: IFFALSE 36597
// ComExitBuilding ( tmp ) ;
36588: LD_VAR 0 7
36592: PPUSH
36593: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
36597: LD_INT 35
36599: PPUSH
36600: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
36604: LD_VAR 0 7
36608: PPUSH
36609: CALL_OW 310
36613: NOT
36614: PUSH
36615: LD_VAR 0 7
36619: PPUSH
36620: CALL_OW 314
36624: NOT
36625: AND
36626: IFFALSE 36597
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
36628: LD_ADDR_VAR 0 6
36632: PUSH
36633: LD_VAR 0 7
36637: PPUSH
36638: CALL_OW 250
36642: PUSH
36643: LD_VAR 0 7
36647: PPUSH
36648: CALL_OW 251
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
36657: LD_INT 35
36659: PPUSH
36660: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
36664: LD_ADDR_VAR 0 4
36668: PUSH
36669: LD_EXP 84
36673: PUSH
36674: LD_VAR 0 2
36678: ARRAY
36679: PUSH
36680: LD_VAR 0 3
36684: ARRAY
36685: PUSH
36686: LD_INT 1
36688: ARRAY
36689: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
36690: LD_ADDR_VAR 0 5
36694: PUSH
36695: LD_EXP 84
36699: PUSH
36700: LD_VAR 0 2
36704: ARRAY
36705: PUSH
36706: LD_VAR 0 3
36710: ARRAY
36711: PUSH
36712: LD_INT 2
36714: ARRAY
36715: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
36716: LD_VAR 0 7
36720: PPUSH
36721: LD_INT 10
36723: PPUSH
36724: CALL 55244 0 2
36728: PUSH
36729: LD_INT 4
36731: ARRAY
36732: IFFALSE 36770
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
36734: LD_VAR 0 7
36738: PPUSH
36739: LD_VAR 0 6
36743: PUSH
36744: LD_INT 1
36746: ARRAY
36747: PPUSH
36748: LD_VAR 0 6
36752: PUSH
36753: LD_INT 2
36755: ARRAY
36756: PPUSH
36757: CALL_OW 111
// wait ( 0 0$10 ) ;
36761: LD_INT 350
36763: PPUSH
36764: CALL_OW 67
// end else
36768: GO 36796
// begin ComMoveXY ( tmp , x , y ) ;
36770: LD_VAR 0 7
36774: PPUSH
36775: LD_VAR 0 4
36779: PPUSH
36780: LD_VAR 0 5
36784: PPUSH
36785: CALL_OW 111
// wait ( 0 0$3 ) ;
36789: LD_INT 105
36791: PPUSH
36792: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
36796: LD_VAR 0 7
36800: PPUSH
36801: LD_VAR 0 4
36805: PPUSH
36806: LD_VAR 0 5
36810: PPUSH
36811: CALL_OW 307
36815: IFFALSE 36657
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
36817: LD_VAR 0 7
36821: PPUSH
36822: LD_VAR 0 4
36826: PPUSH
36827: LD_VAR 0 5
36831: PPUSH
36832: LD_VAR 0 8
36836: PUSH
36837: LD_VAR 0 3
36841: ARRAY
36842: PPUSH
36843: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
36847: LD_INT 35
36849: PPUSH
36850: CALL_OW 67
// until not HasTask ( tmp ) ;
36854: LD_VAR 0 7
36858: PPUSH
36859: CALL_OW 314
36863: NOT
36864: IFFALSE 36847
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
36866: LD_ADDR_EXP 85
36870: PUSH
36871: LD_EXP 85
36875: PPUSH
36876: LD_VAR 0 2
36880: PUSH
36881: LD_EXP 85
36885: PUSH
36886: LD_VAR 0 2
36890: ARRAY
36891: PUSH
36892: LD_INT 1
36894: PLUS
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PPUSH
36900: LD_VAR 0 8
36904: PUSH
36905: LD_VAR 0 3
36909: ARRAY
36910: PPUSH
36911: CALL 52651 0 3
36915: ST_TO_ADDR
// end ;
36916: GO 36574
36918: POP
36919: POP
// MC_Reset ( i , 124 ) ;
36920: LD_VAR 0 2
36924: PPUSH
36925: LD_INT 124
36927: PPUSH
36928: CALL 20781 0 2
// end ; end ;
36932: GO 36329
36934: POP
36935: POP
// end ;
36936: LD_VAR 0 1
36940: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
36941: LD_INT 0
36943: PPUSH
36944: PPUSH
36945: PPUSH
// if not mc_bases then
36946: LD_EXP 49
36950: NOT
36951: IFFALSE 36955
// exit ;
36953: GO 37561
// for i = 1 to mc_bases do
36955: LD_ADDR_VAR 0 2
36959: PUSH
36960: DOUBLE
36961: LD_INT 1
36963: DEC
36964: ST_TO_ADDR
36965: LD_EXP 49
36969: PUSH
36970: FOR_TO
36971: IFFALSE 37559
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_EXP 49
36982: PUSH
36983: LD_VAR 0 2
36987: ARRAY
36988: PPUSH
36989: LD_INT 25
36991: PUSH
36992: LD_INT 4
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PPUSH
36999: CALL_OW 72
37003: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37004: LD_VAR 0 3
37008: NOT
37009: PUSH
37010: LD_EXP 86
37014: PUSH
37015: LD_VAR 0 2
37019: ARRAY
37020: NOT
37021: OR
37022: PUSH
37023: LD_EXP 49
37027: PUSH
37028: LD_VAR 0 2
37032: ARRAY
37033: PPUSH
37034: LD_INT 2
37036: PUSH
37037: LD_INT 30
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 30
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: PPUSH
37062: CALL_OW 72
37066: NOT
37067: OR
37068: IFFALSE 37118
// begin if mc_deposits_finder [ i ] then
37070: LD_EXP 87
37074: PUSH
37075: LD_VAR 0 2
37079: ARRAY
37080: IFFALSE 37116
// begin MC_Reset ( i , 125 ) ;
37082: LD_VAR 0 2
37086: PPUSH
37087: LD_INT 125
37089: PPUSH
37090: CALL 20781 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37094: LD_ADDR_EXP 87
37098: PUSH
37099: LD_EXP 87
37103: PPUSH
37104: LD_VAR 0 2
37108: PPUSH
37109: EMPTY
37110: PPUSH
37111: CALL_OW 1
37115: ST_TO_ADDR
// end ; continue ;
37116: GO 36970
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
37118: LD_EXP 86
37122: PUSH
37123: LD_VAR 0 2
37127: ARRAY
37128: PUSH
37129: LD_INT 1
37131: ARRAY
37132: PUSH
37133: LD_INT 3
37135: ARRAY
37136: PUSH
37137: LD_INT 1
37139: EQUAL
37140: PUSH
37141: LD_INT 20
37143: PPUSH
37144: LD_EXP 75
37148: PUSH
37149: LD_VAR 0 2
37153: ARRAY
37154: PPUSH
37155: CALL_OW 321
37159: PUSH
37160: LD_INT 2
37162: NONEQUAL
37163: AND
37164: IFFALSE 37214
// begin if mc_deposits_finder [ i ] then
37166: LD_EXP 87
37170: PUSH
37171: LD_VAR 0 2
37175: ARRAY
37176: IFFALSE 37212
// begin MC_Reset ( i , 125 ) ;
37178: LD_VAR 0 2
37182: PPUSH
37183: LD_INT 125
37185: PPUSH
37186: CALL 20781 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37190: LD_ADDR_EXP 87
37194: PUSH
37195: LD_EXP 87
37199: PPUSH
37200: LD_VAR 0 2
37204: PPUSH
37205: EMPTY
37206: PPUSH
37207: CALL_OW 1
37211: ST_TO_ADDR
// end ; continue ;
37212: GO 36970
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
37214: LD_EXP 86
37218: PUSH
37219: LD_VAR 0 2
37223: ARRAY
37224: PUSH
37225: LD_INT 1
37227: ARRAY
37228: PUSH
37229: LD_INT 1
37231: ARRAY
37232: PPUSH
37233: LD_EXP 86
37237: PUSH
37238: LD_VAR 0 2
37242: ARRAY
37243: PUSH
37244: LD_INT 1
37246: ARRAY
37247: PUSH
37248: LD_INT 2
37250: ARRAY
37251: PPUSH
37252: LD_EXP 75
37256: PUSH
37257: LD_VAR 0 2
37261: ARRAY
37262: PPUSH
37263: CALL_OW 440
37267: IFFALSE 37310
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
37269: LD_ADDR_EXP 86
37273: PUSH
37274: LD_EXP 86
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_EXP 86
37288: PUSH
37289: LD_VAR 0 2
37293: ARRAY
37294: PPUSH
37295: LD_INT 1
37297: PPUSH
37298: CALL_OW 3
37302: PPUSH
37303: CALL_OW 1
37307: ST_TO_ADDR
37308: GO 37557
// begin if not mc_deposits_finder [ i ] then
37310: LD_EXP 87
37314: PUSH
37315: LD_VAR 0 2
37319: ARRAY
37320: NOT
37321: IFFALSE 37373
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
37323: LD_ADDR_EXP 87
37327: PUSH
37328: LD_EXP 87
37332: PPUSH
37333: LD_VAR 0 2
37337: PPUSH
37338: LD_VAR 0 3
37342: PUSH
37343: LD_INT 1
37345: ARRAY
37346: PUSH
37347: EMPTY
37348: LIST
37349: PPUSH
37350: CALL_OW 1
37354: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
37355: LD_VAR 0 3
37359: PUSH
37360: LD_INT 1
37362: ARRAY
37363: PPUSH
37364: LD_INT 125
37366: PPUSH
37367: CALL_OW 109
// end else
37371: GO 37557
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
37373: LD_EXP 87
37377: PUSH
37378: LD_VAR 0 2
37382: ARRAY
37383: PUSH
37384: LD_INT 1
37386: ARRAY
37387: PPUSH
37388: CALL_OW 310
37392: IFFALSE 37415
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
37394: LD_EXP 87
37398: PUSH
37399: LD_VAR 0 2
37403: ARRAY
37404: PUSH
37405: LD_INT 1
37407: ARRAY
37408: PPUSH
37409: CALL_OW 122
37413: GO 37557
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
37415: LD_EXP 87
37419: PUSH
37420: LD_VAR 0 2
37424: ARRAY
37425: PUSH
37426: LD_INT 1
37428: ARRAY
37429: PPUSH
37430: CALL_OW 314
37434: NOT
37435: PUSH
37436: LD_EXP 87
37440: PUSH
37441: LD_VAR 0 2
37445: ARRAY
37446: PUSH
37447: LD_INT 1
37449: ARRAY
37450: PPUSH
37451: LD_EXP 86
37455: PUSH
37456: LD_VAR 0 2
37460: ARRAY
37461: PUSH
37462: LD_INT 1
37464: ARRAY
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: PPUSH
37470: LD_EXP 86
37474: PUSH
37475: LD_VAR 0 2
37479: ARRAY
37480: PUSH
37481: LD_INT 1
37483: ARRAY
37484: PUSH
37485: LD_INT 2
37487: ARRAY
37488: PPUSH
37489: CALL_OW 297
37493: PUSH
37494: LD_INT 6
37496: GREATER
37497: AND
37498: IFFALSE 37557
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
37500: LD_EXP 87
37504: PUSH
37505: LD_VAR 0 2
37509: ARRAY
37510: PUSH
37511: LD_INT 1
37513: ARRAY
37514: PPUSH
37515: LD_EXP 86
37519: PUSH
37520: LD_VAR 0 2
37524: ARRAY
37525: PUSH
37526: LD_INT 1
37528: ARRAY
37529: PUSH
37530: LD_INT 1
37532: ARRAY
37533: PPUSH
37534: LD_EXP 86
37538: PUSH
37539: LD_VAR 0 2
37543: ARRAY
37544: PUSH
37545: LD_INT 1
37547: ARRAY
37548: PUSH
37549: LD_INT 2
37551: ARRAY
37552: PPUSH
37553: CALL_OW 111
// end ; end ; end ;
37557: GO 36970
37559: POP
37560: POP
// end ;
37561: LD_VAR 0 1
37565: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
37566: LD_INT 0
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
// if not mc_bases then
37579: LD_EXP 49
37583: NOT
37584: IFFALSE 37588
// exit ;
37586: GO 38312
// for i = 1 to mc_bases do
37588: LD_ADDR_VAR 0 2
37592: PUSH
37593: DOUBLE
37594: LD_INT 1
37596: DEC
37597: ST_TO_ADDR
37598: LD_EXP 49
37602: PUSH
37603: FOR_TO
37604: IFFALSE 38310
// begin if not mc_bases [ i ] then
37606: LD_EXP 49
37610: PUSH
37611: LD_VAR 0 2
37615: ARRAY
37616: NOT
37617: IFFALSE 37621
// continue ;
37619: GO 37603
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
37621: LD_ADDR_VAR 0 7
37625: PUSH
37626: LD_EXP 49
37630: PUSH
37631: LD_VAR 0 2
37635: ARRAY
37636: PUSH
37637: LD_INT 1
37639: ARRAY
37640: PPUSH
37641: CALL_OW 248
37645: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
37646: LD_VAR 0 7
37650: PUSH
37651: LD_INT 3
37653: EQUAL
37654: PUSH
37655: LD_EXP 68
37659: PUSH
37660: LD_VAR 0 2
37664: ARRAY
37665: PUSH
37666: LD_EXP 71
37670: PUSH
37671: LD_VAR 0 2
37675: ARRAY
37676: UNION
37677: PPUSH
37678: LD_INT 33
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PPUSH
37688: CALL_OW 72
37692: NOT
37693: OR
37694: IFFALSE 37698
// continue ;
37696: GO 37603
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
37698: LD_ADDR_VAR 0 9
37702: PUSH
37703: LD_EXP 49
37707: PUSH
37708: LD_VAR 0 2
37712: ARRAY
37713: PPUSH
37714: LD_INT 30
37716: PUSH
37717: LD_INT 36
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PPUSH
37724: CALL_OW 72
37728: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
37729: LD_ADDR_VAR 0 10
37733: PUSH
37734: LD_EXP 68
37738: PUSH
37739: LD_VAR 0 2
37743: ARRAY
37744: PPUSH
37745: LD_INT 34
37747: PUSH
37748: LD_INT 31
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 72
37759: ST_TO_ADDR
// if not cts and not mcts then
37760: LD_VAR 0 9
37764: NOT
37765: PUSH
37766: LD_VAR 0 10
37770: NOT
37771: AND
37772: IFFALSE 37776
// continue ;
37774: GO 37603
// x := cts ;
37776: LD_ADDR_VAR 0 11
37780: PUSH
37781: LD_VAR 0 9
37785: ST_TO_ADDR
// if not x then
37786: LD_VAR 0 11
37790: NOT
37791: IFFALSE 37803
// x := mcts ;
37793: LD_ADDR_VAR 0 11
37797: PUSH
37798: LD_VAR 0 10
37802: ST_TO_ADDR
// if mc_remote_driver [ i ] then
37803: LD_EXP 89
37807: PUSH
37808: LD_VAR 0 2
37812: ARRAY
37813: IFFALSE 38082
// for j in mc_remote_driver [ i ] do
37815: LD_ADDR_VAR 0 3
37819: PUSH
37820: LD_EXP 89
37824: PUSH
37825: LD_VAR 0 2
37829: ARRAY
37830: PUSH
37831: FOR_IN
37832: IFFALSE 38080
// begin if GetClass ( j ) <> 3 then
37834: LD_VAR 0 3
37838: PPUSH
37839: CALL_OW 257
37843: PUSH
37844: LD_INT 3
37846: NONEQUAL
37847: IFFALSE 37900
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
37849: LD_ADDR_EXP 89
37853: PUSH
37854: LD_EXP 89
37858: PPUSH
37859: LD_VAR 0 2
37863: PPUSH
37864: LD_EXP 89
37868: PUSH
37869: LD_VAR 0 2
37873: ARRAY
37874: PUSH
37875: LD_VAR 0 3
37879: DIFF
37880: PPUSH
37881: CALL_OW 1
37885: ST_TO_ADDR
// SetTag ( j , 0 ) ;
37886: LD_VAR 0 3
37890: PPUSH
37891: LD_INT 0
37893: PPUSH
37894: CALL_OW 109
// continue ;
37898: GO 37831
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
37900: LD_VAR 0 3
37904: PPUSH
37905: CALL_OW 310
37909: NOT
37910: PUSH
37911: LD_VAR 0 3
37915: PPUSH
37916: CALL_OW 310
37920: PPUSH
37921: CALL_OW 266
37925: PUSH
37926: LD_INT 36
37928: NONEQUAL
37929: PUSH
37930: LD_VAR 0 3
37934: PPUSH
37935: CALL 85999 0 1
37939: NOT
37940: AND
37941: OR
37942: IFFALSE 38078
// begin if IsInUnit ( j ) then
37944: LD_VAR 0 3
37948: PPUSH
37949: CALL_OW 310
37953: IFFALSE 37964
// ComExitBuilding ( j ) ;
37955: LD_VAR 0 3
37959: PPUSH
37960: CALL_OW 122
// ct := 0 ;
37964: LD_ADDR_VAR 0 8
37968: PUSH
37969: LD_INT 0
37971: ST_TO_ADDR
// for k in x do
37972: LD_ADDR_VAR 0 4
37976: PUSH
37977: LD_VAR 0 11
37981: PUSH
37982: FOR_IN
37983: IFFALSE 38056
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
37985: LD_VAR 0 4
37989: PPUSH
37990: CALL_OW 264
37994: PUSH
37995: LD_INT 31
37997: EQUAL
37998: PUSH
37999: LD_VAR 0 4
38003: PPUSH
38004: CALL_OW 311
38008: NOT
38009: AND
38010: PUSH
38011: LD_VAR 0 4
38015: PPUSH
38016: CALL_OW 266
38020: PUSH
38021: LD_INT 36
38023: EQUAL
38024: PUSH
38025: LD_VAR 0 4
38029: PPUSH
38030: CALL_OW 313
38034: PUSH
38035: LD_INT 3
38037: LESS
38038: AND
38039: OR
38040: IFFALSE 38054
// begin ct := k ;
38042: LD_ADDR_VAR 0 8
38046: PUSH
38047: LD_VAR 0 4
38051: ST_TO_ADDR
// break ;
38052: GO 38056
// end ;
38054: GO 37982
38056: POP
38057: POP
// if ct then
38058: LD_VAR 0 8
38062: IFFALSE 38078
// ComEnterUnit ( j , ct ) ;
38064: LD_VAR 0 3
38068: PPUSH
38069: LD_VAR 0 8
38073: PPUSH
38074: CALL_OW 120
// end ; end ;
38078: GO 37831
38080: POP
38081: POP
// places := 0 ;
38082: LD_ADDR_VAR 0 5
38086: PUSH
38087: LD_INT 0
38089: ST_TO_ADDR
// for j = 1 to x do
38090: LD_ADDR_VAR 0 3
38094: PUSH
38095: DOUBLE
38096: LD_INT 1
38098: DEC
38099: ST_TO_ADDR
38100: LD_VAR 0 11
38104: PUSH
38105: FOR_TO
38106: IFFALSE 38161
// if GetWeapon ( x [ j ] ) = ar_control_tower then
38108: LD_VAR 0 11
38112: PUSH
38113: LD_VAR 0 3
38117: ARRAY
38118: PPUSH
38119: CALL_OW 264
38123: PUSH
38124: LD_INT 31
38126: EQUAL
38127: IFFALSE 38145
// places := places + 1 else
38129: LD_ADDR_VAR 0 5
38133: PUSH
38134: LD_VAR 0 5
38138: PUSH
38139: LD_INT 1
38141: PLUS
38142: ST_TO_ADDR
38143: GO 38159
// places := places + 3 ;
38145: LD_ADDR_VAR 0 5
38149: PUSH
38150: LD_VAR 0 5
38154: PUSH
38155: LD_INT 3
38157: PLUS
38158: ST_TO_ADDR
38159: GO 38105
38161: POP
38162: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
38163: LD_ADDR_VAR 0 6
38167: PUSH
38168: LD_EXP 49
38172: PUSH
38173: LD_VAR 0 2
38177: ARRAY
38178: PPUSH
38179: LD_INT 25
38181: PUSH
38182: LD_INT 3
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PPUSH
38189: CALL_OW 72
38193: PUSH
38194: LD_EXP 89
38198: PUSH
38199: LD_VAR 0 2
38203: ARRAY
38204: DIFF
38205: PPUSH
38206: LD_INT 3
38208: PPUSH
38209: CALL 86899 0 2
38213: ST_TO_ADDR
// if not tmp then
38214: LD_VAR 0 6
38218: NOT
38219: IFFALSE 38223
// continue ;
38221: GO 37603
// places := places - mc_remote_driver [ i ] ;
38223: LD_ADDR_VAR 0 5
38227: PUSH
38228: LD_VAR 0 5
38232: PUSH
38233: LD_EXP 89
38237: PUSH
38238: LD_VAR 0 2
38242: ARRAY
38243: MINUS
38244: ST_TO_ADDR
// if places then
38245: LD_VAR 0 5
38249: IFFALSE 38308
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
38251: LD_ADDR_EXP 89
38255: PUSH
38256: LD_EXP 89
38260: PPUSH
38261: LD_VAR 0 2
38265: PPUSH
38266: LD_EXP 89
38270: PUSH
38271: LD_VAR 0 2
38275: ARRAY
38276: PUSH
38277: LD_VAR 0 6
38281: PUSH
38282: LD_INT 1
38284: ARRAY
38285: UNION
38286: PPUSH
38287: CALL_OW 1
38291: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
38292: LD_VAR 0 6
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PPUSH
38301: LD_INT 126
38303: PPUSH
38304: CALL_OW 109
// end ; end ;
38308: GO 37603
38310: POP
38311: POP
// end ;
38312: LD_VAR 0 1
38316: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
38317: LD_INT 0
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
38325: LD_VAR 0 1
38329: NOT
38330: PUSH
38331: LD_VAR 0 2
38335: NOT
38336: OR
38337: PUSH
38338: LD_VAR 0 3
38342: NOT
38343: OR
38344: PUSH
38345: LD_VAR 0 4
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: LD_INT 4
38361: PUSH
38362: LD_INT 5
38364: PUSH
38365: LD_INT 8
38367: PUSH
38368: LD_INT 9
38370: PUSH
38371: LD_INT 15
38373: PUSH
38374: LD_INT 16
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: IN
38388: NOT
38389: OR
38390: IFFALSE 38394
// exit ;
38392: GO 39294
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
38394: LD_ADDR_VAR 0 2
38398: PUSH
38399: LD_VAR 0 2
38403: PPUSH
38404: LD_INT 21
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 24
38416: PUSH
38417: LD_INT 250
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PPUSH
38428: CALL_OW 72
38432: ST_TO_ADDR
// case class of 1 , 15 :
38433: LD_VAR 0 4
38437: PUSH
38438: LD_INT 1
38440: DOUBLE
38441: EQUAL
38442: IFTRUE 38452
38444: LD_INT 15
38446: DOUBLE
38447: EQUAL
38448: IFTRUE 38452
38450: GO 38537
38452: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
38453: LD_ADDR_VAR 0 8
38457: PUSH
38458: LD_VAR 0 2
38462: PPUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 30
38468: PUSH
38469: LD_INT 32
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 30
38478: PUSH
38479: LD_INT 31
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: PPUSH
38491: CALL_OW 72
38495: PUSH
38496: LD_VAR 0 2
38500: PPUSH
38501: LD_INT 2
38503: PUSH
38504: LD_INT 30
38506: PUSH
38507: LD_INT 4
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 30
38516: PUSH
38517: LD_INT 5
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: PPUSH
38529: CALL_OW 72
38533: ADD
38534: ST_TO_ADDR
38535: GO 38783
38537: LD_INT 2
38539: DOUBLE
38540: EQUAL
38541: IFTRUE 38551
38543: LD_INT 16
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38551
38549: GO 38597
38551: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
38552: LD_ADDR_VAR 0 8
38556: PUSH
38557: LD_VAR 0 2
38561: PPUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 30
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 30
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: PPUSH
38590: CALL_OW 72
38594: ST_TO_ADDR
38595: GO 38783
38597: LD_INT 3
38599: DOUBLE
38600: EQUAL
38601: IFTRUE 38605
38603: GO 38651
38605: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
38606: LD_ADDR_VAR 0 8
38610: PUSH
38611: LD_VAR 0 2
38615: PPUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 30
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 30
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: PPUSH
38644: CALL_OW 72
38648: ST_TO_ADDR
38649: GO 38783
38651: LD_INT 4
38653: DOUBLE
38654: EQUAL
38655: IFTRUE 38659
38657: GO 38716
38659: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
38660: LD_ADDR_VAR 0 8
38664: PUSH
38665: LD_VAR 0 2
38669: PPUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 30
38675: PUSH
38676: LD_INT 6
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 30
38685: PUSH
38686: LD_INT 7
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 30
38695: PUSH
38696: LD_INT 8
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 72
38713: ST_TO_ADDR
38714: GO 38783
38716: LD_INT 5
38718: DOUBLE
38719: EQUAL
38720: IFTRUE 38736
38722: LD_INT 8
38724: DOUBLE
38725: EQUAL
38726: IFTRUE 38736
38728: LD_INT 9
38730: DOUBLE
38731: EQUAL
38732: IFTRUE 38736
38734: GO 38782
38736: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
38737: LD_ADDR_VAR 0 8
38741: PUSH
38742: LD_VAR 0 2
38746: PPUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 30
38752: PUSH
38753: LD_INT 4
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 30
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: PPUSH
38775: CALL_OW 72
38779: ST_TO_ADDR
38780: GO 38783
38782: POP
// if not tmp then
38783: LD_VAR 0 8
38787: NOT
38788: IFFALSE 38792
// exit ;
38790: GO 39294
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
38792: LD_VAR 0 4
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: LD_INT 15
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: IN
38807: PUSH
38808: LD_EXP 58
38812: PUSH
38813: LD_VAR 0 1
38817: ARRAY
38818: AND
38819: IFFALSE 38975
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
38821: LD_ADDR_VAR 0 9
38825: PUSH
38826: LD_EXP 58
38830: PUSH
38831: LD_VAR 0 1
38835: ARRAY
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
38841: LD_VAR 0 9
38845: PUSH
38846: LD_EXP 59
38850: PUSH
38851: LD_VAR 0 1
38855: ARRAY
38856: IN
38857: NOT
38858: IFFALSE 38973
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
38860: LD_ADDR_EXP 59
38864: PUSH
38865: LD_EXP 59
38869: PPUSH
38870: LD_VAR 0 1
38874: PUSH
38875: LD_EXP 59
38879: PUSH
38880: LD_VAR 0 1
38884: ARRAY
38885: PUSH
38886: LD_INT 1
38888: PLUS
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PPUSH
38894: LD_VAR 0 9
38898: PPUSH
38899: CALL 52651 0 3
38903: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
38904: LD_ADDR_EXP 58
38908: PUSH
38909: LD_EXP 58
38913: PPUSH
38914: LD_VAR 0 1
38918: PPUSH
38919: LD_EXP 58
38923: PUSH
38924: LD_VAR 0 1
38928: ARRAY
38929: PUSH
38930: LD_VAR 0 9
38934: DIFF
38935: PPUSH
38936: CALL_OW 1
38940: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
38941: LD_VAR 0 3
38945: PPUSH
38946: LD_EXP 59
38950: PUSH
38951: LD_VAR 0 1
38955: ARRAY
38956: PUSH
38957: LD_EXP 59
38961: PUSH
38962: LD_VAR 0 1
38966: ARRAY
38967: ARRAY
38968: PPUSH
38969: CALL_OW 120
// end ; exit ;
38973: GO 39294
// end ; if tmp > 1 then
38975: LD_VAR 0 8
38979: PUSH
38980: LD_INT 1
38982: GREATER
38983: IFFALSE 39087
// for i = 2 to tmp do
38985: LD_ADDR_VAR 0 6
38989: PUSH
38990: DOUBLE
38991: LD_INT 2
38993: DEC
38994: ST_TO_ADDR
38995: LD_VAR 0 8
38999: PUSH
39000: FOR_TO
39001: IFFALSE 39085
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
39003: LD_VAR 0 8
39007: PUSH
39008: LD_VAR 0 6
39012: ARRAY
39013: PPUSH
39014: CALL_OW 461
39018: PUSH
39019: LD_INT 6
39021: EQUAL
39022: IFFALSE 39083
// begin x := tmp [ i ] ;
39024: LD_ADDR_VAR 0 9
39028: PUSH
39029: LD_VAR 0 8
39033: PUSH
39034: LD_VAR 0 6
39038: ARRAY
39039: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
39040: LD_ADDR_VAR 0 8
39044: PUSH
39045: LD_VAR 0 8
39049: PPUSH
39050: LD_VAR 0 6
39054: PPUSH
39055: CALL_OW 3
39059: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
39060: LD_ADDR_VAR 0 8
39064: PUSH
39065: LD_VAR 0 8
39069: PPUSH
39070: LD_INT 1
39072: PPUSH
39073: LD_VAR 0 9
39077: PPUSH
39078: CALL_OW 2
39082: ST_TO_ADDR
// end ;
39083: GO 39000
39085: POP
39086: POP
// for i in tmp do
39087: LD_ADDR_VAR 0 6
39091: PUSH
39092: LD_VAR 0 8
39096: PUSH
39097: FOR_IN
39098: IFFALSE 39167
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
39100: LD_VAR 0 6
39104: PPUSH
39105: CALL_OW 313
39109: PUSH
39110: LD_INT 6
39112: LESS
39113: PUSH
39114: LD_VAR 0 6
39118: PPUSH
39119: CALL_OW 266
39123: PUSH
39124: LD_INT 31
39126: PUSH
39127: LD_INT 32
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: IN
39134: NOT
39135: AND
39136: PUSH
39137: LD_VAR 0 6
39141: PPUSH
39142: CALL_OW 313
39146: PUSH
39147: LD_INT 0
39149: EQUAL
39150: OR
39151: IFFALSE 39165
// begin j := i ;
39153: LD_ADDR_VAR 0 7
39157: PUSH
39158: LD_VAR 0 6
39162: ST_TO_ADDR
// break ;
39163: GO 39167
// end ; end ;
39165: GO 39097
39167: POP
39168: POP
// if j then
39169: LD_VAR 0 7
39173: IFFALSE 39191
// ComEnterUnit ( unit , j ) else
39175: LD_VAR 0 3
39179: PPUSH
39180: LD_VAR 0 7
39184: PPUSH
39185: CALL_OW 120
39189: GO 39294
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39191: LD_ADDR_VAR 0 10
39195: PUSH
39196: LD_VAR 0 2
39200: PPUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 30
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 30
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: PPUSH
39229: CALL_OW 72
39233: ST_TO_ADDR
// if depot then
39234: LD_VAR 0 10
39238: IFFALSE 39294
// begin depot := NearestUnitToUnit ( depot , unit ) ;
39240: LD_ADDR_VAR 0 10
39244: PUSH
39245: LD_VAR 0 10
39249: PPUSH
39250: LD_VAR 0 3
39254: PPUSH
39255: CALL_OW 74
39259: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
39260: LD_VAR 0 3
39264: PPUSH
39265: LD_VAR 0 10
39269: PPUSH
39270: CALL_OW 296
39274: PUSH
39275: LD_INT 10
39277: GREATER
39278: IFFALSE 39294
// ComStandNearbyBuilding ( unit , depot ) ;
39280: LD_VAR 0 3
39284: PPUSH
39285: LD_VAR 0 10
39289: PPUSH
39290: CALL 47358 0 2
// end ; end ; end ;
39294: LD_VAR 0 5
39298: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
39299: LD_INT 0
39301: PPUSH
39302: PPUSH
39303: PPUSH
39304: PPUSH
// if not mc_bases then
39305: LD_EXP 49
39309: NOT
39310: IFFALSE 39314
// exit ;
39312: GO 39553
// for i = 1 to mc_bases do
39314: LD_ADDR_VAR 0 2
39318: PUSH
39319: DOUBLE
39320: LD_INT 1
39322: DEC
39323: ST_TO_ADDR
39324: LD_EXP 49
39328: PUSH
39329: FOR_TO
39330: IFFALSE 39551
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
39332: LD_ADDR_VAR 0 4
39336: PUSH
39337: LD_EXP 49
39341: PUSH
39342: LD_VAR 0 2
39346: ARRAY
39347: PPUSH
39348: LD_INT 21
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PPUSH
39358: CALL_OW 72
39362: PUSH
39363: LD_EXP 78
39367: PUSH
39368: LD_VAR 0 2
39372: ARRAY
39373: UNION
39374: ST_TO_ADDR
// if not tmp then
39375: LD_VAR 0 4
39379: NOT
39380: IFFALSE 39384
// continue ;
39382: GO 39329
// for j in tmp do
39384: LD_ADDR_VAR 0 3
39388: PUSH
39389: LD_VAR 0 4
39393: PUSH
39394: FOR_IN
39395: IFFALSE 39547
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
39397: LD_VAR 0 3
39401: PPUSH
39402: CALL_OW 110
39406: NOT
39407: PUSH
39408: LD_VAR 0 3
39412: PPUSH
39413: CALL_OW 314
39417: NOT
39418: AND
39419: PUSH
39420: LD_VAR 0 3
39424: PPUSH
39425: CALL_OW 311
39429: NOT
39430: AND
39431: PUSH
39432: LD_VAR 0 3
39436: PPUSH
39437: CALL_OW 310
39441: NOT
39442: AND
39443: PUSH
39444: LD_VAR 0 3
39448: PUSH
39449: LD_EXP 52
39453: PUSH
39454: LD_VAR 0 2
39458: ARRAY
39459: PUSH
39460: LD_INT 1
39462: ARRAY
39463: IN
39464: NOT
39465: AND
39466: PUSH
39467: LD_VAR 0 3
39471: PUSH
39472: LD_EXP 52
39476: PUSH
39477: LD_VAR 0 2
39481: ARRAY
39482: PUSH
39483: LD_INT 2
39485: ARRAY
39486: IN
39487: NOT
39488: AND
39489: PUSH
39490: LD_VAR 0 3
39494: PUSH
39495: LD_EXP 61
39499: PUSH
39500: LD_VAR 0 2
39504: ARRAY
39505: IN
39506: NOT
39507: AND
39508: IFFALSE 39545
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
39510: LD_VAR 0 2
39514: PPUSH
39515: LD_EXP 49
39519: PUSH
39520: LD_VAR 0 2
39524: ARRAY
39525: PPUSH
39526: LD_VAR 0 3
39530: PPUSH
39531: LD_VAR 0 3
39535: PPUSH
39536: CALL_OW 257
39540: PPUSH
39541: CALL 38317 0 4
// end ;
39545: GO 39394
39547: POP
39548: POP
// end ;
39549: GO 39329
39551: POP
39552: POP
// end ;
39553: LD_VAR 0 1
39557: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
39558: LD_INT 0
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
// if not mc_bases [ base ] then
39566: LD_EXP 49
39570: PUSH
39571: LD_VAR 0 1
39575: ARRAY
39576: NOT
39577: IFFALSE 39581
// exit ;
39579: GO 39763
// tmp := [ ] ;
39581: LD_ADDR_VAR 0 6
39585: PUSH
39586: EMPTY
39587: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
39588: LD_ADDR_VAR 0 7
39592: PUSH
39593: LD_VAR 0 3
39597: PPUSH
39598: LD_INT 0
39600: PPUSH
39601: CALL_OW 517
39605: ST_TO_ADDR
// if not list then
39606: LD_VAR 0 7
39610: NOT
39611: IFFALSE 39615
// exit ;
39613: GO 39763
// for i = 1 to amount do
39615: LD_ADDR_VAR 0 5
39619: PUSH
39620: DOUBLE
39621: LD_INT 1
39623: DEC
39624: ST_TO_ADDR
39625: LD_VAR 0 2
39629: PUSH
39630: FOR_TO
39631: IFFALSE 39711
// begin x := rand ( 1 , list [ 1 ] ) ;
39633: LD_ADDR_VAR 0 8
39637: PUSH
39638: LD_INT 1
39640: PPUSH
39641: LD_VAR 0 7
39645: PUSH
39646: LD_INT 1
39648: ARRAY
39649: PPUSH
39650: CALL_OW 12
39654: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
39655: LD_ADDR_VAR 0 6
39659: PUSH
39660: LD_VAR 0 6
39664: PPUSH
39665: LD_VAR 0 5
39669: PPUSH
39670: LD_VAR 0 7
39674: PUSH
39675: LD_INT 1
39677: ARRAY
39678: PUSH
39679: LD_VAR 0 8
39683: ARRAY
39684: PUSH
39685: LD_VAR 0 7
39689: PUSH
39690: LD_INT 2
39692: ARRAY
39693: PUSH
39694: LD_VAR 0 8
39698: ARRAY
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PPUSH
39704: CALL_OW 1
39708: ST_TO_ADDR
// end ;
39709: GO 39630
39711: POP
39712: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
39713: LD_ADDR_EXP 62
39717: PUSH
39718: LD_EXP 62
39722: PPUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: LD_VAR 0 6
39732: PPUSH
39733: CALL_OW 1
39737: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
39738: LD_ADDR_EXP 64
39742: PUSH
39743: LD_EXP 64
39747: PPUSH
39748: LD_VAR 0 1
39752: PPUSH
39753: LD_VAR 0 3
39757: PPUSH
39758: CALL_OW 1
39762: ST_TO_ADDR
// end ;
39763: LD_VAR 0 4
39767: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
39768: LD_INT 0
39770: PPUSH
// if not mc_bases [ base ] then
39771: LD_EXP 49
39775: PUSH
39776: LD_VAR 0 1
39780: ARRAY
39781: NOT
39782: IFFALSE 39786
// exit ;
39784: GO 39811
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
39786: LD_ADDR_EXP 54
39790: PUSH
39791: LD_EXP 54
39795: PPUSH
39796: LD_VAR 0 1
39800: PPUSH
39801: LD_VAR 0 2
39805: PPUSH
39806: CALL_OW 1
39810: ST_TO_ADDR
// end ;
39811: LD_VAR 0 3
39815: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
39816: LD_INT 0
39818: PPUSH
// if not mc_bases [ base ] then
39819: LD_EXP 49
39823: PUSH
39824: LD_VAR 0 1
39828: ARRAY
39829: NOT
39830: IFFALSE 39834
// exit ;
39832: GO 39871
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
39834: LD_ADDR_EXP 54
39838: PUSH
39839: LD_EXP 54
39843: PPUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: LD_EXP 54
39853: PUSH
39854: LD_VAR 0 1
39858: ARRAY
39859: PUSH
39860: LD_VAR 0 2
39864: UNION
39865: PPUSH
39866: CALL_OW 1
39870: ST_TO_ADDR
// end ;
39871: LD_VAR 0 3
39875: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
39876: LD_INT 0
39878: PPUSH
// if not mc_bases [ base ] then
39879: LD_EXP 49
39883: PUSH
39884: LD_VAR 0 1
39888: ARRAY
39889: NOT
39890: IFFALSE 39894
// exit ;
39892: GO 39919
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
39894: LD_ADDR_EXP 70
39898: PUSH
39899: LD_EXP 70
39903: PPUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: LD_VAR 0 2
39913: PPUSH
39914: CALL_OW 1
39918: ST_TO_ADDR
// end ;
39919: LD_VAR 0 3
39923: RET
// export function MC_InsertProduceList ( base , components ) ; begin
39924: LD_INT 0
39926: PPUSH
// if not mc_bases [ base ] then
39927: LD_EXP 49
39931: PUSH
39932: LD_VAR 0 1
39936: ARRAY
39937: NOT
39938: IFFALSE 39942
// exit ;
39940: GO 39979
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
39942: LD_ADDR_EXP 70
39946: PUSH
39947: LD_EXP 70
39951: PPUSH
39952: LD_VAR 0 1
39956: PPUSH
39957: LD_EXP 70
39961: PUSH
39962: LD_VAR 0 1
39966: ARRAY
39967: PUSH
39968: LD_VAR 0 2
39972: ADD
39973: PPUSH
39974: CALL_OW 1
39978: ST_TO_ADDR
// end ;
39979: LD_VAR 0 3
39983: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
39984: LD_INT 0
39986: PPUSH
// if not mc_bases [ base ] then
39987: LD_EXP 49
39991: PUSH
39992: LD_VAR 0 1
39996: ARRAY
39997: NOT
39998: IFFALSE 40002
// exit ;
40000: GO 40056
// mc_defender := Replace ( mc_defender , base , deflist ) ;
40002: LD_ADDR_EXP 71
40006: PUSH
40007: LD_EXP 71
40011: PPUSH
40012: LD_VAR 0 1
40016: PPUSH
40017: LD_VAR 0 2
40021: PPUSH
40022: CALL_OW 1
40026: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
40027: LD_ADDR_EXP 60
40031: PUSH
40032: LD_EXP 60
40036: PPUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: LD_VAR 0 2
40046: PUSH
40047: LD_INT 0
40049: PLUS
40050: PPUSH
40051: CALL_OW 1
40055: ST_TO_ADDR
// end ;
40056: LD_VAR 0 3
40060: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
40061: LD_INT 0
40063: PPUSH
// if not mc_bases [ base ] then
40064: LD_EXP 49
40068: PUSH
40069: LD_VAR 0 1
40073: ARRAY
40074: NOT
40075: IFFALSE 40079
// exit ;
40077: GO 40104
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
40079: LD_ADDR_EXP 60
40083: PUSH
40084: LD_EXP 60
40088: PPUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: LD_VAR 0 2
40098: PPUSH
40099: CALL_OW 1
40103: ST_TO_ADDR
// end ;
40104: LD_VAR 0 3
40108: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
40109: LD_INT 0
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
// if not mc_bases [ base ] then
40115: LD_EXP 49
40119: PUSH
40120: LD_VAR 0 1
40124: ARRAY
40125: NOT
40126: IFFALSE 40130
// exit ;
40128: GO 40195
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
40130: LD_ADDR_EXP 69
40134: PUSH
40135: LD_EXP 69
40139: PPUSH
40140: LD_VAR 0 1
40144: PUSH
40145: LD_EXP 69
40149: PUSH
40150: LD_VAR 0 1
40154: ARRAY
40155: PUSH
40156: LD_INT 1
40158: PLUS
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PPUSH
40164: LD_VAR 0 1
40168: PUSH
40169: LD_VAR 0 2
40173: PUSH
40174: LD_VAR 0 3
40178: PUSH
40179: LD_VAR 0 4
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: PPUSH
40190: CALL 52651 0 3
40194: ST_TO_ADDR
// end ;
40195: LD_VAR 0 5
40199: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
40200: LD_INT 0
40202: PPUSH
// if not mc_bases [ base ] then
40203: LD_EXP 49
40207: PUSH
40208: LD_VAR 0 1
40212: ARRAY
40213: NOT
40214: IFFALSE 40218
// exit ;
40216: GO 40243
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
40218: LD_ADDR_EXP 86
40222: PUSH
40223: LD_EXP 86
40227: PPUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: LD_VAR 0 2
40237: PPUSH
40238: CALL_OW 1
40242: ST_TO_ADDR
// end ;
40243: LD_VAR 0 3
40247: RET
// export function MC_GetMinesField ( base ) ; begin
40248: LD_INT 0
40250: PPUSH
// result := mc_mines [ base ] ;
40251: LD_ADDR_VAR 0 2
40255: PUSH
40256: LD_EXP 62
40260: PUSH
40261: LD_VAR 0 1
40265: ARRAY
40266: ST_TO_ADDR
// end ;
40267: LD_VAR 0 2
40271: RET
// export function MC_GetProduceList ( base ) ; begin
40272: LD_INT 0
40274: PPUSH
// result := mc_produce [ base ] ;
40275: LD_ADDR_VAR 0 2
40279: PUSH
40280: LD_EXP 70
40284: PUSH
40285: LD_VAR 0 1
40289: ARRAY
40290: ST_TO_ADDR
// end ;
40291: LD_VAR 0 2
40295: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
40296: LD_INT 0
40298: PPUSH
40299: PPUSH
// if not mc_bases then
40300: LD_EXP 49
40304: NOT
40305: IFFALSE 40309
// exit ;
40307: GO 40374
// if mc_bases [ base ] then
40309: LD_EXP 49
40313: PUSH
40314: LD_VAR 0 1
40318: ARRAY
40319: IFFALSE 40374
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40321: LD_ADDR_VAR 0 3
40325: PUSH
40326: LD_EXP 49
40330: PUSH
40331: LD_VAR 0 1
40335: ARRAY
40336: PPUSH
40337: LD_INT 30
40339: PUSH
40340: LD_VAR 0 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PPUSH
40349: CALL_OW 72
40353: ST_TO_ADDR
// if result then
40354: LD_VAR 0 3
40358: IFFALSE 40374
// result := result [ 1 ] ;
40360: LD_ADDR_VAR 0 3
40364: PUSH
40365: LD_VAR 0 3
40369: PUSH
40370: LD_INT 1
40372: ARRAY
40373: ST_TO_ADDR
// end ; end ;
40374: LD_VAR 0 3
40378: RET
// export function MC_SetTame ( base , area ) ; begin
40379: LD_INT 0
40381: PPUSH
// if not mc_bases or not base then
40382: LD_EXP 49
40386: NOT
40387: PUSH
40388: LD_VAR 0 1
40392: NOT
40393: OR
40394: IFFALSE 40398
// exit ;
40396: GO 40423
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
40398: LD_ADDR_EXP 77
40402: PUSH
40403: LD_EXP 77
40407: PPUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: LD_VAR 0 2
40417: PPUSH
40418: CALL_OW 1
40422: ST_TO_ADDR
// end ;
40423: LD_VAR 0 3
40427: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
40428: LD_INT 0
40430: PPUSH
40431: PPUSH
// if not mc_bases or not base then
40432: LD_EXP 49
40436: NOT
40437: PUSH
40438: LD_VAR 0 1
40442: NOT
40443: OR
40444: IFFALSE 40448
// exit ;
40446: GO 40550
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
40448: LD_ADDR_VAR 0 4
40452: PUSH
40453: LD_EXP 49
40457: PUSH
40458: LD_VAR 0 1
40462: ARRAY
40463: PPUSH
40464: LD_INT 30
40466: PUSH
40467: LD_VAR 0 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PPUSH
40476: CALL_OW 72
40480: ST_TO_ADDR
// if not tmp then
40481: LD_VAR 0 4
40485: NOT
40486: IFFALSE 40490
// exit ;
40488: GO 40550
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
40490: LD_ADDR_EXP 81
40494: PUSH
40495: LD_EXP 81
40499: PPUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: LD_EXP 81
40509: PUSH
40510: LD_VAR 0 1
40514: ARRAY
40515: PPUSH
40516: LD_EXP 81
40520: PUSH
40521: LD_VAR 0 1
40525: ARRAY
40526: PUSH
40527: LD_INT 1
40529: PLUS
40530: PPUSH
40531: LD_VAR 0 4
40535: PUSH
40536: LD_INT 1
40538: ARRAY
40539: PPUSH
40540: CALL_OW 2
40544: PPUSH
40545: CALL_OW 1
40549: ST_TO_ADDR
// end ;
40550: LD_VAR 0 3
40554: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
40555: LD_INT 0
40557: PPUSH
40558: PPUSH
// if not mc_bases or not base or not kinds then
40559: LD_EXP 49
40563: NOT
40564: PUSH
40565: LD_VAR 0 1
40569: NOT
40570: OR
40571: PUSH
40572: LD_VAR 0 2
40576: NOT
40577: OR
40578: IFFALSE 40582
// exit ;
40580: GO 40643
// for i in kinds do
40582: LD_ADDR_VAR 0 4
40586: PUSH
40587: LD_VAR 0 2
40591: PUSH
40592: FOR_IN
40593: IFFALSE 40641
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
40595: LD_ADDR_EXP 83
40599: PUSH
40600: LD_EXP 83
40604: PPUSH
40605: LD_VAR 0 1
40609: PUSH
40610: LD_EXP 83
40614: PUSH
40615: LD_VAR 0 1
40619: ARRAY
40620: PUSH
40621: LD_INT 1
40623: PLUS
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PPUSH
40629: LD_VAR 0 4
40633: PPUSH
40634: CALL 52651 0 3
40638: ST_TO_ADDR
40639: GO 40592
40641: POP
40642: POP
// end ;
40643: LD_VAR 0 3
40647: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
40648: LD_INT 0
40650: PPUSH
// if not mc_bases or not base or not areas then
40651: LD_EXP 49
40655: NOT
40656: PUSH
40657: LD_VAR 0 1
40661: NOT
40662: OR
40663: PUSH
40664: LD_VAR 0 2
40668: NOT
40669: OR
40670: IFFALSE 40674
// exit ;
40672: GO 40699
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
40674: LD_ADDR_EXP 67
40678: PUSH
40679: LD_EXP 67
40683: PPUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: LD_VAR 0 2
40693: PPUSH
40694: CALL_OW 1
40698: ST_TO_ADDR
// end ;
40699: LD_VAR 0 3
40703: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
40704: LD_INT 0
40706: PPUSH
// if not mc_bases or not base or not teleports_exit then
40707: LD_EXP 49
40711: NOT
40712: PUSH
40713: LD_VAR 0 1
40717: NOT
40718: OR
40719: PUSH
40720: LD_VAR 0 2
40724: NOT
40725: OR
40726: IFFALSE 40730
// exit ;
40728: GO 40755
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
40730: LD_ADDR_EXP 84
40734: PUSH
40735: LD_EXP 84
40739: PPUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: LD_VAR 0 2
40749: PPUSH
40750: CALL_OW 1
40754: ST_TO_ADDR
// end ;
40755: LD_VAR 0 3
40759: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
40760: LD_INT 0
40762: PPUSH
40763: PPUSH
40764: PPUSH
// if not mc_bases or not base or not ext_list then
40765: LD_EXP 49
40769: NOT
40770: PUSH
40771: LD_VAR 0 1
40775: NOT
40776: OR
40777: PUSH
40778: LD_VAR 0 5
40782: NOT
40783: OR
40784: IFFALSE 40788
// exit ;
40786: GO 40961
// tmp := GetFacExtXYD ( x , y , d ) ;
40788: LD_ADDR_VAR 0 8
40792: PUSH
40793: LD_VAR 0 2
40797: PPUSH
40798: LD_VAR 0 3
40802: PPUSH
40803: LD_VAR 0 4
40807: PPUSH
40808: CALL 86029 0 3
40812: ST_TO_ADDR
// if not tmp then
40813: LD_VAR 0 8
40817: NOT
40818: IFFALSE 40822
// exit ;
40820: GO 40961
// for i in tmp do
40822: LD_ADDR_VAR 0 7
40826: PUSH
40827: LD_VAR 0 8
40831: PUSH
40832: FOR_IN
40833: IFFALSE 40959
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
40835: LD_ADDR_EXP 54
40839: PUSH
40840: LD_EXP 54
40844: PPUSH
40845: LD_VAR 0 1
40849: PPUSH
40850: LD_EXP 54
40854: PUSH
40855: LD_VAR 0 1
40859: ARRAY
40860: PPUSH
40861: LD_EXP 54
40865: PUSH
40866: LD_VAR 0 1
40870: ARRAY
40871: PUSH
40872: LD_INT 1
40874: PLUS
40875: PPUSH
40876: LD_VAR 0 5
40880: PUSH
40881: LD_INT 1
40883: ARRAY
40884: PUSH
40885: LD_VAR 0 7
40889: PUSH
40890: LD_INT 1
40892: ARRAY
40893: PUSH
40894: LD_VAR 0 7
40898: PUSH
40899: LD_INT 2
40901: ARRAY
40902: PUSH
40903: LD_VAR 0 7
40907: PUSH
40908: LD_INT 3
40910: ARRAY
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: PPUSH
40918: CALL_OW 2
40922: PPUSH
40923: CALL_OW 1
40927: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
40928: LD_ADDR_VAR 0 5
40932: PUSH
40933: LD_VAR 0 5
40937: PPUSH
40938: LD_INT 1
40940: PPUSH
40941: CALL_OW 3
40945: ST_TO_ADDR
// if not ext_list then
40946: LD_VAR 0 5
40950: NOT
40951: IFFALSE 40957
// exit ;
40953: POP
40954: POP
40955: GO 40961
// end ;
40957: GO 40832
40959: POP
40960: POP
// end ;
40961: LD_VAR 0 6
40965: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
40966: LD_INT 0
40968: PPUSH
// if not mc_bases or not base or not weapon_list then
40969: LD_EXP 49
40973: NOT
40974: PUSH
40975: LD_VAR 0 1
40979: NOT
40980: OR
40981: PUSH
40982: LD_VAR 0 2
40986: NOT
40987: OR
40988: IFFALSE 40992
// exit ;
40990: GO 41017
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
40992: LD_ADDR_EXP 88
40996: PUSH
40997: LD_EXP 88
41001: PPUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: LD_VAR 0 2
41011: PPUSH
41012: CALL_OW 1
41016: ST_TO_ADDR
// end ;
41017: LD_VAR 0 3
41021: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
41022: LD_INT 0
41024: PPUSH
// if not mc_bases or not base or not tech_list then
41025: LD_EXP 49
41029: NOT
41030: PUSH
41031: LD_VAR 0 1
41035: NOT
41036: OR
41037: PUSH
41038: LD_VAR 0 2
41042: NOT
41043: OR
41044: IFFALSE 41048
// exit ;
41046: GO 41073
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
41048: LD_ADDR_EXP 76
41052: PUSH
41053: LD_EXP 76
41057: PPUSH
41058: LD_VAR 0 1
41062: PPUSH
41063: LD_VAR 0 2
41067: PPUSH
41068: CALL_OW 1
41072: ST_TO_ADDR
// end ;
41073: LD_VAR 0 3
41077: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
41078: LD_INT 0
41080: PPUSH
// if not mc_bases or not parking_area or not base then
41081: LD_EXP 49
41085: NOT
41086: PUSH
41087: LD_VAR 0 2
41091: NOT
41092: OR
41093: PUSH
41094: LD_VAR 0 1
41098: NOT
41099: OR
41100: IFFALSE 41104
// exit ;
41102: GO 41129
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
41104: LD_ADDR_EXP 73
41108: PUSH
41109: LD_EXP 73
41113: PPUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: LD_VAR 0 2
41123: PPUSH
41124: CALL_OW 1
41128: ST_TO_ADDR
// end ;
41129: LD_VAR 0 3
41133: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
41134: LD_INT 0
41136: PPUSH
// if not mc_bases or not base or not scan_area then
41137: LD_EXP 49
41141: NOT
41142: PUSH
41143: LD_VAR 0 1
41147: NOT
41148: OR
41149: PUSH
41150: LD_VAR 0 2
41154: NOT
41155: OR
41156: IFFALSE 41160
// exit ;
41158: GO 41185
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
41160: LD_ADDR_EXP 74
41164: PUSH
41165: LD_EXP 74
41169: PPUSH
41170: LD_VAR 0 1
41174: PPUSH
41175: LD_VAR 0 2
41179: PPUSH
41180: CALL_OW 1
41184: ST_TO_ADDR
// end ;
41185: LD_VAR 0 3
41189: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
41190: LD_INT 0
41192: PPUSH
41193: PPUSH
// if not mc_bases or not base then
41194: LD_EXP 49
41198: NOT
41199: PUSH
41200: LD_VAR 0 1
41204: NOT
41205: OR
41206: IFFALSE 41210
// exit ;
41208: GO 41274
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: LD_INT 4
41226: PUSH
41227: LD_INT 11
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
41237: LD_ADDR_EXP 76
41241: PUSH
41242: LD_EXP 76
41246: PPUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: LD_EXP 76
41256: PUSH
41257: LD_VAR 0 1
41261: ARRAY
41262: PUSH
41263: LD_VAR 0 3
41267: DIFF
41268: PPUSH
41269: CALL_OW 1
41273: ST_TO_ADDR
// end ;
41274: LD_VAR 0 2
41278: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
41279: LD_INT 0
41281: PPUSH
// result := mc_vehicles [ base ] ;
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_EXP 68
41291: PUSH
41292: LD_VAR 0 1
41296: ARRAY
41297: ST_TO_ADDR
// if onlyCombat then
41298: LD_VAR 0 2
41302: IFFALSE 41467
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
41304: LD_ADDR_VAR 0 3
41308: PUSH
41309: LD_VAR 0 3
41313: PUSH
41314: LD_VAR 0 3
41318: PPUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 34
41324: PUSH
41325: LD_INT 12
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 34
41334: PUSH
41335: LD_INT 51
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 34
41344: PUSH
41345: LD_EXP 93
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 34
41356: PUSH
41357: LD_INT 32
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 34
41366: PUSH
41367: LD_INT 13
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 34
41376: PUSH
41377: LD_INT 52
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 34
41386: PUSH
41387: LD_INT 14
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 34
41396: PUSH
41397: LD_INT 53
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 34
41406: PUSH
41407: LD_EXP 92
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 34
41418: PUSH
41419: LD_INT 31
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 34
41428: PUSH
41429: LD_INT 48
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 34
41438: PUSH
41439: LD_INT 8
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: PPUSH
41461: CALL_OW 72
41465: DIFF
41466: ST_TO_ADDR
// end ; end_of_file
41467: LD_VAR 0 3
41471: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
41472: LD_INT 0
41474: PPUSH
41475: PPUSH
41476: PPUSH
// if not mc_bases or not skirmish then
41477: LD_EXP 49
41481: NOT
41482: PUSH
41483: LD_EXP 47
41487: NOT
41488: OR
41489: IFFALSE 41493
// exit ;
41491: GO 41658
// for i = 1 to mc_bases do
41493: LD_ADDR_VAR 0 4
41497: PUSH
41498: DOUBLE
41499: LD_INT 1
41501: DEC
41502: ST_TO_ADDR
41503: LD_EXP 49
41507: PUSH
41508: FOR_TO
41509: IFFALSE 41656
// begin if sci in mc_bases [ i ] then
41511: LD_VAR 0 2
41515: PUSH
41516: LD_EXP 49
41520: PUSH
41521: LD_VAR 0 4
41525: ARRAY
41526: IN
41527: IFFALSE 41654
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
41529: LD_ADDR_EXP 78
41533: PUSH
41534: LD_EXP 78
41538: PPUSH
41539: LD_VAR 0 4
41543: PUSH
41544: LD_EXP 78
41548: PUSH
41549: LD_VAR 0 4
41553: ARRAY
41554: PUSH
41555: LD_INT 1
41557: PLUS
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PPUSH
41563: LD_VAR 0 1
41567: PPUSH
41568: CALL 52651 0 3
41572: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
41573: LD_ADDR_VAR 0 5
41577: PUSH
41578: LD_EXP 49
41582: PUSH
41583: LD_VAR 0 4
41587: ARRAY
41588: PPUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 30
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 30
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: PPUSH
41617: CALL_OW 72
41621: PPUSH
41622: LD_VAR 0 1
41626: PPUSH
41627: CALL_OW 74
41631: ST_TO_ADDR
// if tmp then
41632: LD_VAR 0 5
41636: IFFALSE 41652
// ComStandNearbyBuilding ( ape , tmp ) ;
41638: LD_VAR 0 1
41642: PPUSH
41643: LD_VAR 0 5
41647: PPUSH
41648: CALL 47358 0 2
// break ;
41652: GO 41656
// end ; end ;
41654: GO 41508
41656: POP
41657: POP
// end ;
41658: LD_VAR 0 3
41662: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
41663: LD_INT 0
41665: PPUSH
41666: PPUSH
41667: PPUSH
// if not mc_bases or not skirmish then
41668: LD_EXP 49
41672: NOT
41673: PUSH
41674: LD_EXP 47
41678: NOT
41679: OR
41680: IFFALSE 41684
// exit ;
41682: GO 41773
// for i = 1 to mc_bases do
41684: LD_ADDR_VAR 0 4
41688: PUSH
41689: DOUBLE
41690: LD_INT 1
41692: DEC
41693: ST_TO_ADDR
41694: LD_EXP 49
41698: PUSH
41699: FOR_TO
41700: IFFALSE 41771
// begin if building in mc_busy_turret_list [ i ] then
41702: LD_VAR 0 1
41706: PUSH
41707: LD_EXP 59
41711: PUSH
41712: LD_VAR 0 4
41716: ARRAY
41717: IN
41718: IFFALSE 41769
// begin tmp := mc_busy_turret_list [ i ] diff building ;
41720: LD_ADDR_VAR 0 5
41724: PUSH
41725: LD_EXP 59
41729: PUSH
41730: LD_VAR 0 4
41734: ARRAY
41735: PUSH
41736: LD_VAR 0 1
41740: DIFF
41741: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
41742: LD_ADDR_EXP 59
41746: PUSH
41747: LD_EXP 59
41751: PPUSH
41752: LD_VAR 0 4
41756: PPUSH
41757: LD_VAR 0 5
41761: PPUSH
41762: CALL_OW 1
41766: ST_TO_ADDR
// break ;
41767: GO 41771
// end ; end ;
41769: GO 41699
41771: POP
41772: POP
// end ;
41773: LD_VAR 0 3
41777: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
41778: LD_INT 0
41780: PPUSH
41781: PPUSH
41782: PPUSH
// if not mc_bases or not skirmish then
41783: LD_EXP 49
41787: NOT
41788: PUSH
41789: LD_EXP 47
41793: NOT
41794: OR
41795: IFFALSE 41799
// exit ;
41797: GO 41998
// for i = 1 to mc_bases do
41799: LD_ADDR_VAR 0 5
41803: PUSH
41804: DOUBLE
41805: LD_INT 1
41807: DEC
41808: ST_TO_ADDR
41809: LD_EXP 49
41813: PUSH
41814: FOR_TO
41815: IFFALSE 41996
// if building in mc_bases [ i ] then
41817: LD_VAR 0 1
41821: PUSH
41822: LD_EXP 49
41826: PUSH
41827: LD_VAR 0 5
41831: ARRAY
41832: IN
41833: IFFALSE 41994
// begin tmp := mc_bases [ i ] diff building ;
41835: LD_ADDR_VAR 0 6
41839: PUSH
41840: LD_EXP 49
41844: PUSH
41845: LD_VAR 0 5
41849: ARRAY
41850: PUSH
41851: LD_VAR 0 1
41855: DIFF
41856: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
41857: LD_ADDR_EXP 49
41861: PUSH
41862: LD_EXP 49
41866: PPUSH
41867: LD_VAR 0 5
41871: PPUSH
41872: LD_VAR 0 6
41876: PPUSH
41877: CALL_OW 1
41881: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
41882: LD_VAR 0 1
41886: PUSH
41887: LD_EXP 57
41891: PUSH
41892: LD_VAR 0 5
41896: ARRAY
41897: IN
41898: IFFALSE 41937
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
41900: LD_ADDR_EXP 57
41904: PUSH
41905: LD_EXP 57
41909: PPUSH
41910: LD_VAR 0 5
41914: PPUSH
41915: LD_EXP 57
41919: PUSH
41920: LD_VAR 0 5
41924: ARRAY
41925: PUSH
41926: LD_VAR 0 1
41930: DIFF
41931: PPUSH
41932: CALL_OW 1
41936: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
41937: LD_VAR 0 1
41941: PUSH
41942: LD_EXP 58
41946: PUSH
41947: LD_VAR 0 5
41951: ARRAY
41952: IN
41953: IFFALSE 41992
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
41955: LD_ADDR_EXP 58
41959: PUSH
41960: LD_EXP 58
41964: PPUSH
41965: LD_VAR 0 5
41969: PPUSH
41970: LD_EXP 58
41974: PUSH
41975: LD_VAR 0 5
41979: ARRAY
41980: PUSH
41981: LD_VAR 0 1
41985: DIFF
41986: PPUSH
41987: CALL_OW 1
41991: ST_TO_ADDR
// break ;
41992: GO 41996
// end ;
41994: GO 41814
41996: POP
41997: POP
// end ;
41998: LD_VAR 0 4
42002: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
42003: LD_INT 0
42005: PPUSH
42006: PPUSH
42007: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
42008: LD_EXP 49
42012: NOT
42013: PUSH
42014: LD_EXP 47
42018: NOT
42019: OR
42020: PUSH
42021: LD_VAR 0 3
42025: PUSH
42026: LD_EXP 75
42030: IN
42031: NOT
42032: OR
42033: IFFALSE 42037
// exit ;
42035: GO 42160
// for i = 1 to mc_vehicles do
42037: LD_ADDR_VAR 0 6
42041: PUSH
42042: DOUBLE
42043: LD_INT 1
42045: DEC
42046: ST_TO_ADDR
42047: LD_EXP 68
42051: PUSH
42052: FOR_TO
42053: IFFALSE 42158
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
42055: LD_VAR 0 2
42059: PUSH
42060: LD_EXP 68
42064: PUSH
42065: LD_VAR 0 6
42069: ARRAY
42070: IN
42071: PUSH
42072: LD_VAR 0 1
42076: PUSH
42077: LD_EXP 68
42081: PUSH
42082: LD_VAR 0 6
42086: ARRAY
42087: IN
42088: OR
42089: IFFALSE 42156
// begin tmp := mc_vehicles [ i ] diff old ;
42091: LD_ADDR_VAR 0 7
42095: PUSH
42096: LD_EXP 68
42100: PUSH
42101: LD_VAR 0 6
42105: ARRAY
42106: PUSH
42107: LD_VAR 0 2
42111: DIFF
42112: ST_TO_ADDR
// tmp := tmp diff new ;
42113: LD_ADDR_VAR 0 7
42117: PUSH
42118: LD_VAR 0 7
42122: PUSH
42123: LD_VAR 0 1
42127: DIFF
42128: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
42129: LD_ADDR_EXP 68
42133: PUSH
42134: LD_EXP 68
42138: PPUSH
42139: LD_VAR 0 6
42143: PPUSH
42144: LD_VAR 0 7
42148: PPUSH
42149: CALL_OW 1
42153: ST_TO_ADDR
// break ;
42154: GO 42158
// end ;
42156: GO 42052
42158: POP
42159: POP
// end ;
42160: LD_VAR 0 5
42164: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
42165: LD_INT 0
42167: PPUSH
42168: PPUSH
42169: PPUSH
42170: PPUSH
// if not mc_bases or not skirmish then
42171: LD_EXP 49
42175: NOT
42176: PUSH
42177: LD_EXP 47
42181: NOT
42182: OR
42183: IFFALSE 42187
// exit ;
42185: GO 42564
// side := GetSide ( vehicle ) ;
42187: LD_ADDR_VAR 0 5
42191: PUSH
42192: LD_VAR 0 1
42196: PPUSH
42197: CALL_OW 255
42201: ST_TO_ADDR
// for i = 1 to mc_bases do
42202: LD_ADDR_VAR 0 4
42206: PUSH
42207: DOUBLE
42208: LD_INT 1
42210: DEC
42211: ST_TO_ADDR
42212: LD_EXP 49
42216: PUSH
42217: FOR_TO
42218: IFFALSE 42562
// begin if factory in mc_bases [ i ] then
42220: LD_VAR 0 2
42224: PUSH
42225: LD_EXP 49
42229: PUSH
42230: LD_VAR 0 4
42234: ARRAY
42235: IN
42236: IFFALSE 42560
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
42238: LD_EXP 71
42242: PUSH
42243: LD_VAR 0 4
42247: ARRAY
42248: PUSH
42249: LD_EXP 60
42253: PUSH
42254: LD_VAR 0 4
42258: ARRAY
42259: LESS
42260: PUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 264
42270: PUSH
42271: LD_INT 31
42273: PUSH
42274: LD_INT 32
42276: PUSH
42277: LD_INT 51
42279: PUSH
42280: LD_EXP 93
42284: PUSH
42285: LD_INT 12
42287: PUSH
42288: LD_INT 30
42290: PUSH
42291: LD_EXP 92
42295: PUSH
42296: LD_INT 11
42298: PUSH
42299: LD_INT 53
42301: PUSH
42302: LD_INT 14
42304: PUSH
42305: LD_EXP 96
42309: PUSH
42310: LD_INT 29
42312: PUSH
42313: LD_EXP 94
42317: PUSH
42318: LD_INT 13
42320: PUSH
42321: LD_INT 52
42323: PUSH
42324: LD_INT 48
42326: PUSH
42327: LD_INT 8
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: IN
42349: NOT
42350: AND
42351: IFFALSE 42399
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
42353: LD_ADDR_EXP 71
42357: PUSH
42358: LD_EXP 71
42362: PPUSH
42363: LD_VAR 0 4
42367: PUSH
42368: LD_EXP 71
42372: PUSH
42373: LD_VAR 0 4
42377: ARRAY
42378: PUSH
42379: LD_INT 1
42381: PLUS
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PPUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL 52651 0 3
42396: ST_TO_ADDR
42397: GO 42443
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
42399: LD_ADDR_EXP 68
42403: PUSH
42404: LD_EXP 68
42408: PPUSH
42409: LD_VAR 0 4
42413: PUSH
42414: LD_EXP 68
42418: PUSH
42419: LD_VAR 0 4
42423: ARRAY
42424: PUSH
42425: LD_INT 1
42427: PLUS
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PPUSH
42433: LD_VAR 0 1
42437: PPUSH
42438: CALL 52651 0 3
42442: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
42443: LD_VAR 0 1
42447: PPUSH
42448: CALL_OW 263
42452: PUSH
42453: LD_INT 2
42455: EQUAL
42456: IFFALSE 42476
// begin repeat wait ( 0 0$1 ) ;
42458: LD_INT 35
42460: PPUSH
42461: CALL_OW 67
// until IsControledBy ( vehicle ) ;
42465: LD_VAR 0 1
42469: PPUSH
42470: CALL_OW 312
42474: IFFALSE 42458
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
42476: LD_VAR 0 1
42480: PPUSH
42481: LD_EXP 73
42485: PUSH
42486: LD_VAR 0 4
42490: ARRAY
42491: PPUSH
42492: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
42496: LD_VAR 0 1
42500: PPUSH
42501: CALL_OW 263
42505: PUSH
42506: LD_INT 1
42508: NONEQUAL
42509: IFFALSE 42513
// break ;
42511: GO 42562
// repeat wait ( 0 0$1 ) ;
42513: LD_INT 35
42515: PPUSH
42516: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
42520: LD_VAR 0 1
42524: PPUSH
42525: LD_EXP 73
42529: PUSH
42530: LD_VAR 0 4
42534: ARRAY
42535: PPUSH
42536: CALL_OW 308
42540: IFFALSE 42513
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
42542: LD_VAR 0 1
42546: PPUSH
42547: CALL_OW 311
42551: PPUSH
42552: CALL_OW 121
// exit ;
42556: POP
42557: POP
42558: GO 42564
// end ; end ;
42560: GO 42217
42562: POP
42563: POP
// end ;
42564: LD_VAR 0 3
42568: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
42569: LD_INT 0
42571: PPUSH
42572: PPUSH
42573: PPUSH
42574: PPUSH
// if not mc_bases or not skirmish then
42575: LD_EXP 49
42579: NOT
42580: PUSH
42581: LD_EXP 47
42585: NOT
42586: OR
42587: IFFALSE 42591
// exit ;
42589: GO 42944
// repeat wait ( 0 0$1 ) ;
42591: LD_INT 35
42593: PPUSH
42594: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
42598: LD_VAR 0 2
42602: PPUSH
42603: LD_VAR 0 3
42607: PPUSH
42608: CALL_OW 284
42612: IFFALSE 42591
// if GetResourceTypeXY ( x , y ) = mat_artefact then
42614: LD_VAR 0 2
42618: PPUSH
42619: LD_VAR 0 3
42623: PPUSH
42624: CALL_OW 283
42628: PUSH
42629: LD_INT 4
42631: EQUAL
42632: IFFALSE 42636
// exit ;
42634: GO 42944
// for i = 1 to mc_bases do
42636: LD_ADDR_VAR 0 7
42640: PUSH
42641: DOUBLE
42642: LD_INT 1
42644: DEC
42645: ST_TO_ADDR
42646: LD_EXP 49
42650: PUSH
42651: FOR_TO
42652: IFFALSE 42942
// begin if mc_crates_area [ i ] then
42654: LD_EXP 67
42658: PUSH
42659: LD_VAR 0 7
42663: ARRAY
42664: IFFALSE 42775
// for j in mc_crates_area [ i ] do
42666: LD_ADDR_VAR 0 8
42670: PUSH
42671: LD_EXP 67
42675: PUSH
42676: LD_VAR 0 7
42680: ARRAY
42681: PUSH
42682: FOR_IN
42683: IFFALSE 42773
// if InArea ( x , y , j ) then
42685: LD_VAR 0 2
42689: PPUSH
42690: LD_VAR 0 3
42694: PPUSH
42695: LD_VAR 0 8
42699: PPUSH
42700: CALL_OW 309
42704: IFFALSE 42771
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
42706: LD_ADDR_EXP 65
42710: PUSH
42711: LD_EXP 65
42715: PPUSH
42716: LD_VAR 0 7
42720: PUSH
42721: LD_EXP 65
42725: PUSH
42726: LD_VAR 0 7
42730: ARRAY
42731: PUSH
42732: LD_INT 1
42734: PLUS
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PPUSH
42740: LD_VAR 0 4
42744: PUSH
42745: LD_VAR 0 2
42749: PUSH
42750: LD_VAR 0 3
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: PPUSH
42760: CALL 52651 0 3
42764: ST_TO_ADDR
// exit ;
42765: POP
42766: POP
42767: POP
42768: POP
42769: GO 42944
// end ;
42771: GO 42682
42773: POP
42774: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
42775: LD_ADDR_VAR 0 9
42779: PUSH
42780: LD_EXP 49
42784: PUSH
42785: LD_VAR 0 7
42789: ARRAY
42790: PPUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 30
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 30
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: LIST
42818: PPUSH
42819: CALL_OW 72
42823: ST_TO_ADDR
// if not depot then
42824: LD_VAR 0 9
42828: NOT
42829: IFFALSE 42833
// continue ;
42831: GO 42651
// for j in depot do
42833: LD_ADDR_VAR 0 8
42837: PUSH
42838: LD_VAR 0 9
42842: PUSH
42843: FOR_IN
42844: IFFALSE 42938
// if GetDistUnitXY ( j , x , y ) < 30 then
42846: LD_VAR 0 8
42850: PPUSH
42851: LD_VAR 0 2
42855: PPUSH
42856: LD_VAR 0 3
42860: PPUSH
42861: CALL_OW 297
42865: PUSH
42866: LD_INT 30
42868: LESS
42869: IFFALSE 42936
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
42871: LD_ADDR_EXP 65
42875: PUSH
42876: LD_EXP 65
42880: PPUSH
42881: LD_VAR 0 7
42885: PUSH
42886: LD_EXP 65
42890: PUSH
42891: LD_VAR 0 7
42895: ARRAY
42896: PUSH
42897: LD_INT 1
42899: PLUS
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PPUSH
42905: LD_VAR 0 4
42909: PUSH
42910: LD_VAR 0 2
42914: PUSH
42915: LD_VAR 0 3
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL 52651 0 3
42929: ST_TO_ADDR
// exit ;
42930: POP
42931: POP
42932: POP
42933: POP
42934: GO 42944
// end ;
42936: GO 42843
42938: POP
42939: POP
// end ;
42940: GO 42651
42942: POP
42943: POP
// end ;
42944: LD_VAR 0 6
42948: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
42949: LD_INT 0
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
// if not mc_bases or not skirmish then
42955: LD_EXP 49
42959: NOT
42960: PUSH
42961: LD_EXP 47
42965: NOT
42966: OR
42967: IFFALSE 42971
// exit ;
42969: GO 43248
// side := GetSide ( lab ) ;
42971: LD_ADDR_VAR 0 4
42975: PUSH
42976: LD_VAR 0 2
42980: PPUSH
42981: CALL_OW 255
42985: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
42986: LD_VAR 0 4
42990: PUSH
42991: LD_EXP 75
42995: IN
42996: NOT
42997: PUSH
42998: LD_EXP 76
43002: NOT
43003: OR
43004: PUSH
43005: LD_EXP 49
43009: NOT
43010: OR
43011: IFFALSE 43015
// exit ;
43013: GO 43248
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
43015: LD_ADDR_EXP 76
43019: PUSH
43020: LD_EXP 76
43024: PPUSH
43025: LD_VAR 0 4
43029: PPUSH
43030: LD_EXP 76
43034: PUSH
43035: LD_VAR 0 4
43039: ARRAY
43040: PUSH
43041: LD_VAR 0 1
43045: DIFF
43046: PPUSH
43047: CALL_OW 1
43051: ST_TO_ADDR
// for i = 1 to mc_bases do
43052: LD_ADDR_VAR 0 5
43056: PUSH
43057: DOUBLE
43058: LD_INT 1
43060: DEC
43061: ST_TO_ADDR
43062: LD_EXP 49
43066: PUSH
43067: FOR_TO
43068: IFFALSE 43246
// begin if lab in mc_bases [ i ] then
43070: LD_VAR 0 2
43074: PUSH
43075: LD_EXP 49
43079: PUSH
43080: LD_VAR 0 5
43084: ARRAY
43085: IN
43086: IFFALSE 43244
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
43088: LD_VAR 0 1
43092: PUSH
43093: LD_INT 11
43095: PUSH
43096: LD_INT 4
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: IN
43111: PUSH
43112: LD_EXP 79
43116: PUSH
43117: LD_VAR 0 5
43121: ARRAY
43122: AND
43123: IFFALSE 43244
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
43125: LD_ADDR_VAR 0 6
43129: PUSH
43130: LD_EXP 79
43134: PUSH
43135: LD_VAR 0 5
43139: ARRAY
43140: PUSH
43141: LD_INT 1
43143: ARRAY
43144: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43145: LD_ADDR_EXP 79
43149: PUSH
43150: LD_EXP 79
43154: PPUSH
43155: LD_VAR 0 5
43159: PPUSH
43160: EMPTY
43161: PPUSH
43162: CALL_OW 1
43166: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
43167: LD_VAR 0 6
43171: PPUSH
43172: LD_INT 0
43174: PPUSH
43175: CALL_OW 109
// ComExitBuilding ( tmp ) ;
43179: LD_VAR 0 6
43183: PPUSH
43184: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
43188: LD_ADDR_EXP 78
43192: PUSH
43193: LD_EXP 78
43197: PPUSH
43198: LD_VAR 0 5
43202: PPUSH
43203: LD_EXP 78
43207: PUSH
43208: LD_VAR 0 5
43212: ARRAY
43213: PPUSH
43214: LD_INT 1
43216: PPUSH
43217: LD_VAR 0 6
43221: PPUSH
43222: CALL_OW 2
43226: PPUSH
43227: CALL_OW 1
43231: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
43232: LD_VAR 0 5
43236: PPUSH
43237: LD_INT 112
43239: PPUSH
43240: CALL 20781 0 2
// end ; end ; end ;
43244: GO 43067
43246: POP
43247: POP
// end ;
43248: LD_VAR 0 3
43252: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
43253: LD_INT 0
43255: PPUSH
43256: PPUSH
43257: PPUSH
43258: PPUSH
43259: PPUSH
43260: PPUSH
43261: PPUSH
43262: PPUSH
// if not mc_bases or not skirmish then
43263: LD_EXP 49
43267: NOT
43268: PUSH
43269: LD_EXP 47
43273: NOT
43274: OR
43275: IFFALSE 43279
// exit ;
43277: GO 44371
// for i = 1 to mc_bases do
43279: LD_ADDR_VAR 0 3
43283: PUSH
43284: DOUBLE
43285: LD_INT 1
43287: DEC
43288: ST_TO_ADDR
43289: LD_EXP 49
43293: PUSH
43294: FOR_TO
43295: IFFALSE 44369
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
43297: LD_VAR 0 1
43301: PUSH
43302: LD_EXP 49
43306: PUSH
43307: LD_VAR 0 3
43311: ARRAY
43312: IN
43313: PUSH
43314: LD_VAR 0 1
43318: PUSH
43319: LD_EXP 56
43323: PUSH
43324: LD_VAR 0 3
43328: ARRAY
43329: IN
43330: OR
43331: PUSH
43332: LD_VAR 0 1
43336: PUSH
43337: LD_EXP 71
43341: PUSH
43342: LD_VAR 0 3
43346: ARRAY
43347: IN
43348: OR
43349: PUSH
43350: LD_VAR 0 1
43354: PUSH
43355: LD_EXP 68
43359: PUSH
43360: LD_VAR 0 3
43364: ARRAY
43365: IN
43366: OR
43367: PUSH
43368: LD_VAR 0 1
43372: PUSH
43373: LD_EXP 78
43377: PUSH
43378: LD_VAR 0 3
43382: ARRAY
43383: IN
43384: OR
43385: PUSH
43386: LD_VAR 0 1
43390: PUSH
43391: LD_EXP 79
43395: PUSH
43396: LD_VAR 0 3
43400: ARRAY
43401: IN
43402: OR
43403: IFFALSE 44367
// begin if un in mc_ape [ i ] then
43405: LD_VAR 0 1
43409: PUSH
43410: LD_EXP 78
43414: PUSH
43415: LD_VAR 0 3
43419: ARRAY
43420: IN
43421: IFFALSE 43460
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
43423: LD_ADDR_EXP 78
43427: PUSH
43428: LD_EXP 78
43432: PPUSH
43433: LD_VAR 0 3
43437: PPUSH
43438: LD_EXP 78
43442: PUSH
43443: LD_VAR 0 3
43447: ARRAY
43448: PUSH
43449: LD_VAR 0 1
43453: DIFF
43454: PPUSH
43455: CALL_OW 1
43459: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
43460: LD_VAR 0 1
43464: PUSH
43465: LD_EXP 79
43469: PUSH
43470: LD_VAR 0 3
43474: ARRAY
43475: IN
43476: IFFALSE 43500
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43478: LD_ADDR_EXP 79
43482: PUSH
43483: LD_EXP 79
43487: PPUSH
43488: LD_VAR 0 3
43492: PPUSH
43493: EMPTY
43494: PPUSH
43495: CALL_OW 1
43499: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
43500: LD_VAR 0 1
43504: PPUSH
43505: CALL_OW 247
43509: PUSH
43510: LD_INT 2
43512: EQUAL
43513: PUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 110
43523: PUSH
43524: LD_INT 20
43526: EQUAL
43527: PUSH
43528: LD_VAR 0 1
43532: PUSH
43533: LD_EXP 71
43537: PUSH
43538: LD_VAR 0 3
43542: ARRAY
43543: IN
43544: OR
43545: AND
43546: IFFALSE 43707
// begin if un in mc_defender [ i ] then
43548: LD_VAR 0 1
43552: PUSH
43553: LD_EXP 71
43557: PUSH
43558: LD_VAR 0 3
43562: ARRAY
43563: IN
43564: IFFALSE 43603
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
43566: LD_ADDR_EXP 71
43570: PUSH
43571: LD_EXP 71
43575: PPUSH
43576: LD_VAR 0 3
43580: PPUSH
43581: LD_EXP 71
43585: PUSH
43586: LD_VAR 0 3
43590: ARRAY
43591: PUSH
43592: LD_VAR 0 1
43596: DIFF
43597: PPUSH
43598: CALL_OW 1
43602: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
43603: LD_ADDR_VAR 0 8
43607: PUSH
43608: LD_VAR 0 3
43612: PPUSH
43613: LD_INT 3
43615: PPUSH
43616: CALL 40296 0 2
43620: ST_TO_ADDR
// if fac then
43621: LD_VAR 0 8
43625: IFFALSE 43707
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
43627: LD_ADDR_VAR 0 9
43631: PUSH
43632: LD_VAR 0 8
43636: PPUSH
43637: LD_VAR 0 1
43641: PPUSH
43642: CALL_OW 265
43646: PPUSH
43647: LD_VAR 0 1
43651: PPUSH
43652: CALL_OW 262
43656: PPUSH
43657: LD_VAR 0 1
43661: PPUSH
43662: CALL_OW 263
43666: PPUSH
43667: LD_VAR 0 1
43671: PPUSH
43672: CALL_OW 264
43676: PPUSH
43677: CALL 50244 0 5
43681: ST_TO_ADDR
// if components then
43682: LD_VAR 0 9
43686: IFFALSE 43705
// MC_InsertProduceList ( i , [ components ] ) ;
43688: LD_VAR 0 3
43692: PPUSH
43693: LD_VAR 0 9
43697: PUSH
43698: EMPTY
43699: LIST
43700: PPUSH
43701: CALL 39924 0 2
// break ;
43705: GO 44369
// end ; end ; if GetType ( un ) = unit_building then
43707: LD_VAR 0 1
43711: PPUSH
43712: CALL_OW 247
43716: PUSH
43717: LD_INT 3
43719: EQUAL
43720: IFFALSE 44035
// begin btype := GetBType ( un ) ;
43722: LD_ADDR_VAR 0 5
43726: PUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: CALL_OW 266
43736: ST_TO_ADDR
// if btype = b_warehouse then
43737: LD_VAR 0 5
43741: PUSH
43742: LD_INT 1
43744: EQUAL
43745: IFFALSE 43763
// begin btype := b_depot ;
43747: LD_ADDR_VAR 0 5
43751: PUSH
43752: LD_INT 0
43754: ST_TO_ADDR
// pos := 1 ;
43755: LD_ADDR_VAR 0 6
43759: PUSH
43760: LD_INT 1
43762: ST_TO_ADDR
// end ; if btype = b_factory then
43763: LD_VAR 0 5
43767: PUSH
43768: LD_INT 3
43770: EQUAL
43771: IFFALSE 43789
// begin btype := b_workshop ;
43773: LD_ADDR_VAR 0 5
43777: PUSH
43778: LD_INT 2
43780: ST_TO_ADDR
// pos := 1 ;
43781: LD_ADDR_VAR 0 6
43785: PUSH
43786: LD_INT 1
43788: ST_TO_ADDR
// end ; if btype = b_barracks then
43789: LD_VAR 0 5
43793: PUSH
43794: LD_INT 5
43796: EQUAL
43797: IFFALSE 43807
// btype := b_armoury ;
43799: LD_ADDR_VAR 0 5
43803: PUSH
43804: LD_INT 4
43806: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
43807: LD_VAR 0 5
43811: PUSH
43812: LD_INT 7
43814: PUSH
43815: LD_INT 8
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: IN
43822: IFFALSE 43832
// btype := b_lab ;
43824: LD_ADDR_VAR 0 5
43828: PUSH
43829: LD_INT 6
43831: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
43832: LD_ADDR_EXP 54
43836: PUSH
43837: LD_EXP 54
43841: PPUSH
43842: LD_VAR 0 3
43846: PUSH
43847: LD_EXP 54
43851: PUSH
43852: LD_VAR 0 3
43856: ARRAY
43857: PUSH
43858: LD_INT 1
43860: PLUS
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PPUSH
43866: LD_VAR 0 5
43870: PUSH
43871: LD_VAR 0 1
43875: PPUSH
43876: CALL_OW 250
43880: PUSH
43881: LD_VAR 0 1
43885: PPUSH
43886: CALL_OW 251
43890: PUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 254
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: PPUSH
43907: CALL 52651 0 3
43911: ST_TO_ADDR
// if pos = 1 then
43912: LD_VAR 0 6
43916: PUSH
43917: LD_INT 1
43919: EQUAL
43920: IFFALSE 44035
// begin tmp := mc_build_list [ i ] ;
43922: LD_ADDR_VAR 0 7
43926: PUSH
43927: LD_EXP 54
43931: PUSH
43932: LD_VAR 0 3
43936: ARRAY
43937: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
43938: LD_VAR 0 7
43942: PPUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 30
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 30
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: PPUSH
43971: CALL_OW 72
43975: IFFALSE 43985
// pos := 2 ;
43977: LD_ADDR_VAR 0 6
43981: PUSH
43982: LD_INT 2
43984: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
43985: LD_ADDR_VAR 0 7
43989: PUSH
43990: LD_VAR 0 7
43994: PPUSH
43995: LD_VAR 0 6
43999: PPUSH
44000: LD_VAR 0 7
44004: PPUSH
44005: CALL 52977 0 3
44009: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
44010: LD_ADDR_EXP 54
44014: PUSH
44015: LD_EXP 54
44019: PPUSH
44020: LD_VAR 0 3
44024: PPUSH
44025: LD_VAR 0 7
44029: PPUSH
44030: CALL_OW 1
44034: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
44035: LD_VAR 0 1
44039: PUSH
44040: LD_EXP 49
44044: PUSH
44045: LD_VAR 0 3
44049: ARRAY
44050: IN
44051: IFFALSE 44090
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
44053: LD_ADDR_EXP 49
44057: PUSH
44058: LD_EXP 49
44062: PPUSH
44063: LD_VAR 0 3
44067: PPUSH
44068: LD_EXP 49
44072: PUSH
44073: LD_VAR 0 3
44077: ARRAY
44078: PUSH
44079: LD_VAR 0 1
44083: DIFF
44084: PPUSH
44085: CALL_OW 1
44089: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
44090: LD_VAR 0 1
44094: PUSH
44095: LD_EXP 56
44099: PUSH
44100: LD_VAR 0 3
44104: ARRAY
44105: IN
44106: IFFALSE 44145
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
44108: LD_ADDR_EXP 56
44112: PUSH
44113: LD_EXP 56
44117: PPUSH
44118: LD_VAR 0 3
44122: PPUSH
44123: LD_EXP 56
44127: PUSH
44128: LD_VAR 0 3
44132: ARRAY
44133: PUSH
44134: LD_VAR 0 1
44138: DIFF
44139: PPUSH
44140: CALL_OW 1
44144: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
44145: LD_VAR 0 1
44149: PUSH
44150: LD_EXP 68
44154: PUSH
44155: LD_VAR 0 3
44159: ARRAY
44160: IN
44161: IFFALSE 44200
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
44163: LD_ADDR_EXP 68
44167: PUSH
44168: LD_EXP 68
44172: PPUSH
44173: LD_VAR 0 3
44177: PPUSH
44178: LD_EXP 68
44182: PUSH
44183: LD_VAR 0 3
44187: ARRAY
44188: PUSH
44189: LD_VAR 0 1
44193: DIFF
44194: PPUSH
44195: CALL_OW 1
44199: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
44200: LD_VAR 0 1
44204: PUSH
44205: LD_EXP 71
44209: PUSH
44210: LD_VAR 0 3
44214: ARRAY
44215: IN
44216: IFFALSE 44255
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44218: LD_ADDR_EXP 71
44222: PUSH
44223: LD_EXP 71
44227: PPUSH
44228: LD_VAR 0 3
44232: PPUSH
44233: LD_EXP 71
44237: PUSH
44238: LD_VAR 0 3
44242: ARRAY
44243: PUSH
44244: LD_VAR 0 1
44248: DIFF
44249: PPUSH
44250: CALL_OW 1
44254: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
44255: LD_VAR 0 1
44259: PUSH
44260: LD_EXP 58
44264: PUSH
44265: LD_VAR 0 3
44269: ARRAY
44270: IN
44271: IFFALSE 44310
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
44273: LD_ADDR_EXP 58
44277: PUSH
44278: LD_EXP 58
44282: PPUSH
44283: LD_VAR 0 3
44287: PPUSH
44288: LD_EXP 58
44292: PUSH
44293: LD_VAR 0 3
44297: ARRAY
44298: PUSH
44299: LD_VAR 0 1
44303: DIFF
44304: PPUSH
44305: CALL_OW 1
44309: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
44310: LD_VAR 0 1
44314: PUSH
44315: LD_EXP 57
44319: PUSH
44320: LD_VAR 0 3
44324: ARRAY
44325: IN
44326: IFFALSE 44365
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
44328: LD_ADDR_EXP 57
44332: PUSH
44333: LD_EXP 57
44337: PPUSH
44338: LD_VAR 0 3
44342: PPUSH
44343: LD_EXP 57
44347: PUSH
44348: LD_VAR 0 3
44352: ARRAY
44353: PUSH
44354: LD_VAR 0 1
44358: DIFF
44359: PPUSH
44360: CALL_OW 1
44364: ST_TO_ADDR
// end ; break ;
44365: GO 44369
// end ;
44367: GO 43294
44369: POP
44370: POP
// end ;
44371: LD_VAR 0 2
44375: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
44376: LD_INT 0
44378: PPUSH
44379: PPUSH
44380: PPUSH
// if not mc_bases or not skirmish then
44381: LD_EXP 49
44385: NOT
44386: PUSH
44387: LD_EXP 47
44391: NOT
44392: OR
44393: IFFALSE 44397
// exit ;
44395: GO 44612
// for i = 1 to mc_bases do
44397: LD_ADDR_VAR 0 3
44401: PUSH
44402: DOUBLE
44403: LD_INT 1
44405: DEC
44406: ST_TO_ADDR
44407: LD_EXP 49
44411: PUSH
44412: FOR_TO
44413: IFFALSE 44610
// begin if building in mc_construct_list [ i ] then
44415: LD_VAR 0 1
44419: PUSH
44420: LD_EXP 56
44424: PUSH
44425: LD_VAR 0 3
44429: ARRAY
44430: IN
44431: IFFALSE 44608
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
44433: LD_ADDR_EXP 56
44437: PUSH
44438: LD_EXP 56
44442: PPUSH
44443: LD_VAR 0 3
44447: PPUSH
44448: LD_EXP 56
44452: PUSH
44453: LD_VAR 0 3
44457: ARRAY
44458: PUSH
44459: LD_VAR 0 1
44463: DIFF
44464: PPUSH
44465: CALL_OW 1
44469: ST_TO_ADDR
// if building in mc_lab [ i ] then
44470: LD_VAR 0 1
44474: PUSH
44475: LD_EXP 82
44479: PUSH
44480: LD_VAR 0 3
44484: ARRAY
44485: IN
44486: IFFALSE 44541
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
44488: LD_ADDR_EXP 83
44492: PUSH
44493: LD_EXP 83
44497: PPUSH
44498: LD_VAR 0 3
44502: PPUSH
44503: LD_EXP 83
44507: PUSH
44508: LD_VAR 0 3
44512: ARRAY
44513: PPUSH
44514: LD_INT 1
44516: PPUSH
44517: LD_EXP 83
44521: PUSH
44522: LD_VAR 0 3
44526: ARRAY
44527: PPUSH
44528: LD_INT 0
44530: PPUSH
44531: CALL 52069 0 4
44535: PPUSH
44536: CALL_OW 1
44540: ST_TO_ADDR
// if not building in mc_bases [ i ] then
44541: LD_VAR 0 1
44545: PUSH
44546: LD_EXP 49
44550: PUSH
44551: LD_VAR 0 3
44555: ARRAY
44556: IN
44557: NOT
44558: IFFALSE 44604
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
44560: LD_ADDR_EXP 49
44564: PUSH
44565: LD_EXP 49
44569: PPUSH
44570: LD_VAR 0 3
44574: PUSH
44575: LD_EXP 49
44579: PUSH
44580: LD_VAR 0 3
44584: ARRAY
44585: PUSH
44586: LD_INT 1
44588: PLUS
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PPUSH
44594: LD_VAR 0 1
44598: PPUSH
44599: CALL 52651 0 3
44603: ST_TO_ADDR
// exit ;
44604: POP
44605: POP
44606: GO 44612
// end ; end ;
44608: GO 44412
44610: POP
44611: POP
// end ;
44612: LD_VAR 0 2
44616: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
44617: LD_INT 0
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
// if not mc_bases or not skirmish then
44626: LD_EXP 49
44630: NOT
44631: PUSH
44632: LD_EXP 47
44636: NOT
44637: OR
44638: IFFALSE 44642
// exit ;
44640: GO 45303
// for i = 1 to mc_bases do
44642: LD_ADDR_VAR 0 3
44646: PUSH
44647: DOUBLE
44648: LD_INT 1
44650: DEC
44651: ST_TO_ADDR
44652: LD_EXP 49
44656: PUSH
44657: FOR_TO
44658: IFFALSE 45301
// begin if building in mc_construct_list [ i ] then
44660: LD_VAR 0 1
44664: PUSH
44665: LD_EXP 56
44669: PUSH
44670: LD_VAR 0 3
44674: ARRAY
44675: IN
44676: IFFALSE 45299
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
44678: LD_ADDR_EXP 56
44682: PUSH
44683: LD_EXP 56
44687: PPUSH
44688: LD_VAR 0 3
44692: PPUSH
44693: LD_EXP 56
44697: PUSH
44698: LD_VAR 0 3
44702: ARRAY
44703: PUSH
44704: LD_VAR 0 1
44708: DIFF
44709: PPUSH
44710: CALL_OW 1
44714: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
44715: LD_ADDR_EXP 49
44719: PUSH
44720: LD_EXP 49
44724: PPUSH
44725: LD_VAR 0 3
44729: PUSH
44730: LD_EXP 49
44734: PUSH
44735: LD_VAR 0 3
44739: ARRAY
44740: PUSH
44741: LD_INT 1
44743: PLUS
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PPUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: CALL 52651 0 3
44758: ST_TO_ADDR
// btype := GetBType ( building ) ;
44759: LD_ADDR_VAR 0 5
44763: PUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: CALL_OW 266
44773: ST_TO_ADDR
// side := GetSide ( building ) ;
44774: LD_ADDR_VAR 0 8
44778: PUSH
44779: LD_VAR 0 1
44783: PPUSH
44784: CALL_OW 255
44788: ST_TO_ADDR
// if btype = b_lab then
44789: LD_VAR 0 5
44793: PUSH
44794: LD_INT 6
44796: EQUAL
44797: IFFALSE 44847
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
44799: LD_ADDR_EXP 82
44803: PUSH
44804: LD_EXP 82
44808: PPUSH
44809: LD_VAR 0 3
44813: PUSH
44814: LD_EXP 82
44818: PUSH
44819: LD_VAR 0 3
44823: ARRAY
44824: PUSH
44825: LD_INT 1
44827: PLUS
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PPUSH
44833: LD_VAR 0 1
44837: PPUSH
44838: CALL 52651 0 3
44842: ST_TO_ADDR
// exit ;
44843: POP
44844: POP
44845: GO 45303
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
44847: LD_VAR 0 5
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 4
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: IN
44866: IFFALSE 44990
// begin if btype = b_armoury then
44868: LD_VAR 0 5
44872: PUSH
44873: LD_INT 4
44875: EQUAL
44876: IFFALSE 44886
// btype := b_barracks ;
44878: LD_ADDR_VAR 0 5
44882: PUSH
44883: LD_INT 5
44885: ST_TO_ADDR
// if btype = b_depot then
44886: LD_VAR 0 5
44890: PUSH
44891: LD_INT 0
44893: EQUAL
44894: IFFALSE 44904
// btype := b_warehouse ;
44896: LD_ADDR_VAR 0 5
44900: PUSH
44901: LD_INT 1
44903: ST_TO_ADDR
// if btype = b_workshop then
44904: LD_VAR 0 5
44908: PUSH
44909: LD_INT 2
44911: EQUAL
44912: IFFALSE 44922
// btype := b_factory ;
44914: LD_ADDR_VAR 0 5
44918: PUSH
44919: LD_INT 3
44921: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
44922: LD_VAR 0 5
44926: PPUSH
44927: LD_VAR 0 8
44931: PPUSH
44932: CALL_OW 323
44936: PUSH
44937: LD_INT 1
44939: EQUAL
44940: IFFALSE 44986
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
44942: LD_ADDR_EXP 81
44946: PUSH
44947: LD_EXP 81
44951: PPUSH
44952: LD_VAR 0 3
44956: PUSH
44957: LD_EXP 81
44961: PUSH
44962: LD_VAR 0 3
44966: ARRAY
44967: PUSH
44968: LD_INT 1
44970: PLUS
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PPUSH
44976: LD_VAR 0 1
44980: PPUSH
44981: CALL 52651 0 3
44985: ST_TO_ADDR
// exit ;
44986: POP
44987: POP
44988: GO 45303
// end ; if btype in [ b_bunker , b_turret ] then
44990: LD_VAR 0 5
44994: PUSH
44995: LD_INT 32
44997: PUSH
44998: LD_INT 33
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: IN
45005: IFFALSE 45295
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
45007: LD_ADDR_EXP 57
45011: PUSH
45012: LD_EXP 57
45016: PPUSH
45017: LD_VAR 0 3
45021: PUSH
45022: LD_EXP 57
45026: PUSH
45027: LD_VAR 0 3
45031: ARRAY
45032: PUSH
45033: LD_INT 1
45035: PLUS
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PPUSH
45041: LD_VAR 0 1
45045: PPUSH
45046: CALL 52651 0 3
45050: ST_TO_ADDR
// if btype = b_bunker then
45051: LD_VAR 0 5
45055: PUSH
45056: LD_INT 32
45058: EQUAL
45059: IFFALSE 45295
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
45061: LD_ADDR_EXP 58
45065: PUSH
45066: LD_EXP 58
45070: PPUSH
45071: LD_VAR 0 3
45075: PUSH
45076: LD_EXP 58
45080: PUSH
45081: LD_VAR 0 3
45085: ARRAY
45086: PUSH
45087: LD_INT 1
45089: PLUS
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PPUSH
45095: LD_VAR 0 1
45099: PPUSH
45100: CALL 52651 0 3
45104: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
45105: LD_ADDR_VAR 0 6
45109: PUSH
45110: LD_EXP 49
45114: PUSH
45115: LD_VAR 0 3
45119: ARRAY
45120: PPUSH
45121: LD_INT 25
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: LD_INT 54
45136: PUSH
45137: EMPTY
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PPUSH
45148: CALL_OW 72
45152: ST_TO_ADDR
// if tmp then
45153: LD_VAR 0 6
45157: IFFALSE 45163
// exit ;
45159: POP
45160: POP
45161: GO 45303
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45163: LD_ADDR_VAR 0 6
45167: PUSH
45168: LD_EXP 49
45172: PUSH
45173: LD_VAR 0 3
45177: ARRAY
45178: PPUSH
45179: LD_INT 2
45181: PUSH
45182: LD_INT 30
45184: PUSH
45185: LD_INT 4
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 30
45194: PUSH
45195: LD_INT 5
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: PPUSH
45207: CALL_OW 72
45211: ST_TO_ADDR
// if not tmp then
45212: LD_VAR 0 6
45216: NOT
45217: IFFALSE 45223
// exit ;
45219: POP
45220: POP
45221: GO 45303
// for j in tmp do
45223: LD_ADDR_VAR 0 4
45227: PUSH
45228: LD_VAR 0 6
45232: PUSH
45233: FOR_IN
45234: IFFALSE 45293
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
45236: LD_ADDR_VAR 0 7
45240: PUSH
45241: LD_VAR 0 4
45245: PPUSH
45246: CALL_OW 313
45250: PPUSH
45251: LD_INT 25
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PPUSH
45261: CALL_OW 72
45265: ST_TO_ADDR
// if units then
45266: LD_VAR 0 7
45270: IFFALSE 45291
// begin ComExitBuilding ( units [ 1 ] ) ;
45272: LD_VAR 0 7
45276: PUSH
45277: LD_INT 1
45279: ARRAY
45280: PPUSH
45281: CALL_OW 122
// exit ;
45285: POP
45286: POP
45287: POP
45288: POP
45289: GO 45303
// end ; end ;
45291: GO 45233
45293: POP
45294: POP
// end ; end ; exit ;
45295: POP
45296: POP
45297: GO 45303
// end ; end ;
45299: GO 44657
45301: POP
45302: POP
// end ;
45303: LD_VAR 0 2
45307: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
45308: LD_INT 0
45310: PPUSH
45311: PPUSH
45312: PPUSH
45313: PPUSH
45314: PPUSH
45315: PPUSH
45316: PPUSH
// if not mc_bases or not skirmish then
45317: LD_EXP 49
45321: NOT
45322: PUSH
45323: LD_EXP 47
45327: NOT
45328: OR
45329: IFFALSE 45333
// exit ;
45331: GO 45564
// btype := GetBType ( building ) ;
45333: LD_ADDR_VAR 0 6
45337: PUSH
45338: LD_VAR 0 1
45342: PPUSH
45343: CALL_OW 266
45347: ST_TO_ADDR
// x := GetX ( building ) ;
45348: LD_ADDR_VAR 0 7
45352: PUSH
45353: LD_VAR 0 1
45357: PPUSH
45358: CALL_OW 250
45362: ST_TO_ADDR
// y := GetY ( building ) ;
45363: LD_ADDR_VAR 0 8
45367: PUSH
45368: LD_VAR 0 1
45372: PPUSH
45373: CALL_OW 251
45377: ST_TO_ADDR
// d := GetDir ( building ) ;
45378: LD_ADDR_VAR 0 9
45382: PUSH
45383: LD_VAR 0 1
45387: PPUSH
45388: CALL_OW 254
45392: ST_TO_ADDR
// for i = 1 to mc_bases do
45393: LD_ADDR_VAR 0 4
45397: PUSH
45398: DOUBLE
45399: LD_INT 1
45401: DEC
45402: ST_TO_ADDR
45403: LD_EXP 49
45407: PUSH
45408: FOR_TO
45409: IFFALSE 45562
// begin if not mc_build_list [ i ] then
45411: LD_EXP 54
45415: PUSH
45416: LD_VAR 0 4
45420: ARRAY
45421: NOT
45422: IFFALSE 45426
// continue ;
45424: GO 45408
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
45426: LD_VAR 0 6
45430: PUSH
45431: LD_VAR 0 7
45435: PUSH
45436: LD_VAR 0 8
45440: PUSH
45441: LD_VAR 0 9
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: PPUSH
45452: LD_EXP 54
45456: PUSH
45457: LD_VAR 0 4
45461: ARRAY
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PPUSH
45467: CALL 58820 0 2
45471: IFFALSE 45560
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
45473: LD_ADDR_EXP 54
45477: PUSH
45478: LD_EXP 54
45482: PPUSH
45483: LD_VAR 0 4
45487: PPUSH
45488: LD_EXP 54
45492: PUSH
45493: LD_VAR 0 4
45497: ARRAY
45498: PPUSH
45499: LD_INT 1
45501: PPUSH
45502: CALL_OW 3
45506: PPUSH
45507: CALL_OW 1
45511: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
45512: LD_ADDR_EXP 56
45516: PUSH
45517: LD_EXP 56
45521: PPUSH
45522: LD_VAR 0 4
45526: PUSH
45527: LD_EXP 56
45531: PUSH
45532: LD_VAR 0 4
45536: ARRAY
45537: PUSH
45538: LD_INT 1
45540: PLUS
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PPUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL 52651 0 3
45555: ST_TO_ADDR
// exit ;
45556: POP
45557: POP
45558: GO 45564
// end ; end ;
45560: GO 45408
45562: POP
45563: POP
// end ;
45564: LD_VAR 0 3
45568: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
45569: LD_INT 0
45571: PPUSH
45572: PPUSH
45573: PPUSH
// if not mc_bases or not skirmish then
45574: LD_EXP 49
45578: NOT
45579: PUSH
45580: LD_EXP 47
45584: NOT
45585: OR
45586: IFFALSE 45590
// exit ;
45588: GO 45780
// for i = 1 to mc_bases do
45590: LD_ADDR_VAR 0 4
45594: PUSH
45595: DOUBLE
45596: LD_INT 1
45598: DEC
45599: ST_TO_ADDR
45600: LD_EXP 49
45604: PUSH
45605: FOR_TO
45606: IFFALSE 45693
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
45608: LD_VAR 0 1
45612: PUSH
45613: LD_EXP 57
45617: PUSH
45618: LD_VAR 0 4
45622: ARRAY
45623: IN
45624: PUSH
45625: LD_VAR 0 1
45629: PUSH
45630: LD_EXP 58
45634: PUSH
45635: LD_VAR 0 4
45639: ARRAY
45640: IN
45641: NOT
45642: AND
45643: IFFALSE 45691
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
45645: LD_ADDR_EXP 58
45649: PUSH
45650: LD_EXP 58
45654: PPUSH
45655: LD_VAR 0 4
45659: PUSH
45660: LD_EXP 58
45664: PUSH
45665: LD_VAR 0 4
45669: ARRAY
45670: PUSH
45671: LD_INT 1
45673: PLUS
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PPUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: CALL 52651 0 3
45688: ST_TO_ADDR
// break ;
45689: GO 45693
// end ; end ;
45691: GO 45605
45693: POP
45694: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
45695: LD_VAR 0 1
45699: PPUSH
45700: CALL_OW 257
45704: PUSH
45705: LD_EXP 75
45709: IN
45710: PUSH
45711: LD_VAR 0 1
45715: PPUSH
45716: CALL_OW 266
45720: PUSH
45721: LD_INT 5
45723: EQUAL
45724: AND
45725: PUSH
45726: LD_VAR 0 2
45730: PPUSH
45731: CALL_OW 110
45735: PUSH
45736: LD_INT 18
45738: NONEQUAL
45739: AND
45740: IFFALSE 45780
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
45742: LD_VAR 0 2
45746: PPUSH
45747: CALL_OW 257
45751: PUSH
45752: LD_INT 5
45754: PUSH
45755: LD_INT 8
45757: PUSH
45758: LD_INT 9
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: IN
45766: IFFALSE 45780
// SetClass ( unit , 1 ) ;
45768: LD_VAR 0 2
45772: PPUSH
45773: LD_INT 1
45775: PPUSH
45776: CALL_OW 336
// end ;
45780: LD_VAR 0 3
45784: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
45785: LD_INT 0
45787: PPUSH
45788: PPUSH
// if not mc_bases or not skirmish then
45789: LD_EXP 49
45793: NOT
45794: PUSH
45795: LD_EXP 47
45799: NOT
45800: OR
45801: IFFALSE 45805
// exit ;
45803: GO 45921
// if GetLives ( abandoned_vehicle ) > 250 then
45805: LD_VAR 0 2
45809: PPUSH
45810: CALL_OW 256
45814: PUSH
45815: LD_INT 250
45817: GREATER
45818: IFFALSE 45822
// exit ;
45820: GO 45921
// for i = 1 to mc_bases do
45822: LD_ADDR_VAR 0 6
45826: PUSH
45827: DOUBLE
45828: LD_INT 1
45830: DEC
45831: ST_TO_ADDR
45832: LD_EXP 49
45836: PUSH
45837: FOR_TO
45838: IFFALSE 45919
// begin if driver in mc_bases [ i ] then
45840: LD_VAR 0 1
45844: PUSH
45845: LD_EXP 49
45849: PUSH
45850: LD_VAR 0 6
45854: ARRAY
45855: IN
45856: IFFALSE 45917
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
45858: LD_VAR 0 1
45862: PPUSH
45863: LD_EXP 49
45867: PUSH
45868: LD_VAR 0 6
45872: ARRAY
45873: PPUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 30
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 30
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: PPUSH
45902: CALL_OW 72
45906: PUSH
45907: LD_INT 1
45909: ARRAY
45910: PPUSH
45911: CALL_OW 112
// break ;
45915: GO 45919
// end ; end ;
45917: GO 45837
45919: POP
45920: POP
// end ; end_of_file
45921: LD_VAR 0 5
45925: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
45926: LD_INT 0
45928: PPUSH
45929: PPUSH
// if exist_mode then
45930: LD_VAR 0 2
45934: IFFALSE 45959
// unit := CreateCharacter ( prefix & ident ) else
45936: LD_ADDR_VAR 0 5
45940: PUSH
45941: LD_VAR 0 3
45945: PUSH
45946: LD_VAR 0 1
45950: STR
45951: PPUSH
45952: CALL_OW 34
45956: ST_TO_ADDR
45957: GO 45974
// unit := NewCharacter ( ident ) ;
45959: LD_ADDR_VAR 0 5
45963: PUSH
45964: LD_VAR 0 1
45968: PPUSH
45969: CALL_OW 25
45973: ST_TO_ADDR
// result := unit ;
45974: LD_ADDR_VAR 0 4
45978: PUSH
45979: LD_VAR 0 5
45983: ST_TO_ADDR
// end ;
45984: LD_VAR 0 4
45988: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
45989: LD_INT 0
45991: PPUSH
45992: PPUSH
// if not side or not nation then
45993: LD_VAR 0 1
45997: NOT
45998: PUSH
45999: LD_VAR 0 2
46003: NOT
46004: OR
46005: IFFALSE 46009
// exit ;
46007: GO 46645
// case nation of nation_american :
46009: LD_VAR 0 2
46013: PUSH
46014: LD_INT 1
46016: DOUBLE
46017: EQUAL
46018: IFTRUE 46022
46020: GO 46192
46022: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
46023: LD_ADDR_VAR 0 4
46027: PUSH
46028: LD_INT 35
46030: PUSH
46031: LD_INT 45
46033: PUSH
46034: LD_INT 46
46036: PUSH
46037: LD_INT 47
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 6
46048: PUSH
46049: LD_INT 15
46051: PUSH
46052: LD_INT 16
46054: PUSH
46055: LD_INT 7
46057: PUSH
46058: LD_INT 12
46060: PUSH
46061: LD_INT 13
46063: PUSH
46064: LD_INT 10
46066: PUSH
46067: LD_INT 14
46069: PUSH
46070: LD_INT 20
46072: PUSH
46073: LD_INT 21
46075: PUSH
46076: LD_INT 22
46078: PUSH
46079: LD_INT 25
46081: PUSH
46082: LD_INT 32
46084: PUSH
46085: LD_INT 27
46087: PUSH
46088: LD_INT 36
46090: PUSH
46091: LD_INT 69
46093: PUSH
46094: LD_INT 39
46096: PUSH
46097: LD_INT 34
46099: PUSH
46100: LD_INT 40
46102: PUSH
46103: LD_INT 48
46105: PUSH
46106: LD_INT 49
46108: PUSH
46109: LD_INT 50
46111: PUSH
46112: LD_INT 51
46114: PUSH
46115: LD_INT 52
46117: PUSH
46118: LD_INT 53
46120: PUSH
46121: LD_INT 54
46123: PUSH
46124: LD_INT 55
46126: PUSH
46127: LD_INT 56
46129: PUSH
46130: LD_INT 57
46132: PUSH
46133: LD_INT 58
46135: PUSH
46136: LD_INT 59
46138: PUSH
46139: LD_INT 60
46141: PUSH
46142: LD_INT 61
46144: PUSH
46145: LD_INT 62
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
46190: GO 46569
46192: LD_INT 2
46194: DOUBLE
46195: EQUAL
46196: IFTRUE 46200
46198: GO 46378
46200: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
46201: LD_ADDR_VAR 0 4
46205: PUSH
46206: LD_INT 35
46208: PUSH
46209: LD_INT 45
46211: PUSH
46212: LD_INT 46
46214: PUSH
46215: LD_INT 47
46217: PUSH
46218: LD_INT 70
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 11
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 4
46232: PUSH
46233: LD_INT 5
46235: PUSH
46236: LD_INT 6
46238: PUSH
46239: LD_INT 15
46241: PUSH
46242: LD_INT 18
46244: PUSH
46245: LD_INT 7
46247: PUSH
46248: LD_INT 17
46250: PUSH
46251: LD_INT 8
46253: PUSH
46254: LD_INT 20
46256: PUSH
46257: LD_INT 21
46259: PUSH
46260: LD_INT 22
46262: PUSH
46263: LD_INT 72
46265: PUSH
46266: LD_INT 26
46268: PUSH
46269: LD_INT 69
46271: PUSH
46272: LD_INT 39
46274: PUSH
46275: LD_INT 40
46277: PUSH
46278: LD_INT 41
46280: PUSH
46281: LD_INT 42
46283: PUSH
46284: LD_INT 43
46286: PUSH
46287: LD_INT 48
46289: PUSH
46290: LD_INT 49
46292: PUSH
46293: LD_INT 50
46295: PUSH
46296: LD_INT 51
46298: PUSH
46299: LD_INT 52
46301: PUSH
46302: LD_INT 53
46304: PUSH
46305: LD_INT 54
46307: PUSH
46308: LD_INT 55
46310: PUSH
46311: LD_INT 56
46313: PUSH
46314: LD_INT 60
46316: PUSH
46317: LD_INT 61
46319: PUSH
46320: LD_INT 62
46322: PUSH
46323: LD_INT 66
46325: PUSH
46326: LD_INT 67
46328: PUSH
46329: LD_INT 68
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: ST_TO_ADDR
46376: GO 46569
46378: LD_INT 3
46380: DOUBLE
46381: EQUAL
46382: IFTRUE 46386
46384: GO 46568
46386: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
46387: LD_ADDR_VAR 0 4
46391: PUSH
46392: LD_INT 46
46394: PUSH
46395: LD_INT 47
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 11
46406: PUSH
46407: LD_INT 9
46409: PUSH
46410: LD_INT 20
46412: PUSH
46413: LD_INT 19
46415: PUSH
46416: LD_INT 21
46418: PUSH
46419: LD_INT 24
46421: PUSH
46422: LD_INT 22
46424: PUSH
46425: LD_INT 25
46427: PUSH
46428: LD_INT 28
46430: PUSH
46431: LD_INT 29
46433: PUSH
46434: LD_INT 30
46436: PUSH
46437: LD_INT 31
46439: PUSH
46440: LD_INT 37
46442: PUSH
46443: LD_INT 38
46445: PUSH
46446: LD_INT 32
46448: PUSH
46449: LD_INT 27
46451: PUSH
46452: LD_INT 33
46454: PUSH
46455: LD_INT 69
46457: PUSH
46458: LD_INT 39
46460: PUSH
46461: LD_INT 34
46463: PUSH
46464: LD_INT 40
46466: PUSH
46467: LD_INT 71
46469: PUSH
46470: LD_INT 23
46472: PUSH
46473: LD_INT 44
46475: PUSH
46476: LD_INT 48
46478: PUSH
46479: LD_INT 49
46481: PUSH
46482: LD_INT 50
46484: PUSH
46485: LD_INT 51
46487: PUSH
46488: LD_INT 52
46490: PUSH
46491: LD_INT 53
46493: PUSH
46494: LD_INT 54
46496: PUSH
46497: LD_INT 55
46499: PUSH
46500: LD_INT 56
46502: PUSH
46503: LD_INT 57
46505: PUSH
46506: LD_INT 58
46508: PUSH
46509: LD_INT 59
46511: PUSH
46512: LD_INT 63
46514: PUSH
46515: LD_INT 64
46517: PUSH
46518: LD_INT 65
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
46566: GO 46569
46568: POP
// if state > - 1 and state < 3 then
46569: LD_VAR 0 3
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: GREATER
46578: PUSH
46579: LD_VAR 0 3
46583: PUSH
46584: LD_INT 3
46586: LESS
46587: AND
46588: IFFALSE 46645
// for i in result do
46590: LD_ADDR_VAR 0 5
46594: PUSH
46595: LD_VAR 0 4
46599: PUSH
46600: FOR_IN
46601: IFFALSE 46643
// if GetTech ( i , side ) <> state then
46603: LD_VAR 0 5
46607: PPUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 321
46617: PUSH
46618: LD_VAR 0 3
46622: NONEQUAL
46623: IFFALSE 46641
// result := result diff i ;
46625: LD_ADDR_VAR 0 4
46629: PUSH
46630: LD_VAR 0 4
46634: PUSH
46635: LD_VAR 0 5
46639: DIFF
46640: ST_TO_ADDR
46641: GO 46600
46643: POP
46644: POP
// end ;
46645: LD_VAR 0 4
46649: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
46650: LD_INT 0
46652: PPUSH
46653: PPUSH
46654: PPUSH
// result := true ;
46655: LD_ADDR_VAR 0 3
46659: PUSH
46660: LD_INT 1
46662: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
46663: LD_ADDR_VAR 0 5
46667: PUSH
46668: LD_VAR 0 2
46672: PPUSH
46673: CALL_OW 480
46677: ST_TO_ADDR
// if not tmp then
46678: LD_VAR 0 5
46682: NOT
46683: IFFALSE 46687
// exit ;
46685: GO 46736
// for i in tmp do
46687: LD_ADDR_VAR 0 4
46691: PUSH
46692: LD_VAR 0 5
46696: PUSH
46697: FOR_IN
46698: IFFALSE 46734
// if GetTech ( i , side ) <> state_researched then
46700: LD_VAR 0 4
46704: PPUSH
46705: LD_VAR 0 1
46709: PPUSH
46710: CALL_OW 321
46714: PUSH
46715: LD_INT 2
46717: NONEQUAL
46718: IFFALSE 46732
// begin result := false ;
46720: LD_ADDR_VAR 0 3
46724: PUSH
46725: LD_INT 0
46727: ST_TO_ADDR
// exit ;
46728: POP
46729: POP
46730: GO 46736
// end ;
46732: GO 46697
46734: POP
46735: POP
// end ;
46736: LD_VAR 0 3
46740: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
46741: LD_INT 0
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
46756: LD_VAR 0 1
46760: NOT
46761: PUSH
46762: LD_VAR 0 1
46766: PPUSH
46767: CALL_OW 257
46771: PUSH
46772: LD_INT 9
46774: NONEQUAL
46775: OR
46776: IFFALSE 46780
// exit ;
46778: GO 47353
// side := GetSide ( unit ) ;
46780: LD_ADDR_VAR 0 9
46784: PUSH
46785: LD_VAR 0 1
46789: PPUSH
46790: CALL_OW 255
46794: ST_TO_ADDR
// tech_space := tech_spacanom ;
46795: LD_ADDR_VAR 0 12
46799: PUSH
46800: LD_INT 29
46802: ST_TO_ADDR
// tech_time := tech_taurad ;
46803: LD_ADDR_VAR 0 13
46807: PUSH
46808: LD_INT 28
46810: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
46811: LD_ADDR_VAR 0 11
46815: PUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 310
46825: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
46826: LD_VAR 0 11
46830: PPUSH
46831: CALL_OW 247
46835: PUSH
46836: LD_INT 2
46838: EQUAL
46839: IFFALSE 46843
// exit ;
46841: GO 47353
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46843: LD_ADDR_VAR 0 8
46847: PUSH
46848: LD_INT 81
46850: PUSH
46851: LD_VAR 0 9
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: LD_INT 21
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PPUSH
46881: CALL_OW 69
46885: ST_TO_ADDR
// if not tmp then
46886: LD_VAR 0 8
46890: NOT
46891: IFFALSE 46895
// exit ;
46893: GO 47353
// if in_unit then
46895: LD_VAR 0 11
46899: IFFALSE 46923
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
46901: LD_ADDR_VAR 0 10
46905: PUSH
46906: LD_VAR 0 8
46910: PPUSH
46911: LD_VAR 0 11
46915: PPUSH
46916: CALL_OW 74
46920: ST_TO_ADDR
46921: GO 46943
// enemy := NearestUnitToUnit ( tmp , unit ) ;
46923: LD_ADDR_VAR 0 10
46927: PUSH
46928: LD_VAR 0 8
46932: PPUSH
46933: LD_VAR 0 1
46937: PPUSH
46938: CALL_OW 74
46942: ST_TO_ADDR
// if not enemy then
46943: LD_VAR 0 10
46947: NOT
46948: IFFALSE 46952
// exit ;
46950: GO 47353
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
46952: LD_VAR 0 11
46956: PUSH
46957: LD_VAR 0 11
46961: PPUSH
46962: LD_VAR 0 10
46966: PPUSH
46967: CALL_OW 296
46971: PUSH
46972: LD_INT 13
46974: GREATER
46975: AND
46976: PUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: LD_VAR 0 10
46986: PPUSH
46987: CALL_OW 296
46991: PUSH
46992: LD_INT 12
46994: GREATER
46995: OR
46996: IFFALSE 47000
// exit ;
46998: GO 47353
// missile := [ 1 ] ;
47000: LD_ADDR_VAR 0 14
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47011: LD_VAR 0 9
47015: PPUSH
47016: LD_VAR 0 12
47020: PPUSH
47021: CALL_OW 325
47025: IFFALSE 47054
// missile := Insert ( missile , missile + 1 , 2 ) ;
47027: LD_ADDR_VAR 0 14
47031: PUSH
47032: LD_VAR 0 14
47036: PPUSH
47037: LD_VAR 0 14
47041: PUSH
47042: LD_INT 1
47044: PLUS
47045: PPUSH
47046: LD_INT 2
47048: PPUSH
47049: CALL_OW 2
47053: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47054: LD_VAR 0 9
47058: PPUSH
47059: LD_VAR 0 13
47063: PPUSH
47064: CALL_OW 325
47068: PUSH
47069: LD_VAR 0 10
47073: PPUSH
47074: CALL_OW 255
47078: PPUSH
47079: LD_VAR 0 13
47083: PPUSH
47084: CALL_OW 325
47088: NOT
47089: AND
47090: IFFALSE 47119
// missile := Insert ( missile , missile + 1 , 3 ) ;
47092: LD_ADDR_VAR 0 14
47096: PUSH
47097: LD_VAR 0 14
47101: PPUSH
47102: LD_VAR 0 14
47106: PUSH
47107: LD_INT 1
47109: PLUS
47110: PPUSH
47111: LD_INT 3
47113: PPUSH
47114: CALL_OW 2
47118: ST_TO_ADDR
// if missile < 2 then
47119: LD_VAR 0 14
47123: PUSH
47124: LD_INT 2
47126: LESS
47127: IFFALSE 47131
// exit ;
47129: GO 47353
// x := GetX ( enemy ) ;
47131: LD_ADDR_VAR 0 4
47135: PUSH
47136: LD_VAR 0 10
47140: PPUSH
47141: CALL_OW 250
47145: ST_TO_ADDR
// y := GetY ( enemy ) ;
47146: LD_ADDR_VAR 0 5
47150: PUSH
47151: LD_VAR 0 10
47155: PPUSH
47156: CALL_OW 251
47160: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47161: LD_ADDR_VAR 0 6
47165: PUSH
47166: LD_VAR 0 4
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PPUSH
47175: LD_INT 1
47177: PPUSH
47178: CALL_OW 12
47182: PLUS
47183: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47184: LD_ADDR_VAR 0 7
47188: PUSH
47189: LD_VAR 0 5
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PPUSH
47198: LD_INT 1
47200: PPUSH
47201: CALL_OW 12
47205: PLUS
47206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47207: LD_VAR 0 6
47211: PPUSH
47212: LD_VAR 0 7
47216: PPUSH
47217: CALL_OW 488
47221: NOT
47222: IFFALSE 47244
// begin _x := x ;
47224: LD_ADDR_VAR 0 6
47228: PUSH
47229: LD_VAR 0 4
47233: ST_TO_ADDR
// _y := y ;
47234: LD_ADDR_VAR 0 7
47238: PUSH
47239: LD_VAR 0 5
47243: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47244: LD_ADDR_VAR 0 3
47248: PUSH
47249: LD_INT 1
47251: PPUSH
47252: LD_VAR 0 14
47256: PPUSH
47257: CALL_OW 12
47261: ST_TO_ADDR
// case i of 1 :
47262: LD_VAR 0 3
47266: PUSH
47267: LD_INT 1
47269: DOUBLE
47270: EQUAL
47271: IFTRUE 47275
47273: GO 47292
47275: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47276: LD_VAR 0 1
47280: PPUSH
47281: LD_VAR 0 10
47285: PPUSH
47286: CALL_OW 115
47290: GO 47353
47292: LD_INT 2
47294: DOUBLE
47295: EQUAL
47296: IFTRUE 47300
47298: GO 47322
47300: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47301: LD_VAR 0 1
47305: PPUSH
47306: LD_VAR 0 6
47310: PPUSH
47311: LD_VAR 0 7
47315: PPUSH
47316: CALL_OW 153
47320: GO 47353
47322: LD_INT 3
47324: DOUBLE
47325: EQUAL
47326: IFTRUE 47330
47328: GO 47352
47330: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47331: LD_VAR 0 1
47335: PPUSH
47336: LD_VAR 0 6
47340: PPUSH
47341: LD_VAR 0 7
47345: PPUSH
47346: CALL_OW 154
47350: GO 47353
47352: POP
// end ;
47353: LD_VAR 0 2
47357: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47358: LD_INT 0
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
// if not unit or not building then
47366: LD_VAR 0 1
47370: NOT
47371: PUSH
47372: LD_VAR 0 2
47376: NOT
47377: OR
47378: IFFALSE 47382
// exit ;
47380: GO 47540
// x := GetX ( building ) ;
47382: LD_ADDR_VAR 0 5
47386: PUSH
47387: LD_VAR 0 2
47391: PPUSH
47392: CALL_OW 250
47396: ST_TO_ADDR
// y := GetY ( building ) ;
47397: LD_ADDR_VAR 0 6
47401: PUSH
47402: LD_VAR 0 2
47406: PPUSH
47407: CALL_OW 251
47411: ST_TO_ADDR
// for i = 0 to 5 do
47412: LD_ADDR_VAR 0 4
47416: PUSH
47417: DOUBLE
47418: LD_INT 0
47420: DEC
47421: ST_TO_ADDR
47422: LD_INT 5
47424: PUSH
47425: FOR_TO
47426: IFFALSE 47538
// begin _x := ShiftX ( x , i , 3 ) ;
47428: LD_ADDR_VAR 0 7
47432: PUSH
47433: LD_VAR 0 5
47437: PPUSH
47438: LD_VAR 0 4
47442: PPUSH
47443: LD_INT 3
47445: PPUSH
47446: CALL_OW 272
47450: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
47451: LD_ADDR_VAR 0 8
47455: PUSH
47456: LD_VAR 0 6
47460: PPUSH
47461: LD_VAR 0 4
47465: PPUSH
47466: LD_INT 3
47468: PPUSH
47469: CALL_OW 273
47473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47474: LD_VAR 0 7
47478: PPUSH
47479: LD_VAR 0 8
47483: PPUSH
47484: CALL_OW 488
47488: NOT
47489: IFFALSE 47493
// continue ;
47491: GO 47425
// if HexInfo ( _x , _y ) = 0 then
47493: LD_VAR 0 7
47497: PPUSH
47498: LD_VAR 0 8
47502: PPUSH
47503: CALL_OW 428
47507: PUSH
47508: LD_INT 0
47510: EQUAL
47511: IFFALSE 47536
// begin ComMoveXY ( unit , _x , _y ) ;
47513: LD_VAR 0 1
47517: PPUSH
47518: LD_VAR 0 7
47522: PPUSH
47523: LD_VAR 0 8
47527: PPUSH
47528: CALL_OW 111
// exit ;
47532: POP
47533: POP
47534: GO 47540
// end ; end ;
47536: GO 47425
47538: POP
47539: POP
// end ;
47540: LD_VAR 0 3
47544: RET
// export function ScanBase ( side , base_area ) ; begin
47545: LD_INT 0
47547: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
47548: LD_ADDR_VAR 0 3
47552: PUSH
47553: LD_VAR 0 2
47557: PPUSH
47558: LD_INT 81
47560: PUSH
47561: LD_VAR 0 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PPUSH
47570: CALL_OW 70
47574: ST_TO_ADDR
// end ;
47575: LD_VAR 0 3
47579: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
47580: LD_INT 0
47582: PPUSH
47583: PPUSH
47584: PPUSH
47585: PPUSH
47586: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
47587: LD_VAR 0 1
47591: NOT
47592: PUSH
47593: LD_EXP 49
47597: PUSH
47598: LD_VAR 0 1
47602: ARRAY
47603: NOT
47604: OR
47605: PUSH
47606: LD_VAR 0 2
47610: NOT
47611: OR
47612: PUSH
47613: LD_VAR 0 3
47617: NOT
47618: OR
47619: IFFALSE 47623
// exit ;
47621: GO 48073
// side := mc_sides [ base ] ;
47623: LD_ADDR_VAR 0 6
47627: PUSH
47628: LD_EXP 75
47632: PUSH
47633: LD_VAR 0 1
47637: ARRAY
47638: ST_TO_ADDR
// if not side then
47639: LD_VAR 0 6
47643: NOT
47644: IFFALSE 47648
// exit ;
47646: GO 48073
// for i in solds do
47648: LD_ADDR_VAR 0 7
47652: PUSH
47653: LD_VAR 0 2
47657: PUSH
47658: FOR_IN
47659: IFFALSE 47720
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
47661: LD_VAR 0 7
47665: PPUSH
47666: CALL_OW 310
47670: PPUSH
47671: CALL_OW 266
47675: PUSH
47676: LD_INT 32
47678: PUSH
47679: LD_INT 31
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: IN
47686: IFFALSE 47706
// solds := solds diff i else
47688: LD_ADDR_VAR 0 2
47692: PUSH
47693: LD_VAR 0 2
47697: PUSH
47698: LD_VAR 0 7
47702: DIFF
47703: ST_TO_ADDR
47704: GO 47718
// SetTag ( i , 18 ) ;
47706: LD_VAR 0 7
47710: PPUSH
47711: LD_INT 18
47713: PPUSH
47714: CALL_OW 109
47718: GO 47658
47720: POP
47721: POP
// if not solds then
47722: LD_VAR 0 2
47726: NOT
47727: IFFALSE 47731
// exit ;
47729: GO 48073
// repeat wait ( 0 0$1 ) ;
47731: LD_INT 35
47733: PPUSH
47734: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
47738: LD_ADDR_VAR 0 5
47742: PUSH
47743: LD_VAR 0 6
47747: PPUSH
47748: LD_VAR 0 3
47752: PPUSH
47753: CALL 47545 0 2
47757: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
47758: LD_VAR 0 5
47762: NOT
47763: PUSH
47764: LD_VAR 0 5
47768: PUSH
47769: LD_INT 3
47771: GREATER
47772: OR
47773: PUSH
47774: LD_EXP 71
47778: PUSH
47779: LD_VAR 0 1
47783: ARRAY
47784: OR
47785: IFFALSE 47826
// begin for i in solds do
47787: LD_ADDR_VAR 0 7
47791: PUSH
47792: LD_VAR 0 2
47796: PUSH
47797: FOR_IN
47798: IFFALSE 47822
// if HasTask ( i ) then
47800: LD_VAR 0 7
47804: PPUSH
47805: CALL_OW 314
47809: IFFALSE 47820
// ComStop ( i ) ;
47811: LD_VAR 0 7
47815: PPUSH
47816: CALL_OW 141
47820: GO 47797
47822: POP
47823: POP
// break ;
47824: GO 48061
// end ; for i in solds do
47826: LD_ADDR_VAR 0 7
47830: PUSH
47831: LD_VAR 0 2
47835: PUSH
47836: FOR_IN
47837: IFFALSE 48053
// begin if IsInUnit ( i ) then
47839: LD_VAR 0 7
47843: PPUSH
47844: CALL_OW 310
47848: IFFALSE 47859
// ComExitBuilding ( i ) ;
47850: LD_VAR 0 7
47854: PPUSH
47855: CALL_OW 122
// if GetLives ( i ) > 333 then
47859: LD_VAR 0 7
47863: PPUSH
47864: CALL_OW 256
47868: PUSH
47869: LD_INT 333
47871: GREATER
47872: IFFALSE 47900
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47874: LD_VAR 0 7
47878: PPUSH
47879: LD_VAR 0 5
47883: PPUSH
47884: LD_VAR 0 7
47888: PPUSH
47889: CALL_OW 74
47893: PPUSH
47894: CALL_OW 115
47898: GO 48051
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
47900: LD_ADDR_VAR 0 8
47904: PUSH
47905: LD_EXP 49
47909: PUSH
47910: LD_VAR 0 1
47914: ARRAY
47915: PPUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 30
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 30
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 30
47941: PUSH
47942: LD_INT 6
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: PPUSH
47955: CALL_OW 72
47959: PPUSH
47960: LD_VAR 0 7
47964: PPUSH
47965: CALL_OW 74
47969: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
47970: LD_VAR 0 7
47974: PPUSH
47975: LD_VAR 0 8
47979: PPUSH
47980: CALL_OW 250
47984: PPUSH
47985: LD_INT 3
47987: PPUSH
47988: LD_INT 5
47990: PPUSH
47991: CALL_OW 272
47995: PPUSH
47996: LD_VAR 0 8
48000: PPUSH
48001: CALL_OW 251
48005: PPUSH
48006: LD_INT 3
48008: PPUSH
48009: LD_INT 5
48011: PPUSH
48012: CALL_OW 273
48016: PPUSH
48017: CALL_OW 111
// SetTag ( i , 0 ) ;
48021: LD_VAR 0 7
48025: PPUSH
48026: LD_INT 0
48028: PPUSH
48029: CALL_OW 109
// solds := solds diff i ;
48033: LD_ADDR_VAR 0 2
48037: PUSH
48038: LD_VAR 0 2
48042: PUSH
48043: LD_VAR 0 7
48047: DIFF
48048: ST_TO_ADDR
// continue ;
48049: GO 47836
// end ; end ;
48051: GO 47836
48053: POP
48054: POP
// until solds ;
48055: LD_VAR 0 2
48059: IFFALSE 47731
// MC_Reset ( base , 18 ) ;
48061: LD_VAR 0 1
48065: PPUSH
48066: LD_INT 18
48068: PPUSH
48069: CALL 20781 0 2
// end ;
48073: LD_VAR 0 4
48077: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
48078: LD_INT 0
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
48094: PPUSH
48095: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
48096: LD_ADDR_VAR 0 12
48100: PUSH
48101: LD_EXP 49
48105: PUSH
48106: LD_VAR 0 1
48110: ARRAY
48111: PPUSH
48112: LD_INT 25
48114: PUSH
48115: LD_INT 3
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PPUSH
48122: CALL_OW 72
48126: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
48127: LD_ADDR_VAR 0 8
48131: PUSH
48132: LD_EXP 49
48136: PUSH
48137: LD_VAR 0 1
48141: ARRAY
48142: PPUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 25
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 25
48158: PUSH
48159: LD_INT 5
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 25
48168: PUSH
48169: LD_INT 8
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 25
48178: PUSH
48179: LD_INT 9
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: PPUSH
48193: CALL_OW 72
48197: ST_TO_ADDR
// if not defenders and not solds then
48198: LD_VAR 0 2
48202: NOT
48203: PUSH
48204: LD_VAR 0 8
48208: NOT
48209: AND
48210: IFFALSE 48214
// exit ;
48212: GO 49543
// depot_under_attack := false ;
48214: LD_ADDR_VAR 0 16
48218: PUSH
48219: LD_INT 0
48221: ST_TO_ADDR
// sold_defenders := [ ] ;
48222: LD_ADDR_VAR 0 17
48226: PUSH
48227: EMPTY
48228: ST_TO_ADDR
// if mechs then
48229: LD_VAR 0 12
48233: IFFALSE 48362
// for i in defenders do
48235: LD_ADDR_VAR 0 5
48239: PUSH
48240: LD_VAR 0 2
48244: PUSH
48245: FOR_IN
48246: IFFALSE 48360
// begin SetTag ( i , 20 ) ;
48248: LD_VAR 0 5
48252: PPUSH
48253: LD_INT 20
48255: PPUSH
48256: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
48260: LD_VAR 0 5
48264: PPUSH
48265: CALL_OW 263
48269: PUSH
48270: LD_INT 1
48272: EQUAL
48273: PUSH
48274: LD_VAR 0 5
48278: PPUSH
48279: CALL_OW 311
48283: NOT
48284: AND
48285: PUSH
48286: LD_VAR 0 12
48290: AND
48291: IFFALSE 48358
// begin un := mechs [ 1 ] ;
48293: LD_ADDR_VAR 0 10
48297: PUSH
48298: LD_VAR 0 12
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: ST_TO_ADDR
// ComExitBuilding ( un ) ;
48307: LD_VAR 0 10
48311: PPUSH
48312: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
48316: LD_VAR 0 10
48320: PPUSH
48321: LD_VAR 0 5
48325: PPUSH
48326: CALL_OW 180
// SetTag ( un , 19 ) ;
48330: LD_VAR 0 10
48334: PPUSH
48335: LD_INT 19
48337: PPUSH
48338: CALL_OW 109
// mechs := mechs diff un ;
48342: LD_ADDR_VAR 0 12
48346: PUSH
48347: LD_VAR 0 12
48351: PUSH
48352: LD_VAR 0 10
48356: DIFF
48357: ST_TO_ADDR
// end ; end ;
48358: GO 48245
48360: POP
48361: POP
// if solds then
48362: LD_VAR 0 8
48366: IFFALSE 48425
// for i in solds do
48368: LD_ADDR_VAR 0 5
48372: PUSH
48373: LD_VAR 0 8
48377: PUSH
48378: FOR_IN
48379: IFFALSE 48423
// if not GetTag ( i ) then
48381: LD_VAR 0 5
48385: PPUSH
48386: CALL_OW 110
48390: NOT
48391: IFFALSE 48421
// begin defenders := defenders union i ;
48393: LD_ADDR_VAR 0 2
48397: PUSH
48398: LD_VAR 0 2
48402: PUSH
48403: LD_VAR 0 5
48407: UNION
48408: ST_TO_ADDR
// SetTag ( i , 18 ) ;
48409: LD_VAR 0 5
48413: PPUSH
48414: LD_INT 18
48416: PPUSH
48417: CALL_OW 109
// end ;
48421: GO 48378
48423: POP
48424: POP
// repeat wait ( 0 0$1 ) ;
48425: LD_INT 35
48427: PPUSH
48428: CALL_OW 67
// enemy := mc_scan [ base ] ;
48432: LD_ADDR_VAR 0 3
48436: PUSH
48437: LD_EXP 72
48441: PUSH
48442: LD_VAR 0 1
48446: ARRAY
48447: ST_TO_ADDR
// for i in defenders do
48448: LD_ADDR_VAR 0 5
48452: PUSH
48453: LD_VAR 0 2
48457: PUSH
48458: FOR_IN
48459: IFFALSE 49144
// begin e := NearestUnitToUnit ( enemy , i ) ;
48461: LD_ADDR_VAR 0 13
48465: PUSH
48466: LD_VAR 0 3
48470: PPUSH
48471: LD_VAR 0 5
48475: PPUSH
48476: CALL_OW 74
48480: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
48481: LD_ADDR_VAR 0 16
48485: PUSH
48486: LD_EXP 49
48490: PUSH
48491: LD_VAR 0 1
48495: ARRAY
48496: PPUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 30
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 30
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: PPUSH
48525: CALL_OW 72
48529: NOT
48530: PUSH
48531: LD_EXP 49
48535: PUSH
48536: LD_VAR 0 1
48540: ARRAY
48541: PPUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 30
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 30
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: PPUSH
48570: CALL_OW 72
48574: PPUSH
48575: CALL_OW 256
48579: PUSH
48580: LD_INT 600
48582: LESS
48583: OR
48584: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
48585: LD_VAR 0 5
48589: PPUSH
48590: CALL_OW 247
48594: PUSH
48595: LD_INT 2
48597: DOUBLE
48598: EQUAL
48599: IFTRUE 48603
48601: GO 48850
48603: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
48604: LD_VAR 0 5
48608: PPUSH
48609: CALL_OW 256
48613: PUSH
48614: LD_INT 650
48616: GREATER
48617: PUSH
48618: LD_VAR 0 5
48622: PPUSH
48623: LD_VAR 0 13
48627: PPUSH
48628: CALL_OW 296
48632: PUSH
48633: LD_INT 40
48635: LESS
48636: AND
48637: IFFALSE 48655
// ComAttackUnit ( i , e ) else
48639: LD_VAR 0 5
48643: PPUSH
48644: LD_VAR 0 13
48648: PPUSH
48649: CALL_OW 115
48653: GO 48733
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
48655: LD_VAR 0 5
48659: PPUSH
48660: LD_VAR 0 13
48664: PPUSH
48665: CALL_OW 296
48669: PUSH
48670: LD_INT 30
48672: GREATEREQUAL
48673: PUSH
48674: LD_VAR 0 5
48678: PPUSH
48679: CALL_OW 256
48683: PUSH
48684: LD_INT 650
48686: LESSEQUAL
48687: OR
48688: PUSH
48689: LD_VAR 0 5
48693: PPUSH
48694: LD_EXP 73
48698: PUSH
48699: LD_VAR 0 1
48703: ARRAY
48704: PPUSH
48705: CALL_OW 308
48709: NOT
48710: AND
48711: IFFALSE 48733
// ComMoveToArea ( i , mc_parking [ base ] ) ;
48713: LD_VAR 0 5
48717: PPUSH
48718: LD_EXP 73
48722: PUSH
48723: LD_VAR 0 1
48727: ARRAY
48728: PPUSH
48729: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
48733: LD_VAR 0 5
48737: PPUSH
48738: CALL_OW 256
48742: PUSH
48743: LD_INT 998
48745: LESS
48746: PUSH
48747: LD_VAR 0 5
48751: PPUSH
48752: CALL_OW 263
48756: PUSH
48757: LD_INT 1
48759: EQUAL
48760: AND
48761: PUSH
48762: LD_VAR 0 5
48766: PPUSH
48767: CALL_OW 311
48771: AND
48772: PUSH
48773: LD_VAR 0 5
48777: PPUSH
48778: LD_EXP 73
48782: PUSH
48783: LD_VAR 0 1
48787: ARRAY
48788: PPUSH
48789: CALL_OW 308
48793: AND
48794: IFFALSE 48848
// begin mech := IsDrivenBy ( i ) ;
48796: LD_ADDR_VAR 0 9
48800: PUSH
48801: LD_VAR 0 5
48805: PPUSH
48806: CALL_OW 311
48810: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
48811: LD_VAR 0 9
48815: PPUSH
48816: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
48820: LD_VAR 0 9
48824: PPUSH
48825: LD_VAR 0 5
48829: PPUSH
48830: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
48834: LD_VAR 0 9
48838: PPUSH
48839: LD_VAR 0 5
48843: PPUSH
48844: CALL_OW 180
// end ; end ; unit_human :
48848: GO 49115
48850: LD_INT 1
48852: DOUBLE
48853: EQUAL
48854: IFTRUE 48858
48856: GO 49114
48858: POP
// begin b := IsInUnit ( i ) ;
48859: LD_ADDR_VAR 0 18
48863: PUSH
48864: LD_VAR 0 5
48868: PPUSH
48869: CALL_OW 310
48873: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
48874: LD_ADDR_VAR 0 19
48878: PUSH
48879: LD_VAR 0 18
48883: NOT
48884: PUSH
48885: LD_VAR 0 18
48889: PPUSH
48890: CALL_OW 266
48894: PUSH
48895: LD_INT 32
48897: PUSH
48898: LD_INT 31
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: IN
48905: OR
48906: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
48907: LD_VAR 0 16
48911: PUSH
48912: LD_VAR 0 2
48916: PPUSH
48917: LD_INT 21
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PPUSH
48927: CALL_OW 72
48931: PUSH
48932: LD_INT 1
48934: LESSEQUAL
48935: OR
48936: PUSH
48937: LD_VAR 0 19
48941: AND
48942: PUSH
48943: LD_VAR 0 5
48947: PUSH
48948: LD_VAR 0 17
48952: IN
48953: NOT
48954: AND
48955: IFFALSE 49048
// begin if b then
48957: LD_VAR 0 18
48961: IFFALSE 49010
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
48963: LD_VAR 0 18
48967: PPUSH
48968: LD_VAR 0 3
48972: PPUSH
48973: LD_VAR 0 18
48977: PPUSH
48978: CALL_OW 74
48982: PPUSH
48983: CALL_OW 296
48987: PUSH
48988: LD_INT 10
48990: LESS
48991: PUSH
48992: LD_VAR 0 18
48996: PPUSH
48997: CALL_OW 461
49001: PUSH
49002: LD_INT 7
49004: NONEQUAL
49005: AND
49006: IFFALSE 49010
// continue ;
49008: GO 48458
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
49010: LD_ADDR_VAR 0 17
49014: PUSH
49015: LD_VAR 0 17
49019: PPUSH
49020: LD_VAR 0 17
49024: PUSH
49025: LD_INT 1
49027: PLUS
49028: PPUSH
49029: LD_VAR 0 5
49033: PPUSH
49034: CALL_OW 1
49038: ST_TO_ADDR
// ComExitBuilding ( i ) ;
49039: LD_VAR 0 5
49043: PPUSH
49044: CALL_OW 122
// end ; if sold_defenders then
49048: LD_VAR 0 17
49052: IFFALSE 49112
// if i in sold_defenders then
49054: LD_VAR 0 5
49058: PUSH
49059: LD_VAR 0 17
49063: IN
49064: IFFALSE 49112
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
49066: LD_VAR 0 5
49070: PPUSH
49071: CALL_OW 314
49075: NOT
49076: PUSH
49077: LD_VAR 0 5
49081: PPUSH
49082: LD_VAR 0 13
49086: PPUSH
49087: CALL_OW 296
49091: PUSH
49092: LD_INT 30
49094: LESS
49095: AND
49096: IFFALSE 49112
// ComAttackUnit ( i , e ) ;
49098: LD_VAR 0 5
49102: PPUSH
49103: LD_VAR 0 13
49107: PPUSH
49108: CALL_OW 115
// end ; end ; end ;
49112: GO 49115
49114: POP
// if IsDead ( i ) then
49115: LD_VAR 0 5
49119: PPUSH
49120: CALL_OW 301
49124: IFFALSE 49142
// defenders := defenders diff i ;
49126: LD_ADDR_VAR 0 2
49130: PUSH
49131: LD_VAR 0 2
49135: PUSH
49136: LD_VAR 0 5
49140: DIFF
49141: ST_TO_ADDR
// end ;
49142: GO 48458
49144: POP
49145: POP
// until not enemy or not defenders ;
49146: LD_VAR 0 3
49150: NOT
49151: PUSH
49152: LD_VAR 0 2
49156: NOT
49157: OR
49158: IFFALSE 48425
// MC_Reset ( base , 18 ) ;
49160: LD_VAR 0 1
49164: PPUSH
49165: LD_INT 18
49167: PPUSH
49168: CALL 20781 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49172: LD_ADDR_VAR 0 2
49176: PUSH
49177: LD_VAR 0 2
49181: PUSH
49182: LD_VAR 0 2
49186: PPUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 25
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 25
49202: PUSH
49203: LD_INT 5
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 25
49212: PUSH
49213: LD_INT 8
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 25
49222: PUSH
49223: LD_INT 9
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: PPUSH
49237: CALL_OW 72
49241: DIFF
49242: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
49243: LD_VAR 0 3
49247: NOT
49248: PUSH
49249: LD_VAR 0 2
49253: PPUSH
49254: LD_INT 21
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PPUSH
49264: CALL_OW 72
49268: AND
49269: IFFALSE 49531
// begin tmp := FilterByTag ( defenders , 19 ) ;
49271: LD_ADDR_VAR 0 11
49275: PUSH
49276: LD_VAR 0 2
49280: PPUSH
49281: LD_INT 19
49283: PPUSH
49284: CALL 85911 0 2
49288: ST_TO_ADDR
// if tmp then
49289: LD_VAR 0 11
49293: IFFALSE 49363
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
49295: LD_ADDR_VAR 0 11
49299: PUSH
49300: LD_VAR 0 11
49304: PPUSH
49305: LD_INT 25
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PPUSH
49315: CALL_OW 72
49319: ST_TO_ADDR
// if tmp then
49320: LD_VAR 0 11
49324: IFFALSE 49363
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
49326: LD_ADDR_EXP 61
49330: PUSH
49331: LD_EXP 61
49335: PPUSH
49336: LD_VAR 0 1
49340: PPUSH
49341: LD_EXP 61
49345: PUSH
49346: LD_VAR 0 1
49350: ARRAY
49351: PUSH
49352: LD_VAR 0 11
49356: UNION
49357: PPUSH
49358: CALL_OW 1
49362: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
49363: LD_VAR 0 1
49367: PPUSH
49368: LD_INT 19
49370: PPUSH
49371: CALL 20781 0 2
// repeat wait ( 0 0$1 ) ;
49375: LD_INT 35
49377: PPUSH
49378: CALL_OW 67
// for i in defenders do
49382: LD_ADDR_VAR 0 5
49386: PUSH
49387: LD_VAR 0 2
49391: PUSH
49392: FOR_IN
49393: IFFALSE 49482
// begin if not IsInArea ( i , mc_parking [ base ] ) then
49395: LD_VAR 0 5
49399: PPUSH
49400: LD_EXP 73
49404: PUSH
49405: LD_VAR 0 1
49409: ARRAY
49410: PPUSH
49411: CALL_OW 308
49415: NOT
49416: IFFALSE 49440
// ComMoveToArea ( i , mc_parking [ base ] ) else
49418: LD_VAR 0 5
49422: PPUSH
49423: LD_EXP 73
49427: PUSH
49428: LD_VAR 0 1
49432: ARRAY
49433: PPUSH
49434: CALL_OW 113
49438: GO 49480
// if GetControl ( i ) = control_manual then
49440: LD_VAR 0 5
49444: PPUSH
49445: CALL_OW 263
49449: PUSH
49450: LD_INT 1
49452: EQUAL
49453: IFFALSE 49480
// if IsDrivenBy ( i ) then
49455: LD_VAR 0 5
49459: PPUSH
49460: CALL_OW 311
49464: IFFALSE 49480
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
49466: LD_VAR 0 5
49470: PPUSH
49471: CALL_OW 311
49475: PPUSH
49476: CALL_OW 121
// end ;
49480: GO 49392
49482: POP
49483: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
49484: LD_VAR 0 2
49488: PPUSH
49489: LD_INT 95
49491: PUSH
49492: LD_EXP 73
49496: PUSH
49497: LD_VAR 0 1
49501: ARRAY
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PPUSH
49507: CALL_OW 72
49511: PUSH
49512: LD_VAR 0 2
49516: EQUAL
49517: PUSH
49518: LD_EXP 72
49522: PUSH
49523: LD_VAR 0 1
49527: ARRAY
49528: OR
49529: IFFALSE 49375
// end ; MC_Reset ( base , 20 ) ;
49531: LD_VAR 0 1
49535: PPUSH
49536: LD_INT 20
49538: PPUSH
49539: CALL 20781 0 2
// end ;
49543: LD_VAR 0 4
49547: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
49548: LD_INT 0
49550: PPUSH
49551: PPUSH
49552: PPUSH
49553: PPUSH
// result := false ;
49554: LD_ADDR_VAR 0 2
49558: PUSH
49559: LD_INT 0
49561: ST_TO_ADDR
// side := GetSide ( unit ) ;
49562: LD_ADDR_VAR 0 3
49566: PUSH
49567: LD_VAR 0 1
49571: PPUSH
49572: CALL_OW 255
49576: ST_TO_ADDR
// nat := GetNation ( unit ) ;
49577: LD_ADDR_VAR 0 4
49581: PUSH
49582: LD_VAR 0 1
49586: PPUSH
49587: CALL_OW 248
49591: ST_TO_ADDR
// case nat of 1 :
49592: LD_VAR 0 4
49596: PUSH
49597: LD_INT 1
49599: DOUBLE
49600: EQUAL
49601: IFTRUE 49605
49603: GO 49616
49605: POP
// tech := tech_lassight ; 2 :
49606: LD_ADDR_VAR 0 5
49610: PUSH
49611: LD_INT 12
49613: ST_TO_ADDR
49614: GO 49655
49616: LD_INT 2
49618: DOUBLE
49619: EQUAL
49620: IFTRUE 49624
49622: GO 49635
49624: POP
// tech := tech_mortar ; 3 :
49625: LD_ADDR_VAR 0 5
49629: PUSH
49630: LD_INT 41
49632: ST_TO_ADDR
49633: GO 49655
49635: LD_INT 3
49637: DOUBLE
49638: EQUAL
49639: IFTRUE 49643
49641: GO 49654
49643: POP
// tech := tech_bazooka ; end ;
49644: LD_ADDR_VAR 0 5
49648: PUSH
49649: LD_INT 44
49651: ST_TO_ADDR
49652: GO 49655
49654: POP
// if Researched ( side , tech ) then
49655: LD_VAR 0 3
49659: PPUSH
49660: LD_VAR 0 5
49664: PPUSH
49665: CALL_OW 325
49669: IFFALSE 49696
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
49671: LD_ADDR_VAR 0 2
49675: PUSH
49676: LD_INT 5
49678: PUSH
49679: LD_INT 8
49681: PUSH
49682: LD_INT 9
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: PUSH
49690: LD_VAR 0 4
49694: ARRAY
49695: ST_TO_ADDR
// end ;
49696: LD_VAR 0 2
49700: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
49701: LD_INT 0
49703: PPUSH
49704: PPUSH
49705: PPUSH
// if not mines then
49706: LD_VAR 0 2
49710: NOT
49711: IFFALSE 49715
// exit ;
49713: GO 49859
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49715: LD_ADDR_VAR 0 5
49719: PUSH
49720: LD_INT 81
49722: PUSH
49723: LD_VAR 0 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: LD_INT 21
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PPUSH
49753: CALL_OW 69
49757: ST_TO_ADDR
// for i in mines do
49758: LD_ADDR_VAR 0 4
49762: PUSH
49763: LD_VAR 0 2
49767: PUSH
49768: FOR_IN
49769: IFFALSE 49857
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
49771: LD_VAR 0 4
49775: PUSH
49776: LD_INT 1
49778: ARRAY
49779: PPUSH
49780: LD_VAR 0 4
49784: PUSH
49785: LD_INT 2
49787: ARRAY
49788: PPUSH
49789: CALL_OW 458
49793: NOT
49794: IFFALSE 49798
// continue ;
49796: GO 49768
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49798: LD_VAR 0 4
49802: PUSH
49803: LD_INT 1
49805: ARRAY
49806: PPUSH
49807: LD_VAR 0 4
49811: PUSH
49812: LD_INT 2
49814: ARRAY
49815: PPUSH
49816: CALL_OW 428
49820: PUSH
49821: LD_VAR 0 5
49825: IN
49826: IFFALSE 49855
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49828: LD_VAR 0 4
49832: PUSH
49833: LD_INT 1
49835: ARRAY
49836: PPUSH
49837: LD_VAR 0 4
49841: PUSH
49842: LD_INT 2
49844: ARRAY
49845: PPUSH
49846: LD_VAR 0 1
49850: PPUSH
49851: CALL_OW 456
// end ;
49855: GO 49768
49857: POP
49858: POP
// end ;
49859: LD_VAR 0 3
49863: RET
// export function Count ( array ) ; var i ; begin
49864: LD_INT 0
49866: PPUSH
49867: PPUSH
// result := 0 ;
49868: LD_ADDR_VAR 0 2
49872: PUSH
49873: LD_INT 0
49875: ST_TO_ADDR
// for i in array do
49876: LD_ADDR_VAR 0 3
49880: PUSH
49881: LD_VAR 0 1
49885: PUSH
49886: FOR_IN
49887: IFFALSE 49911
// if i then
49889: LD_VAR 0 3
49893: IFFALSE 49909
// result := result + 1 ;
49895: LD_ADDR_VAR 0 2
49899: PUSH
49900: LD_VAR 0 2
49904: PUSH
49905: LD_INT 1
49907: PLUS
49908: ST_TO_ADDR
49909: GO 49886
49911: POP
49912: POP
// end ;
49913: LD_VAR 0 2
49917: RET
// export function IsEmpty ( building ) ; begin
49918: LD_INT 0
49920: PPUSH
// if not building then
49921: LD_VAR 0 1
49925: NOT
49926: IFFALSE 49930
// exit ;
49928: GO 49973
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49930: LD_ADDR_VAR 0 2
49934: PUSH
49935: LD_VAR 0 1
49939: PUSH
49940: LD_INT 22
49942: PUSH
49943: LD_VAR 0 1
49947: PPUSH
49948: CALL_OW 255
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 58
49959: PUSH
49960: EMPTY
49961: LIST
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PPUSH
49967: CALL_OW 69
49971: IN
49972: ST_TO_ADDR
// end ;
49973: LD_VAR 0 2
49977: RET
// export function IsNotFull ( building ) ; begin
49978: LD_INT 0
49980: PPUSH
// if not building then
49981: LD_VAR 0 1
49985: NOT
49986: IFFALSE 49990
// exit ;
49988: GO 50009
// result := UnitsInside ( building ) < 6 ;
49990: LD_ADDR_VAR 0 2
49994: PUSH
49995: LD_VAR 0 1
49999: PPUSH
50000: CALL_OW 313
50004: PUSH
50005: LD_INT 6
50007: LESS
50008: ST_TO_ADDR
// end ;
50009: LD_VAR 0 2
50013: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
50014: LD_INT 0
50016: PPUSH
50017: PPUSH
50018: PPUSH
50019: PPUSH
// tmp := [ ] ;
50020: LD_ADDR_VAR 0 3
50024: PUSH
50025: EMPTY
50026: ST_TO_ADDR
// list := [ ] ;
50027: LD_ADDR_VAR 0 5
50031: PUSH
50032: EMPTY
50033: ST_TO_ADDR
// for i = 16 to 25 do
50034: LD_ADDR_VAR 0 4
50038: PUSH
50039: DOUBLE
50040: LD_INT 16
50042: DEC
50043: ST_TO_ADDR
50044: LD_INT 25
50046: PUSH
50047: FOR_TO
50048: IFFALSE 50121
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
50050: LD_ADDR_VAR 0 3
50054: PUSH
50055: LD_VAR 0 3
50059: PUSH
50060: LD_INT 22
50062: PUSH
50063: LD_VAR 0 1
50067: PPUSH
50068: CALL_OW 255
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 91
50079: PUSH
50080: LD_VAR 0 1
50084: PUSH
50085: LD_INT 6
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 30
50095: PUSH
50096: LD_VAR 0 4
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: PPUSH
50113: CALL_OW 69
50117: ADD
50118: ST_TO_ADDR
50119: GO 50047
50121: POP
50122: POP
// for i = 1 to tmp do
50123: LD_ADDR_VAR 0 4
50127: PUSH
50128: DOUBLE
50129: LD_INT 1
50131: DEC
50132: ST_TO_ADDR
50133: LD_VAR 0 3
50137: PUSH
50138: FOR_TO
50139: IFFALSE 50227
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
50141: LD_ADDR_VAR 0 5
50145: PUSH
50146: LD_VAR 0 5
50150: PUSH
50151: LD_VAR 0 3
50155: PUSH
50156: LD_VAR 0 4
50160: ARRAY
50161: PPUSH
50162: CALL_OW 266
50166: PUSH
50167: LD_VAR 0 3
50171: PUSH
50172: LD_VAR 0 4
50176: ARRAY
50177: PPUSH
50178: CALL_OW 250
50182: PUSH
50183: LD_VAR 0 3
50187: PUSH
50188: LD_VAR 0 4
50192: ARRAY
50193: PPUSH
50194: CALL_OW 251
50198: PUSH
50199: LD_VAR 0 3
50203: PUSH
50204: LD_VAR 0 4
50208: ARRAY
50209: PPUSH
50210: CALL_OW 254
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: PUSH
50221: EMPTY
50222: LIST
50223: ADD
50224: ST_TO_ADDR
50225: GO 50138
50227: POP
50228: POP
// result := list ;
50229: LD_ADDR_VAR 0 2
50233: PUSH
50234: LD_VAR 0 5
50238: ST_TO_ADDR
// end ;
50239: LD_VAR 0 2
50243: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
50244: LD_INT 0
50246: PPUSH
50247: PPUSH
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
50252: PPUSH
// if not factory then
50253: LD_VAR 0 1
50257: NOT
50258: IFFALSE 50262
// exit ;
50260: GO 50794
// if control = control_apeman then
50262: LD_VAR 0 4
50266: PUSH
50267: LD_INT 5
50269: EQUAL
50270: IFFALSE 50379
// begin tmp := UnitsInside ( factory ) ;
50272: LD_ADDR_VAR 0 8
50276: PUSH
50277: LD_VAR 0 1
50281: PPUSH
50282: CALL_OW 313
50286: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
50287: LD_VAR 0 8
50291: PPUSH
50292: LD_INT 25
50294: PUSH
50295: LD_INT 12
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PPUSH
50302: CALL_OW 72
50306: NOT
50307: IFFALSE 50317
// control := control_manual ;
50309: LD_ADDR_VAR 0 4
50313: PUSH
50314: LD_INT 1
50316: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
50317: LD_ADDR_VAR 0 8
50321: PUSH
50322: LD_VAR 0 1
50326: PPUSH
50327: CALL 50014 0 1
50331: ST_TO_ADDR
// if tmp then
50332: LD_VAR 0 8
50336: IFFALSE 50379
// begin for i in tmp do
50338: LD_ADDR_VAR 0 7
50342: PUSH
50343: LD_VAR 0 8
50347: PUSH
50348: FOR_IN
50349: IFFALSE 50377
// if i [ 1 ] = b_ext_radio then
50351: LD_VAR 0 7
50355: PUSH
50356: LD_INT 1
50358: ARRAY
50359: PUSH
50360: LD_INT 22
50362: EQUAL
50363: IFFALSE 50375
// begin control := control_remote ;
50365: LD_ADDR_VAR 0 4
50369: PUSH
50370: LD_INT 2
50372: ST_TO_ADDR
// break ;
50373: GO 50377
// end ;
50375: GO 50348
50377: POP
50378: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50379: LD_VAR 0 1
50383: PPUSH
50384: LD_VAR 0 2
50388: PPUSH
50389: LD_VAR 0 3
50393: PPUSH
50394: LD_VAR 0 4
50398: PPUSH
50399: LD_VAR 0 5
50403: PPUSH
50404: CALL_OW 448
50408: IFFALSE 50443
// begin result := [ chassis , engine , control , weapon ] ;
50410: LD_ADDR_VAR 0 6
50414: PUSH
50415: LD_VAR 0 2
50419: PUSH
50420: LD_VAR 0 3
50424: PUSH
50425: LD_VAR 0 4
50429: PUSH
50430: LD_VAR 0 5
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// exit ;
50441: GO 50794
// end ; _chassis := AvailableChassisList ( factory ) ;
50443: LD_ADDR_VAR 0 9
50447: PUSH
50448: LD_VAR 0 1
50452: PPUSH
50453: CALL_OW 475
50457: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
50458: LD_ADDR_VAR 0 11
50462: PUSH
50463: LD_VAR 0 1
50467: PPUSH
50468: CALL_OW 476
50472: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
50473: LD_ADDR_VAR 0 12
50477: PUSH
50478: LD_VAR 0 1
50482: PPUSH
50483: CALL_OW 477
50487: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
50488: LD_ADDR_VAR 0 10
50492: PUSH
50493: LD_VAR 0 1
50497: PPUSH
50498: CALL_OW 478
50502: ST_TO_ADDR
// if not chassis in _chassis then
50503: LD_VAR 0 2
50507: PUSH
50508: LD_VAR 0 9
50512: IN
50513: NOT
50514: IFFALSE 50540
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
50516: LD_ADDR_VAR 0 2
50520: PUSH
50521: LD_VAR 0 9
50525: PUSH
50526: LD_INT 1
50528: PPUSH
50529: LD_VAR 0 9
50533: PPUSH
50534: CALL_OW 12
50538: ARRAY
50539: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
50540: LD_VAR 0 2
50544: PPUSH
50545: LD_VAR 0 3
50549: PPUSH
50550: CALL 50799 0 2
50554: NOT
50555: IFFALSE 50614
// repeat engine := _engine [ 1 ] ;
50557: LD_ADDR_VAR 0 3
50561: PUSH
50562: LD_VAR 0 11
50566: PUSH
50567: LD_INT 1
50569: ARRAY
50570: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
50571: LD_ADDR_VAR 0 11
50575: PUSH
50576: LD_VAR 0 11
50580: PPUSH
50581: LD_INT 1
50583: PPUSH
50584: CALL_OW 3
50588: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
50589: LD_VAR 0 2
50593: PPUSH
50594: LD_VAR 0 3
50598: PPUSH
50599: CALL 50799 0 2
50603: PUSH
50604: LD_VAR 0 11
50608: PUSH
50609: EMPTY
50610: EQUAL
50611: OR
50612: IFFALSE 50557
// if not control in _control then
50614: LD_VAR 0 4
50618: PUSH
50619: LD_VAR 0 12
50623: IN
50624: NOT
50625: IFFALSE 50651
// control := _control [ rand ( 1 , _control ) ] ;
50627: LD_ADDR_VAR 0 4
50631: PUSH
50632: LD_VAR 0 12
50636: PUSH
50637: LD_INT 1
50639: PPUSH
50640: LD_VAR 0 12
50644: PPUSH
50645: CALL_OW 12
50649: ARRAY
50650: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
50651: LD_VAR 0 2
50655: PPUSH
50656: LD_VAR 0 5
50660: PPUSH
50661: CALL 51019 0 2
50665: NOT
50666: IFFALSE 50725
// repeat weapon := _weapon [ 1 ] ;
50668: LD_ADDR_VAR 0 5
50672: PUSH
50673: LD_VAR 0 10
50677: PUSH
50678: LD_INT 1
50680: ARRAY
50681: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
50682: LD_ADDR_VAR 0 10
50686: PUSH
50687: LD_VAR 0 10
50691: PPUSH
50692: LD_INT 1
50694: PPUSH
50695: CALL_OW 3
50699: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
50700: LD_VAR 0 2
50704: PPUSH
50705: LD_VAR 0 5
50709: PPUSH
50710: CALL 51019 0 2
50714: PUSH
50715: LD_VAR 0 10
50719: PUSH
50720: EMPTY
50721: EQUAL
50722: OR
50723: IFFALSE 50668
// result := [ ] ;
50725: LD_ADDR_VAR 0 6
50729: PUSH
50730: EMPTY
50731: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50732: LD_VAR 0 1
50736: PPUSH
50737: LD_VAR 0 2
50741: PPUSH
50742: LD_VAR 0 3
50746: PPUSH
50747: LD_VAR 0 4
50751: PPUSH
50752: LD_VAR 0 5
50756: PPUSH
50757: CALL_OW 448
50761: IFFALSE 50794
// result := [ chassis , engine , control , weapon ] ;
50763: LD_ADDR_VAR 0 6
50767: PUSH
50768: LD_VAR 0 2
50772: PUSH
50773: LD_VAR 0 3
50777: PUSH
50778: LD_VAR 0 4
50782: PUSH
50783: LD_VAR 0 5
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// end ;
50794: LD_VAR 0 6
50798: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50799: LD_INT 0
50801: PPUSH
// if not chassis or not engine then
50802: LD_VAR 0 1
50806: NOT
50807: PUSH
50808: LD_VAR 0 2
50812: NOT
50813: OR
50814: IFFALSE 50818
// exit ;
50816: GO 51014
// case engine of engine_solar :
50818: LD_VAR 0 2
50822: PUSH
50823: LD_INT 2
50825: DOUBLE
50826: EQUAL
50827: IFTRUE 50831
50829: GO 50869
50831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50832: LD_ADDR_VAR 0 3
50836: PUSH
50837: LD_INT 11
50839: PUSH
50840: LD_INT 12
50842: PUSH
50843: LD_INT 13
50845: PUSH
50846: LD_INT 14
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
50867: GO 50998
50869: LD_INT 1
50871: DOUBLE
50872: EQUAL
50873: IFTRUE 50877
50875: GO 50939
50877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50878: LD_ADDR_VAR 0 3
50882: PUSH
50883: LD_INT 11
50885: PUSH
50886: LD_INT 12
50888: PUSH
50889: LD_INT 13
50891: PUSH
50892: LD_INT 14
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: LD_INT 3
50903: PUSH
50904: LD_INT 4
50906: PUSH
50907: LD_INT 5
50909: PUSH
50910: LD_INT 21
50912: PUSH
50913: LD_INT 23
50915: PUSH
50916: LD_INT 22
50918: PUSH
50919: LD_INT 24
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
50937: GO 50998
50939: LD_INT 3
50941: DOUBLE
50942: EQUAL
50943: IFTRUE 50947
50945: GO 50997
50947: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50948: LD_ADDR_VAR 0 3
50952: PUSH
50953: LD_INT 13
50955: PUSH
50956: LD_INT 14
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 3
50964: PUSH
50965: LD_INT 4
50967: PUSH
50968: LD_INT 5
50970: PUSH
50971: LD_INT 21
50973: PUSH
50974: LD_INT 22
50976: PUSH
50977: LD_INT 23
50979: PUSH
50980: LD_INT 24
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: ST_TO_ADDR
50995: GO 50998
50997: POP
// result := ( chassis in result ) ;
50998: LD_ADDR_VAR 0 3
51002: PUSH
51003: LD_VAR 0 1
51007: PUSH
51008: LD_VAR 0 3
51012: IN
51013: ST_TO_ADDR
// end ;
51014: LD_VAR 0 3
51018: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
51019: LD_INT 0
51021: PPUSH
// if not chassis or not weapon then
51022: LD_VAR 0 1
51026: NOT
51027: PUSH
51028: LD_VAR 0 2
51032: NOT
51033: OR
51034: IFFALSE 51038
// exit ;
51036: GO 52064
// case weapon of us_machine_gun :
51038: LD_VAR 0 2
51042: PUSH
51043: LD_INT 2
51045: DOUBLE
51046: EQUAL
51047: IFTRUE 51051
51049: GO 51081
51051: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
51052: LD_ADDR_VAR 0 3
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 4
51068: PUSH
51069: LD_INT 5
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
51079: GO 52048
51081: LD_INT 3
51083: DOUBLE
51084: EQUAL
51085: IFTRUE 51089
51087: GO 51119
51089: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
51090: LD_ADDR_VAR 0 3
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: LD_INT 4
51106: PUSH
51107: LD_INT 5
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
51117: GO 52048
51119: LD_INT 11
51121: DOUBLE
51122: EQUAL
51123: IFTRUE 51127
51125: GO 51157
51127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
51128: LD_ADDR_VAR 0 3
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: LD_INT 4
51144: PUSH
51145: LD_INT 5
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: ST_TO_ADDR
51155: GO 52048
51157: LD_INT 4
51159: DOUBLE
51160: EQUAL
51161: IFTRUE 51165
51163: GO 51191
51165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
51166: LD_ADDR_VAR 0 3
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 4
51179: PUSH
51180: LD_INT 5
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
51189: GO 52048
51191: LD_INT 5
51193: DOUBLE
51194: EQUAL
51195: IFTRUE 51199
51197: GO 51225
51199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
51200: LD_ADDR_VAR 0 3
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: LD_INT 4
51213: PUSH
51214: LD_INT 5
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
51223: GO 52048
51225: LD_INT 9
51227: DOUBLE
51228: EQUAL
51229: IFTRUE 51233
51231: GO 51259
51233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
51234: LD_ADDR_VAR 0 3
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: LD_INT 4
51247: PUSH
51248: LD_INT 5
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
51257: GO 52048
51259: LD_INT 7
51261: DOUBLE
51262: EQUAL
51263: IFTRUE 51267
51265: GO 51293
51267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
51268: LD_ADDR_VAR 0 3
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: LD_INT 4
51281: PUSH
51282: LD_INT 5
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: ST_TO_ADDR
51291: GO 52048
51293: LD_INT 12
51295: DOUBLE
51296: EQUAL
51297: IFTRUE 51301
51299: GO 51327
51301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
51302: LD_ADDR_VAR 0 3
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: LD_INT 4
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: ST_TO_ADDR
51325: GO 52048
51327: LD_INT 13
51329: DOUBLE
51330: EQUAL
51331: IFTRUE 51335
51333: GO 51361
51335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
51336: LD_ADDR_VAR 0 3
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: LD_INT 3
51346: PUSH
51347: LD_INT 4
51349: PUSH
51350: LD_INT 5
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
51359: GO 52048
51361: LD_INT 14
51363: DOUBLE
51364: EQUAL
51365: IFTRUE 51369
51367: GO 51387
51369: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
51370: LD_ADDR_VAR 0 3
51374: PUSH
51375: LD_INT 4
51377: PUSH
51378: LD_INT 5
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: ST_TO_ADDR
51385: GO 52048
51387: LD_INT 6
51389: DOUBLE
51390: EQUAL
51391: IFTRUE 51395
51393: GO 51413
51395: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
51396: LD_ADDR_VAR 0 3
51400: PUSH
51401: LD_INT 4
51403: PUSH
51404: LD_INT 5
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: ST_TO_ADDR
51411: GO 52048
51413: LD_INT 10
51415: DOUBLE
51416: EQUAL
51417: IFTRUE 51421
51419: GO 51439
51421: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 4
51429: PUSH
51430: LD_INT 5
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: ST_TO_ADDR
51437: GO 52048
51439: LD_INT 22
51441: DOUBLE
51442: EQUAL
51443: IFTRUE 51447
51445: GO 51473
51447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
51448: LD_ADDR_VAR 0 3
51452: PUSH
51453: LD_INT 11
51455: PUSH
51456: LD_INT 12
51458: PUSH
51459: LD_INT 13
51461: PUSH
51462: LD_INT 14
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
51471: GO 52048
51473: LD_INT 23
51475: DOUBLE
51476: EQUAL
51477: IFTRUE 51481
51479: GO 51507
51481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
51482: LD_ADDR_VAR 0 3
51486: PUSH
51487: LD_INT 11
51489: PUSH
51490: LD_INT 12
51492: PUSH
51493: LD_INT 13
51495: PUSH
51496: LD_INT 14
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
51505: GO 52048
51507: LD_INT 24
51509: DOUBLE
51510: EQUAL
51511: IFTRUE 51515
51513: GO 51541
51515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
51516: LD_ADDR_VAR 0 3
51520: PUSH
51521: LD_INT 11
51523: PUSH
51524: LD_INT 12
51526: PUSH
51527: LD_INT 13
51529: PUSH
51530: LD_INT 14
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
51539: GO 52048
51541: LD_INT 30
51543: DOUBLE
51544: EQUAL
51545: IFTRUE 51549
51547: GO 51575
51549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
51550: LD_ADDR_VAR 0 3
51554: PUSH
51555: LD_INT 11
51557: PUSH
51558: LD_INT 12
51560: PUSH
51561: LD_INT 13
51563: PUSH
51564: LD_INT 14
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
51573: GO 52048
51575: LD_INT 25
51577: DOUBLE
51578: EQUAL
51579: IFTRUE 51583
51581: GO 51601
51583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
51584: LD_ADDR_VAR 0 3
51588: PUSH
51589: LD_INT 13
51591: PUSH
51592: LD_INT 14
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: ST_TO_ADDR
51599: GO 52048
51601: LD_INT 27
51603: DOUBLE
51604: EQUAL
51605: IFTRUE 51609
51607: GO 51627
51609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
51610: LD_ADDR_VAR 0 3
51614: PUSH
51615: LD_INT 13
51617: PUSH
51618: LD_INT 14
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: ST_TO_ADDR
51625: GO 52048
51627: LD_INT 28
51629: DOUBLE
51630: EQUAL
51631: IFTRUE 51635
51633: GO 51653
51635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
51636: LD_ADDR_VAR 0 3
51640: PUSH
51641: LD_INT 13
51643: PUSH
51644: LD_INT 14
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: ST_TO_ADDR
51651: GO 52048
51653: LD_INT 29
51655: DOUBLE
51656: EQUAL
51657: IFTRUE 51661
51659: GO 51679
51661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
51662: LD_ADDR_VAR 0 3
51666: PUSH
51667: LD_INT 13
51669: PUSH
51670: LD_INT 14
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: ST_TO_ADDR
51677: GO 52048
51679: LD_INT 31
51681: DOUBLE
51682: EQUAL
51683: IFTRUE 51687
51685: GO 51705
51687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
51688: LD_ADDR_VAR 0 3
51692: PUSH
51693: LD_INT 13
51695: PUSH
51696: LD_INT 14
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: ST_TO_ADDR
51703: GO 52048
51705: LD_INT 26
51707: DOUBLE
51708: EQUAL
51709: IFTRUE 51713
51711: GO 51731
51713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
51714: LD_ADDR_VAR 0 3
51718: PUSH
51719: LD_INT 13
51721: PUSH
51722: LD_INT 14
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: ST_TO_ADDR
51729: GO 52048
51731: LD_INT 42
51733: DOUBLE
51734: EQUAL
51735: IFTRUE 51739
51737: GO 51765
51739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_INT 21
51747: PUSH
51748: LD_INT 22
51750: PUSH
51751: LD_INT 23
51753: PUSH
51754: LD_INT 24
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: ST_TO_ADDR
51763: GO 52048
51765: LD_INT 43
51767: DOUBLE
51768: EQUAL
51769: IFTRUE 51773
51771: GO 51799
51773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51774: LD_ADDR_VAR 0 3
51778: PUSH
51779: LD_INT 21
51781: PUSH
51782: LD_INT 22
51784: PUSH
51785: LD_INT 23
51787: PUSH
51788: LD_INT 24
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
51797: GO 52048
51799: LD_INT 44
51801: DOUBLE
51802: EQUAL
51803: IFTRUE 51807
51805: GO 51833
51807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51808: LD_ADDR_VAR 0 3
51812: PUSH
51813: LD_INT 21
51815: PUSH
51816: LD_INT 22
51818: PUSH
51819: LD_INT 23
51821: PUSH
51822: LD_INT 24
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
51831: GO 52048
51833: LD_INT 45
51835: DOUBLE
51836: EQUAL
51837: IFTRUE 51841
51839: GO 51867
51841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51842: LD_ADDR_VAR 0 3
51846: PUSH
51847: LD_INT 21
51849: PUSH
51850: LD_INT 22
51852: PUSH
51853: LD_INT 23
51855: PUSH
51856: LD_INT 24
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
51865: GO 52048
51867: LD_INT 49
51869: DOUBLE
51870: EQUAL
51871: IFTRUE 51875
51873: GO 51901
51875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51876: LD_ADDR_VAR 0 3
51880: PUSH
51881: LD_INT 21
51883: PUSH
51884: LD_INT 22
51886: PUSH
51887: LD_INT 23
51889: PUSH
51890: LD_INT 24
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: ST_TO_ADDR
51899: GO 52048
51901: LD_INT 51
51903: DOUBLE
51904: EQUAL
51905: IFTRUE 51909
51907: GO 51935
51909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51910: LD_ADDR_VAR 0 3
51914: PUSH
51915: LD_INT 21
51917: PUSH
51918: LD_INT 22
51920: PUSH
51921: LD_INT 23
51923: PUSH
51924: LD_INT 24
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: ST_TO_ADDR
51933: GO 52048
51935: LD_INT 52
51937: DOUBLE
51938: EQUAL
51939: IFTRUE 51943
51941: GO 51969
51943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51944: LD_ADDR_VAR 0 3
51948: PUSH
51949: LD_INT 21
51951: PUSH
51952: LD_INT 22
51954: PUSH
51955: LD_INT 23
51957: PUSH
51958: LD_INT 24
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
51967: GO 52048
51969: LD_INT 53
51971: DOUBLE
51972: EQUAL
51973: IFTRUE 51977
51975: GO 51995
51977: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51978: LD_ADDR_VAR 0 3
51982: PUSH
51983: LD_INT 23
51985: PUSH
51986: LD_INT 24
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: ST_TO_ADDR
51993: GO 52048
51995: LD_INT 46
51997: DOUBLE
51998: EQUAL
51999: IFTRUE 52003
52001: GO 52021
52003: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
52004: LD_ADDR_VAR 0 3
52008: PUSH
52009: LD_INT 23
52011: PUSH
52012: LD_INT 24
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: ST_TO_ADDR
52019: GO 52048
52021: LD_INT 47
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52029
52027: GO 52047
52029: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52030: LD_ADDR_VAR 0 3
52034: PUSH
52035: LD_INT 23
52037: PUSH
52038: LD_INT 24
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: ST_TO_ADDR
52045: GO 52048
52047: POP
// result := ( chassis in result ) ;
52048: LD_ADDR_VAR 0 3
52052: PUSH
52053: LD_VAR 0 1
52057: PUSH
52058: LD_VAR 0 3
52062: IN
52063: ST_TO_ADDR
// end ;
52064: LD_VAR 0 3
52068: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
52069: LD_INT 0
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
// result := array ;
52078: LD_ADDR_VAR 0 5
52082: PUSH
52083: LD_VAR 0 1
52087: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
52088: LD_VAR 0 1
52092: NOT
52093: PUSH
52094: LD_VAR 0 2
52098: NOT
52099: OR
52100: PUSH
52101: LD_VAR 0 3
52105: NOT
52106: OR
52107: PUSH
52108: LD_VAR 0 2
52112: PUSH
52113: LD_VAR 0 1
52117: GREATER
52118: OR
52119: PUSH
52120: LD_VAR 0 3
52124: PUSH
52125: LD_VAR 0 1
52129: GREATER
52130: OR
52131: IFFALSE 52135
// exit ;
52133: GO 52431
// if direction then
52135: LD_VAR 0 4
52139: IFFALSE 52203
// begin d := 1 ;
52141: LD_ADDR_VAR 0 9
52145: PUSH
52146: LD_INT 1
52148: ST_TO_ADDR
// if i_from > i_to then
52149: LD_VAR 0 2
52153: PUSH
52154: LD_VAR 0 3
52158: GREATER
52159: IFFALSE 52185
// length := ( array - i_from ) + i_to else
52161: LD_ADDR_VAR 0 11
52165: PUSH
52166: LD_VAR 0 1
52170: PUSH
52171: LD_VAR 0 2
52175: MINUS
52176: PUSH
52177: LD_VAR 0 3
52181: PLUS
52182: ST_TO_ADDR
52183: GO 52201
// length := i_to - i_from ;
52185: LD_ADDR_VAR 0 11
52189: PUSH
52190: LD_VAR 0 3
52194: PUSH
52195: LD_VAR 0 2
52199: MINUS
52200: ST_TO_ADDR
// end else
52201: GO 52264
// begin d := - 1 ;
52203: LD_ADDR_VAR 0 9
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: ST_TO_ADDR
// if i_from > i_to then
52212: LD_VAR 0 2
52216: PUSH
52217: LD_VAR 0 3
52221: GREATER
52222: IFFALSE 52242
// length := i_from - i_to else
52224: LD_ADDR_VAR 0 11
52228: PUSH
52229: LD_VAR 0 2
52233: PUSH
52234: LD_VAR 0 3
52238: MINUS
52239: ST_TO_ADDR
52240: GO 52264
// length := ( array - i_to ) + i_from ;
52242: LD_ADDR_VAR 0 11
52246: PUSH
52247: LD_VAR 0 1
52251: PUSH
52252: LD_VAR 0 3
52256: MINUS
52257: PUSH
52258: LD_VAR 0 2
52262: PLUS
52263: ST_TO_ADDR
// end ; if not length then
52264: LD_VAR 0 11
52268: NOT
52269: IFFALSE 52273
// exit ;
52271: GO 52431
// tmp := array ;
52273: LD_ADDR_VAR 0 10
52277: PUSH
52278: LD_VAR 0 1
52282: ST_TO_ADDR
// for i = 1 to length do
52283: LD_ADDR_VAR 0 6
52287: PUSH
52288: DOUBLE
52289: LD_INT 1
52291: DEC
52292: ST_TO_ADDR
52293: LD_VAR 0 11
52297: PUSH
52298: FOR_TO
52299: IFFALSE 52419
// begin for j = 1 to array do
52301: LD_ADDR_VAR 0 7
52305: PUSH
52306: DOUBLE
52307: LD_INT 1
52309: DEC
52310: ST_TO_ADDR
52311: LD_VAR 0 1
52315: PUSH
52316: FOR_TO
52317: IFFALSE 52405
// begin k := j + d ;
52319: LD_ADDR_VAR 0 8
52323: PUSH
52324: LD_VAR 0 7
52328: PUSH
52329: LD_VAR 0 9
52333: PLUS
52334: ST_TO_ADDR
// if k > array then
52335: LD_VAR 0 8
52339: PUSH
52340: LD_VAR 0 1
52344: GREATER
52345: IFFALSE 52355
// k := 1 ;
52347: LD_ADDR_VAR 0 8
52351: PUSH
52352: LD_INT 1
52354: ST_TO_ADDR
// if not k then
52355: LD_VAR 0 8
52359: NOT
52360: IFFALSE 52372
// k := array ;
52362: LD_ADDR_VAR 0 8
52366: PUSH
52367: LD_VAR 0 1
52371: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
52372: LD_ADDR_VAR 0 10
52376: PUSH
52377: LD_VAR 0 10
52381: PPUSH
52382: LD_VAR 0 8
52386: PPUSH
52387: LD_VAR 0 1
52391: PUSH
52392: LD_VAR 0 7
52396: ARRAY
52397: PPUSH
52398: CALL_OW 1
52402: ST_TO_ADDR
// end ;
52403: GO 52316
52405: POP
52406: POP
// array := tmp ;
52407: LD_ADDR_VAR 0 1
52411: PUSH
52412: LD_VAR 0 10
52416: ST_TO_ADDR
// end ;
52417: GO 52298
52419: POP
52420: POP
// result := array ;
52421: LD_ADDR_VAR 0 5
52425: PUSH
52426: LD_VAR 0 1
52430: ST_TO_ADDR
// end ;
52431: LD_VAR 0 5
52435: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
52436: LD_INT 0
52438: PPUSH
52439: PPUSH
// result := 0 ;
52440: LD_ADDR_VAR 0 3
52444: PUSH
52445: LD_INT 0
52447: ST_TO_ADDR
// if not array or not value in array then
52448: LD_VAR 0 1
52452: NOT
52453: PUSH
52454: LD_VAR 0 2
52458: PUSH
52459: LD_VAR 0 1
52463: IN
52464: NOT
52465: OR
52466: IFFALSE 52470
// exit ;
52468: GO 52524
// for i = 1 to array do
52470: LD_ADDR_VAR 0 4
52474: PUSH
52475: DOUBLE
52476: LD_INT 1
52478: DEC
52479: ST_TO_ADDR
52480: LD_VAR 0 1
52484: PUSH
52485: FOR_TO
52486: IFFALSE 52522
// if value = array [ i ] then
52488: LD_VAR 0 2
52492: PUSH
52493: LD_VAR 0 1
52497: PUSH
52498: LD_VAR 0 4
52502: ARRAY
52503: EQUAL
52504: IFFALSE 52520
// begin result := i ;
52506: LD_ADDR_VAR 0 3
52510: PUSH
52511: LD_VAR 0 4
52515: ST_TO_ADDR
// exit ;
52516: POP
52517: POP
52518: GO 52524
// end ;
52520: GO 52485
52522: POP
52523: POP
// end ;
52524: LD_VAR 0 3
52528: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
52529: LD_INT 0
52531: PPUSH
// vc_chassis := chassis ;
52532: LD_ADDR_OWVAR 37
52536: PUSH
52537: LD_VAR 0 1
52541: ST_TO_ADDR
// vc_engine := engine ;
52542: LD_ADDR_OWVAR 39
52546: PUSH
52547: LD_VAR 0 2
52551: ST_TO_ADDR
// vc_control := control ;
52552: LD_ADDR_OWVAR 38
52556: PUSH
52557: LD_VAR 0 3
52561: ST_TO_ADDR
// vc_weapon := weapon ;
52562: LD_ADDR_OWVAR 40
52566: PUSH
52567: LD_VAR 0 4
52571: ST_TO_ADDR
// vc_fuel_battery := fuel ;
52572: LD_ADDR_OWVAR 41
52576: PUSH
52577: LD_VAR 0 5
52581: ST_TO_ADDR
// end ;
52582: LD_VAR 0 6
52586: RET
// export function WantPlant ( unit ) ; var task ; begin
52587: LD_INT 0
52589: PPUSH
52590: PPUSH
// result := false ;
52591: LD_ADDR_VAR 0 2
52595: PUSH
52596: LD_INT 0
52598: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
52599: LD_ADDR_VAR 0 3
52603: PUSH
52604: LD_VAR 0 1
52608: PPUSH
52609: CALL_OW 437
52613: ST_TO_ADDR
// if task then
52614: LD_VAR 0 3
52618: IFFALSE 52646
// if task [ 1 ] [ 1 ] = p then
52620: LD_VAR 0 3
52624: PUSH
52625: LD_INT 1
52627: ARRAY
52628: PUSH
52629: LD_INT 1
52631: ARRAY
52632: PUSH
52633: LD_STRING p
52635: EQUAL
52636: IFFALSE 52646
// result := true ;
52638: LD_ADDR_VAR 0 2
52642: PUSH
52643: LD_INT 1
52645: ST_TO_ADDR
// end ;
52646: LD_VAR 0 2
52650: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
52651: LD_INT 0
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
// if pos < 1 then
52657: LD_VAR 0 2
52661: PUSH
52662: LD_INT 1
52664: LESS
52665: IFFALSE 52669
// exit ;
52667: GO 52972
// if pos = 1 then
52669: LD_VAR 0 2
52673: PUSH
52674: LD_INT 1
52676: EQUAL
52677: IFFALSE 52710
// result := Replace ( arr , pos [ 1 ] , value ) else
52679: LD_ADDR_VAR 0 4
52683: PUSH
52684: LD_VAR 0 1
52688: PPUSH
52689: LD_VAR 0 2
52693: PUSH
52694: LD_INT 1
52696: ARRAY
52697: PPUSH
52698: LD_VAR 0 3
52702: PPUSH
52703: CALL_OW 1
52707: ST_TO_ADDR
52708: GO 52972
// begin tmp := arr ;
52710: LD_ADDR_VAR 0 6
52714: PUSH
52715: LD_VAR 0 1
52719: ST_TO_ADDR
// s_arr := [ tmp ] ;
52720: LD_ADDR_VAR 0 7
52724: PUSH
52725: LD_VAR 0 6
52729: PUSH
52730: EMPTY
52731: LIST
52732: ST_TO_ADDR
// for i = 1 to pos - 1 do
52733: LD_ADDR_VAR 0 5
52737: PUSH
52738: DOUBLE
52739: LD_INT 1
52741: DEC
52742: ST_TO_ADDR
52743: LD_VAR 0 2
52747: PUSH
52748: LD_INT 1
52750: MINUS
52751: PUSH
52752: FOR_TO
52753: IFFALSE 52798
// begin tmp := tmp [ pos [ i ] ] ;
52755: LD_ADDR_VAR 0 6
52759: PUSH
52760: LD_VAR 0 6
52764: PUSH
52765: LD_VAR 0 2
52769: PUSH
52770: LD_VAR 0 5
52774: ARRAY
52775: ARRAY
52776: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52777: LD_ADDR_VAR 0 7
52781: PUSH
52782: LD_VAR 0 7
52786: PUSH
52787: LD_VAR 0 6
52791: PUSH
52792: EMPTY
52793: LIST
52794: ADD
52795: ST_TO_ADDR
// end ;
52796: GO 52752
52798: POP
52799: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52800: LD_ADDR_VAR 0 6
52804: PUSH
52805: LD_VAR 0 6
52809: PPUSH
52810: LD_VAR 0 2
52814: PUSH
52815: LD_VAR 0 2
52819: ARRAY
52820: PPUSH
52821: LD_VAR 0 3
52825: PPUSH
52826: CALL_OW 1
52830: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52831: LD_ADDR_VAR 0 7
52835: PUSH
52836: LD_VAR 0 7
52840: PPUSH
52841: LD_VAR 0 7
52845: PPUSH
52846: LD_VAR 0 6
52850: PPUSH
52851: CALL_OW 1
52855: ST_TO_ADDR
// for i = s_arr downto 2 do
52856: LD_ADDR_VAR 0 5
52860: PUSH
52861: DOUBLE
52862: LD_VAR 0 7
52866: INC
52867: ST_TO_ADDR
52868: LD_INT 2
52870: PUSH
52871: FOR_DOWNTO
52872: IFFALSE 52956
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52874: LD_ADDR_VAR 0 6
52878: PUSH
52879: LD_VAR 0 7
52883: PUSH
52884: LD_VAR 0 5
52888: PUSH
52889: LD_INT 1
52891: MINUS
52892: ARRAY
52893: PPUSH
52894: LD_VAR 0 2
52898: PUSH
52899: LD_VAR 0 5
52903: PUSH
52904: LD_INT 1
52906: MINUS
52907: ARRAY
52908: PPUSH
52909: LD_VAR 0 7
52913: PUSH
52914: LD_VAR 0 5
52918: ARRAY
52919: PPUSH
52920: CALL_OW 1
52924: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52925: LD_ADDR_VAR 0 7
52929: PUSH
52930: LD_VAR 0 7
52934: PPUSH
52935: LD_VAR 0 5
52939: PUSH
52940: LD_INT 1
52942: MINUS
52943: PPUSH
52944: LD_VAR 0 6
52948: PPUSH
52949: CALL_OW 1
52953: ST_TO_ADDR
// end ;
52954: GO 52871
52956: POP
52957: POP
// result := s_arr [ 1 ] ;
52958: LD_ADDR_VAR 0 4
52962: PUSH
52963: LD_VAR 0 7
52967: PUSH
52968: LD_INT 1
52970: ARRAY
52971: ST_TO_ADDR
// end ; end ;
52972: LD_VAR 0 4
52976: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52977: LD_INT 0
52979: PPUSH
52980: PPUSH
// if not list then
52981: LD_VAR 0 1
52985: NOT
52986: IFFALSE 52990
// exit ;
52988: GO 53081
// i := list [ pos1 ] ;
52990: LD_ADDR_VAR 0 5
52994: PUSH
52995: LD_VAR 0 1
52999: PUSH
53000: LD_VAR 0 2
53004: ARRAY
53005: ST_TO_ADDR
// if not i then
53006: LD_VAR 0 5
53010: NOT
53011: IFFALSE 53015
// exit ;
53013: GO 53081
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
53015: LD_ADDR_VAR 0 1
53019: PUSH
53020: LD_VAR 0 1
53024: PPUSH
53025: LD_VAR 0 2
53029: PPUSH
53030: LD_VAR 0 1
53034: PUSH
53035: LD_VAR 0 3
53039: ARRAY
53040: PPUSH
53041: CALL_OW 1
53045: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
53046: LD_ADDR_VAR 0 1
53050: PUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: LD_VAR 0 3
53060: PPUSH
53061: LD_VAR 0 5
53065: PPUSH
53066: CALL_OW 1
53070: ST_TO_ADDR
// result := list ;
53071: LD_ADDR_VAR 0 4
53075: PUSH
53076: LD_VAR 0 1
53080: ST_TO_ADDR
// end ;
53081: LD_VAR 0 4
53085: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
53086: LD_INT 0
53088: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
53089: LD_ADDR_VAR 0 5
53093: PUSH
53094: LD_VAR 0 1
53098: PPUSH
53099: CALL_OW 250
53103: PPUSH
53104: LD_VAR 0 1
53108: PPUSH
53109: CALL_OW 251
53113: PPUSH
53114: LD_VAR 0 2
53118: PPUSH
53119: LD_VAR 0 3
53123: PPUSH
53124: LD_VAR 0 4
53128: PPUSH
53129: CALL 53139 0 5
53133: ST_TO_ADDR
// end ;
53134: LD_VAR 0 5
53138: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
53139: LD_INT 0
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
// if not list then
53145: LD_VAR 0 3
53149: NOT
53150: IFFALSE 53154
// exit ;
53152: GO 53542
// result := [ ] ;
53154: LD_ADDR_VAR 0 6
53158: PUSH
53159: EMPTY
53160: ST_TO_ADDR
// for i in list do
53161: LD_ADDR_VAR 0 7
53165: PUSH
53166: LD_VAR 0 3
53170: PUSH
53171: FOR_IN
53172: IFFALSE 53374
// begin tmp := GetDistUnitXY ( i , x , y ) ;
53174: LD_ADDR_VAR 0 9
53178: PUSH
53179: LD_VAR 0 7
53183: PPUSH
53184: LD_VAR 0 1
53188: PPUSH
53189: LD_VAR 0 2
53193: PPUSH
53194: CALL_OW 297
53198: ST_TO_ADDR
// if not result then
53199: LD_VAR 0 6
53203: NOT
53204: IFFALSE 53230
// result := [ [ i , tmp ] ] else
53206: LD_ADDR_VAR 0 6
53210: PUSH
53211: LD_VAR 0 7
53215: PUSH
53216: LD_VAR 0 9
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: ST_TO_ADDR
53228: GO 53372
// begin if result [ result ] [ 2 ] < tmp then
53230: LD_VAR 0 6
53234: PUSH
53235: LD_VAR 0 6
53239: ARRAY
53240: PUSH
53241: LD_INT 2
53243: ARRAY
53244: PUSH
53245: LD_VAR 0 9
53249: LESS
53250: IFFALSE 53292
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
53252: LD_ADDR_VAR 0 6
53256: PUSH
53257: LD_VAR 0 6
53261: PPUSH
53262: LD_VAR 0 6
53266: PUSH
53267: LD_INT 1
53269: PLUS
53270: PPUSH
53271: LD_VAR 0 7
53275: PUSH
53276: LD_VAR 0 9
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PPUSH
53285: CALL_OW 2
53289: ST_TO_ADDR
53290: GO 53372
// for j = 1 to result do
53292: LD_ADDR_VAR 0 8
53296: PUSH
53297: DOUBLE
53298: LD_INT 1
53300: DEC
53301: ST_TO_ADDR
53302: LD_VAR 0 6
53306: PUSH
53307: FOR_TO
53308: IFFALSE 53370
// begin if tmp < result [ j ] [ 2 ] then
53310: LD_VAR 0 9
53314: PUSH
53315: LD_VAR 0 6
53319: PUSH
53320: LD_VAR 0 8
53324: ARRAY
53325: PUSH
53326: LD_INT 2
53328: ARRAY
53329: LESS
53330: IFFALSE 53368
// begin result := Insert ( result , j , [ i , tmp ] ) ;
53332: LD_ADDR_VAR 0 6
53336: PUSH
53337: LD_VAR 0 6
53341: PPUSH
53342: LD_VAR 0 8
53346: PPUSH
53347: LD_VAR 0 7
53351: PUSH
53352: LD_VAR 0 9
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PPUSH
53361: CALL_OW 2
53365: ST_TO_ADDR
// break ;
53366: GO 53370
// end ; end ;
53368: GO 53307
53370: POP
53371: POP
// end ; end ;
53372: GO 53171
53374: POP
53375: POP
// if result and not asc then
53376: LD_VAR 0 6
53380: PUSH
53381: LD_VAR 0 4
53385: NOT
53386: AND
53387: IFFALSE 53462
// begin tmp := result ;
53389: LD_ADDR_VAR 0 9
53393: PUSH
53394: LD_VAR 0 6
53398: ST_TO_ADDR
// for i = tmp downto 1 do
53399: LD_ADDR_VAR 0 7
53403: PUSH
53404: DOUBLE
53405: LD_VAR 0 9
53409: INC
53410: ST_TO_ADDR
53411: LD_INT 1
53413: PUSH
53414: FOR_DOWNTO
53415: IFFALSE 53460
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
53417: LD_ADDR_VAR 0 6
53421: PUSH
53422: LD_VAR 0 6
53426: PPUSH
53427: LD_VAR 0 9
53431: PUSH
53432: LD_VAR 0 7
53436: MINUS
53437: PUSH
53438: LD_INT 1
53440: PLUS
53441: PPUSH
53442: LD_VAR 0 9
53446: PUSH
53447: LD_VAR 0 7
53451: ARRAY
53452: PPUSH
53453: CALL_OW 1
53457: ST_TO_ADDR
53458: GO 53414
53460: POP
53461: POP
// end ; tmp := [ ] ;
53462: LD_ADDR_VAR 0 9
53466: PUSH
53467: EMPTY
53468: ST_TO_ADDR
// if mode then
53469: LD_VAR 0 5
53473: IFFALSE 53542
// begin for i = 1 to result do
53475: LD_ADDR_VAR 0 7
53479: PUSH
53480: DOUBLE
53481: LD_INT 1
53483: DEC
53484: ST_TO_ADDR
53485: LD_VAR 0 6
53489: PUSH
53490: FOR_TO
53491: IFFALSE 53530
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
53493: LD_ADDR_VAR 0 9
53497: PUSH
53498: LD_VAR 0 9
53502: PPUSH
53503: LD_VAR 0 7
53507: PPUSH
53508: LD_VAR 0 6
53512: PUSH
53513: LD_VAR 0 7
53517: ARRAY
53518: PUSH
53519: LD_INT 1
53521: ARRAY
53522: PPUSH
53523: CALL_OW 1
53527: ST_TO_ADDR
53528: GO 53490
53530: POP
53531: POP
// result := tmp ;
53532: LD_ADDR_VAR 0 6
53536: PUSH
53537: LD_VAR 0 9
53541: ST_TO_ADDR
// end ; end ;
53542: LD_VAR 0 6
53546: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
53547: LD_INT 0
53549: PPUSH
53550: PPUSH
53551: PPUSH
53552: PPUSH
53553: PPUSH
53554: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
53555: LD_ADDR_VAR 0 5
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: ST_TO_ADDR
// if not x or not y then
53577: LD_VAR 0 2
53581: NOT
53582: PUSH
53583: LD_VAR 0 3
53587: NOT
53588: OR
53589: IFFALSE 53593
// exit ;
53591: GO 55239
// if not range then
53593: LD_VAR 0 4
53597: NOT
53598: IFFALSE 53608
// range := 10 ;
53600: LD_ADDR_VAR 0 4
53604: PUSH
53605: LD_INT 10
53607: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
53608: LD_ADDR_VAR 0 8
53612: PUSH
53613: LD_INT 81
53615: PUSH
53616: LD_VAR 0 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 92
53627: PUSH
53628: LD_VAR 0 2
53632: PUSH
53633: LD_VAR 0 3
53637: PUSH
53638: LD_VAR 0 4
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: LD_INT 21
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: PPUSH
53671: CALL_OW 69
53675: ST_TO_ADDR
// if not tmp then
53676: LD_VAR 0 8
53680: NOT
53681: IFFALSE 53685
// exit ;
53683: GO 55239
// for i in tmp do
53685: LD_ADDR_VAR 0 6
53689: PUSH
53690: LD_VAR 0 8
53694: PUSH
53695: FOR_IN
53696: IFFALSE 55214
// begin points := [ 0 , 0 , 0 ] ;
53698: LD_ADDR_VAR 0 9
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// bpoints := 1 ;
53717: LD_ADDR_VAR 0 10
53721: PUSH
53722: LD_INT 1
53724: ST_TO_ADDR
// case GetType ( i ) of unit_human :
53725: LD_VAR 0 6
53729: PPUSH
53730: CALL_OW 247
53734: PUSH
53735: LD_INT 1
53737: DOUBLE
53738: EQUAL
53739: IFTRUE 53743
53741: GO 54321
53743: POP
// begin if GetClass ( i ) = 1 then
53744: LD_VAR 0 6
53748: PPUSH
53749: CALL_OW 257
53753: PUSH
53754: LD_INT 1
53756: EQUAL
53757: IFFALSE 53778
// points := [ 10 , 5 , 3 ] ;
53759: LD_ADDR_VAR 0 9
53763: PUSH
53764: LD_INT 10
53766: PUSH
53767: LD_INT 5
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53778: LD_VAR 0 6
53782: PPUSH
53783: CALL_OW 257
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: LD_INT 4
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: IN
53802: IFFALSE 53823
// points := [ 3 , 2 , 1 ] ;
53804: LD_ADDR_VAR 0 9
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53823: LD_VAR 0 6
53827: PPUSH
53828: CALL_OW 257
53832: PUSH
53833: LD_INT 5
53835: EQUAL
53836: IFFALSE 53857
// points := [ 130 , 5 , 2 ] ;
53838: LD_ADDR_VAR 0 9
53842: PUSH
53843: LD_INT 130
53845: PUSH
53846: LD_INT 5
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53857: LD_VAR 0 6
53861: PPUSH
53862: CALL_OW 257
53866: PUSH
53867: LD_INT 8
53869: EQUAL
53870: IFFALSE 53891
// points := [ 35 , 35 , 30 ] ;
53872: LD_ADDR_VAR 0 9
53876: PUSH
53877: LD_INT 35
53879: PUSH
53880: LD_INT 35
53882: PUSH
53883: LD_INT 30
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53891: LD_VAR 0 6
53895: PPUSH
53896: CALL_OW 257
53900: PUSH
53901: LD_INT 9
53903: EQUAL
53904: IFFALSE 53925
// points := [ 20 , 55 , 40 ] ;
53906: LD_ADDR_VAR 0 9
53910: PUSH
53911: LD_INT 20
53913: PUSH
53914: LD_INT 55
53916: PUSH
53917: LD_INT 40
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: LIST
53924: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53925: LD_VAR 0 6
53929: PPUSH
53930: CALL_OW 257
53934: PUSH
53935: LD_INT 12
53937: PUSH
53938: LD_INT 16
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: IN
53945: IFFALSE 53966
// points := [ 5 , 3 , 2 ] ;
53947: LD_ADDR_VAR 0 9
53951: PUSH
53952: LD_INT 5
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53966: LD_VAR 0 6
53970: PPUSH
53971: CALL_OW 257
53975: PUSH
53976: LD_INT 17
53978: EQUAL
53979: IFFALSE 54000
// points := [ 100 , 50 , 75 ] ;
53981: LD_ADDR_VAR 0 9
53985: PUSH
53986: LD_INT 100
53988: PUSH
53989: LD_INT 50
53991: PUSH
53992: LD_INT 75
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// if GetClass ( i ) = 15 then
54000: LD_VAR 0 6
54004: PPUSH
54005: CALL_OW 257
54009: PUSH
54010: LD_INT 15
54012: EQUAL
54013: IFFALSE 54034
// points := [ 10 , 5 , 3 ] ;
54015: LD_ADDR_VAR 0 9
54019: PUSH
54020: LD_INT 10
54022: PUSH
54023: LD_INT 5
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// if GetClass ( i ) = 14 then
54034: LD_VAR 0 6
54038: PPUSH
54039: CALL_OW 257
54043: PUSH
54044: LD_INT 14
54046: EQUAL
54047: IFFALSE 54068
// points := [ 10 , 0 , 0 ] ;
54049: LD_ADDR_VAR 0 9
54053: PUSH
54054: LD_INT 10
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: ST_TO_ADDR
// if GetClass ( i ) = 11 then
54068: LD_VAR 0 6
54072: PPUSH
54073: CALL_OW 257
54077: PUSH
54078: LD_INT 11
54080: EQUAL
54081: IFFALSE 54102
// points := [ 30 , 10 , 5 ] ;
54083: LD_ADDR_VAR 0 9
54087: PUSH
54088: LD_INT 30
54090: PUSH
54091: LD_INT 10
54093: PUSH
54094: LD_INT 5
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
54102: LD_VAR 0 1
54106: PPUSH
54107: LD_INT 5
54109: PPUSH
54110: CALL_OW 321
54114: PUSH
54115: LD_INT 2
54117: EQUAL
54118: IFFALSE 54135
// bpoints := bpoints * 1.8 ;
54120: LD_ADDR_VAR 0 10
54124: PUSH
54125: LD_VAR 0 10
54129: PUSH
54130: LD_REAL  1.80000000000000E+0000
54133: MUL
54134: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
54135: LD_VAR 0 6
54139: PPUSH
54140: CALL_OW 257
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: LD_INT 4
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: IN
54163: PUSH
54164: LD_VAR 0 1
54168: PPUSH
54169: LD_INT 51
54171: PPUSH
54172: CALL_OW 321
54176: PUSH
54177: LD_INT 2
54179: EQUAL
54180: AND
54181: IFFALSE 54198
// bpoints := bpoints * 1.2 ;
54183: LD_ADDR_VAR 0 10
54187: PUSH
54188: LD_VAR 0 10
54192: PUSH
54193: LD_REAL  1.20000000000000E+0000
54196: MUL
54197: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
54198: LD_VAR 0 6
54202: PPUSH
54203: CALL_OW 257
54207: PUSH
54208: LD_INT 5
54210: PUSH
54211: LD_INT 7
54213: PUSH
54214: LD_INT 9
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: IN
54222: PUSH
54223: LD_VAR 0 1
54227: PPUSH
54228: LD_INT 52
54230: PPUSH
54231: CALL_OW 321
54235: PUSH
54236: LD_INT 2
54238: EQUAL
54239: AND
54240: IFFALSE 54257
// bpoints := bpoints * 1.5 ;
54242: LD_ADDR_VAR 0 10
54246: PUSH
54247: LD_VAR 0 10
54251: PUSH
54252: LD_REAL  1.50000000000000E+0000
54255: MUL
54256: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
54257: LD_VAR 0 1
54261: PPUSH
54262: LD_INT 66
54264: PPUSH
54265: CALL_OW 321
54269: PUSH
54270: LD_INT 2
54272: EQUAL
54273: IFFALSE 54290
// bpoints := bpoints * 1.1 ;
54275: LD_ADDR_VAR 0 10
54279: PUSH
54280: LD_VAR 0 10
54284: PUSH
54285: LD_REAL  1.10000000000000E+0000
54288: MUL
54289: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
54290: LD_ADDR_VAR 0 10
54294: PUSH
54295: LD_VAR 0 10
54299: PUSH
54300: LD_VAR 0 6
54304: PPUSH
54305: LD_INT 1
54307: PPUSH
54308: CALL_OW 259
54312: PUSH
54313: LD_REAL  1.15000000000000E+0000
54316: MUL
54317: MUL
54318: ST_TO_ADDR
// end ; unit_vehicle :
54319: GO 55143
54321: LD_INT 2
54323: DOUBLE
54324: EQUAL
54325: IFTRUE 54329
54327: GO 55131
54329: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
54330: LD_VAR 0 6
54334: PPUSH
54335: CALL_OW 264
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 42
54345: PUSH
54346: LD_INT 24
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: IN
54354: IFFALSE 54375
// points := [ 25 , 5 , 3 ] ;
54356: LD_ADDR_VAR 0 9
54360: PUSH
54361: LD_INT 25
54363: PUSH
54364: LD_INT 5
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: LIST
54374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
54375: LD_VAR 0 6
54379: PPUSH
54380: CALL_OW 264
54384: PUSH
54385: LD_INT 4
54387: PUSH
54388: LD_INT 43
54390: PUSH
54391: LD_INT 25
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: IN
54399: IFFALSE 54420
// points := [ 40 , 15 , 5 ] ;
54401: LD_ADDR_VAR 0 9
54405: PUSH
54406: LD_INT 40
54408: PUSH
54409: LD_INT 15
54411: PUSH
54412: LD_INT 5
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
54420: LD_VAR 0 6
54424: PPUSH
54425: CALL_OW 264
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: LD_INT 23
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: IN
54440: IFFALSE 54461
// points := [ 7 , 25 , 8 ] ;
54442: LD_ADDR_VAR 0 9
54446: PUSH
54447: LD_INT 7
54449: PUSH
54450: LD_INT 25
54452: PUSH
54453: LD_INT 8
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
54461: LD_VAR 0 6
54465: PPUSH
54466: CALL_OW 264
54470: PUSH
54471: LD_INT 5
54473: PUSH
54474: LD_INT 27
54476: PUSH
54477: LD_INT 44
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: IN
54485: IFFALSE 54506
// points := [ 14 , 50 , 16 ] ;
54487: LD_ADDR_VAR 0 9
54491: PUSH
54492: LD_INT 14
54494: PUSH
54495: LD_INT 50
54497: PUSH
54498: LD_INT 16
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: LIST
54505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
54506: LD_VAR 0 6
54510: PPUSH
54511: CALL_OW 264
54515: PUSH
54516: LD_INT 6
54518: PUSH
54519: LD_INT 46
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: IN
54526: IFFALSE 54547
// points := [ 32 , 120 , 70 ] ;
54528: LD_ADDR_VAR 0 9
54532: PUSH
54533: LD_INT 32
54535: PUSH
54536: LD_INT 120
54538: PUSH
54539: LD_INT 70
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
54547: LD_VAR 0 6
54551: PPUSH
54552: CALL_OW 264
54556: PUSH
54557: LD_INT 7
54559: PUSH
54560: LD_INT 28
54562: PUSH
54563: LD_INT 45
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: IN
54571: IFFALSE 54592
// points := [ 35 , 20 , 45 ] ;
54573: LD_ADDR_VAR 0 9
54577: PUSH
54578: LD_INT 35
54580: PUSH
54581: LD_INT 20
54583: PUSH
54584: LD_INT 45
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: LIST
54591: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
54592: LD_VAR 0 6
54596: PPUSH
54597: CALL_OW 264
54601: PUSH
54602: LD_INT 47
54604: PUSH
54605: EMPTY
54606: LIST
54607: IN
54608: IFFALSE 54629
// points := [ 67 , 45 , 75 ] ;
54610: LD_ADDR_VAR 0 9
54614: PUSH
54615: LD_INT 67
54617: PUSH
54618: LD_INT 45
54620: PUSH
54621: LD_INT 75
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
54629: LD_VAR 0 6
54633: PPUSH
54634: CALL_OW 264
54638: PUSH
54639: LD_INT 26
54641: PUSH
54642: EMPTY
54643: LIST
54644: IN
54645: IFFALSE 54666
// points := [ 120 , 30 , 80 ] ;
54647: LD_ADDR_VAR 0 9
54651: PUSH
54652: LD_INT 120
54654: PUSH
54655: LD_INT 30
54657: PUSH
54658: LD_INT 80
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
54666: LD_VAR 0 6
54670: PPUSH
54671: CALL_OW 264
54675: PUSH
54676: LD_INT 22
54678: PUSH
54679: EMPTY
54680: LIST
54681: IN
54682: IFFALSE 54703
// points := [ 40 , 1 , 1 ] ;
54684: LD_ADDR_VAR 0 9
54688: PUSH
54689: LD_INT 40
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
54703: LD_VAR 0 6
54707: PPUSH
54708: CALL_OW 264
54712: PUSH
54713: LD_INT 29
54715: PUSH
54716: EMPTY
54717: LIST
54718: IN
54719: IFFALSE 54740
// points := [ 70 , 200 , 400 ] ;
54721: LD_ADDR_VAR 0 9
54725: PUSH
54726: LD_INT 70
54728: PUSH
54729: LD_INT 200
54731: PUSH
54732: LD_INT 400
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54740: LD_VAR 0 6
54744: PPUSH
54745: CALL_OW 264
54749: PUSH
54750: LD_INT 14
54752: PUSH
54753: LD_INT 53
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: IN
54760: IFFALSE 54781
// points := [ 40 , 10 , 20 ] ;
54762: LD_ADDR_VAR 0 9
54766: PUSH
54767: LD_INT 40
54769: PUSH
54770: LD_INT 10
54772: PUSH
54773: LD_INT 20
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54781: LD_VAR 0 6
54785: PPUSH
54786: CALL_OW 264
54790: PUSH
54791: LD_INT 9
54793: PUSH
54794: EMPTY
54795: LIST
54796: IN
54797: IFFALSE 54818
// points := [ 5 , 70 , 20 ] ;
54799: LD_ADDR_VAR 0 9
54803: PUSH
54804: LD_INT 5
54806: PUSH
54807: LD_INT 70
54809: PUSH
54810: LD_INT 20
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54818: LD_VAR 0 6
54822: PPUSH
54823: CALL_OW 264
54827: PUSH
54828: LD_INT 10
54830: PUSH
54831: EMPTY
54832: LIST
54833: IN
54834: IFFALSE 54855
// points := [ 35 , 110 , 70 ] ;
54836: LD_ADDR_VAR 0 9
54840: PUSH
54841: LD_INT 35
54843: PUSH
54844: LD_INT 110
54846: PUSH
54847: LD_INT 70
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54855: LD_VAR 0 6
54859: PPUSH
54860: CALL_OW 265
54864: PUSH
54865: LD_INT 25
54867: EQUAL
54868: IFFALSE 54889
// points := [ 80 , 65 , 100 ] ;
54870: LD_ADDR_VAR 0 9
54874: PUSH
54875: LD_INT 80
54877: PUSH
54878: LD_INT 65
54880: PUSH
54881: LD_INT 100
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: LIST
54888: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54889: LD_VAR 0 6
54893: PPUSH
54894: CALL_OW 263
54898: PUSH
54899: LD_INT 1
54901: EQUAL
54902: IFFALSE 54937
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54904: LD_ADDR_VAR 0 10
54908: PUSH
54909: LD_VAR 0 10
54913: PUSH
54914: LD_VAR 0 6
54918: PPUSH
54919: CALL_OW 311
54923: PPUSH
54924: LD_INT 3
54926: PPUSH
54927: CALL_OW 259
54931: PUSH
54932: LD_INT 4
54934: MUL
54935: MUL
54936: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54937: LD_VAR 0 6
54941: PPUSH
54942: CALL_OW 263
54946: PUSH
54947: LD_INT 2
54949: EQUAL
54950: IFFALSE 55001
// begin j := IsControledBy ( i ) ;
54952: LD_ADDR_VAR 0 7
54956: PUSH
54957: LD_VAR 0 6
54961: PPUSH
54962: CALL_OW 312
54966: ST_TO_ADDR
// if j then
54967: LD_VAR 0 7
54971: IFFALSE 55001
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54973: LD_ADDR_VAR 0 10
54977: PUSH
54978: LD_VAR 0 10
54982: PUSH
54983: LD_VAR 0 7
54987: PPUSH
54988: LD_INT 3
54990: PPUSH
54991: CALL_OW 259
54995: PUSH
54996: LD_INT 3
54998: MUL
54999: MUL
55000: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
55001: LD_VAR 0 6
55005: PPUSH
55006: CALL_OW 264
55010: PUSH
55011: LD_INT 5
55013: PUSH
55014: LD_INT 6
55016: PUSH
55017: LD_INT 46
55019: PUSH
55020: LD_INT 44
55022: PUSH
55023: LD_INT 47
55025: PUSH
55026: LD_INT 45
55028: PUSH
55029: LD_INT 28
55031: PUSH
55032: LD_INT 7
55034: PUSH
55035: LD_INT 27
55037: PUSH
55038: LD_INT 29
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: IN
55053: PUSH
55054: LD_VAR 0 1
55058: PPUSH
55059: LD_INT 52
55061: PPUSH
55062: CALL_OW 321
55066: PUSH
55067: LD_INT 2
55069: EQUAL
55070: AND
55071: IFFALSE 55088
// bpoints := bpoints * 1.2 ;
55073: LD_ADDR_VAR 0 10
55077: PUSH
55078: LD_VAR 0 10
55082: PUSH
55083: LD_REAL  1.20000000000000E+0000
55086: MUL
55087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
55088: LD_VAR 0 6
55092: PPUSH
55093: CALL_OW 264
55097: PUSH
55098: LD_INT 6
55100: PUSH
55101: LD_INT 46
55103: PUSH
55104: LD_INT 47
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: IN
55112: IFFALSE 55129
// bpoints := bpoints * 1.2 ;
55114: LD_ADDR_VAR 0 10
55118: PUSH
55119: LD_VAR 0 10
55123: PUSH
55124: LD_REAL  1.20000000000000E+0000
55127: MUL
55128: ST_TO_ADDR
// end ; unit_building :
55129: GO 55143
55131: LD_INT 3
55133: DOUBLE
55134: EQUAL
55135: IFTRUE 55139
55137: GO 55142
55139: POP
// ; end ;
55140: GO 55143
55142: POP
// for j = 1 to 3 do
55143: LD_ADDR_VAR 0 7
55147: PUSH
55148: DOUBLE
55149: LD_INT 1
55151: DEC
55152: ST_TO_ADDR
55153: LD_INT 3
55155: PUSH
55156: FOR_TO
55157: IFFALSE 55210
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
55159: LD_ADDR_VAR 0 5
55163: PUSH
55164: LD_VAR 0 5
55168: PPUSH
55169: LD_VAR 0 7
55173: PPUSH
55174: LD_VAR 0 5
55178: PUSH
55179: LD_VAR 0 7
55183: ARRAY
55184: PUSH
55185: LD_VAR 0 9
55189: PUSH
55190: LD_VAR 0 7
55194: ARRAY
55195: PUSH
55196: LD_VAR 0 10
55200: MUL
55201: PLUS
55202: PPUSH
55203: CALL_OW 1
55207: ST_TO_ADDR
55208: GO 55156
55210: POP
55211: POP
// end ;
55212: GO 53695
55214: POP
55215: POP
// result := Replace ( result , 4 , tmp ) ;
55216: LD_ADDR_VAR 0 5
55220: PUSH
55221: LD_VAR 0 5
55225: PPUSH
55226: LD_INT 4
55228: PPUSH
55229: LD_VAR 0 8
55233: PPUSH
55234: CALL_OW 1
55238: ST_TO_ADDR
// end ;
55239: LD_VAR 0 5
55243: RET
// export function DangerAtRange ( unit , range ) ; begin
55244: LD_INT 0
55246: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
55247: LD_ADDR_VAR 0 3
55251: PUSH
55252: LD_VAR 0 1
55256: PPUSH
55257: CALL_OW 255
55261: PPUSH
55262: LD_VAR 0 1
55266: PPUSH
55267: CALL_OW 250
55271: PPUSH
55272: LD_VAR 0 1
55276: PPUSH
55277: CALL_OW 251
55281: PPUSH
55282: LD_VAR 0 2
55286: PPUSH
55287: CALL 53547 0 4
55291: ST_TO_ADDR
// end ;
55292: LD_VAR 0 3
55296: RET
// export function DangerInArea ( side , area ) ; begin
55297: LD_INT 0
55299: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
55300: LD_ADDR_VAR 0 3
55304: PUSH
55305: LD_VAR 0 2
55309: PPUSH
55310: LD_INT 81
55312: PUSH
55313: LD_VAR 0 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PPUSH
55322: CALL_OW 70
55326: ST_TO_ADDR
// end ;
55327: LD_VAR 0 3
55331: RET
// export function IsExtension ( b ) ; begin
55332: LD_INT 0
55334: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
55335: LD_ADDR_VAR 0 2
55339: PUSH
55340: LD_VAR 0 1
55344: PUSH
55345: LD_INT 23
55347: PUSH
55348: LD_INT 20
55350: PUSH
55351: LD_INT 22
55353: PUSH
55354: LD_INT 17
55356: PUSH
55357: LD_INT 24
55359: PUSH
55360: LD_INT 21
55362: PUSH
55363: LD_INT 19
55365: PUSH
55366: LD_INT 16
55368: PUSH
55369: LD_INT 25
55371: PUSH
55372: LD_INT 18
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: IN
55387: ST_TO_ADDR
// end ;
55388: LD_VAR 0 2
55392: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
55393: LD_INT 0
55395: PPUSH
55396: PPUSH
55397: PPUSH
// result := [ ] ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: EMPTY
55404: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
55405: LD_ADDR_VAR 0 4
55409: PUSH
55410: LD_VAR 0 2
55414: PPUSH
55415: LD_INT 21
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PPUSH
55425: CALL_OW 70
55429: ST_TO_ADDR
// if not tmp then
55430: LD_VAR 0 4
55434: NOT
55435: IFFALSE 55439
// exit ;
55437: GO 55497
// for i in tmp do
55439: LD_ADDR_VAR 0 5
55443: PUSH
55444: LD_VAR 0 4
55448: PUSH
55449: FOR_IN
55450: IFFALSE 55485
// if GetBase ( i ) <> base then
55452: LD_VAR 0 5
55456: PPUSH
55457: CALL_OW 274
55461: PUSH
55462: LD_VAR 0 1
55466: NONEQUAL
55467: IFFALSE 55483
// ComLinkToBase ( base , i ) ;
55469: LD_VAR 0 1
55473: PPUSH
55474: LD_VAR 0 5
55478: PPUSH
55479: CALL_OW 169
55483: GO 55449
55485: POP
55486: POP
// result := tmp ;
55487: LD_ADDR_VAR 0 3
55491: PUSH
55492: LD_VAR 0 4
55496: ST_TO_ADDR
// end ;
55497: LD_VAR 0 3
55501: RET
// export function ComComplete ( unit , b ) ; var i ; begin
55502: LD_INT 0
55504: PPUSH
55505: PPUSH
// if BuildingStatus ( b ) = bs_build then
55506: LD_VAR 0 2
55510: PPUSH
55511: CALL_OW 461
55515: PUSH
55516: LD_INT 1
55518: EQUAL
55519: IFFALSE 55579
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
55521: LD_VAR 0 1
55525: PPUSH
55526: LD_STRING h
55528: PUSH
55529: LD_VAR 0 2
55533: PPUSH
55534: CALL_OW 250
55538: PUSH
55539: LD_VAR 0 2
55543: PPUSH
55544: CALL_OW 251
55548: PUSH
55549: LD_VAR 0 2
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: PPUSH
55575: CALL_OW 446
// end ;
55579: LD_VAR 0 3
55583: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
55584: LD_INT 0
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
55592: LD_VAR 0 1
55596: NOT
55597: PUSH
55598: LD_VAR 0 1
55602: PPUSH
55603: CALL_OW 263
55607: PUSH
55608: LD_INT 2
55610: EQUAL
55611: NOT
55612: OR
55613: IFFALSE 55617
// exit ;
55615: GO 55933
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
55617: LD_ADDR_VAR 0 6
55621: PUSH
55622: LD_INT 22
55624: PUSH
55625: LD_VAR 0 1
55629: PPUSH
55630: CALL_OW 255
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 30
55644: PUSH
55645: LD_INT 36
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 34
55654: PUSH
55655: LD_INT 31
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PPUSH
55671: CALL_OW 69
55675: ST_TO_ADDR
// if not tmp then
55676: LD_VAR 0 6
55680: NOT
55681: IFFALSE 55685
// exit ;
55683: GO 55933
// result := [ ] ;
55685: LD_ADDR_VAR 0 2
55689: PUSH
55690: EMPTY
55691: ST_TO_ADDR
// for i in tmp do
55692: LD_ADDR_VAR 0 3
55696: PUSH
55697: LD_VAR 0 6
55701: PUSH
55702: FOR_IN
55703: IFFALSE 55774
// begin t := UnitsInside ( i ) ;
55705: LD_ADDR_VAR 0 4
55709: PUSH
55710: LD_VAR 0 3
55714: PPUSH
55715: CALL_OW 313
55719: ST_TO_ADDR
// if t then
55720: LD_VAR 0 4
55724: IFFALSE 55772
// for j in t do
55726: LD_ADDR_VAR 0 7
55730: PUSH
55731: LD_VAR 0 4
55735: PUSH
55736: FOR_IN
55737: IFFALSE 55770
// result := Insert ( result , result + 1 , j ) ;
55739: LD_ADDR_VAR 0 2
55743: PUSH
55744: LD_VAR 0 2
55748: PPUSH
55749: LD_VAR 0 2
55753: PUSH
55754: LD_INT 1
55756: PLUS
55757: PPUSH
55758: LD_VAR 0 7
55762: PPUSH
55763: CALL_OW 2
55767: ST_TO_ADDR
55768: GO 55736
55770: POP
55771: POP
// end ;
55772: GO 55702
55774: POP
55775: POP
// if not result then
55776: LD_VAR 0 2
55780: NOT
55781: IFFALSE 55785
// exit ;
55783: GO 55933
// mech := result [ 1 ] ;
55785: LD_ADDR_VAR 0 5
55789: PUSH
55790: LD_VAR 0 2
55794: PUSH
55795: LD_INT 1
55797: ARRAY
55798: ST_TO_ADDR
// if result > 1 then
55799: LD_VAR 0 2
55803: PUSH
55804: LD_INT 1
55806: GREATER
55807: IFFALSE 55919
// for i = 2 to result do
55809: LD_ADDR_VAR 0 3
55813: PUSH
55814: DOUBLE
55815: LD_INT 2
55817: DEC
55818: ST_TO_ADDR
55819: LD_VAR 0 2
55823: PUSH
55824: FOR_TO
55825: IFFALSE 55917
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55827: LD_ADDR_VAR 0 4
55831: PUSH
55832: LD_VAR 0 2
55836: PUSH
55837: LD_VAR 0 3
55841: ARRAY
55842: PPUSH
55843: LD_INT 3
55845: PPUSH
55846: CALL_OW 259
55850: PUSH
55851: LD_VAR 0 2
55855: PUSH
55856: LD_VAR 0 3
55860: ARRAY
55861: PPUSH
55862: CALL_OW 432
55866: MINUS
55867: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55868: LD_VAR 0 4
55872: PUSH
55873: LD_VAR 0 5
55877: PPUSH
55878: LD_INT 3
55880: PPUSH
55881: CALL_OW 259
55885: PUSH
55886: LD_VAR 0 5
55890: PPUSH
55891: CALL_OW 432
55895: MINUS
55896: GREATEREQUAL
55897: IFFALSE 55915
// mech := result [ i ] ;
55899: LD_ADDR_VAR 0 5
55903: PUSH
55904: LD_VAR 0 2
55908: PUSH
55909: LD_VAR 0 3
55913: ARRAY
55914: ST_TO_ADDR
// end ;
55915: GO 55824
55917: POP
55918: POP
// ComLinkTo ( vehicle , mech ) ;
55919: LD_VAR 0 1
55923: PPUSH
55924: LD_VAR 0 5
55928: PPUSH
55929: CALL_OW 135
// end ;
55933: LD_VAR 0 2
55937: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55938: LD_INT 0
55940: PPUSH
55941: PPUSH
55942: PPUSH
55943: PPUSH
55944: PPUSH
55945: PPUSH
55946: PPUSH
55947: PPUSH
55948: PPUSH
55949: PPUSH
55950: PPUSH
55951: PPUSH
55952: PPUSH
// result := [ ] ;
55953: LD_ADDR_VAR 0 7
55957: PUSH
55958: EMPTY
55959: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55960: LD_VAR 0 1
55964: PPUSH
55965: CALL_OW 266
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: IN
55980: NOT
55981: IFFALSE 55985
// exit ;
55983: GO 57616
// if name then
55985: LD_VAR 0 3
55989: IFFALSE 56005
// SetBName ( base_dep , name ) ;
55991: LD_VAR 0 1
55995: PPUSH
55996: LD_VAR 0 3
56000: PPUSH
56001: CALL_OW 500
// base := GetBase ( base_dep ) ;
56005: LD_ADDR_VAR 0 15
56009: PUSH
56010: LD_VAR 0 1
56014: PPUSH
56015: CALL_OW 274
56019: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
56020: LD_ADDR_VAR 0 16
56024: PUSH
56025: LD_VAR 0 1
56029: PPUSH
56030: CALL_OW 255
56034: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
56035: LD_ADDR_VAR 0 17
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: CALL_OW 248
56049: ST_TO_ADDR
// if sources then
56050: LD_VAR 0 5
56054: IFFALSE 56101
// for i = 1 to 3 do
56056: LD_ADDR_VAR 0 8
56060: PUSH
56061: DOUBLE
56062: LD_INT 1
56064: DEC
56065: ST_TO_ADDR
56066: LD_INT 3
56068: PUSH
56069: FOR_TO
56070: IFFALSE 56099
// AddResourceType ( base , i , sources [ i ] ) ;
56072: LD_VAR 0 15
56076: PPUSH
56077: LD_VAR 0 8
56081: PPUSH
56082: LD_VAR 0 5
56086: PUSH
56087: LD_VAR 0 8
56091: ARRAY
56092: PPUSH
56093: CALL_OW 276
56097: GO 56069
56099: POP
56100: POP
// buildings := GetBaseBuildings ( base , area ) ;
56101: LD_ADDR_VAR 0 18
56105: PUSH
56106: LD_VAR 0 15
56110: PPUSH
56111: LD_VAR 0 2
56115: PPUSH
56116: CALL 55393 0 2
56120: ST_TO_ADDR
// InitHc ;
56121: CALL_OW 19
// InitUc ;
56125: CALL_OW 18
// uc_side := side ;
56129: LD_ADDR_OWVAR 20
56133: PUSH
56134: LD_VAR 0 16
56138: ST_TO_ADDR
// uc_nation := nation ;
56139: LD_ADDR_OWVAR 21
56143: PUSH
56144: LD_VAR 0 17
56148: ST_TO_ADDR
// if buildings then
56149: LD_VAR 0 18
56153: IFFALSE 57475
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
56155: LD_ADDR_VAR 0 19
56159: PUSH
56160: LD_VAR 0 18
56164: PPUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 30
56170: PUSH
56171: LD_INT 29
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 30
56180: PUSH
56181: LD_INT 30
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: PPUSH
56193: CALL_OW 72
56197: ST_TO_ADDR
// if tmp then
56198: LD_VAR 0 19
56202: IFFALSE 56250
// for i in tmp do
56204: LD_ADDR_VAR 0 8
56208: PUSH
56209: LD_VAR 0 19
56213: PUSH
56214: FOR_IN
56215: IFFALSE 56248
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
56217: LD_VAR 0 8
56221: PPUSH
56222: CALL_OW 250
56226: PPUSH
56227: LD_VAR 0 8
56231: PPUSH
56232: CALL_OW 251
56236: PPUSH
56237: LD_VAR 0 16
56241: PPUSH
56242: CALL_OW 441
56246: GO 56214
56248: POP
56249: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
56250: LD_VAR 0 18
56254: PPUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 30
56260: PUSH
56261: LD_INT 32
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 30
56270: PUSH
56271: LD_INT 33
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: PPUSH
56283: CALL_OW 72
56287: IFFALSE 56375
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
56289: LD_ADDR_VAR 0 8
56293: PUSH
56294: LD_VAR 0 18
56298: PPUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 30
56304: PUSH
56305: LD_INT 32
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 30
56314: PUSH
56315: LD_INT 33
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: PPUSH
56327: CALL_OW 72
56331: PUSH
56332: FOR_IN
56333: IFFALSE 56373
// begin if not GetBWeapon ( i ) then
56335: LD_VAR 0 8
56339: PPUSH
56340: CALL_OW 269
56344: NOT
56345: IFFALSE 56371
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
56347: LD_VAR 0 8
56351: PPUSH
56352: LD_VAR 0 8
56356: PPUSH
56357: LD_VAR 0 2
56361: PPUSH
56362: CALL 57621 0 2
56366: PPUSH
56367: CALL_OW 431
// end ;
56371: GO 56332
56373: POP
56374: POP
// end ; for i = 1 to personel do
56375: LD_ADDR_VAR 0 8
56379: PUSH
56380: DOUBLE
56381: LD_INT 1
56383: DEC
56384: ST_TO_ADDR
56385: LD_VAR 0 6
56389: PUSH
56390: FOR_TO
56391: IFFALSE 57455
// begin if i > 4 then
56393: LD_VAR 0 8
56397: PUSH
56398: LD_INT 4
56400: GREATER
56401: IFFALSE 56405
// break ;
56403: GO 57455
// case i of 1 :
56405: LD_VAR 0 8
56409: PUSH
56410: LD_INT 1
56412: DOUBLE
56413: EQUAL
56414: IFTRUE 56418
56416: GO 56498
56418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
56419: LD_ADDR_VAR 0 12
56423: PUSH
56424: LD_VAR 0 18
56428: PPUSH
56429: LD_INT 22
56431: PUSH
56432: LD_VAR 0 16
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 58
56443: PUSH
56444: EMPTY
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: LD_INT 30
56452: PUSH
56453: LD_INT 32
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 30
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 30
56472: PUSH
56473: LD_INT 5
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: PPUSH
56491: CALL_OW 72
56495: ST_TO_ADDR
56496: GO 56720
56498: LD_INT 2
56500: DOUBLE
56501: EQUAL
56502: IFTRUE 56506
56504: GO 56568
56506: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
56507: LD_ADDR_VAR 0 12
56511: PUSH
56512: LD_VAR 0 18
56516: PPUSH
56517: LD_INT 22
56519: PUSH
56520: LD_VAR 0 16
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 30
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 30
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PPUSH
56561: CALL_OW 72
56565: ST_TO_ADDR
56566: GO 56720
56568: LD_INT 3
56570: DOUBLE
56571: EQUAL
56572: IFTRUE 56576
56574: GO 56638
56576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
56577: LD_ADDR_VAR 0 12
56581: PUSH
56582: LD_VAR 0 18
56586: PPUSH
56587: LD_INT 22
56589: PUSH
56590: LD_VAR 0 16
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 30
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 30
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: LIST
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PPUSH
56631: CALL_OW 72
56635: ST_TO_ADDR
56636: GO 56720
56638: LD_INT 4
56640: DOUBLE
56641: EQUAL
56642: IFTRUE 56646
56644: GO 56719
56646: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
56647: LD_ADDR_VAR 0 12
56651: PUSH
56652: LD_VAR 0 18
56656: PPUSH
56657: LD_INT 22
56659: PUSH
56660: LD_VAR 0 16
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 30
56674: PUSH
56675: LD_INT 6
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 30
56684: PUSH
56685: LD_INT 7
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 30
56694: PUSH
56695: LD_INT 8
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PPUSH
56712: CALL_OW 72
56716: ST_TO_ADDR
56717: GO 56720
56719: POP
// if i = 1 then
56720: LD_VAR 0 8
56724: PUSH
56725: LD_INT 1
56727: EQUAL
56728: IFFALSE 56839
// begin tmp := [ ] ;
56730: LD_ADDR_VAR 0 19
56734: PUSH
56735: EMPTY
56736: ST_TO_ADDR
// for j in f do
56737: LD_ADDR_VAR 0 9
56741: PUSH
56742: LD_VAR 0 12
56746: PUSH
56747: FOR_IN
56748: IFFALSE 56821
// if GetBType ( j ) = b_bunker then
56750: LD_VAR 0 9
56754: PPUSH
56755: CALL_OW 266
56759: PUSH
56760: LD_INT 32
56762: EQUAL
56763: IFFALSE 56790
// tmp := Insert ( tmp , 1 , j ) else
56765: LD_ADDR_VAR 0 19
56769: PUSH
56770: LD_VAR 0 19
56774: PPUSH
56775: LD_INT 1
56777: PPUSH
56778: LD_VAR 0 9
56782: PPUSH
56783: CALL_OW 2
56787: ST_TO_ADDR
56788: GO 56819
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56790: LD_ADDR_VAR 0 19
56794: PUSH
56795: LD_VAR 0 19
56799: PPUSH
56800: LD_VAR 0 19
56804: PUSH
56805: LD_INT 1
56807: PLUS
56808: PPUSH
56809: LD_VAR 0 9
56813: PPUSH
56814: CALL_OW 2
56818: ST_TO_ADDR
56819: GO 56747
56821: POP
56822: POP
// if tmp then
56823: LD_VAR 0 19
56827: IFFALSE 56839
// f := tmp ;
56829: LD_ADDR_VAR 0 12
56833: PUSH
56834: LD_VAR 0 19
56838: ST_TO_ADDR
// end ; x := personel [ i ] ;
56839: LD_ADDR_VAR 0 13
56843: PUSH
56844: LD_VAR 0 6
56848: PUSH
56849: LD_VAR 0 8
56853: ARRAY
56854: ST_TO_ADDR
// if x = - 1 then
56855: LD_VAR 0 13
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: EQUAL
56864: IFFALSE 57073
// begin for j in f do
56866: LD_ADDR_VAR 0 9
56870: PUSH
56871: LD_VAR 0 12
56875: PUSH
56876: FOR_IN
56877: IFFALSE 57069
// repeat InitHc ;
56879: CALL_OW 19
// if GetBType ( j ) = b_barracks then
56883: LD_VAR 0 9
56887: PPUSH
56888: CALL_OW 266
56892: PUSH
56893: LD_INT 5
56895: EQUAL
56896: IFFALSE 56966
// begin if UnitsInside ( j ) < 3 then
56898: LD_VAR 0 9
56902: PPUSH
56903: CALL_OW 313
56907: PUSH
56908: LD_INT 3
56910: LESS
56911: IFFALSE 56947
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56913: LD_INT 0
56915: PPUSH
56916: LD_INT 5
56918: PUSH
56919: LD_INT 8
56921: PUSH
56922: LD_INT 9
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: PUSH
56930: LD_VAR 0 17
56934: ARRAY
56935: PPUSH
56936: LD_VAR 0 4
56940: PPUSH
56941: CALL_OW 380
56945: GO 56964
// PrepareHuman ( false , i , skill ) ;
56947: LD_INT 0
56949: PPUSH
56950: LD_VAR 0 8
56954: PPUSH
56955: LD_VAR 0 4
56959: PPUSH
56960: CALL_OW 380
// end else
56964: GO 56983
// PrepareHuman ( false , i , skill ) ;
56966: LD_INT 0
56968: PPUSH
56969: LD_VAR 0 8
56973: PPUSH
56974: LD_VAR 0 4
56978: PPUSH
56979: CALL_OW 380
// un := CreateHuman ;
56983: LD_ADDR_VAR 0 14
56987: PUSH
56988: CALL_OW 44
56992: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56993: LD_ADDR_VAR 0 7
56997: PUSH
56998: LD_VAR 0 7
57002: PPUSH
57003: LD_INT 1
57005: PPUSH
57006: LD_VAR 0 14
57010: PPUSH
57011: CALL_OW 2
57015: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
57016: LD_VAR 0 14
57020: PPUSH
57021: LD_VAR 0 9
57025: PPUSH
57026: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
57030: LD_VAR 0 9
57034: PPUSH
57035: CALL_OW 313
57039: PUSH
57040: LD_INT 6
57042: EQUAL
57043: PUSH
57044: LD_VAR 0 9
57048: PPUSH
57049: CALL_OW 266
57053: PUSH
57054: LD_INT 32
57056: PUSH
57057: LD_INT 31
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: IN
57064: OR
57065: IFFALSE 56879
57067: GO 56876
57069: POP
57070: POP
// end else
57071: GO 57453
// for j = 1 to x do
57073: LD_ADDR_VAR 0 9
57077: PUSH
57078: DOUBLE
57079: LD_INT 1
57081: DEC
57082: ST_TO_ADDR
57083: LD_VAR 0 13
57087: PUSH
57088: FOR_TO
57089: IFFALSE 57451
// begin InitHc ;
57091: CALL_OW 19
// if not f then
57095: LD_VAR 0 12
57099: NOT
57100: IFFALSE 57189
// begin PrepareHuman ( false , i , skill ) ;
57102: LD_INT 0
57104: PPUSH
57105: LD_VAR 0 8
57109: PPUSH
57110: LD_VAR 0 4
57114: PPUSH
57115: CALL_OW 380
// un := CreateHuman ;
57119: LD_ADDR_VAR 0 14
57123: PUSH
57124: CALL_OW 44
57128: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57129: LD_ADDR_VAR 0 7
57133: PUSH
57134: LD_VAR 0 7
57138: PPUSH
57139: LD_INT 1
57141: PPUSH
57142: LD_VAR 0 14
57146: PPUSH
57147: CALL_OW 2
57151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57152: LD_VAR 0 14
57156: PPUSH
57157: LD_VAR 0 1
57161: PPUSH
57162: CALL_OW 250
57166: PPUSH
57167: LD_VAR 0 1
57171: PPUSH
57172: CALL_OW 251
57176: PPUSH
57177: LD_INT 10
57179: PPUSH
57180: LD_INT 0
57182: PPUSH
57183: CALL_OW 50
// continue ;
57187: GO 57088
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
57189: LD_VAR 0 12
57193: PUSH
57194: LD_INT 1
57196: ARRAY
57197: PPUSH
57198: CALL_OW 313
57202: PUSH
57203: LD_VAR 0 12
57207: PUSH
57208: LD_INT 1
57210: ARRAY
57211: PPUSH
57212: CALL_OW 266
57216: PUSH
57217: LD_INT 32
57219: PUSH
57220: LD_INT 31
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: IN
57227: AND
57228: PUSH
57229: LD_VAR 0 12
57233: PUSH
57234: LD_INT 1
57236: ARRAY
57237: PPUSH
57238: CALL_OW 313
57242: PUSH
57243: LD_INT 6
57245: EQUAL
57246: OR
57247: IFFALSE 57267
// f := Delete ( f , 1 ) ;
57249: LD_ADDR_VAR 0 12
57253: PUSH
57254: LD_VAR 0 12
57258: PPUSH
57259: LD_INT 1
57261: PPUSH
57262: CALL_OW 3
57266: ST_TO_ADDR
// if not f then
57267: LD_VAR 0 12
57271: NOT
57272: IFFALSE 57290
// begin x := x + 2 ;
57274: LD_ADDR_VAR 0 13
57278: PUSH
57279: LD_VAR 0 13
57283: PUSH
57284: LD_INT 2
57286: PLUS
57287: ST_TO_ADDR
// continue ;
57288: GO 57088
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
57290: LD_VAR 0 12
57294: PUSH
57295: LD_INT 1
57297: ARRAY
57298: PPUSH
57299: CALL_OW 266
57303: PUSH
57304: LD_INT 5
57306: EQUAL
57307: IFFALSE 57381
// begin if UnitsInside ( f [ 1 ] ) < 3 then
57309: LD_VAR 0 12
57313: PUSH
57314: LD_INT 1
57316: ARRAY
57317: PPUSH
57318: CALL_OW 313
57322: PUSH
57323: LD_INT 3
57325: LESS
57326: IFFALSE 57362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57328: LD_INT 0
57330: PPUSH
57331: LD_INT 5
57333: PUSH
57334: LD_INT 8
57336: PUSH
57337: LD_INT 9
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: LIST
57344: PUSH
57345: LD_VAR 0 17
57349: ARRAY
57350: PPUSH
57351: LD_VAR 0 4
57355: PPUSH
57356: CALL_OW 380
57360: GO 57379
// PrepareHuman ( false , i , skill ) ;
57362: LD_INT 0
57364: PPUSH
57365: LD_VAR 0 8
57369: PPUSH
57370: LD_VAR 0 4
57374: PPUSH
57375: CALL_OW 380
// end else
57379: GO 57398
// PrepareHuman ( false , i , skill ) ;
57381: LD_INT 0
57383: PPUSH
57384: LD_VAR 0 8
57388: PPUSH
57389: LD_VAR 0 4
57393: PPUSH
57394: CALL_OW 380
// un := CreateHuman ;
57398: LD_ADDR_VAR 0 14
57402: PUSH
57403: CALL_OW 44
57407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57408: LD_ADDR_VAR 0 7
57412: PUSH
57413: LD_VAR 0 7
57417: PPUSH
57418: LD_INT 1
57420: PPUSH
57421: LD_VAR 0 14
57425: PPUSH
57426: CALL_OW 2
57430: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
57431: LD_VAR 0 14
57435: PPUSH
57436: LD_VAR 0 12
57440: PUSH
57441: LD_INT 1
57443: ARRAY
57444: PPUSH
57445: CALL_OW 52
// end ;
57449: GO 57088
57451: POP
57452: POP
// end ;
57453: GO 56390
57455: POP
57456: POP
// result := result ^ buildings ;
57457: LD_ADDR_VAR 0 7
57461: PUSH
57462: LD_VAR 0 7
57466: PUSH
57467: LD_VAR 0 18
57471: ADD
57472: ST_TO_ADDR
// end else
57473: GO 57616
// begin for i = 1 to personel do
57475: LD_ADDR_VAR 0 8
57479: PUSH
57480: DOUBLE
57481: LD_INT 1
57483: DEC
57484: ST_TO_ADDR
57485: LD_VAR 0 6
57489: PUSH
57490: FOR_TO
57491: IFFALSE 57614
// begin if i > 4 then
57493: LD_VAR 0 8
57497: PUSH
57498: LD_INT 4
57500: GREATER
57501: IFFALSE 57505
// break ;
57503: GO 57614
// x := personel [ i ] ;
57505: LD_ADDR_VAR 0 13
57509: PUSH
57510: LD_VAR 0 6
57514: PUSH
57515: LD_VAR 0 8
57519: ARRAY
57520: ST_TO_ADDR
// if x = - 1 then
57521: LD_VAR 0 13
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: EQUAL
57530: IFFALSE 57534
// continue ;
57532: GO 57490
// PrepareHuman ( false , i , skill ) ;
57534: LD_INT 0
57536: PPUSH
57537: LD_VAR 0 8
57541: PPUSH
57542: LD_VAR 0 4
57546: PPUSH
57547: CALL_OW 380
// un := CreateHuman ;
57551: LD_ADDR_VAR 0 14
57555: PUSH
57556: CALL_OW 44
57560: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57561: LD_VAR 0 14
57565: PPUSH
57566: LD_VAR 0 1
57570: PPUSH
57571: CALL_OW 250
57575: PPUSH
57576: LD_VAR 0 1
57580: PPUSH
57581: CALL_OW 251
57585: PPUSH
57586: LD_INT 10
57588: PPUSH
57589: LD_INT 0
57591: PPUSH
57592: CALL_OW 50
// result := result ^ un ;
57596: LD_ADDR_VAR 0 7
57600: PUSH
57601: LD_VAR 0 7
57605: PUSH
57606: LD_VAR 0 14
57610: ADD
57611: ST_TO_ADDR
// end ;
57612: GO 57490
57614: POP
57615: POP
// end ; end ;
57616: LD_VAR 0 7
57620: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
57621: LD_INT 0
57623: PPUSH
57624: PPUSH
57625: PPUSH
57626: PPUSH
57627: PPUSH
57628: PPUSH
57629: PPUSH
57630: PPUSH
57631: PPUSH
57632: PPUSH
57633: PPUSH
57634: PPUSH
57635: PPUSH
57636: PPUSH
57637: PPUSH
57638: PPUSH
// result := false ;
57639: LD_ADDR_VAR 0 3
57643: PUSH
57644: LD_INT 0
57646: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
57647: LD_VAR 0 1
57651: NOT
57652: PUSH
57653: LD_VAR 0 1
57657: PPUSH
57658: CALL_OW 266
57662: PUSH
57663: LD_INT 32
57665: PUSH
57666: LD_INT 33
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: IN
57673: NOT
57674: OR
57675: IFFALSE 57679
// exit ;
57677: GO 58815
// nat := GetNation ( tower ) ;
57679: LD_ADDR_VAR 0 12
57683: PUSH
57684: LD_VAR 0 1
57688: PPUSH
57689: CALL_OW 248
57693: ST_TO_ADDR
// side := GetSide ( tower ) ;
57694: LD_ADDR_VAR 0 16
57698: PUSH
57699: LD_VAR 0 1
57703: PPUSH
57704: CALL_OW 255
57708: ST_TO_ADDR
// x := GetX ( tower ) ;
57709: LD_ADDR_VAR 0 10
57713: PUSH
57714: LD_VAR 0 1
57718: PPUSH
57719: CALL_OW 250
57723: ST_TO_ADDR
// y := GetY ( tower ) ;
57724: LD_ADDR_VAR 0 11
57728: PUSH
57729: LD_VAR 0 1
57733: PPUSH
57734: CALL_OW 251
57738: ST_TO_ADDR
// if not x or not y then
57739: LD_VAR 0 10
57743: NOT
57744: PUSH
57745: LD_VAR 0 11
57749: NOT
57750: OR
57751: IFFALSE 57755
// exit ;
57753: GO 58815
// weapon := 0 ;
57755: LD_ADDR_VAR 0 18
57759: PUSH
57760: LD_INT 0
57762: ST_TO_ADDR
// fac_list := [ ] ;
57763: LD_ADDR_VAR 0 17
57767: PUSH
57768: EMPTY
57769: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
57770: LD_ADDR_VAR 0 6
57774: PUSH
57775: LD_VAR 0 1
57779: PPUSH
57780: CALL_OW 274
57784: PPUSH
57785: LD_VAR 0 2
57789: PPUSH
57790: CALL 55393 0 2
57794: PPUSH
57795: LD_INT 30
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PPUSH
57805: CALL_OW 72
57809: ST_TO_ADDR
// if not factories then
57810: LD_VAR 0 6
57814: NOT
57815: IFFALSE 57819
// exit ;
57817: GO 58815
// for i in factories do
57819: LD_ADDR_VAR 0 8
57823: PUSH
57824: LD_VAR 0 6
57828: PUSH
57829: FOR_IN
57830: IFFALSE 57855
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57832: LD_ADDR_VAR 0 17
57836: PUSH
57837: LD_VAR 0 17
57841: PUSH
57842: LD_VAR 0 8
57846: PPUSH
57847: CALL_OW 478
57851: UNION
57852: ST_TO_ADDR
57853: GO 57829
57855: POP
57856: POP
// if not fac_list then
57857: LD_VAR 0 17
57861: NOT
57862: IFFALSE 57866
// exit ;
57864: GO 58815
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57866: LD_ADDR_VAR 0 5
57870: PUSH
57871: LD_INT 4
57873: PUSH
57874: LD_INT 5
57876: PUSH
57877: LD_INT 9
57879: PUSH
57880: LD_INT 10
57882: PUSH
57883: LD_INT 6
57885: PUSH
57886: LD_INT 7
57888: PUSH
57889: LD_INT 11
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 27
57903: PUSH
57904: LD_INT 28
57906: PUSH
57907: LD_INT 26
57909: PUSH
57910: LD_INT 30
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 43
57921: PUSH
57922: LD_INT 44
57924: PUSH
57925: LD_INT 46
57927: PUSH
57928: LD_INT 45
57930: PUSH
57931: LD_INT 47
57933: PUSH
57934: LD_INT 49
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: PUSH
57950: LD_VAR 0 12
57954: ARRAY
57955: ST_TO_ADDR
// for i in list do
57956: LD_ADDR_VAR 0 8
57960: PUSH
57961: LD_VAR 0 5
57965: PUSH
57966: FOR_IN
57967: IFFALSE 58000
// if not i in fac_list then
57969: LD_VAR 0 8
57973: PUSH
57974: LD_VAR 0 17
57978: IN
57979: NOT
57980: IFFALSE 57998
// list := list diff i ;
57982: LD_ADDR_VAR 0 5
57986: PUSH
57987: LD_VAR 0 5
57991: PUSH
57992: LD_VAR 0 8
57996: DIFF
57997: ST_TO_ADDR
57998: GO 57966
58000: POP
58001: POP
// if not list then
58002: LD_VAR 0 5
58006: NOT
58007: IFFALSE 58011
// exit ;
58009: GO 58815
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
58011: LD_VAR 0 12
58015: PUSH
58016: LD_INT 3
58018: EQUAL
58019: PUSH
58020: LD_INT 49
58022: PUSH
58023: LD_VAR 0 5
58027: IN
58028: AND
58029: PUSH
58030: LD_INT 31
58032: PPUSH
58033: LD_VAR 0 16
58037: PPUSH
58038: CALL_OW 321
58042: PUSH
58043: LD_INT 2
58045: EQUAL
58046: AND
58047: IFFALSE 58107
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
58049: LD_INT 22
58051: PUSH
58052: LD_VAR 0 16
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 35
58063: PUSH
58064: LD_INT 49
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 91
58073: PUSH
58074: LD_VAR 0 1
58078: PUSH
58079: LD_INT 10
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: LIST
58091: PPUSH
58092: CALL_OW 69
58096: NOT
58097: IFFALSE 58107
// weapon := ru_time_lapser ;
58099: LD_ADDR_VAR 0 18
58103: PUSH
58104: LD_INT 49
58106: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
58107: LD_VAR 0 12
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: IN
58122: PUSH
58123: LD_INT 11
58125: PUSH
58126: LD_VAR 0 5
58130: IN
58131: PUSH
58132: LD_INT 30
58134: PUSH
58135: LD_VAR 0 5
58139: IN
58140: OR
58141: AND
58142: PUSH
58143: LD_INT 6
58145: PPUSH
58146: LD_VAR 0 16
58150: PPUSH
58151: CALL_OW 321
58155: PUSH
58156: LD_INT 2
58158: EQUAL
58159: AND
58160: IFFALSE 58325
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
58162: LD_INT 22
58164: PUSH
58165: LD_VAR 0 16
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: LD_INT 35
58179: PUSH
58180: LD_INT 11
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 35
58189: PUSH
58190: LD_INT 30
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 91
58204: PUSH
58205: LD_VAR 0 1
58209: PUSH
58210: LD_INT 18
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: PPUSH
58223: CALL_OW 69
58227: NOT
58228: PUSH
58229: LD_INT 22
58231: PUSH
58232: LD_VAR 0 16
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: LD_INT 30
58246: PUSH
58247: LD_INT 32
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 30
58256: PUSH
58257: LD_INT 33
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 91
58271: PUSH
58272: LD_VAR 0 1
58276: PUSH
58277: LD_INT 12
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: PPUSH
58293: CALL_OW 69
58297: PUSH
58298: LD_INT 2
58300: GREATER
58301: AND
58302: IFFALSE 58325
// weapon := [ us_radar , ar_radar ] [ nat ] ;
58304: LD_ADDR_VAR 0 18
58308: PUSH
58309: LD_INT 11
58311: PUSH
58312: LD_INT 30
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_VAR 0 12
58323: ARRAY
58324: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
58325: LD_VAR 0 18
58329: NOT
58330: PUSH
58331: LD_INT 40
58333: PPUSH
58334: LD_VAR 0 16
58338: PPUSH
58339: CALL_OW 321
58343: PUSH
58344: LD_INT 2
58346: EQUAL
58347: AND
58348: PUSH
58349: LD_INT 7
58351: PUSH
58352: LD_VAR 0 5
58356: IN
58357: PUSH
58358: LD_INT 28
58360: PUSH
58361: LD_VAR 0 5
58365: IN
58366: OR
58367: PUSH
58368: LD_INT 45
58370: PUSH
58371: LD_VAR 0 5
58375: IN
58376: OR
58377: AND
58378: IFFALSE 58632
// begin hex := GetHexInfo ( x , y ) ;
58380: LD_ADDR_VAR 0 4
58384: PUSH
58385: LD_VAR 0 10
58389: PPUSH
58390: LD_VAR 0 11
58394: PPUSH
58395: CALL_OW 546
58399: ST_TO_ADDR
// if hex [ 1 ] then
58400: LD_VAR 0 4
58404: PUSH
58405: LD_INT 1
58407: ARRAY
58408: IFFALSE 58412
// exit ;
58410: GO 58815
// height := hex [ 2 ] ;
58412: LD_ADDR_VAR 0 15
58416: PUSH
58417: LD_VAR 0 4
58421: PUSH
58422: LD_INT 2
58424: ARRAY
58425: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
58426: LD_ADDR_VAR 0 14
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: LD_INT 5
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// for i in tmp do
58449: LD_ADDR_VAR 0 8
58453: PUSH
58454: LD_VAR 0 14
58458: PUSH
58459: FOR_IN
58460: IFFALSE 58630
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
58462: LD_ADDR_VAR 0 9
58466: PUSH
58467: LD_VAR 0 10
58471: PPUSH
58472: LD_VAR 0 8
58476: PPUSH
58477: LD_INT 5
58479: PPUSH
58480: CALL_OW 272
58484: PUSH
58485: LD_VAR 0 11
58489: PPUSH
58490: LD_VAR 0 8
58494: PPUSH
58495: LD_INT 5
58497: PPUSH
58498: CALL_OW 273
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58507: LD_VAR 0 9
58511: PUSH
58512: LD_INT 1
58514: ARRAY
58515: PPUSH
58516: LD_VAR 0 9
58520: PUSH
58521: LD_INT 2
58523: ARRAY
58524: PPUSH
58525: CALL_OW 488
58529: IFFALSE 58628
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
58531: LD_ADDR_VAR 0 4
58535: PUSH
58536: LD_VAR 0 9
58540: PUSH
58541: LD_INT 1
58543: ARRAY
58544: PPUSH
58545: LD_VAR 0 9
58549: PUSH
58550: LD_INT 2
58552: ARRAY
58553: PPUSH
58554: CALL_OW 546
58558: ST_TO_ADDR
// if hex [ 1 ] then
58559: LD_VAR 0 4
58563: PUSH
58564: LD_INT 1
58566: ARRAY
58567: IFFALSE 58571
// continue ;
58569: GO 58459
// h := hex [ 2 ] ;
58571: LD_ADDR_VAR 0 13
58575: PUSH
58576: LD_VAR 0 4
58580: PUSH
58581: LD_INT 2
58583: ARRAY
58584: ST_TO_ADDR
// if h + 7 < height then
58585: LD_VAR 0 13
58589: PUSH
58590: LD_INT 7
58592: PLUS
58593: PUSH
58594: LD_VAR 0 15
58598: LESS
58599: IFFALSE 58628
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
58601: LD_ADDR_VAR 0 18
58605: PUSH
58606: LD_INT 7
58608: PUSH
58609: LD_INT 28
58611: PUSH
58612: LD_INT 45
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: PUSH
58620: LD_VAR 0 12
58624: ARRAY
58625: ST_TO_ADDR
// break ;
58626: GO 58630
// end ; end ; end ;
58628: GO 58459
58630: POP
58631: POP
// end ; if not weapon then
58632: LD_VAR 0 18
58636: NOT
58637: IFFALSE 58697
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
58639: LD_ADDR_VAR 0 5
58643: PUSH
58644: LD_VAR 0 5
58648: PUSH
58649: LD_INT 11
58651: PUSH
58652: LD_INT 30
58654: PUSH
58655: LD_INT 49
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: LIST
58662: DIFF
58663: ST_TO_ADDR
// if not list then
58664: LD_VAR 0 5
58668: NOT
58669: IFFALSE 58673
// exit ;
58671: GO 58815
// weapon := list [ rand ( 1 , list ) ] ;
58673: LD_ADDR_VAR 0 18
58677: PUSH
58678: LD_VAR 0 5
58682: PUSH
58683: LD_INT 1
58685: PPUSH
58686: LD_VAR 0 5
58690: PPUSH
58691: CALL_OW 12
58695: ARRAY
58696: ST_TO_ADDR
// end ; if weapon then
58697: LD_VAR 0 18
58701: IFFALSE 58815
// begin tmp := CostOfWeapon ( weapon ) ;
58703: LD_ADDR_VAR 0 14
58707: PUSH
58708: LD_VAR 0 18
58712: PPUSH
58713: CALL_OW 451
58717: ST_TO_ADDR
// j := GetBase ( tower ) ;
58718: LD_ADDR_VAR 0 9
58722: PUSH
58723: LD_VAR 0 1
58727: PPUSH
58728: CALL_OW 274
58732: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58733: LD_VAR 0 9
58737: PPUSH
58738: LD_INT 1
58740: PPUSH
58741: CALL_OW 275
58745: PUSH
58746: LD_VAR 0 14
58750: PUSH
58751: LD_INT 1
58753: ARRAY
58754: GREATEREQUAL
58755: PUSH
58756: LD_VAR 0 9
58760: PPUSH
58761: LD_INT 2
58763: PPUSH
58764: CALL_OW 275
58768: PUSH
58769: LD_VAR 0 14
58773: PUSH
58774: LD_INT 2
58776: ARRAY
58777: GREATEREQUAL
58778: AND
58779: PUSH
58780: LD_VAR 0 9
58784: PPUSH
58785: LD_INT 3
58787: PPUSH
58788: CALL_OW 275
58792: PUSH
58793: LD_VAR 0 14
58797: PUSH
58798: LD_INT 3
58800: ARRAY
58801: GREATEREQUAL
58802: AND
58803: IFFALSE 58815
// result := weapon ;
58805: LD_ADDR_VAR 0 3
58809: PUSH
58810: LD_VAR 0 18
58814: ST_TO_ADDR
// end ; end ;
58815: LD_VAR 0 3
58819: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58820: LD_INT 0
58822: PPUSH
58823: PPUSH
// result := true ;
58824: LD_ADDR_VAR 0 3
58828: PUSH
58829: LD_INT 1
58831: ST_TO_ADDR
// if array1 = array2 then
58832: LD_VAR 0 1
58836: PUSH
58837: LD_VAR 0 2
58841: EQUAL
58842: IFFALSE 58902
// begin for i = 1 to array1 do
58844: LD_ADDR_VAR 0 4
58848: PUSH
58849: DOUBLE
58850: LD_INT 1
58852: DEC
58853: ST_TO_ADDR
58854: LD_VAR 0 1
58858: PUSH
58859: FOR_TO
58860: IFFALSE 58898
// if array1 [ i ] <> array2 [ i ] then
58862: LD_VAR 0 1
58866: PUSH
58867: LD_VAR 0 4
58871: ARRAY
58872: PUSH
58873: LD_VAR 0 2
58877: PUSH
58878: LD_VAR 0 4
58882: ARRAY
58883: NONEQUAL
58884: IFFALSE 58896
// begin result := false ;
58886: LD_ADDR_VAR 0 3
58890: PUSH
58891: LD_INT 0
58893: ST_TO_ADDR
// break ;
58894: GO 58898
// end ;
58896: GO 58859
58898: POP
58899: POP
// end else
58900: GO 58910
// result := false ;
58902: LD_ADDR_VAR 0 3
58906: PUSH
58907: LD_INT 0
58909: ST_TO_ADDR
// end ;
58910: LD_VAR 0 3
58914: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58915: LD_INT 0
58917: PPUSH
58918: PPUSH
58919: PPUSH
// pom := GetBase ( fac ) ;
58920: LD_ADDR_VAR 0 5
58924: PUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 274
58934: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
58935: LD_ADDR_VAR 0 4
58939: PUSH
58940: LD_VAR 0 2
58944: PUSH
58945: LD_INT 1
58947: ARRAY
58948: PPUSH
58949: LD_VAR 0 2
58953: PUSH
58954: LD_INT 2
58956: ARRAY
58957: PPUSH
58958: LD_VAR 0 2
58962: PUSH
58963: LD_INT 3
58965: ARRAY
58966: PPUSH
58967: LD_VAR 0 2
58971: PUSH
58972: LD_INT 4
58974: ARRAY
58975: PPUSH
58976: CALL_OW 449
58980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58981: LD_ADDR_VAR 0 3
58985: PUSH
58986: LD_VAR 0 5
58990: PPUSH
58991: LD_INT 1
58993: PPUSH
58994: CALL_OW 275
58998: PUSH
58999: LD_VAR 0 4
59003: PUSH
59004: LD_INT 1
59006: ARRAY
59007: GREATEREQUAL
59008: PUSH
59009: LD_VAR 0 5
59013: PPUSH
59014: LD_INT 2
59016: PPUSH
59017: CALL_OW 275
59021: PUSH
59022: LD_VAR 0 4
59026: PUSH
59027: LD_INT 2
59029: ARRAY
59030: GREATEREQUAL
59031: AND
59032: PUSH
59033: LD_VAR 0 5
59037: PPUSH
59038: LD_INT 3
59040: PPUSH
59041: CALL_OW 275
59045: PUSH
59046: LD_VAR 0 4
59050: PUSH
59051: LD_INT 3
59053: ARRAY
59054: GREATEREQUAL
59055: AND
59056: ST_TO_ADDR
// end ;
59057: LD_VAR 0 3
59061: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
59062: LD_INT 0
59064: PPUSH
59065: PPUSH
59066: PPUSH
59067: PPUSH
// pom := GetBase ( building ) ;
59068: LD_ADDR_VAR 0 3
59072: PUSH
59073: LD_VAR 0 1
59077: PPUSH
59078: CALL_OW 274
59082: ST_TO_ADDR
// if not pom then
59083: LD_VAR 0 3
59087: NOT
59088: IFFALSE 59092
// exit ;
59090: GO 59262
// btype := GetBType ( building ) ;
59092: LD_ADDR_VAR 0 5
59096: PUSH
59097: LD_VAR 0 1
59101: PPUSH
59102: CALL_OW 266
59106: ST_TO_ADDR
// if btype = b_armoury then
59107: LD_VAR 0 5
59111: PUSH
59112: LD_INT 4
59114: EQUAL
59115: IFFALSE 59125
// btype := b_barracks ;
59117: LD_ADDR_VAR 0 5
59121: PUSH
59122: LD_INT 5
59124: ST_TO_ADDR
// if btype = b_depot then
59125: LD_VAR 0 5
59129: PUSH
59130: LD_INT 0
59132: EQUAL
59133: IFFALSE 59143
// btype := b_warehouse ;
59135: LD_ADDR_VAR 0 5
59139: PUSH
59140: LD_INT 1
59142: ST_TO_ADDR
// if btype = b_workshop then
59143: LD_VAR 0 5
59147: PUSH
59148: LD_INT 2
59150: EQUAL
59151: IFFALSE 59161
// btype := b_factory ;
59153: LD_ADDR_VAR 0 5
59157: PUSH
59158: LD_INT 3
59160: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59161: LD_ADDR_VAR 0 4
59165: PUSH
59166: LD_VAR 0 5
59170: PPUSH
59171: LD_VAR 0 1
59175: PPUSH
59176: CALL_OW 248
59180: PPUSH
59181: CALL_OW 450
59185: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59186: LD_ADDR_VAR 0 2
59190: PUSH
59191: LD_VAR 0 3
59195: PPUSH
59196: LD_INT 1
59198: PPUSH
59199: CALL_OW 275
59203: PUSH
59204: LD_VAR 0 4
59208: PUSH
59209: LD_INT 1
59211: ARRAY
59212: GREATEREQUAL
59213: PUSH
59214: LD_VAR 0 3
59218: PPUSH
59219: LD_INT 2
59221: PPUSH
59222: CALL_OW 275
59226: PUSH
59227: LD_VAR 0 4
59231: PUSH
59232: LD_INT 2
59234: ARRAY
59235: GREATEREQUAL
59236: AND
59237: PUSH
59238: LD_VAR 0 3
59242: PPUSH
59243: LD_INT 3
59245: PPUSH
59246: CALL_OW 275
59250: PUSH
59251: LD_VAR 0 4
59255: PUSH
59256: LD_INT 3
59258: ARRAY
59259: GREATEREQUAL
59260: AND
59261: ST_TO_ADDR
// end ;
59262: LD_VAR 0 2
59266: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
59267: LD_INT 0
59269: PPUSH
59270: PPUSH
59271: PPUSH
// pom := GetBase ( building ) ;
59272: LD_ADDR_VAR 0 4
59276: PUSH
59277: LD_VAR 0 1
59281: PPUSH
59282: CALL_OW 274
59286: ST_TO_ADDR
// if not pom then
59287: LD_VAR 0 4
59291: NOT
59292: IFFALSE 59296
// exit ;
59294: GO 59397
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59296: LD_ADDR_VAR 0 5
59300: PUSH
59301: LD_VAR 0 2
59305: PPUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 248
59315: PPUSH
59316: CALL_OW 450
59320: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59321: LD_ADDR_VAR 0 3
59325: PUSH
59326: LD_VAR 0 4
59330: PPUSH
59331: LD_INT 1
59333: PPUSH
59334: CALL_OW 275
59338: PUSH
59339: LD_VAR 0 5
59343: PUSH
59344: LD_INT 1
59346: ARRAY
59347: GREATEREQUAL
59348: PUSH
59349: LD_VAR 0 4
59353: PPUSH
59354: LD_INT 2
59356: PPUSH
59357: CALL_OW 275
59361: PUSH
59362: LD_VAR 0 5
59366: PUSH
59367: LD_INT 2
59369: ARRAY
59370: GREATEREQUAL
59371: AND
59372: PUSH
59373: LD_VAR 0 4
59377: PPUSH
59378: LD_INT 3
59380: PPUSH
59381: CALL_OW 275
59385: PUSH
59386: LD_VAR 0 5
59390: PUSH
59391: LD_INT 3
59393: ARRAY
59394: GREATEREQUAL
59395: AND
59396: ST_TO_ADDR
// end ;
59397: LD_VAR 0 3
59401: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
59402: LD_INT 0
59404: PPUSH
59405: PPUSH
59406: PPUSH
59407: PPUSH
59408: PPUSH
59409: PPUSH
59410: PPUSH
59411: PPUSH
59412: PPUSH
59413: PPUSH
// result := false ;
59414: LD_ADDR_VAR 0 6
59418: PUSH
59419: LD_INT 0
59421: ST_TO_ADDR
// if not base or not btype or not x or not y then
59422: LD_VAR 0 1
59426: NOT
59427: PUSH
59428: LD_VAR 0 2
59432: NOT
59433: OR
59434: PUSH
59435: LD_VAR 0 3
59439: NOT
59440: OR
59441: PUSH
59442: LD_VAR 0 4
59446: NOT
59447: OR
59448: IFFALSE 59452
// exit ;
59450: GO 60061
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
59452: LD_ADDR_VAR 0 12
59456: PUSH
59457: LD_VAR 0 2
59461: PPUSH
59462: LD_VAR 0 3
59466: PPUSH
59467: LD_VAR 0 4
59471: PPUSH
59472: LD_VAR 0 5
59476: PPUSH
59477: LD_VAR 0 1
59481: PUSH
59482: LD_INT 1
59484: ARRAY
59485: PPUSH
59486: CALL_OW 248
59490: PPUSH
59491: LD_INT 0
59493: PPUSH
59494: CALL 60898 0 6
59498: ST_TO_ADDR
// if not hexes then
59499: LD_VAR 0 12
59503: NOT
59504: IFFALSE 59508
// exit ;
59506: GO 60061
// for i = 1 to hexes do
59508: LD_ADDR_VAR 0 7
59512: PUSH
59513: DOUBLE
59514: LD_INT 1
59516: DEC
59517: ST_TO_ADDR
59518: LD_VAR 0 12
59522: PUSH
59523: FOR_TO
59524: IFFALSE 60059
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59526: LD_ADDR_VAR 0 11
59530: PUSH
59531: LD_VAR 0 12
59535: PUSH
59536: LD_VAR 0 7
59540: ARRAY
59541: PUSH
59542: LD_INT 1
59544: ARRAY
59545: PPUSH
59546: LD_VAR 0 12
59550: PUSH
59551: LD_VAR 0 7
59555: ARRAY
59556: PUSH
59557: LD_INT 2
59559: ARRAY
59560: PPUSH
59561: CALL_OW 428
59565: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59566: LD_VAR 0 12
59570: PUSH
59571: LD_VAR 0 7
59575: ARRAY
59576: PUSH
59577: LD_INT 1
59579: ARRAY
59580: PPUSH
59581: LD_VAR 0 12
59585: PUSH
59586: LD_VAR 0 7
59590: ARRAY
59591: PUSH
59592: LD_INT 2
59594: ARRAY
59595: PPUSH
59596: CALL_OW 351
59600: PUSH
59601: LD_VAR 0 12
59605: PUSH
59606: LD_VAR 0 7
59610: ARRAY
59611: PUSH
59612: LD_INT 1
59614: ARRAY
59615: PPUSH
59616: LD_VAR 0 12
59620: PUSH
59621: LD_VAR 0 7
59625: ARRAY
59626: PUSH
59627: LD_INT 2
59629: ARRAY
59630: PPUSH
59631: CALL_OW 488
59635: NOT
59636: OR
59637: PUSH
59638: LD_VAR 0 11
59642: PPUSH
59643: CALL_OW 247
59647: PUSH
59648: LD_INT 3
59650: EQUAL
59651: OR
59652: IFFALSE 59658
// exit ;
59654: POP
59655: POP
59656: GO 60061
// if not tmp or not tmp in base then
59658: LD_VAR 0 11
59662: NOT
59663: PUSH
59664: LD_VAR 0 11
59668: PUSH
59669: LD_VAR 0 1
59673: IN
59674: NOT
59675: OR
59676: IFFALSE 59680
// continue ;
59678: GO 59523
// result := true ;
59680: LD_ADDR_VAR 0 6
59684: PUSH
59685: LD_INT 1
59687: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59688: LD_ADDR_VAR 0 15
59692: PUSH
59693: LD_VAR 0 1
59697: PPUSH
59698: LD_INT 22
59700: PUSH
59701: LD_VAR 0 11
59705: PPUSH
59706: CALL_OW 255
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 30
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 30
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PPUSH
59747: CALL_OW 72
59751: ST_TO_ADDR
// if dep then
59752: LD_VAR 0 15
59756: IFFALSE 59892
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
59758: LD_ADDR_VAR 0 14
59762: PUSH
59763: LD_VAR 0 15
59767: PUSH
59768: LD_INT 1
59770: ARRAY
59771: PPUSH
59772: CALL_OW 250
59776: PPUSH
59777: LD_VAR 0 15
59781: PUSH
59782: LD_INT 1
59784: ARRAY
59785: PPUSH
59786: CALL_OW 254
59790: PPUSH
59791: LD_INT 5
59793: PPUSH
59794: CALL_OW 272
59798: PUSH
59799: LD_VAR 0 15
59803: PUSH
59804: LD_INT 1
59806: ARRAY
59807: PPUSH
59808: CALL_OW 251
59812: PPUSH
59813: LD_VAR 0 15
59817: PUSH
59818: LD_INT 1
59820: ARRAY
59821: PPUSH
59822: CALL_OW 254
59826: PPUSH
59827: LD_INT 5
59829: PPUSH
59830: CALL_OW 273
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
59839: LD_VAR 0 14
59843: PUSH
59844: LD_INT 1
59846: ARRAY
59847: PPUSH
59848: LD_VAR 0 14
59852: PUSH
59853: LD_INT 2
59855: ARRAY
59856: PPUSH
59857: CALL_OW 488
59861: IFFALSE 59892
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
59863: LD_VAR 0 11
59867: PPUSH
59868: LD_VAR 0 14
59872: PUSH
59873: LD_INT 1
59875: ARRAY
59876: PPUSH
59877: LD_VAR 0 14
59881: PUSH
59882: LD_INT 2
59884: ARRAY
59885: PPUSH
59886: CALL_OW 111
// continue ;
59890: GO 59523
// end ; end ; r := GetDir ( tmp ) ;
59892: LD_ADDR_VAR 0 13
59896: PUSH
59897: LD_VAR 0 11
59901: PPUSH
59902: CALL_OW 254
59906: ST_TO_ADDR
// if r = 5 then
59907: LD_VAR 0 13
59911: PUSH
59912: LD_INT 5
59914: EQUAL
59915: IFFALSE 59925
// r := 0 ;
59917: LD_ADDR_VAR 0 13
59921: PUSH
59922: LD_INT 0
59924: ST_TO_ADDR
// for j = r to 5 do
59925: LD_ADDR_VAR 0 8
59929: PUSH
59930: DOUBLE
59931: LD_VAR 0 13
59935: DEC
59936: ST_TO_ADDR
59937: LD_INT 5
59939: PUSH
59940: FOR_TO
59941: IFFALSE 60055
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
59943: LD_ADDR_VAR 0 9
59947: PUSH
59948: LD_VAR 0 11
59952: PPUSH
59953: CALL_OW 250
59957: PPUSH
59958: LD_VAR 0 8
59962: PPUSH
59963: LD_INT 2
59965: PPUSH
59966: CALL_OW 272
59970: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
59971: LD_ADDR_VAR 0 10
59975: PUSH
59976: LD_VAR 0 11
59980: PPUSH
59981: CALL_OW 251
59985: PPUSH
59986: LD_VAR 0 8
59990: PPUSH
59991: LD_INT 2
59993: PPUSH
59994: CALL_OW 273
59998: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
59999: LD_VAR 0 9
60003: PPUSH
60004: LD_VAR 0 10
60008: PPUSH
60009: CALL_OW 488
60013: PUSH
60014: LD_VAR 0 9
60018: PPUSH
60019: LD_VAR 0 10
60023: PPUSH
60024: CALL_OW 428
60028: NOT
60029: AND
60030: IFFALSE 60053
// begin ComMoveXY ( tmp , _x , _y ) ;
60032: LD_VAR 0 11
60036: PPUSH
60037: LD_VAR 0 9
60041: PPUSH
60042: LD_VAR 0 10
60046: PPUSH
60047: CALL_OW 111
// break ;
60051: GO 60055
// end ; end ;
60053: GO 59940
60055: POP
60056: POP
// end ;
60057: GO 59523
60059: POP
60060: POP
// end ;
60061: LD_VAR 0 6
60065: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
60066: LD_INT 0
60068: PPUSH
60069: PPUSH
60070: PPUSH
60071: PPUSH
60072: PPUSH
60073: PPUSH
60074: PPUSH
60075: PPUSH
60076: PPUSH
60077: PPUSH
// result := false ;
60078: LD_ADDR_VAR 0 6
60082: PUSH
60083: LD_INT 0
60085: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
60086: LD_VAR 0 1
60090: NOT
60091: PUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: CALL_OW 266
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: IN
60112: NOT
60113: OR
60114: PUSH
60115: LD_VAR 0 2
60119: NOT
60120: OR
60121: PUSH
60122: LD_VAR 0 5
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 4
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: IN
60153: NOT
60154: OR
60155: PUSH
60156: LD_VAR 0 3
60160: PPUSH
60161: LD_VAR 0 4
60165: PPUSH
60166: CALL_OW 488
60170: NOT
60171: OR
60172: IFFALSE 60176
// exit ;
60174: GO 60893
// pom := GetBase ( depot ) ;
60176: LD_ADDR_VAR 0 10
60180: PUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL_OW 274
60190: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
60191: LD_ADDR_VAR 0 11
60195: PUSH
60196: LD_VAR 0 2
60200: PPUSH
60201: LD_VAR 0 1
60205: PPUSH
60206: CALL_OW 248
60210: PPUSH
60211: CALL_OW 450
60215: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
60216: LD_VAR 0 10
60220: PPUSH
60221: LD_INT 1
60223: PPUSH
60224: CALL_OW 275
60228: PUSH
60229: LD_VAR 0 11
60233: PUSH
60234: LD_INT 1
60236: ARRAY
60237: GREATEREQUAL
60238: PUSH
60239: LD_VAR 0 10
60243: PPUSH
60244: LD_INT 2
60246: PPUSH
60247: CALL_OW 275
60251: PUSH
60252: LD_VAR 0 11
60256: PUSH
60257: LD_INT 2
60259: ARRAY
60260: GREATEREQUAL
60261: AND
60262: PUSH
60263: LD_VAR 0 10
60267: PPUSH
60268: LD_INT 3
60270: PPUSH
60271: CALL_OW 275
60275: PUSH
60276: LD_VAR 0 11
60280: PUSH
60281: LD_INT 3
60283: ARRAY
60284: GREATEREQUAL
60285: AND
60286: NOT
60287: IFFALSE 60291
// exit ;
60289: GO 60893
// if GetBType ( depot ) = b_depot then
60291: LD_VAR 0 1
60295: PPUSH
60296: CALL_OW 266
60300: PUSH
60301: LD_INT 0
60303: EQUAL
60304: IFFALSE 60316
// dist := 28 else
60306: LD_ADDR_VAR 0 14
60310: PUSH
60311: LD_INT 28
60313: ST_TO_ADDR
60314: GO 60324
// dist := 36 ;
60316: LD_ADDR_VAR 0 14
60320: PUSH
60321: LD_INT 36
60323: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
60324: LD_VAR 0 1
60328: PPUSH
60329: LD_VAR 0 3
60333: PPUSH
60334: LD_VAR 0 4
60338: PPUSH
60339: CALL_OW 297
60343: PUSH
60344: LD_VAR 0 14
60348: GREATER
60349: IFFALSE 60353
// exit ;
60351: GO 60893
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
60353: LD_ADDR_VAR 0 12
60357: PUSH
60358: LD_VAR 0 2
60362: PPUSH
60363: LD_VAR 0 3
60367: PPUSH
60368: LD_VAR 0 4
60372: PPUSH
60373: LD_VAR 0 5
60377: PPUSH
60378: LD_VAR 0 1
60382: PPUSH
60383: CALL_OW 248
60387: PPUSH
60388: LD_INT 0
60390: PPUSH
60391: CALL 60898 0 6
60395: ST_TO_ADDR
// if not hexes then
60396: LD_VAR 0 12
60400: NOT
60401: IFFALSE 60405
// exit ;
60403: GO 60893
// hex := GetHexInfo ( x , y ) ;
60405: LD_ADDR_VAR 0 15
60409: PUSH
60410: LD_VAR 0 3
60414: PPUSH
60415: LD_VAR 0 4
60419: PPUSH
60420: CALL_OW 546
60424: ST_TO_ADDR
// if hex [ 1 ] then
60425: LD_VAR 0 15
60429: PUSH
60430: LD_INT 1
60432: ARRAY
60433: IFFALSE 60437
// exit ;
60435: GO 60893
// height := hex [ 2 ] ;
60437: LD_ADDR_VAR 0 13
60441: PUSH
60442: LD_VAR 0 15
60446: PUSH
60447: LD_INT 2
60449: ARRAY
60450: ST_TO_ADDR
// for i = 1 to hexes do
60451: LD_ADDR_VAR 0 7
60455: PUSH
60456: DOUBLE
60457: LD_INT 1
60459: DEC
60460: ST_TO_ADDR
60461: LD_VAR 0 12
60465: PUSH
60466: FOR_TO
60467: IFFALSE 60797
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
60469: LD_VAR 0 12
60473: PUSH
60474: LD_VAR 0 7
60478: ARRAY
60479: PUSH
60480: LD_INT 1
60482: ARRAY
60483: PPUSH
60484: LD_VAR 0 12
60488: PUSH
60489: LD_VAR 0 7
60493: ARRAY
60494: PUSH
60495: LD_INT 2
60497: ARRAY
60498: PPUSH
60499: CALL_OW 488
60503: NOT
60504: PUSH
60505: LD_VAR 0 12
60509: PUSH
60510: LD_VAR 0 7
60514: ARRAY
60515: PUSH
60516: LD_INT 1
60518: ARRAY
60519: PPUSH
60520: LD_VAR 0 12
60524: PUSH
60525: LD_VAR 0 7
60529: ARRAY
60530: PUSH
60531: LD_INT 2
60533: ARRAY
60534: PPUSH
60535: CALL_OW 428
60539: PUSH
60540: LD_INT 0
60542: GREATER
60543: OR
60544: PUSH
60545: LD_VAR 0 12
60549: PUSH
60550: LD_VAR 0 7
60554: ARRAY
60555: PUSH
60556: LD_INT 1
60558: ARRAY
60559: PPUSH
60560: LD_VAR 0 12
60564: PUSH
60565: LD_VAR 0 7
60569: ARRAY
60570: PUSH
60571: LD_INT 2
60573: ARRAY
60574: PPUSH
60575: CALL_OW 351
60579: OR
60580: IFFALSE 60586
// exit ;
60582: POP
60583: POP
60584: GO 60893
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60586: LD_ADDR_VAR 0 8
60590: PUSH
60591: LD_VAR 0 12
60595: PUSH
60596: LD_VAR 0 7
60600: ARRAY
60601: PUSH
60602: LD_INT 1
60604: ARRAY
60605: PPUSH
60606: LD_VAR 0 12
60610: PUSH
60611: LD_VAR 0 7
60615: ARRAY
60616: PUSH
60617: LD_INT 2
60619: ARRAY
60620: PPUSH
60621: CALL_OW 546
60625: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
60626: LD_VAR 0 8
60630: PUSH
60631: LD_INT 1
60633: ARRAY
60634: PUSH
60635: LD_VAR 0 8
60639: PUSH
60640: LD_INT 2
60642: ARRAY
60643: PUSH
60644: LD_VAR 0 13
60648: PUSH
60649: LD_INT 2
60651: PLUS
60652: GREATER
60653: OR
60654: PUSH
60655: LD_VAR 0 8
60659: PUSH
60660: LD_INT 2
60662: ARRAY
60663: PUSH
60664: LD_VAR 0 13
60668: PUSH
60669: LD_INT 2
60671: MINUS
60672: LESS
60673: OR
60674: PUSH
60675: LD_VAR 0 8
60679: PUSH
60680: LD_INT 3
60682: ARRAY
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 8
60689: PUSH
60690: LD_INT 9
60692: PUSH
60693: LD_INT 10
60695: PUSH
60696: LD_INT 11
60698: PUSH
60699: LD_INT 12
60701: PUSH
60702: LD_INT 13
60704: PUSH
60705: LD_INT 16
60707: PUSH
60708: LD_INT 17
60710: PUSH
60711: LD_INT 18
60713: PUSH
60714: LD_INT 19
60716: PUSH
60717: LD_INT 20
60719: PUSH
60720: LD_INT 21
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: IN
60738: NOT
60739: OR
60740: PUSH
60741: LD_VAR 0 8
60745: PUSH
60746: LD_INT 5
60748: ARRAY
60749: NOT
60750: OR
60751: PUSH
60752: LD_VAR 0 8
60756: PUSH
60757: LD_INT 6
60759: ARRAY
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: LD_INT 7
60769: PUSH
60770: LD_INT 9
60772: PUSH
60773: LD_INT 10
60775: PUSH
60776: LD_INT 11
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: IN
60787: NOT
60788: OR
60789: IFFALSE 60795
// exit ;
60791: POP
60792: POP
60793: GO 60893
// end ;
60795: GO 60466
60797: POP
60798: POP
// side := GetSide ( depot ) ;
60799: LD_ADDR_VAR 0 9
60803: PUSH
60804: LD_VAR 0 1
60808: PPUSH
60809: CALL_OW 255
60813: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60814: LD_VAR 0 9
60818: PPUSH
60819: LD_VAR 0 3
60823: PPUSH
60824: LD_VAR 0 4
60828: PPUSH
60829: LD_INT 20
60831: PPUSH
60832: CALL 53547 0 4
60836: PUSH
60837: LD_INT 4
60839: ARRAY
60840: IFFALSE 60844
// exit ;
60842: GO 60893
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60844: LD_VAR 0 2
60848: PUSH
60849: LD_INT 29
60851: PUSH
60852: LD_INT 30
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: IN
60859: PUSH
60860: LD_VAR 0 3
60864: PPUSH
60865: LD_VAR 0 4
60869: PPUSH
60870: LD_VAR 0 9
60874: PPUSH
60875: CALL_OW 440
60879: NOT
60880: AND
60881: IFFALSE 60885
// exit ;
60883: GO 60893
// result := true ;
60885: LD_ADDR_VAR 0 6
60889: PUSH
60890: LD_INT 1
60892: ST_TO_ADDR
// end ;
60893: LD_VAR 0 6
60897: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
60898: LD_INT 0
60900: PPUSH
60901: PPUSH
60902: PPUSH
60903: PPUSH
60904: PPUSH
60905: PPUSH
60906: PPUSH
60907: PPUSH
60908: PPUSH
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
60917: PPUSH
60918: PPUSH
60919: PPUSH
60920: PPUSH
60921: PPUSH
60922: PPUSH
60923: PPUSH
60924: PPUSH
60925: PPUSH
60926: PPUSH
60927: PPUSH
60928: PPUSH
60929: PPUSH
60930: PPUSH
60931: PPUSH
60932: PPUSH
60933: PPUSH
60934: PPUSH
60935: PPUSH
60936: PPUSH
60937: PPUSH
60938: PPUSH
60939: PPUSH
60940: PPUSH
60941: PPUSH
60942: PPUSH
60943: PPUSH
60944: PPUSH
60945: PPUSH
60946: PPUSH
60947: PPUSH
60948: PPUSH
60949: PPUSH
60950: PPUSH
60951: PPUSH
60952: PPUSH
60953: PPUSH
60954: PPUSH
60955: PPUSH
60956: PPUSH
60957: PPUSH
// result = [ ] ;
60958: LD_ADDR_VAR 0 7
60962: PUSH
60963: EMPTY
60964: ST_TO_ADDR
// temp_list = [ ] ;
60965: LD_ADDR_VAR 0 9
60969: PUSH
60970: EMPTY
60971: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60972: LD_VAR 0 4
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: LD_INT 4
60991: PUSH
60992: LD_INT 5
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: IN
61003: NOT
61004: PUSH
61005: LD_VAR 0 1
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: IN
61020: PUSH
61021: LD_VAR 0 5
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: IN
61040: NOT
61041: AND
61042: OR
61043: IFFALSE 61047
// exit ;
61045: GO 79438
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61047: LD_VAR 0 1
61051: PUSH
61052: LD_INT 6
61054: PUSH
61055: LD_INT 7
61057: PUSH
61058: LD_INT 8
61060: PUSH
61061: LD_INT 13
61063: PUSH
61064: LD_INT 12
61066: PUSH
61067: LD_INT 15
61069: PUSH
61070: LD_INT 11
61072: PUSH
61073: LD_INT 14
61075: PUSH
61076: LD_INT 10
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: IN
61090: IFFALSE 61100
// btype = b_lab ;
61092: LD_ADDR_VAR 0 1
61096: PUSH
61097: LD_INT 6
61099: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
61100: LD_VAR 0 6
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: IN
61119: NOT
61120: PUSH
61121: LD_VAR 0 1
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: LD_INT 6
61140: PUSH
61141: LD_INT 36
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: LD_INT 5
61149: PUSH
61150: LD_INT 31
61152: PUSH
61153: LD_INT 32
61155: PUSH
61156: LD_INT 33
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: IN
61172: NOT
61173: PUSH
61174: LD_VAR 0 6
61178: PUSH
61179: LD_INT 1
61181: EQUAL
61182: AND
61183: OR
61184: PUSH
61185: LD_VAR 0 1
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: IN
61200: NOT
61201: PUSH
61202: LD_VAR 0 6
61206: PUSH
61207: LD_INT 2
61209: EQUAL
61210: AND
61211: OR
61212: IFFALSE 61222
// mode = 0 ;
61214: LD_ADDR_VAR 0 6
61218: PUSH
61219: LD_INT 0
61221: ST_TO_ADDR
// case mode of 0 :
61222: LD_VAR 0 6
61226: PUSH
61227: LD_INT 0
61229: DOUBLE
61230: EQUAL
61231: IFTRUE 61235
61233: GO 72688
61235: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61236: LD_ADDR_VAR 0 11
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61429: LD_ADDR_VAR 0 12
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61625: LD_ADDR_VAR 0 13
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: NEG
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 3
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 3
61796: NEG
61797: PUSH
61798: LD_INT 3
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61824: LD_ADDR_VAR 0 14
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 3
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 3
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62020: LD_ADDR_VAR 0 15
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62213: LD_ADDR_VAR 0 16
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: LD_INT 3
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 3
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62406: LD_ADDR_VAR 0 17
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: LD_INT 2
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62636: LD_ADDR_VAR 0 18
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 2
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62866: LD_ADDR_VAR 0 19
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 2
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 2
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: LD_INT 2
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: NEG
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: NEG
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: LD_INT 2
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63096: LD_ADDR_VAR 0 20
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 2
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63326: LD_ADDR_VAR 0 21
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 2
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: NEG
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: LD_INT 2
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63556: LD_ADDR_VAR 0 22
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 2
63743: NEG
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 2
63755: NEG
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63786: LD_ADDR_VAR 0 23
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 2
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 2
63985: NEG
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 2
63997: NEG
63998: PUSH
63999: LD_INT 3
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 2
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64066: LD_ADDR_VAR 0 24
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: LD_INT 2
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 2
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 2
64253: NEG
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: LD_INT 2
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: LD_INT 2
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 3
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
64342: LD_ADDR_VAR 0 25
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 2
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 2
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 2
64518: NEG
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: NEG
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 3
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 2
64573: PUSH
64574: LD_INT 3
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64616: LD_ADDR_VAR 0 26
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: LD_INT 1
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 2
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 2
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 2
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: LD_INT 1
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 3
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64892: LD_ADDR_VAR 0 27
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: LD_INT 2
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 2
65079: NEG
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 2
65091: NEG
65092: PUSH
65093: LD_INT 2
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: NEG
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 3
65125: NEG
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: NEG
65138: PUSH
65139: LD_INT 2
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65172: LD_ADDR_VAR 0 28
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 2
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 2
65307: PUSH
65308: LD_INT 2
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: NEG
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: NEG
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 2
65371: NEG
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 3
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: NEG
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 3
65419: NEG
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65454: LD_ADDR_VAR 0 29
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 2
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 2
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 2
65644: NEG
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 3
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: NEG
65699: PUSH
65700: LD_INT 2
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65733: LD_ADDR_VAR 0 30
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: LD_INT 2
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 2
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: LD_INT 2
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 2
65899: NEG
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: LD_INT 3
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: LD_INT 2
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: LD_INT 2
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: LD_INT 3
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66011: LD_ADDR_VAR 0 31
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 0
66028: PUSH
66029: LD_INT 1
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 2
66135: PUSH
66136: LD_INT 2
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: LD_INT 2
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 2
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 2
66188: NEG
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 2
66200: NEG
66201: PUSH
66202: LD_INT 3
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 2
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 3
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66289: LD_ADDR_VAR 0 32
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 2
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: LD_INT 2
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 2
66455: NEG
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 2
66466: NEG
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: LD_INT 3
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: PUSH
66491: LD_INT 2
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 3
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 2
66521: NEG
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66567: LD_ADDR_VAR 0 33
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 2
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 2
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: LD_INT 2
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: LD_INT 2
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: NEG
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 2
66722: NEG
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 2
66733: NEG
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 2
66745: NEG
66746: PUSH
66747: LD_INT 2
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 2
66757: NEG
66758: PUSH
66759: LD_INT 3
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 3
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: LD_INT 3
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66846: LD_ADDR_VAR 0 34
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: LD_INT 2
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: LD_INT 1
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 2
67002: NEG
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 2
67013: NEG
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 2
67025: NEG
67026: PUSH
67027: LD_INT 2
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 1
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 2
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 2
67080: NEG
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67126: LD_ADDR_VAR 0 35
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 0
67143: PUSH
67144: LD_INT 1
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: NEG
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 2
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67238: LD_ADDR_VAR 0 36
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 1
67266: PUSH
67267: LD_INT 0
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 1
67276: PUSH
67277: LD_INT 1
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: LD_INT 1
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: NEG
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: NEG
67308: PUSH
67309: LD_INT 1
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67350: LD_ADDR_VAR 0 37
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 1
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: LD_INT 1
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 1
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67462: LD_ADDR_VAR 0 38
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: NEG
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67574: LD_ADDR_VAR 0 39
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 1
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: LD_INT 2
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67686: LD_ADDR_VAR 0 40
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 0
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: LD_INT 1
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: LD_INT 1
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 1
67744: NEG
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: LD_INT 1
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 1
67778: NEG
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67798: LD_ADDR_VAR 0 41
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: LD_INT 1
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: NEG
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: LD_INT 1
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 1
67879: NEG
67880: PUSH
67881: LD_INT 2
67883: NEG
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 1
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: LD_INT 2
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 1
67942: NEG
67943: PUSH
67944: LD_INT 1
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 2
67953: NEG
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 2
67976: NEG
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 2
67988: NEG
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 3
68021: PUSH
68022: LD_INT 1
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 2
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 3
68072: NEG
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 3
68083: NEG
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 2
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: LD_INT 3
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68148: LD_ADDR_VAR 0 42
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 1
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: NEG
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 2
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 1
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 2
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 1
68283: PUSH
68284: LD_INT 2
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: LD_INT 1
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 2
68314: NEG
68315: PUSH
68316: LD_INT 1
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 2
68338: NEG
68339: PUSH
68340: LD_INT 3
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 1
68350: NEG
68351: PUSH
68352: LD_INT 3
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 1
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: LD_INT 2
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: PUSH
68395: LD_INT 3
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 2
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 1
68434: NEG
68435: PUSH
68436: LD_INT 2
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 3
68445: NEG
68446: PUSH
68447: LD_INT 2
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 3
68457: NEG
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68498: LD_ADDR_VAR 0 43
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: LD_INT 1
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 1
68536: PUSH
68537: LD_INT 1
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 1
68556: NEG
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: PUSH
68569: LD_INT 1
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 1
68579: NEG
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: LD_INT 2
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 1
68602: PUSH
68603: LD_INT 1
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 2
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 2
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 1
68653: NEG
68654: PUSH
68655: LD_INT 1
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 2
68664: NEG
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 2
68675: NEG
68676: PUSH
68677: LD_INT 1
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 1
68687: NEG
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 0
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 1
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 2
68721: PUSH
68722: LD_INT 1
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 3
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 1
68752: PUSH
68753: LD_INT 3
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: LD_INT 3
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 1
68772: NEG
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 2
68783: NEG
68784: PUSH
68785: LD_INT 1
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 3
68794: NEG
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 3
68805: NEG
68806: PUSH
68807: LD_INT 1
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68846: LD_ADDR_VAR 0 44
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 1
68884: PUSH
68885: LD_INT 1
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 1
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: LD_INT 1
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: PUSH
68929: LD_INT 2
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 1
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 2
68960: PUSH
68961: LD_INT 1
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 1
68980: PUSH
68981: LD_INT 2
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 1
68990: NEG
68991: PUSH
68992: LD_INT 1
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 2
69024: NEG
69025: PUSH
69026: LD_INT 2
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 2
69036: NEG
69037: PUSH
69038: LD_INT 3
69040: NEG
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 2
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: LD_INT 1
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: LD_INT 2
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: LD_INT 3
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 2
69099: PUSH
69100: LD_INT 3
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 3
69120: NEG
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: NEG
69132: PUSH
69133: LD_INT 1
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 3
69155: NEG
69156: PUSH
69157: LD_INT 3
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69196: LD_ADDR_VAR 0 45
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 0
69213: PUSH
69214: LD_INT 1
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 1
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 1
69254: NEG
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 1
69277: NEG
69278: PUSH
69279: LD_INT 2
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 2
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 2
69311: PUSH
69312: LD_INT 1
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 2
69321: PUSH
69322: LD_INT 2
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: LD_INT 2
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 2
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: NEG
69352: PUSH
69353: LD_INT 1
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 2
69362: NEG
69363: PUSH
69364: LD_INT 1
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 2
69374: NEG
69375: PUSH
69376: LD_INT 2
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 2
69386: NEG
69387: PUSH
69388: LD_INT 3
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 1
69398: NEG
69399: PUSH
69400: LD_INT 3
69402: NEG
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 0
69410: PUSH
69411: LD_INT 3
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 1
69421: PUSH
69422: LD_INT 2
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 3
69432: PUSH
69433: LD_INT 2
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 3
69442: PUSH
69443: LD_INT 3
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 2
69452: PUSH
69453: LD_INT 3
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: LD_INT 3
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 1
69482: NEG
69483: PUSH
69484: LD_INT 2
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 3
69493: NEG
69494: PUSH
69495: LD_INT 2
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 3
69505: NEG
69506: PUSH
69507: LD_INT 3
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69546: LD_ADDR_VAR 0 46
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 1
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 1
69584: PUSH
69585: LD_INT 1
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: LD_INT 1
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 1
69604: NEG
69605: PUSH
69606: LD_INT 0
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: LD_INT 1
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 1
69627: NEG
69628: PUSH
69629: LD_INT 2
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: LD_INT 2
69642: NEG
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 1
69650: PUSH
69651: LD_INT 1
69653: NEG
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 2
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 2
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 1
69681: PUSH
69682: LD_INT 2
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 2
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 2
69712: NEG
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 2
69723: NEG
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 1
69735: NEG
69736: PUSH
69737: LD_INT 3
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: LD_INT 3
69750: NEG
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 1
69758: PUSH
69759: LD_INT 2
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 2
69769: PUSH
69770: LD_INT 1
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 3
69780: PUSH
69781: LD_INT 0
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 3
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 1
69800: PUSH
69801: LD_INT 3
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 3
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 1
69820: NEG
69821: PUSH
69822: LD_INT 2
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 2
69831: NEG
69832: PUSH
69833: LD_INT 1
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 3
69853: NEG
69854: PUSH
69855: LD_INT 1
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69894: LD_ADDR_VAR 0 47
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: LD_INT 1
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: LD_INT 2
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 2
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 1
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: NEG
70010: PUSH
70011: LD_INT 1
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 2
70021: NEG
70022: PUSH
70023: LD_INT 2
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70045: LD_ADDR_VAR 0 48
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: LD_INT 1
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: LD_INT 1
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: LD_INT 1
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: NEG
70115: PUSH
70116: LD_INT 1
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 1
70126: NEG
70127: PUSH
70128: LD_INT 2
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: LD_INT 2
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 1
70149: PUSH
70150: LD_INT 1
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 2
70160: PUSH
70161: LD_INT 0
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 2
70170: PUSH
70171: LD_INT 1
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70192: LD_ADDR_VAR 0 49
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 1
70230: PUSH
70231: LD_INT 1
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 0
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 1
70250: NEG
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 1
70261: NEG
70262: PUSH
70263: LD_INT 1
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: LD_INT 1
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 2
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 2
70294: PUSH
70295: LD_INT 1
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 2
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 1
70314: PUSH
70315: LD_INT 2
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70336: LD_ADDR_VAR 0 50
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: LD_INT 0
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: LD_INT 1
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: LD_INT 1
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: LD_INT 1
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 1
70394: NEG
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 1
70405: NEG
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 2
70417: PUSH
70418: LD_INT 1
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 2
70427: PUSH
70428: LD_INT 2
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 1
70437: PUSH
70438: LD_INT 2
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: LD_INT 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: LD_INT 1
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70480: LD_ADDR_VAR 0 51
70484: PUSH
70485: LD_INT 0
70487: PUSH
70488: LD_INT 0
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 1
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 1
70518: PUSH
70519: LD_INT 1
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: LD_INT 1
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 1
70538: NEG
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: LD_INT 1
70553: NEG
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 1
70561: PUSH
70562: LD_INT 2
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: LD_INT 2
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: LD_INT 1
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 2
70592: NEG
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 2
70603: NEG
70604: PUSH
70605: LD_INT 1
70607: NEG
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70627: LD_ADDR_VAR 0 52
70631: PUSH
70632: LD_INT 0
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 0
70644: PUSH
70645: LD_INT 1
70647: NEG
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 1
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: PUSH
70666: LD_INT 1
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: LD_INT 1
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 1
70685: NEG
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: LD_INT 1
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 1
70708: NEG
70709: PUSH
70710: LD_INT 2
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: NEG
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 2
70754: NEG
70755: PUSH
70756: LD_INT 2
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70778: LD_ADDR_VAR 0 53
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: LD_INT 0
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: LD_INT 1
70798: NEG
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 1
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 1
70816: PUSH
70817: LD_INT 1
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 1
70836: NEG
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 1
70859: NEG
70860: PUSH
70861: LD_INT 2
70863: NEG
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 0
70871: PUSH
70872: LD_INT 2
70874: NEG
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 1
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 2
70893: PUSH
70894: LD_INT 0
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: PUSH
70904: LD_INT 1
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 2
70913: PUSH
70914: LD_INT 2
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 1
70923: PUSH
70924: LD_INT 2
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 0
70933: PUSH
70934: LD_INT 2
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 1
70943: NEG
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 2
70954: NEG
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 2
70965: NEG
70966: PUSH
70967: LD_INT 1
70969: NEG
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 2
70977: NEG
70978: PUSH
70979: LD_INT 2
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71008: LD_ADDR_VAR 0 54
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: LD_INT 1
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 1
71036: PUSH
71037: LD_INT 0
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 1
71046: PUSH
71047: LD_INT 1
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 0
71056: PUSH
71057: LD_INT 1
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 1
71066: NEG
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: LD_INT 1
71081: NEG
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 1
71089: NEG
71090: PUSH
71091: LD_INT 2
71093: NEG
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 0
71101: PUSH
71102: LD_INT 2
71104: NEG
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 1
71112: PUSH
71113: LD_INT 1
71115: NEG
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 2
71123: PUSH
71124: LD_INT 0
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 2
71133: PUSH
71134: LD_INT 1
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 2
71143: PUSH
71144: LD_INT 2
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 1
71153: PUSH
71154: LD_INT 2
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 0
71163: PUSH
71164: LD_INT 2
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 1
71173: NEG
71174: PUSH
71175: LD_INT 1
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 2
71184: NEG
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 2
71195: NEG
71196: PUSH
71197: LD_INT 1
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 2
71207: NEG
71208: PUSH
71209: LD_INT 2
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71238: LD_ADDR_VAR 0 55
71242: PUSH
71243: LD_INT 0
71245: PUSH
71246: LD_INT 0
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 0
71255: PUSH
71256: LD_INT 1
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: LD_INT 0
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 1
71276: PUSH
71277: LD_INT 1
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 1
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 1
71296: NEG
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: NEG
71308: PUSH
71309: LD_INT 1
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 1
71319: NEG
71320: PUSH
71321: LD_INT 2
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: LD_INT 2
71334: NEG
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 1
71342: PUSH
71343: LD_INT 1
71345: NEG
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 2
71353: PUSH
71354: LD_INT 0
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 2
71363: PUSH
71364: LD_INT 1
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 2
71373: PUSH
71374: LD_INT 2
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 1
71383: PUSH
71384: LD_INT 2
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: LD_INT 2
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 1
71403: NEG
71404: PUSH
71405: LD_INT 1
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 2
71414: NEG
71415: PUSH
71416: LD_INT 0
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 2
71425: NEG
71426: PUSH
71427: LD_INT 1
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 2
71437: NEG
71438: PUSH
71439: LD_INT 2
71441: NEG
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71468: LD_ADDR_VAR 0 56
71472: PUSH
71473: LD_INT 0
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 0
71485: PUSH
71486: LD_INT 1
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 1
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 1
71506: PUSH
71507: LD_INT 1
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 0
71516: PUSH
71517: LD_INT 1
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 1
71526: NEG
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 1
71537: NEG
71538: PUSH
71539: LD_INT 1
71541: NEG
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 1
71549: NEG
71550: PUSH
71551: LD_INT 2
71553: NEG
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: LD_INT 2
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: PUSH
71573: LD_INT 1
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 2
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 2
71593: PUSH
71594: LD_INT 1
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 2
71603: PUSH
71604: LD_INT 2
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: LD_INT 2
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 0
71623: PUSH
71624: LD_INT 2
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 1
71633: NEG
71634: PUSH
71635: LD_INT 1
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 2
71644: NEG
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 2
71655: NEG
71656: PUSH
71657: LD_INT 1
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 2
71667: NEG
71668: PUSH
71669: LD_INT 2
71671: NEG
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71698: LD_ADDR_VAR 0 57
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: LD_INT 0
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 0
71715: PUSH
71716: LD_INT 1
71718: NEG
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 1
71726: PUSH
71727: LD_INT 0
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: LD_INT 1
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 0
71746: PUSH
71747: LD_INT 1
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 1
71756: NEG
71757: PUSH
71758: LD_INT 0
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: LD_INT 1
71771: NEG
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 1
71779: NEG
71780: PUSH
71781: LD_INT 2
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 0
71791: PUSH
71792: LD_INT 2
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 1
71802: PUSH
71803: LD_INT 1
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 2
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 2
71823: PUSH
71824: LD_INT 1
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 2
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 1
71843: PUSH
71844: LD_INT 2
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: LD_INT 2
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 1
71863: NEG
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 2
71874: NEG
71875: PUSH
71876: LD_INT 0
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 2
71885: NEG
71886: PUSH
71887: LD_INT 1
71889: NEG
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 2
71897: NEG
71898: PUSH
71899: LD_INT 2
71901: NEG
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71928: LD_ADDR_VAR 0 58
71932: PUSH
71933: LD_INT 0
71935: PUSH
71936: LD_INT 0
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 0
71945: PUSH
71946: LD_INT 1
71948: NEG
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 1
71956: PUSH
71957: LD_INT 0
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 1
71966: PUSH
71967: LD_INT 1
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 0
71976: PUSH
71977: LD_INT 1
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 1
71986: NEG
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 1
71997: NEG
71998: PUSH
71999: LD_INT 1
72001: NEG
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 1
72009: NEG
72010: PUSH
72011: LD_INT 2
72013: NEG
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 0
72021: PUSH
72022: LD_INT 2
72024: NEG
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 1
72032: PUSH
72033: LD_INT 1
72035: NEG
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 2
72043: PUSH
72044: LD_INT 0
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 2
72053: PUSH
72054: LD_INT 1
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 2
72063: PUSH
72064: LD_INT 2
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 1
72073: PUSH
72074: LD_INT 2
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: LD_INT 2
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 1
72093: NEG
72094: PUSH
72095: LD_INT 1
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 2
72104: NEG
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 2
72115: NEG
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 2
72127: NEG
72128: PUSH
72129: LD_INT 2
72131: NEG
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72158: LD_ADDR_VAR 0 59
72162: PUSH
72163: LD_INT 0
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 0
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 1
72186: PUSH
72187: LD_INT 0
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 1
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 0
72206: PUSH
72207: LD_INT 1
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 1
72216: NEG
72217: PUSH
72218: LD_INT 0
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 1
72227: NEG
72228: PUSH
72229: LD_INT 1
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72246: LD_ADDR_VAR 0 60
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: LD_INT 0
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 0
72263: PUSH
72264: LD_INT 1
72266: NEG
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 1
72274: PUSH
72275: LD_INT 0
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 1
72284: PUSH
72285: LD_INT 1
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: LD_INT 1
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 1
72304: NEG
72305: PUSH
72306: LD_INT 0
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 1
72315: NEG
72316: PUSH
72317: LD_INT 1
72319: NEG
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72334: LD_ADDR_VAR 0 61
72338: PUSH
72339: LD_INT 0
72341: PUSH
72342: LD_INT 0
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 0
72351: PUSH
72352: LD_INT 1
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 1
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 1
72372: PUSH
72373: LD_INT 1
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 1
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 1
72392: NEG
72393: PUSH
72394: LD_INT 0
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: NEG
72404: PUSH
72405: LD_INT 1
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72422: LD_ADDR_VAR 0 62
72426: PUSH
72427: LD_INT 0
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: LD_INT 1
72442: NEG
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 1
72450: PUSH
72451: LD_INT 0
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 1
72460: PUSH
72461: LD_INT 1
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 0
72470: PUSH
72471: LD_INT 1
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 1
72480: NEG
72481: PUSH
72482: LD_INT 0
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 1
72491: NEG
72492: PUSH
72493: LD_INT 1
72495: NEG
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72510: LD_ADDR_VAR 0 63
72514: PUSH
72515: LD_INT 0
72517: PUSH
72518: LD_INT 0
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 0
72527: PUSH
72528: LD_INT 1
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 1
72538: PUSH
72539: LD_INT 0
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 1
72548: PUSH
72549: LD_INT 1
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 0
72558: PUSH
72559: LD_INT 1
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 1
72568: NEG
72569: PUSH
72570: LD_INT 0
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 1
72579: NEG
72580: PUSH
72581: LD_INT 1
72583: NEG
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72598: LD_ADDR_VAR 0 64
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: LD_INT 1
72618: NEG
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 1
72626: PUSH
72627: LD_INT 0
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 1
72636: PUSH
72637: LD_INT 1
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 0
72646: PUSH
72647: LD_INT 1
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 1
72656: NEG
72657: PUSH
72658: LD_INT 0
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 1
72667: NEG
72668: PUSH
72669: LD_INT 1
72671: NEG
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: ST_TO_ADDR
// end ; 1 :
72686: GO 78583
72688: LD_INT 1
72690: DOUBLE
72691: EQUAL
72692: IFTRUE 72696
72694: GO 75319
72696: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72697: LD_ADDR_VAR 0 11
72701: PUSH
72702: LD_INT 1
72704: NEG
72705: PUSH
72706: LD_INT 3
72708: NEG
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: LD_INT 3
72719: NEG
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 1
72727: PUSH
72728: LD_INT 2
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: LIST
72740: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72741: LD_ADDR_VAR 0 12
72745: PUSH
72746: LD_INT 2
72748: PUSH
72749: LD_INT 1
72751: NEG
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 3
72759: PUSH
72760: LD_INT 0
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 3
72769: PUSH
72770: LD_INT 1
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72782: LD_ADDR_VAR 0 13
72786: PUSH
72787: LD_INT 3
72789: PUSH
72790: LD_INT 2
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 3
72799: PUSH
72800: LD_INT 3
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 2
72809: PUSH
72810: LD_INT 3
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: LIST
72821: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72822: LD_ADDR_VAR 0 14
72826: PUSH
72827: LD_INT 1
72829: PUSH
72830: LD_INT 3
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 0
72839: PUSH
72840: LD_INT 3
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 1
72849: NEG
72850: PUSH
72851: LD_INT 2
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: LIST
72862: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72863: LD_ADDR_VAR 0 15
72867: PUSH
72868: LD_INT 2
72870: NEG
72871: PUSH
72872: LD_INT 1
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 3
72881: NEG
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 3
72892: NEG
72893: PUSH
72894: LD_INT 1
72896: NEG
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: LIST
72906: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72907: LD_ADDR_VAR 0 16
72911: PUSH
72912: LD_INT 2
72914: NEG
72915: PUSH
72916: LD_INT 3
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 3
72926: NEG
72927: PUSH
72928: LD_INT 2
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 3
72938: NEG
72939: PUSH
72940: LD_INT 3
72942: NEG
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: LIST
72952: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72953: LD_ADDR_VAR 0 17
72957: PUSH
72958: LD_INT 1
72960: NEG
72961: PUSH
72962: LD_INT 3
72964: NEG
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 0
72972: PUSH
72973: LD_INT 3
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 1
72983: PUSH
72984: LD_INT 2
72986: NEG
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: LIST
72996: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72997: LD_ADDR_VAR 0 18
73001: PUSH
73002: LD_INT 2
73004: PUSH
73005: LD_INT 1
73007: NEG
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 3
73015: PUSH
73016: LD_INT 0
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 3
73025: PUSH
73026: LD_INT 1
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: LIST
73037: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73038: LD_ADDR_VAR 0 19
73042: PUSH
73043: LD_INT 3
73045: PUSH
73046: LD_INT 2
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 3
73055: PUSH
73056: LD_INT 3
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 2
73065: PUSH
73066: LD_INT 3
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: LIST
73077: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73078: LD_ADDR_VAR 0 20
73082: PUSH
73083: LD_INT 1
73085: PUSH
73086: LD_INT 3
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 0
73095: PUSH
73096: LD_INT 3
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 1
73105: NEG
73106: PUSH
73107: LD_INT 2
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: LIST
73118: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73119: LD_ADDR_VAR 0 21
73123: PUSH
73124: LD_INT 2
73126: NEG
73127: PUSH
73128: LD_INT 1
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 3
73137: NEG
73138: PUSH
73139: LD_INT 0
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 3
73148: NEG
73149: PUSH
73150: LD_INT 1
73152: NEG
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73163: LD_ADDR_VAR 0 22
73167: PUSH
73168: LD_INT 2
73170: NEG
73171: PUSH
73172: LD_INT 3
73174: NEG
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 3
73182: NEG
73183: PUSH
73184: LD_INT 2
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 3
73194: NEG
73195: PUSH
73196: LD_INT 3
73198: NEG
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: LIST
73208: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
73209: LD_ADDR_VAR 0 23
73213: PUSH
73214: LD_INT 0
73216: PUSH
73217: LD_INT 3
73219: NEG
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_INT 1
73227: NEG
73228: PUSH
73229: LD_INT 4
73231: NEG
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 1
73239: PUSH
73240: LD_INT 3
73242: NEG
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: LIST
73252: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
73253: LD_ADDR_VAR 0 24
73257: PUSH
73258: LD_INT 3
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 3
73270: PUSH
73271: LD_INT 1
73273: NEG
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 4
73281: PUSH
73282: LD_INT 1
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: LIST
73293: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
73294: LD_ADDR_VAR 0 25
73298: PUSH
73299: LD_INT 3
73301: PUSH
73302: LD_INT 3
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 4
73311: PUSH
73312: LD_INT 3
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 3
73321: PUSH
73322: LD_INT 4
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: LIST
73333: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
73334: LD_ADDR_VAR 0 26
73338: PUSH
73339: LD_INT 0
73341: PUSH
73342: LD_INT 3
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 1
73351: PUSH
73352: LD_INT 4
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 1
73361: NEG
73362: PUSH
73363: LD_INT 3
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: LIST
73374: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
73375: LD_ADDR_VAR 0 27
73379: PUSH
73380: LD_INT 3
73382: NEG
73383: PUSH
73384: LD_INT 0
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 3
73393: NEG
73394: PUSH
73395: LD_INT 1
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 4
73404: NEG
73405: PUSH
73406: LD_INT 1
73408: NEG
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: LIST
73418: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
73419: LD_ADDR_VAR 0 28
73423: PUSH
73424: LD_INT 3
73426: NEG
73427: PUSH
73428: LD_INT 3
73430: NEG
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 3
73438: NEG
73439: PUSH
73440: LD_INT 4
73442: NEG
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 4
73450: NEG
73451: PUSH
73452: LD_INT 3
73454: NEG
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
73465: LD_ADDR_VAR 0 29
73469: PUSH
73470: LD_INT 1
73472: NEG
73473: PUSH
73474: LD_INT 3
73476: NEG
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: LD_INT 3
73487: NEG
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 1
73495: PUSH
73496: LD_INT 2
73498: NEG
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 1
73506: NEG
73507: PUSH
73508: LD_INT 4
73510: NEG
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 0
73518: PUSH
73519: LD_INT 4
73521: NEG
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 1
73529: PUSH
73530: LD_INT 3
73532: NEG
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 1
73540: NEG
73541: PUSH
73542: LD_INT 5
73544: NEG
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 0
73552: PUSH
73553: LD_INT 5
73555: NEG
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 1
73563: PUSH
73564: LD_INT 4
73566: NEG
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 1
73574: NEG
73575: PUSH
73576: LD_INT 6
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 0
73586: PUSH
73587: LD_INT 6
73589: NEG
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 1
73597: PUSH
73598: LD_INT 5
73600: NEG
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
73620: LD_ADDR_VAR 0 30
73624: PUSH
73625: LD_INT 2
73627: PUSH
73628: LD_INT 1
73630: NEG
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: LD_INT 3
73638: PUSH
73639: LD_INT 0
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 3
73648: PUSH
73649: LD_INT 1
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 3
73658: PUSH
73659: LD_INT 1
73661: NEG
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 4
73669: PUSH
73670: LD_INT 0
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 4
73679: PUSH
73680: LD_INT 1
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 4
73689: PUSH
73690: LD_INT 1
73692: NEG
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 5
73700: PUSH
73701: LD_INT 0
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 5
73710: PUSH
73711: LD_INT 1
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 5
73720: PUSH
73721: LD_INT 1
73723: NEG
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: LD_INT 6
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 6
73741: PUSH
73742: LD_INT 1
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73763: LD_ADDR_VAR 0 31
73767: PUSH
73768: LD_INT 3
73770: PUSH
73771: LD_INT 2
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 3
73780: PUSH
73781: LD_INT 3
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: LD_INT 2
73790: PUSH
73791: LD_INT 3
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: LD_INT 4
73800: PUSH
73801: LD_INT 3
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 4
73810: PUSH
73811: LD_INT 4
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 3
73820: PUSH
73821: LD_INT 4
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 5
73830: PUSH
73831: LD_INT 4
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 5
73840: PUSH
73841: LD_INT 5
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 4
73850: PUSH
73851: LD_INT 5
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_INT 6
73860: PUSH
73861: LD_INT 5
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 6
73870: PUSH
73871: LD_INT 6
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 5
73880: PUSH
73881: LD_INT 6
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73902: LD_ADDR_VAR 0 32
73906: PUSH
73907: LD_INT 1
73909: PUSH
73910: LD_INT 3
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 0
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 1
73929: NEG
73930: PUSH
73931: LD_INT 2
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 1
73940: PUSH
73941: LD_INT 4
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: PUSH
73948: LD_INT 0
73950: PUSH
73951: LD_INT 4
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 1
73960: NEG
73961: PUSH
73962: LD_INT 3
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 1
73971: PUSH
73972: LD_INT 5
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 0
73981: PUSH
73982: LD_INT 5
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 1
73991: NEG
73992: PUSH
73993: LD_INT 4
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 1
74002: PUSH
74003: LD_INT 6
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: LD_INT 6
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 1
74022: NEG
74023: PUSH
74024: LD_INT 5
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74045: LD_ADDR_VAR 0 33
74049: PUSH
74050: LD_INT 2
74052: NEG
74053: PUSH
74054: LD_INT 1
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 3
74063: NEG
74064: PUSH
74065: LD_INT 0
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 3
74074: NEG
74075: PUSH
74076: LD_INT 1
74078: NEG
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 3
74086: NEG
74087: PUSH
74088: LD_INT 1
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 4
74097: NEG
74098: PUSH
74099: LD_INT 0
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 4
74108: NEG
74109: PUSH
74110: LD_INT 1
74112: NEG
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 4
74120: NEG
74121: PUSH
74122: LD_INT 1
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 5
74131: NEG
74132: PUSH
74133: LD_INT 0
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 5
74142: NEG
74143: PUSH
74144: LD_INT 1
74146: NEG
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: PUSH
74152: LD_INT 5
74154: NEG
74155: PUSH
74156: LD_INT 1
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 6
74165: NEG
74166: PUSH
74167: LD_INT 0
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: LD_INT 6
74176: NEG
74177: PUSH
74178: LD_INT 1
74180: NEG
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: LIST
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
74200: LD_ADDR_VAR 0 34
74204: PUSH
74205: LD_INT 2
74207: NEG
74208: PUSH
74209: LD_INT 3
74211: NEG
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 3
74219: NEG
74220: PUSH
74221: LD_INT 2
74223: NEG
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 3
74231: NEG
74232: PUSH
74233: LD_INT 3
74235: NEG
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 3
74243: NEG
74244: PUSH
74245: LD_INT 4
74247: NEG
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: PUSH
74253: LD_INT 4
74255: NEG
74256: PUSH
74257: LD_INT 3
74259: NEG
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 4
74267: NEG
74268: PUSH
74269: LD_INT 4
74271: NEG
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 4
74279: NEG
74280: PUSH
74281: LD_INT 5
74283: NEG
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 5
74291: NEG
74292: PUSH
74293: LD_INT 4
74295: NEG
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 5
74303: NEG
74304: PUSH
74305: LD_INT 5
74307: NEG
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 5
74315: NEG
74316: PUSH
74317: LD_INT 6
74319: NEG
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 6
74327: NEG
74328: PUSH
74329: LD_INT 5
74331: NEG
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 6
74339: NEG
74340: PUSH
74341: LD_INT 6
74343: NEG
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
74363: LD_ADDR_VAR 0 41
74367: PUSH
74368: LD_INT 0
74370: PUSH
74371: LD_INT 2
74373: NEG
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 1
74381: NEG
74382: PUSH
74383: LD_INT 3
74385: NEG
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 1
74393: PUSH
74394: LD_INT 2
74396: NEG
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: LIST
74406: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
74407: LD_ADDR_VAR 0 42
74411: PUSH
74412: LD_INT 2
74414: PUSH
74415: LD_INT 0
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 2
74424: PUSH
74425: LD_INT 1
74427: NEG
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 3
74435: PUSH
74436: LD_INT 1
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: LIST
74447: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
74448: LD_ADDR_VAR 0 43
74452: PUSH
74453: LD_INT 2
74455: PUSH
74456: LD_INT 2
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PUSH
74463: LD_INT 3
74465: PUSH
74466: LD_INT 2
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 2
74475: PUSH
74476: LD_INT 3
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: LIST
74487: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
74488: LD_ADDR_VAR 0 44
74492: PUSH
74493: LD_INT 0
74495: PUSH
74496: LD_INT 2
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 1
74505: PUSH
74506: LD_INT 3
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 1
74515: NEG
74516: PUSH
74517: LD_INT 2
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: LIST
74528: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74529: LD_ADDR_VAR 0 45
74533: PUSH
74534: LD_INT 2
74536: NEG
74537: PUSH
74538: LD_INT 0
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 2
74547: NEG
74548: PUSH
74549: LD_INT 1
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 3
74558: NEG
74559: PUSH
74560: LD_INT 1
74562: NEG
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
74573: LD_ADDR_VAR 0 46
74577: PUSH
74578: LD_INT 2
74580: NEG
74581: PUSH
74582: LD_INT 2
74584: NEG
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 2
74592: NEG
74593: PUSH
74594: LD_INT 3
74596: NEG
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: LD_INT 3
74604: NEG
74605: PUSH
74606: LD_INT 2
74608: NEG
74609: PUSH
74610: EMPTY
74611: LIST
74612: LIST
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: LIST
74618: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
74619: LD_ADDR_VAR 0 47
74623: PUSH
74624: LD_INT 2
74626: NEG
74627: PUSH
74628: LD_INT 3
74630: NEG
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 1
74638: NEG
74639: PUSH
74640: LD_INT 3
74642: NEG
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
74652: LD_ADDR_VAR 0 48
74656: PUSH
74657: LD_INT 1
74659: PUSH
74660: LD_INT 2
74662: NEG
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 2
74670: PUSH
74671: LD_INT 1
74673: NEG
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
74683: LD_ADDR_VAR 0 49
74687: PUSH
74688: LD_INT 3
74690: PUSH
74691: LD_INT 1
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: LD_INT 3
74700: PUSH
74701: LD_INT 2
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74712: LD_ADDR_VAR 0 50
74716: PUSH
74717: LD_INT 2
74719: PUSH
74720: LD_INT 3
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 1
74729: PUSH
74730: LD_INT 3
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74741: LD_ADDR_VAR 0 51
74745: PUSH
74746: LD_INT 1
74748: NEG
74749: PUSH
74750: LD_INT 2
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: PUSH
74757: LD_INT 2
74759: NEG
74760: PUSH
74761: LD_INT 1
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74772: LD_ADDR_VAR 0 52
74776: PUSH
74777: LD_INT 3
74779: NEG
74780: PUSH
74781: LD_INT 1
74783: NEG
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 3
74791: NEG
74792: PUSH
74793: LD_INT 2
74795: NEG
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74805: LD_ADDR_VAR 0 53
74809: PUSH
74810: LD_INT 1
74812: NEG
74813: PUSH
74814: LD_INT 3
74816: NEG
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: LD_INT 3
74827: NEG
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: PUSH
74833: LD_INT 1
74835: PUSH
74836: LD_INT 2
74838: NEG
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: LIST
74848: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74849: LD_ADDR_VAR 0 54
74853: PUSH
74854: LD_INT 2
74856: PUSH
74857: LD_INT 1
74859: NEG
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 3
74867: PUSH
74868: LD_INT 0
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: PUSH
74875: LD_INT 3
74877: PUSH
74878: LD_INT 1
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: LIST
74889: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74890: LD_ADDR_VAR 0 55
74894: PUSH
74895: LD_INT 3
74897: PUSH
74898: LD_INT 2
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 3
74907: PUSH
74908: LD_INT 3
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 2
74917: PUSH
74918: LD_INT 3
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: LIST
74929: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74930: LD_ADDR_VAR 0 56
74934: PUSH
74935: LD_INT 1
74937: PUSH
74938: LD_INT 3
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: LD_INT 3
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 1
74957: NEG
74958: PUSH
74959: LD_INT 2
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: LIST
74970: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74971: LD_ADDR_VAR 0 57
74975: PUSH
74976: LD_INT 2
74978: NEG
74979: PUSH
74980: LD_INT 1
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 3
74989: NEG
74990: PUSH
74991: LD_INT 0
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 3
75000: NEG
75001: PUSH
75002: LD_INT 1
75004: NEG
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: LIST
75014: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75015: LD_ADDR_VAR 0 58
75019: PUSH
75020: LD_INT 2
75022: NEG
75023: PUSH
75024: LD_INT 3
75026: NEG
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: PUSH
75032: LD_INT 3
75034: NEG
75035: PUSH
75036: LD_INT 2
75038: NEG
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: LD_INT 3
75046: NEG
75047: PUSH
75048: LD_INT 3
75050: NEG
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: LIST
75060: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75061: LD_ADDR_VAR 0 59
75065: PUSH
75066: LD_INT 1
75068: NEG
75069: PUSH
75070: LD_INT 2
75072: NEG
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: LD_INT 2
75083: NEG
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 1
75091: PUSH
75092: LD_INT 1
75094: NEG
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: LIST
75104: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75105: LD_ADDR_VAR 0 60
75109: PUSH
75110: LD_INT 1
75112: PUSH
75113: LD_INT 1
75115: NEG
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 2
75123: PUSH
75124: LD_INT 0
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 2
75133: PUSH
75134: LD_INT 1
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75146: LD_ADDR_VAR 0 61
75150: PUSH
75151: LD_INT 2
75153: PUSH
75154: LD_INT 1
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 2
75163: PUSH
75164: LD_INT 2
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 1
75173: PUSH
75174: LD_INT 2
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: LIST
75185: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75186: LD_ADDR_VAR 0 62
75190: PUSH
75191: LD_INT 1
75193: PUSH
75194: LD_INT 2
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 0
75203: PUSH
75204: LD_INT 2
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 1
75213: NEG
75214: PUSH
75215: LD_INT 1
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: LIST
75226: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75227: LD_ADDR_VAR 0 63
75231: PUSH
75232: LD_INT 1
75234: NEG
75235: PUSH
75236: LD_INT 1
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 2
75245: NEG
75246: PUSH
75247: LD_INT 0
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 2
75256: NEG
75257: PUSH
75258: LD_INT 1
75260: NEG
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75271: LD_ADDR_VAR 0 64
75275: PUSH
75276: LD_INT 1
75278: NEG
75279: PUSH
75280: LD_INT 2
75282: NEG
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: LD_INT 2
75290: NEG
75291: PUSH
75292: LD_INT 1
75294: NEG
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 2
75302: NEG
75303: PUSH
75304: LD_INT 2
75306: NEG
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: LIST
75316: ST_TO_ADDR
// end ; 2 :
75317: GO 78583
75319: LD_INT 2
75321: DOUBLE
75322: EQUAL
75323: IFTRUE 75327
75325: GO 78582
75327: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
75328: LD_ADDR_VAR 0 29
75332: PUSH
75333: LD_INT 4
75335: PUSH
75336: LD_INT 0
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 4
75345: PUSH
75346: LD_INT 1
75348: NEG
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 5
75356: PUSH
75357: LD_INT 0
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 5
75366: PUSH
75367: LD_INT 1
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 4
75376: PUSH
75377: LD_INT 1
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: LD_INT 3
75386: PUSH
75387: LD_INT 0
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 3
75396: PUSH
75397: LD_INT 1
75399: NEG
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: LD_INT 3
75407: PUSH
75408: LD_INT 2
75410: NEG
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 5
75418: PUSH
75419: LD_INT 2
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 3
75428: PUSH
75429: LD_INT 3
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 3
75438: PUSH
75439: LD_INT 2
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 4
75448: PUSH
75449: LD_INT 3
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: LD_INT 4
75458: PUSH
75459: LD_INT 4
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PUSH
75466: LD_INT 3
75468: PUSH
75469: LD_INT 4
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 2
75478: PUSH
75479: LD_INT 3
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: LD_INT 2
75488: PUSH
75489: LD_INT 2
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: PUSH
75496: LD_INT 4
75498: PUSH
75499: LD_INT 2
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PUSH
75506: LD_INT 2
75508: PUSH
75509: LD_INT 4
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: PUSH
75516: LD_INT 0
75518: PUSH
75519: LD_INT 4
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PUSH
75526: LD_INT 0
75528: PUSH
75529: LD_INT 3
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: PUSH
75536: LD_INT 1
75538: PUSH
75539: LD_INT 4
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: PUSH
75546: LD_INT 1
75548: PUSH
75549: LD_INT 5
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_INT 0
75558: PUSH
75559: LD_INT 5
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 1
75568: NEG
75569: PUSH
75570: LD_INT 4
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 1
75579: NEG
75580: PUSH
75581: LD_INT 3
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 2
75590: PUSH
75591: LD_INT 5
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: PUSH
75598: LD_INT 2
75600: NEG
75601: PUSH
75602: LD_INT 3
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 3
75611: NEG
75612: PUSH
75613: LD_INT 0
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 3
75622: NEG
75623: PUSH
75624: LD_INT 1
75626: NEG
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: LD_INT 2
75634: NEG
75635: PUSH
75636: LD_INT 0
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 2
75645: NEG
75646: PUSH
75647: LD_INT 1
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: PUSH
75654: LD_INT 3
75656: NEG
75657: PUSH
75658: LD_INT 1
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 4
75667: NEG
75668: PUSH
75669: LD_INT 0
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: LD_INT 4
75678: NEG
75679: PUSH
75680: LD_INT 1
75682: NEG
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 4
75690: NEG
75691: PUSH
75692: LD_INT 2
75694: NEG
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 2
75702: NEG
75703: PUSH
75704: LD_INT 2
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 4
75713: NEG
75714: PUSH
75715: LD_INT 4
75717: NEG
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: LD_INT 4
75725: NEG
75726: PUSH
75727: LD_INT 5
75729: NEG
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: LD_INT 3
75737: NEG
75738: PUSH
75739: LD_INT 4
75741: NEG
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 3
75749: NEG
75750: PUSH
75751: LD_INT 3
75753: NEG
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 4
75761: NEG
75762: PUSH
75763: LD_INT 3
75765: NEG
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 5
75773: NEG
75774: PUSH
75775: LD_INT 4
75777: NEG
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 5
75785: NEG
75786: PUSH
75787: LD_INT 5
75789: NEG
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 3
75797: NEG
75798: PUSH
75799: LD_INT 5
75801: NEG
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: LD_INT 5
75809: NEG
75810: PUSH
75811: LD_INT 3
75813: NEG
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75866: LD_ADDR_VAR 0 30
75870: PUSH
75871: LD_INT 4
75873: PUSH
75874: LD_INT 4
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 4
75883: PUSH
75884: LD_INT 3
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 5
75893: PUSH
75894: LD_INT 4
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 5
75903: PUSH
75904: LD_INT 5
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 4
75913: PUSH
75914: LD_INT 5
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: LD_INT 3
75923: PUSH
75924: LD_INT 4
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: LD_INT 3
75933: PUSH
75934: LD_INT 3
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 5
75943: PUSH
75944: LD_INT 3
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: LD_INT 3
75953: PUSH
75954: LD_INT 5
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: PUSH
75961: LD_INT 0
75963: PUSH
75964: LD_INT 3
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: LD_INT 2
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: PUSH
75981: LD_INT 1
75983: PUSH
75984: LD_INT 3
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: PUSH
75991: LD_INT 1
75993: PUSH
75994: LD_INT 4
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PUSH
76001: LD_INT 0
76003: PUSH
76004: LD_INT 4
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 1
76013: NEG
76014: PUSH
76015: LD_INT 3
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: LD_INT 1
76024: NEG
76025: PUSH
76026: LD_INT 2
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: LD_INT 2
76035: PUSH
76036: LD_INT 4
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: PUSH
76043: LD_INT 2
76045: NEG
76046: PUSH
76047: LD_INT 2
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: PUSH
76054: LD_INT 4
76056: NEG
76057: PUSH
76058: LD_INT 0
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: LD_INT 4
76067: NEG
76068: PUSH
76069: LD_INT 1
76071: NEG
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: PUSH
76077: LD_INT 3
76079: NEG
76080: PUSH
76081: LD_INT 0
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: PUSH
76088: LD_INT 3
76090: NEG
76091: PUSH
76092: LD_INT 1
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: LD_INT 4
76101: NEG
76102: PUSH
76103: LD_INT 1
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: PUSH
76110: LD_INT 5
76112: NEG
76113: PUSH
76114: LD_INT 0
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 5
76123: NEG
76124: PUSH
76125: LD_INT 1
76127: NEG
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 5
76135: NEG
76136: PUSH
76137: LD_INT 2
76139: NEG
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 3
76147: NEG
76148: PUSH
76149: LD_INT 2
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: LD_INT 3
76158: NEG
76159: PUSH
76160: LD_INT 3
76162: NEG
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 3
76170: NEG
76171: PUSH
76172: LD_INT 4
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 2
76182: NEG
76183: PUSH
76184: LD_INT 3
76186: NEG
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 2
76194: NEG
76195: PUSH
76196: LD_INT 2
76198: NEG
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: LD_INT 3
76206: NEG
76207: PUSH
76208: LD_INT 2
76210: NEG
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: PUSH
76216: LD_INT 4
76218: NEG
76219: PUSH
76220: LD_INT 3
76222: NEG
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 4
76230: NEG
76231: PUSH
76232: LD_INT 4
76234: NEG
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: LD_INT 2
76242: NEG
76243: PUSH
76244: LD_INT 4
76246: NEG
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: LD_INT 4
76254: NEG
76255: PUSH
76256: LD_INT 2
76258: NEG
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: PUSH
76264: LD_INT 0
76266: PUSH
76267: LD_INT 4
76269: NEG
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: LD_INT 0
76277: PUSH
76278: LD_INT 5
76280: NEG
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 1
76288: PUSH
76289: LD_INT 4
76291: NEG
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: LD_INT 1
76299: PUSH
76300: LD_INT 3
76302: NEG
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: LD_INT 0
76310: PUSH
76311: LD_INT 3
76313: NEG
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 1
76321: NEG
76322: PUSH
76323: LD_INT 4
76325: NEG
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 1
76333: NEG
76334: PUSH
76335: LD_INT 5
76337: NEG
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: PUSH
76343: LD_INT 2
76345: PUSH
76346: LD_INT 3
76348: NEG
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 2
76356: NEG
76357: PUSH
76358: LD_INT 5
76360: NEG
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: LIST
76409: LIST
76410: LIST
76411: LIST
76412: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
76413: LD_ADDR_VAR 0 31
76417: PUSH
76418: LD_INT 0
76420: PUSH
76421: LD_INT 4
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 0
76430: PUSH
76431: LD_INT 3
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: LD_INT 1
76440: PUSH
76441: LD_INT 4
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: LD_INT 1
76450: PUSH
76451: LD_INT 5
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: LD_INT 0
76460: PUSH
76461: LD_INT 5
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PUSH
76468: LD_INT 1
76470: NEG
76471: PUSH
76472: LD_INT 4
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PUSH
76479: LD_INT 1
76481: NEG
76482: PUSH
76483: LD_INT 3
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: LD_INT 2
76492: PUSH
76493: LD_INT 5
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PUSH
76500: LD_INT 2
76502: NEG
76503: PUSH
76504: LD_INT 3
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: LD_INT 3
76513: NEG
76514: PUSH
76515: LD_INT 0
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: PUSH
76522: LD_INT 3
76524: NEG
76525: PUSH
76526: LD_INT 1
76528: NEG
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PUSH
76534: LD_INT 2
76536: NEG
76537: PUSH
76538: LD_INT 0
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PUSH
76545: LD_INT 2
76547: NEG
76548: PUSH
76549: LD_INT 1
76551: PUSH
76552: EMPTY
76553: LIST
76554: LIST
76555: PUSH
76556: LD_INT 3
76558: NEG
76559: PUSH
76560: LD_INT 1
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: LD_INT 4
76569: NEG
76570: PUSH
76571: LD_INT 0
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: PUSH
76578: LD_INT 4
76580: NEG
76581: PUSH
76582: LD_INT 1
76584: NEG
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: LD_INT 4
76592: NEG
76593: PUSH
76594: LD_INT 2
76596: NEG
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 2
76604: NEG
76605: PUSH
76606: LD_INT 2
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 4
76615: NEG
76616: PUSH
76617: LD_INT 4
76619: NEG
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 4
76627: NEG
76628: PUSH
76629: LD_INT 5
76631: NEG
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: PUSH
76637: LD_INT 3
76639: NEG
76640: PUSH
76641: LD_INT 4
76643: NEG
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: LD_INT 3
76651: NEG
76652: PUSH
76653: LD_INT 3
76655: NEG
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: LD_INT 4
76663: NEG
76664: PUSH
76665: LD_INT 3
76667: NEG
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 5
76675: NEG
76676: PUSH
76677: LD_INT 4
76679: NEG
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 5
76687: NEG
76688: PUSH
76689: LD_INT 5
76691: NEG
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: LD_INT 3
76699: NEG
76700: PUSH
76701: LD_INT 5
76703: NEG
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: LD_INT 5
76711: NEG
76712: PUSH
76713: LD_INT 3
76715: NEG
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: PUSH
76721: LD_INT 0
76723: PUSH
76724: LD_INT 3
76726: NEG
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: LD_INT 0
76734: PUSH
76735: LD_INT 4
76737: NEG
76738: PUSH
76739: EMPTY
76740: LIST
76741: LIST
76742: PUSH
76743: LD_INT 1
76745: PUSH
76746: LD_INT 3
76748: NEG
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: LD_INT 1
76756: PUSH
76757: LD_INT 2
76759: NEG
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 0
76767: PUSH
76768: LD_INT 2
76770: NEG
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 3
76782: NEG
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 1
76790: NEG
76791: PUSH
76792: LD_INT 4
76794: NEG
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: LD_INT 2
76802: PUSH
76803: LD_INT 2
76805: NEG
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: PUSH
76811: LD_INT 2
76813: NEG
76814: PUSH
76815: LD_INT 4
76817: NEG
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: PUSH
76823: LD_INT 4
76825: PUSH
76826: LD_INT 0
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 4
76835: PUSH
76836: LD_INT 1
76838: NEG
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 5
76846: PUSH
76847: LD_INT 0
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 5
76856: PUSH
76857: LD_INT 1
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: PUSH
76864: LD_INT 4
76866: PUSH
76867: LD_INT 1
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 3
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 3
76886: PUSH
76887: LD_INT 1
76889: NEG
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: PUSH
76895: LD_INT 3
76897: PUSH
76898: LD_INT 2
76900: NEG
76901: PUSH
76902: EMPTY
76903: LIST
76904: LIST
76905: PUSH
76906: LD_INT 5
76908: PUSH
76909: LD_INT 2
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: LIST
76956: LIST
76957: LIST
76958: LIST
76959: LIST
76960: LIST
76961: LIST
76962: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76963: LD_ADDR_VAR 0 32
76967: PUSH
76968: LD_INT 4
76970: NEG
76971: PUSH
76972: LD_INT 0
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 4
76981: NEG
76982: PUSH
76983: LD_INT 1
76985: NEG
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 3
76993: NEG
76994: PUSH
76995: LD_INT 0
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 3
77004: NEG
77005: PUSH
77006: LD_INT 1
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 4
77015: NEG
77016: PUSH
77017: LD_INT 1
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 5
77026: NEG
77027: PUSH
77028: LD_INT 0
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PUSH
77035: LD_INT 5
77037: NEG
77038: PUSH
77039: LD_INT 1
77041: NEG
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PUSH
77047: LD_INT 5
77049: NEG
77050: PUSH
77051: LD_INT 2
77053: NEG
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: LD_INT 3
77061: NEG
77062: PUSH
77063: LD_INT 2
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 3
77072: NEG
77073: PUSH
77074: LD_INT 3
77076: NEG
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: LD_INT 3
77084: NEG
77085: PUSH
77086: LD_INT 4
77088: NEG
77089: PUSH
77090: EMPTY
77091: LIST
77092: LIST
77093: PUSH
77094: LD_INT 2
77096: NEG
77097: PUSH
77098: LD_INT 3
77100: NEG
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 2
77108: NEG
77109: PUSH
77110: LD_INT 2
77112: NEG
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: LD_INT 3
77120: NEG
77121: PUSH
77122: LD_INT 2
77124: NEG
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 4
77132: NEG
77133: PUSH
77134: LD_INT 3
77136: NEG
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 4
77144: NEG
77145: PUSH
77146: LD_INT 4
77148: NEG
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 2
77156: NEG
77157: PUSH
77158: LD_INT 4
77160: NEG
77161: PUSH
77162: EMPTY
77163: LIST
77164: LIST
77165: PUSH
77166: LD_INT 4
77168: NEG
77169: PUSH
77170: LD_INT 2
77172: NEG
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 0
77180: PUSH
77181: LD_INT 4
77183: NEG
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: LD_INT 0
77191: PUSH
77192: LD_INT 5
77194: NEG
77195: PUSH
77196: EMPTY
77197: LIST
77198: LIST
77199: PUSH
77200: LD_INT 1
77202: PUSH
77203: LD_INT 4
77205: NEG
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: PUSH
77211: LD_INT 1
77213: PUSH
77214: LD_INT 3
77216: NEG
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: PUSH
77222: LD_INT 0
77224: PUSH
77225: LD_INT 3
77227: NEG
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 1
77235: NEG
77236: PUSH
77237: LD_INT 4
77239: NEG
77240: PUSH
77241: EMPTY
77242: LIST
77243: LIST
77244: PUSH
77245: LD_INT 1
77247: NEG
77248: PUSH
77249: LD_INT 5
77251: NEG
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PUSH
77257: LD_INT 2
77259: PUSH
77260: LD_INT 3
77262: NEG
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: PUSH
77268: LD_INT 2
77270: NEG
77271: PUSH
77272: LD_INT 5
77274: NEG
77275: PUSH
77276: EMPTY
77277: LIST
77278: LIST
77279: PUSH
77280: LD_INT 3
77282: PUSH
77283: LD_INT 0
77285: PUSH
77286: EMPTY
77287: LIST
77288: LIST
77289: PUSH
77290: LD_INT 3
77292: PUSH
77293: LD_INT 1
77295: NEG
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: LD_INT 4
77303: PUSH
77304: LD_INT 0
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PUSH
77311: LD_INT 4
77313: PUSH
77314: LD_INT 1
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: PUSH
77321: LD_INT 3
77323: PUSH
77324: LD_INT 1
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: PUSH
77331: LD_INT 2
77333: PUSH
77334: LD_INT 0
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: PUSH
77341: LD_INT 2
77343: PUSH
77344: LD_INT 1
77346: NEG
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: PUSH
77352: LD_INT 2
77354: PUSH
77355: LD_INT 2
77357: NEG
77358: PUSH
77359: EMPTY
77360: LIST
77361: LIST
77362: PUSH
77363: LD_INT 4
77365: PUSH
77366: LD_INT 2
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: PUSH
77373: LD_INT 4
77375: PUSH
77376: LD_INT 4
77378: PUSH
77379: EMPTY
77380: LIST
77381: LIST
77382: PUSH
77383: LD_INT 4
77385: PUSH
77386: LD_INT 3
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: PUSH
77393: LD_INT 5
77395: PUSH
77396: LD_INT 4
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: PUSH
77403: LD_INT 5
77405: PUSH
77406: LD_INT 5
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PUSH
77413: LD_INT 4
77415: PUSH
77416: LD_INT 5
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: PUSH
77423: LD_INT 3
77425: PUSH
77426: LD_INT 4
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PUSH
77433: LD_INT 3
77435: PUSH
77436: LD_INT 3
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: PUSH
77443: LD_INT 5
77445: PUSH
77446: LD_INT 3
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_INT 3
77455: PUSH
77456: LD_INT 5
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: LIST
77484: LIST
77485: LIST
77486: LIST
77487: LIST
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: LIST
77495: LIST
77496: LIST
77497: LIST
77498: LIST
77499: LIST
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
77510: LD_ADDR_VAR 0 33
77514: PUSH
77515: LD_INT 4
77517: NEG
77518: PUSH
77519: LD_INT 4
77521: NEG
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: PUSH
77527: LD_INT 4
77529: NEG
77530: PUSH
77531: LD_INT 5
77533: NEG
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_INT 3
77541: NEG
77542: PUSH
77543: LD_INT 4
77545: NEG
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PUSH
77551: LD_INT 3
77553: NEG
77554: PUSH
77555: LD_INT 3
77557: NEG
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 4
77565: NEG
77566: PUSH
77567: LD_INT 3
77569: NEG
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_INT 5
77577: NEG
77578: PUSH
77579: LD_INT 4
77581: NEG
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: PUSH
77587: LD_INT 5
77589: NEG
77590: PUSH
77591: LD_INT 5
77593: NEG
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: PUSH
77599: LD_INT 3
77601: NEG
77602: PUSH
77603: LD_INT 5
77605: NEG
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 5
77613: NEG
77614: PUSH
77615: LD_INT 3
77617: NEG
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: PUSH
77623: LD_INT 0
77625: PUSH
77626: LD_INT 3
77628: NEG
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 0
77636: PUSH
77637: LD_INT 4
77639: NEG
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: PUSH
77645: LD_INT 1
77647: PUSH
77648: LD_INT 3
77650: NEG
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: PUSH
77656: LD_INT 1
77658: PUSH
77659: LD_INT 2
77661: NEG
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PUSH
77667: LD_INT 0
77669: PUSH
77670: LD_INT 2
77672: NEG
77673: PUSH
77674: EMPTY
77675: LIST
77676: LIST
77677: PUSH
77678: LD_INT 1
77680: NEG
77681: PUSH
77682: LD_INT 3
77684: NEG
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: LD_INT 1
77692: NEG
77693: PUSH
77694: LD_INT 4
77696: NEG
77697: PUSH
77698: EMPTY
77699: LIST
77700: LIST
77701: PUSH
77702: LD_INT 2
77704: PUSH
77705: LD_INT 2
77707: NEG
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: PUSH
77713: LD_INT 2
77715: NEG
77716: PUSH
77717: LD_INT 4
77719: NEG
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 4
77727: PUSH
77728: LD_INT 0
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 4
77737: PUSH
77738: LD_INT 1
77740: NEG
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 5
77748: PUSH
77749: LD_INT 0
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: LD_INT 5
77758: PUSH
77759: LD_INT 1
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: PUSH
77766: LD_INT 4
77768: PUSH
77769: LD_INT 1
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: PUSH
77776: LD_INT 3
77778: PUSH
77779: LD_INT 0
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: PUSH
77786: LD_INT 3
77788: PUSH
77789: LD_INT 1
77791: NEG
77792: PUSH
77793: EMPTY
77794: LIST
77795: LIST
77796: PUSH
77797: LD_INT 3
77799: PUSH
77800: LD_INT 2
77802: NEG
77803: PUSH
77804: EMPTY
77805: LIST
77806: LIST
77807: PUSH
77808: LD_INT 5
77810: PUSH
77811: LD_INT 2
77813: PUSH
77814: EMPTY
77815: LIST
77816: LIST
77817: PUSH
77818: LD_INT 3
77820: PUSH
77821: LD_INT 3
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: PUSH
77828: LD_INT 3
77830: PUSH
77831: LD_INT 2
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PUSH
77838: LD_INT 4
77840: PUSH
77841: LD_INT 3
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PUSH
77848: LD_INT 4
77850: PUSH
77851: LD_INT 4
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: PUSH
77858: LD_INT 3
77860: PUSH
77861: LD_INT 4
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PUSH
77868: LD_INT 2
77870: PUSH
77871: LD_INT 3
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: LD_INT 2
77880: PUSH
77881: LD_INT 2
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: PUSH
77888: LD_INT 4
77890: PUSH
77891: LD_INT 2
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: PUSH
77898: LD_INT 2
77900: PUSH
77901: LD_INT 4
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PUSH
77908: LD_INT 0
77910: PUSH
77911: LD_INT 4
77913: PUSH
77914: EMPTY
77915: LIST
77916: LIST
77917: PUSH
77918: LD_INT 0
77920: PUSH
77921: LD_INT 3
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: PUSH
77928: LD_INT 1
77930: PUSH
77931: LD_INT 4
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 1
77940: PUSH
77941: LD_INT 5
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: LD_INT 0
77950: PUSH
77951: LD_INT 5
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 1
77960: NEG
77961: PUSH
77962: LD_INT 4
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: LD_INT 1
77971: NEG
77972: PUSH
77973: LD_INT 3
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: LD_INT 2
77982: PUSH
77983: LD_INT 5
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: PUSH
77990: LD_INT 2
77992: NEG
77993: PUSH
77994: LD_INT 3
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: LIST
78007: LIST
78008: LIST
78009: LIST
78010: LIST
78011: LIST
78012: LIST
78013: LIST
78014: LIST
78015: LIST
78016: LIST
78017: LIST
78018: LIST
78019: LIST
78020: LIST
78021: LIST
78022: LIST
78023: LIST
78024: LIST
78025: LIST
78026: LIST
78027: LIST
78028: LIST
78029: LIST
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: LIST
78043: LIST
78044: LIST
78045: LIST
78046: LIST
78047: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78048: LD_ADDR_VAR 0 34
78052: PUSH
78053: LD_INT 0
78055: PUSH
78056: LD_INT 4
78058: NEG
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 0
78066: PUSH
78067: LD_INT 5
78069: NEG
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 1
78077: PUSH
78078: LD_INT 4
78080: NEG
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PUSH
78086: LD_INT 1
78088: PUSH
78089: LD_INT 3
78091: NEG
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: LD_INT 3
78102: NEG
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 1
78110: NEG
78111: PUSH
78112: LD_INT 4
78114: NEG
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 1
78122: NEG
78123: PUSH
78124: LD_INT 5
78126: NEG
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: PUSH
78132: LD_INT 2
78134: PUSH
78135: LD_INT 3
78137: NEG
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: LD_INT 2
78145: NEG
78146: PUSH
78147: LD_INT 5
78149: NEG
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: PUSH
78155: LD_INT 3
78157: PUSH
78158: LD_INT 0
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PUSH
78165: LD_INT 3
78167: PUSH
78168: LD_INT 1
78170: NEG
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PUSH
78176: LD_INT 4
78178: PUSH
78179: LD_INT 0
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: PUSH
78186: LD_INT 4
78188: PUSH
78189: LD_INT 1
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: PUSH
78196: LD_INT 3
78198: PUSH
78199: LD_INT 1
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: PUSH
78206: LD_INT 2
78208: PUSH
78209: LD_INT 0
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: PUSH
78216: LD_INT 2
78218: PUSH
78219: LD_INT 1
78221: NEG
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: PUSH
78227: LD_INT 2
78229: PUSH
78230: LD_INT 2
78232: NEG
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PUSH
78238: LD_INT 4
78240: PUSH
78241: LD_INT 2
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: PUSH
78248: LD_INT 4
78250: PUSH
78251: LD_INT 4
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: PUSH
78258: LD_INT 4
78260: PUSH
78261: LD_INT 3
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PUSH
78268: LD_INT 5
78270: PUSH
78271: LD_INT 4
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: PUSH
78278: LD_INT 5
78280: PUSH
78281: LD_INT 5
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PUSH
78288: LD_INT 4
78290: PUSH
78291: LD_INT 5
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: PUSH
78298: LD_INT 3
78300: PUSH
78301: LD_INT 4
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 3
78310: PUSH
78311: LD_INT 3
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: PUSH
78318: LD_INT 5
78320: PUSH
78321: LD_INT 3
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: PUSH
78328: LD_INT 3
78330: PUSH
78331: LD_INT 5
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PUSH
78338: LD_INT 0
78340: PUSH
78341: LD_INT 3
78343: PUSH
78344: EMPTY
78345: LIST
78346: LIST
78347: PUSH
78348: LD_INT 0
78350: PUSH
78351: LD_INT 2
78353: PUSH
78354: EMPTY
78355: LIST
78356: LIST
78357: PUSH
78358: LD_INT 1
78360: PUSH
78361: LD_INT 3
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PUSH
78368: LD_INT 1
78370: PUSH
78371: LD_INT 4
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: PUSH
78378: LD_INT 0
78380: PUSH
78381: LD_INT 4
78383: PUSH
78384: EMPTY
78385: LIST
78386: LIST
78387: PUSH
78388: LD_INT 1
78390: NEG
78391: PUSH
78392: LD_INT 3
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 1
78401: NEG
78402: PUSH
78403: LD_INT 2
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PUSH
78410: LD_INT 2
78412: PUSH
78413: LD_INT 4
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: LD_INT 2
78422: NEG
78423: PUSH
78424: LD_INT 2
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PUSH
78431: LD_INT 4
78433: NEG
78434: PUSH
78435: LD_INT 0
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: PUSH
78442: LD_INT 4
78444: NEG
78445: PUSH
78446: LD_INT 1
78448: NEG
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: LD_INT 3
78456: NEG
78457: PUSH
78458: LD_INT 0
78460: PUSH
78461: EMPTY
78462: LIST
78463: LIST
78464: PUSH
78465: LD_INT 3
78467: NEG
78468: PUSH
78469: LD_INT 1
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: PUSH
78476: LD_INT 4
78478: NEG
78479: PUSH
78480: LD_INT 1
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: PUSH
78487: LD_INT 5
78489: NEG
78490: PUSH
78491: LD_INT 0
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: PUSH
78498: LD_INT 5
78500: NEG
78501: PUSH
78502: LD_INT 1
78504: NEG
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PUSH
78510: LD_INT 5
78512: NEG
78513: PUSH
78514: LD_INT 2
78516: NEG
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: PUSH
78522: LD_INT 3
78524: NEG
78525: PUSH
78526: LD_INT 2
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: LIST
78564: LIST
78565: LIST
78566: LIST
78567: LIST
78568: LIST
78569: LIST
78570: LIST
78571: LIST
78572: LIST
78573: LIST
78574: LIST
78575: LIST
78576: LIST
78577: LIST
78578: LIST
78579: ST_TO_ADDR
// end ; end ;
78580: GO 78583
78582: POP
// case btype of b_depot , b_warehouse :
78583: LD_VAR 0 1
78587: PUSH
78588: LD_INT 0
78590: DOUBLE
78591: EQUAL
78592: IFTRUE 78602
78594: LD_INT 1
78596: DOUBLE
78597: EQUAL
78598: IFTRUE 78602
78600: GO 78803
78602: POP
// case nation of nation_american :
78603: LD_VAR 0 5
78607: PUSH
78608: LD_INT 1
78610: DOUBLE
78611: EQUAL
78612: IFTRUE 78616
78614: GO 78672
78616: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
78617: LD_ADDR_VAR 0 9
78621: PUSH
78622: LD_VAR 0 11
78626: PUSH
78627: LD_VAR 0 12
78631: PUSH
78632: LD_VAR 0 13
78636: PUSH
78637: LD_VAR 0 14
78641: PUSH
78642: LD_VAR 0 15
78646: PUSH
78647: LD_VAR 0 16
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: LIST
78656: LIST
78657: LIST
78658: LIST
78659: PUSH
78660: LD_VAR 0 4
78664: PUSH
78665: LD_INT 1
78667: PLUS
78668: ARRAY
78669: ST_TO_ADDR
78670: GO 78801
78672: LD_INT 2
78674: DOUBLE
78675: EQUAL
78676: IFTRUE 78680
78678: GO 78736
78680: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
78681: LD_ADDR_VAR 0 9
78685: PUSH
78686: LD_VAR 0 17
78690: PUSH
78691: LD_VAR 0 18
78695: PUSH
78696: LD_VAR 0 19
78700: PUSH
78701: LD_VAR 0 20
78705: PUSH
78706: LD_VAR 0 21
78710: PUSH
78711: LD_VAR 0 22
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: LIST
78720: LIST
78721: LIST
78722: LIST
78723: PUSH
78724: LD_VAR 0 4
78728: PUSH
78729: LD_INT 1
78731: PLUS
78732: ARRAY
78733: ST_TO_ADDR
78734: GO 78801
78736: LD_INT 3
78738: DOUBLE
78739: EQUAL
78740: IFTRUE 78744
78742: GO 78800
78744: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78745: LD_ADDR_VAR 0 9
78749: PUSH
78750: LD_VAR 0 23
78754: PUSH
78755: LD_VAR 0 24
78759: PUSH
78760: LD_VAR 0 25
78764: PUSH
78765: LD_VAR 0 26
78769: PUSH
78770: LD_VAR 0 27
78774: PUSH
78775: LD_VAR 0 28
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: PUSH
78788: LD_VAR 0 4
78792: PUSH
78793: LD_INT 1
78795: PLUS
78796: ARRAY
78797: ST_TO_ADDR
78798: GO 78801
78800: POP
78801: GO 79356
78803: LD_INT 2
78805: DOUBLE
78806: EQUAL
78807: IFTRUE 78817
78809: LD_INT 3
78811: DOUBLE
78812: EQUAL
78813: IFTRUE 78817
78815: GO 78873
78817: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78818: LD_ADDR_VAR 0 9
78822: PUSH
78823: LD_VAR 0 29
78827: PUSH
78828: LD_VAR 0 30
78832: PUSH
78833: LD_VAR 0 31
78837: PUSH
78838: LD_VAR 0 32
78842: PUSH
78843: LD_VAR 0 33
78847: PUSH
78848: LD_VAR 0 34
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: LIST
78860: PUSH
78861: LD_VAR 0 4
78865: PUSH
78866: LD_INT 1
78868: PLUS
78869: ARRAY
78870: ST_TO_ADDR
78871: GO 79356
78873: LD_INT 16
78875: DOUBLE
78876: EQUAL
78877: IFTRUE 78935
78879: LD_INT 17
78881: DOUBLE
78882: EQUAL
78883: IFTRUE 78935
78885: LD_INT 18
78887: DOUBLE
78888: EQUAL
78889: IFTRUE 78935
78891: LD_INT 19
78893: DOUBLE
78894: EQUAL
78895: IFTRUE 78935
78897: LD_INT 22
78899: DOUBLE
78900: EQUAL
78901: IFTRUE 78935
78903: LD_INT 20
78905: DOUBLE
78906: EQUAL
78907: IFTRUE 78935
78909: LD_INT 21
78911: DOUBLE
78912: EQUAL
78913: IFTRUE 78935
78915: LD_INT 23
78917: DOUBLE
78918: EQUAL
78919: IFTRUE 78935
78921: LD_INT 24
78923: DOUBLE
78924: EQUAL
78925: IFTRUE 78935
78927: LD_INT 25
78929: DOUBLE
78930: EQUAL
78931: IFTRUE 78935
78933: GO 78991
78935: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78936: LD_ADDR_VAR 0 9
78940: PUSH
78941: LD_VAR 0 35
78945: PUSH
78946: LD_VAR 0 36
78950: PUSH
78951: LD_VAR 0 37
78955: PUSH
78956: LD_VAR 0 38
78960: PUSH
78961: LD_VAR 0 39
78965: PUSH
78966: LD_VAR 0 40
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: LIST
78977: LIST
78978: PUSH
78979: LD_VAR 0 4
78983: PUSH
78984: LD_INT 1
78986: PLUS
78987: ARRAY
78988: ST_TO_ADDR
78989: GO 79356
78991: LD_INT 6
78993: DOUBLE
78994: EQUAL
78995: IFTRUE 79047
78997: LD_INT 7
78999: DOUBLE
79000: EQUAL
79001: IFTRUE 79047
79003: LD_INT 8
79005: DOUBLE
79006: EQUAL
79007: IFTRUE 79047
79009: LD_INT 13
79011: DOUBLE
79012: EQUAL
79013: IFTRUE 79047
79015: LD_INT 12
79017: DOUBLE
79018: EQUAL
79019: IFTRUE 79047
79021: LD_INT 15
79023: DOUBLE
79024: EQUAL
79025: IFTRUE 79047
79027: LD_INT 11
79029: DOUBLE
79030: EQUAL
79031: IFTRUE 79047
79033: LD_INT 14
79035: DOUBLE
79036: EQUAL
79037: IFTRUE 79047
79039: LD_INT 10
79041: DOUBLE
79042: EQUAL
79043: IFTRUE 79047
79045: GO 79103
79047: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
79048: LD_ADDR_VAR 0 9
79052: PUSH
79053: LD_VAR 0 41
79057: PUSH
79058: LD_VAR 0 42
79062: PUSH
79063: LD_VAR 0 43
79067: PUSH
79068: LD_VAR 0 44
79072: PUSH
79073: LD_VAR 0 45
79077: PUSH
79078: LD_VAR 0 46
79082: PUSH
79083: EMPTY
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: PUSH
79091: LD_VAR 0 4
79095: PUSH
79096: LD_INT 1
79098: PLUS
79099: ARRAY
79100: ST_TO_ADDR
79101: GO 79356
79103: LD_INT 36
79105: DOUBLE
79106: EQUAL
79107: IFTRUE 79111
79109: GO 79167
79111: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
79112: LD_ADDR_VAR 0 9
79116: PUSH
79117: LD_VAR 0 47
79121: PUSH
79122: LD_VAR 0 48
79126: PUSH
79127: LD_VAR 0 49
79131: PUSH
79132: LD_VAR 0 50
79136: PUSH
79137: LD_VAR 0 51
79141: PUSH
79142: LD_VAR 0 52
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: LIST
79151: LIST
79152: LIST
79153: LIST
79154: PUSH
79155: LD_VAR 0 4
79159: PUSH
79160: LD_INT 1
79162: PLUS
79163: ARRAY
79164: ST_TO_ADDR
79165: GO 79356
79167: LD_INT 4
79169: DOUBLE
79170: EQUAL
79171: IFTRUE 79193
79173: LD_INT 5
79175: DOUBLE
79176: EQUAL
79177: IFTRUE 79193
79179: LD_INT 34
79181: DOUBLE
79182: EQUAL
79183: IFTRUE 79193
79185: LD_INT 37
79187: DOUBLE
79188: EQUAL
79189: IFTRUE 79193
79191: GO 79249
79193: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
79194: LD_ADDR_VAR 0 9
79198: PUSH
79199: LD_VAR 0 53
79203: PUSH
79204: LD_VAR 0 54
79208: PUSH
79209: LD_VAR 0 55
79213: PUSH
79214: LD_VAR 0 56
79218: PUSH
79219: LD_VAR 0 57
79223: PUSH
79224: LD_VAR 0 58
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: LIST
79233: LIST
79234: LIST
79235: LIST
79236: PUSH
79237: LD_VAR 0 4
79241: PUSH
79242: LD_INT 1
79244: PLUS
79245: ARRAY
79246: ST_TO_ADDR
79247: GO 79356
79249: LD_INT 31
79251: DOUBLE
79252: EQUAL
79253: IFTRUE 79299
79255: LD_INT 32
79257: DOUBLE
79258: EQUAL
79259: IFTRUE 79299
79261: LD_INT 33
79263: DOUBLE
79264: EQUAL
79265: IFTRUE 79299
79267: LD_INT 27
79269: DOUBLE
79270: EQUAL
79271: IFTRUE 79299
79273: LD_INT 26
79275: DOUBLE
79276: EQUAL
79277: IFTRUE 79299
79279: LD_INT 28
79281: DOUBLE
79282: EQUAL
79283: IFTRUE 79299
79285: LD_INT 29
79287: DOUBLE
79288: EQUAL
79289: IFTRUE 79299
79291: LD_INT 30
79293: DOUBLE
79294: EQUAL
79295: IFTRUE 79299
79297: GO 79355
79299: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
79300: LD_ADDR_VAR 0 9
79304: PUSH
79305: LD_VAR 0 59
79309: PUSH
79310: LD_VAR 0 60
79314: PUSH
79315: LD_VAR 0 61
79319: PUSH
79320: LD_VAR 0 62
79324: PUSH
79325: LD_VAR 0 63
79329: PUSH
79330: LD_VAR 0 64
79334: PUSH
79335: EMPTY
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: PUSH
79343: LD_VAR 0 4
79347: PUSH
79348: LD_INT 1
79350: PLUS
79351: ARRAY
79352: ST_TO_ADDR
79353: GO 79356
79355: POP
// temp_list2 = [ ] ;
79356: LD_ADDR_VAR 0 10
79360: PUSH
79361: EMPTY
79362: ST_TO_ADDR
// for i in temp_list do
79363: LD_ADDR_VAR 0 8
79367: PUSH
79368: LD_VAR 0 9
79372: PUSH
79373: FOR_IN
79374: IFFALSE 79426
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
79376: LD_ADDR_VAR 0 10
79380: PUSH
79381: LD_VAR 0 10
79385: PUSH
79386: LD_VAR 0 8
79390: PUSH
79391: LD_INT 1
79393: ARRAY
79394: PUSH
79395: LD_VAR 0 2
79399: PLUS
79400: PUSH
79401: LD_VAR 0 8
79405: PUSH
79406: LD_INT 2
79408: ARRAY
79409: PUSH
79410: LD_VAR 0 3
79414: PLUS
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: EMPTY
79421: LIST
79422: ADD
79423: ST_TO_ADDR
79424: GO 79373
79426: POP
79427: POP
// result = temp_list2 ;
79428: LD_ADDR_VAR 0 7
79432: PUSH
79433: LD_VAR 0 10
79437: ST_TO_ADDR
// end ;
79438: LD_VAR 0 7
79442: RET
// export function EnemyInRange ( unit , dist ) ; begin
79443: LD_INT 0
79445: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
79446: LD_ADDR_VAR 0 3
79450: PUSH
79451: LD_VAR 0 1
79455: PPUSH
79456: CALL_OW 255
79460: PPUSH
79461: LD_VAR 0 1
79465: PPUSH
79466: CALL_OW 250
79470: PPUSH
79471: LD_VAR 0 1
79475: PPUSH
79476: CALL_OW 251
79480: PPUSH
79481: LD_VAR 0 2
79485: PPUSH
79486: CALL 53547 0 4
79490: PUSH
79491: LD_INT 4
79493: ARRAY
79494: ST_TO_ADDR
// end ;
79495: LD_VAR 0 3
79499: RET
// export function PlayerSeeMe ( unit ) ; begin
79500: LD_INT 0
79502: PPUSH
// result := See ( your_side , unit ) ;
79503: LD_ADDR_VAR 0 2
79507: PUSH
79508: LD_OWVAR 2
79512: PPUSH
79513: LD_VAR 0 1
79517: PPUSH
79518: CALL_OW 292
79522: ST_TO_ADDR
// end ;
79523: LD_VAR 0 2
79527: RET
// export function ReverseDir ( unit ) ; begin
79528: LD_INT 0
79530: PPUSH
// if not unit then
79531: LD_VAR 0 1
79535: NOT
79536: IFFALSE 79540
// exit ;
79538: GO 79586
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
79540: LD_ADDR_VAR 0 2
79544: PUSH
79545: LD_INT 3
79547: PUSH
79548: LD_INT 4
79550: PUSH
79551: LD_INT 5
79553: PUSH
79554: LD_INT 0
79556: PUSH
79557: LD_INT 1
79559: PUSH
79560: LD_INT 2
79562: PUSH
79563: EMPTY
79564: LIST
79565: LIST
79566: LIST
79567: LIST
79568: LIST
79569: LIST
79570: PUSH
79571: LD_VAR 0 1
79575: PPUSH
79576: CALL_OW 254
79580: PUSH
79581: LD_INT 1
79583: PLUS
79584: ARRAY
79585: ST_TO_ADDR
// end ;
79586: LD_VAR 0 2
79590: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
79591: LD_INT 0
79593: PPUSH
79594: PPUSH
79595: PPUSH
79596: PPUSH
79597: PPUSH
// if not hexes then
79598: LD_VAR 0 2
79602: NOT
79603: IFFALSE 79607
// exit ;
79605: GO 79755
// dist := 9999 ;
79607: LD_ADDR_VAR 0 5
79611: PUSH
79612: LD_INT 9999
79614: ST_TO_ADDR
// for i = 1 to hexes do
79615: LD_ADDR_VAR 0 4
79619: PUSH
79620: DOUBLE
79621: LD_INT 1
79623: DEC
79624: ST_TO_ADDR
79625: LD_VAR 0 2
79629: PUSH
79630: FOR_TO
79631: IFFALSE 79743
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
79633: LD_VAR 0 1
79637: PPUSH
79638: LD_VAR 0 2
79642: PUSH
79643: LD_VAR 0 4
79647: ARRAY
79648: PUSH
79649: LD_INT 1
79651: ARRAY
79652: PPUSH
79653: LD_VAR 0 2
79657: PUSH
79658: LD_VAR 0 4
79662: ARRAY
79663: PUSH
79664: LD_INT 2
79666: ARRAY
79667: PPUSH
79668: CALL_OW 297
79672: PUSH
79673: LD_VAR 0 5
79677: LESS
79678: IFFALSE 79741
// begin hex := hexes [ i ] ;
79680: LD_ADDR_VAR 0 7
79684: PUSH
79685: LD_VAR 0 2
79689: PUSH
79690: LD_VAR 0 4
79694: ARRAY
79695: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
79696: LD_ADDR_VAR 0 5
79700: PUSH
79701: LD_VAR 0 1
79705: PPUSH
79706: LD_VAR 0 2
79710: PUSH
79711: LD_VAR 0 4
79715: ARRAY
79716: PUSH
79717: LD_INT 1
79719: ARRAY
79720: PPUSH
79721: LD_VAR 0 2
79725: PUSH
79726: LD_VAR 0 4
79730: ARRAY
79731: PUSH
79732: LD_INT 2
79734: ARRAY
79735: PPUSH
79736: CALL_OW 297
79740: ST_TO_ADDR
// end ; end ;
79741: GO 79630
79743: POP
79744: POP
// result := hex ;
79745: LD_ADDR_VAR 0 3
79749: PUSH
79750: LD_VAR 0 7
79754: ST_TO_ADDR
// end ;
79755: LD_VAR 0 3
79759: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79760: LD_INT 0
79762: PPUSH
79763: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79764: LD_VAR 0 1
79768: NOT
79769: PUSH
79770: LD_VAR 0 1
79774: PUSH
79775: LD_INT 21
79777: PUSH
79778: LD_INT 2
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PUSH
79785: LD_INT 23
79787: PUSH
79788: LD_INT 2
79790: PUSH
79791: EMPTY
79792: LIST
79793: LIST
79794: PUSH
79795: EMPTY
79796: LIST
79797: LIST
79798: PPUSH
79799: CALL_OW 69
79803: IN
79804: NOT
79805: OR
79806: IFFALSE 79810
// exit ;
79808: GO 79857
// for i = 1 to 3 do
79810: LD_ADDR_VAR 0 3
79814: PUSH
79815: DOUBLE
79816: LD_INT 1
79818: DEC
79819: ST_TO_ADDR
79820: LD_INT 3
79822: PUSH
79823: FOR_TO
79824: IFFALSE 79855
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79826: LD_VAR 0 1
79830: PPUSH
79831: CALL_OW 250
79835: PPUSH
79836: LD_VAR 0 1
79840: PPUSH
79841: CALL_OW 251
79845: PPUSH
79846: LD_INT 1
79848: PPUSH
79849: CALL_OW 453
79853: GO 79823
79855: POP
79856: POP
// end ;
79857: LD_VAR 0 2
79861: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79862: LD_INT 0
79864: PPUSH
79865: PPUSH
79866: PPUSH
79867: PPUSH
79868: PPUSH
79869: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79870: LD_VAR 0 1
79874: NOT
79875: PUSH
79876: LD_VAR 0 2
79880: NOT
79881: OR
79882: PUSH
79883: LD_VAR 0 1
79887: PPUSH
79888: CALL_OW 314
79892: OR
79893: IFFALSE 79897
// exit ;
79895: GO 80338
// x := GetX ( enemy_unit ) ;
79897: LD_ADDR_VAR 0 7
79901: PUSH
79902: LD_VAR 0 2
79906: PPUSH
79907: CALL_OW 250
79911: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79912: LD_ADDR_VAR 0 8
79916: PUSH
79917: LD_VAR 0 2
79921: PPUSH
79922: CALL_OW 251
79926: ST_TO_ADDR
// if not x or not y then
79927: LD_VAR 0 7
79931: NOT
79932: PUSH
79933: LD_VAR 0 8
79937: NOT
79938: OR
79939: IFFALSE 79943
// exit ;
79941: GO 80338
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79943: LD_ADDR_VAR 0 6
79947: PUSH
79948: LD_VAR 0 7
79952: PPUSH
79953: LD_INT 0
79955: PPUSH
79956: LD_INT 4
79958: PPUSH
79959: CALL_OW 272
79963: PUSH
79964: LD_VAR 0 8
79968: PPUSH
79969: LD_INT 0
79971: PPUSH
79972: LD_INT 4
79974: PPUSH
79975: CALL_OW 273
79979: PUSH
79980: EMPTY
79981: LIST
79982: LIST
79983: PUSH
79984: LD_VAR 0 7
79988: PPUSH
79989: LD_INT 1
79991: PPUSH
79992: LD_INT 4
79994: PPUSH
79995: CALL_OW 272
79999: PUSH
80000: LD_VAR 0 8
80004: PPUSH
80005: LD_INT 1
80007: PPUSH
80008: LD_INT 4
80010: PPUSH
80011: CALL_OW 273
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: LD_VAR 0 7
80024: PPUSH
80025: LD_INT 2
80027: PPUSH
80028: LD_INT 4
80030: PPUSH
80031: CALL_OW 272
80035: PUSH
80036: LD_VAR 0 8
80040: PPUSH
80041: LD_INT 2
80043: PPUSH
80044: LD_INT 4
80046: PPUSH
80047: CALL_OW 273
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: PUSH
80056: LD_VAR 0 7
80060: PPUSH
80061: LD_INT 3
80063: PPUSH
80064: LD_INT 4
80066: PPUSH
80067: CALL_OW 272
80071: PUSH
80072: LD_VAR 0 8
80076: PPUSH
80077: LD_INT 3
80079: PPUSH
80080: LD_INT 4
80082: PPUSH
80083: CALL_OW 273
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PUSH
80092: LD_VAR 0 7
80096: PPUSH
80097: LD_INT 4
80099: PPUSH
80100: LD_INT 4
80102: PPUSH
80103: CALL_OW 272
80107: PUSH
80108: LD_VAR 0 8
80112: PPUSH
80113: LD_INT 4
80115: PPUSH
80116: LD_INT 4
80118: PPUSH
80119: CALL_OW 273
80123: PUSH
80124: EMPTY
80125: LIST
80126: LIST
80127: PUSH
80128: LD_VAR 0 7
80132: PPUSH
80133: LD_INT 5
80135: PPUSH
80136: LD_INT 4
80138: PPUSH
80139: CALL_OW 272
80143: PUSH
80144: LD_VAR 0 8
80148: PPUSH
80149: LD_INT 5
80151: PPUSH
80152: LD_INT 4
80154: PPUSH
80155: CALL_OW 273
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: PUSH
80164: EMPTY
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: ST_TO_ADDR
// for i = tmp downto 1 do
80172: LD_ADDR_VAR 0 4
80176: PUSH
80177: DOUBLE
80178: LD_VAR 0 6
80182: INC
80183: ST_TO_ADDR
80184: LD_INT 1
80186: PUSH
80187: FOR_DOWNTO
80188: IFFALSE 80289
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
80190: LD_VAR 0 6
80194: PUSH
80195: LD_VAR 0 4
80199: ARRAY
80200: PUSH
80201: LD_INT 1
80203: ARRAY
80204: PPUSH
80205: LD_VAR 0 6
80209: PUSH
80210: LD_VAR 0 4
80214: ARRAY
80215: PUSH
80216: LD_INT 2
80218: ARRAY
80219: PPUSH
80220: CALL_OW 488
80224: NOT
80225: PUSH
80226: LD_VAR 0 6
80230: PUSH
80231: LD_VAR 0 4
80235: ARRAY
80236: PUSH
80237: LD_INT 1
80239: ARRAY
80240: PPUSH
80241: LD_VAR 0 6
80245: PUSH
80246: LD_VAR 0 4
80250: ARRAY
80251: PUSH
80252: LD_INT 2
80254: ARRAY
80255: PPUSH
80256: CALL_OW 428
80260: PUSH
80261: LD_INT 0
80263: NONEQUAL
80264: OR
80265: IFFALSE 80287
// tmp := Delete ( tmp , i ) ;
80267: LD_ADDR_VAR 0 6
80271: PUSH
80272: LD_VAR 0 6
80276: PPUSH
80277: LD_VAR 0 4
80281: PPUSH
80282: CALL_OW 3
80286: ST_TO_ADDR
80287: GO 80187
80289: POP
80290: POP
// j := GetClosestHex ( unit , tmp ) ;
80291: LD_ADDR_VAR 0 5
80295: PUSH
80296: LD_VAR 0 1
80300: PPUSH
80301: LD_VAR 0 6
80305: PPUSH
80306: CALL 79591 0 2
80310: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
80311: LD_VAR 0 1
80315: PPUSH
80316: LD_VAR 0 5
80320: PUSH
80321: LD_INT 1
80323: ARRAY
80324: PPUSH
80325: LD_VAR 0 5
80329: PUSH
80330: LD_INT 2
80332: ARRAY
80333: PPUSH
80334: CALL_OW 111
// end ;
80338: LD_VAR 0 3
80342: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
80343: LD_INT 0
80345: PPUSH
80346: PPUSH
80347: PPUSH
// uc_side = 0 ;
80348: LD_ADDR_OWVAR 20
80352: PUSH
80353: LD_INT 0
80355: ST_TO_ADDR
// uc_nation = 0 ;
80356: LD_ADDR_OWVAR 21
80360: PUSH
80361: LD_INT 0
80363: ST_TO_ADDR
// InitHc ;
80364: CALL_OW 19
// InitVc ;
80368: CALL_OW 20
// if mastodonts then
80372: LD_VAR 0 6
80376: IFFALSE 80443
// for i = 1 to mastodonts do
80378: LD_ADDR_VAR 0 11
80382: PUSH
80383: DOUBLE
80384: LD_INT 1
80386: DEC
80387: ST_TO_ADDR
80388: LD_VAR 0 6
80392: PUSH
80393: FOR_TO
80394: IFFALSE 80441
// begin vc_chassis := 31 ;
80396: LD_ADDR_OWVAR 37
80400: PUSH
80401: LD_INT 31
80403: ST_TO_ADDR
// vc_control := control_rider ;
80404: LD_ADDR_OWVAR 38
80408: PUSH
80409: LD_INT 4
80411: ST_TO_ADDR
// animal := CreateVehicle ;
80412: LD_ADDR_VAR 0 12
80416: PUSH
80417: CALL_OW 45
80421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80422: LD_VAR 0 12
80426: PPUSH
80427: LD_VAR 0 8
80431: PPUSH
80432: LD_INT 0
80434: PPUSH
80435: CALL 87188 0 3
// end ;
80439: GO 80393
80441: POP
80442: POP
// if horses then
80443: LD_VAR 0 5
80447: IFFALSE 80514
// for i = 1 to horses do
80449: LD_ADDR_VAR 0 11
80453: PUSH
80454: DOUBLE
80455: LD_INT 1
80457: DEC
80458: ST_TO_ADDR
80459: LD_VAR 0 5
80463: PUSH
80464: FOR_TO
80465: IFFALSE 80512
// begin hc_class := 21 ;
80467: LD_ADDR_OWVAR 28
80471: PUSH
80472: LD_INT 21
80474: ST_TO_ADDR
// hc_gallery :=  ;
80475: LD_ADDR_OWVAR 33
80479: PUSH
80480: LD_STRING 
80482: ST_TO_ADDR
// animal := CreateHuman ;
80483: LD_ADDR_VAR 0 12
80487: PUSH
80488: CALL_OW 44
80492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80493: LD_VAR 0 12
80497: PPUSH
80498: LD_VAR 0 8
80502: PPUSH
80503: LD_INT 0
80505: PPUSH
80506: CALL 87188 0 3
// end ;
80510: GO 80464
80512: POP
80513: POP
// if birds then
80514: LD_VAR 0 1
80518: IFFALSE 80585
// for i = 1 to birds do
80520: LD_ADDR_VAR 0 11
80524: PUSH
80525: DOUBLE
80526: LD_INT 1
80528: DEC
80529: ST_TO_ADDR
80530: LD_VAR 0 1
80534: PUSH
80535: FOR_TO
80536: IFFALSE 80583
// begin hc_class = 18 ;
80538: LD_ADDR_OWVAR 28
80542: PUSH
80543: LD_INT 18
80545: ST_TO_ADDR
// hc_gallery =  ;
80546: LD_ADDR_OWVAR 33
80550: PUSH
80551: LD_STRING 
80553: ST_TO_ADDR
// animal := CreateHuman ;
80554: LD_ADDR_VAR 0 12
80558: PUSH
80559: CALL_OW 44
80563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80564: LD_VAR 0 12
80568: PPUSH
80569: LD_VAR 0 8
80573: PPUSH
80574: LD_INT 0
80576: PPUSH
80577: CALL 87188 0 3
// end ;
80581: GO 80535
80583: POP
80584: POP
// if tigers then
80585: LD_VAR 0 2
80589: IFFALSE 80673
// for i = 1 to tigers do
80591: LD_ADDR_VAR 0 11
80595: PUSH
80596: DOUBLE
80597: LD_INT 1
80599: DEC
80600: ST_TO_ADDR
80601: LD_VAR 0 2
80605: PUSH
80606: FOR_TO
80607: IFFALSE 80671
// begin hc_class = class_tiger ;
80609: LD_ADDR_OWVAR 28
80613: PUSH
80614: LD_INT 14
80616: ST_TO_ADDR
// hc_gallery =  ;
80617: LD_ADDR_OWVAR 33
80621: PUSH
80622: LD_STRING 
80624: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
80625: LD_ADDR_OWVAR 35
80629: PUSH
80630: LD_INT 7
80632: NEG
80633: PPUSH
80634: LD_INT 7
80636: PPUSH
80637: CALL_OW 12
80641: ST_TO_ADDR
// animal := CreateHuman ;
80642: LD_ADDR_VAR 0 12
80646: PUSH
80647: CALL_OW 44
80651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80652: LD_VAR 0 12
80656: PPUSH
80657: LD_VAR 0 8
80661: PPUSH
80662: LD_INT 0
80664: PPUSH
80665: CALL 87188 0 3
// end ;
80669: GO 80606
80671: POP
80672: POP
// if apemans then
80673: LD_VAR 0 3
80677: IFFALSE 80800
// for i = 1 to apemans do
80679: LD_ADDR_VAR 0 11
80683: PUSH
80684: DOUBLE
80685: LD_INT 1
80687: DEC
80688: ST_TO_ADDR
80689: LD_VAR 0 3
80693: PUSH
80694: FOR_TO
80695: IFFALSE 80798
// begin hc_class = class_apeman ;
80697: LD_ADDR_OWVAR 28
80701: PUSH
80702: LD_INT 12
80704: ST_TO_ADDR
// hc_gallery =  ;
80705: LD_ADDR_OWVAR 33
80709: PUSH
80710: LD_STRING 
80712: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
80713: LD_ADDR_OWVAR 35
80717: PUSH
80718: LD_INT 5
80720: NEG
80721: PPUSH
80722: LD_INT 5
80724: PPUSH
80725: CALL_OW 12
80729: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80730: LD_ADDR_OWVAR 31
80734: PUSH
80735: LD_INT 1
80737: PPUSH
80738: LD_INT 3
80740: PPUSH
80741: CALL_OW 12
80745: PUSH
80746: LD_INT 1
80748: PPUSH
80749: LD_INT 3
80751: PPUSH
80752: CALL_OW 12
80756: PUSH
80757: LD_INT 0
80759: PUSH
80760: LD_INT 0
80762: PUSH
80763: EMPTY
80764: LIST
80765: LIST
80766: LIST
80767: LIST
80768: ST_TO_ADDR
// animal := CreateHuman ;
80769: LD_ADDR_VAR 0 12
80773: PUSH
80774: CALL_OW 44
80778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80779: LD_VAR 0 12
80783: PPUSH
80784: LD_VAR 0 8
80788: PPUSH
80789: LD_INT 0
80791: PPUSH
80792: CALL 87188 0 3
// end ;
80796: GO 80694
80798: POP
80799: POP
// if enchidnas then
80800: LD_VAR 0 4
80804: IFFALSE 80871
// for i = 1 to enchidnas do
80806: LD_ADDR_VAR 0 11
80810: PUSH
80811: DOUBLE
80812: LD_INT 1
80814: DEC
80815: ST_TO_ADDR
80816: LD_VAR 0 4
80820: PUSH
80821: FOR_TO
80822: IFFALSE 80869
// begin hc_class = 13 ;
80824: LD_ADDR_OWVAR 28
80828: PUSH
80829: LD_INT 13
80831: ST_TO_ADDR
// hc_gallery =  ;
80832: LD_ADDR_OWVAR 33
80836: PUSH
80837: LD_STRING 
80839: ST_TO_ADDR
// animal := CreateHuman ;
80840: LD_ADDR_VAR 0 12
80844: PUSH
80845: CALL_OW 44
80849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80850: LD_VAR 0 12
80854: PPUSH
80855: LD_VAR 0 8
80859: PPUSH
80860: LD_INT 0
80862: PPUSH
80863: CALL 87188 0 3
// end ;
80867: GO 80821
80869: POP
80870: POP
// if fishes then
80871: LD_VAR 0 7
80875: IFFALSE 80942
// for i = 1 to fishes do
80877: LD_ADDR_VAR 0 11
80881: PUSH
80882: DOUBLE
80883: LD_INT 1
80885: DEC
80886: ST_TO_ADDR
80887: LD_VAR 0 7
80891: PUSH
80892: FOR_TO
80893: IFFALSE 80940
// begin hc_class = 20 ;
80895: LD_ADDR_OWVAR 28
80899: PUSH
80900: LD_INT 20
80902: ST_TO_ADDR
// hc_gallery =  ;
80903: LD_ADDR_OWVAR 33
80907: PUSH
80908: LD_STRING 
80910: ST_TO_ADDR
// animal := CreateHuman ;
80911: LD_ADDR_VAR 0 12
80915: PUSH
80916: CALL_OW 44
80920: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80921: LD_VAR 0 12
80925: PPUSH
80926: LD_VAR 0 9
80930: PPUSH
80931: LD_INT 0
80933: PPUSH
80934: CALL 87188 0 3
// end ;
80938: GO 80892
80940: POP
80941: POP
// end ;
80942: LD_VAR 0 10
80946: RET
// export function WantHeal ( sci , unit ) ; begin
80947: LD_INT 0
80949: PPUSH
// if GetTaskList ( sci ) > 0 then
80950: LD_VAR 0 1
80954: PPUSH
80955: CALL_OW 437
80959: PUSH
80960: LD_INT 0
80962: GREATER
80963: IFFALSE 81033
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80965: LD_VAR 0 1
80969: PPUSH
80970: CALL_OW 437
80974: PUSH
80975: LD_INT 1
80977: ARRAY
80978: PUSH
80979: LD_INT 1
80981: ARRAY
80982: PUSH
80983: LD_STRING l
80985: EQUAL
80986: PUSH
80987: LD_VAR 0 1
80991: PPUSH
80992: CALL_OW 437
80996: PUSH
80997: LD_INT 1
80999: ARRAY
81000: PUSH
81001: LD_INT 4
81003: ARRAY
81004: PUSH
81005: LD_VAR 0 2
81009: EQUAL
81010: AND
81011: IFFALSE 81023
// result := true else
81013: LD_ADDR_VAR 0 3
81017: PUSH
81018: LD_INT 1
81020: ST_TO_ADDR
81021: GO 81031
// result := false ;
81023: LD_ADDR_VAR 0 3
81027: PUSH
81028: LD_INT 0
81030: ST_TO_ADDR
// end else
81031: GO 81041
// result := false ;
81033: LD_ADDR_VAR 0 3
81037: PUSH
81038: LD_INT 0
81040: ST_TO_ADDR
// end ;
81041: LD_VAR 0 3
81045: RET
// export function HealTarget ( sci ) ; begin
81046: LD_INT 0
81048: PPUSH
// if not sci then
81049: LD_VAR 0 1
81053: NOT
81054: IFFALSE 81058
// exit ;
81056: GO 81123
// result := 0 ;
81058: LD_ADDR_VAR 0 2
81062: PUSH
81063: LD_INT 0
81065: ST_TO_ADDR
// if GetTaskList ( sci ) then
81066: LD_VAR 0 1
81070: PPUSH
81071: CALL_OW 437
81075: IFFALSE 81123
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
81077: LD_VAR 0 1
81081: PPUSH
81082: CALL_OW 437
81086: PUSH
81087: LD_INT 1
81089: ARRAY
81090: PUSH
81091: LD_INT 1
81093: ARRAY
81094: PUSH
81095: LD_STRING l
81097: EQUAL
81098: IFFALSE 81123
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
81100: LD_ADDR_VAR 0 2
81104: PUSH
81105: LD_VAR 0 1
81109: PPUSH
81110: CALL_OW 437
81114: PUSH
81115: LD_INT 1
81117: ARRAY
81118: PUSH
81119: LD_INT 4
81121: ARRAY
81122: ST_TO_ADDR
// end ;
81123: LD_VAR 0 2
81127: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
81128: LD_INT 0
81130: PPUSH
81131: PPUSH
81132: PPUSH
81133: PPUSH
81134: PPUSH
81135: PPUSH
81136: PPUSH
81137: PPUSH
81138: PPUSH
81139: PPUSH
81140: PPUSH
81141: PPUSH
81142: PPUSH
81143: PPUSH
81144: PPUSH
81145: PPUSH
81146: PPUSH
81147: PPUSH
81148: PPUSH
81149: PPUSH
81150: PPUSH
81151: PPUSH
81152: PPUSH
81153: PPUSH
81154: PPUSH
81155: PPUSH
81156: PPUSH
81157: PPUSH
81158: PPUSH
81159: PPUSH
81160: PPUSH
81161: PPUSH
81162: PPUSH
81163: PPUSH
// if not list then
81164: LD_VAR 0 1
81168: NOT
81169: IFFALSE 81173
// exit ;
81171: GO 85799
// base := list [ 1 ] ;
81173: LD_ADDR_VAR 0 3
81177: PUSH
81178: LD_VAR 0 1
81182: PUSH
81183: LD_INT 1
81185: ARRAY
81186: ST_TO_ADDR
// group := list [ 2 ] ;
81187: LD_ADDR_VAR 0 4
81191: PUSH
81192: LD_VAR 0 1
81196: PUSH
81197: LD_INT 2
81199: ARRAY
81200: ST_TO_ADDR
// path := list [ 3 ] ;
81201: LD_ADDR_VAR 0 5
81205: PUSH
81206: LD_VAR 0 1
81210: PUSH
81211: LD_INT 3
81213: ARRAY
81214: ST_TO_ADDR
// flags := list [ 4 ] ;
81215: LD_ADDR_VAR 0 6
81219: PUSH
81220: LD_VAR 0 1
81224: PUSH
81225: LD_INT 4
81227: ARRAY
81228: ST_TO_ADDR
// mined := [ ] ;
81229: LD_ADDR_VAR 0 27
81233: PUSH
81234: EMPTY
81235: ST_TO_ADDR
// bombed := [ ] ;
81236: LD_ADDR_VAR 0 28
81240: PUSH
81241: EMPTY
81242: ST_TO_ADDR
// healers := [ ] ;
81243: LD_ADDR_VAR 0 31
81247: PUSH
81248: EMPTY
81249: ST_TO_ADDR
// to_heal := [ ] ;
81250: LD_ADDR_VAR 0 30
81254: PUSH
81255: EMPTY
81256: ST_TO_ADDR
// repairs := [ ] ;
81257: LD_ADDR_VAR 0 33
81261: PUSH
81262: EMPTY
81263: ST_TO_ADDR
// to_repair := [ ] ;
81264: LD_ADDR_VAR 0 32
81268: PUSH
81269: EMPTY
81270: ST_TO_ADDR
// if not group or not path then
81271: LD_VAR 0 4
81275: NOT
81276: PUSH
81277: LD_VAR 0 5
81281: NOT
81282: OR
81283: IFFALSE 81287
// exit ;
81285: GO 85799
// side := GetSide ( group [ 1 ] ) ;
81287: LD_ADDR_VAR 0 35
81291: PUSH
81292: LD_VAR 0 4
81296: PUSH
81297: LD_INT 1
81299: ARRAY
81300: PPUSH
81301: CALL_OW 255
81305: ST_TO_ADDR
// if flags then
81306: LD_VAR 0 6
81310: IFFALSE 81454
// begin f_ignore_area := flags [ 1 ] ;
81312: LD_ADDR_VAR 0 17
81316: PUSH
81317: LD_VAR 0 6
81321: PUSH
81322: LD_INT 1
81324: ARRAY
81325: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
81326: LD_ADDR_VAR 0 18
81330: PUSH
81331: LD_VAR 0 6
81335: PUSH
81336: LD_INT 2
81338: ARRAY
81339: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
81340: LD_ADDR_VAR 0 19
81344: PUSH
81345: LD_VAR 0 6
81349: PUSH
81350: LD_INT 3
81352: ARRAY
81353: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
81354: LD_ADDR_VAR 0 20
81358: PUSH
81359: LD_VAR 0 6
81363: PUSH
81364: LD_INT 4
81366: ARRAY
81367: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
81368: LD_ADDR_VAR 0 21
81372: PUSH
81373: LD_VAR 0 6
81377: PUSH
81378: LD_INT 5
81380: ARRAY
81381: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
81382: LD_ADDR_VAR 0 22
81386: PUSH
81387: LD_VAR 0 6
81391: PUSH
81392: LD_INT 6
81394: ARRAY
81395: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
81396: LD_ADDR_VAR 0 23
81400: PUSH
81401: LD_VAR 0 6
81405: PUSH
81406: LD_INT 7
81408: ARRAY
81409: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
81410: LD_ADDR_VAR 0 24
81414: PUSH
81415: LD_VAR 0 6
81419: PUSH
81420: LD_INT 8
81422: ARRAY
81423: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
81424: LD_ADDR_VAR 0 25
81428: PUSH
81429: LD_VAR 0 6
81433: PUSH
81434: LD_INT 9
81436: ARRAY
81437: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
81438: LD_ADDR_VAR 0 26
81442: PUSH
81443: LD_VAR 0 6
81447: PUSH
81448: LD_INT 10
81450: ARRAY
81451: ST_TO_ADDR
// end else
81452: GO 81534
// begin f_ignore_area := false ;
81454: LD_ADDR_VAR 0 17
81458: PUSH
81459: LD_INT 0
81461: ST_TO_ADDR
// f_capture := false ;
81462: LD_ADDR_VAR 0 18
81466: PUSH
81467: LD_INT 0
81469: ST_TO_ADDR
// f_ignore_civ := false ;
81470: LD_ADDR_VAR 0 19
81474: PUSH
81475: LD_INT 0
81477: ST_TO_ADDR
// f_murder := false ;
81478: LD_ADDR_VAR 0 20
81482: PUSH
81483: LD_INT 0
81485: ST_TO_ADDR
// f_mines := false ;
81486: LD_ADDR_VAR 0 21
81490: PUSH
81491: LD_INT 0
81493: ST_TO_ADDR
// f_repair := false ;
81494: LD_ADDR_VAR 0 22
81498: PUSH
81499: LD_INT 0
81501: ST_TO_ADDR
// f_heal := false ;
81502: LD_ADDR_VAR 0 23
81506: PUSH
81507: LD_INT 0
81509: ST_TO_ADDR
// f_spacetime := false ;
81510: LD_ADDR_VAR 0 24
81514: PUSH
81515: LD_INT 0
81517: ST_TO_ADDR
// f_attack_depot := false ;
81518: LD_ADDR_VAR 0 25
81522: PUSH
81523: LD_INT 0
81525: ST_TO_ADDR
// f_crawl := false ;
81526: LD_ADDR_VAR 0 26
81530: PUSH
81531: LD_INT 0
81533: ST_TO_ADDR
// end ; if f_heal then
81534: LD_VAR 0 23
81538: IFFALSE 81565
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
81540: LD_ADDR_VAR 0 31
81544: PUSH
81545: LD_VAR 0 4
81549: PPUSH
81550: LD_INT 25
81552: PUSH
81553: LD_INT 4
81555: PUSH
81556: EMPTY
81557: LIST
81558: LIST
81559: PPUSH
81560: CALL_OW 72
81564: ST_TO_ADDR
// if f_repair then
81565: LD_VAR 0 22
81569: IFFALSE 81596
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
81571: LD_ADDR_VAR 0 33
81575: PUSH
81576: LD_VAR 0 4
81580: PPUSH
81581: LD_INT 25
81583: PUSH
81584: LD_INT 3
81586: PUSH
81587: EMPTY
81588: LIST
81589: LIST
81590: PPUSH
81591: CALL_OW 72
81595: ST_TO_ADDR
// units_path := [ ] ;
81596: LD_ADDR_VAR 0 16
81600: PUSH
81601: EMPTY
81602: ST_TO_ADDR
// for i = 1 to group do
81603: LD_ADDR_VAR 0 7
81607: PUSH
81608: DOUBLE
81609: LD_INT 1
81611: DEC
81612: ST_TO_ADDR
81613: LD_VAR 0 4
81617: PUSH
81618: FOR_TO
81619: IFFALSE 81648
// units_path := Replace ( units_path , i , path ) ;
81621: LD_ADDR_VAR 0 16
81625: PUSH
81626: LD_VAR 0 16
81630: PPUSH
81631: LD_VAR 0 7
81635: PPUSH
81636: LD_VAR 0 5
81640: PPUSH
81641: CALL_OW 1
81645: ST_TO_ADDR
81646: GO 81618
81648: POP
81649: POP
// repeat for i = group downto 1 do
81650: LD_ADDR_VAR 0 7
81654: PUSH
81655: DOUBLE
81656: LD_VAR 0 4
81660: INC
81661: ST_TO_ADDR
81662: LD_INT 1
81664: PUSH
81665: FOR_DOWNTO
81666: IFFALSE 85762
// begin wait ( 5 ) ;
81668: LD_INT 5
81670: PPUSH
81671: CALL_OW 67
// tmp := [ ] ;
81675: LD_ADDR_VAR 0 14
81679: PUSH
81680: EMPTY
81681: ST_TO_ADDR
// attacking := false ;
81682: LD_ADDR_VAR 0 29
81686: PUSH
81687: LD_INT 0
81689: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
81690: LD_VAR 0 4
81694: PUSH
81695: LD_VAR 0 7
81699: ARRAY
81700: PPUSH
81701: CALL_OW 301
81705: PUSH
81706: LD_VAR 0 4
81710: PUSH
81711: LD_VAR 0 7
81715: ARRAY
81716: NOT
81717: OR
81718: IFFALSE 81827
// begin if GetType ( group [ i ] ) = unit_human then
81720: LD_VAR 0 4
81724: PUSH
81725: LD_VAR 0 7
81729: ARRAY
81730: PPUSH
81731: CALL_OW 247
81735: PUSH
81736: LD_INT 1
81738: EQUAL
81739: IFFALSE 81785
// begin to_heal := to_heal diff group [ i ] ;
81741: LD_ADDR_VAR 0 30
81745: PUSH
81746: LD_VAR 0 30
81750: PUSH
81751: LD_VAR 0 4
81755: PUSH
81756: LD_VAR 0 7
81760: ARRAY
81761: DIFF
81762: ST_TO_ADDR
// healers := healers diff group [ i ] ;
81763: LD_ADDR_VAR 0 31
81767: PUSH
81768: LD_VAR 0 31
81772: PUSH
81773: LD_VAR 0 4
81777: PUSH
81778: LD_VAR 0 7
81782: ARRAY
81783: DIFF
81784: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
81785: LD_ADDR_VAR 0 4
81789: PUSH
81790: LD_VAR 0 4
81794: PPUSH
81795: LD_VAR 0 7
81799: PPUSH
81800: CALL_OW 3
81804: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
81805: LD_ADDR_VAR 0 16
81809: PUSH
81810: LD_VAR 0 16
81814: PPUSH
81815: LD_VAR 0 7
81819: PPUSH
81820: CALL_OW 3
81824: ST_TO_ADDR
// continue ;
81825: GO 81665
// end ; if f_repair then
81827: LD_VAR 0 22
81831: IFFALSE 82320
// begin if GetType ( group [ i ] ) = unit_vehicle then
81833: LD_VAR 0 4
81837: PUSH
81838: LD_VAR 0 7
81842: ARRAY
81843: PPUSH
81844: CALL_OW 247
81848: PUSH
81849: LD_INT 2
81851: EQUAL
81852: IFFALSE 82042
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
81854: LD_VAR 0 4
81858: PUSH
81859: LD_VAR 0 7
81863: ARRAY
81864: PPUSH
81865: CALL_OW 256
81869: PUSH
81870: LD_INT 700
81872: LESS
81873: PUSH
81874: LD_VAR 0 4
81878: PUSH
81879: LD_VAR 0 7
81883: ARRAY
81884: PUSH
81885: LD_VAR 0 32
81889: IN
81890: NOT
81891: AND
81892: IFFALSE 81916
// to_repair := to_repair union group [ i ] ;
81894: LD_ADDR_VAR 0 32
81898: PUSH
81899: LD_VAR 0 32
81903: PUSH
81904: LD_VAR 0 4
81908: PUSH
81909: LD_VAR 0 7
81913: ARRAY
81914: UNION
81915: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
81916: LD_VAR 0 4
81920: PUSH
81921: LD_VAR 0 7
81925: ARRAY
81926: PPUSH
81927: CALL_OW 256
81931: PUSH
81932: LD_INT 1000
81934: EQUAL
81935: PUSH
81936: LD_VAR 0 4
81940: PUSH
81941: LD_VAR 0 7
81945: ARRAY
81946: PUSH
81947: LD_VAR 0 32
81951: IN
81952: AND
81953: IFFALSE 81977
// to_repair := to_repair diff group [ i ] ;
81955: LD_ADDR_VAR 0 32
81959: PUSH
81960: LD_VAR 0 32
81964: PUSH
81965: LD_VAR 0 4
81969: PUSH
81970: LD_VAR 0 7
81974: ARRAY
81975: DIFF
81976: ST_TO_ADDR
// if group [ i ] in to_repair then
81977: LD_VAR 0 4
81981: PUSH
81982: LD_VAR 0 7
81986: ARRAY
81987: PUSH
81988: LD_VAR 0 32
81992: IN
81993: IFFALSE 82040
// begin if not IsInArea ( group [ i ] , f_repair ) then
81995: LD_VAR 0 4
81999: PUSH
82000: LD_VAR 0 7
82004: ARRAY
82005: PPUSH
82006: LD_VAR 0 22
82010: PPUSH
82011: CALL_OW 308
82015: NOT
82016: IFFALSE 82038
// ComMoveToArea ( group [ i ] , f_repair ) ;
82018: LD_VAR 0 4
82022: PUSH
82023: LD_VAR 0 7
82027: ARRAY
82028: PPUSH
82029: LD_VAR 0 22
82033: PPUSH
82034: CALL_OW 113
// continue ;
82038: GO 81665
// end ; end else
82040: GO 82320
// if group [ i ] in repairs then
82042: LD_VAR 0 4
82046: PUSH
82047: LD_VAR 0 7
82051: ARRAY
82052: PUSH
82053: LD_VAR 0 33
82057: IN
82058: IFFALSE 82320
// begin if IsInUnit ( group [ i ] ) then
82060: LD_VAR 0 4
82064: PUSH
82065: LD_VAR 0 7
82069: ARRAY
82070: PPUSH
82071: CALL_OW 310
82075: IFFALSE 82143
// begin z := IsInUnit ( group [ i ] ) ;
82077: LD_ADDR_VAR 0 13
82081: PUSH
82082: LD_VAR 0 4
82086: PUSH
82087: LD_VAR 0 7
82091: ARRAY
82092: PPUSH
82093: CALL_OW 310
82097: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
82098: LD_VAR 0 13
82102: PUSH
82103: LD_VAR 0 32
82107: IN
82108: PUSH
82109: LD_VAR 0 13
82113: PPUSH
82114: LD_VAR 0 22
82118: PPUSH
82119: CALL_OW 308
82123: AND
82124: IFFALSE 82141
// ComExitVehicle ( group [ i ] ) ;
82126: LD_VAR 0 4
82130: PUSH
82131: LD_VAR 0 7
82135: ARRAY
82136: PPUSH
82137: CALL_OW 121
// end else
82141: GO 82320
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
82143: LD_ADDR_VAR 0 13
82147: PUSH
82148: LD_VAR 0 4
82152: PPUSH
82153: LD_INT 95
82155: PUSH
82156: LD_VAR 0 22
82160: PUSH
82161: EMPTY
82162: LIST
82163: LIST
82164: PUSH
82165: LD_INT 58
82167: PUSH
82168: EMPTY
82169: LIST
82170: PUSH
82171: EMPTY
82172: LIST
82173: LIST
82174: PPUSH
82175: CALL_OW 72
82179: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
82180: LD_VAR 0 4
82184: PUSH
82185: LD_VAR 0 7
82189: ARRAY
82190: PPUSH
82191: CALL_OW 314
82195: NOT
82196: IFFALSE 82318
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
82198: LD_ADDR_VAR 0 10
82202: PUSH
82203: LD_VAR 0 13
82207: PPUSH
82208: LD_VAR 0 4
82212: PUSH
82213: LD_VAR 0 7
82217: ARRAY
82218: PPUSH
82219: CALL_OW 74
82223: ST_TO_ADDR
// if not x then
82224: LD_VAR 0 10
82228: NOT
82229: IFFALSE 82233
// continue ;
82231: GO 81665
// if GetLives ( x ) < 1000 then
82233: LD_VAR 0 10
82237: PPUSH
82238: CALL_OW 256
82242: PUSH
82243: LD_INT 1000
82245: LESS
82246: IFFALSE 82270
// ComRepairVehicle ( group [ i ] , x ) else
82248: LD_VAR 0 4
82252: PUSH
82253: LD_VAR 0 7
82257: ARRAY
82258: PPUSH
82259: LD_VAR 0 10
82263: PPUSH
82264: CALL_OW 129
82268: GO 82318
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
82270: LD_VAR 0 23
82274: PUSH
82275: LD_VAR 0 4
82279: PUSH
82280: LD_VAR 0 7
82284: ARRAY
82285: PPUSH
82286: CALL_OW 256
82290: PUSH
82291: LD_INT 1000
82293: LESS
82294: AND
82295: NOT
82296: IFFALSE 82318
// ComEnterUnit ( group [ i ] , x ) ;
82298: LD_VAR 0 4
82302: PUSH
82303: LD_VAR 0 7
82307: ARRAY
82308: PPUSH
82309: LD_VAR 0 10
82313: PPUSH
82314: CALL_OW 120
// end ; continue ;
82318: GO 81665
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
82320: LD_VAR 0 23
82324: PUSH
82325: LD_VAR 0 4
82329: PUSH
82330: LD_VAR 0 7
82334: ARRAY
82335: PPUSH
82336: CALL_OW 247
82340: PUSH
82341: LD_INT 1
82343: EQUAL
82344: AND
82345: IFFALSE 82823
// begin if group [ i ] in healers then
82347: LD_VAR 0 4
82351: PUSH
82352: LD_VAR 0 7
82356: ARRAY
82357: PUSH
82358: LD_VAR 0 31
82362: IN
82363: IFFALSE 82636
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
82365: LD_VAR 0 4
82369: PUSH
82370: LD_VAR 0 7
82374: ARRAY
82375: PPUSH
82376: LD_VAR 0 23
82380: PPUSH
82381: CALL_OW 308
82385: NOT
82386: PUSH
82387: LD_VAR 0 4
82391: PUSH
82392: LD_VAR 0 7
82396: ARRAY
82397: PPUSH
82398: CALL_OW 314
82402: NOT
82403: AND
82404: IFFALSE 82428
// ComMoveToArea ( group [ i ] , f_heal ) else
82406: LD_VAR 0 4
82410: PUSH
82411: LD_VAR 0 7
82415: ARRAY
82416: PPUSH
82417: LD_VAR 0 23
82421: PPUSH
82422: CALL_OW 113
82426: GO 82634
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
82428: LD_VAR 0 4
82432: PUSH
82433: LD_VAR 0 7
82437: ARRAY
82438: PPUSH
82439: CALL 81046 0 1
82443: PPUSH
82444: CALL_OW 256
82448: PUSH
82449: LD_INT 1000
82451: EQUAL
82452: IFFALSE 82471
// ComStop ( group [ i ] ) else
82454: LD_VAR 0 4
82458: PUSH
82459: LD_VAR 0 7
82463: ARRAY
82464: PPUSH
82465: CALL_OW 141
82469: GO 82634
// if not HasTask ( group [ i ] ) and to_heal then
82471: LD_VAR 0 4
82475: PUSH
82476: LD_VAR 0 7
82480: ARRAY
82481: PPUSH
82482: CALL_OW 314
82486: NOT
82487: PUSH
82488: LD_VAR 0 30
82492: AND
82493: IFFALSE 82634
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
82495: LD_ADDR_VAR 0 13
82499: PUSH
82500: LD_VAR 0 30
82504: PPUSH
82505: LD_INT 3
82507: PUSH
82508: LD_INT 54
82510: PUSH
82511: EMPTY
82512: LIST
82513: PUSH
82514: EMPTY
82515: LIST
82516: LIST
82517: PPUSH
82518: CALL_OW 72
82522: PPUSH
82523: LD_VAR 0 4
82527: PUSH
82528: LD_VAR 0 7
82532: ARRAY
82533: PPUSH
82534: CALL_OW 74
82538: ST_TO_ADDR
// if z then
82539: LD_VAR 0 13
82543: IFFALSE 82634
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
82545: LD_INT 91
82547: PUSH
82548: LD_VAR 0 13
82552: PUSH
82553: LD_INT 10
82555: PUSH
82556: EMPTY
82557: LIST
82558: LIST
82559: LIST
82560: PUSH
82561: LD_INT 81
82563: PUSH
82564: LD_VAR 0 13
82568: PPUSH
82569: CALL_OW 255
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: PUSH
82578: EMPTY
82579: LIST
82580: LIST
82581: PPUSH
82582: CALL_OW 69
82586: PUSH
82587: LD_INT 0
82589: EQUAL
82590: IFFALSE 82614
// ComHeal ( group [ i ] , z ) else
82592: LD_VAR 0 4
82596: PUSH
82597: LD_VAR 0 7
82601: ARRAY
82602: PPUSH
82603: LD_VAR 0 13
82607: PPUSH
82608: CALL_OW 128
82612: GO 82634
// ComMoveToArea ( group [ i ] , f_heal ) ;
82614: LD_VAR 0 4
82618: PUSH
82619: LD_VAR 0 7
82623: ARRAY
82624: PPUSH
82625: LD_VAR 0 23
82629: PPUSH
82630: CALL_OW 113
// end ; continue ;
82634: GO 81665
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
82636: LD_VAR 0 4
82640: PUSH
82641: LD_VAR 0 7
82645: ARRAY
82646: PPUSH
82647: CALL_OW 256
82651: PUSH
82652: LD_INT 700
82654: LESS
82655: PUSH
82656: LD_VAR 0 4
82660: PUSH
82661: LD_VAR 0 7
82665: ARRAY
82666: PUSH
82667: LD_VAR 0 30
82671: IN
82672: NOT
82673: AND
82674: IFFALSE 82698
// to_heal := to_heal union group [ i ] ;
82676: LD_ADDR_VAR 0 30
82680: PUSH
82681: LD_VAR 0 30
82685: PUSH
82686: LD_VAR 0 4
82690: PUSH
82691: LD_VAR 0 7
82695: ARRAY
82696: UNION
82697: ST_TO_ADDR
// if group [ i ] in to_heal then
82698: LD_VAR 0 4
82702: PUSH
82703: LD_VAR 0 7
82707: ARRAY
82708: PUSH
82709: LD_VAR 0 30
82713: IN
82714: IFFALSE 82823
// begin if GetLives ( group [ i ] ) = 1000 then
82716: LD_VAR 0 4
82720: PUSH
82721: LD_VAR 0 7
82725: ARRAY
82726: PPUSH
82727: CALL_OW 256
82731: PUSH
82732: LD_INT 1000
82734: EQUAL
82735: IFFALSE 82761
// to_heal := to_heal diff group [ i ] else
82737: LD_ADDR_VAR 0 30
82741: PUSH
82742: LD_VAR 0 30
82746: PUSH
82747: LD_VAR 0 4
82751: PUSH
82752: LD_VAR 0 7
82756: ARRAY
82757: DIFF
82758: ST_TO_ADDR
82759: GO 82823
// begin if not IsInArea ( group [ i ] , to_heal ) then
82761: LD_VAR 0 4
82765: PUSH
82766: LD_VAR 0 7
82770: ARRAY
82771: PPUSH
82772: LD_VAR 0 30
82776: PPUSH
82777: CALL_OW 308
82781: NOT
82782: IFFALSE 82806
// ComMoveToArea ( group [ i ] , f_heal ) else
82784: LD_VAR 0 4
82788: PUSH
82789: LD_VAR 0 7
82793: ARRAY
82794: PPUSH
82795: LD_VAR 0 23
82799: PPUSH
82800: CALL_OW 113
82804: GO 82821
// ComHold ( group [ i ] ) ;
82806: LD_VAR 0 4
82810: PUSH
82811: LD_VAR 0 7
82815: ARRAY
82816: PPUSH
82817: CALL_OW 140
// continue ;
82821: GO 81665
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
82823: LD_VAR 0 4
82827: PUSH
82828: LD_VAR 0 7
82832: ARRAY
82833: PPUSH
82834: LD_INT 10
82836: PPUSH
82837: CALL 79443 0 2
82841: NOT
82842: PUSH
82843: LD_VAR 0 16
82847: PUSH
82848: LD_VAR 0 7
82852: ARRAY
82853: PUSH
82854: EMPTY
82855: EQUAL
82856: NOT
82857: AND
82858: IFFALSE 83124
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
82860: LD_VAR 0 4
82864: PUSH
82865: LD_VAR 0 7
82869: ARRAY
82870: PPUSH
82871: CALL_OW 262
82875: PUSH
82876: LD_INT 1
82878: PUSH
82879: LD_INT 2
82881: PUSH
82882: EMPTY
82883: LIST
82884: LIST
82885: IN
82886: IFFALSE 82927
// if GetFuel ( group [ i ] ) < 10 then
82888: LD_VAR 0 4
82892: PUSH
82893: LD_VAR 0 7
82897: ARRAY
82898: PPUSH
82899: CALL_OW 261
82903: PUSH
82904: LD_INT 10
82906: LESS
82907: IFFALSE 82927
// SetFuel ( group [ i ] , 12 ) ;
82909: LD_VAR 0 4
82913: PUSH
82914: LD_VAR 0 7
82918: ARRAY
82919: PPUSH
82920: LD_INT 12
82922: PPUSH
82923: CALL_OW 240
// if units_path [ i ] then
82927: LD_VAR 0 16
82931: PUSH
82932: LD_VAR 0 7
82936: ARRAY
82937: IFFALSE 83122
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
82939: LD_VAR 0 4
82943: PUSH
82944: LD_VAR 0 7
82948: ARRAY
82949: PPUSH
82950: LD_VAR 0 16
82954: PUSH
82955: LD_VAR 0 7
82959: ARRAY
82960: PUSH
82961: LD_INT 1
82963: ARRAY
82964: PUSH
82965: LD_INT 1
82967: ARRAY
82968: PPUSH
82969: LD_VAR 0 16
82973: PUSH
82974: LD_VAR 0 7
82978: ARRAY
82979: PUSH
82980: LD_INT 1
82982: ARRAY
82983: PUSH
82984: LD_INT 2
82986: ARRAY
82987: PPUSH
82988: CALL_OW 297
82992: PUSH
82993: LD_INT 6
82995: GREATER
82996: IFFALSE 83071
// begin if not HasTask ( group [ i ] ) then
82998: LD_VAR 0 4
83002: PUSH
83003: LD_VAR 0 7
83007: ARRAY
83008: PPUSH
83009: CALL_OW 314
83013: NOT
83014: IFFALSE 83069
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
83016: LD_VAR 0 4
83020: PUSH
83021: LD_VAR 0 7
83025: ARRAY
83026: PPUSH
83027: LD_VAR 0 16
83031: PUSH
83032: LD_VAR 0 7
83036: ARRAY
83037: PUSH
83038: LD_INT 1
83040: ARRAY
83041: PUSH
83042: LD_INT 1
83044: ARRAY
83045: PPUSH
83046: LD_VAR 0 16
83050: PUSH
83051: LD_VAR 0 7
83055: ARRAY
83056: PUSH
83057: LD_INT 1
83059: ARRAY
83060: PUSH
83061: LD_INT 2
83063: ARRAY
83064: PPUSH
83065: CALL_OW 114
// end else
83069: GO 83122
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
83071: LD_ADDR_VAR 0 15
83075: PUSH
83076: LD_VAR 0 16
83080: PUSH
83081: LD_VAR 0 7
83085: ARRAY
83086: PPUSH
83087: LD_INT 1
83089: PPUSH
83090: CALL_OW 3
83094: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
83095: LD_ADDR_VAR 0 16
83099: PUSH
83100: LD_VAR 0 16
83104: PPUSH
83105: LD_VAR 0 7
83109: PPUSH
83110: LD_VAR 0 15
83114: PPUSH
83115: CALL_OW 1
83119: ST_TO_ADDR
// continue ;
83120: GO 81665
// end ; end ; end else
83122: GO 85760
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
83124: LD_ADDR_VAR 0 14
83128: PUSH
83129: LD_INT 81
83131: PUSH
83132: LD_VAR 0 4
83136: PUSH
83137: LD_VAR 0 7
83141: ARRAY
83142: PPUSH
83143: CALL_OW 255
83147: PUSH
83148: EMPTY
83149: LIST
83150: LIST
83151: PPUSH
83152: CALL_OW 69
83156: ST_TO_ADDR
// if not tmp then
83157: LD_VAR 0 14
83161: NOT
83162: IFFALSE 83166
// continue ;
83164: GO 81665
// if f_ignore_area then
83166: LD_VAR 0 17
83170: IFFALSE 83258
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
83172: LD_ADDR_VAR 0 15
83176: PUSH
83177: LD_VAR 0 14
83181: PPUSH
83182: LD_INT 3
83184: PUSH
83185: LD_INT 92
83187: PUSH
83188: LD_VAR 0 17
83192: PUSH
83193: LD_INT 1
83195: ARRAY
83196: PUSH
83197: LD_VAR 0 17
83201: PUSH
83202: LD_INT 2
83204: ARRAY
83205: PUSH
83206: LD_VAR 0 17
83210: PUSH
83211: LD_INT 3
83213: ARRAY
83214: PUSH
83215: EMPTY
83216: LIST
83217: LIST
83218: LIST
83219: LIST
83220: PUSH
83221: EMPTY
83222: LIST
83223: LIST
83224: PPUSH
83225: CALL_OW 72
83229: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
83230: LD_VAR 0 14
83234: PUSH
83235: LD_VAR 0 15
83239: DIFF
83240: IFFALSE 83258
// tmp := tmp diff tmp2 ;
83242: LD_ADDR_VAR 0 14
83246: PUSH
83247: LD_VAR 0 14
83251: PUSH
83252: LD_VAR 0 15
83256: DIFF
83257: ST_TO_ADDR
// end ; if not f_murder then
83258: LD_VAR 0 20
83262: NOT
83263: IFFALSE 83321
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
83265: LD_ADDR_VAR 0 15
83269: PUSH
83270: LD_VAR 0 14
83274: PPUSH
83275: LD_INT 3
83277: PUSH
83278: LD_INT 50
83280: PUSH
83281: EMPTY
83282: LIST
83283: PUSH
83284: EMPTY
83285: LIST
83286: LIST
83287: PPUSH
83288: CALL_OW 72
83292: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
83293: LD_VAR 0 14
83297: PUSH
83298: LD_VAR 0 15
83302: DIFF
83303: IFFALSE 83321
// tmp := tmp diff tmp2 ;
83305: LD_ADDR_VAR 0 14
83309: PUSH
83310: LD_VAR 0 14
83314: PUSH
83315: LD_VAR 0 15
83319: DIFF
83320: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
83321: LD_ADDR_VAR 0 14
83325: PUSH
83326: LD_VAR 0 4
83330: PUSH
83331: LD_VAR 0 7
83335: ARRAY
83336: PPUSH
83337: LD_VAR 0 14
83341: PPUSH
83342: LD_INT 1
83344: PPUSH
83345: LD_INT 1
83347: PPUSH
83348: CALL 53086 0 4
83352: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
83353: LD_VAR 0 4
83357: PUSH
83358: LD_VAR 0 7
83362: ARRAY
83363: PPUSH
83364: CALL_OW 257
83368: PUSH
83369: LD_INT 1
83371: EQUAL
83372: IFFALSE 83820
// begin if WantPlant ( group [ i ] ) then
83374: LD_VAR 0 4
83378: PUSH
83379: LD_VAR 0 7
83383: ARRAY
83384: PPUSH
83385: CALL 52587 0 1
83389: IFFALSE 83393
// continue ;
83391: GO 81665
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
83393: LD_VAR 0 18
83397: PUSH
83398: LD_VAR 0 4
83402: PUSH
83403: LD_VAR 0 7
83407: ARRAY
83408: PPUSH
83409: CALL_OW 310
83413: NOT
83414: AND
83415: PUSH
83416: LD_VAR 0 14
83420: PUSH
83421: LD_INT 1
83423: ARRAY
83424: PUSH
83425: LD_VAR 0 14
83429: PPUSH
83430: LD_INT 21
83432: PUSH
83433: LD_INT 2
83435: PUSH
83436: EMPTY
83437: LIST
83438: LIST
83439: PUSH
83440: LD_INT 58
83442: PUSH
83443: EMPTY
83444: LIST
83445: PUSH
83446: EMPTY
83447: LIST
83448: LIST
83449: PPUSH
83450: CALL_OW 72
83454: IN
83455: AND
83456: IFFALSE 83492
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
83458: LD_VAR 0 4
83462: PUSH
83463: LD_VAR 0 7
83467: ARRAY
83468: PPUSH
83469: LD_VAR 0 14
83473: PUSH
83474: LD_INT 1
83476: ARRAY
83477: PPUSH
83478: CALL_OW 120
// attacking := true ;
83482: LD_ADDR_VAR 0 29
83486: PUSH
83487: LD_INT 1
83489: ST_TO_ADDR
// continue ;
83490: GO 81665
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
83492: LD_VAR 0 26
83496: PUSH
83497: LD_VAR 0 4
83501: PUSH
83502: LD_VAR 0 7
83506: ARRAY
83507: PPUSH
83508: CALL_OW 257
83512: PUSH
83513: LD_INT 1
83515: EQUAL
83516: AND
83517: PUSH
83518: LD_VAR 0 4
83522: PUSH
83523: LD_VAR 0 7
83527: ARRAY
83528: PPUSH
83529: CALL_OW 256
83533: PUSH
83534: LD_INT 800
83536: LESS
83537: AND
83538: PUSH
83539: LD_VAR 0 4
83543: PUSH
83544: LD_VAR 0 7
83548: ARRAY
83549: PPUSH
83550: CALL_OW 318
83554: NOT
83555: AND
83556: IFFALSE 83573
// ComCrawl ( group [ i ] ) ;
83558: LD_VAR 0 4
83562: PUSH
83563: LD_VAR 0 7
83567: ARRAY
83568: PPUSH
83569: CALL_OW 137
// if f_mines then
83573: LD_VAR 0 21
83577: IFFALSE 83820
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
83579: LD_VAR 0 14
83583: PUSH
83584: LD_INT 1
83586: ARRAY
83587: PPUSH
83588: CALL_OW 247
83592: PUSH
83593: LD_INT 3
83595: EQUAL
83596: PUSH
83597: LD_VAR 0 14
83601: PUSH
83602: LD_INT 1
83604: ARRAY
83605: PUSH
83606: LD_VAR 0 27
83610: IN
83611: NOT
83612: AND
83613: IFFALSE 83820
// begin x := GetX ( tmp [ 1 ] ) ;
83615: LD_ADDR_VAR 0 10
83619: PUSH
83620: LD_VAR 0 14
83624: PUSH
83625: LD_INT 1
83627: ARRAY
83628: PPUSH
83629: CALL_OW 250
83633: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
83634: LD_ADDR_VAR 0 11
83638: PUSH
83639: LD_VAR 0 14
83643: PUSH
83644: LD_INT 1
83646: ARRAY
83647: PPUSH
83648: CALL_OW 251
83652: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
83653: LD_ADDR_VAR 0 12
83657: PUSH
83658: LD_VAR 0 4
83662: PUSH
83663: LD_VAR 0 7
83667: ARRAY
83668: PPUSH
83669: CALL 79528 0 1
83673: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
83674: LD_VAR 0 4
83678: PUSH
83679: LD_VAR 0 7
83683: ARRAY
83684: PPUSH
83685: LD_VAR 0 10
83689: PPUSH
83690: LD_VAR 0 11
83694: PPUSH
83695: LD_VAR 0 14
83699: PUSH
83700: LD_INT 1
83702: ARRAY
83703: PPUSH
83704: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
83708: LD_VAR 0 4
83712: PUSH
83713: LD_VAR 0 7
83717: ARRAY
83718: PPUSH
83719: LD_VAR 0 10
83723: PPUSH
83724: LD_VAR 0 12
83728: PPUSH
83729: LD_INT 7
83731: PPUSH
83732: CALL_OW 272
83736: PPUSH
83737: LD_VAR 0 11
83741: PPUSH
83742: LD_VAR 0 12
83746: PPUSH
83747: LD_INT 7
83749: PPUSH
83750: CALL_OW 273
83754: PPUSH
83755: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
83759: LD_VAR 0 4
83763: PUSH
83764: LD_VAR 0 7
83768: ARRAY
83769: PPUSH
83770: LD_INT 71
83772: PPUSH
83773: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
83777: LD_ADDR_VAR 0 27
83781: PUSH
83782: LD_VAR 0 27
83786: PPUSH
83787: LD_VAR 0 27
83791: PUSH
83792: LD_INT 1
83794: PLUS
83795: PPUSH
83796: LD_VAR 0 14
83800: PUSH
83801: LD_INT 1
83803: ARRAY
83804: PPUSH
83805: CALL_OW 1
83809: ST_TO_ADDR
// attacking := true ;
83810: LD_ADDR_VAR 0 29
83814: PUSH
83815: LD_INT 1
83817: ST_TO_ADDR
// continue ;
83818: GO 81665
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
83820: LD_VAR 0 4
83824: PUSH
83825: LD_VAR 0 7
83829: ARRAY
83830: PPUSH
83831: CALL_OW 257
83835: PUSH
83836: LD_INT 17
83838: EQUAL
83839: PUSH
83840: LD_VAR 0 4
83844: PUSH
83845: LD_VAR 0 7
83849: ARRAY
83850: PPUSH
83851: CALL_OW 110
83855: PUSH
83856: LD_INT 71
83858: EQUAL
83859: NOT
83860: AND
83861: IFFALSE 84007
// begin attacking := false ;
83863: LD_ADDR_VAR 0 29
83867: PUSH
83868: LD_INT 0
83870: ST_TO_ADDR
// k := 5 ;
83871: LD_ADDR_VAR 0 9
83875: PUSH
83876: LD_INT 5
83878: ST_TO_ADDR
// if tmp < k then
83879: LD_VAR 0 14
83883: PUSH
83884: LD_VAR 0 9
83888: LESS
83889: IFFALSE 83901
// k := tmp ;
83891: LD_ADDR_VAR 0 9
83895: PUSH
83896: LD_VAR 0 14
83900: ST_TO_ADDR
// for j = 1 to k do
83901: LD_ADDR_VAR 0 8
83905: PUSH
83906: DOUBLE
83907: LD_INT 1
83909: DEC
83910: ST_TO_ADDR
83911: LD_VAR 0 9
83915: PUSH
83916: FOR_TO
83917: IFFALSE 84005
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
83919: LD_VAR 0 14
83923: PUSH
83924: LD_VAR 0 8
83928: ARRAY
83929: PUSH
83930: LD_VAR 0 14
83934: PPUSH
83935: LD_INT 58
83937: PUSH
83938: EMPTY
83939: LIST
83940: PPUSH
83941: CALL_OW 72
83945: IN
83946: NOT
83947: IFFALSE 84003
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83949: LD_VAR 0 4
83953: PUSH
83954: LD_VAR 0 7
83958: ARRAY
83959: PPUSH
83960: LD_VAR 0 14
83964: PUSH
83965: LD_VAR 0 8
83969: ARRAY
83970: PPUSH
83971: CALL_OW 115
// attacking := true ;
83975: LD_ADDR_VAR 0 29
83979: PUSH
83980: LD_INT 1
83982: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
83983: LD_VAR 0 4
83987: PUSH
83988: LD_VAR 0 7
83992: ARRAY
83993: PPUSH
83994: LD_INT 71
83996: PPUSH
83997: CALL_OW 109
// continue ;
84001: GO 83916
// end ; end ;
84003: GO 83916
84005: POP
84006: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
84007: LD_VAR 0 4
84011: PUSH
84012: LD_VAR 0 7
84016: ARRAY
84017: PPUSH
84018: CALL_OW 257
84022: PUSH
84023: LD_INT 8
84025: EQUAL
84026: PUSH
84027: LD_VAR 0 4
84031: PUSH
84032: LD_VAR 0 7
84036: ARRAY
84037: PPUSH
84038: CALL_OW 264
84042: PUSH
84043: LD_INT 28
84045: PUSH
84046: LD_INT 45
84048: PUSH
84049: LD_INT 7
84051: PUSH
84052: LD_INT 47
84054: PUSH
84055: EMPTY
84056: LIST
84057: LIST
84058: LIST
84059: LIST
84060: IN
84061: OR
84062: IFFALSE 84292
// begin attacking := false ;
84064: LD_ADDR_VAR 0 29
84068: PUSH
84069: LD_INT 0
84071: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
84072: LD_VAR 0 14
84076: PUSH
84077: LD_INT 1
84079: ARRAY
84080: PPUSH
84081: CALL_OW 266
84085: PUSH
84086: LD_INT 32
84088: PUSH
84089: LD_INT 31
84091: PUSH
84092: LD_INT 33
84094: PUSH
84095: LD_INT 4
84097: PUSH
84098: LD_INT 5
84100: PUSH
84101: EMPTY
84102: LIST
84103: LIST
84104: LIST
84105: LIST
84106: LIST
84107: IN
84108: IFFALSE 84292
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
84110: LD_ADDR_VAR 0 9
84114: PUSH
84115: LD_VAR 0 14
84119: PUSH
84120: LD_INT 1
84122: ARRAY
84123: PPUSH
84124: CALL_OW 266
84128: PPUSH
84129: LD_VAR 0 14
84133: PUSH
84134: LD_INT 1
84136: ARRAY
84137: PPUSH
84138: CALL_OW 250
84142: PPUSH
84143: LD_VAR 0 14
84147: PUSH
84148: LD_INT 1
84150: ARRAY
84151: PPUSH
84152: CALL_OW 251
84156: PPUSH
84157: LD_VAR 0 14
84161: PUSH
84162: LD_INT 1
84164: ARRAY
84165: PPUSH
84166: CALL_OW 254
84170: PPUSH
84171: LD_VAR 0 14
84175: PUSH
84176: LD_INT 1
84178: ARRAY
84179: PPUSH
84180: CALL_OW 248
84184: PPUSH
84185: LD_INT 0
84187: PPUSH
84188: CALL 60898 0 6
84192: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
84193: LD_ADDR_VAR 0 8
84197: PUSH
84198: LD_VAR 0 4
84202: PUSH
84203: LD_VAR 0 7
84207: ARRAY
84208: PPUSH
84209: LD_VAR 0 9
84213: PPUSH
84214: CALL 79591 0 2
84218: ST_TO_ADDR
// if j then
84219: LD_VAR 0 8
84223: IFFALSE 84292
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
84225: LD_VAR 0 8
84229: PUSH
84230: LD_INT 1
84232: ARRAY
84233: PPUSH
84234: LD_VAR 0 8
84238: PUSH
84239: LD_INT 2
84241: ARRAY
84242: PPUSH
84243: CALL_OW 488
84247: IFFALSE 84292
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
84249: LD_VAR 0 4
84253: PUSH
84254: LD_VAR 0 7
84258: ARRAY
84259: PPUSH
84260: LD_VAR 0 8
84264: PUSH
84265: LD_INT 1
84267: ARRAY
84268: PPUSH
84269: LD_VAR 0 8
84273: PUSH
84274: LD_INT 2
84276: ARRAY
84277: PPUSH
84278: CALL_OW 116
// attacking := true ;
84282: LD_ADDR_VAR 0 29
84286: PUSH
84287: LD_INT 1
84289: ST_TO_ADDR
// continue ;
84290: GO 81665
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
84292: LD_VAR 0 4
84296: PUSH
84297: LD_VAR 0 7
84301: ARRAY
84302: PPUSH
84303: CALL_OW 265
84307: PUSH
84308: LD_INT 11
84310: EQUAL
84311: IFFALSE 84589
// begin k := 10 ;
84313: LD_ADDR_VAR 0 9
84317: PUSH
84318: LD_INT 10
84320: ST_TO_ADDR
// x := 0 ;
84321: LD_ADDR_VAR 0 10
84325: PUSH
84326: LD_INT 0
84328: ST_TO_ADDR
// if tmp < k then
84329: LD_VAR 0 14
84333: PUSH
84334: LD_VAR 0 9
84338: LESS
84339: IFFALSE 84351
// k := tmp ;
84341: LD_ADDR_VAR 0 9
84345: PUSH
84346: LD_VAR 0 14
84350: ST_TO_ADDR
// for j = k downto 1 do
84351: LD_ADDR_VAR 0 8
84355: PUSH
84356: DOUBLE
84357: LD_VAR 0 9
84361: INC
84362: ST_TO_ADDR
84363: LD_INT 1
84365: PUSH
84366: FOR_DOWNTO
84367: IFFALSE 84442
// begin if GetType ( tmp [ j ] ) = unit_human then
84369: LD_VAR 0 14
84373: PUSH
84374: LD_VAR 0 8
84378: ARRAY
84379: PPUSH
84380: CALL_OW 247
84384: PUSH
84385: LD_INT 1
84387: EQUAL
84388: IFFALSE 84440
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
84390: LD_VAR 0 4
84394: PUSH
84395: LD_VAR 0 7
84399: ARRAY
84400: PPUSH
84401: LD_VAR 0 14
84405: PUSH
84406: LD_VAR 0 8
84410: ARRAY
84411: PPUSH
84412: CALL 79862 0 2
// x := tmp [ j ] ;
84416: LD_ADDR_VAR 0 10
84420: PUSH
84421: LD_VAR 0 14
84425: PUSH
84426: LD_VAR 0 8
84430: ARRAY
84431: ST_TO_ADDR
// attacking := true ;
84432: LD_ADDR_VAR 0 29
84436: PUSH
84437: LD_INT 1
84439: ST_TO_ADDR
// end ; end ;
84440: GO 84366
84442: POP
84443: POP
// if not x then
84444: LD_VAR 0 10
84448: NOT
84449: IFFALSE 84589
// begin attacking := true ;
84451: LD_ADDR_VAR 0 29
84455: PUSH
84456: LD_INT 1
84458: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
84459: LD_VAR 0 4
84463: PUSH
84464: LD_VAR 0 7
84468: ARRAY
84469: PPUSH
84470: CALL_OW 250
84474: PPUSH
84475: LD_VAR 0 4
84479: PUSH
84480: LD_VAR 0 7
84484: ARRAY
84485: PPUSH
84486: CALL_OW 251
84490: PPUSH
84491: CALL_OW 546
84495: PUSH
84496: LD_INT 2
84498: ARRAY
84499: PUSH
84500: LD_VAR 0 14
84504: PUSH
84505: LD_INT 1
84507: ARRAY
84508: PPUSH
84509: CALL_OW 250
84513: PPUSH
84514: LD_VAR 0 14
84518: PUSH
84519: LD_INT 1
84521: ARRAY
84522: PPUSH
84523: CALL_OW 251
84527: PPUSH
84528: CALL_OW 546
84532: PUSH
84533: LD_INT 2
84535: ARRAY
84536: EQUAL
84537: IFFALSE 84565
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
84539: LD_VAR 0 4
84543: PUSH
84544: LD_VAR 0 7
84548: ARRAY
84549: PPUSH
84550: LD_VAR 0 14
84554: PUSH
84555: LD_INT 1
84557: ARRAY
84558: PPUSH
84559: CALL 79862 0 2
84563: GO 84589
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
84565: LD_VAR 0 4
84569: PUSH
84570: LD_VAR 0 7
84574: ARRAY
84575: PPUSH
84576: LD_VAR 0 14
84580: PUSH
84581: LD_INT 1
84583: ARRAY
84584: PPUSH
84585: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
84589: LD_VAR 0 4
84593: PUSH
84594: LD_VAR 0 7
84598: ARRAY
84599: PPUSH
84600: CALL_OW 264
84604: PUSH
84605: LD_INT 29
84607: EQUAL
84608: IFFALSE 84974
// begin if WantsToAttack ( group [ i ] ) in bombed then
84610: LD_VAR 0 4
84614: PUSH
84615: LD_VAR 0 7
84619: ARRAY
84620: PPUSH
84621: CALL_OW 319
84625: PUSH
84626: LD_VAR 0 28
84630: IN
84631: IFFALSE 84635
// continue ;
84633: GO 81665
// k := 8 ;
84635: LD_ADDR_VAR 0 9
84639: PUSH
84640: LD_INT 8
84642: ST_TO_ADDR
// x := 0 ;
84643: LD_ADDR_VAR 0 10
84647: PUSH
84648: LD_INT 0
84650: ST_TO_ADDR
// if tmp < k then
84651: LD_VAR 0 14
84655: PUSH
84656: LD_VAR 0 9
84660: LESS
84661: IFFALSE 84673
// k := tmp ;
84663: LD_ADDR_VAR 0 9
84667: PUSH
84668: LD_VAR 0 14
84672: ST_TO_ADDR
// for j = 1 to k do
84673: LD_ADDR_VAR 0 8
84677: PUSH
84678: DOUBLE
84679: LD_INT 1
84681: DEC
84682: ST_TO_ADDR
84683: LD_VAR 0 9
84687: PUSH
84688: FOR_TO
84689: IFFALSE 84821
// begin if GetType ( tmp [ j ] ) = unit_building then
84691: LD_VAR 0 14
84695: PUSH
84696: LD_VAR 0 8
84700: ARRAY
84701: PPUSH
84702: CALL_OW 247
84706: PUSH
84707: LD_INT 3
84709: EQUAL
84710: IFFALSE 84819
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
84712: LD_VAR 0 14
84716: PUSH
84717: LD_VAR 0 8
84721: ARRAY
84722: PUSH
84723: LD_VAR 0 28
84727: IN
84728: NOT
84729: PUSH
84730: LD_VAR 0 14
84734: PUSH
84735: LD_VAR 0 8
84739: ARRAY
84740: PPUSH
84741: CALL_OW 313
84745: AND
84746: IFFALSE 84819
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
84748: LD_VAR 0 4
84752: PUSH
84753: LD_VAR 0 7
84757: ARRAY
84758: PPUSH
84759: LD_VAR 0 14
84763: PUSH
84764: LD_VAR 0 8
84768: ARRAY
84769: PPUSH
84770: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
84774: LD_ADDR_VAR 0 28
84778: PUSH
84779: LD_VAR 0 28
84783: PPUSH
84784: LD_VAR 0 28
84788: PUSH
84789: LD_INT 1
84791: PLUS
84792: PPUSH
84793: LD_VAR 0 14
84797: PUSH
84798: LD_VAR 0 8
84802: ARRAY
84803: PPUSH
84804: CALL_OW 1
84808: ST_TO_ADDR
// attacking := true ;
84809: LD_ADDR_VAR 0 29
84813: PUSH
84814: LD_INT 1
84816: ST_TO_ADDR
// break ;
84817: GO 84821
// end ; end ;
84819: GO 84688
84821: POP
84822: POP
// if not attacking and f_attack_depot then
84823: LD_VAR 0 29
84827: NOT
84828: PUSH
84829: LD_VAR 0 25
84833: AND
84834: IFFALSE 84929
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84836: LD_ADDR_VAR 0 13
84840: PUSH
84841: LD_VAR 0 14
84845: PPUSH
84846: LD_INT 2
84848: PUSH
84849: LD_INT 30
84851: PUSH
84852: LD_INT 0
84854: PUSH
84855: EMPTY
84856: LIST
84857: LIST
84858: PUSH
84859: LD_INT 30
84861: PUSH
84862: LD_INT 1
84864: PUSH
84865: EMPTY
84866: LIST
84867: LIST
84868: PUSH
84869: EMPTY
84870: LIST
84871: LIST
84872: LIST
84873: PPUSH
84874: CALL_OW 72
84878: ST_TO_ADDR
// if z then
84879: LD_VAR 0 13
84883: IFFALSE 84929
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
84885: LD_VAR 0 4
84889: PUSH
84890: LD_VAR 0 7
84894: ARRAY
84895: PPUSH
84896: LD_VAR 0 13
84900: PPUSH
84901: LD_VAR 0 4
84905: PUSH
84906: LD_VAR 0 7
84910: ARRAY
84911: PPUSH
84912: CALL_OW 74
84916: PPUSH
84917: CALL_OW 115
// attacking := true ;
84921: LD_ADDR_VAR 0 29
84925: PUSH
84926: LD_INT 1
84928: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
84929: LD_VAR 0 4
84933: PUSH
84934: LD_VAR 0 7
84938: ARRAY
84939: PPUSH
84940: CALL_OW 256
84944: PUSH
84945: LD_INT 500
84947: LESS
84948: IFFALSE 84974
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
84950: LD_VAR 0 4
84954: PUSH
84955: LD_VAR 0 7
84959: ARRAY
84960: PPUSH
84961: LD_VAR 0 14
84965: PUSH
84966: LD_INT 1
84968: ARRAY
84969: PPUSH
84970: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
84974: LD_VAR 0 4
84978: PUSH
84979: LD_VAR 0 7
84983: ARRAY
84984: PPUSH
84985: CALL_OW 264
84989: PUSH
84990: LD_INT 49
84992: EQUAL
84993: IFFALSE 85114
// begin if not HasTask ( group [ i ] ) then
84995: LD_VAR 0 4
84999: PUSH
85000: LD_VAR 0 7
85004: ARRAY
85005: PPUSH
85006: CALL_OW 314
85010: NOT
85011: IFFALSE 85114
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
85013: LD_ADDR_VAR 0 9
85017: PUSH
85018: LD_INT 81
85020: PUSH
85021: LD_VAR 0 4
85025: PUSH
85026: LD_VAR 0 7
85030: ARRAY
85031: PPUSH
85032: CALL_OW 255
85036: PUSH
85037: EMPTY
85038: LIST
85039: LIST
85040: PPUSH
85041: CALL_OW 69
85045: PPUSH
85046: LD_VAR 0 4
85050: PUSH
85051: LD_VAR 0 7
85055: ARRAY
85056: PPUSH
85057: CALL_OW 74
85061: ST_TO_ADDR
// if k then
85062: LD_VAR 0 9
85066: IFFALSE 85114
// if GetDistUnits ( group [ i ] , k ) > 10 then
85068: LD_VAR 0 4
85072: PUSH
85073: LD_VAR 0 7
85077: ARRAY
85078: PPUSH
85079: LD_VAR 0 9
85083: PPUSH
85084: CALL_OW 296
85088: PUSH
85089: LD_INT 10
85091: GREATER
85092: IFFALSE 85114
// ComMoveUnit ( group [ i ] , k ) ;
85094: LD_VAR 0 4
85098: PUSH
85099: LD_VAR 0 7
85103: ARRAY
85104: PPUSH
85105: LD_VAR 0 9
85109: PPUSH
85110: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
85114: LD_VAR 0 4
85118: PUSH
85119: LD_VAR 0 7
85123: ARRAY
85124: PPUSH
85125: CALL_OW 256
85129: PUSH
85130: LD_INT 250
85132: LESS
85133: PUSH
85134: LD_VAR 0 4
85138: PUSH
85139: LD_VAR 0 7
85143: ARRAY
85144: PUSH
85145: LD_INT 21
85147: PUSH
85148: LD_INT 2
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: LD_INT 23
85157: PUSH
85158: LD_INT 2
85160: PUSH
85161: EMPTY
85162: LIST
85163: LIST
85164: PUSH
85165: EMPTY
85166: LIST
85167: LIST
85168: PPUSH
85169: CALL_OW 69
85173: IN
85174: AND
85175: IFFALSE 85300
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
85177: LD_ADDR_VAR 0 9
85181: PUSH
85182: LD_OWVAR 3
85186: PUSH
85187: LD_VAR 0 4
85191: PUSH
85192: LD_VAR 0 7
85196: ARRAY
85197: DIFF
85198: PPUSH
85199: LD_VAR 0 4
85203: PUSH
85204: LD_VAR 0 7
85208: ARRAY
85209: PPUSH
85210: CALL_OW 74
85214: ST_TO_ADDR
// if not k then
85215: LD_VAR 0 9
85219: NOT
85220: IFFALSE 85224
// continue ;
85222: GO 81665
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
85224: LD_VAR 0 9
85228: PUSH
85229: LD_INT 81
85231: PUSH
85232: LD_VAR 0 4
85236: PUSH
85237: LD_VAR 0 7
85241: ARRAY
85242: PPUSH
85243: CALL_OW 255
85247: PUSH
85248: EMPTY
85249: LIST
85250: LIST
85251: PPUSH
85252: CALL_OW 69
85256: IN
85257: PUSH
85258: LD_VAR 0 9
85262: PPUSH
85263: LD_VAR 0 4
85267: PUSH
85268: LD_VAR 0 7
85272: ARRAY
85273: PPUSH
85274: CALL_OW 296
85278: PUSH
85279: LD_INT 5
85281: LESS
85282: AND
85283: IFFALSE 85300
// ComAutodestruct ( group [ i ] ) ;
85285: LD_VAR 0 4
85289: PUSH
85290: LD_VAR 0 7
85294: ARRAY
85295: PPUSH
85296: CALL 79760 0 1
// end ; if f_attack_depot then
85300: LD_VAR 0 25
85304: IFFALSE 85416
// begin k := 6 ;
85306: LD_ADDR_VAR 0 9
85310: PUSH
85311: LD_INT 6
85313: ST_TO_ADDR
// if tmp < k then
85314: LD_VAR 0 14
85318: PUSH
85319: LD_VAR 0 9
85323: LESS
85324: IFFALSE 85336
// k := tmp ;
85326: LD_ADDR_VAR 0 9
85330: PUSH
85331: LD_VAR 0 14
85335: ST_TO_ADDR
// for j = 1 to k do
85336: LD_ADDR_VAR 0 8
85340: PUSH
85341: DOUBLE
85342: LD_INT 1
85344: DEC
85345: ST_TO_ADDR
85346: LD_VAR 0 9
85350: PUSH
85351: FOR_TO
85352: IFFALSE 85414
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
85354: LD_VAR 0 8
85358: PPUSH
85359: CALL_OW 266
85363: PUSH
85364: LD_INT 0
85366: PUSH
85367: LD_INT 1
85369: PUSH
85370: EMPTY
85371: LIST
85372: LIST
85373: IN
85374: IFFALSE 85412
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85376: LD_VAR 0 4
85380: PUSH
85381: LD_VAR 0 7
85385: ARRAY
85386: PPUSH
85387: LD_VAR 0 14
85391: PUSH
85392: LD_VAR 0 8
85396: ARRAY
85397: PPUSH
85398: CALL_OW 115
// attacking := true ;
85402: LD_ADDR_VAR 0 29
85406: PUSH
85407: LD_INT 1
85409: ST_TO_ADDR
// break ;
85410: GO 85414
// end ;
85412: GO 85351
85414: POP
85415: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
85416: LD_VAR 0 4
85420: PUSH
85421: LD_VAR 0 7
85425: ARRAY
85426: PPUSH
85427: CALL_OW 302
85431: PUSH
85432: LD_VAR 0 29
85436: NOT
85437: AND
85438: IFFALSE 85760
// begin if GetTag ( group [ i ] ) = 71 then
85440: LD_VAR 0 4
85444: PUSH
85445: LD_VAR 0 7
85449: ARRAY
85450: PPUSH
85451: CALL_OW 110
85455: PUSH
85456: LD_INT 71
85458: EQUAL
85459: IFFALSE 85500
// begin if HasTask ( group [ i ] ) then
85461: LD_VAR 0 4
85465: PUSH
85466: LD_VAR 0 7
85470: ARRAY
85471: PPUSH
85472: CALL_OW 314
85476: IFFALSE 85482
// continue else
85478: GO 81665
85480: GO 85500
// SetTag ( group [ i ] , 0 ) ;
85482: LD_VAR 0 4
85486: PUSH
85487: LD_VAR 0 7
85491: ARRAY
85492: PPUSH
85493: LD_INT 0
85495: PPUSH
85496: CALL_OW 109
// end ; k := 8 ;
85500: LD_ADDR_VAR 0 9
85504: PUSH
85505: LD_INT 8
85507: ST_TO_ADDR
// x := 0 ;
85508: LD_ADDR_VAR 0 10
85512: PUSH
85513: LD_INT 0
85515: ST_TO_ADDR
// if tmp < k then
85516: LD_VAR 0 14
85520: PUSH
85521: LD_VAR 0 9
85525: LESS
85526: IFFALSE 85538
// k := tmp ;
85528: LD_ADDR_VAR 0 9
85532: PUSH
85533: LD_VAR 0 14
85537: ST_TO_ADDR
// for j = 1 to k do
85538: LD_ADDR_VAR 0 8
85542: PUSH
85543: DOUBLE
85544: LD_INT 1
85546: DEC
85547: ST_TO_ADDR
85548: LD_VAR 0 9
85552: PUSH
85553: FOR_TO
85554: IFFALSE 85652
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
85556: LD_VAR 0 14
85560: PUSH
85561: LD_VAR 0 8
85565: ARRAY
85566: PPUSH
85567: CALL_OW 247
85571: PUSH
85572: LD_INT 1
85574: EQUAL
85575: PUSH
85576: LD_VAR 0 14
85580: PUSH
85581: LD_VAR 0 8
85585: ARRAY
85586: PPUSH
85587: CALL_OW 256
85591: PUSH
85592: LD_INT 250
85594: LESS
85595: PUSH
85596: LD_VAR 0 20
85600: AND
85601: PUSH
85602: LD_VAR 0 20
85606: NOT
85607: PUSH
85608: LD_VAR 0 14
85612: PUSH
85613: LD_VAR 0 8
85617: ARRAY
85618: PPUSH
85619: CALL_OW 256
85623: PUSH
85624: LD_INT 250
85626: GREATEREQUAL
85627: AND
85628: OR
85629: AND
85630: IFFALSE 85650
// begin x := tmp [ j ] ;
85632: LD_ADDR_VAR 0 10
85636: PUSH
85637: LD_VAR 0 14
85641: PUSH
85642: LD_VAR 0 8
85646: ARRAY
85647: ST_TO_ADDR
// break ;
85648: GO 85652
// end ;
85650: GO 85553
85652: POP
85653: POP
// if x then
85654: LD_VAR 0 10
85658: IFFALSE 85682
// ComAttackUnit ( group [ i ] , x ) else
85660: LD_VAR 0 4
85664: PUSH
85665: LD_VAR 0 7
85669: ARRAY
85670: PPUSH
85671: LD_VAR 0 10
85675: PPUSH
85676: CALL_OW 115
85680: GO 85706
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
85682: LD_VAR 0 4
85686: PUSH
85687: LD_VAR 0 7
85691: ARRAY
85692: PPUSH
85693: LD_VAR 0 14
85697: PUSH
85698: LD_INT 1
85700: ARRAY
85701: PPUSH
85702: CALL_OW 115
// if not HasTask ( group [ i ] ) then
85706: LD_VAR 0 4
85710: PUSH
85711: LD_VAR 0 7
85715: ARRAY
85716: PPUSH
85717: CALL_OW 314
85721: NOT
85722: IFFALSE 85760
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
85724: LD_VAR 0 4
85728: PUSH
85729: LD_VAR 0 7
85733: ARRAY
85734: PPUSH
85735: LD_VAR 0 14
85739: PPUSH
85740: LD_VAR 0 4
85744: PUSH
85745: LD_VAR 0 7
85749: ARRAY
85750: PPUSH
85751: CALL_OW 74
85755: PPUSH
85756: CALL_OW 115
// end ; end ; end ;
85760: GO 81665
85762: POP
85763: POP
// wait ( 0 0$1 ) ;
85764: LD_INT 35
85766: PPUSH
85767: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
85771: LD_VAR 0 4
85775: PUSH
85776: EMPTY
85777: EQUAL
85778: PUSH
85779: LD_INT 81
85781: PUSH
85782: LD_VAR 0 35
85786: PUSH
85787: EMPTY
85788: LIST
85789: LIST
85790: PPUSH
85791: CALL_OW 69
85795: NOT
85796: OR
85797: IFFALSE 81650
// end ;
85799: LD_VAR 0 2
85803: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
85804: LD_INT 0
85806: PPUSH
85807: PPUSH
85808: PPUSH
85809: PPUSH
// if not base_units then
85810: LD_VAR 0 1
85814: NOT
85815: IFFALSE 85819
// exit ;
85817: GO 85906
// result := false ;
85819: LD_ADDR_VAR 0 2
85823: PUSH
85824: LD_INT 0
85826: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85827: LD_ADDR_VAR 0 5
85831: PUSH
85832: LD_VAR 0 1
85836: PPUSH
85837: LD_INT 21
85839: PUSH
85840: LD_INT 3
85842: PUSH
85843: EMPTY
85844: LIST
85845: LIST
85846: PPUSH
85847: CALL_OW 72
85851: ST_TO_ADDR
// if not tmp then
85852: LD_VAR 0 5
85856: NOT
85857: IFFALSE 85861
// exit ;
85859: GO 85906
// for i in tmp do
85861: LD_ADDR_VAR 0 3
85865: PUSH
85866: LD_VAR 0 5
85870: PUSH
85871: FOR_IN
85872: IFFALSE 85904
// begin result := EnemyInRange ( i , 22 ) ;
85874: LD_ADDR_VAR 0 2
85878: PUSH
85879: LD_VAR 0 3
85883: PPUSH
85884: LD_INT 22
85886: PPUSH
85887: CALL 79443 0 2
85891: ST_TO_ADDR
// if result then
85892: LD_VAR 0 2
85896: IFFALSE 85902
// exit ;
85898: POP
85899: POP
85900: GO 85906
// end ;
85902: GO 85871
85904: POP
85905: POP
// end ;
85906: LD_VAR 0 2
85910: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
85911: LD_INT 0
85913: PPUSH
85914: PPUSH
// if not units then
85915: LD_VAR 0 1
85919: NOT
85920: IFFALSE 85924
// exit ;
85922: GO 85994
// result := [ ] ;
85924: LD_ADDR_VAR 0 3
85928: PUSH
85929: EMPTY
85930: ST_TO_ADDR
// for i in units do
85931: LD_ADDR_VAR 0 4
85935: PUSH
85936: LD_VAR 0 1
85940: PUSH
85941: FOR_IN
85942: IFFALSE 85992
// if GetTag ( i ) = tag then
85944: LD_VAR 0 4
85948: PPUSH
85949: CALL_OW 110
85953: PUSH
85954: LD_VAR 0 2
85958: EQUAL
85959: IFFALSE 85990
// result := Insert ( result , result + 1 , i ) ;
85961: LD_ADDR_VAR 0 3
85965: PUSH
85966: LD_VAR 0 3
85970: PPUSH
85971: LD_VAR 0 3
85975: PUSH
85976: LD_INT 1
85978: PLUS
85979: PPUSH
85980: LD_VAR 0 4
85984: PPUSH
85985: CALL_OW 2
85989: ST_TO_ADDR
85990: GO 85941
85992: POP
85993: POP
// end ;
85994: LD_VAR 0 3
85998: RET
// export function IsDriver ( un ) ; begin
85999: LD_INT 0
86001: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
86002: LD_ADDR_VAR 0 2
86006: PUSH
86007: LD_VAR 0 1
86011: PUSH
86012: LD_INT 55
86014: PUSH
86015: EMPTY
86016: LIST
86017: PPUSH
86018: CALL_OW 69
86022: IN
86023: ST_TO_ADDR
// end ;
86024: LD_VAR 0 2
86028: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
86029: LD_INT 0
86031: PPUSH
86032: PPUSH
// list := [ ] ;
86033: LD_ADDR_VAR 0 5
86037: PUSH
86038: EMPTY
86039: ST_TO_ADDR
// case d of 0 :
86040: LD_VAR 0 3
86044: PUSH
86045: LD_INT 0
86047: DOUBLE
86048: EQUAL
86049: IFTRUE 86053
86051: GO 86186
86053: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
86054: LD_ADDR_VAR 0 5
86058: PUSH
86059: LD_VAR 0 1
86063: PUSH
86064: LD_INT 4
86066: MINUS
86067: PUSH
86068: LD_VAR 0 2
86072: PUSH
86073: LD_INT 4
86075: MINUS
86076: PUSH
86077: LD_INT 2
86079: PUSH
86080: EMPTY
86081: LIST
86082: LIST
86083: LIST
86084: PUSH
86085: LD_VAR 0 1
86089: PUSH
86090: LD_INT 3
86092: MINUS
86093: PUSH
86094: LD_VAR 0 2
86098: PUSH
86099: LD_INT 1
86101: PUSH
86102: EMPTY
86103: LIST
86104: LIST
86105: LIST
86106: PUSH
86107: LD_VAR 0 1
86111: PUSH
86112: LD_INT 4
86114: PLUS
86115: PUSH
86116: LD_VAR 0 2
86120: PUSH
86121: LD_INT 4
86123: PUSH
86124: EMPTY
86125: LIST
86126: LIST
86127: LIST
86128: PUSH
86129: LD_VAR 0 1
86133: PUSH
86134: LD_INT 3
86136: PLUS
86137: PUSH
86138: LD_VAR 0 2
86142: PUSH
86143: LD_INT 3
86145: PLUS
86146: PUSH
86147: LD_INT 5
86149: PUSH
86150: EMPTY
86151: LIST
86152: LIST
86153: LIST
86154: PUSH
86155: LD_VAR 0 1
86159: PUSH
86160: LD_VAR 0 2
86164: PUSH
86165: LD_INT 4
86167: PLUS
86168: PUSH
86169: LD_INT 0
86171: PUSH
86172: EMPTY
86173: LIST
86174: LIST
86175: LIST
86176: PUSH
86177: EMPTY
86178: LIST
86179: LIST
86180: LIST
86181: LIST
86182: LIST
86183: ST_TO_ADDR
// end ; 1 :
86184: GO 86884
86186: LD_INT 1
86188: DOUBLE
86189: EQUAL
86190: IFTRUE 86194
86192: GO 86327
86194: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
86195: LD_ADDR_VAR 0 5
86199: PUSH
86200: LD_VAR 0 1
86204: PUSH
86205: LD_VAR 0 2
86209: PUSH
86210: LD_INT 4
86212: MINUS
86213: PUSH
86214: LD_INT 3
86216: PUSH
86217: EMPTY
86218: LIST
86219: LIST
86220: LIST
86221: PUSH
86222: LD_VAR 0 1
86226: PUSH
86227: LD_INT 3
86229: MINUS
86230: PUSH
86231: LD_VAR 0 2
86235: PUSH
86236: LD_INT 3
86238: MINUS
86239: PUSH
86240: LD_INT 2
86242: PUSH
86243: EMPTY
86244: LIST
86245: LIST
86246: LIST
86247: PUSH
86248: LD_VAR 0 1
86252: PUSH
86253: LD_INT 4
86255: MINUS
86256: PUSH
86257: LD_VAR 0 2
86261: PUSH
86262: LD_INT 1
86264: PUSH
86265: EMPTY
86266: LIST
86267: LIST
86268: LIST
86269: PUSH
86270: LD_VAR 0 1
86274: PUSH
86275: LD_VAR 0 2
86279: PUSH
86280: LD_INT 3
86282: PLUS
86283: PUSH
86284: LD_INT 0
86286: PUSH
86287: EMPTY
86288: LIST
86289: LIST
86290: LIST
86291: PUSH
86292: LD_VAR 0 1
86296: PUSH
86297: LD_INT 4
86299: PLUS
86300: PUSH
86301: LD_VAR 0 2
86305: PUSH
86306: LD_INT 4
86308: PLUS
86309: PUSH
86310: LD_INT 5
86312: PUSH
86313: EMPTY
86314: LIST
86315: LIST
86316: LIST
86317: PUSH
86318: EMPTY
86319: LIST
86320: LIST
86321: LIST
86322: LIST
86323: LIST
86324: ST_TO_ADDR
// end ; 2 :
86325: GO 86884
86327: LD_INT 2
86329: DOUBLE
86330: EQUAL
86331: IFTRUE 86335
86333: GO 86464
86335: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
86336: LD_ADDR_VAR 0 5
86340: PUSH
86341: LD_VAR 0 1
86345: PUSH
86346: LD_VAR 0 2
86350: PUSH
86351: LD_INT 3
86353: MINUS
86354: PUSH
86355: LD_INT 3
86357: PUSH
86358: EMPTY
86359: LIST
86360: LIST
86361: LIST
86362: PUSH
86363: LD_VAR 0 1
86367: PUSH
86368: LD_INT 4
86370: PLUS
86371: PUSH
86372: LD_VAR 0 2
86376: PUSH
86377: LD_INT 4
86379: PUSH
86380: EMPTY
86381: LIST
86382: LIST
86383: LIST
86384: PUSH
86385: LD_VAR 0 1
86389: PUSH
86390: LD_VAR 0 2
86394: PUSH
86395: LD_INT 4
86397: PLUS
86398: PUSH
86399: LD_INT 0
86401: PUSH
86402: EMPTY
86403: LIST
86404: LIST
86405: LIST
86406: PUSH
86407: LD_VAR 0 1
86411: PUSH
86412: LD_INT 3
86414: MINUS
86415: PUSH
86416: LD_VAR 0 2
86420: PUSH
86421: LD_INT 1
86423: PUSH
86424: EMPTY
86425: LIST
86426: LIST
86427: LIST
86428: PUSH
86429: LD_VAR 0 1
86433: PUSH
86434: LD_INT 4
86436: MINUS
86437: PUSH
86438: LD_VAR 0 2
86442: PUSH
86443: LD_INT 4
86445: MINUS
86446: PUSH
86447: LD_INT 2
86449: PUSH
86450: EMPTY
86451: LIST
86452: LIST
86453: LIST
86454: PUSH
86455: EMPTY
86456: LIST
86457: LIST
86458: LIST
86459: LIST
86460: LIST
86461: ST_TO_ADDR
// end ; 3 :
86462: GO 86884
86464: LD_INT 3
86466: DOUBLE
86467: EQUAL
86468: IFTRUE 86472
86470: GO 86605
86472: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
86473: LD_ADDR_VAR 0 5
86477: PUSH
86478: LD_VAR 0 1
86482: PUSH
86483: LD_INT 3
86485: PLUS
86486: PUSH
86487: LD_VAR 0 2
86491: PUSH
86492: LD_INT 4
86494: PUSH
86495: EMPTY
86496: LIST
86497: LIST
86498: LIST
86499: PUSH
86500: LD_VAR 0 1
86504: PUSH
86505: LD_INT 4
86507: PLUS
86508: PUSH
86509: LD_VAR 0 2
86513: PUSH
86514: LD_INT 4
86516: PLUS
86517: PUSH
86518: LD_INT 5
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: LIST
86525: PUSH
86526: LD_VAR 0 1
86530: PUSH
86531: LD_INT 4
86533: MINUS
86534: PUSH
86535: LD_VAR 0 2
86539: PUSH
86540: LD_INT 1
86542: PUSH
86543: EMPTY
86544: LIST
86545: LIST
86546: LIST
86547: PUSH
86548: LD_VAR 0 1
86552: PUSH
86553: LD_VAR 0 2
86557: PUSH
86558: LD_INT 4
86560: MINUS
86561: PUSH
86562: LD_INT 3
86564: PUSH
86565: EMPTY
86566: LIST
86567: LIST
86568: LIST
86569: PUSH
86570: LD_VAR 0 1
86574: PUSH
86575: LD_INT 3
86577: MINUS
86578: PUSH
86579: LD_VAR 0 2
86583: PUSH
86584: LD_INT 3
86586: MINUS
86587: PUSH
86588: LD_INT 2
86590: PUSH
86591: EMPTY
86592: LIST
86593: LIST
86594: LIST
86595: PUSH
86596: EMPTY
86597: LIST
86598: LIST
86599: LIST
86600: LIST
86601: LIST
86602: ST_TO_ADDR
// end ; 4 :
86603: GO 86884
86605: LD_INT 4
86607: DOUBLE
86608: EQUAL
86609: IFTRUE 86613
86611: GO 86746
86613: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
86614: LD_ADDR_VAR 0 5
86618: PUSH
86619: LD_VAR 0 1
86623: PUSH
86624: LD_VAR 0 2
86628: PUSH
86629: LD_INT 4
86631: PLUS
86632: PUSH
86633: LD_INT 0
86635: PUSH
86636: EMPTY
86637: LIST
86638: LIST
86639: LIST
86640: PUSH
86641: LD_VAR 0 1
86645: PUSH
86646: LD_INT 3
86648: PLUS
86649: PUSH
86650: LD_VAR 0 2
86654: PUSH
86655: LD_INT 3
86657: PLUS
86658: PUSH
86659: LD_INT 5
86661: PUSH
86662: EMPTY
86663: LIST
86664: LIST
86665: LIST
86666: PUSH
86667: LD_VAR 0 1
86671: PUSH
86672: LD_INT 4
86674: PLUS
86675: PUSH
86676: LD_VAR 0 2
86680: PUSH
86681: LD_INT 4
86683: PUSH
86684: EMPTY
86685: LIST
86686: LIST
86687: LIST
86688: PUSH
86689: LD_VAR 0 1
86693: PUSH
86694: LD_VAR 0 2
86698: PUSH
86699: LD_INT 3
86701: MINUS
86702: PUSH
86703: LD_INT 3
86705: PUSH
86706: EMPTY
86707: LIST
86708: LIST
86709: LIST
86710: PUSH
86711: LD_VAR 0 1
86715: PUSH
86716: LD_INT 4
86718: MINUS
86719: PUSH
86720: LD_VAR 0 2
86724: PUSH
86725: LD_INT 4
86727: MINUS
86728: PUSH
86729: LD_INT 2
86731: PUSH
86732: EMPTY
86733: LIST
86734: LIST
86735: LIST
86736: PUSH
86737: EMPTY
86738: LIST
86739: LIST
86740: LIST
86741: LIST
86742: LIST
86743: ST_TO_ADDR
// end ; 5 :
86744: GO 86884
86746: LD_INT 5
86748: DOUBLE
86749: EQUAL
86750: IFTRUE 86754
86752: GO 86883
86754: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
86755: LD_ADDR_VAR 0 5
86759: PUSH
86760: LD_VAR 0 1
86764: PUSH
86765: LD_INT 4
86767: MINUS
86768: PUSH
86769: LD_VAR 0 2
86773: PUSH
86774: LD_INT 1
86776: PUSH
86777: EMPTY
86778: LIST
86779: LIST
86780: LIST
86781: PUSH
86782: LD_VAR 0 1
86786: PUSH
86787: LD_VAR 0 2
86791: PUSH
86792: LD_INT 4
86794: MINUS
86795: PUSH
86796: LD_INT 3
86798: PUSH
86799: EMPTY
86800: LIST
86801: LIST
86802: LIST
86803: PUSH
86804: LD_VAR 0 1
86808: PUSH
86809: LD_INT 4
86811: PLUS
86812: PUSH
86813: LD_VAR 0 2
86817: PUSH
86818: LD_INT 4
86820: PLUS
86821: PUSH
86822: LD_INT 5
86824: PUSH
86825: EMPTY
86826: LIST
86827: LIST
86828: LIST
86829: PUSH
86830: LD_VAR 0 1
86834: PUSH
86835: LD_INT 3
86837: PLUS
86838: PUSH
86839: LD_VAR 0 2
86843: PUSH
86844: LD_INT 4
86846: PUSH
86847: EMPTY
86848: LIST
86849: LIST
86850: LIST
86851: PUSH
86852: LD_VAR 0 1
86856: PUSH
86857: LD_VAR 0 2
86861: PUSH
86862: LD_INT 3
86864: PLUS
86865: PUSH
86866: LD_INT 0
86868: PUSH
86869: EMPTY
86870: LIST
86871: LIST
86872: LIST
86873: PUSH
86874: EMPTY
86875: LIST
86876: LIST
86877: LIST
86878: LIST
86879: LIST
86880: ST_TO_ADDR
// end ; end ;
86881: GO 86884
86883: POP
// result := list ;
86884: LD_ADDR_VAR 0 4
86888: PUSH
86889: LD_VAR 0 5
86893: ST_TO_ADDR
// end ;
86894: LD_VAR 0 4
86898: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86899: LD_INT 0
86901: PPUSH
86902: PPUSH
86903: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86904: LD_VAR 0 1
86908: NOT
86909: PUSH
86910: LD_VAR 0 2
86914: PUSH
86915: LD_INT 1
86917: PUSH
86918: LD_INT 2
86920: PUSH
86921: LD_INT 3
86923: PUSH
86924: LD_INT 4
86926: PUSH
86927: EMPTY
86928: LIST
86929: LIST
86930: LIST
86931: LIST
86932: IN
86933: NOT
86934: OR
86935: IFFALSE 86939
// exit ;
86937: GO 87031
// tmp := [ ] ;
86939: LD_ADDR_VAR 0 5
86943: PUSH
86944: EMPTY
86945: ST_TO_ADDR
// for i in units do
86946: LD_ADDR_VAR 0 4
86950: PUSH
86951: LD_VAR 0 1
86955: PUSH
86956: FOR_IN
86957: IFFALSE 87000
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
86959: LD_ADDR_VAR 0 5
86963: PUSH
86964: LD_VAR 0 5
86968: PPUSH
86969: LD_VAR 0 5
86973: PUSH
86974: LD_INT 1
86976: PLUS
86977: PPUSH
86978: LD_VAR 0 4
86982: PPUSH
86983: LD_VAR 0 2
86987: PPUSH
86988: CALL_OW 259
86992: PPUSH
86993: CALL_OW 2
86997: ST_TO_ADDR
86998: GO 86956
87000: POP
87001: POP
// if not tmp then
87002: LD_VAR 0 5
87006: NOT
87007: IFFALSE 87011
// exit ;
87009: GO 87031
// result := SortListByListDesc ( units , tmp ) ;
87011: LD_ADDR_VAR 0 3
87015: PUSH
87016: LD_VAR 0 1
87020: PPUSH
87021: LD_VAR 0 5
87025: PPUSH
87026: CALL_OW 77
87030: ST_TO_ADDR
// end ;
87031: LD_VAR 0 3
87035: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
87036: LD_INT 0
87038: PPUSH
87039: PPUSH
87040: PPUSH
// x := GetX ( building ) ;
87041: LD_ADDR_VAR 0 4
87045: PUSH
87046: LD_VAR 0 2
87050: PPUSH
87051: CALL_OW 250
87055: ST_TO_ADDR
// y := GetY ( building ) ;
87056: LD_ADDR_VAR 0 5
87060: PUSH
87061: LD_VAR 0 2
87065: PPUSH
87066: CALL_OW 251
87070: ST_TO_ADDR
// if GetTaskList ( unit ) then
87071: LD_VAR 0 1
87075: PPUSH
87076: CALL_OW 437
87080: IFFALSE 87175
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
87082: LD_STRING e
87084: PUSH
87085: LD_VAR 0 1
87089: PPUSH
87090: CALL_OW 437
87094: PUSH
87095: LD_INT 1
87097: ARRAY
87098: PUSH
87099: LD_INT 1
87101: ARRAY
87102: EQUAL
87103: PUSH
87104: LD_VAR 0 4
87108: PUSH
87109: LD_VAR 0 1
87113: PPUSH
87114: CALL_OW 437
87118: PUSH
87119: LD_INT 1
87121: ARRAY
87122: PUSH
87123: LD_INT 2
87125: ARRAY
87126: EQUAL
87127: AND
87128: PUSH
87129: LD_VAR 0 5
87133: PUSH
87134: LD_VAR 0 1
87138: PPUSH
87139: CALL_OW 437
87143: PUSH
87144: LD_INT 1
87146: ARRAY
87147: PUSH
87148: LD_INT 3
87150: ARRAY
87151: EQUAL
87152: AND
87153: IFFALSE 87165
// result := true else
87155: LD_ADDR_VAR 0 3
87159: PUSH
87160: LD_INT 1
87162: ST_TO_ADDR
87163: GO 87173
// result := false ;
87165: LD_ADDR_VAR 0 3
87169: PUSH
87170: LD_INT 0
87172: ST_TO_ADDR
// end else
87173: GO 87183
// result := false ;
87175: LD_ADDR_VAR 0 3
87179: PUSH
87180: LD_INT 0
87182: ST_TO_ADDR
// end ;
87183: LD_VAR 0 3
87187: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
87188: LD_INT 0
87190: PPUSH
87191: PPUSH
87192: PPUSH
87193: PPUSH
// if not unit or not area then
87194: LD_VAR 0 1
87198: NOT
87199: PUSH
87200: LD_VAR 0 2
87204: NOT
87205: OR
87206: IFFALSE 87210
// exit ;
87208: GO 87374
// tmp := AreaToList ( area , i ) ;
87210: LD_ADDR_VAR 0 6
87214: PUSH
87215: LD_VAR 0 2
87219: PPUSH
87220: LD_VAR 0 5
87224: PPUSH
87225: CALL_OW 517
87229: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
87230: LD_ADDR_VAR 0 5
87234: PUSH
87235: DOUBLE
87236: LD_INT 1
87238: DEC
87239: ST_TO_ADDR
87240: LD_VAR 0 6
87244: PUSH
87245: LD_INT 1
87247: ARRAY
87248: PUSH
87249: FOR_TO
87250: IFFALSE 87372
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
87252: LD_ADDR_VAR 0 7
87256: PUSH
87257: LD_VAR 0 6
87261: PUSH
87262: LD_INT 1
87264: ARRAY
87265: PUSH
87266: LD_VAR 0 5
87270: ARRAY
87271: PUSH
87272: LD_VAR 0 6
87276: PUSH
87277: LD_INT 2
87279: ARRAY
87280: PUSH
87281: LD_VAR 0 5
87285: ARRAY
87286: PUSH
87287: EMPTY
87288: LIST
87289: LIST
87290: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
87291: LD_VAR 0 7
87295: PUSH
87296: LD_INT 1
87298: ARRAY
87299: PPUSH
87300: LD_VAR 0 7
87304: PUSH
87305: LD_INT 2
87307: ARRAY
87308: PPUSH
87309: CALL_OW 428
87313: PUSH
87314: LD_INT 0
87316: EQUAL
87317: IFFALSE 87370
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
87319: LD_VAR 0 1
87323: PPUSH
87324: LD_VAR 0 7
87328: PUSH
87329: LD_INT 1
87331: ARRAY
87332: PPUSH
87333: LD_VAR 0 7
87337: PUSH
87338: LD_INT 2
87340: ARRAY
87341: PPUSH
87342: LD_VAR 0 3
87346: PPUSH
87347: CALL_OW 48
// result := IsPlaced ( unit ) ;
87351: LD_ADDR_VAR 0 4
87355: PUSH
87356: LD_VAR 0 1
87360: PPUSH
87361: CALL_OW 305
87365: ST_TO_ADDR
// exit ;
87366: POP
87367: POP
87368: GO 87374
// end ; end ;
87370: GO 87249
87372: POP
87373: POP
// end ;
87374: LD_VAR 0 4
87378: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
87379: LD_INT 0
87381: PPUSH
87382: PPUSH
87383: PPUSH
// if not side or side > 8 then
87384: LD_VAR 0 1
87388: NOT
87389: PUSH
87390: LD_VAR 0 1
87394: PUSH
87395: LD_INT 8
87397: GREATER
87398: OR
87399: IFFALSE 87403
// exit ;
87401: GO 87590
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
87403: LD_ADDR_VAR 0 4
87407: PUSH
87408: LD_INT 22
87410: PUSH
87411: LD_VAR 0 1
87415: PUSH
87416: EMPTY
87417: LIST
87418: LIST
87419: PUSH
87420: LD_INT 21
87422: PUSH
87423: LD_INT 3
87425: PUSH
87426: EMPTY
87427: LIST
87428: LIST
87429: PUSH
87430: EMPTY
87431: LIST
87432: LIST
87433: PPUSH
87434: CALL_OW 69
87438: ST_TO_ADDR
// if not tmp then
87439: LD_VAR 0 4
87443: NOT
87444: IFFALSE 87448
// exit ;
87446: GO 87590
// enable_addtolog := true ;
87448: LD_ADDR_OWVAR 81
87452: PUSH
87453: LD_INT 1
87455: ST_TO_ADDR
// AddToLog ( [ ) ;
87456: LD_STRING [
87458: PPUSH
87459: CALL_OW 561
// for i in tmp do
87463: LD_ADDR_VAR 0 3
87467: PUSH
87468: LD_VAR 0 4
87472: PUSH
87473: FOR_IN
87474: IFFALSE 87581
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
87476: LD_STRING [
87478: PUSH
87479: LD_VAR 0 3
87483: PPUSH
87484: CALL_OW 266
87488: STR
87489: PUSH
87490: LD_STRING , 
87492: STR
87493: PUSH
87494: LD_VAR 0 3
87498: PPUSH
87499: CALL_OW 250
87503: STR
87504: PUSH
87505: LD_STRING , 
87507: STR
87508: PUSH
87509: LD_VAR 0 3
87513: PPUSH
87514: CALL_OW 251
87518: STR
87519: PUSH
87520: LD_STRING , 
87522: STR
87523: PUSH
87524: LD_VAR 0 3
87528: PPUSH
87529: CALL_OW 254
87533: STR
87534: PUSH
87535: LD_STRING , 
87537: STR
87538: PUSH
87539: LD_VAR 0 3
87543: PPUSH
87544: LD_INT 1
87546: PPUSH
87547: CALL_OW 268
87551: STR
87552: PUSH
87553: LD_STRING , 
87555: STR
87556: PUSH
87557: LD_VAR 0 3
87561: PPUSH
87562: LD_INT 2
87564: PPUSH
87565: CALL_OW 268
87569: STR
87570: PUSH
87571: LD_STRING ],
87573: STR
87574: PPUSH
87575: CALL_OW 561
// end ;
87579: GO 87473
87581: POP
87582: POP
// AddToLog ( ]; ) ;
87583: LD_STRING ];
87585: PPUSH
87586: CALL_OW 561
// end ;
87590: LD_VAR 0 2
87594: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
87595: LD_INT 0
87597: PPUSH
87598: PPUSH
87599: PPUSH
87600: PPUSH
87601: PPUSH
// if not area or not rate or not max then
87602: LD_VAR 0 1
87606: NOT
87607: PUSH
87608: LD_VAR 0 2
87612: NOT
87613: OR
87614: PUSH
87615: LD_VAR 0 4
87619: NOT
87620: OR
87621: IFFALSE 87625
// exit ;
87623: GO 87817
// while 1 do
87625: LD_INT 1
87627: IFFALSE 87817
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
87629: LD_ADDR_VAR 0 9
87633: PUSH
87634: LD_VAR 0 1
87638: PPUSH
87639: LD_INT 1
87641: PPUSH
87642: CALL_OW 287
87646: PUSH
87647: LD_INT 10
87649: MUL
87650: ST_TO_ADDR
// r := rate / 10 ;
87651: LD_ADDR_VAR 0 7
87655: PUSH
87656: LD_VAR 0 2
87660: PUSH
87661: LD_INT 10
87663: DIVREAL
87664: ST_TO_ADDR
// time := 1 1$00 ;
87665: LD_ADDR_VAR 0 8
87669: PUSH
87670: LD_INT 2100
87672: ST_TO_ADDR
// if amount < min then
87673: LD_VAR 0 9
87677: PUSH
87678: LD_VAR 0 3
87682: LESS
87683: IFFALSE 87701
// r := r * 2 else
87685: LD_ADDR_VAR 0 7
87689: PUSH
87690: LD_VAR 0 7
87694: PUSH
87695: LD_INT 2
87697: MUL
87698: ST_TO_ADDR
87699: GO 87727
// if amount > max then
87701: LD_VAR 0 9
87705: PUSH
87706: LD_VAR 0 4
87710: GREATER
87711: IFFALSE 87727
// r := r / 2 ;
87713: LD_ADDR_VAR 0 7
87717: PUSH
87718: LD_VAR 0 7
87722: PUSH
87723: LD_INT 2
87725: DIVREAL
87726: ST_TO_ADDR
// time := time / r ;
87727: LD_ADDR_VAR 0 8
87731: PUSH
87732: LD_VAR 0 8
87736: PUSH
87737: LD_VAR 0 7
87741: DIVREAL
87742: ST_TO_ADDR
// if time < 0 then
87743: LD_VAR 0 8
87747: PUSH
87748: LD_INT 0
87750: LESS
87751: IFFALSE 87768
// time := time * - 1 ;
87753: LD_ADDR_VAR 0 8
87757: PUSH
87758: LD_VAR 0 8
87762: PUSH
87763: LD_INT 1
87765: NEG
87766: MUL
87767: ST_TO_ADDR
// wait ( time ) ;
87768: LD_VAR 0 8
87772: PPUSH
87773: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
87777: LD_INT 35
87779: PPUSH
87780: LD_INT 875
87782: PPUSH
87783: CALL_OW 12
87787: PPUSH
87788: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87792: LD_INT 1
87794: PPUSH
87795: LD_INT 5
87797: PPUSH
87798: CALL_OW 12
87802: PPUSH
87803: LD_VAR 0 1
87807: PPUSH
87808: LD_INT 1
87810: PPUSH
87811: CALL_OW 55
// end ;
87815: GO 87625
// end ;
87817: LD_VAR 0 5
87821: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87822: LD_INT 0
87824: PPUSH
87825: PPUSH
87826: PPUSH
87827: PPUSH
87828: PPUSH
87829: PPUSH
87830: PPUSH
87831: PPUSH
// if not turrets or not factories then
87832: LD_VAR 0 1
87836: NOT
87837: PUSH
87838: LD_VAR 0 2
87842: NOT
87843: OR
87844: IFFALSE 87848
// exit ;
87846: GO 88155
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87848: LD_ADDR_VAR 0 10
87852: PUSH
87853: LD_INT 5
87855: PUSH
87856: LD_INT 6
87858: PUSH
87859: EMPTY
87860: LIST
87861: LIST
87862: PUSH
87863: LD_INT 2
87865: PUSH
87866: LD_INT 4
87868: PUSH
87869: EMPTY
87870: LIST
87871: LIST
87872: PUSH
87873: LD_INT 3
87875: PUSH
87876: LD_INT 5
87878: PUSH
87879: EMPTY
87880: LIST
87881: LIST
87882: PUSH
87883: EMPTY
87884: LIST
87885: LIST
87886: LIST
87887: PUSH
87888: LD_INT 24
87890: PUSH
87891: LD_INT 25
87893: PUSH
87894: EMPTY
87895: LIST
87896: LIST
87897: PUSH
87898: LD_INT 23
87900: PUSH
87901: LD_INT 27
87903: PUSH
87904: EMPTY
87905: LIST
87906: LIST
87907: PUSH
87908: EMPTY
87909: LIST
87910: LIST
87911: PUSH
87912: LD_INT 42
87914: PUSH
87915: LD_INT 43
87917: PUSH
87918: EMPTY
87919: LIST
87920: LIST
87921: PUSH
87922: LD_INT 44
87924: PUSH
87925: LD_INT 46
87927: PUSH
87928: EMPTY
87929: LIST
87930: LIST
87931: PUSH
87932: LD_INT 45
87934: PUSH
87935: LD_INT 47
87937: PUSH
87938: EMPTY
87939: LIST
87940: LIST
87941: PUSH
87942: EMPTY
87943: LIST
87944: LIST
87945: LIST
87946: PUSH
87947: EMPTY
87948: LIST
87949: LIST
87950: LIST
87951: ST_TO_ADDR
// result := [ ] ;
87952: LD_ADDR_VAR 0 3
87956: PUSH
87957: EMPTY
87958: ST_TO_ADDR
// for i in turrets do
87959: LD_ADDR_VAR 0 4
87963: PUSH
87964: LD_VAR 0 1
87968: PUSH
87969: FOR_IN
87970: IFFALSE 88153
// begin nat := GetNation ( i ) ;
87972: LD_ADDR_VAR 0 7
87976: PUSH
87977: LD_VAR 0 4
87981: PPUSH
87982: CALL_OW 248
87986: ST_TO_ADDR
// weapon := 0 ;
87987: LD_ADDR_VAR 0 8
87991: PUSH
87992: LD_INT 0
87994: ST_TO_ADDR
// if not nat then
87995: LD_VAR 0 7
87999: NOT
88000: IFFALSE 88004
// continue ;
88002: GO 87969
// for j in list [ nat ] do
88004: LD_ADDR_VAR 0 5
88008: PUSH
88009: LD_VAR 0 10
88013: PUSH
88014: LD_VAR 0 7
88018: ARRAY
88019: PUSH
88020: FOR_IN
88021: IFFALSE 88062
// if GetBWeapon ( i ) = j [ 1 ] then
88023: LD_VAR 0 4
88027: PPUSH
88028: CALL_OW 269
88032: PUSH
88033: LD_VAR 0 5
88037: PUSH
88038: LD_INT 1
88040: ARRAY
88041: EQUAL
88042: IFFALSE 88060
// begin weapon := j [ 2 ] ;
88044: LD_ADDR_VAR 0 8
88048: PUSH
88049: LD_VAR 0 5
88053: PUSH
88054: LD_INT 2
88056: ARRAY
88057: ST_TO_ADDR
// break ;
88058: GO 88062
// end ;
88060: GO 88020
88062: POP
88063: POP
// if not weapon then
88064: LD_VAR 0 8
88068: NOT
88069: IFFALSE 88073
// continue ;
88071: GO 87969
// for k in factories do
88073: LD_ADDR_VAR 0 6
88077: PUSH
88078: LD_VAR 0 2
88082: PUSH
88083: FOR_IN
88084: IFFALSE 88149
// begin weapons := AvailableWeaponList ( k ) ;
88086: LD_ADDR_VAR 0 9
88090: PUSH
88091: LD_VAR 0 6
88095: PPUSH
88096: CALL_OW 478
88100: ST_TO_ADDR
// if not weapons then
88101: LD_VAR 0 9
88105: NOT
88106: IFFALSE 88110
// continue ;
88108: GO 88083
// if weapon in weapons then
88110: LD_VAR 0 8
88114: PUSH
88115: LD_VAR 0 9
88119: IN
88120: IFFALSE 88147
// begin result := [ i , weapon ] ;
88122: LD_ADDR_VAR 0 3
88126: PUSH
88127: LD_VAR 0 4
88131: PUSH
88132: LD_VAR 0 8
88136: PUSH
88137: EMPTY
88138: LIST
88139: LIST
88140: ST_TO_ADDR
// exit ;
88141: POP
88142: POP
88143: POP
88144: POP
88145: GO 88155
// end ; end ;
88147: GO 88083
88149: POP
88150: POP
// end ;
88151: GO 87969
88153: POP
88154: POP
// end ;
88155: LD_VAR 0 3
88159: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
88160: LD_INT 0
88162: PPUSH
// if not side or side > 8 then
88163: LD_VAR 0 3
88167: NOT
88168: PUSH
88169: LD_VAR 0 3
88173: PUSH
88174: LD_INT 8
88176: GREATER
88177: OR
88178: IFFALSE 88182
// exit ;
88180: GO 88241
// if not range then
88182: LD_VAR 0 4
88186: NOT
88187: IFFALSE 88198
// range := - 12 ;
88189: LD_ADDR_VAR 0 4
88193: PUSH
88194: LD_INT 12
88196: NEG
88197: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
88198: LD_VAR 0 1
88202: PPUSH
88203: LD_VAR 0 2
88207: PPUSH
88208: LD_VAR 0 3
88212: PPUSH
88213: LD_VAR 0 4
88217: PPUSH
88218: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
88222: LD_VAR 0 1
88226: PPUSH
88227: LD_VAR 0 2
88231: PPUSH
88232: LD_VAR 0 3
88236: PPUSH
88237: CALL_OW 331
// end ;
88241: LD_VAR 0 5
88245: RET
// export function Video ( mode ) ; begin
88246: LD_INT 0
88248: PPUSH
// ingame_video = mode ;
88249: LD_ADDR_OWVAR 52
88253: PUSH
88254: LD_VAR 0 1
88258: ST_TO_ADDR
// interface_hidden = mode ;
88259: LD_ADDR_OWVAR 54
88263: PUSH
88264: LD_VAR 0 1
88268: ST_TO_ADDR
// end ;
88269: LD_VAR 0 2
88273: RET
// export function Join ( array , element ) ; begin
88274: LD_INT 0
88276: PPUSH
// result := array ^ element ;
88277: LD_ADDR_VAR 0 3
88281: PUSH
88282: LD_VAR 0 1
88286: PUSH
88287: LD_VAR 0 2
88291: ADD
88292: ST_TO_ADDR
// end ;
88293: LD_VAR 0 3
88297: RET
// export function JoinUnion ( array , element ) ; begin
88298: LD_INT 0
88300: PPUSH
// result := array union element ;
88301: LD_ADDR_VAR 0 3
88305: PUSH
88306: LD_VAR 0 1
88310: PUSH
88311: LD_VAR 0 2
88315: UNION
88316: ST_TO_ADDR
// end ;
88317: LD_VAR 0 3
88321: RET
// export function GetBehemoths ( side ) ; begin
88322: LD_INT 0
88324: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
88325: LD_ADDR_VAR 0 2
88329: PUSH
88330: LD_INT 22
88332: PUSH
88333: LD_VAR 0 1
88337: PUSH
88338: EMPTY
88339: LIST
88340: LIST
88341: PUSH
88342: LD_INT 31
88344: PUSH
88345: LD_INT 25
88347: PUSH
88348: EMPTY
88349: LIST
88350: LIST
88351: PUSH
88352: EMPTY
88353: LIST
88354: LIST
88355: PPUSH
88356: CALL_OW 69
88360: ST_TO_ADDR
// end ;
88361: LD_VAR 0 2
88365: RET
// export function Shuffle ( array ) ; var i , index ; begin
88366: LD_INT 0
88368: PPUSH
88369: PPUSH
88370: PPUSH
// result := [ ] ;
88371: LD_ADDR_VAR 0 2
88375: PUSH
88376: EMPTY
88377: ST_TO_ADDR
// if not array then
88378: LD_VAR 0 1
88382: NOT
88383: IFFALSE 88387
// exit ;
88385: GO 88486
// Randomize ;
88387: CALL_OW 10
// for i = array downto 1 do
88391: LD_ADDR_VAR 0 3
88395: PUSH
88396: DOUBLE
88397: LD_VAR 0 1
88401: INC
88402: ST_TO_ADDR
88403: LD_INT 1
88405: PUSH
88406: FOR_DOWNTO
88407: IFFALSE 88484
// begin index := rand ( 1 , array ) ;
88409: LD_ADDR_VAR 0 4
88413: PUSH
88414: LD_INT 1
88416: PPUSH
88417: LD_VAR 0 1
88421: PPUSH
88422: CALL_OW 12
88426: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
88427: LD_ADDR_VAR 0 2
88431: PUSH
88432: LD_VAR 0 2
88436: PPUSH
88437: LD_VAR 0 2
88441: PUSH
88442: LD_INT 1
88444: PLUS
88445: PPUSH
88446: LD_VAR 0 1
88450: PUSH
88451: LD_VAR 0 4
88455: ARRAY
88456: PPUSH
88457: CALL_OW 2
88461: ST_TO_ADDR
// array := Delete ( array , index ) ;
88462: LD_ADDR_VAR 0 1
88466: PUSH
88467: LD_VAR 0 1
88471: PPUSH
88472: LD_VAR 0 4
88476: PPUSH
88477: CALL_OW 3
88481: ST_TO_ADDR
// end ;
88482: GO 88406
88484: POP
88485: POP
// end ; end_of_file
88486: LD_VAR 0 2
88490: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
88491: GO 88493
88493: DISABLE
// begin ru_radar := 98 ;
88494: LD_ADDR_EXP 92
88498: PUSH
88499: LD_INT 98
88501: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
88502: LD_ADDR_EXP 93
88506: PUSH
88507: LD_INT 89
88509: ST_TO_ADDR
// us_hack := 99 ;
88510: LD_ADDR_EXP 94
88514: PUSH
88515: LD_INT 99
88517: ST_TO_ADDR
// us_artillery := 97 ;
88518: LD_ADDR_EXP 95
88522: PUSH
88523: LD_INT 97
88525: ST_TO_ADDR
// ar_bio_bomb := 91 ;
88526: LD_ADDR_EXP 96
88530: PUSH
88531: LD_INT 91
88533: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
88534: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
88535: LD_INT 0
88537: PPUSH
88538: PPUSH
88539: PPUSH
88540: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
88541: LD_VAR 0 1
88545: PPUSH
88546: CALL_OW 264
88550: PUSH
88551: LD_EXP 96
88555: EQUAL
88556: IFFALSE 88628
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
88558: LD_INT 68
88560: PPUSH
88561: LD_VAR 0 1
88565: PPUSH
88566: CALL_OW 255
88570: PPUSH
88571: CALL_OW 321
88575: PUSH
88576: LD_INT 2
88578: EQUAL
88579: IFFALSE 88591
// eff := 70 else
88581: LD_ADDR_VAR 0 6
88585: PUSH
88586: LD_INT 70
88588: ST_TO_ADDR
88589: GO 88599
// eff := 30 ;
88591: LD_ADDR_VAR 0 6
88595: PUSH
88596: LD_INT 30
88598: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
88599: LD_VAR 0 1
88603: PPUSH
88604: CALL_OW 250
88608: PPUSH
88609: LD_VAR 0 1
88613: PPUSH
88614: CALL_OW 251
88618: PPUSH
88619: LD_VAR 0 6
88623: PPUSH
88624: CALL_OW 495
// end ; end ;
88628: LD_VAR 0 4
88632: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
88633: LD_INT 0
88635: PPUSH
88636: PPUSH
88637: PPUSH
88638: PPUSH
88639: PPUSH
88640: PPUSH
// if cmd = 124 then
88641: LD_VAR 0 1
88645: PUSH
88646: LD_INT 124
88648: EQUAL
88649: IFFALSE 88855
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
88651: LD_ADDR_VAR 0 5
88655: PUSH
88656: LD_INT 2
88658: PUSH
88659: LD_INT 34
88661: PUSH
88662: LD_INT 53
88664: PUSH
88665: EMPTY
88666: LIST
88667: LIST
88668: PUSH
88669: LD_INT 34
88671: PUSH
88672: LD_INT 14
88674: PUSH
88675: EMPTY
88676: LIST
88677: LIST
88678: PUSH
88679: EMPTY
88680: LIST
88681: LIST
88682: LIST
88683: PPUSH
88684: CALL_OW 69
88688: ST_TO_ADDR
// if not tmp then
88689: LD_VAR 0 5
88693: NOT
88694: IFFALSE 88698
// exit ;
88696: GO 88855
// for i in tmp do
88698: LD_ADDR_VAR 0 3
88702: PUSH
88703: LD_VAR 0 5
88707: PUSH
88708: FOR_IN
88709: IFFALSE 88853
// begin taskList := GetTaskList ( i ) ;
88711: LD_ADDR_VAR 0 6
88715: PUSH
88716: LD_VAR 0 3
88720: PPUSH
88721: CALL_OW 437
88725: ST_TO_ADDR
// if not taskList then
88726: LD_VAR 0 6
88730: NOT
88731: IFFALSE 88735
// continue ;
88733: GO 88708
// for j = 1 to taskList do
88735: LD_ADDR_VAR 0 4
88739: PUSH
88740: DOUBLE
88741: LD_INT 1
88743: DEC
88744: ST_TO_ADDR
88745: LD_VAR 0 6
88749: PUSH
88750: FOR_TO
88751: IFFALSE 88849
// if taskList [ j ] [ 1 ] = | then
88753: LD_VAR 0 6
88757: PUSH
88758: LD_VAR 0 4
88762: ARRAY
88763: PUSH
88764: LD_INT 1
88766: ARRAY
88767: PUSH
88768: LD_STRING |
88770: EQUAL
88771: IFFALSE 88847
// begin _taskList := Delete ( taskList , 1 ) ;
88773: LD_ADDR_VAR 0 7
88777: PUSH
88778: LD_VAR 0 6
88782: PPUSH
88783: LD_INT 1
88785: PPUSH
88786: CALL_OW 3
88790: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
88791: LD_VAR 0 3
88795: PPUSH
88796: LD_VAR 0 7
88800: PPUSH
88801: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
88805: LD_VAR 0 3
88809: PPUSH
88810: LD_VAR 0 6
88814: PUSH
88815: LD_VAR 0 4
88819: ARRAY
88820: PUSH
88821: LD_INT 2
88823: ARRAY
88824: PPUSH
88825: LD_VAR 0 6
88829: PUSH
88830: LD_VAR 0 4
88834: ARRAY
88835: PUSH
88836: LD_INT 3
88838: ARRAY
88839: PPUSH
88840: LD_INT 8
88842: PPUSH
88843: CALL 88860 0 4
// end ;
88847: GO 88750
88849: POP
88850: POP
// end ;
88851: GO 88708
88853: POP
88854: POP
// end ; end ;
88855: LD_VAR 0 2
88859: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88860: LD_INT 0
88862: PPUSH
88863: PPUSH
88864: PPUSH
88865: PPUSH
88866: PPUSH
88867: PPUSH
88868: PPUSH
88869: PPUSH
88870: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
88871: LD_VAR 0 1
88875: NOT
88876: PUSH
88877: LD_VAR 0 2
88881: PPUSH
88882: LD_VAR 0 3
88886: PPUSH
88887: CALL_OW 488
88891: NOT
88892: OR
88893: PUSH
88894: LD_VAR 0 4
88898: NOT
88899: OR
88900: IFFALSE 88904
// exit ;
88902: GO 89244
// list := [ ] ;
88904: LD_ADDR_VAR 0 13
88908: PUSH
88909: EMPTY
88910: ST_TO_ADDR
// if x - r < 0 then
88911: LD_VAR 0 2
88915: PUSH
88916: LD_VAR 0 4
88920: MINUS
88921: PUSH
88922: LD_INT 0
88924: LESS
88925: IFFALSE 88937
// min_x := 0 else
88927: LD_ADDR_VAR 0 7
88931: PUSH
88932: LD_INT 0
88934: ST_TO_ADDR
88935: GO 88953
// min_x := x - r ;
88937: LD_ADDR_VAR 0 7
88941: PUSH
88942: LD_VAR 0 2
88946: PUSH
88947: LD_VAR 0 4
88951: MINUS
88952: ST_TO_ADDR
// if y - r < 0 then
88953: LD_VAR 0 3
88957: PUSH
88958: LD_VAR 0 4
88962: MINUS
88963: PUSH
88964: LD_INT 0
88966: LESS
88967: IFFALSE 88979
// min_y := 0 else
88969: LD_ADDR_VAR 0 8
88973: PUSH
88974: LD_INT 0
88976: ST_TO_ADDR
88977: GO 88995
// min_y := y - r ;
88979: LD_ADDR_VAR 0 8
88983: PUSH
88984: LD_VAR 0 3
88988: PUSH
88989: LD_VAR 0 4
88993: MINUS
88994: ST_TO_ADDR
// max_x := x + r ;
88995: LD_ADDR_VAR 0 9
88999: PUSH
89000: LD_VAR 0 2
89004: PUSH
89005: LD_VAR 0 4
89009: PLUS
89010: ST_TO_ADDR
// max_y := y + r ;
89011: LD_ADDR_VAR 0 10
89015: PUSH
89016: LD_VAR 0 3
89020: PUSH
89021: LD_VAR 0 4
89025: PLUS
89026: ST_TO_ADDR
// for _x = min_x to max_x do
89027: LD_ADDR_VAR 0 11
89031: PUSH
89032: DOUBLE
89033: LD_VAR 0 7
89037: DEC
89038: ST_TO_ADDR
89039: LD_VAR 0 9
89043: PUSH
89044: FOR_TO
89045: IFFALSE 89162
// for _y = min_y to max_y do
89047: LD_ADDR_VAR 0 12
89051: PUSH
89052: DOUBLE
89053: LD_VAR 0 8
89057: DEC
89058: ST_TO_ADDR
89059: LD_VAR 0 10
89063: PUSH
89064: FOR_TO
89065: IFFALSE 89158
// begin if not ValidHex ( _x , _y ) then
89067: LD_VAR 0 11
89071: PPUSH
89072: LD_VAR 0 12
89076: PPUSH
89077: CALL_OW 488
89081: NOT
89082: IFFALSE 89086
// continue ;
89084: GO 89064
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89086: LD_VAR 0 11
89090: PPUSH
89091: LD_VAR 0 12
89095: PPUSH
89096: CALL_OW 351
89100: PUSH
89101: LD_VAR 0 11
89105: PPUSH
89106: LD_VAR 0 12
89110: PPUSH
89111: CALL_OW 554
89115: AND
89116: IFFALSE 89156
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89118: LD_ADDR_VAR 0 13
89122: PUSH
89123: LD_VAR 0 13
89127: PPUSH
89128: LD_VAR 0 13
89132: PUSH
89133: LD_INT 1
89135: PLUS
89136: PPUSH
89137: LD_VAR 0 11
89141: PUSH
89142: LD_VAR 0 12
89146: PUSH
89147: EMPTY
89148: LIST
89149: LIST
89150: PPUSH
89151: CALL_OW 2
89155: ST_TO_ADDR
// end ;
89156: GO 89064
89158: POP
89159: POP
89160: GO 89044
89162: POP
89163: POP
// if not list then
89164: LD_VAR 0 13
89168: NOT
89169: IFFALSE 89173
// exit ;
89171: GO 89244
// for i in list do
89173: LD_ADDR_VAR 0 6
89177: PUSH
89178: LD_VAR 0 13
89182: PUSH
89183: FOR_IN
89184: IFFALSE 89242
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89186: LD_VAR 0 1
89190: PPUSH
89191: LD_STRING M
89193: PUSH
89194: LD_VAR 0 6
89198: PUSH
89199: LD_INT 1
89201: ARRAY
89202: PUSH
89203: LD_VAR 0 6
89207: PUSH
89208: LD_INT 2
89210: ARRAY
89211: PUSH
89212: LD_INT 0
89214: PUSH
89215: LD_INT 0
89217: PUSH
89218: LD_INT 0
89220: PUSH
89221: LD_INT 0
89223: PUSH
89224: EMPTY
89225: LIST
89226: LIST
89227: LIST
89228: LIST
89229: LIST
89230: LIST
89231: LIST
89232: PUSH
89233: EMPTY
89234: LIST
89235: PPUSH
89236: CALL_OW 447
89240: GO 89183
89242: POP
89243: POP
// end ;
89244: LD_VAR 0 5
89248: RET
