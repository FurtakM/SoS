// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 17382 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 82327 0 9
// PrepareAmerican ;
  77: CALL 562 0 0
// PrepareArabian ;
  81: CALL 2234 0 0
// MC_Start ( ) ;
  85: CALL 19494 0 0
// Action ;
  89: CALL 8072 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected , am_veh_consturcted ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 130 130$00 , 120 120$00 , 115 115$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 273000
 219: PUSH
 220: LD_INT 252000
 222: PUSH
 223: LD_INT 241500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// am_veh_consturcted := false ;
 287: LD_ADDR_EXP 20
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// end ;
 295: LD_VAR 0 1
 299: RET
// export function CustomInitMacro ; var i ; begin
 300: LD_INT 0
 302: PPUSH
 303: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 304: LD_ADDR_EXP 74
 308: PUSH
 309: LD_INT 20
 311: PUSH
 312: LD_INT 21
 314: PUSH
 315: LD_INT 22
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 323: LD_ADDR_EXP 75
 327: PUSH
 328: LD_INT 28
 330: PUSH
 331: LD_INT 24
 333: PUSH
 334: LD_INT 26
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield1_left ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 4
 347: PUSH
 348: LD_INT 6
 350: PUSH
 351: LD_INT 9
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_OWVAR 67
 363: ARRAY
 364: PPUSH
 365: LD_INT 3
 367: PPUSH
 368: CALL 40711 0 3
// MC_SetMinesField ( 2 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield2_left ) ;
 372: LD_INT 2
 374: PPUSH
 375: LD_INT 4
 377: PUSH
 378: LD_INT 6
 380: PUSH
 381: LD_INT 9
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_OWVAR 67
 393: ARRAY
 394: PPUSH
 395: LD_INT 2
 397: PPUSH
 398: CALL 40711 0 3
// MC_SetMinesField ( 3 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield3_left ) ;
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 4
 407: PUSH
 408: LD_INT 6
 410: PUSH
 411: LD_INT 9
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: CALL 40711 0 3
// for i = 1 to mc_bases do
 432: LD_ADDR_VAR 0 2
 436: PUSH
 437: DOUBLE
 438: LD_INT 1
 440: DEC
 441: ST_TO_ADDR
 442: LD_EXP 50
 446: PUSH
 447: FOR_TO
 448: IFFALSE 472
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 450: LD_VAR 0 2
 454: PPUSH
 455: LD_EXP 43
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PPUSH
 466: CALL 41137 0 2
 470: GO 447
 472: POP
 473: POP
// end ;
 474: LD_VAR 0 1
 478: RET
// function Debuger ; var i ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
// if not debug then
 483: LD_EXP 1
 487: NOT
 488: IFFALSE 492
// exit ;
 490: GO 528
// game_speed := 5 ;
 492: LD_ADDR_OWVAR 65
 496: PUSH
 497: LD_INT 5
 499: ST_TO_ADDR
// uc_side := 1 ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// uc_nation := 1 ;
 508: LD_ADDR_OWVAR 21
 512: PUSH
 513: LD_INT 1
 515: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 516: LD_EXP 36
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 235
// end ;
 528: LD_VAR 0 1
 532: RET
// every 0 0$1 trigger IsDead ( ar_dep_n ) and IsOk ( ar_dep_w ) do
 533: LD_INT 94
 535: PPUSH
 536: CALL_OW 301
 540: PUSH
 541: LD_INT 45
 543: PPUSH
 544: CALL_OW 302
 548: AND
 549: IFFALSE 561
 551: GO 553
 553: DISABLE
// SetAchievement ( ACH_EAST ) ; end_of_file
 554: LD_STRING ACH_EAST
 556: PPUSH
 557: CALL_OW 543
 561: END
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 562: LD_INT 0
 564: PPUSH
 565: PPUSH
 566: PPUSH
 567: PPUSH
 568: PPUSH
 569: PPUSH
 570: PPUSH
 571: PPUSH
// uc_side := 4 ;
 572: LD_ADDR_OWVAR 20
 576: PUSH
 577: LD_INT 4
 579: ST_TO_ADDR
// uc_nation := 1 ;
 580: LD_ADDR_OWVAR 21
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 588: LD_ADDR_EXP 30
 592: PUSH
 593: LD_STRING Powell
 595: PPUSH
 596: LD_INT 0
 598: PPUSH
 599: LD_STRING 
 601: PPUSH
 602: CALL 47421 0 3
 606: ST_TO_ADDR
// uc_side := 1 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 615: LD_ADDR_EXP 21
 619: PUSH
 620: LD_STRING JMM
 622: PPUSH
 623: LD_EXP 1
 627: NOT
 628: PPUSH
 629: LD_EXP 4
 633: PPUSH
 634: CALL 47421 0 3
 638: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 639: LD_EXP 21
 643: PPUSH
 644: CALL_OW 257
 648: PUSH
 649: LD_INT 4
 651: GREATER
 652: IFFALSE 666
// SetClass ( JMM , 1 ) ;
 654: LD_EXP 21
 658: PPUSH
 659: LD_INT 1
 661: PPUSH
 662: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 666: LD_ADDR_EXP 22
 670: PUSH
 671: LD_STRING Lisa
 673: PPUSH
 674: LD_EXP 1
 678: NOT
 679: PPUSH
 680: LD_EXP 4
 684: PPUSH
 685: CALL 47421 0 3
 689: ST_TO_ADDR
// if not Lisa then
 690: LD_EXP 22
 694: NOT
 695: IFFALSE 710
// Lisa := CreateCharacter ( 10_Lisa ) ;
 697: LD_ADDR_EXP 22
 701: PUSH
 702: LD_STRING 10_Lisa
 704: PPUSH
 705: CALL_OW 34
 709: ST_TO_ADDR
// if not Lisa then
 710: LD_EXP 22
 714: NOT
 715: IFFALSE 730
// Lisa := CreateCharacter ( 09_Lisa ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING 09_Lisa
 724: PPUSH
 725: CALL_OW 34
 729: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 730: LD_ADDR_EXP 31
 734: PUSH
 735: LD_STRING Cornel
 737: PPUSH
 738: LD_EXP 1
 742: NOT
 743: PPUSH
 744: LD_EXP 4
 748: PPUSH
 749: CALL 47421 0 3
 753: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 754: LD_ADDR_EXP 23
 758: PUSH
 759: LD_STRING Donaldson
 761: PPUSH
 762: LD_EXP 1
 766: NOT
 767: PPUSH
 768: LD_EXP 4
 772: PPUSH
 773: CALL 47421 0 3
 777: ST_TO_ADDR
// if not Donaldson then
 778: LD_EXP 23
 782: NOT
 783: IFFALSE 798
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 785: LD_ADDR_EXP 23
 789: PUSH
 790: LD_STRING 10_Donaldson
 792: PPUSH
 793: CALL_OW 34
 797: ST_TO_ADDR
// if not Donaldson then
 798: LD_EXP 23
 802: NOT
 803: IFFALSE 818
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 805: LD_ADDR_EXP 23
 809: PUSH
 810: LD_STRING 09_Donaldson
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 24
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_EXP 1
 830: NOT
 831: PPUSH
 832: LD_EXP 4
 836: PPUSH
 837: CALL 47421 0 3
 841: ST_TO_ADDR
// if not Bobby then
 842: LD_EXP 24
 846: NOT
 847: IFFALSE 862
// Bobby := CreateCharacter ( 10_Bobby ) ;
 849: LD_ADDR_EXP 24
 853: PUSH
 854: LD_STRING 10_Bobby
 856: PPUSH
 857: CALL_OW 34
 861: ST_TO_ADDR
// if not Bobby then
 862: LD_EXP 24
 866: NOT
 867: IFFALSE 882
// Bobby := CreateCharacter ( 09_Bobby ) ;
 869: LD_ADDR_EXP 24
 873: PUSH
 874: LD_STRING 09_Bobby
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 882: LD_ADDR_EXP 25
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_EXP 1
 894: NOT
 895: PPUSH
 896: LD_EXP 4
 900: PPUSH
 901: CALL 47421 0 3
 905: ST_TO_ADDR
// if not Cyrus then
 906: LD_EXP 25
 910: NOT
 911: IFFALSE 926
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 913: LD_ADDR_EXP 25
 917: PUSH
 918: LD_STRING 10_Cyrus
 920: PPUSH
 921: CALL_OW 34
 925: ST_TO_ADDR
// if not Cyrus then
 926: LD_EXP 25
 930: NOT
 931: IFFALSE 946
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_STRING 09_Cyrus
 940: PPUSH
 941: CALL_OW 34
 945: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 946: LD_ADDR_EXP 26
 950: PUSH
 951: LD_STRING Denis
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_EXP 4
 964: PPUSH
 965: CALL 47421 0 3
 969: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 970: LD_ADDR_EXP 27
 974: PUSH
 975: LD_STRING Brown
 977: PPUSH
 978: LD_EXP 1
 982: NOT
 983: PPUSH
 984: LD_EXP 4
 988: PPUSH
 989: CALL 47421 0 3
 993: ST_TO_ADDR
// if not Brown then
 994: LD_EXP 27
 998: NOT
 999: IFFALSE 1014
// Brown := CreateCharacter ( 10_Brown ) ;
1001: LD_ADDR_EXP 27
1005: PUSH
1006: LD_STRING 10_Brown
1008: PPUSH
1009: CALL_OW 34
1013: ST_TO_ADDR
// if not Brown then
1014: LD_EXP 27
1018: NOT
1019: IFFALSE 1034
// Brown := CreateCharacter ( 08_Brown ) ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_STRING 08_Brown
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
1034: LD_ADDR_EXP 28
1038: PUSH
1039: LD_STRING Gladstone
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 4
1052: PPUSH
1053: CALL 47421 0 3
1057: ST_TO_ADDR
// if not Gladstone then
1058: LD_EXP 28
1062: NOT
1063: IFFALSE 1078
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1065: LD_ADDR_EXP 28
1069: PUSH
1070: LD_STRING 10_Gladstone
1072: PPUSH
1073: CALL_OW 34
1077: ST_TO_ADDR
// if not Gladstone then
1078: LD_EXP 28
1082: NOT
1083: IFFALSE 1098
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1085: LD_ADDR_EXP 28
1089: PUSH
1090: LD_STRING 08_Gladstone
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1098: LD_ADDR_EXP 29
1102: PUSH
1103: LD_STRING Houten
1105: PPUSH
1106: LD_EXP 1
1110: NOT
1111: PPUSH
1112: LD_EXP 4
1116: PPUSH
1117: CALL 47421 0 3
1121: ST_TO_ADDR
// if not Houten then
1122: LD_EXP 29
1126: NOT
1127: IFFALSE 1142
// Houten := CreateCharacter ( 10_Houten ) ;
1129: LD_ADDR_EXP 29
1133: PUSH
1134: LD_STRING 10_Houten
1136: PPUSH
1137: CALL_OW 34
1141: ST_TO_ADDR
// if not Houten then
1142: LD_EXP 29
1146: NOT
1147: IFFALSE 1162
// Houten := CreateCharacter ( 09_Houten ) ;
1149: LD_ADDR_EXP 29
1153: PUSH
1154: LD_STRING 09_Houten
1156: PPUSH
1157: CALL_OW 34
1161: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1162: LD_ADDR_EXP 31
1166: PUSH
1167: LD_STRING Cornell
1169: PPUSH
1170: LD_EXP 1
1174: NOT
1175: PPUSH
1176: LD_EXP 4
1180: PPUSH
1181: CALL 47421 0 3
1185: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 32
1190: PUSH
1191: LD_STRING Gary
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 47421 0 3
1209: ST_TO_ADDR
// if not Gary then
1210: LD_EXP 32
1214: NOT
1215: IFFALSE 1230
// Gary := CreateCharacter ( 10_Gary ) ;
1217: LD_ADDR_EXP 32
1221: PUSH
1222: LD_STRING 10_Gary
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 33
1234: PUSH
1235: LD_STRING Frank
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 47421 0 3
1253: ST_TO_ADDR
// if not Frank then
1254: LD_EXP 33
1258: NOT
1259: IFFALSE 1274
// Frank := CreateCharacter ( 08_Frank ) ;
1261: LD_ADDR_EXP 33
1265: PUSH
1266: LD_STRING 08_Frank
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1274: LD_ADDR_EXP 34
1278: PUSH
1279: LD_STRING Kikuchi
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 4
1292: PPUSH
1293: CALL 47421 0 3
1297: ST_TO_ADDR
// if not Kikuchi then
1298: LD_EXP 34
1302: NOT
1303: IFFALSE 1318
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1305: LD_ADDR_EXP 34
1309: PUSH
1310: LD_STRING 08_Kikuchi
1312: PPUSH
1313: CALL_OW 34
1317: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1318: LD_ADDR_VAR 0 5
1322: PUSH
1323: LD_EXP 22
1327: PUSH
1328: LD_EXP 23
1332: PUSH
1333: LD_EXP 24
1337: PUSH
1338: LD_EXP 25
1342: PUSH
1343: LD_EXP 26
1347: PUSH
1348: LD_EXP 27
1352: PUSH
1353: LD_EXP 28
1357: PUSH
1358: LD_EXP 29
1362: PUSH
1363: LD_EXP 31
1367: PUSH
1368: LD_EXP 32
1372: PUSH
1373: LD_EXP 33
1377: PUSH
1378: LD_EXP 34
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// tmp := tmp diff 0 ;
1397: LD_ADDR_VAR 0 5
1401: PUSH
1402: LD_VAR 0 5
1406: PUSH
1407: LD_INT 0
1409: DIFF
1410: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1411: LD_ADDR_VAR 0 5
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_STRING 10_lock
1423: PPUSH
1424: CALL_OW 31
1428: UNION
1429: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1430: LD_ADDR_VAR 0 5
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: LD_STRING 10c_lock
1442: PPUSH
1443: CALL_OW 31
1447: UNION
1448: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1449: LD_STRING 10_lock
1451: PPUSH
1452: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1456: LD_STRING 10c_lock
1458: PPUSH
1459: CALL_OW 40
// for i in tmp do
1463: LD_ADDR_VAR 0 2
1467: PUSH
1468: LD_VAR 0 5
1472: PUSH
1473: FOR_IN
1474: IFFALSE 1512
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1476: LD_VAR 0 2
1480: PPUSH
1481: CALL_OW 257
1485: PUSH
1486: LD_INT 8
1488: PUSH
1489: LD_INT 2
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: IN
1496: IFFALSE 1510
// SetClass ( i , class_soldier ) ;
1498: LD_VAR 0 2
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: CALL_OW 336
1510: GO 1473
1512: POP
1513: POP
// if tmp < 12 then
1514: LD_VAR 0 5
1518: PUSH
1519: LD_INT 12
1521: LESS
1522: IFFALSE 1616
// begin k := 16 - tmp ;
1524: LD_ADDR_VAR 0 3
1528: PUSH
1529: LD_INT 16
1531: PUSH
1532: LD_VAR 0 5
1536: MINUS
1537: ST_TO_ADDR
// for i = 1 to k do
1538: LD_ADDR_VAR 0 2
1542: PUSH
1543: DOUBLE
1544: LD_INT 1
1546: DEC
1547: ST_TO_ADDR
1548: LD_VAR 0 3
1552: PUSH
1553: FOR_TO
1554: IFFALSE 1614
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1556: LD_INT 0
1558: PPUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 4
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_INT 4
1582: PPUSH
1583: CALL_OW 12
1587: ARRAY
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1596: LD_ADDR_VAR 0 5
1600: PUSH
1601: LD_VAR 0 5
1605: PUSH
1606: CALL_OW 44
1610: ADD
1611: ST_TO_ADDR
// end ;
1612: GO 1553
1614: POP
1615: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1616: LD_ADDR_EXP 19
1620: PUSH
1621: LD_STRING 1
1623: PPUSH
1624: LD_INT 12
1626: PPUSH
1627: LD_INT 12
1629: PPUSH
1630: LD_INT -5
1632: PUSH
1633: LD_EXP 21
1637: PUSH
1638: LD_INT -2
1640: PUSH
1641: LD_INT -3
1643: PUSH
1644: LD_INT -5
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 5
1658: ADD
1659: PUSH
1660: LD_INT -6
1662: PUSH
1663: LD_INT -4
1665: PUSH
1666: LD_EXP 30
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: ADD
1676: PPUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 4
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 3
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 5
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 5
1717: PUSH
1718: LD_INT 0
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 42
1739: ST_TO_ADDR
// others := tmp diff selected ;
1740: LD_ADDR_VAR 0 8
1744: PUSH
1745: LD_VAR 0 5
1749: PUSH
1750: LD_EXP 19
1754: DIFF
1755: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1756: LD_ADDR_VAR 0 8
1760: PUSH
1761: LD_VAR 0 8
1765: PUSH
1766: LD_EXP 22
1770: PUSH
1771: LD_EXP 23
1775: PUSH
1776: LD_EXP 24
1780: PUSH
1781: LD_EXP 25
1785: PUSH
1786: LD_EXP 26
1790: PUSH
1791: LD_EXP 27
1795: PUSH
1796: LD_EXP 28
1800: PUSH
1801: LD_EXP 29
1805: PUSH
1806: LD_EXP 31
1810: PUSH
1811: LD_EXP 32
1815: PUSH
1816: LD_EXP 33
1820: PUSH
1821: LD_EXP 34
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: DIFF
1840: ST_TO_ADDR
// if others then
1841: LD_VAR 0 8
1845: IFFALSE 1859
// SaveCharacters ( others , 11_others ) ;
1847: LD_VAR 0 8
1851: PPUSH
1852: LD_STRING 11_others
1854: PPUSH
1855: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 4
1902: PUSH
1903: LD_INT 1
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 7
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 3
1938: PUSH
1939: LD_INT 2
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: LD_INT 7
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// for i in JMM ^ selected do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: LD_EXP 21
1970: PUSH
1971: LD_EXP 19
1975: ADD
1976: PUSH
1977: FOR_IN
1978: IFFALSE 2167
// begin if GetClass ( i ) = 3 then
1980: LD_VAR 0 2
1984: PPUSH
1985: CALL_OW 257
1989: PUSH
1990: LD_INT 3
1992: EQUAL
1993: IFFALSE 2150
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1995: LD_ADDR_OWVAR 37
1999: PUSH
2000: LD_VAR 0 6
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
2013: LD_ADDR_OWVAR 39
2017: PUSH
2018: LD_VAR 0 6
2022: PUSH
2023: LD_INT 1
2025: ARRAY
2026: PUSH
2027: LD_INT 2
2029: ARRAY
2030: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2031: LD_ADDR_OWVAR 38
2035: PUSH
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2049: LD_ADDR_OWVAR 40
2053: PUSH
2054: LD_VAR 0 6
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 4
2065: ARRAY
2066: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2067: LD_ADDR_VAR 0 6
2071: PUSH
2072: LD_VAR 0 6
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 3
2084: ST_TO_ADDR
// veh := CreateVehicle ;
2085: LD_ADDR_VAR 0 7
2089: PUSH
2090: CALL_OW 45
2094: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2095: LD_VAR 0 7
2099: PPUSH
2100: LD_INT 8
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_VAR 0 7
2119: PPUSH
2120: CALL_OW 52
// if i = JMM then
2124: LD_VAR 0 2
2128: PUSH
2129: LD_EXP 21
2133: EQUAL
2134: IFFALSE 2148
// SetMark ( veh , 1 ) ;
2136: LD_VAR 0 7
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: CALL_OW 242
// end else
2148: GO 2165
// PlaceUnitArea ( i , am_hum_start , false ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 9
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// end ;
2165: GO 1977
2167: POP
2168: POP
// vc_chassis := us_medium_tracked ;
2169: LD_ADDR_OWVAR 37
2173: PUSH
2174: LD_INT 3
2176: ST_TO_ADDR
// vc_engine := engine_solar ;
2177: LD_ADDR_OWVAR 39
2181: PUSH
2182: LD_INT 2
2184: ST_TO_ADDR
// vc_control := control_computer ;
2185: LD_ADDR_OWVAR 38
2189: PUSH
2190: LD_INT 3
2192: ST_TO_ADDR
// vc_weapon := us_radar ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_INT 11
2200: ST_TO_ADDR
// veh := CreateVehicle ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: CALL_OW 45
2210: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2211: LD_VAR 0 7
2215: PPUSH
2216: LD_INT 87
2218: PPUSH
2219: LD_INT 142
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: CALL_OW 48
// end ; end_of_file
2229: LD_VAR 0 1
2233: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2234: LD_INT 0
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
// if Difficulty = 1 then
2242: LD_OWVAR 67
2246: PUSH
2247: LD_INT 1
2249: EQUAL
2250: IFFALSE 2347
// begin tmp := [ [ 129 , 45 ] , [ 143 , 58 ] , [ 184 , 113 ] , [ 163 , 107 ] ] ;
2252: LD_ADDR_VAR 0 6
2256: PUSH
2257: LD_INT 129
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 143
2269: PUSH
2270: LD_INT 58
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 184
2279: PUSH
2280: LD_INT 113
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 163
2289: PUSH
2290: LD_INT 107
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: ST_TO_ADDR
// for i in tmp do
2303: LD_ADDR_VAR 0 2
2307: PUSH
2308: LD_VAR 0 6
2312: PUSH
2313: FOR_IN
2314: IFFALSE 2345
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
2316: LD_VAR 0 2
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_INT 2
2332: ARRAY
2333: PPUSH
2334: CALL_OW 428
2338: PPUSH
2339: CALL_OW 64
2343: GO 2313
2345: POP
2346: POP
// end ; for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: LD_INT 21
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 69
2366: PUSH
2367: FOR_IN
2368: IFFALSE 2401
// SetBLevel ( i , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_INT 5
2377: PUSH
2378: LD_INT 6
2380: PUSH
2381: LD_INT 7
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: PUSH
2389: LD_OWVAR 67
2393: ARRAY
2394: PPUSH
2395: CALL_OW 241
2399: GO 2367
2401: POP
2402: POP
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_INT 5
2410: PUSH
2411: LD_INT 6
2413: PUSH
2414: LD_INT 7
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: PUSH
2422: LD_OWVAR 67
2426: ARRAY
2427: ST_TO_ADDR
// uc_side := 2 ;
2428: LD_ADDR_OWVAR 20
2432: PUSH
2433: LD_INT 2
2435: ST_TO_ADDR
// uc_nation := 2 ;
2436: LD_ADDR_OWVAR 21
2440: PUSH
2441: LD_INT 2
2443: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2444: LD_ADDR_OWVAR 37
2448: PUSH
2449: LD_INT 14
2451: ST_TO_ADDR
// vc_engine := engine_siberite ;
2452: LD_ADDR_OWVAR 39
2456: PUSH
2457: LD_INT 3
2459: ST_TO_ADDR
// vc_control := control_manual ;
2460: LD_ADDR_OWVAR 38
2464: PUSH
2465: LD_INT 1
2467: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2468: LD_ADDR_OWVAR 40
2472: PUSH
2473: LD_INT 31
2475: ST_TO_ADDR
// for i = 1 to 3 do
2476: LD_ADDR_VAR 0 2
2480: PUSH
2481: DOUBLE
2482: LD_INT 1
2484: DEC
2485: ST_TO_ADDR
2486: LD_INT 3
2488: PUSH
2489: FOR_TO
2490: IFFALSE 2574
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2492: LD_INT 0
2494: PPUSH
2495: LD_INT 3
2497: PPUSH
2498: LD_VAR 0 5
2502: PPUSH
2503: CALL_OW 380
// un := CreateVehicle ;
2507: LD_ADDR_VAR 0 4
2511: PUSH
2512: CALL_OW 45
2516: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2517: LD_VAR 0 4
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_INT 5
2527: PPUSH
2528: CALL_OW 12
2532: PPUSH
2533: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2537: LD_VAR 0 4
2541: PPUSH
2542: LD_INT 156
2544: PPUSH
2545: LD_INT 15
2547: PPUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2558: CALL_OW 44
2562: PPUSH
2563: LD_VAR 0 4
2567: PPUSH
2568: CALL_OW 52
// end ;
2572: GO 2489
2574: POP
2575: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ 16 , [ 2 , 3 , 4 ] [ Difficulty ] , - 1 , 4 ] ) ;
2576: LD_ADDR_EXP 37
2580: PUSH
2581: LD_INT 94
2583: PPUSH
2584: LD_INT 28
2586: PPUSH
2587: LD_STRING dammam
2589: PPUSH
2590: LD_VAR 0 5
2594: PPUSH
2595: LD_INT 10000
2597: PUSH
2598: LD_INT 1000
2600: PUSH
2601: LD_INT 300
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PPUSH
2609: LD_INT 16
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 3
2617: PUSH
2618: LD_INT 4
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PUSH
2632: LD_INT 1
2634: NEG
2635: PUSH
2636: LD_INT 4
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: CALL 57945 0 6
2649: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , [ 2 , 3 , 4 ] [ Difficulty ] , 2 , 0 ] ) ;
2650: LD_ADDR_EXP 37
2654: PUSH
2655: LD_EXP 37
2659: PUSH
2660: LD_INT 122
2662: PPUSH
2663: LD_INT 25
2665: PPUSH
2666: LD_STRING 
2668: PPUSH
2669: LD_VAR 0 5
2673: PPUSH
2674: LD_INT 500
2676: PUSH
2677: LD_INT 60
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: LD_INT 1
2690: NEG
2691: PUSH
2692: LD_INT 2
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_OWVAR 67
2710: ARRAY
2711: PUSH
2712: LD_INT 2
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: PPUSH
2724: CALL 57945 0 6
2728: UNION
2729: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
2730: LD_ADDR_EXP 35
2734: PUSH
2735: LD_INT 45
2737: PPUSH
2738: LD_INT 24
2740: PPUSH
2741: LD_STRING jeddah
2743: PPUSH
2744: LD_VAR 0 5
2748: PPUSH
2749: LD_INT 700
2751: PUSH
2752: LD_INT 300
2754: PUSH
2755: LD_INT 10
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PPUSH
2763: LD_INT 12
2765: PUSH
2766: LD_INT 4
2768: PUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 2
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL 57945 0 6
2785: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2786: LD_ADDR_EXP 36
2790: PUSH
2791: LD_INT 7
2793: PPUSH
2794: LD_INT 27
2796: PPUSH
2797: LD_STRING riyadh
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: LD_INT 500
2807: PUSH
2808: LD_INT 60
2810: PUSH
2811: LD_INT 0
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: LIST
2818: PPUSH
2819: LD_INT 4
2821: PUSH
2822: LD_INT 2
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL 57945 0 6
2841: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ 10 , 3 , 3 , 2 ] ) ;
2842: LD_ADDR_EXP 39
2846: PUSH
2847: LD_INT 204
2849: PPUSH
2850: LD_INT 26
2852: PPUSH
2853: LD_STRING 
2855: PPUSH
2856: LD_VAR 0 5
2860: PPUSH
2861: LD_INT 500
2863: PUSH
2864: LD_INT 50
2866: PUSH
2867: LD_INT 0
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 10
2877: PUSH
2878: LD_INT 3
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 2
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL 57945 0 6
2897: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2898: LD_ADDR_EXP 50
2902: PUSH
2903: LD_EXP 37
2907: PUSH
2908: LD_EXP 35
2912: PUSH
2913: LD_EXP 39
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 30
2940: PUSH
2941: LD_INT 31
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 58
2950: PUSH
2951: EMPTY
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 69
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3090
// begin if GetBase ( i ) then
2967: LD_VAR 0 2
2971: PPUSH
2972: CALL_OW 274
2976: IFFALSE 2980
// continue ;
2978: GO 2964
// d := GetDir ( i ) ;
2980: LD_ADDR_VAR 0 3
2984: PUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: CALL_OW 254
2994: ST_TO_ADDR
// if d < 3 then
2995: LD_VAR 0 3
2999: PUSH
3000: LD_INT 3
3002: LESS
3003: IFFALSE 3021
// d := d + 3 else
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_VAR 0 3
3014: PUSH
3015: LD_INT 3
3017: PLUS
3018: ST_TO_ADDR
3019: GO 3035
// d := d - 3 ;
3021: LD_ADDR_VAR 0 3
3025: PUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 3
3033: MINUS
3034: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_INT 8
3040: PPUSH
3041: LD_VAR 0 5
3045: PPUSH
3046: CALL_OW 380
// un := CreateHuman ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// SetDir ( un , d ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_VAR 0 3
3069: PPUSH
3070: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_VAR 0 2
3083: PPUSH
3084: CALL_OW 52
// end ;
3088: GO 2964
3090: POP
3091: POP
// if Difficulty > 1 then
3092: LD_OWVAR 67
3096: PUSH
3097: LD_INT 1
3099: GREATER
3100: IFFALSE 3471
// begin ar_kamikadze := [ ] ;
3102: LD_ADDR_EXP 42
3106: PUSH
3107: EMPTY
3108: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3109: LD_INT 0
3111: PPUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_VAR 0 5
3119: PPUSH
3120: CALL_OW 380
// un := CreateHuman ;
3124: LD_ADDR_VAR 0 4
3128: PUSH
3129: CALL_OW 44
3133: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
3146: LD_VAR 0 4
3150: PPUSH
3151: LD_INT 23
3153: PPUSH
3154: LD_INT 44
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 48
// ComCrawl ( un ) ;
3164: LD_VAR 0 4
3168: PPUSH
3169: CALL_OW 137
// un := CreateHuman ;
3173: LD_ADDR_VAR 0 4
3177: PUSH
3178: CALL_OW 44
3182: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3183: LD_VAR 0 4
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
3195: LD_VAR 0 4
3199: PPUSH
3200: LD_INT 30
3202: PPUSH
3203: LD_INT 39
3205: PPUSH
3206: LD_INT 0
3208: PPUSH
3209: CALL_OW 48
// ComCrawl ( un ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3222: LD_INT 0
3224: PPUSH
3225: LD_INT 17
3227: PPUSH
3228: LD_VAR 0 5
3232: PPUSH
3233: CALL_OW 380
// un := CreateHuman ;
3237: LD_ADDR_VAR 0 4
3241: PUSH
3242: CALL_OW 44
3246: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3247: LD_VAR 0 4
3251: PPUSH
3252: LD_INT 3
3254: PPUSH
3255: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3259: LD_VAR 0 4
3263: PPUSH
3264: LD_INT 45
3266: PPUSH
3267: LD_INT 86
3269: PPUSH
3270: LD_INT 0
3272: PPUSH
3273: CALL_OW 48
// ComHold ( un ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3286: LD_ADDR_EXP 42
3290: PUSH
3291: LD_EXP 42
3295: PPUSH
3296: LD_EXP 42
3300: PUSH
3301: LD_INT 1
3303: PLUS
3304: PPUSH
3305: LD_VAR 0 4
3309: PPUSH
3310: CALL_OW 1
3314: ST_TO_ADDR
// un := CreateHuman ;
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: CALL_OW 44
3324: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3325: LD_VAR 0 4
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3337: LD_VAR 0 4
3341: PPUSH
3342: LD_INT 60
3344: PPUSH
3345: LD_INT 85
3347: PPUSH
3348: LD_INT 0
3350: PPUSH
3351: CALL_OW 48
// ComHold ( un ) ;
3355: LD_VAR 0 4
3359: PPUSH
3360: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3364: LD_ADDR_EXP 42
3368: PUSH
3369: LD_EXP 42
3373: PPUSH
3374: LD_EXP 42
3378: PUSH
3379: LD_INT 1
3381: PLUS
3382: PPUSH
3383: LD_VAR 0 4
3387: PPUSH
3388: CALL_OW 1
3392: ST_TO_ADDR
// un := CreateHuman ;
3393: LD_ADDR_VAR 0 4
3397: PUSH
3398: CALL_OW 44
3402: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3415: LD_VAR 0 4
3419: PPUSH
3420: LD_INT 222
3422: PPUSH
3423: LD_INT 166
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 48
// ComHold ( un ) ;
3433: LD_VAR 0 4
3437: PPUSH
3438: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3442: LD_ADDR_EXP 42
3446: PUSH
3447: LD_EXP 42
3451: PPUSH
3452: LD_EXP 42
3456: PUSH
3457: LD_INT 1
3459: PLUS
3460: PPUSH
3461: LD_VAR 0 4
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3471: LD_ADDR_EXP 40
3475: PUSH
3476: EMPTY
3477: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3478: LD_INT 1
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: LD_VAR 0 5
3488: PPUSH
3489: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3493: LD_ADDR_OWVAR 26
3497: PUSH
3498: LD_STRING Pavel Grigorovic
3500: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3501: LD_ADDR_OWVAR 33
3505: PUSH
3506: LD_STRING SecondCharsGal
3508: ST_TO_ADDR
// hc_face_number := 4 ;
3509: LD_ADDR_OWVAR 34
3513: PUSH
3514: LD_INT 4
3516: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3517: LD_ADDR_EXP 40
3521: PUSH
3522: LD_EXP 40
3526: PPUSH
3527: LD_INT 1
3529: PPUSH
3530: CALL_OW 44
3534: PPUSH
3535: CALL_OW 1
3539: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 2 ) ;
3540: LD_INT 2
3542: PPUSH
3543: LD_INT 4
3545: PPUSH
3546: LD_INT 2
3548: PPUSH
3549: CALL_OW 380
// hc_name := Lucy Sebel ;
3553: LD_ADDR_OWVAR 26
3557: PUSH
3558: LD_STRING Lucy Sebel
3560: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3561: LD_ADDR_OWVAR 33
3565: PUSH
3566: LD_STRING SecondCharsGal
3568: ST_TO_ADDR
// hc_face_number := 15 ;
3569: LD_ADDR_OWVAR 34
3573: PUSH
3574: LD_INT 15
3576: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3577: LD_ADDR_EXP 40
3581: PUSH
3582: LD_EXP 40
3586: PPUSH
3587: LD_INT 2
3589: PPUSH
3590: CALL_OW 44
3594: PPUSH
3595: CALL_OW 1
3599: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 2 ) ;
3600: LD_INT 2
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 380
// hc_gallery :=  ;
3613: LD_ADDR_OWVAR 33
3617: PUSH
3618: LD_STRING 
3620: ST_TO_ADDR
// hc_name :=  ;
3621: LD_ADDR_OWVAR 26
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3629: LD_ADDR_EXP 40
3633: PUSH
3634: LD_EXP 40
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: CALL_OW 44
3646: PPUSH
3647: CALL_OW 1
3651: ST_TO_ADDR
// hc_sex := sex_male ;
3652: LD_ADDR_OWVAR 27
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// hc_class = 11 ;
3660: LD_ADDR_OWVAR 28
3664: PUSH
3665: LD_INT 11
3667: ST_TO_ADDR
// hc_gallery = sandar ;
3668: LD_ADDR_OWVAR 33
3672: PUSH
3673: LD_STRING sandar
3675: ST_TO_ADDR
// hc_face_number = 33 ;
3676: LD_ADDR_OWVAR 34
3680: PUSH
3681: LD_INT 33
3683: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING Thabit Muhair Saliba
3691: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3692: LD_ADDR_OWVAR 31
3696: PUSH
3697: LD_INT 0
3699: PUSH
3700: LD_INT 0
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// Saliba = CreateHuman ;
3715: LD_ADDR_EXP 44
3719: PUSH
3720: CALL_OW 44
3724: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3725: LD_EXP 44
3729: PPUSH
3730: LD_INT 7
3732: PPUSH
3733: CALL_OW 52
// if gensher_active then
3737: LD_EXP 18
3741: IFFALSE 3768
// begin Gensher = NewCharacter ( Dietrich ) ;
3743: LD_ADDR_EXP 45
3747: PUSH
3748: LD_STRING Dietrich
3750: PPUSH
3751: CALL_OW 25
3755: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3756: LD_EXP 45
3760: PPUSH
3761: LD_INT 94
3763: PPUSH
3764: CALL_OW 52
// end ; InitHc ;
3768: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3772: LD_ADDR_EXP 41
3776: PUSH
3777: EMPTY
3778: ST_TO_ADDR
// for i = 1 to 5 do
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: DOUBLE
3785: LD_INT 1
3787: DEC
3788: ST_TO_ADDR
3789: LD_INT 5
3791: PUSH
3792: FOR_TO
3793: IFFALSE 3965
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3795: LD_INT 13
3797: PUSH
3798: LD_INT 14
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 2
3810: PPUSH
3811: CALL_OW 12
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ARRAY
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_INT 25
3844: PUSH
3845: LD_INT 27
3847: PUSH
3848: LD_INT 26
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: PUSH
3856: LD_INT 1
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: CALL_OW 12
3866: ARRAY
3867: PPUSH
3868: LD_INT 60
3870: PPUSH
3871: LD_INT 100
3873: PPUSH
3874: CALL_OW 12
3878: PPUSH
3879: CALL 54536 0 5
// un := CreateVehicle ;
3883: LD_ADDR_VAR 0 4
3887: PUSH
3888: CALL_OW 45
3892: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3893: LD_ADDR_EXP 41
3897: PUSH
3898: LD_EXP 41
3902: PPUSH
3903: LD_EXP 41
3907: PUSH
3908: LD_INT 1
3910: PLUS
3911: PPUSH
3912: LD_VAR 0 4
3916: PPUSH
3917: CALL_OW 1
3921: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3922: LD_VAR 0 4
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 5
3932: PPUSH
3933: CALL_OW 12
3937: PPUSH
3938: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3942: LD_VAR 0 4
3946: PPUSH
3947: LD_INT 124
3949: PPUSH
3950: LD_INT 141
3952: PPUSH
3953: LD_INT 8
3955: PPUSH
3956: LD_INT 0
3958: PPUSH
3959: CALL_OW 50
// end ;
3963: GO 3792
3965: POP
3966: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3967: LD_ADDR_EXP 43
3971: PUSH
3972: EMPTY
3973: PUSH
3974: EMPTY
3975: PUSH
3976: EMPTY
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_INT 3
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 4
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: PUSH
4007: LD_OWVAR 67
4011: ARRAY
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4228
// for i = 1 to 3 do
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: DOUBLE
4022: LD_INT 1
4024: DEC
4025: ST_TO_ADDR
4026: LD_INT 3
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4224
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
4032: LD_INT 14
4034: PPUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 2
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 1
4047: PPUSH
4048: LD_INT 2
4050: PPUSH
4051: CALL_OW 12
4055: ARRAY
4056: PPUSH
4057: LD_INT 1
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 2
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: PPUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 27
4084: PUSH
4085: LD_INT 26
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 4
4102: PPUSH
4103: CALL_OW 12
4107: ARRAY
4108: PPUSH
4109: LD_INT 100
4111: PPUSH
4112: CALL 54536 0 5
// un := CreateVehicle ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: CALL_OW 45
4125: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
4126: LD_ADDR_EXP 43
4130: PUSH
4131: LD_EXP 43
4135: PPUSH
4136: LD_VAR 0 2
4140: PUSH
4141: LD_EXP 43
4145: PUSH
4146: LD_VAR 0 2
4150: ARRAY
4151: PUSH
4152: LD_INT 1
4154: PLUS
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PPUSH
4160: LD_VAR 0 4
4164: PPUSH
4165: CALL 54658 0 3
4169: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 5
4180: PPUSH
4181: CALL_OW 12
4185: PPUSH
4186: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
4190: LD_VAR 0 4
4194: PPUSH
4195: LD_INT 20
4197: PUSH
4198: LD_INT 21
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_VAR 0 2
4213: ARRAY
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL_OW 49
// end ;
4222: GO 4029
4224: POP
4225: POP
4226: GO 4013
4228: POP
4229: POP
// InitHc ;
4230: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4234: LD_INT 4
4236: PPUSH
4237: LD_INT 5
4239: PPUSH
4240: LD_INT 10
4242: PPUSH
4243: LD_INT 5
4245: PPUSH
4246: LD_INT 0
4248: PPUSH
4249: CALL_OW 58
// end ;
4253: LD_VAR 0 1
4257: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4258: LD_EXP 42
4262: IFFALSE 4336
4264: GO 4266
4266: DISABLE
4267: LD_INT 0
4269: PPUSH
// begin enable ;
4270: ENABLE
// for i in ar_kamikadze do
4271: LD_ADDR_VAR 0 1
4275: PUSH
4276: LD_EXP 42
4280: PUSH
4281: FOR_IN
4282: IFFALSE 4334
// if See ( 1 , i ) then
4284: LD_INT 1
4286: PPUSH
4287: LD_VAR 0 1
4291: PPUSH
4292: CALL_OW 292
4296: IFFALSE 4332
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4298: LD_VAR 0 1
4302: PPUSH
4303: LD_INT 81
4305: PUSH
4306: LD_INT 2
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 69
4317: PPUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 74
4327: PPUSH
4328: CALL_OW 115
4332: GO 4281
4334: POP
4335: POP
// end ;
4336: PPOPN 1
4338: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4339: LD_EXP 13
4343: IFFALSE 4660
4345: GO 4347
4347: DISABLE
4348: LD_INT 0
4350: PPUSH
4351: PPUSH
4352: PPUSH
4353: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4354: LD_INT 35
4356: PPUSH
4357: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4361: LD_INT 1
4363: PPUSH
4364: CALL 41425 0 1
4368: PUSH
4369: LD_INT 0
4371: EQUAL
4372: IFFALSE 4354
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4374: LD_INT 1
4376: PPUSH
4377: LD_INT 14
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: LD_INT 32
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: PPUSH
4398: CALL 41029 0 2
// repeat wait ( 0 0$1 ) ;
4402: LD_INT 35
4404: PPUSH
4405: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4409: LD_EXP 69
4413: PUSH
4414: LD_INT 1
4416: ARRAY
4417: PPUSH
4418: LD_INT 33
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 34
4430: PUSH
4431: LD_INT 32
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: IFFALSE 4402
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_EXP 69
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PPUSH
4462: LD_INT 33
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 34
4474: PUSH
4475: LD_INT 32
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 72
4490: PUSH
4491: LD_INT 1
4493: ARRAY
4494: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: LD_INT 5
4502: PPUSH
4503: CALL_OW 469
4507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4508: LD_INT 35
4510: PPUSH
4511: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 5
4522: PPUSH
4523: CALL_OW 469
4527: ST_TO_ADDR
// tmp := 100 ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 100
4535: ST_TO_ADDR
// if pos then
4536: LD_VAR 0 4
4540: IFFALSE 4580
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4542: LD_ADDR_VAR 0 3
4546: PUSH
4547: LD_INT 2
4549: PPUSH
4550: LD_VAR 0 4
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_VAR 0 4
4563: PUSH
4564: LD_INT 2
4566: ARRAY
4567: PPUSH
4568: LD_INT 20
4570: PPUSH
4571: CALL 55554 0 4
4575: PUSH
4576: LD_INT 4
4578: ARRAY
4579: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4580: LD_VAR 0 4
4584: PUSH
4585: LD_EXP 14
4589: NOT
4590: AND
4591: PUSH
4592: LD_VAR 0 3
4596: PUSH
4597: LD_INT 10
4599: LESS
4600: AND
4601: IFFALSE 4508
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4603: LD_VAR 0 2
4607: PPUSH
4608: LD_VAR 0 4
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: LD_VAR 0 4
4621: PUSH
4622: LD_INT 2
4624: ARRAY
4625: PPUSH
4626: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_INT 198
4637: PPUSH
4638: LD_INT 113
4640: PPUSH
4641: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_INT 124
4652: PPUSH
4653: LD_INT 7
4655: PPUSH
4656: CALL_OW 171
// end ;
4660: PPOPN 4
4662: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4663: LD_EXP 6
4667: IFFALSE 7448
4669: GO 4671
4671: DISABLE
4672: LD_INT 0
4674: PPUSH
4675: PPUSH
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4682: LD_ADDR_VAR 0 4
4686: PUSH
4687: LD_INT 5
4689: PUSH
4690: LD_INT 6
4692: PUSH
4693: LD_INT 7
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: PUSH
4701: LD_OWVAR 67
4705: ARRAY
4706: ST_TO_ADDR
// coords := [ ] ;
4707: LD_ADDR_VAR 0 5
4711: PUSH
4712: EMPTY
4713: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4714: LD_ADDR_VAR 0 6
4718: PUSH
4719: LD_INT 0
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 0
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 1
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4761: LD_INT 1
4763: PPUSH
4764: LD_INT 14
4766: PUSH
4767: LD_INT 1
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 28
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 14
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: LD_INT 2
4790: PUSH
4791: LD_INT 25
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 14
4802: PUSH
4803: LD_INT 1
4805: PUSH
4806: LD_INT 2
4808: PUSH
4809: LD_INT 28
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 14
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: LD_INT 29
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL 41029 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4846: LD_INT 21000
4848: PUSH
4849: LD_INT 19950
4851: PUSH
4852: LD_INT 18900
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: PUSH
4860: LD_OWVAR 67
4864: ARRAY
4865: PPUSH
4866: CALL_OW 67
// InitHc ;
4870: CALL_OW 19
// InitUc ;
4874: CALL_OW 18
// uc_side := 2 ;
4878: LD_ADDR_OWVAR 20
4882: PUSH
4883: LD_INT 2
4885: ST_TO_ADDR
// uc_nation := 2 ;
4886: LD_ADDR_OWVAR 21
4890: PUSH
4891: LD_INT 2
4893: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: EMPTY
4900: PUSH
4901: EMPTY
4902: PUSH
4903: EMPTY
4904: PUSH
4905: EMPTY
4906: PUSH
4907: EMPTY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 1
4928: PPUSH
4929: LD_EXP 69
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PUSH
4938: LD_INT 34
4940: PUSH
4941: LD_INT 32
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: DIFF
4953: PPUSH
4954: CALL_OW 1
4958: ST_TO_ADDR
// for i = 1 to Difficulty do
4959: LD_ADDR_VAR 0 1
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_OWVAR 67
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5113
// begin uc_side := 2 ;
4977: LD_ADDR_OWVAR 20
4981: PUSH
4982: LD_INT 2
4984: ST_TO_ADDR
// uc_nation := 2 ;
4985: LD_ADDR_OWVAR 21
4989: PUSH
4990: LD_INT 2
4992: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4993: LD_INT 13
4995: PPUSH
4996: LD_INT 3
4998: PPUSH
4999: LD_INT 5
5001: PPUSH
5002: LD_INT 29
5004: PPUSH
5005: LD_INT 100
5007: PPUSH
5008: CALL 54536 0 5
// un := CreateVehicle ;
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: CALL_OW 45
5021: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
5022: LD_ADDR_VAR 0 3
5026: PUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PUSH
5044: LD_INT 1
5046: PLUS
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL 54658 0 3
5061: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5062: LD_VAR 0 2
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
5074: LD_VAR 0 2
5078: PPUSH
5079: LD_INT 16
5081: PPUSH
5082: LD_INT 0
5084: PPUSH
5085: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
5089: LD_VAR 0 2
5093: PPUSH
5094: LD_INT 51
5096: PPUSH
5097: LD_INT 10
5099: PPUSH
5100: CALL_OW 111
// wait ( 0 0$2 ) ;
5104: LD_INT 70
5106: PPUSH
5107: CALL_OW 67
// end ;
5111: GO 4974
5113: POP
5114: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
5115: LD_ADDR_VAR 0 5
5119: PUSH
5120: LD_INT 51
5122: PUSH
5123: LD_INT 24
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 75
5132: PUSH
5133: LD_INT 90
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
5144: LD_INT 1
5146: PPUSH
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PPUSH
5156: LD_VAR 0 5
5160: PPUSH
5161: LD_VAR 0 6
5165: PPUSH
5166: CALL 41262 0 4
// for i = 1 to [ 1 , 3 , 3 ] [ Difficulty ] do
5170: LD_ADDR_VAR 0 1
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_INT 1
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PUSH
5194: LD_OWVAR 67
5198: ARRAY
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5301
// begin uc_side := 2 ;
5203: LD_ADDR_OWVAR 20
5207: PUSH
5208: LD_INT 2
5210: ST_TO_ADDR
// uc_nation := 2 ;
5211: LD_ADDR_OWVAR 21
5215: PUSH
5216: LD_INT 2
5218: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5219: LD_INT 0
5221: PPUSH
5222: LD_INT 17
5224: PPUSH
5225: LD_VAR 0 4
5229: PPUSH
5230: CALL_OW 380
// un := CreateHuman ;
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: CALL_OW 44
5243: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5244: LD_ADDR_VAR 0 3
5248: PUSH
5249: LD_VAR 0 3
5253: PPUSH
5254: LD_INT 2
5256: PUSH
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PUSH
5266: LD_INT 1
5268: PLUS
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: LD_VAR 0 2
5278: PPUSH
5279: CALL 54658 0 3
5283: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5284: LD_VAR 0 2
5288: PPUSH
5289: LD_INT 13
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 49
// end ;
5299: GO 5200
5301: POP
5302: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5303: LD_ADDR_VAR 0 1
5307: PUSH
5308: DOUBLE
5309: LD_INT 1
5311: DEC
5312: ST_TO_ADDR
5313: LD_INT 3
5315: PUSH
5316: LD_INT 4
5318: PUSH
5319: LD_INT 4
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: LD_OWVAR 67
5331: ARRAY
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5455
// begin uc_side := 2 ;
5336: LD_ADDR_OWVAR 20
5340: PUSH
5341: LD_INT 2
5343: ST_TO_ADDR
// uc_nation := 2 ;
5344: LD_ADDR_OWVAR 21
5348: PUSH
5349: LD_INT 2
5351: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ i mod 2 + 1 ] , skill ) ;
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 1
5357: PUSH
5358: LD_INT 8
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_VAR 0 1
5369: PUSH
5370: LD_INT 2
5372: MOD
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: ARRAY
5378: PPUSH
5379: LD_VAR 0 4
5383: PPUSH
5384: CALL_OW 380
// un := CreateHuman ;
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: CALL_OW 44
5397: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_VAR 0 3
5407: PPUSH
5408: LD_INT 2
5410: PUSH
5411: LD_VAR 0 3
5415: PUSH
5416: LD_INT 2
5418: ARRAY
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PPUSH
5428: LD_VAR 0 2
5432: PPUSH
5433: CALL 54658 0 3
5437: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: LD_INT 13
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 49
// end ;
5453: GO 5333
5455: POP
5456: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5457: LD_ADDR_VAR 0 5
5461: PUSH
5462: LD_INT 67
5464: PUSH
5465: LD_INT 112
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 85
5474: PUSH
5475: LD_INT 130
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5486: LD_INT 2
5488: PPUSH
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: LD_VAR 0 6
5507: PPUSH
5508: CALL 41262 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5512: LD_ADDR_VAR 0 1
5516: PUSH
5517: DOUBLE
5518: LD_INT 1
5520: DEC
5521: ST_TO_ADDR
5522: LD_INT 1
5524: PUSH
5525: LD_INT 2
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: PUSH
5536: LD_OWVAR 67
5540: ARRAY
5541: PUSH
5542: FOR_TO
5543: IFFALSE 5643
// begin uc_side := 2 ;
5545: LD_ADDR_OWVAR 20
5549: PUSH
5550: LD_INT 2
5552: ST_TO_ADDR
// uc_nation := 2 ;
5553: LD_ADDR_OWVAR 21
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5561: LD_INT 0
5563: PPUSH
5564: LD_INT 17
5566: PPUSH
5567: LD_VAR 0 4
5571: PPUSH
5572: CALL_OW 380
// un := CreateHuman ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: CALL_OW 44
5585: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_VAR 0 3
5595: PPUSH
5596: LD_INT 3
5598: PUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 3
5606: ARRAY
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PPUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: CALL 54658 0 3
5625: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5626: LD_VAR 0 2
5630: PPUSH
5631: LD_INT 14
5633: PPUSH
5634: LD_INT 0
5636: PPUSH
5637: CALL_OW 49
// end ;
5641: GO 5542
5643: POP
5644: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5645: LD_ADDR_VAR 0 5
5649: PUSH
5650: LD_INT 148
5652: PUSH
5653: LD_INT 158
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 148
5662: PUSH
5663: LD_INT 158
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5674: LD_INT 3
5676: PPUSH
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 3
5684: ARRAY
5685: PPUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_VAR 0 6
5695: PPUSH
5696: CALL 41262 0 4
// for i = 1 to [ 2 , 4 , 4 ] [ Difficulty ] do
5700: LD_ADDR_VAR 0 1
5704: PUSH
5705: DOUBLE
5706: LD_INT 1
5708: DEC
5709: ST_TO_ADDR
5710: LD_INT 2
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: LD_INT 4
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_OWVAR 67
5728: ARRAY
5729: PUSH
5730: FOR_TO
5731: IFFALSE 5955
// begin uc_side := 2 ;
5733: LD_ADDR_OWVAR 20
5737: PUSH
5738: LD_INT 2
5740: ST_TO_ADDR
// uc_nation := 2 ;
5741: LD_ADDR_OWVAR 21
5745: PUSH
5746: LD_INT 2
5748: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5749: LD_INT 14
5751: PPUSH
5752: LD_INT 3
5754: PPUSH
5755: LD_INT 1
5757: PUSH
5758: LD_INT 5
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 2
5770: PPUSH
5771: CALL_OW 12
5775: ARRAY
5776: PPUSH
5777: LD_INT 27
5779: PUSH
5780: LD_INT 26
5782: PUSH
5783: LD_INT 28
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: LD_INT 1
5793: PPUSH
5794: LD_INT 3
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: PPUSH
5803: LD_INT 100
5805: PPUSH
5806: CALL 54536 0 5
// un := CreateVehicle ;
5810: LD_ADDR_VAR 0 2
5814: PUSH
5815: CALL_OW 45
5819: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5820: LD_ADDR_VAR 0 3
5824: PUSH
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_INT 4
5832: PUSH
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 4
5840: ARRAY
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: LD_VAR 0 2
5854: PPUSH
5855: CALL 54658 0 3
5859: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5860: LD_VAR 0 2
5864: PPUSH
5865: LD_INT 5
5867: PPUSH
5868: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5872: LD_VAR 0 2
5876: PPUSH
5877: LD_INT 15
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 49
// if GetControl ( un ) = control_manual then
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 263
5896: PUSH
5897: LD_INT 1
5899: EQUAL
5900: IFFALSE 5931
// begin PrepareHuman ( false , 3 , skill ) ;
5902: LD_INT 0
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_VAR 0 4
5912: PPUSH
5913: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5917: CALL_OW 44
5921: PPUSH
5922: LD_VAR 0 2
5926: PPUSH
5927: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5931: LD_VAR 0 2
5935: PPUSH
5936: LD_INT 179
5938: PPUSH
5939: LD_INT 135
5941: PPUSH
5942: CALL_OW 111
// wait ( 0 0$2 ) ;
5946: LD_INT 70
5948: PPUSH
5949: CALL_OW 67
// end ;
5953: GO 5730
5955: POP
5956: POP
// vc_chassis := 15 ;
5957: LD_ADDR_OWVAR 37
5961: PUSH
5962: LD_INT 15
5964: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5965: LD_ADDR_VAR 0 3
5969: PUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: LD_INT 4
5977: PUSH
5978: LD_VAR 0 3
5982: PUSH
5983: LD_INT 4
5985: ARRAY
5986: PUSH
5987: LD_INT 1
5989: PLUS
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PPUSH
5995: CALL_OW 45
5999: PPUSH
6000: CALL 54658 0 3
6004: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 4
6012: ARRAY
6013: PUSH
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 4
6021: ARRAY
6022: ARRAY
6023: PPUSH
6024: LD_INT 15
6026: PPUSH
6027: LD_INT 0
6029: PPUSH
6030: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
6034: LD_INT 0
6036: PPUSH
6037: LD_INT 11
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
6049: LD_ADDR_VAR 0 3
6053: PUSH
6054: LD_VAR 0 3
6058: PPUSH
6059: LD_INT 4
6061: PUSH
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 4
6069: ARRAY
6070: PUSH
6071: LD_INT 1
6073: PLUS
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PPUSH
6079: CALL_OW 44
6083: PPUSH
6084: CALL 54658 0 3
6088: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 4
6096: ARRAY
6097: PUSH
6098: LD_VAR 0 3
6102: PUSH
6103: LD_INT 4
6105: ARRAY
6106: ARRAY
6107: PPUSH
6108: LD_VAR 0 3
6112: PUSH
6113: LD_INT 4
6115: ARRAY
6116: PUSH
6117: LD_VAR 0 3
6121: PUSH
6122: LD_INT 4
6124: ARRAY
6125: PUSH
6126: LD_INT 1
6128: MINUS
6129: ARRAY
6130: PPUSH
6131: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
6135: LD_ADDR_VAR 0 5
6139: PUSH
6140: LD_INT 148
6142: PUSH
6143: LD_INT 140
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
6153: LD_INT 1
6155: PPUSH
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 4
6163: ARRAY
6164: PPUSH
6165: LD_VAR 0 5
6169: PPUSH
6170: LD_VAR 0 6
6174: PPUSH
6175: CALL 41262 0 4
// if gensher_active then
6179: LD_EXP 18
6183: IFFALSE 6585
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_STRING D10-Diet-1
6192: PPUSH
6193: CALL_OW 94
// for i = 1 to 2 do
6197: LD_ADDR_VAR 0 1
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_INT 2
6209: PUSH
6210: FOR_TO
6211: IFFALSE 6349
// begin uc_side := 2 ;
6213: LD_ADDR_OWVAR 20
6217: PUSH
6218: LD_INT 2
6220: ST_TO_ADDR
// uc_nation := 2 ;
6221: LD_ADDR_OWVAR 21
6225: PUSH
6226: LD_INT 2
6228: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6229: LD_INT 13
6231: PPUSH
6232: LD_INT 3
6234: PPUSH
6235: LD_INT 5
6237: PPUSH
6238: LD_INT 29
6240: PPUSH
6241: LD_INT 100
6243: PPUSH
6244: CALL 54536 0 5
// un := CreateVehicle ;
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: CALL_OW 45
6257: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6258: LD_ADDR_VAR 0 3
6262: PUSH
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 5
6270: PUSH
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 5
6278: ARRAY
6279: PUSH
6280: LD_INT 1
6282: PLUS
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL 54658 0 3
6297: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6298: LD_VAR 0 2
6302: PPUSH
6303: LD_INT 0
6305: PPUSH
6306: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_INT 23
6317: PPUSH
6318: LD_INT 0
6320: PPUSH
6321: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6325: LD_VAR 0 2
6329: PPUSH
6330: LD_INT 85
6332: PPUSH
6333: LD_INT 152
6335: PPUSH
6336: CALL_OW 111
// wait ( 0 0$2 ) ;
6340: LD_INT 70
6342: PPUSH
6343: CALL_OW 67
// end ;
6347: GO 6210
6349: POP
6350: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6351: LD_ADDR_VAR 0 1
6355: PUSH
6356: DOUBLE
6357: LD_INT 1
6359: DEC
6360: ST_TO_ADDR
6361: LD_INT 2
6363: PUSH
6364: LD_INT 3
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: PUSH
6375: LD_OWVAR 67
6379: ARRAY
6380: PUSH
6381: FOR_TO
6382: IFFALSE 6539
// begin uc_side := 2 ;
6384: LD_ADDR_OWVAR 20
6388: PUSH
6389: LD_INT 2
6391: ST_TO_ADDR
// uc_nation := 2 ;
6392: LD_ADDR_OWVAR 21
6396: PUSH
6397: LD_INT 2
6399: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6400: LD_INT 14
6402: PPUSH
6403: LD_INT 3
6405: PPUSH
6406: LD_INT 5
6408: PPUSH
6409: LD_INT 27
6411: PUSH
6412: LD_INT 28
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 1
6421: PPUSH
6422: LD_INT 2
6424: PPUSH
6425: CALL_OW 12
6429: ARRAY
6430: PPUSH
6431: LD_INT 100
6433: PPUSH
6434: CALL 54536 0 5
// un := CreateVehicle ;
6438: LD_ADDR_VAR 0 2
6442: PUSH
6443: CALL_OW 45
6447: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6448: LD_ADDR_VAR 0 3
6452: PUSH
6453: LD_VAR 0 3
6457: PPUSH
6458: LD_INT 5
6460: PUSH
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 5
6468: ARRAY
6469: PUSH
6470: LD_INT 1
6472: PLUS
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PPUSH
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL 54658 0 3
6487: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6488: LD_VAR 0 2
6492: PPUSH
6493: LD_INT 0
6495: PPUSH
6496: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6500: LD_VAR 0 2
6504: PPUSH
6505: LD_INT 23
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6515: LD_VAR 0 2
6519: PPUSH
6520: LD_INT 85
6522: PPUSH
6523: LD_INT 152
6525: PPUSH
6526: CALL_OW 111
// wait ( 0 0$2 ) ;
6530: LD_INT 70
6532: PPUSH
6533: CALL_OW 67
// end ;
6537: GO 6381
6539: POP
6540: POP
// coords := [ [ 97 , 143 ] ] ;
6541: LD_ADDR_VAR 0 5
6545: PUSH
6546: LD_INT 97
6548: PUSH
6549: LD_INT 143
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6559: LD_INT 1
6561: PPUSH
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 5
6569: ARRAY
6570: PPUSH
6571: LD_VAR 0 5
6575: PPUSH
6576: LD_VAR 0 6
6580: PPUSH
6581: CALL 41262 0 4
// end ; Wait ( 13 13$00 ) ;
6585: LD_INT 27300
6587: PPUSH
6588: CALL_OW 67
// tmp := [ ] ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: EMPTY
6598: ST_TO_ADDR
// w := 1 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// repeat tmp := [ ] ;
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// if w mod 4 = 0 then
6614: LD_VAR 0 7
6618: PUSH
6619: LD_INT 4
6621: MOD
6622: PUSH
6623: LD_INT 0
6625: EQUAL
6626: IFFALSE 6713
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6628: LD_ADDR_VAR 0 8
6632: PUSH
6633: LD_INT 11
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: LD_INT 24
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 11
6653: PUSH
6654: LD_INT 1
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 24
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 11
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: LD_INT 2
6677: PUSH
6678: LD_INT 24
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 11
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: LD_INT 2
6695: PUSH
6696: LD_INT 24
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: ST_TO_ADDR
6711: GO 6815
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6713: LD_ADDR_VAR 0 8
6717: PUSH
6718: LD_INT 14
6720: PUSH
6721: LD_INT 1
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_INT 28
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 14
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: LD_INT 25
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 14
6756: PUSH
6757: LD_INT 1
6759: PUSH
6760: LD_INT 2
6762: PUSH
6763: LD_INT 28
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 14
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: LD_INT 2
6780: PUSH
6781: LD_INT 29
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 11
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: LD_INT 24
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: ST_TO_ADDR
// if w mod 3 = 0 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_INT 3
6822: MOD
6823: PUSH
6824: LD_INT 0
6826: EQUAL
6827: IFFALSE 6903
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6829: LD_ADDR_VAR 0 8
6833: PUSH
6834: LD_VAR 0 8
6838: PPUSH
6839: LD_INT 1
6841: PUSH
6842: LD_VAR 0 8
6846: PUSH
6847: LD_VAR 0 1
6851: ARRAY
6852: PUSH
6853: LD_INT 1
6855: PLUS
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: LD_INT 14
6863: PUSH
6864: LD_INT 1
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: LD_INT 25
6872: PUSH
6873: LD_INT 28
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_INT 2
6885: PPUSH
6886: CALL_OW 12
6890: ARRAY
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL 54658 0 3
6902: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6903: LD_INT 1
6905: PPUSH
6906: LD_VAR 0 8
6910: PPUSH
6911: CALL 41029 0 2
// if GetSide ( ar_dep_w ) = 2 then
6915: LD_INT 45
6917: PPUSH
6918: CALL_OW 255
6922: PUSH
6923: LD_INT 2
6925: EQUAL
6926: IFFALSE 7011
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6928: LD_ADDR_VAR 0 8
6932: PUSH
6933: LD_INT 14
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: LD_INT 2
6941: PUSH
6942: LD_INT 28
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 14
6953: PUSH
6954: LD_INT 1
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 27
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 14
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 27
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6992: LD_INT 2
6994: PPUSH
6995: LD_VAR 0 8
6999: PPUSH
7000: CALL 41029 0 2
// wait ( 0 0$50 ) ;
7004: LD_INT 1750
7006: PPUSH
7007: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
7018: LD_EXP 69
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PPUSH
7027: LD_INT 3
7029: PUSH
7030: LD_INT 34
7032: PUSH
7033: LD_INT 32
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 72
7048: PUSH
7049: LD_INT 4
7051: GREATEREQUAL
7052: IFFALSE 7011
// wait ( 0 0$10 ) ;
7054: LD_INT 350
7056: PPUSH
7057: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_EXP 69
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: PPUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 34
7080: PUSH
7081: LD_INT 32
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PPUSH
7092: CALL_OW 72
7096: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
7097: LD_INT 100
7099: PPUSH
7100: CALL_OW 13
7104: PUSH
7105: LD_INT 50
7107: LESS
7108: IFFALSE 7141
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
7110: LD_ADDR_VAR 0 5
7114: PUSH
7115: LD_INT 55
7117: PUSH
7118: LD_INT 7
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 75
7127: PUSH
7128: LD_INT 90
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: ST_TO_ADDR
7139: GO 7170
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
7141: LD_ADDR_VAR 0 5
7145: PUSH
7146: LD_INT 128
7148: PUSH
7149: LD_INT 94
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 180
7158: PUSH
7159: LD_INT 135
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: ST_TO_ADDR
// if w mod 4 = 0 then
7170: LD_VAR 0 7
7174: PUSH
7175: LD_INT 4
7177: MOD
7178: PUSH
7179: LD_INT 0
7181: EQUAL
7182: IFFALSE 7213
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
7184: LD_ADDR_VAR 0 5
7188: PUSH
7189: LD_INT 91
7191: PUSH
7192: LD_INT 58
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 117
7201: PUSH
7202: LD_INT 107
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: ST_TO_ADDR
// ComAgressiveMove ( tmp , coords [ 1 ] , coords [ 2 ] ) ;
7213: LD_VAR 0 3
7217: PPUSH
7218: LD_VAR 0 5
7222: PUSH
7223: LD_INT 1
7225: ARRAY
7226: PPUSH
7227: LD_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: ARRAY
7235: PPUSH
7236: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7240: LD_INT 35
7242: PPUSH
7243: CALL_OW 67
// until UnitFilter ( tmp , [ f_hastask ] ) = 0 ;
7247: LD_VAR 0 3
7251: PPUSH
7252: LD_INT 60
7254: PUSH
7255: EMPTY
7256: LIST
7257: PPUSH
7258: CALL_OW 72
7262: PUSH
7263: LD_INT 0
7265: EQUAL
7266: IFFALSE 7240
// repeat wait ( 0 0$2 ) ;
7268: LD_INT 70
7270: PPUSH
7271: CALL_OW 67
// for i in tmp do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_VAR 0 3
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7375
// if GetChassis ( i ) = ar_hovercraft then
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 265
7297: PUSH
7298: LD_INT 11
7300: EQUAL
7301: IFFALSE 7339
// AttackHovercraft ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7303: LD_VAR 0 1
7307: PPUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 1
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 69
7322: PPUSH
7323: LD_VAR 0 1
7327: PPUSH
7328: CALL_OW 74
7332: PPUSH
7333: CALL 81846 0 2
7337: GO 7373
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7339: LD_VAR 0 1
7343: PPUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 1
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: PPUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: CALL_OW 74
7368: PPUSH
7369: CALL_OW 115
7373: GO 7285
7375: POP
7376: POP
// until not tmp ;
7377: LD_VAR 0 3
7381: NOT
7382: IFFALSE 7268
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7384: LD_INT 22050
7386: PPUSH
7387: LD_INT 28350
7389: PPUSH
7390: CALL_OW 12
7394: PPUSH
7395: CALL_OW 67
// w := w + 1 ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 7
7408: PUSH
7409: LD_INT 1
7411: PLUS
7412: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7413: LD_INT 94
7415: PPUSH
7416: CALL_OW 301
7420: PUSH
7421: LD_EXP 50
7425: PUSH
7426: LD_INT 1
7428: ARRAY
7429: PPUSH
7430: LD_INT 30
7432: PUSH
7433: LD_INT 3
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 72
7444: NOT
7445: OR
7446: IFFALSE 6607
// end ;
7448: PPOPN 8
7450: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7451: LD_INT 204
7453: IFFALSE 7919
7455: GO 7457
7457: DISABLE
7458: LD_INT 0
7460: PPUSH
7461: PPUSH
7462: PPUSH
7463: PPUSH
// begin enable ;
7464: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7465: LD_INT 35
7467: PPUSH
7468: LD_INT 1190
7470: PPUSH
7471: CALL_OW 12
7475: PPUSH
7476: CALL_OW 67
// tmp := [ ] ;
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: EMPTY
7486: ST_TO_ADDR
// uc_side := 8 ;
7487: LD_ADDR_OWVAR 20
7491: PUSH
7492: LD_INT 8
7494: ST_TO_ADDR
// uc_nation := 2 ;
7495: LD_ADDR_OWVAR 21
7499: PUSH
7500: LD_INT 2
7502: ST_TO_ADDR
// InitHc ;
7503: CALL_OW 19
// for i = 1 to 3 do
7507: LD_ADDR_VAR 0 1
7511: PUSH
7512: DOUBLE
7513: LD_INT 1
7515: DEC
7516: ST_TO_ADDR
7517: LD_INT 3
7519: PUSH
7520: FOR_TO
7521: IFFALSE 7648
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7523: LD_INT 13
7525: PUSH
7526: LD_INT 14
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 1
7535: PPUSH
7536: LD_INT 2
7538: PPUSH
7539: CALL_OW 12
7543: ARRAY
7544: PPUSH
7545: LD_INT 3
7547: PPUSH
7548: LD_INT 5
7550: PPUSH
7551: LD_INT 27
7553: PUSH
7554: LD_INT 28
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 1
7563: PPUSH
7564: LD_INT 2
7566: PPUSH
7567: CALL_OW 12
7571: ARRAY
7572: PPUSH
7573: LD_INT 100
7575: PPUSH
7576: CALL 54536 0 5
// un := CreateVehicle ;
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: CALL_OW 45
7589: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7590: LD_VAR 0 3
7594: PPUSH
7595: LD_INT 4
7597: PPUSH
7598: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_INT 15
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7617: LD_ADDR_VAR 0 2
7621: PUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: LD_VAR 0 2
7631: PUSH
7632: LD_INT 1
7634: PLUS
7635: PPUSH
7636: LD_VAR 0 3
7640: PPUSH
7641: CALL_OW 1
7645: ST_TO_ADDR
// end ;
7646: GO 7520
7648: POP
7649: POP
// for i = 1 to 4 do
7650: LD_ADDR_VAR 0 1
7654: PUSH
7655: DOUBLE
7656: LD_INT 1
7658: DEC
7659: ST_TO_ADDR
7660: LD_INT 4
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7735
// begin PrepareHuman ( false , 1 , 6 ) ;
7666: LD_INT 0
7668: PPUSH
7669: LD_INT 1
7671: PPUSH
7672: LD_INT 6
7674: PPUSH
7675: CALL_OW 380
// un := CreateHuman ;
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: CALL_OW 44
7688: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7689: LD_VAR 0 3
7693: PPUSH
7694: LD_INT 15
7696: PPUSH
7697: LD_INT 0
7699: PPUSH
7700: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_VAR 0 2
7713: PPUSH
7714: LD_VAR 0 2
7718: PUSH
7719: LD_INT 1
7721: PLUS
7722: PPUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 1
7732: ST_TO_ADDR
// end ;
7733: GO 7663
7735: POP
7736: POP
// wait ( 0 0$3 ) ;
7737: LD_INT 105
7739: PPUSH
7740: CALL_OW 67
// for i in tmp do
7744: LD_ADDR_VAR 0 1
7748: PUSH
7749: LD_VAR 0 2
7753: PUSH
7754: FOR_IN
7755: IFFALSE 7823
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7757: LD_VAR 0 1
7761: PPUSH
7762: CALL_OW 257
7766: PUSH
7767: LD_INT 1
7769: EQUAL
7770: PUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 247
7780: PUSH
7781: LD_INT 2
7783: EQUAL
7784: OR
7785: IFFALSE 7821
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 81
7794: PUSH
7795: LD_INT 8
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: PPUSH
7807: LD_VAR 0 1
7811: PPUSH
7812: CALL_OW 74
7816: PPUSH
7817: CALL_OW 115
7821: GO 7754
7823: POP
7824: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7825: LD_VAR 0 2
7829: PPUSH
7830: LD_INT 210
7832: PPUSH
7833: LD_INT 178
7835: PPUSH
7836: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_INT 10
7847: PPUSH
7848: LD_INT 22
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 70
7862: ST_TO_ADDR
// if x then
7863: LD_VAR 0 4
7867: IFFALSE 7895
// for i in x do
7869: LD_ADDR_VAR 0 1
7873: PUSH
7874: LD_VAR 0 4
7878: PUSH
7879: FOR_IN
7880: IFFALSE 7893
// RemoveUnit ( i ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 64
7891: GO 7879
7893: POP
7894: POP
// wait ( 0 0$1 ) ;
7895: LD_INT 35
7897: PPUSH
7898: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7902: LD_INT 22
7904: PUSH
7905: LD_INT 8
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PPUSH
7912: CALL_OW 69
7916: NOT
7917: IFFALSE 7825
// end ;
7919: PPOPN 4
7921: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7922: LD_INT 22
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 34
7934: PUSH
7935: LD_INT 31
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 3
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1000
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: IFFALSE 8071
7970: GO 7972
7972: DISABLE
// begin if IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) then
7973: LD_INT 45
7975: PPUSH
7976: CALL_OW 302
7980: PUSH
7981: LD_INT 45
7983: PPUSH
7984: CALL_OW 255
7988: AND
7989: IFFALSE 8032
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 18 , 8 ) else
7991: LD_INT 22
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 31
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 69
8019: PPUSH
8020: LD_INT 18
8022: PPUSH
8023: LD_INT 8
8025: PPUSH
8026: CALL_OW 111
8030: GO 8071
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
8032: LD_INT 22
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 34
8044: PUSH
8045: LD_INT 31
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PPUSH
8061: LD_INT 106
8063: PPUSH
8064: LD_INT 14
8066: PPUSH
8067: CALL_OW 111
// end ; end_of_file
8071: END
// export function Action ; var tmp , p , radar , sols , i ; begin
8072: LD_INT 0
8074: PPUSH
8075: PPUSH
8076: PPUSH
8077: PPUSH
8078: PPUSH
8079: PPUSH
// InGameOn ;
8080: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
8084: LD_EXP 21
8088: PPUSH
8089: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
8093: LD_INT 2
8095: PPUSH
8096: LD_INT 1
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: LD_INT 1
8104: PPUSH
8105: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
8109: LD_ADDR_VAR 0 2
8113: PUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 69
8142: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
8143: LD_ADDR_VAR 0 4
8147: PUSH
8148: LD_INT 22
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 34
8160: PUSH
8161: LD_INT 11
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 69
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: ST_TO_ADDR
// for i = 1 to tmp do
8181: LD_ADDR_VAR 0 6
8185: PUSH
8186: DOUBLE
8187: LD_INT 1
8189: DEC
8190: ST_TO_ADDR
8191: LD_VAR 0 2
8195: PUSH
8196: FOR_TO
8197: IFFALSE 8244
// begin if i = 5 then
8199: LD_VAR 0 6
8203: PUSH
8204: LD_INT 5
8206: EQUAL
8207: IFFALSE 8211
// break ;
8209: GO 8244
// sols := Replace ( sols , i , tmp [ i ] ) ;
8211: LD_ADDR_VAR 0 5
8215: PUSH
8216: LD_VAR 0 5
8220: PPUSH
8221: LD_VAR 0 6
8225: PPUSH
8226: LD_VAR 0 2
8230: PUSH
8231: LD_VAR 0 6
8235: ARRAY
8236: PPUSH
8237: CALL_OW 1
8241: ST_TO_ADDR
// end ;
8242: GO 8196
8244: POP
8245: POP
// tmp := ar_force_tmp ;
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_EXP 40
8255: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 1
8263: ARRAY
8264: PPUSH
8265: LD_INT 108
8267: PPUSH
8268: LD_INT 139
8270: PPUSH
8271: LD_INT 0
8273: PPUSH
8274: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
8278: LD_VAR 0 2
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_EXP 21
8291: PPUSH
8292: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
8296: LD_VAR 0 2
8300: PUSH
8301: LD_INT 2
8303: ARRAY
8304: PPUSH
8305: LD_INT 114
8307: PPUSH
8308: LD_INT 132
8310: PPUSH
8311: LD_INT 0
8313: PPUSH
8314: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 3
8325: ARRAY
8326: PPUSH
8327: LD_INT 115
8329: PPUSH
8330: LD_INT 132
8332: PPUSH
8333: LD_INT 0
8335: PPUSH
8336: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
8340: LD_VAR 0 2
8344: PUSH
8345: LD_INT 2
8347: ARRAY
8348: PUSH
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 3
8356: ARRAY
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
8366: LD_VAR 0 4
8370: PPUSH
8371: LD_INT 83
8373: PPUSH
8374: LD_INT 123
8376: PPUSH
8377: CALL_OW 111
// Wait ( 0 0$01 ) ;
8381: LD_INT 35
8383: PPUSH
8384: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
8388: LD_INT 90
8390: PPUSH
8391: LD_INT 144
8393: PPUSH
8394: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
8398: LD_VAR 0 5
8402: PPUSH
8403: LD_INT 88
8405: PPUSH
8406: LD_INT 129
8408: PPUSH
8409: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8413: LD_ADDR_VAR 0 3
8417: PUSH
8418: LD_INT 92
8420: PUSH
8421: LD_INT 131
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 88
8430: PUSH
8431: LD_INT 127
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 91
8440: PUSH
8441: LD_INT 132
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 92
8450: PUSH
8451: LD_INT 134
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// for i = 1 to sols do
8464: LD_ADDR_VAR 0 6
8468: PUSH
8469: DOUBLE
8470: LD_INT 1
8472: DEC
8473: ST_TO_ADDR
8474: LD_VAR 0 5
8478: PUSH
8479: FOR_TO
8480: IFFALSE 8553
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8482: LD_VAR 0 5
8486: PUSH
8487: LD_VAR 0 6
8491: ARRAY
8492: PPUSH
8493: LD_VAR 0 3
8497: PUSH
8498: LD_VAR 0 6
8502: ARRAY
8503: PUSH
8504: LD_INT 1
8506: ARRAY
8507: PPUSH
8508: LD_VAR 0 3
8512: PUSH
8513: LD_VAR 0 6
8517: ARRAY
8518: PUSH
8519: LD_INT 2
8521: ARRAY
8522: PPUSH
8523: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8527: LD_VAR 0 5
8531: PUSH
8532: LD_VAR 0 6
8536: ARRAY
8537: PPUSH
8538: CALL_OW 197
// AddComHold ( sols ) ;
8542: LD_VAR 0 5
8546: PPUSH
8547: CALL_OW 200
// end ;
8551: GO 8479
8553: POP
8554: POP
// repeat wait ( 0 0$1 ) ;
8555: LD_INT 35
8557: PPUSH
8558: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8562: LD_VAR 0 5
8566: PUSH
8567: LD_INT 1
8569: ARRAY
8570: PPUSH
8571: LD_INT 92
8573: PPUSH
8574: LD_INT 131
8576: PPUSH
8577: CALL_OW 297
8581: PUSH
8582: LD_INT 4
8584: LESS
8585: IFFALSE 8555
// CenterOnXY ( 96 , 139 ) ;
8587: LD_INT 96
8589: PPUSH
8590: LD_INT 139
8592: PPUSH
8593: CALL_OW 84
// wait ( 0 0$3 ) ;
8597: LD_INT 105
8599: PPUSH
8600: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8604: LD_INT 111
8606: PPUSH
8607: LD_INT 135
8609: PPUSH
8610: LD_INT 1
8612: PPUSH
8613: LD_INT 25
8615: NEG
8616: PPUSH
8617: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8621: LD_VAR 0 2
8625: PUSH
8626: LD_INT 2
8628: ARRAY
8629: PPUSH
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL_OW 250
8643: PUSH
8644: LD_INT 3
8646: PLUS
8647: PPUSH
8648: LD_VAR 0 2
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: CALL_OW 251
8661: PPUSH
8662: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: PPUSH
8675: LD_INT 7
8677: PPUSH
8678: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8682: LD_VAR 0 2
8686: PUSH
8687: LD_INT 2
8689: ARRAY
8690: PPUSH
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 1
8698: ARRAY
8699: PPUSH
8700: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8704: LD_INT 35
8706: PPUSH
8707: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8711: LD_VAR 0 2
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: LD_VAR 0 2
8724: PUSH
8725: LD_INT 2
8727: ARRAY
8728: PPUSH
8729: CALL_OW 296
8733: PUSH
8734: LD_INT 5
8736: LESS
8737: IFFALSE 8704
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 1
8746: ARRAY
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_INT 2
8755: ARRAY
8756: PPUSH
8757: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8761: LD_VAR 0 2
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: LD_STRING D1a-Merc1-1
8772: PPUSH
8773: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8777: LD_VAR 0 2
8781: PUSH
8782: LD_INT 2
8784: ARRAY
8785: PPUSH
8786: LD_STRING D1a-FMerc2-1
8788: PPUSH
8789: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8793: LD_VAR 0 2
8797: PUSH
8798: LD_INT 2
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_INT 1
8809: ARRAY
8810: PPUSH
8811: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8815: LD_VAR 0 2
8819: PUSH
8820: LD_INT 1
8822: ARRAY
8823: PPUSH
8824: LD_INT 500
8826: PPUSH
8827: CALL_OW 234
// wait ( 0 0$2 ) ;
8831: LD_INT 70
8833: PPUSH
8834: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8838: LD_VAR 0 2
8842: PUSH
8843: LD_INT 1
8845: ARRAY
8846: PPUSH
8847: LD_INT 2
8849: PPUSH
8850: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8854: LD_INT 10
8856: PPUSH
8857: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8861: LD_VAR 0 2
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PPUSH
8870: LD_STRING D1a-Merc1-2
8872: PPUSH
8873: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8877: LD_INT 7
8879: PPUSH
8880: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8884: LD_VAR 0 2
8888: PUSH
8889: LD_INT 1
8891: ARRAY
8892: PPUSH
8893: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8897: LD_VAR 0 2
8901: PUSH
8902: LD_INT 2
8904: ARRAY
8905: PPUSH
8906: LD_INT 10
8908: PPUSH
8909: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8913: LD_VAR 0 2
8917: PUSH
8918: LD_INT 2
8920: ARRAY
8921: PPUSH
8922: LD_STRING D1a-FMerc2-2
8924: PPUSH
8925: CALL_OW 88
// wait ( 0 0$1 ) ;
8929: LD_INT 35
8931: PPUSH
8932: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8936: LD_INT 7
8938: PPUSH
8939: CALL_OW 85
// wait ( 0 0$2 ) ;
8943: LD_INT 70
8945: PPUSH
8946: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8950: LD_EXP 44
8954: PPUSH
8955: LD_STRING D1a-Saliba-1
8957: PPUSH
8958: CALL_OW 91
// KillUnit ( Saliba ) ;
8962: LD_EXP 44
8966: PPUSH
8967: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8971: LD_VAR 0 2
8975: PUSH
8976: LD_INT 3
8978: ARRAY
8979: PPUSH
8980: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8984: LD_EXP 21
8988: PPUSH
8989: CALL_OW 85
// wait ( 0 0$1 ) ;
8993: LD_INT 35
8995: PPUSH
8996: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
9000: LD_VAR 0 5
9004: PPUSH
9005: LD_INT 88
9007: PPUSH
9008: LD_INT 141
9010: PPUSH
9011: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
9015: LD_VAR 0 5
9019: PPUSH
9020: LD_INT 70
9022: PPUSH
9023: CALL_OW 202
// wait ( 0 0$2 ) ;
9027: LD_INT 70
9029: PPUSH
9030: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
9034: LD_INT 2
9036: PPUSH
9037: LD_INT 1
9039: PPUSH
9040: LD_INT 2
9042: PPUSH
9043: LD_INT 1
9045: PPUSH
9046: CALL_OW 80
// InGameOff ;
9050: CALL_OW 9
// ComWalk ( sols ) ;
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
9063: LD_STRING M1
9065: PPUSH
9066: CALL_OW 337
// game_speed := 4 ;
9070: LD_ADDR_OWVAR 65
9074: PUSH
9075: LD_INT 4
9077: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
9078: LD_INT 111
9080: PPUSH
9081: LD_INT 135
9083: PPUSH
9084: LD_INT 1
9086: PPUSH
9087: CALL_OW 331
// SaveForQuickRestart ;
9091: CALL_OW 22
// ar_run := true ;
9095: LD_ADDR_EXP 5
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9103: LD_INT 35
9105: PPUSH
9106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 91
9122: PUSH
9123: LD_INT 7
9125: PUSH
9126: LD_INT 10
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PPUSH
9138: CALL_OW 69
9142: PUSH
9143: LD_INT 7
9145: PPUSH
9146: CALL_OW 256
9150: PUSH
9151: LD_INT 999
9153: LESS
9154: OR
9155: IFFALSE 9103
// if GetSide ( ar_dep_s ) = 2 then
9157: LD_INT 7
9159: PPUSH
9160: CALL_OW 255
9164: PUSH
9165: LD_INT 2
9167: EQUAL
9168: IFFALSE 9180
// SetSide ( ar_dep_s , 1 ) ;
9170: LD_INT 7
9172: PPUSH
9173: LD_INT 1
9175: PPUSH
9176: CALL_OW 235
// end ;
9180: LD_VAR 0 1
9184: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
9185: LD_EXP 5
9189: IFFALSE 9549
9191: GO 9193
9193: DISABLE
9194: LD_INT 0
9196: PPUSH
9197: PPUSH
9198: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: LD_EXP 40
9208: PUSH
9209: LD_EXP 36
9213: PPUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 21
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 72
9246: ADD
9247: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
9248: LD_VAR 0 2
9252: PPUSH
9253: LD_INT 5
9255: PPUSH
9256: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
9260: LD_INT 5
9262: PPUSH
9263: LD_INT 1
9265: PPUSH
9266: CALL_OW 343
// k := 1 ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: LD_INT 1
9277: ST_TO_ADDR
// for i in tmp do
9278: LD_ADDR_VAR 0 1
9282: PUSH
9283: LD_VAR 0 2
9287: PUSH
9288: FOR_IN
9289: IFFALSE 9374
// begin if IsInUnit ( i ) then
9291: LD_VAR 0 1
9295: PPUSH
9296: CALL_OW 310
9300: IFFALSE 9311
// ComExitBuilding ( i ) ;
9302: LD_VAR 0 1
9306: PPUSH
9307: CALL_OW 122
// if GetClass ( i ) = 3 then
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 257
9320: PUSH
9321: LD_INT 3
9323: EQUAL
9324: IFFALSE 9360
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
9326: LD_VAR 0 1
9330: PPUSH
9331: LD_EXP 41
9335: PUSH
9336: LD_VAR 0 3
9340: ARRAY
9341: PPUSH
9342: CALL_OW 180
// k := k + 1 ;
9346: LD_ADDR_VAR 0 3
9350: PUSH
9351: LD_VAR 0 3
9355: PUSH
9356: LD_INT 1
9358: PLUS
9359: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 173
// end ;
9372: GO 9288
9374: POP
9375: POP
// ar_patrol := true ;
9376: LD_ADDR_EXP 7
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
9384: LD_INT 10
9386: PPUSH
9387: CALL_OW 67
// for i in tmp do
9391: LD_ADDR_VAR 0 1
9395: PUSH
9396: LD_VAR 0 2
9400: PUSH
9401: FOR_IN
9402: IFFALSE 9430
// if not HasTask ( i ) then
9404: LD_VAR 0 1
9408: PPUSH
9409: CALL_OW 314
9413: NOT
9414: IFFALSE 9428
// ComMoveToArea ( i , escape_area ) ;
9416: LD_VAR 0 1
9420: PPUSH
9421: LD_INT 10
9423: PPUSH
9424: CALL_OW 113
9428: GO 9401
9430: POP
9431: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9432: LD_ADDR_VAR 0 3
9436: PUSH
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 95
9444: PUSH
9445: LD_INT 10
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: ST_TO_ADDR
// if k then
9457: LD_VAR 0 3
9461: IFFALSE 9530
// for i in k do
9463: LD_ADDR_VAR 0 1
9467: PUSH
9468: LD_VAR 0 3
9472: PUSH
9473: FOR_IN
9474: IFFALSE 9528
// begin if IsInUnit ( i ) then
9476: LD_VAR 0 1
9480: PPUSH
9481: CALL_OW 310
9485: IFFALSE 9501
// RemoveUnit ( IsInUnit ( i ) ) ;
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 310
9496: PPUSH
9497: CALL_OW 64
// RemoveUnit ( i ) ;
9501: LD_VAR 0 1
9505: PPUSH
9506: CALL_OW 64
// tmp := tmp diff i ;
9510: LD_ADDR_VAR 0 2
9514: PUSH
9515: LD_VAR 0 2
9519: PUSH
9520: LD_VAR 0 1
9524: DIFF
9525: ST_TO_ADDR
// end ;
9526: GO 9473
9528: POP
9529: POP
// until tmp = [ ] ;
9530: LD_VAR 0 2
9534: PUSH
9535: EMPTY
9536: EQUAL
9537: IFFALSE 9384
// ChangeSideFog ( 5 , 5 ) ;
9539: LD_INT 5
9541: PPUSH
9542: LD_INT 5
9544: PPUSH
9545: CALL_OW 343
// end ;
9549: PPOPN 3
9551: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9552: LD_EXP 7
9556: IFFALSE 9846
9558: GO 9560
9560: DISABLE
9561: LD_INT 0
9563: PPUSH
9564: PPUSH
9565: PPUSH
// begin uc_side := 2 ;
9566: LD_ADDR_OWVAR 20
9570: PUSH
9571: LD_INT 2
9573: ST_TO_ADDR
// uc_nation := 2 ;
9574: LD_ADDR_OWVAR 21
9578: PUSH
9579: LD_INT 2
9581: ST_TO_ADDR
// InitHc ;
9582: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9586: LD_INT 1
9588: PPUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_INT 6
9594: PPUSH
9595: CALL_OW 380
// un := CreateHuman ;
9599: LD_ADDR_VAR 0 2
9603: PUSH
9604: CALL_OW 44
9608: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9609: LD_INT 14
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: LD_INT 1
9617: PPUSH
9618: LD_INT 27
9620: PPUSH
9621: LD_INT 98
9623: PPUSH
9624: CALL 54536 0 5
// veh := CreateVehicle ;
9628: LD_ADDR_VAR 0 3
9632: PUSH
9633: CALL_OW 45
9637: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 4
9645: PPUSH
9646: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_INT 179
9657: PPUSH
9658: LD_INT 135
9660: PPUSH
9661: LD_INT 0
9663: PPUSH
9664: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9668: LD_VAR 0 2
9672: PPUSH
9673: LD_VAR 0 3
9677: PPUSH
9678: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9682: LD_VAR 0 2
9686: PPUSH
9687: LD_INT 126
9689: PPUSH
9690: LD_INT 133
9692: PPUSH
9693: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9697: LD_INT 10
9699: PPUSH
9700: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9704: LD_INT 1
9706: PPUSH
9707: LD_VAR 0 3
9711: PPUSH
9712: CALL_OW 292
9716: PUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_INT 7
9724: PPUSH
9725: CALL_OW 296
9729: PUSH
9730: LD_INT 9
9732: LESS
9733: OR
9734: IFFALSE 9697
// ComHold ( veh ) ;
9736: LD_VAR 0 3
9740: PPUSH
9741: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9745: LD_VAR 0 2
9749: PPUSH
9750: LD_STRING D2aa-Ar1-1
9752: PPUSH
9753: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9757: LD_VAR 0 2
9761: PPUSH
9762: LD_INT 177
9764: PPUSH
9765: LD_INT 96
9767: PPUSH
9768: CALL_OW 111
// AddComExitVehicle ( un ) ;
9772: LD_VAR 0 2
9776: PPUSH
9777: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9781: LD_INT 35
9783: PPUSH
9784: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9788: LD_VAR 0 2
9792: PPUSH
9793: LD_INT 204
9795: PPUSH
9796: CALL_OW 296
9800: PUSH
9801: LD_INT 15
9803: LESS
9804: IFFALSE 9781
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9806: LD_ADDR_EXP 50
9810: PUSH
9811: LD_EXP 50
9815: PPUSH
9816: LD_INT 3
9818: PUSH
9819: LD_EXP 50
9823: PUSH
9824: LD_INT 3
9826: ARRAY
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PPUSH
9836: LD_VAR 0 2
9840: PPUSH
9841: CALL 54658 0 3
9845: ST_TO_ADDR
// end ;
9846: PPOPN 3
9848: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9849: LD_INT 7
9851: PPUSH
9852: CALL_OW 255
9856: PUSH
9857: LD_INT 1
9859: EQUAL
9860: PUSH
9861: LD_INT 7
9863: PPUSH
9864: CALL_OW 301
9868: OR
9869: IFFALSE 12293
9871: GO 9873
9873: DISABLE
9874: LD_INT 0
9876: PPUSH
9877: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9878: LD_ADDR_VAR 0 1
9882: PUSH
9883: LD_EXP 36
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 72
9902: PUSH
9903: FOR_IN
9904: IFFALSE 9920
// SetSide ( i , 1 ) ;
9906: LD_VAR 0 1
9910: PPUSH
9911: LD_INT 1
9913: PPUSH
9914: CALL_OW 235
9918: GO 9903
9920: POP
9921: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 46
9929: PUSH
9930: LD_INT 41
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 50
9939: PUSH
9940: LD_INT 25
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 57
9949: PUSH
9950: LD_INT 75
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 75
9959: PUSH
9960: LD_INT 89
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 51
9969: PUSH
9970: LD_INT 45
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 95
9979: PUSH
9980: LD_INT 95
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 84
9989: PUSH
9990: LD_INT 77
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 101
9999: PUSH
10000: LD_INT 76
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 118
10009: PUSH
10010: LD_INT 81
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 139
10019: PUSH
10020: LD_INT 97
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 129
10029: PUSH
10030: LD_INT 114
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 154
10039: PUSH
10040: LD_INT 111
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: ST_TO_ADDR
// base_captured := true ;
10061: LD_ADDR_EXP 6
10065: PUSH
10066: LD_INT 1
10068: ST_TO_ADDR
// DialogueOn ;
10069: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10073: LD_EXP 21
10077: PPUSH
10078: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
10082: LD_EXP 21
10086: PPUSH
10087: LD_STRING D2-JMM-1
10089: PPUSH
10090: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10094: LD_EXP 30
10098: PPUSH
10099: LD_STRING D2-Pow-1
10101: PPUSH
10102: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10106: LD_EXP 21
10110: PPUSH
10111: LD_STRING D2-JMM-2
10113: PPUSH
10114: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING D2-Pow-2
10125: PPUSH
10126: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING D2-JMM-3
10137: PPUSH
10138: CALL_OW 88
// DialogueOff ;
10142: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
10146: LD_STRING M2
10148: PPUSH
10149: CALL_OW 337
// Wait ( 0 0$2 ) ;
10153: LD_INT 70
10155: PPUSH
10156: CALL_OW 67
// if IsOk ( Gary ) then
10160: LD_EXP 32
10164: PPUSH
10165: CALL_OW 302
10169: IFFALSE 10183
// Say ( Gary , D2a-Gary-1 ) ;
10171: LD_EXP 32
10175: PPUSH
10176: LD_STRING D2a-Gary-1
10178: PPUSH
10179: CALL_OW 88
// if IsOk ( Bobby ) then
10183: LD_EXP 24
10187: PPUSH
10188: CALL_OW 302
10192: IFFALSE 10206
// Say ( Bobby , D2a-Bobby-1 ) ;
10194: LD_EXP 24
10198: PPUSH
10199: LD_STRING D2a-Bobby-1
10201: PPUSH
10202: CALL_OW 88
// if IsOk ( Cyrus ) then
10206: LD_EXP 25
10210: PPUSH
10211: CALL_OW 302
10215: IFFALSE 10229
// Say ( Cyrus , D2a-Cyrus-1 ) ;
10217: LD_EXP 25
10221: PPUSH
10222: LD_STRING D2a-Cyrus-1
10224: PPUSH
10225: CALL_OW 88
// if IsOk ( Lisa ) then
10229: LD_EXP 22
10233: PPUSH
10234: CALL_OW 302
10238: IFFALSE 10252
// Say ( Lisa , D2a-Lisa-1 ) ;
10240: LD_EXP 22
10244: PPUSH
10245: LD_STRING D2a-Lisa-1
10247: PPUSH
10248: CALL_OW 88
// if IsOk ( Frank ) then
10252: LD_EXP 33
10256: PPUSH
10257: CALL_OW 302
10261: IFFALSE 10275
// Say ( Frank , D2a-Frank-1 ) ;
10263: LD_EXP 33
10267: PPUSH
10268: LD_STRING D2a-Frank-1
10270: PPUSH
10271: CALL_OW 88
// if IsOk ( Cornel ) then
10275: LD_EXP 31
10279: PPUSH
10280: CALL_OW 302
10284: IFFALSE 10298
// Say ( Cornel , D2a-Corn-1 ) ;
10286: LD_EXP 31
10290: PPUSH
10291: LD_STRING D2a-Corn-1
10293: PPUSH
10294: CALL_OW 88
// if IsOk ( Donaldson ) then
10298: LD_EXP 23
10302: PPUSH
10303: CALL_OW 302
10307: IFFALSE 10321
// Say ( Donaldson , D2a-Don-1 ) ;
10309: LD_EXP 23
10313: PPUSH
10314: LD_STRING D2a-Don-1
10316: PPUSH
10317: CALL_OW 88
// if IsOk ( Brown ) then
10321: LD_EXP 27
10325: PPUSH
10326: CALL_OW 302
10330: IFFALSE 10344
// Say ( Brown , D2a-Brown-1 ) ;
10332: LD_EXP 27
10336: PPUSH
10337: LD_STRING D2a-Brown-1
10339: PPUSH
10340: CALL_OW 88
// Wait ( 0 0$30 ) ;
10344: LD_INT 1050
10346: PPUSH
10347: CALL_OW 67
// if IsOk ( Frank ) then
10351: LD_EXP 33
10355: PPUSH
10356: CALL_OW 302
10360: IFFALSE 10626
// begin DialogueOn ;
10362: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
10366: LD_EXP 21
10370: PUSH
10371: LD_EXP 33
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
10384: LD_EXP 33
10388: PPUSH
10389: LD_STRING D3F-Frank-1
10391: PPUSH
10392: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
10396: LD_EXP 21
10400: PPUSH
10401: LD_STRING D3F-JMM-1
10403: PPUSH
10404: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10408: LD_EXP 33
10412: PPUSH
10413: LD_STRING D3F-Frank-2
10415: PPUSH
10416: CALL_OW 88
// case Query ( QFrank ) of 1 :
10420: LD_STRING QFrank
10422: PPUSH
10423: CALL_OW 97
10427: PUSH
10428: LD_INT 1
10430: DOUBLE
10431: EQUAL
10432: IFTRUE 10436
10434: GO 10459
10436: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10437: LD_EXP 21
10441: PPUSH
10442: LD_STRING D3Fa-JMM-1
10444: PPUSH
10445: CALL_OW 88
// us_scout := 1 ;
10449: LD_ADDR_EXP 8
10453: PUSH
10454: LD_INT 1
10456: ST_TO_ADDR
// end ; 2 :
10457: GO 10622
10459: LD_INT 2
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10589
10467: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10468: LD_EXP 21
10472: PPUSH
10473: LD_STRING D3Fb-JMM-1
10475: PPUSH
10476: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10480: LD_EXP 33
10484: PPUSH
10485: LD_STRING D3Fb-Frank-1
10487: PPUSH
10488: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10492: LD_STRING QFrank2
10494: PPUSH
10495: CALL_OW 97
10499: PUSH
10500: LD_INT 1
10502: DOUBLE
10503: EQUAL
10504: IFTRUE 10508
10506: GO 10555
10508: POP
// begin us_scout := 2 ;
10509: LD_ADDR_EXP 8
10513: PUSH
10514: LD_INT 2
10516: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10517: LD_EXP 21
10521: PPUSH
10522: LD_STRING D3Fba-JMM-1
10524: PPUSH
10525: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10529: LD_EXP 33
10533: PPUSH
10534: LD_STRING D3Fba-Frank-1
10536: PPUSH
10537: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10541: LD_EXP 21
10545: PPUSH
10546: LD_STRING D3Fba-JMM-2
10548: PPUSH
10549: CALL_OW 88
// end ; 2 :
10553: GO 10587
10555: LD_INT 2
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10586
10563: POP
// begin us_scout := 0 ;
10564: LD_ADDR_EXP 8
10568: PUSH
10569: LD_INT 0
10571: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10572: LD_EXP 21
10576: PPUSH
10577: LD_STRING D3Fbb-JMM-1
10579: PPUSH
10580: CALL_OW 88
// end ; end ;
10584: GO 10587
10586: POP
// end ; 3 :
10587: GO 10622
10589: LD_INT 3
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10621
10597: POP
// begin us_scout := - 1 ;
10598: LD_ADDR_EXP 8
10602: PUSH
10603: LD_INT 1
10605: NEG
10606: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10607: LD_EXP 21
10611: PPUSH
10612: LD_STRING D3Fc-JMM-1
10614: PPUSH
10615: CALL_OW 88
// end ; end ;
10619: GO 10622
10621: POP
// DialogueOff ;
10622: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10626: LD_EXP 8
10630: PUSH
10631: LD_INT 1
10633: NEG
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: IN
10642: IFFALSE 10646
// exit ;
10644: GO 12293
// if us_scout in [ 1 , 2 ] then
10646: LD_EXP 8
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: IN
10661: IFFALSE 11360
// begin if IsInUnit ( Frank ) then
10663: LD_EXP 33
10667: PPUSH
10668: CALL_OW 310
10672: IFFALSE 10683
// ComExitBuilding ( Frank ) ;
10674: LD_EXP 33
10678: PPUSH
10679: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10683: LD_EXP 33
10687: PPUSH
10688: CALL_OW 311
10692: IFFALSE 10703
// ComExitVehicle ( Frank ) ;
10694: LD_EXP 33
10698: PPUSH
10699: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10703: LD_EXP 33
10707: PPUSH
10708: LD_INT 4
10710: PPUSH
10711: CALL_OW 235
// wait ( 0 0$1 ) ;
10715: LD_INT 35
10717: PPUSH
10718: CALL_OW 67
// if us_scout = 2 then
10722: LD_EXP 8
10726: PUSH
10727: LD_INT 2
10729: EQUAL
10730: IFFALSE 11098
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10732: LD_EXP 33
10736: PPUSH
10737: LD_INT 75
10739: PPUSH
10740: LD_INT 63
10742: PPUSH
10743: CALL_OW 111
// AddComHold ( Frank ) ;
10747: LD_EXP 33
10751: PPUSH
10752: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10756: LD_EXP 33
10760: PPUSH
10761: LD_INT 770
10763: PPUSH
10764: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10768: LD_EXP 33
10772: PPUSH
10773: LD_INT 100
10775: PPUSH
10776: LD_INT 75
10778: PPUSH
10779: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10783: LD_EXP 33
10787: PPUSH
10788: LD_INT 123
10790: PPUSH
10791: LD_INT 103
10793: PPUSH
10794: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10798: LD_EXP 33
10802: PPUSH
10803: LD_INT 138
10805: PPUSH
10806: LD_INT 108
10808: PPUSH
10809: CALL_OW 171
// AddComHold ( Frank ) ;
10813: LD_EXP 33
10817: PPUSH
10818: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10822: LD_INT 35
10824: PPUSH
10825: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10829: LD_EXP 33
10833: PPUSH
10834: LD_INT 138
10836: PPUSH
10837: LD_INT 108
10839: PPUSH
10840: CALL_OW 307
10844: IFFALSE 10822
// AddComMoveXY ( Frank , 125 , 132 ) ;
10846: LD_EXP 33
10850: PPUSH
10851: LD_INT 125
10853: PPUSH
10854: LD_INT 132
10856: PPUSH
10857: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10861: LD_INT 35
10863: PPUSH
10864: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10868: LD_INT 1
10870: PPUSH
10871: LD_EXP 33
10875: PPUSH
10876: CALL_OW 292
10880: PUSH
10881: LD_EXP 33
10885: PPUSH
10886: LD_INT 7
10888: PPUSH
10889: CALL_OW 296
10893: PUSH
10894: LD_INT 7
10896: LESS
10897: OR
10898: IFFALSE 10861
// DialogueOn ;
10900: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10904: LD_EXP 33
10908: PPUSH
10909: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10913: LD_INT 10
10915: PPUSH
10916: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10920: LD_EXP 21
10924: PPUSH
10925: LD_STRING D4Fa-JMM-1
10927: PPUSH
10928: CALL_OW 88
// for i in points do
10932: LD_ADDR_VAR 0 1
10936: PUSH
10937: LD_VAR 0 2
10941: PUSH
10942: FOR_IN
10943: IFFALSE 11001
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10945: LD_VAR 0 1
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 1
10958: PUSH
10959: LD_INT 2
10961: ARRAY
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: LD_INT 20
10968: NEG
10969: PPUSH
10970: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10974: LD_VAR 0 1
10978: PUSH
10979: LD_INT 1
10981: ARRAY
10982: PPUSH
10983: LD_VAR 0 1
10987: PUSH
10988: LD_INT 2
10990: ARRAY
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 331
// end ;
10999: GO 10942
11001: POP
11002: POP
// dwait ( 0 0$0.5 ) ;
11003: LD_INT 18
11005: PPUSH
11006: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11010: LD_INT 42
11012: PPUSH
11013: LD_INT 27
11015: PPUSH
11016: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
11020: LD_EXP 33
11024: PPUSH
11025: LD_STRING D4Fa-Frank-1
11027: PPUSH
11028: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11032: LD_INT 18
11034: PPUSH
11035: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
11039: LD_EXP 21
11043: PPUSH
11044: LD_STRING D4Fa-JMM-2
11046: PPUSH
11047: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
11051: LD_INT 118
11053: PPUSH
11054: LD_INT 80
11056: PPUSH
11057: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
11061: LD_EXP 33
11065: PPUSH
11066: LD_STRING D4Fa-Frank-2
11068: PPUSH
11069: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11073: LD_INT 10
11075: PPUSH
11076: CALL_OW 68
// DialogueOff ;
11080: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11084: LD_EXP 33
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 235
// end else
11096: GO 11360
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11098: LD_INT 2
11100: PPUSH
11101: LD_INT 4
11103: PPUSH
11104: LD_INT 2
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
11114: LD_EXP 33
11118: PPUSH
11119: LD_INT 75
11121: PPUSH
11122: LD_INT 63
11124: PPUSH
11125: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
11129: LD_EXP 33
11133: PPUSH
11134: LD_INT 175
11136: PPUSH
11137: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
11141: LD_EXP 33
11145: PPUSH
11146: LD_INT 102
11148: PPUSH
11149: LD_INT 76
11151: PPUSH
11152: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
11156: LD_EXP 33
11160: PPUSH
11161: LD_INT 108
11163: PPUSH
11164: LD_INT 70
11166: PPUSH
11167: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11171: LD_INT 35
11173: PPUSH
11174: CALL_OW 67
// until See ( 2 , Frank ) ;
11178: LD_INT 2
11180: PPUSH
11181: LD_EXP 33
11185: PPUSH
11186: CALL_OW 292
11190: IFFALSE 11171
// ComMoveXY ( Frank , 112 , 118 ) ;
11192: LD_EXP 33
11196: PPUSH
11197: LD_INT 112
11199: PPUSH
11200: LD_INT 118
11202: PPUSH
11203: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
11207: LD_EXP 33
11211: PPUSH
11212: CALL_OW 256
11216: PUSH
11217: LD_INT 750
11219: GREATEREQUAL
11220: IFFALSE 11234
// SetLives ( Frank , 700 ) ;
11222: LD_EXP 33
11226: PPUSH
11227: LD_INT 700
11229: PPUSH
11230: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11234: LD_INT 35
11236: PPUSH
11237: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
11241: LD_INT 1
11243: PPUSH
11244: LD_EXP 33
11248: PPUSH
11249: CALL_OW 292
11253: PUSH
11254: LD_EXP 33
11258: PPUSH
11259: LD_INT 7
11261: PPUSH
11262: CALL_OW 296
11266: PUSH
11267: LD_INT 17
11269: LESS
11270: OR
11271: IFFALSE 11234
// DialogueOn ;
11273: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
11277: LD_EXP 33
11281: PPUSH
11282: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
11286: LD_EXP 33
11290: PPUSH
11291: LD_STRING D4Fb-Frank-1
11293: PPUSH
11294: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
11298: LD_EXP 21
11302: PPUSH
11303: LD_STRING D4Fb-JMM-1
11305: PPUSH
11306: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
11310: LD_INT 2
11312: PPUSH
11313: LD_STRING D4Fb-FSci1-1
11315: PPUSH
11316: CALL 16197 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
11320: LD_EXP 33
11324: PPUSH
11325: LD_STRING D4Fb-Frank-2
11327: PPUSH
11328: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
11332: LD_EXP 21
11336: PPUSH
11337: LD_STRING D4Fb-JMM-2
11339: PPUSH
11340: CALL_OW 88
// DialogueOff ;
11344: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11348: LD_EXP 33
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
11360: LD_EXP 34
11364: PPUSH
11365: CALL_OW 302
11369: PUSH
11370: LD_EXP 33
11374: NOT
11375: AND
11376: IFFALSE 11524
// begin DialogueOn ;
11378: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
11382: LD_EXP 21
11386: PUSH
11387: LD_EXP 34
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PPUSH
11396: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11400: LD_EXP 34
11404: PPUSH
11405: LD_STRING D3Y-Yam-1
11407: PPUSH
11408: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11412: LD_EXP 21
11416: PPUSH
11417: LD_STRING D3Y-JMM-1
11419: PPUSH
11420: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11424: LD_EXP 34
11428: PPUSH
11429: LD_STRING D3Y-Yam-2
11431: PPUSH
11432: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11436: LD_STRING QYamoko
11438: PPUSH
11439: CALL_OW 97
11443: PUSH
11444: LD_INT 1
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11487
11452: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11453: LD_EXP 21
11457: PPUSH
11458: LD_STRING D3Ya-JMM-1
11460: PPUSH
11461: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11465: LD_EXP 34
11469: PPUSH
11470: LD_STRING D3Ya-Yam-1
11472: PPUSH
11473: CALL_OW 88
// us_scout := 1 ;
11477: LD_ADDR_EXP 8
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// end ; 2 :
11485: GO 11520
11487: LD_INT 2
11489: DOUBLE
11490: EQUAL
11491: IFTRUE 11495
11493: GO 11519
11495: POP
// begin us_scout := - 1 ;
11496: LD_ADDR_EXP 8
11500: PUSH
11501: LD_INT 1
11503: NEG
11504: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11505: LD_EXP 21
11509: PPUSH
11510: LD_STRING D3Yb-JMM-1
11512: PPUSH
11513: CALL_OW 88
// end ; end ;
11517: GO 11520
11519: POP
// DialogueOff ;
11520: CALL_OW 7
// end ; if Frank then
11524: LD_EXP 33
11528: IFFALSE 11532
// exit ;
11530: GO 12293
// if us_scout in [ - 1 , 0 ] then
11532: LD_EXP 8
11536: PUSH
11537: LD_INT 1
11539: NEG
11540: PUSH
11541: LD_INT 0
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: IN
11548: IFFALSE 11552
// exit ;
11550: GO 12293
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11552: LD_ADDR_EXP 8
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: LD_INT 1
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_OWVAR 67
11575: ARRAY
11576: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11577: LD_EXP 8
11581: PUSH
11582: LD_INT 1
11584: PUSH
11585: LD_INT 2
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: IN
11592: IFFALSE 12293
// begin if IsInUnit ( Kikuchi ) then
11594: LD_EXP 34
11598: PPUSH
11599: CALL_OW 310
11603: IFFALSE 11614
// ComExitBuilding ( Kikuchi ) ;
11605: LD_EXP 34
11609: PPUSH
11610: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11614: LD_EXP 34
11618: PPUSH
11619: CALL_OW 311
11623: IFFALSE 11634
// ComExitVehicle ( Kikuchi ) ;
11625: LD_EXP 34
11629: PPUSH
11630: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_INT 4
11641: PPUSH
11642: CALL_OW 235
// wait ( 0 0$1 ) ;
11646: LD_INT 35
11648: PPUSH
11649: CALL_OW 67
// if us_scout = 2 then
11653: LD_EXP 8
11657: PUSH
11658: LD_INT 2
11660: EQUAL
11661: IFFALSE 12041
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11663: LD_EXP 34
11667: PPUSH
11668: LD_INT 75
11670: PPUSH
11671: LD_INT 63
11673: PPUSH
11674: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11678: LD_EXP 34
11682: PPUSH
11683: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11687: LD_EXP 34
11691: PPUSH
11692: LD_INT 770
11694: PPUSH
11695: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11699: LD_EXP 34
11703: PPUSH
11704: LD_INT 100
11706: PPUSH
11707: LD_INT 75
11709: PPUSH
11710: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11714: LD_EXP 34
11718: PPUSH
11719: LD_INT 123
11721: PPUSH
11722: LD_INT 103
11724: PPUSH
11725: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11729: LD_EXP 34
11733: PPUSH
11734: LD_INT 138
11736: PPUSH
11737: LD_INT 108
11739: PPUSH
11740: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11744: LD_EXP 34
11748: PPUSH
11749: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11753: LD_INT 35
11755: PPUSH
11756: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11760: LD_EXP 34
11764: PPUSH
11765: LD_INT 138
11767: PPUSH
11768: LD_INT 108
11770: PPUSH
11771: CALL_OW 307
11775: IFFALSE 11753
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11777: LD_EXP 34
11781: PPUSH
11782: LD_INT 125
11784: PPUSH
11785: LD_INT 132
11787: PPUSH
11788: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11792: LD_INT 35
11794: PPUSH
11795: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11799: LD_INT 1
11801: PPUSH
11802: LD_EXP 34
11806: PPUSH
11807: CALL_OW 292
11811: PUSH
11812: LD_EXP 34
11816: PPUSH
11817: LD_INT 7
11819: PPUSH
11820: CALL_OW 296
11824: PUSH
11825: LD_INT 7
11827: LESS
11828: OR
11829: IFFALSE 11792
// DialogueOn ;
11831: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11835: LD_EXP 34
11839: PPUSH
11840: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11851: LD_EXP 34
11855: PPUSH
11856: LD_STRING D4Ya-Yam-1
11858: PPUSH
11859: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11863: LD_EXP 21
11867: PPUSH
11868: LD_STRING D4Ya-JMM-1
11870: PPUSH
11871: CALL_OW 88
// for i in points do
11875: LD_ADDR_VAR 0 1
11879: PUSH
11880: LD_VAR 0 2
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11944
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11888: LD_VAR 0 1
11892: PUSH
11893: LD_INT 1
11895: ARRAY
11896: PPUSH
11897: LD_VAR 0 1
11901: PUSH
11902: LD_INT 2
11904: ARRAY
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: LD_INT 20
11911: NEG
11912: PPUSH
11913: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11917: LD_VAR 0 1
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 2
11933: ARRAY
11934: PPUSH
11935: LD_INT 1
11937: PPUSH
11938: CALL_OW 331
// end ;
11942: GO 11885
11944: POP
11945: POP
// dwait ( 0 0$0.5 ) ;
11946: LD_INT 18
11948: PPUSH
11949: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11953: LD_INT 42
11955: PPUSH
11956: LD_INT 27
11958: PPUSH
11959: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11963: LD_EXP 34
11967: PPUSH
11968: LD_STRING D4Ya-Yam-2
11970: PPUSH
11971: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11975: LD_INT 18
11977: PPUSH
11978: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11982: LD_INT 118
11984: PPUSH
11985: LD_INT 80
11987: PPUSH
11988: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11992: LD_EXP 21
11996: PPUSH
11997: LD_STRING D4Ya-JMM-2
11999: PPUSH
12000: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
12004: LD_EXP 34
12008: PPUSH
12009: LD_STRING D4Ya-Yam-3
12011: PPUSH
12012: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
12016: LD_INT 10
12018: PPUSH
12019: CALL_OW 68
// DialogueOff ;
12023: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
12027: LD_EXP 34
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 235
// end else
12039: GO 12293
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
12041: LD_INT 2
12043: PPUSH
12044: LD_INT 4
12046: PPUSH
12047: LD_INT 2
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
12057: LD_EXP 34
12061: PPUSH
12062: LD_INT 75
12064: PPUSH
12065: LD_INT 63
12067: PPUSH
12068: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
12072: LD_EXP 34
12076: PPUSH
12077: LD_INT 175
12079: PPUSH
12080: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
12084: LD_EXP 34
12088: PPUSH
12089: LD_INT 102
12091: PPUSH
12092: LD_INT 76
12094: PPUSH
12095: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
12099: LD_EXP 34
12103: PPUSH
12104: LD_INT 108
12106: PPUSH
12107: LD_INT 70
12109: PPUSH
12110: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
12114: LD_INT 35
12116: PPUSH
12117: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
12121: LD_INT 2
12123: PPUSH
12124: LD_EXP 34
12128: PPUSH
12129: CALL_OW 292
12133: IFFALSE 12114
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
12135: LD_EXP 34
12139: PPUSH
12140: LD_INT 112
12142: PPUSH
12143: LD_INT 118
12145: PPUSH
12146: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
12150: LD_EXP 34
12154: PPUSH
12155: CALL_OW 256
12159: PUSH
12160: LD_INT 750
12162: GREATEREQUAL
12163: IFFALSE 12177
// SetLives ( Kikuchi , 700 ) ;
12165: LD_EXP 34
12169: PPUSH
12170: LD_INT 700
12172: PPUSH
12173: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
12177: LD_INT 35
12179: PPUSH
12180: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
12184: LD_INT 1
12186: PPUSH
12187: LD_EXP 34
12191: PPUSH
12192: CALL_OW 292
12196: PUSH
12197: LD_EXP 34
12201: PPUSH
12202: LD_INT 7
12204: PPUSH
12205: CALL_OW 296
12209: PUSH
12210: LD_INT 17
12212: LESS
12213: OR
12214: IFFALSE 12177
// DialogueOn ;
12216: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
12220: LD_EXP 34
12224: PPUSH
12225: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
12229: LD_EXP 34
12233: PPUSH
12234: LD_STRING D4Yb-Yam-1
12236: PPUSH
12237: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
12241: LD_EXP 21
12245: PPUSH
12246: LD_STRING D4Yb-JMM-1
12248: PPUSH
12249: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
12253: LD_EXP 34
12257: PPUSH
12258: LD_STRING D4Yb-Yam-2
12260: PPUSH
12261: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
12265: LD_EXP 21
12269: PPUSH
12270: LD_STRING D4Yb-JMM-2
12272: PPUSH
12273: CALL_OW 88
// DialogueOff ;
12277: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
12281: LD_EXP 34
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: CALL_OW 235
// end ; end ; end ;
12293: PPOPN 2
12295: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
12296: LD_EXP 6
12300: IFFALSE 13333
12302: GO 12304
12304: DISABLE
12305: LD_INT 0
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
// begin enable ;
12311: ENABLE
// if not seen [ 1 ] then
12312: LD_EXP 9
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: NOT
12321: IFFALSE 12501
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
12323: LD_ADDR_VAR 0 2
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 11
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 33
12353: PUSH
12354: LD_INT 4
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: ST_TO_ADDR
// if tmp then
12375: LD_VAR 0 2
12379: IFFALSE 12501
// for i in tmp do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_VAR 0 2
12390: PUSH
12391: FOR_IN
12392: IFFALSE 12499
// if See ( 1 , i ) then
12394: LD_INT 1
12396: PPUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 292
12406: IFFALSE 12497
// begin seen := Replace ( seen , 1 , true ) ;
12408: LD_ADDR_EXP 9
12412: PUSH
12413: LD_EXP 9
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: LD_INT 1
12423: PPUSH
12424: CALL_OW 1
12428: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12429: LD_INT 1
12431: PPUSH
12432: CALL 16019 0 1
12436: IFFALSE 12497
// begin DialogueOn ;
12438: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12442: LD_VAR 0 1
12446: PPUSH
12447: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12451: LD_INT 10
12453: PPUSH
12454: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12458: LD_ADDR_VAR 0 3
12462: PUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_STRING D5a-Sol2-1
12468: PPUSH
12469: CALL 16197 0 2
12473: ST_TO_ADDR
// if not un then
12474: LD_VAR 0 3
12478: NOT
12479: IFFALSE 12491
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12481: LD_INT 2
12483: PPUSH
12484: LD_STRING D5a-FSol2-1
12486: PPUSH
12487: CALL 16197 0 2
// DialogueOff ;
12491: CALL_OW 7
// break ;
12495: GO 12499
// end ; end ;
12497: GO 12391
12499: POP
12500: POP
// end ; if not seen [ 2 ] then
12501: LD_EXP 9
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: NOT
12510: IFFALSE 12735
// begin can_kamikazed := true ;
12512: LD_ADDR_EXP 10
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12520: LD_ADDR_VAR 0 2
12524: PUSH
12525: LD_INT 22
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 25
12537: PUSH
12538: LD_INT 17
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: ST_TO_ADDR
// if tmp then
12554: LD_VAR 0 2
12558: IFFALSE 12735
// for i in tmp do
12560: LD_ADDR_VAR 0 1
12564: PUSH
12565: LD_VAR 0 2
12569: PUSH
12570: FOR_IN
12571: IFFALSE 12733
// if See ( 1 , i ) then
12573: LD_INT 1
12575: PPUSH
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 292
12585: IFFALSE 12731
// begin seen := Replace ( seen , 2 , true ) ;
12587: LD_ADDR_EXP 9
12591: PUSH
12592: LD_EXP 9
12596: PPUSH
12597: LD_INT 2
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 1
12607: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12608: LD_INT 1
12610: PPUSH
12611: CALL 16019 0 1
12615: IFFALSE 12731
// begin DialogueOn ;
12617: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12630: LD_INT 10
12632: PPUSH
12633: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12637: LD_ADDR_VAR 0 3
12641: PUSH
12642: LD_INT 1
12644: PPUSH
12645: LD_STRING D5b-Sol1-1
12647: PPUSH
12648: CALL 16197 0 2
12652: ST_TO_ADDR
// if not un then
12653: LD_VAR 0 3
12657: NOT
12658: IFFALSE 12676
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12660: LD_ADDR_VAR 0 3
12664: PUSH
12665: LD_INT 2
12667: PPUSH
12668: LD_STRING D5b-FSol1-1
12670: PPUSH
12671: CALL 16197 0 2
12675: ST_TO_ADDR
// if un then
12676: LD_VAR 0 3
12680: IFFALSE 12725
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12682: LD_ADDR_VAR 0 4
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_STRING D5b-Sol2-1
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: CALL 16423 0 3
12702: ST_TO_ADDR
// if not un2 then
12703: LD_VAR 0 4
12707: NOT
12708: IFFALSE 12725
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12710: LD_INT 2
12712: PPUSH
12713: LD_STRING D5b-FSol2-1
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL 16423 0 3
// end ; DialogueOff ;
12725: CALL_OW 7
// break ;
12729: GO 12733
// end ; end ;
12731: GO 12570
12733: POP
12734: POP
// end ; if not seen [ 3 ] then
12735: LD_EXP 9
12739: PUSH
12740: LD_INT 3
12742: ARRAY
12743: NOT
12744: IFFALSE 12918
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12746: LD_ADDR_VAR 0 2
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 33
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: ST_TO_ADDR
// if tmp then
12780: LD_VAR 0 2
12784: IFFALSE 12918
// for i in tmp do
12786: LD_ADDR_VAR 0 1
12790: PUSH
12791: LD_VAR 0 2
12795: PUSH
12796: FOR_IN
12797: IFFALSE 12916
// if See ( 1 , i ) then
12799: LD_INT 1
12801: PPUSH
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 292
12811: IFFALSE 12914
// begin seen := Replace ( seen , 3 , true ) ;
12813: LD_ADDR_EXP 9
12817: PUSH
12818: LD_EXP 9
12822: PPUSH
12823: LD_INT 3
12825: PPUSH
12826: LD_INT 1
12828: PPUSH
12829: CALL_OW 1
12833: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12834: LD_INT 1
12836: PPUSH
12837: CALL 16019 0 1
12841: IFFALSE 12914
// begin DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12847: LD_VAR 0 1
12851: PPUSH
12852: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12856: LD_INT 10
12858: PPUSH
12859: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12863: LD_ADDR_VAR 0 3
12867: PUSH
12868: LD_INT 1
12870: PPUSH
12871: LD_STRING D8-Sol1-1
12873: PPUSH
12874: CALL 16197 0 2
12878: ST_TO_ADDR
// if not un then
12879: LD_VAR 0 3
12883: NOT
12884: IFFALSE 12896
// SayRand ( sex_female , D8-FSol1-1 ) ;
12886: LD_INT 2
12888: PPUSH
12889: LD_STRING D8-FSol1-1
12891: PPUSH
12892: CALL 16197 0 2
// Say ( JMM , D8-JMM-1 ) ;
12896: LD_EXP 21
12900: PPUSH
12901: LD_STRING D8-JMM-1
12903: PPUSH
12904: CALL_OW 88
// DialogueOff ;
12908: CALL_OW 7
// break ;
12912: GO 12916
// end ; end ;
12914: GO 12796
12916: POP
12917: POP
// end ; if not seen [ 4 ] then
12918: LD_EXP 9
12922: PUSH
12923: LD_INT 4
12925: ARRAY
12926: NOT
12927: IFFALSE 13089
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 33
12946: PUSH
12947: LD_INT 5
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 69
12962: ST_TO_ADDR
// if tmp then
12963: LD_VAR 0 2
12967: IFFALSE 13089
// for i in tmp do
12969: LD_ADDR_VAR 0 1
12973: PUSH
12974: LD_VAR 0 2
12978: PUSH
12979: FOR_IN
12980: IFFALSE 13087
// if See ( 1 , i ) then
12982: LD_INT 1
12984: PPUSH
12985: LD_VAR 0 1
12989: PPUSH
12990: CALL_OW 292
12994: IFFALSE 13085
// begin seen := Replace ( seen , 4 , true ) ;
12996: LD_ADDR_EXP 9
13000: PUSH
13001: LD_EXP 9
13005: PPUSH
13006: LD_INT 4
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 1
13016: ST_TO_ADDR
// if CanSayRand ( 1 ) then
13017: LD_INT 1
13019: PPUSH
13020: CALL 16019 0 1
13024: IFFALSE 13085
// begin DialogueOn ;
13026: CALL_OW 6
// CenterNowOnUnits ( i ) ;
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
13039: LD_INT 10
13041: PPUSH
13042: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
13046: LD_ADDR_VAR 0 3
13050: PUSH
13051: LD_INT 1
13053: PPUSH
13054: LD_STRING D5a-Sol1-1
13056: PPUSH
13057: CALL 16197 0 2
13061: ST_TO_ADDR
// if not un then
13062: LD_VAR 0 3
13066: NOT
13067: IFFALSE 13079
// SayRand ( sex_female , D5a-FSol1-1 ) ;
13069: LD_INT 2
13071: PPUSH
13072: LD_STRING D5a-FSol1-1
13074: PPUSH
13075: CALL 16197 0 2
// DialogueOff ;
13079: CALL_OW 7
// break ;
13083: GO 13087
// end ; end ;
13085: GO 12979
13087: POP
13088: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
13089: LD_EXP 9
13093: PUSH
13094: LD_INT 5
13096: ARRAY
13097: NOT
13098: PUSH
13099: LD_EXP 9
13103: PUSH
13104: LD_INT 3
13106: ARRAY
13107: AND
13108: IFFALSE 13282
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
13110: LD_ADDR_VAR 0 2
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 34
13127: PUSH
13128: LD_INT 31
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 69
13143: ST_TO_ADDR
// if tmp then
13144: LD_VAR 0 2
13148: IFFALSE 13282
// for i in tmp do
13150: LD_ADDR_VAR 0 1
13154: PUSH
13155: LD_VAR 0 2
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13280
// if See ( 1 , i ) then
13163: LD_INT 1
13165: PPUSH
13166: LD_VAR 0 1
13170: PPUSH
13171: CALL_OW 292
13175: IFFALSE 13278
// begin seen := Replace ( seen , 5 , true ) ;
13177: LD_ADDR_EXP 9
13181: PUSH
13182: LD_EXP 9
13186: PPUSH
13187: LD_INT 5
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 1
13197: ST_TO_ADDR
// if CanSayRand ( 1 ) then
13198: LD_INT 1
13200: PPUSH
13201: CALL 16019 0 1
13205: IFFALSE 13278
// begin DialogueOn ;
13207: CALL_OW 6
// CenterNowOnUnits ( i ) ;
13211: LD_VAR 0 1
13215: PPUSH
13216: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
13220: LD_INT 10
13222: PPUSH
13223: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: LD_INT 1
13234: PPUSH
13235: LD_STRING D8a-Sol2-1
13237: PPUSH
13238: CALL 16197 0 2
13242: ST_TO_ADDR
// if not un then
13243: LD_VAR 0 3
13247: NOT
13248: IFFALSE 13260
// SayRand ( sex_female , D8a-FSol2-1 ) ;
13250: LD_INT 2
13252: PPUSH
13253: LD_STRING D8a-FSol2-1
13255: PPUSH
13256: CALL 16197 0 2
// Say ( JMM , D8a-JMM-1 ) ;
13260: LD_EXP 21
13264: PPUSH
13265: LD_STRING D8a-JMM-1
13267: PPUSH
13268: CALL_OW 88
// DialogueOff ;
13272: CALL_OW 7
// break ;
13276: GO 13280
// end ; end ;
13278: GO 13160
13280: POP
13281: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
13282: LD_EXP 9
13286: PUSH
13287: LD_INT 1
13289: ARRAY
13290: PUSH
13291: LD_EXP 9
13295: PUSH
13296: LD_INT 2
13298: ARRAY
13299: AND
13300: PUSH
13301: LD_EXP 9
13305: PUSH
13306: LD_INT 3
13308: ARRAY
13309: AND
13310: PUSH
13311: LD_EXP 9
13315: PUSH
13316: LD_INT 4
13318: ARRAY
13319: AND
13320: PUSH
13321: LD_EXP 9
13325: PUSH
13326: LD_INT 5
13328: ARRAY
13329: AND
13330: IFFALSE 13333
// disable ;
13332: DISABLE
// end ;
13333: PPOPN 4
13335: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
13336: LD_EXP 10
13340: PUSH
13341: LD_EXP 11
13345: AND
13346: IFFALSE 13544
13348: GO 13350
13350: DISABLE
13351: LD_INT 0
13353: PPUSH
// begin DialogueOn ;
13354: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
13358: LD_EXP 11
13362: PPUSH
13363: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
13367: LD_ADDR_VAR 0 1
13371: PUSH
13372: LD_INT 1
13374: PPUSH
13375: LD_STRING D5c-Sol1-1
13377: PPUSH
13378: CALL 16197 0 2
13382: ST_TO_ADDR
// if not un then
13383: LD_VAR 0 1
13387: NOT
13388: IFFALSE 13406
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_INT 2
13397: PPUSH
13398: LD_STRING D5c-FSol1-1
13400: PPUSH
13401: CALL 16197 0 2
13405: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13406: LD_EXP 21
13410: PPUSH
13411: LD_STRING D5c-JMM-1
13413: PPUSH
13414: CALL_OW 88
// if IsOk ( Lisa ) then
13418: LD_EXP 22
13422: PPUSH
13423: CALL_OW 302
13427: IFFALSE 13443
// Say ( Lisa , D5d-Lisa-1 ) else
13429: LD_EXP 22
13433: PPUSH
13434: LD_STRING D5d-Lisa-1
13436: PPUSH
13437: CALL_OW 88
13441: GO 13528
// if IsOk ( Cyrus ) then
13443: LD_EXP 25
13447: PPUSH
13448: CALL_OW 302
13452: IFFALSE 13468
// Say ( Cyrus , D5d-Cyrus-1 ) else
13454: LD_EXP 25
13458: PPUSH
13459: LD_STRING D5d-Cyrus-1
13461: PPUSH
13462: CALL_OW 88
13466: GO 13528
// if IsOk ( Gary ) then
13468: LD_EXP 32
13472: PPUSH
13473: CALL_OW 302
13477: IFFALSE 13493
// Say ( Gary , D5d-Gary-1 ) else
13479: LD_EXP 32
13483: PPUSH
13484: LD_STRING D5d-Gary-1
13486: PPUSH
13487: CALL_OW 88
13491: GO 13528
// if GetSex ( un ) = sex_male then
13493: LD_VAR 0 1
13497: PPUSH
13498: CALL_OW 258
13502: PUSH
13503: LD_INT 1
13505: EQUAL
13506: IFFALSE 13522
// Say ( un , D5d-Sol1-1 ) else
13508: LD_VAR 0 1
13512: PPUSH
13513: LD_STRING D5d-Sol1-1
13515: PPUSH
13516: CALL_OW 88
13520: GO 13528
// begin DialogueOff ;
13522: CALL_OW 7
// exit ;
13526: GO 13544
// end ; Say ( JMM , D5d-JMM-1 ) ;
13528: LD_EXP 21
13532: PPUSH
13533: LD_STRING D5d-JMM-1
13535: PPUSH
13536: CALL_OW 88
// DialogueOff ;
13540: CALL_OW 7
// end ;
13544: PPOPN 1
13546: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13547: LD_INT 1
13549: PPUSH
13550: LD_INT 17
13552: PPUSH
13553: CALL_OW 294
13557: PUSH
13558: LD_INT 2
13560: GREATEREQUAL
13561: IFFALSE 13682
13563: GO 13565
13565: DISABLE
13566: LD_INT 0
13568: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13569: LD_INT 10
13571: PPUSH
13572: LD_INT 5
13574: PPUSH
13575: LD_INT 1
13577: PPUSH
13578: LD_INT 10
13580: NEG
13581: PPUSH
13582: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13586: LD_INT 10
13588: PPUSH
13589: LD_INT 5
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13599: LD_INT 10
13601: PPUSH
13602: LD_INT 5
13604: PPUSH
13605: CALL_OW 86
// DialogueOn ;
13609: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13613: LD_ADDR_VAR 0 1
13617: PUSH
13618: LD_INT 1
13620: PPUSH
13621: LD_STRING D6-Sci1-1
13623: PPUSH
13624: CALL 16197 0 2
13628: ST_TO_ADDR
// if un then
13629: LD_VAR 0 1
13633: IFFALSE 13671
// begin Say ( JMM , D6-JMM-1 ) ;
13635: LD_EXP 21
13639: PPUSH
13640: LD_STRING D6-JMM-1
13642: PPUSH
13643: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: LD_STRING D6-Sci1-2
13654: PPUSH
13655: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13659: LD_EXP 21
13663: PPUSH
13664: LD_STRING D6-JMM-2
13666: PPUSH
13667: CALL_OW 88
// end ; DialogueOff ;
13671: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13675: LD_STRING M3
13677: PPUSH
13678: CALL_OW 337
// end ;
13682: PPOPN 1
13684: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp , escaped ;
13685: LD_OWVAR 1
13689: PUSH
13690: LD_INT 42000
13692: GREATEREQUAL
13693: PUSH
13694: LD_INT 2
13696: PPUSH
13697: LD_INT 169
13699: PPUSH
13700: LD_INT 90
13702: PPUSH
13703: LD_INT 10
13705: PPUSH
13706: CALL 55554 0 4
13710: PUSH
13711: LD_INT 4
13713: ARRAY
13714: PUSH
13715: LD_INT 0
13717: EQUAL
13718: PUSH
13719: LD_INT 45
13721: PPUSH
13722: CALL_OW 301
13726: OR
13727: PUSH
13728: LD_INT 45
13730: PPUSH
13731: CALL_OW 255
13735: PUSH
13736: LD_INT 1
13738: EQUAL
13739: OR
13740: AND
13741: PUSH
13742: LD_INT 94
13744: PPUSH
13745: CALL_OW 301
13749: NOT
13750: AND
13751: IFFALSE 14956
13753: GO 13755
13755: DISABLE
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
// begin uc_side := 5 ;
13763: LD_ADDR_OWVAR 20
13767: PUSH
13768: LD_INT 5
13770: ST_TO_ADDR
// uc_nation := 2 ;
13771: LD_ADDR_OWVAR 21
13775: PUSH
13776: LD_INT 2
13778: ST_TO_ADDR
// InitHc ;
13779: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13783: LD_INT 1
13785: PPUSH
13786: LD_INT 3
13788: PPUSH
13789: LD_INT 8
13791: PPUSH
13792: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13796: LD_ADDR_OWVAR 29
13800: PUSH
13801: LD_INT 12
13803: PUSH
13804: LD_INT 12
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// hc_name := Hans Felige ;
13811: LD_ADDR_OWVAR 26
13815: PUSH
13816: LD_STRING Hans Felige
13818: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13819: LD_ADDR_OWVAR 33
13823: PUSH
13824: LD_STRING SecondCharsGal
13826: ST_TO_ADDR
// hc_face_number := 7 ;
13827: LD_ADDR_OWVAR 34
13831: PUSH
13832: LD_INT 7
13834: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13835: LD_ADDR_EXP 46
13839: PUSH
13840: CALL_OW 44
13844: ST_TO_ADDR
// InitHc ;
13845: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13849: LD_INT 1
13851: PPUSH
13852: LD_INT 16
13854: PPUSH
13855: LD_INT 2
13857: PPUSH
13858: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13862: LD_ADDR_OWVAR 29
13866: PUSH
13867: LD_INT 12
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: ST_TO_ADDR
// hc_name :=  ;
13877: LD_ADDR_OWVAR 26
13881: PUSH
13882: LD_STRING 
13884: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13885: LD_ADDR_EXP 47
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// InitHc ;
13895: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13899: LD_INT 35
13901: PPUSH
13902: CALL_OW 67
// until not InBattle ( 1 ) ;
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 463
13913: NOT
13914: IFFALSE 13899
// wait ( 0 0$5 ) ;
13916: LD_INT 175
13918: PPUSH
13919: CALL_OW 67
// DialogueOn ;
13923: CALL_OW 6
// InGameOn ;
13927: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 1
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: LD_INT 25
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 25
13961: PUSH
13962: LD_INT 2
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 25
13971: PUSH
13972: LD_INT 3
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 25
13981: PUSH
13982: LD_INT 4
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 25
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 8
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: PUSH
14027: LD_EXP 21
14031: PUSH
14032: LD_EXP 22
14036: PUSH
14037: LD_EXP 23
14041: PUSH
14042: LD_EXP 24
14046: PUSH
14047: LD_EXP 25
14051: PUSH
14052: LD_EXP 26
14056: PUSH
14057: LD_EXP 27
14061: PUSH
14062: LD_EXP 28
14066: PUSH
14067: LD_EXP 29
14071: PUSH
14072: LD_EXP 31
14076: PUSH
14077: LD_EXP 32
14081: PUSH
14082: LD_EXP 33
14086: PUSH
14087: LD_EXP 34
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: DIFF
14107: PPUSH
14108: LD_INT 26
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PPUSH
14118: CALL_OW 72
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: ST_TO_ADDR
// if Brown then
14127: LD_EXP 27
14131: IFFALSE 14143
// un := Brown ;
14133: LD_ADDR_VAR 0 1
14137: PUSH
14138: LD_EXP 27
14142: ST_TO_ADDR
// if un then
14143: LD_VAR 0 1
14147: IFFALSE 14173
// begin Say ( un , D7-Sol1-1 ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_STRING D7-Sol1-1
14156: PPUSH
14157: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14161: LD_EXP 21
14165: PPUSH
14166: LD_STRING D7-JMM-1
14168: PPUSH
14169: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
14173: LD_EXP 46
14177: PPUSH
14178: LD_STRING D7-Ar1-1
14180: PPUSH
14181: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
14185: LD_EXP 21
14189: PPUSH
14190: LD_STRING D7-JMM-2
14192: PPUSH
14193: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
14197: LD_EXP 46
14201: PPUSH
14202: LD_STRING D7-Ar1-2
14204: PPUSH
14205: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
14209: LD_EXP 21
14213: PPUSH
14214: LD_STRING D7-JMM-3
14216: PPUSH
14217: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
14221: LD_EXP 46
14225: PPUSH
14226: LD_STRING D7-Ar1-3
14228: PPUSH
14229: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
14233: LD_EXP 21
14237: PPUSH
14238: LD_STRING D7-JMM-4
14240: PPUSH
14241: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
14245: LD_EXP 46
14249: PPUSH
14250: LD_STRING D7-Ar1-4
14252: PPUSH
14253: CALL_OW 94
// InGameOff ;
14257: CALL_OW 9
// DialogueOff ;
14261: CALL_OW 7
// case Query ( QCameras ) of 1 :
14265: LD_STRING QCameras
14267: PPUSH
14268: CALL_OW 97
14272: PUSH
14273: LD_INT 1
14275: DOUBLE
14276: EQUAL
14277: IFTRUE 14281
14279: GO 14284
14281: POP
// ; 2 :
14282: GO 14298
14284: LD_INT 2
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14297
14292: POP
// exit ; end ;
14293: GO 14956
14295: GO 14298
14297: POP
// ChangeMissionObjectives ( MCar ) ;
14298: LD_STRING MCar
14300: PPUSH
14301: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
14305: LD_INT 124
14307: PPUSH
14308: LD_INT 90
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_INT 6
14316: NEG
14317: PPUSH
14318: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
14322: LD_INT 124
14324: PPUSH
14325: LD_INT 90
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
14335: LD_INT 12
14337: PPUSH
14338: LD_INT 1
14340: PPUSH
14341: CALL_OW 424
// wait ( 3 ) ;
14345: LD_INT 3
14347: PPUSH
14348: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
14352: LD_INT 124
14354: PPUSH
14355: LD_INT 90
14357: PPUSH
14358: CALL_OW 86
// cargo := false ;
14362: LD_ADDR_VAR 0 3
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14370: LD_INT 35
14372: PPUSH
14373: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
14377: LD_ADDR_VAR 0 3
14381: PUSH
14382: LD_INT 12
14384: PPUSH
14385: LD_INT 32
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 32
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 58
14407: PUSH
14408: EMPTY
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 70
14420: ST_TO_ADDR
// until cargo ;
14421: LD_VAR 0 3
14425: IFFALSE 14370
// cargo := cargo [ 1 ] ;
14427: LD_ADDR_VAR 0 3
14431: PUSH
14432: LD_VAR 0 3
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14441: LD_VAR 0 3
14445: PPUSH
14446: LD_INT 5
14448: PPUSH
14449: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14453: LD_INT 12
14455: PPUSH
14456: LD_INT 0
14458: PPUSH
14459: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14463: LD_EXP 46
14467: PPUSH
14468: LD_INT 11
14470: PPUSH
14471: LD_INT 0
14473: PPUSH
14474: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14478: LD_EXP 47
14482: PPUSH
14483: LD_INT 11
14485: PPUSH
14486: LD_INT 0
14488: PPUSH
14489: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14493: LD_EXP 46
14497: PUSH
14498: LD_EXP 47
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: LD_INT 12
14509: PPUSH
14510: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14514: LD_EXP 46
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14528: LD_EXP 46
14532: PUSH
14533: LD_EXP 47
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: LD_INT 209
14544: PPUSH
14545: LD_INT 178
14547: PPUSH
14548: CALL_OW 171
// escaped := 0 ;
14552: LD_ADDR_VAR 0 5
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// while ( true ) do
14560: LD_INT 1
14562: IFFALSE 14778
// begin wait ( 0 0$1 ) ;
14564: LD_INT 35
14566: PPUSH
14567: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14571: LD_EXP 46
14575: PPUSH
14576: CALL_OW 314
14580: NOT
14581: PUSH
14582: LD_EXP 47
14586: PPUSH
14587: CALL_OW 314
14591: NOT
14592: OR
14593: IFFALSE 14619
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14595: LD_EXP 46
14599: PUSH
14600: LD_EXP 47
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: LD_INT 209
14611: PPUSH
14612: LD_INT 178
14614: PPUSH
14615: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14619: LD_EXP 46
14623: PPUSH
14624: LD_INT 10
14626: PPUSH
14627: CALL_OW 308
14631: IFFALSE 14656
// begin RemoveUnit ( ar_mechanic ) ;
14633: LD_EXP 46
14637: PPUSH
14638: CALL_OW 64
// escaped := escaped + 1 ;
14642: LD_ADDR_VAR 0 5
14646: PUSH
14647: LD_VAR 0 5
14651: PUSH
14652: LD_INT 1
14654: PLUS
14655: ST_TO_ADDR
// end ; if IsInArea ( ar_mechanic_friend , escape_area ) then
14656: LD_EXP 47
14660: PPUSH
14661: LD_INT 10
14663: PPUSH
14664: CALL_OW 308
14668: IFFALSE 14693
// begin RemoveUnit ( ar_mechanic_friend ) ;
14670: LD_EXP 47
14674: PPUSH
14675: CALL_OW 64
// escaped := escaped + 1 ;
14679: LD_ADDR_VAR 0 5
14683: PUSH
14684: LD_VAR 0 5
14688: PUSH
14689: LD_INT 1
14691: PLUS
14692: ST_TO_ADDR
// end ; if IsInArea ( cargo , escape_area ) then
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_INT 10
14700: PPUSH
14701: CALL_OW 308
14705: IFFALSE 14716
// RemoveUnit ( cargo ) ;
14707: LD_VAR 0 3
14711: PPUSH
14712: CALL_OW 64
// if not IsPlaced ( ar_mechanic ) and escaped >= 2 then
14716: LD_EXP 46
14720: PPUSH
14721: CALL_OW 305
14725: NOT
14726: PUSH
14727: LD_VAR 0 5
14731: PUSH
14732: LD_INT 2
14734: GREATEREQUAL
14735: AND
14736: IFFALSE 14740
// break ;
14738: GO 14778
// if not IsPlaced ( ar_mechanic ) and not IsPlaced ( ar_mechanic_friend ) and escaped < 2 then
14740: LD_EXP 46
14744: PPUSH
14745: CALL_OW 305
14749: NOT
14750: PUSH
14751: LD_EXP 47
14755: PPUSH
14756: CALL_OW 305
14760: NOT
14761: AND
14762: PUSH
14763: LD_VAR 0 5
14767: PUSH
14768: LD_INT 2
14770: LESS
14771: AND
14772: IFFALSE 14776
// exit ;
14774: GO 14956
// end ;
14776: GO 14560
// wait ( 0 0$2 ) ;
14778: LD_INT 70
14780: PPUSH
14781: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14785: LD_EXP 46
14789: PPUSH
14790: LD_STRING D7a-Ar1-1
14792: PPUSH
14793: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: LD_INT 129
14804: PUSH
14805: LD_INT 10
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 103
14814: PUSH
14815: LD_INT 6
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 148
14824: PUSH
14825: LD_INT 47
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 155
14834: PUSH
14835: LD_INT 16
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: ST_TO_ADDR
// if Difficulty = 1 then
14848: LD_OWVAR 67
14852: PUSH
14853: LD_INT 1
14855: EQUAL
14856: IFFALSE 14893
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14858: LD_ADDR_VAR 0 4
14862: PUSH
14863: LD_VAR 0 4
14867: PUSH
14868: LD_INT 78
14870: PUSH
14871: LD_INT 7
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 104
14880: PUSH
14881: LD_INT 43
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: ADD
14892: ST_TO_ADDR
// for i in tmp do
14893: LD_ADDR_VAR 0 2
14897: PUSH
14898: LD_VAR 0 4
14902: PUSH
14903: FOR_IN
14904: IFFALSE 14937
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14906: LD_VAR 0 2
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 2
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 9
14929: NEG
14930: PPUSH
14931: CALL_OW 330
14935: GO 14903
14937: POP
14938: POP
// SetAchievement ( ACH_FRIEND ) ;
14939: LD_STRING ACH_FRIEND
14941: PPUSH
14942: CALL_OW 543
// CenterOnXY ( 129 , 10 ) ;
14946: LD_INT 129
14948: PPUSH
14949: LD_INT 10
14951: PPUSH
14952: CALL_OW 84
// end ;
14956: PPOPN 5
14958: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14959: LD_EXP 15
14963: PUSH
14964: LD_INT 21000
14966: MINUS
14967: PUSH
14968: LD_OWVAR 1
14972: LESSEQUAL
14973: IFFALSE 15013
14975: GO 14977
14977: DISABLE
// begin powell_warn := true ;
14978: LD_ADDR_EXP 16
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// DialogueOn ;
14986: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14990: LD_EXP 30
14994: PPUSH
14995: LD_STRING D9-Pow-1
14997: PPUSH
14998: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
15002: LD_INT 10
15004: PPUSH
15005: CALL_OW 68
// DialogueOff ;
15009: CALL_OW 7
// end ;
15013: END
// every 0 0$1 trigger game_time <= tick do
15014: LD_EXP 15
15018: PUSH
15019: LD_OWVAR 1
15023: LESSEQUAL
15024: IFFALSE 15063
15026: GO 15028
15028: DISABLE
// begin DialogueOn ;
15029: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
15033: LD_EXP 30
15037: PPUSH
15038: LD_STRING D9a-Pow-1
15040: PPUSH
15041: CALL_OW 94
// dwait ( 0 0$2 ) ;
15045: LD_INT 70
15047: PPUSH
15048: CALL_OW 68
// DialogueOff ;
15052: CALL_OW 7
// YouLost ( Command ) ;
15056: LD_STRING Command
15058: PPUSH
15059: CALL_OW 104
// end ;
15063: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp , m1 , m2 , m3 ;
15064: LD_INT 22
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 1
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PPUSH
15088: CALL_OW 69
15092: PUSH
15093: LD_INT 0
15095: EQUAL
15096: PUSH
15097: LD_EXP 21
15101: PPUSH
15102: CALL_OW 302
15106: AND
15107: IFFALSE 16016
15109: GO 15111
15111: DISABLE
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// begin m1 := false ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: LD_INT 0
15125: ST_TO_ADDR
// m2 := false ;
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_INT 0
15133: ST_TO_ADDR
// m3 := false ;
15134: LD_ADDR_VAR 0 4
15138: PUSH
15139: LD_INT 0
15141: ST_TO_ADDR
// if not am_veh_consturcted then
15142: LD_EXP 20
15146: NOT
15147: IFFALSE 15156
// SetAchievement ( ACH_ARABTECH ) ;
15149: LD_STRING ACH_ARABTECH
15151: PPUSH
15152: CALL_OW 543
// if tick < [ 120 120$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] then
15156: LD_OWVAR 1
15160: PUSH
15161: LD_INT 252000
15163: PUSH
15164: LD_INT 210000
15166: PUSH
15167: LD_INT 199500
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: LD_OWVAR 67
15179: ARRAY
15180: LESS
15181: IFFALSE 15203
// begin m3 := true ;
15183: LD_ADDR_VAR 0 4
15187: PUSH
15188: LD_INT 1
15190: ST_TO_ADDR
// AddMedal ( Time1 , 1 ) ;
15191: LD_STRING Time1
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
// end else
15201: GO 15234
// if not powell_warn then
15203: LD_EXP 16
15207: NOT
15208: IFFALSE 15223
// AddMedal ( Time1 , - 1 ) else
15210: LD_STRING Time1
15212: PPUSH
15213: LD_INT 1
15215: NEG
15216: PPUSH
15217: CALL_OW 101
15221: GO 15234
// AddMedal ( Time1 , - 2 ) ;
15223: LD_STRING Time1
15225: PPUSH
15226: LD_INT 2
15228: NEG
15229: PPUSH
15230: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
15234: LD_EXP 17
15238: PUSH
15239: LD_INT 5
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: LD_OWVAR 67
15257: ARRAY
15258: GREATEREQUAL
15259: IFFALSE 15274
// AddMedal ( Destroy , - 2 ) else
15261: LD_STRING Destroy
15263: PPUSH
15264: LD_INT 2
15266: NEG
15267: PPUSH
15268: CALL_OW 101
15272: GO 15407
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
15274: LD_INT 22
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 21
15286: PUSH
15287: LD_INT 3
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 50
15296: PUSH
15297: EMPTY
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: PUSH
15310: LD_INT 25
15312: GREATEREQUAL
15313: IFFALSE 15328
// AddMedal ( Destroy , - 1 ) else
15315: LD_STRING Destroy
15317: PPUSH
15318: LD_INT 1
15320: NEG
15321: PPUSH
15322: CALL_OW 101
15326: GO 15407
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
15328: LD_INT 22
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 50
15350: PUSH
15351: EMPTY
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL_OW 69
15363: PUSH
15364: LD_INT 15
15366: GREATEREQUAL
15367: IFFALSE 15389
// begin m1 := true ;
15369: LD_ADDR_VAR 0 2
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// AddMedal ( Destroy , 1 ) ;
15377: LD_STRING Destroy
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 101
// end else
15387: GO 15407
// begin m1 := true ;
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// AddMedal ( Destroy , 2 ) ;
15397: LD_STRING Destroy
15399: PPUSH
15400: LD_INT 2
15402: PPUSH
15403: CALL_OW 101
// end ; SaveVariable ( artifact_get , 11_artifact_captured ) ;
15407: LD_EXP 13
15411: PPUSH
15412: LD_STRING 11_artifact_captured
15414: PPUSH
15415: CALL_OW 39
// if artifact_get then
15419: LD_EXP 13
15423: IFFALSE 15445
// begin m2 := true ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
15433: LD_STRING Artefact
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: CALL_OW 101
// end else
15443: GO 15456
// AddMedal ( Artefact , - 1 ) ;
15445: LD_STRING Artefact
15447: PPUSH
15448: LD_INT 1
15450: NEG
15451: PPUSH
15452: CALL_OW 101
// if m1 and m2 and m3 and Difficulty = 3 then
15456: LD_VAR 0 2
15460: PUSH
15461: LD_VAR 0 3
15465: AND
15466: PUSH
15467: LD_VAR 0 4
15471: AND
15472: PUSH
15473: LD_OWVAR 67
15477: PUSH
15478: LD_INT 3
15480: EQUAL
15481: AND
15482: IFFALSE 15494
// SetAchievementEX ( ACH_AMER , 11 ) ;
15484: LD_STRING ACH_AMER
15486: PPUSH
15487: LD_INT 11
15489: PPUSH
15490: CALL_OW 564
// if m1 and m2 and m3 and loses_counter = 0 then
15494: LD_VAR 0 2
15498: PUSH
15499: LD_VAR 0 3
15503: AND
15504: PUSH
15505: LD_VAR 0 4
15509: AND
15510: PUSH
15511: LD_EXP 17
15515: PUSH
15516: LD_INT 0
15518: EQUAL
15519: AND
15520: IFFALSE 15536
// begin wait ( 3 ) ;
15522: LD_INT 3
15524: PPUSH
15525: CALL_OW 67
// SetAchievement ( ACH_GENERAL ) ;
15529: LD_STRING ACH_GENERAL
15531: PPUSH
15532: CALL_OW 543
// end ; if tick <= 100 100$00 then
15536: LD_OWVAR 1
15540: PUSH
15541: LD_INT 210000
15543: LESSEQUAL
15544: IFFALSE 15560
// begin wait ( 3 ) ;
15546: LD_INT 3
15548: PPUSH
15549: CALL_OW 67
// SetAchievement ( ACH_ASPEED_11 ) ;
15553: LD_STRING ACH_ASPEED_11
15555: PPUSH
15556: CALL_OW 543
// end ; GiveMedals ( MAIN ) ;
15560: LD_STRING MAIN
15562: PPUSH
15563: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
15567: LD_ADDR_EXP 19
15571: PUSH
15572: LD_EXP 19
15576: PPUSH
15577: LD_INT 51
15579: PUSH
15580: EMPTY
15581: LIST
15582: PPUSH
15583: CALL_OW 72
15587: ST_TO_ADDR
// tmp := JMM ^ selected ;
15588: LD_ADDR_VAR 0 1
15592: PUSH
15593: LD_EXP 21
15597: PUSH
15598: LD_EXP 19
15602: ADD
15603: ST_TO_ADDR
// RewardPeople ( tmp ) ;
15604: LD_VAR 0 1
15608: PPUSH
15609: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
15613: LD_VAR 0 1
15617: PUSH
15618: LD_EXP 21
15622: PUSH
15623: LD_EXP 22
15627: PUSH
15628: LD_EXP 23
15632: PUSH
15633: LD_EXP 24
15637: PUSH
15638: LD_EXP 25
15642: PUSH
15643: LD_EXP 26
15647: PUSH
15648: LD_EXP 27
15652: PUSH
15653: LD_EXP 28
15657: PUSH
15658: LD_EXP 29
15662: PUSH
15663: LD_EXP 31
15667: PUSH
15668: LD_EXP 32
15672: PUSH
15673: LD_EXP 33
15677: PUSH
15678: LD_EXP 34
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: DIFF
15698: PPUSH
15699: LD_STRING 11c_others
15701: PPUSH
15702: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15706: LD_EXP 21
15710: PPUSH
15711: LD_EXP 3
15715: PUSH
15716: LD_STRING JMM
15718: STR
15719: PPUSH
15720: CALL_OW 38
// if Lisa then
15724: LD_EXP 22
15728: IFFALSE 15748
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15730: LD_EXP 22
15734: PPUSH
15735: LD_EXP 3
15739: PUSH
15740: LD_STRING Lisa
15742: STR
15743: PPUSH
15744: CALL_OW 38
// if Donaldson then
15748: LD_EXP 23
15752: IFFALSE 15772
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15754: LD_EXP 23
15758: PPUSH
15759: LD_EXP 3
15763: PUSH
15764: LD_STRING Donaldson
15766: STR
15767: PPUSH
15768: CALL_OW 38
// if Bobby then
15772: LD_EXP 24
15776: IFFALSE 15796
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15778: LD_EXP 24
15782: PPUSH
15783: LD_EXP 3
15787: PUSH
15788: LD_STRING Bobby
15790: STR
15791: PPUSH
15792: CALL_OW 38
// if Cyrus then
15796: LD_EXP 25
15800: IFFALSE 15820
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15802: LD_EXP 25
15806: PPUSH
15807: LD_EXP 3
15811: PUSH
15812: LD_STRING Cyrus
15814: STR
15815: PPUSH
15816: CALL_OW 38
// if Denis then
15820: LD_EXP 26
15824: IFFALSE 15844
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15826: LD_EXP 26
15830: PPUSH
15831: LD_EXP 3
15835: PUSH
15836: LD_STRING Denis
15838: STR
15839: PPUSH
15840: CALL_OW 38
// if Brown then
15844: LD_EXP 27
15848: IFFALSE 15868
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15850: LD_EXP 27
15854: PPUSH
15855: LD_EXP 3
15859: PUSH
15860: LD_STRING Brown
15862: STR
15863: PPUSH
15864: CALL_OW 38
// if Gladstone then
15868: LD_EXP 28
15872: IFFALSE 15892
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15874: LD_EXP 28
15878: PPUSH
15879: LD_EXP 3
15883: PUSH
15884: LD_STRING Gladstone
15886: STR
15887: PPUSH
15888: CALL_OW 38
// if Houten then
15892: LD_EXP 29
15896: IFFALSE 15916
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15898: LD_EXP 29
15902: PPUSH
15903: LD_EXP 3
15907: PUSH
15908: LD_STRING Houten
15910: STR
15911: PPUSH
15912: CALL_OW 38
// if Cornel then
15916: LD_EXP 31
15920: IFFALSE 15940
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15922: LD_EXP 31
15926: PPUSH
15927: LD_EXP 3
15931: PUSH
15932: LD_STRING Cornell
15934: STR
15935: PPUSH
15936: CALL_OW 38
// if Gary then
15940: LD_EXP 32
15944: IFFALSE 15964
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15946: LD_EXP 32
15950: PPUSH
15951: LD_EXP 3
15955: PUSH
15956: LD_STRING Gary
15958: STR
15959: PPUSH
15960: CALL_OW 38
// if Frank then
15964: LD_EXP 33
15968: IFFALSE 15988
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15970: LD_EXP 33
15974: PPUSH
15975: LD_EXP 3
15979: PUSH
15980: LD_STRING Frank
15982: STR
15983: PPUSH
15984: CALL_OW 38
// if Kikuchi then
15988: LD_EXP 34
15992: IFFALSE 16012
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15994: LD_EXP 34
15998: PPUSH
15999: LD_EXP 3
16003: PUSH
16004: LD_STRING Kikuchi
16006: STR
16007: PPUSH
16008: CALL_OW 38
// YouWin ;
16012: CALL_OW 103
// end ;
16016: PPOPN 4
16018: END
// export function CanSayRand ( side ) ; begin
16019: LD_INT 0
16021: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: LD_INT 52
16029: PUSH
16030: EMPTY
16031: LIST
16032: PUSH
16033: LD_INT 22
16035: PUSH
16036: LD_VAR 0 1
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: LD_INT 25
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 25
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 25
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 25
16080: PUSH
16081: LD_INT 4
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: PUSH
16105: LD_EXP 21
16109: PUSH
16110: LD_EXP 33
16114: PUSH
16115: LD_EXP 22
16119: PUSH
16120: LD_EXP 23
16124: PUSH
16125: LD_EXP 24
16129: PUSH
16130: LD_EXP 25
16134: PUSH
16135: LD_EXP 26
16139: PUSH
16140: LD_EXP 27
16144: PUSH
16145: LD_EXP 28
16149: PUSH
16150: LD_EXP 29
16154: PUSH
16155: LD_EXP 30
16159: PUSH
16160: LD_EXP 31
16164: PUSH
16165: LD_EXP 32
16169: PUSH
16170: LD_EXP 34
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: DIFF
16191: ST_TO_ADDR
// end ;
16192: LD_VAR 0 2
16196: RET
// export function SayRand ( sex , dial ) ; begin
16197: LD_INT 0
16199: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_INT 52
16207: PUSH
16208: EMPTY
16209: LIST
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 26
16223: PUSH
16224: LD_VAR 0 1
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: LD_INT 25
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 25
16248: PUSH
16249: LD_INT 2
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 25
16258: PUSH
16259: LD_INT 3
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 25
16268: PUSH
16269: LD_INT 4
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: PPUSH
16289: CALL_OW 69
16293: PUSH
16294: LD_EXP 21
16298: PUSH
16299: LD_EXP 33
16303: PUSH
16304: LD_EXP 22
16308: PUSH
16309: LD_EXP 23
16313: PUSH
16314: LD_EXP 24
16318: PUSH
16319: LD_EXP 25
16323: PUSH
16324: LD_EXP 26
16328: PUSH
16329: LD_EXP 27
16333: PUSH
16334: LD_EXP 28
16338: PUSH
16339: LD_EXP 29
16343: PUSH
16344: LD_EXP 30
16348: PUSH
16349: LD_EXP 31
16353: PUSH
16354: LD_EXP 32
16358: PUSH
16359: LD_EXP 34
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: DIFF
16380: ST_TO_ADDR
// if not result then
16381: LD_VAR 0 3
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16418
// result := result [ 1 ] ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 1
16402: ARRAY
16403: ST_TO_ADDR
// Say ( result , dial ) ;
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_VAR 0 2
16413: PPUSH
16414: CALL_OW 88
// end ;
16418: LD_VAR 0 3
16422: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
16423: LD_INT 0
16425: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
16426: LD_ADDR_VAR 0 4
16430: PUSH
16431: LD_INT 22
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 26
16443: PUSH
16444: LD_VAR 0 1
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: LD_INT 25
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 25
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 4
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: PUSH
16513: LD_EXP 21
16517: PUSH
16518: LD_EXP 33
16522: PUSH
16523: LD_EXP 22
16527: PUSH
16528: LD_EXP 23
16532: PUSH
16533: LD_EXP 24
16537: PUSH
16538: LD_EXP 25
16542: PUSH
16543: LD_EXP 26
16547: PUSH
16548: LD_EXP 27
16552: PUSH
16553: LD_EXP 28
16557: PUSH
16558: LD_EXP 29
16562: PUSH
16563: LD_EXP 30
16567: PUSH
16568: LD_EXP 31
16572: PUSH
16573: LD_EXP 32
16577: PUSH
16578: LD_EXP 34
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: PUSH
16599: LD_VAR 0 3
16603: ADD
16604: DIFF
16605: ST_TO_ADDR
// if not result then
16606: LD_VAR 0 4
16610: NOT
16611: IFFALSE 16615
// exit ;
16613: GO 16643
// result := result [ 1 ] ;
16615: LD_ADDR_VAR 0 4
16619: PUSH
16620: LD_VAR 0 4
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: ST_TO_ADDR
// Say ( result , dial ) ;
16629: LD_VAR 0 4
16633: PPUSH
16634: LD_VAR 0 2
16638: PPUSH
16639: CALL_OW 88
// end ; end_of_file
16643: LD_VAR 0 4
16647: RET
// export function CustomEvent ( event ) ; begin
16648: LD_INT 0
16650: PPUSH
// end ;
16651: LD_VAR 0 2
16655: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 255
16665: PUSH
16666: LD_INT 1
16668: EQUAL
16669: IFFALSE 16679
// artifact_get := true ;
16671: LD_ADDR_EXP 13
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 255
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: IFFALSE 16710
// begin artifact_get := false ;
16694: LD_ADDR_EXP 13
16698: PUSH
16699: LD_INT 0
16701: ST_TO_ADDR
// artifact_stolen := true ;
16702: LD_ADDR_EXP 12
16706: PUSH
16707: LD_INT 1
16709: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16710: LD_ADDR_EXP 14
16714: PUSH
16715: LD_INT 1
16717: ST_TO_ADDR
// end ;
16718: PPOPN 2
16720: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16721: LD_ADDR_EXP 14
16725: PUSH
16726: LD_INT 0
16728: ST_TO_ADDR
// end ;
16729: PPOPN 2
16731: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16732: LD_VAR 0 1
16736: PUSH
16737: LD_EXP 21
16741: EQUAL
16742: IFFALSE 16753
// begin YouLost ( JMM ) ;
16744: LD_STRING JMM
16746: PPUSH
16747: CALL_OW 104
// exit ;
16751: GO 16885
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16753: LD_VAR 0 1
16757: PUSH
16758: LD_INT 22
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 21
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 25
16783: PUSH
16784: LD_INT 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 25
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 25
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 25
16813: PUSH
16814: LD_INT 4
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 25
16823: PUSH
16824: LD_INT 5
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 25
16833: PUSH
16834: LD_INT 8
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: IN
16860: IFFALSE 16876
// loses_counter := loses_counter + 1 ;
16862: LD_ADDR_EXP 17
16866: PUSH
16867: LD_EXP 17
16871: PUSH
16872: LD_INT 1
16874: PLUS
16875: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL 44469 0 1
// end ;
16885: PPOPN 1
16887: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_VAR 0 2
16897: PPUSH
16898: CALL 46803 0 2
// end ;
16902: PPOPN 2
16904: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL 46112 0 1
// end ;
16914: PPOPN 1
16916: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_VAR 0 2
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_VAR 0 4
16936: PPUSH
16937: LD_VAR 0 5
16941: PPUSH
16942: CALL 43785 0 5
// end ;
16946: PPOPN 5
16948: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetNation ( vehicle ) = nation_american then
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 248
16958: PUSH
16959: LD_INT 1
16961: EQUAL
16962: IFFALSE 16972
// am_veh_consturcted := true ;
16964: LD_ADDR_EXP 20
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// MCE_VehicleConstructed ( vehicle , factory ) ;
16972: LD_VAR 0 1
16976: PPUSH
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL 43381 0 2
// end ;
16986: PPOPN 2
16988: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 247
16998: PUSH
16999: LD_INT 2
17001: EQUAL
17002: IFFALSE 17006
// exit ;
17004: GO 17023
// if not kamikazed then
17006: LD_EXP 11
17010: NOT
17011: IFFALSE 17023
// kamikazed := unit ;
17013: LD_ADDR_EXP 11
17017: PUSH
17018: LD_VAR 0 1
17022: ST_TO_ADDR
// end ;
17023: PPOPN 1
17025: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
17026: LD_INT 0
17028: PPUSH
17029: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_VAR 0 2
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: CALL 43219 0 4
// end ;
17054: PPOPN 6
17056: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
17057: LD_VAR 0 1
17061: PPUSH
17062: LD_VAR 0 2
17066: PPUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: CALL 42994 0 3
// end ;
17076: PPOPN 3
17078: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_VAR 0 2
17088: PPUSH
17089: CALL 44165 0 2
// end ;
17093: PPOPN 2
17095: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
17096: LD_VAR 0 1
17100: PPUSH
17101: LD_VAR 0 2
17105: PPUSH
17106: CALL 42688 0 2
// end ;
17110: PPOPN 2
17112: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_VAR 0 2
17122: PPUSH
17123: CALL 42879 0 2
// end ;
17127: PPOPN 2
17129: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL 45871 0 1
// end ;
17139: PPOPN 1
17141: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_VAR 0 2
17151: PPUSH
17152: CALL 47064 0 2
// end ;
17156: PPOPN 2
17158: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
17159: LD_VAR 0 1
17163: PPUSH
17164: LD_VAR 0 2
17168: PPUSH
17169: LD_VAR 0 3
17173: PPUSH
17174: LD_VAR 0 4
17178: PPUSH
17179: CALL 47280 0 4
// end ;
17183: PPOPN 4
17185: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL 101477 0 1
// end ; end_of_file
17195: PPOPN 1
17197: END
// every 0 0$1 trigger game do
17198: LD_EXP 2
17202: IFFALSE 17232
17204: GO 17206
17206: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
17207: LD_INT 7
17209: PUSH
17210: LD_INT 6
17212: PUSH
17213: LD_INT 4
17215: PUSH
17216: LD_INT 6
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PPUSH
17225: LD_INT 1750
17227: PPUSH
17228: CALL 17233 0 2
17232: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
17233: LD_INT 0
17235: PPUSH
17236: PPUSH
17237: PPUSH
// if not areas then
17238: LD_VAR 0 1
17242: NOT
17243: IFFALSE 17247
// exit ;
17245: GO 17377
// repeat wait ( time ) ;
17247: LD_VAR 0 2
17251: PPUSH
17252: CALL_OW 67
// p := rand ( 1 , 90 ) ;
17256: LD_ADDR_VAR 0 5
17260: PUSH
17261: LD_INT 1
17263: PPUSH
17264: LD_INT 90
17266: PPUSH
17267: CALL_OW 12
17271: ST_TO_ADDR
// for i in areas do
17272: LD_ADDR_VAR 0 4
17276: PUSH
17277: LD_VAR 0 1
17281: PUSH
17282: FOR_IN
17283: IFFALSE 17336
// begin if Prob ( p ) then
17285: LD_VAR 0 5
17289: PPUSH
17290: CALL_OW 13
17294: IFFALSE 17334
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
17296: LD_INT 1
17298: PPUSH
17299: LD_INT 5
17301: PPUSH
17302: CALL_OW 12
17306: PPUSH
17307: LD_VAR 0 4
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
17319: LD_INT 385
17321: PPUSH
17322: LD_INT 595
17324: PPUSH
17325: CALL_OW 12
17329: PPUSH
17330: CALL_OW 67
// end ; end ;
17334: GO 17282
17336: POP
17337: POP
// time := time + 0 0$3 ;
17338: LD_ADDR_VAR 0 2
17342: PUSH
17343: LD_VAR 0 2
17347: PUSH
17348: LD_INT 105
17350: PLUS
17351: ST_TO_ADDR
// if time > 7 7$00 then
17352: LD_VAR 0 2
17356: PUSH
17357: LD_INT 14700
17359: GREATER
17360: IFFALSE 17370
// time := 0 0$40 ;
17362: LD_ADDR_VAR 0 2
17366: PUSH
17367: LD_INT 1400
17369: ST_TO_ADDR
// until not game ;
17370: LD_EXP 2
17374: NOT
17375: IFFALSE 17247
// end ; end_of_file
17377: LD_VAR 0 3
17381: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
17382: LD_INT 0
17384: PPUSH
17385: PPUSH
// skirmish := false ;
17386: LD_ADDR_EXP 48
17390: PUSH
17391: LD_INT 0
17393: ST_TO_ADDR
// debug_mc := false ;
17394: LD_ADDR_EXP 49
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// mc_bases := [ ] ;
17402: LD_ADDR_EXP 50
17406: PUSH
17407: EMPTY
17408: ST_TO_ADDR
// mc_sides := [ ] ;
17409: LD_ADDR_EXP 76
17413: PUSH
17414: EMPTY
17415: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
17416: LD_ADDR_EXP 51
17420: PUSH
17421: EMPTY
17422: ST_TO_ADDR
// mc_building_repairs := [ ] ;
17423: LD_ADDR_EXP 52
17427: PUSH
17428: EMPTY
17429: ST_TO_ADDR
// mc_need_heal := [ ] ;
17430: LD_ADDR_EXP 53
17434: PUSH
17435: EMPTY
17436: ST_TO_ADDR
// mc_healers := [ ] ;
17437: LD_ADDR_EXP 54
17441: PUSH
17442: EMPTY
17443: ST_TO_ADDR
// mc_build_list := [ ] ;
17444: LD_ADDR_EXP 55
17448: PUSH
17449: EMPTY
17450: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
17451: LD_ADDR_EXP 82
17455: PUSH
17456: EMPTY
17457: ST_TO_ADDR
// mc_builders := [ ] ;
17458: LD_ADDR_EXP 56
17462: PUSH
17463: EMPTY
17464: ST_TO_ADDR
// mc_construct_list := [ ] ;
17465: LD_ADDR_EXP 57
17469: PUSH
17470: EMPTY
17471: ST_TO_ADDR
// mc_turret_list := [ ] ;
17472: LD_ADDR_EXP 58
17476: PUSH
17477: EMPTY
17478: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
17479: LD_ADDR_EXP 59
17483: PUSH
17484: EMPTY
17485: ST_TO_ADDR
// mc_miners := [ ] ;
17486: LD_ADDR_EXP 64
17490: PUSH
17491: EMPTY
17492: ST_TO_ADDR
// mc_mines := [ ] ;
17493: LD_ADDR_EXP 63
17497: PUSH
17498: EMPTY
17499: ST_TO_ADDR
// mc_minefields := [ ] ;
17500: LD_ADDR_EXP 65
17504: PUSH
17505: EMPTY
17506: ST_TO_ADDR
// mc_crates := [ ] ;
17507: LD_ADDR_EXP 66
17511: PUSH
17512: EMPTY
17513: ST_TO_ADDR
// mc_crates_collector := [ ] ;
17514: LD_ADDR_EXP 67
17518: PUSH
17519: EMPTY
17520: ST_TO_ADDR
// mc_crates_area := [ ] ;
17521: LD_ADDR_EXP 68
17525: PUSH
17526: EMPTY
17527: ST_TO_ADDR
// mc_vehicles := [ ] ;
17528: LD_ADDR_EXP 69
17532: PUSH
17533: EMPTY
17534: ST_TO_ADDR
// mc_attack := [ ] ;
17535: LD_ADDR_EXP 70
17539: PUSH
17540: EMPTY
17541: ST_TO_ADDR
// mc_produce := [ ] ;
17542: LD_ADDR_EXP 71
17546: PUSH
17547: EMPTY
17548: ST_TO_ADDR
// mc_defender := [ ] ;
17549: LD_ADDR_EXP 72
17553: PUSH
17554: EMPTY
17555: ST_TO_ADDR
// mc_parking := [ ] ;
17556: LD_ADDR_EXP 74
17560: PUSH
17561: EMPTY
17562: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
17563: LD_ADDR_EXP 60
17567: PUSH
17568: EMPTY
17569: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
17570: LD_ADDR_EXP 62
17574: PUSH
17575: EMPTY
17576: ST_TO_ADDR
// mc_scan := [ ] ;
17577: LD_ADDR_EXP 73
17581: PUSH
17582: EMPTY
17583: ST_TO_ADDR
// mc_scan_area := [ ] ;
17584: LD_ADDR_EXP 75
17588: PUSH
17589: EMPTY
17590: ST_TO_ADDR
// mc_tech := [ ] ;
17591: LD_ADDR_EXP 77
17595: PUSH
17596: EMPTY
17597: ST_TO_ADDR
// mc_class := [ ] ;
17598: LD_ADDR_EXP 91
17602: PUSH
17603: EMPTY
17604: ST_TO_ADDR
// mc_class_case_use := [ ] ;
17605: LD_ADDR_EXP 92
17609: PUSH
17610: EMPTY
17611: ST_TO_ADDR
// end ;
17612: LD_VAR 0 1
17616: RET
// export function MC_Kill ( base ) ; begin
17617: LD_INT 0
17619: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
17620: LD_ADDR_EXP 50
17624: PUSH
17625: LD_EXP 50
17629: PPUSH
17630: LD_VAR 0 1
17634: PPUSH
17635: EMPTY
17636: PPUSH
17637: CALL_OW 1
17641: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17642: LD_ADDR_EXP 51
17646: PUSH
17647: LD_EXP 51
17651: PPUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: EMPTY
17658: PPUSH
17659: CALL_OW 1
17663: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17664: LD_ADDR_EXP 52
17668: PUSH
17669: LD_EXP 52
17673: PPUSH
17674: LD_VAR 0 1
17678: PPUSH
17679: EMPTY
17680: PPUSH
17681: CALL_OW 1
17685: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17686: LD_ADDR_EXP 53
17690: PUSH
17691: LD_EXP 53
17695: PPUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: EMPTY
17702: PPUSH
17703: CALL_OW 1
17707: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17708: LD_ADDR_EXP 54
17712: PUSH
17713: LD_EXP 54
17717: PPUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: EMPTY
17724: PPUSH
17725: CALL_OW 1
17729: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17730: LD_ADDR_EXP 55
17734: PUSH
17735: LD_EXP 55
17739: PPUSH
17740: LD_VAR 0 1
17744: PPUSH
17745: EMPTY
17746: PPUSH
17747: CALL_OW 1
17751: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17752: LD_ADDR_EXP 56
17756: PUSH
17757: LD_EXP 56
17761: PPUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: EMPTY
17768: PPUSH
17769: CALL_OW 1
17773: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17774: LD_ADDR_EXP 57
17778: PUSH
17779: LD_EXP 57
17783: PPUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: EMPTY
17790: PPUSH
17791: CALL_OW 1
17795: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17796: LD_ADDR_EXP 58
17800: PUSH
17801: LD_EXP 58
17805: PPUSH
17806: LD_VAR 0 1
17810: PPUSH
17811: EMPTY
17812: PPUSH
17813: CALL_OW 1
17817: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17818: LD_ADDR_EXP 59
17822: PUSH
17823: LD_EXP 59
17827: PPUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: EMPTY
17834: PPUSH
17835: CALL_OW 1
17839: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17840: LD_ADDR_EXP 60
17844: PUSH
17845: LD_EXP 60
17849: PPUSH
17850: LD_VAR 0 1
17854: PPUSH
17855: EMPTY
17856: PPUSH
17857: CALL_OW 1
17861: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17862: LD_ADDR_EXP 61
17866: PUSH
17867: LD_EXP 61
17871: PPUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 1
17884: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17885: LD_ADDR_EXP 62
17889: PUSH
17890: LD_EXP 62
17894: PPUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: EMPTY
17901: PPUSH
17902: CALL_OW 1
17906: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17907: LD_ADDR_EXP 63
17911: PUSH
17912: LD_EXP 63
17916: PPUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: EMPTY
17923: PPUSH
17924: CALL_OW 1
17928: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17929: LD_ADDR_EXP 64
17933: PUSH
17934: LD_EXP 64
17938: PPUSH
17939: LD_VAR 0 1
17943: PPUSH
17944: EMPTY
17945: PPUSH
17946: CALL_OW 1
17950: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17951: LD_ADDR_EXP 65
17955: PUSH
17956: LD_EXP 65
17960: PPUSH
17961: LD_VAR 0 1
17965: PPUSH
17966: EMPTY
17967: PPUSH
17968: CALL_OW 1
17972: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17973: LD_ADDR_EXP 66
17977: PUSH
17978: LD_EXP 66
17982: PPUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: EMPTY
17989: PPUSH
17990: CALL_OW 1
17994: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17995: LD_ADDR_EXP 67
17999: PUSH
18000: LD_EXP 67
18004: PPUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: EMPTY
18011: PPUSH
18012: CALL_OW 1
18016: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18017: LD_ADDR_EXP 68
18021: PUSH
18022: LD_EXP 68
18026: PPUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: EMPTY
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18039: LD_ADDR_EXP 69
18043: PUSH
18044: LD_EXP 69
18048: PPUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: EMPTY
18055: PPUSH
18056: CALL_OW 1
18060: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18061: LD_ADDR_EXP 70
18065: PUSH
18066: LD_EXP 70
18070: PPUSH
18071: LD_VAR 0 1
18075: PPUSH
18076: EMPTY
18077: PPUSH
18078: CALL_OW 1
18082: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18083: LD_ADDR_EXP 71
18087: PUSH
18088: LD_EXP 71
18092: PPUSH
18093: LD_VAR 0 1
18097: PPUSH
18098: EMPTY
18099: PPUSH
18100: CALL_OW 1
18104: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18105: LD_ADDR_EXP 72
18109: PUSH
18110: LD_EXP 72
18114: PPUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: EMPTY
18121: PPUSH
18122: CALL_OW 1
18126: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18127: LD_ADDR_EXP 73
18131: PUSH
18132: LD_EXP 73
18136: PPUSH
18137: LD_VAR 0 1
18141: PPUSH
18142: EMPTY
18143: PPUSH
18144: CALL_OW 1
18148: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18149: LD_ADDR_EXP 74
18153: PUSH
18154: LD_EXP 74
18158: PPUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: EMPTY
18165: PPUSH
18166: CALL_OW 1
18170: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18171: LD_ADDR_EXP 75
18175: PUSH
18176: LD_EXP 75
18180: PPUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: EMPTY
18187: PPUSH
18188: CALL_OW 1
18192: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18193: LD_ADDR_EXP 77
18197: PUSH
18198: LD_EXP 77
18202: PPUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: EMPTY
18209: PPUSH
18210: CALL_OW 1
18214: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18215: LD_ADDR_EXP 79
18219: PUSH
18220: LD_EXP 79
18224: PPUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: EMPTY
18231: PPUSH
18232: CALL_OW 1
18236: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18237: LD_ADDR_EXP 80
18241: PUSH
18242: LD_EXP 80
18246: PPUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: EMPTY
18253: PPUSH
18254: CALL_OW 1
18258: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18259: LD_ADDR_EXP 81
18263: PUSH
18264: LD_EXP 81
18268: PPUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: EMPTY
18275: PPUSH
18276: CALL_OW 1
18280: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18281: LD_ADDR_EXP 82
18285: PUSH
18286: LD_EXP 82
18290: PPUSH
18291: LD_VAR 0 1
18295: PPUSH
18296: EMPTY
18297: PPUSH
18298: CALL_OW 1
18302: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18303: LD_ADDR_EXP 83
18307: PUSH
18308: LD_EXP 83
18312: PPUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: EMPTY
18319: PPUSH
18320: CALL_OW 1
18324: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18325: LD_ADDR_EXP 84
18329: PUSH
18330: LD_EXP 84
18334: PPUSH
18335: LD_VAR 0 1
18339: PPUSH
18340: EMPTY
18341: PPUSH
18342: CALL_OW 1
18346: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18347: LD_ADDR_EXP 85
18351: PUSH
18352: LD_EXP 85
18356: PPUSH
18357: LD_VAR 0 1
18361: PPUSH
18362: EMPTY
18363: PPUSH
18364: CALL_OW 1
18368: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18369: LD_ADDR_EXP 86
18373: PUSH
18374: LD_EXP 86
18378: PPUSH
18379: LD_VAR 0 1
18383: PPUSH
18384: EMPTY
18385: PPUSH
18386: CALL_OW 1
18390: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18391: LD_ADDR_EXP 87
18395: PUSH
18396: LD_EXP 87
18400: PPUSH
18401: LD_VAR 0 1
18405: PPUSH
18406: EMPTY
18407: PPUSH
18408: CALL_OW 1
18412: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18413: LD_ADDR_EXP 88
18417: PUSH
18418: LD_EXP 88
18422: PPUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: EMPTY
18429: PPUSH
18430: CALL_OW 1
18434: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18435: LD_ADDR_EXP 89
18439: PUSH
18440: LD_EXP 89
18444: PPUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: EMPTY
18451: PPUSH
18452: CALL_OW 1
18456: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18457: LD_ADDR_EXP 90
18461: PUSH
18462: LD_EXP 90
18466: PPUSH
18467: LD_VAR 0 1
18471: PPUSH
18472: EMPTY
18473: PPUSH
18474: CALL_OW 1
18478: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18479: LD_ADDR_EXP 91
18483: PUSH
18484: LD_EXP 91
18488: PPUSH
18489: LD_VAR 0 1
18493: PPUSH
18494: EMPTY
18495: PPUSH
18496: CALL_OW 1
18500: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18501: LD_ADDR_EXP 92
18505: PUSH
18506: LD_EXP 92
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 0
18518: PPUSH
18519: CALL_OW 1
18523: ST_TO_ADDR
// end ;
18524: LD_VAR 0 2
18528: RET
// export function MC_Add ( side , units ) ; var base ; begin
18529: LD_INT 0
18531: PPUSH
18532: PPUSH
// base := mc_bases + 1 ;
18533: LD_ADDR_VAR 0 4
18537: PUSH
18538: LD_EXP 50
18542: PUSH
18543: LD_INT 1
18545: PLUS
18546: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
18547: LD_ADDR_EXP 76
18551: PUSH
18552: LD_EXP 76
18556: PPUSH
18557: LD_VAR 0 4
18561: PPUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 1
18571: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
18572: LD_ADDR_EXP 50
18576: PUSH
18577: LD_EXP 50
18581: PPUSH
18582: LD_VAR 0 4
18586: PPUSH
18587: LD_VAR 0 2
18591: PPUSH
18592: CALL_OW 1
18596: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
18597: LD_ADDR_EXP 51
18601: PUSH
18602: LD_EXP 51
18606: PPUSH
18607: LD_VAR 0 4
18611: PPUSH
18612: EMPTY
18613: PPUSH
18614: CALL_OW 1
18618: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
18619: LD_ADDR_EXP 52
18623: PUSH
18624: LD_EXP 52
18628: PPUSH
18629: LD_VAR 0 4
18633: PPUSH
18634: EMPTY
18635: PPUSH
18636: CALL_OW 1
18640: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
18641: LD_ADDR_EXP 53
18645: PUSH
18646: LD_EXP 53
18650: PPUSH
18651: LD_VAR 0 4
18655: PPUSH
18656: EMPTY
18657: PPUSH
18658: CALL_OW 1
18662: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
18663: LD_ADDR_EXP 54
18667: PUSH
18668: LD_EXP 54
18672: PPUSH
18673: LD_VAR 0 4
18677: PPUSH
18678: EMPTY
18679: PPUSH
18680: CALL_OW 1
18684: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18685: LD_ADDR_EXP 55
18689: PUSH
18690: LD_EXP 55
18694: PPUSH
18695: LD_VAR 0 4
18699: PPUSH
18700: EMPTY
18701: PPUSH
18702: CALL_OW 1
18706: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18707: LD_ADDR_EXP 56
18711: PUSH
18712: LD_EXP 56
18716: PPUSH
18717: LD_VAR 0 4
18721: PPUSH
18722: EMPTY
18723: PPUSH
18724: CALL_OW 1
18728: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18729: LD_ADDR_EXP 57
18733: PUSH
18734: LD_EXP 57
18738: PPUSH
18739: LD_VAR 0 4
18743: PPUSH
18744: EMPTY
18745: PPUSH
18746: CALL_OW 1
18750: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18751: LD_ADDR_EXP 58
18755: PUSH
18756: LD_EXP 58
18760: PPUSH
18761: LD_VAR 0 4
18765: PPUSH
18766: EMPTY
18767: PPUSH
18768: CALL_OW 1
18772: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18773: LD_ADDR_EXP 59
18777: PUSH
18778: LD_EXP 59
18782: PPUSH
18783: LD_VAR 0 4
18787: PPUSH
18788: EMPTY
18789: PPUSH
18790: CALL_OW 1
18794: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18795: LD_ADDR_EXP 60
18799: PUSH
18800: LD_EXP 60
18804: PPUSH
18805: LD_VAR 0 4
18809: PPUSH
18810: EMPTY
18811: PPUSH
18812: CALL_OW 1
18816: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18817: LD_ADDR_EXP 61
18821: PUSH
18822: LD_EXP 61
18826: PPUSH
18827: LD_VAR 0 4
18831: PPUSH
18832: LD_INT 0
18834: PPUSH
18835: CALL_OW 1
18839: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18840: LD_ADDR_EXP 62
18844: PUSH
18845: LD_EXP 62
18849: PPUSH
18850: LD_VAR 0 4
18854: PPUSH
18855: EMPTY
18856: PPUSH
18857: CALL_OW 1
18861: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18862: LD_ADDR_EXP 63
18866: PUSH
18867: LD_EXP 63
18871: PPUSH
18872: LD_VAR 0 4
18876: PPUSH
18877: EMPTY
18878: PPUSH
18879: CALL_OW 1
18883: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18884: LD_ADDR_EXP 64
18888: PUSH
18889: LD_EXP 64
18893: PPUSH
18894: LD_VAR 0 4
18898: PPUSH
18899: EMPTY
18900: PPUSH
18901: CALL_OW 1
18905: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18906: LD_ADDR_EXP 65
18910: PUSH
18911: LD_EXP 65
18915: PPUSH
18916: LD_VAR 0 4
18920: PPUSH
18921: EMPTY
18922: PPUSH
18923: CALL_OW 1
18927: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18928: LD_ADDR_EXP 66
18932: PUSH
18933: LD_EXP 66
18937: PPUSH
18938: LD_VAR 0 4
18942: PPUSH
18943: EMPTY
18944: PPUSH
18945: CALL_OW 1
18949: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18950: LD_ADDR_EXP 67
18954: PUSH
18955: LD_EXP 67
18959: PPUSH
18960: LD_VAR 0 4
18964: PPUSH
18965: EMPTY
18966: PPUSH
18967: CALL_OW 1
18971: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18972: LD_ADDR_EXP 68
18976: PUSH
18977: LD_EXP 68
18981: PPUSH
18982: LD_VAR 0 4
18986: PPUSH
18987: EMPTY
18988: PPUSH
18989: CALL_OW 1
18993: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18994: LD_ADDR_EXP 69
18998: PUSH
18999: LD_EXP 69
19003: PPUSH
19004: LD_VAR 0 4
19008: PPUSH
19009: EMPTY
19010: PPUSH
19011: CALL_OW 1
19015: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
19016: LD_ADDR_EXP 70
19020: PUSH
19021: LD_EXP 70
19025: PPUSH
19026: LD_VAR 0 4
19030: PPUSH
19031: EMPTY
19032: PPUSH
19033: CALL_OW 1
19037: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
19038: LD_ADDR_EXP 71
19042: PUSH
19043: LD_EXP 71
19047: PPUSH
19048: LD_VAR 0 4
19052: PPUSH
19053: EMPTY
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
19060: LD_ADDR_EXP 72
19064: PUSH
19065: LD_EXP 72
19069: PPUSH
19070: LD_VAR 0 4
19074: PPUSH
19075: EMPTY
19076: PPUSH
19077: CALL_OW 1
19081: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
19082: LD_ADDR_EXP 73
19086: PUSH
19087: LD_EXP 73
19091: PPUSH
19092: LD_VAR 0 4
19096: PPUSH
19097: EMPTY
19098: PPUSH
19099: CALL_OW 1
19103: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
19104: LD_ADDR_EXP 74
19108: PUSH
19109: LD_EXP 74
19113: PPUSH
19114: LD_VAR 0 4
19118: PPUSH
19119: EMPTY
19120: PPUSH
19121: CALL_OW 1
19125: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
19126: LD_ADDR_EXP 75
19130: PUSH
19131: LD_EXP 75
19135: PPUSH
19136: LD_VAR 0 4
19140: PPUSH
19141: EMPTY
19142: PPUSH
19143: CALL_OW 1
19147: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
19148: LD_ADDR_EXP 77
19152: PUSH
19153: LD_EXP 77
19157: PPUSH
19158: LD_VAR 0 4
19162: PPUSH
19163: EMPTY
19164: PPUSH
19165: CALL_OW 1
19169: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
19170: LD_ADDR_EXP 79
19174: PUSH
19175: LD_EXP 79
19179: PPUSH
19180: LD_VAR 0 4
19184: PPUSH
19185: EMPTY
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
19192: LD_ADDR_EXP 80
19196: PUSH
19197: LD_EXP 80
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: EMPTY
19208: PPUSH
19209: CALL_OW 1
19213: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
19214: LD_ADDR_EXP 81
19218: PUSH
19219: LD_EXP 81
19223: PPUSH
19224: LD_VAR 0 4
19228: PPUSH
19229: EMPTY
19230: PPUSH
19231: CALL_OW 1
19235: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
19236: LD_ADDR_EXP 82
19240: PUSH
19241: LD_EXP 82
19245: PPUSH
19246: LD_VAR 0 4
19250: PPUSH
19251: EMPTY
19252: PPUSH
19253: CALL_OW 1
19257: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
19258: LD_ADDR_EXP 83
19262: PUSH
19263: LD_EXP 83
19267: PPUSH
19268: LD_VAR 0 4
19272: PPUSH
19273: EMPTY
19274: PPUSH
19275: CALL_OW 1
19279: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
19280: LD_ADDR_EXP 84
19284: PUSH
19285: LD_EXP 84
19289: PPUSH
19290: LD_VAR 0 4
19294: PPUSH
19295: EMPTY
19296: PPUSH
19297: CALL_OW 1
19301: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
19302: LD_ADDR_EXP 85
19306: PUSH
19307: LD_EXP 85
19311: PPUSH
19312: LD_VAR 0 4
19316: PPUSH
19317: EMPTY
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
19324: LD_ADDR_EXP 86
19328: PUSH
19329: LD_EXP 86
19333: PPUSH
19334: LD_VAR 0 4
19338: PPUSH
19339: EMPTY
19340: PPUSH
19341: CALL_OW 1
19345: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
19346: LD_ADDR_EXP 87
19350: PUSH
19351: LD_EXP 87
19355: PPUSH
19356: LD_VAR 0 4
19360: PPUSH
19361: EMPTY
19362: PPUSH
19363: CALL_OW 1
19367: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
19368: LD_ADDR_EXP 88
19372: PUSH
19373: LD_EXP 88
19377: PPUSH
19378: LD_VAR 0 4
19382: PPUSH
19383: EMPTY
19384: PPUSH
19385: CALL_OW 1
19389: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
19390: LD_ADDR_EXP 89
19394: PUSH
19395: LD_EXP 89
19399: PPUSH
19400: LD_VAR 0 4
19404: PPUSH
19405: EMPTY
19406: PPUSH
19407: CALL_OW 1
19411: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
19412: LD_ADDR_EXP 90
19416: PUSH
19417: LD_EXP 90
19421: PPUSH
19422: LD_VAR 0 4
19426: PPUSH
19427: EMPTY
19428: PPUSH
19429: CALL_OW 1
19433: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
19434: LD_ADDR_EXP 91
19438: PUSH
19439: LD_EXP 91
19443: PPUSH
19444: LD_VAR 0 4
19448: PPUSH
19449: EMPTY
19450: PPUSH
19451: CALL_OW 1
19455: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
19456: LD_ADDR_EXP 92
19460: PUSH
19461: LD_EXP 92
19465: PPUSH
19466: LD_VAR 0 4
19470: PPUSH
19471: LD_INT 0
19473: PPUSH
19474: CALL_OW 1
19478: ST_TO_ADDR
// result := base ;
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: LD_VAR 0 4
19488: ST_TO_ADDR
// end ;
19489: LD_VAR 0 3
19493: RET
// export function MC_Start ( ) ; var i ; begin
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
// for i = 1 to mc_bases do
19498: LD_ADDR_VAR 0 2
19502: PUSH
19503: DOUBLE
19504: LD_INT 1
19506: DEC
19507: ST_TO_ADDR
19508: LD_EXP 50
19512: PUSH
19513: FOR_TO
19514: IFFALSE 20591
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
19516: LD_ADDR_EXP 50
19520: PUSH
19521: LD_EXP 50
19525: PPUSH
19526: LD_VAR 0 2
19530: PPUSH
19531: LD_EXP 50
19535: PUSH
19536: LD_VAR 0 2
19540: ARRAY
19541: PUSH
19542: LD_INT 0
19544: DIFF
19545: PPUSH
19546: CALL_OW 1
19550: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
19551: LD_ADDR_EXP 51
19555: PUSH
19556: LD_EXP 51
19560: PPUSH
19561: LD_VAR 0 2
19565: PPUSH
19566: EMPTY
19567: PPUSH
19568: CALL_OW 1
19572: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
19573: LD_ADDR_EXP 52
19577: PUSH
19578: LD_EXP 52
19582: PPUSH
19583: LD_VAR 0 2
19587: PPUSH
19588: EMPTY
19589: PPUSH
19590: CALL_OW 1
19594: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
19595: LD_ADDR_EXP 53
19599: PUSH
19600: LD_EXP 53
19604: PPUSH
19605: LD_VAR 0 2
19609: PPUSH
19610: EMPTY
19611: PPUSH
19612: CALL_OW 1
19616: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
19617: LD_ADDR_EXP 54
19621: PUSH
19622: LD_EXP 54
19626: PPUSH
19627: LD_VAR 0 2
19631: PPUSH
19632: EMPTY
19633: PUSH
19634: EMPTY
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 1
19644: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
19645: LD_ADDR_EXP 55
19649: PUSH
19650: LD_EXP 55
19654: PPUSH
19655: LD_VAR 0 2
19659: PPUSH
19660: EMPTY
19661: PPUSH
19662: CALL_OW 1
19666: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
19667: LD_ADDR_EXP 82
19671: PUSH
19672: LD_EXP 82
19676: PPUSH
19677: LD_VAR 0 2
19681: PPUSH
19682: EMPTY
19683: PPUSH
19684: CALL_OW 1
19688: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19689: LD_ADDR_EXP 56
19693: PUSH
19694: LD_EXP 56
19698: PPUSH
19699: LD_VAR 0 2
19703: PPUSH
19704: EMPTY
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19711: LD_ADDR_EXP 57
19715: PUSH
19716: LD_EXP 57
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL_OW 1
19732: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19733: LD_ADDR_EXP 58
19737: PUSH
19738: LD_EXP 58
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: LD_EXP 50
19752: PUSH
19753: LD_VAR 0 2
19757: ARRAY
19758: PPUSH
19759: LD_INT 2
19761: PUSH
19762: LD_INT 30
19764: PUSH
19765: LD_INT 32
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 30
19774: PUSH
19775: LD_INT 33
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: PPUSH
19787: CALL_OW 72
19791: PPUSH
19792: CALL_OW 1
19796: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19797: LD_ADDR_EXP 59
19801: PUSH
19802: LD_EXP 59
19806: PPUSH
19807: LD_VAR 0 2
19811: PPUSH
19812: LD_EXP 50
19816: PUSH
19817: LD_VAR 0 2
19821: ARRAY
19822: PPUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 32
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 31
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 58
19853: PUSH
19854: EMPTY
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 72
19865: PPUSH
19866: CALL_OW 1
19870: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19871: LD_ADDR_EXP 60
19875: PUSH
19876: LD_EXP 60
19880: PPUSH
19881: LD_VAR 0 2
19885: PPUSH
19886: EMPTY
19887: PPUSH
19888: CALL_OW 1
19892: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19893: LD_ADDR_EXP 64
19897: PUSH
19898: LD_EXP 64
19902: PPUSH
19903: LD_VAR 0 2
19907: PPUSH
19908: EMPTY
19909: PPUSH
19910: CALL_OW 1
19914: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19915: LD_ADDR_EXP 63
19919: PUSH
19920: LD_EXP 63
19924: PPUSH
19925: LD_VAR 0 2
19929: PPUSH
19930: EMPTY
19931: PPUSH
19932: CALL_OW 1
19936: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19937: LD_ADDR_EXP 65
19941: PUSH
19942: LD_EXP 65
19946: PPUSH
19947: LD_VAR 0 2
19951: PPUSH
19952: EMPTY
19953: PPUSH
19954: CALL_OW 1
19958: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19959: LD_ADDR_EXP 66
19963: PUSH
19964: LD_EXP 66
19968: PPUSH
19969: LD_VAR 0 2
19973: PPUSH
19974: EMPTY
19975: PPUSH
19976: CALL_OW 1
19980: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19981: LD_ADDR_EXP 67
19985: PUSH
19986: LD_EXP 67
19990: PPUSH
19991: LD_VAR 0 2
19995: PPUSH
19996: EMPTY
19997: PPUSH
19998: CALL_OW 1
20002: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
20003: LD_ADDR_EXP 68
20007: PUSH
20008: LD_EXP 68
20012: PPUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: EMPTY
20019: PPUSH
20020: CALL_OW 1
20024: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
20025: LD_ADDR_EXP 69
20029: PUSH
20030: LD_EXP 69
20034: PPUSH
20035: LD_VAR 0 2
20039: PPUSH
20040: EMPTY
20041: PPUSH
20042: CALL_OW 1
20046: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
20047: LD_ADDR_EXP 70
20051: PUSH
20052: LD_EXP 70
20056: PPUSH
20057: LD_VAR 0 2
20061: PPUSH
20062: EMPTY
20063: PPUSH
20064: CALL_OW 1
20068: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
20069: LD_ADDR_EXP 71
20073: PUSH
20074: LD_EXP 71
20078: PPUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: EMPTY
20085: PPUSH
20086: CALL_OW 1
20090: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
20091: LD_ADDR_EXP 72
20095: PUSH
20096: LD_EXP 72
20100: PPUSH
20101: LD_VAR 0 2
20105: PPUSH
20106: EMPTY
20107: PPUSH
20108: CALL_OW 1
20112: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
20113: LD_ADDR_EXP 61
20117: PUSH
20118: LD_EXP 61
20122: PPUSH
20123: LD_VAR 0 2
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: CALL_OW 1
20135: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
20136: LD_ADDR_EXP 74
20140: PUSH
20141: LD_EXP 74
20145: PPUSH
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_INT 0
20153: PPUSH
20154: CALL_OW 1
20158: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
20159: LD_ADDR_EXP 62
20163: PUSH
20164: LD_EXP 62
20168: PPUSH
20169: LD_VAR 0 2
20173: PPUSH
20174: EMPTY
20175: PPUSH
20176: CALL_OW 1
20180: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
20181: LD_ADDR_EXP 73
20185: PUSH
20186: LD_EXP 73
20190: PPUSH
20191: LD_VAR 0 2
20195: PPUSH
20196: LD_INT 0
20198: PPUSH
20199: CALL_OW 1
20203: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
20204: LD_ADDR_EXP 75
20208: PUSH
20209: LD_EXP 75
20213: PPUSH
20214: LD_VAR 0 2
20218: PPUSH
20219: EMPTY
20220: PPUSH
20221: CALL_OW 1
20225: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
20226: LD_ADDR_EXP 78
20230: PUSH
20231: LD_EXP 78
20235: PPUSH
20236: LD_VAR 0 2
20240: PPUSH
20241: LD_INT 0
20243: PPUSH
20244: CALL_OW 1
20248: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
20249: LD_ADDR_EXP 79
20253: PUSH
20254: LD_EXP 79
20258: PPUSH
20259: LD_VAR 0 2
20263: PPUSH
20264: EMPTY
20265: PPUSH
20266: CALL_OW 1
20270: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
20271: LD_ADDR_EXP 80
20275: PUSH
20276: LD_EXP 80
20280: PPUSH
20281: LD_VAR 0 2
20285: PPUSH
20286: EMPTY
20287: PPUSH
20288: CALL_OW 1
20292: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20293: LD_ADDR_EXP 81
20297: PUSH
20298: LD_EXP 81
20302: PPUSH
20303: LD_VAR 0 2
20307: PPUSH
20308: EMPTY
20309: PPUSH
20310: CALL_OW 1
20314: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
20315: LD_ADDR_EXP 83
20319: PUSH
20320: LD_EXP 83
20324: PPUSH
20325: LD_VAR 0 2
20329: PPUSH
20330: LD_EXP 50
20334: PUSH
20335: LD_VAR 0 2
20339: ARRAY
20340: PPUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 30
20346: PUSH
20347: LD_INT 6
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 30
20356: PUSH
20357: LD_INT 7
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 8
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PPUSH
20380: CALL_OW 72
20384: PPUSH
20385: CALL_OW 1
20389: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
20390: LD_ADDR_EXP 84
20394: PUSH
20395: LD_EXP 84
20399: PPUSH
20400: LD_VAR 0 2
20404: PPUSH
20405: EMPTY
20406: PPUSH
20407: CALL_OW 1
20411: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
20412: LD_ADDR_EXP 85
20416: PUSH
20417: LD_EXP 85
20421: PPUSH
20422: LD_VAR 0 2
20426: PPUSH
20427: EMPTY
20428: PPUSH
20429: CALL_OW 1
20433: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
20434: LD_ADDR_EXP 86
20438: PUSH
20439: LD_EXP 86
20443: PPUSH
20444: LD_VAR 0 2
20448: PPUSH
20449: EMPTY
20450: PPUSH
20451: CALL_OW 1
20455: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
20456: LD_ADDR_EXP 87
20460: PUSH
20461: LD_EXP 87
20465: PPUSH
20466: LD_VAR 0 2
20470: PPUSH
20471: EMPTY
20472: PPUSH
20473: CALL_OW 1
20477: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
20478: LD_ADDR_EXP 88
20482: PUSH
20483: LD_EXP 88
20487: PPUSH
20488: LD_VAR 0 2
20492: PPUSH
20493: EMPTY
20494: PPUSH
20495: CALL_OW 1
20499: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
20500: LD_ADDR_EXP 89
20504: PUSH
20505: LD_EXP 89
20509: PPUSH
20510: LD_VAR 0 2
20514: PPUSH
20515: EMPTY
20516: PPUSH
20517: CALL_OW 1
20521: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
20522: LD_ADDR_EXP 90
20526: PUSH
20527: LD_EXP 90
20531: PPUSH
20532: LD_VAR 0 2
20536: PPUSH
20537: EMPTY
20538: PPUSH
20539: CALL_OW 1
20543: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
20544: LD_ADDR_EXP 91
20548: PUSH
20549: LD_EXP 91
20553: PPUSH
20554: LD_VAR 0 2
20558: PPUSH
20559: EMPTY
20560: PPUSH
20561: CALL_OW 1
20565: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
20566: LD_ADDR_EXP 92
20570: PUSH
20571: LD_EXP 92
20575: PPUSH
20576: LD_VAR 0 2
20580: PPUSH
20581: LD_INT 0
20583: PPUSH
20584: CALL_OW 1
20588: ST_TO_ADDR
// end ;
20589: GO 19513
20591: POP
20592: POP
// MC_InitSides ( ) ;
20593: CALL 20879 0 0
// MC_InitResearch ( ) ;
20597: CALL 20618 0 0
// CustomInitMacro ( ) ;
20601: CALL 300 0 0
// skirmish := true ;
20605: LD_ADDR_EXP 48
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// end ;
20613: LD_VAR 0 1
20617: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
20618: LD_INT 0
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
// if not mc_bases then
20626: LD_EXP 50
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 20874
// for i = 1 to 8 do
20635: LD_ADDR_VAR 0 2
20639: PUSH
20640: DOUBLE
20641: LD_INT 1
20643: DEC
20644: ST_TO_ADDR
20645: LD_INT 8
20647: PUSH
20648: FOR_TO
20649: IFFALSE 20675
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
20651: LD_ADDR_EXP 77
20655: PUSH
20656: LD_EXP 77
20660: PPUSH
20661: LD_VAR 0 2
20665: PPUSH
20666: EMPTY
20667: PPUSH
20668: CALL_OW 1
20672: ST_TO_ADDR
20673: GO 20648
20675: POP
20676: POP
// tmp := [ ] ;
20677: LD_ADDR_VAR 0 5
20681: PUSH
20682: EMPTY
20683: ST_TO_ADDR
// for i = 1 to mc_sides do
20684: LD_ADDR_VAR 0 2
20688: PUSH
20689: DOUBLE
20690: LD_INT 1
20692: DEC
20693: ST_TO_ADDR
20694: LD_EXP 76
20698: PUSH
20699: FOR_TO
20700: IFFALSE 20758
// if not mc_sides [ i ] in tmp then
20702: LD_EXP 76
20706: PUSH
20707: LD_VAR 0 2
20711: ARRAY
20712: PUSH
20713: LD_VAR 0 5
20717: IN
20718: NOT
20719: IFFALSE 20756
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20721: LD_ADDR_VAR 0 5
20725: PUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: LD_VAR 0 5
20735: PUSH
20736: LD_INT 1
20738: PLUS
20739: PPUSH
20740: LD_EXP 76
20744: PUSH
20745: LD_VAR 0 2
20749: ARRAY
20750: PPUSH
20751: CALL_OW 2
20755: ST_TO_ADDR
20756: GO 20699
20758: POP
20759: POP
// if not tmp then
20760: LD_VAR 0 5
20764: NOT
20765: IFFALSE 20769
// exit ;
20767: GO 20874
// for j in tmp do
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: LD_VAR 0 5
20778: PUSH
20779: FOR_IN
20780: IFFALSE 20872
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20782: LD_ADDR_VAR 0 6
20786: PUSH
20787: LD_INT 22
20789: PUSH
20790: LD_VAR 0 3
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PPUSH
20799: CALL_OW 69
20803: ST_TO_ADDR
// if not un then
20804: LD_VAR 0 6
20808: NOT
20809: IFFALSE 20813
// continue ;
20811: GO 20779
// nation := GetNation ( un [ 1 ] ) ;
20813: LD_ADDR_VAR 0 4
20817: PUSH
20818: LD_VAR 0 6
20822: PUSH
20823: LD_INT 1
20825: ARRAY
20826: PPUSH
20827: CALL_OW 248
20831: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20832: LD_ADDR_EXP 77
20836: PUSH
20837: LD_EXP 77
20841: PPUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_VAR 0 4
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL 47484 0 3
20864: PPUSH
20865: CALL_OW 1
20869: ST_TO_ADDR
// end ;
20870: GO 20779
20872: POP
20873: POP
// end ;
20874: LD_VAR 0 1
20878: RET
// export function MC_InitSides ( ) ; var i ; begin
20879: LD_INT 0
20881: PPUSH
20882: PPUSH
// if not mc_bases then
20883: LD_EXP 50
20887: NOT
20888: IFFALSE 20892
// exit ;
20890: GO 20966
// for i = 1 to mc_bases do
20892: LD_ADDR_VAR 0 2
20896: PUSH
20897: DOUBLE
20898: LD_INT 1
20900: DEC
20901: ST_TO_ADDR
20902: LD_EXP 50
20906: PUSH
20907: FOR_TO
20908: IFFALSE 20964
// if mc_bases [ i ] then
20910: LD_EXP 50
20914: PUSH
20915: LD_VAR 0 2
20919: ARRAY
20920: IFFALSE 20962
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20922: LD_ADDR_EXP 76
20926: PUSH
20927: LD_EXP 76
20931: PPUSH
20932: LD_VAR 0 2
20936: PPUSH
20937: LD_EXP 50
20941: PUSH
20942: LD_VAR 0 2
20946: ARRAY
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: CALL_OW 255
20956: PPUSH
20957: CALL_OW 1
20961: ST_TO_ADDR
20962: GO 20907
20964: POP
20965: POP
// end ;
20966: LD_VAR 0 1
20970: RET
// every 0 0$01 trigger skirmish do
20971: LD_EXP 48
20975: IFFALSE 21129
20977: GO 20979
20979: DISABLE
// begin enable ;
20980: ENABLE
// MC_CheckBuildings ( ) ;
20981: CALL 25627 0 0
// MC_CheckPeopleLife ( ) ;
20985: CALL 25752 0 0
// RaiseSailEvent ( 100 ) ;
20989: LD_INT 100
20991: PPUSH
20992: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20996: LD_INT 103
20998: PPUSH
20999: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
21003: LD_INT 104
21005: PPUSH
21006: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
21010: LD_INT 105
21012: PPUSH
21013: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
21017: LD_INT 106
21019: PPUSH
21020: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
21024: LD_INT 107
21026: PPUSH
21027: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
21031: LD_INT 108
21033: PPUSH
21034: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
21038: LD_INT 109
21040: PPUSH
21041: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
21045: LD_INT 110
21047: PPUSH
21048: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
21052: LD_INT 111
21054: PPUSH
21055: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
21059: LD_INT 112
21061: PPUSH
21062: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
21066: LD_INT 113
21068: PPUSH
21069: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
21073: LD_INT 120
21075: PPUSH
21076: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
21080: LD_INT 121
21082: PPUSH
21083: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
21087: LD_INT 122
21089: PPUSH
21090: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
21094: LD_INT 123
21096: PPUSH
21097: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
21101: LD_INT 124
21103: PPUSH
21104: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
21108: LD_INT 125
21110: PPUSH
21111: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
21115: LD_INT 126
21117: PPUSH
21118: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
21122: LD_INT 200
21124: PPUSH
21125: CALL_OW 427
// end ;
21129: END
// on SailEvent ( event ) do begin if event < 100 then
21130: LD_VAR 0 1
21134: PUSH
21135: LD_INT 100
21137: LESS
21138: IFFALSE 21149
// CustomEvent ( event ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL 16648 0 1
// if event = 100 then
21149: LD_VAR 0 1
21153: PUSH
21154: LD_INT 100
21156: EQUAL
21157: IFFALSE 21163
// MC_ClassManager ( ) ;
21159: CALL 21555 0 0
// if event = 101 then
21163: LD_VAR 0 1
21167: PUSH
21168: LD_INT 101
21170: EQUAL
21171: IFFALSE 21177
// MC_RepairBuildings ( ) ;
21173: CALL 26348 0 0
// if event = 102 then
21177: LD_VAR 0 1
21181: PUSH
21182: LD_INT 102
21184: EQUAL
21185: IFFALSE 21191
// MC_Heal ( ) ;
21187: CALL 27212 0 0
// if event = 103 then
21191: LD_VAR 0 1
21195: PUSH
21196: LD_INT 103
21198: EQUAL
21199: IFFALSE 21205
// MC_Build ( ) ;
21201: CALL 27634 0 0
// if event = 104 then
21205: LD_VAR 0 1
21209: PUSH
21210: LD_INT 104
21212: EQUAL
21213: IFFALSE 21219
// MC_TurretWeapon ( ) ;
21215: CALL 29247 0 0
// if event = 105 then
21219: LD_VAR 0 1
21223: PUSH
21224: LD_INT 105
21226: EQUAL
21227: IFFALSE 21233
// MC_BuildUpgrade ( ) ;
21229: CALL 28798 0 0
// if event = 106 then
21233: LD_VAR 0 1
21237: PUSH
21238: LD_INT 106
21240: EQUAL
21241: IFFALSE 21247
// MC_PlantMines ( ) ;
21243: CALL 29677 0 0
// if event = 107 then
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 107
21254: EQUAL
21255: IFFALSE 21261
// MC_CollectCrates ( ) ;
21257: CALL 30475 0 0
// if event = 108 then
21261: LD_VAR 0 1
21265: PUSH
21266: LD_INT 108
21268: EQUAL
21269: IFFALSE 21275
// MC_LinkRemoteControl ( ) ;
21271: CALL 32251 0 0
// if event = 109 then
21275: LD_VAR 0 1
21279: PUSH
21280: LD_INT 109
21282: EQUAL
21283: IFFALSE 21289
// MC_ProduceVehicle ( ) ;
21285: CALL 32432 0 0
// if event = 110 then
21289: LD_VAR 0 1
21293: PUSH
21294: LD_INT 110
21296: EQUAL
21297: IFFALSE 21303
// MC_SendAttack ( ) ;
21299: CALL 32898 0 0
// if event = 111 then
21303: LD_VAR 0 1
21307: PUSH
21308: LD_INT 111
21310: EQUAL
21311: IFFALSE 21317
// MC_Defend ( ) ;
21313: CALL 33006 0 0
// if event = 112 then
21317: LD_VAR 0 1
21321: PUSH
21322: LD_INT 112
21324: EQUAL
21325: IFFALSE 21331
// MC_Research ( ) ;
21327: CALL 33611 0 0
// if event = 113 then
21331: LD_VAR 0 1
21335: PUSH
21336: LD_INT 113
21338: EQUAL
21339: IFFALSE 21345
// MC_MinesTrigger ( ) ;
21341: CALL 34725 0 0
// if event = 120 then
21345: LD_VAR 0 1
21349: PUSH
21350: LD_INT 120
21352: EQUAL
21353: IFFALSE 21359
// MC_RepairVehicle ( ) ;
21355: CALL 34824 0 0
// if event = 121 then
21359: LD_VAR 0 1
21363: PUSH
21364: LD_INT 121
21366: EQUAL
21367: IFFALSE 21373
// MC_TameApe ( ) ;
21369: CALL 35554 0 0
// if event = 122 then
21373: LD_VAR 0 1
21377: PUSH
21378: LD_INT 122
21380: EQUAL
21381: IFFALSE 21387
// MC_ChangeApeClass ( ) ;
21383: CALL 36383 0 0
// if event = 123 then
21387: LD_VAR 0 1
21391: PUSH
21392: LD_INT 123
21394: EQUAL
21395: IFFALSE 21401
// MC_Bazooka ( ) ;
21397: CALL 37033 0 0
// if event = 124 then
21401: LD_VAR 0 1
21405: PUSH
21406: LD_INT 124
21408: EQUAL
21409: IFFALSE 21415
// MC_TeleportExit ( ) ;
21411: CALL 37231 0 0
// if event = 125 then
21415: LD_VAR 0 1
21419: PUSH
21420: LD_INT 125
21422: EQUAL
21423: IFFALSE 21429
// MC_Deposits ( ) ;
21425: CALL 37878 0 0
// if event = 126 then
21429: LD_VAR 0 1
21433: PUSH
21434: LD_INT 126
21436: EQUAL
21437: IFFALSE 21443
// MC_RemoteDriver ( ) ;
21439: CALL 38503 0 0
// if event = 200 then
21443: LD_VAR 0 1
21447: PUSH
21448: LD_INT 200
21450: EQUAL
21451: IFFALSE 21457
// MC_Idle ( ) ;
21453: CALL 40452 0 0
// end ;
21457: PPOPN 1
21459: END
// export function MC_Reset ( base , tag ) ; var i ; begin
21460: LD_INT 0
21462: PPUSH
21463: PPUSH
// if not mc_bases [ base ] or not tag then
21464: LD_EXP 50
21468: PUSH
21469: LD_VAR 0 1
21473: ARRAY
21474: NOT
21475: PUSH
21476: LD_VAR 0 2
21480: NOT
21481: OR
21482: IFFALSE 21486
// exit ;
21484: GO 21550
// for i in mc_bases [ base ] union mc_ape [ base ] do
21486: LD_ADDR_VAR 0 4
21490: PUSH
21491: LD_EXP 50
21495: PUSH
21496: LD_VAR 0 1
21500: ARRAY
21501: PUSH
21502: LD_EXP 79
21506: PUSH
21507: LD_VAR 0 1
21511: ARRAY
21512: UNION
21513: PUSH
21514: FOR_IN
21515: IFFALSE 21548
// if GetTag ( i ) = tag then
21517: LD_VAR 0 4
21521: PPUSH
21522: CALL_OW 110
21526: PUSH
21527: LD_VAR 0 2
21531: EQUAL
21532: IFFALSE 21546
// SetTag ( i , 0 ) ;
21534: LD_VAR 0 4
21538: PPUSH
21539: LD_INT 0
21541: PPUSH
21542: CALL_OW 109
21546: GO 21514
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 3
21554: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
// if not mc_bases then
21565: LD_EXP 50
21569: NOT
21570: IFFALSE 21574
// exit ;
21572: GO 22032
// for i = 1 to mc_bases do
21574: LD_ADDR_VAR 0 2
21578: PUSH
21579: DOUBLE
21580: LD_INT 1
21582: DEC
21583: ST_TO_ADDR
21584: LD_EXP 50
21588: PUSH
21589: FOR_TO
21590: IFFALSE 22030
// begin tmp := MC_ClassCheckReq ( i ) ;
21592: LD_ADDR_VAR 0 4
21596: PUSH
21597: LD_VAR 0 2
21601: PPUSH
21602: CALL 22037 0 1
21606: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
21607: LD_ADDR_EXP 91
21611: PUSH
21612: LD_EXP 91
21616: PPUSH
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 4
21626: PPUSH
21627: CALL_OW 1
21631: ST_TO_ADDR
// if not tmp then
21632: LD_VAR 0 4
21636: NOT
21637: IFFALSE 21641
// continue ;
21639: GO 21589
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
21641: LD_ADDR_VAR 0 6
21645: PUSH
21646: LD_EXP 50
21650: PUSH
21651: LD_VAR 0 2
21655: ARRAY
21656: PPUSH
21657: LD_INT 2
21659: PUSH
21660: LD_INT 30
21662: PUSH
21663: LD_INT 4
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 30
21672: PUSH
21673: LD_INT 5
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: PPUSH
21685: CALL_OW 72
21689: PUSH
21690: LD_EXP 50
21694: PUSH
21695: LD_VAR 0 2
21699: ARRAY
21700: PPUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 30
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 72
21733: PUSH
21734: LD_EXP 50
21738: PUSH
21739: LD_VAR 0 2
21743: ARRAY
21744: PPUSH
21745: LD_INT 30
21747: PUSH
21748: LD_INT 3
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PPUSH
21755: CALL_OW 72
21759: PUSH
21760: LD_EXP 50
21764: PUSH
21765: LD_VAR 0 2
21769: ARRAY
21770: PPUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 30
21776: PUSH
21777: LD_INT 6
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 7
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 30
21796: PUSH
21797: LD_INT 8
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 72
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// for j = 1 to 4 do
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: DOUBLE
21827: LD_INT 1
21829: DEC
21830: ST_TO_ADDR
21831: LD_INT 4
21833: PUSH
21834: FOR_TO
21835: IFFALSE 22026
// begin if not tmp [ j ] then
21837: LD_VAR 0 4
21841: PUSH
21842: LD_VAR 0 3
21846: ARRAY
21847: NOT
21848: IFFALSE 21852
// continue ;
21850: GO 21834
// for p in tmp [ j ] do
21852: LD_ADDR_VAR 0 5
21856: PUSH
21857: LD_VAR 0 4
21861: PUSH
21862: LD_VAR 0 3
21866: ARRAY
21867: PUSH
21868: FOR_IN
21869: IFFALSE 22022
// begin if not b [ j ] then
21871: LD_VAR 0 6
21875: PUSH
21876: LD_VAR 0 3
21880: ARRAY
21881: NOT
21882: IFFALSE 21886
// break ;
21884: GO 22022
// e := 0 ;
21886: LD_ADDR_VAR 0 7
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// for k in b [ j ] do
21894: LD_ADDR_VAR 0 8
21898: PUSH
21899: LD_VAR 0 6
21903: PUSH
21904: LD_VAR 0 3
21908: ARRAY
21909: PUSH
21910: FOR_IN
21911: IFFALSE 21938
// if IsNotFull ( k ) then
21913: LD_VAR 0 8
21917: PPUSH
21918: CALL 51924 0 1
21922: IFFALSE 21936
// begin e := k ;
21924: LD_ADDR_VAR 0 7
21928: PUSH
21929: LD_VAR 0 8
21933: ST_TO_ADDR
// break ;
21934: GO 21938
// end ;
21936: GO 21910
21938: POP
21939: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21940: LD_VAR 0 7
21944: PUSH
21945: LD_VAR 0 5
21949: PPUSH
21950: LD_VAR 0 7
21954: PPUSH
21955: CALL 89053 0 2
21959: NOT
21960: AND
21961: IFFALSE 22020
// begin if IsInUnit ( p ) then
21963: LD_VAR 0 5
21967: PPUSH
21968: CALL_OW 310
21972: IFFALSE 21983
// ComExitBuilding ( p ) ;
21974: LD_VAR 0 5
21978: PPUSH
21979: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_VAR 0 7
21992: PPUSH
21993: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21997: LD_VAR 0 5
22001: PPUSH
22002: LD_VAR 0 3
22006: PPUSH
22007: CALL_OW 183
// AddComExitBuilding ( p ) ;
22011: LD_VAR 0 5
22015: PPUSH
22016: CALL_OW 182
// end ; end ;
22020: GO 21868
22022: POP
22023: POP
// end ;
22024: GO 21834
22026: POP
22027: POP
// end ;
22028: GO 21589
22030: POP
22031: POP
// end ;
22032: LD_VAR 0 1
22036: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
22037: LD_INT 0
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
22051: LD_VAR 0 1
22055: NOT
22056: PUSH
22057: LD_EXP 50
22061: PUSH
22062: LD_VAR 0 1
22066: ARRAY
22067: NOT
22068: OR
22069: PUSH
22070: LD_EXP 50
22074: PUSH
22075: LD_VAR 0 1
22079: ARRAY
22080: PPUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 30
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 30
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 72
22113: NOT
22114: OR
22115: IFFALSE 22119
// exit ;
22117: GO 25622
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22119: LD_ADDR_VAR 0 4
22123: PUSH
22124: LD_EXP 50
22128: PUSH
22129: LD_VAR 0 1
22133: ARRAY
22134: PPUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 25
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 25
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 25
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 25
22170: PUSH
22171: LD_INT 4
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 25
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 25
22190: PUSH
22191: LD_INT 8
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 9
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: PPUSH
22218: CALL_OW 72
22222: ST_TO_ADDR
// if not tmp then
22223: LD_VAR 0 4
22227: NOT
22228: IFFALSE 22232
// exit ;
22230: GO 25622
// for i in tmp do
22232: LD_ADDR_VAR 0 3
22236: PUSH
22237: LD_VAR 0 4
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22274
// if GetTag ( i ) then
22245: LD_VAR 0 3
22249: PPUSH
22250: CALL_OW 110
22254: IFFALSE 22272
// tmp := tmp diff i ;
22256: LD_ADDR_VAR 0 4
22260: PUSH
22261: LD_VAR 0 4
22265: PUSH
22266: LD_VAR 0 3
22270: DIFF
22271: ST_TO_ADDR
22272: GO 22242
22274: POP
22275: POP
// if not tmp then
22276: LD_VAR 0 4
22280: NOT
22281: IFFALSE 22285
// exit ;
22283: GO 25622
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22285: LD_ADDR_VAR 0 5
22289: PUSH
22290: LD_EXP 50
22294: PUSH
22295: LD_VAR 0 1
22299: ARRAY
22300: PPUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 25
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 25
22316: PUSH
22317: LD_INT 5
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 25
22326: PUSH
22327: LD_INT 8
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 25
22336: PUSH
22337: LD_INT 9
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PPUSH
22351: CALL_OW 72
22355: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
22356: LD_ADDR_VAR 0 6
22360: PUSH
22361: LD_EXP 50
22365: PUSH
22366: LD_VAR 0 1
22370: ARRAY
22371: PPUSH
22372: LD_INT 25
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PPUSH
22382: CALL_OW 72
22386: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
22387: LD_ADDR_VAR 0 7
22391: PUSH
22392: LD_EXP 50
22396: PUSH
22397: LD_VAR 0 1
22401: ARRAY
22402: PPUSH
22403: LD_INT 25
22405: PUSH
22406: LD_INT 3
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PPUSH
22413: CALL_OW 72
22417: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
22418: LD_ADDR_VAR 0 8
22422: PUSH
22423: LD_EXP 50
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: LD_INT 25
22436: PUSH
22437: LD_INT 4
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 24
22446: PUSH
22447: LD_INT 251
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PPUSH
22458: CALL_OW 72
22462: ST_TO_ADDR
// if mc_scan [ base ] then
22463: LD_EXP 73
22467: PUSH
22468: LD_VAR 0 1
22472: ARRAY
22473: IFFALSE 22934
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
22475: LD_ADDR_EXP 92
22479: PUSH
22480: LD_EXP 92
22484: PPUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: LD_INT 4
22492: PPUSH
22493: CALL_OW 1
22497: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
22498: LD_ADDR_VAR 0 12
22502: PUSH
22503: LD_EXP 50
22507: PUSH
22508: LD_VAR 0 1
22512: ARRAY
22513: PPUSH
22514: LD_INT 2
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 30
22529: PUSH
22530: LD_INT 5
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: PPUSH
22542: CALL_OW 72
22546: ST_TO_ADDR
// if not b then
22547: LD_VAR 0 12
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 25622
// p := [ ] ;
22556: LD_ADDR_VAR 0 11
22560: PUSH
22561: EMPTY
22562: ST_TO_ADDR
// if sci >= 2 then
22563: LD_VAR 0 8
22567: PUSH
22568: LD_INT 2
22570: GREATEREQUAL
22571: IFFALSE 22602
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
22573: LD_ADDR_VAR 0 8
22577: PUSH
22578: LD_VAR 0 8
22582: PUSH
22583: LD_INT 1
22585: ARRAY
22586: PUSH
22587: LD_VAR 0 8
22591: PUSH
22592: LD_INT 2
22594: ARRAY
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: ST_TO_ADDR
22600: GO 22663
// if sci = 1 then
22602: LD_VAR 0 8
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22631
// sci := [ sci [ 1 ] ] else
22612: LD_ADDR_VAR 0 8
22616: PUSH
22617: LD_VAR 0 8
22621: PUSH
22622: LD_INT 1
22624: ARRAY
22625: PUSH
22626: EMPTY
22627: LIST
22628: ST_TO_ADDR
22629: GO 22663
// if sci = 0 then
22631: LD_VAR 0 8
22635: PUSH
22636: LD_INT 0
22638: EQUAL
22639: IFFALSE 22663
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
22641: LD_ADDR_VAR 0 11
22645: PUSH
22646: LD_VAR 0 4
22650: PPUSH
22651: LD_INT 4
22653: PPUSH
22654: CALL 88916 0 2
22658: PUSH
22659: LD_INT 1
22661: ARRAY
22662: ST_TO_ADDR
// if eng > 4 then
22663: LD_VAR 0 6
22667: PUSH
22668: LD_INT 4
22670: GREATER
22671: IFFALSE 22717
// for i = eng downto 4 do
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: DOUBLE
22679: LD_VAR 0 6
22683: INC
22684: ST_TO_ADDR
22685: LD_INT 4
22687: PUSH
22688: FOR_DOWNTO
22689: IFFALSE 22715
// eng := eng diff eng [ i ] ;
22691: LD_ADDR_VAR 0 6
22695: PUSH
22696: LD_VAR 0 6
22700: PUSH
22701: LD_VAR 0 6
22705: PUSH
22706: LD_VAR 0 3
22710: ARRAY
22711: DIFF
22712: ST_TO_ADDR
22713: GO 22688
22715: POP
22716: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 4
22726: PUSH
22727: LD_VAR 0 5
22731: PUSH
22732: LD_VAR 0 6
22736: UNION
22737: PUSH
22738: LD_VAR 0 7
22742: UNION
22743: PUSH
22744: LD_VAR 0 8
22748: UNION
22749: DIFF
22750: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22751: LD_ADDR_VAR 0 13
22755: PUSH
22756: LD_EXP 50
22760: PUSH
22761: LD_VAR 0 1
22765: ARRAY
22766: PPUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 30
22772: PUSH
22773: LD_INT 32
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 30
22782: PUSH
22783: LD_INT 31
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: PPUSH
22795: CALL_OW 72
22799: PUSH
22800: LD_EXP 50
22804: PUSH
22805: LD_VAR 0 1
22809: ARRAY
22810: PPUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 30
22816: PUSH
22817: LD_INT 4
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 72
22843: PUSH
22844: LD_INT 6
22846: MUL
22847: PLUS
22848: ST_TO_ADDR
// if bcount < tmp then
22849: LD_VAR 0 13
22853: PUSH
22854: LD_VAR 0 4
22858: LESS
22859: IFFALSE 22905
// for i = tmp downto bcount do
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: DOUBLE
22867: LD_VAR 0 4
22871: INC
22872: ST_TO_ADDR
22873: LD_VAR 0 13
22877: PUSH
22878: FOR_DOWNTO
22879: IFFALSE 22903
// tmp := Delete ( tmp , tmp ) ;
22881: LD_ADDR_VAR 0 4
22885: PUSH
22886: LD_VAR 0 4
22890: PPUSH
22891: LD_VAR 0 4
22895: PPUSH
22896: CALL_OW 3
22900: ST_TO_ADDR
22901: GO 22878
22903: POP
22904: POP
// result := [ tmp , 0 , 0 , p ] ;
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_VAR 0 4
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_VAR 0 11
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
// exit ;
22932: GO 25622
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22934: LD_EXP 50
22938: PUSH
22939: LD_VAR 0 1
22943: ARRAY
22944: PPUSH
22945: LD_INT 2
22947: PUSH
22948: LD_INT 30
22950: PUSH
22951: LD_INT 6
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 30
22960: PUSH
22961: LD_INT 7
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 30
22970: PUSH
22971: LD_INT 8
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: PPUSH
22984: CALL_OW 72
22988: NOT
22989: PUSH
22990: LD_EXP 50
22994: PUSH
22995: LD_VAR 0 1
22999: ARRAY
23000: PPUSH
23001: LD_INT 30
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 72
23015: NOT
23016: AND
23017: IFFALSE 23089
// begin if eng = tmp then
23019: LD_VAR 0 6
23023: PUSH
23024: LD_VAR 0 4
23028: EQUAL
23029: IFFALSE 23033
// exit ;
23031: GO 25622
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
23033: LD_ADDR_EXP 92
23037: PUSH
23038: LD_EXP 92
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 1
23055: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_VAR 0 4
23068: PUSH
23069: LD_VAR 0 6
23073: DIFF
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: ST_TO_ADDR
// exit ;
23087: GO 25622
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23089: LD_EXP 77
23093: PUSH
23094: LD_EXP 76
23098: PUSH
23099: LD_VAR 0 1
23103: ARRAY
23104: ARRAY
23105: PUSH
23106: LD_EXP 50
23110: PUSH
23111: LD_VAR 0 1
23115: ARRAY
23116: PPUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 30
23122: PUSH
23123: LD_INT 6
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 30
23132: PUSH
23133: LD_INT 7
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 8
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: PPUSH
23156: CALL_OW 72
23160: AND
23161: PUSH
23162: LD_EXP 50
23166: PUSH
23167: LD_VAR 0 1
23171: ARRAY
23172: PPUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PPUSH
23183: CALL_OW 72
23187: NOT
23188: AND
23189: IFFALSE 23403
// begin if sci >= 6 then
23191: LD_VAR 0 8
23195: PUSH
23196: LD_INT 6
23198: GREATEREQUAL
23199: IFFALSE 23203
// exit ;
23201: GO 25622
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
23203: LD_ADDR_EXP 92
23207: PUSH
23208: LD_EXP 92
23212: PPUSH
23213: LD_VAR 0 1
23217: PPUSH
23218: LD_INT 2
23220: PPUSH
23221: CALL_OW 1
23225: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
23226: LD_ADDR_VAR 0 9
23230: PUSH
23231: LD_VAR 0 4
23235: PUSH
23236: LD_VAR 0 8
23240: DIFF
23241: PPUSH
23242: LD_INT 4
23244: PPUSH
23245: CALL 88916 0 2
23249: ST_TO_ADDR
// p := [ ] ;
23250: LD_ADDR_VAR 0 11
23254: PUSH
23255: EMPTY
23256: ST_TO_ADDR
// if sci < 6 and sort > 6 then
23257: LD_VAR 0 8
23261: PUSH
23262: LD_INT 6
23264: LESS
23265: PUSH
23266: LD_VAR 0 9
23270: PUSH
23271: LD_INT 6
23273: GREATER
23274: AND
23275: IFFALSE 23356
// begin for i = 1 to 6 - sci do
23277: LD_ADDR_VAR 0 3
23281: PUSH
23282: DOUBLE
23283: LD_INT 1
23285: DEC
23286: ST_TO_ADDR
23287: LD_INT 6
23289: PUSH
23290: LD_VAR 0 8
23294: MINUS
23295: PUSH
23296: FOR_TO
23297: IFFALSE 23352
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
23299: LD_ADDR_VAR 0 11
23303: PUSH
23304: LD_VAR 0 11
23308: PPUSH
23309: LD_VAR 0 11
23313: PUSH
23314: LD_INT 1
23316: PLUS
23317: PPUSH
23318: LD_VAR 0 9
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: CALL_OW 2
23331: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
23332: LD_ADDR_VAR 0 9
23336: PUSH
23337: LD_VAR 0 9
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 3
23349: ST_TO_ADDR
// end ;
23350: GO 23296
23352: POP
23353: POP
// end else
23354: GO 23376
// if sort then
23356: LD_VAR 0 9
23360: IFFALSE 23376
// p := sort [ 1 ] ;
23362: LD_ADDR_VAR 0 11
23366: PUSH
23367: LD_VAR 0 9
23371: PUSH
23372: LD_INT 1
23374: ARRAY
23375: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_VAR 0 11
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: ST_TO_ADDR
// exit ;
23401: GO 25622
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23403: LD_EXP 77
23407: PUSH
23408: LD_EXP 76
23412: PUSH
23413: LD_VAR 0 1
23417: ARRAY
23418: ARRAY
23419: PUSH
23420: LD_EXP 50
23424: PUSH
23425: LD_VAR 0 1
23429: ARRAY
23430: PPUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 6
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 7
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 8
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: PPUSH
23470: CALL_OW 72
23474: AND
23475: PUSH
23476: LD_EXP 50
23480: PUSH
23481: LD_VAR 0 1
23485: ARRAY
23486: PPUSH
23487: LD_INT 30
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PPUSH
23497: CALL_OW 72
23501: AND
23502: IFFALSE 24236
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
23504: LD_ADDR_EXP 92
23508: PUSH
23509: LD_EXP 92
23513: PPUSH
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 3
23521: PPUSH
23522: CALL_OW 1
23526: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// if not eng then
23550: LD_VAR 0 6
23554: NOT
23555: IFFALSE 23618
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
23557: LD_ADDR_VAR 0 11
23561: PUSH
23562: LD_VAR 0 4
23566: PPUSH
23567: LD_INT 2
23569: PPUSH
23570: CALL 88916 0 2
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
23579: LD_ADDR_VAR 0 2
23583: PUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_INT 2
23591: PPUSH
23592: LD_VAR 0 11
23596: PPUSH
23597: CALL_OW 1
23601: ST_TO_ADDR
// tmp := tmp diff p ;
23602: LD_ADDR_VAR 0 4
23606: PUSH
23607: LD_VAR 0 4
23611: PUSH
23612: LD_VAR 0 11
23616: DIFF
23617: ST_TO_ADDR
// end ; if tmp and sci < 6 then
23618: LD_VAR 0 4
23622: PUSH
23623: LD_VAR 0 8
23627: PUSH
23628: LD_INT 6
23630: LESS
23631: AND
23632: IFFALSE 23820
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
23634: LD_ADDR_VAR 0 9
23638: PUSH
23639: LD_VAR 0 4
23643: PUSH
23644: LD_VAR 0 8
23648: PUSH
23649: LD_VAR 0 7
23653: UNION
23654: DIFF
23655: PPUSH
23656: LD_INT 4
23658: PPUSH
23659: CALL 88916 0 2
23663: ST_TO_ADDR
// p := [ ] ;
23664: LD_ADDR_VAR 0 11
23668: PUSH
23669: EMPTY
23670: ST_TO_ADDR
// if sort then
23671: LD_VAR 0 9
23675: IFFALSE 23791
// for i = 1 to 6 - sci do
23677: LD_ADDR_VAR 0 3
23681: PUSH
23682: DOUBLE
23683: LD_INT 1
23685: DEC
23686: ST_TO_ADDR
23687: LD_INT 6
23689: PUSH
23690: LD_VAR 0 8
23694: MINUS
23695: PUSH
23696: FOR_TO
23697: IFFALSE 23789
// begin if i = sort then
23699: LD_VAR 0 3
23703: PUSH
23704: LD_VAR 0 9
23708: EQUAL
23709: IFFALSE 23713
// break ;
23711: GO 23789
// if GetClass ( i ) = 4 then
23713: LD_VAR 0 3
23717: PPUSH
23718: CALL_OW 257
23722: PUSH
23723: LD_INT 4
23725: EQUAL
23726: IFFALSE 23730
// continue ;
23728: GO 23696
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23730: LD_ADDR_VAR 0 11
23734: PUSH
23735: LD_VAR 0 11
23739: PPUSH
23740: LD_VAR 0 11
23744: PUSH
23745: LD_INT 1
23747: PLUS
23748: PPUSH
23749: LD_VAR 0 9
23753: PUSH
23754: LD_VAR 0 3
23758: ARRAY
23759: PPUSH
23760: CALL_OW 2
23764: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_VAR 0 4
23774: PUSH
23775: LD_VAR 0 9
23779: PUSH
23780: LD_VAR 0 3
23784: ARRAY
23785: DIFF
23786: ST_TO_ADDR
// end ;
23787: GO 23696
23789: POP
23790: POP
// if p then
23791: LD_VAR 0 11
23795: IFFALSE 23820
// result := Replace ( result , 4 , p ) ;
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_VAR 0 2
23806: PPUSH
23807: LD_INT 4
23809: PPUSH
23810: LD_VAR 0 11
23814: PPUSH
23815: CALL_OW 1
23819: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23820: LD_VAR 0 4
23824: PUSH
23825: LD_VAR 0 7
23829: PUSH
23830: LD_INT 6
23832: LESS
23833: AND
23834: IFFALSE 24022
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23836: LD_ADDR_VAR 0 9
23840: PUSH
23841: LD_VAR 0 4
23845: PUSH
23846: LD_VAR 0 8
23850: PUSH
23851: LD_VAR 0 7
23855: UNION
23856: DIFF
23857: PPUSH
23858: LD_INT 3
23860: PPUSH
23861: CALL 88916 0 2
23865: ST_TO_ADDR
// p := [ ] ;
23866: LD_ADDR_VAR 0 11
23870: PUSH
23871: EMPTY
23872: ST_TO_ADDR
// if sort then
23873: LD_VAR 0 9
23877: IFFALSE 23993
// for i = 1 to 6 - mech do
23879: LD_ADDR_VAR 0 3
23883: PUSH
23884: DOUBLE
23885: LD_INT 1
23887: DEC
23888: ST_TO_ADDR
23889: LD_INT 6
23891: PUSH
23892: LD_VAR 0 7
23896: MINUS
23897: PUSH
23898: FOR_TO
23899: IFFALSE 23991
// begin if i = sort then
23901: LD_VAR 0 3
23905: PUSH
23906: LD_VAR 0 9
23910: EQUAL
23911: IFFALSE 23915
// break ;
23913: GO 23991
// if GetClass ( i ) = 3 then
23915: LD_VAR 0 3
23919: PPUSH
23920: CALL_OW 257
23924: PUSH
23925: LD_INT 3
23927: EQUAL
23928: IFFALSE 23932
// continue ;
23930: GO 23898
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23932: LD_ADDR_VAR 0 11
23936: PUSH
23937: LD_VAR 0 11
23941: PPUSH
23942: LD_VAR 0 11
23946: PUSH
23947: LD_INT 1
23949: PLUS
23950: PPUSH
23951: LD_VAR 0 9
23955: PUSH
23956: LD_VAR 0 3
23960: ARRAY
23961: PPUSH
23962: CALL_OW 2
23966: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23967: LD_ADDR_VAR 0 4
23971: PUSH
23972: LD_VAR 0 4
23976: PUSH
23977: LD_VAR 0 9
23981: PUSH
23982: LD_VAR 0 3
23986: ARRAY
23987: DIFF
23988: ST_TO_ADDR
// end ;
23989: GO 23898
23991: POP
23992: POP
// if p then
23993: LD_VAR 0 11
23997: IFFALSE 24022
// result := Replace ( result , 3 , p ) ;
23999: LD_ADDR_VAR 0 2
24003: PUSH
24004: LD_VAR 0 2
24008: PPUSH
24009: LD_INT 3
24011: PPUSH
24012: LD_VAR 0 11
24016: PPUSH
24017: CALL_OW 1
24021: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
24022: LD_VAR 0 4
24026: PUSH
24027: LD_INT 6
24029: GREATER
24030: PUSH
24031: LD_VAR 0 6
24035: PUSH
24036: LD_INT 6
24038: LESS
24039: AND
24040: IFFALSE 24234
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24042: LD_ADDR_VAR 0 9
24046: PUSH
24047: LD_VAR 0 4
24051: PUSH
24052: LD_VAR 0 8
24056: PUSH
24057: LD_VAR 0 7
24061: UNION
24062: PUSH
24063: LD_VAR 0 6
24067: UNION
24068: DIFF
24069: PPUSH
24070: LD_INT 2
24072: PPUSH
24073: CALL 88916 0 2
24077: ST_TO_ADDR
// p := [ ] ;
24078: LD_ADDR_VAR 0 11
24082: PUSH
24083: EMPTY
24084: ST_TO_ADDR
// if sort then
24085: LD_VAR 0 9
24089: IFFALSE 24205
// for i = 1 to 6 - eng do
24091: LD_ADDR_VAR 0 3
24095: PUSH
24096: DOUBLE
24097: LD_INT 1
24099: DEC
24100: ST_TO_ADDR
24101: LD_INT 6
24103: PUSH
24104: LD_VAR 0 6
24108: MINUS
24109: PUSH
24110: FOR_TO
24111: IFFALSE 24203
// begin if i = sort then
24113: LD_VAR 0 3
24117: PUSH
24118: LD_VAR 0 9
24122: EQUAL
24123: IFFALSE 24127
// break ;
24125: GO 24203
// if GetClass ( i ) = 2 then
24127: LD_VAR 0 3
24131: PPUSH
24132: CALL_OW 257
24136: PUSH
24137: LD_INT 2
24139: EQUAL
24140: IFFALSE 24144
// continue ;
24142: GO 24110
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24144: LD_ADDR_VAR 0 11
24148: PUSH
24149: LD_VAR 0 11
24153: PPUSH
24154: LD_VAR 0 11
24158: PUSH
24159: LD_INT 1
24161: PLUS
24162: PPUSH
24163: LD_VAR 0 9
24167: PUSH
24168: LD_VAR 0 3
24172: ARRAY
24173: PPUSH
24174: CALL_OW 2
24178: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24179: LD_ADDR_VAR 0 4
24183: PUSH
24184: LD_VAR 0 4
24188: PUSH
24189: LD_VAR 0 9
24193: PUSH
24194: LD_VAR 0 3
24198: ARRAY
24199: DIFF
24200: ST_TO_ADDR
// end ;
24201: GO 24110
24203: POP
24204: POP
// if p then
24205: LD_VAR 0 11
24209: IFFALSE 24234
// result := Replace ( result , 2 , p ) ;
24211: LD_ADDR_VAR 0 2
24215: PUSH
24216: LD_VAR 0 2
24220: PPUSH
24221: LD_INT 2
24223: PPUSH
24224: LD_VAR 0 11
24228: PPUSH
24229: CALL_OW 1
24233: ST_TO_ADDR
// end ; exit ;
24234: GO 25622
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
24236: LD_EXP 77
24240: PUSH
24241: LD_EXP 76
24245: PUSH
24246: LD_VAR 0 1
24250: ARRAY
24251: ARRAY
24252: NOT
24253: PUSH
24254: LD_EXP 50
24258: PUSH
24259: LD_VAR 0 1
24263: ARRAY
24264: PPUSH
24265: LD_INT 30
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 72
24279: AND
24280: PUSH
24281: LD_EXP 55
24285: PUSH
24286: LD_VAR 0 1
24290: ARRAY
24291: AND
24292: IFFALSE 24900
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
24294: LD_ADDR_EXP 92
24298: PUSH
24299: LD_EXP 92
24303: PPUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: LD_INT 5
24311: PPUSH
24312: CALL_OW 1
24316: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
// if sci > 1 then
24340: LD_VAR 0 8
24344: PUSH
24345: LD_INT 1
24347: GREATER
24348: IFFALSE 24376
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
24350: LD_ADDR_VAR 0 4
24354: PUSH
24355: LD_VAR 0 4
24359: PUSH
24360: LD_VAR 0 8
24364: PUSH
24365: LD_VAR 0 8
24369: PUSH
24370: LD_INT 1
24372: ARRAY
24373: DIFF
24374: DIFF
24375: ST_TO_ADDR
// if tmp and not sci then
24376: LD_VAR 0 4
24380: PUSH
24381: LD_VAR 0 8
24385: NOT
24386: AND
24387: IFFALSE 24456
// begin sort := SortBySkill ( tmp , 4 ) ;
24389: LD_ADDR_VAR 0 9
24393: PUSH
24394: LD_VAR 0 4
24398: PPUSH
24399: LD_INT 4
24401: PPUSH
24402: CALL 88916 0 2
24406: ST_TO_ADDR
// if sort then
24407: LD_VAR 0 9
24411: IFFALSE 24427
// p := sort [ 1 ] ;
24413: LD_ADDR_VAR 0 11
24417: PUSH
24418: LD_VAR 0 9
24422: PUSH
24423: LD_INT 1
24425: ARRAY
24426: ST_TO_ADDR
// if p then
24427: LD_VAR 0 11
24431: IFFALSE 24456
// result := Replace ( result , 4 , p ) ;
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_VAR 0 2
24442: PPUSH
24443: LD_INT 4
24445: PPUSH
24446: LD_VAR 0 11
24450: PPUSH
24451: CALL_OW 1
24455: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24456: LD_ADDR_VAR 0 4
24460: PUSH
24461: LD_VAR 0 4
24465: PUSH
24466: LD_VAR 0 7
24470: DIFF
24471: ST_TO_ADDR
// if tmp and mech < 6 then
24472: LD_VAR 0 4
24476: PUSH
24477: LD_VAR 0 7
24481: PUSH
24482: LD_INT 6
24484: LESS
24485: AND
24486: IFFALSE 24674
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
24488: LD_ADDR_VAR 0 9
24492: PUSH
24493: LD_VAR 0 4
24497: PUSH
24498: LD_VAR 0 8
24502: PUSH
24503: LD_VAR 0 7
24507: UNION
24508: DIFF
24509: PPUSH
24510: LD_INT 3
24512: PPUSH
24513: CALL 88916 0 2
24517: ST_TO_ADDR
// p := [ ] ;
24518: LD_ADDR_VAR 0 11
24522: PUSH
24523: EMPTY
24524: ST_TO_ADDR
// if sort then
24525: LD_VAR 0 9
24529: IFFALSE 24645
// for i = 1 to 6 - mech do
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: DOUBLE
24537: LD_INT 1
24539: DEC
24540: ST_TO_ADDR
24541: LD_INT 6
24543: PUSH
24544: LD_VAR 0 7
24548: MINUS
24549: PUSH
24550: FOR_TO
24551: IFFALSE 24643
// begin if i = sort then
24553: LD_VAR 0 3
24557: PUSH
24558: LD_VAR 0 9
24562: EQUAL
24563: IFFALSE 24567
// break ;
24565: GO 24643
// if GetClass ( i ) = 3 then
24567: LD_VAR 0 3
24571: PPUSH
24572: CALL_OW 257
24576: PUSH
24577: LD_INT 3
24579: EQUAL
24580: IFFALSE 24584
// continue ;
24582: GO 24550
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24584: LD_ADDR_VAR 0 11
24588: PUSH
24589: LD_VAR 0 11
24593: PPUSH
24594: LD_VAR 0 11
24598: PUSH
24599: LD_INT 1
24601: PLUS
24602: PPUSH
24603: LD_VAR 0 9
24607: PUSH
24608: LD_VAR 0 3
24612: ARRAY
24613: PPUSH
24614: CALL_OW 2
24618: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24619: LD_ADDR_VAR 0 4
24623: PUSH
24624: LD_VAR 0 4
24628: PUSH
24629: LD_VAR 0 9
24633: PUSH
24634: LD_VAR 0 3
24638: ARRAY
24639: DIFF
24640: ST_TO_ADDR
// end ;
24641: GO 24550
24643: POP
24644: POP
// if p then
24645: LD_VAR 0 11
24649: IFFALSE 24674
// result := Replace ( result , 3 , p ) ;
24651: LD_ADDR_VAR 0 2
24655: PUSH
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_INT 3
24663: PPUSH
24664: LD_VAR 0 11
24668: PPUSH
24669: CALL_OW 1
24673: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24674: LD_ADDR_VAR 0 4
24678: PUSH
24679: LD_VAR 0 4
24683: PUSH
24684: LD_VAR 0 6
24688: DIFF
24689: ST_TO_ADDR
// if tmp and eng < 6 then
24690: LD_VAR 0 4
24694: PUSH
24695: LD_VAR 0 6
24699: PUSH
24700: LD_INT 6
24702: LESS
24703: AND
24704: IFFALSE 24898
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24706: LD_ADDR_VAR 0 9
24710: PUSH
24711: LD_VAR 0 4
24715: PUSH
24716: LD_VAR 0 8
24720: PUSH
24721: LD_VAR 0 7
24725: UNION
24726: PUSH
24727: LD_VAR 0 6
24731: UNION
24732: DIFF
24733: PPUSH
24734: LD_INT 2
24736: PPUSH
24737: CALL 88916 0 2
24741: ST_TO_ADDR
// p := [ ] ;
24742: LD_ADDR_VAR 0 11
24746: PUSH
24747: EMPTY
24748: ST_TO_ADDR
// if sort then
24749: LD_VAR 0 9
24753: IFFALSE 24869
// for i = 1 to 6 - eng do
24755: LD_ADDR_VAR 0 3
24759: PUSH
24760: DOUBLE
24761: LD_INT 1
24763: DEC
24764: ST_TO_ADDR
24765: LD_INT 6
24767: PUSH
24768: LD_VAR 0 6
24772: MINUS
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24867
// begin if i = sort then
24777: LD_VAR 0 3
24781: PUSH
24782: LD_VAR 0 9
24786: EQUAL
24787: IFFALSE 24791
// break ;
24789: GO 24867
// if GetClass ( i ) = 2 then
24791: LD_VAR 0 3
24795: PPUSH
24796: CALL_OW 257
24800: PUSH
24801: LD_INT 2
24803: EQUAL
24804: IFFALSE 24808
// continue ;
24806: GO 24774
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24808: LD_ADDR_VAR 0 11
24812: PUSH
24813: LD_VAR 0 11
24817: PPUSH
24818: LD_VAR 0 11
24822: PUSH
24823: LD_INT 1
24825: PLUS
24826: PPUSH
24827: LD_VAR 0 9
24831: PUSH
24832: LD_VAR 0 3
24836: ARRAY
24837: PPUSH
24838: CALL_OW 2
24842: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24843: LD_ADDR_VAR 0 4
24847: PUSH
24848: LD_VAR 0 4
24852: PUSH
24853: LD_VAR 0 9
24857: PUSH
24858: LD_VAR 0 3
24862: ARRAY
24863: DIFF
24864: ST_TO_ADDR
// end ;
24865: GO 24774
24867: POP
24868: POP
// if p then
24869: LD_VAR 0 11
24873: IFFALSE 24898
// result := Replace ( result , 2 , p ) ;
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_VAR 0 2
24884: PPUSH
24885: LD_INT 2
24887: PPUSH
24888: LD_VAR 0 11
24892: PPUSH
24893: CALL_OW 1
24897: ST_TO_ADDR
// end ; exit ;
24898: GO 25622
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24900: LD_EXP 77
24904: PUSH
24905: LD_EXP 76
24909: PUSH
24910: LD_VAR 0 1
24914: ARRAY
24915: ARRAY
24916: NOT
24917: PUSH
24918: LD_EXP 50
24922: PUSH
24923: LD_VAR 0 1
24927: ARRAY
24928: PPUSH
24929: LD_INT 30
24931: PUSH
24932: LD_INT 3
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PPUSH
24939: CALL_OW 72
24943: AND
24944: PUSH
24945: LD_EXP 55
24949: PUSH
24950: LD_VAR 0 1
24954: ARRAY
24955: NOT
24956: AND
24957: IFFALSE 25622
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24959: LD_ADDR_EXP 92
24963: PUSH
24964: LD_EXP 92
24968: PPUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: LD_INT 6
24976: PPUSH
24977: CALL_OW 1
24981: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24982: LD_ADDR_VAR 0 2
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: ST_TO_ADDR
// if sci >= 1 then
25005: LD_VAR 0 8
25009: PUSH
25010: LD_INT 1
25012: GREATEREQUAL
25013: IFFALSE 25035
// tmp := tmp diff sci [ 1 ] ;
25015: LD_ADDR_VAR 0 4
25019: PUSH
25020: LD_VAR 0 4
25024: PUSH
25025: LD_VAR 0 8
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: DIFF
25034: ST_TO_ADDR
// if tmp and not sci then
25035: LD_VAR 0 4
25039: PUSH
25040: LD_VAR 0 8
25044: NOT
25045: AND
25046: IFFALSE 25115
// begin sort := SortBySkill ( tmp , 4 ) ;
25048: LD_ADDR_VAR 0 9
25052: PUSH
25053: LD_VAR 0 4
25057: PPUSH
25058: LD_INT 4
25060: PPUSH
25061: CALL 88916 0 2
25065: ST_TO_ADDR
// if sort then
25066: LD_VAR 0 9
25070: IFFALSE 25086
// p := sort [ 1 ] ;
25072: LD_ADDR_VAR 0 11
25076: PUSH
25077: LD_VAR 0 9
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: ST_TO_ADDR
// if p then
25086: LD_VAR 0 11
25090: IFFALSE 25115
// result := Replace ( result , 4 , p ) ;
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_VAR 0 2
25101: PPUSH
25102: LD_INT 4
25104: PPUSH
25105: LD_VAR 0 11
25109: PPUSH
25110: CALL_OW 1
25114: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
25115: LD_ADDR_VAR 0 4
25119: PUSH
25120: LD_VAR 0 4
25124: PUSH
25125: LD_VAR 0 7
25129: DIFF
25130: ST_TO_ADDR
// if tmp and mech < 6 then
25131: LD_VAR 0 4
25135: PUSH
25136: LD_VAR 0 7
25140: PUSH
25141: LD_INT 6
25143: LESS
25144: AND
25145: IFFALSE 25327
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
25147: LD_ADDR_VAR 0 9
25151: PUSH
25152: LD_VAR 0 4
25156: PUSH
25157: LD_VAR 0 7
25161: DIFF
25162: PPUSH
25163: LD_INT 3
25165: PPUSH
25166: CALL 88916 0 2
25170: ST_TO_ADDR
// p := [ ] ;
25171: LD_ADDR_VAR 0 11
25175: PUSH
25176: EMPTY
25177: ST_TO_ADDR
// if sort then
25178: LD_VAR 0 9
25182: IFFALSE 25298
// for i = 1 to 6 - mech do
25184: LD_ADDR_VAR 0 3
25188: PUSH
25189: DOUBLE
25190: LD_INT 1
25192: DEC
25193: ST_TO_ADDR
25194: LD_INT 6
25196: PUSH
25197: LD_VAR 0 7
25201: MINUS
25202: PUSH
25203: FOR_TO
25204: IFFALSE 25296
// begin if i = sort then
25206: LD_VAR 0 3
25210: PUSH
25211: LD_VAR 0 9
25215: EQUAL
25216: IFFALSE 25220
// break ;
25218: GO 25296
// if GetClass ( i ) = 3 then
25220: LD_VAR 0 3
25224: PPUSH
25225: CALL_OW 257
25229: PUSH
25230: LD_INT 3
25232: EQUAL
25233: IFFALSE 25237
// continue ;
25235: GO 25203
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25237: LD_ADDR_VAR 0 11
25241: PUSH
25242: LD_VAR 0 11
25246: PPUSH
25247: LD_VAR 0 11
25251: PUSH
25252: LD_INT 1
25254: PLUS
25255: PPUSH
25256: LD_VAR 0 9
25260: PUSH
25261: LD_VAR 0 3
25265: ARRAY
25266: PPUSH
25267: CALL_OW 2
25271: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25272: LD_ADDR_VAR 0 4
25276: PUSH
25277: LD_VAR 0 4
25281: PUSH
25282: LD_VAR 0 9
25286: PUSH
25287: LD_VAR 0 3
25291: ARRAY
25292: DIFF
25293: ST_TO_ADDR
// end ;
25294: GO 25203
25296: POP
25297: POP
// if p then
25298: LD_VAR 0 11
25302: IFFALSE 25327
// result := Replace ( result , 3 , p ) ;
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: LD_VAR 0 2
25313: PPUSH
25314: LD_INT 3
25316: PPUSH
25317: LD_VAR 0 11
25321: PPUSH
25322: CALL_OW 1
25326: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
25327: LD_ADDR_VAR 0 4
25331: PUSH
25332: LD_VAR 0 4
25336: PUSH
25337: LD_VAR 0 6
25341: DIFF
25342: ST_TO_ADDR
// if tmp and eng < 4 then
25343: LD_VAR 0 4
25347: PUSH
25348: LD_VAR 0 6
25352: PUSH
25353: LD_INT 4
25355: LESS
25356: AND
25357: IFFALSE 25547
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
25359: LD_ADDR_VAR 0 9
25363: PUSH
25364: LD_VAR 0 4
25368: PUSH
25369: LD_VAR 0 7
25373: PUSH
25374: LD_VAR 0 6
25378: UNION
25379: DIFF
25380: PPUSH
25381: LD_INT 2
25383: PPUSH
25384: CALL 88916 0 2
25388: ST_TO_ADDR
// p := [ ] ;
25389: LD_ADDR_VAR 0 11
25393: PUSH
25394: EMPTY
25395: ST_TO_ADDR
// if sort then
25396: LD_VAR 0 9
25400: IFFALSE 25516
// for i = 1 to 4 - eng do
25402: LD_ADDR_VAR 0 3
25406: PUSH
25407: DOUBLE
25408: LD_INT 1
25410: DEC
25411: ST_TO_ADDR
25412: LD_INT 4
25414: PUSH
25415: LD_VAR 0 6
25419: MINUS
25420: PUSH
25421: FOR_TO
25422: IFFALSE 25514
// begin if i = sort then
25424: LD_VAR 0 3
25428: PUSH
25429: LD_VAR 0 9
25433: EQUAL
25434: IFFALSE 25438
// break ;
25436: GO 25514
// if GetClass ( i ) = 2 then
25438: LD_VAR 0 3
25442: PPUSH
25443: CALL_OW 257
25447: PUSH
25448: LD_INT 2
25450: EQUAL
25451: IFFALSE 25455
// continue ;
25453: GO 25421
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25455: LD_ADDR_VAR 0 11
25459: PUSH
25460: LD_VAR 0 11
25464: PPUSH
25465: LD_VAR 0 11
25469: PUSH
25470: LD_INT 1
25472: PLUS
25473: PPUSH
25474: LD_VAR 0 9
25478: PUSH
25479: LD_VAR 0 3
25483: ARRAY
25484: PPUSH
25485: CALL_OW 2
25489: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25490: LD_ADDR_VAR 0 4
25494: PUSH
25495: LD_VAR 0 4
25499: PUSH
25500: LD_VAR 0 9
25504: PUSH
25505: LD_VAR 0 3
25509: ARRAY
25510: DIFF
25511: ST_TO_ADDR
// end ;
25512: GO 25421
25514: POP
25515: POP
// if p then
25516: LD_VAR 0 11
25520: IFFALSE 25545
// result := Replace ( result , 2 , p ) ;
25522: LD_ADDR_VAR 0 2
25526: PUSH
25527: LD_VAR 0 2
25531: PPUSH
25532: LD_INT 2
25534: PPUSH
25535: LD_VAR 0 11
25539: PPUSH
25540: CALL_OW 1
25544: ST_TO_ADDR
// end else
25545: GO 25591
// for i = eng downto 5 do
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: DOUBLE
25553: LD_VAR 0 6
25557: INC
25558: ST_TO_ADDR
25559: LD_INT 5
25561: PUSH
25562: FOR_DOWNTO
25563: IFFALSE 25589
// tmp := tmp union eng [ i ] ;
25565: LD_ADDR_VAR 0 4
25569: PUSH
25570: LD_VAR 0 4
25574: PUSH
25575: LD_VAR 0 6
25579: PUSH
25580: LD_VAR 0 3
25584: ARRAY
25585: UNION
25586: ST_TO_ADDR
25587: GO 25562
25589: POP
25590: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
25591: LD_ADDR_VAR 0 2
25595: PUSH
25596: LD_VAR 0 2
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: LD_VAR 0 4
25608: PUSH
25609: LD_VAR 0 5
25613: DIFF
25614: PPUSH
25615: CALL_OW 1
25619: ST_TO_ADDR
// exit ;
25620: GO 25622
// end ; end ;
25622: LD_VAR 0 2
25626: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
25631: PPUSH
// if not mc_bases then
25632: LD_EXP 50
25636: NOT
25637: IFFALSE 25641
// exit ;
25639: GO 25747
// for i = 1 to mc_bases do
25641: LD_ADDR_VAR 0 2
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_EXP 50
25655: PUSH
25656: FOR_TO
25657: IFFALSE 25738
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25659: LD_ADDR_VAR 0 3
25663: PUSH
25664: LD_EXP 50
25668: PUSH
25669: LD_VAR 0 2
25673: ARRAY
25674: PPUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: LD_INT 24
25690: PUSH
25691: LD_INT 1000
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PPUSH
25706: CALL_OW 72
25710: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25711: LD_ADDR_EXP 51
25715: PUSH
25716: LD_EXP 51
25720: PPUSH
25721: LD_VAR 0 2
25725: PPUSH
25726: LD_VAR 0 3
25730: PPUSH
25731: CALL_OW 1
25735: ST_TO_ADDR
// end ;
25736: GO 25656
25738: POP
25739: POP
// RaiseSailEvent ( 101 ) ;
25740: LD_INT 101
25742: PPUSH
25743: CALL_OW 427
// end ;
25747: LD_VAR 0 1
25751: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// if not mc_bases then
25761: LD_EXP 50
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 26343
// for i = 1 to mc_bases do
25770: LD_ADDR_VAR 0 2
25774: PUSH
25775: DOUBLE
25776: LD_INT 1
25778: DEC
25779: ST_TO_ADDR
25780: LD_EXP 50
25784: PUSH
25785: FOR_TO
25786: IFFALSE 26334
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25788: LD_ADDR_VAR 0 5
25792: PUSH
25793: LD_EXP 50
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: PUSH
25804: LD_EXP 79
25808: PUSH
25809: LD_VAR 0 2
25813: ARRAY
25814: UNION
25815: PPUSH
25816: LD_INT 21
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 3
25831: PUSH
25832: LD_INT 54
25834: PUSH
25835: EMPTY
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 3
25844: PUSH
25845: LD_INT 24
25847: PUSH
25848: LD_INT 800
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 72
25872: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25873: LD_ADDR_VAR 0 6
25877: PUSH
25878: LD_EXP 50
25882: PUSH
25883: LD_VAR 0 2
25887: ARRAY
25888: PPUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 54
25907: PUSH
25908: EMPTY
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: LD_INT 24
25920: PUSH
25921: LD_INT 250
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PPUSH
25941: CALL_OW 72
25945: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25946: LD_ADDR_VAR 0 7
25950: PUSH
25951: LD_VAR 0 5
25955: PUSH
25956: LD_VAR 0 6
25960: DIFF
25961: ST_TO_ADDR
// if not need_heal_1 then
25962: LD_VAR 0 6
25966: NOT
25967: IFFALSE 26000
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25969: LD_ADDR_EXP 53
25973: PUSH
25974: LD_EXP 53
25978: PPUSH
25979: LD_VAR 0 2
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: EMPTY
25992: PPUSH
25993: CALL 54658 0 3
25997: ST_TO_ADDR
25998: GO 26070
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
26000: LD_ADDR_EXP 53
26004: PUSH
26005: LD_EXP 53
26009: PPUSH
26010: LD_VAR 0 2
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: LD_EXP 53
26026: PUSH
26027: LD_VAR 0 2
26031: ARRAY
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 24
26042: PUSH
26043: LD_INT 1000
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PPUSH
26054: CALL_OW 72
26058: PUSH
26059: LD_VAR 0 6
26063: UNION
26064: PPUSH
26065: CALL 54658 0 3
26069: ST_TO_ADDR
// if not need_heal_2 then
26070: LD_VAR 0 7
26074: NOT
26075: IFFALSE 26108
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
26077: LD_ADDR_EXP 53
26081: PUSH
26082: LD_EXP 53
26086: PPUSH
26087: LD_VAR 0 2
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PPUSH
26099: EMPTY
26100: PPUSH
26101: CALL 54658 0 3
26105: ST_TO_ADDR
26106: GO 26140
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
26108: LD_ADDR_EXP 53
26112: PUSH
26113: LD_EXP 53
26117: PPUSH
26118: LD_VAR 0 2
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PPUSH
26130: LD_VAR 0 7
26134: PPUSH
26135: CALL 54658 0 3
26139: ST_TO_ADDR
// if need_heal_2 then
26140: LD_VAR 0 7
26144: IFFALSE 26316
// for j in need_heal_2 do
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_VAR 0 7
26155: PUSH
26156: FOR_IN
26157: IFFALSE 26314
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
26159: LD_ADDR_VAR 0 5
26163: PUSH
26164: LD_EXP 50
26168: PUSH
26169: LD_VAR 0 2
26173: ARRAY
26174: PPUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 30
26180: PUSH
26181: LD_INT 6
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 30
26190: PUSH
26191: LD_INT 7
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 30
26200: PUSH
26201: LD_INT 8
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 30
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 30
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 25
26230: PUSH
26231: LD_INT 4
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: PPUSH
26247: CALL_OW 72
26251: ST_TO_ADDR
// if tmp then
26252: LD_VAR 0 5
26256: IFFALSE 26312
// begin k := NearestUnitToUnit ( tmp , j ) ;
26258: LD_ADDR_VAR 0 4
26262: PUSH
26263: LD_VAR 0 5
26267: PPUSH
26268: LD_VAR 0 3
26272: PPUSH
26273: CALL_OW 74
26277: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
26278: LD_VAR 0 3
26282: PPUSH
26283: LD_VAR 0 4
26287: PPUSH
26288: CALL_OW 296
26292: PUSH
26293: LD_INT 7
26295: GREATER
26296: IFFALSE 26312
// ComMoveUnit ( j , k ) ;
26298: LD_VAR 0 3
26302: PPUSH
26303: LD_VAR 0 4
26307: PPUSH
26308: CALL_OW 112
// end ; end ;
26312: GO 26156
26314: POP
26315: POP
// if not need_heal_1 and not need_heal_2 then
26316: LD_VAR 0 6
26320: NOT
26321: PUSH
26322: LD_VAR 0 7
26326: NOT
26327: AND
26328: IFFALSE 26332
// continue ;
26330: GO 25785
// end ;
26332: GO 25785
26334: POP
26335: POP
// RaiseSailEvent ( 102 ) ;
26336: LD_INT 102
26338: PPUSH
26339: CALL_OW 427
// end ;
26343: LD_VAR 0 1
26347: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
26348: LD_INT 0
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
26354: PPUSH
26355: PPUSH
26356: PPUSH
26357: PPUSH
// if not mc_bases then
26358: LD_EXP 50
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 27207
// for i = 1 to mc_bases do
26367: LD_ADDR_VAR 0 2
26371: PUSH
26372: DOUBLE
26373: LD_INT 1
26375: DEC
26376: ST_TO_ADDR
26377: LD_EXP 50
26381: PUSH
26382: FOR_TO
26383: IFFALSE 27205
// begin if not mc_building_need_repair [ i ] then
26385: LD_EXP 51
26389: PUSH
26390: LD_VAR 0 2
26394: ARRAY
26395: NOT
26396: IFFALSE 26570
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
26398: LD_ADDR_VAR 0 6
26402: PUSH
26403: LD_EXP 69
26407: PUSH
26408: LD_VAR 0 2
26412: ARRAY
26413: PPUSH
26414: LD_INT 3
26416: PUSH
26417: LD_INT 24
26419: PUSH
26420: LD_INT 1000
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 34
26436: PUSH
26437: LD_INT 13
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 34
26446: PUSH
26447: LD_INT 52
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 72
26467: ST_TO_ADDR
// if cranes then
26468: LD_VAR 0 6
26472: IFFALSE 26534
// for j in cranes do
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_VAR 0 6
26483: PUSH
26484: FOR_IN
26485: IFFALSE 26532
// if not IsInArea ( j , mc_parking [ i ] ) then
26487: LD_VAR 0 3
26491: PPUSH
26492: LD_EXP 74
26496: PUSH
26497: LD_VAR 0 2
26501: ARRAY
26502: PPUSH
26503: CALL_OW 308
26507: NOT
26508: IFFALSE 26530
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26510: LD_VAR 0 3
26514: PPUSH
26515: LD_EXP 74
26519: PUSH
26520: LD_VAR 0 2
26524: ARRAY
26525: PPUSH
26526: CALL_OW 113
26530: GO 26484
26532: POP
26533: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
26534: LD_ADDR_EXP 52
26538: PUSH
26539: LD_EXP 52
26543: PPUSH
26544: LD_VAR 0 2
26548: PPUSH
26549: EMPTY
26550: PPUSH
26551: CALL_OW 1
26555: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
26556: LD_VAR 0 2
26560: PPUSH
26561: LD_INT 101
26563: PPUSH
26564: CALL 21460 0 2
// continue ;
26568: GO 26382
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
26570: LD_ADDR_EXP 56
26574: PUSH
26575: LD_EXP 56
26579: PPUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: EMPTY
26586: PPUSH
26587: CALL_OW 1
26591: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26592: LD_VAR 0 2
26596: PPUSH
26597: LD_INT 103
26599: PPUSH
26600: CALL 21460 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_EXP 50
26613: PUSH
26614: LD_VAR 0 2
26618: ARRAY
26619: PUSH
26620: LD_EXP 79
26624: PUSH
26625: LD_VAR 0 2
26629: ARRAY
26630: UNION
26631: PPUSH
26632: LD_INT 2
26634: PUSH
26635: LD_INT 25
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 25
26647: PUSH
26648: LD_INT 16
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: PPUSH
26663: CALL_OW 72
26667: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
26668: LD_ADDR_VAR 0 6
26672: PUSH
26673: LD_EXP 69
26677: PUSH
26678: LD_VAR 0 2
26682: ARRAY
26683: PPUSH
26684: LD_INT 2
26686: PUSH
26687: LD_INT 34
26689: PUSH
26690: LD_INT 13
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 34
26699: PUSH
26700: LD_INT 52
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 72
26716: ST_TO_ADDR
// if cranes then
26717: LD_VAR 0 6
26721: IFFALSE 26857
// begin for j in cranes do
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_VAR 0 6
26732: PUSH
26733: FOR_IN
26734: IFFALSE 26855
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26736: LD_VAR 0 3
26740: PPUSH
26741: CALL_OW 256
26745: PUSH
26746: LD_INT 500
26748: GREATEREQUAL
26749: PUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: CALL_OW 314
26759: NOT
26760: AND
26761: IFFALSE 26795
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26763: LD_VAR 0 3
26767: PPUSH
26768: LD_EXP 51
26772: PUSH
26773: LD_VAR 0 2
26777: ARRAY
26778: PPUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 74
26788: PPUSH
26789: CALL_OW 130
26793: GO 26853
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26795: LD_VAR 0 3
26799: PPUSH
26800: CALL_OW 256
26804: PUSH
26805: LD_INT 500
26807: LESS
26808: PUSH
26809: LD_VAR 0 3
26813: PPUSH
26814: LD_EXP 74
26818: PUSH
26819: LD_VAR 0 2
26823: ARRAY
26824: PPUSH
26825: CALL_OW 308
26829: NOT
26830: AND
26831: IFFALSE 26853
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26833: LD_VAR 0 3
26837: PPUSH
26838: LD_EXP 74
26842: PUSH
26843: LD_VAR 0 2
26847: ARRAY
26848: PPUSH
26849: CALL_OW 113
26853: GO 26733
26855: POP
26856: POP
// end ; if not tmp then
26857: LD_VAR 0 5
26861: NOT
26862: IFFALSE 26866
// continue ;
26864: GO 26382
// for j in tmp do
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: LD_VAR 0 5
26875: PUSH
26876: FOR_IN
26877: IFFALSE 27201
// begin if mc_need_heal [ i ] then
26879: LD_EXP 53
26883: PUSH
26884: LD_VAR 0 2
26888: ARRAY
26889: IFFALSE 26937
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26891: LD_VAR 0 3
26895: PUSH
26896: LD_EXP 53
26900: PUSH
26901: LD_VAR 0 2
26905: ARRAY
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: IN
26911: PUSH
26912: LD_VAR 0 3
26916: PUSH
26917: LD_EXP 53
26921: PUSH
26922: LD_VAR 0 2
26926: ARRAY
26927: PUSH
26928: LD_INT 2
26930: ARRAY
26931: IN
26932: OR
26933: IFFALSE 26937
// continue ;
26935: GO 26876
// if IsInUnit ( j ) then
26937: LD_VAR 0 3
26941: PPUSH
26942: CALL_OW 310
26946: IFFALSE 26957
// ComExitBuilding ( j ) ;
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
26957: LD_VAR 0 3
26961: PUSH
26962: LD_EXP 52
26966: PUSH
26967: LD_VAR 0 2
26971: ARRAY
26972: IN
26973: NOT
26974: IFFALSE 27032
// begin SetTag ( j , 101 ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: LD_INT 101
26983: PPUSH
26984: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26988: LD_ADDR_EXP 52
26992: PUSH
26993: LD_EXP 52
26997: PPUSH
26998: LD_VAR 0 2
27002: PUSH
27003: LD_EXP 52
27007: PUSH
27008: LD_VAR 0 2
27012: ARRAY
27013: PUSH
27014: LD_INT 1
27016: PLUS
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PPUSH
27022: LD_VAR 0 3
27026: PPUSH
27027: CALL 54658 0 3
27031: ST_TO_ADDR
// end ; wait ( 1 ) ;
27032: LD_INT 1
27034: PPUSH
27035: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
27039: LD_ADDR_VAR 0 7
27043: PUSH
27044: LD_EXP 51
27048: PUSH
27049: LD_VAR 0 2
27053: ARRAY
27054: ST_TO_ADDR
// if mc_scan [ i ] then
27055: LD_EXP 73
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: IFFALSE 27134
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
27067: LD_ADDR_VAR 0 7
27071: PUSH
27072: LD_EXP 51
27076: PUSH
27077: LD_VAR 0 2
27081: ARRAY
27082: PPUSH
27083: LD_INT 3
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: LD_INT 30
27091: PUSH
27092: LD_INT 32
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: LD_INT 33
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: LD_INT 31
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PPUSH
27129: CALL_OW 72
27133: ST_TO_ADDR
// if not to_repair_tmp then
27134: LD_VAR 0 7
27138: NOT
27139: IFFALSE 27143
// continue ;
27141: GO 26876
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
27143: LD_ADDR_VAR 0 8
27147: PUSH
27148: LD_VAR 0 7
27152: PPUSH
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 74
27162: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
27163: LD_VAR 0 8
27167: PPUSH
27168: LD_INT 14
27170: PPUSH
27171: CALL 57251 0 2
27175: PUSH
27176: LD_INT 4
27178: ARRAY
27179: PUSH
27180: LD_INT 5
27182: LESS
27183: IFFALSE 27199
// ComRepairBuilding ( j , to_repair ) ;
27185: LD_VAR 0 3
27189: PPUSH
27190: LD_VAR 0 8
27194: PPUSH
27195: CALL_OW 130
// end ;
27199: GO 26876
27201: POP
27202: POP
// end ;
27203: GO 26382
27205: POP
27206: POP
// end ;
27207: LD_VAR 0 1
27211: RET
// export function MC_Heal ; var i , j , tmp ; begin
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
// if not mc_bases then
27218: LD_EXP 50
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27629
// for i = 1 to mc_bases do
27227: LD_ADDR_VAR 0 2
27231: PUSH
27232: DOUBLE
27233: LD_INT 1
27235: DEC
27236: ST_TO_ADDR
27237: LD_EXP 50
27241: PUSH
27242: FOR_TO
27243: IFFALSE 27627
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
27245: LD_EXP 53
27249: PUSH
27250: LD_VAR 0 2
27254: ARRAY
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: NOT
27260: PUSH
27261: LD_EXP 53
27265: PUSH
27266: LD_VAR 0 2
27270: ARRAY
27271: PUSH
27272: LD_INT 2
27274: ARRAY
27275: NOT
27276: AND
27277: IFFALSE 27315
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
27279: LD_ADDR_EXP 54
27283: PUSH
27284: LD_EXP 54
27288: PPUSH
27289: LD_VAR 0 2
27293: PPUSH
27294: EMPTY
27295: PPUSH
27296: CALL_OW 1
27300: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_INT 102
27308: PPUSH
27309: CALL 21460 0 2
// continue ;
27313: GO 27242
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
27315: LD_ADDR_VAR 0 4
27319: PUSH
27320: LD_EXP 50
27324: PUSH
27325: LD_VAR 0 2
27329: ARRAY
27330: PPUSH
27331: LD_INT 25
27333: PUSH
27334: LD_INT 4
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PPUSH
27341: CALL_OW 72
27345: ST_TO_ADDR
// if not tmp then
27346: LD_VAR 0 4
27350: NOT
27351: IFFALSE 27355
// continue ;
27353: GO 27242
// if mc_taming [ i ] then
27355: LD_EXP 81
27359: PUSH
27360: LD_VAR 0 2
27364: ARRAY
27365: IFFALSE 27389
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
27367: LD_ADDR_EXP 81
27371: PUSH
27372: LD_EXP 81
27376: PPUSH
27377: LD_VAR 0 2
27381: PPUSH
27382: EMPTY
27383: PPUSH
27384: CALL_OW 1
27388: ST_TO_ADDR
// for j in tmp do
27389: LD_ADDR_VAR 0 3
27393: PUSH
27394: LD_VAR 0 4
27398: PUSH
27399: FOR_IN
27400: IFFALSE 27623
// begin if IsInUnit ( j ) then
27402: LD_VAR 0 3
27406: PPUSH
27407: CALL_OW 310
27411: IFFALSE 27422
// ComExitBuilding ( j ) ;
27413: LD_VAR 0 3
27417: PPUSH
27418: CALL_OW 122
// if not j in mc_healers [ i ] then
27422: LD_VAR 0 3
27426: PUSH
27427: LD_EXP 54
27431: PUSH
27432: LD_VAR 0 2
27436: ARRAY
27437: IN
27438: NOT
27439: IFFALSE 27485
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
27441: LD_ADDR_EXP 54
27445: PUSH
27446: LD_EXP 54
27450: PPUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_EXP 54
27460: PUSH
27461: LD_VAR 0 2
27465: ARRAY
27466: PUSH
27467: LD_INT 1
27469: PLUS
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: LD_VAR 0 3
27479: PPUSH
27480: CALL 54658 0 3
27484: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
27485: LD_VAR 0 3
27489: PPUSH
27490: CALL_OW 110
27494: PUSH
27495: LD_INT 102
27497: NONEQUAL
27498: IFFALSE 27512
// SetTag ( j , 102 ) ;
27500: LD_VAR 0 3
27504: PPUSH
27505: LD_INT 102
27507: PPUSH
27508: CALL_OW 109
// Wait ( 3 ) ;
27512: LD_INT 3
27514: PPUSH
27515: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
27519: LD_EXP 53
27523: PUSH
27524: LD_VAR 0 2
27528: ARRAY
27529: PUSH
27530: LD_INT 1
27532: ARRAY
27533: IFFALSE 27565
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
27535: LD_VAR 0 3
27539: PPUSH
27540: LD_EXP 53
27544: PUSH
27545: LD_VAR 0 2
27549: ARRAY
27550: PUSH
27551: LD_INT 1
27553: ARRAY
27554: PUSH
27555: LD_INT 1
27557: ARRAY
27558: PPUSH
27559: CALL_OW 128
27563: GO 27621
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
27565: LD_VAR 0 3
27569: PPUSH
27570: CALL_OW 314
27574: NOT
27575: PUSH
27576: LD_EXP 53
27580: PUSH
27581: LD_VAR 0 2
27585: ARRAY
27586: PUSH
27587: LD_INT 2
27589: ARRAY
27590: AND
27591: IFFALSE 27621
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
27593: LD_VAR 0 3
27597: PPUSH
27598: LD_EXP 53
27602: PUSH
27603: LD_VAR 0 2
27607: ARRAY
27608: PUSH
27609: LD_INT 2
27611: ARRAY
27612: PUSH
27613: LD_INT 1
27615: ARRAY
27616: PPUSH
27617: CALL_OW 128
// end ;
27621: GO 27399
27623: POP
27624: POP
// end ;
27625: GO 27242
27627: POP
27628: POP
// end ;
27629: LD_VAR 0 1
27633: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
// if not mc_bases then
27641: LD_EXP 50
27645: NOT
27646: IFFALSE 27650
// exit ;
27648: GO 28793
// for i = 1 to mc_bases do
27650: LD_ADDR_VAR 0 2
27654: PUSH
27655: DOUBLE
27656: LD_INT 1
27658: DEC
27659: ST_TO_ADDR
27660: LD_EXP 50
27664: PUSH
27665: FOR_TO
27666: IFFALSE 28791
// begin if mc_scan [ i ] then
27668: LD_EXP 73
27672: PUSH
27673: LD_VAR 0 2
27677: ARRAY
27678: IFFALSE 27682
// continue ;
27680: GO 27665
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
27682: LD_EXP 55
27686: PUSH
27687: LD_VAR 0 2
27691: ARRAY
27692: NOT
27693: PUSH
27694: LD_EXP 57
27698: PUSH
27699: LD_VAR 0 2
27703: ARRAY
27704: NOT
27705: AND
27706: PUSH
27707: LD_EXP 56
27711: PUSH
27712: LD_VAR 0 2
27716: ARRAY
27717: AND
27718: IFFALSE 27756
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
27720: LD_ADDR_EXP 56
27724: PUSH
27725: LD_EXP 56
27729: PPUSH
27730: LD_VAR 0 2
27734: PPUSH
27735: EMPTY
27736: PPUSH
27737: CALL_OW 1
27741: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
27742: LD_VAR 0 2
27746: PPUSH
27747: LD_INT 103
27749: PPUSH
27750: CALL 21460 0 2
// continue ;
27754: GO 27665
// end ; if mc_construct_list [ i ] then
27756: LD_EXP 57
27760: PUSH
27761: LD_VAR 0 2
27765: ARRAY
27766: IFFALSE 27986
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27768: LD_ADDR_VAR 0 4
27772: PUSH
27773: LD_EXP 50
27777: PUSH
27778: LD_VAR 0 2
27782: ARRAY
27783: PPUSH
27784: LD_INT 25
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 72
27798: PUSH
27799: LD_EXP 52
27803: PUSH
27804: LD_VAR 0 2
27808: ARRAY
27809: DIFF
27810: ST_TO_ADDR
// if not tmp then
27811: LD_VAR 0 4
27815: NOT
27816: IFFALSE 27820
// continue ;
27818: GO 27665
// for j in tmp do
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_VAR 0 4
27829: PUSH
27830: FOR_IN
27831: IFFALSE 27982
// begin if not mc_builders [ i ] then
27833: LD_EXP 56
27837: PUSH
27838: LD_VAR 0 2
27842: ARRAY
27843: NOT
27844: IFFALSE 27902
// begin SetTag ( j , 103 ) ;
27846: LD_VAR 0 3
27850: PPUSH
27851: LD_INT 103
27853: PPUSH
27854: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27858: LD_ADDR_EXP 56
27862: PUSH
27863: LD_EXP 56
27867: PPUSH
27868: LD_VAR 0 2
27872: PUSH
27873: LD_EXP 56
27877: PUSH
27878: LD_VAR 0 2
27882: ARRAY
27883: PUSH
27884: LD_INT 1
27886: PLUS
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PPUSH
27892: LD_VAR 0 3
27896: PPUSH
27897: CALL 54658 0 3
27901: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27902: LD_VAR 0 3
27906: PPUSH
27907: CALL_OW 310
27911: IFFALSE 27922
// ComExitBuilding ( j ) ;
27913: LD_VAR 0 3
27917: PPUSH
27918: CALL_OW 122
// wait ( 3 ) ;
27922: LD_INT 3
27924: PPUSH
27925: CALL_OW 67
// if not mc_construct_list [ i ] then
27929: LD_EXP 57
27933: PUSH
27934: LD_VAR 0 2
27938: ARRAY
27939: NOT
27940: IFFALSE 27944
// break ;
27942: GO 27982
// if not HasTask ( j ) then
27944: LD_VAR 0 3
27948: PPUSH
27949: CALL_OW 314
27953: NOT
27954: IFFALSE 27980
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27956: LD_VAR 0 3
27960: PPUSH
27961: LD_EXP 57
27965: PUSH
27966: LD_VAR 0 2
27970: ARRAY
27971: PUSH
27972: LD_INT 1
27974: ARRAY
27975: PPUSH
27976: CALL 57509 0 2
// end ;
27980: GO 27830
27982: POP
27983: POP
// end else
27984: GO 28789
// if mc_build_list [ i ] then
27986: LD_EXP 55
27990: PUSH
27991: LD_VAR 0 2
27995: ARRAY
27996: IFFALSE 28789
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27998: LD_ADDR_VAR 0 5
28002: PUSH
28003: LD_EXP 50
28007: PUSH
28008: LD_VAR 0 2
28012: ARRAY
28013: PPUSH
28014: LD_INT 2
28016: PUSH
28017: LD_INT 30
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 30
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: PPUSH
28042: CALL_OW 72
28046: ST_TO_ADDR
// if depot then
28047: LD_VAR 0 5
28051: IFFALSE 28069
// depot := depot [ 1 ] else
28053: LD_ADDR_VAR 0 5
28057: PUSH
28058: LD_VAR 0 5
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: ST_TO_ADDR
28067: GO 28077
// depot := 0 ;
28069: LD_ADDR_VAR 0 5
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
28077: LD_EXP 55
28081: PUSH
28082: LD_VAR 0 2
28086: ARRAY
28087: PUSH
28088: LD_INT 1
28090: ARRAY
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: CALL 57339 0 1
28100: PUSH
28101: LD_EXP 50
28105: PUSH
28106: LD_VAR 0 2
28110: ARRAY
28111: PPUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 30
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: PPUSH
28140: CALL_OW 72
28144: NOT
28145: AND
28146: IFFALSE 28251
// begin for j = 1 to mc_build_list [ i ] do
28148: LD_ADDR_VAR 0 3
28152: PUSH
28153: DOUBLE
28154: LD_INT 1
28156: DEC
28157: ST_TO_ADDR
28158: LD_EXP 55
28162: PUSH
28163: LD_VAR 0 2
28167: ARRAY
28168: PUSH
28169: FOR_TO
28170: IFFALSE 28249
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
28172: LD_EXP 55
28176: PUSH
28177: LD_VAR 0 2
28181: ARRAY
28182: PUSH
28183: LD_VAR 0 3
28187: ARRAY
28188: PUSH
28189: LD_INT 1
28191: ARRAY
28192: PUSH
28193: LD_INT 2
28195: EQUAL
28196: IFFALSE 28247
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
28198: LD_ADDR_EXP 55
28202: PUSH
28203: LD_EXP 55
28207: PPUSH
28208: LD_VAR 0 2
28212: PPUSH
28213: LD_EXP 55
28217: PUSH
28218: LD_VAR 0 2
28222: ARRAY
28223: PPUSH
28224: LD_VAR 0 3
28228: PPUSH
28229: LD_INT 1
28231: PPUSH
28232: LD_INT 0
28234: PPUSH
28235: CALL 54076 0 4
28239: PPUSH
28240: CALL_OW 1
28244: ST_TO_ADDR
// break ;
28245: GO 28249
// end ;
28247: GO 28169
28249: POP
28250: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
28251: LD_EXP 55
28255: PUSH
28256: LD_VAR 0 2
28260: ARRAY
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PUSH
28266: LD_INT 1
28268: ARRAY
28269: PUSH
28270: LD_INT 0
28272: EQUAL
28273: PUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_VAR 0 5
28283: PPUSH
28284: LD_EXP 55
28288: PUSH
28289: LD_VAR 0 2
28293: ARRAY
28294: PUSH
28295: LD_INT 1
28297: ARRAY
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_EXP 55
28307: PUSH
28308: LD_VAR 0 2
28312: ARRAY
28313: PUSH
28314: LD_INT 1
28316: ARRAY
28317: PUSH
28318: LD_INT 2
28320: ARRAY
28321: PPUSH
28322: LD_EXP 55
28326: PUSH
28327: LD_VAR 0 2
28331: ARRAY
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PUSH
28337: LD_INT 3
28339: ARRAY
28340: PPUSH
28341: LD_EXP 55
28345: PUSH
28346: LD_VAR 0 2
28350: ARRAY
28351: PUSH
28352: LD_INT 1
28354: ARRAY
28355: PUSH
28356: LD_INT 4
28358: ARRAY
28359: PPUSH
28360: CALL 62073 0 5
28364: AND
28365: OR
28366: IFFALSE 28647
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
28368: LD_ADDR_VAR 0 4
28372: PUSH
28373: LD_EXP 50
28377: PUSH
28378: LD_VAR 0 2
28382: ARRAY
28383: PPUSH
28384: LD_INT 25
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 72
28398: PUSH
28399: LD_EXP 52
28403: PUSH
28404: LD_VAR 0 2
28408: ARRAY
28409: DIFF
28410: ST_TO_ADDR
// if not tmp then
28411: LD_VAR 0 4
28415: NOT
28416: IFFALSE 28420
// continue ;
28418: GO 27665
// for j in tmp do
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_VAR 0 4
28429: PUSH
28430: FOR_IN
28431: IFFALSE 28643
// begin if not mc_builders [ i ] then
28433: LD_EXP 56
28437: PUSH
28438: LD_VAR 0 2
28442: ARRAY
28443: NOT
28444: IFFALSE 28502
// begin SetTag ( j , 103 ) ;
28446: LD_VAR 0 3
28450: PPUSH
28451: LD_INT 103
28453: PPUSH
28454: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
28458: LD_ADDR_EXP 56
28462: PUSH
28463: LD_EXP 56
28467: PPUSH
28468: LD_VAR 0 2
28472: PUSH
28473: LD_EXP 56
28477: PUSH
28478: LD_VAR 0 2
28482: ARRAY
28483: PUSH
28484: LD_INT 1
28486: PLUS
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PPUSH
28492: LD_VAR 0 3
28496: PPUSH
28497: CALL 54658 0 3
28501: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
28502: LD_VAR 0 3
28506: PPUSH
28507: CALL_OW 310
28511: IFFALSE 28522
// ComExitBuilding ( j ) ;
28513: LD_VAR 0 3
28517: PPUSH
28518: CALL_OW 122
// wait ( 3 ) ;
28522: LD_INT 3
28524: PPUSH
28525: CALL_OW 67
// if not mc_build_list [ i ] then
28529: LD_EXP 55
28533: PUSH
28534: LD_VAR 0 2
28538: ARRAY
28539: NOT
28540: IFFALSE 28544
// break ;
28542: GO 28643
// if not HasTask ( j ) then
28544: LD_VAR 0 3
28548: PPUSH
28549: CALL_OW 314
28553: NOT
28554: IFFALSE 28641
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
28556: LD_VAR 0 3
28560: PPUSH
28561: LD_EXP 55
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: PUSH
28572: LD_INT 1
28574: ARRAY
28575: PUSH
28576: LD_INT 1
28578: ARRAY
28579: PPUSH
28580: LD_EXP 55
28584: PUSH
28585: LD_VAR 0 2
28589: ARRAY
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PUSH
28595: LD_INT 2
28597: ARRAY
28598: PPUSH
28599: LD_EXP 55
28603: PUSH
28604: LD_VAR 0 2
28608: ARRAY
28609: PUSH
28610: LD_INT 1
28612: ARRAY
28613: PUSH
28614: LD_INT 3
28616: ARRAY
28617: PPUSH
28618: LD_EXP 55
28622: PUSH
28623: LD_VAR 0 2
28627: ARRAY
28628: PUSH
28629: LD_INT 1
28631: ARRAY
28632: PUSH
28633: LD_INT 4
28635: ARRAY
28636: PPUSH
28637: CALL_OW 145
// end ;
28641: GO 28430
28643: POP
28644: POP
// end else
28645: GO 28789
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
28647: LD_EXP 50
28651: PUSH
28652: LD_VAR 0 2
28656: ARRAY
28657: PPUSH
28658: LD_EXP 55
28662: PUSH
28663: LD_VAR 0 2
28667: ARRAY
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: PUSH
28673: LD_INT 1
28675: ARRAY
28676: PPUSH
28677: LD_EXP 55
28681: PUSH
28682: LD_VAR 0 2
28686: ARRAY
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PUSH
28692: LD_INT 2
28694: ARRAY
28695: PPUSH
28696: LD_EXP 55
28700: PUSH
28701: LD_VAR 0 2
28705: ARRAY
28706: PUSH
28707: LD_INT 1
28709: ARRAY
28710: PUSH
28711: LD_INT 3
28713: ARRAY
28714: PPUSH
28715: LD_EXP 55
28719: PUSH
28720: LD_VAR 0 2
28724: ARRAY
28725: PUSH
28726: LD_INT 1
28728: ARRAY
28729: PUSH
28730: LD_INT 4
28732: ARRAY
28733: PPUSH
28734: CALL 61409 0 5
28738: NOT
28739: IFFALSE 28789
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
28741: LD_ADDR_EXP 55
28745: PUSH
28746: LD_EXP 55
28750: PPUSH
28751: LD_VAR 0 2
28755: PPUSH
28756: LD_EXP 55
28760: PUSH
28761: LD_VAR 0 2
28765: ARRAY
28766: PPUSH
28767: LD_INT 1
28769: PPUSH
28770: LD_INT 1
28772: NEG
28773: PPUSH
28774: LD_INT 0
28776: PPUSH
28777: CALL 54076 0 4
28781: PPUSH
28782: CALL_OW 1
28786: ST_TO_ADDR
// continue ;
28787: GO 27665
// end ; end ; end ;
28789: GO 27665
28791: POP
28792: POP
// end ;
28793: LD_VAR 0 1
28797: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
28798: LD_INT 0
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
// if not mc_bases then
28806: LD_EXP 50
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 29242
// for i = 1 to mc_bases do
28815: LD_ADDR_VAR 0 2
28819: PUSH
28820: DOUBLE
28821: LD_INT 1
28823: DEC
28824: ST_TO_ADDR
28825: LD_EXP 50
28829: PUSH
28830: FOR_TO
28831: IFFALSE 29240
// begin tmp := mc_build_upgrade [ i ] ;
28833: LD_ADDR_VAR 0 4
28837: PUSH
28838: LD_EXP 82
28842: PUSH
28843: LD_VAR 0 2
28847: ARRAY
28848: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28849: LD_ADDR_VAR 0 6
28853: PUSH
28854: LD_EXP 83
28858: PUSH
28859: LD_VAR 0 2
28863: ARRAY
28864: PPUSH
28865: LD_INT 2
28867: PUSH
28868: LD_INT 30
28870: PUSH
28871: LD_INT 6
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 30
28880: PUSH
28881: LD_INT 7
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: LIST
28892: PPUSH
28893: CALL_OW 72
28897: ST_TO_ADDR
// if not tmp and not lab then
28898: LD_VAR 0 4
28902: NOT
28903: PUSH
28904: LD_VAR 0 6
28908: NOT
28909: AND
28910: IFFALSE 28914
// continue ;
28912: GO 28830
// if tmp then
28914: LD_VAR 0 4
28918: IFFALSE 29038
// for j in tmp do
28920: LD_ADDR_VAR 0 3
28924: PUSH
28925: LD_VAR 0 4
28929: PUSH
28930: FOR_IN
28931: IFFALSE 29036
// begin if UpgradeCost ( j ) then
28933: LD_VAR 0 3
28937: PPUSH
28938: CALL 61069 0 1
28942: IFFALSE 29034
// begin ComUpgrade ( j ) ;
28944: LD_VAR 0 3
28948: PPUSH
28949: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28953: LD_ADDR_EXP 82
28957: PUSH
28958: LD_EXP 82
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_EXP 82
28972: PUSH
28973: LD_VAR 0 2
28977: ARRAY
28978: PUSH
28979: LD_VAR 0 3
28983: DIFF
28984: PPUSH
28985: CALL_OW 1
28989: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28990: LD_ADDR_EXP 57
28994: PUSH
28995: LD_EXP 57
28999: PPUSH
29000: LD_VAR 0 2
29004: PUSH
29005: LD_EXP 57
29009: PUSH
29010: LD_VAR 0 2
29014: ARRAY
29015: PUSH
29016: LD_INT 1
29018: PLUS
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: LD_VAR 0 3
29028: PPUSH
29029: CALL 54658 0 3
29033: ST_TO_ADDR
// end ; end ;
29034: GO 28930
29036: POP
29037: POP
// if not lab or not mc_lab_upgrade [ i ] then
29038: LD_VAR 0 6
29042: NOT
29043: PUSH
29044: LD_EXP 84
29048: PUSH
29049: LD_VAR 0 2
29053: ARRAY
29054: NOT
29055: OR
29056: IFFALSE 29060
// continue ;
29058: GO 28830
// for j in lab do
29060: LD_ADDR_VAR 0 3
29064: PUSH
29065: LD_VAR 0 6
29069: PUSH
29070: FOR_IN
29071: IFFALSE 29236
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
29073: LD_VAR 0 3
29077: PPUSH
29078: CALL_OW 266
29082: PUSH
29083: LD_INT 6
29085: PUSH
29086: LD_INT 7
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: IN
29093: PUSH
29094: LD_VAR 0 3
29098: PPUSH
29099: CALL_OW 461
29103: PUSH
29104: LD_INT 1
29106: NONEQUAL
29107: AND
29108: IFFALSE 29234
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
29110: LD_VAR 0 3
29114: PPUSH
29115: LD_EXP 84
29119: PUSH
29120: LD_VAR 0 2
29124: ARRAY
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: CALL 61274 0 2
29134: IFFALSE 29234
// begin ComCancel ( j ) ;
29136: LD_VAR 0 3
29140: PPUSH
29141: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
29145: LD_VAR 0 3
29149: PPUSH
29150: LD_EXP 84
29154: PUSH
29155: LD_VAR 0 2
29159: ARRAY
29160: PUSH
29161: LD_INT 1
29163: ARRAY
29164: PPUSH
29165: CALL_OW 207
// if not j in mc_construct_list [ i ] then
29169: LD_VAR 0 3
29173: PUSH
29174: LD_EXP 57
29178: PUSH
29179: LD_VAR 0 2
29183: ARRAY
29184: IN
29185: NOT
29186: IFFALSE 29232
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
29188: LD_ADDR_EXP 57
29192: PUSH
29193: LD_EXP 57
29197: PPUSH
29198: LD_VAR 0 2
29202: PUSH
29203: LD_EXP 57
29207: PUSH
29208: LD_VAR 0 2
29212: ARRAY
29213: PUSH
29214: LD_INT 1
29216: PLUS
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: LD_VAR 0 3
29226: PPUSH
29227: CALL 54658 0 3
29231: ST_TO_ADDR
// break ;
29232: GO 29236
// end ; end ; end ;
29234: GO 29070
29236: POP
29237: POP
// end ;
29238: GO 28830
29240: POP
29241: POP
// end ;
29242: LD_VAR 0 1
29246: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
29247: LD_INT 0
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
// if not mc_bases then
29258: LD_EXP 50
29262: NOT
29263: IFFALSE 29267
// exit ;
29265: GO 29672
// for i = 1 to mc_bases do
29267: LD_ADDR_VAR 0 2
29271: PUSH
29272: DOUBLE
29273: LD_INT 1
29275: DEC
29276: ST_TO_ADDR
29277: LD_EXP 50
29281: PUSH
29282: FOR_TO
29283: IFFALSE 29670
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
29285: LD_EXP 58
29289: PUSH
29290: LD_VAR 0 2
29294: ARRAY
29295: NOT
29296: PUSH
29297: LD_EXP 50
29301: PUSH
29302: LD_VAR 0 2
29306: ARRAY
29307: PPUSH
29308: LD_INT 30
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 72
29322: NOT
29323: OR
29324: IFFALSE 29328
// continue ;
29326: GO 29282
// busy := false ;
29328: LD_ADDR_VAR 0 8
29332: PUSH
29333: LD_INT 0
29335: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
29336: LD_ADDR_VAR 0 4
29340: PUSH
29341: LD_EXP 50
29345: PUSH
29346: LD_VAR 0 2
29350: ARRAY
29351: PPUSH
29352: LD_INT 30
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PPUSH
29362: CALL_OW 72
29366: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
29367: LD_ADDR_VAR 0 6
29371: PUSH
29372: LD_EXP 58
29376: PUSH
29377: LD_VAR 0 2
29381: ARRAY
29382: PPUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 30
29388: PUSH
29389: LD_INT 32
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 30
29398: PUSH
29399: LD_INT 33
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 72
29415: ST_TO_ADDR
// if not t then
29416: LD_VAR 0 6
29420: NOT
29421: IFFALSE 29425
// continue ;
29423: GO 29282
// for j in tmp do
29425: LD_ADDR_VAR 0 3
29429: PUSH
29430: LD_VAR 0 4
29434: PUSH
29435: FOR_IN
29436: IFFALSE 29466
// if not BuildingStatus ( j ) = bs_idle then
29438: LD_VAR 0 3
29442: PPUSH
29443: CALL_OW 461
29447: PUSH
29448: LD_INT 2
29450: EQUAL
29451: NOT
29452: IFFALSE 29464
// begin busy := true ;
29454: LD_ADDR_VAR 0 8
29458: PUSH
29459: LD_INT 1
29461: ST_TO_ADDR
// break ;
29462: GO 29466
// end ;
29464: GO 29435
29466: POP
29467: POP
// if busy then
29468: LD_VAR 0 8
29472: IFFALSE 29476
// continue ;
29474: GO 29282
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
29476: LD_ADDR_VAR 0 7
29480: PUSH
29481: LD_VAR 0 6
29485: PPUSH
29486: LD_INT 35
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PPUSH
29496: CALL_OW 72
29500: ST_TO_ADDR
// if tw then
29501: LD_VAR 0 7
29505: IFFALSE 29582
// begin tw := tw [ 1 ] ;
29507: LD_ADDR_VAR 0 7
29511: PUSH
29512: LD_VAR 0 7
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
29521: LD_ADDR_VAR 0 9
29525: PUSH
29526: LD_VAR 0 7
29530: PPUSH
29531: LD_EXP 75
29535: PUSH
29536: LD_VAR 0 2
29540: ARRAY
29541: PPUSH
29542: CALL 59628 0 2
29546: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
29547: LD_EXP 89
29551: PUSH
29552: LD_VAR 0 2
29556: ARRAY
29557: IFFALSE 29580
// if not weapon in mc_allowed_tower_weapons [ i ] then
29559: LD_VAR 0 9
29563: PUSH
29564: LD_EXP 89
29568: PUSH
29569: LD_VAR 0 2
29573: ARRAY
29574: IN
29575: NOT
29576: IFFALSE 29580
// continue ;
29578: GO 29282
// end else
29580: GO 29645
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
29582: LD_ADDR_VAR 0 5
29586: PUSH
29587: LD_EXP 58
29591: PUSH
29592: LD_VAR 0 2
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 4
29602: PPUSH
29603: CALL 89839 0 2
29607: ST_TO_ADDR
// if not tmp2 then
29608: LD_VAR 0 5
29612: NOT
29613: IFFALSE 29617
// continue ;
29615: GO 29282
// tw := tmp2 [ 1 ] ;
29617: LD_ADDR_VAR 0 7
29621: PUSH
29622: LD_VAR 0 5
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
29631: LD_ADDR_VAR 0 9
29635: PUSH
29636: LD_VAR 0 5
29640: PUSH
29641: LD_INT 2
29643: ARRAY
29644: ST_TO_ADDR
// end ; if not weapon then
29645: LD_VAR 0 9
29649: NOT
29650: IFFALSE 29654
// continue ;
29652: GO 29282
// ComPlaceWeapon ( tw , weapon ) ;
29654: LD_VAR 0 7
29658: PPUSH
29659: LD_VAR 0 9
29663: PPUSH
29664: CALL_OW 148
// end ;
29668: GO 29282
29670: POP
29671: POP
// end ;
29672: LD_VAR 0 1
29676: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
29677: LD_INT 0
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
// if not mc_bases then
29685: LD_EXP 50
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 30470
// for i = 1 to mc_bases do
29694: LD_ADDR_VAR 0 2
29698: PUSH
29699: DOUBLE
29700: LD_INT 1
29702: DEC
29703: ST_TO_ADDR
29704: LD_EXP 50
29708: PUSH
29709: FOR_TO
29710: IFFALSE 30468
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
29712: LD_EXP 63
29716: PUSH
29717: LD_VAR 0 2
29721: ARRAY
29722: NOT
29723: PUSH
29724: LD_EXP 63
29728: PUSH
29729: LD_VAR 0 2
29733: ARRAY
29734: PUSH
29735: LD_EXP 64
29739: PUSH
29740: LD_VAR 0 2
29744: ARRAY
29745: EQUAL
29746: OR
29747: PUSH
29748: LD_EXP 73
29752: PUSH
29753: LD_VAR 0 2
29757: ARRAY
29758: OR
29759: IFFALSE 29763
// continue ;
29761: GO 29709
// if mc_miners [ i ] then
29763: LD_EXP 64
29767: PUSH
29768: LD_VAR 0 2
29772: ARRAY
29773: IFFALSE 30155
// begin for j = mc_miners [ i ] downto 1 do
29775: LD_ADDR_VAR 0 3
29779: PUSH
29780: DOUBLE
29781: LD_EXP 64
29785: PUSH
29786: LD_VAR 0 2
29790: ARRAY
29791: INC
29792: ST_TO_ADDR
29793: LD_INT 1
29795: PUSH
29796: FOR_DOWNTO
29797: IFFALSE 30153
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
29799: LD_EXP 64
29803: PUSH
29804: LD_VAR 0 2
29808: ARRAY
29809: PUSH
29810: LD_VAR 0 3
29814: ARRAY
29815: PPUSH
29816: CALL_OW 301
29820: PUSH
29821: LD_EXP 64
29825: PUSH
29826: LD_VAR 0 2
29830: ARRAY
29831: PUSH
29832: LD_VAR 0 3
29836: ARRAY
29837: PPUSH
29838: CALL_OW 257
29842: PUSH
29843: LD_INT 1
29845: NONEQUAL
29846: OR
29847: IFFALSE 29910
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29849: LD_ADDR_VAR 0 5
29853: PUSH
29854: LD_EXP 64
29858: PUSH
29859: LD_VAR 0 2
29863: ARRAY
29864: PUSH
29865: LD_EXP 64
29869: PUSH
29870: LD_VAR 0 2
29874: ARRAY
29875: PUSH
29876: LD_VAR 0 3
29880: ARRAY
29881: DIFF
29882: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29883: LD_ADDR_EXP 64
29887: PUSH
29888: LD_EXP 64
29892: PPUSH
29893: LD_VAR 0 2
29897: PPUSH
29898: LD_VAR 0 5
29902: PPUSH
29903: CALL_OW 1
29907: ST_TO_ADDR
// continue ;
29908: GO 29796
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
29910: LD_EXP 64
29914: PUSH
29915: LD_VAR 0 2
29919: ARRAY
29920: PUSH
29921: LD_VAR 0 3
29925: ARRAY
29926: PPUSH
29927: CALL_OW 257
29931: PUSH
29932: LD_INT 1
29934: EQUAL
29935: PUSH
29936: LD_EXP 64
29940: PUSH
29941: LD_VAR 0 2
29945: ARRAY
29946: PUSH
29947: LD_VAR 0 3
29951: ARRAY
29952: PPUSH
29953: CALL_OW 459
29957: NOT
29958: AND
29959: PUSH
29960: LD_EXP 64
29964: PUSH
29965: LD_VAR 0 2
29969: ARRAY
29970: PUSH
29971: LD_VAR 0 3
29975: ARRAY
29976: PPUSH
29977: CALL_OW 314
29981: NOT
29982: AND
29983: IFFALSE 30151
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29985: LD_EXP 64
29989: PUSH
29990: LD_VAR 0 2
29994: ARRAY
29995: PUSH
29996: LD_VAR 0 3
30000: ARRAY
30001: PPUSH
30002: CALL_OW 310
30006: IFFALSE 30029
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
30008: LD_EXP 64
30012: PUSH
30013: LD_VAR 0 2
30017: ARRAY
30018: PUSH
30019: LD_VAR 0 3
30023: ARRAY
30024: PPUSH
30025: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
30029: LD_EXP 64
30033: PUSH
30034: LD_VAR 0 2
30038: ARRAY
30039: PUSH
30040: LD_VAR 0 3
30044: ARRAY
30045: PPUSH
30046: CALL_OW 314
30050: NOT
30051: IFFALSE 30151
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
30053: LD_EXP 64
30057: PUSH
30058: LD_VAR 0 2
30062: ARRAY
30063: PUSH
30064: LD_VAR 0 3
30068: ARRAY
30069: PPUSH
30070: LD_EXP 63
30074: PUSH
30075: LD_VAR 0 2
30079: ARRAY
30080: PUSH
30081: LD_VAR 0 3
30085: PUSH
30086: LD_EXP 63
30090: PUSH
30091: LD_VAR 0 2
30095: ARRAY
30096: MOD
30097: PUSH
30098: LD_INT 1
30100: PLUS
30101: ARRAY
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: PPUSH
30107: LD_EXP 63
30111: PUSH
30112: LD_VAR 0 2
30116: ARRAY
30117: PUSH
30118: LD_VAR 0 3
30122: PUSH
30123: LD_EXP 63
30127: PUSH
30128: LD_VAR 0 2
30132: ARRAY
30133: MOD
30134: PUSH
30135: LD_INT 1
30137: PLUS
30138: ARRAY
30139: PUSH
30140: LD_INT 2
30142: ARRAY
30143: PPUSH
30144: LD_INT 0
30146: PPUSH
30147: CALL_OW 193
// end ; end ;
30151: GO 29796
30153: POP
30154: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
30155: LD_ADDR_VAR 0 5
30159: PUSH
30160: LD_EXP 50
30164: PUSH
30165: LD_VAR 0 2
30169: ARRAY
30170: PPUSH
30171: LD_INT 2
30173: PUSH
30174: LD_INT 30
30176: PUSH
30177: LD_INT 4
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 30
30186: PUSH
30187: LD_INT 5
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 30
30196: PUSH
30197: LD_INT 32
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: PPUSH
30210: CALL_OW 72
30214: ST_TO_ADDR
// if not tmp then
30215: LD_VAR 0 5
30219: NOT
30220: IFFALSE 30224
// continue ;
30222: GO 29709
// list := [ ] ;
30224: LD_ADDR_VAR 0 6
30228: PUSH
30229: EMPTY
30230: ST_TO_ADDR
// for j in tmp do
30231: LD_ADDR_VAR 0 3
30235: PUSH
30236: LD_VAR 0 5
30240: PUSH
30241: FOR_IN
30242: IFFALSE 30311
// begin for k in UnitsInside ( j ) do
30244: LD_ADDR_VAR 0 4
30248: PUSH
30249: LD_VAR 0 3
30253: PPUSH
30254: CALL_OW 313
30258: PUSH
30259: FOR_IN
30260: IFFALSE 30307
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
30262: LD_VAR 0 4
30266: PPUSH
30267: CALL_OW 257
30271: PUSH
30272: LD_INT 1
30274: EQUAL
30275: PUSH
30276: LD_VAR 0 4
30280: PPUSH
30281: CALL_OW 459
30285: NOT
30286: AND
30287: IFFALSE 30305
// list := list ^ k ;
30289: LD_ADDR_VAR 0 6
30293: PUSH
30294: LD_VAR 0 6
30298: PUSH
30299: LD_VAR 0 4
30303: ADD
30304: ST_TO_ADDR
30305: GO 30259
30307: POP
30308: POP
// end ;
30309: GO 30241
30311: POP
30312: POP
// list := list diff mc_miners [ i ] ;
30313: LD_ADDR_VAR 0 6
30317: PUSH
30318: LD_VAR 0 6
30322: PUSH
30323: LD_EXP 64
30327: PUSH
30328: LD_VAR 0 2
30332: ARRAY
30333: DIFF
30334: ST_TO_ADDR
// if not list then
30335: LD_VAR 0 6
30339: NOT
30340: IFFALSE 30344
// continue ;
30342: GO 29709
// k := mc_mines [ i ] - mc_miners [ i ] ;
30344: LD_ADDR_VAR 0 4
30348: PUSH
30349: LD_EXP 63
30353: PUSH
30354: LD_VAR 0 2
30358: ARRAY
30359: PUSH
30360: LD_EXP 64
30364: PUSH
30365: LD_VAR 0 2
30369: ARRAY
30370: MINUS
30371: ST_TO_ADDR
// if k > list then
30372: LD_VAR 0 4
30376: PUSH
30377: LD_VAR 0 6
30381: GREATER
30382: IFFALSE 30394
// k := list ;
30384: LD_ADDR_VAR 0 4
30388: PUSH
30389: LD_VAR 0 6
30393: ST_TO_ADDR
// for j = 1 to k do
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: DOUBLE
30400: LD_INT 1
30402: DEC
30403: ST_TO_ADDR
30404: LD_VAR 0 4
30408: PUSH
30409: FOR_TO
30410: IFFALSE 30464
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
30412: LD_ADDR_EXP 64
30416: PUSH
30417: LD_EXP 64
30421: PPUSH
30422: LD_VAR 0 2
30426: PUSH
30427: LD_EXP 64
30431: PUSH
30432: LD_VAR 0 2
30436: ARRAY
30437: PUSH
30438: LD_INT 1
30440: PLUS
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PPUSH
30446: LD_VAR 0 6
30450: PUSH
30451: LD_VAR 0 3
30455: ARRAY
30456: PPUSH
30457: CALL 54658 0 3
30461: ST_TO_ADDR
30462: GO 30409
30464: POP
30465: POP
// end ;
30466: GO 29709
30468: POP
30469: POP
// end ;
30470: LD_VAR 0 1
30474: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
30475: LD_INT 0
30477: PPUSH
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
// if not mc_bases then
30487: LD_EXP 50
30491: NOT
30492: IFFALSE 30496
// exit ;
30494: GO 32246
// for i = 1 to mc_bases do
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: DOUBLE
30502: LD_INT 1
30504: DEC
30505: ST_TO_ADDR
30506: LD_EXP 50
30510: PUSH
30511: FOR_TO
30512: IFFALSE 32244
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
30514: LD_EXP 50
30518: PUSH
30519: LD_VAR 0 2
30523: ARRAY
30524: NOT
30525: PUSH
30526: LD_EXP 57
30530: PUSH
30531: LD_VAR 0 2
30535: ARRAY
30536: OR
30537: IFFALSE 30541
// continue ;
30539: GO 30511
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
30541: LD_EXP 66
30545: PUSH
30546: LD_VAR 0 2
30550: ARRAY
30551: NOT
30552: PUSH
30553: LD_EXP 67
30557: PUSH
30558: LD_VAR 0 2
30562: ARRAY
30563: AND
30564: IFFALSE 30602
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
30566: LD_ADDR_EXP 67
30570: PUSH
30571: LD_EXP 67
30575: PPUSH
30576: LD_VAR 0 2
30580: PPUSH
30581: EMPTY
30582: PPUSH
30583: CALL_OW 1
30587: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30588: LD_VAR 0 2
30592: PPUSH
30593: LD_INT 107
30595: PPUSH
30596: CALL 21460 0 2
// continue ;
30600: GO 30511
// end ; target := [ ] ;
30602: LD_ADDR_VAR 0 6
30606: PUSH
30607: EMPTY
30608: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30609: LD_ADDR_VAR 0 3
30613: PUSH
30614: DOUBLE
30615: LD_EXP 66
30619: PUSH
30620: LD_VAR 0 2
30624: ARRAY
30625: INC
30626: ST_TO_ADDR
30627: LD_INT 1
30629: PUSH
30630: FOR_DOWNTO
30631: IFFALSE 30891
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30633: LD_EXP 66
30637: PUSH
30638: LD_VAR 0 2
30642: ARRAY
30643: PUSH
30644: LD_VAR 0 3
30648: ARRAY
30649: PUSH
30650: LD_INT 2
30652: ARRAY
30653: PPUSH
30654: LD_EXP 66
30658: PUSH
30659: LD_VAR 0 2
30663: ARRAY
30664: PUSH
30665: LD_VAR 0 3
30669: ARRAY
30670: PUSH
30671: LD_INT 3
30673: ARRAY
30674: PPUSH
30675: CALL_OW 488
30679: PUSH
30680: LD_EXP 66
30684: PUSH
30685: LD_VAR 0 2
30689: ARRAY
30690: PUSH
30691: LD_VAR 0 3
30695: ARRAY
30696: PUSH
30697: LD_INT 2
30699: ARRAY
30700: PPUSH
30701: LD_EXP 66
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_VAR 0 3
30716: ARRAY
30717: PUSH
30718: LD_INT 3
30720: ARRAY
30721: PPUSH
30722: CALL_OW 284
30726: PUSH
30727: LD_INT 0
30729: EQUAL
30730: AND
30731: IFFALSE 30786
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30733: LD_ADDR_VAR 0 5
30737: PUSH
30738: LD_EXP 66
30742: PUSH
30743: LD_VAR 0 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 3
30753: PPUSH
30754: CALL_OW 3
30758: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30759: LD_ADDR_EXP 66
30763: PUSH
30764: LD_EXP 66
30768: PPUSH
30769: LD_VAR 0 2
30773: PPUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: CALL_OW 1
30783: ST_TO_ADDR
// continue ;
30784: GO 30630
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30786: LD_EXP 50
30790: PUSH
30791: LD_VAR 0 2
30795: ARRAY
30796: PUSH
30797: LD_INT 1
30799: ARRAY
30800: PPUSH
30801: CALL_OW 255
30805: PPUSH
30806: LD_EXP 66
30810: PUSH
30811: LD_VAR 0 2
30815: ARRAY
30816: PUSH
30817: LD_VAR 0 3
30821: ARRAY
30822: PUSH
30823: LD_INT 2
30825: ARRAY
30826: PPUSH
30827: LD_EXP 66
30831: PUSH
30832: LD_VAR 0 2
30836: ARRAY
30837: PUSH
30838: LD_VAR 0 3
30842: ARRAY
30843: PUSH
30844: LD_INT 3
30846: ARRAY
30847: PPUSH
30848: LD_INT 30
30850: PPUSH
30851: CALL 55554 0 4
30855: PUSH
30856: LD_INT 4
30858: ARRAY
30859: PUSH
30860: LD_INT 0
30862: EQUAL
30863: IFFALSE 30889
// begin target := mc_crates [ i ] [ j ] ;
30865: LD_ADDR_VAR 0 6
30869: PUSH
30870: LD_EXP 66
30874: PUSH
30875: LD_VAR 0 2
30879: ARRAY
30880: PUSH
30881: LD_VAR 0 3
30885: ARRAY
30886: ST_TO_ADDR
// break ;
30887: GO 30891
// end ; end ;
30889: GO 30630
30891: POP
30892: POP
// if not target then
30893: LD_VAR 0 6
30897: NOT
30898: IFFALSE 30902
// continue ;
30900: GO 30511
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30902: LD_ADDR_VAR 0 7
30906: PUSH
30907: LD_EXP 69
30911: PUSH
30912: LD_VAR 0 2
30916: ARRAY
30917: PPUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 58
30926: PUSH
30927: EMPTY
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 61
30936: PUSH
30937: EMPTY
30938: LIST
30939: PUSH
30940: LD_INT 33
30942: PUSH
30943: LD_INT 5
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 33
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 34
30972: PUSH
30973: LD_INT 32
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 34
30982: PUSH
30983: LD_INT 51
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 34
30992: PUSH
30993: LD_INT 12
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: ST_TO_ADDR
// if not cargo then
31015: LD_VAR 0 7
31019: NOT
31020: IFFALSE 31663
// begin if mc_crates_collector [ i ] < 5 then
31022: LD_EXP 67
31026: PUSH
31027: LD_VAR 0 2
31031: ARRAY
31032: PUSH
31033: LD_INT 5
31035: LESS
31036: IFFALSE 31402
// begin if mc_ape [ i ] then
31038: LD_EXP 79
31042: PUSH
31043: LD_VAR 0 2
31047: ARRAY
31048: IFFALSE 31095
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
31050: LD_ADDR_VAR 0 5
31054: PUSH
31055: LD_EXP 79
31059: PUSH
31060: LD_VAR 0 2
31064: ARRAY
31065: PPUSH
31066: LD_INT 25
31068: PUSH
31069: LD_INT 16
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 24
31078: PUSH
31079: LD_INT 750
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 72
31094: ST_TO_ADDR
// if not tmp then
31095: LD_VAR 0 5
31099: NOT
31100: IFFALSE 31147
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
31102: LD_ADDR_VAR 0 5
31106: PUSH
31107: LD_EXP 50
31111: PUSH
31112: LD_VAR 0 2
31116: ARRAY
31117: PPUSH
31118: LD_INT 25
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 24
31130: PUSH
31131: LD_INT 750
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PPUSH
31142: CALL_OW 72
31146: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
31147: LD_EXP 79
31151: PUSH
31152: LD_VAR 0 2
31156: ARRAY
31157: PUSH
31158: LD_EXP 50
31162: PUSH
31163: LD_VAR 0 2
31167: ARRAY
31168: PPUSH
31169: LD_INT 25
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 24
31181: PUSH
31182: LD_INT 750
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PPUSH
31193: CALL_OW 72
31197: AND
31198: PUSH
31199: LD_VAR 0 5
31203: PUSH
31204: LD_INT 5
31206: LESS
31207: AND
31208: IFFALSE 31290
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
31210: LD_ADDR_VAR 0 3
31214: PUSH
31215: LD_EXP 50
31219: PUSH
31220: LD_VAR 0 2
31224: ARRAY
31225: PPUSH
31226: LD_INT 25
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 24
31238: PUSH
31239: LD_INT 750
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PPUSH
31250: CALL_OW 72
31254: PUSH
31255: FOR_IN
31256: IFFALSE 31288
// begin tmp := tmp union j ;
31258: LD_ADDR_VAR 0 5
31262: PUSH
31263: LD_VAR 0 5
31267: PUSH
31268: LD_VAR 0 3
31272: UNION
31273: ST_TO_ADDR
// if tmp >= 5 then
31274: LD_VAR 0 5
31278: PUSH
31279: LD_INT 5
31281: GREATEREQUAL
31282: IFFALSE 31286
// break ;
31284: GO 31288
// end ;
31286: GO 31255
31288: POP
31289: POP
// end ; if not tmp then
31290: LD_VAR 0 5
31294: NOT
31295: IFFALSE 31299
// continue ;
31297: GO 30511
// for j in tmp do
31299: LD_ADDR_VAR 0 3
31303: PUSH
31304: LD_VAR 0 5
31308: PUSH
31309: FOR_IN
31310: IFFALSE 31400
// if not GetTag ( j ) then
31312: LD_VAR 0 3
31316: PPUSH
31317: CALL_OW 110
31321: NOT
31322: IFFALSE 31398
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
31324: LD_ADDR_EXP 67
31328: PUSH
31329: LD_EXP 67
31333: PPUSH
31334: LD_VAR 0 2
31338: PUSH
31339: LD_EXP 67
31343: PUSH
31344: LD_VAR 0 2
31348: ARRAY
31349: PUSH
31350: LD_INT 1
31352: PLUS
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PPUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: CALL 54658 0 3
31367: ST_TO_ADDR
// SetTag ( j , 107 ) ;
31368: LD_VAR 0 3
31372: PPUSH
31373: LD_INT 107
31375: PPUSH
31376: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
31380: LD_EXP 67
31384: PUSH
31385: LD_VAR 0 2
31389: ARRAY
31390: PUSH
31391: LD_INT 5
31393: GREATEREQUAL
31394: IFFALSE 31398
// break ;
31396: GO 31400
// end ;
31398: GO 31309
31400: POP
31401: POP
// end ; if mc_crates_collector [ i ] and target then
31402: LD_EXP 67
31406: PUSH
31407: LD_VAR 0 2
31411: ARRAY
31412: PUSH
31413: LD_VAR 0 6
31417: AND
31418: IFFALSE 31661
// begin if mc_crates_collector [ i ] < target [ 1 ] then
31420: LD_EXP 67
31424: PUSH
31425: LD_VAR 0 2
31429: ARRAY
31430: PUSH
31431: LD_VAR 0 6
31435: PUSH
31436: LD_INT 1
31438: ARRAY
31439: LESS
31440: IFFALSE 31460
// tmp := mc_crates_collector [ i ] else
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: LD_EXP 67
31451: PUSH
31452: LD_VAR 0 2
31456: ARRAY
31457: ST_TO_ADDR
31458: GO 31474
// tmp := target [ 1 ] ;
31460: LD_ADDR_VAR 0 5
31464: PUSH
31465: LD_VAR 0 6
31469: PUSH
31470: LD_INT 1
31472: ARRAY
31473: ST_TO_ADDR
// k := 0 ;
31474: LD_ADDR_VAR 0 4
31478: PUSH
31479: LD_INT 0
31481: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_EXP 67
31491: PUSH
31492: LD_VAR 0 2
31496: ARRAY
31497: PUSH
31498: FOR_IN
31499: IFFALSE 31659
// begin k := k + 1 ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_VAR 0 4
31510: PUSH
31511: LD_INT 1
31513: PLUS
31514: ST_TO_ADDR
// if k > tmp then
31515: LD_VAR 0 4
31519: PUSH
31520: LD_VAR 0 5
31524: GREATER
31525: IFFALSE 31529
// break ;
31527: GO 31659
// if not GetClass ( j ) in [ 2 , 16 ] then
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL_OW 257
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 16
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: IN
31549: NOT
31550: IFFALSE 31603
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
31552: LD_ADDR_EXP 67
31556: PUSH
31557: LD_EXP 67
31561: PPUSH
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_EXP 67
31571: PUSH
31572: LD_VAR 0 2
31576: ARRAY
31577: PUSH
31578: LD_VAR 0 3
31582: DIFF
31583: PPUSH
31584: CALL_OW 1
31588: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31589: LD_VAR 0 3
31593: PPUSH
31594: LD_INT 0
31596: PPUSH
31597: CALL_OW 109
// continue ;
31601: GO 31498
// end ; if IsInUnit ( j ) then
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL_OW 310
31612: IFFALSE 31623
// ComExitBuilding ( j ) ;
31614: LD_VAR 0 3
31618: PPUSH
31619: CALL_OW 122
// wait ( 3 ) ;
31623: LD_INT 3
31625: PPUSH
31626: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31630: LD_VAR 0 3
31634: PPUSH
31635: LD_VAR 0 6
31639: PUSH
31640: LD_INT 2
31642: ARRAY
31643: PPUSH
31644: LD_VAR 0 6
31648: PUSH
31649: LD_INT 3
31651: ARRAY
31652: PPUSH
31653: CALL_OW 117
// end ;
31657: GO 31498
31659: POP
31660: POP
// end ; end else
31661: GO 32242
// begin for j in cargo do
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_VAR 0 7
31672: PUSH
31673: FOR_IN
31674: IFFALSE 32240
// begin if GetTag ( j ) <> 0 then
31676: LD_VAR 0 3
31680: PPUSH
31681: CALL_OW 110
31685: PUSH
31686: LD_INT 0
31688: NONEQUAL
31689: IFFALSE 31693
// continue ;
31691: GO 31673
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31693: LD_VAR 0 3
31697: PPUSH
31698: CALL_OW 256
31702: PUSH
31703: LD_INT 1000
31705: LESS
31706: PUSH
31707: LD_VAR 0 3
31711: PPUSH
31712: LD_EXP 74
31716: PUSH
31717: LD_VAR 0 2
31721: ARRAY
31722: PPUSH
31723: CALL_OW 308
31727: NOT
31728: AND
31729: IFFALSE 31751
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31731: LD_VAR 0 3
31735: PPUSH
31736: LD_EXP 74
31740: PUSH
31741: LD_VAR 0 2
31745: ARRAY
31746: PPUSH
31747: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31751: LD_VAR 0 3
31755: PPUSH
31756: CALL_OW 256
31760: PUSH
31761: LD_INT 1000
31763: LESS
31764: PUSH
31765: LD_VAR 0 3
31769: PPUSH
31770: LD_EXP 74
31774: PUSH
31775: LD_VAR 0 2
31779: ARRAY
31780: PPUSH
31781: CALL_OW 308
31785: AND
31786: IFFALSE 31790
// continue ;
31788: GO 31673
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31790: LD_VAR 0 3
31794: PPUSH
31795: CALL_OW 262
31799: PUSH
31800: LD_INT 2
31802: EQUAL
31803: PUSH
31804: LD_VAR 0 3
31808: PPUSH
31809: CALL_OW 261
31813: PUSH
31814: LD_INT 15
31816: LESS
31817: AND
31818: IFFALSE 31822
// continue ;
31820: GO 31673
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31822: LD_VAR 0 3
31826: PPUSH
31827: CALL_OW 262
31831: PUSH
31832: LD_INT 1
31834: EQUAL
31835: PUSH
31836: LD_VAR 0 3
31840: PPUSH
31841: CALL_OW 261
31845: PUSH
31846: LD_INT 10
31848: LESS
31849: AND
31850: IFFALSE 32179
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31852: LD_ADDR_VAR 0 8
31856: PUSH
31857: LD_EXP 50
31861: PUSH
31862: LD_VAR 0 2
31866: ARRAY
31867: PPUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 30
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: PPUSH
31896: CALL_OW 72
31900: ST_TO_ADDR
// if not depot then
31901: LD_VAR 0 8
31905: NOT
31906: IFFALSE 31910
// continue ;
31908: GO 31673
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31910: LD_VAR 0 3
31914: PPUSH
31915: LD_VAR 0 8
31919: PPUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: CALL_OW 74
31929: PPUSH
31930: CALL_OW 296
31934: PUSH
31935: LD_INT 6
31937: LESS
31938: IFFALSE 31954
// SetFuel ( j , 100 ) else
31940: LD_VAR 0 3
31944: PPUSH
31945: LD_INT 100
31947: PPUSH
31948: CALL_OW 240
31952: GO 32179
// if GetFuel ( j ) = 0 then
31954: LD_VAR 0 3
31958: PPUSH
31959: CALL_OW 261
31963: PUSH
31964: LD_INT 0
31966: EQUAL
31967: IFFALSE 32179
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31969: LD_ADDR_EXP 69
31973: PUSH
31974: LD_EXP 69
31978: PPUSH
31979: LD_VAR 0 2
31983: PPUSH
31984: LD_EXP 69
31988: PUSH
31989: LD_VAR 0 2
31993: ARRAY
31994: PUSH
31995: LD_VAR 0 3
31999: DIFF
32000: PPUSH
32001: CALL_OW 1
32005: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
32006: LD_VAR 0 3
32010: PPUSH
32011: CALL_OW 263
32015: PUSH
32016: LD_INT 1
32018: EQUAL
32019: IFFALSE 32035
// ComExitVehicle ( IsInUnit ( j ) ) ;
32021: LD_VAR 0 3
32025: PPUSH
32026: CALL_OW 310
32030: PPUSH
32031: CALL_OW 121
// if GetControl ( j ) = control_remote then
32035: LD_VAR 0 3
32039: PPUSH
32040: CALL_OW 263
32044: PUSH
32045: LD_INT 2
32047: EQUAL
32048: IFFALSE 32059
// ComUnlink ( j ) ;
32050: LD_VAR 0 3
32054: PPUSH
32055: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
32059: LD_ADDR_VAR 0 9
32063: PUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_INT 3
32071: PPUSH
32072: CALL 41532 0 2
32076: ST_TO_ADDR
// if fac then
32077: LD_VAR 0 9
32081: IFFALSE 32177
// begin for k in fac do
32083: LD_ADDR_VAR 0 4
32087: PUSH
32088: LD_VAR 0 9
32092: PUSH
32093: FOR_IN
32094: IFFALSE 32175
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
32096: LD_ADDR_VAR 0 10
32100: PUSH
32101: LD_VAR 0 9
32105: PPUSH
32106: LD_VAR 0 3
32110: PPUSH
32111: CALL_OW 265
32115: PPUSH
32116: LD_VAR 0 3
32120: PPUSH
32121: CALL_OW 262
32125: PPUSH
32126: LD_VAR 0 3
32130: PPUSH
32131: CALL_OW 263
32135: PPUSH
32136: LD_VAR 0 3
32140: PPUSH
32141: CALL_OW 264
32145: PPUSH
32146: CALL 52190 0 5
32150: ST_TO_ADDR
// if components then
32151: LD_VAR 0 10
32155: IFFALSE 32173
// begin MC_InsertProduceList ( i , components ) ;
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_VAR 0 10
32166: PPUSH
32167: CALL 41077 0 2
// break ;
32171: GO 32175
// end ; end ;
32173: GO 32093
32175: POP
32176: POP
// end ; continue ;
32177: GO 31673
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
32179: LD_VAR 0 3
32183: PPUSH
32184: LD_INT 1
32186: PPUSH
32187: CALL_OW 289
32191: PUSH
32192: LD_INT 100
32194: LESS
32195: PUSH
32196: LD_VAR 0 3
32200: PPUSH
32201: CALL_OW 314
32205: NOT
32206: AND
32207: IFFALSE 32236
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
32209: LD_VAR 0 3
32213: PPUSH
32214: LD_VAR 0 6
32218: PUSH
32219: LD_INT 2
32221: ARRAY
32222: PPUSH
32223: LD_VAR 0 6
32227: PUSH
32228: LD_INT 3
32230: ARRAY
32231: PPUSH
32232: CALL_OW 117
// break ;
32236: GO 32240
// end ;
32238: GO 31673
32240: POP
32241: POP
// end ; end ;
32242: GO 30511
32244: POP
32245: POP
// end ;
32246: LD_VAR 0 1
32250: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
32251: LD_INT 0
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
// if not mc_bases then
32257: LD_EXP 50
32261: NOT
32262: IFFALSE 32266
// exit ;
32264: GO 32427
// for i = 1 to mc_bases do
32266: LD_ADDR_VAR 0 2
32270: PUSH
32271: DOUBLE
32272: LD_INT 1
32274: DEC
32275: ST_TO_ADDR
32276: LD_EXP 50
32280: PUSH
32281: FOR_TO
32282: IFFALSE 32425
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
32284: LD_ADDR_VAR 0 4
32288: PUSH
32289: LD_EXP 69
32293: PUSH
32294: LD_VAR 0 2
32298: ARRAY
32299: PUSH
32300: LD_EXP 72
32304: PUSH
32305: LD_VAR 0 2
32309: ARRAY
32310: UNION
32311: PPUSH
32312: LD_INT 33
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PPUSH
32322: CALL_OW 72
32326: ST_TO_ADDR
// if tmp then
32327: LD_VAR 0 4
32331: IFFALSE 32423
// for j in tmp do
32333: LD_ADDR_VAR 0 3
32337: PUSH
32338: LD_VAR 0 4
32342: PUSH
32343: FOR_IN
32344: IFFALSE 32421
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
32346: LD_VAR 0 3
32350: PPUSH
32351: CALL_OW 312
32355: NOT
32356: PUSH
32357: LD_VAR 0 3
32361: PPUSH
32362: CALL_OW 256
32366: PUSH
32367: LD_INT 250
32369: GREATEREQUAL
32370: AND
32371: IFFALSE 32384
// Connect ( j ) else
32373: LD_VAR 0 3
32377: PPUSH
32378: CALL 57591 0 1
32382: GO 32419
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
32384: LD_VAR 0 3
32388: PPUSH
32389: CALL_OW 256
32393: PUSH
32394: LD_INT 250
32396: LESS
32397: PUSH
32398: LD_VAR 0 3
32402: PPUSH
32403: CALL_OW 312
32407: AND
32408: IFFALSE 32419
// ComUnlink ( j ) ;
32410: LD_VAR 0 3
32414: PPUSH
32415: CALL_OW 136
32419: GO 32343
32421: POP
32422: POP
// end ;
32423: GO 32281
32425: POP
32426: POP
// end ;
32427: LD_VAR 0 1
32431: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
32432: LD_INT 0
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
// if not mc_bases then
32439: LD_EXP 50
32443: NOT
32444: IFFALSE 32448
// exit ;
32446: GO 32893
// for i = 1 to mc_bases do
32448: LD_ADDR_VAR 0 2
32452: PUSH
32453: DOUBLE
32454: LD_INT 1
32456: DEC
32457: ST_TO_ADDR
32458: LD_EXP 50
32462: PUSH
32463: FOR_TO
32464: IFFALSE 32891
// begin if not mc_produce [ i ] then
32466: LD_EXP 71
32470: PUSH
32471: LD_VAR 0 2
32475: ARRAY
32476: NOT
32477: IFFALSE 32481
// continue ;
32479: GO 32463
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: LD_EXP 50
32490: PUSH
32491: LD_VAR 0 2
32495: ARRAY
32496: PPUSH
32497: LD_INT 30
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 72
32511: ST_TO_ADDR
// if not fac then
32512: LD_VAR 0 5
32516: NOT
32517: IFFALSE 32521
// continue ;
32519: GO 32463
// for j in fac do
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_VAR 0 5
32530: PUSH
32531: FOR_IN
32532: IFFALSE 32887
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
32534: LD_VAR 0 3
32538: PPUSH
32539: CALL_OW 461
32543: PUSH
32544: LD_INT 2
32546: NONEQUAL
32547: PUSH
32548: LD_VAR 0 3
32552: PPUSH
32553: LD_INT 15
32555: PPUSH
32556: CALL 57251 0 2
32560: PUSH
32561: LD_INT 4
32563: ARRAY
32564: OR
32565: IFFALSE 32569
// continue ;
32567: GO 32531
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
32569: LD_VAR 0 3
32573: PPUSH
32574: LD_EXP 71
32578: PUSH
32579: LD_VAR 0 2
32583: ARRAY
32584: PUSH
32585: LD_INT 1
32587: ARRAY
32588: PUSH
32589: LD_INT 1
32591: ARRAY
32592: PPUSH
32593: LD_EXP 71
32597: PUSH
32598: LD_VAR 0 2
32602: ARRAY
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: PUSH
32608: LD_INT 2
32610: ARRAY
32611: PPUSH
32612: LD_EXP 71
32616: PUSH
32617: LD_VAR 0 2
32621: ARRAY
32622: PUSH
32623: LD_INT 1
32625: ARRAY
32626: PUSH
32627: LD_INT 3
32629: ARRAY
32630: PPUSH
32631: LD_EXP 71
32635: PUSH
32636: LD_VAR 0 2
32640: ARRAY
32641: PUSH
32642: LD_INT 1
32644: ARRAY
32645: PUSH
32646: LD_INT 4
32648: ARRAY
32649: PPUSH
32650: CALL_OW 448
32654: PUSH
32655: LD_VAR 0 3
32659: PPUSH
32660: LD_EXP 71
32664: PUSH
32665: LD_VAR 0 2
32669: ARRAY
32670: PUSH
32671: LD_INT 1
32673: ARRAY
32674: PUSH
32675: LD_INT 1
32677: ARRAY
32678: PUSH
32679: LD_EXP 71
32683: PUSH
32684: LD_VAR 0 2
32688: ARRAY
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PUSH
32694: LD_INT 2
32696: ARRAY
32697: PUSH
32698: LD_EXP 71
32702: PUSH
32703: LD_VAR 0 2
32707: ARRAY
32708: PUSH
32709: LD_INT 1
32711: ARRAY
32712: PUSH
32713: LD_INT 3
32715: ARRAY
32716: PUSH
32717: LD_EXP 71
32721: PUSH
32722: LD_VAR 0 2
32726: ARRAY
32727: PUSH
32728: LD_INT 1
32730: ARRAY
32731: PUSH
32732: LD_INT 4
32734: ARRAY
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: PPUSH
32742: CALL 60922 0 2
32746: AND
32747: IFFALSE 32885
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32749: LD_VAR 0 3
32753: PPUSH
32754: LD_EXP 71
32758: PUSH
32759: LD_VAR 0 2
32763: ARRAY
32764: PUSH
32765: LD_INT 1
32767: ARRAY
32768: PUSH
32769: LD_INT 1
32771: ARRAY
32772: PPUSH
32773: LD_EXP 71
32777: PUSH
32778: LD_VAR 0 2
32782: ARRAY
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: PUSH
32788: LD_INT 2
32790: ARRAY
32791: PPUSH
32792: LD_EXP 71
32796: PUSH
32797: LD_VAR 0 2
32801: ARRAY
32802: PUSH
32803: LD_INT 1
32805: ARRAY
32806: PUSH
32807: LD_INT 3
32809: ARRAY
32810: PPUSH
32811: LD_EXP 71
32815: PUSH
32816: LD_VAR 0 2
32820: ARRAY
32821: PUSH
32822: LD_INT 1
32824: ARRAY
32825: PUSH
32826: LD_INT 4
32828: ARRAY
32829: PPUSH
32830: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32834: LD_ADDR_VAR 0 4
32838: PUSH
32839: LD_EXP 71
32843: PUSH
32844: LD_VAR 0 2
32848: ARRAY
32849: PPUSH
32850: LD_INT 1
32852: PPUSH
32853: CALL_OW 3
32857: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32858: LD_ADDR_EXP 71
32862: PUSH
32863: LD_EXP 71
32867: PPUSH
32868: LD_VAR 0 2
32872: PPUSH
32873: LD_VAR 0 4
32877: PPUSH
32878: CALL_OW 1
32882: ST_TO_ADDR
// break ;
32883: GO 32887
// end ; end ;
32885: GO 32531
32887: POP
32888: POP
// end ;
32889: GO 32463
32891: POP
32892: POP
// end ;
32893: LD_VAR 0 1
32897: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32898: LD_INT 0
32900: PPUSH
32901: PPUSH
32902: PPUSH
// if not mc_bases then
32903: LD_EXP 50
32907: NOT
32908: IFFALSE 32912
// exit ;
32910: GO 33001
// for i = 1 to mc_bases do
32912: LD_ADDR_VAR 0 2
32916: PUSH
32917: DOUBLE
32918: LD_INT 1
32920: DEC
32921: ST_TO_ADDR
32922: LD_EXP 50
32926: PUSH
32927: FOR_TO
32928: IFFALSE 32999
// begin if mc_attack [ i ] then
32930: LD_EXP 70
32934: PUSH
32935: LD_VAR 0 2
32939: ARRAY
32940: IFFALSE 32997
// begin tmp := mc_attack [ i ] [ 1 ] ;
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_EXP 70
32951: PUSH
32952: LD_VAR 0 2
32956: ARRAY
32957: PUSH
32958: LD_INT 1
32960: ARRAY
32961: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32962: LD_ADDR_EXP 70
32966: PUSH
32967: LD_EXP 70
32971: PPUSH
32972: LD_VAR 0 2
32976: PPUSH
32977: EMPTY
32978: PPUSH
32979: CALL_OW 1
32983: ST_TO_ADDR
// Attack ( tmp ) ;
32984: LD_VAR 0 3
32988: PPUSH
32989: CALL 83112 0 1
// exit ;
32993: POP
32994: POP
32995: GO 33001
// end ; end ;
32997: GO 32927
32999: POP
33000: POP
// end ;
33001: LD_VAR 0 1
33005: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
33006: LD_INT 0
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
// if not mc_bases then
33015: LD_EXP 50
33019: NOT
33020: IFFALSE 33024
// exit ;
33022: GO 33606
// for i = 1 to mc_bases do
33024: LD_ADDR_VAR 0 2
33028: PUSH
33029: DOUBLE
33030: LD_INT 1
33032: DEC
33033: ST_TO_ADDR
33034: LD_EXP 50
33038: PUSH
33039: FOR_TO
33040: IFFALSE 33604
// begin if not mc_bases [ i ] then
33042: LD_EXP 50
33046: PUSH
33047: LD_VAR 0 2
33051: ARRAY
33052: NOT
33053: IFFALSE 33057
// continue ;
33055: GO 33039
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
33057: LD_ADDR_VAR 0 7
33061: PUSH
33062: LD_EXP 50
33066: PUSH
33067: LD_VAR 0 2
33071: ARRAY
33072: PUSH
33073: LD_INT 1
33075: ARRAY
33076: PPUSH
33077: CALL 51494 0 1
33081: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
33082: LD_ADDR_EXP 73
33086: PUSH
33087: LD_EXP 73
33091: PPUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: LD_EXP 50
33101: PUSH
33102: LD_VAR 0 2
33106: ARRAY
33107: PUSH
33108: LD_INT 1
33110: ARRAY
33111: PPUSH
33112: CALL_OW 255
33116: PPUSH
33117: LD_EXP 75
33121: PUSH
33122: LD_VAR 0 2
33126: ARRAY
33127: PPUSH
33128: CALL 49048 0 2
33132: PPUSH
33133: CALL_OW 1
33137: ST_TO_ADDR
// if not mc_scan [ i ] then
33138: LD_EXP 73
33142: PUSH
33143: LD_VAR 0 2
33147: ARRAY
33148: NOT
33149: IFFALSE 33304
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: LD_EXP 50
33160: PUSH
33161: LD_VAR 0 2
33165: ARRAY
33166: PPUSH
33167: LD_INT 2
33169: PUSH
33170: LD_INT 25
33172: PUSH
33173: LD_INT 5
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 25
33182: PUSH
33183: LD_INT 8
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 25
33192: PUSH
33193: LD_INT 9
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 72
33210: ST_TO_ADDR
// if not tmp then
33211: LD_VAR 0 4
33215: NOT
33216: IFFALSE 33220
// continue ;
33218: GO 33039
// for j in tmp do
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_VAR 0 4
33229: PUSH
33230: FOR_IN
33231: IFFALSE 33302
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
33233: LD_VAR 0 3
33237: PPUSH
33238: CALL_OW 310
33242: PPUSH
33243: CALL_OW 266
33247: PUSH
33248: LD_INT 5
33250: EQUAL
33251: PUSH
33252: LD_VAR 0 3
33256: PPUSH
33257: CALL_OW 257
33261: PUSH
33262: LD_INT 1
33264: EQUAL
33265: AND
33266: PUSH
33267: LD_VAR 0 3
33271: PPUSH
33272: CALL_OW 459
33276: NOT
33277: AND
33278: PUSH
33279: LD_VAR 0 7
33283: AND
33284: IFFALSE 33300
// ComChangeProfession ( j , class ) ;
33286: LD_VAR 0 3
33290: PPUSH
33291: LD_VAR 0 7
33295: PPUSH
33296: CALL_OW 123
33300: GO 33230
33302: POP
33303: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
33304: LD_EXP 73
33308: PUSH
33309: LD_VAR 0 2
33313: ARRAY
33314: PUSH
33315: LD_EXP 72
33319: PUSH
33320: LD_VAR 0 2
33324: ARRAY
33325: NOT
33326: AND
33327: PUSH
33328: LD_EXP 50
33332: PUSH
33333: LD_VAR 0 2
33337: ARRAY
33338: PPUSH
33339: LD_INT 30
33341: PUSH
33342: LD_INT 32
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PPUSH
33349: CALL_OW 72
33353: NOT
33354: AND
33355: PUSH
33356: LD_EXP 50
33360: PUSH
33361: LD_VAR 0 2
33365: ARRAY
33366: PPUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 30
33372: PUSH
33373: LD_INT 4
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 30
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: PPUSH
33395: CALL_OW 72
33399: NOT
33400: AND
33401: IFFALSE 33533
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33403: LD_ADDR_VAR 0 4
33407: PUSH
33408: LD_EXP 50
33412: PUSH
33413: LD_VAR 0 2
33417: ARRAY
33418: PPUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 25
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 25
33434: PUSH
33435: LD_INT 5
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 25
33444: PUSH
33445: LD_INT 8
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 25
33454: PUSH
33455: LD_INT 9
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 72
33473: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
33474: LD_ADDR_VAR 0 4
33478: PUSH
33479: LD_VAR 0 4
33483: PUSH
33484: LD_VAR 0 4
33488: PPUSH
33489: LD_INT 18
33491: PPUSH
33492: CALL 87928 0 2
33496: DIFF
33497: ST_TO_ADDR
// if tmp then
33498: LD_VAR 0 4
33502: IFFALSE 33533
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
33504: LD_VAR 0 2
33508: PPUSH
33509: LD_VAR 0 4
33513: PPUSH
33514: LD_EXP 75
33518: PUSH
33519: LD_VAR 0 2
33523: ARRAY
33524: PPUSH
33525: CALL 49083 0 3
// exit ;
33529: POP
33530: POP
33531: GO 33606
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
33533: LD_EXP 73
33537: PUSH
33538: LD_VAR 0 2
33542: ARRAY
33543: PUSH
33544: LD_EXP 72
33548: PUSH
33549: LD_VAR 0 2
33553: ARRAY
33554: AND
33555: IFFALSE 33602
// begin tmp := mc_defender [ i ] ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_EXP 72
33566: PUSH
33567: LD_VAR 0 2
33571: ARRAY
33572: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: LD_EXP 73
33587: PUSH
33588: LD_VAR 0 2
33592: ARRAY
33593: PPUSH
33594: CALL 49644 0 3
// exit ;
33598: POP
33599: POP
33600: GO 33606
// end ; end ;
33602: GO 33039
33604: POP
33605: POP
// end ;
33606: LD_VAR 0 1
33610: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33611: LD_INT 0
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
// if not mc_bases then
33624: LD_EXP 50
33628: NOT
33629: IFFALSE 33633
// exit ;
33631: GO 34720
// for i = 1 to mc_bases do
33633: LD_ADDR_VAR 0 2
33637: PUSH
33638: DOUBLE
33639: LD_INT 1
33641: DEC
33642: ST_TO_ADDR
33643: LD_EXP 50
33647: PUSH
33648: FOR_TO
33649: IFFALSE 34718
// begin tmp := mc_lab [ i ] ;
33651: LD_ADDR_VAR 0 6
33655: PUSH
33656: LD_EXP 83
33660: PUSH
33661: LD_VAR 0 2
33665: ARRAY
33666: ST_TO_ADDR
// if not tmp then
33667: LD_VAR 0 6
33671: NOT
33672: IFFALSE 33676
// continue ;
33674: GO 33648
// idle_lab := 0 ;
33676: LD_ADDR_VAR 0 11
33680: PUSH
33681: LD_INT 0
33683: ST_TO_ADDR
// for j in tmp do
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_VAR 0 6
33693: PUSH
33694: FOR_IN
33695: IFFALSE 34714
// begin researching := false ;
33697: LD_ADDR_VAR 0 10
33701: PUSH
33702: LD_INT 0
33704: ST_TO_ADDR
// side := GetSide ( j ) ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: LD_VAR 0 3
33714: PPUSH
33715: CALL_OW 255
33719: ST_TO_ADDR
// if not mc_tech [ side ] then
33720: LD_EXP 77
33724: PUSH
33725: LD_VAR 0 4
33729: ARRAY
33730: NOT
33731: IFFALSE 33735
// continue ;
33733: GO 33694
// if BuildingStatus ( j ) = bs_idle then
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 461
33744: PUSH
33745: LD_INT 2
33747: EQUAL
33748: IFFALSE 33936
// begin if idle_lab and UnitsInside ( j ) < 6 then
33750: LD_VAR 0 11
33754: PUSH
33755: LD_VAR 0 3
33759: PPUSH
33760: CALL_OW 313
33764: PUSH
33765: LD_INT 6
33767: LESS
33768: AND
33769: IFFALSE 33840
// begin tmp2 := UnitsInside ( idle_lab ) ;
33771: LD_ADDR_VAR 0 9
33775: PUSH
33776: LD_VAR 0 11
33780: PPUSH
33781: CALL_OW 313
33785: ST_TO_ADDR
// if tmp2 then
33786: LD_VAR 0 9
33790: IFFALSE 33832
// for x in tmp2 do
33792: LD_ADDR_VAR 0 7
33796: PUSH
33797: LD_VAR 0 9
33801: PUSH
33802: FOR_IN
33803: IFFALSE 33830
// begin ComExitBuilding ( x ) ;
33805: LD_VAR 0 7
33809: PPUSH
33810: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33814: LD_VAR 0 7
33818: PPUSH
33819: LD_VAR 0 3
33823: PPUSH
33824: CALL_OW 180
// end ;
33828: GO 33802
33830: POP
33831: POP
// idle_lab := 0 ;
33832: LD_ADDR_VAR 0 11
33836: PUSH
33837: LD_INT 0
33839: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33840: LD_ADDR_VAR 0 5
33844: PUSH
33845: LD_EXP 77
33849: PUSH
33850: LD_VAR 0 4
33854: ARRAY
33855: PUSH
33856: FOR_IN
33857: IFFALSE 33917
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33859: LD_VAR 0 3
33863: PPUSH
33864: LD_VAR 0 5
33868: PPUSH
33869: CALL_OW 430
33873: PUSH
33874: LD_VAR 0 4
33878: PPUSH
33879: LD_VAR 0 5
33883: PPUSH
33884: CALL 48153 0 2
33888: AND
33889: IFFALSE 33915
// begin researching := true ;
33891: LD_ADDR_VAR 0 10
33895: PUSH
33896: LD_INT 1
33898: ST_TO_ADDR
// ComResearch ( j , t ) ;
33899: LD_VAR 0 3
33903: PPUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: CALL_OW 124
// break ;
33913: GO 33917
// end ;
33915: GO 33856
33917: POP
33918: POP
// if not researching then
33919: LD_VAR 0 10
33923: NOT
33924: IFFALSE 33936
// idle_lab := j ;
33926: LD_ADDR_VAR 0 11
33930: PUSH
33931: LD_VAR 0 3
33935: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33936: LD_VAR 0 3
33940: PPUSH
33941: CALL_OW 461
33945: PUSH
33946: LD_INT 10
33948: EQUAL
33949: IFFALSE 34537
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33951: LD_EXP 79
33955: PUSH
33956: LD_VAR 0 2
33960: ARRAY
33961: NOT
33962: PUSH
33963: LD_EXP 80
33967: PUSH
33968: LD_VAR 0 2
33972: ARRAY
33973: NOT
33974: AND
33975: PUSH
33976: LD_EXP 77
33980: PUSH
33981: LD_VAR 0 4
33985: ARRAY
33986: PUSH
33987: LD_INT 1
33989: GREATER
33990: AND
33991: IFFALSE 34122
// begin ComCancel ( j ) ;
33993: LD_VAR 0 3
33997: PPUSH
33998: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
34002: LD_ADDR_EXP 77
34006: PUSH
34007: LD_EXP 77
34011: PPUSH
34012: LD_VAR 0 4
34016: PPUSH
34017: LD_EXP 77
34021: PUSH
34022: LD_VAR 0 4
34026: ARRAY
34027: PPUSH
34028: LD_EXP 77
34032: PUSH
34033: LD_VAR 0 4
34037: ARRAY
34038: PUSH
34039: LD_INT 1
34041: MINUS
34042: PPUSH
34043: LD_EXP 77
34047: PUSH
34048: LD_VAR 0 4
34052: ARRAY
34053: PPUSH
34054: LD_INT 0
34056: PPUSH
34057: CALL 54076 0 4
34061: PPUSH
34062: CALL_OW 1
34066: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
34067: LD_ADDR_EXP 77
34071: PUSH
34072: LD_EXP 77
34076: PPUSH
34077: LD_VAR 0 4
34081: PPUSH
34082: LD_EXP 77
34086: PUSH
34087: LD_VAR 0 4
34091: ARRAY
34092: PPUSH
34093: LD_EXP 77
34097: PUSH
34098: LD_VAR 0 4
34102: ARRAY
34103: PPUSH
34104: LD_INT 1
34106: PPUSH
34107: LD_INT 0
34109: PPUSH
34110: CALL 54076 0 4
34114: PPUSH
34115: CALL_OW 1
34119: ST_TO_ADDR
// continue ;
34120: GO 33694
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
34122: LD_EXP 79
34126: PUSH
34127: LD_VAR 0 2
34131: ARRAY
34132: PUSH
34133: LD_EXP 80
34137: PUSH
34138: LD_VAR 0 2
34142: ARRAY
34143: NOT
34144: AND
34145: IFFALSE 34272
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
34147: LD_ADDR_EXP 80
34151: PUSH
34152: LD_EXP 80
34156: PPUSH
34157: LD_VAR 0 2
34161: PUSH
34162: LD_EXP 80
34166: PUSH
34167: LD_VAR 0 2
34171: ARRAY
34172: PUSH
34173: LD_INT 1
34175: PLUS
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PPUSH
34181: LD_EXP 79
34185: PUSH
34186: LD_VAR 0 2
34190: ARRAY
34191: PUSH
34192: LD_INT 1
34194: ARRAY
34195: PPUSH
34196: CALL 54658 0 3
34200: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
34201: LD_EXP 79
34205: PUSH
34206: LD_VAR 0 2
34210: ARRAY
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PPUSH
34216: LD_INT 112
34218: PPUSH
34219: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
34223: LD_ADDR_VAR 0 9
34227: PUSH
34228: LD_EXP 79
34232: PUSH
34233: LD_VAR 0 2
34237: ARRAY
34238: PPUSH
34239: LD_INT 1
34241: PPUSH
34242: CALL_OW 3
34246: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
34247: LD_ADDR_EXP 79
34251: PUSH
34252: LD_EXP 79
34256: PPUSH
34257: LD_VAR 0 2
34261: PPUSH
34262: LD_VAR 0 9
34266: PPUSH
34267: CALL_OW 1
34271: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
34272: LD_EXP 79
34276: PUSH
34277: LD_VAR 0 2
34281: ARRAY
34282: PUSH
34283: LD_EXP 80
34287: PUSH
34288: LD_VAR 0 2
34292: ARRAY
34293: AND
34294: PUSH
34295: LD_EXP 80
34299: PUSH
34300: LD_VAR 0 2
34304: ARRAY
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: CALL_OW 310
34314: NOT
34315: AND
34316: PUSH
34317: LD_VAR 0 3
34321: PPUSH
34322: CALL_OW 313
34326: PUSH
34327: LD_INT 6
34329: EQUAL
34330: AND
34331: IFFALSE 34387
// begin tmp2 := UnitsInside ( j ) ;
34333: LD_ADDR_VAR 0 9
34337: PUSH
34338: LD_VAR 0 3
34342: PPUSH
34343: CALL_OW 313
34347: ST_TO_ADDR
// if tmp2 = 6 then
34348: LD_VAR 0 9
34352: PUSH
34353: LD_INT 6
34355: EQUAL
34356: IFFALSE 34387
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
34358: LD_VAR 0 9
34362: PUSH
34363: LD_INT 1
34365: ARRAY
34366: PPUSH
34367: LD_INT 112
34369: PPUSH
34370: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
34374: LD_VAR 0 9
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: PPUSH
34383: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
34387: LD_EXP 80
34391: PUSH
34392: LD_VAR 0 2
34396: ARRAY
34397: PUSH
34398: LD_EXP 80
34402: PUSH
34403: LD_VAR 0 2
34407: ARRAY
34408: PUSH
34409: LD_INT 1
34411: ARRAY
34412: PPUSH
34413: CALL_OW 314
34417: NOT
34418: AND
34419: PUSH
34420: LD_EXP 80
34424: PUSH
34425: LD_VAR 0 2
34429: ARRAY
34430: PUSH
34431: LD_INT 1
34433: ARRAY
34434: PPUSH
34435: CALL_OW 310
34439: NOT
34440: AND
34441: IFFALSE 34467
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
34443: LD_EXP 80
34447: PUSH
34448: LD_VAR 0 2
34452: ARRAY
34453: PUSH
34454: LD_INT 1
34456: ARRAY
34457: PPUSH
34458: LD_VAR 0 3
34462: PPUSH
34463: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
34467: LD_EXP 80
34471: PUSH
34472: LD_VAR 0 2
34476: ARRAY
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PPUSH
34482: CALL_OW 310
34486: PUSH
34487: LD_EXP 80
34491: PUSH
34492: LD_VAR 0 2
34496: ARRAY
34497: PUSH
34498: LD_INT 1
34500: ARRAY
34501: PPUSH
34502: CALL_OW 310
34506: PPUSH
34507: CALL_OW 461
34511: PUSH
34512: LD_INT 3
34514: NONEQUAL
34515: AND
34516: IFFALSE 34537
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
34518: LD_EXP 80
34522: PUSH
34523: LD_VAR 0 2
34527: ARRAY
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
34537: LD_VAR 0 3
34541: PPUSH
34542: CALL_OW 461
34546: PUSH
34547: LD_INT 6
34549: EQUAL
34550: PUSH
34551: LD_VAR 0 6
34555: PUSH
34556: LD_INT 1
34558: GREATER
34559: AND
34560: IFFALSE 34712
// begin sci := [ ] ;
34562: LD_ADDR_VAR 0 8
34566: PUSH
34567: EMPTY
34568: ST_TO_ADDR
// for x in ( tmp diff j ) do
34569: LD_ADDR_VAR 0 7
34573: PUSH
34574: LD_VAR 0 6
34578: PUSH
34579: LD_VAR 0 3
34583: DIFF
34584: PUSH
34585: FOR_IN
34586: IFFALSE 34638
// begin if sci = 6 then
34588: LD_VAR 0 8
34592: PUSH
34593: LD_INT 6
34595: EQUAL
34596: IFFALSE 34600
// break ;
34598: GO 34638
// if BuildingStatus ( x ) = bs_idle then
34600: LD_VAR 0 7
34604: PPUSH
34605: CALL_OW 461
34609: PUSH
34610: LD_INT 2
34612: EQUAL
34613: IFFALSE 34636
// sci := sci ^ UnitsInside ( x ) ;
34615: LD_ADDR_VAR 0 8
34619: PUSH
34620: LD_VAR 0 8
34624: PUSH
34625: LD_VAR 0 7
34629: PPUSH
34630: CALL_OW 313
34634: ADD
34635: ST_TO_ADDR
// end ;
34636: GO 34585
34638: POP
34639: POP
// if not sci then
34640: LD_VAR 0 8
34644: NOT
34645: IFFALSE 34649
// continue ;
34647: GO 33694
// for x in sci do
34649: LD_ADDR_VAR 0 7
34653: PUSH
34654: LD_VAR 0 8
34658: PUSH
34659: FOR_IN
34660: IFFALSE 34710
// if IsInUnit ( x ) and not HasTask ( x ) then
34662: LD_VAR 0 7
34666: PPUSH
34667: CALL_OW 310
34671: PUSH
34672: LD_VAR 0 7
34676: PPUSH
34677: CALL_OW 314
34681: NOT
34682: AND
34683: IFFALSE 34708
// begin ComExitBuilding ( x ) ;
34685: LD_VAR 0 7
34689: PPUSH
34690: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
34694: LD_VAR 0 7
34698: PPUSH
34699: LD_VAR 0 3
34703: PPUSH
34704: CALL_OW 180
// end ;
34708: GO 34659
34710: POP
34711: POP
// end ; end ;
34712: GO 33694
34714: POP
34715: POP
// end ;
34716: GO 33648
34718: POP
34719: POP
// end ;
34720: LD_VAR 0 1
34724: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
// if not mc_bases then
34729: LD_EXP 50
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 34819
// for i = 1 to mc_bases do
34738: LD_ADDR_VAR 0 2
34742: PUSH
34743: DOUBLE
34744: LD_INT 1
34746: DEC
34747: ST_TO_ADDR
34748: LD_EXP 50
34752: PUSH
34753: FOR_TO
34754: IFFALSE 34817
// if mc_mines [ i ] and mc_miners [ i ] then
34756: LD_EXP 63
34760: PUSH
34761: LD_VAR 0 2
34765: ARRAY
34766: PUSH
34767: LD_EXP 64
34771: PUSH
34772: LD_VAR 0 2
34776: ARRAY
34777: AND
34778: IFFALSE 34815
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34780: LD_EXP 64
34784: PUSH
34785: LD_VAR 0 2
34789: ARRAY
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PPUSH
34795: CALL_OW 255
34799: PPUSH
34800: LD_EXP 63
34804: PUSH
34805: LD_VAR 0 2
34809: ARRAY
34810: PPUSH
34811: CALL 51647 0 2
34815: GO 34753
34817: POP
34818: POP
// end ;
34819: LD_VAR 0 1
34823: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34824: LD_INT 0
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
// if not mc_bases or not mc_parking then
34834: LD_EXP 50
34838: NOT
34839: PUSH
34840: LD_EXP 74
34844: NOT
34845: OR
34846: IFFALSE 34850
// exit ;
34848: GO 35549
// for i = 1 to mc_bases do
34850: LD_ADDR_VAR 0 2
34854: PUSH
34855: DOUBLE
34856: LD_INT 1
34858: DEC
34859: ST_TO_ADDR
34860: LD_EXP 50
34864: PUSH
34865: FOR_TO
34866: IFFALSE 35547
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34868: LD_EXP 50
34872: PUSH
34873: LD_VAR 0 2
34877: ARRAY
34878: NOT
34879: PUSH
34880: LD_EXP 74
34884: PUSH
34885: LD_VAR 0 2
34889: ARRAY
34890: NOT
34891: OR
34892: IFFALSE 34896
// continue ;
34894: GO 34865
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34896: LD_ADDR_VAR 0 5
34900: PUSH
34901: LD_EXP 50
34905: PUSH
34906: LD_VAR 0 2
34910: ARRAY
34911: PUSH
34912: LD_INT 1
34914: ARRAY
34915: PPUSH
34916: CALL_OW 255
34920: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34921: LD_ADDR_VAR 0 6
34925: PUSH
34926: LD_EXP 50
34930: PUSH
34931: LD_VAR 0 2
34935: ARRAY
34936: PPUSH
34937: LD_INT 30
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PPUSH
34947: CALL_OW 72
34951: ST_TO_ADDR
// if not fac then
34952: LD_VAR 0 6
34956: NOT
34957: IFFALSE 35008
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34959: LD_ADDR_VAR 0 6
34963: PUSH
34964: LD_EXP 50
34968: PUSH
34969: LD_VAR 0 2
34973: ARRAY
34974: PPUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 30
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 30
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: PPUSH
35003: CALL_OW 72
35007: ST_TO_ADDR
// if not fac then
35008: LD_VAR 0 6
35012: NOT
35013: IFFALSE 35017
// continue ;
35015: GO 34865
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
35017: LD_ADDR_VAR 0 7
35021: PUSH
35022: LD_EXP 74
35026: PUSH
35027: LD_VAR 0 2
35031: ARRAY
35032: PPUSH
35033: LD_INT 22
35035: PUSH
35036: LD_VAR 0 5
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 21
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 24
35060: PUSH
35061: LD_INT 1000
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: PPUSH
35077: CALL_OW 70
35081: ST_TO_ADDR
// for j in fac do
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_VAR 0 6
35091: PUSH
35092: FOR_IN
35093: IFFALSE 35174
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
35095: LD_ADDR_VAR 0 7
35099: PUSH
35100: LD_VAR 0 7
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_VAR 0 5
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 91
35119: PUSH
35120: LD_VAR 0 3
35124: PUSH
35125: LD_INT 15
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 21
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: LD_INT 24
35148: PUSH
35149: LD_INT 1000
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 69
35170: UNION
35171: ST_TO_ADDR
35172: GO 35092
35174: POP
35175: POP
// if not vehs then
35176: LD_VAR 0 7
35180: NOT
35181: IFFALSE 35207
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
35183: LD_ADDR_EXP 62
35187: PUSH
35188: LD_EXP 62
35192: PPUSH
35193: LD_VAR 0 2
35197: PPUSH
35198: EMPTY
35199: PPUSH
35200: CALL_OW 1
35204: ST_TO_ADDR
// continue ;
35205: GO 34865
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
35207: LD_ADDR_VAR 0 8
35211: PUSH
35212: LD_EXP 50
35216: PUSH
35217: LD_VAR 0 2
35221: ARRAY
35222: PPUSH
35223: LD_INT 30
35225: PUSH
35226: LD_INT 3
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PPUSH
35233: CALL_OW 72
35237: ST_TO_ADDR
// if tmp then
35238: LD_VAR 0 8
35242: IFFALSE 35345
// begin for j in tmp do
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_VAR 0 8
35253: PUSH
35254: FOR_IN
35255: IFFALSE 35343
// for k in UnitsInside ( j ) do
35257: LD_ADDR_VAR 0 4
35261: PUSH
35262: LD_VAR 0 3
35266: PPUSH
35267: CALL_OW 313
35271: PUSH
35272: FOR_IN
35273: IFFALSE 35339
// if k then
35275: LD_VAR 0 4
35279: IFFALSE 35337
// if not k in mc_repair_vehicle [ i ] then
35281: LD_VAR 0 4
35285: PUSH
35286: LD_EXP 62
35290: PUSH
35291: LD_VAR 0 2
35295: ARRAY
35296: IN
35297: NOT
35298: IFFALSE 35337
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
35300: LD_ADDR_EXP 62
35304: PUSH
35305: LD_EXP 62
35309: PPUSH
35310: LD_VAR 0 2
35314: PPUSH
35315: LD_EXP 62
35319: PUSH
35320: LD_VAR 0 2
35324: ARRAY
35325: PUSH
35326: LD_VAR 0 4
35330: UNION
35331: PPUSH
35332: CALL_OW 1
35336: ST_TO_ADDR
35337: GO 35272
35339: POP
35340: POP
35341: GO 35254
35343: POP
35344: POP
// end ; if not mc_repair_vehicle [ i ] then
35345: LD_EXP 62
35349: PUSH
35350: LD_VAR 0 2
35354: ARRAY
35355: NOT
35356: IFFALSE 35360
// continue ;
35358: GO 34865
// for j in mc_repair_vehicle [ i ] do
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_EXP 62
35369: PUSH
35370: LD_VAR 0 2
35374: ARRAY
35375: PUSH
35376: FOR_IN
35377: IFFALSE 35543
// begin if GetClass ( j ) <> 3 then
35379: LD_VAR 0 3
35383: PPUSH
35384: CALL_OW 257
35388: PUSH
35389: LD_INT 3
35391: NONEQUAL
35392: IFFALSE 35433
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
35394: LD_ADDR_EXP 62
35398: PUSH
35399: LD_EXP 62
35403: PPUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: LD_EXP 62
35413: PUSH
35414: LD_VAR 0 2
35418: ARRAY
35419: PUSH
35420: LD_VAR 0 3
35424: DIFF
35425: PPUSH
35426: CALL_OW 1
35430: ST_TO_ADDR
// continue ;
35431: GO 35376
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
35433: LD_VAR 0 3
35437: PPUSH
35438: CALL_OW 311
35442: NOT
35443: PUSH
35444: LD_VAR 0 3
35448: PUSH
35449: LD_EXP 53
35453: PUSH
35454: LD_VAR 0 2
35458: ARRAY
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: IN
35464: NOT
35465: AND
35466: PUSH
35467: LD_VAR 0 3
35471: PUSH
35472: LD_EXP 53
35476: PUSH
35477: LD_VAR 0 2
35481: ARRAY
35482: PUSH
35483: LD_INT 2
35485: ARRAY
35486: IN
35487: NOT
35488: AND
35489: IFFALSE 35541
// begin if IsInUnit ( j ) then
35491: LD_VAR 0 3
35495: PPUSH
35496: CALL_OW 310
35500: IFFALSE 35511
// ComExitBuilding ( j ) ;
35502: LD_VAR 0 3
35506: PPUSH
35507: CALL_OW 122
// if not HasTask ( j ) then
35511: LD_VAR 0 3
35515: PPUSH
35516: CALL_OW 314
35520: NOT
35521: IFFALSE 35541
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
35523: LD_VAR 0 3
35527: PPUSH
35528: LD_VAR 0 7
35532: PUSH
35533: LD_INT 1
35535: ARRAY
35536: PPUSH
35537: CALL_OW 189
// end ; end ;
35541: GO 35376
35543: POP
35544: POP
// end ;
35545: GO 34865
35547: POP
35548: POP
// end ;
35549: LD_VAR 0 1
35553: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
35554: LD_INT 0
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
// if not mc_bases then
35567: LD_EXP 50
35571: NOT
35572: IFFALSE 35576
// exit ;
35574: GO 36378
// for i = 1 to mc_bases do
35576: LD_ADDR_VAR 0 2
35580: PUSH
35581: DOUBLE
35582: LD_INT 1
35584: DEC
35585: ST_TO_ADDR
35586: LD_EXP 50
35590: PUSH
35591: FOR_TO
35592: IFFALSE 36376
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35594: LD_EXP 78
35598: PUSH
35599: LD_VAR 0 2
35603: ARRAY
35604: NOT
35605: PUSH
35606: LD_EXP 53
35610: PUSH
35611: LD_VAR 0 2
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: OR
35621: PUSH
35622: LD_EXP 53
35626: PUSH
35627: LD_VAR 0 2
35631: ARRAY
35632: PUSH
35633: LD_INT 2
35635: ARRAY
35636: OR
35637: PUSH
35638: LD_EXP 76
35642: PUSH
35643: LD_VAR 0 2
35647: ARRAY
35648: PPUSH
35649: LD_INT 1
35651: PPUSH
35652: CALL_OW 325
35656: NOT
35657: OR
35658: PUSH
35659: LD_EXP 73
35663: PUSH
35664: LD_VAR 0 2
35668: ARRAY
35669: OR
35670: IFFALSE 35674
// continue ;
35672: GO 35591
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35674: LD_ADDR_VAR 0 8
35678: PUSH
35679: LD_EXP 50
35683: PUSH
35684: LD_VAR 0 2
35688: ARRAY
35689: PPUSH
35690: LD_INT 25
35692: PUSH
35693: LD_INT 4
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 50
35702: PUSH
35703: EMPTY
35704: LIST
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: LD_INT 60
35711: PUSH
35712: EMPTY
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: PPUSH
35724: CALL_OW 72
35728: PUSH
35729: LD_EXP 54
35733: PUSH
35734: LD_VAR 0 2
35738: ARRAY
35739: DIFF
35740: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35741: LD_ADDR_VAR 0 9
35745: PUSH
35746: LD_EXP 50
35750: PUSH
35751: LD_VAR 0 2
35755: ARRAY
35756: PPUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 30
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: PPUSH
35785: CALL_OW 72
35789: ST_TO_ADDR
// if not tmp or not dep then
35790: LD_VAR 0 8
35794: NOT
35795: PUSH
35796: LD_VAR 0 9
35800: NOT
35801: OR
35802: IFFALSE 35806
// continue ;
35804: GO 35591
// side := GetSide ( tmp [ 1 ] ) ;
35806: LD_ADDR_VAR 0 11
35810: PUSH
35811: LD_VAR 0 8
35815: PUSH
35816: LD_INT 1
35818: ARRAY
35819: PPUSH
35820: CALL_OW 255
35824: ST_TO_ADDR
// dep := dep [ 1 ] ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_VAR 0 9
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35839: LD_ADDR_VAR 0 7
35843: PUSH
35844: LD_EXP 78
35848: PUSH
35849: LD_VAR 0 2
35853: ARRAY
35854: PPUSH
35855: LD_INT 22
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 25
35867: PUSH
35868: LD_INT 12
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PPUSH
35879: CALL_OW 70
35883: PUSH
35884: LD_INT 22
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 25
35896: PUSH
35897: LD_INT 12
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 91
35906: PUSH
35907: LD_VAR 0 9
35911: PUSH
35912: LD_INT 20
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PPUSH
35925: CALL_OW 69
35929: UNION
35930: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35931: LD_ADDR_VAR 0 10
35935: PUSH
35936: LD_EXP 78
35940: PUSH
35941: LD_VAR 0 2
35945: ARRAY
35946: PPUSH
35947: LD_INT 81
35949: PUSH
35950: LD_VAR 0 11
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PPUSH
35959: CALL_OW 70
35963: ST_TO_ADDR
// if not apes or danger_at_area then
35964: LD_VAR 0 7
35968: NOT
35969: PUSH
35970: LD_VAR 0 10
35974: OR
35975: IFFALSE 36025
// begin if mc_taming [ i ] then
35977: LD_EXP 81
35981: PUSH
35982: LD_VAR 0 2
35986: ARRAY
35987: IFFALSE 36023
// begin MC_Reset ( i , 121 ) ;
35989: LD_VAR 0 2
35993: PPUSH
35994: LD_INT 121
35996: PPUSH
35997: CALL 21460 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
36001: LD_ADDR_EXP 81
36005: PUSH
36006: LD_EXP 81
36010: PPUSH
36011: LD_VAR 0 2
36015: PPUSH
36016: EMPTY
36017: PPUSH
36018: CALL_OW 1
36022: ST_TO_ADDR
// end ; continue ;
36023: GO 35591
// end ; for j in tmp do
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_VAR 0 8
36034: PUSH
36035: FOR_IN
36036: IFFALSE 36372
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
36038: LD_VAR 0 3
36042: PUSH
36043: LD_EXP 81
36047: PUSH
36048: LD_VAR 0 2
36052: ARRAY
36053: IN
36054: NOT
36055: PUSH
36056: LD_EXP 81
36060: PUSH
36061: LD_VAR 0 2
36065: ARRAY
36066: PUSH
36067: LD_INT 3
36069: LESS
36070: AND
36071: IFFALSE 36129
// begin SetTag ( j , 121 ) ;
36073: LD_VAR 0 3
36077: PPUSH
36078: LD_INT 121
36080: PPUSH
36081: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
36085: LD_ADDR_EXP 81
36089: PUSH
36090: LD_EXP 81
36094: PPUSH
36095: LD_VAR 0 2
36099: PUSH
36100: LD_EXP 81
36104: PUSH
36105: LD_VAR 0 2
36109: ARRAY
36110: PUSH
36111: LD_INT 1
36113: PLUS
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PPUSH
36119: LD_VAR 0 3
36123: PPUSH
36124: CALL 54658 0 3
36128: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
36129: LD_VAR 0 3
36133: PUSH
36134: LD_EXP 81
36138: PUSH
36139: LD_VAR 0 2
36143: ARRAY
36144: IN
36145: IFFALSE 36370
// begin if GetClass ( j ) <> 4 then
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 257
36156: PUSH
36157: LD_INT 4
36159: NONEQUAL
36160: IFFALSE 36213
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
36162: LD_ADDR_EXP 81
36166: PUSH
36167: LD_EXP 81
36171: PPUSH
36172: LD_VAR 0 2
36176: PPUSH
36177: LD_EXP 81
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_VAR 0 3
36192: DIFF
36193: PPUSH
36194: CALL_OW 1
36198: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36199: LD_VAR 0 3
36203: PPUSH
36204: LD_INT 0
36206: PPUSH
36207: CALL_OW 109
// continue ;
36211: GO 36035
// end ; if IsInUnit ( j ) then
36213: LD_VAR 0 3
36217: PPUSH
36218: CALL_OW 310
36222: IFFALSE 36233
// ComExitBuilding ( j ) ;
36224: LD_VAR 0 3
36228: PPUSH
36229: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
36233: LD_ADDR_VAR 0 6
36237: PUSH
36238: LD_VAR 0 7
36242: PPUSH
36243: LD_VAR 0 3
36247: PPUSH
36248: CALL_OW 74
36252: ST_TO_ADDR
// if not ape then
36253: LD_VAR 0 6
36257: NOT
36258: IFFALSE 36262
// break ;
36260: GO 36372
// x := GetX ( ape ) ;
36262: LD_ADDR_VAR 0 4
36266: PUSH
36267: LD_VAR 0 6
36271: PPUSH
36272: CALL_OW 250
36276: ST_TO_ADDR
// y := GetY ( ape ) ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_VAR 0 6
36286: PPUSH
36287: CALL_OW 251
36291: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36292: LD_VAR 0 4
36296: PPUSH
36297: LD_VAR 0 5
36301: PPUSH
36302: CALL_OW 488
36306: NOT
36307: PUSH
36308: LD_VAR 0 11
36312: PPUSH
36313: LD_VAR 0 4
36317: PPUSH
36318: LD_VAR 0 5
36322: PPUSH
36323: LD_INT 20
36325: PPUSH
36326: CALL 55554 0 4
36330: PUSH
36331: LD_INT 4
36333: ARRAY
36334: OR
36335: IFFALSE 36339
// break ;
36337: GO 36372
// if not HasTask ( j ) then
36339: LD_VAR 0 3
36343: PPUSH
36344: CALL_OW 314
36348: NOT
36349: IFFALSE 36370
// ComTameXY ( j , x , y ) ;
36351: LD_VAR 0 3
36355: PPUSH
36356: LD_VAR 0 4
36360: PPUSH
36361: LD_VAR 0 5
36365: PPUSH
36366: CALL_OW 131
// end ; end ;
36370: GO 36035
36372: POP
36373: POP
// end ;
36374: GO 35591
36376: POP
36377: POP
// end ;
36378: LD_VAR 0 1
36382: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
// if not mc_bases then
36393: LD_EXP 50
36397: NOT
36398: IFFALSE 36402
// exit ;
36400: GO 37028
// for i = 1 to mc_bases do
36402: LD_ADDR_VAR 0 2
36406: PUSH
36407: DOUBLE
36408: LD_INT 1
36410: DEC
36411: ST_TO_ADDR
36412: LD_EXP 50
36416: PUSH
36417: FOR_TO
36418: IFFALSE 37026
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
36420: LD_EXP 79
36424: PUSH
36425: LD_VAR 0 2
36429: ARRAY
36430: NOT
36431: PUSH
36432: LD_EXP 79
36436: PUSH
36437: LD_VAR 0 2
36441: ARRAY
36442: PPUSH
36443: LD_INT 25
36445: PUSH
36446: LD_INT 12
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PPUSH
36453: CALL_OW 72
36457: NOT
36458: OR
36459: IFFALSE 36463
// continue ;
36461: GO 36417
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_EXP 79
36472: PUSH
36473: LD_VAR 0 2
36477: ARRAY
36478: PUSH
36479: LD_INT 1
36481: ARRAY
36482: PPUSH
36483: CALL_OW 255
36487: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
36488: LD_VAR 0 5
36492: PPUSH
36493: LD_INT 2
36495: PPUSH
36496: CALL_OW 325
36500: IFFALSE 36753
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36502: LD_ADDR_VAR 0 4
36506: PUSH
36507: LD_EXP 79
36511: PUSH
36512: LD_VAR 0 2
36516: ARRAY
36517: PPUSH
36518: LD_INT 25
36520: PUSH
36521: LD_INT 16
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PPUSH
36528: CALL_OW 72
36532: ST_TO_ADDR
// if tmp < 6 then
36533: LD_VAR 0 4
36537: PUSH
36538: LD_INT 6
36540: LESS
36541: IFFALSE 36753
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
36543: LD_ADDR_VAR 0 6
36547: PUSH
36548: LD_EXP 50
36552: PUSH
36553: LD_VAR 0 2
36557: ARRAY
36558: PPUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 30
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 30
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: PPUSH
36587: CALL_OW 72
36591: ST_TO_ADDR
// if depot then
36592: LD_VAR 0 6
36596: IFFALSE 36753
// begin selected := 0 ;
36598: LD_ADDR_VAR 0 7
36602: PUSH
36603: LD_INT 0
36605: ST_TO_ADDR
// for j in depot do
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_VAR 0 6
36615: PUSH
36616: FOR_IN
36617: IFFALSE 36648
// begin if UnitsInside ( j ) < 6 then
36619: LD_VAR 0 3
36623: PPUSH
36624: CALL_OW 313
36628: PUSH
36629: LD_INT 6
36631: LESS
36632: IFFALSE 36646
// begin selected := j ;
36634: LD_ADDR_VAR 0 7
36638: PUSH
36639: LD_VAR 0 3
36643: ST_TO_ADDR
// break ;
36644: GO 36648
// end ; end ;
36646: GO 36616
36648: POP
36649: POP
// if selected then
36650: LD_VAR 0 7
36654: IFFALSE 36753
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_EXP 79
36665: PUSH
36666: LD_VAR 0 2
36670: ARRAY
36671: PPUSH
36672: LD_INT 25
36674: PUSH
36675: LD_INT 12
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 72
36686: PUSH
36687: FOR_IN
36688: IFFALSE 36751
// if not HasTask ( j ) then
36690: LD_VAR 0 3
36694: PPUSH
36695: CALL_OW 314
36699: NOT
36700: IFFALSE 36749
// begin if not IsInUnit ( j ) then
36702: LD_VAR 0 3
36706: PPUSH
36707: CALL_OW 310
36711: NOT
36712: IFFALSE 36728
// ComEnterUnit ( j , selected ) ;
36714: LD_VAR 0 3
36718: PPUSH
36719: LD_VAR 0 7
36723: PPUSH
36724: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
36728: LD_VAR 0 3
36732: PPUSH
36733: LD_INT 16
36735: PPUSH
36736: CALL_OW 183
// AddComExitBuilding ( j ) ;
36740: LD_VAR 0 3
36744: PPUSH
36745: CALL_OW 182
// end ;
36749: GO 36687
36751: POP
36752: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36753: LD_VAR 0 5
36757: PPUSH
36758: LD_INT 11
36760: PPUSH
36761: CALL_OW 325
36765: IFFALSE 37024
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_EXP 79
36776: PUSH
36777: LD_VAR 0 2
36781: ARRAY
36782: PPUSH
36783: LD_INT 25
36785: PUSH
36786: LD_INT 16
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PPUSH
36793: CALL_OW 72
36797: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36798: LD_VAR 0 4
36802: PUSH
36803: LD_INT 6
36805: GREATEREQUAL
36806: PUSH
36807: LD_VAR 0 5
36811: PPUSH
36812: LD_INT 2
36814: PPUSH
36815: CALL_OW 325
36819: NOT
36820: OR
36821: IFFALSE 37024
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36823: LD_ADDR_VAR 0 8
36827: PUSH
36828: LD_EXP 50
36832: PUSH
36833: LD_VAR 0 2
36837: ARRAY
36838: PPUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 30
36844: PUSH
36845: LD_INT 4
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 30
36854: PUSH
36855: LD_INT 5
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: PPUSH
36867: CALL_OW 72
36871: ST_TO_ADDR
// if barracks then
36872: LD_VAR 0 8
36876: IFFALSE 37024
// begin selected := 0 ;
36878: LD_ADDR_VAR 0 7
36882: PUSH
36883: LD_INT 0
36885: ST_TO_ADDR
// for j in barracks do
36886: LD_ADDR_VAR 0 3
36890: PUSH
36891: LD_VAR 0 8
36895: PUSH
36896: FOR_IN
36897: IFFALSE 36928
// begin if UnitsInside ( j ) < 6 then
36899: LD_VAR 0 3
36903: PPUSH
36904: CALL_OW 313
36908: PUSH
36909: LD_INT 6
36911: LESS
36912: IFFALSE 36926
// begin selected := j ;
36914: LD_ADDR_VAR 0 7
36918: PUSH
36919: LD_VAR 0 3
36923: ST_TO_ADDR
// break ;
36924: GO 36928
// end ; end ;
36926: GO 36896
36928: POP
36929: POP
// if selected then
36930: LD_VAR 0 7
36934: IFFALSE 37024
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_EXP 79
36945: PUSH
36946: LD_VAR 0 2
36950: ARRAY
36951: PPUSH
36952: LD_INT 25
36954: PUSH
36955: LD_INT 12
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PPUSH
36962: CALL_OW 72
36966: PUSH
36967: FOR_IN
36968: IFFALSE 37022
// if not IsInUnit ( j ) and not HasTask ( j ) then
36970: LD_VAR 0 3
36974: PPUSH
36975: CALL_OW 310
36979: NOT
36980: PUSH
36981: LD_VAR 0 3
36985: PPUSH
36986: CALL_OW 314
36990: NOT
36991: AND
36992: IFFALSE 37020
// begin ComEnterUnit ( j , selected ) ;
36994: LD_VAR 0 3
36998: PPUSH
36999: LD_VAR 0 7
37003: PPUSH
37004: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
37008: LD_VAR 0 3
37012: PPUSH
37013: LD_INT 15
37015: PPUSH
37016: CALL_OW 183
// end ;
37020: GO 36967
37022: POP
37023: POP
// end ; end ; end ; end ; end ;
37024: GO 36417
37026: POP
37027: POP
// end ;
37028: LD_VAR 0 1
37032: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
// if not mc_bases then
37039: LD_EXP 50
37043: NOT
37044: IFFALSE 37048
// exit ;
37046: GO 37226
// for i = 1 to mc_bases do
37048: LD_ADDR_VAR 0 2
37052: PUSH
37053: DOUBLE
37054: LD_INT 1
37056: DEC
37057: ST_TO_ADDR
37058: LD_EXP 50
37062: PUSH
37063: FOR_TO
37064: IFFALSE 37224
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
37066: LD_ADDR_VAR 0 4
37070: PUSH
37071: LD_EXP 50
37075: PUSH
37076: LD_VAR 0 2
37080: ARRAY
37081: PPUSH
37082: LD_INT 25
37084: PUSH
37085: LD_INT 9
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PPUSH
37092: CALL_OW 72
37096: ST_TO_ADDR
// if not tmp then
37097: LD_VAR 0 4
37101: NOT
37102: IFFALSE 37106
// continue ;
37104: GO 37063
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
37106: LD_EXP 76
37110: PUSH
37111: LD_VAR 0 2
37115: ARRAY
37116: PPUSH
37117: LD_INT 29
37119: PPUSH
37120: CALL_OW 325
37124: NOT
37125: PUSH
37126: LD_EXP 76
37130: PUSH
37131: LD_VAR 0 2
37135: ARRAY
37136: PPUSH
37137: LD_INT 28
37139: PPUSH
37140: CALL_OW 325
37144: NOT
37145: AND
37146: IFFALSE 37150
// continue ;
37148: GO 37063
// for j in tmp do
37150: LD_ADDR_VAR 0 3
37154: PUSH
37155: LD_VAR 0 4
37159: PUSH
37160: FOR_IN
37161: IFFALSE 37220
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
37163: LD_VAR 0 3
37167: PUSH
37168: LD_EXP 53
37172: PUSH
37173: LD_VAR 0 2
37177: ARRAY
37178: PUSH
37179: LD_INT 1
37181: ARRAY
37182: IN
37183: NOT
37184: PUSH
37185: LD_VAR 0 3
37189: PUSH
37190: LD_EXP 53
37194: PUSH
37195: LD_VAR 0 2
37199: ARRAY
37200: PUSH
37201: LD_INT 2
37203: ARRAY
37204: IN
37205: NOT
37206: AND
37207: IFFALSE 37218
// ComSpaceTimeShoot ( j ) ;
37209: LD_VAR 0 3
37213: PPUSH
37214: CALL 48244 0 1
37218: GO 37160
37220: POP
37221: POP
// end ;
37222: GO 37063
37224: POP
37225: POP
// end ;
37226: LD_VAR 0 1
37230: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
37231: LD_INT 0
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
// if not mc_bases then
37242: LD_EXP 50
37246: NOT
37247: IFFALSE 37251
// exit ;
37249: GO 37873
// for i = 1 to mc_bases do
37251: LD_ADDR_VAR 0 2
37255: PUSH
37256: DOUBLE
37257: LD_INT 1
37259: DEC
37260: ST_TO_ADDR
37261: LD_EXP 50
37265: PUSH
37266: FOR_TO
37267: IFFALSE 37871
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
37269: LD_EXP 85
37273: PUSH
37274: LD_VAR 0 2
37278: ARRAY
37279: NOT
37280: PUSH
37281: LD_INT 38
37283: PPUSH
37284: LD_EXP 76
37288: PUSH
37289: LD_VAR 0 2
37293: ARRAY
37294: PPUSH
37295: CALL_OW 321
37299: PUSH
37300: LD_INT 2
37302: NONEQUAL
37303: OR
37304: IFFALSE 37308
// continue ;
37306: GO 37266
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
37308: LD_ADDR_VAR 0 8
37312: PUSH
37313: LD_EXP 50
37317: PUSH
37318: LD_VAR 0 2
37322: ARRAY
37323: PPUSH
37324: LD_INT 30
37326: PUSH
37327: LD_INT 34
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 72
37338: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
37339: LD_ADDR_VAR 0 9
37343: PUSH
37344: LD_EXP 50
37348: PUSH
37349: LD_VAR 0 2
37353: ARRAY
37354: PPUSH
37355: LD_INT 25
37357: PUSH
37358: LD_INT 4
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PPUSH
37365: CALL_OW 72
37369: PPUSH
37370: LD_INT 0
37372: PPUSH
37373: CALL 87928 0 2
37377: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
37378: LD_VAR 0 9
37382: NOT
37383: PUSH
37384: LD_VAR 0 8
37388: NOT
37389: OR
37390: PUSH
37391: LD_EXP 50
37395: PUSH
37396: LD_VAR 0 2
37400: ARRAY
37401: PPUSH
37402: LD_INT 124
37404: PPUSH
37405: CALL 87928 0 2
37409: OR
37410: IFFALSE 37414
// continue ;
37412: GO 37266
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
37414: LD_EXP 86
37418: PUSH
37419: LD_VAR 0 2
37423: ARRAY
37424: PUSH
37425: LD_EXP 85
37429: PUSH
37430: LD_VAR 0 2
37434: ARRAY
37435: LESS
37436: PUSH
37437: LD_EXP 86
37441: PUSH
37442: LD_VAR 0 2
37446: ARRAY
37447: PUSH
37448: LD_VAR 0 8
37452: LESS
37453: AND
37454: IFFALSE 37869
// begin tmp := sci [ 1 ] ;
37456: LD_ADDR_VAR 0 7
37460: PUSH
37461: LD_VAR 0 9
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
37470: LD_VAR 0 7
37474: PPUSH
37475: LD_INT 124
37477: PPUSH
37478: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
37482: LD_ADDR_VAR 0 3
37486: PUSH
37487: DOUBLE
37488: LD_EXP 85
37492: PUSH
37493: LD_VAR 0 2
37497: ARRAY
37498: INC
37499: ST_TO_ADDR
37500: LD_EXP 85
37504: PUSH
37505: LD_VAR 0 2
37509: ARRAY
37510: PUSH
37511: FOR_DOWNTO
37512: IFFALSE 37855
// begin if IsInUnit ( tmp ) then
37514: LD_VAR 0 7
37518: PPUSH
37519: CALL_OW 310
37523: IFFALSE 37534
// ComExitBuilding ( tmp ) ;
37525: LD_VAR 0 7
37529: PPUSH
37530: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
37534: LD_INT 35
37536: PPUSH
37537: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
37541: LD_VAR 0 7
37545: PPUSH
37546: CALL_OW 310
37550: NOT
37551: PUSH
37552: LD_VAR 0 7
37556: PPUSH
37557: CALL_OW 314
37561: NOT
37562: AND
37563: IFFALSE 37534
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
37565: LD_ADDR_VAR 0 6
37569: PUSH
37570: LD_VAR 0 7
37574: PPUSH
37575: CALL_OW 250
37579: PUSH
37580: LD_VAR 0 7
37584: PPUSH
37585: CALL_OW 251
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37594: LD_INT 35
37596: PPUSH
37597: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: LD_EXP 85
37610: PUSH
37611: LD_VAR 0 2
37615: ARRAY
37616: PUSH
37617: LD_VAR 0 3
37621: ARRAY
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37627: LD_ADDR_VAR 0 5
37631: PUSH
37632: LD_EXP 85
37636: PUSH
37637: LD_VAR 0 2
37641: ARRAY
37642: PUSH
37643: LD_VAR 0 3
37647: ARRAY
37648: PUSH
37649: LD_INT 2
37651: ARRAY
37652: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37653: LD_VAR 0 7
37657: PPUSH
37658: LD_INT 10
37660: PPUSH
37661: CALL 57251 0 2
37665: PUSH
37666: LD_INT 4
37668: ARRAY
37669: IFFALSE 37707
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37671: LD_VAR 0 7
37675: PPUSH
37676: LD_VAR 0 6
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: LD_VAR 0 6
37689: PUSH
37690: LD_INT 2
37692: ARRAY
37693: PPUSH
37694: CALL_OW 111
// wait ( 0 0$10 ) ;
37698: LD_INT 350
37700: PPUSH
37701: CALL_OW 67
// end else
37705: GO 37733
// begin ComMoveXY ( tmp , x , y ) ;
37707: LD_VAR 0 7
37711: PPUSH
37712: LD_VAR 0 4
37716: PPUSH
37717: LD_VAR 0 5
37721: PPUSH
37722: CALL_OW 111
// wait ( 0 0$3 ) ;
37726: LD_INT 105
37728: PPUSH
37729: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
37733: LD_VAR 0 7
37737: PPUSH
37738: LD_VAR 0 4
37742: PPUSH
37743: LD_VAR 0 5
37747: PPUSH
37748: CALL_OW 307
37752: IFFALSE 37594
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37754: LD_VAR 0 7
37758: PPUSH
37759: LD_VAR 0 4
37763: PPUSH
37764: LD_VAR 0 5
37768: PPUSH
37769: LD_VAR 0 8
37773: PUSH
37774: LD_VAR 0 3
37778: ARRAY
37779: PPUSH
37780: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
37784: LD_INT 35
37786: PPUSH
37787: CALL_OW 67
// until not HasTask ( tmp ) ;
37791: LD_VAR 0 7
37795: PPUSH
37796: CALL_OW 314
37800: NOT
37801: IFFALSE 37784
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37803: LD_ADDR_EXP 86
37807: PUSH
37808: LD_EXP 86
37812: PPUSH
37813: LD_VAR 0 2
37817: PUSH
37818: LD_EXP 86
37822: PUSH
37823: LD_VAR 0 2
37827: ARRAY
37828: PUSH
37829: LD_INT 1
37831: PLUS
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PPUSH
37837: LD_VAR 0 8
37841: PUSH
37842: LD_VAR 0 3
37846: ARRAY
37847: PPUSH
37848: CALL 54658 0 3
37852: ST_TO_ADDR
// end ;
37853: GO 37511
37855: POP
37856: POP
// MC_Reset ( i , 124 ) ;
37857: LD_VAR 0 2
37861: PPUSH
37862: LD_INT 124
37864: PPUSH
37865: CALL 21460 0 2
// end ; end ;
37869: GO 37266
37871: POP
37872: POP
// end ;
37873: LD_VAR 0 1
37877: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37878: LD_INT 0
37880: PPUSH
37881: PPUSH
37882: PPUSH
// if not mc_bases then
37883: LD_EXP 50
37887: NOT
37888: IFFALSE 37892
// exit ;
37890: GO 38498
// for i = 1 to mc_bases do
37892: LD_ADDR_VAR 0 2
37896: PUSH
37897: DOUBLE
37898: LD_INT 1
37900: DEC
37901: ST_TO_ADDR
37902: LD_EXP 50
37906: PUSH
37907: FOR_TO
37908: IFFALSE 38496
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37910: LD_ADDR_VAR 0 3
37914: PUSH
37915: LD_EXP 50
37919: PUSH
37920: LD_VAR 0 2
37924: ARRAY
37925: PPUSH
37926: LD_INT 25
37928: PUSH
37929: LD_INT 4
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PPUSH
37936: CALL_OW 72
37940: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37941: LD_VAR 0 3
37945: NOT
37946: PUSH
37947: LD_EXP 87
37951: PUSH
37952: LD_VAR 0 2
37956: ARRAY
37957: NOT
37958: OR
37959: PUSH
37960: LD_EXP 50
37964: PUSH
37965: LD_VAR 0 2
37969: ARRAY
37970: PPUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 30
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 30
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: PPUSH
37999: CALL_OW 72
38003: NOT
38004: OR
38005: IFFALSE 38055
// begin if mc_deposits_finder [ i ] then
38007: LD_EXP 88
38011: PUSH
38012: LD_VAR 0 2
38016: ARRAY
38017: IFFALSE 38053
// begin MC_Reset ( i , 125 ) ;
38019: LD_VAR 0 2
38023: PPUSH
38024: LD_INT 125
38026: PPUSH
38027: CALL 21460 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
38031: LD_ADDR_EXP 88
38035: PUSH
38036: LD_EXP 88
38040: PPUSH
38041: LD_VAR 0 2
38045: PPUSH
38046: EMPTY
38047: PPUSH
38048: CALL_OW 1
38052: ST_TO_ADDR
// end ; continue ;
38053: GO 37907
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
38055: LD_EXP 87
38059: PUSH
38060: LD_VAR 0 2
38064: ARRAY
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: PUSH
38070: LD_INT 3
38072: ARRAY
38073: PUSH
38074: LD_INT 1
38076: EQUAL
38077: PUSH
38078: LD_INT 20
38080: PPUSH
38081: LD_EXP 76
38085: PUSH
38086: LD_VAR 0 2
38090: ARRAY
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: NONEQUAL
38100: AND
38101: IFFALSE 38151
// begin if mc_deposits_finder [ i ] then
38103: LD_EXP 88
38107: PUSH
38108: LD_VAR 0 2
38112: ARRAY
38113: IFFALSE 38149
// begin MC_Reset ( i , 125 ) ;
38115: LD_VAR 0 2
38119: PPUSH
38120: LD_INT 125
38122: PPUSH
38123: CALL 21460 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
38127: LD_ADDR_EXP 88
38131: PUSH
38132: LD_EXP 88
38136: PPUSH
38137: LD_VAR 0 2
38141: PPUSH
38142: EMPTY
38143: PPUSH
38144: CALL_OW 1
38148: ST_TO_ADDR
// end ; continue ;
38149: GO 37907
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
38151: LD_EXP 87
38155: PUSH
38156: LD_VAR 0 2
38160: ARRAY
38161: PUSH
38162: LD_INT 1
38164: ARRAY
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: LD_EXP 87
38174: PUSH
38175: LD_VAR 0 2
38179: ARRAY
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PUSH
38185: LD_INT 2
38187: ARRAY
38188: PPUSH
38189: LD_EXP 76
38193: PUSH
38194: LD_VAR 0 2
38198: ARRAY
38199: PPUSH
38200: CALL_OW 440
38204: IFFALSE 38247
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
38206: LD_ADDR_EXP 87
38210: PUSH
38211: LD_EXP 87
38215: PPUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: LD_EXP 87
38225: PUSH
38226: LD_VAR 0 2
38230: ARRAY
38231: PPUSH
38232: LD_INT 1
38234: PPUSH
38235: CALL_OW 3
38239: PPUSH
38240: CALL_OW 1
38244: ST_TO_ADDR
38245: GO 38494
// begin if not mc_deposits_finder [ i ] then
38247: LD_EXP 88
38251: PUSH
38252: LD_VAR 0 2
38256: ARRAY
38257: NOT
38258: IFFALSE 38310
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
38260: LD_ADDR_EXP 88
38264: PUSH
38265: LD_EXP 88
38269: PPUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_VAR 0 3
38279: PUSH
38280: LD_INT 1
38282: ARRAY
38283: PUSH
38284: EMPTY
38285: LIST
38286: PPUSH
38287: CALL_OW 1
38291: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
38292: LD_VAR 0 3
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PPUSH
38301: LD_INT 125
38303: PPUSH
38304: CALL_OW 109
// end else
38308: GO 38494
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
38310: LD_EXP 88
38314: PUSH
38315: LD_VAR 0 2
38319: ARRAY
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PPUSH
38325: CALL_OW 310
38329: IFFALSE 38352
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
38331: LD_EXP 88
38335: PUSH
38336: LD_VAR 0 2
38340: ARRAY
38341: PUSH
38342: LD_INT 1
38344: ARRAY
38345: PPUSH
38346: CALL_OW 122
38350: GO 38494
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
38352: LD_EXP 88
38356: PUSH
38357: LD_VAR 0 2
38361: ARRAY
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: CALL_OW 314
38371: NOT
38372: PUSH
38373: LD_EXP 88
38377: PUSH
38378: LD_VAR 0 2
38382: ARRAY
38383: PUSH
38384: LD_INT 1
38386: ARRAY
38387: PPUSH
38388: LD_EXP 87
38392: PUSH
38393: LD_VAR 0 2
38397: ARRAY
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: LD_EXP 87
38411: PUSH
38412: LD_VAR 0 2
38416: ARRAY
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PUSH
38422: LD_INT 2
38424: ARRAY
38425: PPUSH
38426: CALL_OW 297
38430: PUSH
38431: LD_INT 6
38433: GREATER
38434: AND
38435: IFFALSE 38494
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
38437: LD_EXP 88
38441: PUSH
38442: LD_VAR 0 2
38446: ARRAY
38447: PUSH
38448: LD_INT 1
38450: ARRAY
38451: PPUSH
38452: LD_EXP 87
38456: PUSH
38457: LD_VAR 0 2
38461: ARRAY
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: LD_EXP 87
38475: PUSH
38476: LD_VAR 0 2
38480: ARRAY
38481: PUSH
38482: LD_INT 1
38484: ARRAY
38485: PUSH
38486: LD_INT 2
38488: ARRAY
38489: PPUSH
38490: CALL_OW 111
// end ; end ; end ;
38494: GO 37907
38496: POP
38497: POP
// end ;
38498: LD_VAR 0 1
38502: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
38503: LD_INT 0
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
// if not mc_bases then
38516: LD_EXP 50
38520: NOT
38521: IFFALSE 38525
// exit ;
38523: GO 39465
// for i = 1 to mc_bases do
38525: LD_ADDR_VAR 0 2
38529: PUSH
38530: DOUBLE
38531: LD_INT 1
38533: DEC
38534: ST_TO_ADDR
38535: LD_EXP 50
38539: PUSH
38540: FOR_TO
38541: IFFALSE 39463
// begin if not mc_bases [ i ] or mc_scan [ i ] then
38543: LD_EXP 50
38547: PUSH
38548: LD_VAR 0 2
38552: ARRAY
38553: NOT
38554: PUSH
38555: LD_EXP 73
38559: PUSH
38560: LD_VAR 0 2
38564: ARRAY
38565: OR
38566: IFFALSE 38570
// continue ;
38568: GO 38540
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
38570: LD_ADDR_VAR 0 7
38574: PUSH
38575: LD_EXP 50
38579: PUSH
38580: LD_VAR 0 2
38584: ARRAY
38585: PUSH
38586: LD_INT 1
38588: ARRAY
38589: PPUSH
38590: CALL_OW 248
38594: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38595: LD_VAR 0 7
38599: PUSH
38600: LD_INT 3
38602: EQUAL
38603: PUSH
38604: LD_EXP 69
38608: PUSH
38609: LD_VAR 0 2
38613: ARRAY
38614: PUSH
38615: LD_EXP 72
38619: PUSH
38620: LD_VAR 0 2
38624: ARRAY
38625: UNION
38626: PPUSH
38627: LD_INT 33
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL_OW 72
38641: NOT
38642: OR
38643: IFFALSE 38647
// continue ;
38645: GO 38540
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_EXP 50
38656: PUSH
38657: LD_VAR 0 2
38661: ARRAY
38662: PPUSH
38663: LD_INT 30
38665: PUSH
38666: LD_INT 36
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PPUSH
38673: CALL_OW 72
38677: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38678: LD_ADDR_VAR 0 10
38682: PUSH
38683: LD_EXP 69
38687: PUSH
38688: LD_VAR 0 2
38692: ARRAY
38693: PPUSH
38694: LD_INT 34
38696: PUSH
38697: LD_INT 31
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PPUSH
38704: CALL_OW 72
38708: ST_TO_ADDR
// if not cts and not mcts then
38709: LD_VAR 0 9
38713: NOT
38714: PUSH
38715: LD_VAR 0 10
38719: NOT
38720: AND
38721: IFFALSE 38725
// continue ;
38723: GO 38540
// x := cts ;
38725: LD_ADDR_VAR 0 11
38729: PUSH
38730: LD_VAR 0 9
38734: ST_TO_ADDR
// if not x then
38735: LD_VAR 0 11
38739: NOT
38740: IFFALSE 38752
// x := mcts ;
38742: LD_ADDR_VAR 0 11
38746: PUSH
38747: LD_VAR 0 10
38751: ST_TO_ADDR
// if not x then
38752: LD_VAR 0 11
38756: NOT
38757: IFFALSE 38761
// continue ;
38759: GO 38540
// if mc_remote_driver [ i ] then
38761: LD_EXP 90
38765: PUSH
38766: LD_VAR 0 2
38770: ARRAY
38771: IFFALSE 39158
// for j in mc_remote_driver [ i ] do
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_EXP 90
38782: PUSH
38783: LD_VAR 0 2
38787: ARRAY
38788: PUSH
38789: FOR_IN
38790: IFFALSE 39156
// begin if GetClass ( j ) <> 3 then
38792: LD_VAR 0 3
38796: PPUSH
38797: CALL_OW 257
38801: PUSH
38802: LD_INT 3
38804: NONEQUAL
38805: IFFALSE 38858
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38807: LD_ADDR_EXP 90
38811: PUSH
38812: LD_EXP 90
38816: PPUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_EXP 90
38826: PUSH
38827: LD_VAR 0 2
38831: ARRAY
38832: PUSH
38833: LD_VAR 0 3
38837: DIFF
38838: PPUSH
38839: CALL_OW 1
38843: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38844: LD_VAR 0 3
38848: PPUSH
38849: LD_INT 0
38851: PPUSH
38852: CALL_OW 109
// continue ;
38856: GO 38789
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
38858: LD_EXP 69
38862: PUSH
38863: LD_VAR 0 2
38867: ARRAY
38868: PPUSH
38869: LD_INT 34
38871: PUSH
38872: LD_INT 31
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 58
38881: PUSH
38882: EMPTY
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PPUSH
38889: CALL_OW 72
38893: PUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: CALL 88016 0 1
38903: NOT
38904: AND
38905: IFFALSE 38976
// begin if IsInUnit ( j ) then
38907: LD_VAR 0 3
38911: PPUSH
38912: CALL_OW 310
38916: IFFALSE 38927
// ComExitBuilding ( j ) ;
38918: LD_VAR 0 3
38922: PPUSH
38923: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
38927: LD_VAR 0 3
38931: PPUSH
38932: LD_EXP 69
38936: PUSH
38937: LD_VAR 0 2
38941: ARRAY
38942: PPUSH
38943: LD_INT 34
38945: PUSH
38946: LD_INT 31
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 58
38955: PUSH
38956: EMPTY
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PPUSH
38963: CALL_OW 72
38967: PUSH
38968: LD_INT 1
38970: ARRAY
38971: PPUSH
38972: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38976: LD_VAR 0 3
38980: PPUSH
38981: CALL_OW 310
38985: NOT
38986: PUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: CALL_OW 310
38996: PPUSH
38997: CALL_OW 266
39001: PUSH
39002: LD_INT 36
39004: NONEQUAL
39005: PUSH
39006: LD_VAR 0 3
39010: PPUSH
39011: CALL 88016 0 1
39015: NOT
39016: AND
39017: OR
39018: IFFALSE 39154
// begin if IsInUnit ( j ) then
39020: LD_VAR 0 3
39024: PPUSH
39025: CALL_OW 310
39029: IFFALSE 39040
// ComExitBuilding ( j ) ;
39031: LD_VAR 0 3
39035: PPUSH
39036: CALL_OW 122
// ct := 0 ;
39040: LD_ADDR_VAR 0 8
39044: PUSH
39045: LD_INT 0
39047: ST_TO_ADDR
// for k in x do
39048: LD_ADDR_VAR 0 4
39052: PUSH
39053: LD_VAR 0 11
39057: PUSH
39058: FOR_IN
39059: IFFALSE 39132
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
39061: LD_VAR 0 4
39065: PPUSH
39066: CALL_OW 264
39070: PUSH
39071: LD_INT 31
39073: EQUAL
39074: PUSH
39075: LD_VAR 0 4
39079: PPUSH
39080: CALL_OW 311
39084: NOT
39085: AND
39086: PUSH
39087: LD_VAR 0 4
39091: PPUSH
39092: CALL_OW 266
39096: PUSH
39097: LD_INT 36
39099: EQUAL
39100: PUSH
39101: LD_VAR 0 4
39105: PPUSH
39106: CALL_OW 313
39110: PUSH
39111: LD_INT 3
39113: LESS
39114: AND
39115: OR
39116: IFFALSE 39130
// begin ct := k ;
39118: LD_ADDR_VAR 0 8
39122: PUSH
39123: LD_VAR 0 4
39127: ST_TO_ADDR
// break ;
39128: GO 39132
// end ;
39130: GO 39058
39132: POP
39133: POP
// if ct then
39134: LD_VAR 0 8
39138: IFFALSE 39154
// ComEnterUnit ( j , ct ) ;
39140: LD_VAR 0 3
39144: PPUSH
39145: LD_VAR 0 8
39149: PPUSH
39150: CALL_OW 120
// end ; end ;
39154: GO 38789
39156: POP
39157: POP
// places := 0 ;
39158: LD_ADDR_VAR 0 5
39162: PUSH
39163: LD_INT 0
39165: ST_TO_ADDR
// for j = 1 to x do
39166: LD_ADDR_VAR 0 3
39170: PUSH
39171: DOUBLE
39172: LD_INT 1
39174: DEC
39175: ST_TO_ADDR
39176: LD_VAR 0 11
39180: PUSH
39181: FOR_TO
39182: IFFALSE 39258
// if GetWeapon ( x [ j ] ) = ar_control_tower then
39184: LD_VAR 0 11
39188: PUSH
39189: LD_VAR 0 3
39193: ARRAY
39194: PPUSH
39195: CALL_OW 264
39199: PUSH
39200: LD_INT 31
39202: EQUAL
39203: IFFALSE 39221
// places := places + 1 else
39205: LD_ADDR_VAR 0 5
39209: PUSH
39210: LD_VAR 0 5
39214: PUSH
39215: LD_INT 1
39217: PLUS
39218: ST_TO_ADDR
39219: GO 39256
// if GetBType ( x [ j ] ) = b_control_tower then
39221: LD_VAR 0 11
39225: PUSH
39226: LD_VAR 0 3
39230: ARRAY
39231: PPUSH
39232: CALL_OW 266
39236: PUSH
39237: LD_INT 36
39239: EQUAL
39240: IFFALSE 39256
// places := places + 3 ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 5
39251: PUSH
39252: LD_INT 3
39254: PLUS
39255: ST_TO_ADDR
39256: GO 39181
39258: POP
39259: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
39260: LD_VAR 0 5
39264: PUSH
39265: LD_INT 0
39267: EQUAL
39268: PUSH
39269: LD_VAR 0 5
39273: PUSH
39274: LD_EXP 90
39278: PUSH
39279: LD_VAR 0 2
39283: ARRAY
39284: LESSEQUAL
39285: OR
39286: IFFALSE 39290
// continue ;
39288: GO 38540
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
39290: LD_ADDR_VAR 0 6
39294: PUSH
39295: LD_EXP 50
39299: PUSH
39300: LD_VAR 0 2
39304: ARRAY
39305: PPUSH
39306: LD_INT 25
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 72
39320: PUSH
39321: LD_EXP 90
39325: PUSH
39326: LD_VAR 0 2
39330: ARRAY
39331: DIFF
39332: PPUSH
39333: LD_INT 3
39335: PPUSH
39336: CALL 88916 0 2
39340: ST_TO_ADDR
// for j in tmp do
39341: LD_ADDR_VAR 0 3
39345: PUSH
39346: LD_VAR 0 6
39350: PUSH
39351: FOR_IN
39352: IFFALSE 39387
// if GetTag ( j ) > 0 then
39354: LD_VAR 0 3
39358: PPUSH
39359: CALL_OW 110
39363: PUSH
39364: LD_INT 0
39366: GREATER
39367: IFFALSE 39385
// tmp := tmp diff j ;
39369: LD_ADDR_VAR 0 6
39373: PUSH
39374: LD_VAR 0 6
39378: PUSH
39379: LD_VAR 0 3
39383: DIFF
39384: ST_TO_ADDR
39385: GO 39351
39387: POP
39388: POP
// if not tmp then
39389: LD_VAR 0 6
39393: NOT
39394: IFFALSE 39398
// continue ;
39396: GO 38540
// if places then
39398: LD_VAR 0 5
39402: IFFALSE 39461
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
39404: LD_ADDR_EXP 90
39408: PUSH
39409: LD_EXP 90
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_EXP 90
39423: PUSH
39424: LD_VAR 0 2
39428: ARRAY
39429: PUSH
39430: LD_VAR 0 6
39434: PUSH
39435: LD_INT 1
39437: ARRAY
39438: UNION
39439: PPUSH
39440: CALL_OW 1
39444: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
39445: LD_VAR 0 6
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: LD_INT 126
39456: PPUSH
39457: CALL_OW 109
// end ; end ;
39461: GO 38540
39463: POP
39464: POP
// end ;
39465: LD_VAR 0 1
39469: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
39470: LD_INT 0
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
39478: LD_VAR 0 1
39482: NOT
39483: PUSH
39484: LD_VAR 0 2
39488: NOT
39489: OR
39490: PUSH
39491: LD_VAR 0 3
39495: NOT
39496: OR
39497: PUSH
39498: LD_VAR 0 4
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 5
39517: PUSH
39518: LD_INT 8
39520: PUSH
39521: LD_INT 9
39523: PUSH
39524: LD_INT 15
39526: PUSH
39527: LD_INT 16
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: IN
39541: NOT
39542: OR
39543: IFFALSE 39547
// exit ;
39545: GO 40447
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
39547: LD_ADDR_VAR 0 2
39551: PUSH
39552: LD_VAR 0 2
39556: PPUSH
39557: LD_INT 21
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 24
39569: PUSH
39570: LD_INT 250
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PPUSH
39581: CALL_OW 72
39585: ST_TO_ADDR
// case class of 1 , 15 :
39586: LD_VAR 0 4
39590: PUSH
39591: LD_INT 1
39593: DOUBLE
39594: EQUAL
39595: IFTRUE 39605
39597: LD_INT 15
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39690
39605: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
39606: LD_ADDR_VAR 0 8
39610: PUSH
39611: LD_VAR 0 2
39615: PPUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 30
39621: PUSH
39622: LD_INT 32
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 30
39631: PUSH
39632: LD_INT 31
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: PPUSH
39644: CALL_OW 72
39648: PUSH
39649: LD_VAR 0 2
39653: PPUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 30
39659: PUSH
39660: LD_INT 4
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 30
39669: PUSH
39670: LD_INT 5
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 72
39686: ADD
39687: ST_TO_ADDR
39688: GO 39936
39690: LD_INT 2
39692: DOUBLE
39693: EQUAL
39694: IFTRUE 39704
39696: LD_INT 16
39698: DOUBLE
39699: EQUAL
39700: IFTRUE 39704
39702: GO 39750
39704: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
39705: LD_ADDR_VAR 0 8
39709: PUSH
39710: LD_VAR 0 2
39714: PPUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 30
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 72
39747: ST_TO_ADDR
39748: GO 39936
39750: LD_INT 3
39752: DOUBLE
39753: EQUAL
39754: IFTRUE 39758
39756: GO 39804
39758: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
39759: LD_ADDR_VAR 0 8
39763: PUSH
39764: LD_VAR 0 2
39768: PPUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 30
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: PPUSH
39797: CALL_OW 72
39801: ST_TO_ADDR
39802: GO 39936
39804: LD_INT 4
39806: DOUBLE
39807: EQUAL
39808: IFTRUE 39812
39810: GO 39869
39812: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39813: LD_ADDR_VAR 0 8
39817: PUSH
39818: LD_VAR 0 2
39822: PPUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 30
39828: PUSH
39829: LD_INT 6
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 30
39838: PUSH
39839: LD_INT 7
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 30
39848: PUSH
39849: LD_INT 8
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: PPUSH
39862: CALL_OW 72
39866: ST_TO_ADDR
39867: GO 39936
39869: LD_INT 5
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39889
39875: LD_INT 8
39877: DOUBLE
39878: EQUAL
39879: IFTRUE 39889
39881: LD_INT 9
39883: DOUBLE
39884: EQUAL
39885: IFTRUE 39889
39887: GO 39935
39889: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39890: LD_ADDR_VAR 0 8
39894: PUSH
39895: LD_VAR 0 2
39899: PPUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 30
39905: PUSH
39906: LD_INT 4
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 30
39915: PUSH
39916: LD_INT 5
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: PPUSH
39928: CALL_OW 72
39932: ST_TO_ADDR
39933: GO 39936
39935: POP
// if not tmp then
39936: LD_VAR 0 8
39940: NOT
39941: IFFALSE 39945
// exit ;
39943: GO 40447
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39945: LD_VAR 0 4
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 15
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: IN
39960: PUSH
39961: LD_EXP 59
39965: PUSH
39966: LD_VAR 0 1
39970: ARRAY
39971: AND
39972: IFFALSE 40128
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_EXP 59
39983: PUSH
39984: LD_VAR 0 1
39988: ARRAY
39989: PUSH
39990: LD_INT 1
39992: ARRAY
39993: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39994: LD_VAR 0 9
39998: PUSH
39999: LD_EXP 60
40003: PUSH
40004: LD_VAR 0 1
40008: ARRAY
40009: IN
40010: NOT
40011: IFFALSE 40126
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
40013: LD_ADDR_EXP 60
40017: PUSH
40018: LD_EXP 60
40022: PPUSH
40023: LD_VAR 0 1
40027: PUSH
40028: LD_EXP 60
40032: PUSH
40033: LD_VAR 0 1
40037: ARRAY
40038: PUSH
40039: LD_INT 1
40041: PLUS
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PPUSH
40047: LD_VAR 0 9
40051: PPUSH
40052: CALL 54658 0 3
40056: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
40057: LD_ADDR_EXP 59
40061: PUSH
40062: LD_EXP 59
40066: PPUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: LD_EXP 59
40076: PUSH
40077: LD_VAR 0 1
40081: ARRAY
40082: PUSH
40083: LD_VAR 0 9
40087: DIFF
40088: PPUSH
40089: CALL_OW 1
40093: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
40094: LD_VAR 0 3
40098: PPUSH
40099: LD_EXP 60
40103: PUSH
40104: LD_VAR 0 1
40108: ARRAY
40109: PUSH
40110: LD_EXP 60
40114: PUSH
40115: LD_VAR 0 1
40119: ARRAY
40120: ARRAY
40121: PPUSH
40122: CALL_OW 120
// end ; exit ;
40126: GO 40447
// end ; if tmp > 1 then
40128: LD_VAR 0 8
40132: PUSH
40133: LD_INT 1
40135: GREATER
40136: IFFALSE 40240
// for i = 2 to tmp do
40138: LD_ADDR_VAR 0 6
40142: PUSH
40143: DOUBLE
40144: LD_INT 2
40146: DEC
40147: ST_TO_ADDR
40148: LD_VAR 0 8
40152: PUSH
40153: FOR_TO
40154: IFFALSE 40238
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
40156: LD_VAR 0 8
40160: PUSH
40161: LD_VAR 0 6
40165: ARRAY
40166: PPUSH
40167: CALL_OW 461
40171: PUSH
40172: LD_INT 6
40174: EQUAL
40175: IFFALSE 40236
// begin x := tmp [ i ] ;
40177: LD_ADDR_VAR 0 9
40181: PUSH
40182: LD_VAR 0 8
40186: PUSH
40187: LD_VAR 0 6
40191: ARRAY
40192: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
40193: LD_ADDR_VAR 0 8
40197: PUSH
40198: LD_VAR 0 8
40202: PPUSH
40203: LD_VAR 0 6
40207: PPUSH
40208: CALL_OW 3
40212: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
40213: LD_ADDR_VAR 0 8
40217: PUSH
40218: LD_VAR 0 8
40222: PPUSH
40223: LD_INT 1
40225: PPUSH
40226: LD_VAR 0 9
40230: PPUSH
40231: CALL_OW 2
40235: ST_TO_ADDR
// end ;
40236: GO 40153
40238: POP
40239: POP
// for i in tmp do
40240: LD_ADDR_VAR 0 6
40244: PUSH
40245: LD_VAR 0 8
40249: PUSH
40250: FOR_IN
40251: IFFALSE 40320
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
40253: LD_VAR 0 6
40257: PPUSH
40258: CALL_OW 313
40262: PUSH
40263: LD_INT 6
40265: LESS
40266: PUSH
40267: LD_VAR 0 6
40271: PPUSH
40272: CALL_OW 266
40276: PUSH
40277: LD_INT 31
40279: PUSH
40280: LD_INT 32
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: IN
40287: NOT
40288: AND
40289: PUSH
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 313
40299: PUSH
40300: LD_INT 0
40302: EQUAL
40303: OR
40304: IFFALSE 40318
// begin j := i ;
40306: LD_ADDR_VAR 0 7
40310: PUSH
40311: LD_VAR 0 6
40315: ST_TO_ADDR
// break ;
40316: GO 40320
// end ; end ;
40318: GO 40250
40320: POP
40321: POP
// if j then
40322: LD_VAR 0 7
40326: IFFALSE 40344
// ComEnterUnit ( unit , j ) else
40328: LD_VAR 0 3
40332: PPUSH
40333: LD_VAR 0 7
40337: PPUSH
40338: CALL_OW 120
40342: GO 40447
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40344: LD_ADDR_VAR 0 10
40348: PUSH
40349: LD_VAR 0 2
40353: PPUSH
40354: LD_INT 2
40356: PUSH
40357: LD_INT 30
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 30
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: PPUSH
40382: CALL_OW 72
40386: ST_TO_ADDR
// if depot then
40387: LD_VAR 0 10
40391: IFFALSE 40447
// begin depot := NearestUnitToUnit ( depot , unit ) ;
40393: LD_ADDR_VAR 0 10
40397: PUSH
40398: LD_VAR 0 10
40402: PPUSH
40403: LD_VAR 0 3
40407: PPUSH
40408: CALL_OW 74
40412: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
40413: LD_VAR 0 3
40417: PPUSH
40418: LD_VAR 0 10
40422: PPUSH
40423: CALL_OW 296
40427: PUSH
40428: LD_INT 10
40430: GREATER
40431: IFFALSE 40447
// ComStandNearbyBuilding ( unit , depot ) ;
40433: LD_VAR 0 3
40437: PPUSH
40438: LD_VAR 0 10
40442: PPUSH
40443: CALL 48861 0 2
// end ; end ; end ;
40447: LD_VAR 0 5
40451: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
40452: LD_INT 0
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
// if not mc_bases then
40458: LD_EXP 50
40462: NOT
40463: IFFALSE 40467
// exit ;
40465: GO 40706
// for i = 1 to mc_bases do
40467: LD_ADDR_VAR 0 2
40471: PUSH
40472: DOUBLE
40473: LD_INT 1
40475: DEC
40476: ST_TO_ADDR
40477: LD_EXP 50
40481: PUSH
40482: FOR_TO
40483: IFFALSE 40704
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
40485: LD_ADDR_VAR 0 4
40489: PUSH
40490: LD_EXP 50
40494: PUSH
40495: LD_VAR 0 2
40499: ARRAY
40500: PPUSH
40501: LD_INT 21
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PPUSH
40511: CALL_OW 72
40515: PUSH
40516: LD_EXP 79
40520: PUSH
40521: LD_VAR 0 2
40525: ARRAY
40526: UNION
40527: ST_TO_ADDR
// if not tmp then
40528: LD_VAR 0 4
40532: NOT
40533: IFFALSE 40537
// continue ;
40535: GO 40482
// for j in tmp do
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_VAR 0 4
40546: PUSH
40547: FOR_IN
40548: IFFALSE 40700
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
40550: LD_VAR 0 3
40554: PPUSH
40555: CALL_OW 110
40559: NOT
40560: PUSH
40561: LD_VAR 0 3
40565: PPUSH
40566: CALL_OW 314
40570: NOT
40571: AND
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: CALL_OW 311
40582: NOT
40583: AND
40584: PUSH
40585: LD_VAR 0 3
40589: PPUSH
40590: CALL_OW 310
40594: NOT
40595: AND
40596: PUSH
40597: LD_VAR 0 3
40601: PUSH
40602: LD_EXP 53
40606: PUSH
40607: LD_VAR 0 2
40611: ARRAY
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: IN
40617: NOT
40618: AND
40619: PUSH
40620: LD_VAR 0 3
40624: PUSH
40625: LD_EXP 53
40629: PUSH
40630: LD_VAR 0 2
40634: ARRAY
40635: PUSH
40636: LD_INT 2
40638: ARRAY
40639: IN
40640: NOT
40641: AND
40642: PUSH
40643: LD_VAR 0 3
40647: PUSH
40648: LD_EXP 62
40652: PUSH
40653: LD_VAR 0 2
40657: ARRAY
40658: IN
40659: NOT
40660: AND
40661: IFFALSE 40698
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
40663: LD_VAR 0 2
40667: PPUSH
40668: LD_EXP 50
40672: PUSH
40673: LD_VAR 0 2
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: LD_VAR 0 3
40688: PPUSH
40689: CALL_OW 257
40693: PPUSH
40694: CALL 39470 0 4
// end ;
40698: GO 40547
40700: POP
40701: POP
// end ;
40702: GO 40482
40704: POP
40705: POP
// end ;
40706: LD_VAR 0 1
40710: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
// if not mc_bases [ base ] then
40719: LD_EXP 50
40723: PUSH
40724: LD_VAR 0 1
40728: ARRAY
40729: NOT
40730: IFFALSE 40734
// exit ;
40732: GO 40916
// tmp := [ ] ;
40734: LD_ADDR_VAR 0 6
40738: PUSH
40739: EMPTY
40740: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 3
40750: PPUSH
40751: LD_INT 0
40753: PPUSH
40754: CALL_OW 517
40758: ST_TO_ADDR
// if not list then
40759: LD_VAR 0 7
40763: NOT
40764: IFFALSE 40768
// exit ;
40766: GO 40916
// for i = 1 to amount do
40768: LD_ADDR_VAR 0 5
40772: PUSH
40773: DOUBLE
40774: LD_INT 1
40776: DEC
40777: ST_TO_ADDR
40778: LD_VAR 0 2
40782: PUSH
40783: FOR_TO
40784: IFFALSE 40864
// begin x := rand ( 1 , list [ 1 ] ) ;
40786: LD_ADDR_VAR 0 8
40790: PUSH
40791: LD_INT 1
40793: PPUSH
40794: LD_VAR 0 7
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PPUSH
40803: CALL_OW 12
40807: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40808: LD_ADDR_VAR 0 6
40812: PUSH
40813: LD_VAR 0 6
40817: PPUSH
40818: LD_VAR 0 5
40822: PPUSH
40823: LD_VAR 0 7
40827: PUSH
40828: LD_INT 1
40830: ARRAY
40831: PUSH
40832: LD_VAR 0 8
40836: ARRAY
40837: PUSH
40838: LD_VAR 0 7
40842: PUSH
40843: LD_INT 2
40845: ARRAY
40846: PUSH
40847: LD_VAR 0 8
40851: ARRAY
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PPUSH
40857: CALL_OW 1
40861: ST_TO_ADDR
// end ;
40862: GO 40783
40864: POP
40865: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40866: LD_ADDR_EXP 63
40870: PUSH
40871: LD_EXP 63
40875: PPUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: LD_VAR 0 6
40885: PPUSH
40886: CALL_OW 1
40890: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40891: LD_ADDR_EXP 65
40895: PUSH
40896: LD_EXP 65
40900: PPUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: LD_VAR 0 3
40910: PPUSH
40911: CALL_OW 1
40915: ST_TO_ADDR
// end ;
40916: LD_VAR 0 4
40920: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40921: LD_INT 0
40923: PPUSH
// if not mc_bases [ base ] then
40924: LD_EXP 50
40928: PUSH
40929: LD_VAR 0 1
40933: ARRAY
40934: NOT
40935: IFFALSE 40939
// exit ;
40937: GO 40964
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40939: LD_ADDR_EXP 55
40943: PUSH
40944: LD_EXP 55
40948: PPUSH
40949: LD_VAR 0 1
40953: PPUSH
40954: LD_VAR 0 2
40958: PPUSH
40959: CALL_OW 1
40963: ST_TO_ADDR
// end ;
40964: LD_VAR 0 3
40968: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40969: LD_INT 0
40971: PPUSH
// if not mc_bases [ base ] then
40972: LD_EXP 50
40976: PUSH
40977: LD_VAR 0 1
40981: ARRAY
40982: NOT
40983: IFFALSE 40987
// exit ;
40985: GO 41024
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40987: LD_ADDR_EXP 55
40991: PUSH
40992: LD_EXP 55
40996: PPUSH
40997: LD_VAR 0 1
41001: PPUSH
41002: LD_EXP 55
41006: PUSH
41007: LD_VAR 0 1
41011: ARRAY
41012: PUSH
41013: LD_VAR 0 2
41017: UNION
41018: PPUSH
41019: CALL_OW 1
41023: ST_TO_ADDR
// end ;
41024: LD_VAR 0 3
41028: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
41029: LD_INT 0
41031: PPUSH
// if not mc_bases [ base ] then
41032: LD_EXP 50
41036: PUSH
41037: LD_VAR 0 1
41041: ARRAY
41042: NOT
41043: IFFALSE 41047
// exit ;
41045: GO 41072
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
41047: LD_ADDR_EXP 71
41051: PUSH
41052: LD_EXP 71
41056: PPUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: LD_VAR 0 2
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
// end ;
41072: LD_VAR 0 3
41076: RET
// export function MC_InsertProduceList ( base , components ) ; begin
41077: LD_INT 0
41079: PPUSH
// if not mc_bases [ base ] then
41080: LD_EXP 50
41084: PUSH
41085: LD_VAR 0 1
41089: ARRAY
41090: NOT
41091: IFFALSE 41095
// exit ;
41093: GO 41132
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
41095: LD_ADDR_EXP 71
41099: PUSH
41100: LD_EXP 71
41104: PPUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: LD_EXP 71
41114: PUSH
41115: LD_VAR 0 1
41119: ARRAY
41120: PUSH
41121: LD_VAR 0 2
41125: ADD
41126: PPUSH
41127: CALL_OW 1
41131: ST_TO_ADDR
// end ;
41132: LD_VAR 0 3
41136: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
41137: LD_INT 0
41139: PPUSH
// if not mc_bases [ base ] then
41140: LD_EXP 50
41144: PUSH
41145: LD_VAR 0 1
41149: ARRAY
41150: NOT
41151: IFFALSE 41155
// exit ;
41153: GO 41209
// mc_defender := Replace ( mc_defender , base , deflist ) ;
41155: LD_ADDR_EXP 72
41159: PUSH
41160: LD_EXP 72
41164: PPUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 2
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
41180: LD_ADDR_EXP 61
41184: PUSH
41185: LD_EXP 61
41189: PPUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: LD_VAR 0 2
41199: PUSH
41200: LD_INT 0
41202: PLUS
41203: PPUSH
41204: CALL_OW 1
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 3
41213: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
41214: LD_INT 0
41216: PPUSH
// if not mc_bases [ base ] then
41217: LD_EXP 50
41221: PUSH
41222: LD_VAR 0 1
41226: ARRAY
41227: NOT
41228: IFFALSE 41232
// exit ;
41230: GO 41257
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
41232: LD_ADDR_EXP 61
41236: PUSH
41237: LD_EXP 61
41241: PPUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_VAR 0 2
41251: PPUSH
41252: CALL_OW 1
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 3
41261: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
// if not mc_bases [ base ] then
41268: LD_EXP 50
41272: PUSH
41273: LD_VAR 0 1
41277: ARRAY
41278: NOT
41279: IFFALSE 41283
// exit ;
41281: GO 41348
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
41283: LD_ADDR_EXP 70
41287: PUSH
41288: LD_EXP 70
41292: PPUSH
41293: LD_VAR 0 1
41297: PUSH
41298: LD_EXP 70
41302: PUSH
41303: LD_VAR 0 1
41307: ARRAY
41308: PUSH
41309: LD_INT 1
41311: PLUS
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PPUSH
41317: LD_VAR 0 1
41321: PUSH
41322: LD_VAR 0 2
41326: PUSH
41327: LD_VAR 0 3
41331: PUSH
41332: LD_VAR 0 4
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL 54658 0 3
41347: ST_TO_ADDR
// end ;
41348: LD_VAR 0 5
41352: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
41353: LD_INT 0
41355: PPUSH
// if not mc_bases [ base ] then
41356: LD_EXP 50
41360: PUSH
41361: LD_VAR 0 1
41365: ARRAY
41366: NOT
41367: IFFALSE 41371
// exit ;
41369: GO 41396
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
41371: LD_ADDR_EXP 87
41375: PUSH
41376: LD_EXP 87
41380: PPUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: LD_VAR 0 2
41390: PPUSH
41391: CALL_OW 1
41395: ST_TO_ADDR
// end ;
41396: LD_VAR 0 3
41400: RET
// export function MC_GetMinesField ( base ) ; begin
41401: LD_INT 0
41403: PPUSH
// result := mc_mines [ base ] ;
41404: LD_ADDR_VAR 0 2
41408: PUSH
41409: LD_EXP 63
41413: PUSH
41414: LD_VAR 0 1
41418: ARRAY
41419: ST_TO_ADDR
// end ;
41420: LD_VAR 0 2
41424: RET
// export function MC_GetProduceList ( base ) ; begin
41425: LD_INT 0
41427: PPUSH
// result := mc_produce [ base ] ;
41428: LD_ADDR_VAR 0 2
41432: PUSH
41433: LD_EXP 71
41437: PUSH
41438: LD_VAR 0 1
41442: ARRAY
41443: ST_TO_ADDR
// end ;
41444: LD_VAR 0 2
41448: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
41449: LD_INT 0
41451: PPUSH
41452: PPUSH
// if not mc_bases then
41453: LD_EXP 50
41457: NOT
41458: IFFALSE 41462
// exit ;
41460: GO 41527
// if mc_bases [ base ] then
41462: LD_EXP 50
41466: PUSH
41467: LD_VAR 0 1
41471: ARRAY
41472: IFFALSE 41527
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_EXP 50
41483: PUSH
41484: LD_VAR 0 1
41488: ARRAY
41489: PPUSH
41490: LD_INT 30
41492: PUSH
41493: LD_VAR 0 2
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PPUSH
41502: CALL_OW 72
41506: ST_TO_ADDR
// if result then
41507: LD_VAR 0 3
41511: IFFALSE 41527
// result := result [ 1 ] ;
41513: LD_ADDR_VAR 0 3
41517: PUSH
41518: LD_VAR 0 3
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: ST_TO_ADDR
// end ; end ;
41527: LD_VAR 0 3
41531: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
// if not mc_bases then
41536: LD_EXP 50
41540: NOT
41541: IFFALSE 41545
// exit ;
41543: GO 41590
// if mc_bases [ base ] then
41545: LD_EXP 50
41549: PUSH
41550: LD_VAR 0 1
41554: ARRAY
41555: IFFALSE 41590
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_EXP 50
41566: PUSH
41567: LD_VAR 0 1
41571: ARRAY
41572: PPUSH
41573: LD_INT 30
41575: PUSH
41576: LD_VAR 0 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PPUSH
41585: CALL_OW 72
41589: ST_TO_ADDR
// end ;
41590: LD_VAR 0 3
41594: RET
// export function MC_SetTame ( base , area ) ; begin
41595: LD_INT 0
41597: PPUSH
// if not mc_bases or not base then
41598: LD_EXP 50
41602: NOT
41603: PUSH
41604: LD_VAR 0 1
41608: NOT
41609: OR
41610: IFFALSE 41614
// exit ;
41612: GO 41639
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
41614: LD_ADDR_EXP 78
41618: PUSH
41619: LD_EXP 78
41623: PPUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: LD_VAR 0 2
41633: PPUSH
41634: CALL_OW 1
41638: ST_TO_ADDR
// end ;
41639: LD_VAR 0 3
41643: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
41644: LD_INT 0
41646: PPUSH
41647: PPUSH
// if not mc_bases or not base then
41648: LD_EXP 50
41652: NOT
41653: PUSH
41654: LD_VAR 0 1
41658: NOT
41659: OR
41660: IFFALSE 41664
// exit ;
41662: GO 41766
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41664: LD_ADDR_VAR 0 4
41668: PUSH
41669: LD_EXP 50
41673: PUSH
41674: LD_VAR 0 1
41678: ARRAY
41679: PPUSH
41680: LD_INT 30
41682: PUSH
41683: LD_VAR 0 2
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PPUSH
41692: CALL_OW 72
41696: ST_TO_ADDR
// if not tmp then
41697: LD_VAR 0 4
41701: NOT
41702: IFFALSE 41706
// exit ;
41704: GO 41766
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
41706: LD_ADDR_EXP 82
41710: PUSH
41711: LD_EXP 82
41715: PPUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_EXP 82
41725: PUSH
41726: LD_VAR 0 1
41730: ARRAY
41731: PPUSH
41732: LD_EXP 82
41736: PUSH
41737: LD_VAR 0 1
41741: ARRAY
41742: PUSH
41743: LD_INT 1
41745: PLUS
41746: PPUSH
41747: LD_VAR 0 4
41751: PUSH
41752: LD_INT 1
41754: ARRAY
41755: PPUSH
41756: CALL_OW 2
41760: PPUSH
41761: CALL_OW 1
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 3
41770: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
// if not mc_bases or not base or not kinds then
41775: LD_EXP 50
41779: NOT
41780: PUSH
41781: LD_VAR 0 1
41785: NOT
41786: OR
41787: PUSH
41788: LD_VAR 0 2
41792: NOT
41793: OR
41794: IFFALSE 41798
// exit ;
41796: GO 41859
// for i in kinds do
41798: LD_ADDR_VAR 0 4
41802: PUSH
41803: LD_VAR 0 2
41807: PUSH
41808: FOR_IN
41809: IFFALSE 41857
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41811: LD_ADDR_EXP 84
41815: PUSH
41816: LD_EXP 84
41820: PPUSH
41821: LD_VAR 0 1
41825: PUSH
41826: LD_EXP 84
41830: PUSH
41831: LD_VAR 0 1
41835: ARRAY
41836: PUSH
41837: LD_INT 1
41839: PLUS
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PPUSH
41845: LD_VAR 0 4
41849: PPUSH
41850: CALL 54658 0 3
41854: ST_TO_ADDR
41855: GO 41808
41857: POP
41858: POP
// end ;
41859: LD_VAR 0 3
41863: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41864: LD_INT 0
41866: PPUSH
// if not mc_bases or not base or not areas then
41867: LD_EXP 50
41871: NOT
41872: PUSH
41873: LD_VAR 0 1
41877: NOT
41878: OR
41879: PUSH
41880: LD_VAR 0 2
41884: NOT
41885: OR
41886: IFFALSE 41890
// exit ;
41888: GO 41915
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41890: LD_ADDR_EXP 68
41894: PUSH
41895: LD_EXP 68
41899: PPUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_VAR 0 2
41909: PPUSH
41910: CALL_OW 1
41914: ST_TO_ADDR
// end ;
41915: LD_VAR 0 3
41919: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41920: LD_INT 0
41922: PPUSH
// if not mc_bases or not base or not teleports_exit then
41923: LD_EXP 50
41927: NOT
41928: PUSH
41929: LD_VAR 0 1
41933: NOT
41934: OR
41935: PUSH
41936: LD_VAR 0 2
41940: NOT
41941: OR
41942: IFFALSE 41946
// exit ;
41944: GO 41971
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41946: LD_ADDR_EXP 85
41950: PUSH
41951: LD_EXP 85
41955: PPUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_VAR 0 2
41965: PPUSH
41966: CALL_OW 1
41970: ST_TO_ADDR
// end ;
41971: LD_VAR 0 3
41975: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41976: LD_INT 0
41978: PPUSH
41979: PPUSH
41980: PPUSH
// if not mc_bases or not base or not ext_list then
41981: LD_EXP 50
41985: NOT
41986: PUSH
41987: LD_VAR 0 1
41991: NOT
41992: OR
41993: PUSH
41994: LD_VAR 0 5
41998: NOT
41999: OR
42000: IFFALSE 42004
// exit ;
42002: GO 42177
// tmp := GetFacExtXYD ( x , y , d ) ;
42004: LD_ADDR_VAR 0 8
42008: PUSH
42009: LD_VAR 0 2
42013: PPUSH
42014: LD_VAR 0 3
42018: PPUSH
42019: LD_VAR 0 4
42023: PPUSH
42024: CALL 88046 0 3
42028: ST_TO_ADDR
// if not tmp then
42029: LD_VAR 0 8
42033: NOT
42034: IFFALSE 42038
// exit ;
42036: GO 42177
// for i in tmp do
42038: LD_ADDR_VAR 0 7
42042: PUSH
42043: LD_VAR 0 8
42047: PUSH
42048: FOR_IN
42049: IFFALSE 42175
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
42051: LD_ADDR_EXP 55
42055: PUSH
42056: LD_EXP 55
42060: PPUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: LD_EXP 55
42070: PUSH
42071: LD_VAR 0 1
42075: ARRAY
42076: PPUSH
42077: LD_EXP 55
42081: PUSH
42082: LD_VAR 0 1
42086: ARRAY
42087: PUSH
42088: LD_INT 1
42090: PLUS
42091: PPUSH
42092: LD_VAR 0 5
42096: PUSH
42097: LD_INT 1
42099: ARRAY
42100: PUSH
42101: LD_VAR 0 7
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: PUSH
42110: LD_VAR 0 7
42114: PUSH
42115: LD_INT 2
42117: ARRAY
42118: PUSH
42119: LD_VAR 0 7
42123: PUSH
42124: LD_INT 3
42126: ARRAY
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: PPUSH
42134: CALL_OW 2
42138: PPUSH
42139: CALL_OW 1
42143: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
42144: LD_ADDR_VAR 0 5
42148: PUSH
42149: LD_VAR 0 5
42153: PPUSH
42154: LD_INT 1
42156: PPUSH
42157: CALL_OW 3
42161: ST_TO_ADDR
// if not ext_list then
42162: LD_VAR 0 5
42166: NOT
42167: IFFALSE 42173
// exit ;
42169: POP
42170: POP
42171: GO 42177
// end ;
42173: GO 42048
42175: POP
42176: POP
// end ;
42177: LD_VAR 0 6
42181: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
42182: LD_INT 0
42184: PPUSH
// if not mc_bases or not base or not weapon_list then
42185: LD_EXP 50
42189: NOT
42190: PUSH
42191: LD_VAR 0 1
42195: NOT
42196: OR
42197: PUSH
42198: LD_VAR 0 2
42202: NOT
42203: OR
42204: IFFALSE 42208
// exit ;
42206: GO 42233
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
42208: LD_ADDR_EXP 89
42212: PUSH
42213: LD_EXP 89
42217: PPUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: LD_VAR 0 2
42227: PPUSH
42228: CALL_OW 1
42232: ST_TO_ADDR
// end ;
42233: LD_VAR 0 3
42237: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
42238: LD_INT 0
42240: PPUSH
// if not mc_bases or not base or not tech_list then
42241: LD_EXP 50
42245: NOT
42246: PUSH
42247: LD_VAR 0 1
42251: NOT
42252: OR
42253: PUSH
42254: LD_VAR 0 2
42258: NOT
42259: OR
42260: IFFALSE 42264
// exit ;
42262: GO 42289
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
42264: LD_ADDR_EXP 77
42268: PUSH
42269: LD_EXP 77
42273: PPUSH
42274: LD_VAR 0 1
42278: PPUSH
42279: LD_VAR 0 2
42283: PPUSH
42284: CALL_OW 1
42288: ST_TO_ADDR
// end ;
42289: LD_VAR 0 3
42293: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
42294: LD_INT 0
42296: PPUSH
// if not mc_bases or not parking_area or not base then
42297: LD_EXP 50
42301: NOT
42302: PUSH
42303: LD_VAR 0 2
42307: NOT
42308: OR
42309: PUSH
42310: LD_VAR 0 1
42314: NOT
42315: OR
42316: IFFALSE 42320
// exit ;
42318: GO 42345
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
42320: LD_ADDR_EXP 74
42324: PUSH
42325: LD_EXP 74
42329: PPUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: LD_VAR 0 2
42339: PPUSH
42340: CALL_OW 1
42344: ST_TO_ADDR
// end ;
42345: LD_VAR 0 3
42349: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
42350: LD_INT 0
42352: PPUSH
// if not mc_bases or not base or not scan_area then
42353: LD_EXP 50
42357: NOT
42358: PUSH
42359: LD_VAR 0 1
42363: NOT
42364: OR
42365: PUSH
42366: LD_VAR 0 2
42370: NOT
42371: OR
42372: IFFALSE 42376
// exit ;
42374: GO 42401
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
42376: LD_ADDR_EXP 75
42380: PUSH
42381: LD_EXP 75
42385: PPUSH
42386: LD_VAR 0 1
42390: PPUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: CALL_OW 1
42400: ST_TO_ADDR
// end ;
42401: LD_VAR 0 3
42405: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
42406: LD_INT 0
42408: PPUSH
42409: PPUSH
// if not mc_bases or not base then
42410: LD_EXP 50
42414: NOT
42415: PUSH
42416: LD_VAR 0 1
42420: NOT
42421: OR
42422: IFFALSE 42426
// exit ;
42424: GO 42490
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
42426: LD_ADDR_VAR 0 3
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 4
42442: PUSH
42443: LD_INT 11
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
42453: LD_ADDR_EXP 77
42457: PUSH
42458: LD_EXP 77
42462: PPUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: LD_EXP 77
42472: PUSH
42473: LD_VAR 0 1
42477: ARRAY
42478: PUSH
42479: LD_VAR 0 3
42483: DIFF
42484: PPUSH
42485: CALL_OW 1
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 2
42494: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
42495: LD_INT 0
42497: PPUSH
// result := mc_vehicles [ base ] ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_EXP 69
42507: PUSH
42508: LD_VAR 0 1
42512: ARRAY
42513: ST_TO_ADDR
// if onlyCombat then
42514: LD_VAR 0 2
42518: IFFALSE 42683
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
42520: LD_ADDR_VAR 0 3
42524: PUSH
42525: LD_VAR 0 3
42529: PUSH
42530: LD_VAR 0 3
42534: PPUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 34
42540: PUSH
42541: LD_INT 12
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 34
42550: PUSH
42551: LD_INT 51
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 34
42560: PUSH
42561: LD_EXP 94
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 34
42572: PUSH
42573: LD_INT 32
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 34
42582: PUSH
42583: LD_INT 13
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 34
42592: PUSH
42593: LD_INT 52
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 34
42602: PUSH
42603: LD_INT 14
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 34
42612: PUSH
42613: LD_INT 53
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 34
42622: PUSH
42623: LD_EXP 93
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 34
42634: PUSH
42635: LD_INT 31
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 34
42644: PUSH
42645: LD_INT 48
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 34
42654: PUSH
42655: LD_INT 8
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 72
42681: DIFF
42682: ST_TO_ADDR
// end ; end_of_file
42683: LD_VAR 0 3
42687: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
42688: LD_INT 0
42690: PPUSH
42691: PPUSH
42692: PPUSH
// if not mc_bases or not skirmish then
42693: LD_EXP 50
42697: NOT
42698: PUSH
42699: LD_EXP 48
42703: NOT
42704: OR
42705: IFFALSE 42709
// exit ;
42707: GO 42874
// for i = 1 to mc_bases do
42709: LD_ADDR_VAR 0 4
42713: PUSH
42714: DOUBLE
42715: LD_INT 1
42717: DEC
42718: ST_TO_ADDR
42719: LD_EXP 50
42723: PUSH
42724: FOR_TO
42725: IFFALSE 42872
// begin if sci in mc_bases [ i ] then
42727: LD_VAR 0 2
42731: PUSH
42732: LD_EXP 50
42736: PUSH
42737: LD_VAR 0 4
42741: ARRAY
42742: IN
42743: IFFALSE 42870
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
42745: LD_ADDR_EXP 79
42749: PUSH
42750: LD_EXP 79
42754: PPUSH
42755: LD_VAR 0 4
42759: PUSH
42760: LD_EXP 79
42764: PUSH
42765: LD_VAR 0 4
42769: ARRAY
42770: PUSH
42771: LD_INT 1
42773: PLUS
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PPUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: CALL 54658 0 3
42788: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
42789: LD_ADDR_VAR 0 5
42793: PUSH
42794: LD_EXP 50
42798: PUSH
42799: LD_VAR 0 4
42803: ARRAY
42804: PPUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 30
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 30
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: PPUSH
42833: CALL_OW 72
42837: PPUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 74
42847: ST_TO_ADDR
// if tmp then
42848: LD_VAR 0 5
42852: IFFALSE 42868
// ComStandNearbyBuilding ( ape , tmp ) ;
42854: LD_VAR 0 1
42858: PPUSH
42859: LD_VAR 0 5
42863: PPUSH
42864: CALL 48861 0 2
// break ;
42868: GO 42872
// end ; end ;
42870: GO 42724
42872: POP
42873: POP
// end ;
42874: LD_VAR 0 3
42878: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42879: LD_INT 0
42881: PPUSH
42882: PPUSH
42883: PPUSH
// if not mc_bases or not skirmish then
42884: LD_EXP 50
42888: NOT
42889: PUSH
42890: LD_EXP 48
42894: NOT
42895: OR
42896: IFFALSE 42900
// exit ;
42898: GO 42989
// for i = 1 to mc_bases do
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: DOUBLE
42906: LD_INT 1
42908: DEC
42909: ST_TO_ADDR
42910: LD_EXP 50
42914: PUSH
42915: FOR_TO
42916: IFFALSE 42987
// begin if building in mc_busy_turret_list [ i ] then
42918: LD_VAR 0 1
42922: PUSH
42923: LD_EXP 60
42927: PUSH
42928: LD_VAR 0 4
42932: ARRAY
42933: IN
42934: IFFALSE 42985
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: LD_EXP 60
42945: PUSH
42946: LD_VAR 0 4
42950: ARRAY
42951: PUSH
42952: LD_VAR 0 1
42956: DIFF
42957: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42958: LD_ADDR_EXP 60
42962: PUSH
42963: LD_EXP 60
42967: PPUSH
42968: LD_VAR 0 4
42972: PPUSH
42973: LD_VAR 0 5
42977: PPUSH
42978: CALL_OW 1
42982: ST_TO_ADDR
// break ;
42983: GO 42987
// end ; end ;
42985: GO 42915
42987: POP
42988: POP
// end ;
42989: LD_VAR 0 3
42993: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
// if not mc_bases or not skirmish then
42999: LD_EXP 50
43003: NOT
43004: PUSH
43005: LD_EXP 48
43009: NOT
43010: OR
43011: IFFALSE 43015
// exit ;
43013: GO 43214
// for i = 1 to mc_bases do
43015: LD_ADDR_VAR 0 5
43019: PUSH
43020: DOUBLE
43021: LD_INT 1
43023: DEC
43024: ST_TO_ADDR
43025: LD_EXP 50
43029: PUSH
43030: FOR_TO
43031: IFFALSE 43212
// if building in mc_bases [ i ] then
43033: LD_VAR 0 1
43037: PUSH
43038: LD_EXP 50
43042: PUSH
43043: LD_VAR 0 5
43047: ARRAY
43048: IN
43049: IFFALSE 43210
// begin tmp := mc_bases [ i ] diff building ;
43051: LD_ADDR_VAR 0 6
43055: PUSH
43056: LD_EXP 50
43060: PUSH
43061: LD_VAR 0 5
43065: ARRAY
43066: PUSH
43067: LD_VAR 0 1
43071: DIFF
43072: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
43073: LD_ADDR_EXP 50
43077: PUSH
43078: LD_EXP 50
43082: PPUSH
43083: LD_VAR 0 5
43087: PPUSH
43088: LD_VAR 0 6
43092: PPUSH
43093: CALL_OW 1
43097: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
43098: LD_VAR 0 1
43102: PUSH
43103: LD_EXP 58
43107: PUSH
43108: LD_VAR 0 5
43112: ARRAY
43113: IN
43114: IFFALSE 43153
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
43116: LD_ADDR_EXP 58
43120: PUSH
43121: LD_EXP 58
43125: PPUSH
43126: LD_VAR 0 5
43130: PPUSH
43131: LD_EXP 58
43135: PUSH
43136: LD_VAR 0 5
43140: ARRAY
43141: PUSH
43142: LD_VAR 0 1
43146: DIFF
43147: PPUSH
43148: CALL_OW 1
43152: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
43153: LD_VAR 0 1
43157: PUSH
43158: LD_EXP 59
43162: PUSH
43163: LD_VAR 0 5
43167: ARRAY
43168: IN
43169: IFFALSE 43208
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
43171: LD_ADDR_EXP 59
43175: PUSH
43176: LD_EXP 59
43180: PPUSH
43181: LD_VAR 0 5
43185: PPUSH
43186: LD_EXP 59
43190: PUSH
43191: LD_VAR 0 5
43195: ARRAY
43196: PUSH
43197: LD_VAR 0 1
43201: DIFF
43202: PPUSH
43203: CALL_OW 1
43207: ST_TO_ADDR
// break ;
43208: GO 43212
// end ;
43210: GO 43030
43212: POP
43213: POP
// end ;
43214: LD_VAR 0 4
43218: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
43219: LD_INT 0
43221: PPUSH
43222: PPUSH
43223: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
43224: LD_EXP 50
43228: NOT
43229: PUSH
43230: LD_EXP 48
43234: NOT
43235: OR
43236: PUSH
43237: LD_VAR 0 3
43241: PUSH
43242: LD_EXP 76
43246: IN
43247: NOT
43248: OR
43249: IFFALSE 43253
// exit ;
43251: GO 43376
// for i = 1 to mc_vehicles do
43253: LD_ADDR_VAR 0 6
43257: PUSH
43258: DOUBLE
43259: LD_INT 1
43261: DEC
43262: ST_TO_ADDR
43263: LD_EXP 69
43267: PUSH
43268: FOR_TO
43269: IFFALSE 43374
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
43271: LD_VAR 0 2
43275: PUSH
43276: LD_EXP 69
43280: PUSH
43281: LD_VAR 0 6
43285: ARRAY
43286: IN
43287: PUSH
43288: LD_VAR 0 1
43292: PUSH
43293: LD_EXP 69
43297: PUSH
43298: LD_VAR 0 6
43302: ARRAY
43303: IN
43304: OR
43305: IFFALSE 43372
// begin tmp := mc_vehicles [ i ] diff old ;
43307: LD_ADDR_VAR 0 7
43311: PUSH
43312: LD_EXP 69
43316: PUSH
43317: LD_VAR 0 6
43321: ARRAY
43322: PUSH
43323: LD_VAR 0 2
43327: DIFF
43328: ST_TO_ADDR
// tmp := tmp diff new ;
43329: LD_ADDR_VAR 0 7
43333: PUSH
43334: LD_VAR 0 7
43338: PUSH
43339: LD_VAR 0 1
43343: DIFF
43344: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
43345: LD_ADDR_EXP 69
43349: PUSH
43350: LD_EXP 69
43354: PPUSH
43355: LD_VAR 0 6
43359: PPUSH
43360: LD_VAR 0 7
43364: PPUSH
43365: CALL_OW 1
43369: ST_TO_ADDR
// break ;
43370: GO 43374
// end ;
43372: GO 43268
43374: POP
43375: POP
// end ;
43376: LD_VAR 0 5
43380: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
43381: LD_INT 0
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
// if not mc_bases or not skirmish then
43387: LD_EXP 50
43391: NOT
43392: PUSH
43393: LD_EXP 48
43397: NOT
43398: OR
43399: IFFALSE 43403
// exit ;
43401: GO 43780
// side := GetSide ( vehicle ) ;
43403: LD_ADDR_VAR 0 5
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: CALL_OW 255
43417: ST_TO_ADDR
// for i = 1 to mc_bases do
43418: LD_ADDR_VAR 0 4
43422: PUSH
43423: DOUBLE
43424: LD_INT 1
43426: DEC
43427: ST_TO_ADDR
43428: LD_EXP 50
43432: PUSH
43433: FOR_TO
43434: IFFALSE 43778
// begin if factory in mc_bases [ i ] then
43436: LD_VAR 0 2
43440: PUSH
43441: LD_EXP 50
43445: PUSH
43446: LD_VAR 0 4
43450: ARRAY
43451: IN
43452: IFFALSE 43776
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
43454: LD_EXP 72
43458: PUSH
43459: LD_VAR 0 4
43463: ARRAY
43464: PUSH
43465: LD_EXP 61
43469: PUSH
43470: LD_VAR 0 4
43474: ARRAY
43475: LESS
43476: PUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL_OW 264
43486: PUSH
43487: LD_INT 31
43489: PUSH
43490: LD_INT 32
43492: PUSH
43493: LD_INT 51
43495: PUSH
43496: LD_EXP 94
43500: PUSH
43501: LD_INT 12
43503: PUSH
43504: LD_INT 30
43506: PUSH
43507: LD_EXP 93
43511: PUSH
43512: LD_INT 11
43514: PUSH
43515: LD_INT 53
43517: PUSH
43518: LD_INT 14
43520: PUSH
43521: LD_EXP 97
43525: PUSH
43526: LD_INT 29
43528: PUSH
43529: LD_EXP 95
43533: PUSH
43534: LD_INT 13
43536: PUSH
43537: LD_INT 52
43539: PUSH
43540: LD_INT 48
43542: PUSH
43543: LD_INT 8
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: IN
43565: NOT
43566: AND
43567: IFFALSE 43615
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
43569: LD_ADDR_EXP 72
43573: PUSH
43574: LD_EXP 72
43578: PPUSH
43579: LD_VAR 0 4
43583: PUSH
43584: LD_EXP 72
43588: PUSH
43589: LD_VAR 0 4
43593: ARRAY
43594: PUSH
43595: LD_INT 1
43597: PLUS
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PPUSH
43603: LD_VAR 0 1
43607: PPUSH
43608: CALL 54658 0 3
43612: ST_TO_ADDR
43613: GO 43659
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
43615: LD_ADDR_EXP 69
43619: PUSH
43620: LD_EXP 69
43624: PPUSH
43625: LD_VAR 0 4
43629: PUSH
43630: LD_EXP 69
43634: PUSH
43635: LD_VAR 0 4
43639: ARRAY
43640: PUSH
43641: LD_INT 1
43643: PLUS
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PPUSH
43649: LD_VAR 0 1
43653: PPUSH
43654: CALL 54658 0 3
43658: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 263
43668: PUSH
43669: LD_INT 2
43671: EQUAL
43672: IFFALSE 43692
// begin repeat wait ( 0 0$1 ) ;
43674: LD_INT 35
43676: PPUSH
43677: CALL_OW 67
// until IsControledBy ( vehicle ) ;
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 312
43690: IFFALSE 43674
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
43692: LD_VAR 0 1
43696: PPUSH
43697: LD_EXP 74
43701: PUSH
43702: LD_VAR 0 4
43706: ARRAY
43707: PPUSH
43708: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 263
43721: PUSH
43722: LD_INT 1
43724: NONEQUAL
43725: IFFALSE 43729
// break ;
43727: GO 43778
// repeat wait ( 0 0$1 ) ;
43729: LD_INT 35
43731: PPUSH
43732: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
43736: LD_VAR 0 1
43740: PPUSH
43741: LD_EXP 74
43745: PUSH
43746: LD_VAR 0 4
43750: ARRAY
43751: PPUSH
43752: CALL_OW 308
43756: IFFALSE 43729
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
43758: LD_VAR 0 1
43762: PPUSH
43763: CALL_OW 311
43767: PPUSH
43768: CALL_OW 121
// exit ;
43772: POP
43773: POP
43774: GO 43780
// end ; end ;
43776: GO 43433
43778: POP
43779: POP
// end ;
43780: LD_VAR 0 3
43784: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
43785: LD_INT 0
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
// if not mc_bases or not skirmish then
43791: LD_EXP 50
43795: NOT
43796: PUSH
43797: LD_EXP 48
43801: NOT
43802: OR
43803: IFFALSE 43807
// exit ;
43805: GO 44160
// repeat wait ( 0 0$1 ) ;
43807: LD_INT 35
43809: PPUSH
43810: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
43814: LD_VAR 0 2
43818: PPUSH
43819: LD_VAR 0 3
43823: PPUSH
43824: CALL_OW 284
43828: IFFALSE 43807
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43830: LD_VAR 0 2
43834: PPUSH
43835: LD_VAR 0 3
43839: PPUSH
43840: CALL_OW 283
43844: PUSH
43845: LD_INT 4
43847: EQUAL
43848: IFFALSE 43852
// exit ;
43850: GO 44160
// for i = 1 to mc_bases do
43852: LD_ADDR_VAR 0 7
43856: PUSH
43857: DOUBLE
43858: LD_INT 1
43860: DEC
43861: ST_TO_ADDR
43862: LD_EXP 50
43866: PUSH
43867: FOR_TO
43868: IFFALSE 44158
// begin if mc_crates_area [ i ] then
43870: LD_EXP 68
43874: PUSH
43875: LD_VAR 0 7
43879: ARRAY
43880: IFFALSE 43991
// for j in mc_crates_area [ i ] do
43882: LD_ADDR_VAR 0 8
43886: PUSH
43887: LD_EXP 68
43891: PUSH
43892: LD_VAR 0 7
43896: ARRAY
43897: PUSH
43898: FOR_IN
43899: IFFALSE 43989
// if InArea ( x , y , j ) then
43901: LD_VAR 0 2
43905: PPUSH
43906: LD_VAR 0 3
43910: PPUSH
43911: LD_VAR 0 8
43915: PPUSH
43916: CALL_OW 309
43920: IFFALSE 43987
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43922: LD_ADDR_EXP 66
43926: PUSH
43927: LD_EXP 66
43931: PPUSH
43932: LD_VAR 0 7
43936: PUSH
43937: LD_EXP 66
43941: PUSH
43942: LD_VAR 0 7
43946: ARRAY
43947: PUSH
43948: LD_INT 1
43950: PLUS
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PPUSH
43956: LD_VAR 0 4
43960: PUSH
43961: LD_VAR 0 2
43965: PUSH
43966: LD_VAR 0 3
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: PPUSH
43976: CALL 54658 0 3
43980: ST_TO_ADDR
// exit ;
43981: POP
43982: POP
43983: POP
43984: POP
43985: GO 44160
// end ;
43987: GO 43898
43989: POP
43990: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43991: LD_ADDR_VAR 0 9
43995: PUSH
43996: LD_EXP 50
44000: PUSH
44001: LD_VAR 0 7
44005: ARRAY
44006: PPUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 30
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 30
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: PPUSH
44035: CALL_OW 72
44039: ST_TO_ADDR
// if not depot then
44040: LD_VAR 0 9
44044: NOT
44045: IFFALSE 44049
// continue ;
44047: GO 43867
// for j in depot do
44049: LD_ADDR_VAR 0 8
44053: PUSH
44054: LD_VAR 0 9
44058: PUSH
44059: FOR_IN
44060: IFFALSE 44154
// if GetDistUnitXY ( j , x , y ) < 30 then
44062: LD_VAR 0 8
44066: PPUSH
44067: LD_VAR 0 2
44071: PPUSH
44072: LD_VAR 0 3
44076: PPUSH
44077: CALL_OW 297
44081: PUSH
44082: LD_INT 30
44084: LESS
44085: IFFALSE 44152
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
44087: LD_ADDR_EXP 66
44091: PUSH
44092: LD_EXP 66
44096: PPUSH
44097: LD_VAR 0 7
44101: PUSH
44102: LD_EXP 66
44106: PUSH
44107: LD_VAR 0 7
44111: ARRAY
44112: PUSH
44113: LD_INT 1
44115: PLUS
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PPUSH
44121: LD_VAR 0 4
44125: PUSH
44126: LD_VAR 0 2
44130: PUSH
44131: LD_VAR 0 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: PPUSH
44141: CALL 54658 0 3
44145: ST_TO_ADDR
// exit ;
44146: POP
44147: POP
44148: POP
44149: POP
44150: GO 44160
// end ;
44152: GO 44059
44154: POP
44155: POP
// end ;
44156: GO 43867
44158: POP
44159: POP
// end ;
44160: LD_VAR 0 6
44164: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
// if not mc_bases or not skirmish then
44171: LD_EXP 50
44175: NOT
44176: PUSH
44177: LD_EXP 48
44181: NOT
44182: OR
44183: IFFALSE 44187
// exit ;
44185: GO 44464
// side := GetSide ( lab ) ;
44187: LD_ADDR_VAR 0 4
44191: PUSH
44192: LD_VAR 0 2
44196: PPUSH
44197: CALL_OW 255
44201: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
44202: LD_VAR 0 4
44206: PUSH
44207: LD_EXP 76
44211: IN
44212: NOT
44213: PUSH
44214: LD_EXP 77
44218: NOT
44219: OR
44220: PUSH
44221: LD_EXP 50
44225: NOT
44226: OR
44227: IFFALSE 44231
// exit ;
44229: GO 44464
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
44231: LD_ADDR_EXP 77
44235: PUSH
44236: LD_EXP 77
44240: PPUSH
44241: LD_VAR 0 4
44245: PPUSH
44246: LD_EXP 77
44250: PUSH
44251: LD_VAR 0 4
44255: ARRAY
44256: PUSH
44257: LD_VAR 0 1
44261: DIFF
44262: PPUSH
44263: CALL_OW 1
44267: ST_TO_ADDR
// for i = 1 to mc_bases do
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: DOUBLE
44274: LD_INT 1
44276: DEC
44277: ST_TO_ADDR
44278: LD_EXP 50
44282: PUSH
44283: FOR_TO
44284: IFFALSE 44462
// begin if lab in mc_bases [ i ] then
44286: LD_VAR 0 2
44290: PUSH
44291: LD_EXP 50
44295: PUSH
44296: LD_VAR 0 5
44300: ARRAY
44301: IN
44302: IFFALSE 44460
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
44304: LD_VAR 0 1
44308: PUSH
44309: LD_INT 11
44311: PUSH
44312: LD_INT 4
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: IN
44327: PUSH
44328: LD_EXP 80
44332: PUSH
44333: LD_VAR 0 5
44337: ARRAY
44338: AND
44339: IFFALSE 44460
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_EXP 80
44350: PUSH
44351: LD_VAR 0 5
44355: ARRAY
44356: PUSH
44357: LD_INT 1
44359: ARRAY
44360: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44361: LD_ADDR_EXP 80
44365: PUSH
44366: LD_EXP 80
44370: PPUSH
44371: LD_VAR 0 5
44375: PPUSH
44376: EMPTY
44377: PPUSH
44378: CALL_OW 1
44382: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
44383: LD_VAR 0 6
44387: PPUSH
44388: LD_INT 0
44390: PPUSH
44391: CALL_OW 109
// ComExitBuilding ( tmp ) ;
44395: LD_VAR 0 6
44399: PPUSH
44400: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
44404: LD_ADDR_EXP 79
44408: PUSH
44409: LD_EXP 79
44413: PPUSH
44414: LD_VAR 0 5
44418: PPUSH
44419: LD_EXP 79
44423: PUSH
44424: LD_VAR 0 5
44428: ARRAY
44429: PPUSH
44430: LD_INT 1
44432: PPUSH
44433: LD_VAR 0 6
44437: PPUSH
44438: CALL_OW 2
44442: PPUSH
44443: CALL_OW 1
44447: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
44448: LD_VAR 0 5
44452: PPUSH
44453: LD_INT 112
44455: PPUSH
44456: CALL 21460 0 2
// end ; end ; end ;
44460: GO 44283
44462: POP
44463: POP
// end ;
44464: LD_VAR 0 3
44468: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
44469: LD_INT 0
44471: PPUSH
44472: PPUSH
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
// if not mc_bases or not skirmish then
44479: LD_EXP 50
44483: NOT
44484: PUSH
44485: LD_EXP 48
44489: NOT
44490: OR
44491: IFFALSE 44495
// exit ;
44493: GO 45866
// for i = 1 to mc_bases do
44495: LD_ADDR_VAR 0 3
44499: PUSH
44500: DOUBLE
44501: LD_INT 1
44503: DEC
44504: ST_TO_ADDR
44505: LD_EXP 50
44509: PUSH
44510: FOR_TO
44511: IFFALSE 45864
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
44513: LD_VAR 0 1
44517: PUSH
44518: LD_EXP 50
44522: PUSH
44523: LD_VAR 0 3
44527: ARRAY
44528: IN
44529: PUSH
44530: LD_VAR 0 1
44534: PUSH
44535: LD_EXP 57
44539: PUSH
44540: LD_VAR 0 3
44544: ARRAY
44545: IN
44546: OR
44547: PUSH
44548: LD_VAR 0 1
44552: PUSH
44553: LD_EXP 72
44557: PUSH
44558: LD_VAR 0 3
44562: ARRAY
44563: IN
44564: OR
44565: PUSH
44566: LD_VAR 0 1
44570: PUSH
44571: LD_EXP 69
44575: PUSH
44576: LD_VAR 0 3
44580: ARRAY
44581: IN
44582: OR
44583: PUSH
44584: LD_VAR 0 1
44588: PUSH
44589: LD_EXP 79
44593: PUSH
44594: LD_VAR 0 3
44598: ARRAY
44599: IN
44600: OR
44601: PUSH
44602: LD_VAR 0 1
44606: PUSH
44607: LD_EXP 80
44611: PUSH
44612: LD_VAR 0 3
44616: ARRAY
44617: IN
44618: OR
44619: IFFALSE 45862
// begin if un in mc_ape [ i ] then
44621: LD_VAR 0 1
44625: PUSH
44626: LD_EXP 79
44630: PUSH
44631: LD_VAR 0 3
44635: ARRAY
44636: IN
44637: IFFALSE 44676
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
44639: LD_ADDR_EXP 79
44643: PUSH
44644: LD_EXP 79
44648: PPUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: LD_EXP 79
44658: PUSH
44659: LD_VAR 0 3
44663: ARRAY
44664: PUSH
44665: LD_VAR 0 1
44669: DIFF
44670: PPUSH
44671: CALL_OW 1
44675: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
44676: LD_VAR 0 1
44680: PUSH
44681: LD_EXP 80
44685: PUSH
44686: LD_VAR 0 3
44690: ARRAY
44691: IN
44692: IFFALSE 44716
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44694: LD_ADDR_EXP 80
44698: PUSH
44699: LD_EXP 80
44703: PPUSH
44704: LD_VAR 0 3
44708: PPUSH
44709: EMPTY
44710: PPUSH
44711: CALL_OW 1
44715: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
44716: LD_VAR 0 1
44720: PPUSH
44721: CALL_OW 247
44725: PUSH
44726: LD_INT 2
44728: EQUAL
44729: PUSH
44730: LD_VAR 0 1
44734: PPUSH
44735: CALL_OW 110
44739: PUSH
44740: LD_INT 20
44742: EQUAL
44743: PUSH
44744: LD_VAR 0 1
44748: PUSH
44749: LD_EXP 72
44753: PUSH
44754: LD_VAR 0 3
44758: ARRAY
44759: IN
44760: OR
44761: PUSH
44762: LD_VAR 0 1
44766: PPUSH
44767: CALL_OW 264
44771: PUSH
44772: LD_INT 12
44774: PUSH
44775: LD_INT 51
44777: PUSH
44778: LD_EXP 94
44782: PUSH
44783: LD_INT 32
44785: PUSH
44786: LD_INT 13
44788: PUSH
44789: LD_INT 52
44791: PUSH
44792: LD_INT 31
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: IN
44804: OR
44805: AND
44806: IFFALSE 45114
// begin if un in mc_defender [ i ] then
44808: LD_VAR 0 1
44812: PUSH
44813: LD_EXP 72
44817: PUSH
44818: LD_VAR 0 3
44822: ARRAY
44823: IN
44824: IFFALSE 44863
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44826: LD_ADDR_EXP 72
44830: PUSH
44831: LD_EXP 72
44835: PPUSH
44836: LD_VAR 0 3
44840: PPUSH
44841: LD_EXP 72
44845: PUSH
44846: LD_VAR 0 3
44850: ARRAY
44851: PUSH
44852: LD_VAR 0 1
44856: DIFF
44857: PPUSH
44858: CALL_OW 1
44862: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44863: LD_ADDR_VAR 0 8
44867: PUSH
44868: LD_VAR 0 3
44872: PPUSH
44873: LD_INT 3
44875: PPUSH
44876: CALL 41532 0 2
44880: ST_TO_ADDR
// if fac then
44881: LD_VAR 0 8
44885: IFFALSE 45114
// begin for j in fac do
44887: LD_ADDR_VAR 0 4
44891: PUSH
44892: LD_VAR 0 8
44896: PUSH
44897: FOR_IN
44898: IFFALSE 45112
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44900: LD_ADDR_VAR 0 9
44904: PUSH
44905: LD_VAR 0 8
44909: PPUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: CALL_OW 265
44919: PPUSH
44920: LD_VAR 0 1
44924: PPUSH
44925: CALL_OW 262
44929: PPUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: CALL_OW 263
44939: PPUSH
44940: LD_VAR 0 1
44944: PPUSH
44945: CALL_OW 264
44949: PPUSH
44950: CALL 52190 0 5
44954: ST_TO_ADDR
// if components then
44955: LD_VAR 0 9
44959: IFFALSE 45110
// begin if GetWeapon ( un ) = ar_control_tower then
44961: LD_VAR 0 1
44965: PPUSH
44966: CALL_OW 264
44970: PUSH
44971: LD_INT 31
44973: EQUAL
44974: IFFALSE 45091
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
44976: LD_VAR 0 1
44980: PPUSH
44981: CALL_OW 311
44985: PPUSH
44986: LD_INT 0
44988: PPUSH
44989: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
44993: LD_ADDR_EXP 90
44997: PUSH
44998: LD_EXP 90
45002: PPUSH
45003: LD_VAR 0 3
45007: PPUSH
45008: LD_EXP 90
45012: PUSH
45013: LD_VAR 0 3
45017: ARRAY
45018: PUSH
45019: LD_VAR 0 1
45023: PPUSH
45024: CALL_OW 311
45028: DIFF
45029: PPUSH
45030: CALL_OW 1
45034: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
45035: LD_ADDR_VAR 0 7
45039: PUSH
45040: LD_EXP 71
45044: PUSH
45045: LD_VAR 0 3
45049: ARRAY
45050: PPUSH
45051: LD_INT 1
45053: PPUSH
45054: LD_VAR 0 9
45058: PPUSH
45059: CALL_OW 2
45063: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
45064: LD_ADDR_EXP 71
45068: PUSH
45069: LD_EXP 71
45073: PPUSH
45074: LD_VAR 0 3
45078: PPUSH
45079: LD_VAR 0 7
45083: PPUSH
45084: CALL_OW 1
45088: ST_TO_ADDR
// end else
45089: GO 45108
// MC_InsertProduceList ( i , [ components ] ) ;
45091: LD_VAR 0 3
45095: PPUSH
45096: LD_VAR 0 9
45100: PUSH
45101: EMPTY
45102: LIST
45103: PPUSH
45104: CALL 41077 0 2
// break ;
45108: GO 45112
// end ; end ;
45110: GO 44897
45112: POP
45113: POP
// end ; end ; if GetType ( un ) = unit_building then
45114: LD_VAR 0 1
45118: PPUSH
45119: CALL_OW 247
45123: PUSH
45124: LD_INT 3
45126: EQUAL
45127: IFFALSE 45530
// begin btype := GetBType ( un ) ;
45129: LD_ADDR_VAR 0 5
45133: PUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 266
45143: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
45144: LD_VAR 0 5
45148: PUSH
45149: LD_INT 29
45151: PUSH
45152: LD_INT 30
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: IN
45159: IFFALSE 45232
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 250
45170: PPUSH
45171: LD_VAR 0 1
45175: PPUSH
45176: CALL_OW 251
45180: PPUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 255
45190: PPUSH
45191: CALL_OW 440
45195: NOT
45196: IFFALSE 45232
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 250
45207: PPUSH
45208: LD_VAR 0 1
45212: PPUSH
45213: CALL_OW 251
45217: PPUSH
45218: LD_VAR 0 1
45222: PPUSH
45223: CALL_OW 255
45227: PPUSH
45228: CALL_OW 441
// end ; if btype = b_warehouse then
45232: LD_VAR 0 5
45236: PUSH
45237: LD_INT 1
45239: EQUAL
45240: IFFALSE 45258
// begin btype := b_depot ;
45242: LD_ADDR_VAR 0 5
45246: PUSH
45247: LD_INT 0
45249: ST_TO_ADDR
// pos := 1 ;
45250: LD_ADDR_VAR 0 6
45254: PUSH
45255: LD_INT 1
45257: ST_TO_ADDR
// end ; if btype = b_factory then
45258: LD_VAR 0 5
45262: PUSH
45263: LD_INT 3
45265: EQUAL
45266: IFFALSE 45284
// begin btype := b_workshop ;
45268: LD_ADDR_VAR 0 5
45272: PUSH
45273: LD_INT 2
45275: ST_TO_ADDR
// pos := 1 ;
45276: LD_ADDR_VAR 0 6
45280: PUSH
45281: LD_INT 1
45283: ST_TO_ADDR
// end ; if btype = b_barracks then
45284: LD_VAR 0 5
45288: PUSH
45289: LD_INT 5
45291: EQUAL
45292: IFFALSE 45302
// btype := b_armoury ;
45294: LD_ADDR_VAR 0 5
45298: PUSH
45299: LD_INT 4
45301: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
45302: LD_VAR 0 5
45306: PUSH
45307: LD_INT 7
45309: PUSH
45310: LD_INT 8
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: IN
45317: IFFALSE 45327
// btype := b_lab ;
45319: LD_ADDR_VAR 0 5
45323: PUSH
45324: LD_INT 6
45326: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
45327: LD_ADDR_EXP 55
45331: PUSH
45332: LD_EXP 55
45336: PPUSH
45337: LD_VAR 0 3
45341: PUSH
45342: LD_EXP 55
45346: PUSH
45347: LD_VAR 0 3
45351: ARRAY
45352: PUSH
45353: LD_INT 1
45355: PLUS
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PPUSH
45361: LD_VAR 0 5
45365: PUSH
45366: LD_VAR 0 1
45370: PPUSH
45371: CALL_OW 250
45375: PUSH
45376: LD_VAR 0 1
45380: PPUSH
45381: CALL_OW 251
45385: PUSH
45386: LD_VAR 0 1
45390: PPUSH
45391: CALL_OW 254
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: PPUSH
45402: CALL 54658 0 3
45406: ST_TO_ADDR
// if pos = 1 then
45407: LD_VAR 0 6
45411: PUSH
45412: LD_INT 1
45414: EQUAL
45415: IFFALSE 45530
// begin tmp := mc_build_list [ i ] ;
45417: LD_ADDR_VAR 0 7
45421: PUSH
45422: LD_EXP 55
45426: PUSH
45427: LD_VAR 0 3
45431: ARRAY
45432: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45433: LD_VAR 0 7
45437: PPUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 30
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 30
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: PPUSH
45466: CALL_OW 72
45470: IFFALSE 45480
// pos := 2 ;
45472: LD_ADDR_VAR 0 6
45476: PUSH
45477: LD_INT 2
45479: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
45480: LD_ADDR_VAR 0 7
45484: PUSH
45485: LD_VAR 0 7
45489: PPUSH
45490: LD_VAR 0 6
45494: PPUSH
45495: LD_VAR 0 7
45499: PPUSH
45500: CALL 54984 0 3
45504: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
45505: LD_ADDR_EXP 55
45509: PUSH
45510: LD_EXP 55
45514: PPUSH
45515: LD_VAR 0 3
45519: PPUSH
45520: LD_VAR 0 7
45524: PPUSH
45525: CALL_OW 1
45529: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
45530: LD_VAR 0 1
45534: PUSH
45535: LD_EXP 50
45539: PUSH
45540: LD_VAR 0 3
45544: ARRAY
45545: IN
45546: IFFALSE 45585
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
45548: LD_ADDR_EXP 50
45552: PUSH
45553: LD_EXP 50
45557: PPUSH
45558: LD_VAR 0 3
45562: PPUSH
45563: LD_EXP 50
45567: PUSH
45568: LD_VAR 0 3
45572: ARRAY
45573: PUSH
45574: LD_VAR 0 1
45578: DIFF
45579: PPUSH
45580: CALL_OW 1
45584: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
45585: LD_VAR 0 1
45589: PUSH
45590: LD_EXP 57
45594: PUSH
45595: LD_VAR 0 3
45599: ARRAY
45600: IN
45601: IFFALSE 45640
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
45603: LD_ADDR_EXP 57
45607: PUSH
45608: LD_EXP 57
45612: PPUSH
45613: LD_VAR 0 3
45617: PPUSH
45618: LD_EXP 57
45622: PUSH
45623: LD_VAR 0 3
45627: ARRAY
45628: PUSH
45629: LD_VAR 0 1
45633: DIFF
45634: PPUSH
45635: CALL_OW 1
45639: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
45640: LD_VAR 0 1
45644: PUSH
45645: LD_EXP 69
45649: PUSH
45650: LD_VAR 0 3
45654: ARRAY
45655: IN
45656: IFFALSE 45695
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
45658: LD_ADDR_EXP 69
45662: PUSH
45663: LD_EXP 69
45667: PPUSH
45668: LD_VAR 0 3
45672: PPUSH
45673: LD_EXP 69
45677: PUSH
45678: LD_VAR 0 3
45682: ARRAY
45683: PUSH
45684: LD_VAR 0 1
45688: DIFF
45689: PPUSH
45690: CALL_OW 1
45694: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
45695: LD_VAR 0 1
45699: PUSH
45700: LD_EXP 72
45704: PUSH
45705: LD_VAR 0 3
45709: ARRAY
45710: IN
45711: IFFALSE 45750
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
45713: LD_ADDR_EXP 72
45717: PUSH
45718: LD_EXP 72
45722: PPUSH
45723: LD_VAR 0 3
45727: PPUSH
45728: LD_EXP 72
45732: PUSH
45733: LD_VAR 0 3
45737: ARRAY
45738: PUSH
45739: LD_VAR 0 1
45743: DIFF
45744: PPUSH
45745: CALL_OW 1
45749: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
45750: LD_VAR 0 1
45754: PUSH
45755: LD_EXP 59
45759: PUSH
45760: LD_VAR 0 3
45764: ARRAY
45765: IN
45766: IFFALSE 45805
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
45768: LD_ADDR_EXP 59
45772: PUSH
45773: LD_EXP 59
45777: PPUSH
45778: LD_VAR 0 3
45782: PPUSH
45783: LD_EXP 59
45787: PUSH
45788: LD_VAR 0 3
45792: ARRAY
45793: PUSH
45794: LD_VAR 0 1
45798: DIFF
45799: PPUSH
45800: CALL_OW 1
45804: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
45805: LD_VAR 0 1
45809: PUSH
45810: LD_EXP 58
45814: PUSH
45815: LD_VAR 0 3
45819: ARRAY
45820: IN
45821: IFFALSE 45860
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
45823: LD_ADDR_EXP 58
45827: PUSH
45828: LD_EXP 58
45832: PPUSH
45833: LD_VAR 0 3
45837: PPUSH
45838: LD_EXP 58
45842: PUSH
45843: LD_VAR 0 3
45847: ARRAY
45848: PUSH
45849: LD_VAR 0 1
45853: DIFF
45854: PPUSH
45855: CALL_OW 1
45859: ST_TO_ADDR
// end ; break ;
45860: GO 45864
// end ;
45862: GO 44510
45864: POP
45865: POP
// end ;
45866: LD_VAR 0 2
45870: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
45871: LD_INT 0
45873: PPUSH
45874: PPUSH
45875: PPUSH
// if not mc_bases or not skirmish then
45876: LD_EXP 50
45880: NOT
45881: PUSH
45882: LD_EXP 48
45886: NOT
45887: OR
45888: IFFALSE 45892
// exit ;
45890: GO 46107
// for i = 1 to mc_bases do
45892: LD_ADDR_VAR 0 3
45896: PUSH
45897: DOUBLE
45898: LD_INT 1
45900: DEC
45901: ST_TO_ADDR
45902: LD_EXP 50
45906: PUSH
45907: FOR_TO
45908: IFFALSE 46105
// begin if building in mc_construct_list [ i ] then
45910: LD_VAR 0 1
45914: PUSH
45915: LD_EXP 57
45919: PUSH
45920: LD_VAR 0 3
45924: ARRAY
45925: IN
45926: IFFALSE 46103
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45928: LD_ADDR_EXP 57
45932: PUSH
45933: LD_EXP 57
45937: PPUSH
45938: LD_VAR 0 3
45942: PPUSH
45943: LD_EXP 57
45947: PUSH
45948: LD_VAR 0 3
45952: ARRAY
45953: PUSH
45954: LD_VAR 0 1
45958: DIFF
45959: PPUSH
45960: CALL_OW 1
45964: ST_TO_ADDR
// if building in mc_lab [ i ] then
45965: LD_VAR 0 1
45969: PUSH
45970: LD_EXP 83
45974: PUSH
45975: LD_VAR 0 3
45979: ARRAY
45980: IN
45981: IFFALSE 46036
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
45983: LD_ADDR_EXP 84
45987: PUSH
45988: LD_EXP 84
45992: PPUSH
45993: LD_VAR 0 3
45997: PPUSH
45998: LD_EXP 84
46002: PUSH
46003: LD_VAR 0 3
46007: ARRAY
46008: PPUSH
46009: LD_INT 1
46011: PPUSH
46012: LD_EXP 84
46016: PUSH
46017: LD_VAR 0 3
46021: ARRAY
46022: PPUSH
46023: LD_INT 0
46025: PPUSH
46026: CALL 54076 0 4
46030: PPUSH
46031: CALL_OW 1
46035: ST_TO_ADDR
// if not building in mc_bases [ i ] then
46036: LD_VAR 0 1
46040: PUSH
46041: LD_EXP 50
46045: PUSH
46046: LD_VAR 0 3
46050: ARRAY
46051: IN
46052: NOT
46053: IFFALSE 46099
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
46055: LD_ADDR_EXP 50
46059: PUSH
46060: LD_EXP 50
46064: PPUSH
46065: LD_VAR 0 3
46069: PUSH
46070: LD_EXP 50
46074: PUSH
46075: LD_VAR 0 3
46079: ARRAY
46080: PUSH
46081: LD_INT 1
46083: PLUS
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: LD_VAR 0 1
46093: PPUSH
46094: CALL 54658 0 3
46098: ST_TO_ADDR
// exit ;
46099: POP
46100: POP
46101: GO 46107
// end ; end ;
46103: GO 45907
46105: POP
46106: POP
// end ;
46107: LD_VAR 0 2
46111: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
46112: LD_INT 0
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
// if not mc_bases or not skirmish then
46121: LD_EXP 50
46125: NOT
46126: PUSH
46127: LD_EXP 48
46131: NOT
46132: OR
46133: IFFALSE 46137
// exit ;
46135: GO 46798
// for i = 1 to mc_bases do
46137: LD_ADDR_VAR 0 3
46141: PUSH
46142: DOUBLE
46143: LD_INT 1
46145: DEC
46146: ST_TO_ADDR
46147: LD_EXP 50
46151: PUSH
46152: FOR_TO
46153: IFFALSE 46796
// begin if building in mc_construct_list [ i ] then
46155: LD_VAR 0 1
46159: PUSH
46160: LD_EXP 57
46164: PUSH
46165: LD_VAR 0 3
46169: ARRAY
46170: IN
46171: IFFALSE 46794
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
46173: LD_ADDR_EXP 57
46177: PUSH
46178: LD_EXP 57
46182: PPUSH
46183: LD_VAR 0 3
46187: PPUSH
46188: LD_EXP 57
46192: PUSH
46193: LD_VAR 0 3
46197: ARRAY
46198: PUSH
46199: LD_VAR 0 1
46203: DIFF
46204: PPUSH
46205: CALL_OW 1
46209: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
46210: LD_ADDR_EXP 50
46214: PUSH
46215: LD_EXP 50
46219: PPUSH
46220: LD_VAR 0 3
46224: PUSH
46225: LD_EXP 50
46229: PUSH
46230: LD_VAR 0 3
46234: ARRAY
46235: PUSH
46236: LD_INT 1
46238: PLUS
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PPUSH
46244: LD_VAR 0 1
46248: PPUSH
46249: CALL 54658 0 3
46253: ST_TO_ADDR
// btype := GetBType ( building ) ;
46254: LD_ADDR_VAR 0 5
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 266
46268: ST_TO_ADDR
// side := GetSide ( building ) ;
46269: LD_ADDR_VAR 0 8
46273: PUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 255
46283: ST_TO_ADDR
// if btype = b_lab then
46284: LD_VAR 0 5
46288: PUSH
46289: LD_INT 6
46291: EQUAL
46292: IFFALSE 46342
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
46294: LD_ADDR_EXP 83
46298: PUSH
46299: LD_EXP 83
46303: PPUSH
46304: LD_VAR 0 3
46308: PUSH
46309: LD_EXP 83
46313: PUSH
46314: LD_VAR 0 3
46318: ARRAY
46319: PUSH
46320: LD_INT 1
46322: PLUS
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PPUSH
46328: LD_VAR 0 1
46332: PPUSH
46333: CALL 54658 0 3
46337: ST_TO_ADDR
// exit ;
46338: POP
46339: POP
46340: GO 46798
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
46342: LD_VAR 0 5
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 4
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: IN
46361: IFFALSE 46485
// begin if btype = b_armoury then
46363: LD_VAR 0 5
46367: PUSH
46368: LD_INT 4
46370: EQUAL
46371: IFFALSE 46381
// btype := b_barracks ;
46373: LD_ADDR_VAR 0 5
46377: PUSH
46378: LD_INT 5
46380: ST_TO_ADDR
// if btype = b_depot then
46381: LD_VAR 0 5
46385: PUSH
46386: LD_INT 0
46388: EQUAL
46389: IFFALSE 46399
// btype := b_warehouse ;
46391: LD_ADDR_VAR 0 5
46395: PUSH
46396: LD_INT 1
46398: ST_TO_ADDR
// if btype = b_workshop then
46399: LD_VAR 0 5
46403: PUSH
46404: LD_INT 2
46406: EQUAL
46407: IFFALSE 46417
// btype := b_factory ;
46409: LD_ADDR_VAR 0 5
46413: PUSH
46414: LD_INT 3
46416: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
46417: LD_VAR 0 5
46421: PPUSH
46422: LD_VAR 0 8
46426: PPUSH
46427: CALL_OW 323
46431: PUSH
46432: LD_INT 1
46434: EQUAL
46435: IFFALSE 46481
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
46437: LD_ADDR_EXP 82
46441: PUSH
46442: LD_EXP 82
46446: PPUSH
46447: LD_VAR 0 3
46451: PUSH
46452: LD_EXP 82
46456: PUSH
46457: LD_VAR 0 3
46461: ARRAY
46462: PUSH
46463: LD_INT 1
46465: PLUS
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PPUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: CALL 54658 0 3
46480: ST_TO_ADDR
// exit ;
46481: POP
46482: POP
46483: GO 46798
// end ; if btype in [ b_bunker , b_turret ] then
46485: LD_VAR 0 5
46489: PUSH
46490: LD_INT 32
46492: PUSH
46493: LD_INT 33
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: IN
46500: IFFALSE 46790
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
46502: LD_ADDR_EXP 58
46506: PUSH
46507: LD_EXP 58
46511: PPUSH
46512: LD_VAR 0 3
46516: PUSH
46517: LD_EXP 58
46521: PUSH
46522: LD_VAR 0 3
46526: ARRAY
46527: PUSH
46528: LD_INT 1
46530: PLUS
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PPUSH
46536: LD_VAR 0 1
46540: PPUSH
46541: CALL 54658 0 3
46545: ST_TO_ADDR
// if btype = b_bunker then
46546: LD_VAR 0 5
46550: PUSH
46551: LD_INT 32
46553: EQUAL
46554: IFFALSE 46790
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46556: LD_ADDR_EXP 59
46560: PUSH
46561: LD_EXP 59
46565: PPUSH
46566: LD_VAR 0 3
46570: PUSH
46571: LD_EXP 59
46575: PUSH
46576: LD_VAR 0 3
46580: ARRAY
46581: PUSH
46582: LD_INT 1
46584: PLUS
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PPUSH
46590: LD_VAR 0 1
46594: PPUSH
46595: CALL 54658 0 3
46599: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
46600: LD_ADDR_VAR 0 6
46604: PUSH
46605: LD_EXP 50
46609: PUSH
46610: LD_VAR 0 3
46614: ARRAY
46615: PPUSH
46616: LD_INT 25
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 54
46631: PUSH
46632: EMPTY
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PPUSH
46643: CALL_OW 72
46647: ST_TO_ADDR
// if tmp then
46648: LD_VAR 0 6
46652: IFFALSE 46658
// exit ;
46654: POP
46655: POP
46656: GO 46798
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46658: LD_ADDR_VAR 0 6
46662: PUSH
46663: LD_EXP 50
46667: PUSH
46668: LD_VAR 0 3
46672: ARRAY
46673: PPUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 30
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 30
46689: PUSH
46690: LD_INT 5
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: PPUSH
46702: CALL_OW 72
46706: ST_TO_ADDR
// if not tmp then
46707: LD_VAR 0 6
46711: NOT
46712: IFFALSE 46718
// exit ;
46714: POP
46715: POP
46716: GO 46798
// for j in tmp do
46718: LD_ADDR_VAR 0 4
46722: PUSH
46723: LD_VAR 0 6
46727: PUSH
46728: FOR_IN
46729: IFFALSE 46788
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
46731: LD_ADDR_VAR 0 7
46735: PUSH
46736: LD_VAR 0 4
46740: PPUSH
46741: CALL_OW 313
46745: PPUSH
46746: LD_INT 25
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PPUSH
46756: CALL_OW 72
46760: ST_TO_ADDR
// if units then
46761: LD_VAR 0 7
46765: IFFALSE 46786
// begin ComExitBuilding ( units [ 1 ] ) ;
46767: LD_VAR 0 7
46771: PUSH
46772: LD_INT 1
46774: ARRAY
46775: PPUSH
46776: CALL_OW 122
// exit ;
46780: POP
46781: POP
46782: POP
46783: POP
46784: GO 46798
// end ; end ;
46786: GO 46728
46788: POP
46789: POP
// end ; end ; exit ;
46790: POP
46791: POP
46792: GO 46798
// end ; end ;
46794: GO 46152
46796: POP
46797: POP
// end ;
46798: LD_VAR 0 2
46802: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
46803: LD_INT 0
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
// if not mc_bases or not skirmish then
46812: LD_EXP 50
46816: NOT
46817: PUSH
46818: LD_EXP 48
46822: NOT
46823: OR
46824: IFFALSE 46828
// exit ;
46826: GO 47059
// btype := GetBType ( building ) ;
46828: LD_ADDR_VAR 0 6
46832: PUSH
46833: LD_VAR 0 1
46837: PPUSH
46838: CALL_OW 266
46842: ST_TO_ADDR
// x := GetX ( building ) ;
46843: LD_ADDR_VAR 0 7
46847: PUSH
46848: LD_VAR 0 1
46852: PPUSH
46853: CALL_OW 250
46857: ST_TO_ADDR
// y := GetY ( building ) ;
46858: LD_ADDR_VAR 0 8
46862: PUSH
46863: LD_VAR 0 1
46867: PPUSH
46868: CALL_OW 251
46872: ST_TO_ADDR
// d := GetDir ( building ) ;
46873: LD_ADDR_VAR 0 9
46877: PUSH
46878: LD_VAR 0 1
46882: PPUSH
46883: CALL_OW 254
46887: ST_TO_ADDR
// for i = 1 to mc_bases do
46888: LD_ADDR_VAR 0 4
46892: PUSH
46893: DOUBLE
46894: LD_INT 1
46896: DEC
46897: ST_TO_ADDR
46898: LD_EXP 50
46902: PUSH
46903: FOR_TO
46904: IFFALSE 47057
// begin if not mc_build_list [ i ] then
46906: LD_EXP 55
46910: PUSH
46911: LD_VAR 0 4
46915: ARRAY
46916: NOT
46917: IFFALSE 46921
// continue ;
46919: GO 46903
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
46921: LD_VAR 0 6
46925: PUSH
46926: LD_VAR 0 7
46930: PUSH
46931: LD_VAR 0 8
46935: PUSH
46936: LD_VAR 0 9
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: PPUSH
46947: LD_EXP 55
46951: PUSH
46952: LD_VAR 0 4
46956: ARRAY
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: PPUSH
46962: CALL 60827 0 2
46966: IFFALSE 47055
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
46968: LD_ADDR_EXP 55
46972: PUSH
46973: LD_EXP 55
46977: PPUSH
46978: LD_VAR 0 4
46982: PPUSH
46983: LD_EXP 55
46987: PUSH
46988: LD_VAR 0 4
46992: ARRAY
46993: PPUSH
46994: LD_INT 1
46996: PPUSH
46997: CALL_OW 3
47001: PPUSH
47002: CALL_OW 1
47006: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
47007: LD_ADDR_EXP 57
47011: PUSH
47012: LD_EXP 57
47016: PPUSH
47017: LD_VAR 0 4
47021: PUSH
47022: LD_EXP 57
47026: PUSH
47027: LD_VAR 0 4
47031: ARRAY
47032: PUSH
47033: LD_INT 1
47035: PLUS
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PPUSH
47041: LD_VAR 0 1
47045: PPUSH
47046: CALL 54658 0 3
47050: ST_TO_ADDR
// exit ;
47051: POP
47052: POP
47053: GO 47059
// end ; end ;
47055: GO 46903
47057: POP
47058: POP
// end ;
47059: LD_VAR 0 3
47063: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
47064: LD_INT 0
47066: PPUSH
47067: PPUSH
47068: PPUSH
// if not mc_bases or not skirmish then
47069: LD_EXP 50
47073: NOT
47074: PUSH
47075: LD_EXP 48
47079: NOT
47080: OR
47081: IFFALSE 47085
// exit ;
47083: GO 47275
// for i = 1 to mc_bases do
47085: LD_ADDR_VAR 0 4
47089: PUSH
47090: DOUBLE
47091: LD_INT 1
47093: DEC
47094: ST_TO_ADDR
47095: LD_EXP 50
47099: PUSH
47100: FOR_TO
47101: IFFALSE 47188
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
47103: LD_VAR 0 1
47107: PUSH
47108: LD_EXP 58
47112: PUSH
47113: LD_VAR 0 4
47117: ARRAY
47118: IN
47119: PUSH
47120: LD_VAR 0 1
47124: PUSH
47125: LD_EXP 59
47129: PUSH
47130: LD_VAR 0 4
47134: ARRAY
47135: IN
47136: NOT
47137: AND
47138: IFFALSE 47186
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
47140: LD_ADDR_EXP 59
47144: PUSH
47145: LD_EXP 59
47149: PPUSH
47150: LD_VAR 0 4
47154: PUSH
47155: LD_EXP 59
47159: PUSH
47160: LD_VAR 0 4
47164: ARRAY
47165: PUSH
47166: LD_INT 1
47168: PLUS
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PPUSH
47174: LD_VAR 0 1
47178: PPUSH
47179: CALL 54658 0 3
47183: ST_TO_ADDR
// break ;
47184: GO 47188
// end ; end ;
47186: GO 47100
47188: POP
47189: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
47190: LD_VAR 0 1
47194: PPUSH
47195: CALL_OW 257
47199: PUSH
47200: LD_EXP 76
47204: IN
47205: PUSH
47206: LD_VAR 0 1
47210: PPUSH
47211: CALL_OW 266
47215: PUSH
47216: LD_INT 5
47218: EQUAL
47219: AND
47220: PUSH
47221: LD_VAR 0 2
47225: PPUSH
47226: CALL_OW 110
47230: PUSH
47231: LD_INT 18
47233: NONEQUAL
47234: AND
47235: IFFALSE 47275
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
47237: LD_VAR 0 2
47241: PPUSH
47242: CALL_OW 257
47246: PUSH
47247: LD_INT 5
47249: PUSH
47250: LD_INT 8
47252: PUSH
47253: LD_INT 9
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: IN
47261: IFFALSE 47275
// SetClass ( unit , 1 ) ;
47263: LD_VAR 0 2
47267: PPUSH
47268: LD_INT 1
47270: PPUSH
47271: CALL_OW 336
// end ;
47275: LD_VAR 0 3
47279: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
47280: LD_INT 0
47282: PPUSH
47283: PPUSH
// if not mc_bases or not skirmish then
47284: LD_EXP 50
47288: NOT
47289: PUSH
47290: LD_EXP 48
47294: NOT
47295: OR
47296: IFFALSE 47300
// exit ;
47298: GO 47416
// if GetLives ( abandoned_vehicle ) > 250 then
47300: LD_VAR 0 2
47304: PPUSH
47305: CALL_OW 256
47309: PUSH
47310: LD_INT 250
47312: GREATER
47313: IFFALSE 47317
// exit ;
47315: GO 47416
// for i = 1 to mc_bases do
47317: LD_ADDR_VAR 0 6
47321: PUSH
47322: DOUBLE
47323: LD_INT 1
47325: DEC
47326: ST_TO_ADDR
47327: LD_EXP 50
47331: PUSH
47332: FOR_TO
47333: IFFALSE 47414
// begin if driver in mc_bases [ i ] then
47335: LD_VAR 0 1
47339: PUSH
47340: LD_EXP 50
47344: PUSH
47345: LD_VAR 0 6
47349: ARRAY
47350: IN
47351: IFFALSE 47412
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
47353: LD_VAR 0 1
47357: PPUSH
47358: LD_EXP 50
47362: PUSH
47363: LD_VAR 0 6
47367: ARRAY
47368: PPUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 30
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 30
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: PPUSH
47397: CALL_OW 72
47401: PUSH
47402: LD_INT 1
47404: ARRAY
47405: PPUSH
47406: CALL_OW 112
// break ;
47410: GO 47414
// end ; end ;
47412: GO 47332
47414: POP
47415: POP
// end ; end_of_file
47416: LD_VAR 0 5
47420: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47421: LD_INT 0
47423: PPUSH
47424: PPUSH
// if exist_mode then
47425: LD_VAR 0 2
47429: IFFALSE 47454
// unit := CreateCharacter ( prefix & ident ) else
47431: LD_ADDR_VAR 0 5
47435: PUSH
47436: LD_VAR 0 3
47440: PUSH
47441: LD_VAR 0 1
47445: STR
47446: PPUSH
47447: CALL_OW 34
47451: ST_TO_ADDR
47452: GO 47469
// unit := NewCharacter ( ident ) ;
47454: LD_ADDR_VAR 0 5
47458: PUSH
47459: LD_VAR 0 1
47463: PPUSH
47464: CALL_OW 25
47468: ST_TO_ADDR
// result := unit ;
47469: LD_ADDR_VAR 0 4
47473: PUSH
47474: LD_VAR 0 5
47478: ST_TO_ADDR
// end ;
47479: LD_VAR 0 4
47483: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47484: LD_INT 0
47486: PPUSH
47487: PPUSH
// if not side or not nation then
47488: LD_VAR 0 1
47492: NOT
47493: PUSH
47494: LD_VAR 0 2
47498: NOT
47499: OR
47500: IFFALSE 47504
// exit ;
47502: GO 48148
// case nation of nation_american :
47504: LD_VAR 0 2
47508: PUSH
47509: LD_INT 1
47511: DOUBLE
47512: EQUAL
47513: IFTRUE 47517
47515: GO 47691
47517: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
47518: LD_ADDR_VAR 0 4
47522: PUSH
47523: LD_INT 35
47525: PUSH
47526: LD_INT 45
47528: PUSH
47529: LD_INT 46
47531: PUSH
47532: LD_INT 47
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 6
47543: PUSH
47544: LD_INT 15
47546: PUSH
47547: LD_INT 16
47549: PUSH
47550: LD_INT 7
47552: PUSH
47553: LD_INT 12
47555: PUSH
47556: LD_INT 13
47558: PUSH
47559: LD_INT 10
47561: PUSH
47562: LD_INT 14
47564: PUSH
47565: LD_INT 20
47567: PUSH
47568: LD_INT 21
47570: PUSH
47571: LD_INT 22
47573: PUSH
47574: LD_INT 25
47576: PUSH
47577: LD_INT 32
47579: PUSH
47580: LD_INT 27
47582: PUSH
47583: LD_INT 36
47585: PUSH
47586: LD_INT 69
47588: PUSH
47589: LD_INT 39
47591: PUSH
47592: LD_INT 34
47594: PUSH
47595: LD_INT 40
47597: PUSH
47598: LD_INT 48
47600: PUSH
47601: LD_INT 49
47603: PUSH
47604: LD_INT 50
47606: PUSH
47607: LD_INT 51
47609: PUSH
47610: LD_INT 52
47612: PUSH
47613: LD_INT 53
47615: PUSH
47616: LD_INT 54
47618: PUSH
47619: LD_INT 55
47621: PUSH
47622: LD_INT 56
47624: PUSH
47625: LD_INT 57
47627: PUSH
47628: LD_INT 58
47630: PUSH
47631: LD_INT 59
47633: PUSH
47634: LD_INT 60
47636: PUSH
47637: LD_INT 61
47639: PUSH
47640: LD_INT 62
47642: PUSH
47643: LD_INT 80
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
47689: GO 48072
47691: LD_INT 2
47693: DOUBLE
47694: EQUAL
47695: IFTRUE 47699
47697: GO 47881
47699: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
47700: LD_ADDR_VAR 0 4
47704: PUSH
47705: LD_INT 35
47707: PUSH
47708: LD_INT 45
47710: PUSH
47711: LD_INT 46
47713: PUSH
47714: LD_INT 47
47716: PUSH
47717: LD_INT 70
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 11
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: LD_INT 4
47731: PUSH
47732: LD_INT 5
47734: PUSH
47735: LD_INT 6
47737: PUSH
47738: LD_INT 15
47740: PUSH
47741: LD_INT 18
47743: PUSH
47744: LD_INT 7
47746: PUSH
47747: LD_INT 17
47749: PUSH
47750: LD_INT 8
47752: PUSH
47753: LD_INT 20
47755: PUSH
47756: LD_INT 21
47758: PUSH
47759: LD_INT 22
47761: PUSH
47762: LD_INT 72
47764: PUSH
47765: LD_INT 26
47767: PUSH
47768: LD_INT 69
47770: PUSH
47771: LD_INT 39
47773: PUSH
47774: LD_INT 40
47776: PUSH
47777: LD_INT 41
47779: PUSH
47780: LD_INT 42
47782: PUSH
47783: LD_INT 43
47785: PUSH
47786: LD_INT 48
47788: PUSH
47789: LD_INT 49
47791: PUSH
47792: LD_INT 50
47794: PUSH
47795: LD_INT 51
47797: PUSH
47798: LD_INT 52
47800: PUSH
47801: LD_INT 53
47803: PUSH
47804: LD_INT 54
47806: PUSH
47807: LD_INT 55
47809: PUSH
47810: LD_INT 56
47812: PUSH
47813: LD_INT 60
47815: PUSH
47816: LD_INT 61
47818: PUSH
47819: LD_INT 62
47821: PUSH
47822: LD_INT 66
47824: PUSH
47825: LD_INT 67
47827: PUSH
47828: LD_INT 68
47830: PUSH
47831: LD_INT 81
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: ST_TO_ADDR
47879: GO 48072
47881: LD_INT 3
47883: DOUBLE
47884: EQUAL
47885: IFTRUE 47889
47887: GO 48071
47889: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
47890: LD_ADDR_VAR 0 4
47894: PUSH
47895: LD_INT 46
47897: PUSH
47898: LD_INT 47
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 11
47909: PUSH
47910: LD_INT 9
47912: PUSH
47913: LD_INT 20
47915: PUSH
47916: LD_INT 19
47918: PUSH
47919: LD_INT 21
47921: PUSH
47922: LD_INT 24
47924: PUSH
47925: LD_INT 22
47927: PUSH
47928: LD_INT 25
47930: PUSH
47931: LD_INT 28
47933: PUSH
47934: LD_INT 29
47936: PUSH
47937: LD_INT 30
47939: PUSH
47940: LD_INT 31
47942: PUSH
47943: LD_INT 37
47945: PUSH
47946: LD_INT 38
47948: PUSH
47949: LD_INT 32
47951: PUSH
47952: LD_INT 27
47954: PUSH
47955: LD_INT 33
47957: PUSH
47958: LD_INT 69
47960: PUSH
47961: LD_INT 39
47963: PUSH
47964: LD_INT 34
47966: PUSH
47967: LD_INT 40
47969: PUSH
47970: LD_INT 71
47972: PUSH
47973: LD_INT 23
47975: PUSH
47976: LD_INT 44
47978: PUSH
47979: LD_INT 48
47981: PUSH
47982: LD_INT 49
47984: PUSH
47985: LD_INT 50
47987: PUSH
47988: LD_INT 51
47990: PUSH
47991: LD_INT 52
47993: PUSH
47994: LD_INT 53
47996: PUSH
47997: LD_INT 54
47999: PUSH
48000: LD_INT 55
48002: PUSH
48003: LD_INT 56
48005: PUSH
48006: LD_INT 57
48008: PUSH
48009: LD_INT 58
48011: PUSH
48012: LD_INT 59
48014: PUSH
48015: LD_INT 63
48017: PUSH
48018: LD_INT 64
48020: PUSH
48021: LD_INT 65
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
48069: GO 48072
48071: POP
// if state > - 1 and state < 3 then
48072: LD_VAR 0 3
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: GREATER
48081: PUSH
48082: LD_VAR 0 3
48086: PUSH
48087: LD_INT 3
48089: LESS
48090: AND
48091: IFFALSE 48148
// for i in result do
48093: LD_ADDR_VAR 0 5
48097: PUSH
48098: LD_VAR 0 4
48102: PUSH
48103: FOR_IN
48104: IFFALSE 48146
// if GetTech ( i , side ) <> state then
48106: LD_VAR 0 5
48110: PPUSH
48111: LD_VAR 0 1
48115: PPUSH
48116: CALL_OW 321
48120: PUSH
48121: LD_VAR 0 3
48125: NONEQUAL
48126: IFFALSE 48144
// result := result diff i ;
48128: LD_ADDR_VAR 0 4
48132: PUSH
48133: LD_VAR 0 4
48137: PUSH
48138: LD_VAR 0 5
48142: DIFF
48143: ST_TO_ADDR
48144: GO 48103
48146: POP
48147: POP
// end ;
48148: LD_VAR 0 4
48152: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
48153: LD_INT 0
48155: PPUSH
48156: PPUSH
48157: PPUSH
// result := true ;
48158: LD_ADDR_VAR 0 3
48162: PUSH
48163: LD_INT 1
48165: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
48166: LD_ADDR_VAR 0 5
48170: PUSH
48171: LD_VAR 0 2
48175: PPUSH
48176: CALL_OW 480
48180: ST_TO_ADDR
// if not tmp then
48181: LD_VAR 0 5
48185: NOT
48186: IFFALSE 48190
// exit ;
48188: GO 48239
// for i in tmp do
48190: LD_ADDR_VAR 0 4
48194: PUSH
48195: LD_VAR 0 5
48199: PUSH
48200: FOR_IN
48201: IFFALSE 48237
// if GetTech ( i , side ) <> state_researched then
48203: LD_VAR 0 4
48207: PPUSH
48208: LD_VAR 0 1
48212: PPUSH
48213: CALL_OW 321
48217: PUSH
48218: LD_INT 2
48220: NONEQUAL
48221: IFFALSE 48235
// begin result := false ;
48223: LD_ADDR_VAR 0 3
48227: PUSH
48228: LD_INT 0
48230: ST_TO_ADDR
// exit ;
48231: POP
48232: POP
48233: GO 48239
// end ;
48235: GO 48200
48237: POP
48238: POP
// end ;
48239: LD_VAR 0 3
48243: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
48244: LD_INT 0
48246: PPUSH
48247: PPUSH
48248: PPUSH
48249: PPUSH
48250: PPUSH
48251: PPUSH
48252: PPUSH
48253: PPUSH
48254: PPUSH
48255: PPUSH
48256: PPUSH
48257: PPUSH
48258: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
48259: LD_VAR 0 1
48263: NOT
48264: PUSH
48265: LD_VAR 0 1
48269: PPUSH
48270: CALL_OW 257
48274: PUSH
48275: LD_INT 9
48277: NONEQUAL
48278: OR
48279: IFFALSE 48283
// exit ;
48281: GO 48856
// side := GetSide ( unit ) ;
48283: LD_ADDR_VAR 0 9
48287: PUSH
48288: LD_VAR 0 1
48292: PPUSH
48293: CALL_OW 255
48297: ST_TO_ADDR
// tech_space := tech_spacanom ;
48298: LD_ADDR_VAR 0 12
48302: PUSH
48303: LD_INT 29
48305: ST_TO_ADDR
// tech_time := tech_taurad ;
48306: LD_ADDR_VAR 0 13
48310: PUSH
48311: LD_INT 28
48313: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48314: LD_ADDR_VAR 0 11
48318: PUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 310
48328: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48329: LD_VAR 0 11
48333: PPUSH
48334: CALL_OW 247
48338: PUSH
48339: LD_INT 2
48341: EQUAL
48342: IFFALSE 48346
// exit ;
48344: GO 48856
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48346: LD_ADDR_VAR 0 8
48350: PUSH
48351: LD_INT 81
48353: PUSH
48354: LD_VAR 0 9
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: LD_INT 21
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PPUSH
48384: CALL_OW 69
48388: ST_TO_ADDR
// if not tmp then
48389: LD_VAR 0 8
48393: NOT
48394: IFFALSE 48398
// exit ;
48396: GO 48856
// if in_unit then
48398: LD_VAR 0 11
48402: IFFALSE 48426
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48404: LD_ADDR_VAR 0 10
48408: PUSH
48409: LD_VAR 0 8
48413: PPUSH
48414: LD_VAR 0 11
48418: PPUSH
48419: CALL_OW 74
48423: ST_TO_ADDR
48424: GO 48446
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48426: LD_ADDR_VAR 0 10
48430: PUSH
48431: LD_VAR 0 8
48435: PPUSH
48436: LD_VAR 0 1
48440: PPUSH
48441: CALL_OW 74
48445: ST_TO_ADDR
// if not enemy then
48446: LD_VAR 0 10
48450: NOT
48451: IFFALSE 48455
// exit ;
48453: GO 48856
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48455: LD_VAR 0 11
48459: PUSH
48460: LD_VAR 0 11
48464: PPUSH
48465: LD_VAR 0 10
48469: PPUSH
48470: CALL_OW 296
48474: PUSH
48475: LD_INT 13
48477: GREATER
48478: AND
48479: PUSH
48480: LD_VAR 0 1
48484: PPUSH
48485: LD_VAR 0 10
48489: PPUSH
48490: CALL_OW 296
48494: PUSH
48495: LD_INT 12
48497: GREATER
48498: OR
48499: IFFALSE 48503
// exit ;
48501: GO 48856
// missile := [ 1 ] ;
48503: LD_ADDR_VAR 0 14
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48514: LD_VAR 0 9
48518: PPUSH
48519: LD_VAR 0 12
48523: PPUSH
48524: CALL_OW 325
48528: IFFALSE 48557
// missile := Insert ( missile , missile + 1 , 2 ) ;
48530: LD_ADDR_VAR 0 14
48534: PUSH
48535: LD_VAR 0 14
48539: PPUSH
48540: LD_VAR 0 14
48544: PUSH
48545: LD_INT 1
48547: PLUS
48548: PPUSH
48549: LD_INT 2
48551: PPUSH
48552: CALL_OW 2
48556: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48557: LD_VAR 0 9
48561: PPUSH
48562: LD_VAR 0 13
48566: PPUSH
48567: CALL_OW 325
48571: PUSH
48572: LD_VAR 0 10
48576: PPUSH
48577: CALL_OW 255
48581: PPUSH
48582: LD_VAR 0 13
48586: PPUSH
48587: CALL_OW 325
48591: NOT
48592: AND
48593: IFFALSE 48622
// missile := Insert ( missile , missile + 1 , 3 ) ;
48595: LD_ADDR_VAR 0 14
48599: PUSH
48600: LD_VAR 0 14
48604: PPUSH
48605: LD_VAR 0 14
48609: PUSH
48610: LD_INT 1
48612: PLUS
48613: PPUSH
48614: LD_INT 3
48616: PPUSH
48617: CALL_OW 2
48621: ST_TO_ADDR
// if missile < 2 then
48622: LD_VAR 0 14
48626: PUSH
48627: LD_INT 2
48629: LESS
48630: IFFALSE 48634
// exit ;
48632: GO 48856
// x := GetX ( enemy ) ;
48634: LD_ADDR_VAR 0 4
48638: PUSH
48639: LD_VAR 0 10
48643: PPUSH
48644: CALL_OW 250
48648: ST_TO_ADDR
// y := GetY ( enemy ) ;
48649: LD_ADDR_VAR 0 5
48653: PUSH
48654: LD_VAR 0 10
48658: PPUSH
48659: CALL_OW 251
48663: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48664: LD_ADDR_VAR 0 6
48668: PUSH
48669: LD_VAR 0 4
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PPUSH
48678: LD_INT 1
48680: PPUSH
48681: CALL_OW 12
48685: PLUS
48686: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48687: LD_ADDR_VAR 0 7
48691: PUSH
48692: LD_VAR 0 5
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PPUSH
48701: LD_INT 1
48703: PPUSH
48704: CALL_OW 12
48708: PLUS
48709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48710: LD_VAR 0 6
48714: PPUSH
48715: LD_VAR 0 7
48719: PPUSH
48720: CALL_OW 488
48724: NOT
48725: IFFALSE 48747
// begin _x := x ;
48727: LD_ADDR_VAR 0 6
48731: PUSH
48732: LD_VAR 0 4
48736: ST_TO_ADDR
// _y := y ;
48737: LD_ADDR_VAR 0 7
48741: PUSH
48742: LD_VAR 0 5
48746: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48747: LD_ADDR_VAR 0 3
48751: PUSH
48752: LD_INT 1
48754: PPUSH
48755: LD_VAR 0 14
48759: PPUSH
48760: CALL_OW 12
48764: ST_TO_ADDR
// case i of 1 :
48765: LD_VAR 0 3
48769: PUSH
48770: LD_INT 1
48772: DOUBLE
48773: EQUAL
48774: IFTRUE 48778
48776: GO 48795
48778: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48779: LD_VAR 0 1
48783: PPUSH
48784: LD_VAR 0 10
48788: PPUSH
48789: CALL_OW 115
48793: GO 48856
48795: LD_INT 2
48797: DOUBLE
48798: EQUAL
48799: IFTRUE 48803
48801: GO 48825
48803: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48804: LD_VAR 0 1
48808: PPUSH
48809: LD_VAR 0 6
48813: PPUSH
48814: LD_VAR 0 7
48818: PPUSH
48819: CALL_OW 153
48823: GO 48856
48825: LD_INT 3
48827: DOUBLE
48828: EQUAL
48829: IFTRUE 48833
48831: GO 48855
48833: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48834: LD_VAR 0 1
48838: PPUSH
48839: LD_VAR 0 6
48843: PPUSH
48844: LD_VAR 0 7
48848: PPUSH
48849: CALL_OW 154
48853: GO 48856
48855: POP
// end ;
48856: LD_VAR 0 2
48860: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48861: LD_INT 0
48863: PPUSH
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
// if not unit or not building then
48869: LD_VAR 0 1
48873: NOT
48874: PUSH
48875: LD_VAR 0 2
48879: NOT
48880: OR
48881: IFFALSE 48885
// exit ;
48883: GO 49043
// x := GetX ( building ) ;
48885: LD_ADDR_VAR 0 5
48889: PUSH
48890: LD_VAR 0 2
48894: PPUSH
48895: CALL_OW 250
48899: ST_TO_ADDR
// y := GetY ( building ) ;
48900: LD_ADDR_VAR 0 6
48904: PUSH
48905: LD_VAR 0 2
48909: PPUSH
48910: CALL_OW 251
48914: ST_TO_ADDR
// for i = 0 to 5 do
48915: LD_ADDR_VAR 0 4
48919: PUSH
48920: DOUBLE
48921: LD_INT 0
48923: DEC
48924: ST_TO_ADDR
48925: LD_INT 5
48927: PUSH
48928: FOR_TO
48929: IFFALSE 49041
// begin _x := ShiftX ( x , i , 3 ) ;
48931: LD_ADDR_VAR 0 7
48935: PUSH
48936: LD_VAR 0 5
48940: PPUSH
48941: LD_VAR 0 4
48945: PPUSH
48946: LD_INT 3
48948: PPUSH
48949: CALL_OW 272
48953: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48954: LD_ADDR_VAR 0 8
48958: PUSH
48959: LD_VAR 0 6
48963: PPUSH
48964: LD_VAR 0 4
48968: PPUSH
48969: LD_INT 3
48971: PPUSH
48972: CALL_OW 273
48976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48977: LD_VAR 0 7
48981: PPUSH
48982: LD_VAR 0 8
48986: PPUSH
48987: CALL_OW 488
48991: NOT
48992: IFFALSE 48996
// continue ;
48994: GO 48928
// if HexInfo ( _x , _y ) = 0 then
48996: LD_VAR 0 7
49000: PPUSH
49001: LD_VAR 0 8
49005: PPUSH
49006: CALL_OW 428
49010: PUSH
49011: LD_INT 0
49013: EQUAL
49014: IFFALSE 49039
// begin ComMoveXY ( unit , _x , _y ) ;
49016: LD_VAR 0 1
49020: PPUSH
49021: LD_VAR 0 7
49025: PPUSH
49026: LD_VAR 0 8
49030: PPUSH
49031: CALL_OW 111
// exit ;
49035: POP
49036: POP
49037: GO 49043
// end ; end ;
49039: GO 48928
49041: POP
49042: POP
// end ;
49043: LD_VAR 0 3
49047: RET
// export function ScanBase ( side , base_area ) ; begin
49048: LD_INT 0
49050: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
49051: LD_ADDR_VAR 0 3
49055: PUSH
49056: LD_VAR 0 2
49060: PPUSH
49061: LD_INT 81
49063: PUSH
49064: LD_VAR 0 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PPUSH
49073: CALL_OW 70
49077: ST_TO_ADDR
// end ;
49078: LD_VAR 0 3
49082: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
49083: LD_INT 0
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
49090: LD_VAR 0 1
49094: NOT
49095: PUSH
49096: LD_EXP 50
49100: PUSH
49101: LD_VAR 0 1
49105: ARRAY
49106: NOT
49107: OR
49108: PUSH
49109: LD_VAR 0 2
49113: NOT
49114: OR
49115: PUSH
49116: LD_VAR 0 3
49120: NOT
49121: OR
49122: IFFALSE 49126
// exit ;
49124: GO 49639
// side := mc_sides [ base ] ;
49126: LD_ADDR_VAR 0 6
49130: PUSH
49131: LD_EXP 76
49135: PUSH
49136: LD_VAR 0 1
49140: ARRAY
49141: ST_TO_ADDR
// if not side then
49142: LD_VAR 0 6
49146: NOT
49147: IFFALSE 49151
// exit ;
49149: GO 49639
// for i in solds do
49151: LD_ADDR_VAR 0 7
49155: PUSH
49156: LD_VAR 0 2
49160: PUSH
49161: FOR_IN
49162: IFFALSE 49223
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
49164: LD_VAR 0 7
49168: PPUSH
49169: CALL_OW 310
49173: PPUSH
49174: CALL_OW 266
49178: PUSH
49179: LD_INT 32
49181: PUSH
49182: LD_INT 31
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: IN
49189: IFFALSE 49209
// solds := solds diff i else
49191: LD_ADDR_VAR 0 2
49195: PUSH
49196: LD_VAR 0 2
49200: PUSH
49201: LD_VAR 0 7
49205: DIFF
49206: ST_TO_ADDR
49207: GO 49221
// SetTag ( i , 18 ) ;
49209: LD_VAR 0 7
49213: PPUSH
49214: LD_INT 18
49216: PPUSH
49217: CALL_OW 109
49221: GO 49161
49223: POP
49224: POP
// if not solds then
49225: LD_VAR 0 2
49229: NOT
49230: IFFALSE 49234
// exit ;
49232: GO 49639
// repeat wait ( 0 0$1 ) ;
49234: LD_INT 35
49236: PPUSH
49237: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
49241: LD_ADDR_VAR 0 5
49245: PUSH
49246: LD_VAR 0 6
49250: PPUSH
49251: LD_VAR 0 3
49255: PPUSH
49256: CALL 49048 0 2
49260: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
49261: LD_EXP 50
49265: PUSH
49266: LD_VAR 0 1
49270: ARRAY
49271: NOT
49272: PUSH
49273: LD_EXP 50
49277: PUSH
49278: LD_VAR 0 1
49282: ARRAY
49283: PUSH
49284: EMPTY
49285: EQUAL
49286: OR
49287: IFFALSE 49324
// begin for i in solds do
49289: LD_ADDR_VAR 0 7
49293: PUSH
49294: LD_VAR 0 2
49298: PUSH
49299: FOR_IN
49300: IFFALSE 49313
// ComStop ( i ) ;
49302: LD_VAR 0 7
49306: PPUSH
49307: CALL_OW 141
49311: GO 49299
49313: POP
49314: POP
// solds := [ ] ;
49315: LD_ADDR_VAR 0 2
49319: PUSH
49320: EMPTY
49321: ST_TO_ADDR
// exit ;
49322: GO 49639
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
49324: LD_VAR 0 5
49328: NOT
49329: PUSH
49330: LD_VAR 0 5
49334: PUSH
49335: LD_INT 3
49337: GREATER
49338: OR
49339: PUSH
49340: LD_EXP 72
49344: PUSH
49345: LD_VAR 0 1
49349: ARRAY
49350: OR
49351: IFFALSE 49392
// begin for i in solds do
49353: LD_ADDR_VAR 0 7
49357: PUSH
49358: LD_VAR 0 2
49362: PUSH
49363: FOR_IN
49364: IFFALSE 49388
// if HasTask ( i ) then
49366: LD_VAR 0 7
49370: PPUSH
49371: CALL_OW 314
49375: IFFALSE 49386
// ComStop ( i ) ;
49377: LD_VAR 0 7
49381: PPUSH
49382: CALL_OW 141
49386: GO 49363
49388: POP
49389: POP
// break ;
49390: GO 49627
// end ; for i in solds do
49392: LD_ADDR_VAR 0 7
49396: PUSH
49397: LD_VAR 0 2
49401: PUSH
49402: FOR_IN
49403: IFFALSE 49619
// begin if IsInUnit ( i ) then
49405: LD_VAR 0 7
49409: PPUSH
49410: CALL_OW 310
49414: IFFALSE 49425
// ComExitBuilding ( i ) ;
49416: LD_VAR 0 7
49420: PPUSH
49421: CALL_OW 122
// if GetLives ( i ) > 333 then
49425: LD_VAR 0 7
49429: PPUSH
49430: CALL_OW 256
49434: PUSH
49435: LD_INT 333
49437: GREATER
49438: IFFALSE 49466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49440: LD_VAR 0 7
49444: PPUSH
49445: LD_VAR 0 5
49449: PPUSH
49450: LD_VAR 0 7
49454: PPUSH
49455: CALL_OW 74
49459: PPUSH
49460: CALL_OW 115
49464: GO 49617
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
49466: LD_ADDR_VAR 0 8
49470: PUSH
49471: LD_EXP 50
49475: PUSH
49476: LD_VAR 0 1
49480: ARRAY
49481: PPUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 30
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 30
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 30
49507: PUSH
49508: LD_INT 6
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: PPUSH
49521: CALL_OW 72
49525: PPUSH
49526: LD_VAR 0 7
49530: PPUSH
49531: CALL_OW 74
49535: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
49536: LD_VAR 0 7
49540: PPUSH
49541: LD_VAR 0 8
49545: PPUSH
49546: CALL_OW 250
49550: PPUSH
49551: LD_INT 3
49553: PPUSH
49554: LD_INT 5
49556: PPUSH
49557: CALL_OW 272
49561: PPUSH
49562: LD_VAR 0 8
49566: PPUSH
49567: CALL_OW 251
49571: PPUSH
49572: LD_INT 3
49574: PPUSH
49575: LD_INT 5
49577: PPUSH
49578: CALL_OW 273
49582: PPUSH
49583: CALL_OW 111
// SetTag ( i , 0 ) ;
49587: LD_VAR 0 7
49591: PPUSH
49592: LD_INT 0
49594: PPUSH
49595: CALL_OW 109
// solds := solds diff i ;
49599: LD_ADDR_VAR 0 2
49603: PUSH
49604: LD_VAR 0 2
49608: PUSH
49609: LD_VAR 0 7
49613: DIFF
49614: ST_TO_ADDR
// continue ;
49615: GO 49402
// end ; end ;
49617: GO 49402
49619: POP
49620: POP
// until solds ;
49621: LD_VAR 0 2
49625: IFFALSE 49234
// MC_Reset ( base , 18 ) ;
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_INT 18
49634: PPUSH
49635: CALL 21460 0 2
// end ;
49639: LD_VAR 0 4
49643: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
49644: LD_INT 0
49646: PPUSH
49647: PPUSH
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
49657: PPUSH
49658: PPUSH
49659: PPUSH
49660: PPUSH
49661: PPUSH
49662: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
49663: LD_ADDR_VAR 0 13
49667: PUSH
49668: LD_EXP 50
49672: PUSH
49673: LD_VAR 0 1
49677: ARRAY
49678: PPUSH
49679: LD_INT 25
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PPUSH
49689: CALL_OW 72
49693: ST_TO_ADDR
// if mc_remote_driver [ base ] then
49694: LD_EXP 90
49698: PUSH
49699: LD_VAR 0 1
49703: ARRAY
49704: IFFALSE 49728
// mechs := mechs diff mc_remote_driver [ base ] ;
49706: LD_ADDR_VAR 0 13
49710: PUSH
49711: LD_VAR 0 13
49715: PUSH
49716: LD_EXP 90
49720: PUSH
49721: LD_VAR 0 1
49725: ARRAY
49726: DIFF
49727: ST_TO_ADDR
// for i in mechs do
49728: LD_ADDR_VAR 0 5
49732: PUSH
49733: LD_VAR 0 13
49737: PUSH
49738: FOR_IN
49739: IFFALSE 49774
// if GetTag ( i ) > 0 then
49741: LD_VAR 0 5
49745: PPUSH
49746: CALL_OW 110
49750: PUSH
49751: LD_INT 0
49753: GREATER
49754: IFFALSE 49772
// mechs := mechs diff i ;
49756: LD_ADDR_VAR 0 13
49760: PUSH
49761: LD_VAR 0 13
49765: PUSH
49766: LD_VAR 0 5
49770: DIFF
49771: ST_TO_ADDR
49772: GO 49738
49774: POP
49775: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49776: LD_ADDR_VAR 0 9
49780: PUSH
49781: LD_EXP 50
49785: PUSH
49786: LD_VAR 0 1
49790: ARRAY
49791: PPUSH
49792: LD_INT 2
49794: PUSH
49795: LD_INT 25
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 25
49807: PUSH
49808: LD_INT 5
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 25
49817: PUSH
49818: LD_INT 8
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 25
49827: PUSH
49828: LD_INT 9
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: PPUSH
49842: CALL_OW 72
49846: ST_TO_ADDR
// if not defenders and not solds then
49847: LD_VAR 0 2
49851: NOT
49852: PUSH
49853: LD_VAR 0 9
49857: NOT
49858: AND
49859: IFFALSE 49863
// exit ;
49861: GO 51489
// depot_under_attack := false ;
49863: LD_ADDR_VAR 0 17
49867: PUSH
49868: LD_INT 0
49870: ST_TO_ADDR
// sold_defenders := [ ] ;
49871: LD_ADDR_VAR 0 18
49875: PUSH
49876: EMPTY
49877: ST_TO_ADDR
// if mechs then
49878: LD_VAR 0 13
49882: IFFALSE 50011
// for i in defenders do
49884: LD_ADDR_VAR 0 5
49888: PUSH
49889: LD_VAR 0 2
49893: PUSH
49894: FOR_IN
49895: IFFALSE 50009
// begin SetTag ( i , 20 ) ;
49897: LD_VAR 0 5
49901: PPUSH
49902: LD_INT 20
49904: PPUSH
49905: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
49909: LD_VAR 0 5
49913: PPUSH
49914: CALL_OW 263
49918: PUSH
49919: LD_INT 1
49921: EQUAL
49922: PUSH
49923: LD_VAR 0 5
49927: PPUSH
49928: CALL_OW 311
49932: NOT
49933: AND
49934: PUSH
49935: LD_VAR 0 13
49939: AND
49940: IFFALSE 50007
// begin un := mechs [ 1 ] ;
49942: LD_ADDR_VAR 0 11
49946: PUSH
49947: LD_VAR 0 13
49951: PUSH
49952: LD_INT 1
49954: ARRAY
49955: ST_TO_ADDR
// ComExitBuilding ( un ) ;
49956: LD_VAR 0 11
49960: PPUSH
49961: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
49965: LD_VAR 0 11
49969: PPUSH
49970: LD_VAR 0 5
49974: PPUSH
49975: CALL_OW 180
// SetTag ( un , 19 ) ;
49979: LD_VAR 0 11
49983: PPUSH
49984: LD_INT 19
49986: PPUSH
49987: CALL_OW 109
// mechs := mechs diff un ;
49991: LD_ADDR_VAR 0 13
49995: PUSH
49996: LD_VAR 0 13
50000: PUSH
50001: LD_VAR 0 11
50005: DIFF
50006: ST_TO_ADDR
// end ; end ;
50007: GO 49894
50009: POP
50010: POP
// if solds then
50011: LD_VAR 0 9
50015: IFFALSE 50074
// for i in solds do
50017: LD_ADDR_VAR 0 5
50021: PUSH
50022: LD_VAR 0 9
50026: PUSH
50027: FOR_IN
50028: IFFALSE 50072
// if not GetTag ( i ) then
50030: LD_VAR 0 5
50034: PPUSH
50035: CALL_OW 110
50039: NOT
50040: IFFALSE 50070
// begin defenders := defenders union i ;
50042: LD_ADDR_VAR 0 2
50046: PUSH
50047: LD_VAR 0 2
50051: PUSH
50052: LD_VAR 0 5
50056: UNION
50057: ST_TO_ADDR
// SetTag ( i , 18 ) ;
50058: LD_VAR 0 5
50062: PPUSH
50063: LD_INT 18
50065: PPUSH
50066: CALL_OW 109
// end ;
50070: GO 50027
50072: POP
50073: POP
// repeat wait ( 0 0$1 ) ;
50074: LD_INT 35
50076: PPUSH
50077: CALL_OW 67
// enemy := mc_scan [ base ] ;
50081: LD_ADDR_VAR 0 3
50085: PUSH
50086: LD_EXP 73
50090: PUSH
50091: LD_VAR 0 1
50095: ARRAY
50096: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
50097: LD_EXP 50
50101: PUSH
50102: LD_VAR 0 1
50106: ARRAY
50107: NOT
50108: PUSH
50109: LD_EXP 50
50113: PUSH
50114: LD_VAR 0 1
50118: ARRAY
50119: PUSH
50120: EMPTY
50121: EQUAL
50122: OR
50123: IFFALSE 50160
// begin for i in defenders do
50125: LD_ADDR_VAR 0 5
50129: PUSH
50130: LD_VAR 0 2
50134: PUSH
50135: FOR_IN
50136: IFFALSE 50149
// ComStop ( i ) ;
50138: LD_VAR 0 5
50142: PPUSH
50143: CALL_OW 141
50147: GO 50135
50149: POP
50150: POP
// defenders := [ ] ;
50151: LD_ADDR_VAR 0 2
50155: PUSH
50156: EMPTY
50157: ST_TO_ADDR
// exit ;
50158: GO 51489
// end ; for i in defenders do
50160: LD_ADDR_VAR 0 5
50164: PUSH
50165: LD_VAR 0 2
50169: PUSH
50170: FOR_IN
50171: IFFALSE 50989
// begin e := NearestUnitToUnit ( enemy , i ) ;
50173: LD_ADDR_VAR 0 14
50177: PUSH
50178: LD_VAR 0 3
50182: PPUSH
50183: LD_VAR 0 5
50187: PPUSH
50188: CALL_OW 74
50192: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50193: LD_ADDR_VAR 0 8
50197: PUSH
50198: LD_EXP 50
50202: PUSH
50203: LD_VAR 0 1
50207: ARRAY
50208: PPUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 30
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 30
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: LIST
50236: PPUSH
50237: CALL_OW 72
50241: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
50242: LD_ADDR_VAR 0 17
50246: PUSH
50247: LD_VAR 0 8
50251: NOT
50252: PUSH
50253: LD_VAR 0 8
50257: PPUSH
50258: LD_INT 3
50260: PUSH
50261: LD_INT 24
50263: PUSH
50264: LD_INT 600
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PPUSH
50275: CALL_OW 72
50279: OR
50280: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
50281: LD_VAR 0 5
50285: PPUSH
50286: CALL_OW 247
50290: PUSH
50291: LD_INT 2
50293: DOUBLE
50294: EQUAL
50295: IFTRUE 50299
50297: GO 50695
50299: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
50300: LD_VAR 0 5
50304: PPUSH
50305: CALL_OW 256
50309: PUSH
50310: LD_INT 650
50312: GREATER
50313: PUSH
50314: LD_VAR 0 5
50318: PPUSH
50319: LD_VAR 0 14
50323: PPUSH
50324: CALL_OW 296
50328: PUSH
50329: LD_INT 40
50331: LESS
50332: PUSH
50333: LD_VAR 0 14
50337: PPUSH
50338: LD_EXP 75
50342: PUSH
50343: LD_VAR 0 1
50347: ARRAY
50348: PPUSH
50349: CALL_OW 308
50353: OR
50354: AND
50355: IFFALSE 50477
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
50357: LD_VAR 0 5
50361: PPUSH
50362: CALL_OW 262
50366: PUSH
50367: LD_INT 1
50369: EQUAL
50370: PUSH
50371: LD_VAR 0 5
50375: PPUSH
50376: CALL_OW 261
50380: PUSH
50381: LD_INT 30
50383: LESS
50384: AND
50385: PUSH
50386: LD_VAR 0 8
50390: AND
50391: IFFALSE 50461
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
50393: LD_VAR 0 5
50397: PPUSH
50398: LD_VAR 0 8
50402: PPUSH
50403: LD_VAR 0 5
50407: PPUSH
50408: CALL_OW 74
50412: PPUSH
50413: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
50417: LD_VAR 0 5
50421: PPUSH
50422: LD_VAR 0 8
50426: PPUSH
50427: LD_VAR 0 5
50431: PPUSH
50432: CALL_OW 74
50436: PPUSH
50437: CALL_OW 296
50441: PUSH
50442: LD_INT 6
50444: LESS
50445: IFFALSE 50459
// SetFuel ( i , 100 ) ;
50447: LD_VAR 0 5
50451: PPUSH
50452: LD_INT 100
50454: PPUSH
50455: CALL_OW 240
// end else
50459: GO 50475
// ComAttackUnit ( i , e ) ;
50461: LD_VAR 0 5
50465: PPUSH
50466: LD_VAR 0 14
50470: PPUSH
50471: CALL_OW 115
// end else
50475: GO 50578
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
50477: LD_VAR 0 14
50481: PPUSH
50482: LD_EXP 75
50486: PUSH
50487: LD_VAR 0 1
50491: ARRAY
50492: PPUSH
50493: CALL_OW 308
50497: NOT
50498: PUSH
50499: LD_VAR 0 5
50503: PPUSH
50504: LD_VAR 0 14
50508: PPUSH
50509: CALL_OW 296
50513: PUSH
50514: LD_INT 40
50516: GREATEREQUAL
50517: AND
50518: PUSH
50519: LD_VAR 0 5
50523: PPUSH
50524: CALL_OW 256
50528: PUSH
50529: LD_INT 650
50531: LESSEQUAL
50532: OR
50533: PUSH
50534: LD_VAR 0 5
50538: PPUSH
50539: LD_EXP 74
50543: PUSH
50544: LD_VAR 0 1
50548: ARRAY
50549: PPUSH
50550: CALL_OW 308
50554: NOT
50555: AND
50556: IFFALSE 50578
// ComMoveToArea ( i , mc_parking [ base ] ) ;
50558: LD_VAR 0 5
50562: PPUSH
50563: LD_EXP 74
50567: PUSH
50568: LD_VAR 0 1
50572: ARRAY
50573: PPUSH
50574: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
50578: LD_VAR 0 5
50582: PPUSH
50583: CALL_OW 256
50587: PUSH
50588: LD_INT 998
50590: LESS
50591: PUSH
50592: LD_VAR 0 5
50596: PPUSH
50597: CALL_OW 263
50601: PUSH
50602: LD_INT 1
50604: EQUAL
50605: AND
50606: PUSH
50607: LD_VAR 0 5
50611: PPUSH
50612: CALL_OW 311
50616: AND
50617: PUSH
50618: LD_VAR 0 5
50622: PPUSH
50623: LD_EXP 74
50627: PUSH
50628: LD_VAR 0 1
50632: ARRAY
50633: PPUSH
50634: CALL_OW 308
50638: AND
50639: IFFALSE 50693
// begin mech := IsDrivenBy ( i ) ;
50641: LD_ADDR_VAR 0 10
50645: PUSH
50646: LD_VAR 0 5
50650: PPUSH
50651: CALL_OW 311
50655: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
50656: LD_VAR 0 10
50660: PPUSH
50661: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
50665: LD_VAR 0 10
50669: PPUSH
50670: LD_VAR 0 5
50674: PPUSH
50675: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
50679: LD_VAR 0 10
50683: PPUSH
50684: LD_VAR 0 5
50688: PPUSH
50689: CALL_OW 180
// end ; end ; unit_human :
50693: GO 50960
50695: LD_INT 1
50697: DOUBLE
50698: EQUAL
50699: IFTRUE 50703
50701: GO 50959
50703: POP
// begin b := IsInUnit ( i ) ;
50704: LD_ADDR_VAR 0 19
50708: PUSH
50709: LD_VAR 0 5
50713: PPUSH
50714: CALL_OW 310
50718: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
50719: LD_ADDR_VAR 0 20
50723: PUSH
50724: LD_VAR 0 19
50728: NOT
50729: PUSH
50730: LD_VAR 0 19
50734: PPUSH
50735: CALL_OW 266
50739: PUSH
50740: LD_INT 32
50742: PUSH
50743: LD_INT 31
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: IN
50750: OR
50751: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
50752: LD_VAR 0 17
50756: PUSH
50757: LD_VAR 0 2
50761: PPUSH
50762: LD_INT 21
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PPUSH
50772: CALL_OW 72
50776: PUSH
50777: LD_INT 1
50779: LESSEQUAL
50780: OR
50781: PUSH
50782: LD_VAR 0 20
50786: AND
50787: PUSH
50788: LD_VAR 0 5
50792: PUSH
50793: LD_VAR 0 18
50797: IN
50798: NOT
50799: AND
50800: IFFALSE 50893
// begin if b then
50802: LD_VAR 0 19
50806: IFFALSE 50855
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
50808: LD_VAR 0 19
50812: PPUSH
50813: LD_VAR 0 3
50817: PPUSH
50818: LD_VAR 0 19
50822: PPUSH
50823: CALL_OW 74
50827: PPUSH
50828: CALL_OW 296
50832: PUSH
50833: LD_INT 10
50835: LESS
50836: PUSH
50837: LD_VAR 0 19
50841: PPUSH
50842: CALL_OW 461
50846: PUSH
50847: LD_INT 7
50849: NONEQUAL
50850: AND
50851: IFFALSE 50855
// continue ;
50853: GO 50170
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
50855: LD_ADDR_VAR 0 18
50859: PUSH
50860: LD_VAR 0 18
50864: PPUSH
50865: LD_VAR 0 18
50869: PUSH
50870: LD_INT 1
50872: PLUS
50873: PPUSH
50874: LD_VAR 0 5
50878: PPUSH
50879: CALL_OW 1
50883: ST_TO_ADDR
// ComExitBuilding ( i ) ;
50884: LD_VAR 0 5
50888: PPUSH
50889: CALL_OW 122
// end ; if sold_defenders then
50893: LD_VAR 0 18
50897: IFFALSE 50957
// if i in sold_defenders then
50899: LD_VAR 0 5
50903: PUSH
50904: LD_VAR 0 18
50908: IN
50909: IFFALSE 50957
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
50911: LD_VAR 0 5
50915: PPUSH
50916: CALL_OW 314
50920: NOT
50921: PUSH
50922: LD_VAR 0 5
50926: PPUSH
50927: LD_VAR 0 14
50931: PPUSH
50932: CALL_OW 296
50936: PUSH
50937: LD_INT 30
50939: LESS
50940: AND
50941: IFFALSE 50957
// ComAttackUnit ( i , e ) ;
50943: LD_VAR 0 5
50947: PPUSH
50948: LD_VAR 0 14
50952: PPUSH
50953: CALL_OW 115
// end ; end ; end ;
50957: GO 50960
50959: POP
// if IsDead ( i ) then
50960: LD_VAR 0 5
50964: PPUSH
50965: CALL_OW 301
50969: IFFALSE 50987
// defenders := defenders diff i ;
50971: LD_ADDR_VAR 0 2
50975: PUSH
50976: LD_VAR 0 2
50980: PUSH
50981: LD_VAR 0 5
50985: DIFF
50986: ST_TO_ADDR
// end ;
50987: GO 50170
50989: POP
50990: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
50991: LD_VAR 0 3
50995: NOT
50996: PUSH
50997: LD_VAR 0 2
51001: NOT
51002: OR
51003: PUSH
51004: LD_EXP 50
51008: PUSH
51009: LD_VAR 0 1
51013: ARRAY
51014: NOT
51015: OR
51016: IFFALSE 50074
// MC_Reset ( base , 18 ) ;
51018: LD_VAR 0 1
51022: PPUSH
51023: LD_INT 18
51025: PPUSH
51026: CALL 21460 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
51030: LD_ADDR_VAR 0 2
51034: PUSH
51035: LD_VAR 0 2
51039: PUSH
51040: LD_VAR 0 2
51044: PPUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 25
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 25
51060: PUSH
51061: LD_INT 5
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 25
51070: PUSH
51071: LD_INT 8
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 25
51080: PUSH
51081: LD_INT 9
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: PPUSH
51095: CALL_OW 72
51099: DIFF
51100: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
51101: LD_VAR 0 3
51105: NOT
51106: PUSH
51107: LD_VAR 0 2
51111: PPUSH
51112: LD_INT 21
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PPUSH
51122: CALL_OW 72
51126: AND
51127: IFFALSE 51465
// begin tmp := FilterByTag ( defenders , 19 ) ;
51129: LD_ADDR_VAR 0 12
51133: PUSH
51134: LD_VAR 0 2
51138: PPUSH
51139: LD_INT 19
51141: PPUSH
51142: CALL 87928 0 2
51146: ST_TO_ADDR
// if tmp then
51147: LD_VAR 0 12
51151: IFFALSE 51221
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
51153: LD_ADDR_VAR 0 12
51157: PUSH
51158: LD_VAR 0 12
51162: PPUSH
51163: LD_INT 25
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PPUSH
51173: CALL_OW 72
51177: ST_TO_ADDR
// if tmp then
51178: LD_VAR 0 12
51182: IFFALSE 51221
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
51184: LD_ADDR_EXP 62
51188: PUSH
51189: LD_EXP 62
51193: PPUSH
51194: LD_VAR 0 1
51198: PPUSH
51199: LD_EXP 62
51203: PUSH
51204: LD_VAR 0 1
51208: ARRAY
51209: PUSH
51210: LD_VAR 0 12
51214: UNION
51215: PPUSH
51216: CALL_OW 1
51220: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
51221: LD_VAR 0 1
51225: PPUSH
51226: LD_INT 19
51228: PPUSH
51229: CALL 21460 0 2
// repeat wait ( 0 0$1 ) ;
51233: LD_INT 35
51235: PPUSH
51236: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
51240: LD_EXP 50
51244: PUSH
51245: LD_VAR 0 1
51249: ARRAY
51250: NOT
51251: PUSH
51252: LD_EXP 50
51256: PUSH
51257: LD_VAR 0 1
51261: ARRAY
51262: PUSH
51263: EMPTY
51264: EQUAL
51265: OR
51266: IFFALSE 51303
// begin for i in defenders do
51268: LD_ADDR_VAR 0 5
51272: PUSH
51273: LD_VAR 0 2
51277: PUSH
51278: FOR_IN
51279: IFFALSE 51292
// ComStop ( i ) ;
51281: LD_VAR 0 5
51285: PPUSH
51286: CALL_OW 141
51290: GO 51278
51292: POP
51293: POP
// defenders := [ ] ;
51294: LD_ADDR_VAR 0 2
51298: PUSH
51299: EMPTY
51300: ST_TO_ADDR
// exit ;
51301: GO 51489
// end ; for i in defenders do
51303: LD_ADDR_VAR 0 5
51307: PUSH
51308: LD_VAR 0 2
51312: PUSH
51313: FOR_IN
51314: IFFALSE 51403
// begin if not IsInArea ( i , mc_parking [ base ] ) then
51316: LD_VAR 0 5
51320: PPUSH
51321: LD_EXP 74
51325: PUSH
51326: LD_VAR 0 1
51330: ARRAY
51331: PPUSH
51332: CALL_OW 308
51336: NOT
51337: IFFALSE 51361
// ComMoveToArea ( i , mc_parking [ base ] ) else
51339: LD_VAR 0 5
51343: PPUSH
51344: LD_EXP 74
51348: PUSH
51349: LD_VAR 0 1
51353: ARRAY
51354: PPUSH
51355: CALL_OW 113
51359: GO 51401
// if GetControl ( i ) = control_manual then
51361: LD_VAR 0 5
51365: PPUSH
51366: CALL_OW 263
51370: PUSH
51371: LD_INT 1
51373: EQUAL
51374: IFFALSE 51401
// if IsDrivenBy ( i ) then
51376: LD_VAR 0 5
51380: PPUSH
51381: CALL_OW 311
51385: IFFALSE 51401
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
51387: LD_VAR 0 5
51391: PPUSH
51392: CALL_OW 311
51396: PPUSH
51397: CALL_OW 121
// end ;
51401: GO 51313
51403: POP
51404: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
51405: LD_VAR 0 2
51409: PPUSH
51410: LD_INT 95
51412: PUSH
51413: LD_EXP 74
51417: PUSH
51418: LD_VAR 0 1
51422: ARRAY
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PPUSH
51428: CALL_OW 72
51432: PUSH
51433: LD_VAR 0 2
51437: EQUAL
51438: PUSH
51439: LD_EXP 73
51443: PUSH
51444: LD_VAR 0 1
51448: ARRAY
51449: OR
51450: PUSH
51451: LD_EXP 50
51455: PUSH
51456: LD_VAR 0 1
51460: ARRAY
51461: NOT
51462: OR
51463: IFFALSE 51233
// end ; MC_Reset ( base , 19 ) ;
51465: LD_VAR 0 1
51469: PPUSH
51470: LD_INT 19
51472: PPUSH
51473: CALL 21460 0 2
// MC_Reset ( base , 20 ) ;
51477: LD_VAR 0 1
51481: PPUSH
51482: LD_INT 20
51484: PPUSH
51485: CALL 21460 0 2
// end ;
51489: LD_VAR 0 4
51493: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51494: LD_INT 0
51496: PPUSH
51497: PPUSH
51498: PPUSH
51499: PPUSH
// result := false ;
51500: LD_ADDR_VAR 0 2
51504: PUSH
51505: LD_INT 0
51507: ST_TO_ADDR
// side := GetSide ( unit ) ;
51508: LD_ADDR_VAR 0 3
51512: PUSH
51513: LD_VAR 0 1
51517: PPUSH
51518: CALL_OW 255
51522: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51523: LD_ADDR_VAR 0 4
51527: PUSH
51528: LD_VAR 0 1
51532: PPUSH
51533: CALL_OW 248
51537: ST_TO_ADDR
// case nat of 1 :
51538: LD_VAR 0 4
51542: PUSH
51543: LD_INT 1
51545: DOUBLE
51546: EQUAL
51547: IFTRUE 51551
51549: GO 51562
51551: POP
// tech := tech_lassight ; 2 :
51552: LD_ADDR_VAR 0 5
51556: PUSH
51557: LD_INT 12
51559: ST_TO_ADDR
51560: GO 51601
51562: LD_INT 2
51564: DOUBLE
51565: EQUAL
51566: IFTRUE 51570
51568: GO 51581
51570: POP
// tech := tech_mortar ; 3 :
51571: LD_ADDR_VAR 0 5
51575: PUSH
51576: LD_INT 41
51578: ST_TO_ADDR
51579: GO 51601
51581: LD_INT 3
51583: DOUBLE
51584: EQUAL
51585: IFTRUE 51589
51587: GO 51600
51589: POP
// tech := tech_bazooka ; end ;
51590: LD_ADDR_VAR 0 5
51594: PUSH
51595: LD_INT 44
51597: ST_TO_ADDR
51598: GO 51601
51600: POP
// if Researched ( side , tech ) then
51601: LD_VAR 0 3
51605: PPUSH
51606: LD_VAR 0 5
51610: PPUSH
51611: CALL_OW 325
51615: IFFALSE 51642
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51617: LD_ADDR_VAR 0 2
51621: PUSH
51622: LD_INT 5
51624: PUSH
51625: LD_INT 8
51627: PUSH
51628: LD_INT 9
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: PUSH
51636: LD_VAR 0 4
51640: ARRAY
51641: ST_TO_ADDR
// end ;
51642: LD_VAR 0 2
51646: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51647: LD_INT 0
51649: PPUSH
51650: PPUSH
51651: PPUSH
// if not mines then
51652: LD_VAR 0 2
51656: NOT
51657: IFFALSE 51661
// exit ;
51659: GO 51805
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51661: LD_ADDR_VAR 0 5
51665: PUSH
51666: LD_INT 81
51668: PUSH
51669: LD_VAR 0 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 3
51680: PUSH
51681: LD_INT 21
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PPUSH
51699: CALL_OW 69
51703: ST_TO_ADDR
// for i in mines do
51704: LD_ADDR_VAR 0 4
51708: PUSH
51709: LD_VAR 0 2
51713: PUSH
51714: FOR_IN
51715: IFFALSE 51803
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
51717: LD_VAR 0 4
51721: PUSH
51722: LD_INT 1
51724: ARRAY
51725: PPUSH
51726: LD_VAR 0 4
51730: PUSH
51731: LD_INT 2
51733: ARRAY
51734: PPUSH
51735: CALL_OW 458
51739: NOT
51740: IFFALSE 51744
// continue ;
51742: GO 51714
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
51744: LD_VAR 0 4
51748: PUSH
51749: LD_INT 1
51751: ARRAY
51752: PPUSH
51753: LD_VAR 0 4
51757: PUSH
51758: LD_INT 2
51760: ARRAY
51761: PPUSH
51762: CALL_OW 428
51766: PUSH
51767: LD_VAR 0 5
51771: IN
51772: IFFALSE 51801
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
51774: LD_VAR 0 4
51778: PUSH
51779: LD_INT 1
51781: ARRAY
51782: PPUSH
51783: LD_VAR 0 4
51787: PUSH
51788: LD_INT 2
51790: ARRAY
51791: PPUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 456
// end ;
51801: GO 51714
51803: POP
51804: POP
// end ;
51805: LD_VAR 0 3
51809: RET
// export function Count ( array ) ; var i ; begin
51810: LD_INT 0
51812: PPUSH
51813: PPUSH
// result := 0 ;
51814: LD_ADDR_VAR 0 2
51818: PUSH
51819: LD_INT 0
51821: ST_TO_ADDR
// for i in array do
51822: LD_ADDR_VAR 0 3
51826: PUSH
51827: LD_VAR 0 1
51831: PUSH
51832: FOR_IN
51833: IFFALSE 51857
// if i then
51835: LD_VAR 0 3
51839: IFFALSE 51855
// result := result + 1 ;
51841: LD_ADDR_VAR 0 2
51845: PUSH
51846: LD_VAR 0 2
51850: PUSH
51851: LD_INT 1
51853: PLUS
51854: ST_TO_ADDR
51855: GO 51832
51857: POP
51858: POP
// end ;
51859: LD_VAR 0 2
51863: RET
// export function IsEmpty ( building ) ; begin
51864: LD_INT 0
51866: PPUSH
// if not building then
51867: LD_VAR 0 1
51871: NOT
51872: IFFALSE 51876
// exit ;
51874: GO 51919
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
51876: LD_ADDR_VAR 0 2
51880: PUSH
51881: LD_VAR 0 1
51885: PUSH
51886: LD_INT 22
51888: PUSH
51889: LD_VAR 0 1
51893: PPUSH
51894: CALL_OW 255
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 58
51905: PUSH
51906: EMPTY
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PPUSH
51913: CALL_OW 69
51917: IN
51918: ST_TO_ADDR
// end ;
51919: LD_VAR 0 2
51923: RET
// export function IsNotFull ( building ) ; begin
51924: LD_INT 0
51926: PPUSH
// if not building then
51927: LD_VAR 0 1
51931: NOT
51932: IFFALSE 51936
// exit ;
51934: GO 51955
// result := UnitsInside ( building ) < 6 ;
51936: LD_ADDR_VAR 0 2
51940: PUSH
51941: LD_VAR 0 1
51945: PPUSH
51946: CALL_OW 313
51950: PUSH
51951: LD_INT 6
51953: LESS
51954: ST_TO_ADDR
// end ;
51955: LD_VAR 0 2
51959: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
51960: LD_INT 0
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
// tmp := [ ] ;
51966: LD_ADDR_VAR 0 3
51970: PUSH
51971: EMPTY
51972: ST_TO_ADDR
// list := [ ] ;
51973: LD_ADDR_VAR 0 5
51977: PUSH
51978: EMPTY
51979: ST_TO_ADDR
// for i = 16 to 25 do
51980: LD_ADDR_VAR 0 4
51984: PUSH
51985: DOUBLE
51986: LD_INT 16
51988: DEC
51989: ST_TO_ADDR
51990: LD_INT 25
51992: PUSH
51993: FOR_TO
51994: IFFALSE 52067
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
51996: LD_ADDR_VAR 0 3
52000: PUSH
52001: LD_VAR 0 3
52005: PUSH
52006: LD_INT 22
52008: PUSH
52009: LD_VAR 0 1
52013: PPUSH
52014: CALL_OW 255
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 91
52025: PUSH
52026: LD_VAR 0 1
52030: PUSH
52031: LD_INT 6
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 30
52041: PUSH
52042: LD_VAR 0 4
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: PPUSH
52059: CALL_OW 69
52063: ADD
52064: ST_TO_ADDR
52065: GO 51993
52067: POP
52068: POP
// for i = 1 to tmp do
52069: LD_ADDR_VAR 0 4
52073: PUSH
52074: DOUBLE
52075: LD_INT 1
52077: DEC
52078: ST_TO_ADDR
52079: LD_VAR 0 3
52083: PUSH
52084: FOR_TO
52085: IFFALSE 52173
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52087: LD_ADDR_VAR 0 5
52091: PUSH
52092: LD_VAR 0 5
52096: PUSH
52097: LD_VAR 0 3
52101: PUSH
52102: LD_VAR 0 4
52106: ARRAY
52107: PPUSH
52108: CALL_OW 266
52112: PUSH
52113: LD_VAR 0 3
52117: PUSH
52118: LD_VAR 0 4
52122: ARRAY
52123: PPUSH
52124: CALL_OW 250
52128: PUSH
52129: LD_VAR 0 3
52133: PUSH
52134: LD_VAR 0 4
52138: ARRAY
52139: PPUSH
52140: CALL_OW 251
52144: PUSH
52145: LD_VAR 0 3
52149: PUSH
52150: LD_VAR 0 4
52154: ARRAY
52155: PPUSH
52156: CALL_OW 254
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: ADD
52170: ST_TO_ADDR
52171: GO 52084
52173: POP
52174: POP
// result := list ;
52175: LD_ADDR_VAR 0 2
52179: PUSH
52180: LD_VAR 0 5
52184: ST_TO_ADDR
// end ;
52185: LD_VAR 0 2
52189: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52190: LD_INT 0
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
// if not factory then
52199: LD_VAR 0 1
52203: NOT
52204: IFFALSE 52208
// exit ;
52206: GO 52801
// if control = control_apeman then
52208: LD_VAR 0 4
52212: PUSH
52213: LD_INT 5
52215: EQUAL
52216: IFFALSE 52325
// begin tmp := UnitsInside ( factory ) ;
52218: LD_ADDR_VAR 0 8
52222: PUSH
52223: LD_VAR 0 1
52227: PPUSH
52228: CALL_OW 313
52232: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52233: LD_VAR 0 8
52237: PPUSH
52238: LD_INT 25
52240: PUSH
52241: LD_INT 12
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PPUSH
52248: CALL_OW 72
52252: NOT
52253: IFFALSE 52263
// control := control_manual ;
52255: LD_ADDR_VAR 0 4
52259: PUSH
52260: LD_INT 1
52262: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52263: LD_ADDR_VAR 0 8
52267: PUSH
52268: LD_VAR 0 1
52272: PPUSH
52273: CALL 51960 0 1
52277: ST_TO_ADDR
// if tmp then
52278: LD_VAR 0 8
52282: IFFALSE 52325
// begin for i in tmp do
52284: LD_ADDR_VAR 0 7
52288: PUSH
52289: LD_VAR 0 8
52293: PUSH
52294: FOR_IN
52295: IFFALSE 52323
// if i [ 1 ] = b_ext_radio then
52297: LD_VAR 0 7
52301: PUSH
52302: LD_INT 1
52304: ARRAY
52305: PUSH
52306: LD_INT 22
52308: EQUAL
52309: IFFALSE 52321
// begin control := control_remote ;
52311: LD_ADDR_VAR 0 4
52315: PUSH
52316: LD_INT 2
52318: ST_TO_ADDR
// break ;
52319: GO 52323
// end ;
52321: GO 52294
52323: POP
52324: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52325: LD_VAR 0 1
52329: PPUSH
52330: LD_VAR 0 2
52334: PPUSH
52335: LD_VAR 0 3
52339: PPUSH
52340: LD_VAR 0 4
52344: PPUSH
52345: LD_VAR 0 5
52349: PPUSH
52350: CALL_OW 448
52354: IFFALSE 52389
// begin result := [ chassis , engine , control , weapon ] ;
52356: LD_ADDR_VAR 0 6
52360: PUSH
52361: LD_VAR 0 2
52365: PUSH
52366: LD_VAR 0 3
52370: PUSH
52371: LD_VAR 0 4
52375: PUSH
52376: LD_VAR 0 5
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// exit ;
52387: GO 52801
// end ; _chassis := AvailableChassisList ( factory ) ;
52389: LD_ADDR_VAR 0 9
52393: PUSH
52394: LD_VAR 0 1
52398: PPUSH
52399: CALL_OW 475
52403: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52404: LD_ADDR_VAR 0 11
52408: PUSH
52409: LD_VAR 0 1
52413: PPUSH
52414: CALL_OW 476
52418: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52419: LD_ADDR_VAR 0 12
52423: PUSH
52424: LD_VAR 0 1
52428: PPUSH
52429: CALL_OW 477
52433: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52434: LD_ADDR_VAR 0 10
52438: PUSH
52439: LD_VAR 0 1
52443: PPUSH
52444: CALL_OW 478
52448: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52449: LD_VAR 0 9
52453: NOT
52454: PUSH
52455: LD_VAR 0 11
52459: NOT
52460: OR
52461: PUSH
52462: LD_VAR 0 12
52466: NOT
52467: OR
52468: PUSH
52469: LD_VAR 0 10
52473: NOT
52474: OR
52475: IFFALSE 52510
// begin result := [ chassis , engine , control , weapon ] ;
52477: LD_ADDR_VAR 0 6
52481: PUSH
52482: LD_VAR 0 2
52486: PUSH
52487: LD_VAR 0 3
52491: PUSH
52492: LD_VAR 0 4
52496: PUSH
52497: LD_VAR 0 5
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// exit ;
52508: GO 52801
// end ; if not chassis in _chassis then
52510: LD_VAR 0 2
52514: PUSH
52515: LD_VAR 0 9
52519: IN
52520: NOT
52521: IFFALSE 52547
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
52523: LD_ADDR_VAR 0 2
52527: PUSH
52528: LD_VAR 0 9
52532: PUSH
52533: LD_INT 1
52535: PPUSH
52536: LD_VAR 0 9
52540: PPUSH
52541: CALL_OW 12
52545: ARRAY
52546: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
52547: LD_VAR 0 2
52551: PPUSH
52552: LD_VAR 0 3
52556: PPUSH
52557: CALL 52806 0 2
52561: NOT
52562: IFFALSE 52621
// repeat engine := _engine [ 1 ] ;
52564: LD_ADDR_VAR 0 3
52568: PUSH
52569: LD_VAR 0 11
52573: PUSH
52574: LD_INT 1
52576: ARRAY
52577: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
52578: LD_ADDR_VAR 0 11
52582: PUSH
52583: LD_VAR 0 11
52587: PPUSH
52588: LD_INT 1
52590: PPUSH
52591: CALL_OW 3
52595: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
52596: LD_VAR 0 2
52600: PPUSH
52601: LD_VAR 0 3
52605: PPUSH
52606: CALL 52806 0 2
52610: PUSH
52611: LD_VAR 0 11
52615: PUSH
52616: EMPTY
52617: EQUAL
52618: OR
52619: IFFALSE 52564
// if not control in _control then
52621: LD_VAR 0 4
52625: PUSH
52626: LD_VAR 0 12
52630: IN
52631: NOT
52632: IFFALSE 52658
// control := _control [ rand ( 1 , _control ) ] ;
52634: LD_ADDR_VAR 0 4
52638: PUSH
52639: LD_VAR 0 12
52643: PUSH
52644: LD_INT 1
52646: PPUSH
52647: LD_VAR 0 12
52651: PPUSH
52652: CALL_OW 12
52656: ARRAY
52657: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
52658: LD_VAR 0 2
52662: PPUSH
52663: LD_VAR 0 5
52667: PPUSH
52668: CALL 53026 0 2
52672: NOT
52673: IFFALSE 52732
// repeat weapon := _weapon [ 1 ] ;
52675: LD_ADDR_VAR 0 5
52679: PUSH
52680: LD_VAR 0 10
52684: PUSH
52685: LD_INT 1
52687: ARRAY
52688: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
52689: LD_ADDR_VAR 0 10
52693: PUSH
52694: LD_VAR 0 10
52698: PPUSH
52699: LD_INT 1
52701: PPUSH
52702: CALL_OW 3
52706: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
52707: LD_VAR 0 2
52711: PPUSH
52712: LD_VAR 0 5
52716: PPUSH
52717: CALL 53026 0 2
52721: PUSH
52722: LD_VAR 0 10
52726: PUSH
52727: EMPTY
52728: EQUAL
52729: OR
52730: IFFALSE 52675
// result := [ ] ;
52732: LD_ADDR_VAR 0 6
52736: PUSH
52737: EMPTY
52738: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52739: LD_VAR 0 1
52743: PPUSH
52744: LD_VAR 0 2
52748: PPUSH
52749: LD_VAR 0 3
52753: PPUSH
52754: LD_VAR 0 4
52758: PPUSH
52759: LD_VAR 0 5
52763: PPUSH
52764: CALL_OW 448
52768: IFFALSE 52801
// result := [ chassis , engine , control , weapon ] ;
52770: LD_ADDR_VAR 0 6
52774: PUSH
52775: LD_VAR 0 2
52779: PUSH
52780: LD_VAR 0 3
52784: PUSH
52785: LD_VAR 0 4
52789: PUSH
52790: LD_VAR 0 5
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// end ;
52801: LD_VAR 0 6
52805: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
52806: LD_INT 0
52808: PPUSH
// if not chassis or not engine then
52809: LD_VAR 0 1
52813: NOT
52814: PUSH
52815: LD_VAR 0 2
52819: NOT
52820: OR
52821: IFFALSE 52825
// exit ;
52823: GO 53021
// case engine of engine_solar :
52825: LD_VAR 0 2
52829: PUSH
52830: LD_INT 2
52832: DOUBLE
52833: EQUAL
52834: IFTRUE 52838
52836: GO 52876
52838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
52839: LD_ADDR_VAR 0 3
52843: PUSH
52844: LD_INT 11
52846: PUSH
52847: LD_INT 12
52849: PUSH
52850: LD_INT 13
52852: PUSH
52853: LD_INT 14
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
52874: GO 53005
52876: LD_INT 1
52878: DOUBLE
52879: EQUAL
52880: IFTRUE 52884
52882: GO 52946
52884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
52885: LD_ADDR_VAR 0 3
52889: PUSH
52890: LD_INT 11
52892: PUSH
52893: LD_INT 12
52895: PUSH
52896: LD_INT 13
52898: PUSH
52899: LD_INT 14
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: LD_INT 4
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: LD_INT 21
52919: PUSH
52920: LD_INT 23
52922: PUSH
52923: LD_INT 22
52925: PUSH
52926: LD_INT 24
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: ST_TO_ADDR
52944: GO 53005
52946: LD_INT 3
52948: DOUBLE
52949: EQUAL
52950: IFTRUE 52954
52952: GO 53004
52954: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52955: LD_ADDR_VAR 0 3
52959: PUSH
52960: LD_INT 13
52962: PUSH
52963: LD_INT 14
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 4
52974: PUSH
52975: LD_INT 5
52977: PUSH
52978: LD_INT 21
52980: PUSH
52981: LD_INT 22
52983: PUSH
52984: LD_INT 23
52986: PUSH
52987: LD_INT 24
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: ST_TO_ADDR
53002: GO 53005
53004: POP
// result := ( chassis in result ) ;
53005: LD_ADDR_VAR 0 3
53009: PUSH
53010: LD_VAR 0 1
53014: PUSH
53015: LD_VAR 0 3
53019: IN
53020: ST_TO_ADDR
// end ;
53021: LD_VAR 0 3
53025: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53026: LD_INT 0
53028: PPUSH
// if not chassis or not weapon then
53029: LD_VAR 0 1
53033: NOT
53034: PUSH
53035: LD_VAR 0 2
53039: NOT
53040: OR
53041: IFFALSE 53045
// exit ;
53043: GO 54071
// case weapon of us_machine_gun :
53045: LD_VAR 0 2
53049: PUSH
53050: LD_INT 2
53052: DOUBLE
53053: EQUAL
53054: IFTRUE 53058
53056: GO 53088
53058: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53059: LD_ADDR_VAR 0 3
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 4
53075: PUSH
53076: LD_INT 5
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: ST_TO_ADDR
53086: GO 54055
53088: LD_INT 3
53090: DOUBLE
53091: EQUAL
53092: IFTRUE 53096
53094: GO 53126
53096: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53097: LD_ADDR_VAR 0 3
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: LD_INT 5
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: ST_TO_ADDR
53124: GO 54055
53126: LD_INT 11
53128: DOUBLE
53129: EQUAL
53130: IFTRUE 53134
53132: GO 53164
53134: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53135: LD_ADDR_VAR 0 3
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: LD_INT 4
53151: PUSH
53152: LD_INT 5
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
53162: GO 54055
53164: LD_INT 4
53166: DOUBLE
53167: EQUAL
53168: IFTRUE 53172
53170: GO 53198
53172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53173: LD_ADDR_VAR 0 3
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: LD_INT 5
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: ST_TO_ADDR
53196: GO 54055
53198: LD_INT 5
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53206
53204: GO 53232
53206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53207: LD_ADDR_VAR 0 3
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: LD_INT 4
53220: PUSH
53221: LD_INT 5
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
53230: GO 54055
53232: LD_INT 9
53234: DOUBLE
53235: EQUAL
53236: IFTRUE 53240
53238: GO 53266
53240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53241: LD_ADDR_VAR 0 3
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: LD_INT 4
53254: PUSH
53255: LD_INT 5
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: ST_TO_ADDR
53264: GO 54055
53266: LD_INT 7
53268: DOUBLE
53269: EQUAL
53270: IFTRUE 53274
53272: GO 53300
53274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53275: LD_ADDR_VAR 0 3
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: LD_INT 4
53288: PUSH
53289: LD_INT 5
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: ST_TO_ADDR
53298: GO 54055
53300: LD_INT 12
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53308
53306: GO 53334
53308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53309: LD_ADDR_VAR 0 3
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: LD_INT 5
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: ST_TO_ADDR
53332: GO 54055
53334: LD_INT 13
53336: DOUBLE
53337: EQUAL
53338: IFTRUE 53342
53340: GO 53368
53342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53343: LD_ADDR_VAR 0 3
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: LD_INT 4
53356: PUSH
53357: LD_INT 5
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: ST_TO_ADDR
53366: GO 54055
53368: LD_INT 14
53370: DOUBLE
53371: EQUAL
53372: IFTRUE 53376
53374: GO 53394
53376: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53377: LD_ADDR_VAR 0 3
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: LD_INT 5
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: ST_TO_ADDR
53392: GO 54055
53394: LD_INT 6
53396: DOUBLE
53397: EQUAL
53398: IFTRUE 53402
53400: GO 53420
53402: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53403: LD_ADDR_VAR 0 3
53407: PUSH
53408: LD_INT 4
53410: PUSH
53411: LD_INT 5
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: ST_TO_ADDR
53418: GO 54055
53420: LD_INT 10
53422: DOUBLE
53423: EQUAL
53424: IFTRUE 53428
53426: GO 53446
53428: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53429: LD_ADDR_VAR 0 3
53433: PUSH
53434: LD_INT 4
53436: PUSH
53437: LD_INT 5
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: ST_TO_ADDR
53444: GO 54055
53446: LD_INT 22
53448: DOUBLE
53449: EQUAL
53450: IFTRUE 53454
53452: GO 53480
53454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53455: LD_ADDR_VAR 0 3
53459: PUSH
53460: LD_INT 11
53462: PUSH
53463: LD_INT 12
53465: PUSH
53466: LD_INT 13
53468: PUSH
53469: LD_INT 14
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
53478: GO 54055
53480: LD_INT 23
53482: DOUBLE
53483: EQUAL
53484: IFTRUE 53488
53486: GO 53514
53488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53489: LD_ADDR_VAR 0 3
53493: PUSH
53494: LD_INT 11
53496: PUSH
53497: LD_INT 12
53499: PUSH
53500: LD_INT 13
53502: PUSH
53503: LD_INT 14
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
53512: GO 54055
53514: LD_INT 24
53516: DOUBLE
53517: EQUAL
53518: IFTRUE 53522
53520: GO 53548
53522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
53523: LD_ADDR_VAR 0 3
53527: PUSH
53528: LD_INT 11
53530: PUSH
53531: LD_INT 12
53533: PUSH
53534: LD_INT 13
53536: PUSH
53537: LD_INT 14
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
53546: GO 54055
53548: LD_INT 30
53550: DOUBLE
53551: EQUAL
53552: IFTRUE 53556
53554: GO 53582
53556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
53557: LD_ADDR_VAR 0 3
53561: PUSH
53562: LD_INT 11
53564: PUSH
53565: LD_INT 12
53567: PUSH
53568: LD_INT 13
53570: PUSH
53571: LD_INT 14
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: ST_TO_ADDR
53580: GO 54055
53582: LD_INT 25
53584: DOUBLE
53585: EQUAL
53586: IFTRUE 53590
53588: GO 53608
53590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
53591: LD_ADDR_VAR 0 3
53595: PUSH
53596: LD_INT 13
53598: PUSH
53599: LD_INT 14
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: ST_TO_ADDR
53606: GO 54055
53608: LD_INT 27
53610: DOUBLE
53611: EQUAL
53612: IFTRUE 53616
53614: GO 53634
53616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
53617: LD_ADDR_VAR 0 3
53621: PUSH
53622: LD_INT 13
53624: PUSH
53625: LD_INT 14
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: ST_TO_ADDR
53632: GO 54055
53634: LD_INT 28
53636: DOUBLE
53637: EQUAL
53638: IFTRUE 53642
53640: GO 53660
53642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
53643: LD_ADDR_VAR 0 3
53647: PUSH
53648: LD_INT 13
53650: PUSH
53651: LD_INT 14
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: ST_TO_ADDR
53658: GO 54055
53660: LD_INT 29
53662: DOUBLE
53663: EQUAL
53664: IFTRUE 53668
53666: GO 53686
53668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
53669: LD_ADDR_VAR 0 3
53673: PUSH
53674: LD_INT 13
53676: PUSH
53677: LD_INT 14
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: ST_TO_ADDR
53684: GO 54055
53686: LD_INT 31
53688: DOUBLE
53689: EQUAL
53690: IFTRUE 53694
53692: GO 53712
53694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
53695: LD_ADDR_VAR 0 3
53699: PUSH
53700: LD_INT 13
53702: PUSH
53703: LD_INT 14
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: ST_TO_ADDR
53710: GO 54055
53712: LD_INT 26
53714: DOUBLE
53715: EQUAL
53716: IFTRUE 53720
53718: GO 53738
53720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
53721: LD_ADDR_VAR 0 3
53725: PUSH
53726: LD_INT 13
53728: PUSH
53729: LD_INT 14
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: ST_TO_ADDR
53736: GO 54055
53738: LD_INT 42
53740: DOUBLE
53741: EQUAL
53742: IFTRUE 53746
53744: GO 53772
53746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
53747: LD_ADDR_VAR 0 3
53751: PUSH
53752: LD_INT 21
53754: PUSH
53755: LD_INT 22
53757: PUSH
53758: LD_INT 23
53760: PUSH
53761: LD_INT 24
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: ST_TO_ADDR
53770: GO 54055
53772: LD_INT 43
53774: DOUBLE
53775: EQUAL
53776: IFTRUE 53780
53778: GO 53806
53780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
53781: LD_ADDR_VAR 0 3
53785: PUSH
53786: LD_INT 21
53788: PUSH
53789: LD_INT 22
53791: PUSH
53792: LD_INT 23
53794: PUSH
53795: LD_INT 24
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
53804: GO 54055
53806: LD_INT 44
53808: DOUBLE
53809: EQUAL
53810: IFTRUE 53814
53812: GO 53840
53814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
53815: LD_ADDR_VAR 0 3
53819: PUSH
53820: LD_INT 21
53822: PUSH
53823: LD_INT 22
53825: PUSH
53826: LD_INT 23
53828: PUSH
53829: LD_INT 24
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
53838: GO 54055
53840: LD_INT 45
53842: DOUBLE
53843: EQUAL
53844: IFTRUE 53848
53846: GO 53874
53848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
53849: LD_ADDR_VAR 0 3
53853: PUSH
53854: LD_INT 21
53856: PUSH
53857: LD_INT 22
53859: PUSH
53860: LD_INT 23
53862: PUSH
53863: LD_INT 24
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: ST_TO_ADDR
53872: GO 54055
53874: LD_INT 49
53876: DOUBLE
53877: EQUAL
53878: IFTRUE 53882
53880: GO 53908
53882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
53883: LD_ADDR_VAR 0 3
53887: PUSH
53888: LD_INT 21
53890: PUSH
53891: LD_INT 22
53893: PUSH
53894: LD_INT 23
53896: PUSH
53897: LD_INT 24
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: ST_TO_ADDR
53906: GO 54055
53908: LD_INT 51
53910: DOUBLE
53911: EQUAL
53912: IFTRUE 53916
53914: GO 53942
53916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
53917: LD_ADDR_VAR 0 3
53921: PUSH
53922: LD_INT 21
53924: PUSH
53925: LD_INT 22
53927: PUSH
53928: LD_INT 23
53930: PUSH
53931: LD_INT 24
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: ST_TO_ADDR
53940: GO 54055
53942: LD_INT 52
53944: DOUBLE
53945: EQUAL
53946: IFTRUE 53950
53948: GO 53976
53950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
53951: LD_ADDR_VAR 0 3
53955: PUSH
53956: LD_INT 21
53958: PUSH
53959: LD_INT 22
53961: PUSH
53962: LD_INT 23
53964: PUSH
53965: LD_INT 24
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: ST_TO_ADDR
53974: GO 54055
53976: LD_INT 53
53978: DOUBLE
53979: EQUAL
53980: IFTRUE 53984
53982: GO 54002
53984: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
53985: LD_ADDR_VAR 0 3
53989: PUSH
53990: LD_INT 23
53992: PUSH
53993: LD_INT 24
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: ST_TO_ADDR
54000: GO 54055
54002: LD_INT 46
54004: DOUBLE
54005: EQUAL
54006: IFTRUE 54010
54008: GO 54028
54010: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54011: LD_ADDR_VAR 0 3
54015: PUSH
54016: LD_INT 23
54018: PUSH
54019: LD_INT 24
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: ST_TO_ADDR
54026: GO 54055
54028: LD_INT 47
54030: DOUBLE
54031: EQUAL
54032: IFTRUE 54036
54034: GO 54054
54036: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54037: LD_ADDR_VAR 0 3
54041: PUSH
54042: LD_INT 23
54044: PUSH
54045: LD_INT 24
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: ST_TO_ADDR
54052: GO 54055
54054: POP
// result := ( chassis in result ) ;
54055: LD_ADDR_VAR 0 3
54059: PUSH
54060: LD_VAR 0 1
54064: PUSH
54065: LD_VAR 0 3
54069: IN
54070: ST_TO_ADDR
// end ;
54071: LD_VAR 0 3
54075: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54076: LD_INT 0
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
// result := array ;
54085: LD_ADDR_VAR 0 5
54089: PUSH
54090: LD_VAR 0 1
54094: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54095: LD_VAR 0 1
54099: NOT
54100: PUSH
54101: LD_VAR 0 2
54105: NOT
54106: OR
54107: PUSH
54108: LD_VAR 0 3
54112: NOT
54113: OR
54114: PUSH
54115: LD_VAR 0 2
54119: PUSH
54120: LD_VAR 0 1
54124: GREATER
54125: OR
54126: PUSH
54127: LD_VAR 0 3
54131: PUSH
54132: LD_VAR 0 1
54136: GREATER
54137: OR
54138: IFFALSE 54142
// exit ;
54140: GO 54438
// if direction then
54142: LD_VAR 0 4
54146: IFFALSE 54210
// begin d := 1 ;
54148: LD_ADDR_VAR 0 9
54152: PUSH
54153: LD_INT 1
54155: ST_TO_ADDR
// if i_from > i_to then
54156: LD_VAR 0 2
54160: PUSH
54161: LD_VAR 0 3
54165: GREATER
54166: IFFALSE 54192
// length := ( array - i_from ) + i_to else
54168: LD_ADDR_VAR 0 11
54172: PUSH
54173: LD_VAR 0 1
54177: PUSH
54178: LD_VAR 0 2
54182: MINUS
54183: PUSH
54184: LD_VAR 0 3
54188: PLUS
54189: ST_TO_ADDR
54190: GO 54208
// length := i_to - i_from ;
54192: LD_ADDR_VAR 0 11
54196: PUSH
54197: LD_VAR 0 3
54201: PUSH
54202: LD_VAR 0 2
54206: MINUS
54207: ST_TO_ADDR
// end else
54208: GO 54271
// begin d := - 1 ;
54210: LD_ADDR_VAR 0 9
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: ST_TO_ADDR
// if i_from > i_to then
54219: LD_VAR 0 2
54223: PUSH
54224: LD_VAR 0 3
54228: GREATER
54229: IFFALSE 54249
// length := i_from - i_to else
54231: LD_ADDR_VAR 0 11
54235: PUSH
54236: LD_VAR 0 2
54240: PUSH
54241: LD_VAR 0 3
54245: MINUS
54246: ST_TO_ADDR
54247: GO 54271
// length := ( array - i_to ) + i_from ;
54249: LD_ADDR_VAR 0 11
54253: PUSH
54254: LD_VAR 0 1
54258: PUSH
54259: LD_VAR 0 3
54263: MINUS
54264: PUSH
54265: LD_VAR 0 2
54269: PLUS
54270: ST_TO_ADDR
// end ; if not length then
54271: LD_VAR 0 11
54275: NOT
54276: IFFALSE 54280
// exit ;
54278: GO 54438
// tmp := array ;
54280: LD_ADDR_VAR 0 10
54284: PUSH
54285: LD_VAR 0 1
54289: ST_TO_ADDR
// for i = 1 to length do
54290: LD_ADDR_VAR 0 6
54294: PUSH
54295: DOUBLE
54296: LD_INT 1
54298: DEC
54299: ST_TO_ADDR
54300: LD_VAR 0 11
54304: PUSH
54305: FOR_TO
54306: IFFALSE 54426
// begin for j = 1 to array do
54308: LD_ADDR_VAR 0 7
54312: PUSH
54313: DOUBLE
54314: LD_INT 1
54316: DEC
54317: ST_TO_ADDR
54318: LD_VAR 0 1
54322: PUSH
54323: FOR_TO
54324: IFFALSE 54412
// begin k := j + d ;
54326: LD_ADDR_VAR 0 8
54330: PUSH
54331: LD_VAR 0 7
54335: PUSH
54336: LD_VAR 0 9
54340: PLUS
54341: ST_TO_ADDR
// if k > array then
54342: LD_VAR 0 8
54346: PUSH
54347: LD_VAR 0 1
54351: GREATER
54352: IFFALSE 54362
// k := 1 ;
54354: LD_ADDR_VAR 0 8
54358: PUSH
54359: LD_INT 1
54361: ST_TO_ADDR
// if not k then
54362: LD_VAR 0 8
54366: NOT
54367: IFFALSE 54379
// k := array ;
54369: LD_ADDR_VAR 0 8
54373: PUSH
54374: LD_VAR 0 1
54378: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54379: LD_ADDR_VAR 0 10
54383: PUSH
54384: LD_VAR 0 10
54388: PPUSH
54389: LD_VAR 0 8
54393: PPUSH
54394: LD_VAR 0 1
54398: PUSH
54399: LD_VAR 0 7
54403: ARRAY
54404: PPUSH
54405: CALL_OW 1
54409: ST_TO_ADDR
// end ;
54410: GO 54323
54412: POP
54413: POP
// array := tmp ;
54414: LD_ADDR_VAR 0 1
54418: PUSH
54419: LD_VAR 0 10
54423: ST_TO_ADDR
// end ;
54424: GO 54305
54426: POP
54427: POP
// result := array ;
54428: LD_ADDR_VAR 0 5
54432: PUSH
54433: LD_VAR 0 1
54437: ST_TO_ADDR
// end ;
54438: LD_VAR 0 5
54442: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54443: LD_INT 0
54445: PPUSH
54446: PPUSH
// result := 0 ;
54447: LD_ADDR_VAR 0 3
54451: PUSH
54452: LD_INT 0
54454: ST_TO_ADDR
// if not array or not value in array then
54455: LD_VAR 0 1
54459: NOT
54460: PUSH
54461: LD_VAR 0 2
54465: PUSH
54466: LD_VAR 0 1
54470: IN
54471: NOT
54472: OR
54473: IFFALSE 54477
// exit ;
54475: GO 54531
// for i = 1 to array do
54477: LD_ADDR_VAR 0 4
54481: PUSH
54482: DOUBLE
54483: LD_INT 1
54485: DEC
54486: ST_TO_ADDR
54487: LD_VAR 0 1
54491: PUSH
54492: FOR_TO
54493: IFFALSE 54529
// if value = array [ i ] then
54495: LD_VAR 0 2
54499: PUSH
54500: LD_VAR 0 1
54504: PUSH
54505: LD_VAR 0 4
54509: ARRAY
54510: EQUAL
54511: IFFALSE 54527
// begin result := i ;
54513: LD_ADDR_VAR 0 3
54517: PUSH
54518: LD_VAR 0 4
54522: ST_TO_ADDR
// exit ;
54523: POP
54524: POP
54525: GO 54531
// end ;
54527: GO 54492
54529: POP
54530: POP
// end ;
54531: LD_VAR 0 3
54535: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
54536: LD_INT 0
54538: PPUSH
// vc_chassis := chassis ;
54539: LD_ADDR_OWVAR 37
54543: PUSH
54544: LD_VAR 0 1
54548: ST_TO_ADDR
// vc_engine := engine ;
54549: LD_ADDR_OWVAR 39
54553: PUSH
54554: LD_VAR 0 2
54558: ST_TO_ADDR
// vc_control := control ;
54559: LD_ADDR_OWVAR 38
54563: PUSH
54564: LD_VAR 0 3
54568: ST_TO_ADDR
// vc_weapon := weapon ;
54569: LD_ADDR_OWVAR 40
54573: PUSH
54574: LD_VAR 0 4
54578: ST_TO_ADDR
// vc_fuel_battery := fuel ;
54579: LD_ADDR_OWVAR 41
54583: PUSH
54584: LD_VAR 0 5
54588: ST_TO_ADDR
// end ;
54589: LD_VAR 0 6
54593: RET
// export function WantPlant ( unit ) ; var task ; begin
54594: LD_INT 0
54596: PPUSH
54597: PPUSH
// result := false ;
54598: LD_ADDR_VAR 0 2
54602: PUSH
54603: LD_INT 0
54605: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
54606: LD_ADDR_VAR 0 3
54610: PUSH
54611: LD_VAR 0 1
54615: PPUSH
54616: CALL_OW 437
54620: ST_TO_ADDR
// if task then
54621: LD_VAR 0 3
54625: IFFALSE 54653
// if task [ 1 ] [ 1 ] = p then
54627: LD_VAR 0 3
54631: PUSH
54632: LD_INT 1
54634: ARRAY
54635: PUSH
54636: LD_INT 1
54638: ARRAY
54639: PUSH
54640: LD_STRING p
54642: EQUAL
54643: IFFALSE 54653
// result := true ;
54645: LD_ADDR_VAR 0 2
54649: PUSH
54650: LD_INT 1
54652: ST_TO_ADDR
// end ;
54653: LD_VAR 0 2
54657: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
54658: LD_INT 0
54660: PPUSH
54661: PPUSH
54662: PPUSH
54663: PPUSH
// if pos < 1 then
54664: LD_VAR 0 2
54668: PUSH
54669: LD_INT 1
54671: LESS
54672: IFFALSE 54676
// exit ;
54674: GO 54979
// if pos = 1 then
54676: LD_VAR 0 2
54680: PUSH
54681: LD_INT 1
54683: EQUAL
54684: IFFALSE 54717
// result := Replace ( arr , pos [ 1 ] , value ) else
54686: LD_ADDR_VAR 0 4
54690: PUSH
54691: LD_VAR 0 1
54695: PPUSH
54696: LD_VAR 0 2
54700: PUSH
54701: LD_INT 1
54703: ARRAY
54704: PPUSH
54705: LD_VAR 0 3
54709: PPUSH
54710: CALL_OW 1
54714: ST_TO_ADDR
54715: GO 54979
// begin tmp := arr ;
54717: LD_ADDR_VAR 0 6
54721: PUSH
54722: LD_VAR 0 1
54726: ST_TO_ADDR
// s_arr := [ tmp ] ;
54727: LD_ADDR_VAR 0 7
54731: PUSH
54732: LD_VAR 0 6
54736: PUSH
54737: EMPTY
54738: LIST
54739: ST_TO_ADDR
// for i = 1 to pos - 1 do
54740: LD_ADDR_VAR 0 5
54744: PUSH
54745: DOUBLE
54746: LD_INT 1
54748: DEC
54749: ST_TO_ADDR
54750: LD_VAR 0 2
54754: PUSH
54755: LD_INT 1
54757: MINUS
54758: PUSH
54759: FOR_TO
54760: IFFALSE 54805
// begin tmp := tmp [ pos [ i ] ] ;
54762: LD_ADDR_VAR 0 6
54766: PUSH
54767: LD_VAR 0 6
54771: PUSH
54772: LD_VAR 0 2
54776: PUSH
54777: LD_VAR 0 5
54781: ARRAY
54782: ARRAY
54783: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
54784: LD_ADDR_VAR 0 7
54788: PUSH
54789: LD_VAR 0 7
54793: PUSH
54794: LD_VAR 0 6
54798: PUSH
54799: EMPTY
54800: LIST
54801: ADD
54802: ST_TO_ADDR
// end ;
54803: GO 54759
54805: POP
54806: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
54807: LD_ADDR_VAR 0 6
54811: PUSH
54812: LD_VAR 0 6
54816: PPUSH
54817: LD_VAR 0 2
54821: PUSH
54822: LD_VAR 0 2
54826: ARRAY
54827: PPUSH
54828: LD_VAR 0 3
54832: PPUSH
54833: CALL_OW 1
54837: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
54838: LD_ADDR_VAR 0 7
54842: PUSH
54843: LD_VAR 0 7
54847: PPUSH
54848: LD_VAR 0 7
54852: PPUSH
54853: LD_VAR 0 6
54857: PPUSH
54858: CALL_OW 1
54862: ST_TO_ADDR
// for i = s_arr downto 2 do
54863: LD_ADDR_VAR 0 5
54867: PUSH
54868: DOUBLE
54869: LD_VAR 0 7
54873: INC
54874: ST_TO_ADDR
54875: LD_INT 2
54877: PUSH
54878: FOR_DOWNTO
54879: IFFALSE 54963
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
54881: LD_ADDR_VAR 0 6
54885: PUSH
54886: LD_VAR 0 7
54890: PUSH
54891: LD_VAR 0 5
54895: PUSH
54896: LD_INT 1
54898: MINUS
54899: ARRAY
54900: PPUSH
54901: LD_VAR 0 2
54905: PUSH
54906: LD_VAR 0 5
54910: PUSH
54911: LD_INT 1
54913: MINUS
54914: ARRAY
54915: PPUSH
54916: LD_VAR 0 7
54920: PUSH
54921: LD_VAR 0 5
54925: ARRAY
54926: PPUSH
54927: CALL_OW 1
54931: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
54932: LD_ADDR_VAR 0 7
54936: PUSH
54937: LD_VAR 0 7
54941: PPUSH
54942: LD_VAR 0 5
54946: PUSH
54947: LD_INT 1
54949: MINUS
54950: PPUSH
54951: LD_VAR 0 6
54955: PPUSH
54956: CALL_OW 1
54960: ST_TO_ADDR
// end ;
54961: GO 54878
54963: POP
54964: POP
// result := s_arr [ 1 ] ;
54965: LD_ADDR_VAR 0 4
54969: PUSH
54970: LD_VAR 0 7
54974: PUSH
54975: LD_INT 1
54977: ARRAY
54978: ST_TO_ADDR
// end ; end ;
54979: LD_VAR 0 4
54983: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
54984: LD_INT 0
54986: PPUSH
54987: PPUSH
// if not list then
54988: LD_VAR 0 1
54992: NOT
54993: IFFALSE 54997
// exit ;
54995: GO 55088
// i := list [ pos1 ] ;
54997: LD_ADDR_VAR 0 5
55001: PUSH
55002: LD_VAR 0 1
55006: PUSH
55007: LD_VAR 0 2
55011: ARRAY
55012: ST_TO_ADDR
// if not i then
55013: LD_VAR 0 5
55017: NOT
55018: IFFALSE 55022
// exit ;
55020: GO 55088
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55022: LD_ADDR_VAR 0 1
55026: PUSH
55027: LD_VAR 0 1
55031: PPUSH
55032: LD_VAR 0 2
55036: PPUSH
55037: LD_VAR 0 1
55041: PUSH
55042: LD_VAR 0 3
55046: ARRAY
55047: PPUSH
55048: CALL_OW 1
55052: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55053: LD_ADDR_VAR 0 1
55057: PUSH
55058: LD_VAR 0 1
55062: PPUSH
55063: LD_VAR 0 3
55067: PPUSH
55068: LD_VAR 0 5
55072: PPUSH
55073: CALL_OW 1
55077: ST_TO_ADDR
// result := list ;
55078: LD_ADDR_VAR 0 4
55082: PUSH
55083: LD_VAR 0 1
55087: ST_TO_ADDR
// end ;
55088: LD_VAR 0 4
55092: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55093: LD_INT 0
55095: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55096: LD_ADDR_VAR 0 5
55100: PUSH
55101: LD_VAR 0 1
55105: PPUSH
55106: CALL_OW 250
55110: PPUSH
55111: LD_VAR 0 1
55115: PPUSH
55116: CALL_OW 251
55120: PPUSH
55121: LD_VAR 0 2
55125: PPUSH
55126: LD_VAR 0 3
55130: PPUSH
55131: LD_VAR 0 4
55135: PPUSH
55136: CALL 55146 0 5
55140: ST_TO_ADDR
// end ;
55141: LD_VAR 0 5
55145: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55146: LD_INT 0
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
// if not list then
55152: LD_VAR 0 3
55156: NOT
55157: IFFALSE 55161
// exit ;
55159: GO 55549
// result := [ ] ;
55161: LD_ADDR_VAR 0 6
55165: PUSH
55166: EMPTY
55167: ST_TO_ADDR
// for i in list do
55168: LD_ADDR_VAR 0 7
55172: PUSH
55173: LD_VAR 0 3
55177: PUSH
55178: FOR_IN
55179: IFFALSE 55381
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55181: LD_ADDR_VAR 0 9
55185: PUSH
55186: LD_VAR 0 7
55190: PPUSH
55191: LD_VAR 0 1
55195: PPUSH
55196: LD_VAR 0 2
55200: PPUSH
55201: CALL_OW 297
55205: ST_TO_ADDR
// if not result then
55206: LD_VAR 0 6
55210: NOT
55211: IFFALSE 55237
// result := [ [ i , tmp ] ] else
55213: LD_ADDR_VAR 0 6
55217: PUSH
55218: LD_VAR 0 7
55222: PUSH
55223: LD_VAR 0 9
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: ST_TO_ADDR
55235: GO 55379
// begin if result [ result ] [ 2 ] < tmp then
55237: LD_VAR 0 6
55241: PUSH
55242: LD_VAR 0 6
55246: ARRAY
55247: PUSH
55248: LD_INT 2
55250: ARRAY
55251: PUSH
55252: LD_VAR 0 9
55256: LESS
55257: IFFALSE 55299
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55259: LD_ADDR_VAR 0 6
55263: PUSH
55264: LD_VAR 0 6
55268: PPUSH
55269: LD_VAR 0 6
55273: PUSH
55274: LD_INT 1
55276: PLUS
55277: PPUSH
55278: LD_VAR 0 7
55282: PUSH
55283: LD_VAR 0 9
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PPUSH
55292: CALL_OW 2
55296: ST_TO_ADDR
55297: GO 55379
// for j = 1 to result do
55299: LD_ADDR_VAR 0 8
55303: PUSH
55304: DOUBLE
55305: LD_INT 1
55307: DEC
55308: ST_TO_ADDR
55309: LD_VAR 0 6
55313: PUSH
55314: FOR_TO
55315: IFFALSE 55377
// begin if tmp < result [ j ] [ 2 ] then
55317: LD_VAR 0 9
55321: PUSH
55322: LD_VAR 0 6
55326: PUSH
55327: LD_VAR 0 8
55331: ARRAY
55332: PUSH
55333: LD_INT 2
55335: ARRAY
55336: LESS
55337: IFFALSE 55375
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55339: LD_ADDR_VAR 0 6
55343: PUSH
55344: LD_VAR 0 6
55348: PPUSH
55349: LD_VAR 0 8
55353: PPUSH
55354: LD_VAR 0 7
55358: PUSH
55359: LD_VAR 0 9
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PPUSH
55368: CALL_OW 2
55372: ST_TO_ADDR
// break ;
55373: GO 55377
// end ; end ;
55375: GO 55314
55377: POP
55378: POP
// end ; end ;
55379: GO 55178
55381: POP
55382: POP
// if result and not asc then
55383: LD_VAR 0 6
55387: PUSH
55388: LD_VAR 0 4
55392: NOT
55393: AND
55394: IFFALSE 55469
// begin tmp := result ;
55396: LD_ADDR_VAR 0 9
55400: PUSH
55401: LD_VAR 0 6
55405: ST_TO_ADDR
// for i = tmp downto 1 do
55406: LD_ADDR_VAR 0 7
55410: PUSH
55411: DOUBLE
55412: LD_VAR 0 9
55416: INC
55417: ST_TO_ADDR
55418: LD_INT 1
55420: PUSH
55421: FOR_DOWNTO
55422: IFFALSE 55467
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55424: LD_ADDR_VAR 0 6
55428: PUSH
55429: LD_VAR 0 6
55433: PPUSH
55434: LD_VAR 0 9
55438: PUSH
55439: LD_VAR 0 7
55443: MINUS
55444: PUSH
55445: LD_INT 1
55447: PLUS
55448: PPUSH
55449: LD_VAR 0 9
55453: PUSH
55454: LD_VAR 0 7
55458: ARRAY
55459: PPUSH
55460: CALL_OW 1
55464: ST_TO_ADDR
55465: GO 55421
55467: POP
55468: POP
// end ; tmp := [ ] ;
55469: LD_ADDR_VAR 0 9
55473: PUSH
55474: EMPTY
55475: ST_TO_ADDR
// if mode then
55476: LD_VAR 0 5
55480: IFFALSE 55549
// begin for i = 1 to result do
55482: LD_ADDR_VAR 0 7
55486: PUSH
55487: DOUBLE
55488: LD_INT 1
55490: DEC
55491: ST_TO_ADDR
55492: LD_VAR 0 6
55496: PUSH
55497: FOR_TO
55498: IFFALSE 55537
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
55500: LD_ADDR_VAR 0 9
55504: PUSH
55505: LD_VAR 0 9
55509: PPUSH
55510: LD_VAR 0 7
55514: PPUSH
55515: LD_VAR 0 6
55519: PUSH
55520: LD_VAR 0 7
55524: ARRAY
55525: PUSH
55526: LD_INT 1
55528: ARRAY
55529: PPUSH
55530: CALL_OW 1
55534: ST_TO_ADDR
55535: GO 55497
55537: POP
55538: POP
// result := tmp ;
55539: LD_ADDR_VAR 0 6
55543: PUSH
55544: LD_VAR 0 9
55548: ST_TO_ADDR
// end ; end ;
55549: LD_VAR 0 6
55553: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
55554: LD_INT 0
55556: PPUSH
55557: PPUSH
55558: PPUSH
55559: PPUSH
55560: PPUSH
55561: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
55562: LD_ADDR_VAR 0 5
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// if not x or not y then
55584: LD_VAR 0 2
55588: NOT
55589: PUSH
55590: LD_VAR 0 3
55594: NOT
55595: OR
55596: IFFALSE 55600
// exit ;
55598: GO 57246
// if not range then
55600: LD_VAR 0 4
55604: NOT
55605: IFFALSE 55615
// range := 10 ;
55607: LD_ADDR_VAR 0 4
55611: PUSH
55612: LD_INT 10
55614: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55615: LD_ADDR_VAR 0 8
55619: PUSH
55620: LD_INT 81
55622: PUSH
55623: LD_VAR 0 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 92
55634: PUSH
55635: LD_VAR 0 2
55639: PUSH
55640: LD_VAR 0 3
55644: PUSH
55645: LD_VAR 0 4
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: LD_INT 21
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: PPUSH
55678: CALL_OW 69
55682: ST_TO_ADDR
// if not tmp then
55683: LD_VAR 0 8
55687: NOT
55688: IFFALSE 55692
// exit ;
55690: GO 57246
// for i in tmp do
55692: LD_ADDR_VAR 0 6
55696: PUSH
55697: LD_VAR 0 8
55701: PUSH
55702: FOR_IN
55703: IFFALSE 57221
// begin points := [ 0 , 0 , 0 ] ;
55705: LD_ADDR_VAR 0 9
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: ST_TO_ADDR
// bpoints := 1 ;
55724: LD_ADDR_VAR 0 10
55728: PUSH
55729: LD_INT 1
55731: ST_TO_ADDR
// case GetType ( i ) of unit_human :
55732: LD_VAR 0 6
55736: PPUSH
55737: CALL_OW 247
55741: PUSH
55742: LD_INT 1
55744: DOUBLE
55745: EQUAL
55746: IFTRUE 55750
55748: GO 56328
55750: POP
// begin if GetClass ( i ) = 1 then
55751: LD_VAR 0 6
55755: PPUSH
55756: CALL_OW 257
55760: PUSH
55761: LD_INT 1
55763: EQUAL
55764: IFFALSE 55785
// points := [ 10 , 5 , 3 ] ;
55766: LD_ADDR_VAR 0 9
55770: PUSH
55771: LD_INT 10
55773: PUSH
55774: LD_INT 5
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
55785: LD_VAR 0 6
55789: PPUSH
55790: CALL_OW 257
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: IN
55809: IFFALSE 55830
// points := [ 3 , 2 , 1 ] ;
55811: LD_ADDR_VAR 0 9
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// if GetClass ( i ) = 5 then
55830: LD_VAR 0 6
55834: PPUSH
55835: CALL_OW 257
55839: PUSH
55840: LD_INT 5
55842: EQUAL
55843: IFFALSE 55864
// points := [ 130 , 5 , 2 ] ;
55845: LD_ADDR_VAR 0 9
55849: PUSH
55850: LD_INT 130
55852: PUSH
55853: LD_INT 5
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: ST_TO_ADDR
// if GetClass ( i ) = 8 then
55864: LD_VAR 0 6
55868: PPUSH
55869: CALL_OW 257
55873: PUSH
55874: LD_INT 8
55876: EQUAL
55877: IFFALSE 55898
// points := [ 35 , 35 , 30 ] ;
55879: LD_ADDR_VAR 0 9
55883: PUSH
55884: LD_INT 35
55886: PUSH
55887: LD_INT 35
55889: PUSH
55890: LD_INT 30
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// if GetClass ( i ) = 9 then
55898: LD_VAR 0 6
55902: PPUSH
55903: CALL_OW 257
55907: PUSH
55908: LD_INT 9
55910: EQUAL
55911: IFFALSE 55932
// points := [ 20 , 55 , 40 ] ;
55913: LD_ADDR_VAR 0 9
55917: PUSH
55918: LD_INT 20
55920: PUSH
55921: LD_INT 55
55923: PUSH
55924: LD_INT 40
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
55932: LD_VAR 0 6
55936: PPUSH
55937: CALL_OW 257
55941: PUSH
55942: LD_INT 12
55944: PUSH
55945: LD_INT 16
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: IN
55952: IFFALSE 55973
// points := [ 5 , 3 , 2 ] ;
55954: LD_ADDR_VAR 0 9
55958: PUSH
55959: LD_INT 5
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: ST_TO_ADDR
// if GetClass ( i ) = 17 then
55973: LD_VAR 0 6
55977: PPUSH
55978: CALL_OW 257
55982: PUSH
55983: LD_INT 17
55985: EQUAL
55986: IFFALSE 56007
// points := [ 100 , 50 , 75 ] ;
55988: LD_ADDR_VAR 0 9
55992: PUSH
55993: LD_INT 100
55995: PUSH
55996: LD_INT 50
55998: PUSH
55999: LD_INT 75
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56007: LD_VAR 0 6
56011: PPUSH
56012: CALL_OW 257
56016: PUSH
56017: LD_INT 15
56019: EQUAL
56020: IFFALSE 56041
// points := [ 10 , 5 , 3 ] ;
56022: LD_ADDR_VAR 0 9
56026: PUSH
56027: LD_INT 10
56029: PUSH
56030: LD_INT 5
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56041: LD_VAR 0 6
56045: PPUSH
56046: CALL_OW 257
56050: PUSH
56051: LD_INT 14
56053: EQUAL
56054: IFFALSE 56075
// points := [ 10 , 0 , 0 ] ;
56056: LD_ADDR_VAR 0 9
56060: PUSH
56061: LD_INT 10
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56075: LD_VAR 0 6
56079: PPUSH
56080: CALL_OW 257
56084: PUSH
56085: LD_INT 11
56087: EQUAL
56088: IFFALSE 56109
// points := [ 30 , 10 , 5 ] ;
56090: LD_ADDR_VAR 0 9
56094: PUSH
56095: LD_INT 30
56097: PUSH
56098: LD_INT 10
56100: PUSH
56101: LD_INT 5
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56109: LD_VAR 0 1
56113: PPUSH
56114: LD_INT 5
56116: PPUSH
56117: CALL_OW 321
56121: PUSH
56122: LD_INT 2
56124: EQUAL
56125: IFFALSE 56142
// bpoints := bpoints * 1.8 ;
56127: LD_ADDR_VAR 0 10
56131: PUSH
56132: LD_VAR 0 10
56136: PUSH
56137: LD_REAL  1.80000000000000E+0000
56140: MUL
56141: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56142: LD_VAR 0 6
56146: PPUSH
56147: CALL_OW 257
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: LD_INT 4
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: IN
56170: PUSH
56171: LD_VAR 0 1
56175: PPUSH
56176: LD_INT 51
56178: PPUSH
56179: CALL_OW 321
56183: PUSH
56184: LD_INT 2
56186: EQUAL
56187: AND
56188: IFFALSE 56205
// bpoints := bpoints * 1.2 ;
56190: LD_ADDR_VAR 0 10
56194: PUSH
56195: LD_VAR 0 10
56199: PUSH
56200: LD_REAL  1.20000000000000E+0000
56203: MUL
56204: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56205: LD_VAR 0 6
56209: PPUSH
56210: CALL_OW 257
56214: PUSH
56215: LD_INT 5
56217: PUSH
56218: LD_INT 7
56220: PUSH
56221: LD_INT 9
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: IN
56229: PUSH
56230: LD_VAR 0 1
56234: PPUSH
56235: LD_INT 52
56237: PPUSH
56238: CALL_OW 321
56242: PUSH
56243: LD_INT 2
56245: EQUAL
56246: AND
56247: IFFALSE 56264
// bpoints := bpoints * 1.5 ;
56249: LD_ADDR_VAR 0 10
56253: PUSH
56254: LD_VAR 0 10
56258: PUSH
56259: LD_REAL  1.50000000000000E+0000
56262: MUL
56263: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56264: LD_VAR 0 1
56268: PPUSH
56269: LD_INT 66
56271: PPUSH
56272: CALL_OW 321
56276: PUSH
56277: LD_INT 2
56279: EQUAL
56280: IFFALSE 56297
// bpoints := bpoints * 1.1 ;
56282: LD_ADDR_VAR 0 10
56286: PUSH
56287: LD_VAR 0 10
56291: PUSH
56292: LD_REAL  1.10000000000000E+0000
56295: MUL
56296: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56297: LD_ADDR_VAR 0 10
56301: PUSH
56302: LD_VAR 0 10
56306: PUSH
56307: LD_VAR 0 6
56311: PPUSH
56312: LD_INT 1
56314: PPUSH
56315: CALL_OW 259
56319: PUSH
56320: LD_REAL  1.15000000000000E+0000
56323: MUL
56324: MUL
56325: ST_TO_ADDR
// end ; unit_vehicle :
56326: GO 57150
56328: LD_INT 2
56330: DOUBLE
56331: EQUAL
56332: IFTRUE 56336
56334: GO 57138
56336: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56337: LD_VAR 0 6
56341: PPUSH
56342: CALL_OW 264
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: LD_INT 42
56352: PUSH
56353: LD_INT 24
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: LIST
56360: IN
56361: IFFALSE 56382
// points := [ 25 , 5 , 3 ] ;
56363: LD_ADDR_VAR 0 9
56367: PUSH
56368: LD_INT 25
56370: PUSH
56371: LD_INT 5
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56382: LD_VAR 0 6
56386: PPUSH
56387: CALL_OW 264
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: LD_INT 43
56397: PUSH
56398: LD_INT 25
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: LIST
56405: IN
56406: IFFALSE 56427
// points := [ 40 , 15 , 5 ] ;
56408: LD_ADDR_VAR 0 9
56412: PUSH
56413: LD_INT 40
56415: PUSH
56416: LD_INT 15
56418: PUSH
56419: LD_INT 5
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56427: LD_VAR 0 6
56431: PPUSH
56432: CALL_OW 264
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 23
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: IN
56447: IFFALSE 56468
// points := [ 7 , 25 , 8 ] ;
56449: LD_ADDR_VAR 0 9
56453: PUSH
56454: LD_INT 7
56456: PUSH
56457: LD_INT 25
56459: PUSH
56460: LD_INT 8
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56468: LD_VAR 0 6
56472: PPUSH
56473: CALL_OW 264
56477: PUSH
56478: LD_INT 5
56480: PUSH
56481: LD_INT 27
56483: PUSH
56484: LD_INT 44
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: IN
56492: IFFALSE 56513
// points := [ 14 , 50 , 16 ] ;
56494: LD_ADDR_VAR 0 9
56498: PUSH
56499: LD_INT 14
56501: PUSH
56502: LD_INT 50
56504: PUSH
56505: LD_INT 16
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
56513: LD_VAR 0 6
56517: PPUSH
56518: CALL_OW 264
56522: PUSH
56523: LD_INT 6
56525: PUSH
56526: LD_INT 46
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: IN
56533: IFFALSE 56554
// points := [ 32 , 120 , 70 ] ;
56535: LD_ADDR_VAR 0 9
56539: PUSH
56540: LD_INT 32
56542: PUSH
56543: LD_INT 120
56545: PUSH
56546: LD_INT 70
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: LIST
56553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
56554: LD_VAR 0 6
56558: PPUSH
56559: CALL_OW 264
56563: PUSH
56564: LD_INT 7
56566: PUSH
56567: LD_INT 28
56569: PUSH
56570: LD_INT 45
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: IN
56578: IFFALSE 56599
// points := [ 35 , 20 , 45 ] ;
56580: LD_ADDR_VAR 0 9
56584: PUSH
56585: LD_INT 35
56587: PUSH
56588: LD_INT 20
56590: PUSH
56591: LD_INT 45
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
56599: LD_VAR 0 6
56603: PPUSH
56604: CALL_OW 264
56608: PUSH
56609: LD_INT 47
56611: PUSH
56612: EMPTY
56613: LIST
56614: IN
56615: IFFALSE 56636
// points := [ 67 , 45 , 75 ] ;
56617: LD_ADDR_VAR 0 9
56621: PUSH
56622: LD_INT 67
56624: PUSH
56625: LD_INT 45
56627: PUSH
56628: LD_INT 75
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
56636: LD_VAR 0 6
56640: PPUSH
56641: CALL_OW 264
56645: PUSH
56646: LD_INT 26
56648: PUSH
56649: EMPTY
56650: LIST
56651: IN
56652: IFFALSE 56673
// points := [ 120 , 30 , 80 ] ;
56654: LD_ADDR_VAR 0 9
56658: PUSH
56659: LD_INT 120
56661: PUSH
56662: LD_INT 30
56664: PUSH
56665: LD_INT 80
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
56673: LD_VAR 0 6
56677: PPUSH
56678: CALL_OW 264
56682: PUSH
56683: LD_INT 22
56685: PUSH
56686: EMPTY
56687: LIST
56688: IN
56689: IFFALSE 56710
// points := [ 40 , 1 , 1 ] ;
56691: LD_ADDR_VAR 0 9
56695: PUSH
56696: LD_INT 40
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
56710: LD_VAR 0 6
56714: PPUSH
56715: CALL_OW 264
56719: PUSH
56720: LD_INT 29
56722: PUSH
56723: EMPTY
56724: LIST
56725: IN
56726: IFFALSE 56747
// points := [ 70 , 200 , 400 ] ;
56728: LD_ADDR_VAR 0 9
56732: PUSH
56733: LD_INT 70
56735: PUSH
56736: LD_INT 200
56738: PUSH
56739: LD_INT 400
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
56747: LD_VAR 0 6
56751: PPUSH
56752: CALL_OW 264
56756: PUSH
56757: LD_INT 14
56759: PUSH
56760: LD_INT 53
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: IN
56767: IFFALSE 56788
// points := [ 40 , 10 , 20 ] ;
56769: LD_ADDR_VAR 0 9
56773: PUSH
56774: LD_INT 40
56776: PUSH
56777: LD_INT 10
56779: PUSH
56780: LD_INT 20
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
56788: LD_VAR 0 6
56792: PPUSH
56793: CALL_OW 264
56797: PUSH
56798: LD_INT 9
56800: PUSH
56801: EMPTY
56802: LIST
56803: IN
56804: IFFALSE 56825
// points := [ 5 , 70 , 20 ] ;
56806: LD_ADDR_VAR 0 9
56810: PUSH
56811: LD_INT 5
56813: PUSH
56814: LD_INT 70
56816: PUSH
56817: LD_INT 20
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
56825: LD_VAR 0 6
56829: PPUSH
56830: CALL_OW 264
56834: PUSH
56835: LD_INT 10
56837: PUSH
56838: EMPTY
56839: LIST
56840: IN
56841: IFFALSE 56862
// points := [ 35 , 110 , 70 ] ;
56843: LD_ADDR_VAR 0 9
56847: PUSH
56848: LD_INT 35
56850: PUSH
56851: LD_INT 110
56853: PUSH
56854: LD_INT 70
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
56862: LD_VAR 0 6
56866: PPUSH
56867: CALL_OW 265
56871: PUSH
56872: LD_INT 25
56874: EQUAL
56875: IFFALSE 56896
// points := [ 80 , 65 , 100 ] ;
56877: LD_ADDR_VAR 0 9
56881: PUSH
56882: LD_INT 80
56884: PUSH
56885: LD_INT 65
56887: PUSH
56888: LD_INT 100
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
56896: LD_VAR 0 6
56900: PPUSH
56901: CALL_OW 263
56905: PUSH
56906: LD_INT 1
56908: EQUAL
56909: IFFALSE 56944
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
56911: LD_ADDR_VAR 0 10
56915: PUSH
56916: LD_VAR 0 10
56920: PUSH
56921: LD_VAR 0 6
56925: PPUSH
56926: CALL_OW 311
56930: PPUSH
56931: LD_INT 3
56933: PPUSH
56934: CALL_OW 259
56938: PUSH
56939: LD_INT 4
56941: MUL
56942: MUL
56943: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
56944: LD_VAR 0 6
56948: PPUSH
56949: CALL_OW 263
56953: PUSH
56954: LD_INT 2
56956: EQUAL
56957: IFFALSE 57008
// begin j := IsControledBy ( i ) ;
56959: LD_ADDR_VAR 0 7
56963: PUSH
56964: LD_VAR 0 6
56968: PPUSH
56969: CALL_OW 312
56973: ST_TO_ADDR
// if j then
56974: LD_VAR 0 7
56978: IFFALSE 57008
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
56980: LD_ADDR_VAR 0 10
56984: PUSH
56985: LD_VAR 0 10
56989: PUSH
56990: LD_VAR 0 7
56994: PPUSH
56995: LD_INT 3
56997: PPUSH
56998: CALL_OW 259
57002: PUSH
57003: LD_INT 3
57005: MUL
57006: MUL
57007: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57008: LD_VAR 0 6
57012: PPUSH
57013: CALL_OW 264
57017: PUSH
57018: LD_INT 5
57020: PUSH
57021: LD_INT 6
57023: PUSH
57024: LD_INT 46
57026: PUSH
57027: LD_INT 44
57029: PUSH
57030: LD_INT 47
57032: PUSH
57033: LD_INT 45
57035: PUSH
57036: LD_INT 28
57038: PUSH
57039: LD_INT 7
57041: PUSH
57042: LD_INT 27
57044: PUSH
57045: LD_INT 29
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: IN
57060: PUSH
57061: LD_VAR 0 1
57065: PPUSH
57066: LD_INT 52
57068: PPUSH
57069: CALL_OW 321
57073: PUSH
57074: LD_INT 2
57076: EQUAL
57077: AND
57078: IFFALSE 57095
// bpoints := bpoints * 1.2 ;
57080: LD_ADDR_VAR 0 10
57084: PUSH
57085: LD_VAR 0 10
57089: PUSH
57090: LD_REAL  1.20000000000000E+0000
57093: MUL
57094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57095: LD_VAR 0 6
57099: PPUSH
57100: CALL_OW 264
57104: PUSH
57105: LD_INT 6
57107: PUSH
57108: LD_INT 46
57110: PUSH
57111: LD_INT 47
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: IN
57119: IFFALSE 57136
// bpoints := bpoints * 1.2 ;
57121: LD_ADDR_VAR 0 10
57125: PUSH
57126: LD_VAR 0 10
57130: PUSH
57131: LD_REAL  1.20000000000000E+0000
57134: MUL
57135: ST_TO_ADDR
// end ; unit_building :
57136: GO 57150
57138: LD_INT 3
57140: DOUBLE
57141: EQUAL
57142: IFTRUE 57146
57144: GO 57149
57146: POP
// ; end ;
57147: GO 57150
57149: POP
// for j = 1 to 3 do
57150: LD_ADDR_VAR 0 7
57154: PUSH
57155: DOUBLE
57156: LD_INT 1
57158: DEC
57159: ST_TO_ADDR
57160: LD_INT 3
57162: PUSH
57163: FOR_TO
57164: IFFALSE 57217
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57166: LD_ADDR_VAR 0 5
57170: PUSH
57171: LD_VAR 0 5
57175: PPUSH
57176: LD_VAR 0 7
57180: PPUSH
57181: LD_VAR 0 5
57185: PUSH
57186: LD_VAR 0 7
57190: ARRAY
57191: PUSH
57192: LD_VAR 0 9
57196: PUSH
57197: LD_VAR 0 7
57201: ARRAY
57202: PUSH
57203: LD_VAR 0 10
57207: MUL
57208: PLUS
57209: PPUSH
57210: CALL_OW 1
57214: ST_TO_ADDR
57215: GO 57163
57217: POP
57218: POP
// end ;
57219: GO 55702
57221: POP
57222: POP
// result := Replace ( result , 4 , tmp ) ;
57223: LD_ADDR_VAR 0 5
57227: PUSH
57228: LD_VAR 0 5
57232: PPUSH
57233: LD_INT 4
57235: PPUSH
57236: LD_VAR 0 8
57240: PPUSH
57241: CALL_OW 1
57245: ST_TO_ADDR
// end ;
57246: LD_VAR 0 5
57250: RET
// export function DangerAtRange ( unit , range ) ; begin
57251: LD_INT 0
57253: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57254: LD_ADDR_VAR 0 3
57258: PUSH
57259: LD_VAR 0 1
57263: PPUSH
57264: CALL_OW 255
57268: PPUSH
57269: LD_VAR 0 1
57273: PPUSH
57274: CALL_OW 250
57278: PPUSH
57279: LD_VAR 0 1
57283: PPUSH
57284: CALL_OW 251
57288: PPUSH
57289: LD_VAR 0 2
57293: PPUSH
57294: CALL 55554 0 4
57298: ST_TO_ADDR
// end ;
57299: LD_VAR 0 3
57303: RET
// export function DangerInArea ( side , area ) ; begin
57304: LD_INT 0
57306: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57307: LD_ADDR_VAR 0 3
57311: PUSH
57312: LD_VAR 0 2
57316: PPUSH
57317: LD_INT 81
57319: PUSH
57320: LD_VAR 0 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PPUSH
57329: CALL_OW 70
57333: ST_TO_ADDR
// end ;
57334: LD_VAR 0 3
57338: RET
// export function IsExtension ( b ) ; begin
57339: LD_INT 0
57341: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57342: LD_ADDR_VAR 0 2
57346: PUSH
57347: LD_VAR 0 1
57351: PUSH
57352: LD_INT 23
57354: PUSH
57355: LD_INT 20
57357: PUSH
57358: LD_INT 22
57360: PUSH
57361: LD_INT 17
57363: PUSH
57364: LD_INT 24
57366: PUSH
57367: LD_INT 21
57369: PUSH
57370: LD_INT 19
57372: PUSH
57373: LD_INT 16
57375: PUSH
57376: LD_INT 25
57378: PUSH
57379: LD_INT 18
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: IN
57394: ST_TO_ADDR
// end ;
57395: LD_VAR 0 2
57399: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
57400: LD_INT 0
57402: PPUSH
57403: PPUSH
57404: PPUSH
// result := [ ] ;
57405: LD_ADDR_VAR 0 3
57409: PUSH
57410: EMPTY
57411: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57412: LD_ADDR_VAR 0 4
57416: PUSH
57417: LD_VAR 0 2
57421: PPUSH
57422: LD_INT 21
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PPUSH
57432: CALL_OW 70
57436: ST_TO_ADDR
// if not tmp then
57437: LD_VAR 0 4
57441: NOT
57442: IFFALSE 57446
// exit ;
57444: GO 57504
// for i in tmp do
57446: LD_ADDR_VAR 0 5
57450: PUSH
57451: LD_VAR 0 4
57455: PUSH
57456: FOR_IN
57457: IFFALSE 57492
// if GetBase ( i ) <> base then
57459: LD_VAR 0 5
57463: PPUSH
57464: CALL_OW 274
57468: PUSH
57469: LD_VAR 0 1
57473: NONEQUAL
57474: IFFALSE 57490
// ComLinkToBase ( base , i ) ;
57476: LD_VAR 0 1
57480: PPUSH
57481: LD_VAR 0 5
57485: PPUSH
57486: CALL_OW 169
57490: GO 57456
57492: POP
57493: POP
// result := tmp ;
57494: LD_ADDR_VAR 0 3
57498: PUSH
57499: LD_VAR 0 4
57503: ST_TO_ADDR
// end ;
57504: LD_VAR 0 3
57508: RET
// export function ComComplete ( unit , b ) ; var i ; begin
57509: LD_INT 0
57511: PPUSH
57512: PPUSH
// if BuildingStatus ( b ) = bs_build then
57513: LD_VAR 0 2
57517: PPUSH
57518: CALL_OW 461
57522: PUSH
57523: LD_INT 1
57525: EQUAL
57526: IFFALSE 57586
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
57528: LD_VAR 0 1
57532: PPUSH
57533: LD_STRING h
57535: PUSH
57536: LD_VAR 0 2
57540: PPUSH
57541: CALL_OW 250
57545: PUSH
57546: LD_VAR 0 2
57550: PPUSH
57551: CALL_OW 251
57555: PUSH
57556: LD_VAR 0 2
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: PPUSH
57582: CALL_OW 446
// end ;
57586: LD_VAR 0 3
57590: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
57591: LD_INT 0
57593: PPUSH
57594: PPUSH
57595: PPUSH
57596: PPUSH
57597: PPUSH
57598: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
57599: LD_VAR 0 1
57603: NOT
57604: PUSH
57605: LD_VAR 0 1
57609: PPUSH
57610: CALL_OW 263
57614: PUSH
57615: LD_INT 2
57617: EQUAL
57618: NOT
57619: OR
57620: IFFALSE 57624
// exit ;
57622: GO 57940
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
57624: LD_ADDR_VAR 0 6
57628: PUSH
57629: LD_INT 22
57631: PUSH
57632: LD_VAR 0 1
57636: PPUSH
57637: CALL_OW 255
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 30
57651: PUSH
57652: LD_INT 36
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 34
57661: PUSH
57662: LD_INT 31
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PPUSH
57678: CALL_OW 69
57682: ST_TO_ADDR
// if not tmp then
57683: LD_VAR 0 6
57687: NOT
57688: IFFALSE 57692
// exit ;
57690: GO 57940
// result := [ ] ;
57692: LD_ADDR_VAR 0 2
57696: PUSH
57697: EMPTY
57698: ST_TO_ADDR
// for i in tmp do
57699: LD_ADDR_VAR 0 3
57703: PUSH
57704: LD_VAR 0 6
57708: PUSH
57709: FOR_IN
57710: IFFALSE 57781
// begin t := UnitsInside ( i ) ;
57712: LD_ADDR_VAR 0 4
57716: PUSH
57717: LD_VAR 0 3
57721: PPUSH
57722: CALL_OW 313
57726: ST_TO_ADDR
// if t then
57727: LD_VAR 0 4
57731: IFFALSE 57779
// for j in t do
57733: LD_ADDR_VAR 0 7
57737: PUSH
57738: LD_VAR 0 4
57742: PUSH
57743: FOR_IN
57744: IFFALSE 57777
// result := Insert ( result , result + 1 , j ) ;
57746: LD_ADDR_VAR 0 2
57750: PUSH
57751: LD_VAR 0 2
57755: PPUSH
57756: LD_VAR 0 2
57760: PUSH
57761: LD_INT 1
57763: PLUS
57764: PPUSH
57765: LD_VAR 0 7
57769: PPUSH
57770: CALL_OW 2
57774: ST_TO_ADDR
57775: GO 57743
57777: POP
57778: POP
// end ;
57779: GO 57709
57781: POP
57782: POP
// if not result then
57783: LD_VAR 0 2
57787: NOT
57788: IFFALSE 57792
// exit ;
57790: GO 57940
// mech := result [ 1 ] ;
57792: LD_ADDR_VAR 0 5
57796: PUSH
57797: LD_VAR 0 2
57801: PUSH
57802: LD_INT 1
57804: ARRAY
57805: ST_TO_ADDR
// if result > 1 then
57806: LD_VAR 0 2
57810: PUSH
57811: LD_INT 1
57813: GREATER
57814: IFFALSE 57926
// for i = 2 to result do
57816: LD_ADDR_VAR 0 3
57820: PUSH
57821: DOUBLE
57822: LD_INT 2
57824: DEC
57825: ST_TO_ADDR
57826: LD_VAR 0 2
57830: PUSH
57831: FOR_TO
57832: IFFALSE 57924
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
57834: LD_ADDR_VAR 0 4
57838: PUSH
57839: LD_VAR 0 2
57843: PUSH
57844: LD_VAR 0 3
57848: ARRAY
57849: PPUSH
57850: LD_INT 3
57852: PPUSH
57853: CALL_OW 259
57857: PUSH
57858: LD_VAR 0 2
57862: PUSH
57863: LD_VAR 0 3
57867: ARRAY
57868: PPUSH
57869: CALL_OW 432
57873: MINUS
57874: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
57875: LD_VAR 0 4
57879: PUSH
57880: LD_VAR 0 5
57884: PPUSH
57885: LD_INT 3
57887: PPUSH
57888: CALL_OW 259
57892: PUSH
57893: LD_VAR 0 5
57897: PPUSH
57898: CALL_OW 432
57902: MINUS
57903: GREATEREQUAL
57904: IFFALSE 57922
// mech := result [ i ] ;
57906: LD_ADDR_VAR 0 5
57910: PUSH
57911: LD_VAR 0 2
57915: PUSH
57916: LD_VAR 0 3
57920: ARRAY
57921: ST_TO_ADDR
// end ;
57922: GO 57831
57924: POP
57925: POP
// ComLinkTo ( vehicle , mech ) ;
57926: LD_VAR 0 1
57930: PPUSH
57931: LD_VAR 0 5
57935: PPUSH
57936: CALL_OW 135
// end ;
57940: LD_VAR 0 2
57944: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
57945: LD_INT 0
57947: PPUSH
57948: PPUSH
57949: PPUSH
57950: PPUSH
57951: PPUSH
57952: PPUSH
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
57957: PPUSH
57958: PPUSH
57959: PPUSH
// result := [ ] ;
57960: LD_ADDR_VAR 0 7
57964: PUSH
57965: EMPTY
57966: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
57967: LD_VAR 0 1
57971: PPUSH
57972: CALL_OW 266
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: IN
57987: NOT
57988: IFFALSE 57992
// exit ;
57990: GO 59623
// if name then
57992: LD_VAR 0 3
57996: IFFALSE 58012
// SetBName ( base_dep , name ) ;
57998: LD_VAR 0 1
58002: PPUSH
58003: LD_VAR 0 3
58007: PPUSH
58008: CALL_OW 500
// base := GetBase ( base_dep ) ;
58012: LD_ADDR_VAR 0 15
58016: PUSH
58017: LD_VAR 0 1
58021: PPUSH
58022: CALL_OW 274
58026: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58027: LD_ADDR_VAR 0 16
58031: PUSH
58032: LD_VAR 0 1
58036: PPUSH
58037: CALL_OW 255
58041: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58042: LD_ADDR_VAR 0 17
58046: PUSH
58047: LD_VAR 0 1
58051: PPUSH
58052: CALL_OW 248
58056: ST_TO_ADDR
// if sources then
58057: LD_VAR 0 5
58061: IFFALSE 58108
// for i = 1 to 3 do
58063: LD_ADDR_VAR 0 8
58067: PUSH
58068: DOUBLE
58069: LD_INT 1
58071: DEC
58072: ST_TO_ADDR
58073: LD_INT 3
58075: PUSH
58076: FOR_TO
58077: IFFALSE 58106
// AddResourceType ( base , i , sources [ i ] ) ;
58079: LD_VAR 0 15
58083: PPUSH
58084: LD_VAR 0 8
58088: PPUSH
58089: LD_VAR 0 5
58093: PUSH
58094: LD_VAR 0 8
58098: ARRAY
58099: PPUSH
58100: CALL_OW 276
58104: GO 58076
58106: POP
58107: POP
// buildings := GetBaseBuildings ( base , area ) ;
58108: LD_ADDR_VAR 0 18
58112: PUSH
58113: LD_VAR 0 15
58117: PPUSH
58118: LD_VAR 0 2
58122: PPUSH
58123: CALL 57400 0 2
58127: ST_TO_ADDR
// InitHc ;
58128: CALL_OW 19
// InitUc ;
58132: CALL_OW 18
// uc_side := side ;
58136: LD_ADDR_OWVAR 20
58140: PUSH
58141: LD_VAR 0 16
58145: ST_TO_ADDR
// uc_nation := nation ;
58146: LD_ADDR_OWVAR 21
58150: PUSH
58151: LD_VAR 0 17
58155: ST_TO_ADDR
// if buildings then
58156: LD_VAR 0 18
58160: IFFALSE 59482
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58162: LD_ADDR_VAR 0 19
58166: PUSH
58167: LD_VAR 0 18
58171: PPUSH
58172: LD_INT 2
58174: PUSH
58175: LD_INT 30
58177: PUSH
58178: LD_INT 29
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 30
58187: PUSH
58188: LD_INT 30
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: LIST
58199: PPUSH
58200: CALL_OW 72
58204: ST_TO_ADDR
// if tmp then
58205: LD_VAR 0 19
58209: IFFALSE 58257
// for i in tmp do
58211: LD_ADDR_VAR 0 8
58215: PUSH
58216: LD_VAR 0 19
58220: PUSH
58221: FOR_IN
58222: IFFALSE 58255
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58224: LD_VAR 0 8
58228: PPUSH
58229: CALL_OW 250
58233: PPUSH
58234: LD_VAR 0 8
58238: PPUSH
58239: CALL_OW 251
58243: PPUSH
58244: LD_VAR 0 16
58248: PPUSH
58249: CALL_OW 441
58253: GO 58221
58255: POP
58256: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58257: LD_VAR 0 18
58261: PPUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 30
58267: PUSH
58268: LD_INT 32
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 30
58277: PUSH
58278: LD_INT 33
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: PPUSH
58290: CALL_OW 72
58294: IFFALSE 58382
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58296: LD_ADDR_VAR 0 8
58300: PUSH
58301: LD_VAR 0 18
58305: PPUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 30
58311: PUSH
58312: LD_INT 32
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 30
58321: PUSH
58322: LD_INT 33
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: PPUSH
58334: CALL_OW 72
58338: PUSH
58339: FOR_IN
58340: IFFALSE 58380
// begin if not GetBWeapon ( i ) then
58342: LD_VAR 0 8
58346: PPUSH
58347: CALL_OW 269
58351: NOT
58352: IFFALSE 58378
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58354: LD_VAR 0 8
58358: PPUSH
58359: LD_VAR 0 8
58363: PPUSH
58364: LD_VAR 0 2
58368: PPUSH
58369: CALL 59628 0 2
58373: PPUSH
58374: CALL_OW 431
// end ;
58378: GO 58339
58380: POP
58381: POP
// end ; for i = 1 to personel do
58382: LD_ADDR_VAR 0 8
58386: PUSH
58387: DOUBLE
58388: LD_INT 1
58390: DEC
58391: ST_TO_ADDR
58392: LD_VAR 0 6
58396: PUSH
58397: FOR_TO
58398: IFFALSE 59462
// begin if i > 4 then
58400: LD_VAR 0 8
58404: PUSH
58405: LD_INT 4
58407: GREATER
58408: IFFALSE 58412
// break ;
58410: GO 59462
// case i of 1 :
58412: LD_VAR 0 8
58416: PUSH
58417: LD_INT 1
58419: DOUBLE
58420: EQUAL
58421: IFTRUE 58425
58423: GO 58505
58425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58426: LD_ADDR_VAR 0 12
58430: PUSH
58431: LD_VAR 0 18
58435: PPUSH
58436: LD_INT 22
58438: PUSH
58439: LD_VAR 0 16
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 58
58450: PUSH
58451: EMPTY
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 30
58459: PUSH
58460: LD_INT 32
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 30
58469: PUSH
58470: LD_INT 4
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 30
58479: PUSH
58480: LD_INT 5
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: PPUSH
58498: CALL_OW 72
58502: ST_TO_ADDR
58503: GO 58727
58505: LD_INT 2
58507: DOUBLE
58508: EQUAL
58509: IFTRUE 58513
58511: GO 58575
58513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
58514: LD_ADDR_VAR 0 12
58518: PUSH
58519: LD_VAR 0 18
58523: PPUSH
58524: LD_INT 22
58526: PUSH
58527: LD_VAR 0 16
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 30
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 30
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PPUSH
58568: CALL_OW 72
58572: ST_TO_ADDR
58573: GO 58727
58575: LD_INT 3
58577: DOUBLE
58578: EQUAL
58579: IFTRUE 58583
58581: GO 58645
58583: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
58584: LD_ADDR_VAR 0 12
58588: PUSH
58589: LD_VAR 0 18
58593: PPUSH
58594: LD_INT 22
58596: PUSH
58597: LD_VAR 0 16
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 30
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 30
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PPUSH
58638: CALL_OW 72
58642: ST_TO_ADDR
58643: GO 58727
58645: LD_INT 4
58647: DOUBLE
58648: EQUAL
58649: IFTRUE 58653
58651: GO 58726
58653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
58654: LD_ADDR_VAR 0 12
58658: PUSH
58659: LD_VAR 0 18
58663: PPUSH
58664: LD_INT 22
58666: PUSH
58667: LD_VAR 0 16
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: LD_INT 30
58681: PUSH
58682: LD_INT 6
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 30
58691: PUSH
58692: LD_INT 7
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 30
58701: PUSH
58702: LD_INT 8
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PPUSH
58719: CALL_OW 72
58723: ST_TO_ADDR
58724: GO 58727
58726: POP
// if i = 1 then
58727: LD_VAR 0 8
58731: PUSH
58732: LD_INT 1
58734: EQUAL
58735: IFFALSE 58846
// begin tmp := [ ] ;
58737: LD_ADDR_VAR 0 19
58741: PUSH
58742: EMPTY
58743: ST_TO_ADDR
// for j in f do
58744: LD_ADDR_VAR 0 9
58748: PUSH
58749: LD_VAR 0 12
58753: PUSH
58754: FOR_IN
58755: IFFALSE 58828
// if GetBType ( j ) = b_bunker then
58757: LD_VAR 0 9
58761: PPUSH
58762: CALL_OW 266
58766: PUSH
58767: LD_INT 32
58769: EQUAL
58770: IFFALSE 58797
// tmp := Insert ( tmp , 1 , j ) else
58772: LD_ADDR_VAR 0 19
58776: PUSH
58777: LD_VAR 0 19
58781: PPUSH
58782: LD_INT 1
58784: PPUSH
58785: LD_VAR 0 9
58789: PPUSH
58790: CALL_OW 2
58794: ST_TO_ADDR
58795: GO 58826
// tmp := Insert ( tmp , tmp + 1 , j ) ;
58797: LD_ADDR_VAR 0 19
58801: PUSH
58802: LD_VAR 0 19
58806: PPUSH
58807: LD_VAR 0 19
58811: PUSH
58812: LD_INT 1
58814: PLUS
58815: PPUSH
58816: LD_VAR 0 9
58820: PPUSH
58821: CALL_OW 2
58825: ST_TO_ADDR
58826: GO 58754
58828: POP
58829: POP
// if tmp then
58830: LD_VAR 0 19
58834: IFFALSE 58846
// f := tmp ;
58836: LD_ADDR_VAR 0 12
58840: PUSH
58841: LD_VAR 0 19
58845: ST_TO_ADDR
// end ; x := personel [ i ] ;
58846: LD_ADDR_VAR 0 13
58850: PUSH
58851: LD_VAR 0 6
58855: PUSH
58856: LD_VAR 0 8
58860: ARRAY
58861: ST_TO_ADDR
// if x = - 1 then
58862: LD_VAR 0 13
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: EQUAL
58871: IFFALSE 59080
// begin for j in f do
58873: LD_ADDR_VAR 0 9
58877: PUSH
58878: LD_VAR 0 12
58882: PUSH
58883: FOR_IN
58884: IFFALSE 59076
// repeat InitHc ;
58886: CALL_OW 19
// if GetBType ( j ) = b_barracks then
58890: LD_VAR 0 9
58894: PPUSH
58895: CALL_OW 266
58899: PUSH
58900: LD_INT 5
58902: EQUAL
58903: IFFALSE 58973
// begin if UnitsInside ( j ) < 3 then
58905: LD_VAR 0 9
58909: PPUSH
58910: CALL_OW 313
58914: PUSH
58915: LD_INT 3
58917: LESS
58918: IFFALSE 58954
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58920: LD_INT 0
58922: PPUSH
58923: LD_INT 5
58925: PUSH
58926: LD_INT 8
58928: PUSH
58929: LD_INT 9
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: PUSH
58937: LD_VAR 0 17
58941: ARRAY
58942: PPUSH
58943: LD_VAR 0 4
58947: PPUSH
58948: CALL_OW 380
58952: GO 58971
// PrepareHuman ( false , i , skill ) ;
58954: LD_INT 0
58956: PPUSH
58957: LD_VAR 0 8
58961: PPUSH
58962: LD_VAR 0 4
58966: PPUSH
58967: CALL_OW 380
// end else
58971: GO 58990
// PrepareHuman ( false , i , skill ) ;
58973: LD_INT 0
58975: PPUSH
58976: LD_VAR 0 8
58980: PPUSH
58981: LD_VAR 0 4
58985: PPUSH
58986: CALL_OW 380
// un := CreateHuman ;
58990: LD_ADDR_VAR 0 14
58994: PUSH
58995: CALL_OW 44
58999: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59000: LD_ADDR_VAR 0 7
59004: PUSH
59005: LD_VAR 0 7
59009: PPUSH
59010: LD_INT 1
59012: PPUSH
59013: LD_VAR 0 14
59017: PPUSH
59018: CALL_OW 2
59022: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59023: LD_VAR 0 14
59027: PPUSH
59028: LD_VAR 0 9
59032: PPUSH
59033: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59037: LD_VAR 0 9
59041: PPUSH
59042: CALL_OW 313
59046: PUSH
59047: LD_INT 6
59049: EQUAL
59050: PUSH
59051: LD_VAR 0 9
59055: PPUSH
59056: CALL_OW 266
59060: PUSH
59061: LD_INT 32
59063: PUSH
59064: LD_INT 31
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: IN
59071: OR
59072: IFFALSE 58886
59074: GO 58883
59076: POP
59077: POP
// end else
59078: GO 59460
// for j = 1 to x do
59080: LD_ADDR_VAR 0 9
59084: PUSH
59085: DOUBLE
59086: LD_INT 1
59088: DEC
59089: ST_TO_ADDR
59090: LD_VAR 0 13
59094: PUSH
59095: FOR_TO
59096: IFFALSE 59458
// begin InitHc ;
59098: CALL_OW 19
// if not f then
59102: LD_VAR 0 12
59106: NOT
59107: IFFALSE 59196
// begin PrepareHuman ( false , i , skill ) ;
59109: LD_INT 0
59111: PPUSH
59112: LD_VAR 0 8
59116: PPUSH
59117: LD_VAR 0 4
59121: PPUSH
59122: CALL_OW 380
// un := CreateHuman ;
59126: LD_ADDR_VAR 0 14
59130: PUSH
59131: CALL_OW 44
59135: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59136: LD_ADDR_VAR 0 7
59140: PUSH
59141: LD_VAR 0 7
59145: PPUSH
59146: LD_INT 1
59148: PPUSH
59149: LD_VAR 0 14
59153: PPUSH
59154: CALL_OW 2
59158: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59159: LD_VAR 0 14
59163: PPUSH
59164: LD_VAR 0 1
59168: PPUSH
59169: CALL_OW 250
59173: PPUSH
59174: LD_VAR 0 1
59178: PPUSH
59179: CALL_OW 251
59183: PPUSH
59184: LD_INT 10
59186: PPUSH
59187: LD_INT 0
59189: PPUSH
59190: CALL_OW 50
// continue ;
59194: GO 59095
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59196: LD_VAR 0 12
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: PPUSH
59205: CALL_OW 313
59209: PUSH
59210: LD_VAR 0 12
59214: PUSH
59215: LD_INT 1
59217: ARRAY
59218: PPUSH
59219: CALL_OW 266
59223: PUSH
59224: LD_INT 32
59226: PUSH
59227: LD_INT 31
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: IN
59234: AND
59235: PUSH
59236: LD_VAR 0 12
59240: PUSH
59241: LD_INT 1
59243: ARRAY
59244: PPUSH
59245: CALL_OW 313
59249: PUSH
59250: LD_INT 6
59252: EQUAL
59253: OR
59254: IFFALSE 59274
// f := Delete ( f , 1 ) ;
59256: LD_ADDR_VAR 0 12
59260: PUSH
59261: LD_VAR 0 12
59265: PPUSH
59266: LD_INT 1
59268: PPUSH
59269: CALL_OW 3
59273: ST_TO_ADDR
// if not f then
59274: LD_VAR 0 12
59278: NOT
59279: IFFALSE 59297
// begin x := x + 2 ;
59281: LD_ADDR_VAR 0 13
59285: PUSH
59286: LD_VAR 0 13
59290: PUSH
59291: LD_INT 2
59293: PLUS
59294: ST_TO_ADDR
// continue ;
59295: GO 59095
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59297: LD_VAR 0 12
59301: PUSH
59302: LD_INT 1
59304: ARRAY
59305: PPUSH
59306: CALL_OW 266
59310: PUSH
59311: LD_INT 5
59313: EQUAL
59314: IFFALSE 59388
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59316: LD_VAR 0 12
59320: PUSH
59321: LD_INT 1
59323: ARRAY
59324: PPUSH
59325: CALL_OW 313
59329: PUSH
59330: LD_INT 3
59332: LESS
59333: IFFALSE 59369
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59335: LD_INT 0
59337: PPUSH
59338: LD_INT 5
59340: PUSH
59341: LD_INT 8
59343: PUSH
59344: LD_INT 9
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: LIST
59351: PUSH
59352: LD_VAR 0 17
59356: ARRAY
59357: PPUSH
59358: LD_VAR 0 4
59362: PPUSH
59363: CALL_OW 380
59367: GO 59386
// PrepareHuman ( false , i , skill ) ;
59369: LD_INT 0
59371: PPUSH
59372: LD_VAR 0 8
59376: PPUSH
59377: LD_VAR 0 4
59381: PPUSH
59382: CALL_OW 380
// end else
59386: GO 59405
// PrepareHuman ( false , i , skill ) ;
59388: LD_INT 0
59390: PPUSH
59391: LD_VAR 0 8
59395: PPUSH
59396: LD_VAR 0 4
59400: PPUSH
59401: CALL_OW 380
// un := CreateHuman ;
59405: LD_ADDR_VAR 0 14
59409: PUSH
59410: CALL_OW 44
59414: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59415: LD_ADDR_VAR 0 7
59419: PUSH
59420: LD_VAR 0 7
59424: PPUSH
59425: LD_INT 1
59427: PPUSH
59428: LD_VAR 0 14
59432: PPUSH
59433: CALL_OW 2
59437: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
59438: LD_VAR 0 14
59442: PPUSH
59443: LD_VAR 0 12
59447: PUSH
59448: LD_INT 1
59450: ARRAY
59451: PPUSH
59452: CALL_OW 52
// end ;
59456: GO 59095
59458: POP
59459: POP
// end ;
59460: GO 58397
59462: POP
59463: POP
// result := result ^ buildings ;
59464: LD_ADDR_VAR 0 7
59468: PUSH
59469: LD_VAR 0 7
59473: PUSH
59474: LD_VAR 0 18
59478: ADD
59479: ST_TO_ADDR
// end else
59480: GO 59623
// begin for i = 1 to personel do
59482: LD_ADDR_VAR 0 8
59486: PUSH
59487: DOUBLE
59488: LD_INT 1
59490: DEC
59491: ST_TO_ADDR
59492: LD_VAR 0 6
59496: PUSH
59497: FOR_TO
59498: IFFALSE 59621
// begin if i > 4 then
59500: LD_VAR 0 8
59504: PUSH
59505: LD_INT 4
59507: GREATER
59508: IFFALSE 59512
// break ;
59510: GO 59621
// x := personel [ i ] ;
59512: LD_ADDR_VAR 0 13
59516: PUSH
59517: LD_VAR 0 6
59521: PUSH
59522: LD_VAR 0 8
59526: ARRAY
59527: ST_TO_ADDR
// if x = - 1 then
59528: LD_VAR 0 13
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: EQUAL
59537: IFFALSE 59541
// continue ;
59539: GO 59497
// PrepareHuman ( false , i , skill ) ;
59541: LD_INT 0
59543: PPUSH
59544: LD_VAR 0 8
59548: PPUSH
59549: LD_VAR 0 4
59553: PPUSH
59554: CALL_OW 380
// un := CreateHuman ;
59558: LD_ADDR_VAR 0 14
59562: PUSH
59563: CALL_OW 44
59567: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59568: LD_VAR 0 14
59572: PPUSH
59573: LD_VAR 0 1
59577: PPUSH
59578: CALL_OW 250
59582: PPUSH
59583: LD_VAR 0 1
59587: PPUSH
59588: CALL_OW 251
59592: PPUSH
59593: LD_INT 10
59595: PPUSH
59596: LD_INT 0
59598: PPUSH
59599: CALL_OW 50
// result := result ^ un ;
59603: LD_ADDR_VAR 0 7
59607: PUSH
59608: LD_VAR 0 7
59612: PUSH
59613: LD_VAR 0 14
59617: ADD
59618: ST_TO_ADDR
// end ;
59619: GO 59497
59621: POP
59622: POP
// end ; end ;
59623: LD_VAR 0 7
59627: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
59628: LD_INT 0
59630: PPUSH
59631: PPUSH
59632: PPUSH
59633: PPUSH
59634: PPUSH
59635: PPUSH
59636: PPUSH
59637: PPUSH
59638: PPUSH
59639: PPUSH
59640: PPUSH
59641: PPUSH
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
// result := false ;
59646: LD_ADDR_VAR 0 3
59650: PUSH
59651: LD_INT 0
59653: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
59654: LD_VAR 0 1
59658: NOT
59659: PUSH
59660: LD_VAR 0 1
59664: PPUSH
59665: CALL_OW 266
59669: PUSH
59670: LD_INT 32
59672: PUSH
59673: LD_INT 33
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: IN
59680: NOT
59681: OR
59682: IFFALSE 59686
// exit ;
59684: GO 60822
// nat := GetNation ( tower ) ;
59686: LD_ADDR_VAR 0 12
59690: PUSH
59691: LD_VAR 0 1
59695: PPUSH
59696: CALL_OW 248
59700: ST_TO_ADDR
// side := GetSide ( tower ) ;
59701: LD_ADDR_VAR 0 16
59705: PUSH
59706: LD_VAR 0 1
59710: PPUSH
59711: CALL_OW 255
59715: ST_TO_ADDR
// x := GetX ( tower ) ;
59716: LD_ADDR_VAR 0 10
59720: PUSH
59721: LD_VAR 0 1
59725: PPUSH
59726: CALL_OW 250
59730: ST_TO_ADDR
// y := GetY ( tower ) ;
59731: LD_ADDR_VAR 0 11
59735: PUSH
59736: LD_VAR 0 1
59740: PPUSH
59741: CALL_OW 251
59745: ST_TO_ADDR
// if not x or not y then
59746: LD_VAR 0 10
59750: NOT
59751: PUSH
59752: LD_VAR 0 11
59756: NOT
59757: OR
59758: IFFALSE 59762
// exit ;
59760: GO 60822
// weapon := 0 ;
59762: LD_ADDR_VAR 0 18
59766: PUSH
59767: LD_INT 0
59769: ST_TO_ADDR
// fac_list := [ ] ;
59770: LD_ADDR_VAR 0 17
59774: PUSH
59775: EMPTY
59776: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
59777: LD_ADDR_VAR 0 6
59781: PUSH
59782: LD_VAR 0 1
59786: PPUSH
59787: CALL_OW 274
59791: PPUSH
59792: LD_VAR 0 2
59796: PPUSH
59797: CALL 57400 0 2
59801: PPUSH
59802: LD_INT 30
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PPUSH
59812: CALL_OW 72
59816: ST_TO_ADDR
// if not factories then
59817: LD_VAR 0 6
59821: NOT
59822: IFFALSE 59826
// exit ;
59824: GO 60822
// for i in factories do
59826: LD_ADDR_VAR 0 8
59830: PUSH
59831: LD_VAR 0 6
59835: PUSH
59836: FOR_IN
59837: IFFALSE 59862
// fac_list := fac_list union AvailableWeaponList ( i ) ;
59839: LD_ADDR_VAR 0 17
59843: PUSH
59844: LD_VAR 0 17
59848: PUSH
59849: LD_VAR 0 8
59853: PPUSH
59854: CALL_OW 478
59858: UNION
59859: ST_TO_ADDR
59860: GO 59836
59862: POP
59863: POP
// if not fac_list then
59864: LD_VAR 0 17
59868: NOT
59869: IFFALSE 59873
// exit ;
59871: GO 60822
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
59873: LD_ADDR_VAR 0 5
59877: PUSH
59878: LD_INT 4
59880: PUSH
59881: LD_INT 5
59883: PUSH
59884: LD_INT 9
59886: PUSH
59887: LD_INT 10
59889: PUSH
59890: LD_INT 6
59892: PUSH
59893: LD_INT 7
59895: PUSH
59896: LD_INT 11
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 27
59910: PUSH
59911: LD_INT 28
59913: PUSH
59914: LD_INT 26
59916: PUSH
59917: LD_INT 30
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 43
59928: PUSH
59929: LD_INT 44
59931: PUSH
59932: LD_INT 46
59934: PUSH
59935: LD_INT 45
59937: PUSH
59938: LD_INT 47
59940: PUSH
59941: LD_INT 49
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: PUSH
59957: LD_VAR 0 12
59961: ARRAY
59962: ST_TO_ADDR
// for i in list do
59963: LD_ADDR_VAR 0 8
59967: PUSH
59968: LD_VAR 0 5
59972: PUSH
59973: FOR_IN
59974: IFFALSE 60007
// if not i in fac_list then
59976: LD_VAR 0 8
59980: PUSH
59981: LD_VAR 0 17
59985: IN
59986: NOT
59987: IFFALSE 60005
// list := list diff i ;
59989: LD_ADDR_VAR 0 5
59993: PUSH
59994: LD_VAR 0 5
59998: PUSH
59999: LD_VAR 0 8
60003: DIFF
60004: ST_TO_ADDR
60005: GO 59973
60007: POP
60008: POP
// if not list then
60009: LD_VAR 0 5
60013: NOT
60014: IFFALSE 60018
// exit ;
60016: GO 60822
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60018: LD_VAR 0 12
60022: PUSH
60023: LD_INT 3
60025: EQUAL
60026: PUSH
60027: LD_INT 49
60029: PUSH
60030: LD_VAR 0 5
60034: IN
60035: AND
60036: PUSH
60037: LD_INT 31
60039: PPUSH
60040: LD_VAR 0 16
60044: PPUSH
60045: CALL_OW 321
60049: PUSH
60050: LD_INT 2
60052: EQUAL
60053: AND
60054: IFFALSE 60114
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60056: LD_INT 22
60058: PUSH
60059: LD_VAR 0 16
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 35
60070: PUSH
60071: LD_INT 49
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 91
60080: PUSH
60081: LD_VAR 0 1
60085: PUSH
60086: LD_INT 10
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: PPUSH
60099: CALL_OW 69
60103: NOT
60104: IFFALSE 60114
// weapon := ru_time_lapser ;
60106: LD_ADDR_VAR 0 18
60110: PUSH
60111: LD_INT 49
60113: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60114: LD_VAR 0 12
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: IN
60129: PUSH
60130: LD_INT 11
60132: PUSH
60133: LD_VAR 0 5
60137: IN
60138: PUSH
60139: LD_INT 30
60141: PUSH
60142: LD_VAR 0 5
60146: IN
60147: OR
60148: AND
60149: PUSH
60150: LD_INT 6
60152: PPUSH
60153: LD_VAR 0 16
60157: PPUSH
60158: CALL_OW 321
60162: PUSH
60163: LD_INT 2
60165: EQUAL
60166: AND
60167: IFFALSE 60332
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60169: LD_INT 22
60171: PUSH
60172: LD_VAR 0 16
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: LD_INT 35
60186: PUSH
60187: LD_INT 11
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 35
60196: PUSH
60197: LD_INT 30
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 91
60211: PUSH
60212: LD_VAR 0 1
60216: PUSH
60217: LD_INT 18
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: PPUSH
60230: CALL_OW 69
60234: NOT
60235: PUSH
60236: LD_INT 22
60238: PUSH
60239: LD_VAR 0 16
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 30
60253: PUSH
60254: LD_INT 32
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 30
60263: PUSH
60264: LD_INT 33
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 91
60278: PUSH
60279: LD_VAR 0 1
60283: PUSH
60284: LD_INT 12
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: PUSH
60297: EMPTY
60298: LIST
60299: PPUSH
60300: CALL_OW 69
60304: PUSH
60305: LD_INT 2
60307: GREATER
60308: AND
60309: IFFALSE 60332
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60311: LD_ADDR_VAR 0 18
60315: PUSH
60316: LD_INT 11
60318: PUSH
60319: LD_INT 30
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_VAR 0 12
60330: ARRAY
60331: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60332: LD_VAR 0 18
60336: NOT
60337: PUSH
60338: LD_INT 40
60340: PPUSH
60341: LD_VAR 0 16
60345: PPUSH
60346: CALL_OW 321
60350: PUSH
60351: LD_INT 2
60353: EQUAL
60354: AND
60355: PUSH
60356: LD_INT 7
60358: PUSH
60359: LD_VAR 0 5
60363: IN
60364: PUSH
60365: LD_INT 28
60367: PUSH
60368: LD_VAR 0 5
60372: IN
60373: OR
60374: PUSH
60375: LD_INT 45
60377: PUSH
60378: LD_VAR 0 5
60382: IN
60383: OR
60384: AND
60385: IFFALSE 60639
// begin hex := GetHexInfo ( x , y ) ;
60387: LD_ADDR_VAR 0 4
60391: PUSH
60392: LD_VAR 0 10
60396: PPUSH
60397: LD_VAR 0 11
60401: PPUSH
60402: CALL_OW 546
60406: ST_TO_ADDR
// if hex [ 1 ] then
60407: LD_VAR 0 4
60411: PUSH
60412: LD_INT 1
60414: ARRAY
60415: IFFALSE 60419
// exit ;
60417: GO 60822
// height := hex [ 2 ] ;
60419: LD_ADDR_VAR 0 15
60423: PUSH
60424: LD_VAR 0 4
60428: PUSH
60429: LD_INT 2
60431: ARRAY
60432: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60433: LD_ADDR_VAR 0 14
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 5
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: ST_TO_ADDR
// for i in tmp do
60456: LD_ADDR_VAR 0 8
60460: PUSH
60461: LD_VAR 0 14
60465: PUSH
60466: FOR_IN
60467: IFFALSE 60637
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
60469: LD_ADDR_VAR 0 9
60473: PUSH
60474: LD_VAR 0 10
60478: PPUSH
60479: LD_VAR 0 8
60483: PPUSH
60484: LD_INT 5
60486: PPUSH
60487: CALL_OW 272
60491: PUSH
60492: LD_VAR 0 11
60496: PPUSH
60497: LD_VAR 0 8
60501: PPUSH
60502: LD_INT 5
60504: PPUSH
60505: CALL_OW 273
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
60514: LD_VAR 0 9
60518: PUSH
60519: LD_INT 1
60521: ARRAY
60522: PPUSH
60523: LD_VAR 0 9
60527: PUSH
60528: LD_INT 2
60530: ARRAY
60531: PPUSH
60532: CALL_OW 488
60536: IFFALSE 60635
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
60538: LD_ADDR_VAR 0 4
60542: PUSH
60543: LD_VAR 0 9
60547: PUSH
60548: LD_INT 1
60550: ARRAY
60551: PPUSH
60552: LD_VAR 0 9
60556: PUSH
60557: LD_INT 2
60559: ARRAY
60560: PPUSH
60561: CALL_OW 546
60565: ST_TO_ADDR
// if hex [ 1 ] then
60566: LD_VAR 0 4
60570: PUSH
60571: LD_INT 1
60573: ARRAY
60574: IFFALSE 60578
// continue ;
60576: GO 60466
// h := hex [ 2 ] ;
60578: LD_ADDR_VAR 0 13
60582: PUSH
60583: LD_VAR 0 4
60587: PUSH
60588: LD_INT 2
60590: ARRAY
60591: ST_TO_ADDR
// if h + 7 < height then
60592: LD_VAR 0 13
60596: PUSH
60597: LD_INT 7
60599: PLUS
60600: PUSH
60601: LD_VAR 0 15
60605: LESS
60606: IFFALSE 60635
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
60608: LD_ADDR_VAR 0 18
60612: PUSH
60613: LD_INT 7
60615: PUSH
60616: LD_INT 28
60618: PUSH
60619: LD_INT 45
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 12
60631: ARRAY
60632: ST_TO_ADDR
// break ;
60633: GO 60637
// end ; end ; end ;
60635: GO 60466
60637: POP
60638: POP
// end ; if not weapon then
60639: LD_VAR 0 18
60643: NOT
60644: IFFALSE 60704
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
60646: LD_ADDR_VAR 0 5
60650: PUSH
60651: LD_VAR 0 5
60655: PUSH
60656: LD_INT 11
60658: PUSH
60659: LD_INT 30
60661: PUSH
60662: LD_INT 49
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: LIST
60669: DIFF
60670: ST_TO_ADDR
// if not list then
60671: LD_VAR 0 5
60675: NOT
60676: IFFALSE 60680
// exit ;
60678: GO 60822
// weapon := list [ rand ( 1 , list ) ] ;
60680: LD_ADDR_VAR 0 18
60684: PUSH
60685: LD_VAR 0 5
60689: PUSH
60690: LD_INT 1
60692: PPUSH
60693: LD_VAR 0 5
60697: PPUSH
60698: CALL_OW 12
60702: ARRAY
60703: ST_TO_ADDR
// end ; if weapon then
60704: LD_VAR 0 18
60708: IFFALSE 60822
// begin tmp := CostOfWeapon ( weapon ) ;
60710: LD_ADDR_VAR 0 14
60714: PUSH
60715: LD_VAR 0 18
60719: PPUSH
60720: CALL_OW 451
60724: ST_TO_ADDR
// j := GetBase ( tower ) ;
60725: LD_ADDR_VAR 0 9
60729: PUSH
60730: LD_VAR 0 1
60734: PPUSH
60735: CALL_OW 274
60739: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
60740: LD_VAR 0 9
60744: PPUSH
60745: LD_INT 1
60747: PPUSH
60748: CALL_OW 275
60752: PUSH
60753: LD_VAR 0 14
60757: PUSH
60758: LD_INT 1
60760: ARRAY
60761: GREATEREQUAL
60762: PUSH
60763: LD_VAR 0 9
60767: PPUSH
60768: LD_INT 2
60770: PPUSH
60771: CALL_OW 275
60775: PUSH
60776: LD_VAR 0 14
60780: PUSH
60781: LD_INT 2
60783: ARRAY
60784: GREATEREQUAL
60785: AND
60786: PUSH
60787: LD_VAR 0 9
60791: PPUSH
60792: LD_INT 3
60794: PPUSH
60795: CALL_OW 275
60799: PUSH
60800: LD_VAR 0 14
60804: PUSH
60805: LD_INT 3
60807: ARRAY
60808: GREATEREQUAL
60809: AND
60810: IFFALSE 60822
// result := weapon ;
60812: LD_ADDR_VAR 0 3
60816: PUSH
60817: LD_VAR 0 18
60821: ST_TO_ADDR
// end ; end ;
60822: LD_VAR 0 3
60826: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
60827: LD_INT 0
60829: PPUSH
60830: PPUSH
// result := true ;
60831: LD_ADDR_VAR 0 3
60835: PUSH
60836: LD_INT 1
60838: ST_TO_ADDR
// if array1 = array2 then
60839: LD_VAR 0 1
60843: PUSH
60844: LD_VAR 0 2
60848: EQUAL
60849: IFFALSE 60909
// begin for i = 1 to array1 do
60851: LD_ADDR_VAR 0 4
60855: PUSH
60856: DOUBLE
60857: LD_INT 1
60859: DEC
60860: ST_TO_ADDR
60861: LD_VAR 0 1
60865: PUSH
60866: FOR_TO
60867: IFFALSE 60905
// if array1 [ i ] <> array2 [ i ] then
60869: LD_VAR 0 1
60873: PUSH
60874: LD_VAR 0 4
60878: ARRAY
60879: PUSH
60880: LD_VAR 0 2
60884: PUSH
60885: LD_VAR 0 4
60889: ARRAY
60890: NONEQUAL
60891: IFFALSE 60903
// begin result := false ;
60893: LD_ADDR_VAR 0 3
60897: PUSH
60898: LD_INT 0
60900: ST_TO_ADDR
// break ;
60901: GO 60905
// end ;
60903: GO 60866
60905: POP
60906: POP
// end else
60907: GO 60917
// result := false ;
60909: LD_ADDR_VAR 0 3
60913: PUSH
60914: LD_INT 0
60916: ST_TO_ADDR
// end ;
60917: LD_VAR 0 3
60921: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
60922: LD_INT 0
60924: PPUSH
60925: PPUSH
60926: PPUSH
// pom := GetBase ( fac ) ;
60927: LD_ADDR_VAR 0 5
60931: PUSH
60932: LD_VAR 0 1
60936: PPUSH
60937: CALL_OW 274
60941: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
60942: LD_ADDR_VAR 0 4
60946: PUSH
60947: LD_VAR 0 2
60951: PUSH
60952: LD_INT 1
60954: ARRAY
60955: PPUSH
60956: LD_VAR 0 2
60960: PUSH
60961: LD_INT 2
60963: ARRAY
60964: PPUSH
60965: LD_VAR 0 2
60969: PUSH
60970: LD_INT 3
60972: ARRAY
60973: PPUSH
60974: LD_VAR 0 2
60978: PUSH
60979: LD_INT 4
60981: ARRAY
60982: PPUSH
60983: CALL_OW 449
60987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60988: LD_ADDR_VAR 0 3
60992: PUSH
60993: LD_VAR 0 5
60997: PPUSH
60998: LD_INT 1
61000: PPUSH
61001: CALL_OW 275
61005: PUSH
61006: LD_VAR 0 4
61010: PUSH
61011: LD_INT 1
61013: ARRAY
61014: GREATEREQUAL
61015: PUSH
61016: LD_VAR 0 5
61020: PPUSH
61021: LD_INT 2
61023: PPUSH
61024: CALL_OW 275
61028: PUSH
61029: LD_VAR 0 4
61033: PUSH
61034: LD_INT 2
61036: ARRAY
61037: GREATEREQUAL
61038: AND
61039: PUSH
61040: LD_VAR 0 5
61044: PPUSH
61045: LD_INT 3
61047: PPUSH
61048: CALL_OW 275
61052: PUSH
61053: LD_VAR 0 4
61057: PUSH
61058: LD_INT 3
61060: ARRAY
61061: GREATEREQUAL
61062: AND
61063: ST_TO_ADDR
// end ;
61064: LD_VAR 0 3
61068: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61069: LD_INT 0
61071: PPUSH
61072: PPUSH
61073: PPUSH
61074: PPUSH
// pom := GetBase ( building ) ;
61075: LD_ADDR_VAR 0 3
61079: PUSH
61080: LD_VAR 0 1
61084: PPUSH
61085: CALL_OW 274
61089: ST_TO_ADDR
// if not pom then
61090: LD_VAR 0 3
61094: NOT
61095: IFFALSE 61099
// exit ;
61097: GO 61269
// btype := GetBType ( building ) ;
61099: LD_ADDR_VAR 0 5
61103: PUSH
61104: LD_VAR 0 1
61108: PPUSH
61109: CALL_OW 266
61113: ST_TO_ADDR
// if btype = b_armoury then
61114: LD_VAR 0 5
61118: PUSH
61119: LD_INT 4
61121: EQUAL
61122: IFFALSE 61132
// btype := b_barracks ;
61124: LD_ADDR_VAR 0 5
61128: PUSH
61129: LD_INT 5
61131: ST_TO_ADDR
// if btype = b_depot then
61132: LD_VAR 0 5
61136: PUSH
61137: LD_INT 0
61139: EQUAL
61140: IFFALSE 61150
// btype := b_warehouse ;
61142: LD_ADDR_VAR 0 5
61146: PUSH
61147: LD_INT 1
61149: ST_TO_ADDR
// if btype = b_workshop then
61150: LD_VAR 0 5
61154: PUSH
61155: LD_INT 2
61157: EQUAL
61158: IFFALSE 61168
// btype := b_factory ;
61160: LD_ADDR_VAR 0 5
61164: PUSH
61165: LD_INT 3
61167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61168: LD_ADDR_VAR 0 4
61172: PUSH
61173: LD_VAR 0 5
61177: PPUSH
61178: LD_VAR 0 1
61182: PPUSH
61183: CALL_OW 248
61187: PPUSH
61188: CALL_OW 450
61192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61193: LD_ADDR_VAR 0 2
61197: PUSH
61198: LD_VAR 0 3
61202: PPUSH
61203: LD_INT 1
61205: PPUSH
61206: CALL_OW 275
61210: PUSH
61211: LD_VAR 0 4
61215: PUSH
61216: LD_INT 1
61218: ARRAY
61219: GREATEREQUAL
61220: PUSH
61221: LD_VAR 0 3
61225: PPUSH
61226: LD_INT 2
61228: PPUSH
61229: CALL_OW 275
61233: PUSH
61234: LD_VAR 0 4
61238: PUSH
61239: LD_INT 2
61241: ARRAY
61242: GREATEREQUAL
61243: AND
61244: PUSH
61245: LD_VAR 0 3
61249: PPUSH
61250: LD_INT 3
61252: PPUSH
61253: CALL_OW 275
61257: PUSH
61258: LD_VAR 0 4
61262: PUSH
61263: LD_INT 3
61265: ARRAY
61266: GREATEREQUAL
61267: AND
61268: ST_TO_ADDR
// end ;
61269: LD_VAR 0 2
61273: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61274: LD_INT 0
61276: PPUSH
61277: PPUSH
61278: PPUSH
// pom := GetBase ( building ) ;
61279: LD_ADDR_VAR 0 4
61283: PUSH
61284: LD_VAR 0 1
61288: PPUSH
61289: CALL_OW 274
61293: ST_TO_ADDR
// if not pom then
61294: LD_VAR 0 4
61298: NOT
61299: IFFALSE 61303
// exit ;
61301: GO 61404
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61303: LD_ADDR_VAR 0 5
61307: PUSH
61308: LD_VAR 0 2
61312: PPUSH
61313: LD_VAR 0 1
61317: PPUSH
61318: CALL_OW 248
61322: PPUSH
61323: CALL_OW 450
61327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61328: LD_ADDR_VAR 0 3
61332: PUSH
61333: LD_VAR 0 4
61337: PPUSH
61338: LD_INT 1
61340: PPUSH
61341: CALL_OW 275
61345: PUSH
61346: LD_VAR 0 5
61350: PUSH
61351: LD_INT 1
61353: ARRAY
61354: GREATEREQUAL
61355: PUSH
61356: LD_VAR 0 4
61360: PPUSH
61361: LD_INT 2
61363: PPUSH
61364: CALL_OW 275
61368: PUSH
61369: LD_VAR 0 5
61373: PUSH
61374: LD_INT 2
61376: ARRAY
61377: GREATEREQUAL
61378: AND
61379: PUSH
61380: LD_VAR 0 4
61384: PPUSH
61385: LD_INT 3
61387: PPUSH
61388: CALL_OW 275
61392: PUSH
61393: LD_VAR 0 5
61397: PUSH
61398: LD_INT 3
61400: ARRAY
61401: GREATEREQUAL
61402: AND
61403: ST_TO_ADDR
// end ;
61404: LD_VAR 0 3
61408: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
61409: LD_INT 0
61411: PPUSH
61412: PPUSH
61413: PPUSH
61414: PPUSH
61415: PPUSH
61416: PPUSH
61417: PPUSH
61418: PPUSH
61419: PPUSH
61420: PPUSH
// result := false ;
61421: LD_ADDR_VAR 0 6
61425: PUSH
61426: LD_INT 0
61428: ST_TO_ADDR
// if not base or not btype or not x or not y then
61429: LD_VAR 0 1
61433: NOT
61434: PUSH
61435: LD_VAR 0 2
61439: NOT
61440: OR
61441: PUSH
61442: LD_VAR 0 3
61446: NOT
61447: OR
61448: PUSH
61449: LD_VAR 0 4
61453: NOT
61454: OR
61455: IFFALSE 61459
// exit ;
61457: GO 62068
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
61459: LD_ADDR_VAR 0 12
61463: PUSH
61464: LD_VAR 0 2
61468: PPUSH
61469: LD_VAR 0 3
61473: PPUSH
61474: LD_VAR 0 4
61478: PPUSH
61479: LD_VAR 0 5
61483: PPUSH
61484: LD_VAR 0 1
61488: PUSH
61489: LD_INT 1
61491: ARRAY
61492: PPUSH
61493: CALL_OW 248
61497: PPUSH
61498: LD_INT 0
61500: PPUSH
61501: CALL 62905 0 6
61505: ST_TO_ADDR
// if not hexes then
61506: LD_VAR 0 12
61510: NOT
61511: IFFALSE 61515
// exit ;
61513: GO 62068
// for i = 1 to hexes do
61515: LD_ADDR_VAR 0 7
61519: PUSH
61520: DOUBLE
61521: LD_INT 1
61523: DEC
61524: ST_TO_ADDR
61525: LD_VAR 0 12
61529: PUSH
61530: FOR_TO
61531: IFFALSE 62066
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61533: LD_ADDR_VAR 0 11
61537: PUSH
61538: LD_VAR 0 12
61542: PUSH
61543: LD_VAR 0 7
61547: ARRAY
61548: PUSH
61549: LD_INT 1
61551: ARRAY
61552: PPUSH
61553: LD_VAR 0 12
61557: PUSH
61558: LD_VAR 0 7
61562: ARRAY
61563: PUSH
61564: LD_INT 2
61566: ARRAY
61567: PPUSH
61568: CALL_OW 428
61572: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
61573: LD_VAR 0 12
61577: PUSH
61578: LD_VAR 0 7
61582: ARRAY
61583: PUSH
61584: LD_INT 1
61586: ARRAY
61587: PPUSH
61588: LD_VAR 0 12
61592: PUSH
61593: LD_VAR 0 7
61597: ARRAY
61598: PUSH
61599: LD_INT 2
61601: ARRAY
61602: PPUSH
61603: CALL_OW 351
61607: PUSH
61608: LD_VAR 0 12
61612: PUSH
61613: LD_VAR 0 7
61617: ARRAY
61618: PUSH
61619: LD_INT 1
61621: ARRAY
61622: PPUSH
61623: LD_VAR 0 12
61627: PUSH
61628: LD_VAR 0 7
61632: ARRAY
61633: PUSH
61634: LD_INT 2
61636: ARRAY
61637: PPUSH
61638: CALL_OW 488
61642: NOT
61643: OR
61644: PUSH
61645: LD_VAR 0 11
61649: PPUSH
61650: CALL_OW 247
61654: PUSH
61655: LD_INT 3
61657: EQUAL
61658: OR
61659: IFFALSE 61665
// exit ;
61661: POP
61662: POP
61663: GO 62068
// if not tmp or not tmp in base then
61665: LD_VAR 0 11
61669: NOT
61670: PUSH
61671: LD_VAR 0 11
61675: PUSH
61676: LD_VAR 0 1
61680: IN
61681: NOT
61682: OR
61683: IFFALSE 61687
// continue ;
61685: GO 61530
// result := true ;
61687: LD_ADDR_VAR 0 6
61691: PUSH
61692: LD_INT 1
61694: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61695: LD_ADDR_VAR 0 15
61699: PUSH
61700: LD_VAR 0 1
61704: PPUSH
61705: LD_INT 22
61707: PUSH
61708: LD_VAR 0 11
61712: PPUSH
61713: CALL_OW 255
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 30
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 30
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PPUSH
61754: CALL_OW 72
61758: ST_TO_ADDR
// if dep then
61759: LD_VAR 0 15
61763: IFFALSE 61899
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
61765: LD_ADDR_VAR 0 14
61769: PUSH
61770: LD_VAR 0 15
61774: PUSH
61775: LD_INT 1
61777: ARRAY
61778: PPUSH
61779: CALL_OW 250
61783: PPUSH
61784: LD_VAR 0 15
61788: PUSH
61789: LD_INT 1
61791: ARRAY
61792: PPUSH
61793: CALL_OW 254
61797: PPUSH
61798: LD_INT 5
61800: PPUSH
61801: CALL_OW 272
61805: PUSH
61806: LD_VAR 0 15
61810: PUSH
61811: LD_INT 1
61813: ARRAY
61814: PPUSH
61815: CALL_OW 251
61819: PPUSH
61820: LD_VAR 0 15
61824: PUSH
61825: LD_INT 1
61827: ARRAY
61828: PPUSH
61829: CALL_OW 254
61833: PPUSH
61834: LD_INT 5
61836: PPUSH
61837: CALL_OW 273
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
61846: LD_VAR 0 14
61850: PUSH
61851: LD_INT 1
61853: ARRAY
61854: PPUSH
61855: LD_VAR 0 14
61859: PUSH
61860: LD_INT 2
61862: ARRAY
61863: PPUSH
61864: CALL_OW 488
61868: IFFALSE 61899
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
61870: LD_VAR 0 11
61874: PPUSH
61875: LD_VAR 0 14
61879: PUSH
61880: LD_INT 1
61882: ARRAY
61883: PPUSH
61884: LD_VAR 0 14
61888: PUSH
61889: LD_INT 2
61891: ARRAY
61892: PPUSH
61893: CALL_OW 111
// continue ;
61897: GO 61530
// end ; end ; r := GetDir ( tmp ) ;
61899: LD_ADDR_VAR 0 13
61903: PUSH
61904: LD_VAR 0 11
61908: PPUSH
61909: CALL_OW 254
61913: ST_TO_ADDR
// if r = 5 then
61914: LD_VAR 0 13
61918: PUSH
61919: LD_INT 5
61921: EQUAL
61922: IFFALSE 61932
// r := 0 ;
61924: LD_ADDR_VAR 0 13
61928: PUSH
61929: LD_INT 0
61931: ST_TO_ADDR
// for j = r to 5 do
61932: LD_ADDR_VAR 0 8
61936: PUSH
61937: DOUBLE
61938: LD_VAR 0 13
61942: DEC
61943: ST_TO_ADDR
61944: LD_INT 5
61946: PUSH
61947: FOR_TO
61948: IFFALSE 62062
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
61950: LD_ADDR_VAR 0 9
61954: PUSH
61955: LD_VAR 0 11
61959: PPUSH
61960: CALL_OW 250
61964: PPUSH
61965: LD_VAR 0 8
61969: PPUSH
61970: LD_INT 2
61972: PPUSH
61973: CALL_OW 272
61977: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
61978: LD_ADDR_VAR 0 10
61982: PUSH
61983: LD_VAR 0 11
61987: PPUSH
61988: CALL_OW 251
61992: PPUSH
61993: LD_VAR 0 8
61997: PPUSH
61998: LD_INT 2
62000: PPUSH
62001: CALL_OW 273
62005: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62006: LD_VAR 0 9
62010: PPUSH
62011: LD_VAR 0 10
62015: PPUSH
62016: CALL_OW 488
62020: PUSH
62021: LD_VAR 0 9
62025: PPUSH
62026: LD_VAR 0 10
62030: PPUSH
62031: CALL_OW 428
62035: NOT
62036: AND
62037: IFFALSE 62060
// begin ComMoveXY ( tmp , _x , _y ) ;
62039: LD_VAR 0 11
62043: PPUSH
62044: LD_VAR 0 9
62048: PPUSH
62049: LD_VAR 0 10
62053: PPUSH
62054: CALL_OW 111
// break ;
62058: GO 62062
// end ; end ;
62060: GO 61947
62062: POP
62063: POP
// end ;
62064: GO 61530
62066: POP
62067: POP
// end ;
62068: LD_VAR 0 6
62072: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
62073: LD_INT 0
62075: PPUSH
62076: PPUSH
62077: PPUSH
62078: PPUSH
62079: PPUSH
62080: PPUSH
62081: PPUSH
62082: PPUSH
62083: PPUSH
62084: PPUSH
// result := false ;
62085: LD_ADDR_VAR 0 6
62089: PUSH
62090: LD_INT 0
62092: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
62093: LD_VAR 0 1
62097: NOT
62098: PUSH
62099: LD_VAR 0 1
62103: PPUSH
62104: CALL_OW 266
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: IN
62119: NOT
62120: OR
62121: PUSH
62122: LD_VAR 0 2
62126: NOT
62127: OR
62128: PUSH
62129: LD_VAR 0 5
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: LD_INT 4
62148: PUSH
62149: LD_INT 5
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: IN
62160: NOT
62161: OR
62162: PUSH
62163: LD_VAR 0 3
62167: PPUSH
62168: LD_VAR 0 4
62172: PPUSH
62173: CALL_OW 488
62177: NOT
62178: OR
62179: IFFALSE 62183
// exit ;
62181: GO 62900
// pom := GetBase ( depot ) ;
62183: LD_ADDR_VAR 0 10
62187: PUSH
62188: LD_VAR 0 1
62192: PPUSH
62193: CALL_OW 274
62197: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62198: LD_ADDR_VAR 0 11
62202: PUSH
62203: LD_VAR 0 2
62207: PPUSH
62208: LD_VAR 0 1
62212: PPUSH
62213: CALL_OW 248
62217: PPUSH
62218: CALL_OW 450
62222: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
62223: LD_VAR 0 10
62227: PPUSH
62228: LD_INT 1
62230: PPUSH
62231: CALL_OW 275
62235: PUSH
62236: LD_VAR 0 11
62240: PUSH
62241: LD_INT 1
62243: ARRAY
62244: GREATEREQUAL
62245: PUSH
62246: LD_VAR 0 10
62250: PPUSH
62251: LD_INT 2
62253: PPUSH
62254: CALL_OW 275
62258: PUSH
62259: LD_VAR 0 11
62263: PUSH
62264: LD_INT 2
62266: ARRAY
62267: GREATEREQUAL
62268: AND
62269: PUSH
62270: LD_VAR 0 10
62274: PPUSH
62275: LD_INT 3
62277: PPUSH
62278: CALL_OW 275
62282: PUSH
62283: LD_VAR 0 11
62287: PUSH
62288: LD_INT 3
62290: ARRAY
62291: GREATEREQUAL
62292: AND
62293: NOT
62294: IFFALSE 62298
// exit ;
62296: GO 62900
// if GetBType ( depot ) = b_depot then
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 266
62307: PUSH
62308: LD_INT 0
62310: EQUAL
62311: IFFALSE 62323
// dist := 28 else
62313: LD_ADDR_VAR 0 14
62317: PUSH
62318: LD_INT 28
62320: ST_TO_ADDR
62321: GO 62331
// dist := 36 ;
62323: LD_ADDR_VAR 0 14
62327: PUSH
62328: LD_INT 36
62330: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
62331: LD_VAR 0 1
62335: PPUSH
62336: LD_VAR 0 3
62340: PPUSH
62341: LD_VAR 0 4
62345: PPUSH
62346: CALL_OW 297
62350: PUSH
62351: LD_VAR 0 14
62355: GREATER
62356: IFFALSE 62360
// exit ;
62358: GO 62900
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
62360: LD_ADDR_VAR 0 12
62364: PUSH
62365: LD_VAR 0 2
62369: PPUSH
62370: LD_VAR 0 3
62374: PPUSH
62375: LD_VAR 0 4
62379: PPUSH
62380: LD_VAR 0 5
62384: PPUSH
62385: LD_VAR 0 1
62389: PPUSH
62390: CALL_OW 248
62394: PPUSH
62395: LD_INT 0
62397: PPUSH
62398: CALL 62905 0 6
62402: ST_TO_ADDR
// if not hexes then
62403: LD_VAR 0 12
62407: NOT
62408: IFFALSE 62412
// exit ;
62410: GO 62900
// hex := GetHexInfo ( x , y ) ;
62412: LD_ADDR_VAR 0 15
62416: PUSH
62417: LD_VAR 0 3
62421: PPUSH
62422: LD_VAR 0 4
62426: PPUSH
62427: CALL_OW 546
62431: ST_TO_ADDR
// if hex [ 1 ] then
62432: LD_VAR 0 15
62436: PUSH
62437: LD_INT 1
62439: ARRAY
62440: IFFALSE 62444
// exit ;
62442: GO 62900
// height := hex [ 2 ] ;
62444: LD_ADDR_VAR 0 13
62448: PUSH
62449: LD_VAR 0 15
62453: PUSH
62454: LD_INT 2
62456: ARRAY
62457: ST_TO_ADDR
// for i = 1 to hexes do
62458: LD_ADDR_VAR 0 7
62462: PUSH
62463: DOUBLE
62464: LD_INT 1
62466: DEC
62467: ST_TO_ADDR
62468: LD_VAR 0 12
62472: PUSH
62473: FOR_TO
62474: IFFALSE 62804
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
62476: LD_VAR 0 12
62480: PUSH
62481: LD_VAR 0 7
62485: ARRAY
62486: PUSH
62487: LD_INT 1
62489: ARRAY
62490: PPUSH
62491: LD_VAR 0 12
62495: PUSH
62496: LD_VAR 0 7
62500: ARRAY
62501: PUSH
62502: LD_INT 2
62504: ARRAY
62505: PPUSH
62506: CALL_OW 488
62510: NOT
62511: PUSH
62512: LD_VAR 0 12
62516: PUSH
62517: LD_VAR 0 7
62521: ARRAY
62522: PUSH
62523: LD_INT 1
62525: ARRAY
62526: PPUSH
62527: LD_VAR 0 12
62531: PUSH
62532: LD_VAR 0 7
62536: ARRAY
62537: PUSH
62538: LD_INT 2
62540: ARRAY
62541: PPUSH
62542: CALL_OW 428
62546: PUSH
62547: LD_INT 0
62549: GREATER
62550: OR
62551: PUSH
62552: LD_VAR 0 12
62556: PUSH
62557: LD_VAR 0 7
62561: ARRAY
62562: PUSH
62563: LD_INT 1
62565: ARRAY
62566: PPUSH
62567: LD_VAR 0 12
62571: PUSH
62572: LD_VAR 0 7
62576: ARRAY
62577: PUSH
62578: LD_INT 2
62580: ARRAY
62581: PPUSH
62582: CALL_OW 351
62586: OR
62587: IFFALSE 62593
// exit ;
62589: POP
62590: POP
62591: GO 62900
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62593: LD_ADDR_VAR 0 8
62597: PUSH
62598: LD_VAR 0 12
62602: PUSH
62603: LD_VAR 0 7
62607: ARRAY
62608: PUSH
62609: LD_INT 1
62611: ARRAY
62612: PPUSH
62613: LD_VAR 0 12
62617: PUSH
62618: LD_VAR 0 7
62622: ARRAY
62623: PUSH
62624: LD_INT 2
62626: ARRAY
62627: PPUSH
62628: CALL_OW 546
62632: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
62633: LD_VAR 0 8
62637: PUSH
62638: LD_INT 1
62640: ARRAY
62641: PUSH
62642: LD_VAR 0 8
62646: PUSH
62647: LD_INT 2
62649: ARRAY
62650: PUSH
62651: LD_VAR 0 13
62655: PUSH
62656: LD_INT 2
62658: PLUS
62659: GREATER
62660: OR
62661: PUSH
62662: LD_VAR 0 8
62666: PUSH
62667: LD_INT 2
62669: ARRAY
62670: PUSH
62671: LD_VAR 0 13
62675: PUSH
62676: LD_INT 2
62678: MINUS
62679: LESS
62680: OR
62681: PUSH
62682: LD_VAR 0 8
62686: PUSH
62687: LD_INT 3
62689: ARRAY
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 8
62696: PUSH
62697: LD_INT 9
62699: PUSH
62700: LD_INT 10
62702: PUSH
62703: LD_INT 11
62705: PUSH
62706: LD_INT 12
62708: PUSH
62709: LD_INT 13
62711: PUSH
62712: LD_INT 16
62714: PUSH
62715: LD_INT 17
62717: PUSH
62718: LD_INT 18
62720: PUSH
62721: LD_INT 19
62723: PUSH
62724: LD_INT 20
62726: PUSH
62727: LD_INT 21
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: IN
62745: NOT
62746: OR
62747: PUSH
62748: LD_VAR 0 8
62752: PUSH
62753: LD_INT 5
62755: ARRAY
62756: NOT
62757: OR
62758: PUSH
62759: LD_VAR 0 8
62763: PUSH
62764: LD_INT 6
62766: ARRAY
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: LD_INT 7
62776: PUSH
62777: LD_INT 9
62779: PUSH
62780: LD_INT 10
62782: PUSH
62783: LD_INT 11
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: IN
62794: NOT
62795: OR
62796: IFFALSE 62802
// exit ;
62798: POP
62799: POP
62800: GO 62900
// end ;
62802: GO 62473
62804: POP
62805: POP
// side := GetSide ( depot ) ;
62806: LD_ADDR_VAR 0 9
62810: PUSH
62811: LD_VAR 0 1
62815: PPUSH
62816: CALL_OW 255
62820: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
62821: LD_VAR 0 9
62825: PPUSH
62826: LD_VAR 0 3
62830: PPUSH
62831: LD_VAR 0 4
62835: PPUSH
62836: LD_INT 20
62838: PPUSH
62839: CALL 55554 0 4
62843: PUSH
62844: LD_INT 4
62846: ARRAY
62847: IFFALSE 62851
// exit ;
62849: GO 62900
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
62851: LD_VAR 0 2
62855: PUSH
62856: LD_INT 29
62858: PUSH
62859: LD_INT 30
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: IN
62866: PUSH
62867: LD_VAR 0 3
62871: PPUSH
62872: LD_VAR 0 4
62876: PPUSH
62877: LD_VAR 0 9
62881: PPUSH
62882: CALL_OW 440
62886: NOT
62887: AND
62888: IFFALSE 62892
// exit ;
62890: GO 62900
// result := true ;
62892: LD_ADDR_VAR 0 6
62896: PUSH
62897: LD_INT 1
62899: ST_TO_ADDR
// end ;
62900: LD_VAR 0 6
62904: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
62905: LD_INT 0
62907: PPUSH
62908: PPUSH
62909: PPUSH
62910: PPUSH
62911: PPUSH
62912: PPUSH
62913: PPUSH
62914: PPUSH
62915: PPUSH
62916: PPUSH
62917: PPUSH
62918: PPUSH
62919: PPUSH
62920: PPUSH
62921: PPUSH
62922: PPUSH
62923: PPUSH
62924: PPUSH
62925: PPUSH
62926: PPUSH
62927: PPUSH
62928: PPUSH
62929: PPUSH
62930: PPUSH
62931: PPUSH
62932: PPUSH
62933: PPUSH
62934: PPUSH
62935: PPUSH
62936: PPUSH
62937: PPUSH
62938: PPUSH
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
62943: PPUSH
62944: PPUSH
62945: PPUSH
62946: PPUSH
62947: PPUSH
62948: PPUSH
62949: PPUSH
62950: PPUSH
62951: PPUSH
62952: PPUSH
62953: PPUSH
62954: PPUSH
62955: PPUSH
62956: PPUSH
62957: PPUSH
62958: PPUSH
62959: PPUSH
62960: PPUSH
62961: PPUSH
62962: PPUSH
62963: PPUSH
62964: PPUSH
// result = [ ] ;
62965: LD_ADDR_VAR 0 7
62969: PUSH
62970: EMPTY
62971: ST_TO_ADDR
// temp_list = [ ] ;
62972: LD_ADDR_VAR 0 9
62976: PUSH
62977: EMPTY
62978: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
62979: LD_VAR 0 4
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 3
62995: PUSH
62996: LD_INT 4
62998: PUSH
62999: LD_INT 5
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: IN
63010: NOT
63011: PUSH
63012: LD_VAR 0 1
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: IN
63027: PUSH
63028: LD_VAR 0 5
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: LD_INT 3
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: IN
63047: NOT
63048: AND
63049: OR
63050: IFFALSE 63054
// exit ;
63052: GO 81445
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
63054: LD_VAR 0 1
63058: PUSH
63059: LD_INT 6
63061: PUSH
63062: LD_INT 7
63064: PUSH
63065: LD_INT 8
63067: PUSH
63068: LD_INT 13
63070: PUSH
63071: LD_INT 12
63073: PUSH
63074: LD_INT 15
63076: PUSH
63077: LD_INT 11
63079: PUSH
63080: LD_INT 14
63082: PUSH
63083: LD_INT 10
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: IN
63097: IFFALSE 63107
// btype = b_lab ;
63099: LD_ADDR_VAR 0 1
63103: PUSH
63104: LD_INT 6
63106: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
63107: LD_VAR 0 6
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: IN
63126: NOT
63127: PUSH
63128: LD_VAR 0 1
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: LD_INT 6
63147: PUSH
63148: LD_INT 36
63150: PUSH
63151: LD_INT 4
63153: PUSH
63154: LD_INT 5
63156: PUSH
63157: LD_INT 31
63159: PUSH
63160: LD_INT 32
63162: PUSH
63163: LD_INT 33
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: IN
63179: NOT
63180: PUSH
63181: LD_VAR 0 6
63185: PUSH
63186: LD_INT 1
63188: EQUAL
63189: AND
63190: OR
63191: PUSH
63192: LD_VAR 0 1
63196: PUSH
63197: LD_INT 2
63199: PUSH
63200: LD_INT 3
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: IN
63207: NOT
63208: PUSH
63209: LD_VAR 0 6
63213: PUSH
63214: LD_INT 2
63216: EQUAL
63217: AND
63218: OR
63219: IFFALSE 63229
// mode = 0 ;
63221: LD_ADDR_VAR 0 6
63225: PUSH
63226: LD_INT 0
63228: ST_TO_ADDR
// case mode of 0 :
63229: LD_VAR 0 6
63233: PUSH
63234: LD_INT 0
63236: DOUBLE
63237: EQUAL
63238: IFTRUE 63242
63240: GO 74695
63242: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63243: LD_ADDR_VAR 0 11
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 2
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 2
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63436: LD_ADDR_VAR 0 12
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63632: LD_ADDR_VAR 0 13
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 2
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 2
63755: NEG
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: NEG
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: LD_INT 3
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 3
63791: NEG
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 3
63803: NEG
63804: PUSH
63805: LD_INT 3
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63831: LD_ADDR_VAR 0 14
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: LD_INT 2
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 2
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 3
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64027: LD_ADDR_VAR 0 15
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: NEG
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 3
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64220: LD_ADDR_VAR 0 16
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: LD_INT 1
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: LD_INT 2
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: LD_INT 3
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64413: LD_ADDR_VAR 0 17
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: LD_INT 1
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: LD_INT 1
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: LD_INT 2
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 2
64589: NEG
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64643: LD_ADDR_VAR 0 18
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 1
64724: NEG
64725: PUSH
64726: LD_INT 2
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 2
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 2
64778: PUSH
64779: LD_INT 2
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64873: LD_ADDR_VAR 0 19
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 2
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 2
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: LD_INT 2
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 2
65060: NEG
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 2
65072: NEG
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65103: LD_ADDR_VAR 0 20
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 2
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 2
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 2
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: LD_INT 2
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 2
65279: NEG
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65333: LD_ADDR_VAR 0 21
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: LD_INT 2
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 2
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 2
65509: NEG
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: NEG
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65563: LD_ADDR_VAR 0 22
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 1
65621: NEG
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 2
65739: NEG
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 2
65750: NEG
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65793: LD_ADDR_VAR 0 23
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: LD_INT 2
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 2
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 2
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 2
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: NEG
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: LD_INT 3
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: LD_INT 3
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
66073: LD_ADDR_VAR 0 24
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: LD_INT 1
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 1
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: NEG
66155: PUSH
66156: LD_INT 2
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 2
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 2
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 3
66316: PUSH
66317: LD_INT 2
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
66349: LD_ADDR_VAR 0 25
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: LD_INT 2
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 2
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 2
66536: NEG
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 2
66548: NEG
66549: PUSH
66550: LD_INT 2
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 3
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: PUSH
66571: LD_INT 2
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 2
66580: PUSH
66581: LD_INT 3
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66623: LD_ADDR_VAR 0 26
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 1
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 1
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 1
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: NEG
66705: PUSH
66706: LD_INT 2
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 2
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 2
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: LD_INT 2
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: LD_INT 2
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 0
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 2
66810: NEG
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: LD_INT 2
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: LD_INT 3
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: LD_INT 3
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: NEG
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66899: LD_ADDR_VAR 0 27
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 1
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: LD_INT 1
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: NEG
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 1
66968: NEG
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 1
66980: NEG
66981: PUSH
66982: LD_INT 2
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 2
67075: NEG
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: NEG
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: LD_INT 2
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: LD_INT 2
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: NEG
67122: PUSH
67123: LD_INT 1
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: NEG
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67179: LD_ADDR_VAR 0 28
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: NEG
67261: PUSH
67262: LD_INT 2
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: LD_INT 2
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: LD_INT 2
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: LD_INT 2
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 1
67344: NEG
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: NEG
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 2
67366: NEG
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: NEG
67403: PUSH
67404: LD_INT 3
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: LD_INT 2
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67461: LD_ADDR_VAR 0 29
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 1
67542: NEG
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 2
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 1
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 2
67639: NEG
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 2
67651: NEG
67652: PUSH
67653: LD_INT 3
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 2
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 3
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 3
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 1
67694: NEG
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: NEG
67706: PUSH
67707: LD_INT 2
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67740: LD_ADDR_VAR 0 30
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 0
67757: PUSH
67758: LD_INT 1
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 1
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: LD_INT 1
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 1
67798: NEG
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: LD_INT 1
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: LD_INT 2
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 2
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 2
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: LD_INT 1
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: LD_INT 2
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: LD_INT 2
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 2
67917: NEG
67918: PUSH
67919: LD_INT 1
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 1
67929: NEG
67930: PUSH
67931: LD_INT 3
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 2
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: LD_INT 1
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: NEG
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68018: LD_ADDR_VAR 0 31
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 1
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 1
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: LD_INT 1
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: LD_INT 2
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 1
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 2
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 2
68132: PUSH
68133: LD_INT 1
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 2
68183: NEG
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 2
68195: NEG
68196: PUSH
68197: LD_INT 2
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 2
68207: NEG
68208: PUSH
68209: LD_INT 3
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 2
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 3
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: LD_INT 3
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 1
68250: NEG
68251: PUSH
68252: LD_INT 2
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68296: LD_ADDR_VAR 0 32
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: LD_INT 1
68316: NEG
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 0
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 1
68354: NEG
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 1
68365: NEG
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 2
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 2
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 1
68431: PUSH
68432: LD_INT 2
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: LD_INT 2
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 1
68451: NEG
68452: PUSH
68453: LD_INT 1
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 2
68462: NEG
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: LD_INT 1
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 3
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: LD_INT 2
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 3
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 2
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 3
68539: NEG
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68574: LD_ADDR_VAR 0 33
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: LD_INT 0
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 1
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 1
68612: PUSH
68613: LD_INT 1
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 1
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 1
68632: NEG
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: LD_INT 1
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 1
68655: NEG
68656: PUSH
68657: LD_INT 2
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 1
68667: PUSH
68668: LD_INT 1
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 2
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 1
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 2
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 1
68718: NEG
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 2
68729: NEG
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 2
68740: NEG
68741: PUSH
68742: LD_INT 1
68744: NEG
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 2
68752: NEG
68753: PUSH
68754: LD_INT 2
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 2
68764: NEG
68765: PUSH
68766: LD_INT 3
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: LD_INT 1
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 3
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 1
68797: PUSH
68798: LD_INT 3
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 1
68807: NEG
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 3
68818: NEG
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68853: LD_ADDR_VAR 0 34
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: LD_INT 1
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 1
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 1
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: NEG
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: LD_INT 1
68926: NEG
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: LD_INT 2
68938: NEG
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: LD_INT 2
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: LD_INT 1
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 2
68968: PUSH
68969: LD_INT 1
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: LD_INT 2
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 2
69009: NEG
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: LD_INT 1
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 2
69032: NEG
69033: PUSH
69034: LD_INT 2
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: LD_INT 3
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: LD_INT 2
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 3
69067: PUSH
69068: LD_INT 2
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 2
69077: PUSH
69078: LD_INT 3
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 2
69087: NEG
69088: PUSH
69089: LD_INT 1
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 3
69098: NEG
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69133: LD_ADDR_VAR 0 35
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 1
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: NEG
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 1
69202: NEG
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 2
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 2
69224: NEG
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69245: LD_ADDR_VAR 0 36
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 2
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 1
69338: PUSH
69339: LD_INT 2
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69357: LD_ADDR_VAR 0 37
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 0
69374: PUSH
69375: LD_INT 1
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: LD_INT 0
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 1
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: LD_INT 1
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 1
69426: NEG
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: LD_INT 1
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 1
69449: NEG
69450: PUSH
69451: LD_INT 1
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69469: LD_ADDR_VAR 0 38
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 0
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 1
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 1
69507: PUSH
69508: LD_INT 1
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 0
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: LD_INT 0
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 1
69538: NEG
69539: PUSH
69540: LD_INT 1
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 2
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 2
69560: NEG
69561: PUSH
69562: LD_INT 1
69564: NEG
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69581: LD_ADDR_VAR 0 39
69585: PUSH
69586: LD_INT 0
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 0
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 1
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 1
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 1
69639: NEG
69640: PUSH
69641: LD_INT 0
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 1
69650: NEG
69651: PUSH
69652: LD_INT 1
69654: NEG
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: NEG
69663: PUSH
69664: LD_INT 2
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 2
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69693: LD_ADDR_VAR 0 40
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: LD_INT 1
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 1
69721: PUSH
69722: LD_INT 0
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 1
69731: PUSH
69732: LD_INT 1
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: LD_INT 1
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 1
69751: NEG
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 1
69762: NEG
69763: PUSH
69764: LD_INT 1
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 1
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 1
69785: NEG
69786: PUSH
69787: LD_INT 1
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69805: LD_ADDR_VAR 0 41
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 0
69822: PUSH
69823: LD_INT 1
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 1
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 1
69843: PUSH
69844: LD_INT 1
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 1
69863: NEG
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 1
69874: NEG
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: LD_INT 2
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 2
69929: PUSH
69930: LD_INT 2
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 1
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 2
69983: NEG
69984: PUSH
69985: LD_INT 2
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 2
69995: NEG
69996: PUSH
69997: LD_INT 3
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: LD_INT 1
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: LD_INT 2
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 3
70048: PUSH
70049: LD_INT 3
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 2
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 2
70068: NEG
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 3
70079: NEG
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 3
70102: NEG
70103: PUSH
70104: LD_INT 2
70106: NEG
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 3
70114: NEG
70115: PUSH
70116: LD_INT 3
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70155: LD_ADDR_VAR 0 42
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: LD_INT 1
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 1
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: NEG
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 1
70236: NEG
70237: PUSH
70238: LD_INT 2
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 2
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 1
70290: PUSH
70291: LD_INT 2
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 2
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: NEG
70311: PUSH
70312: LD_INT 1
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 2
70333: NEG
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: NEG
70346: PUSH
70347: LD_INT 3
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 1
70357: NEG
70358: PUSH
70359: LD_INT 3
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: LD_INT 3
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 1
70380: PUSH
70381: LD_INT 2
70383: NEG
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 3
70391: PUSH
70392: LD_INT 2
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 3
70401: PUSH
70402: LD_INT 3
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 2
70411: PUSH
70412: LD_INT 3
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: LD_INT 3
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: LD_INT 2
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: LD_INT 2
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 3
70464: NEG
70465: PUSH
70466: LD_INT 3
70468: NEG
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70505: LD_ADDR_VAR 0 43
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: LD_INT 0
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: LD_INT 1
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 1
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 1
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: LD_INT 0
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 1
70574: NEG
70575: PUSH
70576: LD_INT 1
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: LD_INT 2
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: LD_INT 2
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 1
70609: PUSH
70610: LD_INT 1
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 2
70620: PUSH
70621: LD_INT 0
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 2
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 1
70640: PUSH
70641: LD_INT 2
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 0
70650: PUSH
70651: LD_INT 2
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 1
70660: NEG
70661: PUSH
70662: LD_INT 1
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 2
70671: NEG
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 2
70682: NEG
70683: PUSH
70684: LD_INT 1
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: LD_INT 3
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 0
70706: PUSH
70707: LD_INT 3
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 1
70717: PUSH
70718: LD_INT 2
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 2
70728: PUSH
70729: LD_INT 1
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 3
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 3
70749: PUSH
70750: LD_INT 1
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 1
70759: PUSH
70760: LD_INT 3
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 0
70769: PUSH
70770: LD_INT 3
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 1
70779: NEG
70780: PUSH
70781: LD_INT 2
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 2
70790: NEG
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 3
70812: NEG
70813: PUSH
70814: LD_INT 1
70816: NEG
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70853: LD_ADDR_VAR 0 44
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: LD_INT 0
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: LD_INT 1
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 1
70881: PUSH
70882: LD_INT 0
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 1
70891: PUSH
70892: LD_INT 1
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: LD_INT 1
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 1
70922: NEG
70923: PUSH
70924: LD_INT 1
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: NEG
70935: PUSH
70936: LD_INT 2
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 1
70946: PUSH
70947: LD_INT 1
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 2
70957: PUSH
70958: LD_INT 0
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 2
70967: PUSH
70968: LD_INT 1
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 2
70977: PUSH
70978: LD_INT 2
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 1
70987: PUSH
70988: LD_INT 2
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 1
70997: NEG
70998: PUSH
70999: LD_INT 1
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 2
71008: NEG
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 2
71019: NEG
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 2
71031: NEG
71032: PUSH
71033: LD_INT 2
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: NEG
71044: PUSH
71045: LD_INT 3
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 2
71055: PUSH
71056: LD_INT 1
71058: NEG
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: LD_INT 0
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 3
71076: PUSH
71077: LD_INT 1
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: LD_INT 2
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 3
71096: PUSH
71097: LD_INT 3
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 2
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 2
71116: NEG
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: LD_INT 0
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 3
71138: NEG
71139: PUSH
71140: LD_INT 1
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 3
71150: NEG
71151: PUSH
71152: LD_INT 2
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 3
71162: NEG
71163: PUSH
71164: LD_INT 3
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71203: LD_ADDR_VAR 0 45
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: LD_INT 0
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: LD_INT 1
71223: NEG
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: PUSH
71242: LD_INT 1
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: LD_INT 1
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 1
71261: NEG
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: LD_INT 1
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: NEG
71285: PUSH
71286: LD_INT 2
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 0
71296: PUSH
71297: LD_INT 2
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: LD_INT 1
71310: NEG
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 2
71318: PUSH
71319: LD_INT 1
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 2
71328: PUSH
71329: LD_INT 2
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 1
71338: PUSH
71339: LD_INT 2
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 1
71358: NEG
71359: PUSH
71360: LD_INT 1
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 2
71369: NEG
71370: PUSH
71371: LD_INT 1
71373: NEG
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 2
71381: NEG
71382: PUSH
71383: LD_INT 2
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 2
71393: NEG
71394: PUSH
71395: LD_INT 3
71397: NEG
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 1
71405: NEG
71406: PUSH
71407: LD_INT 3
71409: NEG
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: LD_INT 3
71420: NEG
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 1
71428: PUSH
71429: LD_INT 2
71431: NEG
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 3
71439: PUSH
71440: LD_INT 2
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 3
71449: PUSH
71450: LD_INT 3
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 2
71459: PUSH
71460: LD_INT 3
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 1
71469: PUSH
71470: LD_INT 3
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 0
71479: PUSH
71480: LD_INT 3
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 1
71489: NEG
71490: PUSH
71491: LD_INT 2
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 3
71500: NEG
71501: PUSH
71502: LD_INT 2
71504: NEG
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: NEG
71513: PUSH
71514: LD_INT 3
71516: NEG
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71553: LD_ADDR_VAR 0 46
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: LD_INT 0
71570: PUSH
71571: LD_INT 1
71573: NEG
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 1
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 1
71591: PUSH
71592: LD_INT 1
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: LD_INT 1
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 1
71611: NEG
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 1
71622: NEG
71623: PUSH
71624: LD_INT 1
71626: NEG
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 1
71634: NEG
71635: PUSH
71636: LD_INT 2
71638: NEG
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 0
71646: PUSH
71647: LD_INT 2
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 1
71657: PUSH
71658: LD_INT 1
71660: NEG
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 2
71668: PUSH
71669: LD_INT 0
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 2
71678: PUSH
71679: LD_INT 1
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 1
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 0
71698: PUSH
71699: LD_INT 2
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 1
71708: NEG
71709: PUSH
71710: LD_INT 1
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 2
71719: NEG
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 2
71730: NEG
71731: PUSH
71732: LD_INT 1
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 1
71742: NEG
71743: PUSH
71744: LD_INT 3
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: LD_INT 3
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 1
71765: PUSH
71766: LD_INT 2
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 2
71776: PUSH
71777: LD_INT 1
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 3
71787: PUSH
71788: LD_INT 0
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 3
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 1
71807: PUSH
71808: LD_INT 3
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 0
71817: PUSH
71818: LD_INT 3
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 1
71827: NEG
71828: PUSH
71829: LD_INT 2
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 2
71838: NEG
71839: PUSH
71840: LD_INT 1
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 3
71849: NEG
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 3
71860: NEG
71861: PUSH
71862: LD_INT 1
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71901: LD_ADDR_VAR 0 47
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: LD_INT 1
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 1
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 1
71939: PUSH
71940: LD_INT 1
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: NEG
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 1
71970: NEG
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 1
71982: NEG
71983: PUSH
71984: LD_INT 2
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: LD_INT 2
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 1
72005: PUSH
72006: LD_INT 1
72008: NEG
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 2
72016: NEG
72017: PUSH
72018: LD_INT 1
72020: NEG
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 2
72028: NEG
72029: PUSH
72030: LD_INT 2
72032: NEG
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72052: LD_ADDR_VAR 0 48
72056: PUSH
72057: LD_INT 0
72059: PUSH
72060: LD_INT 0
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: LD_INT 1
72072: NEG
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 1
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 1
72090: PUSH
72091: LD_INT 1
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 0
72100: PUSH
72101: LD_INT 1
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 1
72110: NEG
72111: PUSH
72112: LD_INT 0
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 1
72121: NEG
72122: PUSH
72123: LD_INT 1
72125: NEG
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 1
72133: NEG
72134: PUSH
72135: LD_INT 2
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 0
72145: PUSH
72146: LD_INT 2
72148: NEG
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 1
72156: PUSH
72157: LD_INT 1
72159: NEG
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 2
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 2
72177: PUSH
72178: LD_INT 1
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72199: LD_ADDR_VAR 0 49
72203: PUSH
72204: LD_INT 0
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: LD_INT 1
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 1
72227: PUSH
72228: LD_INT 0
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 1
72237: PUSH
72238: LD_INT 1
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 0
72247: PUSH
72248: LD_INT 1
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 1
72257: NEG
72258: PUSH
72259: LD_INT 0
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 1
72268: NEG
72269: PUSH
72270: LD_INT 1
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 1
72280: PUSH
72281: LD_INT 1
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 2
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 2
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 2
72311: PUSH
72312: LD_INT 2
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 1
72321: PUSH
72322: LD_INT 2
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72343: LD_ADDR_VAR 0 50
72347: PUSH
72348: LD_INT 0
72350: PUSH
72351: LD_INT 0
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 0
72360: PUSH
72361: LD_INT 1
72363: NEG
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: LD_INT 1
72371: PUSH
72372: LD_INT 0
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 1
72381: PUSH
72382: LD_INT 1
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 0
72391: PUSH
72392: LD_INT 1
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 1
72401: NEG
72402: PUSH
72403: LD_INT 0
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 1
72412: NEG
72413: PUSH
72414: LD_INT 1
72416: NEG
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 2
72424: PUSH
72425: LD_INT 1
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 2
72434: PUSH
72435: LD_INT 2
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 1
72444: PUSH
72445: LD_INT 2
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 0
72454: PUSH
72455: LD_INT 2
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 1
72464: NEG
72465: PUSH
72466: LD_INT 1
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72487: LD_ADDR_VAR 0 51
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: LD_INT 0
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 0
72504: PUSH
72505: LD_INT 1
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 1
72515: PUSH
72516: LD_INT 0
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 1
72525: PUSH
72526: LD_INT 1
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 0
72535: PUSH
72536: LD_INT 1
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 1
72545: NEG
72546: PUSH
72547: LD_INT 0
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 1
72556: NEG
72557: PUSH
72558: LD_INT 1
72560: NEG
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 1
72568: PUSH
72569: LD_INT 2
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: LD_INT 2
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 1
72588: NEG
72589: PUSH
72590: LD_INT 1
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 2
72599: NEG
72600: PUSH
72601: LD_INT 0
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 2
72610: NEG
72611: PUSH
72612: LD_INT 1
72614: NEG
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72634: LD_ADDR_VAR 0 52
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: LD_INT 0
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: LD_INT 1
72654: NEG
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 1
72662: PUSH
72663: LD_INT 0
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 1
72672: PUSH
72673: LD_INT 1
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 0
72682: PUSH
72683: LD_INT 1
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 1
72692: NEG
72693: PUSH
72694: LD_INT 0
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 1
72703: NEG
72704: PUSH
72705: LD_INT 1
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 1
72715: NEG
72716: PUSH
72717: LD_INT 2
72719: NEG
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 1
72727: NEG
72728: PUSH
72729: LD_INT 1
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 2
72738: NEG
72739: PUSH
72740: LD_INT 0
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 2
72749: NEG
72750: PUSH
72751: LD_INT 1
72753: NEG
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 2
72761: NEG
72762: PUSH
72763: LD_INT 2
72765: NEG
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72785: LD_ADDR_VAR 0 53
72789: PUSH
72790: LD_INT 0
72792: PUSH
72793: LD_INT 0
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: LD_INT 1
72805: NEG
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 1
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 1
72823: PUSH
72824: LD_INT 1
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 0
72833: PUSH
72834: LD_INT 1
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 1
72843: NEG
72844: PUSH
72845: LD_INT 0
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 1
72854: NEG
72855: PUSH
72856: LD_INT 1
72858: NEG
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 1
72866: NEG
72867: PUSH
72868: LD_INT 2
72870: NEG
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 0
72878: PUSH
72879: LD_INT 2
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 1
72889: PUSH
72890: LD_INT 1
72892: NEG
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: LD_INT 0
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 2
72910: PUSH
72911: LD_INT 1
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 2
72920: PUSH
72921: LD_INT 2
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 1
72930: PUSH
72931: LD_INT 2
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 0
72940: PUSH
72941: LD_INT 2
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 1
72950: NEG
72951: PUSH
72952: LD_INT 1
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 2
72961: NEG
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 2
72972: NEG
72973: PUSH
72974: LD_INT 1
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 2
72984: NEG
72985: PUSH
72986: LD_INT 2
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73015: LD_ADDR_VAR 0 54
73019: PUSH
73020: LD_INT 0
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: LD_INT 1
73035: NEG
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 1
73043: PUSH
73044: LD_INT 0
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 1
73053: PUSH
73054: LD_INT 1
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 0
73063: PUSH
73064: LD_INT 1
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 1
73073: NEG
73074: PUSH
73075: LD_INT 0
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: LD_INT 1
73084: NEG
73085: PUSH
73086: LD_INT 1
73088: NEG
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 1
73096: NEG
73097: PUSH
73098: LD_INT 2
73100: NEG
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 0
73108: PUSH
73109: LD_INT 2
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: LD_INT 1
73122: NEG
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 2
73130: PUSH
73131: LD_INT 0
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 2
73140: PUSH
73141: LD_INT 1
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 2
73150: PUSH
73151: LD_INT 2
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 1
73160: PUSH
73161: LD_INT 2
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 0
73170: PUSH
73171: LD_INT 2
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 1
73180: NEG
73181: PUSH
73182: LD_INT 1
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 2
73191: NEG
73192: PUSH
73193: LD_INT 0
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 2
73202: NEG
73203: PUSH
73204: LD_INT 1
73206: NEG
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 2
73214: NEG
73215: PUSH
73216: LD_INT 2
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73245: LD_ADDR_VAR 0 55
73249: PUSH
73250: LD_INT 0
73252: PUSH
73253: LD_INT 0
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 0
73262: PUSH
73263: LD_INT 1
73265: NEG
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 1
73273: PUSH
73274: LD_INT 0
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 1
73283: PUSH
73284: LD_INT 1
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: LD_INT 1
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 1
73303: NEG
73304: PUSH
73305: LD_INT 0
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 1
73314: NEG
73315: PUSH
73316: LD_INT 1
73318: NEG
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 1
73326: NEG
73327: PUSH
73328: LD_INT 2
73330: NEG
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 0
73338: PUSH
73339: LD_INT 2
73341: NEG
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: LD_INT 1
73352: NEG
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: LD_INT 0
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 2
73370: PUSH
73371: LD_INT 1
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 2
73380: PUSH
73381: LD_INT 2
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 1
73390: PUSH
73391: LD_INT 2
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: LD_INT 0
73400: PUSH
73401: LD_INT 2
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 1
73410: NEG
73411: PUSH
73412: LD_INT 1
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 2
73421: NEG
73422: PUSH
73423: LD_INT 0
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 2
73432: NEG
73433: PUSH
73434: LD_INT 1
73436: NEG
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 2
73444: NEG
73445: PUSH
73446: LD_INT 2
73448: NEG
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73475: LD_ADDR_VAR 0 56
73479: PUSH
73480: LD_INT 0
73482: PUSH
73483: LD_INT 0
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: PUSH
73490: LD_INT 0
73492: PUSH
73493: LD_INT 1
73495: NEG
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 1
73503: PUSH
73504: LD_INT 0
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: LD_INT 1
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: LD_INT 1
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 1
73533: NEG
73534: PUSH
73535: LD_INT 0
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 1
73544: NEG
73545: PUSH
73546: LD_INT 1
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 1
73556: NEG
73557: PUSH
73558: LD_INT 2
73560: NEG
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 0
73568: PUSH
73569: LD_INT 2
73571: NEG
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 1
73579: PUSH
73580: LD_INT 1
73582: NEG
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 2
73590: PUSH
73591: LD_INT 0
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 2
73600: PUSH
73601: LD_INT 1
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 2
73610: PUSH
73611: LD_INT 2
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: LD_INT 1
73620: PUSH
73621: LD_INT 2
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: LD_INT 2
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 1
73640: NEG
73641: PUSH
73642: LD_INT 1
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 2
73651: NEG
73652: PUSH
73653: LD_INT 0
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 2
73662: NEG
73663: PUSH
73664: LD_INT 1
73666: NEG
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 2
73674: NEG
73675: PUSH
73676: LD_INT 2
73678: NEG
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73705: LD_ADDR_VAR 0 57
73709: PUSH
73710: LD_INT 0
73712: PUSH
73713: LD_INT 0
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 0
73722: PUSH
73723: LD_INT 1
73725: NEG
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PUSH
73731: LD_INT 1
73733: PUSH
73734: LD_INT 0
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 1
73743: PUSH
73744: LD_INT 1
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 0
73753: PUSH
73754: LD_INT 1
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 1
73763: NEG
73764: PUSH
73765: LD_INT 0
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 1
73774: NEG
73775: PUSH
73776: LD_INT 1
73778: NEG
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 1
73786: NEG
73787: PUSH
73788: LD_INT 2
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 0
73798: PUSH
73799: LD_INT 2
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 1
73809: PUSH
73810: LD_INT 1
73812: NEG
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 2
73820: PUSH
73821: LD_INT 0
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 2
73830: PUSH
73831: LD_INT 1
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 2
73840: PUSH
73841: LD_INT 2
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 1
73850: PUSH
73851: LD_INT 2
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_INT 0
73860: PUSH
73861: LD_INT 2
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 1
73870: NEG
73871: PUSH
73872: LD_INT 1
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 2
73881: NEG
73882: PUSH
73883: LD_INT 0
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: PUSH
73890: LD_INT 2
73892: NEG
73893: PUSH
73894: LD_INT 1
73896: NEG
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 2
73904: NEG
73905: PUSH
73906: LD_INT 2
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73935: LD_ADDR_VAR 0 58
73939: PUSH
73940: LD_INT 0
73942: PUSH
73943: LD_INT 0
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 0
73952: PUSH
73953: LD_INT 1
73955: NEG
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 1
73963: PUSH
73964: LD_INT 0
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PUSH
73971: LD_INT 1
73973: PUSH
73974: LD_INT 1
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 0
73983: PUSH
73984: LD_INT 1
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: PUSH
73991: LD_INT 1
73993: NEG
73994: PUSH
73995: LD_INT 0
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: PUSH
74006: LD_INT 1
74008: NEG
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 1
74016: NEG
74017: PUSH
74018: LD_INT 2
74020: NEG
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 0
74028: PUSH
74029: LD_INT 2
74031: NEG
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 1
74039: PUSH
74040: LD_INT 1
74042: NEG
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 2
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: PUSH
74058: LD_INT 2
74060: PUSH
74061: LD_INT 1
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 2
74070: PUSH
74071: LD_INT 2
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 1
74080: PUSH
74081: LD_INT 2
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 0
74090: PUSH
74091: LD_INT 2
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 1
74100: NEG
74101: PUSH
74102: LD_INT 1
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 2
74111: NEG
74112: PUSH
74113: LD_INT 0
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: LD_INT 2
74122: NEG
74123: PUSH
74124: LD_INT 1
74126: NEG
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: PUSH
74132: LD_INT 2
74134: NEG
74135: PUSH
74136: LD_INT 2
74138: NEG
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: LIST
74164: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74165: LD_ADDR_VAR 0 59
74169: PUSH
74170: LD_INT 0
74172: PUSH
74173: LD_INT 0
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 0
74182: PUSH
74183: LD_INT 1
74185: NEG
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 1
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 1
74203: PUSH
74204: LD_INT 1
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 0
74213: PUSH
74214: LD_INT 1
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 1
74223: NEG
74224: PUSH
74225: LD_INT 0
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 1
74234: NEG
74235: PUSH
74236: LD_INT 1
74238: NEG
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74253: LD_ADDR_VAR 0 60
74257: PUSH
74258: LD_INT 0
74260: PUSH
74261: LD_INT 0
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 0
74270: PUSH
74271: LD_INT 1
74273: NEG
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 1
74281: PUSH
74282: LD_INT 0
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 1
74291: PUSH
74292: LD_INT 1
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 0
74301: PUSH
74302: LD_INT 1
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 1
74311: NEG
74312: PUSH
74313: LD_INT 0
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 1
74322: NEG
74323: PUSH
74324: LD_INT 1
74326: NEG
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74341: LD_ADDR_VAR 0 61
74345: PUSH
74346: LD_INT 0
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PUSH
74356: LD_INT 0
74358: PUSH
74359: LD_INT 1
74361: NEG
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: LD_INT 1
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 1
74379: PUSH
74380: LD_INT 1
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 0
74389: PUSH
74390: LD_INT 1
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 1
74399: NEG
74400: PUSH
74401: LD_INT 0
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: LD_INT 1
74410: NEG
74411: PUSH
74412: LD_INT 1
74414: NEG
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74429: LD_ADDR_VAR 0 62
74433: PUSH
74434: LD_INT 0
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 0
74446: PUSH
74447: LD_INT 1
74449: NEG
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 1
74457: PUSH
74458: LD_INT 0
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 1
74467: PUSH
74468: LD_INT 1
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 0
74477: PUSH
74478: LD_INT 1
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 1
74487: NEG
74488: PUSH
74489: LD_INT 0
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 1
74498: NEG
74499: PUSH
74500: LD_INT 1
74502: NEG
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74517: LD_ADDR_VAR 0 63
74521: PUSH
74522: LD_INT 0
74524: PUSH
74525: LD_INT 0
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: LD_INT 0
74534: PUSH
74535: LD_INT 1
74537: NEG
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PUSH
74543: LD_INT 1
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 1
74555: PUSH
74556: LD_INT 1
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 0
74565: PUSH
74566: LD_INT 1
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 1
74575: NEG
74576: PUSH
74577: LD_INT 0
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: PUSH
74584: LD_INT 1
74586: NEG
74587: PUSH
74588: LD_INT 1
74590: NEG
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74605: LD_ADDR_VAR 0 64
74609: PUSH
74610: LD_INT 0
74612: PUSH
74613: LD_INT 0
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 0
74622: PUSH
74623: LD_INT 1
74625: NEG
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 1
74633: PUSH
74634: LD_INT 0
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 1
74643: PUSH
74644: LD_INT 1
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: LD_INT 1
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PUSH
74661: LD_INT 1
74663: NEG
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 1
74674: NEG
74675: PUSH
74676: LD_INT 1
74678: NEG
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: ST_TO_ADDR
// end ; 1 :
74693: GO 80590
74695: LD_INT 1
74697: DOUBLE
74698: EQUAL
74699: IFTRUE 74703
74701: GO 77326
74703: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74704: LD_ADDR_VAR 0 11
74708: PUSH
74709: LD_INT 1
74711: NEG
74712: PUSH
74713: LD_INT 3
74715: NEG
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: LD_INT 3
74726: NEG
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 1
74734: PUSH
74735: LD_INT 2
74737: NEG
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74748: LD_ADDR_VAR 0 12
74752: PUSH
74753: LD_INT 2
74755: PUSH
74756: LD_INT 1
74758: NEG
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 3
74766: PUSH
74767: LD_INT 0
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 3
74776: PUSH
74777: LD_INT 1
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: LIST
74788: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74789: LD_ADDR_VAR 0 13
74793: PUSH
74794: LD_INT 3
74796: PUSH
74797: LD_INT 2
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 3
74806: PUSH
74807: LD_INT 3
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PUSH
74814: LD_INT 2
74816: PUSH
74817: LD_INT 3
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: LIST
74828: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74829: LD_ADDR_VAR 0 14
74833: PUSH
74834: LD_INT 1
74836: PUSH
74837: LD_INT 3
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: LD_INT 0
74846: PUSH
74847: LD_INT 3
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: PUSH
74854: LD_INT 1
74856: NEG
74857: PUSH
74858: LD_INT 2
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: LIST
74869: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74870: LD_ADDR_VAR 0 15
74874: PUSH
74875: LD_INT 2
74877: NEG
74878: PUSH
74879: LD_INT 1
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 3
74888: NEG
74889: PUSH
74890: LD_INT 0
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: LD_INT 3
74899: NEG
74900: PUSH
74901: LD_INT 1
74903: NEG
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74914: LD_ADDR_VAR 0 16
74918: PUSH
74919: LD_INT 2
74921: NEG
74922: PUSH
74923: LD_INT 3
74925: NEG
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 3
74933: NEG
74934: PUSH
74935: LD_INT 2
74937: NEG
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 3
74945: NEG
74946: PUSH
74947: LD_INT 3
74949: NEG
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: LIST
74959: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74960: LD_ADDR_VAR 0 17
74964: PUSH
74965: LD_INT 1
74967: NEG
74968: PUSH
74969: LD_INT 3
74971: NEG
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 0
74979: PUSH
74980: LD_INT 3
74982: NEG
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: PUSH
74988: LD_INT 1
74990: PUSH
74991: LD_INT 2
74993: NEG
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: LIST
75003: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75004: LD_ADDR_VAR 0 18
75008: PUSH
75009: LD_INT 2
75011: PUSH
75012: LD_INT 1
75014: NEG
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: PUSH
75020: LD_INT 3
75022: PUSH
75023: LD_INT 0
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 3
75032: PUSH
75033: LD_INT 1
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: LIST
75044: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75045: LD_ADDR_VAR 0 19
75049: PUSH
75050: LD_INT 3
75052: PUSH
75053: LD_INT 2
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 3
75062: PUSH
75063: LD_INT 3
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: LD_INT 2
75072: PUSH
75073: LD_INT 3
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: LIST
75084: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75085: LD_ADDR_VAR 0 20
75089: PUSH
75090: LD_INT 1
75092: PUSH
75093: LD_INT 3
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: LD_INT 0
75102: PUSH
75103: LD_INT 3
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 1
75112: NEG
75113: PUSH
75114: LD_INT 2
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: LIST
75125: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75126: LD_ADDR_VAR 0 21
75130: PUSH
75131: LD_INT 2
75133: NEG
75134: PUSH
75135: LD_INT 1
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 3
75144: NEG
75145: PUSH
75146: LD_INT 0
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: PUSH
75153: LD_INT 3
75155: NEG
75156: PUSH
75157: LD_INT 1
75159: NEG
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: LIST
75169: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75170: LD_ADDR_VAR 0 22
75174: PUSH
75175: LD_INT 2
75177: NEG
75178: PUSH
75179: LD_INT 3
75181: NEG
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 3
75189: NEG
75190: PUSH
75191: LD_INT 2
75193: NEG
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 3
75201: NEG
75202: PUSH
75203: LD_INT 3
75205: NEG
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: LIST
75215: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
75216: LD_ADDR_VAR 0 23
75220: PUSH
75221: LD_INT 0
75223: PUSH
75224: LD_INT 3
75226: NEG
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 1
75234: NEG
75235: PUSH
75236: LD_INT 4
75238: NEG
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 1
75246: PUSH
75247: LD_INT 3
75249: NEG
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: LIST
75259: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
75260: LD_ADDR_VAR 0 24
75264: PUSH
75265: LD_INT 3
75267: PUSH
75268: LD_INT 0
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 3
75277: PUSH
75278: LD_INT 1
75280: NEG
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 4
75288: PUSH
75289: LD_INT 1
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: LIST
75300: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
75301: LD_ADDR_VAR 0 25
75305: PUSH
75306: LD_INT 3
75308: PUSH
75309: LD_INT 3
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: LD_INT 4
75318: PUSH
75319: LD_INT 3
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 3
75328: PUSH
75329: LD_INT 4
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: LIST
75340: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
75341: LD_ADDR_VAR 0 26
75345: PUSH
75346: LD_INT 0
75348: PUSH
75349: LD_INT 3
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: PUSH
75356: LD_INT 1
75358: PUSH
75359: LD_INT 4
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 1
75368: NEG
75369: PUSH
75370: LD_INT 3
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: LIST
75381: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
75382: LD_ADDR_VAR 0 27
75386: PUSH
75387: LD_INT 3
75389: NEG
75390: PUSH
75391: LD_INT 0
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 3
75400: NEG
75401: PUSH
75402: LD_INT 1
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 4
75411: NEG
75412: PUSH
75413: LD_INT 1
75415: NEG
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: LIST
75425: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
75426: LD_ADDR_VAR 0 28
75430: PUSH
75431: LD_INT 3
75433: NEG
75434: PUSH
75435: LD_INT 3
75437: NEG
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: PUSH
75443: LD_INT 3
75445: NEG
75446: PUSH
75447: LD_INT 4
75449: NEG
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 4
75457: NEG
75458: PUSH
75459: LD_INT 3
75461: NEG
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: LIST
75471: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
75472: LD_ADDR_VAR 0 29
75476: PUSH
75477: LD_INT 1
75479: NEG
75480: PUSH
75481: LD_INT 3
75483: NEG
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 0
75491: PUSH
75492: LD_INT 3
75494: NEG
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: PUSH
75500: LD_INT 1
75502: PUSH
75503: LD_INT 2
75505: NEG
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 1
75513: NEG
75514: PUSH
75515: LD_INT 4
75517: NEG
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 0
75525: PUSH
75526: LD_INT 4
75528: NEG
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PUSH
75534: LD_INT 1
75536: PUSH
75537: LD_INT 3
75539: NEG
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 1
75547: NEG
75548: PUSH
75549: LD_INT 5
75551: NEG
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 0
75559: PUSH
75560: LD_INT 5
75562: NEG
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PUSH
75568: LD_INT 1
75570: PUSH
75571: LD_INT 4
75573: NEG
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 1
75581: NEG
75582: PUSH
75583: LD_INT 6
75585: NEG
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: PUSH
75591: LD_INT 0
75593: PUSH
75594: LD_INT 6
75596: NEG
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 1
75604: PUSH
75605: LD_INT 5
75607: NEG
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: LIST
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
75627: LD_ADDR_VAR 0 30
75631: PUSH
75632: LD_INT 2
75634: PUSH
75635: LD_INT 1
75637: NEG
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 3
75645: PUSH
75646: LD_INT 0
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 3
75655: PUSH
75656: LD_INT 1
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 3
75665: PUSH
75666: LD_INT 1
75668: NEG
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 4
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 4
75686: PUSH
75687: LD_INT 1
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 4
75696: PUSH
75697: LD_INT 1
75699: NEG
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 5
75707: PUSH
75708: LD_INT 0
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: PUSH
75715: LD_INT 5
75717: PUSH
75718: LD_INT 1
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: PUSH
75725: LD_INT 5
75727: PUSH
75728: LD_INT 1
75730: NEG
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: PUSH
75736: LD_INT 6
75738: PUSH
75739: LD_INT 0
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: PUSH
75746: LD_INT 6
75748: PUSH
75749: LD_INT 1
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
75770: LD_ADDR_VAR 0 31
75774: PUSH
75775: LD_INT 3
75777: PUSH
75778: LD_INT 2
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 3
75787: PUSH
75788: LD_INT 3
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 2
75797: PUSH
75798: LD_INT 3
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 4
75807: PUSH
75808: LD_INT 3
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 4
75817: PUSH
75818: LD_INT 4
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 3
75827: PUSH
75828: LD_INT 4
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 5
75837: PUSH
75838: LD_INT 4
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 5
75847: PUSH
75848: LD_INT 5
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: LD_INT 4
75857: PUSH
75858: LD_INT 5
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_INT 6
75867: PUSH
75868: LD_INT 5
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 6
75877: PUSH
75878: LD_INT 6
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 5
75887: PUSH
75888: LD_INT 6
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: EMPTY
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
75909: LD_ADDR_VAR 0 32
75913: PUSH
75914: LD_INT 1
75916: PUSH
75917: LD_INT 3
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 0
75926: PUSH
75927: LD_INT 3
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: LD_INT 1
75936: NEG
75937: PUSH
75938: LD_INT 2
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 1
75947: PUSH
75948: LD_INT 4
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 0
75957: PUSH
75958: LD_INT 4
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: LD_INT 1
75967: NEG
75968: PUSH
75969: LD_INT 3
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 1
75978: PUSH
75979: LD_INT 5
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PUSH
75986: LD_INT 0
75988: PUSH
75989: LD_INT 5
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: PUSH
75996: LD_INT 1
75998: NEG
75999: PUSH
76000: LD_INT 4
76002: PUSH
76003: EMPTY
76004: LIST
76005: LIST
76006: PUSH
76007: LD_INT 1
76009: PUSH
76010: LD_INT 6
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 0
76019: PUSH
76020: LD_INT 6
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PUSH
76027: LD_INT 1
76029: NEG
76030: PUSH
76031: LD_INT 5
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
76052: LD_ADDR_VAR 0 33
76056: PUSH
76057: LD_INT 2
76059: NEG
76060: PUSH
76061: LD_INT 1
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 3
76070: NEG
76071: PUSH
76072: LD_INT 0
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 3
76081: NEG
76082: PUSH
76083: LD_INT 1
76085: NEG
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: PUSH
76091: LD_INT 3
76093: NEG
76094: PUSH
76095: LD_INT 1
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PUSH
76102: LD_INT 4
76104: NEG
76105: PUSH
76106: LD_INT 0
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PUSH
76113: LD_INT 4
76115: NEG
76116: PUSH
76117: LD_INT 1
76119: NEG
76120: PUSH
76121: EMPTY
76122: LIST
76123: LIST
76124: PUSH
76125: LD_INT 4
76127: NEG
76128: PUSH
76129: LD_INT 1
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 5
76138: NEG
76139: PUSH
76140: LD_INT 0
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 5
76149: NEG
76150: PUSH
76151: LD_INT 1
76153: NEG
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 5
76161: NEG
76162: PUSH
76163: LD_INT 1
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 6
76172: NEG
76173: PUSH
76174: LD_INT 0
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: LD_INT 6
76183: NEG
76184: PUSH
76185: LD_INT 1
76187: NEG
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
76207: LD_ADDR_VAR 0 34
76211: PUSH
76212: LD_INT 2
76214: NEG
76215: PUSH
76216: LD_INT 3
76218: NEG
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: PUSH
76224: LD_INT 3
76226: NEG
76227: PUSH
76228: LD_INT 2
76230: NEG
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PUSH
76236: LD_INT 3
76238: NEG
76239: PUSH
76240: LD_INT 3
76242: NEG
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: PUSH
76248: LD_INT 3
76250: NEG
76251: PUSH
76252: LD_INT 4
76254: NEG
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: LD_INT 4
76262: NEG
76263: PUSH
76264: LD_INT 3
76266: NEG
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 4
76274: NEG
76275: PUSH
76276: LD_INT 4
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 4
76286: NEG
76287: PUSH
76288: LD_INT 5
76290: NEG
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 5
76298: NEG
76299: PUSH
76300: LD_INT 4
76302: NEG
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: LD_INT 5
76310: NEG
76311: PUSH
76312: LD_INT 5
76314: NEG
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: PUSH
76320: LD_INT 5
76322: NEG
76323: PUSH
76324: LD_INT 6
76326: NEG
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: PUSH
76332: LD_INT 6
76334: NEG
76335: PUSH
76336: LD_INT 5
76338: NEG
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: LD_INT 6
76346: NEG
76347: PUSH
76348: LD_INT 6
76350: NEG
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: LIST
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
76370: LD_ADDR_VAR 0 41
76374: PUSH
76375: LD_INT 0
76377: PUSH
76378: LD_INT 2
76380: NEG
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: PUSH
76386: LD_INT 1
76388: NEG
76389: PUSH
76390: LD_INT 3
76392: NEG
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: LD_INT 1
76400: PUSH
76401: LD_INT 2
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: LIST
76413: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
76414: LD_ADDR_VAR 0 42
76418: PUSH
76419: LD_INT 2
76421: PUSH
76422: LD_INT 0
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: LD_INT 2
76431: PUSH
76432: LD_INT 1
76434: NEG
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PUSH
76440: LD_INT 3
76442: PUSH
76443: LD_INT 1
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: LIST
76454: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
76455: LD_ADDR_VAR 0 43
76459: PUSH
76460: LD_INT 2
76462: PUSH
76463: LD_INT 2
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: LD_INT 3
76472: PUSH
76473: LD_INT 2
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: PUSH
76480: LD_INT 2
76482: PUSH
76483: LD_INT 3
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: LIST
76494: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
76495: LD_ADDR_VAR 0 44
76499: PUSH
76500: LD_INT 0
76502: PUSH
76503: LD_INT 2
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 1
76512: PUSH
76513: LD_INT 3
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 1
76522: NEG
76523: PUSH
76524: LD_INT 2
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: LIST
76535: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76536: LD_ADDR_VAR 0 45
76540: PUSH
76541: LD_INT 2
76543: NEG
76544: PUSH
76545: LD_INT 0
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: PUSH
76552: LD_INT 2
76554: NEG
76555: PUSH
76556: LD_INT 1
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 3
76565: NEG
76566: PUSH
76567: LD_INT 1
76569: NEG
76570: PUSH
76571: EMPTY
76572: LIST
76573: LIST
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: LIST
76579: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
76580: LD_ADDR_VAR 0 46
76584: PUSH
76585: LD_INT 2
76587: NEG
76588: PUSH
76589: LD_INT 2
76591: NEG
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: PUSH
76597: LD_INT 2
76599: NEG
76600: PUSH
76601: LD_INT 3
76603: NEG
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: PUSH
76609: LD_INT 3
76611: NEG
76612: PUSH
76613: LD_INT 2
76615: NEG
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: LIST
76625: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
76626: LD_ADDR_VAR 0 47
76630: PUSH
76631: LD_INT 2
76633: NEG
76634: PUSH
76635: LD_INT 3
76637: NEG
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 1
76645: NEG
76646: PUSH
76647: LD_INT 3
76649: NEG
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: PUSH
76655: EMPTY
76656: LIST
76657: LIST
76658: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
76659: LD_ADDR_VAR 0 48
76663: PUSH
76664: LD_INT 1
76666: PUSH
76667: LD_INT 2
76669: NEG
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: LD_INT 2
76677: PUSH
76678: LD_INT 1
76680: NEG
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
76690: LD_ADDR_VAR 0 49
76694: PUSH
76695: LD_INT 3
76697: PUSH
76698: LD_INT 1
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: PUSH
76705: LD_INT 3
76707: PUSH
76708: LD_INT 2
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
76719: LD_ADDR_VAR 0 50
76723: PUSH
76724: LD_INT 2
76726: PUSH
76727: LD_INT 3
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: PUSH
76734: LD_INT 1
76736: PUSH
76737: LD_INT 3
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
76748: LD_ADDR_VAR 0 51
76752: PUSH
76753: LD_INT 1
76755: NEG
76756: PUSH
76757: LD_INT 2
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: PUSH
76764: LD_INT 2
76766: NEG
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
76779: LD_ADDR_VAR 0 52
76783: PUSH
76784: LD_INT 3
76786: NEG
76787: PUSH
76788: LD_INT 1
76790: NEG
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PUSH
76796: LD_INT 3
76798: NEG
76799: PUSH
76800: LD_INT 2
76802: NEG
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76812: LD_ADDR_VAR 0 53
76816: PUSH
76817: LD_INT 1
76819: NEG
76820: PUSH
76821: LD_INT 3
76823: NEG
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: LD_INT 0
76831: PUSH
76832: LD_INT 3
76834: NEG
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 1
76842: PUSH
76843: LD_INT 2
76845: NEG
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: LIST
76855: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76856: LD_ADDR_VAR 0 54
76860: PUSH
76861: LD_INT 2
76863: PUSH
76864: LD_INT 1
76866: NEG
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: LD_INT 3
76874: PUSH
76875: LD_INT 0
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: PUSH
76882: LD_INT 3
76884: PUSH
76885: LD_INT 1
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: PUSH
76892: EMPTY
76893: LIST
76894: LIST
76895: LIST
76896: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76897: LD_ADDR_VAR 0 55
76901: PUSH
76902: LD_INT 3
76904: PUSH
76905: LD_INT 2
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: LD_INT 3
76914: PUSH
76915: LD_INT 3
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PUSH
76922: LD_INT 2
76924: PUSH
76925: LD_INT 3
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: LIST
76936: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76937: LD_ADDR_VAR 0 56
76941: PUSH
76942: LD_INT 1
76944: PUSH
76945: LD_INT 3
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: PUSH
76952: LD_INT 0
76954: PUSH
76955: LD_INT 3
76957: PUSH
76958: EMPTY
76959: LIST
76960: LIST
76961: PUSH
76962: LD_INT 1
76964: NEG
76965: PUSH
76966: LD_INT 2
76968: PUSH
76969: EMPTY
76970: LIST
76971: LIST
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: LIST
76977: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76978: LD_ADDR_VAR 0 57
76982: PUSH
76983: LD_INT 2
76985: NEG
76986: PUSH
76987: LD_INT 1
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: PUSH
76994: LD_INT 3
76996: NEG
76997: PUSH
76998: LD_INT 0
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: PUSH
77005: LD_INT 3
77007: NEG
77008: PUSH
77009: LD_INT 1
77011: NEG
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: LIST
77021: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77022: LD_ADDR_VAR 0 58
77026: PUSH
77027: LD_INT 2
77029: NEG
77030: PUSH
77031: LD_INT 3
77033: NEG
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 3
77041: NEG
77042: PUSH
77043: LD_INT 2
77045: NEG
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: PUSH
77051: LD_INT 3
77053: NEG
77054: PUSH
77055: LD_INT 3
77057: NEG
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: LIST
77067: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
77068: LD_ADDR_VAR 0 59
77072: PUSH
77073: LD_INT 1
77075: NEG
77076: PUSH
77077: LD_INT 2
77079: NEG
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PUSH
77085: LD_INT 0
77087: PUSH
77088: LD_INT 2
77090: NEG
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: PUSH
77096: LD_INT 1
77098: PUSH
77099: LD_INT 1
77101: NEG
77102: PUSH
77103: EMPTY
77104: LIST
77105: LIST
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: LIST
77111: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
77112: LD_ADDR_VAR 0 60
77116: PUSH
77117: LD_INT 1
77119: PUSH
77120: LD_INT 1
77122: NEG
77123: PUSH
77124: EMPTY
77125: LIST
77126: LIST
77127: PUSH
77128: LD_INT 2
77130: PUSH
77131: LD_INT 0
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: PUSH
77138: LD_INT 2
77140: PUSH
77141: LD_INT 1
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: LIST
77152: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
77153: LD_ADDR_VAR 0 61
77157: PUSH
77158: LD_INT 2
77160: PUSH
77161: LD_INT 1
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: LD_INT 2
77170: PUSH
77171: LD_INT 2
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 1
77180: PUSH
77181: LD_INT 2
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: LIST
77192: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
77193: LD_ADDR_VAR 0 62
77197: PUSH
77198: LD_INT 1
77200: PUSH
77201: LD_INT 2
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: PUSH
77208: LD_INT 0
77210: PUSH
77211: LD_INT 2
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PUSH
77218: LD_INT 1
77220: NEG
77221: PUSH
77222: LD_INT 1
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: LIST
77233: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
77234: LD_ADDR_VAR 0 63
77238: PUSH
77239: LD_INT 1
77241: NEG
77242: PUSH
77243: LD_INT 1
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PUSH
77250: LD_INT 2
77252: NEG
77253: PUSH
77254: LD_INT 0
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: LD_INT 2
77263: NEG
77264: PUSH
77265: LD_INT 1
77267: NEG
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: LIST
77277: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77278: LD_ADDR_VAR 0 64
77282: PUSH
77283: LD_INT 1
77285: NEG
77286: PUSH
77287: LD_INT 2
77289: NEG
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 2
77297: NEG
77298: PUSH
77299: LD_INT 1
77301: NEG
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 2
77309: NEG
77310: PUSH
77311: LD_INT 2
77313: NEG
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: LIST
77323: ST_TO_ADDR
// end ; 2 :
77324: GO 80590
77326: LD_INT 2
77328: DOUBLE
77329: EQUAL
77330: IFTRUE 77334
77332: GO 80589
77334: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
77335: LD_ADDR_VAR 0 29
77339: PUSH
77340: LD_INT 4
77342: PUSH
77343: LD_INT 0
77345: PUSH
77346: EMPTY
77347: LIST
77348: LIST
77349: PUSH
77350: LD_INT 4
77352: PUSH
77353: LD_INT 1
77355: NEG
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_INT 5
77363: PUSH
77364: LD_INT 0
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: PUSH
77371: LD_INT 5
77373: PUSH
77374: LD_INT 1
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: PUSH
77381: LD_INT 4
77383: PUSH
77384: LD_INT 1
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: PUSH
77391: LD_INT 3
77393: PUSH
77394: LD_INT 0
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 3
77403: PUSH
77404: LD_INT 1
77406: NEG
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PUSH
77412: LD_INT 3
77414: PUSH
77415: LD_INT 2
77417: NEG
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: PUSH
77423: LD_INT 5
77425: PUSH
77426: LD_INT 2
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PUSH
77433: LD_INT 3
77435: PUSH
77436: LD_INT 3
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: PUSH
77443: LD_INT 3
77445: PUSH
77446: LD_INT 2
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_INT 4
77455: PUSH
77456: LD_INT 3
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_INT 4
77465: PUSH
77466: LD_INT 4
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: PUSH
77473: LD_INT 3
77475: PUSH
77476: LD_INT 4
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 2
77485: PUSH
77486: LD_INT 3
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: LD_INT 2
77495: PUSH
77496: LD_INT 2
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_INT 4
77505: PUSH
77506: LD_INT 2
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: PUSH
77513: LD_INT 2
77515: PUSH
77516: LD_INT 4
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 0
77525: PUSH
77526: LD_INT 4
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: LD_INT 0
77535: PUSH
77536: LD_INT 3
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 1
77545: PUSH
77546: LD_INT 4
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 1
77555: PUSH
77556: LD_INT 5
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 0
77565: PUSH
77566: LD_INT 5
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 1
77575: NEG
77576: PUSH
77577: LD_INT 4
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PUSH
77584: LD_INT 1
77586: NEG
77587: PUSH
77588: LD_INT 3
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: PUSH
77595: LD_INT 2
77597: PUSH
77598: LD_INT 5
77600: PUSH
77601: EMPTY
77602: LIST
77603: LIST
77604: PUSH
77605: LD_INT 2
77607: NEG
77608: PUSH
77609: LD_INT 3
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: PUSH
77616: LD_INT 3
77618: NEG
77619: PUSH
77620: LD_INT 0
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: PUSH
77627: LD_INT 3
77629: NEG
77630: PUSH
77631: LD_INT 1
77633: NEG
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PUSH
77639: LD_INT 2
77641: NEG
77642: PUSH
77643: LD_INT 0
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: LD_INT 2
77652: NEG
77653: PUSH
77654: LD_INT 1
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PUSH
77661: LD_INT 3
77663: NEG
77664: PUSH
77665: LD_INT 1
77667: PUSH
77668: EMPTY
77669: LIST
77670: LIST
77671: PUSH
77672: LD_INT 4
77674: NEG
77675: PUSH
77676: LD_INT 0
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: PUSH
77683: LD_INT 4
77685: NEG
77686: PUSH
77687: LD_INT 1
77689: NEG
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 4
77697: NEG
77698: PUSH
77699: LD_INT 2
77701: NEG
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: PUSH
77707: LD_INT 2
77709: NEG
77710: PUSH
77711: LD_INT 2
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: PUSH
77718: LD_INT 4
77720: NEG
77721: PUSH
77722: LD_INT 4
77724: NEG
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PUSH
77730: LD_INT 4
77732: NEG
77733: PUSH
77734: LD_INT 5
77736: NEG
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PUSH
77742: LD_INT 3
77744: NEG
77745: PUSH
77746: LD_INT 4
77748: NEG
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PUSH
77754: LD_INT 3
77756: NEG
77757: PUSH
77758: LD_INT 3
77760: NEG
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: PUSH
77766: LD_INT 4
77768: NEG
77769: PUSH
77770: LD_INT 3
77772: NEG
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: PUSH
77778: LD_INT 5
77780: NEG
77781: PUSH
77782: LD_INT 4
77784: NEG
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: LD_INT 5
77792: NEG
77793: PUSH
77794: LD_INT 5
77796: NEG
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: PUSH
77802: LD_INT 3
77804: NEG
77805: PUSH
77806: LD_INT 5
77808: NEG
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 5
77816: NEG
77817: PUSH
77818: LD_INT 3
77820: NEG
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: LIST
77868: LIST
77869: LIST
77870: LIST
77871: LIST
77872: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
77873: LD_ADDR_VAR 0 30
77877: PUSH
77878: LD_INT 4
77880: PUSH
77881: LD_INT 4
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: PUSH
77888: LD_INT 4
77890: PUSH
77891: LD_INT 3
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: PUSH
77898: LD_INT 5
77900: PUSH
77901: LD_INT 4
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PUSH
77908: LD_INT 5
77910: PUSH
77911: LD_INT 5
77913: PUSH
77914: EMPTY
77915: LIST
77916: LIST
77917: PUSH
77918: LD_INT 4
77920: PUSH
77921: LD_INT 5
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: PUSH
77928: LD_INT 3
77930: PUSH
77931: LD_INT 4
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 3
77940: PUSH
77941: LD_INT 3
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: LD_INT 5
77950: PUSH
77951: LD_INT 3
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 3
77960: PUSH
77961: LD_INT 5
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: LD_INT 0
77970: PUSH
77971: LD_INT 3
77973: PUSH
77974: EMPTY
77975: LIST
77976: LIST
77977: PUSH
77978: LD_INT 0
77980: PUSH
77981: LD_INT 2
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: PUSH
77988: LD_INT 1
77990: PUSH
77991: LD_INT 3
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: PUSH
77998: LD_INT 1
78000: PUSH
78001: LD_INT 4
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: LD_INT 0
78010: PUSH
78011: LD_INT 4
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: LD_INT 1
78020: NEG
78021: PUSH
78022: LD_INT 3
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 1
78031: NEG
78032: PUSH
78033: LD_INT 2
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: PUSH
78040: LD_INT 2
78042: PUSH
78043: LD_INT 4
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: LD_INT 2
78052: NEG
78053: PUSH
78054: LD_INT 2
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: PUSH
78061: LD_INT 4
78063: NEG
78064: PUSH
78065: LD_INT 0
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: PUSH
78072: LD_INT 4
78074: NEG
78075: PUSH
78076: LD_INT 1
78078: NEG
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: PUSH
78084: LD_INT 3
78086: NEG
78087: PUSH
78088: LD_INT 0
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: LD_INT 3
78097: NEG
78098: PUSH
78099: LD_INT 1
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 4
78108: NEG
78109: PUSH
78110: LD_INT 1
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 5
78119: NEG
78120: PUSH
78121: LD_INT 0
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PUSH
78128: LD_INT 5
78130: NEG
78131: PUSH
78132: LD_INT 1
78134: NEG
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: PUSH
78140: LD_INT 5
78142: NEG
78143: PUSH
78144: LD_INT 2
78146: NEG
78147: PUSH
78148: EMPTY
78149: LIST
78150: LIST
78151: PUSH
78152: LD_INT 3
78154: NEG
78155: PUSH
78156: LD_INT 2
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: PUSH
78163: LD_INT 3
78165: NEG
78166: PUSH
78167: LD_INT 3
78169: NEG
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: LD_INT 3
78177: NEG
78178: PUSH
78179: LD_INT 4
78181: NEG
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PUSH
78187: LD_INT 2
78189: NEG
78190: PUSH
78191: LD_INT 3
78193: NEG
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 2
78201: NEG
78202: PUSH
78203: LD_INT 2
78205: NEG
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PUSH
78211: LD_INT 3
78213: NEG
78214: PUSH
78215: LD_INT 2
78217: NEG
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: LD_INT 4
78225: NEG
78226: PUSH
78227: LD_INT 3
78229: NEG
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: PUSH
78235: LD_INT 4
78237: NEG
78238: PUSH
78239: LD_INT 4
78241: NEG
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PUSH
78247: LD_INT 2
78249: NEG
78250: PUSH
78251: LD_INT 4
78253: NEG
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 4
78261: NEG
78262: PUSH
78263: LD_INT 2
78265: NEG
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: PUSH
78271: LD_INT 0
78273: PUSH
78274: LD_INT 4
78276: NEG
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 0
78284: PUSH
78285: LD_INT 5
78287: NEG
78288: PUSH
78289: EMPTY
78290: LIST
78291: LIST
78292: PUSH
78293: LD_INT 1
78295: PUSH
78296: LD_INT 4
78298: NEG
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: PUSH
78304: LD_INT 1
78306: PUSH
78307: LD_INT 3
78309: NEG
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: PUSH
78315: LD_INT 0
78317: PUSH
78318: LD_INT 3
78320: NEG
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: PUSH
78326: LD_INT 1
78328: NEG
78329: PUSH
78330: LD_INT 4
78332: NEG
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PUSH
78338: LD_INT 1
78340: NEG
78341: PUSH
78342: LD_INT 5
78344: NEG
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: PUSH
78350: LD_INT 2
78352: PUSH
78353: LD_INT 3
78355: NEG
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: PUSH
78361: LD_INT 2
78363: NEG
78364: PUSH
78365: LD_INT 5
78367: NEG
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: LIST
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: LIST
78387: LIST
78388: LIST
78389: LIST
78390: LIST
78391: LIST
78392: LIST
78393: LIST
78394: LIST
78395: LIST
78396: LIST
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
78420: LD_ADDR_VAR 0 31
78424: PUSH
78425: LD_INT 0
78427: PUSH
78428: LD_INT 4
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PUSH
78435: LD_INT 0
78437: PUSH
78438: LD_INT 3
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: PUSH
78445: LD_INT 1
78447: PUSH
78448: LD_INT 4
78450: PUSH
78451: EMPTY
78452: LIST
78453: LIST
78454: PUSH
78455: LD_INT 1
78457: PUSH
78458: LD_INT 5
78460: PUSH
78461: EMPTY
78462: LIST
78463: LIST
78464: PUSH
78465: LD_INT 0
78467: PUSH
78468: LD_INT 5
78470: PUSH
78471: EMPTY
78472: LIST
78473: LIST
78474: PUSH
78475: LD_INT 1
78477: NEG
78478: PUSH
78479: LD_INT 4
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PUSH
78486: LD_INT 1
78488: NEG
78489: PUSH
78490: LD_INT 3
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PUSH
78497: LD_INT 2
78499: PUSH
78500: LD_INT 5
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PUSH
78507: LD_INT 2
78509: NEG
78510: PUSH
78511: LD_INT 3
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: LD_INT 3
78520: NEG
78521: PUSH
78522: LD_INT 0
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 3
78531: NEG
78532: PUSH
78533: LD_INT 1
78535: NEG
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: PUSH
78541: LD_INT 2
78543: NEG
78544: PUSH
78545: LD_INT 0
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PUSH
78552: LD_INT 2
78554: NEG
78555: PUSH
78556: LD_INT 1
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PUSH
78563: LD_INT 3
78565: NEG
78566: PUSH
78567: LD_INT 1
78569: PUSH
78570: EMPTY
78571: LIST
78572: LIST
78573: PUSH
78574: LD_INT 4
78576: NEG
78577: PUSH
78578: LD_INT 0
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: PUSH
78585: LD_INT 4
78587: NEG
78588: PUSH
78589: LD_INT 1
78591: NEG
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: PUSH
78597: LD_INT 4
78599: NEG
78600: PUSH
78601: LD_INT 2
78603: NEG
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: PUSH
78609: LD_INT 2
78611: NEG
78612: PUSH
78613: LD_INT 2
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PUSH
78620: LD_INT 4
78622: NEG
78623: PUSH
78624: LD_INT 4
78626: NEG
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 4
78634: NEG
78635: PUSH
78636: LD_INT 5
78638: NEG
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: PUSH
78644: LD_INT 3
78646: NEG
78647: PUSH
78648: LD_INT 4
78650: NEG
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PUSH
78656: LD_INT 3
78658: NEG
78659: PUSH
78660: LD_INT 3
78662: NEG
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_INT 4
78670: NEG
78671: PUSH
78672: LD_INT 3
78674: NEG
78675: PUSH
78676: EMPTY
78677: LIST
78678: LIST
78679: PUSH
78680: LD_INT 5
78682: NEG
78683: PUSH
78684: LD_INT 4
78686: NEG
78687: PUSH
78688: EMPTY
78689: LIST
78690: LIST
78691: PUSH
78692: LD_INT 5
78694: NEG
78695: PUSH
78696: LD_INT 5
78698: NEG
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: LD_INT 3
78706: NEG
78707: PUSH
78708: LD_INT 5
78710: NEG
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: LD_INT 5
78718: NEG
78719: PUSH
78720: LD_INT 3
78722: NEG
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: PUSH
78728: LD_INT 0
78730: PUSH
78731: LD_INT 3
78733: NEG
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: PUSH
78739: LD_INT 0
78741: PUSH
78742: LD_INT 4
78744: NEG
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PUSH
78750: LD_INT 1
78752: PUSH
78753: LD_INT 3
78755: NEG
78756: PUSH
78757: EMPTY
78758: LIST
78759: LIST
78760: PUSH
78761: LD_INT 1
78763: PUSH
78764: LD_INT 2
78766: NEG
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PUSH
78772: LD_INT 0
78774: PUSH
78775: LD_INT 2
78777: NEG
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: PUSH
78783: LD_INT 1
78785: NEG
78786: PUSH
78787: LD_INT 3
78789: NEG
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: PUSH
78795: LD_INT 1
78797: NEG
78798: PUSH
78799: LD_INT 4
78801: NEG
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: PUSH
78807: LD_INT 2
78809: PUSH
78810: LD_INT 2
78812: NEG
78813: PUSH
78814: EMPTY
78815: LIST
78816: LIST
78817: PUSH
78818: LD_INT 2
78820: NEG
78821: PUSH
78822: LD_INT 4
78824: NEG
78825: PUSH
78826: EMPTY
78827: LIST
78828: LIST
78829: PUSH
78830: LD_INT 4
78832: PUSH
78833: LD_INT 0
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: LD_INT 4
78842: PUSH
78843: LD_INT 1
78845: NEG
78846: PUSH
78847: EMPTY
78848: LIST
78849: LIST
78850: PUSH
78851: LD_INT 5
78853: PUSH
78854: LD_INT 0
78856: PUSH
78857: EMPTY
78858: LIST
78859: LIST
78860: PUSH
78861: LD_INT 5
78863: PUSH
78864: LD_INT 1
78866: PUSH
78867: EMPTY
78868: LIST
78869: LIST
78870: PUSH
78871: LD_INT 4
78873: PUSH
78874: LD_INT 1
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: PUSH
78881: LD_INT 3
78883: PUSH
78884: LD_INT 0
78886: PUSH
78887: EMPTY
78888: LIST
78889: LIST
78890: PUSH
78891: LD_INT 3
78893: PUSH
78894: LD_INT 1
78896: NEG
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PUSH
78902: LD_INT 3
78904: PUSH
78905: LD_INT 2
78907: NEG
78908: PUSH
78909: EMPTY
78910: LIST
78911: LIST
78912: PUSH
78913: LD_INT 5
78915: PUSH
78916: LD_INT 2
78918: PUSH
78919: EMPTY
78920: LIST
78921: LIST
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: LIST
78927: LIST
78928: LIST
78929: LIST
78930: LIST
78931: LIST
78932: LIST
78933: LIST
78934: LIST
78935: LIST
78936: LIST
78937: LIST
78938: LIST
78939: LIST
78940: LIST
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
78970: LD_ADDR_VAR 0 32
78974: PUSH
78975: LD_INT 4
78977: NEG
78978: PUSH
78979: LD_INT 0
78981: PUSH
78982: EMPTY
78983: LIST
78984: LIST
78985: PUSH
78986: LD_INT 4
78988: NEG
78989: PUSH
78990: LD_INT 1
78992: NEG
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 3
79000: NEG
79001: PUSH
79002: LD_INT 0
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PUSH
79009: LD_INT 3
79011: NEG
79012: PUSH
79013: LD_INT 1
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 4
79022: NEG
79023: PUSH
79024: LD_INT 1
79026: PUSH
79027: EMPTY
79028: LIST
79029: LIST
79030: PUSH
79031: LD_INT 5
79033: NEG
79034: PUSH
79035: LD_INT 0
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 5
79044: NEG
79045: PUSH
79046: LD_INT 1
79048: NEG
79049: PUSH
79050: EMPTY
79051: LIST
79052: LIST
79053: PUSH
79054: LD_INT 5
79056: NEG
79057: PUSH
79058: LD_INT 2
79060: NEG
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PUSH
79066: LD_INT 3
79068: NEG
79069: PUSH
79070: LD_INT 2
79072: PUSH
79073: EMPTY
79074: LIST
79075: LIST
79076: PUSH
79077: LD_INT 3
79079: NEG
79080: PUSH
79081: LD_INT 3
79083: NEG
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: PUSH
79089: LD_INT 3
79091: NEG
79092: PUSH
79093: LD_INT 4
79095: NEG
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PUSH
79101: LD_INT 2
79103: NEG
79104: PUSH
79105: LD_INT 3
79107: NEG
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: PUSH
79113: LD_INT 2
79115: NEG
79116: PUSH
79117: LD_INT 2
79119: NEG
79120: PUSH
79121: EMPTY
79122: LIST
79123: LIST
79124: PUSH
79125: LD_INT 3
79127: NEG
79128: PUSH
79129: LD_INT 2
79131: NEG
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: LD_INT 4
79139: NEG
79140: PUSH
79141: LD_INT 3
79143: NEG
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: PUSH
79149: LD_INT 4
79151: NEG
79152: PUSH
79153: LD_INT 4
79155: NEG
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: PUSH
79161: LD_INT 2
79163: NEG
79164: PUSH
79165: LD_INT 4
79167: NEG
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: LD_INT 4
79175: NEG
79176: PUSH
79177: LD_INT 2
79179: NEG
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: LD_INT 0
79187: PUSH
79188: LD_INT 4
79190: NEG
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 0
79198: PUSH
79199: LD_INT 5
79201: NEG
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PUSH
79207: LD_INT 1
79209: PUSH
79210: LD_INT 4
79212: NEG
79213: PUSH
79214: EMPTY
79215: LIST
79216: LIST
79217: PUSH
79218: LD_INT 1
79220: PUSH
79221: LD_INT 3
79223: NEG
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: LD_INT 0
79231: PUSH
79232: LD_INT 3
79234: NEG
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: LD_INT 1
79242: NEG
79243: PUSH
79244: LD_INT 4
79246: NEG
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: PUSH
79252: LD_INT 1
79254: NEG
79255: PUSH
79256: LD_INT 5
79258: NEG
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 2
79266: PUSH
79267: LD_INT 3
79269: NEG
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: PUSH
79275: LD_INT 2
79277: NEG
79278: PUSH
79279: LD_INT 5
79281: NEG
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PUSH
79287: LD_INT 3
79289: PUSH
79290: LD_INT 0
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: PUSH
79297: LD_INT 3
79299: PUSH
79300: LD_INT 1
79302: NEG
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: PUSH
79308: LD_INT 4
79310: PUSH
79311: LD_INT 0
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: PUSH
79318: LD_INT 4
79320: PUSH
79321: LD_INT 1
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: PUSH
79328: LD_INT 3
79330: PUSH
79331: LD_INT 1
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: PUSH
79338: LD_INT 2
79340: PUSH
79341: LD_INT 0
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: PUSH
79348: LD_INT 2
79350: PUSH
79351: LD_INT 1
79353: NEG
79354: PUSH
79355: EMPTY
79356: LIST
79357: LIST
79358: PUSH
79359: LD_INT 2
79361: PUSH
79362: LD_INT 2
79364: NEG
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: PUSH
79370: LD_INT 4
79372: PUSH
79373: LD_INT 2
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: PUSH
79380: LD_INT 4
79382: PUSH
79383: LD_INT 4
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: PUSH
79390: LD_INT 4
79392: PUSH
79393: LD_INT 3
79395: PUSH
79396: EMPTY
79397: LIST
79398: LIST
79399: PUSH
79400: LD_INT 5
79402: PUSH
79403: LD_INT 4
79405: PUSH
79406: EMPTY
79407: LIST
79408: LIST
79409: PUSH
79410: LD_INT 5
79412: PUSH
79413: LD_INT 5
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: LD_INT 4
79422: PUSH
79423: LD_INT 5
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: PUSH
79430: LD_INT 3
79432: PUSH
79433: LD_INT 4
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 3
79442: PUSH
79443: LD_INT 3
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 5
79452: PUSH
79453: LD_INT 3
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 3
79462: PUSH
79463: LD_INT 5
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: PUSH
79470: EMPTY
79471: LIST
79472: LIST
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: LIST
79491: LIST
79492: LIST
79493: LIST
79494: LIST
79495: LIST
79496: LIST
79497: LIST
79498: LIST
79499: LIST
79500: LIST
79501: LIST
79502: LIST
79503: LIST
79504: LIST
79505: LIST
79506: LIST
79507: LIST
79508: LIST
79509: LIST
79510: LIST
79511: LIST
79512: LIST
79513: LIST
79514: LIST
79515: LIST
79516: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
79517: LD_ADDR_VAR 0 33
79521: PUSH
79522: LD_INT 4
79524: NEG
79525: PUSH
79526: LD_INT 4
79528: NEG
79529: PUSH
79530: EMPTY
79531: LIST
79532: LIST
79533: PUSH
79534: LD_INT 4
79536: NEG
79537: PUSH
79538: LD_INT 5
79540: NEG
79541: PUSH
79542: EMPTY
79543: LIST
79544: LIST
79545: PUSH
79546: LD_INT 3
79548: NEG
79549: PUSH
79550: LD_INT 4
79552: NEG
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: LD_INT 3
79560: NEG
79561: PUSH
79562: LD_INT 3
79564: NEG
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 4
79572: NEG
79573: PUSH
79574: LD_INT 3
79576: NEG
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: LD_INT 5
79584: NEG
79585: PUSH
79586: LD_INT 4
79588: NEG
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: PUSH
79594: LD_INT 5
79596: NEG
79597: PUSH
79598: LD_INT 5
79600: NEG
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: PUSH
79606: LD_INT 3
79608: NEG
79609: PUSH
79610: LD_INT 5
79612: NEG
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: PUSH
79618: LD_INT 5
79620: NEG
79621: PUSH
79622: LD_INT 3
79624: NEG
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 0
79632: PUSH
79633: LD_INT 3
79635: NEG
79636: PUSH
79637: EMPTY
79638: LIST
79639: LIST
79640: PUSH
79641: LD_INT 0
79643: PUSH
79644: LD_INT 4
79646: NEG
79647: PUSH
79648: EMPTY
79649: LIST
79650: LIST
79651: PUSH
79652: LD_INT 1
79654: PUSH
79655: LD_INT 3
79657: NEG
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: PUSH
79663: LD_INT 1
79665: PUSH
79666: LD_INT 2
79668: NEG
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PUSH
79674: LD_INT 0
79676: PUSH
79677: LD_INT 2
79679: NEG
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: PUSH
79685: LD_INT 1
79687: NEG
79688: PUSH
79689: LD_INT 3
79691: NEG
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PUSH
79697: LD_INT 1
79699: NEG
79700: PUSH
79701: LD_INT 4
79703: NEG
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 2
79711: PUSH
79712: LD_INT 2
79714: NEG
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: LD_INT 2
79722: NEG
79723: PUSH
79724: LD_INT 4
79726: NEG
79727: PUSH
79728: EMPTY
79729: LIST
79730: LIST
79731: PUSH
79732: LD_INT 4
79734: PUSH
79735: LD_INT 0
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: PUSH
79742: LD_INT 4
79744: PUSH
79745: LD_INT 1
79747: NEG
79748: PUSH
79749: EMPTY
79750: LIST
79751: LIST
79752: PUSH
79753: LD_INT 5
79755: PUSH
79756: LD_INT 0
79758: PUSH
79759: EMPTY
79760: LIST
79761: LIST
79762: PUSH
79763: LD_INT 5
79765: PUSH
79766: LD_INT 1
79768: PUSH
79769: EMPTY
79770: LIST
79771: LIST
79772: PUSH
79773: LD_INT 4
79775: PUSH
79776: LD_INT 1
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: PUSH
79783: LD_INT 3
79785: PUSH
79786: LD_INT 0
79788: PUSH
79789: EMPTY
79790: LIST
79791: LIST
79792: PUSH
79793: LD_INT 3
79795: PUSH
79796: LD_INT 1
79798: NEG
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: LD_INT 3
79806: PUSH
79807: LD_INT 2
79809: NEG
79810: PUSH
79811: EMPTY
79812: LIST
79813: LIST
79814: PUSH
79815: LD_INT 5
79817: PUSH
79818: LD_INT 2
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 3
79827: PUSH
79828: LD_INT 3
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 3
79837: PUSH
79838: LD_INT 2
79840: PUSH
79841: EMPTY
79842: LIST
79843: LIST
79844: PUSH
79845: LD_INT 4
79847: PUSH
79848: LD_INT 3
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: PUSH
79855: LD_INT 4
79857: PUSH
79858: LD_INT 4
79860: PUSH
79861: EMPTY
79862: LIST
79863: LIST
79864: PUSH
79865: LD_INT 3
79867: PUSH
79868: LD_INT 4
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 2
79877: PUSH
79878: LD_INT 3
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PUSH
79885: LD_INT 2
79887: PUSH
79888: LD_INT 2
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 4
79897: PUSH
79898: LD_INT 2
79900: PUSH
79901: EMPTY
79902: LIST
79903: LIST
79904: PUSH
79905: LD_INT 2
79907: PUSH
79908: LD_INT 4
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: PUSH
79915: LD_INT 0
79917: PUSH
79918: LD_INT 4
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PUSH
79925: LD_INT 0
79927: PUSH
79928: LD_INT 3
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PUSH
79935: LD_INT 1
79937: PUSH
79938: LD_INT 4
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: PUSH
79945: LD_INT 1
79947: PUSH
79948: LD_INT 5
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 0
79957: PUSH
79958: LD_INT 5
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 1
79967: NEG
79968: PUSH
79969: LD_INT 4
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PUSH
79976: LD_INT 1
79978: NEG
79979: PUSH
79980: LD_INT 3
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 2
79989: PUSH
79990: LD_INT 5
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 2
79999: NEG
80000: PUSH
80001: LD_INT 3
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: EMPTY
80009: LIST
80010: LIST
80011: LIST
80012: LIST
80013: LIST
80014: LIST
80015: LIST
80016: LIST
80017: LIST
80018: LIST
80019: LIST
80020: LIST
80021: LIST
80022: LIST
80023: LIST
80024: LIST
80025: LIST
80026: LIST
80027: LIST
80028: LIST
80029: LIST
80030: LIST
80031: LIST
80032: LIST
80033: LIST
80034: LIST
80035: LIST
80036: LIST
80037: LIST
80038: LIST
80039: LIST
80040: LIST
80041: LIST
80042: LIST
80043: LIST
80044: LIST
80045: LIST
80046: LIST
80047: LIST
80048: LIST
80049: LIST
80050: LIST
80051: LIST
80052: LIST
80053: LIST
80054: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
80055: LD_ADDR_VAR 0 34
80059: PUSH
80060: LD_INT 0
80062: PUSH
80063: LD_INT 4
80065: NEG
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: PUSH
80071: LD_INT 0
80073: PUSH
80074: LD_INT 5
80076: NEG
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: PUSH
80082: LD_INT 1
80084: PUSH
80085: LD_INT 4
80087: NEG
80088: PUSH
80089: EMPTY
80090: LIST
80091: LIST
80092: PUSH
80093: LD_INT 1
80095: PUSH
80096: LD_INT 3
80098: NEG
80099: PUSH
80100: EMPTY
80101: LIST
80102: LIST
80103: PUSH
80104: LD_INT 0
80106: PUSH
80107: LD_INT 3
80109: NEG
80110: PUSH
80111: EMPTY
80112: LIST
80113: LIST
80114: PUSH
80115: LD_INT 1
80117: NEG
80118: PUSH
80119: LD_INT 4
80121: NEG
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: PUSH
80127: LD_INT 1
80129: NEG
80130: PUSH
80131: LD_INT 5
80133: NEG
80134: PUSH
80135: EMPTY
80136: LIST
80137: LIST
80138: PUSH
80139: LD_INT 2
80141: PUSH
80142: LD_INT 3
80144: NEG
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PUSH
80150: LD_INT 2
80152: NEG
80153: PUSH
80154: LD_INT 5
80156: NEG
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: PUSH
80162: LD_INT 3
80164: PUSH
80165: LD_INT 0
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: PUSH
80172: LD_INT 3
80174: PUSH
80175: LD_INT 1
80177: NEG
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: LD_INT 4
80185: PUSH
80186: LD_INT 0
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PUSH
80193: LD_INT 4
80195: PUSH
80196: LD_INT 1
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: PUSH
80203: LD_INT 3
80205: PUSH
80206: LD_INT 1
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: PUSH
80213: LD_INT 2
80215: PUSH
80216: LD_INT 0
80218: PUSH
80219: EMPTY
80220: LIST
80221: LIST
80222: PUSH
80223: LD_INT 2
80225: PUSH
80226: LD_INT 1
80228: NEG
80229: PUSH
80230: EMPTY
80231: LIST
80232: LIST
80233: PUSH
80234: LD_INT 2
80236: PUSH
80237: LD_INT 2
80239: NEG
80240: PUSH
80241: EMPTY
80242: LIST
80243: LIST
80244: PUSH
80245: LD_INT 4
80247: PUSH
80248: LD_INT 2
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: PUSH
80255: LD_INT 4
80257: PUSH
80258: LD_INT 4
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: PUSH
80265: LD_INT 4
80267: PUSH
80268: LD_INT 3
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: PUSH
80275: LD_INT 5
80277: PUSH
80278: LD_INT 4
80280: PUSH
80281: EMPTY
80282: LIST
80283: LIST
80284: PUSH
80285: LD_INT 5
80287: PUSH
80288: LD_INT 5
80290: PUSH
80291: EMPTY
80292: LIST
80293: LIST
80294: PUSH
80295: LD_INT 4
80297: PUSH
80298: LD_INT 5
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: PUSH
80305: LD_INT 3
80307: PUSH
80308: LD_INT 4
80310: PUSH
80311: EMPTY
80312: LIST
80313: LIST
80314: PUSH
80315: LD_INT 3
80317: PUSH
80318: LD_INT 3
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: PUSH
80325: LD_INT 5
80327: PUSH
80328: LD_INT 3
80330: PUSH
80331: EMPTY
80332: LIST
80333: LIST
80334: PUSH
80335: LD_INT 3
80337: PUSH
80338: LD_INT 5
80340: PUSH
80341: EMPTY
80342: LIST
80343: LIST
80344: PUSH
80345: LD_INT 0
80347: PUSH
80348: LD_INT 3
80350: PUSH
80351: EMPTY
80352: LIST
80353: LIST
80354: PUSH
80355: LD_INT 0
80357: PUSH
80358: LD_INT 2
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: LD_INT 1
80367: PUSH
80368: LD_INT 3
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 1
80377: PUSH
80378: LD_INT 4
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 0
80387: PUSH
80388: LD_INT 4
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 1
80397: NEG
80398: PUSH
80399: LD_INT 3
80401: PUSH
80402: EMPTY
80403: LIST
80404: LIST
80405: PUSH
80406: LD_INT 1
80408: NEG
80409: PUSH
80410: LD_INT 2
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: PUSH
80417: LD_INT 2
80419: PUSH
80420: LD_INT 4
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: PUSH
80427: LD_INT 2
80429: NEG
80430: PUSH
80431: LD_INT 2
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: PUSH
80438: LD_INT 4
80440: NEG
80441: PUSH
80442: LD_INT 0
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: PUSH
80449: LD_INT 4
80451: NEG
80452: PUSH
80453: LD_INT 1
80455: NEG
80456: PUSH
80457: EMPTY
80458: LIST
80459: LIST
80460: PUSH
80461: LD_INT 3
80463: NEG
80464: PUSH
80465: LD_INT 0
80467: PUSH
80468: EMPTY
80469: LIST
80470: LIST
80471: PUSH
80472: LD_INT 3
80474: NEG
80475: PUSH
80476: LD_INT 1
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: PUSH
80483: LD_INT 4
80485: NEG
80486: PUSH
80487: LD_INT 1
80489: PUSH
80490: EMPTY
80491: LIST
80492: LIST
80493: PUSH
80494: LD_INT 5
80496: NEG
80497: PUSH
80498: LD_INT 0
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: PUSH
80505: LD_INT 5
80507: NEG
80508: PUSH
80509: LD_INT 1
80511: NEG
80512: PUSH
80513: EMPTY
80514: LIST
80515: LIST
80516: PUSH
80517: LD_INT 5
80519: NEG
80520: PUSH
80521: LD_INT 2
80523: NEG
80524: PUSH
80525: EMPTY
80526: LIST
80527: LIST
80528: PUSH
80529: LD_INT 3
80531: NEG
80532: PUSH
80533: LD_INT 2
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: PUSH
80540: EMPTY
80541: LIST
80542: LIST
80543: LIST
80544: LIST
80545: LIST
80546: LIST
80547: LIST
80548: LIST
80549: LIST
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: LIST
80555: LIST
80556: LIST
80557: LIST
80558: LIST
80559: LIST
80560: LIST
80561: LIST
80562: LIST
80563: LIST
80564: LIST
80565: LIST
80566: LIST
80567: LIST
80568: LIST
80569: LIST
80570: LIST
80571: LIST
80572: LIST
80573: LIST
80574: LIST
80575: LIST
80576: LIST
80577: LIST
80578: LIST
80579: LIST
80580: LIST
80581: LIST
80582: LIST
80583: LIST
80584: LIST
80585: LIST
80586: ST_TO_ADDR
// end ; end ;
80587: GO 80590
80589: POP
// case btype of b_depot , b_warehouse :
80590: LD_VAR 0 1
80594: PUSH
80595: LD_INT 0
80597: DOUBLE
80598: EQUAL
80599: IFTRUE 80609
80601: LD_INT 1
80603: DOUBLE
80604: EQUAL
80605: IFTRUE 80609
80607: GO 80810
80609: POP
// case nation of nation_american :
80610: LD_VAR 0 5
80614: PUSH
80615: LD_INT 1
80617: DOUBLE
80618: EQUAL
80619: IFTRUE 80623
80621: GO 80679
80623: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
80624: LD_ADDR_VAR 0 9
80628: PUSH
80629: LD_VAR 0 11
80633: PUSH
80634: LD_VAR 0 12
80638: PUSH
80639: LD_VAR 0 13
80643: PUSH
80644: LD_VAR 0 14
80648: PUSH
80649: LD_VAR 0 15
80653: PUSH
80654: LD_VAR 0 16
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: LIST
80663: LIST
80664: LIST
80665: LIST
80666: PUSH
80667: LD_VAR 0 4
80671: PUSH
80672: LD_INT 1
80674: PLUS
80675: ARRAY
80676: ST_TO_ADDR
80677: GO 80808
80679: LD_INT 2
80681: DOUBLE
80682: EQUAL
80683: IFTRUE 80687
80685: GO 80743
80687: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
80688: LD_ADDR_VAR 0 9
80692: PUSH
80693: LD_VAR 0 17
80697: PUSH
80698: LD_VAR 0 18
80702: PUSH
80703: LD_VAR 0 19
80707: PUSH
80708: LD_VAR 0 20
80712: PUSH
80713: LD_VAR 0 21
80717: PUSH
80718: LD_VAR 0 22
80722: PUSH
80723: EMPTY
80724: LIST
80725: LIST
80726: LIST
80727: LIST
80728: LIST
80729: LIST
80730: PUSH
80731: LD_VAR 0 4
80735: PUSH
80736: LD_INT 1
80738: PLUS
80739: ARRAY
80740: ST_TO_ADDR
80741: GO 80808
80743: LD_INT 3
80745: DOUBLE
80746: EQUAL
80747: IFTRUE 80751
80749: GO 80807
80751: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
80752: LD_ADDR_VAR 0 9
80756: PUSH
80757: LD_VAR 0 23
80761: PUSH
80762: LD_VAR 0 24
80766: PUSH
80767: LD_VAR 0 25
80771: PUSH
80772: LD_VAR 0 26
80776: PUSH
80777: LD_VAR 0 27
80781: PUSH
80782: LD_VAR 0 28
80786: PUSH
80787: EMPTY
80788: LIST
80789: LIST
80790: LIST
80791: LIST
80792: LIST
80793: LIST
80794: PUSH
80795: LD_VAR 0 4
80799: PUSH
80800: LD_INT 1
80802: PLUS
80803: ARRAY
80804: ST_TO_ADDR
80805: GO 80808
80807: POP
80808: GO 81363
80810: LD_INT 2
80812: DOUBLE
80813: EQUAL
80814: IFTRUE 80824
80816: LD_INT 3
80818: DOUBLE
80819: EQUAL
80820: IFTRUE 80824
80822: GO 80880
80824: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
80825: LD_ADDR_VAR 0 9
80829: PUSH
80830: LD_VAR 0 29
80834: PUSH
80835: LD_VAR 0 30
80839: PUSH
80840: LD_VAR 0 31
80844: PUSH
80845: LD_VAR 0 32
80849: PUSH
80850: LD_VAR 0 33
80854: PUSH
80855: LD_VAR 0 34
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: LIST
80864: LIST
80865: LIST
80866: LIST
80867: PUSH
80868: LD_VAR 0 4
80872: PUSH
80873: LD_INT 1
80875: PLUS
80876: ARRAY
80877: ST_TO_ADDR
80878: GO 81363
80880: LD_INT 16
80882: DOUBLE
80883: EQUAL
80884: IFTRUE 80942
80886: LD_INT 17
80888: DOUBLE
80889: EQUAL
80890: IFTRUE 80942
80892: LD_INT 18
80894: DOUBLE
80895: EQUAL
80896: IFTRUE 80942
80898: LD_INT 19
80900: DOUBLE
80901: EQUAL
80902: IFTRUE 80942
80904: LD_INT 22
80906: DOUBLE
80907: EQUAL
80908: IFTRUE 80942
80910: LD_INT 20
80912: DOUBLE
80913: EQUAL
80914: IFTRUE 80942
80916: LD_INT 21
80918: DOUBLE
80919: EQUAL
80920: IFTRUE 80942
80922: LD_INT 23
80924: DOUBLE
80925: EQUAL
80926: IFTRUE 80942
80928: LD_INT 24
80930: DOUBLE
80931: EQUAL
80932: IFTRUE 80942
80934: LD_INT 25
80936: DOUBLE
80937: EQUAL
80938: IFTRUE 80942
80940: GO 80998
80942: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
80943: LD_ADDR_VAR 0 9
80947: PUSH
80948: LD_VAR 0 35
80952: PUSH
80953: LD_VAR 0 36
80957: PUSH
80958: LD_VAR 0 37
80962: PUSH
80963: LD_VAR 0 38
80967: PUSH
80968: LD_VAR 0 39
80972: PUSH
80973: LD_VAR 0 40
80977: PUSH
80978: EMPTY
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: PUSH
80986: LD_VAR 0 4
80990: PUSH
80991: LD_INT 1
80993: PLUS
80994: ARRAY
80995: ST_TO_ADDR
80996: GO 81363
80998: LD_INT 6
81000: DOUBLE
81001: EQUAL
81002: IFTRUE 81054
81004: LD_INT 7
81006: DOUBLE
81007: EQUAL
81008: IFTRUE 81054
81010: LD_INT 8
81012: DOUBLE
81013: EQUAL
81014: IFTRUE 81054
81016: LD_INT 13
81018: DOUBLE
81019: EQUAL
81020: IFTRUE 81054
81022: LD_INT 12
81024: DOUBLE
81025: EQUAL
81026: IFTRUE 81054
81028: LD_INT 15
81030: DOUBLE
81031: EQUAL
81032: IFTRUE 81054
81034: LD_INT 11
81036: DOUBLE
81037: EQUAL
81038: IFTRUE 81054
81040: LD_INT 14
81042: DOUBLE
81043: EQUAL
81044: IFTRUE 81054
81046: LD_INT 10
81048: DOUBLE
81049: EQUAL
81050: IFTRUE 81054
81052: GO 81110
81054: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
81055: LD_ADDR_VAR 0 9
81059: PUSH
81060: LD_VAR 0 41
81064: PUSH
81065: LD_VAR 0 42
81069: PUSH
81070: LD_VAR 0 43
81074: PUSH
81075: LD_VAR 0 44
81079: PUSH
81080: LD_VAR 0 45
81084: PUSH
81085: LD_VAR 0 46
81089: PUSH
81090: EMPTY
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: LIST
81096: LIST
81097: PUSH
81098: LD_VAR 0 4
81102: PUSH
81103: LD_INT 1
81105: PLUS
81106: ARRAY
81107: ST_TO_ADDR
81108: GO 81363
81110: LD_INT 36
81112: DOUBLE
81113: EQUAL
81114: IFTRUE 81118
81116: GO 81174
81118: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
81119: LD_ADDR_VAR 0 9
81123: PUSH
81124: LD_VAR 0 47
81128: PUSH
81129: LD_VAR 0 48
81133: PUSH
81134: LD_VAR 0 49
81138: PUSH
81139: LD_VAR 0 50
81143: PUSH
81144: LD_VAR 0 51
81148: PUSH
81149: LD_VAR 0 52
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: LIST
81158: LIST
81159: LIST
81160: LIST
81161: PUSH
81162: LD_VAR 0 4
81166: PUSH
81167: LD_INT 1
81169: PLUS
81170: ARRAY
81171: ST_TO_ADDR
81172: GO 81363
81174: LD_INT 4
81176: DOUBLE
81177: EQUAL
81178: IFTRUE 81200
81180: LD_INT 5
81182: DOUBLE
81183: EQUAL
81184: IFTRUE 81200
81186: LD_INT 34
81188: DOUBLE
81189: EQUAL
81190: IFTRUE 81200
81192: LD_INT 37
81194: DOUBLE
81195: EQUAL
81196: IFTRUE 81200
81198: GO 81256
81200: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
81201: LD_ADDR_VAR 0 9
81205: PUSH
81206: LD_VAR 0 53
81210: PUSH
81211: LD_VAR 0 54
81215: PUSH
81216: LD_VAR 0 55
81220: PUSH
81221: LD_VAR 0 56
81225: PUSH
81226: LD_VAR 0 57
81230: PUSH
81231: LD_VAR 0 58
81235: PUSH
81236: EMPTY
81237: LIST
81238: LIST
81239: LIST
81240: LIST
81241: LIST
81242: LIST
81243: PUSH
81244: LD_VAR 0 4
81248: PUSH
81249: LD_INT 1
81251: PLUS
81252: ARRAY
81253: ST_TO_ADDR
81254: GO 81363
81256: LD_INT 31
81258: DOUBLE
81259: EQUAL
81260: IFTRUE 81306
81262: LD_INT 32
81264: DOUBLE
81265: EQUAL
81266: IFTRUE 81306
81268: LD_INT 33
81270: DOUBLE
81271: EQUAL
81272: IFTRUE 81306
81274: LD_INT 27
81276: DOUBLE
81277: EQUAL
81278: IFTRUE 81306
81280: LD_INT 26
81282: DOUBLE
81283: EQUAL
81284: IFTRUE 81306
81286: LD_INT 28
81288: DOUBLE
81289: EQUAL
81290: IFTRUE 81306
81292: LD_INT 29
81294: DOUBLE
81295: EQUAL
81296: IFTRUE 81306
81298: LD_INT 30
81300: DOUBLE
81301: EQUAL
81302: IFTRUE 81306
81304: GO 81362
81306: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
81307: LD_ADDR_VAR 0 9
81311: PUSH
81312: LD_VAR 0 59
81316: PUSH
81317: LD_VAR 0 60
81321: PUSH
81322: LD_VAR 0 61
81326: PUSH
81327: LD_VAR 0 62
81331: PUSH
81332: LD_VAR 0 63
81336: PUSH
81337: LD_VAR 0 64
81341: PUSH
81342: EMPTY
81343: LIST
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: LIST
81349: PUSH
81350: LD_VAR 0 4
81354: PUSH
81355: LD_INT 1
81357: PLUS
81358: ARRAY
81359: ST_TO_ADDR
81360: GO 81363
81362: POP
// temp_list2 = [ ] ;
81363: LD_ADDR_VAR 0 10
81367: PUSH
81368: EMPTY
81369: ST_TO_ADDR
// for i in temp_list do
81370: LD_ADDR_VAR 0 8
81374: PUSH
81375: LD_VAR 0 9
81379: PUSH
81380: FOR_IN
81381: IFFALSE 81433
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
81383: LD_ADDR_VAR 0 10
81387: PUSH
81388: LD_VAR 0 10
81392: PUSH
81393: LD_VAR 0 8
81397: PUSH
81398: LD_INT 1
81400: ARRAY
81401: PUSH
81402: LD_VAR 0 2
81406: PLUS
81407: PUSH
81408: LD_VAR 0 8
81412: PUSH
81413: LD_INT 2
81415: ARRAY
81416: PUSH
81417: LD_VAR 0 3
81421: PLUS
81422: PUSH
81423: EMPTY
81424: LIST
81425: LIST
81426: PUSH
81427: EMPTY
81428: LIST
81429: ADD
81430: ST_TO_ADDR
81431: GO 81380
81433: POP
81434: POP
// result = temp_list2 ;
81435: LD_ADDR_VAR 0 7
81439: PUSH
81440: LD_VAR 0 10
81444: ST_TO_ADDR
// end ;
81445: LD_VAR 0 7
81449: RET
// export function EnemyInRange ( unit , dist ) ; begin
81450: LD_INT 0
81452: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
81453: LD_ADDR_VAR 0 3
81457: PUSH
81458: LD_VAR 0 1
81462: PPUSH
81463: CALL_OW 255
81467: PPUSH
81468: LD_VAR 0 1
81472: PPUSH
81473: CALL_OW 250
81477: PPUSH
81478: LD_VAR 0 1
81482: PPUSH
81483: CALL_OW 251
81487: PPUSH
81488: LD_VAR 0 2
81492: PPUSH
81493: CALL 55554 0 4
81497: PUSH
81498: LD_INT 4
81500: ARRAY
81501: ST_TO_ADDR
// end ;
81502: LD_VAR 0 3
81506: RET
// export function PlayerSeeMe ( unit ) ; begin
81507: LD_INT 0
81509: PPUSH
// result := See ( your_side , unit ) ;
81510: LD_ADDR_VAR 0 2
81514: PUSH
81515: LD_OWVAR 2
81519: PPUSH
81520: LD_VAR 0 1
81524: PPUSH
81525: CALL_OW 292
81529: ST_TO_ADDR
// end ;
81530: LD_VAR 0 2
81534: RET
// export function ReverseDir ( unit ) ; begin
81535: LD_INT 0
81537: PPUSH
// if not unit then
81538: LD_VAR 0 1
81542: NOT
81543: IFFALSE 81547
// exit ;
81545: GO 81570
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
81547: LD_ADDR_VAR 0 2
81551: PUSH
81552: LD_VAR 0 1
81556: PPUSH
81557: CALL_OW 254
81561: PUSH
81562: LD_INT 3
81564: PLUS
81565: PUSH
81566: LD_INT 6
81568: MOD
81569: ST_TO_ADDR
// end ;
81570: LD_VAR 0 2
81574: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
81575: LD_INT 0
81577: PPUSH
81578: PPUSH
81579: PPUSH
81580: PPUSH
81581: PPUSH
// if not hexes then
81582: LD_VAR 0 2
81586: NOT
81587: IFFALSE 81591
// exit ;
81589: GO 81739
// dist := 9999 ;
81591: LD_ADDR_VAR 0 5
81595: PUSH
81596: LD_INT 9999
81598: ST_TO_ADDR
// for i = 1 to hexes do
81599: LD_ADDR_VAR 0 4
81603: PUSH
81604: DOUBLE
81605: LD_INT 1
81607: DEC
81608: ST_TO_ADDR
81609: LD_VAR 0 2
81613: PUSH
81614: FOR_TO
81615: IFFALSE 81727
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
81617: LD_VAR 0 1
81621: PPUSH
81622: LD_VAR 0 2
81626: PUSH
81627: LD_VAR 0 4
81631: ARRAY
81632: PUSH
81633: LD_INT 1
81635: ARRAY
81636: PPUSH
81637: LD_VAR 0 2
81641: PUSH
81642: LD_VAR 0 4
81646: ARRAY
81647: PUSH
81648: LD_INT 2
81650: ARRAY
81651: PPUSH
81652: CALL_OW 297
81656: PUSH
81657: LD_VAR 0 5
81661: LESS
81662: IFFALSE 81725
// begin hex := hexes [ i ] ;
81664: LD_ADDR_VAR 0 7
81668: PUSH
81669: LD_VAR 0 2
81673: PUSH
81674: LD_VAR 0 4
81678: ARRAY
81679: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81680: LD_ADDR_VAR 0 5
81684: PUSH
81685: LD_VAR 0 1
81689: PPUSH
81690: LD_VAR 0 2
81694: PUSH
81695: LD_VAR 0 4
81699: ARRAY
81700: PUSH
81701: LD_INT 1
81703: ARRAY
81704: PPUSH
81705: LD_VAR 0 2
81709: PUSH
81710: LD_VAR 0 4
81714: ARRAY
81715: PUSH
81716: LD_INT 2
81718: ARRAY
81719: PPUSH
81720: CALL_OW 297
81724: ST_TO_ADDR
// end ; end ;
81725: GO 81614
81727: POP
81728: POP
// result := hex ;
81729: LD_ADDR_VAR 0 3
81733: PUSH
81734: LD_VAR 0 7
81738: ST_TO_ADDR
// end ;
81739: LD_VAR 0 3
81743: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
81744: LD_INT 0
81746: PPUSH
81747: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
81748: LD_VAR 0 1
81752: NOT
81753: PUSH
81754: LD_VAR 0 1
81758: PUSH
81759: LD_INT 21
81761: PUSH
81762: LD_INT 2
81764: PUSH
81765: EMPTY
81766: LIST
81767: LIST
81768: PUSH
81769: LD_INT 23
81771: PUSH
81772: LD_INT 2
81774: PUSH
81775: EMPTY
81776: LIST
81777: LIST
81778: PUSH
81779: EMPTY
81780: LIST
81781: LIST
81782: PPUSH
81783: CALL_OW 69
81787: IN
81788: NOT
81789: OR
81790: IFFALSE 81794
// exit ;
81792: GO 81841
// for i = 1 to 3 do
81794: LD_ADDR_VAR 0 3
81798: PUSH
81799: DOUBLE
81800: LD_INT 1
81802: DEC
81803: ST_TO_ADDR
81804: LD_INT 3
81806: PUSH
81807: FOR_TO
81808: IFFALSE 81839
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
81810: LD_VAR 0 1
81814: PPUSH
81815: CALL_OW 250
81819: PPUSH
81820: LD_VAR 0 1
81824: PPUSH
81825: CALL_OW 251
81829: PPUSH
81830: LD_INT 1
81832: PPUSH
81833: CALL_OW 453
81837: GO 81807
81839: POP
81840: POP
// end ;
81841: LD_VAR 0 2
81845: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
81846: LD_INT 0
81848: PPUSH
81849: PPUSH
81850: PPUSH
81851: PPUSH
81852: PPUSH
81853: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
81854: LD_VAR 0 1
81858: NOT
81859: PUSH
81860: LD_VAR 0 2
81864: NOT
81865: OR
81866: PUSH
81867: LD_VAR 0 1
81871: PPUSH
81872: CALL_OW 314
81876: OR
81877: IFFALSE 81881
// exit ;
81879: GO 82322
// x := GetX ( enemy_unit ) ;
81881: LD_ADDR_VAR 0 7
81885: PUSH
81886: LD_VAR 0 2
81890: PPUSH
81891: CALL_OW 250
81895: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
81896: LD_ADDR_VAR 0 8
81900: PUSH
81901: LD_VAR 0 2
81905: PPUSH
81906: CALL_OW 251
81910: ST_TO_ADDR
// if not x or not y then
81911: LD_VAR 0 7
81915: NOT
81916: PUSH
81917: LD_VAR 0 8
81921: NOT
81922: OR
81923: IFFALSE 81927
// exit ;
81925: GO 82322
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
81927: LD_ADDR_VAR 0 6
81931: PUSH
81932: LD_VAR 0 7
81936: PPUSH
81937: LD_INT 0
81939: PPUSH
81940: LD_INT 4
81942: PPUSH
81943: CALL_OW 272
81947: PUSH
81948: LD_VAR 0 8
81952: PPUSH
81953: LD_INT 0
81955: PPUSH
81956: LD_INT 4
81958: PPUSH
81959: CALL_OW 273
81963: PUSH
81964: EMPTY
81965: LIST
81966: LIST
81967: PUSH
81968: LD_VAR 0 7
81972: PPUSH
81973: LD_INT 1
81975: PPUSH
81976: LD_INT 4
81978: PPUSH
81979: CALL_OW 272
81983: PUSH
81984: LD_VAR 0 8
81988: PPUSH
81989: LD_INT 1
81991: PPUSH
81992: LD_INT 4
81994: PPUSH
81995: CALL_OW 273
81999: PUSH
82000: EMPTY
82001: LIST
82002: LIST
82003: PUSH
82004: LD_VAR 0 7
82008: PPUSH
82009: LD_INT 2
82011: PPUSH
82012: LD_INT 4
82014: PPUSH
82015: CALL_OW 272
82019: PUSH
82020: LD_VAR 0 8
82024: PPUSH
82025: LD_INT 2
82027: PPUSH
82028: LD_INT 4
82030: PPUSH
82031: CALL_OW 273
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: PUSH
82040: LD_VAR 0 7
82044: PPUSH
82045: LD_INT 3
82047: PPUSH
82048: LD_INT 4
82050: PPUSH
82051: CALL_OW 272
82055: PUSH
82056: LD_VAR 0 8
82060: PPUSH
82061: LD_INT 3
82063: PPUSH
82064: LD_INT 4
82066: PPUSH
82067: CALL_OW 273
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: PUSH
82076: LD_VAR 0 7
82080: PPUSH
82081: LD_INT 4
82083: PPUSH
82084: LD_INT 4
82086: PPUSH
82087: CALL_OW 272
82091: PUSH
82092: LD_VAR 0 8
82096: PPUSH
82097: LD_INT 4
82099: PPUSH
82100: LD_INT 4
82102: PPUSH
82103: CALL_OW 273
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: PUSH
82112: LD_VAR 0 7
82116: PPUSH
82117: LD_INT 5
82119: PPUSH
82120: LD_INT 4
82122: PPUSH
82123: CALL_OW 272
82127: PUSH
82128: LD_VAR 0 8
82132: PPUSH
82133: LD_INT 5
82135: PPUSH
82136: LD_INT 4
82138: PPUSH
82139: CALL_OW 273
82143: PUSH
82144: EMPTY
82145: LIST
82146: LIST
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: LIST
82152: LIST
82153: LIST
82154: LIST
82155: ST_TO_ADDR
// for i = tmp downto 1 do
82156: LD_ADDR_VAR 0 4
82160: PUSH
82161: DOUBLE
82162: LD_VAR 0 6
82166: INC
82167: ST_TO_ADDR
82168: LD_INT 1
82170: PUSH
82171: FOR_DOWNTO
82172: IFFALSE 82273
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
82174: LD_VAR 0 6
82178: PUSH
82179: LD_VAR 0 4
82183: ARRAY
82184: PUSH
82185: LD_INT 1
82187: ARRAY
82188: PPUSH
82189: LD_VAR 0 6
82193: PUSH
82194: LD_VAR 0 4
82198: ARRAY
82199: PUSH
82200: LD_INT 2
82202: ARRAY
82203: PPUSH
82204: CALL_OW 488
82208: NOT
82209: PUSH
82210: LD_VAR 0 6
82214: PUSH
82215: LD_VAR 0 4
82219: ARRAY
82220: PUSH
82221: LD_INT 1
82223: ARRAY
82224: PPUSH
82225: LD_VAR 0 6
82229: PUSH
82230: LD_VAR 0 4
82234: ARRAY
82235: PUSH
82236: LD_INT 2
82238: ARRAY
82239: PPUSH
82240: CALL_OW 428
82244: PUSH
82245: LD_INT 0
82247: NONEQUAL
82248: OR
82249: IFFALSE 82271
// tmp := Delete ( tmp , i ) ;
82251: LD_ADDR_VAR 0 6
82255: PUSH
82256: LD_VAR 0 6
82260: PPUSH
82261: LD_VAR 0 4
82265: PPUSH
82266: CALL_OW 3
82270: ST_TO_ADDR
82271: GO 82171
82273: POP
82274: POP
// j := GetClosestHex ( unit , tmp ) ;
82275: LD_ADDR_VAR 0 5
82279: PUSH
82280: LD_VAR 0 1
82284: PPUSH
82285: LD_VAR 0 6
82289: PPUSH
82290: CALL 81575 0 2
82294: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
82295: LD_VAR 0 1
82299: PPUSH
82300: LD_VAR 0 5
82304: PUSH
82305: LD_INT 1
82307: ARRAY
82308: PPUSH
82309: LD_VAR 0 5
82313: PUSH
82314: LD_INT 2
82316: ARRAY
82317: PPUSH
82318: CALL_OW 111
// end ;
82322: LD_VAR 0 3
82326: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
82327: LD_INT 0
82329: PPUSH
82330: PPUSH
82331: PPUSH
// uc_side = 0 ;
82332: LD_ADDR_OWVAR 20
82336: PUSH
82337: LD_INT 0
82339: ST_TO_ADDR
// uc_nation = 0 ;
82340: LD_ADDR_OWVAR 21
82344: PUSH
82345: LD_INT 0
82347: ST_TO_ADDR
// InitHc ;
82348: CALL_OW 19
// InitVc ;
82352: CALL_OW 20
// if mastodonts then
82356: LD_VAR 0 6
82360: IFFALSE 82427
// for i = 1 to mastodonts do
82362: LD_ADDR_VAR 0 11
82366: PUSH
82367: DOUBLE
82368: LD_INT 1
82370: DEC
82371: ST_TO_ADDR
82372: LD_VAR 0 6
82376: PUSH
82377: FOR_TO
82378: IFFALSE 82425
// begin vc_chassis := 31 ;
82380: LD_ADDR_OWVAR 37
82384: PUSH
82385: LD_INT 31
82387: ST_TO_ADDR
// vc_control := control_rider ;
82388: LD_ADDR_OWVAR 38
82392: PUSH
82393: LD_INT 4
82395: ST_TO_ADDR
// animal := CreateVehicle ;
82396: LD_ADDR_VAR 0 12
82400: PUSH
82401: CALL_OW 45
82405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82406: LD_VAR 0 12
82410: PPUSH
82411: LD_VAR 0 8
82415: PPUSH
82416: LD_INT 0
82418: PPUSH
82419: CALL 89205 0 3
// end ;
82423: GO 82377
82425: POP
82426: POP
// if horses then
82427: LD_VAR 0 5
82431: IFFALSE 82498
// for i = 1 to horses do
82433: LD_ADDR_VAR 0 11
82437: PUSH
82438: DOUBLE
82439: LD_INT 1
82441: DEC
82442: ST_TO_ADDR
82443: LD_VAR 0 5
82447: PUSH
82448: FOR_TO
82449: IFFALSE 82496
// begin hc_class := 21 ;
82451: LD_ADDR_OWVAR 28
82455: PUSH
82456: LD_INT 21
82458: ST_TO_ADDR
// hc_gallery :=  ;
82459: LD_ADDR_OWVAR 33
82463: PUSH
82464: LD_STRING 
82466: ST_TO_ADDR
// animal := CreateHuman ;
82467: LD_ADDR_VAR 0 12
82471: PUSH
82472: CALL_OW 44
82476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82477: LD_VAR 0 12
82481: PPUSH
82482: LD_VAR 0 8
82486: PPUSH
82487: LD_INT 0
82489: PPUSH
82490: CALL 89205 0 3
// end ;
82494: GO 82448
82496: POP
82497: POP
// if birds then
82498: LD_VAR 0 1
82502: IFFALSE 82569
// for i = 1 to birds do
82504: LD_ADDR_VAR 0 11
82508: PUSH
82509: DOUBLE
82510: LD_INT 1
82512: DEC
82513: ST_TO_ADDR
82514: LD_VAR 0 1
82518: PUSH
82519: FOR_TO
82520: IFFALSE 82567
// begin hc_class = 18 ;
82522: LD_ADDR_OWVAR 28
82526: PUSH
82527: LD_INT 18
82529: ST_TO_ADDR
// hc_gallery =  ;
82530: LD_ADDR_OWVAR 33
82534: PUSH
82535: LD_STRING 
82537: ST_TO_ADDR
// animal := CreateHuman ;
82538: LD_ADDR_VAR 0 12
82542: PUSH
82543: CALL_OW 44
82547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82548: LD_VAR 0 12
82552: PPUSH
82553: LD_VAR 0 8
82557: PPUSH
82558: LD_INT 0
82560: PPUSH
82561: CALL 89205 0 3
// end ;
82565: GO 82519
82567: POP
82568: POP
// if tigers then
82569: LD_VAR 0 2
82573: IFFALSE 82657
// for i = 1 to tigers do
82575: LD_ADDR_VAR 0 11
82579: PUSH
82580: DOUBLE
82581: LD_INT 1
82583: DEC
82584: ST_TO_ADDR
82585: LD_VAR 0 2
82589: PUSH
82590: FOR_TO
82591: IFFALSE 82655
// begin hc_class = class_tiger ;
82593: LD_ADDR_OWVAR 28
82597: PUSH
82598: LD_INT 14
82600: ST_TO_ADDR
// hc_gallery =  ;
82601: LD_ADDR_OWVAR 33
82605: PUSH
82606: LD_STRING 
82608: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
82609: LD_ADDR_OWVAR 35
82613: PUSH
82614: LD_INT 7
82616: NEG
82617: PPUSH
82618: LD_INT 7
82620: PPUSH
82621: CALL_OW 12
82625: ST_TO_ADDR
// animal := CreateHuman ;
82626: LD_ADDR_VAR 0 12
82630: PUSH
82631: CALL_OW 44
82635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82636: LD_VAR 0 12
82640: PPUSH
82641: LD_VAR 0 8
82645: PPUSH
82646: LD_INT 0
82648: PPUSH
82649: CALL 89205 0 3
// end ;
82653: GO 82590
82655: POP
82656: POP
// if apemans then
82657: LD_VAR 0 3
82661: IFFALSE 82784
// for i = 1 to apemans do
82663: LD_ADDR_VAR 0 11
82667: PUSH
82668: DOUBLE
82669: LD_INT 1
82671: DEC
82672: ST_TO_ADDR
82673: LD_VAR 0 3
82677: PUSH
82678: FOR_TO
82679: IFFALSE 82782
// begin hc_class = class_apeman ;
82681: LD_ADDR_OWVAR 28
82685: PUSH
82686: LD_INT 12
82688: ST_TO_ADDR
// hc_gallery =  ;
82689: LD_ADDR_OWVAR 33
82693: PUSH
82694: LD_STRING 
82696: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
82697: LD_ADDR_OWVAR 35
82701: PUSH
82702: LD_INT 5
82704: NEG
82705: PPUSH
82706: LD_INT 5
82708: PPUSH
82709: CALL_OW 12
82713: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
82714: LD_ADDR_OWVAR 31
82718: PUSH
82719: LD_INT 1
82721: PPUSH
82722: LD_INT 3
82724: PPUSH
82725: CALL_OW 12
82729: PUSH
82730: LD_INT 1
82732: PPUSH
82733: LD_INT 3
82735: PPUSH
82736: CALL_OW 12
82740: PUSH
82741: LD_INT 0
82743: PUSH
82744: LD_INT 0
82746: PUSH
82747: EMPTY
82748: LIST
82749: LIST
82750: LIST
82751: LIST
82752: ST_TO_ADDR
// animal := CreateHuman ;
82753: LD_ADDR_VAR 0 12
82757: PUSH
82758: CALL_OW 44
82762: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82763: LD_VAR 0 12
82767: PPUSH
82768: LD_VAR 0 8
82772: PPUSH
82773: LD_INT 0
82775: PPUSH
82776: CALL 89205 0 3
// end ;
82780: GO 82678
82782: POP
82783: POP
// if enchidnas then
82784: LD_VAR 0 4
82788: IFFALSE 82855
// for i = 1 to enchidnas do
82790: LD_ADDR_VAR 0 11
82794: PUSH
82795: DOUBLE
82796: LD_INT 1
82798: DEC
82799: ST_TO_ADDR
82800: LD_VAR 0 4
82804: PUSH
82805: FOR_TO
82806: IFFALSE 82853
// begin hc_class = 13 ;
82808: LD_ADDR_OWVAR 28
82812: PUSH
82813: LD_INT 13
82815: ST_TO_ADDR
// hc_gallery =  ;
82816: LD_ADDR_OWVAR 33
82820: PUSH
82821: LD_STRING 
82823: ST_TO_ADDR
// animal := CreateHuman ;
82824: LD_ADDR_VAR 0 12
82828: PUSH
82829: CALL_OW 44
82833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82834: LD_VAR 0 12
82838: PPUSH
82839: LD_VAR 0 8
82843: PPUSH
82844: LD_INT 0
82846: PPUSH
82847: CALL 89205 0 3
// end ;
82851: GO 82805
82853: POP
82854: POP
// if fishes then
82855: LD_VAR 0 7
82859: IFFALSE 82926
// for i = 1 to fishes do
82861: LD_ADDR_VAR 0 11
82865: PUSH
82866: DOUBLE
82867: LD_INT 1
82869: DEC
82870: ST_TO_ADDR
82871: LD_VAR 0 7
82875: PUSH
82876: FOR_TO
82877: IFFALSE 82924
// begin hc_class = 20 ;
82879: LD_ADDR_OWVAR 28
82883: PUSH
82884: LD_INT 20
82886: ST_TO_ADDR
// hc_gallery =  ;
82887: LD_ADDR_OWVAR 33
82891: PUSH
82892: LD_STRING 
82894: ST_TO_ADDR
// animal := CreateHuman ;
82895: LD_ADDR_VAR 0 12
82899: PUSH
82900: CALL_OW 44
82904: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
82905: LD_VAR 0 12
82909: PPUSH
82910: LD_VAR 0 9
82914: PPUSH
82915: LD_INT 0
82917: PPUSH
82918: CALL 89205 0 3
// end ;
82922: GO 82876
82924: POP
82925: POP
// end ;
82926: LD_VAR 0 10
82930: RET
// export function WantHeal ( sci , unit ) ; begin
82931: LD_INT 0
82933: PPUSH
// if GetTaskList ( sci ) > 0 then
82934: LD_VAR 0 1
82938: PPUSH
82939: CALL_OW 437
82943: PUSH
82944: LD_INT 0
82946: GREATER
82947: IFFALSE 83017
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
82949: LD_VAR 0 1
82953: PPUSH
82954: CALL_OW 437
82958: PUSH
82959: LD_INT 1
82961: ARRAY
82962: PUSH
82963: LD_INT 1
82965: ARRAY
82966: PUSH
82967: LD_STRING l
82969: EQUAL
82970: PUSH
82971: LD_VAR 0 1
82975: PPUSH
82976: CALL_OW 437
82980: PUSH
82981: LD_INT 1
82983: ARRAY
82984: PUSH
82985: LD_INT 4
82987: ARRAY
82988: PUSH
82989: LD_VAR 0 2
82993: EQUAL
82994: AND
82995: IFFALSE 83007
// result := true else
82997: LD_ADDR_VAR 0 3
83001: PUSH
83002: LD_INT 1
83004: ST_TO_ADDR
83005: GO 83015
// result := false ;
83007: LD_ADDR_VAR 0 3
83011: PUSH
83012: LD_INT 0
83014: ST_TO_ADDR
// end else
83015: GO 83025
// result := false ;
83017: LD_ADDR_VAR 0 3
83021: PUSH
83022: LD_INT 0
83024: ST_TO_ADDR
// end ;
83025: LD_VAR 0 3
83029: RET
// export function HealTarget ( sci ) ; begin
83030: LD_INT 0
83032: PPUSH
// if not sci then
83033: LD_VAR 0 1
83037: NOT
83038: IFFALSE 83042
// exit ;
83040: GO 83107
// result := 0 ;
83042: LD_ADDR_VAR 0 2
83046: PUSH
83047: LD_INT 0
83049: ST_TO_ADDR
// if GetTaskList ( sci ) then
83050: LD_VAR 0 1
83054: PPUSH
83055: CALL_OW 437
83059: IFFALSE 83107
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
83061: LD_VAR 0 1
83065: PPUSH
83066: CALL_OW 437
83070: PUSH
83071: LD_INT 1
83073: ARRAY
83074: PUSH
83075: LD_INT 1
83077: ARRAY
83078: PUSH
83079: LD_STRING l
83081: EQUAL
83082: IFFALSE 83107
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
83084: LD_ADDR_VAR 0 2
83088: PUSH
83089: LD_VAR 0 1
83093: PPUSH
83094: CALL_OW 437
83098: PUSH
83099: LD_INT 1
83101: ARRAY
83102: PUSH
83103: LD_INT 4
83105: ARRAY
83106: ST_TO_ADDR
// end ;
83107: LD_VAR 0 2
83111: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
83112: LD_INT 0
83114: PPUSH
83115: PPUSH
83116: PPUSH
83117: PPUSH
83118: PPUSH
83119: PPUSH
83120: PPUSH
83121: PPUSH
83122: PPUSH
83123: PPUSH
83124: PPUSH
83125: PPUSH
83126: PPUSH
83127: PPUSH
83128: PPUSH
83129: PPUSH
83130: PPUSH
83131: PPUSH
83132: PPUSH
83133: PPUSH
83134: PPUSH
83135: PPUSH
83136: PPUSH
83137: PPUSH
83138: PPUSH
83139: PPUSH
83140: PPUSH
83141: PPUSH
83142: PPUSH
83143: PPUSH
83144: PPUSH
83145: PPUSH
83146: PPUSH
83147: PPUSH
// if not list then
83148: LD_VAR 0 1
83152: NOT
83153: IFFALSE 83157
// exit ;
83155: GO 87816
// base := list [ 1 ] ;
83157: LD_ADDR_VAR 0 3
83161: PUSH
83162: LD_VAR 0 1
83166: PUSH
83167: LD_INT 1
83169: ARRAY
83170: ST_TO_ADDR
// group := list [ 2 ] ;
83171: LD_ADDR_VAR 0 4
83175: PUSH
83176: LD_VAR 0 1
83180: PUSH
83181: LD_INT 2
83183: ARRAY
83184: ST_TO_ADDR
// path := list [ 3 ] ;
83185: LD_ADDR_VAR 0 5
83189: PUSH
83190: LD_VAR 0 1
83194: PUSH
83195: LD_INT 3
83197: ARRAY
83198: ST_TO_ADDR
// flags := list [ 4 ] ;
83199: LD_ADDR_VAR 0 6
83203: PUSH
83204: LD_VAR 0 1
83208: PUSH
83209: LD_INT 4
83211: ARRAY
83212: ST_TO_ADDR
// mined := [ ] ;
83213: LD_ADDR_VAR 0 27
83217: PUSH
83218: EMPTY
83219: ST_TO_ADDR
// bombed := [ ] ;
83220: LD_ADDR_VAR 0 28
83224: PUSH
83225: EMPTY
83226: ST_TO_ADDR
// healers := [ ] ;
83227: LD_ADDR_VAR 0 31
83231: PUSH
83232: EMPTY
83233: ST_TO_ADDR
// to_heal := [ ] ;
83234: LD_ADDR_VAR 0 30
83238: PUSH
83239: EMPTY
83240: ST_TO_ADDR
// repairs := [ ] ;
83241: LD_ADDR_VAR 0 33
83245: PUSH
83246: EMPTY
83247: ST_TO_ADDR
// to_repair := [ ] ;
83248: LD_ADDR_VAR 0 32
83252: PUSH
83253: EMPTY
83254: ST_TO_ADDR
// if not group or not path then
83255: LD_VAR 0 4
83259: NOT
83260: PUSH
83261: LD_VAR 0 5
83265: NOT
83266: OR
83267: IFFALSE 83271
// exit ;
83269: GO 87816
// side := GetSide ( group [ 1 ] ) ;
83271: LD_ADDR_VAR 0 35
83275: PUSH
83276: LD_VAR 0 4
83280: PUSH
83281: LD_INT 1
83283: ARRAY
83284: PPUSH
83285: CALL_OW 255
83289: ST_TO_ADDR
// if flags then
83290: LD_VAR 0 6
83294: IFFALSE 83438
// begin f_ignore_area := flags [ 1 ] ;
83296: LD_ADDR_VAR 0 17
83300: PUSH
83301: LD_VAR 0 6
83305: PUSH
83306: LD_INT 1
83308: ARRAY
83309: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
83310: LD_ADDR_VAR 0 18
83314: PUSH
83315: LD_VAR 0 6
83319: PUSH
83320: LD_INT 2
83322: ARRAY
83323: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
83324: LD_ADDR_VAR 0 19
83328: PUSH
83329: LD_VAR 0 6
83333: PUSH
83334: LD_INT 3
83336: ARRAY
83337: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
83338: LD_ADDR_VAR 0 20
83342: PUSH
83343: LD_VAR 0 6
83347: PUSH
83348: LD_INT 4
83350: ARRAY
83351: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
83352: LD_ADDR_VAR 0 21
83356: PUSH
83357: LD_VAR 0 6
83361: PUSH
83362: LD_INT 5
83364: ARRAY
83365: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
83366: LD_ADDR_VAR 0 22
83370: PUSH
83371: LD_VAR 0 6
83375: PUSH
83376: LD_INT 6
83378: ARRAY
83379: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
83380: LD_ADDR_VAR 0 23
83384: PUSH
83385: LD_VAR 0 6
83389: PUSH
83390: LD_INT 7
83392: ARRAY
83393: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
83394: LD_ADDR_VAR 0 24
83398: PUSH
83399: LD_VAR 0 6
83403: PUSH
83404: LD_INT 8
83406: ARRAY
83407: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
83408: LD_ADDR_VAR 0 25
83412: PUSH
83413: LD_VAR 0 6
83417: PUSH
83418: LD_INT 9
83420: ARRAY
83421: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
83422: LD_ADDR_VAR 0 26
83426: PUSH
83427: LD_VAR 0 6
83431: PUSH
83432: LD_INT 10
83434: ARRAY
83435: ST_TO_ADDR
// end else
83436: GO 83518
// begin f_ignore_area := false ;
83438: LD_ADDR_VAR 0 17
83442: PUSH
83443: LD_INT 0
83445: ST_TO_ADDR
// f_capture := false ;
83446: LD_ADDR_VAR 0 18
83450: PUSH
83451: LD_INT 0
83453: ST_TO_ADDR
// f_ignore_civ := false ;
83454: LD_ADDR_VAR 0 19
83458: PUSH
83459: LD_INT 0
83461: ST_TO_ADDR
// f_murder := false ;
83462: LD_ADDR_VAR 0 20
83466: PUSH
83467: LD_INT 0
83469: ST_TO_ADDR
// f_mines := false ;
83470: LD_ADDR_VAR 0 21
83474: PUSH
83475: LD_INT 0
83477: ST_TO_ADDR
// f_repair := false ;
83478: LD_ADDR_VAR 0 22
83482: PUSH
83483: LD_INT 0
83485: ST_TO_ADDR
// f_heal := false ;
83486: LD_ADDR_VAR 0 23
83490: PUSH
83491: LD_INT 0
83493: ST_TO_ADDR
// f_spacetime := false ;
83494: LD_ADDR_VAR 0 24
83498: PUSH
83499: LD_INT 0
83501: ST_TO_ADDR
// f_attack_depot := false ;
83502: LD_ADDR_VAR 0 25
83506: PUSH
83507: LD_INT 0
83509: ST_TO_ADDR
// f_crawl := false ;
83510: LD_ADDR_VAR 0 26
83514: PUSH
83515: LD_INT 0
83517: ST_TO_ADDR
// end ; if f_heal then
83518: LD_VAR 0 23
83522: IFFALSE 83549
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
83524: LD_ADDR_VAR 0 31
83528: PUSH
83529: LD_VAR 0 4
83533: PPUSH
83534: LD_INT 25
83536: PUSH
83537: LD_INT 4
83539: PUSH
83540: EMPTY
83541: LIST
83542: LIST
83543: PPUSH
83544: CALL_OW 72
83548: ST_TO_ADDR
// if f_repair then
83549: LD_VAR 0 22
83553: IFFALSE 83580
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
83555: LD_ADDR_VAR 0 33
83559: PUSH
83560: LD_VAR 0 4
83564: PPUSH
83565: LD_INT 25
83567: PUSH
83568: LD_INT 3
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: PPUSH
83575: CALL_OW 72
83579: ST_TO_ADDR
// units_path := [ ] ;
83580: LD_ADDR_VAR 0 16
83584: PUSH
83585: EMPTY
83586: ST_TO_ADDR
// for i = 1 to group do
83587: LD_ADDR_VAR 0 7
83591: PUSH
83592: DOUBLE
83593: LD_INT 1
83595: DEC
83596: ST_TO_ADDR
83597: LD_VAR 0 4
83601: PUSH
83602: FOR_TO
83603: IFFALSE 83632
// units_path := Replace ( units_path , i , path ) ;
83605: LD_ADDR_VAR 0 16
83609: PUSH
83610: LD_VAR 0 16
83614: PPUSH
83615: LD_VAR 0 7
83619: PPUSH
83620: LD_VAR 0 5
83624: PPUSH
83625: CALL_OW 1
83629: ST_TO_ADDR
83630: GO 83602
83632: POP
83633: POP
// repeat for i = group downto 1 do
83634: LD_ADDR_VAR 0 7
83638: PUSH
83639: DOUBLE
83640: LD_VAR 0 4
83644: INC
83645: ST_TO_ADDR
83646: LD_INT 1
83648: PUSH
83649: FOR_DOWNTO
83650: IFFALSE 87772
// begin wait ( 5 ) ;
83652: LD_INT 5
83654: PPUSH
83655: CALL_OW 67
// tmp := [ ] ;
83659: LD_ADDR_VAR 0 14
83663: PUSH
83664: EMPTY
83665: ST_TO_ADDR
// attacking := false ;
83666: LD_ADDR_VAR 0 29
83670: PUSH
83671: LD_INT 0
83673: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
83674: LD_VAR 0 4
83678: PUSH
83679: LD_VAR 0 7
83683: ARRAY
83684: PPUSH
83685: CALL_OW 301
83689: PUSH
83690: LD_VAR 0 4
83694: PUSH
83695: LD_VAR 0 7
83699: ARRAY
83700: NOT
83701: OR
83702: IFFALSE 83811
// begin if GetType ( group [ i ] ) = unit_human then
83704: LD_VAR 0 4
83708: PUSH
83709: LD_VAR 0 7
83713: ARRAY
83714: PPUSH
83715: CALL_OW 247
83719: PUSH
83720: LD_INT 1
83722: EQUAL
83723: IFFALSE 83769
// begin to_heal := to_heal diff group [ i ] ;
83725: LD_ADDR_VAR 0 30
83729: PUSH
83730: LD_VAR 0 30
83734: PUSH
83735: LD_VAR 0 4
83739: PUSH
83740: LD_VAR 0 7
83744: ARRAY
83745: DIFF
83746: ST_TO_ADDR
// healers := healers diff group [ i ] ;
83747: LD_ADDR_VAR 0 31
83751: PUSH
83752: LD_VAR 0 31
83756: PUSH
83757: LD_VAR 0 4
83761: PUSH
83762: LD_VAR 0 7
83766: ARRAY
83767: DIFF
83768: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
83769: LD_ADDR_VAR 0 4
83773: PUSH
83774: LD_VAR 0 4
83778: PPUSH
83779: LD_VAR 0 7
83783: PPUSH
83784: CALL_OW 3
83788: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
83789: LD_ADDR_VAR 0 16
83793: PUSH
83794: LD_VAR 0 16
83798: PPUSH
83799: LD_VAR 0 7
83803: PPUSH
83804: CALL_OW 3
83808: ST_TO_ADDR
// continue ;
83809: GO 83649
// end ; if f_repair then
83811: LD_VAR 0 22
83815: IFFALSE 84304
// begin if GetType ( group [ i ] ) = unit_vehicle then
83817: LD_VAR 0 4
83821: PUSH
83822: LD_VAR 0 7
83826: ARRAY
83827: PPUSH
83828: CALL_OW 247
83832: PUSH
83833: LD_INT 2
83835: EQUAL
83836: IFFALSE 84026
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
83838: LD_VAR 0 4
83842: PUSH
83843: LD_VAR 0 7
83847: ARRAY
83848: PPUSH
83849: CALL_OW 256
83853: PUSH
83854: LD_INT 700
83856: LESS
83857: PUSH
83858: LD_VAR 0 4
83862: PUSH
83863: LD_VAR 0 7
83867: ARRAY
83868: PUSH
83869: LD_VAR 0 32
83873: IN
83874: NOT
83875: AND
83876: IFFALSE 83900
// to_repair := to_repair union group [ i ] ;
83878: LD_ADDR_VAR 0 32
83882: PUSH
83883: LD_VAR 0 32
83887: PUSH
83888: LD_VAR 0 4
83892: PUSH
83893: LD_VAR 0 7
83897: ARRAY
83898: UNION
83899: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
83900: LD_VAR 0 4
83904: PUSH
83905: LD_VAR 0 7
83909: ARRAY
83910: PPUSH
83911: CALL_OW 256
83915: PUSH
83916: LD_INT 1000
83918: EQUAL
83919: PUSH
83920: LD_VAR 0 4
83924: PUSH
83925: LD_VAR 0 7
83929: ARRAY
83930: PUSH
83931: LD_VAR 0 32
83935: IN
83936: AND
83937: IFFALSE 83961
// to_repair := to_repair diff group [ i ] ;
83939: LD_ADDR_VAR 0 32
83943: PUSH
83944: LD_VAR 0 32
83948: PUSH
83949: LD_VAR 0 4
83953: PUSH
83954: LD_VAR 0 7
83958: ARRAY
83959: DIFF
83960: ST_TO_ADDR
// if group [ i ] in to_repair then
83961: LD_VAR 0 4
83965: PUSH
83966: LD_VAR 0 7
83970: ARRAY
83971: PUSH
83972: LD_VAR 0 32
83976: IN
83977: IFFALSE 84024
// begin if not IsInArea ( group [ i ] , f_repair ) then
83979: LD_VAR 0 4
83983: PUSH
83984: LD_VAR 0 7
83988: ARRAY
83989: PPUSH
83990: LD_VAR 0 22
83994: PPUSH
83995: CALL_OW 308
83999: NOT
84000: IFFALSE 84022
// ComMoveToArea ( group [ i ] , f_repair ) ;
84002: LD_VAR 0 4
84006: PUSH
84007: LD_VAR 0 7
84011: ARRAY
84012: PPUSH
84013: LD_VAR 0 22
84017: PPUSH
84018: CALL_OW 113
// continue ;
84022: GO 83649
// end ; end else
84024: GO 84304
// if group [ i ] in repairs then
84026: LD_VAR 0 4
84030: PUSH
84031: LD_VAR 0 7
84035: ARRAY
84036: PUSH
84037: LD_VAR 0 33
84041: IN
84042: IFFALSE 84304
// begin if IsInUnit ( group [ i ] ) then
84044: LD_VAR 0 4
84048: PUSH
84049: LD_VAR 0 7
84053: ARRAY
84054: PPUSH
84055: CALL_OW 310
84059: IFFALSE 84127
// begin z := IsInUnit ( group [ i ] ) ;
84061: LD_ADDR_VAR 0 13
84065: PUSH
84066: LD_VAR 0 4
84070: PUSH
84071: LD_VAR 0 7
84075: ARRAY
84076: PPUSH
84077: CALL_OW 310
84081: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
84082: LD_VAR 0 13
84086: PUSH
84087: LD_VAR 0 32
84091: IN
84092: PUSH
84093: LD_VAR 0 13
84097: PPUSH
84098: LD_VAR 0 22
84102: PPUSH
84103: CALL_OW 308
84107: AND
84108: IFFALSE 84125
// ComExitVehicle ( group [ i ] ) ;
84110: LD_VAR 0 4
84114: PUSH
84115: LD_VAR 0 7
84119: ARRAY
84120: PPUSH
84121: CALL_OW 121
// end else
84125: GO 84304
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
84127: LD_ADDR_VAR 0 13
84131: PUSH
84132: LD_VAR 0 4
84136: PPUSH
84137: LD_INT 95
84139: PUSH
84140: LD_VAR 0 22
84144: PUSH
84145: EMPTY
84146: LIST
84147: LIST
84148: PUSH
84149: LD_INT 58
84151: PUSH
84152: EMPTY
84153: LIST
84154: PUSH
84155: EMPTY
84156: LIST
84157: LIST
84158: PPUSH
84159: CALL_OW 72
84163: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
84164: LD_VAR 0 4
84168: PUSH
84169: LD_VAR 0 7
84173: ARRAY
84174: PPUSH
84175: CALL_OW 314
84179: NOT
84180: IFFALSE 84302
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
84182: LD_ADDR_VAR 0 10
84186: PUSH
84187: LD_VAR 0 13
84191: PPUSH
84192: LD_VAR 0 4
84196: PUSH
84197: LD_VAR 0 7
84201: ARRAY
84202: PPUSH
84203: CALL_OW 74
84207: ST_TO_ADDR
// if not x then
84208: LD_VAR 0 10
84212: NOT
84213: IFFALSE 84217
// continue ;
84215: GO 83649
// if GetLives ( x ) < 1000 then
84217: LD_VAR 0 10
84221: PPUSH
84222: CALL_OW 256
84226: PUSH
84227: LD_INT 1000
84229: LESS
84230: IFFALSE 84254
// ComRepairVehicle ( group [ i ] , x ) else
84232: LD_VAR 0 4
84236: PUSH
84237: LD_VAR 0 7
84241: ARRAY
84242: PPUSH
84243: LD_VAR 0 10
84247: PPUSH
84248: CALL_OW 129
84252: GO 84302
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
84254: LD_VAR 0 23
84258: PUSH
84259: LD_VAR 0 4
84263: PUSH
84264: LD_VAR 0 7
84268: ARRAY
84269: PPUSH
84270: CALL_OW 256
84274: PUSH
84275: LD_INT 1000
84277: LESS
84278: AND
84279: NOT
84280: IFFALSE 84302
// ComEnterUnit ( group [ i ] , x ) ;
84282: LD_VAR 0 4
84286: PUSH
84287: LD_VAR 0 7
84291: ARRAY
84292: PPUSH
84293: LD_VAR 0 10
84297: PPUSH
84298: CALL_OW 120
// end ; continue ;
84302: GO 83649
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
84304: LD_VAR 0 23
84308: PUSH
84309: LD_VAR 0 4
84313: PUSH
84314: LD_VAR 0 7
84318: ARRAY
84319: PPUSH
84320: CALL_OW 247
84324: PUSH
84325: LD_INT 1
84327: EQUAL
84328: AND
84329: IFFALSE 84807
// begin if group [ i ] in healers then
84331: LD_VAR 0 4
84335: PUSH
84336: LD_VAR 0 7
84340: ARRAY
84341: PUSH
84342: LD_VAR 0 31
84346: IN
84347: IFFALSE 84620
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
84349: LD_VAR 0 4
84353: PUSH
84354: LD_VAR 0 7
84358: ARRAY
84359: PPUSH
84360: LD_VAR 0 23
84364: PPUSH
84365: CALL_OW 308
84369: NOT
84370: PUSH
84371: LD_VAR 0 4
84375: PUSH
84376: LD_VAR 0 7
84380: ARRAY
84381: PPUSH
84382: CALL_OW 314
84386: NOT
84387: AND
84388: IFFALSE 84412
// ComMoveToArea ( group [ i ] , f_heal ) else
84390: LD_VAR 0 4
84394: PUSH
84395: LD_VAR 0 7
84399: ARRAY
84400: PPUSH
84401: LD_VAR 0 23
84405: PPUSH
84406: CALL_OW 113
84410: GO 84618
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
84412: LD_VAR 0 4
84416: PUSH
84417: LD_VAR 0 7
84421: ARRAY
84422: PPUSH
84423: CALL 83030 0 1
84427: PPUSH
84428: CALL_OW 256
84432: PUSH
84433: LD_INT 1000
84435: EQUAL
84436: IFFALSE 84455
// ComStop ( group [ i ] ) else
84438: LD_VAR 0 4
84442: PUSH
84443: LD_VAR 0 7
84447: ARRAY
84448: PPUSH
84449: CALL_OW 141
84453: GO 84618
// if not HasTask ( group [ i ] ) and to_heal then
84455: LD_VAR 0 4
84459: PUSH
84460: LD_VAR 0 7
84464: ARRAY
84465: PPUSH
84466: CALL_OW 314
84470: NOT
84471: PUSH
84472: LD_VAR 0 30
84476: AND
84477: IFFALSE 84618
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
84479: LD_ADDR_VAR 0 13
84483: PUSH
84484: LD_VAR 0 30
84488: PPUSH
84489: LD_INT 3
84491: PUSH
84492: LD_INT 54
84494: PUSH
84495: EMPTY
84496: LIST
84497: PUSH
84498: EMPTY
84499: LIST
84500: LIST
84501: PPUSH
84502: CALL_OW 72
84506: PPUSH
84507: LD_VAR 0 4
84511: PUSH
84512: LD_VAR 0 7
84516: ARRAY
84517: PPUSH
84518: CALL_OW 74
84522: ST_TO_ADDR
// if z then
84523: LD_VAR 0 13
84527: IFFALSE 84618
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
84529: LD_INT 91
84531: PUSH
84532: LD_VAR 0 13
84536: PUSH
84537: LD_INT 10
84539: PUSH
84540: EMPTY
84541: LIST
84542: LIST
84543: LIST
84544: PUSH
84545: LD_INT 81
84547: PUSH
84548: LD_VAR 0 13
84552: PPUSH
84553: CALL_OW 255
84557: PUSH
84558: EMPTY
84559: LIST
84560: LIST
84561: PUSH
84562: EMPTY
84563: LIST
84564: LIST
84565: PPUSH
84566: CALL_OW 69
84570: PUSH
84571: LD_INT 0
84573: EQUAL
84574: IFFALSE 84598
// ComHeal ( group [ i ] , z ) else
84576: LD_VAR 0 4
84580: PUSH
84581: LD_VAR 0 7
84585: ARRAY
84586: PPUSH
84587: LD_VAR 0 13
84591: PPUSH
84592: CALL_OW 128
84596: GO 84618
// ComMoveToArea ( group [ i ] , f_heal ) ;
84598: LD_VAR 0 4
84602: PUSH
84603: LD_VAR 0 7
84607: ARRAY
84608: PPUSH
84609: LD_VAR 0 23
84613: PPUSH
84614: CALL_OW 113
// end ; continue ;
84618: GO 83649
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
84620: LD_VAR 0 4
84624: PUSH
84625: LD_VAR 0 7
84629: ARRAY
84630: PPUSH
84631: CALL_OW 256
84635: PUSH
84636: LD_INT 700
84638: LESS
84639: PUSH
84640: LD_VAR 0 4
84644: PUSH
84645: LD_VAR 0 7
84649: ARRAY
84650: PUSH
84651: LD_VAR 0 30
84655: IN
84656: NOT
84657: AND
84658: IFFALSE 84682
// to_heal := to_heal union group [ i ] ;
84660: LD_ADDR_VAR 0 30
84664: PUSH
84665: LD_VAR 0 30
84669: PUSH
84670: LD_VAR 0 4
84674: PUSH
84675: LD_VAR 0 7
84679: ARRAY
84680: UNION
84681: ST_TO_ADDR
// if group [ i ] in to_heal then
84682: LD_VAR 0 4
84686: PUSH
84687: LD_VAR 0 7
84691: ARRAY
84692: PUSH
84693: LD_VAR 0 30
84697: IN
84698: IFFALSE 84807
// begin if GetLives ( group [ i ] ) = 1000 then
84700: LD_VAR 0 4
84704: PUSH
84705: LD_VAR 0 7
84709: ARRAY
84710: PPUSH
84711: CALL_OW 256
84715: PUSH
84716: LD_INT 1000
84718: EQUAL
84719: IFFALSE 84745
// to_heal := to_heal diff group [ i ] else
84721: LD_ADDR_VAR 0 30
84725: PUSH
84726: LD_VAR 0 30
84730: PUSH
84731: LD_VAR 0 4
84735: PUSH
84736: LD_VAR 0 7
84740: ARRAY
84741: DIFF
84742: ST_TO_ADDR
84743: GO 84807
// begin if not IsInArea ( group [ i ] , to_heal ) then
84745: LD_VAR 0 4
84749: PUSH
84750: LD_VAR 0 7
84754: ARRAY
84755: PPUSH
84756: LD_VAR 0 30
84760: PPUSH
84761: CALL_OW 308
84765: NOT
84766: IFFALSE 84790
// ComMoveToArea ( group [ i ] , f_heal ) else
84768: LD_VAR 0 4
84772: PUSH
84773: LD_VAR 0 7
84777: ARRAY
84778: PPUSH
84779: LD_VAR 0 23
84783: PPUSH
84784: CALL_OW 113
84788: GO 84805
// ComHold ( group [ i ] ) ;
84790: LD_VAR 0 4
84794: PUSH
84795: LD_VAR 0 7
84799: ARRAY
84800: PPUSH
84801: CALL_OW 140
// continue ;
84805: GO 83649
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
84807: LD_VAR 0 4
84811: PUSH
84812: LD_VAR 0 7
84816: ARRAY
84817: PPUSH
84818: LD_INT 10
84820: PPUSH
84821: CALL 81450 0 2
84825: NOT
84826: PUSH
84827: LD_VAR 0 16
84831: PUSH
84832: LD_VAR 0 7
84836: ARRAY
84837: PUSH
84838: EMPTY
84839: EQUAL
84840: NOT
84841: AND
84842: IFFALSE 85108
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
84844: LD_VAR 0 4
84848: PUSH
84849: LD_VAR 0 7
84853: ARRAY
84854: PPUSH
84855: CALL_OW 262
84859: PUSH
84860: LD_INT 1
84862: PUSH
84863: LD_INT 2
84865: PUSH
84866: EMPTY
84867: LIST
84868: LIST
84869: IN
84870: IFFALSE 84911
// if GetFuel ( group [ i ] ) < 10 then
84872: LD_VAR 0 4
84876: PUSH
84877: LD_VAR 0 7
84881: ARRAY
84882: PPUSH
84883: CALL_OW 261
84887: PUSH
84888: LD_INT 10
84890: LESS
84891: IFFALSE 84911
// SetFuel ( group [ i ] , 12 ) ;
84893: LD_VAR 0 4
84897: PUSH
84898: LD_VAR 0 7
84902: ARRAY
84903: PPUSH
84904: LD_INT 12
84906: PPUSH
84907: CALL_OW 240
// if units_path [ i ] then
84911: LD_VAR 0 16
84915: PUSH
84916: LD_VAR 0 7
84920: ARRAY
84921: IFFALSE 85106
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
84923: LD_VAR 0 4
84927: PUSH
84928: LD_VAR 0 7
84932: ARRAY
84933: PPUSH
84934: LD_VAR 0 16
84938: PUSH
84939: LD_VAR 0 7
84943: ARRAY
84944: PUSH
84945: LD_INT 1
84947: ARRAY
84948: PUSH
84949: LD_INT 1
84951: ARRAY
84952: PPUSH
84953: LD_VAR 0 16
84957: PUSH
84958: LD_VAR 0 7
84962: ARRAY
84963: PUSH
84964: LD_INT 1
84966: ARRAY
84967: PUSH
84968: LD_INT 2
84970: ARRAY
84971: PPUSH
84972: CALL_OW 297
84976: PUSH
84977: LD_INT 6
84979: GREATER
84980: IFFALSE 85055
// begin if not HasTask ( group [ i ] ) then
84982: LD_VAR 0 4
84986: PUSH
84987: LD_VAR 0 7
84991: ARRAY
84992: PPUSH
84993: CALL_OW 314
84997: NOT
84998: IFFALSE 85053
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
85000: LD_VAR 0 4
85004: PUSH
85005: LD_VAR 0 7
85009: ARRAY
85010: PPUSH
85011: LD_VAR 0 16
85015: PUSH
85016: LD_VAR 0 7
85020: ARRAY
85021: PUSH
85022: LD_INT 1
85024: ARRAY
85025: PUSH
85026: LD_INT 1
85028: ARRAY
85029: PPUSH
85030: LD_VAR 0 16
85034: PUSH
85035: LD_VAR 0 7
85039: ARRAY
85040: PUSH
85041: LD_INT 1
85043: ARRAY
85044: PUSH
85045: LD_INT 2
85047: ARRAY
85048: PPUSH
85049: CALL_OW 114
// end else
85053: GO 85106
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
85055: LD_ADDR_VAR 0 15
85059: PUSH
85060: LD_VAR 0 16
85064: PUSH
85065: LD_VAR 0 7
85069: ARRAY
85070: PPUSH
85071: LD_INT 1
85073: PPUSH
85074: CALL_OW 3
85078: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
85079: LD_ADDR_VAR 0 16
85083: PUSH
85084: LD_VAR 0 16
85088: PPUSH
85089: LD_VAR 0 7
85093: PPUSH
85094: LD_VAR 0 15
85098: PPUSH
85099: CALL_OW 1
85103: ST_TO_ADDR
// continue ;
85104: GO 83649
// end ; end ; end else
85106: GO 87770
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
85108: LD_ADDR_VAR 0 14
85112: PUSH
85113: LD_INT 81
85115: PUSH
85116: LD_VAR 0 4
85120: PUSH
85121: LD_VAR 0 7
85125: ARRAY
85126: PPUSH
85127: CALL_OW 255
85131: PUSH
85132: EMPTY
85133: LIST
85134: LIST
85135: PPUSH
85136: CALL_OW 69
85140: ST_TO_ADDR
// if not tmp then
85141: LD_VAR 0 14
85145: NOT
85146: IFFALSE 85150
// continue ;
85148: GO 83649
// if f_ignore_area then
85150: LD_VAR 0 17
85154: IFFALSE 85242
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
85156: LD_ADDR_VAR 0 15
85160: PUSH
85161: LD_VAR 0 14
85165: PPUSH
85166: LD_INT 3
85168: PUSH
85169: LD_INT 92
85171: PUSH
85172: LD_VAR 0 17
85176: PUSH
85177: LD_INT 1
85179: ARRAY
85180: PUSH
85181: LD_VAR 0 17
85185: PUSH
85186: LD_INT 2
85188: ARRAY
85189: PUSH
85190: LD_VAR 0 17
85194: PUSH
85195: LD_INT 3
85197: ARRAY
85198: PUSH
85199: EMPTY
85200: LIST
85201: LIST
85202: LIST
85203: LIST
85204: PUSH
85205: EMPTY
85206: LIST
85207: LIST
85208: PPUSH
85209: CALL_OW 72
85213: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
85214: LD_VAR 0 14
85218: PUSH
85219: LD_VAR 0 15
85223: DIFF
85224: IFFALSE 85242
// tmp := tmp diff tmp2 ;
85226: LD_ADDR_VAR 0 14
85230: PUSH
85231: LD_VAR 0 14
85235: PUSH
85236: LD_VAR 0 15
85240: DIFF
85241: ST_TO_ADDR
// end ; if not f_murder then
85242: LD_VAR 0 20
85246: NOT
85247: IFFALSE 85305
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
85249: LD_ADDR_VAR 0 15
85253: PUSH
85254: LD_VAR 0 14
85258: PPUSH
85259: LD_INT 3
85261: PUSH
85262: LD_INT 50
85264: PUSH
85265: EMPTY
85266: LIST
85267: PUSH
85268: EMPTY
85269: LIST
85270: LIST
85271: PPUSH
85272: CALL_OW 72
85276: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
85277: LD_VAR 0 14
85281: PUSH
85282: LD_VAR 0 15
85286: DIFF
85287: IFFALSE 85305
// tmp := tmp diff tmp2 ;
85289: LD_ADDR_VAR 0 14
85293: PUSH
85294: LD_VAR 0 14
85298: PUSH
85299: LD_VAR 0 15
85303: DIFF
85304: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
85305: LD_ADDR_VAR 0 14
85309: PUSH
85310: LD_VAR 0 4
85314: PUSH
85315: LD_VAR 0 7
85319: ARRAY
85320: PPUSH
85321: LD_VAR 0 14
85325: PPUSH
85326: LD_INT 1
85328: PPUSH
85329: LD_INT 1
85331: PPUSH
85332: CALL 55093 0 4
85336: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
85337: LD_VAR 0 4
85341: PUSH
85342: LD_VAR 0 7
85346: ARRAY
85347: PPUSH
85348: CALL_OW 257
85352: PUSH
85353: LD_INT 1
85355: EQUAL
85356: IFFALSE 85804
// begin if WantPlant ( group [ i ] ) then
85358: LD_VAR 0 4
85362: PUSH
85363: LD_VAR 0 7
85367: ARRAY
85368: PPUSH
85369: CALL 54594 0 1
85373: IFFALSE 85377
// continue ;
85375: GO 83649
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
85377: LD_VAR 0 18
85381: PUSH
85382: LD_VAR 0 4
85386: PUSH
85387: LD_VAR 0 7
85391: ARRAY
85392: PPUSH
85393: CALL_OW 310
85397: NOT
85398: AND
85399: PUSH
85400: LD_VAR 0 14
85404: PUSH
85405: LD_INT 1
85407: ARRAY
85408: PUSH
85409: LD_VAR 0 14
85413: PPUSH
85414: LD_INT 21
85416: PUSH
85417: LD_INT 2
85419: PUSH
85420: EMPTY
85421: LIST
85422: LIST
85423: PUSH
85424: LD_INT 58
85426: PUSH
85427: EMPTY
85428: LIST
85429: PUSH
85430: EMPTY
85431: LIST
85432: LIST
85433: PPUSH
85434: CALL_OW 72
85438: IN
85439: AND
85440: IFFALSE 85476
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
85442: LD_VAR 0 4
85446: PUSH
85447: LD_VAR 0 7
85451: ARRAY
85452: PPUSH
85453: LD_VAR 0 14
85457: PUSH
85458: LD_INT 1
85460: ARRAY
85461: PPUSH
85462: CALL_OW 120
// attacking := true ;
85466: LD_ADDR_VAR 0 29
85470: PUSH
85471: LD_INT 1
85473: ST_TO_ADDR
// continue ;
85474: GO 83649
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
85476: LD_VAR 0 26
85480: PUSH
85481: LD_VAR 0 4
85485: PUSH
85486: LD_VAR 0 7
85490: ARRAY
85491: PPUSH
85492: CALL_OW 257
85496: PUSH
85497: LD_INT 1
85499: EQUAL
85500: AND
85501: PUSH
85502: LD_VAR 0 4
85506: PUSH
85507: LD_VAR 0 7
85511: ARRAY
85512: PPUSH
85513: CALL_OW 256
85517: PUSH
85518: LD_INT 800
85520: LESS
85521: AND
85522: PUSH
85523: LD_VAR 0 4
85527: PUSH
85528: LD_VAR 0 7
85532: ARRAY
85533: PPUSH
85534: CALL_OW 318
85538: NOT
85539: AND
85540: IFFALSE 85557
// ComCrawl ( group [ i ] ) ;
85542: LD_VAR 0 4
85546: PUSH
85547: LD_VAR 0 7
85551: ARRAY
85552: PPUSH
85553: CALL_OW 137
// if f_mines then
85557: LD_VAR 0 21
85561: IFFALSE 85804
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
85563: LD_VAR 0 14
85567: PUSH
85568: LD_INT 1
85570: ARRAY
85571: PPUSH
85572: CALL_OW 247
85576: PUSH
85577: LD_INT 3
85579: EQUAL
85580: PUSH
85581: LD_VAR 0 14
85585: PUSH
85586: LD_INT 1
85588: ARRAY
85589: PUSH
85590: LD_VAR 0 27
85594: IN
85595: NOT
85596: AND
85597: IFFALSE 85804
// begin x := GetX ( tmp [ 1 ] ) ;
85599: LD_ADDR_VAR 0 10
85603: PUSH
85604: LD_VAR 0 14
85608: PUSH
85609: LD_INT 1
85611: ARRAY
85612: PPUSH
85613: CALL_OW 250
85617: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
85618: LD_ADDR_VAR 0 11
85622: PUSH
85623: LD_VAR 0 14
85627: PUSH
85628: LD_INT 1
85630: ARRAY
85631: PPUSH
85632: CALL_OW 251
85636: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
85637: LD_ADDR_VAR 0 12
85641: PUSH
85642: LD_VAR 0 4
85646: PUSH
85647: LD_VAR 0 7
85651: ARRAY
85652: PPUSH
85653: CALL 81535 0 1
85657: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
85658: LD_VAR 0 4
85662: PUSH
85663: LD_VAR 0 7
85667: ARRAY
85668: PPUSH
85669: LD_VAR 0 10
85673: PPUSH
85674: LD_VAR 0 11
85678: PPUSH
85679: LD_VAR 0 14
85683: PUSH
85684: LD_INT 1
85686: ARRAY
85687: PPUSH
85688: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
85692: LD_VAR 0 4
85696: PUSH
85697: LD_VAR 0 7
85701: ARRAY
85702: PPUSH
85703: LD_VAR 0 10
85707: PPUSH
85708: LD_VAR 0 12
85712: PPUSH
85713: LD_INT 7
85715: PPUSH
85716: CALL_OW 272
85720: PPUSH
85721: LD_VAR 0 11
85725: PPUSH
85726: LD_VAR 0 12
85730: PPUSH
85731: LD_INT 7
85733: PPUSH
85734: CALL_OW 273
85738: PPUSH
85739: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
85743: LD_VAR 0 4
85747: PUSH
85748: LD_VAR 0 7
85752: ARRAY
85753: PPUSH
85754: LD_INT 71
85756: PPUSH
85757: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
85761: LD_ADDR_VAR 0 27
85765: PUSH
85766: LD_VAR 0 27
85770: PPUSH
85771: LD_VAR 0 27
85775: PUSH
85776: LD_INT 1
85778: PLUS
85779: PPUSH
85780: LD_VAR 0 14
85784: PUSH
85785: LD_INT 1
85787: ARRAY
85788: PPUSH
85789: CALL_OW 1
85793: ST_TO_ADDR
// attacking := true ;
85794: LD_ADDR_VAR 0 29
85798: PUSH
85799: LD_INT 1
85801: ST_TO_ADDR
// continue ;
85802: GO 83649
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
85804: LD_VAR 0 4
85808: PUSH
85809: LD_VAR 0 7
85813: ARRAY
85814: PPUSH
85815: CALL_OW 257
85819: PUSH
85820: LD_INT 17
85822: EQUAL
85823: PUSH
85824: LD_VAR 0 4
85828: PUSH
85829: LD_VAR 0 7
85833: ARRAY
85834: PPUSH
85835: CALL_OW 110
85839: PUSH
85840: LD_INT 71
85842: EQUAL
85843: NOT
85844: AND
85845: IFFALSE 85991
// begin attacking := false ;
85847: LD_ADDR_VAR 0 29
85851: PUSH
85852: LD_INT 0
85854: ST_TO_ADDR
// k := 5 ;
85855: LD_ADDR_VAR 0 9
85859: PUSH
85860: LD_INT 5
85862: ST_TO_ADDR
// if tmp < k then
85863: LD_VAR 0 14
85867: PUSH
85868: LD_VAR 0 9
85872: LESS
85873: IFFALSE 85885
// k := tmp ;
85875: LD_ADDR_VAR 0 9
85879: PUSH
85880: LD_VAR 0 14
85884: ST_TO_ADDR
// for j = 1 to k do
85885: LD_ADDR_VAR 0 8
85889: PUSH
85890: DOUBLE
85891: LD_INT 1
85893: DEC
85894: ST_TO_ADDR
85895: LD_VAR 0 9
85899: PUSH
85900: FOR_TO
85901: IFFALSE 85989
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
85903: LD_VAR 0 14
85907: PUSH
85908: LD_VAR 0 8
85912: ARRAY
85913: PUSH
85914: LD_VAR 0 14
85918: PPUSH
85919: LD_INT 58
85921: PUSH
85922: EMPTY
85923: LIST
85924: PPUSH
85925: CALL_OW 72
85929: IN
85930: NOT
85931: IFFALSE 85987
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85933: LD_VAR 0 4
85937: PUSH
85938: LD_VAR 0 7
85942: ARRAY
85943: PPUSH
85944: LD_VAR 0 14
85948: PUSH
85949: LD_VAR 0 8
85953: ARRAY
85954: PPUSH
85955: CALL_OW 115
// attacking := true ;
85959: LD_ADDR_VAR 0 29
85963: PUSH
85964: LD_INT 1
85966: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
85967: LD_VAR 0 4
85971: PUSH
85972: LD_VAR 0 7
85976: ARRAY
85977: PPUSH
85978: LD_INT 71
85980: PPUSH
85981: CALL_OW 109
// continue ;
85985: GO 85900
// end ; end ;
85987: GO 85900
85989: POP
85990: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
85991: LD_VAR 0 4
85995: PUSH
85996: LD_VAR 0 7
86000: ARRAY
86001: PPUSH
86002: CALL_OW 257
86006: PUSH
86007: LD_INT 8
86009: EQUAL
86010: PUSH
86011: LD_VAR 0 4
86015: PUSH
86016: LD_VAR 0 7
86020: ARRAY
86021: PPUSH
86022: CALL_OW 264
86026: PUSH
86027: LD_INT 28
86029: PUSH
86030: LD_INT 45
86032: PUSH
86033: LD_INT 7
86035: PUSH
86036: LD_INT 47
86038: PUSH
86039: EMPTY
86040: LIST
86041: LIST
86042: LIST
86043: LIST
86044: IN
86045: OR
86046: IFFALSE 86302
// begin attacking := false ;
86048: LD_ADDR_VAR 0 29
86052: PUSH
86053: LD_INT 0
86055: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
86056: LD_VAR 0 14
86060: PUSH
86061: LD_INT 1
86063: ARRAY
86064: PPUSH
86065: CALL_OW 266
86069: PUSH
86070: LD_INT 32
86072: PUSH
86073: LD_INT 31
86075: PUSH
86076: LD_INT 33
86078: PUSH
86079: LD_INT 4
86081: PUSH
86082: LD_INT 5
86084: PUSH
86085: EMPTY
86086: LIST
86087: LIST
86088: LIST
86089: LIST
86090: LIST
86091: IN
86092: IFFALSE 86278
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
86094: LD_ADDR_VAR 0 9
86098: PUSH
86099: LD_VAR 0 14
86103: PUSH
86104: LD_INT 1
86106: ARRAY
86107: PPUSH
86108: CALL_OW 266
86112: PPUSH
86113: LD_VAR 0 14
86117: PUSH
86118: LD_INT 1
86120: ARRAY
86121: PPUSH
86122: CALL_OW 250
86126: PPUSH
86127: LD_VAR 0 14
86131: PUSH
86132: LD_INT 1
86134: ARRAY
86135: PPUSH
86136: CALL_OW 251
86140: PPUSH
86141: LD_VAR 0 14
86145: PUSH
86146: LD_INT 1
86148: ARRAY
86149: PPUSH
86150: CALL_OW 254
86154: PPUSH
86155: LD_VAR 0 14
86159: PUSH
86160: LD_INT 1
86162: ARRAY
86163: PPUSH
86164: CALL_OW 248
86168: PPUSH
86169: LD_INT 0
86171: PPUSH
86172: CALL 62905 0 6
86176: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
86177: LD_ADDR_VAR 0 8
86181: PUSH
86182: LD_VAR 0 4
86186: PUSH
86187: LD_VAR 0 7
86191: ARRAY
86192: PPUSH
86193: LD_VAR 0 9
86197: PPUSH
86198: CALL 81575 0 2
86202: ST_TO_ADDR
// if j then
86203: LD_VAR 0 8
86207: IFFALSE 86276
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
86209: LD_VAR 0 8
86213: PUSH
86214: LD_INT 1
86216: ARRAY
86217: PPUSH
86218: LD_VAR 0 8
86222: PUSH
86223: LD_INT 2
86225: ARRAY
86226: PPUSH
86227: CALL_OW 488
86231: IFFALSE 86276
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
86233: LD_VAR 0 4
86237: PUSH
86238: LD_VAR 0 7
86242: ARRAY
86243: PPUSH
86244: LD_VAR 0 8
86248: PUSH
86249: LD_INT 1
86251: ARRAY
86252: PPUSH
86253: LD_VAR 0 8
86257: PUSH
86258: LD_INT 2
86260: ARRAY
86261: PPUSH
86262: CALL_OW 116
// attacking := true ;
86266: LD_ADDR_VAR 0 29
86270: PUSH
86271: LD_INT 1
86273: ST_TO_ADDR
// continue ;
86274: GO 83649
// end ; end else
86276: GO 86302
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86278: LD_VAR 0 4
86282: PUSH
86283: LD_VAR 0 7
86287: ARRAY
86288: PPUSH
86289: LD_VAR 0 14
86293: PUSH
86294: LD_INT 1
86296: ARRAY
86297: PPUSH
86298: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
86302: LD_VAR 0 4
86306: PUSH
86307: LD_VAR 0 7
86311: ARRAY
86312: PPUSH
86313: CALL_OW 265
86317: PUSH
86318: LD_INT 11
86320: EQUAL
86321: IFFALSE 86599
// begin k := 10 ;
86323: LD_ADDR_VAR 0 9
86327: PUSH
86328: LD_INT 10
86330: ST_TO_ADDR
// x := 0 ;
86331: LD_ADDR_VAR 0 10
86335: PUSH
86336: LD_INT 0
86338: ST_TO_ADDR
// if tmp < k then
86339: LD_VAR 0 14
86343: PUSH
86344: LD_VAR 0 9
86348: LESS
86349: IFFALSE 86361
// k := tmp ;
86351: LD_ADDR_VAR 0 9
86355: PUSH
86356: LD_VAR 0 14
86360: ST_TO_ADDR
// for j = k downto 1 do
86361: LD_ADDR_VAR 0 8
86365: PUSH
86366: DOUBLE
86367: LD_VAR 0 9
86371: INC
86372: ST_TO_ADDR
86373: LD_INT 1
86375: PUSH
86376: FOR_DOWNTO
86377: IFFALSE 86452
// begin if GetType ( tmp [ j ] ) = unit_human then
86379: LD_VAR 0 14
86383: PUSH
86384: LD_VAR 0 8
86388: ARRAY
86389: PPUSH
86390: CALL_OW 247
86394: PUSH
86395: LD_INT 1
86397: EQUAL
86398: IFFALSE 86450
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
86400: LD_VAR 0 4
86404: PUSH
86405: LD_VAR 0 7
86409: ARRAY
86410: PPUSH
86411: LD_VAR 0 14
86415: PUSH
86416: LD_VAR 0 8
86420: ARRAY
86421: PPUSH
86422: CALL 81846 0 2
// x := tmp [ j ] ;
86426: LD_ADDR_VAR 0 10
86430: PUSH
86431: LD_VAR 0 14
86435: PUSH
86436: LD_VAR 0 8
86440: ARRAY
86441: ST_TO_ADDR
// attacking := true ;
86442: LD_ADDR_VAR 0 29
86446: PUSH
86447: LD_INT 1
86449: ST_TO_ADDR
// end ; end ;
86450: GO 86376
86452: POP
86453: POP
// if not x then
86454: LD_VAR 0 10
86458: NOT
86459: IFFALSE 86599
// begin attacking := true ;
86461: LD_ADDR_VAR 0 29
86465: PUSH
86466: LD_INT 1
86468: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
86469: LD_VAR 0 4
86473: PUSH
86474: LD_VAR 0 7
86478: ARRAY
86479: PPUSH
86480: CALL_OW 250
86484: PPUSH
86485: LD_VAR 0 4
86489: PUSH
86490: LD_VAR 0 7
86494: ARRAY
86495: PPUSH
86496: CALL_OW 251
86500: PPUSH
86501: CALL_OW 546
86505: PUSH
86506: LD_INT 2
86508: ARRAY
86509: PUSH
86510: LD_VAR 0 14
86514: PUSH
86515: LD_INT 1
86517: ARRAY
86518: PPUSH
86519: CALL_OW 250
86523: PPUSH
86524: LD_VAR 0 14
86528: PUSH
86529: LD_INT 1
86531: ARRAY
86532: PPUSH
86533: CALL_OW 251
86537: PPUSH
86538: CALL_OW 546
86542: PUSH
86543: LD_INT 2
86545: ARRAY
86546: EQUAL
86547: IFFALSE 86575
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
86549: LD_VAR 0 4
86553: PUSH
86554: LD_VAR 0 7
86558: ARRAY
86559: PPUSH
86560: LD_VAR 0 14
86564: PUSH
86565: LD_INT 1
86567: ARRAY
86568: PPUSH
86569: CALL 81846 0 2
86573: GO 86599
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86575: LD_VAR 0 4
86579: PUSH
86580: LD_VAR 0 7
86584: ARRAY
86585: PPUSH
86586: LD_VAR 0 14
86590: PUSH
86591: LD_INT 1
86593: ARRAY
86594: PPUSH
86595: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
86599: LD_VAR 0 4
86603: PUSH
86604: LD_VAR 0 7
86608: ARRAY
86609: PPUSH
86610: CALL_OW 264
86614: PUSH
86615: LD_INT 29
86617: EQUAL
86618: IFFALSE 86984
// begin if WantsToAttack ( group [ i ] ) in bombed then
86620: LD_VAR 0 4
86624: PUSH
86625: LD_VAR 0 7
86629: ARRAY
86630: PPUSH
86631: CALL_OW 319
86635: PUSH
86636: LD_VAR 0 28
86640: IN
86641: IFFALSE 86645
// continue ;
86643: GO 83649
// k := 8 ;
86645: LD_ADDR_VAR 0 9
86649: PUSH
86650: LD_INT 8
86652: ST_TO_ADDR
// x := 0 ;
86653: LD_ADDR_VAR 0 10
86657: PUSH
86658: LD_INT 0
86660: ST_TO_ADDR
// if tmp < k then
86661: LD_VAR 0 14
86665: PUSH
86666: LD_VAR 0 9
86670: LESS
86671: IFFALSE 86683
// k := tmp ;
86673: LD_ADDR_VAR 0 9
86677: PUSH
86678: LD_VAR 0 14
86682: ST_TO_ADDR
// for j = 1 to k do
86683: LD_ADDR_VAR 0 8
86687: PUSH
86688: DOUBLE
86689: LD_INT 1
86691: DEC
86692: ST_TO_ADDR
86693: LD_VAR 0 9
86697: PUSH
86698: FOR_TO
86699: IFFALSE 86831
// begin if GetType ( tmp [ j ] ) = unit_building then
86701: LD_VAR 0 14
86705: PUSH
86706: LD_VAR 0 8
86710: ARRAY
86711: PPUSH
86712: CALL_OW 247
86716: PUSH
86717: LD_INT 3
86719: EQUAL
86720: IFFALSE 86829
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
86722: LD_VAR 0 14
86726: PUSH
86727: LD_VAR 0 8
86731: ARRAY
86732: PUSH
86733: LD_VAR 0 28
86737: IN
86738: NOT
86739: PUSH
86740: LD_VAR 0 14
86744: PUSH
86745: LD_VAR 0 8
86749: ARRAY
86750: PPUSH
86751: CALL_OW 313
86755: AND
86756: IFFALSE 86829
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86758: LD_VAR 0 4
86762: PUSH
86763: LD_VAR 0 7
86767: ARRAY
86768: PPUSH
86769: LD_VAR 0 14
86773: PUSH
86774: LD_VAR 0 8
86778: ARRAY
86779: PPUSH
86780: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
86784: LD_ADDR_VAR 0 28
86788: PUSH
86789: LD_VAR 0 28
86793: PPUSH
86794: LD_VAR 0 28
86798: PUSH
86799: LD_INT 1
86801: PLUS
86802: PPUSH
86803: LD_VAR 0 14
86807: PUSH
86808: LD_VAR 0 8
86812: ARRAY
86813: PPUSH
86814: CALL_OW 1
86818: ST_TO_ADDR
// attacking := true ;
86819: LD_ADDR_VAR 0 29
86823: PUSH
86824: LD_INT 1
86826: ST_TO_ADDR
// break ;
86827: GO 86831
// end ; end ;
86829: GO 86698
86831: POP
86832: POP
// if not attacking and f_attack_depot then
86833: LD_VAR 0 29
86837: NOT
86838: PUSH
86839: LD_VAR 0 25
86843: AND
86844: IFFALSE 86939
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
86846: LD_ADDR_VAR 0 13
86850: PUSH
86851: LD_VAR 0 14
86855: PPUSH
86856: LD_INT 2
86858: PUSH
86859: LD_INT 30
86861: PUSH
86862: LD_INT 0
86864: PUSH
86865: EMPTY
86866: LIST
86867: LIST
86868: PUSH
86869: LD_INT 30
86871: PUSH
86872: LD_INT 1
86874: PUSH
86875: EMPTY
86876: LIST
86877: LIST
86878: PUSH
86879: EMPTY
86880: LIST
86881: LIST
86882: LIST
86883: PPUSH
86884: CALL_OW 72
86888: ST_TO_ADDR
// if z then
86889: LD_VAR 0 13
86893: IFFALSE 86939
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
86895: LD_VAR 0 4
86899: PUSH
86900: LD_VAR 0 7
86904: ARRAY
86905: PPUSH
86906: LD_VAR 0 13
86910: PPUSH
86911: LD_VAR 0 4
86915: PUSH
86916: LD_VAR 0 7
86920: ARRAY
86921: PPUSH
86922: CALL_OW 74
86926: PPUSH
86927: CALL_OW 115
// attacking := true ;
86931: LD_ADDR_VAR 0 29
86935: PUSH
86936: LD_INT 1
86938: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
86939: LD_VAR 0 4
86943: PUSH
86944: LD_VAR 0 7
86948: ARRAY
86949: PPUSH
86950: CALL_OW 256
86954: PUSH
86955: LD_INT 500
86957: LESS
86958: IFFALSE 86984
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86960: LD_VAR 0 4
86964: PUSH
86965: LD_VAR 0 7
86969: ARRAY
86970: PPUSH
86971: LD_VAR 0 14
86975: PUSH
86976: LD_INT 1
86978: ARRAY
86979: PPUSH
86980: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
86984: LD_VAR 0 4
86988: PUSH
86989: LD_VAR 0 7
86993: ARRAY
86994: PPUSH
86995: CALL_OW 264
86999: PUSH
87000: LD_INT 49
87002: EQUAL
87003: IFFALSE 87124
// begin if not HasTask ( group [ i ] ) then
87005: LD_VAR 0 4
87009: PUSH
87010: LD_VAR 0 7
87014: ARRAY
87015: PPUSH
87016: CALL_OW 314
87020: NOT
87021: IFFALSE 87124
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
87023: LD_ADDR_VAR 0 9
87027: PUSH
87028: LD_INT 81
87030: PUSH
87031: LD_VAR 0 4
87035: PUSH
87036: LD_VAR 0 7
87040: ARRAY
87041: PPUSH
87042: CALL_OW 255
87046: PUSH
87047: EMPTY
87048: LIST
87049: LIST
87050: PPUSH
87051: CALL_OW 69
87055: PPUSH
87056: LD_VAR 0 4
87060: PUSH
87061: LD_VAR 0 7
87065: ARRAY
87066: PPUSH
87067: CALL_OW 74
87071: ST_TO_ADDR
// if k then
87072: LD_VAR 0 9
87076: IFFALSE 87124
// if GetDistUnits ( group [ i ] , k ) > 10 then
87078: LD_VAR 0 4
87082: PUSH
87083: LD_VAR 0 7
87087: ARRAY
87088: PPUSH
87089: LD_VAR 0 9
87093: PPUSH
87094: CALL_OW 296
87098: PUSH
87099: LD_INT 10
87101: GREATER
87102: IFFALSE 87124
// ComMoveUnit ( group [ i ] , k ) ;
87104: LD_VAR 0 4
87108: PUSH
87109: LD_VAR 0 7
87113: ARRAY
87114: PPUSH
87115: LD_VAR 0 9
87119: PPUSH
87120: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87124: LD_VAR 0 4
87128: PUSH
87129: LD_VAR 0 7
87133: ARRAY
87134: PPUSH
87135: CALL_OW 256
87139: PUSH
87140: LD_INT 250
87142: LESS
87143: PUSH
87144: LD_VAR 0 4
87148: PUSH
87149: LD_VAR 0 7
87153: ARRAY
87154: PUSH
87155: LD_INT 21
87157: PUSH
87158: LD_INT 2
87160: PUSH
87161: EMPTY
87162: LIST
87163: LIST
87164: PUSH
87165: LD_INT 23
87167: PUSH
87168: LD_INT 2
87170: PUSH
87171: EMPTY
87172: LIST
87173: LIST
87174: PUSH
87175: EMPTY
87176: LIST
87177: LIST
87178: PPUSH
87179: CALL_OW 69
87183: IN
87184: AND
87185: IFFALSE 87310
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
87187: LD_ADDR_VAR 0 9
87191: PUSH
87192: LD_OWVAR 3
87196: PUSH
87197: LD_VAR 0 4
87201: PUSH
87202: LD_VAR 0 7
87206: ARRAY
87207: DIFF
87208: PPUSH
87209: LD_VAR 0 4
87213: PUSH
87214: LD_VAR 0 7
87218: ARRAY
87219: PPUSH
87220: CALL_OW 74
87224: ST_TO_ADDR
// if not k then
87225: LD_VAR 0 9
87229: NOT
87230: IFFALSE 87234
// continue ;
87232: GO 83649
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
87234: LD_VAR 0 9
87238: PUSH
87239: LD_INT 81
87241: PUSH
87242: LD_VAR 0 4
87246: PUSH
87247: LD_VAR 0 7
87251: ARRAY
87252: PPUSH
87253: CALL_OW 255
87257: PUSH
87258: EMPTY
87259: LIST
87260: LIST
87261: PPUSH
87262: CALL_OW 69
87266: IN
87267: PUSH
87268: LD_VAR 0 9
87272: PPUSH
87273: LD_VAR 0 4
87277: PUSH
87278: LD_VAR 0 7
87282: ARRAY
87283: PPUSH
87284: CALL_OW 296
87288: PUSH
87289: LD_INT 5
87291: LESS
87292: AND
87293: IFFALSE 87310
// ComAutodestruct ( group [ i ] ) ;
87295: LD_VAR 0 4
87299: PUSH
87300: LD_VAR 0 7
87304: ARRAY
87305: PPUSH
87306: CALL 81744 0 1
// end ; if f_attack_depot then
87310: LD_VAR 0 25
87314: IFFALSE 87426
// begin k := 6 ;
87316: LD_ADDR_VAR 0 9
87320: PUSH
87321: LD_INT 6
87323: ST_TO_ADDR
// if tmp < k then
87324: LD_VAR 0 14
87328: PUSH
87329: LD_VAR 0 9
87333: LESS
87334: IFFALSE 87346
// k := tmp ;
87336: LD_ADDR_VAR 0 9
87340: PUSH
87341: LD_VAR 0 14
87345: ST_TO_ADDR
// for j = 1 to k do
87346: LD_ADDR_VAR 0 8
87350: PUSH
87351: DOUBLE
87352: LD_INT 1
87354: DEC
87355: ST_TO_ADDR
87356: LD_VAR 0 9
87360: PUSH
87361: FOR_TO
87362: IFFALSE 87424
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
87364: LD_VAR 0 8
87368: PPUSH
87369: CALL_OW 266
87373: PUSH
87374: LD_INT 0
87376: PUSH
87377: LD_INT 1
87379: PUSH
87380: EMPTY
87381: LIST
87382: LIST
87383: IN
87384: IFFALSE 87422
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
87386: LD_VAR 0 4
87390: PUSH
87391: LD_VAR 0 7
87395: ARRAY
87396: PPUSH
87397: LD_VAR 0 14
87401: PUSH
87402: LD_VAR 0 8
87406: ARRAY
87407: PPUSH
87408: CALL_OW 115
// attacking := true ;
87412: LD_ADDR_VAR 0 29
87416: PUSH
87417: LD_INT 1
87419: ST_TO_ADDR
// break ;
87420: GO 87424
// end ;
87422: GO 87361
87424: POP
87425: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
87426: LD_VAR 0 4
87430: PUSH
87431: LD_VAR 0 7
87435: ARRAY
87436: PPUSH
87437: CALL_OW 302
87441: PUSH
87442: LD_VAR 0 29
87446: NOT
87447: AND
87448: IFFALSE 87770
// begin if GetTag ( group [ i ] ) = 71 then
87450: LD_VAR 0 4
87454: PUSH
87455: LD_VAR 0 7
87459: ARRAY
87460: PPUSH
87461: CALL_OW 110
87465: PUSH
87466: LD_INT 71
87468: EQUAL
87469: IFFALSE 87510
// begin if HasTask ( group [ i ] ) then
87471: LD_VAR 0 4
87475: PUSH
87476: LD_VAR 0 7
87480: ARRAY
87481: PPUSH
87482: CALL_OW 314
87486: IFFALSE 87492
// continue else
87488: GO 83649
87490: GO 87510
// SetTag ( group [ i ] , 0 ) ;
87492: LD_VAR 0 4
87496: PUSH
87497: LD_VAR 0 7
87501: ARRAY
87502: PPUSH
87503: LD_INT 0
87505: PPUSH
87506: CALL_OW 109
// end ; k := 8 ;
87510: LD_ADDR_VAR 0 9
87514: PUSH
87515: LD_INT 8
87517: ST_TO_ADDR
// x := 0 ;
87518: LD_ADDR_VAR 0 10
87522: PUSH
87523: LD_INT 0
87525: ST_TO_ADDR
// if tmp < k then
87526: LD_VAR 0 14
87530: PUSH
87531: LD_VAR 0 9
87535: LESS
87536: IFFALSE 87548
// k := tmp ;
87538: LD_ADDR_VAR 0 9
87542: PUSH
87543: LD_VAR 0 14
87547: ST_TO_ADDR
// for j = 1 to k do
87548: LD_ADDR_VAR 0 8
87552: PUSH
87553: DOUBLE
87554: LD_INT 1
87556: DEC
87557: ST_TO_ADDR
87558: LD_VAR 0 9
87562: PUSH
87563: FOR_TO
87564: IFFALSE 87662
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
87566: LD_VAR 0 14
87570: PUSH
87571: LD_VAR 0 8
87575: ARRAY
87576: PPUSH
87577: CALL_OW 247
87581: PUSH
87582: LD_INT 1
87584: EQUAL
87585: PUSH
87586: LD_VAR 0 14
87590: PUSH
87591: LD_VAR 0 8
87595: ARRAY
87596: PPUSH
87597: CALL_OW 256
87601: PUSH
87602: LD_INT 250
87604: LESS
87605: PUSH
87606: LD_VAR 0 20
87610: AND
87611: PUSH
87612: LD_VAR 0 20
87616: NOT
87617: PUSH
87618: LD_VAR 0 14
87622: PUSH
87623: LD_VAR 0 8
87627: ARRAY
87628: PPUSH
87629: CALL_OW 256
87633: PUSH
87634: LD_INT 250
87636: GREATEREQUAL
87637: AND
87638: OR
87639: AND
87640: IFFALSE 87660
// begin x := tmp [ j ] ;
87642: LD_ADDR_VAR 0 10
87646: PUSH
87647: LD_VAR 0 14
87651: PUSH
87652: LD_VAR 0 8
87656: ARRAY
87657: ST_TO_ADDR
// break ;
87658: GO 87662
// end ;
87660: GO 87563
87662: POP
87663: POP
// if x then
87664: LD_VAR 0 10
87668: IFFALSE 87692
// ComAttackUnit ( group [ i ] , x ) else
87670: LD_VAR 0 4
87674: PUSH
87675: LD_VAR 0 7
87679: ARRAY
87680: PPUSH
87681: LD_VAR 0 10
87685: PPUSH
87686: CALL_OW 115
87690: GO 87716
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
87692: LD_VAR 0 4
87696: PUSH
87697: LD_VAR 0 7
87701: ARRAY
87702: PPUSH
87703: LD_VAR 0 14
87707: PUSH
87708: LD_INT 1
87710: ARRAY
87711: PPUSH
87712: CALL_OW 115
// if not HasTask ( group [ i ] ) then
87716: LD_VAR 0 4
87720: PUSH
87721: LD_VAR 0 7
87725: ARRAY
87726: PPUSH
87727: CALL_OW 314
87731: NOT
87732: IFFALSE 87770
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
87734: LD_VAR 0 4
87738: PUSH
87739: LD_VAR 0 7
87743: ARRAY
87744: PPUSH
87745: LD_VAR 0 14
87749: PPUSH
87750: LD_VAR 0 4
87754: PUSH
87755: LD_VAR 0 7
87759: ARRAY
87760: PPUSH
87761: CALL_OW 74
87765: PPUSH
87766: CALL_OW 115
// end ; end ; end ;
87770: GO 83649
87772: POP
87773: POP
// wait ( 0 0$2 ) ;
87774: LD_INT 70
87776: PPUSH
87777: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
87781: LD_VAR 0 4
87785: NOT
87786: PUSH
87787: LD_VAR 0 4
87791: PUSH
87792: EMPTY
87793: EQUAL
87794: OR
87795: PUSH
87796: LD_INT 81
87798: PUSH
87799: LD_VAR 0 35
87803: PUSH
87804: EMPTY
87805: LIST
87806: LIST
87807: PPUSH
87808: CALL_OW 69
87812: NOT
87813: OR
87814: IFFALSE 83634
// end ;
87816: LD_VAR 0 2
87820: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
87821: LD_INT 0
87823: PPUSH
87824: PPUSH
87825: PPUSH
87826: PPUSH
// if not base_units then
87827: LD_VAR 0 1
87831: NOT
87832: IFFALSE 87836
// exit ;
87834: GO 87923
// result := false ;
87836: LD_ADDR_VAR 0 2
87840: PUSH
87841: LD_INT 0
87843: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
87844: LD_ADDR_VAR 0 5
87848: PUSH
87849: LD_VAR 0 1
87853: PPUSH
87854: LD_INT 21
87856: PUSH
87857: LD_INT 3
87859: PUSH
87860: EMPTY
87861: LIST
87862: LIST
87863: PPUSH
87864: CALL_OW 72
87868: ST_TO_ADDR
// if not tmp then
87869: LD_VAR 0 5
87873: NOT
87874: IFFALSE 87878
// exit ;
87876: GO 87923
// for i in tmp do
87878: LD_ADDR_VAR 0 3
87882: PUSH
87883: LD_VAR 0 5
87887: PUSH
87888: FOR_IN
87889: IFFALSE 87921
// begin result := EnemyInRange ( i , 22 ) ;
87891: LD_ADDR_VAR 0 2
87895: PUSH
87896: LD_VAR 0 3
87900: PPUSH
87901: LD_INT 22
87903: PPUSH
87904: CALL 81450 0 2
87908: ST_TO_ADDR
// if result then
87909: LD_VAR 0 2
87913: IFFALSE 87919
// exit ;
87915: POP
87916: POP
87917: GO 87923
// end ;
87919: GO 87888
87921: POP
87922: POP
// end ;
87923: LD_VAR 0 2
87927: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
87928: LD_INT 0
87930: PPUSH
87931: PPUSH
// if not units then
87932: LD_VAR 0 1
87936: NOT
87937: IFFALSE 87941
// exit ;
87939: GO 88011
// result := [ ] ;
87941: LD_ADDR_VAR 0 3
87945: PUSH
87946: EMPTY
87947: ST_TO_ADDR
// for i in units do
87948: LD_ADDR_VAR 0 4
87952: PUSH
87953: LD_VAR 0 1
87957: PUSH
87958: FOR_IN
87959: IFFALSE 88009
// if GetTag ( i ) = tag then
87961: LD_VAR 0 4
87965: PPUSH
87966: CALL_OW 110
87970: PUSH
87971: LD_VAR 0 2
87975: EQUAL
87976: IFFALSE 88007
// result := Insert ( result , result + 1 , i ) ;
87978: LD_ADDR_VAR 0 3
87982: PUSH
87983: LD_VAR 0 3
87987: PPUSH
87988: LD_VAR 0 3
87992: PUSH
87993: LD_INT 1
87995: PLUS
87996: PPUSH
87997: LD_VAR 0 4
88001: PPUSH
88002: CALL_OW 2
88006: ST_TO_ADDR
88007: GO 87958
88009: POP
88010: POP
// end ;
88011: LD_VAR 0 3
88015: RET
// export function IsDriver ( un ) ; begin
88016: LD_INT 0
88018: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
88019: LD_ADDR_VAR 0 2
88023: PUSH
88024: LD_VAR 0 1
88028: PUSH
88029: LD_INT 55
88031: PUSH
88032: EMPTY
88033: LIST
88034: PPUSH
88035: CALL_OW 69
88039: IN
88040: ST_TO_ADDR
// end ;
88041: LD_VAR 0 2
88045: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
88046: LD_INT 0
88048: PPUSH
88049: PPUSH
// list := [ ] ;
88050: LD_ADDR_VAR 0 5
88054: PUSH
88055: EMPTY
88056: ST_TO_ADDR
// case d of 0 :
88057: LD_VAR 0 3
88061: PUSH
88062: LD_INT 0
88064: DOUBLE
88065: EQUAL
88066: IFTRUE 88070
88068: GO 88203
88070: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
88071: LD_ADDR_VAR 0 5
88075: PUSH
88076: LD_VAR 0 1
88080: PUSH
88081: LD_INT 4
88083: MINUS
88084: PUSH
88085: LD_VAR 0 2
88089: PUSH
88090: LD_INT 4
88092: MINUS
88093: PUSH
88094: LD_INT 2
88096: PUSH
88097: EMPTY
88098: LIST
88099: LIST
88100: LIST
88101: PUSH
88102: LD_VAR 0 1
88106: PUSH
88107: LD_INT 3
88109: MINUS
88110: PUSH
88111: LD_VAR 0 2
88115: PUSH
88116: LD_INT 1
88118: PUSH
88119: EMPTY
88120: LIST
88121: LIST
88122: LIST
88123: PUSH
88124: LD_VAR 0 1
88128: PUSH
88129: LD_INT 4
88131: PLUS
88132: PUSH
88133: LD_VAR 0 2
88137: PUSH
88138: LD_INT 4
88140: PUSH
88141: EMPTY
88142: LIST
88143: LIST
88144: LIST
88145: PUSH
88146: LD_VAR 0 1
88150: PUSH
88151: LD_INT 3
88153: PLUS
88154: PUSH
88155: LD_VAR 0 2
88159: PUSH
88160: LD_INT 3
88162: PLUS
88163: PUSH
88164: LD_INT 5
88166: PUSH
88167: EMPTY
88168: LIST
88169: LIST
88170: LIST
88171: PUSH
88172: LD_VAR 0 1
88176: PUSH
88177: LD_VAR 0 2
88181: PUSH
88182: LD_INT 4
88184: PLUS
88185: PUSH
88186: LD_INT 0
88188: PUSH
88189: EMPTY
88190: LIST
88191: LIST
88192: LIST
88193: PUSH
88194: EMPTY
88195: LIST
88196: LIST
88197: LIST
88198: LIST
88199: LIST
88200: ST_TO_ADDR
// end ; 1 :
88201: GO 88901
88203: LD_INT 1
88205: DOUBLE
88206: EQUAL
88207: IFTRUE 88211
88209: GO 88344
88211: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
88212: LD_ADDR_VAR 0 5
88216: PUSH
88217: LD_VAR 0 1
88221: PUSH
88222: LD_VAR 0 2
88226: PUSH
88227: LD_INT 4
88229: MINUS
88230: PUSH
88231: LD_INT 3
88233: PUSH
88234: EMPTY
88235: LIST
88236: LIST
88237: LIST
88238: PUSH
88239: LD_VAR 0 1
88243: PUSH
88244: LD_INT 3
88246: MINUS
88247: PUSH
88248: LD_VAR 0 2
88252: PUSH
88253: LD_INT 3
88255: MINUS
88256: PUSH
88257: LD_INT 2
88259: PUSH
88260: EMPTY
88261: LIST
88262: LIST
88263: LIST
88264: PUSH
88265: LD_VAR 0 1
88269: PUSH
88270: LD_INT 4
88272: MINUS
88273: PUSH
88274: LD_VAR 0 2
88278: PUSH
88279: LD_INT 1
88281: PUSH
88282: EMPTY
88283: LIST
88284: LIST
88285: LIST
88286: PUSH
88287: LD_VAR 0 1
88291: PUSH
88292: LD_VAR 0 2
88296: PUSH
88297: LD_INT 3
88299: PLUS
88300: PUSH
88301: LD_INT 0
88303: PUSH
88304: EMPTY
88305: LIST
88306: LIST
88307: LIST
88308: PUSH
88309: LD_VAR 0 1
88313: PUSH
88314: LD_INT 4
88316: PLUS
88317: PUSH
88318: LD_VAR 0 2
88322: PUSH
88323: LD_INT 4
88325: PLUS
88326: PUSH
88327: LD_INT 5
88329: PUSH
88330: EMPTY
88331: LIST
88332: LIST
88333: LIST
88334: PUSH
88335: EMPTY
88336: LIST
88337: LIST
88338: LIST
88339: LIST
88340: LIST
88341: ST_TO_ADDR
// end ; 2 :
88342: GO 88901
88344: LD_INT 2
88346: DOUBLE
88347: EQUAL
88348: IFTRUE 88352
88350: GO 88481
88352: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
88353: LD_ADDR_VAR 0 5
88357: PUSH
88358: LD_VAR 0 1
88362: PUSH
88363: LD_VAR 0 2
88367: PUSH
88368: LD_INT 3
88370: MINUS
88371: PUSH
88372: LD_INT 3
88374: PUSH
88375: EMPTY
88376: LIST
88377: LIST
88378: LIST
88379: PUSH
88380: LD_VAR 0 1
88384: PUSH
88385: LD_INT 4
88387: PLUS
88388: PUSH
88389: LD_VAR 0 2
88393: PUSH
88394: LD_INT 4
88396: PUSH
88397: EMPTY
88398: LIST
88399: LIST
88400: LIST
88401: PUSH
88402: LD_VAR 0 1
88406: PUSH
88407: LD_VAR 0 2
88411: PUSH
88412: LD_INT 4
88414: PLUS
88415: PUSH
88416: LD_INT 0
88418: PUSH
88419: EMPTY
88420: LIST
88421: LIST
88422: LIST
88423: PUSH
88424: LD_VAR 0 1
88428: PUSH
88429: LD_INT 3
88431: MINUS
88432: PUSH
88433: LD_VAR 0 2
88437: PUSH
88438: LD_INT 1
88440: PUSH
88441: EMPTY
88442: LIST
88443: LIST
88444: LIST
88445: PUSH
88446: LD_VAR 0 1
88450: PUSH
88451: LD_INT 4
88453: MINUS
88454: PUSH
88455: LD_VAR 0 2
88459: PUSH
88460: LD_INT 4
88462: MINUS
88463: PUSH
88464: LD_INT 2
88466: PUSH
88467: EMPTY
88468: LIST
88469: LIST
88470: LIST
88471: PUSH
88472: EMPTY
88473: LIST
88474: LIST
88475: LIST
88476: LIST
88477: LIST
88478: ST_TO_ADDR
// end ; 3 :
88479: GO 88901
88481: LD_INT 3
88483: DOUBLE
88484: EQUAL
88485: IFTRUE 88489
88487: GO 88622
88489: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
88490: LD_ADDR_VAR 0 5
88494: PUSH
88495: LD_VAR 0 1
88499: PUSH
88500: LD_INT 3
88502: PLUS
88503: PUSH
88504: LD_VAR 0 2
88508: PUSH
88509: LD_INT 4
88511: PUSH
88512: EMPTY
88513: LIST
88514: LIST
88515: LIST
88516: PUSH
88517: LD_VAR 0 1
88521: PUSH
88522: LD_INT 4
88524: PLUS
88525: PUSH
88526: LD_VAR 0 2
88530: PUSH
88531: LD_INT 4
88533: PLUS
88534: PUSH
88535: LD_INT 5
88537: PUSH
88538: EMPTY
88539: LIST
88540: LIST
88541: LIST
88542: PUSH
88543: LD_VAR 0 1
88547: PUSH
88548: LD_INT 4
88550: MINUS
88551: PUSH
88552: LD_VAR 0 2
88556: PUSH
88557: LD_INT 1
88559: PUSH
88560: EMPTY
88561: LIST
88562: LIST
88563: LIST
88564: PUSH
88565: LD_VAR 0 1
88569: PUSH
88570: LD_VAR 0 2
88574: PUSH
88575: LD_INT 4
88577: MINUS
88578: PUSH
88579: LD_INT 3
88581: PUSH
88582: EMPTY
88583: LIST
88584: LIST
88585: LIST
88586: PUSH
88587: LD_VAR 0 1
88591: PUSH
88592: LD_INT 3
88594: MINUS
88595: PUSH
88596: LD_VAR 0 2
88600: PUSH
88601: LD_INT 3
88603: MINUS
88604: PUSH
88605: LD_INT 2
88607: PUSH
88608: EMPTY
88609: LIST
88610: LIST
88611: LIST
88612: PUSH
88613: EMPTY
88614: LIST
88615: LIST
88616: LIST
88617: LIST
88618: LIST
88619: ST_TO_ADDR
// end ; 4 :
88620: GO 88901
88622: LD_INT 4
88624: DOUBLE
88625: EQUAL
88626: IFTRUE 88630
88628: GO 88763
88630: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
88631: LD_ADDR_VAR 0 5
88635: PUSH
88636: LD_VAR 0 1
88640: PUSH
88641: LD_VAR 0 2
88645: PUSH
88646: LD_INT 4
88648: PLUS
88649: PUSH
88650: LD_INT 0
88652: PUSH
88653: EMPTY
88654: LIST
88655: LIST
88656: LIST
88657: PUSH
88658: LD_VAR 0 1
88662: PUSH
88663: LD_INT 3
88665: PLUS
88666: PUSH
88667: LD_VAR 0 2
88671: PUSH
88672: LD_INT 3
88674: PLUS
88675: PUSH
88676: LD_INT 5
88678: PUSH
88679: EMPTY
88680: LIST
88681: LIST
88682: LIST
88683: PUSH
88684: LD_VAR 0 1
88688: PUSH
88689: LD_INT 4
88691: PLUS
88692: PUSH
88693: LD_VAR 0 2
88697: PUSH
88698: LD_INT 4
88700: PUSH
88701: EMPTY
88702: LIST
88703: LIST
88704: LIST
88705: PUSH
88706: LD_VAR 0 1
88710: PUSH
88711: LD_VAR 0 2
88715: PUSH
88716: LD_INT 3
88718: MINUS
88719: PUSH
88720: LD_INT 3
88722: PUSH
88723: EMPTY
88724: LIST
88725: LIST
88726: LIST
88727: PUSH
88728: LD_VAR 0 1
88732: PUSH
88733: LD_INT 4
88735: MINUS
88736: PUSH
88737: LD_VAR 0 2
88741: PUSH
88742: LD_INT 4
88744: MINUS
88745: PUSH
88746: LD_INT 2
88748: PUSH
88749: EMPTY
88750: LIST
88751: LIST
88752: LIST
88753: PUSH
88754: EMPTY
88755: LIST
88756: LIST
88757: LIST
88758: LIST
88759: LIST
88760: ST_TO_ADDR
// end ; 5 :
88761: GO 88901
88763: LD_INT 5
88765: DOUBLE
88766: EQUAL
88767: IFTRUE 88771
88769: GO 88900
88771: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
88772: LD_ADDR_VAR 0 5
88776: PUSH
88777: LD_VAR 0 1
88781: PUSH
88782: LD_INT 4
88784: MINUS
88785: PUSH
88786: LD_VAR 0 2
88790: PUSH
88791: LD_INT 1
88793: PUSH
88794: EMPTY
88795: LIST
88796: LIST
88797: LIST
88798: PUSH
88799: LD_VAR 0 1
88803: PUSH
88804: LD_VAR 0 2
88808: PUSH
88809: LD_INT 4
88811: MINUS
88812: PUSH
88813: LD_INT 3
88815: PUSH
88816: EMPTY
88817: LIST
88818: LIST
88819: LIST
88820: PUSH
88821: LD_VAR 0 1
88825: PUSH
88826: LD_INT 4
88828: PLUS
88829: PUSH
88830: LD_VAR 0 2
88834: PUSH
88835: LD_INT 4
88837: PLUS
88838: PUSH
88839: LD_INT 5
88841: PUSH
88842: EMPTY
88843: LIST
88844: LIST
88845: LIST
88846: PUSH
88847: LD_VAR 0 1
88851: PUSH
88852: LD_INT 3
88854: PLUS
88855: PUSH
88856: LD_VAR 0 2
88860: PUSH
88861: LD_INT 4
88863: PUSH
88864: EMPTY
88865: LIST
88866: LIST
88867: LIST
88868: PUSH
88869: LD_VAR 0 1
88873: PUSH
88874: LD_VAR 0 2
88878: PUSH
88879: LD_INT 3
88881: PLUS
88882: PUSH
88883: LD_INT 0
88885: PUSH
88886: EMPTY
88887: LIST
88888: LIST
88889: LIST
88890: PUSH
88891: EMPTY
88892: LIST
88893: LIST
88894: LIST
88895: LIST
88896: LIST
88897: ST_TO_ADDR
// end ; end ;
88898: GO 88901
88900: POP
// result := list ;
88901: LD_ADDR_VAR 0 4
88905: PUSH
88906: LD_VAR 0 5
88910: ST_TO_ADDR
// end ;
88911: LD_VAR 0 4
88915: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
88916: LD_INT 0
88918: PPUSH
88919: PPUSH
88920: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
88921: LD_VAR 0 1
88925: NOT
88926: PUSH
88927: LD_VAR 0 2
88931: PUSH
88932: LD_INT 1
88934: PUSH
88935: LD_INT 2
88937: PUSH
88938: LD_INT 3
88940: PUSH
88941: LD_INT 4
88943: PUSH
88944: EMPTY
88945: LIST
88946: LIST
88947: LIST
88948: LIST
88949: IN
88950: NOT
88951: OR
88952: IFFALSE 88956
// exit ;
88954: GO 89048
// tmp := [ ] ;
88956: LD_ADDR_VAR 0 5
88960: PUSH
88961: EMPTY
88962: ST_TO_ADDR
// for i in units do
88963: LD_ADDR_VAR 0 4
88967: PUSH
88968: LD_VAR 0 1
88972: PUSH
88973: FOR_IN
88974: IFFALSE 89017
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
88976: LD_ADDR_VAR 0 5
88980: PUSH
88981: LD_VAR 0 5
88985: PPUSH
88986: LD_VAR 0 5
88990: PUSH
88991: LD_INT 1
88993: PLUS
88994: PPUSH
88995: LD_VAR 0 4
88999: PPUSH
89000: LD_VAR 0 2
89004: PPUSH
89005: CALL_OW 259
89009: PPUSH
89010: CALL_OW 2
89014: ST_TO_ADDR
89015: GO 88973
89017: POP
89018: POP
// if not tmp then
89019: LD_VAR 0 5
89023: NOT
89024: IFFALSE 89028
// exit ;
89026: GO 89048
// result := SortListByListDesc ( units , tmp ) ;
89028: LD_ADDR_VAR 0 3
89032: PUSH
89033: LD_VAR 0 1
89037: PPUSH
89038: LD_VAR 0 5
89042: PPUSH
89043: CALL_OW 77
89047: ST_TO_ADDR
// end ;
89048: LD_VAR 0 3
89052: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
89053: LD_INT 0
89055: PPUSH
89056: PPUSH
89057: PPUSH
// x := GetX ( building ) ;
89058: LD_ADDR_VAR 0 4
89062: PUSH
89063: LD_VAR 0 2
89067: PPUSH
89068: CALL_OW 250
89072: ST_TO_ADDR
// y := GetY ( building ) ;
89073: LD_ADDR_VAR 0 5
89077: PUSH
89078: LD_VAR 0 2
89082: PPUSH
89083: CALL_OW 251
89087: ST_TO_ADDR
// if GetTaskList ( unit ) then
89088: LD_VAR 0 1
89092: PPUSH
89093: CALL_OW 437
89097: IFFALSE 89192
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
89099: LD_STRING e
89101: PUSH
89102: LD_VAR 0 1
89106: PPUSH
89107: CALL_OW 437
89111: PUSH
89112: LD_INT 1
89114: ARRAY
89115: PUSH
89116: LD_INT 1
89118: ARRAY
89119: EQUAL
89120: PUSH
89121: LD_VAR 0 4
89125: PUSH
89126: LD_VAR 0 1
89130: PPUSH
89131: CALL_OW 437
89135: PUSH
89136: LD_INT 1
89138: ARRAY
89139: PUSH
89140: LD_INT 2
89142: ARRAY
89143: EQUAL
89144: AND
89145: PUSH
89146: LD_VAR 0 5
89150: PUSH
89151: LD_VAR 0 1
89155: PPUSH
89156: CALL_OW 437
89160: PUSH
89161: LD_INT 1
89163: ARRAY
89164: PUSH
89165: LD_INT 3
89167: ARRAY
89168: EQUAL
89169: AND
89170: IFFALSE 89182
// result := true else
89172: LD_ADDR_VAR 0 3
89176: PUSH
89177: LD_INT 1
89179: ST_TO_ADDR
89180: GO 89190
// result := false ;
89182: LD_ADDR_VAR 0 3
89186: PUSH
89187: LD_INT 0
89189: ST_TO_ADDR
// end else
89190: GO 89200
// result := false ;
89192: LD_ADDR_VAR 0 3
89196: PUSH
89197: LD_INT 0
89199: ST_TO_ADDR
// end ;
89200: LD_VAR 0 3
89204: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
89205: LD_INT 0
89207: PPUSH
89208: PPUSH
89209: PPUSH
89210: PPUSH
// if not unit or not area then
89211: LD_VAR 0 1
89215: NOT
89216: PUSH
89217: LD_VAR 0 2
89221: NOT
89222: OR
89223: IFFALSE 89227
// exit ;
89225: GO 89391
// tmp := AreaToList ( area , i ) ;
89227: LD_ADDR_VAR 0 6
89231: PUSH
89232: LD_VAR 0 2
89236: PPUSH
89237: LD_VAR 0 5
89241: PPUSH
89242: CALL_OW 517
89246: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
89247: LD_ADDR_VAR 0 5
89251: PUSH
89252: DOUBLE
89253: LD_INT 1
89255: DEC
89256: ST_TO_ADDR
89257: LD_VAR 0 6
89261: PUSH
89262: LD_INT 1
89264: ARRAY
89265: PUSH
89266: FOR_TO
89267: IFFALSE 89389
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
89269: LD_ADDR_VAR 0 7
89273: PUSH
89274: LD_VAR 0 6
89278: PUSH
89279: LD_INT 1
89281: ARRAY
89282: PUSH
89283: LD_VAR 0 5
89287: ARRAY
89288: PUSH
89289: LD_VAR 0 6
89293: PUSH
89294: LD_INT 2
89296: ARRAY
89297: PUSH
89298: LD_VAR 0 5
89302: ARRAY
89303: PUSH
89304: EMPTY
89305: LIST
89306: LIST
89307: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
89308: LD_VAR 0 7
89312: PUSH
89313: LD_INT 1
89315: ARRAY
89316: PPUSH
89317: LD_VAR 0 7
89321: PUSH
89322: LD_INT 2
89324: ARRAY
89325: PPUSH
89326: CALL_OW 428
89330: PUSH
89331: LD_INT 0
89333: EQUAL
89334: IFFALSE 89387
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
89336: LD_VAR 0 1
89340: PPUSH
89341: LD_VAR 0 7
89345: PUSH
89346: LD_INT 1
89348: ARRAY
89349: PPUSH
89350: LD_VAR 0 7
89354: PUSH
89355: LD_INT 2
89357: ARRAY
89358: PPUSH
89359: LD_VAR 0 3
89363: PPUSH
89364: CALL_OW 48
// result := IsPlaced ( unit ) ;
89368: LD_ADDR_VAR 0 4
89372: PUSH
89373: LD_VAR 0 1
89377: PPUSH
89378: CALL_OW 305
89382: ST_TO_ADDR
// exit ;
89383: POP
89384: POP
89385: GO 89391
// end ; end ;
89387: GO 89266
89389: POP
89390: POP
// end ;
89391: LD_VAR 0 4
89395: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
89396: LD_INT 0
89398: PPUSH
89399: PPUSH
89400: PPUSH
// if not side or side > 8 then
89401: LD_VAR 0 1
89405: NOT
89406: PUSH
89407: LD_VAR 0 1
89411: PUSH
89412: LD_INT 8
89414: GREATER
89415: OR
89416: IFFALSE 89420
// exit ;
89418: GO 89607
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
89420: LD_ADDR_VAR 0 4
89424: PUSH
89425: LD_INT 22
89427: PUSH
89428: LD_VAR 0 1
89432: PUSH
89433: EMPTY
89434: LIST
89435: LIST
89436: PUSH
89437: LD_INT 21
89439: PUSH
89440: LD_INT 3
89442: PUSH
89443: EMPTY
89444: LIST
89445: LIST
89446: PUSH
89447: EMPTY
89448: LIST
89449: LIST
89450: PPUSH
89451: CALL_OW 69
89455: ST_TO_ADDR
// if not tmp then
89456: LD_VAR 0 4
89460: NOT
89461: IFFALSE 89465
// exit ;
89463: GO 89607
// enable_addtolog := true ;
89465: LD_ADDR_OWVAR 81
89469: PUSH
89470: LD_INT 1
89472: ST_TO_ADDR
// AddToLog ( [ ) ;
89473: LD_STRING [
89475: PPUSH
89476: CALL_OW 561
// for i in tmp do
89480: LD_ADDR_VAR 0 3
89484: PUSH
89485: LD_VAR 0 4
89489: PUSH
89490: FOR_IN
89491: IFFALSE 89598
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
89493: LD_STRING [
89495: PUSH
89496: LD_VAR 0 3
89500: PPUSH
89501: CALL_OW 266
89505: STR
89506: PUSH
89507: LD_STRING , 
89509: STR
89510: PUSH
89511: LD_VAR 0 3
89515: PPUSH
89516: CALL_OW 250
89520: STR
89521: PUSH
89522: LD_STRING , 
89524: STR
89525: PUSH
89526: LD_VAR 0 3
89530: PPUSH
89531: CALL_OW 251
89535: STR
89536: PUSH
89537: LD_STRING , 
89539: STR
89540: PUSH
89541: LD_VAR 0 3
89545: PPUSH
89546: CALL_OW 254
89550: STR
89551: PUSH
89552: LD_STRING , 
89554: STR
89555: PUSH
89556: LD_VAR 0 3
89560: PPUSH
89561: LD_INT 1
89563: PPUSH
89564: CALL_OW 268
89568: STR
89569: PUSH
89570: LD_STRING , 
89572: STR
89573: PUSH
89574: LD_VAR 0 3
89578: PPUSH
89579: LD_INT 2
89581: PPUSH
89582: CALL_OW 268
89586: STR
89587: PUSH
89588: LD_STRING ],
89590: STR
89591: PPUSH
89592: CALL_OW 561
// end ;
89596: GO 89490
89598: POP
89599: POP
// AddToLog ( ]; ) ;
89600: LD_STRING ];
89602: PPUSH
89603: CALL_OW 561
// end ;
89607: LD_VAR 0 2
89611: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
89612: LD_INT 0
89614: PPUSH
89615: PPUSH
89616: PPUSH
89617: PPUSH
89618: PPUSH
// if not area or not rate or not max then
89619: LD_VAR 0 1
89623: NOT
89624: PUSH
89625: LD_VAR 0 2
89629: NOT
89630: OR
89631: PUSH
89632: LD_VAR 0 4
89636: NOT
89637: OR
89638: IFFALSE 89642
// exit ;
89640: GO 89834
// while 1 do
89642: LD_INT 1
89644: IFFALSE 89834
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
89646: LD_ADDR_VAR 0 9
89650: PUSH
89651: LD_VAR 0 1
89655: PPUSH
89656: LD_INT 1
89658: PPUSH
89659: CALL_OW 287
89663: PUSH
89664: LD_INT 10
89666: MUL
89667: ST_TO_ADDR
// r := rate / 10 ;
89668: LD_ADDR_VAR 0 7
89672: PUSH
89673: LD_VAR 0 2
89677: PUSH
89678: LD_INT 10
89680: DIVREAL
89681: ST_TO_ADDR
// time := 1 1$00 ;
89682: LD_ADDR_VAR 0 8
89686: PUSH
89687: LD_INT 2100
89689: ST_TO_ADDR
// if amount < min then
89690: LD_VAR 0 9
89694: PUSH
89695: LD_VAR 0 3
89699: LESS
89700: IFFALSE 89718
// r := r * 2 else
89702: LD_ADDR_VAR 0 7
89706: PUSH
89707: LD_VAR 0 7
89711: PUSH
89712: LD_INT 2
89714: MUL
89715: ST_TO_ADDR
89716: GO 89744
// if amount > max then
89718: LD_VAR 0 9
89722: PUSH
89723: LD_VAR 0 4
89727: GREATER
89728: IFFALSE 89744
// r := r / 2 ;
89730: LD_ADDR_VAR 0 7
89734: PUSH
89735: LD_VAR 0 7
89739: PUSH
89740: LD_INT 2
89742: DIVREAL
89743: ST_TO_ADDR
// time := time / r ;
89744: LD_ADDR_VAR 0 8
89748: PUSH
89749: LD_VAR 0 8
89753: PUSH
89754: LD_VAR 0 7
89758: DIVREAL
89759: ST_TO_ADDR
// if time < 0 then
89760: LD_VAR 0 8
89764: PUSH
89765: LD_INT 0
89767: LESS
89768: IFFALSE 89785
// time := time * - 1 ;
89770: LD_ADDR_VAR 0 8
89774: PUSH
89775: LD_VAR 0 8
89779: PUSH
89780: LD_INT 1
89782: NEG
89783: MUL
89784: ST_TO_ADDR
// wait ( time ) ;
89785: LD_VAR 0 8
89789: PPUSH
89790: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
89794: LD_INT 35
89796: PPUSH
89797: LD_INT 875
89799: PPUSH
89800: CALL_OW 12
89804: PPUSH
89805: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
89809: LD_INT 1
89811: PPUSH
89812: LD_INT 5
89814: PPUSH
89815: CALL_OW 12
89819: PPUSH
89820: LD_VAR 0 1
89824: PPUSH
89825: LD_INT 1
89827: PPUSH
89828: CALL_OW 55
// end ;
89832: GO 89642
// end ;
89834: LD_VAR 0 5
89838: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
89839: LD_INT 0
89841: PPUSH
89842: PPUSH
89843: PPUSH
89844: PPUSH
89845: PPUSH
89846: PPUSH
89847: PPUSH
89848: PPUSH
// if not turrets or not factories then
89849: LD_VAR 0 1
89853: NOT
89854: PUSH
89855: LD_VAR 0 2
89859: NOT
89860: OR
89861: IFFALSE 89865
// exit ;
89863: GO 90172
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
89865: LD_ADDR_VAR 0 10
89869: PUSH
89870: LD_INT 5
89872: PUSH
89873: LD_INT 6
89875: PUSH
89876: EMPTY
89877: LIST
89878: LIST
89879: PUSH
89880: LD_INT 2
89882: PUSH
89883: LD_INT 4
89885: PUSH
89886: EMPTY
89887: LIST
89888: LIST
89889: PUSH
89890: LD_INT 3
89892: PUSH
89893: LD_INT 5
89895: PUSH
89896: EMPTY
89897: LIST
89898: LIST
89899: PUSH
89900: EMPTY
89901: LIST
89902: LIST
89903: LIST
89904: PUSH
89905: LD_INT 24
89907: PUSH
89908: LD_INT 25
89910: PUSH
89911: EMPTY
89912: LIST
89913: LIST
89914: PUSH
89915: LD_INT 23
89917: PUSH
89918: LD_INT 27
89920: PUSH
89921: EMPTY
89922: LIST
89923: LIST
89924: PUSH
89925: EMPTY
89926: LIST
89927: LIST
89928: PUSH
89929: LD_INT 42
89931: PUSH
89932: LD_INT 43
89934: PUSH
89935: EMPTY
89936: LIST
89937: LIST
89938: PUSH
89939: LD_INT 44
89941: PUSH
89942: LD_INT 46
89944: PUSH
89945: EMPTY
89946: LIST
89947: LIST
89948: PUSH
89949: LD_INT 45
89951: PUSH
89952: LD_INT 47
89954: PUSH
89955: EMPTY
89956: LIST
89957: LIST
89958: PUSH
89959: EMPTY
89960: LIST
89961: LIST
89962: LIST
89963: PUSH
89964: EMPTY
89965: LIST
89966: LIST
89967: LIST
89968: ST_TO_ADDR
// result := [ ] ;
89969: LD_ADDR_VAR 0 3
89973: PUSH
89974: EMPTY
89975: ST_TO_ADDR
// for i in turrets do
89976: LD_ADDR_VAR 0 4
89980: PUSH
89981: LD_VAR 0 1
89985: PUSH
89986: FOR_IN
89987: IFFALSE 90170
// begin nat := GetNation ( i ) ;
89989: LD_ADDR_VAR 0 7
89993: PUSH
89994: LD_VAR 0 4
89998: PPUSH
89999: CALL_OW 248
90003: ST_TO_ADDR
// weapon := 0 ;
90004: LD_ADDR_VAR 0 8
90008: PUSH
90009: LD_INT 0
90011: ST_TO_ADDR
// if not nat then
90012: LD_VAR 0 7
90016: NOT
90017: IFFALSE 90021
// continue ;
90019: GO 89986
// for j in list [ nat ] do
90021: LD_ADDR_VAR 0 5
90025: PUSH
90026: LD_VAR 0 10
90030: PUSH
90031: LD_VAR 0 7
90035: ARRAY
90036: PUSH
90037: FOR_IN
90038: IFFALSE 90079
// if GetBWeapon ( i ) = j [ 1 ] then
90040: LD_VAR 0 4
90044: PPUSH
90045: CALL_OW 269
90049: PUSH
90050: LD_VAR 0 5
90054: PUSH
90055: LD_INT 1
90057: ARRAY
90058: EQUAL
90059: IFFALSE 90077
// begin weapon := j [ 2 ] ;
90061: LD_ADDR_VAR 0 8
90065: PUSH
90066: LD_VAR 0 5
90070: PUSH
90071: LD_INT 2
90073: ARRAY
90074: ST_TO_ADDR
// break ;
90075: GO 90079
// end ;
90077: GO 90037
90079: POP
90080: POP
// if not weapon then
90081: LD_VAR 0 8
90085: NOT
90086: IFFALSE 90090
// continue ;
90088: GO 89986
// for k in factories do
90090: LD_ADDR_VAR 0 6
90094: PUSH
90095: LD_VAR 0 2
90099: PUSH
90100: FOR_IN
90101: IFFALSE 90166
// begin weapons := AvailableWeaponList ( k ) ;
90103: LD_ADDR_VAR 0 9
90107: PUSH
90108: LD_VAR 0 6
90112: PPUSH
90113: CALL_OW 478
90117: ST_TO_ADDR
// if not weapons then
90118: LD_VAR 0 9
90122: NOT
90123: IFFALSE 90127
// continue ;
90125: GO 90100
// if weapon in weapons then
90127: LD_VAR 0 8
90131: PUSH
90132: LD_VAR 0 9
90136: IN
90137: IFFALSE 90164
// begin result := [ i , weapon ] ;
90139: LD_ADDR_VAR 0 3
90143: PUSH
90144: LD_VAR 0 4
90148: PUSH
90149: LD_VAR 0 8
90153: PUSH
90154: EMPTY
90155: LIST
90156: LIST
90157: ST_TO_ADDR
// exit ;
90158: POP
90159: POP
90160: POP
90161: POP
90162: GO 90172
// end ; end ;
90164: GO 90100
90166: POP
90167: POP
// end ;
90168: GO 89986
90170: POP
90171: POP
// end ;
90172: LD_VAR 0 3
90176: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
90177: LD_INT 0
90179: PPUSH
// if not side or side > 8 then
90180: LD_VAR 0 3
90184: NOT
90185: PUSH
90186: LD_VAR 0 3
90190: PUSH
90191: LD_INT 8
90193: GREATER
90194: OR
90195: IFFALSE 90199
// exit ;
90197: GO 90258
// if not range then
90199: LD_VAR 0 4
90203: NOT
90204: IFFALSE 90215
// range := - 12 ;
90206: LD_ADDR_VAR 0 4
90210: PUSH
90211: LD_INT 12
90213: NEG
90214: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
90215: LD_VAR 0 1
90219: PPUSH
90220: LD_VAR 0 2
90224: PPUSH
90225: LD_VAR 0 3
90229: PPUSH
90230: LD_VAR 0 4
90234: PPUSH
90235: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
90239: LD_VAR 0 1
90243: PPUSH
90244: LD_VAR 0 2
90248: PPUSH
90249: LD_VAR 0 3
90253: PPUSH
90254: CALL_OW 331
// end ;
90258: LD_VAR 0 5
90262: RET
// export function Video ( mode ) ; begin
90263: LD_INT 0
90265: PPUSH
// ingame_video = mode ;
90266: LD_ADDR_OWVAR 52
90270: PUSH
90271: LD_VAR 0 1
90275: ST_TO_ADDR
// interface_hidden = mode ;
90276: LD_ADDR_OWVAR 54
90280: PUSH
90281: LD_VAR 0 1
90285: ST_TO_ADDR
// end ;
90286: LD_VAR 0 2
90290: RET
// export function Join ( array , element ) ; begin
90291: LD_INT 0
90293: PPUSH
// result := array ^ element ;
90294: LD_ADDR_VAR 0 3
90298: PUSH
90299: LD_VAR 0 1
90303: PUSH
90304: LD_VAR 0 2
90308: ADD
90309: ST_TO_ADDR
// end ;
90310: LD_VAR 0 3
90314: RET
// export function JoinUnion ( array , element ) ; begin
90315: LD_INT 0
90317: PPUSH
// result := array union element ;
90318: LD_ADDR_VAR 0 3
90322: PUSH
90323: LD_VAR 0 1
90327: PUSH
90328: LD_VAR 0 2
90332: UNION
90333: ST_TO_ADDR
// end ;
90334: LD_VAR 0 3
90338: RET
// export function GetBehemoths ( side ) ; begin
90339: LD_INT 0
90341: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
90342: LD_ADDR_VAR 0 2
90346: PUSH
90347: LD_INT 22
90349: PUSH
90350: LD_VAR 0 1
90354: PUSH
90355: EMPTY
90356: LIST
90357: LIST
90358: PUSH
90359: LD_INT 31
90361: PUSH
90362: LD_INT 25
90364: PUSH
90365: EMPTY
90366: LIST
90367: LIST
90368: PUSH
90369: EMPTY
90370: LIST
90371: LIST
90372: PPUSH
90373: CALL_OW 69
90377: ST_TO_ADDR
// end ;
90378: LD_VAR 0 2
90382: RET
// export function Shuffle ( array ) ; var i , index ; begin
90383: LD_INT 0
90385: PPUSH
90386: PPUSH
90387: PPUSH
// result := [ ] ;
90388: LD_ADDR_VAR 0 2
90392: PUSH
90393: EMPTY
90394: ST_TO_ADDR
// if not array then
90395: LD_VAR 0 1
90399: NOT
90400: IFFALSE 90404
// exit ;
90402: GO 90503
// Randomize ;
90404: CALL_OW 10
// for i = array downto 1 do
90408: LD_ADDR_VAR 0 3
90412: PUSH
90413: DOUBLE
90414: LD_VAR 0 1
90418: INC
90419: ST_TO_ADDR
90420: LD_INT 1
90422: PUSH
90423: FOR_DOWNTO
90424: IFFALSE 90501
// begin index := rand ( 1 , array ) ;
90426: LD_ADDR_VAR 0 4
90430: PUSH
90431: LD_INT 1
90433: PPUSH
90434: LD_VAR 0 1
90438: PPUSH
90439: CALL_OW 12
90443: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
90444: LD_ADDR_VAR 0 2
90448: PUSH
90449: LD_VAR 0 2
90453: PPUSH
90454: LD_VAR 0 2
90458: PUSH
90459: LD_INT 1
90461: PLUS
90462: PPUSH
90463: LD_VAR 0 1
90467: PUSH
90468: LD_VAR 0 4
90472: ARRAY
90473: PPUSH
90474: CALL_OW 2
90478: ST_TO_ADDR
// array := Delete ( array , index ) ;
90479: LD_ADDR_VAR 0 1
90483: PUSH
90484: LD_VAR 0 1
90488: PPUSH
90489: LD_VAR 0 4
90493: PPUSH
90494: CALL_OW 3
90498: ST_TO_ADDR
// end ;
90499: GO 90423
90501: POP
90502: POP
// end ;
90503: LD_VAR 0 2
90507: RET
// export function GetBaseMaterials ( base ) ; begin
90508: LD_INT 0
90510: PPUSH
// result := [ 0 , 0 , 0 ] ;
90511: LD_ADDR_VAR 0 2
90515: PUSH
90516: LD_INT 0
90518: PUSH
90519: LD_INT 0
90521: PUSH
90522: LD_INT 0
90524: PUSH
90525: EMPTY
90526: LIST
90527: LIST
90528: LIST
90529: ST_TO_ADDR
// if not base then
90530: LD_VAR 0 1
90534: NOT
90535: IFFALSE 90539
// exit ;
90537: GO 90588
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
90539: LD_ADDR_VAR 0 2
90543: PUSH
90544: LD_VAR 0 1
90548: PPUSH
90549: LD_INT 1
90551: PPUSH
90552: CALL_OW 275
90556: PUSH
90557: LD_VAR 0 1
90561: PPUSH
90562: LD_INT 2
90564: PPUSH
90565: CALL_OW 275
90569: PUSH
90570: LD_VAR 0 1
90574: PPUSH
90575: LD_INT 3
90577: PPUSH
90578: CALL_OW 275
90582: PUSH
90583: EMPTY
90584: LIST
90585: LIST
90586: LIST
90587: ST_TO_ADDR
// end ; end_of_file
90588: LD_VAR 0 2
90592: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
90593: GO 90595
90595: DISABLE
// begin ru_radar := 98 ;
90596: LD_ADDR_EXP 93
90600: PUSH
90601: LD_INT 98
90603: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
90604: LD_ADDR_EXP 94
90608: PUSH
90609: LD_INT 89
90611: ST_TO_ADDR
// us_hack := 99 ;
90612: LD_ADDR_EXP 95
90616: PUSH
90617: LD_INT 99
90619: ST_TO_ADDR
// us_artillery := 97 ;
90620: LD_ADDR_EXP 96
90624: PUSH
90625: LD_INT 97
90627: ST_TO_ADDR
// ar_bio_bomb := 91 ;
90628: LD_ADDR_EXP 97
90632: PUSH
90633: LD_INT 91
90635: ST_TO_ADDR
// end ; end_of_file end_of_file
90636: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
90637: GO 90639
90639: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
90640: LD_STRING initStreamRollete();
90642: PPUSH
90643: CALL_OW 559
// InitStreamMode ;
90647: CALL 90656 0 0
// DefineStreamItems ( ) ;
90651: CALL 91096 0 0
// end ;
90655: END
// function InitStreamMode ; begin
90656: LD_INT 0
90658: PPUSH
// streamModeActive := false ;
90659: LD_ADDR_EXP 98
90663: PUSH
90664: LD_INT 0
90666: ST_TO_ADDR
// normalCounter := 26 ;
90667: LD_ADDR_EXP 99
90671: PUSH
90672: LD_INT 26
90674: ST_TO_ADDR
// hardcoreCounter := 12 ;
90675: LD_ADDR_EXP 100
90679: PUSH
90680: LD_INT 12
90682: ST_TO_ADDR
// sRocket := false ;
90683: LD_ADDR_EXP 103
90687: PUSH
90688: LD_INT 0
90690: ST_TO_ADDR
// sSpeed := false ;
90691: LD_ADDR_EXP 102
90695: PUSH
90696: LD_INT 0
90698: ST_TO_ADDR
// sEngine := false ;
90699: LD_ADDR_EXP 104
90703: PUSH
90704: LD_INT 0
90706: ST_TO_ADDR
// sSpec := false ;
90707: LD_ADDR_EXP 101
90711: PUSH
90712: LD_INT 0
90714: ST_TO_ADDR
// sLevel := false ;
90715: LD_ADDR_EXP 105
90719: PUSH
90720: LD_INT 0
90722: ST_TO_ADDR
// sArmoury := false ;
90723: LD_ADDR_EXP 106
90727: PUSH
90728: LD_INT 0
90730: ST_TO_ADDR
// sRadar := false ;
90731: LD_ADDR_EXP 107
90735: PUSH
90736: LD_INT 0
90738: ST_TO_ADDR
// sBunker := false ;
90739: LD_ADDR_EXP 108
90743: PUSH
90744: LD_INT 0
90746: ST_TO_ADDR
// sHack := false ;
90747: LD_ADDR_EXP 109
90751: PUSH
90752: LD_INT 0
90754: ST_TO_ADDR
// sFire := false ;
90755: LD_ADDR_EXP 110
90759: PUSH
90760: LD_INT 0
90762: ST_TO_ADDR
// sRefresh := false ;
90763: LD_ADDR_EXP 111
90767: PUSH
90768: LD_INT 0
90770: ST_TO_ADDR
// sExp := false ;
90771: LD_ADDR_EXP 112
90775: PUSH
90776: LD_INT 0
90778: ST_TO_ADDR
// sDepot := false ;
90779: LD_ADDR_EXP 113
90783: PUSH
90784: LD_INT 0
90786: ST_TO_ADDR
// sFlag := false ;
90787: LD_ADDR_EXP 114
90791: PUSH
90792: LD_INT 0
90794: ST_TO_ADDR
// sKamikadze := false ;
90795: LD_ADDR_EXP 122
90799: PUSH
90800: LD_INT 0
90802: ST_TO_ADDR
// sTroll := false ;
90803: LD_ADDR_EXP 123
90807: PUSH
90808: LD_INT 0
90810: ST_TO_ADDR
// sSlow := false ;
90811: LD_ADDR_EXP 124
90815: PUSH
90816: LD_INT 0
90818: ST_TO_ADDR
// sLack := false ;
90819: LD_ADDR_EXP 125
90823: PUSH
90824: LD_INT 0
90826: ST_TO_ADDR
// sTank := false ;
90827: LD_ADDR_EXP 127
90831: PUSH
90832: LD_INT 0
90834: ST_TO_ADDR
// sRemote := false ;
90835: LD_ADDR_EXP 128
90839: PUSH
90840: LD_INT 0
90842: ST_TO_ADDR
// sPowell := false ;
90843: LD_ADDR_EXP 129
90847: PUSH
90848: LD_INT 0
90850: ST_TO_ADDR
// sTeleport := false ;
90851: LD_ADDR_EXP 132
90855: PUSH
90856: LD_INT 0
90858: ST_TO_ADDR
// sOilTower := false ;
90859: LD_ADDR_EXP 134
90863: PUSH
90864: LD_INT 0
90866: ST_TO_ADDR
// sShovel := false ;
90867: LD_ADDR_EXP 135
90871: PUSH
90872: LD_INT 0
90874: ST_TO_ADDR
// sSheik := false ;
90875: LD_ADDR_EXP 136
90879: PUSH
90880: LD_INT 0
90882: ST_TO_ADDR
// sEarthquake := false ;
90883: LD_ADDR_EXP 138
90887: PUSH
90888: LD_INT 0
90890: ST_TO_ADDR
// sAI := false ;
90891: LD_ADDR_EXP 139
90895: PUSH
90896: LD_INT 0
90898: ST_TO_ADDR
// sCargo := false ;
90899: LD_ADDR_EXP 142
90903: PUSH
90904: LD_INT 0
90906: ST_TO_ADDR
// sDLaser := false ;
90907: LD_ADDR_EXP 143
90911: PUSH
90912: LD_INT 0
90914: ST_TO_ADDR
// sExchange := false ;
90915: LD_ADDR_EXP 144
90919: PUSH
90920: LD_INT 0
90922: ST_TO_ADDR
// sFac := false ;
90923: LD_ADDR_EXP 145
90927: PUSH
90928: LD_INT 0
90930: ST_TO_ADDR
// sPower := false ;
90931: LD_ADDR_EXP 146
90935: PUSH
90936: LD_INT 0
90938: ST_TO_ADDR
// sRandom := false ;
90939: LD_ADDR_EXP 147
90943: PUSH
90944: LD_INT 0
90946: ST_TO_ADDR
// sShield := false ;
90947: LD_ADDR_EXP 148
90951: PUSH
90952: LD_INT 0
90954: ST_TO_ADDR
// sTime := false ;
90955: LD_ADDR_EXP 149
90959: PUSH
90960: LD_INT 0
90962: ST_TO_ADDR
// sTools := false ;
90963: LD_ADDR_EXP 150
90967: PUSH
90968: LD_INT 0
90970: ST_TO_ADDR
// sSold := false ;
90971: LD_ADDR_EXP 115
90975: PUSH
90976: LD_INT 0
90978: ST_TO_ADDR
// sDiff := false ;
90979: LD_ADDR_EXP 116
90983: PUSH
90984: LD_INT 0
90986: ST_TO_ADDR
// sFog := false ;
90987: LD_ADDR_EXP 119
90991: PUSH
90992: LD_INT 0
90994: ST_TO_ADDR
// sReset := false ;
90995: LD_ADDR_EXP 120
90999: PUSH
91000: LD_INT 0
91002: ST_TO_ADDR
// sSun := false ;
91003: LD_ADDR_EXP 121
91007: PUSH
91008: LD_INT 0
91010: ST_TO_ADDR
// sTiger := false ;
91011: LD_ADDR_EXP 117
91015: PUSH
91016: LD_INT 0
91018: ST_TO_ADDR
// sBomb := false ;
91019: LD_ADDR_EXP 118
91023: PUSH
91024: LD_INT 0
91026: ST_TO_ADDR
// sWound := false ;
91027: LD_ADDR_EXP 126
91031: PUSH
91032: LD_INT 0
91034: ST_TO_ADDR
// sBetray := false ;
91035: LD_ADDR_EXP 130
91039: PUSH
91040: LD_INT 0
91042: ST_TO_ADDR
// sContamin := false ;
91043: LD_ADDR_EXP 131
91047: PUSH
91048: LD_INT 0
91050: ST_TO_ADDR
// sOil := false ;
91051: LD_ADDR_EXP 133
91055: PUSH
91056: LD_INT 0
91058: ST_TO_ADDR
// sStu := false ;
91059: LD_ADDR_EXP 137
91063: PUSH
91064: LD_INT 0
91066: ST_TO_ADDR
// sBazooka := false ;
91067: LD_ADDR_EXP 140
91071: PUSH
91072: LD_INT 0
91074: ST_TO_ADDR
// sMortar := false ;
91075: LD_ADDR_EXP 141
91079: PUSH
91080: LD_INT 0
91082: ST_TO_ADDR
// sRanger := false ;
91083: LD_ADDR_EXP 151
91087: PUSH
91088: LD_INT 0
91090: ST_TO_ADDR
// end ;
91091: LD_VAR 0 1
91095: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
91096: LD_INT 0
91098: PPUSH
91099: PPUSH
91100: PPUSH
91101: PPUSH
91102: PPUSH
// result := [ ] ;
91103: LD_ADDR_VAR 0 1
91107: PUSH
91108: EMPTY
91109: ST_TO_ADDR
// if campaign_id = 1 then
91110: LD_OWVAR 69
91114: PUSH
91115: LD_INT 1
91117: EQUAL
91118: IFFALSE 94054
// begin case mission_number of 1 :
91120: LD_OWVAR 70
91124: PUSH
91125: LD_INT 1
91127: DOUBLE
91128: EQUAL
91129: IFTRUE 91133
91131: GO 91197
91133: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
91134: LD_ADDR_VAR 0 1
91138: PUSH
91139: LD_INT 2
91141: PUSH
91142: LD_INT 4
91144: PUSH
91145: LD_INT 11
91147: PUSH
91148: LD_INT 12
91150: PUSH
91151: LD_INT 15
91153: PUSH
91154: LD_INT 16
91156: PUSH
91157: LD_INT 22
91159: PUSH
91160: LD_INT 23
91162: PUSH
91163: LD_INT 26
91165: PUSH
91166: EMPTY
91167: LIST
91168: LIST
91169: LIST
91170: LIST
91171: LIST
91172: LIST
91173: LIST
91174: LIST
91175: LIST
91176: PUSH
91177: LD_INT 101
91179: PUSH
91180: LD_INT 102
91182: PUSH
91183: LD_INT 106
91185: PUSH
91186: EMPTY
91187: LIST
91188: LIST
91189: LIST
91190: PUSH
91191: EMPTY
91192: LIST
91193: LIST
91194: ST_TO_ADDR
91195: GO 94054
91197: LD_INT 2
91199: DOUBLE
91200: EQUAL
91201: IFTRUE 91205
91203: GO 91277
91205: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
91206: LD_ADDR_VAR 0 1
91210: PUSH
91211: LD_INT 2
91213: PUSH
91214: LD_INT 4
91216: PUSH
91217: LD_INT 11
91219: PUSH
91220: LD_INT 12
91222: PUSH
91223: LD_INT 15
91225: PUSH
91226: LD_INT 16
91228: PUSH
91229: LD_INT 22
91231: PUSH
91232: LD_INT 23
91234: PUSH
91235: LD_INT 26
91237: PUSH
91238: EMPTY
91239: LIST
91240: LIST
91241: LIST
91242: LIST
91243: LIST
91244: LIST
91245: LIST
91246: LIST
91247: LIST
91248: PUSH
91249: LD_INT 101
91251: PUSH
91252: LD_INT 102
91254: PUSH
91255: LD_INT 105
91257: PUSH
91258: LD_INT 106
91260: PUSH
91261: LD_INT 108
91263: PUSH
91264: EMPTY
91265: LIST
91266: LIST
91267: LIST
91268: LIST
91269: LIST
91270: PUSH
91271: EMPTY
91272: LIST
91273: LIST
91274: ST_TO_ADDR
91275: GO 94054
91277: LD_INT 3
91279: DOUBLE
91280: EQUAL
91281: IFTRUE 91285
91283: GO 91361
91285: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
91286: LD_ADDR_VAR 0 1
91290: PUSH
91291: LD_INT 2
91293: PUSH
91294: LD_INT 4
91296: PUSH
91297: LD_INT 5
91299: PUSH
91300: LD_INT 11
91302: PUSH
91303: LD_INT 12
91305: PUSH
91306: LD_INT 15
91308: PUSH
91309: LD_INT 16
91311: PUSH
91312: LD_INT 22
91314: PUSH
91315: LD_INT 26
91317: PUSH
91318: LD_INT 36
91320: PUSH
91321: EMPTY
91322: LIST
91323: LIST
91324: LIST
91325: LIST
91326: LIST
91327: LIST
91328: LIST
91329: LIST
91330: LIST
91331: LIST
91332: PUSH
91333: LD_INT 101
91335: PUSH
91336: LD_INT 102
91338: PUSH
91339: LD_INT 105
91341: PUSH
91342: LD_INT 106
91344: PUSH
91345: LD_INT 108
91347: PUSH
91348: EMPTY
91349: LIST
91350: LIST
91351: LIST
91352: LIST
91353: LIST
91354: PUSH
91355: EMPTY
91356: LIST
91357: LIST
91358: ST_TO_ADDR
91359: GO 94054
91361: LD_INT 4
91363: DOUBLE
91364: EQUAL
91365: IFTRUE 91369
91367: GO 91453
91369: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
91370: LD_ADDR_VAR 0 1
91374: PUSH
91375: LD_INT 2
91377: PUSH
91378: LD_INT 4
91380: PUSH
91381: LD_INT 5
91383: PUSH
91384: LD_INT 8
91386: PUSH
91387: LD_INT 11
91389: PUSH
91390: LD_INT 12
91392: PUSH
91393: LD_INT 15
91395: PUSH
91396: LD_INT 16
91398: PUSH
91399: LD_INT 22
91401: PUSH
91402: LD_INT 23
91404: PUSH
91405: LD_INT 26
91407: PUSH
91408: LD_INT 36
91410: PUSH
91411: EMPTY
91412: LIST
91413: LIST
91414: LIST
91415: LIST
91416: LIST
91417: LIST
91418: LIST
91419: LIST
91420: LIST
91421: LIST
91422: LIST
91423: LIST
91424: PUSH
91425: LD_INT 101
91427: PUSH
91428: LD_INT 102
91430: PUSH
91431: LD_INT 105
91433: PUSH
91434: LD_INT 106
91436: PUSH
91437: LD_INT 108
91439: PUSH
91440: EMPTY
91441: LIST
91442: LIST
91443: LIST
91444: LIST
91445: LIST
91446: PUSH
91447: EMPTY
91448: LIST
91449: LIST
91450: ST_TO_ADDR
91451: GO 94054
91453: LD_INT 5
91455: DOUBLE
91456: EQUAL
91457: IFTRUE 91461
91459: GO 91561
91461: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
91462: LD_ADDR_VAR 0 1
91466: PUSH
91467: LD_INT 2
91469: PUSH
91470: LD_INT 4
91472: PUSH
91473: LD_INT 5
91475: PUSH
91476: LD_INT 6
91478: PUSH
91479: LD_INT 8
91481: PUSH
91482: LD_INT 11
91484: PUSH
91485: LD_INT 12
91487: PUSH
91488: LD_INT 15
91490: PUSH
91491: LD_INT 16
91493: PUSH
91494: LD_INT 22
91496: PUSH
91497: LD_INT 23
91499: PUSH
91500: LD_INT 25
91502: PUSH
91503: LD_INT 26
91505: PUSH
91506: LD_INT 36
91508: PUSH
91509: EMPTY
91510: LIST
91511: LIST
91512: LIST
91513: LIST
91514: LIST
91515: LIST
91516: LIST
91517: LIST
91518: LIST
91519: LIST
91520: LIST
91521: LIST
91522: LIST
91523: LIST
91524: PUSH
91525: LD_INT 101
91527: PUSH
91528: LD_INT 102
91530: PUSH
91531: LD_INT 105
91533: PUSH
91534: LD_INT 106
91536: PUSH
91537: LD_INT 108
91539: PUSH
91540: LD_INT 109
91542: PUSH
91543: LD_INT 112
91545: PUSH
91546: EMPTY
91547: LIST
91548: LIST
91549: LIST
91550: LIST
91551: LIST
91552: LIST
91553: LIST
91554: PUSH
91555: EMPTY
91556: LIST
91557: LIST
91558: ST_TO_ADDR
91559: GO 94054
91561: LD_INT 6
91563: DOUBLE
91564: EQUAL
91565: IFTRUE 91569
91567: GO 91689
91569: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
91570: LD_ADDR_VAR 0 1
91574: PUSH
91575: LD_INT 2
91577: PUSH
91578: LD_INT 4
91580: PUSH
91581: LD_INT 5
91583: PUSH
91584: LD_INT 6
91586: PUSH
91587: LD_INT 8
91589: PUSH
91590: LD_INT 11
91592: PUSH
91593: LD_INT 12
91595: PUSH
91596: LD_INT 15
91598: PUSH
91599: LD_INT 16
91601: PUSH
91602: LD_INT 20
91604: PUSH
91605: LD_INT 21
91607: PUSH
91608: LD_INT 22
91610: PUSH
91611: LD_INT 23
91613: PUSH
91614: LD_INT 25
91616: PUSH
91617: LD_INT 26
91619: PUSH
91620: LD_INT 30
91622: PUSH
91623: LD_INT 31
91625: PUSH
91626: LD_INT 32
91628: PUSH
91629: LD_INT 36
91631: PUSH
91632: EMPTY
91633: LIST
91634: LIST
91635: LIST
91636: LIST
91637: LIST
91638: LIST
91639: LIST
91640: LIST
91641: LIST
91642: LIST
91643: LIST
91644: LIST
91645: LIST
91646: LIST
91647: LIST
91648: LIST
91649: LIST
91650: LIST
91651: LIST
91652: PUSH
91653: LD_INT 101
91655: PUSH
91656: LD_INT 102
91658: PUSH
91659: LD_INT 105
91661: PUSH
91662: LD_INT 106
91664: PUSH
91665: LD_INT 108
91667: PUSH
91668: LD_INT 109
91670: PUSH
91671: LD_INT 112
91673: PUSH
91674: EMPTY
91675: LIST
91676: LIST
91677: LIST
91678: LIST
91679: LIST
91680: LIST
91681: LIST
91682: PUSH
91683: EMPTY
91684: LIST
91685: LIST
91686: ST_TO_ADDR
91687: GO 94054
91689: LD_INT 7
91691: DOUBLE
91692: EQUAL
91693: IFTRUE 91697
91695: GO 91797
91697: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
91698: LD_ADDR_VAR 0 1
91702: PUSH
91703: LD_INT 2
91705: PUSH
91706: LD_INT 4
91708: PUSH
91709: LD_INT 5
91711: PUSH
91712: LD_INT 7
91714: PUSH
91715: LD_INT 11
91717: PUSH
91718: LD_INT 12
91720: PUSH
91721: LD_INT 15
91723: PUSH
91724: LD_INT 16
91726: PUSH
91727: LD_INT 20
91729: PUSH
91730: LD_INT 21
91732: PUSH
91733: LD_INT 22
91735: PUSH
91736: LD_INT 23
91738: PUSH
91739: LD_INT 25
91741: PUSH
91742: LD_INT 26
91744: PUSH
91745: EMPTY
91746: LIST
91747: LIST
91748: LIST
91749: LIST
91750: LIST
91751: LIST
91752: LIST
91753: LIST
91754: LIST
91755: LIST
91756: LIST
91757: LIST
91758: LIST
91759: LIST
91760: PUSH
91761: LD_INT 101
91763: PUSH
91764: LD_INT 102
91766: PUSH
91767: LD_INT 103
91769: PUSH
91770: LD_INT 105
91772: PUSH
91773: LD_INT 106
91775: PUSH
91776: LD_INT 108
91778: PUSH
91779: LD_INT 112
91781: PUSH
91782: EMPTY
91783: LIST
91784: LIST
91785: LIST
91786: LIST
91787: LIST
91788: LIST
91789: LIST
91790: PUSH
91791: EMPTY
91792: LIST
91793: LIST
91794: ST_TO_ADDR
91795: GO 94054
91797: LD_INT 8
91799: DOUBLE
91800: EQUAL
91801: IFTRUE 91805
91803: GO 91933
91805: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
91806: LD_ADDR_VAR 0 1
91810: PUSH
91811: LD_INT 2
91813: PUSH
91814: LD_INT 4
91816: PUSH
91817: LD_INT 5
91819: PUSH
91820: LD_INT 6
91822: PUSH
91823: LD_INT 7
91825: PUSH
91826: LD_INT 8
91828: PUSH
91829: LD_INT 11
91831: PUSH
91832: LD_INT 12
91834: PUSH
91835: LD_INT 15
91837: PUSH
91838: LD_INT 16
91840: PUSH
91841: LD_INT 20
91843: PUSH
91844: LD_INT 21
91846: PUSH
91847: LD_INT 22
91849: PUSH
91850: LD_INT 23
91852: PUSH
91853: LD_INT 25
91855: PUSH
91856: LD_INT 26
91858: PUSH
91859: LD_INT 30
91861: PUSH
91862: LD_INT 31
91864: PUSH
91865: LD_INT 32
91867: PUSH
91868: LD_INT 36
91870: PUSH
91871: EMPTY
91872: LIST
91873: LIST
91874: LIST
91875: LIST
91876: LIST
91877: LIST
91878: LIST
91879: LIST
91880: LIST
91881: LIST
91882: LIST
91883: LIST
91884: LIST
91885: LIST
91886: LIST
91887: LIST
91888: LIST
91889: LIST
91890: LIST
91891: LIST
91892: PUSH
91893: LD_INT 101
91895: PUSH
91896: LD_INT 102
91898: PUSH
91899: LD_INT 103
91901: PUSH
91902: LD_INT 105
91904: PUSH
91905: LD_INT 106
91907: PUSH
91908: LD_INT 108
91910: PUSH
91911: LD_INT 109
91913: PUSH
91914: LD_INT 112
91916: PUSH
91917: EMPTY
91918: LIST
91919: LIST
91920: LIST
91921: LIST
91922: LIST
91923: LIST
91924: LIST
91925: LIST
91926: PUSH
91927: EMPTY
91928: LIST
91929: LIST
91930: ST_TO_ADDR
91931: GO 94054
91933: LD_INT 9
91935: DOUBLE
91936: EQUAL
91937: IFTRUE 91941
91939: GO 92077
91941: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
91942: LD_ADDR_VAR 0 1
91946: PUSH
91947: LD_INT 2
91949: PUSH
91950: LD_INT 4
91952: PUSH
91953: LD_INT 5
91955: PUSH
91956: LD_INT 6
91958: PUSH
91959: LD_INT 7
91961: PUSH
91962: LD_INT 8
91964: PUSH
91965: LD_INT 11
91967: PUSH
91968: LD_INT 12
91970: PUSH
91971: LD_INT 15
91973: PUSH
91974: LD_INT 16
91976: PUSH
91977: LD_INT 20
91979: PUSH
91980: LD_INT 21
91982: PUSH
91983: LD_INT 22
91985: PUSH
91986: LD_INT 23
91988: PUSH
91989: LD_INT 25
91991: PUSH
91992: LD_INT 26
91994: PUSH
91995: LD_INT 28
91997: PUSH
91998: LD_INT 30
92000: PUSH
92001: LD_INT 31
92003: PUSH
92004: LD_INT 32
92006: PUSH
92007: LD_INT 36
92009: PUSH
92010: EMPTY
92011: LIST
92012: LIST
92013: LIST
92014: LIST
92015: LIST
92016: LIST
92017: LIST
92018: LIST
92019: LIST
92020: LIST
92021: LIST
92022: LIST
92023: LIST
92024: LIST
92025: LIST
92026: LIST
92027: LIST
92028: LIST
92029: LIST
92030: LIST
92031: LIST
92032: PUSH
92033: LD_INT 101
92035: PUSH
92036: LD_INT 102
92038: PUSH
92039: LD_INT 103
92041: PUSH
92042: LD_INT 105
92044: PUSH
92045: LD_INT 106
92047: PUSH
92048: LD_INT 108
92050: PUSH
92051: LD_INT 109
92053: PUSH
92054: LD_INT 112
92056: PUSH
92057: LD_INT 114
92059: PUSH
92060: EMPTY
92061: LIST
92062: LIST
92063: LIST
92064: LIST
92065: LIST
92066: LIST
92067: LIST
92068: LIST
92069: LIST
92070: PUSH
92071: EMPTY
92072: LIST
92073: LIST
92074: ST_TO_ADDR
92075: GO 94054
92077: LD_INT 10
92079: DOUBLE
92080: EQUAL
92081: IFTRUE 92085
92083: GO 92269
92085: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
92086: LD_ADDR_VAR 0 1
92090: PUSH
92091: LD_INT 2
92093: PUSH
92094: LD_INT 4
92096: PUSH
92097: LD_INT 5
92099: PUSH
92100: LD_INT 6
92102: PUSH
92103: LD_INT 7
92105: PUSH
92106: LD_INT 8
92108: PUSH
92109: LD_INT 9
92111: PUSH
92112: LD_INT 10
92114: PUSH
92115: LD_INT 11
92117: PUSH
92118: LD_INT 12
92120: PUSH
92121: LD_INT 13
92123: PUSH
92124: LD_INT 14
92126: PUSH
92127: LD_INT 15
92129: PUSH
92130: LD_INT 16
92132: PUSH
92133: LD_INT 17
92135: PUSH
92136: LD_INT 18
92138: PUSH
92139: LD_INT 19
92141: PUSH
92142: LD_INT 20
92144: PUSH
92145: LD_INT 21
92147: PUSH
92148: LD_INT 22
92150: PUSH
92151: LD_INT 23
92153: PUSH
92154: LD_INT 24
92156: PUSH
92157: LD_INT 25
92159: PUSH
92160: LD_INT 26
92162: PUSH
92163: LD_INT 28
92165: PUSH
92166: LD_INT 30
92168: PUSH
92169: LD_INT 31
92171: PUSH
92172: LD_INT 32
92174: PUSH
92175: LD_INT 36
92177: PUSH
92178: EMPTY
92179: LIST
92180: LIST
92181: LIST
92182: LIST
92183: LIST
92184: LIST
92185: LIST
92186: LIST
92187: LIST
92188: LIST
92189: LIST
92190: LIST
92191: LIST
92192: LIST
92193: LIST
92194: LIST
92195: LIST
92196: LIST
92197: LIST
92198: LIST
92199: LIST
92200: LIST
92201: LIST
92202: LIST
92203: LIST
92204: LIST
92205: LIST
92206: LIST
92207: LIST
92208: PUSH
92209: LD_INT 101
92211: PUSH
92212: LD_INT 102
92214: PUSH
92215: LD_INT 103
92217: PUSH
92218: LD_INT 104
92220: PUSH
92221: LD_INT 105
92223: PUSH
92224: LD_INT 106
92226: PUSH
92227: LD_INT 107
92229: PUSH
92230: LD_INT 108
92232: PUSH
92233: LD_INT 109
92235: PUSH
92236: LD_INT 110
92238: PUSH
92239: LD_INT 111
92241: PUSH
92242: LD_INT 112
92244: PUSH
92245: LD_INT 114
92247: PUSH
92248: EMPTY
92249: LIST
92250: LIST
92251: LIST
92252: LIST
92253: LIST
92254: LIST
92255: LIST
92256: LIST
92257: LIST
92258: LIST
92259: LIST
92260: LIST
92261: LIST
92262: PUSH
92263: EMPTY
92264: LIST
92265: LIST
92266: ST_TO_ADDR
92267: GO 94054
92269: LD_INT 11
92271: DOUBLE
92272: EQUAL
92273: IFTRUE 92277
92275: GO 92469
92277: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
92278: LD_ADDR_VAR 0 1
92282: PUSH
92283: LD_INT 2
92285: PUSH
92286: LD_INT 3
92288: PUSH
92289: LD_INT 4
92291: PUSH
92292: LD_INT 5
92294: PUSH
92295: LD_INT 6
92297: PUSH
92298: LD_INT 7
92300: PUSH
92301: LD_INT 8
92303: PUSH
92304: LD_INT 9
92306: PUSH
92307: LD_INT 10
92309: PUSH
92310: LD_INT 11
92312: PUSH
92313: LD_INT 12
92315: PUSH
92316: LD_INT 13
92318: PUSH
92319: LD_INT 14
92321: PUSH
92322: LD_INT 15
92324: PUSH
92325: LD_INT 16
92327: PUSH
92328: LD_INT 17
92330: PUSH
92331: LD_INT 18
92333: PUSH
92334: LD_INT 19
92336: PUSH
92337: LD_INT 20
92339: PUSH
92340: LD_INT 21
92342: PUSH
92343: LD_INT 22
92345: PUSH
92346: LD_INT 23
92348: PUSH
92349: LD_INT 24
92351: PUSH
92352: LD_INT 25
92354: PUSH
92355: LD_INT 26
92357: PUSH
92358: LD_INT 28
92360: PUSH
92361: LD_INT 30
92363: PUSH
92364: LD_INT 31
92366: PUSH
92367: LD_INT 32
92369: PUSH
92370: LD_INT 34
92372: PUSH
92373: LD_INT 36
92375: PUSH
92376: EMPTY
92377: LIST
92378: LIST
92379: LIST
92380: LIST
92381: LIST
92382: LIST
92383: LIST
92384: LIST
92385: LIST
92386: LIST
92387: LIST
92388: LIST
92389: LIST
92390: LIST
92391: LIST
92392: LIST
92393: LIST
92394: LIST
92395: LIST
92396: LIST
92397: LIST
92398: LIST
92399: LIST
92400: LIST
92401: LIST
92402: LIST
92403: LIST
92404: LIST
92405: LIST
92406: LIST
92407: LIST
92408: PUSH
92409: LD_INT 101
92411: PUSH
92412: LD_INT 102
92414: PUSH
92415: LD_INT 103
92417: PUSH
92418: LD_INT 104
92420: PUSH
92421: LD_INT 105
92423: PUSH
92424: LD_INT 106
92426: PUSH
92427: LD_INT 107
92429: PUSH
92430: LD_INT 108
92432: PUSH
92433: LD_INT 109
92435: PUSH
92436: LD_INT 110
92438: PUSH
92439: LD_INT 111
92441: PUSH
92442: LD_INT 112
92444: PUSH
92445: LD_INT 114
92447: PUSH
92448: EMPTY
92449: LIST
92450: LIST
92451: LIST
92452: LIST
92453: LIST
92454: LIST
92455: LIST
92456: LIST
92457: LIST
92458: LIST
92459: LIST
92460: LIST
92461: LIST
92462: PUSH
92463: EMPTY
92464: LIST
92465: LIST
92466: ST_TO_ADDR
92467: GO 94054
92469: LD_INT 12
92471: DOUBLE
92472: EQUAL
92473: IFTRUE 92477
92475: GO 92685
92477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
92478: LD_ADDR_VAR 0 1
92482: PUSH
92483: LD_INT 1
92485: PUSH
92486: LD_INT 2
92488: PUSH
92489: LD_INT 3
92491: PUSH
92492: LD_INT 4
92494: PUSH
92495: LD_INT 5
92497: PUSH
92498: LD_INT 6
92500: PUSH
92501: LD_INT 7
92503: PUSH
92504: LD_INT 8
92506: PUSH
92507: LD_INT 9
92509: PUSH
92510: LD_INT 10
92512: PUSH
92513: LD_INT 11
92515: PUSH
92516: LD_INT 12
92518: PUSH
92519: LD_INT 13
92521: PUSH
92522: LD_INT 14
92524: PUSH
92525: LD_INT 15
92527: PUSH
92528: LD_INT 16
92530: PUSH
92531: LD_INT 17
92533: PUSH
92534: LD_INT 18
92536: PUSH
92537: LD_INT 19
92539: PUSH
92540: LD_INT 20
92542: PUSH
92543: LD_INT 21
92545: PUSH
92546: LD_INT 22
92548: PUSH
92549: LD_INT 23
92551: PUSH
92552: LD_INT 24
92554: PUSH
92555: LD_INT 25
92557: PUSH
92558: LD_INT 26
92560: PUSH
92561: LD_INT 27
92563: PUSH
92564: LD_INT 28
92566: PUSH
92567: LD_INT 30
92569: PUSH
92570: LD_INT 31
92572: PUSH
92573: LD_INT 32
92575: PUSH
92576: LD_INT 33
92578: PUSH
92579: LD_INT 34
92581: PUSH
92582: LD_INT 36
92584: PUSH
92585: EMPTY
92586: LIST
92587: LIST
92588: LIST
92589: LIST
92590: LIST
92591: LIST
92592: LIST
92593: LIST
92594: LIST
92595: LIST
92596: LIST
92597: LIST
92598: LIST
92599: LIST
92600: LIST
92601: LIST
92602: LIST
92603: LIST
92604: LIST
92605: LIST
92606: LIST
92607: LIST
92608: LIST
92609: LIST
92610: LIST
92611: LIST
92612: LIST
92613: LIST
92614: LIST
92615: LIST
92616: LIST
92617: LIST
92618: LIST
92619: LIST
92620: PUSH
92621: LD_INT 101
92623: PUSH
92624: LD_INT 102
92626: PUSH
92627: LD_INT 103
92629: PUSH
92630: LD_INT 104
92632: PUSH
92633: LD_INT 105
92635: PUSH
92636: LD_INT 106
92638: PUSH
92639: LD_INT 107
92641: PUSH
92642: LD_INT 108
92644: PUSH
92645: LD_INT 109
92647: PUSH
92648: LD_INT 110
92650: PUSH
92651: LD_INT 111
92653: PUSH
92654: LD_INT 112
92656: PUSH
92657: LD_INT 113
92659: PUSH
92660: LD_INT 114
92662: PUSH
92663: EMPTY
92664: LIST
92665: LIST
92666: LIST
92667: LIST
92668: LIST
92669: LIST
92670: LIST
92671: LIST
92672: LIST
92673: LIST
92674: LIST
92675: LIST
92676: LIST
92677: LIST
92678: PUSH
92679: EMPTY
92680: LIST
92681: LIST
92682: ST_TO_ADDR
92683: GO 94054
92685: LD_INT 13
92687: DOUBLE
92688: EQUAL
92689: IFTRUE 92693
92691: GO 92889
92693: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
92694: LD_ADDR_VAR 0 1
92698: PUSH
92699: LD_INT 1
92701: PUSH
92702: LD_INT 2
92704: PUSH
92705: LD_INT 3
92707: PUSH
92708: LD_INT 4
92710: PUSH
92711: LD_INT 5
92713: PUSH
92714: LD_INT 8
92716: PUSH
92717: LD_INT 9
92719: PUSH
92720: LD_INT 10
92722: PUSH
92723: LD_INT 11
92725: PUSH
92726: LD_INT 12
92728: PUSH
92729: LD_INT 14
92731: PUSH
92732: LD_INT 15
92734: PUSH
92735: LD_INT 16
92737: PUSH
92738: LD_INT 17
92740: PUSH
92741: LD_INT 18
92743: PUSH
92744: LD_INT 19
92746: PUSH
92747: LD_INT 20
92749: PUSH
92750: LD_INT 21
92752: PUSH
92753: LD_INT 22
92755: PUSH
92756: LD_INT 23
92758: PUSH
92759: LD_INT 24
92761: PUSH
92762: LD_INT 25
92764: PUSH
92765: LD_INT 26
92767: PUSH
92768: LD_INT 27
92770: PUSH
92771: LD_INT 28
92773: PUSH
92774: LD_INT 30
92776: PUSH
92777: LD_INT 31
92779: PUSH
92780: LD_INT 32
92782: PUSH
92783: LD_INT 33
92785: PUSH
92786: LD_INT 34
92788: PUSH
92789: LD_INT 36
92791: PUSH
92792: EMPTY
92793: LIST
92794: LIST
92795: LIST
92796: LIST
92797: LIST
92798: LIST
92799: LIST
92800: LIST
92801: LIST
92802: LIST
92803: LIST
92804: LIST
92805: LIST
92806: LIST
92807: LIST
92808: LIST
92809: LIST
92810: LIST
92811: LIST
92812: LIST
92813: LIST
92814: LIST
92815: LIST
92816: LIST
92817: LIST
92818: LIST
92819: LIST
92820: LIST
92821: LIST
92822: LIST
92823: LIST
92824: PUSH
92825: LD_INT 101
92827: PUSH
92828: LD_INT 102
92830: PUSH
92831: LD_INT 103
92833: PUSH
92834: LD_INT 104
92836: PUSH
92837: LD_INT 105
92839: PUSH
92840: LD_INT 106
92842: PUSH
92843: LD_INT 107
92845: PUSH
92846: LD_INT 108
92848: PUSH
92849: LD_INT 109
92851: PUSH
92852: LD_INT 110
92854: PUSH
92855: LD_INT 111
92857: PUSH
92858: LD_INT 112
92860: PUSH
92861: LD_INT 113
92863: PUSH
92864: LD_INT 114
92866: PUSH
92867: EMPTY
92868: LIST
92869: LIST
92870: LIST
92871: LIST
92872: LIST
92873: LIST
92874: LIST
92875: LIST
92876: LIST
92877: LIST
92878: LIST
92879: LIST
92880: LIST
92881: LIST
92882: PUSH
92883: EMPTY
92884: LIST
92885: LIST
92886: ST_TO_ADDR
92887: GO 94054
92889: LD_INT 14
92891: DOUBLE
92892: EQUAL
92893: IFTRUE 92897
92895: GO 93109
92897: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
92898: LD_ADDR_VAR 0 1
92902: PUSH
92903: LD_INT 1
92905: PUSH
92906: LD_INT 2
92908: PUSH
92909: LD_INT 3
92911: PUSH
92912: LD_INT 4
92914: PUSH
92915: LD_INT 5
92917: PUSH
92918: LD_INT 6
92920: PUSH
92921: LD_INT 7
92923: PUSH
92924: LD_INT 8
92926: PUSH
92927: LD_INT 9
92929: PUSH
92930: LD_INT 10
92932: PUSH
92933: LD_INT 11
92935: PUSH
92936: LD_INT 12
92938: PUSH
92939: LD_INT 13
92941: PUSH
92942: LD_INT 14
92944: PUSH
92945: LD_INT 15
92947: PUSH
92948: LD_INT 16
92950: PUSH
92951: LD_INT 17
92953: PUSH
92954: LD_INT 18
92956: PUSH
92957: LD_INT 19
92959: PUSH
92960: LD_INT 20
92962: PUSH
92963: LD_INT 21
92965: PUSH
92966: LD_INT 22
92968: PUSH
92969: LD_INT 23
92971: PUSH
92972: LD_INT 24
92974: PUSH
92975: LD_INT 25
92977: PUSH
92978: LD_INT 26
92980: PUSH
92981: LD_INT 27
92983: PUSH
92984: LD_INT 28
92986: PUSH
92987: LD_INT 29
92989: PUSH
92990: LD_INT 30
92992: PUSH
92993: LD_INT 31
92995: PUSH
92996: LD_INT 32
92998: PUSH
92999: LD_INT 33
93001: PUSH
93002: LD_INT 34
93004: PUSH
93005: LD_INT 36
93007: PUSH
93008: EMPTY
93009: LIST
93010: LIST
93011: LIST
93012: LIST
93013: LIST
93014: LIST
93015: LIST
93016: LIST
93017: LIST
93018: LIST
93019: LIST
93020: LIST
93021: LIST
93022: LIST
93023: LIST
93024: LIST
93025: LIST
93026: LIST
93027: LIST
93028: LIST
93029: LIST
93030: LIST
93031: LIST
93032: LIST
93033: LIST
93034: LIST
93035: LIST
93036: LIST
93037: LIST
93038: LIST
93039: LIST
93040: LIST
93041: LIST
93042: LIST
93043: LIST
93044: PUSH
93045: LD_INT 101
93047: PUSH
93048: LD_INT 102
93050: PUSH
93051: LD_INT 103
93053: PUSH
93054: LD_INT 104
93056: PUSH
93057: LD_INT 105
93059: PUSH
93060: LD_INT 106
93062: PUSH
93063: LD_INT 107
93065: PUSH
93066: LD_INT 108
93068: PUSH
93069: LD_INT 109
93071: PUSH
93072: LD_INT 110
93074: PUSH
93075: LD_INT 111
93077: PUSH
93078: LD_INT 112
93080: PUSH
93081: LD_INT 113
93083: PUSH
93084: LD_INT 114
93086: PUSH
93087: EMPTY
93088: LIST
93089: LIST
93090: LIST
93091: LIST
93092: LIST
93093: LIST
93094: LIST
93095: LIST
93096: LIST
93097: LIST
93098: LIST
93099: LIST
93100: LIST
93101: LIST
93102: PUSH
93103: EMPTY
93104: LIST
93105: LIST
93106: ST_TO_ADDR
93107: GO 94054
93109: LD_INT 15
93111: DOUBLE
93112: EQUAL
93113: IFTRUE 93117
93115: GO 93329
93117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
93118: LD_ADDR_VAR 0 1
93122: PUSH
93123: LD_INT 1
93125: PUSH
93126: LD_INT 2
93128: PUSH
93129: LD_INT 3
93131: PUSH
93132: LD_INT 4
93134: PUSH
93135: LD_INT 5
93137: PUSH
93138: LD_INT 6
93140: PUSH
93141: LD_INT 7
93143: PUSH
93144: LD_INT 8
93146: PUSH
93147: LD_INT 9
93149: PUSH
93150: LD_INT 10
93152: PUSH
93153: LD_INT 11
93155: PUSH
93156: LD_INT 12
93158: PUSH
93159: LD_INT 13
93161: PUSH
93162: LD_INT 14
93164: PUSH
93165: LD_INT 15
93167: PUSH
93168: LD_INT 16
93170: PUSH
93171: LD_INT 17
93173: PUSH
93174: LD_INT 18
93176: PUSH
93177: LD_INT 19
93179: PUSH
93180: LD_INT 20
93182: PUSH
93183: LD_INT 21
93185: PUSH
93186: LD_INT 22
93188: PUSH
93189: LD_INT 23
93191: PUSH
93192: LD_INT 24
93194: PUSH
93195: LD_INT 25
93197: PUSH
93198: LD_INT 26
93200: PUSH
93201: LD_INT 27
93203: PUSH
93204: LD_INT 28
93206: PUSH
93207: LD_INT 29
93209: PUSH
93210: LD_INT 30
93212: PUSH
93213: LD_INT 31
93215: PUSH
93216: LD_INT 32
93218: PUSH
93219: LD_INT 33
93221: PUSH
93222: LD_INT 34
93224: PUSH
93225: LD_INT 36
93227: PUSH
93228: EMPTY
93229: LIST
93230: LIST
93231: LIST
93232: LIST
93233: LIST
93234: LIST
93235: LIST
93236: LIST
93237: LIST
93238: LIST
93239: LIST
93240: LIST
93241: LIST
93242: LIST
93243: LIST
93244: LIST
93245: LIST
93246: LIST
93247: LIST
93248: LIST
93249: LIST
93250: LIST
93251: LIST
93252: LIST
93253: LIST
93254: LIST
93255: LIST
93256: LIST
93257: LIST
93258: LIST
93259: LIST
93260: LIST
93261: LIST
93262: LIST
93263: LIST
93264: PUSH
93265: LD_INT 101
93267: PUSH
93268: LD_INT 102
93270: PUSH
93271: LD_INT 103
93273: PUSH
93274: LD_INT 104
93276: PUSH
93277: LD_INT 105
93279: PUSH
93280: LD_INT 106
93282: PUSH
93283: LD_INT 107
93285: PUSH
93286: LD_INT 108
93288: PUSH
93289: LD_INT 109
93291: PUSH
93292: LD_INT 110
93294: PUSH
93295: LD_INT 111
93297: PUSH
93298: LD_INT 112
93300: PUSH
93301: LD_INT 113
93303: PUSH
93304: LD_INT 114
93306: PUSH
93307: EMPTY
93308: LIST
93309: LIST
93310: LIST
93311: LIST
93312: LIST
93313: LIST
93314: LIST
93315: LIST
93316: LIST
93317: LIST
93318: LIST
93319: LIST
93320: LIST
93321: LIST
93322: PUSH
93323: EMPTY
93324: LIST
93325: LIST
93326: ST_TO_ADDR
93327: GO 94054
93329: LD_INT 16
93331: DOUBLE
93332: EQUAL
93333: IFTRUE 93337
93335: GO 93461
93337: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
93338: LD_ADDR_VAR 0 1
93342: PUSH
93343: LD_INT 2
93345: PUSH
93346: LD_INT 4
93348: PUSH
93349: LD_INT 5
93351: PUSH
93352: LD_INT 7
93354: PUSH
93355: LD_INT 11
93357: PUSH
93358: LD_INT 12
93360: PUSH
93361: LD_INT 15
93363: PUSH
93364: LD_INT 16
93366: PUSH
93367: LD_INT 20
93369: PUSH
93370: LD_INT 21
93372: PUSH
93373: LD_INT 22
93375: PUSH
93376: LD_INT 23
93378: PUSH
93379: LD_INT 25
93381: PUSH
93382: LD_INT 26
93384: PUSH
93385: LD_INT 30
93387: PUSH
93388: LD_INT 31
93390: PUSH
93391: LD_INT 32
93393: PUSH
93394: LD_INT 33
93396: PUSH
93397: LD_INT 34
93399: PUSH
93400: EMPTY
93401: LIST
93402: LIST
93403: LIST
93404: LIST
93405: LIST
93406: LIST
93407: LIST
93408: LIST
93409: LIST
93410: LIST
93411: LIST
93412: LIST
93413: LIST
93414: LIST
93415: LIST
93416: LIST
93417: LIST
93418: LIST
93419: LIST
93420: PUSH
93421: LD_INT 101
93423: PUSH
93424: LD_INT 102
93426: PUSH
93427: LD_INT 103
93429: PUSH
93430: LD_INT 106
93432: PUSH
93433: LD_INT 108
93435: PUSH
93436: LD_INT 112
93438: PUSH
93439: LD_INT 113
93441: PUSH
93442: LD_INT 114
93444: PUSH
93445: EMPTY
93446: LIST
93447: LIST
93448: LIST
93449: LIST
93450: LIST
93451: LIST
93452: LIST
93453: LIST
93454: PUSH
93455: EMPTY
93456: LIST
93457: LIST
93458: ST_TO_ADDR
93459: GO 94054
93461: LD_INT 17
93463: DOUBLE
93464: EQUAL
93465: IFTRUE 93469
93467: GO 93681
93469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
93470: LD_ADDR_VAR 0 1
93474: PUSH
93475: LD_INT 1
93477: PUSH
93478: LD_INT 2
93480: PUSH
93481: LD_INT 3
93483: PUSH
93484: LD_INT 4
93486: PUSH
93487: LD_INT 5
93489: PUSH
93490: LD_INT 6
93492: PUSH
93493: LD_INT 7
93495: PUSH
93496: LD_INT 8
93498: PUSH
93499: LD_INT 9
93501: PUSH
93502: LD_INT 10
93504: PUSH
93505: LD_INT 11
93507: PUSH
93508: LD_INT 12
93510: PUSH
93511: LD_INT 13
93513: PUSH
93514: LD_INT 14
93516: PUSH
93517: LD_INT 15
93519: PUSH
93520: LD_INT 16
93522: PUSH
93523: LD_INT 17
93525: PUSH
93526: LD_INT 18
93528: PUSH
93529: LD_INT 19
93531: PUSH
93532: LD_INT 20
93534: PUSH
93535: LD_INT 21
93537: PUSH
93538: LD_INT 22
93540: PUSH
93541: LD_INT 23
93543: PUSH
93544: LD_INT 24
93546: PUSH
93547: LD_INT 25
93549: PUSH
93550: LD_INT 26
93552: PUSH
93553: LD_INT 27
93555: PUSH
93556: LD_INT 28
93558: PUSH
93559: LD_INT 29
93561: PUSH
93562: LD_INT 30
93564: PUSH
93565: LD_INT 31
93567: PUSH
93568: LD_INT 32
93570: PUSH
93571: LD_INT 33
93573: PUSH
93574: LD_INT 34
93576: PUSH
93577: LD_INT 36
93579: PUSH
93580: EMPTY
93581: LIST
93582: LIST
93583: LIST
93584: LIST
93585: LIST
93586: LIST
93587: LIST
93588: LIST
93589: LIST
93590: LIST
93591: LIST
93592: LIST
93593: LIST
93594: LIST
93595: LIST
93596: LIST
93597: LIST
93598: LIST
93599: LIST
93600: LIST
93601: LIST
93602: LIST
93603: LIST
93604: LIST
93605: LIST
93606: LIST
93607: LIST
93608: LIST
93609: LIST
93610: LIST
93611: LIST
93612: LIST
93613: LIST
93614: LIST
93615: LIST
93616: PUSH
93617: LD_INT 101
93619: PUSH
93620: LD_INT 102
93622: PUSH
93623: LD_INT 103
93625: PUSH
93626: LD_INT 104
93628: PUSH
93629: LD_INT 105
93631: PUSH
93632: LD_INT 106
93634: PUSH
93635: LD_INT 107
93637: PUSH
93638: LD_INT 108
93640: PUSH
93641: LD_INT 109
93643: PUSH
93644: LD_INT 110
93646: PUSH
93647: LD_INT 111
93649: PUSH
93650: LD_INT 112
93652: PUSH
93653: LD_INT 113
93655: PUSH
93656: LD_INT 114
93658: PUSH
93659: EMPTY
93660: LIST
93661: LIST
93662: LIST
93663: LIST
93664: LIST
93665: LIST
93666: LIST
93667: LIST
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: LIST
93673: LIST
93674: PUSH
93675: EMPTY
93676: LIST
93677: LIST
93678: ST_TO_ADDR
93679: GO 94054
93681: LD_INT 18
93683: DOUBLE
93684: EQUAL
93685: IFTRUE 93689
93687: GO 93825
93689: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
93690: LD_ADDR_VAR 0 1
93694: PUSH
93695: LD_INT 2
93697: PUSH
93698: LD_INT 4
93700: PUSH
93701: LD_INT 5
93703: PUSH
93704: LD_INT 7
93706: PUSH
93707: LD_INT 11
93709: PUSH
93710: LD_INT 12
93712: PUSH
93713: LD_INT 15
93715: PUSH
93716: LD_INT 16
93718: PUSH
93719: LD_INT 20
93721: PUSH
93722: LD_INT 21
93724: PUSH
93725: LD_INT 22
93727: PUSH
93728: LD_INT 23
93730: PUSH
93731: LD_INT 25
93733: PUSH
93734: LD_INT 26
93736: PUSH
93737: LD_INT 30
93739: PUSH
93740: LD_INT 31
93742: PUSH
93743: LD_INT 32
93745: PUSH
93746: LD_INT 33
93748: PUSH
93749: LD_INT 34
93751: PUSH
93752: LD_INT 35
93754: PUSH
93755: LD_INT 36
93757: PUSH
93758: EMPTY
93759: LIST
93760: LIST
93761: LIST
93762: LIST
93763: LIST
93764: LIST
93765: LIST
93766: LIST
93767: LIST
93768: LIST
93769: LIST
93770: LIST
93771: LIST
93772: LIST
93773: LIST
93774: LIST
93775: LIST
93776: LIST
93777: LIST
93778: LIST
93779: LIST
93780: PUSH
93781: LD_INT 101
93783: PUSH
93784: LD_INT 102
93786: PUSH
93787: LD_INT 103
93789: PUSH
93790: LD_INT 106
93792: PUSH
93793: LD_INT 108
93795: PUSH
93796: LD_INT 112
93798: PUSH
93799: LD_INT 113
93801: PUSH
93802: LD_INT 114
93804: PUSH
93805: LD_INT 115
93807: PUSH
93808: EMPTY
93809: LIST
93810: LIST
93811: LIST
93812: LIST
93813: LIST
93814: LIST
93815: LIST
93816: LIST
93817: LIST
93818: PUSH
93819: EMPTY
93820: LIST
93821: LIST
93822: ST_TO_ADDR
93823: GO 94054
93825: LD_INT 19
93827: DOUBLE
93828: EQUAL
93829: IFTRUE 93833
93831: GO 94053
93833: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
93834: LD_ADDR_VAR 0 1
93838: PUSH
93839: LD_INT 1
93841: PUSH
93842: LD_INT 2
93844: PUSH
93845: LD_INT 3
93847: PUSH
93848: LD_INT 4
93850: PUSH
93851: LD_INT 5
93853: PUSH
93854: LD_INT 6
93856: PUSH
93857: LD_INT 7
93859: PUSH
93860: LD_INT 8
93862: PUSH
93863: LD_INT 9
93865: PUSH
93866: LD_INT 10
93868: PUSH
93869: LD_INT 11
93871: PUSH
93872: LD_INT 12
93874: PUSH
93875: LD_INT 13
93877: PUSH
93878: LD_INT 14
93880: PUSH
93881: LD_INT 15
93883: PUSH
93884: LD_INT 16
93886: PUSH
93887: LD_INT 17
93889: PUSH
93890: LD_INT 18
93892: PUSH
93893: LD_INT 19
93895: PUSH
93896: LD_INT 20
93898: PUSH
93899: LD_INT 21
93901: PUSH
93902: LD_INT 22
93904: PUSH
93905: LD_INT 23
93907: PUSH
93908: LD_INT 24
93910: PUSH
93911: LD_INT 25
93913: PUSH
93914: LD_INT 26
93916: PUSH
93917: LD_INT 27
93919: PUSH
93920: LD_INT 28
93922: PUSH
93923: LD_INT 29
93925: PUSH
93926: LD_INT 30
93928: PUSH
93929: LD_INT 31
93931: PUSH
93932: LD_INT 32
93934: PUSH
93935: LD_INT 33
93937: PUSH
93938: LD_INT 34
93940: PUSH
93941: LD_INT 35
93943: PUSH
93944: LD_INT 36
93946: PUSH
93947: EMPTY
93948: LIST
93949: LIST
93950: LIST
93951: LIST
93952: LIST
93953: LIST
93954: LIST
93955: LIST
93956: LIST
93957: LIST
93958: LIST
93959: LIST
93960: LIST
93961: LIST
93962: LIST
93963: LIST
93964: LIST
93965: LIST
93966: LIST
93967: LIST
93968: LIST
93969: LIST
93970: LIST
93971: LIST
93972: LIST
93973: LIST
93974: LIST
93975: LIST
93976: LIST
93977: LIST
93978: LIST
93979: LIST
93980: LIST
93981: LIST
93982: LIST
93983: LIST
93984: PUSH
93985: LD_INT 101
93987: PUSH
93988: LD_INT 102
93990: PUSH
93991: LD_INT 103
93993: PUSH
93994: LD_INT 104
93996: PUSH
93997: LD_INT 105
93999: PUSH
94000: LD_INT 106
94002: PUSH
94003: LD_INT 107
94005: PUSH
94006: LD_INT 108
94008: PUSH
94009: LD_INT 109
94011: PUSH
94012: LD_INT 110
94014: PUSH
94015: LD_INT 111
94017: PUSH
94018: LD_INT 112
94020: PUSH
94021: LD_INT 113
94023: PUSH
94024: LD_INT 114
94026: PUSH
94027: LD_INT 115
94029: PUSH
94030: EMPTY
94031: LIST
94032: LIST
94033: LIST
94034: LIST
94035: LIST
94036: LIST
94037: LIST
94038: LIST
94039: LIST
94040: LIST
94041: LIST
94042: LIST
94043: LIST
94044: LIST
94045: LIST
94046: PUSH
94047: EMPTY
94048: LIST
94049: LIST
94050: ST_TO_ADDR
94051: GO 94054
94053: POP
// end ; if result then
94054: LD_VAR 0 1
94058: IFFALSE 94347
// begin normal :=  ;
94060: LD_ADDR_VAR 0 3
94064: PUSH
94065: LD_STRING 
94067: ST_TO_ADDR
// hardcore :=  ;
94068: LD_ADDR_VAR 0 4
94072: PUSH
94073: LD_STRING 
94075: ST_TO_ADDR
// for i = 1 to normalCounter do
94076: LD_ADDR_VAR 0 5
94080: PUSH
94081: DOUBLE
94082: LD_INT 1
94084: DEC
94085: ST_TO_ADDR
94086: LD_EXP 99
94090: PUSH
94091: FOR_TO
94092: IFFALSE 94193
// begin tmp := 0 ;
94094: LD_ADDR_VAR 0 2
94098: PUSH
94099: LD_STRING 0
94101: ST_TO_ADDR
// if result [ 1 ] then
94102: LD_VAR 0 1
94106: PUSH
94107: LD_INT 1
94109: ARRAY
94110: IFFALSE 94175
// if result [ 1 ] [ 1 ] = i then
94112: LD_VAR 0 1
94116: PUSH
94117: LD_INT 1
94119: ARRAY
94120: PUSH
94121: LD_INT 1
94123: ARRAY
94124: PUSH
94125: LD_VAR 0 5
94129: EQUAL
94130: IFFALSE 94175
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
94132: LD_ADDR_VAR 0 1
94136: PUSH
94137: LD_VAR 0 1
94141: PPUSH
94142: LD_INT 1
94144: PPUSH
94145: LD_VAR 0 1
94149: PUSH
94150: LD_INT 1
94152: ARRAY
94153: PPUSH
94154: LD_INT 1
94156: PPUSH
94157: CALL_OW 3
94161: PPUSH
94162: CALL_OW 1
94166: ST_TO_ADDR
// tmp := 1 ;
94167: LD_ADDR_VAR 0 2
94171: PUSH
94172: LD_STRING 1
94174: ST_TO_ADDR
// end ; normal := normal & tmp ;
94175: LD_ADDR_VAR 0 3
94179: PUSH
94180: LD_VAR 0 3
94184: PUSH
94185: LD_VAR 0 2
94189: STR
94190: ST_TO_ADDR
// end ;
94191: GO 94091
94193: POP
94194: POP
// for i = 1 to hardcoreCounter do
94195: LD_ADDR_VAR 0 5
94199: PUSH
94200: DOUBLE
94201: LD_INT 1
94203: DEC
94204: ST_TO_ADDR
94205: LD_EXP 100
94209: PUSH
94210: FOR_TO
94211: IFFALSE 94316
// begin tmp := 0 ;
94213: LD_ADDR_VAR 0 2
94217: PUSH
94218: LD_STRING 0
94220: ST_TO_ADDR
// if result [ 2 ] then
94221: LD_VAR 0 1
94225: PUSH
94226: LD_INT 2
94228: ARRAY
94229: IFFALSE 94298
// if result [ 2 ] [ 1 ] = 100 + i then
94231: LD_VAR 0 1
94235: PUSH
94236: LD_INT 2
94238: ARRAY
94239: PUSH
94240: LD_INT 1
94242: ARRAY
94243: PUSH
94244: LD_INT 100
94246: PUSH
94247: LD_VAR 0 5
94251: PLUS
94252: EQUAL
94253: IFFALSE 94298
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
94255: LD_ADDR_VAR 0 1
94259: PUSH
94260: LD_VAR 0 1
94264: PPUSH
94265: LD_INT 2
94267: PPUSH
94268: LD_VAR 0 1
94272: PUSH
94273: LD_INT 2
94275: ARRAY
94276: PPUSH
94277: LD_INT 1
94279: PPUSH
94280: CALL_OW 3
94284: PPUSH
94285: CALL_OW 1
94289: ST_TO_ADDR
// tmp := 1 ;
94290: LD_ADDR_VAR 0 2
94294: PUSH
94295: LD_STRING 1
94297: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
94298: LD_ADDR_VAR 0 4
94302: PUSH
94303: LD_VAR 0 4
94307: PUSH
94308: LD_VAR 0 2
94312: STR
94313: ST_TO_ADDR
// end ;
94314: GO 94210
94316: POP
94317: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
94318: LD_STRING getStreamItemsFromMission("
94320: PUSH
94321: LD_VAR 0 3
94325: STR
94326: PUSH
94327: LD_STRING ","
94329: STR
94330: PUSH
94331: LD_VAR 0 4
94335: STR
94336: PUSH
94337: LD_STRING ")
94339: STR
94340: PPUSH
94341: CALL_OW 559
// end else
94345: GO 94354
// ToLua ( getStreamItemsFromMission("","") ) ;
94347: LD_STRING getStreamItemsFromMission("","")
94349: PPUSH
94350: CALL_OW 559
// end ;
94354: LD_VAR 0 1
94358: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
94359: LD_VAR 0 2
94363: PUSH
94364: LD_INT 100
94366: EQUAL
94367: IFFALSE 95316
// begin if not StreamModeActive then
94369: LD_EXP 98
94373: NOT
94374: IFFALSE 94384
// StreamModeActive := true ;
94376: LD_ADDR_EXP 98
94380: PUSH
94381: LD_INT 1
94383: ST_TO_ADDR
// if p3 = 0 then
94384: LD_VAR 0 3
94388: PUSH
94389: LD_INT 0
94391: EQUAL
94392: IFFALSE 94398
// InitStreamMode ;
94394: CALL 90656 0 0
// if p3 = 1 then
94398: LD_VAR 0 3
94402: PUSH
94403: LD_INT 1
94405: EQUAL
94406: IFFALSE 94416
// sRocket := true ;
94408: LD_ADDR_EXP 103
94412: PUSH
94413: LD_INT 1
94415: ST_TO_ADDR
// if p3 = 2 then
94416: LD_VAR 0 3
94420: PUSH
94421: LD_INT 2
94423: EQUAL
94424: IFFALSE 94434
// sSpeed := true ;
94426: LD_ADDR_EXP 102
94430: PUSH
94431: LD_INT 1
94433: ST_TO_ADDR
// if p3 = 3 then
94434: LD_VAR 0 3
94438: PUSH
94439: LD_INT 3
94441: EQUAL
94442: IFFALSE 94452
// sEngine := true ;
94444: LD_ADDR_EXP 104
94448: PUSH
94449: LD_INT 1
94451: ST_TO_ADDR
// if p3 = 4 then
94452: LD_VAR 0 3
94456: PUSH
94457: LD_INT 4
94459: EQUAL
94460: IFFALSE 94470
// sSpec := true ;
94462: LD_ADDR_EXP 101
94466: PUSH
94467: LD_INT 1
94469: ST_TO_ADDR
// if p3 = 5 then
94470: LD_VAR 0 3
94474: PUSH
94475: LD_INT 5
94477: EQUAL
94478: IFFALSE 94488
// sLevel := true ;
94480: LD_ADDR_EXP 105
94484: PUSH
94485: LD_INT 1
94487: ST_TO_ADDR
// if p3 = 6 then
94488: LD_VAR 0 3
94492: PUSH
94493: LD_INT 6
94495: EQUAL
94496: IFFALSE 94506
// sArmoury := true ;
94498: LD_ADDR_EXP 106
94502: PUSH
94503: LD_INT 1
94505: ST_TO_ADDR
// if p3 = 7 then
94506: LD_VAR 0 3
94510: PUSH
94511: LD_INT 7
94513: EQUAL
94514: IFFALSE 94524
// sRadar := true ;
94516: LD_ADDR_EXP 107
94520: PUSH
94521: LD_INT 1
94523: ST_TO_ADDR
// if p3 = 8 then
94524: LD_VAR 0 3
94528: PUSH
94529: LD_INT 8
94531: EQUAL
94532: IFFALSE 94542
// sBunker := true ;
94534: LD_ADDR_EXP 108
94538: PUSH
94539: LD_INT 1
94541: ST_TO_ADDR
// if p3 = 9 then
94542: LD_VAR 0 3
94546: PUSH
94547: LD_INT 9
94549: EQUAL
94550: IFFALSE 94560
// sHack := true ;
94552: LD_ADDR_EXP 109
94556: PUSH
94557: LD_INT 1
94559: ST_TO_ADDR
// if p3 = 10 then
94560: LD_VAR 0 3
94564: PUSH
94565: LD_INT 10
94567: EQUAL
94568: IFFALSE 94578
// sFire := true ;
94570: LD_ADDR_EXP 110
94574: PUSH
94575: LD_INT 1
94577: ST_TO_ADDR
// if p3 = 11 then
94578: LD_VAR 0 3
94582: PUSH
94583: LD_INT 11
94585: EQUAL
94586: IFFALSE 94596
// sRefresh := true ;
94588: LD_ADDR_EXP 111
94592: PUSH
94593: LD_INT 1
94595: ST_TO_ADDR
// if p3 = 12 then
94596: LD_VAR 0 3
94600: PUSH
94601: LD_INT 12
94603: EQUAL
94604: IFFALSE 94614
// sExp := true ;
94606: LD_ADDR_EXP 112
94610: PUSH
94611: LD_INT 1
94613: ST_TO_ADDR
// if p3 = 13 then
94614: LD_VAR 0 3
94618: PUSH
94619: LD_INT 13
94621: EQUAL
94622: IFFALSE 94632
// sDepot := true ;
94624: LD_ADDR_EXP 113
94628: PUSH
94629: LD_INT 1
94631: ST_TO_ADDR
// if p3 = 14 then
94632: LD_VAR 0 3
94636: PUSH
94637: LD_INT 14
94639: EQUAL
94640: IFFALSE 94650
// sFlag := true ;
94642: LD_ADDR_EXP 114
94646: PUSH
94647: LD_INT 1
94649: ST_TO_ADDR
// if p3 = 15 then
94650: LD_VAR 0 3
94654: PUSH
94655: LD_INT 15
94657: EQUAL
94658: IFFALSE 94668
// sKamikadze := true ;
94660: LD_ADDR_EXP 122
94664: PUSH
94665: LD_INT 1
94667: ST_TO_ADDR
// if p3 = 16 then
94668: LD_VAR 0 3
94672: PUSH
94673: LD_INT 16
94675: EQUAL
94676: IFFALSE 94686
// sTroll := true ;
94678: LD_ADDR_EXP 123
94682: PUSH
94683: LD_INT 1
94685: ST_TO_ADDR
// if p3 = 17 then
94686: LD_VAR 0 3
94690: PUSH
94691: LD_INT 17
94693: EQUAL
94694: IFFALSE 94704
// sSlow := true ;
94696: LD_ADDR_EXP 124
94700: PUSH
94701: LD_INT 1
94703: ST_TO_ADDR
// if p3 = 18 then
94704: LD_VAR 0 3
94708: PUSH
94709: LD_INT 18
94711: EQUAL
94712: IFFALSE 94722
// sLack := true ;
94714: LD_ADDR_EXP 125
94718: PUSH
94719: LD_INT 1
94721: ST_TO_ADDR
// if p3 = 19 then
94722: LD_VAR 0 3
94726: PUSH
94727: LD_INT 19
94729: EQUAL
94730: IFFALSE 94740
// sTank := true ;
94732: LD_ADDR_EXP 127
94736: PUSH
94737: LD_INT 1
94739: ST_TO_ADDR
// if p3 = 20 then
94740: LD_VAR 0 3
94744: PUSH
94745: LD_INT 20
94747: EQUAL
94748: IFFALSE 94758
// sRemote := true ;
94750: LD_ADDR_EXP 128
94754: PUSH
94755: LD_INT 1
94757: ST_TO_ADDR
// if p3 = 21 then
94758: LD_VAR 0 3
94762: PUSH
94763: LD_INT 21
94765: EQUAL
94766: IFFALSE 94776
// sPowell := true ;
94768: LD_ADDR_EXP 129
94772: PUSH
94773: LD_INT 1
94775: ST_TO_ADDR
// if p3 = 22 then
94776: LD_VAR 0 3
94780: PUSH
94781: LD_INT 22
94783: EQUAL
94784: IFFALSE 94794
// sTeleport := true ;
94786: LD_ADDR_EXP 132
94790: PUSH
94791: LD_INT 1
94793: ST_TO_ADDR
// if p3 = 23 then
94794: LD_VAR 0 3
94798: PUSH
94799: LD_INT 23
94801: EQUAL
94802: IFFALSE 94812
// sOilTower := true ;
94804: LD_ADDR_EXP 134
94808: PUSH
94809: LD_INT 1
94811: ST_TO_ADDR
// if p3 = 24 then
94812: LD_VAR 0 3
94816: PUSH
94817: LD_INT 24
94819: EQUAL
94820: IFFALSE 94830
// sShovel := true ;
94822: LD_ADDR_EXP 135
94826: PUSH
94827: LD_INT 1
94829: ST_TO_ADDR
// if p3 = 25 then
94830: LD_VAR 0 3
94834: PUSH
94835: LD_INT 25
94837: EQUAL
94838: IFFALSE 94848
// sSheik := true ;
94840: LD_ADDR_EXP 136
94844: PUSH
94845: LD_INT 1
94847: ST_TO_ADDR
// if p3 = 26 then
94848: LD_VAR 0 3
94852: PUSH
94853: LD_INT 26
94855: EQUAL
94856: IFFALSE 94866
// sEarthquake := true ;
94858: LD_ADDR_EXP 138
94862: PUSH
94863: LD_INT 1
94865: ST_TO_ADDR
// if p3 = 27 then
94866: LD_VAR 0 3
94870: PUSH
94871: LD_INT 27
94873: EQUAL
94874: IFFALSE 94884
// sAI := true ;
94876: LD_ADDR_EXP 139
94880: PUSH
94881: LD_INT 1
94883: ST_TO_ADDR
// if p3 = 28 then
94884: LD_VAR 0 3
94888: PUSH
94889: LD_INT 28
94891: EQUAL
94892: IFFALSE 94902
// sCargo := true ;
94894: LD_ADDR_EXP 142
94898: PUSH
94899: LD_INT 1
94901: ST_TO_ADDR
// if p3 = 29 then
94902: LD_VAR 0 3
94906: PUSH
94907: LD_INT 29
94909: EQUAL
94910: IFFALSE 94920
// sDLaser := true ;
94912: LD_ADDR_EXP 143
94916: PUSH
94917: LD_INT 1
94919: ST_TO_ADDR
// if p3 = 30 then
94920: LD_VAR 0 3
94924: PUSH
94925: LD_INT 30
94927: EQUAL
94928: IFFALSE 94938
// sExchange := true ;
94930: LD_ADDR_EXP 144
94934: PUSH
94935: LD_INT 1
94937: ST_TO_ADDR
// if p3 = 31 then
94938: LD_VAR 0 3
94942: PUSH
94943: LD_INT 31
94945: EQUAL
94946: IFFALSE 94956
// sFac := true ;
94948: LD_ADDR_EXP 145
94952: PUSH
94953: LD_INT 1
94955: ST_TO_ADDR
// if p3 = 32 then
94956: LD_VAR 0 3
94960: PUSH
94961: LD_INT 32
94963: EQUAL
94964: IFFALSE 94974
// sPower := true ;
94966: LD_ADDR_EXP 146
94970: PUSH
94971: LD_INT 1
94973: ST_TO_ADDR
// if p3 = 33 then
94974: LD_VAR 0 3
94978: PUSH
94979: LD_INT 33
94981: EQUAL
94982: IFFALSE 94992
// sRandom := true ;
94984: LD_ADDR_EXP 147
94988: PUSH
94989: LD_INT 1
94991: ST_TO_ADDR
// if p3 = 34 then
94992: LD_VAR 0 3
94996: PUSH
94997: LD_INT 34
94999: EQUAL
95000: IFFALSE 95010
// sShield := true ;
95002: LD_ADDR_EXP 148
95006: PUSH
95007: LD_INT 1
95009: ST_TO_ADDR
// if p3 = 35 then
95010: LD_VAR 0 3
95014: PUSH
95015: LD_INT 35
95017: EQUAL
95018: IFFALSE 95028
// sTime := true ;
95020: LD_ADDR_EXP 149
95024: PUSH
95025: LD_INT 1
95027: ST_TO_ADDR
// if p3 = 36 then
95028: LD_VAR 0 3
95032: PUSH
95033: LD_INT 36
95035: EQUAL
95036: IFFALSE 95046
// sTools := true ;
95038: LD_ADDR_EXP 150
95042: PUSH
95043: LD_INT 1
95045: ST_TO_ADDR
// if p3 = 101 then
95046: LD_VAR 0 3
95050: PUSH
95051: LD_INT 101
95053: EQUAL
95054: IFFALSE 95064
// sSold := true ;
95056: LD_ADDR_EXP 115
95060: PUSH
95061: LD_INT 1
95063: ST_TO_ADDR
// if p3 = 102 then
95064: LD_VAR 0 3
95068: PUSH
95069: LD_INT 102
95071: EQUAL
95072: IFFALSE 95082
// sDiff := true ;
95074: LD_ADDR_EXP 116
95078: PUSH
95079: LD_INT 1
95081: ST_TO_ADDR
// if p3 = 103 then
95082: LD_VAR 0 3
95086: PUSH
95087: LD_INT 103
95089: EQUAL
95090: IFFALSE 95100
// sFog := true ;
95092: LD_ADDR_EXP 119
95096: PUSH
95097: LD_INT 1
95099: ST_TO_ADDR
// if p3 = 104 then
95100: LD_VAR 0 3
95104: PUSH
95105: LD_INT 104
95107: EQUAL
95108: IFFALSE 95118
// sReset := true ;
95110: LD_ADDR_EXP 120
95114: PUSH
95115: LD_INT 1
95117: ST_TO_ADDR
// if p3 = 105 then
95118: LD_VAR 0 3
95122: PUSH
95123: LD_INT 105
95125: EQUAL
95126: IFFALSE 95136
// sSun := true ;
95128: LD_ADDR_EXP 121
95132: PUSH
95133: LD_INT 1
95135: ST_TO_ADDR
// if p3 = 106 then
95136: LD_VAR 0 3
95140: PUSH
95141: LD_INT 106
95143: EQUAL
95144: IFFALSE 95154
// sTiger := true ;
95146: LD_ADDR_EXP 117
95150: PUSH
95151: LD_INT 1
95153: ST_TO_ADDR
// if p3 = 107 then
95154: LD_VAR 0 3
95158: PUSH
95159: LD_INT 107
95161: EQUAL
95162: IFFALSE 95172
// sBomb := true ;
95164: LD_ADDR_EXP 118
95168: PUSH
95169: LD_INT 1
95171: ST_TO_ADDR
// if p3 = 108 then
95172: LD_VAR 0 3
95176: PUSH
95177: LD_INT 108
95179: EQUAL
95180: IFFALSE 95190
// sWound := true ;
95182: LD_ADDR_EXP 126
95186: PUSH
95187: LD_INT 1
95189: ST_TO_ADDR
// if p3 = 109 then
95190: LD_VAR 0 3
95194: PUSH
95195: LD_INT 109
95197: EQUAL
95198: IFFALSE 95208
// sBetray := true ;
95200: LD_ADDR_EXP 130
95204: PUSH
95205: LD_INT 1
95207: ST_TO_ADDR
// if p3 = 110 then
95208: LD_VAR 0 3
95212: PUSH
95213: LD_INT 110
95215: EQUAL
95216: IFFALSE 95226
// sContamin := true ;
95218: LD_ADDR_EXP 131
95222: PUSH
95223: LD_INT 1
95225: ST_TO_ADDR
// if p3 = 111 then
95226: LD_VAR 0 3
95230: PUSH
95231: LD_INT 111
95233: EQUAL
95234: IFFALSE 95244
// sOil := true ;
95236: LD_ADDR_EXP 133
95240: PUSH
95241: LD_INT 1
95243: ST_TO_ADDR
// if p3 = 112 then
95244: LD_VAR 0 3
95248: PUSH
95249: LD_INT 112
95251: EQUAL
95252: IFFALSE 95262
// sStu := true ;
95254: LD_ADDR_EXP 137
95258: PUSH
95259: LD_INT 1
95261: ST_TO_ADDR
// if p3 = 113 then
95262: LD_VAR 0 3
95266: PUSH
95267: LD_INT 113
95269: EQUAL
95270: IFFALSE 95280
// sBazooka := true ;
95272: LD_ADDR_EXP 140
95276: PUSH
95277: LD_INT 1
95279: ST_TO_ADDR
// if p3 = 114 then
95280: LD_VAR 0 3
95284: PUSH
95285: LD_INT 114
95287: EQUAL
95288: IFFALSE 95298
// sMortar := true ;
95290: LD_ADDR_EXP 141
95294: PUSH
95295: LD_INT 1
95297: ST_TO_ADDR
// if p3 = 115 then
95298: LD_VAR 0 3
95302: PUSH
95303: LD_INT 115
95305: EQUAL
95306: IFFALSE 95316
// sRanger := true ;
95308: LD_ADDR_EXP 151
95312: PUSH
95313: LD_INT 1
95315: ST_TO_ADDR
// end ; end ;
95316: PPOPN 6
95318: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
95319: LD_EXP 98
95323: PUSH
95324: LD_EXP 103
95328: AND
95329: IFFALSE 95453
95331: GO 95333
95333: DISABLE
95334: LD_INT 0
95336: PPUSH
95337: PPUSH
// begin enable ;
95338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
95339: LD_ADDR_VAR 0 2
95343: PUSH
95344: LD_INT 22
95346: PUSH
95347: LD_OWVAR 2
95351: PUSH
95352: EMPTY
95353: LIST
95354: LIST
95355: PUSH
95356: LD_INT 2
95358: PUSH
95359: LD_INT 34
95361: PUSH
95362: LD_INT 7
95364: PUSH
95365: EMPTY
95366: LIST
95367: LIST
95368: PUSH
95369: LD_INT 34
95371: PUSH
95372: LD_INT 45
95374: PUSH
95375: EMPTY
95376: LIST
95377: LIST
95378: PUSH
95379: LD_INT 34
95381: PUSH
95382: LD_INT 28
95384: PUSH
95385: EMPTY
95386: LIST
95387: LIST
95388: PUSH
95389: LD_INT 34
95391: PUSH
95392: LD_INT 47
95394: PUSH
95395: EMPTY
95396: LIST
95397: LIST
95398: PUSH
95399: EMPTY
95400: LIST
95401: LIST
95402: LIST
95403: LIST
95404: LIST
95405: PUSH
95406: EMPTY
95407: LIST
95408: LIST
95409: PPUSH
95410: CALL_OW 69
95414: ST_TO_ADDR
// if not tmp then
95415: LD_VAR 0 2
95419: NOT
95420: IFFALSE 95424
// exit ;
95422: GO 95453
// for i in tmp do
95424: LD_ADDR_VAR 0 1
95428: PUSH
95429: LD_VAR 0 2
95433: PUSH
95434: FOR_IN
95435: IFFALSE 95451
// begin SetLives ( i , 0 ) ;
95437: LD_VAR 0 1
95441: PPUSH
95442: LD_INT 0
95444: PPUSH
95445: CALL_OW 234
// end ;
95449: GO 95434
95451: POP
95452: POP
// end ;
95453: PPOPN 2
95455: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
95456: LD_EXP 98
95460: PUSH
95461: LD_EXP 104
95465: AND
95466: IFFALSE 95550
95468: GO 95470
95470: DISABLE
95471: LD_INT 0
95473: PPUSH
95474: PPUSH
// begin enable ;
95475: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
95476: LD_ADDR_VAR 0 2
95480: PUSH
95481: LD_INT 22
95483: PUSH
95484: LD_OWVAR 2
95488: PUSH
95489: EMPTY
95490: LIST
95491: LIST
95492: PUSH
95493: LD_INT 32
95495: PUSH
95496: LD_INT 3
95498: PUSH
95499: EMPTY
95500: LIST
95501: LIST
95502: PUSH
95503: EMPTY
95504: LIST
95505: LIST
95506: PPUSH
95507: CALL_OW 69
95511: ST_TO_ADDR
// if not tmp then
95512: LD_VAR 0 2
95516: NOT
95517: IFFALSE 95521
// exit ;
95519: GO 95550
// for i in tmp do
95521: LD_ADDR_VAR 0 1
95525: PUSH
95526: LD_VAR 0 2
95530: PUSH
95531: FOR_IN
95532: IFFALSE 95548
// begin SetLives ( i , 0 ) ;
95534: LD_VAR 0 1
95538: PPUSH
95539: LD_INT 0
95541: PPUSH
95542: CALL_OW 234
// end ;
95546: GO 95531
95548: POP
95549: POP
// end ;
95550: PPOPN 2
95552: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
95553: LD_EXP 98
95557: PUSH
95558: LD_EXP 101
95562: AND
95563: IFFALSE 95656
95565: GO 95567
95567: DISABLE
95568: LD_INT 0
95570: PPUSH
// begin enable ;
95571: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
95572: LD_ADDR_VAR 0 1
95576: PUSH
95577: LD_INT 22
95579: PUSH
95580: LD_OWVAR 2
95584: PUSH
95585: EMPTY
95586: LIST
95587: LIST
95588: PUSH
95589: LD_INT 2
95591: PUSH
95592: LD_INT 25
95594: PUSH
95595: LD_INT 5
95597: PUSH
95598: EMPTY
95599: LIST
95600: LIST
95601: PUSH
95602: LD_INT 25
95604: PUSH
95605: LD_INT 9
95607: PUSH
95608: EMPTY
95609: LIST
95610: LIST
95611: PUSH
95612: LD_INT 25
95614: PUSH
95615: LD_INT 8
95617: PUSH
95618: EMPTY
95619: LIST
95620: LIST
95621: PUSH
95622: EMPTY
95623: LIST
95624: LIST
95625: LIST
95626: LIST
95627: PUSH
95628: EMPTY
95629: LIST
95630: LIST
95631: PPUSH
95632: CALL_OW 69
95636: PUSH
95637: FOR_IN
95638: IFFALSE 95654
// begin SetClass ( i , 1 ) ;
95640: LD_VAR 0 1
95644: PPUSH
95645: LD_INT 1
95647: PPUSH
95648: CALL_OW 336
// end ;
95652: GO 95637
95654: POP
95655: POP
// end ;
95656: PPOPN 1
95658: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
95659: LD_EXP 98
95663: PUSH
95664: LD_EXP 102
95668: AND
95669: PUSH
95670: LD_OWVAR 65
95674: PUSH
95675: LD_INT 7
95677: LESS
95678: AND
95679: IFFALSE 95693
95681: GO 95683
95683: DISABLE
// begin enable ;
95684: ENABLE
// game_speed := 7 ;
95685: LD_ADDR_OWVAR 65
95689: PUSH
95690: LD_INT 7
95692: ST_TO_ADDR
// end ;
95693: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
95694: LD_EXP 98
95698: PUSH
95699: LD_EXP 105
95703: AND
95704: IFFALSE 95906
95706: GO 95708
95708: DISABLE
95709: LD_INT 0
95711: PPUSH
95712: PPUSH
95713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
95714: LD_ADDR_VAR 0 3
95718: PUSH
95719: LD_INT 81
95721: PUSH
95722: LD_OWVAR 2
95726: PUSH
95727: EMPTY
95728: LIST
95729: LIST
95730: PUSH
95731: LD_INT 21
95733: PUSH
95734: LD_INT 1
95736: PUSH
95737: EMPTY
95738: LIST
95739: LIST
95740: PUSH
95741: EMPTY
95742: LIST
95743: LIST
95744: PPUSH
95745: CALL_OW 69
95749: ST_TO_ADDR
// if not tmp then
95750: LD_VAR 0 3
95754: NOT
95755: IFFALSE 95759
// exit ;
95757: GO 95906
// if tmp > 5 then
95759: LD_VAR 0 3
95763: PUSH
95764: LD_INT 5
95766: GREATER
95767: IFFALSE 95779
// k := 5 else
95769: LD_ADDR_VAR 0 2
95773: PUSH
95774: LD_INT 5
95776: ST_TO_ADDR
95777: GO 95789
// k := tmp ;
95779: LD_ADDR_VAR 0 2
95783: PUSH
95784: LD_VAR 0 3
95788: ST_TO_ADDR
// for i := 1 to k do
95789: LD_ADDR_VAR 0 1
95793: PUSH
95794: DOUBLE
95795: LD_INT 1
95797: DEC
95798: ST_TO_ADDR
95799: LD_VAR 0 2
95803: PUSH
95804: FOR_TO
95805: IFFALSE 95904
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
95807: LD_VAR 0 3
95811: PUSH
95812: LD_VAR 0 1
95816: ARRAY
95817: PPUSH
95818: LD_VAR 0 1
95822: PUSH
95823: LD_INT 4
95825: MOD
95826: PUSH
95827: LD_INT 1
95829: PLUS
95830: PPUSH
95831: CALL_OW 259
95835: PUSH
95836: LD_INT 10
95838: LESS
95839: IFFALSE 95902
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
95841: LD_VAR 0 3
95845: PUSH
95846: LD_VAR 0 1
95850: ARRAY
95851: PPUSH
95852: LD_VAR 0 1
95856: PUSH
95857: LD_INT 4
95859: MOD
95860: PUSH
95861: LD_INT 1
95863: PLUS
95864: PPUSH
95865: LD_VAR 0 3
95869: PUSH
95870: LD_VAR 0 1
95874: ARRAY
95875: PPUSH
95876: LD_VAR 0 1
95880: PUSH
95881: LD_INT 4
95883: MOD
95884: PUSH
95885: LD_INT 1
95887: PLUS
95888: PPUSH
95889: CALL_OW 259
95893: PUSH
95894: LD_INT 1
95896: PLUS
95897: PPUSH
95898: CALL_OW 237
95902: GO 95804
95904: POP
95905: POP
// end ;
95906: PPOPN 3
95908: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
95909: LD_EXP 98
95913: PUSH
95914: LD_EXP 106
95918: AND
95919: IFFALSE 95939
95921: GO 95923
95923: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
95924: LD_INT 4
95926: PPUSH
95927: LD_OWVAR 2
95931: PPUSH
95932: LD_INT 0
95934: PPUSH
95935: CALL_OW 324
95939: END
// every 0 0$1 trigger StreamModeActive and sShovel do
95940: LD_EXP 98
95944: PUSH
95945: LD_EXP 135
95949: AND
95950: IFFALSE 95970
95952: GO 95954
95954: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
95955: LD_INT 19
95957: PPUSH
95958: LD_OWVAR 2
95962: PPUSH
95963: LD_INT 0
95965: PPUSH
95966: CALL_OW 324
95970: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
95971: LD_EXP 98
95975: PUSH
95976: LD_EXP 107
95980: AND
95981: IFFALSE 96083
95983: GO 95985
95985: DISABLE
95986: LD_INT 0
95988: PPUSH
95989: PPUSH
// begin enable ;
95990: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
95991: LD_ADDR_VAR 0 2
95995: PUSH
95996: LD_INT 22
95998: PUSH
95999: LD_OWVAR 2
96003: PUSH
96004: EMPTY
96005: LIST
96006: LIST
96007: PUSH
96008: LD_INT 2
96010: PUSH
96011: LD_INT 34
96013: PUSH
96014: LD_INT 11
96016: PUSH
96017: EMPTY
96018: LIST
96019: LIST
96020: PUSH
96021: LD_INT 34
96023: PUSH
96024: LD_INT 30
96026: PUSH
96027: EMPTY
96028: LIST
96029: LIST
96030: PUSH
96031: EMPTY
96032: LIST
96033: LIST
96034: LIST
96035: PUSH
96036: EMPTY
96037: LIST
96038: LIST
96039: PPUSH
96040: CALL_OW 69
96044: ST_TO_ADDR
// if not tmp then
96045: LD_VAR 0 2
96049: NOT
96050: IFFALSE 96054
// exit ;
96052: GO 96083
// for i in tmp do
96054: LD_ADDR_VAR 0 1
96058: PUSH
96059: LD_VAR 0 2
96063: PUSH
96064: FOR_IN
96065: IFFALSE 96081
// begin SetLives ( i , 0 ) ;
96067: LD_VAR 0 1
96071: PPUSH
96072: LD_INT 0
96074: PPUSH
96075: CALL_OW 234
// end ;
96079: GO 96064
96081: POP
96082: POP
// end ;
96083: PPOPN 2
96085: END
// every 0 0$1 trigger StreamModeActive and sBunker do
96086: LD_EXP 98
96090: PUSH
96091: LD_EXP 108
96095: AND
96096: IFFALSE 96116
96098: GO 96100
96100: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
96101: LD_INT 32
96103: PPUSH
96104: LD_OWVAR 2
96108: PPUSH
96109: LD_INT 0
96111: PPUSH
96112: CALL_OW 324
96116: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
96117: LD_EXP 98
96121: PUSH
96122: LD_EXP 109
96126: AND
96127: IFFALSE 96308
96129: GO 96131
96131: DISABLE
96132: LD_INT 0
96134: PPUSH
96135: PPUSH
96136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
96137: LD_ADDR_VAR 0 2
96141: PUSH
96142: LD_INT 22
96144: PUSH
96145: LD_OWVAR 2
96149: PUSH
96150: EMPTY
96151: LIST
96152: LIST
96153: PUSH
96154: LD_INT 33
96156: PUSH
96157: LD_INT 3
96159: PUSH
96160: EMPTY
96161: LIST
96162: LIST
96163: PUSH
96164: EMPTY
96165: LIST
96166: LIST
96167: PPUSH
96168: CALL_OW 69
96172: ST_TO_ADDR
// if not tmp then
96173: LD_VAR 0 2
96177: NOT
96178: IFFALSE 96182
// exit ;
96180: GO 96308
// side := 0 ;
96182: LD_ADDR_VAR 0 3
96186: PUSH
96187: LD_INT 0
96189: ST_TO_ADDR
// for i := 1 to 8 do
96190: LD_ADDR_VAR 0 1
96194: PUSH
96195: DOUBLE
96196: LD_INT 1
96198: DEC
96199: ST_TO_ADDR
96200: LD_INT 8
96202: PUSH
96203: FOR_TO
96204: IFFALSE 96252
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
96206: LD_OWVAR 2
96210: PUSH
96211: LD_VAR 0 1
96215: NONEQUAL
96216: PUSH
96217: LD_OWVAR 2
96221: PPUSH
96222: LD_VAR 0 1
96226: PPUSH
96227: CALL_OW 81
96231: PUSH
96232: LD_INT 2
96234: EQUAL
96235: AND
96236: IFFALSE 96250
// begin side := i ;
96238: LD_ADDR_VAR 0 3
96242: PUSH
96243: LD_VAR 0 1
96247: ST_TO_ADDR
// break ;
96248: GO 96252
// end ;
96250: GO 96203
96252: POP
96253: POP
// if not side then
96254: LD_VAR 0 3
96258: NOT
96259: IFFALSE 96263
// exit ;
96261: GO 96308
// for i := 1 to tmp do
96263: LD_ADDR_VAR 0 1
96267: PUSH
96268: DOUBLE
96269: LD_INT 1
96271: DEC
96272: ST_TO_ADDR
96273: LD_VAR 0 2
96277: PUSH
96278: FOR_TO
96279: IFFALSE 96306
// if Prob ( 60 ) then
96281: LD_INT 60
96283: PPUSH
96284: CALL_OW 13
96288: IFFALSE 96304
// SetSide ( i , side ) ;
96290: LD_VAR 0 1
96294: PPUSH
96295: LD_VAR 0 3
96299: PPUSH
96300: CALL_OW 235
96304: GO 96278
96306: POP
96307: POP
// end ;
96308: PPOPN 3
96310: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
96311: LD_EXP 98
96315: PUSH
96316: LD_EXP 111
96320: AND
96321: IFFALSE 96440
96323: GO 96325
96325: DISABLE
96326: LD_INT 0
96328: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
96329: LD_ADDR_VAR 0 1
96333: PUSH
96334: LD_INT 22
96336: PUSH
96337: LD_OWVAR 2
96341: PUSH
96342: EMPTY
96343: LIST
96344: LIST
96345: PUSH
96346: LD_INT 21
96348: PUSH
96349: LD_INT 1
96351: PUSH
96352: EMPTY
96353: LIST
96354: LIST
96355: PUSH
96356: LD_INT 3
96358: PUSH
96359: LD_INT 23
96361: PUSH
96362: LD_INT 0
96364: PUSH
96365: EMPTY
96366: LIST
96367: LIST
96368: PUSH
96369: EMPTY
96370: LIST
96371: LIST
96372: PUSH
96373: EMPTY
96374: LIST
96375: LIST
96376: LIST
96377: PPUSH
96378: CALL_OW 69
96382: PUSH
96383: FOR_IN
96384: IFFALSE 96438
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
96386: LD_VAR 0 1
96390: PPUSH
96391: CALL_OW 257
96395: PUSH
96396: LD_INT 1
96398: PUSH
96399: LD_INT 2
96401: PUSH
96402: LD_INT 3
96404: PUSH
96405: LD_INT 4
96407: PUSH
96408: EMPTY
96409: LIST
96410: LIST
96411: LIST
96412: LIST
96413: IN
96414: IFFALSE 96436
// SetClass ( un , rand ( 1 , 4 ) ) ;
96416: LD_VAR 0 1
96420: PPUSH
96421: LD_INT 1
96423: PPUSH
96424: LD_INT 4
96426: PPUSH
96427: CALL_OW 12
96431: PPUSH
96432: CALL_OW 336
96436: GO 96383
96438: POP
96439: POP
// end ;
96440: PPOPN 1
96442: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
96443: LD_EXP 98
96447: PUSH
96448: LD_EXP 110
96452: AND
96453: IFFALSE 96532
96455: GO 96457
96457: DISABLE
96458: LD_INT 0
96460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96461: LD_ADDR_VAR 0 1
96465: PUSH
96466: LD_INT 22
96468: PUSH
96469: LD_OWVAR 2
96473: PUSH
96474: EMPTY
96475: LIST
96476: LIST
96477: PUSH
96478: LD_INT 21
96480: PUSH
96481: LD_INT 3
96483: PUSH
96484: EMPTY
96485: LIST
96486: LIST
96487: PUSH
96488: EMPTY
96489: LIST
96490: LIST
96491: PPUSH
96492: CALL_OW 69
96496: ST_TO_ADDR
// if not tmp then
96497: LD_VAR 0 1
96501: NOT
96502: IFFALSE 96506
// exit ;
96504: GO 96532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
96506: LD_VAR 0 1
96510: PUSH
96511: LD_INT 1
96513: PPUSH
96514: LD_VAR 0 1
96518: PPUSH
96519: CALL_OW 12
96523: ARRAY
96524: PPUSH
96525: LD_INT 100
96527: PPUSH
96528: CALL_OW 234
// end ;
96532: PPOPN 1
96534: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
96535: LD_EXP 98
96539: PUSH
96540: LD_EXP 112
96544: AND
96545: IFFALSE 96643
96547: GO 96549
96549: DISABLE
96550: LD_INT 0
96552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
96553: LD_ADDR_VAR 0 1
96557: PUSH
96558: LD_INT 22
96560: PUSH
96561: LD_OWVAR 2
96565: PUSH
96566: EMPTY
96567: LIST
96568: LIST
96569: PUSH
96570: LD_INT 21
96572: PUSH
96573: LD_INT 1
96575: PUSH
96576: EMPTY
96577: LIST
96578: LIST
96579: PUSH
96580: EMPTY
96581: LIST
96582: LIST
96583: PPUSH
96584: CALL_OW 69
96588: ST_TO_ADDR
// if not tmp then
96589: LD_VAR 0 1
96593: NOT
96594: IFFALSE 96598
// exit ;
96596: GO 96643
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
96598: LD_VAR 0 1
96602: PUSH
96603: LD_INT 1
96605: PPUSH
96606: LD_VAR 0 1
96610: PPUSH
96611: CALL_OW 12
96615: ARRAY
96616: PPUSH
96617: LD_INT 1
96619: PPUSH
96620: LD_INT 4
96622: PPUSH
96623: CALL_OW 12
96627: PPUSH
96628: LD_INT 3000
96630: PPUSH
96631: LD_INT 9000
96633: PPUSH
96634: CALL_OW 12
96638: PPUSH
96639: CALL_OW 492
// end ;
96643: PPOPN 1
96645: END
// every 0 0$1 trigger StreamModeActive and sDepot do
96646: LD_EXP 98
96650: PUSH
96651: LD_EXP 113
96655: AND
96656: IFFALSE 96676
96658: GO 96660
96660: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
96661: LD_INT 1
96663: PPUSH
96664: LD_OWVAR 2
96668: PPUSH
96669: LD_INT 0
96671: PPUSH
96672: CALL_OW 324
96676: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
96677: LD_EXP 98
96681: PUSH
96682: LD_EXP 114
96686: AND
96687: IFFALSE 96770
96689: GO 96691
96691: DISABLE
96692: LD_INT 0
96694: PPUSH
96695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96696: LD_ADDR_VAR 0 2
96700: PUSH
96701: LD_INT 22
96703: PUSH
96704: LD_OWVAR 2
96708: PUSH
96709: EMPTY
96710: LIST
96711: LIST
96712: PUSH
96713: LD_INT 21
96715: PUSH
96716: LD_INT 3
96718: PUSH
96719: EMPTY
96720: LIST
96721: LIST
96722: PUSH
96723: EMPTY
96724: LIST
96725: LIST
96726: PPUSH
96727: CALL_OW 69
96731: ST_TO_ADDR
// if not tmp then
96732: LD_VAR 0 2
96736: NOT
96737: IFFALSE 96741
// exit ;
96739: GO 96770
// for i in tmp do
96741: LD_ADDR_VAR 0 1
96745: PUSH
96746: LD_VAR 0 2
96750: PUSH
96751: FOR_IN
96752: IFFALSE 96768
// SetBLevel ( i , 10 ) ;
96754: LD_VAR 0 1
96758: PPUSH
96759: LD_INT 10
96761: PPUSH
96762: CALL_OW 241
96766: GO 96751
96768: POP
96769: POP
// end ;
96770: PPOPN 2
96772: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
96773: LD_EXP 98
96777: PUSH
96778: LD_EXP 115
96782: AND
96783: IFFALSE 96894
96785: GO 96787
96787: DISABLE
96788: LD_INT 0
96790: PPUSH
96791: PPUSH
96792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96793: LD_ADDR_VAR 0 3
96797: PUSH
96798: LD_INT 22
96800: PUSH
96801: LD_OWVAR 2
96805: PUSH
96806: EMPTY
96807: LIST
96808: LIST
96809: PUSH
96810: LD_INT 25
96812: PUSH
96813: LD_INT 1
96815: PUSH
96816: EMPTY
96817: LIST
96818: LIST
96819: PUSH
96820: EMPTY
96821: LIST
96822: LIST
96823: PPUSH
96824: CALL_OW 69
96828: ST_TO_ADDR
// if not tmp then
96829: LD_VAR 0 3
96833: NOT
96834: IFFALSE 96838
// exit ;
96836: GO 96894
// un := tmp [ rand ( 1 , tmp ) ] ;
96838: LD_ADDR_VAR 0 2
96842: PUSH
96843: LD_VAR 0 3
96847: PUSH
96848: LD_INT 1
96850: PPUSH
96851: LD_VAR 0 3
96855: PPUSH
96856: CALL_OW 12
96860: ARRAY
96861: ST_TO_ADDR
// if Crawls ( un ) then
96862: LD_VAR 0 2
96866: PPUSH
96867: CALL_OW 318
96871: IFFALSE 96882
// ComWalk ( un ) ;
96873: LD_VAR 0 2
96877: PPUSH
96878: CALL_OW 138
// SetClass ( un , class_sniper ) ;
96882: LD_VAR 0 2
96886: PPUSH
96887: LD_INT 5
96889: PPUSH
96890: CALL_OW 336
// end ;
96894: PPOPN 3
96896: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
96897: LD_EXP 98
96901: PUSH
96902: LD_EXP 116
96906: AND
96907: PUSH
96908: LD_OWVAR 67
96912: PUSH
96913: LD_INT 3
96915: LESS
96916: AND
96917: IFFALSE 96936
96919: GO 96921
96921: DISABLE
// Difficulty := Difficulty + 1 ;
96922: LD_ADDR_OWVAR 67
96926: PUSH
96927: LD_OWVAR 67
96931: PUSH
96932: LD_INT 1
96934: PLUS
96935: ST_TO_ADDR
96936: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
96937: LD_EXP 98
96941: PUSH
96942: LD_EXP 117
96946: AND
96947: IFFALSE 97050
96949: GO 96951
96951: DISABLE
96952: LD_INT 0
96954: PPUSH
// begin for i := 1 to 5 do
96955: LD_ADDR_VAR 0 1
96959: PUSH
96960: DOUBLE
96961: LD_INT 1
96963: DEC
96964: ST_TO_ADDR
96965: LD_INT 5
96967: PUSH
96968: FOR_TO
96969: IFFALSE 97048
// begin uc_nation := nation_nature ;
96971: LD_ADDR_OWVAR 21
96975: PUSH
96976: LD_INT 0
96978: ST_TO_ADDR
// uc_side := 0 ;
96979: LD_ADDR_OWVAR 20
96983: PUSH
96984: LD_INT 0
96986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
96987: LD_ADDR_OWVAR 29
96991: PUSH
96992: LD_INT 12
96994: PUSH
96995: LD_INT 12
96997: PUSH
96998: EMPTY
96999: LIST
97000: LIST
97001: ST_TO_ADDR
// hc_agressivity := 20 ;
97002: LD_ADDR_OWVAR 35
97006: PUSH
97007: LD_INT 20
97009: ST_TO_ADDR
// hc_class := class_tiger ;
97010: LD_ADDR_OWVAR 28
97014: PUSH
97015: LD_INT 14
97017: ST_TO_ADDR
// hc_gallery :=  ;
97018: LD_ADDR_OWVAR 33
97022: PUSH
97023: LD_STRING 
97025: ST_TO_ADDR
// hc_name :=  ;
97026: LD_ADDR_OWVAR 26
97030: PUSH
97031: LD_STRING 
97033: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
97034: CALL_OW 44
97038: PPUSH
97039: LD_INT 0
97041: PPUSH
97042: CALL_OW 51
// end ;
97046: GO 96968
97048: POP
97049: POP
// end ;
97050: PPOPN 1
97052: END
// every 0 0$1 trigger StreamModeActive and sBomb do
97053: LD_EXP 98
97057: PUSH
97058: LD_EXP 118
97062: AND
97063: IFFALSE 97072
97065: GO 97067
97067: DISABLE
// StreamSibBomb ;
97068: CALL 97073 0 0
97072: END
// export function StreamSibBomb ; var i , x , y ; begin
97073: LD_INT 0
97075: PPUSH
97076: PPUSH
97077: PPUSH
97078: PPUSH
// result := false ;
97079: LD_ADDR_VAR 0 1
97083: PUSH
97084: LD_INT 0
97086: ST_TO_ADDR
// for i := 1 to 16 do
97087: LD_ADDR_VAR 0 2
97091: PUSH
97092: DOUBLE
97093: LD_INT 1
97095: DEC
97096: ST_TO_ADDR
97097: LD_INT 16
97099: PUSH
97100: FOR_TO
97101: IFFALSE 97300
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97103: LD_ADDR_VAR 0 3
97107: PUSH
97108: LD_INT 10
97110: PUSH
97111: LD_INT 20
97113: PUSH
97114: LD_INT 30
97116: PUSH
97117: LD_INT 40
97119: PUSH
97120: LD_INT 50
97122: PUSH
97123: LD_INT 60
97125: PUSH
97126: LD_INT 70
97128: PUSH
97129: LD_INT 80
97131: PUSH
97132: LD_INT 90
97134: PUSH
97135: LD_INT 100
97137: PUSH
97138: LD_INT 110
97140: PUSH
97141: LD_INT 120
97143: PUSH
97144: LD_INT 130
97146: PUSH
97147: LD_INT 140
97149: PUSH
97150: LD_INT 150
97152: PUSH
97153: EMPTY
97154: LIST
97155: LIST
97156: LIST
97157: LIST
97158: LIST
97159: LIST
97160: LIST
97161: LIST
97162: LIST
97163: LIST
97164: LIST
97165: LIST
97166: LIST
97167: LIST
97168: LIST
97169: PUSH
97170: LD_INT 1
97172: PPUSH
97173: LD_INT 15
97175: PPUSH
97176: CALL_OW 12
97180: ARRAY
97181: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97182: LD_ADDR_VAR 0 4
97186: PUSH
97187: LD_INT 10
97189: PUSH
97190: LD_INT 20
97192: PUSH
97193: LD_INT 30
97195: PUSH
97196: LD_INT 40
97198: PUSH
97199: LD_INT 50
97201: PUSH
97202: LD_INT 60
97204: PUSH
97205: LD_INT 70
97207: PUSH
97208: LD_INT 80
97210: PUSH
97211: LD_INT 90
97213: PUSH
97214: LD_INT 100
97216: PUSH
97217: LD_INT 110
97219: PUSH
97220: LD_INT 120
97222: PUSH
97223: LD_INT 130
97225: PUSH
97226: LD_INT 140
97228: PUSH
97229: LD_INT 150
97231: PUSH
97232: EMPTY
97233: LIST
97234: LIST
97235: LIST
97236: LIST
97237: LIST
97238: LIST
97239: LIST
97240: LIST
97241: LIST
97242: LIST
97243: LIST
97244: LIST
97245: LIST
97246: LIST
97247: LIST
97248: PUSH
97249: LD_INT 1
97251: PPUSH
97252: LD_INT 15
97254: PPUSH
97255: CALL_OW 12
97259: ARRAY
97260: ST_TO_ADDR
// if ValidHex ( x , y ) then
97261: LD_VAR 0 3
97265: PPUSH
97266: LD_VAR 0 4
97270: PPUSH
97271: CALL_OW 488
97275: IFFALSE 97298
// begin result := [ x , y ] ;
97277: LD_ADDR_VAR 0 1
97281: PUSH
97282: LD_VAR 0 3
97286: PUSH
97287: LD_VAR 0 4
97291: PUSH
97292: EMPTY
97293: LIST
97294: LIST
97295: ST_TO_ADDR
// break ;
97296: GO 97300
// end ; end ;
97298: GO 97100
97300: POP
97301: POP
// if result then
97302: LD_VAR 0 1
97306: IFFALSE 97366
// begin ToLua ( playSibBomb() ) ;
97308: LD_STRING playSibBomb()
97310: PPUSH
97311: CALL_OW 559
// wait ( 0 0$14 ) ;
97315: LD_INT 490
97317: PPUSH
97318: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
97322: LD_VAR 0 1
97326: PUSH
97327: LD_INT 1
97329: ARRAY
97330: PPUSH
97331: LD_VAR 0 1
97335: PUSH
97336: LD_INT 2
97338: ARRAY
97339: PPUSH
97340: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
97344: LD_VAR 0 1
97348: PUSH
97349: LD_INT 1
97351: ARRAY
97352: PPUSH
97353: LD_VAR 0 1
97357: PUSH
97358: LD_INT 2
97360: ARRAY
97361: PPUSH
97362: CALL_OW 429
// end ; end ;
97366: LD_VAR 0 1
97370: RET
// every 0 0$1 trigger StreamModeActive and sReset do
97371: LD_EXP 98
97375: PUSH
97376: LD_EXP 120
97380: AND
97381: IFFALSE 97393
97383: GO 97385
97385: DISABLE
// YouLost (  ) ;
97386: LD_STRING 
97388: PPUSH
97389: CALL_OW 104
97393: END
// every 0 0$1 trigger StreamModeActive and sFog do
97394: LD_EXP 98
97398: PUSH
97399: LD_EXP 119
97403: AND
97404: IFFALSE 97418
97406: GO 97408
97408: DISABLE
// FogOff ( your_side ) ;
97409: LD_OWVAR 2
97413: PPUSH
97414: CALL_OW 344
97418: END
// every 0 0$1 trigger StreamModeActive and sSun do
97419: LD_EXP 98
97423: PUSH
97424: LD_EXP 121
97428: AND
97429: IFFALSE 97457
97431: GO 97433
97433: DISABLE
// begin solar_recharge_percent := 0 ;
97434: LD_ADDR_OWVAR 79
97438: PUSH
97439: LD_INT 0
97441: ST_TO_ADDR
// wait ( 5 5$00 ) ;
97442: LD_INT 10500
97444: PPUSH
97445: CALL_OW 67
// solar_recharge_percent := 100 ;
97449: LD_ADDR_OWVAR 79
97453: PUSH
97454: LD_INT 100
97456: ST_TO_ADDR
// end ;
97457: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
97458: LD_EXP 98
97462: PUSH
97463: LD_EXP 122
97467: AND
97468: IFFALSE 97707
97470: GO 97472
97472: DISABLE
97473: LD_INT 0
97475: PPUSH
97476: PPUSH
97477: PPUSH
// begin tmp := [ ] ;
97478: LD_ADDR_VAR 0 3
97482: PUSH
97483: EMPTY
97484: ST_TO_ADDR
// for i := 1 to 6 do
97485: LD_ADDR_VAR 0 1
97489: PUSH
97490: DOUBLE
97491: LD_INT 1
97493: DEC
97494: ST_TO_ADDR
97495: LD_INT 6
97497: PUSH
97498: FOR_TO
97499: IFFALSE 97604
// begin uc_nation := nation_nature ;
97501: LD_ADDR_OWVAR 21
97505: PUSH
97506: LD_INT 0
97508: ST_TO_ADDR
// uc_side := 0 ;
97509: LD_ADDR_OWVAR 20
97513: PUSH
97514: LD_INT 0
97516: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
97517: LD_ADDR_OWVAR 29
97521: PUSH
97522: LD_INT 12
97524: PUSH
97525: LD_INT 12
97527: PUSH
97528: EMPTY
97529: LIST
97530: LIST
97531: ST_TO_ADDR
// hc_agressivity := 20 ;
97532: LD_ADDR_OWVAR 35
97536: PUSH
97537: LD_INT 20
97539: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
97540: LD_ADDR_OWVAR 28
97544: PUSH
97545: LD_INT 17
97547: ST_TO_ADDR
// hc_gallery :=  ;
97548: LD_ADDR_OWVAR 33
97552: PUSH
97553: LD_STRING 
97555: ST_TO_ADDR
// hc_name :=  ;
97556: LD_ADDR_OWVAR 26
97560: PUSH
97561: LD_STRING 
97563: ST_TO_ADDR
// un := CreateHuman ;
97564: LD_ADDR_VAR 0 2
97568: PUSH
97569: CALL_OW 44
97573: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
97574: LD_VAR 0 2
97578: PPUSH
97579: LD_INT 1
97581: PPUSH
97582: CALL_OW 51
// tmp := tmp ^ un ;
97586: LD_ADDR_VAR 0 3
97590: PUSH
97591: LD_VAR 0 3
97595: PUSH
97596: LD_VAR 0 2
97600: ADD
97601: ST_TO_ADDR
// end ;
97602: GO 97498
97604: POP
97605: POP
// repeat wait ( 0 0$1 ) ;
97606: LD_INT 35
97608: PPUSH
97609: CALL_OW 67
// for un in tmp do
97613: LD_ADDR_VAR 0 2
97617: PUSH
97618: LD_VAR 0 3
97622: PUSH
97623: FOR_IN
97624: IFFALSE 97698
// begin if IsDead ( un ) then
97626: LD_VAR 0 2
97630: PPUSH
97631: CALL_OW 301
97635: IFFALSE 97655
// begin tmp := tmp diff un ;
97637: LD_ADDR_VAR 0 3
97641: PUSH
97642: LD_VAR 0 3
97646: PUSH
97647: LD_VAR 0 2
97651: DIFF
97652: ST_TO_ADDR
// continue ;
97653: GO 97623
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
97655: LD_VAR 0 2
97659: PPUSH
97660: LD_INT 3
97662: PUSH
97663: LD_INT 22
97665: PUSH
97666: LD_INT 0
97668: PUSH
97669: EMPTY
97670: LIST
97671: LIST
97672: PUSH
97673: EMPTY
97674: LIST
97675: LIST
97676: PPUSH
97677: CALL_OW 69
97681: PPUSH
97682: LD_VAR 0 2
97686: PPUSH
97687: CALL_OW 74
97691: PPUSH
97692: CALL_OW 115
// end ;
97696: GO 97623
97698: POP
97699: POP
// until not tmp ;
97700: LD_VAR 0 3
97704: NOT
97705: IFFALSE 97606
// end ;
97707: PPOPN 3
97709: END
// every 0 0$1 trigger StreamModeActive and sTroll do
97710: LD_EXP 98
97714: PUSH
97715: LD_EXP 123
97719: AND
97720: IFFALSE 97774
97722: GO 97724
97724: DISABLE
// begin ToLua ( displayTroll(); ) ;
97725: LD_STRING displayTroll();
97727: PPUSH
97728: CALL_OW 559
// wait ( 3 3$00 ) ;
97732: LD_INT 6300
97734: PPUSH
97735: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97739: LD_STRING hideTroll();
97741: PPUSH
97742: CALL_OW 559
// wait ( 1 1$00 ) ;
97746: LD_INT 2100
97748: PPUSH
97749: CALL_OW 67
// ToLua ( displayTroll(); ) ;
97753: LD_STRING displayTroll();
97755: PPUSH
97756: CALL_OW 559
// wait ( 1 1$00 ) ;
97760: LD_INT 2100
97762: PPUSH
97763: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97767: LD_STRING hideTroll();
97769: PPUSH
97770: CALL_OW 559
// end ;
97774: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
97775: LD_EXP 98
97779: PUSH
97780: LD_EXP 124
97784: AND
97785: IFFALSE 97848
97787: GO 97789
97789: DISABLE
97790: LD_INT 0
97792: PPUSH
// begin p := 0 ;
97793: LD_ADDR_VAR 0 1
97797: PUSH
97798: LD_INT 0
97800: ST_TO_ADDR
// repeat game_speed := 1 ;
97801: LD_ADDR_OWVAR 65
97805: PUSH
97806: LD_INT 1
97808: ST_TO_ADDR
// wait ( 0 0$1 ) ;
97809: LD_INT 35
97811: PPUSH
97812: CALL_OW 67
// p := p + 1 ;
97816: LD_ADDR_VAR 0 1
97820: PUSH
97821: LD_VAR 0 1
97825: PUSH
97826: LD_INT 1
97828: PLUS
97829: ST_TO_ADDR
// until p >= 60 ;
97830: LD_VAR 0 1
97834: PUSH
97835: LD_INT 60
97837: GREATEREQUAL
97838: IFFALSE 97801
// game_speed := 4 ;
97840: LD_ADDR_OWVAR 65
97844: PUSH
97845: LD_INT 4
97847: ST_TO_ADDR
// end ;
97848: PPOPN 1
97850: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
97851: LD_EXP 98
97855: PUSH
97856: LD_EXP 125
97860: AND
97861: IFFALSE 98007
97863: GO 97865
97865: DISABLE
97866: LD_INT 0
97868: PPUSH
97869: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
97870: LD_ADDR_VAR 0 1
97874: PUSH
97875: LD_INT 22
97877: PUSH
97878: LD_OWVAR 2
97882: PUSH
97883: EMPTY
97884: LIST
97885: LIST
97886: PUSH
97887: LD_INT 2
97889: PUSH
97890: LD_INT 30
97892: PUSH
97893: LD_INT 0
97895: PUSH
97896: EMPTY
97897: LIST
97898: LIST
97899: PUSH
97900: LD_INT 30
97902: PUSH
97903: LD_INT 1
97905: PUSH
97906: EMPTY
97907: LIST
97908: LIST
97909: PUSH
97910: EMPTY
97911: LIST
97912: LIST
97913: LIST
97914: PUSH
97915: EMPTY
97916: LIST
97917: LIST
97918: PPUSH
97919: CALL_OW 69
97923: ST_TO_ADDR
// if not depot then
97924: LD_VAR 0 1
97928: NOT
97929: IFFALSE 97933
// exit ;
97931: GO 98007
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
97933: LD_ADDR_VAR 0 2
97937: PUSH
97938: LD_VAR 0 1
97942: PUSH
97943: LD_INT 1
97945: PPUSH
97946: LD_VAR 0 1
97950: PPUSH
97951: CALL_OW 12
97955: ARRAY
97956: PPUSH
97957: CALL_OW 274
97961: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
97962: LD_VAR 0 2
97966: PPUSH
97967: LD_INT 1
97969: PPUSH
97970: LD_INT 0
97972: PPUSH
97973: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
97977: LD_VAR 0 2
97981: PPUSH
97982: LD_INT 2
97984: PPUSH
97985: LD_INT 0
97987: PPUSH
97988: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
97992: LD_VAR 0 2
97996: PPUSH
97997: LD_INT 3
97999: PPUSH
98000: LD_INT 0
98002: PPUSH
98003: CALL_OW 277
// end ;
98007: PPOPN 2
98009: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
98010: LD_EXP 98
98014: PUSH
98015: LD_EXP 126
98019: AND
98020: IFFALSE 98117
98022: GO 98024
98024: DISABLE
98025: LD_INT 0
98027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
98028: LD_ADDR_VAR 0 1
98032: PUSH
98033: LD_INT 22
98035: PUSH
98036: LD_OWVAR 2
98040: PUSH
98041: EMPTY
98042: LIST
98043: LIST
98044: PUSH
98045: LD_INT 21
98047: PUSH
98048: LD_INT 1
98050: PUSH
98051: EMPTY
98052: LIST
98053: LIST
98054: PUSH
98055: LD_INT 3
98057: PUSH
98058: LD_INT 23
98060: PUSH
98061: LD_INT 0
98063: PUSH
98064: EMPTY
98065: LIST
98066: LIST
98067: PUSH
98068: EMPTY
98069: LIST
98070: LIST
98071: PUSH
98072: EMPTY
98073: LIST
98074: LIST
98075: LIST
98076: PPUSH
98077: CALL_OW 69
98081: ST_TO_ADDR
// if not tmp then
98082: LD_VAR 0 1
98086: NOT
98087: IFFALSE 98091
// exit ;
98089: GO 98117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
98091: LD_VAR 0 1
98095: PUSH
98096: LD_INT 1
98098: PPUSH
98099: LD_VAR 0 1
98103: PPUSH
98104: CALL_OW 12
98108: ARRAY
98109: PPUSH
98110: LD_INT 200
98112: PPUSH
98113: CALL_OW 234
// end ;
98117: PPOPN 1
98119: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
98120: LD_EXP 98
98124: PUSH
98125: LD_EXP 127
98129: AND
98130: IFFALSE 98209
98132: GO 98134
98134: DISABLE
98135: LD_INT 0
98137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
98138: LD_ADDR_VAR 0 1
98142: PUSH
98143: LD_INT 22
98145: PUSH
98146: LD_OWVAR 2
98150: PUSH
98151: EMPTY
98152: LIST
98153: LIST
98154: PUSH
98155: LD_INT 21
98157: PUSH
98158: LD_INT 2
98160: PUSH
98161: EMPTY
98162: LIST
98163: LIST
98164: PUSH
98165: EMPTY
98166: LIST
98167: LIST
98168: PPUSH
98169: CALL_OW 69
98173: ST_TO_ADDR
// if not tmp then
98174: LD_VAR 0 1
98178: NOT
98179: IFFALSE 98183
// exit ;
98181: GO 98209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
98183: LD_VAR 0 1
98187: PUSH
98188: LD_INT 1
98190: PPUSH
98191: LD_VAR 0 1
98195: PPUSH
98196: CALL_OW 12
98200: ARRAY
98201: PPUSH
98202: LD_INT 60
98204: PPUSH
98205: CALL_OW 234
// end ;
98209: PPOPN 1
98211: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
98212: LD_EXP 98
98216: PUSH
98217: LD_EXP 128
98221: AND
98222: IFFALSE 98321
98224: GO 98226
98226: DISABLE
98227: LD_INT 0
98229: PPUSH
98230: PPUSH
// begin enable ;
98231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
98232: LD_ADDR_VAR 0 1
98236: PUSH
98237: LD_INT 22
98239: PUSH
98240: LD_OWVAR 2
98244: PUSH
98245: EMPTY
98246: LIST
98247: LIST
98248: PUSH
98249: LD_INT 61
98251: PUSH
98252: EMPTY
98253: LIST
98254: PUSH
98255: LD_INT 33
98257: PUSH
98258: LD_INT 2
98260: PUSH
98261: EMPTY
98262: LIST
98263: LIST
98264: PUSH
98265: EMPTY
98266: LIST
98267: LIST
98268: LIST
98269: PPUSH
98270: CALL_OW 69
98274: ST_TO_ADDR
// if not tmp then
98275: LD_VAR 0 1
98279: NOT
98280: IFFALSE 98284
// exit ;
98282: GO 98321
// for i in tmp do
98284: LD_ADDR_VAR 0 2
98288: PUSH
98289: LD_VAR 0 1
98293: PUSH
98294: FOR_IN
98295: IFFALSE 98319
// if IsControledBy ( i ) then
98297: LD_VAR 0 2
98301: PPUSH
98302: CALL_OW 312
98306: IFFALSE 98317
// ComUnlink ( i ) ;
98308: LD_VAR 0 2
98312: PPUSH
98313: CALL_OW 136
98317: GO 98294
98319: POP
98320: POP
// end ;
98321: PPOPN 2
98323: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
98324: LD_EXP 98
98328: PUSH
98329: LD_EXP 129
98333: AND
98334: IFFALSE 98474
98336: GO 98338
98338: DISABLE
98339: LD_INT 0
98341: PPUSH
98342: PPUSH
// begin ToLua ( displayPowell(); ) ;
98343: LD_STRING displayPowell();
98345: PPUSH
98346: CALL_OW 559
// uc_side := 0 ;
98350: LD_ADDR_OWVAR 20
98354: PUSH
98355: LD_INT 0
98357: ST_TO_ADDR
// uc_nation := 2 ;
98358: LD_ADDR_OWVAR 21
98362: PUSH
98363: LD_INT 2
98365: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
98366: LD_ADDR_OWVAR 37
98370: PUSH
98371: LD_INT 14
98373: ST_TO_ADDR
// vc_engine := engine_siberite ;
98374: LD_ADDR_OWVAR 39
98378: PUSH
98379: LD_INT 3
98381: ST_TO_ADDR
// vc_control := control_apeman ;
98382: LD_ADDR_OWVAR 38
98386: PUSH
98387: LD_INT 5
98389: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
98390: LD_ADDR_OWVAR 40
98394: PUSH
98395: LD_INT 29
98397: ST_TO_ADDR
// un := CreateVehicle ;
98398: LD_ADDR_VAR 0 2
98402: PUSH
98403: CALL_OW 45
98407: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
98408: LD_VAR 0 2
98412: PPUSH
98413: LD_INT 1
98415: PPUSH
98416: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
98420: LD_INT 35
98422: PPUSH
98423: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
98427: LD_VAR 0 2
98431: PPUSH
98432: LD_INT 22
98434: PUSH
98435: LD_OWVAR 2
98439: PUSH
98440: EMPTY
98441: LIST
98442: LIST
98443: PPUSH
98444: CALL_OW 69
98448: PPUSH
98449: LD_VAR 0 2
98453: PPUSH
98454: CALL_OW 74
98458: PPUSH
98459: CALL_OW 115
// until IsDead ( un ) ;
98463: LD_VAR 0 2
98467: PPUSH
98468: CALL_OW 301
98472: IFFALSE 98420
// end ;
98474: PPOPN 2
98476: END
// every 0 0$1 trigger StreamModeActive and sStu do
98477: LD_EXP 98
98481: PUSH
98482: LD_EXP 137
98486: AND
98487: IFFALSE 98503
98489: GO 98491
98491: DISABLE
// begin ToLua ( displayStucuk(); ) ;
98492: LD_STRING displayStucuk();
98494: PPUSH
98495: CALL_OW 559
// ResetFog ;
98499: CALL_OW 335
// end ;
98503: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
98504: LD_EXP 98
98508: PUSH
98509: LD_EXP 130
98513: AND
98514: IFFALSE 98655
98516: GO 98518
98518: DISABLE
98519: LD_INT 0
98521: PPUSH
98522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98523: LD_ADDR_VAR 0 2
98527: PUSH
98528: LD_INT 22
98530: PUSH
98531: LD_OWVAR 2
98535: PUSH
98536: EMPTY
98537: LIST
98538: LIST
98539: PUSH
98540: LD_INT 21
98542: PUSH
98543: LD_INT 1
98545: PUSH
98546: EMPTY
98547: LIST
98548: LIST
98549: PUSH
98550: EMPTY
98551: LIST
98552: LIST
98553: PPUSH
98554: CALL_OW 69
98558: ST_TO_ADDR
// if not tmp then
98559: LD_VAR 0 2
98563: NOT
98564: IFFALSE 98568
// exit ;
98566: GO 98655
// un := tmp [ rand ( 1 , tmp ) ] ;
98568: LD_ADDR_VAR 0 1
98572: PUSH
98573: LD_VAR 0 2
98577: PUSH
98578: LD_INT 1
98580: PPUSH
98581: LD_VAR 0 2
98585: PPUSH
98586: CALL_OW 12
98590: ARRAY
98591: ST_TO_ADDR
// SetSide ( un , 0 ) ;
98592: LD_VAR 0 1
98596: PPUSH
98597: LD_INT 0
98599: PPUSH
98600: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
98604: LD_VAR 0 1
98608: PPUSH
98609: LD_OWVAR 3
98613: PUSH
98614: LD_VAR 0 1
98618: DIFF
98619: PPUSH
98620: LD_VAR 0 1
98624: PPUSH
98625: CALL_OW 74
98629: PPUSH
98630: CALL_OW 115
// wait ( 0 0$20 ) ;
98634: LD_INT 700
98636: PPUSH
98637: CALL_OW 67
// SetSide ( un , your_side ) ;
98641: LD_VAR 0 1
98645: PPUSH
98646: LD_OWVAR 2
98650: PPUSH
98651: CALL_OW 235
// end ;
98655: PPOPN 2
98657: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
98658: LD_EXP 98
98662: PUSH
98663: LD_EXP 131
98667: AND
98668: IFFALSE 98774
98670: GO 98672
98672: DISABLE
98673: LD_INT 0
98675: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
98676: LD_ADDR_VAR 0 1
98680: PUSH
98681: LD_INT 22
98683: PUSH
98684: LD_OWVAR 2
98688: PUSH
98689: EMPTY
98690: LIST
98691: LIST
98692: PUSH
98693: LD_INT 2
98695: PUSH
98696: LD_INT 30
98698: PUSH
98699: LD_INT 0
98701: PUSH
98702: EMPTY
98703: LIST
98704: LIST
98705: PUSH
98706: LD_INT 30
98708: PUSH
98709: LD_INT 1
98711: PUSH
98712: EMPTY
98713: LIST
98714: LIST
98715: PUSH
98716: EMPTY
98717: LIST
98718: LIST
98719: LIST
98720: PUSH
98721: EMPTY
98722: LIST
98723: LIST
98724: PPUSH
98725: CALL_OW 69
98729: ST_TO_ADDR
// if not depot then
98730: LD_VAR 0 1
98734: NOT
98735: IFFALSE 98739
// exit ;
98737: GO 98774
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
98739: LD_VAR 0 1
98743: PUSH
98744: LD_INT 1
98746: ARRAY
98747: PPUSH
98748: CALL_OW 250
98752: PPUSH
98753: LD_VAR 0 1
98757: PUSH
98758: LD_INT 1
98760: ARRAY
98761: PPUSH
98762: CALL_OW 251
98766: PPUSH
98767: LD_INT 70
98769: PPUSH
98770: CALL_OW 495
// end ;
98774: PPOPN 1
98776: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
98777: LD_EXP 98
98781: PUSH
98782: LD_EXP 132
98786: AND
98787: IFFALSE 98998
98789: GO 98791
98791: DISABLE
98792: LD_INT 0
98794: PPUSH
98795: PPUSH
98796: PPUSH
98797: PPUSH
98798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98799: LD_ADDR_VAR 0 5
98803: PUSH
98804: LD_INT 22
98806: PUSH
98807: LD_OWVAR 2
98811: PUSH
98812: EMPTY
98813: LIST
98814: LIST
98815: PUSH
98816: LD_INT 21
98818: PUSH
98819: LD_INT 1
98821: PUSH
98822: EMPTY
98823: LIST
98824: LIST
98825: PUSH
98826: EMPTY
98827: LIST
98828: LIST
98829: PPUSH
98830: CALL_OW 69
98834: ST_TO_ADDR
// if not tmp then
98835: LD_VAR 0 5
98839: NOT
98840: IFFALSE 98844
// exit ;
98842: GO 98998
// for i in tmp do
98844: LD_ADDR_VAR 0 1
98848: PUSH
98849: LD_VAR 0 5
98853: PUSH
98854: FOR_IN
98855: IFFALSE 98996
// begin d := rand ( 0 , 5 ) ;
98857: LD_ADDR_VAR 0 4
98861: PUSH
98862: LD_INT 0
98864: PPUSH
98865: LD_INT 5
98867: PPUSH
98868: CALL_OW 12
98872: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
98873: LD_ADDR_VAR 0 2
98877: PUSH
98878: LD_VAR 0 1
98882: PPUSH
98883: CALL_OW 250
98887: PPUSH
98888: LD_VAR 0 4
98892: PPUSH
98893: LD_INT 3
98895: PPUSH
98896: LD_INT 12
98898: PPUSH
98899: CALL_OW 12
98903: PPUSH
98904: CALL_OW 272
98908: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
98909: LD_ADDR_VAR 0 3
98913: PUSH
98914: LD_VAR 0 1
98918: PPUSH
98919: CALL_OW 251
98923: PPUSH
98924: LD_VAR 0 4
98928: PPUSH
98929: LD_INT 3
98931: PPUSH
98932: LD_INT 12
98934: PPUSH
98935: CALL_OW 12
98939: PPUSH
98940: CALL_OW 273
98944: ST_TO_ADDR
// if ValidHex ( x , y ) then
98945: LD_VAR 0 2
98949: PPUSH
98950: LD_VAR 0 3
98954: PPUSH
98955: CALL_OW 488
98959: IFFALSE 98994
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
98961: LD_VAR 0 1
98965: PPUSH
98966: LD_VAR 0 2
98970: PPUSH
98971: LD_VAR 0 3
98975: PPUSH
98976: LD_INT 3
98978: PPUSH
98979: LD_INT 6
98981: PPUSH
98982: CALL_OW 12
98986: PPUSH
98987: LD_INT 1
98989: PPUSH
98990: CALL_OW 483
// end ;
98994: GO 98854
98996: POP
98997: POP
// end ;
98998: PPOPN 5
99000: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
99001: LD_EXP 98
99005: PUSH
99006: LD_EXP 133
99010: AND
99011: IFFALSE 99105
99013: GO 99015
99015: DISABLE
99016: LD_INT 0
99018: PPUSH
99019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
99020: LD_ADDR_VAR 0 2
99024: PUSH
99025: LD_INT 22
99027: PUSH
99028: LD_OWVAR 2
99032: PUSH
99033: EMPTY
99034: LIST
99035: LIST
99036: PUSH
99037: LD_INT 32
99039: PUSH
99040: LD_INT 1
99042: PUSH
99043: EMPTY
99044: LIST
99045: LIST
99046: PUSH
99047: LD_INT 21
99049: PUSH
99050: LD_INT 2
99052: PUSH
99053: EMPTY
99054: LIST
99055: LIST
99056: PUSH
99057: EMPTY
99058: LIST
99059: LIST
99060: LIST
99061: PPUSH
99062: CALL_OW 69
99066: ST_TO_ADDR
// if not tmp then
99067: LD_VAR 0 2
99071: NOT
99072: IFFALSE 99076
// exit ;
99074: GO 99105
// for i in tmp do
99076: LD_ADDR_VAR 0 1
99080: PUSH
99081: LD_VAR 0 2
99085: PUSH
99086: FOR_IN
99087: IFFALSE 99103
// SetFuel ( i , 0 ) ;
99089: LD_VAR 0 1
99093: PPUSH
99094: LD_INT 0
99096: PPUSH
99097: CALL_OW 240
99101: GO 99086
99103: POP
99104: POP
// end ;
99105: PPOPN 2
99107: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
99108: LD_EXP 98
99112: PUSH
99113: LD_EXP 134
99117: AND
99118: IFFALSE 99184
99120: GO 99122
99122: DISABLE
99123: LD_INT 0
99125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
99126: LD_ADDR_VAR 0 1
99130: PUSH
99131: LD_INT 22
99133: PUSH
99134: LD_OWVAR 2
99138: PUSH
99139: EMPTY
99140: LIST
99141: LIST
99142: PUSH
99143: LD_INT 30
99145: PUSH
99146: LD_INT 29
99148: PUSH
99149: EMPTY
99150: LIST
99151: LIST
99152: PUSH
99153: EMPTY
99154: LIST
99155: LIST
99156: PPUSH
99157: CALL_OW 69
99161: ST_TO_ADDR
// if not tmp then
99162: LD_VAR 0 1
99166: NOT
99167: IFFALSE 99171
// exit ;
99169: GO 99184
// DestroyUnit ( tmp [ 1 ] ) ;
99171: LD_VAR 0 1
99175: PUSH
99176: LD_INT 1
99178: ARRAY
99179: PPUSH
99180: CALL_OW 65
// end ;
99184: PPOPN 1
99186: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
99187: LD_EXP 98
99191: PUSH
99192: LD_EXP 136
99196: AND
99197: IFFALSE 99326
99199: GO 99201
99201: DISABLE
99202: LD_INT 0
99204: PPUSH
// begin uc_side := 0 ;
99205: LD_ADDR_OWVAR 20
99209: PUSH
99210: LD_INT 0
99212: ST_TO_ADDR
// uc_nation := nation_arabian ;
99213: LD_ADDR_OWVAR 21
99217: PUSH
99218: LD_INT 2
99220: ST_TO_ADDR
// hc_gallery :=  ;
99221: LD_ADDR_OWVAR 33
99225: PUSH
99226: LD_STRING 
99228: ST_TO_ADDR
// hc_name :=  ;
99229: LD_ADDR_OWVAR 26
99233: PUSH
99234: LD_STRING 
99236: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
99237: LD_INT 1
99239: PPUSH
99240: LD_INT 11
99242: PPUSH
99243: LD_INT 10
99245: PPUSH
99246: CALL_OW 380
// un := CreateHuman ;
99250: LD_ADDR_VAR 0 1
99254: PUSH
99255: CALL_OW 44
99259: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
99260: LD_VAR 0 1
99264: PPUSH
99265: LD_INT 1
99267: PPUSH
99268: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
99272: LD_INT 35
99274: PPUSH
99275: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
99279: LD_VAR 0 1
99283: PPUSH
99284: LD_INT 22
99286: PUSH
99287: LD_OWVAR 2
99291: PUSH
99292: EMPTY
99293: LIST
99294: LIST
99295: PPUSH
99296: CALL_OW 69
99300: PPUSH
99301: LD_VAR 0 1
99305: PPUSH
99306: CALL_OW 74
99310: PPUSH
99311: CALL_OW 115
// until IsDead ( un ) ;
99315: LD_VAR 0 1
99319: PPUSH
99320: CALL_OW 301
99324: IFFALSE 99272
// end ;
99326: PPOPN 1
99328: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
99329: LD_EXP 98
99333: PUSH
99334: LD_EXP 138
99338: AND
99339: IFFALSE 99351
99341: GO 99343
99343: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
99344: LD_STRING earthquake(getX(game), 0, 32)
99346: PPUSH
99347: CALL_OW 559
99351: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
99352: LD_EXP 98
99356: PUSH
99357: LD_EXP 139
99361: AND
99362: IFFALSE 99453
99364: GO 99366
99366: DISABLE
99367: LD_INT 0
99369: PPUSH
// begin enable ;
99370: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
99371: LD_ADDR_VAR 0 1
99375: PUSH
99376: LD_INT 22
99378: PUSH
99379: LD_OWVAR 2
99383: PUSH
99384: EMPTY
99385: LIST
99386: LIST
99387: PUSH
99388: LD_INT 21
99390: PUSH
99391: LD_INT 2
99393: PUSH
99394: EMPTY
99395: LIST
99396: LIST
99397: PUSH
99398: LD_INT 33
99400: PUSH
99401: LD_INT 3
99403: PUSH
99404: EMPTY
99405: LIST
99406: LIST
99407: PUSH
99408: EMPTY
99409: LIST
99410: LIST
99411: LIST
99412: PPUSH
99413: CALL_OW 69
99417: ST_TO_ADDR
// if not tmp then
99418: LD_VAR 0 1
99422: NOT
99423: IFFALSE 99427
// exit ;
99425: GO 99453
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
99427: LD_VAR 0 1
99431: PUSH
99432: LD_INT 1
99434: PPUSH
99435: LD_VAR 0 1
99439: PPUSH
99440: CALL_OW 12
99444: ARRAY
99445: PPUSH
99446: LD_INT 1
99448: PPUSH
99449: CALL_OW 234
// end ;
99453: PPOPN 1
99455: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
99456: LD_EXP 98
99460: PUSH
99461: LD_EXP 140
99465: AND
99466: IFFALSE 99607
99468: GO 99470
99470: DISABLE
99471: LD_INT 0
99473: PPUSH
99474: PPUSH
99475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99476: LD_ADDR_VAR 0 3
99480: PUSH
99481: LD_INT 22
99483: PUSH
99484: LD_OWVAR 2
99488: PUSH
99489: EMPTY
99490: LIST
99491: LIST
99492: PUSH
99493: LD_INT 25
99495: PUSH
99496: LD_INT 1
99498: PUSH
99499: EMPTY
99500: LIST
99501: LIST
99502: PUSH
99503: EMPTY
99504: LIST
99505: LIST
99506: PPUSH
99507: CALL_OW 69
99511: ST_TO_ADDR
// if not tmp then
99512: LD_VAR 0 3
99516: NOT
99517: IFFALSE 99521
// exit ;
99519: GO 99607
// un := tmp [ rand ( 1 , tmp ) ] ;
99521: LD_ADDR_VAR 0 2
99525: PUSH
99526: LD_VAR 0 3
99530: PUSH
99531: LD_INT 1
99533: PPUSH
99534: LD_VAR 0 3
99538: PPUSH
99539: CALL_OW 12
99543: ARRAY
99544: ST_TO_ADDR
// if Crawls ( un ) then
99545: LD_VAR 0 2
99549: PPUSH
99550: CALL_OW 318
99554: IFFALSE 99565
// ComWalk ( un ) ;
99556: LD_VAR 0 2
99560: PPUSH
99561: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
99565: LD_VAR 0 2
99569: PPUSH
99570: LD_INT 9
99572: PPUSH
99573: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
99577: LD_INT 28
99579: PPUSH
99580: LD_OWVAR 2
99584: PPUSH
99585: LD_INT 2
99587: PPUSH
99588: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
99592: LD_INT 29
99594: PPUSH
99595: LD_OWVAR 2
99599: PPUSH
99600: LD_INT 2
99602: PPUSH
99603: CALL_OW 322
// end ;
99607: PPOPN 3
99609: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
99610: LD_EXP 98
99614: PUSH
99615: LD_EXP 141
99619: AND
99620: IFFALSE 99731
99622: GO 99624
99624: DISABLE
99625: LD_INT 0
99627: PPUSH
99628: PPUSH
99629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99630: LD_ADDR_VAR 0 3
99634: PUSH
99635: LD_INT 22
99637: PUSH
99638: LD_OWVAR 2
99642: PUSH
99643: EMPTY
99644: LIST
99645: LIST
99646: PUSH
99647: LD_INT 25
99649: PUSH
99650: LD_INT 1
99652: PUSH
99653: EMPTY
99654: LIST
99655: LIST
99656: PUSH
99657: EMPTY
99658: LIST
99659: LIST
99660: PPUSH
99661: CALL_OW 69
99665: ST_TO_ADDR
// if not tmp then
99666: LD_VAR 0 3
99670: NOT
99671: IFFALSE 99675
// exit ;
99673: GO 99731
// un := tmp [ rand ( 1 , tmp ) ] ;
99675: LD_ADDR_VAR 0 2
99679: PUSH
99680: LD_VAR 0 3
99684: PUSH
99685: LD_INT 1
99687: PPUSH
99688: LD_VAR 0 3
99692: PPUSH
99693: CALL_OW 12
99697: ARRAY
99698: ST_TO_ADDR
// if Crawls ( un ) then
99699: LD_VAR 0 2
99703: PPUSH
99704: CALL_OW 318
99708: IFFALSE 99719
// ComWalk ( un ) ;
99710: LD_VAR 0 2
99714: PPUSH
99715: CALL_OW 138
// SetClass ( un , class_mortar ) ;
99719: LD_VAR 0 2
99723: PPUSH
99724: LD_INT 8
99726: PPUSH
99727: CALL_OW 336
// end ;
99731: PPOPN 3
99733: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
99734: LD_EXP 98
99738: PUSH
99739: LD_EXP 142
99743: AND
99744: IFFALSE 99888
99746: GO 99748
99748: DISABLE
99749: LD_INT 0
99751: PPUSH
99752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
99753: LD_ADDR_VAR 0 2
99757: PUSH
99758: LD_INT 22
99760: PUSH
99761: LD_OWVAR 2
99765: PUSH
99766: EMPTY
99767: LIST
99768: LIST
99769: PUSH
99770: LD_INT 21
99772: PUSH
99773: LD_INT 2
99775: PUSH
99776: EMPTY
99777: LIST
99778: LIST
99779: PUSH
99780: LD_INT 2
99782: PUSH
99783: LD_INT 34
99785: PUSH
99786: LD_INT 12
99788: PUSH
99789: EMPTY
99790: LIST
99791: LIST
99792: PUSH
99793: LD_INT 34
99795: PUSH
99796: LD_INT 51
99798: PUSH
99799: EMPTY
99800: LIST
99801: LIST
99802: PUSH
99803: LD_INT 34
99805: PUSH
99806: LD_INT 32
99808: PUSH
99809: EMPTY
99810: LIST
99811: LIST
99812: PUSH
99813: EMPTY
99814: LIST
99815: LIST
99816: LIST
99817: LIST
99818: PUSH
99819: EMPTY
99820: LIST
99821: LIST
99822: LIST
99823: PPUSH
99824: CALL_OW 69
99828: ST_TO_ADDR
// if not tmp then
99829: LD_VAR 0 2
99833: NOT
99834: IFFALSE 99838
// exit ;
99836: GO 99888
// for i in tmp do
99838: LD_ADDR_VAR 0 1
99842: PUSH
99843: LD_VAR 0 2
99847: PUSH
99848: FOR_IN
99849: IFFALSE 99886
// if GetCargo ( i , mat_artifact ) = 0 then
99851: LD_VAR 0 1
99855: PPUSH
99856: LD_INT 4
99858: PPUSH
99859: CALL_OW 289
99863: PUSH
99864: LD_INT 0
99866: EQUAL
99867: IFFALSE 99884
// SetCargo ( i , mat_siberit , 100 ) ;
99869: LD_VAR 0 1
99873: PPUSH
99874: LD_INT 3
99876: PPUSH
99877: LD_INT 100
99879: PPUSH
99880: CALL_OW 290
99884: GO 99848
99886: POP
99887: POP
// end ;
99888: PPOPN 2
99890: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
99891: LD_EXP 98
99895: PUSH
99896: LD_EXP 143
99900: AND
99901: IFFALSE 100054
99903: GO 99905
99905: DISABLE
99906: LD_INT 0
99908: PPUSH
99909: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
99910: LD_ADDR_VAR 0 2
99914: PUSH
99915: LD_INT 22
99917: PUSH
99918: LD_OWVAR 2
99922: PUSH
99923: EMPTY
99924: LIST
99925: LIST
99926: PPUSH
99927: CALL_OW 69
99931: ST_TO_ADDR
// if not tmp then
99932: LD_VAR 0 2
99936: NOT
99937: IFFALSE 99941
// exit ;
99939: GO 100054
// for i := 1 to 2 do
99941: LD_ADDR_VAR 0 1
99945: PUSH
99946: DOUBLE
99947: LD_INT 1
99949: DEC
99950: ST_TO_ADDR
99951: LD_INT 2
99953: PUSH
99954: FOR_TO
99955: IFFALSE 100052
// begin uc_side := your_side ;
99957: LD_ADDR_OWVAR 20
99961: PUSH
99962: LD_OWVAR 2
99966: ST_TO_ADDR
// uc_nation := nation_american ;
99967: LD_ADDR_OWVAR 21
99971: PUSH
99972: LD_INT 1
99974: ST_TO_ADDR
// vc_chassis := us_morphling ;
99975: LD_ADDR_OWVAR 37
99979: PUSH
99980: LD_INT 5
99982: ST_TO_ADDR
// vc_engine := engine_siberite ;
99983: LD_ADDR_OWVAR 39
99987: PUSH
99988: LD_INT 3
99990: ST_TO_ADDR
// vc_control := control_computer ;
99991: LD_ADDR_OWVAR 38
99995: PUSH
99996: LD_INT 3
99998: ST_TO_ADDR
// vc_weapon := us_double_laser ;
99999: LD_ADDR_OWVAR 40
100003: PUSH
100004: LD_INT 10
100006: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
100007: CALL_OW 45
100011: PPUSH
100012: LD_VAR 0 2
100016: PUSH
100017: LD_INT 1
100019: ARRAY
100020: PPUSH
100021: CALL_OW 250
100025: PPUSH
100026: LD_VAR 0 2
100030: PUSH
100031: LD_INT 1
100033: ARRAY
100034: PPUSH
100035: CALL_OW 251
100039: PPUSH
100040: LD_INT 12
100042: PPUSH
100043: LD_INT 1
100045: PPUSH
100046: CALL_OW 50
// end ;
100050: GO 99954
100052: POP
100053: POP
// end ;
100054: PPOPN 2
100056: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
100057: LD_EXP 98
100061: PUSH
100062: LD_EXP 144
100066: AND
100067: IFFALSE 100289
100069: GO 100071
100071: DISABLE
100072: LD_INT 0
100074: PPUSH
100075: PPUSH
100076: PPUSH
100077: PPUSH
100078: PPUSH
100079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100080: LD_ADDR_VAR 0 6
100084: PUSH
100085: LD_INT 22
100087: PUSH
100088: LD_OWVAR 2
100092: PUSH
100093: EMPTY
100094: LIST
100095: LIST
100096: PUSH
100097: LD_INT 21
100099: PUSH
100100: LD_INT 1
100102: PUSH
100103: EMPTY
100104: LIST
100105: LIST
100106: PUSH
100107: LD_INT 3
100109: PUSH
100110: LD_INT 23
100112: PUSH
100113: LD_INT 0
100115: PUSH
100116: EMPTY
100117: LIST
100118: LIST
100119: PUSH
100120: EMPTY
100121: LIST
100122: LIST
100123: PUSH
100124: EMPTY
100125: LIST
100126: LIST
100127: LIST
100128: PPUSH
100129: CALL_OW 69
100133: ST_TO_ADDR
// if not tmp then
100134: LD_VAR 0 6
100138: NOT
100139: IFFALSE 100143
// exit ;
100141: GO 100289
// s1 := rand ( 1 , 4 ) ;
100143: LD_ADDR_VAR 0 2
100147: PUSH
100148: LD_INT 1
100150: PPUSH
100151: LD_INT 4
100153: PPUSH
100154: CALL_OW 12
100158: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
100159: LD_ADDR_VAR 0 4
100163: PUSH
100164: LD_VAR 0 6
100168: PUSH
100169: LD_INT 1
100171: ARRAY
100172: PPUSH
100173: LD_VAR 0 2
100177: PPUSH
100178: CALL_OW 259
100182: ST_TO_ADDR
// if s1 = 1 then
100183: LD_VAR 0 2
100187: PUSH
100188: LD_INT 1
100190: EQUAL
100191: IFFALSE 100211
// s2 := rand ( 2 , 4 ) else
100193: LD_ADDR_VAR 0 3
100197: PUSH
100198: LD_INT 2
100200: PPUSH
100201: LD_INT 4
100203: PPUSH
100204: CALL_OW 12
100208: ST_TO_ADDR
100209: GO 100219
// s2 := 1 ;
100211: LD_ADDR_VAR 0 3
100215: PUSH
100216: LD_INT 1
100218: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
100219: LD_ADDR_VAR 0 5
100223: PUSH
100224: LD_VAR 0 6
100228: PUSH
100229: LD_INT 1
100231: ARRAY
100232: PPUSH
100233: LD_VAR 0 3
100237: PPUSH
100238: CALL_OW 259
100242: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
100243: LD_VAR 0 6
100247: PUSH
100248: LD_INT 1
100250: ARRAY
100251: PPUSH
100252: LD_VAR 0 2
100256: PPUSH
100257: LD_VAR 0 5
100261: PPUSH
100262: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
100266: LD_VAR 0 6
100270: PUSH
100271: LD_INT 1
100273: ARRAY
100274: PPUSH
100275: LD_VAR 0 3
100279: PPUSH
100280: LD_VAR 0 4
100284: PPUSH
100285: CALL_OW 237
// end ;
100289: PPOPN 6
100291: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
100292: LD_EXP 98
100296: PUSH
100297: LD_EXP 145
100301: AND
100302: IFFALSE 100381
100304: GO 100306
100306: DISABLE
100307: LD_INT 0
100309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
100310: LD_ADDR_VAR 0 1
100314: PUSH
100315: LD_INT 22
100317: PUSH
100318: LD_OWVAR 2
100322: PUSH
100323: EMPTY
100324: LIST
100325: LIST
100326: PUSH
100327: LD_INT 30
100329: PUSH
100330: LD_INT 3
100332: PUSH
100333: EMPTY
100334: LIST
100335: LIST
100336: PUSH
100337: EMPTY
100338: LIST
100339: LIST
100340: PPUSH
100341: CALL_OW 69
100345: ST_TO_ADDR
// if not tmp then
100346: LD_VAR 0 1
100350: NOT
100351: IFFALSE 100355
// exit ;
100353: GO 100381
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
100355: LD_VAR 0 1
100359: PUSH
100360: LD_INT 1
100362: PPUSH
100363: LD_VAR 0 1
100367: PPUSH
100368: CALL_OW 12
100372: ARRAY
100373: PPUSH
100374: LD_INT 1
100376: PPUSH
100377: CALL_OW 234
// end ;
100381: PPOPN 1
100383: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
100384: LD_EXP 98
100388: PUSH
100389: LD_EXP 146
100393: AND
100394: IFFALSE 100506
100396: GO 100398
100398: DISABLE
100399: LD_INT 0
100401: PPUSH
100402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
100403: LD_ADDR_VAR 0 2
100407: PUSH
100408: LD_INT 22
100410: PUSH
100411: LD_OWVAR 2
100415: PUSH
100416: EMPTY
100417: LIST
100418: LIST
100419: PUSH
100420: LD_INT 2
100422: PUSH
100423: LD_INT 30
100425: PUSH
100426: LD_INT 27
100428: PUSH
100429: EMPTY
100430: LIST
100431: LIST
100432: PUSH
100433: LD_INT 30
100435: PUSH
100436: LD_INT 26
100438: PUSH
100439: EMPTY
100440: LIST
100441: LIST
100442: PUSH
100443: LD_INT 30
100445: PUSH
100446: LD_INT 28
100448: PUSH
100449: EMPTY
100450: LIST
100451: LIST
100452: PUSH
100453: EMPTY
100454: LIST
100455: LIST
100456: LIST
100457: LIST
100458: PUSH
100459: EMPTY
100460: LIST
100461: LIST
100462: PPUSH
100463: CALL_OW 69
100467: ST_TO_ADDR
// if not tmp then
100468: LD_VAR 0 2
100472: NOT
100473: IFFALSE 100477
// exit ;
100475: GO 100506
// for i in tmp do
100477: LD_ADDR_VAR 0 1
100481: PUSH
100482: LD_VAR 0 2
100486: PUSH
100487: FOR_IN
100488: IFFALSE 100504
// SetLives ( i , 1 ) ;
100490: LD_VAR 0 1
100494: PPUSH
100495: LD_INT 1
100497: PPUSH
100498: CALL_OW 234
100502: GO 100487
100504: POP
100505: POP
// end ;
100506: PPOPN 2
100508: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
100509: LD_EXP 98
100513: PUSH
100514: LD_EXP 147
100518: AND
100519: IFFALSE 100793
100521: GO 100523
100523: DISABLE
100524: LD_INT 0
100526: PPUSH
100527: PPUSH
100528: PPUSH
// begin i := rand ( 1 , 7 ) ;
100529: LD_ADDR_VAR 0 1
100533: PUSH
100534: LD_INT 1
100536: PPUSH
100537: LD_INT 7
100539: PPUSH
100540: CALL_OW 12
100544: ST_TO_ADDR
// case i of 1 :
100545: LD_VAR 0 1
100549: PUSH
100550: LD_INT 1
100552: DOUBLE
100553: EQUAL
100554: IFTRUE 100558
100556: GO 100568
100558: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
100559: LD_STRING earthquake(getX(game), 0, 32)
100561: PPUSH
100562: CALL_OW 559
100566: GO 100793
100568: LD_INT 2
100570: DOUBLE
100571: EQUAL
100572: IFTRUE 100576
100574: GO 100590
100576: POP
// begin ToLua ( displayStucuk(); ) ;
100577: LD_STRING displayStucuk();
100579: PPUSH
100580: CALL_OW 559
// ResetFog ;
100584: CALL_OW 335
// end ; 3 :
100588: GO 100793
100590: LD_INT 3
100592: DOUBLE
100593: EQUAL
100594: IFTRUE 100598
100596: GO 100702
100598: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
100599: LD_ADDR_VAR 0 2
100603: PUSH
100604: LD_INT 22
100606: PUSH
100607: LD_OWVAR 2
100611: PUSH
100612: EMPTY
100613: LIST
100614: LIST
100615: PUSH
100616: LD_INT 25
100618: PUSH
100619: LD_INT 1
100621: PUSH
100622: EMPTY
100623: LIST
100624: LIST
100625: PUSH
100626: EMPTY
100627: LIST
100628: LIST
100629: PPUSH
100630: CALL_OW 69
100634: ST_TO_ADDR
// if not tmp then
100635: LD_VAR 0 2
100639: NOT
100640: IFFALSE 100644
// exit ;
100642: GO 100793
// un := tmp [ rand ( 1 , tmp ) ] ;
100644: LD_ADDR_VAR 0 3
100648: PUSH
100649: LD_VAR 0 2
100653: PUSH
100654: LD_INT 1
100656: PPUSH
100657: LD_VAR 0 2
100661: PPUSH
100662: CALL_OW 12
100666: ARRAY
100667: ST_TO_ADDR
// if Crawls ( un ) then
100668: LD_VAR 0 3
100672: PPUSH
100673: CALL_OW 318
100677: IFFALSE 100688
// ComWalk ( un ) ;
100679: LD_VAR 0 3
100683: PPUSH
100684: CALL_OW 138
// SetClass ( un , class_mortar ) ;
100688: LD_VAR 0 3
100692: PPUSH
100693: LD_INT 8
100695: PPUSH
100696: CALL_OW 336
// end ; 4 :
100700: GO 100793
100702: LD_INT 4
100704: DOUBLE
100705: EQUAL
100706: IFTRUE 100710
100708: GO 100771
100710: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
100711: LD_ADDR_VAR 0 2
100715: PUSH
100716: LD_INT 22
100718: PUSH
100719: LD_OWVAR 2
100723: PUSH
100724: EMPTY
100725: LIST
100726: LIST
100727: PUSH
100728: LD_INT 30
100730: PUSH
100731: LD_INT 29
100733: PUSH
100734: EMPTY
100735: LIST
100736: LIST
100737: PUSH
100738: EMPTY
100739: LIST
100740: LIST
100741: PPUSH
100742: CALL_OW 69
100746: ST_TO_ADDR
// if not tmp then
100747: LD_VAR 0 2
100751: NOT
100752: IFFALSE 100756
// exit ;
100754: GO 100793
// DestroyUnit ( tmp [ 1 ] ) ;
100756: LD_VAR 0 2
100760: PUSH
100761: LD_INT 1
100763: ARRAY
100764: PPUSH
100765: CALL_OW 65
// end ; 5 .. 7 :
100769: GO 100793
100771: LD_INT 5
100773: DOUBLE
100774: GREATEREQUAL
100775: IFFALSE 100783
100777: LD_INT 7
100779: DOUBLE
100780: LESSEQUAL
100781: IFTRUE 100785
100783: GO 100792
100785: POP
// StreamSibBomb ; end ;
100786: CALL 97073 0 0
100790: GO 100793
100792: POP
// end ;
100793: PPOPN 3
100795: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
100796: LD_EXP 98
100800: PUSH
100801: LD_EXP 148
100805: AND
100806: IFFALSE 100962
100808: GO 100810
100810: DISABLE
100811: LD_INT 0
100813: PPUSH
100814: PPUSH
100815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
100816: LD_ADDR_VAR 0 2
100820: PUSH
100821: LD_INT 81
100823: PUSH
100824: LD_OWVAR 2
100828: PUSH
100829: EMPTY
100830: LIST
100831: LIST
100832: PUSH
100833: LD_INT 2
100835: PUSH
100836: LD_INT 21
100838: PUSH
100839: LD_INT 1
100841: PUSH
100842: EMPTY
100843: LIST
100844: LIST
100845: PUSH
100846: LD_INT 21
100848: PUSH
100849: LD_INT 2
100851: PUSH
100852: EMPTY
100853: LIST
100854: LIST
100855: PUSH
100856: EMPTY
100857: LIST
100858: LIST
100859: LIST
100860: PUSH
100861: EMPTY
100862: LIST
100863: LIST
100864: PPUSH
100865: CALL_OW 69
100869: ST_TO_ADDR
// if not tmp then
100870: LD_VAR 0 2
100874: NOT
100875: IFFALSE 100879
// exit ;
100877: GO 100962
// p := 0 ;
100879: LD_ADDR_VAR 0 3
100883: PUSH
100884: LD_INT 0
100886: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
100887: LD_INT 35
100889: PPUSH
100890: CALL_OW 67
// p := p + 1 ;
100894: LD_ADDR_VAR 0 3
100898: PUSH
100899: LD_VAR 0 3
100903: PUSH
100904: LD_INT 1
100906: PLUS
100907: ST_TO_ADDR
// for i in tmp do
100908: LD_ADDR_VAR 0 1
100912: PUSH
100913: LD_VAR 0 2
100917: PUSH
100918: FOR_IN
100919: IFFALSE 100950
// if GetLives ( i ) < 1000 then
100921: LD_VAR 0 1
100925: PPUSH
100926: CALL_OW 256
100930: PUSH
100931: LD_INT 1000
100933: LESS
100934: IFFALSE 100948
// SetLives ( i , 1000 ) ;
100936: LD_VAR 0 1
100940: PPUSH
100941: LD_INT 1000
100943: PPUSH
100944: CALL_OW 234
100948: GO 100918
100950: POP
100951: POP
// until p > 20 ;
100952: LD_VAR 0 3
100956: PUSH
100957: LD_INT 20
100959: GREATER
100960: IFFALSE 100887
// end ;
100962: PPOPN 3
100964: END
// every 0 0$1 trigger StreamModeActive and sTime do
100965: LD_EXP 98
100969: PUSH
100970: LD_EXP 149
100974: AND
100975: IFFALSE 101010
100977: GO 100979
100979: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
100980: LD_INT 28
100982: PPUSH
100983: LD_OWVAR 2
100987: PPUSH
100988: LD_INT 2
100990: PPUSH
100991: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
100995: LD_INT 30
100997: PPUSH
100998: LD_OWVAR 2
101002: PPUSH
101003: LD_INT 2
101005: PPUSH
101006: CALL_OW 322
// end ;
101010: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
101011: LD_EXP 98
101015: PUSH
101016: LD_EXP 150
101020: AND
101021: IFFALSE 101142
101023: GO 101025
101025: DISABLE
101026: LD_INT 0
101028: PPUSH
101029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
101030: LD_ADDR_VAR 0 2
101034: PUSH
101035: LD_INT 22
101037: PUSH
101038: LD_OWVAR 2
101042: PUSH
101043: EMPTY
101044: LIST
101045: LIST
101046: PUSH
101047: LD_INT 21
101049: PUSH
101050: LD_INT 1
101052: PUSH
101053: EMPTY
101054: LIST
101055: LIST
101056: PUSH
101057: LD_INT 3
101059: PUSH
101060: LD_INT 23
101062: PUSH
101063: LD_INT 0
101065: PUSH
101066: EMPTY
101067: LIST
101068: LIST
101069: PUSH
101070: EMPTY
101071: LIST
101072: LIST
101073: PUSH
101074: EMPTY
101075: LIST
101076: LIST
101077: LIST
101078: PPUSH
101079: CALL_OW 69
101083: ST_TO_ADDR
// if not tmp then
101084: LD_VAR 0 2
101088: NOT
101089: IFFALSE 101093
// exit ;
101091: GO 101142
// for i in tmp do
101093: LD_ADDR_VAR 0 1
101097: PUSH
101098: LD_VAR 0 2
101102: PUSH
101103: FOR_IN
101104: IFFALSE 101140
// begin if Crawls ( i ) then
101106: LD_VAR 0 1
101110: PPUSH
101111: CALL_OW 318
101115: IFFALSE 101126
// ComWalk ( i ) ;
101117: LD_VAR 0 1
101121: PPUSH
101122: CALL_OW 138
// SetClass ( i , 2 ) ;
101126: LD_VAR 0 1
101130: PPUSH
101131: LD_INT 2
101133: PPUSH
101134: CALL_OW 336
// end ;
101138: GO 101103
101140: POP
101141: POP
// end ;
101142: PPOPN 2
101144: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
101145: LD_EXP 98
101149: PUSH
101150: LD_EXP 151
101154: AND
101155: IFFALSE 101376
101157: GO 101159
101159: DISABLE
101160: LD_INT 0
101162: PPUSH
101163: PPUSH
101164: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
101165: LD_OWVAR 2
101169: PPUSH
101170: LD_INT 9
101172: PPUSH
101173: LD_INT 1
101175: PPUSH
101176: LD_INT 1
101178: PPUSH
101179: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
101183: LD_INT 9
101185: PPUSH
101186: LD_OWVAR 2
101190: PPUSH
101191: CALL_OW 343
// uc_side := 9 ;
101195: LD_ADDR_OWVAR 20
101199: PUSH
101200: LD_INT 9
101202: ST_TO_ADDR
// uc_nation := 2 ;
101203: LD_ADDR_OWVAR 21
101207: PUSH
101208: LD_INT 2
101210: ST_TO_ADDR
// hc_name := Dark Warrior ;
101211: LD_ADDR_OWVAR 26
101215: PUSH
101216: LD_STRING Dark Warrior
101218: ST_TO_ADDR
// hc_gallery :=  ;
101219: LD_ADDR_OWVAR 33
101223: PUSH
101224: LD_STRING 
101226: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
101227: LD_INT 1
101229: PPUSH
101230: LD_INT 1
101232: PPUSH
101233: LD_INT 10
101235: PPUSH
101236: CALL_OW 380
// un := CreateHuman ;
101240: LD_ADDR_VAR 0 3
101244: PUSH
101245: CALL_OW 44
101249: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101250: LD_VAR 0 3
101254: PPUSH
101255: LD_INT 1
101257: PPUSH
101258: CALL_OW 51
// p := 0 ;
101262: LD_ADDR_VAR 0 2
101266: PUSH
101267: LD_INT 0
101269: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
101270: LD_INT 35
101272: PPUSH
101273: CALL_OW 67
// if GetLives ( un ) < 1000 then
101277: LD_VAR 0 3
101281: PPUSH
101282: CALL_OW 256
101286: PUSH
101287: LD_INT 1000
101289: LESS
101290: IFFALSE 101304
// SetLives ( un , 1000 ) ;
101292: LD_VAR 0 3
101296: PPUSH
101297: LD_INT 1000
101299: PPUSH
101300: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
101304: LD_VAR 0 3
101308: PPUSH
101309: LD_INT 81
101311: PUSH
101312: LD_OWVAR 2
101316: PUSH
101317: EMPTY
101318: LIST
101319: LIST
101320: PPUSH
101321: CALL_OW 69
101325: PPUSH
101326: LD_VAR 0 3
101330: PPUSH
101331: CALL_OW 74
101335: PPUSH
101336: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
101340: LD_VAR 0 2
101344: PUSH
101345: LD_INT 60
101347: GREATER
101348: PUSH
101349: LD_VAR 0 3
101353: PPUSH
101354: CALL_OW 301
101358: OR
101359: IFFALSE 101270
// if un then
101361: LD_VAR 0 3
101365: IFFALSE 101376
// RemoveUnit ( un ) ;
101367: LD_VAR 0 3
101371: PPUSH
101372: CALL_OW 64
// end ; end_of_file
101376: PPOPN 3
101378: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
101379: LD_INT 0
101381: PPUSH
101382: PPUSH
101383: PPUSH
101384: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
101385: LD_VAR 0 1
101389: PPUSH
101390: CALL_OW 264
101394: PUSH
101395: LD_EXP 97
101399: EQUAL
101400: IFFALSE 101472
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
101402: LD_INT 68
101404: PPUSH
101405: LD_VAR 0 1
101409: PPUSH
101410: CALL_OW 255
101414: PPUSH
101415: CALL_OW 321
101419: PUSH
101420: LD_INT 2
101422: EQUAL
101423: IFFALSE 101435
// eff := 70 else
101425: LD_ADDR_VAR 0 6
101429: PUSH
101430: LD_INT 70
101432: ST_TO_ADDR
101433: GO 101443
// eff := 30 ;
101435: LD_ADDR_VAR 0 6
101439: PUSH
101440: LD_INT 30
101442: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
101443: LD_VAR 0 1
101447: PPUSH
101448: CALL_OW 250
101452: PPUSH
101453: LD_VAR 0 1
101457: PPUSH
101458: CALL_OW 251
101462: PPUSH
101463: LD_VAR 0 6
101467: PPUSH
101468: CALL_OW 495
// end ; end ;
101472: LD_VAR 0 4
101476: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
101477: LD_INT 0
101479: PPUSH
101480: PPUSH
101481: PPUSH
101482: PPUSH
101483: PPUSH
101484: PPUSH
// if cmd = 124 then
101485: LD_VAR 0 1
101489: PUSH
101490: LD_INT 124
101492: EQUAL
101493: IFFALSE 101699
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
101495: LD_ADDR_VAR 0 5
101499: PUSH
101500: LD_INT 2
101502: PUSH
101503: LD_INT 34
101505: PUSH
101506: LD_INT 53
101508: PUSH
101509: EMPTY
101510: LIST
101511: LIST
101512: PUSH
101513: LD_INT 34
101515: PUSH
101516: LD_INT 14
101518: PUSH
101519: EMPTY
101520: LIST
101521: LIST
101522: PUSH
101523: EMPTY
101524: LIST
101525: LIST
101526: LIST
101527: PPUSH
101528: CALL_OW 69
101532: ST_TO_ADDR
// if not tmp then
101533: LD_VAR 0 5
101537: NOT
101538: IFFALSE 101542
// exit ;
101540: GO 101699
// for i in tmp do
101542: LD_ADDR_VAR 0 3
101546: PUSH
101547: LD_VAR 0 5
101551: PUSH
101552: FOR_IN
101553: IFFALSE 101697
// begin taskList := GetTaskList ( i ) ;
101555: LD_ADDR_VAR 0 6
101559: PUSH
101560: LD_VAR 0 3
101564: PPUSH
101565: CALL_OW 437
101569: ST_TO_ADDR
// if not taskList then
101570: LD_VAR 0 6
101574: NOT
101575: IFFALSE 101579
// continue ;
101577: GO 101552
// for j = 1 to taskList do
101579: LD_ADDR_VAR 0 4
101583: PUSH
101584: DOUBLE
101585: LD_INT 1
101587: DEC
101588: ST_TO_ADDR
101589: LD_VAR 0 6
101593: PUSH
101594: FOR_TO
101595: IFFALSE 101693
// if taskList [ j ] [ 1 ] = | then
101597: LD_VAR 0 6
101601: PUSH
101602: LD_VAR 0 4
101606: ARRAY
101607: PUSH
101608: LD_INT 1
101610: ARRAY
101611: PUSH
101612: LD_STRING |
101614: EQUAL
101615: IFFALSE 101691
// begin _taskList := Delete ( taskList , 1 ) ;
101617: LD_ADDR_VAR 0 7
101621: PUSH
101622: LD_VAR 0 6
101626: PPUSH
101627: LD_INT 1
101629: PPUSH
101630: CALL_OW 3
101634: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
101635: LD_VAR 0 3
101639: PPUSH
101640: LD_VAR 0 7
101644: PPUSH
101645: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
101649: LD_VAR 0 3
101653: PPUSH
101654: LD_VAR 0 6
101658: PUSH
101659: LD_VAR 0 4
101663: ARRAY
101664: PUSH
101665: LD_INT 2
101667: ARRAY
101668: PPUSH
101669: LD_VAR 0 6
101673: PUSH
101674: LD_VAR 0 4
101678: ARRAY
101679: PUSH
101680: LD_INT 3
101682: ARRAY
101683: PPUSH
101684: LD_INT 8
101686: PPUSH
101687: CALL 101704 0 4
// end ;
101691: GO 101594
101693: POP
101694: POP
// end ;
101695: GO 101552
101697: POP
101698: POP
// end ; end ;
101699: LD_VAR 0 2
101703: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
101704: LD_INT 0
101706: PPUSH
101707: PPUSH
101708: PPUSH
101709: PPUSH
101710: PPUSH
101711: PPUSH
101712: PPUSH
101713: PPUSH
101714: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
101715: LD_VAR 0 1
101719: NOT
101720: PUSH
101721: LD_VAR 0 2
101725: PPUSH
101726: LD_VAR 0 3
101730: PPUSH
101731: CALL_OW 488
101735: NOT
101736: OR
101737: PUSH
101738: LD_VAR 0 4
101742: NOT
101743: OR
101744: IFFALSE 101748
// exit ;
101746: GO 102088
// list := [ ] ;
101748: LD_ADDR_VAR 0 13
101752: PUSH
101753: EMPTY
101754: ST_TO_ADDR
// if x - r < 0 then
101755: LD_VAR 0 2
101759: PUSH
101760: LD_VAR 0 4
101764: MINUS
101765: PUSH
101766: LD_INT 0
101768: LESS
101769: IFFALSE 101781
// min_x := 0 else
101771: LD_ADDR_VAR 0 7
101775: PUSH
101776: LD_INT 0
101778: ST_TO_ADDR
101779: GO 101797
// min_x := x - r ;
101781: LD_ADDR_VAR 0 7
101785: PUSH
101786: LD_VAR 0 2
101790: PUSH
101791: LD_VAR 0 4
101795: MINUS
101796: ST_TO_ADDR
// if y - r < 0 then
101797: LD_VAR 0 3
101801: PUSH
101802: LD_VAR 0 4
101806: MINUS
101807: PUSH
101808: LD_INT 0
101810: LESS
101811: IFFALSE 101823
// min_y := 0 else
101813: LD_ADDR_VAR 0 8
101817: PUSH
101818: LD_INT 0
101820: ST_TO_ADDR
101821: GO 101839
// min_y := y - r ;
101823: LD_ADDR_VAR 0 8
101827: PUSH
101828: LD_VAR 0 3
101832: PUSH
101833: LD_VAR 0 4
101837: MINUS
101838: ST_TO_ADDR
// max_x := x + r ;
101839: LD_ADDR_VAR 0 9
101843: PUSH
101844: LD_VAR 0 2
101848: PUSH
101849: LD_VAR 0 4
101853: PLUS
101854: ST_TO_ADDR
// max_y := y + r ;
101855: LD_ADDR_VAR 0 10
101859: PUSH
101860: LD_VAR 0 3
101864: PUSH
101865: LD_VAR 0 4
101869: PLUS
101870: ST_TO_ADDR
// for _x = min_x to max_x do
101871: LD_ADDR_VAR 0 11
101875: PUSH
101876: DOUBLE
101877: LD_VAR 0 7
101881: DEC
101882: ST_TO_ADDR
101883: LD_VAR 0 9
101887: PUSH
101888: FOR_TO
101889: IFFALSE 102006
// for _y = min_y to max_y do
101891: LD_ADDR_VAR 0 12
101895: PUSH
101896: DOUBLE
101897: LD_VAR 0 8
101901: DEC
101902: ST_TO_ADDR
101903: LD_VAR 0 10
101907: PUSH
101908: FOR_TO
101909: IFFALSE 102002
// begin if not ValidHex ( _x , _y ) then
101911: LD_VAR 0 11
101915: PPUSH
101916: LD_VAR 0 12
101920: PPUSH
101921: CALL_OW 488
101925: NOT
101926: IFFALSE 101930
// continue ;
101928: GO 101908
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
101930: LD_VAR 0 11
101934: PPUSH
101935: LD_VAR 0 12
101939: PPUSH
101940: CALL_OW 351
101944: PUSH
101945: LD_VAR 0 11
101949: PPUSH
101950: LD_VAR 0 12
101954: PPUSH
101955: CALL_OW 554
101959: AND
101960: IFFALSE 102000
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
101962: LD_ADDR_VAR 0 13
101966: PUSH
101967: LD_VAR 0 13
101971: PPUSH
101972: LD_VAR 0 13
101976: PUSH
101977: LD_INT 1
101979: PLUS
101980: PPUSH
101981: LD_VAR 0 11
101985: PUSH
101986: LD_VAR 0 12
101990: PUSH
101991: EMPTY
101992: LIST
101993: LIST
101994: PPUSH
101995: CALL_OW 2
101999: ST_TO_ADDR
// end ;
102000: GO 101908
102002: POP
102003: POP
102004: GO 101888
102006: POP
102007: POP
// if not list then
102008: LD_VAR 0 13
102012: NOT
102013: IFFALSE 102017
// exit ;
102015: GO 102088
// for i in list do
102017: LD_ADDR_VAR 0 6
102021: PUSH
102022: LD_VAR 0 13
102026: PUSH
102027: FOR_IN
102028: IFFALSE 102086
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
102030: LD_VAR 0 1
102034: PPUSH
102035: LD_STRING M
102037: PUSH
102038: LD_VAR 0 6
102042: PUSH
102043: LD_INT 1
102045: ARRAY
102046: PUSH
102047: LD_VAR 0 6
102051: PUSH
102052: LD_INT 2
102054: ARRAY
102055: PUSH
102056: LD_INT 0
102058: PUSH
102059: LD_INT 0
102061: PUSH
102062: LD_INT 0
102064: PUSH
102065: LD_INT 0
102067: PUSH
102068: EMPTY
102069: LIST
102070: LIST
102071: LIST
102072: LIST
102073: LIST
102074: LIST
102075: LIST
102076: PUSH
102077: EMPTY
102078: LIST
102079: PPUSH
102080: CALL_OW 447
102084: GO 102027
102086: POP
102087: POP
// end ;
102088: LD_VAR 0 5
102092: RET
