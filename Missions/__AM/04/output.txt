// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4670 0 0
// PrepareRussianBase ;
 289: CALL 2962 0 0
// PrepareRussianCommander ;
 293: CALL 2913 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_EXP 49
 515: PPUSH
 516: CALL 39886 0 3
 520: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 521: LD_ADDR_EXP 4
 525: PUSH
 526: LD_STRING Lisa
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_EXP 49
 536: PPUSH
 537: CALL 39886 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 49
 557: PPUSH
 558: CALL 39886 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 49
 578: PPUSH
 579: CALL 39886 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 49
 599: PPUSH
 600: CALL 39886 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 49
 620: PPUSH
 621: CALL 39886 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 49
 641: PPUSH
 642: CALL 39886 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 49
 662: PPUSH
 663: CALL 39886 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 49
 683: PPUSH
 684: CALL 39886 0 3
 688: ST_TO_ADDR
// if Lisa = false then
 689: LD_EXP 4
 693: PUSH
 694: LD_INT 0
 696: EQUAL
 697: IFFALSE 720
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 699: LD_ADDR_EXP 2
 703: PUSH
 704: LD_STRING Bobby
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_EXP 49
 714: PPUSH
 715: CALL 39886 0 3
 719: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 720: LD_EXP 4
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: PUSH
 729: LD_EXP 2
 733: PUSH
 734: LD_INT 0
 736: EQUAL
 737: AND
 738: IFFALSE 761
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_STRING Cyrus
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_EXP 49
 755: PPUSH
 756: CALL 39886 0 3
 760: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 761: LD_EXP 4
 765: PUSH
 766: LD_INT 0
 768: EQUAL
 769: PUSH
 770: LD_EXP 2
 774: PUSH
 775: LD_INT 0
 777: EQUAL
 778: AND
 779: PUSH
 780: LD_EXP 3
 784: PUSH
 785: LD_INT 0
 787: EQUAL
 788: AND
 789: IFFALSE 888
// begin tmp = CreateCharacterSet ( 03_others ) ;
 791: LD_ADDR_VAR 0 3
 795: PUSH
 796: LD_STRING 03_others
 798: PPUSH
 799: CALL_OW 31
 803: ST_TO_ADDR
// if tmp then
 804: LD_VAR 0 3
 808: IFFALSE 865
// begin RandomBeforeMission = tmp [ 1 ] ;
 810: LD_ADDR_EXP 6
 814: PUSH
 815: LD_VAR 0 3
 819: PUSH
 820: LD_INT 1
 822: ARRAY
 823: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 824: LD_STRING 03_others
 826: PPUSH
 827: CALL_OW 40
// if tmp > 1 then
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 1
 838: GREATER
 839: IFFALSE 863
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: DIFF
 855: PPUSH
 856: LD_STRING 03_others
 858: PPUSH
 859: CALL_OW 38
// end else
 863: GO 888
// begin PrepareHuman ( false , 1 , 3 ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 3
 873: PPUSH
 874: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 878: LD_ADDR_EXP 6
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 888: LD_ADDR_OWVAR 20
 892: PUSH
 893: LD_INT 4
 895: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 896: LD_ADDR_EXP 13
 900: PUSH
 901: LD_STRING Donaldson
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: LD_EXP 49
 911: PPUSH
 912: CALL 39886 0 3
 916: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 917: LD_ADDR_EXP 5
 921: PUSH
 922: LD_STRING Frank
 924: PPUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_EXP 49
 932: PPUSH
 933: CALL 39886 0 3
 937: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 938: LD_EXP 1
 942: PPUSH
 943: LD_INT 32
 945: PPUSH
 946: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 950: LD_EXP 7
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 965: LD_EXP 7
 969: PPUSH
 970: LD_INT 32
 972: PPUSH
 973: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 977: LD_EXP 8
 981: PPUSH
 982: LD_INT 2
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 992: LD_EXP 9
 996: PPUSH
 997: LD_INT 2
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1007: LD_EXP 12
1011: PPUSH
1012: LD_INT 2
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1022: LD_EXP 10
1026: PPUSH
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1037: LD_EXP 11
1041: PPUSH
1042: LD_INT 2
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1052: LD_EXP 4
1056: PPUSH
1057: LD_INT 2
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 49
// if Lisa = false then
1067: LD_EXP 4
1071: PUSH
1072: LD_INT 0
1074: EQUAL
1075: IFFALSE 1092
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1077: LD_EXP 2
1081: PPUSH
1082: LD_INT 2
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL_OW 49
// if Lisa = false and Bobby = false then
1092: LD_EXP 4
1096: PUSH
1097: LD_INT 0
1099: EQUAL
1100: PUSH
1101: LD_EXP 2
1105: PUSH
1106: LD_INT 0
1108: EQUAL
1109: AND
1110: IFFALSE 1127
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1112: LD_EXP 3
1116: PPUSH
1117: LD_INT 2
1119: PPUSH
1120: LD_INT 0
1122: PPUSH
1123: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1127: LD_EXP 4
1131: PUSH
1132: LD_INT 0
1134: EQUAL
1135: PUSH
1136: LD_EXP 2
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: PUSH
1146: LD_EXP 3
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: IFFALSE 1172
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1157: LD_EXP 6
1161: PPUSH
1162: LD_INT 2
1164: PPUSH
1165: LD_INT 0
1167: PPUSH
1168: CALL_OW 49
// end ;
1172: LD_VAR 0 1
1176: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1177: LD_INT 0
1179: PPUSH
1180: PPUSH
1181: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1182: LD_EXP 13
1186: PPUSH
1187: LD_INT 10
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: CALL_OW 49
// if Frank then
1197: LD_EXP 5
1201: IFFALSE 1218
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1203: LD_EXP 5
1207: PPUSH
1208: LD_INT 10
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// uc_nation = 1 ;
1218: LD_ADDR_OWVAR 21
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// uc_side = 4 ;
1226: LD_ADDR_OWVAR 20
1230: PUSH
1231: LD_INT 4
1233: ST_TO_ADDR
// hc_class := 3 ;
1234: LD_ADDR_OWVAR 28
1238: PUSH
1239: LD_INT 3
1241: ST_TO_ADDR
// hc_sex := sex_male ;
1242: LD_ADDR_OWVAR 27
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1250: LD_ADDR_OWVAR 33
1254: PUSH
1255: LD_STRING SecondCharsGal
1257: ST_TO_ADDR
// hc_face_number := 53 ;
1258: LD_ADDR_OWVAR 34
1262: PUSH
1263: LD_INT 53
1265: ST_TO_ADDR
// hc_name := Freddie Warner ;
1266: LD_ADDR_OWVAR 26
1270: PUSH
1271: LD_STRING Freddie Warner
1273: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1274: LD_ADDR_OWVAR 29
1278: PUSH
1279: LD_INT 8
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1289: LD_ADDR_OWVAR 30
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 0
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1312: LD_ADDR_OWVAR 31
1316: PUSH
1317: LD_INT 1
1319: PUSH
1320: LD_INT 0
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: ST_TO_ADDR
// un = CreateHuman ;
1335: LD_ADDR_VAR 0 3
1339: PUSH
1340: CALL_OW 44
1344: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1345: LD_VAR 0 3
1349: PPUSH
1350: LD_INT 10
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// hc_class := 1 ;
1360: LD_ADDR_OWVAR 28
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
// hc_sex := sex_male ;
1368: LD_ADDR_OWVAR 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1376: LD_ADDR_OWVAR 33
1380: PUSH
1381: LD_STRING SecondCharsGal
1383: ST_TO_ADDR
// hc_face_number := 56 ;
1384: LD_ADDR_OWVAR 34
1388: PUSH
1389: LD_INT 56
1391: ST_TO_ADDR
// hc_name := Mel Brennan ;
1392: LD_ADDR_OWVAR 26
1396: PUSH
1397: LD_STRING Mel Brennan
1399: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1400: LD_ADDR_OWVAR 29
1404: PUSH
1405: LD_INT 12
1407: PUSH
1408: LD_INT 11
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1415: LD_ADDR_OWVAR 30
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 1
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1438: LD_ADDR_OWVAR 31
1442: PUSH
1443: LD_INT 3
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: ST_TO_ADDR
// un = CreateHuman ;
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1471: LD_VAR 0 3
1475: PPUSH
1476: LD_INT 10
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 49
// hc_class := 1 ;
1486: LD_ADDR_OWVAR 28
1490: PUSH
1491: LD_INT 1
1493: ST_TO_ADDR
// hc_sex := sex_male ;
1494: LD_ADDR_OWVAR 27
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1502: LD_ADDR_OWVAR 33
1506: PUSH
1507: LD_STRING AmGalRemake
1509: ST_TO_ADDR
// hc_face_number := 5 ;
1510: LD_ADDR_OWVAR 34
1514: PUSH
1515: LD_INT 5
1517: ST_TO_ADDR
// hc_name := Bob Joplin ;
1518: LD_ADDR_OWVAR 26
1522: PUSH
1523: LD_STRING Bob Joplin
1525: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1526: LD_ADDR_OWVAR 29
1530: PUSH
1531: LD_INT 10
1533: PUSH
1534: LD_INT 11
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1541: LD_ADDR_OWVAR 30
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1564: LD_ADDR_OWVAR 31
1568: PUSH
1569: LD_INT 3
1571: PUSH
1572: LD_INT 1
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// un = CreateHuman ;
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: CALL_OW 44
1596: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_INT 10
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// hc_class := 3 ;
1612: LD_ADDR_OWVAR 28
1616: PUSH
1617: LD_INT 3
1619: ST_TO_ADDR
// hc_sex := sex_female ;
1620: LD_ADDR_OWVAR 27
1624: PUSH
1625: LD_INT 2
1627: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1628: LD_ADDR_OWVAR 33
1632: PUSH
1633: LD_STRING AmGalRemake
1635: ST_TO_ADDR
// hc_face_number := 8 ;
1636: LD_ADDR_OWVAR 34
1640: PUSH
1641: LD_INT 8
1643: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1644: LD_ADDR_OWVAR 26
1648: PUSH
1649: LD_STRING Elizabeth Whitney
1651: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1652: LD_ADDR_OWVAR 29
1656: PUSH
1657: LD_INT 9
1659: PUSH
1660: LD_INT 11
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1667: LD_ADDR_OWVAR 30
1671: PUSH
1672: LD_INT 0
1674: PUSH
1675: LD_INT 0
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1690: LD_ADDR_OWVAR 31
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// un = CreateHuman ;
1713: LD_ADDR_VAR 0 3
1717: PUSH
1718: CALL_OW 44
1722: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1723: LD_VAR 0 3
1727: PPUSH
1728: LD_INT 10
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 49
// InitHc ;
1738: CALL_OW 19
// end ;
1742: LD_VAR 0 1
1746: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1747: LD_INT 0
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// uc_side = 1 ;
1761: LD_ADDR_OWVAR 20
1765: PUSH
1766: LD_INT 1
1768: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 2
1776: ST_TO_ADDR
// vc_engine := engine_combustion ;
1777: LD_ADDR_OWVAR 39
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_control := control_manual ;
1785: LD_ADDR_OWVAR 38
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1793: LD_ADDR_OWVAR 41
1797: PUSH
1798: LD_INT 65
1800: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 5
1808: PUSH
1809: LD_INT 3
1811: PUSH
1812: LD_INT 4
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_OWVAR 67
1824: ARRAY
1825: ST_TO_ADDR
// veh := CreateVehicle ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: CALL_OW 45
1835: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1836: LD_VAR 0 5
1840: PPUSH
1841: LD_INT 2
1843: PPUSH
1844: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1848: LD_INT 17
1850: PPUSH
1851: LD_INT 4
1853: PPUSH
1854: CALL_OW 428
1858: PUSH
1859: LD_INT 0
1861: EQUAL
1862: IFFALSE 1884
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1864: LD_VAR 0 5
1868: PPUSH
1869: LD_INT 17
1871: PPUSH
1872: LD_INT 4
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 48
1882: GO 1902
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1884: LD_VAR 0 5
1888: PPUSH
1889: LD_INT 23
1891: PPUSH
1892: LD_INT 10
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 48
// hc_class := 1 ;
1902: LD_ADDR_OWVAR 28
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// hc_sex := sex_male ;
1910: LD_ADDR_OWVAR 27
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1918: LD_ADDR_OWVAR 33
1922: PUSH
1923: LD_STRING SecondCharsGal
1925: ST_TO_ADDR
// hc_face_number := 59 ;
1926: LD_ADDR_OWVAR 34
1930: PUSH
1931: LD_INT 59
1933: ST_TO_ADDR
// hc_name := Max Gray ;
1934: LD_ADDR_OWVAR 26
1938: PUSH
1939: LD_STRING Max Gray
1941: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1942: LD_ADDR_OWVAR 29
1946: PUSH
1947: LD_INT 9
1949: PUSH
1950: LD_INT 11
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1957: LD_ADDR_OWVAR 30
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1980: LD_ADDR_OWVAR 31
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 1
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: LD_INT 0
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: ST_TO_ADDR
// un = CreateHuman ;
2003: LD_ADDR_VAR 0 4
2007: PUSH
2008: CALL_OW 44
2012: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 11
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// hc_class := 2 ;
2028: LD_ADDR_OWVAR 28
2032: PUSH
2033: LD_INT 2
2035: ST_TO_ADDR
// hc_sex := sex_male ;
2036: LD_ADDR_OWVAR 27
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2044: LD_ADDR_OWVAR 33
2048: PUSH
2049: LD_STRING SecondCharsGal
2051: ST_TO_ADDR
// hc_face_number := 50 ;
2052: LD_ADDR_OWVAR 34
2056: PUSH
2057: LD_INT 50
2059: ST_TO_ADDR
// hc_name := Frank Hughes ;
2060: LD_ADDR_OWVAR 26
2064: PUSH
2065: LD_STRING Frank Hughes
2067: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2068: LD_ADDR_OWVAR 29
2072: PUSH
2073: LD_INT 10
2075: PUSH
2076: LD_INT 10
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2083: LD_ADDR_OWVAR 30
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: LD_INT 0
2096: PUSH
2097: LD_INT 0
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2106: LD_ADDR_OWVAR 31
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: LD_INT 0
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// un = CreateHuman ;
2129: LD_ADDR_VAR 0 4
2133: PUSH
2134: CALL_OW 44
2138: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_INT 11
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: CALL_OW 49
// hc_class := 1 ;
2154: LD_ADDR_OWVAR 28
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// hc_sex := sex_male ;
2162: LD_ADDR_OWVAR 27
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2170: LD_ADDR_OWVAR 33
2174: PUSH
2175: LD_STRING SecondCharsGal
2177: ST_TO_ADDR
// hc_face_number := 54 ;
2178: LD_ADDR_OWVAR 34
2182: PUSH
2183: LD_INT 54
2185: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2186: LD_ADDR_OWVAR 26
2190: PUSH
2191: LD_STRING Luigi Ghbellin
2193: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2194: LD_ADDR_OWVAR 29
2198: PUSH
2199: LD_INT 11
2201: PUSH
2202: LD_INT 11
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2209: LD_ADDR_OWVAR 30
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 0
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2232: LD_ADDR_OWVAR 31
2236: PUSH
2237: LD_INT 2
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: LD_INT 1
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: ST_TO_ADDR
// un = CreateHuman ;
2255: LD_ADDR_VAR 0 4
2259: PUSH
2260: CALL_OW 44
2264: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2265: LD_VAR 0 4
2269: PPUSH
2270: LD_INT 11
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 49
// hc_class := 3 ;
2280: LD_ADDR_OWVAR 28
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// hc_sex := sex_male ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2296: LD_ADDR_OWVAR 33
2300: PUSH
2301: LD_STRING AmGalRemake
2303: ST_TO_ADDR
// hc_face_number := 6 ;
2304: LD_ADDR_OWVAR 34
2308: PUSH
2309: LD_INT 6
2311: ST_TO_ADDR
// hc_name := Leon Carter ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_STRING Leon Carter
2319: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2320: LD_ADDR_OWVAR 29
2324: PUSH
2325: LD_INT 10
2327: PUSH
2328: LD_INT 9
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2335: LD_ADDR_OWVAR 30
2339: PUSH
2340: LD_INT 0
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2358: LD_ADDR_OWVAR 31
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 3
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// un = CreateHuman ;
2381: LD_ADDR_VAR 0 4
2385: PUSH
2386: CALL_OW 44
2390: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2391: LD_VAR 0 4
2395: PPUSH
2396: LD_VAR 0 5
2400: PPUSH
2401: CALL_OW 52
// if count = 4 then
2405: LD_VAR 0 1
2409: PUSH
2410: LD_INT 4
2412: EQUAL
2413: IFFALSE 2541
// begin hc_class := 1 ;
2415: LD_ADDR_OWVAR 28
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
// hc_sex := sex_male ;
2423: LD_ADDR_OWVAR 27
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2431: LD_ADDR_OWVAR 33
2435: PUSH
2436: LD_STRING SecondCharsGal
2438: ST_TO_ADDR
// hc_face_number := 34 ;
2439: LD_ADDR_OWVAR 34
2443: PUSH
2444: LD_INT 34
2446: ST_TO_ADDR
// hc_name := Ian Hill ;
2447: LD_ADDR_OWVAR 26
2451: PUSH
2452: LD_STRING Ian Hill
2454: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2455: LD_ADDR_OWVAR 29
2459: PUSH
2460: LD_INT 10
2462: PUSH
2463: LD_INT 12
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2470: LD_ADDR_OWVAR 30
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2493: LD_ADDR_OWVAR 31
2497: PUSH
2498: LD_INT 3
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: LD_INT 1
2506: PUSH
2507: LD_INT 0
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: ST_TO_ADDR
// un = CreateHuman ;
2516: LD_ADDR_VAR 0 4
2520: PUSH
2521: CALL_OW 44
2525: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_INT 11
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: CALL_OW 49
// end ; if count = 5 then
2541: LD_VAR 0 1
2545: PUSH
2546: LD_INT 5
2548: EQUAL
2549: IFFALSE 2803
// begin hc_class := 1 ;
2551: LD_ADDR_OWVAR 28
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// hc_sex := sex_male ;
2559: LD_ADDR_OWVAR 27
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING SecondCharsGal
2574: ST_TO_ADDR
// hc_face_number := 34 ;
2575: LD_ADDR_OWVAR 34
2579: PUSH
2580: LD_INT 34
2582: ST_TO_ADDR
// hc_name := Ian Hill ;
2583: LD_ADDR_OWVAR 26
2587: PUSH
2588: LD_STRING Ian Hill
2590: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2591: LD_ADDR_OWVAR 29
2595: PUSH
2596: LD_INT 10
2598: PUSH
2599: LD_INT 12
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2606: LD_ADDR_OWVAR 30
2610: PUSH
2611: LD_INT 1
2613: PUSH
2614: LD_INT 0
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2629: LD_ADDR_OWVAR 31
2633: PUSH
2634: LD_INT 3
2636: PUSH
2637: LD_INT 1
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: ST_TO_ADDR
// un = CreateHuman ;
2652: LD_ADDR_VAR 0 4
2656: PUSH
2657: CALL_OW 44
2661: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2662: LD_VAR 0 4
2666: PPUSH
2667: LD_INT 11
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 49
// hc_class := 1 ;
2677: LD_ADDR_OWVAR 28
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// hc_sex := sex_female ;
2685: LD_ADDR_OWVAR 27
2689: PUSH
2690: LD_INT 2
2692: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2693: LD_ADDR_OWVAR 33
2697: PUSH
2698: LD_STRING SecondCharsGal
2700: ST_TO_ADDR
// hc_face_number := 41 ;
2701: LD_ADDR_OWVAR 34
2705: PUSH
2706: LD_INT 41
2708: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2709: LD_ADDR_OWVAR 26
2713: PUSH
2714: LD_STRING Kate Wadsworth
2716: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2717: LD_ADDR_OWVAR 29
2721: PUSH
2722: LD_INT 9
2724: PUSH
2725: LD_INT 9
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2732: LD_ADDR_OWVAR 30
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 2
2742: PUSH
2743: LD_INT 0
2745: PUSH
2746: LD_INT 0
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2755: LD_ADDR_OWVAR 31
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: LD_INT 3
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: ST_TO_ADDR
// un = CreateHuman ;
2778: LD_ADDR_VAR 0 4
2782: PUSH
2783: CALL_OW 44
2787: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2788: LD_VAR 0 4
2792: PPUSH
2793: LD_INT 11
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2803: LD_INT 11
2805: PPUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 21
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 26
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 70
2845: PUSH
2846: LD_INT 1
2848: ARRAY
2849: PPUSH
2850: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2854: LD_INT 11
2856: PPUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 26
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PPUSH
2892: CALL_OW 70
2896: PUSH
2897: LD_INT 1
2899: ARRAY
2900: PPUSH
2901: LD_STRING D6-Sol3-1
2903: PPUSH
2904: CALL_OW 88
// end ; end_of_file
2908: LD_VAR 0 2
2912: RET
// export function PrepareRussianCommander ; begin
2913: LD_INT 0
2915: PPUSH
// uc_side = 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation = 3 ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 3
2931: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2932: LD_ADDR_EXP 15
2936: PUSH
2937: LD_STRING Stolypin
2939: PPUSH
2940: CALL_OW 25
2944: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_INT 21
2952: PPUSH
2953: CALL_OW 52
// end ;
2957: LD_VAR 0 1
2961: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// if Difficulty > 1 then
2968: LD_OWVAR 67
2972: PUSH
2973: LD_INT 1
2975: GREATER
2976: IFFALSE 3086
// begin uc_side := 3 ;
2978: LD_ADDR_OWVAR 20
2982: PUSH
2983: LD_INT 3
2985: ST_TO_ADDR
// uc_nation := 3 ;
2986: LD_ADDR_OWVAR 21
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// InitHc ;
2994: CALL_OW 19
// InitBc ;
2998: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3002: LD_INT 0
3004: PPUSH
3005: LD_INT 1
3007: PPUSH
3008: LD_INT 4
3010: PPUSH
3011: CALL_OW 380
// bc_type := b_breastwork ;
3015: LD_ADDR_OWVAR 42
3019: PUSH
3020: LD_INT 31
3022: ST_TO_ADDR
// bc_level := 4 ;
3023: LD_ADDR_OWVAR 43
3027: PUSH
3028: LD_INT 4
3030: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3031: LD_ADDR_VAR 0 3
3035: PUSH
3036: LD_INT 100
3038: PPUSH
3039: LD_INT 58
3041: PPUSH
3042: LD_INT 2
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// un := CreateHuman ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_INT 5
3067: PPUSH
3068: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3072: LD_VAR 0 4
3076: PPUSH
3077: LD_VAR 0 3
3081: PPUSH
3082: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3086: LD_INT 3
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 22
3094: PPUSH
3095: LD_EXP 16
3099: PPUSH
3100: LD_EXP 17
3104: PPUSH
3105: CALL_OW 12
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 4
3118: PUSH
3119: LD_INT 5
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: PUSH
3127: LD_OWVAR 67
3131: ARRAY
3132: PPUSH
3133: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 3
3142: PPUSH
3143: LD_INT 21
3145: PPUSH
3146: LD_EXP 16
3150: PPUSH
3151: LD_EXP 17
3155: PPUSH
3156: CALL_OW 12
3160: PPUSH
3161: LD_INT 2
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3171: LD_INT 3
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_INT 1
3179: PPUSH
3180: LD_EXP 16
3184: PPUSH
3185: LD_EXP 17
3189: PPUSH
3190: CALL_OW 12
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3205: LD_INT 3
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: LD_INT 24
3213: PPUSH
3214: LD_EXP 16
3218: PPUSH
3219: LD_EXP 17
3223: PPUSH
3224: CALL_OW 12
3228: PPUSH
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 5
3234: PPUSH
3235: CALL 4335 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_INT 22
3246: PUSH
3247: LD_INT 3
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: LD_INT 30
3256: PUSH
3257: LD_INT 32
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PPUSH
3268: CALL_OW 69
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3314
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3276: LD_INT 3
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_EXP 16
3291: PPUSH
3292: LD_EXP 17
3296: PPUSH
3297: CALL_OW 12
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL 4335 0 6
3312: GO 3273
3314: POP
3315: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3316: LD_ADDR_VAR 0 2
3320: PUSH
3321: LD_INT 22
3323: PUSH
3324: LD_INT 3
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 30
3333: PUSH
3334: LD_INT 31
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3379
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3353: LD_EXP 16
3357: PPUSH
3358: LD_EXP 17
3362: PPUSH
3363: CALL_OW 12
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 4445 0 2
3377: GO 3350
3379: POP
3380: POP
// end ;
3381: LD_VAR 0 1
3385: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3386: LD_INT 0
3388: PPUSH
3389: PPUSH
3390: PPUSH
3391: PPUSH
// uc_side = 6 ;
3392: LD_ADDR_OWVAR 20
3396: PUSH
3397: LD_INT 6
3399: ST_TO_ADDR
// uc_nation = 3 ;
3400: LD_ADDR_OWVAR 21
3404: PUSH
3405: LD_INT 3
3407: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: DOUBLE
3414: LD_INT 1
3416: DEC
3417: ST_TO_ADDR
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 1
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 12
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_OWVAR 67
3444: ARRAY
3445: PUSH
3446: FOR_TO
3447: IFFALSE 3607
// begin vc_engine = 1 ;
3449: LD_ADDR_OWVAR 39
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// vc_control = 1 ;
3457: LD_ADDR_OWVAR 38
3461: PUSH
3462: LD_INT 1
3464: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3465: LD_ADDR_OWVAR 40
3469: PUSH
3470: LD_INT 42
3472: PUSH
3473: LD_INT 42
3475: PUSH
3476: LD_INT 43
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_OWVAR 67
3488: ARRAY
3489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3490: LD_ADDR_OWVAR 37
3494: PUSH
3495: LD_INT 21
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_OWVAR 67
3513: ARRAY
3514: ST_TO_ADDR
// veh = CreateVehicle ;
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: CALL_OW 45
3524: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3525: LD_VAR 0 3
3529: PPUSH
3530: LD_INT 3
3532: PPUSH
3533: LD_INT 0
3535: PPUSH
3536: CALL_OW 49
// hc_gallery =  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name =  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 3
3561: PPUSH
3562: LD_EXP 16
3566: PPUSH
3567: LD_EXP 17
3571: PPUSH
3572: CALL_OW 12
3576: PPUSH
3577: CALL_OW 380
// un = CreateHuman ;
3581: LD_ADDR_VAR 0 4
3585: PUSH
3586: CALL_OW 44
3590: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: CALL_OW 52
// end ;
3605: GO 3446
3607: POP
3608: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3609: LD_INT 0
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_EXP 16
3619: PPUSH
3620: LD_EXP 17
3624: PPUSH
3625: CALL_OW 12
3629: PUSH
3630: LD_INT 2
3632: PLUS
3633: PPUSH
3634: CALL_OW 380
// un = CreateHuman ;
3638: LD_ADDR_VAR 0 4
3642: PUSH
3643: CALL_OW 44
3647: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3648: LD_VAR 0 4
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: LD_INT 0
3658: PPUSH
3659: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3663: LD_INT 0
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_EXP 16
3673: PPUSH
3674: LD_EXP 17
3678: PPUSH
3679: CALL_OW 12
3683: PUSH
3684: LD_INT 2
3686: PLUS
3687: PPUSH
3688: CALL_OW 380
// un = CreateHuman ;
3692: LD_ADDR_VAR 0 4
3696: PUSH
3697: CALL_OW 44
3701: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3702: LD_VAR 0 4
3706: PPUSH
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3717: LD_ADDR_VAR 0 2
3721: PUSH
3722: DOUBLE
3723: LD_INT 1
3725: DEC
3726: ST_TO_ADDR
3727: LD_INT 2
3729: PUSH
3730: LD_INT 3
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 12
3757: PLUS
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3830
// begin hc_gallery =  ;
3762: LD_ADDR_OWVAR 33
3766: PUSH
3767: LD_STRING 
3769: ST_TO_ADDR
// hc_name =  ;
3770: LD_ADDR_OWVAR 26
3774: PUSH
3775: LD_STRING 
3777: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3778: LD_INT 0
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: LD_EXP 16
3788: PPUSH
3789: LD_EXP 17
3793: PPUSH
3794: CALL_OW 12
3798: PPUSH
3799: CALL_OW 380
// un = CreateHuman ;
3803: LD_ADDR_VAR 0 4
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3813: LD_VAR 0 4
3817: PPUSH
3818: LD_INT 3
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 49
// end ;
3828: GO 3759
3830: POP
3831: POP
// vc_engine = 1 ;
3832: LD_ADDR_OWVAR 39
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// vc_control = 1 ;
3840: LD_ADDR_OWVAR 38
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// vc_weapon = 51 ;
3848: LD_ADDR_OWVAR 40
3852: PUSH
3853: LD_INT 51
3855: ST_TO_ADDR
// vc_chassis = 22 ;
3856: LD_ADDR_OWVAR 37
3860: PUSH
3861: LD_INT 22
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3874: LD_VAR 0 3
3878: PPUSH
3879: LD_INT 3
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 100
3899: PPUSH
3900: CALL_OW 290
// hc_gallery =  ;
3904: LD_ADDR_OWVAR 33
3908: PUSH
3909: LD_STRING 
3911: ST_TO_ADDR
// hc_name =  ;
3912: LD_ADDR_OWVAR 26
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3920: LD_INT 0
3922: PPUSH
3923: LD_INT 3
3925: PPUSH
3926: LD_EXP 16
3930: PPUSH
3931: LD_EXP 17
3935: PPUSH
3936: CALL_OW 12
3940: PPUSH
3941: CALL_OW 380
// un = CreateHuman ;
3945: LD_ADDR_VAR 0 4
3949: PUSH
3950: CALL_OW 44
3954: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3955: LD_VAR 0 4
3959: PPUSH
3960: LD_VAR 0 3
3964: PPUSH
3965: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_INT 22
3976: PUSH
3977: LD_INT 6
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 25
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 3
4006: PUSH
4007: LD_INT 25
4009: PUSH
4010: LD_INT 4
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4055
// ComAgressiveMove ( i , 45 , 46 ) ;
4038: LD_VAR 0 2
4042: PPUSH
4043: LD_INT 45
4045: PPUSH
4046: LD_INT 46
4048: PPUSH
4049: CALL_OW 114
4053: GO 4035
4055: POP
4056: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 6
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 25
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4123
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4094: LD_ADDR_EXP 21
4098: PUSH
4099: LD_VAR 0 2
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: LD_INT 48
4109: PPUSH
4110: LD_INT 55
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL_OW 145
4120: ST_TO_ADDR
4121: GO 4091
4123: POP
4124: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: LD_INT 22
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PPUSH
4154: CALL_OW 69
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4179
// ComMoveXY ( i , 39 , 55 ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: LD_INT 39
4169: PPUSH
4170: LD_INT 55
4172: PPUSH
4173: CALL_OW 111
4177: GO 4159
4179: POP
4180: POP
// end ;
4181: LD_VAR 0 1
4185: RET
// export function PrepareFirstAttack ; var i , un ; begin
4186: LD_INT 0
4188: PPUSH
4189: PPUSH
4190: PPUSH
// uc_side = 5 ;
4191: LD_ADDR_OWVAR 20
4195: PUSH
4196: LD_INT 5
4198: ST_TO_ADDR
// uc_nation = 3 ;
4199: LD_ADDR_OWVAR 21
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// for i := 1 to 4 do
4207: LD_ADDR_VAR 0 2
4211: PUSH
4212: DOUBLE
4213: LD_INT 1
4215: DEC
4216: ST_TO_ADDR
4217: LD_INT 4
4219: PUSH
4220: FOR_TO
4221: IFFALSE 4320
// begin hc_gallery =  ;
4223: LD_ADDR_OWVAR 33
4227: PUSH
4228: LD_STRING 
4230: ST_TO_ADDR
// hc_name =  ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4239: LD_INT 0
4241: PPUSH
4242: LD_INT 1
4244: PPUSH
4245: LD_EXP 16
4249: PPUSH
4250: LD_EXP 17
4254: PPUSH
4255: CALL_OW 12
4259: PPUSH
4260: CALL_OW 380
// un = CreateHuman ;
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: CALL_OW 44
4273: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_INT 4
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 250
4303: PPUSH
4304: LD_EXP 1
4308: PPUSH
4309: CALL_OW 251
4313: PPUSH
4314: CALL_OW 114
// end ;
4318: GO 4220
4320: POP
4321: POP
// firstRussianAttack = 1 ;
4322: LD_ADDR_EXP 23
4326: PUSH
4327: LD_INT 1
4329: ST_TO_ADDR
// end ; end_of_file
4330: LD_VAR 0 1
4334: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4335: LD_INT 0
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
// for i = 1 to count do
4341: LD_ADDR_VAR 0 8
4345: PUSH
4346: DOUBLE
4347: LD_INT 1
4349: DEC
4350: ST_TO_ADDR
4351: LD_VAR 0 6
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4438
// begin uc_side = side ;
4359: LD_ADDR_OWVAR 20
4363: PUSH
4364: LD_VAR 0 1
4368: ST_TO_ADDR
// uc_nation = nation ;
4369: LD_ADDR_OWVAR 21
4373: PUSH
4374: LD_VAR 0 2
4378: ST_TO_ADDR
// hc_gallery =  ;
4379: LD_ADDR_OWVAR 33
4383: PUSH
4384: LD_STRING 
4386: ST_TO_ADDR
// hc_name =  ;
4387: LD_ADDR_OWVAR 26
4391: PUSH
4392: LD_STRING 
4394: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4395: LD_INT 0
4397: PPUSH
4398: LD_VAR 0 5
4402: PPUSH
4403: LD_VAR 0 4
4407: PPUSH
4408: CALL_OW 380
// un = CreateHuman ;
4412: LD_ADDR_VAR 0 10
4416: PUSH
4417: CALL_OW 44
4421: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4422: LD_VAR 0 10
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: CALL_OW 52
// end ;
4436: GO 4356
4438: POP
4439: POP
// end ;
4440: LD_VAR 0 7
4444: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4445: LD_INT 0
4447: PPUSH
4448: PPUSH
4449: PPUSH
// uc_side := GetSide ( b ) ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_VAR 0 2
4459: PPUSH
4460: CALL_OW 255
4464: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_VAR 0 2
4474: PPUSH
4475: CALL_OW 248
4479: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 1
4485: PPUSH
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 380
// un = CreateHuman ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4505: LD_ADDR_VAR 0 5
4509: PUSH
4510: LD_VAR 0 2
4514: PPUSH
4515: CALL_OW 254
4519: PUSH
4520: LD_INT 3
4522: MINUS
4523: ST_TO_ADDR
// if dir < 0 then
4524: LD_VAR 0 5
4528: PUSH
4529: LD_INT 0
4531: LESS
4532: IFFALSE 4548
// dir := 6 + dir ;
4534: LD_ADDR_VAR 0 5
4538: PUSH
4539: LD_INT 6
4541: PUSH
4542: LD_VAR 0 5
4546: PLUS
4547: ST_TO_ADDR
// SetDir ( un , dir ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_VAR 0 5
4557: PPUSH
4558: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4562: LD_VAR 0 4
4566: PPUSH
4567: LD_VAR 0 2
4571: PPUSH
4572: CALL_OW 52
// end ;
4576: LD_VAR 0 3
4580: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4586: LD_ADDR_VAR 0 6
4590: PUSH
4591: LD_VAR 0 1
4595: PUSH
4596: LD_INT 1
4598: PPUSH
4599: LD_VAR 0 1
4603: PPUSH
4604: CALL_OW 12
4608: ARRAY
4609: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4610: LD_VAR 0 6
4614: PPUSH
4615: CALL_OW 258
4619: PUSH
4620: LD_INT 1
4622: EQUAL
4623: IFFALSE 4641
// Say ( speaker , dialogMID ) else
4625: LD_VAR 0 6
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: CALL_OW 88
4639: GO 4655
// Say ( speaker , dialogFID ) ;
4641: LD_VAR 0 6
4645: PPUSH
4646: LD_VAR 0 3
4650: PPUSH
4651: CALL_OW 88
// result := speaker ;
4655: LD_ADDR_VAR 0 4
4659: PUSH
4660: LD_VAR 0 6
4664: ST_TO_ADDR
// end ;
4665: LD_VAR 0 4
4669: RET
// export function PrepareDifficulty ; var tmp ; begin
4670: LD_INT 0
4672: PPUSH
4673: PPUSH
// if Difficulty = 1 then
4674: LD_OWVAR 67
4678: PUSH
4679: LD_INT 1
4681: EQUAL
4682: IFFALSE 4700
// begin RuSoldMinLevel = 1 ;
4684: LD_ADDR_EXP 16
4688: PUSH
4689: LD_INT 1
4691: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4692: LD_ADDR_EXP 17
4696: PUSH
4697: LD_INT 2
4699: ST_TO_ADDR
// end ; if Difficulty = 2 then
4700: LD_OWVAR 67
4704: PUSH
4705: LD_INT 2
4707: EQUAL
4708: IFFALSE 4809
// begin RuSoldMinLevel = 2 ;
4710: LD_ADDR_EXP 16
4714: PUSH
4715: LD_INT 2
4717: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4718: LD_ADDR_EXP 17
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4726: LD_INT 23
4728: PPUSH
4729: CALL_OW 64
// uc_nation = 3 ;
4733: LD_ADDR_OWVAR 21
4737: PUSH
4738: LD_INT 3
4740: ST_TO_ADDR
// uc_side = 3 ;
4741: LD_ADDR_OWVAR 20
4745: PUSH
4746: LD_INT 3
4748: ST_TO_ADDR
// bc_level = 5 ;
4749: LD_ADDR_OWVAR 43
4753: PUSH
4754: LD_INT 5
4756: ST_TO_ADDR
// bc_type = 32 ;
4757: LD_ADDR_OWVAR 42
4761: PUSH
4762: LD_INT 32
4764: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: LD_INT 76
4772: PPUSH
4773: LD_INT 91
4775: PPUSH
4776: LD_INT 2
4778: PPUSH
4779: CALL_OW 47
4783: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4784: LD_VAR 0 2
4788: PPUSH
4789: LD_INT 43
4791: PPUSH
4792: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4796: LD_INT 51
4798: PPUSH
4799: LD_INT 3
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 322
// end ; if Difficulty = 3 then
4809: LD_OWVAR 67
4813: PUSH
4814: LD_INT 3
4816: EQUAL
4817: IFFALSE 4979
// begin RuSoldMinLevel = 2 ;
4819: LD_ADDR_EXP 16
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4827: LD_ADDR_EXP 17
4831: PUSH
4832: LD_INT 4
4834: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4835: LD_INT 26
4837: PPUSH
4838: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4842: LD_INT 23
4844: PPUSH
4845: CALL_OW 64
// uc_nation = 3 ;
4849: LD_ADDR_OWVAR 21
4853: PUSH
4854: LD_INT 3
4856: ST_TO_ADDR
// uc_side = 3 ;
4857: LD_ADDR_OWVAR 20
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// bc_level = 5 ;
4865: LD_ADDR_OWVAR 43
4869: PUSH
4870: LD_INT 5
4872: ST_TO_ADDR
// bc_type = 32 ;
4873: LD_ADDR_OWVAR 42
4877: PUSH
4878: LD_INT 32
4880: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: LD_INT 76
4888: PPUSH
4889: LD_INT 91
4891: PPUSH
4892: LD_INT 2
4894: PPUSH
4895: CALL_OW 47
4899: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4900: LD_VAR 0 2
4904: PPUSH
4905: LD_INT 44
4907: PPUSH
4908: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4912: LD_ADDR_VAR 0 2
4916: PUSH
4917: LD_INT 83
4919: PPUSH
4920: LD_INT 84
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: CALL_OW 47
4930: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4931: LD_VAR 0 2
4935: PPUSH
4936: LD_INT 43
4938: PPUSH
4939: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4943: LD_INT 51
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4956: LD_INT 52
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4969: LD_INT 25
4971: PPUSH
4972: LD_INT 44
4974: PPUSH
4975: CALL_OW 431
// end ; end ;
4979: LD_VAR 0 1
4983: RET
// export function EnergyDialog ; begin
4984: LD_INT 0
4986: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4987: LD_INT 46
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: CALL_OW 321
4997: PUSH
4998: LD_INT 1
5000: EQUAL
5001: PUSH
5002: LD_INT 35
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 321
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5041
// begin Say ( JMM , D9c-JMM-1 ) ;
5019: LD_EXP 1
5023: PPUSH
5024: LD_STRING D9c-JMM-1
5026: PPUSH
5027: CALL_OW 88
// energyVDialog = 1 ;
5031: LD_ADDR_EXP 33
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// end else
5039: GO 5195
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5041: LD_INT 35
5043: PPUSH
5044: LD_INT 1
5046: PPUSH
5047: CALL_OW 321
5051: PUSH
5052: LD_INT 2
5054: EQUAL
5055: PUSH
5056: LD_EXP 33
5060: PUSH
5061: LD_INT 0
5063: EQUAL
5064: AND
5065: IFFALSE 5087
// begin Say ( JMM , D9c-JMM-1a ) ;
5067: LD_EXP 1
5071: PPUSH
5072: LD_STRING D9c-JMM-1a
5074: PPUSH
5075: CALL_OW 88
// energyVDialog = 1 ;
5079: LD_ADDR_EXP 33
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5087: LD_INT 46
5089: PPUSH
5090: LD_INT 1
5092: PPUSH
5093: CALL_OW 321
5097: PUSH
5098: LD_INT 2
5100: EQUAL
5101: PUSH
5102: LD_EXP 33
5106: PUSH
5107: LD_INT 0
5109: EQUAL
5110: AND
5111: IFFALSE 5133
// begin Say ( JMM , D9c-JMM-1b ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D9c-JMM-1b
5120: PPUSH
5121: CALL_OW 88
// energyVDialog = 1 ;
5125: LD_ADDR_EXP 33
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5133: LD_INT 46
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 321
5143: PUSH
5144: LD_INT 2
5146: EQUAL
5147: PUSH
5148: LD_INT 21
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: CALL_OW 321
5158: PUSH
5159: LD_INT 2
5161: EQUAL
5162: AND
5163: PUSH
5164: LD_EXP 33
5168: PUSH
5169: LD_INT 0
5171: EQUAL
5172: AND
5173: IFFALSE 5195
// begin Say ( JMM , D9c-JMM-1c ) ;
5175: LD_EXP 1
5179: PPUSH
5180: LD_STRING D9c-JMM-1c
5182: PPUSH
5183: CALL_OW 88
// energyVDialog = 1 ;
5187: LD_ADDR_EXP 33
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// end ; end ; end ;
5195: LD_VAR 0 1
5199: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5200: LD_INT 0
5202: PPUSH
5203: PPUSH
5204: PPUSH
5205: PPUSH
5206: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5207: LD_VAR 0 1
5211: NOT
5212: PUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 256
5222: PUSH
5223: LD_INT 250
5225: LESS
5226: OR
5227: PUSH
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 314
5237: PUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 261
5247: PUSH
5248: LD_INT 20
5250: GREATER
5251: AND
5252: OR
5253: IFFALSE 5257
// exit ;
5255: GO 5622
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: LESS
5270: PUSH
5271: LD_VAR 0 1
5275: PPUSH
5276: CALL_OW 110
5280: PUSH
5281: LD_INT 21
5283: EQUAL
5284: NOT
5285: AND
5286: IFFALSE 5313
// begin ComStop ( bulldozer ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 21
5304: PPUSH
5305: CALL_OW 109
// exit ;
5309: GO 5622
// end else
5311: GO 5340
// if GetFuel ( bulldozer ) > 20 then
5313: LD_VAR 0 1
5317: PPUSH
5318: CALL_OW 261
5322: PUSH
5323: LD_INT 20
5325: GREATER
5326: IFFALSE 5340
// SetTag ( bulldozer , 0 ) ;
5328: LD_VAR 0 1
5332: PPUSH
5333: LD_INT 0
5335: PPUSH
5336: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5340: LD_ADDR_VAR 0 5
5344: PUSH
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 353
5354: ST_TO_ADDR
// tmp := [ ] ;
5355: LD_ADDR_VAR 0 6
5359: PUSH
5360: EMPTY
5361: ST_TO_ADDR
// for i = 1 to list do
5362: LD_ADDR_VAR 0 4
5366: PUSH
5367: DOUBLE
5368: LD_INT 1
5370: DEC
5371: ST_TO_ADDR
5372: LD_VAR 0 5
5376: PUSH
5377: FOR_TO
5378: IFFALSE 5476
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5380: LD_VAR 0 5
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: PUSH
5391: LD_INT 1
5393: ARRAY
5394: PPUSH
5395: LD_VAR 0 5
5399: PUSH
5400: LD_VAR 0 4
5404: ARRAY
5405: PUSH
5406: LD_INT 2
5408: ARRAY
5409: PPUSH
5410: CALL_OW 554
5414: IFFALSE 5474
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5416: LD_ADDR_VAR 0 6
5420: PUSH
5421: LD_VAR 0 6
5425: PPUSH
5426: LD_VAR 0 6
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: PPUSH
5435: LD_VAR 0 5
5439: PUSH
5440: LD_VAR 0 4
5444: ARRAY
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PUSH
5450: LD_VAR 0 5
5454: PUSH
5455: LD_VAR 0 4
5459: ARRAY
5460: PUSH
5461: LD_INT 2
5463: ARRAY
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 1
5473: ST_TO_ADDR
// end ;
5474: GO 5377
5476: POP
5477: POP
// ComStop ( bulldozer ) ;
5478: LD_VAR 0 1
5482: PPUSH
5483: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5487: LD_ADDR_VAR 0 7
5491: PUSH
5492: LD_VAR 0 1
5496: PPUSH
5497: CALL_OW 250
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 251
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: ST_TO_ADDR
// for i = tmp downto 1 do
5516: LD_ADDR_VAR 0 4
5520: PUSH
5521: DOUBLE
5522: LD_VAR 0 6
5526: INC
5527: ST_TO_ADDR
5528: LD_INT 1
5530: PUSH
5531: FOR_DOWNTO
5532: IFFALSE 5620
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5534: LD_ADDR_VAR 0 7
5538: PUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 7
5552: PUSH
5553: LD_INT 2
5555: ARRAY
5556: PPUSH
5557: LD_VAR 0 6
5561: PPUSH
5562: CALL 5723 0 3
5566: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5567: LD_VAR 0 1
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 1
5579: ARRAY
5580: PPUSH
5581: LD_VAR 0 7
5585: PUSH
5586: LD_INT 2
5588: ARRAY
5589: PPUSH
5590: CALL 5627 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5594: LD_ADDR_VAR 0 6
5598: PUSH
5599: LD_VAR 0 6
5603: PPUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 3
5611: ARRAY
5612: PPUSH
5613: CALL_OW 3
5617: ST_TO_ADDR
// end ;
5618: GO 5531
5620: POP
5621: POP
// end ;
5622: LD_VAR 0 3
5626: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5627: LD_INT 0
5629: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5630: LD_VAR 0 2
5634: PPUSH
5635: LD_VAR 0 3
5639: PPUSH
5640: CALL_OW 351
5644: PUSH
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_VAR 0 3
5654: PPUSH
5655: CALL_OW 554
5659: AND
5660: PUSH
5661: LD_VAR 0 2
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: CALL_OW 488
5675: AND
5676: PUSH
5677: LD_VAR 0 2
5681: PPUSH
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 428
5691: PUSH
5692: LD_INT 1
5694: NEG
5695: EQUAL
5696: AND
5697: IFFALSE 5718
// AddComMoveXY ( bulldozer , x , y ) ;
5699: LD_VAR 0 1
5703: PPUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 171
// end ;
5718: LD_VAR 0 4
5722: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
5731: PPUSH
// dist := 99999 ;
5732: LD_ADDR_VAR 0 6
5736: PUSH
5737: LD_INT 99999
5739: ST_TO_ADDR
// for i = 1 to list do
5740: LD_ADDR_VAR 0 5
5744: PUSH
5745: DOUBLE
5746: LD_INT 1
5748: DEC
5749: ST_TO_ADDR
5750: LD_VAR 0 3
5754: PUSH
5755: FOR_TO
5756: IFFALSE 5894
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5758: LD_ADDR_VAR 0 7
5762: PUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PUSH
5778: LD_VAR 0 5
5782: ARRAY
5783: PUSH
5784: LD_INT 1
5786: ARRAY
5787: PPUSH
5788: LD_VAR 0 3
5792: PUSH
5793: LD_VAR 0 5
5797: ARRAY
5798: PUSH
5799: LD_INT 2
5801: ARRAY
5802: PPUSH
5803: CALL_OW 298
5807: ST_TO_ADDR
// if d = 0 then
5808: LD_VAR 0 7
5812: PUSH
5813: LD_INT 0
5815: EQUAL
5816: IFFALSE 5820
// continue ;
5818: GO 5755
// if d < dist then
5820: LD_VAR 0 7
5824: PUSH
5825: LD_VAR 0 6
5829: LESS
5830: IFFALSE 5892
// begin _x := list [ i ] [ 1 ] ;
5832: LD_ADDR_VAR 0 8
5836: PUSH
5837: LD_VAR 0 3
5841: PUSH
5842: LD_VAR 0 5
5846: ARRAY
5847: PUSH
5848: LD_INT 1
5850: ARRAY
5851: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5852: LD_ADDR_VAR 0 9
5856: PUSH
5857: LD_VAR 0 3
5861: PUSH
5862: LD_VAR 0 5
5866: ARRAY
5867: PUSH
5868: LD_INT 2
5870: ARRAY
5871: ST_TO_ADDR
// _i := i ;
5872: LD_ADDR_VAR 0 10
5876: PUSH
5877: LD_VAR 0 5
5881: ST_TO_ADDR
// dist := d ;
5882: LD_ADDR_VAR 0 6
5886: PUSH
5887: LD_VAR 0 7
5891: ST_TO_ADDR
// end ; end ;
5892: GO 5755
5894: POP
5895: POP
// result := [ _x , _y , _i , dist ] ;
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: LD_VAR 0 8
5905: PUSH
5906: LD_VAR 0 9
5910: PUSH
5911: LD_VAR 0 10
5915: PUSH
5916: LD_VAR 0 6
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: ST_TO_ADDR
// end ;
5927: LD_VAR 0 4
5931: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5932: LD_INT 0
5934: PPUSH
5935: PPUSH
5936: PPUSH
5937: PPUSH
// for i = 1 to 72 do
5938: LD_ADDR_VAR 0 5
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 72
5950: PUSH
5951: FOR_TO
5952: IFFALSE 6010
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5954: LD_VAR 0 5
5958: PPUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: CALL_OW 321
5968: PUSH
5969: LD_INT 1
5971: EQUAL
5972: PUSH
5973: LD_VAR 0 5
5977: PPUSH
5978: LD_VAR 0 3
5982: PPUSH
5983: CALL_OW 482
5987: PUSH
5988: LD_INT 1
5990: EQUAL
5991: AND
5992: IFFALSE 6008
// AddComResearch ( lab , i ) ;
5994: LD_VAR 0 2
5998: PPUSH
5999: LD_VAR 0 5
6003: PPUSH
6004: CALL_OW 184
6008: GO 5951
6010: POP
6011: POP
// end ;
6012: LD_VAR 0 4
6016: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
6023: PPUSH
6024: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: CALL_OW 313
6039: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6040: LD_ADDR_VAR 0 8
6044: PUSH
6045: LD_VAR 0 3
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_VAR 0 1
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 24
6074: PUSH
6075: LD_INT 750
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 54
6087: PUSH
6088: EMPTY
6089: LIST
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 70
6105: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6106: LD_ADDR_VAR 0 5
6110: PUSH
6111: LD_VAR 0 3
6115: PPUSH
6116: LD_INT 22
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: LD_INT 1000
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: PUSH
6160: EMPTY
6161: LIST
6162: PPUSH
6163: CALL_OW 70
6167: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6168: LD_VAR 0 5
6172: NOT
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 25
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 24
6198: PUSH
6199: LD_INT 250
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 69
6215: NOT
6216: AND
6217: IFFALSE 6221
// exit ;
6219: GO 6333
// if buildings_list > 0 and engineerOkInside then
6221: LD_VAR 0 5
6225: PUSH
6226: LD_INT 0
6228: GREATER
6229: PUSH
6230: LD_VAR 0 7
6234: AND
6235: IFFALSE 6261
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6237: LD_VAR 0 7
6241: PPUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: PPUSH
6257: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6261: LD_VAR 0 5
6265: PUSH
6266: LD_INT 0
6268: GREATER
6269: PUSH
6270: LD_VAR 0 8
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: PUSH
6313: LD_INT 0
6315: GREATER
6316: AND
6317: IFFALSE 6333
// ComEnterUnit ( engineerOkOutside , building ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 2
6328: PPUSH
6329: CALL_OW 120
// end ;
6333: LD_VAR 0 4
6337: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: LD_INT 22
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 23
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 24
6388: PUSH
6389: LD_INT 251
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 69
6406: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6407: LD_ADDR_VAR 0 7
6411: PUSH
6412: LD_VAR 0 3
6416: PPUSH
6417: LD_INT 22
6419: PUSH
6420: LD_VAR 0 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 23
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 25
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 50
6451: PUSH
6452: EMPTY
6453: LIST
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PPUSH
6461: CALL_OW 70
6465: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6466: LD_ADDR_VAR 0 10
6470: PUSH
6471: LD_VAR 0 3
6475: PPUSH
6476: LD_INT 22
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 24
6520: PUSH
6521: LD_INT 750
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 70
6542: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6543: LD_ADDR_VAR 0 11
6547: PUSH
6548: LD_VAR 0 2
6552: PPUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 21
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 24
6597: PUSH
6598: LD_INT 1000
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 70
6619: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6620: LD_VAR 0 10
6624: NOT
6625: PUSH
6626: LD_VAR 0 11
6630: NOT
6631: AND
6632: PUSH
6633: LD_VAR 0 6
6637: NOT
6638: AND
6639: IFFALSE 6643
// exit ;
6641: GO 6877
// if damageUnits > 0 and sci_list > 0 then
6643: LD_VAR 0 10
6647: PUSH
6648: LD_INT 0
6650: GREATER
6651: PUSH
6652: LD_VAR 0 6
6656: PUSH
6657: LD_INT 0
6659: GREATER
6660: AND
6661: IFFALSE 6677
// ComMoveToArea ( damageUnits , healArea ) ;
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 2
6672: PPUSH
6673: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6677: LD_VAR 0 11
6681: PUSH
6682: LD_INT 0
6684: GREATER
6685: PUSH
6686: LD_VAR 0 6
6690: PUSH
6691: LD_INT 0
6693: GREATER
6694: AND
6695: IFFALSE 6706
// ComExitBuilding ( sci_list ) ;
6697: LD_VAR 0 6
6701: PPUSH
6702: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6706: LD_VAR 0 11
6710: PUSH
6711: LD_INT 0
6713: GREATER
6714: PUSH
6715: LD_VAR 0 7
6719: PUSH
6720: LD_INT 0
6722: GREATER
6723: AND
6724: IFFALSE 6744
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6726: LD_VAR 0 7
6730: PPUSH
6731: LD_VAR 0 11
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PPUSH
6740: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6744: LD_VAR 0 10
6748: PUSH
6749: LD_INT 0
6751: EQUAL
6752: PUSH
6753: LD_VAR 0 11
6757: PUSH
6758: LD_INT 0
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 7
6767: PUSH
6768: LD_INT 0
6770: GREATER
6771: AND
6772: IFFALSE 6877
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6774: LD_ADDR_VAR 0 12
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_VAR 0 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 30
6803: PUSH
6804: LD_INT 8
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6821: LD_ADDR_VAR 0 13
6825: PUSH
6826: LD_INT 1
6828: PPUSH
6829: LD_VAR 0 12
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6839: LD_VAR 0 7
6843: PPUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 60
6849: PUSH
6850: EMPTY
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 72
6861: PPUSH
6862: LD_VAR 0 12
6866: PUSH
6867: LD_VAR 0 13
6871: ARRAY
6872: PPUSH
6873: CALL_OW 120
// end ; end ;
6877: LD_VAR 0 5
6881: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6886: LD_INT 22
6888: PUSH
6889: LD_VAR 0 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 2
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: PUSH
6917: LD_VAR 0 3
6921: LESSEQUAL
6922: IFFALSE 6989
// for i = 1 to vehCount do
6924: LD_ADDR_VAR 0 9
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 3
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6987
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6942: LD_VAR 0 2
6946: PPUSH
6947: LD_VAR 0 7
6951: PPUSH
6952: LD_VAR 0 5
6956: PPUSH
6957: LD_VAR 0 6
6961: PPUSH
6962: LD_VAR 0 4
6966: PUSH
6967: LD_INT 1
6969: PPUSH
6970: LD_VAR 0 4
6974: PPUSH
6975: CALL_OW 12
6979: ARRAY
6980: PPUSH
6981: CALL_OW 185
6985: GO 6939
6987: POP
6988: POP
// end ;
6989: LD_VAR 0 8
6993: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6994: LD_INT 0
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
7002: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7003: LD_ADDR_VAR 0 8
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_VAR 0 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 34
7035: PUSH
7036: LD_INT 51
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 34
7045: PUSH
7046: LD_INT 53
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 34
7055: PUSH
7056: LD_INT 52
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 24
7071: PUSH
7072: LD_INT 650
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7090: LD_INT 22
7092: PUSH
7093: LD_VAR 0 1
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 21
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: LD_INT 1000
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: PPUSH
7127: CALL_OW 69
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_OWVAR 67
7150: ARRAY
7151: GREATEREQUAL
7152: IFFALSE 7649
// repeat wait ( 0 0$1 ) ;
7154: LD_INT 35
7156: PPUSH
7157: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7161: LD_ADDR_VAR 0 8
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: LD_INT 34
7193: PUSH
7194: LD_INT 51
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 34
7203: PUSH
7204: LD_INT 53
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 34
7213: PUSH
7214: LD_INT 52
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 650
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 69
7247: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7248: LD_INT 22
7250: PUSH
7251: LD_VAR 0 1
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 95
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PPUSH
7276: CALL_OW 69
7280: NOT
7281: PUSH
7282: LD_VAR 0 11
7286: PUSH
7287: LD_INT 0
7289: EQUAL
7290: AND
7291: IFFALSE 7346
// for i := 1 to wayX do
7293: LD_ADDR_VAR 0 6
7297: PUSH
7298: DOUBLE
7299: LD_INT 1
7301: DEC
7302: ST_TO_ADDR
7303: LD_VAR 0 3
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7344
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7311: LD_VAR 0 8
7315: PPUSH
7316: LD_VAR 0 3
7320: PUSH
7321: LD_VAR 0 6
7325: ARRAY
7326: PPUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_VAR 0 6
7336: ARRAY
7337: PPUSH
7338: CALL_OW 174
7342: GO 7308
7344: POP
7345: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7346: LD_INT 22
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 95
7360: PUSH
7361: LD_VAR 0 2
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: IFFALSE 7602
// begin seeEnemy = 1 ;
7380: LD_ADDR_VAR 0 11
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for j in vehiclesOK do
7388: LD_ADDR_VAR 0 7
7392: PUSH
7393: LD_VAR 0 8
7397: PUSH
7398: FOR_IN
7399: IFFALSE 7600
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7401: LD_ADDR_VAR 0 9
7405: PUSH
7406: LD_INT 81
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 101
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: PPUSH
7437: LD_VAR 0 7
7441: PPUSH
7442: CALL_OW 74
7446: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7447: LD_ADDR_VAR 0 10
7451: PUSH
7452: LD_INT 81
7454: PUSH
7455: LD_VAR 0 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 101
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: LD_INT 59
7479: PUSH
7480: EMPTY
7481: LIST
7482: PUSH
7483: LD_INT 21
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: PPUSH
7517: CALL_OW 69
7521: PPUSH
7522: LD_VAR 0 7
7526: PPUSH
7527: CALL_OW 74
7531: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7532: LD_VAR 0 7
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 296
7546: PUSH
7547: LD_INT 8
7549: PLUS
7550: PUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: LD_VAR 0 10
7560: PPUSH
7561: CALL_OW 296
7565: LESS
7566: IFFALSE 7584
// ComAttackUnit ( j , target1 ) else
7568: LD_VAR 0 7
7572: PPUSH
7573: LD_VAR 0 9
7577: PPUSH
7578: CALL_OW 115
7582: GO 7598
// ComAttackUnit ( j , target2 ) ;
7584: LD_VAR 0 7
7588: PPUSH
7589: LD_VAR 0 10
7593: PPUSH
7594: CALL_OW 115
// end ;
7598: GO 7398
7600: POP
7601: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7602: LD_INT 22
7604: PUSH
7605: LD_VAR 0 1
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 21
7616: PUSH
7617: LD_INT 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 24
7626: PUSH
7627: LD_INT 1000
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: PUSH
7644: LD_INT 0
7646: EQUAL
7647: IFFALSE 7154
// seeEnemy = 0 ;
7649: LD_ADDR_VAR 0 11
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// end ;
7657: LD_VAR 0 5
7661: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_VAR 0 1
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: LD_INT 34
7700: PUSH
7701: LD_INT 51
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 34
7710: PUSH
7711: LD_INT 53
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 34
7720: PUSH
7721: LD_INT 52
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 3
7736: PUSH
7737: LD_INT 24
7739: PUSH
7740: LD_INT 650
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: PPUSH
7757: CALL_OW 69
7761: ST_TO_ADDR
// if damageVehicles > 0 then
7762: LD_VAR 0 8
7766: PUSH
7767: LD_INT 0
7769: GREATER
7770: IFFALSE 7791
// ComMoveXY ( damageVehicles , repX , repY ) ;
7772: LD_VAR 0 8
7776: PPUSH
7777: LD_VAR 0 3
7781: PPUSH
7782: LD_VAR 0 4
7786: PPUSH
7787: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7791: LD_VAR 0 8
7795: PPUSH
7796: LD_INT 95
7798: PUSH
7799: LD_VAR 0 2
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_INT 58
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: PUSH
7830: LD_INT 0
7832: GREATER
7833: IFFALSE 7900
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7835: LD_ADDR_VAR 0 6
7839: PUSH
7840: LD_VAR 0 8
7844: PPUSH
7845: LD_INT 95
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 58
7862: PUSH
7863: EMPTY
7864: LIST
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 72
7878: PUSH
7879: FOR_IN
7880: IFFALSE 7898
// ComExitVehicle ( UnitsInside ( i ) ) ;
7882: LD_VAR 0 6
7886: PPUSH
7887: CALL_OW 313
7891: PPUSH
7892: CALL_OW 121
7896: GO 7879
7898: POP
7899: POP
// end ;
7900: LD_VAR 0 5
7904: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7905: LD_INT 0
7907: PPUSH
7908: PPUSH
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
// for i = 1 to medicCount do
7918: LD_ADDR_VAR 0 14
7922: PUSH
7923: DOUBLE
7924: LD_INT 1
7926: DEC
7927: ST_TO_ADDR
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_TO
7934: IFFALSE 8016
// begin uc_side = side ;
7936: LD_ADDR_OWVAR 20
7940: PUSH
7941: LD_VAR 0 1
7945: ST_TO_ADDR
// uc_nation = nation ;
7946: LD_ADDR_OWVAR 21
7950: PUSH
7951: LD_VAR 0 2
7955: ST_TO_ADDR
// hc_name =  ;
7956: LD_ADDR_OWVAR 26
7960: PUSH
7961: LD_STRING 
7963: ST_TO_ADDR
// hc_gallery =  ;
7964: LD_ADDR_OWVAR 33
7968: PUSH
7969: LD_STRING 
7971: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7972: LD_INT 0
7974: PPUSH
7975: LD_INT 4
7977: PPUSH
7978: LD_VAR 0 8
7982: PPUSH
7983: CALL_OW 380
// un = CreateHuman ;
7987: LD_ADDR_VAR 0 16
7991: PUSH
7992: CALL_OW 44
7996: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7997: LD_VAR 0 16
8001: PPUSH
8002: LD_VAR 0 9
8006: PPUSH
8007: LD_INT 0
8009: PPUSH
8010: CALL_OW 49
// end ;
8014: GO 7933
8016: POP
8017: POP
// for i = 1 to soldierCount do
8018: LD_ADDR_VAR 0 14
8022: PUSH
8023: DOUBLE
8024: LD_INT 1
8026: DEC
8027: ST_TO_ADDR
8028: LD_VAR 0 3
8032: PUSH
8033: FOR_TO
8034: IFFALSE 8116
// begin uc_side = side ;
8036: LD_ADDR_OWVAR 20
8040: PUSH
8041: LD_VAR 0 1
8045: ST_TO_ADDR
// uc_nation = nation ;
8046: LD_ADDR_OWVAR 21
8050: PUSH
8051: LD_VAR 0 2
8055: ST_TO_ADDR
// hc_name =  ;
8056: LD_ADDR_OWVAR 26
8060: PUSH
8061: LD_STRING 
8063: ST_TO_ADDR
// hc_gallery =  ;
8064: LD_ADDR_OWVAR 33
8068: PUSH
8069: LD_STRING 
8071: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8072: LD_INT 0
8074: PPUSH
8075: LD_INT 1
8077: PPUSH
8078: LD_VAR 0 8
8082: PPUSH
8083: CALL_OW 380
// un = CreateHuman ;
8087: LD_ADDR_VAR 0 16
8091: PUSH
8092: CALL_OW 44
8096: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8097: LD_VAR 0 16
8101: PPUSH
8102: LD_VAR 0 9
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 49
// end ;
8114: GO 8033
8116: POP
8117: POP
// for i = 1 to sniperCount do
8118: LD_ADDR_VAR 0 14
8122: PUSH
8123: DOUBLE
8124: LD_INT 1
8126: DEC
8127: ST_TO_ADDR
8128: LD_VAR 0 4
8132: PUSH
8133: FOR_TO
8134: IFFALSE 8216
// begin uc_side = side ;
8136: LD_ADDR_OWVAR 20
8140: PUSH
8141: LD_VAR 0 1
8145: ST_TO_ADDR
// uc_nation = nation ;
8146: LD_ADDR_OWVAR 21
8150: PUSH
8151: LD_VAR 0 2
8155: ST_TO_ADDR
// hc_name =  ;
8156: LD_ADDR_OWVAR 26
8160: PUSH
8161: LD_STRING 
8163: ST_TO_ADDR
// hc_gallery =  ;
8164: LD_ADDR_OWVAR 33
8168: PUSH
8169: LD_STRING 
8171: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8172: LD_INT 0
8174: PPUSH
8175: LD_INT 5
8177: PPUSH
8178: LD_VAR 0 8
8182: PPUSH
8183: CALL_OW 380
// un = CreateHuman ;
8187: LD_ADDR_VAR 0 16
8191: PUSH
8192: CALL_OW 44
8196: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8197: LD_VAR 0 16
8201: PPUSH
8202: LD_VAR 0 9
8206: PPUSH
8207: LD_INT 0
8209: PPUSH
8210: CALL_OW 49
// end ;
8214: GO 8133
8216: POP
8217: POP
// for i = 1 to bazookCount do
8218: LD_ADDR_VAR 0 14
8222: PUSH
8223: DOUBLE
8224: LD_INT 1
8226: DEC
8227: ST_TO_ADDR
8228: LD_VAR 0 5
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8316
// begin uc_side = side ;
8236: LD_ADDR_OWVAR 20
8240: PUSH
8241: LD_VAR 0 1
8245: ST_TO_ADDR
// uc_nation = nation ;
8246: LD_ADDR_OWVAR 21
8250: PUSH
8251: LD_VAR 0 2
8255: ST_TO_ADDR
// hc_name =  ;
8256: LD_ADDR_OWVAR 26
8260: PUSH
8261: LD_STRING 
8263: ST_TO_ADDR
// hc_gallery =  ;
8264: LD_ADDR_OWVAR 33
8268: PUSH
8269: LD_STRING 
8271: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8272: LD_INT 0
8274: PPUSH
8275: LD_INT 9
8277: PPUSH
8278: LD_VAR 0 8
8282: PPUSH
8283: CALL_OW 380
// un = CreateHuman ;
8287: LD_ADDR_VAR 0 16
8291: PUSH
8292: CALL_OW 44
8296: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8297: LD_VAR 0 16
8301: PPUSH
8302: LD_VAR 0 9
8306: PPUSH
8307: LD_INT 0
8309: PPUSH
8310: CALL_OW 49
// end ;
8314: GO 8233
8316: POP
8317: POP
// for i = 1 to mortalCount do
8318: LD_ADDR_VAR 0 14
8322: PUSH
8323: DOUBLE
8324: LD_INT 1
8326: DEC
8327: ST_TO_ADDR
8328: LD_VAR 0 6
8332: PUSH
8333: FOR_TO
8334: IFFALSE 8416
// begin uc_side = side ;
8336: LD_ADDR_OWVAR 20
8340: PUSH
8341: LD_VAR 0 1
8345: ST_TO_ADDR
// uc_nation = nation ;
8346: LD_ADDR_OWVAR 21
8350: PUSH
8351: LD_VAR 0 2
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// hc_gallery =  ;
8364: LD_ADDR_OWVAR 33
8368: PUSH
8369: LD_STRING 
8371: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 8
8377: PPUSH
8378: LD_VAR 0 8
8382: PPUSH
8383: CALL_OW 380
// un = CreateHuman ;
8387: LD_ADDR_VAR 0 16
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8397: LD_VAR 0 16
8401: PPUSH
8402: LD_VAR 0 9
8406: PPUSH
8407: LD_INT 0
8409: PPUSH
8410: CALL_OW 49
// end ;
8414: GO 8333
8416: POP
8417: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8418: LD_ADDR_VAR 0 19
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_VAR 0 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 25
8440: PUSH
8441: LD_INT 1
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 25
8450: PUSH
8451: LD_INT 5
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 25
8460: PUSH
8461: LD_INT 8
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 25
8470: PUSH
8471: LD_INT 9
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8494: LD_ADDR_VAR 0 18
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 4
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8530: LD_VAR 0 18
8534: PPUSH
8535: LD_VAR 0 10
8539: PPUSH
8540: CALL_OW 113
// if strategy = 1 then
8544: LD_VAR 0 12
8548: PUSH
8549: LD_INT 1
8551: EQUAL
8552: IFFALSE 9043
// begin for i in soldiersOK_list do
8554: LD_ADDR_VAR 0 14
8558: PUSH
8559: LD_VAR 0 19
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8629
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8567: LD_VAR 0 14
8571: PPUSH
8572: LD_INT 91
8574: PPUSH
8575: LD_INT 63
8577: PPUSH
8578: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8582: LD_VAR 0 14
8586: PPUSH
8587: LD_INT 101
8589: PPUSH
8590: LD_INT 53
8592: PPUSH
8593: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8597: LD_VAR 0 14
8601: PPUSH
8602: LD_INT 75
8604: PPUSH
8605: LD_INT 23
8607: PPUSH
8608: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8612: LD_VAR 0 14
8616: PPUSH
8617: LD_INT 78
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: CALL_OW 174
// end ;
8627: GO 8564
8629: POP
8630: POP
// wait ( 0 0$30 ) ;
8631: LD_INT 1050
8633: PPUSH
8634: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8638: LD_INT 35
8640: PPUSH
8641: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8645: LD_ADDR_VAR 0 17
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_VAR 0 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: LD_INT 3
8667: PUSH
8668: LD_INT 24
8670: PUSH
8671: LD_INT 550
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: LD_INT 250
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8706: LD_ADDR_VAR 0 19
8710: PUSH
8711: LD_INT 22
8713: PUSH
8714: LD_VAR 0 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: LD_INT 25
8728: PUSH
8729: LD_INT 1
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 5
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 25
8748: PUSH
8749: LD_INT 8
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 9
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 24
8775: PUSH
8776: LD_INT 1000
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: ST_TO_ADDR
// if medicCount > 0 then
8793: LD_VAR 0 7
8797: PUSH
8798: LD_INT 0
8800: GREATER
8801: IFFALSE 8845
// begin if damageUnit_list > 0 then
8803: LD_VAR 0 17
8807: PUSH
8808: LD_INT 0
8810: GREATER
8811: IFFALSE 8845
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8813: LD_VAR 0 17
8817: PPUSH
8818: LD_VAR 0 10
8822: PPUSH
8823: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8827: LD_VAR 0 7
8831: PPUSH
8832: LD_VAR 0 17
8836: PUSH
8837: LD_INT 1
8839: ARRAY
8840: PPUSH
8841: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8845: LD_ADDR_VAR 0 14
8849: PUSH
8850: LD_VAR 0 19
8854: PUSH
8855: FOR_IN
8856: IFFALSE 9032
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8858: LD_ADDR_VAR 0 22
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_VAR 0 11
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 69
8879: PPUSH
8880: LD_VAR 0 14
8884: PPUSH
8885: CALL_OW 74
8889: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8890: LD_ADDR_VAR 0 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_VAR 0 11
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 2
8909: PUSH
8910: LD_INT 59
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: PPUSH
8954: LD_VAR 0 14
8958: PPUSH
8959: CALL_OW 74
8963: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8964: LD_VAR 0 14
8968: PPUSH
8969: LD_VAR 0 22
8973: PPUSH
8974: CALL_OW 296
8978: PUSH
8979: LD_INT 8
8981: PLUS
8982: PUSH
8983: LD_VAR 0 14
8987: PPUSH
8988: LD_VAR 0 23
8992: PPUSH
8993: CALL_OW 296
8997: LESS
8998: IFFALSE 9016
// begin ComAttackUnit ( i , target1 ) ;
9000: LD_VAR 0 14
9004: PPUSH
9005: LD_VAR 0 22
9009: PPUSH
9010: CALL_OW 115
// end else
9014: GO 9030
// begin ComAttackUnit ( i , target2 ) ;
9016: LD_VAR 0 14
9020: PPUSH
9021: LD_VAR 0 23
9025: PPUSH
9026: CALL_OW 115
// end ; end ;
9030: GO 8855
9032: POP
9033: POP
// until soldiersOK_list = [ ] ;
9034: LD_VAR 0 19
9038: PUSH
9039: EMPTY
9040: EQUAL
9041: IFFALSE 8638
// end ; if strategy = 2 then
9043: LD_VAR 0 12
9047: PUSH
9048: LD_INT 2
9050: EQUAL
9051: IFFALSE 9505
// begin for i in soldiersOK_list do
9053: LD_ADDR_VAR 0 14
9057: PUSH
9058: LD_VAR 0 19
9062: PUSH
9063: FOR_IN
9064: IFFALSE 9098
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9066: LD_VAR 0 14
9070: PPUSH
9071: LD_INT 91
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9081: LD_VAR 0 14
9085: PPUSH
9086: LD_INT 75
9088: PPUSH
9089: LD_INT 33
9091: PPUSH
9092: CALL_OW 174
// end ;
9096: GO 9063
9098: POP
9099: POP
// repeat wait ( 0 0$3 ) ;
9100: LD_INT 105
9102: PPUSH
9103: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9107: LD_ADDR_VAR 0 17
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_VAR 0 1
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 1
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: LD_INT 24
9132: PUSH
9133: LD_INT 550
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 24
9146: PUSH
9147: LD_INT 250
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9168: LD_ADDR_VAR 0 19
9172: PUSH
9173: LD_INT 22
9175: PUSH
9176: LD_VAR 0 1
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 2
9187: PUSH
9188: LD_INT 25
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 25
9200: PUSH
9201: LD_INT 5
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 25
9210: PUSH
9211: LD_INT 8
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 25
9220: PUSH
9221: LD_INT 9
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 24
9237: PUSH
9238: LD_INT 1000
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 69
9254: ST_TO_ADDR
// if medicCount > 0 then
9255: LD_VAR 0 7
9259: PUSH
9260: LD_INT 0
9262: GREATER
9263: IFFALSE 9307
// begin if damageUnit_list > 0 then
9265: LD_VAR 0 17
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9307
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9275: LD_VAR 0 17
9279: PPUSH
9280: LD_VAR 0 10
9284: PPUSH
9285: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_VAR 0 17
9298: PUSH
9299: LD_INT 1
9301: ARRAY
9302: PPUSH
9303: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9307: LD_ADDR_VAR 0 14
9311: PUSH
9312: LD_VAR 0 19
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9494
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9320: LD_ADDR_VAR 0 22
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_VAR 0 11
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 69
9341: PPUSH
9342: LD_VAR 0 14
9346: PPUSH
9347: CALL_OW 74
9351: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9352: LD_ADDR_VAR 0 23
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 11
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 2
9371: PUSH
9372: LD_INT 59
9374: PUSH
9375: EMPTY
9376: LIST
9377: PUSH
9378: LD_INT 21
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 21
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: PPUSH
9411: CALL_OW 69
9415: PPUSH
9416: LD_VAR 0 14
9420: PPUSH
9421: CALL_OW 74
9425: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9426: LD_VAR 0 14
9430: PPUSH
9431: LD_VAR 0 22
9435: PPUSH
9436: CALL_OW 296
9440: PUSH
9441: LD_INT 8
9443: PLUS
9444: PUSH
9445: LD_VAR 0 14
9449: PPUSH
9450: LD_VAR 0 23
9454: PPUSH
9455: CALL_OW 296
9459: LESS
9460: IFFALSE 9478
// begin ComAttackUnit ( i , target1 ) ;
9462: LD_VAR 0 14
9466: PPUSH
9467: LD_VAR 0 22
9471: PPUSH
9472: CALL_OW 115
// end else
9476: GO 9492
// begin ComAttackUnit ( i , target2 ) ;
9478: LD_VAR 0 14
9482: PPUSH
9483: LD_VAR 0 23
9487: PPUSH
9488: CALL_OW 115
// end ; end ;
9492: GO 9317
9494: POP
9495: POP
// until soldiersOK_list = [ ] ;
9496: LD_VAR 0 19
9500: PUSH
9501: EMPTY
9502: EQUAL
9503: IFFALSE 9100
// end ; if not soldiersOK_list and medic_list then
9505: LD_VAR 0 19
9509: NOT
9510: PUSH
9511: LD_VAR 0 18
9515: AND
9516: IFFALSE 9656
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9518: LD_ADDR_VAR 0 18
9522: PUSH
9523: LD_INT 22
9525: PUSH
9526: LD_VAR 0 1
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 25
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 50
9547: PUSH
9548: EMPTY
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9561: LD_INT 35
9563: PPUSH
9564: CALL_OW 67
// for i in medic_list do
9568: LD_ADDR_VAR 0 14
9572: PUSH
9573: LD_VAR 0 18
9577: PUSH
9578: FOR_IN
9579: IFFALSE 9647
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9581: LD_VAR 0 14
9585: PPUSH
9586: CALL_OW 314
9590: NOT
9591: PUSH
9592: LD_VAR 0 14
9596: PPUSH
9597: LD_INT 4
9599: PPUSH
9600: CALL_OW 308
9604: NOT
9605: AND
9606: IFFALSE 9622
// ComMoveToArea ( i , RussianAttack ) else
9608: LD_VAR 0 14
9612: PPUSH
9613: LD_INT 4
9615: PPUSH
9616: CALL_OW 113
9620: GO 9645
// if IsInArea ( i , RussianAttack ) then
9622: LD_VAR 0 14
9626: PPUSH
9627: LD_INT 4
9629: PPUSH
9630: CALL_OW 308
9634: IFFALSE 9645
// RemoveUnit ( i ) ;
9636: LD_VAR 0 14
9640: PPUSH
9641: CALL_OW 64
9645: GO 9578
9647: POP
9648: POP
// until not medic_list ;
9649: LD_VAR 0 18
9653: NOT
9654: IFFALSE 9518
// end ; end ;
9656: LD_VAR 0 13
9660: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// amChassisTab = [ ] ;
9674: LD_ADDR_VAR 0 19
9678: PUSH
9679: EMPTY
9680: ST_TO_ADDR
// arChassisTab = [ ] ;
9681: LD_ADDR_VAR 0 18
9685: PUSH
9686: EMPTY
9687: ST_TO_ADDR
// ruChassisTab = [ ] ;
9688: LD_ADDR_VAR 0 17
9692: PUSH
9693: EMPTY
9694: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9695: LD_INT 35
9697: PPUSH
9698: CALL_OW 67
// if nation = 1 then
9702: LD_VAR 0 5
9706: PUSH
9707: LD_INT 1
9709: EQUAL
9710: IFFALSE 10201
// begin uc_side = side ;
9712: LD_ADDR_OWVAR 20
9716: PUSH
9717: LD_VAR 0 2
9721: ST_TO_ADDR
// uc_nation = nation ;
9722: LD_ADDR_OWVAR 21
9726: PUSH
9727: LD_VAR 0 5
9731: ST_TO_ADDR
// vc_engine = vehengine ;
9732: LD_ADDR_OWVAR 39
9736: PUSH
9737: LD_VAR 0 6
9741: ST_TO_ADDR
// vc_control = vehcontrol ;
9742: LD_ADDR_OWVAR 38
9746: PUSH
9747: LD_VAR 0 7
9751: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9752: LD_ADDR_OWVAR 40
9756: PUSH
9757: LD_VAR 0 10
9761: PUSH
9762: LD_INT 1
9764: PPUSH
9765: LD_VAR 0 10
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: ST_TO_ADDR
// for j = 1 to AMWeapon do
9776: LD_ADDR_VAR 0 14
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_VAR 0 10
9790: PUSH
9791: FOR_TO
9792: IFFALSE 10093
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9794: LD_VAR 0 10
9798: PUSH
9799: LD_VAR 0 14
9803: ARRAY
9804: PUSH
9805: LD_INT 2
9807: EQUAL
9808: PUSH
9809: LD_VAR 0 10
9813: PUSH
9814: LD_VAR 0 14
9818: ARRAY
9819: PUSH
9820: LD_INT 3
9822: EQUAL
9823: OR
9824: IFFALSE 9877
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9826: LD_ADDR_VAR 0 19
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: LD_INT 4
9842: PUSH
9843: LD_INT 5
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9853: LD_ADDR_OWVAR 37
9857: PUSH
9858: LD_VAR 0 19
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_VAR 0 19
9870: PPUSH
9871: CALL_OW 12
9875: ARRAY
9876: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9877: LD_VAR 0 10
9881: PUSH
9882: LD_VAR 0 14
9886: ARRAY
9887: PUSH
9888: LD_INT 4
9890: EQUAL
9891: PUSH
9892: LD_VAR 0 10
9896: PUSH
9897: LD_VAR 0 14
9901: ARRAY
9902: PUSH
9903: LD_INT 5
9905: EQUAL
9906: OR
9907: PUSH
9908: LD_VAR 0 10
9912: PUSH
9913: LD_VAR 0 14
9917: ARRAY
9918: PUSH
9919: LD_INT 9
9921: EQUAL
9922: OR
9923: PUSH
9924: LD_VAR 0 10
9928: PUSH
9929: LD_VAR 0 14
9933: ARRAY
9934: PUSH
9935: LD_INT 11
9937: EQUAL
9938: OR
9939: PUSH
9940: LD_VAR 0 10
9944: PUSH
9945: LD_VAR 0 14
9949: ARRAY
9950: PUSH
9951: LD_INT 7
9953: EQUAL
9954: OR
9955: IFFALSE 10004
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9957: LD_ADDR_VAR 0 19
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9980: LD_ADDR_OWVAR 37
9984: PUSH
9985: LD_VAR 0 19
9989: PUSH
9990: LD_INT 1
9992: PPUSH
9993: LD_VAR 0 19
9997: PPUSH
9998: CALL_OW 12
10002: ARRAY
10003: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10004: LD_VAR 0 10
10008: PUSH
10009: LD_VAR 0 14
10013: ARRAY
10014: PUSH
10015: LD_INT 8
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 10
10023: PUSH
10024: LD_VAR 0 14
10028: ARRAY
10029: PUSH
10030: LD_INT 6
10032: EQUAL
10033: OR
10034: PUSH
10035: LD_VAR 0 10
10039: PUSH
10040: LD_VAR 0 14
10044: ARRAY
10045: PUSH
10046: LD_INT 10
10048: EQUAL
10049: OR
10050: IFFALSE 10091
// begin amChassisTab = [ 4 , 5 ] ;
10052: LD_ADDR_VAR 0 19
10056: PUSH
10057: LD_INT 4
10059: PUSH
10060: LD_INT 5
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10067: LD_ADDR_OWVAR 37
10071: PUSH
10072: LD_VAR 0 19
10076: PUSH
10077: LD_INT 1
10079: PPUSH
10080: LD_VAR 0 19
10084: PPUSH
10085: CALL_OW 12
10089: ARRAY
10090: ST_TO_ADDR
// end ; end ;
10091: GO 9791
10093: POP
10094: POP
// veh = CreateVehicle ;
10095: LD_ADDR_VAR 0 16
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10105: LD_VAR 0 16
10109: PPUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: CALL_OW 49
// if vehControl = 1 then
10122: LD_VAR 0 7
10126: PUSH
10127: LD_INT 1
10129: EQUAL
10130: IFFALSE 10187
// begin hc_gallery =  ;
10132: LD_ADDR_OWVAR 33
10136: PUSH
10137: LD_STRING 
10139: ST_TO_ADDR
// hc_name =  ;
10140: LD_ADDR_OWVAR 26
10144: PUSH
10145: LD_STRING 
10147: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10148: LD_INT 0
10150: PPUSH
10151: LD_INT 3
10153: PPUSH
10154: LD_VAR 0 4
10158: PPUSH
10159: CALL_OW 380
// un = CreateHuman ;
10163: LD_ADDR_VAR 0 15
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10173: LD_VAR 0 15
10177: PPUSH
10178: LD_VAR 0 16
10182: PPUSH
10183: CALL_OW 52
// end ; i = i + 1 ;
10187: LD_ADDR_VAR 0 13
10191: PUSH
10192: LD_VAR 0 13
10196: PUSH
10197: LD_INT 1
10199: PLUS
10200: ST_TO_ADDR
// end ; if nation = 2 then
10201: LD_VAR 0 5
10205: PUSH
10206: LD_INT 2
10208: EQUAL
10209: IFFALSE 10633
// begin uc_side = side ;
10211: LD_ADDR_OWVAR 20
10215: PUSH
10216: LD_VAR 0 2
10220: ST_TO_ADDR
// uc_nation = nation ;
10221: LD_ADDR_OWVAR 21
10225: PUSH
10226: LD_VAR 0 5
10230: ST_TO_ADDR
// vc_engine = vehengine ;
10231: LD_ADDR_OWVAR 39
10235: PUSH
10236: LD_VAR 0 6
10240: ST_TO_ADDR
// vc_control = vehcontrol ;
10241: LD_ADDR_OWVAR 38
10245: PUSH
10246: LD_VAR 0 7
10250: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10251: LD_ADDR_OWVAR 40
10255: PUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_VAR 0 9
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: ST_TO_ADDR
// for j = 1 to ARWeapons do
10275: LD_ADDR_VAR 0 14
10279: PUSH
10280: DOUBLE
10281: LD_INT 1
10283: DEC
10284: ST_TO_ADDR
10285: LD_VAR 0 9
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10525
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10293: LD_VAR 0 9
10297: PUSH
10298: LD_VAR 0 14
10302: ARRAY
10303: PUSH
10304: LD_INT 24
10306: EQUAL
10307: PUSH
10308: LD_VAR 0 9
10312: PUSH
10313: LD_VAR 0 14
10317: ARRAY
10318: PUSH
10319: LD_INT 22
10321: EQUAL
10322: OR
10323: PUSH
10324: LD_VAR 0 9
10328: PUSH
10329: LD_VAR 0 14
10333: ARRAY
10334: PUSH
10335: LD_INT 23
10337: EQUAL
10338: OR
10339: PUSH
10340: LD_VAR 0 9
10344: PUSH
10345: LD_VAR 0 14
10349: ARRAY
10350: PUSH
10351: LD_INT 30
10353: EQUAL
10354: OR
10355: IFFALSE 10404
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10357: LD_ADDR_VAR 0 18
10361: PUSH
10362: LD_INT 11
10364: PUSH
10365: LD_INT 12
10367: PUSH
10368: LD_INT 13
10370: PUSH
10371: LD_INT 14
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10380: LD_ADDR_OWVAR 37
10384: PUSH
10385: LD_VAR 0 18
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_VAR 0 18
10397: PPUSH
10398: CALL_OW 12
10402: ARRAY
10403: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10404: LD_VAR 0 9
10408: PUSH
10409: LD_VAR 0 14
10413: ARRAY
10414: PUSH
10415: LD_INT 29
10417: EQUAL
10418: PUSH
10419: LD_VAR 0 9
10423: PUSH
10424: LD_VAR 0 14
10428: ARRAY
10429: PUSH
10430: LD_INT 28
10432: EQUAL
10433: OR
10434: PUSH
10435: LD_VAR 0 9
10439: PUSH
10440: LD_VAR 0 14
10444: ARRAY
10445: PUSH
10446: LD_INT 27
10448: EQUAL
10449: OR
10450: PUSH
10451: LD_VAR 0 9
10455: PUSH
10456: LD_VAR 0 14
10460: ARRAY
10461: PUSH
10462: LD_INT 26
10464: EQUAL
10465: OR
10466: PUSH
10467: LD_VAR 0 9
10471: PUSH
10472: LD_VAR 0 14
10476: ARRAY
10477: PUSH
10478: LD_INT 25
10480: EQUAL
10481: OR
10482: IFFALSE 10523
// begin arChassisTab = [ 13 , 14 ] ;
10484: LD_ADDR_VAR 0 18
10488: PUSH
10489: LD_INT 13
10491: PUSH
10492: LD_INT 14
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10499: LD_ADDR_OWVAR 37
10503: PUSH
10504: LD_VAR 0 18
10508: PUSH
10509: LD_INT 1
10511: PPUSH
10512: LD_VAR 0 18
10516: PPUSH
10517: CALL_OW 12
10521: ARRAY
10522: ST_TO_ADDR
// end ; end ;
10523: GO 10290
10525: POP
10526: POP
// veh = CreateVehicle ;
10527: LD_ADDR_VAR 0 16
10531: PUSH
10532: CALL_OW 45
10536: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10537: LD_VAR 0 16
10541: PPUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_INT 0
10549: PPUSH
10550: CALL_OW 49
// if vehcontrol = 1 then
10554: LD_VAR 0 7
10558: PUSH
10559: LD_INT 1
10561: EQUAL
10562: IFFALSE 10619
// begin hc_gallery =  ;
10564: LD_ADDR_OWVAR 33
10568: PUSH
10569: LD_STRING 
10571: ST_TO_ADDR
// hc_name =  ;
10572: LD_ADDR_OWVAR 26
10576: PUSH
10577: LD_STRING 
10579: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10580: LD_INT 0
10582: PPUSH
10583: LD_INT 3
10585: PPUSH
10586: LD_VAR 0 4
10590: PPUSH
10591: CALL_OW 380
// un = CreateHuman ;
10595: LD_ADDR_VAR 0 15
10599: PUSH
10600: CALL_OW 44
10604: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10605: LD_VAR 0 15
10609: PPUSH
10610: LD_VAR 0 16
10614: PPUSH
10615: CALL_OW 52
// end ; i = i + 1 ;
10619: LD_ADDR_VAR 0 13
10623: PUSH
10624: LD_VAR 0 13
10628: PUSH
10629: LD_INT 1
10631: PLUS
10632: ST_TO_ADDR
// end ; if nation = 3 then
10633: LD_VAR 0 5
10637: PUSH
10638: LD_INT 3
10640: EQUAL
10641: IFFALSE 11033
// begin uc_side = side ;
10643: LD_ADDR_OWVAR 20
10647: PUSH
10648: LD_VAR 0 2
10652: ST_TO_ADDR
// uc_nation = nation ;
10653: LD_ADDR_OWVAR 21
10657: PUSH
10658: LD_VAR 0 5
10662: ST_TO_ADDR
// vc_engine = vehengine ;
10663: LD_ADDR_OWVAR 39
10667: PUSH
10668: LD_VAR 0 6
10672: ST_TO_ADDR
// vc_control = vehcontrol ;
10673: LD_ADDR_OWVAR 38
10677: PUSH
10678: LD_VAR 0 7
10682: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10683: LD_ADDR_OWVAR 40
10687: PUSH
10688: LD_VAR 0 8
10692: PUSH
10693: LD_INT 1
10695: PPUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: CALL_OW 12
10705: ARRAY
10706: ST_TO_ADDR
// for j = 1 to RuWeapons do
10707: LD_ADDR_VAR 0 14
10711: PUSH
10712: DOUBLE
10713: LD_INT 1
10715: DEC
10716: ST_TO_ADDR
10717: LD_VAR 0 8
10721: PUSH
10722: FOR_TO
10723: IFFALSE 10925
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10725: LD_VAR 0 8
10729: PUSH
10730: LD_VAR 0 14
10734: ARRAY
10735: PUSH
10736: LD_INT 42
10738: EQUAL
10739: PUSH
10740: LD_VAR 0 8
10744: PUSH
10745: LD_VAR 0 14
10749: ARRAY
10750: PUSH
10751: LD_INT 43
10753: EQUAL
10754: OR
10755: PUSH
10756: LD_VAR 0 8
10760: PUSH
10761: LD_VAR 0 14
10765: ARRAY
10766: PUSH
10767: LD_INT 44
10769: EQUAL
10770: OR
10771: PUSH
10772: LD_VAR 0 8
10776: PUSH
10777: LD_VAR 0 14
10781: ARRAY
10782: PUSH
10783: LD_INT 45
10785: EQUAL
10786: OR
10787: PUSH
10788: LD_VAR 0 8
10792: PUSH
10793: LD_VAR 0 14
10797: ARRAY
10798: PUSH
10799: LD_INT 49
10801: EQUAL
10802: OR
10803: IFFALSE 10852
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10805: LD_ADDR_VAR 0 17
10809: PUSH
10810: LD_INT 21
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 23
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10828: LD_ADDR_OWVAR 37
10832: PUSH
10833: LD_VAR 0 17
10837: PUSH
10838: LD_INT 1
10840: PPUSH
10841: LD_VAR 0 17
10845: PPUSH
10846: CALL_OW 12
10850: ARRAY
10851: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10852: LD_VAR 0 8
10856: PUSH
10857: LD_VAR 0 14
10861: ARRAY
10862: PUSH
10863: LD_INT 46
10865: EQUAL
10866: PUSH
10867: LD_VAR 0 8
10871: PUSH
10872: LD_VAR 0 14
10876: ARRAY
10877: PUSH
10878: LD_INT 47
10880: EQUAL
10881: OR
10882: IFFALSE 10923
// begin ruChassisTab = [ 23 , 24 ] ;
10884: LD_ADDR_VAR 0 17
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 24
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10899: LD_ADDR_OWVAR 37
10903: PUSH
10904: LD_VAR 0 17
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_VAR 0 17
10916: PPUSH
10917: CALL_OW 12
10921: ARRAY
10922: ST_TO_ADDR
// end ; end ;
10923: GO 10722
10925: POP
10926: POP
// veh = CreateVehicle ;
10927: LD_ADDR_VAR 0 16
10931: PUSH
10932: CALL_OW 45
10936: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10937: LD_VAR 0 16
10941: PPUSH
10942: LD_VAR 0 1
10946: PPUSH
10947: LD_INT 0
10949: PPUSH
10950: CALL_OW 49
// if vehcontrol = 1 then
10954: LD_VAR 0 7
10958: PUSH
10959: LD_INT 1
10961: EQUAL
10962: IFFALSE 11019
// begin hc_gallery =  ;
10964: LD_ADDR_OWVAR 33
10968: PUSH
10969: LD_STRING 
10971: ST_TO_ADDR
// hc_name =  ;
10972: LD_ADDR_OWVAR 26
10976: PUSH
10977: LD_STRING 
10979: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10980: LD_INT 0
10982: PPUSH
10983: LD_INT 3
10985: PPUSH
10986: LD_VAR 0 4
10990: PPUSH
10991: CALL_OW 380
// un = CreateHuman ;
10995: LD_ADDR_VAR 0 15
10999: PUSH
11000: CALL_OW 44
11004: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11005: LD_VAR 0 15
11009: PPUSH
11010: LD_VAR 0 16
11014: PPUSH
11015: CALL_OW 52
// end ; i = i + 1 ;
11019: LD_ADDR_VAR 0 13
11023: PUSH
11024: LD_VAR 0 13
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ST_TO_ADDR
// end ; until i = vehCount ;
11033: LD_VAR 0 13
11037: PUSH
11038: LD_VAR 0 3
11042: EQUAL
11043: IFFALSE 9695
// repeat wait ( 0 0$1 ) ;
11045: LD_INT 35
11047: PPUSH
11048: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11052: LD_INT 22
11054: PUSH
11055: LD_VAR 0 2
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 24
11076: PUSH
11077: LD_INT 250
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: LD_INT 58
11089: PUSH
11090: EMPTY
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 69
11107: PUSH
11108: LD_INT 0
11110: GREATER
11111: IFFALSE 11353
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11113: LD_ADDR_VAR 0 13
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_VAR 0 2
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 21
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 24
11142: PUSH
11143: LD_INT 250
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 3
11152: PUSH
11153: LD_INT 58
11155: PUSH
11156: EMPTY
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11351
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11177: LD_ADDR_VAR 0 21
11181: PUSH
11182: LD_INT 22
11184: PUSH
11185: LD_VAR 0 11
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: PPUSH
11199: LD_VAR 0 13
11203: PPUSH
11204: CALL_OW 74
11208: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11209: LD_ADDR_VAR 0 22
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 59
11231: PUSH
11232: EMPTY
11233: LIST
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 21
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: PPUSH
11273: LD_VAR 0 13
11277: PPUSH
11278: CALL_OW 74
11282: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11283: LD_VAR 0 13
11287: PPUSH
11288: LD_VAR 0 21
11292: PPUSH
11293: CALL_OW 296
11297: PUSH
11298: LD_INT 8
11300: PLUS
11301: PUSH
11302: LD_VAR 0 13
11306: PPUSH
11307: LD_VAR 0 22
11311: PPUSH
11312: CALL_OW 296
11316: LESS
11317: IFFALSE 11335
// begin ComAttackUnit ( i , target1 ) ;
11319: LD_VAR 0 13
11323: PPUSH
11324: LD_VAR 0 21
11328: PPUSH
11329: CALL_OW 115
// end else
11333: GO 11349
// begin ComAttackUnit ( i , target2 ) ;
11335: LD_VAR 0 13
11339: PPUSH
11340: LD_VAR 0 22
11344: PPUSH
11345: CALL_OW 115
// end ; end ;
11349: GO 11174
11351: POP
11352: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11353: LD_INT 22
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 24
11377: PUSH
11378: LD_INT 250
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: LD_INT 58
11390: PUSH
11391: EMPTY
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PPUSH
11404: CALL_OW 69
11408: PUSH
11409: LD_INT 0
11411: EQUAL
11412: IFFALSE 11045
// end ; end_of_file
11414: LD_VAR 0 12
11418: RET
// every 1 do var i , gammaSquad , startX , startY ;
11419: GO 11421
11421: DISABLE
11422: LD_INT 0
11424: PPUSH
11425: PPUSH
11426: PPUSH
11427: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: LD_EXP 8
11437: PUSH
11438: LD_EXP 9
11442: PUSH
11443: LD_EXP 10
11447: PUSH
11448: LD_EXP 11
11452: PUSH
11453: LD_EXP 12
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11465: LD_ADDR_VAR 0 3
11469: PUSH
11470: LD_INT 46
11472: PUSH
11473: LD_INT 45
11475: PUSH
11476: LD_INT 44
11478: PUSH
11479: LD_INT 43
11481: PUSH
11482: LD_INT 42
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_INT 14
11499: PUSH
11500: LD_INT 12
11502: PUSH
11503: LD_INT 10
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: LD_INT 6
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11519: LD_EXP 11
11523: PPUSH
11524: LD_INT 31
11526: PPUSH
11527: LD_INT 59
11529: PPUSH
11530: LD_INT 19
11532: PPUSH
11533: LD_INT 5
11535: PPUSH
11536: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11540: LD_INT 32
11542: PPUSH
11543: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11547: LD_INT 32
11549: PPUSH
11550: LD_INT 51
11552: PPUSH
11553: LD_INT 26
11555: PPUSH
11556: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11560: LD_INT 32
11562: PPUSH
11563: LD_INT 53
11565: PPUSH
11566: LD_INT 23
11568: PPUSH
11569: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11573: LD_INT 32
11575: PPUSH
11576: LD_INT 52
11578: PPUSH
11579: LD_INT 19
11581: PPUSH
11582: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11586: LD_INT 35
11588: PPUSH
11589: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11593: LD_INT 32
11595: PPUSH
11596: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11600: LD_INT 32
11602: PPUSH
11603: CALL_OW 250
11607: PUSH
11608: LD_INT 52
11610: EQUAL
11611: PUSH
11612: LD_INT 32
11614: PPUSH
11615: CALL_OW 251
11619: PUSH
11620: LD_INT 19
11622: EQUAL
11623: AND
11624: IFFALSE 11586
// ComExitVehicle ( JMM ) ;
11626: LD_EXP 1
11630: PPUSH
11631: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11635: LD_EXP 7
11639: PPUSH
11640: LD_EXP 1
11644: PPUSH
11645: CALL_OW 119
// wait ( 0 0$01 ) ;
11649: LD_INT 35
11651: PPUSH
11652: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11656: LD_EXP 1
11660: PPUSH
11661: LD_INT 46
11663: PPUSH
11664: LD_INT 10
11666: PPUSH
11667: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11671: LD_EXP 1
11675: PPUSH
11676: LD_EXP 7
11680: PPUSH
11681: CALL_OW 179
// wait ( 0 0$4 ) ;
11685: LD_INT 140
11687: PPUSH
11688: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11692: LD_EXP 1
11696: PPUSH
11697: LD_STRING D1-JMM-1
11699: PPUSH
11700: CALL_OW 88
// if not dialogue_skipped then
11704: LD_OWVAR 59
11708: NOT
11709: IFFALSE 12366
// begin for i := 1 to gammaSquad do
11711: LD_ADDR_VAR 0 1
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 2
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11788
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11729: LD_VAR 0 2
11733: PUSH
11734: LD_VAR 0 1
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 3
11744: PUSH
11745: LD_VAR 0 1
11749: ARRAY
11750: PPUSH
11751: LD_VAR 0 4
11755: PUSH
11756: LD_VAR 0 1
11760: ARRAY
11761: PPUSH
11762: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11766: LD_VAR 0 2
11770: PUSH
11771: LD_VAR 0 1
11775: ARRAY
11776: PPUSH
11777: LD_EXP 1
11781: PPUSH
11782: CALL_OW 179
// end ;
11786: GO 11726
11788: POP
11789: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11790: LD_EXP 4
11794: PPUSH
11795: LD_INT 41
11797: PPUSH
11798: LD_INT 4
11800: PPUSH
11801: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11805: LD_EXP 4
11809: PPUSH
11810: LD_EXP 1
11814: PPUSH
11815: CALL_OW 179
// if Lisa = false and Bobby then
11819: LD_EXP 4
11823: PUSH
11824: LD_INT 0
11826: EQUAL
11827: PUSH
11828: LD_EXP 2
11832: AND
11833: IFFALSE 11864
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11835: LD_EXP 2
11839: PPUSH
11840: LD_INT 41
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11850: LD_EXP 2
11854: PPUSH
11855: LD_EXP 1
11859: PPUSH
11860: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11864: LD_EXP 4
11868: PUSH
11869: LD_INT 0
11871: EQUAL
11872: PUSH
11873: LD_EXP 2
11877: PUSH
11878: LD_INT 0
11880: EQUAL
11881: AND
11882: PUSH
11883: LD_EXP 3
11887: AND
11888: IFFALSE 11919
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11890: LD_EXP 3
11894: PPUSH
11895: LD_INT 41
11897: PPUSH
11898: LD_INT 4
11900: PPUSH
11901: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11905: LD_EXP 3
11909: PPUSH
11910: LD_EXP 1
11914: PPUSH
11915: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11919: LD_EXP 4
11923: PUSH
11924: LD_INT 0
11926: EQUAL
11927: PUSH
11928: LD_EXP 2
11932: PUSH
11933: LD_INT 0
11935: EQUAL
11936: AND
11937: PUSH
11938: LD_EXP 3
11942: PUSH
11943: LD_INT 0
11945: EQUAL
11946: AND
11947: IFFALSE 11978
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11949: LD_EXP 6
11953: PPUSH
11954: LD_INT 41
11956: PPUSH
11957: LD_INT 4
11959: PPUSH
11960: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11964: LD_EXP 6
11968: PPUSH
11969: LD_EXP 1
11973: PPUSH
11974: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11978: LD_EXP 7
11982: PPUSH
11983: LD_STRING D1-Brown-1
11985: PPUSH
11986: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11990: LD_EXP 1
11994: PPUSH
11995: LD_STRING D1-JMM-2
11997: PPUSH
11998: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12002: LD_EXP 7
12006: PPUSH
12007: LD_STRING D1-Brown-2
12009: PPUSH
12010: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12014: LD_EXP 1
12018: PPUSH
12019: LD_EXP 9
12023: PPUSH
12024: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12028: LD_EXP 9
12032: PPUSH
12033: LD_STRING D1-FSol1-2
12035: PPUSH
12036: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12040: LD_EXP 1
12044: PPUSH
12045: LD_EXP 8
12049: PPUSH
12050: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12054: LD_EXP 8
12058: PPUSH
12059: LD_STRING D1-Sol2-2
12061: PPUSH
12062: CALL_OW 88
// if Lisa then
12066: LD_EXP 4
12070: IFFALSE 12110
// begin ComTurnUnit ( JMM , Lisa ) ;
12072: LD_EXP 1
12076: PPUSH
12077: LD_EXP 4
12081: PPUSH
12082: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12086: LD_EXP 4
12090: PPUSH
12091: LD_STRING D1-Lisa-2
12093: PPUSH
12094: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12098: LD_EXP 1
12102: PPUSH
12103: LD_STRING D1-JMM-3
12105: PPUSH
12106: CALL_OW 88
// end ; if Bobby then
12110: LD_EXP 2
12114: IFFALSE 12154
// begin ComTurnUnit ( JMM , Bobby ) ;
12116: LD_EXP 1
12120: PPUSH
12121: LD_EXP 2
12125: PPUSH
12126: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12130: LD_EXP 2
12134: PPUSH
12135: LD_STRING D1-Bobby-2
12137: PPUSH
12138: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12142: LD_EXP 1
12146: PPUSH
12147: LD_STRING D1-JMM-3
12149: PPUSH
12150: CALL_OW 88
// end ; if Cyrus then
12154: LD_EXP 3
12158: IFFALSE 12198
// begin ComTurnUnit ( JMM , Cyrus ) ;
12160: LD_EXP 1
12164: PPUSH
12165: LD_EXP 3
12169: PPUSH
12170: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12174: LD_EXP 3
12178: PPUSH
12179: LD_STRING D1-Cyrus-2
12181: PPUSH
12182: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12186: LD_EXP 1
12190: PPUSH
12191: LD_STRING D1-JMM-3
12193: PPUSH
12194: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12198: LD_EXP 1
12202: PPUSH
12203: LD_EXP 7
12207: PPUSH
12208: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12212: LD_EXP 1
12216: PPUSH
12217: LD_STRING D1-JMM-3a
12219: PPUSH
12220: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12224: LD_EXP 7
12228: PPUSH
12229: LD_INT 38
12231: PPUSH
12232: LD_INT 5
12234: PPUSH
12235: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12239: LD_EXP 7
12243: PPUSH
12244: LD_EXP 1
12248: PPUSH
12249: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12253: LD_EXP 1
12257: PPUSH
12258: LD_INT 40
12260: PPUSH
12261: LD_INT 7
12263: PPUSH
12264: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12268: LD_EXP 1
12272: PPUSH
12273: LD_EXP 7
12277: PPUSH
12278: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12282: LD_EXP 7
12286: PPUSH
12287: LD_STRING D1-Brown-3
12289: PPUSH
12290: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12294: LD_EXP 14
12298: PPUSH
12299: LD_STRING D1-Har-3
12301: PPUSH
12302: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12306: LD_EXP 1
12310: PPUSH
12311: LD_STRING D1-JMM-4
12313: PPUSH
12314: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12318: LD_EXP 14
12322: PPUSH
12323: LD_STRING D1-Har-4
12325: PPUSH
12326: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12330: LD_EXP 1
12334: PPUSH
12335: LD_STRING D1-JMM-5
12337: PPUSH
12338: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12342: LD_EXP 14
12346: PPUSH
12347: LD_STRING D1-Har-5
12349: PPUSH
12350: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12354: LD_EXP 1
12358: PPUSH
12359: LD_STRING D1-JMM-6
12361: PPUSH
12362: CALL_OW 88
// end ; InGameOff ;
12366: CALL_OW 9
// PrepareRussianConvoy ;
12370: CALL 3386 0 0
// ChangeMissionObjectives ( M1 ) ;
12374: LD_STRING M1
12376: PPUSH
12377: CALL_OW 337
// SaveForQuickRestart ;
12381: CALL_OW 22
// timerStatus = 1 ;
12385: LD_ADDR_EXP 29
12389: PUSH
12390: LD_INT 1
12392: ST_TO_ADDR
// startTimer = 1 ;
12393: LD_ADDR_EXP 30
12397: PUSH
12398: LD_INT 1
12400: ST_TO_ADDR
// bonusAvalaible = 1 ;
12401: LD_ADDR_EXP 44
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12409: LD_INT 105
12411: PPUSH
12412: CALL_OW 67
// DialogueOn ;
12416: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12420: LD_EXP 12
12424: PPUSH
12425: LD_STRING D9-Mech1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING D9-JMM-1
12439: PPUSH
12440: CALL_OW 88
// DialogueOff ;
12444: CALL_OW 7
// end ;
12448: PPOPN 4
12450: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12451: LD_INT 47
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 321
12461: PUSH
12462: LD_INT 2
12464: EQUAL
12465: PUSH
12466: LD_EXP 31
12470: NOT
12471: AND
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 21
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 57
12505: PUSH
12506: EMPTY
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: PUSH
12520: LD_INT 0
12522: GREATER
12523: AND
12524: IFFALSE 12762
12526: GO 12528
12528: DISABLE
// begin factoryDialog := true ;
12529: LD_ADDR_EXP 31
12533: PUSH
12534: LD_INT 1
12536: ST_TO_ADDR
// if IsOk ( Campell ) then
12537: LD_EXP 12
12541: PPUSH
12542: CALL_OW 302
12546: IFFALSE 12562
// begin Say ( Campell , D10-Mech1-1 ) ;
12548: LD_EXP 12
12552: PPUSH
12553: LD_STRING D10-Mech1-1
12555: PPUSH
12556: CALL_OW 88
// end else
12560: GO 12762
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12562: LD_INT 22
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 25
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 26
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PUSH
12613: LD_EXP 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: PUSH
12621: LD_INT 0
12623: GREATER
12624: DIFF
12625: IFFALSE 12699
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12627: LD_INT 22
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 25
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 26
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: PUSH
12678: LD_EXP 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: DIFF
12686: PPUSH
12687: LD_STRING D10-Mech1-1
12689: PPUSH
12690: LD_STRING D10-Mech1-1
12692: PPUSH
12693: CALL 4581 0 3
// end else
12697: GO 12762
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 26
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 1
12736: ARRAY
12737: PPUSH
12738: CALL_OW 69
12742: PUSH
12743: LD_EXP 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: DIFF
12751: PPUSH
12752: LD_STRING D10-Mech1-1
12754: PPUSH
12755: LD_STRING D10-Mech1-1
12757: PPUSH
12758: CALL 4581 0 3
// end ; end ; end ;
12762: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12763: LD_INT 22
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 30
12775: PUSH
12776: LD_INT 32
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: PUSH
12792: LD_INT 0
12794: GREATER
12795: PUSH
12796: LD_EXP 32
12800: PUSH
12801: LD_INT 0
12803: EQUAL
12804: AND
12805: IFFALSE 13045
12807: GO 12809
12809: DISABLE
// begin if IsOK ( Claptopn ) then
12810: LD_EXP 11
12814: PPUSH
12815: CALL_OW 302
12819: IFFALSE 12835
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12821: LD_EXP 11
12825: PPUSH
12826: LD_STRING D9b-Eng1-1
12828: PPUSH
12829: CALL_OW 88
// end else
12833: GO 13031
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12835: LD_INT 22
12837: PUSH
12838: LD_INT 1
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 1
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: LD_INT 3
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 26
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PUSH
12886: LD_EXP 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: PUSH
12894: LD_INT 0
12896: GREATER
12897: DIFF
12898: IFFALSE 12972
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12900: LD_INT 22
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 21
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 26
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: PUSH
12951: LD_EXP 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: DIFF
12959: PPUSH
12960: LD_STRING D9b-Eng1-1
12962: PPUSH
12963: LD_STRING D9b-Eng1-11
12965: PPUSH
12966: CALL 4581 0 3
// end else
12970: GO 13031
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12972: LD_INT 22
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 21
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: PUSH
13012: LD_EXP 1
13016: PUSH
13017: EMPTY
13018: LIST
13019: DIFF
13020: PPUSH
13021: LD_STRING D9b-Eng1-1
13023: PPUSH
13024: LD_STRING D9b-Eng1-1
13026: PPUSH
13027: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
13031: LD_EXP 33
13035: PUSH
13036: LD_INT 0
13038: EQUAL
13039: IFFALSE 13045
// EnergyDialog ;
13041: CALL 4984 0 0
// end ;
13045: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13046: LD_EXP 34
13050: PUSH
13051: LD_INT 1
13053: EQUAL
13054: PUSH
13055: LD_EXP 35
13059: PUSH
13060: LD_INT 1
13062: EQUAL
13063: AND
13064: IFFALSE 13076
13066: GO 13068
13068: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13069: LD_STRING M1a
13071: PPUSH
13072: CALL_OW 337
13076: END
// every 3 3$0 do
13077: GO 13079
13079: DISABLE
// begin PrepareFirstAttack ;
13080: CALL 4186 0 0
// end ;
13084: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13085: LD_INT 22
13087: PUSH
13088: LD_INT 5
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 21
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 3
13107: PUSH
13108: LD_INT 24
13110: PUSH
13111: LD_INT 250
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 69
13131: PUSH
13132: LD_INT 0
13134: GREATER
13135: PUSH
13136: LD_EXP 23
13140: PUSH
13141: LD_INT 1
13143: EQUAL
13144: AND
13145: IFFALSE 13446
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
// begin firstRussianAttack = 2 ;
13153: LD_ADDR_EXP 23
13157: PUSH
13158: LD_INT 2
13160: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13161: LD_INT 22
13163: PUSH
13164: LD_INT 5
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 21
13173: PUSH
13174: LD_INT 1
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PPUSH
13190: LD_INT 125
13192: PPUSH
13193: LD_INT 98
13195: PPUSH
13196: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13200: LD_INT 22
13202: PUSH
13203: LD_INT 1
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 21
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: PUSH
13229: LD_EXP 1
13233: PUSH
13234: LD_EXP 7
13238: PUSH
13239: LD_EXP 4
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: DIFF
13249: PPUSH
13250: LD_STRING DAtt1-Sol1-1
13252: PPUSH
13253: LD_STRING DAtt1-FSol1-1
13255: PPUSH
13256: CALL 4581 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13260: LD_EXP 1
13264: PPUSH
13265: LD_STRING DAtt1-JMM-1
13267: PPUSH
13268: CALL_OW 88
// if Lisa then
13272: LD_EXP 4
13276: IFFALSE 13292
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13278: LD_EXP 4
13282: PPUSH
13283: LD_STRING DAtt1a-Lisa-1
13285: PPUSH
13286: CALL_OW 88
// end else
13290: GO 13363
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13292: LD_INT 22
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 26
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PUSH
13332: LD_EXP 1
13336: PUSH
13337: LD_EXP 7
13341: PUSH
13342: LD_EXP 4
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: DIFF
13352: PPUSH
13353: LD_STRING DAtt1a-Sol1-1
13355: PPUSH
13356: LD_STRING DAtt1-FSol1-1
13358: PPUSH
13359: CALL 4581 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13363: LD_EXP 1
13367: PPUSH
13368: LD_STRING DAtt1a-JMM-1
13370: PPUSH
13371: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13375: LD_INT 22
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: PUSH
13415: LD_EXP 1
13419: PUSH
13420: LD_EXP 7
13424: PUSH
13425: LD_EXP 4
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: DIFF
13435: PPUSH
13436: LD_STRING DAtt1b-Sol1-1
13438: PPUSH
13439: LD_STRING DAtt1a-Sol1-1
13441: PPUSH
13442: CALL 4581 0 3
// end ;
13446: PPOPN 1
13448: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13449: LD_EXP 23
13453: PUSH
13454: LD_INT 2
13456: EQUAL
13457: IFFALSE 13519
13459: GO 13461
13461: DISABLE
13462: LD_INT 0
13464: PPUSH
// begin enable ;
13465: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: LD_INT 5
13473: PPUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 70
13502: PUSH
13503: FOR_IN
13504: IFFALSE 13517
// RemoveUnit ( i ) ;
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 64
13515: GO 13503
13517: POP
13518: POP
// end ;
13519: PPOPN 1
13521: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13522: LD_INT 22
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: PPUSH
13535: CALL_OW 69
13539: PUSH
13540: LD_INT 0
13542: EQUAL
13543: PUSH
13544: LD_EXP 23
13548: PUSH
13549: LD_INT 2
13551: EQUAL
13552: AND
13553: IFFALSE 13566
13555: GO 13557
13557: DISABLE
// firstRussianAttack = 3 ;
13558: LD_ADDR_EXP 23
13562: PUSH
13563: LD_INT 3
13565: ST_TO_ADDR
13566: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13567: LD_EXP 28
13571: PUSH
13572: LD_INT 0
13574: EQUAL
13575: IFFALSE 13656
13577: GO 13579
13579: DISABLE
// begin timerStatus = 4 ;
13580: LD_ADDR_EXP 29
13584: PUSH
13585: LD_INT 4
13587: ST_TO_ADDR
// DialogueOn ;
13588: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13592: LD_EXP 13
13596: PPUSH
13597: LD_STRING D2-Don-1
13599: PPUSH
13600: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13604: LD_EXP 1
13608: PPUSH
13609: LD_STRING D2-JMM-1
13611: PPUSH
13612: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13616: LD_EXP 13
13620: PPUSH
13621: LD_STRING D2-Don-2
13623: PPUSH
13624: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13628: LD_EXP 1
13632: PPUSH
13633: LD_STRING D2-JMM-2
13635: PPUSH
13636: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13640: LD_EXP 13
13644: PPUSH
13645: LD_STRING D2-Don-3
13647: PPUSH
13648: CALL_OW 94
// DialogueOff ;
13652: CALL_OW 7
// end ;
13656: END
// every 12 12$0 do var tmp ;
13657: GO 13659
13659: DISABLE
13660: LD_INT 0
13662: PPUSH
// begin PrepareDonaldsonArmy ;
13663: CALL 1177 0 0
// CenterNowOnUnits ( Donaldson ) ;
13667: LD_EXP 13
13671: PPUSH
13672: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13676: LD_INT 22
13678: PUSH
13679: LD_INT 6
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: NOT
13691: IFFALSE 13707
// begin wait ( 3 ) ;
13693: LD_INT 3
13695: PPUSH
13696: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13700: LD_STRING ACH_BASE
13702: PPUSH
13703: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 21
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 26
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 25
13744: PUSH
13745: LD_INT 1
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: PUSH
13763: LD_EXP 5
13767: PUSH
13768: EMPTY
13769: LIST
13770: DIFF
13771: ST_TO_ADDR
// DialogueOn ;
13772: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_STRING D3-Sol1-1
13783: PPUSH
13784: LD_STRING D3-Sol1-1
13786: PPUSH
13787: CALL 4581 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13791: LD_INT 22
13793: PUSH
13794: LD_INT 4
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 26
13813: PUSH
13814: LD_INT 1
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 25
13823: PUSH
13824: LD_INT 3
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: PPUSH
13842: LD_STRING D3-Sol2-1
13844: PPUSH
13845: LD_STRING D3-Sol2-1
13847: PPUSH
13848: CALL 4581 0 3
// if Frank then
13852: LD_EXP 5
13856: IFFALSE 13870
// Say ( Frank , D3-Frank-1 ) ;
13858: LD_EXP 5
13862: PPUSH
13863: LD_STRING D3-Frank-1
13865: PPUSH
13866: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13870: LD_EXP 13
13874: PPUSH
13875: LD_STRING D3-Don-1
13877: PPUSH
13878: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13882: LD_EXP 13
13886: PPUSH
13887: LD_STRING D3-Don-1a
13889: PPUSH
13890: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13894: LD_EXP 1
13898: PPUSH
13899: LD_STRING D3-JMM-1
13901: PPUSH
13902: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13906: LD_EXP 13
13910: PPUSH
13911: LD_STRING D3-Don-2
13913: PPUSH
13914: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13918: LD_INT 22
13920: PUSH
13921: LD_INT 6
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 21
13930: PUSH
13931: LD_INT 1
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 69
13946: PUSH
13947: LD_INT 0
13949: GREATER
13950: IFFALSE 14088
// begin Say ( JMM , D3-JMM-2 ) ;
13952: LD_EXP 1
13956: PPUSH
13957: LD_STRING D3-JMM-2
13959: PPUSH
13960: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13964: LD_EXP 13
13968: PPUSH
13969: LD_STRING D3-Don-3
13971: PPUSH
13972: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13976: LD_EXP 1
13980: PPUSH
13981: LD_STRING D3-JMM-3
13983: PPUSH
13984: CALL_OW 88
// if IsOK ( Frank ) then
13988: LD_EXP 5
13992: PPUSH
13993: CALL_OW 302
13997: IFFALSE 14011
// Say ( Frank , D3-Frank-3 ) ;
13999: LD_EXP 5
14003: PPUSH
14004: LD_STRING D3-Frank-3
14006: PPUSH
14007: CALL_OW 88
// DialogueOff ;
14011: CALL_OW 7
// if IsOK ( Frank ) then
14015: LD_EXP 5
14019: PPUSH
14020: CALL_OW 302
14024: IFFALSE 14086
// begin SetSide ( Frank , 0 ) ;
14026: LD_EXP 5
14030: PPUSH
14031: LD_INT 0
14033: PPUSH
14034: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14038: LD_EXP 5
14042: PPUSH
14043: LD_INT 12
14045: PPUSH
14046: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14050: LD_EXP 5
14054: PPUSH
14055: LD_STRING 04t_Frank
14057: PPUSH
14058: CALL_OW 38
// Wait ( 0 0$3 ) ;
14062: LD_INT 105
14064: PPUSH
14065: CALL_OW 67
// frankScoutBase = 1 ;
14069: LD_ADDR_EXP 25
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14077: LD_EXP 5
14081: PPUSH
14082: CALL_OW 64
// end ; end else
14086: GO 14175
// begin Say ( JMM , D3-JMM-4 ) ;
14088: LD_EXP 1
14092: PPUSH
14093: LD_STRING D3-JMM-4
14095: PPUSH
14096: CALL_OW 88
// DialogueOff ;
14100: CALL_OW 7
// if IsOK ( Frank ) then
14104: LD_EXP 5
14108: PPUSH
14109: CALL_OW 302
14113: IFFALSE 14175
// begin SetSide ( Frank , 0 ) ;
14115: LD_EXP 5
14119: PPUSH
14120: LD_INT 0
14122: PPUSH
14123: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14127: LD_EXP 5
14131: PPUSH
14132: LD_INT 12
14134: PPUSH
14135: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14139: LD_EXP 5
14143: PPUSH
14144: LD_STRING 04t_Frank
14146: PPUSH
14147: CALL_OW 38
// Wait ( 0 0$3 ) ;
14151: LD_INT 105
14153: PPUSH
14154: CALL_OW 67
// frankScoutBase = 1 ;
14158: LD_ADDR_EXP 25
14162: PUSH
14163: LD_INT 1
14165: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14166: LD_EXP 5
14170: PPUSH
14171: CALL_OW 64
// end ; end ; end ;
14175: PPOPN 1
14177: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14178: LD_EXP 13
14182: PPUSH
14183: CALL_OW 255
14187: PUSH
14188: LD_INT 4
14190: EQUAL
14191: PUSH
14192: LD_EXP 13
14196: PPUSH
14197: CALL_OW 302
14201: AND
14202: IFFALSE 14371
14204: GO 14206
14206: DISABLE
14207: LD_INT 0
14209: PPUSH
14210: PPUSH
// begin wait ( 5 5$00 ) ;
14211: LD_INT 10500
14213: PPUSH
14214: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
14218: LD_EXP 13
14222: PPUSH
14223: CALL_OW 255
14227: PUSH
14228: LD_INT 1
14230: EQUAL
14231: PUSH
14232: LD_EXP 13
14236: PPUSH
14237: CALL_OW 301
14241: OR
14242: IFFALSE 14246
// exit ;
14244: GO 14371
// SayRadio ( Donaldson , D3b-Don-1 ) ;
14246: LD_EXP 13
14250: PPUSH
14251: LD_STRING D3b-Don-1
14253: PPUSH
14254: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14258: LD_ADDR_EXP 41
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14266: LD_ADDR_VAR 0 2
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 4
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14286: LD_INT 35
14288: PPUSH
14289: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14293: LD_VAR 0 2
14297: NOT
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 101
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: OR
14328: IFFALSE 14286
// if not tmp then
14330: LD_VAR 0 2
14334: NOT
14335: IFFALSE 14339
// exit ;
14337: GO 14371
// for i in tmp do
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_VAR 0 2
14348: PUSH
14349: FOR_IN
14350: IFFALSE 14369
// ComAgressiveMove ( i , 52 , 64 ) ;
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_INT 52
14359: PPUSH
14360: LD_INT 64
14362: PPUSH
14363: CALL_OW 114
14367: GO 14349
14369: POP
14370: POP
// end ;
14371: PPOPN 2
14373: END
// every 0 0$1 trigger not saveDonaldson and FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) do var i ;
14374: LD_EXP 24
14378: NOT
14379: PUSH
14380: LD_INT 26
14382: PPUSH
14383: LD_INT 22
14385: PUSH
14386: LD_INT 1
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 70
14397: AND
14398: IFFALSE 14453
14400: GO 14402
14402: DISABLE
14403: LD_INT 0
14405: PPUSH
// begin saveDonaldson := 1 ;
14406: LD_ADDR_EXP 24
14410: PUSH
14411: LD_INT 1
14413: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 4
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PPUSH
14429: CALL_OW 69
14433: PUSH
14434: FOR_IN
14435: IFFALSE 14451
// SetSide ( i , 1 ) ;
14437: LD_VAR 0 1
14441: PPUSH
14442: LD_INT 1
14444: PPUSH
14445: CALL_OW 235
14449: GO 14434
14451: POP
14452: POP
// end ;
14453: PPOPN 1
14455: END
// every 0 0$1 trigger frankScoutBase do
14456: LD_EXP 25
14460: IFFALSE 14825
14462: GO 14464
14464: DISABLE
// begin wait ( 2 2$30 ) ;
14465: LD_INT 5250
14467: PPUSH
14468: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14472: LD_INT 35
14474: PPUSH
14475: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14479: LD_INT 81
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 92
14491: PUSH
14492: LD_INT 84
14494: PUSH
14495: LD_INT 28
14497: PUSH
14498: LD_INT 22
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: NOT
14516: IFFALSE 14472
// uc_side = 4 ;
14518: LD_ADDR_OWVAR 20
14522: PUSH
14523: LD_INT 4
14525: ST_TO_ADDR
// uc_nation = 1 ;
14526: LD_ADDR_OWVAR 21
14530: PUSH
14531: LD_INT 1
14533: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14534: LD_ADDR_EXP 5
14538: PUSH
14539: LD_STRING 04t_Frank
14541: PPUSH
14542: CALL_OW 34
14546: ST_TO_ADDR
// if not Frank then
14547: LD_EXP 5
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14825
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14556: LD_EXP 5
14560: PPUSH
14561: LD_INT 13
14563: PPUSH
14564: LD_INT 0
14566: PPUSH
14567: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14571: LD_INT 35
14573: PPUSH
14574: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14578: LD_EXP 1
14582: PPUSH
14583: CALL_OW 310
14587: NOT
14588: PUSH
14589: LD_EXP 1
14593: PPUSH
14594: LD_INT 4
14596: PPUSH
14597: CALL_OW 296
14601: PUSH
14602: LD_INT 20
14604: LESS
14605: AND
14606: IFFALSE 14639
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14608: LD_EXP 5
14612: PPUSH
14613: LD_EXP 1
14617: PPUSH
14618: CALL_OW 250
14622: PPUSH
14623: LD_EXP 1
14627: PPUSH
14628: CALL_OW 251
14632: PPUSH
14633: CALL_OW 111
14637: GO 14654
// ComMoveXY ( Frank , 51 , 15 ) ;
14639: LD_EXP 5
14643: PPUSH
14644: LD_INT 51
14646: PPUSH
14647: LD_INT 15
14649: PPUSH
14650: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14654: LD_EXP 5
14658: PPUSH
14659: LD_EXP 1
14663: PPUSH
14664: CALL_OW 296
14668: PUSH
14669: LD_INT 10
14671: LESS
14672: IFFALSE 14571
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14674: LD_EXP 1
14678: PUSH
14679: LD_EXP 5
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 87
// DialogueOn ;
14692: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14696: LD_EXP 5
14700: PPUSH
14701: LD_STRING D3a-Frank-1
14703: PPUSH
14704: CALL_OW 88
// if Lisa then
14708: LD_EXP 4
14712: IFFALSE 14762
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14714: LD_EXP 4
14718: PPUSH
14719: LD_STRING D3a-Lisa-1
14721: PPUSH
14722: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14726: LD_EXP 5
14730: PPUSH
14731: LD_STRING D3a-Frank-2
14733: PPUSH
14734: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14738: LD_EXP 4
14742: PPUSH
14743: LD_STRING D3a-Lisa-2
14745: PPUSH
14746: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14750: LD_EXP 5
14754: PPUSH
14755: LD_STRING D3a-Frank-3
14757: PPUSH
14758: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14762: LD_EXP 1
14766: PPUSH
14767: LD_STRING D3a-JMM-3
14769: PPUSH
14770: CALL_OW 88
// DialogueOff ;
14774: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14778: LD_EXP 5
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 235
// InGameOn ;
14790: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14794: LD_INT 1
14796: PPUSH
14797: LD_INT 7
14799: PPUSH
14800: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14804: LD_INT 93
14806: PPUSH
14807: LD_INT 91
14809: PPUSH
14810: CALL_OW 84
// wait ( 0 0$5 ) ;
14814: LD_INT 175
14816: PPUSH
14817: CALL_OW 67
// InGameOff ;
14821: CALL_OW 9
// end ;
14825: END
// every 12 12$0 trigger Difficulty > 1 do
14826: LD_OWVAR 67
14830: PUSH
14831: LD_INT 1
14833: GREATER
14834: IFFALSE 14858
14836: GO 14838
14838: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14839: LD_INT 24
14841: PPUSH
14842: LD_INT 24
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: LD_INT 53
14853: PPUSH
14854: CALL_OW 185
14858: END
// every 18 18$0 do
14859: GO 14861
14861: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14862: LD_EXP 14
14866: PPUSH
14867: LD_STRING D4-Har-1
14869: PPUSH
14870: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14874: LD_EXP 1
14878: PPUSH
14879: LD_STRING D4-JMM-1
14881: PPUSH
14882: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14886: LD_EXP 14
14890: PPUSH
14891: LD_STRING D4-Har-2
14893: PPUSH
14894: CALL_OW 94
// case query ( Q1 ) of 1 :
14898: LD_STRING Q1
14900: PPUSH
14901: CALL_OW 97
14905: PUSH
14906: LD_INT 1
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 14973
14914: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14915: LD_EXP 1
14919: PPUSH
14920: LD_STRING D5-JMM-1
14922: PPUSH
14923: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14927: LD_EXP 14
14931: PPUSH
14932: LD_STRING D5-Har-1
14934: PPUSH
14935: CALL_OW 94
// timeToSupport = 10 10$0 ;
14939: LD_ADDR_EXP 28
14943: PUSH
14944: LD_INT 21000
14946: ST_TO_ADDR
// timerStatus = 2 ;
14947: LD_ADDR_EXP 29
14951: PUSH
14952: LD_INT 2
14954: ST_TO_ADDR
// startTimer = 1 ;
14955: LD_ADDR_EXP 30
14959: PUSH
14960: LD_INT 1
14962: ST_TO_ADDR
// harrAnswer = 1 ;
14963: LD_ADDR_EXP 26
14967: PUSH
14968: LD_INT 1
14970: ST_TO_ADDR
// end ; 2 :
14971: GO 15108
14973: LD_INT 2
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15040
14981: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14982: LD_EXP 1
14986: PPUSH
14987: LD_STRING D5-JMM-2
14989: PPUSH
14990: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14994: LD_EXP 14
14998: PPUSH
14999: LD_STRING D5-Har-2
15001: PPUSH
15002: CALL_OW 94
// timeToSupport = 5 5$0 ;
15006: LD_ADDR_EXP 28
15010: PUSH
15011: LD_INT 10500
15013: ST_TO_ADDR
// timerStatus = 2 ;
15014: LD_ADDR_EXP 29
15018: PUSH
15019: LD_INT 2
15021: ST_TO_ADDR
// startTimer = 1 ;
15022: LD_ADDR_EXP 30
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// harrAnswer = 2 ;
15030: LD_ADDR_EXP 26
15034: PUSH
15035: LD_INT 2
15037: ST_TO_ADDR
// end ; 3 :
15038: GO 15108
15040: LD_INT 3
15042: DOUBLE
15043: EQUAL
15044: IFTRUE 15048
15046: GO 15107
15048: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15049: LD_EXP 1
15053: PPUSH
15054: LD_STRING D5-JMM-3
15056: PPUSH
15057: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15061: LD_EXP 14
15065: PPUSH
15066: LD_STRING D5-Har-3
15068: PPUSH
15069: CALL_OW 94
// timeToSupport = 5 5$0 ;
15073: LD_ADDR_EXP 28
15077: PUSH
15078: LD_INT 10500
15080: ST_TO_ADDR
// timerStatus = 2 ;
15081: LD_ADDR_EXP 29
15085: PUSH
15086: LD_INT 2
15088: ST_TO_ADDR
// startTimer = 1 ;
15089: LD_ADDR_EXP 30
15093: PUSH
15094: LD_INT 1
15096: ST_TO_ADDR
// harrAnswer = 3 ;
15097: LD_ADDR_EXP 26
15101: PUSH
15102: LD_INT 3
15104: ST_TO_ADDR
// end ; end ;
15105: GO 15108
15107: POP
// end ;
15108: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15109: LD_EXP 29
15113: PUSH
15114: LD_INT 2
15116: EQUAL
15117: PUSH
15118: LD_EXP 28
15122: PUSH
15123: LD_INT 0
15125: EQUAL
15126: AND
15127: IFFALSE 15404
15129: GO 15131
15131: DISABLE
// begin timerStatus = 4 ;
15132: LD_ADDR_EXP 29
15136: PUSH
15137: LD_INT 4
15139: ST_TO_ADDR
// if harrAnswer = 1 then
15140: LD_EXP 26
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: IFFALSE 15228
// begin PrepareHarrisonSupport ( 3 ) ;
15150: LD_INT 3
15152: PPUSH
15153: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15157: LD_INT 2100
15159: PPUSH
15160: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15164: LD_EXP 14
15168: PPUSH
15169: LD_STRING D7-Har-1
15171: PPUSH
15172: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15176: LD_STRING M2
15178: PPUSH
15179: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15183: LD_ADDR_EXP 27
15187: PUSH
15188: LD_INT 31500
15190: PUSH
15191: LD_INT 10500
15193: PUSH
15194: LD_INT 8400
15196: PUSH
15197: LD_INT 6300
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: LD_OWVAR 67
15209: ARRAY
15210: PLUS
15211: ST_TO_ADDR
// startTimer = 1 ;
15212: LD_ADDR_EXP 30
15216: PUSH
15217: LD_INT 1
15219: ST_TO_ADDR
// timerStatus = 3 ;
15220: LD_ADDR_EXP 29
15224: PUSH
15225: LD_INT 3
15227: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15228: LD_EXP 26
15232: PUSH
15233: LD_INT 2
15235: EQUAL
15236: IFFALSE 15316
// begin PrepareHarrisonSupport ( 4 ) ;
15238: LD_INT 4
15240: PPUSH
15241: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15245: LD_INT 2100
15247: PPUSH
15248: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15252: LD_EXP 14
15256: PPUSH
15257: LD_STRING D7-Har-1
15259: PPUSH
15260: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15264: LD_STRING M2
15266: PPUSH
15267: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15271: LD_ADDR_EXP 27
15275: PUSH
15276: LD_INT 33600
15278: PUSH
15279: LD_INT 10500
15281: PUSH
15282: LD_INT 8400
15284: PUSH
15285: LD_INT 6300
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PUSH
15293: LD_OWVAR 67
15297: ARRAY
15298: PLUS
15299: ST_TO_ADDR
// startTimer = 1 ;
15300: LD_ADDR_EXP 30
15304: PUSH
15305: LD_INT 1
15307: ST_TO_ADDR
// timerStatus = 3 ;
15308: LD_ADDR_EXP 29
15312: PUSH
15313: LD_INT 3
15315: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15316: LD_EXP 26
15320: PUSH
15321: LD_INT 3
15323: EQUAL
15324: IFFALSE 15404
// begin PrepareHarrisonSupport ( 5 ) ;
15326: LD_INT 5
15328: PPUSH
15329: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15333: LD_INT 2100
15335: PPUSH
15336: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15340: LD_EXP 14
15344: PPUSH
15345: LD_STRING D7-Har-1
15347: PPUSH
15348: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15352: LD_STRING M2
15354: PPUSH
15355: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15359: LD_ADDR_EXP 27
15363: PUSH
15364: LD_INT 35700
15366: PUSH
15367: LD_INT 10500
15369: PUSH
15370: LD_INT 6300
15372: PUSH
15373: LD_INT 4200
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: LD_OWVAR 67
15385: ARRAY
15386: PLUS
15387: ST_TO_ADDR
// startTimer = 1 ;
15388: LD_ADDR_EXP 30
15392: PUSH
15393: LD_INT 1
15395: ST_TO_ADDR
// timerStatus = 3 ;
15396: LD_ADDR_EXP 29
15400: PUSH
15401: LD_INT 3
15403: ST_TO_ADDR
// end ; end ;
15404: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15405: LD_EXP 27
15409: PUSH
15410: LD_INT 8400
15412: LESSEQUAL
15413: PUSH
15414: LD_EXP 29
15418: PUSH
15419: LD_INT 3
15421: EQUAL
15422: AND
15423: IFFALSE 15455
15425: GO 15427
15427: DISABLE
// begin DialogueOn ;
15428: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15432: LD_EXP 14
15436: PPUSH
15437: LD_STRING D7a-Har-1
15439: PPUSH
15440: CALL_OW 94
// DialogueOff ;
15444: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15448: LD_STRING M2a
15450: PPUSH
15451: CALL_OW 337
// end ;
15455: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15456: LD_EXP 27
15460: PUSH
15461: LD_INT 0
15463: LESSEQUAL
15464: PUSH
15465: LD_EXP 29
15469: PUSH
15470: LD_INT 3
15472: EQUAL
15473: AND
15474: PUSH
15475: LD_EXP 40
15479: NOT
15480: AND
15481: IFFALSE 15620
15483: GO 15485
15485: DISABLE
15486: LD_INT 0
15488: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PUSH
15509: LD_EXP 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: DIFF
15517: ST_TO_ADDR
// saveDonaldson = 2 ;
15518: LD_ADDR_EXP 24
15522: PUSH
15523: LD_INT 2
15525: ST_TO_ADDR
// DialogueOn ;
15526: CALL_OW 6
// if IsOK ( Donaldson ) then
15530: LD_EXP 13
15534: PPUSH
15535: CALL_OW 302
15539: IFFALSE 15555
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15541: LD_EXP 14
15545: PPUSH
15546: LD_STRING D8-Har-1
15548: PPUSH
15549: CALL_OW 94
// end else
15553: GO 15567
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15555: LD_EXP 14
15559: PPUSH
15560: LD_STRING D8-Har-1a
15562: PPUSH
15563: CALL_OW 94
// end ; DialogueOff ;
15567: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 4
15578: PPUSH
15579: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15583: LD_VAR 0 1
15587: PPUSH
15588: LD_INT 88
15590: PPUSH
15591: LD_INT 89
15593: PPUSH
15594: CALL_OW 114
// honor = 0 ;
15598: LD_ADDR_EXP 39
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15606: LD_INT 350
15608: PPUSH
15609: CALL_OW 67
// YouLost ( LostCommand ) ;
15613: LD_STRING LostCommand
15615: PPUSH
15616: CALL_OW 104
// end ;
15620: PPOPN 1
15622: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15623: LD_INT 22
15625: PUSH
15626: LD_INT 6
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 21
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: PUSH
15656: LD_EXP 20
15660: PUSH
15661: LD_INT 0
15663: EQUAL
15664: AND
15665: PUSH
15666: LD_EXP 44
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: IFFALSE 15769
15677: GO 15679
15679: DISABLE
15680: LD_INT 0
15682: PPUSH
15683: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 21
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 23
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 69
15728: ST_TO_ADDR
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15767
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_INT 4
15752: PPUSH
15753: CALL_OW 12
15757: PPUSH
15758: LD_INT 500
15760: PPUSH
15761: CALL_OW 492
// end ;
15765: GO 15739
15767: POP
15768: POP
// end ; end_of_file
15769: PPOPN 2
15771: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15772: GO 15774
15774: DISABLE
15775: LD_INT 0
15777: PPUSH
// begin enemyWayX = [ ] ;
15778: LD_ADDR_EXP 50
15782: PUSH
15783: EMPTY
15784: ST_TO_ADDR
// enemyWayY = [ ] ;
15785: LD_ADDR_EXP 51
15789: PUSH
15790: EMPTY
15791: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15792: LD_ADDR_VAR 0 1
15796: PUSH
15797: LD_INT 1
15799: PPUSH
15800: LD_INT 3
15802: PPUSH
15803: CALL_OW 12
15807: ST_TO_ADDR
// if rnd = 1 then
15808: LD_VAR 0 1
15812: PUSH
15813: LD_INT 1
15815: EQUAL
15816: IFFALSE 15856
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15818: LD_ADDR_EXP 50
15822: PUSH
15823: LD_INT 73
15825: PUSH
15826: LD_INT 46
15828: PUSH
15829: LD_INT 29
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15837: LD_ADDR_EXP 51
15841: PUSH
15842: LD_INT 71
15844: PUSH
15845: LD_INT 43
15847: PUSH
15848: LD_INT 29
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
// end ; if rnd = 2 then
15856: LD_VAR 0 1
15860: PUSH
15861: LD_INT 2
15863: EQUAL
15864: IFFALSE 15888
// begin enemyWayX = [ 64 ] ;
15866: LD_ADDR_EXP 50
15870: PUSH
15871: LD_INT 64
15873: PUSH
15874: EMPTY
15875: LIST
15876: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15877: LD_ADDR_EXP 51
15881: PUSH
15882: LD_INT 43
15884: PUSH
15885: EMPTY
15886: LIST
15887: ST_TO_ADDR
// end ; if rnd = 3 then
15888: LD_VAR 0 1
15892: PUSH
15893: LD_INT 3
15895: EQUAL
15896: IFFALSE 15920
// begin enemyWayX = [ 80 ] ;
15898: LD_ADDR_EXP 50
15902: PUSH
15903: LD_INT 80
15905: PUSH
15906: EMPTY
15907: LIST
15908: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15909: LD_ADDR_EXP 51
15913: PUSH
15914: LD_INT 28
15916: PUSH
15917: EMPTY
15918: LIST
15919: ST_TO_ADDR
// end ; enable ;
15920: ENABLE
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger AIEnable = 1 do
15924: LD_EXP 37
15928: PUSH
15929: LD_INT 1
15931: EQUAL
15932: IFFALSE 16046
15934: GO 15936
15936: DISABLE
// begin enable ;
15937: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15938: LD_INT 3
15940: PPUSH
15941: LD_INT 21
15943: PPUSH
15944: LD_INT 7
15946: PPUSH
15947: CALL 6017 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15951: LD_INT 3
15953: PPUSH
15954: LD_INT 8
15956: PPUSH
15957: LD_INT 7
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL 6338 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15967: LD_INT 3
15969: PPUSH
15970: LD_INT 17
15972: PPUSH
15973: LD_INT 108
15975: PPUSH
15976: LD_INT 95
15978: PPUSH
15979: CALL 7662 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15983: LD_INT 3
15985: PPUSH
15986: LD_INT 23
15988: PPUSH
15989: LD_EXP 50
15993: PPUSH
15994: LD_EXP 51
15998: PPUSH
15999: CALL 6994 0 4
// if baseReadyToBuild = 2 then
16003: LD_EXP 20
16007: PUSH
16008: LD_INT 2
16010: EQUAL
16011: IFFALSE 16046
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16013: LD_INT 6
16015: PPUSH
16016: LD_EXP 21
16020: PPUSH
16021: LD_INT 6
16023: PPUSH
16024: CALL 6017 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16028: LD_INT 6
16030: PPUSH
16031: LD_INT 9
16033: PPUSH
16034: LD_INT 6
16036: PPUSH
16037: LD_EXP 22
16041: PPUSH
16042: CALL 6338 0 4
// end ; end ;
16046: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16047: LD_EXP 15
16051: PPUSH
16052: CALL_OW 310
16056: NOT
16057: PUSH
16058: LD_INT 21
16060: PPUSH
16061: CALL_OW 302
16065: AND
16066: PUSH
16067: LD_INT 21
16069: PPUSH
16070: CALL_OW 255
16074: PUSH
16075: LD_INT 3
16077: EQUAL
16078: AND
16079: IFFALSE 16097
16081: GO 16083
16083: DISABLE
// begin enable ;
16084: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16085: LD_EXP 15
16089: PPUSH
16090: LD_INT 21
16092: PPUSH
16093: CALL_OW 120
// end ;
16097: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16098: LD_INT 22
16100: PUSH
16101: LD_INT 3
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 21
16110: PUSH
16111: LD_INT 2
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 55
16120: PUSH
16121: EMPTY
16122: LIST
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: PUSH
16138: LD_INT 1
16140: PPUSH
16141: CALL_OW 255
16145: PUSH
16146: LD_INT 3
16148: EQUAL
16149: AND
16150: PUSH
16151: LD_INT 21
16153: PPUSH
16154: CALL_OW 302
16158: AND
16159: PUSH
16160: LD_INT 21
16162: PPUSH
16163: CALL_OW 255
16167: PUSH
16168: LD_INT 3
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_INT 21
16175: PPUSH
16176: CALL_OW 302
16180: AND
16181: IFFALSE 16393
16183: GO 16185
16185: DISABLE
// begin enable ;
16186: ENABLE
// if Difficulty = 1 then
16187: LD_OWVAR 67
16191: PUSH
16192: LD_INT 1
16194: EQUAL
16195: IFFALSE 16239
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16197: LD_INT 3
16199: PPUSH
16200: LD_INT 24
16202: PPUSH
16203: LD_OWVAR 67
16207: PUSH
16208: LD_INT 2
16210: PLUS
16211: PPUSH
16212: LD_INT 42
16214: PUSH
16215: LD_INT 44
16217: PUSH
16218: LD_INT 43
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: PPUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_INT 1
16231: PPUSH
16232: LD_INT 21
16234: PPUSH
16235: CALL 6882 0 7
// if Difficulty = 2 then
16239: LD_OWVAR 67
16243: PUSH
16244: LD_INT 2
16246: EQUAL
16247: IFFALSE 16314
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16249: LD_INT 3
16251: PPUSH
16252: LD_INT 24
16254: PPUSH
16255: LD_OWVAR 67
16259: PUSH
16260: LD_INT 2
16262: PLUS
16263: PPUSH
16264: LD_INT 44
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: LD_INT 43
16272: PUSH
16273: LD_INT 43
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: LD_INT 21
16290: PUSH
16291: LD_INT 22
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 1
16300: PPUSH
16301: LD_INT 2
16303: PPUSH
16304: CALL_OW 12
16308: ARRAY
16309: PPUSH
16310: CALL 6882 0 7
// if Difficulty = 3 then
16314: LD_OWVAR 67
16318: PUSH
16319: LD_INT 3
16321: EQUAL
16322: IFFALSE 16393
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16324: LD_INT 3
16326: PPUSH
16327: LD_INT 24
16329: PPUSH
16330: LD_OWVAR 67
16334: PUSH
16335: LD_INT 2
16337: PPUSH
16338: LD_INT 3
16340: PPUSH
16341: CALL_OW 12
16345: PLUS
16346: PPUSH
16347: LD_INT 44
16349: PUSH
16350: LD_INT 44
16352: PUSH
16353: LD_INT 43
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 23
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: PPUSH
16380: LD_INT 2
16382: PPUSH
16383: CALL_OW 12
16387: ARRAY
16388: PPUSH
16389: CALL 6882 0 7
// end ;
16393: END
// every 0 0$1 do
16394: GO 16396
16396: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16397: LD_INT 3
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: LD_INT 3
16405: PPUSH
16406: CALL 5932 0 3
16410: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16411: LD_EXP 20
16415: PUSH
16416: LD_INT 1
16418: EQUAL
16419: IFFALSE 16566
16421: GO 16423
16423: DISABLE
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16428: LD_ADDR_VAR 0 2
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_INT 6
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 21
16445: PUSH
16446: LD_INT 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 34
16455: PUSH
16456: LD_INT 51
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16473: LD_VAR 0 2
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_EXP 21
16486: PPUSH
16487: CALL_OW 250
16491: PUSH
16492: LD_INT 5
16494: MINUS
16495: PPUSH
16496: LD_EXP 21
16500: PPUSH
16501: CALL_OW 251
16505: PUSH
16506: LD_INT 5
16508: MINUS
16509: PPUSH
16510: CALL_OW 111
// wait ( 0 0$5 ) ;
16514: LD_INT 175
16516: PPUSH
16517: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16521: LD_VAR 0 2
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PPUSH
16530: LD_INT 41
16532: PPUSH
16533: LD_INT 52
16535: PPUSH
16536: CALL_OW 177
// wait ( 0 0$40 ) ;
16540: LD_INT 1400
16542: PPUSH
16543: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16547: LD_VAR 0 2
16551: PUSH
16552: LD_INT 1
16554: ARRAY
16555: PPUSH
16556: LD_INT 41
16558: PPUSH
16559: LD_INT 44
16561: PPUSH
16562: CALL_OW 111
// end ;
16566: PPOPN 2
16568: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16569: LD_EXP 21
16573: PPUSH
16574: CALL_OW 274
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 275
16586: PUSH
16587: LD_INT 100
16589: GREATEREQUAL
16590: IFFALSE 16818
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16598: LD_ADDR_VAR 0 1
16602: PUSH
16603: LD_INT 22
16605: PUSH
16606: LD_INT 6
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 21
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 25
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16643: LD_VAR 0 1
16647: PUSH
16648: LD_INT 1
16650: ARRAY
16651: PPUSH
16652: LD_INT 4
16654: PPUSH
16655: LD_INT 39
16657: PPUSH
16658: LD_INT 37
16660: PPUSH
16661: LD_INT 3
16663: PPUSH
16664: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16668: LD_VAR 0 1
16672: PUSH
16673: LD_INT 1
16675: ARRAY
16676: PPUSH
16677: LD_INT 29
16679: PPUSH
16680: LD_INT 42
16682: PPUSH
16683: LD_INT 54
16685: PPUSH
16686: LD_INT 3
16688: PPUSH
16689: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16693: LD_VAR 0 1
16697: PUSH
16698: LD_INT 1
16700: ARRAY
16701: PPUSH
16702: LD_INT 6
16704: PPUSH
16705: LD_INT 38
16707: PPUSH
16708: LD_INT 48
16710: PPUSH
16711: LD_INT 0
16713: PPUSH
16714: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16718: LD_VAR 0 1
16722: PUSH
16723: LD_INT 1
16725: ARRAY
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: LD_INT 32
16732: PPUSH
16733: LD_INT 38
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16743: LD_VAR 0 1
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: LD_INT 26
16754: PPUSH
16755: LD_INT 39
16757: PPUSH
16758: LD_INT 55
16760: PPUSH
16761: LD_INT 3
16763: PPUSH
16764: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16768: LD_VAR 0 1
16772: PUSH
16773: LD_INT 1
16775: ARRAY
16776: PPUSH
16777: LD_INT 32
16779: PPUSH
16780: LD_INT 31
16782: PPUSH
16783: LD_INT 31
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16793: LD_VAR 0 1
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_INT 31
16804: PPUSH
16805: LD_INT 50
16807: PPUSH
16808: LD_INT 51
16810: PPUSH
16811: LD_INT 4
16813: PPUSH
16814: CALL_OW 205
// end ;
16818: PPOPN 1
16820: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16821: LD_EXP 46
16825: IFFALSE 17382
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
16834: PPUSH
// begin enable ;
16835: ENABLE
// if not ruMobile then
16836: LD_EXP 46
16840: NOT
16841: IFFALSE 16845
// exit ;
16843: GO 17382
// for i in ruMobile do
16845: LD_ADDR_VAR 0 1
16849: PUSH
16850: LD_EXP 46
16854: PUSH
16855: FOR_IN
16856: IFFALSE 17380
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 302
16867: NOT
16868: PUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 255
16878: PUSH
16879: LD_INT 3
16881: NONEQUAL
16882: OR
16883: IFFALSE 16903
// begin ruMobile := ruMobile diff i ;
16885: LD_ADDR_EXP 46
16889: PUSH
16890: LD_EXP 46
16894: PUSH
16895: LD_VAR 0 1
16899: DIFF
16900: ST_TO_ADDR
// continue ;
16901: GO 16855
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16903: LD_VAR 0 1
16907: PPUSH
16908: CALL_OW 110
16912: NOT
16913: PUSH
16914: LD_VAR 0 1
16918: PPUSH
16919: CALL_OW 110
16923: PUSH
16924: LD_INT 0
16926: EQUAL
16927: OR
16928: IFFALSE 17043
// begin if GetFuel ( i ) < 50 then
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 261
16939: PUSH
16940: LD_INT 50
16942: LESS
16943: IFFALSE 17002
// begin ComMoveXY ( i , 106 , 88 ) ;
16945: LD_VAR 0 1
16949: PPUSH
16950: LD_INT 106
16952: PPUSH
16953: LD_INT 88
16955: PPUSH
16956: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16960: LD_INT 35
16962: PPUSH
16963: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_INT 106
16974: PPUSH
16975: LD_INT 88
16977: PPUSH
16978: CALL_OW 297
16982: PUSH
16983: LD_INT 4
16985: LESS
16986: IFFALSE 16960
// SetFuel ( i , 100 ) ;
16988: LD_VAR 0 1
16992: PPUSH
16993: LD_INT 100
16995: PPUSH
16996: CALL_OW 240
// end else
17000: GO 17043
// if not IsInArea ( i , ruParking ) then
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_INT 25
17009: PPUSH
17010: CALL_OW 308
17014: NOT
17015: IFFALSE 17031
// ComMoveToArea ( i , ruParking ) else
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_INT 25
17024: PPUSH
17025: CALL_OW 113
17029: GO 17043
// SetTag ( i , 1 ) ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 110
17052: PUSH
17053: LD_INT 1
17055: EQUAL
17056: IFFALSE 17186
// begin if GetLives ( i ) < 1000 then
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 256
17067: PUSH
17068: LD_INT 1000
17070: LESS
17071: IFFALSE 17163
// begin if not IsDrivenBy ( i ) then
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 311
17082: NOT
17083: IFFALSE 17087
// continue ;
17085: GO 16855
// mech := IsDrivenBy ( i ) ;
17087: LD_ADDR_VAR 0 2
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 311
17101: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17102: LD_VAR 0 2
17106: PPUSH
17107: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17111: LD_VAR 0 2
17115: PPUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17125: LD_INT 35
17127: PPUSH
17128: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 256
17141: PUSH
17142: LD_INT 1000
17144: EQUAL
17145: IFFALSE 17125
// ComEnterUnit ( mech , i ) ;
17147: LD_VAR 0 2
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 120
// end else
17161: GO 17186
// if IsDrivenBy ( i ) then
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 311
17172: IFFALSE 17186
// SetTag ( i , 2 ) ;
17174: LD_VAR 0 1
17178: PPUSH
17179: LD_INT 2
17181: PPUSH
17182: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 110
17195: PUSH
17196: LD_INT 2
17198: EQUAL
17199: IFFALSE 17378
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17201: LD_ADDR_VAR 0 3
17205: PUSH
17206: LD_INT 24
17208: PPUSH
17209: LD_INT 81
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PPUSH
17219: CALL_OW 70
17223: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17224: LD_VAR 0 1
17228: PPUSH
17229: CALL_OW 256
17233: PUSH
17234: LD_INT 650
17236: LESS
17237: IFFALSE 17262
// begin ComStop ( i ) ;
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 141
// SetTag ( i , 0 ) ;
17248: LD_VAR 0 1
17252: PPUSH
17253: LD_INT 0
17255: PPUSH
17256: CALL_OW 109
// continue ;
17260: GO 16855
// end ; if enemy then
17262: LD_VAR 0 3
17266: IFFALSE 17306
// begin if not HasTask ( i ) then
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 314
17277: NOT
17278: IFFALSE 17304
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_VAR 0 1
17294: PPUSH
17295: CALL_OW 74
17299: PPUSH
17300: CALL_OW 115
// end else
17304: GO 17378
// if ruMobile > 2 then
17306: LD_EXP 46
17310: PUSH
17311: LD_INT 2
17313: GREATER
17314: IFFALSE 17378
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_INT 81
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PPUSH
17331: CALL_OW 69
17335: ST_TO_ADDR
// if enemy then
17336: LD_VAR 0 3
17340: IFFALSE 17378
// if not HasTask ( i ) then
17342: LD_VAR 0 1
17346: PPUSH
17347: CALL_OW 314
17351: NOT
17352: IFFALSE 17378
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17354: LD_VAR 0 1
17358: PPUSH
17359: LD_VAR 0 3
17363: PPUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 74
17373: PPUSH
17374: CALL_OW 115
// end ; end ; end ;
17378: GO 16855
17380: POP
17381: POP
// end ; end_of_file
17382: PPOPN 3
17384: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17385: LD_INT 0
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17394: LD_ADDR_VAR 0 3
17398: PUSH
17399: LD_INT 22
17401: PUSH
17402: LD_INT 6
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 25
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: LD_INT 54
17434: PUSH
17435: EMPTY
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17453: LD_ADDR_VAR 0 7
17457: PUSH
17458: LD_INT 22
17460: PUSH
17461: LD_INT 6
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 21
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 25
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 54
17490: PUSH
17491: EMPTY
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 69
17504: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17505: LD_ADDR_VAR 0 4
17509: PUSH
17510: LD_INT 22
17512: PUSH
17513: LD_INT 6
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 21
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 25
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17550: LD_ADDR_VAR 0 6
17554: PUSH
17555: LD_INT 22
17557: PUSH
17558: LD_INT 6
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 21
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 25
17577: PUSH
17578: LD_INT 4
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17595: LD_ADDR_VAR 0 8
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_INT 6
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 34
17622: PUSH
17623: LD_INT 51
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17640: LD_VAR 0 1
17644: PPUSH
17645: CALL_OW 255
17649: PUSH
17650: LD_INT 6
17652: EQUAL
17653: PUSH
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL_OW 266
17663: PUSH
17664: LD_INT 0
17666: EQUAL
17667: AND
17668: IFFALSE 17688
// begin ruPDepot = building ;
17670: LD_ADDR_EXP 21
17674: PUSH
17675: LD_VAR 0 1
17679: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17680: LD_ADDR_EXP 20
17684: PUSH
17685: LD_INT 1
17687: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 266
17697: PUSH
17698: LD_INT 4
17700: EQUAL
17701: PUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 255
17711: PUSH
17712: LD_INT 6
17714: EQUAL
17715: AND
17716: IFFALSE 17749
// for i in tmpSold do
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_VAR 0 3
17727: PUSH
17728: FOR_IN
17729: IFFALSE 17747
// ComEnterUnit ( i , building ) ;
17731: LD_VAR 0 2
17735: PPUSH
17736: LD_VAR 0 1
17740: PPUSH
17741: CALL_OW 120
17745: GO 17728
17747: POP
17748: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 266
17758: PUSH
17759: LD_INT 6
17761: EQUAL
17762: PUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 255
17772: PUSH
17773: LD_INT 6
17775: EQUAL
17776: AND
17777: IFFALSE 17835
// begin for i in tmpSci do
17779: LD_ADDR_VAR 0 2
17783: PUSH
17784: LD_VAR 0 6
17788: PUSH
17789: FOR_IN
17790: IFFALSE 17808
// ComEnterUnit ( i , building ) ;
17792: LD_VAR 0 2
17796: PPUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 120
17806: GO 17789
17808: POP
17809: POP
// ResAllTechs ( 6 , building , 3 ) ;
17810: LD_INT 6
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_INT 3
17820: PPUSH
17821: CALL 5932 0 3
// ruPLab = building ;
17825: LD_ADDR_EXP 22
17829: PUSH
17830: LD_VAR 0 1
17834: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 266
17844: PUSH
17845: LD_INT 2
17847: EQUAL
17848: PUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 255
17858: PUSH
17859: LD_INT 6
17861: EQUAL
17862: AND
17863: IFFALSE 17914
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17865: LD_ADDR_VAR 0 5
17869: PUSH
17870: LD_VAR 0 8
17874: PUSH
17875: LD_INT 1
17877: ARRAY
17878: PPUSH
17879: CALL_OW 313
17883: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17884: LD_VAR 0 5
17888: PPUSH
17889: CALL_OW 121
// wait ( 0 0$1 ) ;
17893: LD_INT 35
17895: PPUSH
17896: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17900: LD_VAR 0 5
17904: PPUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 266
17923: PUSH
17924: LD_INT 32
17926: EQUAL
17927: PUSH
17928: LD_VAR 0 1
17932: PPUSH
17933: CALL_OW 255
17937: PUSH
17938: LD_INT 6
17940: EQUAL
17941: AND
17942: IFFALSE 17994
// begin ComPlaceWeapon ( building , 42 ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_INT 42
17951: PPUSH
17952: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17956: LD_VAR 0 7
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: CALL_OW 122
// wait ( 0 0$1 ) ;
17969: LD_INT 35
17971: PPUSH
17972: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17976: LD_VAR 0 7
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PPUSH
17985: LD_VAR 0 1
17989: PPUSH
17990: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL_OW 266
18003: PUSH
18004: LD_INT 31
18006: EQUAL
18007: PUSH
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 255
18017: PUSH
18018: LD_INT 6
18020: EQUAL
18021: AND
18022: IFFALSE 18088
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18024: LD_VAR 0 7
18028: PUSH
18029: LD_INT 2
18031: ARRAY
18032: PPUSH
18033: CALL_OW 122
// wait ( 0 0$1 ) ;
18037: LD_INT 35
18039: PPUSH
18040: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18044: LD_VAR 0 7
18048: PUSH
18049: LD_INT 2
18051: ARRAY
18052: PPUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18062: LD_VAR 0 4
18066: PUSH
18067: LD_INT 1
18069: ARRAY
18070: PPUSH
18071: LD_EXP 21
18075: PPUSH
18076: CALL_OW 120
// baseReadyToBuild = 2 ;
18080: LD_ADDR_EXP 20
18084: PUSH
18085: LD_INT 2
18087: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 266
18097: PUSH
18098: LD_INT 32
18100: EQUAL
18101: PUSH
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 255
18111: PUSH
18112: LD_INT 1
18114: EQUAL
18115: AND
18116: PUSH
18117: LD_EXP 32
18121: PUSH
18122: LD_INT 0
18124: EQUAL
18125: AND
18126: IFFALSE 18371
// begin bunkerDialog = 1 ;
18128: LD_ADDR_EXP 32
18132: PUSH
18133: LD_INT 1
18135: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18136: LD_EXP 11
18140: PPUSH
18141: CALL_OW 302
18145: IFFALSE 18161
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18147: LD_EXP 11
18151: PPUSH
18152: LD_STRING D11-Eng1-1
18154: PPUSH
18155: CALL_OW 88
// end else
18159: GO 18357
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18161: LD_INT 22
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 25
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 26
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL_OW 69
18211: PUSH
18212: LD_EXP 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: PUSH
18220: LD_INT 0
18222: GREATER
18223: DIFF
18224: IFFALSE 18298
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 25
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 26
18258: PUSH
18259: LD_INT 1
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PPUSH
18272: CALL_OW 69
18276: PUSH
18277: LD_EXP 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: DIFF
18285: PPUSH
18286: LD_STRING D11-Eng1-1
18288: PPUSH
18289: LD_STRING D11-Eng1-1
18291: PPUSH
18292: CALL 4581 0 3
// end else
18296: GO 18357
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18298: LD_INT 22
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 21
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 26
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: PUSH
18338: LD_EXP 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: DIFF
18346: PPUSH
18347: LD_STRING D11-Eng1-1
18349: PPUSH
18350: LD_STRING D11-Eng1-1
18352: PPUSH
18353: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18357: LD_EXP 33
18361: PUSH
18362: LD_INT 0
18364: EQUAL
18365: IFFALSE 18371
// EnergyDialog ;
18367: CALL 4984 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18371: LD_VAR 0 1
18375: PPUSH
18376: CALL_OW 266
18380: PUSH
18381: LD_INT 29
18383: EQUAL
18384: PUSH
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 255
18394: PUSH
18395: LD_INT 1
18397: EQUAL
18398: AND
18399: IFFALSE 18409
// buildOil = 1 ;
18401: LD_ADDR_EXP 34
18405: PUSH
18406: LD_INT 1
18408: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 266
18418: PUSH
18419: LD_INT 26
18421: EQUAL
18422: PUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 255
18432: PUSH
18433: LD_INT 1
18435: EQUAL
18436: AND
18437: IFFALSE 18447
// buildPower = 1 ;
18439: LD_ADDR_EXP 35
18443: PUSH
18444: LD_INT 1
18446: ST_TO_ADDR
// end ;
18447: PPOPN 8
18449: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 266
18459: PUSH
18460: LD_INT 3
18462: EQUAL
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 255
18473: PUSH
18474: LD_INT 1
18476: EQUAL
18477: AND
18478: PUSH
18479: LD_EXP 31
18483: PUSH
18484: LD_INT 0
18486: EQUAL
18487: AND
18488: IFFALSE 18836
// begin factoryDialog = 1 ;
18490: LD_ADDR_EXP 31
18494: PUSH
18495: LD_INT 1
18497: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18498: LD_INT 47
18500: PPUSH
18501: LD_INT 1
18503: PPUSH
18504: CALL_OW 321
18508: PUSH
18509: LD_INT 1
18511: EQUAL
18512: PUSH
18513: LD_INT 45
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: CALL_OW 321
18523: PUSH
18524: LD_INT 1
18526: EQUAL
18527: AND
18528: IFFALSE 18836
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18530: LD_INT 22
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 21
18542: PUSH
18543: LD_INT 3
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 30
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 24
18562: PUSH
18563: LD_INT 1000
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18589: LD_EXP 1
18593: PPUSH
18594: LD_STRING D9a-JMM-1
18596: PPUSH
18597: CALL_OW 88
// if IsOK ( Campell ) then
18601: LD_EXP 12
18605: PPUSH
18606: CALL_OW 302
18610: IFFALSE 18626
// begin Say ( Campell , D9a-Mech1-1 ) ;
18612: LD_EXP 12
18616: PPUSH
18617: LD_STRING D9a-Mech1-1
18619: PPUSH
18620: CALL_OW 88
// end else
18624: GO 18822
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18626: LD_INT 22
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 25
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 26
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: PUSH
18677: LD_EXP 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: GREATER
18688: DIFF
18689: IFFALSE 18763
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18691: LD_INT 22
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 21
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 25
18713: PUSH
18714: LD_INT 3
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 26
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_EXP 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: DIFF
18750: PPUSH
18751: LD_STRING D9a-Mech1-1
18753: PPUSH
18754: LD_STRING D9a-Mech1-1
18756: PPUSH
18757: CALL 4581 0 3
// end else
18761: GO 18822
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18763: LD_INT 22
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 21
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 26
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: PPUSH
18798: CALL_OW 69
18802: PUSH
18803: LD_EXP 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: DIFF
18811: PPUSH
18812: LD_STRING D9a-Mech1-1
18814: PPUSH
18815: LD_STRING D9a-Mech1-1
18817: PPUSH
18818: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18822: LD_EXP 33
18826: PUSH
18827: LD_INT 0
18829: EQUAL
18830: IFFALSE 18836
// EnergyDialog ;
18832: CALL 4984 0 0
// end ; end ; end ;
18836: PPOPN 1
18838: END
// on UnitDestroyed ( unit ) do var mech ;
18839: LD_INT 0
18841: PPUSH
// begin if unit = JMM then
18842: LD_VAR 0 1
18846: PUSH
18847: LD_EXP 1
18851: EQUAL
18852: IFFALSE 18861
// YouLost ( JMM ) ;
18854: LD_STRING JMM
18856: PPUSH
18857: CALL_OW 104
// if unit in ruMobile then
18861: LD_VAR 0 1
18865: PUSH
18866: LD_EXP 46
18870: IN
18871: IFFALSE 18889
// ruMobile = ruMobile diff ruMobile ;
18873: LD_ADDR_EXP 46
18877: PUSH
18878: LD_EXP 46
18882: PUSH
18883: LD_EXP 46
18887: DIFF
18888: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 247
18898: PUSH
18899: LD_INT 1
18901: EQUAL
18902: PUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 255
18912: PUSH
18913: LD_INT 1
18915: EQUAL
18916: AND
18917: IFFALSE 18933
// lostCounter = lostCounter + 1 ;
18919: LD_ADDR_EXP 38
18923: PUSH
18924: LD_EXP 38
18928: PUSH
18929: LD_INT 1
18931: PLUS
18932: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18933: LD_EXP 43
18937: PUSH
18938: LD_INT 24
18940: PPUSH
18941: CALL_OW 313
18945: PUSH
18946: LD_INT 6
18948: LESS
18949: AND
18950: PUSH
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 257
18960: PUSH
18961: LD_INT 3
18963: EQUAL
18964: AND
18965: PUSH
18966: LD_VAR 0 1
18970: PPUSH
18971: CALL_OW 255
18975: PUSH
18976: LD_INT 3
18978: EQUAL
18979: AND
18980: PUSH
18981: LD_INT 24
18983: PPUSH
18984: CALL_OW 302
18988: AND
18989: PUSH
18990: LD_INT 24
18992: PPUSH
18993: CALL_OW 255
18997: PUSH
18998: LD_INT 3
19000: EQUAL
19001: AND
19002: IFFALSE 19131
// begin ruMech := ruMech - 1 ;
19004: LD_ADDR_EXP 43
19008: PUSH
19009: LD_EXP 43
19013: PUSH
19014: LD_INT 1
19016: MINUS
19017: ST_TO_ADDR
// if ruMech = 0 then
19018: LD_EXP 43
19022: PUSH
19023: LD_INT 0
19025: EQUAL
19026: IFFALSE 19030
// exit ;
19028: GO 19131
// wait ( 0 0$40 ) ;
19030: LD_INT 1400
19032: PPUSH
19033: CALL_OW 67
// uc_side = 3 ;
19037: LD_ADDR_OWVAR 20
19041: PUSH
19042: LD_INT 3
19044: ST_TO_ADDR
// uc_nation = 3 ;
19045: LD_ADDR_OWVAR 21
19049: PUSH
19050: LD_INT 3
19052: ST_TO_ADDR
// hc_gallery :=  ;
19053: LD_ADDR_OWVAR 33
19057: PUSH
19058: LD_STRING 
19060: ST_TO_ADDR
// hc_name :=  ;
19061: LD_ADDR_OWVAR 26
19065: PUSH
19066: LD_STRING 
19068: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19069: LD_INT 0
19071: PPUSH
19072: LD_EXP 16
19076: PPUSH
19077: LD_EXP 17
19081: PPUSH
19082: CALL_OW 12
19086: PPUSH
19087: CALL_OW 383
// mech := CreateHuman ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: CALL_OW 44
19100: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19101: LD_VAR 0 2
19105: PPUSH
19106: LD_INT 124
19108: PPUSH
19109: LD_INT 97
19111: PPUSH
19112: LD_INT 0
19114: PPUSH
19115: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19119: LD_VAR 0 2
19123: PPUSH
19124: LD_INT 24
19126: PPUSH
19127: CALL_OW 120
// end ; end ;
19131: PPOPN 2
19133: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19134: LD_INT 0
19136: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 255
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: IFFALSE 19166
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19152: LD_ADDR_EXP 42
19156: PUSH
19157: LD_EXP 42
19161: PUSH
19162: LD_INT 1
19164: PLUS
19165: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19166: LD_VAR 0 1
19170: PPUSH
19171: CALL_OW 255
19175: PUSH
19176: LD_INT 3
19178: EQUAL
19179: PUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 264
19189: PUSH
19190: LD_INT 42
19192: PUSH
19193: LD_INT 43
19195: PUSH
19196: LD_INT 44
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: IN
19204: AND
19205: IFFALSE 19223
// ruMobile := ruMobile union vehicle ;
19207: LD_ADDR_EXP 46
19211: PUSH
19212: LD_EXP 46
19216: PUSH
19217: LD_VAR 0 1
19221: UNION
19222: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_INT 53
19235: EQUAL
19236: IFFALSE 19372
// begin uc_side = 3 ;
19238: LD_ADDR_OWVAR 20
19242: PUSH
19243: LD_INT 3
19245: ST_TO_ADDR
// uc_nation = 3 ;
19246: LD_ADDR_OWVAR 21
19250: PUSH
19251: LD_INT 3
19253: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19254: LD_INT 0
19256: PPUSH
19257: LD_EXP 17
19261: PPUSH
19262: CALL_OW 383
// driver := CreateHuman ;
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: CALL_OW 44
19275: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19276: LD_VAR 0 3
19280: PPUSH
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 21
19297: PPUSH
19298: CALL 5200 0 2
// repeat wait ( 0 0$1 ) ;
19302: LD_INT 35
19304: PPUSH
19305: CALL_OW 67
// until not HasTask ( vehicle ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: CALL_OW 314
19318: NOT
19319: IFFALSE 19302
// driver := IsDrivenBy ( vehicle ) ;
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 311
19335: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 104
19343: PPUSH
19344: LD_INT 73
19346: PPUSH
19347: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19351: LD_VAR 0 3
19355: PPUSH
19356: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19360: LD_VAR 0 3
19364: PPUSH
19365: LD_INT 24
19367: PPUSH
19368: CALL_OW 180
// end ; end ;
19372: PPOPN 3
19374: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 255
19388: PUSH
19389: LD_INT 3
19391: EQUAL
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 247
19402: PUSH
19403: LD_INT 2
19405: EQUAL
19406: AND
19407: IFFALSE 19501
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19409: LD_VAR 0 1
19413: PPUSH
19414: CALL_OW 264
19418: PUSH
19419: LD_INT 42
19421: EQUAL
19422: PUSH
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 264
19432: PUSH
19433: LD_INT 43
19435: EQUAL
19436: OR
19437: PUSH
19438: LD_VAR 0 1
19442: PPUSH
19443: CALL_OW 264
19447: PUSH
19448: LD_INT 44
19450: EQUAL
19451: OR
19452: IFFALSE 19501
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19454: LD_INT 24
19456: PPUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 265
19466: PPUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: CALL_OW 262
19476: PPUSH
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL_OW 263
19486: PPUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 264
19496: PPUSH
19497: CALL_OW 185
// end ;
19501: PPOPN 3
19503: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 255
19513: PUSH
19514: LD_INT 3
19516: EQUAL
19517: PUSH
19518: LD_VAR 0 2
19522: PPUSH
19523: CALL_OW 255
19527: PUSH
19528: LD_INT 3
19530: EQUAL
19531: AND
19532: PUSH
19533: LD_INT 24
19535: PPUSH
19536: CALL_OW 302
19540: AND
19541: PUSH
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 302
19551: NOT
19552: AND
19553: IFFALSE 19567
// ComEnterUnit ( human , rubfact0 ) ;
19555: LD_VAR 0 2
19559: PPUSH
19560: LD_INT 24
19562: PPUSH
19563: CALL_OW 120
// end ;
19567: PPOPN 2
19569: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 24
19577: EQUAL
19578: PUSH
19579: LD_VAR 0 2
19583: PPUSH
19584: CALL_OW 256
19588: PUSH
19589: LD_INT 1000
19591: LESS
19592: AND
19593: IFFALSE 19607
// SetLives ( un , 1000 ) ;
19595: LD_VAR 0 2
19599: PPUSH
19600: LD_INT 1000
19602: PPUSH
19603: CALL_OW 234
// end ;
19607: PPOPN 2
19609: END
// on Command ( comandid ) do var i , j , tmp ;
19610: LD_INT 0
19612: PPUSH
19613: PPUSH
19614: PPUSH
// begin SOS_Command ( comandid ) ;
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL 35977 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19624: LD_INT 22
19626: PUSH
19627: LD_INT 4
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: NOT
19639: IFFALSE 19643
// exit ;
19641: GO 19808
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19643: LD_ADDR_VAR 0 2
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: LD_INT 21
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 21
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PPUSH
19690: CALL_OW 69
19694: PUSH
19695: FOR_IN
19696: IFFALSE 19806
// begin if GetTaskList ( i ) > 0 then
19698: LD_VAR 0 2
19702: PPUSH
19703: CALL_OW 437
19707: PUSH
19708: LD_INT 0
19710: GREATER
19711: IFFALSE 19804
// begin for j = 1 to GetTaskList ( i ) do
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: DOUBLE
19719: LD_INT 1
19721: DEC
19722: ST_TO_ADDR
19723: LD_VAR 0 2
19727: PPUSH
19728: CALL_OW 437
19732: PUSH
19733: FOR_TO
19734: IFFALSE 19802
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19736: LD_ADDR_VAR 0 4
19740: PUSH
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 437
19750: PUSH
19751: LD_VAR 0 3
19755: ARRAY
19756: PUSH
19757: LD_INT 4
19759: ARRAY
19760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19761: LD_VAR 0 4
19765: PPUSH
19766: CALL_OW 255
19770: PUSH
19771: LD_INT 4
19773: EQUAL
19774: PUSH
19775: LD_VAR 0 4
19779: PPUSH
19780: CALL_OW 255
19784: PUSH
19785: LD_INT 0
19787: EQUAL
19788: OR
19789: IFFALSE 19800
// ComStop ( i ) ;
19791: LD_VAR 0 2
19795: PPUSH
19796: CALL_OW 141
// end ;
19800: GO 19733
19802: POP
19803: POP
// end ; end ;
19804: GO 19695
19806: POP
19807: POP
// end ; end_of_file
19808: PPOPN 4
19810: END
// every 10 10$0 do
19811: GO 19813
19813: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19814: LD_INT 5
19816: PPUSH
19817: LD_INT 3
19819: PPUSH
19820: LD_INT 2
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 3
19828: PUSH
19829: LD_INT 4
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: LIST
19836: PUSH
19837: LD_OWVAR 67
19841: ARRAY
19842: PLUS
19843: PPUSH
19844: LD_INT 0
19846: PPUSH
19847: LD_INT 0
19849: PPUSH
19850: LD_INT 0
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: LD_EXP 16
19860: PPUSH
19861: LD_EXP 17
19865: PPUSH
19866: CALL_OW 12
19870: PPUSH
19871: LD_INT 4
19873: PPUSH
19874: LD_INT 14
19876: PPUSH
19877: LD_INT 1
19879: PPUSH
19880: LD_INT 2
19882: PPUSH
19883: CALL 7905 0 12
// end ;
19887: END
// every 20 20$0 do
19888: GO 19890
19890: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19891: LD_INT 5
19893: PPUSH
19894: LD_INT 3
19896: PPUSH
19897: LD_INT 4
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 3
19905: PUSH
19906: LD_INT 4
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: LD_OWVAR 67
19918: ARRAY
19919: PLUS
19920: PPUSH
19921: LD_INT 0
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: LD_INT 0
19929: PPUSH
19930: LD_INT 2
19932: PPUSH
19933: LD_EXP 16
19937: PPUSH
19938: LD_EXP 17
19942: PPUSH
19943: CALL_OW 12
19947: PPUSH
19948: LD_INT 4
19950: PPUSH
19951: LD_INT 14
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: LD_INT 1
19959: PPUSH
19960: CALL 7905 0 12
// end ;
19964: END
// every 25 25$0 do
19965: GO 19967
19967: DISABLE
// begin if Difficulty > 1 then
19968: LD_OWVAR 67
19972: PUSH
19973: LD_INT 1
19975: GREATER
19976: IFFALSE 19986
// specAttack := true ;
19978: LD_ADDR_EXP 47
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19986: LD_INT 4
19988: PPUSH
19989: LD_INT 5
19991: PPUSH
19992: LD_INT 4
19994: PUSH
19995: LD_INT 5
19997: PUSH
19998: LD_INT 6
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: PUSH
20006: LD_OWVAR 67
20010: ARRAY
20011: PPUSH
20012: LD_EXP 16
20016: PPUSH
20017: LD_EXP 17
20021: PPUSH
20022: CALL_OW 12
20026: PPUSH
20027: LD_INT 3
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: LD_INT 42
20038: PUSH
20039: LD_INT 42
20041: PUSH
20042: LD_INT 43
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 42
20052: PUSH
20053: LD_INT 43
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 43
20062: PUSH
20063: LD_INT 43
20065: PUSH
20066: LD_INT 43
20068: PUSH
20069: LD_INT 44
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: PUSH
20083: LD_OWVAR 67
20087: ARRAY
20088: PPUSH
20089: EMPTY
20090: PPUSH
20091: EMPTY
20092: PPUSH
20093: LD_INT 1
20095: PPUSH
20096: CALL 9661 0 11
// end ;
20100: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20101: LD_EXP 47
20105: IFFALSE 20468
20107: GO 20109
20109: DISABLE
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
// begin wait ( 0 0$20 ) ;
20116: LD_INT 700
20118: PPUSH
20119: CALL_OW 67
// uc_side := 5 ;
20123: LD_ADDR_OWVAR 20
20127: PUSH
20128: LD_INT 5
20130: ST_TO_ADDR
// uc_nation := 3 ;
20131: LD_ADDR_OWVAR 21
20135: PUSH
20136: LD_INT 3
20138: ST_TO_ADDR
// InitHc ;
20139: CALL_OW 19
// hc_importance := 0 ;
20143: LD_ADDR_OWVAR 32
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// tmp := [ ] ;
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: EMPTY
20157: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20158: LD_INT 0
20160: PPUSH
20161: LD_INT 2
20163: PPUSH
20164: LD_INT 6
20166: PPUSH
20167: CALL_OW 380
// eng := CreateHuman ;
20171: LD_ADDR_VAR 0 4
20175: PUSH
20176: CALL_OW 44
20180: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20181: LD_VAR 0 4
20185: PPUSH
20186: LD_INT 78
20188: PPUSH
20189: LD_INT 2
20191: PPUSH
20192: LD_INT 4
20194: PPUSH
20195: LD_INT 0
20197: PPUSH
20198: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20202: LD_ADDR_VAR 0 3
20206: PUSH
20207: DOUBLE
20208: LD_INT 1
20210: DEC
20211: ST_TO_ADDR
20212: LD_INT 2
20214: PUSH
20215: LD_OWVAR 67
20219: PLUS
20220: PUSH
20221: FOR_TO
20222: IFFALSE 20303
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20224: LD_INT 0
20226: PPUSH
20227: LD_INT 1
20229: PPUSH
20230: LD_INT 4
20232: PUSH
20233: LD_INT 5
20235: PUSH
20236: LD_INT 6
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: LD_OWVAR 67
20248: ARRAY
20249: PPUSH
20250: CALL_OW 380
// un := CreateHuman ;
20254: LD_ADDR_VAR 0 1
20258: PUSH
20259: CALL_OW 44
20263: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20264: LD_VAR 0 1
20268: PPUSH
20269: LD_INT 78
20271: PPUSH
20272: LD_INT 2
20274: PPUSH
20275: LD_INT 4
20277: PPUSH
20278: LD_INT 0
20280: PPUSH
20281: CALL_OW 50
// tmp := tmp ^ un ;
20285: LD_ADDR_VAR 0 2
20289: PUSH
20290: LD_VAR 0 2
20294: PUSH
20295: LD_VAR 0 1
20299: ADD
20300: ST_TO_ADDR
// end ;
20301: GO 20221
20303: POP
20304: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20305: LD_VAR 0 2
20309: PPUSH
20310: LD_INT 49
20312: PPUSH
20313: LD_INT 3
20315: PPUSH
20316: CALL_OW 111
// wait ( 0 0$2 ) ;
20320: LD_INT 70
20322: PPUSH
20323: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_INT 49
20334: PPUSH
20335: LD_INT 3
20337: PPUSH
20338: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20342: LD_VAR 0 4
20346: PPUSH
20347: LD_INT 4
20349: PPUSH
20350: CALL_OW 227
// wait ( 0 0$10 ) ;
20354: LD_INT 350
20356: PPUSH
20357: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20361: LD_INT 35
20363: PPUSH
20364: CALL_OW 67
// for i in tmp do
20368: LD_ADDR_VAR 0 3
20372: PUSH
20373: LD_VAR 0 2
20377: PUSH
20378: FOR_IN
20379: IFFALSE 20459
// if not IsOk ( i ) then
20381: LD_VAR 0 3
20385: PPUSH
20386: CALL_OW 302
20390: NOT
20391: IFFALSE 20411
// tmp := tmp diff i else
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: DIFF
20408: ST_TO_ADDR
20409: GO 20457
// if not HasTask ( i ) then
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 314
20420: NOT
20421: IFFALSE 20457
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20423: LD_VAR 0 3
20427: PPUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: PPUSH
20443: LD_VAR 0 3
20447: PPUSH
20448: CALL_OW 74
20452: PPUSH
20453: CALL_OW 115
20457: GO 20378
20459: POP
20460: POP
// until not tmp ;
20461: LD_VAR 0 2
20465: NOT
20466: IFFALSE 20361
// end ; end_of_file
20468: PPOPN 4
20470: END
// every 0 0$1 trigger startTimer = 1 do
20471: LD_EXP 30
20475: PUSH
20476: LD_INT 1
20478: EQUAL
20479: IFFALSE 20609
20481: GO 20483
20483: DISABLE
// begin enable ;
20484: ENABLE
// if timerStatus = 1 then
20485: LD_EXP 29
20489: PUSH
20490: LD_INT 1
20492: EQUAL
20493: IFFALSE 20526
// begin timeToSupport = timeToSupport - 0 0$01 ;
20495: LD_ADDR_EXP 28
20499: PUSH
20500: LD_EXP 28
20504: PUSH
20505: LD_INT 35
20507: MINUS
20508: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20509: LD_ADDR_OWVAR 47
20513: PUSH
20514: LD_STRING #Am04-1
20516: PUSH
20517: LD_EXP 28
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: ST_TO_ADDR
// end ; if timerStatus = 2 then
20526: LD_EXP 29
20530: PUSH
20531: LD_INT 2
20533: EQUAL
20534: IFFALSE 20567
// begin timeToSupport = timeToSupport - 0 0$01 ;
20536: LD_ADDR_EXP 28
20540: PUSH
20541: LD_EXP 28
20545: PUSH
20546: LD_INT 35
20548: MINUS
20549: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20550: LD_ADDR_OWVAR 47
20554: PUSH
20555: LD_STRING #Am04-2
20557: PUSH
20558: LD_EXP 28
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: ST_TO_ADDR
// end ; if timerStatus = 3 then
20567: LD_EXP 29
20571: PUSH
20572: LD_INT 3
20574: EQUAL
20575: IFFALSE 20591
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20577: LD_ADDR_EXP 27
20581: PUSH
20582: LD_EXP 27
20586: PUSH
20587: LD_INT 35
20589: MINUS
20590: ST_TO_ADDR
// end ; if timerStatus = 4 then
20591: LD_EXP 29
20595: PUSH
20596: LD_INT 4
20598: EQUAL
20599: IFFALSE 20609
// begin display_strings =  ;
20601: LD_ADDR_OWVAR 47
20605: PUSH
20606: LD_STRING 
20608: ST_TO_ADDR
// end ; end ; end_of_file
20609: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20610: LD_INT 4
20612: PPUSH
20613: CALL_OW 301
20617: IFFALSE 20629
20619: GO 20621
20621: DISABLE
// YouLost ( Base ) ; end_of_file
20622: LD_STRING Base
20624: PPUSH
20625: CALL_OW 104
20629: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20630: LD_EXP 15
20634: PPUSH
20635: CALL_OW 301
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_INT 3
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: PUSH
20669: LD_INT 14
20671: PUSH
20672: LD_INT 13
20674: PUSH
20675: LD_INT 12
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: PUSH
20683: LD_OWVAR 67
20687: ARRAY
20688: LESS
20689: AND
20690: IFFALSE 21276
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
20699: PPUSH
// begin AIEnable = 0 ;
20700: LD_ADDR_EXP 37
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// escapeAvalaible = 1 ;
20708: LD_ADDR_EXP 40
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// Video ( true ) ;
20716: LD_INT 1
20718: PPUSH
20719: CALL 76180 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20723: LD_INT 3
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: LD_INT 1
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20739: LD_INT 6
20741: PPUSH
20742: LD_INT 1
20744: PPUSH
20745: LD_INT 1
20747: PPUSH
20748: LD_INT 0
20750: PPUSH
20751: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20755: LD_INT 5
20757: PPUSH
20758: LD_INT 1
20760: PPUSH
20761: LD_INT 1
20763: PPUSH
20764: LD_INT 0
20766: PPUSH
20767: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 1
20776: PPUSH
20777: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20781: LD_INT 97
20783: PPUSH
20784: LD_INT 91
20786: PPUSH
20787: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20791: LD_INT 22
20793: PUSH
20794: LD_INT 3
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 21
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PPUSH
20815: CALL_OW 69
20819: PPUSH
20820: CALL_OW 121
// wait ( 0 0$01 ) ;
20824: LD_INT 35
20826: PPUSH
20827: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20831: LD_INT 22
20833: PUSH
20834: LD_INT 3
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 21
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: PPUSH
20860: LD_INT 124
20862: PPUSH
20863: LD_INT 98
20865: PPUSH
20866: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20870: LD_INT 22
20872: PUSH
20873: LD_INT 5
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PPUSH
20894: CALL_OW 69
20898: PPUSH
20899: CALL_OW 121
// wait ( 0 0$01 ) ;
20903: LD_INT 35
20905: PPUSH
20906: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20910: LD_INT 22
20912: PUSH
20913: LD_INT 5
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PPUSH
20934: CALL_OW 69
20938: PPUSH
20939: LD_INT 124
20941: PPUSH
20942: LD_INT 98
20944: PPUSH
20945: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20949: LD_INT 22
20951: PUSH
20952: LD_INT 6
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PPUSH
20973: CALL_OW 69
20977: PPUSH
20978: CALL_OW 121
// wait ( 0 0$01 ) ;
20982: LD_INT 35
20984: PPUSH
20985: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20989: LD_INT 22
20991: PUSH
20992: LD_INT 6
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 21
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 69
21017: PPUSH
21018: LD_INT 124
21020: PPUSH
21021: LD_INT 98
21023: PPUSH
21024: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21028: LD_INT 22
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PPUSH
21052: CALL_OW 69
21056: PPUSH
21057: LD_INT 124
21059: PPUSH
21060: LD_INT 96
21062: PPUSH
21063: CALL_OW 114
// wait ( 0 0$1 ) ;
21067: LD_INT 35
21069: PPUSH
21070: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21074: LD_INT 124
21076: PPUSH
21077: LD_INT 96
21079: PPUSH
21080: CALL_OW 84
// p := 0 0$0 ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21092: LD_ADDR_VAR 0 2
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_INT 6
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 21
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 69
21143: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21144: LD_INT 35
21146: PPUSH
21147: CALL_OW 67
// p := p + 0 0$1 ;
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_VAR 0 3
21160: PUSH
21161: LD_INT 35
21163: PLUS
21164: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21165: LD_VAR 0 2
21169: PPUSH
21170: LD_INT 5
21172: PPUSH
21173: CALL_OW 113
// for i in tmp do
21177: LD_ADDR_VAR 0 1
21181: PUSH
21182: LD_VAR 0 2
21186: PUSH
21187: FOR_IN
21188: IFFALSE 21215
// if IsInArea ( tmp , RussianEscape ) then
21190: LD_VAR 0 2
21194: PPUSH
21195: LD_INT 5
21197: PPUSH
21198: CALL_OW 308
21202: IFFALSE 21213
// RemoveUnit ( i ) ;
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 64
21213: GO 21187
21215: POP
21216: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21217: LD_INT 23
21219: PUSH
21220: LD_INT 3
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 21
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 24
21239: PUSH
21240: LD_INT 250
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: PUSH
21257: LD_INT 0
21259: EQUAL
21260: PUSH
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 245
21268: GREATEREQUAL
21269: OR
21270: IFFALSE 21144
// FinishMission ;
21272: CALL 21279 0 0
// end ;
21276: PPOPN 3
21278: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
// if not vehicleProduceCounter then
21286: LD_EXP 42
21290: NOT
21291: IFFALSE 21300
// SetAchievement ( ACH_INFANTRY ) ;
21293: LD_STRING ACH_INFANTRY
21295: PPUSH
21296: CALL_OW 543
// if tick <= 20 20$00 then
21300: LD_OWVAR 1
21304: PUSH
21305: LD_INT 42000
21307: LESSEQUAL
21308: IFFALSE 21324
// begin wait ( 3 ) ;
21310: LD_INT 3
21312: PPUSH
21313: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21317: LD_STRING ACH_ASPEED_4
21319: PPUSH
21320: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21324: LD_INT 22
21326: PPUSH
21327: CALL 21968 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21331: LD_INT 69
21333: PPUSH
21334: LD_INT 1
21336: PPUSH
21337: CALL_OW 321
21341: PPUSH
21342: LD_STRING GatlingInGamma
21344: PPUSH
21345: CALL_OW 39
// m1 := false ;
21349: LD_ADDR_VAR 0 3
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// m2 := false ;
21357: LD_ADDR_VAR 0 4
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// m3 := false ;
21365: LD_ADDR_VAR 0 5
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21373: LD_EXP 34
21377: PUSH
21378: LD_INT 1
21380: EQUAL
21381: PUSH
21382: LD_EXP 35
21386: PUSH
21387: LD_INT 1
21389: EQUAL
21390: AND
21391: IFFALSE 21413
// begin AddMedal ( oil , 1 ) ;
21393: LD_STRING oil
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 101
// m1 := true ;
21403: LD_ADDR_VAR 0 3
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// end else
21411: GO 21506
// begin if buildOil = 1 and buildPower = 0 then
21413: LD_EXP 34
21417: PUSH
21418: LD_INT 1
21420: EQUAL
21421: PUSH
21422: LD_EXP 35
21426: PUSH
21427: LD_INT 0
21429: EQUAL
21430: AND
21431: IFFALSE 21444
// AddMedal ( oil , - 1 ) ;
21433: LD_STRING oil
21435: PPUSH
21436: LD_INT 1
21438: NEG
21439: PPUSH
21440: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21444: LD_EXP 34
21448: PUSH
21449: LD_INT 0
21451: EQUAL
21452: PUSH
21453: LD_EXP 35
21457: PUSH
21458: LD_INT 1
21460: EQUAL
21461: AND
21462: IFFALSE 21475
// AddMedal ( oil , - 2 ) ;
21464: LD_STRING oil
21466: PPUSH
21467: LD_INT 2
21469: NEG
21470: PPUSH
21471: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21475: LD_EXP 34
21479: PUSH
21480: LD_INT 0
21482: EQUAL
21483: PUSH
21484: LD_EXP 35
21488: PUSH
21489: LD_INT 0
21491: EQUAL
21492: AND
21493: IFFALSE 21506
// AddMedal ( oil , - 3 ) ;
21495: LD_STRING oil
21497: PPUSH
21498: LD_INT 3
21500: NEG
21501: PPUSH
21502: CALL_OW 101
// end ; if lostCounter > 3 then
21506: LD_EXP 38
21510: PUSH
21511: LD_INT 3
21513: GREATER
21514: IFFALSE 21529
// AddMedal ( deaths , - 1 ) else
21516: LD_STRING deaths
21518: PPUSH
21519: LD_INT 1
21521: NEG
21522: PPUSH
21523: CALL_OW 101
21527: GO 21547
// begin AddMedal ( deaths , 1 ) ;
21529: LD_STRING deaths
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 101
// m2 := true ;
21539: LD_ADDR_VAR 0 4
21543: PUSH
21544: LD_INT 1
21546: ST_TO_ADDR
// end ; if honor = 1 then
21547: LD_EXP 39
21551: PUSH
21552: LD_INT 1
21554: EQUAL
21555: IFFALSE 21577
// begin AddMedal ( honour , 1 ) ;
21557: LD_STRING honour
21559: PPUSH
21560: LD_INT 1
21562: PPUSH
21563: CALL_OW 101
// m3 := true ;
21567: LD_ADDR_VAR 0 5
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
// end else
21575: GO 21588
// begin AddMedal ( honour , - 1 ) ;
21577: LD_STRING honour
21579: PPUSH
21580: LD_INT 1
21582: NEG
21583: PPUSH
21584: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21588: LD_VAR 0 3
21592: PUSH
21593: LD_VAR 0 4
21597: AND
21598: PUSH
21599: LD_VAR 0 5
21603: AND
21604: PUSH
21605: LD_OWVAR 67
21609: PUSH
21610: LD_INT 3
21612: EQUAL
21613: AND
21614: IFFALSE 21626
// SetAchievementEX ( ACH_AMER , 4 ) ;
21616: LD_STRING ACH_AMER
21618: PPUSH
21619: LD_INT 4
21621: PPUSH
21622: CALL_OW 564
// GiveMedals ( Main ) ;
21626: LD_STRING Main
21628: PPUSH
21629: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21633: LD_INT 22
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 23
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 69
21672: PPUSH
21673: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21677: LD_EXP 1
21681: PPUSH
21682: LD_EXP 48
21686: PUSH
21687: LD_STRING JMM
21689: STR
21690: PPUSH
21691: CALL_OW 38
// if IsOK ( Bobby ) then
21695: LD_EXP 2
21699: PPUSH
21700: CALL_OW 302
21704: IFFALSE 21724
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21706: LD_EXP 2
21710: PPUSH
21711: LD_EXP 48
21715: PUSH
21716: LD_STRING Bobby
21718: STR
21719: PPUSH
21720: CALL_OW 38
// if IsOK ( Cyrus ) then
21724: LD_EXP 3
21728: PPUSH
21729: CALL_OW 302
21733: IFFALSE 21753
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21735: LD_EXP 3
21739: PPUSH
21740: LD_EXP 48
21744: PUSH
21745: LD_STRING Cyrus
21747: STR
21748: PPUSH
21749: CALL_OW 38
// if IsOK ( Lisa ) then
21753: LD_EXP 4
21757: PPUSH
21758: CALL_OW 302
21762: IFFALSE 21782
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21764: LD_EXP 4
21768: PPUSH
21769: LD_EXP 48
21773: PUSH
21774: LD_STRING Lisa
21776: STR
21777: PPUSH
21778: CALL_OW 38
// if IsOK ( Brown ) then
21782: LD_EXP 7
21786: PPUSH
21787: CALL_OW 302
21791: IFFALSE 21811
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21793: LD_EXP 7
21797: PPUSH
21798: LD_EXP 48
21802: PUSH
21803: LD_STRING Brown
21805: STR
21806: PPUSH
21807: CALL_OW 38
// if not IsDead ( Donaldson ) then
21811: LD_EXP 13
21815: PPUSH
21816: CALL_OW 301
21820: NOT
21821: IFFALSE 21841
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21823: LD_EXP 13
21827: PPUSH
21828: LD_EXP 48
21832: PUSH
21833: LD_STRING Donaldson
21835: STR
21836: PPUSH
21837: CALL_OW 38
// if not IsDead ( Frank ) then
21841: LD_EXP 5
21845: PPUSH
21846: CALL_OW 301
21850: NOT
21851: IFFALSE 21871
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21853: LD_EXP 5
21857: PPUSH
21858: LD_EXP 48
21862: PUSH
21863: LD_STRING Frank
21865: STR
21866: PPUSH
21867: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21871: LD_INT 50
21873: PUSH
21874: EMPTY
21875: LIST
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 69
21906: PUSH
21907: LD_EXP 1
21911: PUSH
21912: LD_EXP 2
21916: PUSH
21917: LD_EXP 3
21921: PUSH
21922: LD_EXP 4
21926: PUSH
21927: LD_EXP 7
21931: PUSH
21932: LD_EXP 13
21936: PUSH
21937: LD_EXP 5
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: DIFF
21951: PPUSH
21952: LD_STRING 04_other_survivors
21954: PPUSH
21955: CALL_OW 38
// YouWin ;
21959: CALL_OW 103
// end ;
21963: LD_VAR 0 1
21967: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21968: LD_INT 0
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
// gammaBase = [ ] ;
21974: LD_ADDR_VAR 0 4
21978: PUSH
21979: EMPTY
21980: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
21981: LD_ADDR_VAR 0 5
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: LD_INT 22
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 21
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 70
22019: ST_TO_ADDR
// for i in buildings do
22020: LD_ADDR_VAR 0 3
22024: PUSH
22025: LD_VAR 0 5
22029: PUSH
22030: FOR_IN
22031: IFFALSE 22368
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22033: LD_VAR 0 3
22037: PPUSH
22038: CALL_OW 266
22042: PUSH
22043: LD_INT 6
22045: PUSH
22046: LD_INT 7
22048: PUSH
22049: LD_INT 8
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: IN
22057: IFFALSE 22171
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22059: LD_ADDR_VAR 0 4
22063: PUSH
22064: LD_VAR 0 4
22068: PUSH
22069: LD_VAR 0 3
22073: PPUSH
22074: CALL_OW 266
22078: PUSH
22079: LD_VAR 0 3
22083: PPUSH
22084: CALL_OW 250
22088: PUSH
22089: LD_VAR 0 3
22093: PPUSH
22094: CALL_OW 251
22098: PUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: CALL_OW 254
22108: PUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL_OW 267
22118: PUSH
22119: LD_VAR 0 3
22123: PPUSH
22124: CALL_OW 248
22128: PUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: LD_INT 1
22136: PPUSH
22137: CALL_OW 268
22141: PUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: LD_INT 2
22149: PPUSH
22150: CALL_OW 268
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: ADD
22168: ST_TO_ADDR
22169: GO 22366
// if GetBType ( i ) in [ b_bunker ] then
22171: LD_VAR 0 3
22175: PPUSH
22176: CALL_OW 266
22180: PUSH
22181: LD_INT 32
22183: PUSH
22184: EMPTY
22185: LIST
22186: IN
22187: IFFALSE 22284
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22189: LD_ADDR_VAR 0 4
22193: PUSH
22194: LD_VAR 0 4
22198: PUSH
22199: LD_VAR 0 3
22203: PPUSH
22204: CALL_OW 266
22208: PUSH
22209: LD_VAR 0 3
22213: PPUSH
22214: CALL_OW 250
22218: PUSH
22219: LD_VAR 0 3
22223: PPUSH
22224: CALL_OW 251
22228: PUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: CALL_OW 254
22238: PUSH
22239: LD_VAR 0 3
22243: PPUSH
22244: CALL_OW 267
22248: PUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: CALL_OW 248
22258: PUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: CALL_OW 269
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: ADD
22281: ST_TO_ADDR
22282: GO 22366
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22284: LD_ADDR_VAR 0 4
22288: PUSH
22289: LD_VAR 0 4
22293: PUSH
22294: LD_VAR 0 3
22298: PPUSH
22299: CALL_OW 266
22303: PUSH
22304: LD_VAR 0 3
22308: PPUSH
22309: CALL_OW 250
22313: PUSH
22314: LD_VAR 0 3
22318: PPUSH
22319: CALL_OW 251
22323: PUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 254
22333: PUSH
22334: LD_VAR 0 3
22338: PPUSH
22339: CALL_OW 267
22343: PUSH
22344: LD_VAR 0 3
22348: PPUSH
22349: CALL_OW 248
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: ADD
22365: ST_TO_ADDR
// end ;
22366: GO 22030
22368: POP
22369: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22370: LD_VAR 0 4
22374: PPUSH
22375: LD_STRING GammaBase
22377: PPUSH
22378: CALL_OW 39
// end ; end_of_file
22382: LD_VAR 0 2
22386: RET
// every 1 1$15 do
22387: GO 22389
22389: DISABLE
// begin if supply <= 13 and supply > 7 then
22390: LD_EXP 36
22394: PUSH
22395: LD_INT 13
22397: LESSEQUAL
22398: PUSH
22399: LD_EXP 36
22403: PUSH
22404: LD_INT 7
22406: GREATER
22407: AND
22408: IFFALSE 22431
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22410: LD_INT 3
22412: PPUSH
22413: LD_INT 5
22415: PPUSH
22416: CALL_OW 12
22420: PPUSH
22421: LD_INT 18
22423: PPUSH
22424: LD_INT 1
22426: PPUSH
22427: CALL_OW 55
// if supply <= 7 and supply > 4 then
22431: LD_EXP 36
22435: PUSH
22436: LD_INT 7
22438: LESSEQUAL
22439: PUSH
22440: LD_EXP 36
22444: PUSH
22445: LD_INT 4
22447: GREATER
22448: AND
22449: IFFALSE 22472
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22451: LD_INT 3
22453: PPUSH
22454: LD_INT 5
22456: PPUSH
22457: CALL_OW 12
22461: PPUSH
22462: LD_INT 19
22464: PPUSH
22465: LD_INT 1
22467: PPUSH
22468: CALL_OW 55
// if supply <= 4 and supply > 0 then
22472: LD_EXP 36
22476: PUSH
22477: LD_INT 4
22479: LESSEQUAL
22480: PUSH
22481: LD_EXP 36
22485: PUSH
22486: LD_INT 0
22488: GREATER
22489: AND
22490: IFFALSE 22513
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22492: LD_INT 3
22494: PPUSH
22495: LD_INT 5
22497: PPUSH
22498: CALL_OW 12
22502: PPUSH
22503: LD_INT 20
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: CALL_OW 55
// if supply > 0 then
22513: LD_EXP 36
22517: PUSH
22518: LD_INT 0
22520: GREATER
22521: IFFALSE 22538
// begin supply = supply - 1 ;
22523: LD_ADDR_EXP 36
22527: PUSH
22528: LD_EXP 36
22532: PUSH
22533: LD_INT 1
22535: MINUS
22536: ST_TO_ADDR
// enable ;
22537: ENABLE
// end ; end ; end_of_file
22538: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22539: LD_INT 0
22541: PPUSH
// ar_miner := 81 ;
22542: LD_ADDR_EXP 59
22546: PUSH
22547: LD_INT 81
22549: ST_TO_ADDR
// ar_crane := 88 ;
22550: LD_ADDR_EXP 58
22554: PUSH
22555: LD_INT 88
22557: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22558: LD_ADDR_EXP 53
22562: PUSH
22563: LD_INT 89
22565: ST_TO_ADDR
// us_hack := 99 ;
22566: LD_ADDR_EXP 54
22570: PUSH
22571: LD_INT 99
22573: ST_TO_ADDR
// us_artillery := 97 ;
22574: LD_ADDR_EXP 55
22578: PUSH
22579: LD_INT 97
22581: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22582: LD_ADDR_EXP 56
22586: PUSH
22587: LD_INT 91
22589: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22590: LD_ADDR_EXP 57
22594: PUSH
22595: LD_INT 92
22597: ST_TO_ADDR
// ru_radar := 98 ;
22598: LD_ADDR_EXP 52
22602: PUSH
22603: LD_INT 98
22605: ST_TO_ADDR
// tech_Artillery := 80 ;
22606: LD_ADDR_EXP 60
22610: PUSH
22611: LD_INT 80
22613: ST_TO_ADDR
// tech_RadMat := 81 ;
22614: LD_ADDR_EXP 61
22618: PUSH
22619: LD_INT 81
22621: ST_TO_ADDR
// tech_BasicTools := 82 ;
22622: LD_ADDR_EXP 62
22626: PUSH
22627: LD_INT 82
22629: ST_TO_ADDR
// tech_Cargo := 83 ;
22630: LD_ADDR_EXP 63
22634: PUSH
22635: LD_INT 83
22637: ST_TO_ADDR
// tech_Track := 84 ;
22638: LD_ADDR_EXP 64
22642: PUSH
22643: LD_INT 84
22645: ST_TO_ADDR
// tech_Crane := 85 ;
22646: LD_ADDR_EXP 65
22650: PUSH
22651: LD_INT 85
22653: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22654: LD_ADDR_EXP 66
22658: PUSH
22659: LD_INT 86
22661: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22662: LD_ADDR_EXP 67
22666: PUSH
22667: LD_INT 87
22669: ST_TO_ADDR
// class_mastodont := 31 ;
22670: LD_ADDR_EXP 68
22674: PUSH
22675: LD_INT 31
22677: ST_TO_ADDR
// class_horse := 21 ;
22678: LD_ADDR_EXP 69
22682: PUSH
22683: LD_INT 21
22685: ST_TO_ADDR
// end ;
22686: LD_VAR 0 1
22690: RET
// every 1 do
22691: GO 22693
22693: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22694: CALL 22539 0 0
22698: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22699: LD_INT 0
22701: PPUSH
// if p2 = 100 then
22702: LD_VAR 0 2
22706: PUSH
22707: LD_INT 100
22709: EQUAL
22710: IFFALSE 23659
// begin if not StreamModeActive then
22712: LD_EXP 70
22716: NOT
22717: IFFALSE 22727
// StreamModeActive := true ;
22719: LD_ADDR_EXP 70
22723: PUSH
22724: LD_INT 1
22726: ST_TO_ADDR
// if p3 = 0 then
22727: LD_VAR 0 3
22731: PUSH
22732: LD_INT 0
22734: EQUAL
22735: IFFALSE 22741
// InitStreamMode ;
22737: CALL 23819 0 0
// if p3 = 1 then
22741: LD_VAR 0 3
22745: PUSH
22746: LD_INT 1
22748: EQUAL
22749: IFFALSE 22759
// sRocket := true ;
22751: LD_ADDR_EXP 75
22755: PUSH
22756: LD_INT 1
22758: ST_TO_ADDR
// if p3 = 2 then
22759: LD_VAR 0 3
22763: PUSH
22764: LD_INT 2
22766: EQUAL
22767: IFFALSE 22777
// sSpeed := true ;
22769: LD_ADDR_EXP 74
22773: PUSH
22774: LD_INT 1
22776: ST_TO_ADDR
// if p3 = 3 then
22777: LD_VAR 0 3
22781: PUSH
22782: LD_INT 3
22784: EQUAL
22785: IFFALSE 22795
// sEngine := true ;
22787: LD_ADDR_EXP 76
22791: PUSH
22792: LD_INT 1
22794: ST_TO_ADDR
// if p3 = 4 then
22795: LD_VAR 0 3
22799: PUSH
22800: LD_INT 4
22802: EQUAL
22803: IFFALSE 22813
// sSpec := true ;
22805: LD_ADDR_EXP 73
22809: PUSH
22810: LD_INT 1
22812: ST_TO_ADDR
// if p3 = 5 then
22813: LD_VAR 0 3
22817: PUSH
22818: LD_INT 5
22820: EQUAL
22821: IFFALSE 22831
// sLevel := true ;
22823: LD_ADDR_EXP 77
22827: PUSH
22828: LD_INT 1
22830: ST_TO_ADDR
// if p3 = 6 then
22831: LD_VAR 0 3
22835: PUSH
22836: LD_INT 6
22838: EQUAL
22839: IFFALSE 22849
// sArmoury := true ;
22841: LD_ADDR_EXP 78
22845: PUSH
22846: LD_INT 1
22848: ST_TO_ADDR
// if p3 = 7 then
22849: LD_VAR 0 3
22853: PUSH
22854: LD_INT 7
22856: EQUAL
22857: IFFALSE 22867
// sRadar := true ;
22859: LD_ADDR_EXP 79
22863: PUSH
22864: LD_INT 1
22866: ST_TO_ADDR
// if p3 = 8 then
22867: LD_VAR 0 3
22871: PUSH
22872: LD_INT 8
22874: EQUAL
22875: IFFALSE 22885
// sBunker := true ;
22877: LD_ADDR_EXP 80
22881: PUSH
22882: LD_INT 1
22884: ST_TO_ADDR
// if p3 = 9 then
22885: LD_VAR 0 3
22889: PUSH
22890: LD_INT 9
22892: EQUAL
22893: IFFALSE 22903
// sHack := true ;
22895: LD_ADDR_EXP 81
22899: PUSH
22900: LD_INT 1
22902: ST_TO_ADDR
// if p3 = 10 then
22903: LD_VAR 0 3
22907: PUSH
22908: LD_INT 10
22910: EQUAL
22911: IFFALSE 22921
// sFire := true ;
22913: LD_ADDR_EXP 82
22917: PUSH
22918: LD_INT 1
22920: ST_TO_ADDR
// if p3 = 11 then
22921: LD_VAR 0 3
22925: PUSH
22926: LD_INT 11
22928: EQUAL
22929: IFFALSE 22939
// sRefresh := true ;
22931: LD_ADDR_EXP 83
22935: PUSH
22936: LD_INT 1
22938: ST_TO_ADDR
// if p3 = 12 then
22939: LD_VAR 0 3
22943: PUSH
22944: LD_INT 12
22946: EQUAL
22947: IFFALSE 22957
// sExp := true ;
22949: LD_ADDR_EXP 84
22953: PUSH
22954: LD_INT 1
22956: ST_TO_ADDR
// if p3 = 13 then
22957: LD_VAR 0 3
22961: PUSH
22962: LD_INT 13
22964: EQUAL
22965: IFFALSE 22975
// sDepot := true ;
22967: LD_ADDR_EXP 85
22971: PUSH
22972: LD_INT 1
22974: ST_TO_ADDR
// if p3 = 14 then
22975: LD_VAR 0 3
22979: PUSH
22980: LD_INT 14
22982: EQUAL
22983: IFFALSE 22993
// sFlag := true ;
22985: LD_ADDR_EXP 86
22989: PUSH
22990: LD_INT 1
22992: ST_TO_ADDR
// if p3 = 15 then
22993: LD_VAR 0 3
22997: PUSH
22998: LD_INT 15
23000: EQUAL
23001: IFFALSE 23011
// sKamikadze := true ;
23003: LD_ADDR_EXP 94
23007: PUSH
23008: LD_INT 1
23010: ST_TO_ADDR
// if p3 = 16 then
23011: LD_VAR 0 3
23015: PUSH
23016: LD_INT 16
23018: EQUAL
23019: IFFALSE 23029
// sTroll := true ;
23021: LD_ADDR_EXP 95
23025: PUSH
23026: LD_INT 1
23028: ST_TO_ADDR
// if p3 = 17 then
23029: LD_VAR 0 3
23033: PUSH
23034: LD_INT 17
23036: EQUAL
23037: IFFALSE 23047
// sSlow := true ;
23039: LD_ADDR_EXP 96
23043: PUSH
23044: LD_INT 1
23046: ST_TO_ADDR
// if p3 = 18 then
23047: LD_VAR 0 3
23051: PUSH
23052: LD_INT 18
23054: EQUAL
23055: IFFALSE 23065
// sLack := true ;
23057: LD_ADDR_EXP 97
23061: PUSH
23062: LD_INT 1
23064: ST_TO_ADDR
// if p3 = 19 then
23065: LD_VAR 0 3
23069: PUSH
23070: LD_INT 19
23072: EQUAL
23073: IFFALSE 23083
// sTank := true ;
23075: LD_ADDR_EXP 99
23079: PUSH
23080: LD_INT 1
23082: ST_TO_ADDR
// if p3 = 20 then
23083: LD_VAR 0 3
23087: PUSH
23088: LD_INT 20
23090: EQUAL
23091: IFFALSE 23101
// sRemote := true ;
23093: LD_ADDR_EXP 100
23097: PUSH
23098: LD_INT 1
23100: ST_TO_ADDR
// if p3 = 21 then
23101: LD_VAR 0 3
23105: PUSH
23106: LD_INT 21
23108: EQUAL
23109: IFFALSE 23119
// sPowell := true ;
23111: LD_ADDR_EXP 101
23115: PUSH
23116: LD_INT 1
23118: ST_TO_ADDR
// if p3 = 22 then
23119: LD_VAR 0 3
23123: PUSH
23124: LD_INT 22
23126: EQUAL
23127: IFFALSE 23137
// sTeleport := true ;
23129: LD_ADDR_EXP 104
23133: PUSH
23134: LD_INT 1
23136: ST_TO_ADDR
// if p3 = 23 then
23137: LD_VAR 0 3
23141: PUSH
23142: LD_INT 23
23144: EQUAL
23145: IFFALSE 23155
// sOilTower := true ;
23147: LD_ADDR_EXP 106
23151: PUSH
23152: LD_INT 1
23154: ST_TO_ADDR
// if p3 = 24 then
23155: LD_VAR 0 3
23159: PUSH
23160: LD_INT 24
23162: EQUAL
23163: IFFALSE 23173
// sShovel := true ;
23165: LD_ADDR_EXP 107
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// if p3 = 25 then
23173: LD_VAR 0 3
23177: PUSH
23178: LD_INT 25
23180: EQUAL
23181: IFFALSE 23191
// sSheik := true ;
23183: LD_ADDR_EXP 108
23187: PUSH
23188: LD_INT 1
23190: ST_TO_ADDR
// if p3 = 26 then
23191: LD_VAR 0 3
23195: PUSH
23196: LD_INT 26
23198: EQUAL
23199: IFFALSE 23209
// sEarthquake := true ;
23201: LD_ADDR_EXP 110
23205: PUSH
23206: LD_INT 1
23208: ST_TO_ADDR
// if p3 = 27 then
23209: LD_VAR 0 3
23213: PUSH
23214: LD_INT 27
23216: EQUAL
23217: IFFALSE 23227
// sAI := true ;
23219: LD_ADDR_EXP 111
23223: PUSH
23224: LD_INT 1
23226: ST_TO_ADDR
// if p3 = 28 then
23227: LD_VAR 0 3
23231: PUSH
23232: LD_INT 28
23234: EQUAL
23235: IFFALSE 23245
// sCargo := true ;
23237: LD_ADDR_EXP 114
23241: PUSH
23242: LD_INT 1
23244: ST_TO_ADDR
// if p3 = 29 then
23245: LD_VAR 0 3
23249: PUSH
23250: LD_INT 29
23252: EQUAL
23253: IFFALSE 23263
// sDLaser := true ;
23255: LD_ADDR_EXP 115
23259: PUSH
23260: LD_INT 1
23262: ST_TO_ADDR
// if p3 = 30 then
23263: LD_VAR 0 3
23267: PUSH
23268: LD_INT 30
23270: EQUAL
23271: IFFALSE 23281
// sExchange := true ;
23273: LD_ADDR_EXP 116
23277: PUSH
23278: LD_INT 1
23280: ST_TO_ADDR
// if p3 = 31 then
23281: LD_VAR 0 3
23285: PUSH
23286: LD_INT 31
23288: EQUAL
23289: IFFALSE 23299
// sFac := true ;
23291: LD_ADDR_EXP 117
23295: PUSH
23296: LD_INT 1
23298: ST_TO_ADDR
// if p3 = 32 then
23299: LD_VAR 0 3
23303: PUSH
23304: LD_INT 32
23306: EQUAL
23307: IFFALSE 23317
// sPower := true ;
23309: LD_ADDR_EXP 118
23313: PUSH
23314: LD_INT 1
23316: ST_TO_ADDR
// if p3 = 33 then
23317: LD_VAR 0 3
23321: PUSH
23322: LD_INT 33
23324: EQUAL
23325: IFFALSE 23335
// sRandom := true ;
23327: LD_ADDR_EXP 119
23331: PUSH
23332: LD_INT 1
23334: ST_TO_ADDR
// if p3 = 34 then
23335: LD_VAR 0 3
23339: PUSH
23340: LD_INT 34
23342: EQUAL
23343: IFFALSE 23353
// sShield := true ;
23345: LD_ADDR_EXP 120
23349: PUSH
23350: LD_INT 1
23352: ST_TO_ADDR
// if p3 = 35 then
23353: LD_VAR 0 3
23357: PUSH
23358: LD_INT 35
23360: EQUAL
23361: IFFALSE 23371
// sTime := true ;
23363: LD_ADDR_EXP 121
23367: PUSH
23368: LD_INT 1
23370: ST_TO_ADDR
// if p3 = 36 then
23371: LD_VAR 0 3
23375: PUSH
23376: LD_INT 36
23378: EQUAL
23379: IFFALSE 23389
// sTools := true ;
23381: LD_ADDR_EXP 122
23385: PUSH
23386: LD_INT 1
23388: ST_TO_ADDR
// if p3 = 101 then
23389: LD_VAR 0 3
23393: PUSH
23394: LD_INT 101
23396: EQUAL
23397: IFFALSE 23407
// sSold := true ;
23399: LD_ADDR_EXP 87
23403: PUSH
23404: LD_INT 1
23406: ST_TO_ADDR
// if p3 = 102 then
23407: LD_VAR 0 3
23411: PUSH
23412: LD_INT 102
23414: EQUAL
23415: IFFALSE 23425
// sDiff := true ;
23417: LD_ADDR_EXP 88
23421: PUSH
23422: LD_INT 1
23424: ST_TO_ADDR
// if p3 = 103 then
23425: LD_VAR 0 3
23429: PUSH
23430: LD_INT 103
23432: EQUAL
23433: IFFALSE 23443
// sFog := true ;
23435: LD_ADDR_EXP 91
23439: PUSH
23440: LD_INT 1
23442: ST_TO_ADDR
// if p3 = 104 then
23443: LD_VAR 0 3
23447: PUSH
23448: LD_INT 104
23450: EQUAL
23451: IFFALSE 23461
// sReset := true ;
23453: LD_ADDR_EXP 92
23457: PUSH
23458: LD_INT 1
23460: ST_TO_ADDR
// if p3 = 105 then
23461: LD_VAR 0 3
23465: PUSH
23466: LD_INT 105
23468: EQUAL
23469: IFFALSE 23479
// sSun := true ;
23471: LD_ADDR_EXP 93
23475: PUSH
23476: LD_INT 1
23478: ST_TO_ADDR
// if p3 = 106 then
23479: LD_VAR 0 3
23483: PUSH
23484: LD_INT 106
23486: EQUAL
23487: IFFALSE 23497
// sTiger := true ;
23489: LD_ADDR_EXP 89
23493: PUSH
23494: LD_INT 1
23496: ST_TO_ADDR
// if p3 = 107 then
23497: LD_VAR 0 3
23501: PUSH
23502: LD_INT 107
23504: EQUAL
23505: IFFALSE 23515
// sBomb := true ;
23507: LD_ADDR_EXP 90
23511: PUSH
23512: LD_INT 1
23514: ST_TO_ADDR
// if p3 = 108 then
23515: LD_VAR 0 3
23519: PUSH
23520: LD_INT 108
23522: EQUAL
23523: IFFALSE 23533
// sWound := true ;
23525: LD_ADDR_EXP 98
23529: PUSH
23530: LD_INT 1
23532: ST_TO_ADDR
// if p3 = 109 then
23533: LD_VAR 0 3
23537: PUSH
23538: LD_INT 109
23540: EQUAL
23541: IFFALSE 23551
// sBetray := true ;
23543: LD_ADDR_EXP 102
23547: PUSH
23548: LD_INT 1
23550: ST_TO_ADDR
// if p3 = 110 then
23551: LD_VAR 0 3
23555: PUSH
23556: LD_INT 110
23558: EQUAL
23559: IFFALSE 23569
// sContamin := true ;
23561: LD_ADDR_EXP 103
23565: PUSH
23566: LD_INT 1
23568: ST_TO_ADDR
// if p3 = 111 then
23569: LD_VAR 0 3
23573: PUSH
23574: LD_INT 111
23576: EQUAL
23577: IFFALSE 23587
// sOil := true ;
23579: LD_ADDR_EXP 105
23583: PUSH
23584: LD_INT 1
23586: ST_TO_ADDR
// if p3 = 112 then
23587: LD_VAR 0 3
23591: PUSH
23592: LD_INT 112
23594: EQUAL
23595: IFFALSE 23605
// sStu := true ;
23597: LD_ADDR_EXP 109
23601: PUSH
23602: LD_INT 1
23604: ST_TO_ADDR
// if p3 = 113 then
23605: LD_VAR 0 3
23609: PUSH
23610: LD_INT 113
23612: EQUAL
23613: IFFALSE 23623
// sBazooka := true ;
23615: LD_ADDR_EXP 112
23619: PUSH
23620: LD_INT 1
23622: ST_TO_ADDR
// if p3 = 114 then
23623: LD_VAR 0 3
23627: PUSH
23628: LD_INT 114
23630: EQUAL
23631: IFFALSE 23641
// sMortar := true ;
23633: LD_ADDR_EXP 113
23637: PUSH
23638: LD_INT 1
23640: ST_TO_ADDR
// if p3 = 115 then
23641: LD_VAR 0 3
23645: PUSH
23646: LD_INT 115
23648: EQUAL
23649: IFFALSE 23659
// sRanger := true ;
23651: LD_ADDR_EXP 123
23655: PUSH
23656: LD_INT 1
23658: ST_TO_ADDR
// end ; if p2 = 101 then
23659: LD_VAR 0 2
23663: PUSH
23664: LD_INT 101
23666: EQUAL
23667: IFFALSE 23795
// begin case p3 of 1 :
23669: LD_VAR 0 3
23673: PUSH
23674: LD_INT 1
23676: DOUBLE
23677: EQUAL
23678: IFTRUE 23682
23680: GO 23689
23682: POP
// hHackUnlimitedResources ; 2 :
23683: CALL 34832 0 0
23687: GO 23795
23689: LD_INT 2
23691: DOUBLE
23692: EQUAL
23693: IFTRUE 23697
23695: GO 23704
23697: POP
// hHackSetLevel10 ; 3 :
23698: CALL 34965 0 0
23702: GO 23795
23704: LD_INT 3
23706: DOUBLE
23707: EQUAL
23708: IFTRUE 23712
23710: GO 23719
23712: POP
// hHackSetLevel10YourUnits ; 4 :
23713: CALL 35050 0 0
23717: GO 23795
23719: LD_INT 4
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 23734
23727: POP
// hHackInvincible ; 5 :
23728: CALL 35498 0 0
23732: GO 23795
23734: LD_INT 5
23736: DOUBLE
23737: EQUAL
23738: IFTRUE 23742
23740: GO 23749
23742: POP
// hHackInvisible ; 6 :
23743: CALL 35609 0 0
23747: GO 23795
23749: LD_INT 6
23751: DOUBLE
23752: EQUAL
23753: IFTRUE 23757
23755: GO 23764
23757: POP
// hHackChangeYourSide ; 7 :
23758: CALL 35666 0 0
23762: GO 23795
23764: LD_INT 7
23766: DOUBLE
23767: EQUAL
23768: IFTRUE 23772
23770: GO 23779
23772: POP
// hHackChangeUnitSide ; 8 :
23773: CALL 35708 0 0
23777: GO 23795
23779: LD_INT 8
23781: DOUBLE
23782: EQUAL
23783: IFTRUE 23787
23785: GO 23794
23787: POP
// hHackFog ; end ;
23788: CALL 35809 0 0
23792: GO 23795
23794: POP
// end ; end ;
23795: LD_VAR 0 7
23799: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
23800: GO 23802
23802: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
23803: LD_STRING initStreamRollete();
23805: PPUSH
23806: CALL_OW 559
// InitStreamMode ;
23810: CALL 23819 0 0
// DefineStreamItems ( ) ;
23814: CALL 24259 0 0
// end ;
23818: END
// function InitStreamMode ; begin
23819: LD_INT 0
23821: PPUSH
// streamModeActive := false ;
23822: LD_ADDR_EXP 70
23826: PUSH
23827: LD_INT 0
23829: ST_TO_ADDR
// normalCounter := 36 ;
23830: LD_ADDR_EXP 71
23834: PUSH
23835: LD_INT 36
23837: ST_TO_ADDR
// hardcoreCounter := 16 ;
23838: LD_ADDR_EXP 72
23842: PUSH
23843: LD_INT 16
23845: ST_TO_ADDR
// sRocket := false ;
23846: LD_ADDR_EXP 75
23850: PUSH
23851: LD_INT 0
23853: ST_TO_ADDR
// sSpeed := false ;
23854: LD_ADDR_EXP 74
23858: PUSH
23859: LD_INT 0
23861: ST_TO_ADDR
// sEngine := false ;
23862: LD_ADDR_EXP 76
23866: PUSH
23867: LD_INT 0
23869: ST_TO_ADDR
// sSpec := false ;
23870: LD_ADDR_EXP 73
23874: PUSH
23875: LD_INT 0
23877: ST_TO_ADDR
// sLevel := false ;
23878: LD_ADDR_EXP 77
23882: PUSH
23883: LD_INT 0
23885: ST_TO_ADDR
// sArmoury := false ;
23886: LD_ADDR_EXP 78
23890: PUSH
23891: LD_INT 0
23893: ST_TO_ADDR
// sRadar := false ;
23894: LD_ADDR_EXP 79
23898: PUSH
23899: LD_INT 0
23901: ST_TO_ADDR
// sBunker := false ;
23902: LD_ADDR_EXP 80
23906: PUSH
23907: LD_INT 0
23909: ST_TO_ADDR
// sHack := false ;
23910: LD_ADDR_EXP 81
23914: PUSH
23915: LD_INT 0
23917: ST_TO_ADDR
// sFire := false ;
23918: LD_ADDR_EXP 82
23922: PUSH
23923: LD_INT 0
23925: ST_TO_ADDR
// sRefresh := false ;
23926: LD_ADDR_EXP 83
23930: PUSH
23931: LD_INT 0
23933: ST_TO_ADDR
// sExp := false ;
23934: LD_ADDR_EXP 84
23938: PUSH
23939: LD_INT 0
23941: ST_TO_ADDR
// sDepot := false ;
23942: LD_ADDR_EXP 85
23946: PUSH
23947: LD_INT 0
23949: ST_TO_ADDR
// sFlag := false ;
23950: LD_ADDR_EXP 86
23954: PUSH
23955: LD_INT 0
23957: ST_TO_ADDR
// sKamikadze := false ;
23958: LD_ADDR_EXP 94
23962: PUSH
23963: LD_INT 0
23965: ST_TO_ADDR
// sTroll := false ;
23966: LD_ADDR_EXP 95
23970: PUSH
23971: LD_INT 0
23973: ST_TO_ADDR
// sSlow := false ;
23974: LD_ADDR_EXP 96
23978: PUSH
23979: LD_INT 0
23981: ST_TO_ADDR
// sLack := false ;
23982: LD_ADDR_EXP 97
23986: PUSH
23987: LD_INT 0
23989: ST_TO_ADDR
// sTank := false ;
23990: LD_ADDR_EXP 99
23994: PUSH
23995: LD_INT 0
23997: ST_TO_ADDR
// sRemote := false ;
23998: LD_ADDR_EXP 100
24002: PUSH
24003: LD_INT 0
24005: ST_TO_ADDR
// sPowell := false ;
24006: LD_ADDR_EXP 101
24010: PUSH
24011: LD_INT 0
24013: ST_TO_ADDR
// sTeleport := false ;
24014: LD_ADDR_EXP 104
24018: PUSH
24019: LD_INT 0
24021: ST_TO_ADDR
// sOilTower := false ;
24022: LD_ADDR_EXP 106
24026: PUSH
24027: LD_INT 0
24029: ST_TO_ADDR
// sShovel := false ;
24030: LD_ADDR_EXP 107
24034: PUSH
24035: LD_INT 0
24037: ST_TO_ADDR
// sSheik := false ;
24038: LD_ADDR_EXP 108
24042: PUSH
24043: LD_INT 0
24045: ST_TO_ADDR
// sEarthquake := false ;
24046: LD_ADDR_EXP 110
24050: PUSH
24051: LD_INT 0
24053: ST_TO_ADDR
// sAI := false ;
24054: LD_ADDR_EXP 111
24058: PUSH
24059: LD_INT 0
24061: ST_TO_ADDR
// sCargo := false ;
24062: LD_ADDR_EXP 114
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
// sDLaser := false ;
24070: LD_ADDR_EXP 115
24074: PUSH
24075: LD_INT 0
24077: ST_TO_ADDR
// sExchange := false ;
24078: LD_ADDR_EXP 116
24082: PUSH
24083: LD_INT 0
24085: ST_TO_ADDR
// sFac := false ;
24086: LD_ADDR_EXP 117
24090: PUSH
24091: LD_INT 0
24093: ST_TO_ADDR
// sPower := false ;
24094: LD_ADDR_EXP 118
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// sRandom := false ;
24102: LD_ADDR_EXP 119
24106: PUSH
24107: LD_INT 0
24109: ST_TO_ADDR
// sShield := false ;
24110: LD_ADDR_EXP 120
24114: PUSH
24115: LD_INT 0
24117: ST_TO_ADDR
// sTime := false ;
24118: LD_ADDR_EXP 121
24122: PUSH
24123: LD_INT 0
24125: ST_TO_ADDR
// sTools := false ;
24126: LD_ADDR_EXP 122
24130: PUSH
24131: LD_INT 0
24133: ST_TO_ADDR
// sSold := false ;
24134: LD_ADDR_EXP 87
24138: PUSH
24139: LD_INT 0
24141: ST_TO_ADDR
// sDiff := false ;
24142: LD_ADDR_EXP 88
24146: PUSH
24147: LD_INT 0
24149: ST_TO_ADDR
// sFog := false ;
24150: LD_ADDR_EXP 91
24154: PUSH
24155: LD_INT 0
24157: ST_TO_ADDR
// sReset := false ;
24158: LD_ADDR_EXP 92
24162: PUSH
24163: LD_INT 0
24165: ST_TO_ADDR
// sSun := false ;
24166: LD_ADDR_EXP 93
24170: PUSH
24171: LD_INT 0
24173: ST_TO_ADDR
// sTiger := false ;
24174: LD_ADDR_EXP 89
24178: PUSH
24179: LD_INT 0
24181: ST_TO_ADDR
// sBomb := false ;
24182: LD_ADDR_EXP 90
24186: PUSH
24187: LD_INT 0
24189: ST_TO_ADDR
// sWound := false ;
24190: LD_ADDR_EXP 98
24194: PUSH
24195: LD_INT 0
24197: ST_TO_ADDR
// sBetray := false ;
24198: LD_ADDR_EXP 102
24202: PUSH
24203: LD_INT 0
24205: ST_TO_ADDR
// sContamin := false ;
24206: LD_ADDR_EXP 103
24210: PUSH
24211: LD_INT 0
24213: ST_TO_ADDR
// sOil := false ;
24214: LD_ADDR_EXP 105
24218: PUSH
24219: LD_INT 0
24221: ST_TO_ADDR
// sStu := false ;
24222: LD_ADDR_EXP 109
24226: PUSH
24227: LD_INT 0
24229: ST_TO_ADDR
// sBazooka := false ;
24230: LD_ADDR_EXP 112
24234: PUSH
24235: LD_INT 0
24237: ST_TO_ADDR
// sMortar := false ;
24238: LD_ADDR_EXP 113
24242: PUSH
24243: LD_INT 0
24245: ST_TO_ADDR
// sRanger := false ;
24246: LD_ADDR_EXP 123
24250: PUSH
24251: LD_INT 0
24253: ST_TO_ADDR
// end ;
24254: LD_VAR 0 1
24258: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24259: LD_INT 0
24261: PPUSH
24262: PPUSH
24263: PPUSH
24264: PPUSH
24265: PPUSH
// result := [ ] ;
24266: LD_ADDR_VAR 0 1
24270: PUSH
24271: EMPTY
24272: ST_TO_ADDR
// if campaign_id = 1 then
24273: LD_OWVAR 69
24277: PUSH
24278: LD_INT 1
24280: EQUAL
24281: IFFALSE 27219
// begin case mission_number of 1 :
24283: LD_OWVAR 70
24287: PUSH
24288: LD_INT 1
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24360
24296: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24297: LD_ADDR_VAR 0 1
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: LD_INT 4
24307: PUSH
24308: LD_INT 11
24310: PUSH
24311: LD_INT 12
24313: PUSH
24314: LD_INT 15
24316: PUSH
24317: LD_INT 16
24319: PUSH
24320: LD_INT 22
24322: PUSH
24323: LD_INT 23
24325: PUSH
24326: LD_INT 26
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 101
24342: PUSH
24343: LD_INT 102
24345: PUSH
24346: LD_INT 106
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: ST_TO_ADDR
24358: GO 27217
24360: LD_INT 2
24362: DOUBLE
24363: EQUAL
24364: IFTRUE 24368
24366: GO 24440
24368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24369: LD_ADDR_VAR 0 1
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 4
24379: PUSH
24380: LD_INT 11
24382: PUSH
24383: LD_INT 12
24385: PUSH
24386: LD_INT 15
24388: PUSH
24389: LD_INT 16
24391: PUSH
24392: LD_INT 22
24394: PUSH
24395: LD_INT 23
24397: PUSH
24398: LD_INT 26
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 101
24414: PUSH
24415: LD_INT 102
24417: PUSH
24418: LD_INT 105
24420: PUSH
24421: LD_INT 106
24423: PUSH
24424: LD_INT 108
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: ST_TO_ADDR
24438: GO 27217
24440: LD_INT 3
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24524
24448: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
24449: LD_ADDR_VAR 0 1
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 4
24459: PUSH
24460: LD_INT 5
24462: PUSH
24463: LD_INT 11
24465: PUSH
24466: LD_INT 12
24468: PUSH
24469: LD_INT 15
24471: PUSH
24472: LD_INT 16
24474: PUSH
24475: LD_INT 22
24477: PUSH
24478: LD_INT 26
24480: PUSH
24481: LD_INT 36
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 101
24498: PUSH
24499: LD_INT 102
24501: PUSH
24502: LD_INT 105
24504: PUSH
24505: LD_INT 106
24507: PUSH
24508: LD_INT 108
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: ST_TO_ADDR
24522: GO 27217
24524: LD_INT 4
24526: DOUBLE
24527: EQUAL
24528: IFTRUE 24532
24530: GO 24616
24532: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
24533: LD_ADDR_VAR 0 1
24537: PUSH
24538: LD_INT 2
24540: PUSH
24541: LD_INT 4
24543: PUSH
24544: LD_INT 5
24546: PUSH
24547: LD_INT 8
24549: PUSH
24550: LD_INT 11
24552: PUSH
24553: LD_INT 12
24555: PUSH
24556: LD_INT 15
24558: PUSH
24559: LD_INT 16
24561: PUSH
24562: LD_INT 22
24564: PUSH
24565: LD_INT 23
24567: PUSH
24568: LD_INT 26
24570: PUSH
24571: LD_INT 36
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 101
24590: PUSH
24591: LD_INT 102
24593: PUSH
24594: LD_INT 105
24596: PUSH
24597: LD_INT 106
24599: PUSH
24600: LD_INT 108
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: ST_TO_ADDR
24614: GO 27217
24616: LD_INT 5
24618: DOUBLE
24619: EQUAL
24620: IFTRUE 24624
24622: GO 24724
24624: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
24625: LD_ADDR_VAR 0 1
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 4
24635: PUSH
24636: LD_INT 5
24638: PUSH
24639: LD_INT 6
24641: PUSH
24642: LD_INT 8
24644: PUSH
24645: LD_INT 11
24647: PUSH
24648: LD_INT 12
24650: PUSH
24651: LD_INT 15
24653: PUSH
24654: LD_INT 16
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_INT 23
24662: PUSH
24663: LD_INT 25
24665: PUSH
24666: LD_INT 26
24668: PUSH
24669: LD_INT 36
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 101
24690: PUSH
24691: LD_INT 102
24693: PUSH
24694: LD_INT 105
24696: PUSH
24697: LD_INT 106
24699: PUSH
24700: LD_INT 108
24702: PUSH
24703: LD_INT 109
24705: PUSH
24706: LD_INT 112
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: ST_TO_ADDR
24722: GO 27217
24724: LD_INT 6
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24852
24732: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
24733: LD_ADDR_VAR 0 1
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 4
24743: PUSH
24744: LD_INT 5
24746: PUSH
24747: LD_INT 6
24749: PUSH
24750: LD_INT 8
24752: PUSH
24753: LD_INT 11
24755: PUSH
24756: LD_INT 12
24758: PUSH
24759: LD_INT 15
24761: PUSH
24762: LD_INT 16
24764: PUSH
24765: LD_INT 20
24767: PUSH
24768: LD_INT 21
24770: PUSH
24771: LD_INT 22
24773: PUSH
24774: LD_INT 23
24776: PUSH
24777: LD_INT 25
24779: PUSH
24780: LD_INT 26
24782: PUSH
24783: LD_INT 30
24785: PUSH
24786: LD_INT 31
24788: PUSH
24789: LD_INT 32
24791: PUSH
24792: LD_INT 36
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 101
24818: PUSH
24819: LD_INT 102
24821: PUSH
24822: LD_INT 105
24824: PUSH
24825: LD_INT 106
24827: PUSH
24828: LD_INT 108
24830: PUSH
24831: LD_INT 109
24833: PUSH
24834: LD_INT 112
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: ST_TO_ADDR
24850: GO 27217
24852: LD_INT 7
24854: DOUBLE
24855: EQUAL
24856: IFTRUE 24860
24858: GO 24960
24860: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
24861: LD_ADDR_VAR 0 1
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 4
24871: PUSH
24872: LD_INT 5
24874: PUSH
24875: LD_INT 7
24877: PUSH
24878: LD_INT 11
24880: PUSH
24881: LD_INT 12
24883: PUSH
24884: LD_INT 15
24886: PUSH
24887: LD_INT 16
24889: PUSH
24890: LD_INT 20
24892: PUSH
24893: LD_INT 21
24895: PUSH
24896: LD_INT 22
24898: PUSH
24899: LD_INT 23
24901: PUSH
24902: LD_INT 25
24904: PUSH
24905: LD_INT 26
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 101
24926: PUSH
24927: LD_INT 102
24929: PUSH
24930: LD_INT 103
24932: PUSH
24933: LD_INT 105
24935: PUSH
24936: LD_INT 106
24938: PUSH
24939: LD_INT 108
24941: PUSH
24942: LD_INT 112
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: ST_TO_ADDR
24958: GO 27217
24960: LD_INT 8
24962: DOUBLE
24963: EQUAL
24964: IFTRUE 24968
24966: GO 25096
24968: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
24969: LD_ADDR_VAR 0 1
24973: PUSH
24974: LD_INT 2
24976: PUSH
24977: LD_INT 4
24979: PUSH
24980: LD_INT 5
24982: PUSH
24983: LD_INT 6
24985: PUSH
24986: LD_INT 7
24988: PUSH
24989: LD_INT 8
24991: PUSH
24992: LD_INT 11
24994: PUSH
24995: LD_INT 12
24997: PUSH
24998: LD_INT 15
25000: PUSH
25001: LD_INT 16
25003: PUSH
25004: LD_INT 20
25006: PUSH
25007: LD_INT 21
25009: PUSH
25010: LD_INT 22
25012: PUSH
25013: LD_INT 23
25015: PUSH
25016: LD_INT 25
25018: PUSH
25019: LD_INT 26
25021: PUSH
25022: LD_INT 30
25024: PUSH
25025: LD_INT 31
25027: PUSH
25028: LD_INT 32
25030: PUSH
25031: LD_INT 36
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 101
25058: PUSH
25059: LD_INT 102
25061: PUSH
25062: LD_INT 103
25064: PUSH
25065: LD_INT 105
25067: PUSH
25068: LD_INT 106
25070: PUSH
25071: LD_INT 108
25073: PUSH
25074: LD_INT 109
25076: PUSH
25077: LD_INT 112
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: ST_TO_ADDR
25094: GO 27217
25096: LD_INT 9
25098: DOUBLE
25099: EQUAL
25100: IFTRUE 25104
25102: GO 25240
25104: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25105: LD_ADDR_VAR 0 1
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: LD_INT 4
25115: PUSH
25116: LD_INT 5
25118: PUSH
25119: LD_INT 6
25121: PUSH
25122: LD_INT 7
25124: PUSH
25125: LD_INT 8
25127: PUSH
25128: LD_INT 11
25130: PUSH
25131: LD_INT 12
25133: PUSH
25134: LD_INT 15
25136: PUSH
25137: LD_INT 16
25139: PUSH
25140: LD_INT 20
25142: PUSH
25143: LD_INT 21
25145: PUSH
25146: LD_INT 22
25148: PUSH
25149: LD_INT 23
25151: PUSH
25152: LD_INT 25
25154: PUSH
25155: LD_INT 26
25157: PUSH
25158: LD_INT 28
25160: PUSH
25161: LD_INT 30
25163: PUSH
25164: LD_INT 31
25166: PUSH
25167: LD_INT 32
25169: PUSH
25170: LD_INT 36
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 101
25198: PUSH
25199: LD_INT 102
25201: PUSH
25202: LD_INT 103
25204: PUSH
25205: LD_INT 105
25207: PUSH
25208: LD_INT 106
25210: PUSH
25211: LD_INT 108
25213: PUSH
25214: LD_INT 109
25216: PUSH
25217: LD_INT 112
25219: PUSH
25220: LD_INT 114
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: ST_TO_ADDR
25238: GO 27217
25240: LD_INT 10
25242: DOUBLE
25243: EQUAL
25244: IFTRUE 25248
25246: GO 25432
25248: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25249: LD_ADDR_VAR 0 1
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: LD_INT 4
25259: PUSH
25260: LD_INT 5
25262: PUSH
25263: LD_INT 6
25265: PUSH
25266: LD_INT 7
25268: PUSH
25269: LD_INT 8
25271: PUSH
25272: LD_INT 9
25274: PUSH
25275: LD_INT 10
25277: PUSH
25278: LD_INT 11
25280: PUSH
25281: LD_INT 12
25283: PUSH
25284: LD_INT 13
25286: PUSH
25287: LD_INT 14
25289: PUSH
25290: LD_INT 15
25292: PUSH
25293: LD_INT 16
25295: PUSH
25296: LD_INT 17
25298: PUSH
25299: LD_INT 18
25301: PUSH
25302: LD_INT 19
25304: PUSH
25305: LD_INT 20
25307: PUSH
25308: LD_INT 21
25310: PUSH
25311: LD_INT 22
25313: PUSH
25314: LD_INT 23
25316: PUSH
25317: LD_INT 24
25319: PUSH
25320: LD_INT 25
25322: PUSH
25323: LD_INT 26
25325: PUSH
25326: LD_INT 28
25328: PUSH
25329: LD_INT 30
25331: PUSH
25332: LD_INT 31
25334: PUSH
25335: LD_INT 32
25337: PUSH
25338: LD_INT 36
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 101
25374: PUSH
25375: LD_INT 102
25377: PUSH
25378: LD_INT 103
25380: PUSH
25381: LD_INT 104
25383: PUSH
25384: LD_INT 105
25386: PUSH
25387: LD_INT 106
25389: PUSH
25390: LD_INT 107
25392: PUSH
25393: LD_INT 108
25395: PUSH
25396: LD_INT 109
25398: PUSH
25399: LD_INT 110
25401: PUSH
25402: LD_INT 111
25404: PUSH
25405: LD_INT 112
25407: PUSH
25408: LD_INT 114
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: ST_TO_ADDR
25430: GO 27217
25432: LD_INT 11
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25632
25440: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
25441: LD_ADDR_VAR 0 1
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: LD_INT 3
25451: PUSH
25452: LD_INT 4
25454: PUSH
25455: LD_INT 5
25457: PUSH
25458: LD_INT 6
25460: PUSH
25461: LD_INT 7
25463: PUSH
25464: LD_INT 8
25466: PUSH
25467: LD_INT 9
25469: PUSH
25470: LD_INT 10
25472: PUSH
25473: LD_INT 11
25475: PUSH
25476: LD_INT 12
25478: PUSH
25479: LD_INT 13
25481: PUSH
25482: LD_INT 14
25484: PUSH
25485: LD_INT 15
25487: PUSH
25488: LD_INT 16
25490: PUSH
25491: LD_INT 17
25493: PUSH
25494: LD_INT 18
25496: PUSH
25497: LD_INT 19
25499: PUSH
25500: LD_INT 20
25502: PUSH
25503: LD_INT 21
25505: PUSH
25506: LD_INT 22
25508: PUSH
25509: LD_INT 23
25511: PUSH
25512: LD_INT 24
25514: PUSH
25515: LD_INT 25
25517: PUSH
25518: LD_INT 26
25520: PUSH
25521: LD_INT 28
25523: PUSH
25524: LD_INT 30
25526: PUSH
25527: LD_INT 31
25529: PUSH
25530: LD_INT 32
25532: PUSH
25533: LD_INT 34
25535: PUSH
25536: LD_INT 36
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 101
25574: PUSH
25575: LD_INT 102
25577: PUSH
25578: LD_INT 103
25580: PUSH
25581: LD_INT 104
25583: PUSH
25584: LD_INT 105
25586: PUSH
25587: LD_INT 106
25589: PUSH
25590: LD_INT 107
25592: PUSH
25593: LD_INT 108
25595: PUSH
25596: LD_INT 109
25598: PUSH
25599: LD_INT 110
25601: PUSH
25602: LD_INT 111
25604: PUSH
25605: LD_INT 112
25607: PUSH
25608: LD_INT 114
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: ST_TO_ADDR
25630: GO 27217
25632: LD_INT 12
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25640
25638: GO 25848
25640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
25641: LD_ADDR_VAR 0 1
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 3
25654: PUSH
25655: LD_INT 4
25657: PUSH
25658: LD_INT 5
25660: PUSH
25661: LD_INT 6
25663: PUSH
25664: LD_INT 7
25666: PUSH
25667: LD_INT 8
25669: PUSH
25670: LD_INT 9
25672: PUSH
25673: LD_INT 10
25675: PUSH
25676: LD_INT 11
25678: PUSH
25679: LD_INT 12
25681: PUSH
25682: LD_INT 13
25684: PUSH
25685: LD_INT 14
25687: PUSH
25688: LD_INT 15
25690: PUSH
25691: LD_INT 16
25693: PUSH
25694: LD_INT 17
25696: PUSH
25697: LD_INT 18
25699: PUSH
25700: LD_INT 19
25702: PUSH
25703: LD_INT 20
25705: PUSH
25706: LD_INT 21
25708: PUSH
25709: LD_INT 22
25711: PUSH
25712: LD_INT 23
25714: PUSH
25715: LD_INT 24
25717: PUSH
25718: LD_INT 25
25720: PUSH
25721: LD_INT 26
25723: PUSH
25724: LD_INT 27
25726: PUSH
25727: LD_INT 28
25729: PUSH
25730: LD_INT 30
25732: PUSH
25733: LD_INT 31
25735: PUSH
25736: LD_INT 32
25738: PUSH
25739: LD_INT 33
25741: PUSH
25742: LD_INT 34
25744: PUSH
25745: LD_INT 36
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 101
25786: PUSH
25787: LD_INT 102
25789: PUSH
25790: LD_INT 103
25792: PUSH
25793: LD_INT 104
25795: PUSH
25796: LD_INT 105
25798: PUSH
25799: LD_INT 106
25801: PUSH
25802: LD_INT 107
25804: PUSH
25805: LD_INT 108
25807: PUSH
25808: LD_INT 109
25810: PUSH
25811: LD_INT 110
25813: PUSH
25814: LD_INT 111
25816: PUSH
25817: LD_INT 112
25819: PUSH
25820: LD_INT 113
25822: PUSH
25823: LD_INT 114
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: ST_TO_ADDR
25846: GO 27217
25848: LD_INT 13
25850: DOUBLE
25851: EQUAL
25852: IFTRUE 25856
25854: GO 26052
25856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
25857: LD_ADDR_VAR 0 1
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: LD_INT 4
25873: PUSH
25874: LD_INT 5
25876: PUSH
25877: LD_INT 8
25879: PUSH
25880: LD_INT 9
25882: PUSH
25883: LD_INT 10
25885: PUSH
25886: LD_INT 11
25888: PUSH
25889: LD_INT 12
25891: PUSH
25892: LD_INT 14
25894: PUSH
25895: LD_INT 15
25897: PUSH
25898: LD_INT 16
25900: PUSH
25901: LD_INT 17
25903: PUSH
25904: LD_INT 18
25906: PUSH
25907: LD_INT 19
25909: PUSH
25910: LD_INT 20
25912: PUSH
25913: LD_INT 21
25915: PUSH
25916: LD_INT 22
25918: PUSH
25919: LD_INT 23
25921: PUSH
25922: LD_INT 24
25924: PUSH
25925: LD_INT 25
25927: PUSH
25928: LD_INT 26
25930: PUSH
25931: LD_INT 27
25933: PUSH
25934: LD_INT 28
25936: PUSH
25937: LD_INT 30
25939: PUSH
25940: LD_INT 31
25942: PUSH
25943: LD_INT 32
25945: PUSH
25946: LD_INT 33
25948: PUSH
25949: LD_INT 34
25951: PUSH
25952: LD_INT 36
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 101
25990: PUSH
25991: LD_INT 102
25993: PUSH
25994: LD_INT 103
25996: PUSH
25997: LD_INT 104
25999: PUSH
26000: LD_INT 105
26002: PUSH
26003: LD_INT 106
26005: PUSH
26006: LD_INT 107
26008: PUSH
26009: LD_INT 108
26011: PUSH
26012: LD_INT 109
26014: PUSH
26015: LD_INT 110
26017: PUSH
26018: LD_INT 111
26020: PUSH
26021: LD_INT 112
26023: PUSH
26024: LD_INT 113
26026: PUSH
26027: LD_INT 114
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: ST_TO_ADDR
26050: GO 27217
26052: LD_INT 14
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26272
26060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26061: LD_ADDR_VAR 0 1
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 4
26077: PUSH
26078: LD_INT 5
26080: PUSH
26081: LD_INT 6
26083: PUSH
26084: LD_INT 7
26086: PUSH
26087: LD_INT 8
26089: PUSH
26090: LD_INT 9
26092: PUSH
26093: LD_INT 10
26095: PUSH
26096: LD_INT 11
26098: PUSH
26099: LD_INT 12
26101: PUSH
26102: LD_INT 13
26104: PUSH
26105: LD_INT 14
26107: PUSH
26108: LD_INT 15
26110: PUSH
26111: LD_INT 16
26113: PUSH
26114: LD_INT 17
26116: PUSH
26117: LD_INT 18
26119: PUSH
26120: LD_INT 19
26122: PUSH
26123: LD_INT 20
26125: PUSH
26126: LD_INT 21
26128: PUSH
26129: LD_INT 22
26131: PUSH
26132: LD_INT 23
26134: PUSH
26135: LD_INT 24
26137: PUSH
26138: LD_INT 25
26140: PUSH
26141: LD_INT 26
26143: PUSH
26144: LD_INT 27
26146: PUSH
26147: LD_INT 28
26149: PUSH
26150: LD_INT 29
26152: PUSH
26153: LD_INT 30
26155: PUSH
26156: LD_INT 31
26158: PUSH
26159: LD_INT 32
26161: PUSH
26162: LD_INT 33
26164: PUSH
26165: LD_INT 34
26167: PUSH
26168: LD_INT 36
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 101
26210: PUSH
26211: LD_INT 102
26213: PUSH
26214: LD_INT 103
26216: PUSH
26217: LD_INT 104
26219: PUSH
26220: LD_INT 105
26222: PUSH
26223: LD_INT 106
26225: PUSH
26226: LD_INT 107
26228: PUSH
26229: LD_INT 108
26231: PUSH
26232: LD_INT 109
26234: PUSH
26235: LD_INT 110
26237: PUSH
26238: LD_INT 111
26240: PUSH
26241: LD_INT 112
26243: PUSH
26244: LD_INT 113
26246: PUSH
26247: LD_INT 114
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: ST_TO_ADDR
26270: GO 27217
26272: LD_INT 15
26274: DOUBLE
26275: EQUAL
26276: IFTRUE 26280
26278: GO 26492
26280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26281: LD_ADDR_VAR 0 1
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: LD_INT 3
26294: PUSH
26295: LD_INT 4
26297: PUSH
26298: LD_INT 5
26300: PUSH
26301: LD_INT 6
26303: PUSH
26304: LD_INT 7
26306: PUSH
26307: LD_INT 8
26309: PUSH
26310: LD_INT 9
26312: PUSH
26313: LD_INT 10
26315: PUSH
26316: LD_INT 11
26318: PUSH
26319: LD_INT 12
26321: PUSH
26322: LD_INT 13
26324: PUSH
26325: LD_INT 14
26327: PUSH
26328: LD_INT 15
26330: PUSH
26331: LD_INT 16
26333: PUSH
26334: LD_INT 17
26336: PUSH
26337: LD_INT 18
26339: PUSH
26340: LD_INT 19
26342: PUSH
26343: LD_INT 20
26345: PUSH
26346: LD_INT 21
26348: PUSH
26349: LD_INT 22
26351: PUSH
26352: LD_INT 23
26354: PUSH
26355: LD_INT 24
26357: PUSH
26358: LD_INT 25
26360: PUSH
26361: LD_INT 26
26363: PUSH
26364: LD_INT 27
26366: PUSH
26367: LD_INT 28
26369: PUSH
26370: LD_INT 29
26372: PUSH
26373: LD_INT 30
26375: PUSH
26376: LD_INT 31
26378: PUSH
26379: LD_INT 32
26381: PUSH
26382: LD_INT 33
26384: PUSH
26385: LD_INT 34
26387: PUSH
26388: LD_INT 36
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 101
26430: PUSH
26431: LD_INT 102
26433: PUSH
26434: LD_INT 103
26436: PUSH
26437: LD_INT 104
26439: PUSH
26440: LD_INT 105
26442: PUSH
26443: LD_INT 106
26445: PUSH
26446: LD_INT 107
26448: PUSH
26449: LD_INT 108
26451: PUSH
26452: LD_INT 109
26454: PUSH
26455: LD_INT 110
26457: PUSH
26458: LD_INT 111
26460: PUSH
26461: LD_INT 112
26463: PUSH
26464: LD_INT 113
26466: PUSH
26467: LD_INT 114
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: ST_TO_ADDR
26490: GO 27217
26492: LD_INT 16
26494: DOUBLE
26495: EQUAL
26496: IFTRUE 26500
26498: GO 26624
26500: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
26501: LD_ADDR_VAR 0 1
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: LD_INT 4
26511: PUSH
26512: LD_INT 5
26514: PUSH
26515: LD_INT 7
26517: PUSH
26518: LD_INT 11
26520: PUSH
26521: LD_INT 12
26523: PUSH
26524: LD_INT 15
26526: PUSH
26527: LD_INT 16
26529: PUSH
26530: LD_INT 20
26532: PUSH
26533: LD_INT 21
26535: PUSH
26536: LD_INT 22
26538: PUSH
26539: LD_INT 23
26541: PUSH
26542: LD_INT 25
26544: PUSH
26545: LD_INT 26
26547: PUSH
26548: LD_INT 30
26550: PUSH
26551: LD_INT 31
26553: PUSH
26554: LD_INT 32
26556: PUSH
26557: LD_INT 33
26559: PUSH
26560: LD_INT 34
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 101
26586: PUSH
26587: LD_INT 102
26589: PUSH
26590: LD_INT 103
26592: PUSH
26593: LD_INT 106
26595: PUSH
26596: LD_INT 108
26598: PUSH
26599: LD_INT 112
26601: PUSH
26602: LD_INT 113
26604: PUSH
26605: LD_INT 114
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: ST_TO_ADDR
26622: GO 27217
26624: LD_INT 17
26626: DOUBLE
26627: EQUAL
26628: IFTRUE 26632
26630: GO 26844
26632: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
26633: LD_ADDR_VAR 0 1
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: LD_INT 3
26646: PUSH
26647: LD_INT 4
26649: PUSH
26650: LD_INT 5
26652: PUSH
26653: LD_INT 6
26655: PUSH
26656: LD_INT 7
26658: PUSH
26659: LD_INT 8
26661: PUSH
26662: LD_INT 9
26664: PUSH
26665: LD_INT 10
26667: PUSH
26668: LD_INT 11
26670: PUSH
26671: LD_INT 12
26673: PUSH
26674: LD_INT 13
26676: PUSH
26677: LD_INT 14
26679: PUSH
26680: LD_INT 15
26682: PUSH
26683: LD_INT 16
26685: PUSH
26686: LD_INT 17
26688: PUSH
26689: LD_INT 18
26691: PUSH
26692: LD_INT 19
26694: PUSH
26695: LD_INT 20
26697: PUSH
26698: LD_INT 21
26700: PUSH
26701: LD_INT 22
26703: PUSH
26704: LD_INT 23
26706: PUSH
26707: LD_INT 24
26709: PUSH
26710: LD_INT 25
26712: PUSH
26713: LD_INT 26
26715: PUSH
26716: LD_INT 27
26718: PUSH
26719: LD_INT 28
26721: PUSH
26722: LD_INT 29
26724: PUSH
26725: LD_INT 30
26727: PUSH
26728: LD_INT 31
26730: PUSH
26731: LD_INT 32
26733: PUSH
26734: LD_INT 33
26736: PUSH
26737: LD_INT 34
26739: PUSH
26740: LD_INT 36
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 101
26782: PUSH
26783: LD_INT 102
26785: PUSH
26786: LD_INT 103
26788: PUSH
26789: LD_INT 104
26791: PUSH
26792: LD_INT 105
26794: PUSH
26795: LD_INT 106
26797: PUSH
26798: LD_INT 107
26800: PUSH
26801: LD_INT 108
26803: PUSH
26804: LD_INT 109
26806: PUSH
26807: LD_INT 110
26809: PUSH
26810: LD_INT 111
26812: PUSH
26813: LD_INT 112
26815: PUSH
26816: LD_INT 113
26818: PUSH
26819: LD_INT 114
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: ST_TO_ADDR
26842: GO 27217
26844: LD_INT 18
26846: DOUBLE
26847: EQUAL
26848: IFTRUE 26852
26850: GO 26988
26852: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
26853: LD_ADDR_VAR 0 1
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: LD_INT 4
26863: PUSH
26864: LD_INT 5
26866: PUSH
26867: LD_INT 7
26869: PUSH
26870: LD_INT 11
26872: PUSH
26873: LD_INT 12
26875: PUSH
26876: LD_INT 15
26878: PUSH
26879: LD_INT 16
26881: PUSH
26882: LD_INT 20
26884: PUSH
26885: LD_INT 21
26887: PUSH
26888: LD_INT 22
26890: PUSH
26891: LD_INT 23
26893: PUSH
26894: LD_INT 25
26896: PUSH
26897: LD_INT 26
26899: PUSH
26900: LD_INT 30
26902: PUSH
26903: LD_INT 31
26905: PUSH
26906: LD_INT 32
26908: PUSH
26909: LD_INT 33
26911: PUSH
26912: LD_INT 34
26914: PUSH
26915: LD_INT 35
26917: PUSH
26918: LD_INT 36
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 101
26946: PUSH
26947: LD_INT 102
26949: PUSH
26950: LD_INT 103
26952: PUSH
26953: LD_INT 106
26955: PUSH
26956: LD_INT 108
26958: PUSH
26959: LD_INT 112
26961: PUSH
26962: LD_INT 113
26964: PUSH
26965: LD_INT 114
26967: PUSH
26968: LD_INT 115
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: ST_TO_ADDR
26986: GO 27217
26988: LD_INT 19
26990: DOUBLE
26991: EQUAL
26992: IFTRUE 26996
26994: GO 27216
26996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
26997: LD_ADDR_VAR 0 1
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: LD_INT 4
27013: PUSH
27014: LD_INT 5
27016: PUSH
27017: LD_INT 6
27019: PUSH
27020: LD_INT 7
27022: PUSH
27023: LD_INT 8
27025: PUSH
27026: LD_INT 9
27028: PUSH
27029: LD_INT 10
27031: PUSH
27032: LD_INT 11
27034: PUSH
27035: LD_INT 12
27037: PUSH
27038: LD_INT 13
27040: PUSH
27041: LD_INT 14
27043: PUSH
27044: LD_INT 15
27046: PUSH
27047: LD_INT 16
27049: PUSH
27050: LD_INT 17
27052: PUSH
27053: LD_INT 18
27055: PUSH
27056: LD_INT 19
27058: PUSH
27059: LD_INT 20
27061: PUSH
27062: LD_INT 21
27064: PUSH
27065: LD_INT 22
27067: PUSH
27068: LD_INT 23
27070: PUSH
27071: LD_INT 24
27073: PUSH
27074: LD_INT 25
27076: PUSH
27077: LD_INT 26
27079: PUSH
27080: LD_INT 27
27082: PUSH
27083: LD_INT 28
27085: PUSH
27086: LD_INT 29
27088: PUSH
27089: LD_INT 30
27091: PUSH
27092: LD_INT 31
27094: PUSH
27095: LD_INT 32
27097: PUSH
27098: LD_INT 33
27100: PUSH
27101: LD_INT 34
27103: PUSH
27104: LD_INT 35
27106: PUSH
27107: LD_INT 36
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 101
27150: PUSH
27151: LD_INT 102
27153: PUSH
27154: LD_INT 103
27156: PUSH
27157: LD_INT 104
27159: PUSH
27160: LD_INT 105
27162: PUSH
27163: LD_INT 106
27165: PUSH
27166: LD_INT 107
27168: PUSH
27169: LD_INT 108
27171: PUSH
27172: LD_INT 109
27174: PUSH
27175: LD_INT 110
27177: PUSH
27178: LD_INT 111
27180: PUSH
27181: LD_INT 112
27183: PUSH
27184: LD_INT 113
27186: PUSH
27187: LD_INT 114
27189: PUSH
27190: LD_INT 115
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: ST_TO_ADDR
27214: GO 27217
27216: POP
// end else
27217: GO 27436
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27219: LD_ADDR_VAR 0 1
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: LD_INT 3
27232: PUSH
27233: LD_INT 4
27235: PUSH
27236: LD_INT 5
27238: PUSH
27239: LD_INT 6
27241: PUSH
27242: LD_INT 7
27244: PUSH
27245: LD_INT 8
27247: PUSH
27248: LD_INT 9
27250: PUSH
27251: LD_INT 10
27253: PUSH
27254: LD_INT 11
27256: PUSH
27257: LD_INT 12
27259: PUSH
27260: LD_INT 13
27262: PUSH
27263: LD_INT 14
27265: PUSH
27266: LD_INT 15
27268: PUSH
27269: LD_INT 16
27271: PUSH
27272: LD_INT 17
27274: PUSH
27275: LD_INT 18
27277: PUSH
27278: LD_INT 19
27280: PUSH
27281: LD_INT 20
27283: PUSH
27284: LD_INT 21
27286: PUSH
27287: LD_INT 22
27289: PUSH
27290: LD_INT 23
27292: PUSH
27293: LD_INT 24
27295: PUSH
27296: LD_INT 25
27298: PUSH
27299: LD_INT 26
27301: PUSH
27302: LD_INT 27
27304: PUSH
27305: LD_INT 28
27307: PUSH
27308: LD_INT 29
27310: PUSH
27311: LD_INT 30
27313: PUSH
27314: LD_INT 31
27316: PUSH
27317: LD_INT 32
27319: PUSH
27320: LD_INT 33
27322: PUSH
27323: LD_INT 34
27325: PUSH
27326: LD_INT 35
27328: PUSH
27329: LD_INT 36
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 101
27372: PUSH
27373: LD_INT 102
27375: PUSH
27376: LD_INT 103
27378: PUSH
27379: LD_INT 104
27381: PUSH
27382: LD_INT 105
27384: PUSH
27385: LD_INT 106
27387: PUSH
27388: LD_INT 107
27390: PUSH
27391: LD_INT 108
27393: PUSH
27394: LD_INT 109
27396: PUSH
27397: LD_INT 110
27399: PUSH
27400: LD_INT 111
27402: PUSH
27403: LD_INT 112
27405: PUSH
27406: LD_INT 113
27408: PUSH
27409: LD_INT 114
27411: PUSH
27412: LD_INT 115
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: ST_TO_ADDR
// if result then
27436: LD_VAR 0 1
27440: IFFALSE 27729
// begin normal :=  ;
27442: LD_ADDR_VAR 0 3
27446: PUSH
27447: LD_STRING 
27449: ST_TO_ADDR
// hardcore :=  ;
27450: LD_ADDR_VAR 0 4
27454: PUSH
27455: LD_STRING 
27457: ST_TO_ADDR
// for i = 1 to normalCounter do
27458: LD_ADDR_VAR 0 5
27462: PUSH
27463: DOUBLE
27464: LD_INT 1
27466: DEC
27467: ST_TO_ADDR
27468: LD_EXP 71
27472: PUSH
27473: FOR_TO
27474: IFFALSE 27575
// begin tmp := 0 ;
27476: LD_ADDR_VAR 0 2
27480: PUSH
27481: LD_STRING 0
27483: ST_TO_ADDR
// if result [ 1 ] then
27484: LD_VAR 0 1
27488: PUSH
27489: LD_INT 1
27491: ARRAY
27492: IFFALSE 27557
// if result [ 1 ] [ 1 ] = i then
27494: LD_VAR 0 1
27498: PUSH
27499: LD_INT 1
27501: ARRAY
27502: PUSH
27503: LD_INT 1
27505: ARRAY
27506: PUSH
27507: LD_VAR 0 5
27511: EQUAL
27512: IFFALSE 27557
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27514: LD_ADDR_VAR 0 1
27518: PUSH
27519: LD_VAR 0 1
27523: PPUSH
27524: LD_INT 1
27526: PPUSH
27527: LD_VAR 0 1
27531: PUSH
27532: LD_INT 1
27534: ARRAY
27535: PPUSH
27536: LD_INT 1
27538: PPUSH
27539: CALL_OW 3
27543: PPUSH
27544: CALL_OW 1
27548: ST_TO_ADDR
// tmp := 1 ;
27549: LD_ADDR_VAR 0 2
27553: PUSH
27554: LD_STRING 1
27556: ST_TO_ADDR
// end ; normal := normal & tmp ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 3
27566: PUSH
27567: LD_VAR 0 2
27571: STR
27572: ST_TO_ADDR
// end ;
27573: GO 27473
27575: POP
27576: POP
// for i = 1 to hardcoreCounter do
27577: LD_ADDR_VAR 0 5
27581: PUSH
27582: DOUBLE
27583: LD_INT 1
27585: DEC
27586: ST_TO_ADDR
27587: LD_EXP 72
27591: PUSH
27592: FOR_TO
27593: IFFALSE 27698
// begin tmp := 0 ;
27595: LD_ADDR_VAR 0 2
27599: PUSH
27600: LD_STRING 0
27602: ST_TO_ADDR
// if result [ 2 ] then
27603: LD_VAR 0 1
27607: PUSH
27608: LD_INT 2
27610: ARRAY
27611: IFFALSE 27680
// if result [ 2 ] [ 1 ] = 100 + i then
27613: LD_VAR 0 1
27617: PUSH
27618: LD_INT 2
27620: ARRAY
27621: PUSH
27622: LD_INT 1
27624: ARRAY
27625: PUSH
27626: LD_INT 100
27628: PUSH
27629: LD_VAR 0 5
27633: PLUS
27634: EQUAL
27635: IFFALSE 27680
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27637: LD_ADDR_VAR 0 1
27641: PUSH
27642: LD_VAR 0 1
27646: PPUSH
27647: LD_INT 2
27649: PPUSH
27650: LD_VAR 0 1
27654: PUSH
27655: LD_INT 2
27657: ARRAY
27658: PPUSH
27659: LD_INT 1
27661: PPUSH
27662: CALL_OW 3
27666: PPUSH
27667: CALL_OW 1
27671: ST_TO_ADDR
// tmp := 1 ;
27672: LD_ADDR_VAR 0 2
27676: PUSH
27677: LD_STRING 1
27679: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27680: LD_ADDR_VAR 0 4
27684: PUSH
27685: LD_VAR 0 4
27689: PUSH
27690: LD_VAR 0 2
27694: STR
27695: ST_TO_ADDR
// end ;
27696: GO 27592
27698: POP
27699: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
27700: LD_STRING getStreamItemsFromMission("
27702: PUSH
27703: LD_VAR 0 3
27707: STR
27708: PUSH
27709: LD_STRING ","
27711: STR
27712: PUSH
27713: LD_VAR 0 4
27717: STR
27718: PUSH
27719: LD_STRING ")
27721: STR
27722: PPUSH
27723: CALL_OW 559
// end else
27727: GO 27736
// ToLua ( getStreamItemsFromMission("","") ) ;
27729: LD_STRING getStreamItemsFromMission("","")
27731: PPUSH
27732: CALL_OW 559
// end ;
27736: LD_VAR 0 1
27740: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27741: LD_EXP 70
27745: PUSH
27746: LD_EXP 75
27750: AND
27751: IFFALSE 27875
27753: GO 27755
27755: DISABLE
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
// begin enable ;
27760: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27761: LD_ADDR_VAR 0 2
27765: PUSH
27766: LD_INT 22
27768: PUSH
27769: LD_OWVAR 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: LD_INT 34
27783: PUSH
27784: LD_INT 7
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 34
27793: PUSH
27794: LD_INT 45
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 34
27803: PUSH
27804: LD_INT 28
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 34
27813: PUSH
27814: LD_INT 47
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PPUSH
27832: CALL_OW 69
27836: ST_TO_ADDR
// if not tmp then
27837: LD_VAR 0 2
27841: NOT
27842: IFFALSE 27846
// exit ;
27844: GO 27875
// for i in tmp do
27846: LD_ADDR_VAR 0 1
27850: PUSH
27851: LD_VAR 0 2
27855: PUSH
27856: FOR_IN
27857: IFFALSE 27873
// begin SetLives ( i , 0 ) ;
27859: LD_VAR 0 1
27863: PPUSH
27864: LD_INT 0
27866: PPUSH
27867: CALL_OW 234
// end ;
27871: GO 27856
27873: POP
27874: POP
// end ;
27875: PPOPN 2
27877: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27878: LD_EXP 70
27882: PUSH
27883: LD_EXP 76
27887: AND
27888: IFFALSE 27972
27890: GO 27892
27892: DISABLE
27893: LD_INT 0
27895: PPUSH
27896: PPUSH
// begin enable ;
27897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27898: LD_ADDR_VAR 0 2
27902: PUSH
27903: LD_INT 22
27905: PUSH
27906: LD_OWVAR 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 32
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PPUSH
27929: CALL_OW 69
27933: ST_TO_ADDR
// if not tmp then
27934: LD_VAR 0 2
27938: NOT
27939: IFFALSE 27943
// exit ;
27941: GO 27972
// for i in tmp do
27943: LD_ADDR_VAR 0 1
27947: PUSH
27948: LD_VAR 0 2
27952: PUSH
27953: FOR_IN
27954: IFFALSE 27970
// begin SetLives ( i , 0 ) ;
27956: LD_VAR 0 1
27960: PPUSH
27961: LD_INT 0
27963: PPUSH
27964: CALL_OW 234
// end ;
27968: GO 27953
27970: POP
27971: POP
// end ;
27972: PPOPN 2
27974: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27975: LD_EXP 70
27979: PUSH
27980: LD_EXP 73
27984: AND
27985: IFFALSE 28078
27987: GO 27989
27989: DISABLE
27990: LD_INT 0
27992: PPUSH
// begin enable ;
27993: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27994: LD_ADDR_VAR 0 1
27998: PUSH
27999: LD_INT 22
28001: PUSH
28002: LD_OWVAR 2
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: PUSH
28014: LD_INT 25
28016: PUSH
28017: LD_INT 5
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 25
28026: PUSH
28027: LD_INT 9
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 25
28036: PUSH
28037: LD_INT 8
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PPUSH
28054: CALL_OW 69
28058: PUSH
28059: FOR_IN
28060: IFFALSE 28076
// begin SetClass ( i , 1 ) ;
28062: LD_VAR 0 1
28066: PPUSH
28067: LD_INT 1
28069: PPUSH
28070: CALL_OW 336
// end ;
28074: GO 28059
28076: POP
28077: POP
// end ;
28078: PPOPN 1
28080: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28081: LD_EXP 70
28085: PUSH
28086: LD_EXP 74
28090: AND
28091: PUSH
28092: LD_OWVAR 65
28096: PUSH
28097: LD_INT 7
28099: LESS
28100: AND
28101: IFFALSE 28115
28103: GO 28105
28105: DISABLE
// begin enable ;
28106: ENABLE
// game_speed := 7 ;
28107: LD_ADDR_OWVAR 65
28111: PUSH
28112: LD_INT 7
28114: ST_TO_ADDR
// end ;
28115: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28116: LD_EXP 70
28120: PUSH
28121: LD_EXP 77
28125: AND
28126: IFFALSE 28328
28128: GO 28130
28130: DISABLE
28131: LD_INT 0
28133: PPUSH
28134: PPUSH
28135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 81
28143: PUSH
28144: LD_OWVAR 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 21
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PPUSH
28167: CALL_OW 69
28171: ST_TO_ADDR
// if not tmp then
28172: LD_VAR 0 3
28176: NOT
28177: IFFALSE 28181
// exit ;
28179: GO 28328
// if tmp > 5 then
28181: LD_VAR 0 3
28185: PUSH
28186: LD_INT 5
28188: GREATER
28189: IFFALSE 28201
// k := 5 else
28191: LD_ADDR_VAR 0 2
28195: PUSH
28196: LD_INT 5
28198: ST_TO_ADDR
28199: GO 28211
// k := tmp ;
28201: LD_ADDR_VAR 0 2
28205: PUSH
28206: LD_VAR 0 3
28210: ST_TO_ADDR
// for i := 1 to k do
28211: LD_ADDR_VAR 0 1
28215: PUSH
28216: DOUBLE
28217: LD_INT 1
28219: DEC
28220: ST_TO_ADDR
28221: LD_VAR 0 2
28225: PUSH
28226: FOR_TO
28227: IFFALSE 28326
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28229: LD_VAR 0 3
28233: PUSH
28234: LD_VAR 0 1
28238: ARRAY
28239: PPUSH
28240: LD_VAR 0 1
28244: PUSH
28245: LD_INT 4
28247: MOD
28248: PUSH
28249: LD_INT 1
28251: PLUS
28252: PPUSH
28253: CALL_OW 259
28257: PUSH
28258: LD_INT 10
28260: LESS
28261: IFFALSE 28324
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28263: LD_VAR 0 3
28267: PUSH
28268: LD_VAR 0 1
28272: ARRAY
28273: PPUSH
28274: LD_VAR 0 1
28278: PUSH
28279: LD_INT 4
28281: MOD
28282: PUSH
28283: LD_INT 1
28285: PLUS
28286: PPUSH
28287: LD_VAR 0 3
28291: PUSH
28292: LD_VAR 0 1
28296: ARRAY
28297: PPUSH
28298: LD_VAR 0 1
28302: PUSH
28303: LD_INT 4
28305: MOD
28306: PUSH
28307: LD_INT 1
28309: PLUS
28310: PPUSH
28311: CALL_OW 259
28315: PUSH
28316: LD_INT 1
28318: PLUS
28319: PPUSH
28320: CALL_OW 237
28324: GO 28226
28326: POP
28327: POP
// end ;
28328: PPOPN 3
28330: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28331: LD_EXP 70
28335: PUSH
28336: LD_EXP 78
28340: AND
28341: IFFALSE 28361
28343: GO 28345
28345: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28346: LD_INT 4
28348: PPUSH
28349: LD_OWVAR 2
28353: PPUSH
28354: LD_INT 0
28356: PPUSH
28357: CALL_OW 324
28361: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28362: LD_EXP 70
28366: PUSH
28367: LD_EXP 107
28371: AND
28372: IFFALSE 28392
28374: GO 28376
28376: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28377: LD_INT 19
28379: PPUSH
28380: LD_OWVAR 2
28384: PPUSH
28385: LD_INT 0
28387: PPUSH
28388: CALL_OW 324
28392: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28393: LD_EXP 70
28397: PUSH
28398: LD_EXP 79
28402: AND
28403: IFFALSE 28505
28405: GO 28407
28407: DISABLE
28408: LD_INT 0
28410: PPUSH
28411: PPUSH
// begin enable ;
28412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28413: LD_ADDR_VAR 0 2
28417: PUSH
28418: LD_INT 22
28420: PUSH
28421: LD_OWVAR 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: LD_INT 34
28435: PUSH
28436: LD_INT 11
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 34
28445: PUSH
28446: LD_INT 30
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PPUSH
28462: CALL_OW 69
28466: ST_TO_ADDR
// if not tmp then
28467: LD_VAR 0 2
28471: NOT
28472: IFFALSE 28476
// exit ;
28474: GO 28505
// for i in tmp do
28476: LD_ADDR_VAR 0 1
28480: PUSH
28481: LD_VAR 0 2
28485: PUSH
28486: FOR_IN
28487: IFFALSE 28503
// begin SetLives ( i , 0 ) ;
28489: LD_VAR 0 1
28493: PPUSH
28494: LD_INT 0
28496: PPUSH
28497: CALL_OW 234
// end ;
28501: GO 28486
28503: POP
28504: POP
// end ;
28505: PPOPN 2
28507: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28508: LD_EXP 70
28512: PUSH
28513: LD_EXP 80
28517: AND
28518: IFFALSE 28538
28520: GO 28522
28522: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28523: LD_INT 32
28525: PPUSH
28526: LD_OWVAR 2
28530: PPUSH
28531: LD_INT 0
28533: PPUSH
28534: CALL_OW 324
28538: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28539: LD_EXP 70
28543: PUSH
28544: LD_EXP 81
28548: AND
28549: IFFALSE 28730
28551: GO 28553
28553: DISABLE
28554: LD_INT 0
28556: PPUSH
28557: PPUSH
28558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28559: LD_ADDR_VAR 0 2
28563: PUSH
28564: LD_INT 22
28566: PUSH
28567: LD_OWVAR 2
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 33
28578: PUSH
28579: LD_INT 3
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PPUSH
28590: CALL_OW 69
28594: ST_TO_ADDR
// if not tmp then
28595: LD_VAR 0 2
28599: NOT
28600: IFFALSE 28604
// exit ;
28602: GO 28730
// side := 0 ;
28604: LD_ADDR_VAR 0 3
28608: PUSH
28609: LD_INT 0
28611: ST_TO_ADDR
// for i := 1 to 8 do
28612: LD_ADDR_VAR 0 1
28616: PUSH
28617: DOUBLE
28618: LD_INT 1
28620: DEC
28621: ST_TO_ADDR
28622: LD_INT 8
28624: PUSH
28625: FOR_TO
28626: IFFALSE 28674
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28628: LD_OWVAR 2
28632: PUSH
28633: LD_VAR 0 1
28637: NONEQUAL
28638: PUSH
28639: LD_OWVAR 2
28643: PPUSH
28644: LD_VAR 0 1
28648: PPUSH
28649: CALL_OW 81
28653: PUSH
28654: LD_INT 2
28656: EQUAL
28657: AND
28658: IFFALSE 28672
// begin side := i ;
28660: LD_ADDR_VAR 0 3
28664: PUSH
28665: LD_VAR 0 1
28669: ST_TO_ADDR
// break ;
28670: GO 28674
// end ;
28672: GO 28625
28674: POP
28675: POP
// if not side then
28676: LD_VAR 0 3
28680: NOT
28681: IFFALSE 28685
// exit ;
28683: GO 28730
// for i := 1 to tmp do
28685: LD_ADDR_VAR 0 1
28689: PUSH
28690: DOUBLE
28691: LD_INT 1
28693: DEC
28694: ST_TO_ADDR
28695: LD_VAR 0 2
28699: PUSH
28700: FOR_TO
28701: IFFALSE 28728
// if Prob ( 60 ) then
28703: LD_INT 60
28705: PPUSH
28706: CALL_OW 13
28710: IFFALSE 28726
// SetSide ( i , side ) ;
28712: LD_VAR 0 1
28716: PPUSH
28717: LD_VAR 0 3
28721: PPUSH
28722: CALL_OW 235
28726: GO 28700
28728: POP
28729: POP
// end ;
28730: PPOPN 3
28732: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28733: LD_EXP 70
28737: PUSH
28738: LD_EXP 83
28742: AND
28743: IFFALSE 28862
28745: GO 28747
28747: DISABLE
28748: LD_INT 0
28750: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28751: LD_ADDR_VAR 0 1
28755: PUSH
28756: LD_INT 22
28758: PUSH
28759: LD_OWVAR 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 21
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 3
28780: PUSH
28781: LD_INT 23
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: LIST
28799: PPUSH
28800: CALL_OW 69
28804: PUSH
28805: FOR_IN
28806: IFFALSE 28860
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 257
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: LD_INT 2
28823: PUSH
28824: LD_INT 3
28826: PUSH
28827: LD_INT 4
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: IN
28836: IFFALSE 28858
// SetClass ( un , rand ( 1 , 4 ) ) ;
28838: LD_VAR 0 1
28842: PPUSH
28843: LD_INT 1
28845: PPUSH
28846: LD_INT 4
28848: PPUSH
28849: CALL_OW 12
28853: PPUSH
28854: CALL_OW 336
28858: GO 28805
28860: POP
28861: POP
// end ;
28862: PPOPN 1
28864: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28865: LD_EXP 70
28869: PUSH
28870: LD_EXP 82
28874: AND
28875: IFFALSE 28954
28877: GO 28879
28879: DISABLE
28880: LD_INT 0
28882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_INT 22
28890: PUSH
28891: LD_OWVAR 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 21
28902: PUSH
28903: LD_INT 3
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PPUSH
28914: CALL_OW 69
28918: ST_TO_ADDR
// if not tmp then
28919: LD_VAR 0 1
28923: NOT
28924: IFFALSE 28928
// exit ;
28926: GO 28954
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28928: LD_VAR 0 1
28932: PUSH
28933: LD_INT 1
28935: PPUSH
28936: LD_VAR 0 1
28940: PPUSH
28941: CALL_OW 12
28945: ARRAY
28946: PPUSH
28947: LD_INT 100
28949: PPUSH
28950: CALL_OW 234
// end ;
28954: PPOPN 1
28956: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28957: LD_EXP 70
28961: PUSH
28962: LD_EXP 84
28966: AND
28967: IFFALSE 29065
28969: GO 28971
28971: DISABLE
28972: LD_INT 0
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28975: LD_ADDR_VAR 0 1
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 21
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 1
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29065
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29020: LD_VAR 0 1
29024: PUSH
29025: LD_INT 1
29027: PPUSH
29028: LD_VAR 0 1
29032: PPUSH
29033: CALL_OW 12
29037: ARRAY
29038: PPUSH
29039: LD_INT 1
29041: PPUSH
29042: LD_INT 4
29044: PPUSH
29045: CALL_OW 12
29049: PPUSH
29050: LD_INT 3000
29052: PPUSH
29053: LD_INT 9000
29055: PPUSH
29056: CALL_OW 12
29060: PPUSH
29061: CALL_OW 492
// end ;
29065: PPOPN 1
29067: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29068: LD_EXP 70
29072: PUSH
29073: LD_EXP 85
29077: AND
29078: IFFALSE 29098
29080: GO 29082
29082: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29083: LD_INT 1
29085: PPUSH
29086: LD_OWVAR 2
29090: PPUSH
29091: LD_INT 0
29093: PPUSH
29094: CALL_OW 324
29098: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29099: LD_EXP 70
29103: PUSH
29104: LD_EXP 86
29108: AND
29109: IFFALSE 29192
29111: GO 29113
29113: DISABLE
29114: LD_INT 0
29116: PPUSH
29117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29118: LD_ADDR_VAR 0 2
29122: PUSH
29123: LD_INT 22
29125: PUSH
29126: LD_OWVAR 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 21
29137: PUSH
29138: LD_INT 3
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PPUSH
29149: CALL_OW 69
29153: ST_TO_ADDR
// if not tmp then
29154: LD_VAR 0 2
29158: NOT
29159: IFFALSE 29163
// exit ;
29161: GO 29192
// for i in tmp do
29163: LD_ADDR_VAR 0 1
29167: PUSH
29168: LD_VAR 0 2
29172: PUSH
29173: FOR_IN
29174: IFFALSE 29190
// SetBLevel ( i , 10 ) ;
29176: LD_VAR 0 1
29180: PPUSH
29181: LD_INT 10
29183: PPUSH
29184: CALL_OW 241
29188: GO 29173
29190: POP
29191: POP
// end ;
29192: PPOPN 2
29194: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29195: LD_EXP 70
29199: PUSH
29200: LD_EXP 87
29204: AND
29205: IFFALSE 29316
29207: GO 29209
29209: DISABLE
29210: LD_INT 0
29212: PPUSH
29213: PPUSH
29214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29215: LD_ADDR_VAR 0 3
29219: PUSH
29220: LD_INT 22
29222: PUSH
29223: LD_OWVAR 2
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 25
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PPUSH
29246: CALL_OW 69
29250: ST_TO_ADDR
// if not tmp then
29251: LD_VAR 0 3
29255: NOT
29256: IFFALSE 29260
// exit ;
29258: GO 29316
// un := tmp [ rand ( 1 , tmp ) ] ;
29260: LD_ADDR_VAR 0 2
29264: PUSH
29265: LD_VAR 0 3
29269: PUSH
29270: LD_INT 1
29272: PPUSH
29273: LD_VAR 0 3
29277: PPUSH
29278: CALL_OW 12
29282: ARRAY
29283: ST_TO_ADDR
// if Crawls ( un ) then
29284: LD_VAR 0 2
29288: PPUSH
29289: CALL_OW 318
29293: IFFALSE 29304
// ComWalk ( un ) ;
29295: LD_VAR 0 2
29299: PPUSH
29300: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29304: LD_VAR 0 2
29308: PPUSH
29309: LD_INT 5
29311: PPUSH
29312: CALL_OW 336
// end ;
29316: PPOPN 3
29318: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29319: LD_EXP 70
29323: PUSH
29324: LD_EXP 88
29328: AND
29329: PUSH
29330: LD_OWVAR 67
29334: PUSH
29335: LD_INT 3
29337: LESS
29338: AND
29339: IFFALSE 29358
29341: GO 29343
29343: DISABLE
// Difficulty := Difficulty + 1 ;
29344: LD_ADDR_OWVAR 67
29348: PUSH
29349: LD_OWVAR 67
29353: PUSH
29354: LD_INT 1
29356: PLUS
29357: ST_TO_ADDR
29358: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29359: LD_EXP 70
29363: PUSH
29364: LD_EXP 89
29368: AND
29369: IFFALSE 29472
29371: GO 29373
29373: DISABLE
29374: LD_INT 0
29376: PPUSH
// begin for i := 1 to 5 do
29377: LD_ADDR_VAR 0 1
29381: PUSH
29382: DOUBLE
29383: LD_INT 1
29385: DEC
29386: ST_TO_ADDR
29387: LD_INT 5
29389: PUSH
29390: FOR_TO
29391: IFFALSE 29470
// begin uc_nation := nation_nature ;
29393: LD_ADDR_OWVAR 21
29397: PUSH
29398: LD_INT 0
29400: ST_TO_ADDR
// uc_side := 0 ;
29401: LD_ADDR_OWVAR 20
29405: PUSH
29406: LD_INT 0
29408: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29409: LD_ADDR_OWVAR 29
29413: PUSH
29414: LD_INT 12
29416: PUSH
29417: LD_INT 12
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: ST_TO_ADDR
// hc_agressivity := 20 ;
29424: LD_ADDR_OWVAR 35
29428: PUSH
29429: LD_INT 20
29431: ST_TO_ADDR
// hc_class := class_tiger ;
29432: LD_ADDR_OWVAR 28
29436: PUSH
29437: LD_INT 14
29439: ST_TO_ADDR
// hc_gallery :=  ;
29440: LD_ADDR_OWVAR 33
29444: PUSH
29445: LD_STRING 
29447: ST_TO_ADDR
// hc_name :=  ;
29448: LD_ADDR_OWVAR 26
29452: PUSH
29453: LD_STRING 
29455: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29456: CALL_OW 44
29460: PPUSH
29461: LD_INT 0
29463: PPUSH
29464: CALL_OW 51
// end ;
29468: GO 29390
29470: POP
29471: POP
// end ;
29472: PPOPN 1
29474: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29475: LD_EXP 70
29479: PUSH
29480: LD_EXP 90
29484: AND
29485: IFFALSE 29494
29487: GO 29489
29489: DISABLE
// StreamSibBomb ;
29490: CALL 29495 0 0
29494: END
// export function StreamSibBomb ; var i , x , y ; begin
29495: LD_INT 0
29497: PPUSH
29498: PPUSH
29499: PPUSH
29500: PPUSH
// result := false ;
29501: LD_ADDR_VAR 0 1
29505: PUSH
29506: LD_INT 0
29508: ST_TO_ADDR
// for i := 1 to 16 do
29509: LD_ADDR_VAR 0 2
29513: PUSH
29514: DOUBLE
29515: LD_INT 1
29517: DEC
29518: ST_TO_ADDR
29519: LD_INT 16
29521: PUSH
29522: FOR_TO
29523: IFFALSE 29722
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 10
29532: PUSH
29533: LD_INT 20
29535: PUSH
29536: LD_INT 30
29538: PUSH
29539: LD_INT 40
29541: PUSH
29542: LD_INT 50
29544: PUSH
29545: LD_INT 60
29547: PUSH
29548: LD_INT 70
29550: PUSH
29551: LD_INT 80
29553: PUSH
29554: LD_INT 90
29556: PUSH
29557: LD_INT 100
29559: PUSH
29560: LD_INT 110
29562: PUSH
29563: LD_INT 120
29565: PUSH
29566: LD_INT 130
29568: PUSH
29569: LD_INT 140
29571: PUSH
29572: LD_INT 150
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: PPUSH
29595: LD_INT 15
29597: PPUSH
29598: CALL_OW 12
29602: ARRAY
29603: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29604: LD_ADDR_VAR 0 4
29608: PUSH
29609: LD_INT 10
29611: PUSH
29612: LD_INT 20
29614: PUSH
29615: LD_INT 30
29617: PUSH
29618: LD_INT 40
29620: PUSH
29621: LD_INT 50
29623: PUSH
29624: LD_INT 60
29626: PUSH
29627: LD_INT 70
29629: PUSH
29630: LD_INT 80
29632: PUSH
29633: LD_INT 90
29635: PUSH
29636: LD_INT 100
29638: PUSH
29639: LD_INT 110
29641: PUSH
29642: LD_INT 120
29644: PUSH
29645: LD_INT 130
29647: PUSH
29648: LD_INT 140
29650: PUSH
29651: LD_INT 150
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: PPUSH
29674: LD_INT 15
29676: PPUSH
29677: CALL_OW 12
29681: ARRAY
29682: ST_TO_ADDR
// if ValidHex ( x , y ) then
29683: LD_VAR 0 3
29687: PPUSH
29688: LD_VAR 0 4
29692: PPUSH
29693: CALL_OW 488
29697: IFFALSE 29720
// begin result := [ x , y ] ;
29699: LD_ADDR_VAR 0 1
29703: PUSH
29704: LD_VAR 0 3
29708: PUSH
29709: LD_VAR 0 4
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: ST_TO_ADDR
// break ;
29718: GO 29722
// end ; end ;
29720: GO 29522
29722: POP
29723: POP
// if result then
29724: LD_VAR 0 1
29728: IFFALSE 29788
// begin ToLua ( playSibBomb() ) ;
29730: LD_STRING playSibBomb()
29732: PPUSH
29733: CALL_OW 559
// wait ( 0 0$14 ) ;
29737: LD_INT 490
29739: PPUSH
29740: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29744: LD_VAR 0 1
29748: PUSH
29749: LD_INT 1
29751: ARRAY
29752: PPUSH
29753: LD_VAR 0 1
29757: PUSH
29758: LD_INT 2
29760: ARRAY
29761: PPUSH
29762: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29766: LD_VAR 0 1
29770: PUSH
29771: LD_INT 1
29773: ARRAY
29774: PPUSH
29775: LD_VAR 0 1
29779: PUSH
29780: LD_INT 2
29782: ARRAY
29783: PPUSH
29784: CALL_OW 429
// end ; end ;
29788: LD_VAR 0 1
29792: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29793: LD_EXP 70
29797: PUSH
29798: LD_EXP 92
29802: AND
29803: IFFALSE 29815
29805: GO 29807
29807: DISABLE
// YouLost (  ) ;
29808: LD_STRING 
29810: PPUSH
29811: CALL_OW 104
29815: END
// every 0 0$1 trigger StreamModeActive and sFog do
29816: LD_EXP 70
29820: PUSH
29821: LD_EXP 91
29825: AND
29826: IFFALSE 29840
29828: GO 29830
29830: DISABLE
// FogOff ( your_side ) ;
29831: LD_OWVAR 2
29835: PPUSH
29836: CALL_OW 344
29840: END
// every 0 0$1 trigger StreamModeActive and sSun do
29841: LD_EXP 70
29845: PUSH
29846: LD_EXP 93
29850: AND
29851: IFFALSE 29879
29853: GO 29855
29855: DISABLE
// begin solar_recharge_percent := 0 ;
29856: LD_ADDR_OWVAR 79
29860: PUSH
29861: LD_INT 0
29863: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29864: LD_INT 10500
29866: PPUSH
29867: CALL_OW 67
// solar_recharge_percent := 100 ;
29871: LD_ADDR_OWVAR 79
29875: PUSH
29876: LD_INT 100
29878: ST_TO_ADDR
// end ;
29879: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29880: LD_EXP 70
29884: PUSH
29885: LD_EXP 94
29889: AND
29890: IFFALSE 30129
29892: GO 29894
29894: DISABLE
29895: LD_INT 0
29897: PPUSH
29898: PPUSH
29899: PPUSH
// begin tmp := [ ] ;
29900: LD_ADDR_VAR 0 3
29904: PUSH
29905: EMPTY
29906: ST_TO_ADDR
// for i := 1 to 6 do
29907: LD_ADDR_VAR 0 1
29911: PUSH
29912: DOUBLE
29913: LD_INT 1
29915: DEC
29916: ST_TO_ADDR
29917: LD_INT 6
29919: PUSH
29920: FOR_TO
29921: IFFALSE 30026
// begin uc_nation := nation_nature ;
29923: LD_ADDR_OWVAR 21
29927: PUSH
29928: LD_INT 0
29930: ST_TO_ADDR
// uc_side := 0 ;
29931: LD_ADDR_OWVAR 20
29935: PUSH
29936: LD_INT 0
29938: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29939: LD_ADDR_OWVAR 29
29943: PUSH
29944: LD_INT 12
29946: PUSH
29947: LD_INT 12
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// hc_agressivity := 20 ;
29954: LD_ADDR_OWVAR 35
29958: PUSH
29959: LD_INT 20
29961: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29962: LD_ADDR_OWVAR 28
29966: PUSH
29967: LD_INT 17
29969: ST_TO_ADDR
// hc_gallery :=  ;
29970: LD_ADDR_OWVAR 33
29974: PUSH
29975: LD_STRING 
29977: ST_TO_ADDR
// hc_name :=  ;
29978: LD_ADDR_OWVAR 26
29982: PUSH
29983: LD_STRING 
29985: ST_TO_ADDR
// un := CreateHuman ;
29986: LD_ADDR_VAR 0 2
29990: PUSH
29991: CALL_OW 44
29995: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29996: LD_VAR 0 2
30000: PPUSH
30001: LD_INT 1
30003: PPUSH
30004: CALL_OW 51
// tmp := tmp ^ un ;
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_VAR 0 3
30017: PUSH
30018: LD_VAR 0 2
30022: ADD
30023: ST_TO_ADDR
// end ;
30024: GO 29920
30026: POP
30027: POP
// repeat wait ( 0 0$1 ) ;
30028: LD_INT 35
30030: PPUSH
30031: CALL_OW 67
// for un in tmp do
30035: LD_ADDR_VAR 0 2
30039: PUSH
30040: LD_VAR 0 3
30044: PUSH
30045: FOR_IN
30046: IFFALSE 30120
// begin if IsDead ( un ) then
30048: LD_VAR 0 2
30052: PPUSH
30053: CALL_OW 301
30057: IFFALSE 30077
// begin tmp := tmp diff un ;
30059: LD_ADDR_VAR 0 3
30063: PUSH
30064: LD_VAR 0 3
30068: PUSH
30069: LD_VAR 0 2
30073: DIFF
30074: ST_TO_ADDR
// continue ;
30075: GO 30045
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30077: LD_VAR 0 2
30081: PPUSH
30082: LD_INT 3
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 69
30103: PPUSH
30104: LD_VAR 0 2
30108: PPUSH
30109: CALL_OW 74
30113: PPUSH
30114: CALL_OW 115
// end ;
30118: GO 30045
30120: POP
30121: POP
// until not tmp ;
30122: LD_VAR 0 3
30126: NOT
30127: IFFALSE 30028
// end ;
30129: PPOPN 3
30131: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30132: LD_EXP 70
30136: PUSH
30137: LD_EXP 95
30141: AND
30142: IFFALSE 30196
30144: GO 30146
30146: DISABLE
// begin ToLua ( displayTroll(); ) ;
30147: LD_STRING displayTroll();
30149: PPUSH
30150: CALL_OW 559
// wait ( 3 3$00 ) ;
30154: LD_INT 6300
30156: PPUSH
30157: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30161: LD_STRING hideTroll();
30163: PPUSH
30164: CALL_OW 559
// wait ( 1 1$00 ) ;
30168: LD_INT 2100
30170: PPUSH
30171: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30175: LD_STRING displayTroll();
30177: PPUSH
30178: CALL_OW 559
// wait ( 1 1$00 ) ;
30182: LD_INT 2100
30184: PPUSH
30185: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30189: LD_STRING hideTroll();
30191: PPUSH
30192: CALL_OW 559
// end ;
30196: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30197: LD_EXP 70
30201: PUSH
30202: LD_EXP 96
30206: AND
30207: IFFALSE 30270
30209: GO 30211
30211: DISABLE
30212: LD_INT 0
30214: PPUSH
// begin p := 0 ;
30215: LD_ADDR_VAR 0 1
30219: PUSH
30220: LD_INT 0
30222: ST_TO_ADDR
// repeat game_speed := 1 ;
30223: LD_ADDR_OWVAR 65
30227: PUSH
30228: LD_INT 1
30230: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30231: LD_INT 35
30233: PPUSH
30234: CALL_OW 67
// p := p + 1 ;
30238: LD_ADDR_VAR 0 1
30242: PUSH
30243: LD_VAR 0 1
30247: PUSH
30248: LD_INT 1
30250: PLUS
30251: ST_TO_ADDR
// until p >= 60 ;
30252: LD_VAR 0 1
30256: PUSH
30257: LD_INT 60
30259: GREATEREQUAL
30260: IFFALSE 30223
// game_speed := 4 ;
30262: LD_ADDR_OWVAR 65
30266: PUSH
30267: LD_INT 4
30269: ST_TO_ADDR
// end ;
30270: PPOPN 1
30272: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30273: LD_EXP 70
30277: PUSH
30278: LD_EXP 97
30282: AND
30283: IFFALSE 30429
30285: GO 30287
30287: DISABLE
30288: LD_INT 0
30290: PPUSH
30291: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30292: LD_ADDR_VAR 0 1
30296: PUSH
30297: LD_INT 22
30299: PUSH
30300: LD_OWVAR 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: LD_INT 30
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 30
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 69
30345: ST_TO_ADDR
// if not depot then
30346: LD_VAR 0 1
30350: NOT
30351: IFFALSE 30355
// exit ;
30353: GO 30429
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30355: LD_ADDR_VAR 0 2
30359: PUSH
30360: LD_VAR 0 1
30364: PUSH
30365: LD_INT 1
30367: PPUSH
30368: LD_VAR 0 1
30372: PPUSH
30373: CALL_OW 12
30377: ARRAY
30378: PPUSH
30379: CALL_OW 274
30383: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30384: LD_VAR 0 2
30388: PPUSH
30389: LD_INT 1
30391: PPUSH
30392: LD_INT 0
30394: PPUSH
30395: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30399: LD_VAR 0 2
30403: PPUSH
30404: LD_INT 2
30406: PPUSH
30407: LD_INT 0
30409: PPUSH
30410: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_INT 3
30421: PPUSH
30422: LD_INT 0
30424: PPUSH
30425: CALL_OW 277
// end ;
30429: PPOPN 2
30431: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30432: LD_EXP 70
30436: PUSH
30437: LD_EXP 98
30441: AND
30442: IFFALSE 30539
30444: GO 30446
30446: DISABLE
30447: LD_INT 0
30449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30450: LD_ADDR_VAR 0 1
30454: PUSH
30455: LD_INT 22
30457: PUSH
30458: LD_OWVAR 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 21
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: LD_INT 23
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: LIST
30498: PPUSH
30499: CALL_OW 69
30503: ST_TO_ADDR
// if not tmp then
30504: LD_VAR 0 1
30508: NOT
30509: IFFALSE 30513
// exit ;
30511: GO 30539
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30513: LD_VAR 0 1
30517: PUSH
30518: LD_INT 1
30520: PPUSH
30521: LD_VAR 0 1
30525: PPUSH
30526: CALL_OW 12
30530: ARRAY
30531: PPUSH
30532: LD_INT 200
30534: PPUSH
30535: CALL_OW 234
// end ;
30539: PPOPN 1
30541: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30542: LD_EXP 70
30546: PUSH
30547: LD_EXP 99
30551: AND
30552: IFFALSE 30631
30554: GO 30556
30556: DISABLE
30557: LD_INT 0
30559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30560: LD_ADDR_VAR 0 1
30564: PUSH
30565: LD_INT 22
30567: PUSH
30568: LD_OWVAR 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 21
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PPUSH
30591: CALL_OW 69
30595: ST_TO_ADDR
// if not tmp then
30596: LD_VAR 0 1
30600: NOT
30601: IFFALSE 30605
// exit ;
30603: GO 30631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30605: LD_VAR 0 1
30609: PUSH
30610: LD_INT 1
30612: PPUSH
30613: LD_VAR 0 1
30617: PPUSH
30618: CALL_OW 12
30622: ARRAY
30623: PPUSH
30624: LD_INT 60
30626: PPUSH
30627: CALL_OW 234
// end ;
30631: PPOPN 1
30633: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30634: LD_EXP 70
30638: PUSH
30639: LD_EXP 100
30643: AND
30644: IFFALSE 30743
30646: GO 30648
30648: DISABLE
30649: LD_INT 0
30651: PPUSH
30652: PPUSH
// begin enable ;
30653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30654: LD_ADDR_VAR 0 1
30658: PUSH
30659: LD_INT 22
30661: PUSH
30662: LD_OWVAR 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 61
30673: PUSH
30674: EMPTY
30675: LIST
30676: PUSH
30677: LD_INT 33
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: PPUSH
30692: CALL_OW 69
30696: ST_TO_ADDR
// if not tmp then
30697: LD_VAR 0 1
30701: NOT
30702: IFFALSE 30706
// exit ;
30704: GO 30743
// for i in tmp do
30706: LD_ADDR_VAR 0 2
30710: PUSH
30711: LD_VAR 0 1
30715: PUSH
30716: FOR_IN
30717: IFFALSE 30741
// if IsControledBy ( i ) then
30719: LD_VAR 0 2
30723: PPUSH
30724: CALL_OW 312
30728: IFFALSE 30739
// ComUnlink ( i ) ;
30730: LD_VAR 0 2
30734: PPUSH
30735: CALL_OW 136
30739: GO 30716
30741: POP
30742: POP
// end ;
30743: PPOPN 2
30745: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30746: LD_EXP 70
30750: PUSH
30751: LD_EXP 101
30755: AND
30756: IFFALSE 30896
30758: GO 30760
30760: DISABLE
30761: LD_INT 0
30763: PPUSH
30764: PPUSH
// begin ToLua ( displayPowell(); ) ;
30765: LD_STRING displayPowell();
30767: PPUSH
30768: CALL_OW 559
// uc_side := 0 ;
30772: LD_ADDR_OWVAR 20
30776: PUSH
30777: LD_INT 0
30779: ST_TO_ADDR
// uc_nation := 2 ;
30780: LD_ADDR_OWVAR 21
30784: PUSH
30785: LD_INT 2
30787: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30788: LD_ADDR_OWVAR 37
30792: PUSH
30793: LD_INT 14
30795: ST_TO_ADDR
// vc_engine := engine_siberite ;
30796: LD_ADDR_OWVAR 39
30800: PUSH
30801: LD_INT 3
30803: ST_TO_ADDR
// vc_control := control_apeman ;
30804: LD_ADDR_OWVAR 38
30808: PUSH
30809: LD_INT 5
30811: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30812: LD_ADDR_OWVAR 40
30816: PUSH
30817: LD_INT 29
30819: ST_TO_ADDR
// un := CreateVehicle ;
30820: LD_ADDR_VAR 0 2
30824: PUSH
30825: CALL_OW 45
30829: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30830: LD_VAR 0 2
30834: PPUSH
30835: LD_INT 1
30837: PPUSH
30838: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30842: LD_INT 35
30844: PPUSH
30845: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30849: LD_VAR 0 2
30853: PPUSH
30854: LD_INT 22
30856: PUSH
30857: LD_OWVAR 2
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PPUSH
30866: CALL_OW 69
30870: PPUSH
30871: LD_VAR 0 2
30875: PPUSH
30876: CALL_OW 74
30880: PPUSH
30881: CALL_OW 115
// until IsDead ( un ) ;
30885: LD_VAR 0 2
30889: PPUSH
30890: CALL_OW 301
30894: IFFALSE 30842
// end ;
30896: PPOPN 2
30898: END
// every 0 0$1 trigger StreamModeActive and sStu do
30899: LD_EXP 70
30903: PUSH
30904: LD_EXP 109
30908: AND
30909: IFFALSE 30925
30911: GO 30913
30913: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30914: LD_STRING displayStucuk();
30916: PPUSH
30917: CALL_OW 559
// ResetFog ;
30921: CALL_OW 335
// end ;
30925: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30926: LD_EXP 70
30930: PUSH
30931: LD_EXP 102
30935: AND
30936: IFFALSE 31077
30938: GO 30940
30940: DISABLE
30941: LD_INT 0
30943: PPUSH
30944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30945: LD_ADDR_VAR 0 2
30949: PUSH
30950: LD_INT 22
30952: PUSH
30953: LD_OWVAR 2
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 21
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PPUSH
30976: CALL_OW 69
30980: ST_TO_ADDR
// if not tmp then
30981: LD_VAR 0 2
30985: NOT
30986: IFFALSE 30990
// exit ;
30988: GO 31077
// un := tmp [ rand ( 1 , tmp ) ] ;
30990: LD_ADDR_VAR 0 1
30994: PUSH
30995: LD_VAR 0 2
30999: PUSH
31000: LD_INT 1
31002: PPUSH
31003: LD_VAR 0 2
31007: PPUSH
31008: CALL_OW 12
31012: ARRAY
31013: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31014: LD_VAR 0 1
31018: PPUSH
31019: LD_INT 0
31021: PPUSH
31022: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31026: LD_VAR 0 1
31030: PPUSH
31031: LD_OWVAR 3
31035: PUSH
31036: LD_VAR 0 1
31040: DIFF
31041: PPUSH
31042: LD_VAR 0 1
31046: PPUSH
31047: CALL_OW 74
31051: PPUSH
31052: CALL_OW 115
// wait ( 0 0$20 ) ;
31056: LD_INT 700
31058: PPUSH
31059: CALL_OW 67
// SetSide ( un , your_side ) ;
31063: LD_VAR 0 1
31067: PPUSH
31068: LD_OWVAR 2
31072: PPUSH
31073: CALL_OW 235
// end ;
31077: PPOPN 2
31079: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31080: LD_EXP 70
31084: PUSH
31085: LD_EXP 103
31089: AND
31090: IFFALSE 31196
31092: GO 31094
31094: DISABLE
31095: LD_INT 0
31097: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31098: LD_ADDR_VAR 0 1
31102: PUSH
31103: LD_INT 22
31105: PUSH
31106: LD_OWVAR 2
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 30
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PPUSH
31147: CALL_OW 69
31151: ST_TO_ADDR
// if not depot then
31152: LD_VAR 0 1
31156: NOT
31157: IFFALSE 31161
// exit ;
31159: GO 31196
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31161: LD_VAR 0 1
31165: PUSH
31166: LD_INT 1
31168: ARRAY
31169: PPUSH
31170: CALL_OW 250
31174: PPUSH
31175: LD_VAR 0 1
31179: PUSH
31180: LD_INT 1
31182: ARRAY
31183: PPUSH
31184: CALL_OW 251
31188: PPUSH
31189: LD_INT 70
31191: PPUSH
31192: CALL_OW 495
// end ;
31196: PPOPN 1
31198: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31199: LD_EXP 70
31203: PUSH
31204: LD_EXP 104
31208: AND
31209: IFFALSE 31420
31211: GO 31213
31213: DISABLE
31214: LD_INT 0
31216: PPUSH
31217: PPUSH
31218: PPUSH
31219: PPUSH
31220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31221: LD_ADDR_VAR 0 5
31225: PUSH
31226: LD_INT 22
31228: PUSH
31229: LD_OWVAR 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 21
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PPUSH
31252: CALL_OW 69
31256: ST_TO_ADDR
// if not tmp then
31257: LD_VAR 0 5
31261: NOT
31262: IFFALSE 31266
// exit ;
31264: GO 31420
// for i in tmp do
31266: LD_ADDR_VAR 0 1
31270: PUSH
31271: LD_VAR 0 5
31275: PUSH
31276: FOR_IN
31277: IFFALSE 31418
// begin d := rand ( 0 , 5 ) ;
31279: LD_ADDR_VAR 0 4
31283: PUSH
31284: LD_INT 0
31286: PPUSH
31287: LD_INT 5
31289: PPUSH
31290: CALL_OW 12
31294: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31295: LD_ADDR_VAR 0 2
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 250
31309: PPUSH
31310: LD_VAR 0 4
31314: PPUSH
31315: LD_INT 3
31317: PPUSH
31318: LD_INT 12
31320: PPUSH
31321: CALL_OW 12
31325: PPUSH
31326: CALL_OW 272
31330: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31331: LD_ADDR_VAR 0 3
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 251
31345: PPUSH
31346: LD_VAR 0 4
31350: PPUSH
31351: LD_INT 3
31353: PPUSH
31354: LD_INT 12
31356: PPUSH
31357: CALL_OW 12
31361: PPUSH
31362: CALL_OW 273
31366: ST_TO_ADDR
// if ValidHex ( x , y ) then
31367: LD_VAR 0 2
31371: PPUSH
31372: LD_VAR 0 3
31376: PPUSH
31377: CALL_OW 488
31381: IFFALSE 31416
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31383: LD_VAR 0 1
31387: PPUSH
31388: LD_VAR 0 2
31392: PPUSH
31393: LD_VAR 0 3
31397: PPUSH
31398: LD_INT 3
31400: PPUSH
31401: LD_INT 6
31403: PPUSH
31404: CALL_OW 12
31408: PPUSH
31409: LD_INT 1
31411: PPUSH
31412: CALL_OW 483
// end ;
31416: GO 31276
31418: POP
31419: POP
// end ;
31420: PPOPN 5
31422: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31423: LD_EXP 70
31427: PUSH
31428: LD_EXP 105
31432: AND
31433: IFFALSE 31527
31435: GO 31437
31437: DISABLE
31438: LD_INT 0
31440: PPUSH
31441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31442: LD_ADDR_VAR 0 2
31446: PUSH
31447: LD_INT 22
31449: PUSH
31450: LD_OWVAR 2
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 32
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 21
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: PPUSH
31484: CALL_OW 69
31488: ST_TO_ADDR
// if not tmp then
31489: LD_VAR 0 2
31493: NOT
31494: IFFALSE 31498
// exit ;
31496: GO 31527
// for i in tmp do
31498: LD_ADDR_VAR 0 1
31502: PUSH
31503: LD_VAR 0 2
31507: PUSH
31508: FOR_IN
31509: IFFALSE 31525
// SetFuel ( i , 0 ) ;
31511: LD_VAR 0 1
31515: PPUSH
31516: LD_INT 0
31518: PPUSH
31519: CALL_OW 240
31523: GO 31508
31525: POP
31526: POP
// end ;
31527: PPOPN 2
31529: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31530: LD_EXP 70
31534: PUSH
31535: LD_EXP 106
31539: AND
31540: IFFALSE 31606
31542: GO 31544
31544: DISABLE
31545: LD_INT 0
31547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31548: LD_ADDR_VAR 0 1
31552: PUSH
31553: LD_INT 22
31555: PUSH
31556: LD_OWVAR 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 30
31567: PUSH
31568: LD_INT 29
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PPUSH
31579: CALL_OW 69
31583: ST_TO_ADDR
// if not tmp then
31584: LD_VAR 0 1
31588: NOT
31589: IFFALSE 31593
// exit ;
31591: GO 31606
// DestroyUnit ( tmp [ 1 ] ) ;
31593: LD_VAR 0 1
31597: PUSH
31598: LD_INT 1
31600: ARRAY
31601: PPUSH
31602: CALL_OW 65
// end ;
31606: PPOPN 1
31608: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31609: LD_EXP 70
31613: PUSH
31614: LD_EXP 108
31618: AND
31619: IFFALSE 31748
31621: GO 31623
31623: DISABLE
31624: LD_INT 0
31626: PPUSH
// begin uc_side := 0 ;
31627: LD_ADDR_OWVAR 20
31631: PUSH
31632: LD_INT 0
31634: ST_TO_ADDR
// uc_nation := nation_arabian ;
31635: LD_ADDR_OWVAR 21
31639: PUSH
31640: LD_INT 2
31642: ST_TO_ADDR
// hc_gallery :=  ;
31643: LD_ADDR_OWVAR 33
31647: PUSH
31648: LD_STRING 
31650: ST_TO_ADDR
// hc_name :=  ;
31651: LD_ADDR_OWVAR 26
31655: PUSH
31656: LD_STRING 
31658: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31659: LD_INT 1
31661: PPUSH
31662: LD_INT 11
31664: PPUSH
31665: LD_INT 10
31667: PPUSH
31668: CALL_OW 380
// un := CreateHuman ;
31672: LD_ADDR_VAR 0 1
31676: PUSH
31677: CALL_OW 44
31681: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31682: LD_VAR 0 1
31686: PPUSH
31687: LD_INT 1
31689: PPUSH
31690: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31694: LD_INT 35
31696: PPUSH
31697: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31701: LD_VAR 0 1
31705: PPUSH
31706: LD_INT 22
31708: PUSH
31709: LD_OWVAR 2
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PPUSH
31718: CALL_OW 69
31722: PPUSH
31723: LD_VAR 0 1
31727: PPUSH
31728: CALL_OW 74
31732: PPUSH
31733: CALL_OW 115
// until IsDead ( un ) ;
31737: LD_VAR 0 1
31741: PPUSH
31742: CALL_OW 301
31746: IFFALSE 31694
// end ;
31748: PPOPN 1
31750: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31751: LD_EXP 70
31755: PUSH
31756: LD_EXP 110
31760: AND
31761: IFFALSE 31773
31763: GO 31765
31765: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31766: LD_STRING earthquake(getX(game), 0, 32)
31768: PPUSH
31769: CALL_OW 559
31773: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31774: LD_EXP 70
31778: PUSH
31779: LD_EXP 111
31783: AND
31784: IFFALSE 31875
31786: GO 31788
31788: DISABLE
31789: LD_INT 0
31791: PPUSH
// begin enable ;
31792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31793: LD_ADDR_VAR 0 1
31797: PUSH
31798: LD_INT 22
31800: PUSH
31801: LD_OWVAR 2
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 21
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 33
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: PPUSH
31835: CALL_OW 69
31839: ST_TO_ADDR
// if not tmp then
31840: LD_VAR 0 1
31844: NOT
31845: IFFALSE 31849
// exit ;
31847: GO 31875
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31849: LD_VAR 0 1
31853: PUSH
31854: LD_INT 1
31856: PPUSH
31857: LD_VAR 0 1
31861: PPUSH
31862: CALL_OW 12
31866: ARRAY
31867: PPUSH
31868: LD_INT 1
31870: PPUSH
31871: CALL_OW 234
// end ;
31875: PPOPN 1
31877: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31878: LD_EXP 70
31882: PUSH
31883: LD_EXP 112
31887: AND
31888: IFFALSE 32029
31890: GO 31892
31892: DISABLE
31893: LD_INT 0
31895: PPUSH
31896: PPUSH
31897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31898: LD_ADDR_VAR 0 3
31902: PUSH
31903: LD_INT 22
31905: PUSH
31906: LD_OWVAR 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 25
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PPUSH
31929: CALL_OW 69
31933: ST_TO_ADDR
// if not tmp then
31934: LD_VAR 0 3
31938: NOT
31939: IFFALSE 31943
// exit ;
31941: GO 32029
// un := tmp [ rand ( 1 , tmp ) ] ;
31943: LD_ADDR_VAR 0 2
31947: PUSH
31948: LD_VAR 0 3
31952: PUSH
31953: LD_INT 1
31955: PPUSH
31956: LD_VAR 0 3
31960: PPUSH
31961: CALL_OW 12
31965: ARRAY
31966: ST_TO_ADDR
// if Crawls ( un ) then
31967: LD_VAR 0 2
31971: PPUSH
31972: CALL_OW 318
31976: IFFALSE 31987
// ComWalk ( un ) ;
31978: LD_VAR 0 2
31982: PPUSH
31983: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31987: LD_VAR 0 2
31991: PPUSH
31992: LD_INT 9
31994: PPUSH
31995: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31999: LD_INT 28
32001: PPUSH
32002: LD_OWVAR 2
32006: PPUSH
32007: LD_INT 2
32009: PPUSH
32010: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32014: LD_INT 29
32016: PPUSH
32017: LD_OWVAR 2
32021: PPUSH
32022: LD_INT 2
32024: PPUSH
32025: CALL_OW 322
// end ;
32029: PPOPN 3
32031: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32032: LD_EXP 70
32036: PUSH
32037: LD_EXP 113
32041: AND
32042: IFFALSE 32153
32044: GO 32046
32046: DISABLE
32047: LD_INT 0
32049: PPUSH
32050: PPUSH
32051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32052: LD_ADDR_VAR 0 3
32056: PUSH
32057: LD_INT 22
32059: PUSH
32060: LD_OWVAR 2
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 25
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PPUSH
32083: CALL_OW 69
32087: ST_TO_ADDR
// if not tmp then
32088: LD_VAR 0 3
32092: NOT
32093: IFFALSE 32097
// exit ;
32095: GO 32153
// un := tmp [ rand ( 1 , tmp ) ] ;
32097: LD_ADDR_VAR 0 2
32101: PUSH
32102: LD_VAR 0 3
32106: PUSH
32107: LD_INT 1
32109: PPUSH
32110: LD_VAR 0 3
32114: PPUSH
32115: CALL_OW 12
32119: ARRAY
32120: ST_TO_ADDR
// if Crawls ( un ) then
32121: LD_VAR 0 2
32125: PPUSH
32126: CALL_OW 318
32130: IFFALSE 32141
// ComWalk ( un ) ;
32132: LD_VAR 0 2
32136: PPUSH
32137: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32141: LD_VAR 0 2
32145: PPUSH
32146: LD_INT 8
32148: PPUSH
32149: CALL_OW 336
// end ;
32153: PPOPN 3
32155: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32156: LD_EXP 70
32160: PUSH
32161: LD_EXP 114
32165: AND
32166: IFFALSE 32310
32168: GO 32170
32170: DISABLE
32171: LD_INT 0
32173: PPUSH
32174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32175: LD_ADDR_VAR 0 2
32179: PUSH
32180: LD_INT 22
32182: PUSH
32183: LD_OWVAR 2
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 21
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 34
32207: PUSH
32208: LD_INT 12
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 34
32217: PUSH
32218: LD_INT 51
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 34
32227: PUSH
32228: LD_INT 32
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: PPUSH
32246: CALL_OW 69
32250: ST_TO_ADDR
// if not tmp then
32251: LD_VAR 0 2
32255: NOT
32256: IFFALSE 32260
// exit ;
32258: GO 32310
// for i in tmp do
32260: LD_ADDR_VAR 0 1
32264: PUSH
32265: LD_VAR 0 2
32269: PUSH
32270: FOR_IN
32271: IFFALSE 32308
// if GetCargo ( i , mat_artifact ) = 0 then
32273: LD_VAR 0 1
32277: PPUSH
32278: LD_INT 4
32280: PPUSH
32281: CALL_OW 289
32285: PUSH
32286: LD_INT 0
32288: EQUAL
32289: IFFALSE 32306
// SetCargo ( i , mat_siberit , 100 ) ;
32291: LD_VAR 0 1
32295: PPUSH
32296: LD_INT 3
32298: PPUSH
32299: LD_INT 100
32301: PPUSH
32302: CALL_OW 290
32306: GO 32270
32308: POP
32309: POP
// end ;
32310: PPOPN 2
32312: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32313: LD_EXP 70
32317: PUSH
32318: LD_EXP 115
32322: AND
32323: IFFALSE 32506
32325: GO 32327
32327: DISABLE
32328: LD_INT 0
32330: PPUSH
32331: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_INT 22
32339: PUSH
32340: LD_OWVAR 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PPUSH
32349: CALL_OW 69
32353: ST_TO_ADDR
// if not tmp then
32354: LD_VAR 0 2
32358: NOT
32359: IFFALSE 32363
// exit ;
32361: GO 32506
// for i := 1 to 2 do
32363: LD_ADDR_VAR 0 1
32367: PUSH
32368: DOUBLE
32369: LD_INT 1
32371: DEC
32372: ST_TO_ADDR
32373: LD_INT 2
32375: PUSH
32376: FOR_TO
32377: IFFALSE 32504
// begin uc_side := your_side ;
32379: LD_ADDR_OWVAR 20
32383: PUSH
32384: LD_OWVAR 2
32388: ST_TO_ADDR
// uc_nation := nation_american ;
32389: LD_ADDR_OWVAR 21
32393: PUSH
32394: LD_INT 1
32396: ST_TO_ADDR
// vc_chassis := us_morphling ;
32397: LD_ADDR_OWVAR 37
32401: PUSH
32402: LD_INT 5
32404: ST_TO_ADDR
// vc_engine := engine_siberite ;
32405: LD_ADDR_OWVAR 39
32409: PUSH
32410: LD_INT 3
32412: ST_TO_ADDR
// vc_control := control_computer ;
32413: LD_ADDR_OWVAR 38
32417: PUSH
32418: LD_INT 3
32420: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32421: LD_ADDR_OWVAR 40
32425: PUSH
32426: LD_INT 10
32428: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32429: LD_VAR 0 2
32433: PUSH
32434: LD_INT 1
32436: ARRAY
32437: PPUSH
32438: CALL_OW 310
32442: NOT
32443: IFFALSE 32490
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32445: CALL_OW 45
32449: PPUSH
32450: LD_VAR 0 2
32454: PUSH
32455: LD_INT 1
32457: ARRAY
32458: PPUSH
32459: CALL_OW 250
32463: PPUSH
32464: LD_VAR 0 2
32468: PUSH
32469: LD_INT 1
32471: ARRAY
32472: PPUSH
32473: CALL_OW 251
32477: PPUSH
32478: LD_INT 12
32480: PPUSH
32481: LD_INT 1
32483: PPUSH
32484: CALL_OW 50
32488: GO 32502
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32490: CALL_OW 45
32494: PPUSH
32495: LD_INT 1
32497: PPUSH
32498: CALL_OW 51
// end ;
32502: GO 32376
32504: POP
32505: POP
// end ;
32506: PPOPN 2
32508: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32509: LD_EXP 70
32513: PUSH
32514: LD_EXP 116
32518: AND
32519: IFFALSE 32741
32521: GO 32523
32523: DISABLE
32524: LD_INT 0
32526: PPUSH
32527: PPUSH
32528: PPUSH
32529: PPUSH
32530: PPUSH
32531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32532: LD_ADDR_VAR 0 6
32536: PUSH
32537: LD_INT 22
32539: PUSH
32540: LD_OWVAR 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 21
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: PUSH
32562: LD_INT 23
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: PPUSH
32581: CALL_OW 69
32585: ST_TO_ADDR
// if not tmp then
32586: LD_VAR 0 6
32590: NOT
32591: IFFALSE 32595
// exit ;
32593: GO 32741
// s1 := rand ( 1 , 4 ) ;
32595: LD_ADDR_VAR 0 2
32599: PUSH
32600: LD_INT 1
32602: PPUSH
32603: LD_INT 4
32605: PPUSH
32606: CALL_OW 12
32610: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32611: LD_ADDR_VAR 0 4
32615: PUSH
32616: LD_VAR 0 6
32620: PUSH
32621: LD_INT 1
32623: ARRAY
32624: PPUSH
32625: LD_VAR 0 2
32629: PPUSH
32630: CALL_OW 259
32634: ST_TO_ADDR
// if s1 = 1 then
32635: LD_VAR 0 2
32639: PUSH
32640: LD_INT 1
32642: EQUAL
32643: IFFALSE 32663
// s2 := rand ( 2 , 4 ) else
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_INT 2
32652: PPUSH
32653: LD_INT 4
32655: PPUSH
32656: CALL_OW 12
32660: ST_TO_ADDR
32661: GO 32671
// s2 := 1 ;
32663: LD_ADDR_VAR 0 3
32667: PUSH
32668: LD_INT 1
32670: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32671: LD_ADDR_VAR 0 5
32675: PUSH
32676: LD_VAR 0 6
32680: PUSH
32681: LD_INT 1
32683: ARRAY
32684: PPUSH
32685: LD_VAR 0 3
32689: PPUSH
32690: CALL_OW 259
32694: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32695: LD_VAR 0 6
32699: PUSH
32700: LD_INT 1
32702: ARRAY
32703: PPUSH
32704: LD_VAR 0 2
32708: PPUSH
32709: LD_VAR 0 5
32713: PPUSH
32714: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32718: LD_VAR 0 6
32722: PUSH
32723: LD_INT 1
32725: ARRAY
32726: PPUSH
32727: LD_VAR 0 3
32731: PPUSH
32732: LD_VAR 0 4
32736: PPUSH
32737: CALL_OW 237
// end ;
32741: PPOPN 6
32743: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32744: LD_EXP 70
32748: PUSH
32749: LD_EXP 117
32753: AND
32754: IFFALSE 32833
32756: GO 32758
32758: DISABLE
32759: LD_INT 0
32761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32762: LD_ADDR_VAR 0 1
32766: PUSH
32767: LD_INT 22
32769: PUSH
32770: LD_OWVAR 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 30
32781: PUSH
32782: LD_INT 3
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PPUSH
32793: CALL_OW 69
32797: ST_TO_ADDR
// if not tmp then
32798: LD_VAR 0 1
32802: NOT
32803: IFFALSE 32807
// exit ;
32805: GO 32833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32807: LD_VAR 0 1
32811: PUSH
32812: LD_INT 1
32814: PPUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 12
32824: ARRAY
32825: PPUSH
32826: LD_INT 1
32828: PPUSH
32829: CALL_OW 234
// end ;
32833: PPOPN 1
32835: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32836: LD_EXP 70
32840: PUSH
32841: LD_EXP 118
32845: AND
32846: IFFALSE 32958
32848: GO 32850
32850: DISABLE
32851: LD_INT 0
32853: PPUSH
32854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32855: LD_ADDR_VAR 0 2
32859: PUSH
32860: LD_INT 22
32862: PUSH
32863: LD_OWVAR 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 30
32877: PUSH
32878: LD_INT 27
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 30
32887: PUSH
32888: LD_INT 26
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 30
32897: PUSH
32898: LD_INT 28
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PPUSH
32915: CALL_OW 69
32919: ST_TO_ADDR
// if not tmp then
32920: LD_VAR 0 2
32924: NOT
32925: IFFALSE 32929
// exit ;
32927: GO 32958
// for i in tmp do
32929: LD_ADDR_VAR 0 1
32933: PUSH
32934: LD_VAR 0 2
32938: PUSH
32939: FOR_IN
32940: IFFALSE 32956
// SetLives ( i , 1 ) ;
32942: LD_VAR 0 1
32946: PPUSH
32947: LD_INT 1
32949: PPUSH
32950: CALL_OW 234
32954: GO 32939
32956: POP
32957: POP
// end ;
32958: PPOPN 2
32960: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32961: LD_EXP 70
32965: PUSH
32966: LD_EXP 119
32970: AND
32971: IFFALSE 33245
32973: GO 32975
32975: DISABLE
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
32980: PPUSH
// begin i := rand ( 1 , 7 ) ;
32981: LD_ADDR_VAR 0 1
32985: PUSH
32986: LD_INT 1
32988: PPUSH
32989: LD_INT 7
32991: PPUSH
32992: CALL_OW 12
32996: ST_TO_ADDR
// case i of 1 :
32997: LD_VAR 0 1
33001: PUSH
33002: LD_INT 1
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33010
33008: GO 33020
33010: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33011: LD_STRING earthquake(getX(game), 0, 32)
33013: PPUSH
33014: CALL_OW 559
33018: GO 33245
33020: LD_INT 2
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33042
33028: POP
// begin ToLua ( displayStucuk(); ) ;
33029: LD_STRING displayStucuk();
33031: PPUSH
33032: CALL_OW 559
// ResetFog ;
33036: CALL_OW 335
// end ; 3 :
33040: GO 33245
33042: LD_INT 3
33044: DOUBLE
33045: EQUAL
33046: IFTRUE 33050
33048: GO 33154
33050: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33051: LD_ADDR_VAR 0 2
33055: PUSH
33056: LD_INT 22
33058: PUSH
33059: LD_OWVAR 2
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 25
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PPUSH
33082: CALL_OW 69
33086: ST_TO_ADDR
// if not tmp then
33087: LD_VAR 0 2
33091: NOT
33092: IFFALSE 33096
// exit ;
33094: GO 33245
// un := tmp [ rand ( 1 , tmp ) ] ;
33096: LD_ADDR_VAR 0 3
33100: PUSH
33101: LD_VAR 0 2
33105: PUSH
33106: LD_INT 1
33108: PPUSH
33109: LD_VAR 0 2
33113: PPUSH
33114: CALL_OW 12
33118: ARRAY
33119: ST_TO_ADDR
// if Crawls ( un ) then
33120: LD_VAR 0 3
33124: PPUSH
33125: CALL_OW 318
33129: IFFALSE 33140
// ComWalk ( un ) ;
33131: LD_VAR 0 3
33135: PPUSH
33136: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33140: LD_VAR 0 3
33144: PPUSH
33145: LD_INT 8
33147: PPUSH
33148: CALL_OW 336
// end ; 4 :
33152: GO 33245
33154: LD_INT 4
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33223
33162: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33163: LD_ADDR_VAR 0 2
33167: PUSH
33168: LD_INT 22
33170: PUSH
33171: LD_OWVAR 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 30
33182: PUSH
33183: LD_INT 29
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PPUSH
33194: CALL_OW 69
33198: ST_TO_ADDR
// if not tmp then
33199: LD_VAR 0 2
33203: NOT
33204: IFFALSE 33208
// exit ;
33206: GO 33245
// DestroyUnit ( tmp [ 1 ] ) ;
33208: LD_VAR 0 2
33212: PUSH
33213: LD_INT 1
33215: ARRAY
33216: PPUSH
33217: CALL_OW 65
// end ; 5 .. 7 :
33221: GO 33245
33223: LD_INT 5
33225: DOUBLE
33226: GREATEREQUAL
33227: IFFALSE 33235
33229: LD_INT 7
33231: DOUBLE
33232: LESSEQUAL
33233: IFTRUE 33237
33235: GO 33244
33237: POP
// StreamSibBomb ; end ;
33238: CALL 29495 0 0
33242: GO 33245
33244: POP
// end ;
33245: PPOPN 3
33247: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33248: LD_EXP 70
33252: PUSH
33253: LD_EXP 120
33257: AND
33258: IFFALSE 33414
33260: GO 33262
33262: DISABLE
33263: LD_INT 0
33265: PPUSH
33266: PPUSH
33267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33268: LD_ADDR_VAR 0 2
33272: PUSH
33273: LD_INT 81
33275: PUSH
33276: LD_OWVAR 2
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 21
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 21
33300: PUSH
33301: LD_INT 2
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PPUSH
33317: CALL_OW 69
33321: ST_TO_ADDR
// if not tmp then
33322: LD_VAR 0 2
33326: NOT
33327: IFFALSE 33331
// exit ;
33329: GO 33414
// p := 0 ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_INT 0
33338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33339: LD_INT 35
33341: PPUSH
33342: CALL_OW 67
// p := p + 1 ;
33346: LD_ADDR_VAR 0 3
33350: PUSH
33351: LD_VAR 0 3
33355: PUSH
33356: LD_INT 1
33358: PLUS
33359: ST_TO_ADDR
// for i in tmp do
33360: LD_ADDR_VAR 0 1
33364: PUSH
33365: LD_VAR 0 2
33369: PUSH
33370: FOR_IN
33371: IFFALSE 33402
// if GetLives ( i ) < 1000 then
33373: LD_VAR 0 1
33377: PPUSH
33378: CALL_OW 256
33382: PUSH
33383: LD_INT 1000
33385: LESS
33386: IFFALSE 33400
// SetLives ( i , 1000 ) ;
33388: LD_VAR 0 1
33392: PPUSH
33393: LD_INT 1000
33395: PPUSH
33396: CALL_OW 234
33400: GO 33370
33402: POP
33403: POP
// until p > 20 ;
33404: LD_VAR 0 3
33408: PUSH
33409: LD_INT 20
33411: GREATER
33412: IFFALSE 33339
// end ;
33414: PPOPN 3
33416: END
// every 0 0$1 trigger StreamModeActive and sTime do
33417: LD_EXP 70
33421: PUSH
33422: LD_EXP 121
33426: AND
33427: IFFALSE 33462
33429: GO 33431
33431: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33432: LD_INT 28
33434: PPUSH
33435: LD_OWVAR 2
33439: PPUSH
33440: LD_INT 2
33442: PPUSH
33443: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33447: LD_INT 30
33449: PPUSH
33450: LD_OWVAR 2
33454: PPUSH
33455: LD_INT 2
33457: PPUSH
33458: CALL_OW 322
// end ;
33462: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33463: LD_EXP 70
33467: PUSH
33468: LD_EXP 122
33472: AND
33473: IFFALSE 33594
33475: GO 33477
33477: DISABLE
33478: LD_INT 0
33480: PPUSH
33481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33482: LD_ADDR_VAR 0 2
33486: PUSH
33487: LD_INT 22
33489: PUSH
33490: LD_OWVAR 2
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 21
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 3
33511: PUSH
33512: LD_INT 23
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: PPUSH
33531: CALL_OW 69
33535: ST_TO_ADDR
// if not tmp then
33536: LD_VAR 0 2
33540: NOT
33541: IFFALSE 33545
// exit ;
33543: GO 33594
// for i in tmp do
33545: LD_ADDR_VAR 0 1
33549: PUSH
33550: LD_VAR 0 2
33554: PUSH
33555: FOR_IN
33556: IFFALSE 33592
// begin if Crawls ( i ) then
33558: LD_VAR 0 1
33562: PPUSH
33563: CALL_OW 318
33567: IFFALSE 33578
// ComWalk ( i ) ;
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 138
// SetClass ( i , 2 ) ;
33578: LD_VAR 0 1
33582: PPUSH
33583: LD_INT 2
33585: PPUSH
33586: CALL_OW 336
// end ;
33590: GO 33555
33592: POP
33593: POP
// end ;
33594: PPOPN 2
33596: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33597: LD_EXP 70
33601: PUSH
33602: LD_EXP 123
33606: AND
33607: IFFALSE 33888
33609: GO 33611
33611: DISABLE
33612: LD_INT 0
33614: PPUSH
33615: PPUSH
33616: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33617: LD_OWVAR 2
33621: PPUSH
33622: LD_INT 9
33624: PPUSH
33625: LD_INT 1
33627: PPUSH
33628: LD_INT 1
33630: PPUSH
33631: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33635: LD_INT 9
33637: PPUSH
33638: LD_OWVAR 2
33642: PPUSH
33643: CALL_OW 343
// uc_side := 9 ;
33647: LD_ADDR_OWVAR 20
33651: PUSH
33652: LD_INT 9
33654: ST_TO_ADDR
// uc_nation := 2 ;
33655: LD_ADDR_OWVAR 21
33659: PUSH
33660: LD_INT 2
33662: ST_TO_ADDR
// hc_name := Dark Warrior ;
33663: LD_ADDR_OWVAR 26
33667: PUSH
33668: LD_STRING Dark Warrior
33670: ST_TO_ADDR
// hc_gallery :=  ;
33671: LD_ADDR_OWVAR 33
33675: PUSH
33676: LD_STRING 
33678: ST_TO_ADDR
// hc_noskilllimit := true ;
33679: LD_ADDR_OWVAR 76
33683: PUSH
33684: LD_INT 1
33686: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33687: LD_ADDR_OWVAR 31
33691: PUSH
33692: LD_INT 30
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: LD_INT 30
33700: PUSH
33701: LD_INT 30
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: ST_TO_ADDR
// un := CreateHuman ;
33710: LD_ADDR_VAR 0 3
33714: PUSH
33715: CALL_OW 44
33719: ST_TO_ADDR
// hc_noskilllimit := false ;
33720: LD_ADDR_OWVAR 76
33724: PUSH
33725: LD_INT 0
33727: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33728: LD_VAR 0 3
33732: PPUSH
33733: LD_INT 1
33735: PPUSH
33736: CALL_OW 51
// p := 0 ;
33740: LD_ADDR_VAR 0 2
33744: PUSH
33745: LD_INT 0
33747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33748: LD_INT 35
33750: PPUSH
33751: CALL_OW 67
// p := p + 1 ;
33755: LD_ADDR_VAR 0 2
33759: PUSH
33760: LD_VAR 0 2
33764: PUSH
33765: LD_INT 1
33767: PLUS
33768: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33769: LD_VAR 0 3
33773: PPUSH
33774: CALL_OW 256
33778: PUSH
33779: LD_INT 1000
33781: LESS
33782: IFFALSE 33796
// SetLives ( un , 1000 ) ;
33784: LD_VAR 0 3
33788: PPUSH
33789: LD_INT 1000
33791: PPUSH
33792: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33796: LD_VAR 0 3
33800: PPUSH
33801: LD_INT 81
33803: PUSH
33804: LD_OWVAR 2
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 91
33815: PUSH
33816: LD_VAR 0 3
33820: PUSH
33821: LD_INT 30
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PPUSH
33833: CALL_OW 69
33837: PPUSH
33838: LD_VAR 0 3
33842: PPUSH
33843: CALL_OW 74
33847: PPUSH
33848: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33852: LD_VAR 0 2
33856: PUSH
33857: LD_INT 60
33859: GREATER
33860: PUSH
33861: LD_VAR 0 3
33865: PPUSH
33866: CALL_OW 301
33870: OR
33871: IFFALSE 33748
// if un then
33873: LD_VAR 0 3
33877: IFFALSE 33888
// RemoveUnit ( un ) ;
33879: LD_VAR 0 3
33883: PPUSH
33884: CALL_OW 64
// end ;
33888: PPOPN 3
33890: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33891: LD_INT 0
33893: PPUSH
// case cmd of 301 :
33894: LD_VAR 0 1
33898: PUSH
33899: LD_INT 301
33901: DOUBLE
33902: EQUAL
33903: IFTRUE 33907
33905: GO 33939
33907: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33908: LD_VAR 0 6
33912: PPUSH
33913: LD_VAR 0 7
33917: PPUSH
33918: LD_VAR 0 8
33922: PPUSH
33923: LD_VAR 0 4
33927: PPUSH
33928: LD_VAR 0 5
33932: PPUSH
33933: CALL 35140 0 5
33937: GO 34060
33939: LD_INT 302
33941: DOUBLE
33942: EQUAL
33943: IFTRUE 33947
33945: GO 33984
33947: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33948: LD_VAR 0 6
33952: PPUSH
33953: LD_VAR 0 7
33957: PPUSH
33958: LD_VAR 0 8
33962: PPUSH
33963: LD_VAR 0 9
33967: PPUSH
33968: LD_VAR 0 4
33972: PPUSH
33973: LD_VAR 0 5
33977: PPUSH
33978: CALL 35231 0 6
33982: GO 34060
33984: LD_INT 303
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33992
33990: GO 34029
33992: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33993: LD_VAR 0 6
33997: PPUSH
33998: LD_VAR 0 7
34002: PPUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: LD_VAR 0 9
34012: PPUSH
34013: LD_VAR 0 4
34017: PPUSH
34018: LD_VAR 0 5
34022: PPUSH
34023: CALL 34065 0 6
34027: GO 34060
34029: LD_INT 304
34031: DOUBLE
34032: EQUAL
34033: IFTRUE 34037
34035: GO 34059
34037: POP
// hHackTeleport ( unit , x , y ) ; end ;
34038: LD_VAR 0 2
34042: PPUSH
34043: LD_VAR 0 4
34047: PPUSH
34048: LD_VAR 0 5
34052: PPUSH
34053: CALL 35824 0 3
34057: GO 34060
34059: POP
// end ;
34060: LD_VAR 0 12
34064: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34065: LD_INT 0
34067: PPUSH
34068: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34069: LD_VAR 0 1
34073: PUSH
34074: LD_INT 1
34076: LESS
34077: PUSH
34078: LD_VAR 0 1
34082: PUSH
34083: LD_INT 3
34085: GREATER
34086: OR
34087: PUSH
34088: LD_VAR 0 5
34092: PPUSH
34093: LD_VAR 0 6
34097: PPUSH
34098: CALL_OW 428
34102: OR
34103: IFFALSE 34107
// exit ;
34105: GO 34827
// uc_side := your_side ;
34107: LD_ADDR_OWVAR 20
34111: PUSH
34112: LD_OWVAR 2
34116: ST_TO_ADDR
// uc_nation := nation ;
34117: LD_ADDR_OWVAR 21
34121: PUSH
34122: LD_VAR 0 1
34126: ST_TO_ADDR
// bc_level = 1 ;
34127: LD_ADDR_OWVAR 43
34131: PUSH
34132: LD_INT 1
34134: ST_TO_ADDR
// case btype of 1 :
34135: LD_VAR 0 2
34139: PUSH
34140: LD_INT 1
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34148
34146: GO 34159
34148: POP
// bc_type := b_depot ; 2 :
34149: LD_ADDR_OWVAR 42
34153: PUSH
34154: LD_INT 0
34156: ST_TO_ADDR
34157: GO 34771
34159: LD_INT 2
34161: DOUBLE
34162: EQUAL
34163: IFTRUE 34167
34165: GO 34178
34167: POP
// bc_type := b_warehouse ; 3 :
34168: LD_ADDR_OWVAR 42
34172: PUSH
34173: LD_INT 1
34175: ST_TO_ADDR
34176: GO 34771
34178: LD_INT 3
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34197
34186: POP
// bc_type := b_lab ; 4 .. 9 :
34187: LD_ADDR_OWVAR 42
34191: PUSH
34192: LD_INT 6
34194: ST_TO_ADDR
34195: GO 34771
34197: LD_INT 4
34199: DOUBLE
34200: GREATEREQUAL
34201: IFFALSE 34209
34203: LD_INT 9
34205: DOUBLE
34206: LESSEQUAL
34207: IFTRUE 34211
34209: GO 34263
34211: POP
// begin bc_type := b_lab_half ;
34212: LD_ADDR_OWVAR 42
34216: PUSH
34217: LD_INT 7
34219: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34220: LD_ADDR_OWVAR 44
34224: PUSH
34225: LD_INT 10
34227: PUSH
34228: LD_INT 11
34230: PUSH
34231: LD_INT 12
34233: PUSH
34234: LD_INT 15
34236: PUSH
34237: LD_INT 14
34239: PUSH
34240: LD_INT 13
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: PUSH
34251: LD_VAR 0 2
34255: PUSH
34256: LD_INT 3
34258: MINUS
34259: ARRAY
34260: ST_TO_ADDR
// end ; 10 .. 13 :
34261: GO 34771
34263: LD_INT 10
34265: DOUBLE
34266: GREATEREQUAL
34267: IFFALSE 34275
34269: LD_INT 13
34271: DOUBLE
34272: LESSEQUAL
34273: IFTRUE 34277
34275: GO 34354
34277: POP
// begin bc_type := b_lab_full ;
34278: LD_ADDR_OWVAR 42
34282: PUSH
34283: LD_INT 8
34285: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34286: LD_ADDR_OWVAR 44
34290: PUSH
34291: LD_INT 10
34293: PUSH
34294: LD_INT 12
34296: PUSH
34297: LD_INT 14
34299: PUSH
34300: LD_INT 13
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: PUSH
34309: LD_VAR 0 2
34313: PUSH
34314: LD_INT 9
34316: MINUS
34317: ARRAY
34318: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34319: LD_ADDR_OWVAR 45
34323: PUSH
34324: LD_INT 11
34326: PUSH
34327: LD_INT 15
34329: PUSH
34330: LD_INT 12
34332: PUSH
34333: LD_INT 15
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: PUSH
34342: LD_VAR 0 2
34346: PUSH
34347: LD_INT 9
34349: MINUS
34350: ARRAY
34351: ST_TO_ADDR
// end ; 14 :
34352: GO 34771
34354: LD_INT 14
34356: DOUBLE
34357: EQUAL
34358: IFTRUE 34362
34360: GO 34373
34362: POP
// bc_type := b_workshop ; 15 :
34363: LD_ADDR_OWVAR 42
34367: PUSH
34368: LD_INT 2
34370: ST_TO_ADDR
34371: GO 34771
34373: LD_INT 15
34375: DOUBLE
34376: EQUAL
34377: IFTRUE 34381
34379: GO 34392
34381: POP
// bc_type := b_factory ; 16 :
34382: LD_ADDR_OWVAR 42
34386: PUSH
34387: LD_INT 3
34389: ST_TO_ADDR
34390: GO 34771
34392: LD_INT 16
34394: DOUBLE
34395: EQUAL
34396: IFTRUE 34400
34398: GO 34411
34400: POP
// bc_type := b_ext_gun ; 17 :
34401: LD_ADDR_OWVAR 42
34405: PUSH
34406: LD_INT 17
34408: ST_TO_ADDR
34409: GO 34771
34411: LD_INT 17
34413: DOUBLE
34414: EQUAL
34415: IFTRUE 34419
34417: GO 34447
34419: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34420: LD_ADDR_OWVAR 42
34424: PUSH
34425: LD_INT 19
34427: PUSH
34428: LD_INT 23
34430: PUSH
34431: LD_INT 19
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: PUSH
34439: LD_VAR 0 1
34443: ARRAY
34444: ST_TO_ADDR
34445: GO 34771
34447: LD_INT 18
34449: DOUBLE
34450: EQUAL
34451: IFTRUE 34455
34453: GO 34466
34455: POP
// bc_type := b_ext_radar ; 19 :
34456: LD_ADDR_OWVAR 42
34460: PUSH
34461: LD_INT 20
34463: ST_TO_ADDR
34464: GO 34771
34466: LD_INT 19
34468: DOUBLE
34469: EQUAL
34470: IFTRUE 34474
34472: GO 34485
34474: POP
// bc_type := b_ext_radio ; 20 :
34475: LD_ADDR_OWVAR 42
34479: PUSH
34480: LD_INT 22
34482: ST_TO_ADDR
34483: GO 34771
34485: LD_INT 20
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34504
34493: POP
// bc_type := b_ext_siberium ; 21 :
34494: LD_ADDR_OWVAR 42
34498: PUSH
34499: LD_INT 21
34501: ST_TO_ADDR
34502: GO 34771
34504: LD_INT 21
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34512
34510: GO 34523
34512: POP
// bc_type := b_ext_computer ; 22 :
34513: LD_ADDR_OWVAR 42
34517: PUSH
34518: LD_INT 24
34520: ST_TO_ADDR
34521: GO 34771
34523: LD_INT 22
34525: DOUBLE
34526: EQUAL
34527: IFTRUE 34531
34529: GO 34542
34531: POP
// bc_type := b_ext_track ; 23 :
34532: LD_ADDR_OWVAR 42
34536: PUSH
34537: LD_INT 16
34539: ST_TO_ADDR
34540: GO 34771
34542: LD_INT 23
34544: DOUBLE
34545: EQUAL
34546: IFTRUE 34550
34548: GO 34561
34550: POP
// bc_type := b_ext_laser ; 24 :
34551: LD_ADDR_OWVAR 42
34555: PUSH
34556: LD_INT 25
34558: ST_TO_ADDR
34559: GO 34771
34561: LD_INT 24
34563: DOUBLE
34564: EQUAL
34565: IFTRUE 34569
34567: GO 34580
34569: POP
// bc_type := b_control_tower ; 25 :
34570: LD_ADDR_OWVAR 42
34574: PUSH
34575: LD_INT 36
34577: ST_TO_ADDR
34578: GO 34771
34580: LD_INT 25
34582: DOUBLE
34583: EQUAL
34584: IFTRUE 34588
34586: GO 34599
34588: POP
// bc_type := b_breastwork ; 26 :
34589: LD_ADDR_OWVAR 42
34593: PUSH
34594: LD_INT 31
34596: ST_TO_ADDR
34597: GO 34771
34599: LD_INT 26
34601: DOUBLE
34602: EQUAL
34603: IFTRUE 34607
34605: GO 34618
34607: POP
// bc_type := b_bunker ; 27 :
34608: LD_ADDR_OWVAR 42
34612: PUSH
34613: LD_INT 32
34615: ST_TO_ADDR
34616: GO 34771
34618: LD_INT 27
34620: DOUBLE
34621: EQUAL
34622: IFTRUE 34626
34624: GO 34637
34626: POP
// bc_type := b_turret ; 28 :
34627: LD_ADDR_OWVAR 42
34631: PUSH
34632: LD_INT 33
34634: ST_TO_ADDR
34635: GO 34771
34637: LD_INT 28
34639: DOUBLE
34640: EQUAL
34641: IFTRUE 34645
34643: GO 34656
34645: POP
// bc_type := b_armoury ; 29 :
34646: LD_ADDR_OWVAR 42
34650: PUSH
34651: LD_INT 4
34653: ST_TO_ADDR
34654: GO 34771
34656: LD_INT 29
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34664
34662: GO 34675
34664: POP
// bc_type := b_barracks ; 30 :
34665: LD_ADDR_OWVAR 42
34669: PUSH
34670: LD_INT 5
34672: ST_TO_ADDR
34673: GO 34771
34675: LD_INT 30
34677: DOUBLE
34678: EQUAL
34679: IFTRUE 34683
34681: GO 34694
34683: POP
// bc_type := b_solar_power ; 31 :
34684: LD_ADDR_OWVAR 42
34688: PUSH
34689: LD_INT 27
34691: ST_TO_ADDR
34692: GO 34771
34694: LD_INT 31
34696: DOUBLE
34697: EQUAL
34698: IFTRUE 34702
34700: GO 34713
34702: POP
// bc_type := b_oil_power ; 32 :
34703: LD_ADDR_OWVAR 42
34707: PUSH
34708: LD_INT 26
34710: ST_TO_ADDR
34711: GO 34771
34713: LD_INT 32
34715: DOUBLE
34716: EQUAL
34717: IFTRUE 34721
34719: GO 34732
34721: POP
// bc_type := b_siberite_power ; 33 :
34722: LD_ADDR_OWVAR 42
34726: PUSH
34727: LD_INT 28
34729: ST_TO_ADDR
34730: GO 34771
34732: LD_INT 33
34734: DOUBLE
34735: EQUAL
34736: IFTRUE 34740
34738: GO 34751
34740: POP
// bc_type := b_oil_mine ; 34 :
34741: LD_ADDR_OWVAR 42
34745: PUSH
34746: LD_INT 29
34748: ST_TO_ADDR
34749: GO 34771
34751: LD_INT 34
34753: DOUBLE
34754: EQUAL
34755: IFTRUE 34759
34757: GO 34770
34759: POP
// bc_type := b_siberite_mine ; end ;
34760: LD_ADDR_OWVAR 42
34764: PUSH
34765: LD_INT 30
34767: ST_TO_ADDR
34768: GO 34771
34770: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34771: LD_ADDR_VAR 0 8
34775: PUSH
34776: LD_VAR 0 5
34780: PPUSH
34781: LD_VAR 0 6
34785: PPUSH
34786: LD_VAR 0 3
34790: PPUSH
34791: CALL_OW 47
34795: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34796: LD_OWVAR 42
34800: PUSH
34801: LD_INT 32
34803: PUSH
34804: LD_INT 33
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: IN
34811: IFFALSE 34827
// PlaceWeaponTurret ( b , weapon ) ;
34813: LD_VAR 0 8
34817: PPUSH
34818: LD_VAR 0 4
34822: PPUSH
34823: CALL_OW 431
// end ;
34827: LD_VAR 0 7
34831: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34832: LD_INT 0
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34838: LD_ADDR_VAR 0 4
34842: PUSH
34843: LD_INT 22
34845: PUSH
34846: LD_OWVAR 2
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 30
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 30
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: LIST
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PPUSH
34887: CALL_OW 69
34891: ST_TO_ADDR
// if not tmp then
34892: LD_VAR 0 4
34896: NOT
34897: IFFALSE 34901
// exit ;
34899: GO 34960
// for i in tmp do
34901: LD_ADDR_VAR 0 2
34905: PUSH
34906: LD_VAR 0 4
34910: PUSH
34911: FOR_IN
34912: IFFALSE 34958
// for j = 1 to 3 do
34914: LD_ADDR_VAR 0 3
34918: PUSH
34919: DOUBLE
34920: LD_INT 1
34922: DEC
34923: ST_TO_ADDR
34924: LD_INT 3
34926: PUSH
34927: FOR_TO
34928: IFFALSE 34954
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34930: LD_VAR 0 2
34934: PPUSH
34935: CALL_OW 274
34939: PPUSH
34940: LD_VAR 0 3
34944: PPUSH
34945: LD_INT 99999
34947: PPUSH
34948: CALL_OW 277
34952: GO 34927
34954: POP
34955: POP
34956: GO 34911
34958: POP
34959: POP
// end ;
34960: LD_VAR 0 1
34964: RET
// export function hHackSetLevel10 ; var i , j ; begin
34965: LD_INT 0
34967: PPUSH
34968: PPUSH
34969: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34970: LD_ADDR_VAR 0 2
34974: PUSH
34975: LD_INT 21
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PPUSH
34985: CALL_OW 69
34989: PUSH
34990: FOR_IN
34991: IFFALSE 35043
// if IsSelected ( i ) then
34993: LD_VAR 0 2
34997: PPUSH
34998: CALL_OW 306
35002: IFFALSE 35041
// begin for j := 1 to 4 do
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: DOUBLE
35010: LD_INT 1
35012: DEC
35013: ST_TO_ADDR
35014: LD_INT 4
35016: PUSH
35017: FOR_TO
35018: IFFALSE 35039
// SetSkill ( i , j , 10 ) ;
35020: LD_VAR 0 2
35024: PPUSH
35025: LD_VAR 0 3
35029: PPUSH
35030: LD_INT 10
35032: PPUSH
35033: CALL_OW 237
35037: GO 35017
35039: POP
35040: POP
// end ;
35041: GO 34990
35043: POP
35044: POP
// end ;
35045: LD_VAR 0 1
35049: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35050: LD_INT 0
35052: PPUSH
35053: PPUSH
35054: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35055: LD_ADDR_VAR 0 2
35059: PUSH
35060: LD_INT 22
35062: PUSH
35063: LD_OWVAR 2
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 21
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PPUSH
35086: CALL_OW 69
35090: PUSH
35091: FOR_IN
35092: IFFALSE 35133
// begin for j := 1 to 4 do
35094: LD_ADDR_VAR 0 3
35098: PUSH
35099: DOUBLE
35100: LD_INT 1
35102: DEC
35103: ST_TO_ADDR
35104: LD_INT 4
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35129
// SetSkill ( i , j , 10 ) ;
35110: LD_VAR 0 2
35114: PPUSH
35115: LD_VAR 0 3
35119: PPUSH
35120: LD_INT 10
35122: PPUSH
35123: CALL_OW 237
35127: GO 35107
35129: POP
35130: POP
// end ;
35131: GO 35091
35133: POP
35134: POP
// end ;
35135: LD_VAR 0 1
35139: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35140: LD_INT 0
35142: PPUSH
// uc_side := your_side ;
35143: LD_ADDR_OWVAR 20
35147: PUSH
35148: LD_OWVAR 2
35152: ST_TO_ADDR
// uc_nation := nation ;
35153: LD_ADDR_OWVAR 21
35157: PUSH
35158: LD_VAR 0 1
35162: ST_TO_ADDR
// InitHc ;
35163: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35167: LD_INT 0
35169: PPUSH
35170: LD_VAR 0 2
35174: PPUSH
35175: LD_VAR 0 3
35179: PPUSH
35180: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35184: LD_VAR 0 4
35188: PPUSH
35189: LD_VAR 0 5
35193: PPUSH
35194: CALL_OW 428
35198: PUSH
35199: LD_INT 0
35201: EQUAL
35202: IFFALSE 35226
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35204: CALL_OW 44
35208: PPUSH
35209: LD_VAR 0 4
35213: PPUSH
35214: LD_VAR 0 5
35218: PPUSH
35219: LD_INT 1
35221: PPUSH
35222: CALL_OW 48
// end ;
35226: LD_VAR 0 6
35230: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35231: LD_INT 0
35233: PPUSH
35234: PPUSH
// uc_side := your_side ;
35235: LD_ADDR_OWVAR 20
35239: PUSH
35240: LD_OWVAR 2
35244: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35245: LD_VAR 0 1
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: LD_INT 3
35258: PUSH
35259: LD_INT 4
35261: PUSH
35262: LD_INT 5
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: IN
35272: IFFALSE 35284
// uc_nation := nation_american else
35274: LD_ADDR_OWVAR 21
35278: PUSH
35279: LD_INT 1
35281: ST_TO_ADDR
35282: GO 35327
// if chassis in [ 11 , 12 , 13 , 14 ] then
35284: LD_VAR 0 1
35288: PUSH
35289: LD_INT 11
35291: PUSH
35292: LD_INT 12
35294: PUSH
35295: LD_INT 13
35297: PUSH
35298: LD_INT 14
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: IN
35307: IFFALSE 35319
// uc_nation := nation_arabian else
35309: LD_ADDR_OWVAR 21
35313: PUSH
35314: LD_INT 2
35316: ST_TO_ADDR
35317: GO 35327
// uc_nation := nation_russian ;
35319: LD_ADDR_OWVAR 21
35323: PUSH
35324: LD_INT 3
35326: ST_TO_ADDR
// vc_chassis := chassis ;
35327: LD_ADDR_OWVAR 37
35331: PUSH
35332: LD_VAR 0 1
35336: ST_TO_ADDR
// vc_engine := engine ;
35337: LD_ADDR_OWVAR 39
35341: PUSH
35342: LD_VAR 0 2
35346: ST_TO_ADDR
// vc_control := control ;
35347: LD_ADDR_OWVAR 38
35351: PUSH
35352: LD_VAR 0 3
35356: ST_TO_ADDR
// vc_weapon := weapon ;
35357: LD_ADDR_OWVAR 40
35361: PUSH
35362: LD_VAR 0 4
35366: ST_TO_ADDR
// un := CreateVehicle ;
35367: LD_ADDR_VAR 0 8
35371: PUSH
35372: CALL_OW 45
35376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35377: LD_VAR 0 8
35381: PPUSH
35382: LD_INT 0
35384: PPUSH
35385: LD_INT 5
35387: PPUSH
35388: CALL_OW 12
35392: PPUSH
35393: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35397: LD_VAR 0 8
35401: PPUSH
35402: LD_VAR 0 5
35406: PPUSH
35407: LD_VAR 0 6
35411: PPUSH
35412: LD_INT 1
35414: PPUSH
35415: CALL_OW 48
// end ;
35419: LD_VAR 0 7
35423: RET
// export hInvincible ; every 1 do
35424: GO 35426
35426: DISABLE
// hInvincible := [ ] ;
35427: LD_ADDR_EXP 124
35431: PUSH
35432: EMPTY
35433: ST_TO_ADDR
35434: END
// every 10 do var i ;
35435: GO 35437
35437: DISABLE
35438: LD_INT 0
35440: PPUSH
// begin enable ;
35441: ENABLE
// if not hInvincible then
35442: LD_EXP 124
35446: NOT
35447: IFFALSE 35451
// exit ;
35449: GO 35495
// for i in hInvincible do
35451: LD_ADDR_VAR 0 1
35455: PUSH
35456: LD_EXP 124
35460: PUSH
35461: FOR_IN
35462: IFFALSE 35493
// if GetLives ( i ) < 1000 then
35464: LD_VAR 0 1
35468: PPUSH
35469: CALL_OW 256
35473: PUSH
35474: LD_INT 1000
35476: LESS
35477: IFFALSE 35491
// SetLives ( i , 1000 ) ;
35479: LD_VAR 0 1
35483: PPUSH
35484: LD_INT 1000
35486: PPUSH
35487: CALL_OW 234
35491: GO 35461
35493: POP
35494: POP
// end ;
35495: PPOPN 1
35497: END
// export function hHackInvincible ; var i ; begin
35498: LD_INT 0
35500: PPUSH
35501: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35502: LD_ADDR_VAR 0 2
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 21
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 21
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: PPUSH
35535: CALL_OW 69
35539: PUSH
35540: FOR_IN
35541: IFFALSE 35602
// if IsSelected ( i ) then
35543: LD_VAR 0 2
35547: PPUSH
35548: CALL_OW 306
35552: IFFALSE 35600
// begin if i in hInvincible then
35554: LD_VAR 0 2
35558: PUSH
35559: LD_EXP 124
35563: IN
35564: IFFALSE 35584
// hInvincible := hInvincible diff i else
35566: LD_ADDR_EXP 124
35570: PUSH
35571: LD_EXP 124
35575: PUSH
35576: LD_VAR 0 2
35580: DIFF
35581: ST_TO_ADDR
35582: GO 35600
// hInvincible := hInvincible union i ;
35584: LD_ADDR_EXP 124
35588: PUSH
35589: LD_EXP 124
35593: PUSH
35594: LD_VAR 0 2
35598: UNION
35599: ST_TO_ADDR
// end ;
35600: GO 35540
35602: POP
35603: POP
// end ;
35604: LD_VAR 0 1
35608: RET
// export function hHackInvisible ; var i , j ; begin
35609: LD_INT 0
35611: PPUSH
35612: PPUSH
35613: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35614: LD_ADDR_VAR 0 2
35618: PUSH
35619: LD_INT 21
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PPUSH
35629: CALL_OW 69
35633: PUSH
35634: FOR_IN
35635: IFFALSE 35659
// if IsSelected ( i ) then
35637: LD_VAR 0 2
35641: PPUSH
35642: CALL_OW 306
35646: IFFALSE 35657
// ComForceInvisible ( i ) ;
35648: LD_VAR 0 2
35652: PPUSH
35653: CALL_OW 496
35657: GO 35634
35659: POP
35660: POP
// end ;
35661: LD_VAR 0 1
35665: RET
// export function hHackChangeYourSide ; begin
35666: LD_INT 0
35668: PPUSH
// if your_side = 8 then
35669: LD_OWVAR 2
35673: PUSH
35674: LD_INT 8
35676: EQUAL
35677: IFFALSE 35689
// your_side := 0 else
35679: LD_ADDR_OWVAR 2
35683: PUSH
35684: LD_INT 0
35686: ST_TO_ADDR
35687: GO 35703
// your_side := your_side + 1 ;
35689: LD_ADDR_OWVAR 2
35693: PUSH
35694: LD_OWVAR 2
35698: PUSH
35699: LD_INT 1
35701: PLUS
35702: ST_TO_ADDR
// end ;
35703: LD_VAR 0 1
35707: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35708: LD_INT 0
35710: PPUSH
35711: PPUSH
35712: PPUSH
// for i in all_units do
35713: LD_ADDR_VAR 0 2
35717: PUSH
35718: LD_OWVAR 3
35722: PUSH
35723: FOR_IN
35724: IFFALSE 35802
// if IsSelected ( i ) then
35726: LD_VAR 0 2
35730: PPUSH
35731: CALL_OW 306
35735: IFFALSE 35800
// begin j := GetSide ( i ) ;
35737: LD_ADDR_VAR 0 3
35741: PUSH
35742: LD_VAR 0 2
35746: PPUSH
35747: CALL_OW 255
35751: ST_TO_ADDR
// if j = 8 then
35752: LD_VAR 0 3
35756: PUSH
35757: LD_INT 8
35759: EQUAL
35760: IFFALSE 35772
// j := 0 else
35762: LD_ADDR_VAR 0 3
35766: PUSH
35767: LD_INT 0
35769: ST_TO_ADDR
35770: GO 35786
// j := j + 1 ;
35772: LD_ADDR_VAR 0 3
35776: PUSH
35777: LD_VAR 0 3
35781: PUSH
35782: LD_INT 1
35784: PLUS
35785: ST_TO_ADDR
// SetSide ( i , j ) ;
35786: LD_VAR 0 2
35790: PPUSH
35791: LD_VAR 0 3
35795: PPUSH
35796: CALL_OW 235
// end ;
35800: GO 35723
35802: POP
35803: POP
// end ;
35804: LD_VAR 0 1
35808: RET
// export function hHackFog ; begin
35809: LD_INT 0
35811: PPUSH
// FogOff ( true ) ;
35812: LD_INT 1
35814: PPUSH
35815: CALL_OW 344
// end ;
35819: LD_VAR 0 1
35823: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35824: LD_INT 0
35826: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35827: LD_VAR 0 1
35831: PPUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: LD_VAR 0 3
35841: PPUSH
35842: LD_INT 1
35844: PPUSH
35845: LD_INT 1
35847: PPUSH
35848: CALL_OW 483
// CenterOnXY ( x , y ) ;
35852: LD_VAR 0 2
35856: PPUSH
35857: LD_VAR 0 3
35861: PPUSH
35862: CALL_OW 84
// end ; end_of_file
35866: LD_VAR 0 4
35870: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35871: LD_INT 0
35873: PPUSH
35874: PPUSH
35875: PPUSH
35876: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35877: LD_VAR 0 1
35881: PPUSH
35882: CALL_OW 264
35886: PUSH
35887: LD_EXP 56
35891: EQUAL
35892: IFFALSE 35964
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35894: LD_INT 68
35896: PPUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 255
35906: PPUSH
35907: CALL_OW 321
35911: PUSH
35912: LD_INT 2
35914: EQUAL
35915: IFFALSE 35927
// eff := 70 else
35917: LD_ADDR_VAR 0 4
35921: PUSH
35922: LD_INT 70
35924: ST_TO_ADDR
35925: GO 35935
// eff := 30 ;
35927: LD_ADDR_VAR 0 4
35931: PUSH
35932: LD_INT 30
35934: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL_OW 250
35944: PPUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 251
35954: PPUSH
35955: LD_VAR 0 4
35959: PPUSH
35960: CALL_OW 495
// end ; end ;
35964: LD_VAR 0 2
35968: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35969: LD_INT 0
35971: PPUSH
// end ;
35972: LD_VAR 0 4
35976: RET
// export function SOS_Command ( cmd ) ; begin
35977: LD_INT 0
35979: PPUSH
// end ;
35980: LD_VAR 0 2
35984: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35985: LD_INT 0
35987: PPUSH
// if cmd = 121 then
35988: LD_VAR 0 1
35992: PUSH
35993: LD_INT 121
35995: EQUAL
35996: IFFALSE 35998
// end ;
35998: LD_VAR 0 6
36002: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36003: LD_INT 0
36005: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36006: LD_VAR 0 1
36010: PUSH
36011: LD_INT 250
36013: EQUAL
36014: PUSH
36015: LD_VAR 0 2
36019: PPUSH
36020: CALL_OW 264
36024: PUSH
36025: LD_EXP 59
36029: EQUAL
36030: AND
36031: IFFALSE 36052
// MinerPlaceMine ( unit , x , y ) ;
36033: LD_VAR 0 2
36037: PPUSH
36038: LD_VAR 0 4
36042: PPUSH
36043: LD_VAR 0 5
36047: PPUSH
36048: CALL 38401 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36052: LD_VAR 0 1
36056: PUSH
36057: LD_INT 251
36059: EQUAL
36060: PUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: CALL_OW 264
36070: PUSH
36071: LD_EXP 59
36075: EQUAL
36076: AND
36077: IFFALSE 36098
// MinerDetonateMine ( unit , x , y ) ;
36079: LD_VAR 0 2
36083: PPUSH
36084: LD_VAR 0 4
36088: PPUSH
36089: LD_VAR 0 5
36093: PPUSH
36094: CALL 38678 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36098: LD_VAR 0 1
36102: PUSH
36103: LD_INT 252
36105: EQUAL
36106: PUSH
36107: LD_VAR 0 2
36111: PPUSH
36112: CALL_OW 264
36116: PUSH
36117: LD_EXP 59
36121: EQUAL
36122: AND
36123: IFFALSE 36144
// MinerCreateMinefield ( unit , x , y ) ;
36125: LD_VAR 0 2
36129: PPUSH
36130: LD_VAR 0 4
36134: PPUSH
36135: LD_VAR 0 5
36139: PPUSH
36140: CALL 39095 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36144: LD_VAR 0 1
36148: PUSH
36149: LD_INT 253
36151: EQUAL
36152: PUSH
36153: LD_VAR 0 2
36157: PPUSH
36158: CALL_OW 257
36162: PUSH
36163: LD_INT 5
36165: EQUAL
36166: AND
36167: IFFALSE 36188
// ComBinocular ( unit , x , y ) ;
36169: LD_VAR 0 2
36173: PPUSH
36174: LD_VAR 0 4
36178: PPUSH
36179: LD_VAR 0 5
36183: PPUSH
36184: CALL 39466 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36188: LD_VAR 0 1
36192: PUSH
36193: LD_INT 254
36195: EQUAL
36196: PUSH
36197: LD_VAR 0 2
36201: PPUSH
36202: CALL_OW 264
36206: PUSH
36207: LD_EXP 54
36211: EQUAL
36212: AND
36213: PUSH
36214: LD_VAR 0 3
36218: PPUSH
36219: CALL_OW 263
36223: PUSH
36224: LD_INT 3
36226: EQUAL
36227: AND
36228: IFFALSE 36244
// HackDestroyVehicle ( unit , selectedUnit ) ;
36230: LD_VAR 0 2
36234: PPUSH
36235: LD_VAR 0 3
36239: PPUSH
36240: CALL 37761 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36244: LD_VAR 0 1
36248: PUSH
36249: LD_INT 255
36251: EQUAL
36252: PUSH
36253: LD_VAR 0 2
36257: PPUSH
36258: CALL_OW 264
36262: PUSH
36263: LD_INT 14
36265: PUSH
36266: LD_INT 53
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: IN
36273: AND
36274: PUSH
36275: LD_VAR 0 4
36279: PPUSH
36280: LD_VAR 0 5
36284: PPUSH
36285: CALL_OW 488
36289: AND
36290: IFFALSE 36314
// CutTreeXYR ( unit , x , y , 12 ) ;
36292: LD_VAR 0 2
36296: PPUSH
36297: LD_VAR 0 4
36301: PPUSH
36302: LD_VAR 0 5
36306: PPUSH
36307: LD_INT 12
36309: PPUSH
36310: CALL 36327 0 4
// end ;
36314: LD_VAR 0 6
36318: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
36319: LD_INT 0
36321: PPUSH
// end ;
36322: LD_VAR 0 4
36326: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36338: LD_VAR 0 1
36342: NOT
36343: PUSH
36344: LD_VAR 0 2
36348: PPUSH
36349: LD_VAR 0 3
36353: PPUSH
36354: CALL_OW 488
36358: NOT
36359: OR
36360: PUSH
36361: LD_VAR 0 4
36365: NOT
36366: OR
36367: IFFALSE 36371
// exit ;
36369: GO 36711
// list := [ ] ;
36371: LD_ADDR_VAR 0 13
36375: PUSH
36376: EMPTY
36377: ST_TO_ADDR
// if x - r < 0 then
36378: LD_VAR 0 2
36382: PUSH
36383: LD_VAR 0 4
36387: MINUS
36388: PUSH
36389: LD_INT 0
36391: LESS
36392: IFFALSE 36404
// min_x := 0 else
36394: LD_ADDR_VAR 0 7
36398: PUSH
36399: LD_INT 0
36401: ST_TO_ADDR
36402: GO 36420
// min_x := x - r ;
36404: LD_ADDR_VAR 0 7
36408: PUSH
36409: LD_VAR 0 2
36413: PUSH
36414: LD_VAR 0 4
36418: MINUS
36419: ST_TO_ADDR
// if y - r < 0 then
36420: LD_VAR 0 3
36424: PUSH
36425: LD_VAR 0 4
36429: MINUS
36430: PUSH
36431: LD_INT 0
36433: LESS
36434: IFFALSE 36446
// min_y := 0 else
36436: LD_ADDR_VAR 0 8
36440: PUSH
36441: LD_INT 0
36443: ST_TO_ADDR
36444: GO 36462
// min_y := y - r ;
36446: LD_ADDR_VAR 0 8
36450: PUSH
36451: LD_VAR 0 3
36455: PUSH
36456: LD_VAR 0 4
36460: MINUS
36461: ST_TO_ADDR
// max_x := x + r ;
36462: LD_ADDR_VAR 0 9
36466: PUSH
36467: LD_VAR 0 2
36471: PUSH
36472: LD_VAR 0 4
36476: PLUS
36477: ST_TO_ADDR
// max_y := y + r ;
36478: LD_ADDR_VAR 0 10
36482: PUSH
36483: LD_VAR 0 3
36487: PUSH
36488: LD_VAR 0 4
36492: PLUS
36493: ST_TO_ADDR
// for _x = min_x to max_x do
36494: LD_ADDR_VAR 0 11
36498: PUSH
36499: DOUBLE
36500: LD_VAR 0 7
36504: DEC
36505: ST_TO_ADDR
36506: LD_VAR 0 9
36510: PUSH
36511: FOR_TO
36512: IFFALSE 36629
// for _y = min_y to max_y do
36514: LD_ADDR_VAR 0 12
36518: PUSH
36519: DOUBLE
36520: LD_VAR 0 8
36524: DEC
36525: ST_TO_ADDR
36526: LD_VAR 0 10
36530: PUSH
36531: FOR_TO
36532: IFFALSE 36625
// begin if not ValidHex ( _x , _y ) then
36534: LD_VAR 0 11
36538: PPUSH
36539: LD_VAR 0 12
36543: PPUSH
36544: CALL_OW 488
36548: NOT
36549: IFFALSE 36553
// continue ;
36551: GO 36531
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36553: LD_VAR 0 11
36557: PPUSH
36558: LD_VAR 0 12
36562: PPUSH
36563: CALL_OW 351
36567: PUSH
36568: LD_VAR 0 11
36572: PPUSH
36573: LD_VAR 0 12
36577: PPUSH
36578: CALL_OW 554
36582: AND
36583: IFFALSE 36623
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36585: LD_ADDR_VAR 0 13
36589: PUSH
36590: LD_VAR 0 13
36594: PPUSH
36595: LD_VAR 0 13
36599: PUSH
36600: LD_INT 1
36602: PLUS
36603: PPUSH
36604: LD_VAR 0 11
36608: PUSH
36609: LD_VAR 0 12
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PPUSH
36618: CALL_OW 2
36622: ST_TO_ADDR
// end ;
36623: GO 36531
36625: POP
36626: POP
36627: GO 36511
36629: POP
36630: POP
// if not list then
36631: LD_VAR 0 13
36635: NOT
36636: IFFALSE 36640
// exit ;
36638: GO 36711
// for i in list do
36640: LD_ADDR_VAR 0 6
36644: PUSH
36645: LD_VAR 0 13
36649: PUSH
36650: FOR_IN
36651: IFFALSE 36709
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36653: LD_VAR 0 1
36657: PPUSH
36658: LD_STRING M
36660: PUSH
36661: LD_VAR 0 6
36665: PUSH
36666: LD_INT 1
36668: ARRAY
36669: PUSH
36670: LD_VAR 0 6
36674: PUSH
36675: LD_INT 2
36677: ARRAY
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: PUSH
36700: EMPTY
36701: LIST
36702: PPUSH
36703: CALL_OW 447
36707: GO 36650
36709: POP
36710: POP
// end ;
36711: LD_VAR 0 5
36715: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36716: LD_EXP 127
36720: NOT
36721: IFFALSE 36771
36723: GO 36725
36725: DISABLE
// begin initHack := true ;
36726: LD_ADDR_EXP 127
36730: PUSH
36731: LD_INT 1
36733: ST_TO_ADDR
// hackTanks := [ ] ;
36734: LD_ADDR_EXP 128
36738: PUSH
36739: EMPTY
36740: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36741: LD_ADDR_EXP 129
36745: PUSH
36746: EMPTY
36747: ST_TO_ADDR
// hackLimit := 3 ;
36748: LD_ADDR_EXP 130
36752: PUSH
36753: LD_INT 3
36755: ST_TO_ADDR
// hackDist := 12 ;
36756: LD_ADDR_EXP 131
36760: PUSH
36761: LD_INT 12
36763: ST_TO_ADDR
// hackCounter := [ ] ;
36764: LD_ADDR_EXP 132
36768: PUSH
36769: EMPTY
36770: ST_TO_ADDR
// end ;
36771: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36772: LD_EXP 127
36776: PUSH
36777: LD_INT 34
36779: PUSH
36780: LD_EXP 54
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PPUSH
36789: CALL_OW 69
36793: AND
36794: IFFALSE 37049
36796: GO 36798
36798: DISABLE
36799: LD_INT 0
36801: PPUSH
36802: PPUSH
// begin enable ;
36803: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36804: LD_ADDR_VAR 0 1
36808: PUSH
36809: LD_INT 34
36811: PUSH
36812: LD_EXP 54
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PPUSH
36821: CALL_OW 69
36825: PUSH
36826: FOR_IN
36827: IFFALSE 37047
// begin if not i in hackTanks then
36829: LD_VAR 0 1
36833: PUSH
36834: LD_EXP 128
36838: IN
36839: NOT
36840: IFFALSE 36923
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36842: LD_ADDR_EXP 128
36846: PUSH
36847: LD_EXP 128
36851: PPUSH
36852: LD_EXP 128
36856: PUSH
36857: LD_INT 1
36859: PLUS
36860: PPUSH
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 1
36870: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36871: LD_ADDR_EXP 129
36875: PUSH
36876: LD_EXP 129
36880: PPUSH
36881: LD_EXP 129
36885: PUSH
36886: LD_INT 1
36888: PLUS
36889: PPUSH
36890: EMPTY
36891: PPUSH
36892: CALL_OW 1
36896: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36897: LD_ADDR_EXP 132
36901: PUSH
36902: LD_EXP 132
36906: PPUSH
36907: LD_EXP 132
36911: PUSH
36912: LD_INT 1
36914: PLUS
36915: PPUSH
36916: EMPTY
36917: PPUSH
36918: CALL_OW 1
36922: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 302
36932: NOT
36933: IFFALSE 36946
// begin HackUnlinkAll ( i ) ;
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL 37052 0 1
// continue ;
36944: GO 36826
// end ; HackCheckCapturedStatus ( i ) ;
36946: LD_VAR 0 1
36950: PPUSH
36951: CALL 37495 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36955: LD_ADDR_VAR 0 2
36959: PUSH
36960: LD_INT 81
36962: PUSH
36963: LD_VAR 0 1
36967: PPUSH
36968: CALL_OW 255
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 33
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 91
36989: PUSH
36990: LD_VAR 0 1
36994: PUSH
36995: LD_EXP 131
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 50
37007: PUSH
37008: EMPTY
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: PPUSH
37017: CALL_OW 69
37021: ST_TO_ADDR
// if not tmp then
37022: LD_VAR 0 2
37026: NOT
37027: IFFALSE 37031
// continue ;
37029: GO 36826
// HackLink ( i , tmp ) ;
37031: LD_VAR 0 1
37035: PPUSH
37036: LD_VAR 0 2
37040: PPUSH
37041: CALL 37188 0 2
// end ;
37045: GO 36826
37047: POP
37048: POP
// end ;
37049: PPOPN 2
37051: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
37056: PPUSH
// if not hack in hackTanks then
37057: LD_VAR 0 1
37061: PUSH
37062: LD_EXP 128
37066: IN
37067: NOT
37068: IFFALSE 37072
// exit ;
37070: GO 37183
// index := GetElementIndex ( hackTanks , hack ) ;
37072: LD_ADDR_VAR 0 4
37076: PUSH
37077: LD_EXP 128
37081: PPUSH
37082: LD_VAR 0 1
37086: PPUSH
37087: CALL 44617 0 2
37091: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37092: LD_EXP 129
37096: PUSH
37097: LD_VAR 0 4
37101: ARRAY
37102: IFFALSE 37183
// begin for i in hackTanksCaptured [ index ] do
37104: LD_ADDR_VAR 0 3
37108: PUSH
37109: LD_EXP 129
37113: PUSH
37114: LD_VAR 0 4
37118: ARRAY
37119: PUSH
37120: FOR_IN
37121: IFFALSE 37147
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37123: LD_VAR 0 3
37127: PUSH
37128: LD_INT 1
37130: ARRAY
37131: PPUSH
37132: LD_VAR 0 3
37136: PUSH
37137: LD_INT 2
37139: ARRAY
37140: PPUSH
37141: CALL_OW 235
37145: GO 37120
37147: POP
37148: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37149: LD_ADDR_EXP 129
37153: PUSH
37154: LD_EXP 129
37158: PPUSH
37159: LD_VAR 0 4
37163: PPUSH
37164: EMPTY
37165: PPUSH
37166: CALL_OW 1
37170: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37171: LD_VAR 0 1
37175: PPUSH
37176: LD_INT 0
37178: PPUSH
37179: CALL_OW 505
// end ; end ;
37183: LD_VAR 0 2
37187: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37188: LD_INT 0
37190: PPUSH
37191: PPUSH
37192: PPUSH
// if not hack in hackTanks or not vehicles then
37193: LD_VAR 0 1
37197: PUSH
37198: LD_EXP 128
37202: IN
37203: NOT
37204: PUSH
37205: LD_VAR 0 2
37209: NOT
37210: OR
37211: IFFALSE 37215
// exit ;
37213: GO 37490
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37215: LD_ADDR_VAR 0 2
37219: PUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: LD_VAR 0 2
37229: PPUSH
37230: LD_INT 1
37232: PPUSH
37233: LD_INT 1
37235: PPUSH
37236: CALL 45267 0 4
37240: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37241: LD_ADDR_VAR 0 5
37245: PUSH
37246: LD_EXP 128
37250: PPUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: CALL 44617 0 2
37260: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37261: LD_EXP 129
37265: PUSH
37266: LD_VAR 0 5
37270: ARRAY
37271: PUSH
37272: LD_EXP 130
37276: LESS
37277: IFFALSE 37466
// begin for i := 1 to vehicles do
37279: LD_ADDR_VAR 0 4
37283: PUSH
37284: DOUBLE
37285: LD_INT 1
37287: DEC
37288: ST_TO_ADDR
37289: LD_VAR 0 2
37293: PUSH
37294: FOR_TO
37295: IFFALSE 37464
// begin if hackTanksCaptured [ index ] = hackLimit then
37297: LD_EXP 129
37301: PUSH
37302: LD_VAR 0 5
37306: ARRAY
37307: PUSH
37308: LD_EXP 130
37312: EQUAL
37313: IFFALSE 37317
// break ;
37315: GO 37464
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37317: LD_ADDR_EXP 132
37321: PUSH
37322: LD_EXP 132
37326: PPUSH
37327: LD_VAR 0 5
37331: PPUSH
37332: LD_EXP 132
37336: PUSH
37337: LD_VAR 0 5
37341: ARRAY
37342: PUSH
37343: LD_INT 1
37345: PLUS
37346: PPUSH
37347: CALL_OW 1
37351: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37352: LD_ADDR_EXP 129
37356: PUSH
37357: LD_EXP 129
37361: PPUSH
37362: LD_VAR 0 5
37366: PUSH
37367: LD_EXP 129
37371: PUSH
37372: LD_VAR 0 5
37376: ARRAY
37377: PUSH
37378: LD_INT 1
37380: PLUS
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PPUSH
37386: LD_VAR 0 2
37390: PUSH
37391: LD_VAR 0 4
37395: ARRAY
37396: PUSH
37397: LD_VAR 0 2
37401: PUSH
37402: LD_VAR 0 4
37406: ARRAY
37407: PPUSH
37408: CALL_OW 255
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PPUSH
37417: CALL 44832 0 3
37421: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37422: LD_VAR 0 2
37426: PUSH
37427: LD_VAR 0 4
37431: ARRAY
37432: PPUSH
37433: LD_VAR 0 1
37437: PPUSH
37438: CALL_OW 255
37442: PPUSH
37443: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37447: LD_VAR 0 2
37451: PUSH
37452: LD_VAR 0 4
37456: ARRAY
37457: PPUSH
37458: CALL_OW 141
// end ;
37462: GO 37294
37464: POP
37465: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37466: LD_VAR 0 1
37470: PPUSH
37471: LD_EXP 129
37475: PUSH
37476: LD_VAR 0 5
37480: ARRAY
37481: PUSH
37482: LD_INT 0
37484: PLUS
37485: PPUSH
37486: CALL_OW 505
// end ;
37490: LD_VAR 0 3
37494: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37495: LD_INT 0
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
// if not hack in hackTanks then
37501: LD_VAR 0 1
37505: PUSH
37506: LD_EXP 128
37510: IN
37511: NOT
37512: IFFALSE 37516
// exit ;
37514: GO 37756
// index := GetElementIndex ( hackTanks , hack ) ;
37516: LD_ADDR_VAR 0 4
37520: PUSH
37521: LD_EXP 128
37525: PPUSH
37526: LD_VAR 0 1
37530: PPUSH
37531: CALL 44617 0 2
37535: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37536: LD_ADDR_VAR 0 3
37540: PUSH
37541: DOUBLE
37542: LD_EXP 129
37546: PUSH
37547: LD_VAR 0 4
37551: ARRAY
37552: INC
37553: ST_TO_ADDR
37554: LD_INT 1
37556: PUSH
37557: FOR_DOWNTO
37558: IFFALSE 37730
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37560: LD_ADDR_VAR 0 5
37564: PUSH
37565: LD_EXP 129
37569: PUSH
37570: LD_VAR 0 4
37574: ARRAY
37575: PUSH
37576: LD_VAR 0 3
37580: ARRAY
37581: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37582: LD_VAR 0 5
37586: PUSH
37587: LD_INT 1
37589: ARRAY
37590: PPUSH
37591: CALL_OW 302
37595: NOT
37596: PUSH
37597: LD_VAR 0 5
37601: PUSH
37602: LD_INT 1
37604: ARRAY
37605: PPUSH
37606: CALL_OW 255
37610: PUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: CALL_OW 255
37620: NONEQUAL
37621: OR
37622: IFFALSE 37728
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37624: LD_VAR 0 5
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: PPUSH
37633: CALL_OW 305
37637: PUSH
37638: LD_VAR 0 5
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PPUSH
37647: CALL_OW 255
37651: PUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 255
37661: EQUAL
37662: AND
37663: IFFALSE 37687
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37665: LD_VAR 0 5
37669: PUSH
37670: LD_INT 1
37672: ARRAY
37673: PPUSH
37674: LD_VAR 0 5
37678: PUSH
37679: LD_INT 2
37681: ARRAY
37682: PPUSH
37683: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37687: LD_ADDR_EXP 129
37691: PUSH
37692: LD_EXP 129
37696: PPUSH
37697: LD_VAR 0 4
37701: PPUSH
37702: LD_EXP 129
37706: PUSH
37707: LD_VAR 0 4
37711: ARRAY
37712: PPUSH
37713: LD_VAR 0 3
37717: PPUSH
37718: CALL_OW 3
37722: PPUSH
37723: CALL_OW 1
37727: ST_TO_ADDR
// end ; end ;
37728: GO 37557
37730: POP
37731: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37732: LD_VAR 0 1
37736: PPUSH
37737: LD_EXP 129
37741: PUSH
37742: LD_VAR 0 4
37746: ARRAY
37747: PUSH
37748: LD_INT 0
37750: PLUS
37751: PPUSH
37752: CALL_OW 505
// end ;
37756: LD_VAR 0 2
37760: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37761: LD_INT 0
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
// if not hack in hackTanks then
37767: LD_VAR 0 1
37771: PUSH
37772: LD_EXP 128
37776: IN
37777: NOT
37778: IFFALSE 37782
// exit ;
37780: GO 37867
// index := GetElementIndex ( hackTanks , hack ) ;
37782: LD_ADDR_VAR 0 5
37786: PUSH
37787: LD_EXP 128
37791: PPUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL 44617 0 2
37801: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37802: LD_ADDR_VAR 0 4
37806: PUSH
37807: DOUBLE
37808: LD_INT 1
37810: DEC
37811: ST_TO_ADDR
37812: LD_EXP 129
37816: PUSH
37817: LD_VAR 0 5
37821: ARRAY
37822: PUSH
37823: FOR_TO
37824: IFFALSE 37865
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37826: LD_EXP 129
37830: PUSH
37831: LD_VAR 0 5
37835: ARRAY
37836: PUSH
37837: LD_VAR 0 4
37841: ARRAY
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PUSH
37847: LD_VAR 0 2
37851: EQUAL
37852: IFFALSE 37863
// KillUnit ( vehicle ) ;
37854: LD_VAR 0 2
37858: PPUSH
37859: CALL_OW 66
37863: GO 37823
37865: POP
37866: POP
// end ;
37867: LD_VAR 0 3
37871: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37872: LD_EXP 133
37876: NOT
37877: IFFALSE 37912
37879: GO 37881
37881: DISABLE
// begin initMiner := true ;
37882: LD_ADDR_EXP 133
37886: PUSH
37887: LD_INT 1
37889: ST_TO_ADDR
// minersList := [ ] ;
37890: LD_ADDR_EXP 134
37894: PUSH
37895: EMPTY
37896: ST_TO_ADDR
// minerMinesList := [ ] ;
37897: LD_ADDR_EXP 135
37901: PUSH
37902: EMPTY
37903: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37904: LD_ADDR_EXP 136
37908: PUSH
37909: LD_INT 5
37911: ST_TO_ADDR
// end ;
37912: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37913: LD_EXP 133
37917: PUSH
37918: LD_INT 34
37920: PUSH
37921: LD_EXP 59
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PPUSH
37930: CALL_OW 69
37934: AND
37935: IFFALSE 38398
37937: GO 37939
37939: DISABLE
37940: LD_INT 0
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
// begin enable ;
37946: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37947: LD_ADDR_VAR 0 1
37951: PUSH
37952: LD_INT 34
37954: PUSH
37955: LD_EXP 59
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PPUSH
37964: CALL_OW 69
37968: PUSH
37969: FOR_IN
37970: IFFALSE 38042
// begin if not i in minersList then
37972: LD_VAR 0 1
37976: PUSH
37977: LD_EXP 134
37981: IN
37982: NOT
37983: IFFALSE 38040
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37985: LD_ADDR_EXP 134
37989: PUSH
37990: LD_EXP 134
37994: PPUSH
37995: LD_EXP 134
37999: PUSH
38000: LD_INT 1
38002: PLUS
38003: PPUSH
38004: LD_VAR 0 1
38008: PPUSH
38009: CALL_OW 1
38013: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38014: LD_ADDR_EXP 135
38018: PUSH
38019: LD_EXP 135
38023: PPUSH
38024: LD_EXP 135
38028: PUSH
38029: LD_INT 1
38031: PLUS
38032: PPUSH
38033: EMPTY
38034: PPUSH
38035: CALL_OW 1
38039: ST_TO_ADDR
// end end ;
38040: GO 37969
38042: POP
38043: POP
// for i := minerMinesList downto 1 do
38044: LD_ADDR_VAR 0 1
38048: PUSH
38049: DOUBLE
38050: LD_EXP 135
38054: INC
38055: ST_TO_ADDR
38056: LD_INT 1
38058: PUSH
38059: FOR_DOWNTO
38060: IFFALSE 38396
// begin if IsLive ( minersList [ i ] ) then
38062: LD_EXP 134
38066: PUSH
38067: LD_VAR 0 1
38071: ARRAY
38072: PPUSH
38073: CALL_OW 300
38077: IFFALSE 38105
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38079: LD_EXP 134
38083: PUSH
38084: LD_VAR 0 1
38088: ARRAY
38089: PPUSH
38090: LD_EXP 135
38094: PUSH
38095: LD_VAR 0 1
38099: ARRAY
38100: PPUSH
38101: CALL_OW 505
// if not minerMinesList [ i ] then
38105: LD_EXP 135
38109: PUSH
38110: LD_VAR 0 1
38114: ARRAY
38115: NOT
38116: IFFALSE 38120
// continue ;
38118: GO 38059
// for j := minerMinesList [ i ] downto 1 do
38120: LD_ADDR_VAR 0 2
38124: PUSH
38125: DOUBLE
38126: LD_EXP 135
38130: PUSH
38131: LD_VAR 0 1
38135: ARRAY
38136: INC
38137: ST_TO_ADDR
38138: LD_INT 1
38140: PUSH
38141: FOR_DOWNTO
38142: IFFALSE 38392
// begin side := GetSide ( minersList [ i ] ) ;
38144: LD_ADDR_VAR 0 3
38148: PUSH
38149: LD_EXP 134
38153: PUSH
38154: LD_VAR 0 1
38158: ARRAY
38159: PPUSH
38160: CALL_OW 255
38164: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38165: LD_ADDR_VAR 0 4
38169: PUSH
38170: LD_EXP 135
38174: PUSH
38175: LD_VAR 0 1
38179: ARRAY
38180: PUSH
38181: LD_VAR 0 2
38185: ARRAY
38186: PUSH
38187: LD_INT 1
38189: ARRAY
38190: PPUSH
38191: LD_EXP 135
38195: PUSH
38196: LD_VAR 0 1
38200: ARRAY
38201: PUSH
38202: LD_VAR 0 2
38206: ARRAY
38207: PUSH
38208: LD_INT 2
38210: ARRAY
38211: PPUSH
38212: CALL_OW 428
38216: ST_TO_ADDR
// if not tmp then
38217: LD_VAR 0 4
38221: NOT
38222: IFFALSE 38226
// continue ;
38224: GO 38141
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38226: LD_VAR 0 4
38230: PUSH
38231: LD_INT 81
38233: PUSH
38234: LD_VAR 0 3
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PPUSH
38243: CALL_OW 69
38247: IN
38248: PUSH
38249: LD_EXP 135
38253: PUSH
38254: LD_VAR 0 1
38258: ARRAY
38259: PUSH
38260: LD_VAR 0 2
38264: ARRAY
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: PPUSH
38270: LD_EXP 135
38274: PUSH
38275: LD_VAR 0 1
38279: ARRAY
38280: PUSH
38281: LD_VAR 0 2
38285: ARRAY
38286: PUSH
38287: LD_INT 2
38289: ARRAY
38290: PPUSH
38291: CALL_OW 458
38295: AND
38296: IFFALSE 38390
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38298: LD_EXP 135
38302: PUSH
38303: LD_VAR 0 1
38307: ARRAY
38308: PUSH
38309: LD_VAR 0 2
38313: ARRAY
38314: PUSH
38315: LD_INT 1
38317: ARRAY
38318: PPUSH
38319: LD_EXP 135
38323: PUSH
38324: LD_VAR 0 1
38328: ARRAY
38329: PUSH
38330: LD_VAR 0 2
38334: ARRAY
38335: PUSH
38336: LD_INT 2
38338: ARRAY
38339: PPUSH
38340: LD_VAR 0 3
38344: PPUSH
38345: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38349: LD_ADDR_EXP 135
38353: PUSH
38354: LD_EXP 135
38358: PPUSH
38359: LD_VAR 0 1
38363: PPUSH
38364: LD_EXP 135
38368: PUSH
38369: LD_VAR 0 1
38373: ARRAY
38374: PPUSH
38375: LD_VAR 0 2
38379: PPUSH
38380: CALL_OW 3
38384: PPUSH
38385: CALL_OW 1
38389: ST_TO_ADDR
// end ; end ;
38390: GO 38141
38392: POP
38393: POP
// end ;
38394: GO 38059
38396: POP
38397: POP
// end ;
38398: PPOPN 4
38400: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38401: LD_INT 0
38403: PPUSH
38404: PPUSH
// result := false ;
38405: LD_ADDR_VAR 0 4
38409: PUSH
38410: LD_INT 0
38412: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38413: LD_VAR 0 1
38417: PPUSH
38418: CALL_OW 264
38422: PUSH
38423: LD_EXP 59
38427: EQUAL
38428: NOT
38429: IFFALSE 38433
// exit ;
38431: GO 38673
// index := GetElementIndex ( minersList , unit ) ;
38433: LD_ADDR_VAR 0 5
38437: PUSH
38438: LD_EXP 134
38442: PPUSH
38443: LD_VAR 0 1
38447: PPUSH
38448: CALL 44617 0 2
38452: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38453: LD_EXP 135
38457: PUSH
38458: LD_VAR 0 5
38462: ARRAY
38463: PUSH
38464: LD_EXP 136
38468: GREATEREQUAL
38469: IFFALSE 38473
// exit ;
38471: GO 38673
// ComMoveXY ( unit , x , y ) ;
38473: LD_VAR 0 1
38477: PPUSH
38478: LD_VAR 0 2
38482: PPUSH
38483: LD_VAR 0 3
38487: PPUSH
38488: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38492: LD_INT 35
38494: PPUSH
38495: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38499: LD_VAR 0 1
38503: PPUSH
38504: LD_VAR 0 2
38508: PPUSH
38509: LD_VAR 0 3
38513: PPUSH
38514: CALL 75014 0 3
38518: NOT
38519: PUSH
38520: LD_VAR 0 1
38524: PPUSH
38525: CALL_OW 314
38529: AND
38530: IFFALSE 38534
// exit ;
38532: GO 38673
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_VAR 0 3
38543: PPUSH
38544: CALL_OW 428
38548: PUSH
38549: LD_VAR 0 1
38553: EQUAL
38554: PUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: CALL_OW 314
38564: NOT
38565: AND
38566: IFFALSE 38492
// PlaySoundXY ( x , y , PlantMine ) ;
38568: LD_VAR 0 2
38572: PPUSH
38573: LD_VAR 0 3
38577: PPUSH
38578: LD_STRING PlantMine
38580: PPUSH
38581: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38585: LD_VAR 0 2
38589: PPUSH
38590: LD_VAR 0 3
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 255
38604: PPUSH
38605: LD_INT 0
38607: PPUSH
38608: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38612: LD_ADDR_EXP 135
38616: PUSH
38617: LD_EXP 135
38621: PPUSH
38622: LD_VAR 0 5
38626: PUSH
38627: LD_EXP 135
38631: PUSH
38632: LD_VAR 0 5
38636: ARRAY
38637: PUSH
38638: LD_INT 1
38640: PLUS
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PPUSH
38646: LD_VAR 0 2
38650: PUSH
38651: LD_VAR 0 3
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL 44832 0 3
38664: ST_TO_ADDR
// result := true ;
38665: LD_ADDR_VAR 0 4
38669: PUSH
38670: LD_INT 1
38672: ST_TO_ADDR
// end ;
38673: LD_VAR 0 4
38677: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38678: LD_INT 0
38680: PPUSH
38681: PPUSH
38682: PPUSH
// if not unit in minersList then
38683: LD_VAR 0 1
38687: PUSH
38688: LD_EXP 134
38692: IN
38693: NOT
38694: IFFALSE 38698
// exit ;
38696: GO 39090
// index := GetElementIndex ( minersList , unit ) ;
38698: LD_ADDR_VAR 0 6
38702: PUSH
38703: LD_EXP 134
38707: PPUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL 44617 0 2
38717: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38718: LD_ADDR_VAR 0 5
38722: PUSH
38723: DOUBLE
38724: LD_EXP 135
38728: PUSH
38729: LD_VAR 0 6
38733: ARRAY
38734: INC
38735: ST_TO_ADDR
38736: LD_INT 1
38738: PUSH
38739: FOR_DOWNTO
38740: IFFALSE 38901
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38742: LD_EXP 135
38746: PUSH
38747: LD_VAR 0 6
38751: ARRAY
38752: PUSH
38753: LD_VAR 0 5
38757: ARRAY
38758: PUSH
38759: LD_INT 1
38761: ARRAY
38762: PUSH
38763: LD_VAR 0 2
38767: EQUAL
38768: PUSH
38769: LD_EXP 135
38773: PUSH
38774: LD_VAR 0 6
38778: ARRAY
38779: PUSH
38780: LD_VAR 0 5
38784: ARRAY
38785: PUSH
38786: LD_INT 2
38788: ARRAY
38789: PUSH
38790: LD_VAR 0 3
38794: EQUAL
38795: AND
38796: IFFALSE 38899
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38798: LD_EXP 135
38802: PUSH
38803: LD_VAR 0 6
38807: ARRAY
38808: PUSH
38809: LD_VAR 0 5
38813: ARRAY
38814: PUSH
38815: LD_INT 1
38817: ARRAY
38818: PPUSH
38819: LD_EXP 135
38823: PUSH
38824: LD_VAR 0 6
38828: ARRAY
38829: PUSH
38830: LD_VAR 0 5
38834: ARRAY
38835: PUSH
38836: LD_INT 2
38838: ARRAY
38839: PPUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 255
38849: PPUSH
38850: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38854: LD_ADDR_EXP 135
38858: PUSH
38859: LD_EXP 135
38863: PPUSH
38864: LD_VAR 0 6
38868: PPUSH
38869: LD_EXP 135
38873: PUSH
38874: LD_VAR 0 6
38878: ARRAY
38879: PPUSH
38880: LD_VAR 0 5
38884: PPUSH
38885: CALL_OW 3
38889: PPUSH
38890: CALL_OW 1
38894: ST_TO_ADDR
// exit ;
38895: POP
38896: POP
38897: GO 39090
// end ; end ;
38899: GO 38739
38901: POP
38902: POP
// for i := minerMinesList [ index ] downto 1 do
38903: LD_ADDR_VAR 0 5
38907: PUSH
38908: DOUBLE
38909: LD_EXP 135
38913: PUSH
38914: LD_VAR 0 6
38918: ARRAY
38919: INC
38920: ST_TO_ADDR
38921: LD_INT 1
38923: PUSH
38924: FOR_DOWNTO
38925: IFFALSE 39088
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38927: LD_EXP 135
38931: PUSH
38932: LD_VAR 0 6
38936: ARRAY
38937: PUSH
38938: LD_VAR 0 5
38942: ARRAY
38943: PUSH
38944: LD_INT 1
38946: ARRAY
38947: PPUSH
38948: LD_EXP 135
38952: PUSH
38953: LD_VAR 0 6
38957: ARRAY
38958: PUSH
38959: LD_VAR 0 5
38963: ARRAY
38964: PUSH
38965: LD_INT 2
38967: ARRAY
38968: PPUSH
38969: LD_VAR 0 2
38973: PPUSH
38974: LD_VAR 0 3
38978: PPUSH
38979: CALL_OW 298
38983: PUSH
38984: LD_INT 6
38986: LESS
38987: IFFALSE 39086
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38989: LD_EXP 135
38993: PUSH
38994: LD_VAR 0 6
38998: ARRAY
38999: PUSH
39000: LD_VAR 0 5
39004: ARRAY
39005: PUSH
39006: LD_INT 1
39008: ARRAY
39009: PPUSH
39010: LD_EXP 135
39014: PUSH
39015: LD_VAR 0 6
39019: ARRAY
39020: PUSH
39021: LD_VAR 0 5
39025: ARRAY
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: PPUSH
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 255
39040: PPUSH
39041: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39045: LD_ADDR_EXP 135
39049: PUSH
39050: LD_EXP 135
39054: PPUSH
39055: LD_VAR 0 6
39059: PPUSH
39060: LD_EXP 135
39064: PUSH
39065: LD_VAR 0 6
39069: ARRAY
39070: PPUSH
39071: LD_VAR 0 5
39075: PPUSH
39076: CALL_OW 3
39080: PPUSH
39081: CALL_OW 1
39085: ST_TO_ADDR
// end ; end ;
39086: GO 38924
39088: POP
39089: POP
// end ;
39090: LD_VAR 0 4
39094: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39095: LD_INT 0
39097: PPUSH
39098: PPUSH
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39106: LD_VAR 0 1
39110: PPUSH
39111: CALL_OW 264
39115: PUSH
39116: LD_EXP 59
39120: EQUAL
39121: NOT
39122: PUSH
39123: LD_VAR 0 1
39127: PUSH
39128: LD_EXP 134
39132: IN
39133: NOT
39134: OR
39135: IFFALSE 39139
// exit ;
39137: GO 39461
// index := GetElementIndex ( minersList , unit ) ;
39139: LD_ADDR_VAR 0 6
39143: PUSH
39144: LD_EXP 134
39148: PPUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: CALL 44617 0 2
39158: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39159: LD_ADDR_VAR 0 8
39163: PUSH
39164: LD_EXP 136
39168: PUSH
39169: LD_EXP 135
39173: PUSH
39174: LD_VAR 0 6
39178: ARRAY
39179: MINUS
39180: ST_TO_ADDR
// if not minesFreeAmount then
39181: LD_VAR 0 8
39185: NOT
39186: IFFALSE 39190
// exit ;
39188: GO 39461
// tmp := [ ] ;
39190: LD_ADDR_VAR 0 7
39194: PUSH
39195: EMPTY
39196: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: DOUBLE
39203: LD_INT 1
39205: DEC
39206: ST_TO_ADDR
39207: LD_VAR 0 8
39211: PUSH
39212: FOR_TO
39213: IFFALSE 39408
// begin _d := rand ( 0 , 5 ) ;
39215: LD_ADDR_VAR 0 11
39219: PUSH
39220: LD_INT 0
39222: PPUSH
39223: LD_INT 5
39225: PPUSH
39226: CALL_OW 12
39230: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39231: LD_ADDR_VAR 0 12
39235: PUSH
39236: LD_INT 2
39238: PPUSH
39239: LD_INT 6
39241: PPUSH
39242: CALL_OW 12
39246: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39247: LD_ADDR_VAR 0 9
39251: PUSH
39252: LD_VAR 0 2
39256: PPUSH
39257: LD_VAR 0 11
39261: PPUSH
39262: LD_VAR 0 12
39266: PPUSH
39267: CALL_OW 272
39271: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39272: LD_ADDR_VAR 0 10
39276: PUSH
39277: LD_VAR 0 3
39281: PPUSH
39282: LD_VAR 0 11
39286: PPUSH
39287: LD_VAR 0 12
39291: PPUSH
39292: CALL_OW 273
39296: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39297: LD_VAR 0 9
39301: PPUSH
39302: LD_VAR 0 10
39306: PPUSH
39307: CALL_OW 488
39311: PUSH
39312: LD_VAR 0 9
39316: PUSH
39317: LD_VAR 0 10
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_VAR 0 7
39330: IN
39331: NOT
39332: AND
39333: PUSH
39334: LD_VAR 0 9
39338: PPUSH
39339: LD_VAR 0 10
39343: PPUSH
39344: CALL_OW 458
39348: NOT
39349: AND
39350: IFFALSE 39392
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39352: LD_ADDR_VAR 0 7
39356: PUSH
39357: LD_VAR 0 7
39361: PPUSH
39362: LD_VAR 0 7
39366: PUSH
39367: LD_INT 1
39369: PLUS
39370: PPUSH
39371: LD_VAR 0 9
39375: PUSH
39376: LD_VAR 0 10
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PPUSH
39385: CALL_OW 1
39389: ST_TO_ADDR
39390: GO 39406
// i := i - 1 ;
39392: LD_ADDR_VAR 0 5
39396: PUSH
39397: LD_VAR 0 5
39401: PUSH
39402: LD_INT 1
39404: MINUS
39405: ST_TO_ADDR
// end ;
39406: GO 39212
39408: POP
39409: POP
// for i in tmp do
39410: LD_ADDR_VAR 0 5
39414: PUSH
39415: LD_VAR 0 7
39419: PUSH
39420: FOR_IN
39421: IFFALSE 39459
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39423: LD_VAR 0 1
39427: PPUSH
39428: LD_VAR 0 5
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: PPUSH
39437: LD_VAR 0 5
39441: PUSH
39442: LD_INT 2
39444: ARRAY
39445: PPUSH
39446: CALL 38401 0 3
39450: NOT
39451: IFFALSE 39457
// exit ;
39453: POP
39454: POP
39455: GO 39461
39457: GO 39420
39459: POP
39460: POP
// end ;
39461: LD_VAR 0 4
39465: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39466: LD_INT 0
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
// if not GetClass ( unit ) = class_sniper then
39475: LD_VAR 0 1
39479: PPUSH
39480: CALL_OW 257
39484: PUSH
39485: LD_INT 5
39487: EQUAL
39488: NOT
39489: IFFALSE 39493
// exit ;
39491: GO 39881
// dist := 8 ;
39493: LD_ADDR_VAR 0 5
39497: PUSH
39498: LD_INT 8
39500: ST_TO_ADDR
// viewRange := 12 ;
39501: LD_ADDR_VAR 0 7
39505: PUSH
39506: LD_INT 12
39508: ST_TO_ADDR
// side := GetSide ( unit ) ;
39509: LD_ADDR_VAR 0 6
39513: PUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 255
39523: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39524: LD_INT 61
39526: PPUSH
39527: LD_VAR 0 6
39531: PPUSH
39532: CALL_OW 321
39536: PUSH
39537: LD_INT 2
39539: EQUAL
39540: IFFALSE 39550
// viewRange := 16 ;
39542: LD_ADDR_VAR 0 7
39546: PUSH
39547: LD_INT 16
39549: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39550: LD_VAR 0 1
39554: PPUSH
39555: LD_VAR 0 2
39559: PPUSH
39560: LD_VAR 0 3
39564: PPUSH
39565: CALL_OW 297
39569: PUSH
39570: LD_VAR 0 5
39574: GREATER
39575: IFFALSE 39654
// begin ComMoveXY ( unit , x , y ) ;
39577: LD_VAR 0 1
39581: PPUSH
39582: LD_VAR 0 2
39586: PPUSH
39587: LD_VAR 0 3
39591: PPUSH
39592: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39596: LD_INT 35
39598: PPUSH
39599: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39603: LD_VAR 0 1
39607: PPUSH
39608: LD_VAR 0 2
39612: PPUSH
39613: LD_VAR 0 3
39617: PPUSH
39618: CALL 75014 0 3
39622: NOT
39623: IFFALSE 39627
// exit ;
39625: GO 39881
// until GetDistUnitXY ( unit , x , y ) < dist ;
39627: LD_VAR 0 1
39631: PPUSH
39632: LD_VAR 0 2
39636: PPUSH
39637: LD_VAR 0 3
39641: PPUSH
39642: CALL_OW 297
39646: PUSH
39647: LD_VAR 0 5
39651: LESS
39652: IFFALSE 39596
// end ; ComTurnXY ( unit , x , y ) ;
39654: LD_VAR 0 1
39658: PPUSH
39659: LD_VAR 0 2
39663: PPUSH
39664: LD_VAR 0 3
39668: PPUSH
39669: CALL_OW 118
// wait ( 5 ) ;
39673: LD_INT 5
39675: PPUSH
39676: CALL_OW 67
// _d := GetDir ( unit ) ;
39680: LD_ADDR_VAR 0 10
39684: PUSH
39685: LD_VAR 0 1
39689: PPUSH
39690: CALL_OW 254
39694: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39695: LD_ADDR_VAR 0 8
39699: PUSH
39700: LD_VAR 0 1
39704: PPUSH
39705: CALL_OW 250
39709: PPUSH
39710: LD_VAR 0 10
39714: PPUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: CALL_OW 272
39724: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39725: LD_ADDR_VAR 0 9
39729: PUSH
39730: LD_VAR 0 1
39734: PPUSH
39735: CALL_OW 251
39739: PPUSH
39740: LD_VAR 0 10
39744: PPUSH
39745: LD_VAR 0 5
39749: PPUSH
39750: CALL_OW 273
39754: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39755: LD_VAR 0 8
39759: PPUSH
39760: LD_VAR 0 9
39764: PPUSH
39765: CALL_OW 488
39769: NOT
39770: IFFALSE 39774
// exit ;
39772: GO 39881
// ComAnimCustom ( unit , 1 ) ;
39774: LD_VAR 0 1
39778: PPUSH
39779: LD_INT 1
39781: PPUSH
39782: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39786: LD_VAR 0 8
39790: PPUSH
39791: LD_VAR 0 9
39795: PPUSH
39796: LD_VAR 0 6
39800: PPUSH
39801: LD_VAR 0 7
39805: PPUSH
39806: CALL_OW 330
// repeat wait ( 1 ) ;
39810: LD_INT 1
39812: PPUSH
39813: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39817: LD_VAR 0 1
39821: PPUSH
39822: CALL_OW 316
39826: PUSH
39827: LD_VAR 0 1
39831: PPUSH
39832: CALL_OW 314
39836: OR
39837: PUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL_OW 302
39847: NOT
39848: OR
39849: PUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 301
39859: OR
39860: IFFALSE 39810
// RemoveSeeing ( _x , _y , side ) ;
39862: LD_VAR 0 8
39866: PPUSH
39867: LD_VAR 0 9
39871: PPUSH
39872: LD_VAR 0 6
39876: PPUSH
39877: CALL_OW 331
// end ; end_of_file
39881: LD_VAR 0 4
39885: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39886: LD_INT 0
39888: PPUSH
39889: PPUSH
// if exist_mode then
39890: LD_VAR 0 2
39894: IFFALSE 39919
// unit := CreateCharacter ( prefix & ident ) else
39896: LD_ADDR_VAR 0 5
39900: PUSH
39901: LD_VAR 0 3
39905: PUSH
39906: LD_VAR 0 1
39910: STR
39911: PPUSH
39912: CALL_OW 34
39916: ST_TO_ADDR
39917: GO 39934
// unit := NewCharacter ( ident ) ;
39919: LD_ADDR_VAR 0 5
39923: PUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 25
39933: ST_TO_ADDR
// result := unit ;
39934: LD_ADDR_VAR 0 4
39938: PUSH
39939: LD_VAR 0 5
39943: ST_TO_ADDR
// end ;
39944: LD_VAR 0 4
39948: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39949: LD_INT 0
39951: PPUSH
39952: PPUSH
// if not side or not nation then
39953: LD_VAR 0 1
39957: NOT
39958: PUSH
39959: LD_VAR 0 2
39963: NOT
39964: OR
39965: IFFALSE 39969
// exit ;
39967: GO 40733
// case nation of nation_american :
39969: LD_VAR 0 2
39973: PUSH
39974: LD_INT 1
39976: DOUBLE
39977: EQUAL
39978: IFTRUE 39982
39980: GO 40196
39982: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39983: LD_ADDR_VAR 0 4
39987: PUSH
39988: LD_INT 35
39990: PUSH
39991: LD_INT 45
39993: PUSH
39994: LD_INT 46
39996: PUSH
39997: LD_INT 47
39999: PUSH
40000: LD_INT 82
40002: PUSH
40003: LD_INT 83
40005: PUSH
40006: LD_INT 84
40008: PUSH
40009: LD_INT 85
40011: PUSH
40012: LD_INT 86
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 6
40023: PUSH
40024: LD_INT 15
40026: PUSH
40027: LD_INT 16
40029: PUSH
40030: LD_INT 7
40032: PUSH
40033: LD_INT 12
40035: PUSH
40036: LD_INT 13
40038: PUSH
40039: LD_INT 10
40041: PUSH
40042: LD_INT 14
40044: PUSH
40045: LD_INT 20
40047: PUSH
40048: LD_INT 21
40050: PUSH
40051: LD_INT 22
40053: PUSH
40054: LD_INT 25
40056: PUSH
40057: LD_INT 32
40059: PUSH
40060: LD_INT 27
40062: PUSH
40063: LD_INT 36
40065: PUSH
40066: LD_INT 69
40068: PUSH
40069: LD_INT 39
40071: PUSH
40072: LD_INT 34
40074: PUSH
40075: LD_INT 40
40077: PUSH
40078: LD_INT 48
40080: PUSH
40081: LD_INT 49
40083: PUSH
40084: LD_INT 50
40086: PUSH
40087: LD_INT 51
40089: PUSH
40090: LD_INT 52
40092: PUSH
40093: LD_INT 53
40095: PUSH
40096: LD_INT 54
40098: PUSH
40099: LD_INT 55
40101: PUSH
40102: LD_INT 56
40104: PUSH
40105: LD_INT 57
40107: PUSH
40108: LD_INT 58
40110: PUSH
40111: LD_INT 59
40113: PUSH
40114: LD_INT 60
40116: PUSH
40117: LD_INT 61
40119: PUSH
40120: LD_INT 62
40122: PUSH
40123: LD_INT 80
40125: PUSH
40126: LD_INT 82
40128: PUSH
40129: LD_INT 83
40131: PUSH
40132: LD_INT 84
40134: PUSH
40135: LD_INT 85
40137: PUSH
40138: LD_INT 86
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: ST_TO_ADDR
40194: GO 40657
40196: LD_INT 2
40198: DOUBLE
40199: EQUAL
40200: IFTRUE 40204
40202: GO 40426
40204: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
40205: LD_ADDR_VAR 0 4
40209: PUSH
40210: LD_INT 35
40212: PUSH
40213: LD_INT 45
40215: PUSH
40216: LD_INT 46
40218: PUSH
40219: LD_INT 47
40221: PUSH
40222: LD_INT 82
40224: PUSH
40225: LD_INT 83
40227: PUSH
40228: LD_INT 84
40230: PUSH
40231: LD_INT 85
40233: PUSH
40234: LD_INT 87
40236: PUSH
40237: LD_INT 70
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: LD_INT 11
40245: PUSH
40246: LD_INT 3
40248: PUSH
40249: LD_INT 4
40251: PUSH
40252: LD_INT 5
40254: PUSH
40255: LD_INT 6
40257: PUSH
40258: LD_INT 15
40260: PUSH
40261: LD_INT 18
40263: PUSH
40264: LD_INT 7
40266: PUSH
40267: LD_INT 17
40269: PUSH
40270: LD_INT 8
40272: PUSH
40273: LD_INT 20
40275: PUSH
40276: LD_INT 21
40278: PUSH
40279: LD_INT 22
40281: PUSH
40282: LD_INT 72
40284: PUSH
40285: LD_INT 26
40287: PUSH
40288: LD_INT 69
40290: PUSH
40291: LD_INT 39
40293: PUSH
40294: LD_INT 40
40296: PUSH
40297: LD_INT 41
40299: PUSH
40300: LD_INT 42
40302: PUSH
40303: LD_INT 43
40305: PUSH
40306: LD_INT 48
40308: PUSH
40309: LD_INT 49
40311: PUSH
40312: LD_INT 50
40314: PUSH
40315: LD_INT 51
40317: PUSH
40318: LD_INT 52
40320: PUSH
40321: LD_INT 53
40323: PUSH
40324: LD_INT 54
40326: PUSH
40327: LD_INT 55
40329: PUSH
40330: LD_INT 56
40332: PUSH
40333: LD_INT 60
40335: PUSH
40336: LD_INT 61
40338: PUSH
40339: LD_INT 62
40341: PUSH
40342: LD_INT 66
40344: PUSH
40345: LD_INT 67
40347: PUSH
40348: LD_INT 68
40350: PUSH
40351: LD_INT 81
40353: PUSH
40354: LD_INT 82
40356: PUSH
40357: LD_INT 83
40359: PUSH
40360: LD_INT 84
40362: PUSH
40363: LD_INT 85
40365: PUSH
40366: LD_INT 87
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
40424: GO 40657
40426: LD_INT 3
40428: DOUBLE
40429: EQUAL
40430: IFTRUE 40434
40432: GO 40656
40434: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40435: LD_ADDR_VAR 0 4
40439: PUSH
40440: LD_INT 46
40442: PUSH
40443: LD_INT 47
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 82
40454: PUSH
40455: LD_INT 83
40457: PUSH
40458: LD_INT 84
40460: PUSH
40461: LD_INT 85
40463: PUSH
40464: LD_INT 86
40466: PUSH
40467: LD_INT 11
40469: PUSH
40470: LD_INT 9
40472: PUSH
40473: LD_INT 20
40475: PUSH
40476: LD_INT 19
40478: PUSH
40479: LD_INT 21
40481: PUSH
40482: LD_INT 24
40484: PUSH
40485: LD_INT 22
40487: PUSH
40488: LD_INT 25
40490: PUSH
40491: LD_INT 28
40493: PUSH
40494: LD_INT 29
40496: PUSH
40497: LD_INT 30
40499: PUSH
40500: LD_INT 31
40502: PUSH
40503: LD_INT 37
40505: PUSH
40506: LD_INT 38
40508: PUSH
40509: LD_INT 32
40511: PUSH
40512: LD_INT 27
40514: PUSH
40515: LD_INT 33
40517: PUSH
40518: LD_INT 69
40520: PUSH
40521: LD_INT 39
40523: PUSH
40524: LD_INT 34
40526: PUSH
40527: LD_INT 40
40529: PUSH
40530: LD_INT 71
40532: PUSH
40533: LD_INT 23
40535: PUSH
40536: LD_INT 44
40538: PUSH
40539: LD_INT 48
40541: PUSH
40542: LD_INT 49
40544: PUSH
40545: LD_INT 50
40547: PUSH
40548: LD_INT 51
40550: PUSH
40551: LD_INT 52
40553: PUSH
40554: LD_INT 53
40556: PUSH
40557: LD_INT 54
40559: PUSH
40560: LD_INT 55
40562: PUSH
40563: LD_INT 56
40565: PUSH
40566: LD_INT 57
40568: PUSH
40569: LD_INT 58
40571: PUSH
40572: LD_INT 59
40574: PUSH
40575: LD_INT 63
40577: PUSH
40578: LD_INT 64
40580: PUSH
40581: LD_INT 65
40583: PUSH
40584: LD_INT 82
40586: PUSH
40587: LD_INT 83
40589: PUSH
40590: LD_INT 84
40592: PUSH
40593: LD_INT 85
40595: PUSH
40596: LD_INT 86
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
40654: GO 40657
40656: POP
// if state > - 1 and state < 3 then
40657: LD_VAR 0 3
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: GREATER
40666: PUSH
40667: LD_VAR 0 3
40671: PUSH
40672: LD_INT 3
40674: LESS
40675: AND
40676: IFFALSE 40733
// for i in result do
40678: LD_ADDR_VAR 0 5
40682: PUSH
40683: LD_VAR 0 4
40687: PUSH
40688: FOR_IN
40689: IFFALSE 40731
// if GetTech ( i , side ) <> state then
40691: LD_VAR 0 5
40695: PPUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 321
40705: PUSH
40706: LD_VAR 0 3
40710: NONEQUAL
40711: IFFALSE 40729
// result := result diff i ;
40713: LD_ADDR_VAR 0 4
40717: PUSH
40718: LD_VAR 0 4
40722: PUSH
40723: LD_VAR 0 5
40727: DIFF
40728: ST_TO_ADDR
40729: GO 40688
40731: POP
40732: POP
// end ;
40733: LD_VAR 0 4
40737: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40738: LD_INT 0
40740: PPUSH
40741: PPUSH
40742: PPUSH
// result := true ;
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_INT 1
40750: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40751: LD_ADDR_VAR 0 5
40755: PUSH
40756: LD_VAR 0 2
40760: PPUSH
40761: CALL_OW 480
40765: ST_TO_ADDR
// if not tmp then
40766: LD_VAR 0 5
40770: NOT
40771: IFFALSE 40775
// exit ;
40773: GO 40824
// for i in tmp do
40775: LD_ADDR_VAR 0 4
40779: PUSH
40780: LD_VAR 0 5
40784: PUSH
40785: FOR_IN
40786: IFFALSE 40822
// if GetTech ( i , side ) <> state_researched then
40788: LD_VAR 0 4
40792: PPUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 321
40802: PUSH
40803: LD_INT 2
40805: NONEQUAL
40806: IFFALSE 40820
// begin result := false ;
40808: LD_ADDR_VAR 0 3
40812: PUSH
40813: LD_INT 0
40815: ST_TO_ADDR
// exit ;
40816: POP
40817: POP
40818: GO 40824
// end ;
40820: GO 40785
40822: POP
40823: POP
// end ;
40824: LD_VAR 0 3
40828: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40829: LD_INT 0
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40844: LD_VAR 0 1
40848: NOT
40849: PUSH
40850: LD_VAR 0 1
40854: PPUSH
40855: CALL_OW 257
40859: PUSH
40860: LD_INT 9
40862: NONEQUAL
40863: OR
40864: IFFALSE 40868
// exit ;
40866: GO 41441
// side := GetSide ( unit ) ;
40868: LD_ADDR_VAR 0 9
40872: PUSH
40873: LD_VAR 0 1
40877: PPUSH
40878: CALL_OW 255
40882: ST_TO_ADDR
// tech_space := tech_spacanom ;
40883: LD_ADDR_VAR 0 12
40887: PUSH
40888: LD_INT 29
40890: ST_TO_ADDR
// tech_time := tech_taurad ;
40891: LD_ADDR_VAR 0 13
40895: PUSH
40896: LD_INT 28
40898: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40899: LD_ADDR_VAR 0 11
40903: PUSH
40904: LD_VAR 0 1
40908: PPUSH
40909: CALL_OW 310
40913: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40914: LD_VAR 0 11
40918: PPUSH
40919: CALL_OW 247
40923: PUSH
40924: LD_INT 2
40926: EQUAL
40927: IFFALSE 40931
// exit ;
40929: GO 41441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40931: LD_ADDR_VAR 0 8
40935: PUSH
40936: LD_INT 81
40938: PUSH
40939: LD_VAR 0 9
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: LD_INT 21
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PPUSH
40969: CALL_OW 69
40973: ST_TO_ADDR
// if not tmp then
40974: LD_VAR 0 8
40978: NOT
40979: IFFALSE 40983
// exit ;
40981: GO 41441
// if in_unit then
40983: LD_VAR 0 11
40987: IFFALSE 41011
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40989: LD_ADDR_VAR 0 10
40993: PUSH
40994: LD_VAR 0 8
40998: PPUSH
40999: LD_VAR 0 11
41003: PPUSH
41004: CALL_OW 74
41008: ST_TO_ADDR
41009: GO 41031
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41011: LD_ADDR_VAR 0 10
41015: PUSH
41016: LD_VAR 0 8
41020: PPUSH
41021: LD_VAR 0 1
41025: PPUSH
41026: CALL_OW 74
41030: ST_TO_ADDR
// if not enemy then
41031: LD_VAR 0 10
41035: NOT
41036: IFFALSE 41040
// exit ;
41038: GO 41441
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41040: LD_VAR 0 11
41044: PUSH
41045: LD_VAR 0 11
41049: PPUSH
41050: LD_VAR 0 10
41054: PPUSH
41055: CALL_OW 296
41059: PUSH
41060: LD_INT 13
41062: GREATER
41063: AND
41064: PUSH
41065: LD_VAR 0 1
41069: PPUSH
41070: LD_VAR 0 10
41074: PPUSH
41075: CALL_OW 296
41079: PUSH
41080: LD_INT 12
41082: GREATER
41083: OR
41084: IFFALSE 41088
// exit ;
41086: GO 41441
// missile := [ 1 ] ;
41088: LD_ADDR_VAR 0 14
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: EMPTY
41097: LIST
41098: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41099: LD_VAR 0 9
41103: PPUSH
41104: LD_VAR 0 12
41108: PPUSH
41109: CALL_OW 325
41113: IFFALSE 41142
// missile := Insert ( missile , missile + 1 , 2 ) ;
41115: LD_ADDR_VAR 0 14
41119: PUSH
41120: LD_VAR 0 14
41124: PPUSH
41125: LD_VAR 0 14
41129: PUSH
41130: LD_INT 1
41132: PLUS
41133: PPUSH
41134: LD_INT 2
41136: PPUSH
41137: CALL_OW 2
41141: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41142: LD_VAR 0 9
41146: PPUSH
41147: LD_VAR 0 13
41151: PPUSH
41152: CALL_OW 325
41156: PUSH
41157: LD_VAR 0 10
41161: PPUSH
41162: CALL_OW 255
41166: PPUSH
41167: LD_VAR 0 13
41171: PPUSH
41172: CALL_OW 325
41176: NOT
41177: AND
41178: IFFALSE 41207
// missile := Insert ( missile , missile + 1 , 3 ) ;
41180: LD_ADDR_VAR 0 14
41184: PUSH
41185: LD_VAR 0 14
41189: PPUSH
41190: LD_VAR 0 14
41194: PUSH
41195: LD_INT 1
41197: PLUS
41198: PPUSH
41199: LD_INT 3
41201: PPUSH
41202: CALL_OW 2
41206: ST_TO_ADDR
// if missile < 2 then
41207: LD_VAR 0 14
41211: PUSH
41212: LD_INT 2
41214: LESS
41215: IFFALSE 41219
// exit ;
41217: GO 41441
// x := GetX ( enemy ) ;
41219: LD_ADDR_VAR 0 4
41223: PUSH
41224: LD_VAR 0 10
41228: PPUSH
41229: CALL_OW 250
41233: ST_TO_ADDR
// y := GetY ( enemy ) ;
41234: LD_ADDR_VAR 0 5
41238: PUSH
41239: LD_VAR 0 10
41243: PPUSH
41244: CALL_OW 251
41248: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41249: LD_ADDR_VAR 0 6
41253: PUSH
41254: LD_VAR 0 4
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PPUSH
41263: LD_INT 1
41265: PPUSH
41266: CALL_OW 12
41270: PLUS
41271: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41272: LD_ADDR_VAR 0 7
41276: PUSH
41277: LD_VAR 0 5
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PPUSH
41286: LD_INT 1
41288: PPUSH
41289: CALL_OW 12
41293: PLUS
41294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41295: LD_VAR 0 6
41299: PPUSH
41300: LD_VAR 0 7
41304: PPUSH
41305: CALL_OW 488
41309: NOT
41310: IFFALSE 41332
// begin _x := x ;
41312: LD_ADDR_VAR 0 6
41316: PUSH
41317: LD_VAR 0 4
41321: ST_TO_ADDR
// _y := y ;
41322: LD_ADDR_VAR 0 7
41326: PUSH
41327: LD_VAR 0 5
41331: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_INT 1
41339: PPUSH
41340: LD_VAR 0 14
41344: PPUSH
41345: CALL_OW 12
41349: ST_TO_ADDR
// case i of 1 :
41350: LD_VAR 0 3
41354: PUSH
41355: LD_INT 1
41357: DOUBLE
41358: EQUAL
41359: IFTRUE 41363
41361: GO 41380
41363: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41364: LD_VAR 0 1
41368: PPUSH
41369: LD_VAR 0 10
41373: PPUSH
41374: CALL_OW 115
41378: GO 41441
41380: LD_INT 2
41382: DOUBLE
41383: EQUAL
41384: IFTRUE 41388
41386: GO 41410
41388: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41389: LD_VAR 0 1
41393: PPUSH
41394: LD_VAR 0 6
41398: PPUSH
41399: LD_VAR 0 7
41403: PPUSH
41404: CALL_OW 153
41408: GO 41441
41410: LD_INT 3
41412: DOUBLE
41413: EQUAL
41414: IFTRUE 41418
41416: GO 41440
41418: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41419: LD_VAR 0 1
41423: PPUSH
41424: LD_VAR 0 6
41428: PPUSH
41429: LD_VAR 0 7
41433: PPUSH
41434: CALL_OW 154
41438: GO 41441
41440: POP
// end ;
41441: LD_VAR 0 2
41445: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
// if not unit or not building then
41454: LD_VAR 0 1
41458: NOT
41459: PUSH
41460: LD_VAR 0 2
41464: NOT
41465: OR
41466: IFFALSE 41470
// exit ;
41468: GO 41628
// x := GetX ( building ) ;
41470: LD_ADDR_VAR 0 5
41474: PUSH
41475: LD_VAR 0 2
41479: PPUSH
41480: CALL_OW 250
41484: ST_TO_ADDR
// y := GetY ( building ) ;
41485: LD_ADDR_VAR 0 6
41489: PUSH
41490: LD_VAR 0 2
41494: PPUSH
41495: CALL_OW 251
41499: ST_TO_ADDR
// for i = 0 to 5 do
41500: LD_ADDR_VAR 0 4
41504: PUSH
41505: DOUBLE
41506: LD_INT 0
41508: DEC
41509: ST_TO_ADDR
41510: LD_INT 5
41512: PUSH
41513: FOR_TO
41514: IFFALSE 41626
// begin _x := ShiftX ( x , i , 3 ) ;
41516: LD_ADDR_VAR 0 7
41520: PUSH
41521: LD_VAR 0 5
41525: PPUSH
41526: LD_VAR 0 4
41530: PPUSH
41531: LD_INT 3
41533: PPUSH
41534: CALL_OW 272
41538: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41539: LD_ADDR_VAR 0 8
41543: PUSH
41544: LD_VAR 0 6
41548: PPUSH
41549: LD_VAR 0 4
41553: PPUSH
41554: LD_INT 3
41556: PPUSH
41557: CALL_OW 273
41561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41562: LD_VAR 0 7
41566: PPUSH
41567: LD_VAR 0 8
41571: PPUSH
41572: CALL_OW 488
41576: NOT
41577: IFFALSE 41581
// continue ;
41579: GO 41513
// if HexInfo ( _x , _y ) = 0 then
41581: LD_VAR 0 7
41585: PPUSH
41586: LD_VAR 0 8
41590: PPUSH
41591: CALL_OW 428
41595: PUSH
41596: LD_INT 0
41598: EQUAL
41599: IFFALSE 41624
// begin ComMoveXY ( unit , _x , _y ) ;
41601: LD_VAR 0 1
41605: PPUSH
41606: LD_VAR 0 7
41610: PPUSH
41611: LD_VAR 0 8
41615: PPUSH
41616: CALL_OW 111
// exit ;
41620: POP
41621: POP
41622: GO 41628
// end ; end ;
41624: GO 41513
41626: POP
41627: POP
// end ;
41628: LD_VAR 0 3
41632: RET
// export function ScanBase ( side , base_area ) ; begin
41633: LD_INT 0
41635: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41636: LD_ADDR_VAR 0 3
41640: PUSH
41641: LD_VAR 0 2
41645: PPUSH
41646: LD_INT 81
41648: PUSH
41649: LD_VAR 0 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PPUSH
41658: CALL_OW 70
41662: ST_TO_ADDR
// end ;
41663: LD_VAR 0 3
41667: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41668: LD_INT 0
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
// result := false ;
41674: LD_ADDR_VAR 0 2
41678: PUSH
41679: LD_INT 0
41681: ST_TO_ADDR
// side := GetSide ( unit ) ;
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 255
41696: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41697: LD_ADDR_VAR 0 4
41701: PUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 248
41711: ST_TO_ADDR
// case nat of 1 :
41712: LD_VAR 0 4
41716: PUSH
41717: LD_INT 1
41719: DOUBLE
41720: EQUAL
41721: IFTRUE 41725
41723: GO 41736
41725: POP
// tech := tech_lassight ; 2 :
41726: LD_ADDR_VAR 0 5
41730: PUSH
41731: LD_INT 12
41733: ST_TO_ADDR
41734: GO 41775
41736: LD_INT 2
41738: DOUBLE
41739: EQUAL
41740: IFTRUE 41744
41742: GO 41755
41744: POP
// tech := tech_mortar ; 3 :
41745: LD_ADDR_VAR 0 5
41749: PUSH
41750: LD_INT 41
41752: ST_TO_ADDR
41753: GO 41775
41755: LD_INT 3
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41774
41763: POP
// tech := tech_bazooka ; end ;
41764: LD_ADDR_VAR 0 5
41768: PUSH
41769: LD_INT 44
41771: ST_TO_ADDR
41772: GO 41775
41774: POP
// if Researched ( side , tech ) then
41775: LD_VAR 0 3
41779: PPUSH
41780: LD_VAR 0 5
41784: PPUSH
41785: CALL_OW 325
41789: IFFALSE 41816
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41791: LD_ADDR_VAR 0 2
41795: PUSH
41796: LD_INT 5
41798: PUSH
41799: LD_INT 8
41801: PUSH
41802: LD_INT 9
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: PUSH
41810: LD_VAR 0 4
41814: ARRAY
41815: ST_TO_ADDR
// end ;
41816: LD_VAR 0 2
41820: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41821: LD_INT 0
41823: PPUSH
41824: PPUSH
41825: PPUSH
// if not mines then
41826: LD_VAR 0 2
41830: NOT
41831: IFFALSE 41835
// exit ;
41833: GO 41979
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41835: LD_ADDR_VAR 0 5
41839: PUSH
41840: LD_INT 81
41842: PUSH
41843: LD_VAR 0 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: LD_INT 21
41857: PUSH
41858: LD_INT 3
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PPUSH
41873: CALL_OW 69
41877: ST_TO_ADDR
// for i in mines do
41878: LD_ADDR_VAR 0 4
41882: PUSH
41883: LD_VAR 0 2
41887: PUSH
41888: FOR_IN
41889: IFFALSE 41977
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41891: LD_VAR 0 4
41895: PUSH
41896: LD_INT 1
41898: ARRAY
41899: PPUSH
41900: LD_VAR 0 4
41904: PUSH
41905: LD_INT 2
41907: ARRAY
41908: PPUSH
41909: CALL_OW 458
41913: NOT
41914: IFFALSE 41918
// continue ;
41916: GO 41888
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41918: LD_VAR 0 4
41922: PUSH
41923: LD_INT 1
41925: ARRAY
41926: PPUSH
41927: LD_VAR 0 4
41931: PUSH
41932: LD_INT 2
41934: ARRAY
41935: PPUSH
41936: CALL_OW 428
41940: PUSH
41941: LD_VAR 0 5
41945: IN
41946: IFFALSE 41975
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41948: LD_VAR 0 4
41952: PUSH
41953: LD_INT 1
41955: ARRAY
41956: PPUSH
41957: LD_VAR 0 4
41961: PUSH
41962: LD_INT 2
41964: ARRAY
41965: PPUSH
41966: LD_VAR 0 1
41970: PPUSH
41971: CALL_OW 456
// end ;
41975: GO 41888
41977: POP
41978: POP
// end ;
41979: LD_VAR 0 3
41983: RET
// export function Count ( array ) ; var i ; begin
41984: LD_INT 0
41986: PPUSH
41987: PPUSH
// result := 0 ;
41988: LD_ADDR_VAR 0 2
41992: PUSH
41993: LD_INT 0
41995: ST_TO_ADDR
// for i in array do
41996: LD_ADDR_VAR 0 3
42000: PUSH
42001: LD_VAR 0 1
42005: PUSH
42006: FOR_IN
42007: IFFALSE 42031
// if i then
42009: LD_VAR 0 3
42013: IFFALSE 42029
// result := result + 1 ;
42015: LD_ADDR_VAR 0 2
42019: PUSH
42020: LD_VAR 0 2
42024: PUSH
42025: LD_INT 1
42027: PLUS
42028: ST_TO_ADDR
42029: GO 42006
42031: POP
42032: POP
// end ;
42033: LD_VAR 0 2
42037: RET
// export function IsEmpty ( building ) ; begin
42038: LD_INT 0
42040: PPUSH
// if not building then
42041: LD_VAR 0 1
42045: NOT
42046: IFFALSE 42050
// exit ;
42048: GO 42093
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42050: LD_ADDR_VAR 0 2
42054: PUSH
42055: LD_VAR 0 1
42059: PUSH
42060: LD_INT 22
42062: PUSH
42063: LD_VAR 0 1
42067: PPUSH
42068: CALL_OW 255
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 58
42079: PUSH
42080: EMPTY
42081: LIST
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PPUSH
42087: CALL_OW 69
42091: IN
42092: ST_TO_ADDR
// end ;
42093: LD_VAR 0 2
42097: RET
// export function IsNotFull ( building ) ; begin
42098: LD_INT 0
42100: PPUSH
// if not building then
42101: LD_VAR 0 1
42105: NOT
42106: IFFALSE 42110
// exit ;
42108: GO 42129
// result := UnitsInside ( building ) < 6 ;
42110: LD_ADDR_VAR 0 2
42114: PUSH
42115: LD_VAR 0 1
42119: PPUSH
42120: CALL_OW 313
42124: PUSH
42125: LD_INT 6
42127: LESS
42128: ST_TO_ADDR
// end ;
42129: LD_VAR 0 2
42133: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42134: LD_INT 0
42136: PPUSH
42137: PPUSH
42138: PPUSH
42139: PPUSH
// tmp := [ ] ;
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: EMPTY
42146: ST_TO_ADDR
// list := [ ] ;
42147: LD_ADDR_VAR 0 5
42151: PUSH
42152: EMPTY
42153: ST_TO_ADDR
// for i = 16 to 25 do
42154: LD_ADDR_VAR 0 4
42158: PUSH
42159: DOUBLE
42160: LD_INT 16
42162: DEC
42163: ST_TO_ADDR
42164: LD_INT 25
42166: PUSH
42167: FOR_TO
42168: IFFALSE 42241
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42170: LD_ADDR_VAR 0 3
42174: PUSH
42175: LD_VAR 0 3
42179: PUSH
42180: LD_INT 22
42182: PUSH
42183: LD_VAR 0 1
42187: PPUSH
42188: CALL_OW 255
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 91
42199: PUSH
42200: LD_VAR 0 1
42204: PUSH
42205: LD_INT 6
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 30
42215: PUSH
42216: LD_VAR 0 4
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: PPUSH
42233: CALL_OW 69
42237: ADD
42238: ST_TO_ADDR
42239: GO 42167
42241: POP
42242: POP
// for i = 1 to tmp do
42243: LD_ADDR_VAR 0 4
42247: PUSH
42248: DOUBLE
42249: LD_INT 1
42251: DEC
42252: ST_TO_ADDR
42253: LD_VAR 0 3
42257: PUSH
42258: FOR_TO
42259: IFFALSE 42347
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42261: LD_ADDR_VAR 0 5
42265: PUSH
42266: LD_VAR 0 5
42270: PUSH
42271: LD_VAR 0 3
42275: PUSH
42276: LD_VAR 0 4
42280: ARRAY
42281: PPUSH
42282: CALL_OW 266
42286: PUSH
42287: LD_VAR 0 3
42291: PUSH
42292: LD_VAR 0 4
42296: ARRAY
42297: PPUSH
42298: CALL_OW 250
42302: PUSH
42303: LD_VAR 0 3
42307: PUSH
42308: LD_VAR 0 4
42312: ARRAY
42313: PPUSH
42314: CALL_OW 251
42318: PUSH
42319: LD_VAR 0 3
42323: PUSH
42324: LD_VAR 0 4
42328: ARRAY
42329: PPUSH
42330: CALL_OW 254
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: ADD
42344: ST_TO_ADDR
42345: GO 42258
42347: POP
42348: POP
// result := list ;
42349: LD_ADDR_VAR 0 2
42353: PUSH
42354: LD_VAR 0 5
42358: ST_TO_ADDR
// end ;
42359: LD_VAR 0 2
42363: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42364: LD_INT 0
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
42370: PPUSH
42371: PPUSH
42372: PPUSH
// if not factory then
42373: LD_VAR 0 1
42377: NOT
42378: IFFALSE 42382
// exit ;
42380: GO 42975
// if control = control_apeman then
42382: LD_VAR 0 4
42386: PUSH
42387: LD_INT 5
42389: EQUAL
42390: IFFALSE 42499
// begin tmp := UnitsInside ( factory ) ;
42392: LD_ADDR_VAR 0 8
42396: PUSH
42397: LD_VAR 0 1
42401: PPUSH
42402: CALL_OW 313
42406: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42407: LD_VAR 0 8
42411: PPUSH
42412: LD_INT 25
42414: PUSH
42415: LD_INT 12
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PPUSH
42422: CALL_OW 72
42426: NOT
42427: IFFALSE 42437
// control := control_manual ;
42429: LD_ADDR_VAR 0 4
42433: PUSH
42434: LD_INT 1
42436: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42437: LD_ADDR_VAR 0 8
42441: PUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL 42134 0 1
42451: ST_TO_ADDR
// if tmp then
42452: LD_VAR 0 8
42456: IFFALSE 42499
// begin for i in tmp do
42458: LD_ADDR_VAR 0 7
42462: PUSH
42463: LD_VAR 0 8
42467: PUSH
42468: FOR_IN
42469: IFFALSE 42497
// if i [ 1 ] = b_ext_radio then
42471: LD_VAR 0 7
42475: PUSH
42476: LD_INT 1
42478: ARRAY
42479: PUSH
42480: LD_INT 22
42482: EQUAL
42483: IFFALSE 42495
// begin control := control_remote ;
42485: LD_ADDR_VAR 0 4
42489: PUSH
42490: LD_INT 2
42492: ST_TO_ADDR
// break ;
42493: GO 42497
// end ;
42495: GO 42468
42497: POP
42498: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42499: LD_VAR 0 1
42503: PPUSH
42504: LD_VAR 0 2
42508: PPUSH
42509: LD_VAR 0 3
42513: PPUSH
42514: LD_VAR 0 4
42518: PPUSH
42519: LD_VAR 0 5
42523: PPUSH
42524: CALL_OW 448
42528: IFFALSE 42563
// begin result := [ chassis , engine , control , weapon ] ;
42530: LD_ADDR_VAR 0 6
42534: PUSH
42535: LD_VAR 0 2
42539: PUSH
42540: LD_VAR 0 3
42544: PUSH
42545: LD_VAR 0 4
42549: PUSH
42550: LD_VAR 0 5
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: ST_TO_ADDR
// exit ;
42561: GO 42975
// end ; _chassis := AvailableChassisList ( factory ) ;
42563: LD_ADDR_VAR 0 9
42567: PUSH
42568: LD_VAR 0 1
42572: PPUSH
42573: CALL_OW 475
42577: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42578: LD_ADDR_VAR 0 11
42582: PUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: CALL_OW 476
42592: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42593: LD_ADDR_VAR 0 12
42597: PUSH
42598: LD_VAR 0 1
42602: PPUSH
42603: CALL_OW 477
42607: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42608: LD_ADDR_VAR 0 10
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: CALL_OW 478
42622: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42623: LD_VAR 0 9
42627: NOT
42628: PUSH
42629: LD_VAR 0 11
42633: NOT
42634: OR
42635: PUSH
42636: LD_VAR 0 12
42640: NOT
42641: OR
42642: PUSH
42643: LD_VAR 0 10
42647: NOT
42648: OR
42649: IFFALSE 42684
// begin result := [ chassis , engine , control , weapon ] ;
42651: LD_ADDR_VAR 0 6
42655: PUSH
42656: LD_VAR 0 2
42660: PUSH
42661: LD_VAR 0 3
42665: PUSH
42666: LD_VAR 0 4
42670: PUSH
42671: LD_VAR 0 5
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// exit ;
42682: GO 42975
// end ; if not chassis in _chassis then
42684: LD_VAR 0 2
42688: PUSH
42689: LD_VAR 0 9
42693: IN
42694: NOT
42695: IFFALSE 42721
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42697: LD_ADDR_VAR 0 2
42701: PUSH
42702: LD_VAR 0 9
42706: PUSH
42707: LD_INT 1
42709: PPUSH
42710: LD_VAR 0 9
42714: PPUSH
42715: CALL_OW 12
42719: ARRAY
42720: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42721: LD_VAR 0 2
42725: PPUSH
42726: LD_VAR 0 3
42730: PPUSH
42731: CALL 42980 0 2
42735: NOT
42736: IFFALSE 42795
// repeat engine := _engine [ 1 ] ;
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: LD_VAR 0 11
42747: PUSH
42748: LD_INT 1
42750: ARRAY
42751: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42752: LD_ADDR_VAR 0 11
42756: PUSH
42757: LD_VAR 0 11
42761: PPUSH
42762: LD_INT 1
42764: PPUSH
42765: CALL_OW 3
42769: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42770: LD_VAR 0 2
42774: PPUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: CALL 42980 0 2
42784: PUSH
42785: LD_VAR 0 11
42789: PUSH
42790: EMPTY
42791: EQUAL
42792: OR
42793: IFFALSE 42738
// if not control in _control then
42795: LD_VAR 0 4
42799: PUSH
42800: LD_VAR 0 12
42804: IN
42805: NOT
42806: IFFALSE 42832
// control := _control [ rand ( 1 , _control ) ] ;
42808: LD_ADDR_VAR 0 4
42812: PUSH
42813: LD_VAR 0 12
42817: PUSH
42818: LD_INT 1
42820: PPUSH
42821: LD_VAR 0 12
42825: PPUSH
42826: CALL_OW 12
42830: ARRAY
42831: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42832: LD_VAR 0 2
42836: PPUSH
42837: LD_VAR 0 5
42841: PPUSH
42842: CALL 43200 0 2
42846: NOT
42847: IFFALSE 42906
// repeat weapon := _weapon [ 1 ] ;
42849: LD_ADDR_VAR 0 5
42853: PUSH
42854: LD_VAR 0 10
42858: PUSH
42859: LD_INT 1
42861: ARRAY
42862: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42863: LD_ADDR_VAR 0 10
42867: PUSH
42868: LD_VAR 0 10
42872: PPUSH
42873: LD_INT 1
42875: PPUSH
42876: CALL_OW 3
42880: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42881: LD_VAR 0 2
42885: PPUSH
42886: LD_VAR 0 5
42890: PPUSH
42891: CALL 43200 0 2
42895: PUSH
42896: LD_VAR 0 10
42900: PUSH
42901: EMPTY
42902: EQUAL
42903: OR
42904: IFFALSE 42849
// result := [ ] ;
42906: LD_ADDR_VAR 0 6
42910: PUSH
42911: EMPTY
42912: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42913: LD_VAR 0 1
42917: PPUSH
42918: LD_VAR 0 2
42922: PPUSH
42923: LD_VAR 0 3
42927: PPUSH
42928: LD_VAR 0 4
42932: PPUSH
42933: LD_VAR 0 5
42937: PPUSH
42938: CALL_OW 448
42942: IFFALSE 42975
// result := [ chassis , engine , control , weapon ] ;
42944: LD_ADDR_VAR 0 6
42948: PUSH
42949: LD_VAR 0 2
42953: PUSH
42954: LD_VAR 0 3
42958: PUSH
42959: LD_VAR 0 4
42963: PUSH
42964: LD_VAR 0 5
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: ST_TO_ADDR
// end ;
42975: LD_VAR 0 6
42979: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42980: LD_INT 0
42982: PPUSH
// if not chassis or not engine then
42983: LD_VAR 0 1
42987: NOT
42988: PUSH
42989: LD_VAR 0 2
42993: NOT
42994: OR
42995: IFFALSE 42999
// exit ;
42997: GO 43195
// case engine of engine_solar :
42999: LD_VAR 0 2
43003: PUSH
43004: LD_INT 2
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43050
43012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 11
43020: PUSH
43021: LD_INT 12
43023: PUSH
43024: LD_INT 13
43026: PUSH
43027: LD_INT 14
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
43048: GO 43179
43050: LD_INT 1
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43120
43058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43059: LD_ADDR_VAR 0 3
43063: PUSH
43064: LD_INT 11
43066: PUSH
43067: LD_INT 12
43069: PUSH
43070: LD_INT 13
43072: PUSH
43073: LD_INT 14
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 3
43084: PUSH
43085: LD_INT 4
43087: PUSH
43088: LD_INT 5
43090: PUSH
43091: LD_INT 21
43093: PUSH
43094: LD_INT 23
43096: PUSH
43097: LD_INT 22
43099: PUSH
43100: LD_INT 24
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
43118: GO 43179
43120: LD_INT 3
43122: DOUBLE
43123: EQUAL
43124: IFTRUE 43128
43126: GO 43178
43128: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43129: LD_ADDR_VAR 0 3
43133: PUSH
43134: LD_INT 13
43136: PUSH
43137: LD_INT 14
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 4
43148: PUSH
43149: LD_INT 5
43151: PUSH
43152: LD_INT 21
43154: PUSH
43155: LD_INT 22
43157: PUSH
43158: LD_INT 23
43160: PUSH
43161: LD_INT 24
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
43176: GO 43179
43178: POP
// result := ( chassis in result ) ;
43179: LD_ADDR_VAR 0 3
43183: PUSH
43184: LD_VAR 0 1
43188: PUSH
43189: LD_VAR 0 3
43193: IN
43194: ST_TO_ADDR
// end ;
43195: LD_VAR 0 3
43199: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43200: LD_INT 0
43202: PPUSH
// if not chassis or not weapon then
43203: LD_VAR 0 1
43207: NOT
43208: PUSH
43209: LD_VAR 0 2
43213: NOT
43214: OR
43215: IFFALSE 43219
// exit ;
43217: GO 44245
// case weapon of us_machine_gun :
43219: LD_VAR 0 2
43223: PUSH
43224: LD_INT 2
43226: DOUBLE
43227: EQUAL
43228: IFTRUE 43232
43230: GO 43262
43232: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 3
43246: PUSH
43247: LD_INT 4
43249: PUSH
43250: LD_INT 5
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: ST_TO_ADDR
43260: GO 44229
43262: LD_INT 3
43264: DOUBLE
43265: EQUAL
43266: IFTRUE 43270
43268: GO 43300
43270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: LD_INT 4
43287: PUSH
43288: LD_INT 5
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
43298: GO 44229
43300: LD_INT 11
43302: DOUBLE
43303: EQUAL
43304: IFTRUE 43308
43306: GO 43338
43308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43309: LD_ADDR_VAR 0 3
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: LD_INT 3
43322: PUSH
43323: LD_INT 4
43325: PUSH
43326: LD_INT 5
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
43336: GO 44229
43338: LD_INT 4
43340: DOUBLE
43341: EQUAL
43342: IFTRUE 43346
43344: GO 43372
43346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43347: LD_ADDR_VAR 0 3
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: LD_INT 4
43360: PUSH
43361: LD_INT 5
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
43370: GO 44229
43372: LD_INT 5
43374: DOUBLE
43375: EQUAL
43376: IFTRUE 43380
43378: GO 43406
43380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43381: LD_ADDR_VAR 0 3
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 4
43394: PUSH
43395: LD_INT 5
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
43404: GO 44229
43406: LD_INT 9
43408: DOUBLE
43409: EQUAL
43410: IFTRUE 43414
43412: GO 43440
43414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43415: LD_ADDR_VAR 0 3
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: LD_INT 4
43428: PUSH
43429: LD_INT 5
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: ST_TO_ADDR
43438: GO 44229
43440: LD_INT 7
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43448
43446: GO 43474
43448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43449: LD_ADDR_VAR 0 3
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 3
43459: PUSH
43460: LD_INT 4
43462: PUSH
43463: LD_INT 5
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
43472: GO 44229
43474: LD_INT 12
43476: DOUBLE
43477: EQUAL
43478: IFTRUE 43482
43480: GO 43508
43482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43483: LD_ADDR_VAR 0 3
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: LD_INT 4
43496: PUSH
43497: LD_INT 5
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
43506: GO 44229
43508: LD_INT 13
43510: DOUBLE
43511: EQUAL
43512: IFTRUE 43516
43514: GO 43542
43516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43517: LD_ADDR_VAR 0 3
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 3
43527: PUSH
43528: LD_INT 4
43530: PUSH
43531: LD_INT 5
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
43540: GO 44229
43542: LD_INT 14
43544: DOUBLE
43545: EQUAL
43546: IFTRUE 43550
43548: GO 43568
43550: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43551: LD_ADDR_VAR 0 3
43555: PUSH
43556: LD_INT 4
43558: PUSH
43559: LD_INT 5
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: ST_TO_ADDR
43566: GO 44229
43568: LD_INT 6
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 43594
43576: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 4
43584: PUSH
43585: LD_INT 5
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: ST_TO_ADDR
43592: GO 44229
43594: LD_INT 10
43596: DOUBLE
43597: EQUAL
43598: IFTRUE 43602
43600: GO 43620
43602: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43603: LD_ADDR_VAR 0 3
43607: PUSH
43608: LD_INT 4
43610: PUSH
43611: LD_INT 5
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: ST_TO_ADDR
43618: GO 44229
43620: LD_INT 22
43622: DOUBLE
43623: EQUAL
43624: IFTRUE 43628
43626: GO 43654
43628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43629: LD_ADDR_VAR 0 3
43633: PUSH
43634: LD_INT 11
43636: PUSH
43637: LD_INT 12
43639: PUSH
43640: LD_INT 13
43642: PUSH
43643: LD_INT 14
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
43652: GO 44229
43654: LD_INT 23
43656: DOUBLE
43657: EQUAL
43658: IFTRUE 43662
43660: GO 43688
43662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43663: LD_ADDR_VAR 0 3
43667: PUSH
43668: LD_INT 11
43670: PUSH
43671: LD_INT 12
43673: PUSH
43674: LD_INT 13
43676: PUSH
43677: LD_INT 14
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: ST_TO_ADDR
43686: GO 44229
43688: LD_INT 24
43690: DOUBLE
43691: EQUAL
43692: IFTRUE 43696
43694: GO 43722
43696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: LD_INT 11
43704: PUSH
43705: LD_INT 12
43707: PUSH
43708: LD_INT 13
43710: PUSH
43711: LD_INT 14
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: ST_TO_ADDR
43720: GO 44229
43722: LD_INT 30
43724: DOUBLE
43725: EQUAL
43726: IFTRUE 43730
43728: GO 43756
43730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43731: LD_ADDR_VAR 0 3
43735: PUSH
43736: LD_INT 11
43738: PUSH
43739: LD_INT 12
43741: PUSH
43742: LD_INT 13
43744: PUSH
43745: LD_INT 14
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: ST_TO_ADDR
43754: GO 44229
43756: LD_INT 25
43758: DOUBLE
43759: EQUAL
43760: IFTRUE 43764
43762: GO 43782
43764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43765: LD_ADDR_VAR 0 3
43769: PUSH
43770: LD_INT 13
43772: PUSH
43773: LD_INT 14
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: ST_TO_ADDR
43780: GO 44229
43782: LD_INT 27
43784: DOUBLE
43785: EQUAL
43786: IFTRUE 43790
43788: GO 43808
43790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43791: LD_ADDR_VAR 0 3
43795: PUSH
43796: LD_INT 13
43798: PUSH
43799: LD_INT 14
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: ST_TO_ADDR
43806: GO 44229
43808: LD_INT 28
43810: DOUBLE
43811: EQUAL
43812: IFTRUE 43816
43814: GO 43834
43816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43817: LD_ADDR_VAR 0 3
43821: PUSH
43822: LD_INT 13
43824: PUSH
43825: LD_INT 14
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: ST_TO_ADDR
43832: GO 44229
43834: LD_INT 29
43836: DOUBLE
43837: EQUAL
43838: IFTRUE 43842
43840: GO 43860
43842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43843: LD_ADDR_VAR 0 3
43847: PUSH
43848: LD_INT 13
43850: PUSH
43851: LD_INT 14
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: ST_TO_ADDR
43858: GO 44229
43860: LD_INT 31
43862: DOUBLE
43863: EQUAL
43864: IFTRUE 43868
43866: GO 43886
43868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_INT 13
43876: PUSH
43877: LD_INT 14
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: ST_TO_ADDR
43884: GO 44229
43886: LD_INT 26
43888: DOUBLE
43889: EQUAL
43890: IFTRUE 43894
43892: GO 43912
43894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43895: LD_ADDR_VAR 0 3
43899: PUSH
43900: LD_INT 13
43902: PUSH
43903: LD_INT 14
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: ST_TO_ADDR
43910: GO 44229
43912: LD_INT 42
43914: DOUBLE
43915: EQUAL
43916: IFTRUE 43920
43918: GO 43946
43920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43921: LD_ADDR_VAR 0 3
43925: PUSH
43926: LD_INT 21
43928: PUSH
43929: LD_INT 22
43931: PUSH
43932: LD_INT 23
43934: PUSH
43935: LD_INT 24
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: ST_TO_ADDR
43944: GO 44229
43946: LD_INT 43
43948: DOUBLE
43949: EQUAL
43950: IFTRUE 43954
43952: GO 43980
43954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43955: LD_ADDR_VAR 0 3
43959: PUSH
43960: LD_INT 21
43962: PUSH
43963: LD_INT 22
43965: PUSH
43966: LD_INT 23
43968: PUSH
43969: LD_INT 24
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: ST_TO_ADDR
43978: GO 44229
43980: LD_INT 44
43982: DOUBLE
43983: EQUAL
43984: IFTRUE 43988
43986: GO 44014
43988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43989: LD_ADDR_VAR 0 3
43993: PUSH
43994: LD_INT 21
43996: PUSH
43997: LD_INT 22
43999: PUSH
44000: LD_INT 23
44002: PUSH
44003: LD_INT 24
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: ST_TO_ADDR
44012: GO 44229
44014: LD_INT 45
44016: DOUBLE
44017: EQUAL
44018: IFTRUE 44022
44020: GO 44048
44022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44023: LD_ADDR_VAR 0 3
44027: PUSH
44028: LD_INT 21
44030: PUSH
44031: LD_INT 22
44033: PUSH
44034: LD_INT 23
44036: PUSH
44037: LD_INT 24
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
44046: GO 44229
44048: LD_INT 49
44050: DOUBLE
44051: EQUAL
44052: IFTRUE 44056
44054: GO 44082
44056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44057: LD_ADDR_VAR 0 3
44061: PUSH
44062: LD_INT 21
44064: PUSH
44065: LD_INT 22
44067: PUSH
44068: LD_INT 23
44070: PUSH
44071: LD_INT 24
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: ST_TO_ADDR
44080: GO 44229
44082: LD_INT 51
44084: DOUBLE
44085: EQUAL
44086: IFTRUE 44090
44088: GO 44116
44090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44091: LD_ADDR_VAR 0 3
44095: PUSH
44096: LD_INT 21
44098: PUSH
44099: LD_INT 22
44101: PUSH
44102: LD_INT 23
44104: PUSH
44105: LD_INT 24
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: ST_TO_ADDR
44114: GO 44229
44116: LD_INT 52
44118: DOUBLE
44119: EQUAL
44120: IFTRUE 44124
44122: GO 44150
44124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44125: LD_ADDR_VAR 0 3
44129: PUSH
44130: LD_INT 21
44132: PUSH
44133: LD_INT 22
44135: PUSH
44136: LD_INT 23
44138: PUSH
44139: LD_INT 24
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: ST_TO_ADDR
44148: GO 44229
44150: LD_INT 53
44152: DOUBLE
44153: EQUAL
44154: IFTRUE 44158
44156: GO 44176
44158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44159: LD_ADDR_VAR 0 3
44163: PUSH
44164: LD_INT 23
44166: PUSH
44167: LD_INT 24
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: ST_TO_ADDR
44174: GO 44229
44176: LD_INT 46
44178: DOUBLE
44179: EQUAL
44180: IFTRUE 44184
44182: GO 44202
44184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_INT 23
44192: PUSH
44193: LD_INT 24
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: ST_TO_ADDR
44200: GO 44229
44202: LD_INT 47
44204: DOUBLE
44205: EQUAL
44206: IFTRUE 44210
44208: GO 44228
44210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44211: LD_ADDR_VAR 0 3
44215: PUSH
44216: LD_INT 23
44218: PUSH
44219: LD_INT 24
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: ST_TO_ADDR
44226: GO 44229
44228: POP
// result := ( chassis in result ) ;
44229: LD_ADDR_VAR 0 3
44233: PUSH
44234: LD_VAR 0 1
44238: PUSH
44239: LD_VAR 0 3
44243: IN
44244: ST_TO_ADDR
// end ;
44245: LD_VAR 0 3
44249: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44250: LD_INT 0
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
// result := array ;
44259: LD_ADDR_VAR 0 5
44263: PUSH
44264: LD_VAR 0 1
44268: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44269: LD_VAR 0 1
44273: NOT
44274: PUSH
44275: LD_VAR 0 2
44279: NOT
44280: OR
44281: PUSH
44282: LD_VAR 0 3
44286: NOT
44287: OR
44288: PUSH
44289: LD_VAR 0 2
44293: PUSH
44294: LD_VAR 0 1
44298: GREATER
44299: OR
44300: PUSH
44301: LD_VAR 0 3
44305: PUSH
44306: LD_VAR 0 1
44310: GREATER
44311: OR
44312: IFFALSE 44316
// exit ;
44314: GO 44612
// if direction then
44316: LD_VAR 0 4
44320: IFFALSE 44384
// begin d := 1 ;
44322: LD_ADDR_VAR 0 9
44326: PUSH
44327: LD_INT 1
44329: ST_TO_ADDR
// if i_from > i_to then
44330: LD_VAR 0 2
44334: PUSH
44335: LD_VAR 0 3
44339: GREATER
44340: IFFALSE 44366
// length := ( array - i_from ) + i_to else
44342: LD_ADDR_VAR 0 11
44346: PUSH
44347: LD_VAR 0 1
44351: PUSH
44352: LD_VAR 0 2
44356: MINUS
44357: PUSH
44358: LD_VAR 0 3
44362: PLUS
44363: ST_TO_ADDR
44364: GO 44382
// length := i_to - i_from ;
44366: LD_ADDR_VAR 0 11
44370: PUSH
44371: LD_VAR 0 3
44375: PUSH
44376: LD_VAR 0 2
44380: MINUS
44381: ST_TO_ADDR
// end else
44382: GO 44445
// begin d := - 1 ;
44384: LD_ADDR_VAR 0 9
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: ST_TO_ADDR
// if i_from > i_to then
44393: LD_VAR 0 2
44397: PUSH
44398: LD_VAR 0 3
44402: GREATER
44403: IFFALSE 44423
// length := i_from - i_to else
44405: LD_ADDR_VAR 0 11
44409: PUSH
44410: LD_VAR 0 2
44414: PUSH
44415: LD_VAR 0 3
44419: MINUS
44420: ST_TO_ADDR
44421: GO 44445
// length := ( array - i_to ) + i_from ;
44423: LD_ADDR_VAR 0 11
44427: PUSH
44428: LD_VAR 0 1
44432: PUSH
44433: LD_VAR 0 3
44437: MINUS
44438: PUSH
44439: LD_VAR 0 2
44443: PLUS
44444: ST_TO_ADDR
// end ; if not length then
44445: LD_VAR 0 11
44449: NOT
44450: IFFALSE 44454
// exit ;
44452: GO 44612
// tmp := array ;
44454: LD_ADDR_VAR 0 10
44458: PUSH
44459: LD_VAR 0 1
44463: ST_TO_ADDR
// for i = 1 to length do
44464: LD_ADDR_VAR 0 6
44468: PUSH
44469: DOUBLE
44470: LD_INT 1
44472: DEC
44473: ST_TO_ADDR
44474: LD_VAR 0 11
44478: PUSH
44479: FOR_TO
44480: IFFALSE 44600
// begin for j = 1 to array do
44482: LD_ADDR_VAR 0 7
44486: PUSH
44487: DOUBLE
44488: LD_INT 1
44490: DEC
44491: ST_TO_ADDR
44492: LD_VAR 0 1
44496: PUSH
44497: FOR_TO
44498: IFFALSE 44586
// begin k := j + d ;
44500: LD_ADDR_VAR 0 8
44504: PUSH
44505: LD_VAR 0 7
44509: PUSH
44510: LD_VAR 0 9
44514: PLUS
44515: ST_TO_ADDR
// if k > array then
44516: LD_VAR 0 8
44520: PUSH
44521: LD_VAR 0 1
44525: GREATER
44526: IFFALSE 44536
// k := 1 ;
44528: LD_ADDR_VAR 0 8
44532: PUSH
44533: LD_INT 1
44535: ST_TO_ADDR
// if not k then
44536: LD_VAR 0 8
44540: NOT
44541: IFFALSE 44553
// k := array ;
44543: LD_ADDR_VAR 0 8
44547: PUSH
44548: LD_VAR 0 1
44552: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44553: LD_ADDR_VAR 0 10
44557: PUSH
44558: LD_VAR 0 10
44562: PPUSH
44563: LD_VAR 0 8
44567: PPUSH
44568: LD_VAR 0 1
44572: PUSH
44573: LD_VAR 0 7
44577: ARRAY
44578: PPUSH
44579: CALL_OW 1
44583: ST_TO_ADDR
// end ;
44584: GO 44497
44586: POP
44587: POP
// array := tmp ;
44588: LD_ADDR_VAR 0 1
44592: PUSH
44593: LD_VAR 0 10
44597: ST_TO_ADDR
// end ;
44598: GO 44479
44600: POP
44601: POP
// result := array ;
44602: LD_ADDR_VAR 0 5
44606: PUSH
44607: LD_VAR 0 1
44611: ST_TO_ADDR
// end ;
44612: LD_VAR 0 5
44616: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44617: LD_INT 0
44619: PPUSH
44620: PPUSH
// result := 0 ;
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_INT 0
44628: ST_TO_ADDR
// if not array or not value in array then
44629: LD_VAR 0 1
44633: NOT
44634: PUSH
44635: LD_VAR 0 2
44639: PUSH
44640: LD_VAR 0 1
44644: IN
44645: NOT
44646: OR
44647: IFFALSE 44651
// exit ;
44649: GO 44705
// for i = 1 to array do
44651: LD_ADDR_VAR 0 4
44655: PUSH
44656: DOUBLE
44657: LD_INT 1
44659: DEC
44660: ST_TO_ADDR
44661: LD_VAR 0 1
44665: PUSH
44666: FOR_TO
44667: IFFALSE 44703
// if value = array [ i ] then
44669: LD_VAR 0 2
44673: PUSH
44674: LD_VAR 0 1
44678: PUSH
44679: LD_VAR 0 4
44683: ARRAY
44684: EQUAL
44685: IFFALSE 44701
// begin result := i ;
44687: LD_ADDR_VAR 0 3
44691: PUSH
44692: LD_VAR 0 4
44696: ST_TO_ADDR
// exit ;
44697: POP
44698: POP
44699: GO 44705
// end ;
44701: GO 44666
44703: POP
44704: POP
// end ;
44705: LD_VAR 0 3
44709: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44710: LD_INT 0
44712: PPUSH
// vc_chassis := chassis ;
44713: LD_ADDR_OWVAR 37
44717: PUSH
44718: LD_VAR 0 1
44722: ST_TO_ADDR
// vc_engine := engine ;
44723: LD_ADDR_OWVAR 39
44727: PUSH
44728: LD_VAR 0 2
44732: ST_TO_ADDR
// vc_control := control ;
44733: LD_ADDR_OWVAR 38
44737: PUSH
44738: LD_VAR 0 3
44742: ST_TO_ADDR
// vc_weapon := weapon ;
44743: LD_ADDR_OWVAR 40
44747: PUSH
44748: LD_VAR 0 4
44752: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44753: LD_ADDR_OWVAR 41
44757: PUSH
44758: LD_VAR 0 5
44762: ST_TO_ADDR
// end ;
44763: LD_VAR 0 6
44767: RET
// export function WantPlant ( unit ) ; var task ; begin
44768: LD_INT 0
44770: PPUSH
44771: PPUSH
// result := false ;
44772: LD_ADDR_VAR 0 2
44776: PUSH
44777: LD_INT 0
44779: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44780: LD_ADDR_VAR 0 3
44784: PUSH
44785: LD_VAR 0 1
44789: PPUSH
44790: CALL_OW 437
44794: ST_TO_ADDR
// if task then
44795: LD_VAR 0 3
44799: IFFALSE 44827
// if task [ 1 ] [ 1 ] = p then
44801: LD_VAR 0 3
44805: PUSH
44806: LD_INT 1
44808: ARRAY
44809: PUSH
44810: LD_INT 1
44812: ARRAY
44813: PUSH
44814: LD_STRING p
44816: EQUAL
44817: IFFALSE 44827
// result := true ;
44819: LD_ADDR_VAR 0 2
44823: PUSH
44824: LD_INT 1
44826: ST_TO_ADDR
// end ;
44827: LD_VAR 0 2
44831: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44832: LD_INT 0
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
// if pos < 1 then
44838: LD_VAR 0 2
44842: PUSH
44843: LD_INT 1
44845: LESS
44846: IFFALSE 44850
// exit ;
44848: GO 45153
// if pos = 1 then
44850: LD_VAR 0 2
44854: PUSH
44855: LD_INT 1
44857: EQUAL
44858: IFFALSE 44891
// result := Replace ( arr , pos [ 1 ] , value ) else
44860: LD_ADDR_VAR 0 4
44864: PUSH
44865: LD_VAR 0 1
44869: PPUSH
44870: LD_VAR 0 2
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: PPUSH
44879: LD_VAR 0 3
44883: PPUSH
44884: CALL_OW 1
44888: ST_TO_ADDR
44889: GO 45153
// begin tmp := arr ;
44891: LD_ADDR_VAR 0 6
44895: PUSH
44896: LD_VAR 0 1
44900: ST_TO_ADDR
// s_arr := [ tmp ] ;
44901: LD_ADDR_VAR 0 7
44905: PUSH
44906: LD_VAR 0 6
44910: PUSH
44911: EMPTY
44912: LIST
44913: ST_TO_ADDR
// for i = 1 to pos - 1 do
44914: LD_ADDR_VAR 0 5
44918: PUSH
44919: DOUBLE
44920: LD_INT 1
44922: DEC
44923: ST_TO_ADDR
44924: LD_VAR 0 2
44928: PUSH
44929: LD_INT 1
44931: MINUS
44932: PUSH
44933: FOR_TO
44934: IFFALSE 44979
// begin tmp := tmp [ pos [ i ] ] ;
44936: LD_ADDR_VAR 0 6
44940: PUSH
44941: LD_VAR 0 6
44945: PUSH
44946: LD_VAR 0 2
44950: PUSH
44951: LD_VAR 0 5
44955: ARRAY
44956: ARRAY
44957: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44958: LD_ADDR_VAR 0 7
44962: PUSH
44963: LD_VAR 0 7
44967: PUSH
44968: LD_VAR 0 6
44972: PUSH
44973: EMPTY
44974: LIST
44975: ADD
44976: ST_TO_ADDR
// end ;
44977: GO 44933
44979: POP
44980: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44981: LD_ADDR_VAR 0 6
44985: PUSH
44986: LD_VAR 0 6
44990: PPUSH
44991: LD_VAR 0 2
44995: PUSH
44996: LD_VAR 0 2
45000: ARRAY
45001: PPUSH
45002: LD_VAR 0 3
45006: PPUSH
45007: CALL_OW 1
45011: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45012: LD_ADDR_VAR 0 7
45016: PUSH
45017: LD_VAR 0 7
45021: PPUSH
45022: LD_VAR 0 7
45026: PPUSH
45027: LD_VAR 0 6
45031: PPUSH
45032: CALL_OW 1
45036: ST_TO_ADDR
// for i = s_arr downto 2 do
45037: LD_ADDR_VAR 0 5
45041: PUSH
45042: DOUBLE
45043: LD_VAR 0 7
45047: INC
45048: ST_TO_ADDR
45049: LD_INT 2
45051: PUSH
45052: FOR_DOWNTO
45053: IFFALSE 45137
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45055: LD_ADDR_VAR 0 6
45059: PUSH
45060: LD_VAR 0 7
45064: PUSH
45065: LD_VAR 0 5
45069: PUSH
45070: LD_INT 1
45072: MINUS
45073: ARRAY
45074: PPUSH
45075: LD_VAR 0 2
45079: PUSH
45080: LD_VAR 0 5
45084: PUSH
45085: LD_INT 1
45087: MINUS
45088: ARRAY
45089: PPUSH
45090: LD_VAR 0 7
45094: PUSH
45095: LD_VAR 0 5
45099: ARRAY
45100: PPUSH
45101: CALL_OW 1
45105: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45106: LD_ADDR_VAR 0 7
45110: PUSH
45111: LD_VAR 0 7
45115: PPUSH
45116: LD_VAR 0 5
45120: PUSH
45121: LD_INT 1
45123: MINUS
45124: PPUSH
45125: LD_VAR 0 6
45129: PPUSH
45130: CALL_OW 1
45134: ST_TO_ADDR
// end ;
45135: GO 45052
45137: POP
45138: POP
// result := s_arr [ 1 ] ;
45139: LD_ADDR_VAR 0 4
45143: PUSH
45144: LD_VAR 0 7
45148: PUSH
45149: LD_INT 1
45151: ARRAY
45152: ST_TO_ADDR
// end ; end ;
45153: LD_VAR 0 4
45157: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45158: LD_INT 0
45160: PPUSH
45161: PPUSH
// if not list then
45162: LD_VAR 0 1
45166: NOT
45167: IFFALSE 45171
// exit ;
45169: GO 45262
// i := list [ pos1 ] ;
45171: LD_ADDR_VAR 0 5
45175: PUSH
45176: LD_VAR 0 1
45180: PUSH
45181: LD_VAR 0 2
45185: ARRAY
45186: ST_TO_ADDR
// if not i then
45187: LD_VAR 0 5
45191: NOT
45192: IFFALSE 45196
// exit ;
45194: GO 45262
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45196: LD_ADDR_VAR 0 1
45200: PUSH
45201: LD_VAR 0 1
45205: PPUSH
45206: LD_VAR 0 2
45210: PPUSH
45211: LD_VAR 0 1
45215: PUSH
45216: LD_VAR 0 3
45220: ARRAY
45221: PPUSH
45222: CALL_OW 1
45226: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45227: LD_ADDR_VAR 0 1
45231: PUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: LD_VAR 0 3
45241: PPUSH
45242: LD_VAR 0 5
45246: PPUSH
45247: CALL_OW 1
45251: ST_TO_ADDR
// result := list ;
45252: LD_ADDR_VAR 0 4
45256: PUSH
45257: LD_VAR 0 1
45261: ST_TO_ADDR
// end ;
45262: LD_VAR 0 4
45266: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45267: LD_INT 0
45269: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45270: LD_ADDR_VAR 0 5
45274: PUSH
45275: LD_VAR 0 1
45279: PPUSH
45280: CALL_OW 250
45284: PPUSH
45285: LD_VAR 0 1
45289: PPUSH
45290: CALL_OW 251
45294: PPUSH
45295: LD_VAR 0 2
45299: PPUSH
45300: LD_VAR 0 3
45304: PPUSH
45305: LD_VAR 0 4
45309: PPUSH
45310: CALL 45320 0 5
45314: ST_TO_ADDR
// end ;
45315: LD_VAR 0 5
45319: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45320: LD_INT 0
45322: PPUSH
45323: PPUSH
45324: PPUSH
45325: PPUSH
// if not list then
45326: LD_VAR 0 3
45330: NOT
45331: IFFALSE 45335
// exit ;
45333: GO 45723
// result := [ ] ;
45335: LD_ADDR_VAR 0 6
45339: PUSH
45340: EMPTY
45341: ST_TO_ADDR
// for i in list do
45342: LD_ADDR_VAR 0 7
45346: PUSH
45347: LD_VAR 0 3
45351: PUSH
45352: FOR_IN
45353: IFFALSE 45555
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45355: LD_ADDR_VAR 0 9
45359: PUSH
45360: LD_VAR 0 7
45364: PPUSH
45365: LD_VAR 0 1
45369: PPUSH
45370: LD_VAR 0 2
45374: PPUSH
45375: CALL_OW 297
45379: ST_TO_ADDR
// if not result then
45380: LD_VAR 0 6
45384: NOT
45385: IFFALSE 45411
// result := [ [ i , tmp ] ] else
45387: LD_ADDR_VAR 0 6
45391: PUSH
45392: LD_VAR 0 7
45396: PUSH
45397: LD_VAR 0 9
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: EMPTY
45407: LIST
45408: ST_TO_ADDR
45409: GO 45553
// begin if result [ result ] [ 2 ] < tmp then
45411: LD_VAR 0 6
45415: PUSH
45416: LD_VAR 0 6
45420: ARRAY
45421: PUSH
45422: LD_INT 2
45424: ARRAY
45425: PUSH
45426: LD_VAR 0 9
45430: LESS
45431: IFFALSE 45473
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45433: LD_ADDR_VAR 0 6
45437: PUSH
45438: LD_VAR 0 6
45442: PPUSH
45443: LD_VAR 0 6
45447: PUSH
45448: LD_INT 1
45450: PLUS
45451: PPUSH
45452: LD_VAR 0 7
45456: PUSH
45457: LD_VAR 0 9
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PPUSH
45466: CALL_OW 2
45470: ST_TO_ADDR
45471: GO 45553
// for j = 1 to result do
45473: LD_ADDR_VAR 0 8
45477: PUSH
45478: DOUBLE
45479: LD_INT 1
45481: DEC
45482: ST_TO_ADDR
45483: LD_VAR 0 6
45487: PUSH
45488: FOR_TO
45489: IFFALSE 45551
// begin if tmp < result [ j ] [ 2 ] then
45491: LD_VAR 0 9
45495: PUSH
45496: LD_VAR 0 6
45500: PUSH
45501: LD_VAR 0 8
45505: ARRAY
45506: PUSH
45507: LD_INT 2
45509: ARRAY
45510: LESS
45511: IFFALSE 45549
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45513: LD_ADDR_VAR 0 6
45517: PUSH
45518: LD_VAR 0 6
45522: PPUSH
45523: LD_VAR 0 8
45527: PPUSH
45528: LD_VAR 0 7
45532: PUSH
45533: LD_VAR 0 9
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PPUSH
45542: CALL_OW 2
45546: ST_TO_ADDR
// break ;
45547: GO 45551
// end ; end ;
45549: GO 45488
45551: POP
45552: POP
// end ; end ;
45553: GO 45352
45555: POP
45556: POP
// if result and not asc then
45557: LD_VAR 0 6
45561: PUSH
45562: LD_VAR 0 4
45566: NOT
45567: AND
45568: IFFALSE 45643
// begin tmp := result ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_VAR 0 6
45579: ST_TO_ADDR
// for i = tmp downto 1 do
45580: LD_ADDR_VAR 0 7
45584: PUSH
45585: DOUBLE
45586: LD_VAR 0 9
45590: INC
45591: ST_TO_ADDR
45592: LD_INT 1
45594: PUSH
45595: FOR_DOWNTO
45596: IFFALSE 45641
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45598: LD_ADDR_VAR 0 6
45602: PUSH
45603: LD_VAR 0 6
45607: PPUSH
45608: LD_VAR 0 9
45612: PUSH
45613: LD_VAR 0 7
45617: MINUS
45618: PUSH
45619: LD_INT 1
45621: PLUS
45622: PPUSH
45623: LD_VAR 0 9
45627: PUSH
45628: LD_VAR 0 7
45632: ARRAY
45633: PPUSH
45634: CALL_OW 1
45638: ST_TO_ADDR
45639: GO 45595
45641: POP
45642: POP
// end ; tmp := [ ] ;
45643: LD_ADDR_VAR 0 9
45647: PUSH
45648: EMPTY
45649: ST_TO_ADDR
// if mode then
45650: LD_VAR 0 5
45654: IFFALSE 45723
// begin for i = 1 to result do
45656: LD_ADDR_VAR 0 7
45660: PUSH
45661: DOUBLE
45662: LD_INT 1
45664: DEC
45665: ST_TO_ADDR
45666: LD_VAR 0 6
45670: PUSH
45671: FOR_TO
45672: IFFALSE 45711
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45674: LD_ADDR_VAR 0 9
45678: PUSH
45679: LD_VAR 0 9
45683: PPUSH
45684: LD_VAR 0 7
45688: PPUSH
45689: LD_VAR 0 6
45693: PUSH
45694: LD_VAR 0 7
45698: ARRAY
45699: PUSH
45700: LD_INT 1
45702: ARRAY
45703: PPUSH
45704: CALL_OW 1
45708: ST_TO_ADDR
45709: GO 45671
45711: POP
45712: POP
// result := tmp ;
45713: LD_ADDR_VAR 0 6
45717: PUSH
45718: LD_VAR 0 9
45722: ST_TO_ADDR
// end ; end ;
45723: LD_VAR 0 6
45727: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45728: LD_INT 0
45730: PPUSH
45731: PPUSH
45732: PPUSH
45733: PPUSH
45734: PPUSH
45735: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45736: LD_ADDR_VAR 0 5
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: ST_TO_ADDR
// if not x or not y then
45758: LD_VAR 0 2
45762: NOT
45763: PUSH
45764: LD_VAR 0 3
45768: NOT
45769: OR
45770: IFFALSE 45774
// exit ;
45772: GO 47420
// if not range then
45774: LD_VAR 0 4
45778: NOT
45779: IFFALSE 45789
// range := 10 ;
45781: LD_ADDR_VAR 0 4
45785: PUSH
45786: LD_INT 10
45788: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45789: LD_ADDR_VAR 0 8
45793: PUSH
45794: LD_INT 81
45796: PUSH
45797: LD_VAR 0 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 92
45808: PUSH
45809: LD_VAR 0 2
45813: PUSH
45814: LD_VAR 0 3
45818: PUSH
45819: LD_VAR 0 4
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: LD_INT 21
45835: PUSH
45836: LD_INT 3
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: PPUSH
45852: CALL_OW 69
45856: ST_TO_ADDR
// if not tmp then
45857: LD_VAR 0 8
45861: NOT
45862: IFFALSE 45866
// exit ;
45864: GO 47420
// for i in tmp do
45866: LD_ADDR_VAR 0 6
45870: PUSH
45871: LD_VAR 0 8
45875: PUSH
45876: FOR_IN
45877: IFFALSE 47395
// begin points := [ 0 , 0 , 0 ] ;
45879: LD_ADDR_VAR 0 9
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: ST_TO_ADDR
// bpoints := 1 ;
45898: LD_ADDR_VAR 0 10
45902: PUSH
45903: LD_INT 1
45905: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45906: LD_VAR 0 6
45910: PPUSH
45911: CALL_OW 247
45915: PUSH
45916: LD_INT 1
45918: DOUBLE
45919: EQUAL
45920: IFTRUE 45924
45922: GO 46502
45924: POP
// begin if GetClass ( i ) = 1 then
45925: LD_VAR 0 6
45929: PPUSH
45930: CALL_OW 257
45934: PUSH
45935: LD_INT 1
45937: EQUAL
45938: IFFALSE 45959
// points := [ 10 , 5 , 3 ] ;
45940: LD_ADDR_VAR 0 9
45944: PUSH
45945: LD_INT 10
45947: PUSH
45948: LD_INT 5
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45959: LD_VAR 0 6
45963: PPUSH
45964: CALL_OW 257
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: LD_INT 4
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: IN
45983: IFFALSE 46004
// points := [ 3 , 2 , 1 ] ;
45985: LD_ADDR_VAR 0 9
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46004: LD_VAR 0 6
46008: PPUSH
46009: CALL_OW 257
46013: PUSH
46014: LD_INT 5
46016: EQUAL
46017: IFFALSE 46038
// points := [ 130 , 5 , 2 ] ;
46019: LD_ADDR_VAR 0 9
46023: PUSH
46024: LD_INT 130
46026: PUSH
46027: LD_INT 5
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46038: LD_VAR 0 6
46042: PPUSH
46043: CALL_OW 257
46047: PUSH
46048: LD_INT 8
46050: EQUAL
46051: IFFALSE 46072
// points := [ 35 , 35 , 30 ] ;
46053: LD_ADDR_VAR 0 9
46057: PUSH
46058: LD_INT 35
46060: PUSH
46061: LD_INT 35
46063: PUSH
46064: LD_INT 30
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46072: LD_VAR 0 6
46076: PPUSH
46077: CALL_OW 257
46081: PUSH
46082: LD_INT 9
46084: EQUAL
46085: IFFALSE 46106
// points := [ 20 , 55 , 40 ] ;
46087: LD_ADDR_VAR 0 9
46091: PUSH
46092: LD_INT 20
46094: PUSH
46095: LD_INT 55
46097: PUSH
46098: LD_INT 40
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46106: LD_VAR 0 6
46110: PPUSH
46111: CALL_OW 257
46115: PUSH
46116: LD_INT 12
46118: PUSH
46119: LD_INT 16
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: IN
46126: IFFALSE 46147
// points := [ 5 , 3 , 2 ] ;
46128: LD_ADDR_VAR 0 9
46132: PUSH
46133: LD_INT 5
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46147: LD_VAR 0 6
46151: PPUSH
46152: CALL_OW 257
46156: PUSH
46157: LD_INT 17
46159: EQUAL
46160: IFFALSE 46181
// points := [ 100 , 50 , 75 ] ;
46162: LD_ADDR_VAR 0 9
46166: PUSH
46167: LD_INT 100
46169: PUSH
46170: LD_INT 50
46172: PUSH
46173: LD_INT 75
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: LIST
46180: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46181: LD_VAR 0 6
46185: PPUSH
46186: CALL_OW 257
46190: PUSH
46191: LD_INT 15
46193: EQUAL
46194: IFFALSE 46215
// points := [ 10 , 5 , 3 ] ;
46196: LD_ADDR_VAR 0 9
46200: PUSH
46201: LD_INT 10
46203: PUSH
46204: LD_INT 5
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46215: LD_VAR 0 6
46219: PPUSH
46220: CALL_OW 257
46224: PUSH
46225: LD_INT 14
46227: EQUAL
46228: IFFALSE 46249
// points := [ 10 , 0 , 0 ] ;
46230: LD_ADDR_VAR 0 9
46234: PUSH
46235: LD_INT 10
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: LIST
46248: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46249: LD_VAR 0 6
46253: PPUSH
46254: CALL_OW 257
46258: PUSH
46259: LD_INT 11
46261: EQUAL
46262: IFFALSE 46283
// points := [ 30 , 10 , 5 ] ;
46264: LD_ADDR_VAR 0 9
46268: PUSH
46269: LD_INT 30
46271: PUSH
46272: LD_INT 10
46274: PUSH
46275: LD_INT 5
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46283: LD_VAR 0 1
46287: PPUSH
46288: LD_INT 5
46290: PPUSH
46291: CALL_OW 321
46295: PUSH
46296: LD_INT 2
46298: EQUAL
46299: IFFALSE 46316
// bpoints := bpoints * 1.8 ;
46301: LD_ADDR_VAR 0 10
46305: PUSH
46306: LD_VAR 0 10
46310: PUSH
46311: LD_REAL  1.80000000000000E+0000
46314: MUL
46315: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46316: LD_VAR 0 6
46320: PPUSH
46321: CALL_OW 257
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: LD_INT 4
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: IN
46344: PUSH
46345: LD_VAR 0 1
46349: PPUSH
46350: LD_INT 51
46352: PPUSH
46353: CALL_OW 321
46357: PUSH
46358: LD_INT 2
46360: EQUAL
46361: AND
46362: IFFALSE 46379
// bpoints := bpoints * 1.2 ;
46364: LD_ADDR_VAR 0 10
46368: PUSH
46369: LD_VAR 0 10
46373: PUSH
46374: LD_REAL  1.20000000000000E+0000
46377: MUL
46378: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46379: LD_VAR 0 6
46383: PPUSH
46384: CALL_OW 257
46388: PUSH
46389: LD_INT 5
46391: PUSH
46392: LD_INT 7
46394: PUSH
46395: LD_INT 9
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: IN
46403: PUSH
46404: LD_VAR 0 1
46408: PPUSH
46409: LD_INT 52
46411: PPUSH
46412: CALL_OW 321
46416: PUSH
46417: LD_INT 2
46419: EQUAL
46420: AND
46421: IFFALSE 46438
// bpoints := bpoints * 1.5 ;
46423: LD_ADDR_VAR 0 10
46427: PUSH
46428: LD_VAR 0 10
46432: PUSH
46433: LD_REAL  1.50000000000000E+0000
46436: MUL
46437: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46438: LD_VAR 0 1
46442: PPUSH
46443: LD_INT 66
46445: PPUSH
46446: CALL_OW 321
46450: PUSH
46451: LD_INT 2
46453: EQUAL
46454: IFFALSE 46471
// bpoints := bpoints * 1.1 ;
46456: LD_ADDR_VAR 0 10
46460: PUSH
46461: LD_VAR 0 10
46465: PUSH
46466: LD_REAL  1.10000000000000E+0000
46469: MUL
46470: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46471: LD_ADDR_VAR 0 10
46475: PUSH
46476: LD_VAR 0 10
46480: PUSH
46481: LD_VAR 0 6
46485: PPUSH
46486: LD_INT 1
46488: PPUSH
46489: CALL_OW 259
46493: PUSH
46494: LD_REAL  1.15000000000000E+0000
46497: MUL
46498: MUL
46499: ST_TO_ADDR
// end ; unit_vehicle :
46500: GO 47324
46502: LD_INT 2
46504: DOUBLE
46505: EQUAL
46506: IFTRUE 46510
46508: GO 47312
46510: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46511: LD_VAR 0 6
46515: PPUSH
46516: CALL_OW 264
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 42
46526: PUSH
46527: LD_INT 24
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: IN
46535: IFFALSE 46556
// points := [ 25 , 5 , 3 ] ;
46537: LD_ADDR_VAR 0 9
46541: PUSH
46542: LD_INT 25
46544: PUSH
46545: LD_INT 5
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46556: LD_VAR 0 6
46560: PPUSH
46561: CALL_OW 264
46565: PUSH
46566: LD_INT 4
46568: PUSH
46569: LD_INT 43
46571: PUSH
46572: LD_INT 25
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: IN
46580: IFFALSE 46601
// points := [ 40 , 15 , 5 ] ;
46582: LD_ADDR_VAR 0 9
46586: PUSH
46587: LD_INT 40
46589: PUSH
46590: LD_INT 15
46592: PUSH
46593: LD_INT 5
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46601: LD_VAR 0 6
46605: PPUSH
46606: CALL_OW 264
46610: PUSH
46611: LD_INT 3
46613: PUSH
46614: LD_INT 23
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: IN
46621: IFFALSE 46642
// points := [ 7 , 25 , 8 ] ;
46623: LD_ADDR_VAR 0 9
46627: PUSH
46628: LD_INT 7
46630: PUSH
46631: LD_INT 25
46633: PUSH
46634: LD_INT 8
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46642: LD_VAR 0 6
46646: PPUSH
46647: CALL_OW 264
46651: PUSH
46652: LD_INT 5
46654: PUSH
46655: LD_INT 27
46657: PUSH
46658: LD_INT 44
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: IN
46666: IFFALSE 46687
// points := [ 14 , 50 , 16 ] ;
46668: LD_ADDR_VAR 0 9
46672: PUSH
46673: LD_INT 14
46675: PUSH
46676: LD_INT 50
46678: PUSH
46679: LD_INT 16
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46687: LD_VAR 0 6
46691: PPUSH
46692: CALL_OW 264
46696: PUSH
46697: LD_INT 6
46699: PUSH
46700: LD_INT 46
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: IN
46707: IFFALSE 46728
// points := [ 32 , 120 , 70 ] ;
46709: LD_ADDR_VAR 0 9
46713: PUSH
46714: LD_INT 32
46716: PUSH
46717: LD_INT 120
46719: PUSH
46720: LD_INT 70
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
46728: LD_VAR 0 6
46732: PPUSH
46733: CALL_OW 264
46737: PUSH
46738: LD_INT 7
46740: PUSH
46741: LD_INT 28
46743: PUSH
46744: LD_INT 45
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: IN
46752: IFFALSE 46773
// points := [ 35 , 20 , 45 ] ;
46754: LD_ADDR_VAR 0 9
46758: PUSH
46759: LD_INT 35
46761: PUSH
46762: LD_INT 20
46764: PUSH
46765: LD_INT 45
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46773: LD_VAR 0 6
46777: PPUSH
46778: CALL_OW 264
46782: PUSH
46783: LD_INT 47
46785: PUSH
46786: EMPTY
46787: LIST
46788: IN
46789: IFFALSE 46810
// points := [ 67 , 45 , 75 ] ;
46791: LD_ADDR_VAR 0 9
46795: PUSH
46796: LD_INT 67
46798: PUSH
46799: LD_INT 45
46801: PUSH
46802: LD_INT 75
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46810: LD_VAR 0 6
46814: PPUSH
46815: CALL_OW 264
46819: PUSH
46820: LD_INT 26
46822: PUSH
46823: EMPTY
46824: LIST
46825: IN
46826: IFFALSE 46847
// points := [ 120 , 30 , 80 ] ;
46828: LD_ADDR_VAR 0 9
46832: PUSH
46833: LD_INT 120
46835: PUSH
46836: LD_INT 30
46838: PUSH
46839: LD_INT 80
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46847: LD_VAR 0 6
46851: PPUSH
46852: CALL_OW 264
46856: PUSH
46857: LD_INT 22
46859: PUSH
46860: EMPTY
46861: LIST
46862: IN
46863: IFFALSE 46884
// points := [ 40 , 1 , 1 ] ;
46865: LD_ADDR_VAR 0 9
46869: PUSH
46870: LD_INT 40
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46884: LD_VAR 0 6
46888: PPUSH
46889: CALL_OW 264
46893: PUSH
46894: LD_INT 29
46896: PUSH
46897: EMPTY
46898: LIST
46899: IN
46900: IFFALSE 46921
// points := [ 70 , 200 , 400 ] ;
46902: LD_ADDR_VAR 0 9
46906: PUSH
46907: LD_INT 70
46909: PUSH
46910: LD_INT 200
46912: PUSH
46913: LD_INT 400
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46921: LD_VAR 0 6
46925: PPUSH
46926: CALL_OW 264
46930: PUSH
46931: LD_INT 14
46933: PUSH
46934: LD_INT 53
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: IN
46941: IFFALSE 46962
// points := [ 40 , 10 , 20 ] ;
46943: LD_ADDR_VAR 0 9
46947: PUSH
46948: LD_INT 40
46950: PUSH
46951: LD_INT 10
46953: PUSH
46954: LD_INT 20
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46962: LD_VAR 0 6
46966: PPUSH
46967: CALL_OW 264
46971: PUSH
46972: LD_INT 9
46974: PUSH
46975: EMPTY
46976: LIST
46977: IN
46978: IFFALSE 46999
// points := [ 5 , 70 , 20 ] ;
46980: LD_ADDR_VAR 0 9
46984: PUSH
46985: LD_INT 5
46987: PUSH
46988: LD_INT 70
46990: PUSH
46991: LD_INT 20
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: LIST
46998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46999: LD_VAR 0 6
47003: PPUSH
47004: CALL_OW 264
47008: PUSH
47009: LD_INT 10
47011: PUSH
47012: EMPTY
47013: LIST
47014: IN
47015: IFFALSE 47036
// points := [ 35 , 110 , 70 ] ;
47017: LD_ADDR_VAR 0 9
47021: PUSH
47022: LD_INT 35
47024: PUSH
47025: LD_INT 110
47027: PUSH
47028: LD_INT 70
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47036: LD_VAR 0 6
47040: PPUSH
47041: CALL_OW 265
47045: PUSH
47046: LD_INT 25
47048: EQUAL
47049: IFFALSE 47070
// points := [ 80 , 65 , 100 ] ;
47051: LD_ADDR_VAR 0 9
47055: PUSH
47056: LD_INT 80
47058: PUSH
47059: LD_INT 65
47061: PUSH
47062: LD_INT 100
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47070: LD_VAR 0 6
47074: PPUSH
47075: CALL_OW 263
47079: PUSH
47080: LD_INT 1
47082: EQUAL
47083: IFFALSE 47118
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47085: LD_ADDR_VAR 0 10
47089: PUSH
47090: LD_VAR 0 10
47094: PUSH
47095: LD_VAR 0 6
47099: PPUSH
47100: CALL_OW 311
47104: PPUSH
47105: LD_INT 3
47107: PPUSH
47108: CALL_OW 259
47112: PUSH
47113: LD_INT 4
47115: MUL
47116: MUL
47117: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47118: LD_VAR 0 6
47122: PPUSH
47123: CALL_OW 263
47127: PUSH
47128: LD_INT 2
47130: EQUAL
47131: IFFALSE 47182
// begin j := IsControledBy ( i ) ;
47133: LD_ADDR_VAR 0 7
47137: PUSH
47138: LD_VAR 0 6
47142: PPUSH
47143: CALL_OW 312
47147: ST_TO_ADDR
// if j then
47148: LD_VAR 0 7
47152: IFFALSE 47182
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47154: LD_ADDR_VAR 0 10
47158: PUSH
47159: LD_VAR 0 10
47163: PUSH
47164: LD_VAR 0 7
47168: PPUSH
47169: LD_INT 3
47171: PPUSH
47172: CALL_OW 259
47176: PUSH
47177: LD_INT 3
47179: MUL
47180: MUL
47181: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47182: LD_VAR 0 6
47186: PPUSH
47187: CALL_OW 264
47191: PUSH
47192: LD_INT 5
47194: PUSH
47195: LD_INT 6
47197: PUSH
47198: LD_INT 46
47200: PUSH
47201: LD_INT 44
47203: PUSH
47204: LD_INT 47
47206: PUSH
47207: LD_INT 45
47209: PUSH
47210: LD_INT 28
47212: PUSH
47213: LD_INT 7
47215: PUSH
47216: LD_INT 27
47218: PUSH
47219: LD_INT 29
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: IN
47234: PUSH
47235: LD_VAR 0 1
47239: PPUSH
47240: LD_INT 52
47242: PPUSH
47243: CALL_OW 321
47247: PUSH
47248: LD_INT 2
47250: EQUAL
47251: AND
47252: IFFALSE 47269
// bpoints := bpoints * 1.2 ;
47254: LD_ADDR_VAR 0 10
47258: PUSH
47259: LD_VAR 0 10
47263: PUSH
47264: LD_REAL  1.20000000000000E+0000
47267: MUL
47268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47269: LD_VAR 0 6
47273: PPUSH
47274: CALL_OW 264
47278: PUSH
47279: LD_INT 6
47281: PUSH
47282: LD_INT 46
47284: PUSH
47285: LD_INT 47
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: IN
47293: IFFALSE 47310
// bpoints := bpoints * 1.2 ;
47295: LD_ADDR_VAR 0 10
47299: PUSH
47300: LD_VAR 0 10
47304: PUSH
47305: LD_REAL  1.20000000000000E+0000
47308: MUL
47309: ST_TO_ADDR
// end ; unit_building :
47310: GO 47324
47312: LD_INT 3
47314: DOUBLE
47315: EQUAL
47316: IFTRUE 47320
47318: GO 47323
47320: POP
// ; end ;
47321: GO 47324
47323: POP
// for j = 1 to 3 do
47324: LD_ADDR_VAR 0 7
47328: PUSH
47329: DOUBLE
47330: LD_INT 1
47332: DEC
47333: ST_TO_ADDR
47334: LD_INT 3
47336: PUSH
47337: FOR_TO
47338: IFFALSE 47391
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47340: LD_ADDR_VAR 0 5
47344: PUSH
47345: LD_VAR 0 5
47349: PPUSH
47350: LD_VAR 0 7
47354: PPUSH
47355: LD_VAR 0 5
47359: PUSH
47360: LD_VAR 0 7
47364: ARRAY
47365: PUSH
47366: LD_VAR 0 9
47370: PUSH
47371: LD_VAR 0 7
47375: ARRAY
47376: PUSH
47377: LD_VAR 0 10
47381: MUL
47382: PLUS
47383: PPUSH
47384: CALL_OW 1
47388: ST_TO_ADDR
47389: GO 47337
47391: POP
47392: POP
// end ;
47393: GO 45876
47395: POP
47396: POP
// result := Replace ( result , 4 , tmp ) ;
47397: LD_ADDR_VAR 0 5
47401: PUSH
47402: LD_VAR 0 5
47406: PPUSH
47407: LD_INT 4
47409: PPUSH
47410: LD_VAR 0 8
47414: PPUSH
47415: CALL_OW 1
47419: ST_TO_ADDR
// end ;
47420: LD_VAR 0 5
47424: RET
// export function DangerAtRange ( unit , range ) ; begin
47425: LD_INT 0
47427: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47428: LD_ADDR_VAR 0 3
47432: PUSH
47433: LD_VAR 0 1
47437: PPUSH
47438: CALL_OW 255
47442: PPUSH
47443: LD_VAR 0 1
47447: PPUSH
47448: CALL_OW 250
47452: PPUSH
47453: LD_VAR 0 1
47457: PPUSH
47458: CALL_OW 251
47462: PPUSH
47463: LD_VAR 0 2
47467: PPUSH
47468: CALL 45728 0 4
47472: ST_TO_ADDR
// end ;
47473: LD_VAR 0 3
47477: RET
// export function DangerInArea ( side , area ) ; begin
47478: LD_INT 0
47480: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_VAR 0 2
47490: PPUSH
47491: LD_INT 81
47493: PUSH
47494: LD_VAR 0 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PPUSH
47503: CALL_OW 70
47507: ST_TO_ADDR
// end ;
47508: LD_VAR 0 3
47512: RET
// export function IsExtension ( b ) ; begin
47513: LD_INT 0
47515: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47516: LD_ADDR_VAR 0 2
47520: PUSH
47521: LD_VAR 0 1
47525: PUSH
47526: LD_INT 23
47528: PUSH
47529: LD_INT 20
47531: PUSH
47532: LD_INT 22
47534: PUSH
47535: LD_INT 17
47537: PUSH
47538: LD_INT 24
47540: PUSH
47541: LD_INT 21
47543: PUSH
47544: LD_INT 19
47546: PUSH
47547: LD_INT 16
47549: PUSH
47550: LD_INT 25
47552: PUSH
47553: LD_INT 18
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: IN
47568: ST_TO_ADDR
// end ;
47569: LD_VAR 0 2
47573: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47574: LD_INT 0
47576: PPUSH
47577: PPUSH
47578: PPUSH
// result := [ ] ;
47579: LD_ADDR_VAR 0 4
47583: PUSH
47584: EMPTY
47585: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47586: LD_ADDR_VAR 0 5
47590: PUSH
47591: LD_VAR 0 2
47595: PPUSH
47596: LD_INT 21
47598: PUSH
47599: LD_INT 3
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PPUSH
47606: CALL_OW 70
47610: ST_TO_ADDR
// if not tmp then
47611: LD_VAR 0 5
47615: NOT
47616: IFFALSE 47620
// exit ;
47618: GO 47684
// if checkLink then
47620: LD_VAR 0 3
47624: IFFALSE 47674
// begin for i in tmp do
47626: LD_ADDR_VAR 0 6
47630: PUSH
47631: LD_VAR 0 5
47635: PUSH
47636: FOR_IN
47637: IFFALSE 47672
// if GetBase ( i ) <> base then
47639: LD_VAR 0 6
47643: PPUSH
47644: CALL_OW 274
47648: PUSH
47649: LD_VAR 0 1
47653: NONEQUAL
47654: IFFALSE 47670
// ComLinkToBase ( base , i ) ;
47656: LD_VAR 0 1
47660: PPUSH
47661: LD_VAR 0 6
47665: PPUSH
47666: CALL_OW 169
47670: GO 47636
47672: POP
47673: POP
// end ; result := tmp ;
47674: LD_ADDR_VAR 0 4
47678: PUSH
47679: LD_VAR 0 5
47683: ST_TO_ADDR
// end ;
47684: LD_VAR 0 4
47688: RET
// export function ComComplete ( units , b ) ; var i ; begin
47689: LD_INT 0
47691: PPUSH
47692: PPUSH
// if not units then
47693: LD_VAR 0 1
47697: NOT
47698: IFFALSE 47702
// exit ;
47700: GO 47792
// for i in units do
47702: LD_ADDR_VAR 0 4
47706: PUSH
47707: LD_VAR 0 1
47711: PUSH
47712: FOR_IN
47713: IFFALSE 47790
// if BuildingStatus ( b ) = bs_build then
47715: LD_VAR 0 2
47719: PPUSH
47720: CALL_OW 461
47724: PUSH
47725: LD_INT 1
47727: EQUAL
47728: IFFALSE 47788
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47730: LD_VAR 0 4
47734: PPUSH
47735: LD_STRING h
47737: PUSH
47738: LD_VAR 0 2
47742: PPUSH
47743: CALL_OW 250
47747: PUSH
47748: LD_VAR 0 2
47752: PPUSH
47753: CALL_OW 251
47757: PUSH
47758: LD_VAR 0 2
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: PPUSH
47784: CALL_OW 446
47788: GO 47712
47790: POP
47791: POP
// end ;
47792: LD_VAR 0 3
47796: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47797: LD_INT 0
47799: PPUSH
47800: PPUSH
47801: PPUSH
47802: PPUSH
47803: PPUSH
47804: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47805: LD_VAR 0 1
47809: NOT
47810: PUSH
47811: LD_VAR 0 1
47815: PPUSH
47816: CALL_OW 263
47820: PUSH
47821: LD_INT 2
47823: EQUAL
47824: NOT
47825: OR
47826: IFFALSE 47830
// exit ;
47828: GO 48146
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47830: LD_ADDR_VAR 0 6
47834: PUSH
47835: LD_INT 22
47837: PUSH
47838: LD_VAR 0 1
47842: PPUSH
47843: CALL_OW 255
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 30
47857: PUSH
47858: LD_INT 36
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 34
47867: PUSH
47868: LD_INT 31
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PPUSH
47884: CALL_OW 69
47888: ST_TO_ADDR
// if not tmp then
47889: LD_VAR 0 6
47893: NOT
47894: IFFALSE 47898
// exit ;
47896: GO 48146
// result := [ ] ;
47898: LD_ADDR_VAR 0 2
47902: PUSH
47903: EMPTY
47904: ST_TO_ADDR
// for i in tmp do
47905: LD_ADDR_VAR 0 3
47909: PUSH
47910: LD_VAR 0 6
47914: PUSH
47915: FOR_IN
47916: IFFALSE 47987
// begin t := UnitsInside ( i ) ;
47918: LD_ADDR_VAR 0 4
47922: PUSH
47923: LD_VAR 0 3
47927: PPUSH
47928: CALL_OW 313
47932: ST_TO_ADDR
// if t then
47933: LD_VAR 0 4
47937: IFFALSE 47985
// for j in t do
47939: LD_ADDR_VAR 0 7
47943: PUSH
47944: LD_VAR 0 4
47948: PUSH
47949: FOR_IN
47950: IFFALSE 47983
// result := Insert ( result , result + 1 , j ) ;
47952: LD_ADDR_VAR 0 2
47956: PUSH
47957: LD_VAR 0 2
47961: PPUSH
47962: LD_VAR 0 2
47966: PUSH
47967: LD_INT 1
47969: PLUS
47970: PPUSH
47971: LD_VAR 0 7
47975: PPUSH
47976: CALL_OW 2
47980: ST_TO_ADDR
47981: GO 47949
47983: POP
47984: POP
// end ;
47985: GO 47915
47987: POP
47988: POP
// if not result then
47989: LD_VAR 0 2
47993: NOT
47994: IFFALSE 47998
// exit ;
47996: GO 48146
// mech := result [ 1 ] ;
47998: LD_ADDR_VAR 0 5
48002: PUSH
48003: LD_VAR 0 2
48007: PUSH
48008: LD_INT 1
48010: ARRAY
48011: ST_TO_ADDR
// if result > 1 then
48012: LD_VAR 0 2
48016: PUSH
48017: LD_INT 1
48019: GREATER
48020: IFFALSE 48132
// for i = 2 to result do
48022: LD_ADDR_VAR 0 3
48026: PUSH
48027: DOUBLE
48028: LD_INT 2
48030: DEC
48031: ST_TO_ADDR
48032: LD_VAR 0 2
48036: PUSH
48037: FOR_TO
48038: IFFALSE 48130
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: LD_VAR 0 2
48049: PUSH
48050: LD_VAR 0 3
48054: ARRAY
48055: PPUSH
48056: LD_INT 3
48058: PPUSH
48059: CALL_OW 259
48063: PUSH
48064: LD_VAR 0 2
48068: PUSH
48069: LD_VAR 0 3
48073: ARRAY
48074: PPUSH
48075: CALL_OW 432
48079: MINUS
48080: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48081: LD_VAR 0 4
48085: PUSH
48086: LD_VAR 0 5
48090: PPUSH
48091: LD_INT 3
48093: PPUSH
48094: CALL_OW 259
48098: PUSH
48099: LD_VAR 0 5
48103: PPUSH
48104: CALL_OW 432
48108: MINUS
48109: GREATEREQUAL
48110: IFFALSE 48128
// mech := result [ i ] ;
48112: LD_ADDR_VAR 0 5
48116: PUSH
48117: LD_VAR 0 2
48121: PUSH
48122: LD_VAR 0 3
48126: ARRAY
48127: ST_TO_ADDR
// end ;
48128: GO 48037
48130: POP
48131: POP
// ComLinkTo ( vehicle , mech ) ;
48132: LD_VAR 0 1
48136: PPUSH
48137: LD_VAR 0 5
48141: PPUSH
48142: CALL_OW 135
// end ;
48146: LD_VAR 0 2
48150: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48151: LD_INT 0
48153: PPUSH
48154: PPUSH
48155: PPUSH
48156: PPUSH
48157: PPUSH
48158: PPUSH
48159: PPUSH
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
// result := [ ] ;
48166: LD_ADDR_VAR 0 7
48170: PUSH
48171: EMPTY
48172: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48173: LD_VAR 0 1
48177: PPUSH
48178: CALL_OW 266
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: IN
48193: NOT
48194: IFFALSE 48198
// exit ;
48196: GO 49832
// if name then
48198: LD_VAR 0 3
48202: IFFALSE 48218
// SetBName ( base_dep , name ) ;
48204: LD_VAR 0 1
48208: PPUSH
48209: LD_VAR 0 3
48213: PPUSH
48214: CALL_OW 500
// base := GetBase ( base_dep ) ;
48218: LD_ADDR_VAR 0 15
48222: PUSH
48223: LD_VAR 0 1
48227: PPUSH
48228: CALL_OW 274
48232: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48233: LD_ADDR_VAR 0 16
48237: PUSH
48238: LD_VAR 0 1
48242: PPUSH
48243: CALL_OW 255
48247: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48248: LD_ADDR_VAR 0 17
48252: PUSH
48253: LD_VAR 0 1
48257: PPUSH
48258: CALL_OW 248
48262: ST_TO_ADDR
// if sources then
48263: LD_VAR 0 5
48267: IFFALSE 48314
// for i = 1 to 3 do
48269: LD_ADDR_VAR 0 8
48273: PUSH
48274: DOUBLE
48275: LD_INT 1
48277: DEC
48278: ST_TO_ADDR
48279: LD_INT 3
48281: PUSH
48282: FOR_TO
48283: IFFALSE 48312
// AddResourceType ( base , i , sources [ i ] ) ;
48285: LD_VAR 0 15
48289: PPUSH
48290: LD_VAR 0 8
48294: PPUSH
48295: LD_VAR 0 5
48299: PUSH
48300: LD_VAR 0 8
48304: ARRAY
48305: PPUSH
48306: CALL_OW 276
48310: GO 48282
48312: POP
48313: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48314: LD_ADDR_VAR 0 18
48318: PUSH
48319: LD_VAR 0 15
48323: PPUSH
48324: LD_VAR 0 2
48328: PPUSH
48329: LD_INT 1
48331: PPUSH
48332: CALL 47574 0 3
48336: ST_TO_ADDR
// InitHc ;
48337: CALL_OW 19
// InitUc ;
48341: CALL_OW 18
// uc_side := side ;
48345: LD_ADDR_OWVAR 20
48349: PUSH
48350: LD_VAR 0 16
48354: ST_TO_ADDR
// uc_nation := nation ;
48355: LD_ADDR_OWVAR 21
48359: PUSH
48360: LD_VAR 0 17
48364: ST_TO_ADDR
// if buildings then
48365: LD_VAR 0 18
48369: IFFALSE 49691
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48371: LD_ADDR_VAR 0 19
48375: PUSH
48376: LD_VAR 0 18
48380: PPUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 30
48386: PUSH
48387: LD_INT 29
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 30
48396: PUSH
48397: LD_INT 30
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: PPUSH
48409: CALL_OW 72
48413: ST_TO_ADDR
// if tmp then
48414: LD_VAR 0 19
48418: IFFALSE 48466
// for i in tmp do
48420: LD_ADDR_VAR 0 8
48424: PUSH
48425: LD_VAR 0 19
48429: PUSH
48430: FOR_IN
48431: IFFALSE 48464
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48433: LD_VAR 0 8
48437: PPUSH
48438: CALL_OW 250
48442: PPUSH
48443: LD_VAR 0 8
48447: PPUSH
48448: CALL_OW 251
48452: PPUSH
48453: LD_VAR 0 16
48457: PPUSH
48458: CALL_OW 441
48462: GO 48430
48464: POP
48465: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48466: LD_VAR 0 18
48470: PPUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 30
48476: PUSH
48477: LD_INT 32
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 30
48486: PUSH
48487: LD_INT 33
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: LIST
48498: PPUSH
48499: CALL_OW 72
48503: IFFALSE 48591
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48505: LD_ADDR_VAR 0 8
48509: PUSH
48510: LD_VAR 0 18
48514: PPUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 30
48520: PUSH
48521: LD_INT 32
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 30
48530: PUSH
48531: LD_INT 33
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: PPUSH
48543: CALL_OW 72
48547: PUSH
48548: FOR_IN
48549: IFFALSE 48589
// begin if not GetBWeapon ( i ) then
48551: LD_VAR 0 8
48555: PPUSH
48556: CALL_OW 269
48560: NOT
48561: IFFALSE 48587
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48563: LD_VAR 0 8
48567: PPUSH
48568: LD_VAR 0 8
48572: PPUSH
48573: LD_VAR 0 2
48577: PPUSH
48578: CALL 49837 0 2
48582: PPUSH
48583: CALL_OW 431
// end ;
48587: GO 48548
48589: POP
48590: POP
// end ; for i = 1 to personel do
48591: LD_ADDR_VAR 0 8
48595: PUSH
48596: DOUBLE
48597: LD_INT 1
48599: DEC
48600: ST_TO_ADDR
48601: LD_VAR 0 6
48605: PUSH
48606: FOR_TO
48607: IFFALSE 49671
// begin if i > 4 then
48609: LD_VAR 0 8
48613: PUSH
48614: LD_INT 4
48616: GREATER
48617: IFFALSE 48621
// break ;
48619: GO 49671
// case i of 1 :
48621: LD_VAR 0 8
48625: PUSH
48626: LD_INT 1
48628: DOUBLE
48629: EQUAL
48630: IFTRUE 48634
48632: GO 48714
48634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48635: LD_ADDR_VAR 0 12
48639: PUSH
48640: LD_VAR 0 18
48644: PPUSH
48645: LD_INT 22
48647: PUSH
48648: LD_VAR 0 16
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 58
48659: PUSH
48660: EMPTY
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 30
48668: PUSH
48669: LD_INT 32
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 30
48678: PUSH
48679: LD_INT 4
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 30
48688: PUSH
48689: LD_INT 5
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: PPUSH
48707: CALL_OW 72
48711: ST_TO_ADDR
48712: GO 48936
48714: LD_INT 2
48716: DOUBLE
48717: EQUAL
48718: IFTRUE 48722
48720: GO 48784
48722: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48723: LD_ADDR_VAR 0 12
48727: PUSH
48728: LD_VAR 0 18
48732: PPUSH
48733: LD_INT 22
48735: PUSH
48736: LD_VAR 0 16
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 30
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 30
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: LIST
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PPUSH
48777: CALL_OW 72
48781: ST_TO_ADDR
48782: GO 48936
48784: LD_INT 3
48786: DOUBLE
48787: EQUAL
48788: IFTRUE 48792
48790: GO 48854
48792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48793: LD_ADDR_VAR 0 12
48797: PUSH
48798: LD_VAR 0 18
48802: PPUSH
48803: LD_INT 22
48805: PUSH
48806: LD_VAR 0 16
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 30
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 30
48830: PUSH
48831: LD_INT 3
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PPUSH
48847: CALL_OW 72
48851: ST_TO_ADDR
48852: GO 48936
48854: LD_INT 4
48856: DOUBLE
48857: EQUAL
48858: IFTRUE 48862
48860: GO 48935
48862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48863: LD_ADDR_VAR 0 12
48867: PUSH
48868: LD_VAR 0 18
48872: PPUSH
48873: LD_INT 22
48875: PUSH
48876: LD_VAR 0 16
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 30
48890: PUSH
48891: LD_INT 6
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 30
48900: PUSH
48901: LD_INT 7
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 30
48910: PUSH
48911: LD_INT 8
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PPUSH
48928: CALL_OW 72
48932: ST_TO_ADDR
48933: GO 48936
48935: POP
// if i = 1 then
48936: LD_VAR 0 8
48940: PUSH
48941: LD_INT 1
48943: EQUAL
48944: IFFALSE 49055
// begin tmp := [ ] ;
48946: LD_ADDR_VAR 0 19
48950: PUSH
48951: EMPTY
48952: ST_TO_ADDR
// for j in f do
48953: LD_ADDR_VAR 0 9
48957: PUSH
48958: LD_VAR 0 12
48962: PUSH
48963: FOR_IN
48964: IFFALSE 49037
// if GetBType ( j ) = b_bunker then
48966: LD_VAR 0 9
48970: PPUSH
48971: CALL_OW 266
48975: PUSH
48976: LD_INT 32
48978: EQUAL
48979: IFFALSE 49006
// tmp := Insert ( tmp , 1 , j ) else
48981: LD_ADDR_VAR 0 19
48985: PUSH
48986: LD_VAR 0 19
48990: PPUSH
48991: LD_INT 1
48993: PPUSH
48994: LD_VAR 0 9
48998: PPUSH
48999: CALL_OW 2
49003: ST_TO_ADDR
49004: GO 49035
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49006: LD_ADDR_VAR 0 19
49010: PUSH
49011: LD_VAR 0 19
49015: PPUSH
49016: LD_VAR 0 19
49020: PUSH
49021: LD_INT 1
49023: PLUS
49024: PPUSH
49025: LD_VAR 0 9
49029: PPUSH
49030: CALL_OW 2
49034: ST_TO_ADDR
49035: GO 48963
49037: POP
49038: POP
// if tmp then
49039: LD_VAR 0 19
49043: IFFALSE 49055
// f := tmp ;
49045: LD_ADDR_VAR 0 12
49049: PUSH
49050: LD_VAR 0 19
49054: ST_TO_ADDR
// end ; x := personel [ i ] ;
49055: LD_ADDR_VAR 0 13
49059: PUSH
49060: LD_VAR 0 6
49064: PUSH
49065: LD_VAR 0 8
49069: ARRAY
49070: ST_TO_ADDR
// if x = - 1 then
49071: LD_VAR 0 13
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: EQUAL
49080: IFFALSE 49289
// begin for j in f do
49082: LD_ADDR_VAR 0 9
49086: PUSH
49087: LD_VAR 0 12
49091: PUSH
49092: FOR_IN
49093: IFFALSE 49285
// repeat InitHc ;
49095: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49099: LD_VAR 0 9
49103: PPUSH
49104: CALL_OW 266
49108: PUSH
49109: LD_INT 5
49111: EQUAL
49112: IFFALSE 49182
// begin if UnitsInside ( j ) < 3 then
49114: LD_VAR 0 9
49118: PPUSH
49119: CALL_OW 313
49123: PUSH
49124: LD_INT 3
49126: LESS
49127: IFFALSE 49163
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49129: LD_INT 0
49131: PPUSH
49132: LD_INT 5
49134: PUSH
49135: LD_INT 8
49137: PUSH
49138: LD_INT 9
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: LIST
49145: PUSH
49146: LD_VAR 0 17
49150: ARRAY
49151: PPUSH
49152: LD_VAR 0 4
49156: PPUSH
49157: CALL_OW 380
49161: GO 49180
// PrepareHuman ( false , i , skill ) ;
49163: LD_INT 0
49165: PPUSH
49166: LD_VAR 0 8
49170: PPUSH
49171: LD_VAR 0 4
49175: PPUSH
49176: CALL_OW 380
// end else
49180: GO 49199
// PrepareHuman ( false , i , skill ) ;
49182: LD_INT 0
49184: PPUSH
49185: LD_VAR 0 8
49189: PPUSH
49190: LD_VAR 0 4
49194: PPUSH
49195: CALL_OW 380
// un := CreateHuman ;
49199: LD_ADDR_VAR 0 14
49203: PUSH
49204: CALL_OW 44
49208: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49209: LD_ADDR_VAR 0 7
49213: PUSH
49214: LD_VAR 0 7
49218: PPUSH
49219: LD_INT 1
49221: PPUSH
49222: LD_VAR 0 14
49226: PPUSH
49227: CALL_OW 2
49231: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49232: LD_VAR 0 14
49236: PPUSH
49237: LD_VAR 0 9
49241: PPUSH
49242: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49246: LD_VAR 0 9
49250: PPUSH
49251: CALL_OW 313
49255: PUSH
49256: LD_INT 6
49258: EQUAL
49259: PUSH
49260: LD_VAR 0 9
49264: PPUSH
49265: CALL_OW 266
49269: PUSH
49270: LD_INT 32
49272: PUSH
49273: LD_INT 31
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: IN
49280: OR
49281: IFFALSE 49095
49283: GO 49092
49285: POP
49286: POP
// end else
49287: GO 49669
// for j = 1 to x do
49289: LD_ADDR_VAR 0 9
49293: PUSH
49294: DOUBLE
49295: LD_INT 1
49297: DEC
49298: ST_TO_ADDR
49299: LD_VAR 0 13
49303: PUSH
49304: FOR_TO
49305: IFFALSE 49667
// begin InitHc ;
49307: CALL_OW 19
// if not f then
49311: LD_VAR 0 12
49315: NOT
49316: IFFALSE 49405
// begin PrepareHuman ( false , i , skill ) ;
49318: LD_INT 0
49320: PPUSH
49321: LD_VAR 0 8
49325: PPUSH
49326: LD_VAR 0 4
49330: PPUSH
49331: CALL_OW 380
// un := CreateHuman ;
49335: LD_ADDR_VAR 0 14
49339: PUSH
49340: CALL_OW 44
49344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49345: LD_ADDR_VAR 0 7
49349: PUSH
49350: LD_VAR 0 7
49354: PPUSH
49355: LD_INT 1
49357: PPUSH
49358: LD_VAR 0 14
49362: PPUSH
49363: CALL_OW 2
49367: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49368: LD_VAR 0 14
49372: PPUSH
49373: LD_VAR 0 1
49377: PPUSH
49378: CALL_OW 250
49382: PPUSH
49383: LD_VAR 0 1
49387: PPUSH
49388: CALL_OW 251
49392: PPUSH
49393: LD_INT 10
49395: PPUSH
49396: LD_INT 0
49398: PPUSH
49399: CALL_OW 50
// continue ;
49403: GO 49304
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49405: LD_VAR 0 12
49409: PUSH
49410: LD_INT 1
49412: ARRAY
49413: PPUSH
49414: CALL_OW 313
49418: PUSH
49419: LD_VAR 0 12
49423: PUSH
49424: LD_INT 1
49426: ARRAY
49427: PPUSH
49428: CALL_OW 266
49432: PUSH
49433: LD_INT 32
49435: PUSH
49436: LD_INT 31
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: IN
49443: AND
49444: PUSH
49445: LD_VAR 0 12
49449: PUSH
49450: LD_INT 1
49452: ARRAY
49453: PPUSH
49454: CALL_OW 313
49458: PUSH
49459: LD_INT 6
49461: EQUAL
49462: OR
49463: IFFALSE 49483
// f := Delete ( f , 1 ) ;
49465: LD_ADDR_VAR 0 12
49469: PUSH
49470: LD_VAR 0 12
49474: PPUSH
49475: LD_INT 1
49477: PPUSH
49478: CALL_OW 3
49482: ST_TO_ADDR
// if not f then
49483: LD_VAR 0 12
49487: NOT
49488: IFFALSE 49506
// begin x := x + 2 ;
49490: LD_ADDR_VAR 0 13
49494: PUSH
49495: LD_VAR 0 13
49499: PUSH
49500: LD_INT 2
49502: PLUS
49503: ST_TO_ADDR
// continue ;
49504: GO 49304
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49506: LD_VAR 0 12
49510: PUSH
49511: LD_INT 1
49513: ARRAY
49514: PPUSH
49515: CALL_OW 266
49519: PUSH
49520: LD_INT 5
49522: EQUAL
49523: IFFALSE 49597
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49525: LD_VAR 0 12
49529: PUSH
49530: LD_INT 1
49532: ARRAY
49533: PPUSH
49534: CALL_OW 313
49538: PUSH
49539: LD_INT 3
49541: LESS
49542: IFFALSE 49578
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49544: LD_INT 0
49546: PPUSH
49547: LD_INT 5
49549: PUSH
49550: LD_INT 8
49552: PUSH
49553: LD_INT 9
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: PUSH
49561: LD_VAR 0 17
49565: ARRAY
49566: PPUSH
49567: LD_VAR 0 4
49571: PPUSH
49572: CALL_OW 380
49576: GO 49595
// PrepareHuman ( false , i , skill ) ;
49578: LD_INT 0
49580: PPUSH
49581: LD_VAR 0 8
49585: PPUSH
49586: LD_VAR 0 4
49590: PPUSH
49591: CALL_OW 380
// end else
49595: GO 49614
// PrepareHuman ( false , i , skill ) ;
49597: LD_INT 0
49599: PPUSH
49600: LD_VAR 0 8
49604: PPUSH
49605: LD_VAR 0 4
49609: PPUSH
49610: CALL_OW 380
// un := CreateHuman ;
49614: LD_ADDR_VAR 0 14
49618: PUSH
49619: CALL_OW 44
49623: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49624: LD_ADDR_VAR 0 7
49628: PUSH
49629: LD_VAR 0 7
49633: PPUSH
49634: LD_INT 1
49636: PPUSH
49637: LD_VAR 0 14
49641: PPUSH
49642: CALL_OW 2
49646: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49647: LD_VAR 0 14
49651: PPUSH
49652: LD_VAR 0 12
49656: PUSH
49657: LD_INT 1
49659: ARRAY
49660: PPUSH
49661: CALL_OW 52
// end ;
49665: GO 49304
49667: POP
49668: POP
// end ;
49669: GO 48606
49671: POP
49672: POP
// result := result ^ buildings ;
49673: LD_ADDR_VAR 0 7
49677: PUSH
49678: LD_VAR 0 7
49682: PUSH
49683: LD_VAR 0 18
49687: ADD
49688: ST_TO_ADDR
// end else
49689: GO 49832
// begin for i = 1 to personel do
49691: LD_ADDR_VAR 0 8
49695: PUSH
49696: DOUBLE
49697: LD_INT 1
49699: DEC
49700: ST_TO_ADDR
49701: LD_VAR 0 6
49705: PUSH
49706: FOR_TO
49707: IFFALSE 49830
// begin if i > 4 then
49709: LD_VAR 0 8
49713: PUSH
49714: LD_INT 4
49716: GREATER
49717: IFFALSE 49721
// break ;
49719: GO 49830
// x := personel [ i ] ;
49721: LD_ADDR_VAR 0 13
49725: PUSH
49726: LD_VAR 0 6
49730: PUSH
49731: LD_VAR 0 8
49735: ARRAY
49736: ST_TO_ADDR
// if x = - 1 then
49737: LD_VAR 0 13
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: EQUAL
49746: IFFALSE 49750
// continue ;
49748: GO 49706
// PrepareHuman ( false , i , skill ) ;
49750: LD_INT 0
49752: PPUSH
49753: LD_VAR 0 8
49757: PPUSH
49758: LD_VAR 0 4
49762: PPUSH
49763: CALL_OW 380
// un := CreateHuman ;
49767: LD_ADDR_VAR 0 14
49771: PUSH
49772: CALL_OW 44
49776: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49777: LD_VAR 0 14
49781: PPUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: CALL_OW 250
49791: PPUSH
49792: LD_VAR 0 1
49796: PPUSH
49797: CALL_OW 251
49801: PPUSH
49802: LD_INT 10
49804: PPUSH
49805: LD_INT 0
49807: PPUSH
49808: CALL_OW 50
// result := result ^ un ;
49812: LD_ADDR_VAR 0 7
49816: PUSH
49817: LD_VAR 0 7
49821: PUSH
49822: LD_VAR 0 14
49826: ADD
49827: ST_TO_ADDR
// end ;
49828: GO 49706
49830: POP
49831: POP
// end ; end ;
49832: LD_VAR 0 7
49836: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49837: LD_INT 0
49839: PPUSH
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
// result := false ;
49855: LD_ADDR_VAR 0 3
49859: PUSH
49860: LD_INT 0
49862: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49863: LD_VAR 0 1
49867: NOT
49868: PUSH
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL_OW 266
49878: PUSH
49879: LD_INT 32
49881: PUSH
49882: LD_INT 33
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: IN
49889: NOT
49890: OR
49891: IFFALSE 49895
// exit ;
49893: GO 51034
// nat := GetNation ( tower ) ;
49895: LD_ADDR_VAR 0 12
49899: PUSH
49900: LD_VAR 0 1
49904: PPUSH
49905: CALL_OW 248
49909: ST_TO_ADDR
// side := GetSide ( tower ) ;
49910: LD_ADDR_VAR 0 16
49914: PUSH
49915: LD_VAR 0 1
49919: PPUSH
49920: CALL_OW 255
49924: ST_TO_ADDR
// x := GetX ( tower ) ;
49925: LD_ADDR_VAR 0 10
49929: PUSH
49930: LD_VAR 0 1
49934: PPUSH
49935: CALL_OW 250
49939: ST_TO_ADDR
// y := GetY ( tower ) ;
49940: LD_ADDR_VAR 0 11
49944: PUSH
49945: LD_VAR 0 1
49949: PPUSH
49950: CALL_OW 251
49954: ST_TO_ADDR
// if not x or not y then
49955: LD_VAR 0 10
49959: NOT
49960: PUSH
49961: LD_VAR 0 11
49965: NOT
49966: OR
49967: IFFALSE 49971
// exit ;
49969: GO 51034
// weapon := 0 ;
49971: LD_ADDR_VAR 0 18
49975: PUSH
49976: LD_INT 0
49978: ST_TO_ADDR
// fac_list := [ ] ;
49979: LD_ADDR_VAR 0 17
49983: PUSH
49984: EMPTY
49985: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49986: LD_ADDR_VAR 0 6
49990: PUSH
49991: LD_VAR 0 1
49995: PPUSH
49996: CALL_OW 274
50000: PPUSH
50001: LD_VAR 0 2
50005: PPUSH
50006: LD_INT 0
50008: PPUSH
50009: CALL 47574 0 3
50013: PPUSH
50014: LD_INT 30
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PPUSH
50024: CALL_OW 72
50028: ST_TO_ADDR
// if not factories then
50029: LD_VAR 0 6
50033: NOT
50034: IFFALSE 50038
// exit ;
50036: GO 51034
// for i in factories do
50038: LD_ADDR_VAR 0 8
50042: PUSH
50043: LD_VAR 0 6
50047: PUSH
50048: FOR_IN
50049: IFFALSE 50074
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50051: LD_ADDR_VAR 0 17
50055: PUSH
50056: LD_VAR 0 17
50060: PUSH
50061: LD_VAR 0 8
50065: PPUSH
50066: CALL_OW 478
50070: UNION
50071: ST_TO_ADDR
50072: GO 50048
50074: POP
50075: POP
// if not fac_list then
50076: LD_VAR 0 17
50080: NOT
50081: IFFALSE 50085
// exit ;
50083: GO 51034
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50085: LD_ADDR_VAR 0 5
50089: PUSH
50090: LD_INT 4
50092: PUSH
50093: LD_INT 5
50095: PUSH
50096: LD_INT 9
50098: PUSH
50099: LD_INT 10
50101: PUSH
50102: LD_INT 6
50104: PUSH
50105: LD_INT 7
50107: PUSH
50108: LD_INT 11
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 27
50122: PUSH
50123: LD_INT 28
50125: PUSH
50126: LD_INT 26
50128: PUSH
50129: LD_INT 30
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 43
50140: PUSH
50141: LD_INT 44
50143: PUSH
50144: LD_INT 46
50146: PUSH
50147: LD_INT 45
50149: PUSH
50150: LD_INT 47
50152: PUSH
50153: LD_INT 49
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: PUSH
50169: LD_VAR 0 12
50173: ARRAY
50174: ST_TO_ADDR
// for i in list do
50175: LD_ADDR_VAR 0 8
50179: PUSH
50180: LD_VAR 0 5
50184: PUSH
50185: FOR_IN
50186: IFFALSE 50219
// if not i in fac_list then
50188: LD_VAR 0 8
50192: PUSH
50193: LD_VAR 0 17
50197: IN
50198: NOT
50199: IFFALSE 50217
// list := list diff i ;
50201: LD_ADDR_VAR 0 5
50205: PUSH
50206: LD_VAR 0 5
50210: PUSH
50211: LD_VAR 0 8
50215: DIFF
50216: ST_TO_ADDR
50217: GO 50185
50219: POP
50220: POP
// if not list then
50221: LD_VAR 0 5
50225: NOT
50226: IFFALSE 50230
// exit ;
50228: GO 51034
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50230: LD_VAR 0 12
50234: PUSH
50235: LD_INT 3
50237: EQUAL
50238: PUSH
50239: LD_INT 49
50241: PUSH
50242: LD_VAR 0 5
50246: IN
50247: AND
50248: PUSH
50249: LD_INT 31
50251: PPUSH
50252: LD_VAR 0 16
50256: PPUSH
50257: CALL_OW 321
50261: PUSH
50262: LD_INT 2
50264: EQUAL
50265: AND
50266: IFFALSE 50326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50268: LD_INT 22
50270: PUSH
50271: LD_VAR 0 16
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 35
50282: PUSH
50283: LD_INT 49
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 91
50292: PUSH
50293: LD_VAR 0 1
50297: PUSH
50298: LD_INT 10
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: PPUSH
50311: CALL_OW 69
50315: NOT
50316: IFFALSE 50326
// weapon := ru_time_lapser ;
50318: LD_ADDR_VAR 0 18
50322: PUSH
50323: LD_INT 49
50325: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50326: LD_VAR 0 12
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: IN
50341: PUSH
50342: LD_INT 11
50344: PUSH
50345: LD_VAR 0 5
50349: IN
50350: PUSH
50351: LD_INT 30
50353: PUSH
50354: LD_VAR 0 5
50358: IN
50359: OR
50360: AND
50361: PUSH
50362: LD_INT 6
50364: PPUSH
50365: LD_VAR 0 16
50369: PPUSH
50370: CALL_OW 321
50374: PUSH
50375: LD_INT 2
50377: EQUAL
50378: AND
50379: IFFALSE 50544
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50381: LD_INT 22
50383: PUSH
50384: LD_VAR 0 16
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: LD_INT 35
50398: PUSH
50399: LD_INT 11
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 35
50408: PUSH
50409: LD_INT 30
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 91
50423: PUSH
50424: LD_VAR 0 1
50428: PUSH
50429: LD_INT 18
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: PPUSH
50442: CALL_OW 69
50446: NOT
50447: PUSH
50448: LD_INT 22
50450: PUSH
50451: LD_VAR 0 16
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 30
50465: PUSH
50466: LD_INT 32
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 30
50475: PUSH
50476: LD_INT 33
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 91
50490: PUSH
50491: LD_VAR 0 1
50495: PUSH
50496: LD_INT 12
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: PUSH
50509: EMPTY
50510: LIST
50511: PPUSH
50512: CALL_OW 69
50516: PUSH
50517: LD_INT 2
50519: GREATER
50520: AND
50521: IFFALSE 50544
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50523: LD_ADDR_VAR 0 18
50527: PUSH
50528: LD_INT 11
50530: PUSH
50531: LD_INT 30
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_VAR 0 12
50542: ARRAY
50543: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50544: LD_VAR 0 18
50548: NOT
50549: PUSH
50550: LD_INT 40
50552: PPUSH
50553: LD_VAR 0 16
50557: PPUSH
50558: CALL_OW 321
50562: PUSH
50563: LD_INT 2
50565: EQUAL
50566: AND
50567: PUSH
50568: LD_INT 7
50570: PUSH
50571: LD_VAR 0 5
50575: IN
50576: PUSH
50577: LD_INT 28
50579: PUSH
50580: LD_VAR 0 5
50584: IN
50585: OR
50586: PUSH
50587: LD_INT 45
50589: PUSH
50590: LD_VAR 0 5
50594: IN
50595: OR
50596: AND
50597: IFFALSE 50851
// begin hex := GetHexInfo ( x , y ) ;
50599: LD_ADDR_VAR 0 4
50603: PUSH
50604: LD_VAR 0 10
50608: PPUSH
50609: LD_VAR 0 11
50613: PPUSH
50614: CALL_OW 546
50618: ST_TO_ADDR
// if hex [ 1 ] then
50619: LD_VAR 0 4
50623: PUSH
50624: LD_INT 1
50626: ARRAY
50627: IFFALSE 50631
// exit ;
50629: GO 51034
// height := hex [ 2 ] ;
50631: LD_ADDR_VAR 0 15
50635: PUSH
50636: LD_VAR 0 4
50640: PUSH
50641: LD_INT 2
50643: ARRAY
50644: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50645: LD_ADDR_VAR 0 14
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 5
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// for i in tmp do
50668: LD_ADDR_VAR 0 8
50672: PUSH
50673: LD_VAR 0 14
50677: PUSH
50678: FOR_IN
50679: IFFALSE 50849
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50681: LD_ADDR_VAR 0 9
50685: PUSH
50686: LD_VAR 0 10
50690: PPUSH
50691: LD_VAR 0 8
50695: PPUSH
50696: LD_INT 5
50698: PPUSH
50699: CALL_OW 272
50703: PUSH
50704: LD_VAR 0 11
50708: PPUSH
50709: LD_VAR 0 8
50713: PPUSH
50714: LD_INT 5
50716: PPUSH
50717: CALL_OW 273
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50726: LD_VAR 0 9
50730: PUSH
50731: LD_INT 1
50733: ARRAY
50734: PPUSH
50735: LD_VAR 0 9
50739: PUSH
50740: LD_INT 2
50742: ARRAY
50743: PPUSH
50744: CALL_OW 488
50748: IFFALSE 50847
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50750: LD_ADDR_VAR 0 4
50754: PUSH
50755: LD_VAR 0 9
50759: PUSH
50760: LD_INT 1
50762: ARRAY
50763: PPUSH
50764: LD_VAR 0 9
50768: PUSH
50769: LD_INT 2
50771: ARRAY
50772: PPUSH
50773: CALL_OW 546
50777: ST_TO_ADDR
// if hex [ 1 ] then
50778: LD_VAR 0 4
50782: PUSH
50783: LD_INT 1
50785: ARRAY
50786: IFFALSE 50790
// continue ;
50788: GO 50678
// h := hex [ 2 ] ;
50790: LD_ADDR_VAR 0 13
50794: PUSH
50795: LD_VAR 0 4
50799: PUSH
50800: LD_INT 2
50802: ARRAY
50803: ST_TO_ADDR
// if h + 7 < height then
50804: LD_VAR 0 13
50808: PUSH
50809: LD_INT 7
50811: PLUS
50812: PUSH
50813: LD_VAR 0 15
50817: LESS
50818: IFFALSE 50847
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50820: LD_ADDR_VAR 0 18
50824: PUSH
50825: LD_INT 7
50827: PUSH
50828: LD_INT 28
50830: PUSH
50831: LD_INT 45
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: PUSH
50839: LD_VAR 0 12
50843: ARRAY
50844: ST_TO_ADDR
// break ;
50845: GO 50849
// end ; end ; end ;
50847: GO 50678
50849: POP
50850: POP
// end ; if not weapon then
50851: LD_VAR 0 18
50855: NOT
50856: IFFALSE 50916
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50858: LD_ADDR_VAR 0 5
50862: PUSH
50863: LD_VAR 0 5
50867: PUSH
50868: LD_INT 11
50870: PUSH
50871: LD_INT 30
50873: PUSH
50874: LD_INT 49
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: DIFF
50882: ST_TO_ADDR
// if not list then
50883: LD_VAR 0 5
50887: NOT
50888: IFFALSE 50892
// exit ;
50890: GO 51034
// weapon := list [ rand ( 1 , list ) ] ;
50892: LD_ADDR_VAR 0 18
50896: PUSH
50897: LD_VAR 0 5
50901: PUSH
50902: LD_INT 1
50904: PPUSH
50905: LD_VAR 0 5
50909: PPUSH
50910: CALL_OW 12
50914: ARRAY
50915: ST_TO_ADDR
// end ; if weapon then
50916: LD_VAR 0 18
50920: IFFALSE 51034
// begin tmp := CostOfWeapon ( weapon ) ;
50922: LD_ADDR_VAR 0 14
50926: PUSH
50927: LD_VAR 0 18
50931: PPUSH
50932: CALL_OW 451
50936: ST_TO_ADDR
// j := GetBase ( tower ) ;
50937: LD_ADDR_VAR 0 9
50941: PUSH
50942: LD_VAR 0 1
50946: PPUSH
50947: CALL_OW 274
50951: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50952: LD_VAR 0 9
50956: PPUSH
50957: LD_INT 1
50959: PPUSH
50960: CALL_OW 275
50964: PUSH
50965: LD_VAR 0 14
50969: PUSH
50970: LD_INT 1
50972: ARRAY
50973: GREATEREQUAL
50974: PUSH
50975: LD_VAR 0 9
50979: PPUSH
50980: LD_INT 2
50982: PPUSH
50983: CALL_OW 275
50987: PUSH
50988: LD_VAR 0 14
50992: PUSH
50993: LD_INT 2
50995: ARRAY
50996: GREATEREQUAL
50997: AND
50998: PUSH
50999: LD_VAR 0 9
51003: PPUSH
51004: LD_INT 3
51006: PPUSH
51007: CALL_OW 275
51011: PUSH
51012: LD_VAR 0 14
51016: PUSH
51017: LD_INT 3
51019: ARRAY
51020: GREATEREQUAL
51021: AND
51022: IFFALSE 51034
// result := weapon ;
51024: LD_ADDR_VAR 0 3
51028: PUSH
51029: LD_VAR 0 18
51033: ST_TO_ADDR
// end ; end ;
51034: LD_VAR 0 3
51038: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51039: LD_INT 0
51041: PPUSH
51042: PPUSH
// result := true ;
51043: LD_ADDR_VAR 0 3
51047: PUSH
51048: LD_INT 1
51050: ST_TO_ADDR
// if array1 = array2 then
51051: LD_VAR 0 1
51055: PUSH
51056: LD_VAR 0 2
51060: EQUAL
51061: IFFALSE 51121
// begin for i = 1 to array1 do
51063: LD_ADDR_VAR 0 4
51067: PUSH
51068: DOUBLE
51069: LD_INT 1
51071: DEC
51072: ST_TO_ADDR
51073: LD_VAR 0 1
51077: PUSH
51078: FOR_TO
51079: IFFALSE 51117
// if array1 [ i ] <> array2 [ i ] then
51081: LD_VAR 0 1
51085: PUSH
51086: LD_VAR 0 4
51090: ARRAY
51091: PUSH
51092: LD_VAR 0 2
51096: PUSH
51097: LD_VAR 0 4
51101: ARRAY
51102: NONEQUAL
51103: IFFALSE 51115
// begin result := false ;
51105: LD_ADDR_VAR 0 3
51109: PUSH
51110: LD_INT 0
51112: ST_TO_ADDR
// break ;
51113: GO 51117
// end ;
51115: GO 51078
51117: POP
51118: POP
// end else
51119: GO 51129
// result := false ;
51121: LD_ADDR_VAR 0 3
51125: PUSH
51126: LD_INT 0
51128: ST_TO_ADDR
// end ;
51129: LD_VAR 0 3
51133: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51134: LD_INT 0
51136: PPUSH
51137: PPUSH
// if not array1 or not array2 then
51138: LD_VAR 0 1
51142: NOT
51143: PUSH
51144: LD_VAR 0 2
51148: NOT
51149: OR
51150: IFFALSE 51154
// exit ;
51152: GO 51218
// result := true ;
51154: LD_ADDR_VAR 0 3
51158: PUSH
51159: LD_INT 1
51161: ST_TO_ADDR
// for i = 1 to array1 do
51162: LD_ADDR_VAR 0 4
51166: PUSH
51167: DOUBLE
51168: LD_INT 1
51170: DEC
51171: ST_TO_ADDR
51172: LD_VAR 0 1
51176: PUSH
51177: FOR_TO
51178: IFFALSE 51216
// if array1 [ i ] <> array2 [ i ] then
51180: LD_VAR 0 1
51184: PUSH
51185: LD_VAR 0 4
51189: ARRAY
51190: PUSH
51191: LD_VAR 0 2
51195: PUSH
51196: LD_VAR 0 4
51200: ARRAY
51201: NONEQUAL
51202: IFFALSE 51214
// begin result := false ;
51204: LD_ADDR_VAR 0 3
51208: PUSH
51209: LD_INT 0
51211: ST_TO_ADDR
// break ;
51212: GO 51216
// end ;
51214: GO 51177
51216: POP
51217: POP
// end ;
51218: LD_VAR 0 3
51222: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51223: LD_INT 0
51225: PPUSH
51226: PPUSH
51227: PPUSH
// pom := GetBase ( fac ) ;
51228: LD_ADDR_VAR 0 5
51232: PUSH
51233: LD_VAR 0 1
51237: PPUSH
51238: CALL_OW 274
51242: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51243: LD_ADDR_VAR 0 4
51247: PUSH
51248: LD_VAR 0 2
51252: PUSH
51253: LD_INT 1
51255: ARRAY
51256: PPUSH
51257: LD_VAR 0 2
51261: PUSH
51262: LD_INT 2
51264: ARRAY
51265: PPUSH
51266: LD_VAR 0 2
51270: PUSH
51271: LD_INT 3
51273: ARRAY
51274: PPUSH
51275: LD_VAR 0 2
51279: PUSH
51280: LD_INT 4
51282: ARRAY
51283: PPUSH
51284: CALL_OW 449
51288: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51289: LD_ADDR_VAR 0 3
51293: PUSH
51294: LD_VAR 0 5
51298: PPUSH
51299: LD_INT 1
51301: PPUSH
51302: CALL_OW 275
51306: PUSH
51307: LD_VAR 0 4
51311: PUSH
51312: LD_INT 1
51314: ARRAY
51315: GREATEREQUAL
51316: PUSH
51317: LD_VAR 0 5
51321: PPUSH
51322: LD_INT 2
51324: PPUSH
51325: CALL_OW 275
51329: PUSH
51330: LD_VAR 0 4
51334: PUSH
51335: LD_INT 2
51337: ARRAY
51338: GREATEREQUAL
51339: AND
51340: PUSH
51341: LD_VAR 0 5
51345: PPUSH
51346: LD_INT 3
51348: PPUSH
51349: CALL_OW 275
51353: PUSH
51354: LD_VAR 0 4
51358: PUSH
51359: LD_INT 3
51361: ARRAY
51362: GREATEREQUAL
51363: AND
51364: ST_TO_ADDR
// end ;
51365: LD_VAR 0 3
51369: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51370: LD_INT 0
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
// pom := GetBase ( building ) ;
51376: LD_ADDR_VAR 0 3
51380: PUSH
51381: LD_VAR 0 1
51385: PPUSH
51386: CALL_OW 274
51390: ST_TO_ADDR
// if not pom then
51391: LD_VAR 0 3
51395: NOT
51396: IFFALSE 51400
// exit ;
51398: GO 51570
// btype := GetBType ( building ) ;
51400: LD_ADDR_VAR 0 5
51404: PUSH
51405: LD_VAR 0 1
51409: PPUSH
51410: CALL_OW 266
51414: ST_TO_ADDR
// if btype = b_armoury then
51415: LD_VAR 0 5
51419: PUSH
51420: LD_INT 4
51422: EQUAL
51423: IFFALSE 51433
// btype := b_barracks ;
51425: LD_ADDR_VAR 0 5
51429: PUSH
51430: LD_INT 5
51432: ST_TO_ADDR
// if btype = b_depot then
51433: LD_VAR 0 5
51437: PUSH
51438: LD_INT 0
51440: EQUAL
51441: IFFALSE 51451
// btype := b_warehouse ;
51443: LD_ADDR_VAR 0 5
51447: PUSH
51448: LD_INT 1
51450: ST_TO_ADDR
// if btype = b_workshop then
51451: LD_VAR 0 5
51455: PUSH
51456: LD_INT 2
51458: EQUAL
51459: IFFALSE 51469
// btype := b_factory ;
51461: LD_ADDR_VAR 0 5
51465: PUSH
51466: LD_INT 3
51468: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51469: LD_ADDR_VAR 0 4
51473: PUSH
51474: LD_VAR 0 5
51478: PPUSH
51479: LD_VAR 0 1
51483: PPUSH
51484: CALL_OW 248
51488: PPUSH
51489: CALL_OW 450
51493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51494: LD_ADDR_VAR 0 2
51498: PUSH
51499: LD_VAR 0 3
51503: PPUSH
51504: LD_INT 1
51506: PPUSH
51507: CALL_OW 275
51511: PUSH
51512: LD_VAR 0 4
51516: PUSH
51517: LD_INT 1
51519: ARRAY
51520: GREATEREQUAL
51521: PUSH
51522: LD_VAR 0 3
51526: PPUSH
51527: LD_INT 2
51529: PPUSH
51530: CALL_OW 275
51534: PUSH
51535: LD_VAR 0 4
51539: PUSH
51540: LD_INT 2
51542: ARRAY
51543: GREATEREQUAL
51544: AND
51545: PUSH
51546: LD_VAR 0 3
51550: PPUSH
51551: LD_INT 3
51553: PPUSH
51554: CALL_OW 275
51558: PUSH
51559: LD_VAR 0 4
51563: PUSH
51564: LD_INT 3
51566: ARRAY
51567: GREATEREQUAL
51568: AND
51569: ST_TO_ADDR
// end ;
51570: LD_VAR 0 2
51574: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51575: LD_INT 0
51577: PPUSH
51578: PPUSH
51579: PPUSH
// pom := GetBase ( building ) ;
51580: LD_ADDR_VAR 0 4
51584: PUSH
51585: LD_VAR 0 1
51589: PPUSH
51590: CALL_OW 274
51594: ST_TO_ADDR
// if not pom then
51595: LD_VAR 0 4
51599: NOT
51600: IFFALSE 51604
// exit ;
51602: GO 51705
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51604: LD_ADDR_VAR 0 5
51608: PUSH
51609: LD_VAR 0 2
51613: PPUSH
51614: LD_VAR 0 1
51618: PPUSH
51619: CALL_OW 248
51623: PPUSH
51624: CALL_OW 450
51628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51629: LD_ADDR_VAR 0 3
51633: PUSH
51634: LD_VAR 0 4
51638: PPUSH
51639: LD_INT 1
51641: PPUSH
51642: CALL_OW 275
51646: PUSH
51647: LD_VAR 0 5
51651: PUSH
51652: LD_INT 1
51654: ARRAY
51655: GREATEREQUAL
51656: PUSH
51657: LD_VAR 0 4
51661: PPUSH
51662: LD_INT 2
51664: PPUSH
51665: CALL_OW 275
51669: PUSH
51670: LD_VAR 0 5
51674: PUSH
51675: LD_INT 2
51677: ARRAY
51678: GREATEREQUAL
51679: AND
51680: PUSH
51681: LD_VAR 0 4
51685: PPUSH
51686: LD_INT 3
51688: PPUSH
51689: CALL_OW 275
51693: PUSH
51694: LD_VAR 0 5
51698: PUSH
51699: LD_INT 3
51701: ARRAY
51702: GREATEREQUAL
51703: AND
51704: ST_TO_ADDR
// end ;
51705: LD_VAR 0 3
51709: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51710: LD_INT 0
51712: PPUSH
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
// result := false ;
51723: LD_ADDR_VAR 0 8
51727: PUSH
51728: LD_INT 0
51730: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51731: LD_VAR 0 5
51735: NOT
51736: PUSH
51737: LD_VAR 0 1
51741: NOT
51742: OR
51743: PUSH
51744: LD_VAR 0 2
51748: NOT
51749: OR
51750: PUSH
51751: LD_VAR 0 3
51755: NOT
51756: OR
51757: IFFALSE 51761
// exit ;
51759: GO 52575
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51761: LD_ADDR_VAR 0 14
51765: PUSH
51766: LD_VAR 0 1
51770: PPUSH
51771: LD_VAR 0 2
51775: PPUSH
51776: LD_VAR 0 3
51780: PPUSH
51781: LD_VAR 0 4
51785: PPUSH
51786: LD_VAR 0 5
51790: PUSH
51791: LD_INT 1
51793: ARRAY
51794: PPUSH
51795: CALL_OW 248
51799: PPUSH
51800: LD_INT 0
51802: PPUSH
51803: CALL 53412 0 6
51807: ST_TO_ADDR
// if not hexes then
51808: LD_VAR 0 14
51812: NOT
51813: IFFALSE 51817
// exit ;
51815: GO 52575
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51817: LD_ADDR_VAR 0 17
51821: PUSH
51822: LD_VAR 0 5
51826: PPUSH
51827: LD_INT 22
51829: PUSH
51830: LD_VAR 0 13
51834: PPUSH
51835: CALL_OW 255
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 30
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 30
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PPUSH
51876: CALL_OW 72
51880: ST_TO_ADDR
// for i = 1 to hexes do
51881: LD_ADDR_VAR 0 9
51885: PUSH
51886: DOUBLE
51887: LD_INT 1
51889: DEC
51890: ST_TO_ADDR
51891: LD_VAR 0 14
51895: PUSH
51896: FOR_TO
51897: IFFALSE 52573
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51899: LD_ADDR_VAR 0 13
51903: PUSH
51904: LD_VAR 0 14
51908: PUSH
51909: LD_VAR 0 9
51913: ARRAY
51914: PUSH
51915: LD_INT 1
51917: ARRAY
51918: PPUSH
51919: LD_VAR 0 14
51923: PUSH
51924: LD_VAR 0 9
51928: ARRAY
51929: PUSH
51930: LD_INT 2
51932: ARRAY
51933: PPUSH
51934: CALL_OW 428
51938: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51939: LD_VAR 0 14
51943: PUSH
51944: LD_VAR 0 9
51948: ARRAY
51949: PUSH
51950: LD_INT 1
51952: ARRAY
51953: PPUSH
51954: LD_VAR 0 14
51958: PUSH
51959: LD_VAR 0 9
51963: ARRAY
51964: PUSH
51965: LD_INT 2
51967: ARRAY
51968: PPUSH
51969: CALL_OW 351
51973: PUSH
51974: LD_VAR 0 14
51978: PUSH
51979: LD_VAR 0 9
51983: ARRAY
51984: PUSH
51985: LD_INT 1
51987: ARRAY
51988: PPUSH
51989: LD_VAR 0 14
51993: PUSH
51994: LD_VAR 0 9
51998: ARRAY
51999: PUSH
52000: LD_INT 2
52002: ARRAY
52003: PPUSH
52004: CALL_OW 488
52008: NOT
52009: OR
52010: PUSH
52011: LD_VAR 0 13
52015: PPUSH
52016: CALL_OW 247
52020: PUSH
52021: LD_INT 3
52023: EQUAL
52024: OR
52025: IFFALSE 52031
// exit ;
52027: POP
52028: POP
52029: GO 52575
// if not tmp then
52031: LD_VAR 0 13
52035: NOT
52036: IFFALSE 52040
// continue ;
52038: GO 51896
// result := true ;
52040: LD_ADDR_VAR 0 8
52044: PUSH
52045: LD_INT 1
52047: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52048: LD_VAR 0 6
52052: PUSH
52053: LD_VAR 0 13
52057: PPUSH
52058: CALL_OW 247
52062: PUSH
52063: LD_INT 2
52065: EQUAL
52066: AND
52067: PUSH
52068: LD_VAR 0 13
52072: PPUSH
52073: CALL_OW 263
52077: PUSH
52078: LD_INT 1
52080: EQUAL
52081: AND
52082: IFFALSE 52246
// begin if IsDrivenBy ( tmp ) then
52084: LD_VAR 0 13
52088: PPUSH
52089: CALL_OW 311
52093: IFFALSE 52097
// continue ;
52095: GO 51896
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52097: LD_VAR 0 6
52101: PPUSH
52102: LD_INT 3
52104: PUSH
52105: LD_INT 60
52107: PUSH
52108: EMPTY
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: LD_INT 55
52120: PUSH
52121: EMPTY
52122: LIST
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PPUSH
52132: CALL_OW 72
52136: IFFALSE 52244
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52138: LD_ADDR_VAR 0 18
52142: PUSH
52143: LD_VAR 0 6
52147: PPUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 60
52153: PUSH
52154: EMPTY
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: LD_INT 55
52166: PUSH
52167: EMPTY
52168: LIST
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PPUSH
52178: CALL_OW 72
52182: PUSH
52183: LD_INT 1
52185: ARRAY
52186: ST_TO_ADDR
// if IsInUnit ( driver ) then
52187: LD_VAR 0 18
52191: PPUSH
52192: CALL_OW 310
52196: IFFALSE 52207
// ComExit ( driver ) ;
52198: LD_VAR 0 18
52202: PPUSH
52203: CALL 76596 0 1
// AddComEnterUnit ( driver , tmp ) ;
52207: LD_VAR 0 18
52211: PPUSH
52212: LD_VAR 0 13
52216: PPUSH
52217: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52221: LD_VAR 0 18
52225: PPUSH
52226: LD_VAR 0 7
52230: PPUSH
52231: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52235: LD_VAR 0 18
52239: PPUSH
52240: CALL_OW 181
// end ; continue ;
52244: GO 51896
// end ; if not cleaners or not tmp in cleaners then
52246: LD_VAR 0 6
52250: NOT
52251: PUSH
52252: LD_VAR 0 13
52256: PUSH
52257: LD_VAR 0 6
52261: IN
52262: NOT
52263: OR
52264: IFFALSE 52571
// begin if dep then
52266: LD_VAR 0 17
52270: IFFALSE 52406
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52272: LD_ADDR_VAR 0 16
52276: PUSH
52277: LD_VAR 0 17
52281: PUSH
52282: LD_INT 1
52284: ARRAY
52285: PPUSH
52286: CALL_OW 250
52290: PPUSH
52291: LD_VAR 0 17
52295: PUSH
52296: LD_INT 1
52298: ARRAY
52299: PPUSH
52300: CALL_OW 254
52304: PPUSH
52305: LD_INT 5
52307: PPUSH
52308: CALL_OW 272
52312: PUSH
52313: LD_VAR 0 17
52317: PUSH
52318: LD_INT 1
52320: ARRAY
52321: PPUSH
52322: CALL_OW 251
52326: PPUSH
52327: LD_VAR 0 17
52331: PUSH
52332: LD_INT 1
52334: ARRAY
52335: PPUSH
52336: CALL_OW 254
52340: PPUSH
52341: LD_INT 5
52343: PPUSH
52344: CALL_OW 273
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52353: LD_VAR 0 16
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: PPUSH
52362: LD_VAR 0 16
52366: PUSH
52367: LD_INT 2
52369: ARRAY
52370: PPUSH
52371: CALL_OW 488
52375: IFFALSE 52406
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52377: LD_VAR 0 13
52381: PPUSH
52382: LD_VAR 0 16
52386: PUSH
52387: LD_INT 1
52389: ARRAY
52390: PPUSH
52391: LD_VAR 0 16
52395: PUSH
52396: LD_INT 2
52398: ARRAY
52399: PPUSH
52400: CALL_OW 111
// continue ;
52404: GO 51896
// end ; end ; r := GetDir ( tmp ) ;
52406: LD_ADDR_VAR 0 15
52410: PUSH
52411: LD_VAR 0 13
52415: PPUSH
52416: CALL_OW 254
52420: ST_TO_ADDR
// if r = 5 then
52421: LD_VAR 0 15
52425: PUSH
52426: LD_INT 5
52428: EQUAL
52429: IFFALSE 52439
// r := 0 ;
52431: LD_ADDR_VAR 0 15
52435: PUSH
52436: LD_INT 0
52438: ST_TO_ADDR
// for j = r to 5 do
52439: LD_ADDR_VAR 0 10
52443: PUSH
52444: DOUBLE
52445: LD_VAR 0 15
52449: DEC
52450: ST_TO_ADDR
52451: LD_INT 5
52453: PUSH
52454: FOR_TO
52455: IFFALSE 52569
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52457: LD_ADDR_VAR 0 11
52461: PUSH
52462: LD_VAR 0 13
52466: PPUSH
52467: CALL_OW 250
52471: PPUSH
52472: LD_VAR 0 10
52476: PPUSH
52477: LD_INT 2
52479: PPUSH
52480: CALL_OW 272
52484: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52485: LD_ADDR_VAR 0 12
52489: PUSH
52490: LD_VAR 0 13
52494: PPUSH
52495: CALL_OW 251
52499: PPUSH
52500: LD_VAR 0 10
52504: PPUSH
52505: LD_INT 2
52507: PPUSH
52508: CALL_OW 273
52512: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52513: LD_VAR 0 11
52517: PPUSH
52518: LD_VAR 0 12
52522: PPUSH
52523: CALL_OW 488
52527: PUSH
52528: LD_VAR 0 11
52532: PPUSH
52533: LD_VAR 0 12
52537: PPUSH
52538: CALL_OW 428
52542: NOT
52543: AND
52544: IFFALSE 52567
// begin ComMoveXY ( tmp , _x , _y ) ;
52546: LD_VAR 0 13
52550: PPUSH
52551: LD_VAR 0 11
52555: PPUSH
52556: LD_VAR 0 12
52560: PPUSH
52561: CALL_OW 111
// break ;
52565: GO 52569
// end ; end ;
52567: GO 52454
52569: POP
52570: POP
// end ; end ;
52571: GO 51896
52573: POP
52574: POP
// end ;
52575: LD_VAR 0 8
52579: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
52580: LD_INT 0
52582: PPUSH
52583: PPUSH
52584: PPUSH
52585: PPUSH
52586: PPUSH
52587: PPUSH
52588: PPUSH
52589: PPUSH
52590: PPUSH
52591: PPUSH
// result := false ;
52592: LD_ADDR_VAR 0 6
52596: PUSH
52597: LD_INT 0
52599: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52600: LD_VAR 0 1
52604: NOT
52605: PUSH
52606: LD_VAR 0 1
52610: PPUSH
52611: CALL_OW 266
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: IN
52626: NOT
52627: OR
52628: PUSH
52629: LD_VAR 0 2
52633: NOT
52634: OR
52635: PUSH
52636: LD_VAR 0 5
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: LD_INT 4
52655: PUSH
52656: LD_INT 5
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: IN
52667: NOT
52668: OR
52669: PUSH
52670: LD_VAR 0 3
52674: PPUSH
52675: LD_VAR 0 4
52679: PPUSH
52680: CALL_OW 488
52684: NOT
52685: OR
52686: IFFALSE 52690
// exit ;
52688: GO 53407
// pom := GetBase ( depot ) ;
52690: LD_ADDR_VAR 0 10
52694: PUSH
52695: LD_VAR 0 1
52699: PPUSH
52700: CALL_OW 274
52704: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52705: LD_ADDR_VAR 0 11
52709: PUSH
52710: LD_VAR 0 2
52714: PPUSH
52715: LD_VAR 0 1
52719: PPUSH
52720: CALL_OW 248
52724: PPUSH
52725: CALL_OW 450
52729: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52730: LD_VAR 0 10
52734: PPUSH
52735: LD_INT 1
52737: PPUSH
52738: CALL_OW 275
52742: PUSH
52743: LD_VAR 0 11
52747: PUSH
52748: LD_INT 1
52750: ARRAY
52751: GREATEREQUAL
52752: PUSH
52753: LD_VAR 0 10
52757: PPUSH
52758: LD_INT 2
52760: PPUSH
52761: CALL_OW 275
52765: PUSH
52766: LD_VAR 0 11
52770: PUSH
52771: LD_INT 2
52773: ARRAY
52774: GREATEREQUAL
52775: AND
52776: PUSH
52777: LD_VAR 0 10
52781: PPUSH
52782: LD_INT 3
52784: PPUSH
52785: CALL_OW 275
52789: PUSH
52790: LD_VAR 0 11
52794: PUSH
52795: LD_INT 3
52797: ARRAY
52798: GREATEREQUAL
52799: AND
52800: NOT
52801: IFFALSE 52805
// exit ;
52803: GO 53407
// if GetBType ( depot ) = b_depot then
52805: LD_VAR 0 1
52809: PPUSH
52810: CALL_OW 266
52814: PUSH
52815: LD_INT 0
52817: EQUAL
52818: IFFALSE 52830
// dist := 28 else
52820: LD_ADDR_VAR 0 14
52824: PUSH
52825: LD_INT 28
52827: ST_TO_ADDR
52828: GO 52838
// dist := 36 ;
52830: LD_ADDR_VAR 0 14
52834: PUSH
52835: LD_INT 36
52837: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52838: LD_VAR 0 1
52842: PPUSH
52843: LD_VAR 0 3
52847: PPUSH
52848: LD_VAR 0 4
52852: PPUSH
52853: CALL_OW 297
52857: PUSH
52858: LD_VAR 0 14
52862: GREATER
52863: IFFALSE 52867
// exit ;
52865: GO 53407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52867: LD_ADDR_VAR 0 12
52871: PUSH
52872: LD_VAR 0 2
52876: PPUSH
52877: LD_VAR 0 3
52881: PPUSH
52882: LD_VAR 0 4
52886: PPUSH
52887: LD_VAR 0 5
52891: PPUSH
52892: LD_VAR 0 1
52896: PPUSH
52897: CALL_OW 248
52901: PPUSH
52902: LD_INT 0
52904: PPUSH
52905: CALL 53412 0 6
52909: ST_TO_ADDR
// if not hexes then
52910: LD_VAR 0 12
52914: NOT
52915: IFFALSE 52919
// exit ;
52917: GO 53407
// hex := GetHexInfo ( x , y ) ;
52919: LD_ADDR_VAR 0 15
52923: PUSH
52924: LD_VAR 0 3
52928: PPUSH
52929: LD_VAR 0 4
52933: PPUSH
52934: CALL_OW 546
52938: ST_TO_ADDR
// if hex [ 1 ] then
52939: LD_VAR 0 15
52943: PUSH
52944: LD_INT 1
52946: ARRAY
52947: IFFALSE 52951
// exit ;
52949: GO 53407
// height := hex [ 2 ] ;
52951: LD_ADDR_VAR 0 13
52955: PUSH
52956: LD_VAR 0 15
52960: PUSH
52961: LD_INT 2
52963: ARRAY
52964: ST_TO_ADDR
// for i = 1 to hexes do
52965: LD_ADDR_VAR 0 7
52969: PUSH
52970: DOUBLE
52971: LD_INT 1
52973: DEC
52974: ST_TO_ADDR
52975: LD_VAR 0 12
52979: PUSH
52980: FOR_TO
52981: IFFALSE 53311
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52983: LD_VAR 0 12
52987: PUSH
52988: LD_VAR 0 7
52992: ARRAY
52993: PUSH
52994: LD_INT 1
52996: ARRAY
52997: PPUSH
52998: LD_VAR 0 12
53002: PUSH
53003: LD_VAR 0 7
53007: ARRAY
53008: PUSH
53009: LD_INT 2
53011: ARRAY
53012: PPUSH
53013: CALL_OW 488
53017: NOT
53018: PUSH
53019: LD_VAR 0 12
53023: PUSH
53024: LD_VAR 0 7
53028: ARRAY
53029: PUSH
53030: LD_INT 1
53032: ARRAY
53033: PPUSH
53034: LD_VAR 0 12
53038: PUSH
53039: LD_VAR 0 7
53043: ARRAY
53044: PUSH
53045: LD_INT 2
53047: ARRAY
53048: PPUSH
53049: CALL_OW 428
53053: PUSH
53054: LD_INT 0
53056: GREATER
53057: OR
53058: PUSH
53059: LD_VAR 0 12
53063: PUSH
53064: LD_VAR 0 7
53068: ARRAY
53069: PUSH
53070: LD_INT 1
53072: ARRAY
53073: PPUSH
53074: LD_VAR 0 12
53078: PUSH
53079: LD_VAR 0 7
53083: ARRAY
53084: PUSH
53085: LD_INT 2
53087: ARRAY
53088: PPUSH
53089: CALL_OW 351
53093: OR
53094: IFFALSE 53100
// exit ;
53096: POP
53097: POP
53098: GO 53407
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53100: LD_ADDR_VAR 0 8
53104: PUSH
53105: LD_VAR 0 12
53109: PUSH
53110: LD_VAR 0 7
53114: ARRAY
53115: PUSH
53116: LD_INT 1
53118: ARRAY
53119: PPUSH
53120: LD_VAR 0 12
53124: PUSH
53125: LD_VAR 0 7
53129: ARRAY
53130: PUSH
53131: LD_INT 2
53133: ARRAY
53134: PPUSH
53135: CALL_OW 546
53139: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53140: LD_VAR 0 8
53144: PUSH
53145: LD_INT 1
53147: ARRAY
53148: PUSH
53149: LD_VAR 0 8
53153: PUSH
53154: LD_INT 2
53156: ARRAY
53157: PUSH
53158: LD_VAR 0 13
53162: PUSH
53163: LD_INT 2
53165: PLUS
53166: GREATER
53167: OR
53168: PUSH
53169: LD_VAR 0 8
53173: PUSH
53174: LD_INT 2
53176: ARRAY
53177: PUSH
53178: LD_VAR 0 13
53182: PUSH
53183: LD_INT 2
53185: MINUS
53186: LESS
53187: OR
53188: PUSH
53189: LD_VAR 0 8
53193: PUSH
53194: LD_INT 3
53196: ARRAY
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 8
53203: PUSH
53204: LD_INT 9
53206: PUSH
53207: LD_INT 10
53209: PUSH
53210: LD_INT 11
53212: PUSH
53213: LD_INT 12
53215: PUSH
53216: LD_INT 13
53218: PUSH
53219: LD_INT 16
53221: PUSH
53222: LD_INT 17
53224: PUSH
53225: LD_INT 18
53227: PUSH
53228: LD_INT 19
53230: PUSH
53231: LD_INT 20
53233: PUSH
53234: LD_INT 21
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: IN
53252: NOT
53253: OR
53254: PUSH
53255: LD_VAR 0 8
53259: PUSH
53260: LD_INT 5
53262: ARRAY
53263: NOT
53264: OR
53265: PUSH
53266: LD_VAR 0 8
53270: PUSH
53271: LD_INT 6
53273: ARRAY
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 7
53283: PUSH
53284: LD_INT 9
53286: PUSH
53287: LD_INT 10
53289: PUSH
53290: LD_INT 11
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: IN
53301: NOT
53302: OR
53303: IFFALSE 53309
// exit ;
53305: POP
53306: POP
53307: GO 53407
// end ;
53309: GO 52980
53311: POP
53312: POP
// side := GetSide ( depot ) ;
53313: LD_ADDR_VAR 0 9
53317: PUSH
53318: LD_VAR 0 1
53322: PPUSH
53323: CALL_OW 255
53327: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53328: LD_VAR 0 9
53332: PPUSH
53333: LD_VAR 0 3
53337: PPUSH
53338: LD_VAR 0 4
53342: PPUSH
53343: LD_INT 20
53345: PPUSH
53346: CALL 45728 0 4
53350: PUSH
53351: LD_INT 4
53353: ARRAY
53354: IFFALSE 53358
// exit ;
53356: GO 53407
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53358: LD_VAR 0 2
53362: PUSH
53363: LD_INT 29
53365: PUSH
53366: LD_INT 30
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: IN
53373: PUSH
53374: LD_VAR 0 3
53378: PPUSH
53379: LD_VAR 0 4
53383: PPUSH
53384: LD_VAR 0 9
53388: PPUSH
53389: CALL_OW 440
53393: NOT
53394: AND
53395: IFFALSE 53399
// exit ;
53397: GO 53407
// result := true ;
53399: LD_ADDR_VAR 0 6
53403: PUSH
53404: LD_INT 1
53406: ST_TO_ADDR
// end ;
53407: LD_VAR 0 6
53411: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53412: LD_INT 0
53414: PPUSH
53415: PPUSH
53416: PPUSH
53417: PPUSH
53418: PPUSH
53419: PPUSH
53420: PPUSH
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
53430: PPUSH
53431: PPUSH
53432: PPUSH
53433: PPUSH
53434: PPUSH
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
53440: PPUSH
53441: PPUSH
53442: PPUSH
53443: PPUSH
53444: PPUSH
53445: PPUSH
53446: PPUSH
53447: PPUSH
53448: PPUSH
53449: PPUSH
53450: PPUSH
53451: PPUSH
53452: PPUSH
53453: PPUSH
53454: PPUSH
53455: PPUSH
53456: PPUSH
53457: PPUSH
53458: PPUSH
53459: PPUSH
53460: PPUSH
53461: PPUSH
53462: PPUSH
53463: PPUSH
53464: PPUSH
53465: PPUSH
53466: PPUSH
53467: PPUSH
53468: PPUSH
53469: PPUSH
53470: PPUSH
53471: PPUSH
// result = [ ] ;
53472: LD_ADDR_VAR 0 7
53476: PUSH
53477: EMPTY
53478: ST_TO_ADDR
// temp_list = [ ] ;
53479: LD_ADDR_VAR 0 9
53483: PUSH
53484: EMPTY
53485: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53486: LD_VAR 0 4
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: LD_INT 4
53505: PUSH
53506: LD_INT 5
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: IN
53517: NOT
53518: PUSH
53519: LD_VAR 0 1
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: IN
53534: PUSH
53535: LD_VAR 0 5
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 3
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: IN
53554: NOT
53555: AND
53556: OR
53557: IFFALSE 53561
// exit ;
53559: GO 71952
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53561: LD_VAR 0 1
53565: PUSH
53566: LD_INT 6
53568: PUSH
53569: LD_INT 7
53571: PUSH
53572: LD_INT 8
53574: PUSH
53575: LD_INT 13
53577: PUSH
53578: LD_INT 12
53580: PUSH
53581: LD_INT 15
53583: PUSH
53584: LD_INT 11
53586: PUSH
53587: LD_INT 14
53589: PUSH
53590: LD_INT 10
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: IN
53604: IFFALSE 53614
// btype = b_lab ;
53606: LD_ADDR_VAR 0 1
53610: PUSH
53611: LD_INT 6
53613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53614: LD_VAR 0 6
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: IN
53633: NOT
53634: PUSH
53635: LD_VAR 0 1
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: LD_INT 6
53654: PUSH
53655: LD_INT 36
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: LD_INT 5
53663: PUSH
53664: LD_INT 31
53666: PUSH
53667: LD_INT 32
53669: PUSH
53670: LD_INT 33
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: IN
53686: NOT
53687: PUSH
53688: LD_VAR 0 6
53692: PUSH
53693: LD_INT 1
53695: EQUAL
53696: AND
53697: OR
53698: PUSH
53699: LD_VAR 0 1
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: IN
53714: NOT
53715: PUSH
53716: LD_VAR 0 6
53720: PUSH
53721: LD_INT 2
53723: EQUAL
53724: AND
53725: OR
53726: IFFALSE 53736
// mode = 0 ;
53728: LD_ADDR_VAR 0 6
53732: PUSH
53733: LD_INT 0
53735: ST_TO_ADDR
// case mode of 0 :
53736: LD_VAR 0 6
53740: PUSH
53741: LD_INT 0
53743: DOUBLE
53744: EQUAL
53745: IFTRUE 53749
53747: GO 65202
53749: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53750: LD_ADDR_VAR 0 11
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53943: LD_ADDR_VAR 0 12
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54139: LD_ADDR_VAR 0 13
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54338: LD_ADDR_VAR 0 14
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 3
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54534: LD_ADDR_VAR 0 15
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54727: LD_ADDR_VAR 0 16
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: LD_INT 3
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54920: LD_ADDR_VAR 0 17
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55150: LD_ADDR_VAR 0 18
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55380: LD_ADDR_VAR 0 19
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55610: LD_ADDR_VAR 0 20
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55840: LD_ADDR_VAR 0 21
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56070: LD_ADDR_VAR 0 22
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56300: LD_ADDR_VAR 0 23
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 3
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56580: LD_ADDR_VAR 0 24
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56856: LD_ADDR_VAR 0 25
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57130: LD_ADDR_VAR 0 26
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57406: LD_ADDR_VAR 0 27
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57686: LD_ADDR_VAR 0 28
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 2
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57968: LD_ADDR_VAR 0 29
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 3
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58247: LD_ADDR_VAR 0 30
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58525: LD_ADDR_VAR 0 31
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58803: LD_ADDR_VAR 0 32
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 3
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59081: LD_ADDR_VAR 0 33
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 2
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 3
59325: NEG
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59360: LD_ADDR_VAR 0 34
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 3
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59640: LD_ADDR_VAR 0 35
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59752: LD_ADDR_VAR 0 36
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59864: LD_ADDR_VAR 0 37
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59976: LD_ADDR_VAR 0 38
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60088: LD_ADDR_VAR 0 39
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 1
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60200: LD_ADDR_VAR 0 40
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60312: LD_ADDR_VAR 0 41
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 3
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: LD_INT 3
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: LD_INT 3
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60662: LD_ADDR_VAR 0 42
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 3
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61012: LD_ADDR_VAR 0 43
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: NEG
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 3
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 3
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61360: LD_ADDR_VAR 0 44
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 3
61645: NEG
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61710: LD_ADDR_VAR 0 45
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: LD_INT 3
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: LD_INT 3
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 3
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 3
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: NEG
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62060: LD_ADDR_VAR 0 46
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 3
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 3
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 2
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 3
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 3
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 3
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62408: LD_ADDR_VAR 0 47
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62559: LD_ADDR_VAR 0 48
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62706: LD_ADDR_VAR 0 49
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62850: LD_ADDR_VAR 0 50
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62994: LD_ADDR_VAR 0 51
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63141: LD_ADDR_VAR 0 52
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63292: LD_ADDR_VAR 0 53
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: LD_INT 2
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63522: LD_ADDR_VAR 0 54
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: LD_INT 2
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 2
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 2
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: NEG
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: LD_INT 2
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63752: LD_ADDR_VAR 0 55
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 1
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 2
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63982: LD_ADDR_VAR 0 56
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 2
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 2
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: LD_INT 2
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64212: LD_ADDR_VAR 0 57
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: LD_INT 2
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: LD_INT 1
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: LD_INT 2
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 2
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_INT 2
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 2
64399: NEG
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64442: LD_ADDR_VAR 0 58
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 2
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: NEG
64630: PUSH
64631: LD_INT 1
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64672: LD_ADDR_VAR 0 59
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64760: LD_ADDR_VAR 0 60
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64848: LD_ADDR_VAR 0 61
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: NEG
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64936: LD_ADDR_VAR 0 62
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: LD_INT 1
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65024: LD_ADDR_VAR 0 63
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 1
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65112: LD_ADDR_VAR 0 64
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 1
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: ST_TO_ADDR
// end ; 1 :
65200: GO 71097
65202: LD_INT 1
65204: DOUBLE
65205: EQUAL
65206: IFTRUE 65210
65208: GO 67833
65210: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65211: LD_ADDR_VAR 0 11
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 3
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 2
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: LIST
65254: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65255: LD_ADDR_VAR 0 12
65259: PUSH
65260: LD_INT 2
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65296: LD_ADDR_VAR 0 13
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: LD_INT 2
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: LD_INT 3
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65336: LD_ADDR_VAR 0 14
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: LD_INT 3
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65377: LD_ADDR_VAR 0 15
65381: PUSH
65382: LD_INT 2
65384: NEG
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 3
65395: NEG
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 3
65406: NEG
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65421: LD_ADDR_VAR 0 16
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: LD_INT 3
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 3
65440: NEG
65441: PUSH
65442: LD_INT 2
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 3
65452: NEG
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65467: LD_ADDR_VAR 0 17
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 3
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 3
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65511: LD_ADDR_VAR 0 18
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 3
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 3
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65552: LD_ADDR_VAR 0 19
65556: PUSH
65557: LD_INT 3
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: LD_INT 3
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65592: LD_ADDR_VAR 0 20
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: LD_INT 3
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 3
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 2
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65633: LD_ADDR_VAR 0 21
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: LD_INT 1
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 3
65651: NEG
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 3
65662: NEG
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65677: LD_ADDR_VAR 0 22
65681: PUSH
65682: LD_INT 2
65684: NEG
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 3
65696: NEG
65697: PUSH
65698: LD_INT 2
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 3
65708: NEG
65709: PUSH
65710: LD_INT 3
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65723: LD_ADDR_VAR 0 23
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: LD_INT 4
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65767: LD_ADDR_VAR 0 24
65771: PUSH
65772: LD_INT 3
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 3
65784: PUSH
65785: LD_INT 1
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 4
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65808: LD_ADDR_VAR 0 25
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: LD_INT 3
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 4
65825: PUSH
65826: LD_INT 3
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: LD_INT 4
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: LIST
65847: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65848: LD_ADDR_VAR 0 26
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: LD_INT 3
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: LD_INT 4
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: LIST
65888: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65889: LD_ADDR_VAR 0 27
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 3
65907: NEG
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 4
65918: NEG
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65933: LD_ADDR_VAR 0 28
65937: PUSH
65938: LD_INT 3
65940: NEG
65941: PUSH
65942: LD_INT 3
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: LD_INT 4
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: NEG
65965: PUSH
65966: LD_INT 3
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65979: LD_ADDR_VAR 0 29
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: LD_INT 3
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 3
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 4
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 4
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: LD_INT 5
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: LD_INT 5
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: LD_INT 4
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: LD_INT 6
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 0
66100: PUSH
66101: LD_INT 6
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: LD_INT 5
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66134: LD_ADDR_VAR 0 30
66138: PUSH
66139: LD_INT 2
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 3
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 4
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 4
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 4
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 5
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 5
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 5
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 6
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 6
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66277: LD_ADDR_VAR 0 31
66281: PUSH
66282: LD_INT 3
66284: PUSH
66285: LD_INT 2
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 2
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: LD_INT 3
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: PUSH
66325: LD_INT 4
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: LD_INT 4
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 5
66344: PUSH
66345: LD_INT 4
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 5
66354: PUSH
66355: LD_INT 5
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 4
66364: PUSH
66365: LD_INT 5
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 6
66374: PUSH
66375: LD_INT 5
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 6
66384: PUSH
66385: LD_INT 6
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 5
66394: PUSH
66395: LD_INT 6
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66416: LD_ADDR_VAR 0 32
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: LD_INT 3
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 3
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 1
66443: NEG
66444: PUSH
66445: LD_INT 2
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: LD_INT 4
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: LD_INT 5
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_INT 5
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: LD_INT 4
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: PUSH
66517: LD_INT 6
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 6
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: LD_INT 5
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66559: LD_ADDR_VAR 0 33
66563: PUSH
66564: LD_INT 2
66566: NEG
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 3
66577: NEG
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 3
66600: NEG
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 4
66611: NEG
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 4
66622: NEG
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 4
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 5
66645: NEG
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 5
66656: NEG
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 5
66668: NEG
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 6
66679: NEG
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 6
66690: NEG
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66714: LD_ADDR_VAR 0 34
66718: PUSH
66719: LD_INT 2
66721: NEG
66722: PUSH
66723: LD_INT 3
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 3
66733: NEG
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 3
66745: NEG
66746: PUSH
66747: LD_INT 3
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 3
66757: NEG
66758: PUSH
66759: LD_INT 4
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: LD_INT 3
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 4
66781: NEG
66782: PUSH
66783: LD_INT 4
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 4
66793: NEG
66794: PUSH
66795: LD_INT 5
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 5
66805: NEG
66806: PUSH
66807: LD_INT 4
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 5
66817: NEG
66818: PUSH
66819: LD_INT 5
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: LD_INT 6
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 6
66841: NEG
66842: PUSH
66843: LD_INT 5
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 6
66853: NEG
66854: PUSH
66855: LD_INT 6
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66877: LD_ADDR_VAR 0 41
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 2
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 3
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66921: LD_ADDR_VAR 0 42
66925: PUSH
66926: LD_INT 2
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 2
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 3
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: LIST
66961: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66962: LD_ADDR_VAR 0 43
66966: PUSH
66967: LD_INT 2
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 3
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: LIST
67001: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67002: LD_ADDR_VAR 0 44
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 2
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 3
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67043: LD_ADDR_VAR 0 45
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 2
67061: NEG
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: LIST
67086: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67087: LD_ADDR_VAR 0 46
67091: PUSH
67092: LD_INT 2
67094: NEG
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: NEG
67107: PUSH
67108: LD_INT 3
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 3
67118: NEG
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67133: LD_ADDR_VAR 0 47
67137: PUSH
67138: LD_INT 2
67140: NEG
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: NEG
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67166: LD_ADDR_VAR 0 48
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 2
67176: NEG
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67197: LD_ADDR_VAR 0 49
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67226: LD_ADDR_VAR 0 50
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: LD_INT 3
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67255: LD_ADDR_VAR 0 51
67259: PUSH
67260: LD_INT 1
67262: NEG
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: LD_INT 1
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67286: LD_ADDR_VAR 0 52
67290: PUSH
67291: LD_INT 3
67293: NEG
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 3
67305: NEG
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67319: LD_ADDR_VAR 0 53
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: LD_INT 3
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 3
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: PUSH
67350: LD_INT 2
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: LIST
67362: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67363: LD_ADDR_VAR 0 54
67367: PUSH
67368: LD_INT 2
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: LD_INT 1
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67404: LD_ADDR_VAR 0 55
67408: PUSH
67409: LD_INT 3
67411: PUSH
67412: LD_INT 2
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 3
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 2
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67444: LD_ADDR_VAR 0 56
67448: PUSH
67449: LD_INT 1
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: LD_INT 2
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: LIST
67484: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67485: LD_ADDR_VAR 0 57
67489: PUSH
67490: LD_INT 2
67492: NEG
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 3
67503: NEG
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67529: LD_ADDR_VAR 0 58
67533: PUSH
67534: LD_INT 2
67536: NEG
67537: PUSH
67538: LD_INT 3
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 3
67548: NEG
67549: PUSH
67550: LD_INT 2
67552: NEG
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 3
67560: NEG
67561: PUSH
67562: LD_INT 3
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67575: LD_ADDR_VAR 0 59
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 0
67594: PUSH
67595: LD_INT 2
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67619: LD_ADDR_VAR 0 60
67623: PUSH
67624: LD_INT 1
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 2
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 2
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67660: LD_ADDR_VAR 0 61
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 1
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67700: LD_ADDR_VAR 0 62
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67741: LD_ADDR_VAR 0 63
67745: PUSH
67746: LD_INT 1
67748: NEG
67749: PUSH
67750: LD_INT 1
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 2
67759: NEG
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 2
67770: NEG
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: LIST
67784: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67785: LD_ADDR_VAR 0 64
67789: PUSH
67790: LD_INT 1
67792: NEG
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 2
67816: NEG
67817: PUSH
67818: LD_INT 2
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// end ; 2 :
67831: GO 71097
67833: LD_INT 2
67835: DOUBLE
67836: EQUAL
67837: IFTRUE 67841
67839: GO 71096
67841: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67842: LD_ADDR_VAR 0 29
67846: PUSH
67847: LD_INT 4
67849: PUSH
67850: LD_INT 0
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 4
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 5
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 5
67880: PUSH
67881: LD_INT 1
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 4
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: LD_INT 1
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 3
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 3
67942: PUSH
67943: LD_INT 3
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 4
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 4
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 4
68012: PUSH
68013: LD_INT 2
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: LD_INT 4
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: LD_INT 4
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: LD_INT 4
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: LD_INT 5
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 5
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: NEG
68083: PUSH
68084: LD_INT 4
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 2
68104: PUSH
68105: LD_INT 5
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 3
68125: NEG
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 3
68136: NEG
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 2
68148: NEG
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 2
68159: NEG
68160: PUSH
68161: LD_INT 1
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 3
68170: NEG
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 4
68181: NEG
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 4
68192: NEG
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 4
68204: NEG
68205: PUSH
68206: LD_INT 2
68208: NEG
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 4
68227: NEG
68228: PUSH
68229: LD_INT 4
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 4
68239: NEG
68240: PUSH
68241: LD_INT 5
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 3
68251: NEG
68252: PUSH
68253: LD_INT 4
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 3
68263: NEG
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 4
68275: NEG
68276: PUSH
68277: LD_INT 3
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 5
68287: NEG
68288: PUSH
68289: LD_INT 4
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 5
68299: NEG
68300: PUSH
68301: LD_INT 5
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: LD_INT 5
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 5
68323: NEG
68324: PUSH
68325: LD_INT 3
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68380: LD_ADDR_VAR 0 30
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: LD_INT 4
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 4
68397: PUSH
68398: LD_INT 3
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 5
68407: PUSH
68408: LD_INT 4
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 5
68417: PUSH
68418: LD_INT 5
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: LD_INT 5
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: LD_INT 3
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 5
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 3
68467: PUSH
68468: LD_INT 5
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 3
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 0
68487: PUSH
68488: LD_INT 2
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: PUSH
68508: LD_INT 4
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 4
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 1
68527: NEG
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: LD_INT 2
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: LD_INT 4
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 2
68559: NEG
68560: PUSH
68561: LD_INT 2
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 4
68570: NEG
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 4
68581: NEG
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 3
68593: NEG
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 3
68604: NEG
68605: PUSH
68606: LD_INT 1
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 4
68615: NEG
68616: PUSH
68617: LD_INT 1
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 5
68626: NEG
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 5
68637: NEG
68638: PUSH
68639: LD_INT 1
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 5
68649: NEG
68650: PUSH
68651: LD_INT 2
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: NEG
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 3
68672: NEG
68673: PUSH
68674: LD_INT 3
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: LD_INT 4
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 2
68696: NEG
68697: PUSH
68698: LD_INT 3
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 2
68708: NEG
68709: PUSH
68710: LD_INT 2
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 4
68732: NEG
68733: PUSH
68734: LD_INT 3
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 4
68744: NEG
68745: PUSH
68746: LD_INT 4
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 2
68756: NEG
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 4
68768: NEG
68769: PUSH
68770: LD_INT 2
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 0
68780: PUSH
68781: LD_INT 4
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: LD_INT 5
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 1
68802: PUSH
68803: LD_INT 4
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: LD_INT 3
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 1
68835: NEG
68836: PUSH
68837: LD_INT 4
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: NEG
68848: PUSH
68849: LD_INT 5
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 2
68859: PUSH
68860: LD_INT 3
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 2
68870: NEG
68871: PUSH
68872: LD_INT 5
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68927: LD_ADDR_VAR 0 31
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 4
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 3
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: LD_INT 4
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: LD_INT 5
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 5
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: LD_INT 4
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: LD_INT 3
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 2
69006: PUSH
69007: LD_INT 5
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 2
69016: NEG
69017: PUSH
69018: LD_INT 3
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 2
69061: NEG
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 3
69072: NEG
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 4
69083: NEG
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 4
69094: NEG
69095: PUSH
69096: LD_INT 1
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 4
69106: NEG
69107: PUSH
69108: LD_INT 2
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 2
69118: NEG
69119: PUSH
69120: LD_INT 2
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 4
69129: NEG
69130: PUSH
69131: LD_INT 4
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 4
69141: NEG
69142: PUSH
69143: LD_INT 5
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: LD_INT 4
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 4
69177: NEG
69178: PUSH
69179: LD_INT 3
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 5
69189: NEG
69190: PUSH
69191: LD_INT 4
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 5
69201: NEG
69202: PUSH
69203: LD_INT 5
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 3
69213: NEG
69214: PUSH
69215: LD_INT 5
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 5
69225: NEG
69226: PUSH
69227: LD_INT 3
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: LD_INT 3
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 0
69248: PUSH
69249: LD_INT 4
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: LD_INT 3
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 1
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: LD_INT 2
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: LD_INT 3
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 1
69304: NEG
69305: PUSH
69306: LD_INT 4
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: LD_INT 2
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: LD_INT 4
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 4
69339: PUSH
69340: LD_INT 0
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 4
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 5
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 5
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 1
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 3
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 3
69411: PUSH
69412: LD_INT 2
69414: NEG
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 5
69422: PUSH
69423: LD_INT 2
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69477: LD_ADDR_VAR 0 32
69481: PUSH
69482: LD_INT 4
69484: NEG
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 4
69495: NEG
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 3
69518: NEG
69519: PUSH
69520: LD_INT 1
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 4
69529: NEG
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 5
69540: NEG
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 5
69551: NEG
69552: PUSH
69553: LD_INT 1
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 5
69563: NEG
69564: PUSH
69565: LD_INT 2
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 3
69575: NEG
69576: PUSH
69577: LD_INT 2
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: NEG
69587: PUSH
69588: LD_INT 3
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: NEG
69599: PUSH
69600: LD_INT 4
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: NEG
69611: PUSH
69612: LD_INT 3
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 3
69634: NEG
69635: PUSH
69636: LD_INT 2
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 4
69646: NEG
69647: PUSH
69648: LD_INT 3
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 4
69658: NEG
69659: PUSH
69660: LD_INT 4
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 2
69670: NEG
69671: PUSH
69672: LD_INT 4
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 4
69682: NEG
69683: PUSH
69684: LD_INT 2
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: LD_INT 4
69697: NEG
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: LD_INT 5
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: LD_INT 4
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: LD_INT 3
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 0
69738: PUSH
69739: LD_INT 3
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: LD_INT 4
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: LD_INT 5
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: LD_INT 3
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 2
69784: NEG
69785: PUSH
69786: LD_INT 5
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: LD_INT 0
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 3
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 4
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 4
69827: PUSH
69828: LD_INT 1
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: LD_INT 1
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 2
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 2
69857: PUSH
69858: LD_INT 1
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: LD_INT 2
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 4
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 4
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 4
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 5
69909: PUSH
69910: LD_INT 4
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 5
69919: PUSH
69920: LD_INT 5
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 4
69929: PUSH
69930: LD_INT 5
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 3
69939: PUSH
69940: LD_INT 4
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: LD_INT 3
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 5
69959: PUSH
69960: LD_INT 3
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 3
69969: PUSH
69970: LD_INT 5
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70024: LD_ADDR_VAR 0 33
70028: PUSH
70029: LD_INT 4
70031: NEG
70032: PUSH
70033: LD_INT 4
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 4
70043: NEG
70044: PUSH
70045: LD_INT 5
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: LD_INT 4
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 3
70067: NEG
70068: PUSH
70069: LD_INT 3
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 4
70079: NEG
70080: PUSH
70081: LD_INT 3
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 5
70091: NEG
70092: PUSH
70093: LD_INT 4
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 5
70103: NEG
70104: PUSH
70105: LD_INT 5
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 3
70115: NEG
70116: PUSH
70117: LD_INT 5
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 5
70127: NEG
70128: PUSH
70129: LD_INT 3
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: LD_INT 3
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 4
70153: NEG
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: LD_INT 3
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: LD_INT 2
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 2
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: LD_INT 3
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: NEG
70207: PUSH
70208: LD_INT 4
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: LD_INT 2
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 2
70229: NEG
70230: PUSH
70231: LD_INT 4
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 4
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 4
70251: PUSH
70252: LD_INT 1
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 5
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 5
70272: PUSH
70273: LD_INT 1
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 4
70282: PUSH
70283: LD_INT 1
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 3
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 3
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 5
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 3
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 3
70344: PUSH
70345: LD_INT 2
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 4
70354: PUSH
70355: LD_INT 3
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 4
70364: PUSH
70365: LD_INT 4
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 3
70374: PUSH
70375: LD_INT 4
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 2
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 2
70394: PUSH
70395: LD_INT 2
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 4
70404: PUSH
70405: LD_INT 2
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 2
70414: PUSH
70415: LD_INT 4
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: LD_INT 4
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 3
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: LD_INT 4
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 1
70454: PUSH
70455: LD_INT 5
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_INT 5
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 1
70474: NEG
70475: PUSH
70476: LD_INT 4
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 2
70496: PUSH
70497: LD_INT 5
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 2
70506: NEG
70507: PUSH
70508: LD_INT 3
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70562: LD_ADDR_VAR 0 34
70566: PUSH
70567: LD_INT 0
70569: PUSH
70570: LD_INT 4
70572: NEG
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: LD_INT 5
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 1
70591: PUSH
70592: LD_INT 4
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: LD_INT 3
70605: NEG
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: LD_INT 3
70616: NEG
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 1
70624: NEG
70625: PUSH
70626: LD_INT 4
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 1
70636: NEG
70637: PUSH
70638: LD_INT 5
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 2
70648: PUSH
70649: LD_INT 3
70651: NEG
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 2
70659: NEG
70660: PUSH
70661: LD_INT 5
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 3
70671: PUSH
70672: LD_INT 0
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 3
70681: PUSH
70682: LD_INT 1
70684: NEG
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 4
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 4
70702: PUSH
70703: LD_INT 1
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 3
70712: PUSH
70713: LD_INT 1
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 2
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 2
70732: PUSH
70733: LD_INT 1
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 2
70743: PUSH
70744: LD_INT 2
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 4
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 4
70764: PUSH
70765: LD_INT 4
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 4
70774: PUSH
70775: LD_INT 3
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 5
70784: PUSH
70785: LD_INT 4
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 5
70794: PUSH
70795: LD_INT 5
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 4
70804: PUSH
70805: LD_INT 5
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: LD_INT 4
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 3
70824: PUSH
70825: LD_INT 3
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 5
70834: PUSH
70835: LD_INT 3
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 3
70844: PUSH
70845: LD_INT 5
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: LD_INT 3
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 0
70864: PUSH
70865: LD_INT 2
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 1
70874: PUSH
70875: LD_INT 3
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 1
70884: PUSH
70885: LD_INT 4
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: LD_INT 4
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 1
70904: NEG
70905: PUSH
70906: LD_INT 3
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 1
70915: NEG
70916: PUSH
70917: LD_INT 2
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 2
70926: PUSH
70927: LD_INT 4
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 2
70936: NEG
70937: PUSH
70938: LD_INT 2
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 4
70947: NEG
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 4
70958: NEG
70959: PUSH
70960: LD_INT 1
70962: NEG
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 3
70970: NEG
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: NEG
70982: PUSH
70983: LD_INT 1
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 4
70992: NEG
70993: PUSH
70994: LD_INT 1
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 5
71003: NEG
71004: PUSH
71005: LD_INT 0
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 5
71014: NEG
71015: PUSH
71016: LD_INT 1
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 5
71026: NEG
71027: PUSH
71028: LD_INT 2
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 3
71038: NEG
71039: PUSH
71040: LD_INT 2
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: ST_TO_ADDR
// end ; end ;
71094: GO 71097
71096: POP
// case btype of b_depot , b_warehouse :
71097: LD_VAR 0 1
71101: PUSH
71102: LD_INT 0
71104: DOUBLE
71105: EQUAL
71106: IFTRUE 71116
71108: LD_INT 1
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71116
71114: GO 71317
71116: POP
// case nation of nation_american :
71117: LD_VAR 0 5
71121: PUSH
71122: LD_INT 1
71124: DOUBLE
71125: EQUAL
71126: IFTRUE 71130
71128: GO 71186
71130: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71131: LD_ADDR_VAR 0 9
71135: PUSH
71136: LD_VAR 0 11
71140: PUSH
71141: LD_VAR 0 12
71145: PUSH
71146: LD_VAR 0 13
71150: PUSH
71151: LD_VAR 0 14
71155: PUSH
71156: LD_VAR 0 15
71160: PUSH
71161: LD_VAR 0 16
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: PUSH
71174: LD_VAR 0 4
71178: PUSH
71179: LD_INT 1
71181: PLUS
71182: ARRAY
71183: ST_TO_ADDR
71184: GO 71315
71186: LD_INT 2
71188: DOUBLE
71189: EQUAL
71190: IFTRUE 71194
71192: GO 71250
71194: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71195: LD_ADDR_VAR 0 9
71199: PUSH
71200: LD_VAR 0 17
71204: PUSH
71205: LD_VAR 0 18
71209: PUSH
71210: LD_VAR 0 19
71214: PUSH
71215: LD_VAR 0 20
71219: PUSH
71220: LD_VAR 0 21
71224: PUSH
71225: LD_VAR 0 22
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: PUSH
71238: LD_VAR 0 4
71242: PUSH
71243: LD_INT 1
71245: PLUS
71246: ARRAY
71247: ST_TO_ADDR
71248: GO 71315
71250: LD_INT 3
71252: DOUBLE
71253: EQUAL
71254: IFTRUE 71258
71256: GO 71314
71258: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71259: LD_ADDR_VAR 0 9
71263: PUSH
71264: LD_VAR 0 23
71268: PUSH
71269: LD_VAR 0 24
71273: PUSH
71274: LD_VAR 0 25
71278: PUSH
71279: LD_VAR 0 26
71283: PUSH
71284: LD_VAR 0 27
71288: PUSH
71289: LD_VAR 0 28
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: PUSH
71302: LD_VAR 0 4
71306: PUSH
71307: LD_INT 1
71309: PLUS
71310: ARRAY
71311: ST_TO_ADDR
71312: GO 71315
71314: POP
71315: GO 71870
71317: LD_INT 2
71319: DOUBLE
71320: EQUAL
71321: IFTRUE 71331
71323: LD_INT 3
71325: DOUBLE
71326: EQUAL
71327: IFTRUE 71331
71329: GO 71387
71331: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71332: LD_ADDR_VAR 0 9
71336: PUSH
71337: LD_VAR 0 29
71341: PUSH
71342: LD_VAR 0 30
71346: PUSH
71347: LD_VAR 0 31
71351: PUSH
71352: LD_VAR 0 32
71356: PUSH
71357: LD_VAR 0 33
71361: PUSH
71362: LD_VAR 0 34
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: PUSH
71375: LD_VAR 0 4
71379: PUSH
71380: LD_INT 1
71382: PLUS
71383: ARRAY
71384: ST_TO_ADDR
71385: GO 71870
71387: LD_INT 16
71389: DOUBLE
71390: EQUAL
71391: IFTRUE 71449
71393: LD_INT 17
71395: DOUBLE
71396: EQUAL
71397: IFTRUE 71449
71399: LD_INT 18
71401: DOUBLE
71402: EQUAL
71403: IFTRUE 71449
71405: LD_INT 19
71407: DOUBLE
71408: EQUAL
71409: IFTRUE 71449
71411: LD_INT 22
71413: DOUBLE
71414: EQUAL
71415: IFTRUE 71449
71417: LD_INT 20
71419: DOUBLE
71420: EQUAL
71421: IFTRUE 71449
71423: LD_INT 21
71425: DOUBLE
71426: EQUAL
71427: IFTRUE 71449
71429: LD_INT 23
71431: DOUBLE
71432: EQUAL
71433: IFTRUE 71449
71435: LD_INT 24
71437: DOUBLE
71438: EQUAL
71439: IFTRUE 71449
71441: LD_INT 25
71443: DOUBLE
71444: EQUAL
71445: IFTRUE 71449
71447: GO 71505
71449: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71450: LD_ADDR_VAR 0 9
71454: PUSH
71455: LD_VAR 0 35
71459: PUSH
71460: LD_VAR 0 36
71464: PUSH
71465: LD_VAR 0 37
71469: PUSH
71470: LD_VAR 0 38
71474: PUSH
71475: LD_VAR 0 39
71479: PUSH
71480: LD_VAR 0 40
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: PUSH
71493: LD_VAR 0 4
71497: PUSH
71498: LD_INT 1
71500: PLUS
71501: ARRAY
71502: ST_TO_ADDR
71503: GO 71870
71505: LD_INT 6
71507: DOUBLE
71508: EQUAL
71509: IFTRUE 71561
71511: LD_INT 7
71513: DOUBLE
71514: EQUAL
71515: IFTRUE 71561
71517: LD_INT 8
71519: DOUBLE
71520: EQUAL
71521: IFTRUE 71561
71523: LD_INT 13
71525: DOUBLE
71526: EQUAL
71527: IFTRUE 71561
71529: LD_INT 12
71531: DOUBLE
71532: EQUAL
71533: IFTRUE 71561
71535: LD_INT 15
71537: DOUBLE
71538: EQUAL
71539: IFTRUE 71561
71541: LD_INT 11
71543: DOUBLE
71544: EQUAL
71545: IFTRUE 71561
71547: LD_INT 14
71549: DOUBLE
71550: EQUAL
71551: IFTRUE 71561
71553: LD_INT 10
71555: DOUBLE
71556: EQUAL
71557: IFTRUE 71561
71559: GO 71617
71561: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71562: LD_ADDR_VAR 0 9
71566: PUSH
71567: LD_VAR 0 41
71571: PUSH
71572: LD_VAR 0 42
71576: PUSH
71577: LD_VAR 0 43
71581: PUSH
71582: LD_VAR 0 44
71586: PUSH
71587: LD_VAR 0 45
71591: PUSH
71592: LD_VAR 0 46
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: PUSH
71605: LD_VAR 0 4
71609: PUSH
71610: LD_INT 1
71612: PLUS
71613: ARRAY
71614: ST_TO_ADDR
71615: GO 71870
71617: LD_INT 36
71619: DOUBLE
71620: EQUAL
71621: IFTRUE 71625
71623: GO 71681
71625: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71626: LD_ADDR_VAR 0 9
71630: PUSH
71631: LD_VAR 0 47
71635: PUSH
71636: LD_VAR 0 48
71640: PUSH
71641: LD_VAR 0 49
71645: PUSH
71646: LD_VAR 0 50
71650: PUSH
71651: LD_VAR 0 51
71655: PUSH
71656: LD_VAR 0 52
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: PUSH
71669: LD_VAR 0 4
71673: PUSH
71674: LD_INT 1
71676: PLUS
71677: ARRAY
71678: ST_TO_ADDR
71679: GO 71870
71681: LD_INT 4
71683: DOUBLE
71684: EQUAL
71685: IFTRUE 71707
71687: LD_INT 5
71689: DOUBLE
71690: EQUAL
71691: IFTRUE 71707
71693: LD_INT 34
71695: DOUBLE
71696: EQUAL
71697: IFTRUE 71707
71699: LD_INT 37
71701: DOUBLE
71702: EQUAL
71703: IFTRUE 71707
71705: GO 71763
71707: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71708: LD_ADDR_VAR 0 9
71712: PUSH
71713: LD_VAR 0 53
71717: PUSH
71718: LD_VAR 0 54
71722: PUSH
71723: LD_VAR 0 55
71727: PUSH
71728: LD_VAR 0 56
71732: PUSH
71733: LD_VAR 0 57
71737: PUSH
71738: LD_VAR 0 58
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: PUSH
71751: LD_VAR 0 4
71755: PUSH
71756: LD_INT 1
71758: PLUS
71759: ARRAY
71760: ST_TO_ADDR
71761: GO 71870
71763: LD_INT 31
71765: DOUBLE
71766: EQUAL
71767: IFTRUE 71813
71769: LD_INT 32
71771: DOUBLE
71772: EQUAL
71773: IFTRUE 71813
71775: LD_INT 33
71777: DOUBLE
71778: EQUAL
71779: IFTRUE 71813
71781: LD_INT 27
71783: DOUBLE
71784: EQUAL
71785: IFTRUE 71813
71787: LD_INT 26
71789: DOUBLE
71790: EQUAL
71791: IFTRUE 71813
71793: LD_INT 28
71795: DOUBLE
71796: EQUAL
71797: IFTRUE 71813
71799: LD_INT 29
71801: DOUBLE
71802: EQUAL
71803: IFTRUE 71813
71805: LD_INT 30
71807: DOUBLE
71808: EQUAL
71809: IFTRUE 71813
71811: GO 71869
71813: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71814: LD_ADDR_VAR 0 9
71818: PUSH
71819: LD_VAR 0 59
71823: PUSH
71824: LD_VAR 0 60
71828: PUSH
71829: LD_VAR 0 61
71833: PUSH
71834: LD_VAR 0 62
71838: PUSH
71839: LD_VAR 0 63
71843: PUSH
71844: LD_VAR 0 64
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: PUSH
71857: LD_VAR 0 4
71861: PUSH
71862: LD_INT 1
71864: PLUS
71865: ARRAY
71866: ST_TO_ADDR
71867: GO 71870
71869: POP
// temp_list2 = [ ] ;
71870: LD_ADDR_VAR 0 10
71874: PUSH
71875: EMPTY
71876: ST_TO_ADDR
// for i in temp_list do
71877: LD_ADDR_VAR 0 8
71881: PUSH
71882: LD_VAR 0 9
71886: PUSH
71887: FOR_IN
71888: IFFALSE 71940
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71890: LD_ADDR_VAR 0 10
71894: PUSH
71895: LD_VAR 0 10
71899: PUSH
71900: LD_VAR 0 8
71904: PUSH
71905: LD_INT 1
71907: ARRAY
71908: PUSH
71909: LD_VAR 0 2
71913: PLUS
71914: PUSH
71915: LD_VAR 0 8
71919: PUSH
71920: LD_INT 2
71922: ARRAY
71923: PUSH
71924: LD_VAR 0 3
71928: PLUS
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: EMPTY
71935: LIST
71936: ADD
71937: ST_TO_ADDR
71938: GO 71887
71940: POP
71941: POP
// result = temp_list2 ;
71942: LD_ADDR_VAR 0 7
71946: PUSH
71947: LD_VAR 0 10
71951: ST_TO_ADDR
// end ;
71952: LD_VAR 0 7
71956: RET
// export function EnemyInRange ( unit , dist ) ; begin
71957: LD_INT 0
71959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71960: LD_ADDR_VAR 0 3
71964: PUSH
71965: LD_VAR 0 1
71969: PPUSH
71970: CALL_OW 255
71974: PPUSH
71975: LD_VAR 0 1
71979: PPUSH
71980: CALL_OW 250
71984: PPUSH
71985: LD_VAR 0 1
71989: PPUSH
71990: CALL_OW 251
71994: PPUSH
71995: LD_VAR 0 2
71999: PPUSH
72000: CALL 45728 0 4
72004: PUSH
72005: LD_INT 4
72007: ARRAY
72008: ST_TO_ADDR
// end ;
72009: LD_VAR 0 3
72013: RET
// export function PlayerSeeMe ( unit ) ; begin
72014: LD_INT 0
72016: PPUSH
// result := See ( your_side , unit ) ;
72017: LD_ADDR_VAR 0 2
72021: PUSH
72022: LD_OWVAR 2
72026: PPUSH
72027: LD_VAR 0 1
72031: PPUSH
72032: CALL_OW 292
72036: ST_TO_ADDR
// end ;
72037: LD_VAR 0 2
72041: RET
// export function ReverseDir ( unit ) ; begin
72042: LD_INT 0
72044: PPUSH
// if not unit then
72045: LD_VAR 0 1
72049: NOT
72050: IFFALSE 72054
// exit ;
72052: GO 72077
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72054: LD_ADDR_VAR 0 2
72058: PUSH
72059: LD_VAR 0 1
72063: PPUSH
72064: CALL_OW 254
72068: PUSH
72069: LD_INT 3
72071: PLUS
72072: PUSH
72073: LD_INT 6
72075: MOD
72076: ST_TO_ADDR
// end ;
72077: LD_VAR 0 2
72081: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72082: LD_INT 0
72084: PPUSH
72085: PPUSH
72086: PPUSH
72087: PPUSH
72088: PPUSH
// if not hexes then
72089: LD_VAR 0 2
72093: NOT
72094: IFFALSE 72098
// exit ;
72096: GO 72246
// dist := 9999 ;
72098: LD_ADDR_VAR 0 5
72102: PUSH
72103: LD_INT 9999
72105: ST_TO_ADDR
// for i = 1 to hexes do
72106: LD_ADDR_VAR 0 4
72110: PUSH
72111: DOUBLE
72112: LD_INT 1
72114: DEC
72115: ST_TO_ADDR
72116: LD_VAR 0 2
72120: PUSH
72121: FOR_TO
72122: IFFALSE 72234
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72124: LD_VAR 0 1
72128: PPUSH
72129: LD_VAR 0 2
72133: PUSH
72134: LD_VAR 0 4
72138: ARRAY
72139: PUSH
72140: LD_INT 1
72142: ARRAY
72143: PPUSH
72144: LD_VAR 0 2
72148: PUSH
72149: LD_VAR 0 4
72153: ARRAY
72154: PUSH
72155: LD_INT 2
72157: ARRAY
72158: PPUSH
72159: CALL_OW 297
72163: PUSH
72164: LD_VAR 0 5
72168: LESS
72169: IFFALSE 72232
// begin hex := hexes [ i ] ;
72171: LD_ADDR_VAR 0 7
72175: PUSH
72176: LD_VAR 0 2
72180: PUSH
72181: LD_VAR 0 4
72185: ARRAY
72186: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72187: LD_ADDR_VAR 0 5
72191: PUSH
72192: LD_VAR 0 1
72196: PPUSH
72197: LD_VAR 0 2
72201: PUSH
72202: LD_VAR 0 4
72206: ARRAY
72207: PUSH
72208: LD_INT 1
72210: ARRAY
72211: PPUSH
72212: LD_VAR 0 2
72216: PUSH
72217: LD_VAR 0 4
72221: ARRAY
72222: PUSH
72223: LD_INT 2
72225: ARRAY
72226: PPUSH
72227: CALL_OW 297
72231: ST_TO_ADDR
// end ; end ;
72232: GO 72121
72234: POP
72235: POP
// result := hex ;
72236: LD_ADDR_VAR 0 3
72240: PUSH
72241: LD_VAR 0 7
72245: ST_TO_ADDR
// end ;
72246: LD_VAR 0 3
72250: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72251: LD_INT 0
72253: PPUSH
72254: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72255: LD_VAR 0 1
72259: NOT
72260: PUSH
72261: LD_VAR 0 1
72265: PUSH
72266: LD_INT 21
72268: PUSH
72269: LD_INT 2
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 23
72278: PUSH
72279: LD_INT 2
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PPUSH
72290: CALL_OW 69
72294: IN
72295: NOT
72296: OR
72297: IFFALSE 72301
// exit ;
72299: GO 72348
// for i = 1 to 3 do
72301: LD_ADDR_VAR 0 3
72305: PUSH
72306: DOUBLE
72307: LD_INT 1
72309: DEC
72310: ST_TO_ADDR
72311: LD_INT 3
72313: PUSH
72314: FOR_TO
72315: IFFALSE 72346
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72317: LD_VAR 0 1
72321: PPUSH
72322: CALL_OW 250
72326: PPUSH
72327: LD_VAR 0 1
72331: PPUSH
72332: CALL_OW 251
72336: PPUSH
72337: LD_INT 1
72339: PPUSH
72340: CALL_OW 453
72344: GO 72314
72346: POP
72347: POP
// end ;
72348: LD_VAR 0 2
72352: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72353: LD_INT 0
72355: PPUSH
72356: PPUSH
72357: PPUSH
72358: PPUSH
72359: PPUSH
72360: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72361: LD_VAR 0 1
72365: NOT
72366: PUSH
72367: LD_VAR 0 2
72371: NOT
72372: OR
72373: PUSH
72374: LD_VAR 0 1
72378: PPUSH
72379: CALL_OW 314
72383: OR
72384: IFFALSE 72388
// exit ;
72386: GO 72829
// x := GetX ( enemy_unit ) ;
72388: LD_ADDR_VAR 0 7
72392: PUSH
72393: LD_VAR 0 2
72397: PPUSH
72398: CALL_OW 250
72402: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72403: LD_ADDR_VAR 0 8
72407: PUSH
72408: LD_VAR 0 2
72412: PPUSH
72413: CALL_OW 251
72417: ST_TO_ADDR
// if not x or not y then
72418: LD_VAR 0 7
72422: NOT
72423: PUSH
72424: LD_VAR 0 8
72428: NOT
72429: OR
72430: IFFALSE 72434
// exit ;
72432: GO 72829
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72434: LD_ADDR_VAR 0 6
72438: PUSH
72439: LD_VAR 0 7
72443: PPUSH
72444: LD_INT 0
72446: PPUSH
72447: LD_INT 4
72449: PPUSH
72450: CALL_OW 272
72454: PUSH
72455: LD_VAR 0 8
72459: PPUSH
72460: LD_INT 0
72462: PPUSH
72463: LD_INT 4
72465: PPUSH
72466: CALL_OW 273
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_VAR 0 7
72479: PPUSH
72480: LD_INT 1
72482: PPUSH
72483: LD_INT 4
72485: PPUSH
72486: CALL_OW 272
72490: PUSH
72491: LD_VAR 0 8
72495: PPUSH
72496: LD_INT 1
72498: PPUSH
72499: LD_INT 4
72501: PPUSH
72502: CALL_OW 273
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_VAR 0 7
72515: PPUSH
72516: LD_INT 2
72518: PPUSH
72519: LD_INT 4
72521: PPUSH
72522: CALL_OW 272
72526: PUSH
72527: LD_VAR 0 8
72531: PPUSH
72532: LD_INT 2
72534: PPUSH
72535: LD_INT 4
72537: PPUSH
72538: CALL_OW 273
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_VAR 0 7
72551: PPUSH
72552: LD_INT 3
72554: PPUSH
72555: LD_INT 4
72557: PPUSH
72558: CALL_OW 272
72562: PUSH
72563: LD_VAR 0 8
72567: PPUSH
72568: LD_INT 3
72570: PPUSH
72571: LD_INT 4
72573: PPUSH
72574: CALL_OW 273
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_VAR 0 7
72587: PPUSH
72588: LD_INT 4
72590: PPUSH
72591: LD_INT 4
72593: PPUSH
72594: CALL_OW 272
72598: PUSH
72599: LD_VAR 0 8
72603: PPUSH
72604: LD_INT 4
72606: PPUSH
72607: LD_INT 4
72609: PPUSH
72610: CALL_OW 273
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_VAR 0 7
72623: PPUSH
72624: LD_INT 5
72626: PPUSH
72627: LD_INT 4
72629: PPUSH
72630: CALL_OW 272
72634: PUSH
72635: LD_VAR 0 8
72639: PPUSH
72640: LD_INT 5
72642: PPUSH
72643: LD_INT 4
72645: PPUSH
72646: CALL_OW 273
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: ST_TO_ADDR
// for i = tmp downto 1 do
72663: LD_ADDR_VAR 0 4
72667: PUSH
72668: DOUBLE
72669: LD_VAR 0 6
72673: INC
72674: ST_TO_ADDR
72675: LD_INT 1
72677: PUSH
72678: FOR_DOWNTO
72679: IFFALSE 72780
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72681: LD_VAR 0 6
72685: PUSH
72686: LD_VAR 0 4
72690: ARRAY
72691: PUSH
72692: LD_INT 1
72694: ARRAY
72695: PPUSH
72696: LD_VAR 0 6
72700: PUSH
72701: LD_VAR 0 4
72705: ARRAY
72706: PUSH
72707: LD_INT 2
72709: ARRAY
72710: PPUSH
72711: CALL_OW 488
72715: NOT
72716: PUSH
72717: LD_VAR 0 6
72721: PUSH
72722: LD_VAR 0 4
72726: ARRAY
72727: PUSH
72728: LD_INT 1
72730: ARRAY
72731: PPUSH
72732: LD_VAR 0 6
72736: PUSH
72737: LD_VAR 0 4
72741: ARRAY
72742: PUSH
72743: LD_INT 2
72745: ARRAY
72746: PPUSH
72747: CALL_OW 428
72751: PUSH
72752: LD_INT 0
72754: NONEQUAL
72755: OR
72756: IFFALSE 72778
// tmp := Delete ( tmp , i ) ;
72758: LD_ADDR_VAR 0 6
72762: PUSH
72763: LD_VAR 0 6
72767: PPUSH
72768: LD_VAR 0 4
72772: PPUSH
72773: CALL_OW 3
72777: ST_TO_ADDR
72778: GO 72678
72780: POP
72781: POP
// j := GetClosestHex ( unit , tmp ) ;
72782: LD_ADDR_VAR 0 5
72786: PUSH
72787: LD_VAR 0 1
72791: PPUSH
72792: LD_VAR 0 6
72796: PPUSH
72797: CALL 72082 0 2
72801: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72802: LD_VAR 0 1
72806: PPUSH
72807: LD_VAR 0 5
72811: PUSH
72812: LD_INT 1
72814: ARRAY
72815: PPUSH
72816: LD_VAR 0 5
72820: PUSH
72821: LD_INT 2
72823: ARRAY
72824: PPUSH
72825: CALL_OW 111
// end ;
72829: LD_VAR 0 3
72833: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72834: LD_INT 0
72836: PPUSH
72837: PPUSH
72838: PPUSH
// uc_side = 0 ;
72839: LD_ADDR_OWVAR 20
72843: PUSH
72844: LD_INT 0
72846: ST_TO_ADDR
// uc_nation = 0 ;
72847: LD_ADDR_OWVAR 21
72851: PUSH
72852: LD_INT 0
72854: ST_TO_ADDR
// InitHc_All ( ) ;
72855: CALL_OW 584
// InitVc ;
72859: CALL_OW 20
// if mastodonts then
72863: LD_VAR 0 6
72867: IFFALSE 72934
// for i = 1 to mastodonts do
72869: LD_ADDR_VAR 0 11
72873: PUSH
72874: DOUBLE
72875: LD_INT 1
72877: DEC
72878: ST_TO_ADDR
72879: LD_VAR 0 6
72883: PUSH
72884: FOR_TO
72885: IFFALSE 72932
// begin vc_chassis := 31 ;
72887: LD_ADDR_OWVAR 37
72891: PUSH
72892: LD_INT 31
72894: ST_TO_ADDR
// vc_control := control_rider ;
72895: LD_ADDR_OWVAR 38
72899: PUSH
72900: LD_INT 4
72902: ST_TO_ADDR
// animal := CreateVehicle ;
72903: LD_ADDR_VAR 0 12
72907: PUSH
72908: CALL_OW 45
72912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72913: LD_VAR 0 12
72917: PPUSH
72918: LD_VAR 0 8
72922: PPUSH
72923: LD_INT 0
72925: PPUSH
72926: CALL 75122 0 3
// end ;
72930: GO 72884
72932: POP
72933: POP
// if horses then
72934: LD_VAR 0 5
72938: IFFALSE 73005
// for i = 1 to horses do
72940: LD_ADDR_VAR 0 11
72944: PUSH
72945: DOUBLE
72946: LD_INT 1
72948: DEC
72949: ST_TO_ADDR
72950: LD_VAR 0 5
72954: PUSH
72955: FOR_TO
72956: IFFALSE 73003
// begin hc_class := 21 ;
72958: LD_ADDR_OWVAR 28
72962: PUSH
72963: LD_INT 21
72965: ST_TO_ADDR
// hc_gallery :=  ;
72966: LD_ADDR_OWVAR 33
72970: PUSH
72971: LD_STRING 
72973: ST_TO_ADDR
// animal := CreateHuman ;
72974: LD_ADDR_VAR 0 12
72978: PUSH
72979: CALL_OW 44
72983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72984: LD_VAR 0 12
72988: PPUSH
72989: LD_VAR 0 8
72993: PPUSH
72994: LD_INT 0
72996: PPUSH
72997: CALL 75122 0 3
// end ;
73001: GO 72955
73003: POP
73004: POP
// if birds then
73005: LD_VAR 0 1
73009: IFFALSE 73076
// for i = 1 to birds do
73011: LD_ADDR_VAR 0 11
73015: PUSH
73016: DOUBLE
73017: LD_INT 1
73019: DEC
73020: ST_TO_ADDR
73021: LD_VAR 0 1
73025: PUSH
73026: FOR_TO
73027: IFFALSE 73074
// begin hc_class = 18 ;
73029: LD_ADDR_OWVAR 28
73033: PUSH
73034: LD_INT 18
73036: ST_TO_ADDR
// hc_gallery =  ;
73037: LD_ADDR_OWVAR 33
73041: PUSH
73042: LD_STRING 
73044: ST_TO_ADDR
// animal := CreateHuman ;
73045: LD_ADDR_VAR 0 12
73049: PUSH
73050: CALL_OW 44
73054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73055: LD_VAR 0 12
73059: PPUSH
73060: LD_VAR 0 8
73064: PPUSH
73065: LD_INT 0
73067: PPUSH
73068: CALL 75122 0 3
// end ;
73072: GO 73026
73074: POP
73075: POP
// if tigers then
73076: LD_VAR 0 2
73080: IFFALSE 73164
// for i = 1 to tigers do
73082: LD_ADDR_VAR 0 11
73086: PUSH
73087: DOUBLE
73088: LD_INT 1
73090: DEC
73091: ST_TO_ADDR
73092: LD_VAR 0 2
73096: PUSH
73097: FOR_TO
73098: IFFALSE 73162
// begin hc_class = class_tiger ;
73100: LD_ADDR_OWVAR 28
73104: PUSH
73105: LD_INT 14
73107: ST_TO_ADDR
// hc_gallery =  ;
73108: LD_ADDR_OWVAR 33
73112: PUSH
73113: LD_STRING 
73115: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73116: LD_ADDR_OWVAR 35
73120: PUSH
73121: LD_INT 7
73123: NEG
73124: PPUSH
73125: LD_INT 7
73127: PPUSH
73128: CALL_OW 12
73132: ST_TO_ADDR
// animal := CreateHuman ;
73133: LD_ADDR_VAR 0 12
73137: PUSH
73138: CALL_OW 44
73142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73143: LD_VAR 0 12
73147: PPUSH
73148: LD_VAR 0 8
73152: PPUSH
73153: LD_INT 0
73155: PPUSH
73156: CALL 75122 0 3
// end ;
73160: GO 73097
73162: POP
73163: POP
// if apemans then
73164: LD_VAR 0 3
73168: IFFALSE 73291
// for i = 1 to apemans do
73170: LD_ADDR_VAR 0 11
73174: PUSH
73175: DOUBLE
73176: LD_INT 1
73178: DEC
73179: ST_TO_ADDR
73180: LD_VAR 0 3
73184: PUSH
73185: FOR_TO
73186: IFFALSE 73289
// begin hc_class = class_apeman ;
73188: LD_ADDR_OWVAR 28
73192: PUSH
73193: LD_INT 12
73195: ST_TO_ADDR
// hc_gallery =  ;
73196: LD_ADDR_OWVAR 33
73200: PUSH
73201: LD_STRING 
73203: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
73204: LD_ADDR_OWVAR 35
73208: PUSH
73209: LD_INT 5
73211: NEG
73212: PPUSH
73213: LD_INT 5
73215: PPUSH
73216: CALL_OW 12
73220: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73221: LD_ADDR_OWVAR 31
73225: PUSH
73226: LD_INT 1
73228: PPUSH
73229: LD_INT 3
73231: PPUSH
73232: CALL_OW 12
73236: PUSH
73237: LD_INT 1
73239: PPUSH
73240: LD_INT 3
73242: PPUSH
73243: CALL_OW 12
73247: PUSH
73248: LD_INT 0
73250: PUSH
73251: LD_INT 0
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: ST_TO_ADDR
// animal := CreateHuman ;
73260: LD_ADDR_VAR 0 12
73264: PUSH
73265: CALL_OW 44
73269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73270: LD_VAR 0 12
73274: PPUSH
73275: LD_VAR 0 8
73279: PPUSH
73280: LD_INT 0
73282: PPUSH
73283: CALL 75122 0 3
// end ;
73287: GO 73185
73289: POP
73290: POP
// if enchidnas then
73291: LD_VAR 0 4
73295: IFFALSE 73362
// for i = 1 to enchidnas do
73297: LD_ADDR_VAR 0 11
73301: PUSH
73302: DOUBLE
73303: LD_INT 1
73305: DEC
73306: ST_TO_ADDR
73307: LD_VAR 0 4
73311: PUSH
73312: FOR_TO
73313: IFFALSE 73360
// begin hc_class = 13 ;
73315: LD_ADDR_OWVAR 28
73319: PUSH
73320: LD_INT 13
73322: ST_TO_ADDR
// hc_gallery =  ;
73323: LD_ADDR_OWVAR 33
73327: PUSH
73328: LD_STRING 
73330: ST_TO_ADDR
// animal := CreateHuman ;
73331: LD_ADDR_VAR 0 12
73335: PUSH
73336: CALL_OW 44
73340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73341: LD_VAR 0 12
73345: PPUSH
73346: LD_VAR 0 8
73350: PPUSH
73351: LD_INT 0
73353: PPUSH
73354: CALL 75122 0 3
// end ;
73358: GO 73312
73360: POP
73361: POP
// if fishes then
73362: LD_VAR 0 7
73366: IFFALSE 73433
// for i = 1 to fishes do
73368: LD_ADDR_VAR 0 11
73372: PUSH
73373: DOUBLE
73374: LD_INT 1
73376: DEC
73377: ST_TO_ADDR
73378: LD_VAR 0 7
73382: PUSH
73383: FOR_TO
73384: IFFALSE 73431
// begin hc_class = 20 ;
73386: LD_ADDR_OWVAR 28
73390: PUSH
73391: LD_INT 20
73393: ST_TO_ADDR
// hc_gallery =  ;
73394: LD_ADDR_OWVAR 33
73398: PUSH
73399: LD_STRING 
73401: ST_TO_ADDR
// animal := CreateHuman ;
73402: LD_ADDR_VAR 0 12
73406: PUSH
73407: CALL_OW 44
73411: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73412: LD_VAR 0 12
73416: PPUSH
73417: LD_VAR 0 9
73421: PPUSH
73422: LD_INT 0
73424: PPUSH
73425: CALL 75122 0 3
// end ;
73429: GO 73383
73431: POP
73432: POP
// end ;
73433: LD_VAR 0 10
73437: RET
// export function WantHeal ( sci , unit ) ; begin
73438: LD_INT 0
73440: PPUSH
// if GetTaskList ( sci ) > 0 then
73441: LD_VAR 0 1
73445: PPUSH
73446: CALL_OW 437
73450: PUSH
73451: LD_INT 0
73453: GREATER
73454: IFFALSE 73524
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73456: LD_VAR 0 1
73460: PPUSH
73461: CALL_OW 437
73465: PUSH
73466: LD_INT 1
73468: ARRAY
73469: PUSH
73470: LD_INT 1
73472: ARRAY
73473: PUSH
73474: LD_STRING l
73476: EQUAL
73477: PUSH
73478: LD_VAR 0 1
73482: PPUSH
73483: CALL_OW 437
73487: PUSH
73488: LD_INT 1
73490: ARRAY
73491: PUSH
73492: LD_INT 4
73494: ARRAY
73495: PUSH
73496: LD_VAR 0 2
73500: EQUAL
73501: AND
73502: IFFALSE 73514
// result := true else
73504: LD_ADDR_VAR 0 3
73508: PUSH
73509: LD_INT 1
73511: ST_TO_ADDR
73512: GO 73522
// result := false ;
73514: LD_ADDR_VAR 0 3
73518: PUSH
73519: LD_INT 0
73521: ST_TO_ADDR
// end else
73522: GO 73532
// result := false ;
73524: LD_ADDR_VAR 0 3
73528: PUSH
73529: LD_INT 0
73531: ST_TO_ADDR
// end ;
73532: LD_VAR 0 3
73536: RET
// export function HealTarget ( sci ) ; begin
73537: LD_INT 0
73539: PPUSH
// if not sci then
73540: LD_VAR 0 1
73544: NOT
73545: IFFALSE 73549
// exit ;
73547: GO 73614
// result := 0 ;
73549: LD_ADDR_VAR 0 2
73553: PUSH
73554: LD_INT 0
73556: ST_TO_ADDR
// if GetTaskList ( sci ) then
73557: LD_VAR 0 1
73561: PPUSH
73562: CALL_OW 437
73566: IFFALSE 73614
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73568: LD_VAR 0 1
73572: PPUSH
73573: CALL_OW 437
73577: PUSH
73578: LD_INT 1
73580: ARRAY
73581: PUSH
73582: LD_INT 1
73584: ARRAY
73585: PUSH
73586: LD_STRING l
73588: EQUAL
73589: IFFALSE 73614
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73591: LD_ADDR_VAR 0 2
73595: PUSH
73596: LD_VAR 0 1
73600: PPUSH
73601: CALL_OW 437
73605: PUSH
73606: LD_INT 1
73608: ARRAY
73609: PUSH
73610: LD_INT 4
73612: ARRAY
73613: ST_TO_ADDR
// end ;
73614: LD_VAR 0 2
73618: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73619: LD_INT 0
73621: PPUSH
73622: PPUSH
73623: PPUSH
73624: PPUSH
// if not base_units then
73625: LD_VAR 0 1
73629: NOT
73630: IFFALSE 73634
// exit ;
73632: GO 73721
// result := false ;
73634: LD_ADDR_VAR 0 2
73638: PUSH
73639: LD_INT 0
73641: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73642: LD_ADDR_VAR 0 5
73646: PUSH
73647: LD_VAR 0 1
73651: PPUSH
73652: LD_INT 21
73654: PUSH
73655: LD_INT 3
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PPUSH
73662: CALL_OW 72
73666: ST_TO_ADDR
// if not tmp then
73667: LD_VAR 0 5
73671: NOT
73672: IFFALSE 73676
// exit ;
73674: GO 73721
// for i in tmp do
73676: LD_ADDR_VAR 0 3
73680: PUSH
73681: LD_VAR 0 5
73685: PUSH
73686: FOR_IN
73687: IFFALSE 73719
// begin result := EnemyInRange ( i , 22 ) ;
73689: LD_ADDR_VAR 0 2
73693: PUSH
73694: LD_VAR 0 3
73698: PPUSH
73699: LD_INT 22
73701: PPUSH
73702: CALL 71957 0 2
73706: ST_TO_ADDR
// if result then
73707: LD_VAR 0 2
73711: IFFALSE 73717
// exit ;
73713: POP
73714: POP
73715: GO 73721
// end ;
73717: GO 73686
73719: POP
73720: POP
// end ;
73721: LD_VAR 0 2
73725: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73726: LD_INT 0
73728: PPUSH
73729: PPUSH
// if not units then
73730: LD_VAR 0 1
73734: NOT
73735: IFFALSE 73739
// exit ;
73737: GO 73809
// result := [ ] ;
73739: LD_ADDR_VAR 0 3
73743: PUSH
73744: EMPTY
73745: ST_TO_ADDR
// for i in units do
73746: LD_ADDR_VAR 0 4
73750: PUSH
73751: LD_VAR 0 1
73755: PUSH
73756: FOR_IN
73757: IFFALSE 73807
// if GetTag ( i ) = tag then
73759: LD_VAR 0 4
73763: PPUSH
73764: CALL_OW 110
73768: PUSH
73769: LD_VAR 0 2
73773: EQUAL
73774: IFFALSE 73805
// result := Insert ( result , result + 1 , i ) ;
73776: LD_ADDR_VAR 0 3
73780: PUSH
73781: LD_VAR 0 3
73785: PPUSH
73786: LD_VAR 0 3
73790: PUSH
73791: LD_INT 1
73793: PLUS
73794: PPUSH
73795: LD_VAR 0 4
73799: PPUSH
73800: CALL_OW 2
73804: ST_TO_ADDR
73805: GO 73756
73807: POP
73808: POP
// end ;
73809: LD_VAR 0 3
73813: RET
// export function IsDriver ( un ) ; begin
73814: LD_INT 0
73816: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73817: LD_ADDR_VAR 0 2
73821: PUSH
73822: LD_VAR 0 1
73826: PUSH
73827: LD_INT 55
73829: PUSH
73830: EMPTY
73831: LIST
73832: PPUSH
73833: CALL_OW 69
73837: IN
73838: ST_TO_ADDR
// end ;
73839: LD_VAR 0 2
73843: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73844: LD_INT 0
73846: PPUSH
73847: PPUSH
// list := [ ] ;
73848: LD_ADDR_VAR 0 5
73852: PUSH
73853: EMPTY
73854: ST_TO_ADDR
// case d of 0 :
73855: LD_VAR 0 3
73859: PUSH
73860: LD_INT 0
73862: DOUBLE
73863: EQUAL
73864: IFTRUE 73868
73866: GO 74001
73868: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73869: LD_ADDR_VAR 0 5
73873: PUSH
73874: LD_VAR 0 1
73878: PUSH
73879: LD_INT 4
73881: MINUS
73882: PUSH
73883: LD_VAR 0 2
73887: PUSH
73888: LD_INT 4
73890: MINUS
73891: PUSH
73892: LD_INT 2
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: LIST
73899: PUSH
73900: LD_VAR 0 1
73904: PUSH
73905: LD_INT 3
73907: MINUS
73908: PUSH
73909: LD_VAR 0 2
73913: PUSH
73914: LD_INT 1
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: PUSH
73922: LD_VAR 0 1
73926: PUSH
73927: LD_INT 4
73929: PLUS
73930: PUSH
73931: LD_VAR 0 2
73935: PUSH
73936: LD_INT 4
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: LIST
73943: PUSH
73944: LD_VAR 0 1
73948: PUSH
73949: LD_INT 3
73951: PLUS
73952: PUSH
73953: LD_VAR 0 2
73957: PUSH
73958: LD_INT 3
73960: PLUS
73961: PUSH
73962: LD_INT 5
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: LIST
73969: PUSH
73970: LD_VAR 0 1
73974: PUSH
73975: LD_VAR 0 2
73979: PUSH
73980: LD_INT 4
73982: PLUS
73983: PUSH
73984: LD_INT 0
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: LIST
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: ST_TO_ADDR
// end ; 1 :
73999: GO 74699
74001: LD_INT 1
74003: DOUBLE
74004: EQUAL
74005: IFTRUE 74009
74007: GO 74142
74009: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74010: LD_ADDR_VAR 0 5
74014: PUSH
74015: LD_VAR 0 1
74019: PUSH
74020: LD_VAR 0 2
74024: PUSH
74025: LD_INT 4
74027: MINUS
74028: PUSH
74029: LD_INT 3
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: LIST
74036: PUSH
74037: LD_VAR 0 1
74041: PUSH
74042: LD_INT 3
74044: MINUS
74045: PUSH
74046: LD_VAR 0 2
74050: PUSH
74051: LD_INT 3
74053: MINUS
74054: PUSH
74055: LD_INT 2
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: LIST
74062: PUSH
74063: LD_VAR 0 1
74067: PUSH
74068: LD_INT 4
74070: MINUS
74071: PUSH
74072: LD_VAR 0 2
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: LIST
74084: PUSH
74085: LD_VAR 0 1
74089: PUSH
74090: LD_VAR 0 2
74094: PUSH
74095: LD_INT 3
74097: PLUS
74098: PUSH
74099: LD_INT 0
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: LIST
74106: PUSH
74107: LD_VAR 0 1
74111: PUSH
74112: LD_INT 4
74114: PLUS
74115: PUSH
74116: LD_VAR 0 2
74120: PUSH
74121: LD_INT 4
74123: PLUS
74124: PUSH
74125: LD_INT 5
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: LIST
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: ST_TO_ADDR
// end ; 2 :
74140: GO 74699
74142: LD_INT 2
74144: DOUBLE
74145: EQUAL
74146: IFTRUE 74150
74148: GO 74279
74150: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74151: LD_ADDR_VAR 0 5
74155: PUSH
74156: LD_VAR 0 1
74160: PUSH
74161: LD_VAR 0 2
74165: PUSH
74166: LD_INT 3
74168: MINUS
74169: PUSH
74170: LD_INT 3
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: LIST
74177: PUSH
74178: LD_VAR 0 1
74182: PUSH
74183: LD_INT 4
74185: PLUS
74186: PUSH
74187: LD_VAR 0 2
74191: PUSH
74192: LD_INT 4
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: LIST
74199: PUSH
74200: LD_VAR 0 1
74204: PUSH
74205: LD_VAR 0 2
74209: PUSH
74210: LD_INT 4
74212: PLUS
74213: PUSH
74214: LD_INT 0
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: LIST
74221: PUSH
74222: LD_VAR 0 1
74226: PUSH
74227: LD_INT 3
74229: MINUS
74230: PUSH
74231: LD_VAR 0 2
74235: PUSH
74236: LD_INT 1
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: LIST
74243: PUSH
74244: LD_VAR 0 1
74248: PUSH
74249: LD_INT 4
74251: MINUS
74252: PUSH
74253: LD_VAR 0 2
74257: PUSH
74258: LD_INT 4
74260: MINUS
74261: PUSH
74262: LD_INT 2
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: LIST
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: ST_TO_ADDR
// end ; 3 :
74277: GO 74699
74279: LD_INT 3
74281: DOUBLE
74282: EQUAL
74283: IFTRUE 74287
74285: GO 74420
74287: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74288: LD_ADDR_VAR 0 5
74292: PUSH
74293: LD_VAR 0 1
74297: PUSH
74298: LD_INT 3
74300: PLUS
74301: PUSH
74302: LD_VAR 0 2
74306: PUSH
74307: LD_INT 4
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: LIST
74314: PUSH
74315: LD_VAR 0 1
74319: PUSH
74320: LD_INT 4
74322: PLUS
74323: PUSH
74324: LD_VAR 0 2
74328: PUSH
74329: LD_INT 4
74331: PLUS
74332: PUSH
74333: LD_INT 5
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: PUSH
74341: LD_VAR 0 1
74345: PUSH
74346: LD_INT 4
74348: MINUS
74349: PUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_INT 1
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: LIST
74362: PUSH
74363: LD_VAR 0 1
74367: PUSH
74368: LD_VAR 0 2
74372: PUSH
74373: LD_INT 4
74375: MINUS
74376: PUSH
74377: LD_INT 3
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: LIST
74384: PUSH
74385: LD_VAR 0 1
74389: PUSH
74390: LD_INT 3
74392: MINUS
74393: PUSH
74394: LD_VAR 0 2
74398: PUSH
74399: LD_INT 3
74401: MINUS
74402: PUSH
74403: LD_INT 2
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: LIST
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: ST_TO_ADDR
// end ; 4 :
74418: GO 74699
74420: LD_INT 4
74422: DOUBLE
74423: EQUAL
74424: IFTRUE 74428
74426: GO 74561
74428: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74429: LD_ADDR_VAR 0 5
74433: PUSH
74434: LD_VAR 0 1
74438: PUSH
74439: LD_VAR 0 2
74443: PUSH
74444: LD_INT 4
74446: PLUS
74447: PUSH
74448: LD_INT 0
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: LIST
74455: PUSH
74456: LD_VAR 0 1
74460: PUSH
74461: LD_INT 3
74463: PLUS
74464: PUSH
74465: LD_VAR 0 2
74469: PUSH
74470: LD_INT 3
74472: PLUS
74473: PUSH
74474: LD_INT 5
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: LIST
74481: PUSH
74482: LD_VAR 0 1
74486: PUSH
74487: LD_INT 4
74489: PLUS
74490: PUSH
74491: LD_VAR 0 2
74495: PUSH
74496: LD_INT 4
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: LIST
74503: PUSH
74504: LD_VAR 0 1
74508: PUSH
74509: LD_VAR 0 2
74513: PUSH
74514: LD_INT 3
74516: MINUS
74517: PUSH
74518: LD_INT 3
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: LIST
74525: PUSH
74526: LD_VAR 0 1
74530: PUSH
74531: LD_INT 4
74533: MINUS
74534: PUSH
74535: LD_VAR 0 2
74539: PUSH
74540: LD_INT 4
74542: MINUS
74543: PUSH
74544: LD_INT 2
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: LIST
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: ST_TO_ADDR
// end ; 5 :
74559: GO 74699
74561: LD_INT 5
74563: DOUBLE
74564: EQUAL
74565: IFTRUE 74569
74567: GO 74698
74569: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74570: LD_ADDR_VAR 0 5
74574: PUSH
74575: LD_VAR 0 1
74579: PUSH
74580: LD_INT 4
74582: MINUS
74583: PUSH
74584: LD_VAR 0 2
74588: PUSH
74589: LD_INT 1
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: LIST
74596: PUSH
74597: LD_VAR 0 1
74601: PUSH
74602: LD_VAR 0 2
74606: PUSH
74607: LD_INT 4
74609: MINUS
74610: PUSH
74611: LD_INT 3
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: LIST
74618: PUSH
74619: LD_VAR 0 1
74623: PUSH
74624: LD_INT 4
74626: PLUS
74627: PUSH
74628: LD_VAR 0 2
74632: PUSH
74633: LD_INT 4
74635: PLUS
74636: PUSH
74637: LD_INT 5
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: LIST
74644: PUSH
74645: LD_VAR 0 1
74649: PUSH
74650: LD_INT 3
74652: PLUS
74653: PUSH
74654: LD_VAR 0 2
74658: PUSH
74659: LD_INT 4
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: LIST
74666: PUSH
74667: LD_VAR 0 1
74671: PUSH
74672: LD_VAR 0 2
74676: PUSH
74677: LD_INT 3
74679: PLUS
74680: PUSH
74681: LD_INT 0
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: LIST
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: ST_TO_ADDR
// end ; end ;
74696: GO 74699
74698: POP
// result := list ;
74699: LD_ADDR_VAR 0 4
74703: PUSH
74704: LD_VAR 0 5
74708: ST_TO_ADDR
// end ;
74709: LD_VAR 0 4
74713: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74714: LD_INT 0
74716: PPUSH
74717: PPUSH
74718: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74719: LD_VAR 0 1
74723: NOT
74724: PUSH
74725: LD_VAR 0 2
74729: PUSH
74730: LD_INT 1
74732: PUSH
74733: LD_INT 2
74735: PUSH
74736: LD_INT 3
74738: PUSH
74739: LD_INT 4
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: IN
74748: NOT
74749: OR
74750: IFFALSE 74754
// exit ;
74752: GO 74846
// tmp := [ ] ;
74754: LD_ADDR_VAR 0 5
74758: PUSH
74759: EMPTY
74760: ST_TO_ADDR
// for i in units do
74761: LD_ADDR_VAR 0 4
74765: PUSH
74766: LD_VAR 0 1
74770: PUSH
74771: FOR_IN
74772: IFFALSE 74815
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74774: LD_ADDR_VAR 0 5
74778: PUSH
74779: LD_VAR 0 5
74783: PPUSH
74784: LD_VAR 0 5
74788: PUSH
74789: LD_INT 1
74791: PLUS
74792: PPUSH
74793: LD_VAR 0 4
74797: PPUSH
74798: LD_VAR 0 2
74802: PPUSH
74803: CALL_OW 259
74807: PPUSH
74808: CALL_OW 2
74812: ST_TO_ADDR
74813: GO 74771
74815: POP
74816: POP
// if not tmp then
74817: LD_VAR 0 5
74821: NOT
74822: IFFALSE 74826
// exit ;
74824: GO 74846
// result := SortListByListDesc ( units , tmp ) ;
74826: LD_ADDR_VAR 0 3
74830: PUSH
74831: LD_VAR 0 1
74835: PPUSH
74836: LD_VAR 0 5
74840: PPUSH
74841: CALL_OW 77
74845: ST_TO_ADDR
// end ;
74846: LD_VAR 0 3
74850: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74851: LD_INT 0
74853: PPUSH
74854: PPUSH
74855: PPUSH
// result := false ;
74856: LD_ADDR_VAR 0 3
74860: PUSH
74861: LD_INT 0
74863: ST_TO_ADDR
// x := GetX ( building ) ;
74864: LD_ADDR_VAR 0 4
74868: PUSH
74869: LD_VAR 0 2
74873: PPUSH
74874: CALL_OW 250
74878: ST_TO_ADDR
// y := GetY ( building ) ;
74879: LD_ADDR_VAR 0 5
74883: PUSH
74884: LD_VAR 0 2
74888: PPUSH
74889: CALL_OW 251
74893: ST_TO_ADDR
// if not building or not x or not y then
74894: LD_VAR 0 2
74898: NOT
74899: PUSH
74900: LD_VAR 0 4
74904: NOT
74905: OR
74906: PUSH
74907: LD_VAR 0 5
74911: NOT
74912: OR
74913: IFFALSE 74917
// exit ;
74915: GO 75009
// if GetTaskList ( unit ) then
74917: LD_VAR 0 1
74921: PPUSH
74922: CALL_OW 437
74926: IFFALSE 75009
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74928: LD_STRING e
74930: PUSH
74931: LD_VAR 0 1
74935: PPUSH
74936: CALL_OW 437
74940: PUSH
74941: LD_INT 1
74943: ARRAY
74944: PUSH
74945: LD_INT 1
74947: ARRAY
74948: EQUAL
74949: PUSH
74950: LD_VAR 0 4
74954: PUSH
74955: LD_VAR 0 1
74959: PPUSH
74960: CALL_OW 437
74964: PUSH
74965: LD_INT 1
74967: ARRAY
74968: PUSH
74969: LD_INT 2
74971: ARRAY
74972: EQUAL
74973: AND
74974: PUSH
74975: LD_VAR 0 5
74979: PUSH
74980: LD_VAR 0 1
74984: PPUSH
74985: CALL_OW 437
74989: PUSH
74990: LD_INT 1
74992: ARRAY
74993: PUSH
74994: LD_INT 3
74996: ARRAY
74997: EQUAL
74998: AND
74999: IFFALSE 75009
// result := true end ;
75001: LD_ADDR_VAR 0 3
75005: PUSH
75006: LD_INT 1
75008: ST_TO_ADDR
// end ;
75009: LD_VAR 0 3
75013: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75014: LD_INT 0
75016: PPUSH
// result := false ;
75017: LD_ADDR_VAR 0 4
75021: PUSH
75022: LD_INT 0
75024: ST_TO_ADDR
// if GetTaskList ( unit ) then
75025: LD_VAR 0 1
75029: PPUSH
75030: CALL_OW 437
75034: IFFALSE 75117
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75036: LD_STRING M
75038: PUSH
75039: LD_VAR 0 1
75043: PPUSH
75044: CALL_OW 437
75048: PUSH
75049: LD_INT 1
75051: ARRAY
75052: PUSH
75053: LD_INT 1
75055: ARRAY
75056: EQUAL
75057: PUSH
75058: LD_VAR 0 2
75062: PUSH
75063: LD_VAR 0 1
75067: PPUSH
75068: CALL_OW 437
75072: PUSH
75073: LD_INT 1
75075: ARRAY
75076: PUSH
75077: LD_INT 2
75079: ARRAY
75080: EQUAL
75081: AND
75082: PUSH
75083: LD_VAR 0 3
75087: PUSH
75088: LD_VAR 0 1
75092: PPUSH
75093: CALL_OW 437
75097: PUSH
75098: LD_INT 1
75100: ARRAY
75101: PUSH
75102: LD_INT 3
75104: ARRAY
75105: EQUAL
75106: AND
75107: IFFALSE 75117
// result := true ;
75109: LD_ADDR_VAR 0 4
75113: PUSH
75114: LD_INT 1
75116: ST_TO_ADDR
// end ; end ;
75117: LD_VAR 0 4
75121: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75122: LD_INT 0
75124: PPUSH
75125: PPUSH
75126: PPUSH
75127: PPUSH
// if not unit or not area then
75128: LD_VAR 0 1
75132: NOT
75133: PUSH
75134: LD_VAR 0 2
75138: NOT
75139: OR
75140: IFFALSE 75144
// exit ;
75142: GO 75308
// tmp := AreaToList ( area , i ) ;
75144: LD_ADDR_VAR 0 6
75148: PUSH
75149: LD_VAR 0 2
75153: PPUSH
75154: LD_VAR 0 5
75158: PPUSH
75159: CALL_OW 517
75163: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75164: LD_ADDR_VAR 0 5
75168: PUSH
75169: DOUBLE
75170: LD_INT 1
75172: DEC
75173: ST_TO_ADDR
75174: LD_VAR 0 6
75178: PUSH
75179: LD_INT 1
75181: ARRAY
75182: PUSH
75183: FOR_TO
75184: IFFALSE 75306
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75186: LD_ADDR_VAR 0 7
75190: PUSH
75191: LD_VAR 0 6
75195: PUSH
75196: LD_INT 1
75198: ARRAY
75199: PUSH
75200: LD_VAR 0 5
75204: ARRAY
75205: PUSH
75206: LD_VAR 0 6
75210: PUSH
75211: LD_INT 2
75213: ARRAY
75214: PUSH
75215: LD_VAR 0 5
75219: ARRAY
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75225: LD_VAR 0 7
75229: PUSH
75230: LD_INT 1
75232: ARRAY
75233: PPUSH
75234: LD_VAR 0 7
75238: PUSH
75239: LD_INT 2
75241: ARRAY
75242: PPUSH
75243: CALL_OW 428
75247: PUSH
75248: LD_INT 0
75250: EQUAL
75251: IFFALSE 75304
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75253: LD_VAR 0 1
75257: PPUSH
75258: LD_VAR 0 7
75262: PUSH
75263: LD_INT 1
75265: ARRAY
75266: PPUSH
75267: LD_VAR 0 7
75271: PUSH
75272: LD_INT 2
75274: ARRAY
75275: PPUSH
75276: LD_VAR 0 3
75280: PPUSH
75281: CALL_OW 48
// result := IsPlaced ( unit ) ;
75285: LD_ADDR_VAR 0 4
75289: PUSH
75290: LD_VAR 0 1
75294: PPUSH
75295: CALL_OW 305
75299: ST_TO_ADDR
// exit ;
75300: POP
75301: POP
75302: GO 75308
// end ; end ;
75304: GO 75183
75306: POP
75307: POP
// end ;
75308: LD_VAR 0 4
75312: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75313: LD_INT 0
75315: PPUSH
75316: PPUSH
75317: PPUSH
// if not side or side > 8 then
75318: LD_VAR 0 1
75322: NOT
75323: PUSH
75324: LD_VAR 0 1
75328: PUSH
75329: LD_INT 8
75331: GREATER
75332: OR
75333: IFFALSE 75337
// exit ;
75335: GO 75524
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75337: LD_ADDR_VAR 0 4
75341: PUSH
75342: LD_INT 22
75344: PUSH
75345: LD_VAR 0 1
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 21
75356: PUSH
75357: LD_INT 3
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PPUSH
75368: CALL_OW 69
75372: ST_TO_ADDR
// if not tmp then
75373: LD_VAR 0 4
75377: NOT
75378: IFFALSE 75382
// exit ;
75380: GO 75524
// enable_addtolog := true ;
75382: LD_ADDR_OWVAR 81
75386: PUSH
75387: LD_INT 1
75389: ST_TO_ADDR
// AddToLog ( [ ) ;
75390: LD_STRING [
75392: PPUSH
75393: CALL_OW 561
// for i in tmp do
75397: LD_ADDR_VAR 0 3
75401: PUSH
75402: LD_VAR 0 4
75406: PUSH
75407: FOR_IN
75408: IFFALSE 75515
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75410: LD_STRING [
75412: PUSH
75413: LD_VAR 0 3
75417: PPUSH
75418: CALL_OW 266
75422: STR
75423: PUSH
75424: LD_STRING , 
75426: STR
75427: PUSH
75428: LD_VAR 0 3
75432: PPUSH
75433: CALL_OW 250
75437: STR
75438: PUSH
75439: LD_STRING , 
75441: STR
75442: PUSH
75443: LD_VAR 0 3
75447: PPUSH
75448: CALL_OW 251
75452: STR
75453: PUSH
75454: LD_STRING , 
75456: STR
75457: PUSH
75458: LD_VAR 0 3
75462: PPUSH
75463: CALL_OW 254
75467: STR
75468: PUSH
75469: LD_STRING , 
75471: STR
75472: PUSH
75473: LD_VAR 0 3
75477: PPUSH
75478: LD_INT 1
75480: PPUSH
75481: CALL_OW 268
75485: STR
75486: PUSH
75487: LD_STRING , 
75489: STR
75490: PUSH
75491: LD_VAR 0 3
75495: PPUSH
75496: LD_INT 2
75498: PPUSH
75499: CALL_OW 268
75503: STR
75504: PUSH
75505: LD_STRING ],
75507: STR
75508: PPUSH
75509: CALL_OW 561
// end ;
75513: GO 75407
75515: POP
75516: POP
// AddToLog ( ]; ) ;
75517: LD_STRING ];
75519: PPUSH
75520: CALL_OW 561
// end ;
75524: LD_VAR 0 2
75528: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75529: LD_INT 0
75531: PPUSH
75532: PPUSH
75533: PPUSH
75534: PPUSH
75535: PPUSH
// if not area or not rate or not max then
75536: LD_VAR 0 1
75540: NOT
75541: PUSH
75542: LD_VAR 0 2
75546: NOT
75547: OR
75548: PUSH
75549: LD_VAR 0 4
75553: NOT
75554: OR
75555: IFFALSE 75559
// exit ;
75557: GO 75751
// while 1 do
75559: LD_INT 1
75561: IFFALSE 75751
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75563: LD_ADDR_VAR 0 9
75567: PUSH
75568: LD_VAR 0 1
75572: PPUSH
75573: LD_INT 1
75575: PPUSH
75576: CALL_OW 287
75580: PUSH
75581: LD_INT 10
75583: MUL
75584: ST_TO_ADDR
// r := rate / 10 ;
75585: LD_ADDR_VAR 0 7
75589: PUSH
75590: LD_VAR 0 2
75594: PUSH
75595: LD_INT 10
75597: DIVREAL
75598: ST_TO_ADDR
// time := 1 1$00 ;
75599: LD_ADDR_VAR 0 8
75603: PUSH
75604: LD_INT 2100
75606: ST_TO_ADDR
// if amount < min then
75607: LD_VAR 0 9
75611: PUSH
75612: LD_VAR 0 3
75616: LESS
75617: IFFALSE 75635
// r := r * 2 else
75619: LD_ADDR_VAR 0 7
75623: PUSH
75624: LD_VAR 0 7
75628: PUSH
75629: LD_INT 2
75631: MUL
75632: ST_TO_ADDR
75633: GO 75661
// if amount > max then
75635: LD_VAR 0 9
75639: PUSH
75640: LD_VAR 0 4
75644: GREATER
75645: IFFALSE 75661
// r := r / 2 ;
75647: LD_ADDR_VAR 0 7
75651: PUSH
75652: LD_VAR 0 7
75656: PUSH
75657: LD_INT 2
75659: DIVREAL
75660: ST_TO_ADDR
// time := time / r ;
75661: LD_ADDR_VAR 0 8
75665: PUSH
75666: LD_VAR 0 8
75670: PUSH
75671: LD_VAR 0 7
75675: DIVREAL
75676: ST_TO_ADDR
// if time < 0 then
75677: LD_VAR 0 8
75681: PUSH
75682: LD_INT 0
75684: LESS
75685: IFFALSE 75702
// time := time * - 1 ;
75687: LD_ADDR_VAR 0 8
75691: PUSH
75692: LD_VAR 0 8
75696: PUSH
75697: LD_INT 1
75699: NEG
75700: MUL
75701: ST_TO_ADDR
// wait ( time ) ;
75702: LD_VAR 0 8
75706: PPUSH
75707: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75711: LD_INT 35
75713: PPUSH
75714: LD_INT 875
75716: PPUSH
75717: CALL_OW 12
75721: PPUSH
75722: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75726: LD_INT 1
75728: PPUSH
75729: LD_INT 5
75731: PPUSH
75732: CALL_OW 12
75736: PPUSH
75737: LD_VAR 0 1
75741: PPUSH
75742: LD_INT 1
75744: PPUSH
75745: CALL_OW 55
// end ;
75749: GO 75559
// end ;
75751: LD_VAR 0 5
75755: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75756: LD_INT 0
75758: PPUSH
75759: PPUSH
75760: PPUSH
75761: PPUSH
75762: PPUSH
75763: PPUSH
75764: PPUSH
75765: PPUSH
// if not turrets or not factories then
75766: LD_VAR 0 1
75770: NOT
75771: PUSH
75772: LD_VAR 0 2
75776: NOT
75777: OR
75778: IFFALSE 75782
// exit ;
75780: GO 76089
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75782: LD_ADDR_VAR 0 10
75786: PUSH
75787: LD_INT 5
75789: PUSH
75790: LD_INT 6
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 2
75799: PUSH
75800: LD_INT 4
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: LD_INT 3
75809: PUSH
75810: LD_INT 5
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: EMPTY
75818: LIST
75819: LIST
75820: LIST
75821: PUSH
75822: LD_INT 24
75824: PUSH
75825: LD_INT 25
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: PUSH
75832: LD_INT 23
75834: PUSH
75835: LD_INT 27
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: PUSH
75846: LD_INT 42
75848: PUSH
75849: LD_INT 43
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 44
75858: PUSH
75859: LD_INT 46
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: PUSH
75866: LD_INT 45
75868: PUSH
75869: LD_INT 47
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: LIST
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: LIST
75885: ST_TO_ADDR
// result := [ ] ;
75886: LD_ADDR_VAR 0 3
75890: PUSH
75891: EMPTY
75892: ST_TO_ADDR
// for i in turrets do
75893: LD_ADDR_VAR 0 4
75897: PUSH
75898: LD_VAR 0 1
75902: PUSH
75903: FOR_IN
75904: IFFALSE 76087
// begin nat := GetNation ( i ) ;
75906: LD_ADDR_VAR 0 7
75910: PUSH
75911: LD_VAR 0 4
75915: PPUSH
75916: CALL_OW 248
75920: ST_TO_ADDR
// weapon := 0 ;
75921: LD_ADDR_VAR 0 8
75925: PUSH
75926: LD_INT 0
75928: ST_TO_ADDR
// if not nat then
75929: LD_VAR 0 7
75933: NOT
75934: IFFALSE 75938
// continue ;
75936: GO 75903
// for j in list [ nat ] do
75938: LD_ADDR_VAR 0 5
75942: PUSH
75943: LD_VAR 0 10
75947: PUSH
75948: LD_VAR 0 7
75952: ARRAY
75953: PUSH
75954: FOR_IN
75955: IFFALSE 75996
// if GetBWeapon ( i ) = j [ 1 ] then
75957: LD_VAR 0 4
75961: PPUSH
75962: CALL_OW 269
75966: PUSH
75967: LD_VAR 0 5
75971: PUSH
75972: LD_INT 1
75974: ARRAY
75975: EQUAL
75976: IFFALSE 75994
// begin weapon := j [ 2 ] ;
75978: LD_ADDR_VAR 0 8
75982: PUSH
75983: LD_VAR 0 5
75987: PUSH
75988: LD_INT 2
75990: ARRAY
75991: ST_TO_ADDR
// break ;
75992: GO 75996
// end ;
75994: GO 75954
75996: POP
75997: POP
// if not weapon then
75998: LD_VAR 0 8
76002: NOT
76003: IFFALSE 76007
// continue ;
76005: GO 75903
// for k in factories do
76007: LD_ADDR_VAR 0 6
76011: PUSH
76012: LD_VAR 0 2
76016: PUSH
76017: FOR_IN
76018: IFFALSE 76083
// begin weapons := AvailableWeaponList ( k ) ;
76020: LD_ADDR_VAR 0 9
76024: PUSH
76025: LD_VAR 0 6
76029: PPUSH
76030: CALL_OW 478
76034: ST_TO_ADDR
// if not weapons then
76035: LD_VAR 0 9
76039: NOT
76040: IFFALSE 76044
// continue ;
76042: GO 76017
// if weapon in weapons then
76044: LD_VAR 0 8
76048: PUSH
76049: LD_VAR 0 9
76053: IN
76054: IFFALSE 76081
// begin result := [ i , weapon ] ;
76056: LD_ADDR_VAR 0 3
76060: PUSH
76061: LD_VAR 0 4
76065: PUSH
76066: LD_VAR 0 8
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: ST_TO_ADDR
// exit ;
76075: POP
76076: POP
76077: POP
76078: POP
76079: GO 76089
// end ; end ;
76081: GO 76017
76083: POP
76084: POP
// end ;
76085: GO 75903
76087: POP
76088: POP
// end ;
76089: LD_VAR 0 3
76093: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76094: LD_INT 0
76096: PPUSH
// if not side or side > 8 then
76097: LD_VAR 0 3
76101: NOT
76102: PUSH
76103: LD_VAR 0 3
76107: PUSH
76108: LD_INT 8
76110: GREATER
76111: OR
76112: IFFALSE 76116
// exit ;
76114: GO 76175
// if not range then
76116: LD_VAR 0 4
76120: NOT
76121: IFFALSE 76132
// range := - 12 ;
76123: LD_ADDR_VAR 0 4
76127: PUSH
76128: LD_INT 12
76130: NEG
76131: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76132: LD_VAR 0 1
76136: PPUSH
76137: LD_VAR 0 2
76141: PPUSH
76142: LD_VAR 0 3
76146: PPUSH
76147: LD_VAR 0 4
76151: PPUSH
76152: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76156: LD_VAR 0 1
76160: PPUSH
76161: LD_VAR 0 2
76165: PPUSH
76166: LD_VAR 0 3
76170: PPUSH
76171: CALL_OW 331
// end ;
76175: LD_VAR 0 5
76179: RET
// export function Video ( mode ) ; begin
76180: LD_INT 0
76182: PPUSH
// ingame_video = mode ;
76183: LD_ADDR_OWVAR 52
76187: PUSH
76188: LD_VAR 0 1
76192: ST_TO_ADDR
// interface_hidden = mode ;
76193: LD_ADDR_OWVAR 54
76197: PUSH
76198: LD_VAR 0 1
76202: ST_TO_ADDR
// end ;
76203: LD_VAR 0 2
76207: RET
// export function Join ( array , element ) ; begin
76208: LD_INT 0
76210: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76211: LD_ADDR_VAR 0 3
76215: PUSH
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 1
76225: PUSH
76226: LD_INT 1
76228: PLUS
76229: PPUSH
76230: LD_VAR 0 2
76234: PPUSH
76235: CALL_OW 1
76239: ST_TO_ADDR
// end ;
76240: LD_VAR 0 3
76244: RET
// export function JoinUnion ( array , element ) ; begin
76245: LD_INT 0
76247: PPUSH
// result := array union element ;
76248: LD_ADDR_VAR 0 3
76252: PUSH
76253: LD_VAR 0 1
76257: PUSH
76258: LD_VAR 0 2
76262: UNION
76263: ST_TO_ADDR
// end ;
76264: LD_VAR 0 3
76268: RET
// export function GetBehemoths ( side ) ; begin
76269: LD_INT 0
76271: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76272: LD_ADDR_VAR 0 2
76276: PUSH
76277: LD_INT 22
76279: PUSH
76280: LD_VAR 0 1
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 31
76291: PUSH
76292: LD_INT 25
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: PPUSH
76303: CALL_OW 69
76307: ST_TO_ADDR
// end ;
76308: LD_VAR 0 2
76312: RET
// export function Shuffle ( array ) ; var i , index ; begin
76313: LD_INT 0
76315: PPUSH
76316: PPUSH
76317: PPUSH
// result := [ ] ;
76318: LD_ADDR_VAR 0 2
76322: PUSH
76323: EMPTY
76324: ST_TO_ADDR
// if not array then
76325: LD_VAR 0 1
76329: NOT
76330: IFFALSE 76334
// exit ;
76332: GO 76433
// Randomize ;
76334: CALL_OW 10
// for i = array downto 1 do
76338: LD_ADDR_VAR 0 3
76342: PUSH
76343: DOUBLE
76344: LD_VAR 0 1
76348: INC
76349: ST_TO_ADDR
76350: LD_INT 1
76352: PUSH
76353: FOR_DOWNTO
76354: IFFALSE 76431
// begin index := rand ( 1 , array ) ;
76356: LD_ADDR_VAR 0 4
76360: PUSH
76361: LD_INT 1
76363: PPUSH
76364: LD_VAR 0 1
76368: PPUSH
76369: CALL_OW 12
76373: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76374: LD_ADDR_VAR 0 2
76378: PUSH
76379: LD_VAR 0 2
76383: PPUSH
76384: LD_VAR 0 2
76388: PUSH
76389: LD_INT 1
76391: PLUS
76392: PPUSH
76393: LD_VAR 0 1
76397: PUSH
76398: LD_VAR 0 4
76402: ARRAY
76403: PPUSH
76404: CALL_OW 2
76408: ST_TO_ADDR
// array := Delete ( array , index ) ;
76409: LD_ADDR_VAR 0 1
76413: PUSH
76414: LD_VAR 0 1
76418: PPUSH
76419: LD_VAR 0 4
76423: PPUSH
76424: CALL_OW 3
76428: ST_TO_ADDR
// end ;
76429: GO 76353
76431: POP
76432: POP
// end ;
76433: LD_VAR 0 2
76437: RET
// export function GetBaseMaterials ( base ) ; begin
76438: LD_INT 0
76440: PPUSH
// result := [ 0 , 0 , 0 ] ;
76441: LD_ADDR_VAR 0 2
76445: PUSH
76446: LD_INT 0
76448: PUSH
76449: LD_INT 0
76451: PUSH
76452: LD_INT 0
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: LIST
76459: ST_TO_ADDR
// if not base then
76460: LD_VAR 0 1
76464: NOT
76465: IFFALSE 76469
// exit ;
76467: GO 76518
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76469: LD_ADDR_VAR 0 2
76473: PUSH
76474: LD_VAR 0 1
76478: PPUSH
76479: LD_INT 1
76481: PPUSH
76482: CALL_OW 275
76486: PUSH
76487: LD_VAR 0 1
76491: PPUSH
76492: LD_INT 2
76494: PPUSH
76495: CALL_OW 275
76499: PUSH
76500: LD_VAR 0 1
76504: PPUSH
76505: LD_INT 3
76507: PPUSH
76508: CALL_OW 275
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: LIST
76517: ST_TO_ADDR
// end ;
76518: LD_VAR 0 2
76522: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76523: LD_INT 0
76525: PPUSH
76526: PPUSH
// result := array ;
76527: LD_ADDR_VAR 0 3
76531: PUSH
76532: LD_VAR 0 1
76536: ST_TO_ADDR
// if size > 0 then
76537: LD_VAR 0 2
76541: PUSH
76542: LD_INT 0
76544: GREATER
76545: IFFALSE 76591
// for i := array downto size do
76547: LD_ADDR_VAR 0 4
76551: PUSH
76552: DOUBLE
76553: LD_VAR 0 1
76557: INC
76558: ST_TO_ADDR
76559: LD_VAR 0 2
76563: PUSH
76564: FOR_DOWNTO
76565: IFFALSE 76589
// result := Delete ( result , result ) ;
76567: LD_ADDR_VAR 0 3
76571: PUSH
76572: LD_VAR 0 3
76576: PPUSH
76577: LD_VAR 0 3
76581: PPUSH
76582: CALL_OW 3
76586: ST_TO_ADDR
76587: GO 76564
76589: POP
76590: POP
// end ;
76591: LD_VAR 0 3
76595: RET
// export function ComExit ( unit ) ; var tmp ; begin
76596: LD_INT 0
76598: PPUSH
76599: PPUSH
// if not IsInUnit ( unit ) then
76600: LD_VAR 0 1
76604: PPUSH
76605: CALL_OW 310
76609: NOT
76610: IFFALSE 76614
// exit ;
76612: GO 76674
// tmp := IsInUnit ( unit ) ;
76614: LD_ADDR_VAR 0 3
76618: PUSH
76619: LD_VAR 0 1
76623: PPUSH
76624: CALL_OW 310
76628: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76629: LD_VAR 0 3
76633: PPUSH
76634: CALL_OW 247
76638: PUSH
76639: LD_INT 2
76641: EQUAL
76642: IFFALSE 76655
// ComExitVehicle ( unit ) else
76644: LD_VAR 0 1
76648: PPUSH
76649: CALL_OW 121
76653: GO 76664
// ComExitBuilding ( unit ) ;
76655: LD_VAR 0 1
76659: PPUSH
76660: CALL_OW 122
// result := tmp ;
76664: LD_ADDR_VAR 0 2
76668: PUSH
76669: LD_VAR 0 3
76673: ST_TO_ADDR
// end ;
76674: LD_VAR 0 2
76678: RET
// export function ComExitAll ( units ) ; var i ; begin
76679: LD_INT 0
76681: PPUSH
76682: PPUSH
// if not units then
76683: LD_VAR 0 1
76687: NOT
76688: IFFALSE 76692
// exit ;
76690: GO 76718
// for i in units do
76692: LD_ADDR_VAR 0 3
76696: PUSH
76697: LD_VAR 0 1
76701: PUSH
76702: FOR_IN
76703: IFFALSE 76716
// ComExit ( i ) ;
76705: LD_VAR 0 3
76709: PPUSH
76710: CALL 76596 0 1
76714: GO 76702
76716: POP
76717: POP
// end ;
76718: LD_VAR 0 2
76722: RET
// export function ResetHc ; begin
76723: LD_INT 0
76725: PPUSH
// InitHc ;
76726: CALL_OW 19
// hc_importance := 0 ;
76730: LD_ADDR_OWVAR 32
76734: PUSH
76735: LD_INT 0
76737: ST_TO_ADDR
// end ;
76738: LD_VAR 0 1
76742: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76743: LD_INT 0
76745: PPUSH
76746: PPUSH
76747: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76748: LD_ADDR_VAR 0 6
76752: PUSH
76753: LD_VAR 0 1
76757: PUSH
76758: LD_VAR 0 3
76762: PLUS
76763: PUSH
76764: LD_INT 2
76766: DIV
76767: ST_TO_ADDR
// if _x < 0 then
76768: LD_VAR 0 6
76772: PUSH
76773: LD_INT 0
76775: LESS
76776: IFFALSE 76793
// _x := _x * - 1 ;
76778: LD_ADDR_VAR 0 6
76782: PUSH
76783: LD_VAR 0 6
76787: PUSH
76788: LD_INT 1
76790: NEG
76791: MUL
76792: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76793: LD_ADDR_VAR 0 7
76797: PUSH
76798: LD_VAR 0 2
76802: PUSH
76803: LD_VAR 0 4
76807: PLUS
76808: PUSH
76809: LD_INT 2
76811: DIV
76812: ST_TO_ADDR
// if _y < 0 then
76813: LD_VAR 0 7
76817: PUSH
76818: LD_INT 0
76820: LESS
76821: IFFALSE 76838
// _y := _y * - 1 ;
76823: LD_ADDR_VAR 0 7
76827: PUSH
76828: LD_VAR 0 7
76832: PUSH
76833: LD_INT 1
76835: NEG
76836: MUL
76837: ST_TO_ADDR
// result := [ _x , _y ] ;
76838: LD_ADDR_VAR 0 5
76842: PUSH
76843: LD_VAR 0 6
76847: PUSH
76848: LD_VAR 0 7
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: ST_TO_ADDR
// end ;
76857: LD_VAR 0 5
76861: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76862: LD_INT 0
76864: PPUSH
76865: PPUSH
76866: PPUSH
76867: PPUSH
// task := GetTaskList ( unit ) ;
76868: LD_ADDR_VAR 0 7
76872: PUSH
76873: LD_VAR 0 1
76877: PPUSH
76878: CALL_OW 437
76882: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76883: LD_VAR 0 7
76887: NOT
76888: PUSH
76889: LD_VAR 0 1
76893: PPUSH
76894: LD_VAR 0 2
76898: PPUSH
76899: CALL_OW 308
76903: NOT
76904: AND
76905: IFFALSE 76909
// exit ;
76907: GO 77027
// if IsInArea ( unit , area ) then
76909: LD_VAR 0 1
76913: PPUSH
76914: LD_VAR 0 2
76918: PPUSH
76919: CALL_OW 308
76923: IFFALSE 76941
// begin ComMoveToArea ( unit , goAway ) ;
76925: LD_VAR 0 1
76929: PPUSH
76930: LD_VAR 0 3
76934: PPUSH
76935: CALL_OW 113
// exit ;
76939: GO 77027
// end ; if task [ 1 ] [ 1 ] <> M then
76941: LD_VAR 0 7
76945: PUSH
76946: LD_INT 1
76948: ARRAY
76949: PUSH
76950: LD_INT 1
76952: ARRAY
76953: PUSH
76954: LD_STRING M
76956: NONEQUAL
76957: IFFALSE 76961
// exit ;
76959: GO 77027
// x := task [ 1 ] [ 2 ] ;
76961: LD_ADDR_VAR 0 5
76965: PUSH
76966: LD_VAR 0 7
76970: PUSH
76971: LD_INT 1
76973: ARRAY
76974: PUSH
76975: LD_INT 2
76977: ARRAY
76978: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76979: LD_ADDR_VAR 0 6
76983: PUSH
76984: LD_VAR 0 7
76988: PUSH
76989: LD_INT 1
76991: ARRAY
76992: PUSH
76993: LD_INT 3
76995: ARRAY
76996: ST_TO_ADDR
// if InArea ( x , y , area ) then
76997: LD_VAR 0 5
77001: PPUSH
77002: LD_VAR 0 6
77006: PPUSH
77007: LD_VAR 0 2
77011: PPUSH
77012: CALL_OW 309
77016: IFFALSE 77027
// ComStop ( unit ) ;
77018: LD_VAR 0 1
77022: PPUSH
77023: CALL_OW 141
// end ;
77027: LD_VAR 0 4
77031: RET
// export function Abs ( value ) ; begin
77032: LD_INT 0
77034: PPUSH
// result := value ;
77035: LD_ADDR_VAR 0 2
77039: PUSH
77040: LD_VAR 0 1
77044: ST_TO_ADDR
// if value < 0 then
77045: LD_VAR 0 1
77049: PUSH
77050: LD_INT 0
77052: LESS
77053: IFFALSE 77070
// result := value * - 1 ;
77055: LD_ADDR_VAR 0 2
77059: PUSH
77060: LD_VAR 0 1
77064: PUSH
77065: LD_INT 1
77067: NEG
77068: MUL
77069: ST_TO_ADDR
// end ;
77070: LD_VAR 0 2
77074: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77075: LD_INT 0
77077: PPUSH
77078: PPUSH
77079: PPUSH
77080: PPUSH
77081: PPUSH
77082: PPUSH
77083: PPUSH
77084: PPUSH
// if not unit or not building then
77085: LD_VAR 0 1
77089: NOT
77090: PUSH
77091: LD_VAR 0 2
77095: NOT
77096: OR
77097: IFFALSE 77101
// exit ;
77099: GO 77327
// x := GetX ( building ) ;
77101: LD_ADDR_VAR 0 4
77105: PUSH
77106: LD_VAR 0 2
77110: PPUSH
77111: CALL_OW 250
77115: ST_TO_ADDR
// y := GetY ( building ) ;
77116: LD_ADDR_VAR 0 6
77120: PUSH
77121: LD_VAR 0 2
77125: PPUSH
77126: CALL_OW 251
77130: ST_TO_ADDR
// d := GetDir ( building ) ;
77131: LD_ADDR_VAR 0 8
77135: PUSH
77136: LD_VAR 0 2
77140: PPUSH
77141: CALL_OW 254
77145: ST_TO_ADDR
// r := 4 ;
77146: LD_ADDR_VAR 0 9
77150: PUSH
77151: LD_INT 4
77153: ST_TO_ADDR
// for i := 1 to 5 do
77154: LD_ADDR_VAR 0 10
77158: PUSH
77159: DOUBLE
77160: LD_INT 1
77162: DEC
77163: ST_TO_ADDR
77164: LD_INT 5
77166: PUSH
77167: FOR_TO
77168: IFFALSE 77325
// begin _x := ShiftX ( x , d , r + i ) ;
77170: LD_ADDR_VAR 0 5
77174: PUSH
77175: LD_VAR 0 4
77179: PPUSH
77180: LD_VAR 0 8
77184: PPUSH
77185: LD_VAR 0 9
77189: PUSH
77190: LD_VAR 0 10
77194: PLUS
77195: PPUSH
77196: CALL_OW 272
77200: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77201: LD_ADDR_VAR 0 7
77205: PUSH
77206: LD_VAR 0 6
77210: PPUSH
77211: LD_VAR 0 8
77215: PPUSH
77216: LD_VAR 0 9
77220: PUSH
77221: LD_VAR 0 10
77225: PLUS
77226: PPUSH
77227: CALL_OW 273
77231: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77232: LD_VAR 0 5
77236: PPUSH
77237: LD_VAR 0 7
77241: PPUSH
77242: CALL_OW 488
77246: PUSH
77247: LD_VAR 0 5
77251: PPUSH
77252: LD_VAR 0 7
77256: PPUSH
77257: CALL_OW 428
77261: PPUSH
77262: CALL_OW 247
77266: PUSH
77267: LD_INT 3
77269: PUSH
77270: LD_INT 2
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: IN
77277: NOT
77278: AND
77279: IFFALSE 77323
// begin ComMoveXY ( unit , _x , _y ) ;
77281: LD_VAR 0 1
77285: PPUSH
77286: LD_VAR 0 5
77290: PPUSH
77291: LD_VAR 0 7
77295: PPUSH
77296: CALL_OW 111
// result := [ _x , _y ] ;
77300: LD_ADDR_VAR 0 3
77304: PUSH
77305: LD_VAR 0 5
77309: PUSH
77310: LD_VAR 0 7
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: ST_TO_ADDR
// exit ;
77319: POP
77320: POP
77321: GO 77327
// end ; end ;
77323: GO 77167
77325: POP
77326: POP
// end ;
77327: LD_VAR 0 3
77331: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77332: LD_INT 0
77334: PPUSH
77335: PPUSH
77336: PPUSH
// result := 0 ;
77337: LD_ADDR_VAR 0 3
77341: PUSH
77342: LD_INT 0
77344: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77345: LD_VAR 0 1
77349: PUSH
77350: LD_INT 0
77352: LESS
77353: PUSH
77354: LD_VAR 0 1
77358: PUSH
77359: LD_INT 8
77361: GREATER
77362: OR
77363: PUSH
77364: LD_VAR 0 2
77368: PUSH
77369: LD_INT 0
77371: LESS
77372: OR
77373: PUSH
77374: LD_VAR 0 2
77378: PUSH
77379: LD_INT 8
77381: GREATER
77382: OR
77383: IFFALSE 77387
// exit ;
77385: GO 77462
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77387: LD_ADDR_VAR 0 4
77391: PUSH
77392: LD_INT 22
77394: PUSH
77395: LD_VAR 0 2
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: PPUSH
77404: CALL_OW 69
77408: PUSH
77409: FOR_IN
77410: IFFALSE 77460
// begin un := UnitShoot ( i ) ;
77412: LD_ADDR_VAR 0 5
77416: PUSH
77417: LD_VAR 0 4
77421: PPUSH
77422: CALL_OW 504
77426: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77427: LD_VAR 0 5
77431: PPUSH
77432: CALL_OW 255
77436: PUSH
77437: LD_VAR 0 1
77441: EQUAL
77442: IFFALSE 77458
// begin result := un ;
77444: LD_ADDR_VAR 0 3
77448: PUSH
77449: LD_VAR 0 5
77453: ST_TO_ADDR
// exit ;
77454: POP
77455: POP
77456: GO 77462
// end ; end ;
77458: GO 77409
77460: POP
77461: POP
// end ;
77462: LD_VAR 0 3
77466: RET
// export function GetCargoBay ( units ) ; begin
77467: LD_INT 0
77469: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77470: LD_ADDR_VAR 0 2
77474: PUSH
77475: LD_VAR 0 1
77479: PPUSH
77480: LD_INT 2
77482: PUSH
77483: LD_INT 34
77485: PUSH
77486: LD_INT 12
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: LD_INT 34
77495: PUSH
77496: LD_INT 51
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_INT 34
77505: PUSH
77506: LD_INT 32
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: PUSH
77513: LD_INT 34
77515: PUSH
77516: LD_EXP 53
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: PPUSH
77532: CALL_OW 72
77536: ST_TO_ADDR
// end ; end_of_file
77537: LD_VAR 0 2
77541: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77542: LD_VAR 0 1
77546: PUSH
77547: LD_INT 200
77549: DOUBLE
77550: GREATEREQUAL
77551: IFFALSE 77559
77553: LD_INT 299
77555: DOUBLE
77556: LESSEQUAL
77557: IFTRUE 77561
77559: GO 77593
77561: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77562: LD_VAR 0 1
77566: PPUSH
77567: LD_VAR 0 2
77571: PPUSH
77572: LD_VAR 0 3
77576: PPUSH
77577: LD_VAR 0 4
77581: PPUSH
77582: LD_VAR 0 5
77586: PPUSH
77587: CALL 36003 0 5
77591: GO 77670
77593: LD_INT 300
77595: DOUBLE
77596: GREATEREQUAL
77597: IFFALSE 77605
77599: LD_INT 399
77601: DOUBLE
77602: LESSEQUAL
77603: IFTRUE 77607
77605: GO 77669
77607: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77608: LD_VAR 0 1
77612: PPUSH
77613: LD_VAR 0 2
77617: PPUSH
77618: LD_VAR 0 3
77622: PPUSH
77623: LD_VAR 0 4
77627: PPUSH
77628: LD_VAR 0 5
77632: PPUSH
77633: LD_VAR 0 6
77637: PPUSH
77638: LD_VAR 0 7
77642: PPUSH
77643: LD_VAR 0 8
77647: PPUSH
77648: LD_VAR 0 9
77652: PPUSH
77653: LD_VAR 0 10
77657: PPUSH
77658: LD_VAR 0 11
77662: PPUSH
77663: CALL 33891 0 11
77667: GO 77670
77669: POP
// end ;
77670: PPOPN 11
77672: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77673: LD_VAR 0 1
77677: PPUSH
77678: LD_VAR 0 2
77682: PPUSH
77683: LD_VAR 0 3
77687: PPUSH
77688: LD_VAR 0 4
77692: PPUSH
77693: LD_VAR 0 5
77697: PPUSH
77698: CALL 35985 0 5
// end ; end_of_file
77702: PPOPN 5
77704: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77705: LD_VAR 0 1
77709: PPUSH
77710: LD_VAR 0 2
77714: PPUSH
77715: LD_VAR 0 3
77719: PPUSH
77720: LD_VAR 0 4
77724: PPUSH
77725: LD_VAR 0 5
77729: PPUSH
77730: LD_VAR 0 6
77734: PPUSH
77735: CALL 22699 0 6
// end ;
77739: PPOPN 6
77741: END
