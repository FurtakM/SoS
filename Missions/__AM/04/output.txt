// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export reliefOfCommand ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4659 0 0
// PrepareRussianBase ;
  29: CALL 2948 0 0
// PrepareRussianCommander ;
  33: CALL 2899 0 0
// PrepareHeroes ;
  37: CALL 473 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8278 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 49
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 50
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode := 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible := 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack := 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson := 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase := 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer := 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus := 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer := 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog := 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog := 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog := 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil := 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower := 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable := 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter := 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor := true ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// reliefOfCommand := false ;
 298: LD_ADDR_EXP 48
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// escapeAvalaible = 0 ;
 306: LD_ADDR_EXP 40
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// specAttack := false ;
 314: LD_ADDR_EXP 47
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// ruMobile := [ ] ;
 322: LD_ADDR_EXP 46
 326: PUSH
 327: EMPTY
 328: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 329: LD_ADDR_EXP 43
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: LD_INT 5
 342: PUSH
 343: LD_INT 6
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: LD_OWVAR 67
 356: ARRAY
 357: ST_TO_ADDR
// end ;
 358: LD_VAR 0 1
 362: RET
// every 0 0$1 trigger debugMode do var i ;
 363: LD_EXP 45
 367: IFFALSE 429
 369: GO 371
 371: DISABLE
 372: LD_INT 0
 374: PPUSH
// begin enable ;
 375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 376: LD_ADDR_VAR 0 1
 380: PUSH
 381: LD_INT 22
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: PUSH
 391: LD_INT 21
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 427
// SetLives ( i , 1000 ) ;
 413: LD_VAR 0 1
 417: PPUSH
 418: LD_INT 1000
 420: PPUSH
 421: CALL_OW 234
 425: GO 410
 427: POP
 428: POP
// end ;
 429: PPOPN 1
 431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 34
 444: PUSH
 445: LD_INT 44
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PPUSH
 456: CALL_OW 69
 460: IFFALSE 472
 462: GO 464
 464: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 465: LD_STRING ACH_GUN
 467: PPUSH
 468: CALL_OW 543
 472: END
// export function PrepareHeroes ; var i , tmp ; begin
 473: LD_INT 0
 475: PPUSH
 476: PPUSH
 477: PPUSH
// uc_side = 1 ;
 478: LD_ADDR_OWVAR 20
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// uc_nation = 1 ;
 486: LD_ADDR_OWVAR 21
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 494: LD_ADDR_EXP 1
 498: PUSH
 499: LD_STRING JMM
 501: PPUSH
 502: LD_EXP 45
 506: NOT
 507: PPUSH
 508: LD_EXP 50
 512: PPUSH
 513: CALL 40719 0 3
 517: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 518: LD_ADDR_EXP 4
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 45
 530: NOT
 531: PPUSH
 532: LD_EXP 50
 536: PPUSH
 537: CALL 40719 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 50
 557: PPUSH
 558: CALL 40719 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 50
 578: PPUSH
 579: CALL 40719 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 50
 599: PPUSH
 600: CALL 40719 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 50
 620: PPUSH
 621: CALL 40719 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 50
 641: PPUSH
 642: CALL 40719 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 50
 662: PPUSH
 663: CALL 40719 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 50
 683: PPUSH
 684: CALL 40719 0 3
 688: ST_TO_ADDR
// if not Lisa then
 689: LD_EXP 4
 693: NOT
 694: IFFALSE 717
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 2
 700: PUSH
 701: LD_STRING Bobby
 703: PPUSH
 704: LD_INT 1
 706: PPUSH
 707: LD_EXP 50
 711: PPUSH
 712: CALL 40719 0 3
 716: ST_TO_ADDR
// if not Lisa and not Bobby then
 717: LD_EXP 4
 721: NOT
 722: PUSH
 723: LD_EXP 2
 727: NOT
 728: AND
 729: IFFALSE 752
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 731: LD_ADDR_EXP 3
 735: PUSH
 736: LD_STRING Cyrus
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: LD_EXP 50
 746: PPUSH
 747: CALL 40719 0 3
 751: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 752: LD_EXP 4
 756: NOT
 757: PUSH
 758: LD_EXP 2
 762: NOT
 763: AND
 764: PUSH
 765: LD_EXP 3
 769: NOT
 770: AND
 771: IFFALSE 870
// begin tmp = CreateCharacterSet ( 03_others ) ;
 773: LD_ADDR_VAR 0 3
 777: PUSH
 778: LD_STRING 03_others
 780: PPUSH
 781: CALL_OW 31
 785: ST_TO_ADDR
// if tmp then
 786: LD_VAR 0 3
 790: IFFALSE 847
// begin RandomBeforeMission = tmp [ 1 ] ;
 792: LD_ADDR_EXP 6
 796: PUSH
 797: LD_VAR 0 3
 801: PUSH
 802: LD_INT 1
 804: ARRAY
 805: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 40
// if tmp > 1 then
 813: LD_VAR 0 3
 817: PUSH
 818: LD_INT 1
 820: GREATER
 821: IFFALSE 845
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 823: LD_VAR 0 3
 827: PUSH
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 1
 835: ARRAY
 836: DIFF
 837: PPUSH
 838: LD_STRING 03_others
 840: PPUSH
 841: CALL_OW 38
// end else
 845: GO 870
// begin PrepareHuman ( false , 1 , 3 ) ;
 847: LD_INT 0
 849: PPUSH
 850: LD_INT 1
 852: PPUSH
 853: LD_INT 3
 855: PPUSH
 856: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 860: LD_ADDR_EXP 6
 864: PUSH
 865: CALL_OW 44
 869: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 870: LD_ADDR_OWVAR 20
 874: PUSH
 875: LD_INT 4
 877: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 878: LD_ADDR_EXP 13
 882: PUSH
 883: LD_STRING Donaldson
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_EXP 50
 893: PPUSH
 894: CALL 40719 0 3
 898: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 899: LD_ADDR_EXP 5
 903: PUSH
 904: LD_STRING Frank
 906: PPUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_EXP 50
 914: PPUSH
 915: CALL 40719 0 3
 919: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 920: LD_EXP 1
 924: PPUSH
 925: LD_INT 32
 927: PPUSH
 928: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 932: LD_EXP 7
 936: PPUSH
 937: LD_INT 1
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 947: LD_EXP 7
 951: PPUSH
 952: LD_INT 32
 954: PPUSH
 955: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 959: LD_EXP 8
 963: PPUSH
 964: LD_INT 2
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 974: LD_EXP 9
 978: PPUSH
 979: LD_INT 2
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 989: LD_EXP 12
 993: PPUSH
 994: LD_INT 2
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1004: LD_EXP 10
1008: PPUSH
1009: LD_INT 2
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1019: LD_EXP 11
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1034: LD_EXP 4
1038: PPUSH
1039: LD_INT 2
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// if Lisa = false then
1049: LD_EXP 4
1053: PUSH
1054: LD_INT 0
1056: EQUAL
1057: IFFALSE 1074
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1059: LD_EXP 2
1063: PPUSH
1064: LD_INT 2
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 49
// if Lisa = false and Bobby = false then
1074: LD_EXP 4
1078: PUSH
1079: LD_INT 0
1081: EQUAL
1082: PUSH
1083: LD_EXP 2
1087: PUSH
1088: LD_INT 0
1090: EQUAL
1091: AND
1092: IFFALSE 1109
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1094: LD_EXP 3
1098: PPUSH
1099: LD_INT 2
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1109: LD_EXP 4
1113: PUSH
1114: LD_INT 0
1116: EQUAL
1117: PUSH
1118: LD_EXP 2
1122: PUSH
1123: LD_INT 0
1125: EQUAL
1126: AND
1127: PUSH
1128: LD_EXP 3
1132: PUSH
1133: LD_INT 0
1135: EQUAL
1136: AND
1137: IFFALSE 1154
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1139: LD_EXP 6
1143: PPUSH
1144: LD_INT 2
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: CALL_OW 49
// end ;
1154: LD_VAR 0 1
1158: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1159: LD_INT 0
1161: PPUSH
1162: PPUSH
1163: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1164: LD_EXP 13
1168: PPUSH
1169: LD_INT 10
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// if Frank then
1179: LD_EXP 5
1183: IFFALSE 1200
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1185: LD_EXP 5
1189: PPUSH
1190: LD_INT 10
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// uc_nation = 1 ;
1200: LD_ADDR_OWVAR 21
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// uc_side = 4 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 4
1215: ST_TO_ADDR
// hc_class := 3 ;
1216: LD_ADDR_OWVAR 28
1220: PUSH
1221: LD_INT 3
1223: ST_TO_ADDR
// hc_sex := sex_male ;
1224: LD_ADDR_OWVAR 27
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1232: LD_ADDR_OWVAR 33
1236: PUSH
1237: LD_STRING SecondCharsGal
1239: ST_TO_ADDR
// hc_face_number := 53 ;
1240: LD_ADDR_OWVAR 34
1244: PUSH
1245: LD_INT 53
1247: ST_TO_ADDR
// hc_name := Freddie Warner ;
1248: LD_ADDR_OWVAR 26
1252: PUSH
1253: LD_STRING Freddie Warner
1255: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1256: LD_ADDR_OWVAR 29
1260: PUSH
1261: LD_INT 8
1263: PUSH
1264: LD_INT 11
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
1271: LD_ADDR_OWVAR 30
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 0
1281: PUSH
1282: LD_INT 2
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1294: LD_ADDR_OWVAR 31
1298: PUSH
1299: LD_INT 1
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 2
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: ST_TO_ADDR
// un = CreateHuman ;
1317: LD_ADDR_VAR 0 3
1321: PUSH
1322: CALL_OW 44
1326: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1327: LD_VAR 0 3
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 49
// hc_class := 1 ;
1342: LD_ADDR_OWVAR 28
1346: PUSH
1347: LD_INT 1
1349: ST_TO_ADDR
// hc_sex := sex_male ;
1350: LD_ADDR_OWVAR 27
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1358: LD_ADDR_OWVAR 33
1362: PUSH
1363: LD_STRING SecondCharsGal
1365: ST_TO_ADDR
// hc_face_number := 56 ;
1366: LD_ADDR_OWVAR 34
1370: PUSH
1371: LD_INT 56
1373: ST_TO_ADDR
// hc_name := Mel Brennan ;
1374: LD_ADDR_OWVAR 26
1378: PUSH
1379: LD_STRING Mel Brennan
1381: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1382: LD_ADDR_OWVAR 29
1386: PUSH
1387: LD_INT 12
1389: PUSH
1390: LD_INT 11
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
1397: LD_ADDR_OWVAR 30
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: LD_INT 0
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1420: LD_ADDR_OWVAR 31
1424: PUSH
1425: LD_INT 4
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: ST_TO_ADDR
// un = CreateHuman ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: CALL_OW 44
1452: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1453: LD_VAR 0 3
1457: PPUSH
1458: LD_INT 10
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// hc_class := 1 ;
1468: LD_ADDR_OWVAR 28
1472: PUSH
1473: LD_INT 1
1475: ST_TO_ADDR
// hc_sex := sex_male ;
1476: LD_ADDR_OWVAR 27
1480: PUSH
1481: LD_INT 1
1483: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1484: LD_ADDR_OWVAR 33
1488: PUSH
1489: LD_STRING AmGalRemake
1491: ST_TO_ADDR
// hc_face_number := 5 ;
1492: LD_ADDR_OWVAR 34
1496: PUSH
1497: LD_INT 5
1499: ST_TO_ADDR
// hc_name := Bob Joplin ;
1500: LD_ADDR_OWVAR 26
1504: PUSH
1505: LD_STRING Bob Joplin
1507: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1508: LD_ADDR_OWVAR 29
1512: PUSH
1513: LD_INT 10
1515: PUSH
1516: LD_INT 11
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
1523: LD_ADDR_OWVAR 30
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1546: LD_ADDR_OWVAR 31
1550: PUSH
1551: LD_INT 3
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// un = CreateHuman ;
1569: LD_ADDR_VAR 0 3
1573: PUSH
1574: CALL_OW 44
1578: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1579: LD_VAR 0 3
1583: PPUSH
1584: LD_INT 10
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 49
// hc_class := 3 ;
1594: LD_ADDR_OWVAR 28
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// hc_sex := sex_female ;
1602: LD_ADDR_OWVAR 27
1606: PUSH
1607: LD_INT 2
1609: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1610: LD_ADDR_OWVAR 33
1614: PUSH
1615: LD_STRING AmGalRemake
1617: ST_TO_ADDR
// hc_face_number := 8 ;
1618: LD_ADDR_OWVAR 34
1622: PUSH
1623: LD_INT 8
1625: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1626: LD_ADDR_OWVAR 26
1630: PUSH
1631: LD_STRING Elizabeth Whitney
1633: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1634: LD_ADDR_OWVAR 29
1638: PUSH
1639: LD_INT 9
1641: PUSH
1642: LD_INT 11
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
1649: LD_ADDR_OWVAR 30
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 4 , 1 ] ;
1672: LD_ADDR_OWVAR 31
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 4
1685: PUSH
1686: LD_INT 1
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// un = CreateHuman ;
1695: LD_ADDR_VAR 0 3
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1705: LD_VAR 0 3
1709: PPUSH
1710: LD_INT 10
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// InitHc ;
1720: CALL_OW 19
// end ;
1724: LD_VAR 0 1
1728: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
1734: PPUSH
// uc_nation = 1 ;
1735: LD_ADDR_OWVAR 21
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// uc_side = 1 ;
1743: LD_ADDR_OWVAR 20
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1751: LD_ADDR_OWVAR 37
1755: PUSH
1756: LD_INT 2
1758: ST_TO_ADDR
// vc_engine := engine_combustion ;
1759: LD_ADDR_OWVAR 39
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// vc_control := control_manual ;
1767: LD_ADDR_OWVAR 38
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1775: LD_ADDR_OWVAR 41
1779: PUSH
1780: LD_INT 65
1782: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 5
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 4
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PUSH
1806: LD_OWVAR 67
1810: ARRAY
1811: ST_TO_ADDR
// veh := CreateVehicle ;
1812: LD_ADDR_VAR 0 5
1816: PUSH
1817: CALL_OW 45
1821: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1822: LD_VAR 0 5
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1834: LD_INT 17
1836: PPUSH
1837: LD_INT 4
1839: PPUSH
1840: CALL_OW 428
1844: PUSH
1845: LD_INT 0
1847: EQUAL
1848: IFFALSE 1870
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 17
1857: PPUSH
1858: LD_INT 4
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL_OW 48
1868: GO 1888
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1870: LD_VAR 0 5
1874: PPUSH
1875: LD_INT 23
1877: PPUSH
1878: LD_INT 10
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 48
// hc_class := 1 ;
1888: LD_ADDR_OWVAR 28
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// hc_sex := sex_male ;
1896: LD_ADDR_OWVAR 27
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1904: LD_ADDR_OWVAR 33
1908: PUSH
1909: LD_STRING SecondCharsGal
1911: ST_TO_ADDR
// hc_face_number := 59 ;
1912: LD_ADDR_OWVAR 34
1916: PUSH
1917: LD_INT 59
1919: ST_TO_ADDR
// hc_name := Max Gray ;
1920: LD_ADDR_OWVAR 26
1924: PUSH
1925: LD_STRING Max Gray
1927: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1928: LD_ADDR_OWVAR 29
1932: PUSH
1933: LD_INT 9
1935: PUSH
1936: LD_INT 11
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
1943: LD_ADDR_OWVAR 30
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 1
1953: PUSH
1954: LD_INT 0
1956: PUSH
1957: LD_INT 0
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 4
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: LD_INT 0
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// un = CreateHuman ;
1989: LD_ADDR_VAR 0 4
1993: PUSH
1994: CALL_OW 44
1998: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1999: LD_VAR 0 4
2003: PPUSH
2004: LD_INT 11
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// hc_class := 2 ;
2014: LD_ADDR_OWVAR 28
2018: PUSH
2019: LD_INT 2
2021: ST_TO_ADDR
// hc_sex := sex_male ;
2022: LD_ADDR_OWVAR 27
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2030: LD_ADDR_OWVAR 33
2034: PUSH
2035: LD_STRING SecondCharsGal
2037: ST_TO_ADDR
// hc_face_number := 50 ;
2038: LD_ADDR_OWVAR 34
2042: PUSH
2043: LD_INT 50
2045: ST_TO_ADDR
// hc_name := Frank Hughes ;
2046: LD_ADDR_OWVAR 26
2050: PUSH
2051: LD_STRING Frank Hughes
2053: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2054: LD_ADDR_OWVAR 29
2058: PUSH
2059: LD_INT 10
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2069: LD_ADDR_OWVAR 30
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: LD_INT 2
2079: PUSH
2080: LD_INT 0
2082: PUSH
2083: LD_INT 0
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: ST_TO_ADDR
// hc_skills := [ 1 , 4 , 0 , 1 ] ;
2092: LD_ADDR_OWVAR 31
2096: PUSH
2097: LD_INT 1
2099: PUSH
2100: LD_INT 4
2102: PUSH
2103: LD_INT 0
2105: PUSH
2106: LD_INT 1
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: ST_TO_ADDR
// un = CreateHuman ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: CALL_OW 44
2124: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2125: LD_VAR 0 4
2129: PPUSH
2130: LD_INT 11
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// hc_class := 1 ;
2140: LD_ADDR_OWVAR 28
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_sex := sex_male ;
2148: LD_ADDR_OWVAR 27
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2156: LD_ADDR_OWVAR 33
2160: PUSH
2161: LD_STRING SecondCharsGal
2163: ST_TO_ADDR
// hc_face_number := 54 ;
2164: LD_ADDR_OWVAR 34
2168: PUSH
2169: LD_INT 54
2171: ST_TO_ADDR
// hc_name := Luigi Ghibellini ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING Luigi Ghibellini
2179: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2180: LD_ADDR_OWVAR 29
2184: PUSH
2185: LD_INT 11
2187: PUSH
2188: LD_INT 11
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 1 ] ;
2195: LD_ADDR_OWVAR 30
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 0
2205: PUSH
2206: LD_INT 1
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 2 ] ;
2218: LD_ADDR_OWVAR 31
2222: PUSH
2223: LD_INT 2
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: ST_TO_ADDR
// un = CreateHuman ;
2241: LD_ADDR_VAR 0 4
2245: PUSH
2246: CALL_OW 44
2250: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2251: LD_VAR 0 4
2255: PPUSH
2256: LD_INT 11
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// hc_class := 3 ;
2266: LD_ADDR_OWVAR 28
2270: PUSH
2271: LD_INT 3
2273: ST_TO_ADDR
// hc_sex := sex_male ;
2274: LD_ADDR_OWVAR 27
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2282: LD_ADDR_OWVAR 33
2286: PUSH
2287: LD_STRING AmGalRemake
2289: ST_TO_ADDR
// hc_face_number := 6 ;
2290: LD_ADDR_OWVAR 34
2294: PUSH
2295: LD_INT 6
2297: ST_TO_ADDR
// hc_name := Leon Carter ;
2298: LD_ADDR_OWVAR 26
2302: PUSH
2303: LD_STRING Leon Carter
2305: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2306: LD_ADDR_OWVAR 29
2310: PUSH
2311: LD_INT 10
2313: PUSH
2314: LD_INT 9
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
2321: LD_ADDR_OWVAR 30
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 0
2331: PUSH
2332: LD_INT 2
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2344: LD_ADDR_OWVAR 31
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: LD_INT 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: ST_TO_ADDR
// un = CreateHuman ;
2367: LD_ADDR_VAR 0 4
2371: PUSH
2372: CALL_OW 44
2376: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2377: LD_VAR 0 4
2381: PPUSH
2382: LD_VAR 0 5
2386: PPUSH
2387: CALL_OW 52
// if count = 4 then
2391: LD_VAR 0 1
2395: PUSH
2396: LD_INT 4
2398: EQUAL
2399: IFFALSE 2527
// begin hc_class := 1 ;
2401: LD_ADDR_OWVAR 28
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// hc_sex := sex_male ;
2409: LD_ADDR_OWVAR 27
2413: PUSH
2414: LD_INT 1
2416: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2417: LD_ADDR_OWVAR 33
2421: PUSH
2422: LD_STRING SecondCharsGal
2424: ST_TO_ADDR
// hc_face_number := 34 ;
2425: LD_ADDR_OWVAR 34
2429: PUSH
2430: LD_INT 34
2432: ST_TO_ADDR
// hc_name := Ian Hill ;
2433: LD_ADDR_OWVAR 26
2437: PUSH
2438: LD_STRING Ian Hill
2440: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2441: LD_ADDR_OWVAR 29
2445: PUSH
2446: LD_INT 10
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2456: LD_ADDR_OWVAR 30
2460: PUSH
2461: LD_INT 3
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: LD_INT 0
2469: PUSH
2470: LD_INT 0
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2479: LD_ADDR_OWVAR 31
2483: PUSH
2484: LD_INT 4
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: ST_TO_ADDR
// un = CreateHuman ;
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: CALL_OW 44
2511: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2512: LD_VAR 0 4
2516: PPUSH
2517: LD_INT 11
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: CALL_OW 49
// end ; if count = 5 then
2527: LD_VAR 0 1
2531: PUSH
2532: LD_INT 5
2534: EQUAL
2535: IFFALSE 2789
// begin hc_class := 1 ;
2537: LD_ADDR_OWVAR 28
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// hc_sex := sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2553: LD_ADDR_OWVAR 33
2557: PUSH
2558: LD_STRING SecondCharsGal
2560: ST_TO_ADDR
// hc_face_number := 34 ;
2561: LD_ADDR_OWVAR 34
2565: PUSH
2566: LD_INT 34
2568: ST_TO_ADDR
// hc_name := Ian Hill ;
2569: LD_ADDR_OWVAR 26
2573: PUSH
2574: LD_STRING Ian Hill
2576: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2577: LD_ADDR_OWVAR 29
2581: PUSH
2582: LD_INT 10
2584: PUSH
2585: LD_INT 12
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2592: LD_ADDR_OWVAR 30
2596: PUSH
2597: LD_INT 3
2599: PUSH
2600: LD_INT 0
2602: PUSH
2603: LD_INT 0
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2615: LD_ADDR_OWVAR 31
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: LD_INT 1
2625: PUSH
2626: LD_INT 1
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: ST_TO_ADDR
// un = CreateHuman ;
2638: LD_ADDR_VAR 0 4
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2648: LD_VAR 0 4
2652: PPUSH
2653: LD_INT 11
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// hc_class := 1 ;
2663: LD_ADDR_OWVAR 28
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// hc_sex := sex_female ;
2671: LD_ADDR_OWVAR 27
2675: PUSH
2676: LD_INT 2
2678: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2679: LD_ADDR_OWVAR 33
2683: PUSH
2684: LD_STRING SecondCharsGal
2686: ST_TO_ADDR
// hc_face_number := 41 ;
2687: LD_ADDR_OWVAR 34
2691: PUSH
2692: LD_INT 41
2694: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2695: LD_ADDR_OWVAR 26
2699: PUSH
2700: LD_STRING Kate Wadsworth
2702: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2703: LD_ADDR_OWVAR 29
2707: PUSH
2708: LD_INT 9
2710: PUSH
2711: LD_INT 9
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2718: LD_ADDR_OWVAR 30
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 0
2731: PUSH
2732: LD_INT 0
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2741: LD_ADDR_OWVAR 31
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: LD_INT 3
2751: PUSH
2752: LD_INT 1
2754: PUSH
2755: LD_INT 0
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: ST_TO_ADDR
// un = CreateHuman ;
2764: LD_ADDR_VAR 0 4
2768: PUSH
2769: CALL_OW 44
2773: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2774: LD_VAR 0 4
2778: PPUSH
2779: LD_INT 11
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2789: LD_INT 11
2791: PPUSH
2792: LD_INT 22
2794: PUSH
2795: LD_INT 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 21
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 26
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: PPUSH
2827: CALL_OW 70
2831: PUSH
2832: LD_INT 1
2834: ARRAY
2835: PPUSH
2836: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2840: LD_INT 11
2842: PPUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: LD_INT 21
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_INT 26
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 70
2882: PUSH
2883: LD_INT 1
2885: ARRAY
2886: PPUSH
2887: LD_STRING D6-Sol3-1
2889: PPUSH
2890: CALL_OW 88
// end ; end_of_file
2894: LD_VAR 0 2
2898: RET
// export function PrepareRussianCommander ; begin
2899: LD_INT 0
2901: PPUSH
// uc_side = 3 ;
2902: LD_ADDR_OWVAR 20
2906: PUSH
2907: LD_INT 3
2909: ST_TO_ADDR
// uc_nation = 3 ;
2910: LD_ADDR_OWVAR 21
2914: PUSH
2915: LD_INT 3
2917: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2918: LD_ADDR_EXP 15
2922: PUSH
2923: LD_STRING Stolypin
2925: PPUSH
2926: CALL_OW 25
2930: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 21
2938: PPUSH
2939: CALL_OW 52
// end ;
2943: LD_VAR 0 1
2947: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2948: LD_INT 0
2950: PPUSH
2951: PPUSH
2952: PPUSH
2953: PPUSH
// if Difficulty > 1 then
2954: LD_OWVAR 67
2958: PUSH
2959: LD_INT 1
2961: GREATER
2962: IFFALSE 3072
// begin uc_side := 3 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 3
2971: ST_TO_ADDR
// uc_nation := 3 ;
2972: LD_ADDR_OWVAR 21
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// InitHc_All ( ) ;
2980: CALL_OW 584
// InitBc ;
2984: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
2988: LD_INT 0
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 380
// bc_type := b_breastwork ;
3001: LD_ADDR_OWVAR 42
3005: PUSH
3006: LD_INT 31
3008: ST_TO_ADDR
// bc_level := 4 ;
3009: LD_ADDR_OWVAR 43
3013: PUSH
3014: LD_INT 4
3016: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 100
3024: PPUSH
3025: LD_INT 58
3027: PPUSH
3028: LD_INT 2
3030: PPUSH
3031: CALL_OW 47
3035: ST_TO_ADDR
// un := CreateHuman ;
3036: LD_ADDR_VAR 0 4
3040: PUSH
3041: CALL_OW 44
3045: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_INT 5
3053: PPUSH
3054: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3072: LD_INT 3
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: LD_INT 22
3080: PPUSH
3081: LD_EXP 16
3085: PPUSH
3086: LD_EXP 17
3090: PPUSH
3091: CALL_OW 12
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 3
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 5
3107: PUSH
3108: LD_INT 6
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: LD_OWVAR 67
3121: ARRAY
3122: PPUSH
3123: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 21
3135: PPUSH
3136: LD_EXP 16
3140: PPUSH
3141: LD_EXP 17
3145: PPUSH
3146: CALL_OW 12
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_EXP 16
3174: PPUSH
3175: LD_EXP 17
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3195: LD_INT 3
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 24
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: LD_INT 3
3221: PPUSH
3222: LD_INT 5
3224: PPUSH
3225: CALL 4325 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 3
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 30
3246: PUSH
3247: LD_INT 32
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PUSH
3263: FOR_IN
3264: IFFALSE 3304
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3266: LD_INT 3
3268: PPUSH
3269: LD_INT 3
3271: PPUSH
3272: LD_VAR 0 2
3276: PPUSH
3277: LD_EXP 16
3281: PPUSH
3282: LD_EXP 17
3286: PPUSH
3287: CALL_OW 12
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: CALL 4325 0 6
3302: GO 3263
3304: POP
3305: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3306: LD_ADDR_VAR 0 2
3310: PUSH
3311: LD_INT 22
3313: PUSH
3314: LD_INT 3
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: LD_INT 30
3323: PUSH
3324: LD_INT 31
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: PUSH
3340: FOR_IN
3341: IFFALSE 3369
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3343: LD_EXP 16
3347: PPUSH
3348: LD_EXP 17
3352: PPUSH
3353: CALL_OW 12
3357: PPUSH
3358: LD_VAR 0 2
3362: PPUSH
3363: CALL 4434 0 2
3367: GO 3340
3369: POP
3370: POP
// end ;
3371: LD_VAR 0 1
3375: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3376: LD_INT 0
3378: PPUSH
3379: PPUSH
3380: PPUSH
3381: PPUSH
// uc_side = 6 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 6
3389: ST_TO_ADDR
// uc_nation = 3 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 3
3397: ST_TO_ADDR
// InitHC_All ( ) ;
3398: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 1
3414: PUSH
3415: LD_INT 2
3417: PUSH
3418: LD_INT 2
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PUSH
3430: LD_OWVAR 67
3434: ARRAY
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3605
// begin vc_engine = 1 ;
3439: LD_ADDR_OWVAR 39
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// vc_control = 1 ;
3447: LD_ADDR_OWVAR 38
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3455: LD_ADDR_OWVAR 40
3459: PUSH
3460: LD_INT 42
3462: PUSH
3463: LD_INT 42
3465: PUSH
3466: LD_INT 43
3468: PUSH
3469: LD_INT 43
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_OWVAR 67
3482: ARRAY
3483: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3484: LD_ADDR_OWVAR 37
3488: PUSH
3489: LD_INT 21
3491: PUSH
3492: LD_INT 22
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_OWVAR 67
3511: ARRAY
3512: ST_TO_ADDR
// veh = CreateVehicle ;
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: CALL_OW 45
3522: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3523: LD_VAR 0 3
3527: PPUSH
3528: LD_INT 3
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 49
// hc_gallery =  ;
3538: LD_ADDR_OWVAR 33
3542: PUSH
3543: LD_STRING 
3545: ST_TO_ADDR
// hc_name =  ;
3546: LD_ADDR_OWVAR 26
3550: PUSH
3551: LD_STRING 
3553: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 3
3559: PPUSH
3560: LD_EXP 16
3564: PPUSH
3565: LD_EXP 17
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: CALL_OW 380
// un = CreateHuman ;
3579: LD_ADDR_VAR 0 4
3583: PUSH
3584: CALL_OW 44
3588: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3589: LD_VAR 0 4
3593: PPUSH
3594: LD_VAR 0 3
3598: PPUSH
3599: CALL_OW 52
// end ;
3603: GO 3436
3605: POP
3606: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: LD_EXP 16
3617: PPUSH
3618: LD_EXP 17
3622: PPUSH
3623: CALL_OW 12
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PPUSH
3632: CALL_OW 380
// un = CreateHuman ;
3636: LD_ADDR_VAR 0 4
3640: PUSH
3641: CALL_OW 44
3645: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3646: LD_VAR 0 4
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: LD_INT 0
3656: PPUSH
3657: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 4
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: LD_EXP 17
3676: PPUSH
3677: CALL_OW 12
3681: PUSH
3682: LD_INT 2
3684: PLUS
3685: PPUSH
3686: CALL_OW 380
// un = CreateHuman ;
3690: LD_ADDR_VAR 0 4
3694: PUSH
3695: CALL_OW 44
3699: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3700: LD_VAR 0 4
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 0
3710: PPUSH
3711: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3715: LD_ADDR_VAR 0 2
3719: PUSH
3720: DOUBLE
3721: LD_INT 1
3723: DEC
3724: ST_TO_ADDR
3725: LD_INT 2
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 3
3733: PUSH
3734: LD_INT 4
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_OWVAR 67
3747: ARRAY
3748: PUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 12
3759: PLUS
3760: PUSH
3761: FOR_TO
3762: IFFALSE 3832
// begin hc_gallery =  ;
3764: LD_ADDR_OWVAR 33
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// hc_name =  ;
3772: LD_ADDR_OWVAR 26
3776: PUSH
3777: LD_STRING 
3779: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3780: LD_INT 0
3782: PPUSH
3783: LD_INT 1
3785: PPUSH
3786: LD_EXP 16
3790: PPUSH
3791: LD_EXP 17
3795: PPUSH
3796: CALL_OW 12
3800: PPUSH
3801: CALL_OW 380
// un = CreateHuman ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: CALL_OW 44
3814: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_INT 3
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: CALL_OW 49
// end ;
3830: GO 3761
3832: POP
3833: POP
// vc_engine = 1 ;
3834: LD_ADDR_OWVAR 39
3838: PUSH
3839: LD_INT 1
3841: ST_TO_ADDR
// vc_control = 1 ;
3842: LD_ADDR_OWVAR 38
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// vc_weapon = 51 ;
3850: LD_ADDR_OWVAR 40
3854: PUSH
3855: LD_INT 51
3857: ST_TO_ADDR
// vc_chassis = 22 ;
3858: LD_ADDR_OWVAR 37
3862: PUSH
3863: LD_INT 22
3865: ST_TO_ADDR
// veh = CreateVehicle ;
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: CALL_OW 45
3875: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: LD_INT 3
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 100
3901: PPUSH
3902: CALL_OW 290
// hc_gallery =  ;
3906: LD_ADDR_OWVAR 33
3910: PUSH
3911: LD_STRING 
3913: ST_TO_ADDR
// hc_name =  ;
3914: LD_ADDR_OWVAR 26
3918: PUSH
3919: LD_STRING 
3921: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: LD_EXP 17
3937: PPUSH
3938: CALL_OW 12
3942: PPUSH
3943: CALL_OW 380
// un = CreateHuman ;
3947: LD_ADDR_VAR 0 4
3951: PUSH
3952: CALL_OW 44
3956: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3957: LD_VAR 0 4
3961: PPUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3971: LD_ADDR_VAR 0 2
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: LD_INT 6
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 1
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: LD_INT 25
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: LD_INT 25
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: FOR_IN
4038: IFFALSE 4057
// ComAgressiveMove ( i , 45 , 46 ) ;
4040: LD_VAR 0 2
4044: PPUSH
4045: LD_INT 45
4047: PPUSH
4048: LD_INT 46
4050: PPUSH
4051: CALL_OW 114
4055: GO 4037
4057: POP
4058: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4059: LD_ADDR_VAR 0 2
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 6
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 25
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4125
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4096: LD_ADDR_EXP 21
4100: PUSH
4101: LD_VAR 0 2
4105: PPUSH
4106: LD_INT 0
4108: PPUSH
4109: LD_INT 48
4111: PPUSH
4112: LD_INT 55
4114: PPUSH
4115: LD_INT 5
4117: PPUSH
4118: CALL_OW 145
4122: ST_TO_ADDR
4123: GO 4093
4125: POP
4126: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 22
4134: PUSH
4135: LD_INT 6
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4181
// ComMoveXY ( i , 39 , 55 ) ;
4164: LD_VAR 0 2
4168: PPUSH
4169: LD_INT 39
4171: PPUSH
4172: LD_INT 55
4174: PPUSH
4175: CALL_OW 111
4179: GO 4161
4181: POP
4182: POP
// end ;
4183: LD_VAR 0 1
4187: RET
// export function PrepareFirstAttack ; var i , un ; begin
4188: LD_INT 0
4190: PPUSH
4191: PPUSH
4192: PPUSH
// uc_side = 5 ;
4193: LD_ADDR_OWVAR 20
4197: PUSH
4198: LD_INT 5
4200: ST_TO_ADDR
// uc_nation = 3 ;
4201: LD_ADDR_OWVAR 21
4205: PUSH
4206: LD_INT 3
4208: ST_TO_ADDR
// for i := 1 to 4 do
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: DOUBLE
4215: LD_INT 1
4217: DEC
4218: ST_TO_ADDR
4219: LD_INT 4
4221: PUSH
4222: FOR_TO
4223: IFFALSE 4310
// begin InitHC_All ( ) ;
4225: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4229: LD_INT 0
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_EXP 16
4239: PPUSH
4240: LD_EXP 17
4244: PPUSH
4245: CALL_OW 12
4249: PPUSH
4250: CALL_OW 380
// un = CreateHuman ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 44
4263: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 4
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4279: LD_VAR 0 3
4283: PPUSH
4284: LD_EXP 1
4288: PPUSH
4289: CALL_OW 250
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 251
4303: PPUSH
4304: CALL_OW 114
// end ;
4308: GO 4222
4310: POP
4311: POP
// firstRussianAttack = 1 ;
4312: LD_ADDR_EXP 23
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// end ; end_of_file
4320: LD_VAR 0 1
4324: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
4329: PPUSH
// for i = 1 to count do
4330: LD_ADDR_VAR 0 8
4334: PUSH
4335: DOUBLE
4336: LD_INT 1
4338: DEC
4339: ST_TO_ADDR
4340: LD_VAR 0 6
4344: PUSH
4345: FOR_TO
4346: IFFALSE 4427
// begin uc_side = side ;
4348: LD_ADDR_OWVAR 20
4352: PUSH
4353: LD_VAR 0 1
4357: ST_TO_ADDR
// uc_nation = nation ;
4358: LD_ADDR_OWVAR 21
4362: PUSH
4363: LD_VAR 0 2
4367: ST_TO_ADDR
// hc_gallery =  ;
4368: LD_ADDR_OWVAR 33
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// hc_name =  ;
4376: LD_ADDR_OWVAR 26
4380: PUSH
4381: LD_STRING 
4383: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4384: LD_INT 0
4386: PPUSH
4387: LD_VAR 0 5
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 380
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4411: LD_VAR 0 9
4415: PPUSH
4416: LD_VAR 0 3
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4345
4427: POP
4428: POP
// end ;
4429: LD_VAR 0 7
4433: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4434: LD_INT 0
4436: PPUSH
4437: PPUSH
4438: PPUSH
// uc_side := GetSide ( b ) ;
4439: LD_ADDR_OWVAR 20
4443: PUSH
4444: LD_VAR 0 2
4448: PPUSH
4449: CALL_OW 255
4453: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4454: LD_ADDR_OWVAR 21
4458: PUSH
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 248
4468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: CALL_OW 380
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 4
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4494: LD_ADDR_VAR 0 5
4498: PUSH
4499: LD_VAR 0 2
4503: PPUSH
4504: CALL_OW 254
4508: PUSH
4509: LD_INT 3
4511: MINUS
4512: ST_TO_ADDR
// if dir < 0 then
4513: LD_VAR 0 5
4517: PUSH
4518: LD_INT 0
4520: LESS
4521: IFFALSE 4537
// dir := 6 + dir ;
4523: LD_ADDR_VAR 0 5
4527: PUSH
4528: LD_INT 6
4530: PUSH
4531: LD_VAR 0 5
4535: PLUS
4536: ST_TO_ADDR
// SetDir ( un , dir ) ;
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4551: LD_VAR 0 4
4555: PPUSH
4556: LD_VAR 0 2
4560: PPUSH
4561: CALL_OW 52
// end ;
4565: LD_VAR 0 3
4569: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4570: LD_INT 0
4572: PPUSH
4573: PPUSH
4574: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4575: LD_ADDR_VAR 0 6
4579: PUSH
4580: LD_VAR 0 1
4584: PUSH
4585: LD_INT 1
4587: PPUSH
4588: LD_VAR 0 1
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4599: LD_VAR 0 6
4603: PPUSH
4604: CALL_OW 258
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4630
// Say ( speaker , dialogMID ) else
4614: LD_VAR 0 6
4618: PPUSH
4619: LD_VAR 0 2
4623: PPUSH
4624: CALL_OW 88
4628: GO 4644
// Say ( speaker , dialogFID ) ;
4630: LD_VAR 0 6
4634: PPUSH
4635: LD_VAR 0 3
4639: PPUSH
4640: CALL_OW 88
// result := speaker ;
4644: LD_ADDR_VAR 0 4
4648: PUSH
4649: LD_VAR 0 6
4653: ST_TO_ADDR
// end ;
4654: LD_VAR 0 4
4658: RET
// export function PrepareDifficulty ; var tmp ; begin
4659: LD_INT 0
4661: PPUSH
4662: PPUSH
// if Difficulty = 1 then
4663: LD_OWVAR 67
4667: PUSH
4668: LD_INT 1
4670: EQUAL
4671: IFFALSE 4689
// begin RuSoldMinLevel = 1 ;
4673: LD_ADDR_EXP 16
4677: PUSH
4678: LD_INT 1
4680: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4681: LD_ADDR_EXP 17
4685: PUSH
4686: LD_INT 2
4688: ST_TO_ADDR
// end ; if Difficulty = 2 then
4689: LD_OWVAR 67
4693: PUSH
4694: LD_INT 2
4696: EQUAL
4697: IFFALSE 4798
// begin RuSoldMinLevel = 2 ;
4699: LD_ADDR_EXP 16
4703: PUSH
4704: LD_INT 2
4706: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4707: LD_ADDR_EXP 17
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4715: LD_INT 23
4717: PPUSH
4718: CALL_OW 64
// uc_nation = 3 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 3
4729: ST_TO_ADDR
// uc_side = 3 ;
4730: LD_ADDR_OWVAR 20
4734: PUSH
4735: LD_INT 3
4737: ST_TO_ADDR
// bc_level = 5 ;
4738: LD_ADDR_OWVAR 43
4742: PUSH
4743: LD_INT 5
4745: ST_TO_ADDR
// bc_type = 32 ;
4746: LD_ADDR_OWVAR 42
4750: PUSH
4751: LD_INT 32
4753: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4754: LD_ADDR_VAR 0 2
4758: PUSH
4759: LD_INT 76
4761: PPUSH
4762: LD_INT 91
4764: PPUSH
4765: LD_INT 2
4767: PPUSH
4768: CALL_OW 47
4772: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 43
4780: PPUSH
4781: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4785: LD_INT 51
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 322
// end ; if Difficulty >= 3 then
4798: LD_OWVAR 67
4802: PUSH
4803: LD_INT 3
4805: GREATEREQUAL
4806: IFFALSE 4970
// begin RuSoldMinLevel = Difficulty ;
4808: LD_ADDR_EXP 16
4812: PUSH
4813: LD_OWVAR 67
4817: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4818: LD_ADDR_EXP 17
4822: PUSH
4823: LD_INT 4
4825: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4826: LD_INT 26
4828: PPUSH
4829: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4833: LD_INT 23
4835: PPUSH
4836: CALL_OW 64
// uc_nation = 3 ;
4840: LD_ADDR_OWVAR 21
4844: PUSH
4845: LD_INT 3
4847: ST_TO_ADDR
// uc_side = 3 ;
4848: LD_ADDR_OWVAR 20
4852: PUSH
4853: LD_INT 3
4855: ST_TO_ADDR
// bc_level = 5 ;
4856: LD_ADDR_OWVAR 43
4860: PUSH
4861: LD_INT 5
4863: ST_TO_ADDR
// bc_type = 32 ;
4864: LD_ADDR_OWVAR 42
4868: PUSH
4869: LD_INT 32
4871: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4872: LD_ADDR_VAR 0 2
4876: PUSH
4877: LD_INT 76
4879: PPUSH
4880: LD_INT 91
4882: PPUSH
4883: LD_INT 2
4885: PPUSH
4886: CALL_OW 47
4890: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: LD_INT 44
4898: PPUSH
4899: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: LD_INT 83
4910: PPUSH
4911: LD_INT 84
4913: PPUSH
4914: LD_INT 2
4916: PPUSH
4917: CALL_OW 47
4921: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 43
4929: PPUSH
4930: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4934: LD_INT 51
4936: PPUSH
4937: LD_INT 3
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4947: LD_INT 52
4949: PPUSH
4950: LD_INT 3
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4960: LD_INT 25
4962: PPUSH
4963: LD_INT 44
4965: PPUSH
4966: CALL_OW 431
// end ; end ;
4970: LD_VAR 0 1
4974: RET
// export function EnergyDialog ; begin
4975: LD_INT 0
4977: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4978: LD_INT 46
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 321
4988: PUSH
4989: LD_INT 1
4991: EQUAL
4992: PUSH
4993: LD_INT 35
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: CALL_OW 321
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5032
// begin Say ( JMM , D9c-JMM-1 ) ;
5010: LD_EXP 1
5014: PPUSH
5015: LD_STRING D9c-JMM-1
5017: PPUSH
5018: CALL_OW 88
// energyVDialog = 1 ;
5022: LD_ADDR_EXP 33
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// end else
5030: GO 5186
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5032: LD_INT 35
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 321
5042: PUSH
5043: LD_INT 2
5045: EQUAL
5046: PUSH
5047: LD_EXP 33
5051: PUSH
5052: LD_INT 0
5054: EQUAL
5055: AND
5056: IFFALSE 5078
// begin Say ( JMM , D9c-JMM-1a ) ;
5058: LD_EXP 1
5062: PPUSH
5063: LD_STRING D9c-JMM-1a
5065: PPUSH
5066: CALL_OW 88
// energyVDialog = 1 ;
5070: LD_ADDR_EXP 33
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5078: LD_INT 46
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 321
5088: PUSH
5089: LD_INT 2
5091: EQUAL
5092: PUSH
5093: LD_EXP 33
5097: PUSH
5098: LD_INT 0
5100: EQUAL
5101: AND
5102: IFFALSE 5124
// begin Say ( JMM , D9c-JMM-1b ) ;
5104: LD_EXP 1
5108: PPUSH
5109: LD_STRING D9c-JMM-1b
5111: PPUSH
5112: CALL_OW 88
// energyVDialog = 1 ;
5116: LD_ADDR_EXP 33
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5124: LD_INT 46
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 321
5134: PUSH
5135: LD_INT 2
5137: EQUAL
5138: PUSH
5139: LD_INT 21
5141: PPUSH
5142: LD_INT 1
5144: PPUSH
5145: CALL_OW 321
5149: PUSH
5150: LD_INT 2
5152: EQUAL
5153: AND
5154: PUSH
5155: LD_EXP 33
5159: PUSH
5160: LD_INT 0
5162: EQUAL
5163: AND
5164: IFFALSE 5186
// begin Say ( JMM , D9c-JMM-1c ) ;
5166: LD_EXP 1
5170: PPUSH
5171: LD_STRING D9c-JMM-1c
5173: PPUSH
5174: CALL_OW 88
// energyVDialog = 1 ;
5178: LD_ADDR_EXP 33
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// end ; end ; end ;
5186: LD_VAR 0 1
5190: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5198: LD_VAR 0 1
5202: NOT
5203: PUSH
5204: LD_VAR 0 1
5208: PPUSH
5209: CALL_OW 256
5213: PUSH
5214: LD_INT 250
5216: LESS
5217: OR
5218: PUSH
5219: LD_VAR 0 1
5223: PPUSH
5224: CALL_OW 314
5228: PUSH
5229: LD_VAR 0 1
5233: PPUSH
5234: CALL_OW 261
5238: PUSH
5239: LD_INT 20
5241: GREATER
5242: AND
5243: OR
5244: IFFALSE 5248
// exit ;
5246: GO 5613
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5248: LD_VAR 0 1
5252: PPUSH
5253: CALL_OW 261
5257: PUSH
5258: LD_INT 20
5260: LESS
5261: PUSH
5262: LD_VAR 0 1
5266: PPUSH
5267: CALL_OW 110
5271: PUSH
5272: LD_INT 21
5274: EQUAL
5275: NOT
5276: AND
5277: IFFALSE 5304
// begin ComStop ( bulldozer ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: LD_INT 21
5295: PPUSH
5296: CALL_OW 109
// exit ;
5300: GO 5613
// end else
5302: GO 5331
// if GetFuel ( bulldozer ) > 20 then
5304: LD_VAR 0 1
5308: PPUSH
5309: CALL_OW 261
5313: PUSH
5314: LD_INT 20
5316: GREATER
5317: IFFALSE 5331
// SetTag ( bulldozer , 0 ) ;
5319: LD_VAR 0 1
5323: PPUSH
5324: LD_INT 0
5326: PPUSH
5327: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5331: LD_ADDR_VAR 0 5
5335: PUSH
5336: LD_VAR 0 2
5340: PPUSH
5341: CALL_OW 353
5345: ST_TO_ADDR
// tmp := [ ] ;
5346: LD_ADDR_VAR 0 6
5350: PUSH
5351: EMPTY
5352: ST_TO_ADDR
// for i = 1 to list do
5353: LD_ADDR_VAR 0 4
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 5
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5467
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5371: LD_VAR 0 5
5375: PUSH
5376: LD_VAR 0 4
5380: ARRAY
5381: PUSH
5382: LD_INT 1
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PUSH
5391: LD_VAR 0 4
5395: ARRAY
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 554
5405: IFFALSE 5465
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5407: LD_ADDR_VAR 0 6
5411: PUSH
5412: LD_VAR 0 6
5416: PPUSH
5417: LD_VAR 0 6
5421: PUSH
5422: LD_INT 1
5424: PLUS
5425: PPUSH
5426: LD_VAR 0 5
5430: PUSH
5431: LD_VAR 0 4
5435: ARRAY
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 1
5464: ST_TO_ADDR
// end ;
5465: GO 5368
5467: POP
5468: POP
// ComStop ( bulldozer ) ;
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5478: LD_ADDR_VAR 0 7
5482: PUSH
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 250
5492: PUSH
5493: LD_VAR 0 1
5497: PPUSH
5498: CALL_OW 251
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: ST_TO_ADDR
// for i = tmp downto 1 do
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: DOUBLE
5513: LD_VAR 0 6
5517: INC
5518: ST_TO_ADDR
5519: LD_INT 1
5521: PUSH
5522: FOR_DOWNTO
5523: IFFALSE 5611
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5525: LD_ADDR_VAR 0 7
5529: PUSH
5530: LD_VAR 0 7
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: PPUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 2
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 6
5552: PPUSH
5553: CALL 5714 0 3
5557: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_VAR 0 7
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 2
5579: ARRAY
5580: PPUSH
5581: CALL 5618 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5585: LD_ADDR_VAR 0 6
5589: PUSH
5590: LD_VAR 0 6
5594: PPUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 3
5602: ARRAY
5603: PPUSH
5604: CALL_OW 3
5608: ST_TO_ADDR
// end ;
5609: GO 5522
5611: POP
5612: POP
// end ;
5613: LD_VAR 0 3
5617: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5618: LD_INT 0
5620: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5621: LD_VAR 0 2
5625: PPUSH
5626: LD_VAR 0 3
5630: PPUSH
5631: CALL_OW 351
5635: PUSH
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL_OW 554
5650: AND
5651: PUSH
5652: LD_VAR 0 2
5656: PPUSH
5657: LD_VAR 0 3
5661: PPUSH
5662: CALL_OW 488
5666: AND
5667: PUSH
5668: LD_VAR 0 2
5672: PPUSH
5673: LD_VAR 0 3
5677: PPUSH
5678: CALL_OW 428
5682: PUSH
5683: LD_INT 1
5685: NEG
5686: EQUAL
5687: AND
5688: IFFALSE 5709
// AddComMoveXY ( bulldozer , x , y ) ;
5690: LD_VAR 0 1
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: LD_VAR 0 3
5704: PPUSH
5705: CALL_OW 171
// end ;
5709: LD_VAR 0 4
5713: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5714: LD_INT 0
5716: PPUSH
5717: PPUSH
5718: PPUSH
5719: PPUSH
5720: PPUSH
5721: PPUSH
5722: PPUSH
// dist := 99999 ;
5723: LD_ADDR_VAR 0 6
5727: PUSH
5728: LD_INT 99999
5730: ST_TO_ADDR
// for i = 1 to list do
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: DOUBLE
5737: LD_INT 1
5739: DEC
5740: ST_TO_ADDR
5741: LD_VAR 0 3
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5885
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5749: LD_ADDR_VAR 0 7
5753: PUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PUSH
5769: LD_VAR 0 5
5773: ARRAY
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_VAR 0 3
5783: PUSH
5784: LD_VAR 0 5
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 298
5798: ST_TO_ADDR
// if d = 0 then
5799: LD_VAR 0 7
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5811
// continue ;
5809: GO 5746
// if d < dist then
5811: LD_VAR 0 7
5815: PUSH
5816: LD_VAR 0 6
5820: LESS
5821: IFFALSE 5883
// begin _x := list [ i ] [ 1 ] ;
5823: LD_ADDR_VAR 0 8
5827: PUSH
5828: LD_VAR 0 3
5832: PUSH
5833: LD_VAR 0 5
5837: ARRAY
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5843: LD_ADDR_VAR 0 9
5847: PUSH
5848: LD_VAR 0 3
5852: PUSH
5853: LD_VAR 0 5
5857: ARRAY
5858: PUSH
5859: LD_INT 2
5861: ARRAY
5862: ST_TO_ADDR
// _i := i ;
5863: LD_ADDR_VAR 0 10
5867: PUSH
5868: LD_VAR 0 5
5872: ST_TO_ADDR
// dist := d ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 7
5882: ST_TO_ADDR
// end ; end ;
5883: GO 5746
5885: POP
5886: POP
// result := [ _x , _y , _i , dist ] ;
5887: LD_ADDR_VAR 0 4
5891: PUSH
5892: LD_VAR 0 8
5896: PUSH
5897: LD_VAR 0 9
5901: PUSH
5902: LD_VAR 0 10
5906: PUSH
5907: LD_VAR 0 6
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: ST_TO_ADDR
// end ;
5918: LD_VAR 0 4
5922: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5923: LD_INT 0
5925: PPUSH
5926: PPUSH
// for i = 1 to 72 do
5927: LD_ADDR_VAR 0 5
5931: PUSH
5932: DOUBLE
5933: LD_INT 1
5935: DEC
5936: ST_TO_ADDR
5937: LD_INT 72
5939: PUSH
5940: FOR_TO
5941: IFFALSE 5995
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5943: LD_VAR 0 5
5947: PPUSH
5948: LD_VAR 0 1
5952: PPUSH
5953: CALL_OW 321
5957: PUSH
5958: LD_INT 1
5960: EQUAL
5961: PUSH
5962: LD_VAR 0 5
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: CALL_OW 482
5976: AND
5977: IFFALSE 5993
// AddComResearch ( lab , i ) ;
5979: LD_VAR 0 2
5983: PPUSH
5984: LD_VAR 0 5
5988: PPUSH
5989: CALL_OW 184
5993: GO 5940
5995: POP
5996: POP
// end ;
5997: LD_VAR 0 4
6001: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6002: LD_INT 0
6004: PPUSH
6005: PPUSH
6006: PPUSH
6007: PPUSH
6008: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6009: LD_ADDR_VAR 0 7
6013: PUSH
6014: LD_VAR 0 2
6018: PPUSH
6019: CALL_OW 313
6023: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6024: LD_ADDR_VAR 0 8
6028: PUSH
6029: LD_VAR 0 3
6033: PPUSH
6034: LD_INT 22
6036: PUSH
6037: LD_VAR 0 1
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 25
6048: PUSH
6049: LD_INT 2
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 24
6058: PUSH
6059: LD_INT 750
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 3
6068: PUSH
6069: LD_INT 54
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PPUSH
6085: CALL_OW 70
6089: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6090: LD_ADDR_VAR 0 5
6094: PUSH
6095: LD_VAR 0 3
6099: PPUSH
6100: LD_INT 22
6102: PUSH
6103: LD_VAR 0 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 21
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: LD_INT 24
6127: PUSH
6128: LD_INT 1000
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: PPUSH
6147: CALL_OW 70
6151: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6152: LD_VAR 0 5
6156: NOT
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_VAR 0 1
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 25
6172: PUSH
6173: LD_INT 2
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 24
6182: PUSH
6183: LD_INT 250
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: NOT
6200: AND
6201: IFFALSE 6205
// exit ;
6203: GO 6301
// if buildingsList and engineerOkInside then
6205: LD_VAR 0 5
6209: PUSH
6210: LD_VAR 0 7
6214: AND
6215: IFFALSE 6241
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6217: LD_VAR 0 7
6221: PPUSH
6222: LD_INT 25
6224: PUSH
6225: LD_INT 2
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 72
6236: PPUSH
6237: CALL_OW 122
// if buildingsList and engineerOkOutside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 8
6250: AND
6251: IFFALSE 6271
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6253: LD_VAR 0 8
6257: PPUSH
6258: LD_VAR 0 5
6262: PUSH
6263: LD_INT 1
6265: ARRAY
6266: PPUSH
6267: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6271: LD_VAR 0 5
6275: PUSH
6276: LD_INT 0
6278: EQUAL
6279: PUSH
6280: LD_VAR 0 8
6284: AND
6285: IFFALSE 6301
// ComEnterUnit ( engineerOkOutside , building ) ;
6287: LD_VAR 0 8
6291: PPUSH
6292: LD_VAR 0 2
6296: PPUSH
6297: CALL_OW 120
// end ;
6301: LD_VAR 0 4
6305: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
6310: PPUSH
6311: PPUSH
6312: PPUSH
6313: PPUSH
6314: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6315: LD_ADDR_VAR 0 6
6319: PUSH
6320: LD_INT 22
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 4
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 23
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 24
6354: PUSH
6355: LD_INT 251
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PPUSH
6368: CALL_OW 69
6372: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6373: LD_ADDR_VAR 0 7
6377: PUSH
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_INT 22
6385: PUSH
6386: LD_VAR 0 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 23
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 50
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 70
6431: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6432: LD_ADDR_VAR 0 8
6436: PUSH
6437: LD_VAR 0 3
6441: PPUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 1
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 21
6456: PUSH
6457: LD_INT 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 3
6483: PUSH
6484: LD_INT 24
6486: PUSH
6487: LD_INT 750
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 70
6508: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6509: LD_ADDR_VAR 0 9
6513: PUSH
6514: LD_VAR 0 2
6518: PPUSH
6519: LD_INT 22
6521: PUSH
6522: LD_VAR 0 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 21
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 25
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 3
6560: PUSH
6561: LD_INT 24
6563: PUSH
6564: LD_INT 1000
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 70
6585: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6586: LD_VAR 0 8
6590: NOT
6591: PUSH
6592: LD_VAR 0 9
6596: NOT
6597: AND
6598: PUSH
6599: LD_VAR 0 6
6603: NOT
6604: AND
6605: IFFALSE 6609
// exit ;
6607: GO 6815
// if damageUnits and sciList then
6609: LD_VAR 0 8
6613: PUSH
6614: LD_VAR 0 6
6618: AND
6619: IFFALSE 6635
// ComMoveToArea ( damageUnits , healArea ) ;
6621: LD_VAR 0 8
6625: PPUSH
6626: LD_VAR 0 2
6630: PPUSH
6631: CALL_OW 113
// if unitsToHeal and sciList then
6635: LD_VAR 0 9
6639: PUSH
6640: LD_VAR 0 6
6644: AND
6645: IFFALSE 6656
// ComExitBuilding ( sciList ) ;
6647: LD_VAR 0 6
6651: PPUSH
6652: CALL_OW 122
// if unitsToHeal and sciListOutside then
6656: LD_VAR 0 9
6660: PUSH
6661: LD_VAR 0 7
6665: AND
6666: IFFALSE 6686
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6668: LD_VAR 0 7
6672: PPUSH
6673: LD_VAR 0 9
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: PPUSH
6682: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6686: LD_VAR 0 8
6690: PUSH
6691: LD_INT 0
6693: EQUAL
6694: PUSH
6695: LD_VAR 0 9
6699: PUSH
6700: LD_INT 0
6702: EQUAL
6703: AND
6704: PUSH
6705: LD_VAR 0 7
6709: AND
6710: IFFALSE 6815
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6712: LD_ADDR_VAR 0 10
6716: PUSH
6717: LD_INT 22
6719: PUSH
6720: LD_VAR 0 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 21
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 30
6741: PUSH
6742: LD_INT 8
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL_OW 69
6758: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6759: LD_ADDR_VAR 0 11
6763: PUSH
6764: LD_INT 1
6766: PPUSH
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 12
6776: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6777: LD_VAR 0 7
6781: PPUSH
6782: LD_INT 3
6784: PUSH
6785: LD_INT 60
6787: PUSH
6788: EMPTY
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: PPUSH
6800: LD_VAR 0 10
6804: PUSH
6805: LD_VAR 0 11
6809: ARRAY
6810: PPUSH
6811: CALL_OW 120
// end ; end ;
6815: LD_VAR 0 5
6819: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6820: LD_INT 0
6822: PPUSH
6823: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6824: LD_INT 22
6826: PUSH
6827: LD_VAR 0 1
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 21
6838: PUSH
6839: LD_INT 2
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 69
6854: PUSH
6855: LD_VAR 0 3
6859: LESSEQUAL
6860: IFFALSE 6927
// for i = 1 to vehCount do
6862: LD_ADDR_VAR 0 9
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_VAR 0 3
6876: PUSH
6877: FOR_TO
6878: IFFALSE 6925
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 7
6889: PPUSH
6890: LD_VAR 0 5
6894: PPUSH
6895: LD_VAR 0 6
6899: PPUSH
6900: LD_VAR 0 4
6904: PUSH
6905: LD_INT 1
6907: PPUSH
6908: LD_VAR 0 4
6912: PPUSH
6913: CALL_OW 12
6917: ARRAY
6918: PPUSH
6919: CALL_OW 185
6923: GO 6877
6925: POP
6926: POP
// end ;
6927: LD_VAR 0 8
6931: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
6936: PPUSH
6937: PPUSH
6938: PPUSH
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to medicCount do
6945: LD_ADDR_VAR 0 11
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_VAR 0 4
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7031
// begin uc_side = side ;
6963: LD_ADDR_OWVAR 20
6967: PUSH
6968: LD_VAR 0 1
6972: ST_TO_ADDR
// uc_nation = nation ;
6973: LD_ADDR_OWVAR 21
6977: PUSH
6978: LD_VAR 0 2
6982: ST_TO_ADDR
// InitHC_All ( ) ;
6983: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
6987: LD_INT 0
6989: PPUSH
6990: LD_INT 4
6992: PPUSH
6993: LD_VAR 0 5
6997: PPUSH
6998: CALL_OW 380
// un = CreateHuman ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: CALL_OW 44
7011: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7012: LD_VAR 0 13
7016: PPUSH
7017: LD_VAR 0 6
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// end ;
7029: GO 6960
7031: POP
7032: POP
// for i = 1 to soldierCount do
7033: LD_ADDR_VAR 0 11
7037: PUSH
7038: DOUBLE
7039: LD_INT 1
7041: DEC
7042: ST_TO_ADDR
7043: LD_VAR 0 3
7047: PUSH
7048: FOR_TO
7049: IFFALSE 7119
// begin uc_side = side ;
7051: LD_ADDR_OWVAR 20
7055: PUSH
7056: LD_VAR 0 1
7060: ST_TO_ADDR
// uc_nation = nation ;
7061: LD_ADDR_OWVAR 21
7065: PUSH
7066: LD_VAR 0 2
7070: ST_TO_ADDR
// InitHC_All ( ) ;
7071: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7075: LD_INT 0
7077: PPUSH
7078: LD_INT 1
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 380
// un = CreateHuman ;
7090: LD_ADDR_VAR 0 13
7094: PUSH
7095: CALL_OW 44
7099: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7100: LD_VAR 0 13
7104: PPUSH
7105: LD_VAR 0 6
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 49
// end ;
7117: GO 7048
7119: POP
7120: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7121: LD_ADDR_VAR 0 16
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_VAR 0 1
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 2
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 5
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 8
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 25
7173: PUSH
7174: LD_INT 9
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 69
7196: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7197: LD_ADDR_VAR 0 15
7201: PUSH
7202: LD_INT 22
7204: PUSH
7205: LD_VAR 0 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 4
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7233: LD_VAR 0 15
7237: PPUSH
7238: LD_VAR 0 7
7242: PPUSH
7243: CALL_OW 113
// if strategy = 1 then
7247: LD_VAR 0 9
7251: PUSH
7252: LD_INT 1
7254: EQUAL
7255: IFFALSE 7703
// begin for i in soldiersOK_list do
7257: LD_ADDR_VAR 0 11
7261: PUSH
7262: LD_VAR 0 16
7266: PUSH
7267: FOR_IN
7268: IFFALSE 7332
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7270: LD_VAR 0 11
7274: PPUSH
7275: LD_INT 91
7277: PPUSH
7278: LD_INT 63
7280: PPUSH
7281: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7285: LD_VAR 0 11
7289: PPUSH
7290: LD_INT 101
7292: PPUSH
7293: LD_INT 53
7295: PPUSH
7296: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7300: LD_VAR 0 11
7304: PPUSH
7305: LD_INT 75
7307: PPUSH
7308: LD_INT 23
7310: PPUSH
7311: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7315: LD_VAR 0 11
7319: PPUSH
7320: LD_INT 78
7322: PPUSH
7323: LD_INT 8
7325: PPUSH
7326: CALL_OW 174
// end ;
7330: GO 7267
7332: POP
7333: POP
// wait ( 0 0$30 ) ;
7334: LD_INT 1050
7336: PPUSH
7337: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7348: LD_ADDR_VAR 0 14
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_VAR 0 1
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: LD_INT 24
7373: PUSH
7374: LD_INT 550
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: LD_INT 250
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 69
7408: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7409: LD_ADDR_VAR 0 16
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 1
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 24
7438: PUSH
7439: LD_INT 1000
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: ST_TO_ADDR
// if medicCount then
7456: LD_VAR 0 4
7460: IFFALSE 7500
// begin if damageUnit_list then
7462: LD_VAR 0 14
7466: IFFALSE 7500
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7468: LD_VAR 0 14
7472: PPUSH
7473: LD_VAR 0 7
7477: PPUSH
7478: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7482: LD_VAR 0 4
7486: PPUSH
7487: LD_VAR 0 14
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7500: LD_ADDR_VAR 0 11
7504: PUSH
7505: LD_VAR 0 16
7509: PUSH
7510: FOR_IN
7511: IFFALSE 7687
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7513: LD_ADDR_VAR 0 19
7517: PUSH
7518: LD_INT 22
7520: PUSH
7521: LD_VAR 0 8
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: PPUSH
7535: LD_VAR 0 11
7539: PPUSH
7540: CALL_OW 74
7544: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7545: LD_ADDR_VAR 0 20
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_VAR 0 8
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 2
7564: PUSH
7565: LD_INT 59
7567: PUSH
7568: EMPTY
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 21
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: PPUSH
7604: CALL_OW 69
7608: PPUSH
7609: LD_VAR 0 11
7613: PPUSH
7614: CALL_OW 74
7618: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7619: LD_VAR 0 11
7623: PPUSH
7624: LD_VAR 0 19
7628: PPUSH
7629: CALL_OW 296
7633: PUSH
7634: LD_INT 8
7636: PLUS
7637: PUSH
7638: LD_VAR 0 11
7642: PPUSH
7643: LD_VAR 0 20
7647: PPUSH
7648: CALL_OW 296
7652: LESS
7653: IFFALSE 7671
// ComAttackUnit ( i , target1 ) else
7655: LD_VAR 0 11
7659: PPUSH
7660: LD_VAR 0 19
7664: PPUSH
7665: CALL_OW 115
7669: GO 7685
// ComAttackUnit ( i , target2 ) ;
7671: LD_VAR 0 11
7675: PPUSH
7676: LD_VAR 0 20
7680: PPUSH
7681: CALL_OW 115
// end ;
7685: GO 7510
7687: POP
7688: POP
// until not soldiersOK_list and not damageUnit_list ;
7689: LD_VAR 0 16
7693: NOT
7694: PUSH
7695: LD_VAR 0 14
7699: NOT
7700: AND
7701: IFFALSE 7341
// end ; if strategy = 2 then
7703: LD_VAR 0 9
7707: PUSH
7708: LD_INT 2
7710: EQUAL
7711: IFFALSE 8129
// begin for i in soldiersOK_list do
7713: LD_ADDR_VAR 0 11
7717: PUSH
7718: LD_VAR 0 16
7722: PUSH
7723: FOR_IN
7724: IFFALSE 7758
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7726: LD_VAR 0 11
7730: PPUSH
7731: LD_INT 91
7733: PPUSH
7734: LD_INT 63
7736: PPUSH
7737: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7741: LD_VAR 0 11
7745: PPUSH
7746: LD_INT 75
7748: PPUSH
7749: LD_INT 33
7751: PPUSH
7752: CALL_OW 174
// end ;
7756: GO 7723
7758: POP
7759: POP
// wait ( 0 0$10 ) ;
7760: LD_INT 350
7762: PPUSH
7763: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7767: LD_INT 105
7769: PPUSH
7770: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7774: LD_ADDR_VAR 0 14
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_VAR 0 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: LD_INT 3
7796: PUSH
7797: LD_INT 24
7799: PUSH
7800: LD_INT 550
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 24
7813: PUSH
7814: LD_INT 250
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7835: LD_ADDR_VAR 0 16
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_VAR 0 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 24
7864: PUSH
7865: LD_INT 1000
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 69
7881: ST_TO_ADDR
// if medicCount then
7882: LD_VAR 0 4
7886: IFFALSE 7926
// begin if damageUnit_list then
7888: LD_VAR 0 14
7892: IFFALSE 7926
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7894: LD_VAR 0 14
7898: PPUSH
7899: LD_VAR 0 7
7903: PPUSH
7904: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7908: LD_VAR 0 4
7912: PPUSH
7913: LD_VAR 0 14
7917: PUSH
7918: LD_INT 1
7920: ARRAY
7921: PPUSH
7922: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7926: LD_ADDR_VAR 0 11
7930: PUSH
7931: LD_VAR 0 16
7935: PUSH
7936: FOR_IN
7937: IFFALSE 8113
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7939: LD_ADDR_VAR 0 19
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 8
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PPUSH
7961: LD_VAR 0 11
7965: PPUSH
7966: CALL_OW 74
7970: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7971: LD_ADDR_VAR 0 20
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_VAR 0 8
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: LD_INT 59
7993: PUSH
7994: EMPTY
7995: LIST
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 1
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 21
8009: PUSH
8010: LD_INT 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: PPUSH
8030: CALL_OW 69
8034: PPUSH
8035: LD_VAR 0 11
8039: PPUSH
8040: CALL_OW 74
8044: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8045: LD_VAR 0 11
8049: PPUSH
8050: LD_VAR 0 19
8054: PPUSH
8055: CALL_OW 296
8059: PUSH
8060: LD_INT 8
8062: PLUS
8063: PUSH
8064: LD_VAR 0 11
8068: PPUSH
8069: LD_VAR 0 20
8073: PPUSH
8074: CALL_OW 296
8078: LESS
8079: IFFALSE 8097
// ComAttackUnit ( i , target1 ) else
8081: LD_VAR 0 11
8085: PPUSH
8086: LD_VAR 0 19
8090: PPUSH
8091: CALL_OW 115
8095: GO 8111
// ComAttackUnit ( i , target2 ) ;
8097: LD_VAR 0 11
8101: PPUSH
8102: LD_VAR 0 20
8106: PPUSH
8107: CALL_OW 115
// end ;
8111: GO 7936
8113: POP
8114: POP
// until not soldiersOK_list and not damageUnit_list ;
8115: LD_VAR 0 16
8119: NOT
8120: PUSH
8121: LD_VAR 0 14
8125: NOT
8126: AND
8127: IFFALSE 7767
// end ; if medic_list then
8129: LD_VAR 0 15
8133: IFFALSE 8273
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8135: LD_ADDR_VAR 0 15
8139: PUSH
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: LD_INT 50
8164: PUSH
8165: EMPTY
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in medic_list do
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 15
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8264
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8198: LD_VAR 0 11
8202: PPUSH
8203: CALL_OW 314
8207: NOT
8208: PUSH
8209: LD_VAR 0 11
8213: PPUSH
8214: LD_INT 4
8216: PPUSH
8217: CALL_OW 308
8221: NOT
8222: AND
8223: IFFALSE 8239
// ComMoveToArea ( i , RussianAttack ) else
8225: LD_VAR 0 11
8229: PPUSH
8230: LD_INT 4
8232: PPUSH
8233: CALL_OW 113
8237: GO 8262
// if IsInArea ( i , RussianAttack ) then
8239: LD_VAR 0 11
8243: PPUSH
8244: LD_INT 4
8246: PPUSH
8247: CALL_OW 308
8251: IFFALSE 8262
// RemoveUnit ( i ) ;
8253: LD_VAR 0 11
8257: PPUSH
8258: CALL_OW 64
8262: GO 8195
8264: POP
8265: POP
// until not medic_list ;
8266: LD_VAR 0 15
8270: NOT
8271: IFFALSE 8135
// end ; end ; end_of_file
8273: LD_VAR 0 10
8277: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
// InGameOn ;
8285: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8289: LD_ADDR_VAR 0 3
8293: PUSH
8294: LD_EXP 8
8298: PUSH
8299: LD_EXP 9
8303: PUSH
8304: LD_EXP 10
8308: PUSH
8309: LD_EXP 11
8313: PUSH
8314: LD_EXP 12
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8326: LD_ADDR_VAR 0 4
8330: PUSH
8331: LD_INT 46
8333: PUSH
8334: LD_INT 45
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 43
8342: PUSH
8343: LD_INT 42
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_INT 14
8360: PUSH
8361: LD_INT 12
8363: PUSH
8364: LD_INT 10
8366: PUSH
8367: LD_INT 8
8369: PUSH
8370: LD_INT 6
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8380: LD_EXP 11
8384: PPUSH
8385: LD_INT 31
8387: PPUSH
8388: LD_INT 59
8390: PPUSH
8391: LD_INT 19
8393: PPUSH
8394: LD_INT 5
8396: PPUSH
8397: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8401: LD_INT 32
8403: PPUSH
8404: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8408: LD_INT 32
8410: PPUSH
8411: LD_INT 51
8413: PPUSH
8414: LD_INT 26
8416: PPUSH
8417: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8421: LD_INT 32
8423: PPUSH
8424: LD_INT 53
8426: PPUSH
8427: LD_INT 23
8429: PPUSH
8430: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8434: LD_INT 32
8436: PPUSH
8437: LD_INT 52
8439: PPUSH
8440: LD_INT 19
8442: PPUSH
8443: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8447: LD_INT 35
8449: PPUSH
8450: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8454: LD_INT 32
8456: PPUSH
8457: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 250
8468: PUSH
8469: LD_INT 52
8471: EQUAL
8472: PUSH
8473: LD_INT 32
8475: PPUSH
8476: CALL_OW 251
8480: PUSH
8481: LD_INT 19
8483: EQUAL
8484: AND
8485: IFFALSE 8447
// ComExitVehicle ( JMM ) ;
8487: LD_EXP 1
8491: PPUSH
8492: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8496: LD_EXP 7
8500: PPUSH
8501: LD_EXP 1
8505: PPUSH
8506: CALL_OW 119
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8517: LD_EXP 1
8521: PPUSH
8522: LD_INT 46
8524: PPUSH
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8532: LD_EXP 1
8536: PPUSH
8537: LD_EXP 7
8541: PPUSH
8542: CALL_OW 179
// wait ( 0 0$4 ) ;
8546: LD_INT 140
8548: PPUSH
8549: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8553: LD_EXP 1
8557: PPUSH
8558: LD_STRING D1-JMM-1
8560: PPUSH
8561: CALL_OW 88
// if not dialogue_skipped then
8565: LD_OWVAR 59
8569: NOT
8570: IFFALSE 9227
// begin for i := 1 to gammaSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: DOUBLE
8578: LD_INT 1
8580: DEC
8581: ST_TO_ADDR
8582: LD_VAR 0 3
8586: PUSH
8587: FOR_TO
8588: IFFALSE 8649
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 2
8599: ARRAY
8600: PPUSH
8601: LD_VAR 0 4
8605: PUSH
8606: LD_VAR 0 2
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 5
8616: PUSH
8617: LD_VAR 0 2
8621: ARRAY
8622: PPUSH
8623: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8627: LD_VAR 0 3
8631: PUSH
8632: LD_VAR 0 2
8636: ARRAY
8637: PPUSH
8638: LD_EXP 1
8642: PPUSH
8643: CALL_OW 179
// end ;
8647: GO 8587
8649: POP
8650: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8651: LD_EXP 4
8655: PPUSH
8656: LD_INT 41
8658: PPUSH
8659: LD_INT 4
8661: PPUSH
8662: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8666: LD_EXP 4
8670: PPUSH
8671: LD_EXP 1
8675: PPUSH
8676: CALL_OW 179
// if Lisa = false and Bobby then
8680: LD_EXP 4
8684: PUSH
8685: LD_INT 0
8687: EQUAL
8688: PUSH
8689: LD_EXP 2
8693: AND
8694: IFFALSE 8725
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8696: LD_EXP 2
8700: PPUSH
8701: LD_INT 41
8703: PPUSH
8704: LD_INT 4
8706: PPUSH
8707: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_EXP 1
8720: PPUSH
8721: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8725: LD_EXP 4
8729: PUSH
8730: LD_INT 0
8732: EQUAL
8733: PUSH
8734: LD_EXP 2
8738: PUSH
8739: LD_INT 0
8741: EQUAL
8742: AND
8743: PUSH
8744: LD_EXP 3
8748: AND
8749: IFFALSE 8780
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8751: LD_EXP 3
8755: PPUSH
8756: LD_INT 41
8758: PPUSH
8759: LD_INT 4
8761: PPUSH
8762: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8766: LD_EXP 3
8770: PPUSH
8771: LD_EXP 1
8775: PPUSH
8776: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8780: LD_EXP 4
8784: PUSH
8785: LD_INT 0
8787: EQUAL
8788: PUSH
8789: LD_EXP 2
8793: PUSH
8794: LD_INT 0
8796: EQUAL
8797: AND
8798: PUSH
8799: LD_EXP 3
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: AND
8808: IFFALSE 8839
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8810: LD_EXP 6
8814: PPUSH
8815: LD_INT 41
8817: PPUSH
8818: LD_INT 4
8820: PPUSH
8821: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8825: LD_EXP 6
8829: PPUSH
8830: LD_EXP 1
8834: PPUSH
8835: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8839: LD_EXP 7
8843: PPUSH
8844: LD_STRING D1-Brown-1
8846: PPUSH
8847: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8851: LD_EXP 1
8855: PPUSH
8856: LD_STRING D1-JMM-2
8858: PPUSH
8859: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8863: LD_EXP 7
8867: PPUSH
8868: LD_STRING D1-Brown-2
8870: PPUSH
8871: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8875: LD_EXP 1
8879: PPUSH
8880: LD_EXP 9
8884: PPUSH
8885: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8889: LD_EXP 9
8893: PPUSH
8894: LD_STRING D1-FSol1-2
8896: PPUSH
8897: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8901: LD_EXP 1
8905: PPUSH
8906: LD_EXP 8
8910: PPUSH
8911: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8915: LD_EXP 8
8919: PPUSH
8920: LD_STRING D1-Sol2-2
8922: PPUSH
8923: CALL_OW 88
// if Lisa then
8927: LD_EXP 4
8931: IFFALSE 8971
// begin ComTurnUnit ( JMM , Lisa ) ;
8933: LD_EXP 1
8937: PPUSH
8938: LD_EXP 4
8942: PPUSH
8943: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8947: LD_EXP 4
8951: PPUSH
8952: LD_STRING D1-Lisa-2
8954: PPUSH
8955: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8959: LD_EXP 1
8963: PPUSH
8964: LD_STRING D1-JMM-3
8966: PPUSH
8967: CALL_OW 88
// end ; if Bobby then
8971: LD_EXP 2
8975: IFFALSE 9015
// begin ComTurnUnit ( JMM , Bobby ) ;
8977: LD_EXP 1
8981: PPUSH
8982: LD_EXP 2
8986: PPUSH
8987: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
8991: LD_EXP 2
8995: PPUSH
8996: LD_STRING D1-Bobby-2
8998: PPUSH
8999: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9003: LD_EXP 1
9007: PPUSH
9008: LD_STRING D1-JMM-3
9010: PPUSH
9011: CALL_OW 88
// end ; if Cyrus then
9015: LD_EXP 3
9019: IFFALSE 9059
// begin ComTurnUnit ( JMM , Cyrus ) ;
9021: LD_EXP 1
9025: PPUSH
9026: LD_EXP 3
9030: PPUSH
9031: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9035: LD_EXP 3
9039: PPUSH
9040: LD_STRING D1-Cyrus-2
9042: PPUSH
9043: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9047: LD_EXP 1
9051: PPUSH
9052: LD_STRING D1-JMM-3
9054: PPUSH
9055: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_EXP 7
9068: PPUSH
9069: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9073: LD_EXP 1
9077: PPUSH
9078: LD_STRING D1-JMM-3a
9080: PPUSH
9081: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9085: LD_EXP 7
9089: PPUSH
9090: LD_INT 38
9092: PPUSH
9093: LD_INT 5
9095: PPUSH
9096: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9100: LD_EXP 7
9104: PPUSH
9105: LD_EXP 1
9109: PPUSH
9110: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9114: LD_EXP 1
9118: PPUSH
9119: LD_INT 40
9121: PPUSH
9122: LD_INT 7
9124: PPUSH
9125: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9129: LD_EXP 1
9133: PPUSH
9134: LD_EXP 7
9138: PPUSH
9139: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9143: LD_EXP 7
9147: PPUSH
9148: LD_STRING D1-Brown-3
9150: PPUSH
9151: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9155: LD_EXP 14
9159: PPUSH
9160: LD_STRING D1-Har-3
9162: PPUSH
9163: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D1-JMM-4
9174: PPUSH
9175: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D1-Har-4
9186: PPUSH
9187: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9191: LD_EXP 1
9195: PPUSH
9196: LD_STRING D1-JMM-5
9198: PPUSH
9199: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9203: LD_EXP 14
9207: PPUSH
9208: LD_STRING D1-Har-5
9210: PPUSH
9211: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9215: LD_EXP 1
9219: PPUSH
9220: LD_STRING D1-JMM-6
9222: PPUSH
9223: CALL_OW 88
// end ; InGameOff ;
9227: CALL_OW 9
// PrepareRussianConvoy ;
9231: CALL 3376 0 0
// ChangeMissionObjectives ( M1 ) ;
9235: LD_STRING M1
9237: PPUSH
9238: CALL_OW 337
// SaveForQuickRestart ;
9242: CALL_OW 22
// timerStatus = 1 ;
9246: LD_ADDR_EXP 29
9250: PUSH
9251: LD_INT 1
9253: ST_TO_ADDR
// startTimer = 1 ;
9254: LD_ADDR_EXP 30
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// bonusAvalaible = 1 ;
9262: LD_ADDR_EXP 44
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9270: LD_INT 105
9272: PPUSH
9273: CALL_OW 67
// DialogueOn ;
9277: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9281: LD_EXP 12
9285: PPUSH
9286: LD_STRING D9-Mech1-1
9288: PPUSH
9289: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9293: LD_EXP 1
9297: PPUSH
9298: LD_STRING D9-JMM-1
9300: PPUSH
9301: CALL_OW 88
// DialogueOff ;
9305: CALL_OW 7
// end ;
9309: LD_VAR 0 1
9313: RET
// export function JMMTraitor ; begin
9314: LD_INT 0
9316: PPUSH
// wait ( 0 0$2 ) ;
9317: LD_INT 70
9319: PPUSH
9320: CALL_OW 67
// DialogueOn ;
9324: CALL_OW 6
// InGameOn ;
9328: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
9332: LD_EXP 14
9336: PPUSH
9337: LD_STRING D8-Har-1b
9339: PPUSH
9340: CALL_OW 94
// YouLost ( LostCommand ) ;
9344: LD_STRING LostCommand
9346: PPUSH
9347: CALL_OW 104
// InGameOff ;
9351: CALL_OW 9
// DialogueOff ;
9355: CALL_OW 7
// end ;
9359: LD_VAR 0 1
9363: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9364: LD_INT 47
9366: PPUSH
9367: LD_INT 1
9369: PPUSH
9370: CALL_OW 321
9374: PUSH
9375: LD_INT 2
9377: EQUAL
9378: PUSH
9379: LD_EXP 31
9383: NOT
9384: AND
9385: PUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 1
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 57
9418: PUSH
9419: EMPTY
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 69
9432: AND
9433: IFFALSE 9667
9435: GO 9437
9437: DISABLE
// begin factoryDialog := true ;
9438: LD_ADDR_EXP 31
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// if IsOk ( Campell ) then
9446: LD_EXP 12
9450: PPUSH
9451: CALL_OW 302
9455: IFFALSE 9471
// Say ( Campell , D10-Mech1-1 ) else
9457: LD_EXP 12
9461: PPUSH
9462: LD_STRING D10-Mech1-1
9464: PPUSH
9465: CALL_OW 88
9469: GO 9667
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9471: LD_INT 22
9473: PUSH
9474: LD_INT 1
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 25
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 26
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: PUSH
9522: LD_EXP 1
9526: PUSH
9527: EMPTY
9528: LIST
9529: DIFF
9530: IFFALSE 9604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9532: LD_INT 22
9534: PUSH
9535: LD_INT 1
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 26
9564: PUSH
9565: LD_INT 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: PUSH
9583: LD_EXP 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: DIFF
9591: PPUSH
9592: LD_STRING D10-Mech1-1
9594: PPUSH
9595: LD_STRING D10-Mech1-1
9597: PPUSH
9598: CALL 4570 0 3
9602: GO 9667
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9604: LD_INT 22
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 26
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: CALL_OW 69
9647: PUSH
9648: LD_EXP 1
9652: PUSH
9653: EMPTY
9654: LIST
9655: DIFF
9656: PPUSH
9657: LD_STRING D10-Mech1-1
9659: PPUSH
9660: LD_STRING D10-Mech1-1
9662: PPUSH
9663: CALL 4570 0 3
// end ; end ;
9667: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9668: LD_INT 22
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 32
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_EXP 32
9701: PUSH
9702: LD_INT 0
9704: EQUAL
9705: AND
9706: IFFALSE 9942
9708: GO 9710
9710: DISABLE
// begin if IsOk ( Claptopn ) then
9711: LD_EXP 11
9715: PPUSH
9716: CALL_OW 302
9720: IFFALSE 9736
// Say ( Claptopn , D9b-Eng1-1 ) else
9722: LD_EXP 11
9726: PPUSH
9727: LD_STRING D9b-Eng1-1
9729: PPUSH
9730: CALL_OW 88
9734: GO 9928
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9736: LD_INT 22
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 21
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 25
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PPUSH
9782: CALL_OW 69
9786: PUSH
9787: LD_EXP 1
9791: PUSH
9792: EMPTY
9793: LIST
9794: DIFF
9795: IFFALSE 9869
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9797: LD_INT 22
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 21
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 26
9829: PUSH
9830: LD_INT 1
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: PUSH
9848: LD_EXP 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: DIFF
9856: PPUSH
9857: LD_STRING D9b-Eng1-1
9859: PPUSH
9860: LD_STRING D9b-Eng1-11
9862: PPUSH
9863: CALL 4570 0 3
9867: GO 9928
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9869: LD_INT 22
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 26
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 69
9908: PUSH
9909: LD_EXP 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: DIFF
9917: PPUSH
9918: LD_STRING D9b-Eng1-1
9920: PPUSH
9921: LD_STRING D9b-Eng1-1
9923: PPUSH
9924: CALL 4570 0 3
// end ; if energyVDialog = 0 then
9928: LD_EXP 33
9932: PUSH
9933: LD_INT 0
9935: EQUAL
9936: IFFALSE 9942
// EnergyDialog ;
9938: CALL 4975 0 0
// end ;
9942: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9943: LD_EXP 34
9947: PUSH
9948: LD_INT 1
9950: EQUAL
9951: PUSH
9952: LD_EXP 35
9956: PUSH
9957: LD_INT 1
9959: EQUAL
9960: AND
9961: IFFALSE 9973
9963: GO 9965
9965: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9966: LD_STRING M1a
9968: PPUSH
9969: CALL_OW 337
9973: END
// every 3 3$0 do
9974: GO 9976
9976: DISABLE
// PrepareFirstAttack ;
9977: CALL 4188 0 0
9981: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9982: LD_INT 22
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 24
10007: PUSH
10008: LD_INT 250
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: PUSH
10029: LD_INT 0
10031: GREATER
10032: PUSH
10033: LD_EXP 23
10037: PUSH
10038: LD_INT 1
10040: EQUAL
10041: AND
10042: IFFALSE 10343
10044: GO 10046
10046: DISABLE
10047: LD_INT 0
10049: PPUSH
// begin firstRussianAttack = 2 ;
10050: LD_ADDR_EXP 23
10054: PUSH
10055: LD_INT 2
10057: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10058: LD_INT 22
10060: PUSH
10061: LD_INT 5
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PPUSH
10082: CALL_OW 69
10086: PPUSH
10087: LD_INT 125
10089: PPUSH
10090: LD_INT 98
10092: PPUSH
10093: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10097: LD_INT 22
10099: PUSH
10100: LD_INT 1
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: LD_EXP 7
10135: PUSH
10136: LD_EXP 4
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: DIFF
10146: PPUSH
10147: LD_STRING DAtt1-Sol1-1
10149: PPUSH
10150: LD_STRING DAtt1-FSol1-1
10152: PPUSH
10153: CALL 4570 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10157: LD_EXP 1
10161: PPUSH
10162: LD_STRING DAtt1-JMM-1
10164: PPUSH
10165: CALL_OW 88
// if Lisa then
10169: LD_EXP 4
10173: IFFALSE 10189
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10175: LD_EXP 4
10179: PPUSH
10180: LD_STRING DAtt1a-Lisa-1
10182: PPUSH
10183: CALL_OW 88
10187: GO 10260
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10189: LD_INT 22
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 26
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PUSH
10229: LD_EXP 1
10233: PUSH
10234: LD_EXP 7
10238: PUSH
10239: LD_EXP 4
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: DIFF
10249: PPUSH
10250: LD_STRING DAtt1a-Sol1-1
10252: PPUSH
10253: LD_STRING DAtt1-FSol1-1
10255: PPUSH
10256: CALL 4570 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10260: LD_EXP 1
10264: PPUSH
10265: LD_STRING DAtt1a-JMM-1
10267: PPUSH
10268: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10272: LD_INT 22
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 26
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: PUSH
10312: LD_EXP 1
10316: PUSH
10317: LD_EXP 7
10321: PUSH
10322: LD_EXP 4
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: DIFF
10332: PPUSH
10333: LD_STRING DAtt1b-Sol1-1
10335: PPUSH
10336: LD_STRING DAtt1a-Sol1-1
10338: PPUSH
10339: CALL 4570 0 3
// end ;
10343: PPOPN 1
10345: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10346: LD_EXP 23
10350: PUSH
10351: LD_INT 2
10353: EQUAL
10354: PUSH
10355: LD_INT 5
10357: PPUSH
10358: LD_INT 22
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 70
10386: AND
10387: IFFALSE 10445
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10395: LD_ADDR_VAR 0 1
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_INT 5
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PPUSH
10424: CALL_OW 69
10428: PUSH
10429: FOR_IN
10430: IFFALSE 10443
// RemoveUnit ( i ) ;
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 64
10441: GO 10429
10443: POP
10444: POP
// end ;
10445: PPOPN 1
10447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10448: LD_INT 22
10450: PUSH
10451: LD_INT 5
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: PPUSH
10461: CALL_OW 69
10465: PUSH
10466: LD_INT 0
10468: EQUAL
10469: PUSH
10470: LD_EXP 23
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: IFFALSE 10492
10481: GO 10483
10483: DISABLE
// firstRussianAttack = 3 ;
10484: LD_ADDR_EXP 23
10488: PUSH
10489: LD_INT 3
10491: ST_TO_ADDR
10492: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10493: LD_EXP 28
10497: PUSH
10498: LD_INT 0
10500: EQUAL
10501: IFFALSE 10582
10503: GO 10505
10505: DISABLE
// begin timerStatus = 4 ;
10506: LD_ADDR_EXP 29
10510: PUSH
10511: LD_INT 4
10513: ST_TO_ADDR
// DialogueOn ;
10514: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10518: LD_EXP 13
10522: PPUSH
10523: LD_STRING D2-Don-1
10525: PPUSH
10526: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10530: LD_EXP 1
10534: PPUSH
10535: LD_STRING D2-JMM-1
10537: PPUSH
10538: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10542: LD_EXP 13
10546: PPUSH
10547: LD_STRING D2-Don-2
10549: PPUSH
10550: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10554: LD_EXP 1
10558: PPUSH
10559: LD_STRING D2-JMM-2
10561: PPUSH
10562: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10566: LD_EXP 13
10570: PPUSH
10571: LD_STRING D2-Don-3
10573: PPUSH
10574: CALL_OW 94
// DialogueOff ;
10578: CALL_OW 7
// end ;
10582: END
// every 12 12$0 do var tmp ;
10583: GO 10585
10585: DISABLE
10586: LD_INT 0
10588: PPUSH
// begin PrepareDonaldsonArmy ;
10589: CALL 1159 0 0
// CenterNowOnUnits ( Donaldson ) ;
10593: LD_EXP 13
10597: PPUSH
10598: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10602: LD_INT 22
10604: PUSH
10605: LD_INT 6
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: NOT
10617: IFFALSE 10633
// begin wait ( 3 ) ;
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10626: LD_STRING ACH_BASE
10628: PPUSH
10629: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10633: LD_ADDR_VAR 0 1
10637: PUSH
10638: LD_INT 22
10640: PUSH
10641: LD_INT 4
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 21
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 26
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: PUSH
10678: LD_EXP 5
10682: PUSH
10683: EMPTY
10684: LIST
10685: DIFF
10686: ST_TO_ADDR
// DialogueOn ;
10687: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 1
10700: PUSH
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_STRING D3-Sol1-1
10708: PPUSH
10709: LD_STRING D3-Sol1-1
10711: PPUSH
10712: CALL 4570 0 3
10716: DIFF
10717: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10718: LD_VAR 0 1
10722: PPUSH
10723: LD_STRING D3-Sol2-1
10725: PPUSH
10726: LD_STRING D3-Sol2-1
10728: PPUSH
10729: CALL 4570 0 3
// if Frank then
10733: LD_EXP 5
10737: IFFALSE 10751
// Say ( Frank , D3-Frank-1 ) ;
10739: LD_EXP 5
10743: PPUSH
10744: LD_STRING D3-Frank-1
10746: PPUSH
10747: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10751: LD_EXP 13
10755: PPUSH
10756: LD_STRING D3-Don-1
10758: PPUSH
10759: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10763: LD_EXP 13
10767: PPUSH
10768: LD_STRING D3-Don-1a
10770: PPUSH
10771: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D3-JMM-1
10782: PPUSH
10783: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10787: LD_EXP 13
10791: PPUSH
10792: LD_STRING D3-Don-2
10794: PPUSH
10795: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10799: LD_INT 22
10801: PUSH
10802: LD_INT 6
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 21
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 69
10827: IFFALSE 10965
// begin Say ( JMM , D3-JMM-2 ) ;
10829: LD_EXP 1
10833: PPUSH
10834: LD_STRING D3-JMM-2
10836: PPUSH
10837: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10841: LD_EXP 13
10845: PPUSH
10846: LD_STRING D3-Don-3
10848: PPUSH
10849: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10853: LD_EXP 1
10857: PPUSH
10858: LD_STRING D3-JMM-3
10860: PPUSH
10861: CALL_OW 88
// if IsOK ( Frank ) then
10865: LD_EXP 5
10869: PPUSH
10870: CALL_OW 302
10874: IFFALSE 10888
// Say ( Frank , D3-Frank-3 ) ;
10876: LD_EXP 5
10880: PPUSH
10881: LD_STRING D3-Frank-3
10883: PPUSH
10884: CALL_OW 88
// DialogueOff ;
10888: CALL_OW 7
// if IsOk ( Frank ) then
10892: LD_EXP 5
10896: PPUSH
10897: CALL_OW 302
10901: IFFALSE 10963
// begin SetSide ( Frank , 0 ) ;
10903: LD_EXP 5
10907: PPUSH
10908: LD_INT 0
10910: PPUSH
10911: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10915: LD_EXP 5
10919: PPUSH
10920: LD_INT 12
10922: PPUSH
10923: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10927: LD_EXP 5
10931: PPUSH
10932: LD_STRING 04t_Frank
10934: PPUSH
10935: CALL_OW 38
// wait ( 0 0$3 ) ;
10939: LD_INT 105
10941: PPUSH
10942: CALL_OW 67
// frankScoutBase = 1 ;
10946: LD_ADDR_EXP 25
10950: PUSH
10951: LD_INT 1
10953: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10954: LD_EXP 5
10958: PPUSH
10959: CALL_OW 64
// end ; end else
10963: GO 11052
// begin Say ( JMM , D3-JMM-4 ) ;
10965: LD_EXP 1
10969: PPUSH
10970: LD_STRING D3-JMM-4
10972: PPUSH
10973: CALL_OW 88
// DialogueOff ;
10977: CALL_OW 7
// if IsOk ( Frank ) then
10981: LD_EXP 5
10985: PPUSH
10986: CALL_OW 302
10990: IFFALSE 11052
// begin SetSide ( Frank , 0 ) ;
10992: LD_EXP 5
10996: PPUSH
10997: LD_INT 0
10999: PPUSH
11000: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11004: LD_EXP 5
11008: PPUSH
11009: LD_INT 12
11011: PPUSH
11012: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11016: LD_EXP 5
11020: PPUSH
11021: LD_STRING 04t_Frank
11023: PPUSH
11024: CALL_OW 38
// wait ( 0 0$3 ) ;
11028: LD_INT 105
11030: PPUSH
11031: CALL_OW 67
// frankScoutBase = 1 ;
11035: LD_ADDR_EXP 25
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11043: LD_EXP 5
11047: PPUSH
11048: CALL_OW 64
// end ; end ; end ;
11052: PPOPN 1
11054: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11055: LD_EXP 13
11059: PPUSH
11060: CALL_OW 255
11064: PUSH
11065: LD_INT 4
11067: EQUAL
11068: PUSH
11069: LD_EXP 13
11073: PPUSH
11074: CALL_OW 302
11078: AND
11079: IFFALSE 11319
11081: GO 11083
11083: DISABLE
11084: LD_INT 0
11086: PPUSH
11087: PPUSH
// begin wait ( 5 5$00 ) ;
11088: LD_INT 10500
11090: PPUSH
11091: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11095: LD_EXP 13
11099: PPUSH
11100: CALL_OW 255
11104: PUSH
11105: LD_INT 1
11107: EQUAL
11108: PUSH
11109: LD_EXP 13
11113: PPUSH
11114: CALL_OW 301
11118: OR
11119: IFFALSE 11123
// exit ;
11121: GO 11319
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11123: LD_EXP 13
11127: PPUSH
11128: LD_STRING D3b-Don-1
11130: PPUSH
11131: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11135: LD_ADDR_EXP 41
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11163: LD_INT 35
11165: PPUSH
11166: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11170: LD_VAR 0 2
11174: NOT
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 6
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 101
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: OR
11205: IFFALSE 11163
// if not tmp then
11207: LD_VAR 0 2
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 11319
// for i in tmp do
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: LD_VAR 0 2
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// ComAgressiveMove ( i , 52 , 64 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 52
11236: PPUSH
11237: LD_INT 64
11239: PPUSH
11240: CALL_OW 114
11244: GO 11226
11246: POP
11247: POP
// wait ( 0 0$10 ) ;
11248: LD_INT 350
11250: PPUSH
11251: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11255: LD_ADDR_VAR 0 1
11259: PUSH
11260: LD_INT 22
11262: PUSH
11263: LD_INT 4
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PUSH
11275: LD_EXP 5
11279: DIFF
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11298
// SetSide ( i , 1 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 235
11296: GO 11281
11298: POP
11299: POP
// if IsLive ( Donaldson ) then
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 300
11309: IFFALSE 11319
// saveDonaldson := 1 ;
11311: LD_ADDR_EXP 24
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// end ;
11319: PPOPN 2
11321: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11322: LD_EXP 13
11326: PPUSH
11327: CALL_OW 302
11331: PUSH
11332: LD_EXP 24
11336: NOT
11337: AND
11338: PUSH
11339: LD_EXP 41
11343: NOT
11344: AND
11345: PUSH
11346: LD_INT 26
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: PUSH
11364: LD_EXP 13
11368: PPUSH
11369: LD_EXP 1
11373: PPUSH
11374: CALL_OW 296
11378: PUSH
11379: LD_INT 6
11381: LESS
11382: OR
11383: AND
11384: IFFALSE 11439
11386: GO 11388
11388: DISABLE
11389: LD_INT 0
11391: PPUSH
// begin saveDonaldson := 1 ;
11392: LD_ADDR_EXP 24
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11400: LD_ADDR_VAR 0 1
11404: PUSH
11405: LD_INT 22
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: FOR_IN
11421: IFFALSE 11437
// SetSide ( i , 1 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 235
11435: GO 11420
11437: POP
11438: POP
// end ;
11439: PPOPN 1
11441: END
// every 0 0$1 trigger frankScoutBase do
11442: LD_EXP 25
11446: IFFALSE 11811
11448: GO 11450
11450: DISABLE
// begin wait ( 2 2$30 ) ;
11451: LD_INT 5250
11453: PPUSH
11454: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11458: LD_INT 35
11460: PPUSH
11461: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11465: LD_INT 81
11467: PUSH
11468: LD_INT 4
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 92
11477: PUSH
11478: LD_INT 84
11480: PUSH
11481: LD_INT 28
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PPUSH
11497: CALL_OW 69
11501: NOT
11502: IFFALSE 11458
// uc_side = 4 ;
11504: LD_ADDR_OWVAR 20
11508: PUSH
11509: LD_INT 4
11511: ST_TO_ADDR
// uc_nation = 1 ;
11512: LD_ADDR_OWVAR 21
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11520: LD_ADDR_EXP 5
11524: PUSH
11525: LD_STRING 04t_Frank
11527: PPUSH
11528: CALL_OW 34
11532: ST_TO_ADDR
// if not Frank then
11533: LD_EXP 5
11537: NOT
11538: IFFALSE 11542
// exit ;
11540: GO 11811
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11542: LD_EXP 5
11546: PPUSH
11547: LD_INT 13
11549: PPUSH
11550: LD_INT 0
11552: PPUSH
11553: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11557: LD_INT 35
11559: PPUSH
11560: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11564: LD_EXP 1
11568: PPUSH
11569: CALL_OW 310
11573: NOT
11574: PUSH
11575: LD_EXP 1
11579: PPUSH
11580: LD_INT 4
11582: PPUSH
11583: CALL_OW 296
11587: PUSH
11588: LD_INT 20
11590: LESS
11591: AND
11592: IFFALSE 11625
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11594: LD_EXP 5
11598: PPUSH
11599: LD_EXP 1
11603: PPUSH
11604: CALL_OW 250
11608: PPUSH
11609: LD_EXP 1
11613: PPUSH
11614: CALL_OW 251
11618: PPUSH
11619: CALL_OW 111
11623: GO 11640
// ComMoveXY ( Frank , 51 , 15 ) ;
11625: LD_EXP 5
11629: PPUSH
11630: LD_INT 51
11632: PPUSH
11633: LD_INT 15
11635: PPUSH
11636: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11640: LD_EXP 5
11644: PPUSH
11645: LD_EXP 1
11649: PPUSH
11650: CALL_OW 296
11654: PUSH
11655: LD_INT 10
11657: LESS
11658: IFFALSE 11557
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11660: LD_EXP 1
11664: PUSH
11665: LD_EXP 5
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 87
// DialogueOn ;
11678: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11682: LD_EXP 5
11686: PPUSH
11687: LD_STRING D3a-Frank-1
11689: PPUSH
11690: CALL_OW 88
// if Lisa then
11694: LD_EXP 4
11698: IFFALSE 11748
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11700: LD_EXP 4
11704: PPUSH
11705: LD_STRING D3a-Lisa-1
11707: PPUSH
11708: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11712: LD_EXP 5
11716: PPUSH
11717: LD_STRING D3a-Frank-2
11719: PPUSH
11720: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11724: LD_EXP 4
11728: PPUSH
11729: LD_STRING D3a-Lisa-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11736: LD_EXP 5
11740: PPUSH
11741: LD_STRING D3a-Frank-3
11743: PPUSH
11744: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11748: LD_EXP 1
11752: PPUSH
11753: LD_STRING D3a-JMM-3
11755: PPUSH
11756: CALL_OW 88
// DialogueOff ;
11760: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11764: LD_EXP 5
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 235
// InGameOn ;
11776: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11780: LD_INT 1
11782: PPUSH
11783: LD_INT 7
11785: PPUSH
11786: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11790: LD_INT 93
11792: PPUSH
11793: LD_INT 91
11795: PPUSH
11796: CALL_OW 84
// wait ( 0 0$5 ) ;
11800: LD_INT 175
11802: PPUSH
11803: CALL_OW 67
// InGameOff ;
11807: CALL_OW 9
// end ;
11811: END
// every 12 12$0 trigger Difficulty > 1 do
11812: LD_OWVAR 67
11816: PUSH
11817: LD_INT 1
11819: GREATER
11820: IFFALSE 11844
11822: GO 11824
11824: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11825: LD_INT 24
11827: PPUSH
11828: LD_INT 24
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: LD_INT 53
11839: PPUSH
11840: CALL_OW 185
11844: END
// every 18 18$0 do
11845: GO 11847
11847: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11848: LD_EXP 14
11852: PPUSH
11853: LD_STRING D4-Har-1
11855: PPUSH
11856: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11860: LD_EXP 1
11864: PPUSH
11865: LD_STRING D4-JMM-1
11867: PPUSH
11868: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11872: LD_EXP 14
11876: PPUSH
11877: LD_STRING D4-Har-2
11879: PPUSH
11880: CALL_OW 94
// case Query ( Q1 ) of 1 :
11884: LD_STRING Q1
11886: PPUSH
11887: CALL_OW 97
11891: PUSH
11892: LD_INT 1
11894: DOUBLE
11895: EQUAL
11896: IFTRUE 11900
11898: GO 11959
11900: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11901: LD_EXP 1
11905: PPUSH
11906: LD_STRING D5-JMM-1
11908: PPUSH
11909: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11913: LD_EXP 14
11917: PPUSH
11918: LD_STRING D5-Har-1
11920: PPUSH
11921: CALL_OW 94
// timeToSupport = 10 10$0 ;
11925: LD_ADDR_EXP 28
11929: PUSH
11930: LD_INT 21000
11932: ST_TO_ADDR
// timerStatus = 2 ;
11933: LD_ADDR_EXP 29
11937: PUSH
11938: LD_INT 2
11940: ST_TO_ADDR
// startTimer = 1 ;
11941: LD_ADDR_EXP 30
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// harrAnswer = 1 ;
11949: LD_ADDR_EXP 26
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// end ; 2 :
11957: GO 12094
11959: LD_INT 2
11961: DOUBLE
11962: EQUAL
11963: IFTRUE 11967
11965: GO 12026
11967: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11968: LD_EXP 1
11972: PPUSH
11973: LD_STRING D5-JMM-2
11975: PPUSH
11976: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11980: LD_EXP 14
11984: PPUSH
11985: LD_STRING D5-Har-2
11987: PPUSH
11988: CALL_OW 94
// timeToSupport = 5 5$0 ;
11992: LD_ADDR_EXP 28
11996: PUSH
11997: LD_INT 10500
11999: ST_TO_ADDR
// timerStatus = 2 ;
12000: LD_ADDR_EXP 29
12004: PUSH
12005: LD_INT 2
12007: ST_TO_ADDR
// startTimer = 1 ;
12008: LD_ADDR_EXP 30
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// harrAnswer = 2 ;
12016: LD_ADDR_EXP 26
12020: PUSH
12021: LD_INT 2
12023: ST_TO_ADDR
// end ; 3 :
12024: GO 12094
12026: LD_INT 3
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12093
12034: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12035: LD_EXP 1
12039: PPUSH
12040: LD_STRING D5-JMM-3
12042: PPUSH
12043: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12047: LD_EXP 14
12051: PPUSH
12052: LD_STRING D5-Har-3
12054: PPUSH
12055: CALL_OW 94
// timeToSupport = 5 5$0 ;
12059: LD_ADDR_EXP 28
12063: PUSH
12064: LD_INT 10500
12066: ST_TO_ADDR
// timerStatus = 2 ;
12067: LD_ADDR_EXP 29
12071: PUSH
12072: LD_INT 2
12074: ST_TO_ADDR
// startTimer = 1 ;
12075: LD_ADDR_EXP 30
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// harrAnswer = 3 ;
12083: LD_ADDR_EXP 26
12087: PUSH
12088: LD_INT 3
12090: ST_TO_ADDR
// end ; end ;
12091: GO 12094
12093: POP
// end ;
12094: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12095: LD_EXP 29
12099: PUSH
12100: LD_INT 2
12102: EQUAL
12103: PUSH
12104: LD_EXP 28
12108: PUSH
12109: LD_INT 0
12111: EQUAL
12112: AND
12113: IFFALSE 12402
12115: GO 12117
12117: DISABLE
// begin timerStatus = 4 ;
12118: LD_ADDR_EXP 29
12122: PUSH
12123: LD_INT 4
12125: ST_TO_ADDR
// if harrAnswer = 1 then
12126: LD_EXP 26
12130: PUSH
12131: LD_INT 1
12133: EQUAL
12134: IFFALSE 12218
// begin PrepareHarrisonSupport ( 3 ) ;
12136: LD_INT 3
12138: PPUSH
12139: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12143: LD_INT 2100
12145: PPUSH
12146: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12150: LD_EXP 14
12154: PPUSH
12155: LD_STRING D7-Har-1
12157: PPUSH
12158: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12162: LD_STRING M2
12164: PPUSH
12165: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12169: LD_ADDR_EXP 27
12173: PUSH
12174: LD_INT 31500
12176: PUSH
12177: LD_INT 10500
12179: PUSH
12180: LD_INT 8400
12182: PUSH
12183: LD_INT 6300
12185: PUSH
12186: LD_INT 6300
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_OWVAR 67
12199: ARRAY
12200: PLUS
12201: ST_TO_ADDR
// startTimer = 1 ;
12202: LD_ADDR_EXP 30
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// timerStatus = 3 ;
12210: LD_ADDR_EXP 29
12214: PUSH
12215: LD_INT 3
12217: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12218: LD_EXP 26
12222: PUSH
12223: LD_INT 2
12225: EQUAL
12226: IFFALSE 12310
// begin PrepareHarrisonSupport ( 4 ) ;
12228: LD_INT 4
12230: PPUSH
12231: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12235: LD_INT 2100
12237: PPUSH
12238: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12242: LD_EXP 14
12246: PPUSH
12247: LD_STRING D7-Har-1
12249: PPUSH
12250: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12254: LD_STRING M2
12256: PPUSH
12257: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12261: LD_ADDR_EXP 27
12265: PUSH
12266: LD_INT 33600
12268: PUSH
12269: LD_INT 10500
12271: PUSH
12272: LD_INT 8400
12274: PUSH
12275: LD_INT 6300
12277: PUSH
12278: LD_INT 5250
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_OWVAR 67
12291: ARRAY
12292: PLUS
12293: ST_TO_ADDR
// startTimer = 1 ;
12294: LD_ADDR_EXP 30
12298: PUSH
12299: LD_INT 1
12301: ST_TO_ADDR
// timerStatus = 3 ;
12302: LD_ADDR_EXP 29
12306: PUSH
12307: LD_INT 3
12309: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12310: LD_EXP 26
12314: PUSH
12315: LD_INT 3
12317: EQUAL
12318: IFFALSE 12402
// begin PrepareHarrisonSupport ( 5 ) ;
12320: LD_INT 5
12322: PPUSH
12323: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12327: LD_INT 2100
12329: PPUSH
12330: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12334: LD_EXP 14
12338: PPUSH
12339: LD_STRING D7-Har-1
12341: PPUSH
12342: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12346: LD_STRING M2
12348: PPUSH
12349: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12353: LD_ADDR_EXP 27
12357: PUSH
12358: LD_INT 35700
12360: PUSH
12361: LD_INT 10500
12363: PUSH
12364: LD_INT 6300
12366: PUSH
12367: LD_INT 4200
12369: PUSH
12370: LD_INT 3150
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: LD_OWVAR 67
12383: ARRAY
12384: PLUS
12385: ST_TO_ADDR
// startTimer = 1 ;
12386: LD_ADDR_EXP 30
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// timerStatus = 3 ;
12394: LD_ADDR_EXP 29
12398: PUSH
12399: LD_INT 3
12401: ST_TO_ADDR
// end ; end ;
12402: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12403: LD_EXP 27
12407: PUSH
12408: LD_INT 8400
12410: LESSEQUAL
12411: PUSH
12412: LD_EXP 29
12416: PUSH
12417: LD_INT 3
12419: EQUAL
12420: AND
12421: IFFALSE 12453
12423: GO 12425
12425: DISABLE
// begin DialogueOn ;
12426: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12430: LD_EXP 14
12434: PPUSH
12435: LD_STRING D7a-Har-1
12437: PPUSH
12438: CALL_OW 94
// DialogueOff ;
12442: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12446: LD_STRING M2a
12448: PPUSH
12449: CALL_OW 337
// end ;
12453: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12454: LD_EXP 27
12458: PUSH
12459: LD_INT 0
12461: LESSEQUAL
12462: PUSH
12463: LD_EXP 29
12467: PUSH
12468: LD_INT 3
12470: EQUAL
12471: AND
12472: PUSH
12473: LD_EXP 40
12477: NOT
12478: AND
12479: IFFALSE 12618
12481: GO 12483
12483: DISABLE
12484: LD_INT 0
12486: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 69
12506: PUSH
12507: LD_EXP 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: DIFF
12515: ST_TO_ADDR
// saveDonaldson := 2 ;
12516: LD_ADDR_EXP 24
12520: PUSH
12521: LD_INT 2
12523: ST_TO_ADDR
// DialogueOn ;
12524: CALL_OW 6
// if IsOk ( Donaldson ) then
12528: LD_EXP 13
12532: PPUSH
12533: CALL_OW 302
12537: IFFALSE 12553
// SayRadio ( Harisson , D8-Har-1 ) else
12539: LD_EXP 14
12543: PPUSH
12544: LD_STRING D8-Har-1
12546: PPUSH
12547: CALL_OW 94
12551: GO 12565
// SayRadio ( Harisson , D8-Har-1a ) ;
12553: LD_EXP 14
12557: PPUSH
12558: LD_STRING D8-Har-1a
12560: PPUSH
12561: CALL_OW 94
// DialogueOff ;
12565: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_INT 4
12576: PPUSH
12577: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 88
12588: PPUSH
12589: LD_INT 89
12591: PPUSH
12592: CALL_OW 114
// reliefOfCommand := true ;
12596: LD_ADDR_EXP 48
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12604: LD_INT 350
12606: PPUSH
12607: CALL_OW 67
// YouLost ( LostCommand ) ;
12611: LD_STRING LostCommand
12613: PPUSH
12614: CALL_OW 104
// end ;
12618: PPOPN 1
12620: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12621: LD_INT 22
12623: PUSH
12624: LD_INT 6
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 21
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: PUSH
12650: LD_INT 0
12652: EQUAL
12653: PUSH
12654: LD_EXP 20
12658: PUSH
12659: LD_INT 0
12661: EQUAL
12662: AND
12663: PUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_INT 1
12671: EQUAL
12672: AND
12673: IFFALSE 12767
12675: GO 12677
12677: DISABLE
12678: LD_INT 0
12680: PPUSH
12681: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_INT 22
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 21
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 23
12709: PUSH
12710: LD_INT 1
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: ST_TO_ADDR
// for i in tmp do
12727: LD_ADDR_VAR 0 1
12731: PUSH
12732: LD_VAR 0 2
12736: PUSH
12737: FOR_IN
12738: IFFALSE 12765
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12740: LD_VAR 0 1
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: LD_INT 4
12750: PPUSH
12751: CALL_OW 12
12755: PPUSH
12756: LD_INT 500
12758: PPUSH
12759: CALL_OW 492
12763: GO 12737
12765: POP
12766: POP
// end ; end_of_file
12767: PPOPN 2
12769: END
// every 0 0$1 trigger AIEnable do
12770: LD_EXP 37
12774: IFFALSE 12868
12776: GO 12778
12778: DISABLE
// begin enable ;
12779: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12780: LD_INT 3
12782: PPUSH
12783: LD_INT 21
12785: PPUSH
12786: LD_INT 7
12788: PPUSH
12789: CALL 6002 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12793: LD_INT 3
12795: PPUSH
12796: LD_INT 8
12798: PPUSH
12799: LD_INT 7
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL 6306 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12809: LD_EXP 20
12813: PUSH
12814: LD_INT 2
12816: EQUAL
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 6
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PPUSH
12828: CALL_OW 69
12832: AND
12833: IFFALSE 12868
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12835: LD_INT 6
12837: PPUSH
12838: LD_EXP 21
12842: PPUSH
12843: LD_INT 6
12845: PPUSH
12846: CALL 6002 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12850: LD_INT 6
12852: PPUSH
12853: LD_INT 9
12855: PPUSH
12856: LD_INT 6
12858: PPUSH
12859: LD_EXP 22
12863: PPUSH
12864: CALL 6306 0 4
// end ; end ;
12868: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12869: LD_EXP 15
12873: PPUSH
12874: CALL_OW 310
12878: NOT
12879: PUSH
12880: LD_INT 21
12882: PPUSH
12883: CALL_OW 302
12887: AND
12888: PUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 255
12896: PUSH
12897: LD_INT 3
12899: EQUAL
12900: AND
12901: IFFALSE 12918
12903: GO 12905
12905: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12906: LD_EXP 15
12910: PPUSH
12911: LD_INT 21
12913: PPUSH
12914: CALL_OW 120
12918: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12919: LD_INT 22
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 55
12941: PUSH
12942: EMPTY
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: PPUSH
12950: CALL_OW 69
12954: PUSH
12955: LD_INT 0
12957: EQUAL
12958: PUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: PUSH
12981: LD_INT 21
12983: PPUSH
12984: CALL_OW 255
12988: PUSH
12989: LD_INT 3
12991: EQUAL
12992: AND
12993: PUSH
12994: LD_INT 21
12996: PPUSH
12997: CALL_OW 302
13001: AND
13002: IFFALSE 13214
13004: GO 13006
13006: DISABLE
// begin enable ;
13007: ENABLE
// if Difficulty = 1 then
13008: LD_OWVAR 67
13012: PUSH
13013: LD_INT 1
13015: EQUAL
13016: IFFALSE 13060
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13018: LD_INT 3
13020: PPUSH
13021: LD_INT 24
13023: PPUSH
13024: LD_OWVAR 67
13028: PUSH
13029: LD_INT 2
13031: PLUS
13032: PPUSH
13033: LD_INT 42
13035: PUSH
13036: LD_INT 44
13038: PUSH
13039: LD_INT 43
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: LD_INT 21
13055: PPUSH
13056: CALL 6820 0 7
// if Difficulty = 2 then
13060: LD_OWVAR 67
13064: PUSH
13065: LD_INT 2
13067: EQUAL
13068: IFFALSE 13135
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13070: LD_INT 3
13072: PPUSH
13073: LD_INT 24
13075: PPUSH
13076: LD_OWVAR 67
13080: PUSH
13081: LD_INT 2
13083: PLUS
13084: PPUSH
13085: LD_INT 44
13087: PUSH
13088: LD_INT 44
13090: PUSH
13091: LD_INT 43
13093: PUSH
13094: LD_INT 43
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 1
13121: PPUSH
13122: LD_INT 2
13124: PPUSH
13125: CALL_OW 12
13129: ARRAY
13130: PPUSH
13131: CALL 6820 0 7
// if Difficulty >= 3 then
13135: LD_OWVAR 67
13139: PUSH
13140: LD_INT 3
13142: GREATEREQUAL
13143: IFFALSE 13214
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13145: LD_INT 3
13147: PPUSH
13148: LD_INT 24
13150: PPUSH
13151: LD_OWVAR 67
13155: PUSH
13156: LD_INT 2
13158: PPUSH
13159: LD_INT 3
13161: PPUSH
13162: CALL_OW 12
13166: PLUS
13167: PPUSH
13168: LD_INT 44
13170: PUSH
13171: LD_INT 44
13173: PUSH
13174: LD_INT 43
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 23
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 2
13203: PPUSH
13204: CALL_OW 12
13208: ARRAY
13209: PPUSH
13210: CALL 6820 0 7
// end ;
13214: END
// every 0 0$1 do
13215: GO 13217
13217: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13218: LD_INT 3
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: CALL 5923 0 3
13231: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13232: LD_EXP 20
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: IFFALSE 13387
13242: GO 13244
13244: DISABLE
13245: LD_INT 0
13247: PPUSH
13248: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_INT 6
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 21
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 34
13276: PUSH
13277: LD_INT 51
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13294: LD_VAR 0 2
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: LD_EXP 21
13307: PPUSH
13308: CALL_OW 250
13312: PUSH
13313: LD_INT 5
13315: MINUS
13316: PPUSH
13317: LD_EXP 21
13321: PPUSH
13322: CALL_OW 251
13326: PUSH
13327: LD_INT 5
13329: MINUS
13330: PPUSH
13331: CALL_OW 111
// wait ( 0 0$5 ) ;
13335: LD_INT 175
13337: PPUSH
13338: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13342: LD_VAR 0 2
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PPUSH
13351: LD_INT 41
13353: PPUSH
13354: LD_INT 52
13356: PPUSH
13357: CALL_OW 177
// wait ( 0 0$40 ) ;
13361: LD_INT 1400
13363: PPUSH
13364: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13368: LD_VAR 0 2
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PPUSH
13377: LD_INT 41
13379: PPUSH
13380: LD_INT 44
13382: PPUSH
13383: CALL_OW 111
// end ;
13387: PPOPN 2
13389: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13390: LD_EXP 21
13394: PPUSH
13395: CALL_OW 274
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 275
13407: PUSH
13408: LD_INT 100
13410: GREATEREQUAL
13411: IFFALSE 13639
13413: GO 13415
13415: DISABLE
13416: LD_INT 0
13418: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 6
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_INT 4
13475: PPUSH
13476: LD_INT 39
13478: PPUSH
13479: LD_INT 37
13481: PPUSH
13482: LD_INT 3
13484: PPUSH
13485: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13489: LD_VAR 0 1
13493: PUSH
13494: LD_INT 1
13496: ARRAY
13497: PPUSH
13498: LD_INT 29
13500: PPUSH
13501: LD_INT 42
13503: PPUSH
13504: LD_INT 54
13506: PPUSH
13507: LD_INT 3
13509: PPUSH
13510: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: LD_INT 6
13525: PPUSH
13526: LD_INT 38
13528: PPUSH
13529: LD_INT 48
13531: PPUSH
13532: LD_INT 0
13534: PPUSH
13535: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PPUSH
13548: LD_INT 2
13550: PPUSH
13551: LD_INT 32
13553: PPUSH
13554: LD_INT 38
13556: PPUSH
13557: LD_INT 2
13559: PPUSH
13560: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13564: LD_VAR 0 1
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: LD_INT 26
13575: PPUSH
13576: LD_INT 39
13578: PPUSH
13579: LD_INT 55
13581: PPUSH
13582: LD_INT 3
13584: PPUSH
13585: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_INT 32
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 31
13606: PPUSH
13607: LD_INT 3
13609: PPUSH
13610: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_INT 31
13625: PPUSH
13626: LD_INT 50
13628: PPUSH
13629: LD_INT 51
13631: PPUSH
13632: LD_INT 4
13634: PPUSH
13635: CALL_OW 205
// end ;
13639: PPOPN 1
13641: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13642: LD_EXP 46
13646: IFFALSE 14207
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
13654: PPUSH
13655: PPUSH
// begin enable ;
13656: ENABLE
// if not ruMobile then
13657: LD_EXP 46
13661: NOT
13662: IFFALSE 13666
// exit ;
13664: GO 14207
// for i in ruMobile do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: LD_EXP 46
13675: PUSH
13676: FOR_IN
13677: IFFALSE 14205
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 302
13688: NOT
13689: PUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 255
13699: PUSH
13700: LD_INT 3
13702: NONEQUAL
13703: OR
13704: IFFALSE 13724
// begin ruMobile := ruMobile diff i ;
13706: LD_ADDR_EXP 46
13710: PUSH
13711: LD_EXP 46
13715: PUSH
13716: LD_VAR 0 1
13720: DIFF
13721: ST_TO_ADDR
// continue ;
13722: GO 13676
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 110
13733: NOT
13734: PUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 110
13744: PUSH
13745: LD_INT 0
13747: EQUAL
13748: OR
13749: IFFALSE 13864
// begin if GetFuel ( i ) < 50 then
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 261
13760: PUSH
13761: LD_INT 50
13763: LESS
13764: IFFALSE 13823
// begin ComMoveXY ( i , 106 , 88 ) ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13781: LD_INT 35
13783: PPUSH
13784: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_INT 106
13795: PPUSH
13796: LD_INT 88
13798: PPUSH
13799: CALL_OW 297
13803: PUSH
13804: LD_INT 4
13806: LESS
13807: IFFALSE 13781
// SetFuel ( i , 100 ) ;
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 100
13816: PPUSH
13817: CALL_OW 240
// end else
13821: GO 13864
// if not IsInArea ( i , ruParking ) then
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 25
13830: PPUSH
13831: CALL_OW 308
13835: NOT
13836: IFFALSE 13852
// ComMoveToArea ( i , ruParking ) else
13838: LD_VAR 0 1
13842: PPUSH
13843: LD_INT 25
13845: PPUSH
13846: CALL_OW 113
13850: GO 13864
// SetTag ( i , 101 ) ;
13852: LD_VAR 0 1
13856: PPUSH
13857: LD_INT 101
13859: PPUSH
13860: CALL_OW 109
// end ; if GetTag ( i ) = 101 then
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 110
13873: PUSH
13874: LD_INT 101
13876: EQUAL
13877: IFFALSE 14007
// begin if GetLives ( i ) < 650 then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 256
13888: PUSH
13889: LD_INT 650
13891: LESS
13892: IFFALSE 13984
// begin if not IsDrivenBy ( i ) then
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 311
13903: NOT
13904: IFFALSE 13908
// continue ;
13906: GO 13676
// mech := IsDrivenBy ( i ) ;
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_VAR 0 1
13917: PPUSH
13918: CALL_OW 311
13922: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13923: LD_VAR 0 2
13927: PPUSH
13928: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13946: LD_INT 35
13948: PPUSH
13949: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 256
13962: PUSH
13963: LD_INT 1000
13965: EQUAL
13966: IFFALSE 13946
// ComEnterUnit ( mech , i ) ;
13968: LD_VAR 0 2
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 120
// end else
13982: GO 14007
// if IsDrivenBy ( i ) then
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 311
13993: IFFALSE 14007
// SetTag ( i , 102 ) ;
13995: LD_VAR 0 1
13999: PPUSH
14000: LD_INT 102
14002: PPUSH
14003: CALL_OW 109
// end ; if GetTag ( i ) = 102 then
14007: LD_VAR 0 1
14011: PPUSH
14012: CALL_OW 110
14016: PUSH
14017: LD_INT 102
14019: EQUAL
14020: IFFALSE 14203
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: LD_INT 24
14029: PPUSH
14030: LD_INT 81
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 70
14044: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14045: LD_VAR 0 1
14049: PPUSH
14050: CALL_OW 256
14054: PUSH
14055: LD_INT 650
14057: LESS
14058: IFFALSE 14083
// begin ComStop ( i ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 141
// SetTag ( i , 0 ) ;
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL_OW 109
// continue ;
14081: GO 13676
// end ; if enemy then
14083: LD_VAR 0 3
14087: IFFALSE 14127
// begin if not HasTask ( i ) then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 314
14098: NOT
14099: IFFALSE 14125
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 74
14120: PPUSH
14121: CALL_OW 115
// end else
14125: GO 14203
// if ruMobile then
14127: LD_EXP 46
14131: IFFALSE 14203
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: LD_INT 81
14140: PUSH
14141: LD_INT 3
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// if enemy then
14153: LD_VAR 0 3
14157: IFFALSE 14203
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14159: LD_VAR 0 1
14163: PPUSH
14164: LD_INT 95
14166: PUSH
14167: LD_INT 74
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 67
14176: PUSH
14177: LD_INT 59
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 55
14186: PUSH
14187: LD_INT 41
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PPUSH
14199: CALL 81014 0 2
// end ; end ; end ;
14203: GO 13676
14205: POP
14206: POP
// end ; end_of_file
14207: PPOPN 3
14209: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14210: LD_INT 0
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14219: LD_ADDR_VAR 0 3
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 6
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 25
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 3
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14278: LD_ADDR_VAR 0 7
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_INT 6
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 21
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 25
14305: PUSH
14306: LD_INT 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 54
14315: PUSH
14316: EMPTY
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14330: LD_ADDR_VAR 0 4
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_INT 6
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 25
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: PPUSH
14370: CALL_OW 69
14374: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14375: LD_ADDR_VAR 0 6
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: LD_INT 6
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14420: LD_ADDR_VAR 0 8
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 6
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 34
14447: PUSH
14448: LD_INT 51
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 6
14477: EQUAL
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 266
14488: PUSH
14489: LD_INT 0
14491: EQUAL
14492: AND
14493: IFFALSE 14513
// begin ruPDepot = building ;
14495: LD_ADDR_EXP 21
14499: PUSH
14500: LD_VAR 0 1
14504: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14505: LD_ADDR_EXP 20
14509: PUSH
14510: LD_INT 1
14512: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 266
14522: PUSH
14523: LD_INT 4
14525: EQUAL
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 255
14536: PUSH
14537: LD_INT 6
14539: EQUAL
14540: AND
14541: IFFALSE 14574
// for i in tmpSold do
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_VAR 0 3
14552: PUSH
14553: FOR_IN
14554: IFFALSE 14572
// ComEnterUnit ( i , building ) ;
14556: LD_VAR 0 2
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 120
14570: GO 14553
14572: POP
14573: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 266
14583: PUSH
14584: LD_INT 6
14586: EQUAL
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 6
14600: EQUAL
14601: AND
14602: IFFALSE 14660
// begin for i in tmpSci do
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_VAR 0 6
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14633
// ComEnterUnit ( i , building ) ;
14617: LD_VAR 0 2
14621: PPUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 120
14631: GO 14614
14633: POP
14634: POP
// ResAllTechs ( 6 , building , 3 ) ;
14635: LD_INT 6
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_INT 3
14645: PPUSH
14646: CALL 5923 0 3
// ruPLab = building ;
14650: LD_ADDR_EXP 22
14654: PUSH
14655: LD_VAR 0 1
14659: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 266
14669: PUSH
14670: LD_INT 2
14672: EQUAL
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 255
14683: PUSH
14684: LD_INT 6
14686: EQUAL
14687: AND
14688: IFFALSE 14739
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14690: LD_ADDR_VAR 0 5
14694: PUSH
14695: LD_VAR 0 8
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: PPUSH
14704: CALL_OW 313
14708: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14709: LD_VAR 0 5
14713: PPUSH
14714: CALL_OW 121
// wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 266
14748: PUSH
14749: LD_INT 32
14751: EQUAL
14752: PUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 255
14762: PUSH
14763: LD_INT 6
14765: EQUAL
14766: AND
14767: IFFALSE 14819
// begin ComPlaceWeapon ( building , 42 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 42
14776: PPUSH
14777: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14781: LD_VAR 0 7
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 122
// wait ( 0 0$1 ) ;
14794: LD_INT 35
14796: PPUSH
14797: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14801: LD_VAR 0 7
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14819: LD_VAR 0 1
14823: PPUSH
14824: CALL_OW 266
14828: PUSH
14829: LD_INT 31
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 255
14842: PUSH
14843: LD_INT 6
14845: EQUAL
14846: AND
14847: IFFALSE 14913
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14849: LD_VAR 0 7
14853: PUSH
14854: LD_INT 2
14856: ARRAY
14857: PPUSH
14858: CALL_OW 122
// wait ( 0 0$1 ) ;
14862: LD_INT 35
14864: PPUSH
14865: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14869: LD_VAR 0 7
14873: PUSH
14874: LD_INT 2
14876: ARRAY
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14887: LD_VAR 0 4
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PPUSH
14896: LD_EXP 21
14900: PPUSH
14901: CALL_OW 120
// baseReadyToBuild = 2 ;
14905: LD_ADDR_EXP 20
14909: PUSH
14910: LD_INT 2
14912: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 266
14922: PUSH
14923: LD_INT 32
14925: EQUAL
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 255
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: AND
14941: PUSH
14942: LD_EXP 32
14946: PUSH
14947: LD_INT 0
14949: EQUAL
14950: AND
14951: IFFALSE 15196
// begin bunkerDialog = 1 ;
14953: LD_ADDR_EXP 32
14957: PUSH
14958: LD_INT 1
14960: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14961: LD_EXP 11
14965: PPUSH
14966: CALL_OW 302
14970: IFFALSE 14986
// Say ( Claptopn , D11-Eng1-1 ) else
14972: LD_EXP 11
14976: PPUSH
14977: LD_STRING D11-Eng1-1
14979: PPUSH
14980: CALL_OW 88
14984: GO 15182
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14986: LD_INT 22
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 26
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 69
15036: PUSH
15037: LD_EXP 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: PUSH
15045: LD_INT 0
15047: GREATER
15048: DIFF
15049: IFFALSE 15123
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15051: LD_INT 22
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 21
15063: PUSH
15064: LD_INT 1
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 26
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_EXP 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: DIFF
15110: PPUSH
15111: LD_STRING D11-Eng1-1
15113: PPUSH
15114: LD_STRING D11-Eng1-1
15116: PPUSH
15117: CALL 4570 0 3
15121: GO 15182
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15123: LD_INT 22
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 21
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 26
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: LD_EXP 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: DIFF
15171: PPUSH
15172: LD_STRING D11-Eng1-1
15174: PPUSH
15175: LD_STRING D11-Eng1-1
15177: PPUSH
15178: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15182: LD_EXP 33
15186: PUSH
15187: LD_INT 0
15189: EQUAL
15190: IFFALSE 15196
// EnergyDialog ;
15192: CALL 4975 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 266
15205: PUSH
15206: LD_INT 29
15208: EQUAL
15209: PUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 255
15219: PUSH
15220: LD_INT 1
15222: EQUAL
15223: AND
15224: IFFALSE 15234
// buildOil = 1 ;
15226: LD_ADDR_EXP 34
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 266
15243: PUSH
15244: LD_INT 26
15246: EQUAL
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 255
15257: PUSH
15258: LD_INT 1
15260: EQUAL
15261: AND
15262: IFFALSE 15272
// buildPower = 1 ;
15264: LD_ADDR_EXP 35
15268: PUSH
15269: LD_INT 1
15271: ST_TO_ADDR
// end ;
15272: PPOPN 8
15274: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 266
15284: PUSH
15285: LD_INT 3
15287: EQUAL
15288: PUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL_OW 255
15298: PUSH
15299: LD_INT 1
15301: EQUAL
15302: AND
15303: PUSH
15304: LD_EXP 31
15308: PUSH
15309: LD_INT 0
15311: EQUAL
15312: AND
15313: IFFALSE 15661
// begin factoryDialog = 1 ;
15315: LD_ADDR_EXP 31
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15323: LD_INT 47
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 321
15333: PUSH
15334: LD_INT 1
15336: EQUAL
15337: PUSH
15338: LD_INT 45
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 321
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: AND
15353: IFFALSE 15661
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15355: LD_INT 22
15357: PUSH
15358: LD_INT 1
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 21
15367: PUSH
15368: LD_INT 3
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 24
15387: PUSH
15388: LD_INT 1000
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15414: LD_EXP 1
15418: PPUSH
15419: LD_STRING D9a-JMM-1
15421: PPUSH
15422: CALL_OW 88
// if IsOK ( Campell ) then
15426: LD_EXP 12
15430: PPUSH
15431: CALL_OW 302
15435: IFFALSE 15451
// Say ( Campell , D9a-Mech1-1 ) else
15437: LD_EXP 12
15441: PPUSH
15442: LD_STRING D9a-Mech1-1
15444: PPUSH
15445: CALL_OW 88
15449: GO 15647
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15451: LD_INT 22
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 21
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 26
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: PUSH
15502: LD_EXP 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: PUSH
15510: LD_INT 0
15512: GREATER
15513: DIFF
15514: IFFALSE 15588
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15516: LD_INT 22
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 21
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 25
15538: PUSH
15539: LD_INT 3
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 26
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 69
15566: PUSH
15567: LD_EXP 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: DIFF
15575: PPUSH
15576: LD_STRING D9a-Mech1-1
15578: PPUSH
15579: LD_STRING D9a-Mech1-1
15581: PPUSH
15582: CALL 4570 0 3
15586: GO 15647
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15588: LD_INT 22
15590: PUSH
15591: LD_INT 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: PUSH
15628: LD_EXP 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: DIFF
15636: PPUSH
15637: LD_STRING D9a-Mech1-1
15639: PPUSH
15640: LD_STRING D9a-Mech1-1
15642: PPUSH
15643: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15647: LD_EXP 33
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: IFFALSE 15661
// EnergyDialog ;
15657: CALL 4975 0 0
// end ; end ; end ;
15661: PPOPN 1
15663: END
// on UnitDestroyed ( unit ) do var mech ;
15664: LD_INT 0
15666: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL 35825 0 1
// if unit = JMM then
15676: LD_VAR 0 1
15680: PUSH
15681: LD_EXP 1
15685: EQUAL
15686: IFFALSE 15695
// YouLost ( JMM ) ;
15688: LD_STRING JMM
15690: PPUSH
15691: CALL_OW 104
// if unit = ambdept0 then
15695: LD_VAR 0 1
15699: PUSH
15700: LD_INT 4
15702: EQUAL
15703: IFFALSE 15712
// YouLost ( Base ) ;
15705: LD_STRING Base
15707: PPUSH
15708: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and IsInArea ( unit , ruDefArea ) then
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 255
15721: PUSH
15722: LD_INT 1
15724: EQUAL
15725: PUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 247
15735: PUSH
15736: LD_INT 1
15738: EQUAL
15739: AND
15740: PUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_INT 24
15748: PPUSH
15749: CALL_OW 308
15753: AND
15754: IFFALSE 15764
// honor := false ;
15756: LD_ADDR_EXP 39
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// if unit in ruMobile then
15764: LD_VAR 0 1
15768: PUSH
15769: LD_EXP 46
15773: IN
15774: IFFALSE 15792
// ruMobile = ruMobile diff ruMobile ;
15776: LD_ADDR_EXP 46
15780: PUSH
15781: LD_EXP 46
15785: PUSH
15786: LD_EXP 46
15790: DIFF
15791: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 247
15801: PUSH
15802: LD_INT 1
15804: EQUAL
15805: PUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 255
15815: PUSH
15816: LD_INT 1
15818: EQUAL
15819: AND
15820: IFFALSE 15836
// lostCounter = lostCounter + 1 ;
15822: LD_ADDR_EXP 38
15826: PUSH
15827: LD_EXP 38
15831: PUSH
15832: LD_INT 1
15834: PLUS
15835: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15836: LD_EXP 43
15840: PUSH
15841: LD_INT 24
15843: PPUSH
15844: CALL_OW 313
15848: PUSH
15849: LD_INT 6
15851: LESS
15852: AND
15853: PUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 257
15863: PUSH
15864: LD_INT 3
15866: EQUAL
15867: AND
15868: PUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 255
15878: PUSH
15879: LD_INT 3
15881: EQUAL
15882: AND
15883: PUSH
15884: LD_INT 24
15886: PPUSH
15887: CALL_OW 302
15891: AND
15892: PUSH
15893: LD_INT 24
15895: PPUSH
15896: CALL_OW 255
15900: PUSH
15901: LD_INT 3
15903: EQUAL
15904: AND
15905: IFFALSE 16034
// begin ruMech := ruMech - 1 ;
15907: LD_ADDR_EXP 43
15911: PUSH
15912: LD_EXP 43
15916: PUSH
15917: LD_INT 1
15919: MINUS
15920: ST_TO_ADDR
// if ruMech = 0 then
15921: LD_EXP 43
15925: PUSH
15926: LD_INT 0
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 16034
// wait ( 0 0$40 ) ;
15933: LD_INT 1400
15935: PPUSH
15936: CALL_OW 67
// uc_side = 3 ;
15940: LD_ADDR_OWVAR 20
15944: PUSH
15945: LD_INT 3
15947: ST_TO_ADDR
// uc_nation = 3 ;
15948: LD_ADDR_OWVAR 21
15952: PUSH
15953: LD_INT 3
15955: ST_TO_ADDR
// hc_gallery :=  ;
15956: LD_ADDR_OWVAR 33
15960: PUSH
15961: LD_STRING 
15963: ST_TO_ADDR
// hc_name :=  ;
15964: LD_ADDR_OWVAR 26
15968: PUSH
15969: LD_STRING 
15971: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15972: LD_INT 0
15974: PPUSH
15975: LD_EXP 16
15979: PPUSH
15980: LD_EXP 17
15984: PPUSH
15985: CALL_OW 12
15989: PPUSH
15990: CALL_OW 383
// mech := CreateHuman ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: CALL_OW 44
16003: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
16004: LD_VAR 0 2
16008: PPUSH
16009: LD_INT 124
16011: PPUSH
16012: LD_INT 97
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16022: LD_VAR 0 2
16026: PPUSH
16027: LD_INT 24
16029: PPUSH
16030: CALL_OW 120
// end ; end ;
16034: PPOPN 2
16036: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16037: LD_INT 0
16039: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 35945 0 2
// if GetSide ( vehicle ) = 1 then
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 255
16063: PUSH
16064: LD_INT 1
16066: EQUAL
16067: IFFALSE 16083
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16069: LD_ADDR_EXP 42
16073: PUSH
16074: LD_EXP 42
16078: PUSH
16079: LD_INT 1
16081: PLUS
16082: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 255
16092: PUSH
16093: LD_INT 3
16095: EQUAL
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 264
16106: PUSH
16107: LD_INT 42
16109: PUSH
16110: LD_INT 43
16112: PUSH
16113: LD_INT 44
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: IN
16121: AND
16122: IFFALSE 16140
// ruMobile := ruMobile union vehicle ;
16124: LD_ADDR_EXP 46
16128: PUSH
16129: LD_EXP 46
16133: PUSH
16134: LD_VAR 0 1
16138: UNION
16139: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 264
16149: PUSH
16150: LD_INT 53
16152: EQUAL
16153: IFFALSE 16289
// begin uc_side = 3 ;
16155: LD_ADDR_OWVAR 20
16159: PUSH
16160: LD_INT 3
16162: ST_TO_ADDR
// uc_nation = 3 ;
16163: LD_ADDR_OWVAR 21
16167: PUSH
16168: LD_INT 3
16170: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16171: LD_INT 0
16173: PPUSH
16174: LD_EXP 17
16178: PPUSH
16179: CALL_OW 383
// driver := CreateHuman ;
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: CALL_OW 44
16192: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16193: LD_VAR 0 3
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: LD_INT 21
16214: PPUSH
16215: CALL 5191 0 2
// repeat wait ( 0 0$1 ) ;
16219: LD_INT 35
16221: PPUSH
16222: CALL_OW 67
// until not HasTask ( vehicle ) ;
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL_OW 314
16235: NOT
16236: IFFALSE 16219
// driver := IsDrivenBy ( vehicle ) ;
16238: LD_ADDR_VAR 0 3
16242: PUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 311
16252: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16253: LD_VAR 0 3
16257: PPUSH
16258: LD_INT 104
16260: PPUSH
16261: LD_INT 73
16263: PPUSH
16264: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16268: LD_VAR 0 3
16272: PPUSH
16273: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16277: LD_VAR 0 3
16281: PPUSH
16282: LD_INT 24
16284: PPUSH
16285: CALL_OW 180
// end ; end ;
16289: PPOPN 3
16291: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 255
16301: PUSH
16302: LD_INT 3
16304: EQUAL
16305: PUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 247
16315: PUSH
16316: LD_INT 2
16318: EQUAL
16319: AND
16320: PUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 264
16330: PUSH
16331: LD_INT 42
16333: PUSH
16334: LD_INT 43
16336: PUSH
16337: LD_INT 44
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: IN
16345: AND
16346: IFFALSE 16395
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16348: LD_INT 24
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 265
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 262
16370: PPUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 263
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 264
16390: PPUSH
16391: CALL_OW 185
// end ;
16395: PPOPN 1
16397: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 255
16407: PUSH
16408: LD_INT 3
16410: EQUAL
16411: PUSH
16412: LD_VAR 0 2
16416: PPUSH
16417: CALL_OW 255
16421: PUSH
16422: LD_INT 3
16424: EQUAL
16425: AND
16426: PUSH
16427: LD_INT 24
16429: PPUSH
16430: CALL_OW 302
16434: AND
16435: PUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 302
16445: NOT
16446: AND
16447: IFFALSE 16461
// ComEnterUnit ( human , rubfact0 ) ;
16449: LD_VAR 0 2
16453: PPUSH
16454: LD_INT 24
16456: PPUSH
16457: CALL_OW 120
// end ;
16461: PPOPN 2
16463: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 5 then
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 255
16473: PUSH
16474: LD_INT 5
16476: EQUAL
16477: IFFALSE 16551
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 125
16486: PPUSH
16487: LD_INT 97
16489: PPUSH
16490: CALL_OW 111
// wait ( 0 0$1 ) ;
16494: LD_INT 35
16496: PPUSH
16497: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 301
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: LD_INT 125
16518: PPUSH
16519: LD_INT 97
16521: PPUSH
16522: CALL_OW 307
16526: OR
16527: IFFALSE 16479
// if IsDead ( driver ) then
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 301
16538: IFFALSE 16542
// exit ;
16540: GO 16551
// RemoveUnit ( driver ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 64
// end ; end ;
16551: PPOPN 4
16553: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16554: LD_VAR 0 1
16558: PUSH
16559: LD_INT 24
16561: EQUAL
16562: PUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: CALL_OW 256
16572: PUSH
16573: LD_INT 1000
16575: LESS
16576: AND
16577: IFFALSE 16591
// SetLives ( un , 1000 ) ;
16579: LD_VAR 0 2
16583: PPUSH
16584: LD_INT 1000
16586: PPUSH
16587: CALL_OW 234
// end ;
16591: PPOPN 2
16593: END
// on Command ( comandid ) do var i , j , tmp ;
16594: LD_INT 0
16596: PPUSH
16597: PPUSH
16598: PPUSH
// begin SOS_Command ( comandid ) ;
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL 35929 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16608: LD_INT 22
16610: PUSH
16611: LD_INT 4
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: NOT
16623: IFFALSE 16627
// exit ;
16625: GO 16792
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16627: LD_ADDR_VAR 0 2
16631: PUSH
16632: LD_INT 22
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 21
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 21
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: PUSH
16679: FOR_IN
16680: IFFALSE 16790
// begin if GetTaskList ( i ) > 0 then
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 437
16691: PUSH
16692: LD_INT 0
16694: GREATER
16695: IFFALSE 16788
// begin for j = 1 to GetTaskList ( i ) do
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: DOUBLE
16703: LD_INT 1
16705: DEC
16706: ST_TO_ADDR
16707: LD_VAR 0 2
16711: PPUSH
16712: CALL_OW 437
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16786
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16720: LD_ADDR_VAR 0 4
16724: PUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: CALL_OW 437
16734: PUSH
16735: LD_VAR 0 3
16739: ARRAY
16740: PUSH
16741: LD_INT 4
16743: ARRAY
16744: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16745: LD_VAR 0 4
16749: PPUSH
16750: CALL_OW 255
16754: PUSH
16755: LD_INT 4
16757: EQUAL
16758: PUSH
16759: LD_VAR 0 4
16763: PPUSH
16764: CALL_OW 255
16768: PUSH
16769: LD_INT 0
16771: EQUAL
16772: OR
16773: IFFALSE 16784
// ComStop ( i ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 141
// end ;
16784: GO 16717
16786: POP
16787: POP
// end ; end ;
16788: GO 16679
16790: POP
16791: POP
// end ;
16792: PPOPN 4
16794: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16795: LD_VAR 0 1
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 23
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: IN
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: LD_INT 1
16848: EQUAL
16849: AND
16850: IFFALSE 16856
// JMMTraitor ;
16852: CALL 9314 0 0
// end ; end_of_file
16856: PPOPN 3
16858: END
// every 10 10$0 do
16859: GO 16861
16861: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16862: LD_INT 5
16864: PPUSH
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 2
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 3
16876: PUSH
16877: LD_INT 4
16879: PUSH
16880: LD_INT 4
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: LD_OWVAR 67
16893: ARRAY
16894: PLUS
16895: PPUSH
16896: LD_INT 0
16898: PPUSH
16899: LD_EXP 16
16903: PPUSH
16904: LD_EXP 17
16908: PPUSH
16909: CALL_OW 12
16913: PPUSH
16914: LD_INT 4
16916: PPUSH
16917: LD_INT 14
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: LD_INT 2
16925: PPUSH
16926: CALL 6932 0 9
16930: END
// every 20 20$0 do
16931: GO 16933
16933: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16934: LD_INT 5
16936: PPUSH
16937: LD_INT 3
16939: PPUSH
16940: LD_INT 4
16942: PUSH
16943: LD_INT 2
16945: PUSH
16946: LD_INT 3
16948: PUSH
16949: LD_INT 4
16951: PUSH
16952: LD_INT 5
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: LD_OWVAR 67
16965: ARRAY
16966: PLUS
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: LD_EXP 16
16975: PPUSH
16976: LD_EXP 17
16980: PPUSH
16981: CALL_OW 12
16985: PPUSH
16986: LD_INT 4
16988: PPUSH
16989: LD_INT 14
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL 6932 0 9
17002: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
// begin hex := [ 123 , 95 ] ;
17013: LD_ADDR_VAR 0 4
17017: PUSH
17018: LD_INT 123
17020: PUSH
17021: LD_INT 95
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: ST_TO_ADDR
// tmp := [ ] ;
17028: LD_ADDR_VAR 0 5
17032: PUSH
17033: EMPTY
17034: ST_TO_ADDR
// if Difficulty > 1 then
17035: LD_OWVAR 67
17039: PUSH
17040: LD_INT 1
17042: GREATER
17043: IFFALSE 17053
// specAttack := true ;
17045: LD_ADDR_EXP 47
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: DOUBLE
17059: LD_INT 1
17061: DEC
17062: ST_TO_ADDR
17063: LD_INT 4
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 7
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_OWVAR 67
17085: ARRAY
17086: PUSH
17087: FOR_TO
17088: IFFALSE 17390
// begin uc_side := 5 ;
17090: LD_ADDR_OWVAR 20
17094: PUSH
17095: LD_INT 5
17097: ST_TO_ADDR
// uc_nation := 3 ;
17098: LD_ADDR_OWVAR 21
17102: PUSH
17103: LD_INT 3
17105: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
17106: LD_ADDR_OWVAR 37
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 22
17116: PUSH
17117: LD_INT 23
17119: PUSH
17120: LD_INT 24
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: LD_VAR 0 1
17133: PUSH
17134: LD_OWVAR 67
17138: MOD
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ARRAY
17144: ST_TO_ADDR
// vc_engine := engine_combustion ;
17145: LD_ADDR_OWVAR 39
17149: PUSH
17150: LD_INT 1
17152: ST_TO_ADDR
// vc_control := control_manual ;
17153: LD_ADDR_OWVAR 38
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
17161: LD_ADDR_OWVAR 40
17165: PUSH
17166: LD_INT 42
17168: PUSH
17169: LD_INT 43
17171: PUSH
17172: LD_INT 44
17174: PUSH
17175: LD_INT 44
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: LD_VAR 0 1
17188: PUSH
17189: LD_OWVAR 67
17193: MOD
17194: PUSH
17195: LD_INT 1
17197: PLUS
17198: ARRAY
17199: ST_TO_ADDR
// veh := CreateVehicle ;
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: CALL_OW 45
17209: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 5
17217: PPUSH
17218: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17222: LD_INT 35
17224: PPUSH
17225: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17229: LD_VAR 0 4
17233: PUSH
17234: LD_INT 1
17236: ARRAY
17237: PPUSH
17238: LD_VAR 0 4
17242: PUSH
17243: LD_INT 2
17245: ARRAY
17246: PPUSH
17247: CALL_OW 428
17251: PUSH
17252: LD_INT 0
17254: EQUAL
17255: IFFALSE 17222
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_VAR 0 4
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PPUSH
17271: LD_VAR 0 4
17275: PUSH
17276: LD_INT 2
17278: ARRAY
17279: PPUSH
17280: LD_INT 0
17282: PPUSH
17283: CALL_OW 48
// uc_side := 5 ;
17287: LD_ADDR_OWVAR 20
17291: PUSH
17292: LD_INT 5
17294: ST_TO_ADDR
// uc_nation := 3 ;
17295: LD_ADDR_OWVAR 21
17299: PUSH
17300: LD_INT 3
17302: ST_TO_ADDR
// InitHC_All ( ) ;
17303: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17307: LD_INT 0
17309: PPUSH
17310: LD_INT 2
17312: PUSH
17313: LD_OWVAR 67
17317: PLUS
17318: PPUSH
17319: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17323: CALL_OW 44
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 101
17344: PPUSH
17345: LD_INT 77
17347: PPUSH
17348: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17352: LD_ADDR_VAR 0 5
17356: PUSH
17357: LD_VAR 0 5
17361: PPUSH
17362: LD_VAR 0 5
17366: PUSH
17367: LD_INT 1
17369: PLUS
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: CALL_OW 1
17380: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17381: LD_INT 105
17383: PPUSH
17384: CALL_OW 67
// end ;
17388: GO 17087
17390: POP
17391: POP
// repeat wait ( 0 0$1 ) ;
17392: LD_INT 35
17394: PPUSH
17395: CALL_OW 67
// for i in tmp do
17399: LD_ADDR_VAR 0 1
17403: PUSH
17404: LD_VAR 0 5
17408: PUSH
17409: FOR_IN
17410: IFFALSE 17478
// if not IsOk ( i ) then
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 302
17421: NOT
17422: IFFALSE 17442
// tmp := tmp diff i else
17424: LD_ADDR_VAR 0 5
17428: PUSH
17429: LD_VAR 0 5
17433: PUSH
17434: LD_VAR 0 1
17438: DIFF
17439: ST_TO_ADDR
17440: GO 17476
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17442: LD_VAR 0 1
17446: PPUSH
17447: LD_INT 22
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 74
17471: PPUSH
17472: CALL_OW 115
17476: GO 17409
17478: POP
17479: POP
// until not tmp ;
17480: LD_VAR 0 5
17484: NOT
17485: IFFALSE 17392
// end ;
17487: PPOPN 5
17489: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17490: LD_EXP 47
17494: IFFALSE 17872
17496: GO 17498
17498: DISABLE
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
// begin wait ( 0 0$20 ) ;
17505: LD_INT 700
17507: PPUSH
17508: CALL_OW 67
// uc_side := 5 ;
17512: LD_ADDR_OWVAR 20
17516: PUSH
17517: LD_INT 5
17519: ST_TO_ADDR
// uc_nation := 3 ;
17520: LD_ADDR_OWVAR 21
17524: PUSH
17525: LD_INT 3
17527: ST_TO_ADDR
// InitHc ;
17528: CALL_OW 19
// hc_importance := 0 ;
17532: LD_ADDR_OWVAR 32
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// tmp := [ ] ;
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: EMPTY
17546: ST_TO_ADDR
// InitHC_All ( ) ;
17547: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17551: LD_INT 0
17553: PPUSH
17554: LD_INT 2
17556: PPUSH
17557: LD_INT 6
17559: PPUSH
17560: CALL_OW 380
// eng := CreateHuman ;
17564: LD_ADDR_VAR 0 4
17568: PUSH
17569: CALL_OW 44
17573: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17574: LD_VAR 0 4
17578: PPUSH
17579: LD_INT 78
17581: PPUSH
17582: LD_INT 2
17584: PPUSH
17585: LD_INT 4
17587: PPUSH
17588: LD_INT 0
17590: PPUSH
17591: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_INT 3
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: LD_INT 4
17613: PUSH
17614: LD_INT 5
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: LD_OWVAR 67
17627: ARRAY
17628: PUSH
17629: FOR_TO
17630: IFFALSE 17719
// begin InitHC_All ( ) ;
17632: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17636: LD_INT 0
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: LD_INT 4
17644: PUSH
17645: LD_INT 5
17647: PUSH
17648: LD_INT 6
17650: PUSH
17651: LD_INT 6
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: LD_OWVAR 67
17664: ARRAY
17665: PPUSH
17666: CALL_OW 380
// un := CreateHuman ;
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: CALL_OW 44
17679: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 78
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: LD_INT 4
17693: PPUSH
17694: LD_INT 0
17696: PPUSH
17697: CALL_OW 50
// tmp := tmp ^ un ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_VAR 0 2
17710: PUSH
17711: LD_VAR 0 1
17715: ADD
17716: ST_TO_ADDR
// end ;
17717: GO 17629
17719: POP
17720: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17721: LD_VAR 0 2
17725: PPUSH
17726: LD_INT 49
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: CALL_OW 111
// wait ( 0 0$2 ) ;
17736: LD_INT 70
17738: PPUSH
17739: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17743: LD_VAR 0 4
17747: PPUSH
17748: LD_INT 49
17750: PPUSH
17751: LD_INT 3
17753: PPUSH
17754: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17758: LD_VAR 0 4
17762: PPUSH
17763: LD_INT 4
17765: PPUSH
17766: CALL_OW 227
// wait ( 0 0$10 ) ;
17770: LD_INT 350
17772: PPUSH
17773: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17777: LD_INT 35
17779: PPUSH
17780: CALL_OW 67
// for i in tmp do
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: LD_VAR 0 2
17793: PUSH
17794: FOR_IN
17795: IFFALSE 17863
// if not IsOk ( i ) then
17797: LD_VAR 0 3
17801: PPUSH
17802: CALL_OW 302
17806: NOT
17807: IFFALSE 17827
// tmp := tmp diff i else
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 3
17823: DIFF
17824: ST_TO_ADDR
17825: GO 17861
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17827: LD_VAR 0 3
17831: PPUSH
17832: LD_INT 22
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 69
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: CALL_OW 74
17856: PPUSH
17857: CALL_OW 115
17861: GO 17794
17863: POP
17864: POP
// until not tmp ;
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17777
// end ; end_of_file
17872: PPOPN 4
17874: END
// every 0 0$1 trigger startTimer = 1 do
17875: LD_EXP 30
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 18013
17885: GO 17887
17887: DISABLE
// begin enable ;
17888: ENABLE
// if timerStatus = 1 then
17889: LD_EXP 29
17893: PUSH
17894: LD_INT 1
17896: EQUAL
17897: IFFALSE 17930
// begin timeToSupport = timeToSupport - 0 0$01 ;
17899: LD_ADDR_EXP 28
17903: PUSH
17904: LD_EXP 28
17908: PUSH
17909: LD_INT 35
17911: MINUS
17912: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17913: LD_ADDR_OWVAR 47
17917: PUSH
17918: LD_STRING #Am04-1
17920: PUSH
17921: LD_EXP 28
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: ST_TO_ADDR
// end ; if timerStatus = 2 then
17930: LD_EXP 29
17934: PUSH
17935: LD_INT 2
17937: EQUAL
17938: IFFALSE 17971
// begin timeToSupport = timeToSupport - 0 0$01 ;
17940: LD_ADDR_EXP 28
17944: PUSH
17945: LD_EXP 28
17949: PUSH
17950: LD_INT 35
17952: MINUS
17953: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17954: LD_ADDR_OWVAR 47
17958: PUSH
17959: LD_STRING #Am04-2
17961: PUSH
17962: LD_EXP 28
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: ST_TO_ADDR
// end ; if timerStatus = 3 then
17971: LD_EXP 29
17975: PUSH
17976: LD_INT 3
17978: EQUAL
17979: IFFALSE 17995
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17981: LD_ADDR_EXP 27
17985: PUSH
17986: LD_EXP 27
17990: PUSH
17991: LD_INT 35
17993: MINUS
17994: ST_TO_ADDR
// if timerStatus = 4 then
17995: LD_EXP 29
17999: PUSH
18000: LD_INT 4
18002: EQUAL
18003: IFFALSE 18013
// display_strings =  ;
18005: LD_ADDR_OWVAR 47
18009: PUSH
18010: LD_STRING 
18012: ST_TO_ADDR
// end ; end_of_file
18013: END
// every 0 0$1 trigger not reliefOfCommand and IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
18014: LD_EXP 48
18018: NOT
18019: PUSH
18020: LD_EXP 15
18024: PPUSH
18025: CALL_OW 301
18029: AND
18030: PUSH
18031: LD_INT 22
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 21
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: PUSH
18060: LD_INT 14
18062: PUSH
18063: LD_INT 13
18065: PUSH
18066: LD_INT 12
18068: PUSH
18069: LD_INT 11
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_OWVAR 67
18082: ARRAY
18083: LESS
18084: AND
18085: IFFALSE 18671
18087: GO 18089
18089: DISABLE
18090: LD_INT 0
18092: PPUSH
18093: PPUSH
18094: PPUSH
// begin AIEnable = 0 ;
18095: LD_ADDR_EXP 37
18099: PUSH
18100: LD_INT 0
18102: ST_TO_ADDR
// escapeAvalaible = 1 ;
18103: LD_ADDR_EXP 40
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// Video ( true ) ;
18111: LD_INT 1
18113: PPUSH
18114: CALL 78382 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18118: LD_INT 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_INT 1
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18134: LD_INT 6
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18150: LD_INT 5
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: LD_INT 1
18158: PPUSH
18159: LD_INT 0
18161: PPUSH
18162: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18166: LD_INT 3
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18176: LD_INT 97
18178: PPUSH
18179: LD_INT 91
18181: PPUSH
18182: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18186: LD_INT 22
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PPUSH
18215: CALL_OW 121
// wait ( 0 0$01 ) ;
18219: LD_INT 35
18221: PPUSH
18222: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PPUSH
18255: LD_INT 124
18257: PPUSH
18258: LD_INT 98
18260: PPUSH
18261: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18265: LD_INT 22
18267: PUSH
18268: LD_INT 5
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PPUSH
18289: CALL_OW 69
18293: PPUSH
18294: CALL_OW 121
// wait ( 0 0$01 ) ;
18298: LD_INT 35
18300: PPUSH
18301: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18305: LD_INT 22
18307: PUSH
18308: LD_INT 5
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: PPUSH
18334: LD_INT 124
18336: PPUSH
18337: LD_INT 98
18339: PPUSH
18340: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18344: LD_INT 22
18346: PUSH
18347: LD_INT 6
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 21
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: PPUSH
18373: CALL_OW 121
// wait ( 0 0$01 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18384: LD_INT 22
18386: PUSH
18387: LD_INT 6
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 21
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PPUSH
18408: CALL_OW 69
18412: PPUSH
18413: LD_INT 124
18415: PPUSH
18416: LD_INT 98
18418: PPUSH
18419: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18423: LD_INT 22
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 21
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PPUSH
18452: LD_INT 124
18454: PPUSH
18455: LD_INT 96
18457: PPUSH
18458: CALL_OW 114
// wait ( 0 0$1 ) ;
18462: LD_INT 35
18464: PPUSH
18465: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18469: LD_INT 124
18471: PPUSH
18472: LD_INT 96
18474: PPUSH
18475: CALL_OW 84
// p := 0 0$0 ;
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18487: LD_ADDR_VAR 0 2
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 6
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 21
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18539: LD_INT 35
18541: PPUSH
18542: CALL_OW 67
// p := p + 0 0$1 ;
18546: LD_ADDR_VAR 0 3
18550: PUSH
18551: LD_VAR 0 3
18555: PUSH
18556: LD_INT 35
18558: PLUS
18559: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_INT 5
18567: PPUSH
18568: CALL_OW 113
// for i in tmp do
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: FOR_IN
18583: IFFALSE 18610
// if IsInArea ( tmp , RussianEscape ) then
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_INT 5
18592: PPUSH
18593: CALL_OW 308
18597: IFFALSE 18608
// RemoveUnit ( i ) ;
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 64
18608: GO 18582
18610: POP
18611: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18612: LD_INT 23
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 24
18634: PUSH
18635: LD_INT 250
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: PUSH
18652: LD_INT 0
18654: EQUAL
18655: PUSH
18656: LD_VAR 0 3
18660: PUSH
18661: LD_INT 245
18663: GREATEREQUAL
18664: OR
18665: IFFALSE 18539
// FinishMission ;
18667: CALL 18674 0 0
// end ;
18671: PPOPN 3
18673: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18674: LD_INT 0
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18681: LD_INT 22
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 21
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 23
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 50
18713: PUSH
18714: EMPTY
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: PPUSH
18728: CALL 42821 0 1
18732: PUSH
18733: LD_INT 5
18735: LESS
18736: IFFALSE 18747
// begin YouLost ( LostVictory ) ;
18738: LD_STRING LostVictory
18740: PPUSH
18741: CALL_OW 104
// exit ;
18745: GO 19434
// end ; if not vehicleProduceCounter then
18747: LD_EXP 42
18751: NOT
18752: IFFALSE 18761
// SetAchievement ( ACH_INFANTRY ) ;
18754: LD_STRING ACH_INFANTRY
18756: PPUSH
18757: CALL_OW 543
// if tick <= 20 20$00 then
18761: LD_OWVAR 1
18765: PUSH
18766: LD_INT 42000
18768: LESSEQUAL
18769: IFFALSE 18785
// begin wait ( 3 ) ;
18771: LD_INT 3
18773: PPUSH
18774: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18778: LD_STRING ACH_ASPEED_4
18780: PPUSH
18781: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18785: LD_INT 22
18787: PPUSH
18788: CALL 19439 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18792: LD_INT 69
18794: PPUSH
18795: LD_INT 1
18797: PPUSH
18798: CALL_OW 321
18802: PPUSH
18803: LD_STRING GatlingInGamma
18805: PPUSH
18806: CALL_OW 39
// m1 := false ;
18810: LD_ADDR_VAR 0 3
18814: PUSH
18815: LD_INT 0
18817: ST_TO_ADDR
// m2 := false ;
18818: LD_ADDR_VAR 0 4
18822: PUSH
18823: LD_INT 0
18825: ST_TO_ADDR
// m3 := false ;
18826: LD_ADDR_VAR 0 5
18830: PUSH
18831: LD_INT 0
18833: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18834: LD_EXP 34
18838: PUSH
18839: LD_INT 1
18841: EQUAL
18842: PUSH
18843: LD_EXP 35
18847: PUSH
18848: LD_INT 1
18850: EQUAL
18851: AND
18852: IFFALSE 18874
// begin AddMedal ( oil , 1 ) ;
18854: LD_STRING oil
18856: PPUSH
18857: LD_INT 1
18859: PPUSH
18860: CALL_OW 101
// m1 := true ;
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 1
18871: ST_TO_ADDR
// end else
18872: GO 18967
// begin if buildOil = 1 and buildPower = 0 then
18874: LD_EXP 34
18878: PUSH
18879: LD_INT 1
18881: EQUAL
18882: PUSH
18883: LD_EXP 35
18887: PUSH
18888: LD_INT 0
18890: EQUAL
18891: AND
18892: IFFALSE 18905
// AddMedal ( oil , - 1 ) ;
18894: LD_STRING oil
18896: PPUSH
18897: LD_INT 1
18899: NEG
18900: PPUSH
18901: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18905: LD_EXP 34
18909: PUSH
18910: LD_INT 0
18912: EQUAL
18913: PUSH
18914: LD_EXP 35
18918: PUSH
18919: LD_INT 1
18921: EQUAL
18922: AND
18923: IFFALSE 18936
// AddMedal ( oil , - 2 ) ;
18925: LD_STRING oil
18927: PPUSH
18928: LD_INT 2
18930: NEG
18931: PPUSH
18932: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18936: LD_EXP 34
18940: PUSH
18941: LD_INT 0
18943: EQUAL
18944: PUSH
18945: LD_EXP 35
18949: PUSH
18950: LD_INT 0
18952: EQUAL
18953: AND
18954: IFFALSE 18967
// AddMedal ( oil , - 3 ) ;
18956: LD_STRING oil
18958: PPUSH
18959: LD_INT 3
18961: NEG
18962: PPUSH
18963: CALL_OW 101
// end ; if lostCounter > 3 then
18967: LD_EXP 38
18971: PUSH
18972: LD_INT 3
18974: GREATER
18975: IFFALSE 18990
// AddMedal ( deaths , - 1 ) else
18977: LD_STRING deaths
18979: PPUSH
18980: LD_INT 1
18982: NEG
18983: PPUSH
18984: CALL_OW 101
18988: GO 19008
// begin AddMedal ( deaths , 1 ) ;
18990: LD_STRING deaths
18992: PPUSH
18993: LD_INT 1
18995: PPUSH
18996: CALL_OW 101
// m2 := true ;
19000: LD_ADDR_VAR 0 4
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// end ; if honor then
19008: LD_EXP 39
19012: IFFALSE 19034
// begin AddMedal ( honour , 1 ) ;
19014: LD_STRING honour
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 101
// m3 := true ;
19024: LD_ADDR_VAR 0 5
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// end else
19032: GO 19045
// AddMedal ( honour , - 1 ) ;
19034: LD_STRING honour
19036: PPUSH
19037: LD_INT 1
19039: NEG
19040: PPUSH
19041: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_VAR 0 4
19054: AND
19055: PUSH
19056: LD_VAR 0 5
19060: AND
19061: PUSH
19062: LD_OWVAR 67
19066: PUSH
19067: LD_INT 3
19069: GREATEREQUAL
19070: AND
19071: IFFALSE 19083
// SetAchievementEX ( ACH_AMER , 4 ) ;
19073: LD_STRING ACH_AMER
19075: PPUSH
19076: LD_INT 4
19078: PPUSH
19079: CALL_OW 564
// GiveMedals ( Main ) ;
19083: LD_STRING Main
19085: PPUSH
19086: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19090: LD_INT 22
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 23
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 21
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: PPUSH
19130: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19134: LD_EXP 1
19138: PPUSH
19139: LD_EXP 49
19143: PUSH
19144: LD_STRING JMM
19146: STR
19147: PPUSH
19148: CALL_OW 38
// if IsOK ( Bobby ) then
19152: LD_EXP 2
19156: PPUSH
19157: CALL_OW 302
19161: IFFALSE 19181
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19163: LD_EXP 2
19167: PPUSH
19168: LD_EXP 49
19172: PUSH
19173: LD_STRING Bobby
19175: STR
19176: PPUSH
19177: CALL_OW 38
// if IsOK ( Cyrus ) then
19181: LD_EXP 3
19185: PPUSH
19186: CALL_OW 302
19190: IFFALSE 19210
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19192: LD_EXP 3
19196: PPUSH
19197: LD_EXP 49
19201: PUSH
19202: LD_STRING Cyrus
19204: STR
19205: PPUSH
19206: CALL_OW 38
// if IsOK ( Lisa ) then
19210: LD_EXP 4
19214: PPUSH
19215: CALL_OW 302
19219: IFFALSE 19239
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19221: LD_EXP 4
19225: PPUSH
19226: LD_EXP 49
19230: PUSH
19231: LD_STRING Lisa
19233: STR
19234: PPUSH
19235: CALL_OW 38
// if IsOK ( Brown ) then
19239: LD_EXP 7
19243: PPUSH
19244: CALL_OW 302
19248: IFFALSE 19275
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
19250: LD_STRING enableBioCharacter(BIO_JEFF)
19252: PPUSH
19253: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19257: LD_EXP 7
19261: PPUSH
19262: LD_EXP 49
19266: PUSH
19267: LD_STRING Brown
19269: STR
19270: PPUSH
19271: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
19275: LD_EXP 13
19279: PPUSH
19280: CALL_OW 301
19284: NOT
19285: IFFALSE 19312
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
19287: LD_STRING enableBioCharacter(BIO_LUCY)
19289: PPUSH
19290: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19294: LD_EXP 13
19298: PPUSH
19299: LD_EXP 49
19303: PUSH
19304: LD_STRING Donaldson
19306: STR
19307: PPUSH
19308: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19312: LD_EXP 5
19316: PPUSH
19317: CALL_OW 301
19321: NOT
19322: IFFALSE 19342
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19324: LD_EXP 5
19328: PPUSH
19329: LD_EXP 49
19333: PUSH
19334: LD_STRING Frank
19336: STR
19337: PPUSH
19338: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19342: LD_INT 50
19344: PUSH
19345: EMPTY
19346: LIST
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 21
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: PPUSH
19373: CALL_OW 69
19377: PUSH
19378: LD_EXP 1
19382: PUSH
19383: LD_EXP 2
19387: PUSH
19388: LD_EXP 3
19392: PUSH
19393: LD_EXP 4
19397: PUSH
19398: LD_EXP 7
19402: PUSH
19403: LD_EXP 13
19407: PUSH
19408: LD_EXP 5
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: DIFF
19422: PPUSH
19423: LD_STRING 04_other_survivors
19425: PPUSH
19426: CALL_OW 38
// YouWin ;
19430: CALL_OW 103
// end ;
19434: LD_VAR 0 1
19438: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
19443: PPUSH
19444: PPUSH
// gammaBase = [ ] ;
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: EMPTY
19451: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19452: LD_ADDR_VAR 0 5
19456: PUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: LD_INT 22
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 21
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// for i in buildings do
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_VAR 0 5
19500: PUSH
19501: FOR_IN
19502: IFFALSE 19839
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19504: LD_VAR 0 3
19508: PPUSH
19509: CALL_OW 266
19513: PUSH
19514: LD_INT 6
19516: PUSH
19517: LD_INT 7
19519: PUSH
19520: LD_INT 8
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: IN
19528: IFFALSE 19642
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: LD_VAR 0 4
19539: PUSH
19540: LD_VAR 0 3
19544: PPUSH
19545: CALL_OW 266
19549: PUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: CALL_OW 250
19559: PUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: CALL_OW 251
19569: PUSH
19570: LD_VAR 0 3
19574: PPUSH
19575: CALL_OW 254
19579: PUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: CALL_OW 267
19589: PUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: CALL_OW 248
19599: PUSH
19600: LD_VAR 0 3
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: CALL_OW 268
19612: PUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: LD_INT 2
19620: PPUSH
19621: CALL_OW 268
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: EMPTY
19637: LIST
19638: ADD
19639: ST_TO_ADDR
19640: GO 19837
// if GetBType ( i ) in [ b_bunker ] then
19642: LD_VAR 0 3
19646: PPUSH
19647: CALL_OW 266
19651: PUSH
19652: LD_INT 32
19654: PUSH
19655: EMPTY
19656: LIST
19657: IN
19658: IFFALSE 19755
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19660: LD_ADDR_VAR 0 4
19664: PUSH
19665: LD_VAR 0 4
19669: PUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: CALL_OW 266
19679: PUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: CALL_OW 250
19689: PUSH
19690: LD_VAR 0 3
19694: PPUSH
19695: CALL_OW 251
19699: PUSH
19700: LD_VAR 0 3
19704: PPUSH
19705: CALL_OW 254
19709: PUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: CALL_OW 267
19719: PUSH
19720: LD_VAR 0 3
19724: PPUSH
19725: CALL_OW 248
19729: PUSH
19730: LD_VAR 0 3
19734: PPUSH
19735: CALL_OW 269
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: ADD
19752: ST_TO_ADDR
19753: GO 19837
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19755: LD_ADDR_VAR 0 4
19759: PUSH
19760: LD_VAR 0 4
19764: PUSH
19765: LD_VAR 0 3
19769: PPUSH
19770: CALL_OW 266
19774: PUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: CALL_OW 250
19784: PUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: CALL_OW 251
19794: PUSH
19795: LD_VAR 0 3
19799: PPUSH
19800: CALL_OW 254
19804: PUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: CALL_OW 267
19814: PUSH
19815: LD_VAR 0 3
19819: PPUSH
19820: CALL_OW 248
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: ADD
19836: ST_TO_ADDR
// end ;
19837: GO 19501
19839: POP
19840: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19841: LD_VAR 0 4
19845: PPUSH
19846: LD_STRING GammaBase
19848: PPUSH
19849: CALL_OW 39
// end ; end_of_file
19853: LD_VAR 0 2
19857: RET
// every 1 1$15 do
19858: GO 19860
19860: DISABLE
// begin if supply <= 13 and supply > 7 then
19861: LD_EXP 36
19865: PUSH
19866: LD_INT 13
19868: LESSEQUAL
19869: PUSH
19870: LD_EXP 36
19874: PUSH
19875: LD_INT 7
19877: GREATER
19878: AND
19879: IFFALSE 19902
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19881: LD_INT 3
19883: PPUSH
19884: LD_INT 5
19886: PPUSH
19887: CALL_OW 12
19891: PPUSH
19892: LD_INT 18
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 55
// if supply <= 7 and supply > 4 then
19902: LD_EXP 36
19906: PUSH
19907: LD_INT 7
19909: LESSEQUAL
19910: PUSH
19911: LD_EXP 36
19915: PUSH
19916: LD_INT 4
19918: GREATER
19919: AND
19920: IFFALSE 19943
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19922: LD_INT 3
19924: PPUSH
19925: LD_INT 5
19927: PPUSH
19928: CALL_OW 12
19932: PPUSH
19933: LD_INT 19
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 55
// if supply <= 4 and supply > 0 then
19943: LD_EXP 36
19947: PUSH
19948: LD_INT 4
19950: LESSEQUAL
19951: PUSH
19952: LD_EXP 36
19956: PUSH
19957: LD_INT 0
19959: GREATER
19960: AND
19961: IFFALSE 19984
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19963: LD_INT 3
19965: PPUSH
19966: LD_INT 5
19968: PPUSH
19969: CALL_OW 12
19973: PPUSH
19974: LD_INT 20
19976: PPUSH
19977: LD_INT 1
19979: PPUSH
19980: CALL_OW 55
// if supply then
19984: LD_EXP 36
19988: IFFALSE 20005
// begin supply = supply - 1 ;
19990: LD_ADDR_EXP 36
19994: PUSH
19995: LD_EXP 36
19999: PUSH
20000: LD_INT 1
20002: MINUS
20003: ST_TO_ADDR
// enable ;
20004: ENABLE
// end ; end ; end_of_file end_of_file
20005: END
// export globalGameSaveCounter ; every 0 0$1 do
20006: GO 20008
20008: DISABLE
// begin enable ;
20009: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20010: LD_STRING updateTimer(
20012: PUSH
20013: LD_OWVAR 1
20017: STR
20018: PUSH
20019: LD_STRING );
20021: STR
20022: PPUSH
20023: CALL_OW 559
// end ;
20027: END
// every 0 0$1 do
20028: GO 20030
20030: DISABLE
// begin globalGameSaveCounter := 0 ;
20031: LD_ADDR_EXP 51
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20039: LD_STRING setGameSaveCounter(0)
20041: PPUSH
20042: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20046: LD_STRING initStreamRollete();
20048: PPUSH
20049: CALL_OW 559
// InitStreamMode ;
20053: CALL 21396 0 0
// DefineStreamItems ( false ) ;
20057: LD_INT 0
20059: PPUSH
20060: CALL 21860 0 1
// end ;
20064: END
// export function SOS_MapStart ( ) ; begin
20065: LD_INT 0
20067: PPUSH
// if streamModeActive then
20068: LD_EXP 52
20072: IFFALSE 20081
// DefineStreamItems ( true ) ;
20074: LD_INT 1
20076: PPUSH
20077: CALL 21860 0 1
// UpdateLuaVariables ( ) ;
20081: CALL 20098 0 0
// UpdateFactoryWaypoints ( ) ;
20085: CALL 34729 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20089: CALL 34986 0 0
// end ;
20093: LD_VAR 0 1
20097: RET
// function UpdateLuaVariables ( ) ; begin
20098: LD_INT 0
20100: PPUSH
// if globalGameSaveCounter then
20101: LD_EXP 51
20105: IFFALSE 20139
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20107: LD_ADDR_EXP 51
20111: PUSH
20112: LD_EXP 51
20116: PPUSH
20117: CALL 79771 0 1
20121: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20122: LD_STRING setGameSaveCounter(
20124: PUSH
20125: LD_EXP 51
20129: STR
20130: PUSH
20131: LD_STRING )
20133: STR
20134: PPUSH
20135: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20139: LD_STRING setGameDifficulty(
20141: PUSH
20142: LD_OWVAR 67
20146: STR
20147: PUSH
20148: LD_STRING )
20150: STR
20151: PPUSH
20152: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20156: LD_STRING displayDifficulty(
20158: PUSH
20159: LD_OWVAR 67
20163: STR
20164: PUSH
20165: LD_STRING )
20167: STR
20168: PPUSH
20169: CALL_OW 559
// end ;
20173: LD_VAR 0 1
20177: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20178: LD_INT 0
20180: PPUSH
// if p2 = stream_mode then
20181: LD_VAR 0 2
20185: PUSH
20186: LD_INT 100
20188: EQUAL
20189: IFFALSE 21192
// begin if not StreamModeActive then
20191: LD_EXP 52
20195: NOT
20196: IFFALSE 20206
// StreamModeActive := true ;
20198: LD_ADDR_EXP 52
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 0 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 0
20213: EQUAL
20214: IFFALSE 20220
// InitStreamMode ;
20216: CALL 21396 0 0
// if p3 = 1 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 1
20227: EQUAL
20228: IFFALSE 20238
// sRocket := true ;
20230: LD_ADDR_EXP 57
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 2 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 2
20245: EQUAL
20246: IFFALSE 20256
// sSpeed := true ;
20248: LD_ADDR_EXP 56
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 3 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 3
20263: EQUAL
20264: IFFALSE 20274
// sEngine := true ;
20266: LD_ADDR_EXP 58
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 4 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 4
20281: EQUAL
20282: IFFALSE 20292
// sSpec := true ;
20284: LD_ADDR_EXP 55
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 5 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 5
20299: EQUAL
20300: IFFALSE 20310
// sLevel := true ;
20302: LD_ADDR_EXP 59
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 6 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 6
20317: EQUAL
20318: IFFALSE 20328
// sArmoury := true ;
20320: LD_ADDR_EXP 60
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 7 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 7
20335: EQUAL
20336: IFFALSE 20346
// sRadar := true ;
20338: LD_ADDR_EXP 61
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 8 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 8
20353: EQUAL
20354: IFFALSE 20364
// sBunker := true ;
20356: LD_ADDR_EXP 62
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 9 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 9
20371: EQUAL
20372: IFFALSE 20382
// sHack := true ;
20374: LD_ADDR_EXP 63
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 10 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 10
20389: EQUAL
20390: IFFALSE 20400
// sFire := true ;
20392: LD_ADDR_EXP 64
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 11 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 11
20407: EQUAL
20408: IFFALSE 20418
// sRefresh := true ;
20410: LD_ADDR_EXP 65
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 12 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 12
20425: EQUAL
20426: IFFALSE 20436
// sExp := true ;
20428: LD_ADDR_EXP 66
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// if p3 = 13 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 13
20443: EQUAL
20444: IFFALSE 20454
// sDepot := true ;
20446: LD_ADDR_EXP 67
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// if p3 = 14 then
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 14
20461: EQUAL
20462: IFFALSE 20472
// sFlag := true ;
20464: LD_ADDR_EXP 68
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// if p3 = 15 then
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 15
20479: EQUAL
20480: IFFALSE 20490
// sKamikadze := true ;
20482: LD_ADDR_EXP 76
20486: PUSH
20487: LD_INT 1
20489: ST_TO_ADDR
// if p3 = 16 then
20490: LD_VAR 0 3
20494: PUSH
20495: LD_INT 16
20497: EQUAL
20498: IFFALSE 20508
// sTroll := true ;
20500: LD_ADDR_EXP 77
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if p3 = 17 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 17
20515: EQUAL
20516: IFFALSE 20526
// sSlow := true ;
20518: LD_ADDR_EXP 78
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// if p3 = 18 then
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 18
20533: EQUAL
20534: IFFALSE 20544
// sLack := true ;
20536: LD_ADDR_EXP 79
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// if p3 = 19 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_INT 19
20551: EQUAL
20552: IFFALSE 20562
// sTank := true ;
20554: LD_ADDR_EXP 81
20558: PUSH
20559: LD_INT 1
20561: ST_TO_ADDR
// if p3 = 20 then
20562: LD_VAR 0 3
20566: PUSH
20567: LD_INT 20
20569: EQUAL
20570: IFFALSE 20580
// sRemote := true ;
20572: LD_ADDR_EXP 82
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// if p3 = 21 then
20580: LD_VAR 0 3
20584: PUSH
20585: LD_INT 21
20587: EQUAL
20588: IFFALSE 20598
// sPowell := true ;
20590: LD_ADDR_EXP 83
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// if p3 = 22 then
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 22
20605: EQUAL
20606: IFFALSE 20616
// sTeleport := true ;
20608: LD_ADDR_EXP 86
20612: PUSH
20613: LD_INT 1
20615: ST_TO_ADDR
// if p3 = 23 then
20616: LD_VAR 0 3
20620: PUSH
20621: LD_INT 23
20623: EQUAL
20624: IFFALSE 20634
// sOilTower := true ;
20626: LD_ADDR_EXP 88
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// if p3 = 24 then
20634: LD_VAR 0 3
20638: PUSH
20639: LD_INT 24
20641: EQUAL
20642: IFFALSE 20652
// sShovel := true ;
20644: LD_ADDR_EXP 89
20648: PUSH
20649: LD_INT 1
20651: ST_TO_ADDR
// if p3 = 25 then
20652: LD_VAR 0 3
20656: PUSH
20657: LD_INT 25
20659: EQUAL
20660: IFFALSE 20670
// sSheik := true ;
20662: LD_ADDR_EXP 90
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// if p3 = 26 then
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 26
20677: EQUAL
20678: IFFALSE 20688
// sEarthquake := true ;
20680: LD_ADDR_EXP 92
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// if p3 = 27 then
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 27
20695: EQUAL
20696: IFFALSE 20706
// sAI := true ;
20698: LD_ADDR_EXP 93
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// if p3 = 28 then
20706: LD_VAR 0 3
20710: PUSH
20711: LD_INT 28
20713: EQUAL
20714: IFFALSE 20724
// sCargo := true ;
20716: LD_ADDR_EXP 96
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if p3 = 29 then
20724: LD_VAR 0 3
20728: PUSH
20729: LD_INT 29
20731: EQUAL
20732: IFFALSE 20742
// sDLaser := true ;
20734: LD_ADDR_EXP 97
20738: PUSH
20739: LD_INT 1
20741: ST_TO_ADDR
// if p3 = 30 then
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 30
20749: EQUAL
20750: IFFALSE 20760
// sExchange := true ;
20752: LD_ADDR_EXP 98
20756: PUSH
20757: LD_INT 1
20759: ST_TO_ADDR
// if p3 = 31 then
20760: LD_VAR 0 3
20764: PUSH
20765: LD_INT 31
20767: EQUAL
20768: IFFALSE 20778
// sFac := true ;
20770: LD_ADDR_EXP 99
20774: PUSH
20775: LD_INT 1
20777: ST_TO_ADDR
// if p3 = 32 then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 32
20785: EQUAL
20786: IFFALSE 20796
// sPower := true ;
20788: LD_ADDR_EXP 100
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// if p3 = 33 then
20796: LD_VAR 0 3
20800: PUSH
20801: LD_INT 33
20803: EQUAL
20804: IFFALSE 20814
// sRandom := true ;
20806: LD_ADDR_EXP 101
20810: PUSH
20811: LD_INT 1
20813: ST_TO_ADDR
// if p3 = 34 then
20814: LD_VAR 0 3
20818: PUSH
20819: LD_INT 34
20821: EQUAL
20822: IFFALSE 20832
// sShield := true ;
20824: LD_ADDR_EXP 102
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// if p3 = 35 then
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 35
20839: EQUAL
20840: IFFALSE 20850
// sTime := true ;
20842: LD_ADDR_EXP 103
20846: PUSH
20847: LD_INT 1
20849: ST_TO_ADDR
// if p3 = 36 then
20850: LD_VAR 0 3
20854: PUSH
20855: LD_INT 36
20857: EQUAL
20858: IFFALSE 20868
// sTools := true ;
20860: LD_ADDR_EXP 104
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// if p3 = 101 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 101
20875: EQUAL
20876: IFFALSE 20886
// sSold := true ;
20878: LD_ADDR_EXP 69
20882: PUSH
20883: LD_INT 1
20885: ST_TO_ADDR
// if p3 = 102 then
20886: LD_VAR 0 3
20890: PUSH
20891: LD_INT 102
20893: EQUAL
20894: IFFALSE 20904
// sDiff := true ;
20896: LD_ADDR_EXP 70
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// if p3 = 103 then
20904: LD_VAR 0 3
20908: PUSH
20909: LD_INT 103
20911: EQUAL
20912: IFFALSE 20922
// sFog := true ;
20914: LD_ADDR_EXP 73
20918: PUSH
20919: LD_INT 1
20921: ST_TO_ADDR
// if p3 = 104 then
20922: LD_VAR 0 3
20926: PUSH
20927: LD_INT 104
20929: EQUAL
20930: IFFALSE 20940
// sReset := true ;
20932: LD_ADDR_EXP 74
20936: PUSH
20937: LD_INT 1
20939: ST_TO_ADDR
// if p3 = 105 then
20940: LD_VAR 0 3
20944: PUSH
20945: LD_INT 105
20947: EQUAL
20948: IFFALSE 20958
// sSun := true ;
20950: LD_ADDR_EXP 75
20954: PUSH
20955: LD_INT 1
20957: ST_TO_ADDR
// if p3 = 106 then
20958: LD_VAR 0 3
20962: PUSH
20963: LD_INT 106
20965: EQUAL
20966: IFFALSE 20976
// sTiger := true ;
20968: LD_ADDR_EXP 71
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// if p3 = 107 then
20976: LD_VAR 0 3
20980: PUSH
20981: LD_INT 107
20983: EQUAL
20984: IFFALSE 20994
// sBomb := true ;
20986: LD_ADDR_EXP 72
20990: PUSH
20991: LD_INT 1
20993: ST_TO_ADDR
// if p3 = 108 then
20994: LD_VAR 0 3
20998: PUSH
20999: LD_INT 108
21001: EQUAL
21002: IFFALSE 21012
// sWound := true ;
21004: LD_ADDR_EXP 80
21008: PUSH
21009: LD_INT 1
21011: ST_TO_ADDR
// if p3 = 109 then
21012: LD_VAR 0 3
21016: PUSH
21017: LD_INT 109
21019: EQUAL
21020: IFFALSE 21030
// sBetray := true ;
21022: LD_ADDR_EXP 84
21026: PUSH
21027: LD_INT 1
21029: ST_TO_ADDR
// if p3 = 110 then
21030: LD_VAR 0 3
21034: PUSH
21035: LD_INT 110
21037: EQUAL
21038: IFFALSE 21048
// sContamin := true ;
21040: LD_ADDR_EXP 85
21044: PUSH
21045: LD_INT 1
21047: ST_TO_ADDR
// if p3 = 111 then
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 111
21055: EQUAL
21056: IFFALSE 21066
// sOil := true ;
21058: LD_ADDR_EXP 87
21062: PUSH
21063: LD_INT 1
21065: ST_TO_ADDR
// if p3 = 112 then
21066: LD_VAR 0 3
21070: PUSH
21071: LD_INT 112
21073: EQUAL
21074: IFFALSE 21084
// sStu := true ;
21076: LD_ADDR_EXP 91
21080: PUSH
21081: LD_INT 1
21083: ST_TO_ADDR
// if p3 = 113 then
21084: LD_VAR 0 3
21088: PUSH
21089: LD_INT 113
21091: EQUAL
21092: IFFALSE 21102
// sBazooka := true ;
21094: LD_ADDR_EXP 94
21098: PUSH
21099: LD_INT 1
21101: ST_TO_ADDR
// if p3 = 114 then
21102: LD_VAR 0 3
21106: PUSH
21107: LD_INT 114
21109: EQUAL
21110: IFFALSE 21120
// sMortar := true ;
21112: LD_ADDR_EXP 95
21116: PUSH
21117: LD_INT 1
21119: ST_TO_ADDR
// if p3 = 115 then
21120: LD_VAR 0 3
21124: PUSH
21125: LD_INT 115
21127: EQUAL
21128: IFFALSE 21138
// sRanger := true ;
21130: LD_ADDR_EXP 105
21134: PUSH
21135: LD_INT 1
21137: ST_TO_ADDR
// if p3 = 116 then
21138: LD_VAR 0 3
21142: PUSH
21143: LD_INT 116
21145: EQUAL
21146: IFFALSE 21156
// sComputer := true ;
21148: LD_ADDR_EXP 106
21152: PUSH
21153: LD_INT 1
21155: ST_TO_ADDR
// if p3 = 117 then
21156: LD_VAR 0 3
21160: PUSH
21161: LD_INT 117
21163: EQUAL
21164: IFFALSE 21174
// s30 := true ;
21166: LD_ADDR_EXP 107
21170: PUSH
21171: LD_INT 1
21173: ST_TO_ADDR
// if p3 = 118 then
21174: LD_VAR 0 3
21178: PUSH
21179: LD_INT 118
21181: EQUAL
21182: IFFALSE 21192
// s60 := true ;
21184: LD_ADDR_EXP 108
21188: PUSH
21189: LD_INT 1
21191: ST_TO_ADDR
// end ; if p2 = hack_mode then
21192: LD_VAR 0 2
21196: PUSH
21197: LD_INT 101
21199: EQUAL
21200: IFFALSE 21328
// begin case p3 of 1 :
21202: LD_VAR 0 3
21206: PUSH
21207: LD_INT 1
21209: DOUBLE
21210: EQUAL
21211: IFTRUE 21215
21213: GO 21222
21215: POP
// hHackUnlimitedResources ; 2 :
21216: CALL 33475 0 0
21220: GO 21328
21222: LD_INT 2
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21237
21230: POP
// hHackSetLevel10 ; 3 :
21231: CALL 33608 0 0
21235: GO 21328
21237: LD_INT 3
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21252
21245: POP
// hHackSetLevel10YourUnits ; 4 :
21246: CALL 33693 0 0
21250: GO 21328
21252: LD_INT 4
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21267
21260: POP
// hHackInvincible ; 5 :
21261: CALL 34141 0 0
21265: GO 21328
21267: LD_INT 5
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21282
21275: POP
// hHackInvisible ; 6 :
21276: CALL 34252 0 0
21280: GO 21328
21282: LD_INT 6
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21297
21290: POP
// hHackChangeYourSide ; 7 :
21291: CALL 34309 0 0
21295: GO 21328
21297: LD_INT 7
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21312
21305: POP
// hHackChangeUnitSide ; 8 :
21306: CALL 34351 0 0
21310: GO 21328
21312: LD_INT 8
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21327
21320: POP
// hHackFog ; end ;
21321: CALL 34452 0 0
21325: GO 21328
21327: POP
// end ; if p2 = game_save_mode then
21328: LD_VAR 0 2
21332: PUSH
21333: LD_INT 102
21335: EQUAL
21336: IFFALSE 21391
// begin if p3 = 1 then
21338: LD_VAR 0 3
21342: PUSH
21343: LD_INT 1
21345: EQUAL
21346: IFFALSE 21358
// globalGameSaveCounter := p4 ;
21348: LD_ADDR_EXP 51
21352: PUSH
21353: LD_VAR 0 4
21357: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21358: LD_VAR 0 3
21362: PUSH
21363: LD_INT 2
21365: EQUAL
21366: PUSH
21367: LD_EXP 51
21371: AND
21372: IFFALSE 21391
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21374: LD_STRING setGameSaveCounter(
21376: PUSH
21377: LD_EXP 51
21381: STR
21382: PUSH
21383: LD_STRING )
21385: STR
21386: PPUSH
21387: CALL_OW 559
// end ; end ;
21391: LD_VAR 0 7
21395: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21396: LD_INT 0
21398: PPUSH
// streamModeActive := false ;
21399: LD_ADDR_EXP 52
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// normalCounter := 36 ;
21407: LD_ADDR_EXP 53
21411: PUSH
21412: LD_INT 36
21414: ST_TO_ADDR
// hardcoreCounter := 18 ;
21415: LD_ADDR_EXP 54
21419: PUSH
21420: LD_INT 18
21422: ST_TO_ADDR
// sRocket := false ;
21423: LD_ADDR_EXP 57
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sSpeed := false ;
21431: LD_ADDR_EXP 56
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sEngine := false ;
21439: LD_ADDR_EXP 58
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sSpec := false ;
21447: LD_ADDR_EXP 55
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sLevel := false ;
21455: LD_ADDR_EXP 59
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// sArmoury := false ;
21463: LD_ADDR_EXP 60
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
// sRadar := false ;
21471: LD_ADDR_EXP 61
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// sBunker := false ;
21479: LD_ADDR_EXP 62
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sHack := false ;
21487: LD_ADDR_EXP 63
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sFire := false ;
21495: LD_ADDR_EXP 64
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sRefresh := false ;
21503: LD_ADDR_EXP 65
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sExp := false ;
21511: LD_ADDR_EXP 66
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// sDepot := false ;
21519: LD_ADDR_EXP 67
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// sFlag := false ;
21527: LD_ADDR_EXP 68
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// sKamikadze := false ;
21535: LD_ADDR_EXP 76
21539: PUSH
21540: LD_INT 0
21542: ST_TO_ADDR
// sTroll := false ;
21543: LD_ADDR_EXP 77
21547: PUSH
21548: LD_INT 0
21550: ST_TO_ADDR
// sSlow := false ;
21551: LD_ADDR_EXP 78
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// sLack := false ;
21559: LD_ADDR_EXP 79
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// sTank := false ;
21567: LD_ADDR_EXP 81
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sRemote := false ;
21575: LD_ADDR_EXP 82
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// sPowell := false ;
21583: LD_ADDR_EXP 83
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sTeleport := false ;
21591: LD_ADDR_EXP 86
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sOilTower := false ;
21599: LD_ADDR_EXP 88
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sShovel := false ;
21607: LD_ADDR_EXP 89
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sSheik := false ;
21615: LD_ADDR_EXP 90
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sEarthquake := false ;
21623: LD_ADDR_EXP 92
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sAI := false ;
21631: LD_ADDR_EXP 93
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sCargo := false ;
21639: LD_ADDR_EXP 96
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sDLaser := false ;
21647: LD_ADDR_EXP 97
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sExchange := false ;
21655: LD_ADDR_EXP 98
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sFac := false ;
21663: LD_ADDR_EXP 99
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sPower := false ;
21671: LD_ADDR_EXP 100
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sRandom := false ;
21679: LD_ADDR_EXP 101
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sShield := false ;
21687: LD_ADDR_EXP 102
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sTime := false ;
21695: LD_ADDR_EXP 103
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sTools := false ;
21703: LD_ADDR_EXP 104
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sSold := false ;
21711: LD_ADDR_EXP 69
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sDiff := false ;
21719: LD_ADDR_EXP 70
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sFog := false ;
21727: LD_ADDR_EXP 73
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sReset := false ;
21735: LD_ADDR_EXP 74
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sSun := false ;
21743: LD_ADDR_EXP 75
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTiger := false ;
21751: LD_ADDR_EXP 71
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sBomb := false ;
21759: LD_ADDR_EXP 72
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sWound := false ;
21767: LD_ADDR_EXP 80
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sBetray := false ;
21775: LD_ADDR_EXP 84
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sContamin := false ;
21783: LD_ADDR_EXP 85
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sOil := false ;
21791: LD_ADDR_EXP 87
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sStu := false ;
21799: LD_ADDR_EXP 91
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sBazooka := false ;
21807: LD_ADDR_EXP 94
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sMortar := false ;
21815: LD_ADDR_EXP 95
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sRanger := false ;
21823: LD_ADDR_EXP 105
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sComputer := false ;
21831: LD_ADDR_EXP 106
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// s30 := false ;
21839: LD_ADDR_EXP 107
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// s60 := false ;
21847: LD_ADDR_EXP 108
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// end ;
21855: LD_VAR 0 1
21859: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
// result := [ ] ;
21869: LD_ADDR_VAR 0 2
21873: PUSH
21874: EMPTY
21875: ST_TO_ADDR
// if campaign_id = 1 then
21876: LD_OWVAR 69
21880: PUSH
21881: LD_INT 1
21883: EQUAL
21884: IFFALSE 25050
// begin case mission_number of 1 :
21886: LD_OWVAR 70
21890: PUSH
21891: LD_INT 1
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 21975
21899: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21900: LD_ADDR_VAR 0 2
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 4
21910: PUSH
21911: LD_INT 11
21913: PUSH
21914: LD_INT 12
21916: PUSH
21917: LD_INT 15
21919: PUSH
21920: LD_INT 16
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_INT 23
21928: PUSH
21929: LD_INT 26
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 101
21945: PUSH
21946: LD_INT 102
21948: PUSH
21949: LD_INT 106
21951: PUSH
21952: LD_INT 116
21954: PUSH
21955: LD_INT 117
21957: PUSH
21958: LD_INT 118
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: ST_TO_ADDR
21973: GO 25048
21975: LD_INT 2
21977: DOUBLE
21978: EQUAL
21979: IFTRUE 21983
21981: GO 22067
21983: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21984: LD_ADDR_VAR 0 2
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 4
21994: PUSH
21995: LD_INT 11
21997: PUSH
21998: LD_INT 12
22000: PUSH
22001: LD_INT 15
22003: PUSH
22004: LD_INT 16
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 26
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 101
22029: PUSH
22030: LD_INT 102
22032: PUSH
22033: LD_INT 105
22035: PUSH
22036: LD_INT 106
22038: PUSH
22039: LD_INT 108
22041: PUSH
22042: LD_INT 116
22044: PUSH
22045: LD_INT 117
22047: PUSH
22048: LD_INT 118
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 25048
22067: LD_INT 3
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22163
22075: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 11
22092: PUSH
22093: LD_INT 12
22095: PUSH
22096: LD_INT 15
22098: PUSH
22099: LD_INT 16
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 26
22107: PUSH
22108: LD_INT 36
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 101
22125: PUSH
22126: LD_INT 102
22128: PUSH
22129: LD_INT 105
22131: PUSH
22132: LD_INT 106
22134: PUSH
22135: LD_INT 108
22137: PUSH
22138: LD_INT 116
22140: PUSH
22141: LD_INT 117
22143: PUSH
22144: LD_INT 118
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: ST_TO_ADDR
22161: GO 25048
22163: LD_INT 4
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22267
22171: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22172: LD_ADDR_VAR 0 2
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: LD_INT 4
22182: PUSH
22183: LD_INT 5
22185: PUSH
22186: LD_INT 8
22188: PUSH
22189: LD_INT 11
22191: PUSH
22192: LD_INT 12
22194: PUSH
22195: LD_INT 15
22197: PUSH
22198: LD_INT 16
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 36
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 101
22229: PUSH
22230: LD_INT 102
22232: PUSH
22233: LD_INT 105
22235: PUSH
22236: LD_INT 106
22238: PUSH
22239: LD_INT 108
22241: PUSH
22242: LD_INT 116
22244: PUSH
22245: LD_INT 117
22247: PUSH
22248: LD_INT 118
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: ST_TO_ADDR
22265: GO 25048
22267: LD_INT 5
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22387
22275: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22276: LD_ADDR_VAR 0 2
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: LD_INT 4
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: LD_INT 6
22292: PUSH
22293: LD_INT 8
22295: PUSH
22296: LD_INT 11
22298: PUSH
22299: LD_INT 12
22301: PUSH
22302: LD_INT 15
22304: PUSH
22305: LD_INT 16
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_INT 23
22313: PUSH
22314: LD_INT 25
22316: PUSH
22317: LD_INT 26
22319: PUSH
22320: LD_INT 36
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 101
22341: PUSH
22342: LD_INT 102
22344: PUSH
22345: LD_INT 105
22347: PUSH
22348: LD_INT 106
22350: PUSH
22351: LD_INT 108
22353: PUSH
22354: LD_INT 109
22356: PUSH
22357: LD_INT 112
22359: PUSH
22360: LD_INT 116
22362: PUSH
22363: LD_INT 117
22365: PUSH
22366: LD_INT 118
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: ST_TO_ADDR
22385: GO 25048
22387: LD_INT 6
22389: DOUBLE
22390: EQUAL
22391: IFTRUE 22395
22393: GO 22527
22395: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22396: LD_ADDR_VAR 0 2
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: LD_INT 4
22406: PUSH
22407: LD_INT 5
22409: PUSH
22410: LD_INT 6
22412: PUSH
22413: LD_INT 8
22415: PUSH
22416: LD_INT 11
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: LD_INT 15
22424: PUSH
22425: LD_INT 16
22427: PUSH
22428: LD_INT 20
22430: PUSH
22431: LD_INT 21
22433: PUSH
22434: LD_INT 22
22436: PUSH
22437: LD_INT 23
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 26
22445: PUSH
22446: LD_INT 30
22448: PUSH
22449: LD_INT 31
22451: PUSH
22452: LD_INT 32
22454: PUSH
22455: LD_INT 36
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 101
22481: PUSH
22482: LD_INT 102
22484: PUSH
22485: LD_INT 105
22487: PUSH
22488: LD_INT 106
22490: PUSH
22491: LD_INT 108
22493: PUSH
22494: LD_INT 109
22496: PUSH
22497: LD_INT 112
22499: PUSH
22500: LD_INT 116
22502: PUSH
22503: LD_INT 117
22505: PUSH
22506: LD_INT 118
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: ST_TO_ADDR
22525: GO 25048
22527: LD_INT 7
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 22647
22535: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22536: LD_ADDR_VAR 0 2
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 4
22546: PUSH
22547: LD_INT 5
22549: PUSH
22550: LD_INT 7
22552: PUSH
22553: LD_INT 11
22555: PUSH
22556: LD_INT 12
22558: PUSH
22559: LD_INT 15
22561: PUSH
22562: LD_INT 16
22564: PUSH
22565: LD_INT 20
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 22
22573: PUSH
22574: LD_INT 23
22576: PUSH
22577: LD_INT 25
22579: PUSH
22580: LD_INT 26
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 101
22601: PUSH
22602: LD_INT 102
22604: PUSH
22605: LD_INT 103
22607: PUSH
22608: LD_INT 105
22610: PUSH
22611: LD_INT 106
22613: PUSH
22614: LD_INT 108
22616: PUSH
22617: LD_INT 112
22619: PUSH
22620: LD_INT 116
22622: PUSH
22623: LD_INT 117
22625: PUSH
22626: LD_INT 118
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: ST_TO_ADDR
22645: GO 25048
22647: LD_INT 8
22649: DOUBLE
22650: EQUAL
22651: IFTRUE 22655
22653: GO 22795
22655: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22656: LD_ADDR_VAR 0 2
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: LD_INT 4
22666: PUSH
22667: LD_INT 5
22669: PUSH
22670: LD_INT 6
22672: PUSH
22673: LD_INT 7
22675: PUSH
22676: LD_INT 8
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 15
22687: PUSH
22688: LD_INT 16
22690: PUSH
22691: LD_INT 20
22693: PUSH
22694: LD_INT 21
22696: PUSH
22697: LD_INT 22
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 25
22705: PUSH
22706: LD_INT 26
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: LD_INT 31
22714: PUSH
22715: LD_INT 32
22717: PUSH
22718: LD_INT 36
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 101
22745: PUSH
22746: LD_INT 102
22748: PUSH
22749: LD_INT 103
22751: PUSH
22752: LD_INT 105
22754: PUSH
22755: LD_INT 106
22757: PUSH
22758: LD_INT 108
22760: PUSH
22761: LD_INT 109
22763: PUSH
22764: LD_INT 112
22766: PUSH
22767: LD_INT 116
22769: PUSH
22770: LD_INT 117
22772: PUSH
22773: LD_INT 118
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: ST_TO_ADDR
22793: GO 25048
22795: LD_INT 9
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22951
22803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: LD_INT 4
22814: PUSH
22815: LD_INT 5
22817: PUSH
22818: LD_INT 6
22820: PUSH
22821: LD_INT 7
22823: PUSH
22824: LD_INT 8
22826: PUSH
22827: LD_INT 11
22829: PUSH
22830: LD_INT 12
22832: PUSH
22833: LD_INT 15
22835: PUSH
22836: LD_INT 16
22838: PUSH
22839: LD_INT 20
22841: PUSH
22842: LD_INT 21
22844: PUSH
22845: LD_INT 22
22847: PUSH
22848: LD_INT 23
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 28
22859: PUSH
22860: LD_INT 30
22862: PUSH
22863: LD_INT 31
22865: PUSH
22866: LD_INT 32
22868: PUSH
22869: LD_INT 36
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 101
22897: PUSH
22898: LD_INT 102
22900: PUSH
22901: LD_INT 103
22903: PUSH
22904: LD_INT 105
22906: PUSH
22907: LD_INT 106
22909: PUSH
22910: LD_INT 108
22912: PUSH
22913: LD_INT 109
22915: PUSH
22916: LD_INT 112
22918: PUSH
22919: LD_INT 114
22921: PUSH
22922: LD_INT 116
22924: PUSH
22925: LD_INT 117
22927: PUSH
22928: LD_INT 118
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: ST_TO_ADDR
22949: GO 25048
22951: LD_INT 10
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 23155
22959: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22960: LD_ADDR_VAR 0 2
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 4
22970: PUSH
22971: LD_INT 5
22973: PUSH
22974: LD_INT 6
22976: PUSH
22977: LD_INT 7
22979: PUSH
22980: LD_INT 8
22982: PUSH
22983: LD_INT 9
22985: PUSH
22986: LD_INT 10
22988: PUSH
22989: LD_INT 11
22991: PUSH
22992: LD_INT 12
22994: PUSH
22995: LD_INT 13
22997: PUSH
22998: LD_INT 14
23000: PUSH
23001: LD_INT 15
23003: PUSH
23004: LD_INT 16
23006: PUSH
23007: LD_INT 17
23009: PUSH
23010: LD_INT 18
23012: PUSH
23013: LD_INT 19
23015: PUSH
23016: LD_INT 20
23018: PUSH
23019: LD_INT 21
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_INT 23
23027: PUSH
23028: LD_INT 24
23030: PUSH
23031: LD_INT 25
23033: PUSH
23034: LD_INT 26
23036: PUSH
23037: LD_INT 28
23039: PUSH
23040: LD_INT 30
23042: PUSH
23043: LD_INT 31
23045: PUSH
23046: LD_INT 32
23048: PUSH
23049: LD_INT 36
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 101
23085: PUSH
23086: LD_INT 102
23088: PUSH
23089: LD_INT 103
23091: PUSH
23092: LD_INT 104
23094: PUSH
23095: LD_INT 105
23097: PUSH
23098: LD_INT 106
23100: PUSH
23101: LD_INT 107
23103: PUSH
23104: LD_INT 108
23106: PUSH
23107: LD_INT 109
23109: PUSH
23110: LD_INT 110
23112: PUSH
23113: LD_INT 111
23115: PUSH
23116: LD_INT 112
23118: PUSH
23119: LD_INT 114
23121: PUSH
23122: LD_INT 116
23124: PUSH
23125: LD_INT 117
23127: PUSH
23128: LD_INT 118
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: ST_TO_ADDR
23153: GO 25048
23155: LD_INT 11
23157: DOUBLE
23158: EQUAL
23159: IFTRUE 23163
23161: GO 23367
23163: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23164: LD_ADDR_VAR 0 2
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 3
23174: PUSH
23175: LD_INT 4
23177: PUSH
23178: LD_INT 5
23180: PUSH
23181: LD_INT 6
23183: PUSH
23184: LD_INT 7
23186: PUSH
23187: LD_INT 8
23189: PUSH
23190: LD_INT 9
23192: PUSH
23193: LD_INT 10
23195: PUSH
23196: LD_INT 11
23198: PUSH
23199: LD_INT 12
23201: PUSH
23202: LD_INT 13
23204: PUSH
23205: LD_INT 14
23207: PUSH
23208: LD_INT 15
23210: PUSH
23211: LD_INT 16
23213: PUSH
23214: LD_INT 17
23216: PUSH
23217: LD_INT 18
23219: PUSH
23220: LD_INT 19
23222: PUSH
23223: LD_INT 20
23225: PUSH
23226: LD_INT 21
23228: PUSH
23229: LD_INT 22
23231: PUSH
23232: LD_INT 23
23234: PUSH
23235: LD_INT 24
23237: PUSH
23238: LD_INT 25
23240: PUSH
23241: LD_INT 26
23243: PUSH
23244: LD_INT 28
23246: PUSH
23247: LD_INT 30
23249: PUSH
23250: LD_INT 31
23252: PUSH
23253: LD_INT 32
23255: PUSH
23256: LD_INT 34
23258: PUSH
23259: LD_INT 36
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 101
23297: PUSH
23298: LD_INT 102
23300: PUSH
23301: LD_INT 103
23303: PUSH
23304: LD_INT 104
23306: PUSH
23307: LD_INT 105
23309: PUSH
23310: LD_INT 106
23312: PUSH
23313: LD_INT 107
23315: PUSH
23316: LD_INT 108
23318: PUSH
23319: LD_INT 109
23321: PUSH
23322: LD_INT 110
23324: PUSH
23325: LD_INT 111
23327: PUSH
23328: LD_INT 112
23330: PUSH
23331: LD_INT 114
23333: PUSH
23334: LD_INT 116
23336: PUSH
23337: LD_INT 117
23339: PUSH
23340: LD_INT 118
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: ST_TO_ADDR
23365: GO 25048
23367: LD_INT 12
23369: DOUBLE
23370: EQUAL
23371: IFTRUE 23375
23373: GO 23595
23375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 3
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 6
23398: PUSH
23399: LD_INT 7
23401: PUSH
23402: LD_INT 8
23404: PUSH
23405: LD_INT 9
23407: PUSH
23408: LD_INT 10
23410: PUSH
23411: LD_INT 11
23413: PUSH
23414: LD_INT 12
23416: PUSH
23417: LD_INT 13
23419: PUSH
23420: LD_INT 14
23422: PUSH
23423: LD_INT 15
23425: PUSH
23426: LD_INT 16
23428: PUSH
23429: LD_INT 17
23431: PUSH
23432: LD_INT 18
23434: PUSH
23435: LD_INT 19
23437: PUSH
23438: LD_INT 20
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 22
23446: PUSH
23447: LD_INT 23
23449: PUSH
23450: LD_INT 24
23452: PUSH
23453: LD_INT 25
23455: PUSH
23456: LD_INT 26
23458: PUSH
23459: LD_INT 27
23461: PUSH
23462: LD_INT 28
23464: PUSH
23465: LD_INT 30
23467: PUSH
23468: LD_INT 31
23470: PUSH
23471: LD_INT 32
23473: PUSH
23474: LD_INT 33
23476: PUSH
23477: LD_INT 34
23479: PUSH
23480: LD_INT 36
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 101
23521: PUSH
23522: LD_INT 102
23524: PUSH
23525: LD_INT 103
23527: PUSH
23528: LD_INT 104
23530: PUSH
23531: LD_INT 105
23533: PUSH
23534: LD_INT 106
23536: PUSH
23537: LD_INT 107
23539: PUSH
23540: LD_INT 108
23542: PUSH
23543: LD_INT 109
23545: PUSH
23546: LD_INT 110
23548: PUSH
23549: LD_INT 111
23551: PUSH
23552: LD_INT 112
23554: PUSH
23555: LD_INT 113
23557: PUSH
23558: LD_INT 114
23560: PUSH
23561: LD_INT 116
23563: PUSH
23564: LD_INT 117
23566: PUSH
23567: LD_INT 118
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: ST_TO_ADDR
23593: GO 25048
23595: LD_INT 13
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23811
23603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23604: LD_ADDR_VAR 0 2
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: LD_INT 4
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: LD_INT 8
23626: PUSH
23627: LD_INT 9
23629: PUSH
23630: LD_INT 10
23632: PUSH
23633: LD_INT 11
23635: PUSH
23636: LD_INT 12
23638: PUSH
23639: LD_INT 14
23641: PUSH
23642: LD_INT 15
23644: PUSH
23645: LD_INT 16
23647: PUSH
23648: LD_INT 17
23650: PUSH
23651: LD_INT 18
23653: PUSH
23654: LD_INT 19
23656: PUSH
23657: LD_INT 20
23659: PUSH
23660: LD_INT 21
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 23
23668: PUSH
23669: LD_INT 24
23671: PUSH
23672: LD_INT 25
23674: PUSH
23675: LD_INT 26
23677: PUSH
23678: LD_INT 27
23680: PUSH
23681: LD_INT 28
23683: PUSH
23684: LD_INT 30
23686: PUSH
23687: LD_INT 31
23689: PUSH
23690: LD_INT 32
23692: PUSH
23693: LD_INT 33
23695: PUSH
23696: LD_INT 34
23698: PUSH
23699: LD_INT 36
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 101
23737: PUSH
23738: LD_INT 102
23740: PUSH
23741: LD_INT 103
23743: PUSH
23744: LD_INT 104
23746: PUSH
23747: LD_INT 105
23749: PUSH
23750: LD_INT 106
23752: PUSH
23753: LD_INT 107
23755: PUSH
23756: LD_INT 108
23758: PUSH
23759: LD_INT 109
23761: PUSH
23762: LD_INT 110
23764: PUSH
23765: LD_INT 111
23767: PUSH
23768: LD_INT 112
23770: PUSH
23771: LD_INT 113
23773: PUSH
23774: LD_INT 114
23776: PUSH
23777: LD_INT 116
23779: PUSH
23780: LD_INT 117
23782: PUSH
23783: LD_INT 118
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: ST_TO_ADDR
23809: GO 25048
23811: LD_INT 14
23813: DOUBLE
23814: EQUAL
23815: IFTRUE 23819
23817: GO 24043
23819: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: LD_INT 4
23836: PUSH
23837: LD_INT 5
23839: PUSH
23840: LD_INT 6
23842: PUSH
23843: LD_INT 7
23845: PUSH
23846: LD_INT 8
23848: PUSH
23849: LD_INT 9
23851: PUSH
23852: LD_INT 10
23854: PUSH
23855: LD_INT 11
23857: PUSH
23858: LD_INT 12
23860: PUSH
23861: LD_INT 13
23863: PUSH
23864: LD_INT 14
23866: PUSH
23867: LD_INT 15
23869: PUSH
23870: LD_INT 16
23872: PUSH
23873: LD_INT 17
23875: PUSH
23876: LD_INT 18
23878: PUSH
23879: LD_INT 19
23881: PUSH
23882: LD_INT 20
23884: PUSH
23885: LD_INT 21
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_INT 23
23893: PUSH
23894: LD_INT 24
23896: PUSH
23897: LD_INT 25
23899: PUSH
23900: LD_INT 26
23902: PUSH
23903: LD_INT 27
23905: PUSH
23906: LD_INT 28
23908: PUSH
23909: LD_INT 29
23911: PUSH
23912: LD_INT 30
23914: PUSH
23915: LD_INT 31
23917: PUSH
23918: LD_INT 32
23920: PUSH
23921: LD_INT 33
23923: PUSH
23924: LD_INT 34
23926: PUSH
23927: LD_INT 36
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 101
23969: PUSH
23970: LD_INT 102
23972: PUSH
23973: LD_INT 103
23975: PUSH
23976: LD_INT 104
23978: PUSH
23979: LD_INT 105
23981: PUSH
23982: LD_INT 106
23984: PUSH
23985: LD_INT 107
23987: PUSH
23988: LD_INT 108
23990: PUSH
23991: LD_INT 109
23993: PUSH
23994: LD_INT 110
23996: PUSH
23997: LD_INT 111
23999: PUSH
24000: LD_INT 112
24002: PUSH
24003: LD_INT 113
24005: PUSH
24006: LD_INT 114
24008: PUSH
24009: LD_INT 116
24011: PUSH
24012: LD_INT 117
24014: PUSH
24015: LD_INT 118
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: ST_TO_ADDR
24041: GO 25048
24043: LD_INT 15
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24275
24051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24052: LD_ADDR_VAR 0 2
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: LD_INT 3
24065: PUSH
24066: LD_INT 4
24068: PUSH
24069: LD_INT 5
24071: PUSH
24072: LD_INT 6
24074: PUSH
24075: LD_INT 7
24077: PUSH
24078: LD_INT 8
24080: PUSH
24081: LD_INT 9
24083: PUSH
24084: LD_INT 10
24086: PUSH
24087: LD_INT 11
24089: PUSH
24090: LD_INT 12
24092: PUSH
24093: LD_INT 13
24095: PUSH
24096: LD_INT 14
24098: PUSH
24099: LD_INT 15
24101: PUSH
24102: LD_INT 16
24104: PUSH
24105: LD_INT 17
24107: PUSH
24108: LD_INT 18
24110: PUSH
24111: LD_INT 19
24113: PUSH
24114: LD_INT 20
24116: PUSH
24117: LD_INT 21
24119: PUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 23
24125: PUSH
24126: LD_INT 24
24128: PUSH
24129: LD_INT 25
24131: PUSH
24132: LD_INT 26
24134: PUSH
24135: LD_INT 27
24137: PUSH
24138: LD_INT 28
24140: PUSH
24141: LD_INT 29
24143: PUSH
24144: LD_INT 30
24146: PUSH
24147: LD_INT 31
24149: PUSH
24150: LD_INT 32
24152: PUSH
24153: LD_INT 33
24155: PUSH
24156: LD_INT 34
24158: PUSH
24159: LD_INT 36
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 101
24201: PUSH
24202: LD_INT 102
24204: PUSH
24205: LD_INT 103
24207: PUSH
24208: LD_INT 104
24210: PUSH
24211: LD_INT 105
24213: PUSH
24214: LD_INT 106
24216: PUSH
24217: LD_INT 107
24219: PUSH
24220: LD_INT 108
24222: PUSH
24223: LD_INT 109
24225: PUSH
24226: LD_INT 110
24228: PUSH
24229: LD_INT 111
24231: PUSH
24232: LD_INT 112
24234: PUSH
24235: LD_INT 113
24237: PUSH
24238: LD_INT 114
24240: PUSH
24241: LD_INT 116
24243: PUSH
24244: LD_INT 117
24246: PUSH
24247: LD_INT 118
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: ST_TO_ADDR
24273: GO 25048
24275: LD_INT 16
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24419
24283: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 4
24294: PUSH
24295: LD_INT 5
24297: PUSH
24298: LD_INT 7
24300: PUSH
24301: LD_INT 11
24303: PUSH
24304: LD_INT 12
24306: PUSH
24307: LD_INT 15
24309: PUSH
24310: LD_INT 16
24312: PUSH
24313: LD_INT 20
24315: PUSH
24316: LD_INT 21
24318: PUSH
24319: LD_INT 22
24321: PUSH
24322: LD_INT 23
24324: PUSH
24325: LD_INT 25
24327: PUSH
24328: LD_INT 26
24330: PUSH
24331: LD_INT 30
24333: PUSH
24334: LD_INT 31
24336: PUSH
24337: LD_INT 32
24339: PUSH
24340: LD_INT 33
24342: PUSH
24343: LD_INT 34
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 101
24369: PUSH
24370: LD_INT 102
24372: PUSH
24373: LD_INT 103
24375: PUSH
24376: LD_INT 106
24378: PUSH
24379: LD_INT 108
24381: PUSH
24382: LD_INT 112
24384: PUSH
24385: LD_INT 113
24387: PUSH
24388: LD_INT 114
24390: PUSH
24391: LD_INT 116
24393: PUSH
24394: LD_INT 117
24396: PUSH
24397: LD_INT 118
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: ST_TO_ADDR
24417: GO 25048
24419: LD_INT 17
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24651
24427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: LD_INT 4
24444: PUSH
24445: LD_INT 5
24447: PUSH
24448: LD_INT 6
24450: PUSH
24451: LD_INT 7
24453: PUSH
24454: LD_INT 8
24456: PUSH
24457: LD_INT 9
24459: PUSH
24460: LD_INT 10
24462: PUSH
24463: LD_INT 11
24465: PUSH
24466: LD_INT 12
24468: PUSH
24469: LD_INT 13
24471: PUSH
24472: LD_INT 14
24474: PUSH
24475: LD_INT 15
24477: PUSH
24478: LD_INT 16
24480: PUSH
24481: LD_INT 17
24483: PUSH
24484: LD_INT 18
24486: PUSH
24487: LD_INT 19
24489: PUSH
24490: LD_INT 20
24492: PUSH
24493: LD_INT 21
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_INT 23
24501: PUSH
24502: LD_INT 24
24504: PUSH
24505: LD_INT 25
24507: PUSH
24508: LD_INT 26
24510: PUSH
24511: LD_INT 27
24513: PUSH
24514: LD_INT 28
24516: PUSH
24517: LD_INT 29
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 31
24525: PUSH
24526: LD_INT 32
24528: PUSH
24529: LD_INT 33
24531: PUSH
24532: LD_INT 34
24534: PUSH
24535: LD_INT 36
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 101
24577: PUSH
24578: LD_INT 102
24580: PUSH
24581: LD_INT 103
24583: PUSH
24584: LD_INT 104
24586: PUSH
24587: LD_INT 105
24589: PUSH
24590: LD_INT 106
24592: PUSH
24593: LD_INT 107
24595: PUSH
24596: LD_INT 108
24598: PUSH
24599: LD_INT 109
24601: PUSH
24602: LD_INT 110
24604: PUSH
24605: LD_INT 111
24607: PUSH
24608: LD_INT 112
24610: PUSH
24611: LD_INT 113
24613: PUSH
24614: LD_INT 114
24616: PUSH
24617: LD_INT 116
24619: PUSH
24620: LD_INT 117
24622: PUSH
24623: LD_INT 118
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: ST_TO_ADDR
24649: GO 25048
24651: LD_INT 18
24653: DOUBLE
24654: EQUAL
24655: IFTRUE 24659
24657: GO 24807
24659: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24660: LD_ADDR_VAR 0 2
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 4
24670: PUSH
24671: LD_INT 5
24673: PUSH
24674: LD_INT 7
24676: PUSH
24677: LD_INT 11
24679: PUSH
24680: LD_INT 12
24682: PUSH
24683: LD_INT 15
24685: PUSH
24686: LD_INT 16
24688: PUSH
24689: LD_INT 20
24691: PUSH
24692: LD_INT 21
24694: PUSH
24695: LD_INT 22
24697: PUSH
24698: LD_INT 23
24700: PUSH
24701: LD_INT 25
24703: PUSH
24704: LD_INT 26
24706: PUSH
24707: LD_INT 30
24709: PUSH
24710: LD_INT 31
24712: PUSH
24713: LD_INT 32
24715: PUSH
24716: LD_INT 33
24718: PUSH
24719: LD_INT 34
24721: PUSH
24722: LD_INT 35
24724: PUSH
24725: LD_INT 36
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 101
24753: PUSH
24754: LD_INT 102
24756: PUSH
24757: LD_INT 103
24759: PUSH
24760: LD_INT 106
24762: PUSH
24763: LD_INT 108
24765: PUSH
24766: LD_INT 112
24768: PUSH
24769: LD_INT 113
24771: PUSH
24772: LD_INT 114
24774: PUSH
24775: LD_INT 115
24777: PUSH
24778: LD_INT 116
24780: PUSH
24781: LD_INT 117
24783: PUSH
24784: LD_INT 118
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: ST_TO_ADDR
24805: GO 25048
24807: LD_INT 19
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 25047
24815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24816: LD_ADDR_VAR 0 2
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 4
24832: PUSH
24833: LD_INT 5
24835: PUSH
24836: LD_INT 6
24838: PUSH
24839: LD_INT 7
24841: PUSH
24842: LD_INT 8
24844: PUSH
24845: LD_INT 9
24847: PUSH
24848: LD_INT 10
24850: PUSH
24851: LD_INT 11
24853: PUSH
24854: LD_INT 12
24856: PUSH
24857: LD_INT 13
24859: PUSH
24860: LD_INT 14
24862: PUSH
24863: LD_INT 15
24865: PUSH
24866: LD_INT 16
24868: PUSH
24869: LD_INT 17
24871: PUSH
24872: LD_INT 18
24874: PUSH
24875: LD_INT 19
24877: PUSH
24878: LD_INT 20
24880: PUSH
24881: LD_INT 21
24883: PUSH
24884: LD_INT 22
24886: PUSH
24887: LD_INT 23
24889: PUSH
24890: LD_INT 24
24892: PUSH
24893: LD_INT 25
24895: PUSH
24896: LD_INT 26
24898: PUSH
24899: LD_INT 27
24901: PUSH
24902: LD_INT 28
24904: PUSH
24905: LD_INT 29
24907: PUSH
24908: LD_INT 30
24910: PUSH
24911: LD_INT 31
24913: PUSH
24914: LD_INT 32
24916: PUSH
24917: LD_INT 33
24919: PUSH
24920: LD_INT 34
24922: PUSH
24923: LD_INT 35
24925: PUSH
24926: LD_INT 36
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 101
24969: PUSH
24970: LD_INT 102
24972: PUSH
24973: LD_INT 103
24975: PUSH
24976: LD_INT 104
24978: PUSH
24979: LD_INT 105
24981: PUSH
24982: LD_INT 106
24984: PUSH
24985: LD_INT 107
24987: PUSH
24988: LD_INT 108
24990: PUSH
24991: LD_INT 109
24993: PUSH
24994: LD_INT 110
24996: PUSH
24997: LD_INT 111
24999: PUSH
25000: LD_INT 112
25002: PUSH
25003: LD_INT 113
25005: PUSH
25006: LD_INT 114
25008: PUSH
25009: LD_INT 115
25011: PUSH
25012: LD_INT 116
25014: PUSH
25015: LD_INT 117
25017: PUSH
25018: LD_INT 118
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: ST_TO_ADDR
25045: GO 25048
25047: POP
// end else
25048: GO 25279
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25050: LD_ADDR_VAR 0 2
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: LD_INT 4
25066: PUSH
25067: LD_INT 5
25069: PUSH
25070: LD_INT 6
25072: PUSH
25073: LD_INT 7
25075: PUSH
25076: LD_INT 8
25078: PUSH
25079: LD_INT 9
25081: PUSH
25082: LD_INT 10
25084: PUSH
25085: LD_INT 11
25087: PUSH
25088: LD_INT 12
25090: PUSH
25091: LD_INT 13
25093: PUSH
25094: LD_INT 14
25096: PUSH
25097: LD_INT 15
25099: PUSH
25100: LD_INT 16
25102: PUSH
25103: LD_INT 17
25105: PUSH
25106: LD_INT 18
25108: PUSH
25109: LD_INT 19
25111: PUSH
25112: LD_INT 20
25114: PUSH
25115: LD_INT 21
25117: PUSH
25118: LD_INT 22
25120: PUSH
25121: LD_INT 23
25123: PUSH
25124: LD_INT 24
25126: PUSH
25127: LD_INT 25
25129: PUSH
25130: LD_INT 26
25132: PUSH
25133: LD_INT 27
25135: PUSH
25136: LD_INT 28
25138: PUSH
25139: LD_INT 29
25141: PUSH
25142: LD_INT 30
25144: PUSH
25145: LD_INT 31
25147: PUSH
25148: LD_INT 32
25150: PUSH
25151: LD_INT 33
25153: PUSH
25154: LD_INT 34
25156: PUSH
25157: LD_INT 35
25159: PUSH
25160: LD_INT 36
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 101
25203: PUSH
25204: LD_INT 102
25206: PUSH
25207: LD_INT 103
25209: PUSH
25210: LD_INT 104
25212: PUSH
25213: LD_INT 105
25215: PUSH
25216: LD_INT 106
25218: PUSH
25219: LD_INT 107
25221: PUSH
25222: LD_INT 108
25224: PUSH
25225: LD_INT 109
25227: PUSH
25228: LD_INT 110
25230: PUSH
25231: LD_INT 111
25233: PUSH
25234: LD_INT 112
25236: PUSH
25237: LD_INT 113
25239: PUSH
25240: LD_INT 114
25242: PUSH
25243: LD_INT 115
25245: PUSH
25246: LD_INT 116
25248: PUSH
25249: LD_INT 117
25251: PUSH
25252: LD_INT 118
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: ST_TO_ADDR
// if result then
25279: LD_VAR 0 2
25283: IFFALSE 26069
// begin normal :=  ;
25285: LD_ADDR_VAR 0 5
25289: PUSH
25290: LD_STRING 
25292: ST_TO_ADDR
// hardcore :=  ;
25293: LD_ADDR_VAR 0 6
25297: PUSH
25298: LD_STRING 
25300: ST_TO_ADDR
// active :=  ;
25301: LD_ADDR_VAR 0 7
25305: PUSH
25306: LD_STRING 
25308: ST_TO_ADDR
// for i = 1 to normalCounter do
25309: LD_ADDR_VAR 0 8
25313: PUSH
25314: DOUBLE
25315: LD_INT 1
25317: DEC
25318: ST_TO_ADDR
25319: LD_EXP 53
25323: PUSH
25324: FOR_TO
25325: IFFALSE 25426
// begin tmp := 0 ;
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_STRING 0
25334: ST_TO_ADDR
// if result [ 1 ] then
25335: LD_VAR 0 2
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: IFFALSE 25408
// if result [ 1 ] [ 1 ] = i then
25345: LD_VAR 0 2
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: PUSH
25354: LD_INT 1
25356: ARRAY
25357: PUSH
25358: LD_VAR 0 8
25362: EQUAL
25363: IFFALSE 25408
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25365: LD_ADDR_VAR 0 2
25369: PUSH
25370: LD_VAR 0 2
25374: PPUSH
25375: LD_INT 1
25377: PPUSH
25378: LD_VAR 0 2
25382: PUSH
25383: LD_INT 1
25385: ARRAY
25386: PPUSH
25387: LD_INT 1
25389: PPUSH
25390: CALL_OW 3
25394: PPUSH
25395: CALL_OW 1
25399: ST_TO_ADDR
// tmp := 1 ;
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_STRING 1
25407: ST_TO_ADDR
// end ; normal := normal & tmp ;
25408: LD_ADDR_VAR 0 5
25412: PUSH
25413: LD_VAR 0 5
25417: PUSH
25418: LD_VAR 0 3
25422: STR
25423: ST_TO_ADDR
// end ;
25424: GO 25324
25426: POP
25427: POP
// for i = 1 to hardcoreCounter do
25428: LD_ADDR_VAR 0 8
25432: PUSH
25433: DOUBLE
25434: LD_INT 1
25436: DEC
25437: ST_TO_ADDR
25438: LD_EXP 54
25442: PUSH
25443: FOR_TO
25444: IFFALSE 25549
// begin tmp := 0 ;
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_STRING 0
25453: ST_TO_ADDR
// if result [ 2 ] then
25454: LD_VAR 0 2
25458: PUSH
25459: LD_INT 2
25461: ARRAY
25462: IFFALSE 25531
// if result [ 2 ] [ 1 ] = 100 + i then
25464: LD_VAR 0 2
25468: PUSH
25469: LD_INT 2
25471: ARRAY
25472: PUSH
25473: LD_INT 1
25475: ARRAY
25476: PUSH
25477: LD_INT 100
25479: PUSH
25480: LD_VAR 0 8
25484: PLUS
25485: EQUAL
25486: IFFALSE 25531
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25488: LD_ADDR_VAR 0 2
25492: PUSH
25493: LD_VAR 0 2
25497: PPUSH
25498: LD_INT 2
25500: PPUSH
25501: LD_VAR 0 2
25505: PUSH
25506: LD_INT 2
25508: ARRAY
25509: PPUSH
25510: LD_INT 1
25512: PPUSH
25513: CALL_OW 3
25517: PPUSH
25518: CALL_OW 1
25522: ST_TO_ADDR
// tmp := 1 ;
25523: LD_ADDR_VAR 0 3
25527: PUSH
25528: LD_STRING 1
25530: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25531: LD_ADDR_VAR 0 6
25535: PUSH
25536: LD_VAR 0 6
25540: PUSH
25541: LD_VAR 0 3
25545: STR
25546: ST_TO_ADDR
// end ;
25547: GO 25443
25549: POP
25550: POP
// if isGameLoad then
25551: LD_VAR 0 1
25555: IFFALSE 26030
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25557: LD_ADDR_VAR 0 4
25561: PUSH
25562: LD_EXP 57
25566: PUSH
25567: LD_EXP 56
25571: PUSH
25572: LD_EXP 58
25576: PUSH
25577: LD_EXP 55
25581: PUSH
25582: LD_EXP 59
25586: PUSH
25587: LD_EXP 60
25591: PUSH
25592: LD_EXP 61
25596: PUSH
25597: LD_EXP 62
25601: PUSH
25602: LD_EXP 63
25606: PUSH
25607: LD_EXP 64
25611: PUSH
25612: LD_EXP 65
25616: PUSH
25617: LD_EXP 66
25621: PUSH
25622: LD_EXP 67
25626: PUSH
25627: LD_EXP 68
25631: PUSH
25632: LD_EXP 76
25636: PUSH
25637: LD_EXP 77
25641: PUSH
25642: LD_EXP 78
25646: PUSH
25647: LD_EXP 79
25651: PUSH
25652: LD_EXP 81
25656: PUSH
25657: LD_EXP 82
25661: PUSH
25662: LD_EXP 83
25666: PUSH
25667: LD_EXP 86
25671: PUSH
25672: LD_EXP 88
25676: PUSH
25677: LD_EXP 89
25681: PUSH
25682: LD_EXP 90
25686: PUSH
25687: LD_EXP 92
25691: PUSH
25692: LD_EXP 93
25696: PUSH
25697: LD_EXP 96
25701: PUSH
25702: LD_EXP 97
25706: PUSH
25707: LD_EXP 98
25711: PUSH
25712: LD_EXP 99
25716: PUSH
25717: LD_EXP 100
25721: PUSH
25722: LD_EXP 101
25726: PUSH
25727: LD_EXP 102
25731: PUSH
25732: LD_EXP 103
25736: PUSH
25737: LD_EXP 104
25741: PUSH
25742: LD_EXP 69
25746: PUSH
25747: LD_EXP 70
25751: PUSH
25752: LD_EXP 73
25756: PUSH
25757: LD_EXP 74
25761: PUSH
25762: LD_EXP 75
25766: PUSH
25767: LD_EXP 71
25771: PUSH
25772: LD_EXP 72
25776: PUSH
25777: LD_EXP 80
25781: PUSH
25782: LD_EXP 84
25786: PUSH
25787: LD_EXP 85
25791: PUSH
25792: LD_EXP 87
25796: PUSH
25797: LD_EXP 91
25801: PUSH
25802: LD_EXP 94
25806: PUSH
25807: LD_EXP 95
25811: PUSH
25812: LD_EXP 105
25816: PUSH
25817: LD_EXP 106
25821: PUSH
25822: LD_EXP 107
25826: PUSH
25827: LD_EXP 108
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// tmp :=  ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_STRING 
25895: ST_TO_ADDR
// for i = 1 to normalCounter do
25896: LD_ADDR_VAR 0 8
25900: PUSH
25901: DOUBLE
25902: LD_INT 1
25904: DEC
25905: ST_TO_ADDR
25906: LD_EXP 53
25910: PUSH
25911: FOR_TO
25912: IFFALSE 25948
// begin if flags [ i ] then
25914: LD_VAR 0 4
25918: PUSH
25919: LD_VAR 0 8
25923: ARRAY
25924: IFFALSE 25946
// tmp := tmp & i & ; ;
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_VAR 0 3
25935: PUSH
25936: LD_VAR 0 8
25940: STR
25941: PUSH
25942: LD_STRING ;
25944: STR
25945: ST_TO_ADDR
// end ;
25946: GO 25911
25948: POP
25949: POP
// for i = 1 to hardcoreCounter do
25950: LD_ADDR_VAR 0 8
25954: PUSH
25955: DOUBLE
25956: LD_INT 1
25958: DEC
25959: ST_TO_ADDR
25960: LD_EXP 54
25964: PUSH
25965: FOR_TO
25966: IFFALSE 26012
// begin if flags [ normalCounter + i ] then
25968: LD_VAR 0 4
25972: PUSH
25973: LD_EXP 53
25977: PUSH
25978: LD_VAR 0 8
25982: PLUS
25983: ARRAY
25984: IFFALSE 26010
// tmp := tmp & ( 100 + i ) & ; ;
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_VAR 0 3
25995: PUSH
25996: LD_INT 100
25998: PUSH
25999: LD_VAR 0 8
26003: PLUS
26004: STR
26005: PUSH
26006: LD_STRING ;
26008: STR
26009: ST_TO_ADDR
// end ;
26010: GO 25965
26012: POP
26013: POP
// if tmp then
26014: LD_VAR 0 3
26018: IFFALSE 26030
// active := tmp ;
26020: LD_ADDR_VAR 0 7
26024: PUSH
26025: LD_VAR 0 3
26029: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26030: LD_STRING getStreamItemsFromMission("
26032: PUSH
26033: LD_VAR 0 5
26037: STR
26038: PUSH
26039: LD_STRING ","
26041: STR
26042: PUSH
26043: LD_VAR 0 6
26047: STR
26048: PUSH
26049: LD_STRING ","
26051: STR
26052: PUSH
26053: LD_VAR 0 7
26057: STR
26058: PUSH
26059: LD_STRING ")
26061: STR
26062: PPUSH
26063: CALL_OW 559
// end else
26067: GO 26076
// ToLua ( getStreamItemsFromMission("","","") ) ;
26069: LD_STRING getStreamItemsFromMission("","","")
26071: PPUSH
26072: CALL_OW 559
// end ;
26076: LD_VAR 0 2
26080: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26081: LD_EXP 52
26085: PUSH
26086: LD_EXP 57
26090: AND
26091: IFFALSE 26215
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
// begin enable ;
26100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_INT 22
26108: PUSH
26109: LD_OWVAR 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: LD_INT 34
26123: PUSH
26124: LD_INT 7
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 34
26133: PUSH
26134: LD_INT 45
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 34
26143: PUSH
26144: LD_INT 28
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 34
26153: PUSH
26154: LD_INT 47
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PPUSH
26172: CALL_OW 69
26176: ST_TO_ADDR
// if not tmp then
26177: LD_VAR 0 2
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26215
// for i in tmp do
26186: LD_ADDR_VAR 0 1
26190: PUSH
26191: LD_VAR 0 2
26195: PUSH
26196: FOR_IN
26197: IFFALSE 26213
// begin SetLives ( i , 0 ) ;
26199: LD_VAR 0 1
26203: PPUSH
26204: LD_INT 0
26206: PPUSH
26207: CALL_OW 234
// end ;
26211: GO 26196
26213: POP
26214: POP
// end ;
26215: PPOPN 2
26217: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26218: LD_EXP 52
26222: PUSH
26223: LD_EXP 58
26227: AND
26228: IFFALSE 26312
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
26236: PPUSH
// begin enable ;
26237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26238: LD_ADDR_VAR 0 2
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 32
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 2
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26312
// for i in tmp do
26283: LD_ADDR_VAR 0 1
26287: PUSH
26288: LD_VAR 0 2
26292: PUSH
26293: FOR_IN
26294: IFFALSE 26310
// begin SetLives ( i , 0 ) ;
26296: LD_VAR 0 1
26300: PPUSH
26301: LD_INT 0
26303: PPUSH
26304: CALL_OW 234
// end ;
26308: GO 26293
26310: POP
26311: POP
// end ;
26312: PPOPN 2
26314: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26315: LD_EXP 52
26319: PUSH
26320: LD_EXP 55
26324: AND
26325: IFFALSE 26418
26327: GO 26329
26329: DISABLE
26330: LD_INT 0
26332: PPUSH
// begin enable ;
26333: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26334: LD_ADDR_VAR 0 1
26338: PUSH
26339: LD_INT 22
26341: PUSH
26342: LD_OWVAR 2
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: LD_INT 25
26356: PUSH
26357: LD_INT 5
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 25
26366: PUSH
26367: LD_INT 9
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 25
26376: PUSH
26377: LD_INT 8
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26416
// begin SetClass ( i , 1 ) ;
26402: LD_VAR 0 1
26406: PPUSH
26407: LD_INT 1
26409: PPUSH
26410: CALL_OW 336
// end ;
26414: GO 26399
26416: POP
26417: POP
// end ;
26418: PPOPN 1
26420: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26421: LD_EXP 52
26425: PUSH
26426: LD_EXP 56
26430: AND
26431: PUSH
26432: LD_OWVAR 65
26436: PUSH
26437: LD_INT 7
26439: LESS
26440: AND
26441: IFFALSE 26455
26443: GO 26445
26445: DISABLE
// begin enable ;
26446: ENABLE
// game_speed := 7 ;
26447: LD_ADDR_OWVAR 65
26451: PUSH
26452: LD_INT 7
26454: ST_TO_ADDR
// end ;
26455: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26456: LD_EXP 52
26460: PUSH
26461: LD_EXP 59
26465: AND
26466: IFFALSE 26668
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_INT 81
26483: PUSH
26484: LD_OWVAR 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PPUSH
26507: CALL_OW 69
26511: ST_TO_ADDR
// if not tmp then
26512: LD_VAR 0 3
26516: NOT
26517: IFFALSE 26521
// exit ;
26519: GO 26668
// if tmp > 5 then
26521: LD_VAR 0 3
26525: PUSH
26526: LD_INT 5
26528: GREATER
26529: IFFALSE 26541
// k := 5 else
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: LD_INT 5
26538: ST_TO_ADDR
26539: GO 26551
// k := tmp ;
26541: LD_ADDR_VAR 0 2
26545: PUSH
26546: LD_VAR 0 3
26550: ST_TO_ADDR
// for i := 1 to k do
26551: LD_ADDR_VAR 0 1
26555: PUSH
26556: DOUBLE
26557: LD_INT 1
26559: DEC
26560: ST_TO_ADDR
26561: LD_VAR 0 2
26565: PUSH
26566: FOR_TO
26567: IFFALSE 26666
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26569: LD_VAR 0 3
26573: PUSH
26574: LD_VAR 0 1
26578: ARRAY
26579: PPUSH
26580: LD_VAR 0 1
26584: PUSH
26585: LD_INT 4
26587: MOD
26588: PUSH
26589: LD_INT 1
26591: PLUS
26592: PPUSH
26593: CALL_OW 259
26597: PUSH
26598: LD_INT 10
26600: LESS
26601: IFFALSE 26664
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26603: LD_VAR 0 3
26607: PUSH
26608: LD_VAR 0 1
26612: ARRAY
26613: PPUSH
26614: LD_VAR 0 1
26618: PUSH
26619: LD_INT 4
26621: MOD
26622: PUSH
26623: LD_INT 1
26625: PLUS
26626: PPUSH
26627: LD_VAR 0 3
26631: PUSH
26632: LD_VAR 0 1
26636: ARRAY
26637: PPUSH
26638: LD_VAR 0 1
26642: PUSH
26643: LD_INT 4
26645: MOD
26646: PUSH
26647: LD_INT 1
26649: PLUS
26650: PPUSH
26651: CALL_OW 259
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: PPUSH
26660: CALL_OW 237
26664: GO 26566
26666: POP
26667: POP
// end ;
26668: PPOPN 3
26670: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26671: LD_EXP 52
26675: PUSH
26676: LD_EXP 60
26680: AND
26681: IFFALSE 26701
26683: GO 26685
26685: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26686: LD_INT 4
26688: PPUSH
26689: LD_OWVAR 2
26693: PPUSH
26694: LD_INT 0
26696: PPUSH
26697: CALL_OW 324
26701: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26702: LD_EXP 52
26706: PUSH
26707: LD_EXP 89
26711: AND
26712: IFFALSE 26732
26714: GO 26716
26716: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26717: LD_INT 19
26719: PPUSH
26720: LD_OWVAR 2
26724: PPUSH
26725: LD_INT 0
26727: PPUSH
26728: CALL_OW 324
26732: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26733: LD_EXP 52
26737: PUSH
26738: LD_EXP 61
26742: AND
26743: IFFALSE 26845
26745: GO 26747
26747: DISABLE
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
// begin enable ;
26752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26753: LD_ADDR_VAR 0 2
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: LD_INT 34
26775: PUSH
26776: LD_INT 11
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 34
26785: PUSH
26786: LD_INT 30
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 69
26806: ST_TO_ADDR
// if not tmp then
26807: LD_VAR 0 2
26811: NOT
26812: IFFALSE 26816
// exit ;
26814: GO 26845
// for i in tmp do
26816: LD_ADDR_VAR 0 1
26820: PUSH
26821: LD_VAR 0 2
26825: PUSH
26826: FOR_IN
26827: IFFALSE 26843
// begin SetLives ( i , 0 ) ;
26829: LD_VAR 0 1
26833: PPUSH
26834: LD_INT 0
26836: PPUSH
26837: CALL_OW 234
// end ;
26841: GO 26826
26843: POP
26844: POP
// end ;
26845: PPOPN 2
26847: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26848: LD_EXP 52
26852: PUSH
26853: LD_EXP 62
26857: AND
26858: IFFALSE 26878
26860: GO 26862
26862: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26863: LD_INT 32
26865: PPUSH
26866: LD_OWVAR 2
26870: PPUSH
26871: LD_INT 0
26873: PPUSH
26874: CALL_OW 324
26878: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26879: LD_EXP 52
26883: PUSH
26884: LD_EXP 63
26888: AND
26889: IFFALSE 27070
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 33
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 2
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27070
// side := 0 ;
26944: LD_ADDR_VAR 0 3
26948: PUSH
26949: LD_INT 0
26951: ST_TO_ADDR
// for i := 1 to 8 do
26952: LD_ADDR_VAR 0 1
26956: PUSH
26957: DOUBLE
26958: LD_INT 1
26960: DEC
26961: ST_TO_ADDR
26962: LD_INT 8
26964: PUSH
26965: FOR_TO
26966: IFFALSE 27014
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26968: LD_OWVAR 2
26972: PUSH
26973: LD_VAR 0 1
26977: NONEQUAL
26978: PUSH
26979: LD_OWVAR 2
26983: PPUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 81
26993: PUSH
26994: LD_INT 2
26996: EQUAL
26997: AND
26998: IFFALSE 27012
// begin side := i ;
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: LD_VAR 0 1
27009: ST_TO_ADDR
// break ;
27010: GO 27014
// end ;
27012: GO 26965
27014: POP
27015: POP
// if not side then
27016: LD_VAR 0 3
27020: NOT
27021: IFFALSE 27025
// exit ;
27023: GO 27070
// for i := 1 to tmp do
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: DOUBLE
27031: LD_INT 1
27033: DEC
27034: ST_TO_ADDR
27035: LD_VAR 0 2
27039: PUSH
27040: FOR_TO
27041: IFFALSE 27068
// if Prob ( 60 ) then
27043: LD_INT 60
27045: PPUSH
27046: CALL_OW 13
27050: IFFALSE 27066
// SetSide ( i , side ) ;
27052: LD_VAR 0 1
27056: PPUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: CALL_OW 235
27066: GO 27040
27068: POP
27069: POP
// end ;
27070: PPOPN 3
27072: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27073: LD_EXP 52
27077: PUSH
27078: LD_EXP 65
27082: AND
27083: IFFALSE 27202
27085: GO 27087
27087: DISABLE
27088: LD_INT 0
27090: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27091: LD_ADDR_VAR 0 1
27095: PUSH
27096: LD_INT 22
27098: PUSH
27099: LD_OWVAR 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 21
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: PUSH
27121: LD_INT 23
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 69
27144: PUSH
27145: FOR_IN
27146: IFFALSE 27200
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27148: LD_VAR 0 1
27152: PPUSH
27153: CALL_OW 257
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 3
27166: PUSH
27167: LD_INT 4
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: IN
27176: IFFALSE 27198
// SetClass ( un , rand ( 1 , 4 ) ) ;
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_INT 1
27185: PPUSH
27186: LD_INT 4
27188: PPUSH
27189: CALL_OW 12
27193: PPUSH
27194: CALL_OW 336
27198: GO 27145
27200: POP
27201: POP
// end ;
27202: PPOPN 1
27204: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27205: LD_EXP 52
27209: PUSH
27210: LD_EXP 64
27214: AND
27215: IFFALSE 27294
27217: GO 27219
27219: DISABLE
27220: LD_INT 0
27222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27223: LD_ADDR_VAR 0 1
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 21
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 1
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 27294
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27268: LD_VAR 0 1
27272: PUSH
27273: LD_INT 1
27275: PPUSH
27276: LD_VAR 0 1
27280: PPUSH
27281: CALL_OW 12
27285: ARRAY
27286: PPUSH
27287: LD_INT 100
27289: PPUSH
27290: CALL_OW 234
// end ;
27294: PPOPN 1
27296: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27297: LD_EXP 52
27301: PUSH
27302: LD_EXP 66
27306: AND
27307: IFFALSE 27405
27309: GO 27311
27311: DISABLE
27312: LD_INT 0
27314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27315: LD_ADDR_VAR 0 1
27319: PUSH
27320: LD_INT 22
27322: PUSH
27323: LD_OWVAR 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 21
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PPUSH
27346: CALL_OW 69
27350: ST_TO_ADDR
// if not tmp then
27351: LD_VAR 0 1
27355: NOT
27356: IFFALSE 27360
// exit ;
27358: GO 27405
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27360: LD_VAR 0 1
27364: PUSH
27365: LD_INT 1
27367: PPUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL_OW 12
27377: ARRAY
27378: PPUSH
27379: LD_INT 1
27381: PPUSH
27382: LD_INT 4
27384: PPUSH
27385: CALL_OW 12
27389: PPUSH
27390: LD_INT 3000
27392: PPUSH
27393: LD_INT 9000
27395: PPUSH
27396: CALL_OW 12
27400: PPUSH
27401: CALL_OW 492
// end ;
27405: PPOPN 1
27407: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27408: LD_EXP 52
27412: PUSH
27413: LD_EXP 67
27417: AND
27418: IFFALSE 27438
27420: GO 27422
27422: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27423: LD_INT 1
27425: PPUSH
27426: LD_OWVAR 2
27430: PPUSH
27431: LD_INT 0
27433: PPUSH
27434: CALL_OW 324
27438: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27439: LD_EXP 52
27443: PUSH
27444: LD_EXP 68
27448: AND
27449: IFFALSE 27532
27451: GO 27453
27453: DISABLE
27454: LD_INT 0
27456: PPUSH
27457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27458: LD_ADDR_VAR 0 2
27462: PUSH
27463: LD_INT 22
27465: PUSH
27466: LD_OWVAR 2
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 21
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PPUSH
27489: CALL_OW 69
27493: ST_TO_ADDR
// if not tmp then
27494: LD_VAR 0 2
27498: NOT
27499: IFFALSE 27503
// exit ;
27501: GO 27532
// for i in tmp do
27503: LD_ADDR_VAR 0 1
27507: PUSH
27508: LD_VAR 0 2
27512: PUSH
27513: FOR_IN
27514: IFFALSE 27530
// SetBLevel ( i , 10 ) ;
27516: LD_VAR 0 1
27520: PPUSH
27521: LD_INT 10
27523: PPUSH
27524: CALL_OW 241
27528: GO 27513
27530: POP
27531: POP
// end ;
27532: PPOPN 2
27534: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27535: LD_EXP 52
27539: PUSH
27540: LD_EXP 69
27544: AND
27545: IFFALSE 27656
27547: GO 27549
27549: DISABLE
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: LD_INT 22
27562: PUSH
27563: LD_OWVAR 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 25
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL_OW 69
27590: ST_TO_ADDR
// if not tmp then
27591: LD_VAR 0 3
27595: NOT
27596: IFFALSE 27600
// exit ;
27598: GO 27656
// un := tmp [ rand ( 1 , tmp ) ] ;
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: LD_VAR 0 3
27609: PUSH
27610: LD_INT 1
27612: PPUSH
27613: LD_VAR 0 3
27617: PPUSH
27618: CALL_OW 12
27622: ARRAY
27623: ST_TO_ADDR
// if Crawls ( un ) then
27624: LD_VAR 0 2
27628: PPUSH
27629: CALL_OW 318
27633: IFFALSE 27644
// ComWalk ( un ) ;
27635: LD_VAR 0 2
27639: PPUSH
27640: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27644: LD_VAR 0 2
27648: PPUSH
27649: LD_INT 5
27651: PPUSH
27652: CALL_OW 336
// end ;
27656: PPOPN 3
27658: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27659: LD_EXP 52
27663: PUSH
27664: LD_EXP 70
27668: AND
27669: PUSH
27670: LD_OWVAR 67
27674: PUSH
27675: LD_INT 4
27677: LESS
27678: AND
27679: IFFALSE 27698
27681: GO 27683
27683: DISABLE
// begin Difficulty := Difficulty + 1 ;
27684: LD_ADDR_OWVAR 67
27688: PUSH
27689: LD_OWVAR 67
27693: PUSH
27694: LD_INT 1
27696: PLUS
27697: ST_TO_ADDR
// end ;
27698: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27699: LD_EXP 52
27703: PUSH
27704: LD_EXP 71
27708: AND
27709: IFFALSE 27812
27711: GO 27713
27713: DISABLE
27714: LD_INT 0
27716: PPUSH
// begin for i := 1 to 5 do
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: DOUBLE
27723: LD_INT 1
27725: DEC
27726: ST_TO_ADDR
27727: LD_INT 5
27729: PUSH
27730: FOR_TO
27731: IFFALSE 27810
// begin uc_nation := nation_nature ;
27733: LD_ADDR_OWVAR 21
27737: PUSH
27738: LD_INT 0
27740: ST_TO_ADDR
// uc_side := 0 ;
27741: LD_ADDR_OWVAR 20
27745: PUSH
27746: LD_INT 0
27748: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27749: LD_ADDR_OWVAR 29
27753: PUSH
27754: LD_INT 12
27756: PUSH
27757: LD_INT 12
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// hc_agressivity := 20 ;
27764: LD_ADDR_OWVAR 35
27768: PUSH
27769: LD_INT 20
27771: ST_TO_ADDR
// hc_class := class_tiger ;
27772: LD_ADDR_OWVAR 28
27776: PUSH
27777: LD_INT 14
27779: ST_TO_ADDR
// hc_gallery :=  ;
27780: LD_ADDR_OWVAR 33
27784: PUSH
27785: LD_STRING 
27787: ST_TO_ADDR
// hc_name :=  ;
27788: LD_ADDR_OWVAR 26
27792: PUSH
27793: LD_STRING 
27795: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27796: CALL_OW 44
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 51
// end ;
27808: GO 27730
27810: POP
27811: POP
// end ;
27812: PPOPN 1
27814: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27815: LD_EXP 52
27819: PUSH
27820: LD_EXP 72
27824: AND
27825: IFFALSE 27834
27827: GO 27829
27829: DISABLE
// StreamSibBomb ;
27830: CALL 27835 0 0
27834: END
// export function StreamSibBomb ; var i , x , y ; begin
27835: LD_INT 0
27837: PPUSH
27838: PPUSH
27839: PPUSH
27840: PPUSH
// result := false ;
27841: LD_ADDR_VAR 0 1
27845: PUSH
27846: LD_INT 0
27848: ST_TO_ADDR
// for i := 1 to 16 do
27849: LD_ADDR_VAR 0 2
27853: PUSH
27854: DOUBLE
27855: LD_INT 1
27857: DEC
27858: ST_TO_ADDR
27859: LD_INT 16
27861: PUSH
27862: FOR_TO
27863: IFFALSE 28062
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27865: LD_ADDR_VAR 0 3
27869: PUSH
27870: LD_INT 10
27872: PUSH
27873: LD_INT 20
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 40
27881: PUSH
27882: LD_INT 50
27884: PUSH
27885: LD_INT 60
27887: PUSH
27888: LD_INT 70
27890: PUSH
27891: LD_INT 80
27893: PUSH
27894: LD_INT 90
27896: PUSH
27897: LD_INT 100
27899: PUSH
27900: LD_INT 110
27902: PUSH
27903: LD_INT 120
27905: PUSH
27906: LD_INT 130
27908: PUSH
27909: LD_INT 140
27911: PUSH
27912: LD_INT 150
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PPUSH
27935: LD_INT 15
27937: PPUSH
27938: CALL_OW 12
27942: ARRAY
27943: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27944: LD_ADDR_VAR 0 4
27948: PUSH
27949: LD_INT 10
27951: PUSH
27952: LD_INT 20
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: LD_INT 40
27960: PUSH
27961: LD_INT 50
27963: PUSH
27964: LD_INT 60
27966: PUSH
27967: LD_INT 70
27969: PUSH
27970: LD_INT 80
27972: PUSH
27973: LD_INT 90
27975: PUSH
27976: LD_INT 100
27978: PUSH
27979: LD_INT 110
27981: PUSH
27982: LD_INT 120
27984: PUSH
27985: LD_INT 130
27987: PUSH
27988: LD_INT 140
27990: PUSH
27991: LD_INT 150
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PPUSH
28014: LD_INT 15
28016: PPUSH
28017: CALL_OW 12
28021: ARRAY
28022: ST_TO_ADDR
// if ValidHex ( x , y ) then
28023: LD_VAR 0 3
28027: PPUSH
28028: LD_VAR 0 4
28032: PPUSH
28033: CALL_OW 488
28037: IFFALSE 28060
// begin result := [ x , y ] ;
28039: LD_ADDR_VAR 0 1
28043: PUSH
28044: LD_VAR 0 3
28048: PUSH
28049: LD_VAR 0 4
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// break ;
28058: GO 28062
// end ; end ;
28060: GO 27862
28062: POP
28063: POP
// if result then
28064: LD_VAR 0 1
28068: IFFALSE 28128
// begin ToLua ( playSibBomb() ) ;
28070: LD_STRING playSibBomb()
28072: PPUSH
28073: CALL_OW 559
// wait ( 0 0$14 ) ;
28077: LD_INT 490
28079: PPUSH
28080: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28084: LD_VAR 0 1
28088: PUSH
28089: LD_INT 1
28091: ARRAY
28092: PPUSH
28093: LD_VAR 0 1
28097: PUSH
28098: LD_INT 2
28100: ARRAY
28101: PPUSH
28102: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28106: LD_VAR 0 1
28110: PUSH
28111: LD_INT 1
28113: ARRAY
28114: PPUSH
28115: LD_VAR 0 1
28119: PUSH
28120: LD_INT 2
28122: ARRAY
28123: PPUSH
28124: CALL_OW 429
// end ; end ;
28128: LD_VAR 0 1
28132: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28133: LD_EXP 52
28137: PUSH
28138: LD_EXP 74
28142: AND
28143: IFFALSE 28155
28145: GO 28147
28147: DISABLE
// YouLost (  ) ;
28148: LD_STRING 
28150: PPUSH
28151: CALL_OW 104
28155: END
// every 0 0$1 trigger StreamModeActive and sFog do
28156: LD_EXP 52
28160: PUSH
28161: LD_EXP 73
28165: AND
28166: IFFALSE 28180
28168: GO 28170
28170: DISABLE
// FogOff ( your_side ) ;
28171: LD_OWVAR 2
28175: PPUSH
28176: CALL_OW 344
28180: END
// every 0 0$1 trigger StreamModeActive and sSun do
28181: LD_EXP 52
28185: PUSH
28186: LD_EXP 75
28190: AND
28191: IFFALSE 28219
28193: GO 28195
28195: DISABLE
// begin solar_recharge_percent := 0 ;
28196: LD_ADDR_OWVAR 79
28200: PUSH
28201: LD_INT 0
28203: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28204: LD_INT 10500
28206: PPUSH
28207: CALL_OW 67
// solar_recharge_percent := 100 ;
28211: LD_ADDR_OWVAR 79
28215: PUSH
28216: LD_INT 100
28218: ST_TO_ADDR
// end ;
28219: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28220: LD_EXP 52
28224: PUSH
28225: LD_EXP 76
28229: AND
28230: IFFALSE 28469
28232: GO 28234
28234: DISABLE
28235: LD_INT 0
28237: PPUSH
28238: PPUSH
28239: PPUSH
// begin tmp := [ ] ;
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: EMPTY
28246: ST_TO_ADDR
// for i := 1 to 6 do
28247: LD_ADDR_VAR 0 1
28251: PUSH
28252: DOUBLE
28253: LD_INT 1
28255: DEC
28256: ST_TO_ADDR
28257: LD_INT 6
28259: PUSH
28260: FOR_TO
28261: IFFALSE 28366
// begin uc_nation := nation_nature ;
28263: LD_ADDR_OWVAR 21
28267: PUSH
28268: LD_INT 0
28270: ST_TO_ADDR
// uc_side := 0 ;
28271: LD_ADDR_OWVAR 20
28275: PUSH
28276: LD_INT 0
28278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28279: LD_ADDR_OWVAR 29
28283: PUSH
28284: LD_INT 12
28286: PUSH
28287: LD_INT 12
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// hc_agressivity := 20 ;
28294: LD_ADDR_OWVAR 35
28298: PUSH
28299: LD_INT 20
28301: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28302: LD_ADDR_OWVAR 28
28306: PUSH
28307: LD_INT 17
28309: ST_TO_ADDR
// hc_gallery :=  ;
28310: LD_ADDR_OWVAR 33
28314: PUSH
28315: LD_STRING 
28317: ST_TO_ADDR
// hc_name :=  ;
28318: LD_ADDR_OWVAR 26
28322: PUSH
28323: LD_STRING 
28325: ST_TO_ADDR
// un := CreateHuman ;
28326: LD_ADDR_VAR 0 2
28330: PUSH
28331: CALL_OW 44
28335: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28336: LD_VAR 0 2
28340: PPUSH
28341: LD_INT 1
28343: PPUSH
28344: CALL_OW 51
// tmp := tmp ^ un ;
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_VAR 0 3
28357: PUSH
28358: LD_VAR 0 2
28362: ADD
28363: ST_TO_ADDR
// end ;
28364: GO 28260
28366: POP
28367: POP
// repeat wait ( 0 0$1 ) ;
28368: LD_INT 35
28370: PPUSH
28371: CALL_OW 67
// for un in tmp do
28375: LD_ADDR_VAR 0 2
28379: PUSH
28380: LD_VAR 0 3
28384: PUSH
28385: FOR_IN
28386: IFFALSE 28460
// begin if IsDead ( un ) then
28388: LD_VAR 0 2
28392: PPUSH
28393: CALL_OW 301
28397: IFFALSE 28417
// begin tmp := tmp diff un ;
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_VAR 0 3
28408: PUSH
28409: LD_VAR 0 2
28413: DIFF
28414: ST_TO_ADDR
// continue ;
28415: GO 28385
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28417: LD_VAR 0 2
28421: PPUSH
28422: LD_INT 3
28424: PUSH
28425: LD_INT 22
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PPUSH
28439: CALL_OW 69
28443: PPUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 74
28453: PPUSH
28454: CALL_OW 115
// end ;
28458: GO 28385
28460: POP
28461: POP
// until not tmp ;
28462: LD_VAR 0 3
28466: NOT
28467: IFFALSE 28368
// end ;
28469: PPOPN 3
28471: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28472: LD_EXP 52
28476: PUSH
28477: LD_EXP 77
28481: AND
28482: IFFALSE 28536
28484: GO 28486
28486: DISABLE
// begin ToLua ( displayTroll(); ) ;
28487: LD_STRING displayTroll();
28489: PPUSH
28490: CALL_OW 559
// wait ( 3 3$00 ) ;
28494: LD_INT 6300
28496: PPUSH
28497: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28501: LD_STRING hideTroll();
28503: PPUSH
28504: CALL_OW 559
// wait ( 1 1$00 ) ;
28508: LD_INT 2100
28510: PPUSH
28511: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28515: LD_STRING displayTroll();
28517: PPUSH
28518: CALL_OW 559
// wait ( 1 1$00 ) ;
28522: LD_INT 2100
28524: PPUSH
28525: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28529: LD_STRING hideTroll();
28531: PPUSH
28532: CALL_OW 559
// end ;
28536: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28537: LD_EXP 52
28541: PUSH
28542: LD_EXP 78
28546: AND
28547: IFFALSE 28610
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin p := 0 ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 0
28562: ST_TO_ADDR
// repeat game_speed := 1 ;
28563: LD_ADDR_OWVAR 65
28567: PUSH
28568: LD_INT 1
28570: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28571: LD_INT 35
28573: PPUSH
28574: CALL_OW 67
// p := p + 1 ;
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_VAR 0 1
28587: PUSH
28588: LD_INT 1
28590: PLUS
28591: ST_TO_ADDR
// until p >= 60 ;
28592: LD_VAR 0 1
28596: PUSH
28597: LD_INT 60
28599: GREATEREQUAL
28600: IFFALSE 28563
// game_speed := 4 ;
28602: LD_ADDR_OWVAR 65
28606: PUSH
28607: LD_INT 4
28609: ST_TO_ADDR
// end ;
28610: PPOPN 1
28612: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28613: LD_EXP 52
28617: PUSH
28618: LD_EXP 79
28622: AND
28623: IFFALSE 28769
28625: GO 28627
28627: DISABLE
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28632: LD_ADDR_VAR 0 1
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_OWVAR 2
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 30
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 30
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 69
28685: ST_TO_ADDR
// if not depot then
28686: LD_VAR 0 1
28690: NOT
28691: IFFALSE 28695
// exit ;
28693: GO 28769
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28695: LD_ADDR_VAR 0 2
28699: PUSH
28700: LD_VAR 0 1
28704: PUSH
28705: LD_INT 1
28707: PPUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: CALL_OW 12
28717: ARRAY
28718: PPUSH
28719: CALL_OW 274
28723: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28724: LD_VAR 0 2
28728: PPUSH
28729: LD_INT 1
28731: PPUSH
28732: LD_INT 0
28734: PPUSH
28735: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_INT 2
28746: PPUSH
28747: LD_INT 0
28749: PPUSH
28750: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28754: LD_VAR 0 2
28758: PPUSH
28759: LD_INT 3
28761: PPUSH
28762: LD_INT 0
28764: PPUSH
28765: CALL_OW 277
// end ;
28769: PPOPN 2
28771: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28772: LD_EXP 52
28776: PUSH
28777: LD_EXP 80
28781: AND
28782: IFFALSE 28879
28784: GO 28786
28786: DISABLE
28787: LD_INT 0
28789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28790: LD_ADDR_VAR 0 1
28794: PUSH
28795: LD_INT 22
28797: PUSH
28798: LD_OWVAR 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 21
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 3
28819: PUSH
28820: LD_INT 23
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 1
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 28879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28853: LD_VAR 0 1
28857: PUSH
28858: LD_INT 1
28860: PPUSH
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL_OW 12
28870: ARRAY
28871: PPUSH
28872: LD_INT 200
28874: PPUSH
28875: CALL_OW 234
// end ;
28879: PPOPN 1
28881: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28882: LD_EXP 52
28886: PUSH
28887: LD_EXP 81
28891: AND
28892: IFFALSE 28971
28894: GO 28896
28896: DISABLE
28897: LD_INT 0
28899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28900: LD_ADDR_VAR 0 1
28904: PUSH
28905: LD_INT 22
28907: PUSH
28908: LD_OWVAR 2
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 21
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PPUSH
28931: CALL_OW 69
28935: ST_TO_ADDR
// if not tmp then
28936: LD_VAR 0 1
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 28971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28945: LD_VAR 0 1
28949: PUSH
28950: LD_INT 1
28952: PPUSH
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 12
28962: ARRAY
28963: PPUSH
28964: LD_INT 60
28966: PPUSH
28967: CALL_OW 234
// end ;
28971: PPOPN 1
28973: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28974: LD_EXP 52
28978: PUSH
28979: LD_EXP 82
28983: AND
28984: IFFALSE 29083
28986: GO 28988
28988: DISABLE
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
// begin enable ;
28993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28994: LD_ADDR_VAR 0 1
28998: PUSH
28999: LD_INT 22
29001: PUSH
29002: LD_OWVAR 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 61
29013: PUSH
29014: EMPTY
29015: LIST
29016: PUSH
29017: LD_INT 33
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: ST_TO_ADDR
// if not tmp then
29037: LD_VAR 0 1
29041: NOT
29042: IFFALSE 29046
// exit ;
29044: GO 29083
// for i in tmp do
29046: LD_ADDR_VAR 0 2
29050: PUSH
29051: LD_VAR 0 1
29055: PUSH
29056: FOR_IN
29057: IFFALSE 29081
// if IsControledBy ( i ) then
29059: LD_VAR 0 2
29063: PPUSH
29064: CALL_OW 312
29068: IFFALSE 29079
// ComUnlink ( i ) ;
29070: LD_VAR 0 2
29074: PPUSH
29075: CALL_OW 136
29079: GO 29056
29081: POP
29082: POP
// end ;
29083: PPOPN 2
29085: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29086: LD_EXP 52
29090: PUSH
29091: LD_EXP 83
29095: AND
29096: IFFALSE 29236
29098: GO 29100
29100: DISABLE
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
// begin ToLua ( displayPowell(); ) ;
29105: LD_STRING displayPowell();
29107: PPUSH
29108: CALL_OW 559
// uc_side := 0 ;
29112: LD_ADDR_OWVAR 20
29116: PUSH
29117: LD_INT 0
29119: ST_TO_ADDR
// uc_nation := 2 ;
29120: LD_ADDR_OWVAR 21
29124: PUSH
29125: LD_INT 2
29127: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29128: LD_ADDR_OWVAR 37
29132: PUSH
29133: LD_INT 14
29135: ST_TO_ADDR
// vc_engine := engine_siberite ;
29136: LD_ADDR_OWVAR 39
29140: PUSH
29141: LD_INT 3
29143: ST_TO_ADDR
// vc_control := control_apeman ;
29144: LD_ADDR_OWVAR 38
29148: PUSH
29149: LD_INT 5
29151: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29152: LD_ADDR_OWVAR 40
29156: PUSH
29157: LD_INT 29
29159: ST_TO_ADDR
// un := CreateVehicle ;
29160: LD_ADDR_VAR 0 2
29164: PUSH
29165: CALL_OW 45
29169: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29170: LD_VAR 0 2
29174: PPUSH
29175: LD_INT 1
29177: PPUSH
29178: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29182: LD_INT 35
29184: PPUSH
29185: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 22
29196: PUSH
29197: LD_OWVAR 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PPUSH
29206: CALL_OW 69
29210: PPUSH
29211: LD_VAR 0 2
29215: PPUSH
29216: CALL_OW 74
29220: PPUSH
29221: CALL_OW 115
// until IsDead ( un ) ;
29225: LD_VAR 0 2
29229: PPUSH
29230: CALL_OW 301
29234: IFFALSE 29182
// end ;
29236: PPOPN 2
29238: END
// every 0 0$1 trigger StreamModeActive and sStu do
29239: LD_EXP 52
29243: PUSH
29244: LD_EXP 91
29248: AND
29249: IFFALSE 29265
29251: GO 29253
29253: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29254: LD_STRING displayStucuk();
29256: PPUSH
29257: CALL_OW 559
// ResetFog ;
29261: CALL_OW 335
// end ;
29265: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29266: LD_EXP 52
29270: PUSH
29271: LD_EXP 84
29275: AND
29276: IFFALSE 29417
29278: GO 29280
29280: DISABLE
29281: LD_INT 0
29283: PPUSH
29284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_INT 22
29292: PUSH
29293: LD_OWVAR 2
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 21
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PPUSH
29316: CALL_OW 69
29320: ST_TO_ADDR
// if not tmp then
29321: LD_VAR 0 2
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 29417
// un := tmp [ rand ( 1 , tmp ) ] ;
29330: LD_ADDR_VAR 0 1
29334: PUSH
29335: LD_VAR 0 2
29339: PUSH
29340: LD_INT 1
29342: PPUSH
29343: LD_VAR 0 2
29347: PPUSH
29348: CALL_OW 12
29352: ARRAY
29353: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29354: LD_VAR 0 1
29358: PPUSH
29359: LD_INT 0
29361: PPUSH
29362: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29366: LD_VAR 0 1
29370: PPUSH
29371: LD_OWVAR 3
29375: PUSH
29376: LD_VAR 0 1
29380: DIFF
29381: PPUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 74
29391: PPUSH
29392: CALL_OW 115
// wait ( 0 0$20 ) ;
29396: LD_INT 700
29398: PPUSH
29399: CALL_OW 67
// SetSide ( un , your_side ) ;
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_OWVAR 2
29412: PPUSH
29413: CALL_OW 235
// end ;
29417: PPOPN 2
29419: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29420: LD_EXP 52
29424: PUSH
29425: LD_EXP 85
29429: AND
29430: IFFALSE 29536
29432: GO 29434
29434: DISABLE
29435: LD_INT 0
29437: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29438: LD_ADDR_VAR 0 1
29442: PUSH
29443: LD_INT 22
29445: PUSH
29446: LD_OWVAR 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 30
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 30
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PPUSH
29487: CALL_OW 69
29491: ST_TO_ADDR
// if not depot then
29492: LD_VAR 0 1
29496: NOT
29497: IFFALSE 29501
// exit ;
29499: GO 29536
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29501: LD_VAR 0 1
29505: PUSH
29506: LD_INT 1
29508: ARRAY
29509: PPUSH
29510: CALL_OW 250
29514: PPUSH
29515: LD_VAR 0 1
29519: PUSH
29520: LD_INT 1
29522: ARRAY
29523: PPUSH
29524: CALL_OW 251
29528: PPUSH
29529: LD_INT 70
29531: PPUSH
29532: CALL_OW 495
// end ;
29536: PPOPN 1
29538: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29539: LD_EXP 52
29543: PUSH
29544: LD_EXP 86
29548: AND
29549: IFFALSE 29760
29551: GO 29553
29553: DISABLE
29554: LD_INT 0
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_INT 22
29568: PUSH
29569: LD_OWVAR 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 21
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 69
29596: ST_TO_ADDR
// if not tmp then
29597: LD_VAR 0 5
29601: NOT
29602: IFFALSE 29606
// exit ;
29604: GO 29760
// for i in tmp do
29606: LD_ADDR_VAR 0 1
29610: PUSH
29611: LD_VAR 0 5
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29758
// begin d := rand ( 0 , 5 ) ;
29619: LD_ADDR_VAR 0 4
29623: PUSH
29624: LD_INT 0
29626: PPUSH
29627: LD_INT 5
29629: PPUSH
29630: CALL_OW 12
29634: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: LD_VAR 0 1
29644: PPUSH
29645: CALL_OW 250
29649: PPUSH
29650: LD_VAR 0 4
29654: PPUSH
29655: LD_INT 3
29657: PPUSH
29658: LD_INT 12
29660: PPUSH
29661: CALL_OW 12
29665: PPUSH
29666: CALL_OW 272
29670: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_VAR 0 1
29680: PPUSH
29681: CALL_OW 251
29685: PPUSH
29686: LD_VAR 0 4
29690: PPUSH
29691: LD_INT 3
29693: PPUSH
29694: LD_INT 12
29696: PPUSH
29697: CALL_OW 12
29701: PPUSH
29702: CALL_OW 273
29706: ST_TO_ADDR
// if ValidHex ( x , y ) then
29707: LD_VAR 0 2
29711: PPUSH
29712: LD_VAR 0 3
29716: PPUSH
29717: CALL_OW 488
29721: IFFALSE 29756
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_VAR 0 2
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: LD_INT 3
29740: PPUSH
29741: LD_INT 6
29743: PPUSH
29744: CALL_OW 12
29748: PPUSH
29749: LD_INT 1
29751: PPUSH
29752: CALL_OW 483
// end ;
29756: GO 29616
29758: POP
29759: POP
// end ;
29760: PPOPN 5
29762: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29763: LD_EXP 52
29767: PUSH
29768: LD_EXP 87
29772: AND
29773: IFFALSE 29867
29775: GO 29777
29777: DISABLE
29778: LD_INT 0
29780: PPUSH
29781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29782: LD_ADDR_VAR 0 2
29786: PUSH
29787: LD_INT 22
29789: PUSH
29790: LD_OWVAR 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 32
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 21
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: PPUSH
29824: CALL_OW 69
29828: ST_TO_ADDR
// if not tmp then
29829: LD_VAR 0 2
29833: NOT
29834: IFFALSE 29838
// exit ;
29836: GO 29867
// for i in tmp do
29838: LD_ADDR_VAR 0 1
29842: PUSH
29843: LD_VAR 0 2
29847: PUSH
29848: FOR_IN
29849: IFFALSE 29865
// SetFuel ( i , 0 ) ;
29851: LD_VAR 0 1
29855: PPUSH
29856: LD_INT 0
29858: PPUSH
29859: CALL_OW 240
29863: GO 29848
29865: POP
29866: POP
// end ;
29867: PPOPN 2
29869: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29870: LD_EXP 52
29874: PUSH
29875: LD_EXP 88
29879: AND
29880: IFFALSE 29946
29882: GO 29884
29884: DISABLE
29885: LD_INT 0
29887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29888: LD_ADDR_VAR 0 1
29892: PUSH
29893: LD_INT 22
29895: PUSH
29896: LD_OWVAR 2
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 30
29907: PUSH
29908: LD_INT 29
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 69
29923: ST_TO_ADDR
// if not tmp then
29924: LD_VAR 0 1
29928: NOT
29929: IFFALSE 29933
// exit ;
29931: GO 29946
// DestroyUnit ( tmp [ 1 ] ) ;
29933: LD_VAR 0 1
29937: PUSH
29938: LD_INT 1
29940: ARRAY
29941: PPUSH
29942: CALL_OW 65
// end ;
29946: PPOPN 1
29948: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29949: LD_EXP 52
29953: PUSH
29954: LD_EXP 90
29958: AND
29959: IFFALSE 30088
29961: GO 29963
29963: DISABLE
29964: LD_INT 0
29966: PPUSH
// begin uc_side := 0 ;
29967: LD_ADDR_OWVAR 20
29971: PUSH
29972: LD_INT 0
29974: ST_TO_ADDR
// uc_nation := nation_arabian ;
29975: LD_ADDR_OWVAR 21
29979: PUSH
29980: LD_INT 2
29982: ST_TO_ADDR
// hc_gallery :=  ;
29983: LD_ADDR_OWVAR 33
29987: PUSH
29988: LD_STRING 
29990: ST_TO_ADDR
// hc_name :=  ;
29991: LD_ADDR_OWVAR 26
29995: PUSH
29996: LD_STRING 
29998: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 11
30004: PPUSH
30005: LD_INT 10
30007: PPUSH
30008: CALL_OW 380
// un := CreateHuman ;
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: CALL_OW 44
30021: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30022: LD_VAR 0 1
30026: PPUSH
30027: LD_INT 1
30029: PPUSH
30030: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30034: LD_INT 35
30036: PPUSH
30037: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30041: LD_VAR 0 1
30045: PPUSH
30046: LD_INT 22
30048: PUSH
30049: LD_OWVAR 2
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PPUSH
30058: CALL_OW 69
30062: PPUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 74
30072: PPUSH
30073: CALL_OW 115
// until IsDead ( un ) ;
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 301
30086: IFFALSE 30034
// end ;
30088: PPOPN 1
30090: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30091: LD_EXP 52
30095: PUSH
30096: LD_EXP 92
30100: AND
30101: IFFALSE 30113
30103: GO 30105
30105: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30106: LD_STRING earthquake(getX(game), 0, 32)
30108: PPUSH
30109: CALL_OW 559
30113: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30114: LD_EXP 52
30118: PUSH
30119: LD_EXP 93
30123: AND
30124: IFFALSE 30215
30126: GO 30128
30128: DISABLE
30129: LD_INT 0
30131: PPUSH
// begin enable ;
30132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30133: LD_ADDR_VAR 0 1
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 21
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 33
30162: PUSH
30163: LD_INT 3
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: PPUSH
30175: CALL_OW 69
30179: ST_TO_ADDR
// if not tmp then
30180: LD_VAR 0 1
30184: NOT
30185: IFFALSE 30189
// exit ;
30187: GO 30215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30189: LD_VAR 0 1
30193: PUSH
30194: LD_INT 1
30196: PPUSH
30197: LD_VAR 0 1
30201: PPUSH
30202: CALL_OW 12
30206: ARRAY
30207: PPUSH
30208: LD_INT 1
30210: PPUSH
30211: CALL_OW 234
// end ;
30215: PPOPN 1
30217: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30218: LD_EXP 52
30222: PUSH
30223: LD_EXP 94
30227: AND
30228: IFFALSE 30369
30230: GO 30232
30232: DISABLE
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
30237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30238: LD_ADDR_VAR 0 3
30242: PUSH
30243: LD_INT 22
30245: PUSH
30246: LD_OWVAR 2
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 25
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: ST_TO_ADDR
// if not tmp then
30274: LD_VAR 0 3
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 30369
// un := tmp [ rand ( 1 , tmp ) ] ;
30283: LD_ADDR_VAR 0 2
30287: PUSH
30288: LD_VAR 0 3
30292: PUSH
30293: LD_INT 1
30295: PPUSH
30296: LD_VAR 0 3
30300: PPUSH
30301: CALL_OW 12
30305: ARRAY
30306: ST_TO_ADDR
// if Crawls ( un ) then
30307: LD_VAR 0 2
30311: PPUSH
30312: CALL_OW 318
30316: IFFALSE 30327
// ComWalk ( un ) ;
30318: LD_VAR 0 2
30322: PPUSH
30323: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30327: LD_VAR 0 2
30331: PPUSH
30332: LD_INT 9
30334: PPUSH
30335: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30339: LD_INT 28
30341: PPUSH
30342: LD_OWVAR 2
30346: PPUSH
30347: LD_INT 2
30349: PPUSH
30350: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30354: LD_INT 29
30356: PPUSH
30357: LD_OWVAR 2
30361: PPUSH
30362: LD_INT 2
30364: PPUSH
30365: CALL_OW 322
// end ;
30369: PPOPN 3
30371: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30372: LD_EXP 52
30376: PUSH
30377: LD_EXP 95
30381: AND
30382: IFFALSE 30493
30384: GO 30386
30386: DISABLE
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
30391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: LD_INT 22
30399: PUSH
30400: LD_OWVAR 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 25
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 69
30427: ST_TO_ADDR
// if not tmp then
30428: LD_VAR 0 3
30432: NOT
30433: IFFALSE 30437
// exit ;
30435: GO 30493
// un := tmp [ rand ( 1 , tmp ) ] ;
30437: LD_ADDR_VAR 0 2
30441: PUSH
30442: LD_VAR 0 3
30446: PUSH
30447: LD_INT 1
30449: PPUSH
30450: LD_VAR 0 3
30454: PPUSH
30455: CALL_OW 12
30459: ARRAY
30460: ST_TO_ADDR
// if Crawls ( un ) then
30461: LD_VAR 0 2
30465: PPUSH
30466: CALL_OW 318
30470: IFFALSE 30481
// ComWalk ( un ) ;
30472: LD_VAR 0 2
30476: PPUSH
30477: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30481: LD_VAR 0 2
30485: PPUSH
30486: LD_INT 8
30488: PPUSH
30489: CALL_OW 336
// end ;
30493: PPOPN 3
30495: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30496: LD_EXP 52
30500: PUSH
30501: LD_EXP 96
30505: AND
30506: IFFALSE 30650
30508: GO 30510
30510: DISABLE
30511: LD_INT 0
30513: PPUSH
30514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30515: LD_ADDR_VAR 0 2
30519: PUSH
30520: LD_INT 22
30522: PUSH
30523: LD_OWVAR 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 21
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 34
30547: PUSH
30548: LD_INT 12
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 34
30557: PUSH
30558: LD_INT 51
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 34
30567: PUSH
30568: LD_INT 32
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: ST_TO_ADDR
// if not tmp then
30591: LD_VAR 0 2
30595: NOT
30596: IFFALSE 30600
// exit ;
30598: GO 30650
// for i in tmp do
30600: LD_ADDR_VAR 0 1
30604: PUSH
30605: LD_VAR 0 2
30609: PUSH
30610: FOR_IN
30611: IFFALSE 30648
// if GetCargo ( i , mat_artifact ) = 0 then
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_INT 4
30620: PPUSH
30621: CALL_OW 289
30625: PUSH
30626: LD_INT 0
30628: EQUAL
30629: IFFALSE 30646
// SetCargo ( i , mat_siberit , 100 ) ;
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_INT 3
30638: PPUSH
30639: LD_INT 100
30641: PPUSH
30642: CALL_OW 290
30646: GO 30610
30648: POP
30649: POP
// end ;
30650: PPOPN 2
30652: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30653: LD_EXP 52
30657: PUSH
30658: LD_EXP 97
30662: AND
30663: IFFALSE 30846
30665: GO 30667
30667: DISABLE
30668: LD_INT 0
30670: PPUSH
30671: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30672: LD_ADDR_VAR 0 2
30676: PUSH
30677: LD_INT 22
30679: PUSH
30680: LD_OWVAR 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PPUSH
30689: CALL_OW 69
30693: ST_TO_ADDR
// if not tmp then
30694: LD_VAR 0 2
30698: NOT
30699: IFFALSE 30703
// exit ;
30701: GO 30846
// for i := 1 to 2 do
30703: LD_ADDR_VAR 0 1
30707: PUSH
30708: DOUBLE
30709: LD_INT 1
30711: DEC
30712: ST_TO_ADDR
30713: LD_INT 2
30715: PUSH
30716: FOR_TO
30717: IFFALSE 30844
// begin uc_side := your_side ;
30719: LD_ADDR_OWVAR 20
30723: PUSH
30724: LD_OWVAR 2
30728: ST_TO_ADDR
// uc_nation := nation_american ;
30729: LD_ADDR_OWVAR 21
30733: PUSH
30734: LD_INT 1
30736: ST_TO_ADDR
// vc_chassis := us_morphling ;
30737: LD_ADDR_OWVAR 37
30741: PUSH
30742: LD_INT 5
30744: ST_TO_ADDR
// vc_engine := engine_siberite ;
30745: LD_ADDR_OWVAR 39
30749: PUSH
30750: LD_INT 3
30752: ST_TO_ADDR
// vc_control := control_computer ;
30753: LD_ADDR_OWVAR 38
30757: PUSH
30758: LD_INT 3
30760: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30761: LD_ADDR_OWVAR 40
30765: PUSH
30766: LD_INT 10
30768: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30769: LD_VAR 0 2
30773: PUSH
30774: LD_INT 1
30776: ARRAY
30777: PPUSH
30778: CALL_OW 310
30782: NOT
30783: IFFALSE 30830
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30785: CALL_OW 45
30789: PPUSH
30790: LD_VAR 0 2
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: PPUSH
30799: CALL_OW 250
30803: PPUSH
30804: LD_VAR 0 2
30808: PUSH
30809: LD_INT 1
30811: ARRAY
30812: PPUSH
30813: CALL_OW 251
30817: PPUSH
30818: LD_INT 12
30820: PPUSH
30821: LD_INT 1
30823: PPUSH
30824: CALL_OW 50
30828: GO 30842
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30830: CALL_OW 45
30834: PPUSH
30835: LD_INT 1
30837: PPUSH
30838: CALL_OW 51
// end ;
30842: GO 30716
30844: POP
30845: POP
// end ;
30846: PPOPN 2
30848: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30849: LD_EXP 52
30853: PUSH
30854: LD_EXP 98
30858: AND
30859: IFFALSE 31081
30861: GO 30863
30863: DISABLE
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30872: LD_ADDR_VAR 0 6
30876: PUSH
30877: LD_INT 22
30879: PUSH
30880: LD_OWVAR 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 21
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: LD_INT 23
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 69
30925: ST_TO_ADDR
// if not tmp then
30926: LD_VAR 0 6
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 31081
// s1 := rand ( 1 , 4 ) ;
30935: LD_ADDR_VAR 0 2
30939: PUSH
30940: LD_INT 1
30942: PPUSH
30943: LD_INT 4
30945: PPUSH
30946: CALL_OW 12
30950: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30951: LD_ADDR_VAR 0 4
30955: PUSH
30956: LD_VAR 0 6
30960: PUSH
30961: LD_INT 1
30963: ARRAY
30964: PPUSH
30965: LD_VAR 0 2
30969: PPUSH
30970: CALL_OW 259
30974: ST_TO_ADDR
// if s1 = 1 then
30975: LD_VAR 0 2
30979: PUSH
30980: LD_INT 1
30982: EQUAL
30983: IFFALSE 31003
// s2 := rand ( 2 , 4 ) else
30985: LD_ADDR_VAR 0 3
30989: PUSH
30990: LD_INT 2
30992: PPUSH
30993: LD_INT 4
30995: PPUSH
30996: CALL_OW 12
31000: ST_TO_ADDR
31001: GO 31011
// s2 := 1 ;
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_INT 1
31010: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31011: LD_ADDR_VAR 0 5
31015: PUSH
31016: LD_VAR 0 6
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: CALL_OW 259
31034: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31035: LD_VAR 0 6
31039: PUSH
31040: LD_INT 1
31042: ARRAY
31043: PPUSH
31044: LD_VAR 0 2
31048: PPUSH
31049: LD_VAR 0 5
31053: PPUSH
31054: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31058: LD_VAR 0 6
31062: PUSH
31063: LD_INT 1
31065: ARRAY
31066: PPUSH
31067: LD_VAR 0 3
31071: PPUSH
31072: LD_VAR 0 4
31076: PPUSH
31077: CALL_OW 237
// end ;
31081: PPOPN 6
31083: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31084: LD_EXP 52
31088: PUSH
31089: LD_EXP 99
31093: AND
31094: IFFALSE 31173
31096: GO 31098
31098: DISABLE
31099: LD_INT 0
31101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31102: LD_ADDR_VAR 0 1
31106: PUSH
31107: LD_INT 22
31109: PUSH
31110: LD_OWVAR 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 30
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PPUSH
31133: CALL_OW 69
31137: ST_TO_ADDR
// if not tmp then
31138: LD_VAR 0 1
31142: NOT
31143: IFFALSE 31147
// exit ;
31145: GO 31173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31147: LD_VAR 0 1
31151: PUSH
31152: LD_INT 1
31154: PPUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL_OW 12
31164: ARRAY
31165: PPUSH
31166: LD_INT 1
31168: PPUSH
31169: CALL_OW 234
// end ;
31173: PPOPN 1
31175: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31176: LD_EXP 52
31180: PUSH
31181: LD_EXP 100
31185: AND
31186: IFFALSE 31298
31188: GO 31190
31190: DISABLE
31191: LD_INT 0
31193: PPUSH
31194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_OWVAR 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: LD_INT 30
31217: PUSH
31218: LD_INT 27
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 30
31227: PUSH
31228: LD_INT 26
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 30
31237: PUSH
31238: LD_INT 28
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PPUSH
31255: CALL_OW 69
31259: ST_TO_ADDR
// if not tmp then
31260: LD_VAR 0 2
31264: NOT
31265: IFFALSE 31269
// exit ;
31267: GO 31298
// for i in tmp do
31269: LD_ADDR_VAR 0 1
31273: PUSH
31274: LD_VAR 0 2
31278: PUSH
31279: FOR_IN
31280: IFFALSE 31296
// SetLives ( i , 1 ) ;
31282: LD_VAR 0 1
31286: PPUSH
31287: LD_INT 1
31289: PPUSH
31290: CALL_OW 234
31294: GO 31279
31296: POP
31297: POP
// end ;
31298: PPOPN 2
31300: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31301: LD_EXP 52
31305: PUSH
31306: LD_EXP 101
31310: AND
31311: IFFALSE 31598
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
// begin i := rand ( 1 , 7 ) ;
31321: LD_ADDR_VAR 0 1
31325: PUSH
31326: LD_INT 1
31328: PPUSH
31329: LD_INT 7
31331: PPUSH
31332: CALL_OW 12
31336: ST_TO_ADDR
// case i of 1 :
31337: LD_VAR 0 1
31341: PUSH
31342: LD_INT 1
31344: DOUBLE
31345: EQUAL
31346: IFTRUE 31350
31348: GO 31360
31350: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31351: LD_STRING earthquake(getX(game), 0, 32)
31353: PPUSH
31354: CALL_OW 559
31358: GO 31598
31360: LD_INT 2
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31382
31368: POP
// begin ToLua ( displayStucuk(); ) ;
31369: LD_STRING displayStucuk();
31371: PPUSH
31372: CALL_OW 559
// ResetFog ;
31376: CALL_OW 335
// end ; 3 :
31380: GO 31598
31382: LD_INT 3
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31494
31390: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31391: LD_ADDR_VAR 0 2
31395: PUSH
31396: LD_INT 22
31398: PUSH
31399: LD_OWVAR 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 25
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 2
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31598
// un := tmp [ rand ( 1 , tmp ) ] ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_VAR 0 2
31445: PUSH
31446: LD_INT 1
31448: PPUSH
31449: LD_VAR 0 2
31453: PPUSH
31454: CALL_OW 12
31458: ARRAY
31459: ST_TO_ADDR
// if Crawls ( un ) then
31460: LD_VAR 0 3
31464: PPUSH
31465: CALL_OW 318
31469: IFFALSE 31480
// ComWalk ( un ) ;
31471: LD_VAR 0 3
31475: PPUSH
31476: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31480: LD_VAR 0 3
31484: PPUSH
31485: LD_INT 8
31487: PPUSH
31488: CALL_OW 336
// end ; 4 :
31492: GO 31598
31494: LD_INT 4
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31576
31502: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31503: LD_ADDR_VAR 0 2
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_OWVAR 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 30
31522: PUSH
31523: LD_INT 29
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: ST_TO_ADDR
// if not tmp then
31539: LD_VAR 0 2
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31598
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31548: LD_VAR 0 2
31552: PUSH
31553: LD_INT 1
31555: ARRAY
31556: PPUSH
31557: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31561: LD_VAR 0 2
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PPUSH
31570: CALL_OW 65
// end ; 5 .. 7 :
31574: GO 31598
31576: LD_INT 5
31578: DOUBLE
31579: GREATEREQUAL
31580: IFFALSE 31588
31582: LD_INT 7
31584: DOUBLE
31585: LESSEQUAL
31586: IFTRUE 31590
31588: GO 31597
31590: POP
// StreamSibBomb ; end ;
31591: CALL 27835 0 0
31595: GO 31598
31597: POP
// end ;
31598: PPOPN 3
31600: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31601: LD_EXP 52
31605: PUSH
31606: LD_EXP 102
31610: AND
31611: IFFALSE 31767
31613: GO 31615
31615: DISABLE
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
31620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31621: LD_ADDR_VAR 0 2
31625: PUSH
31626: LD_INT 81
31628: PUSH
31629: LD_OWVAR 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 21
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 21
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PPUSH
31670: CALL_OW 69
31674: ST_TO_ADDR
// if not tmp then
31675: LD_VAR 0 2
31679: NOT
31680: IFFALSE 31684
// exit ;
31682: GO 31767
// p := 0 ;
31684: LD_ADDR_VAR 0 3
31688: PUSH
31689: LD_INT 0
31691: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31692: LD_INT 35
31694: PPUSH
31695: CALL_OW 67
// p := p + 1 ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_VAR 0 3
31708: PUSH
31709: LD_INT 1
31711: PLUS
31712: ST_TO_ADDR
// for i in tmp do
31713: LD_ADDR_VAR 0 1
31717: PUSH
31718: LD_VAR 0 2
31722: PUSH
31723: FOR_IN
31724: IFFALSE 31755
// if GetLives ( i ) < 1000 then
31726: LD_VAR 0 1
31730: PPUSH
31731: CALL_OW 256
31735: PUSH
31736: LD_INT 1000
31738: LESS
31739: IFFALSE 31753
// SetLives ( i , 1000 ) ;
31741: LD_VAR 0 1
31745: PPUSH
31746: LD_INT 1000
31748: PPUSH
31749: CALL_OW 234
31753: GO 31723
31755: POP
31756: POP
// until p > 20 ;
31757: LD_VAR 0 3
31761: PUSH
31762: LD_INT 20
31764: GREATER
31765: IFFALSE 31692
// end ;
31767: PPOPN 3
31769: END
// every 0 0$1 trigger StreamModeActive and sTime do
31770: LD_EXP 52
31774: PUSH
31775: LD_EXP 103
31779: AND
31780: IFFALSE 31815
31782: GO 31784
31784: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31785: LD_INT 28
31787: PPUSH
31788: LD_OWVAR 2
31792: PPUSH
31793: LD_INT 2
31795: PPUSH
31796: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31800: LD_INT 30
31802: PPUSH
31803: LD_OWVAR 2
31807: PPUSH
31808: LD_INT 2
31810: PPUSH
31811: CALL_OW 322
// end ;
31815: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31816: LD_EXP 52
31820: PUSH
31821: LD_EXP 104
31825: AND
31826: IFFALSE 31947
31828: GO 31830
31830: DISABLE
31831: LD_INT 0
31833: PPUSH
31834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31835: LD_ADDR_VAR 0 2
31839: PUSH
31840: LD_INT 22
31842: PUSH
31843: LD_OWVAR 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 21
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: LD_INT 23
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: PPUSH
31884: CALL_OW 69
31888: ST_TO_ADDR
// if not tmp then
31889: LD_VAR 0 2
31893: NOT
31894: IFFALSE 31898
// exit ;
31896: GO 31947
// for i in tmp do
31898: LD_ADDR_VAR 0 1
31902: PUSH
31903: LD_VAR 0 2
31907: PUSH
31908: FOR_IN
31909: IFFALSE 31945
// begin if Crawls ( i ) then
31911: LD_VAR 0 1
31915: PPUSH
31916: CALL_OW 318
31920: IFFALSE 31931
// ComWalk ( i ) ;
31922: LD_VAR 0 1
31926: PPUSH
31927: CALL_OW 138
// SetClass ( i , 2 ) ;
31931: LD_VAR 0 1
31935: PPUSH
31936: LD_INT 2
31938: PPUSH
31939: CALL_OW 336
// end ;
31943: GO 31908
31945: POP
31946: POP
// end ;
31947: PPOPN 2
31949: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31950: LD_EXP 52
31954: PUSH
31955: LD_EXP 105
31959: AND
31960: IFFALSE 32248
31962: GO 31964
31964: DISABLE
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
31969: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31970: LD_OWVAR 2
31974: PPUSH
31975: LD_INT 9
31977: PPUSH
31978: LD_INT 1
31980: PPUSH
31981: LD_INT 1
31983: PPUSH
31984: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31988: LD_INT 9
31990: PPUSH
31991: LD_OWVAR 2
31995: PPUSH
31996: CALL_OW 343
// uc_side := 9 ;
32000: LD_ADDR_OWVAR 20
32004: PUSH
32005: LD_INT 9
32007: ST_TO_ADDR
// uc_nation := 2 ;
32008: LD_ADDR_OWVAR 21
32012: PUSH
32013: LD_INT 2
32015: ST_TO_ADDR
// hc_name := Dark Warrior ;
32016: LD_ADDR_OWVAR 26
32020: PUSH
32021: LD_STRING Dark Warrior
32023: ST_TO_ADDR
// hc_gallery :=  ;
32024: LD_ADDR_OWVAR 33
32028: PUSH
32029: LD_STRING 
32031: ST_TO_ADDR
// hc_noskilllimit := true ;
32032: LD_ADDR_OWVAR 76
32036: PUSH
32037: LD_INT 1
32039: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32040: LD_ADDR_OWVAR 31
32044: PUSH
32045: LD_INT 30
32047: PUSH
32048: LD_INT 30
32050: PUSH
32051: LD_INT 30
32053: PUSH
32054: LD_INT 30
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// un := CreateHuman ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: CALL_OW 44
32072: ST_TO_ADDR
// hc_noskilllimit := false ;
32073: LD_ADDR_OWVAR 76
32077: PUSH
32078: LD_INT 0
32080: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32081: LD_VAR 0 3
32085: PPUSH
32086: LD_INT 1
32088: PPUSH
32089: CALL_OW 51
// ToLua ( playRanger() ) ;
32093: LD_STRING playRanger()
32095: PPUSH
32096: CALL_OW 559
// p := 0 ;
32100: LD_ADDR_VAR 0 2
32104: PUSH
32105: LD_INT 0
32107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32108: LD_INT 35
32110: PPUSH
32111: CALL_OW 67
// p := p + 1 ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: PLUS
32128: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32129: LD_VAR 0 3
32133: PPUSH
32134: CALL_OW 256
32138: PUSH
32139: LD_INT 1000
32141: LESS
32142: IFFALSE 32156
// SetLives ( un , 1000 ) ;
32144: LD_VAR 0 3
32148: PPUSH
32149: LD_INT 1000
32151: PPUSH
32152: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32156: LD_VAR 0 3
32160: PPUSH
32161: LD_INT 81
32163: PUSH
32164: LD_OWVAR 2
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 91
32175: PUSH
32176: LD_VAR 0 3
32180: PUSH
32181: LD_INT 30
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PPUSH
32193: CALL_OW 69
32197: PPUSH
32198: LD_VAR 0 3
32202: PPUSH
32203: CALL_OW 74
32207: PPUSH
32208: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32212: LD_VAR 0 2
32216: PUSH
32217: LD_INT 80
32219: GREATER
32220: PUSH
32221: LD_VAR 0 3
32225: PPUSH
32226: CALL_OW 301
32230: OR
32231: IFFALSE 32108
// if un then
32233: LD_VAR 0 3
32237: IFFALSE 32248
// RemoveUnit ( un ) ;
32239: LD_VAR 0 3
32243: PPUSH
32244: CALL_OW 64
// end ;
32248: PPOPN 3
32250: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32251: LD_EXP 106
32255: IFFALSE 32371
32257: GO 32259
32259: DISABLE
32260: LD_INT 0
32262: PPUSH
32263: PPUSH
32264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32265: LD_ADDR_VAR 0 2
32269: PUSH
32270: LD_INT 81
32272: PUSH
32273: LD_OWVAR 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 21
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PPUSH
32296: CALL_OW 69
32300: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32301: LD_STRING playComputer()
32303: PPUSH
32304: CALL_OW 559
// if not tmp then
32308: LD_VAR 0 2
32312: NOT
32313: IFFALSE 32317
// exit ;
32315: GO 32371
// for i in tmp do
32317: LD_ADDR_VAR 0 1
32321: PUSH
32322: LD_VAR 0 2
32326: PUSH
32327: FOR_IN
32328: IFFALSE 32369
// for j := 1 to 4 do
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: DOUBLE
32336: LD_INT 1
32338: DEC
32339: ST_TO_ADDR
32340: LD_INT 4
32342: PUSH
32343: FOR_TO
32344: IFFALSE 32365
// SetSkill ( i , j , 10 ) ;
32346: LD_VAR 0 1
32350: PPUSH
32351: LD_VAR 0 3
32355: PPUSH
32356: LD_INT 10
32358: PPUSH
32359: CALL_OW 237
32363: GO 32343
32365: POP
32366: POP
32367: GO 32327
32369: POP
32370: POP
// end ;
32371: PPOPN 3
32373: END
// every 0 0$1 trigger s30 do var i , tmp ;
32374: LD_EXP 107
32378: IFFALSE 32447
32380: GO 32382
32382: DISABLE
32383: LD_INT 0
32385: PPUSH
32386: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32387: LD_ADDR_VAR 0 2
32391: PUSH
32392: LD_INT 22
32394: PUSH
32395: LD_OWVAR 2
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PPUSH
32404: CALL_OW 69
32408: ST_TO_ADDR
// if not tmp then
32409: LD_VAR 0 2
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32447
// for i in tmp do
32418: LD_ADDR_VAR 0 1
32422: PUSH
32423: LD_VAR 0 2
32427: PUSH
32428: FOR_IN
32429: IFFALSE 32445
// SetLives ( i , 300 ) ;
32431: LD_VAR 0 1
32435: PPUSH
32436: LD_INT 300
32438: PPUSH
32439: CALL_OW 234
32443: GO 32428
32445: POP
32446: POP
// end ;
32447: PPOPN 2
32449: END
// every 0 0$1 trigger s60 do var i , tmp ;
32450: LD_EXP 108
32454: IFFALSE 32523
32456: GO 32458
32458: DISABLE
32459: LD_INT 0
32461: PPUSH
32462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32463: LD_ADDR_VAR 0 2
32467: PUSH
32468: LD_INT 22
32470: PUSH
32471: LD_OWVAR 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PPUSH
32480: CALL_OW 69
32484: ST_TO_ADDR
// if not tmp then
32485: LD_VAR 0 2
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 32523
// for i in tmp do
32494: LD_ADDR_VAR 0 1
32498: PUSH
32499: LD_VAR 0 2
32503: PUSH
32504: FOR_IN
32505: IFFALSE 32521
// SetLives ( i , 600 ) ;
32507: LD_VAR 0 1
32511: PPUSH
32512: LD_INT 600
32514: PPUSH
32515: CALL_OW 234
32519: GO 32504
32521: POP
32522: POP
// end ;
32523: PPOPN 2
32525: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32526: LD_INT 0
32528: PPUSH
// case cmd of 301 :
32529: LD_VAR 0 1
32533: PUSH
32534: LD_INT 301
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32574
32542: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32543: LD_VAR 0 6
32547: PPUSH
32548: LD_VAR 0 7
32552: PPUSH
32553: LD_VAR 0 8
32557: PPUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL 33783 0 5
32572: GO 32695
32574: LD_INT 302
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32619
32582: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32583: LD_VAR 0 6
32587: PPUSH
32588: LD_VAR 0 7
32592: PPUSH
32593: LD_VAR 0 8
32597: PPUSH
32598: LD_VAR 0 9
32602: PPUSH
32603: LD_VAR 0 4
32607: PPUSH
32608: LD_VAR 0 5
32612: PPUSH
32613: CALL 33874 0 6
32617: GO 32695
32619: LD_INT 303
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32664
32627: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32628: LD_VAR 0 6
32632: PPUSH
32633: LD_VAR 0 7
32637: PPUSH
32638: LD_VAR 0 8
32642: PPUSH
32643: LD_VAR 0 9
32647: PPUSH
32648: LD_VAR 0 4
32652: PPUSH
32653: LD_VAR 0 5
32657: PPUSH
32658: CALL 32700 0 6
32662: GO 32695
32664: LD_INT 304
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 32694
32672: POP
// hHackTeleport ( unit , x , y ) ; end ;
32673: LD_VAR 0 2
32677: PPUSH
32678: LD_VAR 0 4
32682: PPUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: CALL 34467 0 3
32692: GO 32695
32694: POP
// end ;
32695: LD_VAR 0 12
32699: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32704: LD_VAR 0 1
32708: PUSH
32709: LD_INT 1
32711: LESS
32712: PUSH
32713: LD_VAR 0 1
32717: PUSH
32718: LD_INT 3
32720: GREATER
32721: OR
32722: PUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: LD_VAR 0 6
32732: PPUSH
32733: CALL_OW 428
32737: OR
32738: IFFALSE 32742
// exit ;
32740: GO 33470
// uc_side := your_side ;
32742: LD_ADDR_OWVAR 20
32746: PUSH
32747: LD_OWVAR 2
32751: ST_TO_ADDR
// uc_nation := nation ;
32752: LD_ADDR_OWVAR 21
32756: PUSH
32757: LD_VAR 0 1
32761: ST_TO_ADDR
// bc_level = 1 ;
32762: LD_ADDR_OWVAR 43
32766: PUSH
32767: LD_INT 1
32769: ST_TO_ADDR
// case btype of 1 :
32770: LD_VAR 0 2
32774: PUSH
32775: LD_INT 1
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32794
32783: POP
// bc_type := b_depot ; 2 :
32784: LD_ADDR_OWVAR 42
32788: PUSH
32789: LD_INT 0
32791: ST_TO_ADDR
32792: GO 33414
32794: LD_INT 2
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32813
32802: POP
// bc_type := b_warehouse ; 3 :
32803: LD_ADDR_OWVAR 42
32807: PUSH
32808: LD_INT 1
32810: ST_TO_ADDR
32811: GO 33414
32813: LD_INT 3
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32832
32821: POP
// bc_type := b_lab ; 4 .. 9 :
32822: LD_ADDR_OWVAR 42
32826: PUSH
32827: LD_INT 6
32829: ST_TO_ADDR
32830: GO 33414
32832: LD_INT 4
32834: DOUBLE
32835: GREATEREQUAL
32836: IFFALSE 32844
32838: LD_INT 9
32840: DOUBLE
32841: LESSEQUAL
32842: IFTRUE 32846
32844: GO 32906
32846: POP
// begin bc_type := b_lab_half ;
32847: LD_ADDR_OWVAR 42
32851: PUSH
32852: LD_INT 7
32854: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32855: LD_ADDR_OWVAR 44
32859: PUSH
32860: LD_INT 10
32862: PUSH
32863: LD_INT 11
32865: PUSH
32866: LD_INT 12
32868: PUSH
32869: LD_INT 15
32871: PUSH
32872: LD_INT 14
32874: PUSH
32875: LD_INT 13
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PUSH
32886: LD_VAR 0 2
32890: PUSH
32891: LD_INT 3
32893: MINUS
32894: ARRAY
32895: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32896: LD_ADDR_OWVAR 45
32900: PUSH
32901: LD_INT 9
32903: ST_TO_ADDR
// end ; 10 .. 13 :
32904: GO 33414
32906: LD_INT 10
32908: DOUBLE
32909: GREATEREQUAL
32910: IFFALSE 32918
32912: LD_INT 13
32914: DOUBLE
32915: LESSEQUAL
32916: IFTRUE 32920
32918: GO 32997
32920: POP
// begin bc_type := b_lab_full ;
32921: LD_ADDR_OWVAR 42
32925: PUSH
32926: LD_INT 8
32928: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32929: LD_ADDR_OWVAR 44
32933: PUSH
32934: LD_INT 10
32936: PUSH
32937: LD_INT 12
32939: PUSH
32940: LD_INT 14
32942: PUSH
32943: LD_INT 13
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: PUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_INT 9
32959: MINUS
32960: ARRAY
32961: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32962: LD_ADDR_OWVAR 45
32966: PUSH
32967: LD_INT 11
32969: PUSH
32970: LD_INT 15
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 15
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: PUSH
32985: LD_VAR 0 2
32989: PUSH
32990: LD_INT 9
32992: MINUS
32993: ARRAY
32994: ST_TO_ADDR
// end ; 14 :
32995: GO 33414
32997: LD_INT 14
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33016
33005: POP
// bc_type := b_workshop ; 15 :
33006: LD_ADDR_OWVAR 42
33010: PUSH
33011: LD_INT 2
33013: ST_TO_ADDR
33014: GO 33414
33016: LD_INT 15
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33035
33024: POP
// bc_type := b_factory ; 16 :
33025: LD_ADDR_OWVAR 42
33029: PUSH
33030: LD_INT 3
33032: ST_TO_ADDR
33033: GO 33414
33035: LD_INT 16
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33054
33043: POP
// bc_type := b_ext_gun ; 17 :
33044: LD_ADDR_OWVAR 42
33048: PUSH
33049: LD_INT 17
33051: ST_TO_ADDR
33052: GO 33414
33054: LD_INT 17
33056: DOUBLE
33057: EQUAL
33058: IFTRUE 33062
33060: GO 33090
33062: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33063: LD_ADDR_OWVAR 42
33067: PUSH
33068: LD_INT 19
33070: PUSH
33071: LD_INT 23
33073: PUSH
33074: LD_INT 19
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_VAR 0 1
33086: ARRAY
33087: ST_TO_ADDR
33088: GO 33414
33090: LD_INT 18
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33109
33098: POP
// bc_type := b_ext_radar ; 19 :
33099: LD_ADDR_OWVAR 42
33103: PUSH
33104: LD_INT 20
33106: ST_TO_ADDR
33107: GO 33414
33109: LD_INT 19
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33128
33117: POP
// bc_type := b_ext_radio ; 20 :
33118: LD_ADDR_OWVAR 42
33122: PUSH
33123: LD_INT 22
33125: ST_TO_ADDR
33126: GO 33414
33128: LD_INT 20
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33147
33136: POP
// bc_type := b_ext_siberium ; 21 :
33137: LD_ADDR_OWVAR 42
33141: PUSH
33142: LD_INT 21
33144: ST_TO_ADDR
33145: GO 33414
33147: LD_INT 21
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33166
33155: POP
// bc_type := b_ext_computer ; 22 :
33156: LD_ADDR_OWVAR 42
33160: PUSH
33161: LD_INT 24
33163: ST_TO_ADDR
33164: GO 33414
33166: LD_INT 22
33168: DOUBLE
33169: EQUAL
33170: IFTRUE 33174
33172: GO 33185
33174: POP
// bc_type := b_ext_track ; 23 :
33175: LD_ADDR_OWVAR 42
33179: PUSH
33180: LD_INT 16
33182: ST_TO_ADDR
33183: GO 33414
33185: LD_INT 23
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33204
33193: POP
// bc_type := b_ext_laser ; 24 :
33194: LD_ADDR_OWVAR 42
33198: PUSH
33199: LD_INT 25
33201: ST_TO_ADDR
33202: GO 33414
33204: LD_INT 24
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33223
33212: POP
// bc_type := b_control_tower ; 25 :
33213: LD_ADDR_OWVAR 42
33217: PUSH
33218: LD_INT 36
33220: ST_TO_ADDR
33221: GO 33414
33223: LD_INT 25
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33231
33229: GO 33242
33231: POP
// bc_type := b_breastwork ; 26 :
33232: LD_ADDR_OWVAR 42
33236: PUSH
33237: LD_INT 31
33239: ST_TO_ADDR
33240: GO 33414
33242: LD_INT 26
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33261
33250: POP
// bc_type := b_bunker ; 27 :
33251: LD_ADDR_OWVAR 42
33255: PUSH
33256: LD_INT 32
33258: ST_TO_ADDR
33259: GO 33414
33261: LD_INT 27
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33280
33269: POP
// bc_type := b_turret ; 28 :
33270: LD_ADDR_OWVAR 42
33274: PUSH
33275: LD_INT 33
33277: ST_TO_ADDR
33278: GO 33414
33280: LD_INT 28
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33299
33288: POP
// bc_type := b_armoury ; 29 :
33289: LD_ADDR_OWVAR 42
33293: PUSH
33294: LD_INT 4
33296: ST_TO_ADDR
33297: GO 33414
33299: LD_INT 29
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33318
33307: POP
// bc_type := b_barracks ; 30 :
33308: LD_ADDR_OWVAR 42
33312: PUSH
33313: LD_INT 5
33315: ST_TO_ADDR
33316: GO 33414
33318: LD_INT 30
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33337
33326: POP
// bc_type := b_solar_power ; 31 :
33327: LD_ADDR_OWVAR 42
33331: PUSH
33332: LD_INT 27
33334: ST_TO_ADDR
33335: GO 33414
33337: LD_INT 31
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33356
33345: POP
// bc_type := b_oil_power ; 32 :
33346: LD_ADDR_OWVAR 42
33350: PUSH
33351: LD_INT 26
33353: ST_TO_ADDR
33354: GO 33414
33356: LD_INT 32
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33375
33364: POP
// bc_type := b_siberite_power ; 33 :
33365: LD_ADDR_OWVAR 42
33369: PUSH
33370: LD_INT 28
33372: ST_TO_ADDR
33373: GO 33414
33375: LD_INT 33
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33394
33383: POP
// bc_type := b_oil_mine ; 34 :
33384: LD_ADDR_OWVAR 42
33388: PUSH
33389: LD_INT 29
33391: ST_TO_ADDR
33392: GO 33414
33394: LD_INT 34
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33413
33402: POP
// bc_type := b_siberite_mine ; end ;
33403: LD_ADDR_OWVAR 42
33407: PUSH
33408: LD_INT 30
33410: ST_TO_ADDR
33411: GO 33414
33413: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33414: LD_ADDR_VAR 0 8
33418: PUSH
33419: LD_VAR 0 5
33423: PPUSH
33424: LD_VAR 0 6
33428: PPUSH
33429: LD_VAR 0 3
33433: PPUSH
33434: CALL_OW 47
33438: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33439: LD_OWVAR 42
33443: PUSH
33444: LD_INT 32
33446: PUSH
33447: LD_INT 33
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: IN
33454: IFFALSE 33470
// PlaceWeaponTurret ( b , weapon ) ;
33456: LD_VAR 0 8
33460: PPUSH
33461: LD_VAR 0 4
33465: PPUSH
33466: CALL_OW 431
// end ;
33470: LD_VAR 0 7
33474: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33475: LD_INT 0
33477: PPUSH
33478: PPUSH
33479: PPUSH
33480: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33481: LD_ADDR_VAR 0 4
33485: PUSH
33486: LD_INT 22
33488: PUSH
33489: LD_OWVAR 2
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: LD_INT 30
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 30
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PPUSH
33530: CALL_OW 69
33534: ST_TO_ADDR
// if not tmp then
33535: LD_VAR 0 4
33539: NOT
33540: IFFALSE 33544
// exit ;
33542: GO 33603
// for i in tmp do
33544: LD_ADDR_VAR 0 2
33548: PUSH
33549: LD_VAR 0 4
33553: PUSH
33554: FOR_IN
33555: IFFALSE 33601
// for j = 1 to 3 do
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: DOUBLE
33563: LD_INT 1
33565: DEC
33566: ST_TO_ADDR
33567: LD_INT 3
33569: PUSH
33570: FOR_TO
33571: IFFALSE 33597
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: CALL_OW 274
33582: PPUSH
33583: LD_VAR 0 3
33587: PPUSH
33588: LD_INT 99999
33590: PPUSH
33591: CALL_OW 277
33595: GO 33570
33597: POP
33598: POP
33599: GO 33554
33601: POP
33602: POP
// end ;
33603: LD_VAR 0 1
33607: RET
// export function hHackSetLevel10 ; var i , j ; begin
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
33612: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33613: LD_ADDR_VAR 0 2
33617: PUSH
33618: LD_INT 21
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PPUSH
33628: CALL_OW 69
33632: PUSH
33633: FOR_IN
33634: IFFALSE 33686
// if IsSelected ( i ) then
33636: LD_VAR 0 2
33640: PPUSH
33641: CALL_OW 306
33645: IFFALSE 33684
// begin for j := 1 to 4 do
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: DOUBLE
33653: LD_INT 1
33655: DEC
33656: ST_TO_ADDR
33657: LD_INT 4
33659: PUSH
33660: FOR_TO
33661: IFFALSE 33682
// SetSkill ( i , j , 10 ) ;
33663: LD_VAR 0 2
33667: PPUSH
33668: LD_VAR 0 3
33672: PPUSH
33673: LD_INT 10
33675: PPUSH
33676: CALL_OW 237
33680: GO 33660
33682: POP
33683: POP
// end ;
33684: GO 33633
33686: POP
33687: POP
// end ;
33688: LD_VAR 0 1
33692: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33693: LD_INT 0
33695: PPUSH
33696: PPUSH
33697: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33698: LD_ADDR_VAR 0 2
33702: PUSH
33703: LD_INT 22
33705: PUSH
33706: LD_OWVAR 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 21
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PPUSH
33729: CALL_OW 69
33733: PUSH
33734: FOR_IN
33735: IFFALSE 33776
// begin for j := 1 to 4 do
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: DOUBLE
33743: LD_INT 1
33745: DEC
33746: ST_TO_ADDR
33747: LD_INT 4
33749: PUSH
33750: FOR_TO
33751: IFFALSE 33772
// SetSkill ( i , j , 10 ) ;
33753: LD_VAR 0 2
33757: PPUSH
33758: LD_VAR 0 3
33762: PPUSH
33763: LD_INT 10
33765: PPUSH
33766: CALL_OW 237
33770: GO 33750
33772: POP
33773: POP
// end ;
33774: GO 33734
33776: POP
33777: POP
// end ;
33778: LD_VAR 0 1
33782: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33783: LD_INT 0
33785: PPUSH
// uc_side := your_side ;
33786: LD_ADDR_OWVAR 20
33790: PUSH
33791: LD_OWVAR 2
33795: ST_TO_ADDR
// uc_nation := nation ;
33796: LD_ADDR_OWVAR 21
33800: PUSH
33801: LD_VAR 0 1
33805: ST_TO_ADDR
// InitHc ;
33806: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33810: LD_INT 0
33812: PPUSH
33813: LD_VAR 0 2
33817: PPUSH
33818: LD_VAR 0 3
33822: PPUSH
33823: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33827: LD_VAR 0 4
33831: PPUSH
33832: LD_VAR 0 5
33836: PPUSH
33837: CALL_OW 428
33841: PUSH
33842: LD_INT 0
33844: EQUAL
33845: IFFALSE 33869
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33847: CALL_OW 44
33851: PPUSH
33852: LD_VAR 0 4
33856: PPUSH
33857: LD_VAR 0 5
33861: PPUSH
33862: LD_INT 1
33864: PPUSH
33865: CALL_OW 48
// end ;
33869: LD_VAR 0 6
33873: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
// uc_side := your_side ;
33878: LD_ADDR_OWVAR 20
33882: PUSH
33883: LD_OWVAR 2
33887: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33888: LD_VAR 0 1
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 4
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: IN
33915: IFFALSE 33927
// uc_nation := nation_american else
33917: LD_ADDR_OWVAR 21
33921: PUSH
33922: LD_INT 1
33924: ST_TO_ADDR
33925: GO 33970
// if chassis in [ 11 , 12 , 13 , 14 ] then
33927: LD_VAR 0 1
33931: PUSH
33932: LD_INT 11
33934: PUSH
33935: LD_INT 12
33937: PUSH
33938: LD_INT 13
33940: PUSH
33941: LD_INT 14
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: IN
33950: IFFALSE 33962
// uc_nation := nation_arabian else
33952: LD_ADDR_OWVAR 21
33956: PUSH
33957: LD_INT 2
33959: ST_TO_ADDR
33960: GO 33970
// uc_nation := nation_russian ;
33962: LD_ADDR_OWVAR 21
33966: PUSH
33967: LD_INT 3
33969: ST_TO_ADDR
// vc_chassis := chassis ;
33970: LD_ADDR_OWVAR 37
33974: PUSH
33975: LD_VAR 0 1
33979: ST_TO_ADDR
// vc_engine := engine ;
33980: LD_ADDR_OWVAR 39
33984: PUSH
33985: LD_VAR 0 2
33989: ST_TO_ADDR
// vc_control := control ;
33990: LD_ADDR_OWVAR 38
33994: PUSH
33995: LD_VAR 0 3
33999: ST_TO_ADDR
// vc_weapon := weapon ;
34000: LD_ADDR_OWVAR 40
34004: PUSH
34005: LD_VAR 0 4
34009: ST_TO_ADDR
// un := CreateVehicle ;
34010: LD_ADDR_VAR 0 8
34014: PUSH
34015: CALL_OW 45
34019: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34020: LD_VAR 0 8
34024: PPUSH
34025: LD_INT 0
34027: PPUSH
34028: LD_INT 5
34030: PPUSH
34031: CALL_OW 12
34035: PPUSH
34036: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34040: LD_VAR 0 8
34044: PPUSH
34045: LD_VAR 0 5
34049: PPUSH
34050: LD_VAR 0 6
34054: PPUSH
34055: LD_INT 1
34057: PPUSH
34058: CALL_OW 48
// end ;
34062: LD_VAR 0 7
34066: RET
// export hInvincible ; every 1 do
34067: GO 34069
34069: DISABLE
// hInvincible := [ ] ;
34070: LD_ADDR_EXP 109
34074: PUSH
34075: EMPTY
34076: ST_TO_ADDR
34077: END
// every 10 do var i ;
34078: GO 34080
34080: DISABLE
34081: LD_INT 0
34083: PPUSH
// begin enable ;
34084: ENABLE
// if not hInvincible then
34085: LD_EXP 109
34089: NOT
34090: IFFALSE 34094
// exit ;
34092: GO 34138
// for i in hInvincible do
34094: LD_ADDR_VAR 0 1
34098: PUSH
34099: LD_EXP 109
34103: PUSH
34104: FOR_IN
34105: IFFALSE 34136
// if GetLives ( i ) < 1000 then
34107: LD_VAR 0 1
34111: PPUSH
34112: CALL_OW 256
34116: PUSH
34117: LD_INT 1000
34119: LESS
34120: IFFALSE 34134
// SetLives ( i , 1000 ) ;
34122: LD_VAR 0 1
34126: PPUSH
34127: LD_INT 1000
34129: PPUSH
34130: CALL_OW 234
34134: GO 34104
34136: POP
34137: POP
// end ;
34138: PPOPN 1
34140: END
// export function hHackInvincible ; var i ; begin
34141: LD_INT 0
34143: PPUSH
34144: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34145: LD_ADDR_VAR 0 2
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 21
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 21
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: PPUSH
34178: CALL_OW 69
34182: PUSH
34183: FOR_IN
34184: IFFALSE 34245
// if IsSelected ( i ) then
34186: LD_VAR 0 2
34190: PPUSH
34191: CALL_OW 306
34195: IFFALSE 34243
// begin if i in hInvincible then
34197: LD_VAR 0 2
34201: PUSH
34202: LD_EXP 109
34206: IN
34207: IFFALSE 34227
// hInvincible := hInvincible diff i else
34209: LD_ADDR_EXP 109
34213: PUSH
34214: LD_EXP 109
34218: PUSH
34219: LD_VAR 0 2
34223: DIFF
34224: ST_TO_ADDR
34225: GO 34243
// hInvincible := hInvincible union i ;
34227: LD_ADDR_EXP 109
34231: PUSH
34232: LD_EXP 109
34236: PUSH
34237: LD_VAR 0 2
34241: UNION
34242: ST_TO_ADDR
// end ;
34243: GO 34183
34245: POP
34246: POP
// end ;
34247: LD_VAR 0 1
34251: RET
// export function hHackInvisible ; var i , j ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
34256: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_INT 21
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PPUSH
34272: CALL_OW 69
34276: PUSH
34277: FOR_IN
34278: IFFALSE 34302
// if IsSelected ( i ) then
34280: LD_VAR 0 2
34284: PPUSH
34285: CALL_OW 306
34289: IFFALSE 34300
// ComForceInvisible ( i ) ;
34291: LD_VAR 0 2
34295: PPUSH
34296: CALL_OW 496
34300: GO 34277
34302: POP
34303: POP
// end ;
34304: LD_VAR 0 1
34308: RET
// export function hHackChangeYourSide ; begin
34309: LD_INT 0
34311: PPUSH
// if your_side = 8 then
34312: LD_OWVAR 2
34316: PUSH
34317: LD_INT 8
34319: EQUAL
34320: IFFALSE 34332
// your_side := 0 else
34322: LD_ADDR_OWVAR 2
34326: PUSH
34327: LD_INT 0
34329: ST_TO_ADDR
34330: GO 34346
// your_side := your_side + 1 ;
34332: LD_ADDR_OWVAR 2
34336: PUSH
34337: LD_OWVAR 2
34341: PUSH
34342: LD_INT 1
34344: PLUS
34345: ST_TO_ADDR
// end ;
34346: LD_VAR 0 1
34350: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34351: LD_INT 0
34353: PPUSH
34354: PPUSH
34355: PPUSH
// for i in all_units do
34356: LD_ADDR_VAR 0 2
34360: PUSH
34361: LD_OWVAR 3
34365: PUSH
34366: FOR_IN
34367: IFFALSE 34445
// if IsSelected ( i ) then
34369: LD_VAR 0 2
34373: PPUSH
34374: CALL_OW 306
34378: IFFALSE 34443
// begin j := GetSide ( i ) ;
34380: LD_ADDR_VAR 0 3
34384: PUSH
34385: LD_VAR 0 2
34389: PPUSH
34390: CALL_OW 255
34394: ST_TO_ADDR
// if j = 8 then
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 8
34402: EQUAL
34403: IFFALSE 34415
// j := 0 else
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_INT 0
34412: ST_TO_ADDR
34413: GO 34429
// j := j + 1 ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_VAR 0 3
34424: PUSH
34425: LD_INT 1
34427: PLUS
34428: ST_TO_ADDR
// SetSide ( i , j ) ;
34429: LD_VAR 0 2
34433: PPUSH
34434: LD_VAR 0 3
34438: PPUSH
34439: CALL_OW 235
// end ;
34443: GO 34366
34445: POP
34446: POP
// end ;
34447: LD_VAR 0 1
34451: RET
// export function hHackFog ; begin
34452: LD_INT 0
34454: PPUSH
// FogOff ( true ) ;
34455: LD_INT 1
34457: PPUSH
34458: CALL_OW 344
// end ;
34462: LD_VAR 0 1
34466: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34467: LD_INT 0
34469: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34470: LD_VAR 0 1
34474: PPUSH
34475: LD_VAR 0 2
34479: PPUSH
34480: LD_VAR 0 3
34484: PPUSH
34485: LD_INT 1
34487: PPUSH
34488: LD_INT 1
34490: PPUSH
34491: CALL_OW 483
// CenterOnXY ( x , y ) ;
34495: LD_VAR 0 2
34499: PPUSH
34500: LD_VAR 0 3
34504: PPUSH
34505: CALL_OW 84
// end ;
34509: LD_VAR 0 4
34513: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34514: LD_INT 0
34516: PPUSH
34517: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34518: LD_VAR 0 1
34522: NOT
34523: PUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: CALL_OW 488
34538: NOT
34539: OR
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 266
34550: PUSH
34551: LD_INT 3
34553: NONEQUAL
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 247
34564: PUSH
34565: LD_INT 1
34567: EQUAL
34568: NOT
34569: AND
34570: OR
34571: IFFALSE 34575
// exit ;
34573: GO 34724
// if GetType ( factory ) = unit_human then
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 247
34584: PUSH
34585: LD_INT 1
34587: EQUAL
34588: IFFALSE 34605
// factory := IsInUnit ( factory ) ;
34590: LD_ADDR_VAR 0 1
34594: PUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: CALL_OW 310
34604: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34605: LD_VAR 0 1
34609: PPUSH
34610: CALL_OW 266
34614: PUSH
34615: LD_INT 3
34617: NONEQUAL
34618: IFFALSE 34622
// exit ;
34620: GO 34724
// if HexInfo ( x , y ) = factory then
34622: LD_VAR 0 2
34626: PPUSH
34627: LD_VAR 0 3
34631: PPUSH
34632: CALL_OW 428
34636: PUSH
34637: LD_VAR 0 1
34641: EQUAL
34642: IFFALSE 34669
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34644: LD_ADDR_EXP 110
34648: PUSH
34649: LD_EXP 110
34653: PPUSH
34654: LD_VAR 0 1
34658: PPUSH
34659: LD_INT 0
34661: PPUSH
34662: CALL_OW 1
34666: ST_TO_ADDR
34667: GO 34720
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34669: LD_ADDR_EXP 110
34673: PUSH
34674: LD_EXP 110
34678: PPUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: LD_VAR 0 1
34688: PPUSH
34689: CALL_OW 255
34693: PUSH
34694: LD_VAR 0 1
34698: PUSH
34699: LD_VAR 0 2
34703: PUSH
34704: LD_VAR 0 3
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: PPUSH
34715: CALL_OW 1
34719: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34720: CALL 34729 0 0
// end ;
34724: LD_VAR 0 4
34728: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34729: LD_INT 0
34731: PPUSH
34732: PPUSH
34733: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34734: LD_STRING resetFactoryWaypoint();
34736: PPUSH
34737: CALL_OW 559
// if factoryWaypoints then
34741: LD_EXP 110
34745: IFFALSE 34871
// begin list := PrepareArray ( factoryWaypoints ) ;
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_EXP 110
34756: PPUSH
34757: CALL 82168 0 1
34761: ST_TO_ADDR
// for i := 1 to list do
34762: LD_ADDR_VAR 0 2
34766: PUSH
34767: DOUBLE
34768: LD_INT 1
34770: DEC
34771: ST_TO_ADDR
34772: LD_VAR 0 3
34776: PUSH
34777: FOR_TO
34778: IFFALSE 34869
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34780: LD_STRING setFactoryWaypointXY(
34782: PUSH
34783: LD_VAR 0 3
34787: PUSH
34788: LD_VAR 0 2
34792: ARRAY
34793: PUSH
34794: LD_INT 1
34796: ARRAY
34797: STR
34798: PUSH
34799: LD_STRING ,
34801: STR
34802: PUSH
34803: LD_VAR 0 3
34807: PUSH
34808: LD_VAR 0 2
34812: ARRAY
34813: PUSH
34814: LD_INT 2
34816: ARRAY
34817: STR
34818: PUSH
34819: LD_STRING ,
34821: STR
34822: PUSH
34823: LD_VAR 0 3
34827: PUSH
34828: LD_VAR 0 2
34832: ARRAY
34833: PUSH
34834: LD_INT 3
34836: ARRAY
34837: STR
34838: PUSH
34839: LD_STRING ,
34841: STR
34842: PUSH
34843: LD_VAR 0 3
34847: PUSH
34848: LD_VAR 0 2
34852: ARRAY
34853: PUSH
34854: LD_INT 4
34856: ARRAY
34857: STR
34858: PUSH
34859: LD_STRING )
34861: STR
34862: PPUSH
34863: CALL_OW 559
34867: GO 34777
34869: POP
34870: POP
// end ; end ;
34871: LD_VAR 0 1
34875: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34876: LD_INT 0
34878: PPUSH
// if HexInfo ( x , y ) = warehouse then
34879: LD_VAR 0 2
34883: PPUSH
34884: LD_VAR 0 3
34888: PPUSH
34889: CALL_OW 428
34893: PUSH
34894: LD_VAR 0 1
34898: EQUAL
34899: IFFALSE 34926
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34901: LD_ADDR_EXP 111
34905: PUSH
34906: LD_EXP 111
34910: PPUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: LD_INT 0
34918: PPUSH
34919: CALL_OW 1
34923: ST_TO_ADDR
34924: GO 34977
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34926: LD_ADDR_EXP 111
34930: PUSH
34931: LD_EXP 111
34935: PPUSH
34936: LD_VAR 0 1
34940: PPUSH
34941: LD_VAR 0 1
34945: PPUSH
34946: CALL_OW 255
34950: PUSH
34951: LD_VAR 0 1
34955: PUSH
34956: LD_VAR 0 2
34960: PUSH
34961: LD_VAR 0 3
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: PPUSH
34972: CALL_OW 1
34976: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34977: CALL 34986 0 0
// end ;
34981: LD_VAR 0 4
34985: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34986: LD_INT 0
34988: PPUSH
34989: PPUSH
34990: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34991: LD_STRING resetWarehouseGatheringPoints();
34993: PPUSH
34994: CALL_OW 559
// if warehouseGatheringPoints then
34998: LD_EXP 111
35002: IFFALSE 35128
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_EXP 111
35013: PPUSH
35014: CALL 82168 0 1
35018: ST_TO_ADDR
// for i := 1 to list do
35019: LD_ADDR_VAR 0 2
35023: PUSH
35024: DOUBLE
35025: LD_INT 1
35027: DEC
35028: ST_TO_ADDR
35029: LD_VAR 0 3
35033: PUSH
35034: FOR_TO
35035: IFFALSE 35126
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35037: LD_STRING setWarehouseGatheringPointXY(
35039: PUSH
35040: LD_VAR 0 3
35044: PUSH
35045: LD_VAR 0 2
35049: ARRAY
35050: PUSH
35051: LD_INT 1
35053: ARRAY
35054: STR
35055: PUSH
35056: LD_STRING ,
35058: STR
35059: PUSH
35060: LD_VAR 0 3
35064: PUSH
35065: LD_VAR 0 2
35069: ARRAY
35070: PUSH
35071: LD_INT 2
35073: ARRAY
35074: STR
35075: PUSH
35076: LD_STRING ,
35078: STR
35079: PUSH
35080: LD_VAR 0 3
35084: PUSH
35085: LD_VAR 0 2
35089: ARRAY
35090: PUSH
35091: LD_INT 3
35093: ARRAY
35094: STR
35095: PUSH
35096: LD_STRING ,
35098: STR
35099: PUSH
35100: LD_VAR 0 3
35104: PUSH
35105: LD_VAR 0 2
35109: ARRAY
35110: PUSH
35111: LD_INT 4
35113: ARRAY
35114: STR
35115: PUSH
35116: LD_STRING )
35118: STR
35119: PPUSH
35120: CALL_OW 559
35124: GO 35034
35126: POP
35127: POP
// end ; end ;
35128: LD_VAR 0 1
35132: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35133: LD_EXP 111
35137: IFFALSE 35822
35139: GO 35141
35141: DISABLE
35142: LD_INT 0
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
35151: PPUSH
35152: PPUSH
// begin enable ;
35153: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: LD_EXP 111
35163: PPUSH
35164: CALL 82168 0 1
35168: ST_TO_ADDR
// if not list then
35169: LD_VAR 0 3
35173: NOT
35174: IFFALSE 35178
// exit ;
35176: GO 35822
// for i := 1 to list do
35178: LD_ADDR_VAR 0 1
35182: PUSH
35183: DOUBLE
35184: LD_INT 1
35186: DEC
35187: ST_TO_ADDR
35188: LD_VAR 0 3
35192: PUSH
35193: FOR_TO
35194: IFFALSE 35820
// begin depot := list [ i ] [ 2 ] ;
35196: LD_ADDR_VAR 0 8
35200: PUSH
35201: LD_VAR 0 3
35205: PUSH
35206: LD_VAR 0 1
35210: ARRAY
35211: PUSH
35212: LD_INT 2
35214: ARRAY
35215: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35216: LD_ADDR_VAR 0 5
35220: PUSH
35221: LD_VAR 0 3
35225: PUSH
35226: LD_VAR 0 1
35230: ARRAY
35231: PUSH
35232: LD_INT 1
35234: ARRAY
35235: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35236: LD_VAR 0 8
35240: PPUSH
35241: CALL_OW 301
35245: PUSH
35246: LD_VAR 0 5
35250: PUSH
35251: LD_VAR 0 8
35255: PPUSH
35256: CALL_OW 255
35260: NONEQUAL
35261: OR
35262: IFFALSE 35291
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35264: LD_ADDR_EXP 111
35268: PUSH
35269: LD_EXP 111
35273: PPUSH
35274: LD_VAR 0 8
35278: PPUSH
35279: LD_INT 0
35281: PPUSH
35282: CALL_OW 1
35286: ST_TO_ADDR
// exit ;
35287: POP
35288: POP
35289: GO 35822
// end ; x := list [ i ] [ 3 ] ;
35291: LD_ADDR_VAR 0 6
35295: PUSH
35296: LD_VAR 0 3
35300: PUSH
35301: LD_VAR 0 1
35305: ARRAY
35306: PUSH
35307: LD_INT 3
35309: ARRAY
35310: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35311: LD_ADDR_VAR 0 7
35315: PUSH
35316: LD_VAR 0 3
35320: PUSH
35321: LD_VAR 0 1
35325: ARRAY
35326: PUSH
35327: LD_INT 4
35329: ARRAY
35330: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35331: LD_ADDR_VAR 0 9
35335: PUSH
35336: LD_VAR 0 6
35340: PPUSH
35341: LD_VAR 0 7
35345: PPUSH
35346: LD_INT 16
35348: PPUSH
35349: CALL 80756 0 3
35353: ST_TO_ADDR
// if not cratesNearbyPoint then
35354: LD_VAR 0 9
35358: NOT
35359: IFFALSE 35365
// exit ;
35361: POP
35362: POP
35363: GO 35822
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35365: LD_ADDR_VAR 0 4
35369: PUSH
35370: LD_INT 22
35372: PUSH
35373: LD_VAR 0 5
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: LD_INT 60
35387: PUSH
35388: EMPTY
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 91
35397: PUSH
35398: LD_VAR 0 8
35402: PUSH
35403: LD_INT 6
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: LD_INT 25
35416: PUSH
35417: LD_INT 2
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 25
35426: PUSH
35427: LD_INT 16
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: PPUSH
35445: CALL_OW 69
35449: PUSH
35450: LD_VAR 0 8
35454: PPUSH
35455: CALL_OW 313
35459: PPUSH
35460: LD_INT 3
35462: PUSH
35463: LD_INT 60
35465: PUSH
35466: EMPTY
35467: LIST
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: LD_INT 25
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 25
35488: PUSH
35489: LD_INT 16
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PPUSH
35505: CALL_OW 72
35509: UNION
35510: ST_TO_ADDR
// if tmp then
35511: LD_VAR 0 4
35515: IFFALSE 35595
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35517: LD_ADDR_VAR 0 4
35521: PUSH
35522: LD_VAR 0 4
35526: PPUSH
35527: LD_INT 3
35529: PPUSH
35530: CALL 78725 0 2
35534: ST_TO_ADDR
// for j in tmp do
35535: LD_ADDR_VAR 0 2
35539: PUSH
35540: LD_VAR 0 4
35544: PUSH
35545: FOR_IN
35546: IFFALSE 35589
// begin if IsInUnit ( j ) then
35548: LD_VAR 0 2
35552: PPUSH
35553: CALL_OW 310
35557: IFFALSE 35568
// ComExit ( j ) ;
35559: LD_VAR 0 2
35563: PPUSH
35564: CALL 78808 0 1
// AddComCollect ( j , x , y ) ;
35568: LD_VAR 0 2
35572: PPUSH
35573: LD_VAR 0 6
35577: PPUSH
35578: LD_VAR 0 7
35582: PPUSH
35583: CALL_OW 177
// end ;
35587: GO 35545
35589: POP
35590: POP
// exit ;
35591: POP
35592: POP
35593: GO 35822
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35595: LD_ADDR_VAR 0 4
35599: PUSH
35600: LD_INT 22
35602: PUSH
35603: LD_VAR 0 5
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 91
35614: PUSH
35615: LD_VAR 0 8
35619: PUSH
35620: LD_INT 8
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: LD_INT 34
35633: PUSH
35634: LD_INT 12
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 34
35643: PUSH
35644: LD_INT 51
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 34
35653: PUSH
35654: LD_INT 32
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 34
35663: PUSH
35664: LD_INT 89
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: PPUSH
35683: CALL_OW 69
35687: ST_TO_ADDR
// if tmp then
35688: LD_VAR 0 4
35692: IFFALSE 35818
// begin for j in tmp do
35694: LD_ADDR_VAR 0 2
35698: PUSH
35699: LD_VAR 0 4
35703: PUSH
35704: FOR_IN
35705: IFFALSE 35816
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35707: LD_VAR 0 2
35711: PPUSH
35712: CALL_OW 262
35716: PUSH
35717: LD_INT 3
35719: EQUAL
35720: PUSH
35721: LD_VAR 0 2
35725: PPUSH
35726: CALL_OW 261
35730: PUSH
35731: LD_INT 20
35733: GREATER
35734: OR
35735: PUSH
35736: LD_VAR 0 2
35740: PPUSH
35741: CALL_OW 314
35745: NOT
35746: AND
35747: PUSH
35748: LD_VAR 0 2
35752: PPUSH
35753: CALL_OW 263
35757: PUSH
35758: LD_INT 1
35760: NONEQUAL
35761: PUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: CALL_OW 311
35771: OR
35772: AND
35773: IFFALSE 35814
// begin ComCollect ( j , x , y ) ;
35775: LD_VAR 0 2
35779: PPUSH
35780: LD_VAR 0 6
35784: PPUSH
35785: LD_VAR 0 7
35789: PPUSH
35790: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35794: LD_VAR 0 2
35798: PPUSH
35799: LD_VAR 0 8
35803: PPUSH
35804: CALL_OW 172
// exit ;
35808: POP
35809: POP
35810: POP
35811: POP
35812: GO 35822
// end ;
35814: GO 35704
35816: POP
35817: POP
// end ; end ;
35818: GO 35193
35820: POP
35821: POP
// end ; end_of_file
35822: PPOPN 9
35824: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35825: LD_INT 0
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35831: LD_VAR 0 1
35835: PPUSH
35836: CALL_OW 264
35840: PUSH
35841: LD_INT 91
35843: EQUAL
35844: IFFALSE 35916
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35846: LD_INT 68
35848: PPUSH
35849: LD_VAR 0 1
35853: PPUSH
35854: CALL_OW 255
35858: PPUSH
35859: CALL_OW 321
35863: PUSH
35864: LD_INT 2
35866: EQUAL
35867: IFFALSE 35879
// eff := 70 else
35869: LD_ADDR_VAR 0 4
35873: PUSH
35874: LD_INT 70
35876: ST_TO_ADDR
35877: GO 35887
// eff := 30 ;
35879: LD_ADDR_VAR 0 4
35883: PUSH
35884: LD_INT 30
35886: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 250
35896: PPUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 251
35906: PPUSH
35907: LD_VAR 0 4
35911: PPUSH
35912: CALL_OW 495
// end ; end ;
35916: LD_VAR 0 2
35920: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35921: LD_INT 0
35923: PPUSH
// end ;
35924: LD_VAR 0 4
35928: RET
// export function SOS_Command ( cmd ) ; begin
35929: LD_INT 0
35931: PPUSH
// end ;
35932: LD_VAR 0 2
35936: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35937: LD_INT 0
35939: PPUSH
// end ;
35940: LD_VAR 0 6
35944: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35945: LD_INT 0
35947: PPUSH
35948: PPUSH
// if not vehicle or not factory then
35949: LD_VAR 0 1
35953: NOT
35954: PUSH
35955: LD_VAR 0 2
35959: NOT
35960: OR
35961: IFFALSE 35965
// exit ;
35963: GO 36196
// if factoryWaypoints >= factory then
35965: LD_EXP 110
35969: PUSH
35970: LD_VAR 0 2
35974: GREATEREQUAL
35975: IFFALSE 36196
// if factoryWaypoints [ factory ] then
35977: LD_EXP 110
35981: PUSH
35982: LD_VAR 0 2
35986: ARRAY
35987: IFFALSE 36196
// begin if GetControl ( vehicle ) = control_manual then
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 263
35998: PUSH
35999: LD_INT 1
36001: EQUAL
36002: IFFALSE 36083
// begin driver := IsDrivenBy ( vehicle ) ;
36004: LD_ADDR_VAR 0 4
36008: PUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 311
36018: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36019: LD_VAR 0 4
36023: PPUSH
36024: LD_EXP 110
36028: PUSH
36029: LD_VAR 0 2
36033: ARRAY
36034: PUSH
36035: LD_INT 3
36037: ARRAY
36038: PPUSH
36039: LD_EXP 110
36043: PUSH
36044: LD_VAR 0 2
36048: ARRAY
36049: PUSH
36050: LD_INT 4
36052: ARRAY
36053: PPUSH
36054: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36058: LD_VAR 0 4
36062: PPUSH
36063: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36067: LD_VAR 0 4
36071: PPUSH
36072: LD_VAR 0 2
36076: PPUSH
36077: CALL_OW 180
// end else
36081: GO 36196
// if GetControl ( vehicle ) = control_remote then
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL_OW 263
36092: PUSH
36093: LD_INT 2
36095: EQUAL
36096: IFFALSE 36157
// begin wait ( 0 0$2 ) ;
36098: LD_INT 70
36100: PPUSH
36101: CALL_OW 67
// if Connect ( vehicle ) then
36105: LD_VAR 0 1
36109: PPUSH
36110: CALL 49027 0 1
36114: IFFALSE 36155
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36116: LD_VAR 0 1
36120: PPUSH
36121: LD_EXP 110
36125: PUSH
36126: LD_VAR 0 2
36130: ARRAY
36131: PUSH
36132: LD_INT 3
36134: ARRAY
36135: PPUSH
36136: LD_EXP 110
36140: PUSH
36141: LD_VAR 0 2
36145: ARRAY
36146: PUSH
36147: LD_INT 4
36149: ARRAY
36150: PPUSH
36151: CALL_OW 171
// end else
36155: GO 36196
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36157: LD_VAR 0 1
36161: PPUSH
36162: LD_EXP 110
36166: PUSH
36167: LD_VAR 0 2
36171: ARRAY
36172: PUSH
36173: LD_INT 3
36175: ARRAY
36176: PPUSH
36177: LD_EXP 110
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 4
36190: ARRAY
36191: PPUSH
36192: CALL_OW 171
// end ; end ;
36196: LD_VAR 0 3
36200: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36201: LD_INT 0
36203: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36204: LD_VAR 0 1
36208: PUSH
36209: LD_INT 250
36211: EQUAL
36212: PUSH
36213: LD_VAR 0 2
36217: PPUSH
36218: CALL_OW 264
36222: PUSH
36223: LD_INT 81
36225: EQUAL
36226: AND
36227: IFFALSE 36248
// MinerPlaceMine ( unit , x , y ) ;
36229: LD_VAR 0 2
36233: PPUSH
36234: LD_VAR 0 4
36238: PPUSH
36239: LD_VAR 0 5
36243: PPUSH
36244: CALL 39238 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36248: LD_VAR 0 1
36252: PUSH
36253: LD_INT 251
36255: EQUAL
36256: PUSH
36257: LD_VAR 0 2
36261: PPUSH
36262: CALL_OW 264
36266: PUSH
36267: LD_INT 81
36269: EQUAL
36270: AND
36271: IFFALSE 36292
// MinerDetonateMine ( unit , x , y ) ;
36273: LD_VAR 0 2
36277: PPUSH
36278: LD_VAR 0 4
36282: PPUSH
36283: LD_VAR 0 5
36287: PPUSH
36288: CALL 39513 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36292: LD_VAR 0 1
36296: PUSH
36297: LD_INT 252
36299: EQUAL
36300: PUSH
36301: LD_VAR 0 2
36305: PPUSH
36306: CALL_OW 264
36310: PUSH
36311: LD_INT 81
36313: EQUAL
36314: AND
36315: IFFALSE 36336
// MinerCreateMinefield ( unit , x , y ) ;
36317: LD_VAR 0 2
36321: PPUSH
36322: LD_VAR 0 4
36326: PPUSH
36327: LD_VAR 0 5
36331: PPUSH
36332: CALL 39930 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36336: LD_VAR 0 1
36340: PUSH
36341: LD_INT 253
36343: EQUAL
36344: PUSH
36345: LD_VAR 0 2
36349: PPUSH
36350: CALL_OW 257
36354: PUSH
36355: LD_INT 5
36357: EQUAL
36358: AND
36359: IFFALSE 36380
// ComBinocular ( unit , x , y ) ;
36361: LD_VAR 0 2
36365: PPUSH
36366: LD_VAR 0 4
36370: PPUSH
36371: LD_VAR 0 5
36375: PPUSH
36376: CALL 40299 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36380: LD_VAR 0 1
36384: PUSH
36385: LD_INT 254
36387: EQUAL
36388: PUSH
36389: LD_VAR 0 2
36393: PPUSH
36394: CALL_OW 264
36398: PUSH
36399: LD_INT 99
36401: EQUAL
36402: AND
36403: PUSH
36404: LD_VAR 0 3
36408: PPUSH
36409: CALL_OW 263
36413: PUSH
36414: LD_INT 3
36416: EQUAL
36417: AND
36418: IFFALSE 36434
// HackDestroyVehicle ( unit , selectedUnit ) ;
36420: LD_VAR 0 2
36424: PPUSH
36425: LD_VAR 0 3
36429: PPUSH
36430: CALL 38602 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36434: LD_VAR 0 1
36438: PUSH
36439: LD_INT 255
36441: EQUAL
36442: PUSH
36443: LD_VAR 0 2
36447: PPUSH
36448: CALL_OW 264
36452: PUSH
36453: LD_INT 14
36455: PUSH
36456: LD_INT 53
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: IN
36463: AND
36464: PUSH
36465: LD_VAR 0 4
36469: PPUSH
36470: LD_VAR 0 5
36474: PPUSH
36475: CALL_OW 488
36479: AND
36480: IFFALSE 36504
// CutTreeXYR ( unit , x , y , 12 ) ;
36482: LD_VAR 0 2
36486: PPUSH
36487: LD_VAR 0 4
36491: PPUSH
36492: LD_VAR 0 5
36496: PPUSH
36497: LD_INT 12
36499: PPUSH
36500: CALL 36599 0 4
// if cmd = 256 then
36504: LD_VAR 0 1
36508: PUSH
36509: LD_INT 256
36511: EQUAL
36512: IFFALSE 36533
// SetFactoryWaypoint ( unit , x , y ) ;
36514: LD_VAR 0 2
36518: PPUSH
36519: LD_VAR 0 4
36523: PPUSH
36524: LD_VAR 0 5
36528: PPUSH
36529: CALL 34514 0 3
// if cmd = 257 then
36533: LD_VAR 0 1
36537: PUSH
36538: LD_INT 257
36540: EQUAL
36541: IFFALSE 36562
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36543: LD_VAR 0 2
36547: PPUSH
36548: LD_VAR 0 4
36552: PPUSH
36553: LD_VAR 0 5
36557: PPUSH
36558: CALL 34876 0 3
// if cmd = 258 then
36562: LD_VAR 0 1
36566: PUSH
36567: LD_INT 258
36569: EQUAL
36570: IFFALSE 36594
// BurnTreeXYR ( unit , x , y , 8 ) ;
36572: LD_VAR 0 2
36576: PPUSH
36577: LD_VAR 0 4
36581: PPUSH
36582: LD_VAR 0 5
36586: PPUSH
36587: LD_INT 8
36589: PPUSH
36590: CALL 36993 0 4
// end ;
36594: LD_VAR 0 6
36598: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36599: LD_INT 0
36601: PPUSH
36602: PPUSH
36603: PPUSH
36604: PPUSH
36605: PPUSH
36606: PPUSH
36607: PPUSH
36608: PPUSH
36609: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 302
36619: NOT
36620: PUSH
36621: LD_VAR 0 2
36625: PPUSH
36626: LD_VAR 0 3
36630: PPUSH
36631: CALL_OW 488
36635: NOT
36636: OR
36637: PUSH
36638: LD_VAR 0 4
36642: NOT
36643: OR
36644: IFFALSE 36648
// exit ;
36646: GO 36988
// list := [ ] ;
36648: LD_ADDR_VAR 0 13
36652: PUSH
36653: EMPTY
36654: ST_TO_ADDR
// if x - r < 0 then
36655: LD_VAR 0 2
36659: PUSH
36660: LD_VAR 0 4
36664: MINUS
36665: PUSH
36666: LD_INT 0
36668: LESS
36669: IFFALSE 36681
// min_x := 0 else
36671: LD_ADDR_VAR 0 7
36675: PUSH
36676: LD_INT 0
36678: ST_TO_ADDR
36679: GO 36697
// min_x := x - r ;
36681: LD_ADDR_VAR 0 7
36685: PUSH
36686: LD_VAR 0 2
36690: PUSH
36691: LD_VAR 0 4
36695: MINUS
36696: ST_TO_ADDR
// if y - r < 0 then
36697: LD_VAR 0 3
36701: PUSH
36702: LD_VAR 0 4
36706: MINUS
36707: PUSH
36708: LD_INT 0
36710: LESS
36711: IFFALSE 36723
// min_y := 0 else
36713: LD_ADDR_VAR 0 8
36717: PUSH
36718: LD_INT 0
36720: ST_TO_ADDR
36721: GO 36739
// min_y := y - r ;
36723: LD_ADDR_VAR 0 8
36727: PUSH
36728: LD_VAR 0 3
36732: PUSH
36733: LD_VAR 0 4
36737: MINUS
36738: ST_TO_ADDR
// max_x := x + r ;
36739: LD_ADDR_VAR 0 9
36743: PUSH
36744: LD_VAR 0 2
36748: PUSH
36749: LD_VAR 0 4
36753: PLUS
36754: ST_TO_ADDR
// max_y := y + r ;
36755: LD_ADDR_VAR 0 10
36759: PUSH
36760: LD_VAR 0 3
36764: PUSH
36765: LD_VAR 0 4
36769: PLUS
36770: ST_TO_ADDR
// for _x = min_x to max_x do
36771: LD_ADDR_VAR 0 11
36775: PUSH
36776: DOUBLE
36777: LD_VAR 0 7
36781: DEC
36782: ST_TO_ADDR
36783: LD_VAR 0 9
36787: PUSH
36788: FOR_TO
36789: IFFALSE 36906
// for _y = min_y to max_y do
36791: LD_ADDR_VAR 0 12
36795: PUSH
36796: DOUBLE
36797: LD_VAR 0 8
36801: DEC
36802: ST_TO_ADDR
36803: LD_VAR 0 10
36807: PUSH
36808: FOR_TO
36809: IFFALSE 36902
// begin if not ValidHex ( _x , _y ) then
36811: LD_VAR 0 11
36815: PPUSH
36816: LD_VAR 0 12
36820: PPUSH
36821: CALL_OW 488
36825: NOT
36826: IFFALSE 36830
// continue ;
36828: GO 36808
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36830: LD_VAR 0 11
36834: PPUSH
36835: LD_VAR 0 12
36839: PPUSH
36840: CALL_OW 351
36844: PUSH
36845: LD_VAR 0 11
36849: PPUSH
36850: LD_VAR 0 12
36854: PPUSH
36855: CALL_OW 554
36859: AND
36860: IFFALSE 36900
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36862: LD_ADDR_VAR 0 13
36866: PUSH
36867: LD_VAR 0 13
36871: PPUSH
36872: LD_VAR 0 13
36876: PUSH
36877: LD_INT 1
36879: PLUS
36880: PPUSH
36881: LD_VAR 0 11
36885: PUSH
36886: LD_VAR 0 12
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PPUSH
36895: CALL_OW 2
36899: ST_TO_ADDR
// end ;
36900: GO 36808
36902: POP
36903: POP
36904: GO 36788
36906: POP
36907: POP
// if not list then
36908: LD_VAR 0 13
36912: NOT
36913: IFFALSE 36917
// exit ;
36915: GO 36988
// for i in list do
36917: LD_ADDR_VAR 0 6
36921: PUSH
36922: LD_VAR 0 13
36926: PUSH
36927: FOR_IN
36928: IFFALSE 36986
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36930: LD_VAR 0 1
36934: PPUSH
36935: LD_STRING M
36937: PUSH
36938: LD_VAR 0 6
36942: PUSH
36943: LD_INT 1
36945: ARRAY
36946: PUSH
36947: LD_VAR 0 6
36951: PUSH
36952: LD_INT 2
36954: ARRAY
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: PPUSH
36980: CALL_OW 447
36984: GO 36927
36986: POP
36987: POP
// end ;
36988: LD_VAR 0 5
36992: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36993: LD_INT 0
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
37003: PPUSH
37004: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37005: LD_VAR 0 1
37009: PPUSH
37010: CALL_OW 302
37014: NOT
37015: PUSH
37016: LD_VAR 0 2
37020: PPUSH
37021: LD_VAR 0 3
37025: PPUSH
37026: CALL_OW 488
37030: NOT
37031: OR
37032: PUSH
37033: LD_VAR 0 4
37037: NOT
37038: OR
37039: IFFALSE 37043
// exit ;
37041: GO 37556
// list := [ ] ;
37043: LD_ADDR_VAR 0 13
37047: PUSH
37048: EMPTY
37049: ST_TO_ADDR
// if x - r < 0 then
37050: LD_VAR 0 2
37054: PUSH
37055: LD_VAR 0 4
37059: MINUS
37060: PUSH
37061: LD_INT 0
37063: LESS
37064: IFFALSE 37076
// min_x := 0 else
37066: LD_ADDR_VAR 0 7
37070: PUSH
37071: LD_INT 0
37073: ST_TO_ADDR
37074: GO 37092
// min_x := x - r ;
37076: LD_ADDR_VAR 0 7
37080: PUSH
37081: LD_VAR 0 2
37085: PUSH
37086: LD_VAR 0 4
37090: MINUS
37091: ST_TO_ADDR
// if y - r < 0 then
37092: LD_VAR 0 3
37096: PUSH
37097: LD_VAR 0 4
37101: MINUS
37102: PUSH
37103: LD_INT 0
37105: LESS
37106: IFFALSE 37118
// min_y := 0 else
37108: LD_ADDR_VAR 0 8
37112: PUSH
37113: LD_INT 0
37115: ST_TO_ADDR
37116: GO 37134
// min_y := y - r ;
37118: LD_ADDR_VAR 0 8
37122: PUSH
37123: LD_VAR 0 3
37127: PUSH
37128: LD_VAR 0 4
37132: MINUS
37133: ST_TO_ADDR
// max_x := x + r ;
37134: LD_ADDR_VAR 0 9
37138: PUSH
37139: LD_VAR 0 2
37143: PUSH
37144: LD_VAR 0 4
37148: PLUS
37149: ST_TO_ADDR
// max_y := y + r ;
37150: LD_ADDR_VAR 0 10
37154: PUSH
37155: LD_VAR 0 3
37159: PUSH
37160: LD_VAR 0 4
37164: PLUS
37165: ST_TO_ADDR
// for _x = min_x to max_x do
37166: LD_ADDR_VAR 0 11
37170: PUSH
37171: DOUBLE
37172: LD_VAR 0 7
37176: DEC
37177: ST_TO_ADDR
37178: LD_VAR 0 9
37182: PUSH
37183: FOR_TO
37184: IFFALSE 37301
// for _y = min_y to max_y do
37186: LD_ADDR_VAR 0 12
37190: PUSH
37191: DOUBLE
37192: LD_VAR 0 8
37196: DEC
37197: ST_TO_ADDR
37198: LD_VAR 0 10
37202: PUSH
37203: FOR_TO
37204: IFFALSE 37297
// begin if not ValidHex ( _x , _y ) then
37206: LD_VAR 0 11
37210: PPUSH
37211: LD_VAR 0 12
37215: PPUSH
37216: CALL_OW 488
37220: NOT
37221: IFFALSE 37225
// continue ;
37223: GO 37203
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37225: LD_VAR 0 11
37229: PPUSH
37230: LD_VAR 0 12
37234: PPUSH
37235: CALL_OW 351
37239: PUSH
37240: LD_VAR 0 11
37244: PPUSH
37245: LD_VAR 0 12
37249: PPUSH
37250: CALL_OW 554
37254: AND
37255: IFFALSE 37295
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37257: LD_ADDR_VAR 0 13
37261: PUSH
37262: LD_VAR 0 13
37266: PPUSH
37267: LD_VAR 0 13
37271: PUSH
37272: LD_INT 1
37274: PLUS
37275: PPUSH
37276: LD_VAR 0 11
37280: PUSH
37281: LD_VAR 0 12
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 2
37294: ST_TO_ADDR
// end ;
37295: GO 37203
37297: POP
37298: POP
37299: GO 37183
37301: POP
37302: POP
// if not list then
37303: LD_VAR 0 13
37307: NOT
37308: IFFALSE 37312
// exit ;
37310: GO 37556
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37312: LD_ADDR_VAR 0 13
37316: PUSH
37317: LD_VAR 0 1
37321: PPUSH
37322: LD_VAR 0 13
37326: PPUSH
37327: LD_INT 1
37329: PPUSH
37330: LD_INT 1
37332: PPUSH
37333: CALL 46169 0 4
37337: ST_TO_ADDR
// ComStop ( flame ) ;
37338: LD_VAR 0 1
37342: PPUSH
37343: CALL_OW 141
// for i in list do
37347: LD_ADDR_VAR 0 6
37351: PUSH
37352: LD_VAR 0 13
37356: PUSH
37357: FOR_IN
37358: IFFALSE 37389
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37360: LD_VAR 0 1
37364: PPUSH
37365: LD_VAR 0 6
37369: PUSH
37370: LD_INT 1
37372: ARRAY
37373: PPUSH
37374: LD_VAR 0 6
37378: PUSH
37379: LD_INT 2
37381: ARRAY
37382: PPUSH
37383: CALL_OW 176
37387: GO 37357
37389: POP
37390: POP
// repeat wait ( 0 0$1 ) ;
37391: LD_INT 35
37393: PPUSH
37394: CALL_OW 67
// task := GetTaskList ( flame ) ;
37398: LD_ADDR_VAR 0 14
37402: PUSH
37403: LD_VAR 0 1
37407: PPUSH
37408: CALL_OW 437
37412: ST_TO_ADDR
// if not task then
37413: LD_VAR 0 14
37417: NOT
37418: IFFALSE 37422
// exit ;
37420: GO 37556
// if task [ 1 ] [ 1 ] <> | then
37422: LD_VAR 0 14
37426: PUSH
37427: LD_INT 1
37429: ARRAY
37430: PUSH
37431: LD_INT 1
37433: ARRAY
37434: PUSH
37435: LD_STRING |
37437: NONEQUAL
37438: IFFALSE 37442
// exit ;
37440: GO 37556
// _x := task [ 1 ] [ 2 ] ;
37442: LD_ADDR_VAR 0 11
37446: PUSH
37447: LD_VAR 0 14
37451: PUSH
37452: LD_INT 1
37454: ARRAY
37455: PUSH
37456: LD_INT 2
37458: ARRAY
37459: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37460: LD_ADDR_VAR 0 12
37464: PUSH
37465: LD_VAR 0 14
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PUSH
37474: LD_INT 3
37476: ARRAY
37477: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37478: LD_VAR 0 11
37482: PPUSH
37483: LD_VAR 0 12
37487: PPUSH
37488: CALL_OW 351
37492: NOT
37493: PUSH
37494: LD_VAR 0 11
37498: PPUSH
37499: LD_VAR 0 12
37503: PPUSH
37504: CALL_OW 554
37508: NOT
37509: OR
37510: IFFALSE 37544
// begin task := Delete ( task , 1 ) ;
37512: LD_ADDR_VAR 0 14
37516: PUSH
37517: LD_VAR 0 14
37521: PPUSH
37522: LD_INT 1
37524: PPUSH
37525: CALL_OW 3
37529: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37530: LD_VAR 0 1
37534: PPUSH
37535: LD_VAR 0 14
37539: PPUSH
37540: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37544: LD_VAR 0 1
37548: PPUSH
37549: CALL_OW 314
37553: NOT
37554: IFFALSE 37391
// end ;
37556: LD_VAR 0 5
37560: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37561: LD_EXP 113
37565: NOT
37566: IFFALSE 37616
37568: GO 37570
37570: DISABLE
// begin initHack := true ;
37571: LD_ADDR_EXP 113
37575: PUSH
37576: LD_INT 1
37578: ST_TO_ADDR
// hackTanks := [ ] ;
37579: LD_ADDR_EXP 114
37583: PUSH
37584: EMPTY
37585: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37586: LD_ADDR_EXP 115
37590: PUSH
37591: EMPTY
37592: ST_TO_ADDR
// hackLimit := 3 ;
37593: LD_ADDR_EXP 116
37597: PUSH
37598: LD_INT 3
37600: ST_TO_ADDR
// hackDist := 12 ;
37601: LD_ADDR_EXP 117
37605: PUSH
37606: LD_INT 12
37608: ST_TO_ADDR
// hackCounter := [ ] ;
37609: LD_ADDR_EXP 118
37613: PUSH
37614: EMPTY
37615: ST_TO_ADDR
// end ;
37616: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37617: LD_EXP 113
37621: PUSH
37622: LD_INT 34
37624: PUSH
37625: LD_INT 99
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PPUSH
37632: CALL_OW 69
37636: AND
37637: IFFALSE 37890
37639: GO 37641
37641: DISABLE
37642: LD_INT 0
37644: PPUSH
37645: PPUSH
// begin enable ;
37646: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37647: LD_ADDR_VAR 0 1
37651: PUSH
37652: LD_INT 34
37654: PUSH
37655: LD_INT 99
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PPUSH
37662: CALL_OW 69
37666: PUSH
37667: FOR_IN
37668: IFFALSE 37888
// begin if not i in hackTanks then
37670: LD_VAR 0 1
37674: PUSH
37675: LD_EXP 114
37679: IN
37680: NOT
37681: IFFALSE 37764
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37683: LD_ADDR_EXP 114
37687: PUSH
37688: LD_EXP 114
37692: PPUSH
37693: LD_EXP 114
37697: PUSH
37698: LD_INT 1
37700: PLUS
37701: PPUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 1
37711: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37712: LD_ADDR_EXP 115
37716: PUSH
37717: LD_EXP 115
37721: PPUSH
37722: LD_EXP 115
37726: PUSH
37727: LD_INT 1
37729: PLUS
37730: PPUSH
37731: EMPTY
37732: PPUSH
37733: CALL_OW 1
37737: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37738: LD_ADDR_EXP 118
37742: PUSH
37743: LD_EXP 118
37747: PPUSH
37748: LD_EXP 118
37752: PUSH
37753: LD_INT 1
37755: PLUS
37756: PPUSH
37757: EMPTY
37758: PPUSH
37759: CALL_OW 1
37763: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37764: LD_VAR 0 1
37768: PPUSH
37769: CALL_OW 302
37773: NOT
37774: IFFALSE 37787
// begin HackUnlinkAll ( i ) ;
37776: LD_VAR 0 1
37780: PPUSH
37781: CALL 37893 0 1
// continue ;
37785: GO 37667
// end ; HackCheckCapturedStatus ( i ) ;
37787: LD_VAR 0 1
37791: PPUSH
37792: CALL 38336 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37796: LD_ADDR_VAR 0 2
37800: PUSH
37801: LD_INT 81
37803: PUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 255
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 33
37820: PUSH
37821: LD_INT 3
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 91
37830: PUSH
37831: LD_VAR 0 1
37835: PUSH
37836: LD_EXP 117
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 50
37848: PUSH
37849: EMPTY
37850: LIST
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: PPUSH
37858: CALL_OW 69
37862: ST_TO_ADDR
// if not tmp then
37863: LD_VAR 0 2
37867: NOT
37868: IFFALSE 37872
// continue ;
37870: GO 37667
// HackLink ( i , tmp ) ;
37872: LD_VAR 0 1
37876: PPUSH
37877: LD_VAR 0 2
37881: PPUSH
37882: CALL 38029 0 2
// end ;
37886: GO 37667
37888: POP
37889: POP
// end ;
37890: PPOPN 2
37892: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37893: LD_INT 0
37895: PPUSH
37896: PPUSH
37897: PPUSH
// if not hack in hackTanks then
37898: LD_VAR 0 1
37902: PUSH
37903: LD_EXP 114
37907: IN
37908: NOT
37909: IFFALSE 37913
// exit ;
37911: GO 38024
// index := GetElementIndex ( hackTanks , hack ) ;
37913: LD_ADDR_VAR 0 4
37917: PUSH
37918: LD_EXP 114
37922: PPUSH
37923: LD_VAR 0 1
37927: PPUSH
37928: CALL 45466 0 2
37932: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37933: LD_EXP 115
37937: PUSH
37938: LD_VAR 0 4
37942: ARRAY
37943: IFFALSE 38024
// begin for i in hackTanksCaptured [ index ] do
37945: LD_ADDR_VAR 0 3
37949: PUSH
37950: LD_EXP 115
37954: PUSH
37955: LD_VAR 0 4
37959: ARRAY
37960: PUSH
37961: FOR_IN
37962: IFFALSE 37988
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37964: LD_VAR 0 3
37968: PUSH
37969: LD_INT 1
37971: ARRAY
37972: PPUSH
37973: LD_VAR 0 3
37977: PUSH
37978: LD_INT 2
37980: ARRAY
37981: PPUSH
37982: CALL_OW 235
37986: GO 37961
37988: POP
37989: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37990: LD_ADDR_EXP 115
37994: PUSH
37995: LD_EXP 115
37999: PPUSH
38000: LD_VAR 0 4
38004: PPUSH
38005: EMPTY
38006: PPUSH
38007: CALL_OW 1
38011: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38012: LD_VAR 0 1
38016: PPUSH
38017: LD_INT 0
38019: PPUSH
38020: CALL_OW 505
// end ; end ;
38024: LD_VAR 0 2
38028: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38029: LD_INT 0
38031: PPUSH
38032: PPUSH
38033: PPUSH
// if not hack in hackTanks or not vehicles then
38034: LD_VAR 0 1
38038: PUSH
38039: LD_EXP 114
38043: IN
38044: NOT
38045: PUSH
38046: LD_VAR 0 2
38050: NOT
38051: OR
38052: IFFALSE 38056
// exit ;
38054: GO 38331
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38056: LD_ADDR_VAR 0 2
38060: PUSH
38061: LD_VAR 0 1
38065: PPUSH
38066: LD_VAR 0 2
38070: PPUSH
38071: LD_INT 1
38073: PPUSH
38074: LD_INT 1
38076: PPUSH
38077: CALL 46116 0 4
38081: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38082: LD_ADDR_VAR 0 5
38086: PUSH
38087: LD_EXP 114
38091: PPUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL 45466 0 2
38101: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38102: LD_EXP 115
38106: PUSH
38107: LD_VAR 0 5
38111: ARRAY
38112: PUSH
38113: LD_EXP 116
38117: LESS
38118: IFFALSE 38307
// begin for i := 1 to vehicles do
38120: LD_ADDR_VAR 0 4
38124: PUSH
38125: DOUBLE
38126: LD_INT 1
38128: DEC
38129: ST_TO_ADDR
38130: LD_VAR 0 2
38134: PUSH
38135: FOR_TO
38136: IFFALSE 38305
// begin if hackTanksCaptured [ index ] = hackLimit then
38138: LD_EXP 115
38142: PUSH
38143: LD_VAR 0 5
38147: ARRAY
38148: PUSH
38149: LD_EXP 116
38153: EQUAL
38154: IFFALSE 38158
// break ;
38156: GO 38305
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38158: LD_ADDR_EXP 118
38162: PUSH
38163: LD_EXP 118
38167: PPUSH
38168: LD_VAR 0 5
38172: PPUSH
38173: LD_EXP 118
38177: PUSH
38178: LD_VAR 0 5
38182: ARRAY
38183: PUSH
38184: LD_INT 1
38186: PLUS
38187: PPUSH
38188: CALL_OW 1
38192: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38193: LD_ADDR_EXP 115
38197: PUSH
38198: LD_EXP 115
38202: PPUSH
38203: LD_VAR 0 5
38207: PUSH
38208: LD_EXP 115
38212: PUSH
38213: LD_VAR 0 5
38217: ARRAY
38218: PUSH
38219: LD_INT 1
38221: PLUS
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PPUSH
38227: LD_VAR 0 2
38231: PUSH
38232: LD_VAR 0 4
38236: ARRAY
38237: PUSH
38238: LD_VAR 0 2
38242: PUSH
38243: LD_VAR 0 4
38247: ARRAY
38248: PPUSH
38249: CALL_OW 255
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PPUSH
38258: CALL 45681 0 3
38262: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38263: LD_VAR 0 2
38267: PUSH
38268: LD_VAR 0 4
38272: ARRAY
38273: PPUSH
38274: LD_VAR 0 1
38278: PPUSH
38279: CALL_OW 255
38283: PPUSH
38284: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38288: LD_VAR 0 2
38292: PUSH
38293: LD_VAR 0 4
38297: ARRAY
38298: PPUSH
38299: CALL_OW 141
// end ;
38303: GO 38135
38305: POP
38306: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38307: LD_VAR 0 1
38311: PPUSH
38312: LD_EXP 115
38316: PUSH
38317: LD_VAR 0 5
38321: ARRAY
38322: PUSH
38323: LD_INT 0
38325: PLUS
38326: PPUSH
38327: CALL_OW 505
// end ;
38331: LD_VAR 0 3
38335: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38336: LD_INT 0
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
// if not hack in hackTanks then
38342: LD_VAR 0 1
38346: PUSH
38347: LD_EXP 114
38351: IN
38352: NOT
38353: IFFALSE 38357
// exit ;
38355: GO 38597
// index := GetElementIndex ( hackTanks , hack ) ;
38357: LD_ADDR_VAR 0 4
38361: PUSH
38362: LD_EXP 114
38366: PPUSH
38367: LD_VAR 0 1
38371: PPUSH
38372: CALL 45466 0 2
38376: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38377: LD_ADDR_VAR 0 3
38381: PUSH
38382: DOUBLE
38383: LD_EXP 115
38387: PUSH
38388: LD_VAR 0 4
38392: ARRAY
38393: INC
38394: ST_TO_ADDR
38395: LD_INT 1
38397: PUSH
38398: FOR_DOWNTO
38399: IFFALSE 38571
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38401: LD_ADDR_VAR 0 5
38405: PUSH
38406: LD_EXP 115
38410: PUSH
38411: LD_VAR 0 4
38415: ARRAY
38416: PUSH
38417: LD_VAR 0 3
38421: ARRAY
38422: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38423: LD_VAR 0 5
38427: PUSH
38428: LD_INT 1
38430: ARRAY
38431: PPUSH
38432: CALL_OW 302
38436: NOT
38437: PUSH
38438: LD_VAR 0 5
38442: PUSH
38443: LD_INT 1
38445: ARRAY
38446: PPUSH
38447: CALL_OW 255
38451: PUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 255
38461: NONEQUAL
38462: OR
38463: IFFALSE 38569
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38465: LD_VAR 0 5
38469: PUSH
38470: LD_INT 1
38472: ARRAY
38473: PPUSH
38474: CALL_OW 305
38478: PUSH
38479: LD_VAR 0 5
38483: PUSH
38484: LD_INT 1
38486: ARRAY
38487: PPUSH
38488: CALL_OW 255
38492: PUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 255
38502: EQUAL
38503: AND
38504: IFFALSE 38528
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38506: LD_VAR 0 5
38510: PUSH
38511: LD_INT 1
38513: ARRAY
38514: PPUSH
38515: LD_VAR 0 5
38519: PUSH
38520: LD_INT 2
38522: ARRAY
38523: PPUSH
38524: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38528: LD_ADDR_EXP 115
38532: PUSH
38533: LD_EXP 115
38537: PPUSH
38538: LD_VAR 0 4
38542: PPUSH
38543: LD_EXP 115
38547: PUSH
38548: LD_VAR 0 4
38552: ARRAY
38553: PPUSH
38554: LD_VAR 0 3
38558: PPUSH
38559: CALL_OW 3
38563: PPUSH
38564: CALL_OW 1
38568: ST_TO_ADDR
// end ; end ;
38569: GO 38398
38571: POP
38572: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38573: LD_VAR 0 1
38577: PPUSH
38578: LD_EXP 115
38582: PUSH
38583: LD_VAR 0 4
38587: ARRAY
38588: PUSH
38589: LD_INT 0
38591: PLUS
38592: PPUSH
38593: CALL_OW 505
// end ;
38597: LD_VAR 0 2
38601: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38602: LD_INT 0
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
// if not hack in hackTanks then
38608: LD_VAR 0 1
38612: PUSH
38613: LD_EXP 114
38617: IN
38618: NOT
38619: IFFALSE 38623
// exit ;
38621: GO 38708
// index := GetElementIndex ( hackTanks , hack ) ;
38623: LD_ADDR_VAR 0 5
38627: PUSH
38628: LD_EXP 114
38632: PPUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL 45466 0 2
38642: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38643: LD_ADDR_VAR 0 4
38647: PUSH
38648: DOUBLE
38649: LD_INT 1
38651: DEC
38652: ST_TO_ADDR
38653: LD_EXP 115
38657: PUSH
38658: LD_VAR 0 5
38662: ARRAY
38663: PUSH
38664: FOR_TO
38665: IFFALSE 38706
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38667: LD_EXP 115
38671: PUSH
38672: LD_VAR 0 5
38676: ARRAY
38677: PUSH
38678: LD_VAR 0 4
38682: ARRAY
38683: PUSH
38684: LD_INT 1
38686: ARRAY
38687: PUSH
38688: LD_VAR 0 2
38692: EQUAL
38693: IFFALSE 38704
// KillUnit ( vehicle ) ;
38695: LD_VAR 0 2
38699: PPUSH
38700: CALL_OW 66
38704: GO 38664
38706: POP
38707: POP
// end ;
38708: LD_VAR 0 3
38712: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38713: LD_EXP 119
38717: NOT
38718: IFFALSE 38753
38720: GO 38722
38722: DISABLE
// begin initMiner := true ;
38723: LD_ADDR_EXP 119
38727: PUSH
38728: LD_INT 1
38730: ST_TO_ADDR
// minersList := [ ] ;
38731: LD_ADDR_EXP 120
38735: PUSH
38736: EMPTY
38737: ST_TO_ADDR
// minerMinesList := [ ] ;
38738: LD_ADDR_EXP 121
38742: PUSH
38743: EMPTY
38744: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38745: LD_ADDR_EXP 122
38749: PUSH
38750: LD_INT 5
38752: ST_TO_ADDR
// end ;
38753: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38754: LD_EXP 119
38758: PUSH
38759: LD_INT 34
38761: PUSH
38762: LD_INT 81
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PPUSH
38769: CALL_OW 69
38773: AND
38774: IFFALSE 39235
38776: GO 38778
38778: DISABLE
38779: LD_INT 0
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
// begin enable ;
38785: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38786: LD_ADDR_VAR 0 1
38790: PUSH
38791: LD_INT 34
38793: PUSH
38794: LD_INT 81
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PPUSH
38801: CALL_OW 69
38805: PUSH
38806: FOR_IN
38807: IFFALSE 38879
// begin if not i in minersList then
38809: LD_VAR 0 1
38813: PUSH
38814: LD_EXP 120
38818: IN
38819: NOT
38820: IFFALSE 38877
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38822: LD_ADDR_EXP 120
38826: PUSH
38827: LD_EXP 120
38831: PPUSH
38832: LD_EXP 120
38836: PUSH
38837: LD_INT 1
38839: PLUS
38840: PPUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: CALL_OW 1
38850: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38851: LD_ADDR_EXP 121
38855: PUSH
38856: LD_EXP 121
38860: PPUSH
38861: LD_EXP 121
38865: PUSH
38866: LD_INT 1
38868: PLUS
38869: PPUSH
38870: EMPTY
38871: PPUSH
38872: CALL_OW 1
38876: ST_TO_ADDR
// end end ;
38877: GO 38806
38879: POP
38880: POP
// for i := minerMinesList downto 1 do
38881: LD_ADDR_VAR 0 1
38885: PUSH
38886: DOUBLE
38887: LD_EXP 121
38891: INC
38892: ST_TO_ADDR
38893: LD_INT 1
38895: PUSH
38896: FOR_DOWNTO
38897: IFFALSE 39233
// begin if IsLive ( minersList [ i ] ) then
38899: LD_EXP 120
38903: PUSH
38904: LD_VAR 0 1
38908: ARRAY
38909: PPUSH
38910: CALL_OW 300
38914: IFFALSE 38942
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38916: LD_EXP 120
38920: PUSH
38921: LD_VAR 0 1
38925: ARRAY
38926: PPUSH
38927: LD_EXP 121
38931: PUSH
38932: LD_VAR 0 1
38936: ARRAY
38937: PPUSH
38938: CALL_OW 505
// if not minerMinesList [ i ] then
38942: LD_EXP 121
38946: PUSH
38947: LD_VAR 0 1
38951: ARRAY
38952: NOT
38953: IFFALSE 38957
// continue ;
38955: GO 38896
// for j := minerMinesList [ i ] downto 1 do
38957: LD_ADDR_VAR 0 2
38961: PUSH
38962: DOUBLE
38963: LD_EXP 121
38967: PUSH
38968: LD_VAR 0 1
38972: ARRAY
38973: INC
38974: ST_TO_ADDR
38975: LD_INT 1
38977: PUSH
38978: FOR_DOWNTO
38979: IFFALSE 39229
// begin side := GetSide ( minersList [ i ] ) ;
38981: LD_ADDR_VAR 0 3
38985: PUSH
38986: LD_EXP 120
38990: PUSH
38991: LD_VAR 0 1
38995: ARRAY
38996: PPUSH
38997: CALL_OW 255
39001: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39002: LD_ADDR_VAR 0 4
39006: PUSH
39007: LD_EXP 121
39011: PUSH
39012: LD_VAR 0 1
39016: ARRAY
39017: PUSH
39018: LD_VAR 0 2
39022: ARRAY
39023: PUSH
39024: LD_INT 1
39026: ARRAY
39027: PPUSH
39028: LD_EXP 121
39032: PUSH
39033: LD_VAR 0 1
39037: ARRAY
39038: PUSH
39039: LD_VAR 0 2
39043: ARRAY
39044: PUSH
39045: LD_INT 2
39047: ARRAY
39048: PPUSH
39049: CALL_OW 428
39053: ST_TO_ADDR
// if not tmp then
39054: LD_VAR 0 4
39058: NOT
39059: IFFALSE 39063
// continue ;
39061: GO 38978
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39063: LD_VAR 0 4
39067: PUSH
39068: LD_INT 81
39070: PUSH
39071: LD_VAR 0 3
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PPUSH
39080: CALL_OW 69
39084: IN
39085: PUSH
39086: LD_EXP 121
39090: PUSH
39091: LD_VAR 0 1
39095: ARRAY
39096: PUSH
39097: LD_VAR 0 2
39101: ARRAY
39102: PUSH
39103: LD_INT 1
39105: ARRAY
39106: PPUSH
39107: LD_EXP 121
39111: PUSH
39112: LD_VAR 0 1
39116: ARRAY
39117: PUSH
39118: LD_VAR 0 2
39122: ARRAY
39123: PUSH
39124: LD_INT 2
39126: ARRAY
39127: PPUSH
39128: CALL_OW 458
39132: AND
39133: IFFALSE 39227
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39135: LD_EXP 121
39139: PUSH
39140: LD_VAR 0 1
39144: ARRAY
39145: PUSH
39146: LD_VAR 0 2
39150: ARRAY
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PPUSH
39156: LD_EXP 121
39160: PUSH
39161: LD_VAR 0 1
39165: ARRAY
39166: PUSH
39167: LD_VAR 0 2
39171: ARRAY
39172: PUSH
39173: LD_INT 2
39175: ARRAY
39176: PPUSH
39177: LD_VAR 0 3
39181: PPUSH
39182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39186: LD_ADDR_EXP 121
39190: PUSH
39191: LD_EXP 121
39195: PPUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: LD_EXP 121
39205: PUSH
39206: LD_VAR 0 1
39210: ARRAY
39211: PPUSH
39212: LD_VAR 0 2
39216: PPUSH
39217: CALL_OW 3
39221: PPUSH
39222: CALL_OW 1
39226: ST_TO_ADDR
// end ; end ;
39227: GO 38978
39229: POP
39230: POP
// end ;
39231: GO 38896
39233: POP
39234: POP
// end ;
39235: PPOPN 4
39237: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39238: LD_INT 0
39240: PPUSH
39241: PPUSH
// result := false ;
39242: LD_ADDR_VAR 0 4
39246: PUSH
39247: LD_INT 0
39249: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39250: LD_VAR 0 1
39254: PPUSH
39255: CALL_OW 264
39259: PUSH
39260: LD_INT 81
39262: EQUAL
39263: NOT
39264: IFFALSE 39268
// exit ;
39266: GO 39508
// index := GetElementIndex ( minersList , unit ) ;
39268: LD_ADDR_VAR 0 5
39272: PUSH
39273: LD_EXP 120
39277: PPUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: CALL 45466 0 2
39287: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39288: LD_EXP 121
39292: PUSH
39293: LD_VAR 0 5
39297: ARRAY
39298: PUSH
39299: LD_EXP 122
39303: GREATEREQUAL
39304: IFFALSE 39308
// exit ;
39306: GO 39508
// ComMoveXY ( unit , x , y ) ;
39308: LD_VAR 0 1
39312: PPUSH
39313: LD_VAR 0 2
39317: PPUSH
39318: LD_VAR 0 3
39322: PPUSH
39323: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39327: LD_INT 35
39329: PPUSH
39330: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39334: LD_VAR 0 1
39338: PPUSH
39339: LD_VAR 0 2
39343: PPUSH
39344: LD_VAR 0 3
39348: PPUSH
39349: CALL 77207 0 3
39353: NOT
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 314
39364: AND
39365: IFFALSE 39369
// exit ;
39367: GO 39508
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39369: LD_VAR 0 2
39373: PPUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: CALL_OW 428
39383: PUSH
39384: LD_VAR 0 1
39388: EQUAL
39389: PUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 314
39399: NOT
39400: AND
39401: IFFALSE 39327
// PlaySoundXY ( x , y , PlantMine ) ;
39403: LD_VAR 0 2
39407: PPUSH
39408: LD_VAR 0 3
39412: PPUSH
39413: LD_STRING PlantMine
39415: PPUSH
39416: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39420: LD_VAR 0 2
39424: PPUSH
39425: LD_VAR 0 3
39429: PPUSH
39430: LD_VAR 0 1
39434: PPUSH
39435: CALL_OW 255
39439: PPUSH
39440: LD_INT 0
39442: PPUSH
39443: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39447: LD_ADDR_EXP 121
39451: PUSH
39452: LD_EXP 121
39456: PPUSH
39457: LD_VAR 0 5
39461: PUSH
39462: LD_EXP 121
39466: PUSH
39467: LD_VAR 0 5
39471: ARRAY
39472: PUSH
39473: LD_INT 1
39475: PLUS
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PPUSH
39481: LD_VAR 0 2
39485: PUSH
39486: LD_VAR 0 3
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PPUSH
39495: CALL 45681 0 3
39499: ST_TO_ADDR
// result := true ;
39500: LD_ADDR_VAR 0 4
39504: PUSH
39505: LD_INT 1
39507: ST_TO_ADDR
// end ;
39508: LD_VAR 0 4
39512: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
39517: PPUSH
// if not unit in minersList then
39518: LD_VAR 0 1
39522: PUSH
39523: LD_EXP 120
39527: IN
39528: NOT
39529: IFFALSE 39533
// exit ;
39531: GO 39925
// index := GetElementIndex ( minersList , unit ) ;
39533: LD_ADDR_VAR 0 6
39537: PUSH
39538: LD_EXP 120
39542: PPUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL 45466 0 2
39552: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39553: LD_ADDR_VAR 0 5
39557: PUSH
39558: DOUBLE
39559: LD_EXP 121
39563: PUSH
39564: LD_VAR 0 6
39568: ARRAY
39569: INC
39570: ST_TO_ADDR
39571: LD_INT 1
39573: PUSH
39574: FOR_DOWNTO
39575: IFFALSE 39736
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39577: LD_EXP 121
39581: PUSH
39582: LD_VAR 0 6
39586: ARRAY
39587: PUSH
39588: LD_VAR 0 5
39592: ARRAY
39593: PUSH
39594: LD_INT 1
39596: ARRAY
39597: PUSH
39598: LD_VAR 0 2
39602: EQUAL
39603: PUSH
39604: LD_EXP 121
39608: PUSH
39609: LD_VAR 0 6
39613: ARRAY
39614: PUSH
39615: LD_VAR 0 5
39619: ARRAY
39620: PUSH
39621: LD_INT 2
39623: ARRAY
39624: PUSH
39625: LD_VAR 0 3
39629: EQUAL
39630: AND
39631: IFFALSE 39734
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39633: LD_EXP 121
39637: PUSH
39638: LD_VAR 0 6
39642: ARRAY
39643: PUSH
39644: LD_VAR 0 5
39648: ARRAY
39649: PUSH
39650: LD_INT 1
39652: ARRAY
39653: PPUSH
39654: LD_EXP 121
39658: PUSH
39659: LD_VAR 0 6
39663: ARRAY
39664: PUSH
39665: LD_VAR 0 5
39669: ARRAY
39670: PUSH
39671: LD_INT 2
39673: ARRAY
39674: PPUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 255
39684: PPUSH
39685: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39689: LD_ADDR_EXP 121
39693: PUSH
39694: LD_EXP 121
39698: PPUSH
39699: LD_VAR 0 6
39703: PPUSH
39704: LD_EXP 121
39708: PUSH
39709: LD_VAR 0 6
39713: ARRAY
39714: PPUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: CALL_OW 3
39724: PPUSH
39725: CALL_OW 1
39729: ST_TO_ADDR
// exit ;
39730: POP
39731: POP
39732: GO 39925
// end ; end ;
39734: GO 39574
39736: POP
39737: POP
// for i := minerMinesList [ index ] downto 1 do
39738: LD_ADDR_VAR 0 5
39742: PUSH
39743: DOUBLE
39744: LD_EXP 121
39748: PUSH
39749: LD_VAR 0 6
39753: ARRAY
39754: INC
39755: ST_TO_ADDR
39756: LD_INT 1
39758: PUSH
39759: FOR_DOWNTO
39760: IFFALSE 39923
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39762: LD_EXP 121
39766: PUSH
39767: LD_VAR 0 6
39771: ARRAY
39772: PUSH
39773: LD_VAR 0 5
39777: ARRAY
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PPUSH
39783: LD_EXP 121
39787: PUSH
39788: LD_VAR 0 6
39792: ARRAY
39793: PUSH
39794: LD_VAR 0 5
39798: ARRAY
39799: PUSH
39800: LD_INT 2
39802: ARRAY
39803: PPUSH
39804: LD_VAR 0 2
39808: PPUSH
39809: LD_VAR 0 3
39813: PPUSH
39814: CALL_OW 298
39818: PUSH
39819: LD_INT 6
39821: LESS
39822: IFFALSE 39921
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39824: LD_EXP 121
39828: PUSH
39829: LD_VAR 0 6
39833: ARRAY
39834: PUSH
39835: LD_VAR 0 5
39839: ARRAY
39840: PUSH
39841: LD_INT 1
39843: ARRAY
39844: PPUSH
39845: LD_EXP 121
39849: PUSH
39850: LD_VAR 0 6
39854: ARRAY
39855: PUSH
39856: LD_VAR 0 5
39860: ARRAY
39861: PUSH
39862: LD_INT 2
39864: ARRAY
39865: PPUSH
39866: LD_VAR 0 1
39870: PPUSH
39871: CALL_OW 255
39875: PPUSH
39876: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39880: LD_ADDR_EXP 121
39884: PUSH
39885: LD_EXP 121
39889: PPUSH
39890: LD_VAR 0 6
39894: PPUSH
39895: LD_EXP 121
39899: PUSH
39900: LD_VAR 0 6
39904: ARRAY
39905: PPUSH
39906: LD_VAR 0 5
39910: PPUSH
39911: CALL_OW 3
39915: PPUSH
39916: CALL_OW 1
39920: ST_TO_ADDR
// end ; end ;
39921: GO 39759
39923: POP
39924: POP
// end ;
39925: LD_VAR 0 4
39929: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39941: LD_VAR 0 1
39945: PPUSH
39946: CALL_OW 264
39950: PUSH
39951: LD_INT 81
39953: EQUAL
39954: NOT
39955: PUSH
39956: LD_VAR 0 1
39960: PUSH
39961: LD_EXP 120
39965: IN
39966: NOT
39967: OR
39968: IFFALSE 39972
// exit ;
39970: GO 40294
// index := GetElementIndex ( minersList , unit ) ;
39972: LD_ADDR_VAR 0 6
39976: PUSH
39977: LD_EXP 120
39981: PPUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL 45466 0 2
39991: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39992: LD_ADDR_VAR 0 8
39996: PUSH
39997: LD_EXP 122
40001: PUSH
40002: LD_EXP 121
40006: PUSH
40007: LD_VAR 0 6
40011: ARRAY
40012: MINUS
40013: ST_TO_ADDR
// if not minesFreeAmount then
40014: LD_VAR 0 8
40018: NOT
40019: IFFALSE 40023
// exit ;
40021: GO 40294
// tmp := [ ] ;
40023: LD_ADDR_VAR 0 7
40027: PUSH
40028: EMPTY
40029: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40030: LD_ADDR_VAR 0 5
40034: PUSH
40035: DOUBLE
40036: LD_INT 1
40038: DEC
40039: ST_TO_ADDR
40040: LD_VAR 0 8
40044: PUSH
40045: FOR_TO
40046: IFFALSE 40241
// begin _d := rand ( 0 , 5 ) ;
40048: LD_ADDR_VAR 0 11
40052: PUSH
40053: LD_INT 0
40055: PPUSH
40056: LD_INT 5
40058: PPUSH
40059: CALL_OW 12
40063: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40064: LD_ADDR_VAR 0 12
40068: PUSH
40069: LD_INT 2
40071: PPUSH
40072: LD_INT 6
40074: PPUSH
40075: CALL_OW 12
40079: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40080: LD_ADDR_VAR 0 9
40084: PUSH
40085: LD_VAR 0 2
40089: PPUSH
40090: LD_VAR 0 11
40094: PPUSH
40095: LD_VAR 0 12
40099: PPUSH
40100: CALL_OW 272
40104: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40105: LD_ADDR_VAR 0 10
40109: PUSH
40110: LD_VAR 0 3
40114: PPUSH
40115: LD_VAR 0 11
40119: PPUSH
40120: LD_VAR 0 12
40124: PPUSH
40125: CALL_OW 273
40129: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40130: LD_VAR 0 9
40134: PPUSH
40135: LD_VAR 0 10
40139: PPUSH
40140: CALL_OW 488
40144: PUSH
40145: LD_VAR 0 9
40149: PUSH
40150: LD_VAR 0 10
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_VAR 0 7
40163: IN
40164: NOT
40165: AND
40166: PUSH
40167: LD_VAR 0 9
40171: PPUSH
40172: LD_VAR 0 10
40176: PPUSH
40177: CALL_OW 458
40181: NOT
40182: AND
40183: IFFALSE 40225
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40185: LD_ADDR_VAR 0 7
40189: PUSH
40190: LD_VAR 0 7
40194: PPUSH
40195: LD_VAR 0 7
40199: PUSH
40200: LD_INT 1
40202: PLUS
40203: PPUSH
40204: LD_VAR 0 9
40208: PUSH
40209: LD_VAR 0 10
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PPUSH
40218: CALL_OW 1
40222: ST_TO_ADDR
40223: GO 40239
// i := i - 1 ;
40225: LD_ADDR_VAR 0 5
40229: PUSH
40230: LD_VAR 0 5
40234: PUSH
40235: LD_INT 1
40237: MINUS
40238: ST_TO_ADDR
// end ;
40239: GO 40045
40241: POP
40242: POP
// for i in tmp do
40243: LD_ADDR_VAR 0 5
40247: PUSH
40248: LD_VAR 0 7
40252: PUSH
40253: FOR_IN
40254: IFFALSE 40292
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40256: LD_VAR 0 1
40260: PPUSH
40261: LD_VAR 0 5
40265: PUSH
40266: LD_INT 1
40268: ARRAY
40269: PPUSH
40270: LD_VAR 0 5
40274: PUSH
40275: LD_INT 2
40277: ARRAY
40278: PPUSH
40279: CALL 39238 0 3
40283: NOT
40284: IFFALSE 40290
// exit ;
40286: POP
40287: POP
40288: GO 40294
40290: GO 40253
40292: POP
40293: POP
// end ;
40294: LD_VAR 0 4
40298: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40299: LD_INT 0
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
// if not GetClass ( unit ) = class_sniper then
40308: LD_VAR 0 1
40312: PPUSH
40313: CALL_OW 257
40317: PUSH
40318: LD_INT 5
40320: EQUAL
40321: NOT
40322: IFFALSE 40326
// exit ;
40324: GO 40714
// dist := 8 ;
40326: LD_ADDR_VAR 0 5
40330: PUSH
40331: LD_INT 8
40333: ST_TO_ADDR
// viewRange := 12 ;
40334: LD_ADDR_VAR 0 7
40338: PUSH
40339: LD_INT 12
40341: ST_TO_ADDR
// side := GetSide ( unit ) ;
40342: LD_ADDR_VAR 0 6
40346: PUSH
40347: LD_VAR 0 1
40351: PPUSH
40352: CALL_OW 255
40356: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40357: LD_INT 61
40359: PPUSH
40360: LD_VAR 0 6
40364: PPUSH
40365: CALL_OW 321
40369: PUSH
40370: LD_INT 2
40372: EQUAL
40373: IFFALSE 40383
// viewRange := 16 ;
40375: LD_ADDR_VAR 0 7
40379: PUSH
40380: LD_INT 16
40382: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40383: LD_VAR 0 1
40387: PPUSH
40388: LD_VAR 0 2
40392: PPUSH
40393: LD_VAR 0 3
40397: PPUSH
40398: CALL_OW 297
40402: PUSH
40403: LD_VAR 0 5
40407: GREATER
40408: IFFALSE 40487
// begin ComMoveXY ( unit , x , y ) ;
40410: LD_VAR 0 1
40414: PPUSH
40415: LD_VAR 0 2
40419: PPUSH
40420: LD_VAR 0 3
40424: PPUSH
40425: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40429: LD_INT 35
40431: PPUSH
40432: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40436: LD_VAR 0 1
40440: PPUSH
40441: LD_VAR 0 2
40445: PPUSH
40446: LD_VAR 0 3
40450: PPUSH
40451: CALL 77207 0 3
40455: NOT
40456: IFFALSE 40460
// exit ;
40458: GO 40714
// until GetDistUnitXY ( unit , x , y ) < dist ;
40460: LD_VAR 0 1
40464: PPUSH
40465: LD_VAR 0 2
40469: PPUSH
40470: LD_VAR 0 3
40474: PPUSH
40475: CALL_OW 297
40479: PUSH
40480: LD_VAR 0 5
40484: LESS
40485: IFFALSE 40429
// end ; ComTurnXY ( unit , x , y ) ;
40487: LD_VAR 0 1
40491: PPUSH
40492: LD_VAR 0 2
40496: PPUSH
40497: LD_VAR 0 3
40501: PPUSH
40502: CALL_OW 118
// wait ( 5 ) ;
40506: LD_INT 5
40508: PPUSH
40509: CALL_OW 67
// _d := GetDir ( unit ) ;
40513: LD_ADDR_VAR 0 10
40517: PUSH
40518: LD_VAR 0 1
40522: PPUSH
40523: CALL_OW 254
40527: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40528: LD_ADDR_VAR 0 8
40532: PUSH
40533: LD_VAR 0 1
40537: PPUSH
40538: CALL_OW 250
40542: PPUSH
40543: LD_VAR 0 10
40547: PPUSH
40548: LD_VAR 0 5
40552: PPUSH
40553: CALL_OW 272
40557: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40558: LD_ADDR_VAR 0 9
40562: PUSH
40563: LD_VAR 0 1
40567: PPUSH
40568: CALL_OW 251
40572: PPUSH
40573: LD_VAR 0 10
40577: PPUSH
40578: LD_VAR 0 5
40582: PPUSH
40583: CALL_OW 273
40587: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40588: LD_VAR 0 8
40592: PPUSH
40593: LD_VAR 0 9
40597: PPUSH
40598: CALL_OW 488
40602: NOT
40603: IFFALSE 40607
// exit ;
40605: GO 40714
// ComAnimCustom ( unit , 1 ) ;
40607: LD_VAR 0 1
40611: PPUSH
40612: LD_INT 1
40614: PPUSH
40615: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40619: LD_VAR 0 8
40623: PPUSH
40624: LD_VAR 0 9
40628: PPUSH
40629: LD_VAR 0 6
40633: PPUSH
40634: LD_VAR 0 7
40638: PPUSH
40639: CALL_OW 330
// repeat wait ( 1 ) ;
40643: LD_INT 1
40645: PPUSH
40646: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40650: LD_VAR 0 1
40654: PPUSH
40655: CALL_OW 316
40659: PUSH
40660: LD_VAR 0 1
40664: PPUSH
40665: CALL_OW 314
40669: OR
40670: PUSH
40671: LD_VAR 0 1
40675: PPUSH
40676: CALL_OW 302
40680: NOT
40681: OR
40682: PUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: CALL_OW 301
40692: OR
40693: IFFALSE 40643
// RemoveSeeing ( _x , _y , side ) ;
40695: LD_VAR 0 8
40699: PPUSH
40700: LD_VAR 0 9
40704: PPUSH
40705: LD_VAR 0 6
40709: PPUSH
40710: CALL_OW 331
// end ; end_of_file
40714: LD_VAR 0 4
40718: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40719: LD_INT 0
40721: PPUSH
40722: PPUSH
// if exist_mode then
40723: LD_VAR 0 2
40727: IFFALSE 40752
// unit := CreateCharacter ( prefix & ident ) else
40729: LD_ADDR_VAR 0 5
40733: PUSH
40734: LD_VAR 0 3
40738: PUSH
40739: LD_VAR 0 1
40743: STR
40744: PPUSH
40745: CALL_OW 34
40749: ST_TO_ADDR
40750: GO 40767
// unit := NewCharacter ( ident ) ;
40752: LD_ADDR_VAR 0 5
40756: PUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 25
40766: ST_TO_ADDR
// result := unit ;
40767: LD_ADDR_VAR 0 4
40771: PUSH
40772: LD_VAR 0 5
40776: ST_TO_ADDR
// end ;
40777: LD_VAR 0 4
40781: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40782: LD_INT 0
40784: PPUSH
40785: PPUSH
// if not side or not nation then
40786: LD_VAR 0 1
40790: NOT
40791: PUSH
40792: LD_VAR 0 2
40796: NOT
40797: OR
40798: IFFALSE 40802
// exit ;
40800: GO 41570
// case nation of nation_american :
40802: LD_VAR 0 2
40806: PUSH
40807: LD_INT 1
40809: DOUBLE
40810: EQUAL
40811: IFTRUE 40815
40813: GO 41029
40815: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40816: LD_ADDR_VAR 0 4
40820: PUSH
40821: LD_INT 35
40823: PUSH
40824: LD_INT 45
40826: PUSH
40827: LD_INT 46
40829: PUSH
40830: LD_INT 47
40832: PUSH
40833: LD_INT 82
40835: PUSH
40836: LD_INT 83
40838: PUSH
40839: LD_INT 84
40841: PUSH
40842: LD_INT 85
40844: PUSH
40845: LD_INT 86
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 6
40856: PUSH
40857: LD_INT 15
40859: PUSH
40860: LD_INT 16
40862: PUSH
40863: LD_INT 7
40865: PUSH
40866: LD_INT 12
40868: PUSH
40869: LD_INT 13
40871: PUSH
40872: LD_INT 10
40874: PUSH
40875: LD_INT 14
40877: PUSH
40878: LD_INT 20
40880: PUSH
40881: LD_INT 21
40883: PUSH
40884: LD_INT 22
40886: PUSH
40887: LD_INT 25
40889: PUSH
40890: LD_INT 32
40892: PUSH
40893: LD_INT 27
40895: PUSH
40896: LD_INT 36
40898: PUSH
40899: LD_INT 69
40901: PUSH
40902: LD_INT 39
40904: PUSH
40905: LD_INT 34
40907: PUSH
40908: LD_INT 40
40910: PUSH
40911: LD_INT 48
40913: PUSH
40914: LD_INT 49
40916: PUSH
40917: LD_INT 50
40919: PUSH
40920: LD_INT 51
40922: PUSH
40923: LD_INT 52
40925: PUSH
40926: LD_INT 53
40928: PUSH
40929: LD_INT 54
40931: PUSH
40932: LD_INT 55
40934: PUSH
40935: LD_INT 56
40937: PUSH
40938: LD_INT 57
40940: PUSH
40941: LD_INT 58
40943: PUSH
40944: LD_INT 59
40946: PUSH
40947: LD_INT 60
40949: PUSH
40950: LD_INT 61
40952: PUSH
40953: LD_INT 62
40955: PUSH
40956: LD_INT 80
40958: PUSH
40959: LD_INT 82
40961: PUSH
40962: LD_INT 83
40964: PUSH
40965: LD_INT 84
40967: PUSH
40968: LD_INT 85
40970: PUSH
40971: LD_INT 86
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: ST_TO_ADDR
41027: GO 41494
41029: LD_INT 2
41031: DOUBLE
41032: EQUAL
41033: IFTRUE 41037
41035: GO 41263
41037: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41038: LD_ADDR_VAR 0 4
41042: PUSH
41043: LD_INT 35
41045: PUSH
41046: LD_INT 45
41048: PUSH
41049: LD_INT 46
41051: PUSH
41052: LD_INT 47
41054: PUSH
41055: LD_INT 82
41057: PUSH
41058: LD_INT 83
41060: PUSH
41061: LD_INT 84
41063: PUSH
41064: LD_INT 85
41066: PUSH
41067: LD_INT 87
41069: PUSH
41070: LD_INT 70
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: LD_INT 11
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 4
41084: PUSH
41085: LD_INT 5
41087: PUSH
41088: LD_INT 6
41090: PUSH
41091: LD_INT 15
41093: PUSH
41094: LD_INT 18
41096: PUSH
41097: LD_INT 7
41099: PUSH
41100: LD_INT 17
41102: PUSH
41103: LD_INT 8
41105: PUSH
41106: LD_INT 20
41108: PUSH
41109: LD_INT 21
41111: PUSH
41112: LD_INT 22
41114: PUSH
41115: LD_INT 72
41117: PUSH
41118: LD_INT 26
41120: PUSH
41121: LD_INT 69
41123: PUSH
41124: LD_INT 39
41126: PUSH
41127: LD_INT 40
41129: PUSH
41130: LD_INT 41
41132: PUSH
41133: LD_INT 42
41135: PUSH
41136: LD_INT 43
41138: PUSH
41139: LD_INT 48
41141: PUSH
41142: LD_INT 49
41144: PUSH
41145: LD_INT 50
41147: PUSH
41148: LD_INT 51
41150: PUSH
41151: LD_INT 52
41153: PUSH
41154: LD_INT 53
41156: PUSH
41157: LD_INT 54
41159: PUSH
41160: LD_INT 55
41162: PUSH
41163: LD_INT 56
41165: PUSH
41166: LD_INT 60
41168: PUSH
41169: LD_INT 61
41171: PUSH
41172: LD_INT 62
41174: PUSH
41175: LD_INT 66
41177: PUSH
41178: LD_INT 67
41180: PUSH
41181: LD_INT 68
41183: PUSH
41184: LD_INT 81
41186: PUSH
41187: LD_INT 82
41189: PUSH
41190: LD_INT 83
41192: PUSH
41193: LD_INT 84
41195: PUSH
41196: LD_INT 85
41198: PUSH
41199: LD_INT 87
41201: PUSH
41202: LD_INT 88
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
41261: GO 41494
41263: LD_INT 3
41265: DOUBLE
41266: EQUAL
41267: IFTRUE 41271
41269: GO 41493
41271: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41272: LD_ADDR_VAR 0 4
41276: PUSH
41277: LD_INT 46
41279: PUSH
41280: LD_INT 47
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: LD_INT 82
41291: PUSH
41292: LD_INT 83
41294: PUSH
41295: LD_INT 84
41297: PUSH
41298: LD_INT 85
41300: PUSH
41301: LD_INT 86
41303: PUSH
41304: LD_INT 11
41306: PUSH
41307: LD_INT 9
41309: PUSH
41310: LD_INT 20
41312: PUSH
41313: LD_INT 19
41315: PUSH
41316: LD_INT 21
41318: PUSH
41319: LD_INT 24
41321: PUSH
41322: LD_INT 22
41324: PUSH
41325: LD_INT 25
41327: PUSH
41328: LD_INT 28
41330: PUSH
41331: LD_INT 29
41333: PUSH
41334: LD_INT 30
41336: PUSH
41337: LD_INT 31
41339: PUSH
41340: LD_INT 37
41342: PUSH
41343: LD_INT 38
41345: PUSH
41346: LD_INT 32
41348: PUSH
41349: LD_INT 27
41351: PUSH
41352: LD_INT 33
41354: PUSH
41355: LD_INT 69
41357: PUSH
41358: LD_INT 39
41360: PUSH
41361: LD_INT 34
41363: PUSH
41364: LD_INT 40
41366: PUSH
41367: LD_INT 71
41369: PUSH
41370: LD_INT 23
41372: PUSH
41373: LD_INT 44
41375: PUSH
41376: LD_INT 48
41378: PUSH
41379: LD_INT 49
41381: PUSH
41382: LD_INT 50
41384: PUSH
41385: LD_INT 51
41387: PUSH
41388: LD_INT 52
41390: PUSH
41391: LD_INT 53
41393: PUSH
41394: LD_INT 54
41396: PUSH
41397: LD_INT 55
41399: PUSH
41400: LD_INT 56
41402: PUSH
41403: LD_INT 57
41405: PUSH
41406: LD_INT 58
41408: PUSH
41409: LD_INT 59
41411: PUSH
41412: LD_INT 63
41414: PUSH
41415: LD_INT 64
41417: PUSH
41418: LD_INT 65
41420: PUSH
41421: LD_INT 82
41423: PUSH
41424: LD_INT 83
41426: PUSH
41427: LD_INT 84
41429: PUSH
41430: LD_INT 85
41432: PUSH
41433: LD_INT 86
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: ST_TO_ADDR
41491: GO 41494
41493: POP
// if state > - 1 and state < 3 then
41494: LD_VAR 0 3
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: GREATER
41503: PUSH
41504: LD_VAR 0 3
41508: PUSH
41509: LD_INT 3
41511: LESS
41512: AND
41513: IFFALSE 41570
// for i in result do
41515: LD_ADDR_VAR 0 5
41519: PUSH
41520: LD_VAR 0 4
41524: PUSH
41525: FOR_IN
41526: IFFALSE 41568
// if GetTech ( i , side ) <> state then
41528: LD_VAR 0 5
41532: PPUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 321
41542: PUSH
41543: LD_VAR 0 3
41547: NONEQUAL
41548: IFFALSE 41566
// result := result diff i ;
41550: LD_ADDR_VAR 0 4
41554: PUSH
41555: LD_VAR 0 4
41559: PUSH
41560: LD_VAR 0 5
41564: DIFF
41565: ST_TO_ADDR
41566: GO 41525
41568: POP
41569: POP
// end ;
41570: LD_VAR 0 4
41574: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41575: LD_INT 0
41577: PPUSH
41578: PPUSH
41579: PPUSH
// result := true ;
41580: LD_ADDR_VAR 0 3
41584: PUSH
41585: LD_INT 1
41587: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41588: LD_ADDR_VAR 0 5
41592: PUSH
41593: LD_VAR 0 2
41597: PPUSH
41598: CALL_OW 480
41602: ST_TO_ADDR
// if not tmp then
41603: LD_VAR 0 5
41607: NOT
41608: IFFALSE 41612
// exit ;
41610: GO 41661
// for i in tmp do
41612: LD_ADDR_VAR 0 4
41616: PUSH
41617: LD_VAR 0 5
41621: PUSH
41622: FOR_IN
41623: IFFALSE 41659
// if GetTech ( i , side ) <> state_researched then
41625: LD_VAR 0 4
41629: PPUSH
41630: LD_VAR 0 1
41634: PPUSH
41635: CALL_OW 321
41639: PUSH
41640: LD_INT 2
41642: NONEQUAL
41643: IFFALSE 41657
// begin result := false ;
41645: LD_ADDR_VAR 0 3
41649: PUSH
41650: LD_INT 0
41652: ST_TO_ADDR
// exit ;
41653: POP
41654: POP
41655: GO 41661
// end ;
41657: GO 41622
41659: POP
41660: POP
// end ;
41661: LD_VAR 0 3
41665: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41666: LD_INT 0
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41681: LD_VAR 0 1
41685: NOT
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 257
41696: PUSH
41697: LD_INT 9
41699: NONEQUAL
41700: OR
41701: IFFALSE 41705
// exit ;
41703: GO 42278
// side := GetSide ( unit ) ;
41705: LD_ADDR_VAR 0 9
41709: PUSH
41710: LD_VAR 0 1
41714: PPUSH
41715: CALL_OW 255
41719: ST_TO_ADDR
// tech_space := tech_spacanom ;
41720: LD_ADDR_VAR 0 12
41724: PUSH
41725: LD_INT 29
41727: ST_TO_ADDR
// tech_time := tech_taurad ;
41728: LD_ADDR_VAR 0 13
41732: PUSH
41733: LD_INT 28
41735: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41736: LD_ADDR_VAR 0 11
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 310
41750: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41751: LD_VAR 0 11
41755: PPUSH
41756: CALL_OW 247
41760: PUSH
41761: LD_INT 2
41763: EQUAL
41764: IFFALSE 41768
// exit ;
41766: GO 42278
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41768: LD_ADDR_VAR 0 8
41772: PUSH
41773: LD_INT 81
41775: PUSH
41776: LD_VAR 0 9
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: LD_INT 21
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PPUSH
41806: CALL_OW 69
41810: ST_TO_ADDR
// if not tmp then
41811: LD_VAR 0 8
41815: NOT
41816: IFFALSE 41820
// exit ;
41818: GO 42278
// if in_unit then
41820: LD_VAR 0 11
41824: IFFALSE 41848
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41826: LD_ADDR_VAR 0 10
41830: PUSH
41831: LD_VAR 0 8
41835: PPUSH
41836: LD_VAR 0 11
41840: PPUSH
41841: CALL_OW 74
41845: ST_TO_ADDR
41846: GO 41868
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41848: LD_ADDR_VAR 0 10
41852: PUSH
41853: LD_VAR 0 8
41857: PPUSH
41858: LD_VAR 0 1
41862: PPUSH
41863: CALL_OW 74
41867: ST_TO_ADDR
// if not enemy then
41868: LD_VAR 0 10
41872: NOT
41873: IFFALSE 41877
// exit ;
41875: GO 42278
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41877: LD_VAR 0 11
41881: PUSH
41882: LD_VAR 0 11
41886: PPUSH
41887: LD_VAR 0 10
41891: PPUSH
41892: CALL_OW 296
41896: PUSH
41897: LD_INT 13
41899: GREATER
41900: AND
41901: PUSH
41902: LD_VAR 0 1
41906: PPUSH
41907: LD_VAR 0 10
41911: PPUSH
41912: CALL_OW 296
41916: PUSH
41917: LD_INT 12
41919: GREATER
41920: OR
41921: IFFALSE 41925
// exit ;
41923: GO 42278
// missile := [ 1 ] ;
41925: LD_ADDR_VAR 0 14
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41936: LD_VAR 0 9
41940: PPUSH
41941: LD_VAR 0 12
41945: PPUSH
41946: CALL_OW 325
41950: IFFALSE 41979
// missile := Replace ( missile , missile + 1 , 2 ) ;
41952: LD_ADDR_VAR 0 14
41956: PUSH
41957: LD_VAR 0 14
41961: PPUSH
41962: LD_VAR 0 14
41966: PUSH
41967: LD_INT 1
41969: PLUS
41970: PPUSH
41971: LD_INT 2
41973: PPUSH
41974: CALL_OW 1
41978: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41979: LD_VAR 0 9
41983: PPUSH
41984: LD_VAR 0 13
41988: PPUSH
41989: CALL_OW 325
41993: PUSH
41994: LD_VAR 0 10
41998: PPUSH
41999: CALL_OW 255
42003: PPUSH
42004: LD_VAR 0 13
42008: PPUSH
42009: CALL_OW 325
42013: NOT
42014: AND
42015: IFFALSE 42044
// missile := Replace ( missile , missile + 1 , 3 ) ;
42017: LD_ADDR_VAR 0 14
42021: PUSH
42022: LD_VAR 0 14
42026: PPUSH
42027: LD_VAR 0 14
42031: PUSH
42032: LD_INT 1
42034: PLUS
42035: PPUSH
42036: LD_INT 3
42038: PPUSH
42039: CALL_OW 1
42043: ST_TO_ADDR
// if missile < 2 then
42044: LD_VAR 0 14
42048: PUSH
42049: LD_INT 2
42051: LESS
42052: IFFALSE 42056
// exit ;
42054: GO 42278
// x := GetX ( enemy ) ;
42056: LD_ADDR_VAR 0 4
42060: PUSH
42061: LD_VAR 0 10
42065: PPUSH
42066: CALL_OW 250
42070: ST_TO_ADDR
// y := GetY ( enemy ) ;
42071: LD_ADDR_VAR 0 5
42075: PUSH
42076: LD_VAR 0 10
42080: PPUSH
42081: CALL_OW 251
42085: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42086: LD_ADDR_VAR 0 6
42090: PUSH
42091: LD_VAR 0 4
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PPUSH
42100: LD_INT 1
42102: PPUSH
42103: CALL_OW 12
42107: PLUS
42108: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42109: LD_ADDR_VAR 0 7
42113: PUSH
42114: LD_VAR 0 5
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PPUSH
42123: LD_INT 1
42125: PPUSH
42126: CALL_OW 12
42130: PLUS
42131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42132: LD_VAR 0 6
42136: PPUSH
42137: LD_VAR 0 7
42141: PPUSH
42142: CALL_OW 488
42146: NOT
42147: IFFALSE 42169
// begin _x := x ;
42149: LD_ADDR_VAR 0 6
42153: PUSH
42154: LD_VAR 0 4
42158: ST_TO_ADDR
// _y := y ;
42159: LD_ADDR_VAR 0 7
42163: PUSH
42164: LD_VAR 0 5
42168: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42169: LD_ADDR_VAR 0 3
42173: PUSH
42174: LD_INT 1
42176: PPUSH
42177: LD_VAR 0 14
42181: PPUSH
42182: CALL_OW 12
42186: ST_TO_ADDR
// case i of 1 :
42187: LD_VAR 0 3
42191: PUSH
42192: LD_INT 1
42194: DOUBLE
42195: EQUAL
42196: IFTRUE 42200
42198: GO 42217
42200: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42201: LD_VAR 0 1
42205: PPUSH
42206: LD_VAR 0 10
42210: PPUSH
42211: CALL_OW 115
42215: GO 42278
42217: LD_INT 2
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42225
42223: GO 42247
42225: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42226: LD_VAR 0 1
42230: PPUSH
42231: LD_VAR 0 6
42235: PPUSH
42236: LD_VAR 0 7
42240: PPUSH
42241: CALL_OW 153
42245: GO 42278
42247: LD_INT 3
42249: DOUBLE
42250: EQUAL
42251: IFTRUE 42255
42253: GO 42277
42255: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42256: LD_VAR 0 1
42260: PPUSH
42261: LD_VAR 0 6
42265: PPUSH
42266: LD_VAR 0 7
42270: PPUSH
42271: CALL_OW 154
42275: GO 42278
42277: POP
// end ;
42278: LD_VAR 0 2
42282: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42283: LD_INT 0
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
// if not unit or not building then
42291: LD_VAR 0 1
42295: NOT
42296: PUSH
42297: LD_VAR 0 2
42301: NOT
42302: OR
42303: IFFALSE 42307
// exit ;
42305: GO 42465
// x := GetX ( building ) ;
42307: LD_ADDR_VAR 0 5
42311: PUSH
42312: LD_VAR 0 2
42316: PPUSH
42317: CALL_OW 250
42321: ST_TO_ADDR
// y := GetY ( building ) ;
42322: LD_ADDR_VAR 0 6
42326: PUSH
42327: LD_VAR 0 2
42331: PPUSH
42332: CALL_OW 251
42336: ST_TO_ADDR
// for i = 0 to 5 do
42337: LD_ADDR_VAR 0 4
42341: PUSH
42342: DOUBLE
42343: LD_INT 0
42345: DEC
42346: ST_TO_ADDR
42347: LD_INT 5
42349: PUSH
42350: FOR_TO
42351: IFFALSE 42463
// begin _x := ShiftX ( x , i , 3 ) ;
42353: LD_ADDR_VAR 0 7
42357: PUSH
42358: LD_VAR 0 5
42362: PPUSH
42363: LD_VAR 0 4
42367: PPUSH
42368: LD_INT 3
42370: PPUSH
42371: CALL_OW 272
42375: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42376: LD_ADDR_VAR 0 8
42380: PUSH
42381: LD_VAR 0 6
42385: PPUSH
42386: LD_VAR 0 4
42390: PPUSH
42391: LD_INT 3
42393: PPUSH
42394: CALL_OW 273
42398: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42399: LD_VAR 0 7
42403: PPUSH
42404: LD_VAR 0 8
42408: PPUSH
42409: CALL_OW 488
42413: NOT
42414: IFFALSE 42418
// continue ;
42416: GO 42350
// if HexInfo ( _x , _y ) = 0 then
42418: LD_VAR 0 7
42422: PPUSH
42423: LD_VAR 0 8
42427: PPUSH
42428: CALL_OW 428
42432: PUSH
42433: LD_INT 0
42435: EQUAL
42436: IFFALSE 42461
// begin ComMoveXY ( unit , _x , _y ) ;
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_VAR 0 7
42447: PPUSH
42448: LD_VAR 0 8
42452: PPUSH
42453: CALL_OW 111
// exit ;
42457: POP
42458: POP
42459: GO 42465
// end ; end ;
42461: GO 42350
42463: POP
42464: POP
// end ;
42465: LD_VAR 0 3
42469: RET
// export function ScanBase ( side , base_area ) ; begin
42470: LD_INT 0
42472: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42473: LD_ADDR_VAR 0 3
42477: PUSH
42478: LD_VAR 0 2
42482: PPUSH
42483: LD_INT 81
42485: PUSH
42486: LD_VAR 0 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PPUSH
42495: CALL_OW 70
42499: ST_TO_ADDR
// end ;
42500: LD_VAR 0 3
42504: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42505: LD_INT 0
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
// result := false ;
42511: LD_ADDR_VAR 0 2
42515: PUSH
42516: LD_INT 0
42518: ST_TO_ADDR
// side := GetSide ( unit ) ;
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_VAR 0 1
42528: PPUSH
42529: CALL_OW 255
42533: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42534: LD_ADDR_VAR 0 4
42538: PUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 248
42548: ST_TO_ADDR
// case nat of 1 :
42549: LD_VAR 0 4
42553: PUSH
42554: LD_INT 1
42556: DOUBLE
42557: EQUAL
42558: IFTRUE 42562
42560: GO 42573
42562: POP
// tech := tech_lassight ; 2 :
42563: LD_ADDR_VAR 0 5
42567: PUSH
42568: LD_INT 12
42570: ST_TO_ADDR
42571: GO 42612
42573: LD_INT 2
42575: DOUBLE
42576: EQUAL
42577: IFTRUE 42581
42579: GO 42592
42581: POP
// tech := tech_mortar ; 3 :
42582: LD_ADDR_VAR 0 5
42586: PUSH
42587: LD_INT 41
42589: ST_TO_ADDR
42590: GO 42612
42592: LD_INT 3
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 42611
42600: POP
// tech := tech_bazooka ; end ;
42601: LD_ADDR_VAR 0 5
42605: PUSH
42606: LD_INT 44
42608: ST_TO_ADDR
42609: GO 42612
42611: POP
// if Researched ( side , tech ) then
42612: LD_VAR 0 3
42616: PPUSH
42617: LD_VAR 0 5
42621: PPUSH
42622: CALL_OW 325
42626: IFFALSE 42653
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42628: LD_ADDR_VAR 0 2
42632: PUSH
42633: LD_INT 5
42635: PUSH
42636: LD_INT 8
42638: PUSH
42639: LD_INT 9
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: LD_VAR 0 4
42651: ARRAY
42652: ST_TO_ADDR
// end ;
42653: LD_VAR 0 2
42657: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42658: LD_INT 0
42660: PPUSH
42661: PPUSH
42662: PPUSH
// if not mines then
42663: LD_VAR 0 2
42667: NOT
42668: IFFALSE 42672
// exit ;
42670: GO 42816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42672: LD_ADDR_VAR 0 5
42676: PUSH
42677: LD_INT 81
42679: PUSH
42680: LD_VAR 0 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: LD_INT 21
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PPUSH
42710: CALL_OW 69
42714: ST_TO_ADDR
// for i in mines do
42715: LD_ADDR_VAR 0 4
42719: PUSH
42720: LD_VAR 0 2
42724: PUSH
42725: FOR_IN
42726: IFFALSE 42814
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42728: LD_VAR 0 4
42732: PUSH
42733: LD_INT 1
42735: ARRAY
42736: PPUSH
42737: LD_VAR 0 4
42741: PUSH
42742: LD_INT 2
42744: ARRAY
42745: PPUSH
42746: CALL_OW 458
42750: NOT
42751: IFFALSE 42755
// continue ;
42753: GO 42725
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42755: LD_VAR 0 4
42759: PUSH
42760: LD_INT 1
42762: ARRAY
42763: PPUSH
42764: LD_VAR 0 4
42768: PUSH
42769: LD_INT 2
42771: ARRAY
42772: PPUSH
42773: CALL_OW 428
42777: PUSH
42778: LD_VAR 0 5
42782: IN
42783: IFFALSE 42812
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42785: LD_VAR 0 4
42789: PUSH
42790: LD_INT 1
42792: ARRAY
42793: PPUSH
42794: LD_VAR 0 4
42798: PUSH
42799: LD_INT 2
42801: ARRAY
42802: PPUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 456
// end ;
42812: GO 42725
42814: POP
42815: POP
// end ;
42816: LD_VAR 0 3
42820: RET
// export function Count ( array ) ; begin
42821: LD_INT 0
42823: PPUSH
// result := array + 0 ;
42824: LD_ADDR_VAR 0 2
42828: PUSH
42829: LD_VAR 0 1
42833: PUSH
42834: LD_INT 0
42836: PLUS
42837: ST_TO_ADDR
// end ;
42838: LD_VAR 0 2
42842: RET
// export function IsEmpty ( building ) ; begin
42843: LD_INT 0
42845: PPUSH
// if not building then
42846: LD_VAR 0 1
42850: NOT
42851: IFFALSE 42855
// exit ;
42853: GO 42898
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42855: LD_ADDR_VAR 0 2
42859: PUSH
42860: LD_VAR 0 1
42864: PUSH
42865: LD_INT 22
42867: PUSH
42868: LD_VAR 0 1
42872: PPUSH
42873: CALL_OW 255
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 58
42884: PUSH
42885: EMPTY
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PPUSH
42892: CALL_OW 69
42896: IN
42897: ST_TO_ADDR
// end ;
42898: LD_VAR 0 2
42902: RET
// export function IsNotFull ( building ) ; var places ; begin
42903: LD_INT 0
42905: PPUSH
42906: PPUSH
// if not building then
42907: LD_VAR 0 1
42911: NOT
42912: IFFALSE 42916
// exit ;
42914: GO 42944
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42916: LD_ADDR_VAR 0 2
42920: PUSH
42921: LD_VAR 0 1
42925: PPUSH
42926: LD_INT 3
42928: PUSH
42929: LD_INT 62
42931: PUSH
42932: EMPTY
42933: LIST
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PPUSH
42939: CALL_OW 72
42943: ST_TO_ADDR
// end ;
42944: LD_VAR 0 2
42948: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42949: LD_INT 0
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
// tmp := [ ] ;
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: EMPTY
42961: ST_TO_ADDR
// list := [ ] ;
42962: LD_ADDR_VAR 0 5
42966: PUSH
42967: EMPTY
42968: ST_TO_ADDR
// for i = 16 to 25 do
42969: LD_ADDR_VAR 0 4
42973: PUSH
42974: DOUBLE
42975: LD_INT 16
42977: DEC
42978: ST_TO_ADDR
42979: LD_INT 25
42981: PUSH
42982: FOR_TO
42983: IFFALSE 43056
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_VAR 0 3
42994: PUSH
42995: LD_INT 22
42997: PUSH
42998: LD_VAR 0 1
43002: PPUSH
43003: CALL_OW 255
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 91
43014: PUSH
43015: LD_VAR 0 1
43019: PUSH
43020: LD_INT 6
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 30
43030: PUSH
43031: LD_VAR 0 4
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: PPUSH
43048: CALL_OW 69
43052: ADD
43053: ST_TO_ADDR
43054: GO 42982
43056: POP
43057: POP
// for i = 1 to tmp do
43058: LD_ADDR_VAR 0 4
43062: PUSH
43063: DOUBLE
43064: LD_INT 1
43066: DEC
43067: ST_TO_ADDR
43068: LD_VAR 0 3
43072: PUSH
43073: FOR_TO
43074: IFFALSE 43162
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43076: LD_ADDR_VAR 0 5
43080: PUSH
43081: LD_VAR 0 5
43085: PUSH
43086: LD_VAR 0 3
43090: PUSH
43091: LD_VAR 0 4
43095: ARRAY
43096: PPUSH
43097: CALL_OW 266
43101: PUSH
43102: LD_VAR 0 3
43106: PUSH
43107: LD_VAR 0 4
43111: ARRAY
43112: PPUSH
43113: CALL_OW 250
43117: PUSH
43118: LD_VAR 0 3
43122: PUSH
43123: LD_VAR 0 4
43127: ARRAY
43128: PPUSH
43129: CALL_OW 251
43133: PUSH
43134: LD_VAR 0 3
43138: PUSH
43139: LD_VAR 0 4
43143: ARRAY
43144: PPUSH
43145: CALL_OW 254
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: ADD
43159: ST_TO_ADDR
43160: GO 43073
43162: POP
43163: POP
// result := list ;
43164: LD_ADDR_VAR 0 2
43168: PUSH
43169: LD_VAR 0 5
43173: ST_TO_ADDR
// end ;
43174: LD_VAR 0 2
43178: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43179: LD_INT 0
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
// if not factory then
43188: LD_VAR 0 1
43192: NOT
43193: IFFALSE 43197
// exit ;
43195: GO 43790
// if control = control_apeman then
43197: LD_VAR 0 4
43201: PUSH
43202: LD_INT 5
43204: EQUAL
43205: IFFALSE 43314
// begin tmp := UnitsInside ( factory ) ;
43207: LD_ADDR_VAR 0 8
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: CALL_OW 313
43221: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43222: LD_VAR 0 8
43226: PPUSH
43227: LD_INT 25
43229: PUSH
43230: LD_INT 12
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PPUSH
43237: CALL_OW 72
43241: NOT
43242: IFFALSE 43252
// control := control_manual ;
43244: LD_ADDR_VAR 0 4
43248: PUSH
43249: LD_INT 1
43251: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43252: LD_ADDR_VAR 0 8
43256: PUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL 42949 0 1
43266: ST_TO_ADDR
// if tmp then
43267: LD_VAR 0 8
43271: IFFALSE 43314
// begin for i in tmp do
43273: LD_ADDR_VAR 0 7
43277: PUSH
43278: LD_VAR 0 8
43282: PUSH
43283: FOR_IN
43284: IFFALSE 43312
// if i [ 1 ] = b_ext_radio then
43286: LD_VAR 0 7
43290: PUSH
43291: LD_INT 1
43293: ARRAY
43294: PUSH
43295: LD_INT 22
43297: EQUAL
43298: IFFALSE 43310
// begin control := control_remote ;
43300: LD_ADDR_VAR 0 4
43304: PUSH
43305: LD_INT 2
43307: ST_TO_ADDR
// break ;
43308: GO 43312
// end ;
43310: GO 43283
43312: POP
43313: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43314: LD_VAR 0 1
43318: PPUSH
43319: LD_VAR 0 2
43323: PPUSH
43324: LD_VAR 0 3
43328: PPUSH
43329: LD_VAR 0 4
43333: PPUSH
43334: LD_VAR 0 5
43338: PPUSH
43339: CALL_OW 448
43343: IFFALSE 43378
// begin result := [ chassis , engine , control , weapon ] ;
43345: LD_ADDR_VAR 0 6
43349: PUSH
43350: LD_VAR 0 2
43354: PUSH
43355: LD_VAR 0 3
43359: PUSH
43360: LD_VAR 0 4
43364: PUSH
43365: LD_VAR 0 5
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: ST_TO_ADDR
// exit ;
43376: GO 43790
// end ; _chassis := AvailableChassisList ( factory ) ;
43378: LD_ADDR_VAR 0 9
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 475
43392: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43393: LD_ADDR_VAR 0 11
43397: PUSH
43398: LD_VAR 0 1
43402: PPUSH
43403: CALL_OW 476
43407: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43408: LD_ADDR_VAR 0 12
43412: PUSH
43413: LD_VAR 0 1
43417: PPUSH
43418: CALL_OW 477
43422: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43423: LD_ADDR_VAR 0 10
43427: PUSH
43428: LD_VAR 0 1
43432: PPUSH
43433: CALL_OW 478
43437: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43438: LD_VAR 0 9
43442: NOT
43443: PUSH
43444: LD_VAR 0 11
43448: NOT
43449: OR
43450: PUSH
43451: LD_VAR 0 12
43455: NOT
43456: OR
43457: PUSH
43458: LD_VAR 0 10
43462: NOT
43463: OR
43464: IFFALSE 43499
// begin result := [ chassis , engine , control , weapon ] ;
43466: LD_ADDR_VAR 0 6
43470: PUSH
43471: LD_VAR 0 2
43475: PUSH
43476: LD_VAR 0 3
43480: PUSH
43481: LD_VAR 0 4
43485: PUSH
43486: LD_VAR 0 5
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: ST_TO_ADDR
// exit ;
43497: GO 43790
// end ; if not chassis in _chassis then
43499: LD_VAR 0 2
43503: PUSH
43504: LD_VAR 0 9
43508: IN
43509: NOT
43510: IFFALSE 43536
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43512: LD_ADDR_VAR 0 2
43516: PUSH
43517: LD_VAR 0 9
43521: PUSH
43522: LD_INT 1
43524: PPUSH
43525: LD_VAR 0 9
43529: PPUSH
43530: CALL_OW 12
43534: ARRAY
43535: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43536: LD_VAR 0 2
43540: PPUSH
43541: LD_VAR 0 3
43545: PPUSH
43546: CALL 43795 0 2
43550: NOT
43551: IFFALSE 43610
// repeat engine := _engine [ 1 ] ;
43553: LD_ADDR_VAR 0 3
43557: PUSH
43558: LD_VAR 0 11
43562: PUSH
43563: LD_INT 1
43565: ARRAY
43566: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43567: LD_ADDR_VAR 0 11
43571: PUSH
43572: LD_VAR 0 11
43576: PPUSH
43577: LD_INT 1
43579: PPUSH
43580: CALL_OW 3
43584: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43585: LD_VAR 0 2
43589: PPUSH
43590: LD_VAR 0 3
43594: PPUSH
43595: CALL 43795 0 2
43599: PUSH
43600: LD_VAR 0 11
43604: PUSH
43605: EMPTY
43606: EQUAL
43607: OR
43608: IFFALSE 43553
// if not control in _control then
43610: LD_VAR 0 4
43614: PUSH
43615: LD_VAR 0 12
43619: IN
43620: NOT
43621: IFFALSE 43647
// control := _control [ rand ( 1 , _control ) ] ;
43623: LD_ADDR_VAR 0 4
43627: PUSH
43628: LD_VAR 0 12
43632: PUSH
43633: LD_INT 1
43635: PPUSH
43636: LD_VAR 0 12
43640: PPUSH
43641: CALL_OW 12
43645: ARRAY
43646: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43647: LD_VAR 0 2
43651: PPUSH
43652: LD_VAR 0 5
43656: PPUSH
43657: CALL 44015 0 2
43661: NOT
43662: IFFALSE 43721
// repeat weapon := _weapon [ 1 ] ;
43664: LD_ADDR_VAR 0 5
43668: PUSH
43669: LD_VAR 0 10
43673: PUSH
43674: LD_INT 1
43676: ARRAY
43677: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43678: LD_ADDR_VAR 0 10
43682: PUSH
43683: LD_VAR 0 10
43687: PPUSH
43688: LD_INT 1
43690: PPUSH
43691: CALL_OW 3
43695: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43696: LD_VAR 0 2
43700: PPUSH
43701: LD_VAR 0 5
43705: PPUSH
43706: CALL 44015 0 2
43710: PUSH
43711: LD_VAR 0 10
43715: PUSH
43716: EMPTY
43717: EQUAL
43718: OR
43719: IFFALSE 43664
// result := [ ] ;
43721: LD_ADDR_VAR 0 6
43725: PUSH
43726: EMPTY
43727: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43728: LD_VAR 0 1
43732: PPUSH
43733: LD_VAR 0 2
43737: PPUSH
43738: LD_VAR 0 3
43742: PPUSH
43743: LD_VAR 0 4
43747: PPUSH
43748: LD_VAR 0 5
43752: PPUSH
43753: CALL_OW 448
43757: IFFALSE 43790
// result := [ chassis , engine , control , weapon ] ;
43759: LD_ADDR_VAR 0 6
43763: PUSH
43764: LD_VAR 0 2
43768: PUSH
43769: LD_VAR 0 3
43773: PUSH
43774: LD_VAR 0 4
43778: PUSH
43779: LD_VAR 0 5
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// end ;
43790: LD_VAR 0 6
43794: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43795: LD_INT 0
43797: PPUSH
// if not chassis or not engine then
43798: LD_VAR 0 1
43802: NOT
43803: PUSH
43804: LD_VAR 0 2
43808: NOT
43809: OR
43810: IFFALSE 43814
// exit ;
43812: GO 44010
// case engine of engine_solar :
43814: LD_VAR 0 2
43818: PUSH
43819: LD_INT 2
43821: DOUBLE
43822: EQUAL
43823: IFTRUE 43827
43825: GO 43865
43827: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43828: LD_ADDR_VAR 0 3
43832: PUSH
43833: LD_INT 11
43835: PUSH
43836: LD_INT 12
43838: PUSH
43839: LD_INT 13
43841: PUSH
43842: LD_INT 14
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: LD_INT 3
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: ST_TO_ADDR
43863: GO 43994
43865: LD_INT 1
43867: DOUBLE
43868: EQUAL
43869: IFTRUE 43873
43871: GO 43935
43873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43874: LD_ADDR_VAR 0 3
43878: PUSH
43879: LD_INT 11
43881: PUSH
43882: LD_INT 12
43884: PUSH
43885: LD_INT 13
43887: PUSH
43888: LD_INT 14
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 4
43902: PUSH
43903: LD_INT 5
43905: PUSH
43906: LD_INT 21
43908: PUSH
43909: LD_INT 23
43911: PUSH
43912: LD_INT 22
43914: PUSH
43915: LD_INT 24
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: ST_TO_ADDR
43933: GO 43994
43935: LD_INT 3
43937: DOUBLE
43938: EQUAL
43939: IFTRUE 43943
43941: GO 43993
43943: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43944: LD_ADDR_VAR 0 3
43948: PUSH
43949: LD_INT 13
43951: PUSH
43952: LD_INT 14
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: LD_INT 3
43960: PUSH
43961: LD_INT 4
43963: PUSH
43964: LD_INT 5
43966: PUSH
43967: LD_INT 21
43969: PUSH
43970: LD_INT 22
43972: PUSH
43973: LD_INT 23
43975: PUSH
43976: LD_INT 24
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: ST_TO_ADDR
43991: GO 43994
43993: POP
// result := ( chassis in result ) ;
43994: LD_ADDR_VAR 0 3
43998: PUSH
43999: LD_VAR 0 1
44003: PUSH
44004: LD_VAR 0 3
44008: IN
44009: ST_TO_ADDR
// end ;
44010: LD_VAR 0 3
44014: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44015: LD_INT 0
44017: PPUSH
// if not chassis or not weapon then
44018: LD_VAR 0 1
44022: NOT
44023: PUSH
44024: LD_VAR 0 2
44028: NOT
44029: OR
44030: IFFALSE 44034
// exit ;
44032: GO 45094
// case weapon of us_machine_gun :
44034: LD_VAR 0 2
44038: PUSH
44039: LD_INT 2
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44077
44047: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44048: LD_ADDR_VAR 0 3
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 4
44064: PUSH
44065: LD_INT 5
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: ST_TO_ADDR
44075: GO 45078
44077: LD_INT 3
44079: DOUBLE
44080: EQUAL
44081: IFTRUE 44085
44083: GO 44115
44085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: LD_INT 4
44102: PUSH
44103: LD_INT 5
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
44113: GO 45078
44115: LD_INT 11
44117: DOUBLE
44118: EQUAL
44119: IFTRUE 44123
44121: GO 44153
44123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44124: LD_ADDR_VAR 0 3
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 3
44137: PUSH
44138: LD_INT 4
44140: PUSH
44141: LD_INT 5
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: ST_TO_ADDR
44151: GO 45078
44153: LD_INT 4
44155: DOUBLE
44156: EQUAL
44157: IFTRUE 44161
44159: GO 44187
44161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44162: LD_ADDR_VAR 0 3
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: LD_INT 4
44175: PUSH
44176: LD_INT 5
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: ST_TO_ADDR
44185: GO 45078
44187: LD_INT 5
44189: DOUBLE
44190: EQUAL
44191: IFTRUE 44195
44193: GO 44221
44195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44196: LD_ADDR_VAR 0 3
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: LD_INT 4
44209: PUSH
44210: LD_INT 5
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
44219: GO 45078
44221: LD_INT 9
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44255
44229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44230: LD_ADDR_VAR 0 3
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 3
44240: PUSH
44241: LD_INT 4
44243: PUSH
44244: LD_INT 5
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
44253: GO 45078
44255: LD_INT 7
44257: DOUBLE
44258: EQUAL
44259: IFTRUE 44263
44261: GO 44289
44263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44264: LD_ADDR_VAR 0 3
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 3
44274: PUSH
44275: LD_INT 4
44277: PUSH
44278: LD_INT 5
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
44287: GO 45078
44289: LD_INT 12
44291: DOUBLE
44292: EQUAL
44293: IFTRUE 44297
44295: GO 44323
44297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44298: LD_ADDR_VAR 0 3
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 4
44311: PUSH
44312: LD_INT 5
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
44321: GO 45078
44323: LD_INT 13
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44331
44329: GO 44357
44331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 4
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
44355: GO 45078
44357: LD_INT 14
44359: DOUBLE
44360: EQUAL
44361: IFTRUE 44365
44363: GO 44383
44365: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44366: LD_ADDR_VAR 0 3
44370: PUSH
44371: LD_INT 4
44373: PUSH
44374: LD_INT 5
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: ST_TO_ADDR
44381: GO 45078
44383: LD_INT 6
44385: DOUBLE
44386: EQUAL
44387: IFTRUE 44391
44389: GO 44409
44391: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44392: LD_ADDR_VAR 0 3
44396: PUSH
44397: LD_INT 4
44399: PUSH
44400: LD_INT 5
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: ST_TO_ADDR
44407: GO 45078
44409: LD_INT 10
44411: DOUBLE
44412: EQUAL
44413: IFTRUE 44417
44415: GO 44435
44417: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_INT 4
44425: PUSH
44426: LD_INT 5
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: ST_TO_ADDR
44433: GO 45078
44435: LD_INT 22
44437: DOUBLE
44438: EQUAL
44439: IFTRUE 44443
44441: GO 44469
44443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44444: LD_ADDR_VAR 0 3
44448: PUSH
44449: LD_INT 11
44451: PUSH
44452: LD_INT 12
44454: PUSH
44455: LD_INT 13
44457: PUSH
44458: LD_INT 14
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: ST_TO_ADDR
44467: GO 45078
44469: LD_INT 23
44471: DOUBLE
44472: EQUAL
44473: IFTRUE 44477
44475: GO 44503
44477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44478: LD_ADDR_VAR 0 3
44482: PUSH
44483: LD_INT 11
44485: PUSH
44486: LD_INT 12
44488: PUSH
44489: LD_INT 13
44491: PUSH
44492: LD_INT 14
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
44501: GO 45078
44503: LD_INT 24
44505: DOUBLE
44506: EQUAL
44507: IFTRUE 44511
44509: GO 44537
44511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44512: LD_ADDR_VAR 0 3
44516: PUSH
44517: LD_INT 11
44519: PUSH
44520: LD_INT 12
44522: PUSH
44523: LD_INT 13
44525: PUSH
44526: LD_INT 14
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: ST_TO_ADDR
44535: GO 45078
44537: LD_INT 30
44539: DOUBLE
44540: EQUAL
44541: IFTRUE 44545
44543: GO 44571
44545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44546: LD_ADDR_VAR 0 3
44550: PUSH
44551: LD_INT 11
44553: PUSH
44554: LD_INT 12
44556: PUSH
44557: LD_INT 13
44559: PUSH
44560: LD_INT 14
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
44569: GO 45078
44571: LD_INT 25
44573: DOUBLE
44574: EQUAL
44575: IFTRUE 44579
44577: GO 44597
44579: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44580: LD_ADDR_VAR 0 3
44584: PUSH
44585: LD_INT 13
44587: PUSH
44588: LD_INT 14
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: ST_TO_ADDR
44595: GO 45078
44597: LD_INT 27
44599: DOUBLE
44600: EQUAL
44601: IFTRUE 44605
44603: GO 44623
44605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44606: LD_ADDR_VAR 0 3
44610: PUSH
44611: LD_INT 13
44613: PUSH
44614: LD_INT 14
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: ST_TO_ADDR
44621: GO 45078
44623: LD_INT 92
44625: DOUBLE
44626: EQUAL
44627: IFTRUE 44631
44629: GO 44657
44631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44632: LD_ADDR_VAR 0 3
44636: PUSH
44637: LD_INT 11
44639: PUSH
44640: LD_INT 12
44642: PUSH
44643: LD_INT 13
44645: PUSH
44646: LD_INT 14
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
44655: GO 45078
44657: LD_INT 28
44659: DOUBLE
44660: EQUAL
44661: IFTRUE 44665
44663: GO 44683
44665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44666: LD_ADDR_VAR 0 3
44670: PUSH
44671: LD_INT 13
44673: PUSH
44674: LD_INT 14
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: ST_TO_ADDR
44681: GO 45078
44683: LD_INT 29
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44691
44689: GO 44709
44691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_INT 13
44699: PUSH
44700: LD_INT 14
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: ST_TO_ADDR
44707: GO 45078
44709: LD_INT 31
44711: DOUBLE
44712: EQUAL
44713: IFTRUE 44717
44715: GO 44735
44717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44718: LD_ADDR_VAR 0 3
44722: PUSH
44723: LD_INT 13
44725: PUSH
44726: LD_INT 14
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: ST_TO_ADDR
44733: GO 45078
44735: LD_INT 26
44737: DOUBLE
44738: EQUAL
44739: IFTRUE 44743
44741: GO 44761
44743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44744: LD_ADDR_VAR 0 3
44748: PUSH
44749: LD_INT 13
44751: PUSH
44752: LD_INT 14
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: ST_TO_ADDR
44759: GO 45078
44761: LD_INT 42
44763: DOUBLE
44764: EQUAL
44765: IFTRUE 44769
44767: GO 44795
44769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44770: LD_ADDR_VAR 0 3
44774: PUSH
44775: LD_INT 21
44777: PUSH
44778: LD_INT 22
44780: PUSH
44781: LD_INT 23
44783: PUSH
44784: LD_INT 24
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: ST_TO_ADDR
44793: GO 45078
44795: LD_INT 43
44797: DOUBLE
44798: EQUAL
44799: IFTRUE 44803
44801: GO 44829
44803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44804: LD_ADDR_VAR 0 3
44808: PUSH
44809: LD_INT 21
44811: PUSH
44812: LD_INT 22
44814: PUSH
44815: LD_INT 23
44817: PUSH
44818: LD_INT 24
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: ST_TO_ADDR
44827: GO 45078
44829: LD_INT 44
44831: DOUBLE
44832: EQUAL
44833: IFTRUE 44837
44835: GO 44863
44837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44838: LD_ADDR_VAR 0 3
44842: PUSH
44843: LD_INT 21
44845: PUSH
44846: LD_INT 22
44848: PUSH
44849: LD_INT 23
44851: PUSH
44852: LD_INT 24
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
44861: GO 45078
44863: LD_INT 45
44865: DOUBLE
44866: EQUAL
44867: IFTRUE 44871
44869: GO 44897
44871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 21
44879: PUSH
44880: LD_INT 22
44882: PUSH
44883: LD_INT 23
44885: PUSH
44886: LD_INT 24
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
44895: GO 45078
44897: LD_INT 49
44899: DOUBLE
44900: EQUAL
44901: IFTRUE 44905
44903: GO 44931
44905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44906: LD_ADDR_VAR 0 3
44910: PUSH
44911: LD_INT 21
44913: PUSH
44914: LD_INT 22
44916: PUSH
44917: LD_INT 23
44919: PUSH
44920: LD_INT 24
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
44929: GO 45078
44931: LD_INT 51
44933: DOUBLE
44934: EQUAL
44935: IFTRUE 44939
44937: GO 44965
44939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44940: LD_ADDR_VAR 0 3
44944: PUSH
44945: LD_INT 21
44947: PUSH
44948: LD_INT 22
44950: PUSH
44951: LD_INT 23
44953: PUSH
44954: LD_INT 24
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
44963: GO 45078
44965: LD_INT 52
44967: DOUBLE
44968: EQUAL
44969: IFTRUE 44973
44971: GO 44999
44973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: LD_INT 21
44981: PUSH
44982: LD_INT 22
44984: PUSH
44985: LD_INT 23
44987: PUSH
44988: LD_INT 24
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: ST_TO_ADDR
44997: GO 45078
44999: LD_INT 53
45001: DOUBLE
45002: EQUAL
45003: IFTRUE 45007
45005: GO 45025
45007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45008: LD_ADDR_VAR 0 3
45012: PUSH
45013: LD_INT 23
45015: PUSH
45016: LD_INT 24
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: ST_TO_ADDR
45023: GO 45078
45025: LD_INT 46
45027: DOUBLE
45028: EQUAL
45029: IFTRUE 45033
45031: GO 45051
45033: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45034: LD_ADDR_VAR 0 3
45038: PUSH
45039: LD_INT 23
45041: PUSH
45042: LD_INT 24
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: ST_TO_ADDR
45049: GO 45078
45051: LD_INT 47
45053: DOUBLE
45054: EQUAL
45055: IFTRUE 45059
45057: GO 45077
45059: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45060: LD_ADDR_VAR 0 3
45064: PUSH
45065: LD_INT 23
45067: PUSH
45068: LD_INT 24
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: ST_TO_ADDR
45075: GO 45078
45077: POP
// result := ( chassis in result ) ;
45078: LD_ADDR_VAR 0 3
45082: PUSH
45083: LD_VAR 0 1
45087: PUSH
45088: LD_VAR 0 3
45092: IN
45093: ST_TO_ADDR
// end ;
45094: LD_VAR 0 3
45098: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45099: LD_INT 0
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
// result := array ;
45108: LD_ADDR_VAR 0 5
45112: PUSH
45113: LD_VAR 0 1
45117: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45118: LD_VAR 0 1
45122: NOT
45123: PUSH
45124: LD_VAR 0 2
45128: NOT
45129: OR
45130: PUSH
45131: LD_VAR 0 3
45135: NOT
45136: OR
45137: PUSH
45138: LD_VAR 0 2
45142: PUSH
45143: LD_VAR 0 1
45147: GREATER
45148: OR
45149: PUSH
45150: LD_VAR 0 3
45154: PUSH
45155: LD_VAR 0 1
45159: GREATER
45160: OR
45161: IFFALSE 45165
// exit ;
45163: GO 45461
// if direction then
45165: LD_VAR 0 4
45169: IFFALSE 45233
// begin d := 1 ;
45171: LD_ADDR_VAR 0 9
45175: PUSH
45176: LD_INT 1
45178: ST_TO_ADDR
// if i_from > i_to then
45179: LD_VAR 0 2
45183: PUSH
45184: LD_VAR 0 3
45188: GREATER
45189: IFFALSE 45215
// length := ( array - i_from ) + i_to else
45191: LD_ADDR_VAR 0 11
45195: PUSH
45196: LD_VAR 0 1
45200: PUSH
45201: LD_VAR 0 2
45205: MINUS
45206: PUSH
45207: LD_VAR 0 3
45211: PLUS
45212: ST_TO_ADDR
45213: GO 45231
// length := i_to - i_from ;
45215: LD_ADDR_VAR 0 11
45219: PUSH
45220: LD_VAR 0 3
45224: PUSH
45225: LD_VAR 0 2
45229: MINUS
45230: ST_TO_ADDR
// end else
45231: GO 45294
// begin d := - 1 ;
45233: LD_ADDR_VAR 0 9
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: ST_TO_ADDR
// if i_from > i_to then
45242: LD_VAR 0 2
45246: PUSH
45247: LD_VAR 0 3
45251: GREATER
45252: IFFALSE 45272
// length := i_from - i_to else
45254: LD_ADDR_VAR 0 11
45258: PUSH
45259: LD_VAR 0 2
45263: PUSH
45264: LD_VAR 0 3
45268: MINUS
45269: ST_TO_ADDR
45270: GO 45294
// length := ( array - i_to ) + i_from ;
45272: LD_ADDR_VAR 0 11
45276: PUSH
45277: LD_VAR 0 1
45281: PUSH
45282: LD_VAR 0 3
45286: MINUS
45287: PUSH
45288: LD_VAR 0 2
45292: PLUS
45293: ST_TO_ADDR
// end ; if not length then
45294: LD_VAR 0 11
45298: NOT
45299: IFFALSE 45303
// exit ;
45301: GO 45461
// tmp := array ;
45303: LD_ADDR_VAR 0 10
45307: PUSH
45308: LD_VAR 0 1
45312: ST_TO_ADDR
// for i = 1 to length do
45313: LD_ADDR_VAR 0 6
45317: PUSH
45318: DOUBLE
45319: LD_INT 1
45321: DEC
45322: ST_TO_ADDR
45323: LD_VAR 0 11
45327: PUSH
45328: FOR_TO
45329: IFFALSE 45449
// begin for j = 1 to array do
45331: LD_ADDR_VAR 0 7
45335: PUSH
45336: DOUBLE
45337: LD_INT 1
45339: DEC
45340: ST_TO_ADDR
45341: LD_VAR 0 1
45345: PUSH
45346: FOR_TO
45347: IFFALSE 45435
// begin k := j + d ;
45349: LD_ADDR_VAR 0 8
45353: PUSH
45354: LD_VAR 0 7
45358: PUSH
45359: LD_VAR 0 9
45363: PLUS
45364: ST_TO_ADDR
// if k > array then
45365: LD_VAR 0 8
45369: PUSH
45370: LD_VAR 0 1
45374: GREATER
45375: IFFALSE 45385
// k := 1 ;
45377: LD_ADDR_VAR 0 8
45381: PUSH
45382: LD_INT 1
45384: ST_TO_ADDR
// if not k then
45385: LD_VAR 0 8
45389: NOT
45390: IFFALSE 45402
// k := array ;
45392: LD_ADDR_VAR 0 8
45396: PUSH
45397: LD_VAR 0 1
45401: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45402: LD_ADDR_VAR 0 10
45406: PUSH
45407: LD_VAR 0 10
45411: PPUSH
45412: LD_VAR 0 8
45416: PPUSH
45417: LD_VAR 0 1
45421: PUSH
45422: LD_VAR 0 7
45426: ARRAY
45427: PPUSH
45428: CALL_OW 1
45432: ST_TO_ADDR
// end ;
45433: GO 45346
45435: POP
45436: POP
// array := tmp ;
45437: LD_ADDR_VAR 0 1
45441: PUSH
45442: LD_VAR 0 10
45446: ST_TO_ADDR
// end ;
45447: GO 45328
45449: POP
45450: POP
// result := array ;
45451: LD_ADDR_VAR 0 5
45455: PUSH
45456: LD_VAR 0 1
45460: ST_TO_ADDR
// end ;
45461: LD_VAR 0 5
45465: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45466: LD_INT 0
45468: PPUSH
45469: PPUSH
// result := 0 ;
45470: LD_ADDR_VAR 0 3
45474: PUSH
45475: LD_INT 0
45477: ST_TO_ADDR
// if not array or not value in array then
45478: LD_VAR 0 1
45482: NOT
45483: PUSH
45484: LD_VAR 0 2
45488: PUSH
45489: LD_VAR 0 1
45493: IN
45494: NOT
45495: OR
45496: IFFALSE 45500
// exit ;
45498: GO 45554
// for i = 1 to array do
45500: LD_ADDR_VAR 0 4
45504: PUSH
45505: DOUBLE
45506: LD_INT 1
45508: DEC
45509: ST_TO_ADDR
45510: LD_VAR 0 1
45514: PUSH
45515: FOR_TO
45516: IFFALSE 45552
// if value = array [ i ] then
45518: LD_VAR 0 2
45522: PUSH
45523: LD_VAR 0 1
45527: PUSH
45528: LD_VAR 0 4
45532: ARRAY
45533: EQUAL
45534: IFFALSE 45550
// begin result := i ;
45536: LD_ADDR_VAR 0 3
45540: PUSH
45541: LD_VAR 0 4
45545: ST_TO_ADDR
// exit ;
45546: POP
45547: POP
45548: GO 45554
// end ;
45550: GO 45515
45552: POP
45553: POP
// end ;
45554: LD_VAR 0 3
45558: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45559: LD_INT 0
45561: PPUSH
// vc_chassis := chassis ;
45562: LD_ADDR_OWVAR 37
45566: PUSH
45567: LD_VAR 0 1
45571: ST_TO_ADDR
// vc_engine := engine ;
45572: LD_ADDR_OWVAR 39
45576: PUSH
45577: LD_VAR 0 2
45581: ST_TO_ADDR
// vc_control := control ;
45582: LD_ADDR_OWVAR 38
45586: PUSH
45587: LD_VAR 0 3
45591: ST_TO_ADDR
// vc_weapon := weapon ;
45592: LD_ADDR_OWVAR 40
45596: PUSH
45597: LD_VAR 0 4
45601: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45602: LD_ADDR_OWVAR 41
45606: PUSH
45607: LD_VAR 0 5
45611: ST_TO_ADDR
// end ;
45612: LD_VAR 0 6
45616: RET
// export function WantPlant ( unit ) ; var task ; begin
45617: LD_INT 0
45619: PPUSH
45620: PPUSH
// result := false ;
45621: LD_ADDR_VAR 0 2
45625: PUSH
45626: LD_INT 0
45628: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45629: LD_ADDR_VAR 0 3
45633: PUSH
45634: LD_VAR 0 1
45638: PPUSH
45639: CALL_OW 437
45643: ST_TO_ADDR
// if task then
45644: LD_VAR 0 3
45648: IFFALSE 45676
// if task [ 1 ] [ 1 ] = p then
45650: LD_VAR 0 3
45654: PUSH
45655: LD_INT 1
45657: ARRAY
45658: PUSH
45659: LD_INT 1
45661: ARRAY
45662: PUSH
45663: LD_STRING p
45665: EQUAL
45666: IFFALSE 45676
// result := true ;
45668: LD_ADDR_VAR 0 2
45672: PUSH
45673: LD_INT 1
45675: ST_TO_ADDR
// end ;
45676: LD_VAR 0 2
45680: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45681: LD_INT 0
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
// if pos < 1 then
45687: LD_VAR 0 2
45691: PUSH
45692: LD_INT 1
45694: LESS
45695: IFFALSE 45699
// exit ;
45697: GO 46002
// if pos = 1 then
45699: LD_VAR 0 2
45703: PUSH
45704: LD_INT 1
45706: EQUAL
45707: IFFALSE 45740
// result := Replace ( arr , pos [ 1 ] , value ) else
45709: LD_ADDR_VAR 0 4
45713: PUSH
45714: LD_VAR 0 1
45718: PPUSH
45719: LD_VAR 0 2
45723: PUSH
45724: LD_INT 1
45726: ARRAY
45727: PPUSH
45728: LD_VAR 0 3
45732: PPUSH
45733: CALL_OW 1
45737: ST_TO_ADDR
45738: GO 46002
// begin tmp := arr ;
45740: LD_ADDR_VAR 0 6
45744: PUSH
45745: LD_VAR 0 1
45749: ST_TO_ADDR
// s_arr := [ tmp ] ;
45750: LD_ADDR_VAR 0 7
45754: PUSH
45755: LD_VAR 0 6
45759: PUSH
45760: EMPTY
45761: LIST
45762: ST_TO_ADDR
// for i = 1 to pos - 1 do
45763: LD_ADDR_VAR 0 5
45767: PUSH
45768: DOUBLE
45769: LD_INT 1
45771: DEC
45772: ST_TO_ADDR
45773: LD_VAR 0 2
45777: PUSH
45778: LD_INT 1
45780: MINUS
45781: PUSH
45782: FOR_TO
45783: IFFALSE 45828
// begin tmp := tmp [ pos [ i ] ] ;
45785: LD_ADDR_VAR 0 6
45789: PUSH
45790: LD_VAR 0 6
45794: PUSH
45795: LD_VAR 0 2
45799: PUSH
45800: LD_VAR 0 5
45804: ARRAY
45805: ARRAY
45806: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45807: LD_ADDR_VAR 0 7
45811: PUSH
45812: LD_VAR 0 7
45816: PUSH
45817: LD_VAR 0 6
45821: PUSH
45822: EMPTY
45823: LIST
45824: ADD
45825: ST_TO_ADDR
// end ;
45826: GO 45782
45828: POP
45829: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45830: LD_ADDR_VAR 0 6
45834: PUSH
45835: LD_VAR 0 6
45839: PPUSH
45840: LD_VAR 0 2
45844: PUSH
45845: LD_VAR 0 2
45849: ARRAY
45850: PPUSH
45851: LD_VAR 0 3
45855: PPUSH
45856: CALL_OW 1
45860: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45861: LD_ADDR_VAR 0 7
45865: PUSH
45866: LD_VAR 0 7
45870: PPUSH
45871: LD_VAR 0 7
45875: PPUSH
45876: LD_VAR 0 6
45880: PPUSH
45881: CALL_OW 1
45885: ST_TO_ADDR
// for i = s_arr downto 2 do
45886: LD_ADDR_VAR 0 5
45890: PUSH
45891: DOUBLE
45892: LD_VAR 0 7
45896: INC
45897: ST_TO_ADDR
45898: LD_INT 2
45900: PUSH
45901: FOR_DOWNTO
45902: IFFALSE 45986
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45904: LD_ADDR_VAR 0 6
45908: PUSH
45909: LD_VAR 0 7
45913: PUSH
45914: LD_VAR 0 5
45918: PUSH
45919: LD_INT 1
45921: MINUS
45922: ARRAY
45923: PPUSH
45924: LD_VAR 0 2
45928: PUSH
45929: LD_VAR 0 5
45933: PUSH
45934: LD_INT 1
45936: MINUS
45937: ARRAY
45938: PPUSH
45939: LD_VAR 0 7
45943: PUSH
45944: LD_VAR 0 5
45948: ARRAY
45949: PPUSH
45950: CALL_OW 1
45954: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45955: LD_ADDR_VAR 0 7
45959: PUSH
45960: LD_VAR 0 7
45964: PPUSH
45965: LD_VAR 0 5
45969: PUSH
45970: LD_INT 1
45972: MINUS
45973: PPUSH
45974: LD_VAR 0 6
45978: PPUSH
45979: CALL_OW 1
45983: ST_TO_ADDR
// end ;
45984: GO 45901
45986: POP
45987: POP
// result := s_arr [ 1 ] ;
45988: LD_ADDR_VAR 0 4
45992: PUSH
45993: LD_VAR 0 7
45997: PUSH
45998: LD_INT 1
46000: ARRAY
46001: ST_TO_ADDR
// end ; end ;
46002: LD_VAR 0 4
46006: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46007: LD_INT 0
46009: PPUSH
46010: PPUSH
// if not list then
46011: LD_VAR 0 1
46015: NOT
46016: IFFALSE 46020
// exit ;
46018: GO 46111
// i := list [ pos1 ] ;
46020: LD_ADDR_VAR 0 5
46024: PUSH
46025: LD_VAR 0 1
46029: PUSH
46030: LD_VAR 0 2
46034: ARRAY
46035: ST_TO_ADDR
// if not i then
46036: LD_VAR 0 5
46040: NOT
46041: IFFALSE 46045
// exit ;
46043: GO 46111
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46045: LD_ADDR_VAR 0 1
46049: PUSH
46050: LD_VAR 0 1
46054: PPUSH
46055: LD_VAR 0 2
46059: PPUSH
46060: LD_VAR 0 1
46064: PUSH
46065: LD_VAR 0 3
46069: ARRAY
46070: PPUSH
46071: CALL_OW 1
46075: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46076: LD_ADDR_VAR 0 1
46080: PUSH
46081: LD_VAR 0 1
46085: PPUSH
46086: LD_VAR 0 3
46090: PPUSH
46091: LD_VAR 0 5
46095: PPUSH
46096: CALL_OW 1
46100: ST_TO_ADDR
// result := list ;
46101: LD_ADDR_VAR 0 4
46105: PUSH
46106: LD_VAR 0 1
46110: ST_TO_ADDR
// end ;
46111: LD_VAR 0 4
46115: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46116: LD_INT 0
46118: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46119: LD_ADDR_VAR 0 5
46123: PUSH
46124: LD_VAR 0 1
46128: PPUSH
46129: CALL_OW 250
46133: PPUSH
46134: LD_VAR 0 1
46138: PPUSH
46139: CALL_OW 251
46143: PPUSH
46144: LD_VAR 0 2
46148: PPUSH
46149: LD_VAR 0 3
46153: PPUSH
46154: LD_VAR 0 4
46158: PPUSH
46159: CALL 46537 0 5
46163: ST_TO_ADDR
// end ;
46164: LD_VAR 0 5
46168: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46169: LD_INT 0
46171: PPUSH
46172: PPUSH
46173: PPUSH
46174: PPUSH
// if not list or not unit then
46175: LD_VAR 0 2
46179: NOT
46180: PUSH
46181: LD_VAR 0 1
46185: NOT
46186: OR
46187: IFFALSE 46191
// exit ;
46189: GO 46532
// result := [ ] ;
46191: LD_ADDR_VAR 0 5
46195: PUSH
46196: EMPTY
46197: ST_TO_ADDR
// for i in list do
46198: LD_ADDR_VAR 0 6
46202: PUSH
46203: LD_VAR 0 2
46207: PUSH
46208: FOR_IN
46209: IFFALSE 46427
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46211: LD_ADDR_VAR 0 8
46215: PUSH
46216: LD_VAR 0 1
46220: PPUSH
46221: LD_VAR 0 6
46225: PUSH
46226: LD_INT 1
46228: ARRAY
46229: PPUSH
46230: LD_VAR 0 6
46234: PUSH
46235: LD_INT 2
46237: ARRAY
46238: PPUSH
46239: CALL_OW 297
46243: ST_TO_ADDR
// if not Count ( result ) then
46244: LD_VAR 0 5
46248: PPUSH
46249: CALL 42821 0 1
46253: NOT
46254: IFFALSE 46287
// begin result := Join ( result , [ i , tmp ] ) ;
46256: LD_ADDR_VAR 0 5
46260: PUSH
46261: LD_VAR 0 5
46265: PPUSH
46266: LD_VAR 0 6
46270: PUSH
46271: LD_VAR 0 8
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PPUSH
46280: CALL 78410 0 2
46284: ST_TO_ADDR
// continue ;
46285: GO 46208
// end ; if result [ result ] [ 2 ] <= tmp then
46287: LD_VAR 0 5
46291: PUSH
46292: LD_VAR 0 5
46296: ARRAY
46297: PUSH
46298: LD_INT 2
46300: ARRAY
46301: PUSH
46302: LD_VAR 0 8
46306: LESSEQUAL
46307: IFFALSE 46340
// result := Join ( result , [ i , tmp ] ) else
46309: LD_ADDR_VAR 0 5
46313: PUSH
46314: LD_VAR 0 5
46318: PPUSH
46319: LD_VAR 0 6
46323: PUSH
46324: LD_VAR 0 8
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PPUSH
46333: CALL 78410 0 2
46337: ST_TO_ADDR
46338: GO 46425
// begin for j := 1 to Count ( result ) do
46340: LD_ADDR_VAR 0 7
46344: PUSH
46345: DOUBLE
46346: LD_INT 1
46348: DEC
46349: ST_TO_ADDR
46350: LD_VAR 0 5
46354: PPUSH
46355: CALL 42821 0 1
46359: PUSH
46360: FOR_TO
46361: IFFALSE 46423
// begin if tmp < result [ j ] [ 2 ] then
46363: LD_VAR 0 8
46367: PUSH
46368: LD_VAR 0 5
46372: PUSH
46373: LD_VAR 0 7
46377: ARRAY
46378: PUSH
46379: LD_INT 2
46381: ARRAY
46382: LESS
46383: IFFALSE 46421
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46385: LD_ADDR_VAR 0 5
46389: PUSH
46390: LD_VAR 0 5
46394: PPUSH
46395: LD_VAR 0 7
46399: PPUSH
46400: LD_VAR 0 6
46404: PUSH
46405: LD_VAR 0 8
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PPUSH
46414: CALL_OW 2
46418: ST_TO_ADDR
// break ;
46419: GO 46423
// end ; end ;
46421: GO 46360
46423: POP
46424: POP
// end ; end ;
46425: GO 46208
46427: POP
46428: POP
// if result and not asc then
46429: LD_VAR 0 5
46433: PUSH
46434: LD_VAR 0 3
46438: NOT
46439: AND
46440: IFFALSE 46457
// result := ReverseArray ( result ) ;
46442: LD_ADDR_VAR 0 5
46446: PUSH
46447: LD_VAR 0 5
46451: PPUSH
46452: CALL 73697 0 1
46456: ST_TO_ADDR
// tmp := [ ] ;
46457: LD_ADDR_VAR 0 8
46461: PUSH
46462: EMPTY
46463: ST_TO_ADDR
// if mode then
46464: LD_VAR 0 4
46468: IFFALSE 46532
// begin for i := 1 to result do
46470: LD_ADDR_VAR 0 6
46474: PUSH
46475: DOUBLE
46476: LD_INT 1
46478: DEC
46479: ST_TO_ADDR
46480: LD_VAR 0 5
46484: PUSH
46485: FOR_TO
46486: IFFALSE 46520
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46488: LD_ADDR_VAR 0 8
46492: PUSH
46493: LD_VAR 0 8
46497: PPUSH
46498: LD_VAR 0 5
46502: PUSH
46503: LD_VAR 0 6
46507: ARRAY
46508: PUSH
46509: LD_INT 1
46511: ARRAY
46512: PPUSH
46513: CALL 78410 0 2
46517: ST_TO_ADDR
46518: GO 46485
46520: POP
46521: POP
// result := tmp ;
46522: LD_ADDR_VAR 0 5
46526: PUSH
46527: LD_VAR 0 8
46531: ST_TO_ADDR
// end ; end ;
46532: LD_VAR 0 5
46536: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46537: LD_INT 0
46539: PPUSH
46540: PPUSH
46541: PPUSH
46542: PPUSH
// if not list then
46543: LD_VAR 0 3
46547: NOT
46548: IFFALSE 46552
// exit ;
46550: GO 46940
// result := [ ] ;
46552: LD_ADDR_VAR 0 6
46556: PUSH
46557: EMPTY
46558: ST_TO_ADDR
// for i in list do
46559: LD_ADDR_VAR 0 7
46563: PUSH
46564: LD_VAR 0 3
46568: PUSH
46569: FOR_IN
46570: IFFALSE 46772
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46572: LD_ADDR_VAR 0 9
46576: PUSH
46577: LD_VAR 0 7
46581: PPUSH
46582: LD_VAR 0 1
46586: PPUSH
46587: LD_VAR 0 2
46591: PPUSH
46592: CALL_OW 297
46596: ST_TO_ADDR
// if not result then
46597: LD_VAR 0 6
46601: NOT
46602: IFFALSE 46628
// result := [ [ i , tmp ] ] else
46604: LD_ADDR_VAR 0 6
46608: PUSH
46609: LD_VAR 0 7
46613: PUSH
46614: LD_VAR 0 9
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: ST_TO_ADDR
46626: GO 46770
// begin if result [ result ] [ 2 ] < tmp then
46628: LD_VAR 0 6
46632: PUSH
46633: LD_VAR 0 6
46637: ARRAY
46638: PUSH
46639: LD_INT 2
46641: ARRAY
46642: PUSH
46643: LD_VAR 0 9
46647: LESS
46648: IFFALSE 46690
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46650: LD_ADDR_VAR 0 6
46654: PUSH
46655: LD_VAR 0 6
46659: PPUSH
46660: LD_VAR 0 6
46664: PUSH
46665: LD_INT 1
46667: PLUS
46668: PPUSH
46669: LD_VAR 0 7
46673: PUSH
46674: LD_VAR 0 9
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PPUSH
46683: CALL_OW 2
46687: ST_TO_ADDR
46688: GO 46770
// for j = 1 to result do
46690: LD_ADDR_VAR 0 8
46694: PUSH
46695: DOUBLE
46696: LD_INT 1
46698: DEC
46699: ST_TO_ADDR
46700: LD_VAR 0 6
46704: PUSH
46705: FOR_TO
46706: IFFALSE 46768
// begin if tmp < result [ j ] [ 2 ] then
46708: LD_VAR 0 9
46712: PUSH
46713: LD_VAR 0 6
46717: PUSH
46718: LD_VAR 0 8
46722: ARRAY
46723: PUSH
46724: LD_INT 2
46726: ARRAY
46727: LESS
46728: IFFALSE 46766
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46730: LD_ADDR_VAR 0 6
46734: PUSH
46735: LD_VAR 0 6
46739: PPUSH
46740: LD_VAR 0 8
46744: PPUSH
46745: LD_VAR 0 7
46749: PUSH
46750: LD_VAR 0 9
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PPUSH
46759: CALL_OW 2
46763: ST_TO_ADDR
// break ;
46764: GO 46768
// end ; end ;
46766: GO 46705
46768: POP
46769: POP
// end ; end ;
46770: GO 46569
46772: POP
46773: POP
// if result and not asc then
46774: LD_VAR 0 6
46778: PUSH
46779: LD_VAR 0 4
46783: NOT
46784: AND
46785: IFFALSE 46860
// begin tmp := result ;
46787: LD_ADDR_VAR 0 9
46791: PUSH
46792: LD_VAR 0 6
46796: ST_TO_ADDR
// for i = tmp downto 1 do
46797: LD_ADDR_VAR 0 7
46801: PUSH
46802: DOUBLE
46803: LD_VAR 0 9
46807: INC
46808: ST_TO_ADDR
46809: LD_INT 1
46811: PUSH
46812: FOR_DOWNTO
46813: IFFALSE 46858
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46815: LD_ADDR_VAR 0 6
46819: PUSH
46820: LD_VAR 0 6
46824: PPUSH
46825: LD_VAR 0 9
46829: PUSH
46830: LD_VAR 0 7
46834: MINUS
46835: PUSH
46836: LD_INT 1
46838: PLUS
46839: PPUSH
46840: LD_VAR 0 9
46844: PUSH
46845: LD_VAR 0 7
46849: ARRAY
46850: PPUSH
46851: CALL_OW 1
46855: ST_TO_ADDR
46856: GO 46812
46858: POP
46859: POP
// end ; tmp := [ ] ;
46860: LD_ADDR_VAR 0 9
46864: PUSH
46865: EMPTY
46866: ST_TO_ADDR
// if mode then
46867: LD_VAR 0 5
46871: IFFALSE 46940
// begin for i = 1 to result do
46873: LD_ADDR_VAR 0 7
46877: PUSH
46878: DOUBLE
46879: LD_INT 1
46881: DEC
46882: ST_TO_ADDR
46883: LD_VAR 0 6
46887: PUSH
46888: FOR_TO
46889: IFFALSE 46928
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46891: LD_ADDR_VAR 0 9
46895: PUSH
46896: LD_VAR 0 9
46900: PPUSH
46901: LD_VAR 0 7
46905: PPUSH
46906: LD_VAR 0 6
46910: PUSH
46911: LD_VAR 0 7
46915: ARRAY
46916: PUSH
46917: LD_INT 1
46919: ARRAY
46920: PPUSH
46921: CALL_OW 1
46925: ST_TO_ADDR
46926: GO 46888
46928: POP
46929: POP
// result := tmp ;
46930: LD_ADDR_VAR 0 6
46934: PUSH
46935: LD_VAR 0 9
46939: ST_TO_ADDR
// end ; end ;
46940: LD_VAR 0 6
46944: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46945: LD_INT 0
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46953: LD_ADDR_VAR 0 5
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: ST_TO_ADDR
// if not x or not y then
46975: LD_VAR 0 2
46979: NOT
46980: PUSH
46981: LD_VAR 0 3
46985: NOT
46986: OR
46987: IFFALSE 46991
// exit ;
46989: GO 48641
// if not range then
46991: LD_VAR 0 4
46995: NOT
46996: IFFALSE 47006
// range := 10 ;
46998: LD_ADDR_VAR 0 4
47002: PUSH
47003: LD_INT 10
47005: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47006: LD_ADDR_VAR 0 8
47010: PUSH
47011: LD_INT 81
47013: PUSH
47014: LD_VAR 0 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 92
47025: PUSH
47026: LD_VAR 0 2
47030: PUSH
47031: LD_VAR 0 3
47035: PUSH
47036: LD_VAR 0 4
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: LD_INT 21
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: PPUSH
47069: CALL_OW 69
47073: ST_TO_ADDR
// if not tmp then
47074: LD_VAR 0 8
47078: NOT
47079: IFFALSE 47083
// exit ;
47081: GO 48641
// for i in tmp do
47083: LD_ADDR_VAR 0 6
47087: PUSH
47088: LD_VAR 0 8
47092: PUSH
47093: FOR_IN
47094: IFFALSE 48616
// begin points := [ 0 , 0 , 0 ] ;
47096: LD_ADDR_VAR 0 9
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// bpoints := 1 ;
47115: LD_ADDR_VAR 0 10
47119: PUSH
47120: LD_INT 1
47122: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47123: LD_VAR 0 6
47127: PPUSH
47128: CALL_OW 247
47132: PUSH
47133: LD_INT 1
47135: DOUBLE
47136: EQUAL
47137: IFTRUE 47141
47139: GO 47719
47141: POP
// begin if GetClass ( i ) = 1 then
47142: LD_VAR 0 6
47146: PPUSH
47147: CALL_OW 257
47151: PUSH
47152: LD_INT 1
47154: EQUAL
47155: IFFALSE 47176
// points := [ 10 , 5 , 3 ] ;
47157: LD_ADDR_VAR 0 9
47161: PUSH
47162: LD_INT 10
47164: PUSH
47165: LD_INT 5
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47176: LD_VAR 0 6
47180: PPUSH
47181: CALL_OW 257
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: LD_INT 4
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: IN
47200: IFFALSE 47221
// points := [ 3 , 2 , 1 ] ;
47202: LD_ADDR_VAR 0 9
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47221: LD_VAR 0 6
47225: PPUSH
47226: CALL_OW 257
47230: PUSH
47231: LD_INT 5
47233: EQUAL
47234: IFFALSE 47255
// points := [ 130 , 5 , 2 ] ;
47236: LD_ADDR_VAR 0 9
47240: PUSH
47241: LD_INT 130
47243: PUSH
47244: LD_INT 5
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47255: LD_VAR 0 6
47259: PPUSH
47260: CALL_OW 257
47264: PUSH
47265: LD_INT 8
47267: EQUAL
47268: IFFALSE 47289
// points := [ 35 , 35 , 30 ] ;
47270: LD_ADDR_VAR 0 9
47274: PUSH
47275: LD_INT 35
47277: PUSH
47278: LD_INT 35
47280: PUSH
47281: LD_INT 30
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: LIST
47288: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47289: LD_VAR 0 6
47293: PPUSH
47294: CALL_OW 257
47298: PUSH
47299: LD_INT 9
47301: EQUAL
47302: IFFALSE 47323
// points := [ 20 , 55 , 40 ] ;
47304: LD_ADDR_VAR 0 9
47308: PUSH
47309: LD_INT 20
47311: PUSH
47312: LD_INT 55
47314: PUSH
47315: LD_INT 40
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47323: LD_VAR 0 6
47327: PPUSH
47328: CALL_OW 257
47332: PUSH
47333: LD_INT 12
47335: PUSH
47336: LD_INT 16
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: IN
47343: IFFALSE 47364
// points := [ 5 , 3 , 2 ] ;
47345: LD_ADDR_VAR 0 9
47349: PUSH
47350: LD_INT 5
47352: PUSH
47353: LD_INT 3
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47364: LD_VAR 0 6
47368: PPUSH
47369: CALL_OW 257
47373: PUSH
47374: LD_INT 17
47376: EQUAL
47377: IFFALSE 47398
// points := [ 100 , 50 , 75 ] ;
47379: LD_ADDR_VAR 0 9
47383: PUSH
47384: LD_INT 100
47386: PUSH
47387: LD_INT 50
47389: PUSH
47390: LD_INT 75
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47398: LD_VAR 0 6
47402: PPUSH
47403: CALL_OW 257
47407: PUSH
47408: LD_INT 15
47410: EQUAL
47411: IFFALSE 47432
// points := [ 10 , 5 , 3 ] ;
47413: LD_ADDR_VAR 0 9
47417: PUSH
47418: LD_INT 10
47420: PUSH
47421: LD_INT 5
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47432: LD_VAR 0 6
47436: PPUSH
47437: CALL_OW 257
47441: PUSH
47442: LD_INT 14
47444: EQUAL
47445: IFFALSE 47466
// points := [ 10 , 0 , 0 ] ;
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: LD_INT 10
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47466: LD_VAR 0 6
47470: PPUSH
47471: CALL_OW 257
47475: PUSH
47476: LD_INT 11
47478: EQUAL
47479: IFFALSE 47500
// points := [ 30 , 10 , 5 ] ;
47481: LD_ADDR_VAR 0 9
47485: PUSH
47486: LD_INT 30
47488: PUSH
47489: LD_INT 10
47491: PUSH
47492: LD_INT 5
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47500: LD_VAR 0 1
47504: PPUSH
47505: LD_INT 5
47507: PPUSH
47508: CALL_OW 321
47512: PUSH
47513: LD_INT 2
47515: EQUAL
47516: IFFALSE 47533
// bpoints := bpoints * 1.8 ;
47518: LD_ADDR_VAR 0 10
47522: PUSH
47523: LD_VAR 0 10
47527: PUSH
47528: LD_REAL  1.80000000000000E+0000
47531: MUL
47532: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47533: LD_VAR 0 6
47537: PPUSH
47538: CALL_OW 257
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 3
47551: PUSH
47552: LD_INT 4
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: IN
47561: PUSH
47562: LD_VAR 0 1
47566: PPUSH
47567: LD_INT 51
47569: PPUSH
47570: CALL_OW 321
47574: PUSH
47575: LD_INT 2
47577: EQUAL
47578: AND
47579: IFFALSE 47596
// bpoints := bpoints * 1.2 ;
47581: LD_ADDR_VAR 0 10
47585: PUSH
47586: LD_VAR 0 10
47590: PUSH
47591: LD_REAL  1.20000000000000E+0000
47594: MUL
47595: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47596: LD_VAR 0 6
47600: PPUSH
47601: CALL_OW 257
47605: PUSH
47606: LD_INT 5
47608: PUSH
47609: LD_INT 7
47611: PUSH
47612: LD_INT 9
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: IN
47620: PUSH
47621: LD_VAR 0 1
47625: PPUSH
47626: LD_INT 52
47628: PPUSH
47629: CALL_OW 321
47633: PUSH
47634: LD_INT 2
47636: EQUAL
47637: AND
47638: IFFALSE 47655
// bpoints := bpoints * 1.5 ;
47640: LD_ADDR_VAR 0 10
47644: PUSH
47645: LD_VAR 0 10
47649: PUSH
47650: LD_REAL  1.50000000000000E+0000
47653: MUL
47654: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47655: LD_VAR 0 1
47659: PPUSH
47660: LD_INT 66
47662: PPUSH
47663: CALL_OW 321
47667: PUSH
47668: LD_INT 2
47670: EQUAL
47671: IFFALSE 47688
// bpoints := bpoints * 1.1 ;
47673: LD_ADDR_VAR 0 10
47677: PUSH
47678: LD_VAR 0 10
47682: PUSH
47683: LD_REAL  1.10000000000000E+0000
47686: MUL
47687: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47688: LD_ADDR_VAR 0 10
47692: PUSH
47693: LD_VAR 0 10
47697: PUSH
47698: LD_VAR 0 6
47702: PPUSH
47703: LD_INT 1
47705: PPUSH
47706: CALL_OW 259
47710: PUSH
47711: LD_REAL  1.15000000000000E+0000
47714: MUL
47715: MUL
47716: ST_TO_ADDR
// end ; unit_vehicle :
47717: GO 48545
47719: LD_INT 2
47721: DOUBLE
47722: EQUAL
47723: IFTRUE 47727
47725: GO 48533
47727: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47728: LD_VAR 0 6
47732: PPUSH
47733: CALL_OW 264
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 42
47743: PUSH
47744: LD_INT 24
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: IN
47752: IFFALSE 47773
// points := [ 25 , 5 , 3 ] ;
47754: LD_ADDR_VAR 0 9
47758: PUSH
47759: LD_INT 25
47761: PUSH
47762: LD_INT 5
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47773: LD_VAR 0 6
47777: PPUSH
47778: CALL_OW 264
47782: PUSH
47783: LD_INT 4
47785: PUSH
47786: LD_INT 43
47788: PUSH
47789: LD_INT 25
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: IN
47797: IFFALSE 47818
// points := [ 40 , 15 , 5 ] ;
47799: LD_ADDR_VAR 0 9
47803: PUSH
47804: LD_INT 40
47806: PUSH
47807: LD_INT 15
47809: PUSH
47810: LD_INT 5
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47818: LD_VAR 0 6
47822: PPUSH
47823: CALL_OW 264
47827: PUSH
47828: LD_INT 3
47830: PUSH
47831: LD_INT 23
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: IN
47838: IFFALSE 47859
// points := [ 7 , 25 , 8 ] ;
47840: LD_ADDR_VAR 0 9
47844: PUSH
47845: LD_INT 7
47847: PUSH
47848: LD_INT 25
47850: PUSH
47851: LD_INT 8
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47859: LD_VAR 0 6
47863: PPUSH
47864: CALL_OW 264
47868: PUSH
47869: LD_INT 5
47871: PUSH
47872: LD_INT 27
47874: PUSH
47875: LD_INT 44
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: IN
47883: IFFALSE 47904
// points := [ 14 , 50 , 16 ] ;
47885: LD_ADDR_VAR 0 9
47889: PUSH
47890: LD_INT 14
47892: PUSH
47893: LD_INT 50
47895: PUSH
47896: LD_INT 16
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47904: LD_VAR 0 6
47908: PPUSH
47909: CALL_OW 264
47913: PUSH
47914: LD_INT 6
47916: PUSH
47917: LD_INT 46
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: IN
47924: IFFALSE 47945
// points := [ 32 , 120 , 70 ] ;
47926: LD_ADDR_VAR 0 9
47930: PUSH
47931: LD_INT 32
47933: PUSH
47934: LD_INT 120
47936: PUSH
47937: LD_INT 70
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47945: LD_VAR 0 6
47949: PPUSH
47950: CALL_OW 264
47954: PUSH
47955: LD_INT 7
47957: PUSH
47958: LD_INT 28
47960: PUSH
47961: LD_INT 45
47963: PUSH
47964: LD_INT 92
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: IN
47973: IFFALSE 47994
// points := [ 35 , 20 , 45 ] ;
47975: LD_ADDR_VAR 0 9
47979: PUSH
47980: LD_INT 35
47982: PUSH
47983: LD_INT 20
47985: PUSH
47986: LD_INT 45
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47994: LD_VAR 0 6
47998: PPUSH
47999: CALL_OW 264
48003: PUSH
48004: LD_INT 47
48006: PUSH
48007: EMPTY
48008: LIST
48009: IN
48010: IFFALSE 48031
// points := [ 67 , 45 , 75 ] ;
48012: LD_ADDR_VAR 0 9
48016: PUSH
48017: LD_INT 67
48019: PUSH
48020: LD_INT 45
48022: PUSH
48023: LD_INT 75
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: LIST
48030: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48031: LD_VAR 0 6
48035: PPUSH
48036: CALL_OW 264
48040: PUSH
48041: LD_INT 26
48043: PUSH
48044: EMPTY
48045: LIST
48046: IN
48047: IFFALSE 48068
// points := [ 120 , 30 , 80 ] ;
48049: LD_ADDR_VAR 0 9
48053: PUSH
48054: LD_INT 120
48056: PUSH
48057: LD_INT 30
48059: PUSH
48060: LD_INT 80
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48068: LD_VAR 0 6
48072: PPUSH
48073: CALL_OW 264
48077: PUSH
48078: LD_INT 22
48080: PUSH
48081: EMPTY
48082: LIST
48083: IN
48084: IFFALSE 48105
// points := [ 40 , 1 , 1 ] ;
48086: LD_ADDR_VAR 0 9
48090: PUSH
48091: LD_INT 40
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48105: LD_VAR 0 6
48109: PPUSH
48110: CALL_OW 264
48114: PUSH
48115: LD_INT 29
48117: PUSH
48118: EMPTY
48119: LIST
48120: IN
48121: IFFALSE 48142
// points := [ 70 , 200 , 400 ] ;
48123: LD_ADDR_VAR 0 9
48127: PUSH
48128: LD_INT 70
48130: PUSH
48131: LD_INT 200
48133: PUSH
48134: LD_INT 400
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48142: LD_VAR 0 6
48146: PPUSH
48147: CALL_OW 264
48151: PUSH
48152: LD_INT 14
48154: PUSH
48155: LD_INT 53
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: IN
48162: IFFALSE 48183
// points := [ 40 , 10 , 20 ] ;
48164: LD_ADDR_VAR 0 9
48168: PUSH
48169: LD_INT 40
48171: PUSH
48172: LD_INT 10
48174: PUSH
48175: LD_INT 20
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48183: LD_VAR 0 6
48187: PPUSH
48188: CALL_OW 264
48192: PUSH
48193: LD_INT 9
48195: PUSH
48196: EMPTY
48197: LIST
48198: IN
48199: IFFALSE 48220
// points := [ 5 , 70 , 20 ] ;
48201: LD_ADDR_VAR 0 9
48205: PUSH
48206: LD_INT 5
48208: PUSH
48209: LD_INT 70
48211: PUSH
48212: LD_INT 20
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48220: LD_VAR 0 6
48224: PPUSH
48225: CALL_OW 264
48229: PUSH
48230: LD_INT 10
48232: PUSH
48233: EMPTY
48234: LIST
48235: IN
48236: IFFALSE 48257
// points := [ 35 , 110 , 70 ] ;
48238: LD_ADDR_VAR 0 9
48242: PUSH
48243: LD_INT 35
48245: PUSH
48246: LD_INT 110
48248: PUSH
48249: LD_INT 70
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48257: LD_VAR 0 6
48261: PPUSH
48262: CALL_OW 265
48266: PUSH
48267: LD_INT 25
48269: EQUAL
48270: IFFALSE 48291
// points := [ 80 , 65 , 100 ] ;
48272: LD_ADDR_VAR 0 9
48276: PUSH
48277: LD_INT 80
48279: PUSH
48280: LD_INT 65
48282: PUSH
48283: LD_INT 100
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48291: LD_VAR 0 6
48295: PPUSH
48296: CALL_OW 263
48300: PUSH
48301: LD_INT 1
48303: EQUAL
48304: IFFALSE 48339
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48306: LD_ADDR_VAR 0 10
48310: PUSH
48311: LD_VAR 0 10
48315: PUSH
48316: LD_VAR 0 6
48320: PPUSH
48321: CALL_OW 311
48325: PPUSH
48326: LD_INT 3
48328: PPUSH
48329: CALL_OW 259
48333: PUSH
48334: LD_INT 4
48336: MUL
48337: MUL
48338: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48339: LD_VAR 0 6
48343: PPUSH
48344: CALL_OW 263
48348: PUSH
48349: LD_INT 2
48351: EQUAL
48352: IFFALSE 48403
// begin j := IsControledBy ( i ) ;
48354: LD_ADDR_VAR 0 7
48358: PUSH
48359: LD_VAR 0 6
48363: PPUSH
48364: CALL_OW 312
48368: ST_TO_ADDR
// if j then
48369: LD_VAR 0 7
48373: IFFALSE 48403
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48375: LD_ADDR_VAR 0 10
48379: PUSH
48380: LD_VAR 0 10
48384: PUSH
48385: LD_VAR 0 7
48389: PPUSH
48390: LD_INT 3
48392: PPUSH
48393: CALL_OW 259
48397: PUSH
48398: LD_INT 3
48400: MUL
48401: MUL
48402: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48403: LD_VAR 0 6
48407: PPUSH
48408: CALL_OW 264
48412: PUSH
48413: LD_INT 5
48415: PUSH
48416: LD_INT 6
48418: PUSH
48419: LD_INT 46
48421: PUSH
48422: LD_INT 44
48424: PUSH
48425: LD_INT 47
48427: PUSH
48428: LD_INT 45
48430: PUSH
48431: LD_INT 28
48433: PUSH
48434: LD_INT 7
48436: PUSH
48437: LD_INT 27
48439: PUSH
48440: LD_INT 29
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: IN
48455: PUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: LD_INT 52
48463: PPUSH
48464: CALL_OW 321
48468: PUSH
48469: LD_INT 2
48471: EQUAL
48472: AND
48473: IFFALSE 48490
// bpoints := bpoints * 1.2 ;
48475: LD_ADDR_VAR 0 10
48479: PUSH
48480: LD_VAR 0 10
48484: PUSH
48485: LD_REAL  1.20000000000000E+0000
48488: MUL
48489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48490: LD_VAR 0 6
48494: PPUSH
48495: CALL_OW 264
48499: PUSH
48500: LD_INT 6
48502: PUSH
48503: LD_INT 46
48505: PUSH
48506: LD_INT 47
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: IN
48514: IFFALSE 48531
// bpoints := bpoints * 1.2 ;
48516: LD_ADDR_VAR 0 10
48520: PUSH
48521: LD_VAR 0 10
48525: PUSH
48526: LD_REAL  1.20000000000000E+0000
48529: MUL
48530: ST_TO_ADDR
// end ; unit_building :
48531: GO 48545
48533: LD_INT 3
48535: DOUBLE
48536: EQUAL
48537: IFTRUE 48541
48539: GO 48544
48541: POP
// ; end ;
48542: GO 48545
48544: POP
// for j = 1 to 3 do
48545: LD_ADDR_VAR 0 7
48549: PUSH
48550: DOUBLE
48551: LD_INT 1
48553: DEC
48554: ST_TO_ADDR
48555: LD_INT 3
48557: PUSH
48558: FOR_TO
48559: IFFALSE 48612
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48561: LD_ADDR_VAR 0 5
48565: PUSH
48566: LD_VAR 0 5
48570: PPUSH
48571: LD_VAR 0 7
48575: PPUSH
48576: LD_VAR 0 5
48580: PUSH
48581: LD_VAR 0 7
48585: ARRAY
48586: PUSH
48587: LD_VAR 0 9
48591: PUSH
48592: LD_VAR 0 7
48596: ARRAY
48597: PUSH
48598: LD_VAR 0 10
48602: MUL
48603: PLUS
48604: PPUSH
48605: CALL_OW 1
48609: ST_TO_ADDR
48610: GO 48558
48612: POP
48613: POP
// end ;
48614: GO 47093
48616: POP
48617: POP
// result := Replace ( result , 4 , tmp ) ;
48618: LD_ADDR_VAR 0 5
48622: PUSH
48623: LD_VAR 0 5
48627: PPUSH
48628: LD_INT 4
48630: PPUSH
48631: LD_VAR 0 8
48635: PPUSH
48636: CALL_OW 1
48640: ST_TO_ADDR
// end ;
48641: LD_VAR 0 5
48645: RET
// export function DangerAtRange ( unit , range ) ; begin
48646: LD_INT 0
48648: PPUSH
// if not unit then
48649: LD_VAR 0 1
48653: NOT
48654: IFFALSE 48658
// exit ;
48656: GO 48703
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_VAR 0 1
48667: PPUSH
48668: CALL_OW 255
48672: PPUSH
48673: LD_VAR 0 1
48677: PPUSH
48678: CALL_OW 250
48682: PPUSH
48683: LD_VAR 0 1
48687: PPUSH
48688: CALL_OW 251
48692: PPUSH
48693: LD_VAR 0 2
48697: PPUSH
48698: CALL 46945 0 4
48702: ST_TO_ADDR
// end ;
48703: LD_VAR 0 3
48707: RET
// export function DangerInArea ( side , area ) ; begin
48708: LD_INT 0
48710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48711: LD_ADDR_VAR 0 3
48715: PUSH
48716: LD_VAR 0 2
48720: PPUSH
48721: LD_INT 81
48723: PUSH
48724: LD_VAR 0 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PPUSH
48733: CALL_OW 70
48737: ST_TO_ADDR
// end ;
48738: LD_VAR 0 3
48742: RET
// export function IsExtension ( b ) ; begin
48743: LD_INT 0
48745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48746: LD_ADDR_VAR 0 2
48750: PUSH
48751: LD_VAR 0 1
48755: PUSH
48756: LD_INT 23
48758: PUSH
48759: LD_INT 20
48761: PUSH
48762: LD_INT 22
48764: PUSH
48765: LD_INT 17
48767: PUSH
48768: LD_INT 24
48770: PUSH
48771: LD_INT 21
48773: PUSH
48774: LD_INT 19
48776: PUSH
48777: LD_INT 16
48779: PUSH
48780: LD_INT 25
48782: PUSH
48783: LD_INT 18
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: IN
48798: ST_TO_ADDR
// end ;
48799: LD_VAR 0 2
48803: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48804: LD_INT 0
48806: PPUSH
48807: PPUSH
48808: PPUSH
// result := [ ] ;
48809: LD_ADDR_VAR 0 4
48813: PUSH
48814: EMPTY
48815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48816: LD_ADDR_VAR 0 5
48820: PUSH
48821: LD_VAR 0 2
48825: PPUSH
48826: LD_INT 21
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PPUSH
48836: CALL_OW 70
48840: ST_TO_ADDR
// if not tmp then
48841: LD_VAR 0 5
48845: NOT
48846: IFFALSE 48850
// exit ;
48848: GO 48914
// if checkLink then
48850: LD_VAR 0 3
48854: IFFALSE 48904
// begin for i in tmp do
48856: LD_ADDR_VAR 0 6
48860: PUSH
48861: LD_VAR 0 5
48865: PUSH
48866: FOR_IN
48867: IFFALSE 48902
// if GetBase ( i ) <> base then
48869: LD_VAR 0 6
48873: PPUSH
48874: CALL_OW 274
48878: PUSH
48879: LD_VAR 0 1
48883: NONEQUAL
48884: IFFALSE 48900
// ComLinkToBase ( base , i ) ;
48886: LD_VAR 0 1
48890: PPUSH
48891: LD_VAR 0 6
48895: PPUSH
48896: CALL_OW 169
48900: GO 48866
48902: POP
48903: POP
// end ; result := tmp ;
48904: LD_ADDR_VAR 0 4
48908: PUSH
48909: LD_VAR 0 5
48913: ST_TO_ADDR
// end ;
48914: LD_VAR 0 4
48918: RET
// export function ComComplete ( units , b ) ; var i ; begin
48919: LD_INT 0
48921: PPUSH
48922: PPUSH
// if not units then
48923: LD_VAR 0 1
48927: NOT
48928: IFFALSE 48932
// exit ;
48930: GO 49022
// for i in units do
48932: LD_ADDR_VAR 0 4
48936: PUSH
48937: LD_VAR 0 1
48941: PUSH
48942: FOR_IN
48943: IFFALSE 49020
// if BuildingStatus ( b ) = bs_build then
48945: LD_VAR 0 2
48949: PPUSH
48950: CALL_OW 461
48954: PUSH
48955: LD_INT 1
48957: EQUAL
48958: IFFALSE 49018
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48960: LD_VAR 0 4
48964: PPUSH
48965: LD_STRING h
48967: PUSH
48968: LD_VAR 0 2
48972: PPUSH
48973: CALL_OW 250
48977: PUSH
48978: LD_VAR 0 2
48982: PPUSH
48983: CALL_OW 251
48987: PUSH
48988: LD_VAR 0 2
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: PPUSH
49014: CALL_OW 446
49018: GO 48942
49020: POP
49021: POP
// end ;
49022: LD_VAR 0 3
49026: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49027: LD_INT 0
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49035: LD_VAR 0 1
49039: NOT
49040: PUSH
49041: LD_VAR 0 1
49045: PPUSH
49046: CALL_OW 263
49050: PUSH
49051: LD_INT 2
49053: NONEQUAL
49054: OR
49055: IFFALSE 49059
// exit ;
49057: GO 49375
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49059: LD_ADDR_VAR 0 6
49063: PUSH
49064: LD_INT 22
49066: PUSH
49067: LD_VAR 0 1
49071: PPUSH
49072: CALL_OW 255
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 30
49086: PUSH
49087: LD_INT 36
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 34
49096: PUSH
49097: LD_INT 31
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PPUSH
49113: CALL_OW 69
49117: ST_TO_ADDR
// if not tmp then
49118: LD_VAR 0 6
49122: NOT
49123: IFFALSE 49127
// exit ;
49125: GO 49375
// result := [ ] ;
49127: LD_ADDR_VAR 0 2
49131: PUSH
49132: EMPTY
49133: ST_TO_ADDR
// for i in tmp do
49134: LD_ADDR_VAR 0 3
49138: PUSH
49139: LD_VAR 0 6
49143: PUSH
49144: FOR_IN
49145: IFFALSE 49216
// begin t := UnitsInside ( i ) ;
49147: LD_ADDR_VAR 0 4
49151: PUSH
49152: LD_VAR 0 3
49156: PPUSH
49157: CALL_OW 313
49161: ST_TO_ADDR
// if t then
49162: LD_VAR 0 4
49166: IFFALSE 49214
// for j in t do
49168: LD_ADDR_VAR 0 7
49172: PUSH
49173: LD_VAR 0 4
49177: PUSH
49178: FOR_IN
49179: IFFALSE 49212
// result := Replace ( result , result + 1 , j ) ;
49181: LD_ADDR_VAR 0 2
49185: PUSH
49186: LD_VAR 0 2
49190: PPUSH
49191: LD_VAR 0 2
49195: PUSH
49196: LD_INT 1
49198: PLUS
49199: PPUSH
49200: LD_VAR 0 7
49204: PPUSH
49205: CALL_OW 1
49209: ST_TO_ADDR
49210: GO 49178
49212: POP
49213: POP
// end ;
49214: GO 49144
49216: POP
49217: POP
// if not result then
49218: LD_VAR 0 2
49222: NOT
49223: IFFALSE 49227
// exit ;
49225: GO 49375
// mech := result [ 1 ] ;
49227: LD_ADDR_VAR 0 5
49231: PUSH
49232: LD_VAR 0 2
49236: PUSH
49237: LD_INT 1
49239: ARRAY
49240: ST_TO_ADDR
// if result > 1 then
49241: LD_VAR 0 2
49245: PUSH
49246: LD_INT 1
49248: GREATER
49249: IFFALSE 49361
// begin for i = 2 to result do
49251: LD_ADDR_VAR 0 3
49255: PUSH
49256: DOUBLE
49257: LD_INT 2
49259: DEC
49260: ST_TO_ADDR
49261: LD_VAR 0 2
49265: PUSH
49266: FOR_TO
49267: IFFALSE 49359
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49269: LD_ADDR_VAR 0 4
49273: PUSH
49274: LD_VAR 0 2
49278: PUSH
49279: LD_VAR 0 3
49283: ARRAY
49284: PPUSH
49285: LD_INT 3
49287: PPUSH
49288: CALL_OW 259
49292: PUSH
49293: LD_VAR 0 2
49297: PUSH
49298: LD_VAR 0 3
49302: ARRAY
49303: PPUSH
49304: CALL_OW 432
49308: MINUS
49309: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49310: LD_VAR 0 4
49314: PUSH
49315: LD_VAR 0 5
49319: PPUSH
49320: LD_INT 3
49322: PPUSH
49323: CALL_OW 259
49327: PUSH
49328: LD_VAR 0 5
49332: PPUSH
49333: CALL_OW 432
49337: MINUS
49338: GREATEREQUAL
49339: IFFALSE 49357
// mech := result [ i ] ;
49341: LD_ADDR_VAR 0 5
49345: PUSH
49346: LD_VAR 0 2
49350: PUSH
49351: LD_VAR 0 3
49355: ARRAY
49356: ST_TO_ADDR
// end ;
49357: GO 49266
49359: POP
49360: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49361: LD_VAR 0 1
49365: PPUSH
49366: LD_VAR 0 5
49370: PPUSH
49371: CALL_OW 135
// end ;
49375: LD_VAR 0 2
49379: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49380: LD_INT 0
49382: PPUSH
49383: PPUSH
49384: PPUSH
49385: PPUSH
49386: PPUSH
49387: PPUSH
49388: PPUSH
49389: PPUSH
49390: PPUSH
49391: PPUSH
49392: PPUSH
49393: PPUSH
49394: PPUSH
// result := [ ] ;
49395: LD_ADDR_VAR 0 7
49399: PUSH
49400: EMPTY
49401: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49402: LD_VAR 0 1
49406: PPUSH
49407: CALL_OW 266
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: IN
49422: NOT
49423: IFFALSE 49427
// exit ;
49425: GO 51061
// if name then
49427: LD_VAR 0 3
49431: IFFALSE 49447
// SetBName ( base_dep , name ) ;
49433: LD_VAR 0 1
49437: PPUSH
49438: LD_VAR 0 3
49442: PPUSH
49443: CALL_OW 500
// base := GetBase ( base_dep ) ;
49447: LD_ADDR_VAR 0 15
49451: PUSH
49452: LD_VAR 0 1
49456: PPUSH
49457: CALL_OW 274
49461: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49462: LD_ADDR_VAR 0 16
49466: PUSH
49467: LD_VAR 0 1
49471: PPUSH
49472: CALL_OW 255
49476: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49477: LD_ADDR_VAR 0 17
49481: PUSH
49482: LD_VAR 0 1
49486: PPUSH
49487: CALL_OW 248
49491: ST_TO_ADDR
// if sources then
49492: LD_VAR 0 5
49496: IFFALSE 49543
// for i = 1 to 3 do
49498: LD_ADDR_VAR 0 8
49502: PUSH
49503: DOUBLE
49504: LD_INT 1
49506: DEC
49507: ST_TO_ADDR
49508: LD_INT 3
49510: PUSH
49511: FOR_TO
49512: IFFALSE 49541
// AddResourceType ( base , i , sources [ i ] ) ;
49514: LD_VAR 0 15
49518: PPUSH
49519: LD_VAR 0 8
49523: PPUSH
49524: LD_VAR 0 5
49528: PUSH
49529: LD_VAR 0 8
49533: ARRAY
49534: PPUSH
49535: CALL_OW 276
49539: GO 49511
49541: POP
49542: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49543: LD_ADDR_VAR 0 18
49547: PUSH
49548: LD_VAR 0 15
49552: PPUSH
49553: LD_VAR 0 2
49557: PPUSH
49558: LD_INT 1
49560: PPUSH
49561: CALL 48804 0 3
49565: ST_TO_ADDR
// InitHc ;
49566: CALL_OW 19
// InitUc ;
49570: CALL_OW 18
// uc_side := side ;
49574: LD_ADDR_OWVAR 20
49578: PUSH
49579: LD_VAR 0 16
49583: ST_TO_ADDR
// uc_nation := nation ;
49584: LD_ADDR_OWVAR 21
49588: PUSH
49589: LD_VAR 0 17
49593: ST_TO_ADDR
// if buildings then
49594: LD_VAR 0 18
49598: IFFALSE 50920
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49600: LD_ADDR_VAR 0 19
49604: PUSH
49605: LD_VAR 0 18
49609: PPUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 30
49615: PUSH
49616: LD_INT 29
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 30
49625: PUSH
49626: LD_INT 30
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: LIST
49637: PPUSH
49638: CALL_OW 72
49642: ST_TO_ADDR
// if tmp then
49643: LD_VAR 0 19
49647: IFFALSE 49695
// for i in tmp do
49649: LD_ADDR_VAR 0 8
49653: PUSH
49654: LD_VAR 0 19
49658: PUSH
49659: FOR_IN
49660: IFFALSE 49693
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49662: LD_VAR 0 8
49666: PPUSH
49667: CALL_OW 250
49671: PPUSH
49672: LD_VAR 0 8
49676: PPUSH
49677: CALL_OW 251
49681: PPUSH
49682: LD_VAR 0 16
49686: PPUSH
49687: CALL_OW 441
49691: GO 49659
49693: POP
49694: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49695: LD_VAR 0 18
49699: PPUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 30
49705: PUSH
49706: LD_INT 32
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 30
49715: PUSH
49716: LD_INT 33
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: PPUSH
49728: CALL_OW 72
49732: IFFALSE 49820
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49734: LD_ADDR_VAR 0 8
49738: PUSH
49739: LD_VAR 0 18
49743: PPUSH
49744: LD_INT 2
49746: PUSH
49747: LD_INT 30
49749: PUSH
49750: LD_INT 32
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 30
49759: PUSH
49760: LD_INT 33
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: LIST
49771: PPUSH
49772: CALL_OW 72
49776: PUSH
49777: FOR_IN
49778: IFFALSE 49818
// begin if not GetBWeapon ( i ) then
49780: LD_VAR 0 8
49784: PPUSH
49785: CALL_OW 269
49789: NOT
49790: IFFALSE 49816
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49792: LD_VAR 0 8
49796: PPUSH
49797: LD_VAR 0 8
49801: PPUSH
49802: LD_VAR 0 2
49806: PPUSH
49807: CALL 51066 0 2
49811: PPUSH
49812: CALL_OW 431
// end ;
49816: GO 49777
49818: POP
49819: POP
// end ; for i = 1 to personel do
49820: LD_ADDR_VAR 0 8
49824: PUSH
49825: DOUBLE
49826: LD_INT 1
49828: DEC
49829: ST_TO_ADDR
49830: LD_VAR 0 6
49834: PUSH
49835: FOR_TO
49836: IFFALSE 50900
// begin if i > 4 then
49838: LD_VAR 0 8
49842: PUSH
49843: LD_INT 4
49845: GREATER
49846: IFFALSE 49850
// break ;
49848: GO 50900
// case i of 1 :
49850: LD_VAR 0 8
49854: PUSH
49855: LD_INT 1
49857: DOUBLE
49858: EQUAL
49859: IFTRUE 49863
49861: GO 49943
49863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49864: LD_ADDR_VAR 0 12
49868: PUSH
49869: LD_VAR 0 18
49873: PPUSH
49874: LD_INT 22
49876: PUSH
49877: LD_VAR 0 16
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 58
49888: PUSH
49889: EMPTY
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 30
49897: PUSH
49898: LD_INT 32
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 30
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 30
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: PPUSH
49936: CALL_OW 72
49940: ST_TO_ADDR
49941: GO 50165
49943: LD_INT 2
49945: DOUBLE
49946: EQUAL
49947: IFTRUE 49951
49949: GO 50013
49951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49952: LD_ADDR_VAR 0 12
49956: PUSH
49957: LD_VAR 0 18
49961: PPUSH
49962: LD_INT 22
49964: PUSH
49965: LD_VAR 0 16
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: LD_INT 30
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 30
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PPUSH
50006: CALL_OW 72
50010: ST_TO_ADDR
50011: GO 50165
50013: LD_INT 3
50015: DOUBLE
50016: EQUAL
50017: IFTRUE 50021
50019: GO 50083
50021: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50022: LD_ADDR_VAR 0 12
50026: PUSH
50027: LD_VAR 0 18
50031: PPUSH
50032: LD_INT 22
50034: PUSH
50035: LD_VAR 0 16
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 30
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 30
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PPUSH
50076: CALL_OW 72
50080: ST_TO_ADDR
50081: GO 50165
50083: LD_INT 4
50085: DOUBLE
50086: EQUAL
50087: IFTRUE 50091
50089: GO 50164
50091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50092: LD_ADDR_VAR 0 12
50096: PUSH
50097: LD_VAR 0 18
50101: PPUSH
50102: LD_INT 22
50104: PUSH
50105: LD_VAR 0 16
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 30
50119: PUSH
50120: LD_INT 6
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 30
50129: PUSH
50130: LD_INT 7
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 30
50139: PUSH
50140: LD_INT 8
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PPUSH
50157: CALL_OW 72
50161: ST_TO_ADDR
50162: GO 50165
50164: POP
// if i = 1 then
50165: LD_VAR 0 8
50169: PUSH
50170: LD_INT 1
50172: EQUAL
50173: IFFALSE 50284
// begin tmp := [ ] ;
50175: LD_ADDR_VAR 0 19
50179: PUSH
50180: EMPTY
50181: ST_TO_ADDR
// for j in f do
50182: LD_ADDR_VAR 0 9
50186: PUSH
50187: LD_VAR 0 12
50191: PUSH
50192: FOR_IN
50193: IFFALSE 50266
// if GetBType ( j ) = b_bunker then
50195: LD_VAR 0 9
50199: PPUSH
50200: CALL_OW 266
50204: PUSH
50205: LD_INT 32
50207: EQUAL
50208: IFFALSE 50235
// tmp := Insert ( tmp , 1 , j ) else
50210: LD_ADDR_VAR 0 19
50214: PUSH
50215: LD_VAR 0 19
50219: PPUSH
50220: LD_INT 1
50222: PPUSH
50223: LD_VAR 0 9
50227: PPUSH
50228: CALL_OW 2
50232: ST_TO_ADDR
50233: GO 50264
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50235: LD_ADDR_VAR 0 19
50239: PUSH
50240: LD_VAR 0 19
50244: PPUSH
50245: LD_VAR 0 19
50249: PUSH
50250: LD_INT 1
50252: PLUS
50253: PPUSH
50254: LD_VAR 0 9
50258: PPUSH
50259: CALL_OW 2
50263: ST_TO_ADDR
50264: GO 50192
50266: POP
50267: POP
// if tmp then
50268: LD_VAR 0 19
50272: IFFALSE 50284
// f := tmp ;
50274: LD_ADDR_VAR 0 12
50278: PUSH
50279: LD_VAR 0 19
50283: ST_TO_ADDR
// end ; x := personel [ i ] ;
50284: LD_ADDR_VAR 0 13
50288: PUSH
50289: LD_VAR 0 6
50293: PUSH
50294: LD_VAR 0 8
50298: ARRAY
50299: ST_TO_ADDR
// if x = - 1 then
50300: LD_VAR 0 13
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: EQUAL
50309: IFFALSE 50518
// begin for j in f do
50311: LD_ADDR_VAR 0 9
50315: PUSH
50316: LD_VAR 0 12
50320: PUSH
50321: FOR_IN
50322: IFFALSE 50514
// repeat InitHc ;
50324: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50328: LD_VAR 0 9
50332: PPUSH
50333: CALL_OW 266
50337: PUSH
50338: LD_INT 5
50340: EQUAL
50341: IFFALSE 50411
// begin if UnitsInside ( j ) < 3 then
50343: LD_VAR 0 9
50347: PPUSH
50348: CALL_OW 313
50352: PUSH
50353: LD_INT 3
50355: LESS
50356: IFFALSE 50392
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50358: LD_INT 0
50360: PPUSH
50361: LD_INT 5
50363: PUSH
50364: LD_INT 8
50366: PUSH
50367: LD_INT 9
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: PUSH
50375: LD_VAR 0 17
50379: ARRAY
50380: PPUSH
50381: LD_VAR 0 4
50385: PPUSH
50386: CALL_OW 380
50390: GO 50409
// PrepareHuman ( false , i , skill ) ;
50392: LD_INT 0
50394: PPUSH
50395: LD_VAR 0 8
50399: PPUSH
50400: LD_VAR 0 4
50404: PPUSH
50405: CALL_OW 380
// end else
50409: GO 50428
// PrepareHuman ( false , i , skill ) ;
50411: LD_INT 0
50413: PPUSH
50414: LD_VAR 0 8
50418: PPUSH
50419: LD_VAR 0 4
50423: PPUSH
50424: CALL_OW 380
// un := CreateHuman ;
50428: LD_ADDR_VAR 0 14
50432: PUSH
50433: CALL_OW 44
50437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50438: LD_ADDR_VAR 0 7
50442: PUSH
50443: LD_VAR 0 7
50447: PPUSH
50448: LD_INT 1
50450: PPUSH
50451: LD_VAR 0 14
50455: PPUSH
50456: CALL_OW 2
50460: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50461: LD_VAR 0 14
50465: PPUSH
50466: LD_VAR 0 9
50470: PPUSH
50471: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50475: LD_VAR 0 9
50479: PPUSH
50480: CALL_OW 313
50484: PUSH
50485: LD_INT 6
50487: EQUAL
50488: PUSH
50489: LD_VAR 0 9
50493: PPUSH
50494: CALL_OW 266
50498: PUSH
50499: LD_INT 32
50501: PUSH
50502: LD_INT 31
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: IN
50509: OR
50510: IFFALSE 50324
50512: GO 50321
50514: POP
50515: POP
// end else
50516: GO 50898
// for j = 1 to x do
50518: LD_ADDR_VAR 0 9
50522: PUSH
50523: DOUBLE
50524: LD_INT 1
50526: DEC
50527: ST_TO_ADDR
50528: LD_VAR 0 13
50532: PUSH
50533: FOR_TO
50534: IFFALSE 50896
// begin InitHc ;
50536: CALL_OW 19
// if not f then
50540: LD_VAR 0 12
50544: NOT
50545: IFFALSE 50634
// begin PrepareHuman ( false , i , skill ) ;
50547: LD_INT 0
50549: PPUSH
50550: LD_VAR 0 8
50554: PPUSH
50555: LD_VAR 0 4
50559: PPUSH
50560: CALL_OW 380
// un := CreateHuman ;
50564: LD_ADDR_VAR 0 14
50568: PUSH
50569: CALL_OW 44
50573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50574: LD_ADDR_VAR 0 7
50578: PUSH
50579: LD_VAR 0 7
50583: PPUSH
50584: LD_INT 1
50586: PPUSH
50587: LD_VAR 0 14
50591: PPUSH
50592: CALL_OW 2
50596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50597: LD_VAR 0 14
50601: PPUSH
50602: LD_VAR 0 1
50606: PPUSH
50607: CALL_OW 250
50611: PPUSH
50612: LD_VAR 0 1
50616: PPUSH
50617: CALL_OW 251
50621: PPUSH
50622: LD_INT 10
50624: PPUSH
50625: LD_INT 0
50627: PPUSH
50628: CALL_OW 50
// continue ;
50632: GO 50533
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50634: LD_VAR 0 12
50638: PUSH
50639: LD_INT 1
50641: ARRAY
50642: PPUSH
50643: CALL_OW 313
50647: PUSH
50648: LD_VAR 0 12
50652: PUSH
50653: LD_INT 1
50655: ARRAY
50656: PPUSH
50657: CALL_OW 266
50661: PUSH
50662: LD_INT 32
50664: PUSH
50665: LD_INT 31
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: IN
50672: AND
50673: PUSH
50674: LD_VAR 0 12
50678: PUSH
50679: LD_INT 1
50681: ARRAY
50682: PPUSH
50683: CALL_OW 313
50687: PUSH
50688: LD_INT 6
50690: EQUAL
50691: OR
50692: IFFALSE 50712
// f := Delete ( f , 1 ) ;
50694: LD_ADDR_VAR 0 12
50698: PUSH
50699: LD_VAR 0 12
50703: PPUSH
50704: LD_INT 1
50706: PPUSH
50707: CALL_OW 3
50711: ST_TO_ADDR
// if not f then
50712: LD_VAR 0 12
50716: NOT
50717: IFFALSE 50735
// begin x := x + 2 ;
50719: LD_ADDR_VAR 0 13
50723: PUSH
50724: LD_VAR 0 13
50728: PUSH
50729: LD_INT 2
50731: PLUS
50732: ST_TO_ADDR
// continue ;
50733: GO 50533
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50735: LD_VAR 0 12
50739: PUSH
50740: LD_INT 1
50742: ARRAY
50743: PPUSH
50744: CALL_OW 266
50748: PUSH
50749: LD_INT 5
50751: EQUAL
50752: IFFALSE 50826
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50754: LD_VAR 0 12
50758: PUSH
50759: LD_INT 1
50761: ARRAY
50762: PPUSH
50763: CALL_OW 313
50767: PUSH
50768: LD_INT 3
50770: LESS
50771: IFFALSE 50807
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50773: LD_INT 0
50775: PPUSH
50776: LD_INT 5
50778: PUSH
50779: LD_INT 8
50781: PUSH
50782: LD_INT 9
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: PUSH
50790: LD_VAR 0 17
50794: ARRAY
50795: PPUSH
50796: LD_VAR 0 4
50800: PPUSH
50801: CALL_OW 380
50805: GO 50824
// PrepareHuman ( false , i , skill ) ;
50807: LD_INT 0
50809: PPUSH
50810: LD_VAR 0 8
50814: PPUSH
50815: LD_VAR 0 4
50819: PPUSH
50820: CALL_OW 380
// end else
50824: GO 50843
// PrepareHuman ( false , i , skill ) ;
50826: LD_INT 0
50828: PPUSH
50829: LD_VAR 0 8
50833: PPUSH
50834: LD_VAR 0 4
50838: PPUSH
50839: CALL_OW 380
// un := CreateHuman ;
50843: LD_ADDR_VAR 0 14
50847: PUSH
50848: CALL_OW 44
50852: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50853: LD_ADDR_VAR 0 7
50857: PUSH
50858: LD_VAR 0 7
50862: PPUSH
50863: LD_INT 1
50865: PPUSH
50866: LD_VAR 0 14
50870: PPUSH
50871: CALL_OW 2
50875: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50876: LD_VAR 0 14
50880: PPUSH
50881: LD_VAR 0 12
50885: PUSH
50886: LD_INT 1
50888: ARRAY
50889: PPUSH
50890: CALL_OW 52
// end ;
50894: GO 50533
50896: POP
50897: POP
// end ;
50898: GO 49835
50900: POP
50901: POP
// result := result ^ buildings ;
50902: LD_ADDR_VAR 0 7
50906: PUSH
50907: LD_VAR 0 7
50911: PUSH
50912: LD_VAR 0 18
50916: ADD
50917: ST_TO_ADDR
// end else
50918: GO 51061
// begin for i = 1 to personel do
50920: LD_ADDR_VAR 0 8
50924: PUSH
50925: DOUBLE
50926: LD_INT 1
50928: DEC
50929: ST_TO_ADDR
50930: LD_VAR 0 6
50934: PUSH
50935: FOR_TO
50936: IFFALSE 51059
// begin if i > 4 then
50938: LD_VAR 0 8
50942: PUSH
50943: LD_INT 4
50945: GREATER
50946: IFFALSE 50950
// break ;
50948: GO 51059
// x := personel [ i ] ;
50950: LD_ADDR_VAR 0 13
50954: PUSH
50955: LD_VAR 0 6
50959: PUSH
50960: LD_VAR 0 8
50964: ARRAY
50965: ST_TO_ADDR
// if x = - 1 then
50966: LD_VAR 0 13
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: EQUAL
50975: IFFALSE 50979
// continue ;
50977: GO 50935
// PrepareHuman ( false , i , skill ) ;
50979: LD_INT 0
50981: PPUSH
50982: LD_VAR 0 8
50986: PPUSH
50987: LD_VAR 0 4
50991: PPUSH
50992: CALL_OW 380
// un := CreateHuman ;
50996: LD_ADDR_VAR 0 14
51000: PUSH
51001: CALL_OW 44
51005: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51006: LD_VAR 0 14
51010: PPUSH
51011: LD_VAR 0 1
51015: PPUSH
51016: CALL_OW 250
51020: PPUSH
51021: LD_VAR 0 1
51025: PPUSH
51026: CALL_OW 251
51030: PPUSH
51031: LD_INT 10
51033: PPUSH
51034: LD_INT 0
51036: PPUSH
51037: CALL_OW 50
// result := result ^ un ;
51041: LD_ADDR_VAR 0 7
51045: PUSH
51046: LD_VAR 0 7
51050: PUSH
51051: LD_VAR 0 14
51055: ADD
51056: ST_TO_ADDR
// end ;
51057: GO 50935
51059: POP
51060: POP
// end ; end ;
51061: LD_VAR 0 7
51065: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51066: LD_INT 0
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
// result := false ;
51084: LD_ADDR_VAR 0 3
51088: PUSH
51089: LD_INT 0
51091: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51092: LD_VAR 0 1
51096: NOT
51097: PUSH
51098: LD_VAR 0 1
51102: PPUSH
51103: CALL_OW 266
51107: PUSH
51108: LD_INT 32
51110: PUSH
51111: LD_INT 33
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: IN
51118: NOT
51119: OR
51120: IFFALSE 51124
// exit ;
51122: GO 52233
// nat := GetNation ( tower ) ;
51124: LD_ADDR_VAR 0 12
51128: PUSH
51129: LD_VAR 0 1
51133: PPUSH
51134: CALL_OW 248
51138: ST_TO_ADDR
// side := GetSide ( tower ) ;
51139: LD_ADDR_VAR 0 16
51143: PUSH
51144: LD_VAR 0 1
51148: PPUSH
51149: CALL_OW 255
51153: ST_TO_ADDR
// x := GetX ( tower ) ;
51154: LD_ADDR_VAR 0 10
51158: PUSH
51159: LD_VAR 0 1
51163: PPUSH
51164: CALL_OW 250
51168: ST_TO_ADDR
// y := GetY ( tower ) ;
51169: LD_ADDR_VAR 0 11
51173: PUSH
51174: LD_VAR 0 1
51178: PPUSH
51179: CALL_OW 251
51183: ST_TO_ADDR
// if not x or not y then
51184: LD_VAR 0 10
51188: NOT
51189: PUSH
51190: LD_VAR 0 11
51194: NOT
51195: OR
51196: IFFALSE 51200
// exit ;
51198: GO 52233
// weapon := 0 ;
51200: LD_ADDR_VAR 0 18
51204: PUSH
51205: LD_INT 0
51207: ST_TO_ADDR
// fac_list := [ ] ;
51208: LD_ADDR_VAR 0 17
51212: PUSH
51213: EMPTY
51214: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51215: LD_ADDR_VAR 0 6
51219: PUSH
51220: LD_VAR 0 1
51224: PPUSH
51225: CALL_OW 274
51229: PPUSH
51230: LD_VAR 0 2
51234: PPUSH
51235: LD_INT 0
51237: PPUSH
51238: CALL 48804 0 3
51242: PPUSH
51243: LD_INT 30
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PPUSH
51253: CALL_OW 72
51257: ST_TO_ADDR
// if not factories then
51258: LD_VAR 0 6
51262: NOT
51263: IFFALSE 51267
// exit ;
51265: GO 52233
// for i in factories do
51267: LD_ADDR_VAR 0 8
51271: PUSH
51272: LD_VAR 0 6
51276: PUSH
51277: FOR_IN
51278: IFFALSE 51303
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51280: LD_ADDR_VAR 0 17
51284: PUSH
51285: LD_VAR 0 17
51289: PUSH
51290: LD_VAR 0 8
51294: PPUSH
51295: CALL_OW 478
51299: UNION
51300: ST_TO_ADDR
51301: GO 51277
51303: POP
51304: POP
// if not fac_list then
51305: LD_VAR 0 17
51309: NOT
51310: IFFALSE 51314
// exit ;
51312: GO 52233
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51314: LD_ADDR_VAR 0 5
51318: PUSH
51319: LD_INT 4
51321: PUSH
51322: LD_INT 5
51324: PUSH
51325: LD_INT 9
51327: PUSH
51328: LD_INT 10
51330: PUSH
51331: LD_INT 6
51333: PUSH
51334: LD_INT 7
51336: PUSH
51337: LD_INT 11
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 27
51351: PUSH
51352: LD_INT 28
51354: PUSH
51355: LD_INT 26
51357: PUSH
51358: LD_INT 30
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 43
51369: PUSH
51370: LD_INT 44
51372: PUSH
51373: LD_INT 46
51375: PUSH
51376: LD_INT 45
51378: PUSH
51379: LD_INT 47
51381: PUSH
51382: LD_INT 49
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: PUSH
51398: LD_VAR 0 12
51402: ARRAY
51403: ST_TO_ADDR
// list := list isect fac_list ;
51404: LD_ADDR_VAR 0 5
51408: PUSH
51409: LD_VAR 0 5
51413: PUSH
51414: LD_VAR 0 17
51418: ISECT
51419: ST_TO_ADDR
// if not list then
51420: LD_VAR 0 5
51424: NOT
51425: IFFALSE 51429
// exit ;
51427: GO 52233
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51429: LD_VAR 0 12
51433: PUSH
51434: LD_INT 3
51436: EQUAL
51437: PUSH
51438: LD_INT 49
51440: PUSH
51441: LD_VAR 0 5
51445: IN
51446: AND
51447: PUSH
51448: LD_INT 31
51450: PPUSH
51451: LD_VAR 0 16
51455: PPUSH
51456: CALL_OW 321
51460: PUSH
51461: LD_INT 2
51463: EQUAL
51464: AND
51465: IFFALSE 51525
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51467: LD_INT 22
51469: PUSH
51470: LD_VAR 0 16
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 35
51481: PUSH
51482: LD_INT 49
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 91
51491: PUSH
51492: LD_VAR 0 1
51496: PUSH
51497: LD_INT 10
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: PPUSH
51510: CALL_OW 69
51514: NOT
51515: IFFALSE 51525
// weapon := ru_time_lapser ;
51517: LD_ADDR_VAR 0 18
51521: PUSH
51522: LD_INT 49
51524: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51525: LD_VAR 0 12
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: IN
51540: PUSH
51541: LD_INT 11
51543: PUSH
51544: LD_VAR 0 5
51548: IN
51549: PUSH
51550: LD_INT 30
51552: PUSH
51553: LD_VAR 0 5
51557: IN
51558: OR
51559: AND
51560: PUSH
51561: LD_INT 6
51563: PPUSH
51564: LD_VAR 0 16
51568: PPUSH
51569: CALL_OW 321
51573: PUSH
51574: LD_INT 2
51576: EQUAL
51577: AND
51578: IFFALSE 51743
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51580: LD_INT 22
51582: PUSH
51583: LD_VAR 0 16
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 35
51597: PUSH
51598: LD_INT 11
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 35
51607: PUSH
51608: LD_INT 30
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 91
51622: PUSH
51623: LD_VAR 0 1
51627: PUSH
51628: LD_INT 18
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: PPUSH
51641: CALL_OW 69
51645: NOT
51646: PUSH
51647: LD_INT 22
51649: PUSH
51650: LD_VAR 0 16
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 30
51664: PUSH
51665: LD_INT 32
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 30
51674: PUSH
51675: LD_INT 33
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 91
51689: PUSH
51690: LD_VAR 0 1
51694: PUSH
51695: LD_INT 12
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: PPUSH
51711: CALL_OW 69
51715: PUSH
51716: LD_INT 2
51718: GREATER
51719: AND
51720: IFFALSE 51743
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51722: LD_ADDR_VAR 0 18
51726: PUSH
51727: LD_INT 11
51729: PUSH
51730: LD_INT 30
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_VAR 0 12
51741: ARRAY
51742: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51743: LD_VAR 0 18
51747: NOT
51748: PUSH
51749: LD_INT 40
51751: PPUSH
51752: LD_VAR 0 16
51756: PPUSH
51757: CALL_OW 321
51761: PUSH
51762: LD_INT 2
51764: EQUAL
51765: AND
51766: PUSH
51767: LD_INT 7
51769: PUSH
51770: LD_VAR 0 5
51774: IN
51775: PUSH
51776: LD_INT 28
51778: PUSH
51779: LD_VAR 0 5
51783: IN
51784: OR
51785: PUSH
51786: LD_INT 45
51788: PUSH
51789: LD_VAR 0 5
51793: IN
51794: OR
51795: AND
51796: IFFALSE 52050
// begin hex := GetHexInfo ( x , y ) ;
51798: LD_ADDR_VAR 0 4
51802: PUSH
51803: LD_VAR 0 10
51807: PPUSH
51808: LD_VAR 0 11
51812: PPUSH
51813: CALL_OW 546
51817: ST_TO_ADDR
// if hex [ 1 ] then
51818: LD_VAR 0 4
51822: PUSH
51823: LD_INT 1
51825: ARRAY
51826: IFFALSE 51830
// exit ;
51828: GO 52233
// height := hex [ 2 ] ;
51830: LD_ADDR_VAR 0 15
51834: PUSH
51835: LD_VAR 0 4
51839: PUSH
51840: LD_INT 2
51842: ARRAY
51843: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51844: LD_ADDR_VAR 0 14
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: LD_INT 5
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: ST_TO_ADDR
// for i in tmp do
51867: LD_ADDR_VAR 0 8
51871: PUSH
51872: LD_VAR 0 14
51876: PUSH
51877: FOR_IN
51878: IFFALSE 52048
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51880: LD_ADDR_VAR 0 9
51884: PUSH
51885: LD_VAR 0 10
51889: PPUSH
51890: LD_VAR 0 8
51894: PPUSH
51895: LD_INT 5
51897: PPUSH
51898: CALL_OW 272
51902: PUSH
51903: LD_VAR 0 11
51907: PPUSH
51908: LD_VAR 0 8
51912: PPUSH
51913: LD_INT 5
51915: PPUSH
51916: CALL_OW 273
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51925: LD_VAR 0 9
51929: PUSH
51930: LD_INT 1
51932: ARRAY
51933: PPUSH
51934: LD_VAR 0 9
51938: PUSH
51939: LD_INT 2
51941: ARRAY
51942: PPUSH
51943: CALL_OW 488
51947: IFFALSE 52046
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51949: LD_ADDR_VAR 0 4
51953: PUSH
51954: LD_VAR 0 9
51958: PUSH
51959: LD_INT 1
51961: ARRAY
51962: PPUSH
51963: LD_VAR 0 9
51967: PUSH
51968: LD_INT 2
51970: ARRAY
51971: PPUSH
51972: CALL_OW 546
51976: ST_TO_ADDR
// if hex [ 1 ] then
51977: LD_VAR 0 4
51981: PUSH
51982: LD_INT 1
51984: ARRAY
51985: IFFALSE 51989
// continue ;
51987: GO 51877
// h := hex [ 2 ] ;
51989: LD_ADDR_VAR 0 13
51993: PUSH
51994: LD_VAR 0 4
51998: PUSH
51999: LD_INT 2
52001: ARRAY
52002: ST_TO_ADDR
// if h + 7 < height then
52003: LD_VAR 0 13
52007: PUSH
52008: LD_INT 7
52010: PLUS
52011: PUSH
52012: LD_VAR 0 15
52016: LESS
52017: IFFALSE 52046
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52019: LD_ADDR_VAR 0 18
52023: PUSH
52024: LD_INT 7
52026: PUSH
52027: LD_INT 28
52029: PUSH
52030: LD_INT 45
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: PUSH
52038: LD_VAR 0 12
52042: ARRAY
52043: ST_TO_ADDR
// break ;
52044: GO 52048
// end ; end ; end ;
52046: GO 51877
52048: POP
52049: POP
// end ; if not weapon then
52050: LD_VAR 0 18
52054: NOT
52055: IFFALSE 52115
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52057: LD_ADDR_VAR 0 5
52061: PUSH
52062: LD_VAR 0 5
52066: PUSH
52067: LD_INT 11
52069: PUSH
52070: LD_INT 30
52072: PUSH
52073: LD_INT 49
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: DIFF
52081: ST_TO_ADDR
// if not list then
52082: LD_VAR 0 5
52086: NOT
52087: IFFALSE 52091
// exit ;
52089: GO 52233
// weapon := list [ rand ( 1 , list ) ] ;
52091: LD_ADDR_VAR 0 18
52095: PUSH
52096: LD_VAR 0 5
52100: PUSH
52101: LD_INT 1
52103: PPUSH
52104: LD_VAR 0 5
52108: PPUSH
52109: CALL_OW 12
52113: ARRAY
52114: ST_TO_ADDR
// end ; if weapon then
52115: LD_VAR 0 18
52119: IFFALSE 52233
// begin tmp := CostOfWeapon ( weapon ) ;
52121: LD_ADDR_VAR 0 14
52125: PUSH
52126: LD_VAR 0 18
52130: PPUSH
52131: CALL_OW 451
52135: ST_TO_ADDR
// j := GetBase ( tower ) ;
52136: LD_ADDR_VAR 0 9
52140: PUSH
52141: LD_VAR 0 1
52145: PPUSH
52146: CALL_OW 274
52150: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52151: LD_VAR 0 9
52155: PPUSH
52156: LD_INT 1
52158: PPUSH
52159: CALL_OW 275
52163: PUSH
52164: LD_VAR 0 14
52168: PUSH
52169: LD_INT 1
52171: ARRAY
52172: GREATEREQUAL
52173: PUSH
52174: LD_VAR 0 9
52178: PPUSH
52179: LD_INT 2
52181: PPUSH
52182: CALL_OW 275
52186: PUSH
52187: LD_VAR 0 14
52191: PUSH
52192: LD_INT 2
52194: ARRAY
52195: GREATEREQUAL
52196: AND
52197: PUSH
52198: LD_VAR 0 9
52202: PPUSH
52203: LD_INT 3
52205: PPUSH
52206: CALL_OW 275
52210: PUSH
52211: LD_VAR 0 14
52215: PUSH
52216: LD_INT 3
52218: ARRAY
52219: GREATEREQUAL
52220: AND
52221: IFFALSE 52233
// result := weapon ;
52223: LD_ADDR_VAR 0 3
52227: PUSH
52228: LD_VAR 0 18
52232: ST_TO_ADDR
// end ; end ;
52233: LD_VAR 0 3
52237: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52238: LD_INT 0
52240: PPUSH
52241: PPUSH
// result := true ;
52242: LD_ADDR_VAR 0 3
52246: PUSH
52247: LD_INT 1
52249: ST_TO_ADDR
// if array1 = array2 then
52250: LD_VAR 0 1
52254: PUSH
52255: LD_VAR 0 2
52259: EQUAL
52260: IFFALSE 52320
// begin for i = 1 to array1 do
52262: LD_ADDR_VAR 0 4
52266: PUSH
52267: DOUBLE
52268: LD_INT 1
52270: DEC
52271: ST_TO_ADDR
52272: LD_VAR 0 1
52276: PUSH
52277: FOR_TO
52278: IFFALSE 52316
// if array1 [ i ] <> array2 [ i ] then
52280: LD_VAR 0 1
52284: PUSH
52285: LD_VAR 0 4
52289: ARRAY
52290: PUSH
52291: LD_VAR 0 2
52295: PUSH
52296: LD_VAR 0 4
52300: ARRAY
52301: NONEQUAL
52302: IFFALSE 52314
// begin result := false ;
52304: LD_ADDR_VAR 0 3
52308: PUSH
52309: LD_INT 0
52311: ST_TO_ADDR
// break ;
52312: GO 52316
// end ;
52314: GO 52277
52316: POP
52317: POP
// end else
52318: GO 52328
// result := false ;
52320: LD_ADDR_VAR 0 3
52324: PUSH
52325: LD_INT 0
52327: ST_TO_ADDR
// end ;
52328: LD_VAR 0 3
52332: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52333: LD_INT 0
52335: PPUSH
52336: PPUSH
// if not array1 or not array2 then
52337: LD_VAR 0 1
52341: NOT
52342: PUSH
52343: LD_VAR 0 2
52347: NOT
52348: OR
52349: IFFALSE 52353
// exit ;
52351: GO 52417
// result := true ;
52353: LD_ADDR_VAR 0 3
52357: PUSH
52358: LD_INT 1
52360: ST_TO_ADDR
// for i = 1 to array1 do
52361: LD_ADDR_VAR 0 4
52365: PUSH
52366: DOUBLE
52367: LD_INT 1
52369: DEC
52370: ST_TO_ADDR
52371: LD_VAR 0 1
52375: PUSH
52376: FOR_TO
52377: IFFALSE 52415
// if array1 [ i ] <> array2 [ i ] then
52379: LD_VAR 0 1
52383: PUSH
52384: LD_VAR 0 4
52388: ARRAY
52389: PUSH
52390: LD_VAR 0 2
52394: PUSH
52395: LD_VAR 0 4
52399: ARRAY
52400: NONEQUAL
52401: IFFALSE 52413
// begin result := false ;
52403: LD_ADDR_VAR 0 3
52407: PUSH
52408: LD_INT 0
52410: ST_TO_ADDR
// break ;
52411: GO 52415
// end ;
52413: GO 52376
52415: POP
52416: POP
// end ;
52417: LD_VAR 0 3
52421: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52422: LD_INT 0
52424: PPUSH
52425: PPUSH
52426: PPUSH
// pom := GetBase ( fac ) ;
52427: LD_ADDR_VAR 0 5
52431: PUSH
52432: LD_VAR 0 1
52436: PPUSH
52437: CALL_OW 274
52441: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52442: LD_ADDR_VAR 0 4
52446: PUSH
52447: LD_VAR 0 2
52451: PUSH
52452: LD_INT 1
52454: ARRAY
52455: PPUSH
52456: LD_VAR 0 2
52460: PUSH
52461: LD_INT 2
52463: ARRAY
52464: PPUSH
52465: LD_VAR 0 2
52469: PUSH
52470: LD_INT 3
52472: ARRAY
52473: PPUSH
52474: LD_VAR 0 2
52478: PUSH
52479: LD_INT 4
52481: ARRAY
52482: PPUSH
52483: CALL_OW 449
52487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52488: LD_ADDR_VAR 0 3
52492: PUSH
52493: LD_VAR 0 5
52497: PPUSH
52498: LD_INT 1
52500: PPUSH
52501: CALL_OW 275
52505: PUSH
52506: LD_VAR 0 4
52510: PUSH
52511: LD_INT 1
52513: ARRAY
52514: GREATEREQUAL
52515: PUSH
52516: LD_VAR 0 5
52520: PPUSH
52521: LD_INT 2
52523: PPUSH
52524: CALL_OW 275
52528: PUSH
52529: LD_VAR 0 4
52533: PUSH
52534: LD_INT 2
52536: ARRAY
52537: GREATEREQUAL
52538: AND
52539: PUSH
52540: LD_VAR 0 5
52544: PPUSH
52545: LD_INT 3
52547: PPUSH
52548: CALL_OW 275
52552: PUSH
52553: LD_VAR 0 4
52557: PUSH
52558: LD_INT 3
52560: ARRAY
52561: GREATEREQUAL
52562: AND
52563: ST_TO_ADDR
// end ;
52564: LD_VAR 0 3
52568: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52569: LD_INT 0
52571: PPUSH
52572: PPUSH
52573: PPUSH
52574: PPUSH
// pom := GetBase ( building ) ;
52575: LD_ADDR_VAR 0 3
52579: PUSH
52580: LD_VAR 0 1
52584: PPUSH
52585: CALL_OW 274
52589: ST_TO_ADDR
// if not pom then
52590: LD_VAR 0 3
52594: NOT
52595: IFFALSE 52599
// exit ;
52597: GO 52769
// btype := GetBType ( building ) ;
52599: LD_ADDR_VAR 0 5
52603: PUSH
52604: LD_VAR 0 1
52608: PPUSH
52609: CALL_OW 266
52613: ST_TO_ADDR
// if btype = b_armoury then
52614: LD_VAR 0 5
52618: PUSH
52619: LD_INT 4
52621: EQUAL
52622: IFFALSE 52632
// btype := b_barracks ;
52624: LD_ADDR_VAR 0 5
52628: PUSH
52629: LD_INT 5
52631: ST_TO_ADDR
// if btype = b_depot then
52632: LD_VAR 0 5
52636: PUSH
52637: LD_INT 0
52639: EQUAL
52640: IFFALSE 52650
// btype := b_warehouse ;
52642: LD_ADDR_VAR 0 5
52646: PUSH
52647: LD_INT 1
52649: ST_TO_ADDR
// if btype = b_workshop then
52650: LD_VAR 0 5
52654: PUSH
52655: LD_INT 2
52657: EQUAL
52658: IFFALSE 52668
// btype := b_factory ;
52660: LD_ADDR_VAR 0 5
52664: PUSH
52665: LD_INT 3
52667: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52668: LD_ADDR_VAR 0 4
52672: PUSH
52673: LD_VAR 0 5
52677: PPUSH
52678: LD_VAR 0 1
52682: PPUSH
52683: CALL_OW 248
52687: PPUSH
52688: CALL_OW 450
52692: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52693: LD_ADDR_VAR 0 2
52697: PUSH
52698: LD_VAR 0 3
52702: PPUSH
52703: LD_INT 1
52705: PPUSH
52706: CALL_OW 275
52710: PUSH
52711: LD_VAR 0 4
52715: PUSH
52716: LD_INT 1
52718: ARRAY
52719: GREATEREQUAL
52720: PUSH
52721: LD_VAR 0 3
52725: PPUSH
52726: LD_INT 2
52728: PPUSH
52729: CALL_OW 275
52733: PUSH
52734: LD_VAR 0 4
52738: PUSH
52739: LD_INT 2
52741: ARRAY
52742: GREATEREQUAL
52743: AND
52744: PUSH
52745: LD_VAR 0 3
52749: PPUSH
52750: LD_INT 3
52752: PPUSH
52753: CALL_OW 275
52757: PUSH
52758: LD_VAR 0 4
52762: PUSH
52763: LD_INT 3
52765: ARRAY
52766: GREATEREQUAL
52767: AND
52768: ST_TO_ADDR
// end ;
52769: LD_VAR 0 2
52773: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52774: LD_INT 0
52776: PPUSH
52777: PPUSH
52778: PPUSH
// pom := GetBase ( building ) ;
52779: LD_ADDR_VAR 0 4
52783: PUSH
52784: LD_VAR 0 1
52788: PPUSH
52789: CALL_OW 274
52793: ST_TO_ADDR
// if not pom then
52794: LD_VAR 0 4
52798: NOT
52799: IFFALSE 52803
// exit ;
52801: GO 52904
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52803: LD_ADDR_VAR 0 5
52807: PUSH
52808: LD_VAR 0 2
52812: PPUSH
52813: LD_VAR 0 1
52817: PPUSH
52818: CALL_OW 248
52822: PPUSH
52823: CALL_OW 450
52827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52828: LD_ADDR_VAR 0 3
52832: PUSH
52833: LD_VAR 0 4
52837: PPUSH
52838: LD_INT 1
52840: PPUSH
52841: CALL_OW 275
52845: PUSH
52846: LD_VAR 0 5
52850: PUSH
52851: LD_INT 1
52853: ARRAY
52854: GREATEREQUAL
52855: PUSH
52856: LD_VAR 0 4
52860: PPUSH
52861: LD_INT 2
52863: PPUSH
52864: CALL_OW 275
52868: PUSH
52869: LD_VAR 0 5
52873: PUSH
52874: LD_INT 2
52876: ARRAY
52877: GREATEREQUAL
52878: AND
52879: PUSH
52880: LD_VAR 0 4
52884: PPUSH
52885: LD_INT 3
52887: PPUSH
52888: CALL_OW 275
52892: PUSH
52893: LD_VAR 0 5
52897: PUSH
52898: LD_INT 3
52900: ARRAY
52901: GREATEREQUAL
52902: AND
52903: ST_TO_ADDR
// end ;
52904: LD_VAR 0 3
52908: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52909: LD_INT 0
52911: PPUSH
52912: PPUSH
52913: PPUSH
52914: PPUSH
52915: PPUSH
52916: PPUSH
52917: PPUSH
52918: PPUSH
52919: PPUSH
52920: PPUSH
52921: PPUSH
// result := false ;
52922: LD_ADDR_VAR 0 8
52926: PUSH
52927: LD_INT 0
52929: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52930: LD_VAR 0 5
52934: NOT
52935: PUSH
52936: LD_VAR 0 1
52940: NOT
52941: OR
52942: PUSH
52943: LD_VAR 0 2
52947: NOT
52948: OR
52949: PUSH
52950: LD_VAR 0 3
52954: NOT
52955: OR
52956: IFFALSE 52960
// exit ;
52958: GO 53774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52960: LD_ADDR_VAR 0 14
52964: PUSH
52965: LD_VAR 0 1
52969: PPUSH
52970: LD_VAR 0 2
52974: PPUSH
52975: LD_VAR 0 3
52979: PPUSH
52980: LD_VAR 0 4
52984: PPUSH
52985: LD_VAR 0 5
52989: PUSH
52990: LD_INT 1
52992: ARRAY
52993: PPUSH
52994: CALL_OW 248
52998: PPUSH
52999: LD_INT 0
53001: PPUSH
53002: CALL 55027 0 6
53006: ST_TO_ADDR
// if not hexes then
53007: LD_VAR 0 14
53011: NOT
53012: IFFALSE 53016
// exit ;
53014: GO 53774
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53016: LD_ADDR_VAR 0 17
53020: PUSH
53021: LD_VAR 0 5
53025: PPUSH
53026: LD_INT 22
53028: PUSH
53029: LD_VAR 0 13
53033: PPUSH
53034: CALL_OW 255
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 30
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 30
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PPUSH
53075: CALL_OW 72
53079: ST_TO_ADDR
// for i = 1 to hexes do
53080: LD_ADDR_VAR 0 9
53084: PUSH
53085: DOUBLE
53086: LD_INT 1
53088: DEC
53089: ST_TO_ADDR
53090: LD_VAR 0 14
53094: PUSH
53095: FOR_TO
53096: IFFALSE 53772
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53098: LD_ADDR_VAR 0 13
53102: PUSH
53103: LD_VAR 0 14
53107: PUSH
53108: LD_VAR 0 9
53112: ARRAY
53113: PUSH
53114: LD_INT 1
53116: ARRAY
53117: PPUSH
53118: LD_VAR 0 14
53122: PUSH
53123: LD_VAR 0 9
53127: ARRAY
53128: PUSH
53129: LD_INT 2
53131: ARRAY
53132: PPUSH
53133: CALL_OW 428
53137: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53138: LD_VAR 0 14
53142: PUSH
53143: LD_VAR 0 9
53147: ARRAY
53148: PUSH
53149: LD_INT 1
53151: ARRAY
53152: PPUSH
53153: LD_VAR 0 14
53157: PUSH
53158: LD_VAR 0 9
53162: ARRAY
53163: PUSH
53164: LD_INT 2
53166: ARRAY
53167: PPUSH
53168: CALL_OW 351
53172: PUSH
53173: LD_VAR 0 14
53177: PUSH
53178: LD_VAR 0 9
53182: ARRAY
53183: PUSH
53184: LD_INT 1
53186: ARRAY
53187: PPUSH
53188: LD_VAR 0 14
53192: PUSH
53193: LD_VAR 0 9
53197: ARRAY
53198: PUSH
53199: LD_INT 2
53201: ARRAY
53202: PPUSH
53203: CALL_OW 488
53207: NOT
53208: OR
53209: PUSH
53210: LD_VAR 0 13
53214: PPUSH
53215: CALL_OW 247
53219: PUSH
53220: LD_INT 3
53222: EQUAL
53223: OR
53224: IFFALSE 53230
// exit ;
53226: POP
53227: POP
53228: GO 53774
// if not tmp then
53230: LD_VAR 0 13
53234: NOT
53235: IFFALSE 53239
// continue ;
53237: GO 53095
// result := true ;
53239: LD_ADDR_VAR 0 8
53243: PUSH
53244: LD_INT 1
53246: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53247: LD_VAR 0 6
53251: PUSH
53252: LD_VAR 0 13
53256: PPUSH
53257: CALL_OW 247
53261: PUSH
53262: LD_INT 2
53264: EQUAL
53265: AND
53266: PUSH
53267: LD_VAR 0 13
53271: PPUSH
53272: CALL_OW 263
53276: PUSH
53277: LD_INT 1
53279: EQUAL
53280: AND
53281: IFFALSE 53445
// begin if IsDrivenBy ( tmp ) then
53283: LD_VAR 0 13
53287: PPUSH
53288: CALL_OW 311
53292: IFFALSE 53296
// continue ;
53294: GO 53095
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53296: LD_VAR 0 6
53300: PPUSH
53301: LD_INT 3
53303: PUSH
53304: LD_INT 60
53306: PUSH
53307: EMPTY
53308: LIST
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: LD_INT 55
53319: PUSH
53320: EMPTY
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PPUSH
53331: CALL_OW 72
53335: IFFALSE 53443
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53337: LD_ADDR_VAR 0 18
53341: PUSH
53342: LD_VAR 0 6
53346: PPUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 60
53352: PUSH
53353: EMPTY
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 3
53362: PUSH
53363: LD_INT 55
53365: PUSH
53366: EMPTY
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PPUSH
53377: CALL_OW 72
53381: PUSH
53382: LD_INT 1
53384: ARRAY
53385: ST_TO_ADDR
// if IsInUnit ( driver ) then
53386: LD_VAR 0 18
53390: PPUSH
53391: CALL_OW 310
53395: IFFALSE 53406
// ComExit ( driver ) ;
53397: LD_VAR 0 18
53401: PPUSH
53402: CALL 78808 0 1
// AddComEnterUnit ( driver , tmp ) ;
53406: LD_VAR 0 18
53410: PPUSH
53411: LD_VAR 0 13
53415: PPUSH
53416: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53420: LD_VAR 0 18
53424: PPUSH
53425: LD_VAR 0 7
53429: PPUSH
53430: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53434: LD_VAR 0 18
53438: PPUSH
53439: CALL_OW 181
// end ; continue ;
53443: GO 53095
// end ; if not cleaners or not tmp in cleaners then
53445: LD_VAR 0 6
53449: NOT
53450: PUSH
53451: LD_VAR 0 13
53455: PUSH
53456: LD_VAR 0 6
53460: IN
53461: NOT
53462: OR
53463: IFFALSE 53770
// begin if dep then
53465: LD_VAR 0 17
53469: IFFALSE 53605
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53471: LD_ADDR_VAR 0 16
53475: PUSH
53476: LD_VAR 0 17
53480: PUSH
53481: LD_INT 1
53483: ARRAY
53484: PPUSH
53485: CALL_OW 250
53489: PPUSH
53490: LD_VAR 0 17
53494: PUSH
53495: LD_INT 1
53497: ARRAY
53498: PPUSH
53499: CALL_OW 254
53503: PPUSH
53504: LD_INT 5
53506: PPUSH
53507: CALL_OW 272
53511: PUSH
53512: LD_VAR 0 17
53516: PUSH
53517: LD_INT 1
53519: ARRAY
53520: PPUSH
53521: CALL_OW 251
53525: PPUSH
53526: LD_VAR 0 17
53530: PUSH
53531: LD_INT 1
53533: ARRAY
53534: PPUSH
53535: CALL_OW 254
53539: PPUSH
53540: LD_INT 5
53542: PPUSH
53543: CALL_OW 273
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53552: LD_VAR 0 16
53556: PUSH
53557: LD_INT 1
53559: ARRAY
53560: PPUSH
53561: LD_VAR 0 16
53565: PUSH
53566: LD_INT 2
53568: ARRAY
53569: PPUSH
53570: CALL_OW 488
53574: IFFALSE 53605
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53576: LD_VAR 0 13
53580: PPUSH
53581: LD_VAR 0 16
53585: PUSH
53586: LD_INT 1
53588: ARRAY
53589: PPUSH
53590: LD_VAR 0 16
53594: PUSH
53595: LD_INT 2
53597: ARRAY
53598: PPUSH
53599: CALL_OW 111
// continue ;
53603: GO 53095
// end ; end ; r := GetDir ( tmp ) ;
53605: LD_ADDR_VAR 0 15
53609: PUSH
53610: LD_VAR 0 13
53614: PPUSH
53615: CALL_OW 254
53619: ST_TO_ADDR
// if r = 5 then
53620: LD_VAR 0 15
53624: PUSH
53625: LD_INT 5
53627: EQUAL
53628: IFFALSE 53638
// r := 0 ;
53630: LD_ADDR_VAR 0 15
53634: PUSH
53635: LD_INT 0
53637: ST_TO_ADDR
// for j = r to 5 do
53638: LD_ADDR_VAR 0 10
53642: PUSH
53643: DOUBLE
53644: LD_VAR 0 15
53648: DEC
53649: ST_TO_ADDR
53650: LD_INT 5
53652: PUSH
53653: FOR_TO
53654: IFFALSE 53768
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53656: LD_ADDR_VAR 0 11
53660: PUSH
53661: LD_VAR 0 13
53665: PPUSH
53666: CALL_OW 250
53670: PPUSH
53671: LD_VAR 0 10
53675: PPUSH
53676: LD_INT 2
53678: PPUSH
53679: CALL_OW 272
53683: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53684: LD_ADDR_VAR 0 12
53688: PUSH
53689: LD_VAR 0 13
53693: PPUSH
53694: CALL_OW 251
53698: PPUSH
53699: LD_VAR 0 10
53703: PPUSH
53704: LD_INT 2
53706: PPUSH
53707: CALL_OW 273
53711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53712: LD_VAR 0 11
53716: PPUSH
53717: LD_VAR 0 12
53721: PPUSH
53722: CALL_OW 488
53726: PUSH
53727: LD_VAR 0 11
53731: PPUSH
53732: LD_VAR 0 12
53736: PPUSH
53737: CALL_OW 428
53741: NOT
53742: AND
53743: IFFALSE 53766
// begin ComMoveXY ( tmp , _x , _y ) ;
53745: LD_VAR 0 13
53749: PPUSH
53750: LD_VAR 0 11
53754: PPUSH
53755: LD_VAR 0 12
53759: PPUSH
53760: CALL_OW 111
// break ;
53764: GO 53768
// end ; end ;
53766: GO 53653
53768: POP
53769: POP
// end ; end ;
53770: GO 53095
53772: POP
53773: POP
// end ;
53774: LD_VAR 0 8
53778: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53779: LD_INT 0
53781: PPUSH
// result := true ;
53782: LD_ADDR_VAR 0 3
53786: PUSH
53787: LD_INT 1
53789: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53790: LD_VAR 0 2
53794: PUSH
53795: LD_INT 24
53797: DOUBLE
53798: EQUAL
53799: IFTRUE 53809
53801: LD_INT 33
53803: DOUBLE
53804: EQUAL
53805: IFTRUE 53809
53807: GO 53834
53809: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53810: LD_ADDR_VAR 0 3
53814: PUSH
53815: LD_INT 32
53817: PPUSH
53818: LD_VAR 0 1
53822: PPUSH
53823: CALL_OW 321
53827: PUSH
53828: LD_INT 2
53830: EQUAL
53831: ST_TO_ADDR
53832: GO 54150
53834: LD_INT 20
53836: DOUBLE
53837: EQUAL
53838: IFTRUE 53842
53840: GO 53867
53842: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53843: LD_ADDR_VAR 0 3
53847: PUSH
53848: LD_INT 6
53850: PPUSH
53851: LD_VAR 0 1
53855: PPUSH
53856: CALL_OW 321
53860: PUSH
53861: LD_INT 2
53863: EQUAL
53864: ST_TO_ADDR
53865: GO 54150
53867: LD_INT 22
53869: DOUBLE
53870: EQUAL
53871: IFTRUE 53881
53873: LD_INT 36
53875: DOUBLE
53876: EQUAL
53877: IFTRUE 53881
53879: GO 53906
53881: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53882: LD_ADDR_VAR 0 3
53886: PUSH
53887: LD_INT 15
53889: PPUSH
53890: LD_VAR 0 1
53894: PPUSH
53895: CALL_OW 321
53899: PUSH
53900: LD_INT 2
53902: EQUAL
53903: ST_TO_ADDR
53904: GO 54150
53906: LD_INT 30
53908: DOUBLE
53909: EQUAL
53910: IFTRUE 53914
53912: GO 53939
53914: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53915: LD_ADDR_VAR 0 3
53919: PUSH
53920: LD_INT 20
53922: PPUSH
53923: LD_VAR 0 1
53927: PPUSH
53928: CALL_OW 321
53932: PUSH
53933: LD_INT 2
53935: EQUAL
53936: ST_TO_ADDR
53937: GO 54150
53939: LD_INT 28
53941: DOUBLE
53942: EQUAL
53943: IFTRUE 53953
53945: LD_INT 21
53947: DOUBLE
53948: EQUAL
53949: IFTRUE 53953
53951: GO 53978
53953: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53954: LD_ADDR_VAR 0 3
53958: PUSH
53959: LD_INT 21
53961: PPUSH
53962: LD_VAR 0 1
53966: PPUSH
53967: CALL_OW 321
53971: PUSH
53972: LD_INT 2
53974: EQUAL
53975: ST_TO_ADDR
53976: GO 54150
53978: LD_INT 16
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 53986
53984: GO 54011
53986: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53987: LD_ADDR_VAR 0 3
53991: PUSH
53992: LD_INT 84
53994: PPUSH
53995: LD_VAR 0 1
53999: PPUSH
54000: CALL_OW 321
54004: PUSH
54005: LD_INT 2
54007: EQUAL
54008: ST_TO_ADDR
54009: GO 54150
54011: LD_INT 19
54013: DOUBLE
54014: EQUAL
54015: IFTRUE 54025
54017: LD_INT 23
54019: DOUBLE
54020: EQUAL
54021: IFTRUE 54025
54023: GO 54050
54025: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54026: LD_ADDR_VAR 0 3
54030: PUSH
54031: LD_INT 83
54033: PPUSH
54034: LD_VAR 0 1
54038: PPUSH
54039: CALL_OW 321
54043: PUSH
54044: LD_INT 2
54046: EQUAL
54047: ST_TO_ADDR
54048: GO 54150
54050: LD_INT 17
54052: DOUBLE
54053: EQUAL
54054: IFTRUE 54058
54056: GO 54083
54058: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54059: LD_ADDR_VAR 0 3
54063: PUSH
54064: LD_INT 39
54066: PPUSH
54067: LD_VAR 0 1
54071: PPUSH
54072: CALL_OW 321
54076: PUSH
54077: LD_INT 2
54079: EQUAL
54080: ST_TO_ADDR
54081: GO 54150
54083: LD_INT 18
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54091
54089: GO 54116
54091: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54092: LD_ADDR_VAR 0 3
54096: PUSH
54097: LD_INT 40
54099: PPUSH
54100: LD_VAR 0 1
54104: PPUSH
54105: CALL_OW 321
54109: PUSH
54110: LD_INT 2
54112: EQUAL
54113: ST_TO_ADDR
54114: GO 54150
54116: LD_INT 27
54118: DOUBLE
54119: EQUAL
54120: IFTRUE 54124
54122: GO 54149
54124: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54125: LD_ADDR_VAR 0 3
54129: PUSH
54130: LD_INT 35
54132: PPUSH
54133: LD_VAR 0 1
54137: PPUSH
54138: CALL_OW 321
54142: PUSH
54143: LD_INT 2
54145: EQUAL
54146: ST_TO_ADDR
54147: GO 54150
54149: POP
// end ;
54150: LD_VAR 0 3
54154: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54155: LD_INT 0
54157: PPUSH
54158: PPUSH
54159: PPUSH
54160: PPUSH
54161: PPUSH
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
// result := false ;
54168: LD_ADDR_VAR 0 6
54172: PUSH
54173: LD_INT 0
54175: ST_TO_ADDR
// if btype = b_depot then
54176: LD_VAR 0 2
54180: PUSH
54181: LD_INT 0
54183: EQUAL
54184: IFFALSE 54196
// begin result := true ;
54186: LD_ADDR_VAR 0 6
54190: PUSH
54191: LD_INT 1
54193: ST_TO_ADDR
// exit ;
54194: GO 55022
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54196: LD_VAR 0 1
54200: NOT
54201: PUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 266
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: IN
54222: NOT
54223: OR
54224: PUSH
54225: LD_VAR 0 2
54229: NOT
54230: OR
54231: PUSH
54232: LD_VAR 0 5
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 4
54251: PUSH
54252: LD_INT 5
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: IN
54263: NOT
54264: OR
54265: PUSH
54266: LD_VAR 0 3
54270: PPUSH
54271: LD_VAR 0 4
54275: PPUSH
54276: CALL_OW 488
54280: NOT
54281: OR
54282: IFFALSE 54286
// exit ;
54284: GO 55022
// side := GetSide ( depot ) ;
54286: LD_ADDR_VAR 0 9
54290: PUSH
54291: LD_VAR 0 1
54295: PPUSH
54296: CALL_OW 255
54300: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54301: LD_VAR 0 9
54305: PPUSH
54306: LD_VAR 0 2
54310: PPUSH
54311: CALL 53779 0 2
54315: NOT
54316: IFFALSE 54320
// exit ;
54318: GO 55022
// pom := GetBase ( depot ) ;
54320: LD_ADDR_VAR 0 10
54324: PUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: CALL_OW 274
54334: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54335: LD_ADDR_VAR 0 11
54339: PUSH
54340: LD_VAR 0 2
54344: PPUSH
54345: LD_VAR 0 1
54349: PPUSH
54350: CALL_OW 248
54354: PPUSH
54355: CALL_OW 450
54359: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54360: LD_VAR 0 10
54364: PPUSH
54365: LD_INT 1
54367: PPUSH
54368: CALL_OW 275
54372: PUSH
54373: LD_VAR 0 11
54377: PUSH
54378: LD_INT 1
54380: ARRAY
54381: GREATEREQUAL
54382: PUSH
54383: LD_VAR 0 10
54387: PPUSH
54388: LD_INT 2
54390: PPUSH
54391: CALL_OW 275
54395: PUSH
54396: LD_VAR 0 11
54400: PUSH
54401: LD_INT 2
54403: ARRAY
54404: GREATEREQUAL
54405: AND
54406: PUSH
54407: LD_VAR 0 10
54411: PPUSH
54412: LD_INT 3
54414: PPUSH
54415: CALL_OW 275
54419: PUSH
54420: LD_VAR 0 11
54424: PUSH
54425: LD_INT 3
54427: ARRAY
54428: GREATEREQUAL
54429: AND
54430: NOT
54431: IFFALSE 54435
// exit ;
54433: GO 55022
// if GetBType ( depot ) = b_depot then
54435: LD_VAR 0 1
54439: PPUSH
54440: CALL_OW 266
54444: PUSH
54445: LD_INT 0
54447: EQUAL
54448: IFFALSE 54460
// dist := 28 else
54450: LD_ADDR_VAR 0 14
54454: PUSH
54455: LD_INT 28
54457: ST_TO_ADDR
54458: GO 54468
// dist := 36 ;
54460: LD_ADDR_VAR 0 14
54464: PUSH
54465: LD_INT 36
54467: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54468: LD_VAR 0 1
54472: PPUSH
54473: LD_VAR 0 3
54477: PPUSH
54478: LD_VAR 0 4
54482: PPUSH
54483: CALL_OW 297
54487: PUSH
54488: LD_VAR 0 14
54492: GREATER
54493: IFFALSE 54497
// exit ;
54495: GO 55022
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54497: LD_ADDR_VAR 0 12
54501: PUSH
54502: LD_VAR 0 2
54506: PPUSH
54507: LD_VAR 0 3
54511: PPUSH
54512: LD_VAR 0 4
54516: PPUSH
54517: LD_VAR 0 5
54521: PPUSH
54522: LD_VAR 0 1
54526: PPUSH
54527: CALL_OW 248
54531: PPUSH
54532: LD_INT 0
54534: PPUSH
54535: CALL 55027 0 6
54539: ST_TO_ADDR
// if not hexes then
54540: LD_VAR 0 12
54544: NOT
54545: IFFALSE 54549
// exit ;
54547: GO 55022
// hex := GetHexInfo ( x , y ) ;
54549: LD_ADDR_VAR 0 15
54553: PUSH
54554: LD_VAR 0 3
54558: PPUSH
54559: LD_VAR 0 4
54563: PPUSH
54564: CALL_OW 546
54568: ST_TO_ADDR
// if hex [ 1 ] then
54569: LD_VAR 0 15
54573: PUSH
54574: LD_INT 1
54576: ARRAY
54577: IFFALSE 54581
// exit ;
54579: GO 55022
// height := hex [ 2 ] ;
54581: LD_ADDR_VAR 0 13
54585: PUSH
54586: LD_VAR 0 15
54590: PUSH
54591: LD_INT 2
54593: ARRAY
54594: ST_TO_ADDR
// for i = 1 to hexes do
54595: LD_ADDR_VAR 0 7
54599: PUSH
54600: DOUBLE
54601: LD_INT 1
54603: DEC
54604: ST_TO_ADDR
54605: LD_VAR 0 12
54609: PUSH
54610: FOR_TO
54611: IFFALSE 54941
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54613: LD_VAR 0 12
54617: PUSH
54618: LD_VAR 0 7
54622: ARRAY
54623: PUSH
54624: LD_INT 1
54626: ARRAY
54627: PPUSH
54628: LD_VAR 0 12
54632: PUSH
54633: LD_VAR 0 7
54637: ARRAY
54638: PUSH
54639: LD_INT 2
54641: ARRAY
54642: PPUSH
54643: CALL_OW 488
54647: NOT
54648: PUSH
54649: LD_VAR 0 12
54653: PUSH
54654: LD_VAR 0 7
54658: ARRAY
54659: PUSH
54660: LD_INT 1
54662: ARRAY
54663: PPUSH
54664: LD_VAR 0 12
54668: PUSH
54669: LD_VAR 0 7
54673: ARRAY
54674: PUSH
54675: LD_INT 2
54677: ARRAY
54678: PPUSH
54679: CALL_OW 428
54683: PUSH
54684: LD_INT 0
54686: GREATER
54687: OR
54688: PUSH
54689: LD_VAR 0 12
54693: PUSH
54694: LD_VAR 0 7
54698: ARRAY
54699: PUSH
54700: LD_INT 1
54702: ARRAY
54703: PPUSH
54704: LD_VAR 0 12
54708: PUSH
54709: LD_VAR 0 7
54713: ARRAY
54714: PUSH
54715: LD_INT 2
54717: ARRAY
54718: PPUSH
54719: CALL_OW 351
54723: OR
54724: IFFALSE 54730
// exit ;
54726: POP
54727: POP
54728: GO 55022
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54730: LD_ADDR_VAR 0 8
54734: PUSH
54735: LD_VAR 0 12
54739: PUSH
54740: LD_VAR 0 7
54744: ARRAY
54745: PUSH
54746: LD_INT 1
54748: ARRAY
54749: PPUSH
54750: LD_VAR 0 12
54754: PUSH
54755: LD_VAR 0 7
54759: ARRAY
54760: PUSH
54761: LD_INT 2
54763: ARRAY
54764: PPUSH
54765: CALL_OW 546
54769: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54770: LD_VAR 0 8
54774: PUSH
54775: LD_INT 1
54777: ARRAY
54778: PUSH
54779: LD_VAR 0 8
54783: PUSH
54784: LD_INT 2
54786: ARRAY
54787: PUSH
54788: LD_VAR 0 13
54792: PUSH
54793: LD_INT 2
54795: PLUS
54796: GREATER
54797: OR
54798: PUSH
54799: LD_VAR 0 8
54803: PUSH
54804: LD_INT 2
54806: ARRAY
54807: PUSH
54808: LD_VAR 0 13
54812: PUSH
54813: LD_INT 2
54815: MINUS
54816: LESS
54817: OR
54818: PUSH
54819: LD_VAR 0 8
54823: PUSH
54824: LD_INT 3
54826: ARRAY
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 8
54833: PUSH
54834: LD_INT 9
54836: PUSH
54837: LD_INT 10
54839: PUSH
54840: LD_INT 11
54842: PUSH
54843: LD_INT 12
54845: PUSH
54846: LD_INT 13
54848: PUSH
54849: LD_INT 16
54851: PUSH
54852: LD_INT 17
54854: PUSH
54855: LD_INT 18
54857: PUSH
54858: LD_INT 19
54860: PUSH
54861: LD_INT 20
54863: PUSH
54864: LD_INT 21
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: IN
54882: NOT
54883: OR
54884: PUSH
54885: LD_VAR 0 8
54889: PUSH
54890: LD_INT 5
54892: ARRAY
54893: NOT
54894: OR
54895: PUSH
54896: LD_VAR 0 8
54900: PUSH
54901: LD_INT 6
54903: ARRAY
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 7
54913: PUSH
54914: LD_INT 9
54916: PUSH
54917: LD_INT 10
54919: PUSH
54920: LD_INT 11
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: IN
54931: NOT
54932: OR
54933: IFFALSE 54939
// exit ;
54935: POP
54936: POP
54937: GO 55022
// end ;
54939: GO 54610
54941: POP
54942: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54943: LD_VAR 0 9
54947: PPUSH
54948: LD_VAR 0 3
54952: PPUSH
54953: LD_VAR 0 4
54957: PPUSH
54958: LD_INT 20
54960: PPUSH
54961: CALL 46945 0 4
54965: PUSH
54966: LD_INT 4
54968: ARRAY
54969: IFFALSE 54973
// exit ;
54971: GO 55022
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54973: LD_VAR 0 2
54977: PUSH
54978: LD_INT 29
54980: PUSH
54981: LD_INT 30
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: IN
54988: PUSH
54989: LD_VAR 0 3
54993: PPUSH
54994: LD_VAR 0 4
54998: PPUSH
54999: LD_VAR 0 9
55003: PPUSH
55004: CALL_OW 440
55008: NOT
55009: AND
55010: IFFALSE 55014
// exit ;
55012: GO 55022
// result := true ;
55014: LD_ADDR_VAR 0 6
55018: PUSH
55019: LD_INT 1
55021: ST_TO_ADDR
// end ;
55022: LD_VAR 0 6
55026: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55027: LD_INT 0
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
55081: PPUSH
55082: PPUSH
55083: PPUSH
55084: PPUSH
55085: PPUSH
55086: PPUSH
// result = [ ] ;
55087: LD_ADDR_VAR 0 7
55091: PUSH
55092: EMPTY
55093: ST_TO_ADDR
// temp_list = [ ] ;
55094: LD_ADDR_VAR 0 9
55098: PUSH
55099: EMPTY
55100: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55101: LD_VAR 0 4
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: LD_INT 4
55120: PUSH
55121: LD_INT 5
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: IN
55132: NOT
55133: PUSH
55134: LD_VAR 0 1
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: IN
55149: PUSH
55150: LD_VAR 0 5
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: IN
55169: NOT
55170: AND
55171: OR
55172: IFFALSE 55176
// exit ;
55174: GO 73567
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55176: LD_VAR 0 1
55180: PUSH
55181: LD_INT 6
55183: PUSH
55184: LD_INT 7
55186: PUSH
55187: LD_INT 8
55189: PUSH
55190: LD_INT 13
55192: PUSH
55193: LD_INT 12
55195: PUSH
55196: LD_INT 15
55198: PUSH
55199: LD_INT 11
55201: PUSH
55202: LD_INT 14
55204: PUSH
55205: LD_INT 10
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: IN
55219: IFFALSE 55229
// btype = b_lab ;
55221: LD_ADDR_VAR 0 1
55225: PUSH
55226: LD_INT 6
55228: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55229: LD_VAR 0 6
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: IN
55248: NOT
55249: PUSH
55250: LD_VAR 0 1
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: LD_INT 6
55269: PUSH
55270: LD_INT 36
55272: PUSH
55273: LD_INT 4
55275: PUSH
55276: LD_INT 5
55278: PUSH
55279: LD_INT 31
55281: PUSH
55282: LD_INT 32
55284: PUSH
55285: LD_INT 33
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: IN
55301: NOT
55302: PUSH
55303: LD_VAR 0 6
55307: PUSH
55308: LD_INT 1
55310: EQUAL
55311: AND
55312: OR
55313: PUSH
55314: LD_VAR 0 1
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: IN
55329: NOT
55330: PUSH
55331: LD_VAR 0 6
55335: PUSH
55336: LD_INT 2
55338: EQUAL
55339: AND
55340: OR
55341: IFFALSE 55351
// mode = 0 ;
55343: LD_ADDR_VAR 0 6
55347: PUSH
55348: LD_INT 0
55350: ST_TO_ADDR
// case mode of 0 :
55351: LD_VAR 0 6
55355: PUSH
55356: LD_INT 0
55358: DOUBLE
55359: EQUAL
55360: IFTRUE 55364
55362: GO 66817
55364: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55365: LD_ADDR_VAR 0 11
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55558: LD_ADDR_VAR 0 12
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 3
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55754: LD_ADDR_VAR 0 13
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55953: LD_ADDR_VAR 0 14
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56149: LD_ADDR_VAR 0 15
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56342: LD_ADDR_VAR 0 16
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56535: LD_ADDR_VAR 0 17
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56765: LD_ADDR_VAR 0 18
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56995: LD_ADDR_VAR 0 19
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57225: LD_ADDR_VAR 0 20
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57455: LD_ADDR_VAR 0 21
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57685: LD_ADDR_VAR 0 22
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57915: LD_ADDR_VAR 0 23
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58195: LD_ADDR_VAR 0 24
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58471: LD_ADDR_VAR 0 25
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 3
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58745: LD_ADDR_VAR 0 26
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59021: LD_ADDR_VAR 0 27
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: NEG
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59301: LD_ADDR_VAR 0 28
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: LD_INT 3
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: NEG
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59583: LD_ADDR_VAR 0 29
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 3
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 3
59827: NEG
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59862: LD_ADDR_VAR 0 30
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60140: LD_ADDR_VAR 0 31
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: LD_INT 3
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 2
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60418: LD_ADDR_VAR 0 32
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 3
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60696: LD_ADDR_VAR 0 33
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: NEG
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: NEG
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60975: LD_ADDR_VAR 0 34
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 3
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 3
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61255: LD_ADDR_VAR 0 35
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61367: LD_ADDR_VAR 0 36
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61479: LD_ADDR_VAR 0 37
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61591: LD_ADDR_VAR 0 38
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61703: LD_ADDR_VAR 0 39
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61815: LD_ADDR_VAR 0 40
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61927: LD_ADDR_VAR 0 41
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: NEG
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 3
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: NEG
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 3
62201: NEG
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: NEG
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62277: LD_ADDR_VAR 0 42
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 2
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 3
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62627: LD_ADDR_VAR 0 43
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 3
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 3
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: NEG
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62975: LD_ADDR_VAR 0 44
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: LD_INT 3
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 2
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: LD_INT 3
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 3
63249: NEG
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 3
63260: NEG
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 3
63272: NEG
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 3
63284: NEG
63285: PUSH
63286: LD_INT 3
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63325: LD_ADDR_VAR 0 45
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: LD_INT 2
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: LD_INT 3
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: LD_INT 3
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 3
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 3
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 3
63634: NEG
63635: PUSH
63636: LD_INT 3
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63675: LD_ADDR_VAR 0 46
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 3
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 3
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 3
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: LD_INT 3
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: LD_INT 3
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64023: LD_ADDR_VAR 0 47
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: NEG
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64174: LD_ADDR_VAR 0 48
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64321: LD_ADDR_VAR 0 49
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 2
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64465: LD_ADDR_VAR 0 50
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64609: LD_ADDR_VAR 0 51
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: LD_INT 2
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 2
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 2
64732: NEG
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64756: LD_ADDR_VAR 0 52
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: NEG
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: NEG
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: LD_INT 2
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64907: LD_ADDR_VAR 0 53
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 2
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 2
65083: NEG
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65137: LD_ADDR_VAR 0 54
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 2
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 2
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 2
65313: NEG
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 2
65336: NEG
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65367: LD_ADDR_VAR 0 55
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: LD_INT 2
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 2
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 2
65566: NEG
65567: PUSH
65568: LD_INT 2
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65597: LD_ADDR_VAR 0 56
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 1
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 1
65678: NEG
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 2
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 2
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: LD_INT 2
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: LD_INT 2
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65827: LD_ADDR_VAR 0 57
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: LD_INT 1
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: NEG
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 2
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66057: LD_ADDR_VAR 0 58
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 1
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 2
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 1
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 2
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: LD_INT 2
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: LD_INT 2
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 2
66256: NEG
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66287: LD_ADDR_VAR 0 59
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 0
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66375: LD_ADDR_VAR 0 60
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 1
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66463: LD_ADDR_VAR 0 61
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 1
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: NEG
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66551: LD_ADDR_VAR 0 62
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 1
66609: NEG
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66639: LD_ADDR_VAR 0 63
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66727: LD_ADDR_VAR 0 64
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 1
66785: NEG
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: ST_TO_ADDR
// end ; 1 :
66815: GO 72712
66817: LD_INT 1
66819: DOUBLE
66820: EQUAL
66821: IFTRUE 66825
66823: GO 69448
66825: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66826: LD_ADDR_VAR 0 11
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: LD_INT 3
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: LD_INT 3
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66870: LD_ADDR_VAR 0 12
66874: PUSH
66875: LD_INT 2
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66911: LD_ADDR_VAR 0 13
66915: PUSH
66916: LD_INT 3
66918: PUSH
66919: LD_INT 2
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 3
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 2
66938: PUSH
66939: LD_INT 3
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66951: LD_ADDR_VAR 0 14
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: LIST
66991: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66992: LD_ADDR_VAR 0 15
66996: PUSH
66997: LD_INT 2
66999: NEG
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67036: LD_ADDR_VAR 0 16
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: LD_INT 3
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: LD_INT 2
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67082: LD_ADDR_VAR 0 17
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: LD_INT 3
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: LD_INT 3
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67126: LD_ADDR_VAR 0 18
67130: PUSH
67131: LD_INT 2
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: LIST
67166: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67167: LD_ADDR_VAR 0 19
67171: PUSH
67172: LD_INT 3
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 2
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67207: LD_ADDR_VAR 0 20
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 3
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: NEG
67235: PUSH
67236: LD_INT 2
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67248: LD_ADDR_VAR 0 21
67252: PUSH
67253: LD_INT 2
67255: NEG
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 3
67277: NEG
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: LIST
67291: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67292: LD_ADDR_VAR 0 22
67296: PUSH
67297: LD_INT 2
67299: NEG
67300: PUSH
67301: LD_INT 3
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 3
67311: NEG
67312: PUSH
67313: LD_INT 2
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: LD_INT 3
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67338: LD_ADDR_VAR 0 23
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: LD_INT 3
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 1
67356: NEG
67357: PUSH
67358: LD_INT 4
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67382: LD_ADDR_VAR 0 24
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 3
67399: PUSH
67400: LD_INT 1
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: LIST
67422: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67423: LD_ADDR_VAR 0 25
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 4
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 3
67450: PUSH
67451: LD_INT 4
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67463: LD_ADDR_VAR 0 26
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: LD_INT 4
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67504: LD_ADDR_VAR 0 27
67508: PUSH
67509: LD_INT 3
67511: NEG
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 4
67533: NEG
67534: PUSH
67535: LD_INT 1
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67548: LD_ADDR_VAR 0 28
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: NEG
67568: PUSH
67569: LD_INT 4
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 4
67579: NEG
67580: PUSH
67581: LD_INT 3
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67594: LD_ADDR_VAR 0 29
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: NEG
67636: PUSH
67637: LD_INT 4
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 4
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 3
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 1
67669: NEG
67670: PUSH
67671: LD_INT 5
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 0
67681: PUSH
67682: LD_INT 5
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: LD_INT 4
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 6
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 6
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: LD_INT 5
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67749: LD_ADDR_VAR 0 30
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 1
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: LD_INT 0
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: LD_INT 1
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 4
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 4
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 4
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 5
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 5
67839: PUSH
67840: LD_INT 1
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 5
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 6
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 6
67870: PUSH
67871: LD_INT 1
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67892: LD_ADDR_VAR 0 31
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 2
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: LD_INT 3
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 4
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 4
67939: PUSH
67940: LD_INT 4
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: LD_INT 4
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 5
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 5
67969: PUSH
67970: LD_INT 5
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: PUSH
67980: LD_INT 5
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 6
67989: PUSH
67990: LD_INT 5
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 6
67999: PUSH
68000: LD_INT 6
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 5
68009: PUSH
68010: LD_INT 6
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68031: LD_ADDR_VAR 0 32
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: LD_INT 2
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 4
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: LD_INT 4
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: LD_INT 5
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 1
68120: NEG
68121: PUSH
68122: LD_INT 4
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: LD_INT 6
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 0
68141: PUSH
68142: LD_INT 6
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 1
68151: NEG
68152: PUSH
68153: LD_INT 5
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68174: LD_ADDR_VAR 0 33
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: LD_INT 1
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 3
68203: NEG
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 3
68215: NEG
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 4
68226: NEG
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 4
68237: NEG
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 4
68249: NEG
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 5
68260: NEG
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 5
68271: NEG
68272: PUSH
68273: LD_INT 1
68275: NEG
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 5
68283: NEG
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 6
68294: NEG
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 6
68305: NEG
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68329: LD_ADDR_VAR 0 34
68333: PUSH
68334: LD_INT 2
68336: NEG
68337: PUSH
68338: LD_INT 3
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 3
68348: NEG
68349: PUSH
68350: LD_INT 2
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 3
68360: NEG
68361: PUSH
68362: LD_INT 3
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: NEG
68373: PUSH
68374: LD_INT 4
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 4
68384: NEG
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 4
68396: NEG
68397: PUSH
68398: LD_INT 4
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 4
68408: NEG
68409: PUSH
68410: LD_INT 5
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 5
68420: NEG
68421: PUSH
68422: LD_INT 4
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 5
68432: NEG
68433: PUSH
68434: LD_INT 5
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 5
68444: NEG
68445: PUSH
68446: LD_INT 6
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 6
68456: NEG
68457: PUSH
68458: LD_INT 5
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 6
68468: NEG
68469: PUSH
68470: LD_INT 6
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68492: LD_ADDR_VAR 0 41
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 1
68510: NEG
68511: PUSH
68512: LD_INT 3
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: LD_INT 2
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68536: LD_ADDR_VAR 0 42
68540: PUSH
68541: LD_INT 2
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 2
68553: PUSH
68554: LD_INT 1
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 3
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68577: LD_ADDR_VAR 0 43
68581: PUSH
68582: LD_INT 2
68584: PUSH
68585: LD_INT 2
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 3
68594: PUSH
68595: LD_INT 2
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 2
68604: PUSH
68605: LD_INT 3
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68617: LD_ADDR_VAR 0 44
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: PUSH
68635: LD_INT 3
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: LIST
68657: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68658: LD_ADDR_VAR 0 45
68662: PUSH
68663: LD_INT 2
68665: NEG
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 3
68687: NEG
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: LIST
68701: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68702: LD_ADDR_VAR 0 46
68706: PUSH
68707: LD_INT 2
68709: NEG
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 2
68721: NEG
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: LD_INT 2
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: LIST
68747: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68748: LD_ADDR_VAR 0 47
68752: PUSH
68753: LD_INT 2
68755: NEG
68756: PUSH
68757: LD_INT 3
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68781: LD_ADDR_VAR 0 48
68785: PUSH
68786: LD_INT 1
68788: PUSH
68789: LD_INT 2
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 2
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68812: LD_ADDR_VAR 0 49
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: LD_INT 1
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68841: LD_ADDR_VAR 0 50
68845: PUSH
68846: LD_INT 2
68848: PUSH
68849: LD_INT 3
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 1
68858: PUSH
68859: LD_INT 3
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68870: LD_ADDR_VAR 0 51
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 2
68888: NEG
68889: PUSH
68890: LD_INT 1
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68901: LD_ADDR_VAR 0 52
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 3
68920: NEG
68921: PUSH
68922: LD_INT 2
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68934: LD_ADDR_VAR 0 53
68938: PUSH
68939: LD_INT 1
68941: NEG
68942: PUSH
68943: LD_INT 3
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: LIST
68977: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68978: LD_ADDR_VAR 0 54
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: LD_INT 1
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 3
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 3
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: LIST
69018: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69019: LD_ADDR_VAR 0 55
69023: PUSH
69024: LD_INT 3
69026: PUSH
69027: LD_INT 2
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 3
69036: PUSH
69037: LD_INT 3
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 2
69046: PUSH
69047: LD_INT 3
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69059: LD_ADDR_VAR 0 56
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: LIST
69099: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69100: LD_ADDR_VAR 0 57
69104: PUSH
69105: LD_INT 2
69107: NEG
69108: PUSH
69109: LD_INT 1
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 3
69118: NEG
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: LD_INT 1
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: LIST
69143: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69144: LD_ADDR_VAR 0 58
69148: PUSH
69149: LD_INT 2
69151: NEG
69152: PUSH
69153: LD_INT 3
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: LD_INT 2
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 3
69175: NEG
69176: PUSH
69177: LD_INT 3
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69190: LD_ADDR_VAR 0 59
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: LD_INT 2
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: LD_INT 2
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 1
69220: PUSH
69221: LD_INT 1
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: LIST
69233: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69234: LD_ADDR_VAR 0 60
69238: PUSH
69239: LD_INT 1
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 2
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 2
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69275: LD_ADDR_VAR 0 61
69279: PUSH
69280: LD_INT 2
69282: PUSH
69283: LD_INT 1
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 2
69292: PUSH
69293: LD_INT 2
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: LD_INT 2
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: LIST
69314: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69315: LD_ADDR_VAR 0 62
69319: PUSH
69320: LD_INT 1
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_INT 2
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69356: LD_ADDR_VAR 0 63
69360: PUSH
69361: LD_INT 1
69363: NEG
69364: PUSH
69365: LD_INT 1
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 2
69374: NEG
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 2
69385: NEG
69386: PUSH
69387: LD_INT 1
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: LIST
69399: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69400: LD_ADDR_VAR 0 64
69404: PUSH
69405: LD_INT 1
69407: NEG
69408: PUSH
69409: LD_INT 2
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 2
69419: NEG
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 2
69431: NEG
69432: PUSH
69433: LD_INT 2
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: ST_TO_ADDR
// end ; 2 :
69446: GO 72712
69448: LD_INT 2
69450: DOUBLE
69451: EQUAL
69452: IFTRUE 69456
69454: GO 72711
69456: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69457: LD_ADDR_VAR 0 29
69461: PUSH
69462: LD_INT 4
69464: PUSH
69465: LD_INT 0
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 4
69474: PUSH
69475: LD_INT 1
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 5
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 5
69495: PUSH
69496: LD_INT 1
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 4
69505: PUSH
69506: LD_INT 1
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 3
69525: PUSH
69526: LD_INT 1
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 3
69536: PUSH
69537: LD_INT 2
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 5
69547: PUSH
69548: LD_INT 2
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 3
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 4
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 4
69587: PUSH
69588: LD_INT 4
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 3
69597: PUSH
69598: LD_INT 4
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: LD_INT 3
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 2
69617: PUSH
69618: LD_INT 2
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 4
69627: PUSH
69628: LD_INT 2
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 2
69637: PUSH
69638: LD_INT 4
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: LD_INT 4
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: LD_INT 3
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 1
69667: PUSH
69668: LD_INT 4
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 1
69677: PUSH
69678: LD_INT 5
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: LD_INT 5
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 1
69697: NEG
69698: PUSH
69699: LD_INT 4
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: LD_INT 3
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 2
69719: PUSH
69720: LD_INT 5
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: LD_INT 3
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 3
69740: NEG
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 3
69751: NEG
69752: PUSH
69753: LD_INT 1
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 2
69763: NEG
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 2
69774: NEG
69775: PUSH
69776: LD_INT 1
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 3
69785: NEG
69786: PUSH
69787: LD_INT 1
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 4
69796: NEG
69797: PUSH
69798: LD_INT 0
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 4
69807: NEG
69808: PUSH
69809: LD_INT 1
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 4
69819: NEG
69820: PUSH
69821: LD_INT 2
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 2
69831: NEG
69832: PUSH
69833: LD_INT 2
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 4
69842: NEG
69843: PUSH
69844: LD_INT 4
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 4
69854: NEG
69855: PUSH
69856: LD_INT 5
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 3
69866: NEG
69867: PUSH
69868: LD_INT 4
69870: NEG
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 3
69878: NEG
69879: PUSH
69880: LD_INT 3
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 4
69890: NEG
69891: PUSH
69892: LD_INT 3
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 5
69902: NEG
69903: PUSH
69904: LD_INT 4
69906: NEG
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 5
69914: NEG
69915: PUSH
69916: LD_INT 5
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 3
69926: NEG
69927: PUSH
69928: LD_INT 5
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 5
69938: NEG
69939: PUSH
69940: LD_INT 3
69942: NEG
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69995: LD_ADDR_VAR 0 30
69999: PUSH
70000: LD_INT 4
70002: PUSH
70003: LD_INT 4
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: LD_INT 3
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 5
70022: PUSH
70023: LD_INT 4
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 5
70032: PUSH
70033: LD_INT 5
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 4
70042: PUSH
70043: LD_INT 5
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 3
70052: PUSH
70053: LD_INT 4
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 3
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 5
70072: PUSH
70073: LD_INT 3
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 3
70082: PUSH
70083: LD_INT 5
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: LD_INT 2
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: LD_INT 3
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: LD_INT 4
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 4
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: NEG
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 2
70164: PUSH
70165: LD_INT 4
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 2
70174: NEG
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 4
70185: NEG
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 4
70196: NEG
70197: PUSH
70198: LD_INT 1
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 3
70208: NEG
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 3
70219: NEG
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 4
70230: NEG
70231: PUSH
70232: LD_INT 1
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 5
70241: NEG
70242: PUSH
70243: LD_INT 0
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 5
70252: NEG
70253: PUSH
70254: LD_INT 1
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 5
70264: NEG
70265: PUSH
70266: LD_INT 2
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 3
70276: NEG
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 3
70287: NEG
70288: PUSH
70289: LD_INT 3
70291: NEG
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 3
70299: NEG
70300: PUSH
70301: LD_INT 4
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 2
70311: NEG
70312: PUSH
70313: LD_INT 3
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 2
70323: NEG
70324: PUSH
70325: LD_INT 2
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 3
70335: NEG
70336: PUSH
70337: LD_INT 2
70339: NEG
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 4
70347: NEG
70348: PUSH
70349: LD_INT 3
70351: NEG
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 4
70359: NEG
70360: PUSH
70361: LD_INT 4
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 2
70371: NEG
70372: PUSH
70373: LD_INT 4
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 4
70383: NEG
70384: PUSH
70385: LD_INT 2
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_INT 4
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: LD_INT 5
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: PUSH
70418: LD_INT 4
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 1
70428: PUSH
70429: LD_INT 3
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: LD_INT 3
70442: NEG
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: NEG
70451: PUSH
70452: LD_INT 4
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 1
70462: NEG
70463: PUSH
70464: LD_INT 5
70466: NEG
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 2
70474: PUSH
70475: LD_INT 3
70477: NEG
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 2
70485: NEG
70486: PUSH
70487: LD_INT 5
70489: NEG
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70542: LD_ADDR_VAR 0 31
70546: PUSH
70547: LD_INT 0
70549: PUSH
70550: LD_INT 4
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: LD_INT 3
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: LD_INT 4
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 1
70579: PUSH
70580: LD_INT 5
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 0
70589: PUSH
70590: LD_INT 5
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 1
70599: NEG
70600: PUSH
70601: LD_INT 4
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: NEG
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 2
70621: PUSH
70622: LD_INT 5
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 2
70631: NEG
70632: PUSH
70633: LD_INT 3
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 3
70642: NEG
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 3
70653: NEG
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 2
70665: NEG
70666: PUSH
70667: LD_INT 0
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 2
70676: NEG
70677: PUSH
70678: LD_INT 1
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 3
70687: NEG
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 4
70698: NEG
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 4
70709: NEG
70710: PUSH
70711: LD_INT 1
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 4
70721: NEG
70722: PUSH
70723: LD_INT 2
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 2
70733: NEG
70734: PUSH
70735: LD_INT 2
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 4
70744: NEG
70745: PUSH
70746: LD_INT 4
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 4
70756: NEG
70757: PUSH
70758: LD_INT 5
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 3
70768: NEG
70769: PUSH
70770: LD_INT 4
70772: NEG
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 3
70780: NEG
70781: PUSH
70782: LD_INT 3
70784: NEG
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 4
70792: NEG
70793: PUSH
70794: LD_INT 3
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 5
70804: NEG
70805: PUSH
70806: LD_INT 4
70808: NEG
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 5
70816: NEG
70817: PUSH
70818: LD_INT 5
70820: NEG
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 3
70828: NEG
70829: PUSH
70830: LD_INT 5
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 5
70840: NEG
70841: PUSH
70842: LD_INT 3
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 0
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 0
70863: PUSH
70864: LD_INT 4
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 1
70874: PUSH
70875: LD_INT 3
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 1
70885: PUSH
70886: LD_INT 2
70888: NEG
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 0
70896: PUSH
70897: LD_INT 2
70899: NEG
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 1
70907: NEG
70908: PUSH
70909: LD_INT 3
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 1
70919: NEG
70920: PUSH
70921: LD_INT 4
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: LD_INT 2
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 2
70942: NEG
70943: PUSH
70944: LD_INT 4
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 4
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 4
70964: PUSH
70965: LD_INT 1
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 5
70975: PUSH
70976: LD_INT 0
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 5
70985: PUSH
70986: LD_INT 1
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 4
70995: PUSH
70996: LD_INT 1
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 3
71005: PUSH
71006: LD_INT 0
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 3
71015: PUSH
71016: LD_INT 1
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 3
71026: PUSH
71027: LD_INT 2
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 5
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71092: LD_ADDR_VAR 0 32
71096: PUSH
71097: LD_INT 4
71099: NEG
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 4
71110: NEG
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 3
71122: NEG
71123: PUSH
71124: LD_INT 0
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 3
71133: NEG
71134: PUSH
71135: LD_INT 1
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 4
71144: NEG
71145: PUSH
71146: LD_INT 1
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 5
71155: NEG
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 5
71166: NEG
71167: PUSH
71168: LD_INT 1
71170: NEG
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 5
71178: NEG
71179: PUSH
71180: LD_INT 2
71182: NEG
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 3
71190: NEG
71191: PUSH
71192: LD_INT 2
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 3
71201: NEG
71202: PUSH
71203: LD_INT 3
71205: NEG
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 3
71213: NEG
71214: PUSH
71215: LD_INT 4
71217: NEG
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 2
71225: NEG
71226: PUSH
71227: LD_INT 3
71229: NEG
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 2
71237: NEG
71238: PUSH
71239: LD_INT 2
71241: NEG
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 3
71249: NEG
71250: PUSH
71251: LD_INT 2
71253: NEG
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 4
71261: NEG
71262: PUSH
71263: LD_INT 3
71265: NEG
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 4
71273: NEG
71274: PUSH
71275: LD_INT 4
71277: NEG
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 2
71285: NEG
71286: PUSH
71287: LD_INT 4
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 4
71297: NEG
71298: PUSH
71299: LD_INT 2
71301: NEG
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 0
71309: PUSH
71310: LD_INT 4
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 0
71320: PUSH
71321: LD_INT 5
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 1
71331: PUSH
71332: LD_INT 4
71334: NEG
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 1
71342: PUSH
71343: LD_INT 3
71345: NEG
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 0
71353: PUSH
71354: LD_INT 3
71356: NEG
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 1
71364: NEG
71365: PUSH
71366: LD_INT 4
71368: NEG
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 1
71376: NEG
71377: PUSH
71378: LD_INT 5
71380: NEG
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 2
71388: PUSH
71389: LD_INT 3
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 2
71399: NEG
71400: PUSH
71401: LD_INT 5
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 3
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 3
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 4
71432: PUSH
71433: LD_INT 0
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 4
71442: PUSH
71443: LD_INT 1
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 3
71452: PUSH
71453: LD_INT 1
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 2
71462: PUSH
71463: LD_INT 0
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 2
71472: PUSH
71473: LD_INT 1
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: PUSH
71484: LD_INT 2
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 4
71494: PUSH
71495: LD_INT 2
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 4
71504: PUSH
71505: LD_INT 4
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 4
71514: PUSH
71515: LD_INT 3
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 5
71524: PUSH
71525: LD_INT 4
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 5
71534: PUSH
71535: LD_INT 5
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 4
71544: PUSH
71545: LD_INT 5
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 3
71554: PUSH
71555: LD_INT 4
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 3
71564: PUSH
71565: LD_INT 3
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 5
71574: PUSH
71575: LD_INT 3
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 3
71584: PUSH
71585: LD_INT 5
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71639: LD_ADDR_VAR 0 33
71643: PUSH
71644: LD_INT 4
71646: NEG
71647: PUSH
71648: LD_INT 4
71650: NEG
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 4
71658: NEG
71659: PUSH
71660: LD_INT 5
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 3
71670: NEG
71671: PUSH
71672: LD_INT 4
71674: NEG
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 3
71682: NEG
71683: PUSH
71684: LD_INT 3
71686: NEG
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 4
71694: NEG
71695: PUSH
71696: LD_INT 3
71698: NEG
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 5
71706: NEG
71707: PUSH
71708: LD_INT 4
71710: NEG
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 5
71718: NEG
71719: PUSH
71720: LD_INT 5
71722: NEG
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 3
71730: NEG
71731: PUSH
71732: LD_INT 5
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 5
71742: NEG
71743: PUSH
71744: LD_INT 3
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: LD_INT 3
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 0
71765: PUSH
71766: LD_INT 4
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 1
71776: PUSH
71777: LD_INT 3
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 1
71787: PUSH
71788: LD_INT 2
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: LD_INT 2
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 1
71809: NEG
71810: PUSH
71811: LD_INT 3
71813: NEG
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 1
71821: NEG
71822: PUSH
71823: LD_INT 4
71825: NEG
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 2
71833: PUSH
71834: LD_INT 2
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 2
71844: NEG
71845: PUSH
71846: LD_INT 4
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 4
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 4
71866: PUSH
71867: LD_INT 1
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 5
71877: PUSH
71878: LD_INT 0
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 5
71887: PUSH
71888: LD_INT 1
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 4
71897: PUSH
71898: LD_INT 1
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 3
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: PUSH
71918: LD_INT 1
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 3
71928: PUSH
71929: LD_INT 2
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 5
71939: PUSH
71940: LD_INT 2
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 3
71949: PUSH
71950: LD_INT 3
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 3
71959: PUSH
71960: LD_INT 2
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 4
71969: PUSH
71970: LD_INT 3
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 4
71979: PUSH
71980: LD_INT 4
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 3
71989: PUSH
71990: LD_INT 4
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 2
71999: PUSH
72000: LD_INT 3
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 2
72009: PUSH
72010: LD_INT 2
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 4
72019: PUSH
72020: LD_INT 2
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 2
72029: PUSH
72030: LD_INT 4
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: LD_INT 4
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 0
72049: PUSH
72050: LD_INT 3
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: LD_INT 4
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 1
72069: PUSH
72070: LD_INT 5
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: LD_INT 5
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 1
72089: NEG
72090: PUSH
72091: LD_INT 4
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 1
72100: NEG
72101: PUSH
72102: LD_INT 3
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: PUSH
72112: LD_INT 5
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 2
72121: NEG
72122: PUSH
72123: LD_INT 3
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72177: LD_ADDR_VAR 0 34
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: LD_INT 4
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 5
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 1
72206: PUSH
72207: LD_INT 4
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: LD_INT 3
72220: NEG
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: LD_INT 3
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 1
72239: NEG
72240: PUSH
72241: LD_INT 4
72243: NEG
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 1
72251: NEG
72252: PUSH
72253: LD_INT 5
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 2
72263: PUSH
72264: LD_INT 3
72266: NEG
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 2
72274: NEG
72275: PUSH
72276: LD_INT 5
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 3
72286: PUSH
72287: LD_INT 0
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 3
72296: PUSH
72297: LD_INT 1
72299: NEG
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 4
72307: PUSH
72308: LD_INT 0
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 4
72317: PUSH
72318: LD_INT 1
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 3
72327: PUSH
72328: LD_INT 1
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: LD_INT 0
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 2
72347: PUSH
72348: LD_INT 1
72350: NEG
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 2
72358: PUSH
72359: LD_INT 2
72361: NEG
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 4
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 4
72379: PUSH
72380: LD_INT 4
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 4
72389: PUSH
72390: LD_INT 3
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 5
72399: PUSH
72400: LD_INT 4
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 5
72409: PUSH
72410: LD_INT 5
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 4
72419: PUSH
72420: LD_INT 5
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 3
72429: PUSH
72430: LD_INT 4
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 3
72439: PUSH
72440: LD_INT 3
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 5
72449: PUSH
72450: LD_INT 3
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 3
72459: PUSH
72460: LD_INT 5
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 0
72469: PUSH
72470: LD_INT 3
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: LD_INT 2
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 1
72489: PUSH
72490: LD_INT 3
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 1
72499: PUSH
72500: LD_INT 4
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: LD_INT 4
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 1
72519: NEG
72520: PUSH
72521: LD_INT 3
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 1
72530: NEG
72531: PUSH
72532: LD_INT 2
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 2
72541: PUSH
72542: LD_INT 4
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 2
72551: NEG
72552: PUSH
72553: LD_INT 2
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 4
72562: NEG
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 4
72573: NEG
72574: PUSH
72575: LD_INT 1
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 3
72585: NEG
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 3
72596: NEG
72597: PUSH
72598: LD_INT 1
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 4
72607: NEG
72608: PUSH
72609: LD_INT 1
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 5
72618: NEG
72619: PUSH
72620: LD_INT 0
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 5
72629: NEG
72630: PUSH
72631: LD_INT 1
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 5
72641: NEG
72642: PUSH
72643: LD_INT 2
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 3
72653: NEG
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: ST_TO_ADDR
// end ; end ;
72709: GO 72712
72711: POP
// case btype of b_depot , b_warehouse :
72712: LD_VAR 0 1
72716: PUSH
72717: LD_INT 0
72719: DOUBLE
72720: EQUAL
72721: IFTRUE 72731
72723: LD_INT 1
72725: DOUBLE
72726: EQUAL
72727: IFTRUE 72731
72729: GO 72932
72731: POP
// case nation of nation_american :
72732: LD_VAR 0 5
72736: PUSH
72737: LD_INT 1
72739: DOUBLE
72740: EQUAL
72741: IFTRUE 72745
72743: GO 72801
72745: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72746: LD_ADDR_VAR 0 9
72750: PUSH
72751: LD_VAR 0 11
72755: PUSH
72756: LD_VAR 0 12
72760: PUSH
72761: LD_VAR 0 13
72765: PUSH
72766: LD_VAR 0 14
72770: PUSH
72771: LD_VAR 0 15
72775: PUSH
72776: LD_VAR 0 16
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: PUSH
72789: LD_VAR 0 4
72793: PUSH
72794: LD_INT 1
72796: PLUS
72797: ARRAY
72798: ST_TO_ADDR
72799: GO 72930
72801: LD_INT 2
72803: DOUBLE
72804: EQUAL
72805: IFTRUE 72809
72807: GO 72865
72809: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72810: LD_ADDR_VAR 0 9
72814: PUSH
72815: LD_VAR 0 17
72819: PUSH
72820: LD_VAR 0 18
72824: PUSH
72825: LD_VAR 0 19
72829: PUSH
72830: LD_VAR 0 20
72834: PUSH
72835: LD_VAR 0 21
72839: PUSH
72840: LD_VAR 0 22
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: PUSH
72853: LD_VAR 0 4
72857: PUSH
72858: LD_INT 1
72860: PLUS
72861: ARRAY
72862: ST_TO_ADDR
72863: GO 72930
72865: LD_INT 3
72867: DOUBLE
72868: EQUAL
72869: IFTRUE 72873
72871: GO 72929
72873: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72874: LD_ADDR_VAR 0 9
72878: PUSH
72879: LD_VAR 0 23
72883: PUSH
72884: LD_VAR 0 24
72888: PUSH
72889: LD_VAR 0 25
72893: PUSH
72894: LD_VAR 0 26
72898: PUSH
72899: LD_VAR 0 27
72903: PUSH
72904: LD_VAR 0 28
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: PUSH
72917: LD_VAR 0 4
72921: PUSH
72922: LD_INT 1
72924: PLUS
72925: ARRAY
72926: ST_TO_ADDR
72927: GO 72930
72929: POP
72930: GO 73485
72932: LD_INT 2
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72946
72938: LD_INT 3
72940: DOUBLE
72941: EQUAL
72942: IFTRUE 72946
72944: GO 73002
72946: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72947: LD_ADDR_VAR 0 9
72951: PUSH
72952: LD_VAR 0 29
72956: PUSH
72957: LD_VAR 0 30
72961: PUSH
72962: LD_VAR 0 31
72966: PUSH
72967: LD_VAR 0 32
72971: PUSH
72972: LD_VAR 0 33
72976: PUSH
72977: LD_VAR 0 34
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: PUSH
72990: LD_VAR 0 4
72994: PUSH
72995: LD_INT 1
72997: PLUS
72998: ARRAY
72999: ST_TO_ADDR
73000: GO 73485
73002: LD_INT 16
73004: DOUBLE
73005: EQUAL
73006: IFTRUE 73064
73008: LD_INT 17
73010: DOUBLE
73011: EQUAL
73012: IFTRUE 73064
73014: LD_INT 18
73016: DOUBLE
73017: EQUAL
73018: IFTRUE 73064
73020: LD_INT 19
73022: DOUBLE
73023: EQUAL
73024: IFTRUE 73064
73026: LD_INT 22
73028: DOUBLE
73029: EQUAL
73030: IFTRUE 73064
73032: LD_INT 20
73034: DOUBLE
73035: EQUAL
73036: IFTRUE 73064
73038: LD_INT 21
73040: DOUBLE
73041: EQUAL
73042: IFTRUE 73064
73044: LD_INT 23
73046: DOUBLE
73047: EQUAL
73048: IFTRUE 73064
73050: LD_INT 24
73052: DOUBLE
73053: EQUAL
73054: IFTRUE 73064
73056: LD_INT 25
73058: DOUBLE
73059: EQUAL
73060: IFTRUE 73064
73062: GO 73120
73064: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73065: LD_ADDR_VAR 0 9
73069: PUSH
73070: LD_VAR 0 35
73074: PUSH
73075: LD_VAR 0 36
73079: PUSH
73080: LD_VAR 0 37
73084: PUSH
73085: LD_VAR 0 38
73089: PUSH
73090: LD_VAR 0 39
73094: PUSH
73095: LD_VAR 0 40
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: PUSH
73108: LD_VAR 0 4
73112: PUSH
73113: LD_INT 1
73115: PLUS
73116: ARRAY
73117: ST_TO_ADDR
73118: GO 73485
73120: LD_INT 6
73122: DOUBLE
73123: EQUAL
73124: IFTRUE 73176
73126: LD_INT 7
73128: DOUBLE
73129: EQUAL
73130: IFTRUE 73176
73132: LD_INT 8
73134: DOUBLE
73135: EQUAL
73136: IFTRUE 73176
73138: LD_INT 13
73140: DOUBLE
73141: EQUAL
73142: IFTRUE 73176
73144: LD_INT 12
73146: DOUBLE
73147: EQUAL
73148: IFTRUE 73176
73150: LD_INT 15
73152: DOUBLE
73153: EQUAL
73154: IFTRUE 73176
73156: LD_INT 11
73158: DOUBLE
73159: EQUAL
73160: IFTRUE 73176
73162: LD_INT 14
73164: DOUBLE
73165: EQUAL
73166: IFTRUE 73176
73168: LD_INT 10
73170: DOUBLE
73171: EQUAL
73172: IFTRUE 73176
73174: GO 73232
73176: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73177: LD_ADDR_VAR 0 9
73181: PUSH
73182: LD_VAR 0 41
73186: PUSH
73187: LD_VAR 0 42
73191: PUSH
73192: LD_VAR 0 43
73196: PUSH
73197: LD_VAR 0 44
73201: PUSH
73202: LD_VAR 0 45
73206: PUSH
73207: LD_VAR 0 46
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: PUSH
73220: LD_VAR 0 4
73224: PUSH
73225: LD_INT 1
73227: PLUS
73228: ARRAY
73229: ST_TO_ADDR
73230: GO 73485
73232: LD_INT 36
73234: DOUBLE
73235: EQUAL
73236: IFTRUE 73240
73238: GO 73296
73240: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73241: LD_ADDR_VAR 0 9
73245: PUSH
73246: LD_VAR 0 47
73250: PUSH
73251: LD_VAR 0 48
73255: PUSH
73256: LD_VAR 0 49
73260: PUSH
73261: LD_VAR 0 50
73265: PUSH
73266: LD_VAR 0 51
73270: PUSH
73271: LD_VAR 0 52
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: PUSH
73284: LD_VAR 0 4
73288: PUSH
73289: LD_INT 1
73291: PLUS
73292: ARRAY
73293: ST_TO_ADDR
73294: GO 73485
73296: LD_INT 4
73298: DOUBLE
73299: EQUAL
73300: IFTRUE 73322
73302: LD_INT 5
73304: DOUBLE
73305: EQUAL
73306: IFTRUE 73322
73308: LD_INT 34
73310: DOUBLE
73311: EQUAL
73312: IFTRUE 73322
73314: LD_INT 37
73316: DOUBLE
73317: EQUAL
73318: IFTRUE 73322
73320: GO 73378
73322: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73323: LD_ADDR_VAR 0 9
73327: PUSH
73328: LD_VAR 0 53
73332: PUSH
73333: LD_VAR 0 54
73337: PUSH
73338: LD_VAR 0 55
73342: PUSH
73343: LD_VAR 0 56
73347: PUSH
73348: LD_VAR 0 57
73352: PUSH
73353: LD_VAR 0 58
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: PUSH
73366: LD_VAR 0 4
73370: PUSH
73371: LD_INT 1
73373: PLUS
73374: ARRAY
73375: ST_TO_ADDR
73376: GO 73485
73378: LD_INT 31
73380: DOUBLE
73381: EQUAL
73382: IFTRUE 73428
73384: LD_INT 32
73386: DOUBLE
73387: EQUAL
73388: IFTRUE 73428
73390: LD_INT 33
73392: DOUBLE
73393: EQUAL
73394: IFTRUE 73428
73396: LD_INT 27
73398: DOUBLE
73399: EQUAL
73400: IFTRUE 73428
73402: LD_INT 26
73404: DOUBLE
73405: EQUAL
73406: IFTRUE 73428
73408: LD_INT 28
73410: DOUBLE
73411: EQUAL
73412: IFTRUE 73428
73414: LD_INT 29
73416: DOUBLE
73417: EQUAL
73418: IFTRUE 73428
73420: LD_INT 30
73422: DOUBLE
73423: EQUAL
73424: IFTRUE 73428
73426: GO 73484
73428: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73429: LD_ADDR_VAR 0 9
73433: PUSH
73434: LD_VAR 0 59
73438: PUSH
73439: LD_VAR 0 60
73443: PUSH
73444: LD_VAR 0 61
73448: PUSH
73449: LD_VAR 0 62
73453: PUSH
73454: LD_VAR 0 63
73458: PUSH
73459: LD_VAR 0 64
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: PUSH
73472: LD_VAR 0 4
73476: PUSH
73477: LD_INT 1
73479: PLUS
73480: ARRAY
73481: ST_TO_ADDR
73482: GO 73485
73484: POP
// temp_list2 = [ ] ;
73485: LD_ADDR_VAR 0 10
73489: PUSH
73490: EMPTY
73491: ST_TO_ADDR
// for i in temp_list do
73492: LD_ADDR_VAR 0 8
73496: PUSH
73497: LD_VAR 0 9
73501: PUSH
73502: FOR_IN
73503: IFFALSE 73555
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73505: LD_ADDR_VAR 0 10
73509: PUSH
73510: LD_VAR 0 10
73514: PUSH
73515: LD_VAR 0 8
73519: PUSH
73520: LD_INT 1
73522: ARRAY
73523: PUSH
73524: LD_VAR 0 2
73528: PLUS
73529: PUSH
73530: LD_VAR 0 8
73534: PUSH
73535: LD_INT 2
73537: ARRAY
73538: PUSH
73539: LD_VAR 0 3
73543: PLUS
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: EMPTY
73550: LIST
73551: ADD
73552: ST_TO_ADDR
73553: GO 73502
73555: POP
73556: POP
// result = temp_list2 ;
73557: LD_ADDR_VAR 0 7
73561: PUSH
73562: LD_VAR 0 10
73566: ST_TO_ADDR
// end ;
73567: LD_VAR 0 7
73571: RET
// export function EnemyInRange ( unit , dist ) ; begin
73572: LD_INT 0
73574: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73575: LD_ADDR_VAR 0 3
73579: PUSH
73580: LD_VAR 0 1
73584: PPUSH
73585: CALL_OW 255
73589: PPUSH
73590: LD_VAR 0 1
73594: PPUSH
73595: CALL_OW 250
73599: PPUSH
73600: LD_VAR 0 1
73604: PPUSH
73605: CALL_OW 251
73609: PPUSH
73610: LD_VAR 0 2
73614: PPUSH
73615: CALL 46945 0 4
73619: PUSH
73620: LD_INT 4
73622: ARRAY
73623: ST_TO_ADDR
// end ;
73624: LD_VAR 0 3
73628: RET
// export function PlayerSeeMe ( unit ) ; begin
73629: LD_INT 0
73631: PPUSH
// result := See ( your_side , unit ) ;
73632: LD_ADDR_VAR 0 2
73636: PUSH
73637: LD_OWVAR 2
73641: PPUSH
73642: LD_VAR 0 1
73646: PPUSH
73647: CALL_OW 292
73651: ST_TO_ADDR
// end ;
73652: LD_VAR 0 2
73656: RET
// export function ReverseDir ( unit ) ; begin
73657: LD_INT 0
73659: PPUSH
// if not unit then
73660: LD_VAR 0 1
73664: NOT
73665: IFFALSE 73669
// exit ;
73667: GO 73692
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73669: LD_ADDR_VAR 0 2
73673: PUSH
73674: LD_VAR 0 1
73678: PPUSH
73679: CALL_OW 254
73683: PUSH
73684: LD_INT 3
73686: PLUS
73687: PUSH
73688: LD_INT 6
73690: MOD
73691: ST_TO_ADDR
// end ;
73692: LD_VAR 0 2
73696: RET
// export function ReverseArray ( array ) ; var i ; begin
73697: LD_INT 0
73699: PPUSH
73700: PPUSH
// if not array then
73701: LD_VAR 0 1
73705: NOT
73706: IFFALSE 73710
// exit ;
73708: GO 73765
// result := [ ] ;
73710: LD_ADDR_VAR 0 2
73714: PUSH
73715: EMPTY
73716: ST_TO_ADDR
// for i := array downto 1 do
73717: LD_ADDR_VAR 0 3
73721: PUSH
73722: DOUBLE
73723: LD_VAR 0 1
73727: INC
73728: ST_TO_ADDR
73729: LD_INT 1
73731: PUSH
73732: FOR_DOWNTO
73733: IFFALSE 73763
// result := Join ( result , array [ i ] ) ;
73735: LD_ADDR_VAR 0 2
73739: PUSH
73740: LD_VAR 0 2
73744: PPUSH
73745: LD_VAR 0 1
73749: PUSH
73750: LD_VAR 0 3
73754: ARRAY
73755: PPUSH
73756: CALL 78410 0 2
73760: ST_TO_ADDR
73761: GO 73732
73763: POP
73764: POP
// end ;
73765: LD_VAR 0 2
73769: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73770: LD_INT 0
73772: PPUSH
73773: PPUSH
73774: PPUSH
73775: PPUSH
73776: PPUSH
73777: PPUSH
// if not unit or not hexes then
73778: LD_VAR 0 1
73782: NOT
73783: PUSH
73784: LD_VAR 0 2
73788: NOT
73789: OR
73790: IFFALSE 73794
// exit ;
73792: GO 73917
// dist := 9999 ;
73794: LD_ADDR_VAR 0 5
73798: PUSH
73799: LD_INT 9999
73801: ST_TO_ADDR
// for i = 1 to hexes do
73802: LD_ADDR_VAR 0 4
73806: PUSH
73807: DOUBLE
73808: LD_INT 1
73810: DEC
73811: ST_TO_ADDR
73812: LD_VAR 0 2
73816: PUSH
73817: FOR_TO
73818: IFFALSE 73905
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73820: LD_ADDR_VAR 0 6
73824: PUSH
73825: LD_VAR 0 1
73829: PPUSH
73830: LD_VAR 0 2
73834: PUSH
73835: LD_VAR 0 4
73839: ARRAY
73840: PUSH
73841: LD_INT 1
73843: ARRAY
73844: PPUSH
73845: LD_VAR 0 2
73849: PUSH
73850: LD_VAR 0 4
73854: ARRAY
73855: PUSH
73856: LD_INT 2
73858: ARRAY
73859: PPUSH
73860: CALL_OW 297
73864: ST_TO_ADDR
// if tdist < dist then
73865: LD_VAR 0 6
73869: PUSH
73870: LD_VAR 0 5
73874: LESS
73875: IFFALSE 73903
// begin hex := hexes [ i ] ;
73877: LD_ADDR_VAR 0 8
73881: PUSH
73882: LD_VAR 0 2
73886: PUSH
73887: LD_VAR 0 4
73891: ARRAY
73892: ST_TO_ADDR
// dist := tdist ;
73893: LD_ADDR_VAR 0 5
73897: PUSH
73898: LD_VAR 0 6
73902: ST_TO_ADDR
// end ; end ;
73903: GO 73817
73905: POP
73906: POP
// result := hex ;
73907: LD_ADDR_VAR 0 3
73911: PUSH
73912: LD_VAR 0 8
73916: ST_TO_ADDR
// end ;
73917: LD_VAR 0 3
73921: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73922: LD_INT 0
73924: PPUSH
73925: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73926: LD_VAR 0 1
73930: NOT
73931: PUSH
73932: LD_VAR 0 1
73936: PUSH
73937: LD_INT 21
73939: PUSH
73940: LD_INT 2
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: LD_INT 23
73949: PUSH
73950: LD_INT 2
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PPUSH
73961: CALL_OW 69
73965: IN
73966: NOT
73967: OR
73968: IFFALSE 73972
// exit ;
73970: GO 74019
// for i = 1 to 3 do
73972: LD_ADDR_VAR 0 3
73976: PUSH
73977: DOUBLE
73978: LD_INT 1
73980: DEC
73981: ST_TO_ADDR
73982: LD_INT 3
73984: PUSH
73985: FOR_TO
73986: IFFALSE 74017
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73988: LD_VAR 0 1
73992: PPUSH
73993: CALL_OW 250
73997: PPUSH
73998: LD_VAR 0 1
74002: PPUSH
74003: CALL_OW 251
74007: PPUSH
74008: LD_INT 1
74010: PPUSH
74011: CALL_OW 453
74015: GO 73985
74017: POP
74018: POP
// end ;
74019: LD_VAR 0 2
74023: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74024: LD_INT 0
74026: PPUSH
74027: PPUSH
74028: PPUSH
74029: PPUSH
74030: PPUSH
74031: PPUSH
// if not unit or not enemy_unit then
74032: LD_VAR 0 1
74036: NOT
74037: PUSH
74038: LD_VAR 0 2
74042: NOT
74043: OR
74044: IFFALSE 74048
// exit ;
74046: GO 74515
// if GetLives ( i ) < 250 then
74048: LD_VAR 0 4
74052: PPUSH
74053: CALL_OW 256
74057: PUSH
74058: LD_INT 250
74060: LESS
74061: IFFALSE 74074
// begin ComAutodestruct ( i ) ;
74063: LD_VAR 0 4
74067: PPUSH
74068: CALL 73922 0 1
// exit ;
74072: GO 74515
// end ; x := GetX ( enemy_unit ) ;
74074: LD_ADDR_VAR 0 7
74078: PUSH
74079: LD_VAR 0 2
74083: PPUSH
74084: CALL_OW 250
74088: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74089: LD_ADDR_VAR 0 8
74093: PUSH
74094: LD_VAR 0 2
74098: PPUSH
74099: CALL_OW 251
74103: ST_TO_ADDR
// if not x or not y then
74104: LD_VAR 0 7
74108: NOT
74109: PUSH
74110: LD_VAR 0 8
74114: NOT
74115: OR
74116: IFFALSE 74120
// exit ;
74118: GO 74515
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74120: LD_ADDR_VAR 0 6
74124: PUSH
74125: LD_VAR 0 7
74129: PPUSH
74130: LD_INT 0
74132: PPUSH
74133: LD_INT 4
74135: PPUSH
74136: CALL_OW 272
74140: PUSH
74141: LD_VAR 0 8
74145: PPUSH
74146: LD_INT 0
74148: PPUSH
74149: LD_INT 4
74151: PPUSH
74152: CALL_OW 273
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_VAR 0 7
74165: PPUSH
74166: LD_INT 1
74168: PPUSH
74169: LD_INT 4
74171: PPUSH
74172: CALL_OW 272
74176: PUSH
74177: LD_VAR 0 8
74181: PPUSH
74182: LD_INT 1
74184: PPUSH
74185: LD_INT 4
74187: PPUSH
74188: CALL_OW 273
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_VAR 0 7
74201: PPUSH
74202: LD_INT 2
74204: PPUSH
74205: LD_INT 4
74207: PPUSH
74208: CALL_OW 272
74212: PUSH
74213: LD_VAR 0 8
74217: PPUSH
74218: LD_INT 2
74220: PPUSH
74221: LD_INT 4
74223: PPUSH
74224: CALL_OW 273
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_VAR 0 7
74237: PPUSH
74238: LD_INT 3
74240: PPUSH
74241: LD_INT 4
74243: PPUSH
74244: CALL_OW 272
74248: PUSH
74249: LD_VAR 0 8
74253: PPUSH
74254: LD_INT 3
74256: PPUSH
74257: LD_INT 4
74259: PPUSH
74260: CALL_OW 273
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_VAR 0 7
74273: PPUSH
74274: LD_INT 4
74276: PPUSH
74277: LD_INT 4
74279: PPUSH
74280: CALL_OW 272
74284: PUSH
74285: LD_VAR 0 8
74289: PPUSH
74290: LD_INT 4
74292: PPUSH
74293: LD_INT 4
74295: PPUSH
74296: CALL_OW 273
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_VAR 0 7
74309: PPUSH
74310: LD_INT 5
74312: PPUSH
74313: LD_INT 4
74315: PPUSH
74316: CALL_OW 272
74320: PUSH
74321: LD_VAR 0 8
74325: PPUSH
74326: LD_INT 5
74328: PPUSH
74329: LD_INT 4
74331: PPUSH
74332: CALL_OW 273
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: ST_TO_ADDR
// for i = tmp downto 1 do
74349: LD_ADDR_VAR 0 4
74353: PUSH
74354: DOUBLE
74355: LD_VAR 0 6
74359: INC
74360: ST_TO_ADDR
74361: LD_INT 1
74363: PUSH
74364: FOR_DOWNTO
74365: IFFALSE 74466
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74367: LD_VAR 0 6
74371: PUSH
74372: LD_VAR 0 4
74376: ARRAY
74377: PUSH
74378: LD_INT 1
74380: ARRAY
74381: PPUSH
74382: LD_VAR 0 6
74386: PUSH
74387: LD_VAR 0 4
74391: ARRAY
74392: PUSH
74393: LD_INT 2
74395: ARRAY
74396: PPUSH
74397: CALL_OW 488
74401: NOT
74402: PUSH
74403: LD_VAR 0 6
74407: PUSH
74408: LD_VAR 0 4
74412: ARRAY
74413: PUSH
74414: LD_INT 1
74416: ARRAY
74417: PPUSH
74418: LD_VAR 0 6
74422: PUSH
74423: LD_VAR 0 4
74427: ARRAY
74428: PUSH
74429: LD_INT 2
74431: ARRAY
74432: PPUSH
74433: CALL_OW 428
74437: PUSH
74438: LD_INT 0
74440: NONEQUAL
74441: OR
74442: IFFALSE 74464
// tmp := Delete ( tmp , i ) ;
74444: LD_ADDR_VAR 0 6
74448: PUSH
74449: LD_VAR 0 6
74453: PPUSH
74454: LD_VAR 0 4
74458: PPUSH
74459: CALL_OW 3
74463: ST_TO_ADDR
74464: GO 74364
74466: POP
74467: POP
// j := GetClosestHex ( unit , tmp ) ;
74468: LD_ADDR_VAR 0 5
74472: PUSH
74473: LD_VAR 0 1
74477: PPUSH
74478: LD_VAR 0 6
74482: PPUSH
74483: CALL 73770 0 2
74487: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74488: LD_VAR 0 1
74492: PPUSH
74493: LD_VAR 0 5
74497: PUSH
74498: LD_INT 1
74500: ARRAY
74501: PPUSH
74502: LD_VAR 0 5
74506: PUSH
74507: LD_INT 2
74509: ARRAY
74510: PPUSH
74511: CALL_OW 111
// end ;
74515: LD_VAR 0 3
74519: RET
// export function PrepareApemanSoldier ( ) ; begin
74520: LD_INT 0
74522: PPUSH
// uc_nation := 0 ;
74523: LD_ADDR_OWVAR 21
74527: PUSH
74528: LD_INT 0
74530: ST_TO_ADDR
// hc_sex := sex_male ;
74531: LD_ADDR_OWVAR 27
74535: PUSH
74536: LD_INT 1
74538: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74539: LD_ADDR_OWVAR 28
74543: PUSH
74544: LD_INT 15
74546: ST_TO_ADDR
// hc_gallery :=  ;
74547: LD_ADDR_OWVAR 33
74551: PUSH
74552: LD_STRING 
74554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74555: LD_ADDR_OWVAR 31
74559: PUSH
74560: LD_INT 0
74562: PPUSH
74563: LD_INT 3
74565: PPUSH
74566: CALL_OW 12
74570: PUSH
74571: LD_INT 0
74573: PPUSH
74574: LD_INT 3
74576: PPUSH
74577: CALL_OW 12
74581: PUSH
74582: LD_INT 0
74584: PUSH
74585: LD_INT 0
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: ST_TO_ADDR
// end ;
74594: LD_VAR 0 1
74598: RET
// export function PrepareApemanEngineer ( ) ; begin
74599: LD_INT 0
74601: PPUSH
// uc_nation := 0 ;
74602: LD_ADDR_OWVAR 21
74606: PUSH
74607: LD_INT 0
74609: ST_TO_ADDR
// hc_sex := sex_male ;
74610: LD_ADDR_OWVAR 27
74614: PUSH
74615: LD_INT 1
74617: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74618: LD_ADDR_OWVAR 28
74622: PUSH
74623: LD_INT 16
74625: ST_TO_ADDR
// hc_gallery :=  ;
74626: LD_ADDR_OWVAR 33
74630: PUSH
74631: LD_STRING 
74633: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74634: LD_ADDR_OWVAR 31
74638: PUSH
74639: LD_INT 0
74641: PPUSH
74642: LD_INT 3
74644: PPUSH
74645: CALL_OW 12
74649: PUSH
74650: LD_INT 0
74652: PPUSH
74653: LD_INT 3
74655: PPUSH
74656: CALL_OW 12
74660: PUSH
74661: LD_INT 0
74663: PUSH
74664: LD_INT 0
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: ST_TO_ADDR
// end ;
74673: LD_VAR 0 1
74677: RET
// export function PrepareApeman ( agressivity ) ; begin
74678: LD_INT 0
74680: PPUSH
// uc_side := 0 ;
74681: LD_ADDR_OWVAR 20
74685: PUSH
74686: LD_INT 0
74688: ST_TO_ADDR
// uc_nation := 0 ;
74689: LD_ADDR_OWVAR 21
74693: PUSH
74694: LD_INT 0
74696: ST_TO_ADDR
// hc_sex := sex_male ;
74697: LD_ADDR_OWVAR 27
74701: PUSH
74702: LD_INT 1
74704: ST_TO_ADDR
// hc_class := class_apeman ;
74705: LD_ADDR_OWVAR 28
74709: PUSH
74710: LD_INT 12
74712: ST_TO_ADDR
// hc_gallery :=  ;
74713: LD_ADDR_OWVAR 33
74717: PUSH
74718: LD_STRING 
74720: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74721: LD_ADDR_OWVAR 35
74725: PUSH
74726: LD_VAR 0 1
74730: NEG
74731: PPUSH
74732: LD_VAR 0 1
74736: PPUSH
74737: CALL_OW 12
74741: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74742: LD_ADDR_OWVAR 31
74746: PUSH
74747: LD_INT 0
74749: PPUSH
74750: LD_INT 3
74752: PPUSH
74753: CALL_OW 12
74757: PUSH
74758: LD_INT 0
74760: PPUSH
74761: LD_INT 3
74763: PPUSH
74764: CALL_OW 12
74768: PUSH
74769: LD_INT 0
74771: PUSH
74772: LD_INT 0
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: ST_TO_ADDR
// end ;
74781: LD_VAR 0 2
74785: RET
// export function PrepareTiger ( agressivity ) ; begin
74786: LD_INT 0
74788: PPUSH
// uc_side := 0 ;
74789: LD_ADDR_OWVAR 20
74793: PUSH
74794: LD_INT 0
74796: ST_TO_ADDR
// uc_nation := 0 ;
74797: LD_ADDR_OWVAR 21
74801: PUSH
74802: LD_INT 0
74804: ST_TO_ADDR
// hc_class := class_tiger ;
74805: LD_ADDR_OWVAR 28
74809: PUSH
74810: LD_INT 14
74812: ST_TO_ADDR
// hc_gallery :=  ;
74813: LD_ADDR_OWVAR 33
74817: PUSH
74818: LD_STRING 
74820: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74821: LD_ADDR_OWVAR 35
74825: PUSH
74826: LD_VAR 0 1
74830: NEG
74831: PPUSH
74832: LD_VAR 0 1
74836: PPUSH
74837: CALL_OW 12
74841: ST_TO_ADDR
// end ;
74842: LD_VAR 0 2
74846: RET
// export function PrepareEnchidna ( ) ; begin
74847: LD_INT 0
74849: PPUSH
// uc_side := 0 ;
74850: LD_ADDR_OWVAR 20
74854: PUSH
74855: LD_INT 0
74857: ST_TO_ADDR
// uc_nation := 0 ;
74858: LD_ADDR_OWVAR 21
74862: PUSH
74863: LD_INT 0
74865: ST_TO_ADDR
// hc_class := class_baggie ;
74866: LD_ADDR_OWVAR 28
74870: PUSH
74871: LD_INT 13
74873: ST_TO_ADDR
// hc_gallery :=  ;
74874: LD_ADDR_OWVAR 33
74878: PUSH
74879: LD_STRING 
74881: ST_TO_ADDR
// end ;
74882: LD_VAR 0 1
74886: RET
// export function PrepareFrog ( ) ; begin
74887: LD_INT 0
74889: PPUSH
// uc_side := 0 ;
74890: LD_ADDR_OWVAR 20
74894: PUSH
74895: LD_INT 0
74897: ST_TO_ADDR
// uc_nation := 0 ;
74898: LD_ADDR_OWVAR 21
74902: PUSH
74903: LD_INT 0
74905: ST_TO_ADDR
// hc_class := class_frog ;
74906: LD_ADDR_OWVAR 28
74910: PUSH
74911: LD_INT 19
74913: ST_TO_ADDR
// hc_gallery :=  ;
74914: LD_ADDR_OWVAR 33
74918: PUSH
74919: LD_STRING 
74921: ST_TO_ADDR
// end ;
74922: LD_VAR 0 1
74926: RET
// export function PrepareFish ( ) ; begin
74927: LD_INT 0
74929: PPUSH
// uc_side := 0 ;
74930: LD_ADDR_OWVAR 20
74934: PUSH
74935: LD_INT 0
74937: ST_TO_ADDR
// uc_nation := 0 ;
74938: LD_ADDR_OWVAR 21
74942: PUSH
74943: LD_INT 0
74945: ST_TO_ADDR
// hc_class := class_fish ;
74946: LD_ADDR_OWVAR 28
74950: PUSH
74951: LD_INT 20
74953: ST_TO_ADDR
// hc_gallery :=  ;
74954: LD_ADDR_OWVAR 33
74958: PUSH
74959: LD_STRING 
74961: ST_TO_ADDR
// end ;
74962: LD_VAR 0 1
74966: RET
// export function PrepareBird ( ) ; begin
74967: LD_INT 0
74969: PPUSH
// uc_side := 0 ;
74970: LD_ADDR_OWVAR 20
74974: PUSH
74975: LD_INT 0
74977: ST_TO_ADDR
// uc_nation := 0 ;
74978: LD_ADDR_OWVAR 21
74982: PUSH
74983: LD_INT 0
74985: ST_TO_ADDR
// hc_class := class_phororhacos ;
74986: LD_ADDR_OWVAR 28
74990: PUSH
74991: LD_INT 18
74993: ST_TO_ADDR
// hc_gallery :=  ;
74994: LD_ADDR_OWVAR 33
74998: PUSH
74999: LD_STRING 
75001: ST_TO_ADDR
// end ;
75002: LD_VAR 0 1
75006: RET
// export function PrepareHorse ( ) ; begin
75007: LD_INT 0
75009: PPUSH
// uc_side := 0 ;
75010: LD_ADDR_OWVAR 20
75014: PUSH
75015: LD_INT 0
75017: ST_TO_ADDR
// uc_nation := 0 ;
75018: LD_ADDR_OWVAR 21
75022: PUSH
75023: LD_INT 0
75025: ST_TO_ADDR
// hc_class := class_horse ;
75026: LD_ADDR_OWVAR 28
75030: PUSH
75031: LD_INT 21
75033: ST_TO_ADDR
// hc_gallery :=  ;
75034: LD_ADDR_OWVAR 33
75038: PUSH
75039: LD_STRING 
75041: ST_TO_ADDR
// end ;
75042: LD_VAR 0 1
75046: RET
// export function PrepareMastodont ( ) ; begin
75047: LD_INT 0
75049: PPUSH
// uc_side := 0 ;
75050: LD_ADDR_OWVAR 20
75054: PUSH
75055: LD_INT 0
75057: ST_TO_ADDR
// uc_nation := 0 ;
75058: LD_ADDR_OWVAR 21
75062: PUSH
75063: LD_INT 0
75065: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75066: LD_ADDR_OWVAR 37
75070: PUSH
75071: LD_INT 31
75073: ST_TO_ADDR
// vc_control := control_rider ;
75074: LD_ADDR_OWVAR 38
75078: PUSH
75079: LD_INT 4
75081: ST_TO_ADDR
// end ;
75082: LD_VAR 0 1
75086: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75087: LD_INT 0
75089: PPUSH
75090: PPUSH
75091: PPUSH
// uc_side = 0 ;
75092: LD_ADDR_OWVAR 20
75096: PUSH
75097: LD_INT 0
75099: ST_TO_ADDR
// uc_nation = 0 ;
75100: LD_ADDR_OWVAR 21
75104: PUSH
75105: LD_INT 0
75107: ST_TO_ADDR
// InitHc_All ( ) ;
75108: CALL_OW 584
// InitVc ;
75112: CALL_OW 20
// if mastodonts then
75116: LD_VAR 0 6
75120: IFFALSE 75187
// for i = 1 to mastodonts do
75122: LD_ADDR_VAR 0 11
75126: PUSH
75127: DOUBLE
75128: LD_INT 1
75130: DEC
75131: ST_TO_ADDR
75132: LD_VAR 0 6
75136: PUSH
75137: FOR_TO
75138: IFFALSE 75185
// begin vc_chassis := 31 ;
75140: LD_ADDR_OWVAR 37
75144: PUSH
75145: LD_INT 31
75147: ST_TO_ADDR
// vc_control := control_rider ;
75148: LD_ADDR_OWVAR 38
75152: PUSH
75153: LD_INT 4
75155: ST_TO_ADDR
// animal := CreateVehicle ;
75156: LD_ADDR_VAR 0 12
75160: PUSH
75161: CALL_OW 45
75165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75166: LD_VAR 0 12
75170: PPUSH
75171: LD_VAR 0 8
75175: PPUSH
75176: LD_INT 0
75178: PPUSH
75179: CALL 77315 0 3
// end ;
75183: GO 75137
75185: POP
75186: POP
// if horses then
75187: LD_VAR 0 5
75191: IFFALSE 75258
// for i = 1 to horses do
75193: LD_ADDR_VAR 0 11
75197: PUSH
75198: DOUBLE
75199: LD_INT 1
75201: DEC
75202: ST_TO_ADDR
75203: LD_VAR 0 5
75207: PUSH
75208: FOR_TO
75209: IFFALSE 75256
// begin hc_class := 21 ;
75211: LD_ADDR_OWVAR 28
75215: PUSH
75216: LD_INT 21
75218: ST_TO_ADDR
// hc_gallery :=  ;
75219: LD_ADDR_OWVAR 33
75223: PUSH
75224: LD_STRING 
75226: ST_TO_ADDR
// animal := CreateHuman ;
75227: LD_ADDR_VAR 0 12
75231: PUSH
75232: CALL_OW 44
75236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75237: LD_VAR 0 12
75241: PPUSH
75242: LD_VAR 0 8
75246: PPUSH
75247: LD_INT 0
75249: PPUSH
75250: CALL 77315 0 3
// end ;
75254: GO 75208
75256: POP
75257: POP
// if birds then
75258: LD_VAR 0 1
75262: IFFALSE 75329
// for i = 1 to birds do
75264: LD_ADDR_VAR 0 11
75268: PUSH
75269: DOUBLE
75270: LD_INT 1
75272: DEC
75273: ST_TO_ADDR
75274: LD_VAR 0 1
75278: PUSH
75279: FOR_TO
75280: IFFALSE 75327
// begin hc_class := 18 ;
75282: LD_ADDR_OWVAR 28
75286: PUSH
75287: LD_INT 18
75289: ST_TO_ADDR
// hc_gallery =  ;
75290: LD_ADDR_OWVAR 33
75294: PUSH
75295: LD_STRING 
75297: ST_TO_ADDR
// animal := CreateHuman ;
75298: LD_ADDR_VAR 0 12
75302: PUSH
75303: CALL_OW 44
75307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75308: LD_VAR 0 12
75312: PPUSH
75313: LD_VAR 0 8
75317: PPUSH
75318: LD_INT 0
75320: PPUSH
75321: CALL 77315 0 3
// end ;
75325: GO 75279
75327: POP
75328: POP
// if tigers then
75329: LD_VAR 0 2
75333: IFFALSE 75417
// for i = 1 to tigers do
75335: LD_ADDR_VAR 0 11
75339: PUSH
75340: DOUBLE
75341: LD_INT 1
75343: DEC
75344: ST_TO_ADDR
75345: LD_VAR 0 2
75349: PUSH
75350: FOR_TO
75351: IFFALSE 75415
// begin hc_class = class_tiger ;
75353: LD_ADDR_OWVAR 28
75357: PUSH
75358: LD_INT 14
75360: ST_TO_ADDR
// hc_gallery =  ;
75361: LD_ADDR_OWVAR 33
75365: PUSH
75366: LD_STRING 
75368: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75369: LD_ADDR_OWVAR 35
75373: PUSH
75374: LD_INT 7
75376: NEG
75377: PPUSH
75378: LD_INT 7
75380: PPUSH
75381: CALL_OW 12
75385: ST_TO_ADDR
// animal := CreateHuman ;
75386: LD_ADDR_VAR 0 12
75390: PUSH
75391: CALL_OW 44
75395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75396: LD_VAR 0 12
75400: PPUSH
75401: LD_VAR 0 8
75405: PPUSH
75406: LD_INT 0
75408: PPUSH
75409: CALL 77315 0 3
// end ;
75413: GO 75350
75415: POP
75416: POP
// if apemans then
75417: LD_VAR 0 3
75421: IFFALSE 75544
// for i = 1 to apemans do
75423: LD_ADDR_VAR 0 11
75427: PUSH
75428: DOUBLE
75429: LD_INT 1
75431: DEC
75432: ST_TO_ADDR
75433: LD_VAR 0 3
75437: PUSH
75438: FOR_TO
75439: IFFALSE 75542
// begin hc_class = class_apeman ;
75441: LD_ADDR_OWVAR 28
75445: PUSH
75446: LD_INT 12
75448: ST_TO_ADDR
// hc_gallery =  ;
75449: LD_ADDR_OWVAR 33
75453: PUSH
75454: LD_STRING 
75456: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75457: LD_ADDR_OWVAR 35
75461: PUSH
75462: LD_INT 2
75464: NEG
75465: PPUSH
75466: LD_INT 2
75468: PPUSH
75469: CALL_OW 12
75473: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75474: LD_ADDR_OWVAR 31
75478: PUSH
75479: LD_INT 1
75481: PPUSH
75482: LD_INT 3
75484: PPUSH
75485: CALL_OW 12
75489: PUSH
75490: LD_INT 1
75492: PPUSH
75493: LD_INT 3
75495: PPUSH
75496: CALL_OW 12
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: LD_INT 0
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: ST_TO_ADDR
// animal := CreateHuman ;
75513: LD_ADDR_VAR 0 12
75517: PUSH
75518: CALL_OW 44
75522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75523: LD_VAR 0 12
75527: PPUSH
75528: LD_VAR 0 8
75532: PPUSH
75533: LD_INT 0
75535: PPUSH
75536: CALL 77315 0 3
// end ;
75540: GO 75438
75542: POP
75543: POP
// if enchidnas then
75544: LD_VAR 0 4
75548: IFFALSE 75615
// for i = 1 to enchidnas do
75550: LD_ADDR_VAR 0 11
75554: PUSH
75555: DOUBLE
75556: LD_INT 1
75558: DEC
75559: ST_TO_ADDR
75560: LD_VAR 0 4
75564: PUSH
75565: FOR_TO
75566: IFFALSE 75613
// begin hc_class = 13 ;
75568: LD_ADDR_OWVAR 28
75572: PUSH
75573: LD_INT 13
75575: ST_TO_ADDR
// hc_gallery =  ;
75576: LD_ADDR_OWVAR 33
75580: PUSH
75581: LD_STRING 
75583: ST_TO_ADDR
// animal := CreateHuman ;
75584: LD_ADDR_VAR 0 12
75588: PUSH
75589: CALL_OW 44
75593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75594: LD_VAR 0 12
75598: PPUSH
75599: LD_VAR 0 8
75603: PPUSH
75604: LD_INT 0
75606: PPUSH
75607: CALL 77315 0 3
// end ;
75611: GO 75565
75613: POP
75614: POP
// if fishes then
75615: LD_VAR 0 7
75619: IFFALSE 75686
// for i = 1 to fishes do
75621: LD_ADDR_VAR 0 11
75625: PUSH
75626: DOUBLE
75627: LD_INT 1
75629: DEC
75630: ST_TO_ADDR
75631: LD_VAR 0 7
75635: PUSH
75636: FOR_TO
75637: IFFALSE 75684
// begin hc_class = 20 ;
75639: LD_ADDR_OWVAR 28
75643: PUSH
75644: LD_INT 20
75646: ST_TO_ADDR
// hc_gallery =  ;
75647: LD_ADDR_OWVAR 33
75651: PUSH
75652: LD_STRING 
75654: ST_TO_ADDR
// animal := CreateHuman ;
75655: LD_ADDR_VAR 0 12
75659: PUSH
75660: CALL_OW 44
75664: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75665: LD_VAR 0 12
75669: PPUSH
75670: LD_VAR 0 9
75674: PPUSH
75675: LD_INT 0
75677: PPUSH
75678: CALL 77315 0 3
// end ;
75682: GO 75636
75684: POP
75685: POP
// end ;
75686: LD_VAR 0 10
75690: RET
// export function WantHeal ( sci , unit ) ; begin
75691: LD_INT 0
75693: PPUSH
// if GetTaskList ( sci ) > 0 then
75694: LD_VAR 0 1
75698: PPUSH
75699: CALL_OW 437
75703: PUSH
75704: LD_INT 0
75706: GREATER
75707: IFFALSE 75777
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75709: LD_VAR 0 1
75713: PPUSH
75714: CALL_OW 437
75718: PUSH
75719: LD_INT 1
75721: ARRAY
75722: PUSH
75723: LD_INT 1
75725: ARRAY
75726: PUSH
75727: LD_STRING l
75729: EQUAL
75730: PUSH
75731: LD_VAR 0 1
75735: PPUSH
75736: CALL_OW 437
75740: PUSH
75741: LD_INT 1
75743: ARRAY
75744: PUSH
75745: LD_INT 4
75747: ARRAY
75748: PUSH
75749: LD_VAR 0 2
75753: EQUAL
75754: AND
75755: IFFALSE 75767
// result := true else
75757: LD_ADDR_VAR 0 3
75761: PUSH
75762: LD_INT 1
75764: ST_TO_ADDR
75765: GO 75775
// result := false ;
75767: LD_ADDR_VAR 0 3
75771: PUSH
75772: LD_INT 0
75774: ST_TO_ADDR
// end else
75775: GO 75785
// result := false ;
75777: LD_ADDR_VAR 0 3
75781: PUSH
75782: LD_INT 0
75784: ST_TO_ADDR
// end ;
75785: LD_VAR 0 3
75789: RET
// export function HealTarget ( sci ) ; begin
75790: LD_INT 0
75792: PPUSH
// if not sci then
75793: LD_VAR 0 1
75797: NOT
75798: IFFALSE 75802
// exit ;
75800: GO 75867
// result := 0 ;
75802: LD_ADDR_VAR 0 2
75806: PUSH
75807: LD_INT 0
75809: ST_TO_ADDR
// if GetTaskList ( sci ) then
75810: LD_VAR 0 1
75814: PPUSH
75815: CALL_OW 437
75819: IFFALSE 75867
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75821: LD_VAR 0 1
75825: PPUSH
75826: CALL_OW 437
75830: PUSH
75831: LD_INT 1
75833: ARRAY
75834: PUSH
75835: LD_INT 1
75837: ARRAY
75838: PUSH
75839: LD_STRING l
75841: EQUAL
75842: IFFALSE 75867
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75844: LD_ADDR_VAR 0 2
75848: PUSH
75849: LD_VAR 0 1
75853: PPUSH
75854: CALL_OW 437
75858: PUSH
75859: LD_INT 1
75861: ARRAY
75862: PUSH
75863: LD_INT 4
75865: ARRAY
75866: ST_TO_ADDR
// end ;
75867: LD_VAR 0 2
75871: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75872: LD_INT 0
75874: PPUSH
75875: PPUSH
75876: PPUSH
75877: PPUSH
// if not base_units then
75878: LD_VAR 0 1
75882: NOT
75883: IFFALSE 75887
// exit ;
75885: GO 75974
// result := false ;
75887: LD_ADDR_VAR 0 2
75891: PUSH
75892: LD_INT 0
75894: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75895: LD_ADDR_VAR 0 5
75899: PUSH
75900: LD_VAR 0 1
75904: PPUSH
75905: LD_INT 21
75907: PUSH
75908: LD_INT 3
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PPUSH
75915: CALL_OW 72
75919: ST_TO_ADDR
// if not tmp then
75920: LD_VAR 0 5
75924: NOT
75925: IFFALSE 75929
// exit ;
75927: GO 75974
// for i in tmp do
75929: LD_ADDR_VAR 0 3
75933: PUSH
75934: LD_VAR 0 5
75938: PUSH
75939: FOR_IN
75940: IFFALSE 75972
// begin result := EnemyInRange ( i , 22 ) ;
75942: LD_ADDR_VAR 0 2
75946: PUSH
75947: LD_VAR 0 3
75951: PPUSH
75952: LD_INT 22
75954: PPUSH
75955: CALL 73572 0 2
75959: ST_TO_ADDR
// if result then
75960: LD_VAR 0 2
75964: IFFALSE 75970
// exit ;
75966: POP
75967: POP
75968: GO 75974
// end ;
75970: GO 75939
75972: POP
75973: POP
// end ;
75974: LD_VAR 0 2
75978: RET
// export function FilterByTag ( units , tag ) ; begin
75979: LD_INT 0
75981: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75982: LD_ADDR_VAR 0 3
75986: PUSH
75987: LD_VAR 0 1
75991: PPUSH
75992: LD_INT 120
75994: PUSH
75995: LD_VAR 0 2
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PPUSH
76004: CALL_OW 72
76008: ST_TO_ADDR
// end ;
76009: LD_VAR 0 3
76013: RET
// export function IsDriver ( un ) ; begin
76014: LD_INT 0
76016: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76017: LD_ADDR_VAR 0 2
76021: PUSH
76022: LD_VAR 0 1
76026: PUSH
76027: LD_INT 55
76029: PUSH
76030: EMPTY
76031: LIST
76032: PPUSH
76033: CALL_OW 69
76037: IN
76038: ST_TO_ADDR
// end ;
76039: LD_VAR 0 2
76043: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76044: LD_INT 0
76046: PPUSH
76047: PPUSH
// list := [ ] ;
76048: LD_ADDR_VAR 0 5
76052: PUSH
76053: EMPTY
76054: ST_TO_ADDR
// case d of 0 :
76055: LD_VAR 0 3
76059: PUSH
76060: LD_INT 0
76062: DOUBLE
76063: EQUAL
76064: IFTRUE 76068
76066: GO 76201
76068: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76069: LD_ADDR_VAR 0 5
76073: PUSH
76074: LD_VAR 0 1
76078: PUSH
76079: LD_INT 4
76081: MINUS
76082: PUSH
76083: LD_VAR 0 2
76087: PUSH
76088: LD_INT 4
76090: MINUS
76091: PUSH
76092: LD_INT 2
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: LIST
76099: PUSH
76100: LD_VAR 0 1
76104: PUSH
76105: LD_INT 3
76107: MINUS
76108: PUSH
76109: LD_VAR 0 2
76113: PUSH
76114: LD_INT 1
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: LIST
76121: PUSH
76122: LD_VAR 0 1
76126: PUSH
76127: LD_INT 4
76129: PLUS
76130: PUSH
76131: LD_VAR 0 2
76135: PUSH
76136: LD_INT 4
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: LIST
76143: PUSH
76144: LD_VAR 0 1
76148: PUSH
76149: LD_INT 3
76151: PLUS
76152: PUSH
76153: LD_VAR 0 2
76157: PUSH
76158: LD_INT 3
76160: PLUS
76161: PUSH
76162: LD_INT 5
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: LIST
76169: PUSH
76170: LD_VAR 0 1
76174: PUSH
76175: LD_VAR 0 2
76179: PUSH
76180: LD_INT 4
76182: PLUS
76183: PUSH
76184: LD_INT 0
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: LIST
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: ST_TO_ADDR
// end ; 1 :
76199: GO 76899
76201: LD_INT 1
76203: DOUBLE
76204: EQUAL
76205: IFTRUE 76209
76207: GO 76342
76209: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76210: LD_ADDR_VAR 0 5
76214: PUSH
76215: LD_VAR 0 1
76219: PUSH
76220: LD_VAR 0 2
76224: PUSH
76225: LD_INT 4
76227: MINUS
76228: PUSH
76229: LD_INT 3
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: LIST
76236: PUSH
76237: LD_VAR 0 1
76241: PUSH
76242: LD_INT 3
76244: MINUS
76245: PUSH
76246: LD_VAR 0 2
76250: PUSH
76251: LD_INT 3
76253: MINUS
76254: PUSH
76255: LD_INT 2
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: LIST
76262: PUSH
76263: LD_VAR 0 1
76267: PUSH
76268: LD_INT 4
76270: MINUS
76271: PUSH
76272: LD_VAR 0 2
76276: PUSH
76277: LD_INT 1
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: LIST
76284: PUSH
76285: LD_VAR 0 1
76289: PUSH
76290: LD_VAR 0 2
76294: PUSH
76295: LD_INT 3
76297: PLUS
76298: PUSH
76299: LD_INT 0
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: LIST
76306: PUSH
76307: LD_VAR 0 1
76311: PUSH
76312: LD_INT 4
76314: PLUS
76315: PUSH
76316: LD_VAR 0 2
76320: PUSH
76321: LD_INT 4
76323: PLUS
76324: PUSH
76325: LD_INT 5
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: LIST
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: ST_TO_ADDR
// end ; 2 :
76340: GO 76899
76342: LD_INT 2
76344: DOUBLE
76345: EQUAL
76346: IFTRUE 76350
76348: GO 76479
76350: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76351: LD_ADDR_VAR 0 5
76355: PUSH
76356: LD_VAR 0 1
76360: PUSH
76361: LD_VAR 0 2
76365: PUSH
76366: LD_INT 3
76368: MINUS
76369: PUSH
76370: LD_INT 3
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: LIST
76377: PUSH
76378: LD_VAR 0 1
76382: PUSH
76383: LD_INT 4
76385: PLUS
76386: PUSH
76387: LD_VAR 0 2
76391: PUSH
76392: LD_INT 4
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: LIST
76399: PUSH
76400: LD_VAR 0 1
76404: PUSH
76405: LD_VAR 0 2
76409: PUSH
76410: LD_INT 4
76412: PLUS
76413: PUSH
76414: LD_INT 0
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: LIST
76421: PUSH
76422: LD_VAR 0 1
76426: PUSH
76427: LD_INT 3
76429: MINUS
76430: PUSH
76431: LD_VAR 0 2
76435: PUSH
76436: LD_INT 1
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: LIST
76443: PUSH
76444: LD_VAR 0 1
76448: PUSH
76449: LD_INT 4
76451: MINUS
76452: PUSH
76453: LD_VAR 0 2
76457: PUSH
76458: LD_INT 4
76460: MINUS
76461: PUSH
76462: LD_INT 2
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: LIST
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: ST_TO_ADDR
// end ; 3 :
76477: GO 76899
76479: LD_INT 3
76481: DOUBLE
76482: EQUAL
76483: IFTRUE 76487
76485: GO 76620
76487: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76488: LD_ADDR_VAR 0 5
76492: PUSH
76493: LD_VAR 0 1
76497: PUSH
76498: LD_INT 3
76500: PLUS
76501: PUSH
76502: LD_VAR 0 2
76506: PUSH
76507: LD_INT 4
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: LIST
76514: PUSH
76515: LD_VAR 0 1
76519: PUSH
76520: LD_INT 4
76522: PLUS
76523: PUSH
76524: LD_VAR 0 2
76528: PUSH
76529: LD_INT 4
76531: PLUS
76532: PUSH
76533: LD_INT 5
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: LIST
76540: PUSH
76541: LD_VAR 0 1
76545: PUSH
76546: LD_INT 4
76548: MINUS
76549: PUSH
76550: LD_VAR 0 2
76554: PUSH
76555: LD_INT 1
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: LIST
76562: PUSH
76563: LD_VAR 0 1
76567: PUSH
76568: LD_VAR 0 2
76572: PUSH
76573: LD_INT 4
76575: MINUS
76576: PUSH
76577: LD_INT 3
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: LIST
76584: PUSH
76585: LD_VAR 0 1
76589: PUSH
76590: LD_INT 3
76592: MINUS
76593: PUSH
76594: LD_VAR 0 2
76598: PUSH
76599: LD_INT 3
76601: MINUS
76602: PUSH
76603: LD_INT 2
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: LIST
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: ST_TO_ADDR
// end ; 4 :
76618: GO 76899
76620: LD_INT 4
76622: DOUBLE
76623: EQUAL
76624: IFTRUE 76628
76626: GO 76761
76628: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76629: LD_ADDR_VAR 0 5
76633: PUSH
76634: LD_VAR 0 1
76638: PUSH
76639: LD_VAR 0 2
76643: PUSH
76644: LD_INT 4
76646: PLUS
76647: PUSH
76648: LD_INT 0
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: LIST
76655: PUSH
76656: LD_VAR 0 1
76660: PUSH
76661: LD_INT 3
76663: PLUS
76664: PUSH
76665: LD_VAR 0 2
76669: PUSH
76670: LD_INT 3
76672: PLUS
76673: PUSH
76674: LD_INT 5
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: LIST
76681: PUSH
76682: LD_VAR 0 1
76686: PUSH
76687: LD_INT 4
76689: PLUS
76690: PUSH
76691: LD_VAR 0 2
76695: PUSH
76696: LD_INT 4
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: LIST
76703: PUSH
76704: LD_VAR 0 1
76708: PUSH
76709: LD_VAR 0 2
76713: PUSH
76714: LD_INT 3
76716: MINUS
76717: PUSH
76718: LD_INT 3
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: LIST
76725: PUSH
76726: LD_VAR 0 1
76730: PUSH
76731: LD_INT 4
76733: MINUS
76734: PUSH
76735: LD_VAR 0 2
76739: PUSH
76740: LD_INT 4
76742: MINUS
76743: PUSH
76744: LD_INT 2
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: ST_TO_ADDR
// end ; 5 :
76759: GO 76899
76761: LD_INT 5
76763: DOUBLE
76764: EQUAL
76765: IFTRUE 76769
76767: GO 76898
76769: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76770: LD_ADDR_VAR 0 5
76774: PUSH
76775: LD_VAR 0 1
76779: PUSH
76780: LD_INT 4
76782: MINUS
76783: PUSH
76784: LD_VAR 0 2
76788: PUSH
76789: LD_INT 1
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: LIST
76796: PUSH
76797: LD_VAR 0 1
76801: PUSH
76802: LD_VAR 0 2
76806: PUSH
76807: LD_INT 4
76809: MINUS
76810: PUSH
76811: LD_INT 3
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: LIST
76818: PUSH
76819: LD_VAR 0 1
76823: PUSH
76824: LD_INT 4
76826: PLUS
76827: PUSH
76828: LD_VAR 0 2
76832: PUSH
76833: LD_INT 4
76835: PLUS
76836: PUSH
76837: LD_INT 5
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: LIST
76844: PUSH
76845: LD_VAR 0 1
76849: PUSH
76850: LD_INT 3
76852: PLUS
76853: PUSH
76854: LD_VAR 0 2
76858: PUSH
76859: LD_INT 4
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: PUSH
76867: LD_VAR 0 1
76871: PUSH
76872: LD_VAR 0 2
76876: PUSH
76877: LD_INT 3
76879: PLUS
76880: PUSH
76881: LD_INT 0
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: LIST
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: LIST
76893: LIST
76894: LIST
76895: ST_TO_ADDR
// end ; end ;
76896: GO 76899
76898: POP
// result := list ;
76899: LD_ADDR_VAR 0 4
76903: PUSH
76904: LD_VAR 0 5
76908: ST_TO_ADDR
// end ;
76909: LD_VAR 0 4
76913: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76914: LD_INT 0
76916: PPUSH
76917: PPUSH
76918: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76919: LD_VAR 0 1
76923: NOT
76924: PUSH
76925: LD_VAR 0 2
76929: PUSH
76930: LD_INT 1
76932: PUSH
76933: LD_INT 2
76935: PUSH
76936: LD_INT 3
76938: PUSH
76939: LD_INT 4
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: IN
76948: NOT
76949: OR
76950: IFFALSE 76954
// exit ;
76952: GO 77037
// tmp := [ ] ;
76954: LD_ADDR_VAR 0 5
76958: PUSH
76959: EMPTY
76960: ST_TO_ADDR
// for i in units do
76961: LD_ADDR_VAR 0 4
76965: PUSH
76966: LD_VAR 0 1
76970: PUSH
76971: FOR_IN
76972: IFFALSE 77006
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76974: LD_ADDR_VAR 0 5
76978: PUSH
76979: LD_VAR 0 5
76983: PPUSH
76984: LD_VAR 0 4
76988: PPUSH
76989: LD_VAR 0 2
76993: PPUSH
76994: CALL_OW 259
76998: PPUSH
76999: CALL 78410 0 2
77003: ST_TO_ADDR
77004: GO 76971
77006: POP
77007: POP
// if not tmp then
77008: LD_VAR 0 5
77012: NOT
77013: IFFALSE 77017
// exit ;
77015: GO 77037
// result := SortListByListDesc ( units , tmp ) ;
77017: LD_ADDR_VAR 0 3
77021: PUSH
77022: LD_VAR 0 1
77026: PPUSH
77027: LD_VAR 0 5
77031: PPUSH
77032: CALL_OW 77
77036: ST_TO_ADDR
// end ;
77037: LD_VAR 0 3
77041: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77042: LD_INT 0
77044: PPUSH
77045: PPUSH
77046: PPUSH
// result := false ;
77047: LD_ADDR_VAR 0 3
77051: PUSH
77052: LD_INT 0
77054: ST_TO_ADDR
// if not building then
77055: LD_VAR 0 2
77059: NOT
77060: IFFALSE 77064
// exit ;
77062: GO 77202
// x := GetX ( building ) ;
77064: LD_ADDR_VAR 0 4
77068: PUSH
77069: LD_VAR 0 2
77073: PPUSH
77074: CALL_OW 250
77078: ST_TO_ADDR
// y := GetY ( building ) ;
77079: LD_ADDR_VAR 0 5
77083: PUSH
77084: LD_VAR 0 2
77088: PPUSH
77089: CALL_OW 251
77093: ST_TO_ADDR
// if not x or not y then
77094: LD_VAR 0 4
77098: NOT
77099: PUSH
77100: LD_VAR 0 5
77104: NOT
77105: OR
77106: IFFALSE 77110
// exit ;
77108: GO 77202
// if GetTaskList ( unit ) then
77110: LD_VAR 0 1
77114: PPUSH
77115: CALL_OW 437
77119: IFFALSE 77202
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77121: LD_STRING e
77123: PUSH
77124: LD_VAR 0 1
77128: PPUSH
77129: CALL_OW 437
77133: PUSH
77134: LD_INT 1
77136: ARRAY
77137: PUSH
77138: LD_INT 1
77140: ARRAY
77141: EQUAL
77142: PUSH
77143: LD_VAR 0 4
77147: PUSH
77148: LD_VAR 0 1
77152: PPUSH
77153: CALL_OW 437
77157: PUSH
77158: LD_INT 1
77160: ARRAY
77161: PUSH
77162: LD_INT 2
77164: ARRAY
77165: EQUAL
77166: AND
77167: PUSH
77168: LD_VAR 0 5
77172: PUSH
77173: LD_VAR 0 1
77177: PPUSH
77178: CALL_OW 437
77182: PUSH
77183: LD_INT 1
77185: ARRAY
77186: PUSH
77187: LD_INT 3
77189: ARRAY
77190: EQUAL
77191: AND
77192: IFFALSE 77202
// result := true end ;
77194: LD_ADDR_VAR 0 3
77198: PUSH
77199: LD_INT 1
77201: ST_TO_ADDR
// end ;
77202: LD_VAR 0 3
77206: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77207: LD_INT 0
77209: PPUSH
// result := false ;
77210: LD_ADDR_VAR 0 4
77214: PUSH
77215: LD_INT 0
77217: ST_TO_ADDR
// if GetTaskList ( unit ) then
77218: LD_VAR 0 1
77222: PPUSH
77223: CALL_OW 437
77227: IFFALSE 77310
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77229: LD_STRING M
77231: PUSH
77232: LD_VAR 0 1
77236: PPUSH
77237: CALL_OW 437
77241: PUSH
77242: LD_INT 1
77244: ARRAY
77245: PUSH
77246: LD_INT 1
77248: ARRAY
77249: EQUAL
77250: PUSH
77251: LD_VAR 0 2
77255: PUSH
77256: LD_VAR 0 1
77260: PPUSH
77261: CALL_OW 437
77265: PUSH
77266: LD_INT 1
77268: ARRAY
77269: PUSH
77270: LD_INT 2
77272: ARRAY
77273: EQUAL
77274: AND
77275: PUSH
77276: LD_VAR 0 3
77280: PUSH
77281: LD_VAR 0 1
77285: PPUSH
77286: CALL_OW 437
77290: PUSH
77291: LD_INT 1
77293: ARRAY
77294: PUSH
77295: LD_INT 3
77297: ARRAY
77298: EQUAL
77299: AND
77300: IFFALSE 77310
// result := true ;
77302: LD_ADDR_VAR 0 4
77306: PUSH
77307: LD_INT 1
77309: ST_TO_ADDR
// end ; end ;
77310: LD_VAR 0 4
77314: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77315: LD_INT 0
77317: PPUSH
77318: PPUSH
77319: PPUSH
77320: PPUSH
// if not unit or not area then
77321: LD_VAR 0 1
77325: NOT
77326: PUSH
77327: LD_VAR 0 2
77331: NOT
77332: OR
77333: IFFALSE 77337
// exit ;
77335: GO 77513
// tmp := AreaToList ( area , i ) ;
77337: LD_ADDR_VAR 0 6
77341: PUSH
77342: LD_VAR 0 2
77346: PPUSH
77347: LD_VAR 0 5
77351: PPUSH
77352: CALL_OW 517
77356: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77357: LD_ADDR_VAR 0 5
77361: PUSH
77362: DOUBLE
77363: LD_INT 1
77365: DEC
77366: ST_TO_ADDR
77367: LD_VAR 0 6
77371: PUSH
77372: LD_INT 1
77374: ARRAY
77375: PUSH
77376: FOR_TO
77377: IFFALSE 77511
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77379: LD_ADDR_VAR 0 7
77383: PUSH
77384: LD_VAR 0 6
77388: PUSH
77389: LD_INT 1
77391: ARRAY
77392: PUSH
77393: LD_VAR 0 5
77397: ARRAY
77398: PUSH
77399: LD_VAR 0 6
77403: PUSH
77404: LD_INT 2
77406: ARRAY
77407: PUSH
77408: LD_VAR 0 5
77412: ARRAY
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77418: LD_INT 92
77420: PUSH
77421: LD_VAR 0 7
77425: PUSH
77426: LD_INT 1
77428: ARRAY
77429: PUSH
77430: LD_VAR 0 7
77434: PUSH
77435: LD_INT 2
77437: ARRAY
77438: PUSH
77439: LD_INT 2
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: PPUSH
77448: CALL_OW 69
77452: PUSH
77453: LD_INT 0
77455: EQUAL
77456: IFFALSE 77509
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77458: LD_VAR 0 1
77462: PPUSH
77463: LD_VAR 0 7
77467: PUSH
77468: LD_INT 1
77470: ARRAY
77471: PPUSH
77472: LD_VAR 0 7
77476: PUSH
77477: LD_INT 2
77479: ARRAY
77480: PPUSH
77481: LD_VAR 0 3
77485: PPUSH
77486: CALL_OW 48
// result := IsPlaced ( unit ) ;
77490: LD_ADDR_VAR 0 4
77494: PUSH
77495: LD_VAR 0 1
77499: PPUSH
77500: CALL_OW 305
77504: ST_TO_ADDR
// exit ;
77505: POP
77506: POP
77507: GO 77513
// end ; end ;
77509: GO 77376
77511: POP
77512: POP
// end ;
77513: LD_VAR 0 4
77517: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77518: LD_INT 0
77520: PPUSH
77521: PPUSH
77522: PPUSH
// if not side or side > 8 then
77523: LD_VAR 0 1
77527: NOT
77528: PUSH
77529: LD_VAR 0 1
77533: PUSH
77534: LD_INT 8
77536: GREATER
77537: OR
77538: IFFALSE 77542
// exit ;
77540: GO 77729
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77542: LD_ADDR_VAR 0 4
77546: PUSH
77547: LD_INT 22
77549: PUSH
77550: LD_VAR 0 1
77554: PUSH
77555: EMPTY
77556: LIST
77557: LIST
77558: PUSH
77559: LD_INT 21
77561: PUSH
77562: LD_INT 3
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PPUSH
77573: CALL_OW 69
77577: ST_TO_ADDR
// if not tmp then
77578: LD_VAR 0 4
77582: NOT
77583: IFFALSE 77587
// exit ;
77585: GO 77729
// enable_addtolog := true ;
77587: LD_ADDR_OWVAR 81
77591: PUSH
77592: LD_INT 1
77594: ST_TO_ADDR
// AddToLog ( [ ) ;
77595: LD_STRING [
77597: PPUSH
77598: CALL_OW 561
// for i in tmp do
77602: LD_ADDR_VAR 0 3
77606: PUSH
77607: LD_VAR 0 4
77611: PUSH
77612: FOR_IN
77613: IFFALSE 77720
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77615: LD_STRING [
77617: PUSH
77618: LD_VAR 0 3
77622: PPUSH
77623: CALL_OW 266
77627: STR
77628: PUSH
77629: LD_STRING , 
77631: STR
77632: PUSH
77633: LD_VAR 0 3
77637: PPUSH
77638: CALL_OW 250
77642: STR
77643: PUSH
77644: LD_STRING , 
77646: STR
77647: PUSH
77648: LD_VAR 0 3
77652: PPUSH
77653: CALL_OW 251
77657: STR
77658: PUSH
77659: LD_STRING , 
77661: STR
77662: PUSH
77663: LD_VAR 0 3
77667: PPUSH
77668: CALL_OW 254
77672: STR
77673: PUSH
77674: LD_STRING , 
77676: STR
77677: PUSH
77678: LD_VAR 0 3
77682: PPUSH
77683: LD_INT 1
77685: PPUSH
77686: CALL_OW 268
77690: STR
77691: PUSH
77692: LD_STRING , 
77694: STR
77695: PUSH
77696: LD_VAR 0 3
77700: PPUSH
77701: LD_INT 2
77703: PPUSH
77704: CALL_OW 268
77708: STR
77709: PUSH
77710: LD_STRING ],
77712: STR
77713: PPUSH
77714: CALL_OW 561
// end ;
77718: GO 77612
77720: POP
77721: POP
// AddToLog ( ]; ) ;
77722: LD_STRING ];
77724: PPUSH
77725: CALL_OW 561
// end ;
77729: LD_VAR 0 2
77733: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77734: LD_INT 0
77736: PPUSH
77737: PPUSH
77738: PPUSH
77739: PPUSH
77740: PPUSH
// if not area or not rate or not max then
77741: LD_VAR 0 1
77745: NOT
77746: PUSH
77747: LD_VAR 0 2
77751: NOT
77752: OR
77753: PUSH
77754: LD_VAR 0 4
77758: NOT
77759: OR
77760: IFFALSE 77764
// exit ;
77762: GO 77953
// while 1 do
77764: LD_INT 1
77766: IFFALSE 77953
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77768: LD_ADDR_VAR 0 9
77772: PUSH
77773: LD_VAR 0 1
77777: PPUSH
77778: LD_INT 1
77780: PPUSH
77781: CALL_OW 287
77785: PUSH
77786: LD_INT 10
77788: MUL
77789: ST_TO_ADDR
// r := rate / 10 ;
77790: LD_ADDR_VAR 0 7
77794: PUSH
77795: LD_VAR 0 2
77799: PUSH
77800: LD_INT 10
77802: DIVREAL
77803: ST_TO_ADDR
// time := 1 1$00 ;
77804: LD_ADDR_VAR 0 8
77808: PUSH
77809: LD_INT 2100
77811: ST_TO_ADDR
// if amount < min then
77812: LD_VAR 0 9
77816: PUSH
77817: LD_VAR 0 3
77821: LESS
77822: IFFALSE 77840
// r := r * 2 else
77824: LD_ADDR_VAR 0 7
77828: PUSH
77829: LD_VAR 0 7
77833: PUSH
77834: LD_INT 2
77836: MUL
77837: ST_TO_ADDR
77838: GO 77866
// if amount > max then
77840: LD_VAR 0 9
77844: PUSH
77845: LD_VAR 0 4
77849: GREATER
77850: IFFALSE 77866
// r := r / 2 ;
77852: LD_ADDR_VAR 0 7
77856: PUSH
77857: LD_VAR 0 7
77861: PUSH
77862: LD_INT 2
77864: DIVREAL
77865: ST_TO_ADDR
// time := time / r ;
77866: LD_ADDR_VAR 0 8
77870: PUSH
77871: LD_VAR 0 8
77875: PUSH
77876: LD_VAR 0 7
77880: DIVREAL
77881: ST_TO_ADDR
// if time < 0 then
77882: LD_VAR 0 8
77886: PUSH
77887: LD_INT 0
77889: LESS
77890: IFFALSE 77907
// time := time * - 1 ;
77892: LD_ADDR_VAR 0 8
77896: PUSH
77897: LD_VAR 0 8
77901: PUSH
77902: LD_INT 1
77904: NEG
77905: MUL
77906: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77907: LD_VAR 0 8
77911: PUSH
77912: LD_INT 35
77914: PPUSH
77915: LD_INT 875
77917: PPUSH
77918: CALL_OW 12
77922: PLUS
77923: PPUSH
77924: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77928: LD_INT 1
77930: PPUSH
77931: LD_INT 5
77933: PPUSH
77934: CALL_OW 12
77938: PPUSH
77939: LD_VAR 0 1
77943: PPUSH
77944: LD_INT 1
77946: PPUSH
77947: CALL_OW 55
// end ;
77951: GO 77764
// end ;
77953: LD_VAR 0 5
77957: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77958: LD_INT 0
77960: PPUSH
77961: PPUSH
77962: PPUSH
77963: PPUSH
77964: PPUSH
77965: PPUSH
77966: PPUSH
77967: PPUSH
// if not turrets or not factories then
77968: LD_VAR 0 1
77972: NOT
77973: PUSH
77974: LD_VAR 0 2
77978: NOT
77979: OR
77980: IFFALSE 77984
// exit ;
77982: GO 78291
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77984: LD_ADDR_VAR 0 10
77988: PUSH
77989: LD_INT 5
77991: PUSH
77992: LD_INT 6
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PUSH
77999: LD_INT 2
78001: PUSH
78002: LD_INT 4
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: PUSH
78009: LD_INT 3
78011: PUSH
78012: LD_INT 5
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: LIST
78023: PUSH
78024: LD_INT 24
78026: PUSH
78027: LD_INT 25
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PUSH
78034: LD_INT 23
78036: PUSH
78037: LD_INT 27
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: PUSH
78048: LD_INT 42
78050: PUSH
78051: LD_INT 43
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: LD_INT 44
78060: PUSH
78061: LD_INT 46
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: PUSH
78068: LD_INT 45
78070: PUSH
78071: LD_INT 47
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: LIST
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: LIST
78087: ST_TO_ADDR
// result := [ ] ;
78088: LD_ADDR_VAR 0 3
78092: PUSH
78093: EMPTY
78094: ST_TO_ADDR
// for i in turrets do
78095: LD_ADDR_VAR 0 4
78099: PUSH
78100: LD_VAR 0 1
78104: PUSH
78105: FOR_IN
78106: IFFALSE 78289
// begin nat := GetNation ( i ) ;
78108: LD_ADDR_VAR 0 7
78112: PUSH
78113: LD_VAR 0 4
78117: PPUSH
78118: CALL_OW 248
78122: ST_TO_ADDR
// weapon := 0 ;
78123: LD_ADDR_VAR 0 8
78127: PUSH
78128: LD_INT 0
78130: ST_TO_ADDR
// if not nat then
78131: LD_VAR 0 7
78135: NOT
78136: IFFALSE 78140
// continue ;
78138: GO 78105
// for j in list [ nat ] do
78140: LD_ADDR_VAR 0 5
78144: PUSH
78145: LD_VAR 0 10
78149: PUSH
78150: LD_VAR 0 7
78154: ARRAY
78155: PUSH
78156: FOR_IN
78157: IFFALSE 78198
// if GetBWeapon ( i ) = j [ 1 ] then
78159: LD_VAR 0 4
78163: PPUSH
78164: CALL_OW 269
78168: PUSH
78169: LD_VAR 0 5
78173: PUSH
78174: LD_INT 1
78176: ARRAY
78177: EQUAL
78178: IFFALSE 78196
// begin weapon := j [ 2 ] ;
78180: LD_ADDR_VAR 0 8
78184: PUSH
78185: LD_VAR 0 5
78189: PUSH
78190: LD_INT 2
78192: ARRAY
78193: ST_TO_ADDR
// break ;
78194: GO 78198
// end ;
78196: GO 78156
78198: POP
78199: POP
// if not weapon then
78200: LD_VAR 0 8
78204: NOT
78205: IFFALSE 78209
// continue ;
78207: GO 78105
// for k in factories do
78209: LD_ADDR_VAR 0 6
78213: PUSH
78214: LD_VAR 0 2
78218: PUSH
78219: FOR_IN
78220: IFFALSE 78285
// begin weapons := AvailableWeaponList ( k ) ;
78222: LD_ADDR_VAR 0 9
78226: PUSH
78227: LD_VAR 0 6
78231: PPUSH
78232: CALL_OW 478
78236: ST_TO_ADDR
// if not weapons then
78237: LD_VAR 0 9
78241: NOT
78242: IFFALSE 78246
// continue ;
78244: GO 78219
// if weapon in weapons then
78246: LD_VAR 0 8
78250: PUSH
78251: LD_VAR 0 9
78255: IN
78256: IFFALSE 78283
// begin result := [ i , weapon ] ;
78258: LD_ADDR_VAR 0 3
78262: PUSH
78263: LD_VAR 0 4
78267: PUSH
78268: LD_VAR 0 8
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: ST_TO_ADDR
// exit ;
78277: POP
78278: POP
78279: POP
78280: POP
78281: GO 78291
// end ; end ;
78283: GO 78219
78285: POP
78286: POP
// end ;
78287: GO 78105
78289: POP
78290: POP
// end ;
78291: LD_VAR 0 3
78295: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78296: LD_INT 0
78298: PPUSH
// if not side or side > 8 then
78299: LD_VAR 0 3
78303: NOT
78304: PUSH
78305: LD_VAR 0 3
78309: PUSH
78310: LD_INT 8
78312: GREATER
78313: OR
78314: IFFALSE 78318
// exit ;
78316: GO 78377
// if not range then
78318: LD_VAR 0 4
78322: NOT
78323: IFFALSE 78334
// range := - 12 ;
78325: LD_ADDR_VAR 0 4
78329: PUSH
78330: LD_INT 12
78332: NEG
78333: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78334: LD_VAR 0 1
78338: PPUSH
78339: LD_VAR 0 2
78343: PPUSH
78344: LD_VAR 0 3
78348: PPUSH
78349: LD_VAR 0 4
78353: PPUSH
78354: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78358: LD_VAR 0 1
78362: PPUSH
78363: LD_VAR 0 2
78367: PPUSH
78368: LD_VAR 0 3
78372: PPUSH
78373: CALL_OW 331
// end ;
78377: LD_VAR 0 5
78381: RET
// export function Video ( mode ) ; begin
78382: LD_INT 0
78384: PPUSH
// ingame_video = mode ;
78385: LD_ADDR_OWVAR 52
78389: PUSH
78390: LD_VAR 0 1
78394: ST_TO_ADDR
// interface_hidden = mode ;
78395: LD_ADDR_OWVAR 54
78399: PUSH
78400: LD_VAR 0 1
78404: ST_TO_ADDR
// end ;
78405: LD_VAR 0 2
78409: RET
// export function Join ( array , element ) ; begin
78410: LD_INT 0
78412: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78413: LD_ADDR_VAR 0 3
78417: PUSH
78418: LD_VAR 0 1
78422: PPUSH
78423: LD_VAR 0 1
78427: PUSH
78428: LD_INT 1
78430: PLUS
78431: PPUSH
78432: LD_VAR 0 2
78436: PPUSH
78437: CALL_OW 1
78441: ST_TO_ADDR
// end ;
78442: LD_VAR 0 3
78446: RET
// export function JoinUnion ( array , element ) ; begin
78447: LD_INT 0
78449: PPUSH
// result := array union element ;
78450: LD_ADDR_VAR 0 3
78454: PUSH
78455: LD_VAR 0 1
78459: PUSH
78460: LD_VAR 0 2
78464: UNION
78465: ST_TO_ADDR
// end ;
78466: LD_VAR 0 3
78470: RET
// export function GetBehemoths ( side ) ; begin
78471: LD_INT 0
78473: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78474: LD_ADDR_VAR 0 2
78478: PUSH
78479: LD_INT 22
78481: PUSH
78482: LD_VAR 0 1
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PUSH
78491: LD_INT 31
78493: PUSH
78494: LD_INT 25
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PPUSH
78505: CALL_OW 69
78509: ST_TO_ADDR
// end ;
78510: LD_VAR 0 2
78514: RET
// export function Shuffle ( array ) ; var i , index ; begin
78515: LD_INT 0
78517: PPUSH
78518: PPUSH
78519: PPUSH
// result := [ ] ;
78520: LD_ADDR_VAR 0 2
78524: PUSH
78525: EMPTY
78526: ST_TO_ADDR
// if not array then
78527: LD_VAR 0 1
78531: NOT
78532: IFFALSE 78536
// exit ;
78534: GO 78635
// Randomize ;
78536: CALL_OW 10
// for i = array downto 1 do
78540: LD_ADDR_VAR 0 3
78544: PUSH
78545: DOUBLE
78546: LD_VAR 0 1
78550: INC
78551: ST_TO_ADDR
78552: LD_INT 1
78554: PUSH
78555: FOR_DOWNTO
78556: IFFALSE 78633
// begin index := rand ( 1 , array ) ;
78558: LD_ADDR_VAR 0 4
78562: PUSH
78563: LD_INT 1
78565: PPUSH
78566: LD_VAR 0 1
78570: PPUSH
78571: CALL_OW 12
78575: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78576: LD_ADDR_VAR 0 2
78580: PUSH
78581: LD_VAR 0 2
78585: PPUSH
78586: LD_VAR 0 2
78590: PUSH
78591: LD_INT 1
78593: PLUS
78594: PPUSH
78595: LD_VAR 0 1
78599: PUSH
78600: LD_VAR 0 4
78604: ARRAY
78605: PPUSH
78606: CALL_OW 2
78610: ST_TO_ADDR
// array := Delete ( array , index ) ;
78611: LD_ADDR_VAR 0 1
78615: PUSH
78616: LD_VAR 0 1
78620: PPUSH
78621: LD_VAR 0 4
78625: PPUSH
78626: CALL_OW 3
78630: ST_TO_ADDR
// end ;
78631: GO 78555
78633: POP
78634: POP
// end ;
78635: LD_VAR 0 2
78639: RET
// export function GetBaseMaterials ( base ) ; begin
78640: LD_INT 0
78642: PPUSH
// result := [ 0 , 0 , 0 ] ;
78643: LD_ADDR_VAR 0 2
78647: PUSH
78648: LD_INT 0
78650: PUSH
78651: LD_INT 0
78653: PUSH
78654: LD_INT 0
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: LIST
78661: ST_TO_ADDR
// if not base then
78662: LD_VAR 0 1
78666: NOT
78667: IFFALSE 78671
// exit ;
78669: GO 78720
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78671: LD_ADDR_VAR 0 2
78675: PUSH
78676: LD_VAR 0 1
78680: PPUSH
78681: LD_INT 1
78683: PPUSH
78684: CALL_OW 275
78688: PUSH
78689: LD_VAR 0 1
78693: PPUSH
78694: LD_INT 2
78696: PPUSH
78697: CALL_OW 275
78701: PUSH
78702: LD_VAR 0 1
78706: PPUSH
78707: LD_INT 3
78709: PPUSH
78710: CALL_OW 275
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: LIST
78719: ST_TO_ADDR
// end ;
78720: LD_VAR 0 2
78724: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78725: LD_INT 0
78727: PPUSH
78728: PPUSH
// result := array ;
78729: LD_ADDR_VAR 0 3
78733: PUSH
78734: LD_VAR 0 1
78738: ST_TO_ADDR
// if size >= result then
78739: LD_VAR 0 2
78743: PUSH
78744: LD_VAR 0 3
78748: GREATEREQUAL
78749: IFFALSE 78753
// exit ;
78751: GO 78803
// if size then
78753: LD_VAR 0 2
78757: IFFALSE 78803
// for i := array downto size do
78759: LD_ADDR_VAR 0 4
78763: PUSH
78764: DOUBLE
78765: LD_VAR 0 1
78769: INC
78770: ST_TO_ADDR
78771: LD_VAR 0 2
78775: PUSH
78776: FOR_DOWNTO
78777: IFFALSE 78801
// result := Delete ( result , result ) ;
78779: LD_ADDR_VAR 0 3
78783: PUSH
78784: LD_VAR 0 3
78788: PPUSH
78789: LD_VAR 0 3
78793: PPUSH
78794: CALL_OW 3
78798: ST_TO_ADDR
78799: GO 78776
78801: POP
78802: POP
// end ;
78803: LD_VAR 0 3
78807: RET
// export function ComExit ( unit ) ; var tmp ; begin
78808: LD_INT 0
78810: PPUSH
78811: PPUSH
// if not IsInUnit ( unit ) then
78812: LD_VAR 0 1
78816: PPUSH
78817: CALL_OW 310
78821: NOT
78822: IFFALSE 78826
// exit ;
78824: GO 78886
// tmp := IsInUnit ( unit ) ;
78826: LD_ADDR_VAR 0 3
78830: PUSH
78831: LD_VAR 0 1
78835: PPUSH
78836: CALL_OW 310
78840: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78841: LD_VAR 0 3
78845: PPUSH
78846: CALL_OW 247
78850: PUSH
78851: LD_INT 2
78853: EQUAL
78854: IFFALSE 78867
// ComExitVehicle ( unit ) else
78856: LD_VAR 0 1
78860: PPUSH
78861: CALL_OW 121
78865: GO 78876
// ComExitBuilding ( unit ) ;
78867: LD_VAR 0 1
78871: PPUSH
78872: CALL_OW 122
// result := tmp ;
78876: LD_ADDR_VAR 0 2
78880: PUSH
78881: LD_VAR 0 3
78885: ST_TO_ADDR
// end ;
78886: LD_VAR 0 2
78890: RET
// export function ComExitAll ( units ) ; var i ; begin
78891: LD_INT 0
78893: PPUSH
78894: PPUSH
// if not units then
78895: LD_VAR 0 1
78899: NOT
78900: IFFALSE 78904
// exit ;
78902: GO 78930
// for i in units do
78904: LD_ADDR_VAR 0 3
78908: PUSH
78909: LD_VAR 0 1
78913: PUSH
78914: FOR_IN
78915: IFFALSE 78928
// ComExit ( i ) ;
78917: LD_VAR 0 3
78921: PPUSH
78922: CALL 78808 0 1
78926: GO 78914
78928: POP
78929: POP
// end ;
78930: LD_VAR 0 2
78934: RET
// export function ResetHc ; begin
78935: LD_INT 0
78937: PPUSH
// InitHc ;
78938: CALL_OW 19
// hc_importance := 0 ;
78942: LD_ADDR_OWVAR 32
78946: PUSH
78947: LD_INT 0
78949: ST_TO_ADDR
// end ;
78950: LD_VAR 0 1
78954: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78955: LD_INT 0
78957: PPUSH
78958: PPUSH
78959: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78960: LD_ADDR_VAR 0 6
78964: PUSH
78965: LD_VAR 0 1
78969: PUSH
78970: LD_VAR 0 3
78974: PLUS
78975: PUSH
78976: LD_INT 2
78978: DIV
78979: ST_TO_ADDR
// if _x < 0 then
78980: LD_VAR 0 6
78984: PUSH
78985: LD_INT 0
78987: LESS
78988: IFFALSE 79005
// _x := _x * - 1 ;
78990: LD_ADDR_VAR 0 6
78994: PUSH
78995: LD_VAR 0 6
78999: PUSH
79000: LD_INT 1
79002: NEG
79003: MUL
79004: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79005: LD_ADDR_VAR 0 7
79009: PUSH
79010: LD_VAR 0 2
79014: PUSH
79015: LD_VAR 0 4
79019: PLUS
79020: PUSH
79021: LD_INT 2
79023: DIV
79024: ST_TO_ADDR
// if _y < 0 then
79025: LD_VAR 0 7
79029: PUSH
79030: LD_INT 0
79032: LESS
79033: IFFALSE 79050
// _y := _y * - 1 ;
79035: LD_ADDR_VAR 0 7
79039: PUSH
79040: LD_VAR 0 7
79044: PUSH
79045: LD_INT 1
79047: NEG
79048: MUL
79049: ST_TO_ADDR
// result := [ _x , _y ] ;
79050: LD_ADDR_VAR 0 5
79054: PUSH
79055: LD_VAR 0 6
79059: PUSH
79060: LD_VAR 0 7
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: ST_TO_ADDR
// end ;
79069: LD_VAR 0 5
79073: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79074: LD_INT 0
79076: PPUSH
79077: PPUSH
79078: PPUSH
79079: PPUSH
// task := GetTaskList ( unit ) ;
79080: LD_ADDR_VAR 0 7
79084: PUSH
79085: LD_VAR 0 1
79089: PPUSH
79090: CALL_OW 437
79094: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79095: LD_VAR 0 7
79099: NOT
79100: PUSH
79101: LD_VAR 0 1
79105: PPUSH
79106: LD_VAR 0 2
79110: PPUSH
79111: CALL_OW 308
79115: NOT
79116: AND
79117: IFFALSE 79121
// exit ;
79119: GO 79239
// if IsInArea ( unit , area ) then
79121: LD_VAR 0 1
79125: PPUSH
79126: LD_VAR 0 2
79130: PPUSH
79131: CALL_OW 308
79135: IFFALSE 79153
// begin ComMoveToArea ( unit , goAway ) ;
79137: LD_VAR 0 1
79141: PPUSH
79142: LD_VAR 0 3
79146: PPUSH
79147: CALL_OW 113
// exit ;
79151: GO 79239
// end ; if task [ 1 ] [ 1 ] <> M then
79153: LD_VAR 0 7
79157: PUSH
79158: LD_INT 1
79160: ARRAY
79161: PUSH
79162: LD_INT 1
79164: ARRAY
79165: PUSH
79166: LD_STRING M
79168: NONEQUAL
79169: IFFALSE 79173
// exit ;
79171: GO 79239
// x := task [ 1 ] [ 2 ] ;
79173: LD_ADDR_VAR 0 5
79177: PUSH
79178: LD_VAR 0 7
79182: PUSH
79183: LD_INT 1
79185: ARRAY
79186: PUSH
79187: LD_INT 2
79189: ARRAY
79190: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79191: LD_ADDR_VAR 0 6
79195: PUSH
79196: LD_VAR 0 7
79200: PUSH
79201: LD_INT 1
79203: ARRAY
79204: PUSH
79205: LD_INT 3
79207: ARRAY
79208: ST_TO_ADDR
// if InArea ( x , y , area ) then
79209: LD_VAR 0 5
79213: PPUSH
79214: LD_VAR 0 6
79218: PPUSH
79219: LD_VAR 0 2
79223: PPUSH
79224: CALL_OW 309
79228: IFFALSE 79239
// ComStop ( unit ) ;
79230: LD_VAR 0 1
79234: PPUSH
79235: CALL_OW 141
// end ;
79239: LD_VAR 0 4
79243: RET
// export function Abs ( value ) ; begin
79244: LD_INT 0
79246: PPUSH
// result := value ;
79247: LD_ADDR_VAR 0 2
79251: PUSH
79252: LD_VAR 0 1
79256: ST_TO_ADDR
// if value < 0 then
79257: LD_VAR 0 1
79261: PUSH
79262: LD_INT 0
79264: LESS
79265: IFFALSE 79282
// result := value * - 1 ;
79267: LD_ADDR_VAR 0 2
79271: PUSH
79272: LD_VAR 0 1
79276: PUSH
79277: LD_INT 1
79279: NEG
79280: MUL
79281: ST_TO_ADDR
// end ;
79282: LD_VAR 0 2
79286: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79287: LD_INT 0
79289: PPUSH
79290: PPUSH
79291: PPUSH
79292: PPUSH
79293: PPUSH
79294: PPUSH
79295: PPUSH
79296: PPUSH
// if not unit or not building then
79297: LD_VAR 0 1
79301: NOT
79302: PUSH
79303: LD_VAR 0 2
79307: NOT
79308: OR
79309: IFFALSE 79313
// exit ;
79311: GO 79539
// x := GetX ( building ) ;
79313: LD_ADDR_VAR 0 4
79317: PUSH
79318: LD_VAR 0 2
79322: PPUSH
79323: CALL_OW 250
79327: ST_TO_ADDR
// y := GetY ( building ) ;
79328: LD_ADDR_VAR 0 6
79332: PUSH
79333: LD_VAR 0 2
79337: PPUSH
79338: CALL_OW 251
79342: ST_TO_ADDR
// d := GetDir ( building ) ;
79343: LD_ADDR_VAR 0 8
79347: PUSH
79348: LD_VAR 0 2
79352: PPUSH
79353: CALL_OW 254
79357: ST_TO_ADDR
// r := 4 ;
79358: LD_ADDR_VAR 0 9
79362: PUSH
79363: LD_INT 4
79365: ST_TO_ADDR
// for i := 1 to 5 do
79366: LD_ADDR_VAR 0 10
79370: PUSH
79371: DOUBLE
79372: LD_INT 1
79374: DEC
79375: ST_TO_ADDR
79376: LD_INT 5
79378: PUSH
79379: FOR_TO
79380: IFFALSE 79537
// begin _x := ShiftX ( x , d , r + i ) ;
79382: LD_ADDR_VAR 0 5
79386: PUSH
79387: LD_VAR 0 4
79391: PPUSH
79392: LD_VAR 0 8
79396: PPUSH
79397: LD_VAR 0 9
79401: PUSH
79402: LD_VAR 0 10
79406: PLUS
79407: PPUSH
79408: CALL_OW 272
79412: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79413: LD_ADDR_VAR 0 7
79417: PUSH
79418: LD_VAR 0 6
79422: PPUSH
79423: LD_VAR 0 8
79427: PPUSH
79428: LD_VAR 0 9
79432: PUSH
79433: LD_VAR 0 10
79437: PLUS
79438: PPUSH
79439: CALL_OW 273
79443: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79444: LD_VAR 0 5
79448: PPUSH
79449: LD_VAR 0 7
79453: PPUSH
79454: CALL_OW 488
79458: PUSH
79459: LD_VAR 0 5
79463: PPUSH
79464: LD_VAR 0 7
79468: PPUSH
79469: CALL_OW 428
79473: PPUSH
79474: CALL_OW 247
79478: PUSH
79479: LD_INT 3
79481: PUSH
79482: LD_INT 2
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: IN
79489: NOT
79490: AND
79491: IFFALSE 79535
// begin ComMoveXY ( unit , _x , _y ) ;
79493: LD_VAR 0 1
79497: PPUSH
79498: LD_VAR 0 5
79502: PPUSH
79503: LD_VAR 0 7
79507: PPUSH
79508: CALL_OW 111
// result := [ _x , _y ] ;
79512: LD_ADDR_VAR 0 3
79516: PUSH
79517: LD_VAR 0 5
79521: PUSH
79522: LD_VAR 0 7
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: ST_TO_ADDR
// exit ;
79531: POP
79532: POP
79533: GO 79539
// end ; end ;
79535: GO 79379
79537: POP
79538: POP
// end ;
79539: LD_VAR 0 3
79543: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79544: LD_INT 0
79546: PPUSH
79547: PPUSH
79548: PPUSH
// result := 0 ;
79549: LD_ADDR_VAR 0 3
79553: PUSH
79554: LD_INT 0
79556: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79557: LD_VAR 0 1
79561: PUSH
79562: LD_INT 0
79564: LESS
79565: PUSH
79566: LD_VAR 0 1
79570: PUSH
79571: LD_INT 8
79573: GREATER
79574: OR
79575: PUSH
79576: LD_VAR 0 2
79580: PUSH
79581: LD_INT 0
79583: LESS
79584: OR
79585: PUSH
79586: LD_VAR 0 2
79590: PUSH
79591: LD_INT 8
79593: GREATER
79594: OR
79595: IFFALSE 79599
// exit ;
79597: GO 79674
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79599: LD_ADDR_VAR 0 4
79603: PUSH
79604: LD_INT 22
79606: PUSH
79607: LD_VAR 0 2
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: PPUSH
79616: CALL_OW 69
79620: PUSH
79621: FOR_IN
79622: IFFALSE 79672
// begin un := UnitShoot ( i ) ;
79624: LD_ADDR_VAR 0 5
79628: PUSH
79629: LD_VAR 0 4
79633: PPUSH
79634: CALL_OW 504
79638: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79639: LD_VAR 0 5
79643: PPUSH
79644: CALL_OW 255
79648: PUSH
79649: LD_VAR 0 1
79653: EQUAL
79654: IFFALSE 79670
// begin result := un ;
79656: LD_ADDR_VAR 0 3
79660: PUSH
79661: LD_VAR 0 5
79665: ST_TO_ADDR
// exit ;
79666: POP
79667: POP
79668: GO 79674
// end ; end ;
79670: GO 79621
79672: POP
79673: POP
// end ;
79674: LD_VAR 0 3
79678: RET
// export function GetCargoBay ( units ) ; begin
79679: LD_INT 0
79681: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79682: LD_ADDR_VAR 0 2
79686: PUSH
79687: LD_VAR 0 1
79691: PPUSH
79692: LD_INT 2
79694: PUSH
79695: LD_INT 34
79697: PUSH
79698: LD_INT 12
79700: PUSH
79701: EMPTY
79702: LIST
79703: LIST
79704: PUSH
79705: LD_INT 34
79707: PUSH
79708: LD_INT 51
79710: PUSH
79711: EMPTY
79712: LIST
79713: LIST
79714: PUSH
79715: LD_INT 34
79717: PUSH
79718: LD_INT 32
79720: PUSH
79721: EMPTY
79722: LIST
79723: LIST
79724: PUSH
79725: LD_INT 34
79727: PUSH
79728: LD_INT 89
79730: PUSH
79731: EMPTY
79732: LIST
79733: LIST
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: LIST
79739: LIST
79740: LIST
79741: PPUSH
79742: CALL_OW 72
79746: ST_TO_ADDR
// end ;
79747: LD_VAR 0 2
79751: RET
// export function Negate ( value ) ; begin
79752: LD_INT 0
79754: PPUSH
// result := not value ;
79755: LD_ADDR_VAR 0 2
79759: PUSH
79760: LD_VAR 0 1
79764: NOT
79765: ST_TO_ADDR
// end ;
79766: LD_VAR 0 2
79770: RET
// export function Inc ( value ) ; begin
79771: LD_INT 0
79773: PPUSH
// result := value + 1 ;
79774: LD_ADDR_VAR 0 2
79778: PUSH
79779: LD_VAR 0 1
79783: PUSH
79784: LD_INT 1
79786: PLUS
79787: ST_TO_ADDR
// end ;
79788: LD_VAR 0 2
79792: RET
// export function Dec ( value ) ; begin
79793: LD_INT 0
79795: PPUSH
// result := value - 1 ;
79796: LD_ADDR_VAR 0 2
79800: PUSH
79801: LD_VAR 0 1
79805: PUSH
79806: LD_INT 1
79808: MINUS
79809: ST_TO_ADDR
// end ;
79810: LD_VAR 0 2
79814: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79815: LD_INT 0
79817: PPUSH
79818: PPUSH
79819: PPUSH
79820: PPUSH
79821: PPUSH
79822: PPUSH
79823: PPUSH
79824: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79825: LD_VAR 0 1
79829: PPUSH
79830: LD_VAR 0 2
79834: PPUSH
79835: CALL_OW 488
79839: NOT
79840: PUSH
79841: LD_VAR 0 3
79845: PPUSH
79846: LD_VAR 0 4
79850: PPUSH
79851: CALL_OW 488
79855: NOT
79856: OR
79857: IFFALSE 79870
// begin result := - 1 ;
79859: LD_ADDR_VAR 0 5
79863: PUSH
79864: LD_INT 1
79866: NEG
79867: ST_TO_ADDR
// exit ;
79868: GO 80105
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79870: LD_ADDR_VAR 0 12
79874: PUSH
79875: LD_VAR 0 1
79879: PPUSH
79880: LD_VAR 0 2
79884: PPUSH
79885: LD_VAR 0 3
79889: PPUSH
79890: LD_VAR 0 4
79894: PPUSH
79895: CALL 78955 0 4
79899: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79900: LD_ADDR_VAR 0 11
79904: PUSH
79905: LD_VAR 0 1
79909: PPUSH
79910: LD_VAR 0 2
79914: PPUSH
79915: LD_VAR 0 12
79919: PUSH
79920: LD_INT 1
79922: ARRAY
79923: PPUSH
79924: LD_VAR 0 12
79928: PUSH
79929: LD_INT 2
79931: ARRAY
79932: PPUSH
79933: CALL_OW 298
79937: ST_TO_ADDR
// distance := 9999 ;
79938: LD_ADDR_VAR 0 10
79942: PUSH
79943: LD_INT 9999
79945: ST_TO_ADDR
// for i := 0 to 5 do
79946: LD_ADDR_VAR 0 6
79950: PUSH
79951: DOUBLE
79952: LD_INT 0
79954: DEC
79955: ST_TO_ADDR
79956: LD_INT 5
79958: PUSH
79959: FOR_TO
79960: IFFALSE 80103
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79962: LD_ADDR_VAR 0 7
79966: PUSH
79967: LD_VAR 0 1
79971: PPUSH
79972: LD_VAR 0 6
79976: PPUSH
79977: LD_VAR 0 11
79981: PPUSH
79982: CALL_OW 272
79986: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79987: LD_ADDR_VAR 0 8
79991: PUSH
79992: LD_VAR 0 2
79996: PPUSH
79997: LD_VAR 0 6
80001: PPUSH
80002: LD_VAR 0 11
80006: PPUSH
80007: CALL_OW 273
80011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80012: LD_VAR 0 7
80016: PPUSH
80017: LD_VAR 0 8
80021: PPUSH
80022: CALL_OW 488
80026: NOT
80027: IFFALSE 80031
// continue ;
80029: GO 79959
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80031: LD_ADDR_VAR 0 9
80035: PUSH
80036: LD_VAR 0 12
80040: PUSH
80041: LD_INT 1
80043: ARRAY
80044: PPUSH
80045: LD_VAR 0 12
80049: PUSH
80050: LD_INT 2
80052: ARRAY
80053: PPUSH
80054: LD_VAR 0 7
80058: PPUSH
80059: LD_VAR 0 8
80063: PPUSH
80064: CALL_OW 298
80068: ST_TO_ADDR
// if tmp < distance then
80069: LD_VAR 0 9
80073: PUSH
80074: LD_VAR 0 10
80078: LESS
80079: IFFALSE 80101
// begin result := i ;
80081: LD_ADDR_VAR 0 5
80085: PUSH
80086: LD_VAR 0 6
80090: ST_TO_ADDR
// distance := tmp ;
80091: LD_ADDR_VAR 0 10
80095: PUSH
80096: LD_VAR 0 9
80100: ST_TO_ADDR
// end ; end ;
80101: GO 79959
80103: POP
80104: POP
// end ;
80105: LD_VAR 0 5
80109: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80110: LD_INT 0
80112: PPUSH
80113: PPUSH
// if not driver or not IsInUnit ( driver ) then
80114: LD_VAR 0 1
80118: NOT
80119: PUSH
80120: LD_VAR 0 1
80124: PPUSH
80125: CALL_OW 310
80129: NOT
80130: OR
80131: IFFALSE 80135
// exit ;
80133: GO 80225
// vehicle := IsInUnit ( driver ) ;
80135: LD_ADDR_VAR 0 3
80139: PUSH
80140: LD_VAR 0 1
80144: PPUSH
80145: CALL_OW 310
80149: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80150: LD_VAR 0 1
80154: PPUSH
80155: LD_STRING \
80157: PUSH
80158: LD_INT 0
80160: PUSH
80161: LD_INT 0
80163: PUSH
80164: LD_INT 0
80166: PUSH
80167: LD_INT 0
80169: PUSH
80170: LD_INT 0
80172: PUSH
80173: LD_INT 0
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: PUSH
80185: LD_STRING E
80187: PUSH
80188: LD_INT 0
80190: PUSH
80191: LD_INT 0
80193: PUSH
80194: LD_VAR 0 3
80198: PUSH
80199: LD_INT 0
80201: PUSH
80202: LD_INT 0
80204: PUSH
80205: LD_INT 0
80207: PUSH
80208: EMPTY
80209: LIST
80210: LIST
80211: LIST
80212: LIST
80213: LIST
80214: LIST
80215: LIST
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: PPUSH
80221: CALL_OW 446
// end ;
80225: LD_VAR 0 2
80229: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80230: LD_INT 0
80232: PPUSH
80233: PPUSH
// if not driver or not IsInUnit ( driver ) then
80234: LD_VAR 0 1
80238: NOT
80239: PUSH
80240: LD_VAR 0 1
80244: PPUSH
80245: CALL_OW 310
80249: NOT
80250: OR
80251: IFFALSE 80255
// exit ;
80253: GO 80345
// vehicle := IsInUnit ( driver ) ;
80255: LD_ADDR_VAR 0 3
80259: PUSH
80260: LD_VAR 0 1
80264: PPUSH
80265: CALL_OW 310
80269: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80270: LD_VAR 0 1
80274: PPUSH
80275: LD_STRING \
80277: PUSH
80278: LD_INT 0
80280: PUSH
80281: LD_INT 0
80283: PUSH
80284: LD_INT 0
80286: PUSH
80287: LD_INT 0
80289: PUSH
80290: LD_INT 0
80292: PUSH
80293: LD_INT 0
80295: PUSH
80296: EMPTY
80297: LIST
80298: LIST
80299: LIST
80300: LIST
80301: LIST
80302: LIST
80303: LIST
80304: PUSH
80305: LD_STRING E
80307: PUSH
80308: LD_INT 0
80310: PUSH
80311: LD_INT 0
80313: PUSH
80314: LD_VAR 0 3
80318: PUSH
80319: LD_INT 0
80321: PUSH
80322: LD_INT 0
80324: PUSH
80325: LD_INT 0
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: LIST
80332: LIST
80333: LIST
80334: LIST
80335: LIST
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PPUSH
80341: CALL_OW 447
// end ;
80345: LD_VAR 0 2
80349: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80350: LD_INT 0
80352: PPUSH
80353: PPUSH
80354: PPUSH
// tmp := [ ] ;
80355: LD_ADDR_VAR 0 5
80359: PUSH
80360: EMPTY
80361: ST_TO_ADDR
// for i in units do
80362: LD_ADDR_VAR 0 4
80366: PUSH
80367: LD_VAR 0 1
80371: PUSH
80372: FOR_IN
80373: IFFALSE 80411
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80375: LD_ADDR_VAR 0 5
80379: PUSH
80380: LD_VAR 0 5
80384: PPUSH
80385: LD_VAR 0 5
80389: PUSH
80390: LD_INT 1
80392: PLUS
80393: PPUSH
80394: LD_VAR 0 4
80398: PPUSH
80399: CALL_OW 256
80403: PPUSH
80404: CALL_OW 2
80408: ST_TO_ADDR
80409: GO 80372
80411: POP
80412: POP
// if not tmp then
80413: LD_VAR 0 5
80417: NOT
80418: IFFALSE 80422
// exit ;
80420: GO 80470
// if asc then
80422: LD_VAR 0 2
80426: IFFALSE 80450
// result := SortListByListAsc ( units , tmp ) else
80428: LD_ADDR_VAR 0 3
80432: PUSH
80433: LD_VAR 0 1
80437: PPUSH
80438: LD_VAR 0 5
80442: PPUSH
80443: CALL_OW 76
80447: ST_TO_ADDR
80448: GO 80470
// result := SortListByListDesc ( units , tmp ) ;
80450: LD_ADDR_VAR 0 3
80454: PUSH
80455: LD_VAR 0 1
80459: PPUSH
80460: LD_VAR 0 5
80464: PPUSH
80465: CALL_OW 77
80469: ST_TO_ADDR
// end ;
80470: LD_VAR 0 3
80474: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80475: LD_INT 0
80477: PPUSH
80478: PPUSH
// task := GetTaskList ( mech ) ;
80479: LD_ADDR_VAR 0 4
80483: PUSH
80484: LD_VAR 0 1
80488: PPUSH
80489: CALL_OW 437
80493: ST_TO_ADDR
// if not task then
80494: LD_VAR 0 4
80498: NOT
80499: IFFALSE 80503
// exit ;
80501: GO 80545
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80503: LD_ADDR_VAR 0 3
80507: PUSH
80508: LD_VAR 0 4
80512: PUSH
80513: LD_INT 1
80515: ARRAY
80516: PUSH
80517: LD_INT 1
80519: ARRAY
80520: PUSH
80521: LD_STRING r
80523: EQUAL
80524: PUSH
80525: LD_VAR 0 4
80529: PUSH
80530: LD_INT 1
80532: ARRAY
80533: PUSH
80534: LD_INT 4
80536: ARRAY
80537: PUSH
80538: LD_VAR 0 2
80542: EQUAL
80543: AND
80544: ST_TO_ADDR
// end ;
80545: LD_VAR 0 3
80549: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80550: LD_INT 0
80552: PPUSH
// SetDir ( unit , d ) ;
80553: LD_VAR 0 1
80557: PPUSH
80558: LD_VAR 0 4
80562: PPUSH
80563: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80567: LD_VAR 0 1
80571: PPUSH
80572: LD_VAR 0 2
80576: PPUSH
80577: LD_VAR 0 3
80581: PPUSH
80582: LD_VAR 0 5
80586: PPUSH
80587: CALL_OW 48
// end ;
80591: LD_VAR 0 6
80595: RET
// export function ToNaturalNumber ( number ) ; begin
80596: LD_INT 0
80598: PPUSH
// result := number div 1 ;
80599: LD_ADDR_VAR 0 2
80603: PUSH
80604: LD_VAR 0 1
80608: PUSH
80609: LD_INT 1
80611: DIV
80612: ST_TO_ADDR
// if number < 0 then
80613: LD_VAR 0 1
80617: PUSH
80618: LD_INT 0
80620: LESS
80621: IFFALSE 80631
// result := 0 ;
80623: LD_ADDR_VAR 0 2
80627: PUSH
80628: LD_INT 0
80630: ST_TO_ADDR
// end ;
80631: LD_VAR 0 2
80635: RET
// export function SortByClass ( units , class ) ; var un ; begin
80636: LD_INT 0
80638: PPUSH
80639: PPUSH
// if not units or not class then
80640: LD_VAR 0 1
80644: NOT
80645: PUSH
80646: LD_VAR 0 2
80650: NOT
80651: OR
80652: IFFALSE 80656
// exit ;
80654: GO 80751
// result := [ ] ;
80656: LD_ADDR_VAR 0 3
80660: PUSH
80661: EMPTY
80662: ST_TO_ADDR
// for un in units do
80663: LD_ADDR_VAR 0 4
80667: PUSH
80668: LD_VAR 0 1
80672: PUSH
80673: FOR_IN
80674: IFFALSE 80749
// if GetClass ( un ) = class then
80676: LD_VAR 0 4
80680: PPUSH
80681: CALL_OW 257
80685: PUSH
80686: LD_VAR 0 2
80690: EQUAL
80691: IFFALSE 80718
// result := Insert ( result , 1 , un ) else
80693: LD_ADDR_VAR 0 3
80697: PUSH
80698: LD_VAR 0 3
80702: PPUSH
80703: LD_INT 1
80705: PPUSH
80706: LD_VAR 0 4
80710: PPUSH
80711: CALL_OW 2
80715: ST_TO_ADDR
80716: GO 80747
// result := Replace ( result , result + 1 , un ) ;
80718: LD_ADDR_VAR 0 3
80722: PUSH
80723: LD_VAR 0 3
80727: PPUSH
80728: LD_VAR 0 3
80732: PUSH
80733: LD_INT 1
80735: PLUS
80736: PPUSH
80737: LD_VAR 0 4
80741: PPUSH
80742: CALL_OW 1
80746: ST_TO_ADDR
80747: GO 80673
80749: POP
80750: POP
// end ;
80751: LD_VAR 0 3
80755: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80756: LD_INT 0
80758: PPUSH
80759: PPUSH
80760: PPUSH
80761: PPUSH
80762: PPUSH
80763: PPUSH
80764: PPUSH
// result := [ ] ;
80765: LD_ADDR_VAR 0 4
80769: PUSH
80770: EMPTY
80771: ST_TO_ADDR
// if x - r < 0 then
80772: LD_VAR 0 1
80776: PUSH
80777: LD_VAR 0 3
80781: MINUS
80782: PUSH
80783: LD_INT 0
80785: LESS
80786: IFFALSE 80798
// min_x := 0 else
80788: LD_ADDR_VAR 0 8
80792: PUSH
80793: LD_INT 0
80795: ST_TO_ADDR
80796: GO 80814
// min_x := x - r ;
80798: LD_ADDR_VAR 0 8
80802: PUSH
80803: LD_VAR 0 1
80807: PUSH
80808: LD_VAR 0 3
80812: MINUS
80813: ST_TO_ADDR
// if y - r < 0 then
80814: LD_VAR 0 2
80818: PUSH
80819: LD_VAR 0 3
80823: MINUS
80824: PUSH
80825: LD_INT 0
80827: LESS
80828: IFFALSE 80840
// min_y := 0 else
80830: LD_ADDR_VAR 0 7
80834: PUSH
80835: LD_INT 0
80837: ST_TO_ADDR
80838: GO 80856
// min_y := y - r ;
80840: LD_ADDR_VAR 0 7
80844: PUSH
80845: LD_VAR 0 2
80849: PUSH
80850: LD_VAR 0 3
80854: MINUS
80855: ST_TO_ADDR
// max_x := x + r ;
80856: LD_ADDR_VAR 0 9
80860: PUSH
80861: LD_VAR 0 1
80865: PUSH
80866: LD_VAR 0 3
80870: PLUS
80871: ST_TO_ADDR
// max_y := y + r ;
80872: LD_ADDR_VAR 0 10
80876: PUSH
80877: LD_VAR 0 2
80881: PUSH
80882: LD_VAR 0 3
80886: PLUS
80887: ST_TO_ADDR
// for _x = min_x to max_x do
80888: LD_ADDR_VAR 0 5
80892: PUSH
80893: DOUBLE
80894: LD_VAR 0 8
80898: DEC
80899: ST_TO_ADDR
80900: LD_VAR 0 9
80904: PUSH
80905: FOR_TO
80906: IFFALSE 81007
// for _y = min_y to max_y do
80908: LD_ADDR_VAR 0 6
80912: PUSH
80913: DOUBLE
80914: LD_VAR 0 7
80918: DEC
80919: ST_TO_ADDR
80920: LD_VAR 0 10
80924: PUSH
80925: FOR_TO
80926: IFFALSE 81003
// begin if not ValidHex ( _x , _y ) then
80928: LD_VAR 0 5
80932: PPUSH
80933: LD_VAR 0 6
80937: PPUSH
80938: CALL_OW 488
80942: NOT
80943: IFFALSE 80947
// continue ;
80945: GO 80925
// if GetResourceTypeXY ( _x , _y ) then
80947: LD_VAR 0 5
80951: PPUSH
80952: LD_VAR 0 6
80956: PPUSH
80957: CALL_OW 283
80961: IFFALSE 81001
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80963: LD_ADDR_VAR 0 4
80967: PUSH
80968: LD_VAR 0 4
80972: PPUSH
80973: LD_VAR 0 4
80977: PUSH
80978: LD_INT 1
80980: PLUS
80981: PPUSH
80982: LD_VAR 0 5
80986: PUSH
80987: LD_VAR 0 6
80991: PUSH
80992: EMPTY
80993: LIST
80994: LIST
80995: PPUSH
80996: CALL_OW 1
81000: ST_TO_ADDR
// end ;
81001: GO 80925
81003: POP
81004: POP
81005: GO 80905
81007: POP
81008: POP
// end ;
81009: LD_VAR 0 4
81013: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81014: LD_INT 0
81016: PPUSH
81017: PPUSH
81018: PPUSH
81019: PPUSH
81020: PPUSH
81021: PPUSH
81022: PPUSH
81023: PPUSH
// if not units then
81024: LD_VAR 0 1
81028: NOT
81029: IFFALSE 81033
// exit ;
81031: GO 81557
// result := UnitFilter ( units , [ f_ok ] ) ;
81033: LD_ADDR_VAR 0 3
81037: PUSH
81038: LD_VAR 0 1
81042: PPUSH
81043: LD_INT 50
81045: PUSH
81046: EMPTY
81047: LIST
81048: PPUSH
81049: CALL_OW 72
81053: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81054: LD_ADDR_VAR 0 8
81058: PUSH
81059: LD_VAR 0 1
81063: PUSH
81064: LD_INT 1
81066: ARRAY
81067: PPUSH
81068: CALL_OW 255
81072: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81073: LD_ADDR_VAR 0 10
81077: PUSH
81078: LD_INT 29
81080: PUSH
81081: LD_INT 91
81083: PUSH
81084: LD_INT 49
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: LIST
81091: ST_TO_ADDR
// if not result then
81092: LD_VAR 0 3
81096: NOT
81097: IFFALSE 81101
// exit ;
81099: GO 81557
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81101: LD_ADDR_VAR 0 5
81105: PUSH
81106: LD_INT 81
81108: PUSH
81109: LD_VAR 0 8
81113: PUSH
81114: EMPTY
81115: LIST
81116: LIST
81117: PPUSH
81118: CALL_OW 69
81122: ST_TO_ADDR
// for i in result do
81123: LD_ADDR_VAR 0 4
81127: PUSH
81128: LD_VAR 0 3
81132: PUSH
81133: FOR_IN
81134: IFFALSE 81555
// begin tag := GetTag ( i ) + 1 ;
81136: LD_ADDR_VAR 0 9
81140: PUSH
81141: LD_VAR 0 4
81145: PPUSH
81146: CALL_OW 110
81150: PUSH
81151: LD_INT 1
81153: PLUS
81154: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81155: LD_ADDR_VAR 0 7
81159: PUSH
81160: LD_VAR 0 4
81164: PPUSH
81165: CALL_OW 250
81169: PPUSH
81170: LD_VAR 0 4
81174: PPUSH
81175: CALL_OW 251
81179: PPUSH
81180: LD_INT 6
81182: PPUSH
81183: CALL 80756 0 3
81187: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81188: LD_VAR 0 4
81192: PPUSH
81193: CALL_OW 247
81197: PUSH
81198: LD_INT 2
81200: EQUAL
81201: PUSH
81202: LD_VAR 0 7
81206: AND
81207: PUSH
81208: LD_VAR 0 4
81212: PPUSH
81213: CALL_OW 264
81217: PUSH
81218: LD_VAR 0 10
81222: IN
81223: NOT
81224: AND
81225: IFFALSE 81264
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81227: LD_VAR 0 4
81231: PPUSH
81232: LD_VAR 0 7
81236: PUSH
81237: LD_INT 1
81239: ARRAY
81240: PUSH
81241: LD_INT 1
81243: ARRAY
81244: PPUSH
81245: LD_VAR 0 7
81249: PUSH
81250: LD_INT 1
81252: ARRAY
81253: PUSH
81254: LD_INT 2
81256: ARRAY
81257: PPUSH
81258: CALL_OW 116
81262: GO 81553
// if path > tag then
81264: LD_VAR 0 2
81268: PUSH
81269: LD_VAR 0 9
81273: GREATER
81274: IFFALSE 81482
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81276: LD_ADDR_VAR 0 6
81280: PUSH
81281: LD_VAR 0 5
81285: PPUSH
81286: LD_INT 91
81288: PUSH
81289: LD_VAR 0 4
81293: PUSH
81294: LD_INT 8
81296: PUSH
81297: EMPTY
81298: LIST
81299: LIST
81300: LIST
81301: PPUSH
81302: CALL_OW 72
81306: ST_TO_ADDR
// if nearEnemy then
81307: LD_VAR 0 6
81311: IFFALSE 81380
// begin if GetWeapon ( i ) = ru_time_lapser then
81313: LD_VAR 0 4
81317: PPUSH
81318: CALL_OW 264
81322: PUSH
81323: LD_INT 49
81325: EQUAL
81326: IFFALSE 81354
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81328: LD_VAR 0 4
81332: PPUSH
81333: LD_VAR 0 6
81337: PPUSH
81338: LD_VAR 0 4
81342: PPUSH
81343: CALL_OW 74
81347: PPUSH
81348: CALL_OW 112
81352: GO 81378
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81354: LD_VAR 0 4
81358: PPUSH
81359: LD_VAR 0 6
81363: PPUSH
81364: LD_VAR 0 4
81368: PPUSH
81369: CALL_OW 74
81373: PPUSH
81374: CALL 82628 0 2
// end else
81378: GO 81480
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81380: LD_VAR 0 4
81384: PPUSH
81385: LD_VAR 0 2
81389: PUSH
81390: LD_VAR 0 9
81394: ARRAY
81395: PUSH
81396: LD_INT 1
81398: ARRAY
81399: PPUSH
81400: LD_VAR 0 2
81404: PUSH
81405: LD_VAR 0 9
81409: ARRAY
81410: PUSH
81411: LD_INT 2
81413: ARRAY
81414: PPUSH
81415: CALL_OW 297
81419: PUSH
81420: LD_INT 6
81422: GREATER
81423: IFFALSE 81466
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81425: LD_VAR 0 4
81429: PPUSH
81430: LD_VAR 0 2
81434: PUSH
81435: LD_VAR 0 9
81439: ARRAY
81440: PUSH
81441: LD_INT 1
81443: ARRAY
81444: PPUSH
81445: LD_VAR 0 2
81449: PUSH
81450: LD_VAR 0 9
81454: ARRAY
81455: PUSH
81456: LD_INT 2
81458: ARRAY
81459: PPUSH
81460: CALL_OW 114
81464: GO 81480
// SetTag ( i , tag ) ;
81466: LD_VAR 0 4
81470: PPUSH
81471: LD_VAR 0 9
81475: PPUSH
81476: CALL_OW 109
// end else
81480: GO 81553
// if enemy then
81482: LD_VAR 0 5
81486: IFFALSE 81553
// begin if GetWeapon ( i ) = ru_time_lapser then
81488: LD_VAR 0 4
81492: PPUSH
81493: CALL_OW 264
81497: PUSH
81498: LD_INT 49
81500: EQUAL
81501: IFFALSE 81529
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81503: LD_VAR 0 4
81507: PPUSH
81508: LD_VAR 0 5
81512: PPUSH
81513: LD_VAR 0 4
81517: PPUSH
81518: CALL_OW 74
81522: PPUSH
81523: CALL_OW 112
81527: GO 81553
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81529: LD_VAR 0 4
81533: PPUSH
81534: LD_VAR 0 5
81538: PPUSH
81539: LD_VAR 0 4
81543: PPUSH
81544: CALL_OW 74
81548: PPUSH
81549: CALL 82628 0 2
// end ; end ;
81553: GO 81133
81555: POP
81556: POP
// end ;
81557: LD_VAR 0 3
81561: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81562: LD_INT 0
81564: PPUSH
81565: PPUSH
81566: PPUSH
// if not unit or IsInUnit ( unit ) then
81567: LD_VAR 0 1
81571: NOT
81572: PUSH
81573: LD_VAR 0 1
81577: PPUSH
81578: CALL_OW 310
81582: OR
81583: IFFALSE 81587
// exit ;
81585: GO 81678
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81587: LD_ADDR_VAR 0 4
81591: PUSH
81592: LD_VAR 0 1
81596: PPUSH
81597: CALL_OW 250
81601: PPUSH
81602: LD_VAR 0 2
81606: PPUSH
81607: LD_INT 1
81609: PPUSH
81610: CALL_OW 272
81614: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81615: LD_ADDR_VAR 0 5
81619: PUSH
81620: LD_VAR 0 1
81624: PPUSH
81625: CALL_OW 251
81629: PPUSH
81630: LD_VAR 0 2
81634: PPUSH
81635: LD_INT 1
81637: PPUSH
81638: CALL_OW 273
81642: ST_TO_ADDR
// if ValidHex ( x , y ) then
81643: LD_VAR 0 4
81647: PPUSH
81648: LD_VAR 0 5
81652: PPUSH
81653: CALL_OW 488
81657: IFFALSE 81678
// ComTurnXY ( unit , x , y ) ;
81659: LD_VAR 0 1
81663: PPUSH
81664: LD_VAR 0 4
81668: PPUSH
81669: LD_VAR 0 5
81673: PPUSH
81674: CALL_OW 118
// end ;
81678: LD_VAR 0 3
81682: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81683: LD_INT 0
81685: PPUSH
81686: PPUSH
// result := false ;
81687: LD_ADDR_VAR 0 3
81691: PUSH
81692: LD_INT 0
81694: ST_TO_ADDR
// if not units then
81695: LD_VAR 0 2
81699: NOT
81700: IFFALSE 81704
// exit ;
81702: GO 81749
// for i in units do
81704: LD_ADDR_VAR 0 4
81708: PUSH
81709: LD_VAR 0 2
81713: PUSH
81714: FOR_IN
81715: IFFALSE 81747
// if See ( side , i ) then
81717: LD_VAR 0 1
81721: PPUSH
81722: LD_VAR 0 4
81726: PPUSH
81727: CALL_OW 292
81731: IFFALSE 81745
// begin result := true ;
81733: LD_ADDR_VAR 0 3
81737: PUSH
81738: LD_INT 1
81740: ST_TO_ADDR
// exit ;
81741: POP
81742: POP
81743: GO 81749
// end ;
81745: GO 81714
81747: POP
81748: POP
// end ;
81749: LD_VAR 0 3
81753: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81754: LD_INT 0
81756: PPUSH
81757: PPUSH
81758: PPUSH
81759: PPUSH
// if not unit or not points then
81760: LD_VAR 0 1
81764: NOT
81765: PUSH
81766: LD_VAR 0 2
81770: NOT
81771: OR
81772: IFFALSE 81776
// exit ;
81774: GO 81866
// dist := 99999 ;
81776: LD_ADDR_VAR 0 5
81780: PUSH
81781: LD_INT 99999
81783: ST_TO_ADDR
// for i in points do
81784: LD_ADDR_VAR 0 4
81788: PUSH
81789: LD_VAR 0 2
81793: PUSH
81794: FOR_IN
81795: IFFALSE 81864
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81797: LD_ADDR_VAR 0 6
81801: PUSH
81802: LD_VAR 0 1
81806: PPUSH
81807: LD_VAR 0 4
81811: PUSH
81812: LD_INT 1
81814: ARRAY
81815: PPUSH
81816: LD_VAR 0 4
81820: PUSH
81821: LD_INT 2
81823: ARRAY
81824: PPUSH
81825: CALL_OW 297
81829: ST_TO_ADDR
// if tmpDist < dist then
81830: LD_VAR 0 6
81834: PUSH
81835: LD_VAR 0 5
81839: LESS
81840: IFFALSE 81862
// begin result := i ;
81842: LD_ADDR_VAR 0 3
81846: PUSH
81847: LD_VAR 0 4
81851: ST_TO_ADDR
// dist := tmpDist ;
81852: LD_ADDR_VAR 0 5
81856: PUSH
81857: LD_VAR 0 6
81861: ST_TO_ADDR
// end ; end ;
81862: GO 81794
81864: POP
81865: POP
// end ;
81866: LD_VAR 0 3
81870: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81871: LD_INT 0
81873: PPUSH
// uc_side := side ;
81874: LD_ADDR_OWVAR 20
81878: PUSH
81879: LD_VAR 0 1
81883: ST_TO_ADDR
// uc_nation := 3 ;
81884: LD_ADDR_OWVAR 21
81888: PUSH
81889: LD_INT 3
81891: ST_TO_ADDR
// vc_chassis := 25 ;
81892: LD_ADDR_OWVAR 37
81896: PUSH
81897: LD_INT 25
81899: ST_TO_ADDR
// vc_engine := engine_siberite ;
81900: LD_ADDR_OWVAR 39
81904: PUSH
81905: LD_INT 3
81907: ST_TO_ADDR
// vc_control := control_computer ;
81908: LD_ADDR_OWVAR 38
81912: PUSH
81913: LD_INT 3
81915: ST_TO_ADDR
// vc_weapon := 59 ;
81916: LD_ADDR_OWVAR 40
81920: PUSH
81921: LD_INT 59
81923: ST_TO_ADDR
// result := CreateVehicle ;
81924: LD_ADDR_VAR 0 5
81928: PUSH
81929: CALL_OW 45
81933: ST_TO_ADDR
// SetDir ( result , d ) ;
81934: LD_VAR 0 5
81938: PPUSH
81939: LD_VAR 0 4
81943: PPUSH
81944: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81948: LD_VAR 0 5
81952: PPUSH
81953: LD_VAR 0 2
81957: PPUSH
81958: LD_VAR 0 3
81962: PPUSH
81963: LD_INT 0
81965: PPUSH
81966: CALL_OW 48
// end ;
81970: LD_VAR 0 5
81974: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81975: LD_INT 0
81977: PPUSH
81978: PPUSH
81979: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81980: LD_ADDR_VAR 0 2
81984: PUSH
81985: LD_INT 0
81987: PUSH
81988: LD_INT 0
81990: PUSH
81991: LD_INT 0
81993: PUSH
81994: LD_INT 0
81996: PUSH
81997: EMPTY
81998: LIST
81999: LIST
82000: LIST
82001: LIST
82002: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82003: LD_VAR 0 1
82007: NOT
82008: PUSH
82009: LD_VAR 0 1
82013: PPUSH
82014: CALL_OW 264
82018: PUSH
82019: LD_INT 12
82021: PUSH
82022: LD_INT 51
82024: PUSH
82025: LD_INT 32
82027: PUSH
82028: LD_INT 89
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: LIST
82035: LIST
82036: IN
82037: NOT
82038: OR
82039: IFFALSE 82043
// exit ;
82041: GO 82141
// for i := 1 to 3 do
82043: LD_ADDR_VAR 0 3
82047: PUSH
82048: DOUBLE
82049: LD_INT 1
82051: DEC
82052: ST_TO_ADDR
82053: LD_INT 3
82055: PUSH
82056: FOR_TO
82057: IFFALSE 82139
// begin tmp := GetCargo ( cargo , i ) ;
82059: LD_ADDR_VAR 0 4
82063: PUSH
82064: LD_VAR 0 1
82068: PPUSH
82069: LD_VAR 0 3
82073: PPUSH
82074: CALL_OW 289
82078: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82079: LD_ADDR_VAR 0 2
82083: PUSH
82084: LD_VAR 0 2
82088: PPUSH
82089: LD_VAR 0 3
82093: PPUSH
82094: LD_VAR 0 4
82098: PPUSH
82099: CALL_OW 1
82103: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82104: LD_ADDR_VAR 0 2
82108: PUSH
82109: LD_VAR 0 2
82113: PPUSH
82114: LD_INT 4
82116: PPUSH
82117: LD_VAR 0 2
82121: PUSH
82122: LD_INT 4
82124: ARRAY
82125: PUSH
82126: LD_VAR 0 4
82130: PLUS
82131: PPUSH
82132: CALL_OW 1
82136: ST_TO_ADDR
// end ;
82137: GO 82056
82139: POP
82140: POP
// end ;
82141: LD_VAR 0 2
82145: RET
// export function Length ( array ) ; begin
82146: LD_INT 0
82148: PPUSH
// result := array + 0 ;
82149: LD_ADDR_VAR 0 2
82153: PUSH
82154: LD_VAR 0 1
82158: PUSH
82159: LD_INT 0
82161: PLUS
82162: ST_TO_ADDR
// end ;
82163: LD_VAR 0 2
82167: RET
// export function PrepareArray ( array ) ; begin
82168: LD_INT 0
82170: PPUSH
// result := array diff 0 ;
82171: LD_ADDR_VAR 0 2
82175: PUSH
82176: LD_VAR 0 1
82180: PUSH
82181: LD_INT 0
82183: DIFF
82184: ST_TO_ADDR
// if not result [ 1 ] then
82185: LD_VAR 0 2
82189: PUSH
82190: LD_INT 1
82192: ARRAY
82193: NOT
82194: IFFALSE 82214
// result := Delete ( result , 1 ) ;
82196: LD_ADDR_VAR 0 2
82200: PUSH
82201: LD_VAR 0 2
82205: PPUSH
82206: LD_INT 1
82208: PPUSH
82209: CALL_OW 3
82213: ST_TO_ADDR
// end ;
82214: LD_VAR 0 2
82218: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82219: LD_INT 0
82221: PPUSH
82222: PPUSH
82223: PPUSH
82224: PPUSH
// sibRocketRange := 25 ;
82225: LD_ADDR_VAR 0 6
82229: PUSH
82230: LD_INT 25
82232: ST_TO_ADDR
// result := false ;
82233: LD_ADDR_VAR 0 4
82237: PUSH
82238: LD_INT 0
82240: ST_TO_ADDR
// for i := 0 to 5 do
82241: LD_ADDR_VAR 0 5
82245: PUSH
82246: DOUBLE
82247: LD_INT 0
82249: DEC
82250: ST_TO_ADDR
82251: LD_INT 5
82253: PUSH
82254: FOR_TO
82255: IFFALSE 82322
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82257: LD_VAR 0 1
82261: PPUSH
82262: LD_VAR 0 5
82266: PPUSH
82267: LD_VAR 0 6
82271: PPUSH
82272: CALL_OW 272
82276: PPUSH
82277: LD_VAR 0 2
82281: PPUSH
82282: LD_VAR 0 5
82286: PPUSH
82287: LD_VAR 0 6
82291: PPUSH
82292: CALL_OW 273
82296: PPUSH
82297: LD_VAR 0 3
82301: PPUSH
82302: CALL_OW 309
82306: IFFALSE 82320
// begin result := true ;
82308: LD_ADDR_VAR 0 4
82312: PUSH
82313: LD_INT 1
82315: ST_TO_ADDR
// exit ;
82316: POP
82317: POP
82318: GO 82324
// end ;
82320: GO 82254
82322: POP
82323: POP
// end ;
82324: LD_VAR 0 4
82328: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82329: LD_INT 0
82331: PPUSH
82332: PPUSH
82333: PPUSH
// if btype = b_depot then
82334: LD_VAR 0 2
82338: PUSH
82339: LD_INT 0
82341: EQUAL
82342: IFFALSE 82354
// begin result := true ;
82344: LD_ADDR_VAR 0 3
82348: PUSH
82349: LD_INT 1
82351: ST_TO_ADDR
// exit ;
82352: GO 82470
// end ; pom := GetBase ( depot ) ;
82354: LD_ADDR_VAR 0 4
82358: PUSH
82359: LD_VAR 0 1
82363: PPUSH
82364: CALL_OW 274
82368: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82369: LD_ADDR_VAR 0 5
82373: PUSH
82374: LD_VAR 0 2
82378: PPUSH
82379: LD_VAR 0 1
82383: PPUSH
82384: CALL_OW 248
82388: PPUSH
82389: CALL_OW 450
82393: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82394: LD_ADDR_VAR 0 3
82398: PUSH
82399: LD_VAR 0 4
82403: PPUSH
82404: LD_INT 1
82406: PPUSH
82407: CALL_OW 275
82411: PUSH
82412: LD_VAR 0 5
82416: PUSH
82417: LD_INT 1
82419: ARRAY
82420: GREATEREQUAL
82421: PUSH
82422: LD_VAR 0 4
82426: PPUSH
82427: LD_INT 2
82429: PPUSH
82430: CALL_OW 275
82434: PUSH
82435: LD_VAR 0 5
82439: PUSH
82440: LD_INT 2
82442: ARRAY
82443: GREATEREQUAL
82444: AND
82445: PUSH
82446: LD_VAR 0 4
82450: PPUSH
82451: LD_INT 3
82453: PPUSH
82454: CALL_OW 275
82458: PUSH
82459: LD_VAR 0 5
82463: PUSH
82464: LD_INT 3
82466: ARRAY
82467: GREATEREQUAL
82468: AND
82469: ST_TO_ADDR
// end ;
82470: LD_VAR 0 3
82474: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82475: LD_INT 0
82477: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82478: LD_VAR 0 1
82482: PPUSH
82483: LD_VAR 0 2
82487: PPUSH
82488: LD_INT 0
82490: PPUSH
82491: LD_INT 0
82493: PPUSH
82494: LD_INT 1
82496: PPUSH
82497: LD_INT 0
82499: PPUSH
82500: CALL_OW 587
// end ;
82504: LD_VAR 0 3
82508: RET
// export function CenterOnNow ( unit ) ; begin
82509: LD_INT 0
82511: PPUSH
// result := IsInUnit ( unit ) ;
82512: LD_ADDR_VAR 0 2
82516: PUSH
82517: LD_VAR 0 1
82521: PPUSH
82522: CALL_OW 310
82526: ST_TO_ADDR
// if not result then
82527: LD_VAR 0 2
82531: NOT
82532: IFFALSE 82544
// result := unit ;
82534: LD_ADDR_VAR 0 2
82538: PUSH
82539: LD_VAR 0 1
82543: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82544: LD_VAR 0 1
82548: PPUSH
82549: CALL_OW 87
// end ;
82553: LD_VAR 0 2
82557: RET
// export function ComMoveHex ( unit , hex ) ; begin
82558: LD_INT 0
82560: PPUSH
// if not hex then
82561: LD_VAR 0 2
82565: NOT
82566: IFFALSE 82570
// exit ;
82568: GO 82623
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82570: LD_VAR 0 2
82574: PUSH
82575: LD_INT 1
82577: ARRAY
82578: PPUSH
82579: LD_VAR 0 2
82583: PUSH
82584: LD_INT 2
82586: ARRAY
82587: PPUSH
82588: CALL_OW 428
82592: IFFALSE 82596
// exit ;
82594: GO 82623
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82596: LD_VAR 0 1
82600: PPUSH
82601: LD_VAR 0 2
82605: PUSH
82606: LD_INT 1
82608: ARRAY
82609: PPUSH
82610: LD_VAR 0 2
82614: PUSH
82615: LD_INT 2
82617: ARRAY
82618: PPUSH
82619: CALL_OW 111
// end ;
82623: LD_VAR 0 3
82627: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82628: LD_INT 0
82630: PPUSH
82631: PPUSH
82632: PPUSH
// if not unit or not enemy then
82633: LD_VAR 0 1
82637: NOT
82638: PUSH
82639: LD_VAR 0 2
82643: NOT
82644: OR
82645: IFFALSE 82649
// exit ;
82647: GO 82773
// x := GetX ( enemy ) ;
82649: LD_ADDR_VAR 0 4
82653: PUSH
82654: LD_VAR 0 2
82658: PPUSH
82659: CALL_OW 250
82663: ST_TO_ADDR
// y := GetY ( enemy ) ;
82664: LD_ADDR_VAR 0 5
82668: PUSH
82669: LD_VAR 0 2
82673: PPUSH
82674: CALL_OW 251
82678: ST_TO_ADDR
// if ValidHex ( x , y ) then
82679: LD_VAR 0 4
82683: PPUSH
82684: LD_VAR 0 5
82688: PPUSH
82689: CALL_OW 488
82693: IFFALSE 82773
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82695: LD_VAR 0 2
82699: PPUSH
82700: CALL_OW 247
82704: PUSH
82705: LD_INT 3
82707: PUSH
82708: LD_INT 2
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: IN
82715: PUSH
82716: LD_VAR 0 1
82720: PPUSH
82721: CALL_OW 255
82725: PPUSH
82726: LD_VAR 0 2
82730: PPUSH
82731: CALL_OW 292
82735: OR
82736: IFFALSE 82754
// ComAttackUnit ( unit , enemy ) else
82738: LD_VAR 0 1
82742: PPUSH
82743: LD_VAR 0 2
82747: PPUSH
82748: CALL_OW 115
82752: GO 82773
// ComAgressiveMove ( unit , x , y ) ;
82754: LD_VAR 0 1
82758: PPUSH
82759: LD_VAR 0 4
82763: PPUSH
82764: LD_VAR 0 5
82768: PPUSH
82769: CALL_OW 114
// end ;
82773: LD_VAR 0 3
82777: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82778: LD_INT 0
82780: PPUSH
82781: PPUSH
82782: PPUSH
// list := AreaToList ( area , 0 ) ;
82783: LD_ADDR_VAR 0 5
82787: PUSH
82788: LD_VAR 0 1
82792: PPUSH
82793: LD_INT 0
82795: PPUSH
82796: CALL_OW 517
82800: ST_TO_ADDR
// if not list then
82801: LD_VAR 0 5
82805: NOT
82806: IFFALSE 82810
// exit ;
82808: GO 82940
// if all then
82810: LD_VAR 0 2
82814: IFFALSE 82902
// begin for i := 1 to list [ 1 ] do
82816: LD_ADDR_VAR 0 4
82820: PUSH
82821: DOUBLE
82822: LD_INT 1
82824: DEC
82825: ST_TO_ADDR
82826: LD_VAR 0 5
82830: PUSH
82831: LD_INT 1
82833: ARRAY
82834: PUSH
82835: FOR_TO
82836: IFFALSE 82898
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82838: LD_ADDR_VAR 0 3
82842: PUSH
82843: LD_VAR 0 3
82847: PPUSH
82848: LD_VAR 0 3
82852: PUSH
82853: LD_INT 1
82855: PLUS
82856: PPUSH
82857: LD_VAR 0 5
82861: PUSH
82862: LD_INT 1
82864: ARRAY
82865: PUSH
82866: LD_VAR 0 4
82870: ARRAY
82871: PUSH
82872: LD_VAR 0 5
82876: PUSH
82877: LD_INT 2
82879: ARRAY
82880: PUSH
82881: LD_VAR 0 4
82885: ARRAY
82886: PUSH
82887: EMPTY
82888: LIST
82889: LIST
82890: PPUSH
82891: CALL_OW 1
82895: ST_TO_ADDR
82896: GO 82835
82898: POP
82899: POP
// exit ;
82900: GO 82940
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82902: LD_ADDR_VAR 0 3
82906: PUSH
82907: LD_VAR 0 5
82911: PUSH
82912: LD_INT 1
82914: ARRAY
82915: PUSH
82916: LD_INT 1
82918: ARRAY
82919: PUSH
82920: LD_VAR 0 5
82924: PUSH
82925: LD_INT 2
82927: ARRAY
82928: PUSH
82929: LD_INT 1
82931: ARRAY
82932: PUSH
82933: EMPTY
82934: LIST
82935: LIST
82936: PUSH
82937: EMPTY
82938: LIST
82939: ST_TO_ADDR
// end ;
82940: LD_VAR 0 3
82944: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82945: LD_INT 0
82947: PPUSH
82948: PPUSH
// list := AreaToList ( area , 0 ) ;
82949: LD_ADDR_VAR 0 4
82953: PUSH
82954: LD_VAR 0 1
82958: PPUSH
82959: LD_INT 0
82961: PPUSH
82962: CALL_OW 517
82966: ST_TO_ADDR
// if not list then
82967: LD_VAR 0 4
82971: NOT
82972: IFFALSE 82976
// exit ;
82974: GO 83017
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82976: LD_ADDR_VAR 0 3
82980: PUSH
82981: LD_VAR 0 4
82985: PUSH
82986: LD_INT 1
82988: ARRAY
82989: PUSH
82990: LD_INT 1
82992: ARRAY
82993: PUSH
82994: LD_VAR 0 4
82998: PUSH
82999: LD_INT 2
83001: ARRAY
83002: PUSH
83003: LD_INT 1
83005: ARRAY
83006: PUSH
83007: LD_VAR 0 2
83011: PUSH
83012: EMPTY
83013: LIST
83014: LIST
83015: LIST
83016: ST_TO_ADDR
// end ;
83017: LD_VAR 0 3
83021: RET
// export function First ( array ) ; begin
83022: LD_INT 0
83024: PPUSH
// if not array then
83025: LD_VAR 0 1
83029: NOT
83030: IFFALSE 83034
// exit ;
83032: GO 83048
// result := array [ 1 ] ;
83034: LD_ADDR_VAR 0 2
83038: PUSH
83039: LD_VAR 0 1
83043: PUSH
83044: LD_INT 1
83046: ARRAY
83047: ST_TO_ADDR
// end ;
83048: LD_VAR 0 2
83052: RET
// export function Last ( array ) ; begin
83053: LD_INT 0
83055: PPUSH
// if not array then
83056: LD_VAR 0 1
83060: NOT
83061: IFFALSE 83065
// exit ;
83063: GO 83081
// result := array [ array ] ;
83065: LD_ADDR_VAR 0 2
83069: PUSH
83070: LD_VAR 0 1
83074: PUSH
83075: LD_VAR 0 1
83079: ARRAY
83080: ST_TO_ADDR
// end ;
83081: LD_VAR 0 2
83085: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83086: LD_INT 0
83088: PPUSH
83089: PPUSH
// result := [ ] ;
83090: LD_ADDR_VAR 0 5
83094: PUSH
83095: EMPTY
83096: ST_TO_ADDR
// if not array then
83097: LD_VAR 0 1
83101: NOT
83102: IFFALSE 83106
// exit ;
83104: GO 83218
// for i := 1 to array do
83106: LD_ADDR_VAR 0 6
83110: PUSH
83111: DOUBLE
83112: LD_INT 1
83114: DEC
83115: ST_TO_ADDR
83116: LD_VAR 0 1
83120: PUSH
83121: FOR_TO
83122: IFFALSE 83216
// if array [ i ] [ index ] = value then
83124: LD_VAR 0 1
83128: PUSH
83129: LD_VAR 0 6
83133: ARRAY
83134: PUSH
83135: LD_VAR 0 2
83139: ARRAY
83140: PUSH
83141: LD_VAR 0 3
83145: EQUAL
83146: IFFALSE 83214
// begin if indexColumn then
83148: LD_VAR 0 4
83152: IFFALSE 83188
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83154: LD_ADDR_VAR 0 5
83158: PUSH
83159: LD_VAR 0 5
83163: PPUSH
83164: LD_VAR 0 1
83168: PUSH
83169: LD_VAR 0 6
83173: ARRAY
83174: PUSH
83175: LD_VAR 0 4
83179: ARRAY
83180: PPUSH
83181: CALL 78410 0 2
83185: ST_TO_ADDR
83186: GO 83214
// result := Join ( result , array [ i ] ) ;
83188: LD_ADDR_VAR 0 5
83192: PUSH
83193: LD_VAR 0 5
83197: PPUSH
83198: LD_VAR 0 1
83202: PUSH
83203: LD_VAR 0 6
83207: ARRAY
83208: PPUSH
83209: CALL 78410 0 2
83213: ST_TO_ADDR
// end ;
83214: GO 83121
83216: POP
83217: POP
// end ;
83218: LD_VAR 0 5
83222: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83223: LD_INT 0
83225: PPUSH
// if not vehicles or not parkingPoint then
83226: LD_VAR 0 1
83230: NOT
83231: PUSH
83232: LD_VAR 0 2
83236: NOT
83237: OR
83238: IFFALSE 83242
// exit ;
83240: GO 83340
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83242: LD_ADDR_VAR 0 1
83246: PUSH
83247: LD_VAR 0 1
83251: PPUSH
83252: LD_INT 50
83254: PUSH
83255: EMPTY
83256: LIST
83257: PUSH
83258: LD_INT 3
83260: PUSH
83261: LD_INT 92
83263: PUSH
83264: LD_VAR 0 2
83268: PUSH
83269: LD_INT 1
83271: ARRAY
83272: PUSH
83273: LD_VAR 0 2
83277: PUSH
83278: LD_INT 2
83280: ARRAY
83281: PUSH
83282: LD_INT 8
83284: PUSH
83285: EMPTY
83286: LIST
83287: LIST
83288: LIST
83289: LIST
83290: PUSH
83291: EMPTY
83292: LIST
83293: LIST
83294: PUSH
83295: EMPTY
83296: LIST
83297: LIST
83298: PPUSH
83299: CALL_OW 72
83303: ST_TO_ADDR
// if not vehicles then
83304: LD_VAR 0 1
83308: NOT
83309: IFFALSE 83313
// exit ;
83311: GO 83340
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83313: LD_VAR 0 1
83317: PPUSH
83318: LD_VAR 0 2
83322: PUSH
83323: LD_INT 1
83325: ARRAY
83326: PPUSH
83327: LD_VAR 0 2
83331: PUSH
83332: LD_INT 2
83334: ARRAY
83335: PPUSH
83336: CALL_OW 111
// end ;
83340: LD_VAR 0 3
83344: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83345: LD_INT 0
83347: PPUSH
83348: PPUSH
83349: PPUSH
// if not side or not area then
83350: LD_VAR 0 1
83354: NOT
83355: PUSH
83356: LD_VAR 0 2
83360: NOT
83361: OR
83362: IFFALSE 83366
// exit ;
83364: GO 83485
// tmp := AreaToList ( area , 0 ) ;
83366: LD_ADDR_VAR 0 5
83370: PUSH
83371: LD_VAR 0 2
83375: PPUSH
83376: LD_INT 0
83378: PPUSH
83379: CALL_OW 517
83383: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83384: LD_ADDR_VAR 0 4
83388: PUSH
83389: DOUBLE
83390: LD_INT 1
83392: DEC
83393: ST_TO_ADDR
83394: LD_VAR 0 5
83398: PUSH
83399: LD_INT 1
83401: ARRAY
83402: PUSH
83403: FOR_TO
83404: IFFALSE 83483
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83406: LD_VAR 0 5
83410: PUSH
83411: LD_INT 1
83413: ARRAY
83414: PUSH
83415: LD_VAR 0 4
83419: ARRAY
83420: PPUSH
83421: LD_VAR 0 5
83425: PUSH
83426: LD_INT 2
83428: ARRAY
83429: PUSH
83430: LD_VAR 0 4
83434: ARRAY
83435: PPUSH
83436: CALL_OW 351
83440: IFFALSE 83481
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83442: LD_VAR 0 5
83446: PUSH
83447: LD_INT 1
83449: ARRAY
83450: PUSH
83451: LD_VAR 0 4
83455: ARRAY
83456: PPUSH
83457: LD_VAR 0 5
83461: PUSH
83462: LD_INT 2
83464: ARRAY
83465: PUSH
83466: LD_VAR 0 4
83470: ARRAY
83471: PPUSH
83472: LD_VAR 0 1
83476: PPUSH
83477: CALL_OW 244
// end ;
83481: GO 83403
83483: POP
83484: POP
// end ; end_of_file
83485: LD_VAR 0 3
83489: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83490: LD_VAR 0 1
83494: PUSH
83495: LD_INT 200
83497: DOUBLE
83498: GREATEREQUAL
83499: IFFALSE 83507
83501: LD_INT 299
83503: DOUBLE
83504: LESSEQUAL
83505: IFTRUE 83509
83507: GO 83541
83509: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83510: LD_VAR 0 1
83514: PPUSH
83515: LD_VAR 0 2
83519: PPUSH
83520: LD_VAR 0 3
83524: PPUSH
83525: LD_VAR 0 4
83529: PPUSH
83530: LD_VAR 0 5
83534: PPUSH
83535: CALL 36201 0 5
83539: GO 83618
83541: LD_INT 300
83543: DOUBLE
83544: GREATEREQUAL
83545: IFFALSE 83553
83547: LD_INT 399
83549: DOUBLE
83550: LESSEQUAL
83551: IFTRUE 83555
83553: GO 83617
83555: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83556: LD_VAR 0 1
83560: PPUSH
83561: LD_VAR 0 2
83565: PPUSH
83566: LD_VAR 0 3
83570: PPUSH
83571: LD_VAR 0 4
83575: PPUSH
83576: LD_VAR 0 5
83580: PPUSH
83581: LD_VAR 0 6
83585: PPUSH
83586: LD_VAR 0 7
83590: PPUSH
83591: LD_VAR 0 8
83595: PPUSH
83596: LD_VAR 0 9
83600: PPUSH
83601: LD_VAR 0 10
83605: PPUSH
83606: LD_VAR 0 11
83610: PPUSH
83611: CALL 32526 0 11
83615: GO 83618
83617: POP
// end ;
83618: PPOPN 11
83620: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83621: LD_VAR 0 1
83625: PPUSH
83626: LD_VAR 0 2
83630: PPUSH
83631: LD_VAR 0 3
83635: PPUSH
83636: LD_VAR 0 4
83640: PPUSH
83641: LD_VAR 0 5
83645: PPUSH
83646: CALL 35937 0 5
// end ; end_of_file
83650: PPOPN 5
83652: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83653: LD_VAR 0 1
83657: PPUSH
83658: LD_VAR 0 2
83662: PPUSH
83663: LD_VAR 0 3
83667: PPUSH
83668: LD_VAR 0 4
83672: PPUSH
83673: LD_VAR 0 5
83677: PPUSH
83678: LD_VAR 0 6
83682: PPUSH
83683: CALL 20178 0 6
// end ;
83687: PPOPN 6
83689: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83690: LD_INT 0
83692: PPUSH
// begin if not units then
83693: LD_VAR 0 1
83697: NOT
83698: IFFALSE 83702
// exit ;
83700: GO 83702
// end ;
83702: PPOPN 7
83704: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83705: CALL 20065 0 0
// end ;
83709: PPOPN 1
83711: END
